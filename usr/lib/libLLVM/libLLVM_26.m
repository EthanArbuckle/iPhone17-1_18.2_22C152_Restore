uint64_t llvm::AttributeList::removeAttributeAtIndex(uint64_t *a1, uint64_t *a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void v11[5];

  v11[4] = *MEMORY[0x1E4F143B8];
  v4 = *a1;
  if (*a1)
  {
    v5 = (a3 + 1);
    v6 = *(unsigned int *)(v4 + 8);
    if (v5 < v6)
    {
      v7 = *(void *)(v4 + 40 + 8 * v5);
      if (v7)
      {
        if ((*(unsigned __int8 *)(v7 + a4 / 8 + 12) >> (a4 & 7)))
        {
          if (v6 >= 5) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memcpy(v11, (const void *)(v4 + 40), 8 * v6);
          v11[v5] = llvm::AttributeSet::removeAttribute(&v11[v5], a2, a4);
          return llvm::AttributeList::getImpl(a2, v11, v6);
        }
      }
    }
  }
  return v4;
}

uint64_t llvm::AttributeList::removeAttributeAtIndex(uint64_t *a1, uint64_t *a2, int a3, void *a4, size_t a5)
{
  v16[4] = *MEMORY[0x1E4F143B8];
  if ((llvm::AttributeList::hasAttributeAtIndex(a1, a3, a4, a5) & 1) == 0) {
    return *a1;
  }
  uint64_t v10 = *a1;
  uint64_t v11 = *a1 + 40;
  if (*a1) {
    v12 = (unsigned char *)(*a1 + 40);
  }
  else {
    v12 = 0;
  }
  if (v10) {
    v13 = (unsigned char *)(v11 + 8 * *(unsigned int *)(v10 + 8));
  }
  else {
    v13 = 0;
  }
  if ((unint64_t)(v13 - v12) >= 0x21) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v12 != v13) {
    memcpy(v16, v12, v13 - v12);
  }
  v16[a3 + 1] = llvm::AttributeSet::removeAttribute(&v16[a3 + 1], a2, a4, a5);
  return llvm::AttributeList::getImpl(a2, v16, ((unint64_t)(v13 - v12) >> 3));
}

uint64_t llvm::AttributeList::hasAttributeAtIndex(uint64_t *a1, int a2, void *a3, size_t a4)
{
  uint64_t v4 = *a1;
  if (!*a1) {
    return 0;
  }
  if ((a2 + 1) >= *(_DWORD *)(v4 + 8)) {
    return 0;
  }
  uint64_t v5 = *(void *)(v4 + 8 * (a2 + 1) + 40);
  if (!v5) {
    return 0;
  }
  int v6 = *(_DWORD *)(v5 + 40);
  if (!v6) {
    return 0;
  }
  uint64_t v9 = *(void *)(v5 + 24);
  int v10 = sub_1CD0B03C8(a3, (uint64_t)a3 + a4);
  unsigned int v11 = v6 - 1;
  for (int i = 1; ; ++i)
  {
    int v13 = v10 & v11;
    uint64_t v14 = v9 + 24 * (v10 & v11);
    v15 = *(const void **)v14;
    if (*(void *)v14 == -1)
    {
      if (a3 == (void *)-1) {
        return 1;
      }
      goto LABEL_8;
    }
    if (v15 != (const void *)-2) {
      break;
    }
    if (a3 == (void *)-2) {
      return 1;
    }
LABEL_8:
    if (v15 == (const void *)-1) {
      return 0;
    }
    int v10 = i + v13;
  }
  if (a4 != *(void *)(v14 + 8) || a4 && memcmp(a3, v15, a4)) {
    goto LABEL_8;
  }
  return 1;
}

uint64_t llvm::AttributeList::removeAttributesAtIndex(void *a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v7 = *a1;
  if (*a1 && (a3 + 1) < *(_DWORD *)(v7 + 8)) {
    uint64_t v8 = *(void *)(v7 + 8 * (a3 + 1) + 40);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v11 = v8;
  uint64_t v9 = llvm::AttributeSet::removeAttributes(&v11, a2, a4);
  if (v8 == v9) {
    return *a1;
  }

  return llvm::AttributeList::setAttributesAtIndex(a1, a2, a3, v9);
}

uint64_t llvm::AttributeList::addDereferenceableRetAttr(llvm::AttributeList *this, llvm::LLVMContext *a2, uint64_t a3)
{
  v11[8] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = a2;
  v10[0] = v11;
  v10[1] = (void *)0x800000000;
  if (a3)
  {
    unint64_t v5 = llvm::Attribute::get((uint64_t *)a2, 0x4Cu, a3);
    if (!v5)
    {
      int v6 = 0;
      goto LABEL_5;
    }
    if (*(unsigned char *)(v5 + 8) != 2)
    {
      int v6 = *(_DWORD *)(v5 + 12);
LABEL_5:
      sub_1CC50F4B4((unsigned int *)v10, v6, v5);
      goto LABEL_6;
    }
    sub_1CC50F2F8((uint64_t)v10, (void *)(v5 + 24), *(unsigned int *)(v5 + 12), v5);
  }
LABEL_6:
  uint64_t v7 = llvm::AttributeList::addAttributesAtIndex(this, a2, 0, (const llvm::AttrBuilder *)&v9);
  if (v10[0] != v11) {
    free(v10[0]);
  }
  return v7;
}

llvm::AttrBuilder *llvm::AttrBuilder::addDereferenceableAttr(llvm::AttrBuilder *this, uint64_t a2)
{
  if (a2)
  {
    unint64_t v3 = llvm::Attribute::get(*(uint64_t **)this, 0x4Cu, a2);
    if (v3)
    {
      if (*(unsigned char *)(v3 + 8) == 2)
      {
        sub_1CC50F2F8((uint64_t)this + 8, (void *)(v3 + 24), *(unsigned int *)(v3 + 12), v3);
        return this;
      }
      int v4 = *(_DWORD *)(v3 + 12);
    }
    else
    {
      int v4 = 0;
    }
    sub_1CC50F4B4((unsigned int *)this + 2, v4, v3);
  }
  return this;
}

uint64_t llvm::AttributeList::addDereferenceableParamAttr(llvm::AttributeList *this, llvm::LLVMContext *a2, int a3, uint64_t a4)
{
  v13[8] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = a2;
  v12[0] = v13;
  v12[1] = (void *)0x800000000;
  if (a4)
  {
    unint64_t v7 = llvm::Attribute::get((uint64_t *)a2, 0x4Cu, a4);
    if (!v7)
    {
      int v8 = 0;
      goto LABEL_5;
    }
    if (*(unsigned char *)(v7 + 8) != 2)
    {
      int v8 = *(_DWORD *)(v7 + 12);
LABEL_5:
      sub_1CC50F4B4((unsigned int *)v12, v8, v7);
      goto LABEL_6;
    }
    sub_1CC50F2F8((uint64_t)v12, (void *)(v7 + 24), *(unsigned int *)(v7 + 12), v7);
  }
LABEL_6:
  uint64_t v9 = llvm::AttributeList::addAttributesAtIndex(this, a2, a3 + 1, (const llvm::AttrBuilder *)&v11);
  if (v12[0] != v13) {
    free(v12[0]);
  }
  return v9;
}

uint64_t llvm::AttributeList::addAllocSizeParamAttr(llvm::AttributeList *a1, uint64_t *a2, int a3, uint64_t a4, unsigned int *a5)
{
  v15[8] = *MEMORY[0x1E4F143B8];
  int v13 = a2;
  v14[0] = v15;
  v14[1] = (void *)0x800000000;
  uint64_t v8 = 0xFFFFFFFFLL;
  if (*((unsigned char *)a5 + 4)) {
    uint64_t v8 = *a5;
  }
  unint64_t v9 = llvm::Attribute::get(a2, 0x4Bu, v8 | (a4 << 32));
  if (!v9)
  {
    int v10 = 0;
    goto LABEL_6;
  }
  if (*(unsigned char *)(v9 + 8) != 2)
  {
    int v10 = *(_DWORD *)(v9 + 12);
LABEL_6:
    sub_1CC50F4B4((unsigned int *)v14, v10, v9);
    goto LABEL_7;
  }
  sub_1CC50F2F8((uint64_t)v14, (void *)(v9 + 24), *(unsigned int *)(v9 + 12), v9);
LABEL_7:
  uint64_t v11 = llvm::AttributeList::addAttributesAtIndex(a1, (llvm::LLVMContext *)a2, a3 + 1, (const llvm::AttrBuilder *)&v13);
  if (v14[0] != v15) {
    free(v14[0]);
  }
  return v11;
}

uint64_t llvm::AttributeList::getParamAttrs(llvm::AttributeList *this, int a2)
{
  uint64_t v2 = *(void *)this;
  if (*(void *)this && (a2 + 2) < *(_DWORD *)(v2 + 8)) {
    return *(void *)(v2 + 8 * (a2 + 2) + 40);
  }
  else {
    return 0;
  }
}

uint64_t llvm::AttributeList::getRetAttrs(llvm::AttributeList *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this && *(_DWORD *)(v1 + 8) >= 2u) {
    return *(void *)(v1 + 48);
  }
  else {
    return 0;
  }
}

uint64_t llvm::AttributeList::getFnAttrs(llvm::AttributeList *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this && *(_DWORD *)(v1 + 8)) {
    return *(void *)(v1 + 40);
  }
  else {
    return 0;
  }
}

BOOL llvm::AttributeList::hasAttributesAtIndex(llvm::AttributeList *this, int a2)
{
  uint64_t v2 = *(void *)this;
  return *(void *)this
      && (a2 + 1) < *(_DWORD *)(v2 + 8)
      && *(void *)(v2 + 8 * (a2 + 1) + 40) != 0;
}

uint64_t llvm::AttributeList::hasFnAttr(void *a1, int a2)
{
  if (*a1) {
    return (*(unsigned __int8 *)(*a1 + a2 / 8 + 12) >> (a2 & 7)) & 1;
  }
  else {
    return 0;
  }
}

uint64_t llvm::AttributeList::hasFnAttr(uint64_t *a1, void *a2, size_t a3)
{
  uint64_t v3 = *a1;
  if (!*a1) {
    return 0;
  }
  if (!*(_DWORD *)(v3 + 8)) {
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 40);
  if (!v4) {
    return 0;
  }
  int v5 = *(_DWORD *)(v4 + 40);
  if (!v5) {
    return 0;
  }
  uint64_t v8 = *(void *)(v4 + 24);
  int v9 = sub_1CD0B03C8(a2, (uint64_t)a2 + a3);
  unsigned int v10 = v5 - 1;
  for (int i = 1; ; ++i)
  {
    int v12 = v9 & v10;
    uint64_t v13 = v8 + 24 * (v9 & v10);
    uint64_t v14 = *(const void **)v13;
    if (*(void *)v13 == -1)
    {
      if (a2 == (void *)-1) {
        return 1;
      }
      goto LABEL_8;
    }
    if (v14 != (const void *)-2) {
      break;
    }
    if (a2 == (void *)-2) {
      return 1;
    }
LABEL_8:
    if (v14 == (const void *)-1) {
      return 0;
    }
    int v9 = i + v12;
  }
  if (a3 != *(void *)(v13 + 8) || a3 && memcmp(a2, v14, a3)) {
    goto LABEL_8;
  }
  return 1;
}

BOOL llvm::AttributeList::hasAttrSomewhere(uint64_t *a1, int a2, int *a3)
{
  uint64_t v3 = *a1;
  if (!*a1) {
    return 0;
  }
  if (a2 >= 0) {
    int v4 = a2;
  }
  else {
    int v4 = a2 + 7;
  }
  int v5 = 1 << (a2 & 7);
  BOOL result = (v5 & *(unsigned char *)(v3 + (v4 >> 3) + 24)) != 0;
  if (a3 && (v5 & *(unsigned char *)(v3 + (v4 >> 3) + 24)) != 0)
  {
    uint64_t v7 = *(unsigned int *)(v3 + 8);
    if (v7)
    {
      uint64_t v8 = (uint64_t)v4 >> 3;
      int v9 = (void *)(v3 + 40);
      int v10 = -1;
      BOOL result = 1;
      while (!*v9 || (v5 & *(unsigned char *)(*v9 + v8 + 12)) == 0)
      {
        ++v10;
        ++v9;
        if (!--v7) {
          return result;
        }
      }
      *a3 = v10;
    }
    return 1;
  }
  return result;
}

uint64_t llvm::AttributeList::getAttributeAtIndex(uint64_t *a1, int a2, int a3)
{
  uint64_t v3 = *a1;
  if (!*a1) {
    return 0;
  }
  if ((a2 + 1) >= *(_DWORD *)(v3 + 8)) {
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 8 * (a2 + 1) + 40);
  if (!v4 || ((*(unsigned __int8 *)(v4 + a3 / 8 + 12) >> (a3 & 7)) & 1) == 0) {
    return 0;
  }
  int v6 = (void *)(v4 + 48);
  uint64_t v7 = 8 * *(unsigned int *)(v4 + 8) - 8 * *(unsigned int *)(v4 + 32);
  if (v7)
  {
    unint64_t v8 = v7 >> 3;
    do
    {
      unint64_t v9 = v8 >> 1;
      int v10 = &v6[v8 >> 1];
      uint64_t v11 = *v10;
      if (*v10) {
        LODWORD(v11) = *(_DWORD *)(v11 + 12);
      }
      int v12 = v10 + 1;
      v8 += ~v9;
      if ((int)v11 < a3) {
        int v6 = v12;
      }
      else {
        unint64_t v8 = v9;
      }
    }
    while (v8);
  }
  return *v6;
}

uint64_t llvm::AttributeList::getAttributeAtIndex(uint64_t *a1, int a2, void *a3, size_t a4)
{
  uint64_t v4 = *a1;
  if (!*a1) {
    return 0;
  }
  if ((a2 + 1) >= *(_DWORD *)(v4 + 8)) {
    return 0;
  }
  uint64_t v5 = *(void *)(v4 + 8 * (a2 + 1) + 40);
  if (!v5) {
    return 0;
  }
  int v6 = *(_DWORD *)(v5 + 40);
  if (!v6) {
    return 0;
  }
  uint64_t v9 = *(void *)(v5 + 24);
  int v10 = sub_1CD0B03C8(a3, (uint64_t)a3 + a4);
  unsigned int v11 = v6 - 1;
  for (int i = 1; ; ++i)
  {
    int v13 = v10 & v11;
    uint64_t v14 = v9 + 24 * (v10 & v11);
    v15 = *(const void **)v14;
    if (*(void *)v14 == -1)
    {
      if (a3 == (void *)-1) {
        return *(void *)(v14 + 16);
      }
      goto LABEL_8;
    }
    if (v15 != (const void *)-2) {
      break;
    }
    if (a3 == (void *)-2) {
      return *(void *)(v14 + 16);
    }
LABEL_8:
    if (v15 == (const void *)-1) {
      return 0;
    }
    int v10 = i + v13;
  }
  if (a4 != *(void *)(v14 + 8) || a4 && memcmp(a3, *(const void **)v14, a4)) {
    goto LABEL_8;
  }
  return *(void *)(v14 + 16);
}

uint64_t llvm::AttributeList::getRetAlignment(llvm::AttributeList *this)
{
  uint64_t v1 = *(void *)this;
  if (!*(void *)this) {
    goto LABEL_4;
  }
  if (*(_DWORD *)(v1 + 8) < 2u)
  {
    LODWORD(v1) = 0;
LABEL_4:
    LOBYTE(v2) = 0;
    return v2 | (v1 << 8);
  }
  uint64_t v2 = *(llvm::AttributeSetNode **)(v1 + 48);
  if (v2)
  {
    LOWORD(v2) = llvm::AttributeSetNode::getAlignment(v2);
    LODWORD(v1) = BYTE1(v2);
  }
  else
  {
    LODWORD(v1) = 0;
  }
  return v2 | (v1 << 8);
}

uint64_t llvm::AttributeList::getParamAlignment(llvm::AttributeList *this, int a2)
{
  uint64_t v2 = *(void *)this;
  if (!*(void *)this) {
    goto LABEL_6;
  }
  if ((a2 + 2) >= *(_DWORD *)(v2 + 8))
  {
    LODWORD(v2) = 0;
LABEL_6:
    LOBYTE(v3) = 0;
    return v3 | (v2 << 8);
  }
  uint64_t v3 = *(llvm::AttributeSetNode **)(v2 + 8 * (a2 + 2) + 40);
  if (v3)
  {
    LOWORD(v3) = llvm::AttributeSetNode::getAlignment(v3);
    LODWORD(v2) = BYTE1(v3);
  }
  else
  {
    LODWORD(v2) = 0;
  }
  return v3 | (v2 << 8);
}

uint64_t llvm::AttributeList::getParamStackAlignment(llvm::AttributeList *this, int a2)
{
  uint64_t v2 = *(void *)this;
  if (!*(void *)this) {
    goto LABEL_4;
  }
  if ((a2 + 2) >= *(_DWORD *)(v2 + 8))
  {
    LODWORD(v2) = 0;
LABEL_4:
    LOBYTE(v3) = 0;
    return v3 | (v2 << 8);
  }
  uint64_t v3 = *(llvm::AttributeSetNode **)(v2 + 8 * (a2 + 2) + 40);
  if (v3)
  {
    LOWORD(v3) = llvm::AttributeSetNode::getStackAlignment(v3);
    LODWORD(v2) = BYTE1(v3);
  }
  else
  {
    LODWORD(v2) = 0;
  }
  return v3 | (v2 << 8);
}

uint64_t llvm::AttributeList::getParamByValType(llvm::AttributeList *this, int a2)
{
  uint64_t v2 = *(void *)this;
  if (!*(void *)this) {
    return 0;
  }
  if ((a2 + 2) >= *(_DWORD *)(v2 + 8)) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 8 * (a2 + 2) + 40);
  if (!v3 || (*(unsigned char *)(v3 + 20) & 0x20) == 0) {
    return 0;
  }
  uint64_t v5 = (uint64_t *)(v3 + 48);
  uint64_t v6 = 8 * *(unsigned int *)(v3 + 8) - 8 * *(unsigned int *)(v3 + 32);
  if (v6)
  {
    unint64_t v7 = v6 >> 3;
    do
    {
      unint64_t v8 = v7 >> 1;
      uint64_t v9 = &v5[v7 >> 1];
      uint64_t v10 = *v9;
      if (*v9) {
        LODWORD(v10) = *(_DWORD *)(v10 + 12);
      }
      unsigned int v11 = v9 + 1;
      v7 += ~v8;
      if ((int)v10 < 69) {
        uint64_t v5 = v11;
      }
      else {
        unint64_t v7 = v8;
      }
    }
    while (v7);
  }
  uint64_t v12 = *v5;
  if (v12) {
    return *(void *)(v12 + 16);
  }
  else {
    return 0;
  }
}

uint64_t llvm::AttributeList::getParamStructRetType(llvm::AttributeList *this, int a2)
{
  uint64_t v2 = *(void *)this;
  if (!*(void *)this) {
    return 0;
  }
  if ((a2 + 2) >= *(_DWORD *)(v2 + 8)) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 8 * (a2 + 2) + 40);
  if (!v3 || (*(unsigned char *)(v3 + 21) & 2) == 0) {
    return 0;
  }
  uint64_t v5 = (uint64_t *)(v3 + 48);
  uint64_t v6 = 8 * *(unsigned int *)(v3 + 8) - 8 * *(unsigned int *)(v3 + 32);
  if (v6)
  {
    unint64_t v7 = v6 >> 3;
    do
    {
      unint64_t v8 = v7 >> 1;
      uint64_t v9 = &v5[v7 >> 1];
      uint64_t v10 = *v9;
      if (*v9) {
        LODWORD(v10) = *(_DWORD *)(v10 + 12);
      }
      unsigned int v11 = v9 + 1;
      v7 += ~v8;
      if ((int)v10 < 73) {
        uint64_t v5 = v11;
      }
      else {
        unint64_t v7 = v8;
      }
    }
    while (v7);
  }
  uint64_t v12 = *v5;
  if (v12) {
    return *(void *)(v12 + 16);
  }
  else {
    return 0;
  }
}

uint64_t llvm::AttributeList::getFnStackAlignment(llvm::AttributeList *this)
{
  uint64_t v1 = *(void *)this;
  if (!*(void *)this) {
    goto LABEL_2;
  }
  if (!*(_DWORD *)(v1 + 8))
  {
    LODWORD(v1) = 0;
LABEL_2:
    LOBYTE(v2) = 0;
    return v2 | (v1 << 8);
  }
  uint64_t v2 = *(llvm::AttributeSetNode **)(v1 + 40);
  if (v2)
  {
    LOWORD(v2) = llvm::AttributeSetNode::getStackAlignment(v2);
    LODWORD(v1) = BYTE1(v2);
  }
  else
  {
    LODWORD(v1) = 0;
  }
  return v2 | (v1 << 8);
}

uint64_t llvm::AttributeList::getRetStackAlignment(llvm::AttributeList *this)
{
  uint64_t v1 = *(void *)this;
  if (!*(void *)this) {
    goto LABEL_6;
  }
  if (*(_DWORD *)(v1 + 8) < 2u)
  {
    LODWORD(v1) = 0;
LABEL_6:
    LOBYTE(v2) = 0;
    return v2 | (v1 << 8);
  }
  uint64_t v2 = *(llvm::AttributeSetNode **)(v1 + 48);
  if (v2)
  {
    LOWORD(v2) = llvm::AttributeSetNode::getStackAlignment(v2);
    LODWORD(v1) = BYTE1(v2);
  }
  else
  {
    LODWORD(v1) = 0;
  }
  return v2 | (v1 << 8);
}

uint64_t llvm::AttributeList::getRetDereferenceableBytes(llvm::AttributeList *this)
{
  uint64_t v1 = *(void *)this;
  if (!*(void *)this || *(_DWORD *)(v1 + 8) < 2u) {
    return 0;
  }
  uint64_t result = *(void *)(v1 + 48);
  if (result)
  {
    uint64_t EnumAttribute = llvm::AttributeSetNode::findEnumAttribute(result, 76);
    if (v4) {
      return *(void *)(EnumAttribute + 16);
    }
    return 0;
  }
  return result;
}

uint64_t llvm::AttributeList::getParamDereferenceableBytes(llvm::AttributeList *this, int a2)
{
  uint64_t v2 = *(void *)this;
  if (!*(void *)this) {
    return 0;
  }
  if ((a2 + 2) >= *(_DWORD *)(v2 + 8)) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 8 * (a2 + 2) + 40);
  if (!v3 || (*(unsigned char *)(v3 + 21) & 0x10) == 0) {
    return 0;
  }
  uint64_t v5 = (void *)(v3 + 48);
  uint64_t v6 = 8 * *(unsigned int *)(v3 + 8) - 8 * *(unsigned int *)(v3 + 32);
  if (v6)
  {
    unint64_t v7 = v6 >> 3;
    do
    {
      unint64_t v8 = v7 >> 1;
      uint64_t v9 = &v5[v7 >> 1];
      uint64_t v10 = *v9;
      if (*v9) {
        LODWORD(v10) = *(_DWORD *)(v10 + 12);
      }
      unsigned int v11 = v9 + 1;
      v7 += ~v8;
      if ((int)v10 < 76) {
        uint64_t v5 = v11;
      }
      else {
        unint64_t v7 = v8;
      }
    }
    while (v7);
  }
  return *(void *)(*v5 + 16);
}

uint64_t llvm::AttributeList::getRetDereferenceableOrNullBytes(llvm::AttributeList *this)
{
  uint64_t v1 = *(void *)this;
  if (!*(void *)this || *(_DWORD *)(v1 + 8) < 2u) {
    return 0;
  }
  uint64_t result = *(void *)(v1 + 48);
  if (result)
  {
    uint64_t EnumAttribute = llvm::AttributeSetNode::findEnumAttribute(result, 77);
    if (v4) {
      return *(void *)(EnumAttribute + 16);
    }
    return 0;
  }
  return result;
}

uint64_t llvm::AttributeList::getParamDereferenceableOrNullBytes(llvm::AttributeList *this, int a2)
{
  uint64_t v2 = *(void *)this;
  if (!*(void *)this) {
    return 0;
  }
  if ((a2 + 2) >= *(_DWORD *)(v2 + 8)) {
    return 0;
  }
  uint64_t v4 = *(void *)(v2 + 8 * (a2 + 2) + 40);
  if (!v4 || (*(unsigned char *)(v4 + 21) & 0x20) == 0) {
    return 0;
  }
  uint64_t v5 = (void *)(v4 + 48);
  uint64_t v6 = 8 * *(unsigned int *)(v4 + 8) - 8 * *(unsigned int *)(v4 + 32);
  if (v6)
  {
    unint64_t v7 = v6 >> 3;
    do
    {
      unint64_t v8 = v7 >> 1;
      uint64_t v9 = &v5[v7 >> 1];
      uint64_t v10 = *v9;
      if (*v9) {
        LODWORD(v10) = *(_DWORD *)(v10 + 12);
      }
      unsigned int v11 = v9 + 1;
      v7 += ~v8;
      if ((int)v10 < 77) {
        uint64_t v5 = v11;
      }
      else {
        unint64_t v7 = v8;
      }
    }
    while (v7);
  }
  return *(void *)(*v5 + 16);
}

void llvm::AttributeList::getAsString(llvm::AttributeList *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *(void *)this;
  if (*(void *)this
    && (a2 + 1) < *(_DWORD *)(v4 + 8)
    && (uint64_t v5 = *(llvm::AttributeSetNode **)(v4 + 8 * (a2 + 1) + 40)) != 0)
  {
    llvm::AttributeSetNode::getAsString(v5, a3, (std::string *)a4);
  }
  else
  {
    *(unsigned char *)(a4 + 23) = 0;
    *(unsigned char *)a4 = 0;
  }
}

BOOL llvm::AttributeList::hasParentContext(llvm::AttributeList *this, llvm::LLVMContext *a2)
{
  v23[16] = *MEMORY[0x1E4F143B8];
  v18 = v20;
  uint64_t v19 = 0x2000000000;
  uint64_t v3 = *(unsigned int *)(*(void *)this + 8);
  if (v3)
  {
    LODWORD(v4) = 0;
    uint64_t v5 = (uint64_t *)(*(void *)this + 40);
    uint64_t v6 = 8 * v3;
    do
    {
      uint64_t v7 = *v5;
      if (v4 >= HIDWORD(v19)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v18 + v4) = v7;
      unsigned int v8 = v19 + 1;
      LODWORD(v19) = v8;
      if (v8 >= HIDWORD(v19)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v18 + v8) = HIDWORD(v7);
      uint64_t v4 = (v19 + 1);
      LODWORD(v19) = v19 + 1;
      ++v5;
      v6 -= 8;
    }
    while (v6);
    uint64_t v9 = v18;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v9 = v20;
  }
  uint64_t v10 = *(void *)a2;
  unint64_t v11 = sub_1CC13A6B8(v9, (uint64_t)v9 + 4 * v4);
  uint64_t v13 = *(void *)(*(void *)(v10 + 240) + 8 * ((*(_DWORD *)(v10 + 248) - 1) & v11));
  v21 = v23;
  uint64_t v22 = 0x2000000000;
  if (v13) {
    BOOL v14 = (v13 & 1) == 0;
  }
  else {
    BOOL v14 = 0;
  }
  if (v14)
  {
    while (1)
    {
      LOBYTE(v11) = sub_1CC5126E0(v11, v13, (uint64_t)&v18, v12, (uint64_t)&v21);
      if (v11) {
        break;
      }
      LODWORD(v22) = 0;
      uint64_t v13 = *(void *)v13;
      if (v13) {
        BOOL v15 = (v13 & 1) == 0;
      }
      else {
        BOOL v15 = 0;
      }
      if (!v15)
      {
        uint64_t v13 = 0;
        break;
      }
    }
    if (v21 != v23) {
      free(v21);
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v16 = *(void *)this;
  if (v18 != v20) {
    free(v18);
  }
  return v13 == v16;
}

uint64_t sub_1CC50F2F8(uint64_t result, void *__s2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = result;
  uint64_t v7 = *(uint64_t **)result;
  uint64_t v8 = *(unsigned int *)(result + 8);
  uint64_t v9 = *(uint64_t **)result;
  if (v8)
  {
    uint64_t v9 = *(uint64_t **)result;
    unint64_t v10 = *(unsigned int *)(result + 8);
    while (1)
    {
      unint64_t v11 = v10 >> 1;
      uint64_t v12 = &v9[v10 >> 1];
      uint64_t v13 = *v12;
      if (!*v12 || *(unsigned char *)(v13 + 8) != 2) {
        goto LABEL_11;
      }
      unint64_t v14 = *(unsigned int *)(v13 + 12);
      size_t v15 = a3 >= v14 ? *(unsigned int *)(v13 + 12) : a3;
      if (!v15) {
        break;
      }
      uint64_t result = memcmp((const void *)(v13 + 24), __s2, v15);
      if (!result) {
        break;
      }
      if ((result & 0x80000000) != 0) {
        goto LABEL_11;
      }
LABEL_12:
      unint64_t v10 = v11;
      if (!v11) {
        goto LABEL_20;
      }
    }
    if (a3 == v14 || a3 <= v14) {
      goto LABEL_12;
    }
LABEL_11:
    unint64_t v11 = v10 + ~v11;
    uint64_t v9 = v12 + 1;
    goto LABEL_12;
  }
LABEL_20:
  if (v9 == &v7[v8])
  {
    if (v8 >= *(_DWORD *)(v6 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v7[v8] = a4;
    ++*(_DWORD *)(v6 + 8);
  }
  else
  {
    uint64_t result = llvm::Attribute::hasAttribute(v9, __s2, a3);
    if (result)
    {
      *uint64_t v9 = a4;
    }
    else
    {
      if (v8 >= *(_DWORD *)(v6 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v17 = &v7[v9 - v7];
      v7[v8] = v7[v8 - 1];
      uint64_t v18 = *(void *)v6 + 8 * v8 - 8;
      if ((uint64_t *)v18 != v17)
      {
        uint64_t result = (uint64_t)memmove(v17 + 1, v17, v18 - (void)v17);
        LODWORD(v8) = *(_DWORD *)(v6 + 8);
      }
      *(_DWORD *)(v6 + 8) = v8 + 1;
      uint64_t *v17 = a4;
    }
  }
  return result;
}

unsigned int *sub_1CC50F4B4(unsigned int *result, int a2, uint64_t a3)
{
  uint64_t v4 = result;
  uint64_t v5 = *(void **)result;
  uint64_t v6 = result[2];
  uint64_t v7 = *(uint64_t **)result;
  if (v6)
  {
    uint64_t v7 = *(uint64_t **)result;
    unint64_t v8 = result[2];
    while (1)
    {
      unint64_t v9 = v8 >> 1;
      unint64_t v10 = &v7[v8 >> 1];
      uint64_t v11 = *v10;
      if (!*v10) {
        goto LABEL_6;
      }
      if (*(unsigned char *)(v11 + 8) != 2) {
        break;
      }
LABEL_8:
      unint64_t v8 = v9;
      if (!v9) {
        goto LABEL_9;
      }
    }
    LODWORD(v11) = *(_DWORD *)(v11 + 12);
LABEL_6:
    uint64_t v12 = v10 + 1;
    unint64_t v13 = v8 + ~v9;
    if ((int)v11 < a2)
    {
      unint64_t v9 = v13;
      uint64_t v7 = v12;
    }
    goto LABEL_8;
  }
LABEL_9:
  if (v7 == &v5[v6])
  {
    if (v6 >= result[3]) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v5[v6] = a3;
    ++result[2];
  }
  else
  {
    uint64_t v14 = *v7;
    if (*v7)
    {
      if (*(unsigned char *)(v14 + 8) != 2 && *(_DWORD *)(v14 + 12) == a2) {
        goto LABEL_13;
      }
    }
    else if (!a2)
    {
LABEL_13:
      *uint64_t v7 = a3;
      return result;
    }
    if (v6 >= result[3]) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    size_t v15 = &v5[v7 - v5];
    v5[v6] = v5[v6 - 1];
    uint64_t v16 = *(void *)result + 8 * v6 - 8;
    if ((void *)v16 != v15)
    {
      uint64_t result = (unsigned int *)memmove(v15 + 1, v15, v16 - (void)v15);
      LODWORD(v6) = v4[2];
    }
    v4[2] = v6 + 1;
    void *v15 = a3;
  }
  return result;
}

uint64_t llvm::AttrBuilder::getRawIntAttr(uint64_t a1, int a2)
{
  uint64_t result = llvm::AttrBuilder::getAttribute(a1, a2);
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

uint64_t llvm::AttrBuilder::getAttribute(uint64_t a1, int a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 8);
    unint64_t v5 = *(unsigned int *)(a1 + 16);
    while (1)
    {
      unint64_t v6 = v5 >> 1;
      uint64_t v7 = &v3[v5 >> 1];
      uint64_t v8 = *v7;
      if (!*v7) {
        goto LABEL_9;
      }
      if (*(unsigned char *)(v8 + 8) != 2) {
        break;
      }
      v5 >>= 1;
LABEL_12:
      if (!v5) {
        goto LABEL_3;
      }
    }
    LODWORD(v8) = *(_DWORD *)(v8 + 12);
LABEL_9:
    unint64_t v9 = v7 + 1;
    v5 += ~v6;
    if ((int)v8 < a2) {
      uint64_t v3 = v9;
    }
    else {
      unint64_t v5 = v6;
    }
    goto LABEL_12;
  }
  uint64_t v3 = *(uint64_t **)(a1 + 8);
LABEL_3:
  if (v3 == (uint64_t *)(*(void *)(a1 + 8) + 8 * v2)) {
    return 0;
  }
  uint64_t result = *v3;
  if (!*v3)
  {
    if (!a2) {
      return result;
    }
    return 0;
  }
  if (*(unsigned char *)(result + 8) == 2 || *(_DWORD *)(result + 12) != a2) {
    return 0;
  }
  return result;
}

uint64_t llvm::AttrBuilder::addRawIntAttr(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4 = llvm::Attribute::get(*(uint64_t **)a1, a2, a3);
  if (v4)
  {
    if (*(unsigned char *)(v4 + 8) == 2)
    {
      sub_1CC50F2F8(a1 + 8, (void *)(v4 + 24), *(unsigned int *)(v4 + 12), v4);
      return a1;
    }
    int v5 = *(_DWORD *)(v4 + 12);
  }
  else
  {
    int v5 = 0;
  }
  sub_1CC50F4B4((unsigned int *)(a1 + 8), v5, v4);
  return a1;
}

uint64_t llvm::AttrBuilder::getAllocSizeArgs(llvm::AttrBuilder *this)
{
  uint64_t Attribute = llvm::AttrBuilder::getAttribute((uint64_t)this, 75);
  if (Attribute) {
    unint64_t v2 = *(void *)(Attribute + 16);
  }
  else {
    unint64_t v2 = 0;
  }
  unint64_t v3 = HIDWORD(v2);
  BOOL v4 = v2 == 0xFFFFFFFFLL;
  int v5 = v2 & 0xFFFFFF00;
  LODWORD(v2) = v2;
  LODWORD(v7) = v3;
  if (v4) {
    LODWORD(v2) = 0;
  }
  HIDWORD(v7) = v2 | v5;
  return v7;
}

unint64_t llvm::AttrBuilder::getVScaleRangeMin(llvm::AttrBuilder *this)
{
  uint64_t Attribute = llvm::AttrBuilder::getAttribute((uint64_t)this, 80);
  if (Attribute) {
    unint64_t v2 = *(void *)(Attribute + 16);
  }
  else {
    unint64_t v2 = 0;
  }
  return HIDWORD(v2);
}

uint64_t llvm::AttrBuilder::getVScaleRangeMax(llvm::AttrBuilder *this)
{
  uint64_t Attribute = llvm::AttrBuilder::getAttribute((uint64_t)this, 80);
  if (Attribute) {
    unint64_t v2 = *(void *)(Attribute + 16);
  }
  else {
    unint64_t v2 = 0;
  }
  unint64_t v3 = HIDWORD(v2);
  BOOL v4 = v2 == 0;
  BOOL v5 = v2 != 0;
  int v6 = v2 & 0xFFFFFF00;
  LODWORD(v2) = v2;
  LODWORD(v9) = v3;
  if (v4) {
    LODWORD(v2) = 0;
  }
  HIDWORD(v9) = v2 | v6;
  *((void *)&v8 + 1) = v5;
  *(void *)&long long v8 = v9;
  return v8 >> 32;
}

uint64_t llvm::AttrBuilder::addAlignmentAttr(uint64_t a1, __int16 a2)
{
  if ((a2 & 0xFF00) != 0)
  {
    unint64_t v3 = llvm::Attribute::get(*(uint64_t **)a1, 0x4Au, 1 << a2);
    if (v3)
    {
      if (*(unsigned char *)(v3 + 8) == 2)
      {
        sub_1CC50F2F8(a1 + 8, (void *)(v3 + 24), *(unsigned int *)(v3 + 12), v3);
        return a1;
      }
      int v4 = *(_DWORD *)(v3 + 12);
    }
    else
    {
      int v4 = 0;
    }
    sub_1CC50F4B4((unsigned int *)(a1 + 8), v4, v3);
  }
  return a1;
}

uint64_t **llvm::AttrBuilder::addStackAlignmentAttr(uint64_t **result, __int16 a2)
{
  if ((a2 & 0xFF00) != 0)
  {
    uint64_t v3 = (uint64_t)result;
    unint64_t v2 = llvm::Attribute::get(*result, 0x4Eu, 1 << a2);
    llvm::AttrBuilder::addAttribute(v3, v2);
    return (uint64_t **)v3;
  }
  return result;
}

llvm::AttrBuilder *llvm::AttrBuilder::addStructRetAttr(llvm::AttrBuilder *this, llvm::Type *a2)
{
  unint64_t v3 = llvm::Attribute::get(*(uint64_t **)this, 73, (uint64_t)a2);
  if (v3)
  {
    if (*(unsigned char *)(v3 + 8) == 2)
    {
      sub_1CC50F2F8((uint64_t)this + 8, (void *)(v3 + 24), *(unsigned int *)(v3 + 12), v3);
      return this;
    }
    int v4 = *(_DWORD *)(v3 + 12);
  }
  else
  {
    int v4 = 0;
  }
  sub_1CC50F4B4((unsigned int *)this + 2, v4, v3);
  return this;
}

uint64_t llvm::AttrBuilder::addPreallocatedAttr(uint64_t **this, llvm::Type *a2)
{
  unint64_t v3 = llvm::Attribute::get(*this, 72, (uint64_t)a2);

  return llvm::AttrBuilder::addAttribute((uint64_t)this, v3);
}

uint64_t llvm::AttrBuilder::getAttribute(uint64_t a1, void *__s2, unint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = *(uint64_t **)(a1 + 8);
    unint64_t v8 = *(unsigned int *)(a1 + 16);
    while (1)
    {
      unint64_t v9 = v8 >> 1;
      unint64_t v10 = &v7[v8 >> 1];
      uint64_t v11 = *v10;
      if (!*v10 || *(unsigned char *)(v11 + 8) != 2) {
        goto LABEL_11;
      }
      unint64_t v12 = *(unsigned int *)(v11 + 12);
      size_t v13 = a3 >= v12 ? *(unsigned int *)(v11 + 12) : a3;
      if (!v13) {
        break;
      }
      int v14 = memcmp((const void *)(v11 + 24), __s2, v13);
      if (!v14) {
        break;
      }
      if (v14 < 0) {
        goto LABEL_11;
      }
LABEL_12:
      unint64_t v8 = v9;
      if (!v9) {
        goto LABEL_13;
      }
    }
    if (a3 == v12 || a3 <= v12) {
      goto LABEL_12;
    }
LABEL_11:
    unint64_t v9 = v8 + ~v9;
    uint64_t v7 = v10 + 1;
    goto LABEL_12;
  }
  uint64_t v7 = *(uint64_t **)(a1 + 8);
LABEL_13:
  if (v7 == (uint64_t *)(v5 + 8 * v6) || !llvm::Attribute::hasAttribute(v7, __s2, a3)) {
    return 0;
  }
  else {
    return *v7;
  }
}

BOOL llvm::AttrBuilder::contains(uint64_t a1, int a2)
{
  return llvm::AttrBuilder::getAttribute(a1, a2) != 0;
}

BOOL llvm::AttrBuilder::contains(uint64_t a1, void *__s2, unint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = *(uint64_t **)(a1 + 8);
    unint64_t v8 = *(unsigned int *)(a1 + 16);
    while (1)
    {
      unint64_t v9 = v8 >> 1;
      unint64_t v10 = &v7[v8 >> 1];
      uint64_t v11 = *v10;
      if (!*v10 || *(unsigned char *)(v11 + 8) != 2) {
        goto LABEL_11;
      }
      unint64_t v12 = *(unsigned int *)(v11 + 12);
      size_t v13 = a3 >= v12 ? *(unsigned int *)(v11 + 12) : a3;
      if (!v13) {
        break;
      }
      int v14 = memcmp((const void *)(v11 + 24), __s2, v13);
      if (!v14) {
        break;
      }
      if (v14 < 0) {
        goto LABEL_11;
      }
LABEL_12:
      unint64_t v8 = v9;
      if (!v9) {
        goto LABEL_13;
      }
    }
    if (a3 == v12 || a3 <= v12) {
      goto LABEL_12;
    }
LABEL_11:
    unint64_t v9 = v8 + ~v9;
    uint64_t v7 = v10 + 1;
    goto LABEL_12;
  }
  uint64_t v7 = *(uint64_t **)(a1 + 8);
LABEL_13:
  if (v7 == (uint64_t *)(v5 + 8 * v6)) {
    return 0;
  }
  BOOL result = llvm::Attribute::hasAttribute(v7, __s2, a3);
  if (result) {
    return *v7 != 0;
  }
  return result;
}

uint64_t llvm::AttributeFuncs::typeIncompatible@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[4] = 0;
  a3[3] = 0;
  a3[2] = (uint64_t)(a3 + 3);
  int v3 = *(unsigned __int8 *)(result + 8);
  if (v3 == 13)
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
    goto LABEL_6;
  }
  if ((~a2 & 3) == 0)
  {
    uint64_t v4 = 2;
    *a3 = 2;
LABEL_4:
    v4 |= 0x1000000000000uLL;
    uint64_t v5 = 8;
    *a3 = v4;
    a3[1] = 8;
    goto LABEL_5;
  }
  if (a2)
  {
    uint64_t v4 = 2;
    *a3 = 2;
  }
  else
  {
    uint64_t v4 = 0;
  }
  if ((a2 & 2) != 0) {
    goto LABEL_4;
  }
  uint64_t v5 = 0;
LABEL_5:
  if (v3 == 15) {
    goto LABEL_9;
  }
LABEL_6:
  if ((~a2 & 3) == 0)
  {
    v4 |= 0x308000480000uLL;
    v5 |= 0x3000uLL;
    *a3 = v4;
    a3[1] = v5;
LABEL_8:
    v4 |= 0x8000000000040000;
    v5 |= 0x3F0uLL;
    *a3 = v4;
    a3[1] = v5;
    goto LABEL_9;
  }
  if (a2)
  {
    v4 |= 0x308000480000uLL;
    v5 |= 0x3000uLL;
    *a3 = v4;
    a3[1] = v5;
  }
  if ((a2 & 2) != 0) {
    goto LABEL_8;
  }
LABEL_9:
  int v6 = v3;
  if ((v3 & 0xFE) == 0x12) {
    int v6 = *(unsigned __int8 *)(**(void **)(result + 16) + 8);
  }
  if ((a2 & 1) != 0 && v6 != 15) {
    a3[1] = v5 | 0x400;
  }
  if ((a2 & 1) != 0 && v3 == 7) {
    *a3 = v4 | 0x1000000000;
  }
  return result;
}

double llvm::AttributeFuncs::getUBImplyingAttributes@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = a1 + 24;
  *(void *)&double result = 0x1000000000;
  *(_OWORD *)a1 = xmmword_1CFAC7B50;
  return result;
}

uint64_t llvm::AttributeFuncs::areOutlineCompatible(llvm::AttributeFuncs *this, const llvm::Function *a2, const llvm::Function *a3)
{
  uint64_t v5 = (uint64_t *)((char *)this + 112);
  uint64_t AttributeAtIndex = llvm::AttributeList::getAttributeAtIndex((uint64_t *)this + 14, -1, 50);
  int v6 = (uint64_t *)((char *)a2 + 112);
  uint64_t v96 = llvm::AttributeList::getAttributeAtIndex(v6, -1, 50);
  uint64_t v95 = llvm::AttributeList::getAttributeAtIndex(v5, -1, 54);
  uint64_t v94 = llvm::AttributeList::getAttributeAtIndex(v6, -1, 54);
  uint64_t v93 = llvm::AttributeList::getAttributeAtIndex(v5, -1, 53);
  uint64_t v92 = llvm::AttributeList::getAttributeAtIndex(v6, -1, 53);
  uint64_t v91 = llvm::AttributeList::getAttributeAtIndex(v5, -1, 51);
  uint64_t v90 = llvm::AttributeList::getAttributeAtIndex(v6, -1, 51);
  uint64_t v89 = llvm::AttributeList::getAttributeAtIndex(v5, -1, 52);
  uint64_t v88 = llvm::AttributeList::getAttributeAtIndex(v6, -1, 52);
  uint64_t v87 = llvm::AttributeList::getAttributeAtIndex(v5, -1, 49);
  uint64_t v86 = llvm::AttributeList::getAttributeAtIndex(v6, -1, 49);
  v98 = v5;
  uint64_t v85 = llvm::AttributeList::getAttributeAtIndex(v5, -1, 55);
  v99 = v6;
  uint64_t v84 = llvm::AttributeList::getAttributeAtIndex(v6, -1, 55);
  uint64_t v7 = *((void *)this + 14);
  if (!v7 || !*(_DWORD *)(v7 + 8) || (v8 = *(void *)(v7 + 40)) == 0 || (int v9 = *(_DWORD *)(v8 + 40)) == 0)
  {
LABEL_24:
    uint64_t v83 = 0;
    goto LABEL_25;
  }
  uint64_t v10 = *(void *)(v8 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCBE588))
  {
    unint64_t v78 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v78 = 0xFF51AFD7ED558CCDLL;
    }
    qword_1EBCBE580 = v78;
    __cxa_guard_release(&qword_1EBCBE588);
  }
  uint64_t v11 = __ROR8__(qword_1EBCBE580 ^ 0x3A4251CF5CABDDE3, 30);
  unint64_t v12 = 0x9DDFEA08EB382D69
      * ((qword_1EBCBE580 + 0x20E38D834E0EEBC9) ^ ((0x9DDFEA08EB382D69
                                                    * ((v11 - 0x3222A10545348927) ^ (qword_1EBCBE580
                                                                                     + 0x20E38D834E0EEBC9))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v11 - 0x3222A10545348927) ^ (qword_1EBCBE580 + 0x20E38D834E0EEBC9))));
  unsigned int v13 = -348639895 * ((v12 >> 47) ^ v12);
  for (int i = 1; ; ++i)
  {
    unsigned int v15 = v13 & (v9 - 1);
    uint64_t v16 = (uint64_t *)(v10 + 24 * v15);
    uint64_t v17 = *v16;
    if (*v16 == -1)
    {
      if ("use-sample-profile" == (char *)-1) {
        goto LABEL_23;
      }
      goto LABEL_9;
    }
    if (v17 != -2) {
      break;
    }
    if ("use-sample-profile" == (char *)-2) {
      goto LABEL_23;
    }
LABEL_9:
    if (v17 == -1) {
      goto LABEL_24;
    }
    unsigned int v13 = i + v15;
  }
  if (v16[1] != 18) {
    goto LABEL_9;
  }
  BOOL v18 = *(void *)v17 == 0x706D61732D657375 && *(void *)(v17 + 8) == 0x69666F72702D656CLL;
  if (!v18 || *(_WORD *)(v17 + 16) != 25964) {
    goto LABEL_9;
  }
LABEL_23:
  uint64_t v83 = v16[2];
LABEL_25:
  uint64_t v20 = *v6;
  if (!*v6 || !*(_DWORD *)(v20 + 8) || (v21 = *(void *)(v20 + 40)) == 0 || (int v22 = *(_DWORD *)(v21 + 40)) == 0)
  {
LABEL_48:
    uint64_t v82 = 0;
    goto LABEL_49;
  }
  uint64_t v23 = *(void *)(v21 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCBE588))
  {
    unint64_t v79 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v79 = 0xFF51AFD7ED558CCDLL;
    }
    qword_1EBCBE580 = v79;
    __cxa_guard_release(&qword_1EBCBE588);
  }
  uint64_t v24 = __ROR8__(qword_1EBCBE580 ^ 0x3A4251CF5CABDDE3, 30);
  unint64_t v25 = 0x9DDFEA08EB382D69
      * ((qword_1EBCBE580 + 0x20E38D834E0EEBC9) ^ ((0x9DDFEA08EB382D69
                                                    * ((v24 - 0x3222A10545348927) ^ (qword_1EBCBE580
                                                                                     + 0x20E38D834E0EEBC9))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v24 - 0x3222A10545348927) ^ (qword_1EBCBE580 + 0x20E38D834E0EEBC9))));
  unsigned int v26 = -348639895 * ((v25 >> 47) ^ v25);
  int v27 = 1;
  while (2)
  {
    unsigned int v28 = v26 & (v22 - 1);
    v29 = (uint64_t *)(v23 + 24 * v28);
    uint64_t v30 = *v29;
    if (*v29 == -1)
    {
      if ("use-sample-profile" == (char *)-1) {
        break;
      }
      goto LABEL_33;
    }
    if (v30 == -2)
    {
      if ("use-sample-profile" == (char *)-2) {
        break;
      }
      goto LABEL_33;
    }
    if (v29[1] != 18
      || (*(void *)v30 == 0x706D61732D657375 ? (BOOL v31 = *(void *)(v30 + 8) == 0x69666F72702D656CLL) : (BOOL v31 = 0),
          v31 ? (BOOL v32 = *(unsigned __int16 *)(v30 + 16) == 25964) : (BOOL v32 = 0),
          !v32))
    {
LABEL_33:
      if (v30 == -1) {
        goto LABEL_48;
      }
      unsigned int v26 = v27 + v28;
      ++v27;
      continue;
    }
    break;
  }
  uint64_t v82 = v29[2];
LABEL_49:
  uint64_t v81 = llvm::AttributeList::getAttributeAtIndex(v98, -1, 29);
  uint64_t v80 = llvm::AttributeList::getAttributeAtIndex(v6, -1, 29);
  v33 = (const char **)off_1E6830828;
  do
  {
    v34 = (char *)*v33;
    if (*v33)
    {
      size_t v35 = strlen(*v33);
      uint64_t v36 = *v98;
      if (*v98)
      {
        if (*(_DWORD *)(v36 + 8))
        {
          uint64_t v37 = *(void *)(v36 + 40);
          if (v37)
          {
            int v38 = *(_DWORD *)(v37 + 40);
            if (v38)
            {
              size_t v39 = v35;
              uint64_t v40 = *(void *)(v37 + 24);
              int v41 = sub_1CD0B03C8(v34, (uint64_t)&v34[v35]);
              unsigned int v42 = v38 - 1;
              for (int j = 1; ; ++j)
              {
                int v44 = v41 & v42;
                uint64_t v45 = v40 + 24 * (v41 & v42);
                v46 = *(const void **)v45;
                if (*(void *)v45 == -1)
                {
                  if (v34 == (char *)-1) {
                    goto LABEL_66;
                  }
                }
                else if (v46 == (const void *)-2)
                {
                  if (v34 == (char *)-2) {
                    goto LABEL_66;
                  }
                }
                else if (v39 == *(void *)(v45 + 8) && (!v39 || !memcmp(v34, v46, v39)))
                {
LABEL_66:
                  int v47 = 1;
                  goto LABEL_68;
                }
                if (v46 == (const void *)-1) {
                  break;
                }
                int v41 = j + v44;
              }
            }
          }
        }
      }
      int v47 = 0;
LABEL_68:
      size_t v48 = strlen(v34);
    }
    else
    {
      uint64_t v49 = *v98;
      if (*v98 && *(_DWORD *)(v49 + 8) && (uint64_t v50 = *(void *)(v49 + 40)) != 0 && (v51 = *(_DWORD *)(v50 + 40)) != 0)
      {
        uint64_t v52 = *(void *)(v50 + 24);
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_1EBCBE588))
        {
          unint64_t v67 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override) {
            unint64_t v67 = 0xFF51AFD7ED558CCDLL;
          }
          qword_1EBCBE580 = v67;
          __cxa_guard_release(&qword_1EBCBE588);
        }
        unsigned int v53 = qword_1EBCBE580 ^ 0x2F90404F;
        for (int k = 1; ; ++k)
        {
          unsigned int v55 = v53 & (v51 - 1);
          v56 = (void *)(v52 + 24 * v55);
          if (*v56 <= 0xFFFFFFFFFFFFFFFDLL && !v56[1]) {
            break;
          }
          if (*v56 == -1) {
            goto LABEL_80;
          }
          unsigned int v53 = k + v55;
        }
        v34 = 0;
        size_t v48 = 0;
        int v47 = 1;
      }
      else
      {
LABEL_80:
        int v47 = 0;
        v34 = 0;
        size_t v48 = 0;
      }
    }
    uint64_t v57 = *v99;
    if (*v99)
    {
      if (!*(_DWORD *)(v57 + 8)) {
        goto LABEL_97;
      }
      uint64_t v57 = *(void *)(v57 + 40);
      if (v57)
      {
        int v58 = *(_DWORD *)(v57 + 40);
        if (v58)
        {
          uint64_t v59 = *(void *)(v57 + 24);
          int v60 = sub_1CD0B03C8(v34, (uint64_t)&v34[v48]);
          unsigned int v61 = v58 - 1;
          for (int m = 1; ; ++m)
          {
            int v63 = v60 & v61;
            uint64_t v64 = v59 + 24 * (v60 & v61);
            v65 = *(const void **)v64;
            if (*(void *)v64 == -1)
            {
              if (v34 == (char *)-1) {
                goto LABEL_96;
              }
            }
            else if (v65 == (const void *)-2)
            {
              if (v34 == (char *)-2) {
                goto LABEL_96;
              }
            }
            else if (v48 == *(void *)(v64 + 8) && (!v48 || !memcmp(v34, v65, v48)))
            {
LABEL_96:
              LODWORD(v57) = 1;
              goto LABEL_98;
            }
            if (v65 == (const void *)-1) {
              break;
            }
            int v60 = m + v63;
          }
        }
LABEL_97:
        LODWORD(v57) = 0;
      }
    }
LABEL_98:
    int v66 = v47 ^ v57;
    if (v66) {
      break;
    }
    ++v33;
  }
  while (v33 != (const char **)off_1E6830840);
  unsigned int v68 = v66 ^ 1;
  if (AttributeAtIndex == v96
    && v95 == v94
    && v93 == v92
    && v91 == v90
    && v89 == v88
    && v87 == v86
    && v85 == v84
    && v83 == v82
    && v81 == v80)
  {
    return v68;
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::AttributeFuncs::mergeAttributesForOutlining(llvm::AttributeFuncs *this, llvm::Function *a2, const llvm::Function *a3)
{
  uint64_t v5 = (llvm::AttributeFuncs *)((char *)this + 112);
  if (sub_1CC511F64(*((void *)this + 14), "less-precise-fpmad", 0x12uLL)
    && !sub_1CC511F64(*((void *)a2 + 14), "less-precise-fpmad", 0x12uLL))
  {
    *((void *)this + 14) = llvm::AttributeList::addAttributeAtIndex(v5, **(uint64_t ***)this, -1, "less-precise-fpmad", 0x12uLL, "false", 5uLL);
  }
  if (sub_1CC511F64(*(void *)v5, "no-infs-fp-math", 0xFuLL)
    && !sub_1CC511F64(*((void *)a2 + 14), "no-infs-fp-math", 0xFuLL))
  {
    *((void *)this + 14) = llvm::AttributeList::addAttributeAtIndex(v5, **(uint64_t ***)this, -1, "no-infs-fp-math", 0xFuLL, "false", 5uLL);
  }
  if (sub_1CC511F64(*(void *)v5, "no-nans-fp-math", 0xFuLL)
    && !sub_1CC511F64(*((void *)a2 + 14), "no-nans-fp-math", 0xFuLL))
  {
    *((void *)this + 14) = llvm::AttributeList::addAttributeAtIndex(v5, **(uint64_t ***)this, -1, "no-nans-fp-math", 0xFuLL, "false", 5uLL);
  }
  if (sub_1CC511F64(*(void *)v5, "approx-func-fp-math", 0x13uLL)
    && !sub_1CC511F64(*((void *)a2 + 14), "approx-func-fp-math", 0x13uLL))
  {
    *((void *)this + 14) = llvm::AttributeList::addAttributeAtIndex(v5, **(uint64_t ***)this, -1, "approx-func-fp-math", 0x13uLL, "false", 5uLL);
  }
  if (sub_1CC511F64(*(void *)v5, "no-signed-zeros-fp-math", 0x17uLL)
    && !sub_1CC511F64(*((void *)a2 + 14), "no-signed-zeros-fp-math", 0x17uLL))
  {
    *((void *)this + 14) = llvm::AttributeList::addAttributeAtIndex(v5, **(uint64_t ***)this, -1, "no-signed-zeros-fp-math", 0x17uLL, "false", 5uLL);
  }
  if (!sub_1CC511F64(*(void *)v5, "unsafe-fp-math", 0xEuLL)
    || sub_1CC511F64(*((void *)a2 + 14), "unsafe-fp-math", 0xEuLL))
  {
    uint64_t v6 = *(void *)v5;
    if (!*(void *)v5) {
      goto LABEL_22;
    }
LABEL_21:
    if ((*(unsigned char *)(v6 + 15) & 4) != 0) {
      goto LABEL_25;
    }
    goto LABEL_22;
  }
  uint64_t v6 = llvm::AttributeList::addAttributeAtIndex(v5, **(uint64_t ***)this, -1, "unsafe-fp-math", 0xEuLL, "false", 5uLL);
  *((void *)this + 14) = v6;
  if (v6) {
    goto LABEL_21;
  }
LABEL_22:
  uint64_t v7 = *((void *)a2 + 14);
  if (v7 && (*(unsigned char *)(v7 + 15) & 4) != 0)
  {
    uint64_t v6 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v5, **(uint64_t ***)this, -1, 26);
    *((void *)this + 14) = v6;
  }
LABEL_25:
  if (!sub_1CC511F64(v6, "no-jump-tables", 0xEuLL) && sub_1CC511F64(*((void *)a2 + 14), "no-jump-tables", 0xEuLL)) {
    *((void *)this + 14) = llvm::AttributeList::addAttributeAtIndex(v5, **(uint64_t ***)this, -1, "no-jump-tables", 0xEuLL, "true", 4uLL);
  }
  if (sub_1CC511F64(*(void *)v5, "profile-sample-accurate", 0x17uLL)
    || !sub_1CC511F64(*((void *)a2 + 14), "profile-sample-accurate", 0x17uLL))
  {
    uint64_t v8 = *(void *)v5;
  }
  else
  {
    uint64_t v8 = llvm::AttributeList::addAttributeAtIndex(v5, **(uint64_t ***)this, -1, "profile-sample-accurate", 0x17uLL, "true", 4uLL);
    *((void *)this + 14) = v8;
  }
  int v9 = &unk_1EBCBE000;
  if (!v8 || (*(unsigned char *)(v8 + 19) & 2) == 0)
  {
    uint64_t v10 = *((void *)a2 + 14);
    if (v10 && (*(unsigned char *)(v10 + 19) & 2) != 0)
    {
      uint64_t v8 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v5, **(uint64_t ***)this, -1, 57);
      int v9 = &unk_1EBCBE000;
      *((void *)this + 14) = v8;
    }
    if (!v8) {
      goto LABEL_38;
    }
  }
  if ((*(unsigned char *)(v8 + 19) & 0x1C) != 0)
  {
    v34 = 0;
    v211[0] = 0;
    v211[1] = 0;
    v210 = v211;
    long long v209 = xmmword_1CFAC7B60;
    uint64_t v35 = *((void *)a2 + 14);
    if (!v35) {
      goto LABEL_89;
    }
    char v36 = *(unsigned char *)(v35 + 19);
    if ((v36 & 8) != 0)
    {
      signed int v37 = 59;
    }
    else
    {
      if ((v36 & 0x10) == 0 || (*(unsigned char *)(v8 + 19) & 8) != 0)
      {
        if ((v36 & 4) == 0 || (*(unsigned char *)(v8 + 19) & 0x18) != 0)
        {
          v34 = 0;
LABEL_89:
          sub_1CC1E4850((uint64_t)&v210, v34);
          uint64_t v8 = *(void *)v5;
          int v9 = &unk_1EBCBE000;
          if (!*(void *)v5) {
            goto LABEL_38;
          }
          goto LABEL_90;
        }
        signed int v37 = 58;
LABEL_85:
        *((void *)this + 14) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v5, **(uint64_t ***)this, -1, v37);
        v34 = (void *)v211[0];
        goto LABEL_89;
      }
      signed int v37 = 60;
    }
    llvm::Function::removeFnAttrs((uint64_t)this, (uint64_t)&v209);
    goto LABEL_85;
  }
LABEL_90:
  if (*(_DWORD *)(v8 + 8))
  {
    uint64_t v38 = *(void *)(v8 + 40);
    if (v38)
    {
      int v39 = *(_DWORD *)(v38 + 40);
      if (v39)
      {
        uint64_t v40 = *(void *)(v38 + 24);
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
        {
          int v127 = __cxa_guard_acquire(&qword_1EBCBE588);
          int v9 = &unk_1EBCBE000;
          if (v127)
          {
            unint64_t v128 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override) {
              unint64_t v128 = 0xFF51AFD7ED558CCDLL;
            }
            qword_1EBCBE580 = v128;
            __cxa_guard_release(&qword_1EBCBE588);
            int v9 = &unk_1EBCBE000;
          }
        }
        unint64_t v41 = 0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0xD9DE41094CE117DCLL)) ^ ((0x9DDFEA08EB382D69
                                                                                   * (qword_1EBCBE580 ^ 0xD9DE41094CE117DCLL)) >> 47) ^ 0xADAD6C6C2E8E65ACLL);
        unsigned int v42 = (-348639895 * ((v41 >> 47) ^ v41)) ^ 0x732D6562;
        for (int i = 1; ; ++i)
        {
          unsigned int v44 = v42 & (v39 - 1);
          uint64_t v45 = v40 + 24 * v44;
          v46 = *(void **)v45;
          if (*(void *)v45 == -1)
          {
            if ("probe-stack" == (char *)-1) {
              goto LABEL_108;
            }
          }
          else if (v46 == (void *)-2)
          {
            if ("probe-stack" == (char *)-2) {
              goto LABEL_108;
            }
          }
          else if (*(void *)(v45 + 8) == 11 {
                 && *v46 == 0x74732D65626F7270
          }
                 && *(void *)((char *)v46 + 3) == 0x6B636174732D6562)
          {
            goto LABEL_108;
          }
          if (v46 == (void *)-1) {
            break;
          }
          unsigned int v42 = i + v44;
        }
      }
    }
  }
LABEL_38:
  uint64_t v11 = *((void *)a2 + 14);
  if (!v11 || !*(_DWORD *)(v11 + 8) || (v12 = *(void *)(v11 + 40)) == 0 || (int v13 = *(_DWORD *)(v12 + 40)) == 0)
  {
LABEL_108:
    uint64_t v48 = *(void *)v5;
    goto LABEL_109;
  }
  uint64_t v14 = *(void *)(v12 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    int v120 = __cxa_guard_acquire(&qword_1EBCBE588);
    int v9 = &unk_1EBCBE000;
    if (v120)
    {
      unint64_t v121 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v121 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v121;
      __cxa_guard_release(&qword_1EBCBE588);
      int v9 = &unk_1EBCBE000;
    }
  }
  unint64_t v15 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0xD9DE41094CE117DCLL)) ^ ((0x9DDFEA08EB382D69
                                                                             * (qword_1EBCBE580 ^ 0xD9DE41094CE117DCLL)) >> 47) ^ 0xADAD6C6C2E8E65ACLL);
  unsigned int v16 = (-348639895 * ((v15 >> 47) ^ v15)) ^ 0x732D6562;
  for (int j = 1; ; ++j)
  {
    unsigned int v18 = v16 & (v13 - 1);
    uint64_t v19 = v14 + 24 * v18;
    uint64_t v20 = *(void **)v19;
    if (*(void *)v19 == -1)
    {
      if ("probe-stack" == (char *)-1) {
        goto LABEL_57;
      }
      goto LABEL_46;
    }
    if (v20 != (void *)-2) {
      break;
    }
    if ("probe-stack" == (char *)-2) {
      goto LABEL_57;
    }
LABEL_46:
    if (v20 == (void *)-1) {
      goto LABEL_108;
    }
    unsigned int v16 = j + v18;
  }
  if (*(void *)(v19 + 8) != 11) {
    goto LABEL_46;
  }
  if (*v20 != 0x74732D65626F7270 || *(void *)((char *)v20 + 3) != 0x6B636174732D6562) {
    goto LABEL_46;
  }
LABEL_57:
  uint64_t v22 = *((void *)a2 + 14);
  if (v22)
  {
    if (*(_DWORD *)(v22 + 8))
    {
      uint64_t v23 = *(void *)(v22 + 40);
      if (v23)
      {
        int v24 = *(_DWORD *)(v23 + 40);
        if (v24)
        {
          uint64_t v25 = *(void *)(v23 + 24);
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_1EBCBE588))
          {
            unint64_t v129 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override) {
              unint64_t v129 = 0xFF51AFD7ED558CCDLL;
            }
            qword_1EBCBE580 = v129;
            __cxa_guard_release(&qword_1EBCBE588);
          }
          unint64_t v26 = 0x9DDFEA08EB382D69
              * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0xD9DE41094CE117DCLL)) ^ ((0x9DDFEA08EB382D69
                                                                                     * (qword_1EBCBE580 ^ 0xD9DE41094CE117DCLL)) >> 47) ^ 0xADAD6C6C2E8E65ACLL);
          unsigned int v27 = (-348639895 * ((v26 >> 47) ^ v26)) ^ 0x732D6562;
          for (int k = 1; ; ++k)
          {
            unsigned int v29 = v27 & (v24 - 1);
            uint64_t v30 = v25 + 24 * v29;
            BOOL v31 = *(void **)v30;
            if (*(void *)v30 == -1)
            {
              if ("probe-stack" == (char *)-1) {
                goto LABEL_76;
              }
            }
            else if (v31 == (void *)-2)
            {
              if ("probe-stack" == (char *)-2) {
                goto LABEL_76;
              }
            }
            else if (*(void *)(v30 + 8) == 11 {
                   && *v31 == 0x74732D65626F7270
            }
                   && *(void *)((char *)v31 + 3) == 0x6B636174732D6562)
            {
LABEL_76:
              uint64_t v33 = *(void *)(v30 + 16);
              goto LABEL_216;
            }
            if (v31 == (void *)-1) {
              break;
            }
            unsigned int v27 = k + v29;
          }
        }
      }
    }
  }
  uint64_t v33 = 0;
LABEL_216:
  uint64_t v48 = llvm::AttributeList::addAttributeAtIndex(v5, **(llvm::LLVMContext ***)this, -1, v33);
  *((void *)this + 14) = v48;
  int v9 = &unk_1EBCBE000;
LABEL_109:
  if (v48)
  {
    if (*(_DWORD *)(v48 + 8))
    {
      uint64_t v49 = *(void *)(v48 + 40);
      if (v49)
      {
        int v50 = *(_DWORD *)(v49 + 40);
        if (v50)
        {
          uint64_t v51 = *(void *)(v49 + 24);
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
          {
            int v118 = __cxa_guard_acquire(&qword_1EBCBE588);
            int v9 = &unk_1EBCBE000;
            if (v118)
            {
              unint64_t v119 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override) {
                unint64_t v119 = 0xFF51AFD7ED558CCDLL;
              }
              qword_1EBCBE580 = v119;
              __cxa_guard_release(&qword_1EBCBE588);
              int v9 = (void *)&unk_1EBCBE000;
            }
          }
          uint64_t v52 = v9[176];
          uint64_t v53 = __ROR8__(v52 ^ 0xABC84C55DF6D441, 30);
          unint64_t v54 = 0x9DDFEA08EB382D69
              * ((v52 + 0x421125E725863753) ^ ((0x9DDFEA08EB382D69
                                                * ((v53 - 0x3D0443CB263770ABLL) ^ (v52 + 0x421125E725863753))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v53 - 0x3D0443CB263770ABLL) ^ (v52 + 0x421125E725863753))));
          unsigned int v55 = -348639895 * ((v54 >> 47) ^ v54);
          for (int m = 1; ; ++m)
          {
            unsigned int v57 = v55 & (v50 - 1);
            int v58 = (uint64_t *)(v51 + 24 * v57);
            uint64_t v59 = *v58;
            if (*v58 == -1)
            {
              if ("darwin-stkchk-strong-link" == (char *)-1) {
                goto LABEL_161;
              }
            }
            else if (v59 == -2)
            {
              if ("darwin-stkchk-strong-link" == (char *)-2) {
                goto LABEL_161;
              }
            }
            else if (v58[1] == 25)
            {
              BOOL v60 = *(void *)v59 == 0x732D6E6977726164 && *(void *)(v59 + 8) == 0x74732D6B68636B74;
              BOOL v61 = v60 && *(void *)(v59 + 16) == 0x6E696C2D676E6F72;
              if (v61 && *(unsigned char *)(v59 + 24) == 107) {
                goto LABEL_161;
              }
            }
            if (v59 == -1) {
              break;
            }
            unsigned int v55 = m + v57;
          }
        }
      }
    }
  }
  uint64_t v63 = *((void *)a2 + 14);
  if (v63)
  {
    if (*(_DWORD *)(v63 + 8))
    {
      uint64_t v64 = *(void *)(v63 + 40);
      if (v64)
      {
        int v65 = *(_DWORD *)(v64 + 40);
        if (v65)
        {
          uint64_t v66 = *(void *)(v64 + 24);
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
          {
            int v122 = __cxa_guard_acquire(&qword_1EBCBE588);
            int v9 = &unk_1EBCBE000;
            if (v122)
            {
              unint64_t v123 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override) {
                unint64_t v123 = 0xFF51AFD7ED558CCDLL;
              }
              qword_1EBCBE580 = v123;
              __cxa_guard_release(&qword_1EBCBE588);
              int v9 = (void *)&unk_1EBCBE000;
            }
          }
          uint64_t v67 = v9[176];
          uint64_t v68 = __ROR8__(v67 ^ 0xABC84C55DF6D441, 30);
          unint64_t v69 = 0x9DDFEA08EB382D69
              * ((v67 + 0x421125E725863753) ^ ((0x9DDFEA08EB382D69
                                                * ((v68 - 0x3D0443CB263770ABLL) ^ (v67 + 0x421125E725863753))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v68 - 0x3D0443CB263770ABLL) ^ (v67 + 0x421125E725863753))));
          unsigned int v70 = -348639895 * ((v69 >> 47) ^ v69);
          for (int n = 1; ; ++n)
          {
            unsigned int v72 = v70 & (v65 - 1);
            v73 = (uint64_t *)(v66 + 24 * v72);
            uint64_t v74 = *v73;
            if (*v73 == -1)
            {
              if ("darwin-stkchk-strong-link" == (char *)-1) {
                goto LABEL_160;
              }
            }
            else if (v74 == -2)
            {
              if ("darwin-stkchk-strong-link" == (char *)-2) {
                goto LABEL_160;
              }
            }
            else if (v73[1] == 25)
            {
              BOOL v75 = *(void *)v74 == 0x732D6E6977726164 && *(void *)(v74 + 8) == 0x74732D6B68636B74;
              BOOL v76 = v75 && *(void *)(v74 + 16) == 0x6E696C2D676E6F72;
              if (v76 && *(unsigned char *)(v74 + 24) == 107)
              {
LABEL_160:
                unint64_t v78 = v9;
                uint64_t v79 = llvm::AttributeList::addAttributeAtIndex(v5, **(uint64_t ***)this, -1, "darwin-stkchk-strong-link", 0x19uLL, 0, 0);
                int v9 = v78;
                *((void *)this + 14) = v79;
                break;
              }
            }
            if (v74 == -1) {
              break;
            }
            unsigned int v70 = n + v72;
          }
        }
      }
    }
  }
LABEL_161:
  uint64_t v80 = *((void *)a2 + 14);
  if (!v80) {
    goto LABEL_275;
  }
  if (!*(_DWORD *)(v80 + 8)) {
    goto LABEL_275;
  }
  uint64_t v81 = *(void *)(v80 + 40);
  if (!v81) {
    goto LABEL_275;
  }
  int v82 = *(_DWORD *)(v81 + 40);
  if (!v82) {
    goto LABEL_275;
  }
  uint64_t v83 = *(void *)(v81 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    v124 = v9;
    int v125 = __cxa_guard_acquire(&qword_1EBCBE588);
    int v9 = v124;
    if (v125)
    {
      unint64_t v126 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v126 = 0xFF51AFD7ED558CCDLL;
      }
      v124[176] = v126;
      __cxa_guard_release(&qword_1EBCBE588);
      int v9 = v124;
    }
  }
  unint64_t v84 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v9[176] ^ 0x100F48110A125916)) ^ ((0x9DDFEA08EB382D69
                                                                     * (v9[176] ^ 0x100F48110A125916)) >> 47) ^ 0x627F657A69732D65);
  unsigned int v85 = (-348639895 * ((v84 >> 47) ^ v84)) ^ 0x2D65626F;
  int v86 = 1;
  while (2)
  {
    unsigned int v87 = v85 & (v82 - 1);
    uint64_t v88 = v83 + 24 * v87;
    uint64_t v89 = *(void **)v88;
    if (*(void *)v88 == -1)
    {
      if ("stack-probe-size" == (char *)-1) {
        break;
      }
      goto LABEL_169;
    }
    if (v89 == (void *)-2)
    {
      if ("stack-probe-size" == (char *)-2) {
        break;
      }
      goto LABEL_169;
    }
    if (*(void *)(v88 + 8) != 16
      || (*v89 == 0x72702D6B63617473 ? (BOOL v90 = v89[1] == 0x657A69732D65626FLL) : (BOOL v90 = 0), !v90))
    {
LABEL_169:
      if (v89 == (void *)-1) {
        goto LABEL_275;
      }
      unsigned int v85 = v86 + v87;
      ++v86;
      continue;
    }
    break;
  }
  uint64_t v91 = *(void *)(v88 + 16);
  if (!v91) {
    goto LABEL_275;
  }
  uint64_t v92 = *(void *)v5;
  if (!*(void *)v5) {
    goto LABEL_333;
  }
  if (!*(_DWORD *)(v92 + 8)) {
    goto LABEL_333;
  }
  uint64_t v93 = *(void *)(v92 + 40);
  if (!v93) {
    goto LABEL_333;
  }
  int v94 = *(_DWORD *)(v93 + 40);
  if (!v94) {
    goto LABEL_333;
  }
  uint64_t v95 = *(void *)(v93 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    uint64_t v207 = v91;
    int v130 = __cxa_guard_acquire(&qword_1EBCBE588);
    uint64_t v91 = v207;
    int v9 = &unk_1EBCBE000;
    if (v130)
    {
      unint64_t v131 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v131 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v131;
      __cxa_guard_release(&qword_1EBCBE588);
      uint64_t v91 = v207;
      int v9 = (void *)&unk_1EBCBE000;
    }
  }
  unint64_t v96 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v9[176] ^ 0x100F48110A125916)) ^ ((0x9DDFEA08EB382D69
                                                                     * (v9[176] ^ 0x100F48110A125916)) >> 47) ^ 0x627F657A69732D65);
  unsigned int v97 = (-348639895 * ((v96 >> 47) ^ v96)) ^ 0x2D65626F;
  int v98 = 1;
  while (2)
  {
    unsigned int v99 = v97 & (v94 - 1);
    uint64_t v100 = v95 + 24 * v99;
    v101 = *(void **)v100;
    if (*(void *)v100 == -1)
    {
      if ("stack-probe-size" == (char *)-1) {
        break;
      }
      goto LABEL_189;
    }
    if (v101 == (void *)-2)
    {
      if ("stack-probe-size" == (char *)-2) {
        break;
      }
      goto LABEL_189;
    }
    if (*(void *)(v100 + 8) != 16
      || (*v101 == 0x72702D6B63617473 ? (BOOL v102 = v101[1] == 0x657A69732D65626FLL) : (BOOL v102 = 0), !v102))
    {
LABEL_189:
      if (v101 == (void *)-1) {
        goto LABEL_333;
      }
      unsigned int v97 = v98 + v99;
      ++v98;
      continue;
    }
    break;
  }
  uint64_t v103 = *(void *)(v100 + 16);
  if (!v103) {
    goto LABEL_333;
  }
  uint64_t v104 = v91;
  v105 = v9;
  uint64_t v106 = *(unsigned int *)(v103 + 16);
  *(void *)&long long v209 = v103 + *(unsigned int *)(v103 + 12) + 25;
  *((void *)&v209 + 1) = v106;
  unsigned int v107 = sub_1CD0AF898((uint64_t)&v209);
  char v108 = BYTE8(v209);
  if (!*((void *)&v209 + 1))
  {
    unint64_t v116 = 0;
    BOOL v117 = 1;
    uint64_t v112 = v104;
    goto LABEL_250;
  }
  unint64_t v109 = 0;
  uint64_t v110 = *((void *)&v209 + 1);
  v111 = (unsigned __int8 *)v209;
  uint64_t v112 = v104;
  while (2)
  {
    int v113 = *v111;
    if ((v113 - 48) < 0xA)
    {
      int v114 = -48;
LABEL_205:
      unsigned int v115 = v114 + v113;
      if (v115 >= v107)
      {
        unint64_t v116 = v109;
        goto LABEL_249;
      }
      unint64_t v116 = v109 * v107 + v115;
      if (v116 / v107 < v109)
      {
        char v108 = 1;
        BOOL v117 = 1;
        goto LABEL_250;
      }
      ++v111;
      unint64_t v109 = v109 * v107 + v115;
      if (!--v110) {
        goto LABEL_249;
      }
      continue;
    }
    break;
  }
  if ((v113 - 97) < 0x1A)
  {
    int v114 = -87;
LABEL_213:
    uint64_t v112 = v104;
    goto LABEL_205;
  }
  if ((v113 - 65) <= 0x19)
  {
    int v114 = -55;
    goto LABEL_213;
  }
  unint64_t v116 = v109;
  uint64_t v112 = v104;
LABEL_249:
  BOOL v117 = *((void *)&v209 + 1) == v110;
  char v108 = v110 != 0;
LABEL_250:
  char v132 = v108 | v117;
  uint64_t v133 = *(unsigned int *)(v112 + 16);
  *(void *)&long long v209 = v112 + *(unsigned int *)(v112 + 12) + 25;
  *((void *)&v209 + 1) = v133;
  unsigned int v134 = sub_1CD0AF898((uint64_t)&v209);
  int v135 = DWORD2(v209);
  if (!*((void *)&v209 + 1))
  {
    unint64_t v142 = 0;
    BOOL v143 = 1;
    int v9 = v105;
    uint64_t v91 = v104;
    goto LABEL_268;
  }
  unint64_t v136 = 0;
  uint64_t v137 = *((void *)&v209 + 1);
  v138 = (unsigned __int8 *)v209;
  int v9 = v105;
  uint64_t v91 = v104;
  while (2)
  {
    int v139 = *v138;
    if ((v139 - 48) < 0xA)
    {
      int v140 = -48;
LABEL_254:
      unsigned int v141 = v140 + v139;
      if (v141 >= v134)
      {
        unint64_t v142 = v136;
        goto LABEL_267;
      }
      unint64_t v142 = v136 * v134 + v141;
      if (v142 / v134 < v136)
      {
        int v135 = 1;
        BOOL v143 = 1;
        goto LABEL_268;
      }
      ++v138;
      unint64_t v136 = v142;
      if (!--v137) {
        goto LABEL_267;
      }
      continue;
    }
    break;
  }
  if ((v139 - 97) < 0x1A)
  {
    int v140 = -87;
LABEL_262:
    int v9 = v105;
    uint64_t v91 = v104;
    goto LABEL_254;
  }
  if ((v139 - 65) <= 0x19)
  {
    int v140 = -55;
    goto LABEL_262;
  }
  unint64_t v142 = v136;
  int v9 = v105;
  uint64_t v91 = v104;
LABEL_267:
  BOOL v143 = *((void *)&v209 + 1) == v137;
  int v135 = v137 != 0;
LABEL_268:
  if (v135 | v143) {
    unint64_t v144 = 0;
  }
  else {
    unint64_t v144 = v142;
  }
  if (v116 <= v144) {
    char v145 = 1;
  }
  else {
    char v145 = v132;
  }
  if (v145)
  {
LABEL_275:
    uint64_t v146 = *(void *)v5;
    if (!*(void *)v5) {
      goto LABEL_337;
    }
    goto LABEL_276;
  }
LABEL_333:
  v186 = v9;
  uint64_t v146 = llvm::AttributeList::addAttributeAtIndex(v5, **(llvm::LLVMContext ***)this, -1, v91);
  int v9 = v186;
  *((void *)this + 14) = v146;
  if (!v146) {
    goto LABEL_337;
  }
LABEL_276:
  if (!*(_DWORD *)(v146 + 8)) {
    goto LABEL_337;
  }
  uint64_t v147 = *(void *)(v146 + 40);
  if (!v147) {
    goto LABEL_337;
  }
  int v148 = *(_DWORD *)(v147 + 40);
  if (!v148) {
    goto LABEL_337;
  }
  uint64_t v149 = *(void *)(v147 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    v192 = v9;
    int v193 = __cxa_guard_acquire(&qword_1EBCBE588);
    int v9 = v192;
    if (v193)
    {
      unint64_t v194 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v194 = 0xFF51AFD7ED558CCDLL;
      }
      v192[176] = v194;
      __cxa_guard_release(&qword_1EBCBE588);
      int v9 = v192;
    }
  }
  uint64_t v150 = v9[176];
  uint64_t v151 = __ROR8__(v150 ^ 0xCFA4117EE3121041, 30);
  unint64_t v152 = 0x9DDFEA08EB382D69
       * ((v150 - 0x53DD633131DD66D6) ^ ((0x9DDFEA08EB382D69
                                          * ((v151 - 0x1284505D46BAD7E0) ^ (v150 - 0x53DD633131DD66D6))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v151 - 0x1284505D46BAD7E0) ^ (v150 - 0x53DD633131DD66D6))));
  unsigned int v153 = -348639895 * ((v152 >> 47) ^ v152);
  int v154 = 1;
  while (2)
  {
    unsigned int v155 = v153 & (v148 - 1);
    uint64_t v156 = v149 + 24 * v155;
    v157 = *(void **)v156;
    if (*(void *)v156 == -1)
    {
      if ("min-legal-vector-width" == (char *)-1) {
        break;
      }
      goto LABEL_283;
    }
    if (v157 == (void *)-2)
    {
      if ("min-legal-vector-width" == (char *)-2) {
        break;
      }
      goto LABEL_283;
    }
    if (*(void *)(v156 + 8) != 22
      || (*v157 == 0x6167656C2D6E696DLL ? (BOOL v158 = v157[1] == 0x726F746365762D6CLL) : (BOOL v158 = 0),
          v158 ? (BOOL v159 = *(void *)((char *)v157 + 14) == 0x68746469772D726FLL) : (BOOL v159 = 0),
          !v159))
    {
LABEL_283:
      if (v157 == (void *)-1) {
        goto LABEL_337;
      }
      unsigned int v153 = v154 + v155;
      ++v154;
      continue;
    }
    break;
  }
  uint64_t v160 = *(void *)(v156 + 16);
  if (!v160) {
    goto LABEL_337;
  }
  uint64_t v161 = *((void *)a2 + 14);
  if (!v161) {
    goto LABEL_335;
  }
  if (!*(_DWORD *)(v161 + 8)) {
    goto LABEL_335;
  }
  uint64_t v162 = *(void *)(v161 + 40);
  if (!v162) {
    goto LABEL_335;
  }
  int v163 = *(_DWORD *)(v162 + 40);
  if (!v163) {
    goto LABEL_335;
  }
  uint64_t v164 = *(void *)(v162 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    uint64_t v208 = v164;
    int v195 = __cxa_guard_acquire(&qword_1EBCBE588);
    uint64_t v164 = v208;
    int v9 = &unk_1EBCBE000;
    if (v195)
    {
      unint64_t v196 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v196 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v196;
      __cxa_guard_release(&qword_1EBCBE588);
      uint64_t v164 = v208;
      int v9 = (void *)&unk_1EBCBE000;
    }
  }
  uint64_t v165 = v9[176];
  uint64_t v166 = __ROR8__(v165 ^ 0xCFA4117EE3121041, 30);
  unint64_t v167 = 0x9DDFEA08EB382D69
       * ((v165 - 0x53DD633131DD66D6) ^ ((0x9DDFEA08EB382D69
                                          * ((v166 - 0x1284505D46BAD7E0) ^ (v165 - 0x53DD633131DD66D6))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v166 - 0x1284505D46BAD7E0) ^ (v165 - 0x53DD633131DD66D6))));
  unsigned int v168 = -348639895 * ((v167 >> 47) ^ v167);
  for (iint i = 1; ; ++ii)
  {
    unsigned int v170 = v168 & (v163 - 1);
    uint64_t v171 = v164 + 24 * v170;
    v172 = *(void **)v171;
    if (*(void *)v171 == -1)
    {
      if ("min-legal-vector-width" == (char *)-1) {
        goto LABEL_320;
      }
      goto LABEL_306;
    }
    if (v172 != (void *)-2) {
      break;
    }
    if ("min-legal-vector-width" == (char *)-2) {
      goto LABEL_320;
    }
LABEL_306:
    if (v172 == (void *)-1) {
      goto LABEL_335;
    }
    unsigned int v168 = ii + v170;
  }
  if (*(void *)(v171 + 8) != 22) {
    goto LABEL_306;
  }
  BOOL v173 = *v172 == 0x6167656C2D6E696DLL && v172[1] == 0x726F746365762D6CLL;
  if (!v173 || *(void *)((char *)v172 + 14) != 0x68746469772D726FLL) {
    goto LABEL_306;
  }
LABEL_320:
  uint64_t v175 = *(void *)(v171 + 16);
  if (!v175)
  {
LABEL_335:
    uint64_t v187 = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)v5, **(uint64_t ***)this, -1, "min-legal-vector-width", 0x16uLL);
LABEL_336:
    *((void *)this + 14) = v187;
    goto LABEL_337;
  }
  uint64_t v176 = *(unsigned int *)(v160 + 16);
  *(void *)&long long v209 = v160 + *(unsigned int *)(v160 + 12) + 25;
  *((void *)&v209 + 1) = v176;
  unsigned int v177 = sub_1CD0AF898((uint64_t)&v209);
  int v178 = DWORD2(v209);
  if (!*((void *)&v209 + 1))
  {
    unint64_t v185 = 0;
LABEL_350:
    BOOL v191 = 1;
    goto LABEL_362;
  }
  unint64_t v179 = 0;
  uint64_t v180 = *((void *)&v209 + 1);
  v181 = (unsigned __int8 *)v209;
  while (2)
  {
    int v182 = *v181;
    if ((v182 - 48) < 0xA)
    {
      int v183 = -48;
LABEL_325:
      unsigned int v184 = v183 + v182;
      if (v184 >= v177) {
        goto LABEL_360;
      }
      unint64_t v185 = v179 * v177 + v184;
      if (v185 / v177 < v179)
      {
        int v178 = 1;
        goto LABEL_350;
      }
      ++v181;
      unint64_t v179 = v185;
      if (!--v180) {
        goto LABEL_361;
      }
      continue;
    }
    break;
  }
  if ((v182 - 97) < 0x1A)
  {
    int v183 = -87;
    goto LABEL_325;
  }
  if ((v182 - 65) <= 0x19)
  {
    int v183 = -55;
    goto LABEL_325;
  }
LABEL_360:
  unint64_t v185 = v179;
LABEL_361:
  BOOL v191 = *((void *)&v209 + 1) == v180;
  int v178 = v180 != 0;
LABEL_362:
  if (v178 | v191) {
    unint64_t v197 = 0;
  }
  else {
    unint64_t v197 = v185;
  }
  uint64_t v198 = *(unsigned int *)(v175 + 16);
  *(void *)&long long v209 = v175 + *(unsigned int *)(v175 + 12) + 25;
  *((void *)&v209 + 1) = v198;
  unsigned int v199 = sub_1CD0AF898((uint64_t)&v209);
  uint64_t v200 = *((void *)&v209 + 1);
  if (*((void *)&v209 + 1))
  {
    unint64_t v201 = 0;
    v202 = (unsigned __int8 *)v209;
    while (1)
    {
      int v203 = *v202;
      if ((v203 - 48) >= 0xA)
      {
        if ((v203 - 97) >= 0x1A)
        {
          if ((v203 - 65) > 0x19) {
            break;
          }
          int v204 = -55;
        }
        else
        {
          int v204 = -87;
        }
      }
      else
      {
        int v204 = -48;
      }
      unsigned int v205 = v204 + v203;
      if (v205 >= v199) {
        break;
      }
      unint64_t v206 = v201 * v199 + v205;
      if (v206 / v199 < v201) {
        break;
      }
      ++v202;
      unint64_t v201 = v206;
      if (!--v200)
      {
        if (v206 <= v197) {
          break;
        }
        uint64_t v187 = llvm::AttributeList::addAttributeAtIndex(v5, **(llvm::LLVMContext ***)this, -1, v175);
        goto LABEL_336;
      }
    }
  }
LABEL_337:
  uint64_t v188 = *((void *)a2 + 14);
  if (v188)
  {
    uint64_t result = *(void *)v5;
    if ((*(unsigned char *)(v188 + 17) & 1) == 0) {
      goto LABEL_343;
    }
    if (!result || (*(unsigned char *)(result + 17) & 1) == 0)
    {
      uint64_t result = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v5, **(uint64_t ***)this, -1, 40);
      *((void *)this + 14) = result;
      goto LABEL_343;
    }
    goto LABEL_344;
  }
  uint64_t result = *(void *)v5;
LABEL_343:
  if (result)
  {
LABEL_344:
    if (*(unsigned char *)(result + 14))
    {
      uint64_t v190 = *((void *)a2 + 14);
      if (!v190 || (*(unsigned char *)(v190 + 14) & 1) == 0)
      {
        uint64_t result = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)v5, **(uint64_t ***)this, -1, 16);
        *((void *)this + 14) = result;
      }
    }
  }
  return result;
}

uint64_t sub_1CC511D4C(uint64_t result, int a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)result + 4 * v3) = a2;
  unsigned int v4 = *(_DWORD *)(result + 8) + 1;
  *(_DWORD *)(result + 8) = v4;
  if (a3)
  {
    if (v4 >= *(_DWORD *)(result + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)result + 4 * v4) = a3;
    unsigned int v5 = *(_DWORD *)(result + 12);
    unsigned int v6 = *(_DWORD *)(result + 8) + 1;
    *(_DWORD *)(result + 8) = v6;
    if (v6 >= v5) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)result + 4 * v6) = HIDWORD(a3);
    ++*(_DWORD *)(result + 8);
  }
  return result;
}

uint64_t sub_1CC511E5C(uint64_t result, int a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)result + 4 * v3) = a2;
  unsigned int v4 = *(_DWORD *)(result + 12);
  unsigned int v5 = *(_DWORD *)(result + 8) + 1;
  *(_DWORD *)(result + 8) = v5;
  if (v5 >= v4) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)result + 4 * v5) = a3;
  unsigned int v6 = *(_DWORD *)(result + 12);
  unsigned int v7 = *(_DWORD *)(result + 8) + 1;
  *(_DWORD *)(result + 8) = v7;
  if (v7 >= v6) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)result + 4 * v7) = HIDWORD(a3);
  ++*(_DWORD *)(result + 8);
  return result;
}

BOOL sub_1CC511F64(BOOL result, void *a2, size_t a3)
{
  if (!result) {
    return result;
  }
  if (!*(_DWORD *)(result + 8)) {
    return 0;
  }
  uint64_t v3 = *(void *)(result + 40);
  if (!v3) {
    return 0;
  }
  int v4 = *(_DWORD *)(v3 + 40);
  if (!v4) {
    return 0;
  }
  uint64_t v7 = *(void *)(v3 + 24);
  int v8 = sub_1CD0B03C8(a2, (uint64_t)a2 + a3);
  unsigned int v9 = v4 - 1;
  for (int i = 1; ; ++i)
  {
    int v11 = v8 & v9;
    uint64_t v12 = v7 + 24 * (v8 & v9);
    int v13 = *(const void **)v12;
    if (*(void *)v12 == -1)
    {
      if (a2 == (void *)-1) {
        goto LABEL_15;
      }
      goto LABEL_8;
    }
    if (v13 != (const void *)-2) {
      break;
    }
    if (a2 == (void *)-2) {
      goto LABEL_15;
    }
LABEL_8:
    if (v13 == (const void *)-1) {
      return 0;
    }
    int v8 = i + v11;
  }
  if (a3 != *(void *)(v12 + 8) || a3 && memcmp(a2, *(const void **)v12, a3)) {
    goto LABEL_8;
  }
LABEL_15:
  uint64_t v14 = *(void *)(v12 + 16);
  if (v14 && *(_DWORD *)(v14 + 16) == 4) {
    return *(_DWORD *)(v14 + *(unsigned int *)(v14 + 12) + 25) == 1702195828;
  }
  return 0;
}

BOOL sub_1CC512084(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  sub_1CC5097B4(a2, a5);
  uint64_t v7 = *(unsigned int *)(a3 + 8);
  return v7 == a5[2] && memcmp(*(const void **)a5, *(const void **)a3, 4 * v7) == 0;
}

BOOL sub_1CC5120E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v5)
  {
    unsigned int v6 = (uint64_t *)(a2 + 48);
    unsigned int v7 = *(_DWORD *)(a5 + 8);
    uint64_t v8 = 8 * v5;
    do
    {
      uint64_t v9 = *v6;
      if (v7 >= *(_DWORD *)(a5 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a5 + 4 * v7) = v9;
      unsigned int v10 = *(_DWORD *)(a5 + 12);
      unsigned int v11 = *(_DWORD *)(a5 + 8) + 1;
      *(_DWORD *)(a5 + 8) = v11;
      if (v11 >= v10) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a5 + 4 * v11) = HIDWORD(v9);
      unsigned int v7 = *(_DWORD *)(a5 + 8) + 1;
      *(_DWORD *)(a5 + 8) = v7;
      ++v6;
      v8 -= 8;
    }
    while (v8);
  }
  else
  {
    unsigned int v7 = *(_DWORD *)(a5 + 8);
  }
  return *(_DWORD *)(a3 + 8) == v7 && memcmp(*(const void **)a5, *(const void **)a3, 4 * v7) == 0;
}

unint64_t sub_1CC5121EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  if (v3)
  {
    int v4 = (uint64_t *)(a2 + 48);
    unsigned int v5 = *(_DWORD *)(a3 + 8);
    uint64_t v6 = 8 * v3;
    do
    {
      uint64_t v7 = *v4;
      if (v5 >= *(_DWORD *)(a3 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a3 + 4 * v5) = v7;
      unsigned int v8 = *(_DWORD *)(a3 + 12);
      unsigned int v9 = *(_DWORD *)(a3 + 8) + 1;
      *(_DWORD *)(a3 + 8) = v9;
      if (v9 >= v8) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a3 + 4 * v9) = HIDWORD(v7);
      unsigned int v5 = *(_DWORD *)(a3 + 8) + 1;
      *(_DWORD *)(a3 + 8) = v5;
      ++v4;
      v6 -= 8;
    }
    while (v6);
  }
  else
  {
    unsigned int v5 = *(_DWORD *)(a3 + 8);
  }
  return sub_1CC13A6B8(*(void **)a3, *(void *)a3 + 4 * v5);
}

uint64_t sub_1CC5122C8(uint64_t *a1, uint64_t a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    int v7 = sub_1CD0B03C8(*(void **)a2, *(void *)a2 + *(void *)(a2 + 8));
    uint64_t v8 = 0;
    unsigned int v9 = v4 - 1;
    unsigned int v10 = *(const void **)a2;
    for (int i = 1; ; ++i)
    {
      int v12 = v7 & v9;
      uint64_t v13 = v6 + 24 * (v7 & v9);
      uint64_t v14 = *(const void **)v13;
      if (*(void *)v13 == -1)
      {
        if (v10 == (const void *)-1) {
          goto LABEL_14;
        }
      }
      else if (v14 == (const void *)-2)
      {
        if (v10 == (const void *)-2) {
          goto LABEL_14;
        }
      }
      else
      {
        size_t v16 = *(void *)(a2 + 8);
        if (v16 == *(void *)(v13 + 8) && (!v16 || !memcmp(v10, *(const void **)v13, v16)))
        {
LABEL_14:
          uint64_t result = 1;
          goto LABEL_8;
        }
      }
      if (v14 == (const void *)-1) {
        break;
      }
      if (v8) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v14 == (const void *)-2;
      }
      if (v17) {
        uint64_t v8 = v13;
      }
      int v7 = i + v12;
    }
    uint64_t result = 0;
    if (v8) {
      uint64_t v13 = v8;
    }
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t result = 0;
  }
LABEL_8:
  *a3 = v13;
  return result;
}

uint64_t sub_1CC5123DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1CC512580(a1, 2 * v7);
    int v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = *(void *)a1;
      int v12 = sub_1CD0B03C8(*(void **)a3, *(void *)a3 + *(void *)(a3 + 8));
      uint64_t v13 = 0;
      unsigned int v14 = v10 - 1;
      unint64_t v15 = *(const void **)a3;
      for (int i = 1; ; ++i)
      {
        int v17 = v12 & v14;
        a4 = v11 + 24 * (v12 & v14);
        unsigned int v18 = *(const void **)a4;
        if (*(void *)a4 == -1)
        {
          if (v15 == (const void *)-1) {
            goto LABEL_4;
          }
        }
        else if (v18 == (const void *)-2)
        {
          if (v15 == (const void *)-2) {
            goto LABEL_4;
          }
        }
        else
        {
          size_t v19 = *(void *)(a3 + 8);
          if (v19 == *(void *)(a4 + 8) && (!v19 || !memcmp(v15, *(const void **)a4, v19))) {
            goto LABEL_4;
          }
        }
        if (v18 == (const void *)-1) {
          break;
        }
        if (v13) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v18 == (const void *)-2;
        }
        if (v20) {
          uint64_t v13 = a4;
        }
        int v12 = i + v17;
      }
      if (v13) {
        a4 = v13;
      }
    }
    else
    {
      a4 = 0;
    }
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
    sub_1CC512580(a1, v7);
    uint64_t v21 = 0;
    sub_1CC5122C8((uint64_t *)a1, a3, &v21);
    a4 = v21;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)a4 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

_OWORD *sub_1CC512580(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD5A6060(a1, (uint64_t)v4, (uint64_t)v4 + 24 * v3);
    llvm::deallocate_buffer(v4, (void *)(24 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 24 * v10;
    do
    {
      *uint64_t result = xmmword_1CFAC4A20;
      uint64_t result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC512664(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *a1;
  if (*a1) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    BOOL v5 = v3 != 0;
    if (v3) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = v2 == 0;
    }
    if (!v6) {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    char v7 = llvm::AttributeImpl::operator<(*a1, *a2);
    if (v7) {
      return 0xFFFFFFFFLL;
    }
    BOOL v5 = 1;
  }
  if (v2) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = v5;
  }
  if (v2)
  {
    if (v3) {
      return llvm::AttributeImpl::operator<(v2, v3);
    }
  }
  return result;
}

BOOL sub_1CC5126E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v5)
  {
    BOOL v6 = (uint64_t *)(a2 + 40);
    unsigned int v7 = *(_DWORD *)(a5 + 8);
    uint64_t v8 = 8 * v5;
    do
    {
      uint64_t v9 = *v6;
      if (v7 >= *(_DWORD *)(a5 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a5 + 4 * v7) = v9;
      unsigned int v10 = *(_DWORD *)(a5 + 12);
      unsigned int v11 = *(_DWORD *)(a5 + 8) + 1;
      *(_DWORD *)(a5 + 8) = v11;
      if (v11 >= v10) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a5 + 4 * v11) = HIDWORD(v9);
      unsigned int v7 = *(_DWORD *)(a5 + 8) + 1;
      *(_DWORD *)(a5 + 8) = v7;
      ++v6;
      v8 -= 8;
    }
    while (v8);
  }
  else
  {
    unsigned int v7 = *(_DWORD *)(a5 + 8);
  }
  return *(_DWORD *)(a3 + 8) == v7 && memcmp(*(const void **)a5, *(const void **)a3, 4 * v7) == 0;
}

unint64_t sub_1CC5127E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  if (v3)
  {
    BOOL v4 = (uint64_t *)(a2 + 40);
    unsigned int v5 = *(_DWORD *)(a3 + 8);
    uint64_t v6 = 8 * v3;
    do
    {
      uint64_t v7 = *v4;
      if (v5 >= *(_DWORD *)(a3 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a3 + 4 * v5) = v7;
      unsigned int v8 = *(_DWORD *)(a3 + 12);
      unsigned int v9 = *(_DWORD *)(a3 + 8) + 1;
      *(_DWORD *)(a3 + 8) = v9;
      if (v9 >= v8) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a3 + 4 * v9) = HIDWORD(v7);
      unsigned int v5 = *(_DWORD *)(a3 + 8) + 1;
      *(_DWORD *)(a3 + 8) = v5;
      ++v4;
      v6 -= 8;
    }
    while (v6);
  }
  else
  {
    unsigned int v5 = *(_DWORD *)(a3 + 8);
  }
  return sub_1CC13A6B8(*(void **)a3, *(void *)a3 + 4 * v5);
}

void sub_1CC5128C4(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    int v3 = a2;
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v2 != a2) {
        bzero((void *)(*(void *)a1 + 8 * v2), 8 * a2 - 8 * v2);
      }
    }
    *(_DWORD *)(a1 + 8) = v3;
  }
}

unsigned char *sub_1CC512940(uint64_t a1, uint64_t a2, char *__src, char *a4)
{
  unsigned int v5 = __src;
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = (a2 - *(void *)a1) >> 3;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  unint64_t v10 = *(unsigned int *)(a1 + 12);
  size_t v11 = a4 - __src;
  unint64_t v12 = v9 + ((a4 - __src) >> 3);
  if (*(void *)a1 + 8 * v9 == a2)
  {
    if (v12 > v10) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v5 != a4)
    {
      memcpy((void *)(v7 + 8 * v9), v5, v11);
      LODWORD(v9) = *(_DWORD *)(a1 + 8);
      uint64_t v7 = *(void *)a1;
    }
    *(_DWORD *)(a1 + 8) = v9 + (v11 >> 3);
    return (unsigned char *)(v7 + 8 * v8);
  }
  else
  {
    unint64_t v15 = (uint64_t)v11 >> 3;
    if (v12 > v10) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    size_t v16 = (unsigned char *)(v7 + 8 * v9);
    __srca = (unsigned char *)(v7 + 8 * v8);
    unint64_t v17 = (v16 - __srca) >> 3;
    if (v17 >= v15)
    {
      sub_1CD4570C8(a1, &v16[-8 * v15], (char *)(v7 + 8 * v9));
      if (&v16[-8 * v15] != __srca) {
        memmove(&__srca[8 * v15], __srca, &v16[-8 * v15] - __srca);
      }
      if (v5 != a4)
      {
        uint64_t v13 = __srca;
        memmove(__srca, v5, v11);
        return v13;
      }
    }
    else
    {
      unsigned int v18 = v9 + (v11 >> 3);
      *(_DWORD *)(a1 + 8) = v18;
      if (v8 != v9)
      {
        size_t v19 = (void *)(v7 + 8 * v8);
        memcpy((void *)(v7 + 8 * v18 - 8 * v17), __srca, v16 - __srca);
        do
        {
          uint64_t v20 = *(void *)v5;
          v5 += 8;
          *v19++ = v20;
          --v17;
        }
        while (v17);
      }
      if (v5 != a4) {
        memcpy(v16, v5, a4 - v5);
      }
    }
    return __srca;
  }
}

BOOL sub_1CC512AEC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(unsigned char *)(a2 + 8) == 2)
    {
      uint64_t v5 = *(unsigned int *)(a2 + 12);
      v6[0] = a2 + 24;
      v6[1] = v5;
      uint64_t v3 = sub_1CC512B60(a1 + 16, (uint64_t)v6);
      return v3 != 0;
    }
    unint64_t v2 = *(unsigned int *)(a2 + 12);
  }
  else
  {
    unint64_t v2 = 0;
  }
  uint64_t v3 = (1 << v2) & *(void *)(a1 + ((v2 >> 3) & 0x1FFFFFF8));
  return v3 != 0;
}

uint64_t sub_1CC512B60(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  size_t v16 = (void *)(a1 + 8);
  uint64_t v4 = a1 + 16;
  while (sub_1CC016A40(v4, a2, (uint64_t)(v2 + 4)))
  {
    size_t v16 = v2;
LABEL_9:
    uint64_t result = 0;
    unint64_t v2 = (void *)*v2;
    if (!v2) {
      return result;
    }
  }
  if (sub_1CC016A40(v4, (uint64_t)(v2 + 4), a2))
  {
    ++v2;
    goto LABEL_9;
  }
  uint64_t v5 = v2;
  uint64_t v6 = (void *)*v2;
  if (*v2)
  {
    uint64_t v5 = v2;
    do
    {
      BOOL v7 = sub_1CC016A40(v4, (uint64_t)(v6 + 4), a2);
      uint64_t v8 = v6 + 1;
      if (!v7)
      {
        uint64_t v8 = v6;
        uint64_t v5 = v6;
      }
      uint64_t v6 = (void *)*v8;
    }
    while (*v8);
  }
  uint64_t v9 = (void *)v2[1];
  if (v9)
  {
    do
    {
      BOOL v10 = sub_1CC016A40(v4, a2, (uint64_t)(v9 + 4));
      if (v10) {
        size_t v11 = v9;
      }
      else {
        size_t v11 = v9 + 1;
      }
      unint64_t v12 = v16;
      if (v10) {
        unint64_t v12 = v9;
      }
      size_t v16 = v12;
      uint64_t v9 = (void *)*v11;
    }
    while (*v11);
  }
  if (v5 == v16) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    uint64_t v13 = (void *)v5[1];
    if (v13)
    {
      do
      {
        unsigned int v14 = v13;
        uint64_t v13 = (void *)*v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        unsigned int v14 = (void *)v5[2];
        BOOL v15 = *v14 == (void)v5;
        uint64_t v5 = v14;
      }
      while (!v15);
    }
    ++result;
    uint64_t v5 = v14;
  }
  while (v14 != v16);
  return result;
}

uint64_t llvm::UpgradeIntrinsicFunction(llvm *this, llvm::Function *a2, llvm::Function **a3)
{
  *(void *)a2 = 0;
  uint64_t v5 = sub_1CC512D18(this, a2);
  if (*(void *)a2) {
    uint64_t v6 = *(llvm **)a2;
  }
  else {
    uint64_t v6 = this;
  }
  BOOL v7 = (llvm::LLVMContext *)*((unsigned int *)v6 + 9);
  if (v7) {
    *((void *)v6 + 14) = llvm::Intrinsic::getAttributes(**(llvm::Intrinsic ***)v6, v7);
  }
  return v5;
}

uint64_t sub_1CC512D18(llvm::Function *this, llvm::Function *a2)
{
  uint64_t v1049 = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)this + 23) & 0x10) == 0) {
    return 0;
  }
  unint64_t v2 = a2;
  uint64_t v4 = *(uint64_t ***)this;
  uint64_t v5 = ***(void ***)this;
  uint64_t v6 = *(void *)(v5 + 152);
  uint64_t v7 = *(unsigned int *)(v5 + 168);
  unsigned int v8 = this >> 4;
  if (!v7) {
    goto LABEL_8;
  }
  LODWORD(v9) = (v7 - 1) & (v8 ^ (this >> 9));
  uint64_t v10 = v6 + 16 * v9;
  size_t v11 = *(llvm::Function **)v10;
  if (*(llvm::Function **)v10 != this)
  {
    int v12 = 1;
    while (v11 != (llvm::Function *)-4096)
    {
      int v13 = v9 + v12++;
      uint64_t v9 = v13 & (v7 - 1);
      size_t v11 = *(llvm::Function **)(v6 + 16 * v9);
      if (v11 == this)
      {
        uint64_t v10 = v6 + 16 * v9;
        goto LABEL_9;
      }
    }
LABEL_8:
    uint64_t v10 = v6 + 16 * v7;
  }
LABEL_9:
  uint64_t v14 = *(void *)(v10 + 8);
  uint64_t v15 = *(void *)v14;
  unint64_t v16 = *(void *)v14 - 9;
  if (*(void *)v14 < 9uLL) {
    return 0;
  }
  if (*(_DWORD *)(v14 + 16) != 1836477548 || *(unsigned char *)(v14 + 20) != 46) {
    return 0;
  }
  uint64_t v21 = v14 + 21;
  int v20 = *(char *)(v14 + 21);
  unint64_t v22 = v15 - 5;
  v1041 = (char *)(v14 + 21);
  unint64_t v1042 = v15 - 5;
  switch(v20)
  {
    case 'a':
      if (v22 < 8) {
        goto LABEL_82;
      }
      if (*(void *)v21 == 0x746962722E6D7261) {
        goto LABEL_463;
      }
      if (v22 < 0xC) {
        goto LABEL_82;
      }
      if (*(void *)v21 == 0x2E34366863726161 && *(_DWORD *)(v14 + 29) == 1953063538) {
        goto LABEL_463;
      }
      if (v22 >= 0x13)
      {
        if (*(void *)v21 == 0x2E34366863726161
          && *(void *)(v14 + 29) == 0x6972662E6E6F656ELL
          && *(void *)(v14 + 32) == 0x6E746E6972662E6ELL)
        {
          v316 = (uint64_t **)*((void *)this + 5);
          if (*((_WORD *)this + 9)) {
            llvm::Function::BuildLazyArguments(this);
          }
          v1043.__r_.__value_.__r.__words[0] = **((void **)this + 11);
          uint64_t v18 = 1;
          uint64_t v207 = v316;
          int v68 = 260;
          goto LABEL_774;
        }
LABEL_444:
        if (*(void *)v21 == 0x2E34366863726161
          && *(void *)(v14 + 29) == 0x6962722E6E6F656ELL
          && *(unsigned char *)(v14 + 37) == 116)
        {
LABEL_463:
          v227 = (uint64_t **)*((void *)this + 5);
          if (*((_WORD *)this + 9)) {
            llvm::Function::BuildLazyArguments(this);
          }
          v1043.__r_.__value_.__r.__words[0] = **((void **)this + 11);
          uint64_t v18 = 1;
          uint64_t v207 = v227;
          int v68 = 8;
          goto LABEL_774;
        }
        goto LABEL_451;
      }
      if (v22 >= 0x11) {
        goto LABEL_444;
      }
      if (v22 < 0xD) {
        goto LABEL_82;
      }
LABEL_451:
      if (*(void *)v21 == 0x6E6F656E2E6D7261 && *(void *)(v14 + 26) == 0x7A6C63762E6E6F65)
      {
        if (*((_WORD *)this + 9))
        {
          llvm::Function::BuildLazyArguments(this);
          uint64_t v5 = ***(void ***)this;
        }
        *(void *)&long long v1046 = **((void **)this + 11);
        *((void *)&v1046 + 1) = v5 + 1888;
        v329 = (llvm::PointerType *)llvm::FunctionType::get(**(uint64_t ****)(*((void *)this + 3) + 16), (uint64_t)&v1046, 2, 0);
        char v330 = *((_DWORD *)this + 8) & 0xF;
        v331 = (llvm::Type *)(*(_DWORD *)(*(void *)this + 8) >> 8);
        uint64_t v332 = 14;
        if (v22 < 0xE) {
          uint64_t v332 = v15 - 5;
        }
        __int16 v1045 = 1283;
        v1043.__r_.__value_.__r.__words[0] = (std::string::size_type)"llvm.ctlz.";
        v1043.__r_.__value_.__r.__words[2] = v21 + v332;
        unint64_t v1044 = v22 - v332;
        unint64_t v333 = *((void *)this + 5);
        v334 = (char *)operator new(0x80uLL);
        v335 = v334 + 8;
        *((_DWORD *)v334 + 7) = *((_DWORD *)v334 + 7) & 0x38000000 | 0x40000000;
        *(void *)v334 = 0;
        llvm::Function::Function((unint64_t *)v334 + 1, v329, v330, v331, (const char **)&v1043.__r_.__value_.__l.__data_, v333);
        *unint64_t v2 = v335;
        return 1;
      }
      if (*(void *)v21 == 0x6E6F656E2E6D7261 && *(void *)(v14 + 26) == 0x746E63762E6E6F65)
      {
        v226 = (uint64_t **)*((void *)this + 5);
        if (*((_WORD *)this + 9)) {
          llvm::Function::BuildLazyArguments(this);
        }
        v1043.__r_.__value_.__r.__words[0] = **((void **)this + 11);
        uint64_t v18 = 1;
        uint64_t v207 = v226;
        int v68 = 53;
        goto LABEL_774;
      }
LABEL_82:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCD82F8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_1EBCD82F8))
      {
        llvm::Regex::Regex();
      }
      if (llvm::Regex::match((uint64_t)&unk_1EBCD8310, v1041, v1042, 0, 0))
      {
        uint64_t v43 = *((void *)this + 3);
        uint64_t v44 = 8 * *(unsigned int *)(v43 + 12) - 8;
        *(_OWORD *)&v1043.__r_.__value_.__l.__data_ = *(_OWORD *)(*(void *)(v43 + 16) + 8);
        uint64_t v45 = llvm::StringRef::find((uint64_t *)&v1041, "lane", 4uLL, 0);
        v46 = (int *)((char *)&unk_1CFAC7ED0 + (v44 >> 1) - 20);
        if (v45 == -1) {
          v46 = (int *)((char *)&unk_1CFAC7EC0 + (v44 >> 1) - 12);
        }
        int v47 = *v46;
        uint64_t v48 = &v1043;
        uint64_t v49 = (uint64_t **)*((void *)this + 5);
        goto LABEL_1076;
      }
      if (v1042 == 18)
      {
        if (*(void *)v1041 == 0x657268742E6D7261
          && *((void *)v1041 + 1) == 0x746E696F702E6461
          && *((_WORD *)v1041 + 8) == 29285)
        {
          goto LABEL_249;
        }
      }
      else
      {
        if (v1042 == 22)
        {
          if (*(void *)v1041 != 0x2E34366863726161
            || *((void *)v1041 + 1) != 0x702E646165726874
            || *(void *)(v1041 + 14) != 0x7265746E696F702ELL)
          {
            goto LABEL_253;
          }
LABEL_249:
          v105 = (uint64_t **)*((void *)this + 5);
          llvm::Intrinsic::getType(*v105, 294, 0, 0);
          Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v105, 294, 0, 0);
          unsigned int v107 = "llvm.thread.pointer";
          goto LABEL_625;
        }
        if (v1042 < 0x10)
        {
          if (v1042 != 15)
          {
            if (v1042 < 0xC) {
              goto LABEL_590;
            }
            if (*(void *)v1041 != 0x6E6F656E2E6D7261 || *((_DWORD *)v1041 + 2) != 1835426350) {
              goto LABEL_590;
            }
LABEL_586:
            if (*(void *)&v1041[v1042 - 12] != 0x762E32336634762ELL || *(_DWORD *)&v1041[v1042 - 4] != 946419249) {
              goto LABEL_590;
            }
            switch(v1042)
            {
              case 0x1BuLL:
                if (*(void *)v1041 != 0x6E6F656E2E6D7261
                  || *((void *)v1041 + 1) != 0x2E616C6D6D66622ELL
                  || *((void *)v1041 + 2) != 0x31762E3233663476
                  || *(void *)(v1041 + 19) != 0x38693631762E3233)
                {
                  goto LABEL_1320;
                }
                v396 = v2;
                unint64_t v397 = 0x100000F17;
                goto LABEL_1258;
              case 0x1CuLL:
                v396 = v2;
                if (*(void *)v1041 == 0x6E6F656E2E6D7261
                  && *((void *)v1041 + 1) == 0x626C616C6D66622ELL
                  && *((void *)v1041 + 2) == 0x762E32336634762ELL
                  && *((_DWORD *)v1041 + 6) == 946419249)
                {
                  unint64_t v397 = 0x100000F15;
                }
                else if (*(void *)v1041 ^ 0x6E6F656E2E6D7261 | *((void *)v1041 + 1) ^ 0x746C616C6D66622ELL | *((void *)v1041 + 2) ^ 0x762E32336634762ELL | *((unsigned int *)v1041 + 6) ^ 0x38693631)
                {
                  unint64_t v397 = 0;
                }
                else
                {
                  unint64_t v397 = 0x100000F16;
                }
                goto LABEL_1258;
              case 0x1FuLL:
                if (*(void *)v1041 != 0x2E34366863726161
                  || *((void *)v1041 + 1) != 0x6D66622E6E6F656ELL
                  || *((void *)v1041 + 2) != 0x336634762E616C6DLL
                  || *(void *)(v1041 + 23) != 0x38693631762E3233)
                {
                  goto LABEL_1320;
                }
                v396 = v2;
                unint64_t v397 = 0x1000001CDLL;
                goto LABEL_1258;
              case 0x20uLL:
                v396 = v2;
                if (*(void *)v1041 == 0x2E34366863726161
                  && *((void *)v1041 + 1) == 0x6D66622E6E6F656ELL
                  && *((void *)v1041 + 2) == 0x6634762E626C616CLL
                  && *((void *)v1041 + 3) == 0x38693631762E3233)
                {
                  unint64_t v397 = 0x1000001CBLL;
                }
                else
                {
                  if (*(void *)v1041 != 0x2E34366863726161
                    || *((void *)v1041 + 1) != 0x6D66622E6E6F656ELL
                    || *((void *)v1041 + 2) != 0x6634762E746C616CLL
                    || *((void *)v1041 + 3) != 0x38693631762E3233)
                  {
                    goto LABEL_1320;
                  }
                  unint64_t v397 = 0x1000001CCLL;
                }
LABEL_1258:
                unint64_t v2 = v396;
                if (!HIDWORD(v397) || !v397) {
                  goto LABEL_1320;
                }
                v303 = (uint64_t **)*((void *)this + 5);
                llvm::Intrinsic::getType(*v303, v397, 0, 0);
                v304 = off_1E6830B58[v397 & 0xFDF];
                if (v304) {
                  size_t v305 = strlen(off_1E6830B58[v397 & 0xFDF]);
                }
                else {
                  size_t v305 = 0;
                }
                v306 = *v303;
                int v307 = v397;
                break;
              default:
                goto LABEL_1320;
            }
LABEL_604:
            Type = (llvm::PointerType *)llvm::Intrinsic::getType(v306, v307, 0, 0);
            uint64_t v308 = (uint64_t)v303;
            unsigned int v107 = v304;
            uint64_t v309 = v305;
LABEL_630:
            llvm::Module::getOrInsertFunction(v308, (unsigned __int8 *)v107, (const char *)v309, Type, 0);
            *unint64_t v2 = v322;
            return 1;
          }
          char v108 = 1;
LABEL_278:
          BOOL v115 = *(void *)v1041 == 0x6E6F656E2E6D7261 && *(void *)(v1041 + 7) == 0x2E746F6466622E6ELL;
          if (v115
            || v1042 >= 0x13
            && (*(void *)v1041 == 0x2E34366863726161
              ? (BOOL v116 = *((void *)v1041 + 1) == 0x6466622E6E6F656ELL)
              : (BOOL v116 = 0),
                v116 ? (BOOL v117 = *(void *)(v1041 + 11) == 0x2E746F6466622E6ELL) : (BOOL v117 = 0),
                v117))
          {
            if (*(_WORD *)&v1041[v1042 - 2] == 14441)
            {
              switch(v1042)
              {
                case 0x19uLL:
                  int v398 = v1041[24];
                  BOOL v400 = *(void *)v1041 == 0x6E6F656E2E6D7261
                      && *((void *)v1041 + 1) == 0x762E746F6466622ELL
                      && *((void *)v1041 + 2) == 0x6938762E32336632;
                  int v401 = 56;
                  goto LABEL_1171;
                case 0x1AuLL:
                  int v398 = *((unsigned __int16 *)v1041 + 12);
                  BOOL v400 = *(void *)v1041 == 0x6E6F656E2E6D7261
                      && *((void *)v1041 + 1) == 0x762E746F6466622ELL
                      && *((void *)v1041 + 2) == 0x3631762E32336634;
                  int v401 = 14441;
LABEL_1171:
                  if (!v400 || v398 != v401) {
                    goto LABEL_1320;
                  }
                  int v609 = 3860;
                  goto LABEL_1190;
                case 0x1DuLL:
                  uint64_t v603 = *(void *)(v1041 + 21);
                  BOOL v605 = *(void *)v1041 == 0x2E34366863726161
                      && *((void *)v1041 + 1) == 0x6466622E6E6F656ELL
                      && *((void *)v1041 + 2) == 0x32336632762E746FLL;
                  uint64_t v606 = 0x38762E323366;
                  goto LABEL_1184;
                case 0x1EuLL:
                  uint64_t v603 = *(void *)(v1041 + 22);
                  BOOL v605 = *(void *)v1041 == 0x2E34366863726161
                      && *((void *)v1041 + 1) == 0x6466622E6E6F656ELL
                      && *((void *)v1041 + 2) == 0x32336634762E746FLL;
                  uint64_t v606 = 0x3631762E3233;
LABEL_1184:
                  uint64_t v611 = v606 & 0xFFFFFFFFFFFFLL | 0x3869000000000000;
                  if (!v605 || v603 != v611) {
                    goto LABEL_1320;
                  }
                  int v609 = 458;
LABEL_1190:
                  v613 = **(llvm::Type ***)(*((void *)this + 3) + 16);
                  unint64_t PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v613);
                  if (v614 == 1)
                  {
                    v613 = **(llvm::Type ***)(*((void *)this + 3) + 16);
                  }
                  uint64_t v616 = **((void **)this + 5);
                  v1043.__r_.__value_.__r.__words[0] = (std::string::size_type)v613;
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(void *)v616 + 1648), (llvm::Type *)(PrimitiveSizeInBits >> 4));
                  v1043.__r_.__value_.__l.__size_ = v617;
                  uint64_t v49 = (uint64_t **)*((void *)this + 5);
                  uint64_t v48 = &v1043;
                  int v47 = v609;
                  break;
                default:
                  goto LABEL_1320;
              }
              goto LABEL_1076;
            }
          }
          if (*(void *)v1041 != 0x6E6F656E2E6D7261 || *((_DWORD *)v1041 + 2) != 1835426350)
          {
            if ((v108 & 1) != 0
              || (*(void *)v1041 == 0x2E34366863726161
                ? (BOOL v119 = *((void *)v1041 + 1) == 0x6D66622E6E6F656ELL)
                : (BOOL v119 = 0),
                  !v119))
            {
LABEL_590:
              if ((uint64_t)v1042 <= 51)
              {
                switch(v1042)
                {
                  case '#':
                    if (!memcmp(v1041, "arm.cde.vcx1q.predicated.v2i64.v4i1", 0x23uLL)
                      || !memcmp(v1041, "arm.cde.vcx2q.predicated.v2i64.v4i1", 0x23uLL))
                    {
                      return 1;
                    }
                    v296 = "arm.cde.vcx3q.predicated.v2i64.v4i1";
                    v297 = v1041;
                    size_t v298 = 35;
                    goto LABEL_928;
                  case '$':
                    if (!memcmp(v1041, "arm.cde.vcx1qa.predicated.v2i64.v4i1", 0x24uLL)
                      || !memcmp(v1041, "arm.cde.vcx2qa.predicated.v2i64.v4i1", 0x24uLL))
                    {
                      return 1;
                    }
                    v296 = "arm.cde.vcx3qa.predicated.v2i64.v4i1";
                    v297 = v1041;
                    size_t v298 = 36;
                    goto LABEL_928;
                  case '%':
                  case '&':
                  case '\'':
                  case '(':
                  case ')':
                  case '*':
                    goto LABEL_1320;
                  case '+':
                    v296 = "arm.mve.vqdmull.predicated.v2i64.v4i32.v4i1";
                    v297 = v1041;
                    size_t v298 = 43;
                    goto LABEL_928;
                  case ',':
                    v296 = "arm.mve.mull.int.predicated.v2i64.v4i32.v4i1";
                    v297 = v1041;
                    size_t v298 = 44;
                    goto LABEL_928;
                  default:
                    if (v1042 != 14)
                    {
                      if (v1042 == 15
                        && *(void *)v1041 == 0x612E6E6367646D61
                        && *(void *)(v1041 + 7) == 0x7469626E67696C61)
                      {
                        uint64_t v207 = (uint64_t **)*((void *)this + 5);
                        v1043.__r_.__value_.__r.__words[0] = **(void **)(*((void *)this + 3) + 16);
                        uint64_t v18 = 1;
                        int v68 = 149;
                        goto LABEL_774;
                      }
                      goto LABEL_1320;
                    }
                    BOOL v481 = *(void *)v1041 == 0x2E65766D2E6D7261 && *(void *)(v1041 + 6) == 0x3436707463762E65;
                    if (!v481 || *(_DWORD *)(**(void **)(*((void *)this + 3) + 16) + 32) != 4) {
                      goto LABEL_1320;
                    }
                    if ((*((unsigned char *)this + 23) & 0x10) != 0)
                    {
                      uint64_t v482 = ***(void ***)this;
                      uint64_t v483 = *(void *)(v482 + 152);
                      uint64_t v484 = *(unsigned int *)(v482 + 168);
                      if (v484)
                      {
                        LODWORD(v485) = (v484 - 1) & (v8 ^ (this >> 9));
                        uint64_t v486 = v483 + 16 * v485;
                        v487 = *(llvm::Function **)v486;
                        if (*(llvm::Function **)v486 != this)
                        {
                          int v488 = 1;
                          do
                          {
                            if (v487 == (llvm::Function *)-4096) {
                              goto LABEL_1505;
                            }
                            int v489 = v485 + v488++;
                            uint64_t v485 = v489 & (v484 - 1);
                            v487 = *(llvm::Function **)(v483 + 16 * v485);
                          }
                          while (v487 != this);
                          uint64_t v486 = v483 + 16 * v485;
                        }
                      }
                      else
                      {
LABEL_1505:
                        uint64_t v486 = v483 + 16 * v484;
                      }
                      v869 = *(void **)(v486 + 8);
                      std::string::size_type v872 = *v869;
                      v870 = (char *)(v869 + 2);
                      std::string::size_type v871 = v872;
                      goto LABEL_1507;
                    }
                    std::string::size_type v871 = 0;
                    v870 = &byte_1CFBCE98E;
LABEL_1507:
                    __int16 v1045 = 773;
                    v1043.__r_.__value_.__r.__words[0] = (std::string::size_type)v870;
                    v1043.__r_.__value_.__l.__size_ = v871;
                    v1043.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
                    llvm::Value::setNameImpl(this, (const char **)&v1043.__r_.__value_.__l.__data_);
                    if (this && !*((unsigned char *)this + 16))
                    {
                      if ((*((unsigned char *)this + 23) & 0x10) == 0) {
                        goto LABEL_1738;
                      }
                      uint64_t v873 = ***(void ***)this;
                      uint64_t v874 = *(void *)(v873 + 152);
                      uint64_t v875 = *(unsigned int *)(v873 + 168);
                      if (v875)
                      {
                        LODWORD(v876) = (v875 - 1) & (v8 ^ (this >> 9));
                        uint64_t v877 = v874 + 16 * v876;
                        v878 = *(llvm::Function **)v877;
                        if (*(llvm::Function **)v877 != this)
                        {
                          int v879 = 1;
                          do
                          {
                            if (v878 == (llvm::Function *)-4096) {
                              goto LABEL_1730;
                            }
                            int v880 = v876 + v879++;
                            uint64_t v876 = v880 & (v875 - 1);
                            v878 = *(llvm::Function **)(v874 + 16 * v876);
                          }
                          while (v878 != this);
                          uint64_t v877 = v874 + 16 * v876;
                        }
                      }
                      else
                      {
LABEL_1730:
                        uint64_t v877 = v874 + 16 * v875;
                      }
                      v1031 = *(void **)(v877 + 8);
                      unint64_t v1034 = *v1031;
                      v1032 = v1031 + 2;
                      unint64_t v1033 = v1034;
                      if (v1034 >= 5
                        && (*(_DWORD *)v1032 == *(_DWORD *)"llvm." ? (BOOL v1035 = v1032[4] == aLlvm_1[4]) : (BOOL v1035 = 0),
                            v1035))
                      {
                        *((_DWORD *)this + 8) |= 0x2000u;
                        int v1036 = llvm::Function::lookupIntrinsicID(v1032, v1033);
                      }
                      else
                      {
LABEL_1738:
                        int v1036 = 0;
                        *((_DWORD *)this + 8) &= ~0x2000u;
                      }
                      *((_DWORD *)this + 9) = v1036;
                      return 1;
                    }
                    break;
                }
                return 1;
              }
              switch(v1042)
              {
                case '4':
                  v296 = "arm.mve.vldr.gather.base.predicated.v2i64.v2i64.v4i1";
                  v297 = v1041;
                  size_t v298 = 52;
                  break;
                case '5':
                  v296 = "arm.mve.vstr.scatter.base.predicated.v2i64.v2i64.v4i1";
                  v297 = v1041;
                  size_t v298 = 53;
                  break;
                case '7':
                  v296 = "arm.mve.vldr.gather.base.wb.predicated.v2i64.v2i64.v4i1";
                  v297 = v1041;
                  size_t v298 = 55;
                  break;
                case '8':
                  v296 = "arm.mve.vstr.scatter.base.wb.predicated.v2i64.v2i64.v4i1";
                  v297 = v1041;
                  size_t v298 = 56;
                  break;
                case '<':
                  v296 = "arm.mve.vldr.gather.offset.predicated.v2i64.p0i64.v2i64.v4i1";
                  v297 = v1041;
                  size_t v298 = 60;
                  break;
                case '=':
                  v296 = "arm.mve.vstr.scatter.offset.predicated.p0i64.v2i64.v2i64.v4i1";
                  v297 = v1041;
                  size_t v298 = 61;
                  break;
                default:
                  goto LABEL_1320;
              }
LABEL_928:
              if (!memcmp(v297, v296, v298)) {
                return 1;
              }
              goto LABEL_1320;
            }
          }
          goto LABEL_586;
        }
      }
LABEL_253:
      if (*(void *)v1041 == 0x6E6F656E2E6D7261 && *((void *)v1041 + 1) == 0x2E7364646171762ELL)
      {
        unint64_t v206 = (uint64_t **)*((void *)this + 5);
        if (*((_WORD *)this + 9)) {
          llvm::Function::BuildLazyArguments(this);
        }
        v1043.__r_.__value_.__r.__words[0] = **((void **)this + 11);
        uint64_t v18 = 1;
        uint64_t v207 = v206;
        int v68 = 262;
        goto LABEL_774;
      }
      if (*(void *)v1041 == 0x6E6F656E2E6D7261 && *((void *)v1041 + 1) == 0x2E7564646171762ELL)
      {
        v228 = (uint64_t **)*((void *)this + 5);
        if (*((_WORD *)this + 9)) {
          llvm::Function::BuildLazyArguments(this);
        }
        v1043.__r_.__value_.__r.__words[0] = **((void **)this + 11);
        uint64_t v18 = 1;
        uint64_t v207 = v228;
        int v68 = 300;
        goto LABEL_774;
      }
      if (*(void *)v1041 == 0x6E6F656E2E6D7261 && *((void *)v1041 + 1) == 0x2E7362757371762ELL)
      {
        v293 = (uint64_t **)*((void *)this + 5);
        if (*((_WORD *)this + 9)) {
          llvm::Function::BuildLazyArguments(this);
        }
        v1043.__r_.__value_.__r.__words[0] = **((void **)this + 11);
        uint64_t v18 = 1;
        uint64_t v207 = v293;
        int v68 = 283;
        goto LABEL_774;
      }
      if (*(void *)v1041 == 0x6E6F656E2E6D7261 && *((void *)v1041 + 1) == 0x2E7562757371762ELL)
      {
        v315 = (uint64_t **)*((void *)this + 5);
        if (*((_WORD *)this + 9)) {
          llvm::Function::BuildLazyArguments(this);
        }
        v1043.__r_.__value_.__r.__words[0] = **((void **)this + 11);
        uint64_t v18 = 1;
        uint64_t v207 = v315;
        int v68 = 311;
LABEL_774:
        *unint64_t v2 = llvm::Intrinsic::getDeclaration(v207, v68, (uint64_t)&v1043, 1);
        return v18;
      }
      if (v1042 < 0x11
        || (*(void *)v1041 == 0x2E34366863726161
          ? (BOOL v113 = *((void *)v1041 + 1) == 0x6464612E6E6F656ELL)
          : (BOOL v113 = 0),
            v113 ? (BOOL v114 = v1041[16] == 112) : (BOOL v114 = 0),
            !v114))
      {
        char v108 = 0;
        goto LABEL_278;
      }
      if (*((void *)this + 12) == 2)
      {
        char v108 = 0;
        uint64_t v452 = **(void **)(*((void *)this + 3) + 16);
        if (v452 && (*(_DWORD *)(v452 + 8) & 0xFE) == 0x12)
        {
          if (*(unsigned __int8 *)(*(void *)(v452 + 24) + 8) <= 6u)
          {
            v453 = (uint64_t **)*((void *)this + 5);
            v1043.__r_.__value_.__r.__words[0] = **(void **)(*((void *)this + 3) + 16);
            uint64_t v18 = 1;
            *unint64_t v2 = llvm::Intrinsic::getDeclaration(v453, 466, (uint64_t)&v1043, 1);
            return v18;
          }
          char v108 = 0;
        }
        goto LABEL_278;
      }
LABEL_1320:
      if (*(unsigned char *)(**(void **)(*((void *)this + 3) + 16) + 8) == 16) {
        uint64_t v737 = **(void **)(*((void *)this + 3) + 16);
      }
      else {
        uint64_t v737 = 0;
      }
      int v738 = *((_DWORD *)this + 9);
      if (v738 && v737 && (*(_DWORD *)(v737 + 8) & 0x600) != 0x400)
      {
        v1043.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1043.__r_.__value_.__r.__words[2];
        v1043.__r_.__value_.__l.__size_ = 0x400000000;
        llvm::Intrinsic::getIntrinsicInfoTableEntries(v738, (uint64_t)&v1043);
        if (*(_DWORD *)v1043.__r_.__value_.__l.__data_ == 13)
        {
          v739 = (llvm::Value **)v2;
          uint64_t v740 = *((void *)this + 3);
          v741 = (uint64_t **)llvm::StructType::get(*(uint64_t **)v737, *(void *)(v737 + 16), *(unsigned int *)(v737 + 12), 0);
          v742 = (llvm::PointerType *)llvm::FunctionType::get(v741, *(void *)(v740 + 16) + 8, (8 * *(unsigned int *)(v740 + 12) - 8) >> 3, *(_DWORD *)(v740 + 8) > 0xFFu);
          if ((*((unsigned char *)this + 23) & 0x10) == 0)
          {
            size_t v754 = 0;
            HIBYTE(v1040) = 0;
            v757 = __dst;
            v746 = v739;
            goto LABEL_1348;
          }
          uint64_t v743 = ***(void ***)this;
          uint64_t v744 = *(void *)(v743 + 152);
          uint64_t v745 = *(unsigned int *)(v743 + 168);
          v746 = v739;
          if (v745)
          {
            LODWORD(v747) = (v745 - 1) & (v8 ^ (this >> 9));
            uint64_t v748 = v744 + 16 * v747;
            v749 = *(llvm::Function **)v748;
            if (*(llvm::Function **)v748 == this) {
              goto LABEL_1340;
            }
            int v750 = 1;
            while (v749 != (llvm::Function *)-4096)
            {
              int v751 = v747 + v750++;
              uint64_t v747 = v751 & (v745 - 1);
              v749 = *(llvm::Function **)(v744 + 16 * v747);
              if (v749 == this)
              {
                uint64_t v748 = v744 + 16 * v747;
                goto LABEL_1340;
              }
            }
          }
          uint64_t v748 = v744 + 16 * v745;
LABEL_1340:
          v753 = *(unint64_t **)(v748 + 8);
          unint64_t v756 = *v753;
          v755 = v753 + 2;
          size_t v754 = v756;
          if (v756 >= 0x7FFFFFFFFFFFFFF8) {
            abort();
          }
          if (v754 >= 0x17)
          {
            uint64_t v758 = (v754 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v754 | 7) != 0x17) {
              uint64_t v758 = v754 | 7;
            }
            uint64_t v759 = v758 + 1;
            v757 = (void **)operator new(v758 + 1);
            __dst[1] = (void *)v754;
            unint64_t v1040 = v759 | 0x8000000000000000;
            __dst[0] = v757;
          }
          else
          {
            HIBYTE(v1040) = v754;
            v757 = __dst;
            if (!v754)
            {
LABEL_1348:
              *((unsigned char *)v757 + v754) = 0;
              if ((*((unsigned char *)this + 23) & 0x10) == 0)
              {
                uint64_t v770 = 0;
                v769 = &byte_1CFBCE98E;
                goto LABEL_1357;
              }
              uint64_t v760 = ***(void ***)this;
              uint64_t v761 = *(void *)(v760 + 152);
              uint64_t v762 = *(unsigned int *)(v760 + 168);
              if (v762)
              {
                LODWORD(v763) = (v762 - 1) & (v8 ^ (this >> 9));
                uint64_t v764 = v761 + 16 * v763;
                v765 = *(llvm::Function **)v764;
                if (*(llvm::Function **)v764 == this)
                {
LABEL_1356:
                  v768 = *(void **)(v764 + 8);
                  uint64_t v771 = *v768;
                  v769 = (char *)(v768 + 2);
                  uint64_t v770 = v771;
LABEL_1357:
                  __int16 v1048 = 773;
                  *(void *)&long long v1046 = v769;
                  *((void *)&v1046 + 1) = v770;
                  v1047 = ".old";
                  llvm::Value::setNameImpl(this, (const char **)&v1046);
                  if (!this || *((unsigned char *)this + 16))
                  {
LABEL_1359:
                    char v772 = *((_DWORD *)this + 8) & 0xF;
                    v773 = (llvm::Type *)(*(_DWORD *)(*(void *)this + 8) >> 8);
                    __int16 v1048 = 260;
                    *(void *)&long long v1046 = __dst;
                    unint64_t v774 = *((void *)this + 5);
                    v775 = (char *)operator new(0x80uLL);
                    v776 = (llvm::Value *)(v775 + 8);
                    *((_DWORD *)v775 + 7) = *((_DWORD *)v775 + 7) & 0x38000000 | 0x40000000;
                    *(void *)v775 = 0;
                    llvm::Function::Function((unint64_t *)v775 + 1, v742, v772, v773, (const char **)&v1046, v774);
                    *v746 = v776;
                    v778 = llvm::Intrinsic::remangleIntrinsicFunction(this, v777);
                    if (v779) {
                      *v746 = v778;
                    }
                    if (SHIBYTE(v1040) < 0) {
                      operator delete(__dst[0]);
                    }
                    v447 = (void *)v1043.__r_.__value_.__r.__words[0];
                    if ((std::string::size_type *)v1043.__r_.__value_.__l.__data_ != &v1043.__r_.__value_.__r.__words[2]) {
LABEL_1364:
                    }
                      free(v447);
                    return 1;
                  }
                  if ((*((unsigned char *)this + 23) & 0x10) == 0) {
                    goto LABEL_1382;
                  }
                  uint64_t v780 = ***(void ***)this;
                  uint64_t v781 = *(void *)(v780 + 152);
                  uint64_t v782 = *(unsigned int *)(v780 + 168);
                  if (v782)
                  {
                    LODWORD(v783) = (v782 - 1) & (v8 ^ (this >> 9));
                    uint64_t v784 = v781 + 16 * v783;
                    v785 = *(llvm::Function **)v784;
                    if (*(llvm::Function **)v784 == this)
                    {
LABEL_1375:
                      v788 = *(void **)(v784 + 8);
                      unint64_t v791 = *v788;
                      v789 = v788 + 2;
                      unint64_t v790 = v791;
                      v746 = v739;
                      if (v791 >= 5 && *(_DWORD *)v789 == *(_DWORD *)"llvm." && v789[4] == aLlvm_1[4])
                      {
                        *((_DWORD *)this + 8) |= 0x2000u;
                        int v793 = llvm::Function::lookupIntrinsicID(v789, v790);
LABEL_1383:
                        *((_DWORD *)this + 9) = v793;
                        goto LABEL_1359;
                      }
LABEL_1382:
                      int v793 = 0;
                      *((_DWORD *)this + 8) &= ~0x2000u;
                      goto LABEL_1383;
                    }
                    int v786 = 1;
                    while (v785 != (llvm::Function *)-4096)
                    {
                      int v787 = v783 + v786++;
                      uint64_t v783 = v787 & (v782 - 1);
                      v785 = *(llvm::Function **)(v781 + 16 * v783);
                      if (v785 == this)
                      {
                        uint64_t v784 = v781 + 16 * v783;
                        goto LABEL_1375;
                      }
                    }
                  }
                  uint64_t v784 = v781 + 16 * v782;
                  goto LABEL_1375;
                }
                int v766 = 1;
                while (v765 != (llvm::Function *)-4096)
                {
                  int v767 = v763 + v766++;
                  uint64_t v763 = v767 & (v762 - 1);
                  v765 = *(llvm::Function **)(v761 + 16 * v763);
                  if (v765 == this)
                  {
                    uint64_t v764 = v761 + 16 * v763;
                    goto LABEL_1356;
                  }
                }
              }
              uint64_t v764 = v761 + 16 * v762;
              goto LABEL_1356;
            }
          }
          memmove(v757, v755, v754);
          goto LABEL_1348;
        }
        if ((std::string::size_type *)v1043.__r_.__value_.__l.__data_ != &v1043.__r_.__value_.__r.__words[2]) {
          free(v1043.__r_.__value_.__l.__data_);
        }
      }
      Declaratioint n = (uint64_t)llvm::Intrinsic::remangleIntrinsicFunction(this, a2);
      if (v752) {
        goto LABEL_1337;
      }
      return 0;
    case 'c':
      if (v22 < 5) {
        goto LABEL_1320;
      }
      BOOL v56 = *(_DWORD *)v21 == 2053928035 && *(unsigned char *)(v14 + 25) == 46;
      if (v56 && *((void *)this + 12) == 1)
      {
        if (v7)
        {
          LODWORD(v57) = (v7 - 1) & (v8 ^ (this >> 9));
          uint64_t v58 = v6 + 16 * v57;
          uint64_t v59 = *(llvm::Function **)v58;
          if (*(llvm::Function **)v58 != this)
          {
            int v60 = 1;
            do
            {
              if (v59 == (llvm::Function *)-4096) {
                goto LABEL_631;
              }
              int v61 = v57 + v60++;
              uint64_t v57 = v61 & (v7 - 1);
              uint64_t v59 = *(llvm::Function **)(v6 + 16 * v57);
            }
            while (v59 != this);
            uint64_t v58 = v6 + 16 * v57;
          }
        }
        else
        {
LABEL_631:
          uint64_t v58 = v6 + 16 * v7;
        }
        v323 = *(std::string::size_type **)(v58 + 8);
        std::string::size_type v324 = *v323;
        __int16 v1045 = 773;
        v1043.__r_.__value_.__r.__words[0] = (std::string::size_type)(v323 + 2);
        v1043.__r_.__value_.__l.__size_ = v324;
        v1043.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
        llvm::Value::setNameImpl(this, (const char **)&v1043.__r_.__value_.__l.__data_);
        if (this && !*((unsigned char *)this + 16))
        {
          if ((*((unsigned char *)this + 23) & 0x10) == 0) {
            goto LABEL_1561;
          }
          uint64_t v694 = ***(void ***)this;
          uint64_t v695 = *(void *)(v694 + 152);
          uint64_t v696 = *(unsigned int *)(v694 + 168);
          if (v696)
          {
            LODWORD(v697) = (v696 - 1) & (v8 ^ (this >> 9));
            uint64_t v698 = v695 + 16 * v697;
            v699 = *(llvm::Function **)v698;
            if (*(llvm::Function **)v698 != this)
            {
              int v700 = 1;
              do
              {
                if (v699 == (llvm::Function *)-4096) {
                  goto LABEL_1553;
                }
                int v701 = v697 + v700++;
                uint64_t v697 = v701 & (v696 - 1);
                v699 = *(llvm::Function **)(v695 + 16 * v697);
              }
              while (v699 != this);
              uint64_t v698 = v695 + 16 * v697;
            }
          }
          else
          {
LABEL_1553:
            uint64_t v698 = v695 + 16 * v696;
          }
          v907 = *(void **)(v698 + 8);
          unint64_t v910 = *v907;
          v908 = v907 + 2;
          unint64_t v909 = v910;
          if (v910 >= 5 && (*(_DWORD *)v908 == *(_DWORD *)"llvm." ? (BOOL v911 = v908[4] == aLlvm_1[4]) : (BOOL v911 = 0), v911))
          {
            *((_DWORD *)this + 8) |= 0x2000u;
            int v912 = llvm::Function::lookupIntrinsicID(v908, v909);
          }
          else
          {
LABEL_1561:
            int v912 = 0;
            *((_DWORD *)this + 8) &= ~0x2000u;
          }
          *((_DWORD *)this + 9) = v912;
        }
        v325 = (uint64_t **)*((void *)this + 5);
        if (*((_WORD *)this + 9)) {
          llvm::Function::BuildLazyArguments(this);
        }
        v1043.__r_.__value_.__r.__words[0] = **((void **)this + 11);
        uint64_t v18 = 1;
        uint64_t v207 = v325;
        int v68 = 52;
        goto LABEL_774;
      }
      BOOL v72 = *(_DWORD *)v21 == 2054452323 && *(unsigned char *)(v14 + 25) == 46;
      if (!v72 || *((void *)this + 12) != 1) {
        goto LABEL_1320;
      }
      if (!v7) {
        goto LABEL_693;
      }
      LODWORD(v73) = (v7 - 1) & (v8 ^ (this >> 9));
      uint64_t v74 = v6 + 16 * v73;
      BOOL v75 = *(llvm::Function **)v74;
      if (*(llvm::Function **)v74 == this) {
        goto LABEL_694;
      }
      int v76 = 1;
      while (v75 != (llvm::Function *)-4096)
      {
        int v77 = v73 + v76++;
        uint64_t v73 = v77 & (v7 - 1);
        BOOL v75 = *(llvm::Function **)(v6 + 16 * v73);
        if (v75 == this)
        {
          uint64_t v74 = v6 + 16 * v73;
          goto LABEL_694;
        }
      }
LABEL_693:
      uint64_t v74 = v6 + 16 * v7;
LABEL_694:
      v364 = *(std::string::size_type **)(v74 + 8);
      std::string::size_type v365 = *v364;
      __int16 v1045 = 773;
      v1043.__r_.__value_.__r.__words[0] = (std::string::size_type)(v364 + 2);
      v1043.__r_.__value_.__l.__size_ = v365;
      v1043.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
      llvm::Value::setNameImpl(this, (const char **)&v1043.__r_.__value_.__l.__data_);
      if (!this || *((unsigned char *)this + 16)) {
        goto LABEL_696;
      }
      if ((*((unsigned char *)this + 23) & 0x10) == 0) {
        goto LABEL_1608;
      }
      uint64_t v729 = ***(void ***)this;
      uint64_t v730 = *(void *)(v729 + 152);
      uint64_t v731 = *(unsigned int *)(v729 + 168);
      if (!v731) {
        goto LABEL_1600;
      }
      LODWORD(v732) = (v731 - 1) & (v8 ^ (this >> 9));
      uint64_t v733 = v730 + 16 * v732;
      v734 = *(llvm::Function **)v733;
      if (*(llvm::Function **)v733 != this)
      {
        int v735 = 1;
        while (v734 != (llvm::Function *)-4096)
        {
          int v736 = v732 + v735++;
          uint64_t v732 = v736 & (v731 - 1);
          v734 = *(llvm::Function **)(v730 + 16 * v732);
          if (v734 == this)
          {
            uint64_t v733 = v730 + 16 * v732;
            goto LABEL_1601;
          }
        }
LABEL_1600:
        uint64_t v733 = v730 + 16 * v731;
      }
LABEL_1601:
      v939 = *(void **)(v733 + 8);
      unint64_t v942 = *v939;
      v940 = v939 + 2;
      unint64_t v941 = v942;
      if (v942 >= 5 && (*(_DWORD *)v940 == *(_DWORD *)"llvm." ? (BOOL v943 = v940[4] == aLlvm_1[4]) : (BOOL v943 = 0), v943))
      {
        *((_DWORD *)this + 8) |= 0x2000u;
        int v944 = llvm::Function::lookupIntrinsicID(v940, v941);
      }
      else
      {
LABEL_1608:
        int v944 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
      }
      *((_DWORD *)this + 9) = v944;
LABEL_696:
      v366 = (uint64_t **)*((void *)this + 5);
      if (*((_WORD *)this + 9)) {
        llvm::Function::BuildLazyArguments(this);
      }
      v1043.__r_.__value_.__r.__words[0] = **((void **)this + 11);
      uint64_t v18 = 1;
      uint64_t v207 = v366;
      int v68 = 54;
      goto LABEL_774;
    case 'd':
      if (v15 != 14) {
        goto LABEL_1320;
      }
      BOOL v50 = *(void *)v21 == 0x756C61762E676264 && *(unsigned char *)(v14 + 29) == 101;
      if (!v50 || *((void *)this + 12) != 4) {
        goto LABEL_1320;
      }
      if (!v7) {
        goto LABEL_626;
      }
      LODWORD(v51) = (v7 - 1) & (v8 ^ (this >> 9));
      uint64_t v52 = v6 + 16 * v51;
      uint64_t v53 = *(llvm::Function **)v52;
      if (*(llvm::Function **)v52 == this) {
        goto LABEL_627;
      }
      int v54 = 1;
      while (v53 != (llvm::Function *)-4096)
      {
        int v55 = v51 + v54++;
        uint64_t v51 = v55 & (v7 - 1);
        uint64_t v53 = *(llvm::Function **)(v6 + 16 * v51);
        if (v53 == this)
        {
          uint64_t v52 = v6 + 16 * v51;
          goto LABEL_627;
        }
      }
LABEL_626:
      uint64_t v52 = v6 + 16 * v7;
LABEL_627:
      v319 = *(std::string::size_type **)(v52 + 8);
      std::string::size_type v320 = *v319;
      __int16 v1045 = 773;
      v1043.__r_.__value_.__r.__words[0] = (std::string::size_type)(v319 + 2);
      v1043.__r_.__value_.__l.__size_ = v320;
      v1043.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
      llvm::Value::setNameImpl(this, (const char **)&v1043.__r_.__value_.__l.__data_);
      if (!this || *((unsigned char *)this + 16)) {
        goto LABEL_629;
      }
      if ((*((unsigned char *)this + 23) & 0x10) == 0) {
        goto LABEL_1551;
      }
      uint64_t v686 = ***(void ***)this;
      uint64_t v687 = *(void *)(v686 + 152);
      uint64_t v688 = *(unsigned int *)(v686 + 168);
      if (!v688) {
        goto LABEL_1543;
      }
      LODWORD(v689) = (v688 - 1) & (v8 ^ (this >> 9));
      uint64_t v690 = v687 + 16 * v689;
      v691 = *(llvm::Function **)v690;
      if (*(llvm::Function **)v690 != this)
      {
        int v692 = 1;
        while (v691 != (llvm::Function *)-4096)
        {
          int v693 = v689 + v692++;
          uint64_t v689 = v693 & (v688 - 1);
          v691 = *(llvm::Function **)(v687 + 16 * v689);
          if (v691 == this)
          {
            uint64_t v690 = v687 + 16 * v689;
            goto LABEL_1544;
          }
        }
LABEL_1543:
        uint64_t v690 = v687 + 16 * v688;
      }
LABEL_1544:
      v901 = *(void **)(v690 + 8);
      unint64_t v904 = *v901;
      v902 = v901 + 2;
      unint64_t v903 = v904;
      if (v904 >= 5 && (*(_DWORD *)v902 == *(_DWORD *)"llvm." ? (BOOL v905 = v902[4] == aLlvm_1[4]) : (BOOL v905 = 0), v905))
      {
        *((_DWORD *)this + 8) |= 0x2000u;
        int v906 = llvm::Function::lookupIntrinsicID(v902, v903);
      }
      else
      {
LABEL_1551:
        int v906 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
      }
      *((_DWORD *)this + 9) = v906;
LABEL_629:
      v321 = (uint64_t **)*((void *)this + 5);
      llvm::Intrinsic::getType(*v321, 58, 0, 0);
      Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v321, 58, 0, 0);
      unsigned int v107 = "llvm.dbg.value";
      uint64_t v308 = (uint64_t)v321;
      uint64_t v309 = 14;
      goto LABEL_630;
    case 'e':
      v1043.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1043.__r_.__value_.__r.__words[2];
      v1043.__r_.__value_.__l.__size_ = 0x200000000;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCD8300, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_1EBCD8300))
      {
        llvm::Regex::Regex();
      }
      if (!llvm::Regex::match((uint64_t)&unk_1EBCD8320, v1041, v1042, (uint64_t)&v1043, 0)) {
        goto LABEL_834;
      }
      v34 = *(unsigned __int16 **)(v1043.__r_.__value_.__r.__words[0] + 16);
      uint64_t v35 = *(void *)(v1043.__r_.__value_.__r.__words[0] + 24);
      switch(v35)
      {
        case 2:
          if (*v34 != 29295) {
            goto LABEL_834;
          }
          uint64_t v42 = 0x100000144;
          break;
        case 4:
          switch(*(_DWORD *)v34)
          {
            case 0x78616D73:
              uint64_t v42 = 0x100000145;
              break;
            case 0x6E696D73:
              uint64_t v42 = 0x100000146;
              break;
            case 0x78616D75:
              uint64_t v42 = 0x100000147;
              break;
            case 0x6E696D75:
              uint64_t v42 = 0x100000148;
              break;
            case 0x78616D66:
              uint64_t v42 = 0x100000140;
              break;
            case 0x6E696D66:
              uint64_t v42 = 0x100000141;
              break;
            default:
              uint64_t v42 = 0;
              break;
          }
          break;
        case 3:
          if (*v34 == 25697 && *((unsigned char *)v34 + 2) == 100)
          {
            uint64_t v42 = 0x10000013DLL;
          }
          else if (*v34 == 30061 && *((unsigned char *)v34 + 2) == 108)
          {
            uint64_t v42 = 0x100000143;
          }
          else if (*v34 == 28257 && *((unsigned char *)v34 + 2) == 100)
          {
            uint64_t v42 = 0x10000013ELL;
          }
          else
          {
            int v39 = *v34;
            int v40 = *((unsigned __int8 *)v34 + 2);
            if (v39 == 28536 && v40 == 114) {
              uint64_t v42 = 0x100000149;
            }
            else {
              uint64_t v42 = 0;
            }
          }
          break;
        default:
          goto LABEL_834;
      }
      if ((v42 & 0x300000000) != 0 && v42)
      {
        if ((*((unsigned char *)this + 23) & 0x10) == 0)
        {
          uint64_t v439 = 0;
          v438 = &byte_1CFBCE98E;
          goto LABEL_852;
        }
        uint64_t v419 = ***(void ***)this;
        uint64_t v420 = *(void *)(v419 + 152);
        uint64_t v421 = *(unsigned int *)(v419 + 168);
        if (v421)
        {
          LODWORD(v422) = (v421 - 1) & (v8 ^ (this >> 9));
          uint64_t v423 = v420 + 16 * v422;
          v424 = *(llvm::Function **)v423;
          if (*(llvm::Function **)v423 == this)
          {
LABEL_851:
            v437 = *(void **)(v423 + 8);
            uint64_t v440 = *v437;
            v438 = (char *)(v437 + 2);
            uint64_t v439 = v440;
LABEL_852:
            __int16 v1048 = 773;
            *(void *)&long long v1046 = v438;
            *((void *)&v1046 + 1) = v439;
            v1047 = ".old";
            llvm::Value::setNameImpl(this, (const char **)&v1046);
            if (!this || *((unsigned char *)this + 16)) {
              goto LABEL_854;
            }
            if ((*((unsigned char *)this + 23) & 0x10) == 0) {
              goto LABEL_1462;
            }
            uint64_t v630 = ***(void ***)this;
            uint64_t v631 = *(void *)(v630 + 152);
            uint64_t v632 = *(unsigned int *)(v630 + 168);
            if (v632)
            {
              LODWORD(v633) = (v632 - 1) & (v8 ^ (this >> 9));
              uint64_t v634 = v631 + 16 * v633;
              v635 = *(llvm::Function **)v634;
              if (*(llvm::Function **)v634 == this)
              {
LABEL_1455:
                v839 = *(void **)(v634 + 8);
                unint64_t v842 = *v839;
                v840 = v839 + 2;
                unint64_t v841 = v842;
                if (v842 >= 5 && *(_DWORD *)v840 == *(_DWORD *)"llvm." && v840[4] == aLlvm_1[4])
                {
                  *((_DWORD *)this + 8) |= 0x2000u;
                  int v844 = llvm::Function::lookupIntrinsicID(v840, v841);
LABEL_1463:
                  *((_DWORD *)this + 9) = v844;
LABEL_854:
                  v441 = (uint64_t **)*((void *)this + 5);
                  *(void *)&long long v1046 = *(void *)(*(void *)(*((void *)this + 3) + 16) + 8);
                  int v442 = v42;
                  goto LABEL_860;
                }
LABEL_1462:
                int v844 = 0;
                *((_DWORD *)this + 8) &= ~0x2000u;
                goto LABEL_1463;
              }
              int v636 = 1;
              while (v635 != (llvm::Function *)-4096)
              {
                int v637 = v633 + v636++;
                uint64_t v633 = v637 & (v632 - 1);
                v635 = *(llvm::Function **)(v631 + 16 * v633);
                if (v635 == this)
                {
                  uint64_t v634 = v631 + 16 * v633;
                  goto LABEL_1455;
                }
              }
            }
            uint64_t v634 = v631 + 16 * v632;
            goto LABEL_1455;
          }
          int v425 = 1;
          while (v424 != (llvm::Function *)-4096)
          {
            int v426 = v422 + v425++;
            uint64_t v422 = v426 & (v421 - 1);
            v424 = *(llvm::Function **)(v420 + 16 * v422);
            if (v424 == this)
            {
              uint64_t v423 = v420 + 16 * v422;
              goto LABEL_851;
            }
          }
        }
        uint64_t v423 = v420 + 16 * v421;
        goto LABEL_851;
      }
LABEL_834:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCD8308, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_1EBCD8308))
      {
        llvm::Regex::Regex();
      }
      LODWORD(v1043.__r_.__value_.__r.__words[1]) = 0;
      if (!llvm::Regex::match((uint64_t)&unk_1EBCD8330, v1041, v1042, (uint64_t)&v1043, 0)
        || *(void *)(v1043.__r_.__value_.__r.__words[0] + 24) != 4)
      {
        goto LABEL_839;
      }
      v427 = *(_DWORD **)(v1043.__r_.__value_.__r.__words[0] + 16);
      if (*v427 == 1819635046)
      {
        int v428 = 322;
      }
      else
      {
        if (*v427 != 1684300134)
        {
LABEL_839:
          if ((std::string::size_type *)v1043.__r_.__value_.__l.__data_ != &v1043.__r_.__value_.__r.__words[2]) {
            free(v1043.__r_.__value_.__l.__data_);
          }
          goto LABEL_1320;
        }
        int v428 = 319;
      }
      if ((*((unsigned char *)this + 23) & 0x10) == 0)
      {
        uint64_t v445 = 0;
        v444 = &byte_1CFBCE98E;
        goto LABEL_857;
      }
      uint64_t v429 = ***(void ***)this;
      uint64_t v430 = *(void *)(v429 + 152);
      uint64_t v431 = *(unsigned int *)(v429 + 168);
      if (v431)
      {
        LODWORD(v432) = (v431 - 1) & (v8 ^ (this >> 9));
        uint64_t v433 = v430 + 16 * v432;
        v434 = *(llvm::Function **)v433;
        if (*(llvm::Function **)v433 == this)
        {
LABEL_856:
          v443 = *(void **)(v433 + 8);
          uint64_t v446 = *v443;
          v444 = (char *)(v443 + 2);
          uint64_t v445 = v446;
LABEL_857:
          __int16 v1048 = 773;
          *(void *)&long long v1046 = v444;
          *((void *)&v1046 + 1) = v445;
          v1047 = ".old";
          llvm::Value::setNameImpl(this, (const char **)&v1046);
          if (!this || *((unsigned char *)this + 16)) {
            goto LABEL_859;
          }
          if ((*((unsigned char *)this + 23) & 0x10) == 0) {
            goto LABEL_1493;
          }
          uint64_t v654 = ***(void ***)this;
          uint64_t v655 = *(void *)(v654 + 152);
          uint64_t v656 = *(unsigned int *)(v654 + 168);
          if (v656)
          {
            LODWORD(v657) = (v656 - 1) & (v8 ^ (this >> 9));
            uint64_t v658 = v655 + 16 * v657;
            v659 = *(llvm::Function **)v658;
            if (*(llvm::Function **)v658 == this)
            {
LABEL_1486:
              v857 = *(void **)(v658 + 8);
              unint64_t v860 = *v857;
              v858 = v857 + 2;
              unint64_t v859 = v860;
              if (v860 >= 5 && *(_DWORD *)v858 == *(_DWORD *)"llvm." && v858[4] == aLlvm_1[4])
              {
                *((_DWORD *)this + 8) |= 0x2000u;
                int v862 = llvm::Function::lookupIntrinsicID(v858, v859);
LABEL_1494:
                *((_DWORD *)this + 9) = v862;
LABEL_859:
                *(void *)&long long v1046 = *(void *)(*(void *)(*((void *)this + 3) + 16) + 16);
                v441 = (uint64_t **)*((void *)this + 5);
                int v442 = v428;
LABEL_860:
                *unint64_t v2 = llvm::Intrinsic::getDeclaration(v441, v442, (uint64_t)&v1046, 1);
                v447 = (void *)v1043.__r_.__value_.__r.__words[0];
                if ((std::string::size_type *)v1043.__r_.__value_.__l.__data_ != &v1043.__r_.__value_.__r.__words[2]) {
                  goto LABEL_1364;
                }
                return 1;
              }
LABEL_1493:
              int v862 = 0;
              *((_DWORD *)this + 8) &= ~0x2000u;
              goto LABEL_1494;
            }
            int v660 = 1;
            while (v659 != (llvm::Function *)-4096)
            {
              int v661 = v657 + v660++;
              uint64_t v657 = v661 & (v656 - 1);
              v659 = *(llvm::Function **)(v655 + 16 * v657);
              if (v659 == this)
              {
                uint64_t v658 = v655 + 16 * v657;
                goto LABEL_1486;
              }
            }
          }
          uint64_t v658 = v655 + 16 * v656;
          goto LABEL_1486;
        }
        int v435 = 1;
        while (v434 != (llvm::Function *)-4096)
        {
          int v436 = v432 + v435++;
          uint64_t v432 = v436 & (v431 - 1);
          v434 = *(llvm::Function **)(v430 + 16 * v432);
          if (v434 == this)
          {
            uint64_t v433 = v430 + 16 * v432;
            goto LABEL_856;
          }
        }
      }
      uint64_t v433 = v430 + 16 * v431;
      goto LABEL_856;
    case 'i':
    case 'l':
      if (v22 < 0xE)
      {
        if (v22 < 0xC) {
          goto LABEL_1320;
        }
        goto LABEL_346;
      }
      if (*(void *)v21 == 0x656D69746566696CLL && *(void *)(v14 + 27) == 0x74726174732E656DLL)
      {
        int v78 = 168;
      }
      else
      {
        if (v22 < 0xF)
        {
          if (*(void *)v21 != 0x656D69746566696CLL || *(_DWORD *)(v14 + 29) != 1684956462)
          {
LABEL_351:
            if (*(void *)v21 != 0x6E61697261766E69 || *(void *)(v21 + 5) != 0x646E652E746E6169) {
              goto LABEL_395;
            }
            int v160 = 163;
            uint64_t v161 = 2;
LABEL_367:
            uint64_t v170 = *(void *)(*((void *)this + 3) + 16);
            *(void *)&long long v1046 = 0;
            *(void *)&long long v1046 = *(void *)(v170 + 8 * v161 + 8);
            if ((*((unsigned char *)this + 23) & 0x10) == 0)
            {
              size_t v180 = 0;
              v181 = &byte_1CFBCE98E;
              goto LABEL_376;
            }
            uint64_t v171 = ***(void ***)this;
            uint64_t v172 = *(void *)(v171 + 152);
            uint64_t v173 = *(unsigned int *)(v171 + 168);
            if (v173)
            {
              LODWORD(v174) = (v173 - 1) & (v8 ^ (this >> 9));
              uint64_t v175 = v172 + 16 * v174;
              uint64_t v176 = *(llvm::Function **)v175;
              if (*(llvm::Function **)v175 == this)
              {
LABEL_375:
                unint64_t v179 = *(void **)(v175 + 8);
                size_t v182 = *v179;
                v181 = (char *)(v179 + 2);
                size_t v180 = v182;
LABEL_376:
                BOOL v183 = 1;
                int v1037 = v160;
                sub_1CC5B8334(v160, (uint64_t)&v1046, 1, *((uint64_t ***)this + 5), 0, &v1043);
                int v184 = SHIBYTE(v1043.__r_.__value_.__r.__words[2]);
                unint64_t v185 = (void *)v1043.__r_.__value_.__r.__words[0];
                if ((v1043.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  a2 = (llvm::Function *)&v1043;
                }
                else {
                  a2 = (llvm::Function *)v1043.__r_.__value_.__r.__words[0];
                }
                std::string::size_type size = *((unsigned char *)&v1043.__r_.__value_.__s + 23) & 0x7F;
                if ((v1043.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type size = v1043.__r_.__value_.__l.__size_;
                }
                if (v180 == size)
                {
                  if (v180) {
                    BOOL v183 = memcmp(v181, a2, v180) != 0;
                  }
                  else {
                    BOOL v183 = 0;
                  }
                }
                if (v184 < 0) {
                  operator delete(v185);
                }
                if (!v183)
                {
LABEL_395:
                  if (v22 < 0x17) {
                    goto LABEL_1320;
                  }
                  BOOL v195 = *(void *)v21 == 0x6E61697261766E69 && *(void *)(v21 + 8) == 0x2E70756F72672E74;
                  if (!v195 || *(void *)(v21 + 15) != 0x726569727261622ELL) {
                    goto LABEL_1320;
                  }
                  *(void *)&long long v1046 = *(void *)(*(void *)(*((void *)this + 3) + 16) + 8);
                  if ((*((unsigned char *)this + 23) & 0x10) == 0)
                  {
                    std::string::size_type v312 = 0;
                    v311 = &byte_1CFBCE98E;
                    goto LABEL_607;
                  }
                  uint64_t v197 = ***(void ***)this;
                  uint64_t v198 = *(void *)(v197 + 152);
                  uint64_t v199 = *(unsigned int *)(v197 + 168);
                  if (v199)
                  {
                    LODWORD(v200) = (v199 - 1) & (v8 ^ (this >> 9));
                    uint64_t v201 = v198 + 16 * v200;
                    v202 = *(llvm::Function **)v201;
                    if (*(llvm::Function **)v201 == this)
                    {
LABEL_606:
                      v310 = *(void **)(v201 + 8);
                      std::string::size_type v313 = *v310;
                      v311 = (char *)(v310 + 2);
                      std::string::size_type v312 = v313;
LABEL_607:
                      __int16 v1045 = 773;
                      v1043.__r_.__value_.__r.__words[0] = (std::string::size_type)v311;
                      v1043.__r_.__value_.__l.__size_ = v312;
                      v1043.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
                      llvm::Value::setNameImpl(this, (const char **)&v1043.__r_.__value_.__l.__data_);
                      if (!this || *((unsigned char *)this + 16)) {
                        goto LABEL_609;
                      }
                      if ((*((unsigned char *)this + 23) & 0x10) == 0) {
                        goto LABEL_1503;
                      }
                      uint64_t v662 = ***(void ***)this;
                      uint64_t v663 = *(void *)(v662 + 152);
                      uint64_t v664 = *(unsigned int *)(v662 + 168);
                      if (v664)
                      {
                        LODWORD(v665) = (v664 - 1) & (v8 ^ (this >> 9));
                        uint64_t v666 = v663 + 16 * v665;
                        v667 = *(llvm::Function **)v666;
                        if (*(llvm::Function **)v666 == this)
                        {
LABEL_1496:
                          v863 = *(void **)(v666 + 8);
                          unint64_t v866 = *v863;
                          v864 = v863 + 2;
                          unint64_t v865 = v866;
                          if (v866 >= 5 && *(_DWORD *)v864 == *(_DWORD *)"llvm." && v864[4] == aLlvm_1[4])
                          {
                            *((_DWORD *)this + 8) |= 0x2000u;
                            int v868 = llvm::Function::lookupIntrinsicID(v864, v865);
LABEL_1504:
                            *((_DWORD *)this + 9) = v868;
LABEL_609:
                            v314 = (uint64_t **)*((void *)this + 5);
                            uint64_t v18 = 1;
                            *unint64_t v2 = llvm::Intrinsic::getDeclaration(v314, 166, (uint64_t)&v1046, 1);
                            return v18;
                          }
LABEL_1503:
                          int v868 = 0;
                          *((_DWORD *)this + 8) &= ~0x2000u;
                          goto LABEL_1504;
                        }
                        int v668 = 1;
                        while (v667 != (llvm::Function *)-4096)
                        {
                          int v669 = v665 + v668++;
                          uint64_t v665 = v669 & (v664 - 1);
                          v667 = *(llvm::Function **)(v663 + 16 * v665);
                          if (v667 == this)
                          {
                            uint64_t v666 = v663 + 16 * v665;
                            goto LABEL_1496;
                          }
                        }
                      }
                      uint64_t v666 = v663 + 16 * v664;
                      goto LABEL_1496;
                    }
                    int v203 = 1;
                    while (v202 != (llvm::Function *)-4096)
                    {
                      int v204 = v200 + v203++;
                      uint64_t v200 = v204 & (v199 - 1);
                      v202 = *(llvm::Function **)(v198 + 16 * v200);
                      if (v202 == this)
                      {
                        uint64_t v201 = v198 + 16 * v200;
                        goto LABEL_606;
                      }
                    }
                  }
                  uint64_t v201 = v198 + 16 * v199;
                  goto LABEL_606;
                }
                if ((*((unsigned char *)this + 23) & 0x10) != 0)
                {
                  uint64_t v187 = ***(void ***)this;
                  uint64_t v188 = *(void *)(v187 + 152);
                  uint64_t v189 = *(unsigned int *)(v187 + 168);
                  if (v189)
                  {
                    LODWORD(v190) = (v189 - 1) & (v8 ^ (this >> 9));
                    uint64_t v191 = v188 + 16 * v190;
                    v192 = *(llvm::Function **)v191;
                    if (*(llvm::Function **)v191 != this)
                    {
                      int v193 = 1;
                      do
                      {
                        if (v192 == (llvm::Function *)-4096) {
                          goto LABEL_423;
                        }
                        int v194 = v190 + v193++;
                        uint64_t v190 = v194 & (v189 - 1);
                        v192 = *(llvm::Function **)(v188 + 16 * v190);
                      }
                      while (v192 != this);
                      uint64_t v191 = v188 + 16 * v190;
                    }
                  }
                  else
                  {
LABEL_423:
                    uint64_t v191 = v188 + 16 * v189;
                  }
                  uint64_t v208 = *(void **)(v191 + 8);
                  std::string::size_type v211 = *v208;
                  long long v209 = (char *)(v208 + 2);
                  std::string::size_type v210 = v211;
                }
                else
                {
                  std::string::size_type v210 = 0;
                  long long v209 = &byte_1CFBCE98E;
                }
                __int16 v1045 = 773;
                v1043.__r_.__value_.__r.__words[0] = (std::string::size_type)v209;
                v1043.__r_.__value_.__l.__size_ = v210;
                v1043.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
                llvm::Value::setNameImpl(this, (const char **)&v1043.__r_.__value_.__l.__data_);
                if (this && !*((unsigned char *)this + 16))
                {
                  if ((*((unsigned char *)this + 23) & 0x10) == 0) {
                    goto LABEL_1398;
                  }
                  uint64_t v212 = ***(void ***)this;
                  uint64_t v213 = *(void *)(v212 + 152);
                  uint64_t v214 = *(unsigned int *)(v212 + 168);
                  if (v214)
                  {
                    LODWORD(v215) = (v214 - 1) & (v8 ^ (this >> 9));
                    uint64_t v216 = v213 + 16 * v215;
                    v217 = *(llvm::Function **)v216;
                    if (*(llvm::Function **)v216 != this)
                    {
                      int v218 = 1;
                      do
                      {
                        if (v217 == (llvm::Function *)-4096) {
                          goto LABEL_1390;
                        }
                        int v219 = v215 + v218++;
                        uint64_t v215 = v219 & (v214 - 1);
                        v217 = *(llvm::Function **)(v213 + 16 * v215);
                      }
                      while (v217 != this);
                      uint64_t v216 = v213 + 16 * v215;
                    }
                  }
                  else
                  {
LABEL_1390:
                    uint64_t v216 = v213 + 16 * v214;
                  }
                  v796 = *(void **)(v216 + 8);
                  unint64_t v799 = *v796;
                  v797 = v796 + 2;
                  unint64_t v798 = v799;
                  if (v799 >= 5
                    && (*(_DWORD *)v797 == *(_DWORD *)"llvm." ? (BOOL v800 = v797[4] == aLlvm_1[4]) : (BOOL v800 = 0), v800))
                  {
                    *((_DWORD *)this + 8) |= 0x2000u;
                    int v801 = llvm::Function::lookupIntrinsicID(v797, v798);
                  }
                  else
                  {
LABEL_1398:
                    int v801 = 0;
                    *((_DWORD *)this + 8) &= ~0x2000u;
                  }
                  *((_DWORD *)this + 9) = v801;
                }
LABEL_487:
                uint64_t v49 = (uint64_t **)*((void *)this + 5);
                uint64_t v48 = (std::string *)&v1046;
                int v47 = v1037;
                goto LABEL_488;
              }
              int v177 = 1;
              while (v176 != (llvm::Function *)-4096)
              {
                int v178 = v174 + v177++;
                uint64_t v174 = v178 & (v173 - 1);
                uint64_t v176 = *(llvm::Function **)(v172 + 16 * v174);
                if (v176 == this)
                {
                  uint64_t v175 = v172 + 16 * v174;
                  goto LABEL_375;
                }
              }
            }
            uint64_t v175 = v172 + 16 * v173;
            goto LABEL_375;
          }
LABEL_366:
          int v160 = 167;
          uint64_t v161 = 1;
          goto LABEL_367;
        }
        if (*(void *)v21 != 0x6E61697261766E69 || *(void *)(v14 + 28) != 0x74726174732E746ELL)
        {
LABEL_346:
          if (*(void *)v21 != 0x656D69746566696CLL || *(_DWORD *)(v21 + 8) != 1684956462)
          {
            if (v22 < 0xD) {
              goto LABEL_1320;
            }
            goto LABEL_351;
          }
          goto LABEL_366;
        }
        int v78 = 164;
      }
      *(void *)&long long v1046 = *(void *)(*(void *)(*((void *)this + 3) + 16) + 16);
      uint64_t v82 = **v4;
      uint64_t v83 = *(void *)(v82 + 152);
      uint64_t v84 = *(unsigned int *)(v82 + 168);
      if (!v84) {
        goto LABEL_336;
      }
      LODWORD(v85) = (v84 - 1) & (v8 ^ (this >> 9));
      uint64_t v86 = v83 + 16 * v85;
      unsigned int v87 = *(llvm::Function **)v86;
      if (*(llvm::Function **)v86 != this)
      {
        int v88 = 1;
        while (v87 != (llvm::Function *)-4096)
        {
          int v89 = v85 + v88++;
          uint64_t v85 = v89 & (v84 - 1);
          unsigned int v87 = *(llvm::Function **)(v83 + 16 * v85);
          if (v87 == this)
          {
            uint64_t v86 = v83 + 16 * v85;
            goto LABEL_337;
          }
        }
LABEL_336:
        uint64_t v86 = v83 + 16 * v84;
      }
LABEL_337:
      uint64_t v150 = *(size_t **)(v86 + 8);
      size_t v153 = *v150;
      unint64_t v152 = v150 + 2;
      size_t v151 = v153;
      BOOL v154 = 1;
      v1038 = a2;
      int v1037 = v78;
      sub_1CC5B8334(v78, (uint64_t)&v1046, 1, *((uint64_t ***)this + 5), 0, &v1043);
      int v155 = SHIBYTE(v1043.__r_.__value_.__r.__words[2]);
      uint64_t v156 = (void *)v1043.__r_.__value_.__r.__words[0];
      if ((v1043.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        a2 = (llvm::Function *)&v1043;
      }
      else {
        a2 = (llvm::Function *)v1043.__r_.__value_.__r.__words[0];
      }
      unint64_t v2 = v1038;
      std::string::size_type v157 = *((unsigned char *)&v1043.__r_.__value_.__s + 23) & 0x7F;
      if ((v1043.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v157 = v1043.__r_.__value_.__l.__size_;
      }
      if (v151 == v157)
      {
        if (v151)
        {
          BOOL v154 = memcmp(v152, a2, v151) != 0;
          if (v155 < 0) {
            goto LABEL_345;
          }
LABEL_358:
          if (!v154) {
            goto LABEL_346;
          }
LABEL_359:
          if ((*((unsigned char *)this + 23) & 0x10) != 0)
          {
            uint64_t v162 = ***(void ***)this;
            uint64_t v163 = *(void *)(v162 + 152);
            uint64_t v164 = *(unsigned int *)(v162 + 168);
            if (v164)
            {
              LODWORD(v165) = (v164 - 1) & (v8 ^ (this >> 9));
              uint64_t v166 = v163 + 16 * v165;
              unint64_t v167 = *(llvm::Function **)v166;
              if (*(llvm::Function **)v166 != this)
              {
                int v168 = 1;
                do
                {
                  if (v167 == (llvm::Function *)-4096) {
                    goto LABEL_483;
                  }
                  int v169 = v165 + v168++;
                  uint64_t v165 = v169 & (v164 - 1);
                  unint64_t v167 = *(llvm::Function **)(v163 + 16 * v165);
                }
                while (v167 != this);
                uint64_t v166 = v163 + 16 * v165;
              }
            }
            else
            {
LABEL_483:
              uint64_t v166 = v163 + 16 * v164;
            }
            v231 = *(void **)(v166 + 8);
            std::string::size_type v234 = *v231;
            v232 = (char *)(v231 + 2);
            std::string::size_type v233 = v234;
          }
          else
          {
            std::string::size_type v233 = 0;
            v232 = &byte_1CFBCE98E;
          }
          __int16 v1045 = 773;
          v1043.__r_.__value_.__r.__words[0] = (std::string::size_type)v232;
          v1043.__r_.__value_.__l.__size_ = v233;
          v1043.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
          llvm::Value::setNameImpl(this, (const char **)&v1043.__r_.__value_.__l.__data_);
          if (this && !*((unsigned char *)this + 16))
          {
            if ((*((unsigned char *)this + 23) & 0x10) == 0) {
              goto LABEL_1445;
            }
            uint64_t v618 = ***(void ***)this;
            uint64_t v619 = *(void *)(v618 + 152);
            uint64_t v620 = *(unsigned int *)(v618 + 168);
            if (v620)
            {
              LODWORD(v621) = (v620 - 1) & (v8 ^ (this >> 9));
              uint64_t v622 = v619 + 16 * v621;
              v623 = *(llvm::Function **)v622;
              if (*(llvm::Function **)v622 != this)
              {
                int v624 = 1;
                do
                {
                  if (v623 == (llvm::Function *)-4096) {
                    goto LABEL_1437;
                  }
                  int v625 = v621 + v624++;
                  uint64_t v621 = v625 & (v620 - 1);
                  v623 = *(llvm::Function **)(v619 + 16 * v621);
                }
                while (v623 != this);
                uint64_t v622 = v619 + 16 * v621;
              }
            }
            else
            {
LABEL_1437:
              uint64_t v622 = v619 + 16 * v620;
            }
            v825 = *(void **)(v622 + 8);
            unint64_t v828 = *v825;
            v826 = v825 + 2;
            unint64_t v827 = v828;
            if (v828 >= 5
              && (*(_DWORD *)v826 == *(_DWORD *)"llvm." ? (BOOL v829 = v826[4] == aLlvm_1[4]) : (BOOL v829 = 0), v829))
            {
              *((_DWORD *)this + 8) |= 0x2000u;
              int v830 = llvm::Function::lookupIntrinsicID(v826, v827);
            }
            else
            {
LABEL_1445:
              int v830 = 0;
              *((_DWORD *)this + 8) &= ~0x2000u;
            }
            *((_DWORD *)this + 9) = v830;
            unint64_t v2 = v1038;
          }
          goto LABEL_487;
        }
        BOOL v154 = 0;
        if ((SHIBYTE(v1043.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_358;
        }
      }
      else if ((SHIBYTE(v1043.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_358;
      }
LABEL_345:
      operator delete(v156);
      if (!v154) {
        goto LABEL_346;
      }
      goto LABEL_359;
    case 'm':
      if (v22 < 0xC)
      {
        if (v22 < 7) {
          goto LABEL_1320;
        }
LABEL_1030:
        BOOL v534 = *(_DWORD *)v21 == 1668113773 && *(_DWORD *)(v21 + 3) == 779710563;
        if (v534 && *((void *)this + 12) == 5)
        {
          if ((*((unsigned char *)this + 23) & 0x10) == 0)
          {
            std::string::size_type v562 = 0;
            v561 = &byte_1CFBCE98E;
            goto LABEL_1068;
          }
          uint64_t v535 = ***(void ***)this;
          uint64_t v536 = *(void *)(v535 + 152);
          uint64_t v537 = *(unsigned int *)(v535 + 168);
          if (v537)
          {
            LODWORD(v538) = (v537 - 1) & (v8 ^ (this >> 9));
            uint64_t v539 = v536 + 16 * v538;
            v540 = *(llvm::Function **)v539;
            if (*(llvm::Function **)v539 == this)
            {
LABEL_1067:
              v560 = *(void **)(v539 + 8);
              std::string::size_type v563 = *v560;
              v561 = (char *)(v560 + 2);
              std::string::size_type v562 = v563;
LABEL_1068:
              __int16 v1045 = 773;
              v1043.__r_.__value_.__r.__words[0] = (std::string::size_type)v561;
              v1043.__r_.__value_.__l.__size_ = v562;
              v1043.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
              llvm::Value::setNameImpl(this, (const char **)&v1043.__r_.__value_.__l.__data_);
              if (!this || *((unsigned char *)this + 16)) {
                goto LABEL_1070;
              }
              if ((*((unsigned char *)this + 23) & 0x10) == 0) {
                goto LABEL_1524;
              }
              uint64_t v670 = ***(void ***)this;
              uint64_t v671 = *(void *)(v670 + 152);
              uint64_t v672 = *(unsigned int *)(v670 + 168);
              if (v672)
              {
                LODWORD(v673) = (v672 - 1) & (v8 ^ (this >> 9));
                uint64_t v674 = v671 + 16 * v673;
                v675 = *(llvm::Function **)v674;
                if (*(llvm::Function **)v674 == this)
                {
LABEL_1517:
                  v881 = *(void **)(v674 + 8);
                  unint64_t v884 = *v881;
                  v882 = v881 + 2;
                  unint64_t v883 = v884;
                  if (v884 >= 5 && *(_DWORD *)v882 == *(_DWORD *)"llvm." && v882[4] == aLlvm_1[4])
                  {
                    *((_DWORD *)this + 8) |= 0x2000u;
                    int v886 = llvm::Function::lookupIntrinsicID(v882, v883);
LABEL_1525:
                    *((_DWORD *)this + 9) = v886;
LABEL_1070:
                    uint64_t v48 = (std::string *)(*(void *)(*((void *)this + 3) + 16) + 8);
                    uint64_t v49 = (uint64_t **)*((void *)this + 5);
                    int v47 = 194;
LABEL_1082:
                    uint64_t v235 = 3;
                    goto LABEL_1083;
                  }
LABEL_1524:
                  int v886 = 0;
                  *((_DWORD *)this + 8) &= ~0x2000u;
                  goto LABEL_1525;
                }
                int v676 = 1;
                while (v675 != (llvm::Function *)-4096)
                {
                  int v677 = v673 + v676++;
                  uint64_t v673 = v677 & (v672 - 1);
                  v675 = *(llvm::Function **)(v671 + 16 * v673);
                  if (v675 == this)
                  {
                    uint64_t v674 = v671 + 16 * v673;
                    goto LABEL_1517;
                  }
                }
              }
              uint64_t v674 = v671 + 16 * v672;
              goto LABEL_1517;
            }
            int v541 = 1;
            while (v540 != (llvm::Function *)-4096)
            {
              int v542 = v538 + v541++;
              uint64_t v538 = v542 & (v537 - 1);
              v540 = *(llvm::Function **)(v536 + 16 * v538);
              if (v540 == this)
              {
                uint64_t v539 = v536 + 16 * v538;
                goto LABEL_1067;
              }
            }
          }
          uint64_t v539 = v536 + 16 * v537;
          goto LABEL_1067;
        }
        if (v22 >= 8 && *(void *)v21 == 0x2E65766F6D6D656DLL && *((void *)this + 12) == 5)
        {
          if ((*((unsigned char *)this + 23) & 0x10) == 0)
          {
            std::string::size_type v573 = 0;
            v572 = &byte_1CFBCE98E;
            goto LABEL_1079;
          }
          uint64_t v543 = ***(void ***)this;
          uint64_t v544 = *(void *)(v543 + 152);
          uint64_t v545 = *(unsigned int *)(v543 + 168);
          if (v545)
          {
            LODWORD(v546) = (v545 - 1) & (v8 ^ (this >> 9));
            uint64_t v547 = v544 + 16 * v546;
            v548 = *(llvm::Function **)v547;
            if (*(llvm::Function **)v547 == this)
            {
LABEL_1078:
              v571 = *(void **)(v547 + 8);
              std::string::size_type v574 = *v571;
              v572 = (char *)(v571 + 2);
              std::string::size_type v573 = v574;
LABEL_1079:
              __int16 v1045 = 773;
              v1043.__r_.__value_.__r.__words[0] = (std::string::size_type)v572;
              v1043.__r_.__value_.__l.__size_ = v573;
              v1043.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
              llvm::Value::setNameImpl(this, (const char **)&v1043.__r_.__value_.__l.__data_);
              if (!this || *((unsigned char *)this + 16)) {
                goto LABEL_1081;
              }
              if ((*((unsigned char *)this + 23) & 0x10) == 0) {
                goto LABEL_1628;
              }
              uint64_t v817 = ***(void ***)this;
              uint64_t v818 = *(void *)(v817 + 152);
              uint64_t v819 = *(unsigned int *)(v817 + 168);
              if (v819)
              {
                LODWORD(v820) = (v819 - 1) & (v8 ^ (this >> 9));
                uint64_t v821 = v818 + 16 * v820;
                v822 = *(llvm::Function **)v821;
                if (*(llvm::Function **)v821 == this)
                {
LABEL_1621:
                  v951 = *(void **)(v821 + 8);
                  unint64_t v954 = *v951;
                  v952 = v951 + 2;
                  unint64_t v953 = v954;
                  if (v954 >= 5 && *(_DWORD *)v952 == *(_DWORD *)"llvm." && v952[4] == aLlvm_1[4])
                  {
                    *((_DWORD *)this + 8) |= 0x2000u;
                    int v956 = llvm::Function::lookupIntrinsicID(v952, v953);
LABEL_1629:
                    *((_DWORD *)this + 9) = v956;
LABEL_1081:
                    uint64_t v48 = (std::string *)(*(void *)(*((void *)this + 3) + 16) + 8);
                    uint64_t v49 = (uint64_t **)*((void *)this + 5);
                    int v47 = 197;
                    goto LABEL_1082;
                  }
LABEL_1628:
                  int v956 = 0;
                  *((_DWORD *)this + 8) &= ~0x2000u;
                  goto LABEL_1629;
                }
                int v823 = 1;
                while (v822 != (llvm::Function *)-4096)
                {
                  int v824 = v820 + v823++;
                  uint64_t v820 = v824 & (v819 - 1);
                  v822 = *(llvm::Function **)(v818 + 16 * v820);
                  if (v822 == this)
                  {
                    uint64_t v821 = v818 + 16 * v820;
                    goto LABEL_1621;
                  }
                }
              }
              uint64_t v821 = v818 + 16 * v819;
              goto LABEL_1621;
            }
            int v549 = 1;
            while (v548 != (llvm::Function *)-4096)
            {
              int v550 = v546 + v549++;
              uint64_t v546 = v550 & (v545 - 1);
              v548 = *(llvm::Function **)(v544 + 16 * v546);
              if (v548 == this)
              {
                uint64_t v547 = v544 + 16 * v546;
                goto LABEL_1078;
              }
            }
          }
          uint64_t v547 = v544 + 16 * v545;
          goto LABEL_1078;
        }
        BOOL v551 = *(_DWORD *)v21 == 1936549229 && *(_DWORD *)(v21 + 3) == 779380083;
        if (!v551 || *((void *)this + 12) != 5) {
          goto LABEL_1320;
        }
        if ((*((unsigned char *)this + 23) & 0x10) == 0)
        {
          std::string::size_type v566 = 0;
          v565 = &byte_1CFBCE98E;
          goto LABEL_1073;
        }
        uint64_t v552 = ***(void ***)this;
        uint64_t v553 = *(void *)(v552 + 152);
        uint64_t v554 = *(unsigned int *)(v552 + 168);
        if (v554)
        {
          LODWORD(v555) = (v554 - 1) & (v8 ^ (this >> 9));
          uint64_t v556 = v553 + 16 * v555;
          v557 = *(llvm::Function **)v556;
          if (*(llvm::Function **)v556 == this)
          {
LABEL_1072:
            v564 = *(void **)(v556 + 8);
            std::string::size_type v567 = *v564;
            v565 = (char *)(v564 + 2);
            std::string::size_type v566 = v567;
LABEL_1073:
            __int16 v1045 = 773;
            v1043.__r_.__value_.__r.__words[0] = (std::string::size_type)v565;
            v1043.__r_.__value_.__l.__size_ = v566;
            v1043.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
            llvm::Value::setNameImpl(this, (const char **)&v1043.__r_.__value_.__l.__data_);
            if (!this || *((unsigned char *)this + 16)) {
              goto LABEL_1075;
            }
            if ((*((unsigned char *)this + 23) & 0x10) == 0) {
              goto LABEL_1598;
            }
            uint64_t v721 = ***(void ***)this;
            uint64_t v722 = *(void *)(v721 + 152);
            uint64_t v723 = *(unsigned int *)(v721 + 168);
            if (v723)
            {
              LODWORD(v724) = (v723 - 1) & (v8 ^ (this >> 9));
              uint64_t v725 = v722 + 16 * v724;
              v726 = *(llvm::Function **)v725;
              if (*(llvm::Function **)v725 == this)
              {
LABEL_1591:
                v933 = *(void **)(v725 + 8);
                unint64_t v936 = *v933;
                v934 = v933 + 2;
                unint64_t v935 = v936;
                if (v936 >= 5 && *(_DWORD *)v934 == *(_DWORD *)"llvm." && v934[4] == aLlvm_1[4])
                {
                  *((_DWORD *)this + 8) |= 0x2000u;
                  int v938 = llvm::Function::lookupIntrinsicID(v934, v935);
LABEL_1599:
                  *((_DWORD *)this + 9) = v938;
LABEL_1075:
                  uint64_t v568 = *(void *)(*((void *)this + 3) + 16);
                  std::string::size_type v569 = *(void *)(v568 + 8);
                  std::string::size_type v570 = *(void *)(v568 + 24);
                  v1043.__r_.__value_.__r.__words[0] = v569;
                  v1043.__r_.__value_.__l.__size_ = v570;
                  uint64_t v49 = (uint64_t **)*((void *)this + 5);
                  uint64_t v48 = &v1043;
                  int v47 = 199;
                  goto LABEL_1076;
                }
LABEL_1598:
                int v938 = 0;
                *((_DWORD *)this + 8) &= ~0x2000u;
                goto LABEL_1599;
              }
              int v727 = 1;
              while (v726 != (llvm::Function *)-4096)
              {
                int v728 = v724 + v727++;
                uint64_t v724 = v728 & (v723 - 1);
                v726 = *(llvm::Function **)(v722 + 16 * v724);
                if (v726 == this)
                {
                  uint64_t v725 = v722 + 16 * v724;
                  goto LABEL_1591;
                }
              }
            }
            uint64_t v725 = v722 + 16 * v723;
            goto LABEL_1591;
          }
          int v558 = 1;
          while (v557 != (llvm::Function *)-4096)
          {
            int v559 = v555 + v558++;
            uint64_t v555 = v559 & (v554 - 1);
            v557 = *(llvm::Function **)(v553 + 16 * v555);
            if (v557 == this)
            {
              uint64_t v556 = v553 + 16 * v555;
              goto LABEL_1072;
            }
          }
        }
        uint64_t v556 = v553 + 16 * v554;
        goto LABEL_1072;
      }
      if (*(void *)v21 != 0x6C2E64656B73616DLL || *(_DWORD *)(v14 + 29) != 778330479) {
        goto LABEL_511;
      }
      long long v1046 = 0uLL;
      *(void *)&long long v1046 = **(void **)(*((void *)this + 3) + 16);
      if (*((unsigned char *)this + 18))
      {
        llvm::Function::BuildLazyArguments(this);
        int v124 = *((_DWORD *)this + 5);
        *((void *)&v1046 + 1) = **((void **)this + 11);
        if ((v124 & 0x10000000) == 0)
        {
          v236 = v2;
          size_t v239 = 0;
          v238 = &byte_1CFBCE98E;
LABEL_491:
          sub_1CC5B8334(185, (uint64_t)&v1046, 2, *((uint64_t ***)this + 5), 0, &v1043);
          int v241 = SHIBYTE(v1043.__r_.__value_.__r.__words[2]);
          v242 = (void *)v1043.__r_.__value_.__r.__words[0];
          if ((v1043.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            a2 = (llvm::Function *)&v1043;
          }
          else {
            a2 = (llvm::Function *)v1043.__r_.__value_.__r.__words[0];
          }
          std::string::size_type v243 = *((unsigned char *)&v1043.__r_.__value_.__s + 23) & 0x7F;
          if ((v1043.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v243 = v1043.__r_.__value_.__l.__size_;
          }
          if (v239 == v243)
          {
            unint64_t v2 = v236;
            if (v239) {
              BOOL v244 = memcmp(v238, a2, v239) != 0;
            }
            else {
              BOOL v244 = 0;
            }
          }
          else
          {
            BOOL v244 = 1;
            unint64_t v2 = v236;
          }
          if (v241 < 0) {
            operator delete(v242);
          }
          if (v244)
          {
            if ((*((unsigned char *)this + 23) & 0x10) != 0)
            {
              uint64_t v245 = ***(void ***)this;
              uint64_t v246 = *(void *)(v245 + 152);
              uint64_t v247 = *(unsigned int *)(v245 + 168);
              if (v247)
              {
                LODWORD(v248) = (v247 - 1) & (v8 ^ (this >> 9));
                uint64_t v249 = v246 + 16 * v248;
                v250 = *(llvm::Function **)v249;
                if (*(llvm::Function **)v249 != this)
                {
                  int v251 = 1;
                  do
                  {
                    if (v250 == (llvm::Function *)-4096) {
                      goto LABEL_654;
                    }
                    int v252 = v248 + v251++;
                    uint64_t v248 = v252 & (v247 - 1);
                    v250 = *(llvm::Function **)(v246 + 16 * v248);
                  }
                  while (v250 != this);
                  uint64_t v249 = v246 + 16 * v248;
                }
              }
              else
              {
LABEL_654:
                uint64_t v249 = v246 + 16 * v247;
              }
              v336 = *(void **)(v249 + 8);
              std::string::size_type v339 = *v336;
              v337 = (char *)(v336 + 2);
              std::string::size_type v338 = v339;
            }
            else
            {
              std::string::size_type v338 = 0;
              v337 = &byte_1CFBCE98E;
            }
            __int16 v1045 = 773;
            v1043.__r_.__value_.__r.__words[0] = (std::string::size_type)v337;
            v1043.__r_.__value_.__l.__size_ = v338;
            v1043.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
            llvm::Value::setNameImpl(this, (const char **)&v1043.__r_.__value_.__l.__data_);
            if (this && !*((unsigned char *)this + 16))
            {
              if ((*((unsigned char *)this + 23) & 0x10) == 0) {
                goto LABEL_1571;
              }
              uint64_t v702 = ***(void ***)this;
              uint64_t v703 = *(void *)(v702 + 152);
              uint64_t v704 = *(unsigned int *)(v702 + 168);
              if (v704)
              {
                LODWORD(v705) = (v704 - 1) & (v8 ^ (this >> 9));
                uint64_t v706 = v703 + 16 * v705;
                v707 = *(llvm::Function **)v706;
                if (*(llvm::Function **)v706 != this)
                {
                  int v708 = 1;
                  do
                  {
                    if (v707 == (llvm::Function *)-4096) {
                      goto LABEL_1563;
                    }
                    int v709 = v705 + v708++;
                    uint64_t v705 = v709 & (v704 - 1);
                    v707 = *(llvm::Function **)(v703 + 16 * v705);
                  }
                  while (v707 != this);
                  uint64_t v706 = v703 + 16 * v705;
                }
              }
              else
              {
LABEL_1563:
                uint64_t v706 = v703 + 16 * v704;
              }
              v913 = *(void **)(v706 + 8);
              unint64_t v916 = *v913;
              v914 = v913 + 2;
              unint64_t v915 = v916;
              if (v916 >= 5
                && (*(_DWORD *)v914 == *(_DWORD *)"llvm." ? (BOOL v917 = v914[4] == aLlvm_1[4]) : (BOOL v917 = 0), v917))
              {
                *((_DWORD *)this + 8) |= 0x2000u;
                int v918 = llvm::Function::lookupIntrinsicID(v914, v915);
              }
              else
              {
LABEL_1571:
                int v918 = 0;
                *((_DWORD *)this + 8) &= ~0x2000u;
              }
              *((_DWORD *)this + 9) = v918;
            }
            uint64_t v49 = (uint64_t **)*((void *)this + 5);
            uint64_t v48 = (std::string *)&v1046;
            int v47 = 185;
            goto LABEL_1076;
          }
LABEL_511:
          if (v22 < 0xD) {
            goto LABEL_1030;
          }
          if (*(void *)v21 != 0x732E64656B73616DLL || *(void *)(v21 + 5) != 0x2E65726F74732E64)
          {
LABEL_721:
            if (v22 < 0xE) {
              goto LABEL_1030;
            }
            if (*(void *)v21 != 0x672E64656B73616DLL || *(void *)(v21 + 6) != 0x2E7265687461672ELL)
            {
LABEL_896:
              if (v22 < 0xF) {
                goto LABEL_1030;
              }
              if (*(void *)v21 != 0x732E64656B73616DLL || *(void *)(v21 + 7) != 0x2E72657474616373) {
                goto LABEL_1030;
              }
              uint64_t v471 = *(void *)(*((void *)this + 3) + 16);
              long long v1046 = 0uLL;
              long long v1046 = *(_OWORD *)(v471 + 8);
              if ((*((unsigned char *)this + 23) & 0x10) == 0)
              {
                v517 = v2;
                size_t v520 = 0;
                v519 = &byte_1CFBCE98E;
LABEL_1009:
                sub_1CC5B8334(186, (uint64_t)&v1046, 2, *((uint64_t ***)this + 5), 0, &v1043);
                int v522 = SHIBYTE(v1043.__r_.__value_.__r.__words[2]);
                v523 = (void *)v1043.__r_.__value_.__r.__words[0];
                if ((v1043.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  a2 = (llvm::Function *)&v1043;
                }
                else {
                  a2 = (llvm::Function *)v1043.__r_.__value_.__r.__words[0];
                }
                std::string::size_type v524 = *((unsigned char *)&v1043.__r_.__value_.__s + 23) & 0x7F;
                if ((v1043.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type v524 = v1043.__r_.__value_.__l.__size_;
                }
                if (v520 == v524)
                {
                  if (v520) {
                    BOOL v525 = memcmp(v519, a2, v520) != 0;
                  }
                  else {
                    BOOL v525 = 0;
                  }
                }
                else
                {
                  BOOL v525 = 1;
                }
                if (v522 < 0) {
                  operator delete(v523);
                }
                if (!v525)
                {
                  unint64_t v2 = v517;
                  goto LABEL_1030;
                }
                if ((*((unsigned char *)this + 23) & 0x10) == 0)
                {
                  std::string::size_type v628 = 0;
                  v627 = &byte_1CFBCE98E;
                  goto LABEL_1208;
                }
                uint64_t v526 = ***(void ***)this;
                uint64_t v527 = *(void *)(v526 + 152);
                uint64_t v528 = *(unsigned int *)(v526 + 168);
                if (v528)
                {
                  LODWORD(v529) = (v528 - 1) & (v8 ^ (this >> 9));
                  uint64_t v530 = v527 + 16 * v529;
                  v531 = *(llvm::Function **)v530;
                  if (*(llvm::Function **)v530 == this)
                  {
LABEL_1207:
                    v626 = *(void **)(v530 + 8);
                    std::string::size_type v629 = *v626;
                    v627 = (char *)(v626 + 2);
                    std::string::size_type v628 = v629;
LABEL_1208:
                    __int16 v1045 = 773;
                    v1043.__r_.__value_.__r.__words[0] = (std::string::size_type)v627;
                    v1043.__r_.__value_.__l.__size_ = v628;
                    v1043.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
                    llvm::Value::setNameImpl(this, (const char **)&v1043.__r_.__value_.__l.__data_);
                    if (!this || *((unsigned char *)this + 16)) {
                      goto LABEL_1210;
                    }
                    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
                      goto LABEL_1697;
                    }
                    uint64_t v963 = ***(void ***)this;
                    uint64_t v964 = *(void *)(v963 + 152);
                    uint64_t v965 = *(unsigned int *)(v963 + 168);
                    if (v965)
                    {
                      LODWORD(v966) = (v965 - 1) & (v8 ^ (this >> 9));
                      uint64_t v967 = v964 + 16 * v966;
                      v968 = *(llvm::Function **)v967;
                      if (*(llvm::Function **)v967 == this)
                      {
LABEL_1690:
                        v1007 = *(void **)(v967 + 8);
                        unint64_t v1010 = *v1007;
                        v1008 = v1007 + 2;
                        unint64_t v1009 = v1010;
                        if (v1010 >= 5 && *(_DWORD *)v1008 == *(_DWORD *)"llvm." && v1008[4] == aLlvm_1[4])
                        {
                          *((_DWORD *)this + 8) |= 0x2000u;
                          int v1012 = llvm::Function::lookupIntrinsicID(v1008, v1009);
LABEL_1698:
                          *((_DWORD *)this + 9) = v1012;
LABEL_1210:
                          uint64_t *v517 = llvm::Intrinsic::getDeclaration(*((uint64_t ***)this + 5), 186, (uint64_t)&v1046, 2);
                          return 1;
                        }
LABEL_1697:
                        int v1012 = 0;
                        *((_DWORD *)this + 8) &= ~0x2000u;
                        goto LABEL_1698;
                      }
                      int v969 = 1;
                      while (v968 != (llvm::Function *)-4096)
                      {
                        int v970 = v966 + v969++;
                        uint64_t v966 = v970 & (v965 - 1);
                        v968 = *(llvm::Function **)(v964 + 16 * v966);
                        if (v968 == this)
                        {
                          uint64_t v967 = v964 + 16 * v966;
                          goto LABEL_1690;
                        }
                      }
                    }
                    uint64_t v967 = v964 + 16 * v965;
                    goto LABEL_1690;
                  }
                  int v532 = 1;
                  while (v531 != (llvm::Function *)-4096)
                  {
                    int v533 = v529 + v532++;
                    uint64_t v529 = v533 & (v528 - 1);
                    v531 = *(llvm::Function **)(v527 + 16 * v529);
                    if (v531 == this)
                    {
                      uint64_t v530 = v527 + 16 * v529;
                      goto LABEL_1207;
                    }
                  }
                }
                uint64_t v530 = v527 + 16 * v528;
                goto LABEL_1207;
              }
              uint64_t v472 = ***(void ***)this;
              uint64_t v473 = *(void *)(v472 + 152);
              uint64_t v474 = *(unsigned int *)(v472 + 168);
              if (v474)
              {
                LODWORD(v475) = (v474 - 1) & (v8 ^ (this >> 9));
                uint64_t v476 = v473 + 16 * v475;
                v477 = *(llvm::Function **)v476;
                if (*(llvm::Function **)v476 == this)
                {
LABEL_1008:
                  v517 = v2;
                  v518 = *(void **)(v476 + 8);
                  size_t v521 = *v518;
                  v519 = (char *)(v518 + 2);
                  size_t v520 = v521;
                  goto LABEL_1009;
                }
                int v478 = 1;
                while (v477 != (llvm::Function *)-4096)
                {
                  int v479 = v475 + v478++;
                  uint64_t v475 = v479 & (v474 - 1);
                  v477 = *(llvm::Function **)(v473 + 16 * v475);
                  if (v477 == this)
                  {
                    uint64_t v476 = v473 + 16 * v475;
                    goto LABEL_1008;
                  }
                }
              }
              uint64_t v476 = v473 + 16 * v474;
              goto LABEL_1008;
            }
            long long v1046 = 0uLL;
            *(void *)&long long v1046 = **(void **)(*((void *)this + 3) + 16);
            if (*((unsigned char *)this + 18)) {
              llvm::Function::BuildLazyArguments(this);
            }
            *((void *)&v1046 + 1) = **((void **)this + 11);
            if ((*((unsigned char *)this + 23) & 0x10) == 0)
            {
              size_t v456 = 0;
              v455 = &byte_1CFBCE98E;
LABEL_876:
              sub_1CC5B8334(184, (uint64_t)&v1046, 2, *((uint64_t ***)this + 5), 0, &v1043);
              int v458 = SHIBYTE(v1043.__r_.__value_.__r.__words[2]);
              v459 = (void *)v1043.__r_.__value_.__r.__words[0];
              if ((v1043.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                a2 = (llvm::Function *)&v1043;
              }
              else {
                a2 = (llvm::Function *)v1043.__r_.__value_.__r.__words[0];
              }
              std::string::size_type v460 = *((unsigned char *)&v1043.__r_.__value_.__s + 23) & 0x7F;
              if ((v1043.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v460 = v1043.__r_.__value_.__l.__size_;
              }
              if (v456 == v460)
              {
                if (v456) {
                  BOOL v461 = memcmp(v455, a2, v456) != 0;
                }
                else {
                  BOOL v461 = 0;
                }
              }
              else
              {
                BOOL v461 = 1;
              }
              if (v458 < 0) {
                operator delete(v459);
              }
              if (!v461) {
                goto LABEL_896;
              }
              if ((*((unsigned char *)this + 23) & 0x10) == 0)
              {
                std::string::size_type v515 = 0;
                v514 = &byte_1CFBCE98E;
                goto LABEL_1001;
              }
              uint64_t v462 = ***(void ***)this;
              uint64_t v463 = *(void *)(v462 + 152);
              uint64_t v464 = *(unsigned int *)(v462 + 168);
              if (v464)
              {
                LODWORD(v465) = (v464 - 1) & (v8 ^ (this >> 9));
                uint64_t v466 = v463 + 16 * v465;
                v467 = *(llvm::Function **)v466;
                if (*(llvm::Function **)v466 == this)
                {
LABEL_1000:
                  v513 = *(void **)(v466 + 8);
                  std::string::size_type v516 = *v513;
                  v514 = (char *)(v513 + 2);
                  std::string::size_type v515 = v516;
LABEL_1001:
                  __int16 v1045 = 773;
                  v1043.__r_.__value_.__r.__words[0] = (std::string::size_type)v514;
                  v1043.__r_.__value_.__l.__size_ = v515;
                  v1043.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
                  llvm::Value::setNameImpl(this, (const char **)&v1043.__r_.__value_.__l.__data_);
                  if (!this || *((unsigned char *)this + 16)) {
                    goto LABEL_1003;
                  }
                  if ((*((unsigned char *)this + 23) & 0x10) == 0) {
                    goto LABEL_1673;
                  }
                  uint64_t v925 = ***(void ***)this;
                  uint64_t v926 = *(void *)(v925 + 152);
                  uint64_t v927 = *(unsigned int *)(v925 + 168);
                  if (v927)
                  {
                    LODWORD(v928) = (v927 - 1) & (v8 ^ (this >> 9));
                    uint64_t v929 = v926 + 16 * v928;
                    v930 = *(llvm::Function **)v929;
                    if (*(llvm::Function **)v929 == this)
                    {
LABEL_1666:
                      v985 = *(void **)(v929 + 8);
                      unint64_t v988 = *v985;
                      v986 = v985 + 2;
                      unint64_t v987 = v988;
                      if (v988 >= 5 && *(_DWORD *)v986 == *(_DWORD *)"llvm." && v986[4] == aLlvm_1[4])
                      {
                        *((_DWORD *)this + 8) |= 0x2000u;
                        int v990 = llvm::Function::lookupIntrinsicID(v986, v987);
LABEL_1674:
                        *((_DWORD *)this + 9) = v990;
LABEL_1003:
                        uint64_t v49 = (uint64_t **)*((void *)this + 5);
                        uint64_t v48 = (std::string *)&v1046;
                        int v47 = 184;
LABEL_1076:
                        uint64_t v235 = 2;
LABEL_1083:
                        Declaratioint n = llvm::Intrinsic::getDeclaration(v49, v47, (uint64_t)v48, v235);
LABEL_1337:
                        *unint64_t v2 = Declaration;
                        return 1;
                      }
LABEL_1673:
                      int v990 = 0;
                      *((_DWORD *)this + 8) &= ~0x2000u;
                      goto LABEL_1674;
                    }
                    int v931 = 1;
                    while (v930 != (llvm::Function *)-4096)
                    {
                      int v932 = v928 + v931++;
                      uint64_t v928 = v932 & (v927 - 1);
                      v930 = *(llvm::Function **)(v926 + 16 * v928);
                      if (v930 == this)
                      {
                        uint64_t v929 = v926 + 16 * v928;
                        goto LABEL_1666;
                      }
                    }
                  }
                  uint64_t v929 = v926 + 16 * v927;
                  goto LABEL_1666;
                }
                int v468 = 1;
                while (v467 != (llvm::Function *)-4096)
                {
                  int v469 = v465 + v468++;
                  uint64_t v465 = v469 & (v464 - 1);
                  v467 = *(llvm::Function **)(v463 + 16 * v465);
                  if (v467 == this)
                  {
                    uint64_t v466 = v463 + 16 * v465;
                    goto LABEL_1000;
                  }
                }
              }
              uint64_t v466 = v463 + 16 * v464;
              goto LABEL_1000;
            }
            uint64_t v384 = ***(void ***)this;
            uint64_t v385 = *(void *)(v384 + 152);
            uint64_t v386 = *(unsigned int *)(v384 + 168);
            if (v386)
            {
              LODWORD(v387) = (v386 - 1) & (v8 ^ (this >> 9));
              uint64_t v388 = v385 + 16 * v387;
              v389 = *(llvm::Function **)v388;
              if (*(llvm::Function **)v388 == this)
              {
LABEL_875:
                v454 = *(void **)(v388 + 8);
                size_t v457 = *v454;
                v455 = (char *)(v454 + 2);
                size_t v456 = v457;
                goto LABEL_876;
              }
              int v390 = 1;
              while (v389 != (llvm::Function *)-4096)
              {
                int v391 = v387 + v390++;
                uint64_t v387 = v391 & (v386 - 1);
                v389 = *(llvm::Function **)(v385 + 16 * v387);
                if (v389 == this)
                {
                  uint64_t v388 = v385 + 16 * v387;
                  goto LABEL_875;
                }
              }
            }
            uint64_t v388 = v385 + 16 * v386;
            goto LABEL_875;
          }
          uint64_t v254 = *(void *)(*((void *)this + 3) + 16);
          long long v1046 = 0uLL;
          long long v1046 = *(_OWORD *)(v254 + 8);
          if ((*((unsigned char *)this + 23) & 0x10) == 0)
          {
            size_t v369 = 0;
            v368 = &byte_1CFBCE98E;
LABEL_701:
            sub_1CC5B8334(187, (uint64_t)&v1046, 2, *((uint64_t ***)this + 5), 0, &v1043);
            int v371 = SHIBYTE(v1043.__r_.__value_.__r.__words[2]);
            v372 = (void *)v1043.__r_.__value_.__r.__words[0];
            if ((v1043.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              a2 = (llvm::Function *)&v1043;
            }
            else {
              a2 = (llvm::Function *)v1043.__r_.__value_.__r.__words[0];
            }
            std::string::size_type v373 = *((unsigned char *)&v1043.__r_.__value_.__s + 23) & 0x7F;
            if ((v1043.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v373 = v1043.__r_.__value_.__l.__size_;
            }
            if (v369 == v373)
            {
              if (v369) {
                BOOL v374 = memcmp(v368, a2, v369) != 0;
              }
              else {
                BOOL v374 = 0;
              }
            }
            else
            {
              BOOL v374 = 1;
            }
            if (v371 < 0) {
              operator delete(v372);
            }
            if (!v374) {
              goto LABEL_721;
            }
            if ((*((unsigned char *)this + 23) & 0x10) == 0)
            {
              std::string::size_type v450 = 0;
              v449 = &byte_1CFBCE98E;
              goto LABEL_865;
            }
            uint64_t v375 = ***(void ***)this;
            uint64_t v376 = *(void *)(v375 + 152);
            uint64_t v377 = *(unsigned int *)(v375 + 168);
            if (v377)
            {
              LODWORD(v378) = (v377 - 1) & (v8 ^ (this >> 9));
              uint64_t v379 = v376 + 16 * v378;
              v380 = *(llvm::Function **)v379;
              if (*(llvm::Function **)v379 == this)
              {
LABEL_864:
                v448 = *(void **)(v379 + 8);
                std::string::size_type v451 = *v448;
                v449 = (char *)(v448 + 2);
                std::string::size_type v450 = v451;
LABEL_865:
                __int16 v1045 = 773;
                v1043.__r_.__value_.__r.__words[0] = (std::string::size_type)v449;
                v1043.__r_.__value_.__l.__size_ = v450;
                v1043.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
                llvm::Value::setNameImpl(this, (const char **)&v1043.__r_.__value_.__l.__data_);
                if (!this || *((unsigned char *)this + 16)) {
                  goto LABEL_867;
                }
                if ((*((unsigned char *)this + 23) & 0x10) == 0) {
                  goto LABEL_1638;
                }
                uint64_t v831 = ***(void ***)this;
                uint64_t v832 = *(void *)(v831 + 152);
                uint64_t v833 = *(unsigned int *)(v831 + 168);
                if (v833)
                {
                  LODWORD(v834) = (v833 - 1) & (v8 ^ (this >> 9));
                  uint64_t v835 = v832 + 16 * v834;
                  v836 = *(llvm::Function **)v835;
                  if (*(llvm::Function **)v835 == this)
                  {
LABEL_1631:
                    v957 = *(void **)(v835 + 8);
                    unint64_t v960 = *v957;
                    v958 = v957 + 2;
                    unint64_t v959 = v960;
                    if (v960 >= 5 && *(_DWORD *)v958 == *(_DWORD *)"llvm." && v958[4] == aLlvm_1[4])
                    {
                      *((_DWORD *)this + 8) |= 0x2000u;
                      int v962 = llvm::Function::lookupIntrinsicID(v958, v959);
LABEL_1639:
                      *((_DWORD *)this + 9) = v962;
LABEL_867:
                      uint64_t v49 = (uint64_t **)*((void *)this + 5);
                      uint64_t v48 = (std::string *)&v1046;
                      int v47 = 187;
                      goto LABEL_1076;
                    }
LABEL_1638:
                    int v962 = 0;
                    *((_DWORD *)this + 8) &= ~0x2000u;
                    goto LABEL_1639;
                  }
                  int v837 = 1;
                  while (v836 != (llvm::Function *)-4096)
                  {
                    int v838 = v834 + v837++;
                    uint64_t v834 = v838 & (v833 - 1);
                    v836 = *(llvm::Function **)(v832 + 16 * v834);
                    if (v836 == this)
                    {
                      uint64_t v835 = v832 + 16 * v834;
                      goto LABEL_1631;
                    }
                  }
                }
                uint64_t v835 = v832 + 16 * v833;
                goto LABEL_1631;
              }
              int v381 = 1;
              while (v380 != (llvm::Function *)-4096)
              {
                int v382 = v378 + v381++;
                uint64_t v378 = v382 & (v377 - 1);
                v380 = *(llvm::Function **)(v376 + 16 * v378);
                if (v380 == this)
                {
                  uint64_t v379 = v376 + 16 * v378;
                  goto LABEL_864;
                }
              }
            }
            uint64_t v379 = v376 + 16 * v377;
            goto LABEL_864;
          }
          uint64_t v255 = ***(void ***)this;
          uint64_t v256 = *(void *)(v255 + 152);
          uint64_t v257 = *(unsigned int *)(v255 + 168);
          if (v257)
          {
            LODWORD(v258) = (v257 - 1) & (v8 ^ (this >> 9));
            uint64_t v259 = v256 + 16 * v258;
            v260 = *(llvm::Function **)v259;
            if (*(llvm::Function **)v259 == this)
            {
LABEL_700:
              v367 = *(void **)(v259 + 8);
              size_t v370 = *v367;
              v368 = (char *)(v367 + 2);
              size_t v369 = v370;
              goto LABEL_701;
            }
            int v261 = 1;
            while (v260 != (llvm::Function *)-4096)
            {
              int v262 = v258 + v261++;
              uint64_t v258 = v262 & (v257 - 1);
              v260 = *(llvm::Function **)(v256 + 16 * v258);
              if (v260 == this)
              {
                uint64_t v259 = v256 + 16 * v258;
                goto LABEL_700;
              }
            }
          }
          uint64_t v259 = v256 + 16 * v257;
          goto LABEL_700;
        }
      }
      else
      {
        *((void *)&v1046 + 1) = **((void **)this + 11);
      }
      uint64_t v125 = ***(void ***)this;
      uint64_t v126 = *(void *)(v125 + 152);
      uint64_t v127 = *(unsigned int *)(v125 + 168);
      if (!v127) {
        goto LABEL_489;
      }
      LODWORD(v128) = (v127 - 1) & (v8 ^ (this >> 9));
      uint64_t v129 = v126 + 16 * v128;
      int v130 = *(llvm::Function **)v129;
      if (*(llvm::Function **)v129 != this)
      {
        int v131 = 1;
        while (v130 != (llvm::Function *)-4096)
        {
          int v132 = v128 + v131++;
          uint64_t v128 = v132 & (v127 - 1);
          int v130 = *(llvm::Function **)(v126 + 16 * v128);
          if (v130 == this)
          {
            uint64_t v129 = v126 + 16 * v128;
            goto LABEL_490;
          }
        }
LABEL_489:
        uint64_t v129 = v126 + 16 * v127;
      }
LABEL_490:
      v236 = v2;
      v237 = *(void **)(v129 + 8);
      size_t v240 = *v237;
      v238 = (char *)(v237 + 2);
      size_t v239 = v240;
      goto LABEL_491;
    case 'n':
      if (v22 < 5) {
        goto LABEL_1320;
      }
      if (*(_DWORD *)v21 != 1836480110 || *(unsigned char *)(v14 + 25) != 46) {
        goto LABEL_1320;
      }
      uint64_t v63 = (_DWORD *)(v14 + 26);
      std::string::size_type v64 = v15 - 10;
      if (v15 == 15)
      {
        if (*v63 == 779775075 && *(unsigned char *)(v14 + 30) == 105)
        {
          if (*((void *)this + 12) == 1)
          {
            int v68 = 52;
            goto LABEL_436;
          }
        }
        else
        {
          std::string::size_type v64 = 5;
        }
        v583 = a2;
        v1043.__r_.__value_.__r.__words[0] = v14 + 26;
        v1043.__r_.__value_.__l.__size_ = v64;
        LOWORD(v1043.__r_.__value_.__r.__words[2]) = 0;
        if (*v63 == 779313761 && *(unsigned char *)(v14 + 30) == 105) {
LABEL_914:
        }
          LOWORD(v1043.__r_.__value_.__r.__words[2]) = 257;
      }
      else
      {
        if (v15 == 16)
        {
          BOOL v65 = *v63 == 1986359906 && *(_WORD *)(v14 + 30) == 12851;
          if (v65 || (*v63 == 1986359906 ? (BOOL v66 = *(unsigned __int16 *)(v14 + 30) == 13366) : (BOOL v66 = 0), v66))
          {
            int v68 = 8;
          }
          else
          {
            if (*v63 != 1668312944 || *(_WORD *)(v14 + 30) != 26926)
            {
              v583 = a2;
              goto LABEL_1106;
            }
            int v68 = 53;
          }
          if (*((void *)this + 12) != 1)
          {
            v583 = (llvm::Function *)v2;
LABEL_1106:
            v1043.__r_.__value_.__r.__words[0] = v14 + 26;
            v1043.__r_.__value_.__l.__size_ = 6;
            LOWORD(v1043.__r_.__value_.__r.__words[2]) = 0;
            if (memcmp(v63, "abs.ll", v64)) {
              goto LABEL_1107;
            }
            goto LABEL_914;
          }
LABEL_436:
          uint64_t v207 = (uint64_t **)*((void *)this + 5);
          v1043.__r_.__value_.__r.__words[0] = **(void **)(*((void *)this + 3) + 16);
          uint64_t v18 = 1;
          goto LABEL_774;
        }
        v583 = a2;
        v1043.__r_.__value_.__r.__words[0] = v14 + 26;
        v1043.__r_.__value_.__l.__size_ = v15 - 10;
        LOWORD(v1043.__r_.__value_.__r.__words[2]) = 0;
      }
LABEL_1107:
      uint64_t v584 = sub_1CD5A6908((uint64_t)&v1043, "clz.ll", 6, "popc.ll", 7, "h2f", 3, 1);
      uint64_t v586 = sub_1CC53101C(v584, "max.i", 5, "max.ll", 6, "max.ui", 6, v585, "max.ull", 7, 1);
      uint64_t v588 = sub_1CC53101C(v586, "min.i", 5, "min.ll", 6, "min.ui", 6, v587, "min.ull", 7, 1);
      uint64_t v589 = sub_1CD5A697C(v588, "atomic.load.add.f32.p", 0x15uLL);
      uint64_t v590 = sub_1CD5A697C(v589, "atomic.load.add.f64.p", 0x15uLL);
      unint64_t v2 = v583;
      if (*(unsigned char *)(v590 + 17) && *(unsigned char *)(v590 + 16))
      {
LABEL_32:
        *unint64_t v2 = 0;
        return 1;
      }
      goto LABEL_1320;
    case 'o':
      if (v22 < 0xB) {
        goto LABEL_1320;
      }
      if (*(void *)v21 != 0x69737463656A626FLL || *(void *)(v14 + 24) != 0x2E657A6973746365) {
        goto LABEL_1320;
      }
      long long v1046 = 0uLL;
      *(void *)&long long v1046 = **(void **)(*((void *)this + 3) + 16);
      if (*((unsigned char *)this + 18)) {
        llvm::Function::BuildLazyArguments(this);
      }
      uint64_t v70 = *((void *)this + 12);
      *((void *)&v1046 + 1) = **((void **)this + 11);
      if ((v70 & 0xFFFFFFFFFFFFFFFELL) == 2) {
        goto LABEL_678;
      }
      if ((*((unsigned char *)this + 23) & 0x10) != 0)
      {
        uint64_t v142 = ***(void ***)this;
        uint64_t v143 = *(void *)(v142 + 152);
        uint64_t v144 = *(unsigned int *)(v142 + 168);
        if (v144)
        {
          LODWORD(v145) = (v144 - 1) & (v8 ^ (this >> 9));
          uint64_t v146 = v143 + 16 * v145;
          uint64_t v147 = *(llvm::Function **)v146;
          if (*(llvm::Function **)v146 != this)
          {
            int v148 = 1;
            do
            {
              if (v147 == (llvm::Function *)-4096) {
                goto LABEL_664;
              }
              int v149 = v145 + v148++;
              uint64_t v145 = v149 & (v144 - 1);
              uint64_t v147 = *(llvm::Function **)(v143 + 16 * v145);
            }
            while (v147 != this);
            uint64_t v146 = v143 + 16 * v145;
          }
        }
        else
        {
LABEL_664:
          uint64_t v146 = v143 + 16 * v144;
        }
        v344 = v2;
        v345 = *(void **)(v146 + 8);
        size_t v348 = *v345;
        v347 = (char *)(v345 + 2);
        size_t v346 = v348;
        goto LABEL_666;
      }
      v344 = v2;
      size_t v346 = 0;
      v347 = &byte_1CFBCE98E;
LABEL_666:
      sub_1CC5B8334(236, (uint64_t)&v1046, 2, *((uint64_t ***)this + 5), 0, &v1043);
      int v349 = SHIBYTE(v1043.__r_.__value_.__r.__words[2]);
      v350 = (void *)v1043.__r_.__value_.__r.__words[0];
      if ((v1043.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        a2 = (llvm::Function *)&v1043;
      }
      else {
        a2 = (llvm::Function *)v1043.__r_.__value_.__r.__words[0];
      }
      std::string::size_type v351 = *((unsigned char *)&v1043.__r_.__value_.__s + 23) & 0x7F;
      if ((v1043.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v351 = v1043.__r_.__value_.__l.__size_;
      }
      if (v346 == v351)
      {
        unint64_t v2 = v344;
        if (v346) {
          LODWORD(v346) = memcmp(v347, a2, v346) != 0;
        }
      }
      else
      {
        LODWORD(v346) = 1;
        unint64_t v2 = v344;
      }
      if (v349 < 0) {
        operator delete(v350);
      }
      if (!v346) {
        goto LABEL_1320;
      }
LABEL_678:
      if ((*((unsigned char *)this + 23) & 0x10) != 0)
      {
        uint64_t v352 = ***(void ***)this;
        uint64_t v353 = *(void *)(v352 + 152);
        uint64_t v354 = *(unsigned int *)(v352 + 168);
        if (v354)
        {
          LODWORD(v355) = (v354 - 1) & (v8 ^ (this >> 9));
          uint64_t v356 = v353 + 16 * v355;
          v357 = *(llvm::Function **)v356;
          if (*(llvm::Function **)v356 != this)
          {
            int v358 = 1;
            do
            {
              if (v357 == (llvm::Function *)-4096) {
                goto LABEL_685;
              }
              int v359 = v355 + v358++;
              uint64_t v355 = v359 & (v354 - 1);
              v357 = *(llvm::Function **)(v353 + 16 * v355);
            }
            while (v357 != this);
            uint64_t v356 = v353 + 16 * v355;
          }
        }
        else
        {
LABEL_685:
          uint64_t v356 = v353 + 16 * v354;
        }
        v360 = *(void **)(v356 + 8);
        std::string::size_type v363 = *v360;
        v361 = (char *)(v360 + 2);
        std::string::size_type v362 = v363;
        goto LABEL_687;
      }
      std::string::size_type v362 = 0;
      v361 = &byte_1CFBCE98E;
LABEL_687:
      __int16 v1045 = 773;
      v1043.__r_.__value_.__r.__words[0] = (std::string::size_type)v361;
      v1043.__r_.__value_.__l.__size_ = v362;
      v1043.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
      llvm::Value::setNameImpl(this, (const char **)&v1043.__r_.__value_.__l.__data_);
      if (!this || *((unsigned char *)this + 16)) {
        goto LABEL_689;
      }
      if ((*((unsigned char *)this + 23) & 0x10) == 0) {
        goto LABEL_1472;
      }
      uint64_t v638 = ***(void ***)this;
      uint64_t v639 = *(void *)(v638 + 152);
      uint64_t v640 = *(unsigned int *)(v638 + 168);
      if (!v640) {
        goto LABEL_1464;
      }
      LODWORD(v641) = (v640 - 1) & (v8 ^ (this >> 9));
      uint64_t v642 = v639 + 16 * v641;
      v643 = *(llvm::Function **)v642;
      if (*(llvm::Function **)v642 == this) {
        goto LABEL_1465;
      }
      int v644 = 1;
      while (v643 != (llvm::Function *)-4096)
      {
        int v645 = v641 + v644++;
        uint64_t v641 = v645 & (v640 - 1);
        v643 = *(llvm::Function **)(v639 + 16 * v641);
        if (v643 == this)
        {
          uint64_t v642 = v639 + 16 * v641;
          goto LABEL_1465;
        }
      }
LABEL_1464:
      uint64_t v642 = v639 + 16 * v640;
LABEL_1465:
      v845 = *(void **)(v642 + 8);
      unint64_t v848 = *v845;
      v846 = v845 + 2;
      unint64_t v847 = v848;
      if (v848 >= 5 && (*(_DWORD *)v846 == *(_DWORD *)"llvm." ? (BOOL v849 = v846[4] == aLlvm_1[4]) : (BOOL v849 = 0), v849))
      {
        *((_DWORD *)this + 8) |= 0x2000u;
        int v850 = llvm::Function::lookupIntrinsicID(v846, v847);
      }
      else
      {
LABEL_1472:
        int v850 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
      }
      *((_DWORD *)this + 9) = v850;
LABEL_689:
      uint64_t v49 = (uint64_t **)*((void *)this + 5);
      int v47 = 236;
      uint64_t v48 = (std::string *)&v1046;
      uint64_t v235 = 2;
      goto LABEL_1083;
    case 'p':
      if (v15 != 13)
      {
        if (v22 >= 0xF)
        {
          BOOL v90 = *(void *)v21 == 0x6F6E6E612E727470 && *(void *)(v14 + 28) == 0x2E6E6F697461746FLL;
          if (v90 && *((void *)this + 12) == 4)
          {
            if (v7)
            {
              LODWORD(v91) = (v7 - 1) & (v8 ^ (this >> 9));
              uint64_t v92 = v6 + 16 * v91;
              uint64_t v93 = *(llvm::Function **)v92;
              if (*(llvm::Function **)v92 != this)
              {
                int v94 = 1;
                do
                {
                  if (v93 == (llvm::Function *)-4096) {
                    goto LABEL_768;
                  }
                  int v95 = v91 + v94++;
                  uint64_t v91 = v95 & (v7 - 1);
                  uint64_t v93 = *(llvm::Function **)(v6 + 16 * v91);
                }
                while (v93 != this);
                uint64_t v92 = v6 + 16 * v91;
              }
            }
            else
            {
LABEL_768:
              uint64_t v92 = v6 + 16 * v7;
            }
            v402 = *(std::string::size_type **)(v92 + 8);
            std::string::size_type v403 = *v402;
            __int16 v1045 = 773;
            v1043.__r_.__value_.__r.__words[0] = (std::string::size_type)(v402 + 2);
            v1043.__r_.__value_.__l.__size_ = v403;
            v1043.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
            llvm::Value::setNameImpl(this, (const char **)&v1043.__r_.__value_.__l.__data_);
            if (this && !*((unsigned char *)this + 16))
            {
              if ((*((unsigned char *)this + 23) & 0x10) == 0) {
                goto LABEL_1618;
              }
              uint64_t v809 = ***(void ***)this;
              uint64_t v810 = *(void *)(v809 + 152);
              uint64_t v811 = *(unsigned int *)(v809 + 168);
              if (v811)
              {
                LODWORD(v812) = (v811 - 1) & (v8 ^ (this >> 9));
                uint64_t v813 = v810 + 16 * v812;
                v814 = *(llvm::Function **)v813;
                if (*(llvm::Function **)v813 != this)
                {
                  int v815 = 1;
                  do
                  {
                    if (v814 == (llvm::Function *)-4096) {
                      goto LABEL_1610;
                    }
                    int v816 = v812 + v815++;
                    uint64_t v812 = v816 & (v811 - 1);
                    v814 = *(llvm::Function **)(v810 + 16 * v812);
                  }
                  while (v814 != this);
                  uint64_t v813 = v810 + 16 * v812;
                }
              }
              else
              {
LABEL_1610:
                uint64_t v813 = v810 + 16 * v811;
              }
              v945 = *(void **)(v813 + 8);
              unint64_t v948 = *v945;
              v946 = v945 + 2;
              unint64_t v947 = v948;
              if (v948 >= 5
                && (*(_DWORD *)v946 == *(_DWORD *)"llvm." ? (BOOL v949 = v946[4] == aLlvm_1[4]) : (BOOL v949 = 0), v949))
              {
                *((_DWORD *)this + 8) |= 0x2000u;
                int v950 = llvm::Function::lookupIntrinsicID(v946, v947);
              }
              else
              {
LABEL_1618:
                int v950 = 0;
                *((_DWORD *)this + 8) &= ~0x2000u;
              }
              *((_DWORD *)this + 9) = v950;
            }
            v404 = (uint64_t **)*((void *)this + 5);
            if (*((_WORD *)this + 9)) {
              llvm::Function::BuildLazyArguments(this);
            }
            v1043.__r_.__value_.__r.__words[0] = **((void **)this + 11);
            uint64_t v18 = 1;
            uint64_t v207 = v404;
            int v68 = 245;
            goto LABEL_774;
          }
        }
        else if (v22 < 8)
        {
          goto LABEL_1320;
        }
        goto LABEL_535;
      }
      if (*(void *)v21 != 0x6863746566657270) {
        goto LABEL_535;
      }
      *(void *)&long long v1046 = 0;
      if (*((_WORD *)this + 9))
      {
        llvm::Function::BuildLazyArguments(this);
        int v133 = *((_DWORD *)this + 5);
        *(void *)&long long v1046 = **((void **)this + 11);
        if ((v133 & 0x10000000) == 0)
        {
          size_t v265 = 0;
          v264 = &byte_1CFBCE98E;
LABEL_526:
          BOOL v267 = 1;
          sub_1CC5B8334(240, (uint64_t)&v1046, 1, *((uint64_t ***)this + 5), 0, &v1043);
          int v268 = SHIBYTE(v1043.__r_.__value_.__r.__words[2]);
          v269 = (void *)v1043.__r_.__value_.__r.__words[0];
          if ((v1043.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            a2 = (llvm::Function *)&v1043;
          }
          else {
            a2 = (llvm::Function *)v1043.__r_.__value_.__r.__words[0];
          }
          std::string::size_type v270 = *((unsigned char *)&v1043.__r_.__value_.__s + 23) & 0x7F;
          if ((v1043.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v270 = v1043.__r_.__value_.__l.__size_;
          }
          if (v265 == v270)
          {
            if (v265)
            {
              BOOL v267 = memcmp(v264, a2, v265) != 0;
              if (v268 < 0) {
                goto LABEL_534;
              }
LABEL_540:
              if (!v267) {
                goto LABEL_535;
              }
              goto LABEL_541;
            }
            BOOL v267 = 0;
            if ((SHIBYTE(v1043.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_540;
            }
          }
          else if ((SHIBYTE(v1043.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_540;
          }
LABEL_534:
          operator delete(v269);
          if (!v267)
          {
LABEL_535:
            if (*(void *)v21 == 0x2E68747561727470)
            {
              uint64_t v271 = 0;
              v272 = (void *)(v21 + 8);
              switch(v22)
              {
                case 0x10uLL:
                  uint64_t v271 = 0x1000000F6;
                  if (*v272 != 0x3436692E68747561)
                  {
                    uint64_t v273 = 0x1000000F9;
                    BOOL v274 = *v272 == 0x3436692E6E676973;
                    goto LABEL_561;
                  }
                  break;
                case 0x11uLL:
                  if (*v272 == 0x36692E7069727473 && *(unsigned char *)(v21 + 16) == 52)
                  {
                    uint64_t v271 = 0x1000000FBLL;
                  }
                  else if (*(void *)(v21 + 8) ^ 0x36692E646E656C62 | *(unsigned __int8 *)(v21 + 16) ^ 0x34)
                  {
                    uint64_t v271 = 0;
                  }
                  else
                  {
                    uint64_t v271 = 0x1000000F7;
                  }
                  break;
                case 0x12uLL:
                  if (*v272 == 0x692E6E6769736572 && *(_WORD *)(v21 + 16) == 13366) {
                    uint64_t v271 = 0x1000000F8;
                  }
                  else {
                    uint64_t v271 = 0;
                  }
                  break;
                case 0x18uLL:
                  uint64_t v273 = 0x1000000FALL;
                  BOOL v274 = (*(void *)(v21 + 8) ^ 0x6E65672E6E676973 | *(void *)(v21 + 16) ^ 0x3436692E63697265) == 0;
LABEL_561:
                  if (v274) {
                    uint64_t v271 = v273;
                  }
                  else {
                    uint64_t v271 = 0;
                  }
                  break;
                default:
                  break;
              }
              if ((v271 & 0x300000000) != 0 && v271)
              {
                if ((*((unsigned char *)this + 23) & 0x10) != 0)
                {
                  uint64_t v285 = ***(void ***)this;
                  uint64_t v286 = *(void *)(v285 + 152);
                  uint64_t v287 = *(unsigned int *)(v285 + 168);
                  if (v287)
                  {
                    LODWORD(v288) = (v287 - 1) & (v8 ^ (this >> 9));
                    uint64_t v289 = v286 + 16 * v288;
                    v290 = *(llvm::Function **)v289;
                    if (*(llvm::Function **)v289 != this)
                    {
                      int v291 = 1;
                      do
                      {
                        if (v290 == (llvm::Function *)-4096) {
                          goto LABEL_597;
                        }
                        int v292 = v288 + v291++;
                        uint64_t v288 = v292 & (v287 - 1);
                        v290 = *(llvm::Function **)(v286 + 16 * v288);
                      }
                      while (v290 != this);
                      uint64_t v289 = v286 + 16 * v288;
                    }
                  }
                  else
                  {
LABEL_597:
                    uint64_t v289 = v286 + 16 * v287;
                  }
                  v299 = *(void **)(v289 + 8);
                  std::string::size_type v302 = *v299;
                  v300 = (char *)(v299 + 2);
                  std::string::size_type v301 = v302;
                }
                else
                {
                  std::string::size_type v301 = 0;
                  v300 = &byte_1CFBCE98E;
                }
                __int16 v1045 = 773;
                v1043.__r_.__value_.__r.__words[0] = (std::string::size_type)v300;
                v1043.__r_.__value_.__l.__size_ = v301;
                v1043.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
                llvm::Value::setNameImpl(this, (const char **)&v1043.__r_.__value_.__l.__data_);
                if (this && !*((unsigned char *)this + 16))
                {
                  if ((*((unsigned char *)this + 23) & 0x10) == 0) {
                    goto LABEL_1482;
                  }
                  uint64_t v646 = ***(void ***)this;
                  uint64_t v647 = *(void *)(v646 + 152);
                  uint64_t v648 = *(unsigned int *)(v646 + 168);
                  if (v648)
                  {
                    LODWORD(v649) = (v648 - 1) & (v8 ^ (this >> 9));
                    uint64_t v650 = v647 + 16 * v649;
                    v651 = *(llvm::Function **)v650;
                    if (*(llvm::Function **)v650 != this)
                    {
                      int v652 = 1;
                      do
                      {
                        if (v651 == (llvm::Function *)-4096) {
                          goto LABEL_1474;
                        }
                        int v653 = v649 + v652++;
                        uint64_t v649 = v653 & (v648 - 1);
                        v651 = *(llvm::Function **)(v647 + 16 * v649);
                      }
                      while (v651 != this);
                      uint64_t v650 = v647 + 16 * v649;
                    }
                  }
                  else
                  {
LABEL_1474:
                    uint64_t v650 = v647 + 16 * v648;
                  }
                  v851 = *(void **)(v650 + 8);
                  unint64_t v854 = *v851;
                  v852 = v851 + 2;
                  unint64_t v853 = v854;
                  if (v854 >= 5
                    && (*(_DWORD *)v852 == *(_DWORD *)"llvm." ? (BOOL v855 = v852[4] == aLlvm_1[4]) : (BOOL v855 = 0), v855))
                  {
                    *((_DWORD *)this + 8) |= 0x2000u;
                    int v856 = llvm::Function::lookupIntrinsicID(v852, v853);
                  }
                  else
                  {
LABEL_1482:
                    int v856 = 0;
                    *((_DWORD *)this + 8) &= ~0x2000u;
                  }
                  *((_DWORD *)this + 9) = v856;
                }
                v303 = (uint64_t **)*((void *)this + 5);
                llvm::Intrinsic::getType(*v303, v271, 0, 0);
                v304 = off_1E6830B58[v271];
                if (v304) {
                  size_t v305 = strlen(off_1E6830B58[v271]);
                }
                else {
                  size_t v305 = 0;
                }
                v306 = *v303;
                int v307 = v271;
                goto LABEL_604;
              }
            }
            goto LABEL_1320;
          }
LABEL_541:
          if ((*((unsigned char *)this + 23) & 0x10) == 0)
          {
            std::string::size_type v342 = 0;
            v341 = &byte_1CFBCE98E;
            goto LABEL_661;
          }
          uint64_t v275 = ***(void ***)this;
          uint64_t v276 = *(void *)(v275 + 152);
          uint64_t v277 = *(unsigned int *)(v275 + 168);
          if (v277)
          {
            LODWORD(v278) = (v277 - 1) & (v8 ^ (this >> 9));
            uint64_t v279 = v276 + 16 * v278;
            v280 = *(llvm::Function **)v279;
            if (*(llvm::Function **)v279 == this)
            {
LABEL_660:
              v340 = *(void **)(v279 + 8);
              std::string::size_type v343 = *v340;
              v341 = (char *)(v340 + 2);
              std::string::size_type v342 = v343;
LABEL_661:
              __int16 v1045 = 773;
              v1043.__r_.__value_.__r.__words[0] = (std::string::size_type)v341;
              v1043.__r_.__value_.__l.__size_ = v342;
              v1043.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
              llvm::Value::setNameImpl(this, (const char **)&v1043.__r_.__value_.__l.__data_);
              if (!this || *((unsigned char *)this + 16))
              {
LABEL_663:
                uint64_t v49 = (uint64_t **)*((void *)this + 5);
                uint64_t v48 = (std::string *)&v1046;
                int v47 = 240;
LABEL_488:
                uint64_t v235 = 1;
                goto LABEL_1083;
              }
              if ((*((unsigned char *)this + 23) & 0x10) == 0) {
                goto LABEL_1581;
              }
              uint64_t v710 = ***(void ***)this;
              uint64_t v711 = *(void *)(v710 + 152);
              uint64_t v712 = *(unsigned int *)(v710 + 168);
              if (v712)
              {
                LODWORD(v713) = (v712 - 1) & (v8 ^ (this >> 9));
                uint64_t v714 = v711 + 16 * v713;
                v715 = *(llvm::Function **)v714;
                if (*(llvm::Function **)v714 == this)
                {
LABEL_1574:
                  v919 = *(void **)(v714 + 8);
                  unint64_t v922 = *v919;
                  v920 = v919 + 2;
                  unint64_t v921 = v922;
                  if (v922 >= 5 && *(_DWORD *)v920 == *(_DWORD *)"llvm." && v920[4] == aLlvm_1[4])
                  {
                    *((_DWORD *)this + 8) |= 0x2000u;
                    int v924 = llvm::Function::lookupIntrinsicID(v920, v921);
LABEL_1582:
                    *((_DWORD *)this + 9) = v924;
                    goto LABEL_663;
                  }
LABEL_1581:
                  int v924 = 0;
                  *((_DWORD *)this + 8) &= ~0x2000u;
                  goto LABEL_1582;
                }
                int v716 = 1;
                while (v715 != (llvm::Function *)-4096)
                {
                  int v717 = v713 + v716++;
                  uint64_t v713 = v717 & (v712 - 1);
                  v715 = *(llvm::Function **)(v711 + 16 * v713);
                  if (v715 == this)
                  {
                    uint64_t v714 = v711 + 16 * v713;
                    goto LABEL_1574;
                  }
                }
              }
              uint64_t v714 = v711 + 16 * v712;
              goto LABEL_1574;
            }
            int v281 = 1;
            while (v280 != (llvm::Function *)-4096)
            {
              int v282 = v278 + v281++;
              uint64_t v278 = v282 & (v277 - 1);
              v280 = *(llvm::Function **)(v276 + 16 * v278);
              if (v280 == this)
              {
                uint64_t v279 = v276 + 16 * v278;
                goto LABEL_660;
              }
            }
          }
          uint64_t v279 = v276 + 16 * v277;
          goto LABEL_660;
        }
      }
      else
      {
        *(void *)&long long v1046 = **((void **)this + 11);
      }
      uint64_t v134 = ***(void ***)this;
      uint64_t v135 = *(void *)(v134 + 152);
      uint64_t v136 = *(unsigned int *)(v134 + 168);
      if (!v136) {
        goto LABEL_524;
      }
      LODWORD(v137) = (v136 - 1) & (v8 ^ (this >> 9));
      uint64_t v138 = v135 + 16 * v137;
      int v139 = *(llvm::Function **)v138;
      if (*(llvm::Function **)v138 != this)
      {
        int v140 = 1;
        while (v139 != (llvm::Function *)-4096)
        {
          int v141 = v137 + v140++;
          uint64_t v137 = v141 & (v136 - 1);
          int v139 = *(llvm::Function **)(v135 + 16 * v137);
          if (v139 == this)
          {
            uint64_t v138 = v135 + 16 * v137;
            goto LABEL_525;
          }
        }
LABEL_524:
        uint64_t v138 = v135 + 16 * v136;
      }
LABEL_525:
      v263 = *(void **)(v138 + 8);
      size_t v266 = *v263;
      v264 = (char *)(v263 + 2);
      size_t v265 = v266;
      goto LABEL_526;
    case 's':
      if (v15 != 24) {
        goto LABEL_1320;
      }
      BOOL v23 = *(void *)v21 == 0x6F72706B63617473 && *(void *)(v14 + 29) == 0x6863726F74636574;
      if (!v23 || *(void *)(v14 + 32) != 0x6B63656863726F74) {
        goto LABEL_1320;
      }
      goto LABEL_32;
    case 'v':
      if (v15 != 19) {
        goto LABEL_1320;
      }
      BOOL v28 = *(void *)v21 == 0x6F6E6E612E726176 && *(void *)(v14 + 27) == 0x6E6F697461746F6ELL;
      if (!v28 || *((void *)this + 12) != 4) {
        goto LABEL_1320;
      }
      if (!v7) {
        goto LABEL_621;
      }
      LODWORD(v29) = (v7 - 1) & (v8 ^ (this >> 9));
      uint64_t v30 = v6 + 16 * v29;
      BOOL v31 = *(llvm::Function **)v30;
      if (*(llvm::Function **)v30 == this) {
        goto LABEL_622;
      }
      int v32 = 1;
      while (v31 != (llvm::Function *)-4096)
      {
        int v33 = v29 + v32++;
        uint64_t v29 = v33 & (v7 - 1);
        BOOL v31 = *(llvm::Function **)(v6 + 16 * v29);
        if (v31 == this)
        {
          uint64_t v30 = v6 + 16 * v29;
          goto LABEL_622;
        }
      }
LABEL_621:
      uint64_t v30 = v6 + 16 * v7;
LABEL_622:
      v317 = *(std::string::size_type **)(v30 + 8);
      std::string::size_type v318 = *v317;
      __int16 v1045 = 773;
      v1043.__r_.__value_.__r.__words[0] = (std::string::size_type)(v317 + 2);
      v1043.__r_.__value_.__l.__size_ = v318;
      v1043.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
      llvm::Value::setNameImpl(this, (const char **)&v1043.__r_.__value_.__l.__data_);
      if (!this || *((unsigned char *)this + 16)) {
        goto LABEL_624;
      }
      if ((*((unsigned char *)this + 23) & 0x10) == 0) {
        goto LABEL_1541;
      }
      uint64_t v678 = ***(void ***)this;
      uint64_t v679 = *(void *)(v678 + 152);
      uint64_t v680 = *(unsigned int *)(v678 + 168);
      if (!v680) {
        goto LABEL_1533;
      }
      LODWORD(v681) = (v680 - 1) & (v8 ^ (this >> 9));
      uint64_t v682 = v679 + 16 * v681;
      v683 = *(llvm::Function **)v682;
      if (*(llvm::Function **)v682 != this)
      {
        int v684 = 1;
        while (v683 != (llvm::Function *)-4096)
        {
          int v685 = v681 + v684++;
          uint64_t v681 = v685 & (v680 - 1);
          v683 = *(llvm::Function **)(v679 + 16 * v681);
          if (v683 == this)
          {
            uint64_t v682 = v679 + 16 * v681;
            goto LABEL_1534;
          }
        }
LABEL_1533:
        uint64_t v682 = v679 + 16 * v680;
      }
LABEL_1534:
      v895 = *(void **)(v682 + 8);
      unint64_t v898 = *v895;
      v896 = v895 + 2;
      unint64_t v897 = v898;
      if (v898 >= 5 && (*(_DWORD *)v896 == *(_DWORD *)"llvm." ? (BOOL v899 = v896[4] == aLlvm_1[4]) : (BOOL v899 = 0), v899))
      {
        *((_DWORD *)this + 8) |= 0x2000u;
        int v900 = llvm::Function::lookupIntrinsicID(v896, v897);
      }
      else
      {
LABEL_1541:
        int v900 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
      }
      *((_DWORD *)this + 9) = v900;
LABEL_624:
      v105 = (uint64_t **)*((void *)this + 5);
      llvm::Intrinsic::getType(*v105, 316, 0, 0);
      Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v105, 316, 0, 0);
      unsigned int v107 = "llvm.var.annotation";
LABEL_625:
      uint64_t v308 = (uint64_t)v105;
      uint64_t v309 = 19;
      goto LABEL_630;
    case 'x':
      if (*(_DWORD *)v21 != 775305336) {
        goto LABEL_1320;
      }
      uint64_t v25 = (_DWORD *)(v14 + 25);
      if (sub_1CC53110C(v14 + 25, v16)) {
        goto LABEL_32;
      }
      if (v16 == 6)
      {
        BOOL v96 = *v25 == 1937007730 && *(_WORD *)(v14 + 29) == 28771;
        if (v96 && *(_DWORD *)(*((void *)this + 3) + 12) != 1)
        {
          if (v7)
          {
            LODWORD(v97) = (v7 - 1) & (v8 ^ (this >> 9));
            uint64_t v98 = v6 + 16 * v97;
            unsigned int v99 = *(llvm::Function **)v98;
            if (*(llvm::Function **)v98 != this)
            {
              int v100 = 1;
              do
              {
                if (v99 == (llvm::Function *)-4096) {
                  goto LABEL_994;
                }
                int v101 = v97 + v100++;
                uint64_t v97 = v101 & (v7 - 1);
                unsigned int v99 = *(llvm::Function **)(v6 + 16 * v97);
              }
              while (v99 != this);
              uint64_t v98 = v6 + 16 * v97;
            }
          }
          else
          {
LABEL_994:
            uint64_t v98 = v6 + 16 * v7;
          }
          v510 = *(std::string::size_type **)(v98 + 8);
          std::string::size_type v511 = *v510;
          __int16 v1045 = 773;
          v1043.__r_.__value_.__r.__words[0] = (std::string::size_type)(v510 + 2);
          v1043.__r_.__value_.__l.__size_ = v511;
          v1043.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
          llvm::Value::setNameImpl(this, (const char **)&v1043.__r_.__value_.__l.__data_);
          if (this && !*((unsigned char *)this + 16))
          {
            if ((*((unsigned char *)this + 23) & 0x10) == 0) {
              goto LABEL_1663;
            }
            uint64_t v887 = ***(void ***)this;
            uint64_t v888 = *(void *)(v887 + 152);
            uint64_t v889 = *(unsigned int *)(v887 + 168);
            if (v889)
            {
              LODWORD(v890) = (v889 - 1) & (v8 ^ (this >> 9));
              uint64_t v891 = v888 + 16 * v890;
              v892 = *(llvm::Function **)v891;
              if (*(llvm::Function **)v891 != this)
              {
                int v893 = 1;
                do
                {
                  if (v892 == (llvm::Function *)-4096) {
                    goto LABEL_1655;
                  }
                  int v894 = v890 + v893++;
                  uint64_t v890 = v894 & (v889 - 1);
                  v892 = *(llvm::Function **)(v888 + 16 * v890);
                }
                while (v892 != this);
                uint64_t v891 = v888 + 16 * v890;
              }
            }
            else
            {
LABEL_1655:
              uint64_t v891 = v888 + 16 * v889;
            }
            v979 = *(void **)(v891 + 8);
            unint64_t v982 = *v979;
            v980 = v979 + 2;
            unint64_t v981 = v982;
            if (v982 >= 5
              && (*(_DWORD *)v980 == *(_DWORD *)"llvm." ? (BOOL v983 = v980[4] == aLlvm_1[4]) : (BOOL v983 = 0), v983))
            {
              *((_DWORD *)this + 8) |= 0x2000u;
              int v984 = llvm::Function::lookupIntrinsicID(v980, v981);
            }
            else
            {
LABEL_1663:
              int v984 = 0;
              *((_DWORD *)this + 8) &= ~0x2000u;
            }
            *((_DWORD *)this + 9) = v984;
          }
          v512 = (uint64_t **)*((void *)this + 5);
          llvm::Intrinsic::getType(*v512, 12167, 0, 0);
          Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v512, 12167, 0, 0);
          unsigned int v107 = "llvm.x86.rdtscp";
          uint64_t v308 = (uint64_t)v512;
          uint64_t v309 = 15;
          goto LABEL_630;
        }
        goto LABEL_1320;
      }
      if (v16 < 0xB)
      {
        if (v16 != 10) {
          goto LABEL_1320;
        }
        if (*(void *)v25 == 0x70642E3134657373 && *(_WORD *)(v14 + 33) == 25712)
        {
          int v122 = this;
          int v123 = 12292;
        }
        else
        {
          if (*(void *)v25 != 0x70642E3134657373 || *(_WORD *)(v14 + 33) != 29552) {
            goto LABEL_1320;
          }
          int v122 = this;
          int v123 = 12293;
        }
LABEL_1102:
        if (!sub_1CC535318(v122, v123, v2)) {
          goto LABEL_1320;
        }
        return 1;
      }
      if (*(void *)v25 != 0x74702E3134657373 || *(void *)(v14 + 28) != 0x74736574702E3134)
      {
        if (v15 <= 22)
        {
          if (v15 == 21) {
            goto LABEL_475;
          }
          goto LABEL_639;
        }
        if (v15 != 31)
        {
          if (v15 != 23)
          {
LABEL_822:
            if (v16 < 0xC) {
              goto LABEL_1320;
            }
            goto LABEL_960;
          }
LABEL_956:
          if (*(void *)v25 == 0x6E692E3134657373 && *(void *)(v14 + 31) == 0x7370747265736E69)
          {
            int v122 = this;
            int v123 = 12294;
            goto LABEL_1102;
          }
          goto LABEL_960;
        }
LABEL_778:
        if (*(void *)v25 == 0x6D2E323135787661
          && *(void *)(v14 + 33) == 0x2E706D632E6B7361
          && *(void *)(v14 + 39) == 0x3832312E64702E70)
        {
          v417 = this;
          int v418 = 11368;
        }
        else if (*(void *)v25 == 0x6D2E323135787661 {
               && *(void *)(v14 + 33) == 0x2E706D632E6B7361
        }
               && *(void *)(v14 + 39) == 0x3635322E64702E70)
        {
          v417 = this;
          int v418 = 11369;
        }
        else if (*(void *)v25 == 0x6D2E323135787661 {
               && *(void *)(v14 + 33) == 0x2E706D632E6B7361
        }
               && *(void *)(v14 + 39) == 0x3231352E64702E70)
        {
          v417 = this;
          int v418 = 11370;
        }
        else if (*(void *)v25 == 0x6D2E323135787661 {
               && *(void *)(v14 + 33) == 0x2E706D632E6B7361
        }
               && *(void *)(v14 + 39) == 0x3832312E73702E70)
        {
          v417 = this;
          int v418 = 11371;
        }
        else if (*(void *)v25 == 0x6D2E323135787661 {
               && *(void *)(v14 + 33) == 0x2E706D632E6B7361
        }
               && *(void *)(v14 + 39) == 0x3635322E73702E70)
        {
          v417 = this;
          int v418 = 11372;
        }
        else
        {
          if (*(void *)v25 != 0x6D2E323135787661
            || *(void *)(v14 + 33) != 0x2E706D632E6B7361
            || *(void *)(v14 + 39) != 0x3231352E73702E70)
          {
LABEL_960:
            int v328 = 0;
            goto LABEL_961;
          }
          v417 = this;
          int v418 = 11373;
        }
        if (sub_1CC535588(v417, v418, v2)) {
          return 1;
        }
        goto LABEL_1320;
      }
      if (v15 > 22)
      {
        if (v15 != 23)
        {
          if (v15 != 31) {
            goto LABEL_822;
          }
          goto LABEL_778;
        }
        if (*(_WORD *)(v14 + 36) != 31342 || *(unsigned char *)(v14 + 38) != 99) {
          goto LABEL_956;
        }
        v491 = (uint64_t ***)this;
        int v492 = 12300;
      }
      else
      {
        if (v15 != 21)
        {
LABEL_639:
          if (v15 == 22)
          {
            if (*(void *)v25 == 0x706D2E3134657373 && *(void *)(v14 + 30) == 0x7762646173706D2ELL)
            {
              int v122 = this;
              int v123 = 12295;
              goto LABEL_1102;
            }
            if (*(void *)v25 == 0x702E70642E787661 && *(void *)(v14 + 30) == 0x3635322E73702E70)
            {
              int v122 = this;
              int v123 = 11163;
              goto LABEL_1102;
            }
            int v328 = 1;
LABEL_961:
            BOOL v495 = *(void *)v25 == 0x637266762E706F78 && *(_DWORD *)(v14 + 33) == 1936928378;
            if (v495 && *((void *)this + 12) == 2)
            {
              if (v7)
              {
                LODWORD(v496) = (v7 - 1) & (v8 ^ (this >> 9));
                uint64_t v497 = v6 + 16 * v496;
                v498 = *(llvm::Function **)v497;
                if (*(llvm::Function **)v497 != this)
                {
                  int v499 = 1;
                  do
                  {
                    if (v498 == (llvm::Function *)-4096) {
                      goto LABEL_1300;
                    }
                    int v500 = v496 + v499++;
                    uint64_t v496 = v500 & (v7 - 1);
                    v498 = *(llvm::Function **)(v6 + 16 * v496);
                  }
                  while (v498 != this);
                  uint64_t v497 = v6 + 16 * v496;
                }
              }
              else
              {
LABEL_1300:
                uint64_t v497 = v6 + 16 * v7;
              }
              v718 = *(std::string::size_type **)(v497 + 8);
              std::string::size_type v719 = *v718;
              __int16 v1045 = 773;
              v1043.__r_.__value_.__r.__words[0] = (std::string::size_type)(v718 + 2);
              v1043.__r_.__value_.__l.__size_ = v719;
              v1043.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
              llvm::Value::setNameImpl(this, (const char **)&v1043.__r_.__value_.__l.__data_);
              if (this && !*((unsigned char *)this + 16))
              {
                if ((*((unsigned char *)this + 23) & 0x10) == 0) {
                  goto LABEL_1707;
                }
                uint64_t v971 = ***(void ***)this;
                uint64_t v972 = *(void *)(v971 + 152);
                uint64_t v973 = *(unsigned int *)(v971 + 168);
                if (v973)
                {
                  LODWORD(v974) = (v973 - 1) & (v8 ^ (this >> 9));
                  uint64_t v975 = v972 + 16 * v974;
                  v976 = *(llvm::Function **)v975;
                  if (*(llvm::Function **)v975 != this)
                  {
                    int v977 = 1;
                    do
                    {
                      if (v976 == (llvm::Function *)-4096) {
                        goto LABEL_1699;
                      }
                      int v978 = v974 + v977++;
                      uint64_t v974 = v978 & (v973 - 1);
                      v976 = *(llvm::Function **)(v972 + 16 * v974);
                    }
                    while (v976 != this);
                    uint64_t v975 = v972 + 16 * v974;
                  }
                }
                else
                {
LABEL_1699:
                  uint64_t v975 = v972 + 16 * v973;
                }
                v1013 = *(void **)(v975 + 8);
                unint64_t v1016 = *v1013;
                v1014 = v1013 + 2;
                unint64_t v1015 = v1016;
                if (v1016 >= 5
                  && (*(_DWORD *)v1014 == *(_DWORD *)"llvm." ? (BOOL v1017 = v1014[4] == aLlvm_1[4]) : (BOOL v1017 = 0), v1017))
                {
                  *((_DWORD *)this + 8) |= 0x2000u;
                  int v1018 = llvm::Function::lookupIntrinsicID(v1014, v1015);
                }
                else
                {
LABEL_1707:
                  int v1018 = 0;
                  *((_DWORD *)this + 8) &= ~0x2000u;
                }
                *((_DWORD *)this + 9) = v1018;
              }
              v720 = (uint64_t **)*((void *)this + 5);
              llvm::Intrinsic::getType(*v720, 12415, 0, 0);
              Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v720, 12415, 0, 0);
              unsigned int v107 = "llvm.x86.xop.vfrcz.ss";
              goto LABEL_1388;
            }
            BOOL v501 = *(void *)v25 == 0x637266762E706F78 && *(_DWORD *)(v14 + 33) == 1685270138;
            if (v501 && *((void *)this + 12) == 2)
            {
              if (v7)
              {
                LODWORD(v502) = (v7 - 1) & (v8 ^ (this >> 9));
                uint64_t v503 = v6 + 16 * v502;
                v504 = *(llvm::Function **)v503;
                if (*(llvm::Function **)v503 != this)
                {
                  int v505 = 1;
                  do
                  {
                    if (v504 == (llvm::Function *)-4096) {
                      goto LABEL_1384;
                    }
                    int v506 = v502 + v505++;
                    uint64_t v502 = v506 & (v7 - 1);
                    v504 = *(llvm::Function **)(v6 + 16 * v502);
                  }
                  while (v504 != this);
                  uint64_t v503 = v6 + 16 * v502;
                }
              }
              else
              {
LABEL_1384:
                uint64_t v503 = v6 + 16 * v7;
              }
              v794 = *(std::string::size_type **)(v503 + 8);
              std::string::size_type v795 = *v794;
              __int16 v1045 = 773;
              v1043.__r_.__value_.__r.__words[0] = (std::string::size_type)(v794 + 2);
              v1043.__r_.__value_.__l.__size_ = v795;
              v1043.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
              llvm::Value::setNameImpl(this, (const char **)&v1043.__r_.__value_.__l.__data_);
              if (this && !*((unsigned char *)this + 16))
              {
                if ((*((unsigned char *)this + 23) & 0x10) == 0) {
                  goto LABEL_1717;
                }
                uint64_t v991 = ***(void ***)this;
                uint64_t v992 = *(void *)(v991 + 152);
                uint64_t v993 = *(unsigned int *)(v991 + 168);
                if (v993)
                {
                  LODWORD(v994) = (v993 - 1) & (v8 ^ (this >> 9));
                  uint64_t v995 = v992 + 16 * v994;
                  v996 = *(llvm::Function **)v995;
                  if (*(llvm::Function **)v995 != this)
                  {
                    int v997 = 1;
                    do
                    {
                      if (v996 == (llvm::Function *)-4096) {
                        goto LABEL_1709;
                      }
                      int v998 = v994 + v997++;
                      uint64_t v994 = v998 & (v993 - 1);
                      v996 = *(llvm::Function **)(v992 + 16 * v994);
                    }
                    while (v996 != this);
                    uint64_t v995 = v992 + 16 * v994;
                  }
                }
                else
                {
LABEL_1709:
                  uint64_t v995 = v992 + 16 * v993;
                }
                v1019 = *(void **)(v995 + 8);
                unint64_t v1022 = *v1019;
                v1020 = v1019 + 2;
                unint64_t v1021 = v1022;
                if (v1022 >= 5
                  && (*(_DWORD *)v1020 == *(_DWORD *)"llvm." ? (BOOL v1023 = v1020[4] == aLlvm_1[4]) : (BOOL v1023 = 0), v1023))
                {
                  *((_DWORD *)this + 8) |= 0x2000u;
                  int v1024 = llvm::Function::lookupIntrinsicID(v1020, v1021);
                }
                else
                {
LABEL_1717:
                  int v1024 = 0;
                  *((_DWORD *)this + 8) &= ~0x2000u;
                }
                *((_DWORD *)this + 9) = v1024;
              }
              v720 = (uint64_t **)*((void *)this + 5);
              llvm::Intrinsic::getType(*v720, 12414, 0, 0);
              Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v720, 12414, 0, 0);
              unsigned int v107 = "llvm.x86.xop.vfrcz.sd";
LABEL_1388:
              uint64_t v308 = (uint64_t)v720;
              uint64_t v309 = 21;
              goto LABEL_630;
            }
            if (*(void *)v25 != 0x726570762E706F78 || *(_DWORD *)(v14 + 33) != 845965677)
            {
              if (!v328) {
                goto LABEL_1320;
              }
              goto LABEL_1089;
            }
            uint64_t v508 = *(void *)(*(void *)(*((void *)this + 3) + 16) + 24);
            if ((*(_DWORD *)(v508 + 8) & 0xFE) == 0x12) {
              unsigned int v509 = *(unsigned __int8 *)(**(void **)(v508 + 16) + 8);
            }
            else {
              unsigned int v509 = *(_DWORD *)(v508 + 8);
            }
            if (v509 >= 7)
            {
              if ((v328 & 1) == 0) {
                goto LABEL_1320;
              }
LABEL_1089:
              if (*(void *)v25 == 0x6F6365722E686573 && *(void *)(v14 + 30) == 0x70667265766F6365)
              {
                v577 = (uint64_t **)*((void *)this + 5);
                llvm::Intrinsic::getType(*v577, 64, 0, 0);
                Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v577, 64, 0, 0);
                unsigned int v107 = "llvm.eh.recoverfp";
                uint64_t v308 = (uint64_t)v577;
                uint64_t v309 = 17;
                goto LABEL_630;
              }
              goto LABEL_1320;
            }
            if (v7)
            {
              LODWORD(v578) = (v7 - 1) & (v8 ^ (this >> 9));
              uint64_t v579 = v6 + 16 * v578;
              v580 = *(llvm::Function **)v579;
              if (*(llvm::Function **)v579 == this)
              {
LABEL_1401:
                v802 = *(std::string::size_type **)(v579 + 8);
                std::string::size_type v803 = *v802;
                __int16 v1045 = 773;
                v1043.__r_.__value_.__r.__words[0] = (std::string::size_type)(v802 + 2);
                v1043.__r_.__value_.__l.__size_ = v803;
                v1043.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
                llvm::Value::setNameImpl(this, (const char **)&v1043.__r_.__value_.__l.__data_);
                if (!this || *((unsigned char *)this + 16)) {
                  goto LABEL_1403;
                }
                if ((*((unsigned char *)this + 23) & 0x10) == 0) {
                  goto LABEL_1727;
                }
                uint64_t v999 = ***(void ***)this;
                uint64_t v1000 = *(void *)(v999 + 152);
                uint64_t v1001 = *(unsigned int *)(v999 + 168);
                if (v1001)
                {
                  LODWORD(v1002) = (v1001 - 1) & (v8 ^ (this >> 9));
                  uint64_t v1003 = v1000 + 16 * v1002;
                  v1004 = *(llvm::Function **)v1003;
                  if (*(llvm::Function **)v1003 == this)
                  {
LABEL_1720:
                    v1025 = *(void **)(v1003 + 8);
                    unint64_t v1028 = *v1025;
                    v1026 = v1025 + 2;
                    unint64_t v1027 = v1028;
                    if (v1028 >= 5 && *(_DWORD *)v1026 == *(_DWORD *)"llvm." && v1026[4] == aLlvm_1[4])
                    {
                      *((_DWORD *)this + 8) |= 0x2000u;
                      int v1030 = llvm::Function::lookupIntrinsicID(v1026, v1027);
LABEL_1728:
                      *((_DWORD *)this + 9) = v1030;
LABEL_1403:
                      int v805 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v508);
                      if (v804 == 1) {
                      if ((*(_DWORD *)(v508 + 8) & 0xFE) == 0x12)
                      }
                        uint64_t v508 = **(void **)(v508 + 16);
                      int v806 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v508);
                      if (v806 == 64 && v805 == 128)
                      {
                        int v807 = 12416;
                      }
                      else if (v806 == 32 && v805 == 128)
                      {
                        int v807 = 12418;
                      }
                      else if (v805 == 256 && v806 == 64)
                      {
                        int v807 = 12417;
                      }
                      else
                      {
                        int v807 = 12419;
                      }
                      v303 = (uint64_t **)*((void *)this + 5);
                      llvm::Intrinsic::getType(*v303, v807, 0, 0);
                      v304 = off_1E6830B58[v807];
                      if (v304) {
                        size_t v305 = strlen(off_1E6830B58[v807]);
                      }
                      else {
                        size_t v305 = 0;
                      }
                      v306 = *v303;
                      int v307 = v807;
                      goto LABEL_604;
                    }
LABEL_1727:
                    int v1030 = 0;
                    *((_DWORD *)this + 8) &= ~0x2000u;
                    goto LABEL_1728;
                  }
                  int v1005 = 1;
                  while (v1004 != (llvm::Function *)-4096)
                  {
                    int v1006 = v1002 + v1005++;
                    uint64_t v1002 = v1006 & (v1001 - 1);
                    v1004 = *(llvm::Function **)(v1000 + 16 * v1002);
                    if (v1004 == this)
                    {
                      uint64_t v1003 = v1000 + 16 * v1002;
                      goto LABEL_1720;
                    }
                  }
                }
                uint64_t v1003 = v1000 + 16 * v1001;
                goto LABEL_1720;
              }
              int v581 = 1;
              while (v580 != (llvm::Function *)-4096)
              {
                int v582 = v578 + v581++;
                uint64_t v578 = v582 & (v7 - 1);
                v580 = *(llvm::Function **)(v6 + 16 * v578);
                if (v580 == this)
                {
                  uint64_t v579 = v6 + 16 * v578;
                  goto LABEL_1401;
                }
              }
            }
            uint64_t v579 = v6 + 16 * v7;
            goto LABEL_1401;
          }
          goto LABEL_822;
        }
        int v490 = *(unsigned __int8 *)(v14 + 36);
        if (v490 == 122)
        {
          v491 = (uint64_t ***)this;
          int v492 = 12301;
        }
        else
        {
          if (v490 != 99)
          {
LABEL_475:
            if (*(void *)v25 == 0x73706D2E32787661 && *(_DWORD *)(v14 + 33) == 2002936929)
            {
              int v122 = this;
              int v123 = 11232;
              goto LABEL_1102;
            }
            goto LABEL_960;
          }
          v491 = (uint64_t ***)this;
          int v492 = 12299;
        }
      }
      if (!sub_1CC5350A0(v491, v492, v2)) {
        goto LABEL_1320;
      }
      return 1;
    default:
      goto LABEL_1320;
  }
}

char *llvm::UpgradeGlobalVariable(llvm *this, llvm::GlobalVariable *a2)
{
  v115[1] = *MEMORY[0x1E4F143B8];
  int v3 = *((_DWORD *)this + 8);
  int v4 = *((_DWORD *)this + 5);
  unsigned int v5 = this >> 4;
  if ((v3 & 0xF) == 6)
  {
    if ((v4 & 0x10000000) == 0) {
      return 0;
    }
    uint64_t v6 = ***(void ***)this;
    uint64_t v7 = *(void *)(v6 + 152);
    uint64_t v8 = *(unsigned int *)(v6 + 168);
    if (v8)
    {
      LODWORD(v9) = (v8 - 1) & (v5 ^ (this >> 9));
      uint64_t v10 = v7 + 16 * v9;
      size_t v11 = *(llvm **)v10;
      if (*(llvm **)v10 == this)
      {
LABEL_12:
        uint64_t v14 = *(void *)(v10 + 8);
        if (*(void *)v14 == 12)
        {
          uint64_t v15 = *(void *)(v14 + 16);
          int v16 = *(_DWORD *)(v14 + 24);
          if (v15 == 0x646D632E6D766C6CLL && v16 == 1701734764) {
            goto LABEL_38;
          }
        }
        if (v8)
        {
          LODWORD(v18) = (v8 - 1) & (v5 ^ (this >> 9));
          uint64_t v19 = v7 + 16 * v18;
          int v20 = *(llvm **)v19;
          if (*(llvm **)v19 == this)
          {
LABEL_24:
            uint64_t v23 = *(void *)(v19 + 8);
            if (*(void *)v23 != 20) {
              goto LABEL_32;
            }
            uint64_t v24 = *(void *)(v23 + 16);
            uint64_t v25 = *(void *)(v23 + 24);
            int v26 = *(_DWORD *)(v23 + 32);
            BOOL v27 = v24 == 0x626D652E6D766C6CLL && v25 == 0x6F6D2E6465646465;
            if (!v27 || v26 != 1701606756) {
              goto LABEL_32;
            }
LABEL_38:
            uint64_t v38 = 0;
            *((_DWORD *)this + 8) = v3 & 0xFFFFBFC0 | 0x4008;
            return v38;
          }
          int v21 = 1;
          while (v20 != (llvm *)-4096)
          {
            int v22 = v18 + v21++;
            uint64_t v18 = v22 & (v8 - 1);
            int v20 = *(llvm **)(v7 + 16 * v18);
            if (v20 == this)
            {
              uint64_t v19 = v7 + 16 * v18;
              goto LABEL_24;
            }
          }
        }
        uint64_t v19 = v7 + 16 * v8;
        goto LABEL_24;
      }
      int v12 = 1;
      while (v11 != (llvm *)-4096)
      {
        int v13 = v9 + v12++;
        uint64_t v9 = v13 & (v8 - 1);
        size_t v11 = *(llvm **)(v7 + 16 * v9);
        if (v11 == this)
        {
          uint64_t v10 = v7 + 16 * v9;
          goto LABEL_12;
        }
      }
    }
    uint64_t v10 = v7 + 16 * v8;
    goto LABEL_12;
  }
  if ((v4 & 0x10000000) == 0) {
    return 0;
  }
LABEL_32:
  uint64_t v29 = **(uint64_t ***)this;
  uint64_t v30 = *v29;
  uint64_t v31 = *(void *)(*v29 + 152);
  uint64_t v32 = *(unsigned int *)(*v29 + 168);
  if (!v32)
  {
LABEL_39:
    uint64_t v34 = v31 + 16 * v32;
    goto LABEL_40;
  }
  LODWORD(v33) = (v32 - 1) & (v5 ^ (this >> 9));
  uint64_t v34 = v31 + 16 * v33;
  uint64_t v35 = *(llvm **)v34;
  if (*(llvm **)v34 != this)
  {
    int v36 = 1;
    while (v35 != (llvm *)-4096)
    {
      int v37 = v33 + v36++;
      uint64_t v33 = v37 & (v32 - 1);
      uint64_t v35 = *(llvm **)(v31 + 16 * v33);
      if (v35 == this)
      {
        uint64_t v34 = v31 + 16 * v33;
        goto LABEL_40;
      }
    }
    goto LABEL_39;
  }
LABEL_40:
  uint64_t v39 = *(void *)(v34 + 8);
  if (*(void *)v39 == 17)
  {
    uint64_t v40 = *(void *)(v39 + 16);
    uint64_t v41 = *(void *)(v39 + 24);
    int v42 = *(unsigned __int8 *)(v39 + 32);
    BOOL v43 = v40 == 0x6F6C672E6D766C6CLL && v41 == 0x726F74635F6C6162;
    if (v43 && v42 == 115) {
      goto LABEL_65;
    }
  }
  if (!v32) {
    goto LABEL_54;
  }
  LODWORD(v45) = (v32 - 1) & (v5 ^ (this >> 9));
  uint64_t v46 = v31 + 16 * v45;
  int v47 = *(llvm **)v46;
  if (*(llvm **)v46 != this)
  {
    int v48 = 1;
    while (v47 != (llvm *)-4096)
    {
      int v49 = v45 + v48++;
      uint64_t v45 = v49 & (v32 - 1);
      int v47 = *(llvm **)(v31 + 16 * v45);
      if (v47 == this)
      {
        uint64_t v46 = v31 + 16 * v45;
        goto LABEL_55;
      }
    }
LABEL_54:
    uint64_t v46 = v31 + 16 * v32;
  }
LABEL_55:
  uint64_t v50 = *(void *)(v46 + 8);
  if (*(void *)v50 != 17) {
    return 0;
  }
  uint64_t v51 = *(void *)(v50 + 16);
  uint64_t v52 = *(void *)(v50 + 24);
  int v53 = *(unsigned __int8 *)(v50 + 32);
  BOOL v54 = v51 == 0x6F6C672E6D766C6CLL && v52 == 0x726F74645F6C6162;
  if (!v54 || v53 != 115) {
    return 0;
  }
LABEL_65:
  if (*((unsigned char *)this + 16))
  {
    if (*((unsigned char *)this + 16) == 3 && (v4 & 0x7FFFFFF) == 0) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) == 0 && *((llvm **)this + 9) == (llvm *)((char *)this + 72))
  {
    return 0;
  }
  uint64_t v38 = 0;
  uint64_t v57 = *((void *)this + 3);
  if (v57)
  {
    if (*(unsigned char *)(v57 + 8) == 17)
    {
      uint64_t v38 = 0;
      uint64_t v58 = *(void *)(v57 + 24);
      if (v58)
      {
        if (*(unsigned char *)(v58 + 8) == 16)
        {
          if (*(_DWORD *)(v58 + 12) == 2)
          {
            BOOL v102 = v104;
            uint64_t v103 = 0x200000000;
            v105 = v29;
            uint64_t v106 = &v114;
            unsigned int v107 = v115;
            uint64_t v108 = 0;
            int v109 = 0;
            __int16 v110 = 512;
            char v111 = 7;
            v104[4] = 0;
            v104[5] = 0;
            uint64_t v112 = 0;
            uint64_t v113 = 0;
            BOOL v114 = &unk_1F2616E88;
            v115[0] = &unk_1F2617008;
            long long v97 = *(_OWORD *)*(void *)(v58 + 16);
            unint64_t v59 = llvm::PointerType::get((llvm::PointerType *)(v30 + 1912), 0);
            int v60 = *(uint64_t **)v97;
            long long v99 = v97;
            unint64_t v100 = v59;
            int v61 = (llvm::PoisonValue *)llvm::StructType::get(v60, (uint64_t)&v99, 3, 0);
            uint64_t v62 = *((void *)this - 4);
            int v63 = *(_DWORD *)(v62 + 20);
            std::string::size_type v64 = (llvm::Type *)(v63 & 0x7FFFFFF);
            if ((v63 & 0x7FFFFFF) != 0)
            {
              BOOL v65 = (char *)operator new(8 * (void)v64);
              bzero(v65, 8 * (void)v64);
              uint64_t v66 = 0;
              uint64_t v67 = v65;
              BOOL v96 = &v65[8 * (void)v64];
              uint64_t v98 = (llvm::Type *)v65;
              do
              {
                int v68 = *(_DWORD *)(v62 + 20);
                if ((v68 & 0x40000000) != 0) {
                  uint64_t v69 = *(void *)(v62 - 8);
                }
                else {
                  uint64_t v69 = v62 - 32 * (v68 & 0x7FFFFFF);
                }
                uint64_t v70 = *(llvm::Constant **)(v69 + v66);
                AggregateElement = llvm::Constant::getAggregateElement(v70, 0);
                BOOL v72 = llvm::Constant::getAggregateElement(v70, (llvm::Type *)1);
                uint64_t v73 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)(*v105 + 1912), 0);
                NullValue = llvm::Constant::getNullValue(v73, v74, v75);
                *(void *)&long long v99 = AggregateElement;
                *((void *)&v99 + 1) = v72;
                unint64_t v100 = (unint64_t)NullValue;
                *v67++ = llvm::ConstantStruct::get(v61, (llvm::Type *)&v99, 3);
                v66 += 32;
              }
              while (32 * (void)v64 != v66);
              int v78 = v96;
              int v77 = v98;
            }
            else
            {
              int v78 = 0;
              int v77 = 0;
            }
            uint64_t v79 = llvm::ArrayType::get(v61, v64);
            uint64_t v80 = llvm::ConstantArray::get(v79, v77, (v78 - (char *)v77) >> 3);
            uint64_t v81 = (char *)operator new(0x78uLL);
            uint64_t v38 = v81 + 32;
            *((_DWORD *)v81 + 13) = *((_DWORD *)v81 + 13) & 0x38000000 | 1;
            *(void *)uint64_t v81 = 0;
            *((void *)v81 + 1) = 0;
            *((void *)v81 + 2) = 0;
            *((void *)v81 + 3) = v81 + 32;
            uint64_t v82 = *(llvm::PointerType **)v80;
            char v83 = *((_DWORD *)this + 8) & 0xF;
            if ((*((unsigned char *)this + 23) & 0x10) == 0)
            {
              uint64_t v94 = 0;
              uint64_t v93 = &byte_1CFBCE98E;
              goto LABEL_93;
            }
            uint64_t v84 = ***(void ***)this;
            uint64_t v85 = *(void *)(v84 + 152);
            uint64_t v86 = *(unsigned int *)(v84 + 168);
            if (v86)
            {
              LODWORD(v87) = (v86 - 1) & (v5 ^ (this >> 9));
              uint64_t v88 = v85 + 16 * v87;
              int v89 = *(llvm **)v88;
              if (*(llvm **)v88 == this)
              {
LABEL_92:
                uint64_t v92 = *(void **)(v88 + 8);
                uint64_t v95 = *v92;
                uint64_t v93 = (char *)(v92 + 2);
                uint64_t v94 = v95;
LABEL_93:
                __int16 v101 = 261;
                *(void *)&long long v99 = v93;
                *((void *)&v99 + 1) = v94;
                llvm::GlobalVariable::GlobalVariable((unint64_t *)v81 + 4, v82, 0, v83, (unint64_t)v80, (const char **)&v99, 0, 0, 0);
                if (v77) {
                  operator delete(v77);
                }
                if (v102 != v104) {
                  free(v102);
                }
                return v38;
              }
              int v90 = 1;
              while (v89 != (llvm *)-4096)
              {
                int v91 = v87 + v90++;
                uint64_t v87 = v91 & (v86 - 1);
                int v89 = *(llvm **)(v85 + 16 * v87);
                if (v89 == this)
                {
                  uint64_t v88 = v85 + 16 * v87;
                  goto LABEL_92;
                }
              }
            }
            uint64_t v88 = v85 + 16 * v86;
            goto LABEL_92;
          }
          return 0;
        }
      }
    }
  }
  return v38;
}

#error "1CC518CEC: too big function (funcsize=0)"

llvm::Instruction *sub_1CC52B88C(uint64_t a1, unsigned __int8 *a2, llvm::PointerType **a3, unsigned __int8 *a4, int a5)
{
  unint64_t v10 = llvm::PointerType::get(*a3, 0);
  v21[16] = 257;
  if (*(void *)a2 != v10)
  {
    if (a2[16] <= 0x14u)
    {
      a2 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, unint64_t))(**(void **)(a1 + 72) + 224))(*(void *)(a1 + 72), 49, a2, v10);
      if (a2) {
        BOOL v14 = a2[16] >= 0x1Cu;
      }
      else {
        BOOL v14 = 0;
      }
      if (v14)
      {
        (*(void (**)(void, unsigned __int8 *, _WORD *, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), a2, v21, *(void *)(a1 + 48), *(void *)(a1 + 56));
        uint64_t v18 = *(unsigned int *)(a1 + 8);
        if (v18)
        {
          uint64_t v19 = *(void *)a1;
          uint64_t v20 = *(void *)a1 + 16 * v18;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)a2, *(_DWORD *)v19, *(llvm::MDNode **)(v19 + 8));
            v19 += 16;
          }
          while (v19 != v20);
        }
      }
    }
    else
    {
      __int16 v23 = 257;
      a2 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)a2, v10, &v22, 0);
      (*(void (**)(void, unsigned __int8 *, _WORD *, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), a2, v21, *(void *)(a1 + 48), *(void *)(a1 + 56));
      uint64_t v11 = *(unsigned int *)(a1 + 8);
      if (v11)
      {
        uint64_t v12 = *(void *)a1;
        uint64_t v13 = *(void *)a1 + 16 * v11;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)a2, *(_DWORD *)v12, *(llvm::MDNode **)(v12 + 8));
          v12 += 16;
        }
        while (v12 != v13);
      }
    }
  }
  if (a5)
  {
    __int16 v15 = (63 - __clz(llvm::Type::getPrimitiveSizeInBits(*a3) >> 3));
    if (!a4) {
      goto LABEL_18;
    }
  }
  else
  {
    __int16 v15 = 0;
    if (!a4) {
      goto LABEL_18;
    }
  }
  if (a4[16] <= 0x14u && llvm::Constant::isAllOnesValue((llvm::Constant *)a4)) {
    return sub_1CC27BF8C((uint64_t *)a1, (uint64_t)a3, (uint64_t)a2, v15 | 0x100u, 0);
  }
LABEL_18:
  unint64_t v17 = sub_1CC52BE08(a1, a4, *((_DWORD *)*a3 + 8));
  return (llvm::Instruction *)llvm::IRBuilderBase::CreateMaskedStore(a1, a3, (uint64_t *)a2, v15, (uint64_t)v17);
}

llvm::Value *sub_1CC52BAD0(llvm::IRBuilderBase *a1, unsigned __int8 *a2, llvm::Value *a3, llvm::Value *a4)
{
  if (!a2 || a2[16] > 0x14u || !llvm::Constant::isAllOnesValue((llvm::Constant *)a2))
  {
    uint64_t v8 = sub_1CC52BE08((uint64_t)a1, a2, *(_DWORD *)(*(void *)a3 + 32));
    __int16 v11 = 257;
    return llvm::IRBuilderBase::CreateSelect(a1, v8, a3, a4, (const llvm::Twine *)v10, 0);
  }
  return a3;
}

llvm::Instruction *sub_1CC52BB68(uint64_t a1, llvm::Type *a2, unsigned __int8 *a3)
{
  int v3 = a2;
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(unsigned int *)(*(void *)a2 + 32);
  if (a3 && (a3[16] > 0x14u || !llvm::Constant::isAllOnesValue((llvm::Constant *)a3)))
  {
    uint64_t v7 = sub_1CC52BE08(a1, a3, v5);
    __int16 v22 = 257;
    int v3 = sub_1CBF52474(a1, v3, (uint64_t)v7, (uint64_t)v21);
  }
  if (v5 <= 7)
  {
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
        v23[i] = i;
    }
    for (unsigned int j = v5; j != 8; ++j)
      v23[j] = j % v5 + v5;
    NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)v3, a2, (const llvm::APFloat *)a3);
    __int16 v22 = 257;
    int v3 = sub_1CB935A74(a1, (uint64_t)v3, (uint64_t)NullValue, v23, (llvm::Type *)8, (uint64_t)v21);
  }
  if (v5 <= 8) {
    uint64_t v11 = 8;
  }
  else {
    uint64_t v11 = v5;
  }
  uint64_t v12 = llvm::IntegerType::get(*(llvm::IntegerType **)(a1 + 64), (llvm::LLVMContext *)v11);
  __int16 v24 = 257;
  if (*(void *)v3 != v12)
  {
    if (*((unsigned __int8 *)v3 + 16) <= 0x14u)
    {
      int v3 = (llvm::Instruction *)(*(uint64_t (**)(void, uint64_t, llvm::Instruction *, uint64_t))(**(void **)(a1 + 72) + 224))(*(void *)(a1 + 72), 49, v3, v12);
      if (v3) {
        BOOL v16 = *((unsigned __int8 *)v3 + 16) >= 0x1Cu;
      }
      else {
        BOOL v16 = 0;
      }
      if (v16)
      {
        (*(void (**)(void, llvm::Instruction *, _DWORD *, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v3, v23, *(void *)(a1 + 48), *(void *)(a1 + 56));
        uint64_t v18 = *(unsigned int *)(a1 + 8);
        if (v18)
        {
          uint64_t v19 = *(void *)a1;
          uint64_t v20 = v19 + 16 * v18;
          do
          {
            llvm::Instruction::setMetadata(v3, *(_DWORD *)v19, *(llvm::MDNode **)(v19 + 8));
            v19 += 16;
          }
          while (v19 != v20);
        }
      }
    }
    else
    {
      __int16 v22 = 257;
      int v3 = llvm::CastInst::Create(49, (uint64_t)v3, v12, v21, 0);
      (*(void (**)(void, llvm::Instruction *, _DWORD *, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v3, v23, *(void *)(a1 + 48), *(void *)(a1 + 56));
      uint64_t v13 = *(unsigned int *)(a1 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)a1;
        uint64_t v15 = v14 + 16 * v13;
        do
        {
          llvm::Instruction::setMetadata(v3, *(_DWORD *)v14, *(llvm::MDNode **)(v14 + 8));
          v14 += 16;
        }
        while (v14 != v15);
      }
    }
  }
  return v3;
}

llvm::Instruction *sub_1CC52BE08(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  int v4 = a2;
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  double v7 = llvm::FixedVectorType::get((llvm::FixedVectorType *)(**(void **)(a1 + 64) + 1888), (llvm::Type *)(*(_DWORD *)(*(void *)a2 + 8) >> 8));
  __int16 v21 = 257;
  if (*(void *)v4 != v6)
  {
    if (v4[16] <= 0x14u)
    {
      int v4 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t, double))(**(void **)(a1 + 72) + 224))(*(void *)(a1 + 72), 49, v4, v6, v7);
      if (v4) {
        BOOL v11 = v4[16] >= 0x1Cu;
      }
      else {
        BOOL v11 = 0;
      }
      if (v11)
      {
        (*(void (**)(void, unsigned __int8 *, _DWORD *, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v4, v20, *(void *)(a1 + 48), *(void *)(a1 + 56));
        uint64_t v15 = *(unsigned int *)(a1 + 8);
        if (v15)
        {
          uint64_t v16 = *(void *)a1;
          uint64_t v17 = *(void *)a1 + 16 * v15;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v4, *(_DWORD *)v16, *(llvm::MDNode **)(v16 + 8));
            v16 += 16;
          }
          while (v16 != v17);
        }
      }
    }
    else
    {
      __int16 v19 = 257;
      int v4 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v4, v6, v18, 0);
      (*(void (**)(void, unsigned __int8 *, _DWORD *, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v4, v20, *(void *)(a1 + 48), *(void *)(a1 + 56));
      uint64_t v8 = *(unsigned int *)(a1 + 8);
      if (v8)
      {
        uint64_t v9 = *(void *)a1;
        uint64_t v10 = *(void *)a1 + 16 * v8;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v4, *(_DWORD *)v9, *(llvm::MDNode **)(v9 + 8));
          v9 += 16;
        }
        while (v9 != v10);
      }
    }
  }
  if (a3 <= 4)
  {
    if (a3)
    {
      uint64_t v12 = 0;
      uint64_t v13 = (llvm::Type *)a3;
      do
      {
        v20[v12] = v12;
        ++v12;
      }
      while (a3 != v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    v18[0] = "extract";
    __int16 v19 = 259;
    return sub_1CB935A74(a1, (uint64_t)v4, (uint64_t)v4, v20, v13, (uint64_t)v18);
  }
  return (llvm::Instruction *)v4;
}

uint64_t sub_1CC52C04C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::MDNode *a5)
{
  uint64_t v5 = a5;
  if (*(unsigned char *)(a1 + 100)) {
    return llvm::IRBuilderBase::CreateConstrainedFPBinOp(a1, 83, (uint64_t *)a2, a3, 0, a4, a5, 0, 0);
  }
  if (*(unsigned __int8 *)(a2 + 16) >= 0x15u) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = a2;
  }
  if (*(unsigned __int8 *)(a3 + 16) >= 0x15u) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = a3;
  }
  if (v10) {
    BOOL v12 = v11 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12) {
    goto LABEL_13;
  }
  uint64_t v20 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 184))(*(void *)(a1 + 72), 14);
  uint64_t v14 = (llvm::Instruction *)v20;
  if (v20) {
    BOOL v21 = v20[16] >= 0x1Cu;
  }
  else {
    BOOL v21 = 0;
  }
  if (!v21) {
    return (uint64_t)v14;
  }
  uint64_t v22 = sub_1CB844E0C((uint64_t *)a1, (llvm::Instruction *)v20, a4);
  if (!v22)
  {
LABEL_13:
    __int16 v24 = 257;
    uint64_t v13 = (uint64_t ***)llvm::BinaryOperator::Create(14, (void *)a2, a3, &v23, 0);
    uint64_t v14 = (llvm::Instruction *)v13;
    int v15 = *(_DWORD *)(a1 + 96);
    if (v5 || (uint64_t v5 = *(llvm::MDNode **)(a1 + 88)) != 0) {
      llvm::Value::setMetadata(v13, 3, v5);
    }
    *((unsigned char *)v14 + 17) |= 2 * (_BYTE)v15;
    (*(void (**)(void, llvm::Instruction *, uint64_t, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v14, a4, *(void *)(a1 + 48), *(void *)(a1 + 56));
    uint64_t v16 = *(unsigned int *)(a1 + 8);
    if (v16)
    {
      uint64_t v18 = *(void *)a1;
      uint64_t v19 = v18 + 16 * v16;
      do
      {
        llvm::Instruction::setMetadata(v14, *(_DWORD *)v18, *(llvm::MDNode **)(v18 + 8));
        v18 += 16;
      }
      while (v18 != v19);
    }
    return (uint64_t)v14;
  }
  return (uint64_t)v22;
}

llvm::Instruction *sub_1CC52C204(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v6 = (void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  double v7 = (void *)*v6;
  __int16 v8 = 32;
  switch(a3)
  {
    case 1:
      BOOL v10 = a4 == 0;
      __int16 v11 = 36;
      __int16 v12 = 40;
      goto LABEL_9;
    case 2:
      BOOL v10 = a4 == 0;
      __int16 v11 = 37;
      __int16 v12 = 41;
      goto LABEL_9;
    case 3:
      llvm::FixedVectorType::get((llvm::FixedVectorType *)(**(void **)(a1 + 64) + 1888), (llvm::Type *)*(unsigned int *)(*(void *)*v6 + 32));
      NullValue = llvm::Constant::getNullValue(v13, v14, v15);
      goto LABEL_13;
    case 4:
      __int16 v8 = 33;
      goto LABEL_12;
    case 5:
      BOOL v10 = a4 == 0;
      __int16 v11 = 35;
      __int16 v12 = 39;
      goto LABEL_9;
    case 6:
      BOOL v10 = a4 == 0;
      __int16 v11 = 34;
      __int16 v12 = 38;
LABEL_9:
      if (v10) {
        __int16 v8 = v11;
      }
      else {
        __int16 v8 = v12;
      }
      goto LABEL_12;
    case 7:
      llvm::FixedVectorType::get((llvm::FixedVectorType *)(**(void **)(a1 + 64) + 1888), (llvm::Type *)*(unsigned int *)(*(void *)*v6 + 32));
      NullValue = (llvm::Type *)llvm::Constant::getAllOnesValue(v17, v18, v19);
      goto LABEL_13;
    default:
LABEL_12:
      uint64_t v20 = v6[4];
      __int16 v30 = 257;
      NullValue = sub_1CB845F20(a1, v8, v7, v20, (uint64_t)v29);
LABEL_13:
      int v21 = *(unsigned __int8 *)(a2 + 16);
      if (v21 == 84)
      {
        uint64_t v22 = 0;
      }
      else if (v21 == 39)
      {
        uint64_t v22 = (*(_DWORD *)(a2 + 80) + 1);
      }
      else
      {
        uint64_t v22 = 2;
      }
      int v23 = 0;
      int v24 = *(_DWORD *)(a2 + 20);
      uint64_t v25 = -(uint64_t)(v24 & 0x7FFFFFF);
      if (v24 < 0)
      {
        uint64_t v27 = a2 - 32 * (v24 & 0x7FFFFFF);
        uint64_t v28 = *(void *)(v27 - 8);
        if ((v28 & 0xFFFFFFFF0) != 0) {
          int v23 = *(_DWORD *)(v27 - 12) - *(_DWORD *)(v27 - v28);
        }
        else {
          int v23 = 0;
        }
      }
      return sub_1CC52BB68(a1, NullValue, *(unsigned __int8 **)(a2+ 32 * v25+ 32* (((-32 * v22+ 32 * (unint64_t)-v23- 32 * v25- 32) >> 5)- 1)));
  }
}

llvm::Value *sub_1CC52C3CC(uint64_t *a1, uint64_t *a2, int a3)
{
  v24[2] = *MEMORY[0x1E4F143B8];
  uint64_t v23 = *a2;
  uint64_t v5 = &a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
  uint64_t v6 = *v5;
  uint64_t v7 = v5[4];
  Declaratioint n = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(*(void *)(a2[5] + 56) + 40), a3, (uint64_t)&v23, 1);
  if (Declaration) {
    uint64_t v9 = *(uint64_t ***)(Declaration + 24);
  }
  else {
    uint64_t v9 = 0;
  }
  v24[0] = v6;
  v24[1] = v7;
  __int16 v22 = 257;
  BOOL v10 = (llvm::Value *)sub_1CB845BAC(a1, v9, (uint64_t **)Declaration, v24, 2, (uint64_t)v21, 0);
  uint64_t v11 = 0;
  int v12 = *((unsigned __int8 *)a2 + 16);
  if (v12 != 84)
  {
    if (v12 == 39) {
      uint64_t v11 = (*((_DWORD *)a2 + 20) + 1);
    }
    else {
      uint64_t v11 = 2;
    }
  }
  int v13 = 0;
  int v14 = *((_DWORD *)a2 + 5);
  uint64_t v15 = -(uint64_t)(v14 & 0x7FFFFFF);
  if (v14 < 0)
  {
    uint64_t v19 = &a2[-4 * (v14 & 0x7FFFFFF)];
    uint64_t v20 = *(v19 - 1);
    if ((v20 & 0xFFFFFFFF0) != 0) {
      int v13 = *((_DWORD *)v19 - 3) - *(_DWORD *)((char *)v19 - v20);
    }
    else {
      int v13 = 0;
    }
  }
  uint64_t v16 = (uint64_t)&a2[4 * -v13 + -4 * v11];
  uint64_t v17 = &a2[4 * v15];
  if (((v16 - (void)v17 - 32) & 0x1FFFFFFFE0) == 0x80) {
    return sub_1CC52BAD0((llvm::IRBuilderBase *)a1, (unsigned __int8 *)v17[12], v10, (llvm::Value *)v17[8]);
  }
  return v10;
}

llvm::Value *sub_1CC52C54C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(llvm::ConstantInt **)a2;
  uint64_t v7 = *(unsigned __int8 **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  __int16 v41 = 257;
  if (*(llvm::ConstantInt **)v7 != v6)
  {
    if (v7[16] <= 0x14u)
    {
      uint64_t v7 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, llvm::ConstantInt *))(**(void **)(a1 + 72) + 224))(*(void *)(a1 + 72), 49, v7, v6);
      if (v7) {
        BOOL v11 = v7[16] >= 0x1Cu;
      }
      else {
        BOOL v11 = 0;
      }
      if (v11)
      {
        (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v7, v40, *(void *)(a1 + 48), *(void *)(a1 + 56));
        uint64_t v34 = *(unsigned int *)(a1 + 8);
        if (v34)
        {
          uint64_t v35 = *(void *)a1;
          uint64_t v36 = *(void *)a1 + 16 * v34;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v7, *(_DWORD *)v35, *(llvm::MDNode **)(v35 + 8));
            v35 += 16;
          }
          while (v35 != v36);
        }
      }
    }
    else
    {
      __int16 v43 = 257;
      uint64_t v7 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v7, (uint64_t)v6, v42, 0);
      (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v7, v40, *(void *)(a1 + 48), *(void *)(a1 + 56));
      uint64_t v8 = *(unsigned int *)(a1 + 8);
      if (v8)
      {
        uint64_t v9 = *(void *)a1;
        uint64_t v10 = *(void *)a1 + 16 * v8;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v7, *(_DWORD *)v9, *(llvm::MDNode **)(v9 + 8));
          v9 += 16;
        }
        while (v9 != v10);
      }
    }
  }
  int v12 = *(unsigned __int8 **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
  __int16 v41 = 257;
  if (*(llvm::ConstantInt **)v12 != v6)
  {
    if (v12[16] <= 0x14u)
    {
      int v12 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, llvm::ConstantInt *))(**(void **)(a1 + 72) + 224))(*(void *)(a1 + 72), 49, v12, v6);
      if (v12) {
        BOOL v16 = v12[16] >= 0x1Cu;
      }
      else {
        BOOL v16 = 0;
      }
      if (v16)
      {
        (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v12, v40, *(void *)(a1 + 48), *(void *)(a1 + 56));
        uint64_t v37 = *(unsigned int *)(a1 + 8);
        if (v37)
        {
          uint64_t v38 = *(void *)a1;
          uint64_t v39 = *(void *)a1 + 16 * v37;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v12, *(_DWORD *)v38, *(llvm::MDNode **)(v38 + 8));
            v38 += 16;
          }
          while (v38 != v39);
        }
      }
    }
    else
    {
      __int16 v43 = 257;
      int v12 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v12, (uint64_t)v6, v42, 0);
      (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v12, v40, *(void *)(a1 + 48), *(void *)(a1 + 56));
      uint64_t v13 = *(unsigned int *)(a1 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)a1;
        uint64_t v15 = *(void *)a1 + 16 * v13;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v12, *(_DWORD *)v14, *(llvm::MDNode **)(v14 + 8));
          v14 += 16;
        }
        while (v14 != v15);
      }
    }
  }
  if (a3)
  {
    uint64_t v17 = llvm::ConstantInt::get(v6, 0x20uLL, 0);
    __int16 v43 = 257;
    uint64_t v18 = sub_1CC242524(a1, (uint64_t)v7, (uint64_t)v17, (uint64_t)v42, 0, 0);
    __int16 v43 = 257;
    uint64_t v19 = sub_1CC5357E8(a1, (uint64_t)v18, (uint64_t)v17, (uint64_t)v42, 0);
    __int16 v43 = 257;
    uint64_t v20 = sub_1CC242524(a1, (uint64_t)v12, (uint64_t)v17, (uint64_t)v42, 0, 0);
    __int16 v43 = 257;
    int v21 = sub_1CC5357E8(a1, (uint64_t)v20, (uint64_t)v17, (uint64_t)v42, 0);
  }
  else
  {
    __int16 v22 = llvm::ConstantInt::get(v6, 0xFFFFFFFFuLL, 0);
    __int16 v43 = 257;
    uint64_t v19 = sub_1CBF52474(a1, v7, (uint64_t)v22, (uint64_t)v42);
    __int16 v43 = 257;
    int v21 = sub_1CBF52474(a1, v12, (uint64_t)v22, (uint64_t)v42);
  }
  __int16 v43 = 257;
  uint64_t v23 = sub_1CC09A1EC(a1, (uint64_t)v19, (uint64_t)v21, (uint64_t)v42, 0, 0);
  int v24 = *(unsigned __int8 *)(a2 + 16);
  if (v24 == 84)
  {
    uint64_t v25 = 0;
  }
  else if (v24 == 39)
  {
    uint64_t v25 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    uint64_t v25 = 2;
  }
  int v26 = 0;
  int v27 = *(_DWORD *)(a2 + 20);
  uint64_t v28 = -(uint64_t)(v27 & 0x7FFFFFF);
  if (v27 < 0)
  {
    uint64_t v32 = a2 - 32 * (v27 & 0x7FFFFFF);
    uint64_t v33 = *(void *)(v32 - 8);
    if ((v33 & 0xFFFFFFFF0) != 0) {
      int v26 = *(_DWORD *)(v32 - 12) - *(_DWORD *)(v32 - v33);
    }
    else {
      int v26 = 0;
    }
  }
  uint64_t v29 = a2 - 32 * v25 + 32 * -v26;
  uint64_t v30 = a2 + 32 * v28;
  if (((v29 - v30 - 32) & 0x1FFFFFFFE0) == 0x80) {
    return sub_1CC52BAD0((llvm::IRBuilderBase *)a1, *(unsigned __int8 **)(v30 + 96), v23, *(llvm::Value **)(v30 + 64));
  }
  return v23;
}

llvm::Instruction *sub_1CC52CA10(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = (unsigned __int8 *)a2;
  if (*(unsigned char *)(a1 + 100)) {
    return (llvm::Instruction *)llvm::IRBuilderBase::CreateConstrainedFPCast(a1, 118, (uint64_t *)a2, a3, 0, a4, 0, 0, 0);
  }
  if (*(uint64_t **)a2 == a3) {
    return (llvm::Instruction *)v5;
  }
  if (*(unsigned __int8 *)(a2 + 16) > 0x14u)
  {
    __int16 v13 = 257;
    uint64_t v5 = (unsigned __int8 *)llvm::CastInst::Create(43, a2, (uint64_t)a3, &v12, 0);
    (*(void (**)(void, unsigned __int8 *, uint64_t, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v5, a4, *(void *)(a1 + 48), *(void *)(a1 + 56));
    uint64_t v7 = *(unsigned int *)(a1 + 8);
    if (v7)
    {
      uint64_t v10 = *(void *)a1;
      uint64_t v11 = v10 + 16 * v7;
      do
      {
        llvm::Instruction::setMetadata((llvm::Instruction *)v5, *(_DWORD *)v10, *(llvm::MDNode **)(v10 + 8));
        v10 += 16;
      }
      while (v10 != v11);
    }
    return (llvm::Instruction *)v5;
  }
  uint64_t v5 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t *))(**(void **)(a1 + 72) + 224))(*(void *)(a1 + 72), 43, a2, a3);
  if (v5) {
    BOOL v9 = v5[16] >= 0x1Cu;
  }
  else {
    BOOL v9 = 0;
  }
  if (!v9) {
    return (llvm::Instruction *)v5;
  }

  return sub_1CB844E0C((uint64_t *)a1, (llvm::Instruction *)v5, a4);
}

llvm::Value *sub_1CC52CB9C(uint64_t *a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, llvm::Instruction *a6)
{
  v32[3] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *a2;
  uint64_t v31 = v9;
  uint64_t v10 = &a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
  uint64_t v11 = *v10;
  VectorSplat = (llvm::Instruction *)v10[4];
  if (*(void *)VectorSplat != v9)
  {
    __int16 v13 = (llvm::Type *)*(unsigned int *)(v9 + 32);
    if ((*(_DWORD *)(v9 + 8) & 0xFE) == 0x12) {
      uint64_t v9 = **(void **)(v9 + 16);
    }
    __int16 v30 = 257;
    uint64_t v14 = (unsigned __int8 *)sub_1CBF56614((uint64_t)a1, VectorSplat, (llvm::Type ***)v9, 0, (uint64_t)v29, a6);
    __int16 v30 = 257;
    VectorSplat = llvm::IRBuilderBase::CreateVectorSplat((uint64_t)a1, v13, v14, (uint64_t)v29);
  }
  if (a3) {
    int v15 = 149;
  }
  else {
    int v15 = 148;
  }
  Declaratioint n = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(*(void *)(a2[5] + 56) + 40), v15, (uint64_t)&v31, 1);
  if (Declaration) {
    uint64_t v17 = *(uint64_t ***)(Declaration + 24);
  }
  else {
    uint64_t v17 = 0;
  }
  v32[0] = v11;
  v32[1] = v11;
  v32[2] = (uint64_t)VectorSplat;
  __int16 v30 = 257;
  uint64_t v18 = (llvm::Value *)sub_1CB845BAC(a1, v17, (uint64_t **)Declaration, v32, 3, (uint64_t)v29, 0);
  uint64_t v19 = 0;
  int v20 = *((unsigned __int8 *)a2 + 16);
  if (v20 != 84)
  {
    if (v20 == 39) {
      uint64_t v19 = (*((_DWORD *)a2 + 20) + 1);
    }
    else {
      uint64_t v19 = 2;
    }
  }
  int v21 = 0;
  int v22 = *((_DWORD *)a2 + 5);
  uint64_t v23 = -(uint64_t)(v22 & 0x7FFFFFF);
  if (v22 < 0)
  {
    int v27 = &a2[-4 * (v22 & 0x7FFFFFF)];
    uint64_t v28 = *(v27 - 1);
    if ((v28 & 0xFFFFFFFF0) != 0) {
      int v21 = *((_DWORD *)v27 - 3) - *(_DWORD *)((char *)v27 - v28);
    }
    else {
      int v21 = 0;
    }
  }
  uint64_t v24 = (uint64_t)&a2[4 * -v21 + -4 * v19];
  uint64_t v25 = &a2[4 * v23];
  if (((v24 - (void)v25 - 32) & 0x1FFFFFFFE0) == 0x80) {
    return sub_1CC52BAD0((llvm::IRBuilderBase *)a1, (unsigned __int8 *)v25[12], v18, (llvm::Value *)v25[8]);
  }
  return v18;
}

llvm::Value *sub_1CC52CD98(uint64_t *a1, uint64_t a2, int a3, int a4, uint64_t a5, llvm::Instruction *a6)
{
  v37[3] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(llvm::ConstantAggregateZero **)a2;
  uint64_t v36 = *(llvm::ConstantAggregateZero **)a2;
  uint64_t v11 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  VectorSplat = (llvm::Instruction *)v11[8];
  if (a3) {
    uint64_t v13 = *v11;
  }
  else {
    uint64_t v13 = v11[4];
  }
  if (a3) {
    uint64_t v14 = v11[4];
  }
  else {
    uint64_t v14 = *v11;
  }
  if (*(llvm::ConstantAggregateZero **)VectorSplat != v10)
  {
    int v15 = (llvm::Type *)*((unsigned int *)v10 + 8);
    if ((*((_DWORD *)v10 + 2) & 0xFE) == 0x12) {
      uint64_t v10 = (llvm::ConstantAggregateZero *)**((void **)v10 + 2);
    }
    __int16 v35 = 257;
    BOOL v16 = (unsigned __int8 *)sub_1CBF56614((uint64_t)a1, VectorSplat, (llvm::Type ***)v10, 0, (uint64_t)v34, a6);
    __int16 v35 = 257;
    VectorSplat = llvm::IRBuilderBase::CreateVectorSplat((uint64_t)a1, v15, v16, (uint64_t)v34);
  }
  if (a3) {
    int v17 = 149;
  }
  else {
    int v17 = 148;
  }
  Declaratioint n = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(*(void *)(*(void *)(a2 + 40) + 56) + 40), v17, (uint64_t)&v36, 1);
  if (Declaration) {
    uint64_t v19 = *(uint64_t ***)(Declaration + 24);
  }
  else {
    uint64_t v19 = 0;
  }
  v37[0] = v14;
  v37[1] = v13;
  v37[2] = (uint64_t)VectorSplat;
  __int16 v35 = 257;
  int v21 = (llvm::Value *)sub_1CB845BAC(a1, v19, (uint64_t **)Declaration, v37, 3, (uint64_t)v34, 0);
  uint64_t v22 = 0;
  int v23 = *(unsigned __int8 *)(a2 + 16);
  if (v23 != 84)
  {
    if (v23 == 39) {
      uint64_t v22 = (*(_DWORD *)(a2 + 80) + 1);
    }
    else {
      uint64_t v22 = 2;
    }
  }
  uint64_t v24 = 0;
  int v25 = *(_DWORD *)(a2 + 20);
  uint64_t v26 = -(uint64_t)(v25 & 0x7FFFFFF);
  if (v25 < 0)
  {
    uint64_t v32 = a2 - 32 * (v25 & 0x7FFFFFF);
    uint64_t v33 = *(void *)(v32 - 8);
    if ((v33 & 0xFFFFFFFF0) != 0) {
      uint64_t v24 = (*(_DWORD *)(v32 - 12) - *(_DWORD *)(v32 - v33));
    }
    else {
      uint64_t v24 = 0;
    }
  }
  uint64_t v27 = a2 - 32 * v22 - 32 * v24;
  uint64_t v28 = (llvm::Value **)(a2 + 32 * v26);
  unint64_t v29 = (unint64_t)(v27 - (void)v28 - 32) >> 5;
  if (v29 >= 4)
  {
    if (v29 == 5)
    {
      __int16 v30 = v28[12];
    }
    else if (a4)
    {
      __int16 v30 = (llvm::Value *)llvm::ConstantAggregateZero::get(*(llvm::ConstantAggregateZero **)a2, v20);
      uint64_t v26 = -(uint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
    }
    else
    {
      __int16 v30 = *v28;
    }
    return sub_1CC52BAD0((llvm::IRBuilderBase *)a1, *(unsigned __int8 **)(a2 + 32 * v26 + 32 * (v29 - 1)), v21, v30);
  }
  return v21;
}

llvm::Value *sub_1CC52CFEC(llvm::IRBuilderBase *a1, llvm::Type *a2, const llvm::APFloat *a3, uint64_t a4, llvm::Value *a5, unsigned __int8 *a6, int a7)
{
  uint64_t v10 = (uint64_t)a2;
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  int v12 = (void *)(a4 + 24);
  if (*(_DWORD *)(a4 + 32) >= 0x41u) {
    int v12 = (void *)*v12;
  }
  unsigned int v13 = *(_DWORD *)v12;
  uint64_t v14 = *(llvm::Constant **)a2;
  int v15 = (llvm::Type *)*(unsigned int *)(*(void *)a2 + 32);
  int v16 = v15 - 1;
  if (!a7) {
    int v16 = -1;
  }
  unsigned int v17 = v16 & v13;
  if ((v16 & v13) < 0x20)
  {
    if (v17 >= 0x11)
    {
      v17 -= 16;
      NullValue = llvm::Constant::getNullValue(v14, a2, a3);
      a3 = (const llvm::APFloat *)v10;
      uint64_t v10 = (uint64_t)NullValue;
    }
    if (v15)
    {
      unint64_t v20 = 0;
      int32x2_t v21 = vdup_n_s32(v17);
      int8x8_t v22 = (int8x8_t)vdup_n_s32((int)v15 - 16);
      int v23 = v33;
      do
      {
        uint64_t v24 = 0;
        int32x2_t v25 = vdup_n_s32(v20);
        int32x2_t v26 = (int32x2_t)0x100000000;
        do
        {
          int32x2_t v27 = vadd_s32(v21, v26);
          int8x8_t v28 = (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, (uint32x2_t)v27);
          if (a7) {
            unsigned int v29 = -1;
          }
          else {
            unsigned int v29 = 0;
          }
          *(int32x2_t *)&v23[v24] = vadd_s32(vadd_s32(v27, v25), (int32x2_t)vbic_s8(v22, vorr_s8(v28, (int8x8_t)vdup_n_s32(v29))));
          int32x2_t v26 = vadd_s32(v26, (int32x2_t)0x200000002);
          v24 += 8;
        }
        while (v24 != 64);
        v20 += 16;
        v23 += 64;
      }
      while (v20 < (unint64_t)v15);
    }
    else
    {
      int v15 = 0;
    }
    uint64_t v31 = "palignr";
    __int16 v32 = 259;
    __int16 v30 = sub_1CB935A74((uint64_t)a1, (uint64_t)a3, v10, v33, v15, (uint64_t)&v31);
    return sub_1CC52BAD0(a1, a6, v30, a5);
  }
  else
  {
    return llvm::Constant::getNullValue(v14, a2, a3);
  }
}

unsigned __int8 *sub_1CC52D1C4(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  int v4 = a2;
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = (llvm::Type *)(8 * *(_DWORD *)(*(void *)a2 + 32));
  double v11 = llvm::FixedVectorType::get((llvm::FixedVectorType *)(**(void **)(a1 + 64) + 1912), v7);
  int v12 = (llvm::Constant *)v8;
  v39[0] = "cast";
  __int16 v40 = 259;
  if (*(void *)v4 != v8)
  {
    if (v4[16] <= 0x14u)
    {
      int v4 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t, double))(**(void **)(a1 + 72) + 224))(*(void *)(a1 + 72), 49, v4, v8, v11);
      if (v4) {
        BOOL v16 = v4[16] >= 0x1Cu;
      }
      else {
        BOOL v16 = 0;
      }
      if (v16)
      {
        (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v4, v39, *(void *)(a1 + 48), *(void *)(a1 + 56));
        uint64_t v33 = *(unsigned int *)(a1 + 8);
        if (v33)
        {
          uint64_t v34 = *(void *)a1;
          uint64_t v35 = *(void *)a1 + 16 * v33;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v4, *(_DWORD *)v34, *(llvm::MDNode **)(v34 + 8));
            v34 += 16;
          }
          while (v34 != v35);
        }
      }
    }
    else
    {
      __int16 v42 = 257;
      int v4 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v4, v8, v41, 0);
      (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v4, v39, *(void *)(a1 + 48), *(void *)(a1 + 56));
      uint64_t v13 = *(unsigned int *)(a1 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)a1;
        uint64_t v15 = *(void *)a1 + 16 * v13;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v4, *(_DWORD *)v14, *(llvm::MDNode **)(v14 + 8));
          v14 += 16;
        }
        while (v14 != v15);
      }
    }
  }
  NullValue = (unsigned __int8 *)llvm::Constant::getNullValue(v12, v9, v10);
  if (a3 <= 0xF)
  {
    if (v7)
    {
      unsigned int v18 = 0;
      int32x4_t v19 = vdupq_n_s32(v7 - a3);
      uint32x4_t v20 = (uint32x4_t)vdupq_n_s32(v7);
      int8x16_t v21 = (int8x16_t)vdupq_n_s32(16 - (int)v7);
      int8x8_t v22 = v41;
      v23.i64[0] = 0x400000004;
      v23.i64[1] = 0x400000004;
      do
      {
        uint64_t v24 = 0;
        int32x4_t v25 = vdupq_n_s32(v18);
        int32x4_t v26 = (int32x4_t)xmmword_1CD923660;
        do
        {
          int32x4_t v27 = vaddq_s32(v19, v26);
          *(int32x4_t *)&v22[v24] = vaddq_s32(vaddq_s32(v27, v25), (int32x4_t)vandq_s8(v21, (int8x16_t)vcgtq_u32(v20, (uint32x4_t)v27)));
          int32x4_t v26 = vaddq_s32(v26, v23);
          v24 += 2;
        }
        while (v24 != 8);
        v18 += 16;
        v22 += 8;
      }
      while (v7 != v18);
    }
    __int16 v40 = 257;
    NullValue = (unsigned __int8 *)sub_1CB935A74(a1, (uint64_t)NullValue, (uint64_t)v4, v41, v7, (uint64_t)v39);
  }
  v39[0] = "cast";
  __int16 v40 = 259;
  if (*(void *)NullValue != v6)
  {
    if (NullValue[16] <= 0x14u)
    {
      NullValue = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**(void **)(a1 + 72) + 224))(*(void *)(a1 + 72), 49, NullValue, v6);
      if (NullValue) {
        BOOL v31 = NullValue[16] >= 0x1Cu;
      }
      else {
        BOOL v31 = 0;
      }
      if (v31)
      {
        (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), NullValue, v39, *(void *)(a1 + 48), *(void *)(a1 + 56));
        uint64_t v36 = *(unsigned int *)(a1 + 8);
        if (v36)
        {
          uint64_t v37 = *(void *)a1;
          uint64_t v38 = v37 + 16 * v36;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)NullValue, *(_DWORD *)v37, *(llvm::MDNode **)(v37 + 8));
            v37 += 16;
          }
          while (v37 != v38);
        }
      }
    }
    else
    {
      __int16 v42 = 257;
      NullValue = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)NullValue, v6, v41, 0);
      (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), NullValue, v39, *(void *)(a1 + 48), *(void *)(a1 + 56));
      uint64_t v28 = *(unsigned int *)(a1 + 8);
      if (v28)
      {
        uint64_t v29 = *(void *)a1;
        uint64_t v30 = v29 + 16 * v28;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)NullValue, *(_DWORD *)v29, *(llvm::MDNode **)(v29 + 8));
          v29 += 16;
        }
        while (v29 != v30);
      }
    }
  }
  return NullValue;
}

unsigned __int8 *sub_1CC52D5D0(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  int v4 = a2;
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = (llvm::Type *)(8 * *(_DWORD *)(*(void *)a2 + 32));
  double v11 = llvm::FixedVectorType::get((llvm::FixedVectorType *)(**(void **)(a1 + 64) + 1912), v7);
  int v12 = (llvm::Constant *)v8;
  v39[0] = "cast";
  __int16 v40 = 259;
  if (*(void *)v4 != v8)
  {
    if (v4[16] <= 0x14u)
    {
      int v4 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t, double))(**(void **)(a1 + 72) + 224))(*(void *)(a1 + 72), 49, v4, v8, v11);
      if (v4) {
        BOOL v16 = v4[16] >= 0x1Cu;
      }
      else {
        BOOL v16 = 0;
      }
      if (v16)
      {
        (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v4, v39, *(void *)(a1 + 48), *(void *)(a1 + 56));
        uint64_t v33 = *(unsigned int *)(a1 + 8);
        if (v33)
        {
          uint64_t v34 = *(void *)a1;
          uint64_t v35 = *(void *)a1 + 16 * v33;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v4, *(_DWORD *)v34, *(llvm::MDNode **)(v34 + 8));
            v34 += 16;
          }
          while (v34 != v35);
        }
      }
    }
    else
    {
      __int16 v42 = 257;
      int v4 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v4, v8, v41, 0);
      (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v4, v39, *(void *)(a1 + 48), *(void *)(a1 + 56));
      uint64_t v13 = *(unsigned int *)(a1 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)a1;
        uint64_t v15 = *(void *)a1 + 16 * v13;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v4, *(_DWORD *)v14, *(llvm::MDNode **)(v14 + 8));
          v14 += 16;
        }
        while (v14 != v15);
      }
    }
  }
  NullValue = (unsigned __int8 *)llvm::Constant::getNullValue(v12, v9, v10);
  if (a3 <= 0xF)
  {
    if (v7)
    {
      unsigned int v18 = 0;
      int32x4_t v19 = vdupq_n_s32(a3);
      int8x16_t v20 = (int8x16_t)vdupq_n_s32((int)v7 - 16);
      int8x16_t v21 = v41;
      v22.i64[0] = 0xF0000000FLL;
      v22.i64[1] = 0xF0000000FLL;
      v23.i64[0] = 0x400000004;
      v23.i64[1] = 0x400000004;
      do
      {
        uint64_t v24 = 0;
        int32x4_t v25 = vdupq_n_s32(v18);
        int32x4_t v26 = (int32x4_t)xmmword_1CD923660;
        do
        {
          int32x4_t v27 = vaddq_s32(v26, v19);
          *(int32x4_t *)&v21[v24] = vaddq_s32(vaddq_s32(v27, v25), (int32x4_t)vandq_s8(v20, (int8x16_t)vcgtq_u32((uint32x4_t)v27, v22)));
          int32x4_t v26 = vaddq_s32(v26, v23);
          v24 += 2;
        }
        while (v24 != 8);
        v18 += 16;
        v21 += 8;
      }
      while (v7 != v18);
    }
    __int16 v40 = 257;
    NullValue = (unsigned __int8 *)sub_1CB935A74(a1, (uint64_t)v4, (uint64_t)NullValue, v41, v7, (uint64_t)v39);
  }
  v39[0] = "cast";
  __int16 v40 = 259;
  if (*(void *)NullValue != v6)
  {
    if (NullValue[16] <= 0x14u)
    {
      NullValue = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**(void **)(a1 + 72) + 224))(*(void *)(a1 + 72), 49, NullValue, v6);
      if (NullValue) {
        BOOL v31 = NullValue[16] >= 0x1Cu;
      }
      else {
        BOOL v31 = 0;
      }
      if (v31)
      {
        (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), NullValue, v39, *(void *)(a1 + 48), *(void *)(a1 + 56));
        uint64_t v36 = *(unsigned int *)(a1 + 8);
        if (v36)
        {
          uint64_t v37 = *(void *)a1;
          uint64_t v38 = v37 + 16 * v36;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)NullValue, *(_DWORD *)v37, *(llvm::MDNode **)(v37 + 8));
            v37 += 16;
          }
          while (v37 != v38);
        }
      }
    }
    else
    {
      __int16 v42 = 257;
      NullValue = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)NullValue, v6, v41, 0);
      (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), NullValue, v39, *(void *)(a1 + 48), *(void *)(a1 + 56));
      uint64_t v28 = *(unsigned int *)(a1 + 8);
      if (v28)
      {
        uint64_t v29 = *(void *)a1;
        uint64_t v30 = v29 + 16 * v28;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)NullValue, *(_DWORD *)v29, *(llvm::MDNode **)(v29 + 8));
          v29 += 16;
        }
        while (v29 != v30);
      }
    }
  }
  return NullValue;
}

llvm::Value *sub_1CC52D9D4(uint64_t *a1, uint64_t a2, int a3)
{
  v19[2] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(uint64_t ***)(*(void *)(*(void *)(a2 + 40) + 56) + 40);
  llvm::Intrinsic::getType(*v6, a3, 0, 0);
  uint64_t v7 = (unsigned __int8 *)off_1E6830B58[a3];
  if (v7) {
    uint64_t v8 = (const char *)strlen(off_1E6830B58[a3]);
  }
  else {
    uint64_t v8 = 0;
  }
  Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v6, a3, 0, 0);
  llvm::Module::getOrInsertFunction((uint64_t)v6, v7, v8, Type, 0);
  double v11 = (uint64_t **)v10;
  if (v10) {
    uint64_t v10 = *(void *)(v10 + 24);
  }
  int v12 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  uint64_t v13 = *v12;
  uint64_t v14 = v12[4];
  v19[0] = v13;
  v19[1] = v14;
  v18[16] = 257;
  uint64_t v15 = (llvm::Value *)sub_1CB845BAC(a1, (uint64_t **)v10, v11, v19, 2, (uint64_t)v18, 0);
  uint64_t v16 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
  return sub_1CC52BAD0((llvm::IRBuilderBase *)a1, *(unsigned __int8 **)(v16 + 96), v15, *(llvm::Value **)(v16 + 64));
}

uint64_t sub_1CC52DB14(llvm::ValueAsMetadata ***a1)
{
  v33[6] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = (uint64_t *)a1[1];
  uint64_t v3 = (uint64_t)**a1;
  uint64_t v4 = *v2;
  if (*(void *)(v3 + 72) != *(void *)(*v2 + 24))
  {
    int v5 = *(_DWORD *)(v3 + 20);
    uint64_t v6 = v5 & 0x7FFFFFF;
    uint64_t v7 = (void *)(v3 - 32 * v6);
    int v8 = *(unsigned __int8 *)(v3 + 16);
    if (v8 == 84)
    {
      uint64_t v9 = 0;
    }
    else if (v8 == 39)
    {
      uint64_t v9 = (*(_DWORD *)(v3 + 80) + 1);
    }
    else
    {
      uint64_t v9 = 2;
    }
    if (v5 < 0 && (uint64_t v27 = *(v7 - 1), (v27 & 0xFFFFFFFF0) != 0)) {
      uint64_t v10 = (*((_DWORD *)v7 - 3) - *(_DWORD *)((char *)v7 - v27));
    }
    else {
      uint64_t v10 = 0;
    }
    double v11 = *(llvm::PoisonValue **)v3;
    uint64_t v12 = v3 - 32 * v9 - 32 * v10 - 32;
    BOOL v31 = v33;
    uint64_t v32 = 0x600000000;
    unint64_t v13 = v12 - (void)v7;
    if ((unint64_t)(v12 - (void)v7) < 0xC1)
    {
      if (v7 != (void *)v12)
      {
        uint64_t v14 = v31;
        uint64_t v15 = 32 * v6 - 32 * v9 - 32 * v10 - 32;
        do
        {
          uint64_t v16 = *v7;
          v7 += 4;
          *v14++ = v16;
          v15 -= 32;
        }
        while (v15);
      }
      LODWORD(v32) = v13 >> 5;
      unsigned int v17 = (uint64_t *)a1[2];
      uint64_t v18 = (uint64_t)*a1[1];
      if (v18) {
        int32x4_t v19 = *(uint64_t ***)(v18 + 24);
      }
      else {
        int32x4_t v19 = 0;
      }
      __int16 v30 = 257;
      int8x16_t v21 = (uint64_t *)sub_1CB845BAC(v17, v19, (uint64_t **)v18, (uint64_t *)v31, (v13 >> 5), (uint64_t)v29, 0);
      int32x4_t v23 = (llvm::Value *)llvm::PoisonValue::get(v11, v22);
      for (unsigned int i = 0; i < *((_DWORD *)v11 + 3); ++i)
      {
        uint64_t v24 = (uint64_t)a1[2];
        __int16 v30 = 257;
        int32x4_t v25 = sub_1CC2415A4(v24, v21, &i, 1, (uint64_t)v29);
        uint64_t v26 = (uint64_t)a1[2];
        __int16 v30 = 257;
        int32x4_t v23 = sub_1CC2411F8(v26, (uint64_t)v23, (uint64_t)v25, &i, 1, (uint64_t)v29);
      }
      llvm::Value::doRAUW(**a1, v23, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }

  return sub_1CC1DDE04(v3, v4);
}

uint64_t sub_1CC52DDDC(uint64_t a1, __int16 a2)
{
  uint64_t v4 = (void *)(a1 + 64);
  uint64_t result = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(a1 + 64), **(uint64_t ***)a1, 1, 74);
  *(void *)(a1 + 64) = result;
  if ((a2 & 0xFF00) != 0)
  {
    unint64_t v6 = llvm::Attribute::get(**(uint64_t ***)a1, 0x4Au, 1 << a2);
    int v7 = 0;
    uint64_t result = llvm::AttributeList::addParamAttribute(v4, **(uint64_t ***)a1, &v7, 1, v6);
    *(void *)(a1 + 64) = result;
  }
  return result;
}

uint64_t sub_1CC52DE74(uint64_t a1, __int16 a2)
{
  uint64_t v4 = (void *)(a1 + 64);
  uint64_t result = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(a1 + 64), **(uint64_t ***)a1, 2, 74);
  *(void *)(a1 + 64) = result;
  if ((a2 & 0xFF00) != 0)
  {
    unint64_t v6 = llvm::Attribute::get(**(uint64_t ***)a1, 0x4Au, 1 << a2);
    int v7 = 1;
    uint64_t result = llvm::AttributeList::addParamAttribute(v4, **(uint64_t ***)a1, &v7, 1, v6);
    *(void *)(a1 + 64) = result;
  }
  return result;
}

llvm::MDNode *llvm::UpgradeTBAANode(llvm *this, llvm::MDNode *a2, const llvm::APFloat *a3)
{
  uint64_t v3 = this;
  v26[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((unsigned int *)this + 2);
  int v5 = (unsigned __int8 **)((char *)this - 8 * v4);
  uint64_t v6 = (uint64_t)*v5;
  if (v4 < 3 || **v5 - 4 >= 0x1F)
  {
    uint64_t v9 = *((void *)this + 2);
    unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFF8;
    if ((v9 & 4) != 0) {
      unint64_t v10 = *(void *)v10;
    }
    if (v4 == 3)
    {
      double v11 = v5[1];
      v26[0] = v6;
      v26[1] = v11;
      Impl = llvm::MDTuple::getImpl(v10, v26, 2, 0, 1);
      int32x4_t v23 = Impl;
      NullValue = llvm::Constant::getNullValue((llvm::Constant *)(*(void *)v10 + 1984), v12, v13);
      uint64_t v16 = llvm::ValueAsMetadata::get(NullValue, v15);
      uint64_t v17 = ((void *)v3 - *((unsigned int *)v3 + 2))[2];
      uint64_t v24 = v16;
      uint64_t v25 = v17;
      uint64_t v18 = v10;
      uint64_t v19 = 4;
    }
    else
    {
      Impl = this;
      int32x4_t v23 = this;
      int8x16_t v20 = llvm::Constant::getNullValue((llvm::Constant *)(*(void *)v10 + 1984), a2, a3);
      uint64_t v24 = llvm::ValueAsMetadata::get(v20, v21);
      uint64_t v18 = v10;
      uint64_t v19 = 3;
    }
    return llvm::MDTuple::getImpl(v18, &Impl, v19, 0, 1);
  }
  return v3;
}

llvm::Value *llvm::UpgradeBitCastInst(llvm *this, uint64_t a2, llvm::Value *a3, llvm::Type *a4, llvm::Instruction **a5)
{
  if (this != 49) {
    return 0;
  }
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  *(void *)a4 = 0;
  int v8 = *(void ***)a2;
  unsigned int v9 = *(_DWORD *)(*(void *)a2 + 8);
  char v10 = v9;
  if ((v9 & 0xFE) == 0x12) {
    char v10 = *(unsigned char *)(*v8[2] + 8);
  }
  if (v10 != 15) {
    return 0;
  }
  int v11 = *((_DWORD *)a3 + 2);
  char v12 = v11;
  if ((v11 & 0xFE) == 0x12) {
    char v12 = *(unsigned char *)(**((void **)a3 + 2) + 8);
  }
  if (v12 != 15) {
    return 0;
  }
  if ((v9 & 0xFE) == 0x12) {
    unsigned int v9 = *(_DWORD *)(*v8[2] + 8);
  }
  if ((v11 & 0xFE) == 0x12) {
    int v11 = *(_DWORD *)(**((void **)a3 + 2) + 8);
  }
  if ((v11 ^ v9) < 0x100) {
    return 0;
  }
  uint64_t v13 = **v8 + 1984;
  __int16 v18 = 257;
  uint64_t v16 = llvm::CastInst::Create(47, a2, v13, v17, 0);
  *(void *)a4 = v16;
  __int16 v18 = 257;
  return llvm::CastInst::Create(48, (uint64_t)v16, (uint64_t)a3, v17, 0);
}

llvm::detail::IEEEFloat *llvm::UpgradeBitCastExpr(llvm *this, llvm::ConstantExpr *a2, llvm::Constant *a3, llvm::Type *a4)
{
  if (this != 49) {
    return 0;
  }
  uint64_t v5 = *(void ***)a2;
  unsigned int v6 = *(_DWORD *)(*(void *)a2 + 8);
  char v7 = v6;
  if ((v6 & 0xFE) == 0x12) {
    char v7 = *(unsigned char *)(*v5[2] + 8);
  }
  if (v7 != 15) {
    return 0;
  }
  int v8 = *((_DWORD *)a3 + 2);
  char v9 = v8;
  if ((v8 & 0xFE) == 0x12) {
    char v9 = *(unsigned char *)(**((void **)a3 + 2) + 8);
  }
  if (v9 != 15) {
    return 0;
  }
  if ((v6 & 0xFE) == 0x12) {
    unsigned int v6 = *(_DWORD *)(*v5[2] + 8);
  }
  if ((v8 & 0xFE) == 0x12) {
    int v8 = *(_DWORD *)(**((void **)a3 + 2) + 8);
  }
  if ((v8 ^ v6) < 0x100) {
    return 0;
  }
  PtrToInt = llvm::ConstantExpr::getPtrToInt(a2, (llvm::Constant *)(**v5 + 1984), 0);

  return llvm::ConstantExpr::getIntToPtr(PtrToInt, a3, 0);
}

uint64_t llvm::UpgradeDebugInfo(llvm **this, llvm::Module *a2)
{
  DebugMetadataVersionFromModule = (llvm *)llvm::getDebugMetadataVersionFromModule((llvm *)this, a2);
  if (DebugMetadataVersionFromModule == 700000003
    || (int v5 = (int)DebugMetadataVersionFromModule, DebugMetadataVersionFromModule == 3))
  {
    char v25 = 0;
    unsigned int v6 = (const llvm::Module *)llvm::errs(DebugMetadataVersionFromModule);
    if (llvm::verifyModule((llvm *)this, v6, (llvm::raw_ostream *)&v25, v7)) {
      llvm::report_fatal_error((llvm *)"Broken module found, compilation aborted!", (const llvm::Twine *)1);
    }
    if (!v25)
    {
      char v9 = 0;
      return v9 & 1;
    }
    int v21 = 5;
    char v22 = 1;
    uint64_t v20 = &unk_1F2616740;
    int32x4_t v23 = (llvm *)this;
    llvm::LLVMContext::diagnose((uint64_t)*this, (const llvm::DiagnosticInfo *)&v20);
    char v9 = llvm::StripDebugInfo((llvm *)this, v8);
  }
  else if (llvm::StripDebugInfo((llvm *)this, v4))
  {
    int v21 = 5;
    char v9 = 1;
    char v22 = 1;
    uint64_t v20 = &unk_1F2616710;
    int32x4_t v23 = (llvm *)this;
    int v24 = v5;
    llvm::LLVMContext::diagnose((uint64_t)*this, (const llvm::DiagnosticInfo *)&v20);
  }
  else
  {
    char v9 = 0;
  }
  char v10 = this[10];
  if (v10 != (llvm *)(this + 9))
  {
    do
    {
      int v11 = (llvm *)*((void *)v10 + 1);
      char v12 = *((unsigned char *)v10 + 39);
      int v13 = v12;
      unint64_t v14 = v12 & 0x7E;
      if (v13 < 0) {
        unint64_t v14 = *((void *)v10 + 3);
      }
      if (v14 >= 0xA)
      {
        if (v13 >= 0) {
          uint64_t v15 = (char *)v10 + 16;
        }
        else {
          uint64_t v15 = (char *)*((void *)v10 + 2);
        }
        uint64_t v16 = *(void *)v15;
        int v17 = *((unsigned __int16 *)v15 + 4);
        if (v16 == 0x696F706563617274 && v17 == 29806)
        {
          llvm::Module::eraseNamedMetadata(*((llvm::Module **)v10 + 5), v10);
          char v9 = 1;
        }
      }
      char v10 = v11;
    }
    while (v11 != (llvm *)(this + 9));
  }
  return v9 & 1;
}

void llvm::UpgradeARCRuntime(llvm *this, llvm::Module *a2)
{
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  sub_1CC52E910((uint64_t)this, "clang.arc.use", 214);
  uint64_t v29 = "clang.arc.retainAutoreleasedReturnValueMarker";
  LOWORD(v33) = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(this, (const char **)&v29);
  if (NamedMetadata)
  {
    uint64_t v4 = ***(void ***)(NamedMetadata + 48);
    if (v4)
    {
      int v5 = *(void **)(v4 - 8 * *(unsigned int *)(v4 + 8));
      if (v5)
      {
        if (!*(unsigned char *)v5)
        {
          int32x4_t v23 = (llvm::NamedMDNode *)NamedMetadata;
          uint64_t v29 = &v31;
          uint64_t v30 = 0x400000000;
          unsigned int v6 = (void **)v5[1];
          char v7 = *v6;
          __p[0] = v6 + 3;
          __p[1] = v7;
          llvm::StringRef::split(__p, (uint64_t)&v29, "#", 1uLL, -1, 1);
          if (v30 == 2)
          {
            if (*(void *)v29) {
              std::string::__init(&v25, *(const std::string::value_type **)v29, *((void *)v29 + 1));
            }
            else {
              memset(&v25, 0, sizeof(v25));
            }
            int v8 = std::string::append(&v25, ";");
            std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
            v26.__r_.__value_.__r.__words[2] = v9;
            v8->__r_.__value_.__l.__size_ = 0;
            v8->__r_.__value_.__r.__words[2] = 0;
            v8->__r_.__value_.__r.__words[0] = 0;
            char v10 = (const std::string::value_type *)*((void *)v29 + 2);
            if (v10)
            {
              std::string::__init(&v24, v10, *((void *)v29 + 3));
              char v11 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
              std::string::size_type size = v24.__r_.__value_.__l.__size_;
              std::string::size_type v13 = v24.__r_.__value_.__r.__words[0];
            }
            else
            {
              std::string::size_type size = 0;
              std::string::size_type v13 = 0;
              char v11 = 0;
              memset(&v24, 0, sizeof(v24));
            }
            BOOL v14 = v11 < 0;
            if (v11 >= 0) {
              uint64_t v15 = &v24;
            }
            else {
              uint64_t v15 = (std::string *)v13;
            }
            std::string::size_type v16 = v11 & 0x7F;
            if (v14) {
              std::string::size_type v17 = size;
            }
            else {
              std::string::size_type v17 = v16;
            }
            __int16 v18 = std::string::append(&v26, (const std::string::value_type *)v15, v17);
            std::string::size_type v19 = v18->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
            uint64_t v28 = v19;
            v18->__r_.__value_.__l.__size_ = 0;
            v18->__r_.__value_.__r.__words[2] = 0;
            v18->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v24.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v26.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v25.__r_.__value_.__l.__data_);
            }
            if (v28 >= 0) {
              uint64_t v20 = (unsigned __int8 *)__p;
            }
            else {
              uint64_t v20 = (unsigned __int8 *)__p[0];
            }
            if (v28 >= 0) {
              size_t v21 = HIBYTE(v28) & 0x7F;
            }
            else {
              size_t v21 = (size_t)__p[1];
            }
            int v5 = llvm::MDString::get(*(uint64_t **)this, v20, v21);
            if (SHIBYTE(v28) < 0) {
              operator delete(__p[0]);
            }
          }
          llvm::Module::addModuleFlag((uint64_t **)this, (llvm::Type *)1, "clang.arc.retainAutoreleasedReturnValueMarker", 0x2DuLL, (uint64_t)v5);
          llvm::Module::eraseNamedMetadata(this, v23);
          if (v29 != &v31) {
            free(v29);
          }
          uint64_t v22 = 0;
          uint64_t v29 = "objc_autorelease";
          LODWORD(v30) = 208;
          int v32 = 209;
          int v34 = 210;
          uint64_t v35 = "objc_autoreleaseReturnValue";
          int v36 = 211;
          uint64_t v37 = "objc_copyWeak";
          int v38 = 215;
          uint64_t v39 = "objc_destroyWeak";
          int v40 = 216;
          __int16 v41 = "objc_initWeak";
          int v42 = 217;
          uint64_t v43 = "objc_loadWeak";
          int v44 = 218;
          uint64_t v45 = "objc_loadWeakRetained";
          int v46 = 219;
          int v47 = "objc_moveWeak";
          int v48 = 220;
          int v49 = "objc_release";
          int v50 = 221;
          uint64_t v51 = "objc_retain";
          int v52 = 222;
          int v53 = "objc_retainAutorelease";
          int v54 = 224;
          int v55 = "objc_retainAutoreleaseReturnValue";
          int v56 = 225;
          uint64_t v57 = "objc_retainAutoreleasedReturnValue";
          int v58 = 226;
          unint64_t v59 = "objc_retainBlock";
          int v60 = 227;
          int v61 = "objc_storeStrong";
          int v62 = 229;
          int v63 = "objc_storeWeak";
          int v64 = 230;
          BOOL v65 = "objc_unsafeClaimAutoreleasedReturnValue";
          int v66 = 235;
          uint64_t v67 = "objc_retainedObject";
          int v68 = 228;
          uint64_t v69 = "objc_unretainedObject";
          int v70 = 233;
          v71 = "objc_unretainedPointer";
          int v72 = 234;
          uint64_t v73 = "objc_retain_autorelease";
          int v74 = 223;
          BOOL v75 = "objc_sync_enter";
          int v76 = 231;
          int v77 = "objc_sync_exit";
          int v78 = 232;
          uint64_t v79 = "objc_arc_annotation_topdown_bbstart";
          int v80 = 207;
          uint64_t v81 = "objc_arc_annotation_topdown_bbend";
          int v82 = 206;
          char v83 = "objc_arc_annotation_bottomup_bbstart";
          int v84 = 205;
          uint64_t v85 = "objc_arc_annotation_bottomup_bbend";
          int v86 = 204;
          do
          {
            sub_1CC52E910((uint64_t)this, *(char **)((char *)&v29 + v22), *(_DWORD *)((char *)&v29 + v22 + 8));
            v22 += 16;
          }
          while (v22 != 464);
        }
      }
    }
  }
}

void sub_1CC52E910(uint64_t a1, char *__s, int a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  if (!__s)
  {
    unsigned int v6 = *(uint64_t **)(a1 + 112);
    unsigned int v10 = *((_DWORD *)v6 + 2);
    if (!v10) {
      return;
    }
    size_t v9 = 0;
LABEL_19:
    int v13 = 0;
    BOOL v11 = 1;
    goto LABEL_20;
  }
  size_t v5 = strlen(__s);
  unsigned int v6 = *(uint64_t **)(a1 + 112);
  size_t v7 = *((unsigned int *)v6 + 8);
  if (v7 <= 1) {
    unint64_t v8 = 1;
  }
  else {
    unint64_t v8 = v7;
  }
  if (v5 < v8) {
    unint64_t v8 = v5;
  }
  if (v5 <= v7) {
    unint64_t v8 = v5;
  }
  if ((v7 & 0x80000000) == 0) {
    size_t v9 = v8;
  }
  else {
    size_t v9 = v5;
  }
  unsigned int v10 = *((_DWORD *)v6 + 2);
  if (!v10) {
    return;
  }
  BOOL v11 = v9 == 0;
  if (!v9) {
    goto LABEL_19;
  }
  uint64_t v12 = 0;
  int v13 = 0;
  do
    int v13 = 33 * v13 + __s[v12++];
  while (v9 != v12);
LABEL_20:
  unsigned int v14 = v10 - 1;
  uint64_t v15 = *v6;
  uint64_t v58 = v10;
  uint64_t v16 = *v6 + 8 * v10 + 8;
  int v17 = 1;
  int v18 = v13;
  while (1)
  {
    uint64_t v19 = v18 & v14;
    uint64_t v20 = *(void **)(v15 + 8 * v19);
    if (v20 != (void *)-8)
    {
      if (!v20) {
        return;
      }
      if (*(_DWORD *)(v16 + 4 * v19) == v13
        && v9 == *v20
        && (v11 || !memcmp(__s, (char *)v20 + *((unsigned int *)v6 + 5), v9)))
      {
        break;
      }
    }
    int v18 = v17 + v19;
    ++v17;
  }
  if (v19 != -1 && (int)v19 != v58)
  {
    uint64_t v21 = *(void *)(*(void *)(v15 + 8 * (int)v19) + 8);
    if (v21)
    {
      if (!*(unsigned char *)(v21 + 16))
      {
        llvm::Intrinsic::getType(*(uint64_t **)a1, a3, 0, 0);
        uint64_t v22 = (unsigned __int8 *)off_1E6830B58[a3];
        int32x4_t v23 = v22 ? (const char *)strlen(off_1E6830B58[a3]) : 0;
        Type = (llvm::PointerType *)llvm::Intrinsic::getType(*(uint64_t **)a1, a3, 0, 0);
        llvm::Module::getOrInsertFunction(a1, v22, v23, Type, 0);
        uint64_t v59 = v25;
        uint64_t v26 = *(void *)(v21 + 8);
        if (!v26) {
          goto LABEL_101;
        }
        do
        {
          while (1)
          {
            uint64_t v27 = *(void *)(v26 + 24);
            uint64_t v26 = *(void *)(v26 + 8);
            if (v27)
            {
              if (*(unsigned char *)(v27 + 16) == 84)
              {
                uint64_t v28 = *(void *)(v27 - 32);
                if (!v28 || *(unsigned char *)(v28 + 16) || *(void *)(v28 + 24) != *(void *)(v27 + 72)) {
                  uint64_t v28 = 0;
                }
                if (v28 == v21)
                {
                  sub_1CBF537B4((uint64_t)&v67, *(uint64_t ***)(v27 + 40), v27 + 24, 0, 0, 0);
                  uint64_t v29 = *(void *)(v59 + 24);
                  int v64 = v66;
                  uint64_t v65 = 0x200000000;
                  uint64_t v30 = *(uint64_t **)(v29 + 16);
                  if (*v30 == *(void *)v27 || llvm::CastInst::castIsValid(49, *(llvm::Type **)v27, *v30))
                  {
                    int v31 = *(unsigned __int8 *)(v27 + 16);
                    if (v31 == 84)
                    {
                      uint64_t v32 = 0;
                    }
                    else if (v31 == 39)
                    {
                      uint64_t v32 = (*(_DWORD *)(v27 + 80) + 1);
                    }
                    else
                    {
                      uint64_t v32 = 2;
                    }
                    int v33 = *(_DWORD *)(v27 + 20);
                    if (v33 < 0
                      && (uint64_t v50 = v27 - 32 * (v33 & 0x7FFFFFF), v51 = *(void *)(v50 - 8), (v51 & 0xFFFFFFFF0) != 0))
                    {
                      uint64_t v35 = -(uint64_t)(v33 & 0x7FFFFFF);
                      uint64_t v34 = (*(_DWORD *)(v50 - 12) - *(_DWORD *)(v50 - v51));
                    }
                    else
                    {
                      uint64_t v34 = 0;
                      uint64_t v35 = -(uint64_t)(v33 & 0x7FFFFFF);
                    }
                    unint64_t v36 = -32 * v32 - 32 * v34 - 32 * v35 - 32;
                    if ((v36 & 0x1FFFFFFFE0) != 0)
                    {
                      unint64_t v37 = 0;
                      uint64_t v38 = (v36 >> 5);
                      do
                      {
                        uint64_t v39 = *(llvm::Value **)(v27 - 32 * (*(_DWORD *)(v27 + 20) & 0x7FFFFFF) + 32 * v37);
                        if (v37 < (*(_DWORD *)(v29 + 12) - 1))
                        {
                          if (!llvm::CastInst::castIsValid(49, *(llvm::Type **)v39, *(void *)(*(void *)(v29 + 16) + 8 * (v37 + 1))))goto LABEL_84; {
                          uint64_t v40 = *(void *)(*(void *)(v29 + 16) + 8 * (v37 + 1));
                          }
                          __int16 v61 = 257;
                          if (*(void *)v39 != v40)
                          {
                            if (*((unsigned __int8 *)v39 + 16) <= 0x14u)
                            {
                              uint64_t v39 = (llvm::Value *)(*(uint64_t (**)(uint64_t, uint64_t, llvm::Value *, uint64_t))(*(void *)v72 + 224))(v72, 49, v39, v40);
                              if (v39) {
                                BOOL v42 = *((unsigned __int8 *)v39 + 16) >= 0x1Cu;
                              }
                              else {
                                BOOL v42 = 0;
                              }
                              if (v42)
                              {
                                (*(void (**)(uint64_t, llvm::Value *, unsigned char *, uint64_t, uint64_t))(*(void *)v73 + 16))(v73, v39, v60, v70, v71);
                                if (v68)
                                {
                                  int v44 = (llvm::MDNode **)v67;
                                  int v55 = (llvm::MDNode **)((char *)v67 + 16 * v68);
                                  do
                                  {
                                    llvm::Instruction::setMetadata(v39, *(_DWORD *)v44, v44[1]);
                                    v44 += 2;
                                  }
                                  while (v44 != v55);
                                }
                              }
                            }
                            else
                            {
                              __int16 v63 = 257;
                              uint64_t v39 = llvm::CastInst::Create(49, (uint64_t)v39, v40, v62, 0);
                              (*(void (**)(uint64_t, llvm::Value *, unsigned char *, uint64_t, uint64_t))(*(void *)v73 + 16))(v73, v39, v60, v70, v71);
                              if (v68)
                              {
                                __int16 v41 = (llvm::MDNode **)v67;
                                int v54 = (llvm::MDNode **)((char *)v67 + 16 * v68);
                                do
                                {
                                  llvm::Instruction::setMetadata(v39, *(_DWORD *)v41, v41[1]);
                                  v41 += 2;
                                }
                                while (v41 != v54);
                              }
                            }
                          }
                        }
                        if (v65 >= (unint64_t)HIDWORD(v65)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *((void *)v64 + v65) = v39;
                        unsigned int v43 = v65 + 1;
                        LODWORD(v65) = v65 + 1;
                        ++v37;
                      }
                      while (v37 != v38);
                    }
                    else
                    {
                      unsigned int v43 = v65;
                    }
                    __int16 v63 = 257;
                    uint64_t v45 = sub_1CB845BAC((uint64_t *)&v67, (uint64_t **)v29, (uint64_t **)v59, (uint64_t *)v64, v43, (uint64_t)v62, 0);
                    *(_WORD *)(v45 + 18) = *(_WORD *)(v45 + 18) & 0xFFFC | *(_WORD *)(v27 + 18) & 3;
                    llvm::Value::takeName((int32x2_t ****)v45, (llvm::Value *)v27);
                    uint64_t v46 = *(void *)v27;
                    __int16 v61 = 257;
                    if (*(void *)v45 != v46)
                    {
                      if (*(unsigned __int8 *)(v45 + 16) <= 0x14u)
                      {
                        uint64_t v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v72 + 224))(v72, 49, v45, v46);
                        if (v45) {
                          BOOL v49 = *(unsigned __int8 *)(v45 + 16) >= 0x1Cu;
                        }
                        else {
                          BOOL v49 = 0;
                        }
                        if (v49)
                        {
                          (*(void (**)(uint64_t, uint64_t, unsigned char *, uint64_t, uint64_t))(*(void *)v73 + 16))(v73, v45, v60, v70, v71);
                          if (v68)
                          {
                            int v52 = (llvm::MDNode **)v67;
                            int v53 = (llvm::MDNode **)((char *)v67 + 16 * v68);
                            do
                            {
                              llvm::Instruction::setMetadata((llvm::Instruction *)v45, *(_DWORD *)v52, v52[1]);
                              v52 += 2;
                            }
                            while (v52 != v53);
                          }
                        }
                      }
                      else
                      {
                        __int16 v63 = 257;
                        uint64_t v45 = (uint64_t)llvm::CastInst::Create(49, v45, v46, v62, 0);
                        (*(void (**)(uint64_t, uint64_t, unsigned char *, uint64_t, uint64_t))(*(void *)v73 + 16))(v73, v45, v60, v70, v71);
                        if (v68)
                        {
                          int v47 = (llvm::MDNode **)v67;
                          int v48 = (llvm::MDNode **)((char *)v67 + 16 * v68);
                          do
                          {
                            llvm::Instruction::setMetadata((llvm::Instruction *)v45, *(_DWORD *)v47, v47[1]);
                            v47 += 2;
                          }
                          while (v47 != v48);
                        }
                      }
                    }
                    if (*(void *)(v27 + 8)) {
                      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v27, (llvm::Value *)v45, (llvm::Value *)1);
                    }
                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                  }
LABEL_84:
                  if (v64 != v66) {
                    free(v64);
                  }
                  if (v67 != &v69) {
                    break;
                  }
                }
              }
            }
            if (!v26) {
              goto LABEL_100;
            }
          }
          free(v67);
        }
        while (v26);
LABEL_100:
        if (!*(void *)(v21 + 8)) {
LABEL_101:
        }
          llvm::Function::eraseFromParent((llvm::Function *)v21);
      }
    }
  }
}

uint64_t llvm::UpgradeModuleFlags(llvm *this, llvm::Module *a2)
{
  uint64_t v178 = *MEMORY[0x1E4F143B8];
  uint64_t v174 = "llvm.module.flags";
  __int16 v177 = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(this, (const char **)&v174);
  if (!NamedMetadata)
  {
    return sub_1CC52FF50((uint64_t **)this);
  }
  uint64_t v4 = (llvm::APInt *)*(unsigned int *)(*(void *)(NamedMetadata + 48) + 8);
  if (!v4)
  {
    LOBYTE(v8) = 0;
    goto LABEL_27;
  }
  size_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  int v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unint64_t v13 = 0;
  uint64_t v14 = **(void **)this;
  uint64_t v15 = (llvm::ConstantInt *)(v14 + 1912);
  uint64_t v16 = (llvm::ConstantInt *)(v14 + 1960);
  do
  {
    uint64_t v17 = *(void *)(**(void **)(NamedMetadata + 48) + 8 * (void)v5);
    if (*(_DWORD *)(v17 + 8) != 3) {
      goto LABEL_23;
    }
    uint64_t v18 = *(void *)(v17 - 16);
    if (!v18 || *(unsigned char *)v18) {
      goto LABEL_23;
    }
    uint64_t v19 = *(void *)(v18 + 8);
    uint64_t v21 = (uint64_t *)(v19 + 24);
    unint64_t v20 = *(void *)v19;
    if (*(void *)v19 != 9)
    {
      if (v20 == 28)
      {
        BOOL v42 = v4;
        BOOL v46 = *v21 == 0x76697463656A624FLL
           && *(void *)(v19 + 32) == 0x73616C4320432D65
           && *(void *)(v19 + 40) == 0x7265706F72502073
           && *(_DWORD *)(v19 + 48) == 1936025972;
      }
      else
      {
        if (v20 != 30) {
          goto LABEL_10;
        }
        BOOL v42 = v4;
        BOOL v46 = 0;
        BOOL v50 = *v21 == 0x76697463656A624FLL
           && *(void *)(v19 + 32) == 0x67616D4920432D65
           && *(void *)(v19 + 40) == 0x56206F666E492065
           && *(void *)(v19 + 46) == 0x6E6F697372655620;
        uint64_t v6 = v50 | v6;
      }
      uint64_t v7 = v46 | v7;
      uint64_t v4 = v42;
      goto LABEL_11;
    }
    if ((*v21 != 0x6576654C20434950 || *(unsigned char *)(v19 + 32) != 108)
      && (*v21 != 0x6576654C20454950 || *(unsigned char *)(v19 + 32) != 108))
    {
      goto LABEL_11;
    }
    uint64_t v30 = *(void *)(v17 - 24);
    if (!v30) {
      goto LABEL_11;
    }
    if (*(unsigned char *)v30 != 1) {
      goto LABEL_11;
    }
    uint64_t v31 = *(void *)(v30 + 128);
    if (*(unsigned char *)(v31 + 16) != 16) {
      goto LABEL_11;
    }
    uint64_t v32 = (llvm::APInt *)(v31 + 24);
    unsigned int v33 = *(_DWORD *)(v31 + 32);
    if (v33 >= 0x41)
    {
      uint64_t v143 = *(void *)(v18 + 8);
      uint64_t v137 = v8;
      uint64_t v139 = *(void *)(v17 - 16);
      unsigned int v167 = v7;
      unsigned int v153 = v10;
      unsigned int v157 = v6;
      uint64_t v163 = v4;
      uint64_t v171 = v11;
      uint64_t v150 = v12;
      int v160 = v9;
      int v131 = v16;
      int v132 = v5;
      uint64_t v133 = NamedMetadata;
      uint64_t v134 = (llvm::Type *)v13;
      uint64_t v135 = v15;
      uint64_t v136 = (llvm::APInt **)v32;
      if (v33 - llvm::APInt::countLeadingZerosSlowCase(v32) > 0x40)
      {
        uint64_t v15 = v135;
        unint64_t v13 = (unint64_t)v134;
        uint64_t NamedMetadata = v133;
        size_t v5 = v132;
        uint64_t v16 = v131;
        uint64_t v6 = v157;
        int v9 = v160;
        uint64_t v12 = v150;
        uint64_t v11 = v171;
        uint64_t v10 = v153;
        uint64_t v4 = v163;
        uint64_t v7 = v167;
        uint64_t v8 = v137;
        uint64_t v18 = v139;
        uint64_t v19 = v143;
        unint64_t v20 = 9;
        goto LABEL_11;
      }
      uint64_t v32 = *v136;
      uint64_t v15 = v135;
      unint64_t v13 = (unint64_t)v134;
      uint64_t NamedMetadata = v133;
      size_t v5 = v132;
      uint64_t v16 = v131;
      uint64_t v6 = v157;
      int v9 = v160;
      uint64_t v12 = v150;
      uint64_t v11 = v171;
      uint64_t v10 = v153;
      uint64_t v4 = v163;
      uint64_t v7 = v167;
      uint64_t v8 = v137;
      uint64_t v18 = v139;
      uint64_t v19 = v143;
      unint64_t v20 = 9;
    }
    if (*(void *)v32 != 1) {
      goto LABEL_11;
    }
    uint64_t v34 = (llvm::ConstantInt *)(**(void **)this + 1960);
    uint64_t v174 = 0;
    uint64_t v175 = 0;
    v176[0] = 0;
    uint64_t v164 = v15;
    uint64_t v168 = v11;
    int v140 = (llvm::NamedMDNode *)NamedMetadata;
    uint64_t v144 = v5;
    uint64_t v147 = v16;
    unsigned int v154 = v13;
    uint64_t v35 = v10;
    uint64_t v36 = v6;
    uint64_t v37 = v7;
    uint64_t v38 = v4;
    uint64_t v39 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v34, 7uLL, 0);
    uint64_t v174 = (void *)llvm::ValueAsMetadata::get(v39, v40);
    uint64_t v175 = (uint64_t)llvm::MDString::get(*(uint64_t **)this, (unsigned __int8 *)(*(void *)(v18 + 8) + 24), **(void **)(v18 + 8));
    v176[0] = *(void *)(v17 - 8 * *(unsigned int *)(v17 + 8) + 16);
    uint64_t v8 = 1;
    Impl = llvm::MDTuple::getImpl(*(void *)this, &v174, 3, 0, 1);
    llvm::NamedMDNode::setOperand(v140, v144, Impl);
    uint64_t v4 = v38;
    uint64_t v7 = v37;
    uint64_t v6 = v36;
    uint64_t v10 = v35;
    uint64_t v15 = v164;
    uint64_t v11 = v168;
    size_t v5 = v144;
    uint64_t v16 = v147;
    uint64_t NamedMetadata = (uint64_t)v140;
    unint64_t v13 = v154;
    uint64_t v19 = *(void *)(v18 + 8);
    unint64_t v20 = *(void *)v19;
LABEL_10:
    uint64_t v21 = (uint64_t *)(v19 + 24);
    if (v20 == 25)
    {
      BOOL v53 = *v21 == 0x742D68636E617262
         && *(void *)(v19 + 32) == 0x6E652D7465677261
         && *(void *)(v19 + 40) == 0x6E656D6563726F66
         && *(unsigned char *)(v19 + 48) == 116;
      unint64_t v20 = 25;
      if (v53) {
        goto LABEL_81;
      }
      goto LABEL_12;
    }
LABEL_11:
    if (v20 < 0x13) {
      goto LABEL_21;
    }
LABEL_12:
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    uint64_t v24 = *(uint64_t *)((char *)v21 + 11);
    if (v22 != 0x7465722D6E676973 || v23 != 0x726464612D6E7275 || v24 != 0x737365726464612DLL) {
      goto LABEL_19;
    }
LABEL_81:
    int v148 = v16;
    uint64_t v149 = v12;
    unsigned int v155 = v6;
    int v158 = v9;
    uint64_t v169 = v11;
    unsigned int v151 = v10;
    uint64_t v161 = v4;
    unsigned int v165 = v7;
    unint64_t v54 = v20;
    uint64_t v55 = v19;
    int v56 = v5;
    uint64_t v57 = (llvm::NamedMDNode *)NamedMetadata;
    uint64_t v58 = (llvm::Type *)v13;
    uint64_t v59 = v15;
    uint64_t v60 = *(void *)(v17 - 8 * *(unsigned int *)(v17 + 8));
    if (!v60 || *(unsigned char *)v60 != 1 || (uint64_t v61 = *(void *)(v60 + 128), *(unsigned char *)(v61 + 16) != 16))
    {
LABEL_157:
      uint64_t v15 = v59;
      unint64_t v13 = (unint64_t)v58;
      uint64_t NamedMetadata = (uint64_t)v57;
      size_t v5 = v56;
      uint64_t v16 = v148;
      uint64_t v12 = v149;
      uint64_t v6 = v155;
      int v9 = v158;
      uint64_t v11 = v169;
      uint64_t v10 = v151;
      uint64_t v4 = v161;
      uint64_t v7 = v165;
      uint64_t v19 = v55;
      unint64_t v20 = v54;
      goto LABEL_19;
    }
    uint64_t v145 = (llvm::APInt *)(v61 + 24);
    unsigned int v141 = *(_DWORD *)(v61 + 32);
    if (v141 >= 0x41)
    {
      if (v141 - llvm::APInt::countLeadingZerosSlowCase(v145) > 0x40) {
        goto LABEL_157;
      }
      uint64_t v145 = *(llvm::APInt **)v145;
    }
    if (*(void *)v145 != 1) {
      goto LABEL_157;
    }
    int v62 = (llvm::ConstantInt *)(**(void **)this + 1960);
    uint64_t v174 = 0;
    uint64_t v175 = 0;
    v176[0] = 0;
    __int16 v63 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v62, 8uLL, 0);
    uint64_t v174 = (void *)llvm::ValueAsMetadata::get(v63, v64);
    uint64_t v65 = v17 - 8 * *(unsigned int *)(v17 + 8);
    uint64_t v175 = *(void *)(v65 + 8);
    v176[0] = *(void *)(v65 + 16);
    uint64_t v8 = 1;
    int v66 = llvm::MDTuple::getImpl(*(void *)this, &v174, 3, 0, 1);
    llvm::NamedMDNode::setOperand(v57, v56, v66);
    size_t v5 = v56;
    uint64_t NamedMetadata = (uint64_t)v57;
    uint64_t v19 = *(void *)(v18 + 8);
    unint64_t v20 = *(void *)v19;
    uint64_t v15 = v59;
    unint64_t v13 = (unint64_t)v58;
    uint64_t v16 = v148;
    uint64_t v12 = v149;
    uint64_t v6 = v155;
    int v9 = v158;
    uint64_t v11 = v169;
    uint64_t v10 = v151;
    uint64_t v4 = v161;
    uint64_t v7 = v165;
LABEL_19:
    if (v20 != 30) {
      goto LABEL_20;
    }
    uint64_t v138 = v18;
    uint64_t v142 = (llvm::NamedMDNode *)NamedMetadata;
    unsigned int v166 = v7;
    unsigned int v152 = v10;
    unsigned int v156 = v6;
    uint64_t v162 = v4;
    uint64_t v170 = v11;
    int v159 = v9;
    uint64_t v67 = v16;
    uint64_t v146 = v5;
    unint64_t v68 = v13;
    uint64_t v69 = v15;
    uint64_t v70 = (unint64_t *)v19;
    if (*(void *)(v19 + 24) == 0x76697463656A624FLL
      && *(void *)(v19 + 32) == 0x67616D4920432D65
      && *(void *)(v19 + 40) == 0x53206F666E492065
      && *(void *)(v19 + 46) == 0x6E6F697463655320)
    {
      uint64_t v82 = *(void *)(v17 - 8 * *(unsigned int *)(v17 + 8) + 16);
      if (v82)
      {
        if (!*(unsigned char *)v82)
        {
          uint64_t v174 = v176;
          uint64_t v175 = 0x400000000;
          char v83 = *(std::string::size_type **)(v82 + 8);
          std::string::size_type v84 = *v83;
          v172.__r_.__value_.__r.__words[0] = (std::string::size_type)(v83 + 3);
          v172.__r_.__value_.__l.__size_ = v84;
          llvm::StringRef::split(&v172, (uint64_t)&v174, " ", 1uLL, -1, 1);
          char v85 = v175;
          if (v175 != 1)
          {
            memset(&v172, 0, sizeof(v172));
            if (v175)
            {
              uint64_t v86 = 16 * v175;
              uint64_t v87 = (std::string::size_type *)((char *)v174 + 8);
              do
              {
                uint64_t v88 = (const std::string::value_type *)*(v87 - 1);
                if (v88)
                {
                  std::string::__init(&v173, v88, *v87);
                  char v89 = HIBYTE(v173.__r_.__value_.__r.__words[2]);
                  std::string::size_type size = v173.__r_.__value_.__l.__size_;
                  std::string::size_type v91 = v173.__r_.__value_.__r.__words[0];
                }
                else
                {
                  std::string::size_type size = 0;
                  std::string::size_type v91 = 0;
                  char v89 = 0;
                  memset(&v173, 0, sizeof(v173));
                }
                BOOL v92 = v89 < 0;
                if (v89 >= 0) {
                  uint64_t v93 = &v173;
                }
                else {
                  uint64_t v93 = (std::string *)v91;
                }
                std::string::size_type v94 = v89 & 0x7F;
                if (v92) {
                  std::string::size_type v95 = size;
                }
                else {
                  std::string::size_type v95 = v94;
                }
                std::string::append(&v172, (const std::string::value_type *)v93, v95);
                if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v173.__r_.__value_.__l.__data_);
                }
                v87 += 2;
                v86 -= 16;
              }
              while (v86);
              char v85 = HIBYTE(v172.__r_.__value_.__r.__words[2]);
              std::string::size_type v123 = v172.__r_.__value_.__l.__size_;
              std::string::size_type v124 = v172.__r_.__value_.__r.__words[0];
            }
            else
            {
              std::string::size_type v123 = 0;
              std::string::size_type v124 = 0;
            }
            memset(&v173, 0, sizeof(v173));
            *(_OWORD *)&v173.__r_.__value_.__l.__data_ = *(_OWORD *)(v17 - 8 * *(unsigned int *)(v17 + 8));
            BOOL v125 = v85 < 0;
            if (v85 >= 0) {
              uint64_t v126 = &v172;
            }
            else {
              uint64_t v126 = (std::string *)v124;
            }
            size_t v127 = v85 & 0x7F;
            if (v125) {
              size_t v128 = v123;
            }
            else {
              size_t v128 = v127;
            }
            v173.__r_.__value_.__r.__words[2] = (std::string::size_type)llvm::MDString::get(*(uint64_t **)this, (unsigned __int8 *)v126, v128);
            uint64_t v129 = llvm::MDTuple::getImpl(*(void *)this, &v173, 3, 0, 1);
            llvm::NamedMDNode::setOperand(v142, v146, v129);
            if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v172.__r_.__value_.__l.__data_);
            }
            uint64_t v8 = 1;
          }
          if (v174 != v176) {
            free(v174);
          }
          uint64_t v70 = *(unint64_t **)(v138 + 8);
          if (*v70 != 30)
          {
            unint64_t v20 = *v70;
            uint64_t v15 = v69;
            unint64_t v13 = v68;
            uint64_t NamedMetadata = (uint64_t)v142;
            size_t v5 = v146;
            uint64_t v16 = v67;
            uint64_t v6 = v156;
            int v9 = v159;
            uint64_t v11 = v170;
            uint64_t v10 = v152;
            uint64_t v4 = v162;
            uint64_t v7 = v166;
            uint64_t v19 = *(void *)(v138 + 8);
LABEL_20:
            if (v20 == 19)
            {
              uint64_t v78 = *(void *)(v19 + 24);
              uint64_t v77 = *(void *)(v19 + 32);
              uint64_t v79 = *(void *)(v19 + 35);
              BOOL v27 = v78 == 0x2E68747561727470 && v77 == 0x737265762D696261 && v79 == 0x6E6F69737265762DLL;
            }
            else
            {
LABEL_21:
              BOOL v27 = 0;
            }
LABEL_22:
            v9 |= v27;
            goto LABEL_23;
          }
        }
      }
    }
    BOOL v76 = v70[3] == 0x76697463656A624FLL
       && v70[4] == 0x6272614720432D65
       && v70[5] == 0x6C6C6F4320656761
       && *(unint64_t *)((char *)v70 + 46) == 0x6E6F697463656C6CLL;
    if (!v76 || (uint64_t v96 = *(void *)(v17 - 8 * *(unsigned int *)(v17 + 8) + 16), *(unsigned char *)v96 != 1))
    {
      BOOL v27 = 0;
      uint64_t v15 = v69;
      unint64_t v13 = v68;
      uint64_t NamedMetadata = (uint64_t)v142;
      size_t v5 = v146;
      uint64_t v16 = v67;
      uint64_t v6 = v156;
      int v9 = v159;
      uint64_t v11 = v170;
      uint64_t v10 = v152;
      uint64_t v4 = v162;
      uint64_t v7 = v166;
      goto LABEL_22;
    }
    long long v97 = *(llvm::Constant **)(v96 + 128);
    if (*(llvm::ConstantInt **)v97 != v69)
    {
      uint64_t UniqueInteger = llvm::Constant::getUniqueInteger(v97);
      if (*(_DWORD *)(UniqueInteger + 8) >= 0x41u) {
        long long v99 = *(unint64_t **)UniqueInteger;
      }
      else {
        long long v99 = (unint64_t *)UniqueInteger;
      }
      unint64_t v100 = *v99;
      unint64_t v101 = v100;
      BOOL v102 = v100 >= 0x100;
      unsigned int v103 = BYTE1(v100);
      unint64_t v104 = v100 >> 24;
      unint64_t v105 = v100 >> 16;
      if (v102) {
        unint64_t v68 = v103;
      }
      else {
        unint64_t v68 = v68;
      }
      if (v102) {
        uint64_t v106 = v105;
      }
      else {
        uint64_t v106 = v12;
      }
      if (v102) {
        uint64_t v107 = v104;
      }
      else {
        uint64_t v107 = v170;
      }
      if (v102) {
        uint64_t v108 = 1;
      }
      else {
        uint64_t v108 = v152;
      }
      uint64_t v174 = 0;
      uint64_t v175 = 0;
      v176[0] = 0;
      int v109 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v67, 1uLL, 0);
      uint64_t v174 = (void *)llvm::ValueAsMetadata::get(v109, v110);
      uint64_t v175 = *(void *)(v17 - 8 * *(unsigned int *)(v17 + 8) + 8);
      char v111 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v69, v101, 0);
      v176[0] = llvm::ValueAsMetadata::get(v111, v112);
      uint64_t v113 = llvm::MDTuple::getImpl(*(void *)this, &v174, 3, 0, 1);
      llvm::NamedMDNode::setOperand(v142, v146, v113);
      uint64_t v16 = v67;
      uint64_t v11 = v107;
      size_t v5 = v146;
      uint64_t NamedMetadata = (uint64_t)v142;
      uint64_t v12 = v106;
      uint64_t v10 = v108;
      unint64_t v13 = v68;
      uint64_t v15 = v69;
      uint64_t v8 = 1;
      uint64_t v19 = *(void *)(v138 + 8);
      unint64_t v20 = *(void *)v19;
      uint64_t v6 = v156;
      int v9 = v159;
      uint64_t v4 = v162;
      uint64_t v7 = v166;
      goto LABEL_20;
    }
    uint64_t v15 = v69;
    unint64_t v13 = v68;
    uint64_t NamedMetadata = (uint64_t)v142;
    size_t v5 = v146;
    uint64_t v16 = v67;
    uint64_t v6 = v156;
    int v9 = v159;
    uint64_t v11 = v170;
    uint64_t v10 = v152;
    uint64_t v4 = v162;
    uint64_t v7 = v166;
LABEL_23:
    size_t v5 = (llvm::APInt *)((char *)v5 + 1);
  }
  while (v5 != v4);
  if (v7 & 1 | ((v6 & 1) == 0))
  {
    if ((v10 & 1) == 0) {
      goto LABEL_26;
    }
LABEL_155:
    LOBYTE(v8) = 1;
    unsigned __int8 v118 = v12;
    BOOL v119 = v15;
    unsigned __int8 v120 = v11;
    llvm::Module::addModuleFlag((uint64_t **)this, (llvm::Type *)1, "Swift ABI Version", 0x11uLL, (llvm::Type *)v13);
    unint64_t v121 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v119, v120, 0);
    llvm::Module::addModuleFlag((uint64_t **)this, (llvm::Value *)1, "Swift Major Version", 0x13uLL, v121);
    int v122 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v119, v118, 0);
    llvm::Module::addModuleFlag((uint64_t **)this, (llvm::Value *)1, "Swift Minor Version", 0x13uLL, v122);
  }
  else
  {
    BOOL v114 = v15;
    BOOL v115 = (llvm::Type *)v13;
    char v116 = v11;
    char v117 = v10;
    llvm::Module::addModuleFlag((uint64_t **)this, (llvm::Type *)4, "Objective-C Class Properties", 0x1CuLL, 0);
    LOBYTE(v11) = v116;
    unint64_t v13 = (unint64_t)v115;
    uint64_t v15 = v114;
    if (v117) {
      goto LABEL_155;
    }
    LOBYTE(v8) = 1;
  }
LABEL_26:
  if ((v9 & 1) == 0) {
LABEL_27:
  }
    LOBYTE(v8) = v8 | sub_1CC52FF50((uint64_t **)this);
  return v8 & 1;
}

uint64_t sub_1CC52FF50(uint64_t **a1)
{
  __int16 v8 = 260;
  uint64_t v7 = a1 + 27;
  llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)&v7);
  ArchName = llvm::Triple::getArchName((llvm::Triple *)__p);
  if (v3 == 6
    && (*(_DWORD *)ArchName == 913142369 ? (BOOL v4 = *((unsigned __int16 *)ArchName + 2) == 25908) : (BOOL v4 = 0), v4))
  {
    llvm::Module::setPtrAuthABIVersion(a1, 0xFFFFFFFFuLL);
    uint64_t v5 = 1;
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void llvm::UpgradeFunctionAttributes(llvm *this, llvm::Function *a2)
{
  if (*((unsigned char *)this + 16) == 3)
  {
    if ((*((_DWORD *)this + 5) & 0x7FFFFFF) == 0) {
      goto LABEL_3;
    }
  }
  else if (!*((unsigned char *)this + 16) {
         && *((llvm **)this + 9) == (llvm *)((char *)this + 72)
  }
         && (*((unsigned char *)this + 34) & 0x80) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v29 = *((void *)this + 14);
  if (!v29 || (*(unsigned char *)(v29 + 19) & 0x20) == 0)
  {
    uint64_t v30 = (char *)this + 72;
    uint64_t v31 = *((void *)this + 10);
    while ((char *)v31 != v30)
    {
      uint64_t v32 = v31 - 24;
      BOOL v33 = v31 == 0;
      uint64_t v31 = *(void *)(v31 + 8);
      if (v33) {
        uint64_t v32 = 0;
      }
      uint64_t v34 = v32 + 40;
      uint64_t v35 = *(void *)(v32 + 48);
      while (v35 != v34)
      {
        uint64_t v36 = v35 - 24;
        BOOL v33 = v35 == 0;
        uint64_t v35 = *(void *)(v35 + 8);
        if (v33) {
          uint64_t v37 = 0;
        }
        else {
          uint64_t v37 = v36;
        }
        switch(*(unsigned char *)(v37 + 16))
        {
          case '!':
          case '\'':
          case 'T':
            sub_1CC535A40(v37);
            break;
          default:
            continue;
        }
      }
    }
  }
LABEL_3:
  uint64_t v3 = **(void **)(*((void *)this + 3) + 16);
  long long v38 = 0uLL;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v39 = &v40;
  int v4 = *(unsigned __int8 *)(v3 + 8);
  if (v4 == 13)
  {
    uint64_t v5 = 0x308000480000;
    uint64_t v6 = 12288;
    goto LABEL_6;
  }
  long long v38 = xmmword_1CFAC6340;
  if (v4 != 15)
  {
    uint64_t v5 = 0x1308000480002;
    uint64_t v6 = 12296;
LABEL_6:
    *(void *)&long long v38 = v5 | 0x8000000000040000;
    *((void *)&v38 + 1) = v6 | 0x3F0;
    uint64_t v7 = v6 | 0x7F0;
    unint64_t v8 = v5 | 0x8000001000040000;
    goto LABEL_7;
  }
  unint64_t v8 = 0x1001000000002;
  uint64_t v7 = 1032;
LABEL_7:
  int v9 = v4;
  if ((v4 & 0xFE) == 0x12) {
    int v9 = *(unsigned __int8 *)(**(void **)(v3 + 16) + 8);
  }
  if (v9 != 15) {
    *((void *)&v38 + 1) = v7;
  }
  if (v4 == 7) {
    *(void *)&long long v38 = v8;
  }
  char v10 = **(uint64_t ***)this;
  uint64_t v11 = *((void *)this + 14);
  if (v11 && *(_DWORD *)(v11 + 8) >= 2u) {
    uint64_t v12 = *(void *)(v11 + 48);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v43 = v12;
  uint64_t v13 = llvm::AttributeSet::removeAttributes(&v43, v10, (uint64_t)&v38);
  if (v12 == v13) {
    uint64_t v14 = *((void *)this + 14);
  }
  else {
    uint64_t v14 = llvm::AttributeList::setAttributesAtIndex((void *)this + 14, v10, 0, v13);
  }
  *((void *)this + 14) = v14;
  sub_1CC1E4850((uint64_t)&v39, v40);
  if ((*((_WORD *)this + 9) & 1) == 0)
  {
    uint64_t v15 = (uint64_t *)*((void *)this + 11);
LABEL_20:
    uint64_t v16 = v15;
    goto LABEL_21;
  }
  llvm::Function::BuildLazyArguments(this);
  uint64_t v15 = (uint64_t *)*((void *)this + 11);
  if ((*((_WORD *)this + 9) & 1) == 0) {
    goto LABEL_20;
  }
  llvm::Function::BuildLazyArguments(this);
  uint64_t v16 = (uint64_t *)*((void *)this + 11);
LABEL_21:
  for (unsigned int i = &v16[5 * *((void *)this + 12)]; v15 != i; v15 += 5)
  {
    uint64_t v18 = *v15;
    long long v38 = 0uLL;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v39 = &v40;
    int v19 = *(unsigned __int8 *)(v18 + 8);
    if (v19 == 13)
    {
      unint64_t v20 = 0x80003080004C0000;
      uint64_t v21 = 13296;
    }
    else
    {
      long long v38 = xmmword_1CFAC6340;
      if (v19 == 15)
      {
        unint64_t v20 = 0x1000000000002;
        uint64_t v21 = 8;
        goto LABEL_26;
      }
      unint64_t v20 = 0x80013080004C0002;
      uint64_t v21 = 13304;
    }
    *(void *)&long long v38 = v20;
    *((void *)&v38 + 1) = v21;
LABEL_26:
    int v22 = v19;
    if ((v19 & 0xFE) == 0x12) {
      int v22 = *(unsigned __int8 *)(**(void **)(v18 + 16) + 8);
    }
    if (v22 != 15) {
      *((void *)&v38 + 1) = v21 | 0x400;
    }
    if (v19 == 7) {
      *(void *)&long long v38 = v20 | 0x1000000000;
    }
    uint64_t v23 = v15[3];
    uint64_t v24 = *(void *)(v23 + 112);
    uint64_t v42 = v24;
    uint64_t v25 = **(uint64_t ***)v23;
    int v26 = *((_DWORD *)v15 + 8);
    if (v24 && (v26 + 2) < *(_DWORD *)(v24 + 8)) {
      uint64_t v27 = *(void *)(v24 + 8 * (v26 + 2) + 40);
    }
    else {
      uint64_t v27 = 0;
    }
    uint64_t v43 = v27;
    uint64_t v28 = llvm::AttributeSet::removeAttributes(&v43, v25, (uint64_t)&v38);
    if (v27 != v28) {
      uint64_t v24 = llvm::AttributeList::setAttributesAtIndex(&v42, v25, v26 + 1, v28);
    }
    *(void *)(v15[3] + 112) = v24;
    sub_1CC1E4850((uint64_t)&v39, v40);
  }
}

llvm::MDNode *llvm::upgradeInstructionLoopAttachment(llvm *this, llvm::MDNode *a2)
{
  unint64_t v2 = this;
  v52[8] = *MEMORY[0x1E4F143B8];
  int v3 = *(unsigned __int8 *)this;
  if (v3 == 4) {
    int v4 = this;
  }
  else {
    int v4 = 0;
  }
  if (v3 == 4)
  {
    uint64_t v5 = *((unsigned int *)this + 2);
    if (v5)
    {
      uint64_t v6 = (uint64_t *)((char *)this - 8 * v5);
      while (1)
      {
        uint64_t v7 = *v6;
        if (*v6)
        {
          if (*(unsigned char *)v7 == 4)
          {
            uint64_t v8 = *(unsigned int *)(v7 + 8);
            if (v8)
            {
              uint64_t v9 = *(void *)(v7 - 8 * v8);
              if (v9)
              {
                if (!*(unsigned char *)v9)
                {
                  char v10 = *(void **)(v9 + 8);
                  if (*v10 >= 0x10uLL)
                  {
                    uint64_t v12 = v10[3];
                    uint64_t v11 = v10[4];
                    if (v12 == 0x6365762E6D766C6CLL && v11 == 0x2E72657A69726F74) {
                      break;
                    }
                  }
                }
              }
            }
          }
        }
        if (++v6 == (uint64_t *)v4) {
          return v2;
        }
      }
      int v47 = v49;
      uint64_t v48 = 0x800000000;
      if (v5 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v15 = (llvm::MDNode **)((char *)v4 - 8 * v5);
      do
      {
        Impl = *v15;
        if (*v15)
        {
          if (*(unsigned char *)Impl == 4)
          {
            uint64_t v18 = (_DWORD *)((char *)Impl + 8);
            uint64_t v17 = *((unsigned int *)Impl + 2);
            if (v17)
            {
              uint64_t v19 = *((void *)Impl - v17);
              if (v19)
              {
                if (!*(unsigned char *)v19)
                {
                  unint64_t v20 = *(void **)(v19 + 8);
                  if (*v20 >= 0x10uLL)
                  {
                    uint64_t v22 = v20[3];
                    uint64_t v21 = v20[4];
                    if (v22 == 0x6365762E6D766C6CLL && v21 == 0x2E72657A69726F74)
                    {
                      BOOL v50 = v52;
                      uint64_t v51 = 0x800000000;
                      if (v17 >= 9) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      uint64_t v24 = *((void *)Impl + 2);
                      uint64_t v25 = (uint64_t *)(v24 & 0xFFFFFFFFFFFFFFF8);
                      if ((v24 & 4) != 0) {
                        uint64_t v25 = (uint64_t *)*v25;
                      }
                      int v26 = *(unint64_t **)(v19 + 8);
                      unint64_t v29 = *v26;
                      uint64_t v28 = v26 + 3;
                      unint64_t v27 = v29;
                      if (v29 == 22
                        && (*v28 == 0x6365762E6D766C6CLL ? (BOOL v30 = v28[1] == 0x2E72657A69726F74) : (BOOL v30 = 0),
                            v30 ? (BOOL v31 = *(void *)((char *)v28 + 14) == 0x6C6C6F726E752E72) : (BOOL v31 = 0),
                            v31))
                      {
                        uint64_t v35 = llvm::MDString::get(v25, "llvm.loop.interleave.count", 0x1AuLL);
                      }
                      else
                      {
                        if (v27 >= 0x10) {
                          uint64_t v32 = 16;
                        }
                        else {
                          uint64_t v32 = v27;
                        }
                        v43[0] = "llvm.loop.vectorize.";
                        v43[2] = (char *)v28 + v32;
                        v43[3] = v27 - v32;
                        __int16 v44 = 1283;
                        llvm::Twine::str((llvm::Twine *)v43, __p);
                        if (v46 >= 0) {
                          BOOL v33 = (unsigned __int8 *)__p;
                        }
                        else {
                          BOOL v33 = (unsigned __int8 *)__p[0];
                        }
                        if (v46 >= 0) {
                          size_t v34 = v46 & 0x7F;
                        }
                        else {
                          size_t v34 = (size_t)__p[1];
                        }
                        uint64_t v35 = llvm::MDString::get(v25, v33, v34);
                        if (v46 < 0) {
                          operator delete(__p[0]);
                        }
                      }
                      if (v51 >= (unint64_t)HIDWORD(v51)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((void *)v50 + v51) = v35;
                      unsigned int v36 = v51 + 1;
                      LODWORD(v51) = v51 + 1;
                      int v37 = *v18 - 1;
                      if (*v18 != 1)
                      {
                        uint64_t v40 = (char *)Impl + 8;
                        do
                        {
                          if (v36 >= HIDWORD(v51)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *((void *)v50 + v36) = *(void *)&v40[-8 * *v18];
                          unsigned int v36 = v51 + 1;
                          LODWORD(v51) = v51 + 1;
                          v40 += 8;
                          --v37;
                        }
                        while (v37);
                      }
                      uint64_t v38 = *((void *)Impl + 2);
                      uint64_t v39 = (void *)(v38 & 0xFFFFFFFFFFFFFFF8);
                      if ((v38 & 4) != 0) {
                        uint64_t v39 = (void *)*v39;
                      }
                      Impl = llvm::MDTuple::getImpl((uint64_t)v39, v50, v36, 0, 1);
                      if (v50 != v52) {
                        free(v50);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (v48 >= (unint64_t)HIDWORD(v48)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v47 + v48) = Impl;
        LODWORD(v48) = v48 + 1;
        ++v15;
      }
      while (v15 != (llvm::MDNode **)v4);
      uint64_t v41 = *((void *)v4 + 2);
      uint64_t v42 = (void *)(v41 & 0xFFFFFFFFFFFFFFF8);
      if ((v41 & 4) != 0) {
        uint64_t v42 = (void *)*v42;
      }
      unint64_t v2 = llvm::MDTuple::getImpl((uint64_t)v42, v47, v48, 0, 1);
      if (v47 != v49) {
        free(v47);
      }
    }
  }
  return v2;
}

void llvm::UpgradeDataLayoutString(const char **a1@<X0>, size_t a2@<X1>, const char **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  v35[0] = (uint64_t)a1;
  v35[1] = a2;
  __int16 v39 = 261;
  unsigned int v36 = a3;
  uint64_t v37 = a4;
  llvm::Triple::Triple((llvm::Triple *)v30, (const llvm::Twine *)&v36);
  int v8 = v32;
  BOOL v9 = v32 == 30 || v32 == 25;
  if (v9 && llvm::StringRef::find(v35, "-G", 2uLL, 0) == -1)
  {
    if (!a2)
    {
      *(unsigned char *)(a5 + 23) = 2;
      strcpy((char *)a5, "G1");
      goto LABEL_16;
    }
    if (*(unsigned char *)a1 != 71)
    {
      __int16 v39 = 773;
      unsigned int v36 = a1;
      uint64_t v37 = a2;
      uint64_t v38 = "-G1";
      llvm::Twine::str((llvm::Twine *)&v36, (void *)a5);
      goto LABEL_16;
    }
LABEL_6:
    if (a2 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (a2 >= 0x17)
    {
      uint64_t v11 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a2 | 7) != 0x17) {
        uint64_t v11 = a2 | 7;
      }
      uint64_t v12 = v11 + 1;
      char v10 = operator new(v11 + 1);
      *(void *)(a5 + 8) = a2;
      *(void *)(a5 + 16) = v12 | 0x8000000000000000;
      *(void *)a5 = v10;
    }
    else
    {
      *(unsigned char *)(a5 + 23) = a2;
      char v10 = (void *)a5;
      if (!a2) {
        goto LABEL_14;
      }
    }
    memmove(v10, a1, a2);
LABEL_14:
    *((unsigned char *)v10 + a2) = 0;
    int v8 = v32;
    goto LABEL_15;
  }
  if (a1) {
    goto LABEL_6;
  }
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
LABEL_15:
  if ((v8 - 41) <= 1)
  {
    uint64_t v28 = (char *)operator new(0x28uLL);
    long long v29 = xmmword_1CFAC7E80;
    strcpy(v28, "-p270:32:32-p271:32:32-p272:64:64");
    if (llvm::StringRef::find(v35, v28, 0x21uLL, 0) == -1)
    {
      unsigned int v36 = &v38;
      uint64_t v37 = 0x400000000;
      llvm::Regex::Regex();
    }
    if (v33 == 15 && (v34 & 0xFFFFFFEF) == 0 && !llvm::Triple::isArch64Bit((llvm::Triple *)v30))
    {
      char v13 = *(unsigned char *)(a5 + 23);
      BOOL v14 = v13 < 0;
      uint64_t v15 = v13 >= 0 ? a5 : *(void *)a5;
      uint64_t v16 = v13 & 0x7F;
      unint64_t v17 = v14 ? *(void *)(a5 + 8) : v16;
      v21[0] = v15;
      v21[1] = v17;
      unint64_t v18 = llvm::StringRef::find(v21, "-f80:32-", 8uLL, 0);
      if (v18 != -1)
      {
        if (v17 >= v18) {
          uint64_t v19 = v18;
        }
        else {
          uint64_t v19 = v17;
        }
        __int16 v27 = 773;
        v26[0] = v15;
        v26[1] = v19;
        v26[2] = (uint64_t)"-f80:128-";
        unint64_t v20 = v18 + 8;
        if (v17 < v18 + 8) {
          unint64_t v20 = v17;
        }
        __int16 v25 = 261;
        v24[0] = v15 + v20;
        v24[1] = v17 - v20;
        sub_1CB8F1E58(v26, v24, (uint64_t)&v36);
        llvm::Twine::str((llvm::Twine *)&v36, &v22);
        if (*(char *)(a5 + 23) < 0) {
          operator delete(*(void **)a5);
        }
        *(_OWORD *)a5 = v22;
        *(void *)(a5 + 16) = v23;
      }
    }
    if (SHIBYTE(v29) < 0) {
      operator delete(v28);
    }
  }
LABEL_16:
  if (v31 < 0) {
    operator delete(v30[0]);
  }
}

uint64_t llvm::UpgradeAttributes(llvm *this, llvm::AttrBuilder *a2)
{
  uint64_t v3 = *((void *)this + 1);
  uint64_t v4 = *((unsigned int *)this + 4);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)*((void *)this + 1);
    unint64_t v6 = *((unsigned int *)this + 4);
    while (1)
    {
      unint64_t v7 = v6 >> 1;
      int v8 = &v5[v6 >> 1];
      uint64_t v9 = *v8;
      if (!*v8 || *(unsigned char *)(v9 + 8) != 2) {
        goto LABEL_11;
      }
      unsigned int v10 = *(_DWORD *)(v9 + 12);
      size_t v11 = v10 >= 0x15 ? 21 : v10;
      if (!v11) {
        break;
      }
      int v12 = memcmp((const void *)(v9 + 24), "no-frame-pointer-elim", v11);
      if (!v12) {
        break;
      }
      if (v12 < 0) {
        goto LABEL_11;
      }
LABEL_12:
      unint64_t v6 = v7;
      if (!v7) {
        goto LABEL_13;
      }
    }
    if (v10 == 21 || v10 >= 0x15) {
      goto LABEL_12;
    }
LABEL_11:
    unint64_t v7 = v6 + ~v7;
    uint64_t v5 = v8 + 1;
    goto LABEL_12;
  }
  uint64_t v5 = (uint64_t *)*((void *)this + 1);
LABEL_13:
  if (v5 == (uint64_t *)(v3 + 8 * v4) || !llvm::Attribute::hasAttribute(v5, "no-frame-pointer-elim", 21))
  {
    uint64_t v33 = 0;
    goto LABEL_15;
  }
  uint64_t v33 = *v5;
  if (!v33)
  {
LABEL_15:
    uint64_t result = llvm::AttrBuilder::contains((uint64_t)this, "no-frame-pointer-elim-non-leaf", 0x1EuLL);
    if ((result & 1) == 0) {
      goto LABEL_16;
    }
LABEL_63:
    uint64_t v24 = "non-leaf";
    size_t v26 = 8;
    goto LABEL_64;
  }
  ValueAsString = (_DWORD *)llvm::Attribute::getValueAsString((llvm::Attribute *)&v33);
  uint64_t v24 = "none";
  if (v25 == 4 && *ValueAsString == 1702195828) {
    uint64_t v24 = "all";
  }
  size_t v26 = strlen(v24);
  llvm::AttrBuilder::removeAttribute((uint64_t)this, "no-frame-pointer-elim", 0x15uLL);
  uint64_t result = llvm::AttrBuilder::contains((uint64_t)this, "no-frame-pointer-elim-non-leaf", 0x1EuLL);
  if ((result & 1) == 0)
  {
    if (!v26) {
      goto LABEL_16;
    }
    goto LABEL_37;
  }
  if (v26 != 3) {
    goto LABEL_63;
  }
  if (*(_WORD *)v24 != 27745 || v24[2] != 108) {
    goto LABEL_63;
  }
  size_t v26 = 3;
LABEL_64:
  llvm::AttrBuilder::removeAttribute((uint64_t)this, "no-frame-pointer-elim-non-leaf", 0x1EuLL);
LABEL_37:
  uint64_t result = (uint64_t)llvm::AttrBuilder::addAttribute((uint64_t **)this, "frame-pointer", 0xDuLL, (unsigned __int8 *)v24, v26);
LABEL_16:
  uint64_t v14 = *((void *)this + 1);
  uint64_t v15 = *((unsigned int *)this + 4);
  if (v15)
  {
    uint64_t v16 = (uint64_t *)*((void *)this + 1);
    unint64_t v17 = *((unsigned int *)this + 4);
    while (1)
    {
      unint64_t v18 = v17 >> 1;
      uint64_t v19 = &v16[v17 >> 1];
      uint64_t v20 = *v19;
      if (!*v19 || *(unsigned char *)(v20 + 8) != 2) {
        goto LABEL_26;
      }
      unsigned int v21 = *(_DWORD *)(v20 + 12);
      size_t v22 = v21 >= 0x15 ? 21 : v21;
      if (!v22) {
        break;
      }
      uint64_t result = memcmp((const void *)(v20 + 24), "null-pointer-is-valid", v22);
      if (!result) {
        break;
      }
      if ((result & 0x80000000) != 0) {
        goto LABEL_26;
      }
LABEL_27:
      unint64_t v17 = v18;
      if (!v18) {
        goto LABEL_28;
      }
    }
    if (v21 == 21 || v21 >= 0x15) {
      goto LABEL_27;
    }
LABEL_26:
    unint64_t v18 = v17 + ~v18;
    uint64_t v16 = v19 + 1;
    goto LABEL_27;
  }
  uint64_t v16 = (uint64_t *)*((void *)this + 1);
LABEL_28:
  if (v16 != (uint64_t *)(v14 + 8 * v15))
  {
    uint64_t result = llvm::Attribute::hasAttribute(v16, "null-pointer-is-valid", 21);
    if (result)
    {
      uint64_t v33 = *v16;
      if (v33)
      {
        __int16 v27 = (int *)llvm::Attribute::getValueAsString((llvm::Attribute *)&v33);
        if (v28 == 4)
        {
          int v29 = *v27;
          uint64_t result = llvm::AttrBuilder::removeAttribute((uint64_t)this, "null-pointer-is-valid", 0x15uLL);
          if (v29 == 1702195828) {
            return (uint64_t)llvm::AttrBuilder::addAttribute((uint64_t **)this, 0x28u);
          }
        }
        else
        {
          return llvm::AttrBuilder::removeAttribute((uint64_t)this, "null-pointer-is-valid", 0x15uLL);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CC53101C(uint64_t a1, const void *a2, uint64_t a3, const void *a4, uint64_t a5, const void *a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, char a11)
{
  uint64_t v15 = sub_1CC5310AC(a1, a2, a3, a11);
  uint64_t v16 = sub_1CC5310AC(v15, a4, a5, a11);
  uint64_t v17 = sub_1CC5310AC(v16, a6, a7, a11);

  return sub_1CC5310AC(v17, a9, a10, a11);
}

uint64_t sub_1CC5310AC(uint64_t a1, const void *a2, uint64_t a3, char a4)
{
  if (!*(unsigned char *)(a1 + 17))
  {
    size_t v6 = *(void *)(a1 + 8);
    if (v6 == a3 && (!v6 || !memcmp(*(const void **)a1, a2, v6)))
    {
      *(unsigned char *)(a1 + 16) = a4;
      *(unsigned char *)(a1 + 17) = 1;
    }
  }
  return a1;
}

BOOL sub_1CC53110C(uint64_t a1, unint64_t a2)
{
  if (a2 == 13)
  {
    if (*(void *)a1 == 0x7972726163646461 && *(void *)(a1 + 5) == 0x3233752E78797272) {
      return 1;
    }
    if (*(void *)a1 == 0x7972726163646461 && *(void *)(a1 + 5) == 0x3436752E78797272) {
      return 1;
    }
    if (*(void *)a1 == 0x6F72726F62627573 && *(void *)(a1 + 5) == 0x3233752E776F7272) {
      return 1;
    }
    if (*(void *)a1 == 0x6F72726F62627573 && *(void *)(a1 + 5) == 0x3436752E776F7272) {
      return 1;
    }
    goto LABEL_62;
  }
  if (a2 == 12)
  {
    if (*(void *)a1 == 0x7972726163646461 && *(_DWORD *)(a1 + 8) == 842233134) {
      return 1;
    }
    BOOL v7 = *(void *)a1 == 0x7972726163646461 && *(_DWORD *)(a1 + 8) == 875984174;
    int v8 = 1;
    uint64_t v9 = 1;
    if (v7) {
      return v9;
    }
    goto LABEL_63;
  }
  if (a2 >= 0xB)
  {
LABEL_62:
    int v8 = 0;
LABEL_63:
    if (*(void *)a1 == 0x6461702E32657373 && *(void *)(a1 + 3) == 0x2E73646461702E32) {
      return 1;
    }
    if (*(void *)a1 == 0x7573702E32657373 && *(void *)(a1 + 3) == 0x2E73627573702E32) {
      return 1;
    }
    BOOL v27 = a2 < 0xC;
    if (a2 >= 0xC)
    {
      if (*(void *)a1 == 0x6461702E32657373 && *(_DWORD *)(a1 + 8) == 779318628) {
        return 1;
      }
      if (*(void *)a1 == 0x7573702E32657373 && *(_DWORD *)(a1 + 8) == 779318626) {
        return 1;
      }
    }
    if (*(void *)a1 == 0x6461702E32787661 && *(void *)(a1 + 3) == 0x2E73646461702E32) {
      return 1;
    }
    if (*(void *)a1 == 0x7573702E32787661 && *(void *)(a1 + 3) == 0x2E73627573702E32) {
      return 1;
    }
    if (a2 < 0xC) {
      goto LABEL_89;
    }
    if (*(void *)a1 == 0x6461702E32787661 && *(_DWORD *)(a1 + 8) == 779318628) {
      return 1;
    }
    if (*(void *)a1 == 0x7573702E32787661 && *(_DWORD *)(a1 + 8) == 779318626) {
      return 1;
    }
    if (a2 < 0xD)
    {
LABEL_89:
      int v20 = 0;
      char v28 = 1;
      BOOL v42 = 1;
      char v24 = 1;
      goto LABEL_90;
    }
    if (*(void *)a1 == 0x702E323135787661 && *(void *)(a1 + 5) == 0x2E73646461702E32) {
      return 1;
    }
    if (*(void *)a1 == 0x702E323135787661 && *(void *)(a1 + 5) == 0x2E73627573702E32) {
      return 1;
    }
    BOOL v42 = a2 < 0x12;
    if (a2 >= 0x12)
    {
      if (*(void *)a1 == 0x6D2E323135787661
        && *(void *)(a1 + 8) == 0x646461702E6B7361
        && *(_WORD *)(a1 + 16) == 11891)
      {
        return 1;
      }
      BOOL v240 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x627573702E6B7361;
      if (v240 && *(_WORD *)(a1 + 16) == 11891) {
        return 1;
      }
      if (a2 >= 0x13)
      {
        if (*(void *)a1 == 0x6D2E323135787661
          && *(void *)(a1 + 8) == 0x646461702E6B7361
          && *(void *)(a1 + 11) == 0x2E7375646461702ELL)
        {
          return 1;
        }
        BOOL v279 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x627573702E6B7361;
        if (v279 && *(void *)(a1 + 11) == 0x2E7375627573702ELL) {
          return 1;
        }
        char v24 = 0;
        int v20 = 0;
        goto LABEL_799;
      }
    }
    else if (a2 == 16)
    {
      if (*(void *)a1 == 0x61702E3365737373 && *(void *)(a1 + 8) == 0x3832312E622E7362) {
        return 1;
      }
      if (*(void *)a1 == 0x61702E3365737373 && *(void *)(a1 + 8) == 0x3832312E772E7362) {
        return 1;
      }
      BOOL v94 = *(void *)a1 == 0x61702E3365737373 && *(void *)(a1 + 8) == 0x3832312E642E7362;
      char v24 = 1;
      int v20 = 1;
      uint64_t v9 = 1;
      if (v94) {
        return v9;
      }
      goto LABEL_799;
    }
    int v20 = 0;
    char v24 = 1;
LABEL_799:
    if (*(void *)a1 == 0x6D66762E34616D66 && *(void *)(a1 + 5) == 0x732E6464616D6676) {
      return 1;
    }
    char v28 = 0;
LABEL_90:
    if (*(void *)a1 == 0x616D66762E616D66 && *(void *)(a1 + 3) == 0x2E6464616D66762ELL) {
      return 1;
    }
    if (*(void *)a1 == 0x736D66762E616D66 && *(void *)(a1 + 3) == 0x2E6275736D66762ELL) {
      return 1;
    }
    BOOL v29 = a2 < 0xE;
    if (a2 >= 0xE)
    {
      if (*(void *)a1 == 0x736D66762E616D66 && *(void *)(a1 + 6) == 0x2E6464616275736DLL) {
        return 1;
      }
    }
    else if (a2 < 0xC)
    {
LABEL_304:
      if ((v24 & 1) == 0)
      {
        BOOL v119 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x616D66762E6B7361;
        if (v119 && *(void *)(a1 + 11) == 0x2E6464616D66762ELL) {
          return 1;
        }
      }
      if (a2 <= 0x13) {
        goto LABEL_313;
      }
      if (*(void *)a1 == 0x6D2E323135787661
        && *(void *)(a1 + 8) == 0x6D6E66762E6B7361
        && *(_DWORD *)(a1 + 16) == 778331233)
      {
        return 1;
      }
      BOOL v135 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6D6E66762E6B7361;
      if (v135 && *(_DWORD *)(a1 + 16) == 778204531) {
        return 1;
      }
      BOOL v137 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6D66762E336B7361;
      if (v137 && *(_DWORD *)(a1 + 16) == 778331233) {
        return 1;
      }
      BOOL v139 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6D66762E7A6B7361;
      if (v139 && *(_DWORD *)(a1 + 16) == 778331233) {
        return 1;
      }
      BOOL v141 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6D66762E336B7361;
      if (v141 && *(_DWORD *)(a1 + 16) == 778204531) {
        return 1;
      }
      if (a2 < 0x15)
      {
LABEL_313:
        BOOL v121 = 1;
        char v31 = 1;
        char v30 = 1;
        char v122 = 1;
        if (v42) {
          goto LABEL_329;
        }
      }
      else
      {
        if (*(void *)a1 == 0x6D2E323135787661
          && *(void *)(a1 + 8) == 0x6E66762E336B7361
          && *(void *)(a1 + 13) == 0x2E6275736D6E6676)
        {
          return 1;
        }
        BOOL v121 = a2 < 0x16;
        if (a2 < 0x16) {
          goto LABEL_409;
        }
        if (*(void *)a1 == 0x6D2E323135787661
          && *(void *)(a1 + 8) == 0x616D66762E6B7361
          && *(void *)(a1 + 14) == 0x2E6275736464616DLL)
        {
          return 1;
        }
        if (a2 >= 0x17)
        {
          if (*(void *)a1 == 0x6D2E323135787661
            && *(void *)(a1 + 8) == 0x6D66762E7A6B7361
            && *(void *)(a1 + 15) == 0x2E6275736464616DLL)
          {
            return 1;
          }
          BOOL v345 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6D66762E336B7361;
          if (v345 && *(void *)(a1 + 15) == 0x2E6275736464616DLL) {
            return 1;
          }
          BOOL v347 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6D66762E336B7361;
          if (v347 && *(void *)(a1 + 15) == 0x2E6464616275736DLL) {
            return 1;
          }
          char v30 = 0;
        }
        else
        {
LABEL_409:
          char v30 = 1;
        }
        char v31 = 0;
        if (v42)
        {
          char v122 = 1;
          if (v28) {
            goto LABEL_335;
          }
          goto LABEL_330;
        }
      }
      if (*(void *)a1 == 0x6D2E323135787661
        && *(void *)(a1 + 8) == 0x667568732E6B7361
        && *(_WORD *)(a1 + 16) == 26926)
      {
        return 1;
      }
      BOOL v125 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x667568732E6B7361;
      if (v125 && *(_WORD *)(a1 + 16) == 26158) {
        return 1;
      }
      char v122 = 0;
LABEL_329:
      if (v28) {
        goto LABEL_335;
      }
LABEL_330:
      if (*(void *)a1 == 0x6B2E323135787661 && *(void *)(a1 + 5) == 0x6B63706E756B2E32) {
        return 1;
      }
      BOOL v27 = 0;
LABEL_335:
      if (*(void *)a1 == 0x6261702E32787661 && *(_WORD *)(a1 + 8) == 11891) {
        return 1;
      }
      BOOL v33 = a2 < 0x11;
      if (a2 >= 0x11)
      {
        if (*(void *)a1 == 0x6D2E323135787661
          && *(void *)(a1 + 8) == 0x736261702E6B7361
          && *(unsigned char *)(a1 + 16) == 46)
        {
          return 1;
        }
        BOOL v253 = *(void *)a1 == 0x622E323135787661 && *(void *)(a1 + 8) == 0x7473616364616F72;
        if (v253 && *(unsigned char *)(a1 + 16) == 109) {
          return 1;
        }
        BOOL v129 = 0;
        int v21 = 0;
        if ((v8 & 1) == 0) {
          goto LABEL_853;
        }
      }
      else
      {
        BOOL v129 = a2 == 11;
        if (a2 == 11 && *(void *)a1 == 0x747271732E657373 && *(void *)(a1 + 3) == 0x73732E747271732ELL) {
          return 1;
        }
        if (!v8)
        {
          int v21 = 0;
LABEL_853:
          if ((v122 & 1) == 0)
          {
            BOOL v256 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x747271732E6B7361;
            if (v256 && *(_WORD *)(a1 + 16) == 28718) {
              return 1;
            }
          }
          if (*(void *)a1 == 0x747271732E787661 && *(_WORD *)(a1 + 8) == 28718) {
            return 1;
          }
          if (*(void *)a1 == 0x7271732E32657373 && *(void *)(a1 + 3) == 0x702E747271732E32) {
            return 1;
          }
          if (*(void *)a1 == 0x747271732E657373 && *(_WORD *)(a1 + 8) == 28718) {
            return 1;
          }
          if (!v121)
          {
            BOOL v261 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6F7262702E6B7361;
            if (v261 && *(void *)(a1 + 14) == 0x7473616364616F72) {
              return 1;
            }
          }
          if (!v27)
          {
            if (*(void *)a1 == 0x6D63702E32657373 && *(_DWORD *)(a1 + 8) == 779183472) {
              return 1;
            }
            if (*(void *)a1 == 0x6D63702E32657373 && *(_DWORD *)(a1 + 8) == 779380592) {
              return 1;
            }
            if (*(void *)a1 == 0x6D63702E32787661 && *(_DWORD *)(a1 + 8) == 779183472) {
              return 1;
            }
            if (*(void *)a1 == 0x6D63702E32787661 && *(_DWORD *)(a1 + 8) == 779380592) {
              return 1;
            }
          }
          if ((v24 & 1) == 0)
          {
            BOOL v263 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x706D63702E6B7361;
            if (v263 && *(void *)(a1 + 11) == 0x2E7165706D63702ELL) {
              return 1;
            }
            BOOL v265 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x706D63702E6B7361;
            if (v265 && *(void *)(a1 + 11) == 0x2E7467706D63702ELL) {
              return 1;
            }
          }
          BOOL v34 = a2 < 0xF;
          if (a2 < 0xF) {
            goto LABEL_1118;
          }
          if (*(void *)a1 == 0x726570762E787661 && *(void *)(a1 + 7) == 0x2E38323166326D72) {
            return 1;
          }
          if (a2 == 15)
          {
            BOOL v268 = *(void *)a1 == 0x6570762E32787661 && *(void *)(a1 + 7) == 0x38323169326D7265;
            int v19 = 1;
            uint64_t v9 = 1;
            if (v268) {
              return v9;
            }
          }
          else
          {
LABEL_1118:
            int v19 = 0;
          }
          if (v129)
          {
            if (*(void *)a1 == 0x6464612E32657373 && *(void *)(a1 + 3) == 0x64732E6464612E32) {
              return 1;
            }
            if (*(void *)a1 == 0x6275732E32657373 && *(void *)(a1 + 3) == 0x64732E6275732E32) {
              return 1;
            }
            if (*(void *)a1 == 0x6C756D2E32657373 && *(void *)(a1 + 3) == 0x64732E6C756D2E32) {
              return 1;
            }
            if (*(void *)a1 == 0x7669642E32657373 && *(void *)(a1 + 3) == 0x64732E7669642E32) {
              return 1;
            }
          }
          if (v21)
          {
            if (*(void *)a1 == 0x6D702E3134657373 && *(_DWORD *)(a1 + 8) == 1651734625) {
              return 1;
            }
            if (*(void *)a1 == 0x616D702E32657373 && *(_DWORD *)(a1 + 8) == 1999532920) {
              return 1;
            }
            if (*(void *)a1 == 0x6D702E3134657373 && *(_DWORD *)(a1 + 8) == 1685289057) {
              return 1;
            }
            if (*(void *)a1 == 0x616D702E32657373 && *(_DWORD *)(a1 + 8) == 1647211896) {
              return 1;
            }
            if (*(void *)a1 == 0x6D702E3134657373 && *(_DWORD *)(a1 + 8) == 2004187233) {
              return 1;
            }
            if (*(void *)a1 == 0x6D702E3134657373 && *(_DWORD *)(a1 + 8) == 1685420129) {
              return 1;
            }
            if (*(void *)a1 == 0x6D702E3134657373 && *(_DWORD *)(a1 + 8) == 1651732073) {
              return 1;
            }
            if (*(void *)a1 == 0x696D702E32657373 && *(_DWORD *)(a1 + 8) == 1999532910) {
              return 1;
            }
            if (*(void *)a1 == 0x6D702E3134657373 && *(_DWORD *)(a1 + 8) == 1685286505) {
              return 1;
            }
            if (*(void *)a1 == 0x696D702E32657373 && *(_DWORD *)(a1 + 8) == 1647211886) {
              return 1;
            }
            if (*(void *)a1 == 0x6D702E3134657373 && *(_DWORD *)(a1 + 8) == 2004184681) {
              return 1;
            }
            if (*(void *)a1 == 0x6D702E3134657373 && *(_DWORD *)(a1 + 8) == 1685417577) {
              return 1;
            }
          }
          if (a2 == 13)
          {
            if (*(void *)a1 == 0x6B2E323135787661 && *(void *)(a1 + 5) == 0x772E646E616B2E32) {
              return 1;
            }
            if (*(void *)a1 == 0x6B2E323135787661 && *(void *)(a1 + 5) == 0x772E746F6E6B2E32) {
              return 1;
            }
          }
          else if (a2 == 14)
          {
            BOOL v355 = *(void *)a1 == 0x6B2E323135787661 && *(void *)(a1 + 6) == 0x772E6E646E616B2ELL;
            int v356 = 1;
            uint64_t v9 = 1;
            if (v355) {
              return v9;
            }
LABEL_1249:
            if (v21)
            {
              if (*(void *)a1 == 0x6B2E323135787661 && *(_DWORD *)(a1 + 8) == 1999532655) {
                return 1;
              }
            }
            if (a2 == 13 && *(void *)a1 == 0x6B2E323135787661 && *(void *)(a1 + 5) == 0x772E726F786B2E32) {
              return 1;
            }
            if (v356)
            {
              if (*(void *)a1 == 0x6B2E323135787661 && *(void *)(a1 + 6) == 0x772E726F6E786B2ELL) {
                return 1;
              }
            }
            if (a2 == 17)
            {
              if (*(void *)a1 == 0x6B2E323135787661
                && *(void *)(a1 + 8) == 0x2E6374736574726FLL
                && *(unsigned char *)(a1 + 16) == 119)
              {
                return 1;
              }
              BOOL v362 = *(void *)a1 == 0x6B2E323135787661 && *(void *)(a1 + 8) == 0x2E7A74736574726FLL;
              if (v362 && *(unsigned char *)(a1 + 16) == 119) {
                return 1;
              }
              int v17 = 0;
              char v26 = 0;
              BOOL v29 = 0;
              BOOL v33 = 0;
              char v22 = 0;
              BOOL v34 = 0;
              char v35 = 1;
              char v25 = v122;
              char v32 = v121;
              int v23 = v356;
              int v18 = 1;
            }
            else
            {
              if (a2 >= 0x14)
              {
                if (*(void *)a1 == 0x6D2E323135787661
                  && *(void *)(a1 + 8) == 0x756873702E6B7361
                  && *(_DWORD *)(a1 + 16) == 778186342)
                {
                  return 1;
                }
                int v18 = 0;
                int v17 = 0;
                char v26 = 0;
                BOOL v29 = 0;
                BOOL v33 = 0;
                char v22 = 0;
                BOOL v34 = 0;
                char v35 = 0;
              }
              else
              {
                int v18 = 0;
                int v17 = 0;
                char v26 = 0;
                char v22 = 0;
                char v35 = 1;
              }
              char v25 = v122;
              char v32 = v121;
              int v23 = v356;
            }
            goto LABEL_1291;
          }
          int v356 = 0;
          goto LABEL_1249;
        }
      }
      BOOL v255 = *(void *)a1 == 0x7271732E32657373 && *(_DWORD *)(a1 + 8) == 1685270132;
      int v21 = 1;
      uint64_t v9 = 1;
      if (v255) {
        return v9;
      }
      goto LABEL_853;
    }
    if (*(void *)a1 == 0x6D6E66762E616D66 && *(_DWORD *)(a1 + 8) == 778331233) {
      return 1;
    }
    if (*(void *)a1 == 0x6D6E66762E616D66 && *(_DWORD *)(a1 + 8) == 778204531) {
      return 1;
    }
    goto LABEL_304;
  }
  if (a2 == 10)
  {
    if (*(void *)a1 == 0x6261702E32787661 && *(_WORD *)(a1 + 8) == 11891) {
      return 1;
    }
    if (*(void *)a1 == 0x747271732E787661 && *(_WORD *)(a1 + 8) == 28718) {
      return 1;
    }
    if (*(void *)a1 == 0x747271732E657373 && *(_WORD *)(a1 + 8) == 28718) {
      return 1;
    }
    if (*(void *)a1 == 0x2E6464612E657373 && *(_WORD *)(a1 + 8) == 29555) {
      return 1;
    }
    if (*(void *)a1 == 0x2E6275732E657373 && *(_WORD *)(a1 + 8) == 29555) {
      return 1;
    }
    if (*(void *)a1 == 0x2E6C756D2E657373 && *(_WORD *)(a1 + 8) == 29555) {
      return 1;
    }
    BOOL v16 = *(void *)a1 == 0x2E7669642E657373 && *(_WORD *)(a1 + 8) == 29555;
    int v17 = 1;
    if (v16) {
      return 1;
    }
    int v18 = 0;
    int v19 = 0;
    int v20 = 0;
    int v21 = 0;
    char v22 = 0;
    int v23 = 0;
    char v24 = 1;
    char v25 = 1;
    char v26 = 1;
    BOOL v27 = 1;
    char v28 = 1;
    BOOL v29 = 1;
    char v30 = 1;
    char v31 = 1;
    char v32 = 1;
    BOOL v33 = 1;
    BOOL v34 = 1;
    char v35 = 1;
  }
  else
  {
    int v18 = 0;
    int v19 = 0;
    int v17 = 0;
    int v20 = 0;
    int v21 = 0;
    int v23 = 0;
    char v24 = 1;
    char v25 = 1;
    char v26 = 1;
    BOOL v27 = 1;
    char v28 = 1;
    BOOL v29 = 1;
    char v30 = 1;
    char v31 = 1;
    char v32 = 1;
    BOOL v33 = 1;
    char v22 = 1;
    BOOL v34 = 1;
    char v35 = 1;
    char v45 = 1;
    char v46 = 1;
    BOOL v47 = 1;
    if (a2 < 9) {
      goto LABEL_102;
    }
  }
LABEL_1291:
  if (*(void *)a1 == 0x616D702E32787661 && *(unsigned char *)(a1 + 8) == 120) {
    return 1;
  }
  if (*(void *)a1 == 0x696D702E32787661 && *(unsigned char *)(a1 + 8) == 110) {
    return 1;
  }
  if (a2 >= 0x10)
  {
    if (*(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x78616D702E6B7361) {
      return 1;
    }
    if (*(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6E696D702E6B7361) {
      return 1;
    }
  }
  else if (v34)
  {
    goto LABEL_1318;
  }
  if (*(void *)a1 == 0x7262762E32787661 && *(void *)(a1 + 7) == 0x7473616364616F72) {
    return 1;
  }
  if (*(void *)a1 == 0x7262702E32787661 && *(void *)(a1 + 7) == 0x7473616364616F72) {
    return 1;
  }
LABEL_1318:
  if (!v27 && *(void *)a1 == 0x726570762E787661 && *(_DWORD *)(a1 + 8) == 778856813) {
    return 1;
  }
  if ((v22 & 1) == 0 && *(void *)a1 == 0x6873702E32657373 && *(_WORD *)(a1 + 8) == 26229) {
    return 1;
  }
  if (!v33)
  {
    BOOL v374 = *(void *)a1 == 0x702E323135787661 && *(void *)(a1 + 8) == 0x73616364616F7262;
    if (v374 && *(unsigned char *)(a1 + 16) == 116) {
      return 1;
    }
  }
  if ((v30 & 1) == 0)
  {
    BOOL v376 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x616F72622E6B7361;
    if (v376 && *(void *)(a1 + 15) == 0x732E747361636461) {
      return 1;
    }
  }
  if ((v24 & 1) == 0)
  {
    BOOL v378 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x64766F6D2E6B7361;
    if (v378 && *(void *)(a1 + 11) == 0x70756464766F6D2ELL) {
      return 1;
    }
  }
  if ((v35 & 1) == 0)
  {
    BOOL v420 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x73766F6D2E6B7361;
    if (v420 && *(_DWORD *)(a1 + 16) == 1886741608) {
      return 1;
    }
    BOOL v422 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x73766F6D2E6B7361;
    if (v422 && *(_DWORD *)(a1 + 16) == 1886741612) {
      return 1;
    }
    BOOL v424 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x756873702E6B7361;
    if (v424 && *(_DWORD *)(a1 + 16) == 778317414) {
      return 1;
    }
  }
  if ((v31 & 1) == 0)
  {
    BOOL v380 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x756873702E6B7361;
    if (v380 && *(void *)(a1 + 13) == 0x2E772E6C66756873) {
      return 1;
    }
    BOOL v382 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x756873702E6B7361;
    if (v382 && *(void *)(a1 + 13) == 0x2E772E6866756873) {
      return 1;
    }
  }
  if ((v25 & 1) == 0)
  {
    BOOL v384 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x667568732E6B7361;
    if (v384 && *(_WORD *)(a1 + 16) == 28718) {
      return 1;
    }
  }
  if ((v31 & 1) == 0)
  {
    BOOL v386 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x726570762E6B7361;
    if (v386 && *(void *)(a1 + 13) == 0x702E6C696D726570) {
      return 1;
    }
  }
  if ((v35 & 1) == 0)
  {
    BOOL v388 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6D7265702E6B7361;
    if (v388 && *(_DWORD *)(a1 + 16) == 778462254) {
      return 1;
    }
    BOOL v390 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6D7265702E6B7361;
    if (v390 && *(_DWORD *)(a1 + 16) == 778658862) {
      return 1;
    }
  }
  if ((v24 & 1) == 0)
  {
    BOOL v426 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x706E75702E6B7361;
    if (v426 && *(void *)(a1 + 11) == 0x6C6B63706E75702ELL) {
      return 1;
    }
    BOOL v428 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x706E75702E6B7361;
    if (v428 && *(void *)(a1 + 11) == 0x686B63706E75702ELL) {
      return 1;
    }
    BOOL v430 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x63706E752E6B7361;
    if (v430 && *(void *)(a1 + 11) == 0x2E6C6B63706E752ELL) {
      return 1;
    }
    BOOL v432 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x63706E752E6B7361;
    if (v432 && *(void *)(a1 + 11) == 0x2E686B63706E752ELL) {
      return 1;
    }
  }
  if (!v33)
  {
    BOOL v392 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x646E61702E6B7361;
    if (v392 && *(unsigned char *)(a1 + 16) == 46) {
      return 1;
    }
  }
  if ((v25 & 1) == 0)
  {
    BOOL v394 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x646E61702E6B7361;
    if (v394 && *(_WORD *)(a1 + 16) == 11886) {
      return 1;
    }
  }
  if (a2 >= 0x10 && *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x2E726F702E6B7361) {
    return 1;
  }
  BOOL v47 = a2 < 0x10;
  if (!v33)
  {
    BOOL v397 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x726F78702E6B7361;
    if (v397 && *(unsigned char *)(a1 + 16) == 46) {
      return 1;
    }
  }
  if (a2 >= 0x10 && *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x2E646E612E6B7361) {
    return 1;
  }
  if (!v33)
  {
    BOOL v400 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6E646E612E6B7361;
    if (v400 && *(unsigned char *)(a1 + 16) == 46) {
      return 1;
    }
  }
  if (!v34 && *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 7) == 0x2E726F2E6B73616DLL) {
    return 1;
  }
  if (a2 >= 0x10 && *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x2E726F782E6B7361) {
    return 1;
  }
  if (!v33)
  {
    BOOL v404 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x646461702E6B7361;
    if (v404 && *(unsigned char *)(a1 + 16) == 46) {
      return 1;
    }
    BOOL v406 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x627573702E6B7361;
    if (v406 && *(unsigned char *)(a1 + 16) == 46) {
      return 1;
    }
  }
  if ((v25 & 1) == 0)
  {
    BOOL v408 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6C756D702E6B7361;
    if (v408 && *(_WORD *)(a1 + 16) == 11884) {
      return 1;
    }
  }
  if ((v31 & 1) == 0)
  {
    BOOL v410 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x647476632E6B7361;
    if (v410 && *(void *)(a1 + 13) == 0x2E64703271647476) {
      return 1;
    }
  }
  if ((v32 & 1) == 0)
  {
    BOOL v412 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x757476632E6B7361;
    if (v412 && *(void *)(a1 + 14) == 0x2E64703271647574) {
      return 1;
    }
    BOOL v414 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x757476632E6B7361;
    if (v414 && *(void *)(a1 + 14) == 0x2E73703271647574) {
      return 1;
    }
  }
  if ((v31 & 1) == 0)
  {
    BOOL v416 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x717476632E6B7361;
    if (v416 && *(void *)(a1 + 13) == 0x2E64703271717476) {
      return 1;
    }
  }
  if ((v32 & 1) == 0)
  {
    BOOL v418 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x757476632E6B7361;
    if (v418 && *(void *)(a1 + 14) == 0x2E64703271717574) {
      return 1;
    }
  }
  if (v31)
  {
    char v46 = 0;
    char v45 = 1;
  }
  else
  {
    if (*(void *)a1 == 0x6D2E323135787661
      && *(void *)(a1 + 8) == 0x647476632E6B7361
      && *(void *)(a1 + 13) == 0x2E73703271647476)
    {
      return 1;
    }
    char v45 = 0;
    char v46 = 0;
  }
LABEL_102:
  if (a2 == 24)
  {
    char v593 = v45;
    char v594 = v22;
    BOOL v48 = v27;
    int v49 = v18;
    char v50 = v30;
    char v51 = v35;
    char v52 = v46;
    int v53 = v20;
    int v54 = v19;
    BOOL v55 = v47;
    char v56 = v24;
    int v57 = v17;
    int v58 = v21;
    char v59 = v26;
    BOOL v60 = v34;
    int v61 = v23;
    char v62 = v28;
    char v63 = v32;
    BOOL v64 = v33;
    char v65 = v25;
    BOOL v66 = v29;
    if (*(void *)a1 == 0x6D2E323135787661
      && *(void *)(a1 + 8) == 0x717476632E6B7361
      && *(void *)(a1 + 16) == 0x3635322E73703271)
    {
      return 1;
    }
    BOOL v97 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x717476632E6B7361;
    if (v97 && *(void *)(a1 + 16) == 0x3231352E73703271) {
      return 1;
    }
    BOOL v99 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x707476632E6B7361;
    if (v99 && *(void *)(a1 + 16) == 0x3635322E71643264) {
      return 1;
    }
    BOOL v101 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x707476632E6B7361;
    if (v101 && *(void *)(a1 + 16) == 0x3635322E73703264) {
      return 1;
    }
    BOOL v103 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x707476632E6B7361;
    if (v103 && *(void *)(a1 + 16) == 0x3832312E64703273) {
      return 1;
    }
    BOOL v87 = *(void *)a1 == 0x6D2E323135787661
       && *(void *)(a1 + 8) == 0x707476632E6B7361
       && *(void *)(a1 + 16) == 0x3635322E64703273;
  }
  else
  {
    if (a2 != 25) {
      goto LABEL_248;
    }
    char v593 = v45;
    char v594 = v22;
    BOOL v48 = v27;
    int v49 = v18;
    char v50 = v30;
    char v51 = v35;
    char v52 = v46;
    int v53 = v20;
    int v54 = v19;
    BOOL v55 = v47;
    char v56 = v24;
    int v57 = v17;
    int v58 = v21;
    char v59 = v26;
    BOOL v60 = v34;
    int v61 = v23;
    char v62 = v28;
    char v63 = v32;
    BOOL v64 = v33;
    char v65 = v25;
    BOOL v66 = v29;
    if (*(void *)a1 == 0x6D2E323135787661
      && *(void *)(a1 + 8) == 0x747663762E6B7361
      && *(void *)(a1 + 16) == 0x32312E7370326870
      && *(unsigned char *)(a1 + 24) == 56)
    {
      return 1;
    }
    BOOL v70 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x747663762E6B7361;
    BOOL v71 = v70 && *(void *)(a1 + 16) == 0x35322E7370326870;
    if (v71 && *(unsigned char *)(a1 + 24) == 54) {
      return 1;
    }
    BOOL v73 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x757476632E6B7361;
    BOOL v74 = v73 && *(void *)(a1 + 16) == 0x35322E7370327171;
    if (v74 && *(unsigned char *)(a1 + 24) == 54) {
      return 1;
    }
    BOOL v76 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x757476632E6B7361;
    BOOL v77 = v76 && *(void *)(a1 + 16) == 0x31352E7370327171;
    if (v77 && *(unsigned char *)(a1 + 24) == 50) {
      return 1;
    }
    BOOL v79 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x747476632E6B7361;
    BOOL v80 = v79 && *(void *)(a1 + 16) == 0x35322E7164326470;
    if (v80 && *(unsigned char *)(a1 + 24) == 54) {
      return 1;
    }
    BOOL v82 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x747476632E6B7361;
    BOOL v83 = v82 && *(void *)(a1 + 16) == 0x32312E7164327370;
    if (v83 && *(unsigned char *)(a1 + 24) == 56) {
      return 1;
    }
    BOOL v87 = *(void *)a1 == 0x6D2E323135787661
       && *(void *)(a1 + 8) == 0x747476632E6B7361
       && *(void *)(a1 + 16) == 0x35322E7164327370
       && *(unsigned char *)(a1 + 24) == 54;
  }
  BOOL v29 = v66;
  char v25 = v65;
  BOOL v33 = v64;
  char v32 = v63;
  char v28 = v62;
  int v23 = v61;
  BOOL v34 = v60;
  char v26 = v59;
  int v21 = v58;
  int v17 = v57;
  char v24 = v56;
  BOOL v47 = v55;
  int v19 = v54;
  int v20 = v53;
  char v46 = v52;
  char v35 = v51;
  char v30 = v50;
  int v18 = v49;
  BOOL v27 = v48;
  char v45 = v593;
  char v22 = v594;
  if (v87) {
    return 1;
  }
LABEL_248:
  if (v20)
  {
    if (*(void *)a1 == 0x632E323135787661 && *(void *)(a1 + 8) == 0x6473326973757476) {
      return 1;
    }
  }
  if (v35)
  {
    if (a2 == 13 && *(void *)a1 == 0x756D702E32657373 && *(void *)(a1 + 5) == 0x71642E756C756D70) {
      return 1;
    }
  }
  else if (*(void *)a1 == 0x6D2E323135787661 {
         && *(void *)(a1 + 8) == 0x6D7265702E6B7361
  }
         && *(_DWORD *)(a1 + 16) == 779247990)
  {
    return 1;
  }
  if (v21)
  {
    if (*(void *)a1 == 0x6D702E3134657373 && *(_DWORD *)(a1 + 8) == 1902406773) {
      return 1;
    }
  }
  if (a2 == 13 && *(void *)a1 == 0x756D702E32787661 && *(void *)(a1 + 5) == 0x71642E756C756D70) {
    return 1;
  }
  if (v21)
  {
    if (*(void *)a1 == 0x756D702E32787661 && *(_DWORD *)(a1 + 8) == 1902390892) {
      return 1;
    }
  }
  if (a2 == 19)
  {
    if (*(void *)a1 == 0x702E323135787661
      && *(void *)(a1 + 8) == 0x2E71642E756C756DLL
      && *(void *)(a1 + 11) == 0x3231352E71642E75)
    {
      return 1;
    }
    char v590 = v46;
    int v591 = v17;
    int v115 = v19;
    BOOL v592 = v29;
  }
  else
  {
    int v591 = v17;
    BOOL v592 = v29;
    char v590 = v46;
    if (a2 == 18)
    {
      int v115 = v19;
      BOOL v132 = *(void *)a1 == 0x702E323135787661
          && *(void *)(a1 + 8) == 0x352E71642E6C756DLL
          && *(_WORD *)(a1 + 16) == 12849;
      uint64_t v9 = 1;
      if (v132) {
        return v9;
      }
      goto LABEL_423;
    }
    if ((v35 & 1) == 0)
    {
      BOOL v147 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6C756D702E6B7361;
      if (v147 && *(_DWORD *)(a1 + 16) == 779183150) {
        return 1;
      }
    }
    int v115 = v19;
  }
  LODWORD(v9) = 0;
LABEL_423:
  if ((v45 & 1) == 0)
  {
    BOOL v149 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6C756D702E6B7361;
    if (v149 && *(void *)(a1 + 13) == 0x2E71642E756C756DLL) {
      return 1;
    }
  }
  if ((v30 & 1) == 0)
  {
    BOOL v151 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6C756D702E6B7361;
    if (v151 && *(void *)(a1 + 15) == 0x2E77732E72682E6CLL) {
      return 1;
    }
  }
  if ((v35 & 1) == 0)
  {
    BOOL v153 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6C756D702E6B7361;
    if (v153 && *(_DWORD *)(a1 + 16) == 779562600) {
      return 1;
    }
  }
  if ((v45 & 1) == 0)
  {
    BOOL v155 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6C756D702E6B7361;
    if (v155 && *(void *)(a1 + 13) == 0x2E772E75686C756DLL) {
      return 1;
    }
    BOOL v157 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x64616D702E6B7361;
    if (v157 && *(void *)(a1 + 13) == 0x2E642E776464616DLL) {
      return 1;
    }
  }
  if ((v30 & 1) == 0)
  {
    BOOL v159 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x64616D702E6B7361;
    if (v159 && *(void *)(a1 + 15) == 0x2E772E7362756464) {
      return 1;
    }
  }
  if ((v45 & 1) == 0)
  {
    BOOL v243 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6B6361702E6B7361;
    if (v243 && *(void *)(a1 + 13) == 0x2E627773736B6361) {
      return 1;
    }
    BOOL v245 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6B6361702E6B7361;
    if (v245 && *(void *)(a1 + 13) == 0x2E776473736B6361) {
      return 1;
    }
    BOOL v247 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6B6361702E6B7361;
    if (v247 && *(void *)(a1 + 13) == 0x2E627773756B6361) {
      return 1;
    }
    BOOL v249 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6B6361702E6B7361;
    if (v249 && *(void *)(a1 + 13) == 0x2E776473756B6361) {
      return 1;
    }
  }
  if (!v33)
  {
    BOOL v269 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x2E706D632E6B7361;
    if (v269 && *(unsigned char *)(a1 + 16) == 98) {
      return 1;
    }
    BOOL v271 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x2E706D632E6B7361;
    if (v271 && *(unsigned char *)(a1 + 16) == 100) {
      return 1;
    }
    BOOL v273 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x2E706D632E6B7361;
    if (v273 && *(unsigned char *)(a1 + 16) == 113) {
      return 1;
    }
    BOOL v275 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x2E706D632E6B7361;
    if (v275 && *(unsigned char *)(a1 + 16) == 119) {
      return 1;
    }
  }
  if (!v27 && *(void *)a1 == 0x632E323135787661 && *(_DWORD *)(a1 + 8) == 1882091629) {
    return 1;
  }
  if (!v33)
  {
    BOOL v281 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x706D63752E6B7361;
    if (v281 && *(unsigned char *)(a1 + 16) == 46) {
      return 1;
    }
    BOOL v283 = *(void *)a1 == 0x632E323135787661 && *(void *)(a1 + 8) == 0x6B73616D32627476;
    if (v283 && *(unsigned char *)(a1 + 16) == 46) {
      return 1;
    }
    BOOL v285 = *(void *)a1 == 0x632E323135787661 && *(void *)(a1 + 8) == 0x6B73616D32777476;
    if (v285 && *(unsigned char *)(a1 + 16) == 46) {
      return 1;
    }
    BOOL v287 = *(void *)a1 == 0x632E323135787661 && *(void *)(a1 + 8) == 0x6B73616D32647476;
    if (v287 && *(unsigned char *)(a1 + 16) == 46) {
      return 1;
    }
    BOOL v289 = *(void *)a1 == 0x632E323135787661 && *(void *)(a1 + 8) == 0x6B73616D32717476;
    if (v289 && *(unsigned char *)(a1 + 16) == 46) {
      return 1;
    }
  }
  if ((v30 & 1) == 0)
  {
    BOOL v162 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x726570762E6B7361;
    if (v162 && *(void *)(a1 + 15) == 0x2E7261766C696D72) {
      return 1;
    }
  }
  if ((v25 & 1) == 0)
  {
    BOOL v291 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6C6C73702E6B7361;
    if (v291 && *(_WORD *)(a1 + 16) == 25646) {
      return 1;
    }
    BOOL v293 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6C6C73702E6B7361;
    if (v293 && *(_WORD *)(a1 + 16) == 28974) {
      return 1;
    }
    BOOL v295 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6C6C73702E6B7361;
    if (v295 && *(_WORD *)(a1 + 16) == 30510) {
      return 1;
    }
    BOOL v297 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x617273702E6B7361;
    if (v297 && *(_WORD *)(a1 + 16) == 25646) {
      return 1;
    }
    BOOL v299 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x617273702E6B7361;
    if (v299 && *(_WORD *)(a1 + 16) == 28974) {
      return 1;
    }
    BOOL v301 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x617273702E6B7361;
    if (v301 && *(_WORD *)(a1 + 16) == 30510) {
      return 1;
    }
    BOOL v303 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6C7273702E6B7361;
    if (v303 && *(_WORD *)(a1 + 16) == 25646) {
      return 1;
    }
    BOOL v305 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6C7273702E6B7361;
    if (v305 && *(_WORD *)(a1 + 16) == 28974) {
      return 1;
    }
    BOOL v307 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6C7273702E6B7361;
    if (v307 && *(_WORD *)(a1 + 16) == 30510) {
      return 1;
    }
  }
  if (!v33)
  {
    BOOL v309 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6C6C73702E6B7361;
    if (v309 && *(unsigned char *)(a1 + 16) == 105) {
      return 1;
    }
    BOOL v311 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x617273702E6B7361;
    if (v311 && *(unsigned char *)(a1 + 16) == 105) {
      return 1;
    }
    BOOL v313 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6C7273702E6B7361;
    if (v313 && *(unsigned char *)(a1 + 16) == 105) {
      return 1;
    }
    BOOL v315 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6C6C73702E6B7361;
    if (v315 && *(unsigned char *)(a1 + 16) == 118) {
      return 1;
    }
    BOOL v317 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x617273702E6B7361;
    if (v317 && *(unsigned char *)(a1 + 16) == 118) {
      return 1;
    }
    BOOL v319 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6C7273702E6B7361;
    if (v319 && *(unsigned char *)(a1 + 16) == 118) {
      return 1;
    }
  }
  if (!v27)
  {
    if (*(void *)a1 == 0x6D702E3134657373 && *(_DWORD *)(a1 + 8) == 2020832879) {
      return 1;
    }
    if (*(void *)a1 == 0x6D702E3134657373 && *(_DWORD *)(a1 + 8) == 2021291631) {
      return 1;
    }
  }
  if ((v26 & 1) == 0)
  {
    if (*(void *)a1 == 0x6F6D702E32787661 && *(void *)(a1 + 3) == 0x7873766F6D702E32) {
      return 1;
    }
    if (*(void *)a1 == 0x6F6D702E32787661 && *(void *)(a1 + 3) == 0x787A766F6D702E32) {
      return 1;
    }
  }
  if ((v25 & 1) == 0)
  {
    BOOL v349 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x766F6D702E6B7361;
    if (v349 && *(_WORD *)(a1 + 16) == 30835) {
      return 1;
    }
    BOOL v351 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x766F6D702E6B7361;
    if (v351 && *(_WORD *)(a1 + 16) == 30842) {
      return 1;
    }
    BOOL v353 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6E637A6C2E6B7361;
    if (v353 && *(_WORD *)(a1 + 16) == 11892) {
      return 1;
    }
  }
  if ((v45 & 1) == 0)
  {
    BOOL v168 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x726574702E6B7361;
    if (v168 && *(void *)(a1 + 13) == 0x2E676F6C6E726574) {
      return 1;
    }
  }
  if ((v32 & 1) == 0)
  {
    BOOL v170 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6574702E7A6B7361;
    if (v170 && *(void *)(a1 + 14) == 0x2E676F6C6E726574) {
      return 1;
    }
  }
  if ((v35 & 1) == 0)
  {
    BOOL v172 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x616D70762E6B7361;
    if (v172 && *(_DWORD *)(a1 + 16) == 842359908) {
      return 1;
    }
  }
  if ((v45 & 1) == 0)
  {
    BOOL v174 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6D70762E7A6B7361;
    if (v174 && *(void *)(a1 + 13) == 0x32356464616D7076) {
      return 1;
    }
  }
  if ((v30 & 1) == 0)
  {
    BOOL v176 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x726570762E6B7361;
    if (v176 && *(void *)(a1 + 15) == 0x2E72617632696D72) {
      return 1;
    }
    BOOL v178 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x726570762E6B7361;
    if (v178 && *(void *)(a1 + 15) == 0x2E72617632746D72) {
      return 1;
    }
  }
  if (a2 >= 0x18)
  {
    BOOL v180 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6570762E7A6B7361;
    if (v180 && *(void *)(a1 + 16) == 0x2E72617632746D72) {
      return 1;
    }
  }
  if ((v45 & 1) == 0)
  {
    BOOL v182 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x706470762E6B7361;
    if (v182 && *(void *)(a1 + 13) == 0x2E64737562706470) {
      return 1;
    }
  }
  if ((v32 & 1) == 0)
  {
    BOOL v184 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6470762E7A6B7361;
    if (v184 && *(void *)(a1 + 14) == 0x2E64737562706470) {
      return 1;
    }
    BOOL v186 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x706470762E6B7361;
    if (v186 && *(void *)(a1 + 14) == 0x2E73647375627064) {
      return 1;
    }
  }
  if ((v30 & 1) == 0)
  {
    BOOL v188 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6470762E7A6B7361;
    if (v188 && *(void *)(a1 + 15) == 0x2E73647375627064) {
      return 1;
    }
  }
  if ((v45 & 1) == 0)
  {
    BOOL v190 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x706470762E6B7361;
    if (v190 && *(void *)(a1 + 13) == 0x2E64737377706470) {
      return 1;
    }
  }
  if ((v32 & 1) == 0)
  {
    BOOL v192 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6470762E7A6B7361;
    if (v192 && *(void *)(a1 + 14) == 0x2E64737377706470) {
      return 1;
    }
    BOOL v194 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x706470762E6B7361;
    if (v194 && *(void *)(a1 + 14) == 0x2E73647373777064) {
      return 1;
    }
  }
  if ((v30 & 1) == 0)
  {
    BOOL v196 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6470762E7A6B7361;
    if (v196 && *(void *)(a1 + 15) == 0x2E73647373777064) {
      return 1;
    }
  }
  if ((v45 & 1) == 0)
  {
    BOOL v198 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x737062642E6B7361;
    if (v198 && *(void *)(a1 + 13) == 0x2E77626461737062) {
      return 1;
    }
  }
  if ((v24 & 1) == 0)
  {
    BOOL v200 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x687370762E6B7361;
    if (v200 && *(void *)(a1 + 11) == 0x2E646C687370762ELL) {
      return 1;
    }
    BOOL v202 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x687370762E6B7361;
    if (v202 && *(void *)(a1 + 11) == 0x2E6472687370762ELL) {
      return 1;
    }
  }
  if ((v35 & 1) == 0)
  {
    BOOL v204 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x687370762E6B7361;
    if (v204 && *(_DWORD *)(a1 + 16) == 779510892) {
      return 1;
    }
    BOOL v206 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x687370762E6B7361;
    if (v206 && *(_DWORD *)(a1 + 16) == 779510898) {
      return 1;
    }
  }
  if ((v45 & 1) == 0)
  {
    BOOL v208 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x7370762E7A6B7361;
    if (v208 && *(void *)(a1 + 13) == 0x2E76646C68737076) {
      return 1;
    }
    BOOL v210 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x7370762E7A6B7361;
    if (v210 && *(void *)(a1 + 13) == 0x2E76647268737076) {
      return 1;
    }
  }
  if (!v592)
  {
    if (*(void *)a1 == 0x762E323135787661 && *(void *)(a1 + 6) == 0x2E646C687370762ELL) {
      return 1;
    }
    if (*(void *)a1 == 0x762E323135787661 && *(void *)(a1 + 6) == 0x2E6472687370762ELL) {
      return 1;
    }
  }
  if (!v33)
  {
    BOOL v437 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x2E6464612E6B7361;
    if (v437 && *(unsigned char *)(a1 + 16) == 112) {
      return 1;
    }
    BOOL v439 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x2E6275732E6B7361;
    if (v439 && *(unsigned char *)(a1 + 16) == 112) {
      return 1;
    }
    BOOL v441 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x2E6C756D2E6B7361;
    if (v441 && *(unsigned char *)(a1 + 16) == 112) {
      return 1;
    }
    BOOL v443 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x2E7669642E6B7361;
    if (v443 && *(unsigned char *)(a1 + 16) == 112) {
      return 1;
    }
    BOOL v445 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x2E78616D2E6B7361;
    if (v445 && *(unsigned char *)(a1 + 16) == 112) {
      return 1;
    }
    BOOL v447 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x2E6E696D2E6B7361;
    if (v447 && *(unsigned char *)(a1 + 16) == 112) {
      return 1;
    }
  }
  if ((v45 & 1) == 0)
  {
    BOOL v214 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6C6370662E6B7361;
    if (v214 && *(void *)(a1 + 13) == 0x702E7373616C6370) {
      return 1;
    }
  }
  if (a2 < 0x19) {
    goto LABEL_707;
  }
  if (*(void *)a1 == 0x6D2E323135787661
    && *(void *)(a1 + 8) == 0x687370762E6B7361
    && *(void *)(a1 + 16) == 0x626D717469626675
    && *(unsigned char *)(a1 + 24) == 46)
  {
    return 1;
  }
  if (a2 >= 0x1B)
  {
    if (*(void *)a1 == 0x6D2E323135787661
      && *(void *)(a1 + 8) == 0x6C756D702E6B7361
      && *(void *)(a1 + 16) == 0x2E74666968736974
      && *(void *)(a1 + 19) == 0x2E62712E74666968)
    {
      return 1;
    }
    char v219 = 0;
    if (v45) {
      goto LABEL_715;
    }
  }
  else
  {
LABEL_707:
    char v219 = 1;
    if (v45) {
      goto LABEL_715;
    }
  }
  if (*(void *)a1 == 0x6D2E323135787661
    && *(void *)(a1 + 8) == 0x666E6F632E6B7361
    && *(void *)(a1 + 13) == 0x2E7463696C666E6FLL)
  {
    return 1;
  }
LABEL_715:
  if (a2 == 23)
  {
    BOOL v222 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x766F6D702E6B7361;
    if (v222 && *(void *)(a1 + 15) == 0x3635322E64712E76) {
      return 1;
    }
    BOOL v224 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x766F6D702E6B7361;
    if (v224 && *(void *)(a1 + 15) == 0x3231352E64712E76) {
      return 1;
    }
    BOOL v226 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x766F6D702E6B7361;
    if (v226 && *(void *)(a1 + 15) == 0x3635322E62772E76) {
      return 1;
    }
    BOOL v228 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x766F6D702E6B7361;
    if (v228 && *(void *)(a1 + 15) == 0x3231352E62772E76) {
      return 1;
    }
  }
  if (v21)
  {
    if (*(void *)a1 == 0x737476632E657373 && *(_DWORD *)(a1 + 8) == 1936929385) {
      return 1;
    }
  }
  if (v23)
  {
    if (*(void *)a1 == 0x737476632E657373 && *(void *)(a1 + 6) == 0x7373323436697374) {
      return 1;
    }
  }
  if (a2 == 13 && *(void *)a1 == 0x7476632E32657373 && *(void *)(a1 + 5) == 0x6473326973747663) {
    return 1;
  }
  if (v115)
  {
    if (*(void *)a1 == 0x7476632E32657373 && *(void *)(a1 + 7) == 0x6473323436697374) {
      return 1;
    }
  }
  if (a2 == 13)
  {
    if (*(void *)a1 == 0x7476632E32657373 && *(void *)(a1 + 5) == 0x6473327373747663) {
      return 1;
    }
    if (*(void *)a1 == 0x7476632E32657373 && *(void *)(a1 + 5) == 0x6470327164747663) {
      return 1;
    }
    if (*(void *)a1 == 0x7476632E32657373 && *(void *)(a1 + 5) == 0x7370327164747663) {
      return 1;
    }
    if (*(void *)a1 == 0x7476632E32657373 && *(void *)(a1 + 5) == 0x6470327370747663) {
      return 1;
    }
  }
  else if (v18)
  {
    BOOL v452 = *(void *)a1 == 0x647476632E787661 && *(void *)(a1 + 8) == 0x35322E64702E3271;
    if (v452 && *(unsigned char *)(a1 + 16) == 54) {
      return 1;
    }
    BOOL v454 = *(void *)a1 == 0x647476632E787661 && *(void *)(a1 + 8) == 0x35322E73702E3271;
    if (v454 && *(unsigned char *)(a1 + 16) == 54) {
      return 1;
    }
  }
  if (v9)
  {
    BOOL v456 = *(void *)a1 == 0x2E7476632E787661 && *(void *)(a1 + 8) == 0x322E64702E327370;
    if (v456 && *(_WORD *)(a1 + 16) == 13877) {
      return 1;
    }
  }
  if ((v22 & 1) == 0 && *(void *)a1 == 0x7032687074766376 && *(_WORD *)(a1 + 8) == 11891) {
    return 1;
  }
  if (!v47 && *(void *)a1 == 0x736E69762E787661 && *(void *)(a1 + 8) == 0x2E38323166747265) {
    return 1;
  }
  if (v20)
  {
    if (*(void *)a1 == 0x6E69762E32787661 && *(void *)(a1 + 8) == 0x3832316974726573) {
      return 1;
    }
  }
  if ((v25 & 1) == 0)
  {
    BOOL v461 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x65736E692E6B7361;
    if (v461 && *(_WORD *)(a1 + 16) == 29810) {
      return 1;
    }
  }
  if (!v33)
  {
    BOOL v463 = *(void *)a1 == 0x747865762E787661 && *(void *)(a1 + 8) == 0x3832316674636172;
    if (v463 && *(unsigned char *)(a1 + 16) == 46) {
      return 1;
    }
  }
  if (v18)
  {
    int v465 = *(unsigned __int8 *)(a1 + 16);
    BOOL v466 = *(void *)a1 == 0x7865762E32787661 && *(void *)(a1 + 8) == 0x3231697463617274;
    int v467 = 56;
  }
  else
  {
    if (v35) {
      goto LABEL_1702;
    }
    int v465 = *(_DWORD *)(a1 + 16);
    BOOL v466 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x747865762E6B7361;
    int v467 = 1952670066;
  }
  if (v466 && v465 == v467) {
    return 1;
  }
LABEL_1702:
  if (!v27 && *(void *)a1 == 0x6F6D2E6134657373 && *(_DWORD *)(a1 + 8) == 779382390) {
    return 1;
  }
  if ((v22 & 1) == 0 && *(void *)a1 == 0x6E766F6D2E787661 && *(_WORD *)(a1 + 8) == 11892) {
    return 1;
  }
  if (!v34 && *(void *)a1 == 0x732E323135787661 && *(void *)(a1 + 7) == 0x2E746E65726F7473) {
    return 1;
  }
  if (v23)
  {
    if (*(void *)a1 == 0x6F6D2E3134657373 && *(void *)(a1 + 6) == 0x617164746E766F6DLL) {
      return 1;
    }
  }
  if (a2 == 13 && *(void *)a1 == 0x766F6D2E32787661 && *(void *)(a1 + 5) == 0x617164746E766F6DLL) {
    return 1;
  }
  if (v115)
  {
    if (*(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 7) == 0x617164746E766F6DLL) {
      return 1;
    }
  }
  if (v23)
  {
    if (*(void *)a1 == 0x6F74732E32657373 && *(void *)(a1 + 6) == 0x71642E6C65726F74) {
      return 1;
    }
  }
  if ((v26 & 1) == 0 && *(void *)a1 == 0x726F74732E657373 && *(void *)(a1 + 3) == 0x2E7565726F74732ELL) {
    return 1;
  }
  if (!v27 && *(void *)a1 == 0x6F74732E32657373 && *(_DWORD *)(a1 + 8) == 779445618) {
    return 1;
  }
  if ((v26 & 1) == 0 && *(void *)a1 == 0x726F74732E787661 && *(void *)(a1 + 3) == 0x2E7565726F74732ELL) {
    return 1;
  }
  if ((v24 & 1) == 0)
  {
    BOOL v479 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x726F74732E6B7361;
    if (v479 && *(void *)(a1 + 11) == 0x2E7565726F74732ELL) {
      return 1;
    }
    BOOL v481 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x726F74732E6B7361;
    if (v481 && *(void *)(a1 + 11) == 0x702E65726F74732ELL) {
      return 1;
    }
  }
  if ((v35 & 1) == 0)
  {
    BOOL v501 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x726F74732E6B7361;
    if (v501 && *(_DWORD *)(a1 + 16) == 778186341) {
      return 1;
    }
    BOOL v503 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x726F74732E6B7361;
    if (v503 && *(_DWORD *)(a1 + 16) == 779562597) {
      return 1;
    }
    BOOL v505 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x726F74732E6B7361;
    if (v505 && *(_DWORD *)(a1 + 16) == 778317413) {
      return 1;
    }
    BOOL v507 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x726F74732E6B7361;
    if (v507 && *(_DWORD *)(a1 + 16) == 779169381) {
      return 1;
    }
    if (a2 == 20)
    {
      BOOL v509 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x726F74732E6B7361;
      if (v509 && *(_DWORD *)(a1 + 16) == 1936928357) {
        return 1;
      }
    }
  }
  if ((v25 & 1) == 0)
  {
    BOOL v483 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x64616F6C2E6B7361;
    if (v483 && *(_WORD *)(a1 + 16) == 11893) {
      return 1;
    }
  }
  if (!v33)
  {
    BOOL v485 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x64616F6C2E6B7361;
    if (v485 && *(unsigned char *)(a1 + 16) == 46) {
      return 1;
    }
  }
  if (a2 >= 0x18)
  {
    BOOL v487 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x617078652E6B7361;
    if (v487 && *(void *)(a1 + 16) == 0x2E64616F6C2E646ELL) {
      return 1;
    }
  }
  if ((v219 & 1) == 0)
  {
    BOOL v489 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x706D6F632E6B7361;
    BOOL v490 = v489 && *(void *)(a1 + 16) == 0x6F74732E73736572;
    if (v490 && *(void *)(a1 + 19) == 0x2E65726F74732E73) {
      return 1;
    }
  }
  if ((v35 & 1) == 0)
  {
    BOOL v511 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x617078652E6B7361;
    if (v511 && *(_DWORD *)(a1 + 16) == 1647207534) {
      return 1;
    }
    BOOL v513 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x617078652E6B7361;
    if (v513 && *(_DWORD *)(a1 + 16) == 1999529070) {
      return 1;
    }
    BOOL v515 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x617078652E6B7361;
    if (v515 && *(_DWORD *)(a1 + 16) == 1680761966) {
      return 1;
    }
    BOOL v517 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x617078652E6B7361;
    if (v517 && *(_DWORD *)(a1 + 16) == 1898865774) {
      return 1;
    }
    BOOL v519 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x617078652E6B7361;
    if (v519 && *(_DWORD *)(a1 + 16) == 1882088558) {
      return 1;
    }
  }
  if ((v32 & 1) == 0)
  {
    BOOL v521 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x706D6F632E6B7361;
    if (v521 && *(void *)(a1 + 14) == 0x622E73736572706DLL) {
      return 1;
    }
    BOOL v523 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x706D6F632E6B7361;
    if (v523 && *(void *)(a1 + 14) == 0x772E73736572706DLL) {
      return 1;
    }
    BOOL v525 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x706D6F632E6B7361;
    if (v525 && *(void *)(a1 + 14) == 0x642E73736572706DLL) {
      return 1;
    }
    BOOL v527 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x706D6F632E6B7361;
    if (v527 && *(void *)(a1 + 14) == 0x712E73736572706DLL) {
      return 1;
    }
    BOOL v529 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x706D6F632E6B7361;
    if (v529 && *(void *)(a1 + 14) == 0x702E73736572706DLL) {
      return 1;
    }
  }
  if (v20)
  {
    if (*(void *)a1 == 0x72632E3234657373 && *(void *)(a1 + 8) == 0x382E34362E323363) {
      return 1;
    }
  }
  if (!v47 && *(void *)a1 == 0x6F7262762E787661 && *(void *)(a1 + 8) == 0x732E747361636461) {
    return 1;
  }
  if ((v24 & 1) == 0)
  {
    BOOL v494 = *(void *)a1 == 0x762E323135787661 && *(void *)(a1 + 8) == 0x73616364616F7262;
    if (v494 && *(void *)(a1 + 11) == 0x732E747361636461) {
      return 1;
    }
  }
  if ((v35 & 1) == 0)
  {
    BOOL v496 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x696C61702E6B7361;
    if (v496 && *(_DWORD *)(a1 + 16) == 779251303) {
      return 1;
    }
  }
  if ((v24 & 1) == 0)
  {
    BOOL v498 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x696C61762E6B7361;
    if (v498 && *(void *)(a1 + 11) == 0x2E6E67696C61762ELL) {
      return 1;
    }
  }
  if (!v27)
  {
    if (*(void *)a1 == 0x6C73702E32657373 && *(_DWORD *)(a1 + 8) == 1902390892) {
      return 1;
    }
    if (*(void *)a1 == 0x7273702E32657373 && *(_DWORD *)(a1 + 8) == 1902390892) {
      return 1;
    }
    if (*(void *)a1 == 0x6C73702E32787661 && *(_DWORD *)(a1 + 8) == 1902390892) {
      return 1;
    }
    if (*(void *)a1 == 0x7273702E32787661 && *(_DWORD *)(a1 + 8) == 1902390892) {
      return 1;
    }
  }
  if (v592)
  {
    if (a2 == 13 && *(void *)a1 == 0x62702E3134657373 && *(void *)(a1 + 5) == 0x77646E656C62702ELL) {
      return 1;
    }
  }
  else
  {
    if (*(void *)a1 == 0x702E323135787661 && *(void *)(a1 + 6) == 0x71642E6C6C73702ELL) {
      return 1;
    }
    if (*(void *)a1 == 0x702E323135787661 && *(void *)(a1 + 6) == 0x71642E6C7273702ELL) {
      return 1;
    }
  }
  if (!v27 && *(void *)a1 == 0x6C622E3134657373 && *(_DWORD *)(a1 + 8) == 1885630053) {
    return 1;
  }
  if ((v26 & 1) == 0 && *(void *)a1 == 0x6E656C622E787661 && *(void *)(a1 + 3) == 0x702E646E656C622ELL) {
    return 1;
  }
  if (v21)
  {
    if (*(void *)a1 == 0x6C62702E32787661 && *(_DWORD *)(a1 + 8) == 2003070565) {
      return 1;
    }
  }
  if ((v28 & 1) == 0 && *(void *)a1 == 0x6C62702E32787661 && *(void *)(a1 + 5) == 0x2E64646E656C6270) {
    return 1;
  }
  if ((v25 & 1) == 0)
  {
    BOOL v541 = *(void *)a1 == 0x6F7262762E787661 && *(void *)(a1 + 8) == 0x3166747361636461;
    if (v541 && *(_WORD *)(a1 + 16) == 14386) {
      return 1;
    }
  }
  if (a2 == 19)
  {
    BOOL v543 = *(void *)a1 == 0x7262762E32787661 && *(void *)(a1 + 8) == 0x697473616364616FLL;
    if (v543 && *(void *)(a1 + 11) == 0x3832316974736163) {
      return 1;
    }
  }
  if ((v219 & 1) == 0)
  {
    BOOL v563 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x616F72622E6B7361;
    BOOL v564 = v563 && *(void *)(a1 + 16) == 0x3233667473616364;
    if (v564 && *(void *)(a1 + 19) == 0x2E34783233667473) {
      return 1;
    }
    BOOL v566 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x616F72622E6B7361;
    BOOL v567 = v566 && *(void *)(a1 + 16) == 0x3436667473616364;
    if (v567 && *(void *)(a1 + 19) == 0x2E32783436667473) {
      return 1;
    }
    BOOL v569 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x616F72622E6B7361;
    BOOL v570 = v569 && *(void *)(a1 + 16) == 0x3233667473616364;
    if (v570 && *(void *)(a1 + 19) == 0x2E38783233667473) {
      return 1;
    }
    BOOL v572 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x616F72622E6B7361;
    BOOL v573 = v572 && *(void *)(a1 + 16) == 0x3436667473616364;
    if (v573 && *(void *)(a1 + 19) == 0x2E34783436667473) {
      return 1;
    }
    BOOL v575 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x616F72622E6B7361;
    BOOL v576 = v575 && *(void *)(a1 + 16) == 0x3233697473616364;
    if (v576 && *(void *)(a1 + 19) == 0x2E34783233697473) {
      return 1;
    }
    BOOL v578 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x616F72622E6B7361;
    BOOL v579 = v578 && *(void *)(a1 + 16) == 0x3436697473616364;
    if (v579 && *(void *)(a1 + 19) == 0x2E32783436697473) {
      return 1;
    }
    BOOL v581 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x616F72622E6B7361;
    BOOL v582 = v581 && *(void *)(a1 + 16) == 0x3233697473616364;
    if (v582 && *(void *)(a1 + 19) == 0x2E38783233697473) {
      return 1;
    }
    BOOL v584 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x616F72622E6B7361;
    BOOL v585 = v584 && *(void *)(a1 + 16) == 0x3436697473616364;
    if (v585 && *(void *)(a1 + 19) == 0x2E34783436697473) {
      return 1;
    }
  }
  if (v591)
  {
    if (*(void *)a1 == 0x6D6370762E706F78 && *(_WORD *)(a1 + 8) == 30319) {
      return 1;
    }
  }
  if (v23)
  {
    if (*(void *)a1 == 0x6D6370762E706F78 && *(void *)(a1 + 6) == 0x3635322E766F6D63) {
      return 1;
    }
  }
  if ((v25 & 1) == 0)
  {
    BOOL v547 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x65766F6D2E6B7361;
    if (v547 && *(_WORD *)(a1 + 16) == 29486) {
      return 1;
    }
  }
  if (!v34 && *(void *)a1 == 0x632E323135787661 && *(void *)(a1 + 7) == 0x326B73616D747663) {
    return 1;
  }
  if ((v590 & 1) == 0)
  {
    if (*(void *)a1 == 0x6F6370762E706F78 && *(unsigned char *)(a1 + 8) == 109) {
      return 1;
    }
    if (*(void *)a1 == 0x6F7270762E706F78 && *(unsigned char *)(a1 + 8) == 116) {
      return 1;
    }
  }
  if ((v26 & 1) == 0)
  {
    if (*(void *)a1 == 0x702E323135787661 && *(void *)(a1 + 3) == 0x6C6F72702E323135) {
      return 1;
    }
    if (*(void *)a1 == 0x702E323135787661 && *(void *)(a1 + 3) == 0x726F72702E323135) {
      return 1;
    }
  }
  if ((v25 & 1) == 0)
  {
    BOOL v554 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x726F72702E6B7361;
    if (v554 && *(_WORD *)(a1 + 16) == 11894) {
      return 1;
    }
  }
  if (!v33)
  {
    BOOL v556 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x726F72702E6B7361;
    if (v556 && *(unsigned char *)(a1 + 16) == 46) {
      return 1;
    }
  }
  if ((v25 & 1) == 0)
  {
    BOOL v558 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6C6F72702E6B7361;
    if (v558 && *(_WORD *)(a1 + 16) == 11894) {
      return 1;
    }
  }
  if (!v33)
  {
    BOOL v560 = *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x6C6F72702E6B7361;
    if (v560 && *(unsigned char *)(a1 + 16) == 46) {
      return 1;
    }
  }
  if (v28) {
    goto LABEL_2102;
  }
  if (*(void *)a1 == 0x702E323135787661 && *(void *)(a1 + 5) == 0x6D74736574702E32) {
    return 1;
  }
  if (v592)
  {
LABEL_2102:
    if (v47) {
      return 0;
    }
    return *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x677661702E6B7361;
  }
  BOOL v587 = *(void *)a1 == 0x702E323135787661 && *(void *)(a1 + 6) == 0x6D6E74736574702ELL;
  uint64_t v9 = v587;
  char v588 = v587 || v47;
  if ((v588 & 1) == 0) {
    return *(void *)a1 == 0x6D2E323135787661 && *(void *)(a1 + 8) == 0x677661702E6B7361;
  }
  return v9;
}

BOOL sub_1CC5350A0(uint64_t ***a1, int a2, void *a3)
{
  uint64_t v6 = a1[3][2][1];
  llvm::FixedVectorType::get((llvm::FixedVectorType *)(***a1 + 1672), (llvm::Type *)4);
  uint64_t v8 = v7;
  if (v6 != v7) {
    return v6 == v8;
  }
  if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
  {
    uint64_t v9 = ***a1;
    uint64_t v10 = *(void *)(v9 + 152);
    uint64_t v11 = *(unsigned int *)(v9 + 168);
    if (v11)
    {
      LODWORD(v12) = (v11 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      char v13 = (uint64_t ****)(v10 + 16 * v12);
      uint64_t v14 = *v13;
      if (*v13 == a1)
      {
LABEL_10:
        int v17 = v13[1];
        int v20 = (const char *)*v17;
        int v18 = (const char *)(v17 + 2);
        int v19 = v20;
        goto LABEL_11;
      }
      int v15 = 1;
      while (v14 != (uint64_t ***)-4096)
      {
        int v16 = v12 + v15++;
        uint64_t v12 = v16 & (v11 - 1);
        uint64_t v14 = *(uint64_t ****)(v10 + 16 * v12);
        if (v14 == a1)
        {
          char v13 = (uint64_t ****)(v10 + 16 * v12);
          goto LABEL_10;
        }
      }
    }
    char v13 = (uint64_t ****)(v10 + 16 * v11);
    goto LABEL_10;
  }
  int v19 = 0;
  int v18 = &byte_1CFBCE98E;
LABEL_11:
  __int16 v42 = 773;
  v41[0] = v18;
  v41[1] = v19;
  v41[2] = ".old";
  llvm::Value::setNameImpl((llvm::Value *)a1, v41);
  if (!*((unsigned char *)a1 + 16))
  {
    if ((*((unsigned char *)a1 + 23) & 0x10) == 0) {
      goto LABEL_32;
    }
    uint64_t v27 = ***a1;
    uint64_t v28 = *(void *)(v27 + 152);
    uint64_t v29 = *(unsigned int *)(v27 + 168);
    if (v29)
    {
      LODWORD(v30) = (v29 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      char v31 = (uint64_t ****)(v28 + 16 * v30);
      char v32 = *v31;
      if (*v31 == a1)
      {
LABEL_25:
        char v35 = v31[1];
        unint64_t v38 = (unint64_t)*v35;
        unsigned int v36 = v35 + 2;
        unint64_t v37 = v38;
        if (v38 >= 5 && *(_DWORD *)v36 == *(_DWORD *)"llvm." && v36[4] == aLlvm_1[4])
        {
          *((_DWORD *)a1 + 8) |= 0x2000u;
          int v40 = llvm::Function::lookupIntrinsicID(v36, v37);
LABEL_33:
          *((_DWORD *)a1 + 9) = v40;
          goto LABEL_12;
        }
LABEL_32:
        int v40 = 0;
        *((_DWORD *)a1 + 8) &= ~0x2000u;
        goto LABEL_33;
      }
      int v33 = 1;
      while (v32 != (uint64_t ***)-4096)
      {
        int v34 = v30 + v33++;
        uint64_t v30 = v34 & (v29 - 1);
        char v32 = *(uint64_t ****)(v28 + 16 * v30);
        if (v32 == a1)
        {
          char v31 = (uint64_t ****)(v28 + 16 * v30);
          goto LABEL_25;
        }
      }
    }
    char v31 = (uint64_t ****)(v28 + 16 * v29);
    goto LABEL_25;
  }
LABEL_12:
  int v21 = a1[5];
  llvm::Intrinsic::getType(*v21, a2, 0, 0);
  char v22 = (unsigned __int8 *)off_1E6830B58[a2];
  if (v22) {
    int v23 = (const char *)strlen(off_1E6830B58[a2]);
  }
  else {
    int v23 = 0;
  }
  Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v21, a2, 0, 0);
  llvm::Module::getOrInsertFunction((uint64_t)v21, v22, v23, Type, 0);
  *a3 = v25;
  return v6 == v8;
}

BOOL sub_1CC535318(llvm::Value *this, int a2, void *a3)
{
  int v3 = *(_DWORD *)(*(void *)(*(void *)(*((void *)this + 3) + 16)
                             + 8 * (*(_DWORD *)(*((void *)this + 3) + 12) - 1))
                 + 8);
  if (v3 != 8205) {
    return v3 == 8205;
  }
  if ((*((unsigned char *)this + 23) & 0x10) == 0)
  {
    int v17 = 0;
    int v16 = &byte_1CFBCE98E;
    goto LABEL_11;
  }
  uint64_t v7 = ***(void ***)this;
  uint64_t v8 = *(void *)(v7 + 152);
  uint64_t v9 = *(unsigned int *)(v7 + 168);
  if (!v9) {
    goto LABEL_9;
  }
  LODWORD(v10) = (v9 - 1) & ((this >> 4) ^ (this >> 9));
  uint64_t v11 = v8 + 16 * v10;
  uint64_t v12 = *(llvm::Value **)v11;
  if (*(llvm::Value **)v11 != this)
  {
    int v13 = 1;
    while (v12 != (llvm::Value *)-4096)
    {
      int v14 = v10 + v13++;
      uint64_t v10 = v14 & (v9 - 1);
      uint64_t v12 = *(llvm::Value **)(v8 + 16 * v10);
      if (v12 == this)
      {
        uint64_t v11 = v8 + 16 * v10;
        goto LABEL_10;
      }
    }
LABEL_9:
    uint64_t v11 = v8 + 16 * v9;
  }
LABEL_10:
  int v15 = *(void **)(v11 + 8);
  int v18 = (const char *)*v15;
  int v16 = (const char *)(v15 + 2);
  int v17 = v18;
LABEL_11:
  __int16 v40 = 773;
  v39[0] = v16;
  v39[1] = v17;
  v39[2] = ".old";
  llvm::Value::setNameImpl(this, v39);
  if (this && !*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_33;
    }
    uint64_t v25 = ***(void ***)this;
    uint64_t v26 = *(void *)(v25 + 152);
    uint64_t v27 = *(unsigned int *)(v25 + 168);
    if (v27)
    {
      LODWORD(v28) = (v27 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v29 = v26 + 16 * v28;
      uint64_t v30 = *(llvm::Value **)v29;
      if (*(llvm::Value **)v29 == this)
      {
LABEL_26:
        int v33 = *(void **)(v29 + 8);
        unint64_t v36 = *v33;
        int v34 = v33 + 2;
        unint64_t v35 = v36;
        if (v36 >= 5 && *(_DWORD *)v34 == *(_DWORD *)"llvm." && v34[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v38 = llvm::Function::lookupIntrinsicID(v34, v35);
LABEL_34:
          *((_DWORD *)this + 9) = v38;
          goto LABEL_13;
        }
LABEL_33:
        int v38 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_34;
      }
      int v31 = 1;
      while (v30 != (llvm::Value *)-4096)
      {
        int v32 = v28 + v31++;
        uint64_t v28 = v32 & (v27 - 1);
        uint64_t v30 = *(llvm::Value **)(v26 + 16 * v28);
        if (v30 == this)
        {
          uint64_t v29 = v26 + 16 * v28;
          goto LABEL_26;
        }
      }
    }
    uint64_t v29 = v26 + 16 * v27;
    goto LABEL_26;
  }
LABEL_13:
  int v19 = (uint64_t **)*((void *)this + 5);
  llvm::Intrinsic::getType(*v19, a2, 0, 0);
  int v20 = (unsigned __int8 *)off_1E6830B58[a2];
  if (v20) {
    int v21 = (const char *)strlen(off_1E6830B58[a2]);
  }
  else {
    int v21 = 0;
  }
  Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v19, a2, 0, 0);
  llvm::Module::getOrInsertFunction((uint64_t)v19, v20, v21, Type, 0);
  *a3 = v23;
  return v3 == 8205;
}

BOOL sub_1CC535588(llvm::Value *this, int a2, void *a3)
{
  int v3 = *(_DWORD *)(**(void **)(*((void *)this + 3) + 16) + 8) & 0xFE;
  if (v3 == 18) {
    return v3 != 18;
  }
  if ((*((unsigned char *)this + 23) & 0x10) == 0)
  {
    int v17 = 0;
    int v16 = &byte_1CFBCE98E;
    goto LABEL_11;
  }
  uint64_t v7 = ***(void ***)this;
  uint64_t v8 = *(void *)(v7 + 152);
  uint64_t v9 = *(unsigned int *)(v7 + 168);
  if (!v9) {
    goto LABEL_9;
  }
  LODWORD(v10) = (v9 - 1) & ((this >> 4) ^ (this >> 9));
  uint64_t v11 = v8 + 16 * v10;
  uint64_t v12 = *(llvm::Value **)v11;
  if (*(llvm::Value **)v11 != this)
  {
    int v13 = 1;
    while (v12 != (llvm::Value *)-4096)
    {
      int v14 = v10 + v13++;
      uint64_t v10 = v14 & (v9 - 1);
      uint64_t v12 = *(llvm::Value **)(v8 + 16 * v10);
      if (v12 == this)
      {
        uint64_t v11 = v8 + 16 * v10;
        goto LABEL_10;
      }
    }
LABEL_9:
    uint64_t v11 = v8 + 16 * v9;
  }
LABEL_10:
  int v15 = *(void **)(v11 + 8);
  int v18 = (const char *)*v15;
  int v16 = (const char *)(v15 + 2);
  int v17 = v18;
LABEL_11:
  __int16 v40 = 773;
  v39[0] = v16;
  v39[1] = v17;
  v39[2] = ".old";
  llvm::Value::setNameImpl(this, v39);
  if (this && !*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_33;
    }
    uint64_t v25 = ***(void ***)this;
    uint64_t v26 = *(void *)(v25 + 152);
    uint64_t v27 = *(unsigned int *)(v25 + 168);
    if (v27)
    {
      LODWORD(v28) = (v27 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v29 = v26 + 16 * v28;
      uint64_t v30 = *(llvm::Value **)v29;
      if (*(llvm::Value **)v29 == this)
      {
LABEL_26:
        int v33 = *(void **)(v29 + 8);
        unint64_t v36 = *v33;
        int v34 = v33 + 2;
        unint64_t v35 = v36;
        if (v36 >= 5 && *(_DWORD *)v34 == *(_DWORD *)"llvm." && v34[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v38 = llvm::Function::lookupIntrinsicID(v34, v35);
LABEL_34:
          *((_DWORD *)this + 9) = v38;
          goto LABEL_13;
        }
LABEL_33:
        int v38 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_34;
      }
      int v31 = 1;
      while (v30 != (llvm::Value *)-4096)
      {
        int v32 = v28 + v31++;
        uint64_t v28 = v32 & (v27 - 1);
        uint64_t v30 = *(llvm::Value **)(v26 + 16 * v28);
        if (v30 == this)
        {
          uint64_t v29 = v26 + 16 * v28;
          goto LABEL_26;
        }
      }
    }
    uint64_t v29 = v26 + 16 * v27;
    goto LABEL_26;
  }
LABEL_13:
  int v19 = (uint64_t **)*((void *)this + 5);
  llvm::Intrinsic::getType(*v19, a2, 0, 0);
  int v20 = (unsigned __int8 *)off_1E6830B58[a2];
  if (v20) {
    int v21 = (const char *)strlen(off_1E6830B58[a2]);
  }
  else {
    int v21 = 0;
  }
  Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v19, a2, 0, 0);
  llvm::Module::getOrInsertFunction((uint64_t)v19, v20, v21, Type, 0);
  *a3 = v23;
  return v3 != 18;
}

llvm::Instruction *sub_1CC5357E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (!a2 || *(unsigned __int8 *)(a2 + 16) > 0x14u || !a3 || *(unsigned __int8 *)(a3 + 16) > 0x14u)
  {
    __int16 v14 = 257;
    if (a5)
    {
      uint64_t v12 = llvm::BinaryOperator::Create(27, (void *)a2, a3, v13, 0);
      llvm::Instruction::setIsExact((uint64_t)v12, 1);
      uint64_t v8 = (uint64_t *)a1;
      uint64_t v7 = v12;
    }
    else
    {
      uint64_t v7 = llvm::BinaryOperator::Create(27, (void *)a2, a3, v13, 0);
      uint64_t v8 = (uint64_t *)a1;
    }
    return sub_1CB844E0C(v8, v7, a4);
  }
  uint64_t v9 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(a1 + 72) + 168))(*(void *)(a1 + 72));
  if (v9) {
    BOOL v11 = v9[16] >= 0x1Cu;
  }
  else {
    BOOL v11 = 0;
  }
  if (!v11) {
    return (llvm::Instruction *)v9;
  }

  return sub_1CB844E0C((uint64_t *)a1, (llvm::Instruction *)v9, a4);
}

void *sub_1CC535908(void *result, char *__src, char *a3, unint64_t a4)
{
  uint64_t v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (a4 > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11 >> 61) {
      abort();
    }
    uint64_t result = operator new(8 * v11);
    uint64_t v9 = (char *)result;
    *uint64_t v7 = result;
    v7[1] = result;
    v7[2] = &result[v11];
    size_t v12 = a3 - v6;
    if (v12) {
      uint64_t result = memcpy(result, v6, v12);
    }
    int v13 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  int v13 = (void **)(result + 1);
  __int16 v14 = (unsigned char *)result[1];
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
  {
    size_t v12 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    int v17 = (void *)*result;
LABEL_20:
    uint64_t result = memmove(v17, __src, v12);
    goto LABEL_21;
  }
  int v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v14 - v9);
    uint64_t v9 = (char *)*v13;
  }
  size_t v12 = a3 - v16;
  if (v12)
  {
    int v17 = v9;
    __src = v16;
    goto LABEL_20;
  }
LABEL_21:
  const llvm::APFloat *v13 = &v9[v12];
  return result;
}

uint64_t sub_1CC535A40(uint64_t a1)
{
  int v3 = (uint64_t *)(a1 + 64);
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2 && (*(unsigned char *)(v2 + 19) & 0x20) != 0
    || (uint64_t result = llvm::CallBase::hasFnAttrOnCalledFunction(a1, 61), result))
  {
    uint64_t result = sub_1CBFC7338(a1);
    if ((result & 1) == 0)
    {
      *(void *)(a1 + 64) = llvm::AttributeList::removeAttributeAtIndex(v3, **(uint64_t ***)a1, -1, 61);
      uint64_t result = llvm::AttributeList::addAttributeAtIndex(v3, **(uint64_t ***)a1, -1, 20);
      *(void *)(a1 + 64) = result;
    }
  }
  return result;
}

long long *sub_1CC535AC8(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      long long v7 = *v5;
      *(void *)(a4 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a4 = v7;
      *((unsigned char *)v5 + 23) = 0;
      *(unsigned char *)uint64_t v5 = 0;
      sub_1CD46D2D8(a4 + 24, (__n128 *)((char *)v5 + 24));
      a4 += 48;
      v5 += 3;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

BOOL sub_1CC535B50(uint64_t a1)
{
  char v1 = *(unsigned char *)(a1 + 23);
  int v2 = v1;
  uint64_t v3 = v1 & 0x7F;
  if (v2 < 0) {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 == 22
    && (v2 >= 0 ? (uint64_t v4 = (uint64_t *)a1) : (uint64_t v4 = *(uint64_t **)a1),
        (uint64_t v5 = *v4, v6 = v4[1], v7 = *(uint64_t *)((char *)v4 + 14), v5 == 0x72612E676E616C63)
      ? (BOOL v8 = v6 == 0x6863617474612E63)
      : (BOOL v8 = 0),
        v8 ? (BOOL v9 = v7 == 0x6C6C616364656863) : (BOOL v9 = 0),
        v9))
  {
    return *(void *)(a1 + 32) == *(void *)(a1 + 24);
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::BasicBlock::getValueSymbolTable(llvm::BasicBlock *this)
{
  uint64_t v1 = *((void *)this + 7);
  if (v1) {
    return *(void *)(v1 + 104);
  }
  else {
    return 0;
  }
}

uint64_t llvm::BasicBlock::getContext(llvm::BasicBlock *this)
{
  return **(void **)this;
}

uint64_t llvm::invalidateParentIListOrdering<llvm::BasicBlock>(uint64_t result)
{
  *(_WORD *)(result + 18) &= ~0x8000u;
  return result;
}

uint64_t llvm::SymbolTableListTraits<llvm::Instruction>::getListOwner(uint64_t a1)
{
  return a1 - 40;
}

uint64_t llvm::SymbolTableListTraits<llvm::Instruction>::getList(uint64_t a1)
{
  return a1 + 40;
}

uint64_t llvm::SymbolTableListTraits<llvm::Instruction>::getSymTab(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 56);
    if (v1) {
      return *(void *)(v1 + 104);
    }
    else {
      return 0;
    }
  }
  return result;
}

void llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 40) = a1 - 40;
  *(_WORD *)(a1 - 22) &= ~0x8000u;
  if ((*(unsigned char *)(a2 + 23) & 0x10) != 0)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (v2)
    {
      uint64_t v3 = *(llvm::ValueSymbolTable **)(v2 + 104);
      if (v3) {
        llvm::ValueSymbolTable::reinsertValue(v3, (llvm::Value *)a2);
      }
    }
  }
}

int32x2_t llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(uint64_t a1, uint64_t ***a2)
{
  a2[5] = 0;
  if ((*((unsigned char *)a2 + 23) & 0x10) == 0) {
    return result;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return result;
  }
  uint64_t v3 = *(uint64_t **)(v2 + 104);
  if (!v3) {
    return result;
  }
  uint64_t v4 = ***a2;
  uint64_t v5 = *(void *)(v4 + 152);
  uint64_t v6 = *(unsigned int *)(v4 + 168);
  if (v6)
  {
    LODWORD(v7) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    BOOL v8 = (uint64_t ****)(v5 + 16 * v7);
    BOOL v9 = *v8;
    if (*v8 == a2) {
      goto LABEL_11;
    }
    int v10 = 1;
    while (v9 != (uint64_t ***)-4096)
    {
      int v11 = v7 + v10++;
      uint64_t v7 = v11 & (v6 - 1);
      BOOL v9 = *(uint64_t ****)(v5 + 16 * v7);
      if (v9 == a2)
      {
        BOOL v8 = (uint64_t ****)(v5 + 16 * v7);
        goto LABEL_11;
      }
    }
  }
  BOOL v8 = (uint64_t ****)(v5 + 16 * v6);
LABEL_11:
  uint64_t v12 = *((unsigned int *)v3 + 2);
  if (v12)
  {
    int v13 = (size_t *)v8[1];
    uint64_t v14 = *((unsigned int *)v3 + 5);
    unint64_t v15 = (unsigned __int8 *)v13 + v14;
    size_t v16 = *v13;
    if (*v13)
    {
      int v17 = 0;
      size_t v18 = *v13;
      int v19 = v15;
      do
      {
        int v20 = *v19++;
        int v17 = 33 * v17 + v20;
        --v18;
      }
      while (v18);
    }
    else
    {
      int v17 = 0;
    }
    unsigned int v21 = v12 - 1;
    uint64_t v22 = *v3;
    uint64_t v23 = *v3 + 8 * v12 + 8;
    int v24 = 1;
    int v25 = v17;
    while (1)
    {
      uint64_t v26 = v25 & v21;
      uint64_t v27 = *(void **)(v22 + 8 * v26);
      if (v27 != (void *)-8)
      {
        if (!v27) {
          return result;
        }
        if (*(_DWORD *)(v23 + 4 * v26) == v17 && v16 == *v27 && (!v16 || !memcmp(v15, (char *)v27 + v14, v16))) {
          break;
        }
      }
      int v25 = v24 + v26;
      ++v24;
    }
    *(void *)(v22 + 8 * (int)v26) = -8;
    int32x2_t result = vadd_s32(*(int32x2_t *)((char *)v3 + 12), (int32x2_t)0x1FFFFFFFFLL);
    *(uint64_t *)((char *)v3 + 12) = (uint64_t)result;
  }
  return result;
}

void llvm::SymbolTableListTraits<llvm::Instruction>::transferNodesFromList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_WORD *)(a1 - 22) &= ~0x8000u;
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4) {
      uint64_t v5 = *(llvm::ValueSymbolTable **)(v4 + 104);
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v6 = *(void *)(a2 + 16);
    if (v6) {
      uint64_t v7 = *(uint64_t **)(v6 + 104);
    }
    else {
      uint64_t v7 = 0;
    }
    if (v5 == (llvm::ValueSymbolTable *)v7)
    {
      while (a3 != a4)
      {
        uint64_t v8 = a3 - 24;
        if (!a3) {
          uint64_t v8 = 0;
        }
        *(void *)(v8 + 40) = a1 - 40;
        a3 = *(void *)(a3 + 8);
      }
    }
    else
    {
      uint64_t v14 = v5;
      unint64_t v15 = v7;
      if (a3 != a4)
      {
        uint64_t v13 = a1 - 40;
        do
        {
          uint64_t v16 = a3;
          if (a3) {
            uint64_t v9 = a3 - 24;
          }
          else {
            uint64_t v9 = 0;
          }
          int v10 = *(_DWORD *)(v9 + 20) & 0x10000000;
          if (v15 && v10)
          {
            ValueName = (size_t *)llvm::Value::getValueName((llvm::Value *)v9);
            llvm::ValueSymbolTable::removeValueName(v15, ValueName);
          }
          *(void *)(v9 + 40) = v13;
          if (v14 && v10) {
            llvm::ValueSymbolTable::reinsertValue(v14, (llvm::Value *)v9);
          }
          a3 = *(void *)(v16 + 8);
        }
        while (a3 != a4);
      }
    }
  }
}

llvm::BasicBlock *llvm::BasicBlock::BasicBlock(llvm::BasicBlock *this, llvm::LLVMContext *a2, const char **a3, llvm::Function *a4, llvm::BasicBlock *a5)
{
  *(void *)this = *(void *)a2 + 1600;
  *((void *)this + 1) = 0;
  int v7 = *((_DWORD *)this + 5);
  *((void *)this + 3) = 0;
  uint64_t v8 = (char *)this + 24;
  *((_DWORD *)this + 4) = 22;
  *((_DWORD *)this + 5) = v7 & 0xC0000000;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = (char *)this + 40;
  *((void *)this + 6) = (char *)this + 40;
  *((void *)this + 7) = 0;
  if (a4)
  {
    if (a5) {
      uint64_t v9 = (char *)a5 + 24;
    }
    else {
      uint64_t v9 = (char *)a4 + 72;
    }
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)a4 + 72, this);
    uint64_t v10 = *(void *)v9;
    *((void *)this + 3) = *(void *)v9;
    *((void *)this + 4) = v9;
    *(void *)(v10 + 8) = v8;
    *(void *)uint64_t v9 = v8;
  }
  llvm::Value::setName(this, a3);
  return this;
}

{
  int v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::BasicBlock *v17;
  int v18;
  int v19;
  void *v20;
  unsigned char *v21;
  unint64_t v22;
  unint64_t v23;
  int v25;

  *(void *)this = *(void *)a2 + 1600;
  *((void *)this + 1) = 0;
  int v7 = *((_DWORD *)this + 5);
  *((void *)this + 3) = 0;
  uint64_t v8 = (char *)this + 24;
  *((_DWORD *)this + 4) = 22;
  *((_DWORD *)this + 5) = v7 & 0xC0000000;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = (char *)this + 40;
  *((void *)this + 6) = (char *)this + 40;
  *((void *)this + 7) = 0;
  if (a4)
  {
    if (a5) {
      uint64_t v9 = (char *)a5 + 24;
    }
    else {
      uint64_t v9 = (char *)a4 + 72;
    }
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)a4 + 72, this);
    uint64_t v10 = *(void *)v9;
    *((void *)this + 3) = *(void *)v9;
    *((void *)this + 4) = v9;
    *(void *)(v10 + 8) = v8;
    *(void *)uint64_t v9 = v8;
  }
  llvm::Value::setNameImpl(this, a3);
  if (!*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_23;
    }
    uint64_t v12 = ***(void ***)this;
    uint64_t v13 = *(void *)(v12 + 152);
    uint64_t v14 = *(unsigned int *)(v12 + 168);
    if (v14)
    {
      LODWORD(v15) = (v14 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v16 = v13 + 16 * v15;
      int v17 = *(llvm::BasicBlock **)v16;
      if (*(llvm::BasicBlock **)v16 == this)
      {
LABEL_15:
        int v20 = *(void **)(v16 + 8);
        uint64_t v23 = *v20;
        unsigned int v21 = v20 + 2;
        uint64_t v22 = v23;
        if (v23 >= 5 && *(_DWORD *)v21 == *(_DWORD *)"llvm." && v21[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v25 = llvm::Function::lookupIntrinsicID(v21, v22);
LABEL_22:
          *((_DWORD *)this + 9) = v25;
          return this;
        }
LABEL_23:
        int v25 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_22;
      }
      size_t v18 = 1;
      while (v17 != (llvm::BasicBlock *)-4096)
      {
        int v19 = v15 + v18++;
        unint64_t v15 = v19 & (v14 - 1);
        int v17 = *(llvm::BasicBlock **)(v13 + 16 * v15);
        if (v17 == this)
        {
          uint64_t v16 = v13 + 16 * v15;
          goto LABEL_15;
        }
      }
    }
    uint64_t v16 = v13 + 16 * v14;
    goto LABEL_15;
  }
  return this;
}

void llvm::BasicBlock::insertInto(llvm::BasicBlock *this, llvm::Function *a2, llvm::BasicBlock *a3)
{
  uint64_t v4 = (uint64_t *)((char *)a2 + 72);
  if (a3)
  {
    int v7 = a3;
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)a2 + 72, this);
    uint64_t v8 = *((void *)v7 + 3);
    int v7 = (llvm::BasicBlock *)((char *)v7 + 24);
    *((void *)this + 3) = v8;
    *((void *)this + 4) = v7;
    uint64_t v9 = (char *)this + 24;
    *(void *)(v8 + 8) = v9;
    *(void *)int v7 = v9;
  }
  else
  {
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)a2 + 72, this);
    uint64_t v5 = *v4;
    *((void *)this + 3) = *v4;
    *((void *)this + 4) = v4;
    uint64_t v6 = (char *)this + 24;
    *(void *)(v5 + 8) = v6;
    *uint64_t v4 = (uint64_t)v6;
  }
}

void llvm::BasicBlock::~BasicBlock(llvm::Type ***this, llvm::LLVMContext *a2)
{
  if ((*((_WORD *)this + 9) & 0x7FFF) != 0)
  {
    Int32Ty = (llvm::ConstantInt *)llvm::Type::getInt32Ty(**this, a2);
    BOOL v73 = (llvm::ConstantExpr *)llvm::ConstantInt::get(Int32Ty, 1uLL, 0);
    BOOL v74 = this[1];
    if (v74)
    {
      BOOL v75 = v73;
      do
      {
        BOOL v76 = (llvm::Constant **)v74[3];
        IntToPtr = llvm::ConstantExpr::getIntToPtr(v75, *v76, 0);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v76, IntToPtr, (llvm::Value *)1);
        llvm::Constant::destroyConstant((int32x2_t ****)v76, v78);
        BOOL v74 = this[1];
      }
      while (v74);
    }
  }
  std::string::size_type v84 = (llvm::Value *)this;
  char v85 = (char *)(this + 5);
  uint64_t v3 = (llvm::Type ***)this[6];
  if (v3 == this + 5) {
    goto LABEL_71;
  }
  do
  {
    if (v3) {
      uint64_t v4 = v3 - 3;
    }
    else {
      uint64_t v4 = 0;
    }
    int v5 = *((_DWORD *)v4 + 5);
    if ((v5 & 0x40000000) != 0)
    {
      int v7 = (llvm::Type ***)*(v4 - 1);
      uint64_t v6 = v5 & 0x7FFFFFF;
      if (!v6) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v6 = v5 & 0x7FFFFFF;
      int v7 = &v4[-4 * v6];
      if (!v6) {
        goto LABEL_15;
      }
    }
    uint64_t v8 = 32 * v6;
    uint64_t v9 = v7 + 2;
    do
    {
      if (*(v9 - 2))
      {
        **uint64_t v9 = *(v9 - 1);
        uint64_t v10 = (uint64_t)*(v9 - 1);
        if (v10) {
          *(void *)(v10 + 16) = *v9;
        }
      }
      *(v9 - 2) = 0;
      v9 += 4;
      v8 -= 32;
    }
    while (v8);
LABEL_15:
    uint64_t v3 = (llvm::Type ***)v3[1];
  }
  while (v3 != (llvm::Type ***)v85);
  int v11 = this[6];
  if (v11 != (llvm::Type **)v85)
  {
    do
    {
      uint64_t v12 = (void (**)(void))(v11 - 3);
      BOOL v13 = v11 == 0;
      int v11 = (llvm::Type **)v11[1];
      if (v13) {
        uint64_t v14 = 0;
      }
      else {
        uint64_t v14 = v12;
      }
      v14[5] = 0;
      if ((*((unsigned char *)v14 + 23) & 0x10) != 0)
      {
        uint64_t v17 = *((void *)v84 + 7);
        if (v17)
        {
          BOOL v79 = *(uint64_t **)(v17 + 104);
          if (v79)
          {
            uint64_t v18 = **(void **)*v14;
            uint64_t v19 = *(void *)(v18 + 152);
            uint64_t v20 = *(unsigned int *)(v18 + 168);
            if (v20)
            {
              LODWORD(v21) = (v20 - 1) & ((v14 >> 4) ^ (v14 >> 9));
              uint64_t v22 = (void (***)(void))(v19 + 16 * v21);
              uint64_t v23 = *v22;
              if (*v22 != v14)
              {
                int v24 = 1;
                do
                {
                  if (v23 == (void (**)(void))-4096) {
                    goto LABEL_43;
                  }
                  int v25 = v21 + v24++;
                  uint64_t v21 = v25 & (v20 - 1);
                  uint64_t v23 = *(void (***)(void))(v19 + 16 * v21);
                }
                while (v23 != v14);
                uint64_t v22 = (void (***)(void))(v19 + 16 * v21);
              }
            }
            else
            {
LABEL_43:
              uint64_t v22 = (void (***)(void))(v19 + 16 * v20);
            }
            uint64_t v26 = *((unsigned int *)v79 + 2);
            if (v26)
            {
              uint64_t v27 = (size_t *)v22[1];
              uint64_t v82 = *((unsigned int *)v79 + 5);
              uint64_t v28 = (unsigned __int8 *)v27 + v82;
              size_t v29 = *v27;
              if (*v27)
              {
                int v30 = 0;
                size_t v31 = *v27;
                int v32 = v28;
                do
                {
                  int v33 = *v32++;
                  int v30 = 33 * v30 + v33;
                  --v31;
                }
                while (v31);
              }
              else
              {
                int v30 = 0;
              }
              unsigned int v34 = v26 - 1;
              uint64_t v35 = *v79;
              uint64_t v36 = *v79 + 8 * v26 + 8;
              int v37 = 1;
              int v38 = v30;
              BOOL v80 = v11;
              while (1)
              {
                uint64_t v39 = v38 & v34;
                __int16 v40 = *(void **)(v35 + 8 * v39);
                if (v40 != (void *)-8)
                {
                  if (!v40) {
                    goto LABEL_21;
                  }
                  if (*(_DWORD *)(v36 + 4 * v39) == v30 && v29 == *v40)
                  {
                    if (!v29) {
                      break;
                    }
                    uint64_t v41 = v36;
                    int v42 = memcmp(v28, (char *)v40 + v82, v29);
                    uint64_t v36 = v41;
                    int v11 = v80;
                    if (!v42) {
                      break;
                    }
                  }
                }
                int v38 = v37 + v39;
                ++v37;
              }
              *(void *)(v35 + 8 * (int)v39) = -8;
              *(uint64_t *)((char *)v79 + 12) = (uint64_t)vadd_s32(*(int32x2_t *)((char *)v79 + 12), (int32x2_t)0x1FFFFFFFFLL);
            }
          }
        }
      }
LABEL_21:
      unint64_t v15 = v14[3];
      uint64_t v16 = v14[4];
      *(void *)uint64_t v16 = v15;
      *((void *)v15 + 1) = v16;
      v14[3] = 0;
      v14[4] = 0;
      llvm::Value::deleteValue(v14, a2);
    }
    while (v11 != (llvm::Type **)v85);
    uint64_t v43 = *((void *)v84 + 6);
    while ((char *)v43 != v85)
    {
      __int16 v44 = (void (**)(void))(v43 - 24);
      BOOL v13 = v43 == 0;
      uint64_t v43 = *(void *)(v43 + 8);
      if (v13) {
        char v45 = 0;
      }
      else {
        char v45 = v44;
      }
      v45[5] = 0;
      if ((*((unsigned char *)v45 + 23) & 0x10) != 0)
      {
        uint64_t v48 = *((void *)v84 + 7);
        if (v48)
        {
          uint64_t v81 = *(uint64_t **)(v48 + 104);
          if (v81)
          {
            uint64_t v49 = **(void **)*v45;
            uint64_t v50 = *(void *)(v49 + 152);
            uint64_t v51 = *(unsigned int *)(v49 + 168);
            if (!v51) {
              goto LABEL_70;
            }
            LODWORD(v52) = (v51 - 1) & ((v45 >> 4) ^ (v45 >> 9));
            int v53 = (void (***)(void))(v50 + 16 * v52);
            int v54 = *v53;
            if (*v53 != v45)
            {
              int v55 = 1;
              while (v54 != (void (**)(void))-4096)
              {
                int v56 = v52 + v55++;
                uint64_t v52 = v56 & (v51 - 1);
                int v54 = *(void (***)(void))(v50 + 16 * v52);
                if (v54 == v45)
                {
                  int v53 = (void (***)(void))(v50 + 16 * v52);
                  goto LABEL_58;
                }
              }
LABEL_70:
              int v53 = (void (***)(void))(v50 + 16 * v51);
            }
LABEL_58:
            uint64_t v57 = *((unsigned int *)v81 + 2);
            if (v57)
            {
              int v58 = (size_t *)v53[1];
              uint64_t v83 = *((unsigned int *)v81 + 5);
              char v59 = (unsigned __int8 *)v58 + v83;
              size_t v60 = *v58;
              if (*v58)
              {
                int v61 = 0;
                size_t v62 = *v58;
                char v63 = v59;
                do
                {
                  int v64 = *v63++;
                  int v61 = 33 * v61 + v64;
                  --v62;
                }
                while (v62);
              }
              else
              {
                int v61 = 0;
              }
              unsigned int v65 = v57 - 1;
              uint64_t v66 = *v81;
              uint64_t v67 = *v81 + 8 * v57 + 8;
              int v68 = 1;
              int v69 = v61;
              while (1)
              {
                uint64_t v70 = v69 & v65;
                BOOL v71 = *(void **)(v66 + 8 * v70);
                if (v71 != (void *)-8)
                {
                  if (!v71) {
                    goto LABEL_49;
                  }
                  if (*(_DWORD *)(v67 + 4 * v70) == v61
                    && v60 == *v71
                    && (!v60 || !memcmp(v59, (char *)v71 + v83, v60)))
                  {
                    break;
                  }
                }
                int v69 = v68 + v70;
                ++v68;
              }
              *(void *)(v66 + 8 * (int)v70) = -8;
              *(uint64_t *)((char *)v81 + 12) = (uint64_t)vadd_s32(*(int32x2_t *)((char *)v81 + 12), (int32x2_t)0x1FFFFFFFFLL);
            }
          }
        }
      }
LABEL_49:
      char v46 = v45[3];
      BOOL v47 = v45[4];
      *(void *)BOOL v47 = v46;
      *((void *)v46 + 1) = v47;
      v45[3] = 0;
      v45[4] = 0;
      llvm::Value::deleteValue(v45, a2);
      continue;
    }
  }
LABEL_71:

  llvm::Value::~Value(v84, a2);
}

uint64_t llvm::BasicBlock::dropAllReferences(uint64_t this)
{
  for (uint64_t i = *(void *)(this + 48); i != this + 40; uint64_t i = *(void *)(i + 8))
  {
    if (i) {
      uint64_t v2 = i - 24;
    }
    else {
      uint64_t v2 = 0;
    }
    int v3 = *(_DWORD *)(v2 + 20);
    if ((v3 & 0x40000000) != 0)
    {
      uint64_t v5 = *(void *)(v2 - 8);
      uint64_t v4 = v3 & 0x7FFFFFF;
      if (!v4) {
        continue;
      }
    }
    else
    {
      uint64_t v4 = v3 & 0x7FFFFFF;
      uint64_t v5 = v2 - 32 * v4;
      if (!v4) {
        continue;
      }
    }
    uint64_t v6 = 32 * v4;
    int v7 = (void **)(v5 + 16);
    do
    {
      if (*(v7 - 2))
      {
        **int v7 = *(v7 - 1);
        uint64_t v8 = (uint64_t)*(v7 - 1);
        if (v8) {
          *(void *)(v8 + 16) = *v7;
        }
      }
      *(v7 - 2) = 0;
      v7 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return this;
}

void llvm::BasicBlock::setParent(llvm::BasicBlock *this, llvm::Function *a2)
{
  uint64_t v2 = *((void *)this + 7);
  if (v2) {
    unsigned int v34 = *(llvm::ValueSymbolTable **)(v2 + 104);
  }
  else {
    unsigned int v34 = 0;
  }
  *((void *)this + 7) = a2;
  if (a2) {
    int v3 = (llvm::ValueSymbolTable *)*((void *)a2 + 13);
  }
  else {
    int v3 = 0;
  }
  if (v34 != v3)
  {
    uint64_t v35 = (char *)this + 40;
    if (*((llvm::BasicBlock **)this + 5) != (llvm::BasicBlock *)((char *)this + 40))
    {
      int v32 = v3;
      if (v34)
      {
        uint64_t v4 = *((void *)this + 6);
        if ((char *)v4 != v35)
        {
          while (1)
          {
            uint64_t v5 = (uint64_t ***)(v4 - 24);
            if (!v4) {
              uint64_t v5 = 0;
            }
            if ((*((unsigned char *)v5 + 23) & 0x10) != 0) {
              break;
            }
LABEL_14:
            uint64_t v4 = *(void *)(v4 + 8);
            if ((char *)v4 == v35) {
              goto LABEL_37;
            }
          }
          uint64_t v6 = ***v5;
          uint64_t v7 = *(void *)(v6 + 152);
          uint64_t v8 = *(unsigned int *)(v6 + 168);
          if (v8)
          {
            LODWORD(v9) = (v8 - 1) & ((v5 >> 4) ^ (v5 >> 9));
            uint64_t v10 = (uint64_t ****)(v7 + 16 * v9);
            int v11 = *v10;
            if (*v10 == v5) {
              goto LABEL_22;
            }
            int v12 = 1;
            while (v11 != (uint64_t ***)-4096)
            {
              int v13 = v9 + v12++;
              uint64_t v9 = v13 & (v8 - 1);
              int v11 = *(uint64_t ****)(v7 + 16 * v9);
              if (v11 == v5)
              {
                uint64_t v10 = (uint64_t ****)(v7 + 16 * v9);
                goto LABEL_22;
              }
            }
          }
          uint64_t v10 = (uint64_t ****)(v7 + 16 * v8);
LABEL_22:
          uint64_t v14 = *((unsigned int *)v34 + 2);
          if (v14)
          {
            unint64_t v15 = (size_t *)v10[1];
            uint64_t v16 = *((unsigned int *)v34 + 5);
            uint64_t v17 = (unsigned __int8 *)v15 + v16;
            size_t v18 = *v15;
            if (*v15)
            {
              int v19 = 0;
              size_t v20 = *v15;
              uint64_t v21 = v17;
              do
              {
                int v22 = *v21++;
                int v19 = 33 * v19 + v22;
                --v20;
              }
              while (v20);
            }
            else
            {
              int v19 = 0;
            }
            unsigned int v23 = v14 - 1;
            uint64_t v24 = *(void *)v34;
            uint64_t v25 = *(void *)v34 + 8 * v14 + 8;
            int v26 = 1;
            int v27 = v19;
            while (1)
            {
              uint64_t v28 = v27 & v23;
              size_t v29 = *(void **)(v24 + 8 * v28);
              if (v29 != (void *)-8)
              {
                if (!v29) {
                  goto LABEL_14;
                }
                if (*(_DWORD *)(v25 + 4 * v28) == v19 && v18 == *v29 && (!v18 || !memcmp(v17, (char *)v29 + v16, v18))) {
                  break;
                }
              }
              int v27 = v26 + v28;
              ++v26;
            }
            *(void *)(v24 + 8 * (int)v28) = -8;
            *(int32x2_t *)((char *)v34 + 12) = vadd_s32(*(int32x2_t *)((char *)v34 + 12), (int32x2_t)0x1FFFFFFFFLL);
          }
          goto LABEL_14;
        }
      }
LABEL_37:
      if (v32)
      {
        for (uint64_t i = *((void *)this + 6); (char *)i != v35; uint64_t i = *(void *)(i + 8))
        {
          if (i) {
            size_t v31 = (llvm::Value *)(i - 24);
          }
          else {
            size_t v31 = 0;
          }
          if ((*((unsigned char *)v31 + 23) & 0x10) != 0) {
            llvm::ValueSymbolTable::reinsertValue(v32, v31);
          }
        }
      }
    }
  }
}

void sub_1CC53695C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1[2];
  if (v4) {
    uint64_t v5 = *(uint64_t **)(v4 + 104);
  }
  else {
    uint64_t v5 = 0;
  }
  *a2 = a3;
  uint64_t v6 = a1[2];
  if (v6) {
    uint64_t v7 = *(llvm::ValueSymbolTable **)(v6 + 104);
  }
  else {
    uint64_t v7 = 0;
  }
  if (v5 != (uint64_t *)v7 && (void *)*a1 != a1)
  {
    if (v5)
    {
      for (uint64_t i = (void *)a1[1]; i != a1; uint64_t i = (void *)i[1])
      {
        if (i) {
          uint64_t v9 = (llvm::Value *)(i - 3);
        }
        else {
          uint64_t v9 = 0;
        }
        if ((*((unsigned char *)v9 + 23) & 0x10) != 0)
        {
          ValueName = (size_t *)llvm::Value::getValueName(v9);
          llvm::ValueSymbolTable::removeValueName(v5, ValueName);
        }
      }
    }
    if (v7)
    {
      for (unsigned int j = (void *)a1[1]; j != a1; unsigned int j = (void *)j[1])
      {
        if (j) {
          int v12 = (llvm::Value *)(j - 3);
        }
        else {
          int v12 = 0;
        }
        if ((*((unsigned char *)v12 + 23) & 0x10) != 0) {
          llvm::ValueSymbolTable::reinsertValue(v7, v12);
        }
      }
    }
  }
}

void **llvm::BasicBlock::instructionsWithoutDebug@<X0>(llvm::BasicBlock *this@<X0>, char a2@<W1>, void *a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  char v8 = a2;
  uint64_t v9 = (void **)&v7;
  uint64_t v6 = (void **)&v4;
  uint64_t v7 = (uint64_t (**)(void **))&unk_1F2616270;
  uint64_t v4 = (void (**)(void **))&unk_1F2616270;
  char v5 = a2;
  sub_1CC536BA4((uint64_t)this, (uint64_t)&v4, a3);
  if (v6 == (void **)&v4)
  {
    v4[4]((void **)&v4);
  }
  else if (v6)
  {
    (*((void (**)(void))*v6 + 5))();
  }
  int32x2_t result = v9;
  if (v9 == (void **)&v7) {
    return (void **)v7[4]((void **)&v7);
  }
  if (v9) {
    return (void **)(*((uint64_t (**)(void))*v9 + 5))();
  }
  return result;
}

uint64_t sub_1CC536BA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1 + 40;
  uint64_t v6 = *(void *)(a1 + 48);
  sub_1CC539EC8((uint64_t)v13, a2);
  sub_1CD5A7044(&v15, v6, v5, (uint64_t)v13);
  sub_1CC539EC8((uint64_t)v8, a2);
  sub_1CD5A7044(&v10, v5, v5, (uint64_t)v8);
  sub_1CD5A6D50(a3, &v15, &v10);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  if (v9 == v8)
  {
    (*(void (**)(void *))(v8[0] + 32))(v8);
  }
  else if (v9)
  {
    (*(void (**)(void))(*v9 + 40))();
  }
  if (v17 == v16)
  {
    (*(void (**)(void *))(v16[0] + 32))(v16);
  }
  else if (v17)
  {
    (*(void (**)(void *))(*v17 + 40))(v17);
  }
  uint64_t result = (uint64_t)v14;
  if (v14 == v13) {
    return (*(uint64_t (**)(void *))(v13[0] + 32))(v13);
  }
  if (v14) {
    return (*(uint64_t (**)(void))(*v14 + 40))();
  }
  return result;
}

void **llvm::BasicBlock::instructionsWithoutDebug@<X0>(llvm::BasicBlock *this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  char v8 = a2;
  uint64_t v9 = (void **)&v7;
  uint64_t v6 = (void **)&v4;
  uint64_t v7 = (uint64_t (**)(void **))&unk_1F26162B8;
  uint64_t v4 = (void (**)(void **))&unk_1F26162B8;
  char v5 = a2;
  sub_1CC536F58((uint64_t)this, (uint64_t)&v4, a3);
  if (v6 == (void **)&v4)
  {
    v4[4]((void **)&v4);
  }
  else if (v6)
  {
    (*((void (**)(void))*v6 + 5))();
  }
  uint64_t result = v9;
  if (v9 == (void **)&v7) {
    return (void **)v7[4]((void **)&v7);
  }
  if (v9) {
    return (void **)(*((uint64_t (**)(void))*v9 + 5))();
  }
  return result;
}

uint64_t sub_1CC536F58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1 + 40;
  uint64_t v6 = *(void *)(a1 + 48);
  sub_1CC53A1FC((uint64_t)v13, a2);
  sub_1CC53A048(&v15, v6, v5, (uint64_t)v13);
  sub_1CC53A1FC((uint64_t)v8, a2);
  sub_1CC53A048(&v10, v5, v5, (uint64_t)v8);
  long long v21 = v15;
  if (v17)
  {
    if (v17 == v16)
    {
      unsigned int v23 = v22;
      (*(void (**)(void))(*v17 + 24))();
    }
    else
    {
      unsigned int v23 = v17;
      uint64_t v17 = 0;
    }
  }
  else
  {
    unsigned int v23 = 0;
  }
  long long v18 = v10;
  if (v12)
  {
    if (v12 == v11)
    {
      size_t v20 = v19;
      (*(void (**)(void))(*v12 + 24))();
    }
    else
    {
      size_t v20 = v12;
      int v12 = 0;
    }
  }
  else
  {
    size_t v20 = 0;
  }
  *(_OWORD *)a3 = v21;
  if (v23)
  {
    if (v23 == v22)
    {
      *(void *)(a3 + 40) = a3 + 16;
      (*(void (**)(void *))(v22[0] + 24))(v22);
    }
    else
    {
      *(void *)(a3 + 40) = v23;
      unsigned int v23 = 0;
    }
  }
  else
  {
    *(void *)(a3 + 40) = 0;
  }
  *(_OWORD *)(a3 + 48) = v18;
  if (v20)
  {
    if (v20 == v19)
    {
      *(void *)(a3 + 88) = a3 + 64;
      (*(void (**)(void *))(v19[0] + 24))(v19);
      if (v20 == v19)
      {
        (*(void (**)(void *))(v19[0] + 32))(v19);
      }
      else if (v20)
      {
        (*(void (**)(void))(*v20 + 40))();
      }
    }
    else
    {
      *(void *)(a3 + 88) = v20;
      size_t v20 = 0;
    }
  }
  else
  {
    *(void *)(a3 + 88) = 0;
  }
  if (v23 == v22)
  {
    (*(void (**)(void *))(v22[0] + 32))(v22);
  }
  else if (v23)
  {
    (*(void (**)(void *))(*v23 + 40))(v23);
  }
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  if (v9 == v8)
  {
    (*(void (**)(void *))(v8[0] + 32))(v8);
  }
  else if (v9)
  {
    (*(void (**)(void))(*v9 + 40))();
  }
  if (v17 == v16)
  {
    (*(void (**)(void *))(v16[0] + 32))(v16);
  }
  else if (v17)
  {
    (*(void (**)(void))(*v17 + 40))();
  }
  uint64_t result = (uint64_t)v14;
  if (v14 == v13) {
    return (*(uint64_t (**)(void *))(v13[0] + 32))(v13);
  }
  if (v14) {
    return (*(uint64_t (**)(void))(*v14 + 40))();
  }
  return result;
}

uint64_t sub_1CC5373E4(long long *a1, long long *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v9 = *a1;
  sub_1CC539EC8((uint64_t)v10, (uint64_t)(a1 + 1));
  long long v6 = *a2;
  sub_1CC539EC8((uint64_t)v7, (uint64_t)(a2 + 1));
  uint64_t v3 = v9;
  if ((void)v9 == (void)v6)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    do
    {
      ++v4;
      *(void *)&long long v9 = *(void *)(v3 + 8);
      sub_1CD48427C((uint64_t)&v9);
      uint64_t v3 = v9;
    }
    while ((void)v9 != (void)v6);
  }
  if (v8 == v7)
  {
    (*(void (**)(void *))(v7[0] + 32))(v7);
  }
  else if (v8)
  {
    (*(void (**)(void))(*v8 + 40))();
  }
  if (v11 == v10)
  {
    (*(void (**)(void *))(v10[0] + 32))(v10);
  }
  else if (v11)
  {
    (*(void (**)(void))(*v11 + 40))();
  }
  return v4;
}

void llvm::BasicBlock::removeFromParent(llvm::BasicBlock *this)
{
  uint64_t v2 = (char *)this + 56;
  uint64_t v3 = *((void *)this + 7);
  sub_1CC53695C((void *)this + 5, (void *)this + 7, 0);
  if ((*(v2 - 33) & 0x10) != 0)
  {
    uint64_t v4 = *(uint64_t **)(v3 + 104);
    if (v4)
    {
      ValueName = (size_t *)llvm::Value::getValueName(this);
      llvm::ValueSymbolTable::removeValueName(v4, ValueName);
    }
  }
  uint64_t v6 = *((void *)this + 3);
  uint64_t v7 = (void *)*((void *)this + 4);
  *uint64_t v7 = v6;
  *(void *)(v6 + 8) = v7;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
}

uint64_t llvm::BasicBlock::eraseFromParent(llvm::BasicBlock *this)
{
  uint64_t v2 = (char *)this + 56;
  uint64_t v3 = *((void *)this + 7);
  uint64_t v4 = *((void *)this + 4);
  sub_1CC53695C((void *)this + 5, (void *)this + 7, 0);
  if ((*(v2 - 33) & 0x10) != 0)
  {
    uint64_t v6 = *(uint64_t **)(v3 + 104);
    if (v6)
    {
      ValueName = (size_t *)llvm::Value::getValueName(this);
      llvm::ValueSymbolTable::removeValueName(v6, ValueName);
    }
  }
  uint64_t v8 = *((void *)this + 3);
  long long v9 = (void *)*((void *)this + 4);
  *long long v9 = v8;
  *(void *)(v8 + 8) = v9;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  llvm::BasicBlock::~BasicBlock((llvm::Type ***)this, v5);
  MEMORY[0x1D25D9CE0]();
  return v4;
}

void llvm::BasicBlock::moveBefore(llvm::BasicBlock *this, llvm::BasicBlock *a2)
{
}

void llvm::BasicBlock::moveAfter(llvm::BasicBlock *this, llvm::BasicBlock *a2)
{
}

uint64_t llvm::BasicBlock::getModule(llvm::BasicBlock *this)
{
  return *(void *)(*((void *)this + 7) + 40);
}

uint64_t llvm::BasicBlock::getTerminatingMustTailCall(llvm::BasicBlock *this)
{
  uint64_t v1 = (llvm::BasicBlock *)*((void *)this + 5);
  if (v1 == (llvm::BasicBlock *)((char *)this + 40)) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = (char *)v1 - 24;
  if (!v1) {
    uint64_t v4 = 0;
  }
  int v5 = v4[16];
  if (v5 != 29) {
    uint64_t v4 = 0;
  }
  if (v1) {
    BOOL v6 = v5 == 29;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    uint64_t v7 = *((void *)this + 6);
    if (v7) {
      uint64_t v8 = (char *)(v7 - 24);
    }
    else {
      uint64_t v8 = 0;
    }
    if (v4 == v8) {
      return 0;
    }
    long long v9 = (void **)(v4 + 24);
    if (*(char **)(*((void *)v4 + 5) + 48) == v4 + 24) {
      return 0;
    }
    long long v10 = *v9;
    if (!*v9) {
      return 0;
    }
    uint64_t v11 = (uint64_t)(v10 - 3);
    uint64_t v12 = *((_DWORD *)v4 + 5) & 0x7FFFFFF;
    if (v12)
    {
      uint64_t v13 = *(void *)&v4[-32 * v12];
      if (v13)
      {
        if (v13 != v11) {
          return 0;
        }
        if (*((unsigned char *)v10 - 8) == 77)
        {
          if (*(void **)(v10[2] + 48) == v10) {
            return 0;
          }
          uint64_t result = 0;
          uint64_t v14 = *(v10 - 7);
          uint64_t v15 = *v10;
          uint64_t v11 = v15 - 24;
          if (v15) {
            uint64_t v16 = v15 - 24;
          }
          else {
            uint64_t v16 = 0;
          }
          if (v15) {
            BOOL v17 = v14 == v16;
          }
          else {
            BOOL v17 = 0;
          }
          if (!v17) {
            return result;
          }
        }
      }
    }
    if (*(unsigned char *)(v11 + 16) == 84)
    {
      uint64_t result = v11;
      if ((*(_WORD *)(v11 + 18) & 3) == 2) {
        return result;
      }
    }
    return 0;
  }
  return result;
}

uint64_t llvm::BasicBlock::getTerminatingDeoptimizeCall(llvm::BasicBlock *this)
{
  uint64_t v1 = (llvm::BasicBlock *)*((void *)this + 5);
  if (v1 == (llvm::BasicBlock *)((char *)this + 40)) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = (char *)v1 - 24;
  if (!v1) {
    uint64_t v4 = 0;
  }
  int v5 = v4[16];
  if (v5 != 29) {
    uint64_t v4 = 0;
  }
  if (v1) {
    BOOL v6 = v5 == 29;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    uint64_t v7 = *((void *)this + 6);
    if (v7) {
      uint64_t v8 = (char *)(v7 - 24);
    }
    else {
      uint64_t v8 = 0;
    }
    if (v4 != v8 && *(char **)(*((void *)v4 + 5) + 48) != v4 + 24)
    {
      uint64_t v9 = *((void *)v4 + 3);
      if (v9)
      {
        if (*(unsigned char *)(v9 - 8) == 84)
        {
          uint64_t v10 = *(void *)(v9 - 56);
          if (v10)
          {
            if (!*(unsigned char *)(v10 + 16) && *(void *)(v10 + 24) == *(void *)(v9 + 48) && *(_DWORD *)(v10 + 36) == 119) {
              return v9 - 24;
            }
          }
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t llvm::BasicBlock::getPostdominatingDeoptimizeCall(llvm::BasicBlock **this)
{
  uint64_t v1 = (llvm::BasicBlock *)this;
  uint64_t v2 = v43;
  uint64_t v39 = v43;
  __int16 v40 = v43;
  int v42 = 0;
  uint64_t v41 = 0x100000008;
  v43[0] = this;
  uint64_t v3 = this[5];
  if (v3 != (llvm::BasicBlock *)(this + 5))
  {
    unsigned int v4 = 8;
    while (1)
    {
      this = (llvm::BasicBlock **)v1;
      if (v3) {
        int v5 = (char *)v3 - 24;
      }
      else {
        int v5 = 0;
      }
      int v6 = v5[16];
      if ((v6 - 29) >= 0xB) {
        uint64_t v7 = 0;
      }
      else {
        uint64_t v7 = v5;
      }
      if (v6 == 30)
      {
        if ((*((_DWORD *)v5 + 5) & 0x7FFFFFF) == 3) {
          int v8 = 2;
        }
        else {
          int v8 = 1;
        }
        uint64_t v9 = (llvm::BasicBlock **)(v5 - 32);
      }
      else
      {
        int v12 = 1;
        int v8 = 2;
        switch(v5[16])
        {
          case 30:
LABEL_93:
            __break(1u);
            goto LABEL_94;
          case 31:
            int v8 = (*((_DWORD *)v5 + 5) >> 1) & 0x3FFFFFF;
            goto LABEL_42;
          case 32:
          case 38:
            int v8 = (*((_DWORD *)v5 + 5) & 0x7FFFFFF) - 1;
            goto LABEL_42;
          case 33:
LABEL_92:
            uint64_t v9 = (llvm::BasicBlock **)(v5 - 96);
            break;
          case 36:
            int v8 = *((_WORD *)v5 + 9) & 1;
            goto LABEL_42;
          case 37:
LABEL_94:
            uint64_t v9 = (llvm::BasicBlock **)(v5 - 32);
            int v8 = v12;
            break;
          case 39:
            int v8 = *((_DWORD *)v5 + 20) + 1;
LABEL_42:
            if (!v8) {
              goto LABEL_32;
            }
            if (v6 == 31)
            {
LABEL_44:
              int v26 = *((_DWORD *)v5 + 5);
              if ((v26 & 0x40000000) != 0)
              {
                int v27 = (char *)*((void *)v5 - 1);
                goto LABEL_46;
              }
            }
            else
            {
              int v12 = v8;
              switch(v5[16])
              {
                case '!':
                  goto LABEL_92;
                case '""':
                case '#':
                  goto LABEL_93;
                case '$':
                  if ((*((_WORD *)v5 + 9) & 1) == 0)
                  {
                    uint64_t v1 = 0;
                    goto LABEL_15;
                  }
                  int v26 = *((_DWORD *)v5 + 5);
                  break;
                case '%':
                  goto LABEL_94;
                case '\'':
                  uint64_t v9 = (llvm::BasicBlock **)&v5[-32 * *((unsigned int *)v5 + 20) - 64];
                  goto LABEL_14;
                default:
                  goto LABEL_44;
              }
            }
            int v27 = &v5[-32 * (v26 & 0x7FFFFFF)];
LABEL_46:
            uint64_t v9 = (llvm::BasicBlock **)(v27 + 32);
            break;
          default:
            goto LABEL_32;
        }
      }
LABEL_14:
      uint64_t v1 = *v9;
LABEL_15:
      int v10 = v8 - 1;
      if (v10)
      {
        int v11 = 0;
        int v12 = v5[16];
        uint64_t v13 = v5 - 32;
        int v14 = 2;
        uint64_t v15 = 1;
        do
        {
          if (v12 == 30)
          {
            uint64_t v16 = (llvm::BasicBlock **)&v5[-32 * v15 - 32];
          }
          else
          {
            uint64_t v16 = (llvm::BasicBlock **)(v5 - 32);
            switch(v5[16])
            {
              case ' ':
              case '&':
                int v37 = *((_DWORD *)v5 + 5);
                if ((v37 & 0x40000000) != 0) {
                  int v38 = (char *)*((void *)v5 - 1);
                }
                else {
                  int v38 = &v7[-32 * (v37 & 0x7FFFFFF)];
                }
                uint64_t v16 = (llvm::BasicBlock **)&v38[32 * (v11 + 2)];
                break;
              case '!':
                uint64_t v16 = (llvm::BasicBlock **)(v5 - 64);
                break;
              case '""':
              case '#':
                goto LABEL_93;
              case '$':
                if ((*((_WORD *)v5 + 9) & 1) == 0)
                {
                  BOOL v17 = 0;
                  goto LABEL_20;
                }
                uint64_t v25 = &v5[-32 * (*((_DWORD *)v5 + 5) & 0x7FFFFFF)];
LABEL_40:
                uint64_t v16 = (llvm::BasicBlock **)(v25 + 32);
                break;
              case '%':
                break;
              case '\'':
                uint64_t v16 = (llvm::BasicBlock **)&v13[-32 * *((unsigned int *)v5 + 20)];
                break;
              default:
                int v23 = *((_DWORD *)v5 + 5);
                if ((v23 & 0x40000000) != 0) {
                  uint64_t v24 = (char *)*((void *)v5 - 1);
                }
                else {
                  uint64_t v24 = &v7[-32 * (v23 & 0x7FFFFFF)];
                }
                uint64_t v25 = &v24[32 * (v14 & 0xFFFFFFFE)];
                goto LABEL_40;
            }
          }
          BOOL v17 = *v16;
LABEL_20:
          if (v17 != v1) {
            goto LABEL_32;
          }
          ++v15;
          v14 += 2;
          ++v11;
          v13 += 32;
        }
        while (v10 != v11);
      }
      if (!v1) {
        goto LABEL_32;
      }
      uint64_t v28 = HIDWORD(v41);
      if (v2 == v39)
      {
        if (HIDWORD(v41))
        {
          uint64_t v20 = 0;
          int v19 = 0;
          do
          {
            long long v18 = (llvm::BasicBlock *)v2[v20];
            if (v18 == v1)
            {
              uint64_t v21 = 0;
              goto LABEL_33;
            }
            if (v18 == (llvm::BasicBlock *)-2) {
              int v19 = (llvm::BasicBlock **)&v2[v20];
            }
            ++v20;
          }
          while (HIDWORD(v41) != v20);
          if (!v19) {
            goto LABEL_27;
          }
          *int v19 = v1;
          --v42;
          goto LABEL_29;
        }
LABEL_27:
        if (HIDWORD(v41) < v4)
        {
          ++HIDWORD(v41);
          v2[v28] = v1;
          goto LABEL_29;
        }
      }
      if (3 * v4 <= 4 * (HIDWORD(v41) - v42)) {
        break;
      }
      if (v4 - HIDWORD(v41) < v4 >> 3) {
        goto LABEL_79;
      }
LABEL_56:
      unsigned int v29 = v4 - 1;
      unsigned int v30 = (v4 - 1) & ((v1 >> 4) ^ (v1 >> 9));
      size_t v31 = (llvm::BasicBlock **)&v2[v30];
      int v32 = *v31;
      if (*v31 != (llvm::BasicBlock *)-1)
      {
        int v33 = 0;
        int v34 = 1;
        while (v32 != v1)
        {
          if (v33) {
            BOOL v35 = 0;
          }
          else {
            BOOL v35 = v32 == (llvm::BasicBlock *)-2;
          }
          if (v35) {
            int v33 = v31;
          }
          unsigned int v36 = v30 + v34++;
          unsigned int v30 = v36 & v29;
          size_t v31 = (llvm::BasicBlock **)&v2[v36 & v29];
          int v32 = *v31;
          if (*v31 == (llvm::BasicBlock *)-1) {
            goto LABEL_68;
          }
        }
LABEL_74:
        uint64_t v21 = 0;
        uint64_t v2 = v40;
        goto LABEL_33;
      }
      int v33 = 0;
LABEL_68:
      if (v33) {
        size_t v31 = v33;
      }
      if (*v31 == v1) {
        goto LABEL_74;
      }
      if (*v31 == (llvm::BasicBlock *)-2) {
        --v42;
      }
      else {
        ++HIDWORD(v41);
      }
      *size_t v31 = v1;
LABEL_29:
      uint64_t v2 = v40;
      uint64_t v3 = (llvm::BasicBlock *)*((void *)v1 + 5);
      this = (llvm::BasicBlock **)v1;
      if (v3 == (llvm::BasicBlock *)((char *)v1 + 40)) {
        goto LABEL_32;
      }
    }
    if (v4 >= 0x40) {
      v4 *= 2;
    }
    else {
      unsigned int v4 = 128;
    }
LABEL_79:
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v39, v4);
    unsigned int v4 = v41;
    uint64_t v2 = v40;
    goto LABEL_56;
  }
LABEL_32:
  uint64_t v21 = llvm::BasicBlock::getTerminatingDeoptimizeCall((llvm::BasicBlock *)this);
LABEL_33:
  if (v2 != v39) {
    free(v2);
  }
  return v21;
}

uint64_t llvm::BasicBlock::getUniqueSuccessor(llvm::BasicBlock *this)
{
  uint64_t v1 = (llvm::BasicBlock *)*((void *)this + 5);
  if (v1 == (llvm::BasicBlock *)((char *)this + 40)) {
    return 0;
  }
  uint64_t v2 = (char *)v1 - 24;
  if (!v1) {
    uint64_t v2 = 0;
  }
  int v3 = v2[16];
  if ((v3 - 29) >= 0xB) {
    unsigned int v4 = 0;
  }
  else {
    unsigned int v4 = v2;
  }
  int v5 = 1;
  if (v3 == 30)
  {
    if ((*((_DWORD *)v2 + 5) & 0x7FFFFFF) == 3) {
      int v6 = 2;
    }
    else {
      int v6 = 1;
    }
    uint64_t v7 = (uint64_t *)(v2 - 32);
  }
  else
  {
    int v6 = 2;
    uint64_t result = 0;
    switch(v2[16])
    {
      case 29:
      case 34:
      case 35:
        return result;
      case 30:
LABEL_47:
        __break(1u);
        goto LABEL_48;
      case 31:
        int v6 = (*((_DWORD *)v2 + 5) >> 1) & 0x3FFFFFF;
        goto LABEL_23;
      case 32:
      case 38:
        int v6 = (*((_DWORD *)v2 + 5) & 0x7FFFFFF) - 1;
        goto LABEL_23;
      case 33:
LABEL_46:
        uint64_t v7 = (uint64_t *)(v2 - 96);
        break;
      case 36:
        int v6 = *((_WORD *)v2 + 9) & 1;
        goto LABEL_23;
      case 37:
LABEL_48:
        uint64_t v7 = (uint64_t *)(v2 - 32);
        int v6 = v5;
        break;
      case 39:
        int v6 = *((_DWORD *)v2 + 20) + 1;
LABEL_23:
        if (!v6) {
          return 0;
        }
        if (v3 == 31)
        {
LABEL_25:
          int v14 = *((_DWORD *)v2 + 5);
          if ((v14 & 0x40000000) != 0)
          {
            uint64_t v15 = (char *)*((void *)v2 - 1);
            goto LABEL_27;
          }
        }
        else
        {
          int v5 = v6;
          switch(v2[16])
          {
            case '!':
              goto LABEL_46;
            case '""':
            case '#':
              goto LABEL_47;
            case '$':
              if ((*((_WORD *)v2 + 9) & 1) == 0)
              {
                uint64_t result = 0;
                goto LABEL_13;
              }
              int v14 = *((_DWORD *)v2 + 5);
              break;
            case '%':
              goto LABEL_48;
            case '\'':
              uint64_t v7 = (uint64_t *)&v2[-32 * *((unsigned int *)v2 + 20) - 64];
              goto LABEL_12;
            default:
              goto LABEL_25;
          }
        }
        uint64_t v15 = &v2[-32 * (v14 & 0x7FFFFFF)];
LABEL_27:
        uint64_t v7 = (uint64_t *)(v15 + 32);
        break;
      default:
        return 0;
    }
  }
LABEL_12:
  uint64_t result = *v7;
LABEL_13:
  if (v6 != 1)
  {
    int v5 = 0;
    uint64_t v9 = 1;
    int v10 = 2;
    for (uint64_t i = v2 - 32; ; i += 32)
    {
      if (v2[16] == 30)
      {
        int v12 = &v2[-32 * v9 - 32];
      }
      else
      {
        int v12 = v2 - 32;
        switch(v2[16])
        {
          case ' ':
          case '&':
            int v19 = *((_DWORD *)v2 + 5);
            if ((v19 & 0x40000000) != 0) {
              uint64_t v20 = (char *)*((void *)v2 - 1);
            }
            else {
              uint64_t v20 = &v4[-32 * (v19 & 0x7FFFFFF)];
            }
            int v12 = &v20[32 * (v5 + 2)];
            break;
          case '!':
            int v12 = v2 - 64;
            break;
          case '""':
          case '#':
            goto LABEL_47;
          case '$':
            if ((*((_WORD *)v2 + 9) & 1) == 0)
            {
              uint64_t v13 = 0;
              goto LABEL_18;
            }
            long long v18 = &v2[-32 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF)];
LABEL_32:
            int v12 = v18 + 32;
            break;
          case '%':
            break;
          case '\'':
            int v12 = &i[-32 * *((unsigned int *)v2 + 20)];
            break;
          default:
            int v16 = *((_DWORD *)v2 + 5);
            if ((v16 & 0x40000000) != 0) {
              BOOL v17 = (char *)*((void *)v2 - 1);
            }
            else {
              BOOL v17 = &v4[-32 * (v16 & 0x7FFFFFF)];
            }
            long long v18 = &v17[32 * (v10 & 0xFFFFFFFE)];
            goto LABEL_32;
        }
      }
      uint64_t v13 = *(void *)v12;
LABEL_18:
      if (v13 != result) {
        break;
      }
      ++v9;
      v10 += 2;
      if (v6 - 1 == ++v5) {
        return result;
      }
    }
    return 0;
  }
  return result;
}

uint64_t llvm::BasicBlock::getFirstNonPHI(llvm::BasicBlock *this)
{
  uint64_t v1 = (char *)this + 40;
  for (uint64_t i = *((void *)this + 6); (char *)i != v1; uint64_t i = *(void *)(i + 8))
  {
    uint64_t result = i - 24;
    if (i) {
      uint64_t v4 = i - 24;
    }
    else {
      uint64_t v4 = 0;
    }
    if (*(unsigned char *)(v4 + 16) != 83) {
      return result;
    }
  }
  return 0;
}

char *llvm::BasicBlock::getFirstNonPHIOrDbg(llvm::BasicBlock *this, int a2)
{
  uint64_t v2 = (char *)this + 40;
  int v3 = (char *)*((void *)this + 6);
  if (v3 == (char *)this + 40) {
    return 0;
  }
  while (1)
  {
    int v5 = v3 - 24;
    uint64_t v6 = v3 ? (uint64_t)(v3 - 24) : 0;
    if (*(unsigned char *)(v6 + 16) != 83 && !sub_1CBF63B28(v6) && (!a2 || !sub_1CC27D470(v6))) {
      break;
    }
    int v3 = (char *)*((void *)v3 + 1);
    if (v3 == v2) {
      return 0;
    }
  }
  return v5;
}

char *llvm::BasicBlock::getFirstNonPHIOrDbgOrLifetime(llvm::BasicBlock *this, int a2)
{
  uint64_t v2 = (char *)this + 40;
  int v3 = (char *)*((void *)this + 6);
  if (v3 == (char *)this + 40) {
    return 0;
  }
  while (1)
  {
    int v5 = v3 - 24;
    uint64_t v6 = v3 ? (llvm::Instruction *)(v3 - 24) : 0;
    if (*((unsigned char *)v6 + 16) != 83
      && !sub_1CBF63B28((uint64_t)v6)
      && !llvm::Instruction::isLifetimeStartOrEnd(v6)
      && (!a2 || !sub_1CC27D470((uint64_t)v6)))
    {
      break;
    }
    int v3 = (char *)*((void *)v3 + 1);
    if (v3 == v2) {
      return 0;
    }
  }
  return v5;
}

uint64_t llvm::BasicBlock::getFirstInsertionPt(llvm::BasicBlock *this)
{
  uint64_t result = (uint64_t)this + 40;
  for (uint64_t i = *((void *)this + 6); i != result; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v4 = i - 24;
    if (!i) {
      uint64_t v4 = 0;
    }
    if (*(unsigned char *)(v4 + 16) != 83)
    {
      unsigned int v5 = *(unsigned __int8 *)(i - 8) - 38;
      BOOL v6 = v5 > 0x38;
      uint64_t v7 = (1 << v5) & 0x100060000000001;
      if (v6 || v7 == 0) {
        return i;
      }
      else {
        return *(void *)(i + 8);
      }
    }
  }
  return result;
}

char *llvm::BasicBlock::getFirstNonPHIOrDbgOrAlloca(llvm::BasicBlock *this)
{
  uint64_t v1 = (char *)this + 40;
  for (uint64_t i = (char *)*((void *)this + 6); i != v1; uint64_t i = (char *)*((void *)i + 1))
  {
    int v3 = i - 24;
    if (!i) {
      int v3 = 0;
    }
    if (v3[16] != 83)
    {
      unsigned int v4 = *(i - 8) - 38;
      BOOL v5 = v4 > 0x38;
      uint64_t v6 = (1 << v4) & 0x100060000000001;
      if (!v5 && v6 != 0) {
        uint64_t i = (char *)*((void *)i + 1);
      }
      uint64_t v8 = *(void *)(*((void *)this + 7) + 80);
      if (v8) {
        uint64_t v9 = (llvm::BasicBlock *)(v8 - 24);
      }
      else {
        uint64_t v9 = 0;
      }
      if (v9 == this && i != v1)
      {
        while (1)
        {
          uint64_t v11 = i ? (uint64_t)(i - 24) : 0;
          if (*(unsigned char *)(v11 + 16) != 59 && !sub_1CBF63B28(v11) && !sub_1CC27D470(v11)) {
            break;
          }
          if (i && *(unsigned char *)(v11 + 16) == 59)
          {
            if (*(unsigned char *)(*(void *)(v11 - 32) + 16) != 16) {
              break;
            }
            uint64_t v12 = *(void *)(v11 + 40);
            uint64_t v13 = *(void *)(*(void *)(v12 + 56) + 80);
            uint64_t v14 = v13 ? v13 - 24 : 0;
            if (v12 != v14 || (*(_WORD *)(v11 + 18) & 0x40) != 0) {
              break;
            }
          }
          uint64_t i = (char *)*((void *)i + 1);
          if (i == v1) {
            return v1;
          }
        }
      }
      return i;
    }
  }
  return v1;
}

BOOL llvm::BasicBlock::isEntryBlock(llvm::BasicBlock *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 7) + 80);
  if (v1) {
    uint64_t v2 = (llvm::BasicBlock *)(v1 - 24);
  }
  else {
    uint64_t v2 = 0;
  }
  return v2 == this;
}

uint64_t llvm::BasicBlock::getSinglePredecessor(llvm::BasicBlock *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (!v1) {
    return 0;
  }
  while (1)
  {
    uint64_t v2 = *(void *)(v1 + 24);
    unsigned int v3 = *(unsigned __int8 *)(v2 + 16);
    BOOL v4 = v2 && v3 >= 0x1C;
    if (v4 && v3 - 29 < 0xB) {
      break;
    }
    uint64_t v1 = *(void *)(v1 + 8);
    if (!v1) {
      return 0;
    }
  }
  uint64_t result = *(void *)(v2 + 40);
  while (1)
  {
    uint64_t v1 = *(void *)(v1 + 8);
    if (!v1) {
      break;
    }
    uint64_t v7 = *(void *)(v1 + 24);
    unsigned int v8 = *(unsigned __int8 *)(v7 + 16);
    if (v7) {
      BOOL v9 = v8 >= 0x1C;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9 && v8 - 29 <= 0xA) {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::BasicBlock::getUniquePredecessor(llvm::BasicBlock *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (!v1) {
    return 0;
  }
  while (1)
  {
    uint64_t v2 = *(void *)(v1 + 24);
    unsigned int v3 = *(unsigned __int8 *)(v2 + 16);
    BOOL v4 = v2 && v3 >= 0x1C;
    if (v4 && v3 - 29 < 0xB) {
      break;
    }
    uint64_t v1 = *(void *)(v1 + 8);
    if (!v1) {
      return 0;
    }
  }
  uint64_t result = *(void *)(v2 + 40);
  while (1)
  {
    uint64_t v1 = *(void *)(v1 + 8);
    if (!v1) {
      return result;
    }
    uint64_t v7 = *(void *)(v1 + 24);
    unsigned int v8 = *(unsigned __int8 *)(v7 + 16);
    if (v7) {
      BOOL v9 = v8 >= 0x1C;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9 && v8 - 29 <= 0xA)
    {
LABEL_29:
      if (*(void *)(v7 + 40) != result) {
        return 0;
      }
      while (1)
      {
        uint64_t v1 = *(void *)(v1 + 8);
        if (!v1) {
          return result;
        }
        uint64_t v7 = *(void *)(v1 + 24);
        unsigned int v11 = *(unsigned __int8 *)(v7 + 16);
        if (v7) {
          BOOL v12 = v11 >= 0x1C;
        }
        else {
          BOOL v12 = 0;
        }
        if (v12 && v11 - 29 <= 0xA) {
          goto LABEL_29;
        }
      }
    }
  }
}

BOOL llvm::BasicBlock::hasNPredecessors(llvm::BasicBlock *this, int a2)
{
  for (uint64_t i = *((void *)this + 1); i; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v3 = *(void *)(i + 24);
    unsigned int v4 = *(unsigned __int8 *)(v3 + 16);
    if (v3) {
      BOOL v5 = v4 >= 0x1C;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5 && v4 - 29 < 0xB) {
      break;
    }
  }
  while (1)
  {
    if (!a2) {
      return i == 0;
    }
    if (!i) {
      break;
    }
    --a2;
    do
    {
      uint64_t i = *(void *)(i + 8);
      if (!i) {
        break;
      }
      uint64_t v7 = *(void *)(i + 24);
      unsigned int v8 = *(unsigned __int8 *)(v7 + 16);
      BOOL v9 = v7 && v8 >= 0x1C;
    }
    while (!v9 || v8 - 29 > 0xA);
  }
  return 0;
}

BOOL llvm::BasicBlock::hasNPredecessorsOrMore(llvm::BasicBlock *this, int a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (!v2) {
    return a2 == 0;
  }
  while (1)
  {
    uint64_t v3 = *(void *)(v2 + 24);
    unsigned int v4 = *(unsigned __int8 *)(v3 + 16);
    BOOL v5 = v3 && v4 >= 0x1C;
    if (v5 && v4 - 29 < 0xB) {
      break;
    }
    uint64_t v2 = *(void *)(v2 + 8);
    if (!v2) {
      return a2 == 0;
    }
  }
  BOOL result = 1;
  if (a2)
  {
LABEL_13:
    --a2;
    while (1)
    {
      uint64_t v2 = *(void *)(v2 + 8);
      if (!v2) {
        return a2 == 0;
      }
      uint64_t v8 = *(void *)(v2 + 24);
      unsigned int v9 = *(unsigned __int8 *)(v8 + 16);
      if (v8) {
        BOOL v10 = v9 >= 0x1C;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10 && v9 - 29 <= 0xA)
      {
        if (a2) {
          goto LABEL_13;
        }
        return result;
      }
    }
  }
  return result;
}

uint64_t llvm::BasicBlock::getSingleSuccessor(llvm::BasicBlock *this)
{
  uint64_t v1 = (llvm::BasicBlock *)*((void *)this + 5);
  if (v1 == (llvm::BasicBlock *)((char *)this + 40)) {
    return 0;
  }
  uint64_t v2 = (char *)v1 - 24;
  if (!v1) {
    uint64_t v2 = 0;
  }
  int v3 = v2[16];
  int v4 = 1;
  if (v3 == 30)
  {
    if ((*((_DWORD *)v2 + 5) & 0x7FFFFFF) == 3) {
      int v5 = 2;
    }
    else {
      int v5 = 1;
    }
    uint64_t v6 = v2 - 32;
  }
  else
  {
    int v5 = 2;
    uint64_t result = 0;
    switch(v2[16])
    {
      case 29:
      case 34:
      case 35:
        return result;
      case 30:
LABEL_27:
        __break(1u);
LABEL_28:
        if ((*((_WORD *)v2 + 9) & 1) == 0)
        {
          uint64_t v7 = 0;
          goto LABEL_10;
        }
        int v9 = *((_DWORD *)v2 + 5);
LABEL_32:
        BOOL v10 = &v2[-32 * (v9 & 0x7FFFFFF)];
LABEL_19:
        uint64_t v6 = v10 + 32;
        break;
      case 31:
        int v5 = (*((_DWORD *)v2 + 5) >> 1) & 0x3FFFFFF;
        goto LABEL_15;
      case 32:
      case 38:
        int v5 = (*((_DWORD *)v2 + 5) & 0x7FFFFFF) - 1;
        goto LABEL_15;
      case 33:
LABEL_25:
        uint64_t v6 = v2 - 96;
        break;
      case 36:
        int v5 = *((_WORD *)v2 + 9) & 1;
        goto LABEL_15;
      case 37:
LABEL_26:
        uint64_t v6 = v2 - 32;
        int v5 = v4;
        break;
      case 39:
        int v5 = *((_DWORD *)v2 + 20) + 1;
LABEL_15:
        if (!v5) {
          return 0;
        }
        if (v3 != 31)
        {
          int v4 = v5;
          switch(v2[16])
          {
            case '!':
              goto LABEL_25;
            case '""':
            case '#':
              goto LABEL_27;
            case '$':
              goto LABEL_28;
            case '%':
              goto LABEL_26;
            case '\'':
              uint64_t v6 = &v2[-32 * *((unsigned int *)v2 + 20) - 64];
              goto LABEL_9;
            default:
              break;
          }
        }
        int v9 = *((_DWORD *)v2 + 5);
        if ((v9 & 0x40000000) == 0) {
          goto LABEL_32;
        }
        BOOL v10 = (char *)*((void *)v2 - 1);
        goto LABEL_19;
      default:
        return 0;
    }
  }
LABEL_9:
  uint64_t v7 = *(void *)v6;
LABEL_10:
  if (v5 == 1) {
    return v7;
  }
  else {
    return 0;
  }
}

char *llvm::BasicBlock::phis(llvm::BasicBlock **this)
{
  if (this[5] == (llvm::BasicBlock *)(this + 5)) {
    return 0;
  }
  uint64_t v1 = this[6];
  if (v1) {
    uint64_t v2 = (char *)v1 - 24;
  }
  else {
    uint64_t v2 = 0;
  }
  if (v2[16] == 83) {
    return v2;
  }
  else {
    return 0;
  }
}

llvm::Type *llvm::BasicBlock::removePredecessor(llvm::Type *this, llvm::BasicBlock *a2, int a3)
{
  if (*((llvm::Type **)this + 5) != (llvm::Type *)((char *)this + 40))
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = v3 - 24;
    uint64_t v5 = v3 ? v3 - 24 : 0;
    if (*(unsigned char *)(v5 + 16) == 83)
    {
      int v7 = a3 ^ 1;
      if ((*(_DWORD *)(v5 + 20) & 0x7FFFFFF) == 1) {
        char v8 = 1;
      }
      else {
        char v8 = a3;
      }
      do
      {
        uint64_t v9 = *(void *)(v4 + 32);
        uint64_t v10 = v9 - 24;
        if (!v9) {
          uint64_t v10 = 0;
        }
        int v11 = *(unsigned __int8 *)(v10 + 16);
        if (v11 == 83) {
          uint64_t v12 = v10;
        }
        else {
          uint64_t v12 = 0;
        }
        int v13 = *(_DWORD *)(v4 + 20);
        uint64_t v14 = v13 & 0x7FFFFFF;
        if ((v13 & 0x7FFFFFF) != 0)
        {
          uint64_t v15 = 0;
          while (1)
          {
            uint64_t v16 = v4 - 32 * v14;
            if ((v13 & 0x40000000) != 0) {
              uint64_t v16 = *(void *)(v4 - 8);
            }
            if (*(llvm::BasicBlock **)(v16 + 32 * *(unsigned int *)(v4 + 60) + 8 * v15) == a2) {
              break;
            }
            if (v14 == ++v15) {
              goto LABEL_44;
            }
          }
        }
        else
        {
LABEL_44:
          LODWORD(v15) = -1;
        }
        this = (llvm::Type *)llvm::PHINode::removeIncomingValue((llvm::PHINode *)v4, v15, v7);
        if ((v8 & 1) == 0)
        {
          int v17 = *(_DWORD *)(v4 + 20);
          if ((v17 & 0x40000000) != 0)
          {
            long long v18 = *(llvm::Type ***)(v4 - 8);
            unsigned int v19 = v17 & 0x7FFFFFF;
          }
          else
          {
            unsigned int v19 = v17 & 0x7FFFFFF;
            long long v18 = (llvm::Type **)(v4 - 32 * (v17 & 0x7FFFFFF));
          }
          uint64_t v20 = *v18;
          unsigned int v21 = v19 - 1;
          if (v19 != 1)
          {
            uint64_t v22 = 32;
            do
            {
              if ((v17 & 0x40000000) != 0) {
                int v23 = *(llvm::Type **)(*(void *)(v4 - 8) + v22);
              }
              else {
                int v23 = *(llvm::Type **)(v4 - 32 * v19 + v22);
              }
              if (v23 != v20 && v23 != (llvm::Type *)v4)
              {
                if (v20 != (llvm::Type *)v4) {
                  goto LABEL_23;
                }
                if ((v17 & 0x40000000) != 0) {
                  uint64_t v24 = *(void *)(v4 - 8);
                }
                else {
                  uint64_t v24 = v4 - 32 * v19;
                }
                uint64_t v20 = *(llvm::Type **)(v24 + v22);
              }
              v22 += 32;
              --v21;
            }
            while (v21);
          }
          if (v20 == (llvm::Type *)v4)
          {
            this = llvm::UndefValue::get(*(llvm::UndefValue **)v4, v20);
            uint64_t v20 = this;
          }
          if (v20)
          {
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v4, v20, (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
          }
        }
LABEL_23:
        if (!v9) {
          break;
        }
        uint64_t v4 = v12;
      }
      while (v11 == 83);
    }
  }
  return this;
}

BOOL llvm::BasicBlock::canSplitPredecessors(llvm::BasicBlock *this)
{
  uint64_t v1 = (uint64_t *)((char *)this + 48);
  do
  {
    uint64_t v2 = *v1;
    uint64_t v3 = v2 - 24;
    if (!v2) {
      uint64_t v3 = 0;
    }
    int v4 = *(unsigned __int8 *)(v3 + 16);
    uint64_t v1 = (uint64_t *)(v2 + 8);
  }
  while (v4 == 83);
  return (v4 - 38) > 0x2A || ((1 << (v4 - 38)) & 0x60000000001) == 0;
}

unint64_t llvm::BasicBlock::isLegalToHoistInto(llvm::BasicBlock *this)
{
  uint64_t v1 = (llvm::BasicBlock *)*((void *)this + 5);
  if (v1 == (llvm::BasicBlock *)((char *)this + 40)) {
    return 1;
  }
  if (v1) {
    uint64_t v2 = (char *)v1 - 24;
  }
  else {
    uint64_t v2 = 0;
  }
  unsigned int v3 = v2[16];
  unint64_t result = 1;
  if (v3 - 29 <= 0xA && v3 <= 0x26) {
    return (0x9FFFFFFFFuLL >> v3) & 1;
  }
  return result;
}

void llvm::BasicBlock::splitBasicBlock(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (!a4) {
    operator new();
  }

  llvm::BasicBlock::splitBasicBlockBefore();
}

void llvm::BasicBlock::splitBasicBlockBefore()
{
}

uint64_t llvm::BasicBlock::replaceSuccessorsPhiUsesWith(llvm::BasicBlock *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  uint64_t v5 = *((void *)this + 5);
  uint64_t result = (uint64_t)this + 40;
  uint64_t v4 = v5;
  if (v5 != result)
  {
    if (v4) {
      uint64_t v6 = v4 - 24;
    }
    else {
      uint64_t v6 = 0;
    }
    int v7 = *(unsigned __int8 *)(v6 + 16);
    if (v7 != 30)
    {
      uint64_t result = 2;
      switch(*(unsigned char *)(v6 + 16))
      {
        case 0x1E:
LABEL_53:
          __break(1u);
          goto LABEL_54;
        case 0x1F:
          uint64_t result = (*(_DWORD *)(v6 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_51;
        case 0x20:
        case 0x26:
          uint64_t result = (*(_DWORD *)(v6 + 20) & 0x7FFFFFFu) - 1;
          goto LABEL_51;
        case 0x21:
          goto LABEL_10;
        case 0x24:
LABEL_54:
          uint64_t result = *(_WORD *)(v6 + 18) & 1;
          goto LABEL_51;
        case 0x25:
          LODWORD(result) = 1;
          goto LABEL_10;
        case 0x27:
          uint64_t result = (*(_DWORD *)(v6 + 80) + 1);
LABEL_51:
          if (!result) {
            return result;
          }
          goto LABEL_10;
        default:
          return result;
      }
    }
    if ((*(_DWORD *)(v6 + 20) & 0x7FFFFFF) == 3) {
      LODWORD(result) = 2;
    }
    else {
      LODWORD(result) = 1;
    }
LABEL_10:
    uint64_t v8 = 0;
    uint64_t v9 = v6 - 32;
    uint64_t result = result;
    do
    {
      if (v7 == 30)
      {
        uint64_t v19 = v9 - 32 * v8;
      }
      else
      {
        uint64_t v19 = v6 - 32;
        switch(v7)
        {
          case ' ':
          case '&':
            int v23 = *(_DWORD *)(v6 + 20);
            if ((v23 & 0x40000000) != 0) {
              uint64_t v24 = *(void *)(v6 - 8);
            }
            else {
              uint64_t v24 = v6 - 32 * (v23 & 0x7FFFFFF);
            }
            uint64_t v22 = v24 + 32 * v8;
            break;
          case '!':
            if (v8) {
              uint64_t v25 = -64;
            }
            else {
              uint64_t v25 = -96;
            }
            uint64_t v19 = v6 + v25;
            goto LABEL_14;
          case '""':
          case '#':
            goto LABEL_53;
          case '$':
            uint64_t v19 = v6 + 32 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF);
            goto LABEL_14;
          case '%':
            goto LABEL_14;
          case '\'':
            if (v8) {
              uint64_t v19 = v9 - 32 * *(unsigned int *)(v6 + 80) + 32 * v8 - 32;
            }
            else {
              uint64_t v19 = v6 - 64 - 32 * *(unsigned int *)(v6 + 80);
            }
            goto LABEL_14;
          default:
            int v20 = *(_DWORD *)(v6 + 20);
            if ((v20 & 0x40000000) != 0) {
              uint64_t v21 = *(void *)(v6 - 8);
            }
            else {
              uint64_t v21 = v6 - 32 * (v20 & 0x7FFFFFF);
            }
            uint64_t v22 = v21 + 32 * (2 * v8);
            break;
        }
        uint64_t v19 = v22 + 32;
      }
LABEL_14:
      uint64_t v10 = *(void *)v19 + 40;
      for (uint64_t i = *(void *)(*(void *)v19 + 48); i != v10 && i && *(unsigned char *)(i - 8) == 83; uint64_t i = *(void *)(i + 8))
      {
        int v12 = *(_DWORD *)(i - 4);
        uint64_t v13 = v12 & 0x7FFFFFF;
        if ((v12 & 0x7FFFFFF) != 0)
        {
          uint64_t v14 = 0;
          uint64_t v15 = 8 * v13;
          do
          {
            int v16 = *(_DWORD *)(i - 4);
            if ((v16 & 0x40000000) != 0) {
              uint64_t v17 = *(void *)(i - 32);
            }
            else {
              uint64_t v17 = i - 24 - 32 * (v16 & 0x7FFFFFF);
            }
            uint64_t v18 = *(unsigned int *)(i + 36);
            if (*(llvm::BasicBlock **)(v17 + 32 * v18 + v14) == a2) {
              *(void *)(v17 + 32 * v18 + v14) = a3;
            }
            v14 += 8;
          }
          while (v15 != v14);
        }
      }
      ++v8;
    }
    while (v8 != result);
  }
  return result;
}

uint64_t llvm::BasicBlock::replacePhiUsesWith(uint64_t this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  for (uint64_t i = *(void *)(this + 48); i != this + 40 && i && *(unsigned char *)(i - 8) == 83; uint64_t i = *(void *)(i + 8))
  {
    int v4 = *(_DWORD *)(i - 4);
    uint64_t v5 = v4 & 0x7FFFFFF;
    if ((v4 & 0x7FFFFFF) != 0)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 8 * v5;
      do
      {
        int v8 = *(_DWORD *)(i - 4);
        if ((v8 & 0x40000000) != 0) {
          uint64_t v9 = *(void *)(i - 32);
        }
        else {
          uint64_t v9 = i - 24 - 32 * (v8 & 0x7FFFFFF);
        }
        uint64_t v10 = *(unsigned int *)(i + 36);
        if (*(llvm::BasicBlock **)(v9 + 32 * v10 + v6) == a2) {
          *(void *)(v9 + 32 * v10 + v6) = a3;
        }
        v6 += 8;
      }
      while (v7 != v6);
    }
  }
  return this;
}

uint64_t llvm::BasicBlock::replaceSuccessorsPhiUsesWith(llvm::BasicBlock *this, llvm::BasicBlock *a2)
{
  return llvm::BasicBlock::replaceSuccessorsPhiUsesWith(this, this, a2);
}

BOOL llvm::BasicBlock::isLandingPad(llvm::BasicBlock *this)
{
  uint64_t v1 = (uint64_t *)((char *)this + 48);
  do
  {
    uint64_t v2 = *v1;
    uint64_t v3 = v2 - 24;
    if (!v2) {
      uint64_t v3 = 0;
    }
    int v4 = *(unsigned __int8 *)(v3 + 16);
    uint64_t v1 = (uint64_t *)(v2 + 8);
  }
  while (v4 == 83);
  return v4 == 94;
}

void *llvm::BasicBlock::getLandingPadInst(llvm::BasicBlock *this)
{
  for (uint64_t i = (void *)*((void *)this + 6); i != (void *)((char *)this + 40); uint64_t i = (void *)i[1])
  {
    uint64_t v2 = i - 3;
    if (i) {
      uint64_t v3 = i - 3;
    }
    else {
      uint64_t v3 = 0;
    }
    if (*((unsigned char *)v3 + 16) != 83) {
      goto LABEL_9;
    }
  }
  uint64_t v2 = 0;
LABEL_9:
  if (*((unsigned char *)v2 + 16) == 94) {
    return v2;
  }
  else {
    return 0;
  }
}

unint64_t llvm::BasicBlock::getIrrLoopHeaderWeight(llvm::BasicBlock *this)
{
  uint64_t v3 = (char *)*((void *)this + 5);
  uint64_t v1 = (char *)this + 40;
  uint64_t v2 = v3;
  if (v3 == v1 || v2 == 0)
  {
    if (v2 == v1)
    {
      uint64_t v27 = 0;
    }
    else
    {
      uint64_t v26 = (uint64_t)(v2 - 24);
      if (!v2) {
        uint64_t v26 = 0;
      }
      if (*(unsigned __int8 *)(v26 + 16) - 29 >= 0xB) {
        uint64_t v27 = 0;
      }
      else {
        uint64_t v27 = v26;
      }
    }
    if ((*(unsigned char *)(v27 + 23) & 0x20) == 0)
    {
LABEL_27:
      unint64_t v5 = 0;
      unint64_t v6 = 0;
      return v6 | v5;
    }
    uint64_t v28 = ***(void ***)v27;
    uint64_t v56 = v27;
    int v29 = *(_DWORD *)(v28 + 2496);
    if (v29)
    {
      uint64_t v30 = *(void *)(v28 + 2480);
      int v31 = v29 - 1;
      unsigned int v32 = v31 & ((v27 >> 4) ^ (v27 >> 9));
      int v33 = (void *)(v30 + 40 * v32);
      uint64_t v34 = *v33;
      if (*v33 == v27)
      {
LABEL_42:
        uint64_t v35 = *((unsigned int *)v33 + 4);
        if (!v35) {
          goto LABEL_27;
        }
        unsigned int v36 = (void *)(v33[1] + 8);
        uint64_t v37 = 16 * v35;
        while (*((_DWORD *)v36 - 2) != 24)
        {
          unint64_t v5 = 0;
          unint64_t v6 = 0;
          v36 += 2;
          v37 -= 16;
          if (!v37) {
            return v6 | v5;
          }
        }
        uint64_t v48 = *v36;
        if (!*v36) {
          goto LABEL_27;
        }
        uint64_t String = llvm::MDString::getString(*(llvm::MDString **)(v48 - 8 * *(unsigned int *)(v48 + 8)));
        if (v50 != 18) {
          goto LABEL_27;
        }
        BOOL v51 = *(void *)String == 0x6165685F706F6F6CLL && *(void *)(String + 8) == 0x676965775F726564;
        if (!v51 || *(_WORD *)(String + 16) != 29800) {
          goto LABEL_27;
        }
        uint64_t v53 = *(void *)(*(void *)(v48 - 8 * *(unsigned int *)(v48 + 8) + 8) + 128);
        BOOL v47 = (unint64_t *)(v53 + 24);
        if (*(_DWORD *)(v53 + 32) > 0x40u) {
LABEL_66:
        }
          BOOL v47 = (unint64_t *)*v47;
LABEL_67:
        unint64_t v6 = *v47;
        unint64_t v5 = *v47 & 0xFFFFFFFFFFFFFF00;
        unint64_t v6 = v6;
        return v6 | v5;
      }
      int v38 = 0;
      int v39 = 1;
      while (v34 != -4096)
      {
        if (v38) {
          BOOL v40 = 0;
        }
        else {
          BOOL v40 = v34 == -8192;
        }
        if (v40) {
          int v38 = v33;
        }
        unsigned int v41 = v32 + v39++;
        unsigned int v32 = v41 & v31;
        int v33 = (void *)(v30 + 40 * v32);
        uint64_t v34 = *v33;
        if (*v33 == v27) {
          goto LABEL_42;
        }
      }
      if (v38) {
        int v54 = v38;
      }
      else {
        int v54 = v33;
      }
    }
    else
    {
      int v54 = 0;
    }
    int v33 = sub_1CC609054(v28 + 2480, (uint64_t)&v56, &v56, v54);
    uint64_t v55 = v56;
    v33[3] = 0;
    v33[4] = 0;
    *int v33 = v55;
    v33[1] = v33 + 3;
    v33[2] = 0x100000000;
    goto LABEL_42;
  }
  unint64_t v5 = 0;
  unint64_t v6 = 0;
  if (*(v2 - 8) - 29 >= 0xB) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = (uint64_t)(v2 - 24);
  }
  if ((*(unsigned char *)(v7 + 23) & 0x20) != 0)
  {
    uint64_t v9 = ***(void ***)v7;
    uint64_t v56 = v7;
    int v10 = *(_DWORD *)(v9 + 2496);
    if (v10)
    {
      uint64_t v11 = *(void *)(v9 + 2480);
      int v12 = v10 - 1;
      unsigned int v13 = v12 & ((v7 >> 4) ^ (v7 >> 9));
      uint64_t v14 = (void *)(v11 + 40 * v13);
      uint64_t v15 = *v14;
      if (*v14 == v7)
      {
LABEL_12:
        uint64_t v16 = *((unsigned int *)v14 + 4);
        if (!v16) {
          goto LABEL_27;
        }
        uint64_t v17 = (void *)(v14[1] + 8);
        uint64_t v18 = 16 * v16;
        while (*((_DWORD *)v17 - 2) != 24)
        {
          unint64_t v5 = 0;
          unint64_t v6 = 0;
          v17 += 2;
          v18 -= 16;
          if (!v18) {
            return v6 | v5;
          }
        }
        uint64_t v23 = *v17;
        if (!*v17) {
          goto LABEL_27;
        }
        uint64_t v42 = llvm::MDString::getString(*(llvm::MDString **)(v23 - 8 * *(unsigned int *)(v23 + 8)));
        if (v43 != 18) {
          goto LABEL_27;
        }
        BOOL v44 = *(void *)v42 == 0x6165685F706F6F6CLL && *(void *)(v42 + 8) == 0x676965775F726564;
        if (!v44 || *(_WORD *)(v42 + 16) != 29800) {
          goto LABEL_27;
        }
        uint64_t v46 = *(void *)(*(void *)(v23 - 8 * *(unsigned int *)(v23 + 8) + 8) + 128);
        BOOL v47 = (unint64_t *)(v46 + 24);
        if (*(_DWORD *)(v46 + 32) >= 0x41u) {
          goto LABEL_66;
        }
        goto LABEL_67;
      }
      uint64_t v19 = 0;
      int v20 = 1;
      while (v15 != -4096)
      {
        if (v19) {
          BOOL v21 = 0;
        }
        else {
          BOOL v21 = v15 == -8192;
        }
        if (v21) {
          uint64_t v19 = v14;
        }
        unsigned int v22 = v13 + v20++;
        unsigned int v13 = v22 & v12;
        uint64_t v14 = (void *)(v11 + 40 * v13);
        uint64_t v15 = *v14;
        if (*v14 == v7) {
          goto LABEL_12;
        }
      }
      if (v19) {
        uint64_t v24 = v19;
      }
      else {
        uint64_t v24 = v14;
      }
    }
    else
    {
      uint64_t v24 = 0;
    }
    uint64_t v14 = sub_1CC609054(v9 + 2480, (uint64_t)&v56, &v56, v24);
    uint64_t v25 = v56;
    v14[3] = 0;
    v14[4] = 0;
    *uint64_t v14 = v25;
    v14[1] = v14 + 3;
    v14[2] = 0x100000000;
    goto LABEL_12;
  }
  return v6 | v5;
}

uint64_t llvm::skipDebugIntrinsics(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1) {
    uint64_t v2 = a1 - 24;
  }
  else {
    uint64_t v2 = 0;
  }
  if (sub_1CBF63B28(v2))
  {
    do
    {
      uint64_t v1 = *(void *)(v1 + 8);
      if (v1) {
        uint64_t v3 = v1 - 24;
      }
      else {
        uint64_t v3 = 0;
      }
    }
    while (sub_1CBF63B28(v3));
  }
  return v1;
}

uint64_t llvm::BasicBlock::renumberInstructions(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 48);
  if (v1 != this + 40)
  {
    int v2 = 0;
    do
    {
      uint64_t v3 = v1 - 24;
      if (!v1) {
        uint64_t v3 = 0;
      }
      *(_DWORD *)(v3 + 56) = v2++;
      uint64_t v1 = *(void *)(v1 + 8);
    }
    while (v1 != this + 40);
  }
  *(_WORD *)(this + 18) |= 0x8000u;
  return this;
}

void llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(uint64_t a1, llvm::Value *a2)
{
  int v2 = a2;
  uint64_t v3 = *((void *)a2 + 7);
  if (v3) {
    int v4 = *(uint64_t **)(v3 + 104);
  }
  else {
    int v4 = 0;
  }
  *((void *)a2 + 7) = a1 - 72;
  if (v4 != *(uint64_t **)(a1 + 32))
  {
    int v38 = (char *)a2 + 40;
    if (*((llvm::Value **)a2 + 5) != (llvm::Value *)((char *)a2 + 40))
    {
      uint64_t v35 = *(llvm::ValueSymbolTable **)(a1 + 32);
      uint64_t v37 = v4;
      if (v4)
      {
        uint64_t v5 = *((void *)a2 + 6);
        if ((char *)v5 != v38)
        {
          while (1)
          {
            unint64_t v6 = (uint64_t ***)(v5 - 24);
            if (!v5) {
              unint64_t v6 = 0;
            }
            if ((*((unsigned char *)v6 + 23) & 0x10) != 0) {
              break;
            }
LABEL_11:
            uint64_t v5 = *(void *)(v5 + 8);
            if ((char *)v5 == v38) {
              goto LABEL_34;
            }
          }
          uint64_t v7 = ***v6;
          uint64_t v8 = *(void *)(v7 + 152);
          uint64_t v9 = *(unsigned int *)(v7 + 168);
          if (v9)
          {
            LODWORD(v10) = (v9 - 1) & ((v6 >> 4) ^ (v6 >> 9));
            uint64_t v11 = (uint64_t ****)(v8 + 16 * v10);
            int v12 = *v11;
            if (*v11 == v6) {
              goto LABEL_19;
            }
            int v13 = 1;
            while (v12 != (uint64_t ***)-4096)
            {
              int v14 = v10 + v13++;
              uint64_t v10 = v14 & (v9 - 1);
              int v12 = *(uint64_t ****)(v8 + 16 * v10);
              if (v12 == v6)
              {
                uint64_t v11 = (uint64_t ****)(v8 + 16 * v10);
                goto LABEL_19;
              }
            }
          }
          uint64_t v11 = (uint64_t ****)(v8 + 16 * v9);
LABEL_19:
          uint64_t v15 = *((unsigned int *)v37 + 2);
          if (v15)
          {
            uint64_t v16 = (size_t *)v11[1];
            uint64_t v17 = *((unsigned int *)v37 + 5);
            uint64_t v18 = (unsigned __int8 *)v16 + v17;
            size_t v19 = *v16;
            if (*v16)
            {
              int v20 = 0;
              size_t v21 = *v16;
              unsigned int v22 = v18;
              do
              {
                int v23 = *v22++;
                int v20 = 33 * v20 + v23;
                --v21;
              }
              while (v21);
            }
            else
            {
              int v20 = 0;
            }
            unsigned int v24 = v15 - 1;
            uint64_t v25 = *v37;
            uint64_t v26 = *v37 + 8 * v15 + 8;
            int v27 = 1;
            int v28 = v20;
            while (1)
            {
              uint64_t v29 = v28 & v24;
              uint64_t v30 = *(void **)(v25 + 8 * v29);
              if (v30 != (void *)-8)
              {
                if (!v30) {
                  goto LABEL_11;
                }
                if (*(_DWORD *)(v26 + 4 * v29) == v20 && v19 == *v30 && (!v19 || !memcmp(v18, (char *)v30 + v17, v19))) {
                  break;
                }
              }
              int v28 = v27 + v29;
              ++v27;
            }
            *(void *)(v25 + 8 * (int)v29) = -8;
            *(uint64_t *)((char *)v37 + 12) = (uint64_t)vadd_s32(*(int32x2_t *)((char *)v37 + 12), (int32x2_t)0x1FFFFFFFFLL);
          }
          goto LABEL_11;
        }
      }
LABEL_34:
      int v2 = a2;
      if (v35)
      {
        for (uint64_t i = *((void *)a2 + 6); (char *)i != v38; uint64_t i = *(void *)(i + 8))
        {
          if (i) {
            int v33 = (llvm::Value *)(i - 24);
          }
          else {
            int v33 = 0;
          }
          if ((*((unsigned char *)v33 + 23) & 0x10) != 0) {
            llvm::ValueSymbolTable::reinsertValue(v35, v33);
          }
        }
      }
    }
  }
  if ((*((unsigned char *)v2 + 23) & 0x10) != 0)
  {
    int v31 = *(llvm::ValueSymbolTable **)(a1 + 32);
    if (v31)
    {
      llvm::ValueSymbolTable::reinsertValue(v31, v2);
    }
  }
}

void sub_1CC539DE4()
{
}

unsigned char *sub_1CC539DF8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F2616270;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t sub_1CC539E44(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F2616270;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

BOOL sub_1CC539E74(uint64_t a1, uint64_t a2)
{
  if (sub_1CBF63B28(a2)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 8)) {
    return !sub_1CC27D470(a2);
  }
  return 1;
}

uint64_t sub_1CC539EC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1CC539F64()
{
}

unsigned char *sub_1CC539F78(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F26162B8;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t sub_1CC539FC4(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F26162B8;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

BOOL sub_1CC539FF4(uint64_t a1, uint64_t a2)
{
  if (sub_1CBF63B28(a2)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 8)) {
    return !sub_1CC27D470(a2);
  }
  return 1;
}

void *sub_1CC53A048(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  sub_1CC53A1FC((uint64_t)v13, a4);
  *a1 = a2;
  a1[1] = a3;
  if (v14)
  {
    if (v14 == v13)
    {
      a1[5] = a1 + 2;
      (*(void (**)(void *))(v13[0] + 24))(v13);
    }
    else
    {
      a1[5] = (*(uint64_t (**)(void))(*v14 + 16))();
    }
  }
  else
  {
    a1[5] = 0;
  }
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  while (v7 != v8)
  {
    uint64_t v9 = a1[5];
    if (!v9)
    {
      sub_1CB920400();
      goto LABEL_18;
    }
    uint64_t v10 = v7 ? v7 - 24 : 0;
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 48))(v9, v10)) {
      break;
    }
    uint64_t v8 = a1[1];
    uint64_t v7 = *(void *)(*a1 + 8);
    *a1 = v7;
  }
  uint64_t v11 = v14;
  if (v14 == v13)
  {
    (*(void (**)(void *))(v13[0] + 32))(v13);
    return a1;
  }
LABEL_18:
  if (v11) {
    (*(void (**)(void *))(*v11 + 40))(v11);
  }
  return a1;
}

uint64_t sub_1CC53A1FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void llvm::SymbolTableListTraits<llvm::BasicBlock>::transferNodesFromList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = a1 - 72;
    uint64_t v7 = *(llvm::ValueSymbolTable **)(a1 + 32);
    uint64_t v8 = *(uint64_t **)(a2 + 32);
    if (v7 == (llvm::ValueSymbolTable *)v8)
    {
      while (a3 != a4)
      {
        uint64_t v12 = a3 - 24;
        if (!a3) {
          uint64_t v12 = 0;
        }
        sub_1CC53695C((void *)(v12 + 40), (void *)(v12 + 56), v6);
        a3 = *(void *)(a3 + 8);
      }
    }
    else
    {
      while (a3 != a4)
      {
        if (a3) {
          uint64_t v9 = a3 - 24;
        }
        else {
          uint64_t v9 = 0;
        }
        int v10 = *(_DWORD *)(v9 + 20) & 0x10000000;
        if (v8 && v10)
        {
          ValueName = (size_t *)llvm::Value::getValueName((llvm::Value *)v9);
          llvm::ValueSymbolTable::removeValueName(v8, ValueName);
        }
        sub_1CC53695C((void *)(v9 + 40), (void *)(v9 + 56), v6);
        if (v7 && v10) {
          llvm::ValueSymbolTable::reinsertValue(v7, (llvm::Value *)v9);
        }
        a3 = *(void *)(a3 + 8);
      }
    }
  }
}

void sub_1CC53A388()
{
}

uint64_t sub_1CC53A3F0(uint64_t a1)
{
  *(void *)a1 = &unk_1F26163C8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1CC53A440(uint64_t a1)
{
  *(void *)a1 = &unk_1F26163C8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC53A4B0()
{
  return 0;
}

uint64_t sub_1CC53A4B8(uint64_t a1)
{
  *(void *)a1 = &unk_1F26163C8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1CC53A508(uint64_t a1)
{
  *(void *)a1 = &unk_1F26163C8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC53A578()
{
}

uint64_t sub_1CC53A5E0(uint64_t a1)
{
  *(void *)a1 = &unk_1F26163C8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1CC53A630(uint64_t a1)
{
  *(void *)a1 = &unk_1F26163C8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC53A6A0()
{
}

uint64_t sub_1CC53A704(uint64_t a1)
{
  *(void *)a1 = &unk_1F26163C8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1CC53A754(uint64_t a1)
{
  *(void *)a1 = &unk_1F26163C8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC53A7C4()
{
}

uint64_t sub_1CC53A82C(uint64_t a1)
{
  *(void *)a1 = &unk_1F26163C8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1CC53A87C(uint64_t a1)
{
  *(void *)a1 = &unk_1F26163C8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC53A8EC(uint64_t a1, uint64_t a2)
{
  return ((*(_DWORD *)(a2 + 8) & 0xFFFFFF00) == 256) | 0x100u;
}

void sub_1CC53A904()
{
}

uint64_t sub_1CC53A96C(uint64_t a1)
{
  *(void *)a1 = &unk_1F26163C8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1CC53A9BC(uint64_t a1)
{
  *(void *)a1 = &unk_1F26163C8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC53AA2C(uint64_t a1, uint64_t a2)
{
  return ((*(_DWORD *)(a2 + 8) & 0xFFFFFF00) == 256) | 0x100u;
}

void sub_1CC53AA44()
{
  qword_1EBCD8340 = (uint64_t)"erlang";
  *(void *)algn_1EBCD8348 = 6;
  qword_1EBCD8350 = (uint64_t)"erlang-compatible garbage collector";
  unk_1EBCD8358 = 35;
  qword_1EBCD8360 = (uint64_t)sub_1CC53A388;
  qword_1EBCD8370 = (uint64_t)&qword_1EBCD8340;
  v0 = (void *)llvm::Registry<llvm::GCStrategy>::Tail;
  if (!llvm::Registry<llvm::GCStrategy>::Tail) {
    v0 = &llvm::Registry<llvm::GCStrategy>::Head;
  }
  void *v0 = &qword_1EBCD8368;
  qword_1EBCD8378 = (uint64_t)"ocaml";
  qword_1EBCD8380 = 5;
  unk_1EBCD8388 = "ocaml 3.10-compatible GC";
  qword_1EBCD8390 = 24;
  unk_1EBCD8398 = sub_1CC53A578;
  qword_1EBCD83A8 = (uint64_t)&qword_1EBCD8378;
  qword_1EBCD83A0 = (uint64_t)&qword_1EBCD83D8;
  qword_1EBCD8368 = (uint64_t)&qword_1EBCD83A0;
  qword_1EBCD83B0 = (uint64_t)"shadow-stack";
  qword_1EBCD83B8 = 12;
  unk_1EBCD83C0 = "Very portable GC for uncooperative code generators";
  qword_1EBCD83C8 = 50;
  unk_1EBCD83D0 = sub_1CC53A6A0;
  qword_1EBCD83E0 = (uint64_t)&qword_1EBCD83B0;
  qword_1EBCD83E8 = (uint64_t)"statepoint-example";
  qword_1EBCD83F0 = 18;
  unk_1EBCD83F8 = "an example strategy for statepoint";
  qword_1EBCD8400 = 34;
  unk_1EBCD8408 = sub_1CC53A7C4;
  qword_1EBCD8418 = (uint64_t)&qword_1EBCD83E8;
  qword_1EBCD8420 = (uint64_t)"coreclr";
  qword_1EBCD83D8 = (uint64_t)&qword_1EBCD8410;
  qword_1EBCD8428 = 7;
  unk_1EBCD8430 = "CoreCLR-compatible GC";
  qword_1EBCD8438 = 21;
  unk_1EBCD8440 = sub_1CC53A904;
  qword_1EBCD8448 = 0;
  qword_1EBCD8450 = (uint64_t)&qword_1EBCD8420;
  qword_1EBCD8410 = &qword_1EBCD8448;
  llvm::Registry<llvm::GCStrategy>::Tail = (uint64_t)&qword_1EBCD8448;
}

double llvm::Comdat::Comdat(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = a1 + 48;
  *(void *)(a1 + 24) = a1 + 48;
  *(void *)&double result = 2;
  *(void *)(a1 + 32) = 2;
  *(_DWORD *)(a1 + 40) = 0;
  return result;
}

{
  double result;

  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = a1 + 48;
  *(void *)(a1 + 24) = a1 + 48;
  *(void *)&double result = 2;
  *(void *)(a1 + 32) = 2;
  *(_DWORD *)(a1 + 40) = 0;
  return result;
}

double llvm::Comdat::Comdat(llvm::Comdat *this)
{
  *(void *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 2) = (char *)this + 48;
  *((void *)this + 3) = (char *)this + 48;
  *(void *)&double result = 2;
  *((void *)this + 4) = 2;
  *((_DWORD *)this + 10) = 0;
  return result;
}

{
  double result;

  *(void *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 2) = (char *)this + 48;
  *((void *)this + 3) = (char *)this + 48;
  *(void *)&double result = 2;
  *((void *)this + 4) = 2;
  *((_DWORD *)this + 10) = 0;
  return result;
}

size_t *LLVMGetOrInsertComdat(uint64_t a1, char *__s)
{
  if (__s) {
    size_t v4 = strlen(__s);
  }
  else {
    size_t v4 = 0;
  }

  return llvm::Module::getOrInsertComdat(a1, (unsigned __int8 *)__s, v4);
}

uint64_t LLVMGetComdat(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t LLVMGetComdatSelectionKind(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t LLVMSetComdatSelectionKind(uint64_t result, unsigned int a2)
{
  if (a2 <= 4) {
    *(_DWORD *)(result + 8) = a2;
  }
  return result;
}

llvm::detail::IEEEFloat *llvm::ConstantFoldCastInstruction(llvm *this, llvm::detail::IEEEFloat *a2, llvm::Constant *a3, llvm::Type *a4)
{
  size_t v4 = a3;
  uint64_t v161 = *MEMORY[0x1E4F143B8];
  int v5 = *((unsigned __int8 *)a2 + 16);
  if (v5 == 12)
  {
    return (llvm::detail::IEEEFloat *)llvm::PoisonValue::get(a3, a2);
  }
  uint64_t v6 = this;
  if ((v5 - 11) <= 1)
  {
    if (this > 0x2C || ((1 << (char)this) & 0x198000000000) == 0)
    {
      return (llvm::detail::IEEEFloat *)llvm::UndefValue::get(a3, a2);
    }
LABEL_63:
    return llvm::Constant::getNullValue(v4, a2, a3);
  }
  if (v5 == 16)
  {
    uint64_t v8 = *((unsigned int *)a2 + 8);
    if (v8 >= 0x41)
    {
      int v103 = 0;
      int64_t v104 = (unint64_t)(v8 + 63) >> 6;
      do
      {
        BOOL v24 = v104-- < 1;
        if (v24) {
          break;
        }
        unint64_t v105 = *(void *)(*((void *)a2 + 3) + 8 * v104);
        v103 += __clz(v105);
      }
      while (!v105);
      int v106 = v8 | 0xFFFFFFC0;
      if ((v8 & 0x3F) == 0) {
        int v106 = 0;
      }
      if (v103 + v106 != v8) {
        goto LABEL_6;
      }
    }
    else if (*((void *)a2 + 3))
    {
      goto LABEL_6;
    }
  }
  else if (v5 == 17)
  {
    this = (llvm *)sub_1CB844168((uint64_t)a2, 0.0);
    if ((this & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if ((v5 - 18) >= 3 && v5 != 13)
  {
    goto LABEL_6;
  }
  int v28 = *((unsigned __int8 *)v4 + 8);
  if (v28 != 10 && v6 != 50 && v28 != 11) {
    goto LABEL_63;
  }
LABEL_6:
  int v9 = *((unsigned __int8 *)a2 + 16);
  if (v9 == 5)
  {
    this = (llvm *)*((unsigned __int16 *)a2 + 9);
    if ((this - 38) <= 0xC)
    {
      this = (llvm *)llvm::CastInst::isEliminableCastPair((uint64_t)this, (uint64_t)v6, **((llvm::Type *****)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)), *(llvm::Type **)a2, (uint64_t)v4, 0, (llvm::Type *)(**(void **)v4 + 1984), 0);
      if (this)
      {
        int v54 = (llvm::ConstantExpr *)*((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
        return llvm::ConstantExpr::getCast(this, v54, (llvm::Constant ***)v4, 0);
      }
    }
    else if (v6 != 50 {
           && this == 34
    }
           && *((unsigned __int8 *)a2 + 17) <= 3u
           && (*(_DWORD *)(*(void *)a2 + 8) & 0xFE) != 0x12)
    {
      int v17 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
      uint64_t v18 = 1;
      if (v17 != 1)
      {
        uint64_t v19 = 1;
        do
        {
          this = (llvm *)*((void *)a2 + 4 * v19 + -4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
          unsigned int v20 = *((unsigned __int8 *)this + 16);
          if (this) {
            BOOL v21 = v20 == 16;
          }
          else {
            BOOL v21 = 0;
          }
          if (v21)
          {
            uint64_t v22 = *((unsigned int *)this + 8);
            if (v22 >= 0x41)
            {
              int v120 = 0;
              int64_t v121 = (unint64_t)(v22 + 63) >> 6;
              do
              {
                BOOL v24 = v121-- < 1;
                if (v24) {
                  break;
                }
                unint64_t v122 = *(void *)(*((void *)this + 3) + 8 * v121);
                v120 += __clz(v122);
              }
              while (!v122);
              int v123 = v22 | 0xFFFFFFC0;
              if ((v22 & 0x3F) == 0) {
                int v123 = 0;
              }
              if (v120 + v123 != v22) {
                goto LABEL_53;
              }
            }
            else if (*((void *)this + 3))
            {
              goto LABEL_53;
            }
          }
          else
          {
            if (this) {
              BOOL v23 = v20 == 17;
            }
            else {
              BOOL v23 = 0;
            }
            if (v23)
            {
              this = (llvm *)sub_1CB844168((uint64_t)this, 0.0);
              if ((this & 1) == 0) {
                goto LABEL_53;
              }
            }
            else
            {
              BOOL v24 = v20 > 0x14;
              int v25 = (1 << v20) & 0x1C2000;
              if (v24 || v25 == 0) {
                goto LABEL_53;
              }
            }
          }
          ++v19;
        }
        while (v17 != v19);
        uint64_t v18 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
      }
      int v69 = (llvm::ConstantExpr *)*((void *)a2 - 4 * v18);
      return llvm::ConstantExpr::getPointerCast(v69, v4, a3);
    }
LABEL_53:
    int v9 = *((unsigned __int8 *)a2 + 16);
  }
  BOOL v10 = v9 == 15 || v9 == 10;
  if (!v10 || (*((_DWORD *)v4 + 2) & 0xFE) != 0x12 || *((_DWORD *)v4 + 8) != *(_DWORD *)(*(void *)a2 + 32))
  {
    NullValue = 0;
    switch((int)v6)
    {
      case '\'':
        if (v9 != 16) {
          return 0;
        }
        unint64_t v30 = *((unsigned int *)v4 + 2);
        int v31 = (unint64_t *)((char *)a2 + 24);
        unsigned int v32 = **(llvm::ConstantInt ***)a2;
        if (v30 >> 8 <= 0x40)
        {
          unint64_t v33 = *v31;
          LODWORD(v155) = v30 >> 8;
          if (v30 <= 0xFF) {
            unint64_t v34 = 0;
          }
          else {
            unint64_t v34 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v30);
          }
          uint64_t v35 = (void *)(v34 & v33);
          goto LABEL_72;
        }
        if (*((_DWORD *)a2 + 8) != (v30 >> 8)) {
          operator new[]();
        }
        goto LABEL_333;
      case '(':
        if (v9 != 16) {
          return 0;
        }
        unsigned int v55 = *((_DWORD *)v4 + 2) >> 8;
        unsigned int v32 = **(llvm::ConstantInt ***)a2;
        llvm::APInt::sext((uint64_t)a2 + 24, v55, (uint64_t)&v154);
        goto LABEL_73;
      case ')':
      case '*':
        if (v9 != 17) {
          return 0;
        }
        LOBYTE(v148) = 0;
        BOOL v75 = v6 == 41;
        LODWORD(v155) = *((_DWORD *)v4 + 2) >> 8;
        if (v155 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v154);
        }
        unsigned int v154 = 0;
        BYTE4(v155) = v75;
        if (llvm::APFloat::convertToInteger((uint64_t)a2 + 24, (uint64_t)&v154, 0, &v148) != 1)
        {
          unsigned int v36 = **(llvm::ConstantInt ***)a2;
          goto LABEL_74;
        }
        uint64_t v37 = (llvm::Constant **)llvm::PoisonValue::get(v4, v76);
        goto LABEL_75;
      case '+':
      case ',':
        if (v9 != 16) {
          return 0;
        }
        if (*((unsigned char *)v4 + 8) == 2)
        {
          uint64_t v70 = &unk_1CFB2E308;
        }
        else
        {
          uint64_t v70 = &unk_1CFB2E2E0;
          switch(*((unsigned char *)v4 + 8))
          {
            case 1:
              uint64_t v70 = &unk_1CFB2E2F4;
              goto LABEL_185;
            case 2:
              goto LABEL_337;
            case 3:
              uint64_t v70 = &unk_1CFB2E31C;
              goto LABEL_185;
            case 4:
              uint64_t v146 = llvm::APFloatBase::x87DoubleExtended(this);
              break;
            case 5:
              uint64_t v146 = llvm::APFloatBase::IEEEquad(this);
              break;
            case 6:
              uint64_t v70 = &unk_1CFB2E344;
              goto LABEL_185;
            default:
              goto LABEL_185;
          }
          uint64_t v70 = v146;
        }
LABEL_185:
        unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v4);
        if (v71 == 1) {
        LODWORD(v149) = PrimitiveSizeInBits;
        }
        if (PrimitiveSizeInBits > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v148);
        }
        int v148 = 0;
        if (v70 == &unk_1CFB2E344) {
          llvm::detail::DoubleAPFloat::DoubleAPFloat(&v155, &unk_1CFB2E344, &v148);
        }
        else {
          llvm::detail::IEEEFloat::initFromAPInt((llvm::detail::IEEEFloat *)&v155, v70, &v148);
        }
        if (v149 >= 0x41 && v148) {
          MEMORY[0x1D25D9CB0](v148, 0x1000C8000313F17);
        }
        sub_1CBA62404((uint64_t)&v154, (uint64_t)a2 + 24, v6 == 44, 1);
        NullValue = (llvm::Constant **)llvm::ConstantFP::get(**(llvm::ConstantFP ***)a2, (llvm::LLVMContext *)&v154, v73);
        uint64_t v74 = v155;
        if ((_UNKNOWN *)v155 != &unk_1CFB2E344) {
          goto LABEL_192;
        }
        goto LABEL_245;
      case '-':
      case '.':
        if (v9 != 17) {
          return 0;
        }
        uint64_t v78 = *((void *)a2 + 4);
        if ((_UNKNOWN *)v78 == &unk_1CFB2E344)
        {
          this = (llvm *)llvm::detail::DoubleAPFloat::DoubleAPFloat(&v155, (llvm::detail::IEEEFloat *)((char *)a2 + 32));
        }
        else
        {
          uint64_t v155 = *((void *)a2 + 4);
          if ((*(_DWORD *)(v78 + 8) + 64) >= 0x80) {
            operator new[]();
          }
          char v79 = *((unsigned char *)a2 + 52);
          int v80 = v79 & 7;
          char v158 = v79 & 0xF;
          int v157 = *((_DWORD *)a2 + 12);
          BOOL v82 = (v79 & 6) != 0 && v80 != 3;
          if (v80 == 1 || v82)
          {
            uint64_t v83 = *(unsigned int *)(v78 + 8);
            if ((v83 - 64) <= 0xFFFFFF7F) {
              std::string::size_type v84 = (uint64_t *)this;
            }
            else {
              std::string::size_type v84 = (uint64_t *)&v156;
            }
            char v85 = (uint64_t *)((char *)a2 + 40);
            if ((*(_DWORD *)(*((void *)a2 + 4) + 8) - 64) < 0xFFFFFF80) {
              char v85 = (uint64_t *)*((void *)a2 + 5);
            }
            if (v83 <= 0xFFFFFFBF)
            {
              unint64_t v86 = (unint64_t)(v83 + 64) >> 6;
              do
              {
                uint64_t v87 = *v85++;
                *v84++ = v87;
                --v86;
              }
              while (v86);
            }
          }
        }
        int v88 = *((unsigned __int8 *)v4 + 8);
        size_t v4 = (llvm::Constant *)&unk_1CFB2E344;
        char v89 = &unk_1CFB2E344;
        switch(v88)
        {
          case 0:
            char v89 = &unk_1CFB2E2E0;
            break;
          case 1:
            goto LABEL_338;
          case 2:
            char v89 = &unk_1CFB2E308;
            break;
          case 3:
            char v89 = &unk_1CFB2E31C;
            break;
          case 4:
            uint64_t v145 = llvm::APFloatBase::x87DoubleExtended(this);
            goto LABEL_352;
          case 5:
            uint64_t v145 = llvm::APFloatBase::IEEEquad(this);
LABEL_352:
            char v89 = v145;
            break;
          case 6:
            break;
          default:
            char v89 = &unk_1CFB2E394;
            break;
        }
LABEL_244:
        llvm::APFloat::convert((uint64_t)&v154, v89, 1, &v148);
        NullValue = (llvm::Constant **)llvm::ConstantFP::get(**(llvm::ConstantFP ***)a2, (llvm::LLVMContext *)&v154, v90);
        uint64_t v74 = v155;
        if ((llvm::Constant *)v155 == v4) {
          goto LABEL_245;
        }
LABEL_192:
        if ((*(_DWORD *)(v74 + 8) - 64) > 0xFFFFFF7F) {
          return (llvm::detail::IEEEFloat *)NullValue;
        }
        int v38 = v156;
        if (!v156) {
          return (llvm::detail::IEEEFloat *)NullValue;
        }
        goto LABEL_77;
      case '/':
        if (v9 != 16)
        {
          if (v9 == 17)
          {
            if ((sub_1CB844168((uint64_t)a2, 0.0) & 1) == 0) {
              return 0;
            }
          }
          else if ((v9 - 18) >= 3 && v9 != 13)
          {
            return 0;
          }
          goto LABEL_177;
        }
        uint64_t v46 = *((unsigned int *)a2 + 8);
        if (v46 < 0x41)
        {
          if (*((void *)a2 + 3)) {
            return 0;
          }
          goto LABEL_177;
        }
        int v131 = 0;
        int64_t v132 = (unint64_t)(v46 + 63) >> 6;
        do
        {
          BOOL v24 = v132-- < 1;
          if (v24) {
            break;
          }
          unint64_t v133 = *(void *)(*((void *)a2 + 3) + 8 * v132);
          v131 += __clz(v133);
        }
        while (!v133);
        int v134 = v46 | 0xFFFFFFC0;
        if ((v46 & 0x3F) == 0) {
          int v134 = 0;
        }
        if (v131 + v134 == v46)
        {
LABEL_177:
          return (llvm::detail::IEEEFloat *)llvm::ConstantInt::get(v4, 0, 0);
        }
        return 0;
      case '0':
        if (v9 != 16)
        {
          if (v9 == 17)
          {
            if ((sub_1CB844168((uint64_t)a2, 0.0) & 1) == 0) {
              return 0;
            }
          }
          else if ((v9 - 18) >= 3 && v9 != 13)
          {
            return 0;
          }
          goto LABEL_166;
        }
        uint64_t v40 = *((unsigned int *)a2 + 8);
        if (v40 < 0x41)
        {
          if (*((void *)a2 + 3)) {
            return 0;
          }
          goto LABEL_166;
        }
        int v124 = 0;
        int64_t v125 = (unint64_t)(v40 + 63) >> 6;
        do
        {
          BOOL v24 = v125-- < 1;
          if (v24) {
            break;
          }
          unint64_t v126 = *(void *)(*((void *)a2 + 3) + 8 * v125);
          v124 += __clz(v126);
        }
        while (!v126);
        int v127 = v40 | 0xFFFFFFC0;
        if ((v40 & 0x3F) == 0) {
          int v127 = 0;
        }
        if (v124 + v127 == v40)
        {
LABEL_166:
          return (llvm::detail::IEEEFloat *)llvm::ConstantPointerNull::get(v4, a2);
        }
        return 0;
      case '1':
        BOOL v147 = (llvm::FixedVectorType **)a2;
        uint64_t v12 = *(void *)a2;
        if (*(llvm::Constant **)a2 == v4) {
          return a2;
        }
        if (!v12 || *(_DWORD *)(v12 + 8) != 15) {
          goto LABEL_22;
        }
        BOOL v13 = (*((_DWORD *)v4 + 2) ^ *(_DWORD *)(v12 + 8)) > 0xFF || v4 == 0;
        BOOL v14 = !v13 && *((_DWORD *)v4 + 2) == 15;
        if (!v14 || !*(void *)(v12 + 24) || !*((void *)v4 + 3)) {
          goto LABEL_22;
        }
        this = **(llvm ***)(v12 + 16);
        unsigned int v47 = *((unsigned __int8 *)this + 8);
        if (v47 > 0x11) {
          goto LABEL_213;
        }
        if (((1 << v47) & 0xAC7F) != 0) {
          goto LABEL_105;
        }
        if (((1 << v47) & 0x30000) != 0) {
          goto LABEL_196;
        }
LABEL_213:
        if ((v47 & 0xFE) != 0x12 && v47 != 21) {
          goto LABEL_22;
        }
LABEL_196:
        this = (llvm *)llvm::Type::isSizedDerivedType((uint64_t)this, 0);
        if (!this) {
          goto LABEL_22;
        }
LABEL_105:
        unsigned int v154 = &v156;
        uint64_t v155 = 0x800000000;
        NullValue = (llvm::Constant **)llvm::Constant::getNullValue((llvm::Constant *)(**(void **)v4 + 1960), a2, a3);
        unsigned int v156 = NullValue;
        unsigned int v48 = 1;
        LODWORD(v155) = 1;
        uint64_t v49 = **(void **)(v12 + 16);
        while (2)
        {
          uint64_t v50 = (uint64_t *)*((void *)v4 + 2);
          if (v49 && v49 != *v50)
          {
            int v51 = *(_DWORD *)(v49 + 8);
            if (v51 != 17)
            {
              if (v51 == 16)
              {
                if (!*(_DWORD *)(v49 + 12)) {
                  goto LABEL_111;
                }
                uint64_t v52 = *(uint64_t **)(v49 + 16);
LABEL_115:
                uint64_t v49 = *v52;
                goto LABEL_112;
              }
              if ((v51 & 0xFE) != 0x12)
              {
LABEL_111:
                uint64_t v49 = 0;
LABEL_112:
                if (v48 >= HIDWORD(v155)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v154 + v48) = NullValue;
                unsigned int v48 = v155 + 1;
                LODWORD(v155) = v155 + 1;
                continue;
              }
            }
            uint64_t v52 = (uint64_t *)(v49 + 24);
            goto LABEL_115;
          }
          break;
        }
        uint64_t v58 = *v50;
        if (v49 == *v50) {
          NullValue = (llvm::Constant **)llvm::ConstantExpr::getGetElementPtr(**(void **)(v12 + 16), (uint64_t *)a2, (uint64_t)v154, v48, 1, 0, 0);
        }
        this = (llvm *)v154;
        if (v154 != &v156) {
          free(v154);
        }
        if (v49 == v58) {
          return (llvm::detail::IEEEFloat *)NullValue;
        }
LABEL_22:
        if (v4 && (*((_DWORD *)v4 + 2) & 0xFE) == 0x12)
        {
          int v15 = *((unsigned __int8 *)a2 + 16);
          if (*(void *)a2 && (*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12)
          {
            if (v15 == 13) {
              return llvm::Constant::getNullValue(v4, a2, a3);
            }
            if (llvm::Constant::isAllOnesValue(a2)) {
              return (llvm::detail::IEEEFloat *)llvm::Constant::getAllOnesValue(v4, a2, a3);
            }
            int v62 = *((unsigned __int8 *)a2 + 16);
            if (v62 == 16)
            {
              uint64_t v63 = *((unsigned int *)a2 + 8);
              if (v63 >= 0x41)
              {
                int v135 = 0;
                int64_t v136 = (unint64_t)(v63 + 63) >> 6;
                do
                {
                  BOOL v24 = v136-- < 1;
                  if (v24) {
                    break;
                  }
                  unint64_t v137 = *(void *)(*((void *)a2 + 3) + 8 * v136);
                  v135 += __clz(v137);
                }
                while (!v137);
                int v138 = v63 | 0xFFFFFFC0;
                if ((v63 & 0x3F) == 0) {
                  int v138 = 0;
                }
                if (v135 + v138 == v63) {
                  return llvm::Constant::getNullValue(v4, a2, a3);
                }
              }
              else if (!*((void *)a2 + 3))
              {
                return llvm::Constant::getNullValue(v4, a2, a3);
              }
            }
            else if (v62 == 17)
            {
              if (sub_1CB844168((uint64_t)a2, 0.0)) {
                return llvm::Constant::getNullValue(v4, a2, a3);
              }
            }
            else if ((v62 - 18) < 3 || v62 == 13)
            {
              return llvm::Constant::getNullValue(v4, a2, a3);
            }
            if (*((unsigned char *)v4 + 8) != 19)
            {
              uint64_t v64 = *((unsigned int *)v4 + 8);
              if (v64 == *(_DWORD *)(*(void *)a2 + 32))
              {
                uint64_t v65 = *((void *)v4 + 3);
                SplatValue = llvm::Constant::getSplatValue(a2, 0);
                if (!SplatValue)
                {
                  unsigned int v154 = &v156;
                  uint64_t v155 = 0x1000000000;
                  if (v64)
                  {
                    unint64_t v91 = 0;
                    BOOL v92 = (llvm::ConstantInt *)(***(void ***)a2 + 1960);
                    do
                    {
                      uint64_t v93 = (llvm::Constant *)llvm::ConstantInt::get(v92, v91, 0);
                      ElementInstructioint n = llvm::ConstantFoldExtractElementInstruction(a2, v93, v94);
                      if (!ElementInstruction)
                      {
                        BOOL v139 = *(void ***)a2;
                        uint64_t v140 = *(void *)(*(void *)a2 + 24);
                        if (v140)
                        {
                          BOOL v159 = a2;
                          int v160 = v93;
                          uint64_t v141 = **v139 + 1512;
                          LODWORD(v148) = 61;
                          BOOL v149 = &v159;
                          uint64_t v150 = 2;
                          long long v151 = 0u;
                          long long v152 = 0u;
                          uint64_t v153 = 0;
                          ElementInstructioint n = (void *)sub_1CC56C20C(v141, v140, (unsigned __int8 *)&v148);
                        }
                        else
                        {
                          ElementInstructioint n = 0;
                        }
                      }
                      if (*ElementInstruction != v65) {
                        ElementInstructioint n = (void *)sub_1CC56C0C0(49, ElementInstruction);
                      }
                      if (v155 >= (unint64_t)HIDWORD(v155)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((void *)v154 + v155) = ElementInstruction;
                      uint64_t v96 = (llvm::Type *)(v155 + 1);
                      LODWORD(v155) = v155 + 1;
                      ++v91;
                    }
                    while (v64 != v91);
                    BOOL v97 = (llvm::FixedVectorType ***)v154;
                  }
                  else
                  {
                    uint64_t v96 = 0;
                    BOOL v97 = &v156;
                  }
                  NullValue = (llvm::Constant **)llvm::ConstantVector::getImpl(v97, (llvm::Type *)v96);
                  if (NullValue) {
                    goto LABEL_257;
                  }
                  llvm::FixedVectorType::get(**v97, v96);
                  uint64_t v99 = (uint64_t)v98;
                  uint64_t v100 = **v98 + 1288;
                  BOOL v101 = v97;
                  uint64_t v102 = v96;
                  goto LABEL_256;
                }
                uint64_t v67 = (uint64_t)SplatValue;
                int v68 = (llvm::Type *)(*((unsigned int *)v4 + 8) | ((unint64_t)(*((unsigned char *)v4 + 8) == 19) << 32));
                if (*SplatValue != v65) {
                  uint64_t v67 = sub_1CC56C0C0(49, SplatValue);
                }
                return llvm::ConstantVector::getSplat(v68, v67);
              }
            }
            return 0;
          }
          if ((v15 & 0xFE) == 0x10)
          {
            NullValue = (llvm::Constant **)llvm::ConstantVector::getImpl(&v147, (llvm::Type *)1);
            if (!NullValue)
            {
              llvm::FixedVectorType::get(*v147, (llvm::Type *)1);
              NullValue = (llvm::Constant **)sub_1CC56A4DC(**v53 + 1288, (uint64_t)v53, &v147, 1);
            }
            if (*NullValue == v4) {
              return (llvm::detail::IEEEFloat *)NullValue;
            }
            return (llvm::detail::IEEEFloat *)sub_1CC56C0C0(49, NullValue);
          }
        }
        else
        {
          int v15 = *((unsigned __int8 *)a2 + 16);
        }
        unsigned int v39 = *((_DWORD *)v4 + 2);
        switch(v15)
        {
          case 16:
            if (v39 == 13) {
              return a2;
            }
            if (v39 > 5) {
              return 0;
            }
            size_t v4 = *(llvm::Constant **)v4;
            if (v39 == 2)
            {
              char v59 = &unk_1CFB2E308;
LABEL_148:
              size_t v60 = (const llvm::APInt **)((char *)a2 + 24);
LABEL_149:
              llvm::detail::IEEEFloat::initFromAPInt((llvm::detail::IEEEFloat *)&v155, v59, v60);
            }
            else
            {
              char v59 = &unk_1CFB2E2E0;
              switch(v39)
              {
                case 1u:
                  char v59 = &unk_1CFB2E2F4;
                  goto LABEL_148;
                case 2u:
LABEL_337:
                  __break(1u);
LABEL_338:
                  char v89 = &unk_1CFB2E2F4;
                  goto LABEL_244;
                case 3u:
                  char v59 = &unk_1CFB2E31C;
                  goto LABEL_148;
                case 4u:
                  uint64_t v144 = llvm::APFloatBase::x87DoubleExtended(this);
                  goto LABEL_342;
                case 5u:
                  uint64_t v144 = llvm::APFloatBase::IEEEquad(this);
LABEL_342:
                  char v59 = v144;
                  size_t v60 = (const llvm::APInt **)((char *)a2 + 24);
                  if (v144 == &unk_1CFB2E344) {
                    goto LABEL_345;
                  }
                  goto LABEL_149;
                case 6u:
                  size_t v60 = (const llvm::APInt **)((char *)a2 + 24);
LABEL_345:
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(&v155, &unk_1CFB2E344, v60);
                  break;
                default:
                  goto LABEL_148;
              }
            }
            NullValue = (llvm::Constant **)llvm::ConstantFP::get(v4, (llvm::LLVMContext *)&v154, v61);
            if ((_UNKNOWN *)v155 == &unk_1CFB2E344)
            {
LABEL_245:
              sub_1CB845718((uint64_t *)&v156);
              return (llvm::detail::IEEEFloat *)NullValue;
            }
            if ((*(_DWORD *)(v155 + 8) - 64) > 0xFFFFFF7F) {
              return (llvm::detail::IEEEFloat *)NullValue;
            }
            int v38 = v156;
            if (!v156) {
              return (llvm::detail::IEEEFloat *)NullValue;
            }
            break;
          case 17:
            NullValue = 0;
            if (v39 != 13 || *(unsigned char *)(*(void *)a2 + 8) == 6) {
              return (llvm::detail::IEEEFloat *)NullValue;
            }
            unsigned int v32 = **(llvm::ConstantInt ***)a2;
            uint64_t v57 = (void *)*((void *)a2 + 4);
            uint64_t v56 = (llvm::detail::IEEEFloat *)((char *)a2 + 32);
            if (v57 == &unk_1CFB2E344) {
              llvm::detail::DoubleAPFloat::bitcastToAPInt(v56, (llvm::APInt *)&v154);
            }
            else {
              llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v56, (uint64_t)&v154);
            }
LABEL_73:
            unsigned int v36 = v32;
LABEL_74:
            uint64_t v37 = (llvm::Constant **)llvm::ConstantInt::get(v36, (llvm::LLVMContext *)&v154, a3);
LABEL_75:
            NullValue = v37;
            if (v155 < 0x41) {
              return (llvm::detail::IEEEFloat *)NullValue;
            }
            int v38 = v154;
            if (!v154) {
              return (llvm::detail::IEEEFloat *)NullValue;
            }
            break;
          case 19:
            return (llvm::detail::IEEEFloat *)llvm::ConstantPointerNull::get(v4, a2);
          default:
            return 0;
        }
LABEL_77:
        MEMORY[0x1D25D9CB0](v38, 0x1000C8000313F17);
        return (llvm::detail::IEEEFloat *)NullValue;
      case '2':
        return (llvm::detail::IEEEFloat *)NullValue;
      default:
        int v41 = *(_DWORD *)(*(void *)a2 + 8);
        if ((v41 & 0xFE) == 0x12) {
          return 0;
        }
        unint64_t v42 = *((unsigned int *)v4 + 2);
        if (v9 == 16)
        {
          unsigned int v32 = **(llvm::ConstantInt ***)a2;
          int v31 = (unint64_t *)((char *)a2 + 24);
          unsigned int v43 = *((_DWORD *)a2 + 8);
          if (v42 >> 8 > 0x40)
          {
            if (v43 != (v42 >> 8)) {
              operator new[]();
            }
LABEL_333:
            sub_1CD0463BC((uint64_t)&v154, (uint64_t)v31);
          }
          else
          {
            if (v43 >= 0x41) {
              int v31 = (unint64_t *)*v31;
            }
            unint64_t v44 = *v31;
            LODWORD(v155) = v42 >> 8;
            unint64_t v45 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v42);
            if (v42 <= 0xFF) {
              unint64_t v45 = 0;
            }
            uint64_t v35 = (void *)(v45 & v44);
LABEL_72:
            unsigned int v154 = v35;
          }
          goto LABEL_73;
        }
        if ((((unsigned __int16)v42 | (unsigned __int16)v41) & 0x700) != 0) {
          return 0;
        }
        uint64_t v16 = sub_1CC53C284((_DWORD **)a2, 0, (const llvm::APInt *)(v42 >> 11));
        if (!v16) {
          return 0;
        }
        return v16;
    }
  }
  uint64_t v107 = (llvm::Constant ***)*((void *)v4 + 3);
  uint64_t v108 = (llvm::ConstantExpr *)llvm::Constant::getSplatValue(a2, 0);
  if (!v108)
  {
    unsigned int v154 = &v156;
    uint64_t v155 = 0x1000000000;
    uint64_t v109 = *(unsigned int *)(*(void *)a2 + 32);
    if (v109)
    {
      unint64_t v110 = 0;
      char v111 = (llvm::ConstantInt *)(***(void ***)a2 + 1960);
      do
      {
        uint64_t v112 = (llvm::Constant *)llvm::ConstantInt::get(v111, v110, 0);
        BOOL v114 = (llvm::ConstantExpr *)llvm::ConstantFoldExtractElementInstruction(a2, v112, v113);
        if (!v114)
        {
          uint64_t v142 = *(void ***)a2;
          BOOL v114 = *(llvm::ConstantExpr **)(*(void *)a2 + 24);
          if (v114)
          {
            BOOL v159 = a2;
            int v160 = v112;
            uint64_t v143 = **v142 + 1512;
            LODWORD(v148) = 61;
            BOOL v149 = &v159;
            uint64_t v150 = 2;
            long long v151 = 0u;
            long long v152 = 0u;
            uint64_t v153 = 0;
            BOOL v114 = (llvm::ConstantExpr *)sub_1CC56C20C(v143, (uint64_t)v114, (unsigned __int8 *)&v148);
          }
        }
        Cast = llvm::ConstantExpr::getCast(v6, v114, v107, 0);
        if (v155 >= (unint64_t)HIDWORD(v155)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v154 + v155) = Cast;
        char v116 = (llvm::Type *)(v155 + 1);
        LODWORD(v155) = v155 + 1;
        ++v110;
      }
      while (v109 != v110);
      char v117 = v116;
      unsigned __int8 v118 = (llvm::FixedVectorType ***)v154;
    }
    else
    {
      char v117 = 0;
      unsigned __int8 v118 = &v156;
    }
    NullValue = (llvm::Constant **)llvm::ConstantVector::getImpl(v118, (llvm::Type *)v117);
    if (NullValue) {
      goto LABEL_257;
    }
    llvm::FixedVectorType::get(**v118, v117);
    uint64_t v99 = (uint64_t)v119;
    uint64_t v100 = **v119 + 1288;
    BOOL v101 = v118;
    uint64_t v102 = v117;
LABEL_256:
    NullValue = (llvm::Constant **)sub_1CC56A4DC(v100, v99, v101, v102);
LABEL_257:
    if (v154 != &v156) {
      free(v154);
    }
    return (llvm::detail::IEEEFloat *)NullValue;
  }
  uint64_t v128 = *((unsigned int *)v4 + 8);
  uint64_t v129 = *((unsigned __int8 *)v4 + 8) == 19;
  int v130 = llvm::ConstantExpr::getCast(v6, v108, v107, 0);

  return llvm::ConstantVector::getSplat((llvm::Type *)(v128 | (v129 << 32)), (uint64_t)v130);
}

const llvm::detail::DoubleAPFloat *sub_1CC53C284(_DWORD **LShr, uint64_t a2, const llvm::APInt *a3)
{
  unint64_t v6 = (8 * a2);
  uint64_t v7 = (llvm::LLVMContext *)(8 * a3);
  unsigned int v8 = a3 + a2;
  unsigned int v9 = 8 * (a3 + a2);
  while (1)
  {
    BOOL v10 = (llvm::ConstantInt ***)LShr;
    int v11 = *((unsigned __int8 *)LShr + 16);
    if (v11 != 5)
    {
      if (v11 != 16) {
        return 0;
      }
      unsigned int v29 = *((_DWORD *)LShr + 8);
      unsigned int v66 = v29;
      if (v29 > 0x40) {
        operator new[]();
      }
      unint64_t v30 = (unint64_t)LShr[3];
      uint64_t v65 = v10[3];
      if (a2)
      {
        if (v29 == v6)
        {
          unint64_t v30 = 0;
          uint64_t v65 = 0;
        }
        else
        {
          v30 >>= v6;
          uint64_t v65 = (llvm::ConstantInt **)v30;
        }
      }
      if (a3 > 8)
      {
        if (v29 != v7) {
          operator new[]();
        }
        sub_1CD0463BC((uint64_t)&v63, (uint64_t)&v65);
        unsigned int v29 = v66;
      }
      else
      {
        unsigned int v64 = 8 * a3;
        unint64_t v50 = 0xFFFFFFFFFFFFFFFFLL >> ((-8 * (_BYTE)a3) & 0x38);
        if (!a3) {
          unint64_t v50 = 0;
        }
        unint64_t v63 = v50 & v30;
      }
      if (v29 >= 0x41 && v65) {
        MEMORY[0x1D25D9CB0](v65, 0x1000C8000313F17);
      }
      uint64_t v65 = (llvm::ConstantInt **)v63;
      unsigned int v66 = v64;
      LShr = (_DWORD **)llvm::ConstantInt::get(**v10, (llvm::LLVMContext *)&v65, a3);
      if (v66 >= 0x41 && v65) {
        MEMORY[0x1D25D9CB0]();
      }
      return (const llvm::detail::DoubleAPFloat *)LShr;
    }
    int v12 = *((unsigned __int16 *)LShr + 9);
    if (v12 != 39) {
      break;
    }
    BOOL v13 = (llvm::ConstantInt ***)&LShr[-4 * (*((_DWORD *)LShr + 5) & 0x7FFFFFF)];
    LShr = (_DWORD **)*v13;
    BOOL v14 = **v13;
    unsigned int v15 = *((_DWORD *)v14 + 2);
    if (v6 >= v15 >> 8)
    {
      unsigned int v47 = (llvm::Constant *)llvm::IntegerType::get(**v10, (llvm::LLVMContext *)(8 * a3));
      return llvm::Constant::getNullValue(v47, v48, v49);
    }
    unsigned int v16 = v15 >> 8;
    if (!a2 && v7 == v16) {
      return (const llvm::detail::DoubleAPFloat *)LShr;
    }
    BOOL v17 = (v15 & 0x700) != 0 || v9 > v16;
    if (v17)
    {
      if (v9 < v16)
      {
        if (a2)
        {
          uint64_t v18 = (llvm::Constant *)llvm::ConstantInt::get(v14, v6, 0);
          LShr = (_DWORD **)llvm::ConstantExpr::getLShr((llvm::ConstantExpr *)LShr, v18, 0, v19);
        }
        llvm::IntegerType::get(**v10, v7);
        return (const llvm::detail::DoubleAPFloat *)sub_1CC56C0C0(38, LShr);
      }
      return 0;
    }
  }
  LShr = 0;
  switch(v12)
  {
    case 25:
      BOOL v21 = v10[-4 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF) + 4];
      if (v21) {
        BOOL v22 = *((unsigned char *)v21 + 16) == 16;
      }
      else {
        BOOL v22 = 0;
      }
      if (!v22) {
        return 0;
      }
      unsigned int v23 = *((_DWORD *)v21 + 8);
      unsigned int v66 = v23;
      if (v23 >= 0x41) {
        operator new[]();
      }
      unint64_t v24 = (unint64_t)v21[3];
      if ((v24 & 7) != 0) {
        return 0;
      }
      unint64_t v25 = v24 >> 3;
      if (v23 == 3) {
        unint64_t v26 = 0;
      }
      else {
        unint64_t v26 = v25;
      }
      if (v26 >= v8) {
        goto LABEL_81;
      }
      if (v26 > a2) {
        return 0;
      }
      int v27 = v10[-4 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF)];
      uint64_t v28 = (a2 - v26);
      return (const llvm::detail::DoubleAPFloat *)sub_1CC53C284(v27, v28, a3);
    case 26:
      int v31 = v10[-4 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF) + 4];
      if (v31) {
        BOOL v32 = *((unsigned char *)v31 + 16) == 16;
      }
      else {
        BOOL v32 = 0;
      }
      if (!v32) {
        return 0;
      }
      int v33 = *((_DWORD *)*v10 + 2) >> 11;
      unsigned int v34 = *((_DWORD *)v31 + 8);
      unsigned int v66 = v34;
      if (v34 >= 0x41) {
        operator new[]();
      }
      unint64_t v35 = (unint64_t)v31[3];
      if ((v35 & 7) != 0) {
        return 0;
      }
      unint64_t v36 = v35 >> 3;
      if (v34 == 3) {
        unint64_t v37 = 0;
      }
      else {
        unint64_t v37 = v36;
      }
      if (v37 >= (v33 - a2))
      {
LABEL_81:
        int v51 = (llvm::Constant *)llvm::IntegerType::get(**v10, v7);
        return llvm::Constant::getNullValue(v51, v52, v53);
      }
      else
      {
        if (v37 > v33 - v8) {
          return 0;
        }
        int v27 = v10[-4 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF)];
        uint64_t v28 = (v37 + a2);
        return (const llvm::detail::DoubleAPFloat *)sub_1CC53C284(v27, v28, a3);
      }
    case 28:
      uint64_t v38 = sub_1CC53C284(v10[-4 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF) + 4], a2, a3);
      LShr = (_DWORD **)v38;
      if (!v38) {
        return (const llvm::detail::DoubleAPFloat *)LShr;
      }
      int v39 = *(unsigned __int8 *)(v38 + 16);
      if (v39 == 16)
      {
        uint64_t v40 = *(unsigned int *)(v38 + 32);
        if (v40 >= 0x41)
        {
          int v59 = 0;
          int64_t v60 = (unint64_t)(v40 + 63) >> 6;
          do
          {
            BOOL v17 = v60-- < 1;
            if (v17) {
              break;
            }
            unint64_t v61 = *(void *)(*(void *)(v38 + 24) + 8 * v60);
            v59 += __clz(v61);
          }
          while (!v61);
          int v62 = v40 | 0xFFFFFFC0;
          if ((v40 & 0x3F) == 0) {
            int v62 = 0;
          }
          if (v59 + v62 == v40) {
            return (const llvm::detail::DoubleAPFloat *)LShr;
          }
        }
        else if (!*(void *)(v38 + 24))
        {
          return (const llvm::detail::DoubleAPFloat *)LShr;
        }
      }
      else if (v39 == 17)
      {
        if (sub_1CB844168(v38, 0.0)) {
          return (const llvm::detail::DoubleAPFloat *)LShr;
        }
      }
      else if ((v39 - 18) < 3 || v39 == 13)
      {
        return (const llvm::detail::DoubleAPFloat *)LShr;
      }
      int v41 = (llvm::ConstantExpr *)sub_1CC53C284(v10[-4 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF)], a2, a3);
      if (!v41) {
        return 0;
      }
      return (const llvm::detail::DoubleAPFloat *)llvm::ConstantExpr::getAnd(v41, (llvm::Constant *)LShr, v42, v43);
    case 29:
      uint64_t v44 = sub_1CC53C284(v10[-4 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF) + 4], a2, a3);
      LShr = (_DWORD **)v44;
      if (!v44) {
        return (const llvm::detail::DoubleAPFloat *)LShr;
      }
      if (*(unsigned char *)(v44 + 16) != 16) {
        goto LABEL_90;
      }
      unsigned int v45 = *(_DWORD *)(v44 + 32);
      if (!v45) {
        return (const llvm::detail::DoubleAPFloat *)LShr;
      }
      uint64_t v46 = (llvm::APInt *)(v44 + 24);
      if (v45 > 0x40)
      {
        if (llvm::APInt::countTrailingOnesSlowCase(v46) == v45) {
          return (const llvm::detail::DoubleAPFloat *)LShr;
        }
      }
      else if (*(void *)v46 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v45)
      {
        return (const llvm::detail::DoubleAPFloat *)LShr;
      }
LABEL_90:
      uint64_t v56 = (llvm::ConstantExpr *)sub_1CC53C284(v10[-4 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF)], a2, a3);
      if (!v56) {
        return 0;
      }
      double result = llvm::ConstantExpr::getOr(v56, (llvm::Constant *)LShr, v57, v58);
      break;
    default:
      return (const llvm::detail::DoubleAPFloat *)LShr;
  }
  return result;
}

llvm::Constant *llvm::ConstantFoldSelectInstruction(llvm *this, llvm::PoisonValue **a2, llvm::Constant *a3, llvm::Constant *a4)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  unsigned int v7 = *((unsigned __int8 *)this + 16);
  if (this && v7 == 16)
  {
    uint64_t v8 = *((unsigned int *)this + 8);
    if (v8 >= 0x41)
    {
      int v37 = 0;
      int64_t v38 = (unint64_t)(v8 + 63) >> 6;
      do
      {
        BOOL v11 = v38-- < 1;
        if (v11) {
          break;
        }
        unint64_t v39 = *(void *)(*((void *)this + 3) + 8 * v38);
        v37 += __clz(v39);
      }
      while (!v39);
      int v40 = v8 | 0xFFFFFFC0;
      if ((v8 & 0x3F) == 0) {
        int v40 = 0;
      }
      if (v37 + v40 == v8) {
        return a3;
      }
    }
    else if (!*((void *)this + 3))
    {
      return a3;
    }
  }
  else if (this && v7 == 17)
  {
    if (sub_1CB844168((uint64_t)this, 0.0)) {
      return a3;
    }
  }
  else
  {
    BOOL v11 = v7 > 0x14;
    int v12 = (1 << v7) & 0x1C2000;
    if (!v11 && v12 != 0) {
      return a3;
    }
  }
  if (llvm::Constant::isAllOnesValue(this)) {
    return (llvm::Constant *)a2;
  }
  int v16 = *((unsigned __int8 *)this + 16);
  if (!this || v16 != 10)
  {
LABEL_45:
    if (v16 == 12) {
      return (llvm::Constant *)llvm::PoisonValue::get(*a2, v14);
    }
    if ((v16 - 11) <= 1)
    {
      if (*((unsigned __int8 *)a2 + 16) - 11 >= 2) {
        return a3;
      }
      else {
        return (llvm::Constant *)a2;
      }
    }
    if (a2 == (llvm::PoisonValue **)a3) {
      return (llvm::Constant *)a2;
    }
    int v50 = *((unsigned __int8 *)a2 + 16);
    if (v50 == 12) {
      return a3;
    }
    int v51 = *((unsigned __int8 *)a3 + 16);
    if (v51 == 12) {
      return (llvm::Constant *)a2;
    }
    if ((v50 - 11) <= 1)
    {
      if (sub_1CC53D11C((unsigned __int8 *)a3)) {
        return a3;
      }
      int v51 = *((unsigned __int8 *)a3 + 16);
    }
    if ((v51 - 11) <= 1 && sub_1CC53D11C((unsigned __int8 *)a2)) {
      return (llvm::Constant *)a2;
    }
    if (*((unsigned char *)a2 + 16) == 5
      && *((_WORD *)a2 + 9) == 57
      && (uint64_t v52 = &a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)], *v52 == this))
    {
      int v54 = v52[4];
      unsigned int v55 = this;
      uint64_t v56 = a3;
    }
    else
    {
      if (*((unsigned char *)a3 + 16) != 5) {
        return 0;
      }
      if (*((_WORD *)a3 + 9) != 57) {
        return 0;
      }
      uint64_t v53 = (char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF);
      if (*(llvm **)v53 != this) {
        return 0;
      }
      uint64_t v56 = (llvm::Constant *)*((void *)v53 + 8);
      unsigned int v55 = this;
      int v54 = (llvm::Constant *)a2;
    }
    return (llvm::Constant *)llvm::ConstantExpr::getSelect(v55, v54, v56, 0, v15);
  }
  BOOL v17 = *(unsigned int **)this;
  unsigned int v64 = v66;
  uint64_t v65 = 0x1000000000;
  uint64_t v18 = v17[8];
  if (!v18)
  {
    unint64_t v31 = 0;
    goto LABEL_38;
  }
  unint64_t v9 = 0;
  uint64_t v19 = (llvm::ConstantInt *)(**(void **)v17 + 1960);
  while (1)
  {
    unsigned int v20 = (llvm::Constant *)llvm::ConstantInt::get(v19, v9, 0);
    ElementInstructioint n = llvm::ConstantFoldExtractElementInstruction((llvm *)a2, v20, v21);
    if (!ElementInstruction)
    {
      unsigned int v45 = *a2;
      uint64_t v46 = *((void *)*a2 + 3);
      if (v46)
      {
        uint64_t v67 = (llvm::Constant *)a2;
        int v68 = v20;
        uint64_t v47 = **(void **)v45 + 1512;
        __int16 v57 = 61;
        __int16 v58 = 0;
        int v59 = &v67;
        uint64_t v60 = 2;
        long long v61 = 0u;
        long long v62 = 0u;
        uint64_t v63 = 0;
        ElementInstructioint n = sub_1CC56C20C(v47, v46, (unsigned __int8 *)&v57);
      }
      else
      {
        ElementInstructioint n = 0;
      }
    }
    unsigned int v23 = (llvm::Constant *)llvm::ConstantInt::get(v19, v9, 0);
    uint64_t v25 = llvm::ConstantFoldExtractElementInstruction(a3, v23, v24);
    if (!v25)
    {
      unsigned int v48 = *(void ***)a3;
      BOOL v14 = *(llvm::Type **)(*(void *)a3 + 24);
      if (v14)
      {
        uint64_t v67 = a3;
        int v68 = v23;
        uint64_t v49 = **v48 + 1512;
        __int16 v57 = 61;
        __int16 v58 = 0;
        int v59 = &v67;
        uint64_t v60 = 2;
        long long v61 = 0u;
        long long v62 = 0u;
        uint64_t v63 = 0;
        uint64_t v25 = sub_1CC56C20C(v49, (uint64_t)v14, (unsigned __int8 *)&v57);
      }
      else
      {
        uint64_t v25 = 0;
      }
    }
    uint64_t v26 = *((void *)this + 4 * v9 + -4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
    int v27 = *(unsigned __int8 *)(v26 + 16);
    if (v27 == 12)
    {
      ElementInstructioint n = (uint64_t)llvm::PoisonValue::get(*(llvm::PoisonValue **)ElementInstruction, v14);
      goto LABEL_35;
    }
    if (ElementInstruction != v25) {
      break;
    }
LABEL_35:
    if (v65 >= (unint64_t)HIDWORD(v65)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v64 + v65) = ElementInstruction;
    unint64_t v31 = (v65 + 1);
    LODWORD(v65) = v65 + 1;
    if (++v9 == v18) {
      goto LABEL_37;
    }
  }
  if ((v27 - 11) <= 1)
  {
    if (*(unsigned __int8 *)(ElementInstruction + 16) - 11 >= 2) {
      ElementInstructioint n = v25;
    }
    goto LABEL_35;
  }
  if (v27 == 16)
  {
    uint64_t v28 = *(unsigned int *)(v26 + 32);
    if (v28 > 0x40)
    {
      int v41 = 0;
      int64_t v42 = (unint64_t)(v28 + 63) >> 6;
      do
      {
        BOOL v11 = v42-- < 1;
        if (v11) {
          break;
        }
        unint64_t v43 = *(void *)(*(void *)(v26 + 24) + 8 * v42);
        v41 += __clz(v43);
      }
      while (!v43);
      int v44 = v28 | 0xFFFFFFC0;
      if ((v28 & 0x3F) == 0) {
        int v44 = 0;
      }
      BOOL v29 = v41 + v44 == v28;
    }
    else
    {
      BOOL v29 = *(void *)(v26 + 24) == 0;
    }
    if (v29) {
      ElementInstructioint n = v25;
    }
    goto LABEL_35;
  }
  unint64_t v31 = v65;
LABEL_37:
  if (v31 == v17[8])
  {
LABEL_38:
    BOOL v32 = (llvm::FixedVectorType ***)v64;
    uint64_t Impl = (uint64_t)llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)v64, (llvm::Type *)v31);
    if (!Impl)
    {
      llvm::FixedVectorType::get(**v32, (llvm::Type *)v31);
      uint64_t Impl = sub_1CC56A4DC(**v34 + 1288, (uint64_t)v34, v32, v31);
    }
    unint64_t v9 = Impl;
    char v35 = 1;
  }
  else
  {
    char v35 = 0;
  }
  if (v64 != v66) {
    free(v64);
  }
  if ((v35 & 1) == 0)
  {
    int v16 = *((unsigned __int8 *)this + 16);
    goto LABEL_45;
  }
  return (llvm::Constant *)v9;
}

BOOL sub_1CC53D11C(unsigned __int8 *a1)
{
  unsigned int v2 = a1[16];
  if (v2 < 0x14 && ((0xB1029u >> v2) & 1) != 0) {
    return (0xB0009u >> v2) & 1;
  }
  if ((*(_DWORD *)(*(void *)a1 + 8) & 0xFE) == 0x12
    && (llvm::Constant::containsPoisonElement((llvm::Constant *)a1) & 1) == 0)
  {
    return !llvm::Constant::containsConstantExpression((llvm::Constant *)a1);
  }
  return 0;
}

void *llvm::ConstantFoldExtractElementInstruction(llvm *this, llvm::Constant *a2, llvm::Constant *a3)
{
  v61[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)this;
  int v4 = *((unsigned __int8 *)this + 16);
  if (v4 == 12) {
    goto LABEL_3;
  }
  int v6 = *((unsigned __int8 *)a2 + 16);
  if ((v6 - 11) <= 1) {
    goto LABEL_3;
  }
  if ((v4 - 11) > 1)
  {
    if (v6 != 16) {
      return 0;
    }
    if (*(unsigned char *)(v3 + 8) == 18 && v3 != 0)
    {
      int v12 = (void *)((char *)a2 + 24);
      uint64_t v13 = *((unsigned int *)a2 + 8);
      if (v13 >= 0x41)
      {
        int v14 = 0;
        int64_t v15 = (unint64_t)(v13 + 63) >> 6;
        do
        {
          BOOL v16 = v15-- < 1;
          if (v16) {
            break;
          }
          unint64_t v17 = *(void *)(*v12 + 8 * v15);
          v14 += __clz(v17);
        }
        while (!v17);
        int v18 = v13 | 0xFFFFFFC0;
        if ((v13 & 0x3F) == 0) {
          int v18 = 0;
        }
        if ((v13 - v14 - v18) > 0x40) {
          goto LABEL_3;
        }
        int v12 = (void *)*v12;
      }
      if (*v12 >= (unint64_t)*(unsigned int *)(v3 + 32))
      {
LABEL_3:
        unsigned int v7 = *(llvm::PoisonValue **)(v3 + 24);
        return llvm::PoisonValue::get(v7, a2);
      }
    }
    if (v4 == 5)
    {
      int v19 = *((unsigned __int16 *)this + 9);
      if (v19 == 62)
      {
        uint64_t v29 = ((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[8];
        if (v29) {
          BOOL v30 = *(unsigned char *)(v29 + 16) == 16;
        }
        else {
          BOOL v30 = 0;
        }
        if (v30)
        {
          if (*(_DWORD *)(v29 + 32) > 0x40u) {
            operator new[]();
          }
          int v37 = *(void **)(v29 + 24);
          LODWORD(v50) = *(_DWORD *)(v29 + 32);
          uint64_t v49 = v37;
          BYTE4(v50) = 1;
          if (*((_DWORD *)a2 + 8) > 0x40u) {
            operator new[]();
          }
          int v40 = (llvm *)*((void *)a2 + 3);
          LODWORD(v56) = *((_DWORD *)a2 + 8);
          unsigned int v55 = v40;
          BYTE4(v56) = 1;
          int v41 = sub_1CC19EE98((uint64_t)&v49, (uint64_t)&v55);
          int v43 = v41;
          if (v56 >= 0x41 && v55) {
            MEMORY[0x1D25D9CB0](v55, 0x1000C8000313F17);
          }
          if (v50 >= 0x41 && v49) {
            MEMORY[0x1D25D9CB0](v49, 0x1000C8000313F17);
          }
          int v44 = (char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
          if (!v43) {
            return (void *)*((void *)v44 + 4);
          }
          unsigned int v45 = *(llvm **)v44;
          ElementInstructioint n = llvm::ConstantFoldExtractElementInstruction(*(llvm **)v44, a2, v42);
          if (!ElementInstruction)
          {
            uint64_t v46 = *(void ***)v45;
            uint64_t v47 = *(void *)(*(void *)v45 + 24);
            if (v47)
            {
              unsigned int v55 = v45;
              uint64_t v56 = a2;
              uint64_t v48 = **v46 + 1512;
              LODWORD(v49) = 61;
              uint64_t v50 = (uint64_t)&v55;
              uint64_t v51 = 2;
              long long v52 = 0u;
              long long v53 = 0u;
              uint64_t v54 = 0;
              return (void *)sub_1CC56C20C(v48, v47, (unsigned __int8 *)&v49);
            }
            return 0;
          }
          return (void *)ElementInstruction;
        }
      }
      else if (v19 == 34)
      {
        uint64_t v49 = &v51;
        uint64_t v50 = 0x800000000;
        int v20 = *((_DWORD *)this + 5);
        BOOL v21 = (llvm::Constant *)(v20 & 0x7FFFFFF);
        if ((v20 & 0x7FFFFFFu) >= 9) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v22 = v20 & 0x7FFFFFF;
        if ((v20 & 0x7FFFFFF) != 0)
        {
          unsigned int v23 = this;
          while (1)
          {
            ElementInstructioint n = *((void *)v23 - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
            if ((*(_DWORD *)(*(void *)ElementInstruction + 8) & 0xFE) == 0x12)
            {
              uint64_t v25 = llvm::ConstantFoldExtractElementInstruction(*((llvm **)v23 - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)), a2, v21);
              if (v25)
              {
                ElementInstructioint n = v25;
              }
              else
              {
                uint64_t v27 = *(void *)(*(void *)ElementInstruction + 24);
                if (!v27)
                {
                  ElementInstructioint n = 0;
                  goto LABEL_64;
                }
                v61[0] = ElementInstruction;
                v61[1] = a2;
                uint64_t v28 = ***(void ***)ElementInstruction + 1512;
                LODWORD(v55) = 61;
                uint64_t v56 = (llvm::Constant *)v61;
                uint64_t v57 = 2;
                long long v58 = 0u;
                long long v59 = 0u;
                uint64_t v60 = 0;
                ElementInstructioint n = sub_1CC56C20C(v28, v27, (unsigned __int8 *)&v55);
                if (!ElementInstruction) {
                  goto LABEL_64;
                }
              }
            }
            if (v50 >= (unint64_t)HIDWORD(v50)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v49 + v50) = ElementInstruction;
            unsigned int v26 = v50 + 1;
            LODWORD(v50) = v50 + 1;
            unsigned int v23 = (llvm *)((char *)v23 + 32);
            if (!--v22) {
              goto LABEL_61;
            }
          }
        }
        unsigned int v26 = v50;
LABEL_61:
        uint64_t v38 = v26;
        uint64_t v39 = 24;
        if (*((unsigned char *)this + 16) == 62) {
          uint64_t v39 = 64;
        }
        ElementInstructioint n = (uint64_t)llvm::ConstantExpr::getWithOperands(this, (llvm::ConstantExpr **)v49, v38, *(llvm::Constant ****)(v3 + 24), 0, *(llvm::Type **)((char *)this + v39));
LABEL_64:
        if (v49 != &v51) {
          free(v49);
        }
        return (void *)ElementInstruction;
      }
    }
    ElementInstructioint n = (uint64_t)llvm::Constant::getAggregateElement(this, a2);
    if (!ElementInstruction)
    {
      unint64_t v31 = (void *)((char *)a2 + 24);
      uint64_t v32 = *((unsigned int *)a2 + 8);
      if (v32 < 0x41)
      {
LABEL_54:
        if (*v31 < (unint64_t)*(unsigned int *)(v3 + 32))
        {
          ElementInstructioint n = (uint64_t)llvm::Constant::getSplatValue(this, 0);
          if (ElementInstruction) {
            return (void *)ElementInstruction;
          }
        }
        return 0;
      }
      int v33 = 0;
      int64_t v34 = (unint64_t)(v32 + 63) >> 6;
      do
      {
        BOOL v16 = v34-- < 1;
        if (v16) {
          break;
        }
        unint64_t v35 = *(void *)(*v31 + 8 * v34);
        v33 += __clz(v35);
      }
      while (!v35);
      int v36 = v32 | 0xFFFFFFC0;
      if ((v32 & 0x3F) == 0) {
        int v36 = 0;
      }
      if ((v32 - v33 - v36) <= 0x40)
      {
        unint64_t v31 = (void *)*v31;
        goto LABEL_54;
      }
      return 0;
    }
    return (void *)ElementInstruction;
  }
  unint64_t v9 = *(llvm::UndefValue **)(v3 + 24);

  return (void *)llvm::UndefValue::get(v9, a2);
}

llvm *llvm::ConstantFoldInsertElementInstruction(llvm *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  uint64_t Impl = this;
  v48[2] = *MEMORY[0x1E4F143B8];
  int v5 = *((unsigned __int8 *)a3 + 16);
  if ((v5 - 11) > 1)
  {
    if (*((unsigned char *)this + 16) == 13)
    {
      unsigned int v26 = *((unsigned __int8 *)a2 + 16);
      if (a2 && v26 == 16)
      {
        uint64_t v27 = *((unsigned int *)a2 + 8);
        if (v27 >= 0x41)
        {
          int v31 = 0;
          int64_t v32 = (unint64_t)(v27 + 63) >> 6;
          do
          {
            if (v32-- < 1) {
              break;
            }
            unint64_t v34 = *(void *)(*((void *)a2 + 3) + 8 * v32);
            v31 += __clz(v34);
          }
          while (!v34);
          int v35 = v27 | 0xFFFFFFC0;
          if ((v27 & 0x3F) == 0) {
            int v35 = 0;
          }
          if (v31 + v35 == v27) {
            return Impl;
          }
        }
        else if (!*((void *)a2 + 3))
        {
          return Impl;
        }
      }
      else if (a2 && v26 == 17)
      {
        if (sub_1CB844168((uint64_t)a2, 0.0)) {
          return Impl;
        }
        int v5 = *((unsigned __int8 *)a3 + 16);
      }
      else if (v26 <= 0x14 && ((1 << v26) & 0x1C2000) != 0)
      {
        return Impl;
      }
    }
    if (v5 == 16)
    {
      uint64_t v8 = *(unsigned int **)Impl;
      if (*(unsigned char *)(*(void *)Impl + 8) != 19)
      {
        unint64_t v9 = v8[8];
        BOOL v10 = (unint64_t *)((char *)a3 + 24);
        unsigned int v11 = *((_DWORD *)a3 + 8);
        int v12 = (unint64_t *)((char *)a3 + 24);
        if (v11 >= 0x41)
        {
          int v37 = *(unsigned int **)Impl;
          int v38 = llvm::APInt::countLeadingZerosSlowCase((llvm::Constant *)((char *)a3 + 24));
          uint64_t v8 = v37;
          if (v11 - v38 > 0x40)
          {
LABEL_61:
            int v36 = (llvm::PoisonValue *)v8;
            goto LABEL_62;
          }
          int v12 = (unint64_t *)*v10;
        }
        if (*v12 < v9)
        {
          unsigned int v45 = v47;
          uint64_t v46 = 0x1000000000;
          if (v9 >= 0x11) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v11 >= 0x41) {
            BOOL v10 = (unint64_t *)*v10;
          }
          if (v9)
          {
            unint64_t v13 = 0;
            uint64_t v14 = **(void **)v8;
            int64_t v15 = (unint64_t *)*v10;
            do
            {
              if (v15 == (unint64_t *)v13)
              {
                if (v46 >= (unint64_t)HIDWORD(v46)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v45 + v46) = a2;
              }
              else
              {
                BOOL v16 = *(llvm::ConstantInt **)(v14 + 1960);
                unsigned int v17 = *(_DWORD *)(v14 + 1968);
                LODWORD(v40) = v17 >> 8;
                if (v17 >> 8 > 0x40) {
                  operator new[]();
                }
                if (v17 <= 0xFF) {
                  unint64_t v18 = 0;
                }
                else {
                  unint64_t v18 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v17) + 63);
                }
                unint64_t v39 = v18 & v13;
                int v20 = (llvm::Constant *)llvm::ConstantInt::get(v16, (llvm::LLVMContext *)&v39, a3);
                if (v40 >= 0x41 && v39) {
                  MEMORY[0x1D25D9CB0](v39, 0x1000C8000313F17);
                }
                ElementInstructioint n = (uint64_t)llvm::ConstantFoldExtractElementInstruction(Impl, v20, v19);
                if (!ElementInstruction)
                {
                  uint64_t v28 = *(unsigned int **)Impl;
                  uint64_t v29 = *(void *)(*(void *)Impl + 24);
                  if (v29)
                  {
                    v48[0] = Impl;
                    v48[1] = v20;
                    uint64_t v30 = **(void **)v28 + 1512;
                    LODWORD(v39) = 61;
                    int v40 = v48;
                    uint64_t v41 = 2;
                    long long v42 = 0u;
                    long long v43 = 0u;
                    uint64_t v44 = 0;
                    ElementInstructioint n = sub_1CC56C20C(v30, v29, (unsigned __int8 *)&v39);
                  }
                  else
                  {
                    ElementInstructioint n = 0;
                  }
                }
                if (v46 >= (unint64_t)HIDWORD(v46)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v45 + v46) = ElementInstruction;
              }
              unint64_t v22 = (v46 + 1);
              LODWORD(v46) = v46 + 1;
              ++v13;
            }
            while (v9 != v13);
          }
          else
          {
            unint64_t v22 = v46;
          }
          unsigned int v23 = (llvm::FixedVectorType ***)v45;
          uint64_t Impl = llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)v45, (llvm::Type *)v22);
          if (!Impl)
          {
            llvm::FixedVectorType::get(**v23, (llvm::Type *)v22);
            uint64_t Impl = (llvm *)sub_1CC56A4DC(**v24 + 1288, (uint64_t)v24, v23, v22);
          }
          if (v45 != v47) {
            free(v45);
          }
          return Impl;
        }
        goto LABEL_61;
      }
    }
    return 0;
  }
  int v36 = *(llvm::PoisonValue **)this;
LABEL_62:

  return (llvm *)llvm::PoisonValue::get(v36, a2);
}

void *llvm::ConstantFoldShuffleVectorInstruction(llvm *a1, llvm *a2, int *a3, llvm::Type *a4)
{
  v65[2] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)a1;
  int v6 = *(unsigned __int8 *)(*(void *)a1 + 8);
  unsigned int v7 = *(llvm::UndefValue **)(*(void *)a1 + 24);
  if (a4)
  {
    uint64_t v8 = a3;
    uint64_t v11 = 4 * (void)a4;
    uint64_t v12 = 4 * (void)a4;
    unint64_t v13 = a3;
    while (*v13 == -1)
    {
      ++v13;
      v12 -= 4;
      if (!v12) {
        goto LABEL_21;
      }
    }
    uint64_t v14 = a3;
    do
    {
      if (*v14) {
        goto LABEL_49;
      }
      ++v14;
      v11 -= 4;
    }
    while (v11);
    int64_t v15 = (llvm::Constant *)llvm::ConstantInt::get((llvm::ConstantInt *)(**(void **)v5 + 1960), 0, 0);
    ElementInstructioint n = llvm::ConstantFoldExtractElementInstruction(a1, v15, v16);
    if (!ElementInstruction)
    {
      unint64_t v34 = *(void ***)a1;
      uint64_t v35 = *(void *)(*(void *)a1 + 24);
      if (!v35)
      {
        ElementInstructioint n = 0;
        unsigned int v18 = MEMORY[0x10];
        goto LABEL_28;
      }
      long long v59 = a1;
      uint64_t v60 = v15;
      uint64_t v36 = **v34 + 1512;
      LODWORD(v53) = 61;
      uint64_t v54 = (uint64_t)&v59;
      uint64_t v55 = 2;
      long long v56 = 0u;
      long long v57 = 0u;
      uint64_t v58 = 0;
      ElementInstructioint n = sub_1CC56C20C(v36, v35, (unsigned __int8 *)&v53);
    }
    unsigned int v18 = *(unsigned __int8 *)(ElementInstruction + 16);
    if (ElementInstruction) {
      BOOL v19 = v18 == 16;
    }
    else {
      BOOL v19 = 0;
    }
    if (v19)
    {
      uint64_t v20 = *(unsigned int *)(ElementInstruction + 32);
      if (v20 >= 0x41)
      {
        int v30 = 0;
        int64_t v31 = (unint64_t)(v20 + 63) >> 6;
        do
        {
          BOOL v27 = v31-- < 1;
          if (v27) {
            break;
          }
          unint64_t v32 = *(void *)(*(void *)(ElementInstruction + 24) + 8 * v31);
          v30 += __clz(v32);
        }
        while (!v32);
        int v33 = v20 | 0xFFFFFFC0;
        if ((v20 & 0x3F) == 0) {
          int v33 = 0;
        }
        if (v30 + v33 == v20) {
          goto LABEL_15;
        }
        goto LABEL_33;
      }
      if (*(void *)(ElementInstruction + 24)) {
        goto LABEL_33;
      }
    }
    else
    {
      if (ElementInstruction) {
        BOOL v26 = v18 == 17;
      }
      else {
        BOOL v26 = 0;
      }
      if (!v26)
      {
LABEL_28:
        BOOL v27 = v18 > 0x14;
        int v28 = (1 << v18) & 0x1C2000;
        if (!v27 && v28 != 0) {
          goto LABEL_15;
        }
LABEL_33:
        if (v6 != 19)
        {
          return (void *)llvm::ConstantVector::getSplat(a4, ElementInstruction);
        }
        int v6 = *(unsigned __int8 *)(v5 + 8);
LABEL_49:
        if (v6 == 19) {
          return 0;
        }
        unsigned int v37 = *(_DWORD *)(v5 + 32);
        long long v53 = &v55;
        uint64_t v54 = 0x2000000000;
        uint64_t v38 = a4;
        if (a4)
        {
          while (1)
          {
            int v40 = (llvm::Type *)*v8++;
            unint64_t v39 = v40;
            if (v40 == -1 || v39 >= 2 * v37) {
              break;
            }
            if (v39 >= v37)
            {
              uint64_t v41 = (llvm::Constant *)llvm::ConstantInt::get((llvm::ConstantInt *)(***(void ***)a2 + 1960), v39 - v37, 0);
              uint64_t v43 = llvm::ConstantFoldExtractElementInstruction(a2, v41, v46);
              if (v43) {
                goto LABEL_55;
              }
              uint64_t v47 = *(void ***)a2;
              uint64_t v48 = *(void *)(*(void *)a2 + 24);
              if (!v48) {
                goto LABEL_75;
              }
              v65[0] = a2;
LABEL_72:
              v65[1] = v41;
              uint64_t v52 = **v47 + 1512;
              LODWORD(v59) = 61;
              uint64_t v60 = (llvm::Constant *)v65;
              uint64_t v61 = 2;
              long long v62 = 0u;
              long long v63 = 0u;
              uint64_t v64 = 0;
              uint64_t v45 = sub_1CC56C20C(v52, v48, (unsigned __int8 *)&v59);
LABEL_59:
              uint64_t v43 = v45;
              goto LABEL_55;
            }
            uint64_t v41 = (llvm::Constant *)llvm::ConstantInt::get((llvm::ConstantInt *)(***(void ***)a1 + 1960), (unint64_t)v39, 0);
            uint64_t v43 = llvm::ConstantFoldExtractElementInstruction(a1, v41, v42);
            if (!v43)
            {
              uint64_t v47 = *(void ***)a1;
              uint64_t v48 = *(void *)(*(void *)a1 + 24);
              if (!v48)
              {
LABEL_75:
                uint64_t v43 = 0;
                goto LABEL_55;
              }
              v65[0] = a1;
              goto LABEL_72;
            }
LABEL_55:
            if (v54 >= (unint64_t)HIDWORD(v54)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v53 + v54) = v43;
            uint64_t v44 = (v54 + 1);
            LODWORD(v54) = v54 + 1;
            if (!--v38)
            {
              uint64_t v49 = (llvm::FixedVectorType ***)v53;
              goto LABEL_63;
            }
          }
          uint64_t v45 = llvm::UndefValue::get(v7, v39);
          goto LABEL_59;
        }
        uint64_t v44 = 0;
        uint64_t v49 = (llvm::FixedVectorType ***)&v55;
LABEL_63:
        uint64_t Impl = (uint64_t)llvm::ConstantVector::getImpl(v49, (llvm::Type *)v44);
        if (!Impl)
        {
          llvm::FixedVectorType::get(**v49, (llvm::Type *)v44);
          uint64_t Impl = sub_1CC56A4DC(**v51 + 1288, (uint64_t)v51, v49, v44);
        }
        if (v53 != &v55) {
          free(v53);
        }
        return (void *)Impl;
      }
      if ((sub_1CB844168(ElementInstruction, 0.0) & 1) == 0) {
        goto LABEL_33;
      }
    }
LABEL_15:
    if (v6 == 19) {
      llvm::ScalableVectorType::get((uint64_t **)v7, a4);
    }
    else {
      llvm::FixedVectorType::get(v7, a4);
    }
    return llvm::ConstantAggregateZero::get(v21, v22);
  }
LABEL_21:
  llvm::VectorType::get(*(llvm::FixedVectorType **)(*(void *)a1 + 24), (llvm::Type *)(a4 | ((unint64_t)(v6 == 19) << 32)));

  return (void *)llvm::UndefValue::get(v24, v25);
}

llvm::Constant *llvm::ConstantFoldExtractValueInstruction(llvm::Constant *result, unsigned int *a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    do
    {
      double result = (llvm::Constant *)llvm::Constant::getAggregateElement(result, (llvm::Type *)*a2);
      if (!result) {
        break;
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

llvm::Value *llvm::ConstantFoldInsertValueInstruction(llvm::Constant *a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  v19[32] = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    uint64_t v7 = *(void *)a1;
    int v8 = *(unsigned __int8 *)(v7 + 8);
    if (v7) {
      BOOL v9 = v8 == 16;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9) {
      int v10 = *(_DWORD *)(v7 + 12);
    }
    else {
      int v10 = *(_DWORD *)(v7 + 32);
    }
    unsigned int v18 = 0;
    if (v10)
    {
      uint64_t v11 = 0;
      uint64_t v12 = a4 - 1;
      while (1)
      {
        AggregateElement = llvm::Constant::getAggregateElement(a1, v11);
        if (!AggregateElement) {
          return 0;
        }
        uint64_t inserted = (uint64_t)AggregateElement;
        if (v11 == *a3) {
          uint64_t inserted = llvm::ConstantFoldInsertValueInstruction(AggregateElement, a2, a3 + 1, v12);
        }
        if (v18 >= 0x20uLL) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v19[v18] = inserted;
        uint64_t v15 = ++v18;
        uint64_t v11 = (llvm::Type *)(v11 + 1);
        if (v10 == v11)
        {
          uint64_t v7 = *(void *)a1;
          int v8 = *(unsigned __int8 *)(*(void *)a1 + 8);
          goto LABEL_19;
        }
      }
    }
    else
    {
      uint64_t v15 = 0;
LABEL_19:
      if (v8 == 16) {
        return (llvm::Value *)llvm::ConstantStruct::get((llvm::PoisonValue *)v7, (llvm::Type *)v19, v15);
      }
      else {
        return llvm::ConstantArray::get((llvm::PoisonValue *)v7, (llvm::Type *)v19, v15);
      }
    }
  }
  return (llvm::Value *)a2;
}

uint64_t llvm::ConstantFoldUnaryInstruction(llvm *this, unsigned __int8 *a2, llvm::Constant *a3)
{
  uint64_t Impl = (uint64_t)a2;
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(llvm::ConstantFP ***)a2;
  int v6 = *(_DWORD *)(*(void *)a2 + 8);
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) != 0x12 || v6 == 19)
  {
    int v9 = a2[16];
    BOOL v8 = this == 12;
    if (this == 12 && (v9 - 11) < 2) {
      return Impl;
    }
  }
  else
  {
    BOOL v8 = this == 12;
    int v9 = a2[16];
  }
  if (v9 == 17)
  {
    if (v8)
    {
      int v10 = *v5;
      uint64_t v11 = (const llvm::detail::DoubleAPFloat *)(a2 + 32);
      uint64_t v12 = *(void *)(Impl + 32);
      if ((_UNKNOWN *)v12 == &unk_1CFB2E344)
      {
        uint64_t v43 = *v5;
        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v50, v11);
        int v10 = v43;
      }
      else
      {
        uint64_t v50 = *(void **)(Impl + 32);
        unint64_t v13 = (uint64_t *)*(unsigned int *)(v12 + 8);
        if ((v13 + 64) >= 0x80) {
          operator new[]();
        }
        char v14 = *(unsigned char *)(Impl + 52);
        int v15 = v14 & 7;
        char v53 = v14 & 0xF;
        int v52 = *(_DWORD *)(Impl + 48);
        BOOL v17 = (v14 & 6) != 0 && v15 != 3;
        if (v15 == 1 || v17)
        {
          uint64_t v18 = *(unsigned int *)(v12 + 8);
          if ((v18 - 64) > 0xFFFFFF7F) {
            unint64_t v13 = &v51;
          }
          BOOL v21 = *(uint64_t **)(Impl + 40);
          uint64_t v20 = (uint64_t *)(Impl + 40);
          BOOL v19 = v21;
          if ((*(_DWORD *)(*(v20 - 1) + 8) - 64) >= 0xFFFFFF80) {
            BOOL v19 = v20;
          }
          if (v18 <= 0xFFFFFFBF)
          {
            unint64_t v22 = (unint64_t)(v18 + 64) >> 6;
            do
            {
              uint64_t v23 = *v19++;
              *v13++ = v23;
              --v22;
            }
            while (v22);
          }
        }
      }
      unint64_t v24 = v50;
      if (v50 == &unk_1CFB2E344)
      {
        uint64_t v44 = v10;
        sub_1CBFC6FB8(v51);
        sub_1CBFC6FB8(v51 + 32);
        int v10 = v44;
        unint64_t v24 = v50;
        if (v50 == &unk_1CFB2E344)
        {
          uint64_t v25 = v51;
          uint64_t v51 = 0;
          unint64_t v24 = &unk_1CFB2E344;
          goto LABEL_30;
        }
      }
      else
      {
        v53 ^= 8u;
      }
      uint64_t v25 = v51;
      int v48 = v52;
      char v49 = v49 & 0xF0 | v53 & 0xF;
LABEL_30:
      uint64_t v46 = (uint64_t)v24;
      uint64_t v47 = v25;
      uint64_t v50 = &unk_1CFB2E394;
      uint64_t Impl = (uint64_t)llvm::ConstantFP::get(v10, (llvm::LLVMContext *)&v45, a3);
      if ((_UNKNOWN *)v46 == &unk_1CFB2E344)
      {
        sub_1CB845718(&v47);
      }
      else if ((*(_DWORD *)(v46 + 8) - 64) <= 0xFFFFFF7F && v47)
      {
        MEMORY[0x1D25D9CB0](v47, 0x1000C8000313F17);
      }
      if (v50 == &unk_1CFB2E344)
      {
        sub_1CB845718(&v51);
      }
      else if ((*((_DWORD *)v50 + 2) - 64) <= 0xFFFFFF7F)
      {
        if (v51) {
          MEMORY[0x1D25D9CB0](v51, 0x1000C8000313F17);
        }
      }
      return Impl;
    }
    return 0;
  }
  if (v6 != 18) {
    return 0;
  }
  uint64_t v26 = *(void *)*v5;
  SplatValue = llvm::Constant::getSplatValue((llvm::Constant *)a2, 0);
  if (!SplatValue)
  {
    uint64_t v45 = &v47;
    uint64_t v46 = 0x1000000000;
    uint64_t v32 = *((unsigned int *)v5 + 8);
    if (v32)
    {
      unint64_t v33 = 0;
      unint64_t v34 = (llvm::ConstantInt *)(v26 + 1960);
      do
      {
        uint64_t v35 = (llvm::Constant *)llvm::ConstantInt::get(v34, v33, 0);
        unsigned int Element = llvm::ConstantExpr::getExtractElement((llvm::ConstantExpr *)Impl, v35, 0, v36);
        uint64_t v39 = llvm::ConstantExpr::get(this, Element, 0, 0, v38);
        if (v46 >= (unint64_t)HIDWORD(v46)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v45 + v46) = v39;
        uint64_t v40 = (v46 + 1);
        LODWORD(v46) = v46 + 1;
        ++v33;
      }
      while (v32 != v33);
      uint64_t v41 = (llvm::FixedVectorType ***)v45;
    }
    else
    {
      uint64_t v40 = 0;
      uint64_t v41 = (llvm::FixedVectorType ***)&v47;
    }
    uint64_t Impl = (uint64_t)llvm::ConstantVector::getImpl(v41, (llvm::Type *)v40);
    if (!Impl)
    {
      llvm::FixedVectorType::get(**v41, (llvm::Type *)v40);
      uint64_t Impl = sub_1CC56A4DC(**v42 + 1288, (uint64_t)v42, v41, v40);
    }
    if (v45 != &v47) {
      free(v45);
    }
    return Impl;
  }
  uint64_t v29 = llvm::ConstantExpr::get(this, SplatValue, 0, 0, v28);
  unint64_t v30 = *((unsigned int *)v5 + 8) | ((unint64_t)(*((unsigned char *)v5 + 8) == 19) << 32);

  return llvm::ConstantVector::getSplat(v30, v29);
}

const llvm::detail::DoubleAPFloat *llvm::ConstantFoldBinaryInstruction(llvm *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  uint64_t v240 = *MEMORY[0x1E4F143B8];
  BinOpIdentity = llvm::ConstantExpr::getBinOpIdentity(this, *(llvm::ConstantFP **)a2, 0, 0);
  if (BinOpIdentity)
  {
    if (BinOpIdentity == a2) {
      return a3;
    }
    if (BinOpIdentity == a3) {
      return a2;
    }
  }
  int v13 = *((unsigned __int8 *)a2 + 16);
  if (v13 == 12) {
    goto LABEL_6;
  }
  int v14 = *((unsigned __int8 *)a3 + 16);
  if (v14 == 12) {
    goto LABEL_6;
  }
  BOOL v17 = *(llvm::ConstantFP **)a2;
  BOOL v18 = (*(_DWORD *)(*(void *)a2 + 8) & 0xFE) != 0x12 || *(_DWORD *)(*(void *)a2 + 8) == 19;
  if (!v18
    || ((char v19 = v13 - 11, v20 = v14 - 11, (v13 - 11) >= 2u)
      ? (BOOL v21 = (v14 - 11) > 1u)
      : (BOOL v21 = 0),
        v21))
  {
LABEL_25:
    if (v14 != 16)
    {
      if (v13 == 16 && this <= 0x1E && ((1 << (char)this) & 0x70066000) != 0)
      {
        uint64_t NullValue = llvm::ConstantFoldBinaryInstruction(this, a3, a2, v11);
        if (!NullValue)
        {
          uint64_t v25 = *(llvm::Constant **)a3;
          if (*(void *)a3)
          {
            v232 = (llvm::Constant **)a3;
            std::string::size_type v233 = (llvm::Constant **)a2;
LABEL_36:
            uint64_t v26 = **(void **)v25 + 1512;
            LODWORD(v226) = this;
            uint64_t v227 = (uint64_t)&v232;
            uint64_t v228 = 2;
            long long v229 = 0u;
            long long v230 = 0u;
            uint64_t v231 = 0;
            return (const llvm::detail::DoubleAPFloat *)sub_1CC56C20C(v26, (uint64_t)v25, (unsigned __int8 *)&v226);
          }
          return 0;
        }
        return (const llvm::detail::DoubleAPFloat *)NullValue;
      }
      goto LABEL_139;
    }
    switch((int)this)
    {
      case 13:
        uint64_t v33 = *((unsigned int *)a3 + 8);
        if (v33 <= 0x40) {
          goto LABEL_69;
        }
        int v34 = 0;
        int64_t v35 = (unint64_t)(v33 + 63) >> 6;
        do
        {
          BOOL v21 = v35-- < 1;
          if (v21) {
            break;
          }
          unint64_t v36 = *(void *)(*((void *)a3 + 3) + 8 * v35);
          v34 += __clz(v36);
        }
        while (!v36);
        goto LABEL_136;
      case 15:
        uint64_t v33 = *((unsigned int *)a3 + 8);
        if (v33 > 0x40)
        {
          int v34 = 0;
          int64_t v73 = (unint64_t)(v33 + 63) >> 6;
          do
          {
            BOOL v21 = v73-- < 1;
            if (v21) {
              break;
            }
            unint64_t v74 = *(void *)(*((void *)a3 + 3) + 8 * v73);
            v34 += __clz(v74);
          }
          while (!v74);
LABEL_136:
          int v75 = v33 | 0xFFFFFFC0;
          if ((v33 & 0x3F) == 0) {
            int v75 = 0;
          }
          if (v34 + v75 == v33) {
            return a2;
          }
        }
        else
        {
LABEL_69:
          if (!*((void *)a3 + 3)) {
            return a2;
          }
        }
        goto LABEL_139;
      case 17:
        uint64_t v37 = *((unsigned int *)a3 + 8);
        if (v37 <= 0x40)
        {
          uint64_t v24 = *((void *)a3 + 3);
          if (v24)
          {
LABEL_66:
            if (v24 != 1) {
              goto LABEL_139;
            }
            return a2;
          }
          return a3;
        }
        int v68 = 0;
        int64_t v69 = (unint64_t)(v37 + 63) >> 6;
        do
        {
          BOOL v21 = v69-- < 1;
          if (v21) {
            break;
          }
          unint64_t v70 = *(void *)(*((void *)a3 + 3) + 8 * v69);
          v68 += __clz(v70);
        }
        while (!v70);
        int v71 = v37 | 0xFFFFFFC0;
        if ((v37 & 0x3F) == 0) {
          int v71 = 0;
        }
        int v72 = v68 + v71;
        if (v72 == v37) {
          return a3;
        }
        if (v72 == v37 - 1) {
          return a2;
        }
        goto LABEL_139;
      case 19:
      case 20:
        uint64_t v23 = *((unsigned int *)a3 + 8);
        if (v23 <= 0x40)
        {
          uint64_t v24 = *((void *)a3 + 3);
          if (v24) {
            goto LABEL_66;
          }
LABEL_263:
          int v15 = *(llvm::PoisonValue **)a3;
          goto LABEL_7;
        }
        int v44 = 0;
        int64_t v45 = (unint64_t)(v23 + 63) >> 6;
        do
        {
          BOOL v21 = v45-- < 1;
          if (v21) {
            break;
          }
          unint64_t v46 = *(void *)(*((void *)a3 + 3) + 8 * v45);
          v44 += __clz(v46);
        }
        while (!v46);
        int v47 = v23 | 0xFFFFFFC0;
        if ((v23 & 0x3F) == 0) {
          int v47 = 0;
        }
        int v42 = v44 + v47;
        if (v42 == v23 - 1) {
          return a2;
        }
        goto LABEL_84;
      case 22:
      case 23:
        uint64_t v23 = *((unsigned int *)a3 + 8);
        if (v23 > 0x40)
        {
          int v38 = 0;
          int64_t v39 = (unint64_t)(v23 + 63) >> 6;
          do
          {
            BOOL v21 = v39-- < 1;
            if (v21) {
              break;
            }
            unint64_t v40 = *(void *)(*((void *)a3 + 3) + 8 * v39);
            v38 += __clz(v40);
          }
          while (!v40);
          int v41 = v23 | 0xFFFFFFC0;
          if ((v23 & 0x3F) == 0) {
            int v41 = 0;
          }
          int v42 = v38 + v41;
          if (v42 != v23 - 1)
          {
LABEL_84:
            if (v42 != v23) {
              goto LABEL_139;
            }
            goto LABEL_263;
          }
        }
        else
        {
          uint64_t v28 = *((void *)a3 + 3);
          if (!v28) {
            goto LABEL_263;
          }
          if (v28 != 1) {
            goto LABEL_139;
          }
        }
        uint64_t v43 = *(llvm::Constant **)a3;
LABEL_259:
        return (const llvm::detail::DoubleAPFloat *)llvm::Constant::getNullValue(v43, v9);
      case 27:
        if (v13 != 5 || *((_WORD *)a2 + 9) != 39) {
          goto LABEL_139;
        }
        return (const llvm::detail::DoubleAPFloat *)llvm::ConstantExpr::getLShr(a2, a3, 0, v11);
      case 28:
        uint64_t v32 = (void *)((char *)a3 + 24);
        uint64_t NullValue = *((unsigned int *)a3 + 8);
        if (NullValue > 0x40)
        {
          int v59 = 0;
          int64_t v60 = (unint64_t)(NullValue + 63) >> 6;
          do
          {
            BOOL v21 = v60-- < 1;
            if (v21) {
              break;
            }
            unint64_t v61 = *(void *)(*v32 + 8 * v60);
            v59 += __clz(v61);
          }
          while (!v61);
          int v62 = NullValue | 0xFFFFFFC0;
          if ((NullValue & 0x3F) == 0) {
            int v62 = 0;
          }
          if (v59 + v62 == NullValue) {
            return a3;
          }
          if (llvm::APInt::countTrailingOnesSlowCase((llvm::Constant *)((char *)a3 + 24)) == NullValue) {
            return a2;
          }
        }
        else
        {
          if (!*v32) {
            return a3;
          }
          if (!NullValue || *v32 == 0xFFFFFFFFFFFFFFFFLL >> -(char)NullValue) {
            return a2;
          }
        }
        if (v13 != 5) {
          goto LABEL_139;
        }
        int v63 = *((unsigned __int16 *)a2 + 9);
        if (v63 != 39) {
          goto LABEL_474;
        }
        unint64_t v64 = *(unsigned int *)(*(void *)a3 + 8);
        unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(**((llvm::Type ***)a2
                                                                  - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)));
        if (v9 == 1) {
        LODWORD(v227) = v64 >> 8;
        }
        unsigned int v66 = v64 >> 8;
        if (v64 >> 8 >= 0x41) {
          operator new[]();
        }
        unint64_t v67 = 0;
        BOOL v226 = 0;
        if (!PrimitiveSizeInBits) {
          goto LABEL_470;
        }
        if (PrimitiveSizeInBits > 0x40)
        {
          llvm::APInt::setBitsSlowCase(&v226, 0, PrimitiveSizeInBits);
LABEL_470:
          if (v66 < 0x41)
          {
LABEL_471:
            if ((v67 & ~*v32) == 0) {
              return a2;
            }
            int v63 = *((unsigned __int16 *)a2 + 9);
LABEL_474:
            uint64_t NullValue = (uint64_t)a2;
            if (v63 == 47)
            {
              BOOL v208 = (void *)*((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
              unsigned int v209 = *((unsigned __int8 *)v208 + 16);
              uint64_t NullValue = (uint64_t)a2;
              if (v209 <= 3)
              {
                uint64_t v210 = v208[5];
                if (v210)
                {
                  unsigned __int8 PointerAlignment = llvm::Value::getPointerAlignment(*((llvm::Value **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)), (const llvm::DataLayout *)(v210 + 272));
                  if (!*((unsigned char *)v208 + 16) && *(unsigned __int16 *)(v210 + 292) < 0x100u)
                  {
                    unsigned __int8 PointerAlignment = 2;
LABEL_484:
                    unsigned int v212 = *(_DWORD *)(*(void *)a3 + 8);
                    if (v212 >> 8 >= PointerAlignment) {
                      unsigned int v213 = PointerAlignment;
                    }
                    else {
                      unsigned int v213 = *(_DWORD *)(*(void *)a3 + 8) >> 8;
                    }
                    LODWORD(v227) = *(_DWORD *)(*(void *)a3 + 8) >> 8;
                    if (v212 >> 8 >= 0x41) {
                      operator new[]();
                    }
                    unint64_t v214 = 0;
                    BOOL v226 = 0;
                    unsigned int v215 = v212 >> 8;
                    if (v213)
                    {
                      if (v213 > 0x40)
                      {
                        llvm::APInt::setBitsSlowCase(&v226, 0, v213);
                      }
                      else if (v215 > 0x40)
                      {
                        MEMORY[0] |= 0xFFFFFFFFFFFFFFFFLL >> -(char)v213;
                      }
                      else
                      {
                        unint64_t v214 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v213;
                        BOOL v226 = (void *)v214;
                      }
                    }
                    if (*((_DWORD *)a3 + 8) >= 0x41u) {
                      operator new[]();
                    }
                    if ((*v32 & ~v214) != 0)
                    {
                      char v216 = 0;
                      uint64_t NullValue = (uint64_t)a2;
                    }
                    else
                    {
                      uint64_t NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)a3, v9);
                      char v216 = 1;
                    }
                    if (v215 >= 0x41 && v214) {
                      MEMORY[0x1D25D9CB0](v214, 0x1000C8000313F17);
                    }
                    if (v216) {
                      return (const llvm::detail::DoubleAPFloat *)NullValue;
                    }
                    goto LABEL_139;
                  }
                }
                else
                {
                  uint64_t NullValue = (uint64_t)a2;
                  if (v209 != 3) {
                    goto LABEL_139;
                  }
                  uint64_t NullValue = (uint64_t)a2;
                  if ((*((_WORD *)v208 + 17) & 0x3F) == 0) {
                    goto LABEL_139;
                  }
                  unsigned __int8 PointerAlignment = (*((_WORD *)v208 + 17) & 0x3F) - 1;
                }
                uint64_t NullValue = (uint64_t)a2;
                if (!PointerAlignment) {
                  goto LABEL_139;
                }
                goto LABEL_484;
              }
            }
LABEL_139:
            int v76 = *((unsigned __int8 *)a2 + 16);
            if (v76 == 17)
            {
              int v77 = *((unsigned __int8 *)a3 + 16);
              if (v77 != 17) {
                goto LABEL_288;
              }
              uint64_t v83 = (void *)*((void *)a2 + 4);
              if (v83 == (void *)&unk_1CFB2E344)
              {
                llvm::detail::DoubleAPFloat::DoubleAPFloat(&v227, (llvm::Constant *)((char *)a2 + 32));
              }
              else
              {
                uint64_t v227 = *((void *)a2 + 4);
                if ((*((_DWORD *)v83 + 2) + 64) >= 0x80) {
                  operator new[]();
                }
                char v84 = *((unsigned char *)a2 + 52);
                int v85 = v84 & 7;
                BYTE4(v229) = BYTE4(v229) & 0xF0 | v84 & 0xF;
                LODWORD(v229) = *((_DWORD *)a2 + 12);
                BOOL v87 = (v84 & 6) != 0 && v85 != 3;
                if (v85 == 1 || v87)
                {
                  uint64_t v88 = *((unsigned int *)v83 + 2);
                  if ((v88 - 64) <= 0xFFFFFF7F) {
                    char v89 = (uint64_t *)v228;
                  }
                  else {
                    char v89 = &v228;
                  }
                  int v90 = (uint64_t *)((char *)a2 + 40);
                  if ((*(_DWORD *)(*((void *)a2 + 4) + 8) - 64) < 0xFFFFFF80) {
                    int v90 = (uint64_t *)*((void *)a2 + 5);
                  }
                  if (v88 <= 0xFFFFFFBF)
                  {
                    unint64_t v91 = (unint64_t)(v88 + 64) >> 6;
                    do
                    {
                      uint64_t v92 = *v90++;
                      *v89++ = v92;
                      --v91;
                    }
                    while (v91);
                  }
                }
              }
              char v93 = 1;
              BOOL v94 = (char *)a3 + 24;
              switch((int)this)
              {
                case 14:
                  sub_1CB88A708((uint64_t)&v226, (uint64_t)v94, 1);
                  goto LABEL_273;
                case 16:
                  sub_1CB9C2E3C((uint64_t)&v226, (uint64_t)v94, 1);
                  goto LABEL_273;
                case 18:
                  sub_1CB9C2E60((uint64_t)&v226, (uint64_t)v94, 1);
                  goto LABEL_273;
                case 21:
                  sub_1CB887A54((uint64_t)&v226, (uint64_t)v94, 1);
                  goto LABEL_273;
                case 24:
                  sub_1CD472368((uint64_t)&v226, (uint64_t)v94);
LABEL_273:
                  uint64_t NullValue = (uint64_t)llvm::ConstantFP::get(**(llvm::ConstantFP ***)a2, (llvm::LLVMContext *)&v226, v95);
                  char v93 = 0;
                  break;
                default:
                  break;
              }
              if ((_UNKNOWN *)v227 == &unk_1CFB2E344)
              {
                sub_1CB845718(&v228);
              }
              else if ((*(_DWORD *)(v227 + 8) - 64) <= 0xFFFFFF7F && v228)
              {
                MEMORY[0x1D25D9CB0](v228, 0x1000C8000313F17);
              }
              if ((v93 & 1) == 0) {
                return (const llvm::detail::DoubleAPFloat *)NullValue;
              }
              goto LABEL_277;
            }
            if (v76 == 16)
            {
              int v77 = *((unsigned __int8 *)a3 + 16);
              if (v77 == 16)
              {
                uint64_t v78 = (llvm::Constant *)((char *)a2 + 24);
                char v79 = (llvm::Constant *)((char *)a3 + 24);
                switch((int)this)
                {
                  case 13:
                    int v80 = **(llvm::ConstantInt ***)a2;
                    unsigned int v81 = *((_DWORD *)a2 + 8);
                    if (v81 >= 0x41) {
                      operator new[]();
                    }
                    unint64_t v82 = *(void *)v79 + *(void *)v78;
                    goto LABEL_351;
                  case 15:
                    int v80 = **(llvm::ConstantInt ***)a2;
                    unsigned int v81 = *((_DWORD *)a2 + 8);
                    if (v81 >= 0x41) {
                      operator new[]();
                    }
                    unint64_t v82 = *(void *)v78 - *(void *)v79;
LABEL_351:
                    unint64_t v162 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v81;
                    if (!v81) {
                      unint64_t v162 = 0;
                    }
                    goto LABEL_353;
                  case 17:
                    unsigned int v165 = **(llvm::ConstantInt ***)a2;
                    llvm::APInt::operator*((uint64_t)v78, (void *)a3 + 3, (uint64_t)&v226);
                    goto LABEL_421;
                  case 19:
                    unsigned int v165 = **(llvm::ConstantInt ***)a2;
                    llvm::APInt::udiv((uint64_t)v78, (llvm::Constant *)((char *)a3 + 24), (uint64_t)&v226);
                    goto LABEL_421;
                  case 20:
                    unsigned int v163 = *((_DWORD *)a3 + 8);
                    if (!v163) {
                      goto LABEL_402;
                    }
                    if (v163 > 0x40)
                    {
                      if (llvm::APInt::countTrailingOnesSlowCase(v79) != v163) {
                        goto LABEL_404;
                      }
                    }
                    else if (*(void *)v79 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v163)
                    {
                      goto LABEL_404;
                    }
LABEL_402:
                    unsigned int v190 = *((_DWORD *)a2 + 8);
                    if (v190 <= 0x40)
                    {
                      if (*(void *)v78 == 1 << (v190 - 1)) {
                        goto LABEL_6;
                      }
                      goto LABEL_404;
                    }
                    if (((*(void *)(*(void *)v78 + 8 * ((v190 - 1) >> 6)) >> (v190 - 1)) & 1) == 0
                      || llvm::APInt::countTrailingZerosSlowCase((unint64_t **)a2 + 3) != v190 - 1)
                    {
LABEL_404:
                      unsigned int v165 = **(llvm::ConstantInt ***)a2;
                      llvm::APInt::sdiv(v78, v79, (uint64_t)&v226);
                      goto LABEL_421;
                    }
                    goto LABEL_6;
                  case 22:
                    unsigned int v165 = **(llvm::ConstantInt ***)a2;
                    llvm::APInt::urem(v78, (llvm::Constant *)((char *)a3 + 24), (uint64_t)&v226);
                    goto LABEL_421;
                  case 23:
                    unsigned int v166 = *((_DWORD *)a3 + 8);
                    if (!v166) {
                      goto LABEL_406;
                    }
                    if (v166 > 0x40)
                    {
                      if (llvm::APInt::countTrailingOnesSlowCase(v79) != v166) {
                        goto LABEL_408;
                      }
                    }
                    else if (*(void *)v79 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v166)
                    {
                      goto LABEL_408;
                    }
LABEL_406:
                    unsigned int v191 = *((_DWORD *)a2 + 8);
                    if (v191 > 0x40)
                    {
                      if (((*(void *)(*(void *)v78 + 8 * ((v191 - 1) >> 6)) >> (v191 - 1)) & 1) != 0
                        && llvm::APInt::countTrailingZerosSlowCase((unint64_t **)a2 + 3) == v191 - 1)
                      {
LABEL_6:
                        int v15 = *(llvm::PoisonValue **)a2;
LABEL_7:
                        return (const llvm::detail::DoubleAPFloat *)llvm::PoisonValue::get(v15, v9);
                      }
                    }
                    else if (*(void *)v78 == 1 << (v191 - 1))
                    {
                      goto LABEL_6;
                    }
LABEL_408:
                    unsigned int v165 = **(llvm::ConstantInt ***)a2;
                    llvm::APInt::srem(v78, v79, (uint64_t)&v226);
                    goto LABEL_421;
                  case 25:
                    unint64_t v167 = *((unsigned int *)a2 + 8);
                    uint64_t v168 = *((unsigned int *)a3 + 8);
                    uint64_t v169 = (unint64_t *)((char *)a3 + 24);
                    if (v168 < 0x41) {
                      goto LABEL_366;
                    }
                    int v170 = 0;
                    int64_t v171 = (unint64_t)(v168 + 63) >> 6;
                    do
                    {
                      BOOL v21 = v171-- < 1;
                      if (v21) {
                        break;
                      }
                      unint64_t v172 = *(void *)(*(void *)v79 + 8 * v171);
                      v170 += __clz(v172);
                    }
                    while (!v172);
                    int v173 = v168 | 0xFFFFFFC0;
                    if ((v168 & 0x3F) == 0) {
                      int v173 = 0;
                    }
                    if ((v168 - v170 - v173) >= 0x41) {
                      goto LABEL_6;
                    }
                    uint64_t v169 = *(unint64_t **)v79;
LABEL_366:
                    int v15 = *(llvm::PoisonValue **)a2;
                    if (*v169 >= v167) {
                      goto LABEL_7;
                    }
                    unsigned int v165 = *(llvm::ConstantInt **)v15;
                    LODWORD(v227) = v167;
                    if (v167 > 0x40) {
                      operator new[]();
                    }
                    BOOL v174 = *(void **)v78;
                    BOOL v226 = *(void **)v78;
                    if (v168 >= 0x41)
                    {
                      int v199 = 0;
                      int64_t v200 = ((unint64_t)v168 + 63) >> 6;
                      uint64_t v201 = *(unint64_t **)v79;
                      do
                      {
                        BOOL v21 = v200-- < 1;
                        if (v21) {
                          break;
                        }
                        unint64_t v202 = v201[v200];
                        v199 += __clz(v202);
                      }
                      while (!v202);
                      int v203 = v168 | 0xFFFFFFC0;
                      if ((v168 & 0x3F) == 0) {
                        int v203 = 0;
                      }
                      int v193 = v167;
                      if ((v168 - v199 - v203) > 0x40)
                      {
LABEL_414:
                        uint64_t v194 = (void)v174 << v193;
                        if (v167 == v193) {
                          uint64_t v194 = 0;
                        }
                        unint64_t v195 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v167;
                        if (!v167) {
                          unint64_t v195 = 0;
                        }
                        BOOL v226 = (void *)(v195 & v194);
LABEL_421:
                        uint64_t v189 = v165;
LABEL_422:
                        uint64_t NullValue = (uint64_t)llvm::ConstantInt::get(v189, (llvm::LLVMContext *)&v226, v10);
                        if (v227 >= 0x41 && v226) {
                          MEMORY[0x1D25D9CB0](v226, 0x1000C8000313F17);
                        }
                        return (const llvm::detail::DoubleAPFloat *)NullValue;
                      }
                      BOOL v192 = (unint64_t *)*v201;
                    }
                    else
                    {
                      BOOL v192 = *(unint64_t **)v79;
                    }
                    int v193 = v167;
                    if ((unint64_t)v192 <= v167) {
                      int v193 = (int)v192;
                    }
                    goto LABEL_414;
                  case 26:
                    unint64_t v182 = *((unsigned int *)a2 + 8);
                    uint64_t v183 = *((unsigned int *)a3 + 8);
                    BOOL v184 = (unint64_t *)((char *)a3 + 24);
                    if (v183 < 0x41) {
                      goto LABEL_388;
                    }
                    int v185 = 0;
                    int64_t v186 = (unint64_t)(v183 + 63) >> 6;
                    do
                    {
                      BOOL v21 = v186-- < 1;
                      if (v21) {
                        break;
                      }
                      unint64_t v187 = *(void *)(*(void *)v79 + 8 * v186);
                      v185 += __clz(v187);
                    }
                    while (!v187);
                    int v188 = v183 | 0xFFFFFFC0;
                    if ((v183 & 0x3F) == 0) {
                      int v188 = 0;
                    }
                    if ((v183 - v185 - v188) >= 0x41) {
                      goto LABEL_6;
                    }
                    BOOL v184 = *(unint64_t **)v79;
LABEL_388:
                    int v15 = *(llvm::PoisonValue **)a2;
                    if (*v184 >= v182) {
                      goto LABEL_7;
                    }
                    unsigned int v165 = *(llvm::ConstantInt **)v15;
                    LODWORD(v227) = v182;
                    if (v182 > 0x40) {
                      operator new[]();
                    }
                    BOOL v226 = *(void **)v78;
                    llvm::APInt::lshrInPlace((llvm::APInt *)&v226, v79);
                    goto LABEL_421;
                  case 27:
                    unint64_t v175 = *((unsigned int *)a2 + 8);
                    uint64_t v176 = *((unsigned int *)a3 + 8);
                    __int16 v177 = (unint64_t *)((char *)a3 + 24);
                    if (v176 < 0x41) {
                      goto LABEL_377;
                    }
                    int v178 = 0;
                    int64_t v179 = (unint64_t)(v176 + 63) >> 6;
                    do
                    {
                      BOOL v21 = v179-- < 1;
                      if (v21) {
                        break;
                      }
                      unint64_t v180 = *(void *)(*(void *)v79 + 8 * v179);
                      v178 += __clz(v180);
                    }
                    while (!v180);
                    int v181 = v176 | 0xFFFFFFC0;
                    if ((v176 & 0x3F) == 0) {
                      int v181 = 0;
                    }
                    if ((v176 - v178 - v181) >= 0x41) {
                      goto LABEL_6;
                    }
                    __int16 v177 = *(unint64_t **)v79;
LABEL_377:
                    int v15 = *(llvm::PoisonValue **)a2;
                    if (*v177 >= v175) {
                      goto LABEL_7;
                    }
                    unsigned int v165 = *(llvm::ConstantInt **)v15;
                    LODWORD(v227) = v175;
                    if (v175 > 0x40) {
                      operator new[]();
                    }
                    BOOL v226 = *(void **)v78;
                    llvm::APInt::ashrInPlace((unsigned int *)&v226, v79);
                    goto LABEL_421;
                  case 28:
                    int v80 = **(llvm::ConstantInt ***)a2;
                    unsigned int v81 = *((_DWORD *)a2 + 8);
                    if (v81 > 0x40) {
                      operator new[]();
                    }
                    unint64_t v82 = *(void *)v78;
                    unint64_t v162 = *(void *)v79;
LABEL_353:
                    uint64_t v164 = (void *)(v162 & v82);
                    goto LABEL_400;
                  case 29:
                    int v80 = **(llvm::ConstantInt ***)a2;
                    unsigned int v81 = *((_DWORD *)a2 + 8);
                    if (v81 > 0x40) {
                      operator new[]();
                    }
                    uint64_t v164 = (void *)(*(void *)v79 | *(void *)v78);
                    goto LABEL_400;
                  case 30:
                    int v80 = **(llvm::ConstantInt ***)a2;
                    unsigned int v81 = *((_DWORD *)a2 + 8);
                    if (v81 > 0x40) {
                      operator new[]();
                    }
                    uint64_t v164 = (void *)(*(void *)v79 ^ *(void *)v78);
LABEL_400:
                    LODWORD(v227) = v81;
                    BOOL v226 = v164;
                    uint64_t v189 = v80;
                    goto LABEL_422;
                  default:
                    goto LABEL_277;
                }
              }
              if (this > 0x1B || ((1 << (char)this) & 0xED80000) == 0) {
                goto LABEL_288;
              }
              uint64_t v105 = *((unsigned int *)a2 + 8);
              if (v105 > 0x40)
              {
                int v131 = 0;
                int64_t v132 = (unint64_t)(v105 + 63) >> 6;
                do
                {
                  BOOL v21 = v132-- < 1;
                  if (v21) {
                    break;
                  }
                  unint64_t v133 = *(void *)(*((void *)a2 + 3) + 8 * v132);
                  v131 += __clz(v133);
                }
                while (!v133);
                int v134 = v105 | 0xFFFFFFC0;
                if ((v105 & 0x3F) == 0) {
                  int v134 = 0;
                }
                if (v131 + v134 == v105) {
                  return a2;
                }
              }
              else if (!*((void *)a2 + 3))
              {
                return a2;
              }
LABEL_277:
              if (*((unsigned char *)a2 + 16) == 5)
              {
                if (this <= 0x1E
                  && ((1 << (char)this) & 0x70022000) != 0
                  && *((unsigned __int16 *)a2 + 9) == this)
                {
                  uint64_t v146 = (llvm::Constant **)((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
                  uint64_t v147 = llvm::ConstantFoldBinaryInstruction(this, v146, a3, v11);
                  if (!v147)
                  {
                    v223 = *v146;
                    if (*v146)
                    {
                      v232 = v146;
                      std::string::size_type v233 = (llvm::Constant **)a3;
                      uint64_t v224 = **(void **)v223 + 1512;
                      LODWORD(v226) = this;
                      uint64_t v227 = (uint64_t)&v232;
                      uint64_t v228 = 2;
                      long long v229 = 0u;
                      long long v230 = 0u;
                      uint64_t v231 = 0;
                      uint64_t v147 = sub_1CC56C20C(v224, (uint64_t)v223, (unsigned __int8 *)&v226);
                    }
                    else
                    {
                      uint64_t v147 = 0;
                    }
                  }
                  if (*(unsigned char *)(v147 + 16) != 5 || *(unsigned __int16 *)(v147 + 18) != this)
                  {
                    int v148 = (llvm::Constant **)*((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
                    uint64_t NullValue = llvm::ConstantFoldBinaryInstruction(this, v148, (llvm::Constant *)v147, v11);
                    if (!NullValue)
                    {
                      uint64_t v25 = *v148;
                      if (*v148)
                      {
                        v232 = v148;
                        std::string::size_type v233 = (llvm::Constant **)v147;
                        goto LABEL_36;
                      }
                      return 0;
                    }
                    return (const llvm::detail::DoubleAPFloat *)NullValue;
                  }
                }
LABEL_292:
                if (*(_DWORD *)(*(void *)a2 + 8) == 269)
                {
                  uint64_t NullValue = 0;
                  switch((int)this)
                  {
                    case 13:
                    case 15:
                      return (const llvm::detail::DoubleAPFloat *)llvm::ConstantExpr::getXor(a2, a3, v10, v11);
                    case 17:
                      return (const llvm::detail::DoubleAPFloat *)llvm::ConstantExpr::getAnd(a2, a3, v10, v11);
                    case 19:
                    case 20:
                    case 25:
                    case 26:
                    case 27:
                      return a2;
                    case 22:
                    case 23:
                      BOOL v149 = **(uint64_t ***)a2;
                      uint64_t v150 = *v149;
                      uint64_t NullValue = *(void *)(*v149 + 1568);
                      if (!NullValue)
                      {
                        long long v151 = *(llvm::ConstantInt **)(v150 + 1888);
                        unsigned int v152 = *(_DWORD *)(v150 + 1896);
                        LODWORD(v227) = v152 >> 8;
                        if (v152 >> 8 > 0x40) {
                          operator new[]();
                        }
                        BOOL v226 = 0;
                        uint64_t NullValue = (uint64_t)llvm::ConstantInt::get(v151, (llvm::LLVMContext *)&v226, v10);
                        if (v227 >= 0x41 && v226) {
                          MEMORY[0x1D25D9CB0](v226, 0x1000C8000313F17);
                        }
                        *(void *)(v150 + 1568) = NullValue;
                      }
                      break;
                    default:
                      return (const llvm::detail::DoubleAPFloat *)NullValue;
                  }
                  return (const llvm::detail::DoubleAPFloat *)NullValue;
                }
                return 0;
              }
              int v77 = *((unsigned __int8 *)a3 + 16);
LABEL_288:
              if (v77 == 5 && this <= 0x1E && ((1 << (char)this) & 0x70066000) != 0) {
                return (const llvm::detail::DoubleAPFloat *)llvm::ConstantFoldBinaryInstruction(this, a3, a2, v11);
              }
              goto LABEL_292;
            }
            uint64_t v96 = *(llvm::ConstantFP **)a2;
            if (!*(void *)a2 || (*((_DWORD *)v96 + 2) & 0xFE) != 0x12) {
              goto LABEL_277;
            }
            SplatValue = (llvm::Constant *)llvm::Constant::getSplatValue(a3, 0);
            if (!SplatValue)
            {
LABEL_181:
              if (*((unsigned char *)v96 + 8) == 18)
              {
                BOOL v226 = &v228;
                uint64_t v227 = 0x1000000000;
                uint64_t v106 = *((unsigned int *)v96 + 8);
                if (v106)
                {
                  unint64_t v107 = 0;
                  uint64_t v108 = (llvm::ConstantInt *)(**(void **)v96 + 1960);
                  while (1)
                  {
                    uint64_t v109 = (llvm::Constant *)llvm::ConstantInt::get(v108, v107, 0);
                    ElementInstructioint n = (llvm::Constant *)llvm::ConstantFoldExtractElementInstruction(a2, v109, v110);
                    if (!ElementInstruction)
                    {
                      unint64_t v126 = *(llvm::ConstantFP **)a2;
                      uint64_t v127 = *(void *)(*(void *)a2 + 24);
                      if (v127)
                      {
                        v238 = a2;
                        uint64_t v239 = (uint64_t)v109;
                        uint64_t v128 = **(void **)v126 + 1512;
                        LODWORD(v232) = 61;
                        std::string::size_type v233 = &v238;
                        uint64_t v234 = 2;
                        long long v235 = 0u;
                        long long v236 = 0u;
                        uint64_t v237 = 0;
                        ElementInstructioint n = (llvm::Constant *)sub_1CC56C20C(v128, v127, (unsigned __int8 *)&v232);
                      }
                      else
                      {
                        ElementInstructioint n = 0;
                      }
                    }
                    uint64_t v115 = llvm::ConstantFoldExtractElementInstruction(a3, v109, v111);
                    if (!v115)
                    {
                      uint64_t v129 = *(llvm::Constant **)a3;
                      uint64_t v113 = *(llvm::Type **)(*(void *)a3 + 24);
                      if (v113)
                      {
                        v238 = a3;
                        uint64_t v239 = (uint64_t)v109;
                        uint64_t v130 = **(void **)v129 + 1512;
                        LODWORD(v232) = 61;
                        std::string::size_type v233 = &v238;
                        uint64_t v234 = 2;
                        long long v235 = 0u;
                        long long v236 = 0u;
                        uint64_t v237 = 0;
                        uint64_t v115 = sub_1CC56C20C(v130, (uint64_t)v113, (unsigned __int8 *)&v232);
                      }
                      else
                      {
                        uint64_t v115 = 0;
                      }
                    }
                    if (this <= 0x17 && ((1 << (char)this) & 0xD80000) != 0)
                    {
                      unsigned int v116 = *(unsigned __int8 *)(v115 + 16);
                      if (v115 && v116 == 16)
                      {
                        uint64_t v117 = *(unsigned int *)(v115 + 32);
                        if (v117 >= 0x41)
                        {
                          int v120 = 0;
                          int64_t v121 = (unint64_t)(v117 + 63) >> 6;
                          do
                          {
                            BOOL v21 = v121-- < 1;
                            if (v21) {
                              break;
                            }
                            unint64_t v122 = *(void *)(*(void *)(v115 + 24) + 8 * v121);
                            v120 += __clz(v122);
                          }
                          while (!v122);
                          int v123 = v117 | 0xFFFFFFC0;
                          if ((v117 & 0x3F) == 0) {
                            int v123 = 0;
                          }
                          if (v120 + v123 == v117)
                          {
LABEL_329:
                            uint64_t NullValue = (uint64_t)llvm::PoisonValue::get(v96, v113);
                            goto LABEL_330;
                          }
                        }
                        else if (!*(void *)(v115 + 24))
                        {
                          goto LABEL_329;
                        }
                      }
                      else if (v115 && v116 == 17)
                      {
                        if (sub_1CB844168(v115, 0.0)) {
                          goto LABEL_329;
                        }
                      }
                      else if (v116 <= 0x14 && ((1 << v116) & 0x1C2000) != 0)
                      {
                        goto LABEL_329;
                      }
                    }
                    uint64_t v118 = llvm::ConstantFoldBinaryInstruction(this, ElementInstruction, (llvm::Constant *)v115, v114);
                    if (!v118)
                    {
                      if (*(void *)ElementInstruction)
                      {
                        v238 = ElementInstruction;
                        uint64_t v239 = v115;
                        int v124 = *(void ***)ElementInstruction;
                        uint64_t v125 = ***(void ***)ElementInstruction + 1512;
                        LODWORD(v232) = this;
                        std::string::size_type v233 = &v238;
                        uint64_t v234 = 2;
                        long long v235 = 0u;
                        long long v236 = 0u;
                        uint64_t v237 = 0;
                        uint64_t v118 = sub_1CC56C20C(v125, (uint64_t)v124, (unsigned __int8 *)&v232);
                      }
                      else
                      {
                        uint64_t v118 = 0;
                      }
                    }
                    if (v227 >= (unint64_t)HIDWORD(v227)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((void *)v226 + v227) = v118;
                    BOOL v119 = (llvm::Type *)(v227 + 1);
                    LODWORD(v227) = v227 + 1;
                    if (++v107 == v106)
                    {
                      int v160 = (llvm::FixedVectorType ***)v226;
                      goto LABEL_327;
                    }
                  }
                }
                BOOL v119 = 0;
                int v160 = (llvm::FixedVectorType ***)&v228;
LABEL_327:
                uint64_t NullValue = (uint64_t)llvm::ConstantVector::getImpl(v160, (llvm::Type *)v119);
                if (!NullValue)
                {
                  llvm::FixedVectorType::get(**v160, v119);
                  uint64_t NullValue = sub_1CC56A4DC(**v161 + 1288, (uint64_t)v161, v160, v119);
                }
LABEL_330:
                if (v226 != &v228) {
                  free(v226);
                }
                return (const llvm::detail::DoubleAPFloat *)NullValue;
              }
              goto LABEL_277;
            }
            uint64_t v98 = SplatValue;
            if (this <= 0x17 && ((1 << (char)this) & 0xD80000) != 0)
            {
              int v99 = *((unsigned __int8 *)SplatValue + 16);
              if (v99 == 16)
              {
                uint64_t v100 = *((unsigned int *)SplatValue + 8);
                if (v100 < 0x41)
                {
                  if (*((void *)SplatValue + 3)) {
                    goto LABEL_173;
                  }
LABEL_426:
                  int v15 = v96;
                  goto LABEL_7;
                }
                int v204 = 0;
                int64_t v205 = (unint64_t)(v100 + 63) >> 6;
                do
                {
                  BOOL v21 = v205-- < 1;
                  if (v21) {
                    break;
                  }
                  unint64_t v206 = *(void *)(*((void *)SplatValue + 3) + 8 * v205);
                  v204 += __clz(v206);
                }
                while (!v206);
                int v207 = v100 | 0xFFFFFFC0;
                if ((v100 & 0x3F) == 0) {
                  int v207 = 0;
                }
                if (v204 + v207 == v100) {
                  goto LABEL_426;
                }
              }
              else if (v99 == 17)
              {
                if (sub_1CB844168((uint64_t)SplatValue, 0.0)) {
                  goto LABEL_426;
                }
              }
              else if ((v99 - 18) < 3 || v99 == 13)
              {
                goto LABEL_426;
              }
            }
LABEL_173:
            BOOL v101 = (llvm::Constant **)llvm::Constant::getSplatValue(a2, 0);
            if (v101)
            {
              uint64_t v102 = v101;
              unint64_t v103 = *((unsigned int *)v96 + 8) | ((unint64_t)(*((unsigned char *)v96 + 8) == 19) << 32);
              int64_t v104 = (void **)llvm::ConstantFoldBinaryInstruction(this, v101, v98, v11);
              if (!v104)
              {
                int64_t v104 = (void **)*v102;
                if (*v102)
                {
                  v232 = v102;
                  std::string::size_type v233 = (llvm::Constant **)v98;
                  uint64_t v225 = **v104 + 1512;
                  LODWORD(v226) = this;
                  uint64_t v227 = (uint64_t)&v232;
                  uint64_t v228 = 2;
                  long long v229 = 0u;
                  long long v230 = 0u;
                  uint64_t v231 = 0;
                  int64_t v104 = (void **)sub_1CC56C20C(v225, (uint64_t)v104, (unsigned __int8 *)&v226);
                }
              }
              return (const llvm::detail::DoubleAPFloat *)llvm::ConstantVector::getSplat(v103, v104);
            }
            goto LABEL_181;
          }
        }
        else
        {
          if (v66 <= 0x40)
          {
            unint64_t v67 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits;
            goto LABEL_471;
          }
          MEMORY[0] |= 0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits;
        }
        operator new[]();
      case 29:
        uint64_t v29 = (llvm::Constant *)((char *)a3 + 24);
        uint64_t v30 = *((unsigned int *)a3 + 8);
        if (v30 > 0x40)
        {
          int v49 = 0;
          int64_t v50 = (unint64_t)(v30 + 63) >> 6;
          do
          {
            BOOL v21 = v50-- < 1;
            if (v21) {
              break;
            }
            unint64_t v51 = *(void *)(*(void *)v29 + 8 * v50);
            v49 += __clz(v51);
          }
          while (!v51);
          int v52 = v30 | 0xFFFFFFC0;
          if ((v30 & 0x3F) == 0) {
            int v52 = 0;
          }
          if (v49 + v52 == v30) {
            return a2;
          }
          if (llvm::APInt::countTrailingOnesSlowCase(v29) == v30) {
            return a3;
          }
        }
        else
        {
          if (!*(void *)v29) {
            return a2;
          }
          if (!v30 || *(void *)v29 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v30) {
            return a3;
          }
        }
        goto LABEL_139;
      case 30:
        uint64_t v31 = *((unsigned int *)a3 + 8);
        if (v31 > 0x40)
        {
          int v53 = 0;
          int64_t v54 = (unint64_t)(v31 + 63) >> 6;
          do
          {
            BOOL v21 = v54-- < 1;
            if (v21) {
              break;
            }
            unint64_t v55 = *(void *)(*((void *)a3 + 3) + 8 * v54);
            v53 += __clz(v55);
          }
          while (!v55);
          int v56 = v31 | 0xFFFFFFC0;
          if ((v31 & 0x3F) == 0) {
            int v56 = 0;
          }
          if (v53 + v56 == v31) {
            return a2;
          }
        }
        else if (!*((void *)a3 + 3))
        {
          return a2;
        }
        if (v13 == 5 && *((unsigned __int16 *)a2 + 9) - 53 <= 1)
        {
          uint64_t v57 = 14;
          uint64_t v58 = 33;
          switch(*((_WORD *)a2 + 12))
          {
            case 1:
              goto LABEL_503;
            case 2:
              uint64_t v57 = 13;
              goto LABEL_503;
            case 3:
              uint64_t v57 = 12;
              goto LABEL_503;
            case 4:
              uint64_t v57 = 11;
              goto LABEL_503;
            case 5:
              uint64_t v57 = 10;
              goto LABEL_503;
            case 6:
              uint64_t v57 = 9;
              goto LABEL_503;
            case 7:
              uint64_t v57 = 8;
              goto LABEL_503;
            case 8:
              uint64_t v57 = 7;
              goto LABEL_503;
            case 9:
              uint64_t v57 = 6;
              goto LABEL_503;
            case 0xA:
              uint64_t v57 = 5;
              goto LABEL_503;
            case 0xB:
              uint64_t v57 = 4;
              goto LABEL_503;
            case 0xC:
              uint64_t v57 = 3;
              goto LABEL_503;
            case 0xD:
              uint64_t v57 = 2;
              goto LABEL_503;
            case 0xE:
              uint64_t v57 = 1;
              goto LABEL_503;
            case 0xF:
              uint64_t v57 = 0;
              goto LABEL_503;
            case 0x10:
            case 0x11:
            case 0x12:
            case 0x13:
            case 0x14:
            case 0x15:
            case 0x16:
            case 0x17:
            case 0x18:
            case 0x19:
            case 0x1A:
            case 0x1B:
            case 0x1C:
            case 0x1D:
            case 0x1E:
            case 0x1F:
              __break(1u);
              goto LABEL_539;
            case 0x20:
              goto LABEL_435;
            case 0x21:
              uint64_t v58 = 32;
              goto LABEL_435;
            case 0x22:
              uint64_t v58 = 37;
              goto LABEL_435;
            case 0x23:
              uint64_t v58 = 36;
              goto LABEL_435;
            case 0x24:
              uint64_t v58 = 35;
              goto LABEL_435;
            case 0x25:
              uint64_t v58 = 34;
              goto LABEL_435;
            case 0x26:
              uint64_t v58 = 41;
              goto LABEL_435;
            case 0x27:
              uint64_t v58 = 40;
              goto LABEL_435;
            case 0x28:
              uint64_t v58 = 39;
              goto LABEL_435;
            case 0x29:
              uint64_t v58 = 38;
LABEL_435:
              BOOL v196 = (uint64_t *)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
              uint64_t v197 = *v196;
              BOOL v198 = (llvm::Constant *)v196[4];
              double result = (const llvm::detail::DoubleAPFloat *)llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)v58, v197, v198, 0, v12);
              break;
            default:
LABEL_539:
              uint64_t v57 = 15;
LABEL_503:
              v217 = (uint64_t ****)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
              int v218 = *v217;
              char v219 = (llvm::Constant *)v217[4];
              double result = (const llvm::detail::DoubleAPFloat *)llvm::ConstantExpr::getFCmp((llvm::ConstantExpr *)v57, v218, v219, 0);
              break;
          }
          return result;
        }
        goto LABEL_139;
      default:
        goto LABEL_139;
    }
  }
  switch((int)this)
  {
    case 13:
    case 15:
      goto LABEL_255;
    case 14:
    case 18:
    case 21:
    case 24:
      goto LABEL_20;
    case 16:
      uint64_t v144 = a2;
      if (v13 == 17) {
        goto LABEL_265;
      }
      if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) != 0x12) {
        goto LABEL_20;
      }
      uint64_t v144 = llvm::Constant::getSplatValue(a2, 0);
      if (v144 && *((unsigned char *)v144 + 16) == 17)
      {
LABEL_265:
        uint64_t v145 = (char *)(v144 + 3);
        if ((_UNKNOWN *)v144[4] == &unk_1CFB2E344) {
          uint64_t v145 = (char *)v144[5];
        }
        if ((v145[28] & 0xF) != 0xB) {
          goto LABEL_20;
        }
      }
      else
      {
        if (*((unsigned char *)v17 + 8) != 18) {
          goto LABEL_20;
        }
        int v153 = *((_DWORD *)v17 + 8);
        if (!v153) {
          goto LABEL_20;
        }
        int v154 = 0;
        char v155 = 0;
        int v156 = -v153;
        do
        {
          ++v154;
          while (1)
          {
            Aggregateunsigned int Element = llvm::Constant::getAggregateElement(a2, (llvm::Type *)(v154 - 1));
            if (!AggregateElement) {
              goto LABEL_20;
            }
            int v158 = *((unsigned __int8 *)AggregateElement + 16);
            if ((v158 - 11) >= 2) {
              break;
            }
            ++v154;
            if (v156 + v154 == 1)
            {
              if ((v155 & 1) == 0) {
                goto LABEL_20;
              }
              goto LABEL_268;
            }
          }
          if (v158 != 17) {
            goto LABEL_20;
          }
          BOOL v159 = AggregateElement + 3;
          if ((_UNKNOWN *)AggregateElement[4] == &unk_1CFB2E344) {
            BOOL v159 = (void *)AggregateElement[5];
          }
          if ((*((unsigned char *)v159 + 28) & 0xF) != 0xB) {
            goto LABEL_20;
          }
          char v155 = 1;
        }
        while (v156 + v154);
      }
LABEL_268:
      if (*((unsigned __int8 *)a3 + 16) - 11 < 2) {
        return a3;
      }
LABEL_20:
      if (*((unsigned __int8 *)a2 + 16) - 11 <= 1 && *((unsigned __int8 *)a3 + 16) - 11 < 2) {
        return a2;
      }
      unint64_t v22 = *(llvm::ConstantFP **)a2;
      return llvm::ConstantFP::getNaN(v22, 0, 0);
    case 17:
      if ((v20 | v19) < 2u) {
        return a2;
      }
      v238 = 0;
      BOOL v226 = &v238;
      uint64_t v227 = 0;
      if ((sub_1CBF5295C((uint64_t)&v226, a2) & 1) == 0)
      {
        v232 = &v238;
        std::string::size_type v233 = 0;
        if ((sub_1CBF5295C((uint64_t)&v232, a3) & 1) == 0) {
          return (const llvm::detail::DoubleAPFloat *)llvm::Constant::getNullValue(*(llvm::Constant **)a2, v48);
        }
      }
      uint64_t v142 = v238;
      if (*((_DWORD *)v238 + 2) >= 0x41u) {
        uint64_t v142 = *(llvm::Constant **)v238;
      }
      if ((*(unsigned char *)v142 & 1) == 0) {
        return (const llvm::detail::DoubleAPFloat *)llvm::Constant::getNullValue(*(llvm::Constant **)a2, v48);
      }
      return (const llvm::detail::DoubleAPFloat *)llvm::UndefValue::get(*(llvm::UndefValue **)a2, v48);
    case 19:
    case 20:
      if (sub_1CC543BC4((uint64_t)a3)) {
        goto LABEL_263;
      }
      if ((sub_1CBF5270C((uint64_t)&v226, a3) & 1) == 0) {
        return (const llvm::detail::DoubleAPFloat *)llvm::Constant::getNullValue(*(llvm::Constant **)a2, v48);
      }
      return a2;
    case 22:
    case 23:
      if (sub_1CC543BC4((uint64_t)a3)) {
        goto LABEL_263;
      }
      uint64_t v43 = *(llvm::Constant **)a2;
      goto LABEL_259;
    case 25:
      if ((v14 - 11) <= 1u) {
        goto LABEL_263;
      }
      if (v14 != 16) {
        goto LABEL_391;
      }
      uint64_t v136 = *((unsigned int *)a3 + 8);
      if (v136 < 0x41) {
        goto LABEL_304;
      }
      int v137 = 0;
      int64_t v140 = (unint64_t)(v136 + 63) >> 6;
      do
      {
        BOOL v21 = v140-- < 1;
        if (v21) {
          break;
        }
        unint64_t v141 = *(void *)(*((void *)a3 + 3) + 8 * v140);
        v137 += __clz(v141);
      }
      while (!v141);
      goto LABEL_509;
    case 26:
      if ((v14 - 11) <= 1u) {
        goto LABEL_263;
      }
      if (v14 != 16) {
        goto LABEL_391;
      }
      uint64_t v136 = *((unsigned int *)a3 + 8);
      if (v136 < 0x41) {
        goto LABEL_304;
      }
      int v137 = 0;
      int64_t v220 = (unint64_t)(v136 + 63) >> 6;
      do
      {
        BOOL v21 = v220-- < 1;
        if (v21) {
          break;
        }
        unint64_t v221 = *(void *)(*((void *)a3 + 3) + 8 * v220);
        v137 += __clz(v221);
      }
      while (!v221);
      goto LABEL_509;
    case 27:
      if ((v14 - 11) <= 1u) {
        goto LABEL_263;
      }
      if (v14 == 16)
      {
        uint64_t v136 = *((unsigned int *)a3 + 8);
        if (v136 < 0x41)
        {
LABEL_304:
          if (!*((void *)a3 + 3)) {
            return a2;
          }
        }
        else
        {
          int v137 = 0;
          int64_t v138 = (unint64_t)(v136 + 63) >> 6;
          do
          {
            BOOL v21 = v138-- < 1;
            if (v21) {
              break;
            }
            unint64_t v139 = *(void *)(*((void *)a3 + 3) + 8 * v138);
            v137 += __clz(v139);
          }
          while (!v139);
LABEL_509:
          int v222 = v136 | 0xFFFFFFC0;
          if ((v136 & 0x3F) == 0) {
            int v222 = 0;
          }
          if (v137 + v222 == v136) {
            return a2;
          }
        }
      }
      else
      {
LABEL_391:
        if (v14 == 17)
        {
          if (sub_1CB844168((uint64_t)a3, 0.0)) {
            return a2;
          }
        }
        else if ((v14 - 18) < 3 || v14 == 13)
        {
          return a2;
        }
      }
      if (sub_1CC03F414((uint64_t)&v226, a3)) {
        return a2;
      }
      return (const llvm::detail::DoubleAPFloat *)llvm::Constant::getNullValue(*(llvm::Constant **)a2, v48);
    case 28:
      uint64_t NullValue = (uint64_t)a2;
      if ((v20 | v19) >= 2u) {
        goto LABEL_258;
      }
      return (const llvm::detail::DoubleAPFloat *)NullValue;
    case 29:
      uint64_t NullValue = (uint64_t)a2;
      if ((v20 | v19) < 2u) {
        return (const llvm::detail::DoubleAPFloat *)NullValue;
      }
      int v135 = *(llvm::Constant **)a2;
      return (const llvm::detail::DoubleAPFloat *)llvm::Constant::getAllOnesValue(v135, v9, v10);
    case 30:
      if ((v20 | v19) <= 1u)
      {
LABEL_258:
        uint64_t v43 = *(llvm::Constant **)a2;
        goto LABEL_259;
      }
LABEL_255:
      uint64_t v143 = *(llvm::UndefValue **)a2;
      double result = (const llvm::detail::DoubleAPFloat *)llvm::UndefValue::get(v143, v9);
      break;
    default:
      goto LABEL_25;
  }
  return result;
}

void *llvm::ConstantFoldCompareInstruction(unsigned int a1, llvm::Type *a2, uint64_t a3, llvm::Constant *a4, BOOL a5)
{
  uint64_t v6 = (uint64_t)a2;
  uint64_t v118 = *MEMORY[0x1E4F143B8];
  int v8 = *(_DWORD *)(*(void *)a2 + 8);
  int v9 = (uint64_t **)(***(void ***)a2 + 1888);
  if (*(void *)a2) {
    BOOL v10 = (*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 18;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v11 = (llvm::Type *)*(unsigned int *)(*(void *)a2 + 32);
    if (v8 == 19) {
      llvm::ScalableVectorType::get(v9, v11);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v9, v11);
    }
    int v9 = v12;
  }
  if (a1 == 15)
  {
LABEL_130:
    return llvm::Constant::getAllOnesValue((llvm::Constant *)v9, a2, (const llvm::APInt *)a3);
  }
  if (!a1)
  {
LABEL_11:
    return (void *)llvm::Constant::getNullValue((llvm::Constant *)v9, a2);
  }
  int v14 = *(unsigned __int8 *)(v6 + 16);
  if (v14 == 12 || (unsigned int v15 = *(unsigned __int8 *)(a3 + 16), v15 == 12))
  {
    return llvm::PoisonValue::get((llvm::PoisonValue *)v9, a2);
  }
  if ((v14 - 11) >= 2 && v15 - 11 > 1)
  {
    if (v14 == 16)
    {
      uint64_t v16 = *(unsigned int *)(v6 + 32);
      if (v16 >= 0x41)
      {
        int v90 = 0;
        int64_t v91 = (unint64_t)(v16 + 63) >> 6;
        do
        {
          BOOL v92 = v91-- < 1;
          if (v92) {
            break;
          }
          unint64_t v93 = *(void *)(*(void *)(v6 + 24) + 8 * v91);
          v90 += __clz(v93);
        }
        while (!v93);
        int v94 = v16 | 0xFFFFFFC0;
        if ((v16 & 0x3F) == 0) {
          int v94 = 0;
        }
        if (v90 + v94 != v16) {
          goto LABEL_24;
        }
      }
      else if (*(void *)(v6 + 24))
      {
        goto LABEL_24;
      }
    }
    else if (v14 == 17)
    {
      char v58 = sub_1CB844168(v6, 0.0);
      unsigned int v15 = *(unsigned __int8 *)(a3 + 16);
      if ((v58 & 1) == 0)
      {
LABEL_24:
        if (a3 && v15 == 16)
        {
          uint64_t v17 = *(unsigned int *)(a3 + 32);
          if (v17 >= 0x41)
          {
            int v95 = 0;
            int64_t v96 = (unint64_t)(v17 + 63) >> 6;
            do
            {
              BOOL v92 = v96-- < 1;
              if (v92) {
                break;
              }
              unint64_t v97 = *(void *)(*(void *)(a3 + 24) + 8 * v96);
              v95 += __clz(v97);
            }
            while (!v97);
            int v98 = v17 | 0xFFFFFFC0;
            if ((v17 & 0x3F) == 0) {
              int v98 = 0;
            }
            if (v95 + v98 != v17) {
              goto LABEL_28;
            }
          }
          else if (*(void *)(a3 + 24))
          {
LABEL_28:
            BOOL v18 = *(llvm::Constant **)v6;
            if (*(_DWORD *)(*(void *)v6 + 8) == 269)
            {
              if (a1 == 33)
              {
                char v20 = (llvm::ConstantExpr *)v6;
                goto LABEL_82;
              }
              if (a1 == 32)
              {
                if (*(unsigned char *)(a3 + 16) == 16)
                {
                  Not = llvm::ConstantExpr::getNot((llvm::Constant **)a3, a2, (const llvm::APInt *)a3);
                  char v20 = (llvm::ConstantExpr *)v6;
LABEL_83:
                  return (void *)llvm::ConstantExpr::getXor(v20, Not, (llvm::Constant *)a3, a4);
                }
                char v20 = llvm::ConstantExpr::getNot((llvm::Constant **)v6, a2, (const llvm::APInt *)a3);
LABEL_82:
                Not = (llvm::Constant *)a3;
                goto LABEL_83;
              }
            }
            int v21 = *(unsigned __int8 *)(v6 + 16);
            if (v21 == 17)
            {
              if (*(unsigned char *)(a3 + 16) == 17)
              {
                unsigned int v22 = llvm::FCmpInst::compare(v6 + 24, a3 + 24, a1);
                goto LABEL_49;
              }
            }
            else if (v21 == 16 && *(unsigned char *)(a3 + 16) == 16)
            {
              unsigned int v22 = llvm::ICmpInst::compare(v6 + 24, a3 + 24, a1);
LABEL_49:
              unint64_t v25 = v22;
              goto LABEL_180;
            }
            if ((*(_DWORD *)(*(void *)v6 + 8) & 0xFE) == 0x12)
            {
              SplatValue = (uint64_t ***)llvm::Constant::getSplatValue((llvm::Constant *)v6, 0);
              if (SplatValue)
              {
                BOOL v27 = SplatValue;
                uint64_t v28 = (llvm::Constant *)llvm::Constant::getSplatValue((llvm::Constant *)a3, 0);
                if (v28)
                {
                  uint64_t v30 = *((unsigned int *)v18 + 8);
                  uint64_t v31 = *((unsigned __int8 *)v18 + 8) == 19;
                  if ((unsigned __int16)a1 <= 0xFu) {
                    uint64_t FCmp = llvm::ConstantExpr::getFCmp((llvm::ConstantExpr *)(unsigned __int16)a1, v27, v28, 0);
                  }
                  else {
                    uint64_t FCmp = llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)(unsigned __int16)a1, (unsigned __int16)v27, v28, 0, v29);
                  }
                  return (void *)llvm::ConstantVector::getSplat(v30 | (v31 << 32), FCmp);
                }
              }
              if (*((unsigned char *)v18 + 8) != 19)
              {
                uint64_t v113 = v115;
                uint64_t v114 = 0x400000000;
                uint64_t v39 = *((unsigned int *)v18 + 8);
                if (v39)
                {
                  unint64_t v40 = 0;
                  int v41 = (llvm::ConstantInt *)(***(void ***)v6 + 1960);
                  do
                  {
                    int v42 = (llvm::Constant *)llvm::ConstantInt::get(v41, v40, 0);
                    ElementInstructioint n = (uint64_t ***)llvm::ConstantFoldExtractElementInstruction((llvm *)v6, v42, v43);
                    if (!ElementInstruction)
                    {
                      unint64_t v51 = *(llvm::Constant **)v6;
                      uint64_t v52 = *(void *)(*(void *)v6 + 24);
                      if (v52)
                      {
                        uint64_t v116 = v6;
                        uint64_t v117 = v42;
                        uint64_t v53 = **(void **)v51 + 1512;
                        LODWORD(v107) = 61;
                        uint64_t v108 = &v116;
                        uint64_t v109 = 2;
                        long long v110 = 0u;
                        long long v111 = 0u;
                        uint64_t v112 = 0;
                        ElementInstructioint n = (uint64_t ***)sub_1CC56C20C(v53, v52, (unsigned __int8 *)&v107);
                      }
                      else
                      {
                        ElementInstructioint n = 0;
                      }
                    }
                    int64_t v45 = (llvm::Constant *)llvm::ConstantInt::get(v41, v40, 0);
                    int v47 = (llvm::Constant *)llvm::ConstantFoldExtractElementInstruction((llvm *)a3, v45, v46);
                    if (!v47)
                    {
                      int64_t v54 = *(void ***)a3;
                      uint64_t v55 = *(void *)(*(void *)a3 + 24);
                      if (v55)
                      {
                        uint64_t v116 = a3;
                        uint64_t v117 = v45;
                        uint64_t v56 = **v54 + 1512;
                        LODWORD(v107) = 61;
                        uint64_t v108 = &v116;
                        uint64_t v109 = 2;
                        long long v110 = 0u;
                        long long v111 = 0u;
                        uint64_t v112 = 0;
                        int v47 = (llvm::Constant *)sub_1CC56C20C(v56, v55, (unsigned __int8 *)&v107);
                      }
                      else
                      {
                        int v47 = 0;
                      }
                    }
                    if ((unsigned __int16)a1 <= 0xFu) {
                      uint64_t ICmp = llvm::ConstantExpr::getFCmp((llvm::ConstantExpr *)(unsigned __int16)a1, ElementInstruction, v47, 0);
                    }
                    else {
                      uint64_t ICmp = llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)(unsigned __int16)a1, (unsigned __int16)ElementInstruction, v47, 0, v48);
                    }
                    if (v114 >= (unint64_t)HIDWORD(v114)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((void *)v113 + v114) = ICmp;
                    int64_t v50 = (llvm::Type *)(v114 + 1);
                    LODWORD(v114) = v114 + 1;
                    ++v40;
                  }
                  while (v39 != v40);
                  uint64_t v57 = (llvm::FixedVectorType ***)v113;
                }
                else
                {
                  int64_t v50 = 0;
                  uint64_t v57 = (llvm::FixedVectorType ***)v115;
                }
                uint64_t Impl = (uint64_t)llvm::ConstantVector::getImpl(v57, (llvm::Type *)v50);
                if (!Impl)
                {
                  llvm::FixedVectorType::get(**v57, v50);
                  uint64_t Impl = sub_1CC56A4DC(**v60 + 1288, (uint64_t)v60, v57, v50);
                }
                if (v113 != v115) {
                  free(v113);
                }
                return (void *)Impl;
              }
              return 0;
            }
            if (*(_DWORD *)(*(void *)v6 + 8) <= 6u && (v21 == 5 || *(unsigned char *)(a3 + 16) == 5))
            {
              int v33 = sub_1CC541CB8((uint64_t ***)v6, (llvm::Constant *)a3);
              uint64_t Impl = 0;
              switch(v33)
              {
                case 1:
                  HIDWORD(v36) = a1 - 1;
                  LODWORD(v36) = a1 - 1;
                  unsigned int v35 = v36 >> 1;
                  if (v35 < 7 && ((0x75u >> v35) & 1) != 0) {
                    goto LABEL_178;
                  }
                  unint64_t v25 = a1 == 3;
                  goto LABEL_180;
                case 2:
                  unsigned int v23 = a1 - 2;
                  if (a1 - 2 >= 0xD) {
                    goto LABEL_179;
                  }
                  uint64_t v24 = &unk_1CFAC7F88;
                  goto LABEL_45;
                case 3:
                  if ((a1 & 0xFFFFFFF7) == 2) {
                    goto LABEL_178;
                  }
                  unint64_t v25 = 0;
                  uint64_t Impl = 0;
                  if ((a1 & 0xFFFFFFF7) != 4) {
                    return (void *)Impl;
                  }
                  goto LABEL_180;
                case 4:
                  unsigned int v23 = a1 - 4;
                  if (a1 - 4 >= 0xB) {
                    goto LABEL_179;
                  }
                  uint64_t v24 = &unk_1CFAC7F30;
                  goto LABEL_45;
                case 5:
                  if ((a1 & 0xFFFFFFF7) == 2) {
                    goto LABEL_179;
                  }
                  uint64_t Impl = 0;
                  if ((a1 & 0xFFFFFFF7) != 4) {
                    return (void *)Impl;
                  }
                  goto LABEL_178;
                case 6:
                  if ((a1 & 0xFFFFFFF7) == 1) {
                    goto LABEL_179;
                  }
                  uint64_t Impl = 0;
                  if ((a1 & 0xFFFFFFF7) == 6) {
                    goto LABEL_178;
                  }
                  return (void *)Impl;
                case 9:
                  if (a1 == 6) {
                    goto LABEL_179;
                  }
                  uint64_t Impl = 0;
                  if (a1 != 9) {
                    return (void *)Impl;
                  }
                  goto LABEL_178;
                default:
                  return (void *)Impl;
              }
            }
            unsigned int v37 = a1 - 38;
            switch(sub_1CC541EAC((llvm::Type *)v6, (llvm::Type *)a3, a1 - 38 < 4, (uint64_t)a4, a5))
            {
              case '!':
                BOOL v69 = a1 != 32;
                if (a1 != 33) {
                  goto LABEL_156;
                }
                goto LABEL_178;
              case '""':
                unsigned int v23 = a1 - 32;
                if (a1 - 32 >= 6) {
                  goto LABEL_157;
                }
                uint64_t v24 = &unk_1CFAC8070;
                goto LABEL_45;
              case '#':
                BOOL v69 = a1 != 36;
                if ((a1 & 0xFFFFFFFE) == 0x22) {
                  goto LABEL_178;
                }
                goto LABEL_156;
              case '$':
                unsigned int v23 = a1 - 32;
                if (a1 - 32 >= 6) {
                  goto LABEL_157;
                }
                uint64_t v24 = &unk_1CFAC7FF0;
                goto LABEL_45;
              case '%':
                BOOL v69 = a1 != 34;
                if ((a1 & 0xFFFFFFFE) == 0x24) {
                  goto LABEL_178;
                }
                goto LABEL_156;
              case '&':
                signed int v70 = a1 - 32;
                if (a1 - 32 >= 0xA || ((0x3C3u >> v70) & 1) == 0) {
                  goto LABEL_157;
                }
                int v71 = &unk_1CFAC80A0;
                goto LABEL_148;
              case '\'':
                BOOL v69 = a1 != 40;
                if ((a1 & 0xFFFFFFFE) != 0x26) {
                  goto LABEL_156;
                }
                goto LABEL_178;
              case '(':
                signed int v70 = a1 - 32;
                if (a1 - 32 >= 0xA || ((0x3C3u >> v70) & 1) == 0) {
                  goto LABEL_157;
                }
                int v71 = &unk_1CFAC8020;
LABEL_148:
                unint64_t v25 = v71[v70];
                goto LABEL_180;
              case ')':
                BOOL v69 = a1 != 38;
                if ((a1 & 0xFFFFFFFE) == 0x28) {
                  goto LABEL_178;
                }
LABEL_156:
                if (v69) {
                  goto LABEL_157;
                }
                goto LABEL_179;
              case '*':
LABEL_157:
                int v72 = *(unsigned __int8 *)(a3 + 16);
                if (v72 == 5 && *(_WORD *)(a3 + 18) == 49)
                {
                  int64_t v73 = *(llvm::Constant **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
                  uint64_t v74 = *(void *)v73;
                  int v75 = *(_DWORD *)(*(void *)v73 + 8);
                  if (((*(_DWORD *)(*(void *)a3 + 8) & 0xFE) == 18) == ((v75 & 0xFE) == 18))
                  {
                    unsigned int v76 = (v75 & 0xFE) == 0x12
                        ? *(unsigned __int8 *)(**(void **)(v74 + 16) + 8)
                        : *(_DWORD *)(*(void *)v73 + 8);
                    if (v76 >= 7)
                    {
                      if (*(void *)v6 != v74) {
                        LOWORD(v6) = sub_1CC56C0C0(49, v6);
                      }
                      unint64_t v81 = (unsigned __int16)a1;
                      unsigned __int16 v82 = v6;
                      uint64_t v83 = v73;
                      goto LABEL_197;
                    }
                  }
                }
                int v77 = *(unsigned __int8 *)(v6 + 16);
                if (v77 != 5) {
                  goto LABEL_195;
                }
                int v78 = *(unsigned __int16 *)(v6 + 18);
                if (v78 == 39)
                {
                  if (v37 < 4) {
                    goto LABEL_193;
                  }
                }
                else
                {
                  if (v78 != 40) {
                    return 0;
                  }
                  if (v37 >= 4) {
                    goto LABEL_193;
                  }
                }
                uint64_t v79 = *(void *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF));
                if (sub_1CC56C0C0(38, v6) == v79)
                {
                  int v80 = (llvm::ConstantExpr *)sub_1CC56C0C0(38, a3);
                  if (llvm::ConstantExpr::getCast((llvm::ConstantExpr *)*(unsigned __int16 *)(v6 + 18), v80, *(llvm::Constant ****)a3, 0) == (llvm::ConstantExpr *)a3)
                  {
                    unint64_t v81 = (unsigned __int16)a1;
                    unsigned __int16 v82 = v79;
                    uint64_t v83 = v80;
                    goto LABEL_197;
                  }
                }
LABEL_193:
                int v77 = *(unsigned __int8 *)(v6 + 16);
                if (v77 == 5) {
                  return 0;
                }
                int v72 = *(unsigned __int8 *)(a3 + 16);
LABEL_195:
                if (v72 != 5)
                {
                  if (v77 == 16)
                  {
                    uint64_t v84 = *(unsigned int *)(v6 + 32);
                    if (v84 >= 0x41)
                    {
                      int v99 = 0;
                      int64_t v100 = (unint64_t)(v84 + 63) >> 6;
                      do
                      {
                        BOOL v92 = v100-- < 1;
                        if (v92) {
                          break;
                        }
                        unint64_t v101 = *(void *)(*(void *)(v6 + 24) + 8 * v100);
                        v99 += __clz(v101);
                      }
                      while (!v101);
                      int v102 = v84 | 0xFFFFFFC0;
                      if ((v84 & 0x3F) == 0) {
                        int v102 = 0;
                      }
                      if (v99 + v102 != v84) {
                        return 0;
                      }
                    }
                    else if (*(void *)(v6 + 24))
                    {
                      return 0;
                    }
                  }
                  else if (v77 != 13)
                  {
                    if (v77 == 17)
                    {
                      if (!sub_1CB844168(v6, 0.0)) {
                        return 0;
                      }
                      int v72 = *(unsigned __int8 *)(a3 + 16);
                    }
                    else if ((v77 - 18) >= 3)
                    {
                      return 0;
                    }
                  }
                  if (a3 && v72 == 16)
                  {
                    uint64_t v85 = *(unsigned int *)(a3 + 32);
                    if (v85 >= 0x41)
                    {
                      int v103 = 0;
                      int64_t v104 = (unint64_t)(v85 + 63) >> 6;
                      do
                      {
                        BOOL v92 = v104-- < 1;
                        if (v92) {
                          break;
                        }
                        unint64_t v105 = *(void *)(*(void *)(a3 + 24) + 8 * v104);
                        v103 += __clz(v105);
                      }
                      while (!v105);
                      int v106 = v85 | 0xFFFFFFC0;
                      if ((v85 & 0x3F) == 0) {
                        int v106 = 0;
                      }
                      if (v103 + v106 == v85) {
                        return 0;
                      }
                    }
                    else if (!*(void *)(a3 + 24))
                    {
                      return 0;
                    }
                  }
                  else if (a3 && v72 == 17)
                  {
                    if (sub_1CB844168(a3, 0.0)) {
                      return 0;
                    }
                  }
                  else
                  {
                    unsigned __int8 v86 = v72 - 13;
                    if (v86 < 8u && ((0xE1u >> v86) & 1) != 0) {
                      return 0;
                    }
                  }
                }
                unint64_t v81 = word_1CFAC80F0[2 * a1];
                unsigned __int16 v82 = a3;
                uint64_t v83 = (llvm::Constant *)v6;
LABEL_197:
                return (void *)llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)v81, v82, v83, 0, v38);
              default:
                unint64_t v25 = 0;
                if (a1 > 0x29 || ((1 << a1) & 0x2A90000AA00) == 0) {
                  goto LABEL_180;
                }
LABEL_178:
                unint64_t v25 = 1;
                goto LABEL_180;
            }
          }
        }
        else if (a3 && v15 == 17)
        {
          if ((sub_1CB844168(a3, 0.0) & 1) == 0) {
            goto LABEL_28;
          }
        }
        else if (v15 > 0x14 || ((1 << v15) & 0x1C2000) == 0)
        {
          goto LABEL_28;
        }
        unsigned int v61 = *(unsigned __int8 *)(v6 + 16);
        if (v61 <= 3 && v61 != 1 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v6) & 1) == 0)
        {
          int v59 = *(llvm::Constant **)v6;
          if (*(_DWORD *)(*(void *)v6 + 8) <= 0xFFu)
          {
            switch(a1)
            {
              case ' ':
                goto LABEL_124;
              case '!':
                goto LABEL_134;
              case '#':
                goto LABEL_130;
              case '$':
                goto LABEL_11;
              default:
                goto LABEL_28;
            }
          }
        }
        if (a1 == 36) {
          goto LABEL_11;
        }
        if (a1 != 35) {
          goto LABEL_28;
        }
        goto LABEL_130;
      }
    }
    else if ((v14 - 18) >= 3 && v14 != 13)
    {
      goto LABEL_24;
    }
    if (v15 <= 3
      && v15 != 1
      && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)a3) & 1) == 0
      && *(_DWORD *)(*(void *)a3 + 8) <= 0xFFu)
    {
      if (a1 == 33)
      {
        int v59 = *(llvm::Constant **)v6;
LABEL_134:
        unint64_t v67 = *(uint64_t **)v59;
        uint64_t v68 = *v67;
        uint64_t Impl = *(void *)(*v67 + 1560);
        if (!Impl)
        {
          BOOL v87 = *(llvm::ConstantInt **)(v68 + 1888);
          unsigned int v88 = *(_DWORD *)(v68 + 1896);
          LODWORD(v108) = v88 >> 8;
          if (v88 >> 8 > 0x40) {
            operator new[]();
          }
          if (v88 <= 0xFF) {
            LOBYTE(v89) = 0;
          }
          else {
            unint64_t v89 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v88) + 63);
          }
          unint64_t v107 = v89 & 1;
          uint64_t Impl = (uint64_t)llvm::ConstantInt::get(v87, (llvm::LLVMContext *)&v107, (const llvm::APInt *)a3);
          if (v108 >= 0x41 && v107) {
            MEMORY[0x1D25D9CB0](v107, 0x1000C8000313F17);
          }
          *(void *)(v68 + 1560) = Impl;
        }
        return (void *)Impl;
      }
      if (a1 == 32)
      {
        int v59 = *(llvm::Constant **)v6;
LABEL_124:
        int v63 = *(uint64_t **)v59;
        uint64_t v64 = *v63;
        uint64_t Impl = *(void *)(*v63 + 1568);
        if (!Impl)
        {
          uint64_t v65 = *(llvm::ConstantInt **)(v64 + 1888);
          unsigned int v66 = *(_DWORD *)(v64 + 1896);
          LODWORD(v108) = v66 >> 8;
          if (v66 >> 8 > 0x40) {
            operator new[]();
          }
          unint64_t v107 = 0;
          uint64_t Impl = (uint64_t)llvm::ConstantInt::get(v65, (llvm::LLVMContext *)&v107, (const llvm::APInt *)a3);
          if (v108 >= 0x41 && v107) {
            MEMORY[0x1D25D9CB0](v107, 0x1000C8000313F17);
          }
          *(void *)(v64 + 1568) = Impl;
        }
        return (void *)Impl;
      }
    }
    goto LABEL_28;
  }
  if ((a1 & 0xFFFFFFFE) != 0x20)
  {
    unsigned int v23 = a1 - 32;
    if (a1 - 32 > 9)
    {
      unint64_t v25 = a1 - 8 < 7;
LABEL_180:
      return llvm::ConstantInt::get((llvm::ConstantInt *)v9, v25, 0);
    }
    if (v6 != a3)
    {
      if (v23 > 9)
      {
LABEL_179:
        unint64_t v25 = 0;
      }
      else
      {
        uint64_t v24 = &unk_1CFAC7EE0;
LABEL_45:
        unint64_t v25 = v24[v23];
      }
      goto LABEL_180;
    }
  }

  return (void *)llvm::UndefValue::get((llvm::UndefValue *)v9, a2);
}

uint64_t sub_1CC541CB8(uint64_t ***a1, llvm::Constant *a2)
{
  if (a1 == (uint64_t ***)a2) {
    return 9;
  }
  if (*((unsigned char *)a1 + 16) == 5) {
    return 16;
  }
  if (*((unsigned char *)a2 + 16) == 5) {
    return dword_1CFAC8198[(int)sub_1CC541CB8(a2, a1)];
  }
  uint64_t FCmp = llvm::ConstantExpr::getFCmp((llvm::ConstantExpr *)1, a1, a2, 0);
  if (FCmp && *(unsigned char *)(FCmp + 16) == 16)
  {
    uint64_t v6 = *(unsigned int *)(FCmp + 32);
    if (v6 > 0x40)
    {
      int v7 = 0;
      int64_t v8 = (unint64_t)(v6 + 63) >> 6;
      do
      {
        BOOL v9 = v8-- < 1;
        if (v9) {
          break;
        }
        unint64_t v10 = *(void *)(*(void *)(FCmp + 24) + 8 * v8);
        v7 += __clz(v10);
      }
      while (!v10);
      int v11 = v6 | 0xFFFFFFC0;
      if ((v6 & 0x3F) == 0) {
        int v11 = 0;
      }
      if (v7 + v11 != v6) {
        return 1;
      }
    }
    else if (*(void *)(FCmp + 24))
    {
      return 1;
    }
  }
  uint64_t v12 = llvm::ConstantExpr::getFCmp((llvm::ConstantExpr *)4, a1, a2, 0);
  if (v12 && *(unsigned char *)(v12 + 16) == 16)
  {
    uint64_t v13 = *(unsigned int *)(v12 + 32);
    if (v13 > 0x40)
    {
      int v14 = 0;
      int64_t v15 = (unint64_t)(v13 + 63) >> 6;
      do
      {
        BOOL v9 = v15-- < 1;
        if (v9) {
          break;
        }
        unint64_t v16 = *(void *)(*(void *)(v12 + 24) + 8 * v15);
        v14 += __clz(v16);
      }
      while (!v16);
      int v17 = v13 | 0xFFFFFFC0;
      if ((v13 & 0x3F) == 0) {
        int v17 = 0;
      }
      if (v14 + v17 != v13) {
        return 4;
      }
    }
    else if (*(void *)(v12 + 24))
    {
      return 4;
    }
  }
  uint64_t v18 = llvm::ConstantExpr::getFCmp((llvm::ConstantExpr *)2, a1, a2, 0);
  if (!v18 || *(unsigned char *)(v18 + 16) != 16) {
    return 16;
  }
  uint64_t v19 = *(unsigned int *)(v18 + 32);
  if (v19 > 0x40)
  {
    int v20 = 0;
    int64_t v21 = (unint64_t)(v19 + 63) >> 6;
    do
    {
      BOOL v9 = v21-- < 1;
      if (v9) {
        break;
      }
      unint64_t v22 = *(void *)(*(void *)(v18 + 24) + 8 * v21);
      v20 += __clz(v22);
    }
    while (!v22);
    int v23 = v19 | 0xFFFFFFC0;
    if ((v19 & 0x3F) == 0) {
      int v23 = 0;
    }
    if (v20 + v23 == v19) {
      return 16;
    }
  }
  else if (!*(void *)(v18 + 24))
  {
    return 16;
  }
  return 2;
}

uint64_t sub_1CC541EAC(llvm::Type *a1, llvm::Type *a2, char a3, uint64_t a4, BOOL a5)
{
  if (a1 == a2) {
    return 32;
  }
  uint64_t NullValue = (uint64_t)a2;
  uint64_t v7 = (uint64_t)a1;
  while (1)
  {
    unsigned int v8 = *(unsigned __int8 *)(v7 + 16);
    if (v8 >= 6)
    {
      if (*(unsigned __int8 *)(NullValue + 16) < 6u) {
        return dword_1CFAC8240[(int)sub_1CC541EAC(NullValue, v7, a3 & 1)];
      }
      uint64_t ICmp = llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)0x20, v7, (llvm::Constant *)NullValue, 0, a5);
      if (!ICmp || *(unsigned char *)(ICmp + 16) != 16)
      {
LABEL_78:
        if (a3) {
          uint64_t v24 = 40;
        }
        else {
          uint64_t v24 = 36;
        }
        uint64_t v33 = llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)v24, v7, (llvm::Constant *)NullValue, 0, v22);
        if (v33 && *(unsigned char *)(v33 + 16) == 16)
        {
          uint64_t v35 = *(unsigned int *)(v33 + 32);
          if (v35 > 0x40)
          {
            int v38 = 0;
            int64_t v39 = (unint64_t)(v35 + 63) >> 6;
            do
            {
              BOOL v18 = v39-- < 1;
              if (v18) {
                break;
              }
              unint64_t v40 = *(void *)(*(void *)(v33 + 24) + 8 * v39);
              v38 += __clz(v40);
            }
            while (!v40);
            int v41 = v35 | 0xFFFFFFC0;
            if ((v35 & 0x3F) == 0) {
              int v41 = 0;
            }
            if (v38 + v41 != v35) {
              return v24;
            }
          }
          else if (*(void *)(v33 + 24))
          {
            return v24;
          }
        }
        if (a3) {
          uint64_t v24 = 38;
        }
        else {
          uint64_t v24 = 34;
        }
        uint64_t v42 = llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)v24, v7, (llvm::Constant *)NullValue, 0, v34);
        if (!v42 || *(unsigned char *)(v42 + 16) != 16) {
          return 42;
        }
        uint64_t v43 = *(unsigned int *)(v42 + 32);
        if (v43 > 0x40)
        {
          int v47 = 0;
          int64_t v48 = (unint64_t)(v43 + 63) >> 6;
          do
          {
            BOOL v18 = v48-- < 1;
            if (v18) {
              break;
            }
            unint64_t v49 = *(void *)(*(void *)(v42 + 24) + 8 * v48);
            v47 += __clz(v49);
          }
          while (!v49);
          int v50 = v43 | 0xFFFFFFC0;
          if ((v43 & 0x3F) == 0) {
            int v50 = 0;
          }
          if (v47 + v50 == v43) {
            return 42;
          }
        }
        else if (!*(void *)(v42 + 24))
        {
          return 42;
        }
        return v24;
      }
      uint64_t v23 = *(unsigned int *)(ICmp + 32);
      if (v23 <= 0x40)
      {
        if (*(void *)(ICmp + 24)) {
          return 32;
        }
        goto LABEL_78;
      }
      int v29 = 0;
      int64_t v30 = (unint64_t)(v23 + 63) >> 6;
      do
      {
        BOOL v18 = v30-- < 1;
        if (v18) {
          break;
        }
        unint64_t v31 = *(void *)(*(void *)(ICmp + 24) + 8 * v30);
        v29 += __clz(v31);
      }
      while (!v31);
      int v32 = v23 | 0xFFFFFFC0;
      if ((v23 & 0x3F) == 0) {
        int v32 = 0;
      }
      if (v29 + v32 == v23) {
        goto LABEL_78;
      }
      return 32;
    }
    if (v8 <= 3)
    {
      unsigned int v25 = *(unsigned __int8 *)(NullValue + 16);
      if (v25 != 5)
      {
        if (v25 <= 3)
        {
          uint64_t v44 = v7;
LABEL_106:
          uint64_t v45 = NullValue;
          goto LABEL_107;
        }
        if (v25 != 4)
        {
          if ((llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v7) & 1) == 0
            && *(unsigned char *)(v7 + 16) != 1
            && *(_DWORD *)(*(void *)v7 + 8) < 0x100u)
          {
            return 34;
          }
          return 42;
        }
        return 33;
      }
      return dword_1CFAC8240[(int)sub_1CC541EAC(NullValue, v7, a3 & 1)];
    }
    if (v8 == 4)
    {
      int v26 = *(unsigned __int8 *)(NullValue + 16);
      if (v26 == 4)
      {
        if (*(void *)(NullValue - 64) == *(void *)(v7 - 64)) {
          return 42;
        }
      }
      else if (v26 == 5)
      {
        return dword_1CFAC8240[(int)sub_1CC541EAC(NullValue, v7, a3 & 1)];
      }
      return 33;
    }
    uint64_t v9 = *(unsigned __int16 *)(v7 + 18);
    if (v9 > 0x31) {
      return 42;
    }
    unint64_t v10 = *(unsigned __int8 **)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF));
    if (((1 << v9) & 0x198000000000) != 0) {
      goto LABEL_8;
    }
    if (v9 != 49) {
      break;
    }
    BOOL v15 = v10[16] > 3u || v10 == 0;
    if (!v15 && NullValue && *(unsigned __int8 *)(NullValue + 16) <= 3u)
    {
      uint64_t v44 = *(void *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF));
      goto LABEL_106;
    }
LABEL_8:
    if ((*(_DWORD *)(*(void *)v10 + 8) & 0xFE) == 0x12) {
      unsigned int v11 = *(unsigned __int8 *)(**(void **)(*(void *)v10 + 16) + 8);
    }
    else {
      unsigned int v11 = *(_DWORD *)(*(void *)v10 + 8);
    }
    if (v11 < 7) {
      return 42;
    }
    unsigned int v12 = *(unsigned __int8 *)(NullValue + 16);
    if (NullValue && v12 == 16)
    {
      uint64_t v13 = *(unsigned int *)(NullValue + 32);
      if (v13 >= 0x41)
      {
        int v16 = 0;
        int64_t v17 = (unint64_t)(v13 + 63) >> 6;
        do
        {
          BOOL v18 = v17-- < 1;
          if (v18) {
            break;
          }
          unint64_t v19 = *(void *)(*(void *)(NullValue + 24) + 8 * v17);
          v16 += __clz(v19);
        }
        while (!v19);
        int v20 = v13 | 0xFFFFFFC0;
        if ((v13 & 0x3F) == 0) {
          int v20 = 0;
        }
        if (v16 + v20 != v13) {
          return 42;
        }
      }
      else if (*(void *)(NullValue + 24))
      {
        return 42;
      }
    }
    else if (NullValue && v12 == 17)
    {
      if ((sub_1CB844168(NullValue, 0.0) & 1) == 0) {
        return 42;
      }
    }
    else if (v12 > 0x14 || ((1 << v12) & 0x1C2000) == 0)
    {
      return 42;
    }
    if ((*(_DWORD *)(*(void *)v7 + 8) & 0xFD) != 0xD) {
      return 42;
    }
    int v14 = *(unsigned __int16 *)(v7 + 18);
    if (v14 == 40) {
      a3 = 1;
    }
    else {
      a3 &= v14 != 39;
    }
    uint64_t NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)v10, a2);
    uint64_t v7 = (uint64_t)v10;
    if (v10 == (unsigned __int8 *)NullValue) {
      return 32;
    }
  }
  if (v9 != 34) {
    return 42;
  }
  unsigned int v27 = *(unsigned __int8 *)(NullValue + 16);
  if (v27 == 19)
  {
    BOOL v28 = v10[16] > 3u || v10 == 0;
    if (!v28
      && (llvm::GlobalValue::hasExternalWeakLinkage(*(llvm::GlobalValue **)(v7
                                                                          - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF))) & 1) == 0
      && (*(unsigned char *)(v7 + 17) & 2) != 0)
    {
      return 34;
    }
    return 42;
  }
  if (v27 <= 3)
  {
    if (v10[16] >= 4u) {
      uint64_t v51 = 0;
    }
    else {
      uint64_t v51 = *(void *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF));
    }
    if (v51) {
      BOOL v52 = v51 == NullValue;
    }
    else {
      BOOL v52 = 1;
    }
    if (v52 || !sub_1CC543B10(v7)) {
      return 42;
    }
    uint64_t v44 = v51;
    goto LABEL_106;
  }
  if (v27 != 62 && (v27 != 5 || *(_WORD *)(NullValue + 18) != 34)) {
    return 42;
  }
  int v36 = *(_DWORD *)(NullValue + 20);
  unsigned int v37 = (v36 & 0x40000000) != 0
      ? *(unsigned __int8 ***)(NullValue - 8)
      : (unsigned __int8 **)(NullValue - 32 * (v36 & 0x7FFFFFF));
  if (v10[16] > 3u) {
    return 42;
  }
  uint64_t v53 = *v37;
  BOOL v54 = (*v37)[16] > 3u || v10 == v53;
  if (v54 || !sub_1CC543B10(v7) || !sub_1CC543B10(NullValue)) {
    return 42;
  }
  uint64_t v44 = (uint64_t)v10;
  uint64_t v45 = (uint64_t)v53;
LABEL_107:

  return sub_1CC5439C0(v44, v45);
}

llvm::GlobalValue *llvm::ConstantFoldGetElementPtr(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = (llvm::GlobalValue *)a2;
  v267[2] = *MEMORY[0x1E4F143B8];
  if (!a6) {
    return v6;
  }
  unint64_t v7 = a6;
  unsigned int v8 = (uint64_t *)a5;
  uint64_t v11 = a1;
  sub_1CB845A7C(a1, a2, a5, a6);
  int v14 = v12;
  int v15 = *((unsigned __int8 *)v6 + 16);
  if (v15 == 12)
  {
LABEL_3:
    return (llvm::GlobalValue *)llvm::PoisonValue::get(v12, v13);
  }
  if ((v15 - 11) <= 1)
  {
    if (!a3)
    {
      return (llvm::GlobalValue *)llvm::UndefValue::get(v12, v13);
    }
    goto LABEL_3;
  }
  uint64_t v17 = *(void *)v6;
  if ((*(_DWORD *)(*(void *)v6 + 8) & 0xFE) == 0x12)
  {
    uint64_t v17 = **(void **)(v17 + 16);
    int v18 = *(unsigned __int8 *)(v17 + 8);
  }
  else
  {
    int v18 = *(_DWORD *)(*(void *)v6 + 8);
  }
  BOOL v19 = v18 == 15 && *(void *)(v17 + 24) == 0;
  unsigned int v254 = a3;
  if (v7 == 1 || v19)
  {
    uint64_t v252 = v11;
    uint64_t v20 = a4;
    int64_t v21 = v8;
    while (1)
    {
      uint64_t v22 = *v21;
      unsigned int v23 = *(unsigned __int8 *)(*v21 + 16);
      if (*v21) {
        BOOL v24 = v23 == 16;
      }
      else {
        BOOL v24 = 0;
      }
      if (v24)
      {
        uint64_t v25 = *(unsigned int *)(v22 + 32);
        if (v25 >= 0x41)
        {
          int v28 = 0;
          int64_t v29 = (unint64_t)(v25 + 63) >> 6;
          do
          {
            BOOL v30 = v29-- < 1;
            if (v30) {
              break;
            }
            unint64_t v31 = *(void *)(*(void *)(v22 + 24) + 8 * v29);
            v28 += __clz(v31);
          }
          while (!v31);
          int v32 = v25 | 0xFFFFFFC0;
          if ((v25 & 0x3F) == 0) {
            int v32 = 0;
          }
          if (v28 + v32 != v25)
          {
LABEL_48:
            int v15 = *((unsigned __int8 *)v6 + 16);
            a4 = v20;
            uint64_t v11 = v252;
            break;
          }
        }
        else if (*(void *)(v22 + 24))
        {
          goto LABEL_48;
        }
        goto LABEL_27;
      }
      if (v22) {
        BOOL v26 = v23 == 17;
      }
      else {
        BOOL v26 = 0;
      }
      if (v26)
      {
        if ((sub_1CB844168(*v21, 0.0) & 1) == 0)
        {
          unsigned int v23 = *(unsigned __int8 *)(v22 + 16);
LABEL_38:
          if (v23 - 11 > 1) {
            goto LABEL_48;
          }
        }
      }
      else if (v23 > 0x14 || ((1 << v23) & 0x1C2000) == 0)
      {
        goto LABEL_38;
      }
LABEL_27:
      if (++v21 == &v8[v7])
      {
        if ((*((_DWORD *)v14 + 2) & 0xFE) == 0x12 && (*(_DWORD *)(*(void *)v6 + 8) & 0xFE) != 0x12)
        {
          unint64_t v54 = *((unsigned int *)v14 + 8) | ((unint64_t)(*((_DWORD *)v14 + 2) == 19) << 32);
          return (llvm::GlobalValue *)llvm::ConstantVector::getSplat(v54, v6);
        }
        return v6;
      }
    }
  }
  if (v15 == 16)
  {
    uint64_t v33 = *((unsigned int *)v6 + 8);
    if (v33 < 0x41)
    {
      if (*((void *)v6 + 3)) {
        goto LABEL_52;
      }
LABEL_240:
      unint64_t v139 = v8;
      while (1)
      {
        uint64_t v140 = *v139;
        int v141 = *(unsigned __int8 *)(*v139 + 16);
        if ((v141 - 11) >= 2)
        {
          if (v141 == 16)
          {
            uint64_t v142 = *(unsigned int *)(v140 + 32);
            if (v142 >= 0x41)
            {
              int v144 = 0;
              int64_t v145 = (unint64_t)(v142 + 63) >> 6;
              do
              {
                BOOL v30 = v145-- < 1;
                if (v30) {
                  break;
                }
                unint64_t v146 = *(void *)(*(void *)(v140 + 24) + 8 * v145);
                v144 += __clz(v146);
              }
              while (!v146);
              int v147 = v142 | 0xFFFFFFC0;
              if ((v142 & 0x3F) == 0) {
                int v147 = 0;
              }
              if (v144 + v147 != v142) {
                goto LABEL_52;
              }
            }
            else if (*(void *)(v140 + 24))
            {
              goto LABEL_52;
            }
          }
          else if (v141 == 17)
          {
            if ((sub_1CB844168(v140, 0.0) & 1) == 0) {
              goto LABEL_52;
            }
          }
          else if ((v141 - 18) >= 3 && v141 != 13)
          {
            goto LABEL_52;
          }
        }
        if (++v139 == &v8[v7])
        {
          uint64_t v148 = v7;
          uint64_t v149 = *(void *)v6;
          if ((*(_DWORD *)(*(void *)v6 + 8) & 0xFE) == 0x12) {
            uint64_t v149 = **(void **)(v149 + 16);
          }
          IndexedType = (llvm::PointerType *)llvm::GetElementPtrInst::getIndexedType(v11, (uint64_t)v8, v148);
          long long v151 = (uint64_t **)llvm::PointerType::get(IndexedType, (llvm::Type *)(*(_DWORD *)(v149 + 8) >> 8));
          unsigned int v152 = (llvm::Constant *)llvm::PointerType::get(IndexedType, (llvm::Type *)(*(_DWORD *)(v149 + 8) >> 8));
          uint64_t v154 = *(void *)v6;
          if (*(void *)v6 && (*(_DWORD *)(v154 + 8) & 0xFE) == 0x12)
          {
            char v155 = (llvm::Type *)*(unsigned int *)(v154 + 32);
            if (*(_DWORD *)(v154 + 8) == 19) {
              llvm::ScalableVectorType::get(v151, v155);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v151, v155);
            }
          }
          uint64_t v156 = 8 * v148;
          while (1)
          {
            uint64_t v157 = *(void *)*v8;
            if (v157 && (*(_DWORD *)(v157 + 8) & 0xFE) == 18) {
              break;
            }
            ++v8;
            v156 -= 8;
            if (!v156) {
              goto LABEL_278;
            }
          }
          BOOL v159 = (llvm::Type *)*(unsigned int *)(v157 + 32);
          if (*(_DWORD *)(v157 + 8) == 19) {
            llvm::ScalableVectorType::get(v151, v159);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v151, v159);
          }
LABEL_278:
          return (llvm::GlobalValue *)llvm::Constant::getNullValue(v152, v153);
        }
      }
    }
    int v227 = 0;
    int64_t v228 = (unint64_t)(v33 + 63) >> 6;
    do
    {
      BOOL v30 = v228-- < 1;
      if (v30) {
        break;
      }
      unint64_t v229 = *(void *)(*((void *)v6 + 3) + 8 * v228);
      v227 += __clz(v229);
    }
    while (!v229);
    int v230 = v33 | 0xFFFFFFC0;
    if ((v33 & 0x3F) == 0) {
      int v230 = 0;
    }
    if (v227 + v230 == v33) {
      goto LABEL_240;
    }
  }
  else if (v15 == 17)
  {
    if (sub_1CB844168((uint64_t)v6, 0.0)) {
      goto LABEL_240;
    }
  }
  else if ((v15 - 18) < 3 || v15 == 13)
  {
    goto LABEL_240;
  }
LABEL_52:
  if (*((unsigned char *)v6 + 16) != 5) {
    goto LABEL_111;
  }
  if (*((_WORD *)v6 + 9) == 34 && *((void *)v6 + 4) == v11)
  {
    SExtOrBitCast = (llvm::ConstantExpr *)*v8;
    unsigned int v47 = *(unsigned __int8 *)(*v8 + 16);
    if (*v8 && v47 == 16)
    {
      uint64_t v48 = *((unsigned int *)SExtOrBitCast + 8);
      if (v48 >= 0x41)
      {
        int v235 = 0;
        int64_t v236 = (unint64_t)(v48 + 63) >> 6;
        do
        {
          BOOL v30 = v236-- < 1;
          if (v30) {
            break;
          }
          unint64_t v237 = *(void *)(*((void *)SExtOrBitCast + 3) + 8 * v236);
          v235 += __clz(v237);
        }
        while (!v237);
        int v238 = v48 | 0xFFFFFFC0;
        if ((v48 & 0x3F) == 0) {
          int v238 = 0;
        }
        if (v235 + v238 != v48) {
          goto LABEL_98;
        }
      }
      else if (*((void *)SExtOrBitCast + 3))
      {
LABEL_98:
        unint64_t v49 = (uint64_t *)((char *)v6 + 24);
        goto LABEL_99;
      }
    }
    else if (SExtOrBitCast && v47 == 17)
    {
      if ((sub_1CB844168(*v8, 0.0) & 1) == 0)
      {
        if (*((unsigned char *)v6 + 16) == 62) {
          unint64_t v49 = (uint64_t *)((char *)v6 + 64);
        }
        else {
          unint64_t v49 = (uint64_t *)((char *)v6 + 24);
        }
LABEL_99:
        uint64_t v50 = *v49;
        int v51 = *((_DWORD *)v6 + 5);
        if ((v51 & 0x40000000) != 0)
        {
          uint64_t v53 = (char *)*((void *)v6 - 1);
          uint64_t v52 = v51 & 0x7FFFFFF;
        }
        else
        {
          uint64_t v52 = v51 & 0x7FFFFFF;
          uint64_t v53 = (char *)v6 - 32 * v52;
        }
        v264 = v53 + 32;
        uint64_t v265 = v50 | 4;
        if (v52 != 1)
        {
          unint64_t v133 = v7;
          int v134 = &v53[32 * v52];
          do
          {
            char v135 = v265;
            sub_1CB8460E4((uint64_t)&v264);
          }
          while (v264 != v134);
          unint64_t v7 = v133;
          if ((v135 & 4) != 0 && SExtOrBitCast && *((unsigned char *)SExtOrBitCast + 16) == 16)
          {
            int v137 = *((_DWORD *)v6 + 5);
            int64_t v138 = (v137 & 0x40000000) != 0
                 ? (llvm::GlobalValue *)*((void *)v6 - 1)
                 : (llvm::GlobalValue *)((char *)v6 - 32 * (v137 & 0x7FFFFFF));
            int64_t v179 = (llvm::Type **)*((void *)v138 + 4 * (v137 & 0x7FFFFFFu) - 4);
            unint64_t v180 = *v179;
            if ((*((_DWORD *)*v179 + 2) & 0xFE) != 0x12)
            {
              v264 = v266;
              uint64_t v265 = 0x1000000000;
              if (v133 + (v137 & 0x7FFFFFFu) - 1 >= 0x11) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              BOOL v249 = v8;
              if ((v137 & 0x40000000) != 0)
              {
                unint64_t v182 = (char *)*((void *)v6 - 1);
                uint64_t v181 = v137 & 0x7FFFFFF;
              }
              else
              {
                uint64_t v181 = v137 & 0x7FFFFFF;
                unint64_t v182 = (char *)v6 - 32 * v181;
              }
              uint64_t v204 = 32 * (v181 - 1) - 32;
              int v205 = v265;
              if ((unint64_t)v265 + (v204 >> 5) > HIDWORD(v265)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v181 != 2)
              {
                unint64_t v206 = (uint64_t *)(v182 + 32);
                int v207 = (char *)v264 + 8 * v265;
                uint64_t v208 = 32 * v181 - 64;
                do
                {
                  uint64_t v209 = *v206;
                  v206 += 4;
                  *v207++ = v209;
                  v208 -= 32;
                }
                while (v208);
              }
              LODWORD(v265) = v205 + ((unint64_t)v204 >> 5);
              uint64_t v210 = v6;
              if (v180 != *(llvm::Type **)SExtOrBitCast)
              {
                if (*((_DWORD *)v180 + 2) >> 8 <= *(_DWORD *)(*(void *)SExtOrBitCast + 8) >> 8) {
                  unsigned int v211 = *(_DWORD *)(*(void *)SExtOrBitCast + 8) >> 8;
                }
                else {
                  unsigned int v211 = *((_DWORD *)v180 + 2) >> 8;
                }
                if (v211 <= 0x40) {
                  uint64_t v212 = 64;
                }
                else {
                  uint64_t v212 = v211;
                }
                unsigned int v213 = (llvm::Type ***)llvm::IntegerType::get(*(llvm::IntegerType **)v180, (llvm::LLVMContext *)v212);
                SExtOrBitCast = llvm::ConstantExpr::getSExtOrBitCast((llvm::Type **)SExtOrBitCast, v213, v214);
                int64_t v179 = (llvm::Type **)llvm::ConstantExpr::getSExtOrBitCast(v179, v213, v215);
              }
              unsigned int v8 = v249;
              uint64_t v216 = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)0xD, SExtOrBitCast, (llvm::Constant *)v179, v136);
              if (!v216)
              {
                BOOL v243 = *(llvm::Type **)SExtOrBitCast;
                if (*(void *)SExtOrBitCast)
                {
                  v267[0] = SExtOrBitCast;
                  v267[1] = v179;
                  uint64_t v244 = **(void **)v243 + 1512;
                  LODWORD(v258) = 13;
                  uint64_t v259 = v267;
                  uint64_t v260 = 2;
                  long long v261 = 0u;
                  long long v262 = 0u;
                  uint64_t v263 = 0;
                  uint64_t v216 = sub_1CC56C20C(v244, (uint64_t)v243, (unsigned __int8 *)&v258);
                }
                else
                {
                  uint64_t v216 = 0;
                }
                unsigned int v8 = v249;
              }
              if (v265 >= HIDWORD(v265)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v264 + v265) = v216;
              LODWORD(v265) = v265 + 1;
              sub_1CC188254((unsigned int *)&v264, (unsigned char *)v8 + 8, &v8[v133]);
              uint64_t v6 = v210;
              unint64_t v217 = *((unsigned __int8 *)v210 + 17);
              int v218 = *((_DWORD *)v210 + 5);
              int v219 = (v218 & 0x7FFFFFF) - 2;
              BOOL v24 = v219 == (v217 >> 2) - 1;
              uint64_t v220 = v219 != (v217 >> 2) - 1;
              uint64_t v221 = (v217 >> 2) - 1;
              if (v24) {
                uint64_t v221 = 0;
              }
              uint64_t v222 = v220 << 32;
              if (v217 < 4)
              {
                uint64_t v221 = 0;
                uint64_t v222 = 0;
              }
              uint64_t v223 = 24;
              if (*((unsigned char *)v210 + 16) == 62) {
                uint64_t v223 = 64;
              }
              if ((v218 & 0x40000000) != 0) {
                uint64_t v224 = (void *)*((void *)v210 - 1);
              }
              else {
                uint64_t v224 = (void *)((char *)v210 - 32 * (v218 & 0x7FFFFFF));
              }
              uint64_t ElementPtr = llvm::ConstantExpr::getGetElementPtr(*(void *)((char *)v210 + v223), *v224, v264, v265, v254 & (v217 >> 1), v222 | v221, 0);
              unint64_t v7 = v133;
              if (v264 != v266) {
                free(v264);
              }
              if (ElementPtr) {
                return (llvm::GlobalValue *)ElementPtr;
              }
            }
          }
        }
        goto LABEL_55;
      }
    }
    else
    {
      BOOL v30 = v47 > 0x14;
      int v161 = (1 << v47) & 0x1C2000;
      if (v30 || v161 == 0) {
        goto LABEL_98;
      }
    }
    uint64_t v185 = v11;
    v264 = v266;
    uint64_t v265 = 0x1000000000;
    int v186 = *((_DWORD *)v6 + 5);
    if (v7 + (v186 & 0x7FFFFFFu) - 1 >= 0x11) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unint64_t v187 = v7;
    int v188 = v8;
    if ((v186 & 0x40000000) != 0)
    {
      unsigned int v190 = (char *)*((void *)v6 - 1);
      uint64_t v189 = v186 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v189 = v186 & 0x7FFFFFF;
      unsigned int v190 = (char *)v6 - 32 * v189;
    }
    uint64_t v191 = 32 * v189 - 32;
    int v192 = v265;
    if ((unint64_t)v265 + (v191 >> 5) > HIDWORD(v265)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v189 != 1)
    {
      int v193 = (uint64_t *)(v190 + 32);
      uint64_t v194 = (char *)v264 + 8 * v265;
      uint64_t v195 = 32 * v189 - 32;
      do
      {
        uint64_t v196 = *v193;
        v193 += 4;
        *v194++ = v196;
        v195 -= 32;
      }
      while (v195);
    }
    LODWORD(v265) = v192 + ((unint64_t)v191 >> 5);
    unsigned int v8 = v188;
    unint64_t v7 = v187;
    sub_1CC188254((unsigned int *)&v264, (unsigned char *)v188 + 8, &v188[v187]);
    uint64_t v197 = 24;
    if (*((unsigned char *)v6 + 16) == 62) {
      uint64_t v197 = 64;
    }
    uint64_t v198 = *(void *)((char *)v6 + v197);
    int v199 = *((_DWORD *)v6 + 5);
    if ((v199 & 0x40000000) != 0) {
      int64_t v200 = (uint64_t *)*((void *)v6 - 1);
    }
    else {
      int64_t v200 = (uint64_t *)((char *)v6 - 32 * (v199 & 0x7FFFFFF));
    }
    uint64_t v11 = v185;
    uint64_t v201 = *v200;
    unint64_t v202 = *((unsigned __int8 *)v6 + 17);
    if (v202 <= 3) {
      uint64_t v203 = 0;
    }
    else {
      uint64_t v203 = ((v202 >> 2) + 0xFFFFFFFF) | 0x100000000;
    }
    uint64_t ElementPtr = llvm::ConstantExpr::getGetElementPtr(v198, v201, v264, v265, v254 & ((v202 & 2) >> 1), v203, 0);
    if (v264 != v266) {
      free(v264);
    }
    if (ElementPtr) {
      return (llvm::GlobalValue *)ElementPtr;
    }
  }
LABEL_55:
  if (v7 < 2 || *((unsigned __int16 *)v6 + 9) - 38 > 0xC) {
    goto LABEL_111;
  }
  uint64_t v34 = *v8;
  unsigned int v35 = *(unsigned __int8 *)(*v8 + 16);
  if (!*v8 || v35 != 16)
  {
    if (v34 && v35 == 17)
    {
      if ((sub_1CB844168(v34, 0.0) & 1) == 0) {
        goto LABEL_111;
      }
    }
    else
    {
      BOOL v30 = v35 > 0x14;
      int v55 = (1 << v35) & 0x1C2000;
      if (v30 || v55 == 0) {
        goto LABEL_111;
      }
    }
LABEL_61:
    unsigned int v37 = (uint64_t *)*((void *)v6 - 4 * (*((_DWORD *)v6 + 5) & 0x7FFFFFF));
    uint64_t v38 = *v37;
    if (*(unsigned char *)(*v37 + 8) != 15) {
      uint64_t v38 = 0;
    }
    uint64_t v39 = *(void *)v6;
    if (*(unsigned char *)(*(void *)v6 + 8) != 15) {
      uint64_t v39 = 0;
    }
    if (v38) {
      BOOL v40 = v39 == 0;
    }
    else {
      BOOL v40 = 1;
    }
    if (!v40 && *(void *)(v38 + 24) && *(void *)(v39 + 24))
    {
      if (*(unsigned char *)(**(void **)(v38 + 16) + 8) == 17) {
        uint64_t v41 = **(void **)(v38 + 16);
      }
      else {
        uint64_t v41 = 0;
      }
      uint64_t v42 = **(void **)(v39 + 16);
      if (*(unsigned char *)(v42 + 8) != 17) {
        uint64_t v42 = 0;
      }
      BOOL v43 = !v41 || v42 == 0;
      if (!v43
        && *(void *)(v41 + 24) == *(void *)(v42 + 24)
        && (*(_DWORD *)(v39 + 8) ^ *(_DWORD *)(v38 + 8)) <= 0xFF)
      {
        return (llvm::GlobalValue *)llvm::ConstantExpr::getGetElementPtr(v41, v37, v8, v7, v254, a4, 0);
      }
    }
    goto LABEL_111;
  }
  uint64_t v36 = *(unsigned int *)(v34 + 32);
  if (v36 >= 0x41)
  {
    int v231 = 0;
    int64_t v232 = (unint64_t)(v36 + 63) >> 6;
    do
    {
      BOOL v30 = v232-- < 1;
      if (v30) {
        break;
      }
      unint64_t v233 = *(void *)(*(void *)(v34 + 24) + 8 * v232);
      v231 += __clz(v233);
    }
    while (!v233);
    int v234 = v36 | 0xFFFFFFC0;
    if ((v36 & 0x3F) == 0) {
      int v234 = 0;
    }
    if (v231 + v234 != v36) {
      goto LABEL_111;
    }
    goto LABEL_61;
  }
  if (!*(void *)(v34 + 24)) {
    goto LABEL_61;
  }
LABEL_111:
  v264 = v266;
  uint64_t v265 = 0x800000000;
  unint64_t v57 = *(void *)v6;
  uint64_t v258 = v8;
  uint64_t v259 = (void *)(v11 | 4);
  BOOL v58 = *(unsigned __int8 *)(*v8 + 16) - 17 < 0xFFFFFFFE;
  if (v7 == 1)
  {
LABEL_212:
    uint64_t ElementPtr = 0;
    if (v58 || (v254 & 1) != 0) {
      goto LABEL_217;
    }
    if (*((unsigned char *)v6 + 16) != 3 || (llvm::GlobalValue::hasExternalWeakLinkage(v6) & 1) != 0) {
      goto LABEL_216;
    }
    uint64_t v127 = v11;
    uint64_t v128 = *v8;
    unsigned int v129 = *(unsigned __int8 *)(*v8 + 16);
    if (*v8 && v129 == 16)
    {
      uint64_t v130 = *(unsigned int *)(v128 + 32);
      if (v130 >= 0x41)
      {
        int v239 = 0;
        int64_t v240 = (unint64_t)(v130 + 63) >> 6;
        do
        {
          BOOL v30 = v240-- < 1;
          if (v30) {
            break;
          }
          unint64_t v241 = *(void *)(*(void *)(v128 + 24) + 8 * v240);
          v239 += __clz(v241);
        }
        while (!v241);
        int v242 = v130 | 0xFFFFFFC0;
        if ((v130 & 0x3F) == 0) {
          int v242 = 0;
        }
        if (v239 + v242 != v130) {
          goto LABEL_223;
        }
      }
      else if (*(void *)(v128 + 24))
      {
LABEL_223:
        unsigned int v129 = 16;
        goto LABEL_224;
      }
    }
    else if (v128 && v129 == 17)
    {
      if ((sub_1CB844168(*v8, 0.0) & 1) == 0)
      {
        uint64_t v128 = *v8;
        unsigned int v129 = *(unsigned __int8 *)(*v8 + 16);
        goto LABEL_224;
      }
    }
    else if (v129 > 0x14 || ((1 << v129) & 0x1C2000) == 0)
    {
LABEL_224:
      if (v128 && v129 == 16)
      {
        uint64_t v131 = *(unsigned int *)(v128 + 32);
        if (v131 <= 0x40)
        {
          uint64_t v132 = *(void *)(v128 + 24);
          goto LABEL_228;
        }
        int v163 = 0;
        int64_t v164 = (unint64_t)(v131 + 63) >> 6;
        do
        {
          BOOL v30 = v164-- < 1;
          if (v30) {
            break;
          }
          unint64_t v165 = *(void *)(*(void *)(v128 + 24) + 8 * v164);
          v163 += __clz(v165);
        }
        while (!v165);
      }
      else
      {
        if (*(unsigned char *)(v128 + 40))
        {
          if ((*(unsigned char *)(v128 + 40) & 2) == 0) {
            goto LABEL_216;
          }
        }
        else
        {
          *(unsigned char *)(v128 + 40) |= 1u;
          if (llvm::ConstantDataVector::isSplatData((llvm::ConstantDataVector *)v128)) {
            char v225 = 2;
          }
          else {
            char v225 = 0;
          }
          char v226 = *(unsigned char *)(v128 + 40) & 0xFD | v225;
          *(unsigned char *)(v128 + 40) = v226;
          if ((v226 & 2) == 0) {
            goto LABEL_216;
          }
        }
        ElementAsConstant = llvm::ConstantDataSequential::getElementAsConstant((llvm::ConstantFP ***)v128, 0);
        if (!ElementAsConstant || ElementAsConstant[16] != 16) {
          goto LABEL_216;
        }
        uint64_t v131 = *((unsigned int *)ElementAsConstant + 8);
        if (v131 <= 0x40)
        {
          uint64_t v132 = *((void *)ElementAsConstant + 3);
LABEL_228:
          if (v132 == 1) {
            goto LABEL_300;
          }
          goto LABEL_216;
        }
        int v163 = 0;
        int64_t v183 = (unint64_t)(v131 + 63) >> 6;
        do
        {
          BOOL v30 = v183-- < 1;
          if (v30) {
            break;
          }
          unint64_t v184 = *(void *)(*((void *)ElementAsConstant + 3) + 8 * v183);
          v163 += __clz(v184);
        }
        while (!v184);
      }
      int v166 = v131 | 0xFFFFFFC0;
      if ((v131 & 0x3F) == 0) {
        int v166 = 0;
      }
      if (v163 + v166 == v131 - 1)
      {
LABEL_300:
        if (v7 != 1)
        {
          uint64_t v167 = 1;
          while (1)
          {
            uint64_t v168 = v8[v167];
            unsigned int v169 = *(unsigned __int8 *)(v168 + 16);
            if (v168) {
              BOOL v170 = v169 == 16;
            }
            else {
              BOOL v170 = 0;
            }
            if (v170)
            {
              uint64_t v171 = *(unsigned int *)(v168 + 32);
              if (v171 >= 0x41)
              {
                int v175 = 0;
                int64_t v176 = (unint64_t)(v171 + 63) >> 6;
                do
                {
                  BOOL v30 = v176-- < 1;
                  if (v30) {
                    break;
                  }
                  unint64_t v177 = *(void *)(*(void *)(v168 + 24) + 8 * v176);
                  v175 += __clz(v177);
                }
                while (!v177);
                int v178 = v171 | 0xFFFFFFC0;
                if ((v171 & 0x3F) == 0) {
                  int v178 = 0;
                }
                if (v175 + v178 != v171) {
                  goto LABEL_216;
                }
              }
              else if (*(void *)(v168 + 24))
              {
                goto LABEL_216;
              }
            }
            else
            {
              if (v168) {
                BOOL v172 = v169 == 17;
              }
              else {
                BOOL v172 = 0;
              }
              if (v172)
              {
                if ((sub_1CB844168(v168, 0.0) & 1) == 0) {
                  goto LABEL_216;
                }
              }
              else
              {
                BOOL v30 = v169 > 0x14;
                int v173 = (1 << v169) & 0x1C2000;
                if (v30 || v173 == 0) {
                  goto LABEL_216;
                }
              }
            }
            if (++v167 == v7) {
              goto LABEL_301;
            }
          }
        }
        goto LABEL_301;
      }
LABEL_216:
      uint64_t ElementPtr = 0;
      goto LABEL_217;
    }
LABEL_301:
    unint64_t v125 = v127;
    unint64_t v126 = v6;
    int v124 = v8;
    unint64_t v121 = v7;
    uint64_t v122 = 1;
    goto LABEL_211;
  }
  BOOL v257 = *(unsigned __int8 *)(*v8 + 16) - 17 < 0xFFFFFFFE;
  uint64_t v246 = v6;
  uint64_t v255 = (a4 + 1);
  uint64_t v256 = a4 & 0xFF00000000;
  unint64_t v59 = v11;
  uint64_t v60 = 1;
  int v61 = 1;
  uint64_t v251 = a4;
  unint64_t v253 = v59;
  unint64_t v250 = v7;
  do
  {
    unint64_t v62 = v59;
    int v63 = (llvm::ConstantFP ***)v8[v60];
    int v64 = *((unsigned __int8 *)v63 + 16);
    if ((v64 - 15) > 1)
    {
LABEL_124:
      BOOL v257 = 1;
      goto LABEL_125;
    }
    uint64_t v65 = v60 - 1;
    if (v256) {
      BOOL v66 = v60 == v255;
    }
    else {
      BOOL v66 = 0;
    }
    char v67 = v66;
    if (*(unsigned __int8 *)(v8[v60 - 1] + 16) - 17 >= 0xFFFFFFFE && (v67 & 1) == 0)
    {
      int v68 = *(unsigned __int8 *)(v62 + 8);
      if (v68 != 16)
      {
        if ((v68 & 0xFE) == 0x12) {
          goto LABEL_124;
        }
        if (v64 == 16)
        {
          if (sub_1CC54388C(*(void *)(v62 + 32), v8[v60])) {
            goto LABEL_125;
          }
          unsigned int v76 = v63 + 3;
          unsigned int v77 = *((_DWORD *)v63 + 8);
          unsigned int v78 = v77 - 1;
          if (v77 >= 0x41) {
            unsigned int v76 = (void *)(*v76 + 8 * (v78 >> 6));
          }
          if ((*v76 >> v78)) {
            goto LABEL_124;
          }
        }
        else
        {
          BOOL v247 = v8;
          int v79 = *((_DWORD *)*v63 + 8);
          if (!v79)
          {
LABEL_167:
            unsigned int v8 = v247;
            unint64_t v7 = v250;
            a4 = v251;
            goto LABEL_125;
          }
          unsigned int v80 = 0;
          char v81 = 1;
          do
          {
            unsigned __int16 v82 = (char *)llvm::ConstantDataSequential::getElementAsConstant(v63, v80);
            BOOL v83 = sub_1CC54388C(*(void *)(v62 + 32), (uint64_t)v82);
            uint64_t v84 = v82 + 24;
            unsigned int v85 = *((_DWORD *)v82 + 8);
            unsigned int v86 = v85 - 1;
            if (v85 >= 0x41) {
              uint64_t v84 = (void *)(*v84 + 8 * (v86 >> 6));
            }
            if ((*v84 >> v86))
            {
              BOOL v257 = 1;
              goto LABEL_167;
            }
            v81 &= v83;
            ++v80;
          }
          while (v79 != v80);
          char v87 = v81 | v257;
          unsigned int v8 = v247;
          unint64_t v7 = v250;
          a4 = v251;
          if (v87) {
            goto LABEL_125;
          }
          BOOL v257 = 0;
        }
        if (*(unsigned char *)(v57 + 8) == 16) {
          goto LABEL_124;
        }
        sub_1CC34BDE0((uint64_t)&v264, v7);
        unint64_t v89 = (llvm::FixedVectorType **)*((void *)v264 + v65);
        if (!v89) {
          unint64_t v89 = (llvm::FixedVectorType **)v8[v65];
        }
        unint64_t v90 = *(void *)(v62 + 32);
        Splat = (llvm::FixedVectorType **)v8[v60];
        int v92 = *((_DWORD *)*Splat + 2) & 0xFE;
        BOOL v93 = v92 == 18;
        int v94 = *((_DWORD *)*v89 + 2) & 0xFE;
        if (v94 == 18) {
          BOOL v93 = 1;
        }
        BOOL v245 = v93;
        if (v92 != 18 && v94 == 18)
        {
          Splat = (llvm::FixedVectorType **)llvm::ConstantDataVector::getSplat((llvm::ConstantDataVector *)*((unsigned int *)*v89 + 8), Splat, v88);
        }
        else if (v94 != 18 && v92 == 18)
        {
          unint64_t v89 = (llvm::FixedVectorType **)llvm::ConstantDataVector::getSplat((llvm::ConstantDataVector *)*((unsigned int *)*Splat + 8), v89, v88);
        }
        unint64_t v97 = *Splat;
        if ((*((_DWORD *)*Splat + 2) & 0xFE) == 0x12) {
          unint64_t v97 = (llvm::FixedVectorType *)**((void **)v97 + 2);
        }
        int64_t v100 = (llvm::FixedVectorType **)llvm::ConstantInt::get(v97, v90, 0);
        if (v245)
        {
          if (v94 == 18) {
            unint64_t v101 = v89;
          }
          else {
            unint64_t v101 = Splat;
          }
          int64_t v100 = (llvm::FixedVectorType **)llvm::ConstantDataVector::getSplat((llvm::ConstantDataVector *)*((unsigned int *)*v101 + 8), v100, v98);
        }
        SReint m = llvm::ConstantExpr::getSRem((llvm::ConstantExpr *)Splat, (llvm::Constant *)v100, v98, v99);
        *((void *)v264 + v60) = SRem;
        SDiv = llvm::ConstantExpr::getSDiv((llvm::ConstantExpr *)Splat, (llvm::Constant *)v100, 0, v103);
        unint64_t v105 = *v89;
        uint64_t v248 = (llvm::Type **)SDiv;
        if ((*((_DWORD *)*v89 + 2) & 0xFE) == 0x12) {
          unint64_t v105 = (llvm::FixedVectorType *)**((void **)v105 + 2);
        }
        unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v105);
        unint64_t v107 = *v248;
        uint64_t v108 = *v248;
        if ((*((_DWORD *)*v248 + 2) & 0xFE) == 0x12) {
          uint64_t v108 = (llvm::Type *)**((void **)v107 + 2);
        }
        unsigned int v109 = llvm::Type::getPrimitiveSizeInBits(v108);
        if (PrimitiveSizeInBits <= v109) {
          unsigned int v110 = v109;
        }
        else {
          unsigned int v110 = PrimitiveSizeInBits;
        }
        if (v110 <= 0x40) {
          uint64_t v111 = 64;
        }
        else {
          uint64_t v111 = v110;
        }
        uint64_t v112 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)v107, (llvm::LLVMContext *)v111);
        if (v245)
        {
          if (v94 == 18) {
            uint64_t v113 = v89;
          }
          else {
            uint64_t v113 = Splat;
          }
          llvm::FixedVectorType::get(v112, (llvm::Type *)*((unsigned int *)*v113 + 8));
        }
        unint64_t v7 = v250;
        a4 = v251;
        unsigned int v114 = *((_DWORD *)*v89 + 2);
        if ((v114 & 0xFE) == 0x12) {
          unsigned int v114 = *(_DWORD *)(**((void **)*v89 + 2) + 8);
        }
        if (v114 != 13 || v114 >> 8 != v111) {
          unint64_t v89 = (llvm::FixedVectorType **)sub_1CC56C0C0(40, v89);
        }
        uint64_t v115 = (llvm::Constant *)v248;
        unsigned int v116 = *((_DWORD *)*v248 + 2);
        if ((v116 & 0xFE) == 0x12) {
          unsigned int v116 = *(_DWORD *)(**((void **)*v248 + 2) + 8);
        }
        int v117 = v116;
        unsigned int v118 = v116 >> 8;
        if (v117 != 13 || v118 != v111) {
          uint64_t v115 = (llvm::Constant *)sub_1CC56C0C0(40, v248);
        }
        Add = llvm::ConstantExpr::getAdd((llvm::ConstantExpr *)v89, v115, 0, 0);
        *((void *)v264 + v65) = Add;
      }
    }
LABEL_125:
    uint64_t v69 = sub_1CB90797C((uint64_t)&v258);
    uint64_t v70 = *(void *)(v69 + 8);
    unint64_t v59 = v70 & 0xFFFFFFFFFFFFFFF8;
    if ((v70 & 4) == 0 || !v59)
    {
      Aggregateunsigned int Element = **(void ***)v69;
      if (AggregateElement) {
        BOOL v72 = *((unsigned char *)AggregateElement + 16) == 16;
      }
      else {
        BOOL v72 = 0;
      }
      if (!v72) {
        Aggregateunsigned int Element = llvm::Constant::getAggregateElement((llvm::Constant *)AggregateElement, 0);
      }
      int v75 = (unsigned int *)AggregateElement[3];
      int64_t v73 = (unsigned int *)(AggregateElement + 3);
      uint64_t v74 = v75;
      if (v73[2] < 0x41) {
        uint64_t v74 = v73;
      }
      unint64_t v59 = *(void *)(*(void *)(v59 + 16) + 8 * *v74);
    }
    ++v61;
    ++v60;
    unint64_t v57 = v62;
  }
  while (v61 != v7);
  unint64_t v121 = v265;
  uint64_t v6 = v246;
  uint64_t v11 = v253;
  BOOL v58 = v257;
  if (!v265) {
    goto LABEL_212;
  }
  uint64_t v122 = v254;
  if (v7)
  {
    uint64_t v123 = 0;
    do
    {
      if (!*(void *)((char *)v264 + v123 * 8)) {
        *(void *)((char *)v264 + v123 * 8) = v8[v123];
      }
      ++v123;
    }
    while (v7 != v123);
  }
  int v124 = v264;
  unint64_t v125 = v253;
  unint64_t v126 = v246;
LABEL_211:
  uint64_t ElementPtr = llvm::ConstantExpr::getGetElementPtr(v125, v126, v124, v121, v122, a4, 0);
LABEL_217:
  if (v264 != v266) {
    free(v264);
  }
  return (llvm::GlobalValue *)ElementPtr;
}

BOOL sub_1CC54388C(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = (unint64_t *)(a2 + 24);
  uint64_t v3 = *(unsigned int *)(a2 + 32);
  unsigned int v4 = v3 - 1;
  if (v3 > 0x40)
  {
    uint64_t v18 = a1;
    int v19 = *(_DWORD *)(a2 + 32);
    unint64_t v20 = *v2;
    if ((*(void *)(*v2 + 8 * (v4 >> 6)) >> v4))
    {
      BOOL v17 = __CFADD__(v3 - llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)(a2 + 24)) - 64, 65);
      a1 = v18;
      unint64_t v5 = v20;
      if (!v17) {
        return 0;
      }
      goto LABEL_20;
    }
    int v12 = 0;
    int64_t v13 = (unint64_t)(v3 + 63) >> 6;
    do
    {
      if (v13-- < 1) {
        break;
      }
      unint64_t v15 = *(void *)(v20 + 8 * v13);
      v12 += __clz(v15);
    }
    while (!v15);
    LODWORD(v3) = *(_DWORD *)(a2 + 32);
    unsigned int v16 = v19 | 0xFFFFFFC0;
    if ((v19 & 0x3F) == 0) {
      unsigned int v16 = 0;
    }
    int v9 = v12 + v16;
    unint64_t v5 = v20;
  }
  else
  {
    unint64_t v5 = *v2;
    unint64_t v6 = v5 >> v4;
    int v7 = v3 + __clz(v5) - 64;
    int v8 = __clz(~(v5 << -(char)v3));
    if (!v3) {
      int v8 = 0;
    }
    if (v6) {
      int v9 = v8;
    }
    else {
      int v9 = v7;
    }
  }
  if ((v3 - v9 - 64) < 0xFFFFFFBF) {
    return 0;
  }
  if (v3 <= 0x40)
  {
    uint64_t v11 = (uint64_t)(v5 << -(char)v3) >> -(char)v3;
    return v11 >= 0 && a1 - 1 >= (unint64_t)v11;
  }
LABEL_20:
  uint64_t v11 = *(void *)v5;
  return v11 >= 0 && a1 - 1 >= (unint64_t)v11;
}

uint64_t sub_1CC5439C0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16) == 1
    || *(unsigned char *)(a2 + 16) == 1
    || (llvm::GlobalValue::isInterposable((llvm::GlobalValue *)a1) & 1) != 0
    || (*(_DWORD *)(a1 + 32) & 0xC0) == 0x80)
  {
    return 42;
  }
  if (*(unsigned char *)(a1 + 16) != 3) {
    goto LABEL_9;
  }
  unsigned int v4 = *(unsigned __int8 **)(a1 + 24);
  unsigned int v5 = v4[8];
  if (v5 > 0x11) {
    goto LABEL_17;
  }
  if (((1 << v5) & 0xAC7F) != 0) {
    goto LABEL_8;
  }
  if (((1 << v5) & 0x30000) == 0)
  {
LABEL_17:
    if ((v5 & 0xFE) != 0x12 && v5 != 21) {
      return 42;
    }
  }
  if (!llvm::Type::isSizedDerivedType((uint64_t)v4, 0)) {
    return 42;
  }
LABEL_8:
  if (llvm::Type::isEmptyTy((llvm::Type *)v4)) {
    return 42;
  }
LABEL_9:
  if ((llvm::GlobalValue::isInterposable((llvm::GlobalValue *)a2) & 1) != 0 || (*(_DWORD *)(a2 + 32) & 0xC0) == 0x80) {
    return 42;
  }
  if (*(unsigned char *)(a2 + 16) != 3) {
    return 33;
  }
  unint64_t v6 = *(unsigned __int8 **)(a2 + 24);
  unsigned int v7 = v6[8];
  if (v7 > 0x11)
  {
LABEL_27:
    if ((v7 & 0xFE) != 0x12 && v7 != 21) {
      return 42;
    }
LABEL_25:
    if (!llvm::Type::isSizedDerivedType((uint64_t)v6, 0)) {
      return 42;
    }
    goto LABEL_14;
  }
  if (((1 << v7) & 0xAC7F) == 0)
  {
    if (((1 << v7) & 0x30000) != 0) {
      goto LABEL_25;
    }
    goto LABEL_27;
  }
LABEL_14:
  if (!llvm::Type::isEmptyTy((llvm::Type *)v6)) {
    return 33;
  }
  return 42;
}

uint64_t sub_1CC543B10(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 20);
  if ((v1 & 0x40000000) != 0)
  {
    uint64_t v3 = *(void *)(a1 - 8);
    uint64_t v2 = v1 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v2 = v1 & 0x7FFFFFF;
    uint64_t v3 = a1 - 32 * v2;
  }
  if (v2 == 1) {
    return 1;
  }
  unsigned int v4 = (uint64_t *)(v3 + 32 * v2);
  unsigned int v5 = (uint64_t *)(v3 + 32);
  while (1)
  {
    uint64_t v6 = *v5;
    if (!*v5 || *(unsigned char *)(*v5 + 16) != 16) {
      break;
    }
    uint64_t v8 = *(unsigned int *)(v6 + 32);
    if (v8 > 0x40)
    {
      int v9 = 0;
      int64_t v10 = (unint64_t)(v8 + 63) >> 6;
      do
      {
        if (v10-- < 1) {
          break;
        }
        unint64_t v12 = *(void *)(*(void *)(v6 + 24) + 8 * v10);
        v9 += __clz(v12);
      }
      while (!v12);
      int v13 = v8 | 0xFFFFFFC0;
      if ((v8 & 0x3F) == 0) {
        int v13 = 0;
      }
      if (v9 + v13 != v8) {
        return 0;
      }
    }
    else if (*(void *)(v6 + 24))
    {
      return 0;
    }
    v5 += 4;
    if (v5 == v4) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_1CC543BC4(uint64_t a1)
{
  v26[8] = *MEMORY[0x1E4F143B8];
  int v1 = *(unsigned __int8 *)(a1 + 16);
  unsigned int v2 = (v1 - 11);
  if (v2 < 2) {
    return 1;
  }
  if (v2 > 0xFC)
  {
    int v19 = v23;
    unint64_t v20 = v23;
    uint64_t v21 = 8;
    int v22 = 0;
    BOOL v24 = v26;
    uint64_t v25 = 0x800000000;
    v18[0] = (llvm::SmallPtrSetImplBase *)&v19;
    v18[1] = (llvm::SmallPtrSetImplBase *)&v24;
    int v6 = sub_1CC04C108(v18, a1);
    char v7 = 0;
    if (v6)
    {
      while (1)
      {
        BOOL v17 = v25 == 0;
        if (!v25) {
          break;
        }
        uint64_t v15 = v24[v25 - 1];
        LODWORD(v25) = v25 - 1;
        char v16 = sub_1CC04C108(v18, v15);
        char v7 = v17;
        if ((v16 & 1) == 0) {
          goto LABEL_15;
        }
      }
      char v7 = 1;
    }
LABEL_15:
    if (v24 != v26)
    {
      char v13 = v7;
      free(v24);
      char v7 = v13;
    }
    if (v20 != v19)
    {
      char v14 = v7;
      free(v20);
      char v7 = v14;
    }
    if (v7) {
      return 1;
    }
    if (!a1) {
      return 0;
    }
    int v1 = *(unsigned __int8 *)(a1 + 16);
  }
  if (v1 == 16)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 32);
    if (v4 >= 0x41)
    {
      int v8 = 0;
      int64_t v9 = (unint64_t)(v4 + 63) >> 6;
      do
      {
        if (v9-- < 1) {
          break;
        }
        unint64_t v11 = *(void *)(*(void *)(a1 + 24) + 8 * v9);
        v8 += __clz(v11);
      }
      while (!v11);
      int v12 = v4 | 0xFFFFFFC0;
      if ((v4 & 0x3F) == 0) {
        int v12 = 0;
      }
      if (v8 + v12 != v4) {
        return sub_1CC03F414((uint64_t)&v19, (llvm::Constant *)a1);
      }
    }
    else if (*(void *)(a1 + 24))
    {
      return sub_1CC03F414((uint64_t)&v19, (llvm::Constant *)a1);
    }
    return 1;
  }
  if (v1 == 17)
  {
    if ((sub_1CB844168(a1, 0.0) & 1) == 0) {
      return sub_1CC03F414((uint64_t)&v19, (llvm::Constant *)a1);
    }
    return 1;
  }
  uint64_t result = 1;
  if ((v1 - 18) >= 3 && v1 != 13) {
    return sub_1CC03F414((uint64_t)&v19, (llvm::Constant *)a1);
  }
  return result;
}

unint64_t *llvm::ConstantRange::ConstantRange(unint64_t *this, unsigned int a2, int a3)
{
  *((_DWORD *)this + 2) = a2;
  if (a3)
  {
    if (a2 > 0x40) {
      operator new[]();
    }
    unint64_t v3 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
    if (!a2) {
      unint64_t v3 = 0;
    }
    *this = v3;
    *((_DWORD *)this + 6) = a2;
    unint64_t v4 = *this;
  }
  else
  {
    if (a2 > 0x40) {
      operator new[]();
    }
    unint64_t v4 = 0;
    *this = 0;
    *((_DWORD *)this + 6) = a2;
  }
  this[2] = v4;
  return this;
}

{
  unint64_t v3;
  unint64_t v4;

  *((_DWORD *)this + 2) = a2;
  if (a3)
  {
    if (a2 > 0x40) {
      operator new[]();
    }
    unint64_t v3 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
    if (!a2) {
      unint64_t v3 = 0;
    }
    *this = v3;
    *((_DWORD *)this + 6) = a2;
    unint64_t v4 = *this;
  }
  else
  {
    if (a2 > 0x40) {
      operator new[]();
    }
    unint64_t v4 = 0;
    *this = 0;
    *((_DWORD *)this + 6) = a2;
  }
  this[2] = v4;
  return this;
}

uint64_t *llvm::ConstantRange::ConstantRange(uint64_t *a1, uint64_t *a2)
{
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  *a1 = *a2;
  *((_DWORD *)a2 + 2) = 0;
  unsigned int v5 = *((_DWORD *)a1 + 2);
  if (v5 > 0x40) {
    operator new[]();
  }
  uint64_t v4 = *a1;
  llvm::APInt::operator+=((uint64_t)&v4, 1uLL);
  *((_DWORD *)a1 + 6) = v5;
  a1[2] = v4;
  return a1;
}

{
  uint64_t v4;
  unsigned int v5;

  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  *a1 = *a2;
  *((_DWORD *)a2 + 2) = 0;
  unsigned int v5 = *((_DWORD *)a1 + 2);
  if (v5 > 0x40) {
    operator new[]();
  }
  uint64_t v4 = *a1;
  llvm::APInt::operator+=((uint64_t)&v4, 1uLL);
  *((_DWORD *)a1 + 6) = v5;
  a1[2] = v4;
  return a1;
}

uint64_t llvm::ConstantRange::ConstantRange(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(void *)uint64_t result = *(void *)a2;
  *(_DWORD *)(a2 + 8) = 0;
  *(_DWORD *)(result + 24) = *(_DWORD *)(a3 + 8);
  *(void *)(result + 16) = *(void *)a3;
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

{
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(void *)uint64_t result = *(void *)a2;
  *(_DWORD *)(a2 + 8) = 0;
  *(_DWORD *)(result + 24) = *(_DWORD *)(a3 + 8);
  *(void *)(result + 16) = *(void *)a3;
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

_DWORD *llvm::ConstantRange::fromKnownBits@<X0>(_DWORD *result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v5 = result[2];
  if (v5 > 0x40)
  {
    int v8 = result;
    int v9 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)result);
    uint64_t result = v8;
    if (v9 != v5) {
      goto LABEL_12;
    }
  }
  else if (*(void *)result)
  {
    goto LABEL_12;
  }
  unsigned int v6 = result[6];
  if (v6 > 0x40)
  {
    uint64_t v25 = result;
    int v26 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(result + 4));
    uint64_t result = v25;
    if (v26 == v6) {
      goto LABEL_5;
    }
  }
  else if (!*((void *)result + 2))
  {
LABEL_5:
    *(_DWORD *)(a3 + 8) = v5;
    if (v5 > 0x40) {
      operator new[]();
    }
    if (v5) {
      unint64_t v7 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
    }
    else {
      unint64_t v7 = 0;
    }
    *(void *)a3 = v7;
    *(_DWORD *)(a3 + 24) = v5;
    *(void *)(a3 + 16) = v7;
    return result;
  }
LABEL_12:
  if ((a2 & 1) == 0)
  {
    unsigned int v10 = result[6];
LABEL_14:
    if (v10 > 0x40) {
      operator new[]();
    }
    uint64_t v11 = *((void *)result + 2);
    unsigned int v31 = v5;
    if (v5 > 0x40) {
      operator new[]();
    }
    unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
    if (!v5) {
      unint64_t v12 = 0;
    }
    unint64_t v13 = v12 & ~*(void *)result;
    unsigned int v30 = v5;
    unint64_t v29 = v13;
    uint64_t result = (_DWORD *)llvm::APInt::operator+=((uint64_t)&v29, 1uLL);
    unsigned int v14 = v30;
    unint64_t v15 = v29;
    *(_DWORD *)(a3 + 8) = v10;
    *(void *)a3 = v11;
    *(_DWORD *)(a3 + 24) = v14;
    *(void *)(a3 + 16) = v15;
    return result;
  }
  char v16 = result + 4;
  uint64_t v17 = *((void *)result + 2);
  unsigned int v10 = result[6];
  char v18 = v10 - 1;
  if (v10 >= 0x41) {
    char v16 = (void *)(v17 + 8 * ((v10 - 1) >> 6));
  }
  uint64_t v19 = 1 << v18;
  if (((1 << v18) & *v16) != 0) {
    goto LABEL_14;
  }
  unint64_t v20 = (void *)(*(void *)result + 8 * ((v5 - 1) >> 6));
  if (v5 < 0x41) {
    unint64_t v20 = result;
  }
  if ((*v20 >> (v5 - 1))) {
    goto LABEL_14;
  }
  if (v10 >= 0x41) {
    operator new[]();
  }
  unsigned int v31 = v5;
  if (v5 > 0x40) {
    operator new[]();
  }
  unint64_t v21 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
  if (!v5) {
    unint64_t v21 = 0;
  }
  uint64_t v22 = v21 & ~*(void *)result & ~(1 << (v5 - 1));
  unsigned int v28 = v5;
  uint64_t v27 = v22;
  uint64_t result = (_DWORD *)llvm::APInt::operator+=((uint64_t)&v27, 1uLL);
  unsigned int v23 = v28;
  uint64_t v24 = v27;
  unsigned int v28 = 0;
  *(_DWORD *)(a3 + 8) = v10;
  *(void *)a3 = v19 | v17;
  *(_DWORD *)(a3 + 24) = v23;
  *(void *)(a3 + 16) = v24;
  return result;
}

uint64_t llvm::ConstantRange::makeAllowedICmpRegion@<X0>(llvm::ConstantRange *this@<X1>, uint64_t result@<X0>, uint64_t a3@<X8>)
{
  uint64_t v5 = *((unsigned int *)this + 2);
  if (v5 <= 0x40)
  {
    unsigned int v6 = *(unint64_t **)this;
    if (*((void *)this + 2) | *(void *)this)
    {
      switch((int)result)
      {
        case '!':
          unsigned int v97 = *((_DWORD *)this + 2);
          int64_t v96 = v6;
          uint64_t result = llvm::APInt::operator+=((uint64_t)&v96, 1uLL);
          unsigned int v9 = v97;
          unsigned int v10 = v96;
          unsigned int v97 = 0;
          uint64_t v11 = *((unsigned int *)this + 6);
          if (v11 > 0x40)
          {
            uint64_t result = memcmp(*((const void **)this + 2), v96, ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8);
            BOOL v12 = result == 0;
          }
          else
          {
            BOOL v12 = *((void *)this + 2) == (void)v96;
          }
          int v13 = v12;
          if (v9 >= 0x41)
          {
            if (v10)
            {
              uint64_t result = MEMORY[0x1D25D9CB0](v10, 0x1000C8000313F17);
              if (v97 >= 0x41)
              {
                uint64_t result = (uint64_t)v96;
                if (v96) {
                  uint64_t result = MEMORY[0x1D25D9CB0](v96, 0x1000C8000313F17);
                }
              }
            }
          }
          if (v13)
          {
            unsigned int v14 = *((_DWORD *)this + 6);
            if (v14 > 0x40) {
              operator new[]();
            }
            uint64_t v15 = *((void *)this + 2);
            unsigned int v16 = *((_DWORD *)this + 2);
            if (v16 < 0x41)
            {
LABEL_18:
              uint64_t v17 = *(unint64_t **)this;
              *(_DWORD *)(a3 + 8) = v14;
              *(void *)a3 = v15;
              *(_DWORD *)(a3 + 24) = v16;
              *(void *)(a3 + 16) = v17;
              return result;
            }
LABEL_116:
            operator new[]();
          }
          *(_DWORD *)(a3 + 8) = v5;
          if (v5) {
            unint64_t v41 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
          }
          else {
            unint64_t v41 = 0;
          }
          *(void *)a3 = v41;
          uint64_t result = a3 + 16;
          *(_DWORD *)(a3 + 24) = v5;
          goto LABEL_74;
        case '""':
          llvm::ConstantRange::getUnsignedMin((uint64_t)this, (uint64_t)&v96);
          unsigned int v21 = v97;
          if (!v97) {
            goto LABEL_136;
          }
          if (v97 > 0x40)
          {
            if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v96) != v21)
            {
              uint64_t v22 = v96;
              goto LABEL_30;
            }
          }
          else
          {
            uint64_t v22 = v96;
            if (v96 != (unint64_t *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v97))
            {
LABEL_30:
              unsigned int v89 = v21;
              unsigned int v88 = v22;
              uint64_t result = llvm::APInt::operator+=((uint64_t)&v88, 1uLL);
              unsigned int v23 = v89;
              uint64_t v24 = v88;
              unsigned int v89 = 0;
              *(_DWORD *)(a3 + 8) = v23;
              *(void *)a3 = v24;
              goto LABEL_31;
            }
          }
LABEL_136:
          *(_DWORD *)(a3 + 8) = v5;
          *(void *)a3 = 0;
          uint64_t result = a3 + 16;
          *(_DWORD *)(a3 + 24) = v5;
          goto LABEL_137;
        case '#':
          uint64_t result = llvm::ConstantRange::getUnsignedMin((uint64_t)this, (uint64_t)&__s1);
          unsigned int v25 = v84;
          if (v84 > 0x40)
          {
            int v26 = __s1;
            uint64_t result = memcmp(__s1, 0, (((unint64_t)v84 + 63) >> 3) & 0x3FFFFFF8);
            if (!result)
            {
              *(_DWORD *)(a3 + 8) = v25;
              operator new[]();
            }
            goto LABEL_35;
          }
          int v26 = __s1;
          if (__s1)
          {
LABEL_35:
            *(_DWORD *)(a3 + 8) = v25;
            *(void *)a3 = v26;
LABEL_31:
            *(_DWORD *)(a3 + 24) = v5;
LABEL_32:
            *(void *)(a3 + 16) = 0;
            return result;
          }
          *(_DWORD *)(a3 + 8) = v84;
          unint64_t v32 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v25;
          if (!v25) {
            unint64_t v32 = 0;
          }
          *(void *)a3 = v32;
          *(_DWORD *)(a3 + 24) = v25;
          *(void *)(a3 + 16) = v32;
          if (v25 < 0x41) {
            return result;
          }
          goto LABEL_62;
        case '$':
          uint64_t result = (uint64_t)llvm::ConstantRange::getUnsignedMax((char **)this, (uint64_t)&v96);
          unsigned int v18 = v97;
          if (v97 > 0x40)
          {
            uint64_t result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v96);
            if (result != v18) {
              goto LABEL_21;
            }
          }
          else if (v96)
          {
LABEL_21:
            int v8 = v96;
            *(_DWORD *)(a3 + 8) = v5;
            goto LABEL_22;
          }
          *(_DWORD *)(a3 + 8) = v5;
          *(void *)a3 = 0;
          uint64_t result = a3 + 16;
          *(_DWORD *)(a3 + 24) = v5;
          goto LABEL_119;
        case '%':
          llvm::ConstantRange::getUnsignedMax((char **)this, (uint64_t)&__s2);
          uint64_t result = llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
          unsigned int v27 = v94;
          unsigned int v28 = __s2;
          unsigned int v94 = 0;
          if (__s2)
          {
            *(_DWORD *)(a3 + 8) = v5;
            *(void *)a3 = 0;
            *(_DWORD *)(a3 + 24) = v27;
            *(void *)(a3 + 16) = v28;
          }
          else
          {
            *(_DWORD *)(a3 + 8) = v5;
            unint64_t v33 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
            if (!v5) {
              unint64_t v33 = 0;
            }
            *(void *)a3 = v33;
            *(_DWORD *)(a3 + 24) = v5;
            *(void *)(a3 + 16) = v33;
          }
          if (v94 >= 0x41)
          {
            uint64_t result = (uint64_t)__s2;
            if (__s2) {
              return MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
            }
          }
          return result;
        case '&':
          llvm::ConstantRange::getSignedMin((uint64_t)this, (uint64_t)&v96);
          unsigned int v29 = v97;
          if (v97 > 0x40)
          {
            unint64_t v20 = v96;
            if ((v96[(v97 - 1) >> 6] >> (v97 - 1))) {
              goto LABEL_40;
            }
            unsigned int v66 = v97 - 1;
            if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v96) != v66) {
              goto LABEL_40;
            }
          }
          else
          {
            unint64_t v20 = v96;
            if (v96 != (unint64_t *)~(-1 << (v97 - 1)))
            {
LABEL_40:
              unsigned int v87 = v29;
              unsigned int v86 = v20;
              uint64_t result = llvm::APInt::operator+=((uint64_t)&v86, 1uLL);
              unsigned int v30 = v87;
              unsigned int v31 = v86;
              unsigned int v87 = 0;
              uint64_t v85 = 1 << (v5 - 1);
              *(_DWORD *)(a3 + 8) = v30;
              *(void *)a3 = v31;
              *(_DWORD *)(a3 + 24) = v5;
              goto LABEL_41;
            }
          }
          *(_DWORD *)(a3 + 8) = v5;
          *(void *)a3 = 0;
          uint64_t result = a3 + 16;
          *(_DWORD *)(a3 + 24) = v5;
          goto LABEL_154;
        case '\'':
          uint64_t result = llvm::ConstantRange::getSignedMin((uint64_t)this, (uint64_t)&v81);
          int v79 = (const void *)(1 << (v5 - 1));
          unsigned int v34 = v82;
          if (v82 > 0x40)
          {
            uint64_t v35 = 1 << (v5 - 1);
            int v26 = v81;
            uint64_t result = memcmp(v81, v79, (((unint64_t)v82 + 63) >> 3) & 0x3FFFFFF8);
            if (!result)
            {
              *(_DWORD *)(a3 + 8) = v34;
              llvm::APInt::initSlowCase((llvm::APInt *)a3);
            }
            goto LABEL_56;
          }
          uint64_t v35 = 1 << (v5 - 1);
          int v26 = v81;
          if (v81 != v79)
          {
LABEL_56:
            *(_DWORD *)(a3 + 8) = v34;
            *(void *)a3 = v26;
            *(_DWORD *)(a3 + 24) = v5;
            *(void *)(a3 + 16) = v35;
            return result;
          }
          *(_DWORD *)(a3 + 8) = v82;
          if (v34) {
            unint64_t v39 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v34;
          }
          else {
            unint64_t v39 = 0;
          }
          *(void *)a3 = v39;
          uint64_t result = a3 + 16;
          *(_DWORD *)(a3 + 24) = v34;
          *(void *)(a3 + 16) = v39;
          if (v34 < 0x41) {
            return result;
          }
LABEL_62:
          if (!v26) {
            return result;
          }
          goto LABEL_63;
        case '(':
          uint64_t result = (uint64_t)llvm::ConstantRange::getSignedMax(this, (uint64_t)&v96);
          unsigned int v19 = v97;
          if (v97 > 0x40)
          {
            unsigned int v42 = v97 - 1;
            unint64_t v20 = v96;
            if (((v96[(v97 - 1) >> 6] >> (v97 - 1)) & 1) == 0) {
              goto LABEL_25;
            }
            uint64_t result = llvm::APInt::countTrailingZerosSlowCase(&v96);
            if (result != v42) {
              goto LABEL_25;
            }
          }
          else
          {
            unint64_t v20 = v96;
            if (v96 != (unint64_t *)(1 << (v97 - 1)))
            {
LABEL_25:
              uint64_t v95 = 1 << (v5 - 1);
              *(_DWORD *)(a3 + 8) = v5;
              *(void *)a3 = v95;
              *(_DWORD *)(a3 + 24) = v19;
              goto LABEL_26;
            }
          }
          *(_DWORD *)(a3 + 8) = v5;
          *(void *)a3 = 0;
          uint64_t result = a3 + 16;
          *(_DWORD *)(a3 + 24) = v5;
          *(void *)(a3 + 16) = 0;
          if (v19 < 0x41) {
            return result;
          }
          break;
        case ')':
          int v92 = (void *)(1 << (v5 - 1));
          llvm::ConstantRange::getSignedMax(this, (uint64_t)&v90);
          uint64_t result = llvm::APInt::operator+=((uint64_t)&v90, 1uLL);
          unsigned int v36 = v91;
          unsigned int v37 = v90;
          unsigned int v91 = 0;
          uint64_t v38 = v92;
          if (v92 == v90)
          {
            *(_DWORD *)(a3 + 8) = v5;
            if (v5) {
              unint64_t v40 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
            }
            else {
              unint64_t v40 = 0;
            }
            *(void *)a3 = v40;
            uint64_t result = a3 + 16;
            *(_DWORD *)(a3 + 24) = v5;
            *(void *)(a3 + 16) = v40;
            if (v36 >= 0x41 && v37) {
              uint64_t result = MEMORY[0x1D25D9CB0](v37, 0x1000C8000313F17);
            }
          }
          else
          {
            *(_DWORD *)(a3 + 8) = v5;
            *(void *)a3 = v38;
            *(_DWORD *)(a3 + 24) = v36;
            *(void *)(a3 + 16) = v37;
          }
          if (v91 >= 0x41)
          {
            uint64_t result = (uint64_t)v90;
            if (v90) {
              return MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
            }
          }
          return result;
        default:
          *(_DWORD *)(a3 + 8) = v5;
          goto LABEL_5;
      }
      goto LABEL_42;
    }
LABEL_103:
    return sub_1CC067C7C(a3, (uint64_t)this);
  }
  int v43 = result;
  unsigned int v6 = *(unint64_t **)this;
  unsigned int v44 = *((_DWORD *)this + 2);
  unint64_t v45 = v5 + 63;
  uint64_t result = memcmp(*(const void **)this, *((const void **)this + 2), (v45 >> 3) & 0x3FFFFFF8);
  if (!result)
  {
    int v46 = 0;
    uint64_t v47 = v45 >> 6;
    do
    {
      if (v47-- < 1) {
        break;
      }
      unint64_t v49 = v6[v47];
      v46 += __clz(v49);
    }
    while (!v49);
    unsigned int v50 = v44 | 0xFFFFFFC0;
    if ((v44 & 0x3F) == 0) {
      unsigned int v50 = 0;
    }
    if (v46 + v50 == v44) {
      goto LABEL_103;
    }
  }
  switch(v43)
  {
    case '!':
      unsigned int v97 = v44;
      if (v44 > 0x40) {
        operator new[]();
      }
      int64_t v96 = v6;
      uint64_t result = llvm::APInt::operator+=((uint64_t)&v96, 1uLL);
      unsigned int v51 = v97;
      uint64_t v52 = v96;
      unsigned int v97 = 0;
      uint64_t v53 = *((unsigned int *)this + 6);
      if (v53 > 0x40)
      {
        uint64_t result = memcmp(*((const void **)this + 2), v96, ((unint64_t)(v53 + 63) >> 3) & 0x3FFFFFF8);
        BOOL v54 = result == 0;
      }
      else
      {
        BOOL v54 = *((void *)this + 2) == (void)v96;
      }
      int v55 = v54;
      if (v51 >= 0x41)
      {
        if (v52)
        {
          uint64_t result = MEMORY[0x1D25D9CB0](v52, 0x1000C8000313F17);
          if (v97 >= 0x41)
          {
            uint64_t result = (uint64_t)v96;
            if (v96) {
              uint64_t result = MEMORY[0x1D25D9CB0](v96, 0x1000C8000313F17);
            }
          }
        }
      }
      if (v55)
      {
        unsigned int v14 = *((_DWORD *)this + 6);
        if (v14 > 0x40) {
          operator new[]();
        }
        uint64_t v15 = *((void *)this + 2);
        unsigned int v16 = *((_DWORD *)this + 2);
        if (v16 <= 0x40) {
          goto LABEL_18;
        }
        goto LABEL_116;
      }
      *(_DWORD *)(a3 + 8) = v44;
      if (v44) {
        unint64_t v41 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v44;
      }
      else {
        unint64_t v41 = 0;
      }
      *(void *)a3 = v41;
      uint64_t result = a3 + 16;
      *(_DWORD *)(a3 + 24) = v44;
LABEL_74:
      *(void *)uint64_t result = v41;
      return result;
    case '""':
      llvm::ConstantRange::getUnsignedMin((uint64_t)this, (uint64_t)&v96);
      unsigned int v21 = v97;
      if (!v97) {
        goto LABEL_224;
      }
      if (v97 > 0x40)
      {
        if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v96) != v21)
        {
          unint64_t v57 = v96;
          goto LABEL_132;
        }
      }
      else
      {
        unint64_t v57 = v96;
        if (v96 != (unint64_t *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v97))
        {
LABEL_132:
          unsigned int v89 = v21;
          unsigned int v88 = v57;
          uint64_t result = llvm::APInt::operator+=((uint64_t)&v88, 1uLL);
          unsigned int v58 = v89;
          unint64_t v59 = v88;
          unsigned int v89 = 0;
          if (v44 > 0x40) {
            operator new[]();
          }
          *(_DWORD *)(a3 + 8) = v58;
          *(void *)a3 = v59;
          *(_DWORD *)(a3 + 24) = v44;
          goto LABEL_32;
        }
      }
LABEL_224:
      *(_DWORD *)(a3 + 8) = v44;
      if (v44 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)a3);
      }
      *(void *)a3 = 0;
      uint64_t result = a3 + 16;
      *(_DWORD *)(a3 + 24) = v44;
LABEL_137:
      *(void *)uint64_t result = 0;
      if (v21 >= 0x41) {
        goto LABEL_138;
      }
      return result;
    case '#':
      uint64_t result = llvm::ConstantRange::getUnsignedMin((uint64_t)this, (uint64_t)&__s1);
      if (v44 > 0x40) {
        operator new[]();
      }
      unint64_t v20 = 0;
      unsigned int v60 = v84;
      if (v84 <= 0x40)
      {
        int v61 = __s1;
        if (__s1) {
          goto LABEL_143;
        }
        *(_DWORD *)(a3 + 8) = v84;
        unint64_t v67 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v60;
        if (!v60) {
          unint64_t v67 = 0;
        }
        *(void *)a3 = v67;
        *(_DWORD *)(a3 + 24) = v60;
        *(void *)(a3 + 16) = v67;
        if (v60 < 0x41) {
          return result;
        }
LABEL_177:
        if (!v61) {
          return result;
        }
LABEL_63:
        JUMPOUT(0x1D25D9CB0);
      }
      int v61 = __s1;
      uint64_t result = memcmp(__s1, 0, (((unint64_t)v84 + 63) >> 3) & 0x3FFFFFF8);
      if (!result)
      {
        *(_DWORD *)(a3 + 8) = v60;
        operator new[]();
      }
LABEL_143:
      *(_DWORD *)(a3 + 8) = v60;
      *(void *)a3 = v61;
      *(_DWORD *)(a3 + 24) = v44;
LABEL_26:
      *(void *)(a3 + 16) = v20;
      return result;
    case '$':
      uint64_t result = (uint64_t)llvm::ConstantRange::getUnsignedMax((char **)this, (uint64_t)&v96);
      unsigned int v18 = v97;
      if (v97 > 0x40)
      {
        uint64_t result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v96);
        if (result != v18) {
          goto LABEL_123;
        }
      }
      else if (v96)
      {
LABEL_123:
        if (v44 > 0x40) {
          operator new[]();
        }
        int v8 = v96;
        *(_DWORD *)(a3 + 8) = v44;
LABEL_22:
        *(void *)a3 = 0;
        *(_DWORD *)(a3 + 24) = v18;
        goto LABEL_7;
      }
      *(_DWORD *)(a3 + 8) = v44;
      if (v44 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)a3);
      }
      *(void *)a3 = 0;
      uint64_t result = a3 + 16;
      *(_DWORD *)(a3 + 24) = v44;
LABEL_119:
      *(void *)uint64_t result = 0;
      if (v18 < 0x41) {
        return result;
      }
LABEL_138:
      uint64_t result = (uint64_t)v96;
      if (!v96) {
        return result;
      }
      return MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
    case '%':
      if (v44 > 0x40) {
        operator new[]();
      }
      llvm::ConstantRange::getUnsignedMax((char **)this, (uint64_t)&__s2);
      uint64_t result = llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
      unsigned int v62 = v94;
      int v63 = __s2;
      unsigned int v94 = 0;
      if (__s2)
      {
        *(_DWORD *)(a3 + 8) = v44;
        *(void *)a3 = 0;
        *(_DWORD *)(a3 + 24) = v62;
        *(void *)(a3 + 16) = v63;
      }
      else
      {
        *(_DWORD *)(a3 + 8) = v44;
        unint64_t v68 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v44;
        if (!v44) {
          unint64_t v68 = 0;
        }
        *(void *)a3 = v68;
        *(_DWORD *)(a3 + 24) = v44;
        *(void *)(a3 + 16) = v68;
        if (v62 >= 0x41 && v63) {
          uint64_t result = MEMORY[0x1D25D9CB0](v63, 0x1000C8000313F17);
        }
      }
      if (v94 >= 0x41)
      {
        uint64_t result = (uint64_t)__s2;
        if (__s2) {
          return MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
        }
      }
      return result;
    case '&':
      llvm::ConstantRange::getSignedMin((uint64_t)this, (uint64_t)&v96);
      unsigned int v29 = v97;
      if (v97 > 0x40)
      {
        unint64_t v20 = v96;
        if ((v96[(v97 - 1) >> 6] >> (v97 - 1))) {
          goto LABEL_149;
        }
        unsigned int v78 = v97 - 1;
        if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v96) != v78) {
          goto LABEL_149;
        }
      }
      else
      {
        unint64_t v20 = v96;
        if (v96 != (unint64_t *)~(-1 << (v97 - 1)))
        {
LABEL_149:
          unsigned int v87 = v29;
          unsigned int v86 = v20;
          uint64_t result = llvm::APInt::operator+=((uint64_t)&v86, 1uLL);
          unsigned int v64 = v87;
          uint64_t v65 = v86;
          unsigned int v87 = 0;
          if (v44 > 0x40) {
            operator new[]();
          }
          uint64_t v85 = 1 << (v44 - 1);
          *(_DWORD *)(a3 + 8) = v64;
          *(void *)a3 = v65;
          *(_DWORD *)(a3 + 24) = v44;
LABEL_41:
          *(void *)(a3 + 16) = v85;
          return result;
        }
      }
      *(_DWORD *)(a3 + 8) = v44;
      if (v44 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)a3);
      }
      *(void *)a3 = 0;
      uint64_t result = a3 + 16;
      *(_DWORD *)(a3 + 24) = v44;
LABEL_154:
      *(void *)uint64_t result = 0;
      if (v29 < 0x41) {
        return result;
      }
      goto LABEL_42;
    case '\'':
      uint64_t result = llvm::ConstantRange::getSignedMin((uint64_t)this, (uint64_t)&v81);
      if (v44 > 0x40) {
        operator new[]();
      }
      unsigned int v80 = (const void *)(1 << (v44 - 1));
      unsigned int v69 = v82;
      if (v82 > 0x40)
      {
        unsigned int v76 = v81;
        uint64_t result = memcmp(v81, v80, (((unint64_t)v82 + 63) >> 3) & 0x3FFFFFF8);
        if (!result)
        {
          *(_DWORD *)(a3 + 8) = v69;
          llvm::APInt::initSlowCase((llvm::APInt *)a3);
        }
        int v8 = (unint64_t *)(1 << (v44 - 1));
        uint64_t v70 = v76;
      }
      else
      {
        int v8 = (unint64_t *)(1 << (v44 - 1));
        uint64_t v70 = v81;
        if (v81 == v80)
        {
          *(_DWORD *)(a3 + 8) = v82;
          if (v69) {
            unint64_t v74 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v69;
          }
          else {
            unint64_t v74 = 0;
          }
          *(void *)a3 = v74;
          uint64_t result = a3 + 16;
          *(_DWORD *)(a3 + 24) = v69;
          int v61 = v70;
          *(void *)(a3 + 16) = v74;
          if (v69 < 0x41) {
            return result;
          }
          goto LABEL_177;
        }
      }
      *(_DWORD *)(a3 + 8) = v69;
      *(void *)a3 = v70;
      *(_DWORD *)(a3 + 24) = v44;
LABEL_7:
      *(void *)(a3 + 16) = v8;
      return result;
    case '(':
      uint64_t result = (uint64_t)llvm::ConstantRange::getSignedMax(this, (uint64_t)&v96);
      unsigned int v56 = v97;
      if (v97 > 0x40)
      {
        unsigned int v77 = v97 - 1;
        unint64_t v20 = v96;
        if (((v96[(v97 - 1) >> 6] >> (v97 - 1)) & 1) == 0) {
          goto LABEL_127;
        }
        uint64_t result = llvm::APInt::countTrailingZerosSlowCase(&v96);
        if (result != v77) {
          goto LABEL_127;
        }
      }
      else
      {
        unint64_t v20 = v96;
        if (v96 != (unint64_t *)(1 << (v97 - 1)))
        {
LABEL_127:
          if (v44 > 0x40) {
            operator new[]();
          }
          uint64_t v95 = 1 << (v44 - 1);
          *(_DWORD *)(a3 + 8) = v44;
          *(void *)a3 = v95;
          *(_DWORD *)(a3 + 24) = v56;
          goto LABEL_26;
        }
      }
      *(_DWORD *)(a3 + 8) = v44;
      if (v44 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)a3);
      }
      *(void *)a3 = 0;
      uint64_t result = a3 + 16;
      *(_DWORD *)(a3 + 24) = v44;
      *(void *)(a3 + 16) = 0;
      if (v56 < 0x41) {
        return result;
      }
LABEL_42:
      if (!v20) {
        return result;
      }
      uint64_t result = (uint64_t)v20;
      return MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
    case ')':
      if (v44 > 0x40) {
        operator new[]();
      }
      int v92 = (void *)(1 << (v44 - 1));
      llvm::ConstantRange::getSignedMax(this, (uint64_t)&v90);
      uint64_t result = llvm::APInt::operator+=((uint64_t)&v90, 1uLL);
      unsigned int v71 = v91;
      BOOL v72 = v90;
      unsigned int v91 = 0;
      int64_t v73 = v92;
      if (v92 == v90)
      {
        *(_DWORD *)(a3 + 8) = v44;
        if (v44) {
          unint64_t v75 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v44;
        }
        else {
          unint64_t v75 = 0;
        }
        *(void *)a3 = v75;
        uint64_t result = a3 + 16;
        *(_DWORD *)(a3 + 24) = v44;
        *(void *)(a3 + 16) = v75;
        if (v71 >= 0x41 && v72) {
          uint64_t result = MEMORY[0x1D25D9CB0](v72, 0x1000C8000313F17);
        }
      }
      else
      {
        *(_DWORD *)(a3 + 8) = v44;
        *(void *)a3 = v73;
        *(_DWORD *)(a3 + 24) = v71;
        *(void *)(a3 + 16) = v72;
      }
      if (v91 >= 0x41)
      {
        uint64_t result = (uint64_t)v90;
        if (v90) {
          return MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
        }
      }
      return result;
    default:
      *(_DWORD *)(a3 + 8) = v44;
      if (v44 > 0x40) {
        operator new[]();
      }
LABEL_5:
      *(void *)a3 = v6;
      unsigned int v7 = *((_DWORD *)this + 6);
      *(_DWORD *)(a3 + 24) = v7;
      if (v7 > 0x40) {
        operator new[]();
      }
      int v8 = (unint64_t *)*((void *)this + 2);
      goto LABEL_7;
  }
}

BOOL llvm::ConstantRange::isEmptySet(const void **this)
{
  uint64_t v1 = *((unsigned int *)this + 2);
  if (v1 > 0x40)
  {
    uint64_t v4 = *this;
    if (memcmp(*this, this[2], ((unint64_t)(v1 + 63) >> 3) & 0x3FFFFFF8)) {
      return 0;
    }
    int v5 = 0;
    int64_t v6 = (unint64_t)(v1 + 63) >> 6;
    do
    {
      if (v6-- < 1) {
        break;
      }
      unint64_t v8 = v4[v6];
      v5 += __clz(v8);
    }
    while (!v8);
    int v9 = v1 | 0xFFFFFFC0;
    if ((v1 & 0x3F) == 0) {
      int v9 = 0;
    }
    return v5 + v9 == v1;
  }
  else
  {
    return ((unint64_t)this[2] | (unint64_t)*this) == 0;
  }
}

char **llvm::ConstantRange::getUnsignedMax@<X0>(char **this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2 = (llvm::APInt *)this;
  uint64_t v4 = *((unsigned int *)this + 2);
  if (v4 > 0x40)
  {
    unint64_t v8 = *this;
    unint64_t v9 = v4 + 63;
    int v5 = this[2];
    if (!memcmp(*this, v5, ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8))
    {
      unint64_t v14 = v9 >> 6;
      if (llvm::APInt::countTrailingOnesSlowCase(v2) == v4) {
        goto LABEL_20;
      }
      uint64_t v15 = 8 * v14;
      do
      {
        if (!v15) {
          goto LABEL_4;
        }
        unint64_t v16 = *(void *)&v8[v15 - 8];
        unint64_t v17 = *(void *)&v5[v15 - 8];
        v15 -= 8;
        BOOL v13 = v16 > v17;
      }
      while (v16 == v17);
LABEL_18:
      if (v13)
      {
LABEL_20:
        *(_DWORD *)(a2 + 8) = v4;
        operator new[]();
      }
    }
    else
    {
      uint64_t v10 = 8 * (v9 >> 6);
      while (v10)
      {
        unint64_t v11 = *(void *)&v8[v10 - 8];
        unint64_t v12 = *(void *)&v5[v10 - 8];
        v10 -= 8;
        BOOL v13 = v11 > v12;
        if (v11 != v12) {
          goto LABEL_18;
        }
      }
    }
    goto LABEL_4;
  }
  int v5 = this[2];
  if (*this == v5)
  {
    if (v4)
    {
      if (*this != (char *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v4))
      {
        int v5 = *this;
        goto LABEL_4;
      }
      *(_DWORD *)(a2 + 8) = v4;
      int v7 = -(int)v4;
LABEL_10:
      unint64_t v6 = 0xFFFFFFFFFFFFFFFFLL >> v7;
      goto LABEL_6;
    }
    *(_DWORD *)(a2 + 8) = 0;
LABEL_28:
    unint64_t v6 = 0;
    goto LABEL_6;
  }
  if (*this > v5)
  {
    *(_DWORD *)(a2 + 8) = v4;
    if (v4)
    {
      int v7 = -(int)v4;
      goto LABEL_10;
    }
    goto LABEL_28;
  }
LABEL_4:
  unsigned int v19 = *((_DWORD *)v2 + 6);
  if (v19 > 0x40) {
    operator new[]();
  }
  unint64_t v18 = (unint64_t)v5;
  this = (char **)llvm::APInt::operator-=((uint64_t)&v18, 1uLL);
  *(_DWORD *)(a2 + 8) = v19;
  unint64_t v6 = v18;
LABEL_6:
  *(void *)a2 = v6;
  return this;
}

_DWORD *llvm::ConstantRange::getSignedMax@<X0>(_DWORD *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2 = (llvm::APInt *)this;
  uint64_t v4 = (const llvm::APInt *)(this + 4);
  uint64_t v5 = this[2];
  if (v5 > 0x40)
  {
    uint64_t v10 = *(void **)this;
    uint64_t v7 = *((void *)this + 2);
    unint64_t v11 = (unint64_t)(v5 + 63) >> 3;
    if (!memcmp(*(const void **)this, (const void *)v7, v11 & 0x3FFFFFF8))
    {
      if (llvm::APInt::countTrailingOnesSlowCase(v2) != v5
        && (int)llvm::APInt::compareSigned(v2, v4) <= 0)
      {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v12 = v10[(v5 - 1) >> 6] & (1 << (v5 - 1));
      unsigned int v13 = *((_DWORD *)v2 + 6);
      unsigned int v14 = v13 - 1;
      if (v13 >= 0x41) {
        uint64_t v15 = (const llvm::APInt *)(v7 + 8 * (v14 >> 6));
      }
      else {
        uint64_t v15 = v4;
      }
      if ((v12 != 0) == ((*(void *)v15 >> v14) & 1))
      {
        unint64_t v16 = v11 & 0x3FFFFFF8;
        do
        {
          if (!v16) {
            goto LABEL_4;
          }
          unint64_t v17 = *(void *)((char *)v10 + v16 - 8);
          unint64_t v18 = *(void *)(v7 - 8 + v16);
          v16 -= 8;
        }
        while (v17 == v18);
        if (v17 <= v18) {
          goto LABEL_4;
        }
      }
      else if (v12)
      {
        goto LABEL_4;
      }
    }
    *(_DWORD *)(a2 + 8) = v5;
    operator new[]();
  }
  uint64_t v6 = *(void *)this;
  uint64_t v7 = *((void *)this + 2);
  if (*(void *)this == v7)
  {
    if (v5)
    {
      if (v6 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v5)
      {
        *(_DWORD *)(a2 + 8) = v5;
        unint64_t v9 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
LABEL_10:
        *(void *)a2 = v9;
        uint64_t v8 = v9 & ~(1 << (v5 - 1));
        goto LABEL_6;
      }
      this = (_DWORD *)llvm::APInt::compareSigned((llvm::APInt *)this, (const llvm::APInt *)(this + 4));
      uint64_t v7 = v6;
      if ((int)this < 1) {
        goto LABEL_4;
      }
      *(_DWORD *)(a2 + 8) = v5;
LABEL_12:
      unint64_t v9 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
      goto LABEL_10;
    }
    *(_DWORD *)(a2 + 8) = 0;
LABEL_30:
    unint64_t v9 = 0;
    goto LABEL_10;
  }
  if (v6 << -(char)v5 >> -(char)v5 > v7 << -(char)v5 >> -(char)v5)
  {
    *(_DWORD *)(a2 + 8) = v5;
    if (v5) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }
LABEL_4:
  unsigned int v20 = *((_DWORD *)v2 + 6);
  if (v20 > 0x40) {
    operator new[]();
  }
  uint64_t v19 = v7;
  this = (_DWORD *)llvm::APInt::operator-=((uint64_t)&v19, 1uLL);
  *(_DWORD *)(a2 + 8) = v20;
  uint64_t v8 = v19;
LABEL_6:
  *(void *)a2 = v8;
  return this;
}

uint64_t llvm::ConstantRange::getUnsignedMin@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2 = (_DWORD *)this;
  uint64_t v4 = *(unsigned int *)(this + 8);
  if (v4 > 0x40)
  {
    uint64_t v5 = *(char **)this;
    uint64_t v6 = *(char **)(this + 16);
    size_t v7 = ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8;
    this = memcmp(*(const void **)this, v6, v7);
    if (!this)
    {
      this = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v2);
      if (this == v4)
      {
        *(_DWORD *)(a2 + 8) = v4;
        goto LABEL_20;
      }
    }
    do
    {
      if (!v7) {
        goto LABEL_16;
      }
      unint64_t v8 = *(void *)&v5[v7 - 8];
      unint64_t v9 = *(void *)&v6[v7 - 8];
      v7 -= 8;
    }
    while (v8 == v9);
    if (v8 <= v9) {
      goto LABEL_16;
    }
LABEL_14:
    unsigned int v10 = v2[6];
    if (v10 > 0x40)
    {
      this = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v2 + 4));
      if (this == v10)
      {
LABEL_16:
        *(_DWORD *)(a2 + 8) = v4;
        if (v4 >= 0x41) {
          operator new[]();
        }
        goto LABEL_5;
      }
    }
    else if (!v6)
    {
      goto LABEL_16;
    }
    *(_DWORD *)(a2 + 8) = v4;
    if (v4 < 0x41) {
      goto LABEL_9;
    }
LABEL_20:
    operator new[]();
  }
  uint64_t v5 = *(char **)this;
  uint64_t v6 = *(char **)(this + 16);
  if (*(char **)this != v6 || v4 && v5 != (char *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v4))
  {
    if (v5 <= v6)
    {
      *(_DWORD *)(a2 + 8) = v4;
LABEL_5:
      *(void *)a2 = v5;
      return this;
    }
    goto LABEL_14;
  }
  *(_DWORD *)(a2 + 8) = v4;
LABEL_9:
  *(void *)a2 = 0;
  return this;
}

uint64_t llvm::ConstantRange::getSignedMin@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2 = (llvm::APInt *)this;
  uint64_t v4 = (unint64_t **)(this + 16);
  uint64_t v5 = *(unsigned int *)(this + 8);
  if (v5 > 0x40)
  {
    uint64_t v6 = *(const void **)this;
    size_t v7 = *(const void **)(this + 16);
    unint64_t v10 = (unint64_t)(v5 + 63) >> 3;
    this = memcmp(*(const void **)this, v7, v10 & 0x3FFFFFF8);
    if (!this)
    {
      this = llvm::APInt::countTrailingOnesSlowCase(v2);
      if (this == v5)
      {
        *(_DWORD *)(a2 + 8) = v5;
        goto LABEL_29;
      }
    }
    uint64_t v11 = *((void *)v6 + ((v5 - 1) >> 6)) & (1 << (v5 - 1));
    unsigned int v8 = *((_DWORD *)v2 + 6);
    uint64_t v12 = (char *)v7 + 8 * ((v8 - 1) >> 6);
    if (v8 < 0x41) {
      uint64_t v12 = v4;
    }
    if ((v11 != 0) == ((*v12 >> (v8 - 1)) & 1))
    {
      unint64_t v13 = v10 & 0x3FFFFFF8;
      do
      {
        if (!v13) {
          goto LABEL_13;
        }
        unint64_t v14 = *(void *)((char *)v6 + v13 - 8);
        unint64_t v15 = *(void *)((char *)v7 + v13 - 8);
        v13 -= 8;
      }
      while (v14 == v15);
      if (v14 <= v15) {
        goto LABEL_13;
      }
    }
    else if (v11)
    {
      *(_DWORD *)(a2 + 8) = v5;
      goto LABEL_21;
    }
LABEL_11:
    unsigned int v9 = v8 - 1;
    if (v8 <= 0x40)
    {
      if (v7 == (const void *)(1 << v9)) {
        goto LABEL_13;
      }
      goto LABEL_31;
    }
    if (((*((void *)v7 + (v9 >> 6)) >> v9) & 1) == 0
      || (this = llvm::APInt::countTrailingZerosSlowCase(v4), this != v9))
    {
LABEL_31:
      *(_DWORD *)(a2 + 8) = v5;
      if (v5 < 0x41) {
        goto LABEL_9;
      }
LABEL_29:
      operator new[]();
    }
LABEL_13:
    *(_DWORD *)(a2 + 8) = v5;
    if (v5 < 0x41) {
      goto LABEL_5;
    }
LABEL_21:
    operator new[]();
  }
  uint64_t v6 = *(const void **)this;
  size_t v7 = *(const void **)(this + 16);
  if (*(const void **)this != v7 || v5 && v6 != (const void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v5))
  {
    if ((uint64_t)((void)v6 << (64 - v5)) >> (64 - v5) <= (uint64_t)((void)v7 << (64 - v5)) >> (64 - v5))
    {
      *(_DWORD *)(a2 + 8) = v5;
LABEL_5:
      *(void *)a2 = v6;
      return this;
    }
    unsigned int v8 = *(_DWORD *)(this + 24);
    goto LABEL_11;
  }
  *(_DWORD *)(a2 + 8) = v5;
LABEL_9:
  *(void *)a2 = 0;
  *(void *)a2 |= 1 << (v5 - 1);
  return this;
}

uint64_t llvm::ConstantRange::makeSatisfyingICmpRegion@<X0>(int a1@<W0>, llvm::ConstantRange *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t InversePredicate = llvm::CmpInst::getInversePredicate(a1);
  llvm::ConstantRange::makeAllowedICmpRegion(a2, InversePredicate, (uint64_t)&v7);
  uint64_t result = llvm::ConstantRange::inverse((uint64_t)&v7, a3);
  if (v10 >= 0x41)
  {
    uint64_t result = v9;
    if (v9) {
      uint64_t result = MEMORY[0x1D25D9CB0](v9, 0x1000C8000313F17);
    }
  }
  if (v8 >= 0x41)
  {
    uint64_t result = v7;
    if (v7) {
      return MEMORY[0x1D25D9CB0](v7, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t llvm::ConstantRange::inverse@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2 = (llvm::APInt *)this;
  uint64_t v4 = *(unsigned int *)(this + 8);
  if (v4 > 0x40)
  {
    unsigned int v10 = *(void **)this;
    unint64_t v6 = *(void *)(this + 16);
    this = memcmp(*(const void **)this, (const void *)v6, ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8);
    if (!this)
    {
      this = llvm::APInt::countTrailingOnesSlowCase(v2);
      if (this == v4)
      {
        *(_DWORD *)(a2 + 8) = v4;
        operator new[]();
      }
      int v11 = 0;
      int64_t v12 = (unint64_t)(v4 + 63) >> 6;
      do
      {
        if (v12-- < 1) {
          break;
        }
        unint64_t v14 = v10[v12];
        v11 += __clz(v14);
      }
      while (!v14);
      int v15 = v4 | 0xFFFFFFC0;
      if ((v4 & 0x3F) == 0) {
        int v15 = 0;
      }
      if (v11 + v15 == v4)
      {
        *(_DWORD *)(a2 + 8) = v4;
        llvm::APInt::initSlowCase((llvm::APInt *)a2);
      }
    }
LABEL_4:
    unsigned int v7 = *((_DWORD *)v2 + 6);
    if (v7 >= 0x41) {
      operator new[]();
    }
    if (v4 > 0x40) {
      operator new[]();
    }
    uint64_t v8 = *(void *)v2;
    *(_DWORD *)(a2 + 8) = v7;
    *(void *)a2 = v6;
    *(_DWORD *)(a2 + 24) = v4;
    *(void *)(a2 + 16) = v8;
    return this;
  }
  unint64_t v5 = *(void *)this;
  unint64_t v6 = *(void *)(this + 16);
  if (*(void *)this == v6 && (!v4 || v5 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v4))
  {
    *(_DWORD *)(a2 + 8) = v4;
    *(void *)a2 = 0;
    *(_DWORD *)(a2 + 24) = v4;
    *(void *)(a2 + 16) = 0;
    return this;
  }
  if (v6 | v5) {
    goto LABEL_4;
  }
  *(_DWORD *)(a2 + 8) = v4;
  unint64_t v16 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v4;
  if (!v4) {
    unint64_t v16 = 0;
  }
  *(void *)a2 = v16;
  this = a2 + 16;
  *(_DWORD *)(a2 + 24) = v4;
  *(void *)(a2 + 16) = v16;
  return this;
}

uint64_t llvm::ConstantRange::makeExactICmpRegion@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  if (v5 > 0x40) {
    operator new[]();
  }
  uint64_t v6 = *(void *)a2;
  unsigned int v9 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = v6;
  unsigned int v13 = v5;
  uint64_t v12 = v6;
  llvm::APInt::operator+=((uint64_t)&v12, 1uLL);
  unsigned int v11 = v13;
  uint64_t v10 = v12;
  uint64_t result = llvm::ConstantRange::makeAllowedICmpRegion((llvm::ConstantRange *)&v8, a1, a3);
  if (v11 >= 0x41)
  {
    uint64_t result = v10;
    if (v10) {
      uint64_t result = MEMORY[0x1D25D9CB0](v10, 0x1000C8000313F17);
    }
  }
  if (v9 >= 0x41)
  {
    uint64_t result = v8;
    if (v8) {
      return MEMORY[0x1D25D9CB0](v8, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t llvm::ConstantRange::areInsensitiveToSignednessOfICmpPredicate(const void **this, const llvm::ConstantRange *a2, const llvm::ConstantRange *a3)
{
  uint64_t v5 = *((unsigned int *)this + 2);
  if (v5 >= 0x41)
  {
    if (!memcmp(*this, this[2], ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) == v5)
    {
      return 1;
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    return 1;
  }
  uint64_t v6 = *((unsigned int *)a2 + 2);
  if (v6 < 0x41)
  {
    if (*((void *)a2 + 2) | *(void *)a2) {
      goto LABEL_5;
    }
    return 1;
  }
  if (!memcmp(*(const void **)a2, *((const void **)a2 + 2), ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
    && llvm::APInt::countLeadingZerosSlowCase(a2) == v6)
  {
    return 1;
  }
LABEL_5:
  if (llvm::ConstantRange::isAllNonNegative((llvm::ConstantRange *)this) && llvm::ConstantRange::isAllNonNegative(a2)) {
    return 1;
  }
  uint64_t result = llvm::ConstantRange::isAllNegative((llvm::ConstantRange *)this);
  if (result)
  {
    return llvm::ConstantRange::isAllNegative(a2);
  }
  return result;
}

BOOL llvm::ConstantRange::isAllNonNegative(llvm::ConstantRange *this)
{
  unsigned int v2 = (unint64_t **)((char *)this + 16);
  uint64_t v3 = *((unsigned int *)this + 2);
  if (v3 > 0x40)
  {
    unint64_t v4 = *(void *)this;
    uint64_t v12 = (v3 - 1) >> 6;
    uint64_t v13 = *(void *)(*(void *)this + 8 * v12) & (1 << (v3 - 1));
    unsigned int v10 = *((_DWORD *)this + 6);
    uint64_t v6 = *((void *)this + 2);
    unint64_t v14 = (void *)(v6 + 8 * ((v10 - 1) >> 6));
    if (v10 < 0x41) {
      unint64_t v14 = v2;
    }
    if ((v13 != 0) == ((*v14 >> (v10 - 1)) & 1))
    {
      unint64_t v15 = ((unint64_t)(v3 + 63) >> 3) & 0x3FFFFFF8;
      while (v15)
      {
        unint64_t v16 = *(void *)(v4 + v15 - 8);
        unint64_t v17 = *(void *)(v6 + v15 - 8);
        v15 -= 8;
        if (v16 != v17)
        {
          if (v16 > v17) {
            goto LABEL_8;
          }
          goto LABEL_20;
        }
      }
      goto LABEL_20;
    }
    if (v13)
    {
      LOBYTE(v8) = v3 - 1;
LABEL_22:
      unint64_t v4 = *(void *)(v4 + 8 * v12);
      return ((v4 >> v8) & 1) == 0;
    }
  }
  else
  {
    unint64_t v4 = *(void *)this;
    uint64_t v5 = (uint64_t)(*(void *)this << -(char)v3) >> -(char)v3;
    uint64_t v6 = *((void *)this + 2);
    uint64_t v7 = v6 << -(char)v3 >> -(char)v3;
    if (v5 < v7 || v5 <= v7)
    {
      LOBYTE(v8) = v3 - 1;
      return ((v4 >> v8) & 1) == 0;
    }
    unsigned int v10 = *((_DWORD *)this + 6);
  }
LABEL_8:
  unsigned int v11 = v10 - 1;
  if (v10 > 0x40)
  {
    int v21 = v3;
    unsigned int v19 = v10 - 1;
    unint64_t v20 = v4;
    if (((*(void *)(v6 + 8 * (v11 >> 6)) >> (v10 - 1)) & 1) == 0) {
      return 0;
    }
    int v18 = llvm::APInt::countTrailingZerosSlowCase(v2);
    unint64_t v4 = v20;
    LODWORD(v3) = v21;
    if (v18 != v19) {
      return 0;
    }
  }
  else if (v6 != 1 << v11)
  {
    return 0;
  }
LABEL_20:
  unsigned int v8 = v3 - 1;
  if (v3 >= 0x41)
  {
    uint64_t v12 = v8 >> 6;
    goto LABEL_22;
  }
  return ((v4 >> v8) & 1) == 0;
}

uint64_t llvm::ConstantRange::isAllNegative(llvm::ConstantRange *this)
{
  uint64_t v2 = *((unsigned int *)this + 2);
  if (v2 < 0x41)
  {
    uint64_t v3 = *(const void **)this;
    unint64_t v4 = *((void *)this + 2);
    if (!(v4 | *(void *)this)) {
      goto LABEL_34;
    }
    if (v3 == (const void *)v4)
    {
      if (!v2 || v3 == (const void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v2)) {
        goto LABEL_12;
      }
      char v5 = 64 - v2;
    }
    else
    {
      char v5 = 64 - v2;
    }
    if ((uint64_t)((void)v3 << v5) >> v5 <= (uint64_t)(v4 << v5) >> v5)
    {
      unsigned int v6 = *((_DWORD *)this + 6);
      unsigned int v7 = v6 - 1;
      goto LABEL_7;
    }
LABEL_12:
    char v8 = 0;
    return v8 & 1;
  }
  uint64_t v10 = *(void *)this;
  unint64_t v4 = *((void *)this + 2);
  unint64_t v11 = (unint64_t)(v2 + 63) >> 3;
  if (!memcmp(*(const void **)this, (const void *)v4, v11 & 0x3FFFFFF8))
  {
    if (llvm::APInt::countLeadingZerosSlowCase(this) == v2) {
      goto LABEL_34;
    }
    if (llvm::APInt::countTrailingOnesSlowCase(this) == v2) {
      goto LABEL_12;
    }
  }
  uint64_t v12 = (void *)((char *)this + 16);
  uint64_t v13 = *(void *)(v10 + 8 * ((v2 - 1) >> 6)) & (1 << (v2 - 1));
  unsigned int v6 = *((_DWORD *)this + 6);
  if (v6 >= 0x41) {
    uint64_t v12 = (void *)(v4 + 8 * ((v6 - 1) >> 6));
  }
  uint64_t v14 = *v12 >> (v6 - 1);
  unsigned int v7 = v6 - 1;
  if ((v13 != 0) == (v14 & 1))
  {
    unint64_t v20 = v11 & 0x3FFFFFF8;
    while (v20)
    {
      unint64_t v21 = *(void *)(v10 - 8 + v20);
      unint64_t v22 = *(void *)(v4 + v20 - 8);
      v20 -= 8;
      if (v21 != v22)
      {
        if (v21 <= v22) {
          break;
        }
        goto LABEL_12;
      }
    }
  }
  else if (!v13)
  {
    goto LABEL_12;
  }
LABEL_7:
  if (v6 <= 0x40)
  {
    char v8 = (v4 >> v7) | (v4 == 0);
    return v8 & 1;
  }
  if ((*(void *)(v4 + 8 * (v7 >> 6)) >> v7))
  {
LABEL_34:
    char v8 = 1;
    return v8 & 1;
  }
  int v15 = 0;
  int64_t v16 = ((unint64_t)v6 + 63) >> 6;
  do
  {
    if (v16-- < 1) {
      break;
    }
    unint64_t v18 = *(void *)(v4 + 8 * v16);
    v15 += __clz(v18);
  }
  while (!v18);
  unsigned int v19 = v6 | 0xFFFFFFC0;
  if ((v6 & 0x3F) == 0) {
    unsigned int v19 = 0;
  }
  char v8 = v15 + v19 == v6;
  return v8 & 1;
}

uint64_t llvm::ConstantRange::areInsensitiveToSignednessOfInvertedICmpPredicate(const void **this, const llvm::ConstantRange *a2, const llvm::ConstantRange *a3)
{
  uint64_t v5 = *((unsigned int *)this + 2);
  if (v5 >= 0x41)
  {
    if (!memcmp(*this, this[2], ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) == v5)
    {
      return 1;
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    return 1;
  }
  uint64_t v6 = *((unsigned int *)a2 + 2);
  if (v6 < 0x41)
  {
    if (*((void *)a2 + 2) | *(void *)a2) {
      goto LABEL_5;
    }
    return 1;
  }
  if (!memcmp(*(const void **)a2, *((const void **)a2 + 2), ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
    && llvm::APInt::countLeadingZerosSlowCase(a2) == v6)
  {
    return 1;
  }
LABEL_5:
  if (llvm::ConstantRange::isAllNonNegative((llvm::ConstantRange *)this)
    && (llvm::ConstantRange::isAllNegative(a2) & 1) != 0)
  {
    return 1;
  }
  uint64_t result = llvm::ConstantRange::isAllNegative((llvm::ConstantRange *)this);
  if (result)
  {
    return llvm::ConstantRange::isAllNonNegative(a2);
  }
  return result;
}

uint64_t llvm::ConstantRange::getEquivalentPredWithFlippedSignedness(int a1, const void **a2, const llvm::ConstantRange *a3)
{
  uint64_t FlippedSignednessPredicate = llvm::CmpInst::getFlippedSignednessPredicate(a1);
  if (llvm::ConstantRange::areInsensitiveToSignednessOfICmpPredicate(a2, a3, v6)) {
    return FlippedSignednessPredicate;
  }
  if (!llvm::ConstantRange::areInsensitiveToSignednessOfInvertedICmpPredicate(a2, a3, v7)) {
    return 42;
  }

  return llvm::CmpInst::getInversePredicate(FlippedSignednessPredicate);
}

uint64_t llvm::ConstantRange::getEquivalentICmp(llvm::ConstantRange *this, int *a2, unsigned int *a3, uint64_t a4)
{
  unsigned int v46 = *((_DWORD *)this + 2);
  if (v46 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&__s2);
  }
  __s2 = 0;
  if (*(_DWORD *)(a4 + 8) >= 0x41u && *(void *)a4) {
    MEMORY[0x1D25D9CB0](*(void *)a4, 0x1000C8000313F17);
  }
  *(void *)a4 = __s2;
  *(_DWORD *)(a4 + 8) = v46;
  uint64_t v8 = *((unsigned int *)this + 2);
  if (v8 > 0x40)
  {
    uint64_t v24 = *(void *)this;
    if (memcmp(*(const void **)this, *((const void **)this + 2), ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8)) {
      goto LABEL_36;
    }
    if (llvm::APInt::countTrailingOnesSlowCase(this) != v8)
    {
      int v25 = 0;
      int64_t v26 = (unint64_t)(v8 + 63) >> 6;
      do
      {
        if (v26-- < 1) {
          break;
        }
        unint64_t v28 = *(void *)(v24 + 8 * v26);
        v25 += __clz(v28);
      }
      while (!v28);
      int v29 = v8 | 0xFFFFFFC0;
      if ((v8 & 0x3F) == 0) {
        int v29 = 0;
      }
      if (v25 + v29 != v8)
      {
LABEL_36:
        unsigned int v46 = v8;
        operator new[]();
      }
    }
    goto LABEL_45;
  }
  unint64_t v9 = *(void *)this;
  uint64_t v10 = *((void *)this + 2);
  if (*(void *)this != v10)
  {
    if (v10 | v9) {
      goto LABEL_6;
    }
LABEL_45:
    if (llvm::ConstantRange::isEmptySet((const void **)this)) {
      int v30 = 36;
    }
    else {
      int v30 = 35;
    }
    *a2 = v30;
    uint64_t result = sub_1CB8F1EEC((uint64_t)&__s2, v8, 0);
    if (a3[2] >= 0x41)
    {
      uint64_t result = *(void *)a3;
      if (*(void *)a3) {
        uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
      }
    }
    *(void *)a3 = __s2;
    unsigned int v20 = v46;
    goto LABEL_21;
  }
  if (!v8) {
    goto LABEL_45;
  }
  if (v9 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v8 || v9 == 0) {
    goto LABEL_45;
  }
LABEL_6:
  unsigned int v46 = *((_DWORD *)this + 2);
  __s2 = (void *)v9;
  unint64_t v11 = (const void **)((char *)this + 16);
  uint64_t result = llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  unsigned int v13 = v46;
  uint64_t v14 = __s2;
  unsigned int v46 = 0;
  uint64_t v15 = *((unsigned int *)this + 6);
  if (v15 > 0x40)
  {
    unsigned int v31 = v13;
    uint64_t result = memcmp(*v11, __s2, ((unint64_t)(v15 + 63) >> 3) & 0x3FFFFFF8);
    unsigned int v13 = v31;
    BOOL v16 = result == 0;
  }
  else
  {
    BOOL v16 = *v11 == __s2;
  }
  int v17 = v16;
  if (v13 >= 0x41)
  {
    if (v14)
    {
      uint64_t result = MEMORY[0x1D25D9CB0](v14, 0x1000C8000313F17);
      if (v46 >= 0x41)
      {
        uint64_t result = (uint64_t)__s2;
        if (__s2) {
          uint64_t result = MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
        }
      }
    }
  }
  if (v17)
  {
    *a2 = 32;
    if (a3[2] <= 0x40)
    {
      unsigned int v23 = *((_DWORD *)this + 2);
      goto LABEL_95;
    }
LABEL_97:
    unint64_t v41 = (const llvm::APInt *)a3;
    unint64_t v21 = this;
    return (uint64_t)llvm::APInt::assignSlowCase(v41, v21);
  }
  uint64_t result = (uint64_t)sub_1CC54832C((uint64_t)this);
  if (result)
  {
    unint64_t v21 = (const llvm::APInt *)result;
    *a2 = 33;
    if (a3[2] <= 0x40 && *(_DWORD *)(result + 8) <= 0x40u)
    {
      *(void *)a3 = *(void *)result;
      unsigned int v20 = *(_DWORD *)(result + 8);
      goto LABEL_21;
    }
    unint64_t v41 = (const llvm::APInt *)a3;
    return (uint64_t)llvm::APInt::assignSlowCase(v41, v21);
  }
  unsigned int v18 = *((_DWORD *)this + 2);
  if (v18 > 0x40)
  {
    unint64_t v32 = this;
    if ((*(void *)(*(void *)this + 8 * ((v18 - 1) >> 6)) >> (v18 - 1)))
    {
      uint64_t result = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)this);
      if (result == v18 - 1) {
        goto LABEL_90;
      }
      unint64_t v32 = this;
    }
    uint64_t result = llvm::APInt::countLeadingZerosSlowCase(v32);
    if (result == v18) {
      goto LABEL_17;
    }
    goto LABEL_59;
  }
  if (*(void *)this == 1 << (v18 - 1))
  {
LABEL_90:
    int v19 = 40;
LABEL_18:
    *a2 = v19;
    if (a3[2] <= 0x40 && *((_DWORD *)this + 6) <= 0x40u)
    {
      *(void *)a3 = *((void *)this + 2);
      unsigned int v20 = *((_DWORD *)this + 6);
LABEL_21:
      a3[2] = v20;
      return result;
    }
    unint64_t v41 = (const llvm::APInt *)a3;
    unint64_t v21 = (llvm::ConstantRange *)((char *)this + 16);
    return (uint64_t)llvm::APInt::assignSlowCase(v41, v21);
  }
  if (!*(void *)this)
  {
LABEL_17:
    int v19 = 36;
    goto LABEL_18;
  }
LABEL_59:
  unsigned int v33 = *((_DWORD *)this + 6);
  if (v33 > 0x40)
  {
    if (((*((void *)*v11 + ((v33 - 1) >> 6)) >> (v33 - 1)) & 1) == 0
      || (uint64_t result = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)this + 2), result != v33 - 1))
    {
      uint64_t result = llvm::APInt::countLeadingZerosSlowCase((llvm::ConstantRange *)((char *)this + 16));
      if (result != v33)
      {
        *a2 = 36;
        operator new[]();
      }
      goto LABEL_62;
    }
LABEL_92:
    int v34 = 39;
LABEL_93:
    *a2 = v34;
    if (v18 <= 0x40)
    {
      unsigned int v23 = a3[2];
LABEL_95:
      if (v23 <= 0x40)
      {
        *(void *)a3 = *(void *)this;
        unsigned int v20 = *((_DWORD *)this + 2);
        goto LABEL_21;
      }
      goto LABEL_97;
    }
    goto LABEL_97;
  }
  if (*v11 == (const void *)(1 << (v33 - 1))) {
    goto LABEL_92;
  }
  if (!*v11)
  {
LABEL_62:
    int v34 = 35;
    goto LABEL_93;
  }
  *a2 = 36;
  if (v33) {
    unint64_t v35 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v33;
  }
  else {
    unint64_t v35 = 0;
  }
  unint64_t v36 = v35 & (*((void *)this + 2) - *(void *)this);
  if (a3[2] >= 0x41 && *(void *)a3) {
    MEMORY[0x1D25D9CB0](*(void *)a3, 0x1000C8000313F17);
  }
  *(void *)a3 = v36;
  a3[2] = v33;
  unsigned int v37 = *((_DWORD *)this + 2);
  unsigned int v44 = v37;
  if (v37 > 0x40) {
    operator new[]();
  }
  if (v37) {
    unint64_t v38 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v37;
  }
  else {
    unint64_t v38 = 0;
  }
  uint64_t v43 = v38 & ~*(void *)this;
  uint64_t result = llvm::APInt::operator++((uint64_t)&v43);
  unsigned int v39 = v44;
  uint64_t v40 = v43;
  unsigned int v44 = 0;
  if (*(_DWORD *)(a4 + 8) > 0x40u && (uint64_t result = *(void *)a4) != 0)
  {
    uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
    unsigned int v42 = v44;
    *(void *)a4 = v40;
    *(_DWORD *)(a4 + 8) = v39;
    if (v42 >= 0x41)
    {
      uint64_t result = v43;
      if (v43) {
        return MEMORY[0x1D25D9CB0](v43, 0x1000C8000313F17);
      }
    }
  }
  else
  {
    *(void *)a4 = v43;
    *(_DWORD *)(a4 + 8) = v39;
  }
  return result;
}

BOOL llvm::ConstantRange::isFullSet(const void **this)
{
  uint64_t v2 = *((unsigned int *)this + 2);
  if (v2 > 0x40)
  {
    if (memcmp(*this, this[2], ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8)) {
      return 0;
    }
    return llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)this) == v2;
  }
  else
  {
    if (*this != this[2]) {
      return 0;
    }
    if (!v2) {
      return 1;
    }
    return *this == (const void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v2);
  }
}

void **sub_1CC54832C(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 16);
  unsigned int v13 = *(_DWORD *)(a1 + 24);
  if (v13 > 0x40) {
    operator new[]();
  }
  __s2 = *v2;
  llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  unsigned int v3 = v13;
  unint64_t v4 = __s2;
  unsigned int v13 = 0;
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  if (v5 > 0x40)
  {
    unint64_t v9 = *(const void **)a1;
    uint64_t v10 = __s2;
    int v11 = memcmp(v9, __s2, ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8);
    unint64_t v4 = v10;
    BOOL v6 = v11 == 0;
  }
  else
  {
    BOOL v6 = *(void *)a1 == (void)__s2;
  }
  int v7 = v6;
  if (v3 >= 0x41)
  {
    if (v4)
    {
      MEMORY[0x1D25D9CB0](v4, 0x1000C8000313F17);
      if (v13 >= 0x41)
      {
        if (__s2) {
          MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
        }
      }
    }
  }
  if (v7) {
    return v2;
  }
  else {
    return 0;
  }
}

BOOL llvm::ConstantRange::getEquivalentICmp(llvm::ConstantRange *a1, int *a2, unsigned int *a3)
{
  unsigned int v7 = 1;
  uint64_t v6 = 0;
  llvm::ConstantRange::getEquivalentICmp(a1, a2, a3, (uint64_t)&v6);
  if (v7 <= 0x40) {
    return v6 == 0;
  }
  unsigned int v4 = v7;
  BOOL v5 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v6) == v4;
  if (v6) {
    MEMORY[0x1D25D9CB0](v6, 0x1000C8000313F17);
  }
  return v5;
}

BOOL llvm::ConstantRange::icmp(const llvm::ConstantRange *a1, int a2, llvm::ConstantRange *this)
{
  llvm::ConstantRange::makeAllowedICmpRegion(this, dword_1CFAC82EC[a2], (uint64_t)&v10);
  llvm::ConstantRange::inverse((uint64_t)&v10, (uint64_t)&v6);
  if (v13 >= 0x41 && v12) {
    MEMORY[0x1D25D9CB0](v12, 0x1000C8000313F17);
  }
  if (v11 >= 0x41 && v10) {
    MEMORY[0x1D25D9CB0](v10, 0x1000C8000313F17);
  }
  BOOL v4 = llvm::ConstantRange::contains((llvm::ConstantRange *)&v6, a1);
  if (v9 >= 0x41 && v8) {
    MEMORY[0x1D25D9CB0](v8, 0x1000C8000313F17);
  }
  if (v7 >= 0x41 && v6) {
    MEMORY[0x1D25D9CB0](v6, 0x1000C8000313F17);
  }
  return v4;
}

BOOL llvm::ConstantRange::contains(llvm::ConstantRange *this, const llvm::ConstantRange *a2)
{
  uint64_t v4 = *((unsigned int *)this + 2);
  if (v4 > 0x40)
  {
    unint64_t v5 = *(void *)this;
    unsigned int v7 = (char *)*((void *)this + 2);
    if (!memcmp(*(const void **)this, v7, ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countTrailingOnesSlowCase(this) == v4)
    {
      return 1;
    }
    unint64_t v6 = (unint64_t)v7;
  }
  else
  {
    unint64_t v5 = *(void *)this;
    unint64_t v6 = *((void *)this + 2);
    if (*(void *)this == v6)
    {
      if (!v4 || v5 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v4) {
        return 1;
      }
      unsigned int v7 = (char *)*((void *)this + 2);
      unint64_t v6 = *(void *)this;
    }
    else
    {
      unsigned int v7 = (char *)*((void *)this + 2);
    }
  }
  uint64_t v8 = *((unsigned int *)a2 + 2);
  if (v8 >= 0x41)
  {
    unsigned int v9 = *(void **)a2;
    unint64_t v10 = *((void *)a2 + 2);
    if (!memcmp(*(const void **)a2, (const void *)v10, ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8))
    {
      int v25 = 0;
      int64_t v26 = (unint64_t)(v8 + 63) >> 6;
      do
      {
        BOOL v13 = v26-- < 1;
        if (v13) {
          break;
        }
        unint64_t v27 = v9[v26];
        v25 += __clz(v27);
      }
      while (!v27);
      int v28 = v8 | 0xFFFFFFC0;
      if ((v8 & 0x3F) == 0) {
        int v28 = 0;
      }
      if (v25 + v28 == v8) {
        return 1;
      }
    }
  }
  else
  {
    unsigned int v9 = *(void **)a2;
    unint64_t v10 = *((void *)a2 + 2);
    if (!(v10 | *(void *)a2)) {
      return 1;
    }
  }
  if (v4 >= 0x41)
  {
    if (!memcmp((const void *)v5, v7, ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8))
    {
      int v29 = 0;
      int64_t v30 = (unint64_t)(v4 + 63) >> 6;
      do
      {
        BOOL v13 = v30-- < 1;
        if (v13) {
          break;
        }
        unint64_t v31 = *(void *)(v5 + 8 * v30);
        v29 += __clz(v31);
      }
      while (!v31);
      int v32 = v4 | 0xFFFFFFC0;
      if ((v4 & 0x3F) == 0) {
        int v32 = 0;
      }
      if (v29 + v32 == v4) {
        return 0;
      }
    }
  }
  else if (!(v6 | v5))
  {
    return 0;
  }
  if (v8 > 0x40)
  {
    if (!memcmp(v9, (const void *)v10, ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countTrailingOnesSlowCase(a2) == v8)
    {
      return 0;
    }
  }
  else if (v9 == (void *)v10 && (!v8 || v9 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v8)))
  {
    return 0;
  }
  if (v4 > 0x40)
  {
    unint64_t v11 = ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8;
    while (v11)
    {
      unint64_t v33 = *(void *)(v5 - 8 + v11);
      unint64_t v34 = *(void *)&v7[v11 - 8];
      v11 -= 8;
      if (v33 != v34)
      {
        if (v33 > v34) {
          LODWORD(v11) = 1;
        }
        else {
          LODWORD(v11) = -1;
        }
        break;
      }
    }
  }
  else if (v5 < v6)
  {
    LODWORD(v11) = -1;
  }
  else
  {
    LODWORD(v11) = v5 > v6;
  }
  if (v8 > 0x40)
  {
    unint64_t v35 = ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8;
    do
    {
      if (!v35)
      {
        int v12 = 0;
        goto LABEL_17;
      }
      unint64_t v36 = *(void *)((char *)v9 + v35 - 8);
      unint64_t v37 = *(void *)(v10 - 8 + v35);
      v35 -= 8;
    }
    while (v36 == v37);
    if (v36 > v37) {
      int v12 = 1;
    }
    else {
      int v12 = -1;
    }
  }
  else
  {
    int v12 = (unint64_t)v9 > v10;
    if ((unint64_t)v9 < v10) {
      int v12 = -1;
    }
  }
LABEL_17:
  if ((int)v11 <= 0)
  {
    if (v12 <= 0)
    {
      if (v4 > 0x40)
      {
        unint64_t v41 = ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8;
        while (v41)
        {
          unint64_t v42 = *(void *)(v5 - 8 + v41);
          unint64_t v43 = *(void *)((char *)v9 + v41 - 8);
          v41 -= 8;
          BOOL v13 = v42 > v43;
          if (v42 != v43) {
            goto LABEL_21;
          }
        }
      }
      else
      {
        BOOL v13 = v5 > (unint64_t)v9;
LABEL_21:
        if (v13) {
          return 0;
        }
      }
      uint64_t v14 = *((unsigned int *)a2 + 6);
      if (v14 <= 0x40)
      {
        BOOL v15 = v10 >= v6;
        BOOL v16 = v10 > v6;
LABEL_31:
        int v19 = v16;
        if (!v15) {
          int v19 = -1;
        }
        return v19 < 1;
      }
      unint64_t v44 = ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8;
      while (v44)
      {
        unint64_t v45 = *(void *)(v10 - 8 + v44);
        unint64_t v46 = *(void *)&v7[v44 - 8];
        v44 -= 8;
        BOOL v24 = v45 > v46;
        if (v45 != v46) {
          goto LABEL_95;
        }
      }
LABEL_105:
      int v19 = 0;
      return v19 < 1;
    }
    return 0;
  }
  uint64_t v17 = *((unsigned int *)a2 + 6);
  if (v17 > 0x40)
  {
    unint64_t v38 = ((unint64_t)(v17 + 63) >> 3) & 0x3FFFFFF8;
    do
    {
      if (!v38)
      {
        int v18 = 0;
        goto LABEL_27;
      }
      unint64_t v39 = *(void *)(v10 - 8 + v38);
      unint64_t v40 = *(void *)&v7[v38 - 8];
      v38 -= 8;
    }
    while (v39 == v40);
    if (v39 > v40) {
      int v18 = 1;
    }
    else {
      int v18 = -1;
    }
  }
  else
  {
    int v18 = v10 > v6;
    if (v10 < v6) {
      int v18 = -1;
    }
  }
LABEL_27:
  if (v12 > 0)
  {
    if (v18 > 0) {
      return 0;
    }
    if (v4 > 0x40)
    {
      unint64_t v21 = ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8;
      while (v21)
      {
        unint64_t v22 = *(void *)(v5 - 8 + v21);
        unint64_t v23 = *(void *)((char *)v9 + v21 - 8);
        v21 -= 8;
        BOOL v24 = v22 > v23;
        if (v22 != v23)
        {
LABEL_95:
          if (v24) {
            int v19 = 1;
          }
          else {
            int v19 = -1;
          }
          return v19 < 1;
        }
      }
      goto LABEL_105;
    }
LABEL_30:
    BOOL v15 = v5 >= (unint64_t)v9;
    BOOL v16 = v5 > (unint64_t)v9;
    goto LABEL_31;
  }
  if (v18 >= 1)
  {
    if (v4 > 0x40)
    {
      unint64_t v47 = ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8;
      while (v47)
      {
        unint64_t v48 = *(void *)(v5 - 8 + v47);
        unint64_t v49 = *(void *)((char *)v9 + v47 - 8);
        v47 -= 8;
        BOOL v24 = v48 > v49;
        if (v48 != v49) {
          goto LABEL_95;
        }
      }
      goto LABEL_105;
    }
    goto LABEL_30;
  }
  return 1;
}

uint64_t llvm::ConstantRange::makeGuaranteedNoWrapRegion@<X0>(llvm::APInt *a1@<X1>, int a2@<W0>, int a3@<W2>, uint64_t a4@<X8>)
{
  unint64_t v7 = *((unsigned int *)a1 + 2);
  unsigned int v8 = *((_DWORD *)a1 + 2);
  if (a2 != 13)
  {
    HIDWORD(v25) = a2 - 13;
    LODWORD(v25) = a2 - 13;
    int v24 = v25 >> 1;
    if (v24 == 2)
    {
      if (a3 != 1)
      {
        llvm::ConstantRange::getSignedMin((uint64_t)a1, (uint64_t)&v127);
        sub_1CC54A448((uint64_t)&__src, (llvm::APInt *)&v127, v35, v36, v37);
        llvm::ConstantRange::getSignedMax(a1, (uint64_t)&v125);
        sub_1CC54A448((uint64_t)&v107, (llvm::APInt *)&v125, v38, v39, v40);
        uint64_t result = llvm::ConstantRange::intersectWith((uint64_t)&__src, (llvm::ConstantRange *)&v107, 0, a4);
        if (v110 >= 0x41)
        {
          uint64_t result = v109;
          if (v109) {
            uint64_t result = MEMORY[0x1D25D9CB0](v109, 0x1000C8000313F17);
          }
        }
        if (v108 >= 0x41)
        {
          uint64_t result = (uint64_t)v107;
          if (v107) {
            uint64_t result = MEMORY[0x1D25D9CB0](v107, 0x1000C8000313F17);
          }
        }
        if (v126 >= 0x41)
        {
          uint64_t result = (uint64_t)v125;
          if (v125) {
            uint64_t result = MEMORY[0x1D25D9CB0](v125, 0x1000C8000313F17);
          }
        }
        if (v114 >= 0x41)
        {
          uint64_t result = (uint64_t)__s2;
          if (__s2) {
            uint64_t result = MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
          }
        }
        if (v112 >= 0x41)
        {
          uint64_t result = (uint64_t)__src;
          if (__src) {
            uint64_t result = MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
          }
        }
        if (v128 >= 0x41)
        {
          uint64_t result = v127;
          if (v127) {
            return MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
          }
        }
        return result;
      }
      llvm::ConstantRange::getUnsignedMax((char **)a1, (uint64_t)&v115);
      unsigned int v27 = v116;
      if (v116 >= 0x41)
      {
        if (v27 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v115) >= 0x41 || *v115)
        {
          unsigned int v108 = v27;
          llvm::APInt::initSlowCase((llvm::APInt *)&v107);
        }
      }
      else if (v115)
      {
        unsigned int v108 = v116;
        unint64_t v107 = 0;
        llvm::APIntOps::RoundingUDiv((llvm::APInt *)&v107, (const llvm::APInt *)&v115, 2u, v26, (uint64_t)&__src);
        unsigned int v126 = v27;
        if (v27) {
          unint64_t v28 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v27;
        }
        else {
          unint64_t v28 = 0;
        }
        unint64_t v125 = (void *)v28;
        llvm::APInt::udiv((uint64_t)&v125, (const llvm::APInt *)&v115, (uint64_t)&v127);
        uint64_t result = llvm::APInt::operator+=((uint64_t)&v127, 1uLL);
        unsigned int v29 = v128;
        uint64_t v30 = v127;
        unsigned int v128 = 0;
        unsigned int v31 = v112;
        if (v112 > 0x40)
        {
          int v32 = __src;
          uint64_t result = memcmp(__src, (const void *)v127, (((unint64_t)v112 + 63) >> 3) & 0x3FFFFFF8);
          if (!result)
          {
            *(_DWORD *)(a4 + 8) = v31;
            llvm::APInt::initSlowCase((llvm::APInt *)a4);
          }
        }
        else
        {
          int v32 = __src;
          if (__src == (void *)v127)
          {
            *(_DWORD *)(a4 + 8) = v112;
            if (v31) {
              unint64_t v42 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v31;
            }
            else {
              unint64_t v42 = 0;
            }
            *(void *)a4 = v42;
            *(_DWORD *)(a4 + 24) = v31;
            *(void *)(a4 + 16) = v42;
            if (v29 >= 0x41 && v30) {
              uint64_t result = MEMORY[0x1D25D9CB0](v30, 0x1000C8000313F17);
            }
            goto LABEL_63;
          }
        }
        unsigned int v112 = 0;
        *(_DWORD *)(a4 + 8) = v31;
        *(void *)a4 = v32;
        *(_DWORD *)(a4 + 24) = v29;
        *(void *)(a4 + 16) = v30;
LABEL_63:
        if (v128 >= 0x41)
        {
          uint64_t result = v127;
          if (v127) {
            uint64_t result = MEMORY[0x1D25D9CB0](v127, 0x1000C8000313F17);
          }
        }
        if (v126 >= 0x41)
        {
          uint64_t result = (uint64_t)v125;
          if (v125) {
            uint64_t result = MEMORY[0x1D25D9CB0](v125, 0x1000C8000313F17);
          }
        }
        if (v112 >= 0x41)
        {
          uint64_t result = (uint64_t)__src;
          if (__src) {
            uint64_t result = MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
          }
        }
        if (v108 >= 0x41)
        {
          uint64_t result = (uint64_t)v107;
          if (v107) {
            uint64_t result = MEMORY[0x1D25D9CB0](v107, 0x1000C8000313F17);
          }
        }
LABEL_67:
        if (v27 < 0x41) {
          return result;
        }
        uint64_t result = (uint64_t)v115;
        if (!v115) {
          return result;
        }
        return MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
      }
      uint64_t result = (uint64_t)llvm::ConstantRange::ConstantRange((unint64_t *)a4, v27, 1);
      goto LABEL_67;
    }
    if (v24 == 6)
    {
      int v106 = *((_DWORD *)a1 + 2);
      if (v7 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v105);
      }
      uint64_t v105 = 0;
      unint64_t v48 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
      if (!v7) {
        unint64_t v48 = 0;
      }
      unint64_t v103 = v48 & v7;
      unsigned int v108 = v8;
      unint64_t v107 = 0;
      int v106 = 0;
      unsigned int v110 = v8;
      uint64_t v109 = v48 & v7;
      int v104 = 0;
      llvm::ConstantRange::intersectWith((uint64_t)a1, (llvm::ConstantRange *)&v107, 0, (uint64_t)&__src);
      if (v110 >= 0x41 && v109) {
        MEMORY[0x1D25D9CB0](v109, 0x1000C8000313F17);
      }
      if (v108 >= 0x41 && v107) {
        MEMORY[0x1D25D9CB0](v107, 0x1000C8000313F17);
      }
      unsigned int v49 = v112;
      if (v112 >= 0x41)
      {
        if (memcmp(__src, __s2, (((unint64_t)v112 + 63) >> 3) & 0x3FFFFFF8)
          || llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__src) != v49)
        {
LABEL_93:
          llvm::ConstantRange::getUnsignedMax((char **)&__src, (uint64_t)&v107);
          if (a3 == 1)
          {
            unsigned int v102 = v8;
            __s1 = 0;
            unsigned int v128 = v8;
            if (v8) {
              unint64_t v50 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
            }
            else {
              unint64_t v50 = 0;
            }
            uint64_t v127 = v50;
            unsigned int v100 = v8;
            int v99 = (void *)v50;
            if (v108 >= 0x41)
            {
              int v80 = 0;
              int64_t v81 = ((unint64_t)v108 + 63) >> 6;
              do
              {
                BOOL v45 = v81-- < 1;
                if (v45) {
                  break;
                }
                unint64_t v82 = v107[v81];
                v80 += __clz(v82);
              }
              while (!v82);
              unsigned int v83 = v108 | 0xFFFFFFC0;
              if ((v108 & 0x3F) == 0) {
                unsigned int v83 = 0;
              }
              unsigned int v52 = v7;
              if (v108 - v80 - v83 > 0x40)
              {
LABEL_100:
                if (v8 > 0x40)
                {
                  if (v52)
                  {
                    unint64_t v84 = (v7 + 63) >> 6;
                    if (v52 >> 6 >= v84) {
                      unsigned int v85 = (v7 + 63) >> 6;
                    }
                    else {
                      unsigned int v85 = v52 >> 6;
                    }
                    uint64_t v86 = v84 - v85;
                    char v87 = v52 & 0x3F;
                    if ((v52 & 0x3F) != 0)
                    {
                      if (v52 >> 6 < v84)
                      {
                        uint64_t v88 = *(void *)(v50 + 8 * v85) >> v52;
                        *(void *)unint64_t v50 = v88;
                        if (v86 != 1)
                        {
                          char v89 = v52 & 0x3F;
                          char v90 = 64 - v87;
                          uint64_t v91 = 1 - v86;
                          int v92 = (void *)(v50 + 8);
                          unsigned int v93 = v85 + 1;
                          do
                          {
                            *(v92 - 1) = (*(void *)(v50 + 8 * v93) << v90) | v88;
                            uint64_t v88 = *(void *)(v50 + 8 * v93) >> v89;
                            *v92++ = v88;
                            ++v93;
                          }
                          while (!__CFADD__(v91++, 1));
                        }
                      }
                    }
                    else
                    {
                      memmove((void *)v50, (const void *)(v50 + 8 * v85), (8 * v86));
                    }
                    bzero((void *)(v50 + 8 * v86), 8 * v85);
                  }
                }
                else if (v8 == v52)
                {
                  int v99 = 0;
                }
                else
                {
                  int v99 = (void *)(v50 >> v52);
                }
                uint64_t result = llvm::APInt::operator+=((uint64_t)&v99, 1uLL);
                unsigned int v53 = v100;
                BOOL v54 = v99;
                unsigned int v100 = 0;
                unsigned int v55 = v102;
                if (v102 > 0x40)
                {
                  unsigned int v56 = __s1;
                  uint64_t result = memcmp(__s1, v99, (((unint64_t)v102 + 63) >> 3) & 0x3FFFFFF8);
                  if (!result)
                  {
                    *(_DWORD *)(a4 + 8) = v55;
                    llvm::APInt::initSlowCase((llvm::APInt *)a4);
                  }
                }
                else
                {
                  unsigned int v56 = __s1;
                  if (__s1 == v99)
                  {
                    *(_DWORD *)(a4 + 8) = v102;
                    if (v55) {
                      unint64_t v66 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v55;
                    }
                    else {
                      unint64_t v66 = 0;
                    }
                    *(void *)a4 = v66;
                    uint64_t result = a4 + 16;
                    *(_DWORD *)(a4 + 24) = v55;
                    *(void *)(a4 + 16) = v66;
                    if (v53 >= 0x41 && v54) {
                      uint64_t result = MEMORY[0x1D25D9CB0](v54, 0x1000C8000313F17);
                    }
                    goto LABEL_130;
                  }
                }
                unsigned int v102 = 0;
                *(_DWORD *)(a4 + 8) = v55;
                *(void *)a4 = v56;
                *(_DWORD *)(a4 + 24) = v53;
                *(void *)(a4 + 16) = v54;
                unsigned int v55 = 0;
LABEL_130:
                if (v100 >= 0x41)
                {
                  uint64_t result = (uint64_t)v99;
                  if (v99) {
                    uint64_t result = MEMORY[0x1D25D9CB0](v99, 0x1000C8000313F17);
                  }
                }
                if (v128 >= 0x41)
                {
                  uint64_t result = v127;
                  if (v127) {
                    uint64_t result = MEMORY[0x1D25D9CB0](v127, 0x1000C8000313F17);
                  }
                }
                if (v55 >= 0x41 && v56) {
                  uint64_t result = MEMORY[0x1D25D9CB0](v56, 0x1000C8000313F17);
                }
LABEL_158:
                if (v108 >= 0x41)
                {
                  uint64_t result = (uint64_t)v107;
                  if (v107) {
                    uint64_t result = MEMORY[0x1D25D9CB0](v107, 0x1000C8000313F17);
                  }
                }
LABEL_159:
                if (v114 >= 0x41)
                {
                  uint64_t result = (uint64_t)__s2;
                  if (__s2) {
                    uint64_t result = MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
                  }
                }
                if (v112 >= 0x41)
                {
                  uint64_t result = (uint64_t)__src;
                  if (__src) {
                    return MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
                  }
                }
                return result;
              }
              unsigned int v51 = (void *)*v107;
            }
            else
            {
              unsigned int v51 = v107;
            }
            unsigned int v52 = v7;
            if ((unint64_t)v51 <= v7) {
              unsigned int v52 = v51;
            }
            goto LABEL_100;
          }
          unsigned int v128 = v8;
          uint64_t v127 = 1 << (v7 - 1);
          unsigned int v98 = v8;
          if (v8 > 0x40) {
            operator new[]();
          }
          unsigned int v97 = (void *)v127;
          llvm::APInt::ashrInPlace((unsigned int *)&v97, (const llvm::APInt *)&v107);
          unsigned int v126 = v8;
          if (v8) {
            unint64_t v61 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
          }
          else {
            unint64_t v61 = 0;
          }
          unint64_t v125 = (void *)(v61 & ~(1 << (v7 - 1)));
          unsigned int v96 = v8;
          uint64_t v95 = v125;
          llvm::APInt::ashrInPlace((unsigned int *)&v95, (const llvm::APInt *)&v107);
          uint64_t result = llvm::APInt::operator+=((uint64_t)&v95, 1uLL);
          unsigned int v62 = v96;
          int v63 = v95;
          unsigned int v96 = 0;
          unsigned int v64 = v98;
          if (v98 > 0x40)
          {
            uint64_t v65 = v97;
            uint64_t result = memcmp(v97, v95, (((unint64_t)v98 + 63) >> 3) & 0x3FFFFFF8);
            if (!result)
            {
              *(_DWORD *)(a4 + 8) = v64;
              llvm::APInt::initSlowCase((llvm::APInt *)a4);
            }
          }
          else
          {
            uint64_t v65 = v97;
            if (v97 == v95)
            {
              *(_DWORD *)(a4 + 8) = v98;
              if (v64) {
                unint64_t v77 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v64;
              }
              else {
                unint64_t v77 = 0;
              }
              *(void *)a4 = v77;
              uint64_t result = a4 + 16;
              *(_DWORD *)(a4 + 24) = v64;
              *(void *)(a4 + 16) = v77;
              if (v62 >= 0x41 && v63) {
                uint64_t result = MEMORY[0x1D25D9CB0](v63, 0x1000C8000313F17);
              }
              goto LABEL_156;
            }
          }
          unsigned int v98 = 0;
          *(_DWORD *)(a4 + 8) = v64;
          *(void *)a4 = v65;
          *(_DWORD *)(a4 + 24) = v62;
          *(void *)(a4 + 16) = v63;
          unsigned int v64 = 0;
LABEL_156:
          if (v96 >= 0x41)
          {
            uint64_t result = (uint64_t)v95;
            if (v95) {
              uint64_t result = MEMORY[0x1D25D9CB0](v95, 0x1000C8000313F17);
            }
          }
          if (v64 >= 0x41 && v65) {
            uint64_t result = MEMORY[0x1D25D9CB0](v65, 0x1000C8000313F17);
          }
          goto LABEL_158;
        }
      }
      else if ((unint64_t)__s2 | (unint64_t)__src)
      {
        goto LABEL_93;
      }
      uint64_t result = (uint64_t)llvm::ConstantRange::ConstantRange((unint64_t *)a4, v8, 1);
      goto LABEL_159;
    }
    if (a3 == 1)
    {
      uint64_t result = (uint64_t)llvm::ConstantRange::getUnsignedMax((char **)a1, (uint64_t)&v119);
      unsigned int v118 = v8;
      if (v7 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v117);
      }
      int v117 = 0;
      unsigned int v57 = v120;
      if (v120 > 0x40)
      {
        unsigned int v58 = v119;
        unint64_t v59 = v117;
        uint64_t result = memcmp(v119, v117, (((unint64_t)v120 + 63) >> 3) & 0x3FFFFFF8);
        if (!result)
        {
          *(_DWORD *)(a4 + 8) = v57;
          llvm::APInt::initSlowCase((llvm::APInt *)a4);
        }
      }
      else
      {
        unsigned int v58 = v119;
        unint64_t v59 = v117;
        if (v119 == v117)
        {
          *(_DWORD *)(a4 + 8) = v120;
          unint64_t v78 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v57;
          if (!v57) {
            unint64_t v78 = 0;
          }
          *(void *)a4 = v78;
          uint64_t result = a4 + 16;
          *(_DWORD *)(a4 + 24) = v57;
          *(void *)(a4 + 16) = v78;
          goto LABEL_166;
        }
      }
      unsigned int v60 = v118;
      unsigned int v118 = 0;
      *(_DWORD *)(a4 + 8) = v57;
      *(void *)a4 = v58;
      *(_DWORD *)(a4 + 24) = v60;
      *(void *)(a4 + 16) = v59;
      unsigned int v57 = 0;
LABEL_166:
      if (v57 >= 0x41 && v58)
      {
        JUMPOUT(0x1D25D9CB0);
      }
      return result;
    }
    unsigned int v112 = *((_DWORD *)a1 + 2);
    if (v7 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&__src);
    }
    __src = (void *)(1 << (v7 - 1));
    llvm::ConstantRange::getSignedMin((uint64_t)a1, (uint64_t)&v107);
    uint64_t result = (uint64_t)llvm::ConstantRange::getSignedMax(a1, (uint64_t)&v127);
    unsigned int v67 = v128;
    unsigned int v68 = v128 - 1;
    if (v128 > 0x40)
    {
      uint64_t v69 = v127;
      if (((*(void *)(v127 + 8 * (v68 >> 6)) >> v68) & 1) == 0)
      {
        uint64_t result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v127);
        if (result != v67) {
          goto LABEL_141;
        }
      }
    }
    else
    {
      uint64_t v69 = v127;
      if (v127 && (v127 & (1 << v68)) == 0)
      {
LABEL_141:
        if (v8 >= 0x41) {
          operator new[]();
        }
        uint64_t v70 = __src;
        if (v8) {
          unint64_t v71 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
        }
        else {
          unint64_t v71 = 0;
        }
        unint64_t v72 = v71 & ((unint64_t)__src + v69);
LABEL_145:
        unsigned int v73 = v108;
        unint64_t v74 = v107;
        unint64_t v75 = &v107[(v108 - 1) >> 6];
        if (v108 < 0x41) {
          unint64_t v75 = &v107;
        }
        if (((1 << (v108 - 1)) & *v75) != 0)
        {
          if (v8) {
            unint64_t v76 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
          }
          else {
            unint64_t v76 = 0;
          }
          uint64_t v70 = (void *)(v76 & ((unint64_t)v107 + (void)v70));
        }
        if ((void *)v72 == v70)
        {
          *(_DWORD *)(a4 + 8) = v8;
          unint64_t v79 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
          if (!v8) {
            unint64_t v79 = 0;
          }
          *(void *)a4 = v79;
          uint64_t result = a4 + 16;
          *(_DWORD *)(a4 + 24) = v8;
          *(void *)(a4 + 16) = v79;
        }
        else
        {
          *(_DWORD *)(a4 + 8) = v8;
          *(void *)a4 = v72;
          *(_DWORD *)(a4 + 24) = v8;
          *(void *)(a4 + 16) = v70;
        }
        if (v67 >= 0x41 && v69) {
          uint64_t result = MEMORY[0x1D25D9CB0](v69, 0x1000C8000313F17);
        }
        if (v73 >= 0x41 && v74) {
          return MEMORY[0x1D25D9CB0](v74, 0x1000C8000313F17);
        }
        return result;
      }
    }
    if (v8 > 0x40) {
      operator new[]();
    }
    unint64_t v72 = (unint64_t)__src;
    uint64_t v70 = __src;
    goto LABEL_145;
  }
  if (a3 != 1)
  {
    unsigned int v112 = *((_DWORD *)a1 + 2);
    if (v7 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&__src);
    }
    __src = (void *)(1 << (v7 - 1));
    llvm::ConstantRange::getSignedMin((uint64_t)a1, (uint64_t)&v107);
    uint64_t result = (uint64_t)llvm::ConstantRange::getSignedMax(a1, (uint64_t)&v127);
    unsigned int v10 = v108;
    unint64_t v11 = v107;
    int v12 = &v107[(v108 - 1) >> 6];
    if (v108 < 0x41) {
      int v12 = &v107;
    }
    if (((1 << (v108 - 1)) & *v12) != 0)
    {
      if (v8 >= 0x41) {
        operator new[]();
      }
      BOOL v13 = __src;
      if (v8) {
        unint64_t v41 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
      }
      else {
        unint64_t v41 = 0;
      }
      uint64_t v14 = v41 & ((unsigned char *)__src - (unsigned char *)v107);
    }
    else
    {
      if (v8 > 0x40) {
        operator new[]();
      }
      BOOL v13 = __src;
      uint64_t v14 = (uint64_t)__src;
    }
    unsigned int v15 = v128;
    unsigned int v16 = v128 - 1;
    if (v128 > 0x40)
    {
      uint64_t v17 = v127;
      if ((*(void *)(v127 + 8 * (v16 >> 6)) >> v16)) {
        goto LABEL_15;
      }
      int v43 = 0;
      int64_t v44 = ((unint64_t)v128 + 63) >> 6;
      do
      {
        BOOL v45 = v44-- < 1;
        if (v45) {
          break;
        }
        unint64_t v46 = *(void *)(v127 + 8 * v44);
        v43 += __clz(v46);
      }
      while (!v46);
      unsigned int v47 = v128 | 0xFFFFFFC0;
      if ((v128 & 0x3F) == 0) {
        unsigned int v47 = 0;
      }
      if (v43 + v47 == v128) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v17 = v127;
      if (!v127 || (v127 & (1 << v16)) != 0) {
        goto LABEL_15;
      }
    }
    if (v8) {
      unint64_t v18 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
    }
    else {
      unint64_t v18 = 0;
    }
    BOOL v13 = (void *)(v18 & ((unint64_t)v13 - v17));
LABEL_15:
    if ((void *)v14 == v13)
    {
      *(_DWORD *)(a4 + 8) = v8;
      if (v8) {
        unint64_t v33 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
      }
      else {
        unint64_t v33 = 0;
      }
      *(void *)a4 = v33;
      *(_DWORD *)(a4 + 24) = v8;
      *(void *)(a4 + 16) = v33;
    }
    else
    {
      *(_DWORD *)(a4 + 8) = v8;
      *(void *)a4 = v14;
      *(_DWORD *)(a4 + 24) = v8;
      *(void *)(a4 + 16) = v13;
    }
    if (v15 >= 0x41 && v17) {
      uint64_t result = MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
    }
    if (v10 >= 0x41)
    {
      if (v11) {
        return MEMORY[0x1D25D9CB0](v11, 0x1000C8000313F17);
      }
    }
    return result;
  }
  unsigned int v124 = *((_DWORD *)a1 + 2);
  if (v7 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v123);
  }
  uint64_t v123 = 0;
  llvm::ConstantRange::getUnsignedMax((char **)a1, (uint64_t)&v121);
  if (v122 > 0x40)
  {
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v121);
  }
  else
  {
    if (v122) {
      unint64_t v19 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v122;
    }
    else {
      unint64_t v19 = 0;
    }
    unint64_t v121 = v19 & ~v121;
  }
  uint64_t result = llvm::APInt::operator++((uint64_t)&v121);
  unsigned int v20 = v122;
  unint64_t v21 = v121;
  unsigned int v122 = 0;
  unsigned int v22 = v124;
  if (v124 > 0x40)
  {
    uint64_t v23 = (uint64_t)v123;
    uint64_t result = memcmp(v123, (const void *)v121, (((unint64_t)v124 + 63) >> 3) & 0x3FFFFFF8);
    if (!result)
    {
      *(_DWORD *)(a4 + 8) = v22;
      llvm::APInt::initSlowCase((llvm::APInt *)a4);
    }
    goto LABEL_25;
  }
  uint64_t v23 = (uint64_t)v123;
  if (v123 != (const void *)v121)
  {
LABEL_25:
    unsigned int v124 = 0;
    *(_DWORD *)(a4 + 8) = v22;
    *(void *)a4 = v23;
    *(_DWORD *)(a4 + 24) = v20;
    *(void *)(a4 + 16) = v21;
    unsigned int v22 = 0;
    goto LABEL_45;
  }
  *(_DWORD *)(a4 + 8) = v124;
  if (v22) {
    unint64_t v34 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v22;
  }
  else {
    unint64_t v34 = 0;
  }
  *(void *)a4 = v34;
  *(_DWORD *)(a4 + 24) = v22;
  *(void *)(a4 + 16) = v34;
  if (v20 >= 0x41 && v21) {
    uint64_t result = MEMORY[0x1D25D9CB0](v21, 0x1000C8000313F17);
  }
LABEL_45:
  if (v122 >= 0x41)
  {
    uint64_t result = v121;
    if (v121) {
      uint64_t result = MEMORY[0x1D25D9CB0](v121, 0x1000C8000313F17);
    }
  }
  if (v22 >= 0x41 && v23)
  {
    uint64_t result = v23;
    return MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
  }
  return result;
}

uint64_t sub_1CC54A448(uint64_t this, llvm::APInt *a2, uint64_t a3, uint64_t a4, llvm::APInt *a5)
{
  uint64_t v6 = this;
  uint64_t v7 = *((unsigned int *)a2 + 2);
  if (v7 >= 0x41)
  {
    int v9 = 0;
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    unint64_t v11 = *(void **)a2;
    uint64_t v12 = v10;
    do
    {
      BOOL v13 = v12-- < 1;
      if (v13) {
        break;
      }
      unint64_t v14 = v11[v12];
      v9 += __clz(v14);
    }
    while (!v14);
    int v15 = v7 | 0xFFFFFFC0;
    if ((v7 & 0x3F) == 0) {
      int v15 = 0;
    }
    if ((v7 - v9 - v15) < 0x41 && !*v11) {
      goto LABEL_17;
    }
    int v16 = 0;
    do
    {
      BOOL v13 = v10-- < 1;
      if (v13) {
        break;
      }
      unint64_t v17 = v11[v10];
      v16 += __clz(v17);
    }
    while (!v17);
    if (v16 + v15 == v7 - 1)
    {
LABEL_17:
      *(_DWORD *)(this + 8) = v7;
      llvm::APInt::initSlowCase((llvm::APInt *)this);
    }
    unsigned int v42 = *((_DWORD *)a2 + 2);
    llvm::APInt::initSlowCase((llvm::APInt *)&v41);
  }
  if (*(void *)a2 < 2uLL)
  {
    *(_DWORD *)(this + 8) = v7;
    unint64_t v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
    if (!v7) {
      unint64_t v8 = 0;
    }
    *(void *)this = v8;
    *(_DWORD *)(this + 24) = v7;
    *(void *)(this + 16) = v8;
    return this;
  }
  unsigned int v42 = *((_DWORD *)a2 + 2);
  unint64_t v41 = (void *)(1 << (v7 - 1));
  unsigned int v40 = v7;
  unint64_t v18 = (void *)(0xFFFFFFFFFFFFFFFFLL >> ((v7 - 1) & 0x3F ^ 0x3F));
  if (!v7) {
    unint64_t v18 = 0;
  }
  __src = v18;
  __src = (void *)((unint64_t)__src & ~(1 << (v7 - 1)));
  unsigned int v19 = *((_DWORD *)a2 + 2);
  if (!v19) {
    goto LABEL_27;
  }
  if (v19 <= 0x40)
  {
    uint64_t v20 = *(void *)a2;
    if (*(void *)a2 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v19) {
      goto LABEL_33;
    }
LABEL_27:
    int v38 = v7;
    unint64_t v21 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
    if (!v7) {
      unint64_t v21 = 0;
    }
    unint64_t v37 = v21 & ~(unint64_t)__src;
    this = llvm::APInt::operator++((uint64_t)&v37);
    int v22 = v38;
    unint64_t v23 = v37;
    int v38 = 0;
    unsigned int v24 = v42;
    if (v42 > 0x40) {
      operator new[]();
    }
    unint64_t v25 = v41;
    *(_DWORD *)(v6 + 8) = v22;
    *(void *)uint64_t v6 = v23;
    *(_DWORD *)(v6 + 24) = v24;
    *(void *)(v6 + 16) = v25;
    goto LABEL_43;
  }
  if (llvm::APInt::countTrailingOnesSlowCase(a2) == v19) {
    goto LABEL_27;
  }
  uint64_t v20 = *(void *)a2;
LABEL_33:
  int64_t v26 = (llvm::APInt *)(v20 + 8 * ((v19 - 1) >> 6));
  if (v19 < 0x41) {
    int64_t v26 = a2;
  }
  if ((*(void *)v26 >> (v19 - 1)))
  {
    llvm::APIntOps::RoundingSDiv(a2, (llvm::APInt *)&__src, 2, a5, (uint64_t)&v35);
    uint64_t v28 = v35;
    unsigned int v29 = v36;
    p_src = &v41;
  }
  else
  {
    llvm::APIntOps::RoundingSDiv(a2, (llvm::APInt *)&v41, 2, a5, (uint64_t)&v35);
    uint64_t v28 = v35;
    unsigned int v29 = v36;
    p_src = &__src;
  }
  llvm::APIntOps::RoundingSDiv(a2, (llvm::APInt *)p_src, 0, v27, (uint64_t)&v35);
  if (v29 >= 0x41) {
    operator new[]();
  }
  unsigned int v34 = v36;
  if (v36 > 0x40) {
    operator new[]();
  }
  uint64_t v33 = v35;
  this = llvm::APInt::operator+=((uint64_t)&v33, 1uLL);
  unsigned int v31 = v34;
  uint64_t v32 = v33;
  unsigned int v34 = 0;
  *(_DWORD *)(v6 + 8) = v29;
  *(void *)uint64_t v6 = v28;
  *(_DWORD *)(v6 + 24) = v31;
  *(void *)(v6 + 16) = v32;
LABEL_43:
  if (v40 >= 0x41)
  {
    this = (uint64_t)__src;
    if (__src) {
      this = MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
    }
  }
  if (v42 >= 0x41)
  {
    this = (uint64_t)v41;
    if (v41) {
      return MEMORY[0x1D25D9CB0](v41, 0x1000C8000313F17);
    }
  }
  return this;
}

uint64_t llvm::ConstantRange::intersectWith@<X0>(uint64_t result@<X0>, llvm::ConstantRange *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  LODWORD(v7) = *(_DWORD *)(result + 8);
  while (1)
  {
    unint64_t v8 = a2;
    a2 = (llvm::ConstantRange *)result;
    unsigned int v9 = v7;
    int64_t v10 = (const llvm::APInt *)(result + 16);
    if (v7 >= 0x41)
    {
      uint64_t v29 = a3;
      uint64_t v30 = (const llvm::APInt *)(result + 16);
      unint64_t v11 = *(void **)result;
      unint64_t v31 = v7 + 63;
      unint64_t v12 = *(void *)(result + 16);
      uint64_t result = memcmp(*(const void **)result, (const void *)v12, (v31 >> 3) & 0x3FFFFFF8);
      if (result)
      {
        int64_t v10 = v30;
        a3 = v29;
      }
      else
      {
        int v43 = 0;
        uint64_t v44 = v31 >> 6;
        int64_t v10 = v30;
        a3 = v29;
        do
        {
          BOOL v17 = v44-- < 1;
          if (v17) {
            break;
          }
          unint64_t v45 = v11[v44];
          v43 += __clz(v45);
        }
        while (!v45);
        unsigned int v46 = v9 | 0xFFFFFFC0;
        if ((v9 & 0x3F) == 0) {
          unsigned int v46 = 0;
        }
        if (v43 + v46 == v9)
        {
          *(_DWORD *)(a4 + 8) = v9;
          goto LABEL_176;
        }
      }
    }
    else
    {
      unint64_t v11 = *(void **)result;
      unint64_t v12 = *(void *)(result + 16);
      if (!(v12 | *(void *)result))
      {
        *(_DWORD *)(a4 + 8) = v7;
        goto LABEL_20;
      }
    }
    unint64_t v7 = *((unsigned int *)v8 + 2);
    BOOL v13 = v7 < 0x41;
    if (v7 > 0x40)
    {
      unsigned int v100 = a3;
      unsigned int v102 = v10;
      unint64_t v14 = *(void *)v8;
      unint64_t v15 = *((void *)v8 + 2);
      uint64_t result = memcmp(*(const void **)v8, (const void *)v15, ((v7 + 63) >> 3) & 0x3FFFFFF8);
      if (!result)
      {
        uint64_t result = llvm::APInt::countTrailingOnesSlowCase(v8);
        int64_t v10 = v102;
        if (result == v7) {
          goto LABEL_19;
        }
        uint64_t result = llvm::APInt::countLeadingZerosSlowCase(v8);
        if (result == v7)
        {
          *(_DWORD *)(a4 + 8) = v7;
          goto LABEL_131;
        }
      }
      int64_t v10 = v102;
      a3 = v100;
    }
    else
    {
      unint64_t v14 = *(void *)v8;
      unint64_t v15 = *((void *)v8 + 2);
      if (*(void *)v8 == v15 && (!v7 || v14 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v7))
      {
LABEL_19:
        *(_DWORD *)(a4 + 8) = v9;
        if (v9 < 0x41)
        {
LABEL_20:
          *(void *)a4 = *(void *)a2;
          unsigned int v19 = *((_DWORD *)a2 + 6);
          *(_DWORD *)(a4 + 24) = v19;
          if (v19 > 0x40) {
            operator new[]();
          }
          uint64_t v20 = *(void *)v10;
LABEL_41:
          *(void *)(a4 + 16) = v20;
          return result;
        }
LABEL_176:
        operator new[]();
      }
      if (!(v15 | v14)) {
        goto LABEL_119;
      }
    }
    if (v9 > 0x40)
    {
      unint64_t v103 = v10;
      unsigned int v101 = a3;
      uint64_t result = memcmp(v11, (const void *)v12, (((unint64_t)*((unsigned int *)a2 + 2) + 63) >> 3) & 0x3FFFFFF8);
      a3 = v101;
      int64_t v10 = v103;
      if (!result)
      {
        uint64_t result = llvm::APInt::countTrailingOnesSlowCase(a2);
        a3 = v101;
        int64_t v10 = v103;
        if (result == v9)
        {
LABEL_38:
          *(_DWORD *)(a4 + 8) = v7;
          if (v7 >= 0x41) {
            goto LABEL_131;
          }
          goto LABEL_39;
        }
      }
    }
    else if (v11 == (void *)v12 && (!v9 || v11 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v9)))
    {
      goto LABEL_38;
    }
    uint64_t v16 = *((unsigned int *)a2 + 2);
    if (v16 <= 0x40) {
      break;
    }
    unint64_t v32 = ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8;
    while (v32)
    {
      unint64_t v33 = *(void *)((char *)v11 + v32 - 8);
      unint64_t v34 = *(void *)(v12 - 8 + v32);
      v32 -= 8;
      BOOL v17 = v33 > v34;
      if (v33 != v34) {
        goto LABEL_11;
      }
    }
LABEL_12:
    if (v7 > 0x40)
    {
      unint64_t v35 = ((v7 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v35) {
          goto LABEL_74;
        }
        unint64_t v36 = *(void *)(v14 - 8 + v35);
        unint64_t v37 = *(void *)(v15 - 8 + v35);
        v35 -= 8;
      }
      while (v36 == v37);
      if (v36 <= v37)
      {
LABEL_74:
        BOOL v13 = 0;
LABEL_29:
        if (v16 > 0x40)
        {
          unint64_t v38 = ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            if (!v38) {
              goto LABEL_79;
            }
            unint64_t v39 = *(void *)((char *)v11 + v38 - 8);
            unint64_t v40 = *(void *)(v14 - 8 + v38);
            v38 -= 8;
          }
          while (v39 == v40);
          if (v39 <= v40)
          {
LABEL_31:
            uint64_t v22 = *((unsigned int *)a2 + 6);
            if (v22 > 0x40)
            {
              unint64_t v60 = 8 * ((unint64_t)(v22 + 63) >> 6);
              unint64_t v61 = (char *)(v12 - 8);
              unint64_t v62 = v60;
              do
              {
                if (!v62) {
                  goto LABEL_33;
                }
                unint64_t v63 = *(void *)&v61[v62];
                unint64_t v64 = *(void *)(v14 - 8 + v62);
                v62 -= 8;
              }
              while (v63 == v64);
              if (v63 <= v64) {
                goto LABEL_33;
              }
              do
              {
                if (!v60) {
                  goto LABEL_130;
                }
                unint64_t v65 = *(void *)&v61[v60];
                unint64_t v66 = *(void *)(v15 - 8 + v60);
                v60 -= 8;
              }
              while (v65 == v66);
              if (v65 <= v66)
              {
LABEL_43:
                if (!v13) {
                  operator new[]();
                }
                if (v22 <= 0x40) {
                  goto LABEL_45;
                }
                goto LABEL_58;
              }
            }
            else
            {
              if (v12 <= v14) {
                goto LABEL_33;
              }
              if (v12 < v15) {
                goto LABEL_43;
              }
            }
LABEL_130:
            *(_DWORD *)(a4 + 8) = v7;
            if (!v13) {
LABEL_131:
            }
              operator new[]();
LABEL_39:
            *(void *)a4 = *(void *)v8;
            unsigned int v24 = *((_DWORD *)v8 + 6);
            *(_DWORD *)(a4 + 24) = v24;
            if (v24 > 0x40) {
              operator new[]();
            }
            uint64_t v20 = *((void *)v8 + 2);
            goto LABEL_41;
          }
        }
        else if ((unint64_t)v11 < v14)
        {
          goto LABEL_31;
        }
LABEL_79:
        uint64_t v41 = *((unsigned int *)a2 + 6);
        if (v41 > 0x40)
        {
          unint64_t v67 = ((unint64_t)(v41 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            if (!v67) {
              goto LABEL_136;
            }
            unint64_t v68 = *(void *)(v12 - 8 + v67);
            unint64_t v69 = *(void *)(v15 - 8 + v67);
            v67 -= 8;
          }
          while (v68 == v69);
          if (v68 <= v69) {
            goto LABEL_81;
          }
        }
        else if (v12 < v15)
        {
LABEL_81:
          *(_DWORD *)(a4 + 8) = v9;
          if (v9 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)a4, a2);
          }
          *(void *)a4 = *(void *)a2;
          uint64_t result = a4 + 16;
          unsigned int v42 = *((_DWORD *)a2 + 6);
          *(_DWORD *)(a4 + 24) = v42;
          if (v42 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)result, v10);
          }
          uint64_t v23 = *(void *)v10;
LABEL_35:
          *(void *)uint64_t result = v23;
          return result;
        }
LABEL_136:
        if (v16 > 0x40)
        {
          unint64_t v84 = ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            if (!v84) {
              goto LABEL_33;
            }
            unint64_t v85 = *(void *)((char *)v11 + v84 - 8);
            unint64_t v86 = *(void *)(v15 - 8 + v84);
            v84 -= 8;
          }
          while (v85 == v86);
          if (v85 > v86) {
            goto LABEL_33;
          }
        }
        else if ((unint64_t)v11 >= v15)
        {
          goto LABEL_33;
        }
        if (v9 >= 0x41) {
          operator new[]();
        }
        LODWORD(v26) = *((_DWORD *)v8 + 6);
        if (v26 > 0x40) {
          goto LABEL_191;
        }
        goto LABEL_140;
      }
      BOOL v18 = 1;
    }
    else
    {
      BOOL v18 = v14 > v15;
      if (v14 < v15)
      {
        BOOL v13 = 1;
        goto LABEL_29;
      }
    }
    uint64_t result = (uint64_t)v8;
    if (!v18) {
      goto LABEL_29;
    }
  }
  BOOL v17 = (unint64_t)v11 > v12;
LABEL_11:
  if (!v17) {
    goto LABEL_12;
  }
  if (v7 > 0x40)
  {
    unint64_t v47 = 8 * ((v7 + 63) >> 6);
    unint64_t v48 = (char *)(v14 - 8);
    unint64_t v49 = v47;
    do
    {
      if (!v49) {
        goto LABEL_95;
      }
      unint64_t v50 = *(void *)&v48[v49];
      unint64_t v51 = *(void *)(v15 - 8 + v49);
      v49 -= 8;
    }
    while (v50 == v51);
    if (v50 > v51) {
      goto LABEL_103;
    }
LABEL_95:
    unint64_t v52 = 8 * ((v7 + 63) >> 6);
    do
    {
      if (!v52) {
        goto LABEL_99;
      }
      unint64_t v53 = *(void *)&v48[v52];
      unint64_t v54 = *(void *)(v12 - 8 + v52);
      v52 -= 8;
    }
    while (v53 == v54);
    if (v53 > v54)
    {
      do
      {
LABEL_99:
        if (!v47) {
          goto LABEL_102;
        }
        unint64_t v55 = *(void *)&v48[v47];
        unint64_t v56 = v11[v47 / 8 - 1];
        v47 -= 8;
      }
      while (v55 == v56);
      if (v55 <= v56) {
        goto LABEL_47;
      }
      goto LABEL_102;
    }
LABEL_25:
    uint64_t v21 = *((unsigned int *)v8 + 6);
    if (v21 > 0x40)
    {
      unint64_t v77 = 8 * ((unint64_t)(v21 + 63) >> 6);
      unint64_t v78 = (char *)(v15 - 8);
      unint64_t v79 = v77;
      do
      {
        if (!v79) {
          goto LABEL_154;
        }
        unint64_t v80 = *(void *)&v78[v79];
        unint64_t v81 = *(void *)(v12 - 8 + v79);
        v79 -= 8;
      }
      while (v80 == v81);
      if (v80 <= v81)
      {
LABEL_27:
        *(_DWORD *)(a4 + 8) = v7;
        if (v7 > 0x40) {
          goto LABEL_131;
        }
        goto LABEL_39;
      }
LABEL_154:
      while (v77)
      {
        unint64_t v82 = *(void *)&v78[v77];
        unint64_t v83 = v11[v77 / 8 - 1];
        v77 -= 8;
        BOOL v28 = v82 > v83;
        if (v82 != v83) {
          goto LABEL_55;
        }
      }
    }
    else
    {
      if (v15 < v12) {
        goto LABEL_27;
      }
      BOOL v28 = v15 > (unint64_t)v11;
LABEL_55:
      if (v28) {
        goto LABEL_107;
      }
    }
    if (v7 < 0x41) {
      goto LABEL_57;
    }
    goto LABEL_181;
  }
  if (v14 > v15)
  {
LABEL_103:
    uint64_t v57 = *((unsigned int *)v8 + 6);
    if (v57 > 0x40)
    {
      unint64_t v70 = 8 * ((unint64_t)(v57 + 63) >> 6);
      unint64_t v71 = (char *)(v15 - 8);
      unint64_t v72 = v70;
      do
      {
        if (!v72) {
          goto LABEL_147;
        }
        unint64_t v73 = *(void *)&v71[v72];
        unint64_t v74 = *(void *)(v12 - 8 + v72);
        v72 -= 8;
      }
      while (v73 == v74);
      if (v73 <= v74) {
        goto LABEL_105;
      }
LABEL_147:
      while (v70)
      {
        unint64_t v75 = *(void *)&v71[v70];
        unint64_t v76 = v11[v70 / 8 - 1];
        v70 -= 8;
        BOOL v58 = v75 > v76;
        if (v75 != v76) {
          goto LABEL_111;
        }
      }
    }
    else
    {
      if (v15 < v12)
      {
LABEL_105:
        if (v7 <= 0x40)
        {
          if (v14 < v12)
          {
LABEL_107:
            return sub_1CC54C3F8(a4, a2, v8, a3);
          }
          if (v14 >= (unint64_t)v11)
          {
LABEL_119:
            *(_DWORD *)(a4 + 8) = v7;
            goto LABEL_39;
          }
LABEL_116:
          if (v9 >= 0x41) {
            operator new[]();
          }
          if (v57 > 0x40) {
            operator new[]();
          }
          uint64_t v59 = *((void *)v8 + 2);
          *(_DWORD *)(a4 + 8) = v9;
          *(void *)a4 = v11;
          *(_DWORD *)(a4 + 24) = v57;
          goto LABEL_141;
        }
        unint64_t v87 = 8 * ((v7 + 63) >> 6);
        uint64_t v88 = (char *)(v14 - 8);
        unint64_t v89 = v87;
        do
        {
          if (!v89) {
            goto LABEL_167;
          }
          unint64_t v90 = *(void *)&v88[v89];
          unint64_t v91 = *(void *)(v12 - 8 + v89);
          v89 -= 8;
        }
        while (v90 == v91);
        if (v90 <= v91) {
          goto LABEL_107;
        }
        do
        {
LABEL_167:
          if (!v87) {
            goto LABEL_102;
          }
          unint64_t v92 = *(void *)&v88[v87];
          unint64_t v93 = v11[v87 / 8 - 1];
          v87 -= 8;
        }
        while (v92 == v93);
        if (v92 <= v93) {
          goto LABEL_116;
        }
LABEL_102:
        *(_DWORD *)(a4 + 8) = v7;
        goto LABEL_131;
      }
      BOOL v58 = v15 > (unint64_t)v11;
LABEL_111:
      if (v58) {
        goto LABEL_107;
      }
    }
    if (v7 <= 0x40)
    {
      if (v14 < (unint64_t)v11) {
        goto LABEL_81;
      }
LABEL_57:
      LODWORD(v22) = *((_DWORD *)a2 + 6);
      if (v22 <= 0x40)
      {
LABEL_45:
        uint64_t v25 = *(void *)v10;
        *(_DWORD *)(a4 + 8) = v7;
        *(void *)a4 = v14;
        *(_DWORD *)(a4 + 24) = v22;
        *(void *)(a4 + 16) = v25;
        return result;
      }
LABEL_58:
      operator new[]();
    }
    unint64_t v94 = ((v7 + 63) >> 3) & 0x3FFFFFF8;
    do
    {
      if (!v94) {
        goto LABEL_181;
      }
      unint64_t v95 = *(void *)(v14 - 8 + v94);
      unint64_t v96 = *(void *)((char *)v11 + v94 - 8);
      v94 -= 8;
    }
    while (v95 == v96);
    if (v95 <= v96) {
      goto LABEL_81;
    }
LABEL_181:
    operator new[]();
  }
  if (v14 < v12) {
    goto LABEL_25;
  }
  if (v14 >= (unint64_t)v11) {
    goto LABEL_119;
  }
LABEL_47:
  uint64_t v26 = *((unsigned int *)v8 + 6);
  if (v26 > 0x40)
  {
    unint64_t v97 = ((unint64_t)(v26 + 63) >> 3) & 0x3FFFFFF8;
    while (v97)
    {
      unint64_t v98 = *(void *)(v15 - 8 + v97);
      unint64_t v99 = *(void *)((char *)v11 + v97 - 8);
      v97 -= 8;
      BOOL v27 = v98 > v99;
      if (v98 != v99) {
        goto LABEL_49;
      }
    }
LABEL_33:
    *(_DWORD *)(a4 + 8) = v9;
    if (v9 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)a4);
    }
    uint64_t v23 = 0;
    *(void *)a4 = 0;
    uint64_t result = a4 + 16;
    *(_DWORD *)(a4 + 24) = v9;
    goto LABEL_35;
  }
  BOOL v27 = v15 > (unint64_t)v11;
LABEL_49:
  if (!v27) {
    goto LABEL_33;
  }
  if (v9 >= 0x41) {
    operator new[]();
  }
  if (v26 > 0x40) {
LABEL_191:
  }
    operator new[]();
LABEL_140:
  uint64_t v59 = *((void *)v8 + 2);
  *(_DWORD *)(a4 + 8) = v9;
  *(void *)a4 = v11;
  *(_DWORD *)(a4 + 24) = v26;
LABEL_141:
  *(void *)(a4 + 16) = v59;
  return result;
}

uint64_t llvm::ConstantRange::isWrappedSet(llvm::ConstantRange *this)
{
  uint64_t v1 = *((unsigned int *)this + 2);
  if (v1 > 0x40)
  {
    unint64_t v2 = *((void *)this + 2);
    unint64_t v4 = ((unint64_t)(v1 + 63) >> 3) & 0x3FFFFFF8;
    while (v4)
    {
      unint64_t v5 = *(void *)(*(void *)this - 8 + v4);
      unint64_t v6 = *(void *)(v2 - 8 + v4);
      v4 -= 8;
      if (v5 != v6)
      {
        if (v5 <= v6) {
          return 0;
        }
        goto LABEL_8;
      }
    }
    return 0;
  }
  unint64_t v2 = *((void *)this + 2);
  if (*(void *)this <= v2) {
    return 0;
  }
LABEL_8:
  unsigned int v7 = *((_DWORD *)this + 6);
  if (v7 > 0x40) {
    BOOL v8 = llvm::APInt::countLeadingZerosSlowCase((llvm::ConstantRange *)((char *)this + 16)) == v7;
  }
  else {
    BOOL v8 = v2 == 0;
  }
  int v9 = v8;
  return v9 ^ 1u;
}

BOOL llvm::ConstantRange::isSizeStrictlySmallerThan(llvm::ConstantRange *this, const void **a2)
{
  uint64_t v4 = *((unsigned int *)this + 2);
  if (v4 > 0x40)
  {
    uint64_t v5 = *(void *)this;
    unint64_t v6 = (const void *)*((void *)this + 2);
    if (memcmp(*(const void **)this, v6, ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8)
      || llvm::APInt::countTrailingOnesSlowCase(this) != v4)
    {
      goto LABEL_3;
    }
    return 0;
  }
  uint64_t v5 = *(void *)this;
  unint64_t v6 = (const void *)*((void *)this + 2);
  if (*(const void **)this == v6)
  {
    if (v4)
    {
      BOOL result = 0;
      unint64_t v6 = *(const void **)this;
      if (v5 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v4) {
        return result;
      }
      goto LABEL_3;
    }
    return 0;
  }
LABEL_3:
  uint64_t v7 = *((unsigned int *)a2 + 2);
  if (v7 > 0x40)
  {
    if (!memcmp(*a2, a2[2], ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)a2) == v7)
    {
      return 1;
    }
  }
  else if (*a2 == a2[2] && (!v7 || *a2 == (const void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v7)))
  {
    return 1;
  }
  unsigned int v8 = *((_DWORD *)this + 6);
  if (v8 >= 0x41) {
    operator new[]();
  }
  unint64_t v9 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
  if (!v8) {
    unint64_t v9 = 0;
  }
  unint64_t v10 = v9 & ((unint64_t)v6 - v5);
  unsigned int v11 = *((_DWORD *)a2 + 6);
  if (v11 >= 0x41) {
    operator new[]();
  }
  unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
  if (!v11) {
    unint64_t v12 = 0;
  }
  return v10 < (v12 & ((unsigned char *)a2[2] - (unsigned char *)*a2));
}

BOOL llvm::ConstantRange::isSizeLargerThan(llvm::ConstantRange *this, unint64_t a2)
{
  uint64_t v4 = *((unsigned int *)this + 2);
  if (v4 > 0x40)
  {
    uint64_t v5 = *(void *)this;
    unint64_t v6 = (const void *)*((void *)this + 2);
    if (memcmp(*(const void **)this, v6, ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8)
      || llvm::APInt::countTrailingOnesSlowCase(this) != v4)
    {
LABEL_3:
      unsigned int v7 = *((_DWORD *)this + 6);
      if (v7 >= 0x41) {
        operator new[]();
      }
      unint64_t v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
      if (!v7) {
        unint64_t v8 = 0;
      }
      unint64_t v9 = (void *)(v8 & ((unint64_t)v6 - v5));
      return (unint64_t)v9 > a2;
    }
  }
  else
  {
    uint64_t v5 = *(void *)this;
    unint64_t v6 = (const void *)*((void *)this + 2);
    if (*(const void **)this != v6) {
      goto LABEL_3;
    }
    BOOL v12 = !v4 || v5 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v4;
    unint64_t v6 = *(const void **)this;
    if (!v12) {
      goto LABEL_3;
    }
  }
  if (!a2) {
    return 1;
  }
  sub_1CB8F1EEC((uint64_t)&v14, v4, -1);
  --a2;
  unsigned int v13 = v15;
  if (v15 < 0x41)
  {
    unint64_t v9 = v14;
    return (unint64_t)v9 > a2;
  }
  if (v13 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v14) <= 0x40)
  {
    BOOL v10 = *v14 > a2;
  }
  else
  {
    BOOL v10 = 1;
    if (!v14) {
      return v10;
    }
  }
  MEMORY[0x1D25D9CB0](v14, 0x1000C8000313F17);
  return v10;
}

BOOL llvm::ConstantRange::contains(llvm::ConstantRange *this, const llvm::APInt *a2)
{
  uint64_t v2 = *((unsigned int *)this + 2);
  if (v2 > 0x40)
  {
    unint64_t v32 = a2;
    uint64_t v15 = *(void *)this;
    int v30 = *((_DWORD *)this + 2);
    unint64_t v16 = v2 + 63;
    uint64_t v4 = (char *)*((void *)this + 2);
    if (memcmp(*(const void **)this, v4, ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8))
    {
      uint64_t v17 = 8 * (v16 >> 6);
      uint64_t v18 = v15 - 8;
      uint64_t v19 = v17;
      while (v19)
      {
        unint64_t v20 = *(void *)(v18 + v19);
        unint64_t v21 = *(void *)&v4[v19 - 8];
        v19 -= 8;
        if (v20 != v21)
        {
          BOOL v22 = v20 > v21;
          goto LABEL_23;
        }
      }
      BOOL v22 = 0;
LABEL_23:
      a2 = v32;
      unint64_t v5 = *(void *)v32;
      while (v17)
      {
        unint64_t v23 = *(void *)(v18 + v17);
        unint64_t v24 = *(void *)(v5 + v17 - 8);
        v17 -= 8;
        if (v23 != v24)
        {
          BOOL v6 = v23 <= v24;
          if (!v22) {
            goto LABEL_4;
          }
          goto LABEL_27;
        }
      }
      if (v22) {
        return 1;
      }
      a2 = v32;
      goto LABEL_5;
    }
    return llvm::APInt::countTrailingOnesSlowCase(this) == v30;
  }
  else
  {
    unint64_t v3 = *(void *)this;
    uint64_t v4 = (char *)*((void *)this + 2);
    if (*(char **)this != v4)
    {
      unint64_t v5 = *(void *)a2;
      BOOL v6 = v3 <= *(void *)a2;
      if (v3 <= (unint64_t)v4)
      {
LABEL_4:
        if (v6)
        {
LABEL_5:
          uint64_t v7 = *((unsigned int *)a2 + 2);
          if (v7 <= 0x40) {
            return v5 < (unint64_t)v4;
          }
          unint64_t v9 = ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8;
          unint64_t v10 = v5 - 8;
          while (v9)
          {
            unint64_t v11 = *(void *)(v10 + v9);
            unint64_t v12 = *(void *)&v4[v9 - 8];
            v9 -= 8;
            BOOL v13 = v11 > v12;
            if (v11 != v12) {
              return !v13;
            }
          }
        }
        return 0;
      }
LABEL_27:
      if (!v6)
      {
        uint64_t v25 = *((unsigned int *)a2 + 2);
        if (v25 <= 0x40) {
          return v5 < (unint64_t)v4;
        }
        unint64_t v26 = ((unint64_t)(v25 + 63) >> 3) & 0x3FFFFFF8;
        unint64_t v27 = v5 - 8;
        while (v26)
        {
          unint64_t v28 = *(void *)(v27 + v26);
          unint64_t v29 = *(void *)&v4[v26 - 8];
          v26 -= 8;
          BOOL v13 = v28 > v29;
          if (v28 != v29) {
            return !v13;
          }
        }
        return 0;
      }
      return 1;
    }
    if (!v2) {
      return 1;
    }
    return v3 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v2;
  }
}

uint64_t llvm::ConstantRange::getActiveBits(llvm::ConstantRange *this)
{
  uint64_t v2 = *((unsigned int *)this + 2);
  if (v2 < 0x41)
  {
    if (*((void *)this + 2) | *(void *)this) {
      goto LABEL_3;
    }
    return 0;
  }
  if (!memcmp(*(const void **)this, *((const void **)this + 2), ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8)
    && llvm::APInt::countLeadingZerosSlowCase(this) == v2)
  {
    return 0;
  }
LABEL_3:
  llvm::ConstantRange::getUnsignedMax((char **)this, (uint64_t)&v6);
  unsigned int v3 = v7;
  if (v7 > 0x40)
  {
    int v4 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v6);
    if (v6) {
      MEMORY[0x1D25D9CB0](v6, 0x1000C8000313F17);
    }
  }
  else
  {
    int v4 = v7 + __clz(v6) - 64;
  }
  return v3 - v4;
}

uint64_t llvm::ConstantRange::getMinSignedBits(const void **this)
{
  uint64_t v2 = *((unsigned int *)this + 2);
  if (v2 >= 0x41)
  {
    if (memcmp(*this, this[2], ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8)
      || llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) != v2)
    {
      goto LABEL_3;
    }
    return 0;
  }
  if (!((unint64_t)this[2] | (unint64_t)*this)) {
    return 0;
  }
LABEL_3:
  llvm::ConstantRange::getSignedMin((uint64_t)this, (uint64_t)&v24);
  unsigned int v3 = v25;
  unsigned int v4 = v25 - 1;
  if (v25 > 0x40)
  {
    if ((*(void *)(v24 + 8 * (v4 >> 6)) >> v4)) {
      int v8 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v24);
    }
    else {
      int v8 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v24);
    }
  }
  else
  {
    unint64_t v5 = v24 >> v4;
    int v6 = v25 + __clz(v24) - 64;
    int v7 = __clz(~(v24 << -(char)v25));
    if (!v25) {
      int v7 = 0;
    }
    if (v5) {
      int v8 = v7;
    }
    else {
      int v8 = v6;
    }
  }
  unsigned int v9 = v3 - v8 + 1;
  llvm::ConstantRange::getSignedMax(this, (uint64_t)&v22);
  unsigned int v10 = v23 - 1;
  if (v23 > 0x40)
  {
    unsigned int v21 = v23;
    unint64_t v17 = v22;
    if ((*(void *)(v22 + 8 * (v10 >> 6)) >> v10)) {
      int v18 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v22);
    }
    else {
      int v18 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v22);
    }
    if (v9 <= v21 - v18 + 1) {
      uint64_t v19 = v21 - v18 + 1;
    }
    else {
      uint64_t v19 = v9;
    }
    unint64_t v20 = v17;
    uint64_t v15 = v19;
    MEMORY[0x1D25D9CB0](v20, 0x1000C8000313F17);
  }
  else
  {
    unint64_t v11 = v22 >> v10;
    int v12 = v23 + __clz(v22) - 64;
    int v13 = __clz(~(v22 << -(char)v23));
    if (!v23) {
      int v13 = 0;
    }
    if (v11) {
      int v14 = v13;
    }
    else {
      int v14 = v12;
    }
    if (v9 <= v23 - v14 + 1) {
      uint64_t v15 = v23 - v14 + 1;
    }
    else {
      uint64_t v15 = v9;
    }
  }
  if (v25 >= 0x41 && v24) {
    MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
  }
  return v15;
}

unsigned int *llvm::ConstantRange::subtract@<X0>(unsigned int *this@<X0>, const llvm::APInt *a2@<X1>, _DWORD *a3@<X8>)
{
  unsigned int v4 = (const llvm::APInt *)(this + 4);
  uint64_t v5 = this[2];
  if (v5 > 0x40)
  {
    unsigned int v15 = this[2];
    int v14 = (llvm::APInt *)this;
    if (memcmp(*(const void **)this, *((const void **)this + 2), ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8)) {
      operator new[]();
    }
    a3[2] = v15;
    llvm::APInt::initSlowCase((llvm::APInt *)a3, v14);
  }
  int v6 = *(char **)this;
  if (*(void *)this == *((void *)this + 2))
  {
    a3[2] = v5;
    *(void *)a3 = v6;
    unsigned int v13 = this[6];
    a3[6] = v13;
    if (v13 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)(a3 + 4), v4);
    }
    *((void *)a3 + 2) = *(void *)v4;
  }
  else
  {
    unint64_t v7 = (unint64_t)&v6[-*(void *)a2];
    unint64_t v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
    if (!v5) {
      unint64_t v8 = 0;
    }
    unint64_t v9 = v8 & v7;
    unsigned int v10 = this[6];
    if (v10 >= 0x41) {
      operator new[]();
    }
    uint64_t v11 = *(void *)v4 - *(void *)a2;
    unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v10;
    if (!v10) {
      unint64_t v12 = 0;
    }
    a3[2] = v5;
    *(void *)a3 = v9;
    a3[6] = v10;
    *((void *)a3 + 2) = v12 & v11;
  }
  return this;
}

uint64_t llvm::ConstantRange::difference@<X0>(llvm::ConstantRange *this@<X0>, const llvm::ConstantRange *a2@<X1>, uint64_t a3@<X8>)
{
  llvm::ConstantRange::inverse((uint64_t)a2, (uint64_t)&v6);
  uint64_t result = llvm::ConstantRange::intersectWith((uint64_t)this, (llvm::ConstantRange *)&v6, 0, a3);
  if (v9 >= 0x41)
  {
    uint64_t result = v8;
    if (v8) {
      uint64_t result = MEMORY[0x1D25D9CB0](v8, 0x1000C8000313F17);
    }
  }
  if (v7 >= 0x41)
  {
    uint64_t result = v6;
    if (v6) {
      return MEMORY[0x1D25D9CB0](v6, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t sub_1CC54C3F8(uint64_t result, llvm::ConstantRange *this, llvm::ConstantRange *a3, int a4)
{
  uint64_t v6 = result;
  if (a4 != 2)
  {
    if (a4 != 1) {
      goto LABEL_21;
    }
    uint64_t v7 = *((unsigned int *)this + 2);
    if (v7 > 0x40)
    {
      uint64_t v8 = *(void *)this;
      uint64_t v11 = *((void *)this + 2);
      unint64_t v48 = ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v48) {
          goto LABEL_71;
        }
        unint64_t v49 = *(void *)(*(void *)this - 8 + v48);
        unint64_t v50 = *(void *)(v11 + v48 - 8);
        v48 -= 8;
      }
      while (v49 == v50);
      if (v49 <= v50)
      {
LABEL_71:
        int v10 = 0;
        unint64_t v9 = *((void *)this + 2);
        goto LABEL_6;
      }
      unint64_t v9 = *((void *)this + 2);
    }
    else
    {
      uint64_t v8 = *(void *)this;
      unint64_t v9 = *((void *)this + 2);
      if (*(void *)this <= v9)
      {
        int v10 = 0;
        uint64_t v11 = *((void *)this + 2);
        goto LABEL_6;
      }
      uint64_t v11 = *((void *)this + 2);
    }
    uint64_t v14 = *((unsigned int *)this + 6);
    if (v14 > 0x40)
    {
      int v73 = 0;
      int64_t v74 = (unint64_t)(v14 + 63) >> 6;
      uint64_t v75 = v74;
      do
      {
        BOOL v76 = v75-- < 1;
        if (v76) {
          break;
        }
        unint64_t v77 = *(void *)(v11 + 8 * v75);
        v73 += __clz(v77);
      }
      while (!v77);
      int v78 = v14 | 0xFFFFFFC0;
      if ((v14 & 0x3F) == 0) {
        int v78 = 0;
      }
      if (v73 + v78 != v14)
      {
LABEL_142:
        int v83 = 0;
        do
        {
          BOOL v76 = v74-- < 1;
          if (v76) {
            break;
          }
          unint64_t v84 = *(void *)(v11 + 8 * v74);
          v83 += __clz(v84);
        }
        while (!v84);
        int v85 = v14 | 0xFFFFFFC0;
        if ((v14 & 0x3F) == 0) {
          int v85 = 0;
        }
        if (v83 + v85 == v14) {
          goto LABEL_21;
        }
        goto LABEL_43;
      }
    }
    else if (v9)
    {
LABEL_43:
      uint64_t v35 = *((unsigned int *)a3 + 2);
      if (v35 > 0x40)
      {
        uint64_t v36 = *(void *)a3;
        unint64_t v37 = *((void *)a3 + 2);
        unint64_t v55 = ((unint64_t)(v35 + 63) >> 3) & 0x3FFFFFF8;
        while (v55)
        {
          unint64_t v56 = *(void *)(*(void *)a3 - 8 + v55);
          unint64_t v57 = *(void *)(v37 + v55 - 8);
          v55 -= 8;
          if (v56 != v57)
          {
            if (v56 <= v57) {
              goto LABEL_91;
            }
            goto LABEL_89;
          }
        }
        goto LABEL_91;
      }
      uint64_t v36 = *(void *)a3;
      unint64_t v37 = *((void *)a3 + 2);
      if (*(void *)a3 <= v37)
      {
        *(_DWORD *)(result + 8) = v35;
LABEL_46:
        *(void *)uint64_t result = v36;
LABEL_28:
        unsigned int v29 = *((_DWORD *)a3 + 6);
        *(_DWORD *)(v6 + 24) = v29;
        if (v29 > 0x40) {
          operator new[]();
        }
        unint64_t v27 = (unint64_t *)*((void *)a3 + 2);
        goto LABEL_30;
      }
LABEL_89:
      uint64_t v58 = *((unsigned int *)a3 + 6);
      if (v58 > 0x40)
      {
        int v86 = 0;
        int64_t v87 = (unint64_t)(v58 + 63) >> 6;
        do
        {
          BOOL v76 = v87-- < 1;
          if (v76) {
            break;
          }
          unint64_t v88 = *(void *)(v37 + 8 * v87);
          v86 += __clz(v88);
        }
        while (!v88);
        int v89 = v58 | 0xFFFFFFC0;
        if ((v58 & 0x3F) == 0) {
          int v89 = 0;
        }
        if (v86 + v89 != v58) {
          goto LABEL_21;
        }
        goto LABEL_91;
      }
      if (!v37)
      {
LABEL_91:
        *(_DWORD *)(result + 8) = v35;
        if (v35 >= 0x41) {
          operator new[]();
        }
        goto LABEL_46;
      }
LABEL_21:
      uint64_t result = llvm::ConstantRange::isSizeStrictlySmallerThan(this, (const void **)a3);
      if (result)
      {
        unsigned int v25 = *((_DWORD *)this + 2);
        *(_DWORD *)(v6 + 8) = v25;
        if (v25 > 0x40) {
          operator new[]();
        }
        *(void *)uint64_t v6 = *(void *)this;
LABEL_24:
        unsigned int v26 = *((_DWORD *)this + 6);
        *(_DWORD *)(v6 + 24) = v26;
        if (v26 > 0x40) {
          operator new[]();
        }
        unint64_t v27 = (unint64_t *)*((void *)this + 2);
        goto LABEL_30;
      }
      unsigned int v28 = *((_DWORD *)a3 + 2);
      *(_DWORD *)(v6 + 8) = v28;
      if (v28 > 0x40) {
        operator new[]();
      }
      *(void *)uint64_t v6 = *(void *)a3;
      goto LABEL_28;
    }
    int v10 = 1;
LABEL_6:
    uint64_t v12 = *((unsigned int *)a3 + 2);
    if (v12 > 0x40)
    {
      unint64_t v13 = *((void *)a3 + 2);
      unint64_t v51 = ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8;
      while (v51)
      {
        unint64_t v52 = *(void *)(*(void *)a3 - 8 + v51);
        unint64_t v53 = *(void *)(v13 + v51 - 8);
        v51 -= 8;
        if (v52 != v53)
        {
          if (v52 <= v53) {
            goto LABEL_8;
          }
          goto LABEL_76;
        }
      }
      goto LABEL_8;
    }
    unint64_t v13 = *((void *)a3 + 2);
    if (*(void *)a3 <= v13)
    {
LABEL_8:
      if (!v10) {
        goto LABEL_21;
      }
      uint64_t v14 = *((unsigned int *)this + 6);
      if (v14 < 0x41)
      {
        if (!v9) {
          goto LABEL_21;
        }
        goto LABEL_43;
      }
      int64_t v74 = (unint64_t)(v14 + 63) >> 6;
      goto LABEL_142;
    }
LABEL_76:
    uint64_t v54 = *((unsigned int *)a3 + 6);
    if (v54 > 0x40)
    {
      int v79 = 0;
      int64_t v80 = (unint64_t)(v54 + 63) >> 6;
      do
      {
        BOOL v76 = v80-- < 1;
        if (v76) {
          break;
        }
        unint64_t v81 = *(void *)(v13 + 8 * v80);
        v79 += __clz(v81);
      }
      while (!v81);
      int v82 = v54 | 0xFFFFFFC0;
      if ((v54 & 0x3F) == 0) {
        int v82 = 0;
      }
      if (v79 + v82 == v54) {
        goto LABEL_8;
      }
    }
    else if (!v13)
    {
      goto LABEL_8;
    }
    *(_DWORD *)(result + 8) = v7;
    if (v7 > 0x40) {
      operator new[]();
    }
    *(void *)uint64_t result = v8;
    goto LABEL_24;
  }
  unsigned int v15 = (unint64_t **)((char *)this + 16);
  uint64_t v16 = *((unsigned int *)this + 2);
  if (v16 > 0x40)
  {
    uint64_t v17 = *(void *)this;
    uint64_t v38 = *(void *)(*(void *)this + 8 * ((v16 - 1) >> 6)) & (1 << (v16 - 1));
    unsigned int v30 = *((_DWORD *)this + 6);
    uint64_t v18 = *((void *)this + 2);
    unint64_t v39 = (void *)(v18 + 8 * ((v30 - 1) >> 6));
    if (v30 < 0x41) {
      unint64_t v39 = (void *)((char *)this + 16);
    }
    if ((v38 != 0) == ((*v39 >> (v30 - 1)) & 1))
    {
      unint64_t v42 = ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v42) {
          goto LABEL_14;
        }
        unint64_t v43 = *(void *)(v17 - 8 + v42);
        unint64_t v44 = *(void *)(v18 + v42 - 8);
        v42 -= 8;
      }
      while (v43 == v44);
      if (v43 <= v44) {
        goto LABEL_14;
      }
    }
    else if (v38)
    {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v17 = *(void *)this;
    uint64_t v18 = *((void *)this + 2);
    if ((uint64_t)(*(void *)this << -(char)v16) >> -(char)v16 <= v18 << -(char)v16 >> -(char)v16)
    {
LABEL_14:
      int v19 = 0;
      goto LABEL_15;
    }
    unsigned int v30 = *((_DWORD *)this + 6);
  }
  unsigned int v31 = v30 - 1;
  if (v30 > 0x40)
  {
    uint64_t v90 = v17;
    int v92 = *((_DWORD *)this + 2);
    unint64_t v94 = (unint64_t **)((char *)this + 16);
    uint64_t v96 = v18;
    uint64_t v59 = v31 >> 6;
    unsigned int v60 = v30 - 1;
    uint64_t v61 = 1 << (v30 - 1);
    if ((*(void *)(v18 + 8 * v59) & v61) == 0
      || llvm::APInt::countTrailingZerosSlowCase(v94) != v60)
    {
      unsigned int v93 = v60;
      goto LABEL_97;
    }
    int v19 = 1;
    unsigned int v15 = v94;
    uint64_t v18 = v96;
    uint64_t v17 = v90;
    LODWORD(v16) = v92;
LABEL_15:
    uint64_t result = (uint64_t)a3 + 16;
    uint64_t v20 = *((unsigned int *)a3 + 2);
    if (v20 > 0x40)
    {
      uint64_t v40 = *(void *)(*(void *)a3 + 8 * ((v20 - 1) >> 6)) & (1 << (v20 - 1));
      unsigned int v32 = *((_DWORD *)a3 + 6);
      uint64_t v21 = *((void *)a3 + 2);
      uint64_t v41 = (void *)(v21 + 8 * ((v32 - 1) >> 6));
      if (v32 < 0x41) {
        uint64_t v41 = (void *)((char *)a3 + 16);
      }
      if ((v40 != 0) == ((*v41 >> (v32 - 1)) & 1))
      {
        unint64_t v45 = ((unint64_t)(v20 + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          if (!v45) {
            goto LABEL_17;
          }
          unint64_t v46 = *(void *)(*(void *)a3 - 8 + v45);
          unint64_t v47 = *(void *)(v21 + v45 - 8);
          v45 -= 8;
        }
        while (v46 == v47);
        if (v46 <= v47) {
          goto LABEL_17;
        }
      }
      else if (v40)
      {
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v21 = *((void *)a3 + 2);
      if ((uint64_t)(*(void *)a3 << -(char)v20) >> -(char)v20 <= v21 << -(char)v20 >> -(char)v20)
      {
LABEL_17:
        if (!v19) {
          goto LABEL_21;
        }
        unsigned int v22 = *((_DWORD *)this + 6);
        unsigned int v23 = v22 - 1;
        if (v22 <= 0x40)
        {
          uint64_t v24 = 1 << v23;
          goto LABEL_20;
        }
        unint64_t v94 = v15;
        uint64_t v96 = v18;
        uint64_t v59 = v23 >> 6;
        unsigned int v93 = v22 - 1;
        uint64_t v61 = 1 << (v22 - 1);
LABEL_97:
        uint64_t result = (uint64_t)v94;
        if ((v61 & *(void *)(v96 + 8 * v59)) != 0)
        {
          uint64_t result = llvm::APInt::countTrailingZerosSlowCase(v94);
          if (result == v93) {
            goto LABEL_21;
          }
        }
        goto LABEL_98;
      }
      unsigned int v32 = *((_DWORD *)a3 + 6);
    }
    unsigned int v33 = v32 - 1;
    if (v32 > 0x40)
    {
      if ((*(void *)(v21 + 8 * (v33 >> 6)) >> v33))
      {
        uint64_t v91 = v17;
        int v95 = v19;
        uint64_t v97 = v18;
        uint64_t result = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)result);
        int v19 = v95;
        uint64_t v18 = v97;
        uint64_t v17 = v91;
        if (result == v33) {
          goto LABEL_17;
        }
      }
    }
    else if (v21 == 1 << v33)
    {
      goto LABEL_17;
    }
    *(_DWORD *)(v6 + 8) = v16;
    if (v16 > 0x40) {
      operator new[]();
    }
    *(void *)uint64_t v6 = v17;
    unsigned int v34 = *((_DWORD *)this + 6);
    goto LABEL_102;
  }
  int v19 = 1;
  uint64_t v24 = 1 << v31;
  if (v18 == v24) {
    goto LABEL_15;
  }
LABEL_20:
  if (v18 == v24) {
    goto LABEL_21;
  }
LABEL_98:
  unsigned int v15 = (unint64_t **)((char *)a3 + 16);
  uint64_t v62 = *((unsigned int *)a3 + 2);
  if (v62 > 0x40)
  {
    uint64_t v63 = *(void *)a3;
    uint64_t v67 = *(void *)(*(void *)a3 + 8 * ((v62 - 1) >> 6)) & (1 << (v62 - 1));
    unsigned int v65 = *((_DWORD *)a3 + 6);
    uint64_t v64 = *((void *)a3 + 2);
    unint64_t v68 = (void *)(v64 + 8 * ((v65 - 1) >> 6));
    if (v65 < 0x41) {
      unint64_t v68 = (void *)((char *)a3 + 16);
    }
    if ((v67 != 0) == ((*v68 >> (v65 - 1)) & 1))
    {
      unint64_t v69 = ((unint64_t)(v62 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v69) {
          goto LABEL_107;
        }
        unint64_t v70 = *(void *)(v63 - 8 + v69);
        unint64_t v71 = *(void *)(v64 + v69 - 8);
        v69 -= 8;
      }
      while (v70 == v71);
      if (v70 <= v71) {
        goto LABEL_107;
      }
    }
    else if (v67)
    {
      *(_DWORD *)(v6 + 8) = v62;
      goto LABEL_108;
    }
LABEL_105:
    unsigned int v66 = v65 - 1;
    if (v65 > 0x40)
    {
      if (((*(void *)(v64 + 8 * (v66 >> 6)) >> v66) & 1) == 0) {
        goto LABEL_21;
      }
      int v98 = *((_DWORD *)a3 + 2);
      uint64_t v72 = v63;
      uint64_t result = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)a3 + 2);
      uint64_t v63 = v72;
      LODWORD(v62) = v98;
      if (result != v66) {
        goto LABEL_21;
      }
    }
    else if (v64 != 1 << v66)
    {
      goto LABEL_21;
    }
LABEL_107:
    *(_DWORD *)(v6 + 8) = v62;
    if (v62 < 0x41) {
      goto LABEL_101;
    }
LABEL_108:
    operator new[]();
  }
  uint64_t v63 = *(void *)a3;
  uint64_t v64 = *((void *)a3 + 2);
  if ((uint64_t)(*(void *)a3 << -(char)v62) >> -(char)v62 > v64 << -(char)v62 >> -(char)v62)
  {
    unsigned int v65 = *((_DWORD *)a3 + 6);
    goto LABEL_105;
  }
  *(_DWORD *)(v6 + 8) = v62;
LABEL_101:
  *(void *)uint64_t v6 = v63;
  unsigned int v34 = *((_DWORD *)a3 + 6);
LABEL_102:
  *(_DWORD *)(v6 + 24) = v34;
  if (v34 > 0x40) {
    operator new[]();
  }
  unint64_t v27 = *v15;
LABEL_30:
  *(void *)(v6 + 16) = v27;
  return result;
}

uint64_t llvm::ConstantRange::unionWith@<X0>(uint64_t result@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  LODWORD(v7) = *(_DWORD *)(result + 8);
  while (1)
  {
    uint64_t v8 = a2;
    a2 = (unsigned int *)result;
    unsigned int v9 = v7;
    uint64_t v10 = result + 16;
    if (v7 > 0x40)
    {
      uint64_t v51 = a3;
      uint64_t v52 = result + 16;
      uint64_t v53 = a4;
      unint64_t v11 = *(void *)result;
      uint64_t v54 = *(char **)(result + 16);
      uint64_t result = memcmp(*(const void **)result, v54, (((unint64_t)v9 + 63) >> 3) & 0x3FFFFFF8);
      if (result)
      {
        unint64_t v12 = (unint64_t)v54;
        a4 = v53;
        uint64_t v10 = v52;
        a3 = v51;
        unint64_t v13 = v54;
      }
      else
      {
        uint64_t result = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)a2);
        if (result == v9)
        {
          *(_DWORD *)(v53 + 8) = v9;
          goto LABEL_209;
        }
        unint64_t v13 = v54;
        unint64_t v12 = (unint64_t)v54;
        a4 = v53;
        uint64_t v10 = v52;
        a3 = v51;
      }
    }
    else
    {
      unint64_t v11 = *(void *)result;
      unint64_t v12 = *(void *)(result + 16);
      if (*(void *)result == v12)
      {
        if (!v7 || v11 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v7)
        {
          *(_DWORD *)(a4 + 8) = v7;
          goto LABEL_124;
        }
        unint64_t v13 = *(char **)(result + 16);
        unint64_t v12 = *(void *)result;
      }
      else
      {
        unint64_t v13 = *(char **)(result + 16);
      }
    }
    uint64_t v14 = v8 + 4;
    unint64_t v7 = v8[2];
    BOOL v15 = v7 < 0x41;
    if (v7 >= 0x41)
    {
      unsigned int v156 = a3;
      uint64_t v159 = v10;
      uint64_t v161 = a4;
      uint64_t v16 = *(void **)v8;
      unint64_t v50 = (char *)*((void *)v8 + 2);
      uint64_t v154 = v13;
      uint64_t result = memcmp(*(const void **)v8, v50, ((v7 + 63) >> 3) & 0x3FFFFFF8);
      if (result)
      {
        unint64_t v17 = (unint64_t)v50;
        uint64_t v10 = v159;
        a4 = v161;
        uint64_t v14 = v8 + 4;
        a3 = v156;
        unint64_t v13 = v154;
        uint64_t v18 = v50;
      }
      else
      {
        int v77 = 0;
        int64_t v78 = (v7 + 63) >> 6;
        uint64_t v10 = v159;
        a4 = v161;
        do
        {
          BOOL v20 = v78-- < 1;
          if (v20) {
            break;
          }
          unint64_t v79 = v16[v78];
          v77 += __clz(v79);
        }
        while (!v79);
        int v80 = v7 | 0xFFFFFFC0;
        if ((v7 & 0x3F) == 0) {
          int v80 = 0;
        }
        if (v77 + v80 == v7)
        {
LABEL_123:
          *(_DWORD *)(a4 + 8) = v9;
          if (v9 < 0x41) {
            goto LABEL_124;
          }
LABEL_209:
          operator new[]();
        }
        uint64_t result = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v8);
        if (result == v7)
        {
          *(_DWORD *)(v161 + 8) = v7;
          goto LABEL_193;
        }
        uint64_t v18 = v50;
        unint64_t v17 = (unint64_t)v50;
        uint64_t v10 = v159;
        a4 = v161;
        uint64_t v14 = v8 + 4;
        a3 = v156;
        unint64_t v13 = v154;
      }
    }
    else
    {
      uint64_t v16 = *(void **)v8;
      unint64_t v17 = *((void *)v8 + 2);
      if (!(v17 | *(void *)v8)) {
        goto LABEL_123;
      }
      if (v16 == (void *)v17)
      {
        if (!v7 || v16 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v7))
        {
          *(_DWORD *)(a4 + 8) = v7;
          goto LABEL_75;
        }
        uint64_t v18 = (char *)*((void *)v8 + 2);
        unint64_t v17 = *(void *)v8;
      }
      else
      {
        uint64_t v18 = (char *)*((void *)v8 + 2);
      }
    }
    if (v9 >= 0x41)
    {
      unsigned int v157 = a3;
      int v158 = v14;
      uint64_t v160 = v10;
      uint64_t v162 = a4;
      unsigned int v152 = v18;
      uint64_t v153 = a2[2];
      char v155 = v13;
      uint64_t result = memcmp((const void *)v11, v13, ((unint64_t)(v153 + 63) >> 3) & 0x3FFFFFF8);
      if (result)
      {
        uint64_t v10 = v160;
        a4 = v162;
        uint64_t v14 = v158;
        a3 = v157;
        uint64_t v19 = v153;
        unint64_t v13 = v155;
        uint64_t v18 = v152;
      }
      else
      {
        int v85 = 0;
        int64_t v86 = (unint64_t)(v153 + 63) >> 6;
        uint64_t v10 = v160;
        a4 = v162;
        uint64_t v14 = v158;
        a3 = v157;
        uint64_t v19 = v153;
        unint64_t v13 = v155;
        uint64_t v18 = v152;
        do
        {
          BOOL v20 = v86-- < 1;
          if (v20) {
            break;
          }
          unint64_t v87 = *(void *)(v11 + 8 * v86);
          v85 += __clz(v87);
        }
        while (!v87);
        int v88 = v153 | 0xFFFFFFC0;
        if ((v153 & 0x3F) == 0) {
          int v88 = 0;
        }
        if (v85 + v88 == v9)
        {
LABEL_138:
          *(_DWORD *)(a4 + 8) = v7;
          if (v7 >= 0x41) {
LABEL_193:
          }
            operator new[]();
LABEL_75:
          *(void *)a4 = *(void *)v8;
          unsigned int v48 = v8[6];
          *(_DWORD *)(a4 + 24) = v48;
          if (v48 <= 0x40)
          {
            uint64_t v49 = *v14;
LABEL_126:
            *(void *)(a4 + 16) = v49;
            return result;
          }
LABEL_173:
          operator new[]();
        }
      }
    }
    else
    {
      if (!(v12 | v11)) {
        goto LABEL_138;
      }
      uint64_t v19 = a2[2];
    }
    if (v19 <= 0x40) {
      break;
    }
    unint64_t v55 = (((unint64_t)v19 + 63) >> 3) & 0x3FFFFFF8;
    while (v55)
    {
      unint64_t v56 = *(void *)(v11 - 8 + v55);
      unint64_t v57 = *(void *)&v13[v55 - 8];
      v55 -= 8;
      BOOL v20 = v56 > v57;
      if (v56 != v57) {
        goto LABEL_14;
      }
    }
LABEL_15:
    if (v7 > 0x40)
    {
      unint64_t v58 = ((v7 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v58) {
          goto LABEL_92;
        }
        unint64_t v59 = *(void *)((char *)v16 + v58 - 8);
        unint64_t v60 = *(void *)&v18[v58 - 8];
        v58 -= 8;
      }
      while (v59 == v60);
      if (v59 <= v60)
      {
LABEL_92:
        BOOL v15 = 0;
LABEL_26:
        uint64_t v22 = v8[6];
        if (v22 > 0x40)
        {
          unint64_t v61 = ((unint64_t)(v22 + 63) >> 3) & 0x3FFFFFF8;
          while (v61)
          {
            unint64_t v62 = *(void *)&v18[v61 - 8];
            unint64_t v63 = *(void *)(v11 - 8 + v61);
            v61 -= 8;
            if (v62 != v63)
            {
              if (v62 <= v63) {
                goto LABEL_28;
              }
              break;
            }
          }
        }
        else if (v17 < v11)
        {
LABEL_28:
          if (v9 >= 0x41) {
            operator new[]();
          }
          if (v22 > 0x40) {
            operator new[]();
          }
          uint64_t v23 = *v14;
          unsigned int v172 = v9;
          unint64_t v171 = v11;
          int v174 = v22;
          uint64_t v173 = v23;
          if (v8[2] > 0x40) {
            operator new[]();
          }
          uint64_t v24 = *(const void **)v8;
          unsigned int v25 = a2[6];
          if (v25 > 0x40) {
            operator new[]();
          }
          uint64_t v26 = *(void *)v10;
          unsigned int v168 = v8[2];
          uint64_t v167 = v24;
          unsigned int v170 = v25;
          uint64_t v169 = v26;
          return sub_1CC54C3F8(a4, (llvm::ConstantRange *)&v171, (llvm::ConstantRange *)&v167, a3);
        }
        uint64_t v64 = a2[6];
        if (v64 > 0x40)
        {
          unint64_t v82 = ((unint64_t)(v64 + 63) >> 3) & 0x3FFFFFF8;
          while (v82)
          {
            unint64_t v83 = *(void *)&v13[v82 - 8];
            unint64_t v84 = *(void *)((char *)v16 + v82 - 8);
            v82 -= 8;
            if (v83 != v84)
            {
              if (v83 <= v84) {
                goto LABEL_28;
              }
              break;
            }
          }
        }
        else if (v12 < (unint64_t)v16)
        {
          goto LABEL_28;
        }
        if (v15)
        {
          unsigned int v65 = v8;
          if ((unint64_t)v16 < v11)
          {
LABEL_102:
            if (v7 > 0x40) {
              operator new[]();
            }
            uint64_t v66 = *(void *)v65;
            unsigned int v166 = v8[6];
            uint64_t v67 = (void *)v10;
            uint64_t v68 = a4;
            if (v22 > 0x40) {
              operator new[]();
            }
            unint64_t v69 = v14;
            uint64_t v165 = *v14;
            llvm::APInt::operator-=((uint64_t)&v165, 1uLL);
            uint64_t v70 = v166;
            unint64_t v71 = v165;
            unsigned int v166 = 0;
            unsigned int v164 = a2[6];
            if (v164 > 0x40) {
              operator new[]();
            }
            unint64_t v163 = *v67;
            uint64_t result = llvm::APInt::operator-=((uint64_t)&v163, 1uLL);
            unsigned int v72 = v164;
            unsigned int v164 = 0;
            if (v70 > 0x40)
            {
              unint64_t v102 = ((unint64_t)(v70 + 63) >> 3) & 0x3FFFFFF8;
              uint64_t v74 = v68;
              while (v102)
              {
                unint64_t v103 = *(void *)(v71 - 8 + v102);
                unint64_t v104 = *(void *)(v163 - 8 + v102);
                v102 -= 8;
                BOOL v73 = v103 > v104;
                if (v103 != v104) {
                  goto LABEL_159;
                }
              }
            }
            else
            {
              BOOL v73 = v71 > v163;
              uint64_t v74 = v68;
              if (v71 >= v163)
              {
LABEL_159:
                if (v73) {
                  uint64_t v67 = v69;
                }
              }
            }
            unsigned int v75 = *((_DWORD *)v67 + 2);
            if (v75 > 0x40) {
              operator new[]();
            }
            unint64_t v76 = *v67;
            if (v72 >= 0x41 && v163)
            {
              uint64_t v142 = v74;
              uint64_t result = MEMORY[0x1D25D9CB0](v163, 0x1000C8000313F17);
              uint64_t v74 = v142;
            }
            if (v164 >= 0x41)
            {
              uint64_t result = v163;
              if (v163)
              {
                uint64_t v150 = v74;
                uint64_t result = MEMORY[0x1D25D9CB0](v163, 0x1000C8000313F17);
                uint64_t v74 = v150;
              }
            }
            if (v70 >= 0x41 && v71)
            {
              unint64_t v143 = v71;
              uint64_t v144 = v74;
              uint64_t result = MEMORY[0x1D25D9CB0](v143, 0x1000C8000313F17);
              uint64_t v74 = v144;
            }
            if (v166 >= 0x41)
            {
              uint64_t result = v165;
              if (v165)
              {
                uint64_t v151 = v74;
                uint64_t result = MEMORY[0x1D25D9CB0](v165, 0x1000C8000313F17);
                uint64_t v74 = v151;
              }
            }
            if (!v66 && !v76) {
              return (uint64_t)llvm::ConstantRange::ConstantRange((unint64_t *)v74, a2[2], 1);
            }
            *(_DWORD *)(v74 + 8) = v7;
            *(void *)uint64_t v74 = v66;
            *(_DWORD *)(v74 + 24) = v75;
            *(void *)(v74 + 16) = v76;
            return result;
          }
        }
        else
        {
          unint64_t v99 = ((v7 + 63) >> 3) & 0x3FFFFFF8;
          while (v99)
          {
            unint64_t v100 = *(void *)((char *)v16 + v99 - 8);
            unint64_t v101 = *(void *)(v11 - 8 + v99);
            v99 -= 8;
            if (v100 != v101)
            {
              unsigned int v65 = v8;
              if (v100 <= v101) {
                goto LABEL_102;
              }
              break;
            }
          }
        }
        LODWORD(v7) = v19;
        unsigned int v65 = a2;
        goto LABEL_102;
      }
      BOOL v21 = 1;
    }
    else
    {
      BOOL v21 = (unint64_t)v16 > v17;
      if ((unint64_t)v16 < v17)
      {
        BOOL v15 = 1;
        goto LABEL_26;
      }
    }
    uint64_t result = (uint64_t)v8;
    if (!v21) {
      goto LABEL_26;
    }
  }
  BOOL v20 = v11 > v12;
LABEL_14:
  if (!v20) {
    goto LABEL_15;
  }
  if (v7 > 0x40)
  {
    unint64_t v89 = 8 * ((v7 + 63) >> 6);
    uint64_t v90 = (char *)(v16 - 1);
    unint64_t v91 = v89;
    do
    {
      if (!v91) {
        goto LABEL_36;
      }
      unint64_t v92 = *(void *)&v90[v91];
      unsigned int v93 = v14;
      unint64_t v94 = *(void *)&v18[v91 - 8];
      v91 -= 8;
      BOOL v95 = v92 == v94;
      BOOL v96 = v92 > v94;
      uint64_t v14 = v93;
    }
    while (v95);
    if (v96)
    {
      while (v89)
      {
        unint64_t v97 = *(void *)&v90[v89];
        unint64_t v98 = *(void *)&v13[v89 - 8];
        v89 -= 8;
        BOOL v29 = v97 > v98;
        if (v97 != v98) {
          goto LABEL_42;
        }
      }
      goto LABEL_43;
    }
LABEL_36:
    uint64_t v27 = v8[6];
    if (v27 > 0x40)
    {
      unint64_t v105 = ((unint64_t)(v27 + 63) >> 3) & 0x3FFFFFF8;
      while (v105)
      {
        unint64_t v106 = *(void *)&v18[v105 - 8];
        unint64_t v107 = *(void *)&v13[v105 - 8];
        v105 -= 8;
        BOOL v28 = v106 > v107;
        if (v106 != v107) {
          goto LABEL_38;
        }
      }
      goto LABEL_39;
    }
    BOOL v28 = v17 > v12;
LABEL_38:
    if (!v28)
    {
LABEL_39:
      *(_DWORD *)(a4 + 8) = v9;
      if (v9 > 0x40) {
        operator new[]();
      }
LABEL_124:
      *(void *)a4 = *(void *)a2;
      unsigned int v81 = a2[6];
      *(_DWORD *)(a4 + 24) = v81;
      if (v81 <= 0x40)
      {
        uint64_t v49 = *(void *)v10;
        goto LABEL_126;
      }
      goto LABEL_173;
    }
    if (v7 > 0x40)
    {
      unint64_t v108 = 8 * ((v7 + 63) >> 6);
      uint64_t v109 = (char *)(v16 - 1);
      unint64_t v110 = v108;
      do
      {
        if (!v110) {
          goto LABEL_39;
        }
        unint64_t v111 = *(void *)&v109[v110];
        unsigned int v31 = v14;
        unint64_t v112 = *(void *)(v11 - 8 + v110);
        v110 -= 8;
        BOOL v95 = v111 == v112;
        BOOL v113 = v111 > v112;
        uint64_t v14 = v31;
      }
      while (v95);
      if (v113) {
        goto LABEL_39;
      }
      while (v108)
      {
        unint64_t v114 = *(void *)&v109[v108];
        unint64_t v115 = *(void *)&v13[v108 - 8];
        v108 -= 8;
        BOOL v32 = v114 > v115;
        if (v114 != v115) {
          goto LABEL_50;
        }
      }
    }
    else
    {
      if ((unint64_t)v16 >= v11) {
        goto LABEL_39;
      }
      unsigned int v31 = v14;
      BOOL v32 = (unint64_t)v16 > v12;
LABEL_50:
      if (v32)
      {
LABEL_53:
        uint64_t v33 = a2[6];
        if (v33 > 0x40)
        {
          unint64_t v119 = ((unint64_t)(v33 + 63) >> 3) & 0x3FFFFFF8;
          while (v119)
          {
            unint64_t v120 = *(void *)&v13[v119 - 8];
            unint64_t v121 = *(void *)((char *)v16 + v119 - 8);
            v119 -= 8;
            if (v120 != v121)
            {
              if (v120 <= v121) {
                goto LABEL_55;
              }
              break;
            }
          }
        }
        else if (v12 < (unint64_t)v16)
        {
LABEL_55:
          if (v27 > 0x40)
          {
            uint64_t result = v19;
            uint64_t v135 = v10;
            uint64_t v136 = a4;
            unint64_t v137 = ((unint64_t)(v27 + 63) >> 3) & 0x3FFFFFF8;
            int64_t v138 = v18;
            unint64_t v139 = v18 - 8;
            while (1)
            {
              a4 = v136;
              uint64_t v10 = v135;
              LODWORD(v19) = result;
              uint64_t v18 = v138;
              LODWORD(v27) = v8[6];
              if (!v137) {
                break;
              }
              unint64_t v140 = *(void *)&v139[v137];
              unint64_t v141 = *(void *)(v11 - 8 + v137);
              v137 -= 8;
              if (v140 != v141)
              {
                a4 = v136;
                uint64_t v10 = v135;
                LODWORD(v19) = result;
                uint64_t v18 = v138;
                LODWORD(v27) = v8[6];
                if (v140 <= v141) {
                  goto LABEL_57;
                }
                break;
              }
            }
          }
          else if (v17 < v11)
          {
LABEL_57:
            if (v9 >= 0x41) {
              operator new[]();
            }
            unsigned int v34 = v27;
            if (v27 > 0x40) {
              operator new[]();
            }
            uint64_t v35 = *v31;
            unsigned int v172 = v9;
            unint64_t v171 = v11;
            int v174 = v27;
            uint64_t v173 = v35;
            if (v8[2] > 0x40) {
              operator new[]();
            }
            uint64_t v36 = *(const void **)v8;
            unsigned int v37 = a2[6];
            if (v37 > 0x40) {
              operator new[]();
            }
            uint64_t v38 = *(void *)v10;
            unsigned int v168 = v8[2];
            uint64_t v167 = v36;
            unsigned int v170 = v37;
            uint64_t v169 = v38;
            uint64_t result = sub_1CC54C3F8(a4, (llvm::ConstantRange *)&v171, (llvm::ConstantRange *)&v167, a3);
            if (v34 >= 0x41 && v35) {
              return MEMORY[0x1D25D9CB0](v35, 0x1000C8000313F17);
            }
            return result;
          }
          if (v19 > 0x40)
          {
            uint64_t v145 = v10;
            uint64_t v146 = a4;
            unint64_t v147 = (((unint64_t)v19 + 63) >> 3) & 0x3FFFFFF8;
            while (1)
            {
              a4 = v146;
              uint64_t v10 = v145;
              if (!v147) {
                goto LABEL_216;
              }
              unint64_t v148 = *(void *)(v11 - 8 + v147);
              unint64_t v149 = *(void *)&v18[v147 - 8];
              v147 -= 8;
              if (v148 != v149)
              {
                a4 = v146;
                uint64_t v10 = v145;
                if (v148 <= v149) {
                  goto LABEL_216;
                }
                goto LABEL_183;
              }
            }
          }
          if (v11 <= v17)
          {
LABEL_216:
            if (v7 >= 0x41) {
              operator new[]();
            }
            if (v33 > 0x40) {
              operator new[]();
            }
            uint64_t v122 = *(void *)v10;
            *(_DWORD *)(a4 + 8) = v7;
            *(void *)a4 = v16;
            *(_DWORD *)(a4 + 24) = v33;
LABEL_186:
            *(void *)(a4 + 16) = v122;
            return result;
          }
        }
LABEL_183:
        if (v9 >= 0x41) {
          operator new[]();
        }
        if (v27 > 0x40) {
          operator new[]();
        }
        uint64_t v122 = *v31;
        *(_DWORD *)(a4 + 8) = v9;
        *(void *)a4 = v11;
        *(_DWORD *)(a4 + 24) = v27;
        goto LABEL_186;
      }
    }
    if (v19 > 0x40)
    {
      uint64_t v123 = a4;
      uint64_t result = (uint64_t)v18;
      unint64_t v124 = (((unint64_t)v19 + 63) >> 3) & 0x3FFFFFF8;
      while (1)
      {
        a4 = v123;
        if (!v124) {
          goto LABEL_43;
        }
        unint64_t v125 = *(void *)(v11 - 8 + v124);
        unint64_t v126 = *(void *)&v18[v124 - 8];
        v124 -= 8;
        if (v125 != v126)
        {
          a4 = v123;
          if (v125 <= v126) {
            goto LABEL_43;
          }
          goto LABEL_53;
        }
      }
    }
    if (v11 <= v17) {
      goto LABEL_43;
    }
    goto LABEL_53;
  }
  if ((unint64_t)v16 <= v17) {
    goto LABEL_36;
  }
  BOOL v29 = (unint64_t)v16 > v12;
LABEL_42:
  if (!v29)
  {
LABEL_43:
    *(_DWORD *)(a4 + 8) = v9;
    if (v9 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)a4);
    }
    unint64_t v30 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
    if (!v9) {
      unint64_t v30 = 0;
    }
    *(void *)a4 = v30;
    uint64_t result = a4 + 16;
    *(_DWORD *)(a4 + 24) = v9;
    *(void *)(a4 + 16) = v30;
    return result;
  }
  if (v19 > 0x40)
  {
    unint64_t v116 = (((unint64_t)v19 + 63) >> 3) & 0x3FFFFFF8;
    while (v116)
    {
      unint64_t v117 = *(void *)(v11 - 8 + v116);
      unint64_t v118 = *(void *)&v18[v116 - 8];
      v116 -= 8;
      BOOL v39 = v117 > v118;
      if (v117 != v118) {
        goto LABEL_66;
      }
    }
    goto LABEL_43;
  }
  BOOL v39 = v11 > v17;
LABEL_66:
  if (!v39) {
    goto LABEL_43;
  }
  uint64_t v40 = v14;
  if (v7 > 0x40)
  {
    uint64_t result = v19;
    uint64_t v127 = v10;
    uint64_t v128 = a4;
    unint64_t v129 = ((v7 + 63) >> 3) & 0x3FFFFFF8;
    while (1)
    {
      a4 = v128;
      uint64_t v10 = v127;
      LODWORD(v19) = result;
      if (!v129) {
        break;
      }
      unint64_t v130 = *(void *)((char *)v16 + v129 - 8);
      unint64_t v131 = *(void *)(v11 - 8 + v129);
      v129 -= 8;
      if (v130 != v131)
      {
        uint64_t v41 = v8;
        a4 = v128;
        uint64_t v10 = v127;
        LODWORD(v19) = result;
        if (v130 <= v131) {
          goto LABEL_199;
        }
        break;
      }
    }
  }
  else
  {
    uint64_t v41 = v8;
    if ((unint64_t)v16 < v11) {
      goto LABEL_70;
    }
  }
  LODWORD(v7) = v19;
  uint64_t v41 = a2;
LABEL_199:
  if (v7 > 0x40) {
    operator new[]();
  }
LABEL_70:
  uint64_t v42 = *(void *)v41;
  uint64_t v43 = v8[6];
  unint64_t v44 = v40;
  if (v43 > 0x40)
  {
    unint64_t v132 = ((unint64_t)(v43 + 63) >> 3) & 0x3FFFFFF8;
    while (v132)
    {
      unint64_t v133 = *(void *)(*v40 - 8 + v132);
      unint64_t v134 = *(void *)(*(void *)v10 - 8 + v132);
      v132 -= 8;
      BOOL v45 = v133 > v134;
      if (v133 != v134)
      {
        unint64_t v44 = v40;
        goto LABEL_205;
      }
    }
  }
  else
  {
    BOOL v45 = *v40 > *(void *)v10;
    if (*v40 >= *(void *)v10)
    {
LABEL_205:
      if (v45) {
        uint64_t v10 = (uint64_t)v44;
      }
    }
  }
  unsigned int v46 = *(_DWORD *)(v10 + 8);
  if (v46 > 0x40) {
    operator new[]();
  }
  uint64_t v47 = *(void *)v10;
  *(_DWORD *)(a4 + 8) = v7;
  *(void *)a4 = v42;
  *(_DWORD *)(a4 + 24) = v46;
  *(void *)(a4 + 16) = v47;
  return result;
}

uint64_t llvm::ConstantRange::exactIntersectWith@<X0>(llvm::ConstantRange *this@<X0>, const llvm::ConstantRange *a2@<X1>, uint64_t a3@<X8>)
{
  llvm::ConstantRange::intersectWith((uint64_t)this, a2, 0, (uint64_t)&v27);
  llvm::ConstantRange::inverse((uint64_t)this, (uint64_t)&v15);
  llvm::ConstantRange::inverse((uint64_t)a2, (uint64_t)&v11);
  llvm::ConstantRange::unionWith((uint64_t)&v15, (unsigned int *)&v11, 0, (uint64_t)&v19);
  uint64_t result = llvm::ConstantRange::inverse((uint64_t)&v19, (uint64_t)&__s2);
  if (v28 > 0x40)
  {
    unint64_t v7 = __s2;
    uint64_t result = memcmp(v27, __s2, (((unint64_t)v28 + 63) >> 3) & 0x3FFFFFF8);
    if (!result) {
      goto LABEL_3;
    }
LABEL_42:
    int v9 = 0;
    goto LABEL_8;
  }
  unint64_t v7 = __s2;
  if (v27 != __s2) {
    goto LABEL_42;
  }
LABEL_3:
  if (v30 > 0x40)
  {
    uint64_t result = memcmp(v29, v25, (((unint64_t)v30 + 63) >> 3) & 0x3FFFFFF8);
    BOOL v8 = result == 0;
  }
  else
  {
    BOOL v8 = v29 == v25;
  }
  int v9 = v8;
LABEL_8:
  if (v26 >= 0x41)
  {
    uint64_t result = (uint64_t)v25;
    if (v25) {
      uint64_t result = MEMORY[0x1D25D9CB0](v25, 0x1000C8000313F17);
    }
  }
  if (v24 >= 0x41 && v7) {
    uint64_t result = MEMORY[0x1D25D9CB0](v7, 0x1000C8000313F17);
  }
  if (v22 >= 0x41)
  {
    uint64_t result = v21;
    if (v21) {
      uint64_t result = MEMORY[0x1D25D9CB0](v21, 0x1000C8000313F17);
    }
  }
  if (v20 >= 0x41)
  {
    uint64_t result = v19;
    if (v19) {
      uint64_t result = MEMORY[0x1D25D9CB0](v19, 0x1000C8000313F17);
    }
  }
  if (v14 >= 0x41)
  {
    uint64_t result = v13;
    if (v13) {
      uint64_t result = MEMORY[0x1D25D9CB0](v13, 0x1000C8000313F17);
    }
  }
  if (v12 >= 0x41)
  {
    uint64_t result = v11;
    if (v11) {
      uint64_t result = MEMORY[0x1D25D9CB0](v11, 0x1000C8000313F17);
    }
  }
  if (v18 >= 0x41)
  {
    uint64_t result = v17;
    if (v17) {
      uint64_t result = MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
    }
  }
  if (v16 >= 0x41)
  {
    uint64_t result = v15;
    if (v15) {
      uint64_t result = MEMORY[0x1D25D9CB0](v15, 0x1000C8000313F17);
    }
  }
  if (v9)
  {
    *(_DWORD *)(a3 + 8) = v28;
    *(void *)a3 = v27;
    *(_DWORD *)(a3 + 24) = v30;
    *(void *)(a3 + 16) = v29;
    unsigned int v28 = 0;
    unsigned int v30 = 0;
    *(unsigned char *)(a3 + 32) = 1;
  }
  else
  {
    *(unsigned char *)a3 = 0;
    unsigned int v10 = v30;
    *(unsigned char *)(a3 + 32) = 0;
    if (v10 >= 0x41)
    {
      uint64_t result = (uint64_t)v29;
      if (v29) {
        uint64_t result = MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
      }
    }
  }
  if (v28 >= 0x41)
  {
    uint64_t result = (uint64_t)v27;
    if (v27) {
      return MEMORY[0x1D25D9CB0](v27, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t llvm::ConstantRange::exactUnionWith@<X0>(llvm::ConstantRange *this@<X0>, const llvm::ConstantRange *a2@<X1>, uint64_t a3@<X8>)
{
  llvm::ConstantRange::unionWith((uint64_t)this, (unsigned int *)a2, 0, (uint64_t)&v27);
  llvm::ConstantRange::inverse((uint64_t)this, (uint64_t)&v15);
  llvm::ConstantRange::inverse((uint64_t)a2, (uint64_t)&v11);
  llvm::ConstantRange::intersectWith((uint64_t)&v15, (llvm::ConstantRange *)&v11, 0, (uint64_t)&v19);
  uint64_t result = llvm::ConstantRange::inverse((uint64_t)&v19, (uint64_t)&__s2);
  if (v28 > 0x40)
  {
    unint64_t v7 = __s2;
    uint64_t result = memcmp(v27, __s2, (((unint64_t)v28 + 63) >> 3) & 0x3FFFFFF8);
    if (!result) {
      goto LABEL_3;
    }
LABEL_42:
    int v9 = 0;
    goto LABEL_8;
  }
  unint64_t v7 = __s2;
  if (v27 != __s2) {
    goto LABEL_42;
  }
LABEL_3:
  if (v30 > 0x40)
  {
    uint64_t result = memcmp(v29, v25, (((unint64_t)v30 + 63) >> 3) & 0x3FFFFFF8);
    BOOL v8 = result == 0;
  }
  else
  {
    BOOL v8 = v29 == v25;
  }
  int v9 = v8;
LABEL_8:
  if (v26 >= 0x41)
  {
    uint64_t result = (uint64_t)v25;
    if (v25) {
      uint64_t result = MEMORY[0x1D25D9CB0](v25, 0x1000C8000313F17);
    }
  }
  if (v24 >= 0x41 && v7) {
    uint64_t result = MEMORY[0x1D25D9CB0](v7, 0x1000C8000313F17);
  }
  if (v22 >= 0x41)
  {
    uint64_t result = v21;
    if (v21) {
      uint64_t result = MEMORY[0x1D25D9CB0](v21, 0x1000C8000313F17);
    }
  }
  if (v20 >= 0x41)
  {
    uint64_t result = v19;
    if (v19) {
      uint64_t result = MEMORY[0x1D25D9CB0](v19, 0x1000C8000313F17);
    }
  }
  if (v14 >= 0x41)
  {
    uint64_t result = v13;
    if (v13) {
      uint64_t result = MEMORY[0x1D25D9CB0](v13, 0x1000C8000313F17);
    }
  }
  if (v12 >= 0x41)
  {
    uint64_t result = v11;
    if (v11) {
      uint64_t result = MEMORY[0x1D25D9CB0](v11, 0x1000C8000313F17);
    }
  }
  if (v18 >= 0x41)
  {
    uint64_t result = v17;
    if (v17) {
      uint64_t result = MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
    }
  }
  if (v16 >= 0x41)
  {
    uint64_t result = v15;
    if (v15) {
      uint64_t result = MEMORY[0x1D25D9CB0](v15, 0x1000C8000313F17);
    }
  }
  if (v9)
  {
    *(_DWORD *)(a3 + 8) = v28;
    *(void *)a3 = v27;
    *(_DWORD *)(a3 + 24) = v30;
    *(void *)(a3 + 16) = v29;
    unsigned int v28 = 0;
    unsigned int v30 = 0;
    *(unsigned char *)(a3 + 32) = 1;
  }
  else
  {
    *(unsigned char *)a3 = 0;
    unsigned int v10 = v30;
    *(unsigned char *)(a3 + 32) = 0;
    if (v10 >= 0x41)
    {
      uint64_t result = (uint64_t)v29;
      if (v29) {
        uint64_t result = MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
      }
    }
  }
  if (v28 >= 0x41)
  {
    uint64_t result = (uint64_t)v27;
    if (v27) {
      return MEMORY[0x1D25D9CB0](v27, 0x1000C8000313F17);
    }
  }
  return result;
}

unint64_t *llvm::ConstantRange::castOp@<X0>(unint64_t *result@<X0>, int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  switch(a2)
  {
    case '\'':
      return (unint64_t *)llvm::ConstantRange::zeroExtend((uint64_t)result, a3, a4);
    case '(':
      return llvm::ConstantRange::signExtend((llvm::ConstantRange *)result, a3, a4);
    case ')':
    case '*':
      int v8 = *((_DWORD *)result + 2);
      *(_DWORD *)(a4 + 8) = a3;
      if (v8 == a3)
      {
        if (a3 > 0x40) {
LABEL_22:
        }
          operator new[]();
LABEL_12:
        *(void *)a4 = *result;
        unsigned int v6 = *((_DWORD *)result + 6);
        *(_DWORD *)(a4 + 24) = v6;
        if (v6 > 0x40) {
          operator new[]();
        }
        unint64_t v7 = result[2];
LABEL_14:
        *(void *)(a4 + 16) = v7;
      }
      else
      {
        if (a3 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)a4);
        }
        unint64_t v9 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a3;
        if (!a3) {
          unint64_t v9 = 0;
        }
        *(void *)a4 = v9;
        uint64_t result = (unint64_t *)(a4 + 16);
        *(_DWORD *)(a4 + 24) = a3;
        *(void *)(a4 + 16) = v9;
      }
      return result;
    case '+':
      unsigned int v10 = *((_DWORD *)result + 2);
      sub_1CB8F1EEC((uint64_t)&v19, v10, 0);
      llvm::APInt::zextOrSelf((uint64_t)&v19, a3, (uint64_t)&v21);
      if (v20 >= 0x41 && v19) {
        MEMORY[0x1D25D9CB0](v19, 0x1000C8000313F17);
      }
      sub_1CB8F1EEC((uint64_t)&v17, v10, -1);
      uint64_t result = (unint64_t *)llvm::APInt::zextOrSelf((uint64_t)&v17, a3, (uint64_t)&v19);
      goto LABEL_38;
    case ',':
      uint64_t v12 = *((unsigned int *)result + 2);
      sub_1CBA62420(v12, (llvm::APInt *)&v19);
      llvm::APInt::sextOrSelf((uint64_t)&v19, a3, (uint64_t)&v21);
      if (v20 >= 0x41 && v19) {
        MEMORY[0x1D25D9CB0](v19, 0x1000C8000313F17);
      }
      sub_1CBFD9168(v12, (llvm::APInt *)&v17);
      uint64_t result = (unint64_t *)llvm::APInt::sextOrSelf((uint64_t)&v17, a3, (uint64_t)&v19);
LABEL_38:
      if (v18 >= 0x41)
      {
        uint64_t result = v17;
        if (v17) {
          uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
        }
      }
      uint64_t v14 = v21;
      unsigned int v15 = v20;
      uint64_t v16 = v19;
      *(_DWORD *)(a4 + 8) = v22;
      *(void *)a4 = v14;
      *(_DWORD *)(a4 + 24) = v15;
      *(void *)(a4 + 16) = v16;
      return result;
    case '-':
    case '.':
    case '/':
    case '0':
    case '2':
      *(_DWORD *)(a4 + 8) = a3;
      if (a3 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)a4);
      }
      unint64_t v7 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a3;
      if (!a3) {
        unint64_t v7 = 0;
      }
      *(void *)a4 = v7;
      *(_DWORD *)(a4 + 24) = a3;
      goto LABEL_14;
    case '1':
      unsigned int v5 = *((_DWORD *)result + 2);
      *(_DWORD *)(a4 + 8) = v5;
      if (v5 <= 0x40) {
        goto LABEL_12;
      }
      goto LABEL_22;
    default:
      return (unint64_t *)llvm::ConstantRange::truncate((uint64_t)result, a3, a4);
  }
}

uint64_t llvm::ConstantRange::truncate@<X0>(uint64_t this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v4 = (llvm::APInt *)this;
  uint64_t v6 = *(unsigned int *)(this + 8);
  if (v6 >= 0x41)
  {
    uint64_t v16 = *(void **)this;
    this = memcmp(*(const void **)this, *(const void **)(this + 16), ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8);
    if (!this)
    {
      int v31 = 0;
      int64_t v32 = (unint64_t)(v6 + 63) >> 6;
      do
      {
        BOOL v23 = v32-- < 1;
        if (v23) {
          break;
        }
        unint64_t v33 = v16[v32];
        v31 += __clz(v33);
      }
      while (!v33);
      int v34 = v6 | 0xFFFFFFC0;
      if ((v6 & 0x3F) == 0) {
        int v34 = 0;
      }
      if (v31 + v34 == v6) {
        goto LABEL_54;
      }
      this = llvm::APInt::countTrailingOnesSlowCase(v4);
      if (this == v6)
      {
LABEL_17:
        *(_DWORD *)(a3 + 8) = a2;
        if (a2 <= 0x40)
        {
          unint64_t v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
          if (!a2) {
            unint64_t v15 = 0;
          }
          *(void *)a3 = v15;
          goto LABEL_56;
        }
        uint64_t v35 = (llvm::APInt *)a3;
        goto LABEL_63;
      }
    }
    unsigned int v98 = v6;
    operator new[]();
  }
  unint64_t v7 = *(const void **)this;
  unint64_t v8 = *(void *)(this + 16);
  if (!(v8 | *(void *)this))
  {
LABEL_54:
    *(_DWORD *)(a3 + 8) = a2;
    if (a2 <= 0x40)
    {
      unint64_t v15 = 0;
      *(void *)a3 = 0;
LABEL_56:
      *(_DWORD *)(a3 + 24) = a2;
      *(void *)(a3 + 16) = v15;
      return this;
    }
    uint64_t v35 = (llvm::APInt *)a3;
LABEL_63:
    llvm::APInt::initSlowCase(v35);
  }
  if (v7 == (const void *)v8 && (!v6 || v7 == (const void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v6))) {
    goto LABEL_17;
  }
  unsigned int v98 = *(_DWORD *)(this + 8);
  unint64_t v97 = (unint64_t)v7;
  unsigned int v96 = *(_DWORD *)(this + 24);
  if (v96 > 0x40) {
    operator new[]();
  }
  uint64_t v95 = *(void *)(this + 16);
  unsigned int v92 = a2;
  if (a2 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&__src);
  }
  __src = 0;
  unsigned int v94 = a2;
  uint64_t v93 = 0;
  uint64_t v9 = *(unsigned int *)(this + 8);
  if (v9 > 0x40)
  {
    unint64_t v10 = *(void *)(this + 16);
    unint64_t v17 = ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8;
    while (v17)
    {
      unint64_t v18 = *(void *)(*(void *)this - 8 + v17);
      unint64_t v19 = *(void *)(v10 + v17 - 8);
      v17 -= 8;
      if (v18 != v19)
      {
        if (v18 <= v19) {
          goto LABEL_9;
        }
        goto LABEL_27;
      }
    }
    goto LABEL_9;
  }
  unint64_t v10 = *(void *)(this + 16);
  if (*(void *)this <= v10)
  {
LABEL_9:
    unint64_t v11 = v97;
    goto LABEL_10;
  }
LABEL_27:
  uint64_t v20 = *(unsigned int *)(this + 24);
  if (v20 > 0x40)
  {
    int v21 = 0;
    int64_t v22 = (unint64_t)(v20 + 63) >> 6;
    do
    {
      BOOL v23 = v22-- < 1;
      if (v23) {
        break;
      }
      unint64_t v24 = *(void *)(v10 + 8 * v22);
      v21 += __clz(v24);
    }
    while (!v24);
    int v25 = v20 | 0xFFFFFFC0;
    if ((v20 & 0x3F) == 0) {
      int v25 = 0;
    }
    if ((int)v20 - v21 - v25 > a2) {
      goto LABEL_115;
    }
    this = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)(this + 16));
  }
  else
  {
    if (64 - __clz(v10) > a2) {
      goto LABEL_115;
    }
    this = __clz(__rbit64(~v10));
  }
  if (this == a2) {
    goto LABEL_115;
  }
  unsigned int v90 = a2;
  unint64_t v26 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
  uint64_t v27 = (void *)v26;
  if (!a2) {
    uint64_t v27 = 0;
  }
  unint64_t v89 = v27;
  if (v20 >= 0x41)
  {
    unint64_t v10 = *(void *)v10;
    if (a2) {
      goto LABEL_42;
    }
  }
  else if (a2)
  {
    goto LABEL_42;
  }
  unint64_t v26 = 0;
LABEL_42:
  unint64_t v28 = v26 & v10;
  unint64_t v87 = v28;
  unsigned int v29 = v90;
  unsigned int v90 = 0;
  int v88 = 0;
  if (v92 >= 0x41) {
    this = (uint64_t)__src;
  }
  __src = v89;
  unsigned int v92 = v29;
  uint64_t v93 = v28;
  unsigned int v94 = a2;
  uint64_t v95 = -1;
  if (v96) {
    unint64_t v30 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v96;
  }
  else {
    unint64_t v30 = 0;
  }
  v95 &= v30;
  unint64_t v11 = v97;
  if (v97 != v95)
  {
LABEL_10:
    if (64 - __clz(v11) <= a2) {
      goto LABEL_80;
    }
    unsigned int v12 = *((_DWORD *)v4 + 2);
    unsigned int v84 = v12;
    if (v12 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v83);
    }
    uint64_t v83 = 0;
    unsigned int v13 = a2;
    if (v12 != a2)
    {
      if (a2 <= 0x3F)
      {
        unint64_t v14 = v83 | (0xFFFFFFFFFFFFFFFFLL >> (a2 - v12) << a2);
        goto LABEL_69;
      }
      llvm::APInt::setBitsSlowCase(&v83, a2, v12);
      unsigned int v13 = v12;
    }
    if (v13 > 0x40)
    {
      this = v83;
      if (v12)
      {
        unint64_t v61 = (uint64_t *)v97;
        unint64_t v62 = ((unint64_t)v12 + 63) >> 6;
        unint64_t v63 = (void *)v83;
        do
        {
          uint64_t v64 = *v61++;
          *v63++ &= v64;
          --v62;
        }
        while (v62);
      }
      goto LABEL_70;
    }
    unint64_t v14 = v83;
LABEL_69:
    this = v14 & v97;
LABEL_70:
    char v36 = v98;
    if (v98 >= 0x41)
    {
      uint64_t v65 = 0;
      uint64_t v66 = (unint64_t *)v97;
      unint64_t v67 = ((unint64_t)v98 + 63) >> 6;
      uint64_t v68 = (unint64_t *)this;
      unint64_t v69 = v67;
      do
      {
        unint64_t v70 = *v68++;
        unint64_t v71 = *v66 - v70;
        BOOL v72 = *v66 < v70;
        unint64_t v73 = *v66 + ~v70;
        if (v65)
        {
          uint64_t v65 = v73 >= *v66;
        }
        else
        {
          unint64_t v73 = v71;
          uint64_t v65 = v72;
        }
        *v66++ = v73;
        --v69;
      }
      while (v69);
      *(void *)(v97 + 8 * (v67 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -v36;
    }
    else
    {
      if (v98) {
        unint64_t v37 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v98;
      }
      else {
        unint64_t v37 = 0;
      }
      unint64_t v97 = v37 & (v97 - this);
    }
    char v38 = v96;
    if (v96 >= 0x41)
    {
      uint64_t v74 = 0;
      unsigned int v75 = (unint64_t *)v95;
      unint64_t v76 = ((unint64_t)v96 + 63) >> 6;
      int v77 = (unint64_t *)this;
      unint64_t v78 = v76;
      do
      {
        unint64_t v79 = *v77++;
        unint64_t v80 = *v75 - v79;
        BOOL v81 = *v75 < v79;
        unint64_t v82 = *v75 + ~v79;
        if (v74)
        {
          uint64_t v74 = v82 >= *v75;
        }
        else
        {
          unint64_t v82 = v80;
          uint64_t v74 = v81;
        }
        *v75++ = v82;
        --v78;
      }
      while (v78);
      *(void *)(v95 + 8 * (v76 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -v38;
    }
    else
    {
      if (v96) {
        unint64_t v39 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v96;
      }
      else {
        unint64_t v39 = 0;
      }
      uint64_t v95 = v39 & (v95 - this);
    }
LABEL_80:
    uint64_t v40 = v96;
    if (v96 > 0x40)
    {
      int v43 = 0;
      int64_t v44 = ((unint64_t)v96 + 63) >> 6;
      uint64_t v41 = v95;
      do
      {
        BOOL v23 = v44-- < 1;
        if (v23) {
          break;
        }
        unint64_t v45 = *(void *)(v95 + 8 * v44);
        v43 += __clz(v45);
      }
      while (!v45);
      unsigned int v46 = v96 | 0xFFFFFFC0;
      if ((v96 & 0x3F) == 0) {
        unsigned int v46 = 0;
      }
      int v42 = v43 + v46;
    }
    else
    {
      uint64_t v41 = v95;
      int v42 = v96 + __clz(v95) - 64;
    }
    unsigned int v47 = v96 - v42;
    if (v47 > a2)
    {
      if (v47 != a2 + 1) {
        goto LABEL_115;
      }
      uint64_t v48 = ~(1 << a2);
      if (v96 > 0x40)
      {
        *(void *)(v41 + 8 * (a2 >> 6)) &= v48;
        unint64_t v49 = v95;
        unint64_t v50 = v97;
        unint64_t v55 = ((unint64_t)(v40 + 63) >> 3) & 0x3FFFFFF8;
        while (v55)
        {
          unint64_t v56 = *(void *)(v95 + v55 - 8);
          unint64_t v57 = *(void *)(v97 + v55 - 8);
          v55 -= 8;
          if (v56 != v57)
          {
            if (v56 > v57) {
              goto LABEL_115;
            }
            goto LABEL_106;
          }
        }
        goto LABEL_115;
      }
      unint64_t v49 = v41 & v48;
      uint64_t v95 = v49;
      unint64_t v50 = v97;
      if (v49 >= v97)
      {
LABEL_115:
        *(_DWORD *)(a3 + 8) = a2;
        if (a2) {
          unint64_t v60 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
        }
        else {
          unint64_t v60 = 0;
        }
        *(void *)a3 = v60;
        *(_DWORD *)(a3 + 24) = a2;
        *(void *)(a3 + 16) = v60;
LABEL_118:
        if (v94 >= 0x41)
        {
          this = v93;
          if (v93) {
            this = MEMORY[0x1D25D9CB0](v93, 0x1000C8000313F17);
          }
        }
        goto LABEL_119;
      }
LABEL_106:
      if (v98 >= 0x41) {
        unint64_t v50 = *(void *)v50;
      }
      unint64_t v58 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
      unint64_t v59 = v58;
      if (!a2) {
        unint64_t v59 = 0;
      }
      if (v96 >= 0x41)
      {
        unint64_t v49 = *(void *)v49;
        if (a2) {
          goto LABEL_112;
        }
      }
      else if (a2)
      {
LABEL_112:
        unsigned int v84 = a2;
        uint64_t v83 = v59 & v50;
        unsigned int v86 = a2;
        uint64_t v85 = v58 & v49;
        this = llvm::ConstantRange::unionWith((uint64_t)&v83, (unsigned int *)&__src, 0, a3);
        if (v86 >= 0x41)
        {
          this = v85;
          if (v85) {
            this = MEMORY[0x1D25D9CB0](v85, 0x1000C8000313F17);
          }
        }
        if (v84 < 0x41) {
          goto LABEL_118;
        }
        this = v83;
        if (!v83) {
          goto LABEL_118;
        }
        goto LABEL_155;
      }
      unint64_t v58 = 0;
      goto LABEL_112;
    }
    if (v98 >= 0x41) {
      uint64_t v51 = (unint64_t *)v97;
    }
    else {
      uint64_t v51 = &v97;
    }
    unint64_t v52 = *v51;
    unint64_t v53 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
    unint64_t v54 = v53;
    if (!a2) {
      unint64_t v54 = 0;
    }
    if (v96 >= 0x41)
    {
      uint64_t v41 = *(void *)v41;
      if (a2) {
        goto LABEL_99;
      }
    }
    else if (a2)
    {
LABEL_99:
      unsigned int v84 = a2;
      uint64_t v83 = v54 & v52;
      unsigned int v86 = a2;
      uint64_t v85 = v53 & v41;
      this = llvm::ConstantRange::unionWith((uint64_t)&v83, (unsigned int *)&__src, 0, a3);
      if (v86 >= 0x41)
      {
        this = v85;
        if (v85) {
          this = MEMORY[0x1D25D9CB0](v85, 0x1000C8000313F17);
        }
      }
      if (v84 < 0x41) {
        goto LABEL_118;
      }
      this = v83;
      if (!v83) {
        goto LABEL_118;
      }
LABEL_155:
      this = MEMORY[0x1D25D9CB0](v83, 0x1000C8000313F17);
      goto LABEL_118;
    }
    unint64_t v53 = 0;
    goto LABEL_99;
  }
  *(_DWORD *)(a3 + 8) = v92;
  *(void *)a3 = __src;
  *(_DWORD *)(a3 + 24) = v94;
  *(void *)(a3 + 16) = v93;
  unsigned int v92 = 0;
  unsigned int v94 = 0;
LABEL_119:
  if (v92 >= 0x41)
  {
    this = (uint64_t)__src;
    if (__src) {
      this = MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
    }
  }
  if (v96 >= 0x41)
  {
    this = v95;
    if (v95) {
      this = MEMORY[0x1D25D9CB0](v95, 0x1000C8000313F17);
    }
  }
  if (v98 >= 0x41)
  {
    this = v97;
    if (v97) {
      return MEMORY[0x1D25D9CB0](v97, 0x1000C8000313F17);
    }
  }
  return this;
}

unint64_t *llvm::ConstantRange::signExtend@<X0>(llvm::ConstantRange *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    unint64_t v7 = *(void *)this;
    unint64_t v8 = *((void *)this + 2);
    if (memcmp(*(const void **)this, (const void *)v8, ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)) {
      goto LABEL_3;
    }
    int v12 = 0;
    int64_t v13 = (unint64_t)(v6 + 63) >> 6;
    do
    {
      if (v13-- < 1) {
        break;
      }
      unint64_t v15 = *(void *)(v7 + 8 * v13);
      v12 += __clz(v15);
    }
    while (!v15);
    int v16 = v6 | 0xFFFFFFC0;
    if ((v6 & 0x3F) == 0) {
      int v16 = 0;
    }
    if (v12 + v16 != v6) {
      goto LABEL_3;
    }
LABEL_19:
    return llvm::ConstantRange::ConstantRange((unint64_t *)a3, a2, 0);
  }
  unint64_t v7 = *(void *)this;
  unint64_t v8 = *((void *)this + 2);
  if (!(v8 | *(void *)this)) {
    goto LABEL_19;
  }
LABEL_3:
  unsigned int v9 = *((_DWORD *)this + 6);
  unsigned int v10 = v9 - 1;
  if (v9 > 0x40)
  {
    if (((*(void *)(v8 + 8 * (v10 >> 6)) >> v10) & 1) == 0
      || llvm::APInt::countTrailingZerosSlowCase((unint64_t **)this + 2) != v10)
    {
LABEL_5:
      if (v6 > 0x40)
      {
        unint64_t v17 = (unint64_t)(v6 + 63) >> 3;
        if (memcmp((const void *)v7, (const void *)v8, v17 & 0x3FFFFFF8)
          || llvm::APInt::countTrailingOnesSlowCase(this) != v6)
        {
          uint64_t v18 = *(void *)(v7 + 8 * ((v6 - 1) >> 6)) & (1 << (v6 - 1));
          unint64_t v19 = (void *)(v8 + 8 * (v10 >> 6));
          if (v9 < 0x41) {
            unint64_t v19 = (void *)((char *)this + 16);
          }
          if ((v18 != 0) == ((*v19 >> v10) & 1))
          {
            unint64_t v24 = v17 & 0x3FFFFFF8;
            while (v24)
            {
              unint64_t v25 = *(void *)(v7 - 8 + v24);
              unint64_t v26 = *(void *)(v8 - 8 + v24);
              v24 -= 8;
              if (v25 != v26)
              {
                if (v25 <= v26) {
                  goto LABEL_8;
                }
                goto LABEL_27;
              }
            }
            goto LABEL_8;
          }
          if (v18)
          {
LABEL_8:
            llvm::APInt::sext((uint64_t)this, a2, (uint64_t)&v31);
            uint64_t result = (unint64_t *)llvm::APInt::sext((uint64_t)this + 16, a2, (uint64_t)&v29);
            *(_DWORD *)(a3 + 8) = v32;
            *(void *)a3 = v31;
            *(_DWORD *)(a3 + 24) = v30;
            *(void *)(a3 + 16) = v29;
            return result;
          }
          goto LABEL_27;
        }
      }
      else if (v7 != v8 || v6 && v7 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v6)
      {
        if ((uint64_t)(v7 << (64 - v6)) >> (64 - v6) <= (uint64_t)(v8 << (64 - v6)) >> (64 - v6)) {
          goto LABEL_8;
        }
LABEL_27:
        if (v9 > 0x40)
        {
          if (((*(void *)(v8 + 8 * (v10 >> 6)) >> v10) & 1) != 0
            && llvm::APInt::countTrailingZerosSlowCase((unint64_t **)this + 2) == v10)
          {
            goto LABEL_8;
          }
        }
        else if (v8 == 1 << v10)
        {
          goto LABEL_8;
        }
      }
      int v20 = v6 + ~a2;
      unsigned int v36 = a2;
      if (a2 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v35);
      }
      uint64_t v35 = 0;
      if (v20)
      {
        unsigned int v21 = a2 + v20;
        if (a2 + v20 > 0x3F) {
          llvm::APInt::setBitsSlowCase(&v35, v21, a2);
        }
        else {
          v35 |= 0xFFFFFFFFFFFFFFFFLL >> v20 << v21;
        }
      }
      unsigned int v34 = a2;
      uint64_t v33 = 0;
      if (v6 != 1)
      {
        if ((v6 - 1) > 0x40) {
          llvm::APInt::setBitsSlowCase(&v33, 0, v6 - 1);
        }
        else {
          v33 |= 0xFFFFFFFFFFFFFFFFLL >> (65 - v6);
        }
      }
      uint64_t result = (unint64_t *)llvm::APInt::operator+=((uint64_t)&v33, 1uLL);
      unsigned int v22 = v34;
      uint64_t v23 = v33;
      *(_DWORD *)(a3 + 8) = a2;
      *(void *)a3 = v35;
      *(_DWORD *)(a3 + 24) = v22;
      *(void *)(a3 + 16) = v23;
      return result;
    }
  }
  else if (v8 != 1 << v10)
  {
    goto LABEL_5;
  }
  uint64_t result = (unint64_t *)llvm::APInt::sext((uint64_t)this, a2, (uint64_t)&v39);
  if (a2 > 0x40)
  {
    if (*((_DWORD *)this + 6) != a2) {
      operator new[]();
    }
    uint64_t result = (unint64_t *)sub_1CD0463BC((uint64_t)&v37, (uint64_t)this + 16);
    a2 = v38;
    unint64_t v28 = v37;
  }
  else
  {
    unint64_t v27 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
    if (!a2) {
      unint64_t v27 = 0;
    }
    unint64_t v28 = v27 & *((void *)this + 2);
  }
  *(_DWORD *)(a3 + 8) = v40;
  *(void *)a3 = v39;
  *(_DWORD *)(a3 + 24) = a2;
  *(void *)(a3 + 16) = v28;
  return result;
}

uint64_t llvm::ConstantRange::zeroExtend@<X0>(uint64_t this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v4 = (llvm::APInt *)this;
  uint64_t v6 = (llvm::APInt *)(this + 16);
  uint64_t v7 = *(unsigned int *)(this + 8);
  if (v7 >= 0x41)
  {
    unint64_t v8 = *(void *)this;
    unint64_t v9 = *(void *)(this + 16);
    this = memcmp(*(const void **)this, (const void *)v9, ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8);
    if (!this)
    {
      int v18 = 0;
      int64_t v19 = (unint64_t)(v7 + 63) >> 6;
      do
      {
        if (v19-- < 1) {
          break;
        }
        unint64_t v21 = *(void *)(v8 + 8 * v19);
        v18 += __clz(v21);
      }
      while (!v21);
      int v22 = v7 | 0xFFFFFFC0;
      if ((v7 & 0x3F) == 0) {
        int v22 = 0;
      }
      if (v18 + v22 == v7) {
        goto LABEL_35;
      }
      this = llvm::APInt::countTrailingOnesSlowCase(v4);
      if (this == v7) {
        goto LABEL_12;
      }
    }
    unint64_t v15 = 8 * ((unint64_t)(v7 + 63) >> 6);
    while (v15)
    {
      unint64_t v16 = *(void *)(v8 - 8 + v15);
      unint64_t v17 = *(void *)(v9 - 8 + v15);
      v15 -= 8;
      if (v16 != v17)
      {
        if (v16 <= v17) {
          goto LABEL_5;
        }
        goto LABEL_12;
      }
    }
    goto LABEL_5;
  }
  unint64_t v8 = *(void *)this;
  unint64_t v9 = *(void *)(this + 16);
  if (v9 | *(void *)this)
  {
    if ((v8 != v9 || v7 && v8 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v7) && v8 <= v9)
    {
LABEL_5:
      if (a2 > 0x40)
      {
        if (v7 != a2) {
          operator new[]();
        }
        sub_1CD0463BC((uint64_t)&v27, (uint64_t)v4);
        if (*((_DWORD *)v4 + 6) != a2) {
          operator new[]();
        }
        this = sub_1CD0463BC((uint64_t)&v25, (uint64_t)v6);
        a2 = v26;
        unint64_t v12 = v25;
      }
      else
      {
        unsigned int v28 = a2;
        unint64_t v10 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
        unint64_t v11 = v10 & v8;
        if (!a2)
        {
          unint64_t v11 = 0;
          unint64_t v10 = 0;
        }
        unint64_t v27 = v11;
        unint64_t v12 = v10 & v9;
      }
      *(_DWORD *)(a3 + 8) = v28;
      *(void *)a3 = v27;
      *(_DWORD *)(a3 + 24) = a2;
      *(void *)(a3 + 16) = v12;
      return this;
    }
LABEL_12:
    unsigned int v33 = a2;
    if (a2 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v32);
    }
    uint64_t v32 = 0;
    unsigned int v13 = *((_DWORD *)v4 + 6);
    if (v13 > 0x40)
    {
      this = llvm::APInt::countLeadingZerosSlowCase(v6);
      if (this != v13) {
        goto LABEL_15;
      }
    }
    else if (*(void *)v6)
    {
LABEL_15:
      uint64_t v14 = v32;
      unsigned int v29 = a2;
      *(_DWORD *)(a3 + 8) = v33;
      *(void *)a3 = v14;
      *(_DWORD *)(a3 + 24) = a2;
      *(void *)(a3 + 16) = 1 << v7;
      return this;
    }
    uint64_t v23 = *(void *)v4;
    unsigned int v31 = a2;
    if (a2) {
      unint64_t v24 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
    }
    else {
      unint64_t v24 = 0;
    }
    unint64_t v30 = v24 & v23;
    if (v33 >= 0x41) {
      this = v32;
    }
    uint64_t v32 = v30;
    unsigned int v33 = v31;
    goto LABEL_15;
  }
LABEL_35:

  return (uint64_t)llvm::ConstantRange::ConstantRange((unint64_t *)a3, a2, 0);
}

llvm::APInt *llvm::ConstantRange::zextOrTrunc@<X0>(llvm::ConstantRange *this@<X0>, unsigned int a2@<W1>, _DWORD *a3@<X8>)
{
  unsigned int v5 = *((_DWORD *)this + 2);
  if (v5 > a2)
  {
    return (llvm::APInt *)llvm::ConstantRange::truncate((uint64_t)this, a2, (uint64_t)a3);
  }
  else if (v5 < a2)
  {
    return (llvm::APInt *)llvm::ConstantRange::zeroExtend((uint64_t)this, a2, (uint64_t)a3);
  }
  else
  {
    a3[2] = v5;
    if (v5 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)a3, this);
    }
    *(void *)a3 = *(void *)this;
    uint64_t result = (llvm::APInt *)(a3 + 4);
    uint64_t v7 = (llvm::ConstantRange *)((char *)this + 16);
    unsigned int v8 = *((_DWORD *)this + 6);
    a3[6] = v8;
    if (v8 > 0x40)
    {
      llvm::APInt::initSlowCase(result, v7);
    }
    *(void *)uint64_t result = *(void *)v7;
  }
  return result;
}

unint64_t *llvm::ConstantRange::sextOrTrunc@<X0>(unint64_t *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v4 = *((_DWORD *)this + 2);
  if (v4 > a2)
  {
    return (unint64_t *)llvm::ConstantRange::truncate((uint64_t)this, a2, a3);
  }
  else if (v4 < a2)
  {
    return llvm::ConstantRange::signExtend((llvm::ConstantRange *)this, a2, a3);
  }
  else
  {
    *(_DWORD *)(a3 + 8) = v4;
    if (v4 > 0x40) {
      operator new[]();
    }
    *(void *)a3 = *this;
    unsigned int v5 = *((_DWORD *)this + 6);
    *(_DWORD *)(a3 + 24) = v5;
    if (v5 > 0x40) {
      operator new[]();
    }
    *(void *)(a3 + 16) = this[2];
  }
  return this;
}

void llvm::ConstantRange::binaryOp(llvm::ConstantRange *a1@<X2>, unsigned int *a2@<X0>, int a3@<W1>, unint64_t *a4@<X8>)
{
  switch(a3)
  {
    case 13:
    case 14:
      llvm::ConstantRange::add((uint64_t)a2, a1, (uint64_t)a4);
      break;
    case 15:
    case 16:
      llvm::ConstantRange::sub((llvm::ConstantRange *)a2, a1, (uint64_t)a4);
      break;
    case 17:
    case 18:
      llvm::ConstantRange::multiply((llvm::ConstantRange *)a2, (const void **)a1, (uint64_t)a4);
      break;
    case 19:
      llvm::ConstantRange::udiv((const void **)a2, (const void **)a1, (uint64_t)a4);
      break;
    case 20:
      llvm::ConstantRange::sdiv((void **)a2, a1, (uint64_t)a4);
      break;
    case 22:
      llvm::ConstantRange::urem((llvm::ConstantRange *)a2, a1, (uint64_t)a4);
      break;
    case 23:
      llvm::ConstantRange::srem((llvm::ConstantRange *)a2, (const void **)a1, (uint64_t)a4);
      break;
    case 25:
      llvm::ConstantRange::shl((const void **)a2, (const void **)a1, (uint64_t)a4);
      break;
    case 26:
      llvm::ConstantRange::lshr((const void **)a2, a1, (uint64_t)a4);
      break;
    case 27:
      llvm::ConstantRange::ashr((const void **)a2, a1, (uint64_t)a4);
      break;
    case 28:
      llvm::ConstantRange::binaryAnd((const void **)a2, a1, (uint64_t)a4);
      break;
    case 29:
      llvm::ConstantRange::binaryOr((const void **)a2, a1, (uint64_t)a4);
      break;
    case 30:
      llvm::ConstantRange::binaryXor((const void **)a2, (const void **)a1, (uint64_t)a4);
      break;
    default:
      llvm::ConstantRange::ConstantRange(a4, a2[2], 1);
      break;
  }
}

uint64_t llvm::ConstantRange::add@<X0>(uint64_t this@<X0>, const llvm::ConstantRange *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = this;
  uint64_t v6 = *(unsigned int *)(this + 8);
  if (v6 >= 0x41)
  {
    uint64_t v7 = *(void **)this;
    unint64_t v8 = *(void *)(this + 16);
    this = memcmp(*(const void **)this, (const void *)v8, ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8);
    if (!this)
    {
      int v22 = 0;
      int64_t v23 = (unint64_t)(v6 + 63) >> 6;
      do
      {
        BOOL v24 = v23-- < 1;
        if (v24) {
          break;
        }
        unint64_t v25 = v7[v23];
        v22 += __clz(v25);
      }
      while (!v25);
      int v26 = v6 | 0xFFFFFFC0;
      if ((v6 & 0x3F) == 0) {
        int v26 = 0;
      }
      if (v22 + v26 == v6) {
        goto LABEL_51;
      }
    }
  }
  else
  {
    uint64_t v7 = *(void **)this;
    unint64_t v8 = *(void *)(this + 16);
    if (!(v8 | *(void *)this)) {
      goto LABEL_51;
    }
  }
  uint64_t v9 = *((unsigned int *)a2 + 2);
  if (v9 >= 0x41)
  {
    unint64_t v10 = *(void **)a2;
    unint64_t v11 = *((void *)a2 + 2);
    this = memcmp(*(const void **)a2, (const void *)v11, ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8);
    if (this) {
      goto LABEL_5;
    }
    int v27 = 0;
    int64_t v28 = (unint64_t)(v9 + 63) >> 6;
    do
    {
      BOOL v24 = v28-- < 1;
      if (v24) {
        break;
      }
      unint64_t v29 = v10[v28];
      v27 += __clz(v29);
    }
    while (!v29);
    int v30 = v9 | 0xFFFFFFC0;
    if ((v9 & 0x3F) == 0) {
      int v30 = 0;
    }
    if (v27 + v30 != v9)
    {
LABEL_5:
      if (v6 > 0x40)
      {
        this = memcmp(v7, (const void *)v8, ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8);
        if (!this)
        {
          this = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v4);
          if (this == v6)
          {
            *(_DWORD *)(a3 + 8) = v6;
            goto LABEL_57;
          }
        }
      }
      else if (v7 == (void *)v8 && (!v6 || v7 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v6)))
      {
        *(_DWORD *)(a3 + 8) = v6;
LABEL_22:
        unint64_t v19 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
        if (!v6) {
          unint64_t v19 = 0;
        }
        *(void *)a3 = v19;
        *(_DWORD *)(a3 + 24) = v6;
        *(void *)(a3 + 16) = v19;
        return this;
      }
      if (v9 > 0x40)
      {
        if (!memcmp(v10, (const void *)v11, ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8))
        {
          this = llvm::APInt::countTrailingOnesSlowCase(a2);
          if (this == v9)
          {
LABEL_27:
            *(_DWORD *)(a3 + 8) = v6;
            if (v6 <= 0x40) {
              goto LABEL_22;
            }
LABEL_57:
            llvm::APInt::initSlowCase((llvm::APInt *)a3);
          }
        }
      }
      else if (v10 == (void *)v11 && (!v9 || v10 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v9)))
      {
        goto LABEL_27;
      }
      if (v6 >= 0x41) {
        operator new[]();
      }
      if (v6) {
        unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
      }
      else {
        unint64_t v12 = 0;
      }
      unsigned int v13 = (void *)(v12 & ((unint64_t)v7 + (void)v10));
      unsigned int v14 = *(_DWORD *)(v4 + 24);
      if (v14 >= 0x41) {
        operator new[]();
      }
      uint64_t v15 = *((void *)a2 + 2) + *(void *)(v4 + 16);
      if (v14) {
        unint64_t v16 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v14;
      }
      else {
        unint64_t v16 = 0;
      }
      unsigned int v36 = *(_DWORD *)(v4 + 24);
      __s2 = (void *)(v16 & v15);
      llvm::APInt::operator-=((uint64_t)&__s2, 1uLL);
      unsigned int v17 = v36;
      int v18 = __s2;
      unsigned int v36 = 0;
      if (v13 == __s2)
      {
        unsigned int v20 = *(_DWORD *)(v4 + 8);
        *(_DWORD *)(a3 + 8) = v20;
        if (v20 <= 0x40)
        {
          if (v20) {
            goto LABEL_31;
          }
          goto LABEL_65;
        }
      }
      else
      {
        int v32 = v6;
        unsigned int v31 = v13;
        unsigned int v34 = v17;
        unsigned int v33 = __s2;
        if (!llvm::ConstantRange::isSizeStrictlySmallerThan((llvm::ConstantRange *)&v31, (const void **)v4))
        {
          this = llvm::ConstantRange::isSizeStrictlySmallerThan((llvm::ConstantRange *)&v31, (const void **)a2);
          if (!this)
          {
            *(_DWORD *)(a3 + 8) = v6;
            *(void *)a3 = v13;
            *(_DWORD *)(a3 + 24) = v17;
            *(void *)(a3 + 16) = v18;
            return this;
          }
        }
        unsigned int v20 = *(_DWORD *)(v4 + 8);
        *(_DWORD *)(a3 + 8) = v20;
        if (v20 <= 0x40)
        {
          if (v20)
          {
LABEL_31:
            unint64_t v21 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v20;
            goto LABEL_32;
          }
LABEL_65:
          unint64_t v21 = 0;
LABEL_32:
          *(void *)a3 = v21;
          this = a3 + 16;
          *(_DWORD *)(a3 + 24) = v20;
          *(void *)(a3 + 16) = v21;
          if (v17 >= 0x41)
          {
            if (v18) {
              return MEMORY[0x1D25D9CB0](v18, 0x1000C8000313F17);
            }
          }
          return this;
        }
      }
      llvm::APInt::initSlowCase((llvm::APInt *)a3);
    }
  }
  else
  {
    unint64_t v10 = *(void **)a2;
    unint64_t v11 = *((void *)a2 + 2);
    if (v11 | *(void *)a2) {
      goto LABEL_5;
    }
  }
LABEL_51:

  return (uint64_t)llvm::ConstantRange::ConstantRange((unint64_t *)a3, v6, 0);
}

unint64_t *llvm::ConstantRange::sub@<X0>(llvm::ConstantRange *this@<X0>, const llvm::ConstantRange *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    uint64_t v7 = *(void **)this;
    unint64_t v8 = *((void *)this + 2);
    if (!memcmp(*(const void **)this, (const void *)v8, ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8))
    {
      int v22 = 0;
      int64_t v23 = (unint64_t)(v6 + 63) >> 6;
      do
      {
        BOOL v24 = v23-- < 1;
        if (v24) {
          break;
        }
        unint64_t v25 = v7[v23];
        v22 += __clz(v25);
      }
      while (!v25);
      int v26 = v6 | 0xFFFFFFC0;
      if ((v6 & 0x3F) == 0) {
        int v26 = 0;
      }
      if (v22 + v26 == v6) {
        goto LABEL_51;
      }
    }
  }
  else
  {
    uint64_t v7 = *(void **)this;
    unint64_t v8 = *((void *)this + 2);
    if (!(v8 | *(void *)this)) {
      goto LABEL_51;
    }
  }
  uint64_t v9 = *((unsigned int *)a2 + 2);
  if (v9 >= 0x41)
  {
    unint64_t v10 = *(void **)a2;
    unint64_t v11 = *((void *)a2 + 2);
    if (memcmp(*(const void **)a2, (const void *)v11, ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8)) {
      goto LABEL_5;
    }
    int v27 = 0;
    int64_t v28 = (unint64_t)(v9 + 63) >> 6;
    do
    {
      BOOL v24 = v28-- < 1;
      if (v24) {
        break;
      }
      unint64_t v29 = v10[v28];
      v27 += __clz(v29);
    }
    while (!v29);
    int v30 = v9 | 0xFFFFFFC0;
    if ((v9 & 0x3F) == 0) {
      int v30 = 0;
    }
    if (v27 + v30 != v9)
    {
LABEL_5:
      if (v6 > 0x40)
      {
        if (!memcmp(v7, (const void *)v8, ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
          && llvm::APInt::countTrailingOnesSlowCase(this) == v6)
        {
          *(_DWORD *)(a3 + 8) = v6;
          goto LABEL_57;
        }
      }
      else if (v7 == (void *)v8 && (!v6 || v7 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v6)))
      {
        *(_DWORD *)(a3 + 8) = v6;
LABEL_27:
        unint64_t v19 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
        if (!v6) {
          unint64_t v19 = 0;
        }
        *(void *)a3 = v19;
        uint64_t result = (unint64_t *)(a3 + 16);
        *(_DWORD *)(a3 + 24) = v6;
        *(void *)(a3 + 16) = v19;
        return result;
      }
      if (v9 > 0x40)
      {
        if (!memcmp(v10, (const void *)v11, ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8)
          && llvm::APInt::countTrailingOnesSlowCase(a2) == v9)
        {
LABEL_26:
          *(_DWORD *)(a3 + 8) = v6;
          if (v6 <= 0x40) {
            goto LABEL_27;
          }
LABEL_57:
          llvm::APInt::initSlowCase((llvm::APInt *)a3);
        }
      }
      else if (v10 == (void *)v11 && (!v9 || v11 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v9))
      {
        goto LABEL_26;
      }
      if (v6 >= 0x41) {
        operator new[]();
      }
      if (v6) {
        unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
      }
      else {
        unint64_t v12 = 0;
      }
      unsigned int v36 = v6;
      __s1 = (void *)(v12 & ((unint64_t)v7 - v11));
      llvm::APInt::operator+=((uint64_t)&__s1, 1uLL);
      uint64_t v13 = v36;
      unsigned int v14 = __s1;
      unsigned int v36 = 0;
      unsigned int v15 = *((_DWORD *)this + 6);
      if (v15 >= 0x41) {
        operator new[]();
      }
      if (v15) {
        unint64_t v16 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v15;
      }
      else {
        unint64_t v16 = 0;
      }
      unsigned int v17 = (void *)(v16 & (*((void *)this + 2) - *(void *)a2));
      if (v13 > 0x40)
      {
        if (memcmp(__s1, v17, ((unint64_t)(v13 + 63) >> 3) & 0x3FFFFFF8)) {
          goto LABEL_17;
        }
      }
      else if (__s1 != v17)
      {
LABEL_17:
        int v32 = v13;
        unsigned int v31 = v14;
        unsigned int v34 = v15;
        unsigned int v33 = v17;
        if (!llvm::ConstantRange::isSizeStrictlySmallerThan((llvm::ConstantRange *)&v31, (const void **)this))
        {
          uint64_t result = (unint64_t *)llvm::ConstantRange::isSizeStrictlySmallerThan((llvm::ConstantRange *)&v31, (const void **)a2);
          if (!result)
          {
            *(_DWORD *)(a3 + 8) = v13;
            *(void *)a3 = v14;
            *(_DWORD *)(a3 + 24) = v15;
            *(void *)(a3 + 16) = v17;
            return result;
          }
        }
        unsigned int v20 = *((_DWORD *)this + 2);
        *(_DWORD *)(a3 + 8) = v20;
        if (v20 <= 0x40)
        {
          if (v20)
          {
LABEL_32:
            unint64_t v21 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v20;
            goto LABEL_33;
          }
LABEL_68:
          unint64_t v21 = 0;
LABEL_33:
          *(void *)a3 = v21;
          uint64_t result = (unint64_t *)(a3 + 16);
          *(_DWORD *)(a3 + 24) = v20;
          *(void *)(a3 + 16) = v21;
          if (v13 >= 0x41)
          {
            if (v14) {
              return (unint64_t *)MEMORY[0x1D25D9CB0](v14, 0x1000C8000313F17);
            }
          }
          return result;
        }
        goto LABEL_69;
      }
      unsigned int v20 = *((_DWORD *)this + 2);
      *(_DWORD *)(a3 + 8) = v20;
      if (v20 <= 0x40)
      {
        if (v20) {
          goto LABEL_32;
        }
        goto LABEL_68;
      }
LABEL_69:
      llvm::APInt::initSlowCase((llvm::APInt *)a3);
    }
  }
  else
  {
    unint64_t v10 = *(void **)a2;
    unint64_t v11 = *((void *)a2 + 2);
    if (v11 | *(void *)a2) {
      goto LABEL_5;
    }
  }
LABEL_51:

  return llvm::ConstantRange::ConstantRange((unint64_t *)a3, v6, 0);
}

uint64_t llvm::ConstantRange::multiply@<X0>(llvm::ConstantRange *this@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v119 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    unint64_t v69 = *(void **)this;
    if (!memcmp(*(const void **)this, *((const void **)this + 2), ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8))
    {
      int v70 = 0;
      int64_t v71 = (unint64_t)(v6 + 63) >> 6;
      do
      {
        BOOL v32 = v71-- < 1;
        if (v32) {
          break;
        }
        unint64_t v72 = v69[v71];
        v70 += __clz(v72);
      }
      while (!v72);
      int v73 = v6 | 0xFFFFFFC0;
      if ((v6 & 0x3F) == 0) {
        int v73 = 0;
      }
      if (v70 + v73 == v6) {
        goto LABEL_172;
      }
    }
  }
  else if (!(*((void *)this + 2) | *(void *)this))
  {
    goto LABEL_172;
  }
  uint64_t v7 = *((unsigned int *)a2 + 2);
  if (v7 >= 0x41)
  {
    uint64_t v74 = *a2;
    if (memcmp(*a2, a2[2], ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8)) {
      goto LABEL_5;
    }
    int v75 = 0;
    int64_t v76 = (unint64_t)(v7 + 63) >> 6;
    do
    {
      BOOL v32 = v76-- < 1;
      if (v32) {
        break;
      }
      unint64_t v77 = v74[v76];
      v75 += __clz(v77);
    }
    while (!v77);
    int v78 = v7 | 0xFFFFFFC0;
    if ((v7 & 0x3F) == 0) {
      int v78 = 0;
    }
    if (v75 + v78 != v7)
    {
LABEL_5:
      llvm::ConstantRange::getUnsignedMin((uint64_t)this, (uint64_t)&__src);
      unsigned int v8 = 2 * *((_DWORD *)this + 2);
      if (v8 > 0x40)
      {
        if (v114 != v8) {
          operator new[]();
        }
        sub_1CD0463BC((uint64_t)&v111, (uint64_t)&__src);
      }
      else
      {
        unsigned int v112 = 2 * *((_DWORD *)this + 2);
        if (v8) {
          unint64_t v9 = 0xFFFFFFFFFFFFFFFFLL >> (-(char)v8 & 0x3E);
        }
        else {
          unint64_t v9 = 0;
        }
        uint64_t v111 = v9 & __src;
      }
      if (v114 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      llvm::ConstantRange::getUnsignedMax((char **)this, (uint64_t)&__src);
      unsigned int v10 = 2 * *((_DWORD *)this + 2);
      if (v10 > 0x40)
      {
        if (v114 != v10) {
          operator new[]();
        }
        sub_1CD0463BC((uint64_t)&v109, (uint64_t)&__src);
      }
      else
      {
        unsigned int v110 = 2 * *((_DWORD *)this + 2);
        if (v10) {
          unint64_t v11 = 0xFFFFFFFFFFFFFFFFLL >> (-(char)v10 & 0x3E);
        }
        else {
          unint64_t v11 = 0;
        }
        uint64_t v109 = v11 & __src;
      }
      if (v114 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      llvm::ConstantRange::getUnsignedMin((uint64_t)a2, (uint64_t)&__src);
      unsigned int v12 = 2 * *((_DWORD *)this + 2);
      if (v12 > 0x40)
      {
        if (v114 != v12) {
          operator new[]();
        }
        sub_1CD0463BC((uint64_t)&v107, (uint64_t)&__src);
      }
      else
      {
        unsigned int v108 = 2 * *((_DWORD *)this + 2);
        if (v12) {
          unint64_t v13 = 0xFFFFFFFFFFFFFFFFLL >> (-(char)v12 & 0x3E);
        }
        else {
          unint64_t v13 = 0;
        }
        uint64_t v107 = v13 & __src;
      }
      if (v114 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      llvm::ConstantRange::getUnsignedMax((char **)a2, (uint64_t)&__src);
      unsigned int v14 = 2 * *((_DWORD *)this + 2);
      if (v14 > 0x40)
      {
        if (v114 != v14) {
          operator new[]();
        }
        sub_1CD0463BC((uint64_t)&v105, (uint64_t)&__src);
      }
      else
      {
        unsigned int v106 = 2 * *((_DWORD *)this + 2);
        if (v14) {
          unint64_t v15 = 0xFFFFFFFFFFFFFFFFLL >> (-(char)v14 & 0x3E);
        }
        else {
          unint64_t v15 = 0;
        }
        uint64_t v105 = v15 & __src;
      }
      if (v114 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      llvm::APInt::operator*((uint64_t)&v111, &v107, (uint64_t)&v99);
      llvm::APInt::operator*((uint64_t)&v109, &v105, (uint64_t)&v97);
      llvm::APInt::operator+=((uint64_t)&v97, 1uLL);
      unsigned int v16 = v98;
      unsigned int v98 = 0;
      unsigned int v102 = v100;
      uint64_t v101 = v99;
      unsigned int v100 = 0;
      unsigned int v104 = v16;
      uint64_t v103 = v97;
      llvm::ConstantRange::truncate((uint64_t)&v101, *((_DWORD *)this + 2), (uint64_t)&v93);
      unsigned int v17 = v94;
      if (v94 > 0x40)
      {
        unint64_t v18 = v93;
        unint64_t v19 = v95;
        unint64_t v79 = (((unint64_t)v94 + 63) >> 3) & 0x3FFFFFF8;
        while (v79)
        {
          unint64_t v80 = *(void *)(v93 - 8 + v79);
          unint64_t v81 = *(unint64_t *)((char *)v95 + v79 - 8);
          v79 -= 8;
          if (v80 != v81)
          {
            if (v80 <= v81) {
              break;
            }
            goto LABEL_33;
          }
        }
      }
      else
      {
        unint64_t v18 = v93;
        unint64_t v19 = v95;
        if (v93 > (unint64_t)v95) {
          goto LABEL_33;
        }
      }
      uint64_t result = (uint64_t)&v95;
      unsigned int v21 = v96;
      unsigned int v22 = v96 - 1;
      if (v96 >= 0x41) {
        int64_t v23 = (unint64_t **)&v19[v22 >> 6];
      }
      else {
        int64_t v23 = &v95;
      }
      if (((1 << v22) & (unint64_t)*v23) == 0) {
        goto LABEL_204;
      }
      if (v96 <= 0x40)
      {
        if ((unint64_t *)(1 << v22) != v19) {
          goto LABEL_33;
        }
LABEL_204:
        *(_DWORD *)(a3 + 8) = v17;
        *(void *)a3 = v18;
        *(_DWORD *)(a3 + 24) = v21;
        *(void *)(a3 + 16) = v19;
        unsigned int v94 = 0;
        unsigned int v96 = 0;
LABEL_87:
        if (v94 >= 0x41)
        {
          uint64_t result = v93;
          if (v93) {
            uint64_t result = MEMORY[0x1D25D9CB0](v93, 0x1000C8000313F17);
          }
        }
        if (v104 >= 0x41)
        {
          uint64_t result = v103;
          if (v103) {
            uint64_t result = MEMORY[0x1D25D9CB0](v103, 0x1000C8000313F17);
          }
        }
        if (v102 >= 0x41)
        {
          uint64_t result = v101;
          if (v101) {
            uint64_t result = MEMORY[0x1D25D9CB0](v101, 0x1000C8000313F17);
          }
        }
        if (v106 >= 0x41)
        {
          uint64_t result = v105;
          if (v105) {
            uint64_t result = MEMORY[0x1D25D9CB0](v105, 0x1000C8000313F17);
          }
        }
        if (v108 >= 0x41)
        {
          uint64_t result = v107;
          if (v107) {
            uint64_t result = MEMORY[0x1D25D9CB0](v107, 0x1000C8000313F17);
          }
        }
        if (v110 >= 0x41)
        {
          uint64_t result = v109;
          if (v109) {
            uint64_t result = MEMORY[0x1D25D9CB0](v109, 0x1000C8000313F17);
          }
        }
        if (v112 >= 0x41)
        {
          uint64_t result = v111;
          if (v111) {
            return MEMORY[0x1D25D9CB0](v111, 0x1000C8000313F17);
          }
        }
        return result;
      }
      if ((v19[v22 >> 6] & (1 << v22)) != 0)
      {
        unsigned int v82 = v96 - 1;
        uint64_t result = llvm::APInt::countTrailingZerosSlowCase(&v95);
        if (result == v82) {
          goto LABEL_204;
        }
      }
LABEL_33:
      llvm::ConstantRange::getSignedMin((uint64_t)this, (uint64_t)&v89);
      llvm::APInt::sext((uint64_t)&v89, 2 * *((_DWORD *)this + 2), (uint64_t)&__src);
      if (v112 >= 0x41 && v111) {
        MEMORY[0x1D25D9CB0](v111, 0x1000C8000313F17);
      }
      uint64_t v111 = __src;
      unsigned int v112 = v114;
      unsigned int v114 = 0;
      if (v90 >= 0x41 && v89) {
        MEMORY[0x1D25D9CB0](v89, 0x1000C8000313F17);
      }
      llvm::ConstantRange::getSignedMax(this, (uint64_t)&v89);
      llvm::APInt::sext((uint64_t)&v89, 2 * *((_DWORD *)this + 2), (uint64_t)&__src);
      if (v110 >= 0x41 && v109) {
        MEMORY[0x1D25D9CB0](v109, 0x1000C8000313F17);
      }
      uint64_t v109 = __src;
      unsigned int v110 = v114;
      unsigned int v114 = 0;
      if (v90 >= 0x41 && v89) {
        MEMORY[0x1D25D9CB0](v89, 0x1000C8000313F17);
      }
      llvm::ConstantRange::getSignedMin((uint64_t)a2, (uint64_t)&v89);
      llvm::APInt::sext((uint64_t)&v89, 2 * *((_DWORD *)this + 2), (uint64_t)&__src);
      if (v108 >= 0x41 && v107) {
        MEMORY[0x1D25D9CB0](v107, 0x1000C8000313F17);
      }
      uint64_t v107 = __src;
      unsigned int v108 = v114;
      unsigned int v114 = 0;
      if (v90 >= 0x41 && v89) {
        MEMORY[0x1D25D9CB0](v89, 0x1000C8000313F17);
      }
      llvm::ConstantRange::getSignedMax(a2, (uint64_t)&v89);
      llvm::APInt::sext((uint64_t)&v89, 2 * *((_DWORD *)this + 2), (uint64_t)&__src);
      if (v106 >= 0x41 && v105) {
        MEMORY[0x1D25D9CB0](v105, 0x1000C8000313F17);
      }
      uint64_t v105 = __src;
      unsigned int v106 = v114;
      unsigned int v114 = 0;
      if (v90 >= 0x41 && v89) {
        MEMORY[0x1D25D9CB0](v89, 0x1000C8000313F17);
      }
      llvm::APInt::operator*((uint64_t)&v111, &v107, (uint64_t)&__src);
      llvm::APInt::operator*((uint64_t)&v111, &v105, (uint64_t)&v115);
      llvm::APInt::operator*((uint64_t)&v109, &v107, (uint64_t)&v116);
      llvm::APInt::operator*((uint64_t)&v109, &v105, (uint64_t)v117);
      uint64_t v24 = 1;
      p_src = &__src;
      do
      {
        int v26 = p_src;
        int v27 = &__src + 2 * v24;
        uint64_t v28 = *((unsigned int *)v27 + 2);
        if (v28 > 0x40)
        {
          uint64_t v55 = *(void *)(*v27 + 8 * ((v28 - 1) >> 6)) & (1 << (v28 - 1));
          unsigned int v56 = *((_DWORD *)p_src + 2);
          unsigned int v57 = v56 - 1;
          if (v56 >= 0x41) {
            unint64_t v58 = (uint64_t *)(*p_src + 8 * (v57 >> 6));
          }
          else {
            unint64_t v58 = p_src;
          }
          if ((v55 != 0) == (((unint64_t)*v58 >> v57) & 1))
          {
            unint64_t v63 = ((unint64_t)(v28 + 63) >> 3) & 0x3FFFFFF8;
            do
            {
              if (!v63)
              {
                int v33 = 0;
                goto LABEL_46;
              }
              unint64_t v64 = *(void *)(*v27 - 8 + v63);
              unint64_t v65 = *(void *)(*p_src - 8 + v63);
              v63 -= 8;
            }
            while (v64 == v65);
            if (v64 > v65) {
              int v33 = 1;
            }
            else {
              int v33 = -1;
            }
          }
          else if (v55)
          {
            int v33 = -1;
          }
          else
          {
            int v33 = 1;
          }
        }
        else
        {
          uint64_t v29 = -v28;
          uint64_t v30 = *v27 << v29 >> v29;
          uint64_t v31 = *p_src << v29 >> v29;
          BOOL v32 = v30 < v31;
          int v33 = v30 > v31;
          if (v32) {
            int v33 = -1;
          }
        }
LABEL_46:
        if (v33 < 0) {
          p_src = &__src + 2 * v24;
        }
        ++v24;
      }
      while (v24 != 4);
      unsigned int v34 = (unsigned int *)(v26 + 1);
      if (v33 < 0) {
        unsigned int v34 = (unsigned int *)v118;
      }
      unsigned int v35 = *v34;
      if (*v34 > 0x40) {
        operator new[]();
      }
      uint64_t v36 = *p_src;
      uint64_t v37 = 1;
      unsigned int v38 = &__src;
      do
      {
        uint64_t v39 = v38;
        int v40 = &__src + 2 * v37;
        uint64_t v41 = *((unsigned int *)v38 + 2);
        if (v41 > 0x40)
        {
          uint64_t v59 = *(void *)(*v38 + 8 * ((v41 - 1) >> 6)) & (1 << (v41 - 1));
          unsigned int v60 = *((_DWORD *)v40 + 2);
          unsigned int v61 = v60 - 1;
          if (v60 >= 0x41) {
            unint64_t v62 = (uint64_t *)(*v40 + 8 * (v61 >> 6));
          }
          else {
            unint64_t v62 = &__src + 2 * v37;
          }
          if ((v59 != 0) == (((unint64_t)*v62 >> v61) & 1))
          {
            unint64_t v66 = ((unint64_t)(v41 + 63) >> 3) & 0x3FFFFFF8;
            do
            {
              if (!v66)
              {
                int v45 = 0;
                goto LABEL_57;
              }
              unint64_t v67 = *(void *)(*v38 - 8 + v66);
              unint64_t v68 = *(void *)(*v40 - 8 + v66);
              v66 -= 8;
            }
            while (v67 == v68);
            if (v67 > v68) {
              int v45 = 1;
            }
            else {
              int v45 = -1;
            }
          }
          else if (v59)
          {
            int v45 = -1;
          }
          else
          {
            int v45 = 1;
          }
        }
        else
        {
          uint64_t v42 = -v41;
          uint64_t v43 = *v38 << v42 >> v42;
          uint64_t v44 = *v40 << v42 >> v42;
          BOOL v32 = v43 < v44;
          int v45 = v43 > v44;
          if (v32) {
            int v45 = -1;
          }
        }
LABEL_57:
        if (v45 < 0) {
          unsigned int v38 = &__src + 2 * v37;
        }
        ++v37;
      }
      while (v37 != 4);
      unsigned int v46 = (unsigned int *)(v39 + 1);
      if (v45 < 0) {
        unsigned int v46 = (unsigned int *)v118;
      }
      unsigned int v88 = *v46;
      if (v88 > 0x40) {
        operator new[]();
      }
      uint64_t v87 = *v38;
      llvm::APInt::operator+=((uint64_t)&v87, 1uLL);
      unsigned int v47 = v88;
      unsigned int v88 = 0;
      unsigned int v90 = v35;
      uint64_t v89 = v36;
      unsigned int v92 = v47;
      uint64_t v91 = v87;
      llvm::ConstantRange::truncate((uint64_t)&v89, *((_DWORD *)this + 2), (uint64_t)&v83);
      uint64_t result = llvm::ConstantRange::isSizeStrictlySmallerThan((llvm::ConstantRange *)&v93, (const void **)&v83);
      if (result) {
        uint64_t v48 = &v93;
      }
      else {
        uint64_t v48 = (unint64_t *)&v83;
      }
      unint64_t v49 = &v84;
      if (result) {
        unint64_t v49 = &v94;
      }
      unsigned int v50 = *v49;
      *(_DWORD *)(a3 + 8) = v50;
      if (v50 > 0x40) {
        operator new[]();
      }
      *(void *)a3 = *v48;
      if (result) {
        uint64_t v51 = &v93;
      }
      else {
        uint64_t v51 = (unint64_t *)&v83;
      }
      unsigned int v52 = v86;
      if (result) {
        unsigned int v53 = v96;
      }
      else {
        unsigned int v53 = v86;
      }
      *(_DWORD *)(a3 + 24) = v53;
      if (v53 > 0x40) {
        operator new[]();
      }
      *(void *)(a3 + 16) = v51[2];
      if (v52 >= 0x41)
      {
        uint64_t result = v85;
        if (v85) {
          uint64_t result = MEMORY[0x1D25D9CB0](v85, 0x1000C8000313F17);
        }
      }
      if (v84 >= 0x41)
      {
        uint64_t result = v83;
        if (v83) {
          uint64_t result = MEMORY[0x1D25D9CB0](v83, 0x1000C8000313F17);
        }
      }
      if (v92 >= 0x41)
      {
        uint64_t result = v91;
        if (v91) {
          uint64_t result = MEMORY[0x1D25D9CB0](v91, 0x1000C8000313F17);
        }
      }
      if (v90 >= 0x41)
      {
        uint64_t result = v89;
        if (v89) {
          uint64_t result = MEMORY[0x1D25D9CB0](v89, 0x1000C8000313F17);
        }
      }
      for (uint64_t i = 0; i != -64; i -= 16)
      {
        if (*(_DWORD *)&v118[i] >= 0x41u)
        {
          uint64_t result = *(void *)&v117[i];
          if (result) {
            uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
          }
        }
      }
      if (v96 >= 0x41)
      {
        uint64_t result = (uint64_t)v95;
        if (v95) {
          uint64_t result = MEMORY[0x1D25D9CB0](v95, 0x1000C8000313F17);
        }
      }
      goto LABEL_87;
    }
  }
  else if ((unint64_t)a2[2] | (unint64_t)*a2)
  {
    goto LABEL_5;
  }
LABEL_172:

  return (uint64_t)llvm::ConstantRange::ConstantRange((unint64_t *)a3, v6, 0);
}

uint64_t llvm::ConstantRange::udiv@<X0>(const void **this@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    unsigned int v21 = *this;
    if (!memcmp(*this, this[2], ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8))
    {
      int v22 = 0;
      int64_t v23 = (unint64_t)(v6 + 63) >> 6;
      do
      {
        BOOL v24 = v23-- < 1;
        if (v24) {
          break;
        }
        unint64_t v25 = v21[v23];
        v22 += __clz(v25);
      }
      while (!v25);
      int v26 = v6 | 0xFFFFFFC0;
      if ((v6 & 0x3F) == 0) {
        int v26 = 0;
      }
      if (v22 + v26 == v6) {
        goto LABEL_73;
      }
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    goto LABEL_73;
  }
  uint64_t v7 = *((unsigned int *)a2 + 2);
  if (v7 >= 0x41)
  {
    int v27 = *a2;
    if (!memcmp(*a2, a2[2], ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8))
    {
      int v28 = 0;
      int64_t v29 = (unint64_t)(v7 + 63) >> 6;
      do
      {
        BOOL v24 = v29-- < 1;
        if (v24) {
          break;
        }
        unint64_t v30 = v27[v29];
        v28 += __clz(v30);
      }
      while (!v30);
      int v31 = v7 | 0xFFFFFFC0;
      if ((v7 & 0x3F) == 0) {
        int v31 = 0;
      }
      if (v28 + v31 == v7) {
        goto LABEL_73;
      }
    }
  }
  else if (!((unint64_t)a2[2] | (unint64_t)*a2))
  {
    goto LABEL_73;
  }
  llvm::ConstantRange::getUnsignedMax((char **)a2, (uint64_t)&__s1);
  unsigned int v8 = v50;
  if (v50 > 0x40)
  {
    int v36 = 0;
    int64_t v37 = ((unint64_t)v50 + 63) >> 6;
    do
    {
      BOOL v24 = v37-- < 1;
      if (v24) {
        break;
      }
      unint64_t v38 = *((void *)__s1 + v37);
      v36 += __clz(v38);
    }
    while (!v38);
    unsigned int v39 = v50 | 0xFFFFFFC0;
    if ((v50 & 0x3F) == 0) {
      unsigned int v39 = 0;
    }
    int v40 = v36 + v39;
    if (__s1) {
      MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
    }
    if (v40 != v8)
    {
LABEL_7:
      llvm::ConstantRange::getUnsignedMin((uint64_t)this, (uint64_t)&v47);
      llvm::ConstantRange::getUnsignedMax((char **)a2, (uint64_t)&v45);
      llvm::APInt::udiv((uint64_t)&v47, (const llvm::APInt *)&v45, (uint64_t)&__s1);
      if (v46 >= 0x41 && v45) {
        MEMORY[0x1D25D9CB0](v45, 0x1000C8000313F17);
      }
      if (v48 >= 0x41 && v47) {
        MEMORY[0x1D25D9CB0](v47, 0x1000C8000313F17);
      }
      llvm::ConstantRange::getUnsignedMin((uint64_t)a2, (uint64_t)&v47);
      uint64_t v9 = v48;
      if (v48 > 0x40)
      {
        int v32 = 0;
        int64_t v33 = ((unint64_t)v48 + 63) >> 6;
        unsigned int v10 = v47;
        do
        {
          BOOL v24 = v33-- < 1;
          if (v24) {
            break;
          }
          unint64_t v34 = v47[v33];
          v32 += __clz(v34);
        }
        while (!v34);
        unsigned int v35 = v48 | 0xFFFFFFC0;
        if ((v48 & 0x3F) == 0) {
          unsigned int v35 = 0;
        }
        if (v32 + v35 != v48)
        {
LABEL_19:
          llvm::ConstantRange::getUnsignedMax((char **)this, (uint64_t)&v45);
          llvm::APInt::udiv((uint64_t)&v45, (const llvm::APInt *)&v47, (uint64_t)&__s2);
          uint64_t result = llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
          unsigned int v15 = v44;
          unsigned int v16 = __s2;
          unsigned int v44 = 0;
          if (v46 >= 0x41)
          {
            uint64_t result = v45;
            if (v45) {
              uint64_t result = MEMORY[0x1D25D9CB0](v45, 0x1000C8000313F17);
            }
          }
          uint64_t v17 = v50;
          unint64_t v18 = __s1;
          unsigned int v50 = 0;
          if (v17 > 0x40)
          {
            uint64_t result = memcmp(__s1, v16, ((unint64_t)(v17 + 63) >> 3) & 0x3FFFFFF8);
            if (!result)
            {
              *(_DWORD *)(a3 + 8) = v17;
              llvm::APInt::initSlowCase((llvm::APInt *)a3);
            }
          }
          else if (__s1 == v16)
          {
            *(_DWORD *)(a3 + 8) = v17;
            unint64_t v19 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v17;
            if (!v17) {
              unint64_t v19 = 0;
            }
            *(void *)a3 = v19;
            uint64_t result = a3 + 16;
            *(_DWORD *)(a3 + 24) = v17;
            *(void *)(a3 + 16) = v19;
            if (v15 >= 0x41 && v16) {
              uint64_t result = MEMORY[0x1D25D9CB0](v16, 0x1000C8000313F17);
            }
            goto LABEL_26;
          }
          *(_DWORD *)(a3 + 8) = v17;
          *(void *)a3 = v18;
          *(_DWORD *)(a3 + 24) = v15;
          *(void *)(a3 + 16) = v16;
LABEL_26:
          if (v48 >= 0x41)
          {
            uint64_t result = (uint64_t)v47;
            if (v47) {
              uint64_t result = MEMORY[0x1D25D9CB0](v47, 0x1000C8000313F17);
            }
          }
          if (v50 >= 0x41)
          {
            uint64_t result = (uint64_t)__s1;
            if (__s1) {
              return MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
            }
          }
          return result;
        }
      }
      else
      {
        unsigned int v10 = v47;
        if (v47) {
          goto LABEL_19;
        }
      }
      unsigned int v11 = *((_DWORD *)a2 + 6);
      if (v11 >= 0x41)
      {
        uint64_t v41 = v48;
        int v42 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(a2 + 2));
        uint64_t v9 = v41;
        if (v11 - v42 > 0x40) {
          goto LABEL_15;
        }
      }
      unsigned int v12 = a2[2];
      if (v11 < 0x41) {
        unsigned int v12 = a2 + 2;
      }
      if (*v12 == 1)
      {
        if (v9 > 0x40 || (unsigned int v20 = *((_DWORD *)a2 + 2), v20 > 0x40))
        {
          llvm::APInt::assignSlowCase((const llvm::APInt *)&v47, (const llvm::APInt *)a2);
        }
        else
        {
          unsigned int v47 = *a2;
          unsigned int v48 = v20;
        }
      }
      else
      {
LABEL_15:
        if (v9 > 0x40)
        {
          *unsigned int v10 = 1;
          bzero(v10 + 1, (((unint64_t)(v9 + 63) >> 3) - 8) & 0xFFFFFFF8);
        }
        else
        {
          if (v9) {
            unint64_t v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
          }
          else {
            LOBYTE(v13) = 0;
          }
          unsigned int v47 = (void *)(v13 & 1);
        }
      }
      goto LABEL_19;
    }
  }
  else if (__s1)
  {
    goto LABEL_7;
  }
  LODWORD(v6) = *((_DWORD *)this + 2);
LABEL_73:

  return (uint64_t)llvm::ConstantRange::ConstantRange((unint64_t *)a3, v6, 0);
}

uint64_t llvm::ConstantRange::sdiv@<X0>(void **this@<X0>, const llvm::ConstantRange *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6 = *((_DWORD *)this + 2);
  unsigned int v237 = v6;
  if (v6 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v236);
  }
  int64_t v236 = 0;
  unsigned int v235 = v6;
  int v234 = (void *)(1 << (v6 - 1));
  unsigned int v7 = *((_DWORD *)this + 2);
  unsigned int v229 = v7;
  if (v7 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v228);
  }
  if (v7) {
    unint64_t v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
  }
  else {
    LOBYTE(v8) = 0;
  }
  unint64_t v228 = v8 & 1;
  unsigned int v231 = v229;
  uint64_t v230 = v228;
  unsigned int v229 = 0;
  unsigned int v233 = v235;
  uint64_t v232 = (uint64_t)v234;
  if (v237 > 0x40) {
    operator new[]();
  }
  unsigned int v225 = v235;
  uint64_t v224 = (uint64_t)v234;
  unsigned int v227 = v237;
  uint64_t v226 = (uint64_t)v236;
  llvm::ConstantRange::intersectWith((uint64_t)this, (llvm::ConstantRange *)&v230, 0, (uint64_t)&v220);
  llvm::ConstantRange::intersectWith((uint64_t)this, (llvm::ConstantRange *)&v224, 0, (uint64_t)&v216);
  llvm::ConstantRange::intersectWith((uint64_t)a2, (llvm::ConstantRange *)&v230, 0, (uint64_t)&__s1);
  llvm::ConstantRange::intersectWith((uint64_t)a2, (llvm::ConstantRange *)&v224, 0, (uint64_t)&v208);
  unsigned int v9 = *((_DWORD *)this + 2);
  unsigned int v205 = v9;
  if (v9 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v204);
  }
  uint64_t v204 = 0;
  unsigned int v207 = v9;
  uint64_t v206 = 0;
  uint64_t v10 = v221;
  if (v221 >= 0x41)
  {
    unint64_t v50 = v220;
    if (!memcmp((const void *)v220, (const void *)v222, (((unint64_t)v221 + 63) >> 3) & 0x3FFFFFF8))
    {
      int v51 = 0;
      int64_t v52 = (unint64_t)(v10 + 63) >> 6;
      do
      {
        BOOL v122 = v52-- < 1;
        if (v122) {
          break;
        }
        unint64_t v53 = *(void *)(v50 + 8 * v52);
        v51 += __clz(v53);
      }
      while (!v53);
      int v54 = v10 | 0xFFFFFFC0;
      if ((v10 & 0x3F) == 0) {
        int v54 = 0;
      }
      if (v51 + v54 == v10) {
        goto LABEL_40;
      }
    }
  }
  else if (!(v222 | v220))
  {
    goto LABEL_40;
  }
  uint64_t v11 = v213;
  if (v213 < 0x41)
  {
    unsigned int v12 = __src;
    if (!((unint64_t)__src | (unint64_t)__s1)) {
      goto LABEL_40;
    }
    goto LABEL_14;
  }
  unsigned int v60 = __s1;
  unsigned int v12 = __src;
  if (memcmp(__s1, __src, (((unint64_t)v213 + 63) >> 3) & 0x3FFFFFF8)) {
    goto LABEL_14;
  }
  int v61 = 0;
  int64_t v62 = (unint64_t)(v11 + 63) >> 6;
  do
  {
    BOOL v122 = v62-- < 1;
    if (v122) {
      break;
    }
    unint64_t v63 = v60[v62];
    v61 += __clz(v63);
  }
  while (!v63);
  int v64 = v11 | 0xFFFFFFC0;
  if ((v11 & 0x3F) == 0) {
    int v64 = 0;
  }
  if (v61 + v64 != v11)
  {
LABEL_14:
    unsigned int v201 = v215;
    if (v215 > 0x40) {
      operator new[]();
    }
    int64_t v200 = v12;
    llvm::APInt::operator-=((uint64_t)&v200, 1uLL);
    unsigned int v187 = v201;
    int v186 = v200;
    unsigned int v201 = 0;
    llvm::APInt::sdiv((llvm::APInt *)&v220, (const llvm::APInt *)&v186, (uint64_t)&v202);
    unsigned int v197 = v223;
    if (v223 > 0x40) {
      operator new[]();
    }
    unint64_t v196 = v222;
    llvm::APInt::operator-=((uint64_t)&v196, 1uLL);
    unsigned int v183 = v197;
    unint64_t v182 = (void *)v196;
    unsigned int v197 = 0;
    llvm::APInt::sdiv((llvm::APInt *)&v182, (const llvm::APInt *)&__s1, (uint64_t)&v198);
    llvm::APInt::operator+=((uint64_t)&v198, 1uLL);
    unsigned int v13 = v199;
    uint64_t v14 = v198;
    unsigned int v199 = 0;
    unsigned int v15 = v203;
    unsigned int v16 = v202;
    unsigned int v203 = 0;
    if (v205 >= 0x41 && v204) {
      MEMORY[0x1D25D9CB0](v204, 0x1000C8000313F17);
    }
    uint64_t v204 = v16;
    unsigned int v205 = v15;
    if (v207 >= 0x41 && v206) {
      MEMORY[0x1D25D9CB0](v206, 0x1000C8000313F17);
    }
    uint64_t v206 = v14;
    unsigned int v207 = v13;
    if (v199 >= 0x41 && v198) {
      MEMORY[0x1D25D9CB0](v198, 0x1000C8000313F17);
    }
    if (v183 >= 0x41 && v182) {
      MEMORY[0x1D25D9CB0](v182, 0x1000C8000313F17);
    }
    if (v197 >= 0x41 && v196) {
      MEMORY[0x1D25D9CB0](v196, 0x1000C8000313F17);
    }
    if (v203 >= 0x41 && v202) {
      MEMORY[0x1D25D9CB0](v202, 0x1000C8000313F17);
    }
    if (v187 >= 0x41 && v186) {
      MEMORY[0x1D25D9CB0](v186, 0x1000C8000313F17);
    }
    if (v201 >= 0x41 && v200) {
      MEMORY[0x1D25D9CB0](v200, 0x1000C8000313F17);
    }
  }
LABEL_40:
  uint64_t v17 = v217;
  if (v217 >= 0x41)
  {
    unint64_t v55 = v216;
    unint64_t v18 = v218;
    if (!memcmp((const void *)v216, (const void *)v218, (((unint64_t)v217 + 63) >> 3) & 0x3FFFFFF8))
    {
      int v56 = 0;
      int64_t v57 = (unint64_t)(v17 + 63) >> 6;
      do
      {
        BOOL v122 = v57-- < 1;
        if (v122) {
          break;
        }
        unint64_t v58 = *(void *)(v55 + 8 * v57);
        v56 += __clz(v58);
      }
      while (!v58);
      int v59 = v17 | 0xFFFFFFC0;
      if ((v17 & 0x3F) == 0) {
        int v59 = 0;
      }
      if (v56 + v59 == v17) {
        goto LABEL_239;
      }
    }
  }
  else
  {
    unint64_t v18 = v218;
    if (!(v218 | v216)) {
      goto LABEL_239;
    }
  }
  uint64_t v19 = v209;
  if (v209 < 0x41)
  {
    if (!((unint64_t)v210 | (unint64_t)v208)) {
      goto LABEL_239;
    }
LABEL_44:
    unsigned int v195 = v219;
    if (v219 > 0x40) {
      operator new[]();
    }
    uint64_t v194 = (void *)v18;
    llvm::APInt::operator-=((uint64_t)&v194, 1uLL);
    unsigned int v187 = v195;
    int v186 = v194;
    unsigned int v195 = 0;
    llvm::APInt::sdiv((llvm::APInt *)&v186, (const llvm::APInt *)&v208, (uint64_t)&v150);
    if (v187 >= 0x41 && v186) {
      MEMORY[0x1D25D9CB0](v186, 0x1000C8000313F17);
    }
    if (v195 >= 0x41 && v194) {
      MEMORY[0x1D25D9CB0](v194, 0x1000C8000313F17);
    }
    if (v217 > 0x40)
    {
      if (((*(void *)(v216 + 8 * ((v217 - 1) >> 6)) >> (v217 - 1)) & 1) == 0) {
        goto LABEL_219;
      }
      unsigned int v70 = v217 - 1;
      if (llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v216) != v70) {
        goto LABEL_219;
      }
    }
    else if (v216 != 1 << (v217 - 1))
    {
      goto LABEL_219;
    }
    unsigned int v20 = v211;
    if (v211 > 0x40)
    {
      int v22 = 0;
      int64_t v23 = ((unint64_t)v211 + 63) >> 6;
      unsigned int v21 = v210;
      do
      {
        BOOL v122 = v23-- < 1;
        if (v122) {
          break;
        }
        unint64_t v24 = *((void *)v210 + v23);
        v22 += __clz(v24);
      }
      while (!v24);
      unsigned int v25 = v211 | 0xFFFFFFC0;
      if ((v211 & 0x3F) == 0) {
        unsigned int v25 = 0;
      }
      if (v22 + v25 == v211)
      {
LABEL_64:
        unsigned int v26 = v209;
        if (!v209) {
          goto LABEL_104;
        }
        if (v209 > 0x40)
        {
          if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v208) == v26) {
            goto LABEL_104;
          }
        }
        else if (v208 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v209))
        {
          goto LABEL_104;
        }
        unsigned int v193 = 1;
        __dst = 0;
        unsigned int v27 = *((_DWORD *)a2 + 2);
        if (v27)
        {
          if (v27 > 0x40)
          {
            if (llvm::APInt::countTrailingOnesSlowCase(a2) != v27) {
              goto LABEL_72;
            }
          }
          else if (*(void *)a2 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v27)
          {
LABEL_72:
            unsigned int v191 = v20;
            if (v20 > 0x40) {
              operator new[]();
            }
            unsigned int v190 = v21;
            llvm::APInt::operator-=((uint64_t)&v190, 1uLL);
            unsigned int v28 = v191;
            int64_t v29 = v190;
            unsigned int v191 = 0;
            goto LABEL_80;
          }
        }
        unsigned int v28 = *((_DWORD *)a2 + 6);
        if (v28 > 0x40)
        {
          llvm::APInt::reallocate((uint64_t)&__dst, *((_DWORD *)a2 + 6));
          unsigned int v28 = v193;
          if (v193 <= 0x40)
          {
            int64_t v29 = (void *)*((void *)a2 + 2);
            __dst = v29;
          }
          else
          {
            int64_t v29 = __dst;
            memcpy(__dst, *((const void **)a2 + 2), (((unint64_t)v193 + 63) >> 3) & 0x3FFFFFF8);
          }
          goto LABEL_81;
        }
        int64_t v29 = (void *)*((void *)a2 + 2);
LABEL_80:
        __dst = v29;
        unsigned int v193 = v28;
LABEL_81:
        unsigned int v30 = v151;
        if (v151 > 0x40) {
          operator new[]();
        }
        int v31 = v150;
        unsigned int v177 = v28;
        if (v28 > 0x40) {
          operator new[]();
        }
        int64_t v176 = v29;
        llvm::APInt::operator-=((uint64_t)&v176, 1uLL);
        unsigned int v179 = v177;
        int v178 = v176;
        unsigned int v177 = 0;
        llvm::APInt::sdiv((llvm::APInt *)&v216, (const llvm::APInt *)&v178, (uint64_t)&v180);
        llvm::APInt::operator+=((uint64_t)&v180, 1uLL);
        unsigned int v32 = v181;
        unsigned int v181 = 0;
        unsigned int v183 = v30;
        unint64_t v182 = v31;
        unsigned int v185 = v32;
        uint64_t v184 = v180;
        llvm::ConstantRange::unionWith((uint64_t)&v204, (unsigned int *)&v182, 0, (uint64_t)&v186);
        if (v205 >= 0x41 && v204) {
          MEMORY[0x1D25D9CB0](v204, 0x1000C8000313F17);
        }
        uint64_t v204 = v186;
        unsigned int v205 = v187;
        unsigned int v187 = 0;
        if (v207 >= 0x41 && v206) {
          MEMORY[0x1D25D9CB0](v206, 0x1000C8000313F17);
        }
        uint64_t v206 = v188;
        unsigned int v207 = v189;
        unsigned int v189 = 0;
        if (v187 >= 0x41 && v186) {
          MEMORY[0x1D25D9CB0](v186, 0x1000C8000313F17);
        }
        if (v185 >= 0x41 && v184) {
          MEMORY[0x1D25D9CB0](v184, 0x1000C8000313F17);
        }
        if (v183 >= 0x41 && v182) {
          MEMORY[0x1D25D9CB0](v182, 0x1000C8000313F17);
        }
        if (v181 >= 0x41 && v180) {
          MEMORY[0x1D25D9CB0](v180, 0x1000C8000313F17);
        }
        if (v179 >= 0x41 && v178) {
          MEMORY[0x1D25D9CB0](v178, 0x1000C8000313F17);
        }
        if (v177 >= 0x41 && v176) {
          MEMORY[0x1D25D9CB0](v176, 0x1000C8000313F17);
        }
        if (v193 >= 0x41 && __dst) {
          MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
        }
LABEL_104:
        unsigned int v175 = v235;
        if (v235 > 0x40) {
          operator new[]();
        }
        int64_t v33 = v234;
        __s2 = v234;
        llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
        unsigned int v34 = v175;
        unsigned int v35 = __s2;
        unsigned int v175 = 0;
        if (v219 > 0x40) {
          BOOL v36 = memcmp((const void *)v218, __s2, (((unint64_t)v219 + 63) >> 3) & 0x3FFFFFF8) == 0;
        }
        else {
          BOOL v36 = v218 == (void)__s2;
        }
        char v37 = v36;
        if (v34 >= 0x41)
        {
          if (v35)
          {
            MEMORY[0x1D25D9CB0](v35, 0x1000C8000313F17);
            if (v175 >= 0x41)
            {
              if (__s2) {
                MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
              }
            }
          }
        }
        if (v37) {
          goto LABEL_236;
        }
        unsigned int v193 = 1;
        __dst = 0;
        unsigned int v173 = v235;
        if (v235 > 0x40) {
          operator new[]();
        }
        unsigned int v172 = v33;
        llvm::APInt::operator+=((uint64_t)&v172, 1uLL);
        unsigned int v38 = v173;
        unsigned int v39 = v172;
        unsigned int v173 = 0;
        uint64_t v40 = *((unsigned int *)this + 6);
        if (v40 > 0x40) {
          BOOL v41 = memcmp(this[2], v172, ((unint64_t)(v40 + 63) >> 3) & 0x3FFFFFF8) == 0;
        }
        else {
          BOOL v41 = this[2] == v172;
        }
        int v42 = v41;
        if (v38 >= 0x41)
        {
          if (v39)
          {
            MEMORY[0x1D25D9CB0](v39, 0x1000C8000313F17);
            if (v173 >= 0x41)
            {
              if (v172) {
                MEMORY[0x1D25D9CB0](v172, 0x1000C8000313F17);
              }
            }
          }
        }
        if (v42)
        {
          if (v193 > 0x40 || (unsigned int v43 = *((_DWORD *)this + 2), v43 > 0x40))
          {
            if (&__dst != this)
            {
              llvm::APInt::reallocate((uint64_t)&__dst, *((_DWORD *)this + 2));
              if (v193 <= 0x40) {
                __dst = *this;
              }
              else {
                memcpy(__dst, *this, (((unint64_t)v193 + 63) >> 3) & 0x3FFFFFF8);
              }
            }
          }
          else
          {
            __dst = *this;
            unsigned int v193 = v43;
          }
        }
        else
        {
          unsigned int v171 = v217;
          if (v217 > 0x40) {
            operator new[]();
          }
          unsigned int v170 = (unint64_t *)v216;
          llvm::APInt::operator+=((uint64_t)&v170, 1uLL);
          unsigned int v44 = v171;
          uint64_t v45 = v170;
          unsigned int v171 = 0;
          if (v193 > 0x40 && __dst)
          {
            MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
            __dst = v45;
            unsigned int v193 = v44;
            if (v171 >= 0x41 && v170) {
              MEMORY[0x1D25D9CB0](v170, 0x1000C8000313F17);
            }
          }
          else
          {
            __dst = v170;
            unsigned int v193 = v44;
          }
        }
        unsigned int v46 = v151;
        unsigned int v47 = v150;
        unsigned int v151 = 0;
        unsigned int v167 = v211;
        if (v211 > 0x40) {
          operator new[]();
        }
        unsigned int v166 = v210;
        llvm::APInt::operator-=((uint64_t)&v166, 1uLL);
        unsigned int v179 = v167;
        int v178 = v166;
        unsigned int v167 = 0;
        llvm::APInt::sdiv((llvm::APInt *)&__dst, (const llvm::APInt *)&v178, (uint64_t)&v168);
        llvm::APInt::operator+=((uint64_t)&v168, 1uLL);
        unsigned int v48 = v169;
        unsigned int v169 = 0;
        unsigned int v183 = v46;
        unint64_t v182 = v47;
        unsigned int v185 = v48;
        uint64_t v184 = v168;
        llvm::ConstantRange::unionWith((uint64_t)&v204, (unsigned int *)&v182, 0, (uint64_t)&v186);
        if (v205 >= 0x41 && v204) {
          MEMORY[0x1D25D9CB0](v204, 0x1000C8000313F17);
        }
        uint64_t v204 = v186;
        unsigned int v205 = v187;
        unsigned int v187 = 0;
        if (v207 >= 0x41 && v206) {
          MEMORY[0x1D25D9CB0](v206, 0x1000C8000313F17);
        }
        uint64_t v206 = v188;
        unsigned int v207 = v189;
        unsigned int v189 = 0;
        if (v187 >= 0x41 && v186) {
          MEMORY[0x1D25D9CB0](v186, 0x1000C8000313F17);
        }
        if (v185 >= 0x41 && v184) {
          MEMORY[0x1D25D9CB0](v184, 0x1000C8000313F17);
        }
        if (v183 >= 0x41 && v182) {
          MEMORY[0x1D25D9CB0](v182, 0x1000C8000313F17);
        }
        if (v169 >= 0x41 && v168) {
          MEMORY[0x1D25D9CB0](v168, 0x1000C8000313F17);
        }
        if (v179 >= 0x41 && v178) {
          MEMORY[0x1D25D9CB0](v178, 0x1000C8000313F17);
        }
        if (v167 >= 0x41 && v166) {
          MEMORY[0x1D25D9CB0](v166, 0x1000C8000313F17);
        }
        if (v193 < 0x41) {
          goto LABEL_236;
        }
        unint64_t v49 = __dst;
        if (!__dst) {
          goto LABEL_236;
        }
        goto LABEL_235;
      }
    }
    else if (!v210)
    {
      unsigned int v21 = 0;
      goto LABEL_64;
    }
LABEL_219:
    unsigned int v71 = v151;
    unint64_t v72 = v150;
    unsigned int v151 = 0;
    unsigned int v163 = v211;
    if (v211 > 0x40) {
      operator new[]();
    }
    uint64_t v162 = v210;
    llvm::APInt::operator-=((uint64_t)&v162, 1uLL);
    unsigned int v193 = v163;
    __dst = v162;
    unsigned int v163 = 0;
    llvm::APInt::sdiv((llvm::APInt *)&v216, (const llvm::APInt *)&__dst, (uint64_t)&v164);
    llvm::APInt::operator+=((uint64_t)&v164, 1uLL);
    unsigned int v73 = v165;
    unsigned int v165 = 0;
    unsigned int v183 = v71;
    unint64_t v182 = v72;
    unsigned int v185 = v73;
    uint64_t v184 = v164;
    llvm::ConstantRange::unionWith((uint64_t)&v204, (unsigned int *)&v182, 0, (uint64_t)&v186);
    if (v205 >= 0x41 && v204) {
      MEMORY[0x1D25D9CB0](v204, 0x1000C8000313F17);
    }
    uint64_t v204 = v186;
    unsigned int v205 = v187;
    unsigned int v187 = 0;
    if (v207 >= 0x41 && v206) {
      MEMORY[0x1D25D9CB0](v206, 0x1000C8000313F17);
    }
    uint64_t v206 = v188;
    unsigned int v207 = v189;
    unsigned int v189 = 0;
    if (v187 >= 0x41 && v186) {
      MEMORY[0x1D25D9CB0](v186, 0x1000C8000313F17);
    }
    if (v185 >= 0x41 && v184) {
      MEMORY[0x1D25D9CB0](v184, 0x1000C8000313F17);
    }
    if (v183 >= 0x41 && v182) {
      MEMORY[0x1D25D9CB0](v182, 0x1000C8000313F17);
    }
    if (v165 >= 0x41 && v164) {
      MEMORY[0x1D25D9CB0](v164, 0x1000C8000313F17);
    }
    if (v193 >= 0x41 && __dst) {
      MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
    }
    if (v163 < 0x41) {
      goto LABEL_236;
    }
    unint64_t v49 = v162;
    if (!v162) {
      goto LABEL_236;
    }
LABEL_235:
    MEMORY[0x1D25D9CB0](v49, 0x1000C8000313F17);
LABEL_236:
    if (v151 >= 0x41 && v150) {
      MEMORY[0x1D25D9CB0](v150, 0x1000C8000313F17);
    }
    goto LABEL_239;
  }
  unint64_t v65 = v208;
  if (memcmp(v208, v210, (((unint64_t)v209 + 63) >> 3) & 0x3FFFFFF8)) {
    goto LABEL_44;
  }
  int v66 = 0;
  int64_t v67 = (unint64_t)(v19 + 63) >> 6;
  do
  {
    BOOL v122 = v67-- < 1;
    if (v122) {
      break;
    }
    unint64_t v68 = v65[v67];
    v66 += __clz(v68);
  }
  while (!v68);
  int v69 = v19 | 0xFFFFFFC0;
  if ((v19 & 0x3F) == 0) {
    int v69 = 0;
  }
  if (v66 + v69 != v19) {
    goto LABEL_44;
  }
LABEL_239:
  unsigned int v74 = *((_DWORD *)this + 2);
  unsigned int v187 = v74;
  if (v74 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v186);
  }
  int v186 = 0;
  unsigned int v189 = v74;
  uint64_t v188 = 0;
  uint64_t v75 = v221;
  if (v221 >= 0x41)
  {
    unint64_t v93 = v220;
    unint64_t v76 = v222;
    if (!memcmp((const void *)v220, (const void *)v222, (((unint64_t)v221 + 63) >> 3) & 0x3FFFFFF8))
    {
      int v94 = 0;
      int64_t v95 = (unint64_t)(v75 + 63) >> 6;
      do
      {
        BOOL v122 = v95-- < 1;
        if (v122) {
          break;
        }
        unint64_t v96 = *(void *)(v93 + 8 * v95);
        v94 += __clz(v96);
      }
      while (!v96);
      int v97 = v75 | 0xFFFFFFC0;
      if ((v75 & 0x3F) == 0) {
        int v97 = 0;
      }
      if (v94 + v97 == v75) {
        goto LABEL_270;
      }
    }
  }
  else
  {
    unint64_t v76 = v222;
    if (!(v222 | v220)) {
      goto LABEL_270;
    }
  }
  uint64_t v77 = v209;
  if (v209 < 0x41)
  {
    if (!((unint64_t)v210 | (unint64_t)v208)) {
      goto LABEL_270;
    }
    goto LABEL_244;
  }
  uint64_t v103 = v208;
  if (memcmp(v208, v210, (((unint64_t)v209 + 63) >> 3) & 0x3FFFFFF8)) {
    goto LABEL_244;
  }
  int v104 = 0;
  int64_t v105 = (unint64_t)(v77 + 63) >> 6;
  do
  {
    BOOL v122 = v105-- < 1;
    if (v122) {
      break;
    }
    unint64_t v106 = v103[v105];
    v104 += __clz(v106);
  }
  while (!v106);
  int v107 = v77 | 0xFFFFFFC0;
  if ((v77 & 0x3F) == 0) {
    int v107 = 0;
  }
  if (v104 + v107 != v77)
  {
LABEL_244:
    unsigned int v159 = v223;
    if (v223 > 0x40) {
      operator new[]();
    }
    int v158 = (void *)v76;
    llvm::APInt::operator-=((uint64_t)&v158, 1uLL);
    unsigned int v183 = v159;
    unint64_t v182 = v158;
    unsigned int v159 = 0;
    unsigned int v157 = v211;
    if (v211 > 0x40) {
      operator new[]();
    }
    unsigned int v156 = v210;
    llvm::APInt::operator-=((uint64_t)&v156, 1uLL);
    unsigned int v151 = v157;
    uint64_t v150 = v156;
    unsigned int v157 = 0;
    llvm::APInt::sdiv((llvm::APInt *)&v182, (const llvm::APInt *)&v150, (uint64_t)&v160);
    llvm::APInt::sdiv((llvm::APInt *)&v220, (const llvm::APInt *)&v208, (uint64_t)&v154);
    llvm::APInt::operator+=((uint64_t)&v154, 1uLL);
    unsigned int v78 = v155;
    uint64_t v79 = v154;
    unsigned int v155 = 0;
    unsigned int v80 = v161;
    unint64_t v81 = v160;
    unsigned int v161 = 0;
    if (v187 >= 0x41 && v186) {
      MEMORY[0x1D25D9CB0](v186, 0x1000C8000313F17);
    }
    int v186 = v81;
    unsigned int v187 = v80;
    if (v189 >= 0x41 && v188) {
      MEMORY[0x1D25D9CB0](v188, 0x1000C8000313F17);
    }
    uint64_t v188 = v79;
    unsigned int v189 = v78;
    if (v155 >= 0x41 && v154) {
      MEMORY[0x1D25D9CB0](v154, 0x1000C8000313F17);
    }
    if (v161 >= 0x41 && v160) {
      MEMORY[0x1D25D9CB0](v160, 0x1000C8000313F17);
    }
    if (v151 >= 0x41 && v150) {
      MEMORY[0x1D25D9CB0](v150, 0x1000C8000313F17);
    }
    if (v157 >= 0x41 && v156) {
      MEMORY[0x1D25D9CB0](v156, 0x1000C8000313F17);
    }
    if (v183 >= 0x41 && v182) {
      MEMORY[0x1D25D9CB0](v182, 0x1000C8000313F17);
    }
    if (v159 >= 0x41 && v158) {
      MEMORY[0x1D25D9CB0](v158, 0x1000C8000313F17);
    }
  }
LABEL_270:
  uint64_t v82 = v217;
  if (v217 >= 0x41)
  {
    unint64_t v98 = v216;
    if (!memcmp((const void *)v216, (const void *)v218, (((unint64_t)v217 + 63) >> 3) & 0x3FFFFFF8))
    {
      int v99 = 0;
      int64_t v100 = (unint64_t)(v82 + 63) >> 6;
      do
      {
        BOOL v122 = v100-- < 1;
        if (v122) {
          break;
        }
        unint64_t v101 = *(void *)(v98 + 8 * v100);
        v99 += __clz(v101);
      }
      while (!v101);
      int v102 = v82 | 0xFFFFFFC0;
      if ((v82 & 0x3F) == 0) {
        int v102 = 0;
      }
      if (v99 + v102 == v82) {
        goto LABEL_303;
      }
    }
  }
  else if (!(v218 | v216))
  {
    goto LABEL_303;
  }
  uint64_t v83 = v213;
  if (v213 < 0x41)
  {
    if (!((unint64_t)__src | (unint64_t)__s1)) {
      goto LABEL_303;
    }
    goto LABEL_274;
  }
  unsigned int v108 = __s1;
  if (memcmp(__s1, __src, (((unint64_t)v213 + 63) >> 3) & 0x3FFFFFF8)) {
    goto LABEL_274;
  }
  int v109 = 0;
  int64_t v110 = (unint64_t)(v83 + 63) >> 6;
  do
  {
    BOOL v122 = v110-- < 1;
    if (v122) {
      break;
    }
    unint64_t v111 = v108[v110];
    v109 += __clz(v111);
  }
  while (!v111);
  int v112 = v83 | 0xFFFFFFC0;
  if ((v83 & 0x3F) == 0) {
    int v112 = 0;
  }
  if (v109 + v112 != v83)
  {
LABEL_274:
    llvm::APInt::sdiv((llvm::APInt *)&v216, (const llvm::APInt *)&__s1, (uint64_t)&v148);
    unsigned int v145 = v219;
    if (v219 > 0x40) {
      operator new[]();
    }
    uint64_t v144 = (void *)v218;
    llvm::APInt::operator-=((uint64_t)&v144, 1uLL);
    unsigned int v193 = v145;
    __dst = v144;
    unsigned int v145 = 0;
    unsigned int v143 = v215;
    if (v215 > 0x40) {
      operator new[]();
    }
    uint64_t v142 = __src;
    llvm::APInt::operator-=((uint64_t)&v142, 1uLL);
    unsigned int v179 = v143;
    int v178 = v142;
    unsigned int v143 = 0;
    llvm::APInt::sdiv((llvm::APInt *)&__dst, (const llvm::APInt *)&v178, (uint64_t)&v146);
    llvm::APInt::operator+=((uint64_t)&v146, 1uLL);
    unsigned int v84 = v147;
    unsigned int v147 = 0;
    unsigned int v151 = v149;
    uint64_t v150 = v148;
    unsigned int v149 = 0;
    unsigned int v153 = v84;
    uint64_t v152 = v146;
    llvm::ConstantRange::unionWith((uint64_t)&v186, (unsigned int *)&v150, 0, (uint64_t)&v182);
    if (v187 >= 0x41 && v186) {
      MEMORY[0x1D25D9CB0](v186, 0x1000C8000313F17);
    }
    int v186 = v182;
    unsigned int v187 = v183;
    unsigned int v183 = 0;
    if (v189 >= 0x41 && v188) {
      MEMORY[0x1D25D9CB0](v188, 0x1000C8000313F17);
    }
    uint64_t v188 = v184;
    unsigned int v189 = v185;
    unsigned int v185 = 0;
    if (v183 >= 0x41 && v182) {
      MEMORY[0x1D25D9CB0](v182, 0x1000C8000313F17);
    }
    if (v153 >= 0x41 && v152) {
      MEMORY[0x1D25D9CB0](v152, 0x1000C8000313F17);
    }
    if (v151 >= 0x41 && v150) {
      MEMORY[0x1D25D9CB0](v150, 0x1000C8000313F17);
    }
    if (v147 >= 0x41 && v146) {
      MEMORY[0x1D25D9CB0](v146, 0x1000C8000313F17);
    }
    if (v179 >= 0x41 && v178) {
      MEMORY[0x1D25D9CB0](v178, 0x1000C8000313F17);
    }
    if (v143 >= 0x41 && v142) {
      MEMORY[0x1D25D9CB0](v142, 0x1000C8000313F17);
    }
    if (v193 >= 0x41 && __dst) {
      MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
    }
    if (v145 >= 0x41 && v144) {
      MEMORY[0x1D25D9CB0](v144, 0x1000C8000313F17);
    }
    if (v149 >= 0x41 && v148) {
      MEMORY[0x1D25D9CB0](v148, 0x1000C8000313F17);
    }
  }
LABEL_303:
  uint64_t result = llvm::ConstantRange::unionWith((uint64_t)&v186, (unsigned int *)&v204, 2, a3);
  uint64_t v86 = *((unsigned int *)this + 2);
  if (v86 > 0x40)
  {
    uint64_t v128 = (char *)*this;
    unsigned int v88 = (char *)this[2];
    uint64_t result = memcmp(*this, v88, ((unint64_t)(v86 + 63) >> 3) & 0x3FFFFFF8);
    if (result)
    {
      unint64_t v129 = 8 * ((unint64_t)(v86 + 63) >> 6);
      unint64_t v130 = v128 - 8;
      unint64_t v131 = v129;
      while (v131)
      {
        unint64_t v132 = *(void *)&v130[v131];
        unint64_t v133 = *(void *)&v88[v131 - 8];
        v131 -= 8;
        if (v132 != v133)
        {
          BOOL v134 = v132 > v133;
          goto LABEL_455;
        }
      }
      BOOL v134 = 0;
LABEL_455:
      uint64_t v89 = v236;
      while (v129)
      {
        unint64_t v135 = *(void *)&v130[v129];
        unint64_t v136 = *(void *)&v236[v129 - 8];
        v129 -= 8;
        if (v135 != v136)
        {
          BOOL v90 = v135 <= v136;
          if (!v134) {
            goto LABEL_306;
          }
          goto LABEL_459;
        }
      }
      if (!v134) {
        goto LABEL_307;
      }
    }
    else
    {
      uint64_t result = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)this);
      if (result != v86) {
        goto LABEL_321;
      }
    }
  }
  else
  {
    uint64_t v87 = (char *)*this;
    unsigned int v88 = (char *)this[2];
    if (*this == v88)
    {
      if (v86 && v87 != (char *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v86)) {
        goto LABEL_321;
      }
    }
    else
    {
      uint64_t v89 = v236;
      BOOL v90 = v87 <= v236;
      if (v87 > v88)
      {
LABEL_459:
        if (v90) {
          goto LABEL_309;
        }
        if (v237 > 0x40)
        {
          unint64_t v137 = (((unint64_t)v237 + 63) >> 3) & 0x3FFFFFF8;
          int64_t v138 = v89 - 8;
          while (v137)
          {
            unint64_t v139 = *(void *)&v138[v137];
            unint64_t v140 = *(void *)&v88[v137 - 8];
            v137 -= 8;
            BOOL v122 = v139 > v140;
            if (v139 != v140)
            {
LABEL_419:
              if (v122) {
                goto LABEL_321;
              }
              goto LABEL_309;
            }
          }
          goto LABEL_321;
        }
      }
      else
      {
LABEL_306:
        if (!v90) {
          goto LABEL_321;
        }
LABEL_307:
        if (v237 > 0x40)
        {
          unint64_t v118 = (((unint64_t)v237 + 63) >> 3) & 0x3FFFFFF8;
          uint64_t v119 = v89 - 8;
          while (v118)
          {
            unint64_t v120 = *(void *)&v119[v118];
            unint64_t v121 = *(void *)&v88[v118 - 8];
            v118 -= 8;
            BOOL v122 = v120 > v121;
            if (v120 != v121) {
              goto LABEL_419;
            }
          }
          goto LABEL_321;
        }
      }
      if (v89 >= v88) {
        goto LABEL_321;
      }
    }
  }
LABEL_309:
  uint64_t v91 = v213;
  if (v213 >= 0x41)
  {
    BOOL v113 = __s1;
    uint64_t result = memcmp(__s1, __src, (((unint64_t)v213 + 63) >> 3) & 0x3FFFFFF8);
    if (result) {
      goto LABEL_313;
    }
    int v114 = 0;
    int64_t v115 = (unint64_t)(v91 + 63) >> 6;
    do
    {
      BOOL v122 = v115-- < 1;
      if (v122) {
        break;
      }
      unint64_t v116 = v113[v115];
      v114 += __clz(v116);
    }
    while (!v116);
    int v117 = v91 | 0xFFFFFFC0;
    if ((v91 & 0x3F) == 0) {
      int v117 = 0;
    }
    if (v114 + v117 != v91) {
      goto LABEL_313;
    }
  }
  else if ((unint64_t)__src | (unint64_t)__s1)
  {
    goto LABEL_313;
  }
  uint64_t v92 = v209;
  if (v209 < 0x41)
  {
    if (!((unint64_t)v210 | (unint64_t)v208)) {
      goto LABEL_321;
    }
    goto LABEL_313;
  }
  uint64_t v123 = v208;
  uint64_t result = memcmp(v208, v210, (((unint64_t)v209 + 63) >> 3) & 0x3FFFFFF8);
  if (result) {
    goto LABEL_313;
  }
  int v124 = 0;
  int64_t v125 = (unint64_t)(v92 + 63) >> 6;
  do
  {
    BOOL v122 = v125-- < 1;
    if (v122) {
      break;
    }
    unint64_t v126 = v123[v125];
    v124 += __clz(v126);
  }
  while (!v126);
  int v127 = v92 | 0xFFFFFFC0;
  if ((v92 & 0x3F) == 0) {
    int v127 = 0;
  }
  if (v124 + v127 != v92)
  {
LABEL_313:
    if (v237 > 0x40) {
      operator new[]();
    }
    unsigned int v151 = v237;
    uint64_t v150 = v236;
    unsigned int v183 = v237;
    unint64_t v182 = v236;
    llvm::APInt::operator+=((uint64_t)&v182, 1uLL);
    unsigned int v153 = v183;
    uint64_t v152 = (uint64_t)v182;
    uint64_t result = llvm::ConstantRange::unionWith(a3, (unsigned int *)&v150, 0, (uint64_t)&v182);
    if (*(_DWORD *)(a3 + 8) >= 0x41u)
    {
      uint64_t result = *(void *)a3;
      if (*(void *)a3) {
        uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
      }
    }
    *(void *)a3 = v182;
    *(_DWORD *)(a3 + 8) = v183;
    unsigned int v183 = 0;
    if (*(_DWORD *)(a3 + 24) >= 0x41u && (uint64_t result = *(void *)(a3 + 16)) != 0)
    {
      uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
      unsigned int v141 = v183;
      *(void *)(a3 + 16) = v184;
      *(_DWORD *)(a3 + 24) = v185;
      unsigned int v185 = 0;
      if (v141 >= 0x41)
      {
        uint64_t result = (uint64_t)v182;
        if (v182) {
          uint64_t result = MEMORY[0x1D25D9CB0](v182, 0x1000C8000313F17);
        }
      }
    }
    else
    {
      *(void *)(a3 + 16) = v184;
      *(_DWORD *)(a3 + 24) = v185;
      unsigned int v185 = 0;
    }
    if (v153 >= 0x41)
    {
      uint64_t result = v152;
      if (v152) {
        uint64_t result = MEMORY[0x1D25D9CB0](v152, 0x1000C8000313F17);
      }
    }
    if (v151 >= 0x41)
    {
      uint64_t result = (uint64_t)v150;
      if (v150) {
        uint64_t result = MEMORY[0x1D25D9CB0](v150, 0x1000C8000313F17);
      }
    }
  }
LABEL_321:
  if (v189 >= 0x41)
  {
    uint64_t result = v188;
    if (v188) {
      uint64_t result = MEMORY[0x1D25D9CB0](v188, 0x1000C8000313F17);
    }
  }
  if (v187 >= 0x41)
  {
    uint64_t result = (uint64_t)v186;
    if (v186) {
      uint64_t result = MEMORY[0x1D25D9CB0](v186, 0x1000C8000313F17);
    }
  }
  if (v207 >= 0x41)
  {
    uint64_t result = v206;
    if (v206) {
      uint64_t result = MEMORY[0x1D25D9CB0](v206, 0x1000C8000313F17);
    }
  }
  if (v205 >= 0x41)
  {
    uint64_t result = (uint64_t)v204;
    if (v204) {
      uint64_t result = MEMORY[0x1D25D9CB0](v204, 0x1000C8000313F17);
    }
  }
  if (v211 >= 0x41)
  {
    uint64_t result = (uint64_t)v210;
    if (v210) {
      uint64_t result = MEMORY[0x1D25D9CB0](v210, 0x1000C8000313F17);
    }
  }
  if (v209 >= 0x41)
  {
    uint64_t result = (uint64_t)v208;
    if (v208) {
      uint64_t result = MEMORY[0x1D25D9CB0](v208, 0x1000C8000313F17);
    }
  }
  if (v215 >= 0x41)
  {
    uint64_t result = (uint64_t)__src;
    if (__src) {
      uint64_t result = MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
    }
  }
  if (v213 >= 0x41)
  {
    uint64_t result = (uint64_t)__s1;
    if (__s1) {
      uint64_t result = MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
    }
  }
  if (v219 >= 0x41)
  {
    uint64_t result = v218;
    if (v218) {
      uint64_t result = MEMORY[0x1D25D9CB0](v218, 0x1000C8000313F17);
    }
  }
  if (v217 >= 0x41)
  {
    uint64_t result = v216;
    if (v216) {
      uint64_t result = MEMORY[0x1D25D9CB0](v216, 0x1000C8000313F17);
    }
  }
  if (v223 >= 0x41)
  {
    uint64_t result = v222;
    if (v222) {
      uint64_t result = MEMORY[0x1D25D9CB0](v222, 0x1000C8000313F17);
    }
  }
  if (v221 >= 0x41)
  {
    uint64_t result = v220;
    if (v220) {
      uint64_t result = MEMORY[0x1D25D9CB0](v220, 0x1000C8000313F17);
    }
  }
  if (v227 >= 0x41)
  {
    uint64_t result = v226;
    if (v226) {
      uint64_t result = MEMORY[0x1D25D9CB0](v226, 0x1000C8000313F17);
    }
  }
  if (v225 >= 0x41)
  {
    uint64_t result = v224;
    if (v224) {
      uint64_t result = MEMORY[0x1D25D9CB0](v224, 0x1000C8000313F17);
    }
  }
  if (v233 >= 0x41)
  {
    uint64_t result = v232;
    if (v232) {
      uint64_t result = MEMORY[0x1D25D9CB0](v232, 0x1000C8000313F17);
    }
  }
  if (v231 >= 0x41)
  {
    uint64_t result = v230;
    if (v230) {
      uint64_t result = MEMORY[0x1D25D9CB0](v230, 0x1000C8000313F17);
    }
  }
  if (v235 >= 0x41)
  {
    uint64_t result = (uint64_t)v234;
    if (v234) {
      uint64_t result = MEMORY[0x1D25D9CB0](v234, 0x1000C8000313F17);
    }
  }
  if (v237 >= 0x41)
  {
    uint64_t result = (uint64_t)v236;
    if (v236) {
      return MEMORY[0x1D25D9CB0](v236, 0x1000C8000313F17);
    }
  }
  return result;
}

unint64_t *llvm::ConstantRange::urem@<X0>(llvm::ConstantRange *this@<X0>, const llvm::ConstantRange *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    uint64_t v40 = *(void **)this;
    if (!memcmp(*(const void **)this, *((const void **)this + 2), ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8))
    {
      int v41 = 0;
      int64_t v42 = (unint64_t)(v6 + 63) >> 6;
      do
      {
        BOOL v43 = v42-- < 1;
        if (v43) {
          break;
        }
        unint64_t v44 = v40[v42];
        v41 += __clz(v44);
      }
      while (!v44);
      int v45 = v6 | 0xFFFFFFC0;
      if ((v6 & 0x3F) == 0) {
        int v45 = 0;
      }
      if (v41 + v45 == v6) {
        goto LABEL_115;
      }
    }
  }
  else if (!(*((void *)this + 2) | *(void *)this))
  {
    goto LABEL_115;
  }
  uint64_t v7 = *((unsigned int *)a2 + 2);
  if (v7 < 0x41)
  {
    if (*((void *)a2 + 2) | *(void *)a2) {
      goto LABEL_5;
    }
LABEL_115:
    return llvm::ConstantRange::ConstantRange((unint64_t *)a3, v6, 0);
  }
  uint64_t v46 = *(void *)a2;
  if (!memcmp(*(const void **)a2, *((const void **)a2 + 2), ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8))
  {
    int v47 = 0;
    int64_t v48 = (unint64_t)(v7 + 63) >> 6;
    do
    {
      BOOL v43 = v48-- < 1;
      if (v43) {
        break;
      }
      unint64_t v49 = *(void *)(v46 + 8 * v48);
      v47 += __clz(v49);
    }
    while (!v49);
    int v50 = v7 | 0xFFFFFFC0;
    if ((v7 & 0x3F) == 0) {
      int v50 = 0;
    }
    if (v47 + v50 == v7) {
      goto LABEL_115;
    }
  }
LABEL_5:
  llvm::ConstantRange::getUnsignedMax((char **)a2, (uint64_t)&__s2);
  unsigned int v8 = v71;
  if (v71 <= 0x40)
  {
    if (__s2) {
      goto LABEL_7;
    }
    goto LABEL_114;
  }
  int v59 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__s2);
  if (__s2) {
    MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
  }
  if (v59 == v8)
  {
LABEL_114:
    LODWORD(v6) = *((_DWORD *)this + 2);
    goto LABEL_115;
  }
LABEL_7:
  unsigned int v71 = *((_DWORD *)a2 + 2);
  if (v71 > 0x40) {
    operator new[]();
  }
  __s2 = *(void **)a2;
  llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  unsigned int v9 = v71;
  uint64_t v10 = __s2;
  unsigned int v71 = 0;
  uint64_t v11 = *((unsigned int *)a2 + 6);
  if (v11 > 0x40) {
    BOOL v12 = memcmp(*((const void **)a2 + 2), __s2, ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8) == 0;
  }
  else {
    BOOL v12 = *((void *)a2 + 2) == (void)__s2;
  }
  int v13 = v12;
  if (v9 >= 0x41)
  {
    if (v10)
    {
      MEMORY[0x1D25D9CB0](v10, 0x1000C8000313F17);
      if (v71 >= 0x41)
      {
        if (__s2) {
          MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
        }
      }
    }
  }
  uint64_t v14 = (const void **)((char *)this + 16);
  if (v13)
  {
    unsigned int v32 = *((_DWORD *)a2 + 2);
    if (v32 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(a2) != v32)
      {
LABEL_49:
        unsigned int v71 = *((_DWORD *)this + 2);
        if (v71 > 0x40) {
          operator new[]();
        }
        __s2 = *(void **)this;
        llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
        unsigned int v33 = v71;
        unsigned int v34 = __s2;
        unsigned int v71 = 0;
        uint64_t v35 = *((unsigned int *)this + 6);
        if (v35 > 0x40) {
          BOOL v36 = memcmp(*v14, __s2, ((unint64_t)(v35 + 63) >> 3) & 0x3FFFFFF8) == 0;
        }
        else {
          BOOL v36 = *v14 == __s2;
        }
        int v37 = v36;
        if (v33 >= 0x41)
        {
          if (v34)
          {
            MEMORY[0x1D25D9CB0](v34, 0x1000C8000313F17);
            if (v71 >= 0x41)
            {
              if (__s2) {
                MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
              }
            }
          }
        }
        if (v37)
        {
          llvm::APInt::urem(this, a2, (uint64_t)&v68);
          unsigned int v38 = v69;
          *(_DWORD *)(a3 + 8) = v69;
          unsigned int v39 = v68;
          *(void *)a3 = v68;
          unsigned int v69 = 0;
          unsigned int v71 = v38;
          if (v38 > 0x40) {
            operator new[]();
          }
          __s2 = v39;
          uint64_t result = (unint64_t *)llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
          *(_DWORD *)(a3 + 24) = v71;
          *(void *)(a3 + 16) = __s2;
          if (v69 >= 0x41)
          {
            uint64_t result = v68;
            if (v68) {
              return (unint64_t *)MEMORY[0x1D25D9CB0](v68, 0x1000C8000313F17);
            }
          }
          return result;
        }
        goto LABEL_15;
      }
    }
    else if (*(void *)a2)
    {
      goto LABEL_49;
    }
    return llvm::ConstantRange::ConstantRange((unint64_t *)a3, *((_DWORD *)this + 2), 0);
  }
LABEL_15:
  llvm::ConstantRange::getUnsignedMax((char **)this, (uint64_t)&__s2);
  llvm::ConstantRange::getUnsignedMin((uint64_t)a2, (uint64_t)&v66);
  unsigned int v15 = v71;
  if (v71 > 0x40)
  {
    unsigned int v16 = __s2;
    unint64_t v17 = v66;
    unint64_t v51 = (((unint64_t)v71 + 63) >> 3) & 0x3FFFFFF8;
    do
    {
      if (!v51)
      {
        int v18 = 0;
        goto LABEL_19;
      }
      unint64_t v52 = *(void *)((char *)__s2 + v51 - 8);
      unint64_t v53 = *(void *)(v66 + v51 - 8);
      v51 -= 8;
    }
    while (v52 == v53);
    if (v52 > v53) {
      int v18 = 1;
    }
    else {
      int v18 = -1;
    }
  }
  else
  {
    unsigned int v16 = __s2;
    unint64_t v17 = v66;
    if ((unint64_t)__s2 < v66) {
      int v18 = -1;
    }
    else {
      int v18 = (unint64_t)__s2 > v66;
    }
  }
LABEL_19:
  if (v67 >= 0x41 && v17 != 0) {
    MEMORY[0x1D25D9CB0]();
  }
  if (v15 >= 0x41 && v16) {
    MEMORY[0x1D25D9CB0](v16, 0x1000C8000313F17);
  }
  if (v18 < 0)
  {
    unsigned int v57 = *((_DWORD *)this + 2);
    *(_DWORD *)(a3 + 8) = v57;
    if (v57 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)a3, this);
    }
    *(void *)a3 = *(void *)this;
    uint64_t result = (unint64_t *)(a3 + 16);
    unsigned int v58 = *((_DWORD *)this + 6);
    *(_DWORD *)(a3 + 24) = v58;
    if (v58 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)result, (llvm::ConstantRange *)((char *)this + 16));
    }
    *uint64_t result = (unint64_t)*v14;
  }
  else
  {
    llvm::ConstantRange::getUnsignedMax((char **)this, (uint64_t)&__s2);
    llvm::ConstantRange::getUnsignedMax((char **)a2, (uint64_t)&v62);
    llvm::APInt::operator-=((uint64_t)&v62, 1uLL);
    unsigned int v20 = v63;
    unsigned int v21 = v62;
    unsigned int v63 = 0;
    unsigned int v22 = v71;
    if (v71 > 0x40)
    {
      int64_t v23 = (unint64_t *)__s2;
      unint64_t v54 = (((unint64_t)v71 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v54)
        {
          int v24 = 0;
          goto LABEL_30;
        }
        unint64_t v55 = *(void *)((char *)__s2 + v54 - 8);
        unint64_t v56 = *(unint64_t *)((char *)v62 + v54 - 8);
        v54 -= 8;
      }
      while (v55 == v56);
      if (v55 > v56) {
        int v24 = 1;
      }
      else {
        int v24 = -1;
      }
    }
    else
    {
      int64_t v23 = (unint64_t *)__s2;
      if (__s2 < v62) {
        int v24 = -1;
      }
      else {
        int v24 = __s2 > v62;
      }
    }
LABEL_30:
    if (v24 >= 0) {
      unsigned int v25 = v20;
    }
    else {
      unsigned int v25 = v71;
    }
    unsigned int v65 = v25;
    if (v25 > 0x40) {
      operator new[]();
    }
    if (v24 >= 0) {
      unsigned int v26 = v62;
    }
    else {
      unsigned int v26 = v23;
    }
    int v64 = v26;
    uint64_t result = (unint64_t *)llvm::APInt::operator+=((uint64_t)&v64, 1uLL);
    unsigned int v28 = v65;
    int64_t v29 = v64;
    unsigned int v65 = 0;
    if (v20 >= 0x41 && v21) {
      uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v21, 0x1000C8000313F17);
    }
    if (v63 >= 0x41)
    {
      uint64_t result = v62;
      if (v62) {
        uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v62, 0x1000C8000313F17);
      }
    }
    if (v22 >= 0x41 && v23) {
      uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v23, 0x1000C8000313F17);
    }
    unsigned int v30 = *((_DWORD *)this + 2);
    unsigned int v61 = v30;
    if (v30 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&__s1);
    }
    __s1 = 0;
    if (v29)
    {
      *(_DWORD *)(a3 + 8) = v30;
      *(void *)a3 = 0;
      *(_DWORD *)(a3 + 24) = v28;
      *(void *)(a3 + 16) = v29;
    }
    else
    {
      *(_DWORD *)(a3 + 8) = v30;
      if (v30) {
        unint64_t v31 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v30;
      }
      else {
        unint64_t v31 = 0;
      }
      *(void *)a3 = v31;
      uint64_t result = (unint64_t *)(a3 + 16);
      *(_DWORD *)(a3 + 24) = v30;
      *(void *)(a3 + 16) = v31;
    }
  }
  return result;
}

unint64_t *llvm::ConstantRange::srem@<X0>(llvm::ConstantRange *this@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    if (!memcmp(*(const void **)this, *((const void **)this + 2), ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase(this) == v6)
    {
      goto LABEL_114;
    }
  }
  else if (!(*((void *)this + 2) | *(void *)this))
  {
    goto LABEL_114;
  }
  uint64_t v7 = *((unsigned int *)a2 + 2);
  if (v7 >= 0x41)
  {
    if (memcmp(*a2, a2[2], ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8)
      || llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a2) != v7)
    {
      unsigned int v110 = v7;
      operator new[]();
    }
    goto LABEL_114;
  }
  unsigned int v8 = (char *)*a2;
  if (!((unint64_t)a2[2] | (unint64_t)*a2))
  {
LABEL_114:
    return llvm::ConstantRange::ConstantRange((unint64_t *)a3, v6, 0);
  }
  unsigned int v110 = *((_DWORD *)a2 + 2);
  int v109 = v8;
  llvm::APInt::operator+=((uint64_t)&v109, 1uLL);
  unsigned int v9 = v110;
  uint64_t v10 = v109;
  unsigned int v110 = 0;
  uint64_t v11 = *((unsigned int *)a2 + 6);
  if (v11 > 0x40) {
    BOOL v12 = memcmp(a2[2], v109, ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8) == 0;
  }
  else {
    BOOL v12 = a2[2] == v109;
  }
  int v13 = v12;
  if (v9 >= 0x41)
  {
    if (v10)
    {
      MEMORY[0x1D25D9CB0](v10, 0x1000C8000313F17);
      if (v110 >= 0x41)
      {
        if (v109) {
          MEMORY[0x1D25D9CB0](v109, 0x1000C8000313F17);
        }
      }
    }
  }
  if (!v13)
  {
LABEL_12:
    llvm::ConstantRange::abs((llvm::ConstantRange *)a2, 0, (uint64_t)&v109);
    llvm::ConstantRange::getUnsignedMin((uint64_t)&v109, (uint64_t)&v107);
    llvm::ConstantRange::getUnsignedMax(&v109, (uint64_t)&v105);
    unsigned int v14 = v106;
    if (v106 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v105) != v14)
      {
LABEL_14:
        unsigned int v15 = v108;
        if (v108 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v107) != v15)
          {
LABEL_17:
            llvm::ConstantRange::getSignedMin((uint64_t)this, (uint64_t)&v103);
            llvm::ConstantRange::getSignedMax(this, (uint64_t)&v101);
            uint64_t v16 = v104;
            unint64_t v17 = v103;
            int v18 = &v103[(v104 - 1) >> 6];
            if (v104 < 0x41) {
              int v18 = (unint64_t *)&v103;
            }
            uint64_t v19 = v102;
            if ((*v18 >> (v104 - 1)))
            {
              unint64_t v20 = v101;
              unsigned int v21 = (unint64_t *)(v101 + 8 * ((v102 - 1) >> 6));
              if (v102 < 0x41) {
                unsigned int v21 = &v101;
              }
              if ((*v21 >> (v102 - 1)))
              {
                unsigned int v75 = v104;
                unsigned int v76 = v102;
                unsigned int v92 = v108;
                if (v108 > 0x40) {
                  operator new[]();
                }
                uint64_t v91 = v107;
                sub_1CBA14940((uint64_t)&v91);
                llvm::APInt::operator++((uint64_t)&v91);
                unsigned int v65 = v92;
                unsigned int v94 = v92;
                unint64_t v66 = v91;
                unint64_t v93 = v91;
                unsigned int v92 = 0;
                int v67 = llvm::APInt::compare((llvm::APInt *)&v103, (const llvm::APInt *)&v93);
                int v68 = v67;
                if (v65 >= 0x41)
                {
                  if (v66)
                  {
                    MEMORY[0x1D25D9CB0](v66, 0x1000C8000313F17);
                    if (v92 >= 0x41)
                    {
                      if (v91) {
                        MEMORY[0x1D25D9CB0](v91, 0x1000C8000313F17);
                      }
                    }
                  }
                }
                if (v68 < 1)
                {
                  unsigned int v88 = v14;
                  if (v14 > 0x40) {
                    operator new[]();
                  }
                  uint64_t v87 = v105;
                  sub_1CBA14940((uint64_t)&v87);
                  llvm::APInt::operator++((uint64_t)&v87);
                  unsigned int v90 = v88;
                  uint64_t v89 = v87;
                  unsigned int v88 = 0;
                  llvm::APInt::operator+=((uint64_t)&v89, 1uLL);
                  unsigned int v69 = v90;
                  unsigned int v94 = v90;
                  unsigned int v70 = v89;
                  unint64_t v93 = v89;
                  unsigned int v90 = 0;
                  int v71 = llvm::APInt::compare((llvm::APInt *)&v103, (const llvm::APInt *)&v93);
                  if (v71 <= 0) {
                    unint64_t v72 = &v93;
                  }
                  else {
                    unint64_t v72 = &v103;
                  }
                  if (v71 <= 0) {
                    unsigned int v73 = v69;
                  }
                  else {
                    unsigned int v73 = v75;
                  }
                  if (v73 > 0x40) {
                    operator new[]();
                  }
                  unsigned int v74 = *v72;
                  if (v69 >= 0x41 && v70) {
                    MEMORY[0x1D25D9CB0](v70, 0x1000C8000313F17);
                  }
                  if (v90 >= 0x41 && v89) {
                    MEMORY[0x1D25D9CB0](v89, 0x1000C8000313F17);
                  }
                  if (v88 >= 0x41 && v87) {
                    MEMORY[0x1D25D9CB0](v87, 0x1000C8000313F17);
                  }
                  uint64_t result = (unint64_t *)sub_1CB8F1EEC((uint64_t)&v85, *((_DWORD *)this + 2), 1);
                  *(_DWORD *)(a3 + 8) = v73;
                  *(void *)a3 = v74;
                  *(_DWORD *)(a3 + 24) = v86;
                  *(void *)(a3 + 16) = v85;
                  int v86 = 0;
                }
                else
                {
                  uint64_t result = (unint64_t *)sub_1CC067C7C(a3, (uint64_t)this);
                }
                LODWORD(v16) = v75;
                LODWORD(v19) = v76;
              }
              else
              {
                unsigned int v82 = v14;
                if (v14 > 0x40) {
                  operator new[]();
                }
                unsigned int v22 = v105;
                if (v14) {
                  unint64_t v23 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v14;
                }
                else {
                  unint64_t v23 = 0;
                }
                unint64_t v81 = v23 & ~(unint64_t)v105;
                llvm::APInt::operator++((uint64_t)&v81);
                unsigned int v84 = v82;
                unint64_t v83 = v81;
                unsigned int v82 = 0;
                llvm::APInt::operator+=((uint64_t)&v83, 1uLL);
                unsigned int v24 = v84;
                unsigned int v84 = 0;
                if (v16 > 0x40)
                {
                  unint64_t v42 = ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8;
                  do
                  {
                    if (!v42)
                    {
                      int v25 = 0;
                      goto LABEL_29;
                    }
                    unint64_t v43 = *(unint64_t *)((char *)v17 + v42 - 8);
                    unint64_t v44 = *(void *)(v83 - 8 + v42);
                    v42 -= 8;
                  }
                  while (v43 == v44);
                  if (v43 > v44) {
                    int v25 = 1;
                  }
                  else {
                    int v25 = -1;
                  }
                }
                else
                {
                  int v25 = v83 < (unint64_t)v17;
                  if (v83 > (unint64_t)v17) {
                    int v25 = -1;
                  }
                }
LABEL_29:
                if (v25 <= 0) {
                  unsigned int v26 = v24;
                }
                else {
                  unsigned int v26 = v16;
                }
                if (v26 > 0x40) {
                  operator new[]();
                }
                if (v25 <= 0) {
                  unint64_t v27 = v83;
                }
                else {
                  unint64_t v27 = (unint64_t)v17;
                }
                if (v24 >= 0x41 && v83) {
                  MEMORY[0x1D25D9CB0](v83, 0x1000C8000313F17);
                }
                if (v84 >= 0x41 && v83) {
                  MEMORY[0x1D25D9CB0](v83, 0x1000C8000313F17);
                }
                if (v82 >= 0x41 && v81) {
                  MEMORY[0x1D25D9CB0](v81, 0x1000C8000313F17);
                }
                unsigned int v78 = v14;
                uint64_t v77 = v22;
                llvm::APInt::operator-=((uint64_t)&v77, 1uLL);
                unsigned int v28 = v78;
                int64_t v29 = v77;
                unsigned int v78 = 0;
                if (v19 > 0x40)
                {
                  unint64_t v45 = ((unint64_t)(v19 + 63) >> 3) & 0x3FFFFFF8;
                  do
                  {
                    if (!v45)
                    {
                      BOOL v31 = 0;
                      unsigned int v30 = v28;
                      goto LABEL_42;
                    }
                    unint64_t v46 = *(void *)(v20 - 8 + v45);
                    unint64_t v47 = *(unint64_t *)((char *)v77 + v45 - 8);
                    v45 -= 8;
                  }
                  while (v46 == v47);
                  BOOL v31 = v46 <= v47;
                  unsigned int v30 = v28;
                  if (v46 <= v47) {
                    goto LABEL_41;
                  }
                }
                else
                {
                  unsigned int v30 = v28;
                  BOOL v31 = (unint64_t)v77 > v20;
                  if ((unint64_t)v77 > v20) {
LABEL_41:
                  }
                    unsigned int v30 = v19;
                }
LABEL_42:
                unsigned int v80 = v30;
                if (v30 > 0x40) {
                  operator new[]();
                }
                if (v31) {
                  unsigned int v32 = (unint64_t *)v20;
                }
                else {
                  unsigned int v32 = v77;
                }
                uint64_t v79 = v32;
                uint64_t result = (unint64_t *)llvm::APInt::operator+=((uint64_t)&v79, 1uLL);
                unsigned int v34 = v80;
                uint64_t v35 = v79;
                unsigned int v80 = 0;
                if (v28 >= 0x41 && v29)
                {
                  int64_t v62 = v29;
                  unsigned int v63 = v79;
                  uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v62, 0x1000C8000313F17);
                  uint64_t v35 = v63;
                }
                if (v78 >= 0x41)
                {
                  uint64_t result = v77;
                  if (v77)
                  {
                    int v64 = v35;
                    uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v77, 0x1000C8000313F17);
                    uint64_t v35 = v64;
                  }
                }
                *(_DWORD *)(a3 + 8) = v26;
                *(void *)a3 = v27;
                *(_DWORD *)(a3 + 24) = v34;
                *(void *)(a3 + 16) = v35;
              }
              goto LABEL_49;
            }
            if (v102 > 0x40)
            {
              unint64_t v20 = v101;
              unint64_t v48 = (((unint64_t)v102 + 63) >> 3) & 0x3FFFFFF8;
              while (v48)
              {
                unint64_t v49 = *(void *)(v101 + v48 - 8);
                unint64_t v50 = *(unint64_t *)((char *)v107 + v48 - 8);
                v48 -= 8;
                if (v49 != v50)
                {
                  if (v49 <= v50) {
                    goto LABEL_72;
                  }
                  break;
                }
              }
            }
            else
            {
              unint64_t v20 = v101;
              if (v101 < (unint64_t)v107)
              {
LABEL_72:
                uint64_t result = (unint64_t *)sub_1CC067C7C(a3, (uint64_t)this);
LABEL_49:
                if (v19 >= 0x41 && v20)
                {
                  uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v20, 0x1000C8000313F17);
                  LODWORD(v16) = v104;
                }
                if (v16 >= 0x41)
                {
                  uint64_t result = v103;
                  if (v103) {
                    uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v103, 0x1000C8000313F17);
                  }
                }
                unsigned int v14 = v106;
LABEL_52:
                if (v14 >= 0x41)
                {
                  uint64_t result = v105;
                  if (v105) {
                    uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v105, 0x1000C8000313F17);
                  }
                }
                if (v108 >= 0x41)
                {
                  uint64_t result = v107;
                  if (v107) {
                    uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v107, 0x1000C8000313F17);
                  }
                }
                if (v112 >= 0x41)
                {
                  uint64_t result = v111;
                  if (v111) {
                    uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v111, 0x1000C8000313F17);
                  }
                }
                if (v110 >= 0x41)
                {
                  uint64_t result = (unint64_t *)v109;
                  if (v109) {
                    return (unint64_t *)MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
                  }
                }
                return result;
              }
            }
            unsigned int v98 = v14;
            if (v14 > 0x40) {
              operator new[]();
            }
            int v97 = v105;
            llvm::APInt::operator-=((uint64_t)&v97, 1uLL);
            unsigned int v51 = v98;
            unint64_t v52 = v97;
            unsigned int v98 = 0;
            if (v19 > 0x40)
            {
              unint64_t v59 = ((unint64_t)(v19 + 63) >> 3) & 0x3FFFFFF8;
              do
              {
                if (!v59)
                {
                  int v53 = 0;
                  goto LABEL_102;
                }
                unint64_t v60 = *(void *)(v20 - 8 + v59);
                unint64_t v61 = *(unint64_t *)((char *)v97 + v59 - 8);
                v59 -= 8;
              }
              while (v60 == v61);
              if (v60 > v61) {
                int v53 = 1;
              }
              else {
                int v53 = -1;
              }
            }
            else if (v20 < (unint64_t)v97)
            {
              int v53 = -1;
            }
            else
            {
              int v53 = v20 > (unint64_t)v97;
            }
LABEL_102:
            if (v53 >= 0) {
              unsigned int v54 = v51;
            }
            else {
              unsigned int v54 = v19;
            }
            unsigned int v100 = v54;
            if (v54 > 0x40) {
              operator new[]();
            }
            if (v53 >= 0) {
              unint64_t v55 = v97;
            }
            else {
              unint64_t v55 = (unint64_t *)v20;
            }
            int v99 = v55;
            uint64_t result = (unint64_t *)llvm::APInt::operator+=((uint64_t)&v99, 1uLL);
            unsigned int v56 = v100;
            unsigned int v57 = v99;
            unsigned int v100 = 0;
            if (v51 >= 0x41 && v52) {
              uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v52, 0x1000C8000313F17);
            }
            if (v98 >= 0x41)
            {
              uint64_t result = v97;
              if (v97) {
                uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v97, 0x1000C8000313F17);
              }
            }
            unsigned int v58 = *((_DWORD *)this + 2);
            unsigned int v96 = v58;
            if (v58 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)&v95);
            }
            uint64_t v95 = 0;
            *(_DWORD *)(a3 + 8) = v58;
            *(void *)a3 = 0;
            unsigned int v96 = 0;
            *(_DWORD *)(a3 + 24) = v56;
            *(void *)(a3 + 16) = v57;
            goto LABEL_49;
          }
        }
        else if (v107)
        {
          goto LABEL_17;
        }
        llvm::APInt::operator++((uint64_t)&v107);
        goto LABEL_17;
      }
    }
    else if (v105)
    {
      goto LABEL_14;
    }
    uint64_t result = llvm::ConstantRange::ConstantRange((unint64_t *)a3, *((_DWORD *)this + 2), 0);
    goto LABEL_52;
  }
  unsigned int v36 = *((_DWORD *)a2 + 2);
  if (v36 <= 0x40)
  {
    if (*a2) {
      goto LABEL_59;
    }
    return llvm::ConstantRange::ConstantRange((unint64_t *)a3, *((_DWORD *)this + 2), 0);
  }
  if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a2) == v36) {
    return llvm::ConstantRange::ConstantRange((unint64_t *)a3, *((_DWORD *)this + 2), 0);
  }
LABEL_59:
  unsigned int v110 = *((_DWORD *)this + 2);
  if (v110 > 0x40) {
    operator new[]();
  }
  int v109 = *(char **)this;
  llvm::APInt::operator+=((uint64_t)&v109, 1uLL);
  unsigned int v37 = v110;
  unsigned int v38 = v109;
  unsigned int v110 = 0;
  uint64_t v39 = *((unsigned int *)this + 6);
  if (v39 > 0x40) {
    BOOL v40 = memcmp(*((const void **)this + 2), v109, ((unint64_t)(v39 + 63) >> 3) & 0x3FFFFFF8) == 0;
  }
  else {
    BOOL v40 = *((void *)this + 2) == (void)v109;
  }
  int v41 = v40;
  if (v37 >= 0x41)
  {
    if (v38)
    {
      MEMORY[0x1D25D9CB0](v38, 0x1000C8000313F17);
      if (v110 >= 0x41)
      {
        if (v109) {
          MEMORY[0x1D25D9CB0](v109, 0x1000C8000313F17);
        }
      }
    }
  }
  if (!v41) {
    goto LABEL_12;
  }
  llvm::APInt::srem(this, (const llvm::APInt *)a2, (uint64_t)&v113);
  uint64_t result = (unint64_t *)llvm::ConstantRange::ConstantRange((uint64_t *)a3, (uint64_t *)&v113);
  if (v114 >= 0x41)
  {
    uint64_t result = v113;
    if (v113) {
      return (unint64_t *)MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t llvm::ConstantRange::shl@<X0>(const void **this@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    int64_t v62 = *this;
    if (!memcmp(*this, this[2], ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8))
    {
      int v63 = 0;
      int64_t v64 = (unint64_t)(v6 + 63) >> 6;
      do
      {
        BOOL v65 = v64-- < 1;
        if (v65) {
          break;
        }
        unint64_t v66 = v62[v64];
        v63 += __clz(v66);
      }
      while (!v66);
      int v67 = v6 | 0xFFFFFFC0;
      if ((v6 & 0x3F) == 0) {
        int v67 = 0;
      }
      if (v63 + v67 == v6) {
        goto LABEL_111;
      }
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    goto LABEL_111;
  }
  uint64_t v7 = *((unsigned int *)a2 + 2);
  if (v7 >= 0x41)
  {
    int v68 = *a2;
    if (memcmp(*a2, a2[2], ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8)) {
      goto LABEL_5;
    }
    int v69 = 0;
    int64_t v70 = (unint64_t)(v7 + 63) >> 6;
    do
    {
      BOOL v65 = v70-- < 1;
      if (v65) {
        break;
      }
      unint64_t v71 = v68[v70];
      v69 += __clz(v71);
    }
    while (!v71);
    int v72 = v7 | 0xFFFFFFC0;
    if ((v7 & 0x3F) == 0) {
      int v72 = 0;
    }
    if (v69 + v72 != v7)
    {
LABEL_5:
      llvm::ConstantRange::getUnsignedMin((uint64_t)this, (uint64_t)&v139);
      llvm::ConstantRange::getUnsignedMax((char **)this, (uint64_t)&v137);
      unsigned int v142 = *((_DWORD *)a2 + 2);
      if (v142 > 0x40) {
        operator new[]();
      }
      unsigned int v141 = (void *)*a2;
      llvm::APInt::operator+=((uint64_t)&v141, 1uLL);
      unsigned int v8 = v142;
      unsigned int v9 = v141;
      unsigned int v142 = 0;
      uint64_t v10 = *((unsigned int *)a2 + 6);
      if (v10 > 0x40) {
        BOOL v11 = memcmp(a2[2], v141, ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8) == 0;
      }
      else {
        BOOL v11 = a2[2] == v141;
      }
      int v12 = v11;
      if (v8 >= 0x41)
      {
        if (v9)
        {
          MEMORY[0x1D25D9CB0](v9, 0x1000C8000313F17);
          if (v142 >= 0x41)
          {
            if (v141) {
              MEMORY[0x1D25D9CB0](v141, 0x1000C8000313F17);
            }
          }
        }
      }
      if (v12)
      {
        unint64_t v13 = *((unsigned int *)this + 2);
        unsigned int v14 = *((_DWORD *)a2 + 2);
        unsigned int v15 = a2;
        if (v14 >= 0x41)
        {
          if (v14 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a2) > 0x40) {
            goto LABEL_175;
          }
          unsigned int v15 = (const void **)*a2;
        }
        if ((unint64_t)*v15 < v13)
        {
          unint64_t v16 = v140;
          unsigned int v136 = v140;
          if (v140 > 0x40) {
            operator new[]();
          }
          uint64_t v17 = v139;
          unint64_t v135 = v137 ^ v139;
          unsigned int v136 = 0;
          unsigned int v18 = v140 + __clz(v137 ^ v139) - 64;
          unsigned int v19 = *((_DWORD *)a2 + 2);
          unint64_t v20 = a2;
          if (v19 >= 0x41)
          {
            uint64_t v91 = v139;
            unsigned int v92 = *((_DWORD *)a2 + 2);
            int v93 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a2);
            unsigned int v19 = v92;
            if (v92 - v93 > 0x40)
            {
LABEL_18:
              unsigned int v130 = v13;
              if (v13 > 0x40) {
                llvm::APInt::initSlowCase((llvm::APInt *)&__s1);
              }
              __s1 = 0;
              if (v19 >= 0x41) {
                a2 = (const void **)*a2;
              }
              unsigned int v21 = *a2;
              unsigned int v128 = v13;
              __s2 = 0;
              if (v13 != v21)
              {
                if (v21 > 0x3F) {
                  llvm::APInt::setBitsSlowCase(&__s2, v21, v13);
                }
                else {
                  __s2 = (void *)((unint64_t)__s2 | (0xFFFFFFFFFFFFFFFFLL >> (v21
                }
                                                                                   - v13) << (char)v21));
              }
              uint64_t result = llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
              unsigned int v23 = v128;
              unsigned int v24 = __s2;
              unsigned int v128 = 0;
              LODWORD(v25) = v130;
              if (v130 > 0x40)
              {
                unsigned int v26 = __s1;
                uint64_t result = memcmp(__s1, __s2, (((unint64_t)v130 + 63) >> 3) & 0x3FFFFFF8);
                if (!result)
                {
                  *(_DWORD *)(a3 + 8) = v25;
                  llvm::APInt::initSlowCase((llvm::APInt *)a3);
                }
              }
              else
              {
                unsigned int v26 = __s1;
                if (__s1 == __s2)
                {
                  *(_DWORD *)(a3 + 8) = v130;
                  if (v25) {
                    unint64_t v39 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v25;
                  }
                  else {
                    unint64_t v39 = 0;
                  }
                  *(void *)a3 = v39;
                  uint64_t result = a3 + 16;
                  *(_DWORD *)(a3 + 24) = v25;
                  *(void *)(a3 + 16) = v39;
                  if (v23 >= 0x41 && v24) {
                    uint64_t result = MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
                  }
LABEL_50:
                  if (v128 < 0x41) {
                    goto LABEL_57;
                  }
                  uint64_t result = (uint64_t)__s2;
                  if (!__s2) {
                    goto LABEL_57;
                  }
                  goto LABEL_190;
                }
              }
              unsigned int v130 = 0;
              *(_DWORD *)(a3 + 8) = v25;
              *(void *)a3 = v26;
              *(_DWORD *)(a3 + 24) = v23;
              *(void *)(a3 + 16) = v24;
              LODWORD(v25) = 0;
              goto LABEL_50;
            }
            uint64_t v17 = v91;
            unint64_t v20 = (const void **)*a2;
          }
          if ((unint64_t)*v20 > v18) {
            goto LABEL_18;
          }
          unsigned int v134 = v16;
          if (v16 > 0x40) {
            operator new[]();
          }
          int v27 = v16;
          unint64_t v133 = (void *)v17;
          if (v19 >= 0x41)
          {
            int v73 = 0;
            int64_t v74 = ((unint64_t)v19 + 63) >> 6;
            unsigned int v75 = (const void **)*a2;
            do
            {
              BOOL v65 = v74-- < 1;
              if (v65) {
                break;
              }
              unint64_t v76 = (unint64_t)v75[v74];
              v73 += __clz(v76);
            }
            while (!v76);
            unsigned int v77 = v19 | 0xFFFFFFC0;
            if ((v19 & 0x3F) == 0) {
              unsigned int v77 = 0;
            }
            if (v19 - v73 - v77 > 0x40)
            {
LABEL_32:
              uint64_t v29 = v17 << v27;
              if (!v16 || v16 == v27)
              {
                if (v16 == v27) {
                  uint64_t v29 = 0;
                }
                if (!v16)
                {
                  unint64_t v31 = 0;
LABEL_36:
                  unint64_t v133 = (void *)(v31 & v29);
                  unsigned int v132 = v138;
                  if (v138 > 0x40) {
                    operator new[]();
                  }
                  unint64_t v131 = (void *)v137;
                  unsigned int v32 = v138;
                  uint64_t v33 = *((unsigned int *)a2 + 2);
                  if (v33 >= 0x41)
                  {
                    int v78 = 0;
                    int64_t v79 = (unint64_t)(v33 + 63) >> 6;
                    unsigned int v80 = (const void **)*a2;
                    do
                    {
                      BOOL v65 = v79-- < 1;
                      if (v65) {
                        break;
                      }
                      unint64_t v81 = (unint64_t)v80[v79];
                      v78 += __clz(v81);
                    }
                    while (!v81);
                    int v82 = v33 | 0xFFFFFFC0;
                    if ((v33 & 0x3F) == 0) {
                      int v82 = 0;
                    }
                    if ((v33 - v78 - v82) > 0x40)
                    {
LABEL_41:
                      unint64_t v35 = v137 << v32;
                      if (v138 && v138 != v32) {
                        goto LABEL_43;
                      }
                      if (v138 == v32) {
                        unint64_t v35 = 0;
                      }
                      if (v138) {
LABEL_43:
                      }
                        unint64_t v36 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v138;
                      else {
                        unint64_t v36 = 0;
                      }
                      unint64_t v131 = (void *)(v36 & v35);
                      uint64_t result = llvm::APInt::operator+=((uint64_t)&v131, 1uLL);
                      unsigned int v37 = v132;
                      unsigned int v38 = v131;
                      unsigned int v132 = 0;
                      LODWORD(v25) = v134;
                      if (v134 > 0x40)
                      {
                        unsigned int v26 = v133;
                        uint64_t result = memcmp(v133, v131, (((unint64_t)v134 + 63) >> 3) & 0x3FFFFFF8);
                        if (!result)
                        {
                          *(_DWORD *)(a3 + 8) = v25;
                          llvm::APInt::initSlowCase((llvm::APInt *)a3);
                        }
                      }
                      else
                      {
                        unsigned int v26 = v133;
                        if (v133 == v131)
                        {
                          *(_DWORD *)(a3 + 8) = v134;
                          if (v25) {
                            unint64_t v40 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v25;
                          }
                          else {
                            unint64_t v40 = 0;
                          }
                          *(void *)a3 = v40;
                          uint64_t result = a3 + 16;
                          *(_DWORD *)(a3 + 24) = v25;
                          *(void *)(a3 + 16) = v40;
                          if (v37 >= 0x41 && v38) {
                            uint64_t result = MEMORY[0x1D25D9CB0](v38, 0x1000C8000313F17);
                          }
LABEL_56:
                          if (v132 < 0x41) {
                            goto LABEL_57;
                          }
                          uint64_t result = (uint64_t)v131;
                          if (!v131) {
                            goto LABEL_57;
                          }
                          goto LABEL_190;
                        }
                      }
                      unsigned int v134 = 0;
                      *(_DWORD *)(a3 + 8) = v25;
                      *(void *)a3 = v26;
                      *(_DWORD *)(a3 + 24) = v37;
                      *(void *)(a3 + 16) = v38;
                      LODWORD(v25) = 0;
                      goto LABEL_56;
                    }
                    unsigned int v34 = *v80;
                  }
                  else
                  {
                    unsigned int v34 = *a2;
                  }
                  if ((unint64_t)v34 <= v138) {
                    unsigned int v32 = v34;
                  }
                  goto LABEL_41;
                }
                int v30 = -(int)v16;
              }
              else
              {
                int v30 = -(int)v16;
              }
              unint64_t v31 = 0xFFFFFFFFFFFFFFFFLL >> v30;
              goto LABEL_36;
            }
            unsigned int v28 = *v75;
          }
          else
          {
            unsigned int v28 = *a2;
          }
          if ((unint64_t)v28 <= v16) {
            int v27 = (int)v28;
          }
          goto LABEL_32;
        }
LABEL_175:
        uint64_t result = (uint64_t)llvm::ConstantRange::ConstantRange((unint64_t *)a3, v13, 0);
LABEL_58:
        if (v138 >= 0x41)
        {
          uint64_t result = v137;
          if (v137) {
            uint64_t result = MEMORY[0x1D25D9CB0](v137, 0x1000C8000313F17);
          }
        }
        if (v140 >= 0x41)
        {
          uint64_t result = v139;
          if (v139) {
            return MEMORY[0x1D25D9CB0](v139, 0x1000C8000313F17);
          }
        }
        return result;
      }
      llvm::ConstantRange::getUnsignedMax((char **)a2, (uint64_t)&v141);
      if (v138 > 0x40) {
        unsigned int v41 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v137);
      }
      else {
        unsigned int v41 = v138 + __clz(v137) - 64;
      }
      unint64_t v42 = v41;
      uint64_t v43 = v142;
      if (v142 <= 0x40)
      {
        unint64_t v44 = (const void **)v141;
        if ((unint64_t)v141 > v41)
        {
          unsigned int v60 = *((_DWORD *)this + 2);
          *(_DWORD *)(a3 + 8) = v60;
          if (v60 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)a3);
          }
          if (v60) {
            unint64_t v61 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v60;
          }
          else {
            unint64_t v61 = 0;
          }
          *(void *)a3 = v61;
          uint64_t result = a3 + 16;
          *(_DWORD *)(a3 + 24) = v60;
          *(void *)(a3 + 16) = v61;
          goto LABEL_58;
        }
        llvm::ConstantRange::getUnsignedMin((uint64_t)a2, (uint64_t)v125);
        unsigned int v45 = v126;
        if (v126 < 0x41)
        {
          unint64_t v46 = *(uint64_t **)v125;
          LODWORD(v47) = v125[0];
          unsigned int v48 = v140;
          if (*(void *)v125 > (unint64_t)v140) {
            goto LABEL_68;
          }
          goto LABEL_67;
        }
        int v83 = 0;
        int64_t v84 = ((unint64_t)v126 + 63) >> 6;
        unint64_t v46 = *(uint64_t **)v125;
        do
        {
          BOOL v65 = v84-- < 1;
          if (v65) {
            break;
          }
          unint64_t v85 = *(void *)(*(void *)v125 + 8 * v84);
          v83 += __clz(v85);
        }
        while (!v85);
        unsigned int v86 = v126 | 0xFFFFFFC0;
        if ((v126 & 0x3F) == 0) {
          unsigned int v86 = 0;
        }
        if (v126 - v83 - v86 > 0x40)
        {
          unsigned int v48 = v140;
        }
        else
        {
          uint64_t v47 = **(void **)v125;
          unsigned int v48 = v140;
          if (**(void **)v125 <= (unint64_t)v140) {
LABEL_67:
          }
            unsigned int v48 = v47;
        }
LABEL_68:
        if (v140 > 0x40)
        {
          llvm::APInt::shlSlowCase((llvm::APInt *)&v139, v48);
        }
        else
        {
          uint64_t v49 = v139 << v48;
          if (!v140 || v140 == v48)
          {
            if (v140 == v48) {
              uint64_t v49 = 0;
            }
            if (v140) {
              unint64_t v50 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v140;
            }
            else {
              unint64_t v50 = 0;
            }
          }
          else
          {
            unint64_t v50 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v140;
          }
          uint64_t v139 = v50 & v49;
        }
        if (v45 >= 0x41 && v46) {
          MEMORY[0x1D25D9CB0](v46, 0x1000C8000313F17);
        }
        unsigned int v51 = v138;
        if (v43 >= 0x41)
        {
          int v87 = 0;
          int64_t v88 = (unint64_t)(v43 + 63) >> 6;
          do
          {
            BOOL v65 = v88-- < 1;
            if (v65) {
              break;
            }
            unint64_t v89 = (unint64_t)v44[v88];
            v87 += __clz(v89);
          }
          while (!v89);
          int v90 = v43 | 0xFFFFFFC0;
          if ((v43 & 0x3F) == 0) {
            int v90 = 0;
          }
          if ((v43 - v87 - v90) > 0x40)
          {
            unsigned int v53 = v138;
            goto LABEL_78;
          }
          unint64_t v52 = (unint64_t)*v44;
        }
        else
        {
          unint64_t v52 = (unint64_t)v141;
        }
        unsigned int v53 = v138;
        if (v52 <= v138) {
          unsigned int v53 = v52;
        }
LABEL_78:
        if (v138 > 0x40)
        {
          llvm::APInt::shlSlowCase((llvm::APInt *)&v137, v53);
          unsigned int v51 = v138;
          unsigned int v56 = (void *)v137;
        }
        else
        {
          unint64_t v54 = v137 << v53;
          if (!v138 || v138 == v53)
          {
            if (v138 == v53) {
              unint64_t v54 = 0;
            }
            unint64_t v55 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v138;
            if (!v138) {
              unint64_t v55 = 0;
            }
          }
          else
          {
            unint64_t v55 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v138;
          }
          unsigned int v56 = (void *)(v55 & v54);
          unint64_t v137 = (unint64_t)v56;
        }
        uint64_t v25 = v140;
        unsigned int v26 = (void *)v139;
        unsigned int v140 = 0;
        unsigned int v124 = v51;
        uint64_t v123 = v56;
        unsigned int v138 = 0;
        uint64_t result = llvm::APInt::operator+=((uint64_t)&v123, 1uLL);
        unsigned int v57 = v124;
        unsigned int v58 = v123;
        unsigned int v124 = 0;
        if (v25 > 0x40)
        {
          uint64_t result = memcmp(v26, v123, ((unint64_t)(v25 + 63) >> 3) & 0x3FFFFFF8);
          if (!result)
          {
            *(_DWORD *)(a3 + 8) = v25;
            llvm::APInt::initSlowCase((llvm::APInt *)a3);
          }
        }
        else if (v26 == v123)
        {
          *(_DWORD *)(a3 + 8) = v25;
          if (v25) {
            unint64_t v59 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v25;
          }
          else {
            unint64_t v59 = 0;
          }
          *(void *)a3 = v59;
          uint64_t result = a3 + 16;
          *(_DWORD *)(a3 + 24) = v25;
          *(void *)(a3 + 16) = v59;
          if (v57 >= 0x41 && v58) {
            uint64_t result = MEMORY[0x1D25D9CB0](v58, 0x1000C8000313F17);
          }
LABEL_89:
          if (v124 < 0x41) {
            goto LABEL_57;
          }
          uint64_t result = (uint64_t)v123;
          if (!v123) {
            goto LABEL_57;
          }
LABEL_190:
          uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
LABEL_57:
          if (v25 < 0x41 || !v26) {
            goto LABEL_58;
          }
          uint64_t result = (uint64_t)v26;
          goto LABEL_172;
        }
        *(_DWORD *)(a3 + 8) = v25;
        *(void *)a3 = v26;
        *(_DWORD *)(a3 + 24) = v57;
        *(void *)(a3 + 16) = v58;
        LODWORD(v25) = 0;
        goto LABEL_89;
      }
      if (v43 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v141) > 0x40
        || ((unsigned int v96 = (const void **)v141, v43 >= 0x41)
          ? (int v97 = (const void **)v141)
          : (int v97 = (const void **)&v141),
            (unint64_t)*v97 > v42))
      {
        unsigned int v94 = *((_DWORD *)this + 2);
        *(_DWORD *)(a3 + 8) = v94;
        if (v94 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)a3);
        }
        if (v94) {
          unint64_t v95 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v94;
        }
        else {
          unint64_t v95 = 0;
        }
        *(void *)a3 = v95;
        uint64_t result = a3 + 16;
        *(_DWORD *)(a3 + 24) = v94;
        *(void *)(a3 + 16) = v95;
LABEL_211:
        if (v43 < 0x41) {
          goto LABEL_58;
        }
        uint64_t result = (uint64_t)v141;
        if (!v141) {
          goto LABEL_58;
        }
LABEL_172:
        uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
        goto LABEL_58;
      }
      llvm::ConstantRange::getUnsignedMin((uint64_t)a2, (uint64_t)v125);
      unsigned int v98 = v126;
      if (v126 <= 0x40)
      {
        int v99 = *(uint64_t **)v125;
        unsigned int v100 = v140;
        LODWORD(v101) = v125[0];
        if (*(void *)v125 > (unint64_t)v140) {
          goto LABEL_223;
        }
        goto LABEL_222;
      }
      int v115 = 0;
      int64_t v116 = ((unint64_t)v126 + 63) >> 6;
      int v99 = *(uint64_t **)v125;
      do
      {
        BOOL v65 = v116-- < 1;
        if (v65) {
          break;
        }
        unint64_t v117 = *(void *)(*(void *)v125 + 8 * v116);
        v115 += __clz(v117);
      }
      while (!v117);
      unsigned int v118 = v126 | 0xFFFFFFC0;
      if ((v126 & 0x3F) == 0) {
        unsigned int v118 = 0;
      }
      if (v126 - v115 - v118 > 0x40)
      {
        unsigned int v100 = v140;
      }
      else
      {
        uint64_t v101 = **(void **)v125;
        unsigned int v100 = v140;
        if (**(void **)v125 <= (unint64_t)v140) {
LABEL_222:
        }
          unsigned int v100 = v101;
      }
LABEL_223:
      if (v140 > 0x40)
      {
        llvm::APInt::shlSlowCase((llvm::APInt *)&v139, v100);
      }
      else
      {
        uint64_t v102 = v139 << v100;
        if (v140 == v100) {
          uint64_t v102 = 0;
        }
        if (v140) {
          unint64_t v103 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v140;
        }
        else {
          unint64_t v103 = 0;
        }
        uint64_t v139 = v103 & v102;
      }
      if (v98 >= 0x41 && v99) {
        MEMORY[0x1D25D9CB0](v99, 0x1000C8000313F17);
      }
      unsigned int v104 = v138;
      if (v43 > 0x40)
      {
        int v119 = 0;
        int64_t v120 = (unint64_t)(v43 + 63) >> 6;
        do
        {
          BOOL v65 = v120-- < 1;
          if (v65) {
            break;
          }
          unint64_t v121 = (unint64_t)v96[v120];
          v119 += __clz(v121);
        }
        while (!v121);
        int v122 = v43 | 0xFFFFFFC0;
        if ((v43 & 0x3F) == 0) {
          int v122 = 0;
        }
        unsigned int v106 = v138;
        if ((v43 - v119 - v122) > 0x40)
        {
LABEL_235:
          if (v138 > 0x40)
          {
            llvm::APInt::shlSlowCase((llvm::APInt *)&v137, v106);
            unsigned int v104 = v138;
            int v109 = (void *)v137;
          }
          else
          {
            unint64_t v107 = v137 << v106;
            if (v138 == v106) {
              unint64_t v107 = 0;
            }
            unint64_t v108 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v138;
            if (!v138) {
              unint64_t v108 = 0;
            }
            int v109 = (void *)(v108 & v107);
            unint64_t v137 = (unint64_t)v109;
          }
          uint64_t v110 = v140;
          unint64_t v111 = (void *)v139;
          unsigned int v140 = 0;
          unsigned int v124 = v104;
          uint64_t v123 = v109;
          unsigned int v138 = 0;
          uint64_t result = llvm::APInt::operator+=((uint64_t)&v123, 1uLL);
          unsigned int v112 = v124;
          BOOL v113 = v123;
          unsigned int v124 = 0;
          if (v110 > 0x40)
          {
            uint64_t result = memcmp(v111, v123, ((unint64_t)(v110 + 63) >> 3) & 0x3FFFFFF8);
            if (!result)
            {
              *(_DWORD *)(a3 + 8) = v110;
              llvm::APInt::initSlowCase((llvm::APInt *)a3);
            }
          }
          else if (v111 == v123)
          {
            *(_DWORD *)(a3 + 8) = v110;
            if (v110) {
              unint64_t v114 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v110;
            }
            else {
              unint64_t v114 = 0;
            }
            *(void *)a3 = v114;
            uint64_t result = a3 + 16;
            *(_DWORD *)(a3 + 24) = v110;
            *(void *)(a3 + 16) = v114;
            if (v112 >= 0x41 && v113) {
              uint64_t result = MEMORY[0x1D25D9CB0](v113, 0x1000C8000313F17);
            }
            goto LABEL_249;
          }
          *(_DWORD *)(a3 + 8) = v110;
          *(void *)a3 = v111;
          *(_DWORD *)(a3 + 24) = v112;
          *(void *)(a3 + 16) = v113;
LABEL_249:
          if (v124 >= 0x41)
          {
            uint64_t result = (uint64_t)v123;
            if (v123) {
              uint64_t result = MEMORY[0x1D25D9CB0](v123, 0x1000C8000313F17);
            }
          }
          goto LABEL_211;
        }
        unint64_t v105 = (unint64_t)*v96;
      }
      else
      {
        unint64_t v105 = (unint64_t)v141;
      }
      unsigned int v106 = v138;
      if (v105 <= v138) {
        unsigned int v106 = v105;
      }
      goto LABEL_235;
    }
  }
  else if ((unint64_t)a2[2] | (unint64_t)*a2)
  {
    goto LABEL_5;
  }
LABEL_111:

  return (uint64_t)llvm::ConstantRange::ConstantRange((unint64_t *)a3, v6, 0);
}

void llvm::ConstantRange::lshr(const void **this@<X0>, const llvm::ConstantRange *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    unint64_t v20 = *this;
    if (!memcmp(*this, this[2], ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8))
    {
      int v21 = 0;
      int64_t v22 = (unint64_t)(v6 + 63) >> 6;
      do
      {
        BOOL v23 = v22-- < 1;
        if (v23) {
          break;
        }
        unint64_t v24 = v20[v22];
        v21 += __clz(v24);
      }
      while (!v24);
      int v25 = v6 | 0xFFFFFFC0;
      if ((v6 & 0x3F) == 0) {
        int v25 = 0;
      }
      if (v21 + v25 == v6) {
        goto LABEL_45;
      }
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    goto LABEL_45;
  }
  uint64_t v7 = *((unsigned int *)a2 + 2);
  if (v7 < 0x41)
  {
    if (*((void *)a2 + 2) | *(void *)a2) {
      goto LABEL_5;
    }
LABEL_45:
    llvm::ConstantRange::ConstantRange((unint64_t *)a3, v6, 0);
    return;
  }
  uint64_t v26 = *(void *)a2;
  if (!memcmp(*(const void **)a2, *((const void **)a2 + 2), ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8))
  {
    int v27 = 0;
    int64_t v28 = (unint64_t)(v7 + 63) >> 6;
    do
    {
      BOOL v23 = v28-- < 1;
      if (v23) {
        break;
      }
      unint64_t v29 = *(void *)(v26 + 8 * v28);
      v27 += __clz(v29);
    }
    while (!v29);
    int v30 = v7 | 0xFFFFFFC0;
    if ((v7 & 0x3F) == 0) {
      int v30 = 0;
    }
    if (v27 + v30 == v7) {
      goto LABEL_45;
    }
  }
LABEL_5:
  llvm::ConstantRange::getUnsignedMax((char **)this, (uint64_t)&__src);
  llvm::ConstantRange::getUnsignedMin((uint64_t)a2, (uint64_t)&v40);
  unsigned int v8 = v43;
  unsigned int v45 = v43;
  if (v43 > 0x40) {
    operator new[]();
  }
  unint64_t v44 = (unint64_t)__src;
  unsigned int v9 = v41;
  if (v41 < 0x41)
  {
    unint64_t v10 = (unint64_t)v40;
    goto LABEL_8;
  }
  int v31 = 0;
  int64_t v32 = ((unint64_t)v41 + 63) >> 6;
  do
  {
    BOOL v23 = v32-- < 1;
    if (v23) {
      break;
    }
    unint64_t v33 = v40[v32];
    v31 += __clz(v33);
  }
  while (!v33);
  unsigned int v34 = v41 | 0xFFFFFFC0;
  if ((v41 & 0x3F) == 0) {
    unsigned int v34 = 0;
  }
  unsigned int v35 = v41 - v31 - v34;
  int v11 = v43;
  if (v35 <= 0x40)
  {
    unint64_t v10 = *v40;
LABEL_8:
    int v11 = v43;
    if (v10 <= v43) {
      int v11 = v10;
    }
  }
  if (v43 == v11) {
    unint64_t v44 = 0;
  }
  else {
    unint64_t v44 = (unint64_t)__src >> v11;
  }
  llvm::APInt::operator+=((uint64_t)&v44, 1uLL);
  unsigned int v12 = v45;
  unint64_t v13 = (const void *)v44;
  unsigned int v45 = 0;
  if (v9 >= 0x41 && v40) {
    MEMORY[0x1D25D9CB0](v40, 0x1000C8000313F17);
  }
  if (v8 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  llvm::ConstantRange::getUnsignedMin((uint64_t)this, (uint64_t)&__src);
  llvm::ConstantRange::getUnsignedMax((char **)a2, (uint64_t)&v40);
  uint64_t v14 = v43;
  if (v43 > 0x40) {
    operator new[]();
  }
  if (v41 >= 0x41)
  {
    int v36 = 0;
    int64_t v37 = ((unint64_t)v41 + 63) >> 6;
    unsigned int v15 = v40;
    do
    {
      BOOL v23 = v37-- < 1;
      if (v23) {
        break;
      }
      unint64_t v38 = v40[v37];
      v36 += __clz(v38);
    }
    while (!v38);
    unsigned int v39 = v41 | 0xFFFFFFC0;
    if ((v41 & 0x3F) == 0) {
      unsigned int v39 = 0;
    }
    if (v41 - v36 - v39 > 0x40)
    {
      unsigned int v17 = v43;
      goto LABEL_18;
    }
    unint64_t v16 = *v40;
    unsigned int v17 = v43;
    if (*v40 > v43) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  unsigned int v15 = v40;
  LODWORD(v16) = v40;
  unsigned int v17 = v43;
  if ((unint64_t)v40 <= v43) {
LABEL_17:
  }
    unsigned int v17 = v16;
LABEL_18:
  if (v43 == v17) {
    unint64_t v18 = 0;
  }
  else {
    unint64_t v18 = (unint64_t)__src >> v17;
  }
  if (v41 >= 0x41 && v15) {
    MEMORY[0x1D25D9CB0](v15, 0x1000C8000313F17);
  }
  if (v14 >= 0x41)
  {
    if (__src) {
      MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
    }
    if (!memcmp((const void *)v18, v13, ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8))
    {
      *(_DWORD *)(a3 + 8) = v14;
      llvm::APInt::initSlowCase((llvm::APInt *)a3);
    }
    goto LABEL_24;
  }
  if ((const void *)v18 != v13)
  {
LABEL_24:
    *(_DWORD *)(a3 + 8) = v14;
    *(void *)a3 = v18;
    *(_DWORD *)(a3 + 24) = v12;
    *(void *)(a3 + 16) = v13;
    return;
  }
  *(_DWORD *)(a3 + 8) = v14;
  if (v14) {
    unint64_t v19 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v14;
  }
  else {
    unint64_t v19 = 0;
  }
  *(void *)a3 = v19;
  *(_DWORD *)(a3 + 24) = v14;
  *(void *)(a3 + 16) = v19;
  if (v12 >= 0x41)
  {
    if (v13) {
      MEMORY[0x1D25D9CB0](v13, 0x1000C8000313F17);
    }
  }
}

uint64_t llvm::ConstantRange::ashr@<X0>(const void **this@<X0>, const llvm::ConstantRange *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    if (!memcmp(*this, this[2], ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) == v6)
    {
      goto LABEL_66;
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    goto LABEL_66;
  }
  uint64_t v7 = *((unsigned int *)a2 + 2);
  if (v7 >= 0x41)
  {
    if (memcmp(*(const void **)a2, *((const void **)a2 + 2), ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8)
      || llvm::APInt::countLeadingZerosSlowCase(a2) != v7)
    {
LABEL_5:
      llvm::ConstantRange::getSignedMax(this, (uint64_t)&v46);
      llvm::ConstantRange::getUnsignedMin((uint64_t)a2, (uint64_t)&__src);
      unsigned int v8 = v47;
      unsigned int v49 = v47;
      if (v47 > 0x40) {
        operator new[]();
      }
      unsigned int v9 = v46;
      uint64_t v48 = (uint64_t)v46;
      llvm::APInt::ashrInPlace((unsigned int *)&v48, (const llvm::APInt *)&__src);
      llvm::APInt::operator+=((uint64_t)&v48, 1uLL);
      unsigned int v51 = v49;
      uint64_t v50 = v48;
      unsigned int v49 = 0;
      if (v45 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      if (v8 >= 0x41 && v9) {
        MEMORY[0x1D25D9CB0](v9, 0x1000C8000313F17);
      }
      llvm::ConstantRange::getSignedMin((uint64_t)this, (uint64_t)&__src);
      llvm::ConstantRange::getUnsignedMax((char **)a2, (uint64_t)&v42);
      unsigned int v10 = v45;
      unsigned int v47 = v45;
      if (v45 > 0x40) {
        operator new[]();
      }
      int v11 = __src;
      unint64_t v46 = __src;
      llvm::APInt::ashrInPlace((unsigned int *)&v46, (const llvm::APInt *)&v42);
      if (v43 >= 0x41 && v42) {
        MEMORY[0x1D25D9CB0](v42, 0x1000C8000313F17);
      }
      if (v10 >= 0x41 && v11) {
        MEMORY[0x1D25D9CB0](v11, 0x1000C8000313F17);
      }
      llvm::ConstantRange::getSignedMax(this, (uint64_t)&v42);
      llvm::ConstantRange::getUnsignedMax((char **)a2, (uint64_t)&v38);
      unsigned int v12 = v43;
      unsigned int v41 = v43;
      if (v43 > 0x40) {
        operator new[]();
      }
      unint64_t v13 = v42;
      unint64_t v40 = v42;
      llvm::APInt::ashrInPlace((unsigned int *)&v40, (const llvm::APInt *)&v38);
      llvm::APInt::operator+=((uint64_t)&v40, 1uLL);
      unsigned int v45 = v41;
      uint64_t __src = v40;
      unsigned int v41 = 0;
      if (v39 >= 0x41 && v38) {
        MEMORY[0x1D25D9CB0](v38, 0x1000C8000313F17);
      }
      if (v12 >= 0x41 && v13) {
        MEMORY[0x1D25D9CB0](v13, 0x1000C8000313F17);
      }
      llvm::ConstantRange::getSignedMin((uint64_t)this, (uint64_t)&v38);
      llvm::ConstantRange::getUnsignedMin((uint64_t)a2, (uint64_t)&__s1);
      unsigned int v14 = v39;
      unsigned int v43 = v39;
      if (v39 > 0x40) {
        operator new[]();
      }
      unsigned int v15 = v38;
      unint64_t v42 = v38;
      llvm::APInt::ashrInPlace((unsigned int *)&v42, (const llvm::APInt *)&__s1);
      if (v37 >= 0x41 && __s1) {
        MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
      }
      if (v14 >= 0x41 && v15) {
        MEMORY[0x1D25D9CB0](v15, 0x1000C8000313F17);
      }
      unsigned int v39 = 1;
      unint64_t v38 = 0;
      unsigned int v37 = 1;
      __s1 = 0;
      llvm::ConstantRange::getSignedMin((uint64_t)this, (uint64_t)&v34);
      unsigned int v16 = v35 - 1;
      uint64_t result = v34;
      if (v35 >= 0x41) {
        unint64_t v18 = (uint64_t *)(v34 + 8 * (v16 >> 6));
      }
      else {
        unint64_t v18 = &v34;
      }
      uint64_t v19 = (1 << v16) & *v18;
      if (v35 >= 0x41 && v34) {
        uint64_t result = MEMORY[0x1D25D9CB0]();
      }
      if (v19)
      {
        llvm::ConstantRange::getSignedMax(this, (uint64_t)&v34);
        unsigned int v20 = v35 - 1;
        uint64_t result = v34;
        if (v35 >= 0x41) {
          int v21 = (uint64_t *)(v34 + 8 * (v20 >> 6));
        }
        else {
          int v21 = &v34;
        }
        uint64_t v22 = (1 << v20) & *v21;
        if (v35 >= 0x41 && v34) {
          uint64_t result = MEMORY[0x1D25D9CB0]();
        }
        unsigned int v23 = v43;
        BOOL v25 = v37 < 0x41 && v43 < 0x41;
        if (v22)
        {
          if (v25)
          {
            __s1 = v42;
            unsigned int v37 = v43;
          }
          else
          {
            uint64_t result = (uint64_t)llvm::APInt::assignSlowCase((const llvm::APInt *)&__s1, (const llvm::APInt *)&v42);
          }
          p_src = &__src;
          if (v39 <= 0x40)
          {
            unsigned int v28 = v45;
            if (v45 <= 0x40)
            {
              unint64_t v29 = __src;
              goto LABEL_39;
            }
          }
LABEL_72:
          uint64_t result = (uint64_t)llvm::APInt::assignSlowCase((const llvm::APInt *)&v38, (const llvm::APInt *)p_src);
          unsigned int v28 = v39;
          unint64_t v29 = v38;
LABEL_40:
          uint64_t v30 = v37;
          int v31 = __s1;
          unsigned int v37 = 0;
          unsigned int v39 = 0;
          if (v30 > 0x40)
          {
            uint64_t result = memcmp(__s1, v29, ((unint64_t)(v30 + 63) >> 3) & 0x3FFFFFF8);
            if (!result)
            {
              *(_DWORD *)(a3 + 8) = v30;
              llvm::APInt::initSlowCase((llvm::APInt *)a3);
            }
          }
          else if (__s1 == v29)
          {
            *(_DWORD *)(a3 + 8) = v30;
            if (v30) {
              unint64_t v32 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v30;
            }
            else {
              unint64_t v32 = 0;
            }
            *(void *)a3 = v32;
            uint64_t result = a3 + 16;
            *(_DWORD *)(a3 + 24) = v30;
            *(void *)(a3 + 16) = v32;
            if (v28 >= 0x41 && v29) {
              uint64_t result = MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
            }
            goto LABEL_46;
          }
          *(_DWORD *)(a3 + 8) = v30;
          *(void *)a3 = v31;
          *(_DWORD *)(a3 + 24) = v28;
          *(void *)(a3 + 16) = v29;
LABEL_46:
          if (v37 >= 0x41)
          {
            uint64_t result = (uint64_t)__s1;
            if (__s1) {
              uint64_t result = MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
            }
          }
          if (v39 >= 0x41)
          {
            uint64_t result = (uint64_t)v38;
            if (v38) {
              uint64_t result = MEMORY[0x1D25D9CB0](v38, 0x1000C8000313F17);
            }
          }
          if (v43 >= 0x41)
          {
            uint64_t result = (uint64_t)v42;
            if (v42) {
              uint64_t result = MEMORY[0x1D25D9CB0](v42, 0x1000C8000313F17);
            }
          }
          if (v45 >= 0x41)
          {
            uint64_t result = (uint64_t)__src;
            if (__src) {
              uint64_t result = MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
            }
          }
          if (v47 >= 0x41)
          {
            uint64_t result = (uint64_t)v46;
            if (v46) {
              uint64_t result = MEMORY[0x1D25D9CB0](v46, 0x1000C8000313F17);
            }
          }
          if (v51 >= 0x41)
          {
            uint64_t result = v50;
            if (v50) {
              return MEMORY[0x1D25D9CB0](v50, 0x1000C8000313F17);
            }
          }
          return result;
        }
        if (v25)
        {
          uint64_t v26 = v42;
LABEL_35:
          __s1 = v26;
          unsigned int v37 = v23;
LABEL_36:
          p_src = (void **)&v50;
          if (v39 <= 0x40)
          {
            unsigned int v28 = v51;
            if (v51 <= 0x40)
            {
              unint64_t v29 = (void *)v50;
LABEL_39:
              unint64_t v38 = v29;
              goto LABEL_40;
            }
          }
          goto LABEL_72;
        }
        unint64_t v33 = &v42;
      }
      else
      {
        if (v37 <= 0x40)
        {
          unsigned int v23 = v47;
          if (v47 <= 0x40)
          {
            uint64_t v26 = v46;
            goto LABEL_35;
          }
        }
        unint64_t v33 = &v46;
      }
      uint64_t result = (uint64_t)llvm::APInt::assignSlowCase((const llvm::APInt *)&__s1, (const llvm::APInt *)v33);
      goto LABEL_36;
    }
  }
  else if (*((void *)a2 + 2) | *(void *)a2)
  {
    goto LABEL_5;
  }
LABEL_66:

  return (uint64_t)llvm::ConstantRange::ConstantRange((unint64_t *)a3, v6, 0);
}

unint64_t *llvm::ConstantRange::binaryAnd@<X0>(const void **this@<X0>, const llvm::ConstantRange *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    uint64_t v7 = *this;
    if (!memcmp(*this, this[2], ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8))
    {
      int v47 = 0;
      int64_t v48 = (unint64_t)(v6 + 63) >> 6;
      do
      {
        BOOL v49 = v48-- < 1;
        if (v49) {
          break;
        }
        unint64_t v50 = v7[v48];
        v47 += __clz(v50);
      }
      while (!v50);
      int v51 = v6 | 0xFFFFFFC0;
      if ((v6 & 0x3F) == 0) {
        int v51 = 0;
      }
      if (v47 + v51 == v6) {
        goto LABEL_78;
      }
    }
  }
  else
  {
    uint64_t v7 = *this;
    if (!((unint64_t)this[2] | (unint64_t)*this)) {
      goto LABEL_78;
    }
  }
  uint64_t v8 = *((unsigned int *)a2 + 2);
  if (v8 < 0x41)
  {
    if (*((void *)a2 + 2) | *(void *)a2) {
      goto LABEL_5;
    }
LABEL_78:
    return llvm::ConstantRange::ConstantRange((unint64_t *)a3, v6, 0);
  }
  uint64_t v52 = *(void *)a2;
  if (!memcmp(*(const void **)a2, *((const void **)a2 + 2), ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8))
  {
    int v53 = 0;
    int64_t v54 = (unint64_t)(v8 + 63) >> 6;
    do
    {
      BOOL v49 = v54-- < 1;
      if (v49) {
        break;
      }
      unint64_t v55 = *(void *)(v52 + 8 * v54);
      v53 += __clz(v55);
    }
    while (!v55);
    int v56 = v8 | 0xFFFFFFC0;
    if ((v8 & 0x3F) == 0) {
      int v56 = 0;
    }
    if (v53 + v56 == v8) {
      goto LABEL_78;
    }
  }
LABEL_5:
  unsigned int v66 = v6;
  if (v6 > 0x40) {
    operator new[]();
  }
  BOOL v65 = v7;
  llvm::APInt::operator+=((uint64_t)&v65, 1uLL);
  unsigned int v9 = v66;
  unsigned int v10 = v65;
  unsigned int v66 = 0;
  uint64_t v11 = *((unsigned int *)this + 6);
  if (v11 > 0x40) {
    BOOL v12 = memcmp(this[2], v65, ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8) == 0;
  }
  else {
    BOOL v12 = this[2] == v65;
  }
  int v13 = v12;
  if (v9 >= 0x41)
  {
    if (v10)
    {
      MEMORY[0x1D25D9CB0](v10, 0x1000C8000313F17);
      if (v66 >= 0x41)
      {
        if (v65) {
          MEMORY[0x1D25D9CB0](v65, 0x1000C8000313F17);
        }
      }
    }
  }
  if (!v13) {
    goto LABEL_13;
  }
  unsigned int v66 = *((_DWORD *)a2 + 2);
  if (v66 > 0x40) {
    operator new[]();
  }
  BOOL v65 = *(void **)a2;
  llvm::APInt::operator+=((uint64_t)&v65, 1uLL);
  unsigned int v27 = v66;
  unsigned int v28 = v65;
  unsigned int v66 = 0;
  uint64_t v29 = *((unsigned int *)a2 + 6);
  if (v29 > 0x40) {
    BOOL v30 = memcmp(*((const void **)a2 + 2), v65, ((unint64_t)(v29 + 63) >> 3) & 0x3FFFFFF8) == 0;
  }
  else {
    BOOL v30 = *((void *)a2 + 2) == (void)v65;
  }
  int v31 = v30;
  if (v27 >= 0x41)
  {
    if (v28)
    {
      MEMORY[0x1D25D9CB0](v28, 0x1000C8000313F17);
      if (v66 >= 0x41)
      {
        if (v65) {
          MEMORY[0x1D25D9CB0](v65, 0x1000C8000313F17);
        }
      }
    }
  }
  if (v31)
  {
    unsigned int v66 = *((_DWORD *)this + 2);
    if (v66 > 0x40) {
      operator new[]();
    }
    BOOL v65 = (void *)*this;
    llvm::APInt::operator+=((uint64_t)&v65, 1uLL);
    unsigned int v32 = v66;
    unint64_t v33 = v65;
    unsigned int v66 = 0;
    uint64_t v34 = *((unsigned int *)this + 6);
    if (v34 > 0x40) {
      BOOL v35 = memcmp(this[2], v65, ((unint64_t)(v34 + 63) >> 3) & 0x3FFFFFF8) == 0;
    }
    else {
      BOOL v35 = this[2] == v65;
    }
    int v36 = v35;
    if (v32 >= 0x41)
    {
      if (v33)
      {
        MEMORY[0x1D25D9CB0](v33, 0x1000C8000313F17);
        if (v66 >= 0x41)
        {
          if (v65) {
            MEMORY[0x1D25D9CB0](v65, 0x1000C8000313F17);
          }
        }
      }
    }
    if (v36) {
      unsigned int v37 = this;
    }
    else {
      unsigned int v37 = 0;
    }
    unsigned int v38 = *((_DWORD *)v37 + 2);
    if (v38 > 0x40) {
      operator new[]();
    }
    unint64_t v39 = (unint64_t)*v37;
    unsigned int v66 = *((_DWORD *)a2 + 2);
    if (v66 > 0x40) {
      operator new[]();
    }
    BOOL v65 = *(void **)a2;
    llvm::APInt::operator+=((uint64_t)&v65, 1uLL);
    unsigned int v40 = v66;
    unsigned int v41 = v65;
    unsigned int v66 = 0;
    uint64_t v42 = *((unsigned int *)a2 + 6);
    if (v42 > 0x40) {
      BOOL v43 = memcmp(*((const void **)a2 + 2), v65, ((unint64_t)(v42 + 63) >> 3) & 0x3FFFFFF8) == 0;
    }
    else {
      BOOL v43 = *((void *)a2 + 2) == (void)v65;
    }
    int v44 = v43;
    if (v40 >= 0x41)
    {
      if (v41)
      {
        MEMORY[0x1D25D9CB0](v41, 0x1000C8000313F17);
        if (v66 >= 0x41)
        {
          if (v65) {
            MEMORY[0x1D25D9CB0](v65, 0x1000C8000313F17);
          }
        }
      }
    }
    if (v44) {
      unsigned int v45 = a2;
    }
    else {
      unsigned int v45 = 0;
    }
    unint64_t v46 = (void *)(*(void *)v45 & v39);
    *(_DWORD *)(a3 + 8) = v38;
    *(void *)a3 = v46;
    unsigned int v66 = v38;
    BOOL v65 = v46;
    uint64_t result = (unint64_t *)llvm::APInt::operator+=((uint64_t)&v65, 1uLL);
    *(_DWORD *)(a3 + 24) = v66;
    *(void *)(a3 + 16) = v65;
  }
  else
  {
LABEL_13:
    llvm::ConstantRange::getUnsignedMax((char **)a2, (uint64_t)&v65);
    llvm::ConstantRange::getUnsignedMax((char **)this, (uint64_t)&v63);
    unsigned int v14 = v66;
    if (v66 > 0x40)
    {
      unsigned int v15 = v65;
      unint64_t v16 = v63;
      unint64_t v17 = (((unint64_t)v66 + 63) >> 3) & 0x3FFFFFF8;
      while (v17)
      {
        unint64_t v57 = *(void *)((char *)v65 + v17 - 8);
        unint64_t v58 = *(void *)(v63 + v17 - 8);
        v17 -= 8;
        if (v57 != v58)
        {
          if (v57 > v58) {
            LODWORD(v17) = 1;
          }
          else {
            LODWORD(v17) = -1;
          }
          break;
        }
      }
    }
    else
    {
      unsigned int v15 = v65;
      unint64_t v16 = v63;
      LODWORD(v17) = (unint64_t)v65 > v63;
      if ((unint64_t)v65 < v63) {
        LODWORD(v17) = -1;
      }
    }
    if ((v17 & 0x80000000) == 0) {
      unint64_t v18 = (void **)&v63;
    }
    else {
      unint64_t v18 = &v65;
    }
    if ((v17 & 0x80000000) == 0) {
      unsigned int v19 = v64;
    }
    else {
      unsigned int v19 = v66;
    }
    if (v19 > 0x40) {
      operator new[]();
    }
    unsigned int v20 = *v18;
    if (v64 >= 0x41 && v16) {
      MEMORY[0x1D25D9CB0](v16, 0x1000C8000313F17);
    }
    if (v14 >= 0x41 && v15) {
      MEMORY[0x1D25D9CB0](v15, 0x1000C8000313F17);
    }
    unsigned int v21 = *((_DWORD *)this + 2);
    unsigned int v62 = v21;
    if (v21 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&__s1);
    }
    __s1 = 0;
    unsigned int v60 = v19;
    __s2 = v20;
    uint64_t result = (unint64_t *)llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
    unsigned int v23 = v60;
    unint64_t v24 = __s2;
    unsigned int v60 = 0;
    BOOL v25 = __s1;
    if (__s1 == __s2)
    {
      *(_DWORD *)(a3 + 8) = v21;
      if (v21) {
        unint64_t v26 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v21;
      }
      else {
        unint64_t v26 = 0;
      }
      *(void *)a3 = v26;
      *(_DWORD *)(a3 + 24) = v21;
      *(void *)(a3 + 16) = v26;
      if (v23 >= 0x41 && v24) {
        uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
      }
    }
    else
    {
      unsigned int v62 = 0;
      *(_DWORD *)(a3 + 8) = v21;
      *(void *)a3 = v25;
      *(_DWORD *)(a3 + 24) = v23;
      *(void *)(a3 + 16) = v24;
    }
    if (v60 >= 0x41)
    {
      uint64_t result = (unint64_t *)__s2;
      if (__s2) {
        return (unint64_t *)MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
      }
    }
  }
  return result;
}

unint64_t *llvm::ConstantRange::binaryOr@<X0>(const void **this@<X0>, const llvm::ConstantRange *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    uint64_t v7 = *this;
    if (!memcmp(*this, this[2], ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8))
    {
      int v45 = 0;
      int64_t v46 = (unint64_t)(v6 + 63) >> 6;
      do
      {
        BOOL v17 = v46-- < 1;
        if (v17) {
          break;
        }
        unint64_t v47 = v7[v46];
        v45 += __clz(v47);
      }
      while (!v47);
      int v48 = v6 | 0xFFFFFFC0;
      if ((v6 & 0x3F) == 0) {
        int v48 = 0;
      }
      if (v45 + v48 == v6) {
        goto LABEL_80;
      }
    }
  }
  else
  {
    uint64_t v7 = *this;
    if (!((unint64_t)this[2] | (unint64_t)*this)) {
      goto LABEL_80;
    }
  }
  uint64_t v8 = *((unsigned int *)a2 + 2);
  if (v8 < 0x41)
  {
    if (*((void *)a2 + 2) | *(void *)a2) {
      goto LABEL_5;
    }
LABEL_80:
    return llvm::ConstantRange::ConstantRange((unint64_t *)a3, v6, 0);
  }
  uint64_t v49 = *(void *)a2;
  if (!memcmp(*(const void **)a2, *((const void **)a2 + 2), ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8))
  {
    int v50 = 0;
    int64_t v51 = (unint64_t)(v8 + 63) >> 6;
    do
    {
      BOOL v17 = v51-- < 1;
      if (v17) {
        break;
      }
      unint64_t v52 = *(void *)(v49 + 8 * v51);
      v50 += __clz(v52);
    }
    while (!v52);
    int v53 = v8 | 0xFFFFFFC0;
    if ((v8 & 0x3F) == 0) {
      int v53 = 0;
    }
    if (v50 + v53 == v8) {
      goto LABEL_80;
    }
  }
LABEL_5:
  unsigned int v65 = v6;
  if (v6 > 0x40) {
    operator new[]();
  }
  unsigned int v64 = v7;
  llvm::APInt::operator+=((uint64_t)&v64, 1uLL);
  unsigned int v9 = v65;
  unsigned int v10 = v64;
  unsigned int v65 = 0;
  uint64_t v11 = *((unsigned int *)this + 6);
  if (v11 > 0x40) {
    BOOL v12 = memcmp(this[2], v64, ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8) == 0;
  }
  else {
    BOOL v12 = this[2] == v64;
  }
  int v13 = v12;
  if (v9 >= 0x41)
  {
    if (v10)
    {
      MEMORY[0x1D25D9CB0](v10, 0x1000C8000313F17);
      if (v65 >= 0x41)
      {
        if (v64) {
          MEMORY[0x1D25D9CB0](v64, 0x1000C8000313F17);
        }
      }
    }
  }
  if (!v13) {
    goto LABEL_13;
  }
  unsigned int v65 = *((_DWORD *)a2 + 2);
  if (v65 > 0x40) {
    operator new[]();
  }
  unsigned int v64 = *(void **)a2;
  llvm::APInt::operator+=((uint64_t)&v64, 1uLL);
  unsigned int v25 = v65;
  unint64_t v26 = v64;
  unsigned int v65 = 0;
  uint64_t v27 = *((unsigned int *)a2 + 6);
  if (v27 > 0x40) {
    BOOL v28 = memcmp(*((const void **)a2 + 2), v64, ((unint64_t)(v27 + 63) >> 3) & 0x3FFFFFF8) == 0;
  }
  else {
    BOOL v28 = *((void *)a2 + 2) == (void)v64;
  }
  int v29 = v28;
  if (v25 >= 0x41)
  {
    if (v26)
    {
      MEMORY[0x1D25D9CB0](v26, 0x1000C8000313F17);
      if (v65 >= 0x41)
      {
        if (v64) {
          MEMORY[0x1D25D9CB0](v64, 0x1000C8000313F17);
        }
      }
    }
  }
  if (v29)
  {
    unsigned int v65 = *((_DWORD *)this + 2);
    if (v65 > 0x40) {
      operator new[]();
    }
    unsigned int v64 = (void *)*this;
    llvm::APInt::operator+=((uint64_t)&v64, 1uLL);
    unsigned int v30 = v65;
    int v31 = v64;
    unsigned int v65 = 0;
    uint64_t v32 = *((unsigned int *)this + 6);
    if (v32 > 0x40) {
      BOOL v33 = memcmp(this[2], v64, ((unint64_t)(v32 + 63) >> 3) & 0x3FFFFFF8) == 0;
    }
    else {
      BOOL v33 = this[2] == v64;
    }
    int v34 = v33;
    if (v30 >= 0x41)
    {
      if (v31)
      {
        MEMORY[0x1D25D9CB0](v31, 0x1000C8000313F17);
        if (v65 >= 0x41)
        {
          if (v64) {
            MEMORY[0x1D25D9CB0](v64, 0x1000C8000313F17);
          }
        }
      }
    }
    if (v34) {
      BOOL v35 = this;
    }
    else {
      BOOL v35 = 0;
    }
    unsigned int v36 = *((_DWORD *)v35 + 2);
    unsigned int v63 = v36;
    if (v36 > 0x40) {
      operator new[]();
    }
    unint64_t v37 = (unint64_t)*v35;
    unsigned int v62 = (unint64_t *)*v35;
    unsigned int v65 = *((_DWORD *)a2 + 2);
    if (v65 > 0x40) {
      operator new[]();
    }
    unsigned int v64 = *(void **)a2;
    llvm::APInt::operator+=((uint64_t)&v64, 1uLL);
    unsigned int v38 = v65;
    unint64_t v39 = v64;
    unsigned int v65 = 0;
    uint64_t v40 = *((unsigned int *)a2 + 6);
    if (v40 > 0x40) {
      BOOL v41 = memcmp(*((const void **)a2 + 2), v64, ((unint64_t)(v40 + 63) >> 3) & 0x3FFFFFF8) == 0;
    }
    else {
      BOOL v41 = *((void *)a2 + 2) == (void)v64;
    }
    int v42 = v41;
    if (v38 >= 0x41)
    {
      if (v39)
      {
        MEMORY[0x1D25D9CB0](v39, 0x1000C8000313F17);
        if (v65 >= 0x41)
        {
          if (v64) {
            MEMORY[0x1D25D9CB0](v64, 0x1000C8000313F17);
          }
        }
      }
    }
    if (v42) {
      BOOL v43 = a2;
    }
    else {
      BOOL v43 = 0;
    }
    int v44 = (unint64_t *)(v37 | *(void *)v43);
    unsigned int v62 = v44;
    unsigned int v63 = 0;
    *(_DWORD *)(a3 + 8) = v36;
    *(void *)a3 = v44;
    unsigned int v65 = v36;
    unsigned int v64 = v44;
    uint64_t result = (unint64_t *)llvm::APInt::operator+=((uint64_t)&v64, 1uLL);
    *(_DWORD *)(a3 + 24) = v65;
    *(void *)(a3 + 16) = v64;
    if (v63 >= 0x41)
    {
      uint64_t result = v62;
      if (v62) {
        return (unint64_t *)MEMORY[0x1D25D9CB0]();
      }
    }
  }
  else
  {
LABEL_13:
    llvm::ConstantRange::getUnsignedMin((uint64_t)this, (uint64_t)&v64);
    llvm::ConstantRange::getUnsignedMin((uint64_t)a2, (uint64_t)&v60);
    unsigned int v14 = v65;
    if (v65 > 0x40)
    {
      uint64_t result = (unint64_t *)v64;
      unint64_t v16 = v60;
      unint64_t v54 = (((unint64_t)v65 + 63) >> 3) & 0x3FFFFFF8;
      while (v54)
      {
        unint64_t v55 = *(void *)((char *)v64 + v54 - 8);
        unint64_t v56 = *(void *)(v60 + v54 - 8);
        v54 -= 8;
        BOOL v17 = v55 > v56;
        if (v55 != v56) {
          goto LABEL_15;
        }
      }
      unsigned int v19 = (void **)&v60;
      unsigned int v20 = v61;
      unsigned int v21 = v61;
    }
    else
    {
      uint64_t result = (unint64_t *)v64;
      unint64_t v16 = v60;
      BOOL v17 = (unint64_t)v64 > v60;
LABEL_15:
      char v18 = v17;
      if (v17) {
        unsigned int v19 = &v64;
      }
      else {
        unsigned int v19 = (void **)&v60;
      }
      unsigned int v20 = v61;
      unsigned int v21 = v61;
      if (v18) {
        unsigned int v21 = v65;
      }
    }
    if (v21 > 0x40) {
      operator new[]();
    }
    uint64_t v22 = *v19;
    if (v20 >= 0x41 && v16)
    {
      unint64_t v57 = result;
      MEMORY[0x1D25D9CB0](v16, 0x1000C8000313F17);
      uint64_t result = v57;
    }
    if (v14 >= 0x41 && result) {
      uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
    }
    unsigned int v59 = *((_DWORD *)this + 2);
    if (v59 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&__s2);
    }
    if (v22)
    {
      unsigned int v23 = v59;
      unsigned int v59 = 0;
      *(_DWORD *)(a3 + 8) = v21;
      *(void *)a3 = v22;
      *(_DWORD *)(a3 + 24) = v23;
      *(void *)(a3 + 16) = 0;
    }
    else
    {
      *(_DWORD *)(a3 + 8) = v21;
      if (v21) {
        unint64_t v24 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v21;
      }
      else {
        unint64_t v24 = 0;
      }
      *(void *)a3 = v24;
      uint64_t result = (unint64_t *)(a3 + 16);
      *(_DWORD *)(a3 + 24) = v21;
      *(void *)(a3 + 16) = v24;
    }
  }
  return result;
}

uint64_t llvm::ConstantRange::binaryXor@<X0>(const void **this@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    uint64_t v7 = *this;
    if (!memcmp(*this, this[2], ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8))
    {
      int v54 = 0;
      int64_t v55 = (unint64_t)(v6 + 63) >> 6;
      do
      {
        BOOL v56 = v55-- < 1;
        if (v56) {
          break;
        }
        unint64_t v57 = v7[v55];
        v54 += __clz(v57);
      }
      while (!v57);
      int v58 = v6 | 0xFFFFFFC0;
      if ((v6 & 0x3F) == 0) {
        int v58 = 0;
      }
      if (v54 + v58 == v6) {
        goto LABEL_94;
      }
    }
  }
  else
  {
    uint64_t v7 = *this;
    if (!((unint64_t)this[2] | (unint64_t)*this)) {
      goto LABEL_94;
    }
  }
  uint64_t v8 = *((unsigned int *)a2 + 2);
  if (v8 >= 0x41)
  {
    unsigned int v59 = *a2;
    if (memcmp(*a2, a2[2], ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8)) {
      goto LABEL_5;
    }
    int v60 = 0;
    int64_t v61 = (unint64_t)(v8 + 63) >> 6;
    do
    {
      BOOL v56 = v61-- < 1;
      if (v56) {
        break;
      }
      unint64_t v62 = v59[v61];
      v60 += __clz(v62);
    }
    while (!v62);
    int v63 = v8 | 0xFFFFFFC0;
    if ((v8 & 0x3F) == 0) {
      int v63 = 0;
    }
    if (v60 + v63 != v8)
    {
LABEL_5:
      unsigned int v75 = v6;
      if (v6 > 0x40) {
        operator new[]();
      }
      __s2 = v7;
      llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
      unsigned int v9 = v75;
      unsigned int v10 = __s2;
      unsigned int v75 = 0;
      uint64_t v11 = *((unsigned int *)this + 6);
      if (v11 > 0x40) {
        BOOL v12 = memcmp(this[2], __s2, ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8) == 0;
      }
      else {
        BOOL v12 = this[2] == __s2;
      }
      int v13 = v12;
      if (v9 >= 0x41)
      {
        if (v10)
        {
          MEMORY[0x1D25D9CB0](v10, 0x1000C8000313F17);
          if (v75 >= 0x41)
          {
            if (__s2) {
              MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
            }
          }
        }
      }
      if (v13)
      {
        unsigned int v75 = *((_DWORD *)a2 + 2);
        if (v75 > 0x40) {
          operator new[]();
        }
        __s2 = (void *)*a2;
        llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
        unsigned int v34 = v75;
        BOOL v35 = __s2;
        unsigned int v75 = 0;
        uint64_t v36 = *((unsigned int *)a2 + 6);
        if (v36 > 0x40) {
          BOOL v37 = memcmp(a2[2], __s2, ((unint64_t)(v36 + 63) >> 3) & 0x3FFFFFF8) == 0;
        }
        else {
          BOOL v37 = a2[2] == __s2;
        }
        int v38 = v37;
        if (v34 >= 0x41)
        {
          if (v35)
          {
            MEMORY[0x1D25D9CB0](v35, 0x1000C8000313F17);
            if (v75 >= 0x41)
            {
              if (__s2) {
                MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
              }
            }
          }
        }
        if (v38)
        {
          unsigned int v75 = *((_DWORD *)this + 2);
          if (v75 > 0x40) {
            operator new[]();
          }
          __s2 = (void *)*this;
          llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
          unsigned int v39 = v75;
          uint64_t v40 = __s2;
          unsigned int v75 = 0;
          uint64_t v41 = *((unsigned int *)this + 6);
          if (v41 > 0x40) {
            BOOL v42 = memcmp(this[2], __s2, ((unint64_t)(v41 + 63) >> 3) & 0x3FFFFFF8) == 0;
          }
          else {
            BOOL v42 = this[2] == __s2;
          }
          int v43 = v42;
          if (v39 >= 0x41)
          {
            if (v40)
            {
              MEMORY[0x1D25D9CB0](v40, 0x1000C8000313F17);
              if (v75 >= 0x41)
              {
                if (__s2) {
                  MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
                }
              }
            }
          }
          if (v43) {
            int v44 = this;
          }
          else {
            int v44 = 0;
          }
          unsigned int v45 = *((_DWORD *)v44 + 2);
          unsigned int v73 = v45;
          if (v45 > 0x40) {
            operator new[]();
          }
          unint64_t v46 = (unint64_t)*v44;
          int v72 = (void *)*v44;
          unsigned int v75 = *((_DWORD *)a2 + 2);
          if (v75 > 0x40) {
            operator new[]();
          }
          __s2 = (void *)*a2;
          llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
          unsigned int v47 = v75;
          int v48 = __s2;
          unsigned int v75 = 0;
          uint64_t v49 = *((unsigned int *)a2 + 6);
          if (v49 > 0x40) {
            BOOL v50 = memcmp(a2[2], __s2, ((unint64_t)(v49 + 63) >> 3) & 0x3FFFFFF8) == 0;
          }
          else {
            BOOL v50 = a2[2] == __s2;
          }
          int v51 = v50;
          if (v47 >= 0x41)
          {
            if (v48)
            {
              MEMORY[0x1D25D9CB0](v48, 0x1000C8000313F17);
              if (v75 >= 0x41)
              {
                if (__s2) {
                  MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
                }
              }
            }
          }
          if (v51) {
            unint64_t v52 = a2;
          }
          else {
            unint64_t v52 = 0;
          }
          int v72 = (void *)(v46 ^ (unint64_t)*v52);
          int v53 = v72;
          unsigned int v73 = 0;
          *(_DWORD *)(a3 + 8) = v45;
          *(void *)a3 = v53;
          unsigned int v75 = v45;
          __s2 = v53;
          uint64_t result = llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
          *(_DWORD *)(a3 + 24) = v75;
          *(void *)(a3 + 16) = __s2;
          if (v73 >= 0x41)
          {
            uint64_t result = (uint64_t)v72;
            if (v72) {
              return MEMORY[0x1D25D9CB0](v72, 0x1000C8000313F17);
            }
          }
          return result;
        }
      }
      unsigned int v75 = *((_DWORD *)a2 + 2);
      if (v75 > 0x40) {
        operator new[]();
      }
      __s2 = (void *)*a2;
      llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
      unsigned int v14 = v75;
      unsigned int v15 = __s2;
      unsigned int v75 = 0;
      uint64_t v16 = *((unsigned int *)a2 + 6);
      if (v16 > 0x40) {
        BOOL v17 = memcmp(a2[2], __s2, ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8) == 0;
      }
      else {
        BOOL v17 = a2[2] == __s2;
      }
      int v18 = v17;
      if (v14 >= 0x41)
      {
        if (v15)
        {
          MEMORY[0x1D25D9CB0](v15, 0x1000C8000313F17);
          if (v75 >= 0x41)
          {
            if (__s2) {
              MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
            }
          }
        }
      }
      if (v18)
      {
        unsigned int v75 = *((_DWORD *)a2 + 2);
        if (v75 > 0x40) {
          operator new[]();
        }
        __s2 = (void *)*a2;
        llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
        unsigned int v19 = v75;
        unsigned int v20 = __s2;
        unsigned int v75 = 0;
        uint64_t v21 = *((unsigned int *)a2 + 6);
        if (v21 > 0x40) {
          BOOL v22 = memcmp(a2[2], __s2, ((unint64_t)(v21 + 63) >> 3) & 0x3FFFFFF8) == 0;
        }
        else {
          BOOL v22 = a2[2] == __s2;
        }
        int v23 = v22;
        if (v19 >= 0x41)
        {
          if (v20)
          {
            MEMORY[0x1D25D9CB0](v20, 0x1000C8000313F17);
            if (v75 >= 0x41)
            {
              if (__s2) {
                MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
              }
            }
          }
        }
        if (v23) {
          unint64_t v24 = a2;
        }
        else {
          unint64_t v24 = 0;
        }
        unsigned int v25 = *((_DWORD *)v24 + 2);
        if (!v25) {
          goto LABEL_162;
        }
        if (v25 <= 0x40)
        {
          if (*v24 != (const void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v25)) {
            goto LABEL_34;
          }
LABEL_162:
          uint64_t v70 = a3;
          unint64_t v71 = this;
          return (uint64_t)llvm::ConstantRange::binaryNot((llvm::ConstantRange *)v71, v70);
        }
        if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v24) == v25) {
          goto LABEL_162;
        }
      }
LABEL_34:
      unsigned int v75 = *((_DWORD *)this + 2);
      if (v75 > 0x40) {
        operator new[]();
      }
      __s2 = (void *)*this;
      uint64_t result = llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
      unsigned int v27 = v75;
      BOOL v28 = __s2;
      unsigned int v75 = 0;
      uint64_t v29 = *((unsigned int *)this + 6);
      if (v29 > 0x40)
      {
        uint64_t result = memcmp(this[2], __s2, ((unint64_t)(v29 + 63) >> 3) & 0x3FFFFFF8);
        BOOL v30 = result == 0;
      }
      else
      {
        BOOL v30 = this[2] == __s2;
      }
      int v31 = v30;
      if (v27 >= 0x41)
      {
        if (v28)
        {
          uint64_t result = MEMORY[0x1D25D9CB0](v28, 0x1000C8000313F17);
          if (v75 >= 0x41)
          {
            uint64_t result = (uint64_t)__s2;
            if (__s2) {
              uint64_t result = MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
            }
          }
        }
      }
      if (!v31) {
        goto LABEL_42;
      }
      unsigned int v75 = *((_DWORD *)this + 2);
      if (v75 > 0x40) {
        operator new[]();
      }
      __s2 = (void *)*this;
      llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
      unsigned int v64 = v75;
      unsigned int v65 = __s2;
      unsigned int v75 = 0;
      uint64_t v66 = *((unsigned int *)this + 6);
      if (v66 > 0x40) {
        BOOL v67 = memcmp(this[2], __s2, ((unint64_t)(v66 + 63) >> 3) & 0x3FFFFFF8) == 0;
      }
      else {
        BOOL v67 = this[2] == __s2;
      }
      int v68 = v67;
      if (v64 >= 0x41)
      {
        if (v65)
        {
          MEMORY[0x1D25D9CB0](v65, 0x1000C8000313F17);
          if (v75 >= 0x41)
          {
            if (__s2) {
              MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
            }
          }
        }
      }
      if (v68) {
        uint64_t result = (uint64_t)this;
      }
      else {
        uint64_t result = 0;
      }
      unsigned int v69 = *(_DWORD *)(result + 8);
      if (!v69) {
        goto LABEL_110;
      }
      if (v69 > 0x40)
      {
        uint64_t result = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)result);
        if (result == v69) {
          goto LABEL_110;
        }
      }
      else if (*(void *)result == 0xFFFFFFFFFFFFFFFFLL >> -(char)v69)
      {
LABEL_110:
        uint64_t v70 = a3;
        unint64_t v71 = a2;
        return (uint64_t)llvm::ConstantRange::binaryNot((llvm::ConstantRange *)v71, v70);
      }
LABEL_42:
      unsigned int v32 = *((_DWORD *)this + 2);
      *(_DWORD *)(a3 + 8) = v32;
      if (v32 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)a3);
      }
      if (v32) {
        unint64_t v33 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v32;
      }
      else {
        unint64_t v33 = 0;
      }
      *(void *)a3 = v33;
      *(_DWORD *)(a3 + 24) = v32;
      *(void *)(a3 + 16) = v33;
      return result;
    }
  }
  else if ((unint64_t)a2[2] | (unint64_t)*a2)
  {
    goto LABEL_5;
  }
LABEL_94:

  return (uint64_t)llvm::ConstantRange::ConstantRange((unint64_t *)a3, v6, 0);
}

void llvm::ConstantRange::overflowingBinaryOp(llvm::ConstantRange *a1@<X2>, llvm::ConstantRange *a2@<X3>, llvm::ConstantRange *a3@<X0>, int a4@<W1>, unint64_t *a5@<X8>)
{
  if (a4 == 13)
  {
    llvm::ConstantRange::addWithNoWrap(a3, a1, (char)a2, 0, (uint64_t)a5);
  }
  else if (a4 == 15)
  {
    llvm::ConstantRange::subWithNoWrap((uint64_t)a3, a1, (char)a2, 0, (uint64_t)a5);
  }
  else
  {
    llvm::ConstantRange::binaryOp(a1, (unsigned int *)a3, a4, a5);
  }
}

unint64_t *llvm::ConstantRange::addWithNoWrap@<X0>(llvm::ConstantRange *this@<X0>, llvm::ConstantRange *a2@<X1>, char a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *((unsigned int *)this + 2);
  if (v9 >= 0x41)
  {
    unsigned int v10 = *(void **)this;
    unint64_t v11 = *((void *)this + 2);
    if (!memcmp(*(const void **)this, (const void *)v11, ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8))
    {
      int v17 = 0;
      int64_t v18 = (unint64_t)(v9 + 63) >> 6;
      do
      {
        BOOL v19 = v18-- < 1;
        if (v19) {
          break;
        }
        unint64_t v20 = v10[v18];
        v17 += __clz(v20);
      }
      while (!v20);
      int v21 = v9 | 0xFFFFFFC0;
      if ((v9 & 0x3F) == 0) {
        int v21 = 0;
      }
      if (v17 + v21 == v9) {
        goto LABEL_49;
      }
    }
  }
  else
  {
    unsigned int v10 = *(void **)this;
    unint64_t v11 = *((void *)this + 2);
    if (!(v11 | *(void *)this)) {
      goto LABEL_49;
    }
  }
  uint64_t v12 = *((unsigned int *)a2 + 2);
  if (v12 >= 0x41)
  {
    int v13 = *(void **)a2;
    unint64_t v14 = *((void *)a2 + 2);
    if (memcmp(*(const void **)a2, (const void *)v14, ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8)) {
      goto LABEL_5;
    }
    int v22 = 0;
    int64_t v23 = (unint64_t)(v12 + 63) >> 6;
    do
    {
      BOOL v19 = v23-- < 1;
      if (v19) {
        break;
      }
      unint64_t v24 = v13[v23];
      v22 += __clz(v24);
    }
    while (!v24);
    int v25 = v12 | 0xFFFFFFC0;
    if ((v12 & 0x3F) == 0) {
      int v25 = 0;
    }
    if (v22 + v25 != v12)
    {
LABEL_5:
      if (v9 > 0x40)
      {
        if (!memcmp(v10, (const void *)v11, ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8)
          && llvm::APInt::countTrailingOnesSlowCase(this) == v9)
        {
LABEL_26:
          if (v12 > 0x40)
          {
            if (!memcmp(v13, (const void *)v14, ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8)
              && llvm::APInt::countTrailingOnesSlowCase(a2) == v12)
            {
              goto LABEL_30;
            }
          }
          else if (v13 == (void *)v14 && (!v12 || v14 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v12))
          {
LABEL_30:
            *(_DWORD *)(a5 + 8) = v9;
            if (v9 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)a5);
            }
            if (v9) {
              unint64_t v16 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
            }
            else {
              unint64_t v16 = 0;
            }
            *(void *)a5 = v16;
            uint64_t result = (unint64_t *)(a5 + 16);
            *(_DWORD *)(a5 + 24) = v9;
            *(void *)(a5 + 16) = v16;
            return result;
          }
        }
      }
      else if (v10 == (void *)v11 && (!v9 || v11 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v9))
      {
        goto LABEL_26;
      }
      uint64_t result = (unint64_t *)llvm::ConstantRange::add((uint64_t)this, a2, a5);
      if ((a3 & 2) != 0)
      {
        llvm::ConstantRange::sadd_sat((const void **)this, (const void **)a2, (uint64_t)&v29);
        uint64_t result = (unint64_t *)llvm::ConstantRange::intersectWith(a5, (llvm::ConstantRange *)&v29, a4, (uint64_t)&v33);
        if (*(_DWORD *)(a5 + 8) >= 0x41u)
        {
          uint64_t result = *(unint64_t **)a5;
          if (*(void *)a5) {
            uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
          }
        }
        *(void *)a5 = v33;
        *(_DWORD *)(a5 + 8) = v34;
        unsigned int v34 = 0;
        if (*(_DWORD *)(a5 + 24) >= 0x41u && (uint64_t result = *(unint64_t **)(a5 + 16)) != 0)
        {
          uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
          unsigned int v26 = v34;
          *(void *)(a5 + 16) = v35;
          *(_DWORD *)(a5 + 24) = v36;
          int v36 = 0;
          if (v26 >= 0x41)
          {
            uint64_t result = v33;
            if (v33) {
              uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v33, 0x1000C8000313F17);
            }
          }
        }
        else
        {
          *(void *)(a5 + 16) = v35;
          *(_DWORD *)(a5 + 24) = v36;
          int v36 = 0;
        }
        if (v32 >= 0x41)
        {
          uint64_t result = v31;
          if (v31) {
            uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v31, 0x1000C8000313F17);
          }
        }
        if (v30 >= 0x41)
        {
          uint64_t result = v29;
          if (v29) {
            uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
          }
        }
      }
      if (a3)
      {
        llvm::ConstantRange::uadd_sat((const void **)this, (const void **)a2, (uint64_t)&v29);
        uint64_t result = (unint64_t *)llvm::ConstantRange::intersectWith(a5, (llvm::ConstantRange *)&v29, a4, (uint64_t)&v33);
        if (*(_DWORD *)(a5 + 8) >= 0x41u)
        {
          uint64_t result = *(unint64_t **)a5;
          if (*(void *)a5) {
            uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
          }
        }
        *(void *)a5 = v33;
        *(_DWORD *)(a5 + 8) = v34;
        unsigned int v34 = 0;
        if (*(_DWORD *)(a5 + 24) >= 0x41u && (uint64_t result = *(unint64_t **)(a5 + 16)) != 0)
        {
          uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
          unsigned int v27 = v34;
          *(void *)(a5 + 16) = v35;
          *(_DWORD *)(a5 + 24) = v36;
          int v36 = 0;
          if (v27 >= 0x41)
          {
            uint64_t result = v33;
            if (v33) {
              uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v33, 0x1000C8000313F17);
            }
          }
        }
        else
        {
          *(void *)(a5 + 16) = v35;
          *(_DWORD *)(a5 + 24) = v36;
          int v36 = 0;
        }
        if (v32 >= 0x41)
        {
          uint64_t result = v31;
          if (v31) {
            uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v31, 0x1000C8000313F17);
          }
        }
        if (v30 >= 0x41)
        {
          uint64_t result = v29;
          if (v29) {
            return (unint64_t *)MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
          }
        }
      }
      return result;
    }
  }
  else
  {
    int v13 = *(void **)a2;
    unint64_t v14 = *((void *)a2 + 2);
    if (v14 | *(void *)a2) {
      goto LABEL_5;
    }
  }
LABEL_49:

  return llvm::ConstantRange::ConstantRange((unint64_t *)a5, v9, 0);
}

uint64_t llvm::ConstantRange::subWithNoWrap@<X0>(uint64_t this@<X0>, llvm::ConstantRange *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = (llvm::APInt *)this;
  uint64_t v9 = *(unsigned int *)(this + 8);
  if (v9 >= 0x41)
  {
    uint64_t v22 = a4;
    unsigned int v10 = *(void **)this;
    unint64_t v11 = *(void *)(this + 16);
    this = memcmp(*(const void **)this, (const void *)v11, ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8);
    if (!this)
    {
      int v26 = 0;
      int64_t v27 = (unint64_t)(v9 + 63) >> 6;
      do
      {
        BOOL v28 = v27-- < 1;
        if (v28) {
          break;
        }
        unint64_t v29 = v10[v27];
        v26 += __clz(v29);
      }
      while (!v29);
      int v30 = v9 | 0xFFFFFFC0;
      if ((v9 & 0x3F) == 0) {
        int v30 = 0;
      }
      if (v26 + v30 == v9)
      {
        *(_DWORD *)(a5 + 8) = v9;
        goto LABEL_80;
      }
    }
    a4 = v22;
  }
  else
  {
    unsigned int v10 = *(void **)this;
    unint64_t v11 = *(void *)(this + 16);
    if (!(v11 | *(void *)this))
    {
      *(_DWORD *)(a5 + 8) = v9;
LABEL_77:
      unint64_t v20 = 0;
      *(void *)a5 = 0;
LABEL_78:
      *(_DWORD *)(a5 + 24) = v9;
      *(void *)(a5 + 16) = v20;
      return this;
    }
  }
  uint64_t v12 = *((unsigned int *)a2 + 2);
  if (v12 < 0x41)
  {
    int v13 = *(void **)a2;
    unint64_t v14 = *((void *)a2 + 2);
    if (v14 | *(void *)a2) {
      goto LABEL_5;
    }
LABEL_76:
    *(_DWORD *)(a5 + 8) = v9;
    if (v9 <= 0x40) {
      goto LABEL_77;
    }
LABEL_80:
    uint64_t v35 = (llvm::APInt *)a5;
    goto LABEL_81;
  }
  unsigned int v41 = a4;
  int v13 = *(void **)a2;
  unint64_t v14 = *((void *)a2 + 2);
  this = memcmp(*(const void **)a2, (const void *)v14, ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8);
  if (this)
  {
    a4 = v41;
  }
  else
  {
    int v31 = 0;
    int64_t v32 = (unint64_t)(v12 + 63) >> 6;
    do
    {
      BOOL v28 = v32-- < 1;
      if (v28) {
        break;
      }
      unint64_t v33 = v13[v32];
      v31 += __clz(v33);
    }
    while (!v33);
    int v34 = v12 | 0xFFFFFFC0;
    if ((v12 & 0x3F) == 0) {
      int v34 = 0;
    }
    a4 = v41;
    if (v31 + v34 == v12) {
      goto LABEL_76;
    }
  }
LABEL_5:
  if (v9 > 0x40)
  {
    int64_t v23 = (const void *)v11;
    uint64_t v24 = a4;
    int v25 = memcmp(v10, v23, ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8);
    a4 = v24;
    if (v25) {
      goto LABEL_7;
    }
    this = llvm::APInt::countTrailingOnesSlowCase(v7);
    a4 = v24;
    if (this != v9) {
      goto LABEL_7;
    }
  }
  else if (v10 != (void *)v11 || v9 && v11 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v9)
  {
    goto LABEL_7;
  }
  if (v12 > 0x40)
  {
    uint64_t v39 = a4;
    int v40 = memcmp(v13, (const void *)v14, ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8);
    a4 = v39;
    if (!v40)
    {
      this = llvm::APInt::countTrailingOnesSlowCase(a2);
      a4 = v39;
      if (this == v12) {
        goto LABEL_44;
      }
    }
  }
  else if (v13 == (void *)v14 && (!v12 || v14 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v12))
  {
LABEL_44:
    *(_DWORD *)(a5 + 8) = v9;
    if (v9 <= 0x40)
    {
      if (v9) {
        unint64_t v20 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
      }
      else {
        unint64_t v20 = 0;
      }
      *(void *)a5 = v20;
      goto LABEL_78;
    }
    uint64_t v35 = (llvm::APInt *)a5;
LABEL_81:
    llvm::APInt::initSlowCase(v35);
  }
LABEL_7:
  uint64_t v15 = a4;
  this = (uint64_t)llvm::ConstantRange::sub(v7, a2, (uint64_t)&v50);
  if ((a3 & 2) != 0)
  {
    llvm::ConstantRange::ssub_sat((const void **)v7, (const void **)a2, (uint64_t)&v42);
    this = llvm::ConstantRange::intersectWith((uint64_t)&v50, (llvm::ConstantRange *)&v42, v15, (uint64_t)&v46);
    if (v51 >= 0x41)
    {
      this = v50;
      if (v50) {
        this = MEMORY[0x1D25D9CB0](v50, 0x1000C8000313F17);
      }
    }
    uint64_t v50 = v46;
    unsigned int v51 = v47;
    unsigned int v47 = 0;
    if (v53 >= 0x41 && (this = v52) != 0)
    {
      this = MEMORY[0x1D25D9CB0](v52, 0x1000C8000313F17);
      uint64_t v52 = v48;
      unsigned int v53 = v49;
      unsigned int v49 = 0;
      if (v47 >= 0x41)
      {
        this = v46;
        if (v46) {
          this = MEMORY[0x1D25D9CB0](v46, 0x1000C8000313F17);
        }
      }
    }
    else
    {
      uint64_t v52 = v48;
      unsigned int v53 = v49;
      unsigned int v49 = 0;
    }
    if (v45 >= 0x41)
    {
      this = v44;
      if (v44) {
        this = MEMORY[0x1D25D9CB0](v44, 0x1000C8000313F17);
      }
    }
    if (v43 >= 0x41)
    {
      this = v42;
      if (v42) {
        this = MEMORY[0x1D25D9CB0](v42, 0x1000C8000313F17);
      }
    }
  }
  if (a3)
  {
    llvm::ConstantRange::getUnsignedMax((char **)v7, (uint64_t)&v46);
    llvm::ConstantRange::getUnsignedMin((uint64_t)a2, (uint64_t)&v42);
    unsigned int v16 = v47;
    if (v47 > 0x40)
    {
      unint64_t v17 = v46;
      this = v42;
      unint64_t v36 = (((unint64_t)v47 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v36)
        {
          int v18 = 0;
          goto LABEL_18;
        }
        unint64_t v37 = *(void *)(v46 + v36 - 8);
        unint64_t v38 = *(void *)(v42 + v36 - 8);
        v36 -= 8;
      }
      while (v37 == v38);
      if (v37 > v38) {
        int v18 = 1;
      }
      else {
        int v18 = -1;
      }
    }
    else
    {
      unint64_t v17 = v46;
      this = v42;
      if (v46 < v42) {
        int v18 = -1;
      }
      else {
        int v18 = v46 > v42;
      }
    }
LABEL_18:
    if (v43 >= 0x41 && this != 0) {
      this = MEMORY[0x1D25D9CB0]();
    }
    if (v16 >= 0x41 && v17) {
      this = MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
    }
    if (v18 < 0)
    {
      unsigned int v21 = *((_DWORD *)v7 + 2);
      *(_DWORD *)(a5 + 8) = v21;
      if (v21 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)a5);
      }
      *(void *)a5 = 0;
      *(_DWORD *)(a5 + 24) = v21;
      *(void *)(a5 + 16) = 0;
      goto LABEL_33;
    }
    llvm::ConstantRange::usub_sat((const void **)v7, (const void **)a2, (uint64_t)&v42);
    this = llvm::ConstantRange::intersectWith((uint64_t)&v50, (llvm::ConstantRange *)&v42, v15, (uint64_t)&v46);
    if (v51 >= 0x41)
    {
      this = v50;
      if (v50) {
        this = MEMORY[0x1D25D9CB0](v50, 0x1000C8000313F17);
      }
    }
    uint64_t v50 = v46;
    unsigned int v51 = v47;
    unsigned int v47 = 0;
    if (v53 >= 0x41 && (this = v52) != 0)
    {
      this = MEMORY[0x1D25D9CB0](v52, 0x1000C8000313F17);
      uint64_t v52 = v48;
      unsigned int v53 = v49;
      unsigned int v49 = 0;
      if (v47 >= 0x41)
      {
        this = v46;
        if (v46) {
          this = MEMORY[0x1D25D9CB0](v46, 0x1000C8000313F17);
        }
      }
    }
    else
    {
      uint64_t v52 = v48;
      unsigned int v53 = v49;
      unsigned int v49 = 0;
    }
    if (v45 >= 0x41)
    {
      this = v44;
      if (v44) {
        this = MEMORY[0x1D25D9CB0](v44, 0x1000C8000313F17);
      }
    }
    if (v43 >= 0x41)
    {
      this = v42;
      if (v42) {
        this = MEMORY[0x1D25D9CB0](v42, 0x1000C8000313F17);
      }
    }
  }
  *(_DWORD *)(a5 + 8) = v51;
  *(void *)a5 = v50;
  *(_DWORD *)(a5 + 24) = v53;
  *(void *)(a5 + 16) = v52;
  unsigned int v51 = 0;
  unsigned int v53 = 0;
LABEL_33:
  if (v53 >= 0x41)
  {
    this = v52;
    if (v52) {
      this = MEMORY[0x1D25D9CB0](v52, 0x1000C8000313F17);
    }
  }
  if (v51 >= 0x41)
  {
    this = v50;
    if (v50) {
      return MEMORY[0x1D25D9CB0](v50, 0x1000C8000313F17);
    }
  }
  return this;
}

BOOL llvm::ConstantRange::isIntrinsicSupported(llvm::ConstantRange *this)
{
  int v1 = (int)this;
  BOOL result = 1;
  if ((v1 - 262) > 0x31 || ((1 << (v1 - 6)) & 0x2184000203001) == 0) {
    return v1 == 1;
  }
  return result;
}

unint64_t *llvm::ConstantRange::intrinsic@<X0>(const void **this@<X1>, int a2@<W0>, unint64_t *a3@<X8>)
{
  if (a2 == 306)
  {
    unsigned int v5 = this + 4;
    return llvm::ConstantRange::umin(this, v5, a3);
  }
  else if (a2 > 282)
  {
    uint64_t v8 = this + 4;
    if (a2 > 310)
    {
      return (unint64_t *)llvm::ConstantRange::usub_sat(this, v8, (uint64_t)a3);
    }
    else if (a2 == 305)
    {
      return llvm::ConstantRange::umax(this, (char **)v8, a3);
    }
    else if (a2 == 300)
    {
      return (unint64_t *)llvm::ConstantRange::uadd_sat(this, v8, (uint64_t)a3);
    }
    else
    {
      return (unint64_t *)llvm::ConstantRange::ssub_sat(this, v8, (uint64_t)a3);
    }
  }
  else if (a2 > 274)
  {
    uint64_t v9 = (const llvm::ConstantRange *)(this + 4);
    return llvm::ConstantRange::smin(this, v9, a3);
  }
  else if (a2 == 274)
  {
    uint64_t v7 = (const llvm::ConstantRange *)(this + 4);
    return (unint64_t *)llvm::ConstantRange::smax(this, v7, a3);
  }
  else if (a2 == 1)
  {
    unsigned int v10 = (void **)(this + 4);
    unsigned int v25 = *((_DWORD *)this + 10);
    if (v25 > 0x40) {
      operator new[]();
    }
    __s2 = *v10;
    llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
    unsigned int v11 = v25;
    uint64_t v12 = __s2;
    unsigned int v25 = 0;
    uint64_t v13 = *((unsigned int *)this + 14);
    if (v13 > 0x40)
    {
      int64_t v23 = __s2;
      unsigned int v21 = v11;
      int v22 = memcmp(this[6], __s2, ((unint64_t)(v13 + 63) >> 3) & 0x3FFFFFF8);
      unsigned int v11 = v21;
      uint64_t v12 = v23;
      BOOL v14 = v22 == 0;
    }
    else
    {
      BOOL v14 = this[6] == __s2;
    }
    int v15 = v14;
    if (v11 >= 0x41)
    {
      if (v12)
      {
        MEMORY[0x1D25D9CB0](v12, 0x1000C8000313F17);
        if (v25 >= 0x41)
        {
          if (__s2) {
            MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
          }
        }
      }
    }
    if (v15) {
      unsigned int v16 = v10;
    }
    else {
      unsigned int v16 = 0;
    }
    unsigned int v17 = *((_DWORD *)v16 + 2);
    if (v17 > 0x40) {
      BOOL v18 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v16) == v17;
    }
    else {
      BOOL v18 = *v16 == 0;
    }
    int v19 = v18;
    return llvm::ConstantRange::abs((llvm::ConstantRange *)this, v19 ^ 1u, (uint64_t)a3);
  }
  else
  {
    unint64_t v20 = this + 4;
    return (unint64_t *)llvm::ConstantRange::sadd_sat(this, v20, (uint64_t)a3);
  }
}

uint64_t llvm::ConstantRange::uadd_sat@<X0>(const void **this@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    BOOL v14 = *this;
    if (!memcmp(*this, this[2], ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8))
    {
      int v15 = 0;
      int64_t v16 = (unint64_t)(v6 + 63) >> 6;
      do
      {
        BOOL v17 = v16-- < 1;
        if (v17) {
          break;
        }
        unint64_t v18 = v14[v16];
        v15 += __clz(v18);
      }
      while (!v18);
      int v19 = v6 | 0xFFFFFFC0;
      if ((v6 & 0x3F) == 0) {
        int v19 = 0;
      }
      if (v15 + v19 == v6) {
        goto LABEL_32;
      }
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    goto LABEL_32;
  }
  uint64_t v7 = *((unsigned int *)a2 + 2);
  if (v7 >= 0x41)
  {
    unint64_t v20 = *a2;
    if (memcmp(*a2, a2[2], ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8)) {
      goto LABEL_5;
    }
    int v21 = 0;
    int64_t v22 = (unint64_t)(v7 + 63) >> 6;
    do
    {
      BOOL v17 = v22-- < 1;
      if (v17) {
        break;
      }
      unint64_t v23 = v20[v22];
      v21 += __clz(v23);
    }
    while (!v23);
    int v24 = v7 | 0xFFFFFFC0;
    if ((v7 & 0x3F) == 0) {
      int v24 = 0;
    }
    if (v21 + v24 != v7)
    {
LABEL_5:
      llvm::ConstantRange::getUnsignedMin((uint64_t)this, (uint64_t)&v29);
      llvm::ConstantRange::getUnsignedMin((uint64_t)a2, (uint64_t)&v27);
      llvm::APInt::uadd_sat((llvm::APInt *)&v29, (const llvm::APInt *)&v27, (uint64_t)&__s1);
      if (v28 >= 0x41 && v27) {
        MEMORY[0x1D25D9CB0](v27, 0x1000C8000313F17);
      }
      if (v30 >= 0x41 && v29) {
        MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
      }
      llvm::ConstantRange::getUnsignedMax((char **)this, (uint64_t)&v29);
      llvm::ConstantRange::getUnsignedMax((char **)a2, (uint64_t)&v27);
      llvm::APInt::uadd_sat((llvm::APInt *)&v29, (const llvm::APInt *)&v27, (uint64_t)&__s2);
      uint64_t result = llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
      unsigned int v9 = v26;
      unsigned int v10 = __s2;
      unsigned int v26 = 0;
      if (v28 >= 0x41)
      {
        uint64_t result = v27;
        if (v27) {
          uint64_t result = MEMORY[0x1D25D9CB0](v27, 0x1000C8000313F17);
        }
      }
      if (v30 >= 0x41)
      {
        uint64_t result = v29;
        if (v29) {
          uint64_t result = MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
        }
      }
      uint64_t v11 = v32;
      uint64_t v12 = __s1;
      unsigned int v32 = 0;
      if (v11 > 0x40)
      {
        uint64_t result = memcmp(__s1, v10, ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8);
        if (!result)
        {
          *(_DWORD *)(a3 + 8) = v11;
          llvm::APInt::initSlowCase((llvm::APInt *)a3);
        }
      }
      else if (__s1 == v10)
      {
        *(_DWORD *)(a3 + 8) = v11;
        if (v11) {
          unint64_t v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
        }
        else {
          unint64_t v13 = 0;
        }
        *(void *)a3 = v13;
        uint64_t result = a3 + 16;
        *(_DWORD *)(a3 + 24) = v11;
        *(void *)(a3 + 16) = v13;
        if (v9 >= 0x41 && v10) {
          uint64_t result = MEMORY[0x1D25D9CB0](v10, 0x1000C8000313F17);
        }
        goto LABEL_15;
      }
      *(_DWORD *)(a3 + 8) = v11;
      *(void *)a3 = v12;
      *(_DWORD *)(a3 + 24) = v9;
      *(void *)(a3 + 16) = v10;
LABEL_15:
      if (v32 >= 0x41)
      {
        uint64_t result = (uint64_t)__s1;
        if (__s1) {
          return MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
        }
      }
      return result;
    }
  }
  else if ((unint64_t)a2[2] | (unint64_t)*a2)
  {
    goto LABEL_5;
  }
LABEL_32:

  return (uint64_t)llvm::ConstantRange::ConstantRange((unint64_t *)a3, v6, 0);
}

uint64_t llvm::ConstantRange::usub_sat@<X0>(const void **this@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    if (!memcmp(*this, this[2], ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) == v6)
    {
      goto LABEL_22;
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    goto LABEL_22;
  }
  uint64_t v7 = *((unsigned int *)a2 + 2);
  if (v7 >= 0x41)
  {
    if (memcmp(*a2, a2[2], ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8)
      || llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a2) != v7)
    {
      goto LABEL_5;
    }
LABEL_22:
    return (uint64_t)llvm::ConstantRange::ConstantRange((unint64_t *)a3, v6, 0);
  }
  if (!((unint64_t)a2[2] | (unint64_t)*a2)) {
    goto LABEL_22;
  }
LABEL_5:
  llvm::ConstantRange::getUnsignedMin((uint64_t)this, (uint64_t)&v18);
  llvm::ConstantRange::getUnsignedMax((char **)a2, (uint64_t)&v16);
  llvm::APInt::usub_sat((llvm::APInt *)&v18, (const llvm::APInt *)&v16, (uint64_t)&__s1);
  if (v17 >= 0x41 && v16) {
    MEMORY[0x1D25D9CB0](v16, 0x1000C8000313F17);
  }
  if (v19 >= 0x41 && v18) {
    MEMORY[0x1D25D9CB0](v18, 0x1000C8000313F17);
  }
  llvm::ConstantRange::getUnsignedMax((char **)this, (uint64_t)&v18);
  llvm::ConstantRange::getUnsignedMin((uint64_t)a2, (uint64_t)&v16);
  llvm::APInt::usub_sat((llvm::APInt *)&v18, (const llvm::APInt *)&v16, (uint64_t)&__s2);
  uint64_t result = llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  unsigned int v9 = v15;
  unsigned int v10 = __s2;
  unsigned int v15 = 0;
  if (v17 >= 0x41)
  {
    uint64_t result = v16;
    if (v16) {
      uint64_t result = MEMORY[0x1D25D9CB0](v16, 0x1000C8000313F17);
    }
  }
  if (v19 >= 0x41)
  {
    uint64_t result = v18;
    if (v18) {
      uint64_t result = MEMORY[0x1D25D9CB0](v18, 0x1000C8000313F17);
    }
  }
  unsigned int v11 = v21;
  uint64_t v12 = __s1;
  if (v21 > 0x40)
  {
    uint64_t result = memcmp(__s1, v10, (((unint64_t)v21 + 63) >> 3) & 0x3FFFFFF8);
    if (!result)
    {
      *(_DWORD *)(a3 + 8) = v11;
      llvm::APInt::initSlowCase((llvm::APInt *)a3);
    }
    goto LABEL_11;
  }
  if (__s1 != v10)
  {
LABEL_11:
    *(_DWORD *)(a3 + 8) = v11;
    *(void *)a3 = v12;
    *(_DWORD *)(a3 + 24) = v9;
    *(void *)(a3 + 16) = v10;
    return result;
  }
  *(_DWORD *)(a3 + 8) = v21;
  if (v11) {
    unint64_t v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
  }
  else {
    unint64_t v13 = 0;
  }
  *(void *)a3 = v13;
  uint64_t result = a3 + 16;
  *(_DWORD *)(a3 + 24) = v11;
  *(void *)(a3 + 16) = v13;
  if (v9 >= 0x41 && v10) {
    uint64_t result = MEMORY[0x1D25D9CB0](v10, 0x1000C8000313F17);
  }
  if (v11 >= 0x41)
  {
    if (v12) {
      return MEMORY[0x1D25D9CB0](v12, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t llvm::ConstantRange::sadd_sat@<X0>(const void **this@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    BOOL v14 = *this;
    if (!memcmp(*this, this[2], ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8))
    {
      int v15 = 0;
      int64_t v16 = (unint64_t)(v6 + 63) >> 6;
      do
      {
        BOOL v17 = v16-- < 1;
        if (v17) {
          break;
        }
        unint64_t v18 = v14[v16];
        v15 += __clz(v18);
      }
      while (!v18);
      int v19 = v6 | 0xFFFFFFC0;
      if ((v6 & 0x3F) == 0) {
        int v19 = 0;
      }
      if (v15 + v19 == v6) {
        goto LABEL_32;
      }
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    goto LABEL_32;
  }
  uint64_t v7 = *((unsigned int *)a2 + 2);
  if (v7 >= 0x41)
  {
    unint64_t v20 = *a2;
    if (memcmp(*a2, a2[2], ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8)) {
      goto LABEL_5;
    }
    int v21 = 0;
    int64_t v22 = (unint64_t)(v7 + 63) >> 6;
    do
    {
      BOOL v17 = v22-- < 1;
      if (v17) {
        break;
      }
      unint64_t v23 = v20[v22];
      v21 += __clz(v23);
    }
    while (!v23);
    int v24 = v7 | 0xFFFFFFC0;
    if ((v7 & 0x3F) == 0) {
      int v24 = 0;
    }
    if (v21 + v24 != v7)
    {
LABEL_5:
      llvm::ConstantRange::getSignedMin((uint64_t)this, (uint64_t)&v29);
      llvm::ConstantRange::getSignedMin((uint64_t)a2, (uint64_t)&v27);
      llvm::APInt::sadd_sat((llvm::APInt *)&v29, (const llvm::APInt *)&v27, (uint64_t)&__s1);
      if (v28 >= 0x41 && v27) {
        MEMORY[0x1D25D9CB0](v27, 0x1000C8000313F17);
      }
      if (v30 >= 0x41 && v29) {
        MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
      }
      llvm::ConstantRange::getSignedMax(this, (uint64_t)&v29);
      llvm::ConstantRange::getSignedMax(a2, (uint64_t)&v27);
      llvm::APInt::sadd_sat((llvm::APInt *)&v29, (const llvm::APInt *)&v27, (uint64_t)&__s2);
      uint64_t result = llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
      unsigned int v9 = v26;
      unsigned int v10 = __s2;
      unsigned int v26 = 0;
      if (v28 >= 0x41)
      {
        uint64_t result = v27;
        if (v27) {
          uint64_t result = MEMORY[0x1D25D9CB0](v27, 0x1000C8000313F17);
        }
      }
      if (v30 >= 0x41)
      {
        uint64_t result = v29;
        if (v29) {
          uint64_t result = MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
        }
      }
      uint64_t v11 = v32;
      uint64_t v12 = __s1;
      unsigned int v32 = 0;
      if (v11 > 0x40)
      {
        uint64_t result = memcmp(__s1, v10, ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8);
        if (!result)
        {
          *(_DWORD *)(a3 + 8) = v11;
          llvm::APInt::initSlowCase((llvm::APInt *)a3);
        }
      }
      else if (__s1 == v10)
      {
        *(_DWORD *)(a3 + 8) = v11;
        if (v11) {
          unint64_t v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
        }
        else {
          unint64_t v13 = 0;
        }
        *(void *)a3 = v13;
        uint64_t result = a3 + 16;
        *(_DWORD *)(a3 + 24) = v11;
        *(void *)(a3 + 16) = v13;
        if (v9 >= 0x41 && v10) {
          uint64_t result = MEMORY[0x1D25D9CB0](v10, 0x1000C8000313F17);
        }
        goto LABEL_15;
      }
      *(_DWORD *)(a3 + 8) = v11;
      *(void *)a3 = v12;
      *(_DWORD *)(a3 + 24) = v9;
      *(void *)(a3 + 16) = v10;
LABEL_15:
      if (v32 >= 0x41)
      {
        uint64_t result = (uint64_t)__s1;
        if (__s1) {
          return MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
        }
      }
      return result;
    }
  }
  else if ((unint64_t)a2[2] | (unint64_t)*a2)
  {
    goto LABEL_5;
  }
LABEL_32:

  return (uint64_t)llvm::ConstantRange::ConstantRange((unint64_t *)a3, v6, 0);
}

uint64_t llvm::ConstantRange::ssub_sat@<X0>(const void **this@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    if (!memcmp(*this, this[2], ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) == v6)
    {
      goto LABEL_22;
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    goto LABEL_22;
  }
  uint64_t v7 = *((unsigned int *)a2 + 2);
  if (v7 >= 0x41)
  {
    if (memcmp(*a2, a2[2], ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8)
      || llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a2) != v7)
    {
LABEL_5:
      llvm::ConstantRange::getSignedMin((uint64_t)this, (uint64_t)&v18);
      llvm::ConstantRange::getSignedMax(a2, (uint64_t)&v16);
      llvm::APInt::ssub_sat((llvm::APInt *)&v18, (const llvm::APInt *)&v16, (llvm::APInt *)&__s1);
      if (v17 >= 0x41 && v16) {
        MEMORY[0x1D25D9CB0](v16, 0x1000C8000313F17);
      }
      if (v19 >= 0x41 && v18) {
        MEMORY[0x1D25D9CB0](v18, 0x1000C8000313F17);
      }
      llvm::ConstantRange::getSignedMax(this, (uint64_t)&v18);
      llvm::ConstantRange::getSignedMin((uint64_t)a2, (uint64_t)&v16);
      llvm::APInt::ssub_sat((llvm::APInt *)&v18, (const llvm::APInt *)&v16, (llvm::APInt *)&__s2);
      uint64_t result = llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
      unsigned int v9 = v15;
      unsigned int v10 = __s2;
      unsigned int v15 = 0;
      if (v17 >= 0x41)
      {
        uint64_t result = v16;
        if (v16) {
          uint64_t result = MEMORY[0x1D25D9CB0](v16, 0x1000C8000313F17);
        }
      }
      if (v19 >= 0x41)
      {
        uint64_t result = v18;
        if (v18) {
          uint64_t result = MEMORY[0x1D25D9CB0](v18, 0x1000C8000313F17);
        }
      }
      uint64_t v11 = v21;
      uint64_t v12 = __s1;
      unsigned int v21 = 0;
      if (v11 > 0x40)
      {
        uint64_t result = memcmp(__s1, v10, ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8);
        if (!result)
        {
          *(_DWORD *)(a3 + 8) = v11;
          llvm::APInt::initSlowCase((llvm::APInt *)a3);
        }
      }
      else if (__s1 == v10)
      {
        *(_DWORD *)(a3 + 8) = v11;
        if (v11) {
          unint64_t v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
        }
        else {
          unint64_t v13 = 0;
        }
        *(void *)a3 = v13;
        uint64_t result = a3 + 16;
        *(_DWORD *)(a3 + 24) = v11;
        *(void *)(a3 + 16) = v13;
        if (v9 >= 0x41 && v10) {
          uint64_t result = MEMORY[0x1D25D9CB0](v10, 0x1000C8000313F17);
        }
        goto LABEL_15;
      }
      *(_DWORD *)(a3 + 8) = v11;
      *(void *)a3 = v12;
      *(_DWORD *)(a3 + 24) = v9;
      *(void *)(a3 + 16) = v10;
LABEL_15:
      if (v21 >= 0x41)
      {
        uint64_t result = (uint64_t)__s1;
        if (__s1) {
          return MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
        }
      }
      return result;
    }
  }
  else if ((unint64_t)a2[2] | (unint64_t)*a2)
  {
    goto LABEL_5;
  }
LABEL_22:

  return (uint64_t)llvm::ConstantRange::ConstantRange((unint64_t *)a3, v6, 0);
}

unint64_t *llvm::ConstantRange::umin@<X0>(const void **this@<X0>, const void **a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    unint64_t v33 = *this;
    if (!memcmp(*this, this[2], ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8))
    {
      int v34 = 0;
      int64_t v35 = (unint64_t)(v6 + 63) >> 6;
      do
      {
        BOOL v29 = v35-- < 1;
        if (v29) {
          break;
        }
        unint64_t v36 = v33[v35];
        v34 += __clz(v36);
      }
      while (!v36);
      int v37 = v6 | 0xFFFFFFC0;
      if ((v6 & 0x3F) == 0) {
        int v37 = 0;
      }
      if (v34 + v37 == v6) {
        goto LABEL_65;
      }
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    goto LABEL_65;
  }
  uint64_t v7 = *((unsigned int *)a2 + 2);
  if (v7 >= 0x41)
  {
    unint64_t v38 = *a2;
    if (memcmp(*a2, a2[2], ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8)) {
      goto LABEL_5;
    }
    int v39 = 0;
    int64_t v40 = (unint64_t)(v7 + 63) >> 6;
    do
    {
      BOOL v29 = v40-- < 1;
      if (v29) {
        break;
      }
      unint64_t v41 = v38[v40];
      v39 += __clz(v41);
    }
    while (!v41);
    int v42 = v7 | 0xFFFFFFC0;
    if ((v7 & 0x3F) == 0) {
      int v42 = 0;
    }
    if (v39 + v42 != v7)
    {
LABEL_5:
      llvm::ConstantRange::getUnsignedMin((uint64_t)this, (uint64_t)&__src);
      llvm::ConstantRange::getUnsignedMin((uint64_t)a2, (uint64_t)&v57);
      unsigned int v8 = v62;
      uint64_t v56 = (uint64_t)a3;
      if (v62 > 0x40)
      {
        unsigned int v9 = __src;
        unint64_t v10 = v57;
        unint64_t v11 = (((unint64_t)v62 + 63) >> 3) & 0x3FFFFFF8;
        while (v11)
        {
          unint64_t v43 = *(void *)((char *)__src + v11 - 8);
          unint64_t v44 = *(void *)(v57 + v11 - 8);
          v11 -= 8;
          if (v43 != v44)
          {
            if (v43 > v44) {
              LODWORD(v11) = 1;
            }
            else {
              LODWORD(v11) = -1;
            }
            break;
          }
        }
      }
      else
      {
        unsigned int v9 = __src;
        unint64_t v10 = v57;
        LODWORD(v11) = (unint64_t)__src > v57;
        if ((unint64_t)__src < v57) {
          LODWORD(v11) = -1;
        }
      }
      if ((v11 & 0x80000000) == 0) {
        p_src = (void **)&v57;
      }
      else {
        p_src = &__src;
      }
      if ((v11 & 0x80000000) == 0) {
        unsigned int v13 = v58;
      }
      else {
        unsigned int v13 = v62;
      }
      if (v13 > 0x40) {
        operator new[]();
      }
      BOOL v14 = (unint64_t *)*p_src;
      if (v58 >= 0x41 && v10) {
        MEMORY[0x1D25D9CB0](v10, 0x1000C8000313F17);
      }
      if (v8 >= 0x41 && v9) {
        MEMORY[0x1D25D9CB0](v9, 0x1000C8000313F17);
      }
      llvm::ConstantRange::getUnsignedMax((char **)this, (uint64_t)&__src);
      llvm::ConstantRange::getUnsignedMax((char **)a2, (uint64_t)&v57);
      unsigned int v15 = v62;
      if (v62 > 0x40)
      {
        uint64_t v16 = __src;
        unint64_t v17 = v57;
        unint64_t v18 = (((unint64_t)v62 + 63) >> 3) & 0x3FFFFFF8;
        while (v18)
        {
          unint64_t v45 = *(void *)((char *)__src + v18 - 8);
          unint64_t v46 = *(void *)(v57 + v18 - 8);
          v18 -= 8;
          if (v45 != v46)
          {
            if (v45 > v46) {
              LODWORD(v18) = 1;
            }
            else {
              LODWORD(v18) = -1;
            }
            break;
          }
        }
      }
      else
      {
        uint64_t v16 = __src;
        unint64_t v17 = v57;
        LODWORD(v18) = (unint64_t)__src > v57;
        if ((unint64_t)__src < v57) {
          LODWORD(v18) = -1;
        }
      }
      if ((v18 & 0x80000000) == 0) {
        unsigned int v19 = (void **)&v57;
      }
      else {
        unsigned int v19 = &__src;
      }
      unsigned int v20 = v58;
      if ((v18 & 0x80000000) == 0) {
        unsigned int v21 = v58;
      }
      else {
        unsigned int v21 = v62;
      }
      unsigned int v66 = v21;
      if (v21 > 0x40) {
        operator new[]();
      }
      __s2 = *v19;
      uint64_t result = (unint64_t *)llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
      unsigned int v23 = v66;
      int v24 = (unint64_t *)__s2;
      unsigned int v66 = 0;
      if (v20 >= 0x41 && v17) {
        uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
      }
      if (v15 >= 0x41 && v16) {
        uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v16, 0x1000C8000313F17);
      }
      if (v14 == v24)
      {
        unsigned int v62 = v13;
        if (v13) {
          unsigned int v26 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v13);
        }
        else {
          unsigned int v26 = 0;
        }
        uint64_t __src = v26;
        unsigned int v64 = v13;
        unsigned int v25 = v13;
        int v63 = (unint64_t *)v26;
        if (v23 >= 0x41 && v24)
        {
          uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
          unsigned int v25 = v13;
        }
        int v24 = (unint64_t *)v26;
        BOOL v14 = (unint64_t *)v26;
        unsigned int v13 = v25;
      }
      else
      {
        unsigned int v62 = v13;
        uint64_t __src = v14;
        unsigned int v64 = v23;
        unsigned int v25 = v23;
        int v63 = v24;
      }
      uint64_t v27 = *((unsigned int *)this + 2);
      if (v27 > 0x40)
      {
        unsigned int v28 = (char *)this[2];
        unint64_t v47 = ((unint64_t)(v27 + 63) >> 3) & 0x3FFFFFF8;
        while (v47)
        {
          unint64_t v48 = *(void *)((char *)*this + v47 - 8);
          unint64_t v49 = *(void *)&v28[v47 - 8];
          v47 -= 8;
          BOOL v29 = v48 > v49;
          if (v48 != v49) {
            goto LABEL_37;
          }
        }
      }
      else
      {
        unsigned int v28 = (char *)this[2];
        BOOL v29 = *this > v28;
LABEL_37:
        if (v29)
        {
          unsigned int v32 = *((_DWORD *)this + 6);
          if (v32 > 0x40)
          {
            unsigned int v54 = v25;
            uint64_t result = (unint64_t *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(this + 2));
            unsigned int v25 = v54;
            if (result != v32) {
              goto LABEL_45;
            }
          }
          else if (v28)
          {
            goto LABEL_45;
          }
        }
      }
      uint64_t v30 = *((unsigned int *)a2 + 2);
      if (v30 > 0x40)
      {
        int v31 = (char *)a2[2];
        unint64_t v50 = ((unint64_t)(v30 + 63) >> 3) & 0x3FFFFFF8;
        while (v50)
        {
          unint64_t v51 = *(void *)((char *)*a2 + v50 - 8);
          unint64_t v52 = *(void *)&v31[v50 - 8];
          v50 -= 8;
          if (v51 != v52)
          {
            if (v51 <= v52) {
              goto LABEL_40;
            }
            goto LABEL_90;
          }
        }
        goto LABEL_40;
      }
      int v31 = (char *)a2[2];
      if (*a2 <= v31)
      {
LABEL_40:
        *(_DWORD *)(v56 + 8) = v13;
        *(void *)uint64_t v56 = v14;
        *(_DWORD *)(v56 + 24) = v25;
        *(void *)(v56 + 16) = v24;
        unsigned int v62 = 0;
        unsigned int v64 = 0;
LABEL_41:
        if (v62 >= 0x41)
        {
          uint64_t result = (unint64_t *)__src;
          if (__src) {
            return (unint64_t *)MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
          }
        }
        return result;
      }
LABEL_90:
      unsigned int v53 = *((_DWORD *)a2 + 6);
      if (v53 > 0x40)
      {
        unsigned int v55 = v25;
        uint64_t result = (unint64_t *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(a2 + 2));
        unsigned int v25 = v55;
        if (result == v53) {
          goto LABEL_40;
        }
      }
      else if (!v31)
      {
        goto LABEL_40;
      }
LABEL_45:
      llvm::ConstantRange::unionWith((uint64_t)this, (unsigned int *)a2, 1, (uint64_t)&v57);
      uint64_t result = (unint64_t *)llvm::ConstantRange::intersectWith((uint64_t)&__src, (llvm::ConstantRange *)&v57, 1, v56);
      if (v60 >= 0x41)
      {
        uint64_t result = v59;
        if (v59) {
          uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v59, 0x1000C8000313F17);
        }
      }
      if (v58 >= 0x41)
      {
        uint64_t result = (unint64_t *)v57;
        if (v57) {
          uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v57, 0x1000C8000313F17);
        }
      }
      if (v64 >= 0x41)
      {
        uint64_t result = v63;
        if (v63) {
          uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v63, 0x1000C8000313F17);
        }
      }
      goto LABEL_41;
    }
  }
  else if ((unint64_t)a2[2] | (unint64_t)*a2)
  {
    goto LABEL_5;
  }
LABEL_65:

  return llvm::ConstantRange::ConstantRange(a3, v6, 0);
}

unint64_t *llvm::ConstantRange::umax@<X0>(const void **this@<X0>, char **a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    if (!memcmp(*this, this[2], ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) == v6)
    {
      goto LABEL_55;
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    goto LABEL_55;
  }
  uint64_t v7 = *((unsigned int *)a2 + 2);
  if (v7 >= 0x41)
  {
    if (memcmp(*a2, a2[2], ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8)
      || llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a2) != v7)
    {
LABEL_5:
      llvm::ConstantRange::getUnsignedMin((uint64_t)this, (uint64_t)&__src);
      llvm::ConstantRange::getUnsignedMin((uint64_t)a2, (uint64_t)&v47);
      unsigned int v8 = v52;
      uint64_t v46 = (uint64_t)a3;
      if (v52 > 0x40)
      {
        unsigned int v9 = __src;
        unint64_t v10 = v47;
        unint64_t v11 = (((unint64_t)v52 + 63) >> 3) & 0x3FFFFFF8;
        while (v11)
        {
          unint64_t v33 = *(void *)((char *)__src + v11 - 8);
          unint64_t v34 = *(void *)(v47 + v11 - 8);
          v11 -= 8;
          if (v33 != v34)
          {
            if (v33 > v34) {
              LODWORD(v11) = 1;
            }
            else {
              LODWORD(v11) = -1;
            }
            break;
          }
        }
      }
      else
      {
        unsigned int v9 = __src;
        unint64_t v10 = v47;
        LODWORD(v11) = (unint64_t)__src > v47;
        if ((unint64_t)__src < v47) {
          LODWORD(v11) = -1;
        }
      }
      if ((int)v11 <= 0) {
        p_src = (void **)&v47;
      }
      else {
        p_src = &__src;
      }
      if ((int)v11 <= 0) {
        unsigned int v13 = v48;
      }
      else {
        unsigned int v13 = v52;
      }
      if (v13 > 0x40) {
        operator new[]();
      }
      BOOL v14 = (unint64_t *)*p_src;
      if (v48 >= 0x41 && v10) {
        MEMORY[0x1D25D9CB0](v10, 0x1000C8000313F17);
      }
      if (v8 >= 0x41 && v9) {
        MEMORY[0x1D25D9CB0](v9, 0x1000C8000313F17);
      }
      llvm::ConstantRange::getUnsignedMax((char **)this, (uint64_t)&__src);
      llvm::ConstantRange::getUnsignedMax(a2, (uint64_t)&v47);
      unsigned int v15 = v52;
      if (v52 > 0x40)
      {
        uint64_t v16 = __src;
        unint64_t v17 = v47;
        unint64_t v18 = (((unint64_t)v52 + 63) >> 3) & 0x3FFFFFF8;
        while (v18)
        {
          unint64_t v35 = *(void *)((char *)__src + v18 - 8);
          unint64_t v36 = *(void *)(v47 + v18 - 8);
          v18 -= 8;
          if (v35 != v36)
          {
            if (v35 > v36) {
              LODWORD(v18) = 1;
            }
            else {
              LODWORD(v18) = -1;
            }
            break;
          }
        }
      }
      else
      {
        uint64_t v16 = __src;
        unint64_t v17 = v47;
        LODWORD(v18) = (unint64_t)__src > v47;
        if ((unint64_t)__src < v47) {
          LODWORD(v18) = -1;
        }
      }
      if ((int)v18 <= 0) {
        unsigned int v19 = (void **)&v47;
      }
      else {
        unsigned int v19 = &__src;
      }
      unsigned int v20 = v48;
      if ((int)v18 <= 0) {
        unsigned int v21 = v48;
      }
      else {
        unsigned int v21 = v52;
      }
      unsigned int v56 = v21;
      if (v21 > 0x40) {
        operator new[]();
      }
      __s2 = *v19;
      uint64_t result = (unint64_t *)llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
      unsigned int v23 = v56;
      int v24 = (unint64_t *)__s2;
      unsigned int v56 = 0;
      if (v20 >= 0x41 && v17) {
        uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
      }
      if (v15 >= 0x41 && v16) {
        uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v16, 0x1000C8000313F17);
      }
      if (v14 == v24)
      {
        unsigned int v52 = v13;
        if (v13) {
          unsigned int v26 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v13);
        }
        else {
          unsigned int v26 = 0;
        }
        uint64_t __src = v26;
        unsigned int v54 = v13;
        unsigned int v25 = v13;
        unsigned int v53 = (unint64_t *)v26;
        if (v23 >= 0x41 && v24)
        {
          uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
          unsigned int v25 = v13;
        }
        int v24 = (unint64_t *)v26;
        BOOL v14 = (unint64_t *)v26;
        unsigned int v13 = v25;
      }
      else
      {
        unsigned int v52 = v13;
        uint64_t __src = v14;
        unsigned int v54 = v23;
        unsigned int v25 = v23;
        unsigned int v53 = v24;
      }
      uint64_t v27 = *((unsigned int *)this + 2);
      if (v27 > 0x40)
      {
        unsigned int v28 = (char *)this[2];
        unint64_t v37 = ((unint64_t)(v27 + 63) >> 3) & 0x3FFFFFF8;
        while (v37)
        {
          unint64_t v38 = *(void *)((char *)*this + v37 - 8);
          unint64_t v39 = *(void *)&v28[v37 - 8];
          v37 -= 8;
          BOOL v29 = v38 > v39;
          if (v38 != v39) {
            goto LABEL_37;
          }
        }
      }
      else
      {
        unsigned int v28 = (char *)this[2];
        BOOL v29 = *this > v28;
LABEL_37:
        if (v29)
        {
          unsigned int v32 = *((_DWORD *)this + 6);
          if (v32 > 0x40)
          {
            unsigned int v44 = v25;
            uint64_t result = (unint64_t *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(this + 2));
            unsigned int v25 = v44;
            if (result != v32) {
              goto LABEL_45;
            }
          }
          else if (v28)
          {
            goto LABEL_45;
          }
        }
      }
      uint64_t v30 = *((unsigned int *)a2 + 2);
      if (v30 > 0x40)
      {
        int v31 = a2[2];
        unint64_t v40 = ((unint64_t)(v30 + 63) >> 3) & 0x3FFFFFF8;
        while (v40)
        {
          unint64_t v41 = *(void *)&(*a2)[v40 - 8];
          unint64_t v42 = *(void *)&v31[v40 - 8];
          v40 -= 8;
          if (v41 != v42)
          {
            if (v41 <= v42) {
              goto LABEL_40;
            }
            goto LABEL_80;
          }
        }
        goto LABEL_40;
      }
      int v31 = a2[2];
      if (*a2 <= v31)
      {
LABEL_40:
        *(_DWORD *)(v46 + 8) = v13;
        *(void *)uint64_t v46 = v14;
        *(_DWORD *)(v46 + 24) = v25;
        *(void *)(v46 + 16) = v24;
        unsigned int v52 = 0;
        unsigned int v54 = 0;
LABEL_41:
        if (v52 >= 0x41)
        {
          uint64_t result = (unint64_t *)__src;
          if (__src) {
            return (unint64_t *)MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
          }
        }
        return result;
      }
LABEL_80:
      unsigned int v43 = *((_DWORD *)a2 + 6);
      if (v43 > 0x40)
      {
        unsigned int v45 = v25;
        uint64_t result = (unint64_t *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(a2 + 2));
        unsigned int v25 = v45;
        if (result == v43) {
          goto LABEL_40;
        }
      }
      else if (!v31)
      {
        goto LABEL_40;
      }
LABEL_45:
      llvm::ConstantRange::unionWith((uint64_t)this, (unsigned int *)a2, 1, (uint64_t)&v47);
      uint64_t result = (unint64_t *)llvm::ConstantRange::intersectWith((uint64_t)&__src, (llvm::ConstantRange *)&v47, 1, v46);
      if (v50 >= 0x41)
      {
        uint64_t result = v49;
        if (v49) {
          uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v49, 0x1000C8000313F17);
        }
      }
      if (v48 >= 0x41)
      {
        uint64_t result = (unint64_t *)v47;
        if (v47) {
          uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v47, 0x1000C8000313F17);
        }
      }
      if (v54 >= 0x41)
      {
        uint64_t result = v53;
        if (v53) {
          uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v53, 0x1000C8000313F17);
        }
      }
      goto LABEL_41;
    }
  }
  else if ((unint64_t)a2[2] | (unint64_t)*a2)
  {
    goto LABEL_5;
  }
LABEL_55:

  return llvm::ConstantRange::ConstantRange(a3, v6, 0);
}

unint64_t *llvm::ConstantRange::smin@<X0>(const void **this@<X0>, const llvm::ConstantRange *a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    if (!memcmp(*this, this[2], ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) == v6)
    {
      goto LABEL_107;
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    goto LABEL_107;
  }
  uint64_t v7 = *((unsigned int *)a2 + 2);
  if (v7 >= 0x41)
  {
    if (memcmp(*(const void **)a2, *((const void **)a2 + 2), ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8)
      || llvm::APInt::countLeadingZerosSlowCase(a2) != v7)
    {
LABEL_5:
      llvm::ConstantRange::getSignedMin((uint64_t)this, (uint64_t)&__src);
      llvm::ConstantRange::getSignedMin((uint64_t)a2, (uint64_t)&v61);
      unsigned int v8 = v66;
      uint64_t v60 = (uint64_t)a3;
      if (v66 > 0x40)
      {
        unsigned int v9 = __src;
        uint64_t v39 = *((void *)__src + ((v66 - 1) >> 6)) & (1 << (v66 - 1));
        unsigned int v14 = v62;
        unint64_t v11 = v61;
        unint64_t v40 = (unint64_t **)&v61[(v62 - 1) >> 6];
        if (v62 < 0x41) {
          unint64_t v40 = &v61;
        }
        if ((v39 != 0) == (((unint64_t)*v40 >> (v62 - 1)) & 1))
        {
          int64_t v13 = (((unint64_t)v66 + 63) >> 3) & 0x3FFFFFF8;
          while (v13)
          {
            unint64_t v47 = *(void *)((char *)__src + v13 - 8);
            unint64_t v48 = *(unint64_t *)((char *)v61 + v13 - 8);
            v13 -= 8;
            if (v47 != v48)
            {
              if (v47 > v48) {
                LODWORD(v13) = 1;
              }
              else {
                LODWORD(v13) = -1;
              }
              break;
            }
          }
        }
        else if (v39)
        {
          LODWORD(v13) = -1;
        }
        else
        {
          LODWORD(v13) = 1;
        }
      }
      else
      {
        unsigned int v9 = __src;
        uint64_t v10 = (uint64_t)((void)__src << -(char)v66) >> -(char)v66;
        unint64_t v11 = v61;
        int64_t v13 = (uint64_t)((void)v61 << -(char)v66) >> -(char)v66;
        BOOL v12 = v10 < v13;
        LODWORD(v13) = v10 > v13;
        if (v12) {
          LODWORD(v13) = -1;
        }
        unsigned int v14 = v62;
      }
      if ((int)v13 >= 0) {
        p_src = (void **)&v61;
      }
      else {
        p_src = &__src;
      }
      if ((int)v13 >= 0) {
        unsigned int v16 = v14;
      }
      else {
        unsigned int v16 = v66;
      }
      if (v16 > 0x40) {
        operator new[]();
      }
      unint64_t v17 = (unint64_t *)*p_src;
      if (v14 >= 0x41 && v11) {
        MEMORY[0x1D25D9CB0](v11, 0x1000C8000313F17);
      }
      if (v8 >= 0x41 && v9) {
        MEMORY[0x1D25D9CB0](v9, 0x1000C8000313F17);
      }
      llvm::ConstantRange::getSignedMax(this, (uint64_t)&__src);
      llvm::ConstantRange::getSignedMax(a2, (uint64_t)&v61);
      unsigned int v18 = v66;
      if (v66 > 0x40)
      {
        unsigned int v19 = __src;
        uint64_t v41 = *((void *)__src + ((v66 - 1) >> 6)) & (1 << (v66 - 1));
        unsigned int v23 = v62;
        unsigned int v21 = v61;
        unint64_t v42 = (unint64_t **)&v61[(v62 - 1) >> 6];
        if (v62 < 0x41) {
          unint64_t v42 = &v61;
        }
        if ((v41 != 0) == (((unint64_t)*v42 >> (v62 - 1)) & 1))
        {
          int64_t v22 = (((unint64_t)v66 + 63) >> 3) & 0x3FFFFFF8;
          while (v22)
          {
            unint64_t v49 = *(void *)((char *)__src + v22 - 8);
            unint64_t v50 = *(unint64_t *)((char *)v61 + v22 - 8);
            v22 -= 8;
            if (v49 != v50)
            {
              if (v49 > v50) {
                LODWORD(v22) = 1;
              }
              else {
                LODWORD(v22) = -1;
              }
              break;
            }
          }
        }
        else if (v41)
        {
          LODWORD(v22) = -1;
        }
        else
        {
          LODWORD(v22) = 1;
        }
      }
      else
      {
        unsigned int v19 = __src;
        uint64_t v20 = (uint64_t)((void)__src << -(char)v66) >> -(char)v66;
        unsigned int v21 = v61;
        int64_t v22 = (uint64_t)((void)v61 << -(char)v66) >> -(char)v66;
        BOOL v12 = v20 < v22;
        LODWORD(v22) = v20 > v22;
        if (v12) {
          LODWORD(v22) = -1;
        }
        unsigned int v23 = v62;
      }
      if ((int)v22 >= 0) {
        int v24 = (void **)&v61;
      }
      else {
        int v24 = &__src;
      }
      if ((int)v22 >= 0) {
        unsigned int v25 = v23;
      }
      else {
        unsigned int v25 = v66;
      }
      unsigned int v70 = v25;
      if (v25 > 0x40) {
        operator new[]();
      }
      __s2 = *v24;
      llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
      unsigned int v26 = v70;
      uint64_t v27 = (unint64_t *)__s2;
      unsigned int v70 = 0;
      if (v23 >= 0x41 && v21) {
        MEMORY[0x1D25D9CB0](v21, 0x1000C8000313F17);
      }
      if (v18 >= 0x41 && v19) {
        MEMORY[0x1D25D9CB0](v19, 0x1000C8000313F17);
      }
      if (v17 == v27)
      {
        unsigned int v66 = v16;
        if (v16) {
          BOOL v29 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v16);
        }
        else {
          BOOL v29 = 0;
        }
        uint64_t __src = v29;
        unsigned int v68 = v16;
        unsigned int v28 = v16;
        BOOL v67 = (unint64_t *)v29;
        if (v26 >= 0x41 && v27)
        {
          MEMORY[0x1D25D9CB0](v27, 0x1000C8000313F17);
          unsigned int v28 = v16;
        }
        uint64_t v27 = (unint64_t *)v29;
        unint64_t v17 = (unint64_t *)v29;
        unsigned int v16 = v28;
      }
      else
      {
        unsigned int v66 = v16;
        uint64_t __src = v17;
        unsigned int v68 = v26;
        unsigned int v28 = v26;
        BOOL v67 = v27;
      }
      uint64_t v30 = *((unsigned int *)this + 2);
      if (v30 > 0x40)
      {
        uint64_t v43 = *((void *)*this + ((v30 - 1) >> 6)) & (1 << (v30 - 1));
        unsigned int v35 = *((_DWORD *)this + 6);
        int v31 = this[2];
        unsigned int v44 = (char *)v31 + 8 * ((v35 - 1) >> 6);
        if (v35 < 0x41) {
          unsigned int v44 = this + 2;
        }
        if ((v43 != 0) == ((*v44 >> (v35 - 1)) & 1))
        {
          unint64_t v51 = ((unint64_t)(v30 + 63) >> 3) & 0x3FFFFFF8;
          while (v51)
          {
            unint64_t v52 = *(void *)((char *)*this + v51 - 8);
            unint64_t v53 = *(void *)((char *)v31 + v51 - 8);
            v51 -= 8;
            if (v52 != v53)
            {
              if (v52 <= v53) {
                goto LABEL_41;
              }
              goto LABEL_47;
            }
          }
          goto LABEL_41;
        }
        if (v43)
        {
LABEL_41:
          uint64_t result = (unint64_t *)((char *)a2 + 16);
          uint64_t v33 = *((unsigned int *)a2 + 2);
          if (v33 > 0x40)
          {
            uint64_t v45 = *(void *)(*(void *)a2 + 8 * ((v33 - 1) >> 6)) & (1 << (v33 - 1));
            unsigned int v37 = *((_DWORD *)a2 + 6);
            uint64_t v34 = *((void *)a2 + 2);
            uint64_t v46 = (void *)(v34 + 8 * ((v37 - 1) >> 6));
            if (v37 < 0x41) {
              uint64_t v46 = (void *)((char *)a2 + 16);
            }
            if ((v45 != 0) == ((*v46 >> (v37 - 1)) & 1))
            {
              unint64_t v54 = ((unint64_t)(v33 + 63) >> 3) & 0x3FFFFFF8;
              while (v54)
              {
                unint64_t v55 = *(void *)(*(void *)a2 - 8 + v54);
                unint64_t v56 = *(void *)(v34 + v54 - 8);
                v54 -= 8;
                if (v55 != v56)
                {
                  if (v55 <= v56) {
                    goto LABEL_43;
                  }
                  goto LABEL_55;
                }
              }
              goto LABEL_43;
            }
            if (v45)
            {
LABEL_43:
              *(_DWORD *)(v60 + 8) = v16;
              *(void *)uint64_t v60 = v17;
              *(_DWORD *)(v60 + 24) = v28;
              *(void *)(v60 + 16) = v27;
              unsigned int v66 = 0;
              unsigned int v68 = 0;
LABEL_44:
              if (v66 >= 0x41)
              {
                uint64_t result = (unint64_t *)__src;
                if (__src) {
                  return (unint64_t *)MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                }
              }
              return result;
            }
          }
          else
          {
            uint64_t v34 = *((void *)a2 + 2);
            if ((uint64_t)(*(void *)a2 << -(char)v33) >> -(char)v33 <= v34 << -(char)v33 >> -(char)v33) {
              goto LABEL_43;
            }
            unsigned int v37 = *((_DWORD *)a2 + 6);
          }
LABEL_55:
          unsigned int v38 = v37 - 1;
          if (v37 > 0x40)
          {
            if ((*(void *)(v34 + 8 * (v38 >> 6)) >> v38))
            {
              unsigned int v59 = v28;
              uint64_t result = (unint64_t *)llvm::APInt::countTrailingZerosSlowCase((unint64_t **)result);
              unsigned int v28 = v59;
              if (result == v38) {
                goto LABEL_43;
              }
            }
          }
          else if (v34 == 1 << v38)
          {
            goto LABEL_43;
          }
LABEL_49:
          llvm::ConstantRange::unionWith((uint64_t)this, (unsigned int *)a2, 2, (uint64_t)&v61);
          uint64_t result = (unint64_t *)llvm::ConstantRange::intersectWith((uint64_t)&__src, (llvm::ConstantRange *)&v61, 2, v60);
          if (v64 >= 0x41)
          {
            uint64_t result = v63;
            if (v63) {
              uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v63, 0x1000C8000313F17);
            }
          }
          if (v62 >= 0x41)
          {
            uint64_t result = v61;
            if (v61) {
              uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v61, 0x1000C8000313F17);
            }
          }
          if (v68 >= 0x41)
          {
            uint64_t result = v67;
            if (v67) {
              uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v67, 0x1000C8000313F17);
            }
          }
          goto LABEL_44;
        }
      }
      else
      {
        int v31 = this[2];
        if ((uint64_t)((void)*this << -(char)v30) >> -(char)v30 <= (uint64_t)((void)v31 << -(char)v30) >> -(char)v30) {
          goto LABEL_41;
        }
        unsigned int v35 = *((_DWORD *)this + 6);
      }
LABEL_47:
      unsigned int v36 = v35 - 1;
      if (v35 > 0x40)
      {
        if (((*((void *)v31 + (v36 >> 6)) >> v36) & 1) == 0) {
          goto LABEL_49;
        }
        unsigned int v57 = v28;
        int v58 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)this + 2);
        unsigned int v28 = v57;
        if (v58 != v36) {
          goto LABEL_49;
        }
      }
      else if (v31 != (const void *)(1 << v36))
      {
        goto LABEL_49;
      }
      goto LABEL_41;
    }
  }
  else if (*((void *)a2 + 2) | *(void *)a2)
  {
    goto LABEL_5;
  }
LABEL_107:

  return llvm::ConstantRange::ConstantRange(a3, v6, 0);
}

uint64_t llvm::ConstantRange::smax@<X0>(const void **this@<X0>, const llvm::ConstantRange *a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    if (!memcmp(*this, this[2], ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) == v6)
    {
      goto LABEL_103;
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    goto LABEL_103;
  }
  uint64_t v7 = *((unsigned int *)a2 + 2);
  if (v7 >= 0x41)
  {
    if (memcmp(*(const void **)a2, *((const void **)a2 + 2), ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8)
      || llvm::APInt::countLeadingZerosSlowCase(a2) != v7)
    {
LABEL_5:
      llvm::ConstantRange::getSignedMin((uint64_t)this, (uint64_t)&__src);
      llvm::ConstantRange::getSignedMin((uint64_t)a2, (uint64_t)&v60);
      unsigned int v8 = v65;
      uint64_t v59 = (uint64_t)a3;
      if (v65 > 0x40)
      {
        unsigned int v9 = __src;
        uint64_t v34 = *((void *)__src + ((v65 - 1) >> 6)) & (1 << (v65 - 1));
        unsigned int v14 = v61;
        uint64_t v11 = v60;
        unsigned int v35 = (uint64_t *)(v60 + 8 * ((v61 - 1) >> 6));
        if (v61 < 0x41) {
          unsigned int v35 = &v60;
        }
        if ((v34 != 0) == (((unint64_t)*v35 >> (v61 - 1)) & 1))
        {
          int64_t v13 = (((unint64_t)v65 + 63) >> 3) & 0x3FFFFFF8;
          while (v13)
          {
            unint64_t v47 = *(void *)((char *)__src + v13 - 8);
            unint64_t v48 = *(void *)(v60 + v13 - 8);
            v13 -= 8;
            if (v47 != v48)
            {
              if (v47 > v48) {
                LODWORD(v13) = 1;
              }
              else {
                LODWORD(v13) = -1;
              }
              break;
            }
          }
        }
        else if (v34)
        {
          LODWORD(v13) = -1;
        }
        else
        {
          LODWORD(v13) = 1;
        }
      }
      else
      {
        unsigned int v9 = __src;
        uint64_t v10 = (uint64_t)((void)__src << -(char)v65) >> -(char)v65;
        uint64_t v11 = v60;
        int64_t v13 = v60 << -(char)v65 >> -(char)v65;
        BOOL v12 = v10 < v13;
        LODWORD(v13) = v10 > v13;
        if (v12) {
          LODWORD(v13) = -1;
        }
        unsigned int v14 = v61;
      }
      if ((int)v13 <= 0) {
        p_src = (void **)&v60;
      }
      else {
        p_src = &__src;
      }
      if ((int)v13 <= 0) {
        unsigned int v16 = v14;
      }
      else {
        unsigned int v16 = v65;
      }
      if (v16 > 0x40) {
        operator new[]();
      }
      unint64_t v17 = *p_src;
      if (v14 >= 0x41 && v11) {
        MEMORY[0x1D25D9CB0](v11, 0x1000C8000313F17);
      }
      if (v8 >= 0x41 && v9) {
        MEMORY[0x1D25D9CB0](v9, 0x1000C8000313F17);
      }
      llvm::ConstantRange::getSignedMax(this, (uint64_t)&__src);
      llvm::ConstantRange::getSignedMax(a2, (uint64_t)&v60);
      unsigned int v18 = v65;
      if (v65 > 0x40)
      {
        unsigned int v19 = __src;
        uint64_t v36 = *((void *)__src + ((v65 - 1) >> 6)) & (1 << (v65 - 1));
        unsigned int v23 = v61;
        uint64_t v21 = v60;
        unsigned int v37 = (uint64_t *)(v60 + 8 * ((v61 - 1) >> 6));
        if (v61 < 0x41) {
          unsigned int v37 = &v60;
        }
        if ((v36 != 0) == (((unint64_t)*v37 >> (v61 - 1)) & 1))
        {
          int64_t v22 = (((unint64_t)v65 + 63) >> 3) & 0x3FFFFFF8;
          while (v22)
          {
            unint64_t v49 = *(void *)((char *)__src + v22 - 8);
            unint64_t v50 = *(void *)(v60 + v22 - 8);
            v22 -= 8;
            if (v49 != v50)
            {
              if (v49 > v50) {
                LODWORD(v22) = 1;
              }
              else {
                LODWORD(v22) = -1;
              }
              break;
            }
          }
        }
        else if (v36)
        {
          LODWORD(v22) = -1;
        }
        else
        {
          LODWORD(v22) = 1;
        }
      }
      else
      {
        unsigned int v19 = __src;
        uint64_t v20 = (uint64_t)((void)__src << -(char)v65) >> -(char)v65;
        uint64_t v21 = v60;
        int64_t v22 = v60 << -(char)v65 >> -(char)v65;
        BOOL v12 = v20 < v22;
        LODWORD(v22) = v20 > v22;
        if (v12) {
          LODWORD(v22) = -1;
        }
        unsigned int v23 = v61;
      }
      if ((int)v22 <= 0) {
        int v24 = (void **)&v60;
      }
      else {
        int v24 = &__src;
      }
      if ((int)v22 <= 0) {
        unsigned int v25 = v23;
      }
      else {
        unsigned int v25 = v65;
      }
      unsigned int v69 = v25;
      if (v25 > 0x40) {
        operator new[]();
      }
      __s2 = *v24;
      llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
      unsigned int v26 = v69;
      uint64_t v27 = __s2;
      unsigned int v69 = 0;
      if (v23 >= 0x41 && v21) {
        MEMORY[0x1D25D9CB0](v21, 0x1000C8000313F17);
      }
      if (v18 >= 0x41 && v19) {
        MEMORY[0x1D25D9CB0](v19, 0x1000C8000313F17);
      }
      if (v17 == v27)
      {
        unsigned int v65 = v16;
        if (v16) {
          BOOL v29 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v16);
        }
        else {
          BOOL v29 = 0;
        }
        uint64_t __src = v29;
        unsigned int v67 = v16;
        unsigned int v28 = v16;
        uint64_t v66 = (uint64_t)v29;
        if (v26 >= 0x41 && v27) {
          MEMORY[0x1D25D9CB0](v27, 0x1000C8000313F17);
        }
        uint64_t v27 = v29;
        unint64_t v17 = v29;
      }
      else
      {
        unsigned int v65 = v16;
        uint64_t __src = v17;
        unsigned int v67 = v26;
        unsigned int v28 = v26;
        uint64_t v66 = (uint64_t)v27;
      }
      uint64_t v30 = *((unsigned int *)this + 2);
      if (v30 > 0x40)
      {
        uint64_t v38 = *((void *)*this + ((v30 - 1) >> 6)) & (1 << (v30 - 1));
        unsigned int v39 = *((_DWORD *)this + 6);
        int v31 = this[2];
        unint64_t v40 = (char *)v31 + 8 * ((v39 - 1) >> 6);
        if (v39 < 0x41) {
          unint64_t v40 = this + 2;
        }
        if ((v38 != 0) == ((*v40 >> (v39 - 1)) & 1))
        {
          unint64_t v51 = ((unint64_t)(v30 + 63) >> 3) & 0x3FFFFFF8;
          while (v51)
          {
            unint64_t v52 = *(void *)((char *)*this + v51 - 8);
            unint64_t v53 = *(void *)((char *)v31 + v51 - 8);
            v51 -= 8;
            if (v52 != v53)
            {
              if (v52 <= v53) {
                goto LABEL_41;
              }
              goto LABEL_62;
            }
          }
          goto LABEL_41;
        }
        if (v38)
        {
LABEL_41:
          uint64_t result = (uint64_t)a2 + 16;
          uint64_t v33 = *((unsigned int *)a2 + 2);
          if (v33 > 0x40)
          {
            uint64_t v42 = *(void *)(*(void *)a2 + 8 * ((v33 - 1) >> 6)) & (1 << (v33 - 1));
            unsigned int v43 = *((_DWORD *)a2 + 6);
            unsigned int v44 = v43 - 1;
            uint64_t v45 = *((void *)a2 + 2);
            if (v43 >= 0x41) {
              uint64_t v46 = (void *)(v45 + 8 * (v44 >> 6));
            }
            else {
              uint64_t v46 = (void *)((char *)a2 + 16);
            }
            if ((v42 != 0) == ((*v46 >> v44) & 1))
            {
              unint64_t v54 = v33 + 63;
              uint64_t v55 = v45 - 8;
              uint64_t v56 = (v54 >> 3) & 0x3FFFFFF8;
              while (v56)
              {
                unint64_t v57 = *(void *)(*(void *)a2 - 8 + v56);
                unint64_t v58 = *(void *)(v55 + v56);
                v56 -= 8;
                if (v57 != v58)
                {
                  if (v57 <= v58) {
                    goto LABEL_43;
                  }
                  goto LABEL_70;
                }
              }
              goto LABEL_43;
            }
            if (v42)
            {
LABEL_43:
              *(_DWORD *)(v59 + 8) = v16;
              *(void *)uint64_t v59 = v17;
              *(_DWORD *)(v59 + 24) = v28;
              *(void *)(v59 + 16) = v27;
              unsigned int v65 = 0;
              unsigned int v67 = 0;
LABEL_44:
              if (v65 >= 0x41)
              {
                uint64_t result = (uint64_t)__src;
                if (__src) {
                  return MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                }
              }
              return result;
            }
          }
          else if ((uint64_t)(*(void *)a2 << -(char)v33) >> -(char)v33 <= (uint64_t)(*((void *)a2 + 2) << -(char)v33) >> -(char)v33)
          {
            goto LABEL_43;
          }
LABEL_70:
          uint64_t result = sub_1CB8C0D18(result);
          if (result) {
            goto LABEL_43;
          }
LABEL_71:
          llvm::ConstantRange::unionWith((uint64_t)this, (unsigned int *)a2, 2, (uint64_t)&v60);
          uint64_t result = llvm::ConstantRange::intersectWith((uint64_t)&__src, (llvm::ConstantRange *)&v60, 2, v59);
          if (v63 >= 0x41)
          {
            uint64_t result = v62;
            if (v62) {
              uint64_t result = MEMORY[0x1D25D9CB0](v62, 0x1000C8000313F17);
            }
          }
          if (v61 >= 0x41)
          {
            uint64_t result = v60;
            if (v60) {
              uint64_t result = MEMORY[0x1D25D9CB0](v60, 0x1000C8000313F17);
            }
          }
          if (v67 >= 0x41)
          {
            uint64_t result = v66;
            if (v66) {
              uint64_t result = MEMORY[0x1D25D9CB0](v66, 0x1000C8000313F17);
            }
          }
          goto LABEL_44;
        }
      }
      else
      {
        int v31 = this[2];
        if ((uint64_t)((void)*this << -(char)v30) >> -(char)v30 <= (uint64_t)((void)v31 << -(char)v30) >> -(char)v30) {
          goto LABEL_41;
        }
        unsigned int v39 = *((_DWORD *)this + 6);
      }
LABEL_62:
      unsigned int v41 = v39 - 1;
      if (v39 > 0x40)
      {
        if (((*((void *)v31 + (v41 >> 6)) >> v41) & 1) == 0
          || llvm::APInt::countTrailingZerosSlowCase((unint64_t **)this + 2) != v41)
        {
          goto LABEL_71;
        }
      }
      else if (v31 != (const void *)(1 << v41))
      {
        goto LABEL_71;
      }
      goto LABEL_41;
    }
  }
  else if (*((void *)a2 + 2) | *(void *)a2)
  {
    goto LABEL_5;
  }
LABEL_103:

  return (uint64_t)llvm::ConstantRange::ConstantRange(a3, v6, 0);
}

unint64_t *llvm::ConstantRange::abs@<X0>(llvm::ConstantRange *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v7 = (unsigned int *)((char *)this + 8);
  uint64_t v6 = *((unsigned int *)this + 2);
  unsigned int v8 = (unint64_t **)((char *)this + 16);
  if (v6 >= 0x41)
  {
    unint64_t v9 = *(void *)this;
    unint64_t v10 = *((void *)this + 2);
    unint64_t v38 = (unint64_t)(v6 + 63) >> 3;
    if (memcmp(*(const void **)this, (const void *)v10, v38 & 0x3FFFFFF8)
      || llvm::APInt::countLeadingZerosSlowCase(this) != v6)
    {
      uint64_t v39 = *(void *)(v9 + 8 * ((v6 - 1) >> 6)) & (1 << (v6 - 1));
      unsigned int v26 = *((_DWORD *)this + 6);
      unint64_t v40 = (void *)(v10 + 8 * ((v26 - 1) >> 6));
      if (v26 < 0x41) {
        unint64_t v40 = v8;
      }
      if ((v39 != 0) == ((*v40 >> (v26 - 1)) & 1))
      {
        unint64_t v41 = v38 & 0x3FFFFFF8;
        do
        {
          if (!v41) {
            goto LABEL_4;
          }
          unint64_t v42 = *(void *)(v9 + v41 - 8);
          unint64_t v43 = *(void *)(v10 + v41 - 8);
          v41 -= 8;
        }
        while (v42 == v43);
        if (v42 <= v43) {
          goto LABEL_4;
        }
      }
      else if (v39)
      {
        goto LABEL_4;
      }
LABEL_44:
      unsigned int v27 = v26 - 1;
      if (v26 > 0x40)
      {
        unsigned int v59 = v26;
        if ((*(void *)(v10 + 8 * (v27 >> 6)) >> v27))
        {
          int v58 = llvm::APInt::countTrailingZerosSlowCase(v8);
          unsigned int v26 = v59;
          if (v58 == v27) {
            goto LABEL_4;
          }
          unsigned int v83 = 1;
          int v82 = 0;
        }
        else
        {
          unsigned int v83 = 1;
          int v82 = 0;
          int v50 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v8);
          unsigned int v26 = v59;
          if (v50 != v59) {
            goto LABEL_96;
          }
        }
LABEL_48:
        unsigned int v28 = v6 - 1;
        if (v6 <= 0x40)
        {
          if (((v9 >> v28) & 1) != 0 || !v9)
          {
            unsigned int v81 = v6;
LABEL_52:
            unsigned int v80 = 0;
            int v82 = 0;
            unsigned int v83 = v81;
LABEL_53:
            unsigned int v29 = v83;
            if (a2)
            {
              if (v83 > 0x40) {
                operator new[]();
              }
              unint64_t v52 = v82;
              uint64_t result = (unint64_t *)sub_1CBA62420(*v7, (llvm::APInt *)&v74);
              *(_DWORD *)(a3 + 8) = v29;
              *(void *)a3 = v52;
              *(_DWORD *)(a3 + 24) = v75;
              *(void *)(a3 + 16) = v74;
              int v75 = 0;
            }
            else
            {
              if (v83 > 0x40) {
                operator new[]();
              }
              uint64_t v30 = v82;
              unsigned int v31 = *v7;
              unsigned int v73 = v31;
              if (v31 > 0x40) {
                llvm::APInt::initSlowCase((llvm::APInt *)&v72);
              }
              uint64_t v72 = 1 << (v31 - 1);
              uint64_t result = (unint64_t *)llvm::APInt::operator+=((uint64_t)&v72, 1uLL);
              unsigned int v32 = v73;
              uint64_t v33 = v72;
              unsigned int v73 = 0;
              *(_DWORD *)(a3 + 8) = v29;
              *(void *)a3 = v30;
              *(_DWORD *)(a3 + 24) = v32;
              *(void *)(a3 + 16) = v33;
            }
            goto LABEL_36;
          }
LABEL_112:
          unsigned int v77 = v26;
          if (v26 > 0x40) {
            operator new[]();
          }
          unint64_t v76 = (unint64_t *)v10;
          sub_1CBA14940((uint64_t)&v76);
          llvm::APInt::operator++((uint64_t)&v76);
          unsigned int v79 = v77;
          int v78 = v76;
          unsigned int v77 = 0;
          llvm::APInt::operator+=((uint64_t)&v78, 1uLL);
          unsigned int v53 = v79;
          unsigned int v81 = v79;
          unsigned int v80 = v78;
          unsigned int v79 = 0;
          int v54 = llvm::APInt::compare(this, (const llvm::APInt *)&v80);
          if (v54 >= 0) {
            uint64_t v55 = (const llvm::APInt *)&v80;
          }
          else {
            uint64_t v55 = this;
          }
          if (v83 > 0x40) {
            goto LABEL_122;
          }
          uint64_t v56 = &v81;
          if (v54 < 0) {
            uint64_t v56 = v7;
          }
          unsigned int v57 = *v56;
          if (v57 > 0x40)
          {
LABEL_122:
            llvm::APInt::assignSlowCase((const llvm::APInt *)&v82, v55);
            unsigned int v53 = v81;
          }
          else
          {
            int v82 = *(unint64_t **)v55;
            unsigned int v83 = v57;
          }
          if (v53 >= 0x41 && v80) {
            MEMORY[0x1D25D9CB0](v80, 0x1000C8000313F17);
          }
          if (v79 >= 0x41 && v78) {
            MEMORY[0x1D25D9CB0](v78, 0x1000C8000313F17);
          }
          if (v77 >= 0x41 && v76) {
            MEMORY[0x1D25D9CB0](v76, 0x1000C8000313F17);
          }
          goto LABEL_53;
        }
        unsigned int v47 = v26;
        if (((*(void *)(v9 + 8 * (v28 >> 6)) >> v28) & 1) == 0)
        {
          int v48 = llvm::APInt::countLeadingZerosSlowCase(this);
          unsigned int v26 = v47;
          if (v48 != v6) {
            goto LABEL_112;
          }
        }
        unsigned int v81 = v6;
LABEL_88:
        llvm::APInt::initSlowCase((llvm::APInt *)&v80);
      }
      if (v10 != 1 << v27)
      {
        unsigned int v83 = 1;
        int v82 = 0;
        if (((v10 >> v27) & 1) != 0 || !v10) {
          goto LABEL_48;
        }
LABEL_96:
        unsigned int v81 = v6;
        if (v6 < 0x41) {
          goto LABEL_52;
        }
        goto LABEL_88;
      }
LABEL_4:
      llvm::ConstantRange::getSignedMin((uint64_t)this, (uint64_t)&v82);
      llvm::ConstantRange::getSignedMax(this, (uint64_t)&v80);
      if (!a2)
      {
LABEL_5:
        uint64_t v11 = &v82[(v83 - 1) >> 6];
        if (v83 < 0x41) {
          uint64_t v11 = (unint64_t *)&v82;
        }
        if (((*v11 >> (v83 - 1)) & 1) == 0)
        {
          unsigned int v24 = *v7;
          *(_DWORD *)(a3 + 8) = *v7;
          if (v24 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)a3, this);
          }
          *(void *)a3 = *(void *)this;
          uint64_t result = (unint64_t *)(a3 + 16);
          unsigned int v25 = *((_DWORD *)this + 6);
          *(_DWORD *)(a3 + 24) = v25;
          if (v25 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)result, (const llvm::APInt *)v8);
          }
          *uint64_t result = (unint64_t)*v8;
          goto LABEL_35;
        }
        unsigned int v12 = v81;
        int64_t v13 = v80;
        unsigned int v14 = &v80[(v81 - 1) >> 6];
        if (v81 < 0x41) {
          unsigned int v14 = (unint64_t *)&v80;
        }
        if ((*v14 >> (v81 - 1)))
        {
          unsigned int v71 = v81;
          if (v81 > 0x40) {
            operator new[]();
          }
          unsigned int v70 = v80;
          sub_1CBA14940((uint64_t)&v70);
          llvm::APInt::operator++((uint64_t)&v70);
          unsigned int v34 = v71;
          unsigned int v35 = v70;
          unsigned int v71 = 0;
          unsigned int v67 = v83;
          if (v83 > 0x40) {
            operator new[]();
          }
          uint64_t v66 = v82;
          sub_1CBA14940((uint64_t)&v66);
          llvm::APInt::operator++((uint64_t)&v66);
          unsigned int v69 = v67;
          unsigned int v68 = v66;
          unsigned int v67 = 0;
          uint64_t result = (unint64_t *)llvm::APInt::operator+=((uint64_t)&v68, 1uLL);
          unsigned int v36 = v69;
          unsigned int v37 = v68;
          unsigned int v69 = 0;
          *(_DWORD *)(a3 + 8) = v34;
          *(void *)a3 = v35;
          *(_DWORD *)(a3 + 24) = v36;
          *(void *)(a3 + 16) = v37;
          if (v67 >= 0x41)
          {
            uint64_t result = v66;
            if (v66) {
              uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v66, 0x1000C8000313F17);
            }
          }
          if (v71 < 0x41) {
            goto LABEL_35;
          }
          uint64_t result = v70;
          if (!v70) {
            goto LABEL_35;
          }
        }
        else
        {
          unsigned int v65 = *v7;
          if (v65 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v64);
          }
          uint64_t v64 = 0;
          unsigned int v61 = v83;
          if (v83 > 0x40) {
            operator new[]();
          }
          if (v83) {
            unint64_t v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v83;
          }
          else {
            unint64_t v15 = 0;
          }
          uint64_t v60 = (unint64_t *)(v15 & ~(unint64_t)v82);
          llvm::APInt::operator++((uint64_t)&v60);
          uint64_t v16 = v61;
          unint64_t v17 = v60;
          unsigned int v61 = 0;
          if (v16 > 0x40)
          {
            unint64_t v44 = ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8;
            while (v44)
            {
              unint64_t v45 = *(unint64_t *)((char *)v60 + v44 - 8);
              unint64_t v46 = *(unint64_t *)((char *)v13 + v44 - 8);
              v44 -= 8;
              BOOL v18 = v45 > v46;
              if (v45 != v46) {
                goto LABEL_18;
              }
            }
            char v19 = 0;
          }
          else
          {
            BOOL v18 = v60 > v13;
LABEL_18:
            char v19 = v18;
            if (v18) {
              unsigned int v12 = v16;
            }
          }
          unsigned int v63 = v12;
          if (v12 > 0x40) {
            operator new[]();
          }
          if (v19) {
            uint64_t v20 = v60;
          }
          else {
            uint64_t v20 = v13;
          }
          uint64_t v62 = v20;
          uint64_t result = (unint64_t *)llvm::APInt::operator+=((uint64_t)&v62, 1uLL);
          unsigned int v22 = v63;
          unsigned int v23 = v62;
          unsigned int v63 = 0;
          *(_DWORD *)(a3 + 8) = v65;
          *(void *)a3 = v64;
          *(_DWORD *)(a3 + 24) = v22;
          *(void *)(a3 + 16) = v23;
          if (v16 >= 0x41 && v17) {
            uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
          }
          if (v61 < 0x41) {
            goto LABEL_35;
          }
          uint64_t result = v60;
          if (!v60) {
            goto LABEL_35;
          }
        }
        uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
LABEL_35:
        if (v81 >= 0x41)
        {
          uint64_t result = v80;
          if (v80) {
            uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v80, 0x1000C8000313F17);
          }
        }
LABEL_36:
        if (v83 >= 0x41)
        {
          uint64_t result = v82;
          if (v82) {
            return (unint64_t *)MEMORY[0x1D25D9CB0](v82, 0x1000C8000313F17);
          }
        }
        return result;
      }
      if (v83 > 0x40)
      {
        if (((v82[(v83 - 1) >> 6] >> (v83 - 1)) & 1) == 0) {
          goto LABEL_5;
        }
        unsigned int v49 = v83 - 1;
        if (llvm::APInt::countTrailingZerosSlowCase(&v82) != v49) {
          goto LABEL_5;
        }
      }
      else if (v82 != (unint64_t *)(1 << (v83 - 1)))
      {
        goto LABEL_5;
      }
      if (v81 > 0x40)
      {
        if (((v80[(v81 - 1) >> 6] >> (v81 - 1)) & 1) == 0) {
          goto LABEL_42;
        }
        unsigned int v51 = v81 - 1;
        if (llvm::APInt::countTrailingZerosSlowCase(&v80) != v51) {
          goto LABEL_42;
        }
      }
      else if (v80 != (unint64_t *)(1 << (v81 - 1)))
      {
LABEL_42:
        llvm::APInt::operator++((uint64_t)&v82);
        goto LABEL_5;
      }
      uint64_t result = llvm::ConstantRange::ConstantRange((unint64_t *)a3, *v7, 0);
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v9 = *(void *)this;
    unint64_t v10 = *((void *)this + 2);
    if (v10 | *(void *)this)
    {
      if ((uint64_t)(v9 << -(char)v6) >> -(char)v6 <= (uint64_t)(v10 << -(char)v6) >> -(char)v6) {
        goto LABEL_4;
      }
      unsigned int v26 = *((_DWORD *)this + 6);
      goto LABEL_44;
    }
  }

  return llvm::ConstantRange::ConstantRange((unint64_t *)a3, v6, 0);
}

unint64_t *llvm::ConstantRange::smul_fast@<X0>(llvm::ConstantRange *this@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    if (!memcmp(*(const void **)this, *((const void **)this + 2), ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase(this) == v6)
    {
      goto LABEL_78;
    }
  }
  else if (!(*((void *)this + 2) | *(void *)this))
  {
    goto LABEL_78;
  }
  uint64_t v7 = *((unsigned int *)a2 + 2);
  if (v7 >= 0x41)
  {
    if (memcmp(*a2, a2[2], ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8)
      || llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a2) != v7)
    {
      goto LABEL_5;
    }
LABEL_78:
    return llvm::ConstantRange::ConstantRange((unint64_t *)a3, v6, 0);
  }
  if (!((unint64_t)a2[2] | (unint64_t)*a2)) {
    goto LABEL_78;
  }
LABEL_5:
  llvm::ConstantRange::getSignedMin((uint64_t)this, (uint64_t)&v59);
  llvm::ConstantRange::getSignedMax(this, (uint64_t)&v57);
  llvm::ConstantRange::getSignedMin((uint64_t)a2, (uint64_t)&v55);
  llvm::ConstantRange::getSignedMax(a2, (uint64_t)&v53);
  *(_DWORD *)unint64_t v52 = 0;
  llvm::APInt::smul_ov((const void **)&v59, (const llvm::APInt *)&v55, &v52[3], (llvm::APInt *)v61);
  llvm::APInt::smul_ov((const void **)&v59, (const llvm::APInt *)&v53, &v52[2], (llvm::APInt *)&v62);
  llvm::APInt::smul_ov((const void **)&v57, (const llvm::APInt *)&v55, &v52[1], (llvm::APInt *)&v63);
  llvm::APInt::smul_ov((const void **)&v57, (const llvm::APInt *)&v53, v52, (llvm::APInt *)v64);
  if (v52[3] || v52[2] || v52[1] || v52[0])
  {
    uint64_t result = llvm::ConstantRange::ConstantRange((unint64_t *)a3, *((_DWORD *)this + 2), 1);
  }
  else
  {
    uint64_t v8 = 1;
    unint64_t v9 = v61;
    do
    {
      unint64_t v10 = v9;
      uint64_t v11 = &v61[16 * v8];
      uint64_t v12 = *((unsigned int *)v11 + 2);
      if (v12 > 0x40)
      {
        uint64_t v36 = *(void *)(*(void *)v11 + 8 * ((v12 - 1) >> 6)) & (1 << (v12 - 1));
        unsigned int v37 = *((_DWORD *)v9 + 2);
        unsigned int v38 = v37 - 1;
        if (v37 >= 0x41) {
          uint64_t v39 = (void *)(*(void *)v9 + 8 * (v38 >> 6));
        }
        else {
          uint64_t v39 = v9;
        }
        if ((v36 != 0) == ((*v39 >> v38) & 1))
        {
          unint64_t v44 = ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            if (!v44)
            {
              int v17 = 0;
              goto LABEL_14;
            }
            unint64_t v45 = *(void *)(*(void *)v11 - 8 + v44);
            unint64_t v46 = *(void *)(*(void *)v9 - 8 + v44);
            v44 -= 8;
          }
          while (v45 == v46);
          if (v45 > v46) {
            int v17 = 1;
          }
          else {
            int v17 = -1;
          }
        }
        else if (v36)
        {
          int v17 = -1;
        }
        else
        {
          int v17 = 1;
        }
      }
      else
      {
        uint64_t v13 = -v12;
        uint64_t v14 = (uint64_t)(*(void *)v11 << v13) >> v13;
        uint64_t v15 = (uint64_t)(*(void *)v9 << v13) >> v13;
        BOOL v16 = v14 < v15;
        int v17 = v14 > v15;
        if (v16) {
          int v17 = -1;
        }
      }
LABEL_14:
      if (v17 < 0) {
        unint64_t v9 = &v61[16 * v8];
      }
      ++v8;
    }
    while (v8 != 4);
    BOOL v18 = (unsigned int *)v65;
    char v19 = (int *)(v10 + 8);
    if (v17 < 0) {
      char v19 = (int *)v65;
    }
    int v20 = *v19;
    if (*v19 > 0x40) {
      operator new[]();
    }
    uint64_t v21 = *(void **)v9;
    uint64_t v22 = 1;
    unsigned int v23 = v61;
    do
    {
      unsigned int v24 = v23;
      unsigned int v25 = &v61[16 * v22];
      uint64_t v26 = *((unsigned int *)v23 + 2);
      if (v26 > 0x40)
      {
        uint64_t v40 = *(void *)(*(void *)v23 + 8 * ((v26 - 1) >> 6)) & (1 << (v26 - 1));
        unsigned int v41 = *((_DWORD *)v25 + 2);
        unsigned int v42 = v41 - 1;
        if (v41 >= 0x41) {
          unint64_t v43 = (void *)(*(void *)v25 + 8 * (v42 >> 6));
        }
        else {
          unint64_t v43 = &v61[16 * v22];
        }
        if ((v40 != 0) == ((*v43 >> v42) & 1))
        {
          unint64_t v47 = ((unint64_t)(v26 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            if (!v47)
            {
              int v30 = 0;
              goto LABEL_25;
            }
            unint64_t v48 = *(void *)(*(void *)v23 - 8 + v47);
            unint64_t v49 = *(void *)(*(void *)v25 - 8 + v47);
            v47 -= 8;
          }
          while (v48 == v49);
          if (v48 > v49) {
            int v30 = 1;
          }
          else {
            int v30 = -1;
          }
        }
        else if (v40)
        {
          int v30 = -1;
        }
        else
        {
          int v30 = 1;
        }
      }
      else
      {
        uint64_t v27 = -v26;
        uint64_t v28 = (uint64_t)(*(void *)v23 << v27) >> v27;
        uint64_t v29 = (uint64_t)(*(void *)v25 << v27) >> v27;
        BOOL v16 = v28 < v29;
        int v30 = v28 > v29;
        if (v16) {
          int v30 = -1;
        }
      }
LABEL_25:
      if (v30 < 0) {
        unsigned int v23 = &v61[16 * v22];
      }
      ++v22;
    }
    while (v22 != 4);
    if (v30 >= 0) {
      BOOL v18 = (unsigned int *)(v24 + 8);
    }
    unsigned int v51 = *v18;
    if (v51 > 0x40) {
      operator new[]();
    }
    __s2 = *(void **)v23;
    uint64_t result = (unint64_t *)llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
    unsigned int v32 = v51;
    uint64_t v33 = __s2;
    unsigned int v51 = 0;
    if (v21 == __s2)
    {
      *(_DWORD *)(a3 + 8) = v20;
      if (v20) {
        unint64_t v34 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v20;
      }
      else {
        unint64_t v34 = 0;
      }
      *(void *)a3 = v34;
      uint64_t result = (unint64_t *)(a3 + 16);
      *(_DWORD *)(a3 + 24) = v20;
      *(void *)(a3 + 16) = v34;
      if (v32 >= 0x41 && v33) {
        uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v33, 0x1000C8000313F17);
      }
    }
    else
    {
      *(_DWORD *)(a3 + 8) = v20;
      *(void *)a3 = v21;
      *(_DWORD *)(a3 + 24) = v32;
      *(void *)(a3 + 16) = v33;
    }
    if (v51 >= 0x41)
    {
      uint64_t result = (unint64_t *)__s2;
      if (__s2) {
        uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
      }
    }
  }
  for (uint64_t i = 0; i != -64; i -= 16)
  {
    if (*(_DWORD *)&v65[i] >= 0x41u)
    {
      uint64_t result = *(unint64_t **)&v64[i];
      if (result) {
        uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
      }
    }
  }
  if (v54 >= 0x41)
  {
    uint64_t result = v53;
    if (v53) {
      uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v53, 0x1000C8000313F17);
    }
  }
  if (v56 >= 0x41)
  {
    uint64_t result = v55;
    if (v55) {
      uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v55, 0x1000C8000313F17);
    }
  }
  if (v58 >= 0x41)
  {
    uint64_t result = v57;
    if (v57) {
      uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v57, 0x1000C8000313F17);
    }
  }
  if (v60 >= 0x41)
  {
    uint64_t result = v59;
    if (v59) {
      return (unint64_t *)MEMORY[0x1D25D9CB0](v59, 0x1000C8000313F17);
    }
  }
  return result;
}

unint64_t *llvm::ConstantRange::binaryNot@<X0>(llvm::ConstantRange *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4 = *((_DWORD *)this + 2);
  unsigned int v10 = v4;
  if (v4 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v9);
  }
  if (v4) {
    unint64_t v5 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v4;
  }
  else {
    unint64_t v5 = 0;
  }
  unint64_t v9 = v5;
  unsigned int v12 = v4;
  unint64_t v11 = v5;
  unsigned int v10 = 0;
  unsigned int v16 = v4;
  unint64_t v15 = v5;
  llvm::APInt::operator+=((uint64_t)&v15, 1uLL);
  unsigned int v6 = v16;
  unsigned int v14 = v16;
  unint64_t v7 = v15;
  unint64_t v13 = v15;
  uint64_t result = llvm::ConstantRange::sub((llvm::ConstantRange *)&v11, this, a2);
  if (v6 >= 0x41 && v7) {
    uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v7, 0x1000C8000313F17);
  }
  if (v12 >= 0x41)
  {
    if (v5) {
      return (unint64_t *)MEMORY[0x1D25D9CB0](v5, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t llvm::ConstantRange::umul_sat@<X0>(uint64_t this@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4 = (char **)this;
  uint64_t v6 = *(unsigned int *)(this + 8);
  if (v6 >= 0x41)
  {
    unint64_t v13 = *(char **)this;
    this = memcmp(*(const void **)this, *(const void **)(this + 16), ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8);
    if (!this)
    {
      int v14 = 0;
      int64_t v15 = (unint64_t)(v6 + 63) >> 6;
      do
      {
        BOOL v16 = v15-- < 1;
        if (v16) {
          break;
        }
        unint64_t v17 = *(void *)&v13[8 * v15];
        v14 += __clz(v17);
      }
      while (!v17);
      int v18 = v6 | 0xFFFFFFC0;
      if ((v6 & 0x3F) == 0) {
        int v18 = 0;
      }
      if (v14 + v18 == v6)
      {
        *(_DWORD *)(a3 + 8) = v6;
        goto LABEL_47;
      }
    }
  }
  else if (!(*(void *)(this + 16) | *(void *)this))
  {
    *(_DWORD *)(a3 + 8) = v6;
LABEL_45:
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 24) = v6;
    *(void *)(a3 + 16) = 0;
    return this;
  }
  uint64_t v7 = *((unsigned int *)a2 + 2);
  if (v7 >= 0x41)
  {
    char v19 = *a2;
    this = memcmp(*a2, a2[2], ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8);
    if (this) {
      goto LABEL_5;
    }
    int v20 = 0;
    int64_t v21 = (unint64_t)(v7 + 63) >> 6;
    do
    {
      BOOL v16 = v21-- < 1;
      if (v16) {
        break;
      }
      unint64_t v22 = v19[v21];
      v20 += __clz(v22);
    }
    while (!v22);
    int v23 = v7 | 0xFFFFFFC0;
    if ((v7 & 0x3F) == 0) {
      int v23 = 0;
    }
    if (v20 + v23 != v7) {
      goto LABEL_5;
    }
LABEL_44:
    *(_DWORD *)(a3 + 8) = v6;
    if (v6 <= 0x40) {
      goto LABEL_45;
    }
LABEL_47:
    llvm::APInt::initSlowCase((llvm::APInt *)a3);
  }
  if (!((unint64_t)a2[2] | (unint64_t)*a2)) {
    goto LABEL_44;
  }
LABEL_5:
  llvm::ConstantRange::getUnsignedMin((uint64_t)v4, (uint64_t)&v28);
  llvm::ConstantRange::getUnsignedMin((uint64_t)a2, (uint64_t)&v26);
  llvm::APInt::umul_sat((llvm::APInt *)&v28, (const llvm::APInt *)&v26, (uint64_t)&__s1);
  if (v27 >= 0x41 && v26) {
    MEMORY[0x1D25D9CB0](v26, 0x1000C8000313F17);
  }
  if (v29 >= 0x41 && v28) {
    MEMORY[0x1D25D9CB0](v28, 0x1000C8000313F17);
  }
  llvm::ConstantRange::getUnsignedMax(v4, (uint64_t)&v28);
  llvm::ConstantRange::getUnsignedMax((char **)a2, (uint64_t)&v26);
  llvm::APInt::umul_sat((llvm::APInt *)&v28, (const llvm::APInt *)&v26, (uint64_t)&__s2);
  this = llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  unsigned int v8 = v25;
  unint64_t v9 = __s2;
  unsigned int v25 = 0;
  if (v27 >= 0x41)
  {
    this = v26;
    if (v26) {
      this = MEMORY[0x1D25D9CB0](v26, 0x1000C8000313F17);
    }
  }
  if (v29 >= 0x41)
  {
    this = v28;
    if (v28) {
      this = MEMORY[0x1D25D9CB0](v28, 0x1000C8000313F17);
    }
  }
  unsigned int v10 = v31;
  unint64_t v11 = __s1;
  if (v31 > 0x40)
  {
    this = memcmp(__s1, v9, (((unint64_t)v31 + 63) >> 3) & 0x3FFFFFF8);
    if (!this)
    {
      *(_DWORD *)(a3 + 8) = v10;
      llvm::APInt::initSlowCase((llvm::APInt *)a3);
    }
    goto LABEL_19;
  }
  if (__s1 != v9)
  {
LABEL_19:
    *(_DWORD *)(a3 + 8) = v10;
    *(void *)a3 = v11;
    *(_DWORD *)(a3 + 24) = v8;
    *(void *)(a3 + 16) = v9;
    return this;
  }
  *(_DWORD *)(a3 + 8) = v31;
  if (v10) {
    unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v10;
  }
  else {
    unint64_t v12 = 0;
  }
  *(void *)a3 = v12;
  *(_DWORD *)(a3 + 24) = v10;
  *(void *)(a3 + 16) = v12;
  if (v8 >= 0x41 && v9) {
    this = MEMORY[0x1D25D9CB0](v9, 0x1000C8000313F17);
  }
  if (v10 >= 0x41)
  {
    if (v11) {
      return MEMORY[0x1D25D9CB0](v11, 0x1000C8000313F17);
    }
  }
  return this;
}

unint64_t *llvm::ConstantRange::smul_sat@<X0>(const void **this@<X0>, const llvm::ConstantRange *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    int v50 = *this;
    if (!memcmp(*this, this[2], ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8))
    {
      int v51 = 0;
      int64_t v52 = (unint64_t)(v6 + 63) >> 6;
      do
      {
        BOOL v16 = v52-- < 1;
        if (v16) {
          break;
        }
        unint64_t v53 = v50[v52];
        v51 += __clz(v53);
      }
      while (!v53);
      int v54 = v6 | 0xFFFFFFC0;
      if ((v6 & 0x3F) == 0) {
        int v54 = 0;
      }
      if (v51 + v54 == v6) {
        goto LABEL_84;
      }
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    goto LABEL_84;
  }
  uint64_t v7 = *((unsigned int *)a2 + 2);
  if (v7 < 0x41)
  {
    if (*((void *)a2 + 2) | *(void *)a2) {
      goto LABEL_5;
    }
LABEL_84:
    return llvm::ConstantRange::ConstantRange((unint64_t *)a3, v6, 0);
  }
  uint64_t v55 = *(void *)a2;
  if (!memcmp(*(const void **)a2, *((const void **)a2 + 2), ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8))
  {
    int v56 = 0;
    int64_t v57 = (unint64_t)(v7 + 63) >> 6;
    do
    {
      BOOL v16 = v57-- < 1;
      if (v16) {
        break;
      }
      unint64_t v58 = *(void *)(v55 + 8 * v57);
      v56 += __clz(v58);
    }
    while (!v58);
    int v59 = v7 | 0xFFFFFFC0;
    if ((v7 & 0x3F) == 0) {
      int v59 = 0;
    }
    if (v56 + v59 == v7) {
      goto LABEL_84;
    }
  }
LABEL_5:
  llvm::ConstantRange::getSignedMin((uint64_t)this, (uint64_t)&v68);
  llvm::ConstantRange::getSignedMax(this, (uint64_t)&v66);
  llvm::ConstantRange::getSignedMin((uint64_t)a2, (uint64_t)&v64);
  llvm::ConstantRange::getSignedMax(a2, (uint64_t)&v62);
  llvm::APInt::smul_sat((const void **)&v68, (const llvm::APInt *)&v64, (llvm::APInt *)v70);
  llvm::APInt::smul_sat((const void **)&v68, (const llvm::APInt *)&v62, (llvm::APInt *)&v71);
  llvm::APInt::smul_sat((const void **)&v66, (const llvm::APInt *)&v64, (llvm::APInt *)&v72);
  llvm::APInt::smul_sat((const void **)&v66, (const llvm::APInt *)&v62, (llvm::APInt *)v73);
  uint64_t v8 = 1;
  unint64_t v9 = v70;
  do
  {
    unsigned int v10 = v9;
    unint64_t v11 = &v70[16 * v8];
    uint64_t v12 = *((unsigned int *)v11 + 2);
    if (v12 > 0x40)
    {
      uint64_t v36 = *(void *)(*(void *)v11 + 8 * ((v12 - 1) >> 6)) & (1 << (v12 - 1));
      unsigned int v37 = *((_DWORD *)v9 + 2);
      unsigned int v38 = v37 - 1;
      if (v37 >= 0x41) {
        uint64_t v39 = (void *)(*(void *)v9 + 8 * (v38 >> 6));
      }
      else {
        uint64_t v39 = v9;
      }
      if ((v36 != 0) == ((*v39 >> v38) & 1))
      {
        unint64_t v44 = ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          if (!v44)
          {
            int v17 = 0;
            goto LABEL_10;
          }
          unint64_t v45 = *(void *)(*(void *)v11 - 8 + v44);
          unint64_t v46 = *(void *)(*(void *)v9 - 8 + v44);
          v44 -= 8;
        }
        while (v45 == v46);
        if (v45 > v46) {
          int v17 = 1;
        }
        else {
          int v17 = -1;
        }
      }
      else if (v36)
      {
        int v17 = -1;
      }
      else
      {
        int v17 = 1;
      }
    }
    else
    {
      uint64_t v13 = -v12;
      uint64_t v14 = (uint64_t)(*(void *)v11 << v13) >> v13;
      uint64_t v15 = (uint64_t)(*(void *)v9 << v13) >> v13;
      BOOL v16 = v14 < v15;
      int v17 = v14 > v15;
      if (v16) {
        int v17 = -1;
      }
    }
LABEL_10:
    if (v17 < 0) {
      unint64_t v9 = &v70[16 * v8];
    }
    ++v8;
  }
  while (v8 != 4);
  int v18 = (int *)(v10 + 8);
  if (v17 < 0) {
    int v18 = (int *)v74;
  }
  int v19 = *v18;
  if (*v18 > 0x40) {
    operator new[]();
  }
  int v20 = *(void **)v9;
  uint64_t v21 = 1;
  unint64_t v22 = v70;
  do
  {
    int v23 = v22;
    unsigned int v24 = &v70[16 * v21];
    uint64_t v25 = *((unsigned int *)v22 + 2);
    if (v25 > 0x40)
    {
      uint64_t v40 = *(void *)(*(void *)v22 + 8 * ((v25 - 1) >> 6)) & (1 << (v25 - 1));
      unsigned int v41 = *((_DWORD *)v24 + 2);
      unsigned int v42 = v41 - 1;
      if (v41 >= 0x41) {
        unint64_t v43 = (void *)(*(void *)v24 + 8 * (v42 >> 6));
      }
      else {
        unint64_t v43 = &v70[16 * v21];
      }
      if ((v40 != 0) == ((*v43 >> v42) & 1))
      {
        unint64_t v47 = ((unint64_t)(v25 + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          if (!v47)
          {
            int v29 = 0;
            goto LABEL_21;
          }
          unint64_t v48 = *(void *)(*(void *)v22 - 8 + v47);
          unint64_t v49 = *(void *)(*(void *)v24 - 8 + v47);
          v47 -= 8;
        }
        while (v48 == v49);
        if (v48 > v49) {
          int v29 = 1;
        }
        else {
          int v29 = -1;
        }
      }
      else if (v40)
      {
        int v29 = -1;
      }
      else
      {
        int v29 = 1;
      }
    }
    else
    {
      uint64_t v26 = -v25;
      uint64_t v27 = (uint64_t)(*(void *)v22 << v26) >> v26;
      uint64_t v28 = (uint64_t)(*(void *)v24 << v26) >> v26;
      BOOL v16 = v27 < v28;
      int v29 = v27 > v28;
      if (v16) {
        int v29 = -1;
      }
    }
LABEL_21:
    if (v29 < 0) {
      unint64_t v22 = &v70[16 * v21];
    }
    ++v21;
  }
  while (v21 != 4);
  int v30 = (unsigned int *)(v23 + 8);
  if (v29 < 0) {
    int v30 = (unsigned int *)v74;
  }
  unsigned int v61 = *v30;
  if (v61 > 0x40) {
    operator new[]();
  }
  __s2 = *(void **)v22;
  uint64_t result = (unint64_t *)llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  unsigned int v32 = v61;
  uint64_t v33 = __s2;
  unsigned int v61 = 0;
  if (v20 == __s2)
  {
    *(_DWORD *)(a3 + 8) = v19;
    if (v19) {
      unint64_t v34 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v19;
    }
    else {
      unint64_t v34 = 0;
    }
    *(void *)a3 = v34;
    uint64_t result = (unint64_t *)(a3 + 16);
    *(_DWORD *)(a3 + 24) = v19;
    *(void *)(a3 + 16) = v34;
    if (v32 >= 0x41 && v33) {
      uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v33, 0x1000C8000313F17);
    }
  }
  else
  {
    *(_DWORD *)(a3 + 8) = v19;
    *(void *)a3 = v20;
    *(_DWORD *)(a3 + 24) = v32;
    *(void *)(a3 + 16) = v33;
  }
  if (v61 >= 0x41)
  {
    uint64_t result = (unint64_t *)__s2;
    if (__s2) {
      uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
    }
  }
  for (uint64_t i = 0; i != -64; i -= 16)
  {
    if (*(_DWORD *)&v74[i] >= 0x41u)
    {
      uint64_t result = *(unint64_t **)&v73[i];
      if (result) {
        uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
      }
    }
  }
  if (v63 >= 0x41)
  {
    uint64_t result = v62;
    if (v62) {
      uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v62, 0x1000C8000313F17);
    }
  }
  if (v65 >= 0x41)
  {
    uint64_t result = v64;
    if (v64) {
      uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v64, 0x1000C8000313F17);
    }
  }
  if (v67 >= 0x41)
  {
    uint64_t result = v66;
    if (v66) {
      uint64_t result = (unint64_t *)MEMORY[0x1D25D9CB0](v66, 0x1000C8000313F17);
    }
  }
  if (v69 >= 0x41)
  {
    uint64_t result = v68;
    if (v68) {
      return (unint64_t *)MEMORY[0x1D25D9CB0](v68, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t llvm::ConstantRange::ushl_sat@<X0>(uint64_t this@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4 = (char **)this;
  uint64_t v6 = *(unsigned int *)(this + 8);
  if (v6 >= 0x41)
  {
    uint64_t v8 = *(char **)this;
    this = memcmp(*(const void **)this, *(const void **)(this + 16), ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8);
    if (!this)
    {
      int v9 = 0;
      int64_t v10 = (unint64_t)(v6 + 63) >> 6;
      do
      {
        BOOL v11 = v10-- < 1;
        if (v11) {
          break;
        }
        unint64_t v12 = *(void *)&v8[8 * v10];
        v9 += __clz(v12);
      }
      while (!v12);
      int v13 = v6 | 0xFFFFFFC0;
      if ((v6 & 0x3F) == 0) {
        int v13 = 0;
      }
      if (v9 + v13 == v6)
      {
        *(_DWORD *)(a3 + 8) = v6;
        goto LABEL_18;
      }
    }
  }
  else if (!(*(void *)(this + 16) | *(void *)this))
  {
    *(_DWORD *)(a3 + 8) = v6;
LABEL_8:
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 24) = v6;
    *(void *)(a3 + 16) = 0;
    return this;
  }
  uint64_t v7 = *((unsigned int *)a2 + 2);
  if (v7 >= 0x41)
  {
    uint64_t v14 = *a2;
    this = memcmp(*a2, a2[2], ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8);
    if (!this)
    {
      int v20 = 0;
      int64_t v21 = (unint64_t)(v7 + 63) >> 6;
      do
      {
        BOOL v11 = v21-- < 1;
        if (v11) {
          break;
        }
        unint64_t v22 = v14[v21];
        v20 += __clz(v22);
      }
      while (!v22);
      int v23 = v7 | 0xFFFFFFC0;
      if ((v7 & 0x3F) == 0) {
        int v23 = 0;
      }
      if (v20 + v23 == v7)
      {
LABEL_5:
        *(_DWORD *)(a3 + 8) = v6;
        if (v6 > 0x40) {
LABEL_18:
        }
          llvm::APInt::initSlowCase((llvm::APInt *)a3);
        goto LABEL_8;
      }
    }
  }
  else if (!((unint64_t)a2[2] | (unint64_t)*a2))
  {
    goto LABEL_5;
  }
  llvm::ConstantRange::getUnsignedMin((uint64_t)v4, (uint64_t)&v28);
  llvm::ConstantRange::getUnsignedMin((uint64_t)a2, (uint64_t)&v26);
  llvm::APInt::ushl_sat((llvm::APInt *)&v28, (const llvm::APInt *)&v26, (uint64_t)&__s1);
  if (v27 >= 0x41 && v26) {
    MEMORY[0x1D25D9CB0](v26, 0x1000C8000313F17);
  }
  if (v29 >= 0x41 && v28) {
    MEMORY[0x1D25D9CB0](v28, 0x1000C8000313F17);
  }
  llvm::ConstantRange::getUnsignedMax(v4, (uint64_t)&v28);
  llvm::ConstantRange::getUnsignedMax((char **)a2, (uint64_t)&v26);
  llvm::APInt::ushl_sat((llvm::APInt *)&v28, (const llvm::APInt *)&v26, (uint64_t)&__s2);
  this = llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  unsigned int v15 = v25;
  BOOL v16 = __s2;
  unsigned int v25 = 0;
  if (v27 >= 0x41)
  {
    this = v26;
    if (v26) {
      this = MEMORY[0x1D25D9CB0](v26, 0x1000C8000313F17);
    }
  }
  if (v29 >= 0x41)
  {
    this = v28;
    if (v28) {
      this = MEMORY[0x1D25D9CB0](v28, 0x1000C8000313F17);
    }
  }
  uint64_t v17 = v31;
  int v18 = __s1;
  unsigned int v31 = 0;
  if (v17 > 0x40)
  {
    this = memcmp(__s1, v16, ((unint64_t)(v17 + 63) >> 3) & 0x3FFFFFF8);
    if (!this)
    {
      *(_DWORD *)(a3 + 8) = v17;
      llvm::APInt::initSlowCase((llvm::APInt *)a3);
    }
  }
  else if (__s1 == v16)
  {
    *(_DWORD *)(a3 + 8) = v17;
    if (v17) {
      unint64_t v19 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v17;
    }
    else {
      unint64_t v19 = 0;
    }
    *(void *)a3 = v19;
    *(_DWORD *)(a3 + 24) = v17;
    *(void *)(a3 + 16) = v19;
    if (v15 >= 0x41 && v16) {
      this = MEMORY[0x1D25D9CB0](v16, 0x1000C8000313F17);
    }
    goto LABEL_40;
  }
  *(_DWORD *)(a3 + 8) = v17;
  *(void *)a3 = v18;
  *(_DWORD *)(a3 + 24) = v15;
  *(void *)(a3 + 16) = v16;
LABEL_40:
  if (v31 >= 0x41)
  {
    this = (uint64_t)__s1;
    if (__s1) {
      return MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
    }
  }
  return this;
}

uint64_t llvm::ConstantRange::sshl_sat@<X0>(uint64_t this@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4 = (_DWORD *)this;
  uint64_t v6 = *(unsigned int *)(this + 8);
  if (v6 >= 0x41)
  {
    uint64_t v8 = *(void **)this;
    this = memcmp(*(const void **)this, *(const void **)(this + 16), ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8);
    if (!this)
    {
      int v9 = 0;
      int64_t v10 = (unint64_t)(v6 + 63) >> 6;
      do
      {
        BOOL v11 = v10-- < 1;
        if (v11) {
          break;
        }
        unint64_t v12 = v8[v10];
        v9 += __clz(v12);
      }
      while (!v12);
      int v13 = v6 | 0xFFFFFFC0;
      if ((v6 & 0x3F) == 0) {
        int v13 = 0;
      }
      if (v9 + v13 == v6)
      {
        *(_DWORD *)(a3 + 8) = v6;
        goto LABEL_18;
      }
    }
  }
  else if (!(*(void *)(this + 16) | *(void *)this))
  {
    *(_DWORD *)(a3 + 8) = v6;
LABEL_8:
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 24) = v6;
    *(void *)(a3 + 16) = 0;
    return this;
  }
  uint64_t v7 = *((unsigned int *)a2 + 2);
  if (v7 >= 0x41)
  {
    uint64_t v14 = *a2;
    this = memcmp(*a2, a2[2], ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8);
    if (!this)
    {
      int v24 = 0;
      int64_t v25 = (unint64_t)(v7 + 63) >> 6;
      do
      {
        BOOL v11 = v25-- < 1;
        if (v11) {
          break;
        }
        unint64_t v26 = v14[v25];
        v24 += __clz(v26);
      }
      while (!v26);
      int v27 = v7 | 0xFFFFFFC0;
      if ((v7 & 0x3F) == 0) {
        int v27 = 0;
      }
      if (v24 + v27 == v7)
      {
LABEL_5:
        *(_DWORD *)(a3 + 8) = v6;
        if (v6 > 0x40) {
LABEL_18:
        }
          llvm::APInt::initSlowCase((llvm::APInt *)a3);
        goto LABEL_8;
      }
    }
  }
  else if (!((unint64_t)a2[2] | (unint64_t)*a2))
  {
    goto LABEL_5;
  }
  llvm::ConstantRange::getSignedMin((uint64_t)v4, (uint64_t)&v38);
  llvm::ConstantRange::getSignedMax(v4, (uint64_t)&v36);
  llvm::ConstantRange::getUnsignedMin((uint64_t)a2, (uint64_t)&v34);
  llvm::ConstantRange::getUnsignedMax((char **)a2, (uint64_t)&v32);
  if (v39 >= 0x41) {
    unsigned int v15 = (uint64_t *)(v38 + 8 * ((v39 - 1) >> 6));
  }
  else {
    unsigned int v15 = &v38;
  }
  if (((unint64_t)*v15 >> (v39 - 1))) {
    BOOL v16 = &v32;
  }
  else {
    BOOL v16 = &v34;
  }
  llvm::APInt::sshl_sat((llvm::APInt *)&v38, (const llvm::APInt *)v16, (llvm::APInt *)&__s1);
  if (v37 >= 0x41) {
    uint64_t v17 = (uint64_t *)(v36 + 8 * ((v37 - 1) >> 6));
  }
  else {
    uint64_t v17 = &v36;
  }
  if (((unint64_t)*v17 >> (v37 - 1))) {
    int v18 = &v34;
  }
  else {
    int v18 = &v32;
  }
  llvm::APInt::sshl_sat((llvm::APInt *)&v36, (const llvm::APInt *)v18, (llvm::APInt *)&__s2);
  this = llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  unsigned int v19 = v29;
  int v20 = __s2;
  unsigned int v29 = 0;
  uint64_t v21 = v31;
  unint64_t v22 = __s1;
  unsigned int v31 = 0;
  if (v21 > 0x40)
  {
    this = memcmp(__s1, __s2, ((unint64_t)(v21 + 63) >> 3) & 0x3FFFFFF8);
    if (!this)
    {
      *(_DWORD *)(a3 + 8) = v21;
      llvm::APInt::initSlowCase((llvm::APInt *)a3);
    }
  }
  else if (__s1 == __s2)
  {
    *(_DWORD *)(a3 + 8) = v21;
    if (v21) {
      unint64_t v23 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v21;
    }
    else {
      unint64_t v23 = 0;
    }
    *(void *)a3 = v23;
    *(_DWORD *)(a3 + 24) = v21;
    *(void *)(a3 + 16) = v23;
    if (v19 >= 0x41 && v20) {
      this = MEMORY[0x1D25D9CB0](v20, 0x1000C8000313F17);
    }
    goto LABEL_40;
  }
  *(_DWORD *)(a3 + 8) = v21;
  *(void *)a3 = v22;
  *(_DWORD *)(a3 + 24) = v19;
  *(void *)(a3 + 16) = v20;
LABEL_40:
  if (v31 >= 0x41)
  {
    this = (uint64_t)__s1;
    if (__s1) {
      this = MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
    }
  }
  if (v33 >= 0x41)
  {
    this = v32;
    if (v32) {
      this = MEMORY[0x1D25D9CB0](v32, 0x1000C8000313F17);
    }
  }
  if (v35 >= 0x41)
  {
    this = v34;
    if (v34) {
      this = MEMORY[0x1D25D9CB0](v34, 0x1000C8000313F17);
    }
  }
  if (v37 >= 0x41)
  {
    this = v36;
    if (v36) {
      this = MEMORY[0x1D25D9CB0](v36, 0x1000C8000313F17);
    }
  }
  if (v39 >= 0x41)
  {
    this = v38;
    if (v38) {
      return MEMORY[0x1D25D9CB0](v38, 0x1000C8000313F17);
    }
  }
  return this;
}

uint64_t llvm::ConstantRange::unsignedAddMayOverflow(const void **this, const void **a2)
{
  uint64_t v4 = *((unsigned int *)this + 2);
  if (v4 >= 0x41)
  {
    int v20 = *this;
    if (!memcmp(*this, this[2], ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8))
    {
      int v21 = 0;
      int64_t v22 = (unint64_t)(v4 + 63) >> 6;
      do
      {
        BOOL v16 = v22-- < 1;
        if (v16) {
          break;
        }
        unint64_t v23 = v20[v22];
        v21 += __clz(v23);
      }
      while (!v23);
      int v24 = v4 | 0xFFFFFFC0;
      if ((v4 & 0x3F) == 0) {
        int v24 = 0;
      }
      if (v21 + v24 == v4) {
        return 2;
      }
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    return 2;
  }
  uint64_t v5 = *((unsigned int *)a2 + 2);
  if (v5 >= 0x41)
  {
    int64_t v25 = *a2;
    if (memcmp(*a2, a2[2], ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8)) {
      goto LABEL_5;
    }
    int v26 = 0;
    int64_t v27 = (unint64_t)(v5 + 63) >> 6;
    do
    {
      BOOL v16 = v27-- < 1;
      if (v16) {
        break;
      }
      unint64_t v28 = v25[v27];
      v26 += __clz(v28);
    }
    while (!v28);
    int v29 = v5 | 0xFFFFFFC0;
    if ((v5 & 0x3F) == 0) {
      int v29 = 0;
    }
    if (v26 + v29 != v5) {
      goto LABEL_5;
    }
    return 2;
  }
  if (!((unint64_t)a2[2] | (unint64_t)*a2)) {
    return 2;
  }
LABEL_5:
  llvm::ConstantRange::getUnsignedMin((uint64_t)this, (uint64_t)&v46);
  llvm::ConstantRange::getUnsignedMax((char **)this, (uint64_t)&v44);
  llvm::ConstantRange::getUnsignedMin((uint64_t)a2, (uint64_t)&__src);
  llvm::ConstantRange::getUnsignedMax((char **)a2, (uint64_t)&v40);
  unsigned int v6 = v43;
  if (v43 > 0x40) {
    operator new[]();
  }
  uint64_t v7 = __src;
  unint64_t v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v43;
  if (!v43) {
    unint64_t v8 = 0;
  }
  unint64_t v9 = v8 & ~(unint64_t)__src;
  unsigned int v10 = v47;
  if (v47 > 0x40)
  {
    unint64_t v11 = v46;
    unint64_t v30 = (((unint64_t)v47 + 63) >> 3) & 0x3FFFFFF8;
    do
    {
      if (!v30)
      {
        int v12 = 0;
        goto LABEL_12;
      }
      unint64_t v31 = *(void *)(v46 + v30 - 8);
      unint64_t v32 = *(void *)(v9 + v30 - 8);
      v30 -= 8;
    }
    while (v31 == v32);
    if (v31 > v32) {
      int v12 = 1;
    }
    else {
      int v12 = -1;
    }
  }
  else
  {
    unint64_t v11 = v46;
    if (v46 < v9) {
      int v12 = -1;
    }
    else {
      int v12 = v46 > v9;
    }
  }
LABEL_12:
  if (v12 >= 1)
  {
    uint64_t v18 = 1;
    unsigned int v13 = v41;
  }
  else
  {
    unsigned int v13 = v41;
    if (v41 > 0x40) {
      operator new[]();
    }
    unint64_t v14 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v41;
    if (!v41) {
      unint64_t v14 = 0;
    }
    unint64_t v15 = v14 & ~(unint64_t)v40;
    if (v45 > 0x40)
    {
      unint64_t v33 = (((unint64_t)v45 + 63) >> 3) & 0x3FFFFFF8;
      while (v33)
      {
        unint64_t v34 = *(void *)(v44 - 8 + v33);
        unint64_t v35 = *(void *)(v15 + v33 - 8);
        v33 -= 8;
        BOOL v16 = v34 > v35;
        if (v34 != v35) {
          goto LABEL_18;
        }
      }
      int v17 = 0;
    }
    else
    {
      BOOL v16 = v44 > v15;
LABEL_18:
      int v17 = v16;
    }
    if (v17) {
      uint64_t v18 = 2;
    }
    else {
      uint64_t v18 = 3;
    }
  }
  if (v13 >= 0x41 && v40)
  {
    unint64_t v36 = v11;
    unsigned int v37 = __src;
    MEMORY[0x1D25D9CB0](v40, 0x1000C8000313F17);
    unint64_t v11 = v36;
    uint64_t v7 = v37;
  }
  if (v6 >= 0x41 && v7)
  {
    unint64_t v38 = v11;
    MEMORY[0x1D25D9CB0](v7, 0x1000C8000313F17);
    unint64_t v11 = v38;
  }
  if (v45 >= 0x41 && v44)
  {
    unint64_t v39 = v11;
    MEMORY[0x1D25D9CB0](v44, 0x1000C8000313F17);
    unint64_t v11 = v39;
  }
  if (v10 >= 0x41 && v11) {
    MEMORY[0x1D25D9CB0](v11, 0x1000C8000313F17);
  }
  return v18;
}

uint64_t llvm::ConstantRange::signedAddMayOverflow(const void **this, const void **a2)
{
  uint64_t v4 = *((unsigned int *)this + 2);
  if (v4 >= 0x41)
  {
    unint64_t v46 = *this;
    if (!memcmp(*this, this[2], ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8))
    {
      int v47 = 0;
      int64_t v48 = (unint64_t)(v4 + 63) >> 6;
      do
      {
        BOOL v29 = v48-- < 1;
        if (v29) {
          break;
        }
        unint64_t v49 = v46[v48];
        v47 += __clz(v49);
      }
      while (!v49);
      int v50 = v4 | 0xFFFFFFC0;
      if ((v4 & 0x3F) == 0) {
        int v50 = 0;
      }
      if (v47 + v50 == v4) {
        return 2;
      }
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    return 2;
  }
  uint64_t v5 = *((unsigned int *)a2 + 2);
  if (v5 >= 0x41)
  {
    int v51 = *a2;
    if (memcmp(*a2, a2[2], ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8)) {
      goto LABEL_5;
    }
    int v52 = 0;
    int64_t v53 = (unint64_t)(v5 + 63) >> 6;
    do
    {
      BOOL v29 = v53-- < 1;
      if (v29) {
        break;
      }
      unint64_t v54 = v51[v53];
      v52 += __clz(v54);
    }
    while (!v54);
    int v55 = v5 | 0xFFFFFFC0;
    if ((v5 & 0x3F) == 0) {
      int v55 = 0;
    }
    if (v52 + v55 != v5) {
      goto LABEL_5;
    }
    return 2;
  }
  if (!((unint64_t)a2[2] | (unint64_t)*a2)) {
    return 2;
  }
LABEL_5:
  llvm::ConstantRange::getSignedMin((uint64_t)this, (uint64_t)&v90);
  llvm::ConstantRange::getSignedMax(this, (uint64_t)&v88);
  llvm::ConstantRange::getSignedMin((uint64_t)a2, (uint64_t)&v86);
  llvm::ConstantRange::getSignedMax(a2, (uint64_t)&v84);
  unsigned int v6 = *((_DWORD *)this + 2);
  unsigned int v83 = v6;
  if (v6 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v82);
  }
  unsigned int v7 = v6;
  int v82 = (void *)(1 << (v6 - 1));
  unsigned int v8 = *((_DWORD *)this + 2);
  unsigned int v81 = v8;
  if (v8 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&__src);
  }
  unint64_t v9 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
  if (!v8) {
    unint64_t v9 = 0;
  }
  unsigned int v10 = v8;
  uint64_t __src = (void *)(v9 & ~(1 << (v8 - 1)));
  unsigned int v11 = v91;
  unsigned int v12 = v91 - 1;
  uint64_t v13 = v90;
  if (v91 >= 0x41) {
    unint64_t v14 = (uint64_t *)(v90 + 8 * (v12 >> 6));
  }
  else {
    unint64_t v14 = &v90;
  }
  uint64_t v15 = 1 << v12;
  if ((v15 & *v14) == 0)
  {
    unsigned int v32 = v87 - 1;
    unint64_t v33 = &v86;
    if (v87 >= 0x41) {
      unint64_t v33 = (uint64_t *)(v86 + 8 * (v32 >> 6));
    }
    if ((((unint64_t)*v33 >> v32) & 1) == 0)
    {
      unint64_t v34 = v10 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v10 : 0;
      uint64_t v35 = v34 & ((unint64_t)__src - v86);
      if (v91 >= 0x41)
      {
        uint64_t v56 = *(void *)(v90 + 8 * ((v91 - 1) >> 6)) & v15;
        if ((v56 != 0) == (((v34 & ((unint64_t)__src - v86)) >> (v10 - 1)) & 1))
        {
          int64_t v37 = (((unint64_t)v91 + 63) >> 3) & 0x3FFFFFF8;
          while (v37)
          {
            unint64_t v57 = *(void *)(v90 - 8 + v37);
            unint64_t v58 = *(void *)(v35 + v37 - 8);
            v37 -= 8;
            if (v57 != v58)
            {
              if (v57 > v58) {
                LODWORD(v37) = 1;
              }
              else {
                LODWORD(v37) = -1;
              }
              break;
            }
          }
        }
        else
        {
          LODWORD(v37) = v56 ? -1 : 1;
        }
      }
      else
      {
        uint64_t v36 = v90 << -(char)v91 >> -(char)v91;
        int64_t v37 = v35 << -(char)v91 >> -(char)v91;
        BOOL v29 = v36 < v37;
        LODWORD(v37) = v36 > v37;
        if (v29) {
          LODWORD(v37) = -1;
        }
      }
      if ((int)v37 > 0)
      {
        uint64_t result = 1;
        goto LABEL_29;
      }
    }
  }
  uint64_t v16 = v89;
  unsigned int v17 = v89 - 1;
  uint64_t v18 = v88;
  unsigned int v19 = (void *)(v88 + 8 * ((v89 - 1) >> 6));
  if (v89 >= 0x41) {
    int v20 = (uint64_t *)(v88 + 8 * (v17 >> 6));
  }
  else {
    int v20 = &v88;
  }
  uint64_t v21 = 1 << v17;
  uint64_t v22 = *v20;
  if ((v21 & *v20) == 0) {
    goto LABEL_17;
  }
  uint64_t v74 = v20;
  int v59 = (unint64_t *)&v84;
  if (v85 >= 0x41) {
    int v59 = &v84[(v85 - 1) >> 6];
  }
  if (((*v59 >> (v85 - 1)) & 1) == 0)
  {
LABEL_17:
    if ((v22 & v21) != 0) {
      goto LABEL_48;
    }
    unsigned int v23 = v85 - 1;
    int v24 = (unint64_t *)&v84;
    if (v85 >= 0x41) {
      int v24 = &v84[v23 >> 6];
    }
    if ((*v24 >> v23)) {
      goto LABEL_48;
    }
    unint64_t v25 = v10 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v10 : 0;
    int64_t v26 = v25 & ((unsigned char *)__src - (unsigned char *)v84);
    if (v16 >= 0x41)
    {
      uint64_t v42 = *v19 & v21;
      if ((v42 != 0) == (((v25 & ((unsigned char *)__src - (unsigned char *)v84)) >> (v10 - 1)) & 1))
      {
        int64_t v30 = ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8;
        uint64_t v43 = v18 - 8;
        while (v30)
        {
          unint64_t v44 = *(void *)(v43 + v30);
          unint64_t v45 = *(void *)(v26 + v30 - 8);
          v30 -= 8;
          if (v44 != v45)
          {
            if (v44 > v45) {
              LODWORD(v30) = 1;
            }
            else {
              LODWORD(v30) = -1;
            }
            break;
          }
        }
      }
      else
      {
        LODWORD(v30) = v42 ? -1 : 1;
      }
    }
    else
    {
      uint64_t v27 = -v16;
      uint64_t v28 = v18 << v27 >> v27;
      int64_t v30 = v26 << v27 >> v27;
      BOOL v29 = v28 < v30;
      LODWORD(v30) = v28 > v30;
      if (v29) {
        LODWORD(v30) = -1;
      }
    }
    if ((int)v30 <= 0)
    {
      if ((*v14 & v15) == 0) {
        goto LABEL_84;
      }
LABEL_48:
      unsigned int v38 = v87 - 1;
      unint64_t v39 = &v86;
      if (v87 >= 0x41) {
        unint64_t v39 = (uint64_t *)(v86 + 8 * (v38 >> 6));
      }
      if (((unint64_t)*v39 >> v38))
      {
        if (v7) {
          unint64_t v40 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
        }
        else {
          unint64_t v40 = 0;
        }
        unsigned int v79 = v7;
        uint64_t v78 = v40 & ((unint64_t)v82 - v86);
        int v41 = llvm::APInt::compareSigned((llvm::APInt *)&v90, (const llvm::APInt *)&v78);
        uint64_t result = 2;
        if ((v41 & 0x80000000) == 0)
        {
          if (v41 < 0) {
            LODWORD(result) = 2;
          }
          else {
            LODWORD(result) = 3;
          }
          uint64_t result = result;
        }
      }
      else
      {
LABEL_84:
        uint64_t result = 3;
      }
    }
    else
    {
      uint64_t result = 2;
    }
    goto LABEL_29;
  }
  unsigned int v68 = (void *)(v88 + 8 * ((v89 - 1) >> 6));
  uint64_t v69 = v21;
  uint64_t v70 = v88;
  uint64_t v71 = v89;
  uint64_t v72 = v14;
  uint64_t v73 = v15;
  unsigned int v77 = v7;
  unsigned int v75 = v7;
  unint64_t v76 = v82;
  llvm::APInt::operator-=((uint64_t)&v76, &v84);
  unsigned int v64 = v77;
  unsigned int v79 = v77;
  unsigned int v65 = v76;
  uint64_t v78 = (uint64_t)v76;
  unsigned int v77 = 0;
  int v66 = llvm::APInt::compareSigned((llvm::APInt *)&v88, (const llvm::APInt *)&v78);
  int v67 = v66;
  if (v64 >= 0x41)
  {
    if (v65)
    {
      MEMORY[0x1D25D9CB0](v65, 0x1000C8000313F17);
      if (v77 >= 0x41)
      {
        if (v76) {
          MEMORY[0x1D25D9CB0](v76, 0x1000C8000313F17);
        }
      }
    }
  }
  if ((v67 & 0x80000000) == 0)
  {
    uint64_t v22 = *v74;
    unsigned int v7 = v75;
    unint64_t v14 = v72;
    uint64_t v15 = v73;
    uint64_t v18 = v70;
    uint64_t v16 = v71;
    unsigned int v19 = v68;
    uint64_t v21 = v69;
    goto LABEL_17;
  }
  uint64_t result = 0;
LABEL_29:
  if (v85 >= 0x41 && v84)
  {
    uint64_t v60 = result;
    MEMORY[0x1D25D9CB0](v84, 0x1000C8000313F17);
    uint64_t result = v60;
  }
  if (v87 >= 0x41 && v86)
  {
    uint64_t v61 = result;
    MEMORY[0x1D25D9CB0](v86, 0x1000C8000313F17);
    uint64_t result = v61;
  }
  if (v89 >= 0x41 && v88)
  {
    uint64_t v62 = result;
    MEMORY[0x1D25D9CB0](v88, 0x1000C8000313F17);
    uint64_t result = v62;
  }
  if (v11 >= 0x41)
  {
    if (v13)
    {
      uint64_t v63 = result;
      MEMORY[0x1D25D9CB0](v13, 0x1000C8000313F17);
      return v63;
    }
  }
  return result;
}

uint64_t llvm::ConstantRange::unsignedSubMayOverflow(const void **this, const llvm::ConstantRange *a2)
{
  uint64_t v4 = *((unsigned int *)this + 2);
  if (v4 >= 0x41)
  {
    unsigned int v12 = *this;
    if (!memcmp(*this, this[2], ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8))
    {
      int v13 = 0;
      int64_t v14 = (unint64_t)(v4 + 63) >> 6;
      do
      {
        BOOL v15 = v14-- < 1;
        if (v15) {
          break;
        }
        unint64_t v16 = v12[v14];
        v13 += __clz(v16);
      }
      while (!v16);
      int v17 = v4 | 0xFFFFFFC0;
      if ((v4 & 0x3F) == 0) {
        int v17 = 0;
      }
      if (v13 + v17 == v4) {
        return 2;
      }
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    return 2;
  }
  uint64_t v5 = *((unsigned int *)a2 + 2);
  if (v5 < 0x41)
  {
    if (*((void *)a2 + 2) | *(void *)a2) {
      goto LABEL_5;
    }
    return 2;
  }
  uint64_t v18 = *(void *)a2;
  if (!memcmp(*(const void **)a2, *((const void **)a2 + 2), ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8))
  {
    int v19 = 0;
    int64_t v20 = (unint64_t)(v5 + 63) >> 6;
    do
    {
      BOOL v15 = v20-- < 1;
      if (v15) {
        break;
      }
      unint64_t v21 = *(void *)(v18 + 8 * v20);
      v19 += __clz(v21);
    }
    while (!v21);
    int v22 = v5 | 0xFFFFFFC0;
    if ((v5 & 0x3F) == 0) {
      int v22 = 0;
    }
    if (v19 + v22 == v5) {
      return 2;
    }
  }
LABEL_5:
  llvm::ConstantRange::getUnsignedMin((uint64_t)this, (uint64_t)&v37);
  llvm::ConstantRange::getUnsignedMax((char **)this, (uint64_t)&v35);
  llvm::ConstantRange::getUnsignedMin((uint64_t)a2, (uint64_t)&v33);
  llvm::ConstantRange::getUnsignedMax((char **)a2, (uint64_t)&v31);
  unsigned int v6 = v36;
  if (v36 > 0x40)
  {
    unint64_t v7 = v35;
    unint64_t v8 = v33;
    unint64_t v23 = (((unint64_t)v36 + 63) >> 3) & 0x3FFFFFF8;
    while (v23)
    {
      unint64_t v24 = *(void *)(v35 + v23 - 8);
      unint64_t v25 = *(void *)(v33 + v23 - 8);
      v23 -= 8;
      if (v24 != v25)
      {
        if (v24 <= v25) {
          goto LABEL_7;
        }
        break;
      }
    }
  }
  else
  {
    unint64_t v7 = v35;
    unint64_t v8 = v33;
    if (v35 < v33)
    {
LABEL_7:
      uint64_t v9 = 0;
      goto LABEL_8;
    }
  }
  if (v38 > 0x40)
  {
    unint64_t v26 = (((unint64_t)v38 + 63) >> 3) & 0x3FFFFFF8;
    while (v26)
    {
      unint64_t v27 = *(void *)(v37 - 8 + v26);
      unint64_t v28 = *(void *)(v31 - 8 + v26);
      v26 -= 8;
      if (v27 != v28)
      {
        if (v27 <= v28) {
          goto LABEL_39;
        }
        break;
      }
    }
  }
  else if (v37 < v31)
  {
LABEL_39:
    uint64_t v9 = 2;
    goto LABEL_8;
  }
  uint64_t v9 = 3;
LABEL_8:
  if (v32 >= 0x41 && v31)
  {
    unint64_t v29 = v7;
    MEMORY[0x1D25D9CB0](v31, 0x1000C8000313F17);
    unint64_t v7 = v29;
  }
  if (v34 >= 0x41 && v8 != 0)
  {
    unint64_t v30 = v7;
    MEMORY[0x1D25D9CB0](v8, 0x1000C8000313F17);
    unint64_t v7 = v30;
  }
  if (v6 >= 0x41 && v7) {
    MEMORY[0x1D25D9CB0](v7, 0x1000C8000313F17);
  }
  if (v38 >= 0x41 && v37) {
    MEMORY[0x1D25D9CB0](v37, 0x1000C8000313F17);
  }
  return v9;
}

uint64_t llvm::ConstantRange::signedSubMayOverflow(const void **this, const llvm::ConstantRange *a2)
{
  uint64_t v4 = *((unsigned int *)this + 2);
  if (v4 >= 0x41)
  {
    unint64_t v28 = *this;
    if (!memcmp(*this, this[2], ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8))
    {
      int v29 = 0;
      int64_t v30 = (unint64_t)(v4 + 63) >> 6;
      do
      {
        BOOL v31 = v30-- < 1;
        if (v31) {
          break;
        }
        unint64_t v32 = v28[v30];
        v29 += __clz(v32);
      }
      while (!v32);
      int v33 = v4 | 0xFFFFFFC0;
      if ((v4 & 0x3F) == 0) {
        int v33 = 0;
      }
      if (v29 + v33 == v4) {
        return 2;
      }
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    return 2;
  }
  uint64_t v5 = *((unsigned int *)a2 + 2);
  if (v5 < 0x41)
  {
    if (*((void *)a2 + 2) | *(void *)a2) {
      goto LABEL_5;
    }
    return 2;
  }
  uint64_t v34 = *(void *)a2;
  if (!memcmp(*(const void **)a2, *((const void **)a2 + 2), ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8))
  {
    int v35 = 0;
    int64_t v36 = (unint64_t)(v5 + 63) >> 6;
    do
    {
      BOOL v31 = v36-- < 1;
      if (v31) {
        break;
      }
      unint64_t v37 = *(void *)(v34 + 8 * v36);
      v35 += __clz(v37);
    }
    while (!v37);
    int v38 = v5 | 0xFFFFFFC0;
    if ((v5 & 0x3F) == 0) {
      int v38 = 0;
    }
    if (v35 + v38 == v5) {
      return 2;
    }
  }
LABEL_5:
  llvm::ConstantRange::getSignedMin((uint64_t)this, (uint64_t)&v65);
  llvm::ConstantRange::getSignedMax(this, (uint64_t)&v63);
  llvm::ConstantRange::getSignedMin((uint64_t)a2, (uint64_t)&v61);
  llvm::ConstantRange::getSignedMax(a2, (uint64_t)&v59);
  unsigned int v6 = *((_DWORD *)this + 2);
  unsigned int v58 = v6;
  if (v6 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v57);
  }
  unsigned int v7 = v6;
  unint64_t v57 = (void *)(1 << (v6 - 1));
  unsigned int v8 = *((_DWORD *)this + 2);
  unsigned int v56 = v8;
  if (v8 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&__src);
  }
  if (v8) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
  }
  else {
    unint64_t v9 = 0;
  }
  uint64_t __src = (void *)(v9 & ~(1 << (v8 - 1)));
  unsigned int v10 = v66;
  unsigned int v11 = v66 - 1;
  uint64_t v12 = v65;
  if (v66 >= 0x41) {
    int v13 = (uint64_t *)(v65 + 8 * (v11 >> 6));
  }
  else {
    int v13 = &v65;
  }
  uint64_t v14 = 1 << v11;
  if (((1 << v11) & *v13) == 0)
  {
    unsigned int v15 = v60 - 1;
    unint64_t v16 = (uint64_t *)&v59;
    if (v60 >= 0x41) {
      unint64_t v16 = &v59[v15 >> 6];
    }
    if (((unint64_t)*v16 >> v15))
    {
      unsigned int v52 = v8;
      int v51 = __src;
      llvm::APInt::operator+=((uint64_t)&v51, &v59);
      unsigned int v44 = v52;
      unsigned int v54 = v52;
      unint64_t v45 = v51;
      uint64_t v53 = (uint64_t)v51;
      unsigned int v52 = 0;
      int v46 = llvm::APInt::compareSigned((llvm::APInt *)&v65, (const llvm::APInt *)&v53);
      if (v44 >= 0x41)
      {
        if (v45)
        {
          MEMORY[0x1D25D9CB0](v45, 0x1000C8000313F17);
          if (v52 >= 0x41)
          {
            if (v51) {
              MEMORY[0x1D25D9CB0](v51, 0x1000C8000313F17);
            }
          }
        }
      }
      if (v46 > 0)
      {
        uint64_t v23 = 1;
        goto LABEL_27;
      }
    }
  }
  int v17 = (uint64_t *)(v63 + 8 * ((v64 - 1) >> 6));
  if (v64 < 0x41) {
    int v17 = &v63;
  }
  uint64_t v18 = 1 << (v64 - 1);
  uint64_t v19 = *v17;
  if ((v18 & *v17) == 0) {
    goto LABEL_19;
  }
  unsigned int v39 = v62 - 1;
  unint64_t v40 = (uint64_t *)&v61;
  if (v62 >= 0x41) {
    unint64_t v40 = &v61[v39 >> 6];
  }
  if (((unint64_t)*v40 >> v39))
  {
LABEL_19:
    if ((v19 & v18) != 0) {
      goto LABEL_35;
    }
    unsigned int v20 = v62 - 1;
    unint64_t v21 = (uint64_t *)&v61;
    if (v62 >= 0x41) {
      unint64_t v21 = &v61[v20 >> 6];
    }
    if ((((unint64_t)*v21 >> v20) & 1) == 0
      || (!v8 ? (unint64_t v22 = 0) : (unint64_t v22 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8),
          unsigned int v54 = v8,
          uint64_t v53 = v22 & ((unint64_t)v61 + (void)__src),
          (int)llvm::APInt::compareSigned((llvm::APInt *)&v63, (const llvm::APInt *)&v53) <= 0))
    {
LABEL_35:
      if ((*v13 & v14) == 0) {
        goto LABEL_57;
      }
      unsigned int v25 = v60 - 1;
      unint64_t v26 = (uint64_t *)&v59;
      if (v60 >= 0x41) {
        unint64_t v26 = &v59[v25 >> 6];
      }
      if (((unint64_t)*v26 >> v25))
      {
LABEL_57:
        uint64_t v23 = 3;
      }
      else
      {
        if (v7) {
          unint64_t v27 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
        }
        else {
          unint64_t v27 = 0;
        }
        unsigned int v54 = v7;
        uint64_t v53 = v27 & ((unint64_t)v59 + (void)v57);
        if ((int)llvm::APInt::compareSigned((llvm::APInt *)&v65, (const llvm::APInt *)&v53) < 0) {
          uint64_t v23 = 2;
        }
        else {
          uint64_t v23 = 3;
        }
      }
    }
    else
    {
      uint64_t v23 = 2;
    }
    goto LABEL_27;
  }
  int v47 = v17;
  uint64_t v48 = 1 << (v64 - 1);
  unsigned int v50 = v7;
  unint64_t v49 = v57;
  llvm::APInt::operator+=((uint64_t)&v49, &v61);
  unsigned int v41 = v50;
  unsigned int v54 = v50;
  uint64_t v42 = v49;
  uint64_t v53 = (uint64_t)v49;
  unsigned int v50 = 0;
  int v43 = llvm::APInt::compareSigned((llvm::APInt *)&v63, (const llvm::APInt *)&v53);
  if (v41 >= 0x41)
  {
    if (v42)
    {
      MEMORY[0x1D25D9CB0](v42, 0x1000C8000313F17);
      if (v50 >= 0x41)
      {
        if (v49) {
          MEMORY[0x1D25D9CB0](v49, 0x1000C8000313F17);
        }
      }
    }
  }
  if ((v43 & 0x80000000) == 0)
  {
    uint64_t v18 = v48;
    uint64_t v19 = *v47;
    goto LABEL_19;
  }
  uint64_t v23 = 0;
LABEL_27:
  if (v60 >= 0x41 && v59) {
    MEMORY[0x1D25D9CB0](v59, 0x1000C8000313F17);
  }
  if (v62 >= 0x41 && v61) {
    MEMORY[0x1D25D9CB0](v61, 0x1000C8000313F17);
  }
  if (v64 >= 0x41 && v63) {
    MEMORY[0x1D25D9CB0](v63, 0x1000C8000313F17);
  }
  if (v10 >= 0x41 && v12) {
    MEMORY[0x1D25D9CB0](v12, 0x1000C8000313F17);
  }
  return v23;
}

uint64_t llvm::ConstantRange::unsignedMulMayOverflow(const void **this, const void **a2)
{
  uint64_t v4 = *((unsigned int *)this + 2);
  if (v4 >= 0x41)
  {
    unsigned int v8 = *this;
    if (!memcmp(*this, this[2], ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8))
    {
      int v9 = 0;
      int64_t v10 = (unint64_t)(v4 + 63) >> 6;
      do
      {
        BOOL v11 = v10-- < 1;
        if (v11) {
          break;
        }
        unint64_t v12 = v8[v10];
        v9 += __clz(v12);
      }
      while (!v12);
      int v13 = v4 | 0xFFFFFFC0;
      if ((v4 & 0x3F) == 0) {
        int v13 = 0;
      }
      if (v9 + v13 == v4) {
        return 2;
      }
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    return 2;
  }
  uint64_t v5 = *((unsigned int *)a2 + 2);
  if (v5 >= 0x41)
  {
    uint64_t v14 = *a2;
    if (memcmp(*a2, a2[2], ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8)) {
      goto LABEL_5;
    }
    int v15 = 0;
    int64_t v16 = (unint64_t)(v5 + 63) >> 6;
    do
    {
      BOOL v11 = v16-- < 1;
      if (v11) {
        break;
      }
      unint64_t v17 = v14[v16];
      v15 += __clz(v17);
    }
    while (!v17);
    int v18 = v5 | 0xFFFFFFC0;
    if ((v5 & 0x3F) == 0) {
      int v18 = 0;
    }
    if (v15 + v18 != v5) {
      goto LABEL_5;
    }
    return 2;
  }
  if (!((unint64_t)a2[2] | (unint64_t)*a2)) {
    return 2;
  }
LABEL_5:
  llvm::ConstantRange::getUnsignedMin((uint64_t)this, (uint64_t)&v30);
  llvm::ConstantRange::getUnsignedMax((char **)this, (uint64_t)&v28);
  llvm::ConstantRange::getUnsignedMin((uint64_t)a2, (uint64_t)&v26);
  llvm::ConstantRange::getUnsignedMax((char **)a2, (uint64_t)&v24);
  BOOL v23 = 0;
  llvm::APInt::umul_ov((llvm::APInt *)&v30, (const llvm::APInt *)&v26, &v23, (uint64_t)&v21);
  if (v22 >= 0x41 && v21) {
    MEMORY[0x1D25D9CB0](v21, 0x1000C8000313F17);
  }
  if (v23)
  {
    uint64_t v6 = 1;
  }
  else
  {
    llvm::APInt::umul_ov((llvm::APInt *)&v28, (const llvm::APInt *)&v24, &v23, (uint64_t)&v19);
    if (v20 >= 0x41 && v19) {
      MEMORY[0x1D25D9CB0](v19, 0x1000C8000313F17);
    }
    if (v23) {
      uint64_t v6 = 2;
    }
    else {
      uint64_t v6 = 3;
    }
  }
  if (v25 >= 0x41 && v24) {
    MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
  }
  if (v27 >= 0x41 && v26) {
    MEMORY[0x1D25D9CB0](v26, 0x1000C8000313F17);
  }
  if (v29 >= 0x41 && v28) {
    MEMORY[0x1D25D9CB0](v28, 0x1000C8000313F17);
  }
  if (v31 >= 0x41 && v30) {
    MEMORY[0x1D25D9CB0](v30, 0x1000C8000313F17);
  }
  return v6;
}

uint64_t llvm::getConstantRangeFromMetadata@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(unsigned int *)(this + 8);
  uint64_t v4 = (void *)(this - 8 * v3);
  uint64_t v5 = *(void *)(*v4 + 128);
  uint64_t v6 = *(void *)(v4[1] + 128);
  unsigned int v7 = *(_DWORD *)(v5 + 32);
  if (v7 > 0x40) {
    operator new[]();
  }
  uint64_t v8 = *(void *)(v5 + 24);
  unsigned int v9 = *(_DWORD *)(v6 + 32);
  if (v9 > 0x40) {
    operator new[]();
  }
  uint64_t v10 = *(void *)(v6 + 24);
  *(_DWORD *)(a2 + 8) = v7;
  *(void *)a2 = v8;
  *(_DWORD *)(a2 + 24) = v9;
  *(void *)(a2 + 16) = v10;
  if (v3 >= 4)
  {
    LODWORD(v11) = v3 >> 1;
    if (v3 >> 1 <= 2) {
      uint64_t v11 = 2;
    }
    else {
      uint64_t v11 = v11;
    }
    uint64_t v12 = v11 - 1;
    uint64_t v13 = this;
    uint64_t v21 = this;
    do
    {
      uint64_t v14 = v13 - 8 * *(unsigned int *)(this + 8);
      uint64_t v15 = *(void *)(*(void *)(v14 + 16) + 128);
      uint64_t v16 = *(void *)(*(void *)(v14 + 24) + 128);
      if (*(_DWORD *)(v15 + 32) > 0x40u) {
        operator new[]();
      }
      uint64_t v17 = *(void *)(v15 + 24);
      unsigned int v18 = *(_DWORD *)(v16 + 32);
      if (v18 > 0x40) {
        operator new[]();
      }
      uint64_t v19 = *(void *)(v16 + 24);
      int v23 = *(_DWORD *)(v15 + 32);
      uint64_t v22 = v17;
      unsigned int v25 = v18;
      uint64_t v24 = v19;
      llvm::ConstantRange::unionWith(a2, (unsigned int *)&v22, 0, (uint64_t)v26);
      sub_1CC149928(a2, (uint64_t)v26);
      sub_1CC05EB8C((uint64_t)v26);
      sub_1CC05EB8C((uint64_t)&v22);
      v13 += 16;
      --v12;
      this = v21;
    }
    while (v12);
  }
  return this;
}

uint64_t llvm::Constant::isNegativeZeroValue(llvm::Constant *this)
{
  BOOL v1 = *((unsigned char *)this + 16) != 17;
  do
  {
    uint64_t v2 = this;
    if (!v1)
    {
      if (*((_UNKNOWN **)this + 4) == &unk_1CFB2E344) {
        unsigned int v8 = *(unsigned __int8 *)(*((void *)this + 5) + 28);
      }
      else {
        unsigned int v8 = *((unsigned __int8 *)this + 52);
      }
      if ((v8 & 7) == 3) {
        return (v8 >> 3) & 1;
      }
      return 0;
    }
    if ((*(_DWORD *)(*(void *)this + 8) & 0xFE) != 0x12) {
      break;
    }
    this = (llvm::Constant *)llvm::Constant::getSplatValue(this, 0);
    if (!this) {
      break;
    }
    BOOL v1 = 0;
  }
  while (*((unsigned char *)this + 16) == 17);
  if ((*(_DWORD *)(*(void *)v2 + 8) & 0xFE) == 0x12) {
    unsigned int v3 = *(unsigned __int8 *)(**(void **)(*(void *)v2 + 16) + 8);
  }
  else {
    unsigned int v3 = *(_DWORD *)(*(void *)v2 + 8);
  }
  if (v3 < 7) {
    return 0;
  }
  int v4 = *((unsigned __int8 *)v2 + 16);
  if (v4 == 16)
  {
    uint64_t v5 = *((unsigned int *)v2 + 8);
    if (v5 > 0x40)
    {
      int v9 = 0;
      int64_t v10 = (unint64_t)(v5 + 63) >> 6;
      do
      {
        if (v10-- < 1) {
          break;
        }
        unint64_t v12 = *(void *)(*((void *)v2 + 3) + 8 * v10);
        v9 += __clz(v12);
      }
      while (!v12);
      int v13 = v5 | 0xFFFFFFC0;
      if ((v5 & 0x3F) == 0) {
        int v13 = 0;
      }
      return v9 + v13 == v5;
    }
    else
    {
      return *((void *)v2 + 3) == 0;
    }
  }
  if (v4 != 17)
  {
    uint64_t result = 1;
    if ((v4 - 18) < 3 || v4 == 13) {
      return result;
    }
    return 0;
  }

  return sub_1CB844168((uint64_t)v2, 0.0);
}

void *llvm::Constant::getSplatValue(llvm::Constant *this, llvm::Type *a2)
{
  uint64_t result = 0;
  unsigned int v4 = *((unsigned __int8 *)this + 16);
  if (v4 <= 0xC)
  {
    if (v4 != 5)
    {
      if (v4 == 10)
      {
        return (void *)llvm::ConstantVector::getSplatValue(this, (int)a2);
      }
      return result;
    }
    if (*((_WORD *)this + 9) == 63)
    {
      uint64_t v6 = (uint64_t *)((char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
      if (*(unsigned __int8 *)(v6[4] + 16) - 11 <= 1)
      {
        uint64_t v7 = *v6;
        if (v7 && *(unsigned char *)(v7 + 16) == 5 && *(_WORD *)(v7 + 18) == 62)
        {
          int v9 = (void *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF));
          if (*(unsigned __int8 *)(*v9 + 16) - 11 <= 1)
          {
            uint64_t v10 = v9[8];
            if (v10 && *(unsigned char *)(v10 + 16) == 16)
            {
              unint64_t v12 = (_DWORD *)*((void *)this + 3);
              uint64_t v13 = *((unsigned int *)this + 8);
              uint64_t result = (void *)v9[4];
              uint64_t v14 = (void *)(v10 + 24);
              uint64_t v15 = *(unsigned int *)(v10 + 32);
              if (v15 >= 0x41)
              {
                int v16 = 0;
                int64_t v17 = (unint64_t)(v15 + 63) >> 6;
                do
                {
                  if (v17-- < 1) {
                    break;
                  }
                  unint64_t v19 = *(void *)(*v14 + 8 * v17);
                  v16 += __clz(v19);
                }
                while (!v19);
                int v20 = v15 | 0xFFFFFFC0;
                if ((v15 & 0x3F) == 0) {
                  int v20 = 0;
                }
                if ((v15 - v16 - v20) > 0x40) {
                  return 0;
                }
                uint64_t v14 = (void *)*v14;
              }
              if (!*v14)
              {
                if (!v13) {
                  return result;
                }
                uint64_t v21 = 4 * v13;
                while (!*v12)
                {
                  ++v12;
                  v21 -= 4;
                  if (!v21) {
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
    return 0;
  }
  if (v4 == 15)
  {
    if (*((unsigned char *)this + 40))
    {
      if ((*((unsigned char *)this + 40) & 2) == 0) {
        return 0;
      }
    }
    else
    {
      *((unsigned char *)this + 40) |= 1u;
      if (llvm::ConstantDataVector::isSplatData(this)) {
        char v22 = 2;
      }
      else {
        char v22 = 0;
      }
      char v23 = *((unsigned char *)this + 40) & 0xFD | v22;
      *((unsigned char *)this + 40) = v23;
      if ((v23 & 2) == 0) {
        return 0;
      }
    }
    return llvm::ConstantDataSequential::getElementAsConstant((llvm::ConstantFP ***)this, 0);
  }
  else if (v4 == 13)
  {
    uint64_t v5 = *(llvm::Constant **)(*(void *)this + 24);
    return (void *)llvm::Constant::getNullValue(v5, a2);
  }
  return result;
}

uint64_t llvm::Constant::isNullValue(llvm::Constant *this)
{
  unsigned int v1 = *((unsigned __int8 *)this + 16);
  if (this && v1 == 16)
  {
    uint64_t v2 = *((unsigned int *)this + 8);
    if (v2 > 0x40)
    {
      int v7 = 0;
      int64_t v8 = (unint64_t)(v2 + 63) >> 6;
      do
      {
        BOOL v5 = v8-- < 1;
        if (v5) {
          break;
        }
        unint64_t v9 = *(void *)(*((void *)this + 3) + 8 * v8);
        v7 += __clz(v9);
      }
      while (!v9);
      int v10 = v2 | 0xFFFFFFC0;
      if ((v2 & 0x3F) == 0) {
        int v10 = 0;
      }
      return v7 + v10 == v2;
    }
    else
    {
      return *((void *)this + 3) == 0;
    }
  }
  else if (this && v1 == 17)
  {
    return sub_1CB844168((uint64_t)this, 0.0);
  }
  else
  {
    BOOL v5 = v1 > 0x14;
    unsigned int v6 = (0x1C2000u >> v1) & 1;
    if (v5) {
      return 0;
    }
    else {
      return v6;
    }
  }
}

uint64_t llvm::Constant::isZeroValue(llvm::Constant *this)
{
  if (this && *((unsigned char *)this + 16) == 17)
  {
    SplatValue = this;
    unint64_t v12 = (void *)*((void *)this + 4);
LABEL_28:
    if (v12 == &unk_1CFB2E344) {
      uint64_t v13 = (char *)*((void *)SplatValue + 5);
    }
    else {
      uint64_t v13 = (char *)SplatValue + 24;
    }
    return (v13[28] & 7) == 3;
  }
  if ((*(_DWORD *)(*(void *)this + 8) & 0xFE) == 0x12)
  {
    uint64_t v14 = this;
    SplatValue = (llvm::Constant *)llvm::Constant::getSplatValue(this, 0);
    this = v14;
    if (SplatValue)
    {
      if (*((unsigned char *)SplatValue + 16) == 17)
      {
        unint64_t v12 = (void *)*((void *)SplatValue + 4);
        goto LABEL_28;
      }
    }
  }
  int v1 = *((unsigned __int8 *)this + 16);
  if (v1 == 16)
  {
    uint64_t v2 = *((unsigned int *)this + 8);
    if (v2 > 0x40)
    {
      int v6 = 0;
      int64_t v7 = (unint64_t)(v2 + 63) >> 6;
      do
      {
        if (v7-- < 1) {
          break;
        }
        unint64_t v9 = *(void *)(*((void *)this + 3) + 8 * v7);
        v6 += __clz(v9);
      }
      while (!v9);
      int v10 = v2 | 0xFFFFFFC0;
      if ((v2 & 0x3F) == 0) {
        int v10 = 0;
      }
      return v6 + v10 == v2;
    }
    else
    {
      return *((void *)this + 3) == 0;
    }
  }
  if (v1 != 17) {
    return (v1 - 18) < 3 || v1 == 13;
  }

  return sub_1CB844168((uint64_t)this, 0.0);
}

BOOL llvm::Constant::isAllOnesValue(llvm::Constant *this)
{
  while (1)
  {
    int v1 = *((unsigned __int8 *)this + 16);
    if (this && v1 == 16)
    {
      unsigned int v4 = *((_DWORD *)this + 8);
      if (v4)
      {
        BOOL v5 = (llvm::Constant *)((char *)this + 24);
        if (v4 <= 0x40)
        {
          uint64_t v6 = *(void *)v5;
          return v6 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v4;
        }
        return llvm::APInt::countTrailingOnesSlowCase(v5) == v4;
      }
      return 1;
    }
    if (this && v1 == 17) {
      break;
    }
    if ((*(_DWORD *)(*(void *)this + 8) & 0xFE) != 0x12) {
      return 0;
    }
    this = (llvm::Constant *)llvm::Constant::getSplatValue(this, 0);
    uint64_t v2 = 0;
    if (!this) {
      return v2;
    }
  }
  unint64_t v9 = (void *)*((void *)this + 4);
  int64_t v8 = (llvm::Constant *)((char *)this + 32);
  if (v9 == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v8, (llvm::APInt *)&v12);
  }
  else {
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v8, (uint64_t)&v12);
  }
  LOBYTE(v4) = v13;
  if (!v13) {
    return 1;
  }
  if (v13 <= 0x40)
  {
    uint64_t v6 = v12;
    return v6 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v4;
  }
  unsigned int v10 = v13;
  BOOL v11 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v12) == v10;
  if (v12) {
    MEMORY[0x1D25D9CB0](v12, 0x1000C8000313F17);
  }
  return v11;
}

llvm::Constant *llvm::Constant::isOneValue(llvm::Constant *this)
{
  while (1)
  {
    int v1 = *((unsigned __int8 *)this + 16);
    if (this && v1 == 16)
    {
      unsigned int v2 = *((_DWORD *)this + 8);
      if (v2 > 0x40) {
        return (llvm::Constant *)(llvm::APInt::countLeadingZerosSlowCase((llvm::Constant *)((char *)this + 24)) == v2 - 1);
      }
      else {
        return (llvm::Constant *)(*((void *)this + 3) == 1);
      }
    }
    if (this && v1 == 17) {
      break;
    }
    if ((*(_DWORD *)(*(void *)this + 8) & 0xFE) != 0x12) {
      return 0;
    }
    this = (llvm::Constant *)llvm::Constant::getSplatValue(this, 0);
    if (!this) {
      return this;
    }
  }
  sub_1CB867534((uint64_t)this + 24, (uint64_t)&v6);
  unsigned int v4 = v7;
  if (v7 > 0x40)
  {
    BOOL v5 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v6) == v4 - 1;
    if (v6) {
      MEMORY[0x1D25D9CB0](v6, 0x1000C8000313F17);
    }
  }
  else
  {
    return (llvm::Constant *)(v6 == 1);
  }
  return (llvm::Constant *)v5;
}

unint64_t llvm::Constant::isNotOneValue(unint64_t this)
{
  while (1)
  {
    int v2 = *(unsigned __int8 *)(this + 16);
    if (this && v2 == 16) {
      return llvm::Constant::isOneValue((llvm::Constant *)this) ^ 1;
    }
    if (this && v2 == 17) {
      break;
    }
    int v3 = *(unsigned __int8 *)(*(void *)this + 8);
    if (*(void *)this) {
      BOOL v4 = v3 == 18;
    }
    else {
      BOOL v4 = 0;
    }
    if (v4)
    {
      int v7 = *(_DWORD *)(*(void *)this + 32);
      if (!v7) {
        return 1;
      }
      int64_t v8 = 0;
      while (1)
      {
        Aggregateunsigned int Element = (llvm::Constant *)llvm::Constant::getAggregateElement((llvm::Constant *)this, v8);
        if (!AggregateElement || (llvm::Constant::isNotOneValue(AggregateElement) & 1) == 0) {
          break;
        }
        int64_t v8 = (llvm::Type *)(v8 + 1);
        if (v7 == v8) {
          return 1;
        }
      }
      return 0;
    }
    if ((v3 & 0xFE) != 0x12) {
      return 0;
    }
    this = (unint64_t)llvm::Constant::getSplatValue((llvm::Constant *)this, 0);
    if (!this) {
      return this;
    }
  }
  uint64_t v6 = *(void **)(this + 32);
  BOOL v5 = (llvm::detail::DoubleAPFloat *)(this + 32);
  if (v6 == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v5, (llvm::APInt *)&v16);
  }
  else {
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v5, (uint64_t)&v16);
  }
  if (v17 <= 0x40) {
    return v16 != 1;
  }
  int v11 = 0;
  int64_t v12 = ((unint64_t)v17 + 63) >> 6;
  do
  {
    if (v12-- < 1) {
      break;
    }
    unint64_t v14 = *(void *)(v16 + 8 * v12);
    v11 += __clz(v14);
  }
  while (!v14);
  unsigned int v15 = v17 | 0xFFFFFFC0;
  if ((v17 & 0x3F) == 0) {
    unsigned int v15 = 0;
  }
  this = v11 + v15 != v17 - 1;
  if (v16) {
    MEMORY[0x1D25D9CB0](v16, 0x1000C8000313F17);
  }
  return this;
}

void *llvm::Constant::getAggregateElement(llvm::Constant *this, llvm::Type *a2)
{
  unsigned int v2 = a2;
  int v4 = *((unsigned __int8 *)this + 16);
  if (this && (v4 - 11) >= 0xFFFFFFFD)
  {
    uint64_t v5 = *((_DWORD *)this + 5) & 0x7FFFFFF;
    if (v5 > a2) {
      return (void *)*((void *)this + 4 * a2 + -4 * v5);
    }
    return 0;
  }
  if (this && v4 == 13)
  {
    if (llvm::ConstantAggregateZero::getElementCount(this) > a2)
    {
      uint64_t v8 = *(void *)this;
      if (*(_DWORD *)(*(void *)this + 8) == 17
        || (*(_DWORD *)(*(void *)this + 8) & 0xFE) == 18)
      {
        unint64_t v19 = (llvm::Constant **)(v8 + 24);
      }
      else
      {
        unint64_t v19 = (llvm::Constant **)(*(void *)(v8 + 16) + 8 * v2);
      }
      unsigned int v10 = *v19;
      return (void *)llvm::Constant::getNullValue(v10, v7);
    }
    return 0;
  }
  uint64_t v11 = *(void *)this;
  int v12 = *(unsigned __int8 *)(*(void *)this + 8);
  if (v12 == 19) {
    return 0;
  }
  if (v4 == 12)
  {
    if (v12 == 17 || (v12 & 0xFE) == 0x12) {
      unsigned int v13 = *(_DWORD *)(v11 + 32);
    }
    else {
      unsigned int v13 = *(_DWORD *)(v11 + 12);
    }
    if (v13 <= a2) {
      return 0;
    }
    if (v12 == 17 || (v12 & 0xFE) == 18) {
      int v20 = (llvm::PoisonValue **)(v11 + 24);
    }
    else {
      int v20 = (llvm::PoisonValue **)(*(void *)(v11 + 16) + 8 * a2);
    }
    uint64_t v16 = *v20;
    return llvm::PoisonValue::get(v16, a2);
  }
  else if ((v4 - 13) >= 0xFFFFFFFE)
  {
    if (v12 == 17 || (v12 & 0xFE) == 0x12) {
      unsigned int v14 = *(_DWORD *)(v11 + 32);
    }
    else {
      unsigned int v14 = *(_DWORD *)(v11 + 12);
    }
    if (v14 <= a2) {
      return 0;
    }
    if (v12 == 17 || (v12 & 0xFE) == 0x12) {
      unsigned int v17 = (llvm::UndefValue **)(v11 + 24);
    }
    else {
      unsigned int v17 = (llvm::UndefValue **)(*(void *)(v11 + 16) + 8 * a2);
    }
    unsigned int v18 = *v17;
    return (void *)llvm::UndefValue::get(v18, a2);
  }
  else
  {
    if ((v4 & 0xFE) != 0xE || *(_DWORD *)(v11 + 32) <= a2) {
      return 0;
    }
    return llvm::ConstantDataSequential::getElementAsConstant((llvm::ConstantFP ***)this, a2);
  }
}

void *llvm::Constant::isMinSignedValue(void *this)
{
  while (1)
  {
    int v1 = *((unsigned __int8 *)this + 16);
    if (this && v1 == 16)
    {
      unsigned int v2 = this + 3;
      unsigned int v3 = *((_DWORD *)this + 8);
      if (v3 > 0x40)
      {
        if (((*(void *)(*v2 + 8 * ((v3 - 1) >> 6)) >> (v3 - 1)) & 1) == 0) {
          return 0;
        }
        return (void *)(llvm::APInt::countTrailingZerosSlowCase((unint64_t **)this + 3) == v3 - 1);
      }
      else
      {
        return (void *)(*v2 == 1 << (v3 - 1));
      }
    }
    if (this && v1 == 17) {
      break;
    }
    if ((*(_DWORD *)(*this + 8) & 0xFE) != 0x12) {
      return 0;
    }
    this = llvm::Constant::getSplatValue((llvm::Constant *)this, 0);
    if (!this) {
      return this;
    }
  }
  uint64_t v6 = (void *)this[4];
  uint64_t v5 = (llvm::detail::DoubleAPFloat *)(this + 4);
  if (v6 == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v5, (llvm::APInt *)&v10);
  }
  else {
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v5, (uint64_t)&v10);
  }
  if (v11 < 0x41) {
    return (void *)(v10 == (unint64_t *)(1 << (v11 - 1)));
  }
  uint64_t v8 = v10;
  if ((v10[(v11 - 1) >> 6] >> (v11 - 1)))
  {
    unsigned int v7 = v11 - 1;
    BOOL v9 = llvm::APInt::countTrailingZerosSlowCase(&v10) == v7;
  }
  else
  {
    BOOL v9 = 0;
  }
  MEMORY[0x1D25D9CB0](v8, 0x1000C8000313F17);
  return (void *)v9;
}

unint64_t llvm::Constant::isNotMinSignedValue(unint64_t this)
{
  while (1)
  {
    int v2 = *(unsigned __int8 *)(this + 16);
    if (this && v2 == 16)
    {
      uint64_t v5 = (unint64_t **)(this + 24);
      unsigned int v6 = *(_DWORD *)(this + 32);
      if (v6 > 0x40)
      {
        if ((((*v5)[(v6 - 1) >> 6] >> (v6 - 1)) & 1) == 0)
        {
          int v8 = 0;
          return v8 ^ 1u;
        }
        BOOL v7 = llvm::APInt::countTrailingZerosSlowCase(v5) == v6 - 1;
      }
      else
      {
        BOOL v7 = *v5 == (unint64_t *)(1 << (v6 - 1));
      }
      int v8 = v7;
      return v8 ^ 1u;
    }
    if (this && v2 == 17)
    {
      unsigned int v10 = *(void **)(this + 32);
      BOOL v9 = (llvm::detail::DoubleAPFloat *)(this + 32);
      if (v10 == &unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v9, (llvm::APInt *)&v17);
      }
      else {
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v9, (uint64_t)&v17);
      }
      if (v18 < 0x41) {
        return v17 != (unint64_t *)(1 << (v18 - 1));
      }
      uint64_t v16 = v17;
      if ((v17[(v18 - 1) >> 6] >> (v18 - 1)))
      {
        unsigned int v15 = v18 - 1;
        this = llvm::APInt::countTrailingZerosSlowCase(&v17) != v15;
      }
      else
      {
        this = 1;
      }
      MEMORY[0x1D25D9CB0](v16, 0x1000C8000313F17);
      return this;
    }
    int v3 = *(unsigned __int8 *)(*(void *)this + 8);
    if (*(void *)this && v3 == 18) {
      break;
    }
    if ((v3 & 0xFE) != 0x12) {
      return 0;
    }
    this = (unint64_t)llvm::Constant::getSplatValue((llvm::Constant *)this, 0);
    if (!this) {
      return this;
    }
  }
  int v11 = *(_DWORD *)(*(void *)this + 32);
  if (!v11) {
    return 1;
  }
  int v12 = 0;
  while (1)
  {
    Aggregateunsigned int Element = (llvm::Constant *)llvm::Constant::getAggregateElement((llvm::Constant *)this, v12);
    if (!AggregateElement || (llvm::Constant::isNotMinSignedValue(AggregateElement) & 1) == 0) {
      break;
    }
    int v12 = (llvm::Type *)(v12 + 1);
    if (v11 == v12) {
      return 1;
    }
  }
  return 0;
}

uint64_t llvm::Constant::isFiniteNonZeroFP(llvm::Constant *this)
{
  int v1 = this;
  BOOL v2 = *((unsigned char *)this + 16) != 17;
  while (1)
  {
    if (!v2)
    {
      if (*((_UNKNOWN **)v1 + 4) == &unk_1CFB2E344) {
        char v6 = *(unsigned char *)(*((void *)v1 + 5) + 28);
      }
      else {
        char v6 = *((unsigned char *)v1 + 52);
      }
      unsigned int v7 = v6 & 7;
      if (v7 >= 2) {
        return v7 != 3;
      }
      return 0;
    }
    int v3 = *(unsigned __int8 *)(*(void *)v1 + 8);
    if (*(void *)v1 && v3 == 18) {
      break;
    }
    if ((v3 & 0xFE) != 0x12) {
      return 0;
    }
    uint64_t result = (uint64_t)llvm::Constant::getSplatValue(v1, 0);
    if (result)
    {
      int v1 = (llvm::Constant *)result;
      BOOL v2 = 0;
      uint64_t result = 0;
      if (*((unsigned char *)v1 + 16) == 17) {
        continue;
      }
    }
    return result;
  }
  int v8 = *(_DWORD *)(*(void *)v1 + 32);
  if (!v8) {
    return 1;
  }
  BOOL v9 = 0;
  while (1)
  {
    uint64_t result = (uint64_t)llvm::Constant::getAggregateElement(v1, v9);
    if (!result) {
      break;
    }
    if (*(unsigned char *)(result + 16) != 17) {
      return 0;
    }
    char v10 = *(_UNKNOWN **)(result + 32) == &unk_1CFB2E344
        ? *(unsigned char *)(*(void *)(result + 40) + 28)
        : *(unsigned char *)(result + 52);
    unsigned int v11 = v10 & 7;
    if (v11 < 2 || v11 == 3) {
      return 0;
    }
    BOOL v9 = (llvm::Type *)(v9 + 1);
    if (v8 == v9) {
      return 1;
    }
  }
  return result;
}

uint64_t llvm::Constant::isNormalFP(llvm::Constant *this)
{
  int v1 = this;
  BOOL v2 = *((unsigned char *)this + 16) != 17;
  while (v2)
  {
    int v3 = *(unsigned __int8 *)(*(void *)v1 + 8);
    if (*(void *)v1) {
      BOOL v4 = v3 == 18;
    }
    else {
      BOOL v4 = 0;
    }
    if (v4)
    {
      int v6 = *(_DWORD *)(*(void *)v1 + 32);
      if (!v6) {
        return 1;
      }
      unsigned int v7 = 0;
      while (1)
      {
        uint64_t result = (uint64_t)llvm::Constant::getAggregateElement(v1, v7);
        if (!result) {
          break;
        }
        uint64_t v8 = result;
        if (*(unsigned char *)(result + 16) != 17 || sub_1CB8456FC(result + 24)) {
          return 0;
        }
        char v9 = *(_UNKNOWN **)(v8 + 32) == &unk_1CFB2E344 ? *(unsigned char *)(*(void *)(v8 + 40) + 28) : *(unsigned char *)(v8 + 52);
        unsigned int v10 = v9 & 7;
        if (v10 < 2 || v10 == 3) {
          return 0;
        }
        unsigned int v7 = (llvm::Type *)(v7 + 1);
        uint64_t result = 1;
        if (v6 == v7) {
          return result;
        }
      }
      return result;
    }
    if ((v3 & 0xFE) != 0x12) {
      return 0;
    }
    uint64_t result = (uint64_t)llvm::Constant::getSplatValue(v1, 0);
    if (result)
    {
      int v1 = (llvm::Constant *)result;
      BOOL v2 = 0;
      uint64_t result = 0;
      if (*((unsigned char *)v1 + 16) == 17) {
        continue;
      }
    }
    return result;
  }
  if (sub_1CB8456FC((uint64_t)v1 + 24)) {
    return 0;
  }
  char v11 = *((_UNKNOWN **)v1 + 4) == &unk_1CFB2E344 ? *(unsigned char *)(*((void *)v1 + 5) + 28) : *((unsigned char *)v1 + 52);
  unsigned int v12 = v11 & 7;
  if (v12 < 2) {
    return 0;
  }
  return v12 != 3;
}

uint64_t llvm::Constant::hasExactInverseFP(llvm::Constant *this)
{
  int v1 = this;
  BOOL v2 = *((unsigned char *)this + 16) != 17;
  while (1)
  {
    if (!v2)
    {
      return sub_1CC5638FC((uint64_t)v1 + 24, 0);
    }
    int v3 = *(unsigned __int8 *)(*(void *)v1 + 8);
    if (*(void *)v1 && v3 == 18) {
      break;
    }
    if ((v3 & 0xFE) != 0x12) {
      return 0;
    }
    uint64_t result = (uint64_t)llvm::Constant::getSplatValue(v1, 0);
    if (result)
    {
      int v1 = (llvm::Constant *)result;
      BOOL v2 = 0;
      uint64_t result = 0;
      if (*((unsigned char *)v1 + 16) == 17) {
        continue;
      }
    }
    return result;
  }
  int v6 = *(_DWORD *)(*(void *)v1 + 32);
  if (!v6) {
    return 1;
  }
  unsigned int v7 = 0;
  while (1)
  {
    uint64_t result = (uint64_t)llvm::Constant::getAggregateElement(v1, v7);
    if (!result) {
      break;
    }
    if (*(unsigned char *)(result + 16) != 17 || (sub_1CC5638FC(result + 24, 0) & 1) == 0) {
      return 0;
    }
    unsigned int v7 = (llvm::Type *)(v7 + 1);
    if (v6 == v7) {
      return 1;
    }
  }
  return result;
}

uint64_t sub_1CC5638FC(uint64_t a1, llvm::APFloat *a2)
{
  int v3 = *(void **)(a1 + 8);
  BOOL v2 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  if (v3 == &unk_1CFB2E344) {
    return llvm::detail::DoubleAPFloat::getExactInverse(v2, a2);
  }
  else {
    return llvm::detail::IEEEFloat::getExactInverse((void **)v2, (uint64_t)a2);
  }
}

uint64_t llvm::Constant::isNaN(llvm::Constant *this)
{
  int v1 = this;
  if (this && *((unsigned char *)this + 16) == 17)
  {
LABEL_3:
    if (*((_UNKNOWN **)v1 + 4) == &unk_1CFB2E344) {
      BOOL v2 = (char *)*((void *)v1 + 5);
    }
    else {
      BOOL v2 = (char *)v1 + 24;
    }
    return (v2[28] & 7) == 1;
  }
  int v3 = *(unsigned __int8 *)(*(void *)this + 8);
  if (*(void *)this) {
    BOOL v4 = v3 == 18;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4)
  {
    if ((v3 & 0xFE) != 0x12) {
      return 0;
    }
    uint64_t result = (uint64_t)llvm::Constant::getSplatValue(this, 0);
    if (!result) {
      return result;
    }
    int v1 = (llvm::Constant *)result;
    if (*(unsigned char *)(result + 16) != 17) {
      return 0;
    }
    goto LABEL_3;
  }
  int v6 = *(_DWORD *)(*(void *)this + 32);
  if (!v6) {
    return 1;
  }
  unsigned int v7 = 0;
  while (1)
  {
    uint64_t result = (uint64_t)llvm::Constant::getAggregateElement(v1, v7);
    if (!result) {
      break;
    }
    if (*(unsigned char *)(result + 16) != 17) {
      return 0;
    }
    uint64_t v8 = *(_UNKNOWN **)(result + 32) == &unk_1CFB2E344 ? *(void *)(result + 40) : result + 24;
    if ((*(unsigned char *)(v8 + 28) & 7) != 1) {
      return 0;
    }
    unsigned int v7 = (llvm::Type *)(v7 + 1);
    if (v6 == v7) {
      return 1;
    }
  }
  return result;
}

uint64_t llvm::Constant::isElementWiseEqual(llvm::Constant *this, llvm::Value *a2)
{
  if (this == a2) {
    return 1;
  }
  *(void *)&v18[17] = v2;
  uint64_t v19 = v3;
  if ((*(_DWORD *)(*(void *)this + 8) & 0xFE) == 0x12) {
    uint64_t v5 = *(void *)this;
  }
  else {
    uint64_t v5 = 0;
  }
  if (*((unsigned __int8 *)a2 + 16) > 0x14u || v5 == 0) {
    return 0;
  }
  uint64_t v16 = this;
  unsigned int v17 = a2;
  if (v5 != *(void *)a2) {
    return 0;
  }
  unsigned int v8 = *(unsigned __int8 *)(*(void *)(v5 + 24) + 8);
  BOOL v9 = v8 > 0xD;
  int v10 = (1 << v8) & 0x207F;
  if (v9 || v10 == 0) {
    return 0;
  }
  sub_1CD5A62D4(v5);
  unsigned int v14 = v12;
  if (*(llvm::Constant **)v16 != v12) {
    uint64_t v16 = sub_1CC56C0C0((llvm *)0x31, v16, v12, 0);
  }
  if (*(llvm::Constant **)v17 != v14) {
    unsigned int v17 = sub_1CC56C0C0((llvm *)0x31, v17, v14, 0);
  }
  uint64_t ICmp = (unsigned __int8 *)llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)0x20, v16, v17, 0, v13);
  if (ICmp[16] - 11 >= 2) {
    return sub_1CBF5270C((uint64_t)v18, (llvm::Constant *)ICmp);
  }
  else {
    return 1;
  }
}

llvm::detail::IEEEFloat *llvm::ConstantExpr::getBitCast(llvm::detail::IEEEFloat *this, llvm::Constant *a2, llvm::Type *a3)
{
  if (*(llvm::Constant **)this != a2) {
    return sub_1CC56C0C0((llvm *)0x31, this, a2, a3);
  }
  return this;
}

void *llvm::ConstantExpr::getICmp(llvm::ConstantExpr *this, llvm::Type *a2, llvm::Constant *a3, llvm::Constant *a4, BOOL a5)
{
  char v5 = (char)a4;
  __int16 v8 = (__int16)this;
  v20[2] = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::ConstantFoldCompareInstruction(this, a2, (uint64_t)a3, a4, a5);
  if (!result && (v5 & 1) == 0)
  {
    v20[0] = a2;
    v20[1] = a3;
    uint64_t v10 = ***(void ***)a2;
    char v11 = (uint64_t **)(v10 + 1888);
    if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12)
    {
      unsigned int v12 = (llvm::Type *)*(unsigned int *)(*(void *)a2 + 32);
      if (*(_DWORD *)(*(void *)a2 + 8) == 19) {
        llvm::ScalableVectorType::get(v11, v12);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v11, v12);
      }
      char v11 = v13;
      uint64_t v10 = ***(void ***)a2;
    }
    v14[0] = 53;
    v14[1] = v8;
    unsigned int v15 = v20;
    uint64_t v16 = 2;
    long long v17 = 0u;
    long long v18 = 0u;
    uint64_t v19 = 0;
    return (void *)sub_1CC56C20C(v10 + 1512, (uint64_t)v11, (unsigned __int8 *)v14);
  }
  return result;
}

uint64_t llvm::Constant::containsUndefOrPoisonElement(llvm::Constant *this)
{
  return sub_1CC563CB4(this, (uint64_t (*)(uint64_t, llvm::Constant *))sub_1CC570208, (uint64_t)&v2);
}

uint64_t sub_1CC563CB4(llvm::Constant *a1, uint64_t (*a2)(uint64_t, llvm::Constant *), uint64_t a3)
{
  uint64_t v3 = *(void *)a1;
  if (*(void *)a1) {
    BOOL v4 = (*(_DWORD *)(*(void *)a1 + 8) & 0xFE) == 18;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4) {
    return 0;
  }
  if ((a2(a3, a1) & 1) == 0)
  {
    if (*((unsigned char *)a1 + 16) == 13) {
      return 0;
    }
    if (*(unsigned char *)(*(void *)a1 + 8) == 19) {
      return 0;
    }
    int v9 = *(_DWORD *)(v3 + 32);
    if (!v9) {
      return 0;
    }
    uint64_t v10 = 0;
    while (1)
    {
      Aggregateunsigned int Element = (llvm::Constant *)llvm::Constant::getAggregateElement(a1, v10);
      if (AggregateElement)
      {
        if (a2(a3, AggregateElement)) {
          break;
        }
      }
      uint64_t result = 0;
      uint64_t v10 = (llvm::Type *)(v10 + 1);
      if (v9 == v10) {
        return result;
      }
    }
  }
  return 1;
}

uint64_t llvm::Constant::containsPoisonElement(llvm::Constant *this)
{
  return sub_1CC563CB4(this, (uint64_t (*)(uint64_t, llvm::Constant *))sub_1CC57021C, (uint64_t)&v2);
}

BOOL llvm::Constant::containsConstantExpression(llvm::Constant *this)
{
  if (*(void *)this) {
    BOOL v1 = *(unsigned char *)(*(void *)this + 8) == 18;
  }
  else {
    BOOL v1 = 0;
  }
  if (!v1) {
    return 0;
  }
  int v2 = *(_DWORD *)(*(void *)this + 32);
  if (!v2) {
    return 0;
  }
  BOOL v4 = 0;
  int v5 = v2 - 1;
  do
  {
    int v6 = *((unsigned __int8 *)llvm::Constant::getAggregateElement(this, v4) + 16);
    BOOL result = v6 == 5;
    BOOL v8 = v6 == 5 || v5 == v4;
    BOOL v4 = (llvm::Type *)(v4 + 1);
  }
  while (!v8);
  return result;
}

llvm::Value *llvm::Constant::getNullValue(llvm::Constant *this, llvm::Type *a2, const llvm::APFloat *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = *((_DWORD *)this + 2);
  if (v4 != 13)
  {
    switch(*((_DWORD *)this + 2))
    {
      case 1u:
        BOOL v13 = *(llvm::ConstantFP **)this;
        LODWORD(v18) = 0;
        unsigned int v14 = &unk_1CFB2E2F4;
        goto LABEL_25;
      case 2u:
        BOOL v8 = *(llvm::ConstantFP **)this;
        int v9 = &unk_1CFB2E308;
        char v24 = 3;
        int v10 = -127;
        goto LABEL_10;
      case 3u:
        BOOL v13 = *(llvm::ConstantFP **)this;
        LODWORD(v18) = 0;
        unsigned int v14 = &unk_1CFB2E31C;
        goto LABEL_25;
      case 4u:
        BOOL v13 = *(llvm::ConstantFP **)this;
        uint64_t v16 = llvm::APFloatBase::x87DoubleExtended(this);
        goto LABEL_34;
      case 5u:
        BOOL v13 = *(llvm::ConstantFP **)this;
        uint64_t v16 = llvm::APFloatBase::IEEEquad(this);
LABEL_34:
        unsigned int v14 = v16;
        LODWORD(v18) = 0;
LABEL_25:
        sub_1CB87E68C((uint64_t)&v21, (uint64_t)v14);
        sub_1CC570164((llvm::detail::DoubleAPFloat *)&v20, 0);
        char v11 = llvm::ConstantFP::get(v13, (llvm::LLVMContext *)&v20, v15);
        sub_1CB87DEE4((uint64_t *)&v21);
        return v11;
      case 6u:
        int v19 = 128;
        llvm::APInt::initSlowCase((llvm::APInt *)&v18);
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xDu:
      case 0xEu:
      case 0x14u:
        __break(1u);
        goto LABEL_37;
      case 0xCu:
LABEL_37:
        long long v17 = *(llvm::ConstantTokenNone **)this;
        return (llvm::Value *)llvm::ConstantTokenNone::get(v17, a2);
      case 0xFu:
        return (llvm::Value *)llvm::ConstantPointerNull::get(this, a2);
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
        return (llvm::Value *)llvm::ConstantAggregateZero::get(this, a2);
      case 0x15u:
        return (llvm::Value *)llvm::ConstantTargetNone::get(this, a2);
      default:
        BOOL v8 = *(llvm::ConstantFP **)this;
        int v9 = &unk_1CFB2E2E0;
        char v24 = 3;
        int v10 = -15;
LABEL_10:
        int v23 = v10;
        uint64_t v21 = v9;
        uint64_t v22 = 0;
        BOOL result = llvm::ConstantFP::get(v8, (llvm::LLVMContext *)&v20, a3);
        if (v21 == (_DWORD *)&unk_1CFB2E344)
        {
          char v11 = result;
          sub_1CB845718(&v22);
        }
        else
        {
          if ((v21[2] - 64) > 0xFFFFFF7F || !v22) {
            return result;
          }
          char v11 = result;
          MEMORY[0x1D25D9CB0](v22, 0x1000C8000313F17);
        }
        return v11;
    }
  }
  int v5 = this;
  if ((v4 & 0xFE) == 0x12)
  {
    int v5 = (llvm::Constant *)**((void **)this + 2);
    unsigned int v4 = *((_DWORD *)v5 + 2);
  }
  int v6 = *(llvm::ConstantInt **)v5;
  LODWORD(v21) = v4 >> 8;
  if (v4 >> 8 > 0x40) {
    operator new[]();
  }
  uint64_t v20 = 0;
  BOOL result = (llvm::Value *)llvm::ConstantInt::get(v6, (llvm::LLVMContext *)&v20, a3);
  if (v21 >= 0x41 && v20)
  {
    unsigned int v12 = result;
    MEMORY[0x1D25D9CB0](v20, 0x1000C8000313F17);
    BOOL result = v12;
  }
  if ((*((_DWORD *)this + 2) & 0xFE) == 0x12) {
    return llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)this + 8) | ((unint64_t)(*((_DWORD *)this + 2) == 19) << 32)), (uint64_t)result);
  }
  return result;
}

void *llvm::ConstantInt::get(llvm::ConstantInt *this, unint64_t a2, const llvm::APInt *a3)
{
  unsigned int v4 = *((_DWORD *)this + 2);
  int v5 = this;
  if ((v4 & 0xFE) == 0x12)
  {
    int v5 = (llvm::ConstantInt *)**((void **)this + 2);
    unsigned int v4 = *((_DWORD *)v5 + 2);
  }
  int v6 = *(llvm::ConstantInt **)v5;
  unsigned int v11 = v4 >> 8;
  if (v4 >> 8 > 0x40) {
    operator new[]();
  }
  unint64_t v7 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v4) + 63);
  if (v4 <= 0xFF) {
    unint64_t v7 = 0;
  }
  unint64_t v10 = v7 & a2;
  BOOL v8 = llvm::ConstantInt::get(v6, (llvm::LLVMContext *)&v10, a3);
  if (v11 >= 0x41 && v10) {
    MEMORY[0x1D25D9CB0](v10, 0x1000C8000313F17);
  }
  if ((*((_DWORD *)this + 2) & 0xFE) == 0x12) {
    return (void *)llvm::ConstantVector::getSplat(*((unsigned int *)this + 8) | ((unint64_t)(*((_DWORD *)this + 2) == 19) << 32), v8);
  }
  return v8;
}

{
  llvm::ConstantInt *v3;
  unsigned int v4;
  unint64_t v5;
  void *v6;
  unint64_t v8;
  unsigned int v9;

  uint64_t v3 = *(llvm::ConstantInt **)this;
  unsigned int v4 = *((_DWORD *)this + 2);
  int v9 = v4 >> 8;
  if (v4 >> 8 > 0x40) {
    operator new[]();
  }
  int v5 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v4) + 63);
  if (v4 <= 0xFF) {
    int v5 = 0;
  }
  BOOL v8 = v5 & a2;
  int v6 = llvm::ConstantInt::get(v3, (llvm::LLVMContext *)&v8, a3);
  if (v9 >= 0x41 && v8) {
    MEMORY[0x1D25D9CB0](v8, 0x1000C8000313F17);
  }
  return v6;
}

const llvm::detail::DoubleAPFloat *llvm::ConstantFP::get(llvm::ConstantFP *this, llvm::LLVMContext *a2, const llvm::APFloat *a3)
{
  int v5 = (uint64_t *)(*(void *)this + 200);
  uint64_t v34 = 0;
  char v6 = sub_1CC570914(v5, (char *)a2, &v34);
  unint64_t v7 = v34;
  if (v6)
  {
    BOOL result = (const llvm::detail::DoubleAPFloat *)*((void *)v34 + 4);
    if (result) {
      return result;
    }
  }
  else
  {
    unint64_t v7 = sub_1CC570DE4((uint64_t)v5, (uint64_t)a2, (char *)a2, v34);
    BOOL result = (const llvm::detail::DoubleAPFloat *)(v7 + 8);
    int v9 = (void *)*((void *)v7 + 1);
    unint64_t v10 = (void *)*((void *)a2 + 1);
    if (v9 == &unk_1CFB2E344 || v10 == &unk_1CFB2E344)
    {
      if (v9 == &unk_1CFB2E344 && v10 == &unk_1CFB2E344)
      {
        BOOL result = llvm::detail::DoubleAPFloat::operator=(result, (llvm::LLVMContext *)((char *)a2 + 8));
      }
      else if (v7 != (char *)a2)
      {
        unsigned int v31 = sub_1CB87DEE4((uint64_t *)result);
        BOOL result = (const llvm::detail::DoubleAPFloat *)sub_1CB87DDC4((uint64_t)v31, (uint64_t *)a2 + 1);
      }
    }
    else
    {
      BOOL result = (const llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::operator=(result, (void *)a2 + 1);
    }
    *((void *)v7 + 4) = 0;
  }
  BOOL v13 = (void *)((char *)a2 + 8);
  unsigned int v12 = (void *)*((void *)a2 + 1);
  if (v12 == &unk_1CFB2E2E0)
  {
    uint64_t v14 = *(void *)this + 1624;
  }
  else if (v12 == &unk_1CFB2E2F4)
  {
    uint64_t v14 = *(void *)this + 1648;
  }
  else if (v12 == &unk_1CFB2E308)
  {
    uint64_t v14 = *(void *)this + 1672;
  }
  else if (v12 == &unk_1CFB2E31C)
  {
    uint64_t v14 = *(void *)this + 1696;
  }
  else
  {
    unint64_t v32 = (void *)*((void *)a2 + 1);
    int v33 = (llvm::APFloatBase *)llvm::APFloatBase::x87DoubleExtended(result);
    if (v33 == v32)
    {
      uint64_t v14 = *(void *)this + 1768;
    }
    else if (llvm::APFloatBase::IEEEquad(v33) == v32)
    {
      uint64_t v14 = *(void *)this + 1792;
    }
    else
    {
      uint64_t v14 = *(void *)this + 1816;
    }
  }
  unsigned int v15 = (uint64_t *)(v7 + 32);
  uint64_t v16 = operator new(0x38uLL);
  *uint64_t v16 = v14;
  v16[1] = 0;
  v16[2] = 17;
  long long v17 = v16 + 4;
  uint64_t v18 = (_DWORD *)*v13;
  if ((_UNKNOWN *)*v13 == &unk_1CFB2E344)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v17, (llvm::LLVMContext *)((char *)a2 + 8));
  }
  else
  {
    void *v17 = v18;
    if ((v18[2] + 64) >= 0x80) {
      operator new[]();
    }
    char v19 = *((unsigned char *)a2 + 28);
    int v20 = v19 & 7;
    *((unsigned char *)v16 + 52) = *((unsigned char *)v16 + 52) & 0xF0 | v19 & 0xF;
    *((_DWORD *)v16 + 12) = *((_DWORD *)a2 + 6);
    BOOL v22 = (v19 & 6) != 0 && v20 != 3;
    if (v20 == 1 || v22)
    {
      uint64_t v23 = *(unsigned int *)(v16[4] + 8);
      char v24 = v16 + 5;
      if ((v23 - 64) <= 0xFFFFFF7F) {
        char v24 = (void *)*v24;
      }
      unsigned int v27 = (uint64_t *)*((void *)a2 + 2);
      uint64_t v26 = (char *)a2 + 16;
      uint64_t v25 = v27;
      if ((*(_DWORD *)(*((void *)v26 - 1) + 8) - 64) >= 0xFFFFFF80) {
        uint64_t v25 = (uint64_t *)v26;
      }
      if (v23 <= 0xFFFFFFBF)
      {
        unint64_t v28 = (unint64_t)(v23 + 64) >> 6;
        do
        {
          uint64_t v29 = *v25++;
          *v24++ = v29;
          --v28;
        }
        while (v28);
      }
    }
  }
  sub_1CC567FD8(v15, (uint64_t)v16);
  return (const llvm::detail::DoubleAPFloat *)*v15;
}

void *llvm::ConstantPointerNull::get(llvm::ConstantPointerNull *this, llvm::PointerType *a2)
{
  char v6 = this;
  int v2 = sub_1CC573480((uint64_t *)(**(void **)this + 1312), &v6);
  BOOL result = (void *)v2[1];
  if (!result)
  {
    BOOL result = operator new(0x18uLL);
    *BOOL result = v6;
    result[1] = 0;
    result[2] = 19;
    unsigned int v4 = (llvm::Value *)v2[1];
    v2[1] = result;
    if (v4)
    {
      llvm::Value::~Value(v4);
      llvm::User::operator delete(v5);
      return (void *)v2[1];
    }
  }
  return result;
}

void *llvm::ConstantAggregateZero::get(llvm::ConstantAggregateZero *this, llvm::Type *a2)
{
  char v6 = this;
  int v2 = sub_1CC5731BC(**(void **)this + 1216, (uint64_t *)&v6);
  BOOL result = (void *)v2[1];
  if (!result)
  {
    BOOL result = operator new(0x18uLL);
    *BOOL result = v6;
    result[1] = 0;
    result[2] = 13;
    unsigned int v4 = (llvm::Value *)v2[1];
    v2[1] = (uint64_t)result;
    if (v4)
    {
      llvm::Value::~Value(v4);
      llvm::User::operator delete(v5);
      return (void *)v2[1];
    }
  }
  return result;
}

llvm::Value *llvm::Constant::getIntegerValue(llvm::Constant ***this, llvm::Type *a2, const llvm::APInt *a3)
{
  unsigned int v4 = (llvm::Constant *)this;
  if ((this[1] & 0xFE) == 0x12) {
    unsigned int v4 = *this[2];
  }
  int v5 = (llvm::detail::IEEEFloat *)llvm::ConstantInt::get((llvm::ConstantInt *)*this, a2, a3);
  if (*((unsigned char *)v4 + 8) == 15 && v4 != 0) {
    int v5 = sub_1CC56C0C0((llvm *)0x30, v5, v4, 0);
  }
  if ((this[1] & 0xFE) != 0x12) {
    return v5;
  }
  BOOL v8 = (llvm::Type *)(*((unsigned int *)this + 8) | ((unint64_t)(*((_DWORD *)this + 2) == 19) << 32));

  return llvm::ConstantVector::getSplat(v8, (uint64_t)v5);
}

void *llvm::ConstantInt::get(llvm::ConstantInt *this, llvm::LLVMContext *a2, const llvm::APInt *a3)
{
  uint64_t v3 = (unsigned int *)a2;
  unsigned int v4 = (uint64_t *)(*(void *)this + 176);
  uint64_t v5 = *v4;
  int v6 = *(_DWORD *)(*(void *)this + 192);
  if (v6)
  {
    int v7 = llvm::hash_value(a2, a2);
    uint64_t v8 = 0;
    unsigned int v9 = v6 - 1;
    unint64_t v10 = (llvm::LLVMContext *)v3[2];
    unsigned int v11 = *(const void **)v3;
    for (int i = 1; ; ++i)
    {
      int v13 = v7 & v9;
      uint64_t v14 = v5 + 24 * (v7 & v9);
      int v15 = *(_DWORD *)(v14 + 8);
      if (v10 == v15)
      {
        if (v10 > 0x40)
        {
          if (!memcmp(v11, *(const void **)v14, (((unint64_t)v10 + 63) >> 3) & 0x3FFFFFF8))
          {
LABEL_25:
            BOOL v22 = *(void **)(v14 + 16);
            if (!v22) {
              goto LABEL_20;
            }
            return v22;
          }
        }
        else if (v11 == *(const void **)v14)
        {
          goto LABEL_25;
        }
      }
      if (v15)
      {
        BOOL v16 = 0;
      }
      else
      {
        if (!*(void *)v14)
        {
          if (v8) {
            uint64_t v17 = v8;
          }
          else {
            uint64_t v17 = v14;
          }
          uint64_t v3 = (unsigned int *)a2;
          goto LABEL_16;
        }
        BOOL v16 = *(void *)v14 == 1;
      }
      if (v16 && v8 == 0) {
        uint64_t v8 = v14;
      }
      int v7 = v13 + i;
    }
  }
  uint64_t v17 = 0;
LABEL_16:
  uint64_t v18 = sub_1CC570340((uint64_t)v4, (uint64_t)v3, v3, v17);
  uint64_t v14 = v18;
  if (*(_DWORD *)(v18 + 8) > 0x40u || v3[2] > 0x40)
  {
    if ((unsigned int *)v18 != v3)
    {
      llvm::APInt::reallocate(v18, v3[2]);
      uint64_t v26 = *(unsigned int *)(v14 + 8);
      if (v26 <= 0x40) {
        *(void *)uint64_t v14 = *(void *)v3;
      }
      else {
        memcpy(*(void **)v14, *(const void **)v3, ((unint64_t)(v26 + 63) >> 3) & 0x3FFFFFF8);
      }
    }
  }
  else
  {
    *(void *)uint64_t v18 = *(void *)v3;
    *(_DWORD *)(v18 + 8) = v3[2];
  }
  *(void *)(v14 + 16) = 0;
  unint64_t v10 = (llvm::LLVMContext *)v3[2];
LABEL_20:
  uint64_t v19 = v14 + 16;
  uint64_t v20 = llvm::IntegerType::get(this, v10);
  uint64_t v21 = operator new(0x28uLL);
  BOOL v22 = v21;
  void *v21 = v20;
  v21[1] = 0;
  v21[2] = 16;
  unsigned int v23 = *((_DWORD *)a2 + 2);
  *((_DWORD *)v21 + 8) = v23;
  if (v23 > 0x40) {
    operator new[]();
  }
  v21[3] = *(void *)a2;
  uint64_t v24 = *(void *)v19;
  *(void *)uint64_t v19 = v21;
  if (v24)
  {
    sub_1CC57080C(v19, v24);
    return *(void **)v19;
  }
  return v22;
}

llvm::detail::IEEEFloat *llvm::ConstantExpr::getIntToPtr(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Type *a3)
{
  return sub_1CC56C0C0((llvm *)0x30, this, a2, a3);
}

llvm::Value *llvm::ConstantVector::getSplat(llvm::Type *a1, uint64_t a2)
{
  v28[32] = *MEMORY[0x1E4F143B8];
  if ((unint64_t)a1 >> 32 == 1)
  {
    unsigned int v12 = a1;
    llvm::VectorType::get(*(llvm::FixedVectorType **)a2, a1);
    int v15 = v14;
    uint64_t v25 = (llvm::Constant *)a2;
    if (llvm::Constant::isNullValue((llvm::Constant *)a2))
    {
      return (llvm::Value *)llvm::ConstantAggregateZero::get(v15, v16);
    }
    if (*(unsigned __int8 *)(a2 + 16) - 11 <= 1)
    {
      return (llvm::Value *)llvm::UndefValue::get(v15, v16);
    }
    unint64_t v17 = v12;
    uint64_t v18 = (llvm::ConstantInt *)(**(void **)v15 + 1960);
    uint64_t v19 = (llvm::ConstantExpr *)llvm::PoisonValue::get(v15, v16);
    uint64_t v20 = (llvm::Constant *)llvm::ConstantInt::get(v18, 0, 0);
    Insertunsigned int Element = llvm::ConstantExpr::getInsertElement(v19, v25, v20, 0, v21);
    uint64_t v26 = v28;
    uint64_t v27 = 0x800000000;
    sub_1CBF8EBE4((uint64_t)&v26, v17, 0);
    ShuffleVector = llvm::ConstantExpr::getShuffleVector(InsertElement, v19, (int *)v26, (llvm::Type *)v27, 0);
    uint64_t v24 = v26;
    if (v26 == v28) {
      return (llvm::Value *)ShuffleVector;
    }
LABEL_28:
    free(v24);
    return (llvm::Value *)ShuffleVector;
  }
  if ((*(unsigned char *)(a2 + 16) & 0xFE) == 0x10)
  {
    unsigned int v2 = *(_DWORD *)(*(void *)a2 + 8);
    if (v2 < 4u
      || v2 == 13
      && ((HIDWORD(v5) = v2 >> 8, LODWORD(v5) = (v2 >> 8) - 8, unsigned int v4 = v5 >> 3, v6 = v4 > 7, v7 = (1 << v4) & 0x8B, !v6)
        ? (BOOL v8 = v7 == 0)
        : (BOOL v8 = 1),
          !v8))
    {
      return llvm::ConstantDataVector::getSplat(a1, (llvm::FixedVectorType **)a2, (llvm::Constant *)a2);
    }
  }
  uint64_t v26 = v28;
  uint64_t v27 = 0x2000000000;
  sub_1CBFC6B20((uint64_t)&v26, a1, a2);
  unsigned int v9 = (llvm::FixedVectorType ***)v26;
  uint64_t v10 = v27;
  BOOL result = llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)v26, (llvm::Type *)v27);
  if (!result)
  {
    llvm::FixedVectorType::get(**v9, (llvm::Type *)v10);
    BOOL result = (llvm::Value *)sub_1CC56A4DC(**v11 + 1288, (uint64_t)v11, v9, v10);
  }
  if (v26 != v28)
  {
    ShuffleVector = result;
    uint64_t v24 = v26;
    goto LABEL_28;
  }
  return result;
}

void *llvm::Constant::getAllOnesValue(llvm::Constant *this, llvm::Type *a2, const llvm::APInt *a3)
{
  v17[2] = *MEMORY[0x1E4F143B8];
  unsigned int v4 = *((_DWORD *)this + 2);
  if (this && v4 == 13)
  {
    unint64_t v5 = *(llvm::ConstantInt **)this;
    LODWORD(v16) = *((_DWORD *)this + 2) >> 8;
    if (v4 >> 8 > 0x40) {
      operator new[]();
    }
    if (v4 <= 0xFF) {
      unint64_t v6 = 0;
    }
    else {
      unint64_t v6 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v4) + 63);
    }
    unint64_t v15 = v6;
    int v7 = llvm::ConstantInt::get(v5, (llvm::LLVMContext *)&v15, a3);
    if (v16 < 0x41) {
      return v7;
    }
    uint64_t v11 = v15;
    if (!v15) {
      return v7;
    }
  }
  else
  {
    if (v4 != 2)
    {
      unsigned int v9 = &unk_1CFB2E2E0;
      switch((char)v4)
      {
        case 0:
          goto LABEL_12;
        case 1:
          unsigned int v9 = &unk_1CFB2E2F4;
          goto LABEL_12;
        case 2:
          __break(1u);
          goto LABEL_25;
        case 3:
LABEL_25:
          unsigned int v9 = &unk_1CFB2E31C;
          goto LABEL_12;
        case 4:
          unsigned int v9 = llvm::APFloatBase::x87DoubleExtended((llvm::APFloatBase *)&unk_1CFB2E2E0);
          goto LABEL_12;
        case 5:
          unsigned int v9 = llvm::APFloatBase::IEEEquad((llvm::APFloatBase *)&unk_1CFB2E2E0);
          goto LABEL_12;
        case 6:
          unsigned int v9 = &unk_1CFB2E344;
          goto LABEL_12;
        default:
          uint64_t v12 = *((unsigned int *)this + 8);
          uint64_t v13 = v4 == 19;
          uint64_t AllOnesValue = llvm::Constant::getAllOnesValue(*((llvm::Constant **)this + 3), a2);
          return (void *)llvm::ConstantVector::getSplat(v12 | (v13 << 32), AllOnesValue);
      }
    }
    unsigned int v9 = &unk_1CFB2E308;
LABEL_12:
    llvm::APFloat::getAllOnesValue((uint64_t)v9, (uint64_t)&v15);
    int v7 = llvm::ConstantFP::get(*(llvm::ConstantFP **)this, (llvm::LLVMContext *)&v15, v10);
    if ((_UNKNOWN *)v16 == &unk_1CFB2E344)
    {
      sub_1CB845718(v17);
      return v7;
    }
    if ((*(_DWORD *)(v16 + 8) - 64) > 0xFFFFFF7F) {
      return v7;
    }
    uint64_t v11 = v17[0];
    if (!v17[0]) {
      return v7;
    }
  }
  MEMORY[0x1D25D9CB0](v11, 0x1000C8000313F17);
  return v7;
}

unint64_t llvm::ConstantAggregateZero::getElementCount(llvm::ConstantAggregateZero *this)
{
  uint64_t v1 = *(void *)this;
  int v2 = *(unsigned __int8 *)(*(void *)this + 8);
  if (*(void *)this) {
    BOOL v3 = v2 == 17;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3) {
    return *(unsigned int *)(v1 + 32);
  }
  if (v1) {
    BOOL v4 = (v2 & 0xFE) == 18;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4) {
    return *(unsigned int *)(v1 + 32) | ((unint64_t)(v2 == 19) << 32);
  }
  else {
    return *(unsigned int *)(v1 + 12);
  }
}

llvm::Value *llvm::ConstantAggregateZero::getElementValue(llvm::ConstantAggregateZero *this, llvm::Type *a2, const llvm::APFloat *a3)
{
  uint64_t v3 = *(void *)this;
  if (*(_DWORD *)(*(void *)this + 8) == 17 || (*(_DWORD *)(*(void *)this + 8) & 0xFE) == 18) {
    unint64_t v6 = (llvm::Constant **)(v3 + 24);
  }
  else {
    unint64_t v6 = (llvm::Constant **)(*(void *)(v3 + 16) + 8 * a2);
  }
  return llvm::Constant::getNullValue(*v6, a2, a3);
}

uint64_t llvm::UndefValue::getNumElements(llvm::UndefValue *this)
{
  uint64_t v1 = *(void *)this;
  int v2 = *(unsigned __int8 *)(*(void *)this + 8);
  if (*(void *)this) {
    BOOL v3 = v2 == 17;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3) {
    return *(unsigned int *)(v1 + 32);
  }
  int v4 = v2 & 0xFE;
  if (v1 && v4 == 18) {
    return *(unsigned int *)(v1 + 32);
  }
  else {
    return *(unsigned int *)(v1 + 12);
  }
}

void *llvm::PoisonValue::getElementValue(llvm::PoisonValue *this, llvm::Type *a2)
{
  uint64_t v2 = *(void *)this;
  if (*(_DWORD *)(*(void *)this + 8) == 17 || (*(_DWORD *)(*(void *)this + 8) & 0xFE) == 18) {
    unint64_t v5 = (llvm::PoisonValue **)(v2 + 24);
  }
  else {
    unint64_t v5 = (llvm::PoisonValue **)(*(void *)(v2 + 16) + 8 * a2);
  }
  return llvm::PoisonValue::get(*v5, a2);
}

llvm::UndefValue *llvm::UndefValue::getElementValue(llvm::UndefValue *this, llvm::Type *a2)
{
  uint64_t v2 = *(void *)this;
  if (*(_DWORD *)(*(void *)this + 8) == 17 || (*(_DWORD *)(*(void *)this + 8) & 0xFE) == 18) {
    unint64_t v5 = (llvm::UndefValue **)(v2 + 24);
  }
  else {
    unint64_t v5 = (llvm::UndefValue **)(*(void *)(v2 + 16) + 8 * a2);
  }
  return llvm::UndefValue::get(*v5, a2);
}

uint64_t llvm::ConstantDataSequential::getNumElements(llvm::ConstantDataSequential *this)
{
  return *(unsigned int *)(*(void *)this + 32);
}

void *llvm::ConstantDataSequential::getElementAsConstant(llvm::ConstantFP ***this, unsigned int a2)
{
  v17[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (*this)[3];
  if ((*((unsigned char *)v2 + 8) & 0xFC) == 0)
  {
    uint64_t v10 = **this;
    llvm::ConstantDataSequential::getElementAsAPFloat((llvm::ConstantDataSequential *)this, a2, (uint64_t)&v15);
    unsigned int v9 = llvm::ConstantFP::get(v10, (llvm::LLVMContext *)&v15, v11);
    if ((_UNKNOWN *)v16 == &unk_1CFB2E344)
    {
      uint64_t v14 = v9;
      sub_1CB845718(v17);
    }
    else
    {
      if ((*(_DWORD *)(v16 + 8) - 64) > 0xFFFFFF7F || !v17[0]) {
        return v9;
      }
      uint64_t v14 = v9;
      MEMORY[0x1D25D9CB0](v17[0], 0x1000C8000313F17);
    }
    return v14;
  }
  uint64_t ElementAsInteger = llvm::ConstantDataSequential::getElementAsInteger((llvm::ConstantDataSequential *)this, a2);
  unsigned int v5 = *((_DWORD *)v2 + 2);
  unint64_t v6 = v2;
  if ((v5 & 0xFE) == 0x12)
  {
    unint64_t v6 = (llvm::ConstantFP *)**((void **)v2 + 2);
    unsigned int v5 = *((_DWORD *)v6 + 2);
  }
  int v7 = *(llvm::ConstantInt **)v6;
  LODWORD(v16) = v5 >> 8;
  if (v5 >> 8 > 0x40) {
    operator new[]();
  }
  if (v5 <= 0xFF) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v5) + 63);
  }
  unint64_t v15 = v8 & ElementAsInteger;
  unsigned int v9 = llvm::ConstantInt::get(v7, (llvm::LLVMContext *)&v15, v4);
  if (v16 >= 0x41 && v15)
  {
    uint64_t v13 = v9;
    MEMORY[0x1D25D9CB0](v15, 0x1000C8000313F17);
    unsigned int v9 = v13;
  }
  if ((*((_DWORD *)v2 + 2) & 0xFE) == 0x12) {
    return (void *)llvm::ConstantVector::getSplat(*((unsigned int *)v2 + 8) | ((unint64_t)(*((_DWORD *)v2 + 2) == 19) << 32), v9);
  }
  return v9;
}

void *llvm::Constant::getAggregateElement(llvm::Constant *this, llvm::Constant *a2)
{
  if (!a2 || *((unsigned char *)a2 + 16) != 16) {
    return 0;
  }
  uint64_t v2 = (unsigned int *)((char *)a2 + 24);
  if (*((_DWORD *)a2 + 8) >= 0x41u)
  {
    int v7 = this;
    unint64_t v8 = (unsigned int **)((char *)a2 + 24);
    int v5 = *((_DWORD *)a2 + 8);
    int v6 = llvm::APInt::countLeadingZerosSlowCase((llvm::Constant *)((char *)a2 + 24));
    this = v7;
    if ((v5 - v6) <= 0x40)
    {
      uint64_t v2 = *v8;
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  BOOL v3 = (llvm::Type *)*v2;

  return llvm::Constant::getAggregateElement(this, v3);
}

void llvm::Constant::destroyConstant(int32x2_t ****this, llvm::Constant *a2)
{
  if (*((unsigned char *)this + 16) == 5)
  {
    BOOL v3 = **this;
    int v4 = *v3;
    int32x2_t v5 = (*v3)[189];
    __int32 v6 = (*v3)[191].i32[0];
    if (v6)
    {
      LODWORD(v7) = sub_1CC5744DC((uint64_t *)this) & (v6 - 1);
      unint64_t v8 = (llvm::Constant **)(*(void *)&v5 + 8 * v7);
      unsigned int v9 = *v8;
      if (*v8 == (llvm::Constant *)this)
      {
LABEL_4:
        *unint64_t v8 = (llvm::Constant *)-8192;
        v4[190] = vadd_s32(v4[190], (int32x2_t)0x1FFFFFFFFLL);
        goto LABEL_5;
      }
      int v11 = 1;
      while (v9 != (llvm::Constant *)-4096)
      {
        int v12 = v7 + v11++;
        uint64_t v7 = v12 & (v6 - 1);
        unsigned int v9 = *(llvm::Constant **)(*(void *)&v5 + 8 * v7);
        if (v9 == (llvm::Constant *)this) {
          goto LABEL_10;
        }
      }
      int32x2_t v5 = v4[189];
      uint64_t v7 = v4[191].u32[0];
    }
    else
    {
      uint64_t v7 = 0;
    }
LABEL_10:
    unint64_t v8 = (llvm::Constant **)(*(void *)&v5 + 8 * v7);
    goto LABEL_4;
  }
  switch(*((unsigned char *)this + 16))
  {
    case 4:
      llvm::BlockAddress::destroyConstantImpl((llvm::BlockAddress *)this);
      break;
    case 5:
    case 0x10:
    case 0x11:
      __break(1u);
      goto LABEL_20;
    case 6:
LABEL_20:
      llvm::DSOLocalEquivalent::destroyConstantImpl((llvm::DSOLocalEquivalent *)this);
      break;
    case 7:
      llvm::NoCFIValue::destroyConstantImpl((llvm::NoCFIValue *)this);
      break;
    case 8:
      sub_1CC56B838(***this + 155, (uint64_t)this);
      break;
    case 9:
      sub_1CC56B8EC(***this + 158, (uint64_t *)this);
      break;
    case 0xA:
      sub_1CD5A80E0((uint64_t)&(***this)[161], (uint64_t *)this);
      break;
    case 0xB:
      llvm::UndefValue::destroyConstantImpl((llvm::UndefValue *)this);
    case 0xC:
      sub_1CD5A82A4((uint64_t)&(***this)[173], (uint64_t)*this);
      break;
    case 0xD:
      sub_1CD5A8068((uint64_t)&(***this)[152], (uint64_t)*this);
      break;
    case 0xE:
    case 0xF:
      llvm::ConstantDataSequential::destroyConstantImpl((llvm::Value **)this);
      break;
    case 0x12:
      sub_1CD5A81C0((uint64_t)&(***this)[167], (uint64_t)*this);
      break;
    case 0x13:
      uint64_t v13 = (uint64_t)&(***this)[164];
      uint64_t v14 = (uint64_t)*this;
      sub_1CD5A8154(v13, &v14);
      break;
    default:
      llvm::GlobalValue::destroyConstantImpl((llvm::GlobalValue *)this);
  }
LABEL_5:
  while (1)
  {
    uint64_t v10 = this[1];
    if (!v10) {
      break;
    }
    llvm::Constant::destroyConstant((llvm::Constant *)v10[3]);
  }
  llvm::deleteConstant((llvm *)this, a2);
}

int32x2_t llvm::ConstantExpr::destroyConstantImpl(llvm::ConstantExpr *this)
{
  return sub_1CC56E990((int32x2_t *)(***(void ***)this + 1512), (uint64_t *)this);
}

int32x2_t llvm::ConstantArray::destroyConstantImpl(int32x2_t ****this)
{
  return sub_1CC56B838(***this + 155, (uint64_t)this);
}

int32x2_t llvm::ConstantStruct::destroyConstantImpl(llvm::ConstantStruct *this)
{
  return sub_1CC56B8EC((int32x2_t *)(***(void ***)this + 1264), (uint64_t *)this);
}

int32x2_t llvm::ConstantVector::destroyConstantImpl(llvm::ConstantVector *this)
{
  return sub_1CD5A80E0(***(void ***)this + 1288, (uint64_t *)this);
}

int32x2_t llvm::PoisonValue::destroyConstantImpl(llvm::PoisonValue *this)
{
  return sub_1CD5A82A4(***(void ***)this + 1384, *(void *)this);
}

int32x2_t llvm::ConstantAggregateZero::destroyConstantImpl(llvm::ConstantAggregateZero *this)
{
  return sub_1CD5A8068(***(void ***)this + 1216, *(void *)this);
}

int32x2_t llvm::ConstantTargetNone::destroyConstantImpl(llvm::ConstantTargetNone *this)
{
  return sub_1CD5A81C0(***(void ***)this + 1336, *(void *)this);
}

int32x2_t llvm::ConstantPointerNull::destroyConstantImpl(llvm::ConstantPointerNull *this)
{
  uint64_t v1 = *(void ***)this;
  uint64_t v2 = ***(void ***)this + 1312;
  int v4 = v1;
  return sub_1CD5A8154(v2, &v4);
}

void llvm::deleteConstant(llvm *this, llvm::Constant *a2)
{
  uint64_t v2 = this;
  switch(*((unsigned char *)this + 16))
  {
    case 5:
      int v8 = *((unsigned __int16 *)this + 9);
      BOOL v9 = v8 != 12 && (v8 - 38) > 0xC;
      if (v9 && (v8 - 13) > 0x11)
      {
        switch(*((_WORD *)this + 9))
        {
          case '?':
          case '@':
          case 'A':
            uint64_t v10 = (char *)*((void *)this + 3);
            if (v10 != (char *)v2 + 40) {
              free(v10);
            }
            break;
          default:
            goto LABEL_2;
        }
      }
      goto LABEL_2;
    case 0xE:
    case 0xF:
      sub_1CD5A9D38(this);
      goto LABEL_3;
    case 0x10:
      if (*((_DWORD *)this + 8) >= 0x41u)
      {
        uint64_t v12 = *((void *)this + 3);
        if (v12) {
          goto LABEL_29;
        }
      }
      goto LABEL_2;
    case 0x11:
      uint64_t v11 = *((void *)this + 4);
      if ((_UNKNOWN *)v11 == &unk_1CFB2E344)
      {
        sub_1CB845718((uint64_t *)this + 5);
      }
      else if ((*(_DWORD *)(v11 + 8) - 64) <= 0xFFFFFF7F)
      {
        uint64_t v12 = *((void *)this + 5);
        if (v12) {
LABEL_29:
        }
          MEMORY[0x1D25D9CB0](v12, 0x1000C8000313F17);
      }
LABEL_2:
      llvm::Value::~Value(v2);
LABEL_3:
      int v3 = *((_DWORD *)v2 + 5);
      if ((v3 & 0x40000000) != 0)
      {
        unint64_t v15 = (char *)*((void *)v2 - 1);
        uint64_t v14 = (llvm *)((char *)v2 - 8);
        uint64_t v13 = v15;
        uint64_t v16 = v3 & 0x7FFFFFF;
        if (v16)
        {
          uint64_t v17 = 32 * v16;
          do
          {
            uint64_t v18 = &v13[v17];
            if (*(void *)&v13[v17 - 32])
            {
              **((void **)v18 - 2) = *((void *)v18 - 3);
              uint64_t v19 = *((void *)v18 - 3);
              if (v19) {
                *(void *)(v19 + 16) = *((void *)v18 - 2);
              }
            }
            v17 -= 32;
          }
          while (v17);
        }
        operator delete(v13);
        this = v14;
      }
      else
      {
        uint64_t v4 = v3 & 0x7FFFFFF;
        this = (llvm *)((char *)v2 - 32 * v4);
        if (v4)
        {
          int32x2_t v5 = (void **)((char *)v2 - 16);
          uint64_t v6 = -32 * v4;
          do
          {
            if (*(v5 - 2))
            {
              **int32x2_t v5 = *(v5 - 1);
              uint64_t v7 = (uint64_t)*(v5 - 1);
              if (v7) {
                *(void *)(v7 + 16) = *v5;
              }
            }
            v5 -= 4;
            v6 += 32;
          }
          while (v6);
        }
        if (v3 < 0) {
LABEL_39:
        }
          this = (llvm *)((char *)this - *((void *)this - 1) - 8);
      }
      operator delete(this);
      return;
    case 0x12:
      __break(1u);
      goto LABEL_39;
    default:
      goto LABEL_2;
  }
}

uint64_t llvm::Constant::canTrap(llvm::Constant *this)
{
  int v3 = v7;
  uint64_t v4 = v7;
  uint64_t v5 = 4;
  int v6 = 0;
  uint64_t result = sub_1CC565AD0((uint64_t)this, (uint64_t)&v3);
  if (v4 != v3)
  {
    unsigned int v2 = result;
    free(v4);
    return v2;
  }
  return result;
}

BOOL sub_1CC565AD0(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (a1 && *(unsigned char *)(a1 + 16) == 5)
  {
    int v4 = *(_DWORD *)(a1 + 20);
    uint64_t v5 = v4 & 0x7FFFFFF;
    if ((v4 & 0x7FFFFFF) != 0)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        uint64_t v8 = *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32 * i);
        if (v8) {
          BOOL v9 = *(unsigned char *)(v8 + 16) == 5;
        }
        else {
          BOOL v9 = 0;
        }
        if (!v9) {
          continue;
        }
        uint64_t v10 = *(void *)(a2 + 8);
        uint64_t v11 = *(unsigned int *)(a2 + 20);
        if (v10 == *(void *)a2)
        {
          if (v11)
          {
            uint64_t v12 = 0;
            uint64_t v13 = 8 * v11;
            uint64_t v14 = *(void **)(a2 + 8);
            while (*v14 != v8)
            {
              if (*v14 == -2) {
                uint64_t v12 = v14;
              }
              ++v14;
              v13 -= 8;
              if (!v13)
              {
                if (!v12) {
                  goto LABEL_18;
                }
                void *v12 = v8;
                --*(_DWORD *)(a2 + 24);
                goto LABEL_42;
              }
            }
            continue;
          }
LABEL_18:
          unsigned int v15 = *(_DWORD *)(a2 + 16);
          if (v11 < v15)
          {
            *(_DWORD *)(a2 + 20) = v11 + 1;
            *(void *)(v10 + 8 * v11) = v8;
            goto LABEL_42;
          }
        }
        else
        {
          unsigned int v15 = *(_DWORD *)(a2 + 16);
        }
        if (3 * v15 <= 4 * ((int)v11 - *(_DWORD *)(a2 + 24)))
        {
          if (v15 >= 0x40) {
            v15 *= 2;
          }
          else {
            unsigned int v15 = 128;
          }
        }
        else if (v15 - v11 >= v15 >> 3)
        {
          goto LABEL_23;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a2, v15);
        unsigned int v15 = *(_DWORD *)(a2 + 16);
        uint64_t v10 = *(void *)(a2 + 8);
LABEL_23:
        unsigned int v16 = v15 - 1;
        unsigned int v17 = (v15 - 1) & ((v8 >> 4) ^ (v8 >> 9));
        uint64_t v18 = (void *)(v10 + 8 * v17);
        uint64_t v19 = *v18;
        if (*v18 == -1)
        {
          uint64_t v20 = 0;
LABEL_35:
          if (v20) {
            uint64_t v24 = v20;
          }
          else {
            uint64_t v24 = v18;
          }
          if (*v24 != v8)
          {
            if (*v24 == -2) {
              --*(_DWORD *)(a2 + 24);
            }
            else {
              ++*(_DWORD *)(a2 + 20);
            }
            *uint64_t v24 = v8;
LABEL_42:
            if (sub_1CC565AD0(v8, a2)) {
              return 1;
            }
          }
        }
        else
        {
          uint64_t v20 = 0;
          int v21 = 1;
          while (v19 != v8)
          {
            if (v20) {
              BOOL v22 = 0;
            }
            else {
              BOOL v22 = v19 == -2;
            }
            if (v22) {
              uint64_t v20 = v18;
            }
            unsigned int v23 = v17 + v21++;
            unsigned int v17 = v23 & v16;
            uint64_t v18 = (void *)(v10 + 8 * (v23 & v16));
            uint64_t v19 = *v18;
            if (*v18 == -1) {
              goto LABEL_35;
            }
          }
        }
      }
    }
    unsigned int v25 = *(unsigned __int16 *)(a1 + 18);
    BOOL v26 = v25 > 0x17;
    int v27 = (1 << v25) & 0xD80000;
    if (v26 || v27 == 0)
    {
      return 0;
    }
    else
    {
      uint64_t v29 = *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32);
      if (*(unsigned char *)(v29 + 16) == 16)
      {
        uint64_t v30 = *(unsigned int *)(v29 + 32);
        if (v30 > 0x40)
        {
          int v32 = 0;
          int64_t v33 = (unint64_t)(v30 + 63) >> 6;
          do
          {
            BOOL v26 = v33-- < 1;
            if (v26) {
              break;
            }
            unint64_t v34 = *(void *)(*(void *)(v29 + 24) + 8 * v33);
            v32 += __clz(v34);
          }
          while (!v34);
          int v35 = v30 | 0xFFFFFFC0;
          if ((v30 & 0x3F) == 0) {
            int v35 = 0;
          }
          return v32 + v35 == v30;
        }
        else
        {
          return *(void *)(v29 + 24) == 0;
        }
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t llvm::Constant::isThreadDependent(llvm::Constant *this)
{
  return sub_1CC565D88((uint64_t)this, (uint64_t (*)(uint64_t))sub_1CC5701E4);
}

uint64_t sub_1CC565D88(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  v37[8] = *MEMORY[0x1E4F143B8];
  uint64_t v29 = (char *)v33;
  uint64_t v30 = (char *)v33;
  int v32 = 0;
  unint64_t v34 = v37;
  unsigned int v36 = 8;
  v37[0] = a1;
  uint64_t v31 = 0x100000008;
  v33[0] = a1;
  unsigned int v3 = 1;
  while (1)
  {
    uint64_t v4 = *((void *)v34 + v3 - 1);
    unsigned int v35 = v3 - 1;
    BOOL v5 = !v4 || *(unsigned __int8 *)(v4 + 16) > 3u;
    if (!v5 && (a2(v4) & 1) != 0) {
      break;
    }
    int v6 = *(_DWORD *)(v4 + 20);
    if ((v6 & 0x40000000) == 0)
    {
      uint64_t v7 = v6 & 0x7FFFFFF;
      uint64_t v8 = (uint64_t *)(v4 - 32 * v7);
      if (v7) {
        goto LABEL_11;
      }
      goto LABEL_59;
    }
    uint64_t v8 = *(uint64_t **)(v4 - 8);
    uint64_t v7 = v6 & 0x7FFFFFF;
    if (v7)
    {
LABEL_11:
      BOOL v9 = &v8[4 * v7];
      while (1)
      {
        uint64_t v10 = *v8;
        if (*v8 && *(unsigned __int8 *)(*v8 + 16) <= 0x14u) {
          break;
        }
LABEL_50:
        v8 += 4;
        if (v8 == v9) {
          goto LABEL_59;
        }
      }
      uint64_t v12 = v30;
      uint64_t v13 = HIDWORD(v31);
      if (v30 == v29)
      {
        if (HIDWORD(v31))
        {
          uint64_t v14 = 0;
          uint64_t v15 = 8 * HIDWORD(v31);
          unsigned int v16 = v30;
          while (*(void *)v16 != v10)
          {
            if (*(void *)v16 == -2) {
              uint64_t v14 = v16;
            }
            v16 += 8;
            v15 -= 8;
            if (!v15)
            {
              if (!v14) {
                goto LABEL_24;
              }
              *(void *)uint64_t v14 = v10;
              --v32;
              goto LABEL_48;
            }
          }
          goto LABEL_50;
        }
LABEL_24:
        unsigned int v17 = v31;
        if (HIDWORD(v31) < v31)
        {
          ++HIDWORD(v31);
          *(void *)&v30[8 * v13] = v10;
LABEL_48:
          if (v35 >= (unint64_t)v36) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v34 + v35++) = v10;
          goto LABEL_50;
        }
      }
      else
      {
        unsigned int v17 = v31;
      }
      if (3 * v17 <= 4 * (HIDWORD(v31) - v32))
      {
        if (v17 >= 0x40) {
          v17 *= 2;
        }
        else {
          unsigned int v17 = 128;
        }
      }
      else if (v17 - HIDWORD(v31) >= v17 >> 3)
      {
LABEL_29:
        unsigned int v18 = v17 - 1;
        unsigned int v19 = (v17 - 1) & ((v10 >> 4) ^ (v10 >> 9));
        uint64_t v20 = &v12[8 * v19];
        uint64_t v21 = *(void *)v20;
        if (*(void *)v20 != -1)
        {
          BOOL v22 = 0;
          int v23 = 1;
          while (v21 != v10)
          {
            if (v22) {
              BOOL v24 = 0;
            }
            else {
              BOOL v24 = v21 == -2;
            }
            if (v24) {
              BOOL v22 = v20;
            }
            unsigned int v25 = v19 + v23++;
            unsigned int v19 = v25 & v18;
            uint64_t v20 = &v12[8 * (v25 & v18)];
            uint64_t v21 = *(void *)v20;
            if (*(void *)v20 == -1) {
              goto LABEL_41;
            }
          }
          goto LABEL_50;
        }
        BOOL v22 = 0;
LABEL_41:
        if (v22) {
          BOOL v26 = v22;
        }
        else {
          BOOL v26 = v20;
        }
        if (*(void *)v26 == v10) {
          goto LABEL_50;
        }
        if (*(void *)v26 == -2) {
          --v32;
        }
        else {
          ++HIDWORD(v31);
        }
        *(void *)BOOL v26 = v10;
        goto LABEL_48;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v29, v17);
      unsigned int v17 = v31;
      uint64_t v12 = v30;
      goto LABEL_29;
    }
LABEL_59:
    unsigned int v3 = v35;
    if (!v35)
    {
      uint64_t v27 = 0;
      goto LABEL_62;
    }
  }
  uint64_t v27 = 1;
LABEL_62:
  if (v34 != v37) {
    free(v34);
  }
  if (v30 != v29) {
    free(v30);
  }
  return v27;
}

uint64_t llvm::Constant::isDLLImportDependent(llvm::Constant *this)
{
  return sub_1CC565D88((uint64_t)this, (uint64_t (*)(uint64_t))sub_1CC5701F4);
}

uint64_t llvm::Constant::isConstantUsed(llvm::Constant *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (!v1) {
    return 0;
  }
  while (1)
  {
    unsigned int v2 = *(unsigned __int8 **)(v1 + 24);
    BOOL v3 = v2 && v2[16] - 21 >= 0xFFFFFFEF;
    if (!v3 || llvm::Constant::isConstantUsed((llvm::Constant *)v2)) {
      break;
    }
    uint64_t v1 = *(void *)(v1 + 8);
    if (!v1) {
      return 0;
    }
  }
  return 1;
}

uint64_t llvm::Constant::getRelocationInfo(llvm::Constant *this)
{
  unsigned int v1 = *((unsigned __int8 *)this + 16);
  if (v1 < 4) {
    return 2;
  }
  unsigned int v2 = this;
  while (v1 == 4)
  {
    unsigned int v2 = (llvm::Constant *)*((void *)v2 - 8);
    unsigned int v1 = *((unsigned __int8 *)v2 + 16);
    if (v1 < 4) {
      return 2;
    }
  }
  if (v1 != 5 || *((_WORD *)v2 + 9) != 15) {
    goto LABEL_34;
  }
  uint64_t v4 = (void *)((char *)v2 - 32 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
  uint64_t v5 = *v4;
  if (*(unsigned char *)(*v4 + 16) != 5) {
    uint64_t v5 = 0;
  }
  uint64_t v6 = v4[4];
  if (*(unsigned char *)(v6 + 16) != 5) {
    uint64_t v6 = 0;
  }
  BOOL v7 = !v5 || v6 == 0;
  if (v7 || *(_WORD *)(v5 + 18) != 47 || *(_WORD *)(v6 + 18) != 47) {
    goto LABEL_34;
  }
  uint64_t v8 = *(unsigned char **)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF));
  BOOL v9 = *(unsigned char **)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF));
  if (v8[16] == 4 && v9[16] == 4 && *((void *)v8 - 8) == *((void *)v9 - 8)) {
    return 0;
  }
  uint64_t v10 = llvm::Value::stripInBoundsConstantOffsets((llvm::Value *)v9);
  if (!v10 || *((unsigned __int8 *)v10 + 16) > 3u) {
    goto LABEL_34;
  }
  uint64_t v12 = v10;
  uint64_t v13 = llvm::Value::stripInBoundsConstantOffsets((llvm::Value *)v8);
  unsigned int v14 = *((unsigned __int8 *)v13 + 16);
  if (v13) {
    BOOL v15 = v14 > 3;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    if (v14 != 6) {
      goto LABEL_34;
    }
  }
  else if ((*((unsigned char *)v13 + 33) & 0x40) == 0)
  {
    goto LABEL_34;
  }
  if ((*((unsigned char *)v12 + 33) & 0x40) != 0) {
    return 1;
  }
LABEL_34:
  uint64_t v16 = *((_DWORD *)v2 + 5) & 0x7FFFFFF;
  if (!v16) {
    return 0;
  }
  uint64_t v17 = 0;
  LODWORD(v3) = 0;
  uint64_t v18 = 32 * v16;
  do
  {
    int v19 = *((_DWORD *)v2 + 5);
    if ((v19 & 0x40000000) != 0) {
      uint64_t v20 = (char *)*((void *)v2 - 1);
    }
    else {
      uint64_t v20 = (char *)v2 - 32 * (v19 & 0x7FFFFFF);
    }
    int RelocationInfo = llvm::Constant::getRelocationInfo(*(llvm::Constant **)&v20[v17]);
    if (RelocationInfo <= (int)v3) {
      uint64_t v3 = v3;
    }
    else {
      uint64_t v3 = RelocationInfo;
    }
    v17 += 32;
  }
  while (v18 != v17);
  return v3;
}

BOOL llvm::Constant::needsRelocation(llvm::Constant *this)
{
  return llvm::Constant::getRelocationInfo(this) != 0;
}

uint64_t llvm::Constant::removeDeadConstantUsers(uint64_t this)
{
  unsigned int v1 = (uint64_t *)(this + 8);
  uint64_t v2 = *(void *)(this + 8);
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      this = *(void *)(v2 + 24);
      if (this) {
        BOOL v4 = *(unsigned __int8 *)(this + 16) >= 0x15u;
      }
      else {
        BOOL v4 = 1;
      }
      if (v4)
      {
        uint64_t v5 = (uint64_t *)(v2 + 8);
      }
      else
      {
        this = sub_1CC566338(this, (llvm::Constant *)1);
        uint64_t v5 = (uint64_t *)(v3 + 8);
        if (!v3) {
          uint64_t v5 = v1;
        }
        if (this) {
          uint64_t v2 = v3;
        }
        else {
          uint64_t v5 = (uint64_t *)(v2 + 8);
        }
      }
      uint64_t v3 = v2;
      uint64_t v2 = *v5;
    }
    while (*v5);
  }
  return this;
}

uint64_t sub_1CC566338(uint64_t a1, llvm::Constant *a2)
{
  if (*(unsigned __int8 *)(a1 + 16) < 4u) {
    return 0;
  }
  int v3 = (int)a2;
  uint64_t v5 = (uint64_t *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    do
    {
      uint64_t v7 = *(void *)(v6 + 24);
      if (!v7 || *(unsigned __int8 *)(v7 + 16) > 0x14u) {
        return 0;
      }
      uint64_t result = sub_1CC566338();
      if (!result) {
        return result;
      }
      BOOL v9 = (uint64_t *)(v6 + 8);
      if (v3) {
        BOOL v9 = v5;
      }
      uint64_t v6 = *v9;
    }
    while (*v9);
  }
  if (v3) {
    llvm::Constant::destroyConstant((int32x2_t ****)a1, a2);
  }
  return 1;
}

uint64_t llvm::Constant::hasOneLiveUse(llvm::Constant *this)
{
  return llvm::Constant::hasNLiveUses(this, 1u);
}

uint64_t llvm::Constant::hasNLiveUses(llvm::Constant *this, unsigned int a2)
{
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    int v4 = 0;
    while (1)
    {
      uint64_t v5 = *(void *)(v3 + 24);
      BOOL v6 = !v5 || *(unsigned __int8 *)(v5 + 16) > 0x14u;
      if ((v6 || (sub_1CC566338(v5, 0) & 1) == 0) && ++v4 > a2) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 8);
      if (!v3) {
        goto LABEL_12;
      }
    }
    unsigned int v7 = 0;
  }
  else
  {
    int v4 = 0;
LABEL_12:
    unsigned int v7 = 1;
  }
  if (v4 == a2) {
    return v7;
  }
  else {
    return 0;
  }
}

uint64_t llvm::Constant::hasZeroLiveUses(llvm::Constant *this)
{
  return llvm::Constant::hasNLiveUses(this, 0);
}

llvm::Value *llvm::ConstantVector::get(llvm::FixedVectorType ***a1, llvm::Type *a2)
{
  uint64_t result = llvm::ConstantVector::getImpl(a1, a2);
  if (!result)
  {
    llvm::FixedVectorType::get(**a1, a2);
    uint64_t v6 = (uint64_t)v5;
    uint64_t v7 = **v5 + 1288;
    return (llvm::Value *)sub_1CC56A4DC(v7, v6, a1, (uint64_t)a2);
  }
  return result;
}

llvm::UndefValue *llvm::Constant::mergeUndefsWith(llvm::Constant *this, llvm::Constant *a2, llvm::Constant *a3)
{
  uint64_t v3 = this;
  v31[8] = *MEMORY[0x1E4F143B8];
  unsigned int v4 = (*((unsigned char *)this + 16) - 11);
  if (v4 >= 2)
  {
    if (v4 < 0xFD) {
      goto LABEL_3;
    }
    BOOL v24 = v28;
    uint64_t v25 = (uint64_t)v28;
    uint64_t v26 = 8;
    int v27 = 0;
    uint64_t v29 = v31;
    uint64_t v30 = 0x800000000;
    BOOL v22 = &v24;
    int v23 = (void **)&v29;
    BOOL v9 = 0;
    if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&v22, (uint64_t)this))
    {
      do
      {
        BOOL v9 = v30 == 0;
        if (!v30) {
          break;
        }
        uint64_t v20 = v29[v30 - 1];
        LODWORD(v30) = v30 - 1;
      }
      while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&v22, v20) & 1) != 0);
    }
    if (v29 != v31) {
      free(v29);
    }
    if ((void *)v25 != v24) {
      free((void *)v25);
    }
    if (!v9)
    {
LABEL_3:
      uint64_t v6 = *(void *)v3;
      unsigned int v7 = (*((unsigned char *)a2 + 16) - 11);
      if (v7 < 2) {
        return llvm::UndefValue::get((llvm::UndefValue *)v6, a2);
      }
      if (v7 < 0xFD) {
        goto LABEL_6;
      }
      BOOL v24 = v28;
      uint64_t v25 = (uint64_t)v28;
      uint64_t v26 = 8;
      int v27 = 0;
      uint64_t v29 = v31;
      uint64_t v30 = 0x800000000;
      BOOL v22 = &v24;
      int v23 = (void **)&v29;
      BOOL v10 = 0;
      if (sub_1CC04C108((llvm::SmallPtrSetImplBase **)&v22, (uint64_t)a2))
      {
        do
        {
          BOOL v10 = v30 == 0;
          if (!v30) {
            break;
          }
          uint64_t v21 = v29[v30 - 1];
          LODWORD(v30) = v30 - 1;
        }
        while ((sub_1CC04C108((llvm::SmallPtrSetImplBase **)&v22, v21) & 1) != 0);
      }
      if (v29 != v31) {
        free(v29);
      }
      if ((void *)v25 != v24) {
        free((void *)v25);
      }
      if (v10)
      {
        return llvm::UndefValue::get((llvm::UndefValue *)v6, a2);
      }
      else
      {
LABEL_6:
        if (*(unsigned char *)(v6 + 8) == 18 && v6)
        {
          uint64_t v11 = *(llvm::UndefValue **)(v6 + 24);
          unint64_t v12 = *(unsigned int *)(v6 + 32);
          BOOL v24 = &v26;
          uint64_t v25 = 0x2000000000;
          sub_1CBFC6B20((uint64_t)&v24, v12, 0);
          if (v12)
          {
            uint64_t v13 = 0;
            char v14 = 0;
            do
            {
              while (1)
              {
                Aggregateunsigned int Element = llvm::Constant::getAggregateElement(v3, v13);
                *((void *)v24 + (void)v13) = AggregateElement;
                uint64_t v16 = llvm::Constant::getAggregateElement(a2, v13);
                if ((sub_1CC04BFB8(*((void *)v24 + (void)v13)) & 1) != 0 || (sub_1CC04BFB8((uint64_t)v16) & 1) == 0) {
                  break;
                }
                uint64_t v18 = llvm::UndefValue::get(v11, v17);
                *((void *)v24 + (void)v13) = v18;
                char v14 = 1;
                BOOL v19 = v12 - 1 == (void)v13;
                uint64_t v13 = (llvm::Type *)((char *)v13 + 1);
                if (v19) {
                  goto LABEL_32;
                }
              }
              uint64_t v13 = (llvm::Type *)((char *)v13 + 1);
            }
            while ((llvm::Type *)v12 != v13);
            if ((v14 & 1) == 0) {
              goto LABEL_33;
            }
LABEL_32:
            uint64_t v3 = llvm::ConstantVector::get((llvm::FixedVectorType ***)v24, (llvm::Type *)v25);
          }
LABEL_33:
          if (v24 != &v26) {
            free(v24);
          }
        }
      }
    }
  }
  return v3;
}

llvm::UndefValue *llvm::UndefValue::get(llvm::UndefValue *this, llvm::Type *a2)
{
  uint64_t v18 = this;
  uint64_t v2 = **(void **)this;
  int v3 = *(_DWORD *)(v2 + 1376);
  if (v3)
  {
    uint64_t v4 = *(void *)(v2 + 1360);
    int v5 = v3 - 1;
    unsigned int v6 = v5 & ((this >> 4) ^ (this >> 9));
    unsigned int v7 = (llvm::UndefValue **)(v4 + 16 * v6);
    uint64_t v8 = *v7;
    if (*v7 == this) {
      goto LABEL_3;
    }
    BOOL v10 = 0;
    int v11 = 1;
    while (v8 != (llvm::UndefValue *)-4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == (llvm::UndefValue *)-8192;
      }
      if (v12) {
        BOOL v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      unsigned int v7 = (llvm::UndefValue **)(v4 + 16 * v6);
      uint64_t v8 = *v7;
      if (*v7 == this) {
        goto LABEL_3;
      }
    }
    if (v10) {
      char v14 = v10;
    }
    else {
      char v14 = v7;
    }
  }
  else
  {
    char v14 = 0;
  }
  unsigned int v7 = (llvm::UndefValue **)sub_1CC5736FC(v2 + 1360, (uint64_t)&v18, (uint64_t *)&v18, v14);
  *unsigned int v7 = v18;
  v7[1] = 0;
LABEL_3:
  uint64_t result = v7[1];
  if (!result)
  {
    uint64_t result = (llvm::UndefValue *)operator new(0x18uLL);
    *(void *)uint64_t result = v18;
    *((void *)result + 1) = 0;
    *((void *)result + 2) = 11;
    uint64_t v16 = v7[1];
    v7[1] = result;
    if (v16)
    {
      llvm::Value::~Value(v16, v15);
      llvm::User::operator delete(v17);
      return v7[1];
    }
  }
  return result;
}

uint64_t llvm::ConstantInt::ConstantInt(uint64_t a1, uint64_t a2, llvm::APInt *a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  unsigned int v4 = *(_DWORD *)(a1 + 20) & 0xC0000000;
  *(_DWORD *)(a1 + 16) = 16;
  *(_DWORD *)(a1 + 20) = v4;
  int v5 = (llvm::APInt *)(a1 + 24);
  unsigned int v6 = *((_DWORD *)a3 + 2);
  *(_DWORD *)(a1 + 32) = v6;
  if (v6 > 0x40) {
    llvm::APInt::initSlowCase(v5, a3);
  }
  *(void *)int v5 = *(void *)a3;
  return a1;
}

void *llvm::ConstantInt::getTrue(llvm::ConstantInt *this, llvm::LLVMContext *a2, const llvm::APInt *a3)
{
  uint64_t v3 = *(void *)this;
  uint64_t result = *(void **)(*(void *)this + 1560);
  if (!result)
  {
    int v5 = *(llvm::ConstantInt **)(v3 + 1888);
    unsigned int v6 = *(_DWORD *)(v3 + 1896);
    unsigned int v10 = v6 >> 8;
    if (v6 >> 8 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v9);
    }
    if (v6 <= 0xFF) {
      char v7 = 0;
    }
    else {
      char v7 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v6);
    }
    uint64_t v9 = v7 & 1;
    uint64_t result = llvm::ConstantInt::get(v5, (llvm::LLVMContext *)&v9, a3);
    if (v10 >= 0x41)
    {
      if (v9)
      {
        uint64_t v8 = result;
        MEMORY[0x1D25D9CB0](v9, 0x1000C8000313F17);
        uint64_t result = v8;
      }
    }
    *(void *)(v3 + 1560) = result;
  }
  return result;
}

void *llvm::ConstantInt::getFalse(llvm::ConstantInt *this, llvm::LLVMContext *a2, const llvm::APInt *a3)
{
  uint64_t v3 = *(void *)this;
  uint64_t result = *(void **)(*(void *)this + 1568);
  if (!result)
  {
    int v5 = *(llvm::ConstantInt **)(v3 + 1888);
    unsigned int v8 = *(_DWORD *)(v3 + 1896) >> 8;
    if (v8 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v7);
    }
    uint64_t v7 = 0;
    uint64_t result = llvm::ConstantInt::get(v5, (llvm::LLVMContext *)&v7, a3);
    if (v8 >= 0x41)
    {
      if (v7)
      {
        unsigned int v6 = result;
        MEMORY[0x1D25D9CB0](v7, 0x1000C8000313F17);
        uint64_t result = v6;
      }
    }
    *(void *)(v3 + 1568) = result;
  }
  return result;
}

void *llvm::ConstantInt::getBool(llvm::ConstantInt *this, llvm::LLVMContext *a2, const llvm::APInt *a3)
{
  uint64_t v3 = *(void *)this;
  if (a2)
  {
    uint64_t result = *(void **)(v3 + 1560);
    if (!result)
    {
      unsigned int v6 = *(llvm::ConstantInt **)(v3 + 1888);
      unsigned int v7 = *(_DWORD *)(v3 + 1896);
      unsigned int v12 = v7 >> 8;
      if (v7 >> 8 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v11);
      }
      if (v7 <= 0xFF) {
        char v8 = 0;
      }
      else {
        char v8 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v7);
      }
      uint64_t v11 = v8 & 1;
      uint64_t result = llvm::ConstantInt::get(v6, (llvm::LLVMContext *)&v11, a3);
      if (v12 >= 0x41)
      {
        if (v11)
        {
          unsigned int v10 = result;
          MEMORY[0x1D25D9CB0](v11, 0x1000C8000313F17);
          uint64_t result = v10;
        }
      }
      *(void *)(v3 + 1560) = result;
    }
  }
  else
  {
    uint64_t result = *(void **)(v3 + 1568);
    if (!result)
    {
      int v5 = *(llvm::ConstantInt **)(v3 + 1888);
      unsigned int v12 = *(_DWORD *)(v3 + 1896) >> 8;
      if (v12 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v11);
      }
      uint64_t v11 = 0;
      uint64_t result = llvm::ConstantInt::get(v5, (llvm::LLVMContext *)&v11, a3);
      if (v12 >= 0x41 && v11)
      {
        uint64_t v9 = result;
        MEMORY[0x1D25D9CB0](v11, 0x1000C8000313F17);
        uint64_t result = v9;
      }
      *(void *)(v3 + 1568) = result;
    }
  }
  return result;
}

llvm::Value *llvm::ConstantInt::getTrue(uint64_t **this, llvm::Type *a2, const llvm::APInt *a3)
{
  uint64_t v4 = **this;
  int v5 = *(void **)(v4 + 1560);
  if (!v5)
  {
    unsigned int v7 = *(llvm::ConstantInt **)(v4 + 1888);
    unsigned int v8 = *(_DWORD *)(v4 + 1896);
    unsigned int v12 = v8 >> 8;
    if (v8 >> 8 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v11);
    }
    if (v8 <= 0xFF) {
      char v9 = 0;
    }
    else {
      char v9 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v8);
    }
    uint64_t v11 = v9 & 1;
    int v5 = llvm::ConstantInt::get(v7, (llvm::LLVMContext *)&v11, a3);
    if (v12 >= 0x41 && v11)
    {
      unsigned int v10 = v5;
      MEMORY[0x1D25D9CB0](v11, 0x1000C8000313F17);
      int v5 = v10;
    }
    *(void *)(v4 + 1560) = v5;
  }
  if ((this[1] & 0xFE) == 0x12) {
    return llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)this + 8) | ((unint64_t)(*((_DWORD *)this + 2) == 19) << 32)), (uint64_t)v5);
  }
  return (llvm::Value *)v5;
}

llvm::Value *llvm::ConstantInt::getFalse(uint64_t **this, llvm::Type *a2, const llvm::APInt *a3)
{
  uint64_t v4 = **this;
  int v5 = *(void **)(v4 + 1568);
  if (!v5)
  {
    unsigned int v7 = *(llvm::ConstantInt **)(v4 + 1888);
    unsigned int v10 = *(_DWORD *)(v4 + 1896) >> 8;
    if (v10 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v9);
    }
    uint64_t v9 = 0;
    int v5 = llvm::ConstantInt::get(v7, (llvm::LLVMContext *)&v9, a3);
    if (v10 >= 0x41 && v9)
    {
      unsigned int v8 = v5;
      MEMORY[0x1D25D9CB0](v9, 0x1000C8000313F17);
      int v5 = v8;
    }
    *(void *)(v4 + 1568) = v5;
  }
  if ((this[1] & 0xFE) == 0x12) {
    return llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)this + 8) | ((unint64_t)(*((_DWORD *)this + 2) == 19) << 32)), (uint64_t)v5);
  }
  return (llvm::Value *)v5;
}

void *llvm::ConstantInt::getSigned(llvm::ConstantInt *this, unint64_t a2, const llvm::APInt *a3)
{
  uint64_t v3 = *(llvm::ConstantInt **)this;
  unsigned int v4 = *((_DWORD *)this + 2);
  unsigned int v9 = v4 >> 8;
  if (v4 >> 8 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v8);
  }
  if (v4 <= 0xFF) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v4);
  }
  unint64_t v8 = v5 & a2;
  unsigned int v6 = llvm::ConstantInt::get(v3, (llvm::LLVMContext *)&v8, a3);
  if (v9 >= 0x41 && v8) {
    MEMORY[0x1D25D9CB0](v8, 0x1000C8000313F17);
  }
  return v6;
}

llvm::Value *llvm::ConstantInt::getSigned(llvm::ConstantInt *this, unint64_t a2, const llvm::APInt *a3)
{
  unsigned int v4 = *((_DWORD *)this + 2);
  unint64_t v5 = this;
  if ((v4 & 0xFE) == 0x12)
  {
    unint64_t v5 = (llvm::ConstantInt *)**((void **)this + 2);
    unsigned int v4 = *((_DWORD *)v5 + 2);
  }
  unsigned int v6 = *(llvm::ConstantInt **)v5;
  unsigned int v12 = v4 >> 8;
  if (v4 >> 8 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v11);
  }
  if (v4 <= 0xFF) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v4);
  }
  unint64_t v11 = v7 & a2;
  unint64_t v8 = llvm::ConstantInt::get(v6, (llvm::LLVMContext *)&v11, a3);
  if (v12 >= 0x41 && v11)
  {
    unsigned int v10 = v8;
    MEMORY[0x1D25D9CB0](v11, 0x1000C8000313F17);
    unint64_t v8 = v10;
  }
  if ((*((_DWORD *)this + 2) & 0xFE) == 0x12) {
    return llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)this + 8) | ((unint64_t)(*((_DWORD *)this + 2) == 19) << 32)), (uint64_t)v8);
  }
  return (llvm::Value *)v8;
}

llvm::Value *llvm::ConstantInt::get(llvm::ConstantInt **this, llvm::Type *a2, const llvm::APInt *a3)
{
  uint64_t result = (llvm::Value *)llvm::ConstantInt::get(*this, a2, a3);
  uint64_t v5 = (uint64_t)result;
  if ((this[1] & 0xFE) == 0x12)
  {
    unsigned int v6 = (llvm::Type *)(*((unsigned int *)this + 8) | ((unint64_t)(*((_DWORD *)this + 2) == 19) << 32));
    return llvm::ConstantVector::getSplat(v6, v5);
  }
  return result;
}

void *llvm::ConstantInt::get(uint64_t a1, char *a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4 = *(llvm::ConstantInt **)a1;
  unsigned int v9 = *(_DWORD *)(a1 + 8) >> 8;
  llvm::APInt::fromString((uint64_t)&v8, (uint64_t)a2, a2, a3, a4);
  unsigned int v6 = llvm::ConstantInt::get(v4, (llvm::LLVMContext *)&v8, v5);
  if (v9 >= 0x41 && v8) {
    MEMORY[0x1D25D9CB0](v8, 0x1000C8000313F17);
  }
  return v6;
}

const llvm::detail::DoubleAPFloat *llvm::ConstantFP::get(llvm::ConstantFP **this, llvm::Type *a2, double a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = *this;
  LODWORD(v16) = 64;
  BOOL v15 = *(const llvm::APInt **)&a3;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)v12, &v15);
  uint64_t v16 = v12[0];
  uint64_t v17 = v12[1];
  int v18 = v13;
  char v19 = v14 & 0xF;
  int v6 = *((_DWORD *)this + 2);
  if ((v6 & 0xFE) == 0x12) {
    int v6 = *(_DWORD *)(*(void *)this[2] + 8);
  }
  if (v6 == 2)
  {
    unint64_t v7 = &unk_1CFB2E308;
  }
  else
  {
    unint64_t v7 = &unk_1CFB2E2E0;
    switch((char)v6)
    {
      case 1:
        unint64_t v7 = &unk_1CFB2E2F4;
        break;
      case 2:
        __break(1u);
        goto LABEL_16;
      case 3:
LABEL_16:
        unint64_t v7 = &unk_1CFB2E31C;
        break;
      case 4:
        unint64_t v11 = llvm::APFloatBase::x87DoubleExtended(v5);
        goto LABEL_19;
      case 5:
        unint64_t v11 = llvm::APFloatBase::IEEEquad(v5);
LABEL_19:
        unint64_t v7 = v11;
        break;
      case 6:
        unint64_t v7 = &unk_1CFB2E344;
        break;
      default:
        break;
    }
  }
  llvm::APFloat::convert((uint64_t)&v15, v7, 1, v12);
  Splat = llvm::ConstantFP::get(v4, (llvm::LLVMContext *)&v15, v8);
  if ((this[1] & 0xFE) == 0x12) {
    Splat = (const llvm::detail::DoubleAPFloat *)llvm::ConstantVector::getSplat(*((unsigned int *)this + 8) | ((unint64_t)(*((_DWORD *)this + 2) == 19) << 32), Splat);
  }
  if ((_UNKNOWN *)v16 == &unk_1CFB2E344)
  {
    sub_1CB845718(&v17);
  }
  else if ((*(_DWORD *)(v16 + 8) - 64) <= 0xFFFFFF7F && v17)
  {
    MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
  }
  return Splat;
}

llvm::Value *llvm::ConstantFP::get(llvm::ConstantFP **this, llvm::Type *a2, const llvm::APFloat *a3)
{
  uint64_t result = llvm::ConstantFP::get(*this, a2, a3);
  uint64_t v5 = (uint64_t)result;
  if ((this[1] & 0xFE) == 0x12)
  {
    int v6 = (llvm::Type *)(*((unsigned int *)this + 8) | ((unint64_t)(*((_DWORD *)this + 2) == 19) << 32));
    return llvm::ConstantVector::getSplat(v6, v5);
  }
  return result;
}

const llvm::detail::DoubleAPFloat *llvm::ConstantFP::get(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  v17[2] = *MEMORY[0x1E4F143B8];
  int v6 = *(_DWORD *)(a1 + 8);
  if ((v6 & 0xFE) == 0x12) {
    int v6 = *(_DWORD *)(**(void **)(a1 + 16) + 8);
  }
  unint64_t v7 = *(llvm::ConstantFP **)a1;
  if (v6 == 2)
  {
    uint64_t v8 = &unk_1CFB2E308;
  }
  else
  {
    uint64_t v8 = &unk_1CFB2E2E0;
    switch((char)v6)
    {
      case 1:
        uint64_t v8 = &unk_1CFB2E2F4;
        break;
      case 2:
        __break(1u);
        goto LABEL_16;
      case 3:
LABEL_16:
        uint64_t v8 = &unk_1CFB2E31C;
        break;
      case 4:
        unint64_t v14 = a3;
        unsigned int v12 = a2;
        int v13 = llvm::APFloatBase::x87DoubleExtended((llvm::APFloatBase *)a1);
        goto LABEL_19;
      case 5:
        unint64_t v14 = a3;
        unsigned int v12 = a2;
        int v13 = llvm::APFloatBase::IEEEquad((llvm::APFloatBase *)a1);
LABEL_19:
        a2 = v12;
        a3 = v14;
        uint64_t v8 = v13;
        break;
      case 6:
        uint64_t v8 = &unk_1CFB2E344;
        break;
      default:
        break;
    }
  }
  llvm::APFloat::APFloat((uint64_t)v15, v8, a2, a3);
  Splat = llvm::ConstantFP::get(v7, (llvm::LLVMContext *)v15, v9);
  if ((*(_DWORD *)(a1 + 8) & 0xFE) == 0x12) {
    Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(a1 + 32) | ((unint64_t)(*(_DWORD *)(a1 + 8) == 19) << 32)), (uint64_t)Splat);
  }
  if ((_UNKNOWN *)v16 == &unk_1CFB2E344)
  {
    sub_1CB845718(v17);
  }
  else if ((*(_DWORD *)(v16 + 8) - 64) <= 0xFFFFFF7F && v17[0])
  {
    MEMORY[0x1D25D9CB0](v17[0], 0x1000C8000313F17);
  }
  return Splat;
}

const llvm::detail::DoubleAPFloat *llvm::ConstantFP::getNaN(llvm::ConstantFP *this, llvm::Type *a2, unsigned char *a3)
{
  v14[2] = *MEMORY[0x1E4F143B8];
  int v4 = *((_DWORD *)this + 2);
  if ((v4 & 0xFE) == 0x12) {
    int v4 = *(_DWORD *)(**((void **)this + 2) + 8);
  }
  if (v4 == 2)
  {
    uint64_t v5 = &unk_1CFB2E308;
  }
  else
  {
    uint64_t v5 = &unk_1CFB2E2E0;
    switch((char)v4)
    {
      case 1:
        uint64_t v5 = &unk_1CFB2E2F4;
        break;
      case 2:
        __break(1u);
        goto LABEL_17;
      case 3:
LABEL_17:
        uint64_t v5 = &unk_1CFB2E31C;
        break;
      case 4:
        unint64_t v11 = a3;
        char v10 = (char)a2;
        uint64_t v5 = llvm::APFloatBase::x87DoubleExtended((llvm::APFloatBase *)&unk_1CFB2E2E0);
        goto LABEL_20;
      case 5:
        unint64_t v11 = a3;
        char v10 = (char)a2;
        uint64_t v5 = llvm::APFloatBase::IEEEquad((llvm::APFloatBase *)&unk_1CFB2E2E0);
LABEL_20:
        LOBYTE(a2) = v10;
        a3 = v11;
        break;
      case 6:
        uint64_t v5 = &unk_1CFB2E344;
        break;
      default:
        break;
    }
  }
  sub_1CC56781C((uint64_t)v5, (char)a2, a3, (uint64_t)v12);
  Splat = llvm::ConstantFP::get(*(llvm::ConstantFP **)this, (llvm::LLVMContext *)v12, v6);
  if ((*((_DWORD *)this + 2) & 0xFE) == 0x12) {
    Splat = (const llvm::detail::DoubleAPFloat *)llvm::ConstantVector::getSplat(*((unsigned int *)this + 8) | ((unint64_t)(*((_DWORD *)this + 2) == 19) << 32), Splat);
  }
  if ((_UNKNOWN *)v13 == &unk_1CFB2E344)
  {
    unsigned int v9 = Splat;
    sub_1CB845718(v14);
    return v9;
  }
  if ((*(_DWORD *)(v13 + 8) - 64) <= 0xFFFFFF7F && v14[0])
  {
    unsigned int v9 = Splat;
    MEMORY[0x1D25D9CB0](v14[0], 0x1000C8000313F17);
    return v9;
  }
  return Splat;
}

unsigned char *sub_1CC56781C@<X0>(uint64_t a1@<X0>, char a2@<W1>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = a4;
  if (a3)
  {
    unsigned int v16 = 64;
    BOOL v15 = a3;
    int v17 = 0;
    char v10 = a2;
    sub_1CB87E68C(a4 + 8, a1);
    uint64_t result = sub_1CBFC6FE8(a4, 0, v10, (const llvm::APInt *)&v15);
    if (v16 >= 0x41)
    {
      uint64_t result = v15;
      if (v15) {
        return (unsigned char *)MEMORY[0x1D25D9CB0](v15, 0x1000C8000313F17);
      }
    }
  }
  else
  {
    unint64_t v7 = (uint64_t *)(a4 + 8);
    if ((_UNKNOWN *)a1 == &unk_1CFB2E344) {
      llvm::detail::DoubleAPFloat::DoubleAPFloat((void *)(v6 + 8), (uint64_t)&unk_1CFB2E344);
    }
    *unint64_t v7 = a1;
    if ((*(_DWORD *)(a1 + 8) + 64) >= 0x80) {
      operator new[]();
    }
    *(unsigned char *)(v6 + 28) = *(unsigned char *)(v6 + 28) & 0xF0 | 3;
    *(_DWORD *)(v6 + 24) = *(_DWORD *)(a1 + 4) - 1;
    int v8 = *(_DWORD *)(a1 + 8);
    if ((v8 - 64) < 0xFFFFFF80)
    {
      unsigned int v12 = *(void **)(v6 + 16);
      void *v12 = 0;
      uint64_t v13 = v6;
      char v14 = a2;
      bzero(v12 + 1, 8 * (((v8 + 64) >> 6) - 2) + 8);
      uint64_t v6 = v13;
      a2 = v14;
    }
    else
    {
      *(void *)(v6 + 16) = 0;
    }
    return sub_1CBFC6FE8(v6, 0, a2, 0);
  }
  return result;
}

const llvm::detail::DoubleAPFloat *llvm::ConstantFP::getSNaN(llvm::ConstantFP *this, llvm::Type *a2, const llvm::APInt *a3, llvm::APInt *a4)
{
  char v5 = (char)a2;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  int v7 = *((_DWORD *)this + 2);
  if ((v7 & 0xFE) == 0x12) {
    int v7 = *(_DWORD *)(**((void **)this + 2) + 8);
  }
  if (v7 == 2)
  {
    int v8 = &unk_1CFB2E308;
  }
  else
  {
    int v8 = &unk_1CFB2E2E0;
    switch((char)v7)
    {
      case 1:
        int v8 = &unk_1CFB2E2F4;
        break;
      case 2:
        __break(1u);
        goto LABEL_22;
      case 3:
LABEL_22:
        int v8 = &unk_1CFB2E31C;
        break;
      case 4:
        char v18 = (char)a2;
        unsigned int v16 = a3;
        int v8 = llvm::APFloatBase::x87DoubleExtended((llvm::APFloatBase *)&unk_1CFB2E2E0);
        goto LABEL_25;
      case 5:
        char v18 = (char)a2;
        unsigned int v16 = a3;
        int v8 = llvm::APFloatBase::IEEEquad((llvm::APFloatBase *)&unk_1CFB2E2E0);
LABEL_25:
        a3 = v16;
        char v5 = v18;
        if (v8 == (_DWORD *)&unk_1CFB2E344) {
          goto LABEL_26;
        }
        break;
      case 6:
LABEL_26:
        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v20, (uint64_t)&unk_1CFB2E344);
      default:
        break;
    }
  }
  uint64_t v20 = v8;
  unint64_t v9 = v8[2];
  if ((v9 + 64) >= 0x80) {
    operator new[]();
  }
  char v23 = 3;
  int v22 = v8[1] - 1;
  int v10 = v8[2];
  if ((v10 - 64) < 0xFFFFFF80)
  {
    *(void *)unint64_t v9 = 0;
    BOOL v15 = a3;
    char v17 = v5;
    bzero((void *)(v9 + 8), 8 * (((v10 + 64) >> 6) - 2) + 8);
    char v5 = v17;
    a3 = v15;
  }
  else
  {
    uint64_t v21 = 0;
  }
  sub_1CBFC6FE8((uint64_t)v19, 1, v5, a3);
  Splat = llvm::ConstantFP::get(*(llvm::ConstantFP **)this, (llvm::LLVMContext *)v19, v11);
  if ((*((_DWORD *)this + 2) & 0xFE) == 0x12) {
    Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)this + 8) | ((unint64_t)(*((_DWORD *)this + 2) == 19) << 32)), (uint64_t)Splat);
  }
  if (v20 == (_DWORD *)&unk_1CFB2E344)
  {
    char v14 = Splat;
    sub_1CB845718(&v21);
    return v14;
  }
  if ((v20[2] - 64) <= 0xFFFFFF7F && v21)
  {
    char v14 = Splat;
    MEMORY[0x1D25D9CB0](v21, 0x1000C8000313F17);
    return v14;
  }
  return Splat;
}

const llvm::detail::DoubleAPFloat *llvm::ConstantFP::getZero(llvm::ConstantFP *this, llvm::Type *a2, const llvm::APFloat *a3)
{
  uint64_t v3 = this;
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  int v4 = *((_DWORD *)this + 2);
  if ((v4 & 0xFE) == 0x12) {
    int v4 = *(_DWORD *)(**((void **)this + 2) + 8);
  }
  if (v4 == 2)
  {
    char v5 = (llvm::ConstantFP *)&unk_1CFB2E308;
  }
  else
  {
    char v5 = (llvm::ConstantFP *)&unk_1CFB2E2E0;
    switch((char)v4)
    {
      case 1:
        char v5 = (llvm::ConstantFP *)&unk_1CFB2E2F4;
        break;
      case 2:
        __break(1u);
        goto LABEL_30;
      case 3:
LABEL_30:
        char v5 = (llvm::ConstantFP *)&unk_1CFB2E31C;
        break;
      case 4:
        *(_DWORD *)BOOL v15 = a2;
        this = (llvm::ConstantFP *)llvm::APFloatBase::x87DoubleExtended(this);
        goto LABEL_33;
      case 5:
        *(_DWORD *)BOOL v15 = a2;
        this = (llvm::ConstantFP *)llvm::APFloatBase::IEEEquad(this);
LABEL_33:
        char v5 = this;
        LODWORD(a2) = *(_DWORD *)v15;
        if (this == (llvm::ConstantFP *)&unk_1CFB2E344) {
          goto LABEL_34;
        }
        break;
      case 6:
LABEL_34:
        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v17, (uint64_t)&unk_1CFB2E344);
      default:
        break;
    }
  }
  char v17 = v5;
  if ((*((_DWORD *)v5 + 2) + 64) >= 0x80) {
    operator new[]();
  }
  char v20 = 3;
  int v19 = *((_DWORD *)v5 + 1) - 1;
  int v6 = *((_DWORD *)v5 + 2);
  if ((v6 - 64) < 0xFFFFFF80)
  {
    *(void *)this = 0;
    uint64_t v13 = v5;
    *(_DWORD *)char v14 = a2;
    bzero((char *)this + 8, 8 * (((v6 + 64) >> 6) - 2) + 8);
    char v5 = v13;
    LODWORD(a2) = *(_DWORD *)v14;
  }
  else
  {
    char v18 = 0;
  }
  if (v5 == (llvm::ConstantFP *)&unk_1CFB2E344)
  {
    llvm::detail::DoubleAPFloat::makeZero((llvm::detail::DoubleAPFloat *)&v17, (char)a2);
  }
  else
  {
    if (a2) {
      char v7 = 11;
    }
    else {
      char v7 = 3;
    }
    char v20 = v20 & 0xF0 | v7;
    int v19 = *((_DWORD *)v5 + 1) - 1;
    int v8 = *((_DWORD *)v5 + 2);
    if ((v8 - 64) < 0xFFFFFF80)
    {
      unint64_t v11 = v18;
      void *v18 = 0;
      bzero(v11 + 1, 8 * (((v8 + 64) >> 6) - 2) + 8);
    }
    else
    {
      char v18 = 0;
    }
  }
  Splat = llvm::ConstantFP::get(*(llvm::ConstantFP **)v3, (llvm::LLVMContext *)v16, a3);
  if ((*((_DWORD *)v3 + 2) & 0xFE) == 0x12) {
    Splat = (const llvm::detail::DoubleAPFloat *)llvm::ConstantVector::getSplat(*((unsigned int *)v3 + 8) | ((unint64_t)(*((_DWORD *)v3 + 2) == 19) << 32), Splat);
  }
  if (v17 == (llvm::ConstantFP *)&unk_1CFB2E344)
  {
    unsigned int v12 = Splat;
    sub_1CB845718((uint64_t *)&v18);
    return v12;
  }
  if ((*((_DWORD *)v17 + 2) - 64) <= 0xFFFFFF7F && v18)
  {
    unsigned int v12 = Splat;
    MEMORY[0x1D25D9CB0](v18, 0x1000C8000313F17);
    return v12;
  }
  return Splat;
}

llvm::Value *llvm::ConstantFP::getZeroValueForNegation(llvm::ConstantFP *this, llvm::Type *a2, const llvm::APFloat *a3)
{
  if ((*((_DWORD *)this + 2) & 0xFE) == 0x12) {
    unsigned int v3 = *(unsigned __int8 *)(**((void **)this + 2) + 8);
  }
  else {
    unsigned int v3 = *((_DWORD *)this + 2);
  }
  if (v3 <= 6) {
    return llvm::ConstantFP::getZero(this, (llvm::Type *)1, a3);
  }
  else {
    return llvm::Constant::getNullValue(this, a2, a3);
  }
}

void sub_1CC567FD8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 32);
    if ((_UNKNOWN *)v3 == &unk_1CFB2E344)
    {
      sub_1CB845718((uint64_t *)(v2 + 40));
    }
    else if ((*(_DWORD *)(v3 + 8) - 64) <= 0xFFFFFF7F)
    {
      uint64_t v17 = *(void *)(v2 + 40);
      if (v17) {
        MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
      }
    }
    llvm::Value::~Value((llvm::Value *)v2);
    int v4 = *(_DWORD *)(v2 + 20);
    if ((v4 & 0x40000000) != 0)
    {
      unsigned int v12 = *(char **)(v2 - 8);
      unint64_t v11 = (char *)(v2 - 8);
      int v10 = v12;
      uint64_t v13 = v4 & 0x7FFFFFF;
      if (v13)
      {
        uint64_t v14 = 32 * v13;
        do
        {
          BOOL v15 = &v10[v14];
          if (*(void *)&v10[v14 - 32])
          {
            **((void **)v15 - 2) = *((void *)v15 - 3);
            uint64_t v16 = *((void *)v15 - 3);
            if (v16) {
              *(void *)(v16 + 16) = *((void *)v15 - 2);
            }
          }
          v14 -= 32;
        }
        while (v14);
      }
      operator delete(v10);
      int v6 = v11;
    }
    else
    {
      uint64_t v5 = v4 & 0x7FFFFFF;
      int v6 = (char *)(v2 - 32 * v5);
      if (v5)
      {
        char v7 = (void **)(v2 - 16);
        uint64_t v8 = -32 * v5;
        do
        {
          if (*(v7 - 2))
          {
            **char v7 = *(v7 - 1);
            uint64_t v9 = (uint64_t)*(v7 - 1);
            if (v9) {
              *(void *)(v9 + 16) = *v7;
            }
          }
          v7 -= 4;
          v8 += 32;
        }
        while (v8);
      }
      if (v4 < 0) {
        int v6 = &v6[-*((void *)v6 - 1) - 8];
      }
    }
    operator delete(v6);
  }
}

uint64_t llvm::ConstantFP::ConstantFP(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 8) = 0;
  unsigned int v3 = *(_DWORD *)(result + 20) & 0xC0000000;
  *(_DWORD *)(result + 16) = 17;
  *(_DWORD *)(result + 20) = v3;
  uint64_t v4 = *(void *)(a3 + 8);
  if ((_UNKNOWN *)v4 == &unk_1CFB2E344)
  {
    uint64_t v17 = result;
    llvm::detail::DoubleAPFloat::DoubleAPFloat((void *)(result + 32), (const llvm::detail::DoubleAPFloat *)(a3 + 8));
    return v17;
  }
  else
  {
    *(void *)(result + 32) = v4;
    if ((*(_DWORD *)(v4 + 8) + 64) >= 0x80) {
      operator new[]();
    }
    char v5 = *(unsigned char *)(result + 52) & 0xF7 | *(unsigned char *)(a3 + 28) & 8;
    *(unsigned char *)(result + 52) = v5;
    char v6 = *(unsigned char *)(a3 + 28);
    int v7 = v6 & 7;
    *(unsigned char *)(result + 52) = v5 & 0xF8 | v6 & 7;
    *(_DWORD *)(result + 48) = *(_DWORD *)(a3 + 24);
    BOOL v9 = (v6 & 6) != 0 && v7 != 3;
    if (v7 == 1 || v9)
    {
      uint64_t v10 = *(unsigned int *)(*(void *)(result + 32) + 8);
      unint64_t v11 = (void *)(result + 40);
      if ((v10 - 64) <= 0xFFFFFF7F) {
        unint64_t v11 = (void *)*v11;
      }
      uint64_t v14 = *(uint64_t **)(a3 + 16);
      unsigned int v12 = (uint64_t *)(a3 + 16);
      uint64_t v13 = v14;
      if ((*(_DWORD *)(*(v12 - 1) + 8) - 64) >= 0xFFFFFF80) {
        uint64_t v13 = v12;
      }
      if (v10 <= 0xFFFFFFBF)
      {
        unint64_t v15 = (unint64_t)(v10 + 64) >> 6;
        do
        {
          uint64_t v16 = *v13++;
          *v11++ = v16;
          --v15;
        }
        while (v15);
      }
    }
  }
  return result;
}

{
  unsigned int v3;
  uint64_t v4;
  char v5;
  char v6;
  int v7;
  BOOL v9;
  uint64_t v10;
  void *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(void *)uint64_t result = a2;
  *(void *)(result + 8) = 0;
  unsigned int v3 = *(_DWORD *)(result + 20) & 0xC0000000;
  *(_DWORD *)(result + 16) = 17;
  *(_DWORD *)(result + 20) = v3;
  uint64_t v4 = *(void *)(a3 + 8);
  if ((_UNKNOWN *)v4 == &unk_1CFB2E344)
  {
    uint64_t v17 = result;
    llvm::detail::DoubleAPFloat::DoubleAPFloat((void *)(result + 32), (const llvm::detail::DoubleAPFloat *)(a3 + 8));
    return v17;
  }
  else
  {
    *(void *)(result + 32) = v4;
    if ((*(_DWORD *)(v4 + 8) + 64) >= 0x80) {
      operator new[]();
    }
    char v5 = *(unsigned char *)(result + 52) & 0xF7 | *(unsigned char *)(a3 + 28) & 8;
    *(unsigned char *)(result + 52) = v5;
    char v6 = *(unsigned char *)(a3 + 28);
    int v7 = v6 & 7;
    *(unsigned char *)(result + 52) = v5 & 0xF8 | v6 & 7;
    *(_DWORD *)(result + 48) = *(_DWORD *)(a3 + 24);
    BOOL v9 = (v6 & 6) != 0 && v7 != 3;
    if (v7 == 1 || v9)
    {
      uint64_t v10 = *(unsigned int *)(*(void *)(result + 32) + 8);
      unint64_t v11 = (void *)(result + 40);
      if ((v10 - 64) <= 0xFFFFFF7F) {
        unint64_t v11 = (void *)*v11;
      }
      uint64_t v14 = *(uint64_t **)(a3 + 16);
      unsigned int v12 = (uint64_t *)(a3 + 16);
      uint64_t v13 = v14;
      if ((*(_DWORD *)(*(v12 - 1) + 8) - 64) >= 0xFFFFFF80) {
        uint64_t v13 = v12;
      }
      if (v10 <= 0xFFFFFFBF)
      {
        unint64_t v15 = (unint64_t)(v10 + 64) >> 6;
        do
        {
          uint64_t v16 = *v13++;
          *v11++ = v16;
          --v15;
        }
        while (v15);
      }
    }
  }
  return result;
}

uint64_t llvm::ConstantFP::isExactlyValue(llvm::ConstantFP *this, const llvm::APFloat *a2)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2 != *((void *)a2 + 1)) {
    return 0;
  }
  if ((_UNKNOWN *)v2 != &unk_1CFB2E344)
  {
    if ((char *)this + 32 == (char *)a2 + 8) {
      return 1;
    }
    int v3 = *((unsigned __int8 *)this + 52);
    int v4 = *((unsigned __int8 *)a2 + 28);
    if ((v3 & 7) == (v4 & 7) && ((v4 ^ v3) & 8) == 0)
    {
      uint64_t v5 = 1;
      if ((v3 & 7) == 3 || (v3 & 7) == 0) {
        return v5;
      }
      if ((v3 & 6) == 0 || *((_DWORD *)this + 12) == *((_DWORD *)a2 + 6))
      {
        int v6 = *(_DWORD *)(v2 + 8);
        unsigned int v7 = v6 - 64;
        uint64_t v8 = (void *)((char *)this + 40);
        if ((v6 - 64) <= 0xFFFFFF7F) {
          uint64_t v8 = (void *)*v8;
        }
        unsigned int v9 = v6 + 64;
        unsigned int v12 = (char *)*((void *)a2 + 2);
        uint64_t v10 = (char *)a2 + 16;
        unint64_t v11 = v12;
        if (v7 < 0xFFFFFF80) {
          uint64_t v10 = v11;
        }
        return memcmp(v8, v10, (v9 >> 3) & 0x1FFFFFF8) == 0;
      }
    }
    return 0;
  }
  uint64_t v14 = (llvm::ConstantFP *)((char *)this + 32);
  unint64_t v15 = (const llvm::APFloat *)((char *)a2 + 8);

  return llvm::detail::DoubleAPFloat::bitwiseIsEqual(v14, v15);
}

llvm::Value *llvm::ConstantAggregateZero::getSequentialElement(llvm::ConstantAggregateZero *this, llvm::Type *a2, const llvm::APFloat *a3)
{
  return llvm::Constant::getNullValue(*(llvm::Constant **)(*(void *)this + 24), a2, a3);
}

llvm::Value *llvm::ConstantAggregateZero::getStructElement(llvm::ConstantAggregateZero *this, llvm::Type *a2, const llvm::APFloat *a3)
{
  return llvm::Constant::getNullValue(*(llvm::Constant **)(*(void *)(*(void *)this + 16) + 8 * a2), a2, a3);
}

llvm::Value *llvm::ConstantAggregateZero::getElementValue(llvm::ConstantAggregateZero *this, llvm::Constant *a2, const llvm::APFloat *a3)
{
  uint64_t v3 = *(void *)this;
  if (*(_DWORD *)(*(void *)this + 8) == 17 || (*(_DWORD *)(*(void *)this + 8) & 0xFE) == 18)
  {
    uint64_t v5 = (llvm::Constant **)(v3 + 24);
  }
  else
  {
    int v6 = (unsigned int *)((char *)a2 + 24);
    if (*((_DWORD *)a2 + 8) >= 0x41u) {
      int v6 = *(unsigned int **)v6;
    }
    uint64_t v5 = (llvm::Constant **)(*(void *)(v3 + 16) + 8 * *v6);
  }
  return llvm::Constant::getNullValue(*v5, a2, a3);
}

llvm::UndefValue *llvm::UndefValue::getSequentialElement(llvm::UndefValue *this, llvm::Type *a2)
{
  return llvm::UndefValue::get(*(llvm::UndefValue **)(*(void *)this + 24), a2);
}

llvm::UndefValue *llvm::UndefValue::getStructElement(llvm::UndefValue *this, llvm::Type *a2)
{
  return llvm::UndefValue::get(*(llvm::UndefValue **)(*(void *)(*(void *)this + 16) + 8 * a2), a2);
}

llvm::UndefValue *llvm::UndefValue::getElementValue(llvm::UndefValue *this, llvm::Constant *a2)
{
  uint64_t v2 = *(void *)this;
  if (*(_DWORD *)(*(void *)this + 8) == 17 || (*(_DWORD *)(*(void *)this + 8) & 0xFE) == 18)
  {
    int v4 = (llvm::UndefValue **)(v2 + 24);
  }
  else
  {
    uint64_t v5 = (unsigned int *)((char *)a2 + 24);
    if (*((_DWORD *)a2 + 8) >= 0x41u) {
      uint64_t v5 = *(unsigned int **)v5;
    }
    int v4 = (llvm::UndefValue **)(*(void *)(v2 + 16) + 8 * *v5);
  }
  return llvm::UndefValue::get(*v4, a2);
}

void *llvm::PoisonValue::getSequentialElement(llvm::PoisonValue *this, llvm::Type *a2)
{
  return llvm::PoisonValue::get(*(llvm::PoisonValue **)(*(void *)this + 24), a2);
}

void *llvm::PoisonValue::get(llvm::PoisonValue *this, llvm::Type *a2)
{
  uint64_t v17 = this;
  uint64_t v2 = **(void **)this;
  int v3 = *(_DWORD *)(v2 + 1400);
  if (v3)
  {
    uint64_t v4 = *(void *)(v2 + 1384);
    int v5 = v3 - 1;
    unsigned int v6 = v5 & ((this >> 4) ^ (this >> 9));
    unsigned int v7 = (uint64_t *)(v4 + 16 * v6);
    uint64_t v8 = (llvm::PoisonValue *)*v7;
    if ((llvm::PoisonValue *)*v7 == this) {
      goto LABEL_3;
    }
    uint64_t v10 = 0;
    int v11 = 1;
    while (v8 != (llvm::PoisonValue *)-4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == (llvm::PoisonValue *)-8192;
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      unsigned int v7 = (uint64_t *)(v4 + 16 * v6);
      uint64_t v8 = (llvm::PoisonValue *)*v7;
      if ((llvm::PoisonValue *)*v7 == this) {
        goto LABEL_3;
      }
    }
    if (v10) {
      uint64_t v16 = v10;
    }
    else {
      uint64_t v16 = v7;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  unsigned int v7 = sub_1CC573A2C(v2 + 1384, (uint64_t)&v17, (uint64_t *)&v17, v16);
  *unsigned int v7 = (uint64_t)v17;
  v7[1] = 0;
LABEL_3:
  uint64_t result = (void *)v7[1];
  if (!result)
  {
    uint64_t result = operator new(0x18uLL);
    *uint64_t result = v17;
    result[1] = 0;
    result[2] = 12;
    uint64_t v14 = (llvm::Value *)v7[1];
    v7[1] = (uint64_t)result;
    if (v14)
    {
      llvm::Value::~Value(v14);
      llvm::User::operator delete(v15);
      return (void *)v7[1];
    }
  }
  return result;
}

void *llvm::PoisonValue::getStructElement(llvm::PoisonValue *this, llvm::Type *a2)
{
  return llvm::PoisonValue::get(*(llvm::PoisonValue **)(*(void *)(*(void *)this + 16) + 8 * a2), a2);
}

void *llvm::PoisonValue::getElementValue(llvm::PoisonValue *this, llvm::Constant *a2)
{
  uint64_t v2 = *(void *)this;
  if (*(_DWORD *)(*(void *)this + 8) == 17 || (*(_DWORD *)(*(void *)this + 8) & 0xFE) == 18)
  {
    uint64_t v4 = (llvm::PoisonValue **)(v2 + 24);
  }
  else
  {
    int v5 = (unsigned int *)((char *)a2 + 24);
    if (*((_DWORD *)a2 + 8) >= 0x41u) {
      int v5 = *(unsigned int **)v5;
    }
    uint64_t v4 = (llvm::PoisonValue **)(*(void *)(v2 + 16) + 8 * *v5);
  }
  return llvm::PoisonValue::get(*v4, a2);
}

uint64_t llvm::ConstantAggregate::ConstantAggregate(uint64_t a1, uint64_t a2, char a3, uint64_t *a4, uint64_t a5)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = a3;
  *(unsigned char *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | a5 & 0x7FFFFFF;
  sub_1CC5716C8((uint64_t)&v7, a4, &a4[a5], a1 - 32 * (a5 & 0x7FFFFFF));
  return a1;
}

{
  char v7;

  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = a3;
  *(unsigned char *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | a5 & 0x7FFFFFF;
  sub_1CC5716C8((uint64_t)&v7, a4, &a4[a5], a1 - 32 * (a5 & 0x7FFFFFF));
  return a1;
}

uint64_t llvm::ConstantArray::ConstantArray(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  int v5 = *(_DWORD *)(a1 + 20) & 0xC0000000 | a4 & 0x7FFFFFF;
  *(_DWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 20) = v5;
  sub_1CC5716C8((uint64_t)&v7, a3, &a3[a4], a1 - 32 * (a4 & 0x7FFFFFF));
  return a1;
}

{
  int v5;
  char v7;

  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  int v5 = *(_DWORD *)(a1 + 20) & 0xC0000000 | a4 & 0x7FFFFFF;
  *(_DWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 20) = v5;
  sub_1CC5716C8((uint64_t)&v7, a3, &a3[a4], a1 - 32 * (a4 & 0x7FFFFFF));
  return a1;
}

llvm::Value *llvm::ConstantArray::get(llvm::PoisonValue *a1, llvm::Type *a2, uint64_t a3)
{
  uint64_t result = llvm::ConstantArray::getImpl(a1, a2, a3);
  if (!result)
  {
    unint64_t v7 = **(void **)a1 + 1240;
    return (llvm::Value *)sub_1CC569370(v7, (uint64_t)a1, (uint64_t *)a2, a3);
  }
  return result;
}

llvm::Value *llvm::ConstantArray::getImpl(llvm::PoisonValue *this, llvm::Type *a2, uint64_t a3)
{
  v109[15] = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v6 = *(void *)a2;
    unsigned int v7 = *(unsigned __int8 *)(*(void *)a2 + 16);
    if (v7 == 12)
    {
      uint64_t v8 = 8 * a3;
      for (uint64_t i = a2; *(void *)i == v6; uint64_t i = (llvm::Type *)((char *)i + 8))
      {
        v8 -= 8;
        if (!v8)
        {
          return (llvm::Value *)llvm::PoisonValue::get(this, a2);
        }
      }
    }
    if (v7 - 11 <= 1)
    {
      uint64_t v11 = 8 * a3;
      for (unsigned int j = a2; *(void *)j == v6; unsigned int j = (llvm::Type *)((char *)j + 8))
      {
        v11 -= 8;
        if (!v11)
        {
          return (llvm::Value *)llvm::UndefValue::get(this, a2);
        }
      }
    }
    if (v6 && v7 == 16)
    {
      uint64_t v13 = *(unsigned int *)(v6 + 32);
      if (v13 > 0x40)
      {
        int v101 = 0;
        int64_t v102 = (unint64_t)(v13 + 63) >> 6;
        do
        {
          BOOL v18 = v102-- < 1;
          if (v18) {
            break;
          }
          unint64_t v103 = *(void *)(*(void *)(v6 + 24) + 8 * v102);
          v101 += __clz(v103);
        }
        while (!v103);
        int v104 = v13 | 0xFFFFFFC0;
        if ((v13 & 0x3F) == 0) {
          int v104 = 0;
        }
        if (v101 + v104 != v13) {
          goto LABEL_20;
        }
      }
      else if (*(void *)(v6 + 24))
      {
        goto LABEL_20;
      }
    }
    else if (v6 && v7 == 17)
    {
      if ((sub_1CB844168(*(void *)a2, 0.0) & 1) == 0) {
        goto LABEL_20;
      }
    }
    else if (v7 > 0x14 || ((1 << v7) & 0x1C2000) == 0)
    {
      goto LABEL_20;
    }
    uint64_t v81 = 8 * a3;
    int v82 = a2;
    while (*(void *)v82 == v6)
    {
      int v82 = (llvm::Type *)((char *)v82 + 8);
      v81 -= 8;
      if (!v81) {
        goto LABEL_166;
      }
    }
LABEL_20:
    unsigned int v14 = *(_DWORD *)(*(void *)v6 + 8);
    int v15 = v14;
    if (v14 >= 4u)
    {
      if (v14 != 13) {
        return 0;
      }
      HIDWORD(v17) = v14 >> 8;
      LODWORD(v17) = (v14 >> 8) - 8;
      unsigned int v16 = v17 >> 3;
      BOOL v18 = v16 > 7;
      int v19 = (1 << v16) & 0x8B;
      if (v18 || v19 == 0) {
        return 0;
      }
    }
    int v21 = *(unsigned __int8 *)(v6 + 16);
    if (v21 != 17)
    {
      if (v21 == 16)
      {
        unsigned int v22 = v14 >> 8;
        if (v15 == 13 && v22 == 8)
        {
          uint64_t v45 = 0;
          int v46 = 0;
          int v27 = (llvm::Type **)v109;
          unint64_t v107 = v109;
          *(_OWORD *)unint64_t v108 = xmmword_1CDB15990;
          uint64_t v47 = 8 * a3;
          while (1)
          {
            uint64_t v48 = *(void *)((char *)a2 + v45);
            if (!v48 || *(unsigned char *)(v48 + 16) != 16) {
              break;
            }
            unsigned int v50 = (void *)(v48 + 24);
            if (*(_DWORD *)(v48 + 32) >= 0x41u) {
              unsigned int v50 = (void *)*v50;
            }
            if ((llvm::Type *)((char *)v46 + 1) > v108[1]) {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
            }
            *((unsigned char *)v46 + (void)v107) = *(unsigned char *)v50;
            int v46 = ++v108[0];
            v45 += 8;
            if (v47 == v45)
            {
              unsigned int v66 = llvm::ArrayType::get((llvm::ArrayType *)(****(void ****)a2 + 1912), v46);
              int v67 = v107;
              unsigned int v68 = v46;
LABEL_189:
              uint64_t Impl = llvm::ConstantDataSequential::getImpl(v67, v68, v66);
              goto LABEL_190;
            }
          }
        }
        else if (v15 == 13 && v22 == 16)
        {
          uint64_t v61 = 0;
          unint64_t v26 = 0;
          int v27 = (llvm::Type **)v109;
          unint64_t v107 = v109;
          *(_OWORD *)unint64_t v108 = xmmword_1CDB15990;
          uint64_t v62 = 8 * a3;
          while (1)
          {
            uint64_t v63 = *(void *)((char *)a2 + v61);
            if (!v63 || *(unsigned char *)(v63 + 16) != 16) {
              break;
            }
            uint64_t v65 = (void *)(v63 + 24);
            if (*(_DWORD *)(v63 + 32) >= 0x41u) {
              uint64_t v65 = (void *)*v65;
            }
            if ((llvm::Type *)(v26 + 1) > v108[1]) {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
            }
            *((_WORD *)v107 + v26) = *(_WORD *)v65;
            unint64_t v26 = (unint64_t)++v108[0];
            v61 += 8;
            if (v62 == v61)
            {
              uint64_t v88 = ***(void ****)a2;
              int v97 = v107;
              uint64_t v98 = 2 * v26;
              int v99 = (llvm::ArrayType *)(*v88 + 1936);
LABEL_188:
              unsigned int v66 = llvm::ArrayType::get(v99, (llvm::Type *)v26);
              int v67 = v97;
              unsigned int v68 = (llvm::Type *)v98;
              goto LABEL_189;
            }
          }
        }
        else if (v15 == 13 && v22 == 32)
        {
          uint64_t v25 = 0;
          LODWORD(v26) = 0;
          int v27 = &v108[1];
          unint64_t v107 = &v108[1];
          v108[0] = (llvm::Type *)0x1000000000;
          uint64_t v28 = 8 * a3;
          while (1)
          {
            uint64_t v29 = *(void *)((char *)a2 + v25);
            if (!v29 || *(unsigned char *)(v29 + 16) != 16) {
              break;
            }
            uint64_t v31 = (void *)(v29 + 24);
            if (*(_DWORD *)(v29 + 32) >= 0x41u) {
              uint64_t v31 = (void *)*v31;
            }
            if (v26 >= HIDWORD(v108[0])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_DWORD *)v107 + v26) = *(_DWORD *)v31;
            unint64_t v26 = ++LODWORD(v108[0]);
            v25 += 8;
            if (v28 == v25)
            {
              unsigned int v96 = ***(void ****)a2;
              int v97 = v107;
              uint64_t v98 = 4 * v26;
              int v99 = (llvm::ArrayType *)(*v96 + 1960);
              goto LABEL_188;
            }
          }
        }
        else
        {
          uint64_t Impl = 0;
          if (v15 != 13 || v22 != 64) {
            return Impl;
          }
          uint64_t v83 = 0;
          LODWORD(v26) = 0;
          int v27 = &v108[1];
          unint64_t v107 = &v108[1];
          v108[0] = (llvm::Type *)0x1000000000;
          uint64_t v84 = 8 * a3;
          while (1)
          {
            uint64_t v85 = *(void *)((char *)a2 + v83);
            if (!v85 || *(unsigned char *)(v85 + 16) != 16) {
              break;
            }
            unsigned int v87 = (void *)(v85 + 24);
            if (*(_DWORD *)(v85 + 32) >= 0x41u) {
              unsigned int v87 = (void *)*v87;
            }
            if (v26 >= HIDWORD(v108[0])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v107 + v26) = *v87;
            unint64_t v26 = ++LODWORD(v108[0]);
            v83 += 8;
            if (v84 == v83)
            {
              unsigned int v100 = ***(void ****)a2;
              int v97 = v107;
              uint64_t v98 = 8 * v26;
              int v99 = (llvm::ArrayType *)(*v100 + 1984);
              goto LABEL_188;
            }
          }
        }
        uint64_t Impl = 0;
LABEL_190:
        unint64_t v95 = v107;
        if (v107 == v27) {
          return Impl;
        }
        goto LABEL_191;
      }
      return 0;
    }
    int v32 = (llvm::Type *)((char *)a2 + 8 * a3);
    if (v14 < 2u)
    {
      int64_t v33 = (llvm::Type **)v109;
      unint64_t v107 = v109;
      *(_OWORD *)unint64_t v108 = xmmword_1CDB15990;
      int v51 = a2;
      while (1)
      {
        uint64_t v52 = *(void *)v51;
        if (!*(void *)v51 || *(unsigned char *)(*(void *)v51 + 16) != 17) {
          break;
        }
        int v55 = *(void **)(v52 + 32);
        unsigned int v54 = (llvm::detail::DoubleAPFloat *)(v52 + 32);
        if (v55 == &unk_1CFB2E344) {
          llvm::detail::DoubleAPFloat::bitcastToAPInt(v54, (llvm::APInt *)&v105);
        }
        else {
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v54, (uint64_t)&v105);
        }
        if (v106 >= 0x41)
        {
          int v57 = 0;
          int64_t v58 = ((unint64_t)v106 + 63) >> 6;
          do
          {
            BOOL v18 = v58-- < 1;
            if (v18) {
              break;
            }
            unint64_t v59 = v105[v58];
            v57 += __clz(v59);
          }
          while (!v59);
          unsigned int v60 = v106 | 0xFFFFFFC0;
          if ((v106 & 0x3F) == 0) {
            unsigned int v60 = 0;
          }
          if (v106 - v57 - v60 > 0x40) {
            LOWORD(v56) = -1;
          }
          else {
            uint64_t v56 = *v105;
          }
        }
        else
        {
          LOWORD(v56) = (_WORD)v105;
        }
        if ((llvm::Type *)((char *)v108[0] + 1) > v108[1]) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        *((_WORD *)v107 + (uint64_t)v108[0]++) = v56;
        if (v106 >= 0x41 && v105) {
          MEMORY[0x1D25D9CB0](v105, 0x1000C8000313F17);
        }
        int v51 = (llvm::Type *)((char *)v51 + 8);
        if (v51 == v32)
        {
          unsigned int v80 = v107;
          unsigned int v79 = v108[0];
          unsigned int v91 = llvm::ArrayType::get(**(llvm::ArrayType ***)a2, v108[0]);
          unsigned int v92 = (llvm::Type *)(2 * (void)v79);
LABEL_184:
          int v93 = v80;
LABEL_185:
          uint64_t Impl = llvm::ConstantDataSequential::getImpl(v93, v92, v91);
          goto LABEL_186;
        }
      }
    }
    else if (v14 == 2)
    {
      int64_t v33 = &v108[1];
      unint64_t v107 = &v108[1];
      v108[0] = (llvm::Type *)0x1000000000;
      uint64_t v69 = a2;
      while (1)
      {
        uint64_t v70 = *(void *)v69;
        if (!*(void *)v69 || *(unsigned char *)(*(void *)v69 + 16) != 17) {
          break;
        }
        uint64_t v73 = *(void **)(v70 + 32);
        uint64_t v72 = (llvm::detail::DoubleAPFloat *)(v70 + 32);
        if (v73 == &unk_1CFB2E344) {
          llvm::detail::DoubleAPFloat::bitcastToAPInt(v72, (llvm::APInt *)&v105);
        }
        else {
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v72, (uint64_t)&v105);
        }
        if (v106 >= 0x41)
        {
          int v75 = 0;
          int64_t v76 = ((unint64_t)v106 + 63) >> 6;
          do
          {
            BOOL v18 = v76-- < 1;
            if (v18) {
              break;
            }
            unint64_t v77 = v105[v76];
            v75 += __clz(v77);
          }
          while (!v77);
          unsigned int v78 = v106 | 0xFFFFFFC0;
          if ((v106 & 0x3F) == 0) {
            unsigned int v78 = 0;
          }
          if (v106 - v75 - v78 > 0x40) {
            LODWORD(v74) = -1;
          }
          else {
            uint64_t v74 = *v105;
          }
        }
        else
        {
          LODWORD(v74) = v105;
        }
        if (LODWORD(v108[0]) >= (unint64_t)HIDWORD(v108[0])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v107 + LODWORD(v108[0])) = v74;
        ++LODWORD(v108[0]);
        if (v106 >= 0x41 && v105) {
          MEMORY[0x1D25D9CB0](v105, 0x1000C8000313F17);
        }
        uint64_t v69 = (llvm::Type *)((char *)v69 + 8);
        if (v69 == v32)
        {
          uint64_t v94 = LODWORD(v108[0]);
          unsigned int v80 = v107;
          unsigned int v91 = llvm::ArrayType::get(**(llvm::ArrayType ***)a2, (llvm::Type *)LODWORD(v108[0]));
          unsigned int v92 = (llvm::Type *)(4 * v94);
          goto LABEL_184;
        }
      }
    }
    else
    {
      if (v14 != 3) {
        return 0;
      }
      int64_t v33 = &v108[1];
      unint64_t v107 = &v108[1];
      v108[0] = (llvm::Type *)0x1000000000;
      unint64_t v34 = a2;
      while (1)
      {
        uint64_t v35 = *(void *)v34;
        if (!*(void *)v34 || *(unsigned char *)(*(void *)v34 + 16) != 17) {
          break;
        }
        int v38 = *(void **)(v35 + 32);
        unint64_t v37 = (llvm::detail::DoubleAPFloat *)(v35 + 32);
        if (v38 == &unk_1CFB2E344) {
          llvm::detail::DoubleAPFloat::bitcastToAPInt(v37, (llvm::APInt *)&v105);
        }
        else {
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v37, (uint64_t)&v105);
        }
        if (v106 >= 0x41)
        {
          int v40 = 0;
          int64_t v41 = ((unint64_t)v106 + 63) >> 6;
          do
          {
            BOOL v18 = v41-- < 1;
            if (v18) {
              break;
            }
            unint64_t v42 = v105[v41];
            v40 += __clz(v42);
          }
          while (!v42);
          unsigned int v43 = v106 | 0xFFFFFFC0;
          if ((v106 & 0x3F) == 0) {
            unsigned int v43 = 0;
          }
          if (v106 - v40 - v43 > 0x40) {
            uint64_t v39 = -1;
          }
          else {
            uint64_t v39 = *v105;
          }
        }
        else
        {
          uint64_t v39 = (uint64_t)v105;
        }
        if (LODWORD(v108[0]) >= (unint64_t)HIDWORD(v108[0])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v107 + LODWORD(v108[0])) = v39;
        ++LODWORD(v108[0]);
        if (v106 >= 0x41 && v105) {
          MEMORY[0x1D25D9CB0](v105, 0x1000C8000313F17);
        }
        unint64_t v34 = (llvm::Type *)((char *)v34 + 8);
        if (v34 == v32)
        {
          unsigned int v89 = v107;
          uint64_t v90 = LODWORD(v108[0]);
          unsigned int v91 = llvm::ArrayType::get(**(llvm::ArrayType ***)a2, (llvm::Type *)LODWORD(v108[0]));
          unsigned int v92 = (llvm::Type *)(8 * v90);
          int v93 = v89;
          goto LABEL_185;
        }
      }
    }
    uint64_t Impl = 0;
LABEL_186:
    unint64_t v95 = v107;
    if (v107 == v33) {
      return Impl;
    }
LABEL_191:
    free(v95);
    return Impl;
  }
LABEL_166:

  return (llvm::Value *)llvm::ConstantAggregateZero::get(this, a2);
}

void *sub_1CC569370(unint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unsigned int v4 = a4;
  *(void *)&long long v16 = a2;
  *((void *)&v16 + 1) = a3;
  uint64_t v17 = a4;
  uint64_t v8 = &a3[a4];
  int v13 = sub_1CC571B50(a3, (uint64_t)v8);
  int v13 = sub_1CC571744((uint64_t *)&v16, &v13);
  long long v14 = v16;
  uint64_t v15 = v17;
  v19[0] = 0;
  if (sub_1CC571F20((uint64_t *)a1, (uint64_t)&v13, v19)
    && v19[0] != (uint64_t *)(*(void *)a1 + 8 * *(unsigned int *)(a1 + 16)))
  {
    return (void *)*v19[0];
  }
  unsigned int v9 = operator new((32 * v4) | 0x18);
  uint64_t v10 = &v9[4 * v4];
  *((_DWORD *)v10 + 5) = *((_DWORD *)v10 + 5) & 0x38000000 | v4 & 0x7FFFFFF;
  if (v4)
  {
    do
    {
      *unsigned int v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      v9[3] = v10;
      v9 += 4;
    }
    while (v9 != v10);
    unsigned int v11 = *((_DWORD *)v10 + 5) & 0xC0000000;
  }
  else
  {
    unsigned int v11 = 0;
  }
  *uint64_t v10 = a2;
  v10[1] = 0;
  *((_DWORD *)v10 + 4) = 8;
  *((_DWORD *)v10 + 5) = v11 | v4 & 0x7FFFFFF;
  sub_1CC5716C8((uint64_t)v19, a3, v8, (uint64_t)&v10[-4 * (v4 & 0x7FFFFFF)]);
  BOOL v18 = v10;
  sub_1CC572074(a1, &v18, (uint64_t)&v13, (uint64_t)v19);
  return v10;
}

uint64_t llvm::ConstantDataSequential::isElementTypeCompatible(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 4u) {
    return 1;
  }
  if (v1 == 13)
  {
    HIDWORD(v4) = v1 >> 8;
    LODWORD(v4) = (v1 >> 8) - 8;
    unsigned int v3 = v4 >> 3;
    if (v3 <= 7) {
      return (0x8Bu >> v3) & 1;
    }
  }
  return 0;
}

uint64_t llvm::ConstantStruct::ConstantStruct(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  int v5 = *(_DWORD *)(a1 + 20) & 0xC0000000 | a4 & 0x7FFFFFF;
  *(_DWORD *)(a1 + 16) = 9;
  *(_DWORD *)(a1 + 20) = v5;
  sub_1CC5716C8((uint64_t)&v7, a3, &a3[a4], a1 - 32 * (a4 & 0x7FFFFFF));
  return a1;
}

{
  int v5;
  char v7;

  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  int v5 = *(_DWORD *)(a1 + 20) & 0xC0000000 | a4 & 0x7FFFFFF;
  *(_DWORD *)(a1 + 16) = 9;
  *(_DWORD *)(a1 + 20) = v5;
  sub_1CC5716C8((uint64_t)&v7, a3, &a3[a4], a1 - 32 * (a4 & 0x7FFFFFF));
  return a1;
}

void *llvm::ConstantStruct::get(llvm::PoisonValue *this, llvm::Type *a2, uint64_t a3)
{
  if (!a3) {
    goto LABEL_67;
  }
  uint64_t v6 = *(void *)a2;
  int v7 = *(unsigned __int8 *)(*(void *)a2 + 16);
  if (*(void *)a2) {
    BOOL v8 = v7 == 16;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8)
  {
    unsigned int v9 = *(_DWORD *)(v6 + 32);
    if (v9 > 0x40) {
      BOOL v10 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v6 + 24)) == v9;
    }
    else {
      BOOL v10 = *(void *)(v6 + 24) == 0;
    }
    char v11 = v10;
LABEL_12:
    if ((v7 - 11) >= 2u && (v11 & 1) == 0)
    {
      if (v7 != 12) {
        goto LABEL_15;
      }
      goto LABEL_73;
    }
    goto LABEL_34;
  }
  if (v6) {
    BOOL v18 = v7 == 17;
  }
  else {
    BOOL v18 = 0;
  }
  if (v18)
  {
    char v11 = sub_1CB844168(v6, 0.0);
    goto LABEL_12;
  }
  if ((v7 - 13) >= 8u || ((0xE1u >> (v7 - 13)) & 1) == 0)
  {
    char v11 = 0;
    goto LABEL_12;
  }
  char v11 = 1;
LABEL_34:
  BOOL v19 = v7 == 12;
  BOOL v20 = (v7 - 11) < 2u;
  uint64_t v21 = 8 * a3;
  unsigned int v22 = (uint64_t *)a2;
  do
  {
    uint64_t v23 = *v22;
    unsigned int v24 = *(unsigned __int8 *)(*v22 + 16);
    if (*v22) {
      BOOL v25 = v24 == 16;
    }
    else {
      BOOL v25 = 0;
    }
    if (v25)
    {
      unint64_t v26 = (llvm::APInt *)(v23 + 24);
      unsigned int v27 = *(_DWORD *)(v23 + 32);
      if (v27 < 0x41)
      {
        if (!*(void *)v26) {
          goto LABEL_43;
        }
LABEL_42:
        char v11 = 0;
        goto LABEL_43;
      }
      if (llvm::APInt::countLeadingZerosSlowCase(v26) != v27) {
        goto LABEL_42;
      }
    }
    else
    {
      if (v23) {
        BOOL v29 = v24 == 17;
      }
      else {
        BOOL v29 = 0;
      }
      if (v29)
      {
        if ((sub_1CB844168(*v22, 0.0) & 1) == 0) {
          goto LABEL_42;
        }
      }
      else
      {
        BOOL v30 = v24 > 0x14;
        int v31 = (1 << v24) & 0x1C2000;
        if (v30 || v31 == 0) {
          goto LABEL_42;
        }
      }
    }
LABEL_43:
    int v28 = *(unsigned __int8 *)(v23 + 16);
    if (v28 != 12) {
      BOOL v19 = 0;
    }
    if (v28 != 11) {
      BOOL v20 = 0;
    }
    ++v22;
    v21 -= 8;
  }
  while (v21);
  if ((v11 & 1) == 0)
  {
    if (!v19)
    {
      if (v20)
      {
        return (void *)llvm::UndefValue::get(this, a2);
      }
LABEL_15:
      uint64_t v12 = **(void **)this;
      *(void *)&long long v37 = this;
      *((void *)&v37 + 1) = a2;
      uint64_t v38 = a3;
      int v34 = sub_1CC571B50(a2, (uint64_t)a2 + 8 * a3);
      int v34 = sub_1CC5724CC(&v37, &v34);
      long long v35 = v37;
      uint64_t v36 = v38;
      v40[0] = 0;
      if (sub_1CC5725C8(*(void *)(v12 + 1264), *(_DWORD *)(v12 + 1280), (uint64_t)&v34, v40)) {
        BOOL v13 = v40[0] == (uint64_t *)(*(void *)(v12 + 1264) + 8 * *(unsigned int *)(v12 + 1280));
      }
      else {
        BOOL v13 = 1;
      }
      if (!v13) {
        return (void *)*v40[0];
      }
      uint64_t v14 = v12 + 1264;
      uint64_t v15 = operator new((32 * a3) | 0x18);
      uint64_t v33 = (uint64_t)&v15[4 * a3];
      *(_DWORD *)(v33 + 20) = *(_DWORD *)(v33 + 20) & 0x38000000 | a3 & 0x7FFFFFF;
      if (a3)
      {
        do
        {
          void *v15 = 0;
          v15[1] = 0;
          v15[2] = 0;
          v15[3] = v33;
          v15 += 4;
        }
        while (v15 != (void *)v33);
        unsigned int v16 = *(_DWORD *)(v33 + 20) & 0xC0000000;
      }
      else
      {
        unsigned int v16 = 0;
      }
      *(void *)uint64_t v33 = this;
      *(void *)(v33 + 8) = 0;
      *(_DWORD *)(v33 + 16) = 9;
      *(_DWORD *)(v33 + 20) = v16 | a3 & 0x7FFFFFF;
      sub_1CC5716C8((uint64_t)v40, (uint64_t *)a2, (uint64_t *)a2 + a3, v33 - 32 * (a3 & 0x7FFFFFF));
      uint64_t v39 = v33;
      sub_1CC5726A4((uint64_t)v40, v14, &v39, (uint64_t)&v34);
      return (void *)v33;
    }
LABEL_73:
    return llvm::PoisonValue::get(this, a2);
  }
LABEL_67:

  return llvm::ConstantAggregateZero::get(this, a2);
}

uint64_t llvm::ConstantVector::ConstantVector(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  int v5 = *(_DWORD *)(a1 + 20) & 0xC0000000 | a4 & 0x7FFFFFF;
  *(_DWORD *)(a1 + 16) = 10;
  *(_DWORD *)(a1 + 20) = v5;
  sub_1CC5716C8((uint64_t)&v7, a3, &a3[a4], a1 - 32 * (a4 & 0x7FFFFFF));
  return a1;
}

{
  int v5;
  char v7;

  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  int v5 = *(_DWORD *)(a1 + 20) & 0xC0000000 | a4 & 0x7FFFFFF;
  *(_DWORD *)(a1 + 16) = 10;
  *(_DWORD *)(a1 + 20) = v5;
  sub_1CC5716C8((uint64_t)&v7, a3, &a3[a4], a1 - 32 * (a4 & 0x7FFFFFF));
  return a1;
}

llvm::Value *llvm::ConstantVector::getImpl(llvm::FixedVectorType ***a1, llvm::Type *a2)
{
  v106[15] = *MEMORY[0x1E4F143B8];
  llvm::FixedVectorType::get(**a1, a2);
  uint64_t v6 = v5;
  char v7 = *a1;
  LODWORD(v8) = *((unsigned __int8 *)*a1 + 16);
  if (*a1) {
    BOOL v9 = v8 == 16;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    uint64_t v10 = *((unsigned int *)v7 + 8);
    if (v10 > 0x40)
    {
      int v98 = 0;
      int64_t v99 = (unint64_t)(v10 + 63) >> 6;
      do
      {
        BOOL v19 = v99-- < 1;
        if (v19) {
          break;
        }
        unint64_t v100 = *((void *)v7[3] + v99);
        v98 += __clz(v100);
      }
      while (!v100);
      int v101 = v10 | 0xFFFFFFC0;
      if ((v10 & 0x3F) == 0) {
        int v101 = 0;
      }
      BOOL v11 = v98 + v101 == v10;
    }
    else
    {
      BOOL v11 = v7[3] == 0;
    }
    int v12 = v11;
    LOBYTE(v8) = 16;
  }
  else
  {
    if (v7) {
      BOOL v32 = v8 == 17;
    }
    else {
      BOOL v32 = 0;
    }
    if (v32)
    {
      int v12 = sub_1CB844168((uint64_t)*a1, 0.0);
      LOBYTE(v8) = *((unsigned char *)v7 + 16);
    }
    else
    {
      char v33 = v8 - 13;
      if (v8 - 13) <= 7u && ((0xE1u >> v33))
      {
        unint64_t v8 = 0x1413120D0D0D0D0DuLL >> (8 * v33);
        int v12 = 1;
      }
      else
      {
        int v12 = 0;
      }
    }
  }
  if ((v8 - 11) < 2u) {
    int v13 = 1;
  }
  else {
    int v13 = v12;
  }
  if (a2 != 1 && v13)
  {
    unsigned int v14 = 1;
    while (a1[v14] == v7)
    {
      if (a2 == ++v14) {
        goto LABEL_20;
      }
    }
LABEL_32:
    unsigned int v16 = *((_DWORD *)*v7 + 2);
    if (v16 < 4u
      || v16 == 13
      && ((HIDWORD(v18) = v16 >> 8,
           LODWORD(v18) = (v16 >> 8) - 8,
           unsigned int v17 = v18 >> 3,
           BOOL v19 = v17 > 7,
           int v20 = (1 << v17) & 0x8B,
           !v19)
        ? (BOOL v21 = v20 == 0)
        : (BOOL v21 = 1),
          !v21))
    {
      if (v8 == 17)
      {
        if (v16 < 2u)
        {
          BOOL v25 = (char *)v106;
          int v104 = v106;
          long long v105 = xmmword_1CDB15990;
          if (a2)
          {
            uint64_t v52 = &a1[(void)a2];
            uint64_t v53 = a1;
            while (1)
            {
              unsigned int v54 = *v53;
              if (!*v53 || *((unsigned char *)*v53 + 16) != 17) {
                goto LABEL_201;
              }
              int v57 = v54[4];
              uint64_t v56 = (llvm::detail::DoubleAPFloat *)(v54 + 4);
              if (v57 == (llvm::FixedVectorType *)&unk_1CFB2E344) {
                llvm::detail::DoubleAPFloat::bitcastToAPInt(v56, (llvm::APInt *)&v102);
              }
              else {
                llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v56, (uint64_t)&v102);
              }
              if (v103 >= 0x41)
              {
                int v59 = 0;
                int64_t v60 = ((unint64_t)v103 + 63) >> 6;
                do
                {
                  BOOL v19 = v60-- < 1;
                  if (v19) {
                    break;
                  }
                  unint64_t v61 = v102[v60];
                  v59 += __clz(v61);
                }
                while (!v61);
                unsigned int v62 = v103 | 0xFFFFFFC0;
                if ((v103 & 0x3F) == 0) {
                  unsigned int v62 = 0;
                }
                if (v103 - v59 - v62 > 0x40) {
                  LOWORD(v58) = -1;
                }
                else {
                  uint64_t v58 = *v102;
                }
              }
              else
              {
                LOWORD(v58) = (_WORD)v102;
              }
              if ((unint64_t)(v105 + 1) > *((void *)&v105 + 1)) {
                llvm::SmallVectorBase<unsigned long long>::grow_pod();
              }
              *((_WORD *)v104 + v105) = v58;
              *(void *)&long long v105 = v105 + 1;
              if (v103 >= 0x41 && v102) {
                MEMORY[0x1D25D9CB0](v102, 0x1000C8000313F17);
              }
              if (++v53 == v52)
              {
                unint64_t v95 = (char *)v104;
                unsigned int v89 = (llvm::Type *)v105;
                goto LABEL_202;
              }
            }
          }
          unsigned int v89 = 0;
          unint64_t v95 = (char *)v106;
LABEL_202:
          uint64_t v90 = **a1;
          goto LABEL_205;
        }
        if (v16 == 2)
        {
          BOOL v25 = (char *)&v105 + 8;
          int v104 = (char *)&v105 + 8;
          *(void *)&long long v105 = 0x1000000000;
          if (a2)
          {
            unsigned int v68 = &a1[(void)a2];
            uint64_t v69 = a1;
            while (1)
            {
              uint64_t v70 = *v69;
              if (!*v69 || *((unsigned char *)*v69 + 16) != 17) {
                goto LABEL_201;
              }
              uint64_t v73 = v70[4];
              uint64_t v72 = (llvm::detail::DoubleAPFloat *)(v70 + 4);
              if (v73 == (llvm::FixedVectorType *)&unk_1CFB2E344) {
                llvm::detail::DoubleAPFloat::bitcastToAPInt(v72, (llvm::APInt *)&v102);
              }
              else {
                llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v72, (uint64_t)&v102);
              }
              if (v103 >= 0x41)
              {
                int v75 = 0;
                int64_t v76 = ((unint64_t)v103 + 63) >> 6;
                do
                {
                  BOOL v19 = v76-- < 1;
                  if (v19) {
                    break;
                  }
                  unint64_t v77 = v102[v76];
                  v75 += __clz(v77);
                }
                while (!v77);
                unsigned int v78 = v103 | 0xFFFFFFC0;
                if ((v103 & 0x3F) == 0) {
                  unsigned int v78 = 0;
                }
                if (v103 - v75 - v78 > 0x40) {
                  LODWORD(v74) = -1;
                }
                else {
                  uint64_t v74 = *v102;
                }
              }
              else
              {
                LODWORD(v74) = v102;
              }
              if (v105 >= (unint64_t)DWORD1(v105)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((_DWORD *)v104 + v105) = v74;
              LODWORD(v105) = v105 + 1;
              if (v103 >= 0x41 && v102) {
                MEMORY[0x1D25D9CB0](v102, 0x1000C8000313F17);
              }
              if (++v69 == v68)
              {
                unint64_t v95 = (char *)v104;
                unint64_t v26 = v105;
                goto LABEL_209;
              }
            }
          }
          unint64_t v26 = 0;
          unint64_t v95 = (char *)&v105 + 8;
LABEL_209:
          uint64_t v94 = **a1;
LABEL_212:
          llvm::FixedVectorType::get(v94, (llvm::Type *)v26);
          uint64_t v81 = v96;
          uint64_t v83 = (llvm::Type *)(4 * v26);
          goto LABEL_216;
        }
        if (v16 == 3)
        {
          BOOL v25 = (char *)&v105 + 8;
          int v104 = (char *)&v105 + 8;
          *(void *)&long long v105 = 0x1000000000;
          if (a2)
          {
            int v34 = &a1[(void)a2];
            long long v35 = a1;
            while (1)
            {
              uint64_t v36 = *v35;
              if (!*v35 || *((unsigned char *)*v35 + 16) != 17) {
                goto LABEL_201;
              }
              uint64_t v39 = v36[4];
              uint64_t v38 = (llvm::detail::DoubleAPFloat *)(v36 + 4);
              if (v39 == (llvm::FixedVectorType *)&unk_1CFB2E344) {
                llvm::detail::DoubleAPFloat::bitcastToAPInt(v38, (llvm::APInt *)&v102);
              }
              else {
                llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v38, (uint64_t)&v102);
              }
              if (v103 >= 0x41)
              {
                int v41 = 0;
                int64_t v42 = ((unint64_t)v103 + 63) >> 6;
                do
                {
                  BOOL v19 = v42-- < 1;
                  if (v19) {
                    break;
                  }
                  unint64_t v43 = v102[v42];
                  v41 += __clz(v43);
                }
                while (!v43);
                unsigned int v44 = v103 | 0xFFFFFFC0;
                if ((v103 & 0x3F) == 0) {
                  unsigned int v44 = 0;
                }
                if (v103 - v41 - v44 > 0x40) {
                  uint64_t v40 = -1;
                }
                else {
                  uint64_t v40 = *v102;
                }
              }
              else
              {
                uint64_t v40 = (uint64_t)v102;
              }
              if (v105 >= (unint64_t)DWORD1(v105)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v104 + v105) = v40;
              LODWORD(v105) = v105 + 1;
              if (v103 >= 0x41 && v102) {
                MEMORY[0x1D25D9CB0](v102, 0x1000C8000313F17);
              }
              if (++v35 == v34)
              {
                unint64_t v95 = (char *)v104;
                unint64_t v92 = v105;
                goto LABEL_208;
              }
            }
          }
          unint64_t v92 = 0;
          unint64_t v95 = (char *)&v105 + 8;
LABEL_208:
          int v93 = **a1;
LABEL_215:
          llvm::FixedVectorType::get(v93, (llvm::Type *)v92);
          uint64_t v81 = v97;
          uint64_t v83 = (llvm::Type *)(8 * v92);
          goto LABEL_216;
        }
      }
      else if (v8 == 16)
      {
        unsigned int v22 = v16 >> 8;
        if (v16 == 13 && v22 == 8)
        {
          BOOL v25 = (char *)v106;
          int v104 = v106;
          long long v105 = xmmword_1CDB15990;
          int v46 = 0;
          if (a2)
          {
            uint64_t v47 = 8 * (void)a2;
            uint64_t v48 = a1;
            while (1)
            {
              unint64_t v49 = *v48;
              if (!*v48 || *((unsigned char *)*v48 + 16) != 16) {
                goto LABEL_201;
              }
              int v51 = v49 + 3;
              if (*((_DWORD *)v49 + 8) >= 0x41u) {
                int v51 = (void *)*v51;
              }
              if ((unint64_t)v46 + 1 > *((void *)&v105 + 1)) {
                llvm::SmallVectorBase<unsigned long long>::grow_pod();
              }
              *((unsigned char *)v46 + (void)v104) = *(unsigned char *)v51;
              int v46 = (llvm::Type *)(v105 + 1);
              *(void *)&long long v105 = v105 + 1;
              ++v48;
              v47 -= 8;
              if (!v47)
              {
                unsigned int v79 = v104;
                goto LABEL_184;
              }
            }
          }
          unsigned int v79 = v106;
LABEL_184:
          llvm::FixedVectorType::get((llvm::FixedVectorType *)(**(void **)**a1 + 1912), v46);
          uint64_t v81 = v80;
          int v82 = v79;
          uint64_t v83 = v46;
LABEL_217:
          uint64_t Impl = llvm::ConstantDataSequential::getImpl(v82, v83, v81);
LABEL_218:
          if (v104 != v25) {
            free(v104);
          }
          return Impl;
        }
        if (v16 != 13 || v22 != 16)
        {
          if (v16 == 13 && v22 == 32)
          {
            BOOL v25 = (char *)&v105 + 8;
            int v104 = (char *)&v105 + 8;
            *(void *)&long long v105 = 0x1000000000;
            unint64_t v26 = 0;
            if (a2)
            {
              uint64_t v27 = 8 * (void)a2;
              int v28 = a1;
              while (1)
              {
                BOOL v29 = *v28;
                if (!*v28 || *((unsigned char *)*v28 + 16) != 16) {
                  break;
                }
                int v31 = v29 + 3;
                if (*((_DWORD *)v29 + 8) >= 0x41u) {
                  int v31 = (void *)*v31;
                }
                if (v26 >= DWORD1(v105)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((_DWORD *)v104 + v26) = *(_DWORD *)v31;
                unint64_t v26 = (v105 + 1);
                LODWORD(v105) = v105 + 1;
                ++v28;
                v27 -= 8;
                if (!v27)
                {
                  unint64_t v95 = (char *)v104;
                  goto LABEL_211;
                }
              }
LABEL_201:
              uint64_t Impl = 0;
              goto LABEL_218;
            }
            unint64_t v95 = (char *)&v105 + 8;
LABEL_211:
            uint64_t v94 = (llvm::FixedVectorType *)(**(void **)**a1 + 1960);
            goto LABEL_212;
          }
          uint64_t Impl = 0;
          if (v16 == 13 && v22 == 64)
          {
            BOOL v25 = (char *)&v105 + 8;
            int v104 = (char *)&v105 + 8;
            *(void *)&long long v105 = 0x1000000000;
            unint64_t v92 = 0;
            if (a2)
            {
              uint64_t v84 = 8 * (void)a2;
              uint64_t v85 = a1;
              while (1)
              {
                uint64_t v86 = *v85;
                if (!*v85 || *((unsigned char *)*v85 + 16) != 16) {
                  goto LABEL_201;
                }
                uint64_t v88 = v86 + 3;
                if (*((_DWORD *)v86 + 8) >= 0x41u) {
                  uint64_t v88 = (void *)*v88;
                }
                if (v92 >= DWORD1(v105)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v104 + v92) = *v88;
                unint64_t v92 = (v105 + 1);
                LODWORD(v105) = v105 + 1;
                ++v85;
                v84 -= 8;
                if (!v84)
                {
                  unint64_t v95 = (char *)v104;
                  goto LABEL_214;
                }
              }
            }
            unint64_t v95 = (char *)&v105 + 8;
LABEL_214:
            int v93 = (llvm::FixedVectorType *)(**(void **)**a1 + 1984);
            goto LABEL_215;
          }
          return Impl;
        }
        BOOL v25 = (char *)v106;
        int v104 = v106;
        long long v105 = xmmword_1CDB15990;
        unsigned int v89 = 0;
        if (a2)
        {
          uint64_t v63 = 8 * (void)a2;
          unsigned int v64 = a1;
          while (1)
          {
            uint64_t v65 = *v64;
            if (!*v64 || *((unsigned char *)*v64 + 16) != 16) {
              goto LABEL_201;
            }
            int v67 = v65 + 3;
            if (*((_DWORD *)v65 + 8) >= 0x41u) {
              int v67 = (void *)*v67;
            }
            if ((unint64_t)v89 + 1 > *((void *)&v105 + 1)) {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
            }
            *((_WORD *)v104 + (void)v89) = *(_WORD *)v67;
            unsigned int v89 = (llvm::Type *)(v105 + 1);
            *(void *)&long long v105 = v105 + 1;
            ++v64;
            v63 -= 8;
            if (!v63)
            {
              unint64_t v95 = (char *)v104;
              goto LABEL_204;
            }
          }
        }
        unint64_t v95 = (char *)v106;
LABEL_204:
        uint64_t v90 = (llvm::FixedVectorType *)(**(void **)**a1 + 1936);
LABEL_205:
        llvm::FixedVectorType::get(v90, v89);
        uint64_t v81 = v91;
        uint64_t v83 = (llvm::Type *)(2 * (void)v89);
LABEL_216:
        int v82 = v95;
        goto LABEL_217;
      }
    }
    return 0;
  }
LABEL_20:
  if (v12)
  {
    return (llvm::Value *)llvm::ConstantAggregateZero::get(v6, v4);
  }
  else if (v8 == 12)
  {
    return (llvm::Value *)llvm::PoisonValue::get(v6, v4);
  }
  else
  {
    if ((v8 - 11) > 1u) {
      goto LABEL_32;
    }
    return (llvm::Value *)llvm::UndefValue::get(v6, v4);
  }
}

uint64_t sub_1CC56A4DC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = &a3[a4];
  unsigned int v9 = sub_1CC571B50(a3, (uint64_t)v8);
  DWORD2(v27) = 0;
  *(void *)&long long v27 = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCBE588))
  {
    unint64_t v24 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v24 = 0xFF51AFD7ED558CCDLL;
    }
    qword_1EBCBE580 = v24;
    __cxa_guard_release(&qword_1EBCBE588);
  }
  *(void *)((char *)&v27 + 4) = __PAIR64__(v9, HIDWORD(a2));
  unint64_t v10 = 0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ a2 ^ __ROR8__(__PAIR64__(v9, HIDWORD(a2)) + 12, 12));
  unint64_t v11 = __ROR8__(__PAIR64__(v9, HIDWORD(a2)) + 12, 12) ^ (v10 >> 47);
  unsigned int v12 = (-348639895 * ((((0x9DDFEA08EB382D69 * (v11 ^ v10)) >> 32) >> 15) ^ (-348639895 * (v11 ^ v10)))) ^ HIDWORD(a2);
  LODWORD(v27) = v12;
  *((void *)&v27 + 1) = a2;
  int v28 = a3;
  uint64_t v29 = a4;
  int v13 = *(_DWORD *)(a1 + 16);
  if (!v13)
  {
    uint64_t v14 = a4;
    goto LABEL_17;
  }
  uint64_t v14 = a4;
  for (int i = 1; ; ++i)
  {
    unsigned int v16 = v12 & (v13 - 1);
    uint64_t v17 = *(void *)(*(void *)a1 + 8 * v16);
    if (v17 != -8192)
    {
      if (v17 == -4096) {
        goto LABEL_17;
      }
      if (*(void *)v17 == a2 && a4 == (*(_DWORD *)(v17 + 20) & 0x7FFFFFF)) {
        break;
      }
    }
LABEL_13:
    unsigned int v12 = v16 + i;
  }
  if (a4)
  {
    unint64_t v18 = (void *)(v17 - 32 * a4);
    uint64_t v19 = a4;
    int v20 = a3;
    while (*v20 == *v18)
    {
      v18 += 4;
      ++v20;
      if (!--v19) {
        goto LABEL_14;
      }
    }
    goto LABEL_13;
  }
LABEL_14:
  if (v16 == v13)
  {
LABEL_17:
    BOOL v21 = operator new((32 * v14) | 0x18);
    uint64_t v17 = (uint64_t)&v21[4 * v14];
    *(_DWORD *)(v17 + 20) = *(_DWORD *)(v17 + 20) & 0x38000000 | a4 & 0x7FFFFFF;
    if (a4)
    {
      do
      {
        void *v21 = 0;
        v21[1] = 0;
        v21[2] = 0;
        v21[3] = v17;
        v21 += 4;
      }
      while (v21 != (void *)v17);
      unsigned int v22 = *(_DWORD *)(v17 + 20) & 0xC0000000;
    }
    else
    {
      unsigned int v22 = 0;
    }
    *(void *)uint64_t v17 = a2;
    *(void *)(v17 + 8) = 0;
    *(_DWORD *)(v17 + 16) = 10;
    *(_DWORD *)(v17 + 20) = v22 | a4 & 0x7FFFFFF;
    sub_1CC5716C8((uint64_t)v26, a3, v8, v17 - 32 * (a4 & 0x7FFFFFF));
    uint64_t v25 = v17;
    sub_1CC572B64(a1, &v25, (uint64_t)&v27, (uint64_t)v26);
  }
  return v17;
}

llvm::Value *llvm::ConstantDataVector::getSplat(llvm::ConstantDataVector *this, llvm::FixedVectorType **a2, llvm::Constant *a3)
{
  unint64_t v4 = this;
  v74[15] = *MEMORY[0x1E4F143B8];
  int v5 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v5 == 16)
  {
    uint64_t v30 = *a2;
    int v31 = *((_DWORD *)*a2 + 2);
    int v32 = *((_DWORD *)*a2 + 2) >> 8;
    if (v31 == 13 && v32 == 8)
    {
      int v51 = (unsigned __int8 *)(a2 + 3);
      if (*((_DWORD *)a2 + 8) >= 0x41u) {
        int v51 = *(unsigned __int8 **)v51;
      }
      int v52 = *v51;
      uint64_t v38 = (llvm::Type **)v74;
      uint64_t v72 = v74;
      *(_OWORD *)uint64_t v73 = xmmword_1CDB15990;
      sub_1CC5749CC(&v72, this, v52);
      uint64_t v53 = *(void *)*a2;
      unsigned int v54 = (llvm::Type **)v72;
      int v55 = v73[0];
      llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(void *)v53 + 1912), v73[0]);
      int64_t v42 = v56;
      unint64_t v43 = v54;
      unsigned int v44 = v55;
    }
    else if (v31 == 13 && v32 == 16)
    {
      uint64_t v45 = this;
      int v46 = a2 + 3;
      if (*((_DWORD *)a2 + 8) >= 0x41u) {
        int v46 = (void *)*v46;
      }
      __int16 v47 = *(_WORD *)v46;
      uint64_t v38 = (llvm::Type **)v74;
      uint64_t v72 = v74;
      v73[1] = (llvm::Type *)16;
      if (this >= 0x11)
      {
        v73[0] = 0;
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      if (this)
      {
        uint64_t v48 = v74;
        uint64_t v49 = this;
        do
        {
          *v48++ = v47;
          --v49;
        }
        while (v49);
      }
      v73[0] = (llvm::Type *)this;
      llvm::FixedVectorType::get((llvm::FixedVectorType *)(**(void **)v30 + 1936), this);
      int64_t v42 = v50;
      unint64_t v43 = (llvm::Type **)v74;
      unsigned int v44 = (llvm::Type *)(2 * v45);
    }
    else
    {
      uint64_t v35 = this;
      uint64_t v36 = (uint64_t *)(a2 + 3);
      if (v31 != 13 || v32 != 32)
      {
        if (*((_DWORD *)a2 + 8) >= 0x41u) {
          uint64_t v36 = (uint64_t *)*v36;
        }
        uint64_t v57 = *v36;
        uint64_t v38 = &v73[1];
        uint64_t v72 = &v73[1];
        v73[0] = (llvm::Type *)0x1000000000;
        sub_1CBF7C198((uint64_t)&v72, this, v57);
        uint64_t v58 = *(void **)*a2;
        int v59 = (llvm::Type **)v72;
        int64_t v60 = (llvm::Type *)LODWORD(v73[0]);
        unint64_t v61 = (llvm::FixedVectorType *)(*v58 + 1984);
        goto LABEL_67;
      }
      if (*((_DWORD *)a2 + 8) >= 0x41u) {
        uint64_t v36 = (uint64_t *)*v36;
      }
      int v37 = *(_DWORD *)v36;
      uint64_t v38 = &v73[1];
      uint64_t v72 = &v73[1];
      HIDWORD(v73[0]) = 16;
      uint64_t v39 = 4 * this;
      if (this >= 0x11)
      {
        LODWORD(v73[0]) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (this)
      {
        uint64_t v40 = &v73[1];
        do
        {
          *(_DWORD *)uint64_t v40 = v37;
          uint64_t v40 = (llvm::Type **)((char *)v40 + 4);
          --v35;
        }
        while (v35);
      }
      LODWORD(v73[0]) = this;
      llvm::FixedVectorType::get((llvm::FixedVectorType *)(**(void **)v30 + 1960), this);
      int64_t v42 = v41;
      unint64_t v43 = &v73[1];
      unsigned int v44 = (llvm::Type *)v39;
    }
LABEL_46:
    uint64_t Impl = llvm::ConstantDataSequential::getImpl(v43, v44, v42);
    int v20 = v72;
    if (v72 == v38) {
      return Impl;
    }
    goto LABEL_47;
  }
  if (a2 && v5 == 17)
  {
    int v6 = *((unsigned __int8 *)*a2 + 8);
    if (v6 == 2)
    {
      char v7 = (llvm::detail::DoubleAPFloat *)(a2 + 4);
      if (a2[4] == (llvm::FixedVectorType *)&unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v7, (llvm::APInt *)&v70);
      }
      else {
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v7, (uint64_t)&v70);
      }
      uint64_t v8 = v4;
      unsigned int v9 = v71;
      if (v71 >= 0x41)
      {
        if (v9 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v70) > 0x40) {
          LODWORD(v10) = -1;
        }
        else {
          uint64_t v10 = *v70;
        }
      }
      else
      {
        LODWORD(v10) = v70;
      }
      unint64_t v11 = &v73[1];
      uint64_t v72 = &v73[1];
      HIDWORD(v73[0]) = 16;
      if (v4 >= 0x11)
      {
        LODWORD(v73[0]) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v4)
      {
        unsigned int v12 = &v73[1];
        uint64_t v13 = v4;
        do
        {
          *(_DWORD *)unsigned int v12 = v10;
          unsigned int v12 = (llvm::Type **)((char *)v12 + 4);
          --v13;
        }
        while (v13);
      }
      uint64_t v14 = &v73[1];
      LODWORD(v73[0]) = v4;
      if (v9 >= 0x41)
      {
        if (v70)
        {
          MEMORY[0x1D25D9CB0](v70, 0x1000C8000313F17);
          uint64_t v14 = (llvm::Type **)v72;
          uint64_t v8 = LODWORD(v73[0]);
          unint64_t v4 = (llvm::Type *)LODWORD(v73[0]);
        }
      }
      llvm::FixedVectorType::get(*a2, v4);
      unsigned int v16 = v15;
      uint64_t v17 = (llvm::Type *)(4 * v8);
      unint64_t v18 = v14;
      goto LABEL_16;
    }
    if (!*((unsigned char *)*a2 + 8))
    {
      unsigned int v22 = (llvm::detail::DoubleAPFloat *)(a2 + 4);
      if (a2[4] == (llvm::FixedVectorType *)&unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v22, (llvm::APInt *)&v70);
      }
      else {
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v22, (uint64_t)&v70);
      }
      uint64_t v23 = (llvm::Type *)v4;
      unsigned int v24 = v71;
      if (v71 >= 0x41)
      {
        if (v24 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v70) > 0x40) {
          LOWORD(v25) = -1;
        }
        else {
          uint64_t v25 = *v70;
        }
      }
      else
      {
        LOWORD(v25) = (_WORD)v70;
      }
      unint64_t v11 = (llvm::Type **)v74;
      uint64_t v72 = v74;
      v73[1] = (llvm::Type *)16;
      if (v4 >= 0x11)
      {
        v73[0] = 0;
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      if (v4)
      {
        unint64_t v26 = v74;
        uint64_t v27 = v4;
        do
        {
          *v26++ = v25;
          --v27;
        }
        while (v27);
      }
      int v28 = (llvm::Type **)v74;
      v73[0] = v23;
      if (v24 >= 0x41 && v70)
      {
        MEMORY[0x1D25D9CB0](v70, 0x1000C8000313F17);
        int v28 = (llvm::Type **)v72;
        uint64_t v23 = v73[0];
      }
      llvm::FixedVectorType::get(*a2, v23);
      unsigned int v16 = v29;
      uint64_t v17 = (llvm::Type *)(2 * (void)v23);
      unint64_t v18 = v28;
LABEL_16:
      uint64_t Impl = llvm::ConstantDataSequential::getImpl(v18, v17, v16);
      int v20 = v72;
      if (v72 == v11) {
        return Impl;
      }
LABEL_47:
      free(v20);
      return Impl;
    }
    if (v6 == 1)
    {
      unsigned int v63 = this;
      sub_1CB867534((uint64_t)(a2 + 3), (uint64_t)&v70);
      __int16 v64 = (unsigned __int16)sub_1CBF82054((uint64_t)&v70, 0xFFFFFFFFFFFFFFFFLL);
      uint64_t v38 = (llvm::Type **)v74;
      uint64_t v72 = v74;
      *(_OWORD *)uint64_t v73 = xmmword_1CDB15990;
      sub_1CC574A70(&v72, v63, v64);
      if (v71 >= 0x41 && v70) {
        MEMORY[0x1D25D9CB0](v70, 0x1000C8000313F17);
      }
      uint64_t v65 = *a2;
      int v59 = (llvm::Type **)v72;
      unsigned int v66 = v73[0];
      llvm::FixedVectorType::get(v65, v73[0]);
      int64_t v42 = v67;
      unsigned int v44 = (llvm::Type *)(2 * (void)v66);
      goto LABEL_68;
    }
    if (v6 == 3)
    {
      unsigned int v68 = this;
      sub_1CB867534((uint64_t)(a2 + 3), (uint64_t)&v70);
      uint64_t v69 = sub_1CBF82054((uint64_t)&v70, 0xFFFFFFFFFFFFFFFFLL);
      uint64_t v38 = &v73[1];
      uint64_t v72 = &v73[1];
      v73[0] = (llvm::Type *)0x1000000000;
      sub_1CBF7C198((uint64_t)&v72, v68, (uint64_t)v69);
      if (v71 >= 0x41 && v70) {
        MEMORY[0x1D25D9CB0](v70, 0x1000C8000313F17);
      }
      unint64_t v61 = *a2;
      int v59 = (llvm::Type **)v72;
      int64_t v60 = (llvm::Type *)LODWORD(v73[0]);
LABEL_67:
      llvm::FixedVectorType::get(v61, v60);
      int64_t v42 = v62;
      unsigned int v44 = (llvm::Type *)(8 * (void)v60);
LABEL_68:
      unint64_t v43 = v59;
      goto LABEL_46;
    }
  }

  return (llvm::Value *)llvm::ConstantVector::getSplat(this, a2);
}

llvm *llvm::ConstantExpr::getInsertElement(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4, llvm::Type *a5)
{
  v18[3] = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::ConstantFoldInsertElementInstruction(this, a2, a3, a4);
  if (!result)
  {
    uint64_t v10 = *(void ***)this;
    if (*(llvm::Constant **)this == a4)
    {
      return 0;
    }
    else
    {
      v18[0] = this;
      v18[1] = a2;
      v18[2] = a3;
      uint64_t v11 = **v10 + 1512;
      v12[0] = 62;
      v12[1] = 0;
      uint64_t v13 = v18;
      uint64_t v14 = 3;
      long long v15 = 0u;
      long long v16 = 0u;
      uint64_t v17 = 0;
      return (llvm *)sub_1CC56C20C(v11, (uint64_t)v10, (unsigned __int8 *)v12);
    }
  }
  return result;
}

void *llvm::ConstantExpr::getShuffleVector(llvm *a1, llvm *a2, int *a3, llvm::Type *a4, void **a5)
{
  v22[2] = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::ConstantFoldShuffleVectorInstruction(a1, a2, a3, a4);
  if (!result)
  {
    llvm::VectorType::get(*(llvm::FixedVectorType **)(*(void *)a1 + 24), (llvm::Type *)(a4 | ((unint64_t)(*(unsigned char *)(*(void *)a1 + 8) == 19) << 32)));
    if (v11 == a5)
    {
      return 0;
    }
    else
    {
      uint64_t v12 = (uint64_t)v11;
      v22[0] = a1;
      v22[1] = a2;
      uint64_t v13 = **v11 + 1512;
      v14[0] = 63;
      v14[1] = 0;
      long long v15 = v22;
      uint64_t v16 = 2;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = a3;
      int v20 = a4;
      uint64_t v21 = 0;
      return (void *)sub_1CC56C20C(v13, v12, (unsigned __int8 *)v14);
    }
  }
  return result;
}

BOOL llvm::ConstantExpr::isCast(llvm::ConstantExpr *this)
{
  return *((unsigned __int16 *)this + 9) - 38 < 0xD;
}

BOOL llvm::ConstantExpr::isCompare(llvm::ConstantExpr *this)
{
  return *((unsigned __int16 *)this + 9) - 53 < 2;
}

BOOL llvm::ConstantExpr::hasIndices(llvm::ConstantExpr *this)
{
  return (*((_WORD *)this + 9) & 0xFFFE) == 64;
}

uint64_t llvm::ConstantExpr::getPredicate(llvm::ConstantExpr *this)
{
  return *((unsigned __int16 *)this + 12);
}

llvm::ConstantExpr *llvm::ConstantExpr::getWithOperands(llvm::ConstantExpr *result, llvm::ConstantExpr **a2, uint64_t a3, llvm::Constant ***a4, llvm::Type *a5, llvm::Type *a6)
{
  if (*(llvm::Constant ****)result == a4)
  {
    if (!a3) {
      return result;
    }
    uint64_t v7 = -32 * (*((_DWORD *)result + 5) & 0x7FFFFFF);
    uint64_t v8 = 8 * a3;
    unsigned int v9 = a2;
    while (*v9 == *(llvm::ConstantExpr **)((char *)result + v7))
    {
      ++v9;
      v7 += 32;
      v8 -= 8;
      if (!v8) {
        return result;
      }
    }
  }
  if (a5) {
    uint64_t v10 = (uint64_t **)a4;
  }
  else {
    uint64_t v10 = 0;
  }
  unsigned int v11 = *((unsigned __int16 *)result + 9);
  if (v11 - 38 < 0xD) {
    return llvm::ConstantExpr::getCast((llvm::ConstantExpr *)*((unsigned __int16 *)result + 9), *a2, a4, a5);
  }
  if (v11 == 34)
  {
    if (!a6)
    {
      uint64_t v17 = 24;
      if (*((unsigned char *)result + 16) == 62) {
        uint64_t v17 = 64;
      }
      a6 = *(llvm::Type **)((char *)result + v17);
    }
    uint64_t v13 = (uint64_t)(a2 + 1);
    uint64_t v12 = *a2;
    unint64_t v14 = *((unsigned __int8 *)result + 17);
    unsigned int v15 = (v14 >> 1) & 1;
    if (v14 <= 3) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = ((v14 >> 2) + 0xFFFFFFFF) | 0x100000000;
    }
    return (llvm::ConstantExpr *)llvm::ConstantExpr::getGetElementPtr((uint64_t)a6, (uint64_t *)v12, v13, a3 - 1, v15, v16, v10);
  }
  else if (v11 == 12)
  {
    return (llvm::ConstantExpr *)llvm::ConstantExpr::get((llvm::ConstantExpr *)0xC, (unsigned __int8 *)*a2, 0, 0, a5);
  }
  else
  {
    if (v11 <= 0xC)
    {
      switch(*((_WORD *)result + 9))
      {
        case '5':
        case '6':
          uint64_t v18 = (llvm::ConstantExpr *)*((unsigned __int16 *)result + 12);
          uint64_t v19 = *a2;
          int v20 = a2[1];
          if (v18 > 0xF) {
            return (llvm::ConstantExpr *)llvm::ConstantExpr::getICmp(v18, v19, v20, (llvm::Constant *)(v10 != 0), (BOOL)a5);
          }
          else {
            return (llvm::ConstantExpr *)llvm::ConstantExpr::getFCmp(v18, (uint64_t ***)v19, v20, (llvm::Constant *)(v10 != 0));
          }
        case '7':
        case '8':
        case ':':
        case ';':
        case '<':
          return llvm::ConstantExpr::get((llvm::ConstantExpr *)*((unsigned __int16 *)result + 9), *a2, a2[1], (llvm::Constant *)(*((unsigned __int8 *)result + 17) >> 1), (uint64_t)v10, a6);
        case '9':
          return llvm::ConstantExpr::getSelect(*a2, (llvm::PoisonValue **)a2[1], a2[2], (llvm::Constant *)v10, a5);
        case '=':
          return (llvm::ConstantExpr *)llvm::ConstantExpr::getExtractElement(*a2, a2[1], (llvm::Constant *)v10, (llvm::Type *)a4);
        case '>':
          return (llvm::ConstantExpr *)llvm::ConstantExpr::getInsertElement(*a2, a2[1], a2[2], (llvm::Constant *)v10, a5);
        case '?':
          return (llvm::ConstantExpr *)llvm::ConstantExpr::getShuffleVector(*a2, a2[1], *((int **)result + 3), (llvm::Type *)*((unsigned int *)result + 8), v10);
        case '@':
          return llvm::ConstantExpr::getExtractValue(*a2, *((unsigned int **)result + 3), *((unsigned int *)result + 8), (uint64_t)v10);
        case 'A':
          return llvm::ConstantExpr::getInsertValue(*a2, (uint64_t *)a2[1], *((_DWORD **)result + 3), *((unsigned int *)result + 8), (uint64_t)v10);
        default:
          JUMPOUT(0);
      }
    }
    return llvm::ConstantExpr::get((llvm::ConstantExpr *)*((unsigned __int16 *)result + 9), *a2, a2[1], (llvm::Constant *)(*((unsigned __int8 *)result + 17) >> 1), (uint64_t)v10, a6);
  }
}

llvm::ConstantExpr *llvm::ConstantExpr::getCast(llvm::ConstantExpr *this, llvm::ConstantExpr *a2, llvm::Constant ***a3, llvm::Type *a4)
{
  switch((int)this)
  {
    case '\'':
      uint64_t v4 = 39;
      return (llvm::ConstantExpr *)sub_1CC56C0C0(v4, a2);
    case '(':
      uint64_t v4 = 40;
      return (llvm::ConstantExpr *)sub_1CC56C0C0(v4, a2);
    case ')':
      uint64_t v4 = 41;
      return (llvm::ConstantExpr *)sub_1CC56C0C0(v4, a2);
    case '*':
      uint64_t v4 = 42;
      return (llvm::ConstantExpr *)sub_1CC56C0C0(v4, a2);
    case '+':
      uint64_t v4 = 43;
      return (llvm::ConstantExpr *)sub_1CC56C0C0(v4, a2);
    case ',':
      uint64_t v4 = 44;
      return (llvm::ConstantExpr *)sub_1CC56C0C0(v4, a2);
    case '-':
      uint64_t v4 = 45;
      return (llvm::ConstantExpr *)sub_1CC56C0C0(v4, a2);
    case '.':
      uint64_t v4 = 46;
      return (llvm::ConstantExpr *)sub_1CC56C0C0(v4, a2);
    case '/':
      uint64_t v4 = 47;
      return (llvm::ConstantExpr *)sub_1CC56C0C0(v4, a2);
    case '0':
      uint64_t v4 = 48;
      return (llvm::ConstantExpr *)sub_1CC56C0C0(v4, a2);
    case '1':
      if (*(llvm::Constant ****)a2 == a3) {
        return a2;
      }
      uint64_t v4 = 49;
      return (llvm::ConstantExpr *)sub_1CC56C0C0(v4, a2);
    case '2':
      return (llvm::ConstantExpr *)llvm::ConstantExpr::getAddrSpaceCast(a2, a3, a4);
    default:
      uint64_t v4 = 38;
      return (llvm::ConstantExpr *)sub_1CC56C0C0(v4, a2);
  }
}

llvm::Constant *llvm::ConstantExpr::getSelect(llvm::ConstantExpr *this, llvm::PoisonValue **a2, llvm::Constant *a3, llvm::Constant *a4, llvm::Type *a5)
{
  v18[3] = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::ConstantFoldSelectInstruction(this, a2, a3, a4);
  if (!result)
  {
    uint64_t v10 = *a2;
    if (*a2 == a4)
    {
      return 0;
    }
    else
    {
      v18[0] = this;
      v18[1] = a2;
      v18[2] = a3;
      uint64_t v11 = ***(void ***)this + 1512;
      v12[0] = 57;
      v12[1] = 0;
      uint64_t v13 = v18;
      uint64_t v14 = 3;
      long long v15 = 0u;
      long long v16 = 0u;
      uint64_t v17 = 0;
      return (llvm::Constant *)sub_1CC56C20C(v11, (uint64_t)v10, (unsigned __int8 *)v12);
    }
  }
  return result;
}

uint64_t llvm::ConstantExpr::getExtractElement(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Type *a4)
{
  v17[2] = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::ConstantFoldExtractElementInstruction(this, a2, a3);
  if (!result)
  {
    uint64_t v8 = *(void ***)this;
    unsigned int v9 = *(llvm::Constant **)(*(void *)this + 24);
    if (v9 == a3)
    {
      return 0;
    }
    else
    {
      v17[0] = this;
      v17[1] = a2;
      uint64_t v10 = **v8 + 1512;
      v11[0] = 61;
      v11[1] = 0;
      uint64_t v12 = v17;
      uint64_t v13 = 2;
      long long v14 = 0u;
      long long v15 = 0u;
      uint64_t v16 = 0;
      return sub_1CC56C20C(v10, (uint64_t)v9, (unsigned __int8 *)v11);
    }
  }
  return result;
}

llvm::Value *llvm::ConstantExpr::getInsertValue(llvm::Constant *a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  v21[2] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *a2;
  uint64_t result = llvm::ConstantFoldInsertValueInstruction(a1, (uint64_t)a2, a3, a4);
  if (!result)
  {
    if (v10 == a5)
    {
      return 0;
    }
    else
    {
      v21[0] = a1;
      v21[1] = a2;
      uint64_t v12 = ***(void ***)a1 + 1512;
      v13[0] = 65;
      v13[1] = 0;
      long long v14 = v21;
      uint64_t v15 = 2;
      uint64_t v16 = a3;
      uint64_t v17 = a4;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v18 = 0;
      return (llvm::Value *)sub_1CC56C20C(v12, v10, (unsigned __int8 *)v13);
    }
  }
  return result;
}

llvm::Constant *llvm::ConstantExpr::getExtractValue(llvm::Constant *this, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = this;
  v25[1] = *MEMORY[0x1E4F143B8];
  if (!a3) {
    return this;
  }
  uint64_t v8 = *(void *)this;
  uint64_t v9 = 4 * a3;
  uint64_t v10 = a2;
  while (1)
  {
    unint64_t v11 = *v10;
    int v12 = *(unsigned __int8 *)(v8 + 8);
    if (!v8 || v12 != 17) {
      break;
    }
    if (*(void *)(v8 + 32) <= v11) {
      goto LABEL_19;
    }
    long long v14 = (uint64_t *)(v8 + 24);
LABEL_9:
    uint64_t v8 = *v14;
    ++v10;
    uint64_t v13 = v8;
    v9 -= 4;
    if (!v9) {
      goto LABEL_10;
    }
  }
  uint64_t v13 = 0;
  if (!v8 || v12 != 16) {
    goto LABEL_10;
  }
  if (v11 < *(_DWORD *)(v8 + 12))
  {
    long long v14 = (uint64_t *)(*(void *)(v8 + 16) + 8 * v11);
    goto LABEL_9;
  }
LABEL_19:
  uint64_t v13 = 0;
LABEL_10:
  uint64_t v15 = 0;
  while (1)
  {
    this = (llvm::Constant *)llvm::Constant::getAggregateElement(this, (llvm::Type *)a2[v15]);
    if (!this) {
      break;
    }
    if (a3 == ++v15) {
      return this;
    }
  }
  if (v13 == a4) {
    return 0;
  }
  v25[0] = v4;
  uint64_t v16 = ***(void ***)v4 + 1512;
  v17[0] = 64;
  v17[1] = 0;
  uint64_t v18 = v25;
  uint64_t v19 = 1;
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = 0;
  return (llvm::Constant *)sub_1CC56C20C(v16, v13, (unsigned __int8 *)v17);
}

uint64_t llvm::ConstantExpr::getFNeg(llvm::ConstantExpr *this, llvm::Constant *a2, uint64_t a3, uint64_t a4, llvm::Type *a5)
{
  return llvm::ConstantExpr::get((llvm::ConstantExpr *)0xC, (unsigned __int8 *)this, 0, 0, a5);
}

void *llvm::ConstantExpr::getCompare(llvm::ConstantExpr *this, llvm::Type *a2, llvm::Constant *a3, llvm::Constant *a4, BOOL a5)
{
  if (this <= 0xF) {
    return (void *)llvm::ConstantExpr::getFCmp(this, (uint64_t ***)a2, a3, a4);
  }
  else {
    return llvm::ConstantExpr::getICmp(this, a2, a3, a4, a5);
  }
}

const llvm::detail::DoubleAPFloat *llvm::ConstantExpr::get(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4, uint64_t a5, llvm::Type *a6)
{
  unsigned __int8 v7 = a4;
  unsigned __int8 v10 = this;
  v21[2] = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::ConstantFoldBinaryInstruction(this, a2, a3, a4);
  if (!result)
  {
    int v12 = *(void ***)a2;
    if (*(void *)a2 == a5)
    {
      return 0;
    }
    else
    {
      v21[0] = a2;
      v21[1] = a3;
      uint64_t v13 = **v12 + 1512;
      v14[0] = v10;
      v14[1] = v7;
      __int16 v15 = 0;
      uint64_t v16 = v21;
      uint64_t v17 = 2;
      long long v18 = 0u;
      long long v19 = 0u;
      uint64_t v20 = 0;
      return (const llvm::detail::DoubleAPFloat *)sub_1CC56C20C(v13, (uint64_t)v12, v14);
    }
  }
  return result;
}

int32x2_t sub_1CC56B838(int32x2_t *a1, uint64_t a2)
{
  int32x2_t v3 = *a1;
  __int32 v4 = a1[2].i32[0];
  if (!v4)
  {
    uint64_t v6 = 0;
LABEL_7:
    unsigned __int8 v7 = (uint64_t *)(*(void *)&v3 + 8 * v6);
    goto LABEL_3;
  }
  LODWORD(v6) = sub_1CC572384(a2) & (v4 - 1);
  unsigned __int8 v7 = (uint64_t *)(*(void *)&v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 != a2)
  {
    int v10 = 1;
    while (v8 != -4096)
    {
      int v11 = v6 + v10++;
      uint64_t v6 = v11 & (v4 - 1);
      uint64_t v8 = *(void *)(*(void *)&v3 + 8 * v6);
      if (v8 == a2) {
        goto LABEL_7;
      }
    }
    int32x2_t v3 = *a1;
    uint64_t v6 = a1[2].u32[0];
    goto LABEL_7;
  }
LABEL_3:
  *unsigned __int8 v7 = -8192;
  int32x2_t result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

int32x2_t sub_1CC56B8EC(int32x2_t *a1, uint64_t *a2)
{
  int32x2_t v3 = *a1;
  __int32 v4 = a1[2].i32[0];
  if (!v4)
  {
    uint64_t v6 = 0;
LABEL_7:
    unsigned __int8 v7 = (uint64_t **)(*(void *)&v3 + 8 * v6);
    goto LABEL_3;
  }
  LODWORD(v6) = sub_1CC57294C(a2) & (v4 - 1);
  unsigned __int8 v7 = (uint64_t **)(*(void *)&v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 != a2)
  {
    int v10 = 1;
    while (v8 != (uint64_t *)-4096)
    {
      int v11 = v6 + v10++;
      uint64_t v6 = v11 & (v4 - 1);
      uint64_t v8 = *(uint64_t **)(*(void *)&v3 + 8 * v6);
      if (v8 == a2) {
        goto LABEL_7;
      }
    }
    int32x2_t v3 = *a1;
    uint64_t v6 = a1[2].u32[0];
    goto LABEL_7;
  }
LABEL_3:
  *unsigned __int8 v7 = (uint64_t *)-8192;
  int32x2_t result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

void *llvm::ConstantDataVector::getSplatValue(llvm::ConstantDataVector *this)
{
  char v2 = *((unsigned char *)this + 40);
  if ((v2 & 1) == 0)
  {
    *((unsigned char *)this + 40) = v2 | 1;
    if (llvm::ConstantDataVector::isSplatData(this)) {
      char v4 = 2;
    }
    else {
      char v4 = 0;
    }
    char v2 = *((unsigned char *)this + 40) & 0xFD | v4;
    *((unsigned char *)this + 40) = v2;
  }
  if ((v2 & 2) == 0) {
    return 0;
  }

  return llvm::ConstantDataSequential::getElementAsConstant((llvm::ConstantFP ***)this, 0);
}

uint64_t llvm::ConstantVector::getSplatValue(llvm::ConstantVector *this, int a2)
{
  uint64_t v3 = *((_DWORD *)this + 5) & 0x7FFFFFF;
  uint64_t result = *((void *)this - 4 * v3);
  if (v3 >= 2)
  {
    uint64_t v5 = -32 * v3;
    uint64_t v6 = (char *)this + 32;
    do
    {
      uint64_t v7 = *(void *)&v6[v5];
      if (v7 == result) {
        int v8 = 4;
      }
      else {
        int v8 = 1;
      }
      if (v7 != result && a2 != 0)
      {
        if (*(unsigned __int8 *)(v7 + 16) - 11 < 2) {
          goto LABEL_15;
        }
        if (*(unsigned __int8 *)(result + 16) - 11 < 2) {
          uint64_t result = *(void *)&v6[v5];
        }
        int v8 = v7 != result;
      }
      if ((v8 | 4) != 4) {
        return 0;
      }
LABEL_15:
      v5 += 32;
    }
    while (v5 != -32);
  }
  return result;
}

uint64_t llvm::Constant::getUniqueInteger(llvm::Constant *this)
{
  if (!this || *((unsigned char *)this + 16) != 16) {
    this = (llvm::Constant *)llvm::Constant::getAggregateElement(this, 0);
  }
  return (uint64_t)this + 24;
}

uint64_t llvm::BlockAddress::lookup(llvm::BlockAddress *this, const llvm::BasicBlock *a2)
{
  if ((*((_WORD *)this + 9) & 0x7FFF) == 0) {
    return 0;
  }
  uint64_t v3 = (llvm::Function *)*((void *)this + 7);
  uint64_t v5 = (uint64_t *)(*(void *)llvm::Function::getContext(v3) + 1440);
  v7[0] = v3;
  v7[1] = this;
  uint64_t v8 = 0;
  int v6 = sub_1CD5AA3D8(v5, v7, &v8);
  uint64_t result = 0;
  if (v6) {
    return *(void *)(v8 + 16);
  }
  return result;
}

llvm::detail::IEEEFloat *llvm::ConstantExpr::getTrunc(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Type *a3)
{
  return sub_1CC56C0C0((llvm *)0x26, this, a2, a3);
}

llvm::detail::IEEEFloat *llvm::ConstantExpr::getZExt(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Type *a3)
{
  return sub_1CC56C0C0((llvm *)0x27, this, a2, a3);
}

llvm::detail::IEEEFloat *llvm::ConstantExpr::getSExt(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Type *a3)
{
  return sub_1CC56C0C0((llvm *)0x28, this, a2, a3);
}

llvm::detail::IEEEFloat *llvm::ConstantExpr::getFPTrunc(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Type *a3)
{
  return sub_1CC56C0C0((llvm *)0x2D, this, a2, a3);
}

llvm::detail::IEEEFloat *llvm::ConstantExpr::getFPExtend(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Type *a3)
{
  return sub_1CC56C0C0((llvm *)0x2E, this, a2, a3);
}

llvm::detail::IEEEFloat *llvm::ConstantExpr::getUIToFP(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Type *a3)
{
  return sub_1CC56C0C0((llvm *)0x2B, this, a2, a3);
}

llvm::detail::IEEEFloat *llvm::ConstantExpr::getSIToFP(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Type *a3)
{
  return sub_1CC56C0C0((llvm *)0x2C, this, a2, a3);
}

llvm::detail::IEEEFloat *llvm::ConstantExpr::getFPToUI(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Type *a3)
{
  return sub_1CC56C0C0((llvm *)0x29, this, a2, a3);
}

llvm::detail::IEEEFloat *llvm::ConstantExpr::getFPToSI(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Type *a3)
{
  return sub_1CC56C0C0((llvm *)0x2A, this, a2, a3);
}

llvm::detail::IEEEFloat *llvm::ConstantExpr::getPtrToInt(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Type *a3)
{
  return sub_1CC56C0C0((llvm *)0x2F, this, a2, a3);
}

uint64_t llvm::ConstantExpr::getAddrSpaceCast(llvm::ConstantExpr *this, llvm::Constant ***a2, llvm::Type *a3)
{
  char v4 = this;
  uint64_t v5 = *(void *)this;
  if ((*(_DWORD *)(*(void *)this + 8) & 0xFE) == 0x12) {
    uint64_t v5 = **(void **)(v5 + 16);
  }
  int v6 = (llvm::Constant *)a2;
  if ((a2[1] & 0xFE) == 0x12) {
    int v6 = *a2[2];
  }
  uint64_t v7 = (llvm::PointerType *)*((void *)v6 + 3);
  if (*(llvm::PointerType **)(v5 + 24) != v7)
  {
    uint64_t v9 = (llvm::Type *)(*(_DWORD *)(v5 + 8) >> 8);
    if (v7) {
      int v10 = (llvm::FixedVectorType *)llvm::PointerType::get(v7, v9);
    }
    else {
      int v10 = (llvm::FixedVectorType *)llvm::PointerType::get(*(uint64_t ***)v6, v9);
    }
    int v11 = v10;
    if ((a2[1] & 0xFE) == 0x12)
    {
      llvm::FixedVectorType::get(v10, (llvm::Type *)*((unsigned int *)a2 + 8));
      int v11 = v12;
    }
    if (*(llvm::FixedVectorType **)v4 != v11) {
      char v4 = (llvm::ConstantExpr *)sub_1CC56C0C0(49, v4);
    }
  }

  return sub_1CC56C0C0(50, v4);
}

llvm::detail::IEEEFloat *llvm::ConstantExpr::getZExtOrBitCast(llvm::Type **this, llvm::Type ***a2, llvm::Type *a3)
{
  uint64_t v5 = *this;
  if ((*((_DWORD *)*this + 2) & 0xFE) == 0x12) {
    int v6 = (llvm::Type *)**((void **)v5 + 2);
  }
  else {
    int v6 = *this;
  }
  int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v6);
  uint64_t v8 = (llvm::Type *)a2;
  if ((a2[1] & 0xFE) == 0x12) {
    uint64_t v8 = *a2[2];
  }
  if (PrimitiveSizeInBits == llvm::Type::getPrimitiveSizeInBits(v8))
  {
    if (v5 == (llvm::Type *)a2) {
      return (llvm::detail::IEEEFloat *)this;
    }
    uint64_t v10 = 49;
  }
  else
  {
    uint64_t v10 = 39;
  }

  return sub_1CC56C0C0((llvm *)v10, (llvm::detail::IEEEFloat *)this, (llvm::Constant *)a2, 0);
}

llvm::ConstantExpr *llvm::ConstantExpr::getSExtOrBitCast(llvm::Type **this, llvm::Type ***a2, llvm::Type *a3)
{
  uint64_t v5 = *this;
  if ((*((_DWORD *)*this + 2) & 0xFE) == 0x12) {
    int v6 = (llvm::Type *)**((void **)v5 + 2);
  }
  else {
    int v6 = *this;
  }
  int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v6);
  uint64_t v8 = (llvm::Type *)a2;
  if ((a2[1] & 0xFE) == 0x12) {
    uint64_t v8 = *a2[2];
  }
  if (PrimitiveSizeInBits == llvm::Type::getPrimitiveSizeInBits(v8))
  {
    if (v5 == (llvm::Type *)a2) {
      return (llvm::ConstantExpr *)this;
    }
    uint64_t v10 = 49;
  }
  else
  {
    uint64_t v10 = 40;
  }

  return (llvm::ConstantExpr *)sub_1CC56C0C0(v10, this);
}

llvm::ConstantExpr *llvm::ConstantExpr::getPointerCast(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Type *a3)
{
  char v4 = this;
  int v5 = *((_DWORD *)a2 + 2);
  char v6 = v5;
  if ((v5 & 0xFE) == 0x12) {
    char v6 = *(unsigned char *)(**((void **)a2 + 2) + 8);
  }
  if (v6 == 13)
  {
    uint64_t v9 = 47;
    return (llvm::ConstantExpr *)sub_1CC56C0C0(v9, v4);
  }
  uint64_t v7 = *(llvm::Constant **)this;
  unsigned int v8 = *(_DWORD *)(*(void *)this + 8);
  if ((v8 & 0xFE) == 0x12) {
    unsigned int v8 = *(_DWORD *)(**((void **)v7 + 2) + 8);
  }
  if ((v5 & 0xFE) == 0x12) {
    int v5 = *(_DWORD *)(**((void **)a2 + 2) + 8);
  }
  if (v5 != 15 || (v5 ^ v8) < 0x100)
  {
    if (v7 == a2) {
      return this;
    }
    uint64_t v9 = 49;
    return (llvm::ConstantExpr *)sub_1CC56C0C0(v9, v4);
  }
  return (llvm::ConstantExpr *)llvm::ConstantExpr::getAddrSpaceCast(this, (llvm::Constant ***)a2, 0);
}

llvm::ConstantExpr *llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Type *a3)
{
  uint64_t v3 = *(llvm::Constant **)this;
  unsigned int v4 = *(_DWORD *)(*(void *)this + 8);
  if ((v4 & 0xFE) == 0x12) {
    unsigned int v4 = *(_DWORD *)(**((void **)v3 + 2) + 8);
  }
  int v5 = *((_DWORD *)a2 + 2);
  if ((v5 & 0xFE) == 0x12) {
    int v5 = *(_DWORD *)(**((void **)a2 + 2) + 8);
  }
  if ((v5 ^ v4) >= 0x100) {
    return (llvm::ConstantExpr *)llvm::ConstantExpr::getAddrSpaceCast(this, (llvm::Constant ***)a2, 0);
  }
  if (v3 != a2) {
    return sub_1CC56C0C0((llvm *)0x31, this, a2, 0);
  }
  return this;
}

llvm::ConstantExpr *llvm::ConstantExpr::getIntegerCast(llvm::ConstantExpr *this, llvm::Type ***a2, llvm::Type *a3)
{
  int v3 = (int)a3;
  uint64_t v6 = *(void *)this;
  if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12) {
    uint64_t v6 = **(void **)(v6 + 16);
  }
  unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v6);
  unsigned int v8 = (llvm::Type *)a2;
  if ((a2[1] & 0xFE) == 0x12) {
    unsigned int v8 = *a2[2];
  }
  unsigned int v9 = llvm::Type::getPrimitiveSizeInBits(v8);
  if (v3) {
    unsigned int v10 = 40;
  }
  else {
    unsigned int v10 = 39;
  }
  if (PrimitiveSizeInBits > v9) {
    unsigned int v10 = 38;
  }
  if (PrimitiveSizeInBits == v9) {
    uint64_t v11 = 49;
  }
  else {
    uint64_t v11 = v10;
  }

  return llvm::ConstantExpr::getCast((llvm::ConstantExpr *)v11, this, a2, 0);
}

llvm::detail::IEEEFloat *sub_1CC56C0C0(llvm *a1, llvm::detail::IEEEFloat *a2, llvm::Constant *a3, llvm::Type *a4)
{
  char v4 = (char)a4;
  unsigned __int8 v6 = a1;
  uint64_t v16 = a2;
  uint64_t result = llvm::ConstantFoldCastInstruction(a1, a2, a3, a4);
  if (!result && (v4 & 1) == 0)
  {
    uint64_t v8 = **(void **)a3 + 1512;
    v9[0] = v6;
    v9[1] = 0;
    __int16 v10 = 0;
    uint64_t v11 = &v16;
    uint64_t v12 = 1;
    long long v13 = 0u;
    long long v14 = 0u;
    uint64_t v15 = 0;
    return (llvm::detail::IEEEFloat *)sub_1CC56C20C(v8, (uint64_t)a3, v9);
  }
  return result;
}

uint64_t llvm::ConstantExpr::get(llvm::ConstantExpr *this, unsigned __int8 *a2, llvm::Constant *a3, uint64_t a4, llvm::Type *a5)
{
  unsigned __int8 v6 = a3;
  unsigned __int8 v8 = this;
  v19[1] = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::ConstantFoldUnaryInstruction(this, a2, a3);
  if (!result)
  {
    __int16 v10 = *(void ***)a2;
    if (*(void *)a2 == a4)
    {
      return 0;
    }
    else
    {
      v19[0] = a2;
      uint64_t v11 = **v10 + 1512;
      v12[0] = v8;
      v12[1] = v6;
      __int16 v13 = 0;
      long long v14 = v19;
      uint64_t v15 = 1;
      long long v16 = 0u;
      long long v17 = 0u;
      uint64_t v18 = 0;
      return sub_1CC56C20C(v11, (uint64_t)v10, v12);
    }
  }
  return result;
}

uint64_t sub_1CC56C20C(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  long long v6 = *((_OWORD *)a3 + 1);
  *(_OWORD *)&v94[8] = *(_OWORD *)a3;
  *(_OWORD *)&v94[24] = v6;
  long long v7 = *((_OWORD *)a3 + 3);
  *(_OWORD *)&v94[40] = *((_OWORD *)a3 + 2);
  *(_OWORD *)&v94[56] = v7;
  *(void *)uint64_t v94 = a2;
  int v8 = sub_1CC573C30((uint64_t)&v94[8]);
  *(_DWORD *)&v95[8] = 0;
  *(void *)unint64_t v95 = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCBE588))
  {
    unint64_t v92 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v92 = 0xFF51AFD7ED558CCDLL;
    }
    qword_1EBCBE580 = v92;
    __cxa_guard_release(&qword_1EBCBE588);
  }
  long long v96 = *(_OWORD *)&v94[16];
  *(_OWORD *)__s1 = *(_OWORD *)&v94[32];
  *(_OWORD *)int v98 = *(_OWORD *)&v94[48];
  *(_DWORD *)&v95[4] = *(_DWORD *)&v94[4];
  *(_DWORD *)&v95[8] = v8;
  unint64_t v9 = 0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ *(void *)v94 ^ __ROR8__(*(void *)&v95[4] + 12, 12));
  unint64_t v10 = __ROR8__(*(void *)&v95[4] + 12, 12) ^ (v9 >> 47);
  unsigned int v11 = (-348639895 * ((((0x9DDFEA08EB382D69 * (v10 ^ v9)) >> 32) >> 15) ^ (-348639895 * (v10 ^ v9)))) ^ *(_DWORD *)&v94[4];
  *(_DWORD *)unint64_t v95 = v11;
  uint64_t v99 = *(void *)&v94[64];
  *(_OWORD *)&v95[8] = *(_OWORD *)v94;
  int v93 = (uint64_t *)a1;
  int v12 = *(_DWORD *)(a1 + 16);
  if (v12)
  {
    uint64_t v13 = *v93;
    unsigned int v14 = v12 - 1;
    int v15 = 1;
    for (int i = (-348639895
             * ((((0x9DDFEA08EB382D69 * (v10 ^ v9)) >> 32) >> 15) ^ (-348639895 * (v10 ^ v9)))) ^ *(_DWORD *)&v94[4];
          ;
          int i = v17 + v15++)
    {
      int v17 = i & v14;
      uint64_t v18 = *(void *)(v13 + 8 * (i & v14));
      if (v18 == -4096) {
        break;
      }
      if (v18 != -8192 && *(void *)&v95[8] == *(void *)v18)
      {
        int v19 = v95[16];
        if (*(_WORD *)(v18 + 18) == v95[16]
          && v95[17] == *(unsigned __int8 *)(v18 + 17) >> 1
          && *((void *)&v96 + 1) == (*(_DWORD *)(v18 + 20) & 0x7FFFFFF))
        {
          int v20 = v95[16] - 53 <= 1 ? *(unsigned __int16 *)(v18 + 24) : 0;
          if (v20 == *(unsigned __int16 *)&v95[18])
          {
            uint64_t v21 = DWORD2(v96);
            if (DWORD2(v96))
            {
              uint64_t v22 = (void *)v96;
              uint64_t v23 = (void *)(v18 - 32 * *((void *)&v96 + 1));
              while (*v22 == *v23)
              {
                v23 += 4;
                ++v22;
                if (!--v21) {
                  goto LABEL_17;
                }
              }
            }
            else
            {
LABEL_17:
              if ((v95[16] & 0xFE) == 0x40)
              {
                uint64_t v25 = *(const void **)(v18 + 24);
                uint64_t v24 = (void *)*(unsigned int *)(v18 + 32);
              }
              else
              {
                uint64_t v24 = 0;
                uint64_t v25 = 0;
              }
              if (__s1[1] == v24 && !memcmp(__s1[0], v25, 4 * (uint64_t)__s1[1]))
              {
                if (v19 == 63)
                {
                  uint64_t v27 = *(const void **)(v18 + 24);
                  unint64_t v26 = (void *)*(unsigned int *)(v18 + 32);
                }
                else
                {
                  unint64_t v26 = 0;
                  uint64_t v27 = 0;
                }
                if (v98[1] == v26 && !memcmp(v98[0], v27, 4 * (uint64_t)v98[1]))
                {
                  uint64_t v28 = v19 == 34 ? *(void *)(v18 + 24) : 0;
                  if (v99 == v28)
                  {
                    if (v17 != v12) {
                      return v18;
                    }
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  int v29 = *a3;
  char v30 = a3[1];
  int v31 = (uint64_t *)*((void *)a3 + 1);
  if (v29 == 34)
  {
    uint64_t v42 = *((void *)a3 + 7);
    uint64_t v45 = *v31;
    unint64_t v43 = v31 + 1;
    uint64_t v44 = v45;
    uint64_t v46 = *((void *)a3 + 2);
    uint64_t v47 = v46 - 1;
    uint64_t v48 = v46;
    BOOL v49 = v46 == 0;
    unsigned int v50 = operator new(32 * v46 + 40);
    uint64_t v18 = (uint64_t)&v50[4 * v48];
    *(_DWORD *)(v18 + 20) = *(_DWORD *)(v18 + 20) & 0x38000000 | v48 & 0x7FFFFFF;
    if (!v49)
    {
      do
      {
        *unsigned int v50 = 0;
        v50[1] = 0;
        v50[2] = 0;
        v50[3] = v18;
        v50 += 4;
      }
      while (v50 != (void *)v18);
    }
    llvm::GetElementPtrConstantExpr::GetElementPtrConstantExpr(v18, v42, v44, v43, v47, a2);
    *(unsigned char *)(v18 + 17) = *(unsigned char *)(v18 + 17) & 1 | (2 * v30);
LABEL_43:
    uint64_t v41 = (uint64_t)v93;
  }
  else
  {
    __int16 v32 = *((_WORD *)a3 + 1);
    char v33 = (unsigned char *)*((void *)a3 + 3);
    uint64_t v34 = *((void *)a3 + 4);
    switch(*a3)
    {
      case '5':
        unsigned int v89 = operator new(0x60uLL);
        v89[21] = v89[21] & 0x38000000 | 2;
        uint64_t v18 = (uint64_t)(v89 + 16);
        *(void *)unsigned int v89 = 0;
        *((void *)v89 + 1) = 0;
        *((void *)v89 + 2) = 0;
        *((void *)v89 + 3) = v89 + 16;
        *((void *)v89 + 4) = 0;
        *((void *)v89 + 5) = 0;
        *((void *)v89 + 6) = 0;
        *((void *)v89 + 7) = v89 + 16;
        uint64_t v84 = *v31;
        uint64_t v85 = v31[1];
        uint64_t v86 = (uint64_t)(v89 + 16);
        uint64_t v87 = a2;
        __int16 v88 = 53;
        goto LABEL_95;
      case '6':
        uint64_t v83 = operator new(0x60uLL);
        v83[21] = v83[21] & 0x38000000 | 2;
        uint64_t v18 = (uint64_t)(v83 + 16);
        *(void *)uint64_t v83 = 0;
        *((void *)v83 + 1) = 0;
        *((void *)v83 + 2) = 0;
        *((void *)v83 + 3) = v83 + 16;
        *((void *)v83 + 4) = 0;
        *((void *)v83 + 5) = 0;
        *((void *)v83 + 6) = 0;
        *((void *)v83 + 7) = v83 + 16;
        uint64_t v84 = *v31;
        uint64_t v85 = v31[1];
        uint64_t v86 = (uint64_t)(v83 + 16);
        uint64_t v87 = a2;
        __int16 v88 = 54;
LABEL_95:
        sub_1CD5AADBC(v86, v87, v88, v32, v84, v85);
        goto LABEL_43;
      case '9':
        unsigned int v79 = operator new(0x78uLL);
        uint64_t v80 = 0;
        uint64_t v18 = (uint64_t)(v79 + 24);
        v79[29] = v79[29] & 0x38000000 | 3;
        do
        {
          uint64_t v81 = &v79[v80];
          *uint64_t v81 = 0;
          v81[1] = 0;
          v81[2] = 0;
          v81[3] = v18;
          v80 += 8;
        }
        while (v80 != 24);
        sub_1CD5AA80C((uint64_t)(v79 + 24), *v31, (void *)v31[1], v31[2]);
        goto LABEL_43;
      case '=':
        uint64_t v90 = operator new(0x58uLL);
        v90[21] = v90[21] & 0x38000000 | 2;
        uint64_t v18 = (uint64_t)(v90 + 16);
        *(void *)uint64_t v90 = 0;
        *((void *)v90 + 1) = 0;
        *((void *)v90 + 2) = 0;
        *((void *)v90 + 3) = v90 + 16;
        *((void *)v90 + 4) = 0;
        *((void *)v90 + 5) = 0;
        *((void *)v90 + 6) = 0;
        *((void *)v90 + 7) = v90 + 16;
        sub_1CD5AA904((uint64_t)(v90 + 16), (void *)*v31, v31[1]);
        goto LABEL_43;
      case '>':
        unsigned int v71 = operator new(0x78uLL);
        uint64_t v72 = 0;
        uint64_t v18 = (uint64_t)(v71 + 24);
        v71[29] = v71[29] & 0x38000000 | 3;
        do
        {
          uint64_t v73 = &v71[v72];
          void *v73 = 0;
          v73[1] = 0;
          v73[2] = 0;
          v73[3] = v18;
          v72 += 8;
        }
        while (v72 != 24);
        sub_1CD5AA9CC((uint64_t)(v71 + 24), (void *)*v31, v31[1], v31[2]);
        goto LABEL_43;
      case '?':
        int64_t v76 = a3 + 40;
        int v75 = (int *)*((void *)a3 + 5);
        uint64_t v74 = *((void *)v76 + 1);
        unint64_t v77 = operator new(0x80uLL);
        v77[21] = v77[21] & 0x38000000 | 2;
        uint64_t v18 = (uint64_t)(v77 + 16);
        *(void *)unint64_t v77 = 0;
        *((void *)v77 + 1) = 0;
        *((void *)v77 + 2) = 0;
        *((void *)v77 + 3) = v77 + 16;
        *((void *)v77 + 4) = 0;
        *((void *)v77 + 5) = 0;
        *((void *)v77 + 6) = 0;
        *((void *)v77 + 7) = v77 + 16;
        sub_1CD5AAAC4((uint64_t)(v77 + 16), (void *)*v31, v31[1], v75, v74);
        goto LABEL_43;
      case '@':
        unsigned int v78 = operator new(0x58uLL);
        uint64_t v18 = (uint64_t)(v78 + 8);
        v78[13] = v78[13] & 0x38000000 | 1;
        *(void *)unsigned int v78 = 0;
        *((void *)v78 + 1) = 0;
        *((void *)v78 + 2) = 0;
        *((void *)v78 + 3) = v78 + 8;
        sub_1CD5AAD0C((uint64_t)(v78 + 8), *v31, v33, v34, a2);
        goto LABEL_43;
      case 'A':
        int v82 = operator new(0x78uLL);
        v82[21] = v82[21] & 0x38000000 | 2;
        uint64_t v18 = (uint64_t)(v82 + 16);
        *(void *)int v82 = 0;
        *((void *)v82 + 1) = 0;
        *((void *)v82 + 2) = 0;
        *((void *)v82 + 3) = v82 + 16;
        *((void *)v82 + 4) = 0;
        *((void *)v82 + 5) = 0;
        *((void *)v82 + 6) = 0;
        *((void *)v82 + 7) = v82 + 16;
        sub_1CD5AAC0C((uint64_t)(v82 + 16), *v31, v31[1], v33, v34, a2);
        goto LABEL_43;
      default:
        if (v29 != 12 && (v29 - 38) > 0xC)
        {
          unsigned int v91 = operator new(0x58uLL);
          v91[21] = v91[21] & 0x38000000 | 2;
          uint64_t v18 = (uint64_t)(v91 + 16);
          *(void *)unsigned int v91 = 0;
          *((void *)v91 + 1) = 0;
          *((void *)v91 + 2) = 0;
          *((void *)v91 + 3) = v91 + 16;
          *((void *)v91 + 4) = 0;
          *((void *)v91 + 5) = 0;
          *((void *)v91 + 6) = 0;
          *((void *)v91 + 7) = v91 + 16;
          sub_1CD5AA744((uint64_t)(v91 + 16), v29, (void *)*v31, v31[1], v30);
          goto LABEL_43;
        }
        uint64_t v36 = operator new(0x38uLL);
        uint64_t v18 = (uint64_t)(v36 + 4);
        v36[1] = 0;
        v36[2] = 0;
        v36[3] = v36 + 4;
        uint64_t v37 = *v31;
        v36[4] = a2;
        v36[5] = 0;
        *((unsigned char *)v36 + 48) = 5;
        *((unsigned char *)v36 + 49) = 0;
        *((_DWORD *)v36 + 13) = 1;
        *((_WORD *)v36 + 25) = v29;
        *uint64_t v36 = v37;
        if (!v37) {
          goto LABEL_43;
        }
        uint64_t v40 = *(void *)(v37 + 8);
        uint64_t v38 = (void *)(v37 + 8);
        uint64_t v39 = v40;
        v36[1] = v40;
        uint64_t v41 = (uint64_t)v93;
        if (v40) {
          *(void *)(v39 + 16) = v36 + 1;
        }
        v36[2] = v38;
        *uint64_t v38 = v36;
        break;
    }
  }
  int v51 = *(_DWORD *)(v41 + 16);
  if (v51)
  {
    int v52 = 0;
    uint64_t v53 = *(void *)v41;
    int v54 = v51 - 1;
    for (int j = 1; ; ++j)
    {
      unsigned int v56 = v11 & v54;
      uint64_t v57 = *(void *)(v53 + 8 * (v11 & v54));
      if (v57 == -4096) {
        break;
      }
      if (v57 != -8192 && *(void *)&v95[8] == *(void *)v57)
      {
        int v58 = v95[16];
        if (*(_WORD *)(v57 + 18) == v95[16]
          && v95[17] == *(unsigned __int8 *)(v57 + 17) >> 1
          && *((void *)&v96 + 1) == (*(_DWORD *)(v57 + 20) & 0x7FFFFFF))
        {
          int v59 = v95[16] - 53 <= 1 ? *(unsigned __int16 *)(v57 + 24) : 0;
          if (v59 == *(unsigned __int16 *)&v95[18])
          {
            uint64_t v60 = DWORD2(v96);
            if (DWORD2(v96))
            {
              unint64_t v61 = (void *)v96;
              unsigned int v62 = (void *)(v57 - 32 * *((void *)&v96 + 1));
              while (*v61 == *v62)
              {
                v62 += 4;
                ++v61;
                if (!--v60) {
                  goto LABEL_59;
                }
              }
            }
            else
            {
LABEL_59:
              if ((v95[16] & 0xFE) == 0x40)
              {
                __int16 v64 = *(const void **)(v57 + 24);
                unsigned int v63 = (void *)*(unsigned int *)(v57 + 32);
              }
              else
              {
                unsigned int v63 = 0;
                __int16 v64 = 0;
              }
              if (__s1[1] == v63 && !memcmp(__s1[0], v64, 4 * (uint64_t)__s1[1]))
              {
                if (v58 == 63)
                {
                  unsigned int v66 = *(const void **)(v57 + 24);
                  uint64_t v65 = (void *)*(unsigned int *)(v57 + 32);
                }
                else
                {
                  uint64_t v65 = 0;
                  unsigned int v66 = 0;
                }
                if (v98[1] == v65 && !memcmp(v98[0], v66, 4 * (uint64_t)v98[1]))
                {
                  uint64_t v67 = v58 == 34 ? *(void *)(v57 + 24) : 0;
                  if (v99 == v67) {
                    return v18;
                  }
                }
              }
            }
          }
        }
      }
      if (v52) {
        BOOL v68 = 0;
      }
      else {
        BOOL v68 = v57 == -8192;
      }
      if (v68) {
        int v52 = (uint64_t *)(v53 + 8 * v56);
      }
      unsigned int v11 = v56 + j;
    }
    if (v52) {
      uint64_t v69 = v52;
    }
    else {
      uint64_t v69 = (uint64_t *)(v53 + 8 * v56);
    }
    uint64_t v41 = (uint64_t)v93;
  }
  else
  {
    uint64_t v69 = 0;
  }
  *sub_1CC574178(v41, (uint64_t)v95, v69) = v18;
  return v18;
}

llvm::detail::IEEEFloat *llvm::ConstantExpr::getAlignOf(uint64_t **this, llvm::Type *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = **this;
  char v4 = *(uint64_t **)(v3 + 1888);
  uint64_t v23 = (void *)(v3 + 1888);
  uint64_t v24 = (llvm::ConstantExpr *)this;
  int v5 = (llvm::PointerType *)llvm::StructType::get(v4, (uint64_t)&v23, 2, 0);
  long long v6 = (llvm::Constant *)llvm::PointerType::get(v5, 0);
  uint64_t NullValue = (uint64_t *)llvm::Constant::getNullValue(v6, v7, v8);
  uint64_t v11 = **this;
  int v12 = *(llvm::ConstantInt **)(v11 + 1984);
  unsigned int v13 = *(_DWORD *)(v11 + 1992);
  LODWORD(v24) = v13 >> 8;
  if (v13 >> 8 > 0x40) {
    operator new[]();
  }
  uint64_t v23 = 0;
  int v15 = llvm::ConstantInt::get(v12, (llvm::LLVMContext *)&v23, v9);
  if (v24 >= 0x41 && v23) {
    MEMORY[0x1D25D9CB0](v23, 0x1000C8000313F17);
  }
  uint64_t v16 = **this;
  int v17 = *(llvm::ConstantInt **)(v16 + 1960);
  unint64_t v18 = *(unsigned int *)(v16 + 1968);
  LODWORD(v24) = v18 >> 8;
  if (v18 >> 8 > 0x40) {
    operator new[]();
  }
  if (v18 <= 0xFF) {
    LOBYTE(v19) = 0;
  }
  else {
    unint64_t v19 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v18) + 63);
  }
  uint64_t v23 = (void *)(v19 & 1);
  int v20 = (llvm::ConstantExpr *)llvm::ConstantInt::get(v17, (llvm::LLVMContext *)&v23, v14);
  if (v24 >= 0x41 && v23) {
    MEMORY[0x1D25D9CB0](v23, 0x1000C8000313F17);
  }
  uint64_t v23 = v15;
  uint64_t v24 = v20;
  uint64_t ElementPtr = (llvm::detail::IEEEFloat *)llvm::ConstantExpr::getGetElementPtr((uint64_t)v5, NullValue, (uint64_t)&v23, 2, 0, 0, 0);
  return sub_1CC56C0C0((llvm *)0x2F, ElementPtr, (llvm::Constant *)(**this + 1984), 0);
}

llvm::detail::IEEEFloat *llvm::ConstantExpr::getOffsetOf(llvm::ConstantExpr *this, llvm::StructType *a2, const llvm::APInt *a3)
{
  uint64_t v4 = **(void **)this;
  int v5 = *(llvm::ConstantInt **)(v4 + 1960);
  unint64_t v6 = *(unsigned int *)(v4 + 1968);
  unsigned int v12 = v6 >> 8;
  if (v6 >> 8 > 0x40) {
    operator new[]();
  }
  if (v6 <= 0xFF) {
    LODWORD(v7) = 0;
  }
  else {
    unint64_t v7 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v6) + 63);
  }
  uint64_t v11 = v7 & a2;
  unint64_t v9 = (llvm::Type *)llvm::ConstantInt::get(v5, (llvm::LLVMContext *)&v11, a3);
  if (v12 >= 0x41 && v11) {
    MEMORY[0x1D25D9CB0](v11, 0x1000C8000313F17);
  }
  return llvm::ConstantExpr::getOffsetOf(this, v9, v8);
}

llvm::detail::IEEEFloat *llvm::ConstantExpr::getOffsetOf(llvm::ConstantExpr *this, llvm::Type *a2, llvm::Constant *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = **(void **)this;
  unint64_t v6 = *(llvm::ConstantInt **)(v5 + 1984);
  unsigned int v7 = *(_DWORD *)(v5 + 1992);
  LODWORD(v16) = v7 >> 8;
  if (v7 >> 8 > 0x40) {
    operator new[]();
  }
  int v15 = 0;
  int v8 = llvm::ConstantInt::get(v6, (llvm::LLVMContext *)&v15, a3);
  if (v16 >= 0x41 && v15) {
    MEMORY[0x1D25D9CB0](v15, 0x1000C8000313F17);
  }
  int v15 = v8;
  uint64_t v16 = a2;
  unint64_t v9 = (llvm::Constant *)llvm::PointerType::get(this, 0);
  uint64_t NullValue = (uint64_t *)llvm::Constant::getNullValue(v9, v10, v11);
  uint64_t ElementPtr = (llvm::detail::IEEEFloat *)llvm::ConstantExpr::getGetElementPtr((uint64_t)this, NullValue, (uint64_t)&v15, 2, 0, 0, 0);
  return sub_1CC56C0C0((llvm *)0x2F, ElementPtr, (llvm::Constant *)(**(void **)this + 1984), 0);
}

uint64_t llvm::ConstantExpr::getFCmp(llvm::ConstantExpr *this, uint64_t ***a2, llvm::Constant *a3, llvm::Constant *a4)
{
  char v4 = (char)a4;
  __int16 v7 = (__int16)this;
  void v19[2] = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::ConstantFoldCompareInstruction();
  if (!result && (v4 & 1) == 0)
  {
    v19[0] = a2;
    v19[1] = a3;
    uint64_t v9 = ***a2;
    unint64_t v10 = (uint64_t **)(v9 + 1888);
    if (((*a2)[1] & 0xFE) == 0x12)
    {
      uint64_t v11 = (llvm::Type *)*((unsigned int *)*a2 + 8);
      if (*((_DWORD *)*a2 + 2) == 19) {
        llvm::ScalableVectorType::get(v10, v11);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v10, v11);
      }
      unint64_t v10 = v12;
      uint64_t v9 = ***a2;
    }
    v13[0] = 54;
    v13[1] = v7;
    unsigned int v14 = v19;
    uint64_t v15 = 2;
    long long v16 = 0u;
    long long v17 = 0u;
    uint64_t v18 = 0;
    return sub_1CC56C20C(v9 + 1512, (uint64_t)v10, (unsigned __int8 *)v13);
  }
  return result;
}

uint64_t llvm::ConstantExpr::getGetElementPtr(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t **a7)
{
  uint64_t v11 = (uint64_t **)a3;
  uint64_t v14 = *a2;
  if ((*(_DWORD *)(*a2 + 8) & 0xFE) == 0x12) {
    uint64_t v14 = **(void **)(v14 + 16);
  }
  uint64_t ElementPtr = (uint64_t)llvm::ConstantFoldGetElementPtr(a1, a2, a5, a6, a3, a4);
  if (!ElementPtr)
  {
    IndexedType = (llvm::PointerType *)llvm::GetElementPtrInst::getIndexedType(a1, (uint64_t)v11, a4);
    uint64_t v18 = (llvm::Type *)(*(_DWORD *)(v14 + 8) >> 8);
    if (*(void *)(v14 + 24)) {
      unint64_t v19 = (uint64_t **)llvm::PointerType::get(IndexedType, v18);
    }
    else {
      unint64_t v19 = (uint64_t **)llvm::PointerType::get(*(uint64_t ***)v14, v18);
    }
    uint64_t v20 = *a2;
    uint64_t v53 = a2;
    uint64_t v50 = a6;
    if (*a2 && (*(_DWORD *)(v20 + 8) & 0xFE) == 0x12)
    {
      uint64_t v21 = (llvm::Type *)*(unsigned int *)(v20 + 32);
      uint64_t v22 = *(_DWORD *)(v20 + 8) == 19;
    }
    else
    {
      uint64_t v22 = 0;
      uint64_t v21 = 0;
      if (!a4) {
        goto LABEL_22;
      }
      uint64_t v23 = 8 * a4;
      uint64_t v24 = v11;
      do
      {
        uint64_t v25 = **v24;
        if (v25) {
          BOOL v26 = (*(_DWORD *)(v25 + 8) & 0xFE) == 18;
        }
        else {
          BOOL v26 = 0;
        }
        if (v26)
        {
          uint64_t v21 = (llvm::Type *)*(unsigned int *)(v25 + 32);
          uint64_t v22 = *(_DWORD *)(v25 + 8) == 19;
        }
        ++v24;
        v23 -= 8;
      }
      while (v23);
    }
    if (v21)
    {
      if (v22 == 1)
      {
        llvm::ScalableVectorType::get(v19, v21);
        char v27 = 0;
        uint64_t v22 = 1;
      }
      else
      {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v19, v21);
        char v27 = 0;
      }
      goto LABEL_23;
    }
LABEL_22:
    char v27 = 1;
LABEL_23:
    if (v19 == a7) {
      return 0;
    }
    char v49 = a5;
    unint64_t v28 = a4 + 1;
    uint64_t v51 = a1;
    uint64_t v48 = (uint64_t)v19;
    if (a4 == -1)
    {
      uint64_t v46 = (char *)operator new(8uLL);
      uint64_t v47 = a1;
      char v30 = v46;
      *(void *)uint64_t v46 = v53;
      int v31 = v46 + 8;
      unint64_t v61 = v11;
      uint64_t v62 = v47 | 4;
      __int16 v32 = v46 + 8;
    }
    else
    {
      if (v28 >> 61) {
LABEL_64:
      }
        abort();
      int v29 = (char *)operator new(8 * v28);
      char v30 = v29;
      *(void *)int v29 = v53;
      int v31 = v29 + 8;
      unint64_t v61 = v11;
      uint64_t v62 = v51 | 4;
      if (!a4)
      {
LABEL_54:
        BOOL v43 = v50 >= 0x3F || (v50 & 0xFF00000000) == 0;
        char v44 = 2 * v50 + 2;
        uint64_t v45 = **(void **)*v53;
        if (v43) {
          char v44 = 0;
        }
        v54[0] = 34;
        v54[1] = v44 | v49;
        __int16 v55 = 0;
        unsigned int v56 = v30;
        uint64_t v57 = (v31 - v30) >> 3;
        long long v58 = 0u;
        long long v59 = 0u;
        uint64_t v60 = v51;
        uint64_t ElementPtr = sub_1CC56C20C(v45 + 1512, v48, v54);
        if (v30) {
          operator delete(v30);
        }
        return ElementPtr;
      }
      __int16 v32 = &v29[8 * v28];
    }
    char v33 = &v11[a4];
    unint64_t v52 = v21 | (unint64_t)(v22 << 32);
    uint64_t v34 = v31;
    while (1)
    {
      uint64_t v35 = (llvm::Constant *)*v11;
      if ((v62 & 4) != 0) {
        break;
      }
      if ((*(_DWORD *)(*(void *)v35 + 8) & 0xFE) == 0x12)
      {
        SplatValue = (llvm::Constant *)llvm::Constant::getSplatValue(v35, 0);
LABEL_35:
        uint64_t v35 = SplatValue;
      }
LABEL_36:
      if (v34 >= v32)
      {
        uint64_t v37 = (v34 - v30) >> 3;
        unint64_t v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 61) {
          goto LABEL_64;
        }
        if ((v32 - v30) >> 2 > v38) {
          unint64_t v38 = (v32 - v30) >> 2;
        }
        if ((unint64_t)(v32 - v30) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v38;
        }
        if (v39)
        {
          if (v39 >> 61) {
            sub_1CB833614();
          }
          uint64_t v40 = (char *)operator new(8 * v39);
        }
        else
        {
          uint64_t v40 = 0;
        }
        uint64_t v41 = (llvm::Constant **)&v40[8 * v37];
        __int16 v32 = &v40[8 * v39];
        *uint64_t v41 = v35;
        int v31 = (char *)(v41 + 1);
        if (v34 == v30) {
          goto LABEL_51;
        }
        do
        {
          uint64_t v42 = (llvm::Constant *)*((void *)v34 - 1);
          v34 -= 8;
          *--uint64_t v41 = v42;
        }
        while (v34 != v30);
        if (v30) {
LABEL_51:
        }
          operator delete(v30);
        char v30 = (char *)v41;
      }
      else
      {
        *(void *)uint64_t v34 = v35;
        int v31 = v34 + 8;
      }
      sub_1CB90797C((uint64_t)&v61);
      uint64_t v11 = v61;
      uint64_t v34 = v31;
      if (v61 == v33) {
        goto LABEL_54;
      }
    }
    if ((v27 & 1) != 0 || (*(_DWORD *)(*(void *)v35 + 8) & 0xFE) == 0x12) {
      goto LABEL_36;
    }
    SplatValue = (llvm::Constant *)llvm::ConstantVector::getSplat(v52, v35);
    goto LABEL_35;
  }
  return ElementPtr;
}

const llvm::detail::DoubleAPFloat *llvm::ConstantExpr::getNeg(llvm::ConstantExpr *this, llvm::Constant *a2, const llvm::APFloat *a3)
{
  int v3 = (int)a3;
  char v4 = (char)a2;
  v22[2] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)this;
  if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12) {
    unsigned int v7 = *(unsigned __int8 *)(**(void **)(v6 + 16) + 8);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 8);
  }
  if (v7 <= 6) {
    Zero = llvm::ConstantFP::getZero((llvm::ConstantFP *)v6, (llvm::Type *)1, a3);
  }
  else {
    Zero = llvm::Constant::getNullValue((llvm::Constant *)v6, a2, a3);
  }
  unint64_t v10 = Zero;
  if (v3) {
    char v11 = 2;
  }
  else {
    char v11 = 0;
  }
  uint64_t result = llvm::ConstantFoldBinaryInstruction((llvm *)0xF, Zero, this, v9);
  if (!result)
  {
    unsigned int v13 = *(void ***)v10;
    if (*(void *)v10)
    {
      v22[0] = v10;
      v22[1] = this;
      uint64_t v14 = **v13 + 1512;
      v15[0] = 15;
      v15[1] = v11 | v4;
      __int16 v16 = 0;
      long long v17 = v22;
      uint64_t v18 = 2;
      long long v19 = 0u;
      long long v20 = 0u;
      uint64_t v21 = 0;
      return (const llvm::detail::DoubleAPFloat *)sub_1CC56C20C(v14, (uint64_t)v13, v15);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

const llvm::detail::DoubleAPFloat *llvm::ConstantExpr::getSub(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  char v4 = (char)a3;
  v18[2] = *MEMORY[0x1E4F143B8];
  if (a4) {
    char v7 = 2;
  }
  else {
    char v7 = 0;
  }
  uint64_t result = llvm::ConstantFoldBinaryInstruction((llvm *)0xF, this, a2, a4);
  if (!result)
  {
    uint64_t v9 = *(void ***)this;
    if (*(void *)this)
    {
      v18[0] = this;
      v18[1] = a2;
      uint64_t v10 = **v9 + 1512;
      v11[0] = 15;
      v11[1] = v7 | v4;
      __int16 v12 = 0;
      unsigned int v13 = v18;
      uint64_t v14 = 2;
      long long v15 = 0u;
      long long v16 = 0u;
      uint64_t v17 = 0;
      return (const llvm::detail::DoubleAPFloat *)sub_1CC56C20C(v10, (uint64_t)v9, v11);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

const llvm::detail::DoubleAPFloat *llvm::ConstantExpr::getNot(llvm::Constant **this, llvm::Constant *a2, const llvm::APInt *a3)
{
  unsigned __int8 v15[2] = *MEMORY[0x1E4F143B8];
  uint64_t AllOnesValue = (llvm::Constant *)llvm::Constant::getAllOnesValue(*this, a2, a3);
  uint64_t result = llvm::ConstantFoldBinaryInstruction((llvm *)0x1E, (llvm::Constant *)this, AllOnesValue, v5);
  if (!result)
  {
    char v7 = *this;
    if (*this)
    {
      v15[0] = this;
      v15[1] = AllOnesValue;
      uint64_t v8 = **(void **)v7 + 1512;
      v9[0] = 30;
      v9[1] = 0;
      uint64_t v10 = v15;
      uint64_t v11 = 2;
      long long v12 = 0u;
      long long v13 = 0u;
      uint64_t v14 = 0;
      return (const llvm::detail::DoubleAPFloat *)sub_1CC56C20C(v8, (uint64_t)v7, (unsigned __int8 *)v9);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

const llvm::detail::DoubleAPFloat *llvm::ConstantExpr::getAdd(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  char v4 = (char)a3;
  v18[2] = *MEMORY[0x1E4F143B8];
  if (a4) {
    char v7 = 2;
  }
  else {
    char v7 = 0;
  }
  uint64_t result = llvm::ConstantFoldBinaryInstruction((llvm *)0xD, this, a2, a4);
  if (!result)
  {
    uint64_t v9 = *(void ***)this;
    if (*(void *)this)
    {
      v18[0] = this;
      v18[1] = a2;
      uint64_t v10 = **v9 + 1512;
      v11[0] = 13;
      v11[1] = v7 | v4;
      __int16 v12 = 0;
      long long v13 = v18;
      uint64_t v14 = 2;
      long long v15 = 0u;
      long long v16 = 0u;
      uint64_t v17 = 0;
      return (const llvm::detail::DoubleAPFloat *)sub_1CC56C20C(v10, (uint64_t)v9, v11);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

const llvm::detail::DoubleAPFloat *llvm::ConstantExpr::getFAdd(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  unsigned __int8 v15[2] = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::ConstantFoldBinaryInstruction((llvm *)0xE, this, a2, a4);
  if (!result)
  {
    char v7 = *(void ***)this;
    if (*(void *)this)
    {
      v15[0] = this;
      v15[1] = a2;
      uint64_t v8 = **v7 + 1512;
      v9[0] = 14;
      v9[1] = 0;
      uint64_t v10 = v15;
      uint64_t v11 = 2;
      long long v12 = 0u;
      long long v13 = 0u;
      uint64_t v14 = 0;
      return (const llvm::detail::DoubleAPFloat *)sub_1CC56C20C(v8, (uint64_t)v7, (unsigned __int8 *)v9);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

const llvm::detail::DoubleAPFloat *llvm::ConstantExpr::getFSub(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  unsigned __int8 v15[2] = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::ConstantFoldBinaryInstruction((llvm *)0x10, this, a2, a4);
  if (!result)
  {
    char v7 = *(void ***)this;
    if (*(void *)this)
    {
      v15[0] = this;
      v15[1] = a2;
      uint64_t v8 = **v7 + 1512;
      v9[0] = 16;
      v9[1] = 0;
      uint64_t v10 = v15;
      uint64_t v11 = 2;
      long long v12 = 0u;
      long long v13 = 0u;
      uint64_t v14 = 0;
      return (const llvm::detail::DoubleAPFloat *)sub_1CC56C20C(v8, (uint64_t)v7, (unsigned __int8 *)v9);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

const llvm::detail::DoubleAPFloat *llvm::ConstantExpr::getMul(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  char v4 = (char)a3;
  v18[2] = *MEMORY[0x1E4F143B8];
  if (a4) {
    char v7 = 2;
  }
  else {
    char v7 = 0;
  }
  uint64_t result = llvm::ConstantFoldBinaryInstruction((llvm *)0x11, this, a2, a4);
  if (!result)
  {
    uint64_t v9 = *(void ***)this;
    if (*(void *)this)
    {
      v18[0] = this;
      v18[1] = a2;
      uint64_t v10 = **v9 + 1512;
      v11[0] = 17;
      v11[1] = v7 | v4;
      __int16 v12 = 0;
      long long v13 = v18;
      uint64_t v14 = 2;
      long long v15 = 0u;
      long long v16 = 0u;
      uint64_t v17 = 0;
      return (const llvm::detail::DoubleAPFloat *)sub_1CC56C20C(v10, (uint64_t)v9, v11);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

const llvm::detail::DoubleAPFloat *llvm::ConstantExpr::getFMul(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  unsigned __int8 v15[2] = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::ConstantFoldBinaryInstruction((llvm *)0x12, this, a2, a4);
  if (!result)
  {
    char v7 = *(void ***)this;
    if (*(void *)this)
    {
      v15[0] = this;
      v15[1] = a2;
      uint64_t v8 = **v7 + 1512;
      v9[0] = 18;
      v9[1] = 0;
      uint64_t v10 = v15;
      uint64_t v11 = 2;
      long long v12 = 0u;
      long long v13 = 0u;
      uint64_t v14 = 0;
      return (const llvm::detail::DoubleAPFloat *)sub_1CC56C20C(v8, (uint64_t)v7, (unsigned __int8 *)v9);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

const llvm::detail::DoubleAPFloat *llvm::ConstantExpr::getUDiv(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  unsigned __int8 v4 = a3;
  v17[2] = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::ConstantFoldBinaryInstruction((llvm *)0x13, this, a2, a4);
  if (!result)
  {
    uint64_t v8 = *(void ***)this;
    if (*(void *)this)
    {
      v17[0] = this;
      v17[1] = a2;
      uint64_t v9 = **v8 + 1512;
      v10[0] = 19;
      v10[1] = v4;
      __int16 v11 = 0;
      long long v12 = v17;
      uint64_t v13 = 2;
      long long v14 = 0u;
      long long v15 = 0u;
      uint64_t v16 = 0;
      return (const llvm::detail::DoubleAPFloat *)sub_1CC56C20C(v9, (uint64_t)v8, v10);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

const llvm::detail::DoubleAPFloat *llvm::ConstantExpr::getSDiv(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  unsigned __int8 v4 = a3;
  v17[2] = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::ConstantFoldBinaryInstruction((llvm *)0x14, this, a2, a4);
  if (!result)
  {
    uint64_t v8 = *(void ***)this;
    if (*(void *)this)
    {
      v17[0] = this;
      v17[1] = a2;
      uint64_t v9 = **v8 + 1512;
      v10[0] = 20;
      v10[1] = v4;
      __int16 v11 = 0;
      long long v12 = v17;
      uint64_t v13 = 2;
      long long v14 = 0u;
      long long v15 = 0u;
      uint64_t v16 = 0;
      return (const llvm::detail::DoubleAPFloat *)sub_1CC56C20C(v9, (uint64_t)v8, v10);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

const llvm::detail::DoubleAPFloat *llvm::ConstantExpr::getFDiv(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  unsigned __int8 v15[2] = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::ConstantFoldBinaryInstruction((llvm *)0x15, this, a2, a4);
  if (!result)
  {
    char v7 = *(void ***)this;
    if (*(void *)this)
    {
      v15[0] = this;
      v15[1] = a2;
      uint64_t v8 = **v7 + 1512;
      v9[0] = 21;
      v9[1] = 0;
      uint64_t v10 = v15;
      uint64_t v11 = 2;
      long long v12 = 0u;
      long long v13 = 0u;
      uint64_t v14 = 0;
      return (const llvm::detail::DoubleAPFloat *)sub_1CC56C20C(v8, (uint64_t)v7, (unsigned __int8 *)v9);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

const llvm::detail::DoubleAPFloat *llvm::ConstantExpr::getURem(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  unsigned __int8 v15[2] = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::ConstantFoldBinaryInstruction((llvm *)0x16, this, a2, a4);
  if (!result)
  {
    char v7 = *(void ***)this;
    if (*(void *)this)
    {
      v15[0] = this;
      v15[1] = a2;
      uint64_t v8 = **v7 + 1512;
      v9[0] = 22;
      v9[1] = 0;
      uint64_t v10 = v15;
      uint64_t v11 = 2;
      long long v12 = 0u;
      long long v13 = 0u;
      uint64_t v14 = 0;
      return (const llvm::detail::DoubleAPFloat *)sub_1CC56C20C(v8, (uint64_t)v7, (unsigned __int8 *)v9);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

const llvm::detail::DoubleAPFloat *llvm::ConstantExpr::getSRem(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  unsigned __int8 v15[2] = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::ConstantFoldBinaryInstruction((llvm *)0x17, this, a2, a4);
  if (!result)
  {
    char v7 = *(void ***)this;
    if (*(void *)this)
    {
      v15[0] = this;
      v15[1] = a2;
      uint64_t v8 = **v7 + 1512;
      v9[0] = 23;
      v9[1] = 0;
      uint64_t v10 = v15;
      uint64_t v11 = 2;
      long long v12 = 0u;
      long long v13 = 0u;
      uint64_t v14 = 0;
      return (const llvm::detail::DoubleAPFloat *)sub_1CC56C20C(v8, (uint64_t)v7, (unsigned __int8 *)v9);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::ConstantExpr::getAnd(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  unsigned __int8 v15[2] = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::ConstantFoldBinaryInstruction((llvm *)0x1C, this, a2, a4);
  if (!result)
  {
    char v7 = *(void ***)this;
    if (*(void *)this)
    {
      v15[0] = this;
      v15[1] = a2;
      uint64_t v8 = **v7 + 1512;
      v9[0] = 28;
      v9[1] = 0;
      uint64_t v10 = v15;
      uint64_t v11 = 2;
      long long v12 = 0u;
      long long v13 = 0u;
      uint64_t v14 = 0;
      return sub_1CC56C20C(v8, (uint64_t)v7, (unsigned __int8 *)v9);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

const llvm::detail::DoubleAPFloat *llvm::ConstantExpr::getOr(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  unsigned __int8 v15[2] = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::ConstantFoldBinaryInstruction((llvm *)0x1D, this, a2, a4);
  if (!result)
  {
    char v7 = *(void ***)this;
    if (*(void *)this)
    {
      v15[0] = this;
      v15[1] = a2;
      uint64_t v8 = **v7 + 1512;
      v9[0] = 29;
      v9[1] = 0;
      uint64_t v10 = v15;
      uint64_t v11 = 2;
      long long v12 = 0u;
      long long v13 = 0u;
      uint64_t v14 = 0;
      return (const llvm::detail::DoubleAPFloat *)sub_1CC56C20C(v8, (uint64_t)v7, (unsigned __int8 *)v9);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::ConstantExpr::getXor(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  unsigned __int8 v15[2] = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::ConstantFoldBinaryInstruction((llvm *)0x1E, this, a2, a4);
  if (!result)
  {
    char v7 = *(void ***)this;
    if (*(void *)this)
    {
      v15[0] = this;
      v15[1] = a2;
      uint64_t v8 = **v7 + 1512;
      v9[0] = 30;
      v9[1] = 0;
      uint64_t v10 = v15;
      uint64_t v11 = 2;
      long long v12 = 0u;
      long long v13 = 0u;
      uint64_t v14 = 0;
      return sub_1CC56C20C(v8, (uint64_t)v7, (unsigned __int8 *)v9);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

const llvm::detail::DoubleAPFloat *llvm::ConstantExpr::getShl(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  char v4 = (char)a3;
  v18[2] = *MEMORY[0x1E4F143B8];
  if (a4) {
    char v7 = 2;
  }
  else {
    char v7 = 0;
  }
  uint64_t result = llvm::ConstantFoldBinaryInstruction((llvm *)0x19, this, a2, a4);
  if (!result)
  {
    uint64_t v9 = *(void ***)this;
    if (*(void *)this)
    {
      v18[0] = this;
      v18[1] = a2;
      uint64_t v10 = **v9 + 1512;
      v11[0] = 25;
      v11[1] = v7 | v4;
      __int16 v12 = 0;
      long long v13 = v18;
      uint64_t v14 = 2;
      long long v15 = 0u;
      long long v16 = 0u;
      uint64_t v17 = 0;
      return (const llvm::detail::DoubleAPFloat *)sub_1CC56C20C(v10, (uint64_t)v9, v11);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::ConstantExpr::getLShr(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  unsigned __int8 v4 = a3;
  v17[2] = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::ConstantFoldBinaryInstruction((llvm *)0x1A, this, a2, a4);
  if (!result)
  {
    uint64_t v8 = *(void ***)this;
    if (*(void *)this)
    {
      v17[0] = this;
      v17[1] = a2;
      uint64_t v9 = **v8 + 1512;
      v10[0] = 26;
      v10[1] = v4;
      __int16 v11 = 0;
      __int16 v12 = v17;
      uint64_t v13 = 2;
      long long v14 = 0u;
      long long v15 = 0u;
      uint64_t v16 = 0;
      return sub_1CC56C20C(v9, (uint64_t)v8, v10);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

llvm::Value *llvm::ConstantExpr::getExactLogBase2(llvm::ConstantExpr *this, llvm::Constant *a2)
{
  v34[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)this;
  int v31 = 0;
  __int16 v32 = &v31;
  uint64_t v33 = 0;
  if (!sub_1CBF5295C((uint64_t)&v32, this)) {
    goto LABEL_5;
  }
  uint64_t v5 = v31;
  if (*((_DWORD *)v31 + 2) <= 0x40u)
  {
    if (!*(void *)v31 || (*(void *)v31 & (*(void *)v31 - 1)) != 0) {
      goto LABEL_5;
    }
LABEL_26:
    unsigned int v17 = *((_DWORD *)v5 + 2);
    if (v17 > 0x40) {
      int v18 = llvm::APInt::countLeadingZerosSlowCase(v5);
    }
    else {
      int v18 = v17 + __clz(*(void *)v5) - 64;
    }
    uint64_t v19 = v17 + ~v18;
    unsigned int v20 = *(_DWORD *)(v3 + 8);
    uint64_t v21 = v3;
    if ((v20 & 0xFE) == 0x12)
    {
      uint64_t v21 = **(void **)(v3 + 16);
      unsigned int v20 = *(_DWORD *)(v21 + 8);
    }
    uint64_t v22 = *(llvm::ConstantInt **)v21;
    LODWORD(v33) = v20 >> 8;
    if (v20 >> 8 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v32);
    }
    if (v20 <= 0xFF) {
      unint64_t v23 = 0;
    }
    else {
      unint64_t v23 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v20);
    }
    __int16 v32 = (void *)(v23 & v19);
    char v7 = llvm::ConstantInt::get(v22, (llvm::LLVMContext *)&v32, v4);
    if (v33 >= 0x41 && v32) {
      MEMORY[0x1D25D9CB0](v32, 0x1000C8000313F17);
    }
    if ((*(_DWORD *)(v3 + 8) & 0xFE) == 0x12) {
      return llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v3 + 32) | ((unint64_t)(*(_DWORD *)(v3 + 8) == 19) << 32)), (uint64_t)v7);
    }
    return (llvm::Value *)v7;
  }
  if (llvm::APInt::countPopulationSlowCase((uint64_t)v31) == 1) {
    goto LABEL_26;
  }
LABEL_5:
  if (*(unsigned char *)(v3 + 8) != 18 || v3 == 0) {
    return 0;
  }
  __int16 v32 = v34;
  uint64_t v33 = 0x400000000;
  int v29 = (llvm::ConstantInt *)v3;
  int v9 = *(_DWORD *)(v3 + 32);
  if (v9)
  {
    uint64_t v10 = 0;
    do
    {
      Aggregateunsigned int Element = (unsigned __int8 *)llvm::Constant::getAggregateElement(this, v10);
      if (!AggregateElement)
      {
LABEL_20:
        char v7 = 0;
        goto LABEL_21;
      }
      uint64_t v13 = (llvm::Type *)AggregateElement;
      if (AggregateElement[16] - 11 <= 1)
      {
        uint64_t v24 = v29;
        if ((*((_DWORD *)v29 + 2) & 0xFE) == 0x12) {
          uint64_t v24 = (llvm::Constant *)**((void **)v29 + 2);
        }
        uint64_t NullValue = llvm::Constant::getNullValue(v24, v13, v12);
      }
      else
      {
        v30[0] = &v31;
        v30[1] = 0;
        if (!sub_1CBF5295C((uint64_t)v30, (llvm::Constant *)AggregateElement)) {
          goto LABEL_20;
        }
        long long v14 = v31;
        if (*((_DWORD *)v31 + 2) > 0x40u)
        {
          if (llvm::APInt::countPopulationSlowCase((uint64_t)v31) != 1) {
            goto LABEL_20;
          }
        }
        else if (!*(void *)v31 || (*(void *)v31 & (*(void *)v31 - 1)) != 0)
        {
          goto LABEL_20;
        }
        BOOL v26 = v29;
        if ((*((_DWORD *)v29 + 2) & 0xFE) == 0x12) {
          BOOL v26 = (llvm::ConstantInt *)**((void **)v29 + 2);
        }
        unsigned int v27 = *((_DWORD *)v14 + 2);
        if (v27 > 0x40) {
          int v28 = llvm::APInt::countLeadingZerosSlowCase(v14);
        }
        else {
          int v28 = v27 + __clz(*(void *)v14) - 64;
        }
        uint64_t NullValue = llvm::ConstantInt::get(v26, v27 + ~v28, 0);
      }
      if (v33 >= (unint64_t)HIDWORD(v33)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v32 + v33) = NullValue;
      long long v15 = (llvm::Type *)(v33 + 1);
      LODWORD(v33) = v33 + 1;
      uint64_t v10 = (llvm::Type *)(v10 + 1);
    }
    while (v9 != v10);
    uint64_t v16 = (llvm::FixedVectorType ***)v32;
  }
  else
  {
    long long v15 = 0;
    uint64_t v16 = (llvm::FixedVectorType ***)v34;
  }
  char v7 = llvm::ConstantVector::get(v16, v15);
LABEL_21:
  if (v32 != v34) {
    free(v32);
  }
  return (llvm::Value *)v7;
}

const llvm::detail::DoubleAPFloat *llvm::ConstantExpr::getBinOpIdentity(llvm::ConstantExpr *this, llvm::ConstantFP *a2, llvm::Type *a3, int a4)
{
  switch((int)this)
  {
    case 13:
      goto LABEL_2;
    case 14:
      return llvm::ConstantFP::getZero(a2, (llvm::Type *)(a4 ^ 1u), a3);
    case 15:
    case 16:
      goto LABEL_7;
    case 17:
      unsigned int v6 = *((_DWORD *)a2 + 2);
      char v7 = a2;
      if ((v6 & 0xFE) == 0x12)
      {
        char v7 = (llvm::ConstantFP *)**((void **)a2 + 2);
        unsigned int v6 = *((_DWORD *)v7 + 2);
      }
      uint64_t v8 = *(llvm::ConstantInt **)v7;
      unsigned int v15 = v6 >> 8;
      int v9 = (v6 >> 8) + 63;
      if (v6 >> 8 > 0x40) {
        operator new[]();
      }
      LOBYTE(v9) = ~(_BYTE)v9;
      goto LABEL_17;
    case 18:
      goto LABEL_29;
    default:
      if (this == 28)
      {
        return (const llvm::detail::DoubleAPFloat *)llvm::Constant::getAllOnesValue(a2, a2, a3);
      }
      if ((this - 29) < 2) {
        goto LABEL_2;
      }
LABEL_7:
      if ((a3 & 1) == 0) {
        return 0;
      }
      if ((this - 15) < 2 || (this - 25) < 3)
      {
LABEL_2:
        return (const llvm::detail::DoubleAPFloat *)llvm::Constant::getNullValue(a2, a2);
      }
      if (this == 21)
      {
LABEL_29:
        return llvm::ConstantFP::get((llvm::ConstantFP **)a2, a2, 1.0);
      }
      else
      {
        if ((this - 19) >= 2) {
          return 0;
        }
        unsigned int v6 = *((_DWORD *)a2 + 2);
        __int16 v12 = a2;
        if ((v6 & 0xFE) == 0x12)
        {
          __int16 v12 = (llvm::ConstantFP *)**((void **)a2 + 2);
          unsigned int v6 = *((_DWORD *)v12 + 2);
        }
        uint64_t v8 = *(llvm::ConstantInt **)v12;
        unsigned int v15 = v6 >> 8;
        if (v6 >> 8 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v14);
        }
        int v9 = -(v6 >> 8);
LABEL_17:
        unint64_t v10 = 0xFFFFFFFFFFFFFFFFLL >> v9;
        if (v6 <= 0xFF) {
          char v11 = 0;
        }
        else {
          char v11 = v10;
        }
        uint64_t v14 = v11 & 1;
        uint64_t result = (const llvm::detail::DoubleAPFloat *)llvm::ConstantInt::get(v8, (llvm::LLVMContext *)&v14, a3);
        if (v15 >= 0x41 && v14)
        {
          uint64_t v13 = result;
          MEMORY[0x1D25D9CB0](v14, 0x1000C8000313F17);
          uint64_t result = v13;
        }
        if ((*((_DWORD *)a2 + 2) & 0xFE) == 0x12) {
          return (const llvm::detail::DoubleAPFloat *)llvm::ConstantVector::getSplat(*((unsigned int *)a2 + 8) | ((unint64_t)(*((_DWORD *)a2 + 2) == 19) << 32), result);
        }
      }
      return result;
  }
}

llvm::Value *llvm::ConstantExpr::getBinOpAbsorber(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Type *a3)
{
  if (this == 28 || this == 17) {
    return llvm::Constant::getNullValue(a2, a2, a3);
  }
  if (this == 29) {
    return (llvm::Value *)llvm::Constant::getAllOnesValue(a2, a2, a3);
  }
  return 0;
}

int32x2_t sub_1CC56E990(int32x2_t *a1, uint64_t *a2)
{
  int32x2_t v3 = *a1;
  __int32 v4 = a1[2].i32[0];
  if (!v4)
  {
    uint64_t v6 = 0;
LABEL_7:
    char v7 = (uint64_t **)(*(void *)&v3 + 8 * v6);
    goto LABEL_3;
  }
  LODWORD(v6) = sub_1CC5744DC(a2) & (v4 - 1);
  char v7 = (uint64_t **)(*(void *)&v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 != a2)
  {
    int v10 = 1;
    while (v8 != (uint64_t *)-4096)
    {
      int v11 = v6 + v10++;
      uint64_t v6 = v11 & (v4 - 1);
      uint64_t v8 = *(uint64_t **)(*(void *)&v3 + 8 * v6);
      if (v8 == a2) {
        goto LABEL_7;
      }
    }
    int32x2_t v3 = *a1;
    uint64_t v6 = a1[2].u32[0];
    goto LABEL_7;
  }
LABEL_3:
  *char v7 = (uint64_t *)-8192;
  int32x2_t result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

const char *llvm::ConstantExpr::getOpcodeName(llvm::ConstantExpr *this)
{
  return llvm::Instruction::getOpcodeName((llvm::Instruction *)*((unsigned __int16 *)this + 9));
}

uint64_t llvm::GetElementPtrConstantExpr::GetElementPtrConstantExpr(uint64_t result, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)int32x2_t result = a6;
  *(void *)(result + 8) = 0;
  int v6 = *(_DWORD *)(result + 20) & 0xC0000000 | (a5 + 1) & 0x7FFFFFF;
  *(_DWORD *)(result + 16) = 2228229;
  *(_DWORD *)(result + 20) = v6;
  *(void *)(result + 24) = a2;
  if (!a5)
  {
    unsigned int v16 = 1;
    goto LABEL_16;
  }
  char v7 = (unsigned int **)(a4 + 1);
  uint64_t v8 = 8 * a5 - 8;
  while (1)
  {
    if (!v8)
    {
      uint64_t v15 = a2;
      goto LABEL_15;
    }
    int v9 = *v7;
    int v10 = *(unsigned __int8 *)(a2 + 8);
    uint64_t v11 = *(void *)*v7;
    int v12 = *(_DWORD *)(v11 + 8);
    int v13 = v12 & 0xFE;
    if (!a2 || v10 != 16)
    {
      if (v13 == 18) {
        LOBYTE(v12) = *(unsigned char *)(**(void **)(v11 + 16) + 8);
      }
      if (v12 != 13) {
        goto LABEL_59;
      }
      if (!a2 || v10 != 17)
      {
        uint64_t v15 = 0;
        if (!a2 || (v10 & 0xFE) != 0x12) {
          goto LABEL_15;
        }
      }
      uint64_t v14 = (uint64_t *)(a2 + 24);
      goto LABEL_12;
    }
    int v31 = *(_DWORD *)(v11 + 8);
    if (v13 == 18) {
      int v31 = *(_DWORD *)(**(void **)(v11 + 16) + 8);
    }
    BOOL v32 = *(_DWORD *)(v11 + 8) != 19 && v31 == 8205;
    if (!v32 || (unsigned int v33 = *((unsigned __int8 *)v9 + 16), v33 > 0x14))
    {
LABEL_59:
      uint64_t v15 = 0;
      goto LABEL_15;
    }
    uint64_t v34 = *v7;
    if (v13 == 18) {
      break;
    }
LABEL_41:
    if (v33 != 16) {
      goto LABEL_59;
    }
    uint64_t v35 = v34 + 6;
    if (v34[8] >= 0x41) {
      uint64_t v35 = (void *)*v35;
    }
    if (*v35 >= (unint64_t)*(unsigned int *)(a2 + 12)) {
      goto LABEL_59;
    }
    if (*((unsigned char *)v9 + 16) != 16)
    {
      uint64_t v55 = result;
      uint64_t v47 = a2;
      uint64_t v53 = a4;
      uint64_t v57 = a5;
      uint64_t v59 = a3;
      uint64_t v49 = v8;
      uint64_t v51 = v7;
      Aggregateunsigned int Element = (unsigned int *)llvm::Constant::getAggregateElement((llvm::Constant *)v9, 0);
      uint64_t v8 = v49;
      char v7 = v51;
      a2 = v47;
      a5 = v57;
      a3 = v59;
      a4 = v53;
      int v9 = AggregateElement;
      int32x2_t result = v55;
    }
    unint64_t v38 = (unsigned int *)*((void *)v9 + 3);
    uint64_t v36 = v9 + 6;
    uint64_t v37 = v38;
    if (v36[2] >= 0x41) {
      uint64_t v36 = v37;
    }
    uint64_t v14 = (uint64_t *)(*(void *)(a2 + 16) + 8 * *v36);
LABEL_12:
    a2 = *v14;
    ++v7;
    v8 -= 8;
    if (!*v14) {
      goto LABEL_59;
    }
  }
  uint64_t v50 = v8;
  unint64_t v52 = v7;
  uint64_t v48 = a2;
  uint64_t v58 = a5;
  uint64_t v60 = a3;
  uint64_t v56 = result;
  int v54 = a4;
  uint64_t v46 = *v7;
  SplatValue = (unsigned int *)llvm::Constant::getSplatValue((llvm::Constant *)v9, 0);
  if (SplatValue)
  {
    uint64_t v34 = SplatValue;
    unsigned int v33 = *((unsigned __int8 *)SplatValue + 16);
    char v7 = v52;
    a4 = v54;
    int32x2_t result = v56;
    a5 = v58;
    a3 = v60;
    int v9 = v46;
    a2 = v48;
    uint64_t v8 = v50;
    goto LABEL_41;
  }
  uint64_t v15 = 0;
  a4 = v54;
  int32x2_t result = v56;
  LODWORD(a5) = v58;
  a3 = v60;
LABEL_15:
  unsigned int v16 = *(_DWORD *)(result + 20) & 0x7FFFFFF;
  a2 = v15;
LABEL_16:
  *(void *)(result + 32) = a2;
  uint64_t v17 = -(uint64_t)v16;
  int v18 = (void *)(result - 32 * v16);
  if (*v18)
  {
    uint64_t v40 = result + 32 * v17;
    uint64_t v42 = *(void **)(v40 + 16);
    uint64_t v41 = (void *)(v40 + 16);
    *uint64_t v42 = *(v41 - 1);
    uint64_t v43 = *(v41 - 1);
    if (v43) {
      *(void *)(v43 + 16) = *v41;
    }
  }
  void *v18 = a3;
  if (a3)
  {
    uint64_t v21 = *(void *)(a3 + 8);
    uint64_t v19 = (void *)(a3 + 8);
    uint64_t v20 = v21;
    uint64_t v22 = result + 32 * v17;
    *(void *)(v22 + 8) = v21;
    if (v21) {
      *(void *)(v20 + 16) = v22 + 8;
    }
    *(void *)(v22 + 16) = v19;
    *uint64_t v19 = v18;
  }
  int v23 = *(_DWORD *)(result + 20);
  if ((v23 & 0x40000000) != 0) {
    uint64_t v24 = *(void *)(result - 8);
  }
  else {
    uint64_t v24 = result - 32 * (v23 & 0x7FFFFFF);
  }
  if (a5)
  {
    uint64_t v25 = a5;
    uint64_t v26 = v24 + 32;
    do
    {
      uint64_t v27 = *a4;
      if (*(void *)v26)
      {
        **(void **)(v26 + 16) = *(void *)(v26 + 8);
        uint64_t v39 = *(void *)(v26 + 8);
        if (v39) {
          *(void *)(v39 + 16) = *(void *)(v26 + 16);
        }
      }
      *(void *)uint64_t v26 = v27;
      if (v27)
      {
        uint64_t v30 = *(void *)(v27 + 8);
        int v28 = (void *)(v27 + 8);
        uint64_t v29 = v30;
        *(void *)(v26 + 8) = v30;
        if (v30) {
          *(void *)(v29 + 16) = v26 + 8;
        }
        *(void *)(v26 + 16) = v28;
        *int v28 = v26;
      }
      ++a4;
      v26 += 32;
      --v25;
    }
    while (v25);
  }
  return result;
}

uint64_t llvm::GetElementPtrConstantExpr::getSourceElementType(llvm::GetElementPtrConstantExpr *this)
{
  return *((void *)this + 3);
}

uint64_t llvm::GetElementPtrConstantExpr::getResultElementType(llvm::GetElementPtrConstantExpr *this)
{
  return *((void *)this + 4);
}

uint64_t llvm::ConstantDataSequential::getElementType(llvm::ConstantDataSequential *this)
{
  return *(void *)(*(void *)this + 24);
}

uint64_t llvm::ConstantDataSequential::getRawDataValues(llvm::ConstantDataSequential *this)
{
  uint64_t v1 = *((void *)this + 3);
  llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)(*(void *)this + 24));
  if (v2 == 1) {
  return v1;
  }
}

unint64_t llvm::ConstantDataSequential::getElementByteSize(llvm::ConstantDataSequential *this)
{
  unint64_t PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)(*(void *)this + 24));
  if (v2 == 1)
  {
    unint64_t v4 = PrimitiveSizeInBits;
    unint64_t PrimitiveSizeInBits = v4;
  }
  return PrimitiveSizeInBits >> 3;
}

uint64_t llvm::ConstantDataSequential::getElementPointer(llvm::ConstantDataSequential *this, unsigned int a2)
{
  uint64_t v3 = *((void *)this + 3);
  unint64_t PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)(*(void *)this + 24));
  if (v5 == 1)
  {
    unint64_t v7 = PrimitiveSizeInBits;
    unint64_t PrimitiveSizeInBits = v7;
  }
  return v3 + (PrimitiveSizeInBits >> 3) * a2;
}

llvm::Value *llvm::ConstantDataSequential::getImpl(unsigned char *a1, llvm::Type *a2, llvm::ConstantAggregateZero *a3)
{
  if (!a2)
  {
LABEL_5:
    return (llvm::Value *)llvm::ConstantAggregateZero::get(a3, a2);
  }
  uint64_t v6 = 0;
  while (!a1[v6])
  {
    if (a2 == (llvm::Type *)++v6) {
      goto LABEL_5;
    }
  }
  uint64_t v8 = **(void **)a3;
  unsigned int v9 = *(_DWORD *)(v8 + 1416);
  if (!v9)
  {
    *(void *)(v8 + 1420) = 0;
    uint64_t v25 = v8;
    uint64_t v26 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v26) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v26[16] = 2;
    *(void *)(v25 + 1408) = v26;
    unsigned int v9 = 16;
    *(_DWORD *)(v25 + 1416) = 16;
    uint64_t v8 = v25;
  }
  int v10 = 0;
  int v11 = 0;
  uint64_t v34 = (llvm::StringMapImpl *)(v8 + 1408);
  uint64_t v35 = a3;
  do
  {
    int v11 = 33 * v11 + *((unsigned __int8 *)v10 + (void)a1);
    int v10 = (llvm::Type *)((char *)v10 + 1);
  }
  while (a2 != v10);
  uint64_t v12 = *(void *)(v8 + 1408);
  unsigned int v13 = v9 - 1;
  uint64_t v14 = v12 + 8 * v9 + 8;
  int v36 = -1;
  int v15 = 1;
  int v16 = v11;
  while (1)
  {
    uint64_t v17 = v16 & v13;
    int v18 = *(llvm::Type ***)(v12 + 8 * v17);
    if (!v18) {
      break;
    }
    if (v18 == (llvm::Type **)-8)
    {
      if (v36 == -1) {
        int v24 = v16 & v13;
      }
      else {
        int v24 = v36;
      }
      int v36 = v24;
    }
    else if (*(_DWORD *)(v14 + 4 * v17) == v11 && a2 == *v18)
    {
      uint64_t v19 = v8;
      int v20 = memcmp(a1, (char *)v18 + *(unsigned int *)(v8 + 1428), (size_t)a2);
      uint64_t v8 = v19;
      if (!v20) {
        goto LABEL_22;
      }
    }
    int v16 = v15 + v17;
    ++v15;
  }
  uint64_t v21 = v36;
  if (v36 == -1)
  {
    uint64_t v21 = v17;
    uint64_t v17 = v17;
  }
  else
  {
    uint64_t v17 = v36;
  }
  *(_DWORD *)(v14 + 4 * v21) = v11;
  int v18 = *(llvm::Type ***)(v12 + 8 * v17);
LABEL_22:
  if (v18)
  {
    if (v18 != (llvm::Type **)-8) {
      goto LABEL_24;
    }
    --*(_DWORD *)(v8 + 1424);
  }
  uint64_t v30 = v8;
  int v31 = operator new((size_t)a2 + 17, (std::align_val_t)8uLL);
  memcpy(v31 + 2, a1, (size_t)a2);
  *((unsigned char *)a2 + (void)(v31 + 2)) = 0;
  *int v31 = a2;
  v31[1] = 0;
  *(void *)(v12 + 8 * v17) = v31;
  ++*(_DWORD *)(v30 + 1420);
  for (int i = (llvm::Type ***)(*(void *)(v30 + 1408) + 8 * llvm::StringMapImpl::RehashTable(v34, v17));
        ;
        ++i)
  {
    int v18 = *i;
    if (*i && v18 + 1 != 0) {
      break;
    }
  }
LABEL_24:
  int v23 = v18 + 1;
  uint64_t v22 = v18[1];
  if (v22)
  {
    while (1)
    {
      int32x2_t result = v22;
      if (*(llvm::ConstantAggregateZero **)v22 == v35) {
        break;
      }
      uint64_t v22 = (llvm::Type *)*((void *)v22 + 4);
      if (!v22)
      {
        int v23 = (llvm::Value **)((char *)result + 32);
        goto LABEL_35;
      }
    }
  }
  else
  {
LABEL_35:
    uint64_t v27 = v18 + 2;
    if (*((unsigned char *)v35 + 8) == 17)
    {
      int32x2_t result = (llvm::Value *)operator new(0x28uLL);
      *(void *)int32x2_t result = v35;
      *((void *)result + 1) = 0;
      *((void *)result + 2) = 14;
      *((void *)result + 3) = v27;
      *((void *)result + 4) = 0;
    }
    else
    {
      int32x2_t result = (llvm::Value *)operator new(0x30uLL);
      *(void *)int32x2_t result = v35;
      *((void *)result + 1) = 0;
      *((void *)result + 2) = 15;
      *((void *)result + 3) = v27;
      *((void *)result + 4) = 0;
      *((unsigned char *)result + 40) &= ~1u;
    }
    int v28 = *v23;
    *int v23 = result;
    if (v28)
    {
      sub_1CC5747CC(v28);
      llvm::User::operator delete(v29);
      return *v23;
    }
  }
  return result;
}

llvm::Value *llvm::ConstantDataArray::getFP(llvm::ArrayType *a1, unsigned char *a2, llvm::Type *a3)
{
  uint64_t v5 = llvm::ArrayType::get(a1, a3);

  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(2 * (void)a3), v5);
}

{
  llvm::ConstantAggregateZero *v5;
  uint64_t vars8;

  uint64_t v5 = llvm::ArrayType::get(a1, a3);

  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(4 * (void)a3), v5);
}

{
  llvm::ConstantAggregateZero *v5;
  uint64_t vars8;

  uint64_t v5 = llvm::ArrayType::get(a1, a3);

  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(8 * (void)a3), v5);
}

llvm::Value *llvm::ConstantDataArray::getString(uint64_t a1, char *a2, llvm::Type *a3, char a4)
{
  unsigned char v15[8] = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    unsigned int v13 = v15;
    long long v14 = xmmword_1CD96DBD0;
    sub_1CC56F3B8(&v13, a2, (char *)a3 + (void)a2);
    if ((unint64_t)(v14 + 1) > *((void *)&v14 + 1)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *((unsigned char *)v13 + v14) = 0;
    unsigned int v9 = v13;
    int v10 = (llvm::Type *)(v14 + 1);
    *(void *)&long long v14 = v10;
    int v11 = llvm::ArrayType::get((llvm::ArrayType *)(*(void *)a1 + 1912), v10);
    uint64_t Impl = llvm::ConstantDataSequential::getImpl(v9, v10, v11);
    if (v13 != v15) {
      free(v13);
    }
    return Impl;
  }
  else
  {
    unint64_t v7 = llvm::ArrayType::get((llvm::ArrayType *)(*(void *)a1 + 1912), a3);
    return llvm::ConstantDataSequential::getImpl(a2, a3, v7);
  }
}

void *sub_1CC56F3B8(void *result, char *a2, char *a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = result[1];
  if (result[2] < (unint64_t)(v4 + a3 - a2)) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  if (a2 != a3)
  {
    uint64_t v5 = (unsigned char *)(*result + v4);
    do
    {
      char v6 = *v3++;
      *v5++ = v6;
    }
    while (v3 != a3);
    uint64_t v4 = result[1];
  }
  result[1] = v4 + a3 - a2;
  return result;
}

llvm::Value *llvm::ConstantDataVector::get(uint64_t a1, unsigned char *a2, llvm::Type *a3)
{
  llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(void *)a1 + 1912), a3);

  return llvm::ConstantDataSequential::getImpl(a2, a3, v5);
}

{
  llvm::ConstantAggregateZero *v5;
  uint64_t vars8;

  llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(void *)a1 + 1936), a3);

  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(2 * (void)a3), v5);
}

{
  llvm::ConstantAggregateZero *v5;
  uint64_t vars8;

  llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(void *)a1 + 1960), a3);

  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(4 * (void)a3), v5);
}

{
  llvm::ConstantAggregateZero *v5;
  uint64_t vars8;

  llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(void *)a1 + 1984), a3);

  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(8 * (void)a3), v5);
}

{
  llvm::ConstantAggregateZero *v5;
  uint64_t vars8;

  llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(void *)a1 + 1672), a3);

  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(4 * (void)a3), v5);
}

{
  llvm::ConstantAggregateZero *v5;
  uint64_t vars8;

  llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(void *)a1 + 1696), a3);

  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(8 * (void)a3), v5);
}

llvm::Value *llvm::ConstantDataVector::getFP(llvm::FixedVectorType *a1, unsigned char *a2, llvm::Type *a3)
{
  llvm::FixedVectorType::get(a1, a3);

  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(2 * (void)a3), v5);
}

{
  llvm::ConstantAggregateZero *v5;
  uint64_t vars8;

  llvm::FixedVectorType::get(a1, a3);

  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(4 * (void)a3), v5);
}

{
  llvm::ConstantAggregateZero *v5;
  uint64_t vars8;

  llvm::FixedVectorType::get(a1, a3);

  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(8 * (void)a3), v5);
}

uint64_t llvm::ConstantDataSequential::getElementAsInteger(llvm::ConstantDataSequential *this, unsigned int a2)
{
  uint64_t v3 = *((void *)this + 3);
  uint64_t v4 = a2;
  uint64_t v5 = *(llvm::Type **)(*(void *)this + 24);
  unint64_t PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v5);
  if (v7 == 1)
  {
    unint64_t v11 = PrimitiveSizeInBits;
    unint64_t PrimitiveSizeInBits = v11;
    uint64_t v5 = *(llvm::Type **)(*(void *)this + 24);
  }
  unint64_t v8 = (PrimitiveSizeInBits >> 3) * v4;
  HIDWORD(v9) = *((_DWORD *)v5 + 2) >> 8;
  LODWORD(v9) = HIDWORD(v9) - 8;
  switch((v9 >> 3))
  {
    case 1u:
      uint64_t result = *(unsigned __int16 *)(v3 + v8);
      break;
    case 2u:
    case 4u:
    case 5u:
    case 6u:
      __break(1u);
      JUMPOUT(0x1CC56F774);
    case 3u:
      uint64_t result = *(unsigned int *)(v3 + v8);
      break;
    case 7u:
      uint64_t result = *(void *)(v3 + v8);
      break;
    default:
      uint64_t result = *(unsigned __int8 *)(v3 + v8);
      break;
  }
  return result;
}

unint64_t llvm::ConstantDataSequential::getElementAsAPInt@<X0>(llvm::ConstantDataSequential *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *((void *)this + 3);
  uint64_t v6 = a2;
  unint64_t v7 = *(llvm::Type **)(*(void *)this + 24);
  unint64_t result = llvm::Type::getPrimitiveSizeInBits(v7);
  if (v9 == 1)
  {
    unint64_t v14 = result;
    unint64_t result = v14;
    unint64_t v7 = *(llvm::Type **)(*(void *)this + 24);
  }
  unint64_t v10 = (result >> 3) * v6;
  HIDWORD(v11) = *((_DWORD *)v7 + 2) >> 8;
  LODWORD(v11) = HIDWORD(v11) - 8;
  switch((v11 >> 3))
  {
    case 1u:
      uint64_t v12 = *(unsigned __int16 *)(v5 + v10);
      int v13 = 16;
      break;
    case 2u:
    case 4u:
    case 5u:
    case 6u:
      __break(1u);
      JUMPOUT(0x1CC56F87CLL);
    case 3u:
      uint64_t v12 = *(unsigned int *)(v5 + v10);
      int v13 = 32;
      break;
    case 7u:
      uint64_t v12 = *(void *)(v5 + v10);
      int v13 = 64;
      break;
    default:
      uint64_t v12 = *(unsigned __int8 *)(v5 + v10);
      int v13 = 8;
      break;
  }
  *(_DWORD *)(a3 + 8) = v13;
  *(void *)a3 = v12;
  return result;
}

void llvm::ConstantDataSequential::getElementAsAPFloat(llvm::ConstantDataSequential *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *((void *)this + 3);
  uint64_t v6 = a2;
  unint64_t v7 = *(llvm::Type **)(*(void *)this + 24);
  unint64_t PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v7);
  if (v9 == 1)
  {
    unint64_t v15 = PrimitiveSizeInBits;
    unint64_t PrimitiveSizeInBits = v15;
    unint64_t v7 = *(llvm::Type **)(*(void *)this + 24);
  }
  unint64_t v10 = (PrimitiveSizeInBits >> 3) * v6;
  switch(*((unsigned char *)v7 + 8))
  {
    case 1:
      unint64_t v14 = (const llvm::APInt *)*(unsigned __int16 *)(v5 + v10);
      int v17 = 16;
      int v16 = v14;
      llvm::detail::IEEEFloat::initFromBFloatAPInt((llvm::detail::IEEEFloat *)(a3 + 8), &v16);
      break;
    case 2:
      uint64_t v12 = (const llvm::APInt *)*(unsigned int *)(v5 + v10);
      int v17 = 32;
      int v16 = v12;
      llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)(a3 + 8), &v16);
      break;
    case 3:
      int v13 = *(const llvm::APInt **)(v5 + v10);
      int v17 = 64;
      int v16 = v13;
      llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)(a3 + 8), &v16);
      break;
    default:
      unint64_t v11 = (const llvm::APInt *)*(unsigned __int16 *)(v5 + v10);
      int v17 = 16;
      int v16 = v11;
      llvm::detail::IEEEFloat::initFromHalfAPInt((llvm::detail::IEEEFloat *)(a3 + 8), &v16);
      break;
  }
}

BOOL llvm::ConstantDataSequential::isString(llvm::ConstantDataSequential *this, int a2)
{
  if (*(unsigned char *)(*(void *)this + 8) != 17) {
    return 0;
  }
  return *(_DWORD *)(*(void *)(*(void *)this + 24) + 8) == 13
      && a2 == *(_DWORD *)(*(void *)(*(void *)this + 24) + 8) >> 8;
}

BOOL llvm::ConstantDataVector::isSplatData(llvm::ConstantDataVector *this)
{
  RawDataValues = (char *)llvm::ConstantDataSequential::getRawDataValues(this);
  uint64_t v3 = *(void *)this;
  unint64_t PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)(*(void *)this + 24));
  if (v5 == 1)
  {
    unint64_t v15 = PrimitiveSizeInBits;
    unint64_t PrimitiveSizeInBits = v15;
    uint64_t v3 = *(void *)this;
  }
  int v6 = *(_DWORD *)(v3 + 32);
  if (v6 == 1) {
    return 1;
  }
  unint64_t v8 = PrimitiveSizeInBits >> 3;
  size_t v9 = (PrimitiveSizeInBits >> 3);
  int v10 = v6 - 2;
  unint64_t v11 = PrimitiveSizeInBits >> 3;
  do
  {
    int v12 = memcmp(RawDataValues, &RawDataValues[v11], v9);
    BOOL result = v12 == 0;
    BOOL v14 = v10-- != 0;
    if (v12) {
      break;
    }
    LODWORD(v11) = v11 + v8;
  }
  while (v14);
  return result;
}

uint64_t llvm::ConstantDataVector::isSplat(llvm::ConstantDataVector *this)
{
  unsigned int v1 = *((unsigned __int8 *)this + 40);
  if ((v1 & 1) == 0)
  {
    *((unsigned char *)this + 40) = v1 | 1;
    if (llvm::ConstantDataVector::isSplatData(this)) {
      int v3 = 2;
    }
    else {
      int v3 = 0;
    }
    unsigned int v1 = *((unsigned char *)this + 40) & 0xFD | v3;
    *((unsigned char *)this + 40) = v1;
  }
  return (v1 >> 1) & 1;
}

uint64_t llvm::ConstantExpr::getAsInstruction(llvm::ConstantExpr *this, llvm::Instruction *a2)
{
  v84[4] = *MEMORY[0x1E4F143B8];
  int v4 = *((_DWORD *)this + 5);
  if ((v4 & 0x40000000) != 0)
  {
    int v6 = (char *)*((void *)this - 1);
    uint64_t v5 = v4 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v5 = v4 & 0x7FFFFFF;
    int v6 = (char *)this - 32 * v5;
  }
  int v82 = v84;
  uint64_t v83 = 0x400000000;
  sub_1CC27D070((uint64_t)&v82, v6, &v6[32 * v5]);
  unint64_t v7 = (uint64_t *)v82;
  unsigned int v8 = *((unsigned __int16 *)this + 9);
  if (v8 - 38 < 0xD)
  {
    uint64_t v9 = *(void *)v82;
    uint64_t v10 = *(void *)this;
    __int16 v81 = 257;
    unint64_t v11 = llvm::CastInst::Create(v8, v9, v10, v80, (uint64_t)a2);
LABEL_5:
    uint64_t v12 = (uint64_t)v11;
    goto LABEL_6;
  }
  if (v8 == 34)
  {
    uint64_t v14 = 24;
    if (*((unsigned char *)this + 16) == 62) {
      uint64_t v14 = 64;
    }
    uint64_t v15 = *(void *)((char *)this + v14);
    int v16 = (uint64_t *)((char *)v82 + 8);
    int v17 = *(uint64_t **)v82;
    char v18 = *((unsigned char *)this + 17);
    uint64_t v19 = v83 - 1;
    uint64_t v20 = v83;
    size_t v21 = 32 * v83 + 80;
    int v22 = v83 & 0x7FFFFFF;
    if ((v18 & 2) != 0)
    {
      __int16 v81 = 257;
      int v23 = operator new(v21);
      uint64_t v12 = (uint64_t)&v23[4 * v20];
      *(_DWORD *)(v12 + 20) = *(_DWORD *)(v12 + 20) & 0x38000000 | v22;
      if (v20)
      {
        do
        {
          *int v23 = 0;
          v23[1] = 0;
          v23[2] = 0;
          v23[3] = v12;
          v23 += 4;
        }
        while (v23 != (void *)v12);
      }
      sub_1CB845A7C(v15, v17, (uint64_t)v16, v19);
      *(void *)uint64_t v12 = v24;
      *(void *)(v12 + 8) = 0;
      unsigned int v25 = *(_DWORD *)(v12 + 20) & 0xC0000000 | v22;
      *(_DWORD *)(v12 + 16) = 62;
      *(_DWORD *)(v12 + 20) = v25;
      *(_OWORD *)(v12 + 24) = 0u;
      uint64_t v26 = v12 + 24;
      *(_OWORD *)(v12 + 40) = 0u;
      *(_DWORD *)(v12 + 56) = 0;
      if (a2)
      {
        uint64_t v31 = *((void *)a2 + 5);
        BOOL v32 = (uint64_t *)((char *)a2 + 24);
        *(void *)(v12 + 40) = v31;
        *(_WORD *)(v31 + 18) &= ~0x8000u;
        if ((*(unsigned char *)(v12 + 23) & 0x10) != 0)
        {
          uint64_t v37 = *(void *)(v31 + 56);
          if (v37)
          {
            unint64_t v38 = *(llvm::ValueSymbolTable **)(v37 + 104);
            if (v38) {
              llvm::ValueSymbolTable::reinsertValue(v38, (llvm::Value *)v12);
            }
          }
        }
        uint64_t v33 = *v32;
        *(void *)(v12 + 24) = *v32;
        *(void *)(v12 + 32) = v32;
        *(void *)(v33 + 8) = v26;
        *BOOL v32 = v26;
      }
      *(void *)(v12 + 64) = v15;
      *(void *)(v12 + 72) = llvm::GetElementPtrInst::getIndexedType(v15, (uint64_t)v16, v19);
      llvm::GetElementPtrInst::init((uint64_t ***)v12, (uint64_t **)v17, v16, v19, v80);
      *(unsigned char *)(v12 + 17) |= 2u;
    }
    else
    {
      __int16 v81 = 257;
      uint64_t v27 = operator new(v21);
      uint64_t v12 = (uint64_t)&v27[4 * v20];
      *(_DWORD *)(v12 + 20) = *(_DWORD *)(v12 + 20) & 0x38000000 | v22;
      if (v20)
      {
        do
        {
          *uint64_t v27 = 0;
          v27[1] = 0;
          v27[2] = 0;
          v27[3] = v12;
          v27 += 4;
        }
        while (v27 != (void *)v12);
      }
      sub_1CB845A7C(v15, v17, (uint64_t)v16, v19);
      *(void *)uint64_t v12 = v28;
      *(void *)(v12 + 8) = 0;
      unsigned int v29 = *(_DWORD *)(v12 + 20) & 0xC0000000 | v22;
      *(_DWORD *)(v12 + 16) = 62;
      *(_DWORD *)(v12 + 20) = v29;
      *(_OWORD *)(v12 + 24) = 0u;
      uint64_t v30 = v12 + 24;
      *(_OWORD *)(v12 + 40) = 0u;
      *(_DWORD *)(v12 + 56) = 0;
      if (a2)
      {
        uint64_t v34 = *((void *)a2 + 5);
        uint64_t v35 = (uint64_t *)((char *)a2 + 24);
        *(void *)(v12 + 40) = v34;
        *(_WORD *)(v34 + 18) &= ~0x8000u;
        if ((*(unsigned char *)(v12 + 23) & 0x10) != 0)
        {
          uint64_t v39 = *(void *)(v34 + 56);
          if (v39)
          {
            uint64_t v40 = *(llvm::ValueSymbolTable **)(v39 + 104);
            if (v40) {
              llvm::ValueSymbolTable::reinsertValue(v40, (llvm::Value *)v12);
            }
          }
        }
        uint64_t v36 = *v35;
        *(void *)(v12 + 24) = *v35;
        *(void *)(v12 + 32) = v35;
        *(void *)(v36 + 8) = v30;
        *uint64_t v35 = v30;
      }
      *(void *)(v12 + 64) = v15;
      *(void *)(v12 + 72) = llvm::GetElementPtrInst::getIndexedType(v15, (uint64_t)v16, v19);
      llvm::GetElementPtrInst::init((uint64_t ***)v12, (uint64_t **)v17, v16, v19, v80);
    }
  }
  else
  {
    if (v8 == 12)
    {
      uint64_t v41 = *(uint64_t **)v82;
      __int16 v81 = 257;
      unint64_t v11 = llvm::UnaryOperator::Create(12, v41, v80, (uint64_t)a2);
      goto LABEL_5;
    }
    if (v8 <= 0xC)
    {
      switch(*((_WORD *)this + 9))
      {
        case '5':
        case '6':
          __int16 v53 = *((_WORD *)this + 12);
          int v54 = *(void **)v82;
          uint64_t v55 = *((void *)v82 + 1);
          __int16 v81 = 257;
          unint64_t v11 = llvm::CmpInst::Create(v8, v53, v54, v55, v80, (uint64_t)a2);
          goto LABEL_5;
        case '7':
        case '8':
        case ':':
        case ';':
        case '<':
          break;
        case '9':
          uint64_t v56 = *(void *)v82;
          uint64_t v57 = (uint64_t *)*((void *)v82 + 1);
          uint64_t v58 = *((void *)v82 + 2);
          __int16 v81 = 257;
          unint64_t v11 = sub_1CC199EFC(v56, v57, v58, v80, (uint64_t)a2, 0);
          goto LABEL_5;
        case '=':
          uint64_t v60 = *(llvm::Value **)v82;
          uint64_t v59 = (llvm::Value *)*((void *)v82 + 1);
          __int16 v81 = 257;
          unint64_t v61 = operator new(0x80uLL);
          v61[21] = v61[21] & 0x38000000 | 2;
          uint64_t v12 = (uint64_t)(v61 + 16);
          *(void *)unint64_t v61 = 0;
          *((void *)v61 + 1) = 0;
          *((void *)v61 + 2) = 0;
          *((void *)v61 + 3) = v61 + 16;
          *((void *)v61 + 4) = 0;
          *((void *)v61 + 5) = 0;
          *((void *)v61 + 6) = 0;
          *((void *)v61 + 7) = v61 + 16;
          llvm::ExtractElementInst::ExtractElementInst((llvm::ExtractElementInst *)(v61 + 16), v60, v59, v80, a2);
          goto LABEL_6;
        case '>':
          uint64_t v62 = *(llvm::Value **)v82;
          unsigned int v63 = (llvm::Value *)*((void *)v82 + 1);
          __int16 v64 = (llvm::Value *)*((void *)v82 + 2);
          __int16 v81 = 257;
          uint64_t v65 = operator new(0xA0uLL);
          uint64_t v66 = 0;
          uint64_t v12 = (uint64_t)(v65 + 24);
          v65[29] = v65[29] & 0x38000000 | 3;
          do
          {
            uint64_t v67 = &v65[v66];
            *uint64_t v67 = 0;
            v67[1] = 0;
            v67[2] = 0;
            v67[3] = v12;
            v66 += 8;
          }
          while (v66 != 24);
          llvm::InsertElementInst::InsertElementInst((llvm::InsertElementInst *)(v65 + 24), v62, v63, v64, (const llvm::Twine *)v80, a2);
          goto LABEL_6;
        case '?':
          BOOL v68 = operator new(0xA8uLL);
          v68[21] = v68[21] & 0x38000000 | 2;
          uint64_t v12 = (uint64_t)(v68 + 16);
          *(void *)BOOL v68 = 0;
          *((void *)v68 + 1) = 0;
          *((void *)v68 + 2) = 0;
          *((void *)v68 + 3) = v68 + 16;
          *((void *)v68 + 4) = 0;
          *((void *)v68 + 5) = 0;
          *((void *)v68 + 6) = 0;
          *((void *)v68 + 7) = v68 + 16;
          uint64_t v69 = *v7;
          uint64_t v70 = v7[1];
          uint64_t v71 = *((void *)this + 3);
          uint64_t v72 = *((unsigned int *)this + 8);
          __int16 v81 = 257;
          llvm::ShuffleVectorInst::ShuffleVectorInst(v68 + 16, v69, v70, v71, v72, v80, a2);
          goto LABEL_6;
        case '@':
          uint64_t v73 = *(uint64_t **)v82;
          uint64_t v74 = (unsigned int *)*((void *)this + 3);
          uint64_t v75 = *((unsigned int *)this + 8);
          __int16 v81 = 257;
          unint64_t v11 = sub_1CC19A650(v73, v74, v75, v80, (uint64_t)a2);
          goto LABEL_5;
        case 'A':
          int64_t v76 = *(void **)v82;
          uint64_t v77 = *((void *)v82 + 1);
          unsigned int v78 = (void *)*((void *)this + 3);
          uint64_t v79 = *((unsigned int *)this + 8);
          __int16 v81 = 257;
          unint64_t v11 = sub_1CC19A834(v76, v77, v78, v79, v80, (uint64_t)a2);
          goto LABEL_5;
        default:
          JUMPOUT(0);
      }
    }
    uint64_t v42 = *(void **)v82;
    uint64_t v43 = *((void *)v82 + 1);
    __int16 v81 = 257;
    char v44 = llvm::BinaryOperator::Create(v8, v42, v43, v80, (uint64_t)a2);
    uint64_t v12 = (uint64_t)v44;
    unsigned int v45 = *((unsigned __int8 *)v44 + 16);
    HIDWORD(v47) = v45 - 41;
    LODWORD(v47) = v45 - 41;
    unsigned int v46 = v47 >> 1;
    BOOL v48 = v46 > 6;
    int v49 = (1 << v46) & 0x47;
    if (!v48 && v49 != 0)
    {
      llvm::Instruction::setHasNoUnsignedWrap((uint64_t)v44, (*((unsigned __int8 *)this + 17) >> 1) & 1);
      llvm::Instruction::setHasNoSignedWrap(v12, (*((unsigned __int8 *)this + 17) >> 2) & 1);
      unsigned int v45 = *(unsigned __int8 *)(v12 + 16);
    }
    BOOL v48 = v45 > 0x37;
    uint64_t v51 = (1 << v45) & 0xC1800000000000;
    if (!v48 && v51 != 0) {
      llvm::Instruction::setIsExact(v12, (*((unsigned __int8 *)this + 17) >> 1) & 1);
    }
  }
LABEL_6:
  if (v82 != v84) {
    free(v82);
  }
  return v12;
}

void sub_1CC570164(llvm::detail::DoubleAPFloat *this, int a2)
{
  uint64_t v2 = *((void *)this + 1);
  if ((_UNKNOWN *)v2 == &unk_1CFB2E344)
  {
    llvm::detail::DoubleAPFloat::makeZero((llvm::detail::DoubleAPFloat *)((char *)this + 8), a2);
  }
  else
  {
    if (a2) {
      char v3 = 11;
    }
    else {
      char v3 = 3;
    }
    *((unsigned char *)this + 28) = *((unsigned char *)this + 28) & 0xF0 | v3;
    int v4 = *(_DWORD *)(v2 + 8);
    *((_DWORD *)this + 6) = *(_DWORD *)(v2 + 4) - 1;
    if ((v4 - 64) < 0xFFFFFF80)
    {
      uint64_t v5 = (void *)*((void *)this + 2);
      *uint64_t v5 = 0;
      bzero(v5 + 1, 8 * (((v4 + 64) >> 6) - 2) + 8);
    }
    else
    {
      *((void *)this + 2) = 0;
    }
  }
}

BOOL sub_1CC5701E4(uint64_t a1)
{
  return (*(unsigned char *)(a1 + 33) & 0x1C) != 0;
}

BOOL sub_1CC5701F4(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 32) & 0x300) == 256;
}

BOOL sub_1CC570208(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 16) - 11 < 2;
}

BOOL sub_1CC57021C(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 16) == 12;
}

uint64_t sub_1CC57022C(uint64_t *a1, llvm *this, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    uint64_t v14 = 0;
    uint64_t result = 0;
    goto LABEL_18;
  }
  uint64_t v6 = *a1;
  int v7 = llvm::hash_value(this, this);
  uint64_t v8 = 0;
  unsigned int v9 = v4 - 1;
  uint64_t v10 = *((unsigned int *)this + 2);
  unint64_t v11 = *(const void **)this;
  for (int i = 1; ; ++i)
  {
    int v13 = v7 & v9;
    uint64_t v14 = v6 + 24 * (v7 & v9);
    int v15 = *(_DWORD *)(v14 + 8);
    if (v10 == v15)
    {
      if (v10 > 0x40)
      {
        if (!memcmp(v11, *(const void **)v14, ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8))
        {
LABEL_17:
          uint64_t result = 1;
          goto LABEL_18;
        }
      }
      else if (v11 == *(const void **)v14)
      {
        goto LABEL_17;
      }
    }
    if (v15)
    {
      BOOL v16 = 0;
      goto LABEL_8;
    }
    if (!*(void *)v14) {
      break;
    }
    BOOL v16 = *(void *)v14 == 1;
LABEL_8:
    if (v16 && v8 == 0) {
      uint64_t v8 = v14;
    }
    int v7 = v13 + i;
  }
  uint64_t result = 0;
  if (v8) {
    uint64_t v14 = v8;
  }
LABEL_18:
  *a3 = v14;
  return result;
}

uint64_t sub_1CC570340(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1CC5704F0(a1, v7);
      uint64_t v29 = 0;
      sub_1CC57022C((uint64_t *)a1, (llvm *)a3, &v29);
      a4 = v29;
    }
    goto LABEL_4;
  }
  sub_1CC5704F0(a1, 2 * v7);
  int v10 = *(_DWORD *)(a1 + 16);
  if (!v10)
  {
    a4 = 0;
    goto LABEL_4;
  }
  uint64_t v11 = *(void *)a1;
  int v12 = llvm::hash_value((llvm *)a3, v9);
  uint64_t v13 = 0;
  unsigned int v14 = v10 - 1;
  uint64_t v15 = a3[2];
  BOOL v16 = *(const void **)a3;
  for (int i = 1; ; ++i)
  {
    int v18 = v12 & v14;
    a4 = v11 + 24 * (v12 & v14);
    int v19 = *(_DWORD *)(a4 + 8);
    if (v15 == v19)
    {
      if (v15 > 0x40)
      {
        uint64_t v23 = v15;
        uint64_t v24 = v11 + 24 * (v12 & v14);
        uint64_t v21 = v13;
        int v26 = i;
        unsigned int v27 = v14;
        int v28 = v12 & v14;
        int v25 = *(_DWORD *)(a4 + 8);
        int v22 = memcmp(v16, *(const void **)a4, ((unint64_t)(v15 + 63) >> 3) & 0x3FFFFFF8);
        int v19 = v25;
        int i = v26;
        unsigned int v14 = v27;
        int v18 = v28;
        uint64_t v15 = v23;
        a4 = v24;
        uint64_t v13 = v21;
        if (!v22) {
          goto LABEL_4;
        }
      }
      else if (v16 == *(const void **)a4)
      {
        goto LABEL_4;
      }
    }
    if (v19)
    {
      BOOL v20 = 0;
      goto LABEL_14;
    }
    if (!*(void *)a4) {
      break;
    }
    BOOL v20 = *(void *)a4 == 1;
LABEL_14:
    if (v20 && v13 == 0) {
      uint64_t v13 = a4;
    }
    int v12 = v18 + i;
  }
  if (v13) {
    a4 = v13;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)(a4 + 8) || *(void *)a4) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

char *sub_1CC5704F0(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  int v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = (char *)operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC570604((uint64_t *)a1, v4, (llvm *)((char *)v4 + 24 * v3));
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 24 * v10;
    int v12 = result + 8;
    do
    {
      _DWORD *v12 = 0;
      *((void *)v12 - 1) = 0;
      v12 += 6;
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC5705D0(uint64_t result)
{
  *(void *)(result + 8) = 0;
  uint64_t v1 = *(unsigned int *)(result + 16);
  if (v1)
  {
    uint64_t v2 = 24 * v1;
    unsigned int v3 = (_DWORD *)(*(void *)result + 8);
    do
    {
      *unsigned int v3 = 0;
      *((void *)v3 - 1) = 0;
      v3 += 6;
      v2 -= 24;
    }
    while (v2);
  }
  return result;
}

void sub_1CC570604(uint64_t *a1, llvm *this, llvm *a3)
{
  unsigned int v3 = this;
  a1[1] = 0;
  uint64_t v4 = *((unsigned int *)a1 + 4);
  if (v4)
  {
    uint64_t v5 = 24 * v4;
    unint64_t v6 = (_DWORD *)(*a1 + 8);
    do
    {
      *unint64_t v6 = 0;
      *((void *)v6 - 1) = 0;
      v6 += 6;
      v5 -= 24;
    }
    while (v5);
  }
  while (v3 != a3)
  {
    if (!*((_DWORD *)v3 + 2) && *(void *)v3 < 2uLL) {
      goto LABEL_23;
    }
    int v7 = *((_DWORD *)a1 + 4);
    if (!v7)
    {
      BOOL v16 = 0;
      goto LABEL_21;
    }
    uint64_t v8 = *a1;
    unsigned int v9 = llvm::hash_value(v3, this);
    uint64_t v10 = 0;
    int v11 = v7 - 1;
    uint64_t v12 = *((unsigned int *)v3 + 2);
    uint64_t v13 = *(const void **)v3;
    for (int i = 1; ; ++i)
    {
      unsigned int v15 = v9 & v11;
      BOOL v16 = (void *)(v8 + 24 * (v9 & v11));
      int v17 = *((_DWORD *)v16 + 2);
      if (v12 == v17)
      {
        if (v12 > 0x40)
        {
          if (!memcmp(v13, (const void *)*v16, ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8)) {
            goto LABEL_21;
          }
        }
        else if (v13 == (const void *)*v16)
        {
          goto LABEL_21;
        }
      }
      if (v17)
      {
        BOOL v18 = 0;
        goto LABEL_13;
      }
      if (!*v16) {
        break;
      }
      BOOL v18 = *v16 == 1;
LABEL_13:
      if (v18 && v10 == 0) {
        uint64_t v10 = (void *)(v8 + 24 * v15);
      }
      unsigned int v9 = v15 + i;
    }
    if (v10) {
      BOOL v16 = v10;
    }
LABEL_21:
    if (*((_DWORD *)v16 + 2) >= 0x41u && *v16) {
      MEMORY[0x1D25D9CB0](*v16, 0x1000C8000313F17);
    }
    *BOOL v16 = *(void *)v3;
    uint64_t v19 = *((void *)v3 + 2);
    *((_DWORD *)v16 + 2) = *((_DWORD *)v3 + 2);
    *((_DWORD *)v3 + 2) = 0;
    *((void *)v3 + 2) = 0;
    v16[2] = v19;
    ++*((_DWORD *)a1 + 2);
    this = (llvm *)*((void *)v3 + 2);
    *((void *)v3 + 2) = 0;
    if (this)
    {
      sub_1CC57080C((uint64_t)v3 + 16, (uint64_t)this);
      if (*((_DWORD *)v3 + 2) >= 0x41u)
      {
        if (*(void *)v3) {
          MEMORY[0x1D25D9CB0](*(void *)v3, 0x1000C8000313F17);
        }
      }
    }
LABEL_23:
    unsigned int v3 = (llvm *)((char *)v3 + 24);
  }
}

void sub_1CC57080C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(_DWORD *)(a2 + 32) >= 0x41u)
    {
      uint64_t v3 = *(void *)(a2 + 24);
      if (v3) {
        MEMORY[0x1D25D9CB0](v3, 0x1000C8000313F17);
      }
    }
    llvm::Value::~Value((llvm::Value *)a2);
    int v4 = *(_DWORD *)(a2 + 20);
    if ((v4 & 0x40000000) != 0)
    {
      uint64_t v12 = *(char **)(a2 - 8);
      int v11 = (char *)(a2 - 8);
      uint64_t v10 = v12;
      uint64_t v13 = v4 & 0x7FFFFFF;
      if (v13)
      {
        uint64_t v14 = 32 * v13;
        do
        {
          unsigned int v15 = &v10[v14];
          if (*(void *)&v10[v14 - 32])
          {
            **((void **)v15 - 2) = *((void *)v15 - 3);
            uint64_t v16 = *((void *)v15 - 3);
            if (v16) {
              *(void *)(v16 + 16) = *((void *)v15 - 2);
            }
          }
          v14 -= 32;
        }
        while (v14);
      }
      operator delete(v10);
      unint64_t v6 = v11;
    }
    else
    {
      uint64_t v5 = v4 & 0x7FFFFFF;
      unint64_t v6 = (char *)(a2 - 32 * v5);
      if (v5)
      {
        int v7 = (void **)(a2 - 16);
        uint64_t v8 = -32 * v5;
        do
        {
          if (*(v7 - 2))
          {
            **int v7 = *(v7 - 1);
            uint64_t v9 = (uint64_t)*(v7 - 1);
            if (v9) {
              *(void *)(v9 + 16) = *v7;
            }
          }
          v7 -= 4;
          v8 += 32;
        }
        while (v8);
      }
      if (v4 < 0) {
        unint64_t v6 = &v6[-*((void *)v6 - 1) - 8];
      }
    }
    operator delete(v6);
  }
}

uint64_t sub_1CC570914(uint64_t *a1, char *a2, char **a3)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  int v3 = *((_DWORD *)a1 + 4);
  if (!v3)
  {
    uint64_t result = 0;
    *a3 = 0;
    return result;
  }
  uint64_t v46 = *a1;
  unsigned __int8 v56 = 2;
  int v55 = -1;
  __int16 v53 = &unk_1CFB2E394;
  uint64_t v54 = 1;
  llvm::detail::IEEEFloat::normalize((llvm::detail::IEEEFloat *)&v53, 1, 0);
  unsigned __int8 v51 = v51 & 0xF0 | 2;
  int v50 = -1;
  BOOL v48 = &unk_1CFB2E394;
  uint64_t v49 = 2;
  llvm::detail::IEEEFloat::normalize((llvm::detail::IEEEFloat *)&v48, 1, 0);
  unint64_t v6 = (uint64_t *)(a2 + 8);
  int v7 = (llvm::detail *)(a2 + 8);
  if (*((_UNKNOWN **)a2 + 1) == &unk_1CFB2E344) {
    int v8 = llvm::detail::hash_value(v7, v5);
  }
  else {
    int v8 = llvm::detail::hash_value(v7, v5);
  }
  uint64_t v9 = 0;
  int v10 = v3 - 1;
  unsigned int v11 = (v3 - 1) & v8;
  for (int i = 1; ; ++i)
  {
    uint64_t v13 = (char *)(v46 + 40 * v11);
    uint64_t v14 = *v6;
    unsigned int v15 = (const llvm::detail::DoubleAPFloat *)(v13 + 8);
    if (*v6 == *((void *)v13 + 1))
    {
      if ((_UNKNOWN *)v14 == &unk_1CFB2E344)
      {
        if (llvm::detail::DoubleAPFloat::bitwiseIsEqual((llvm::detail::DoubleAPFloat *)(a2 + 8), v15)) {
          goto LABEL_68;
        }
        uint64_t v14 = *(void *)v15;
      }
      else
      {
        if (v13 == a2)
        {
          uint64_t result = 1;
          goto LABEL_70;
        }
        int v16 = a2[28];
        int v17 = v13[28];
        if ((v16 & 7) == (v17 & 7) && ((v17 ^ v16) & 8) == 0)
        {
          uint64_t result = 1;
          if ((v16 & 7) == 3 || (v16 & 7) == 0) {
            goto LABEL_69;
          }
          if ((v16 & 6) == 0 || *((_DWORD *)a2 + 6) == *((_DWORD *)v13 + 6))
          {
            uint64_t v19 = a2 + 16;
            int v20 = *(_DWORD *)(v14 + 8);
            unsigned int v21 = v20 - 64;
            if ((v20 - 64) <= 0xFFFFFF7F) {
              uint64_t v19 = (void *)*v19;
            }
            unsigned int v22 = v20 + 64;
            uint64_t v23 = v21 >= 0xFFFFFF80 ? v13 + 16 : (char *)*((void *)v13 + 2);
            if (!memcmp(v19, v23, (v22 >> 3) & 0x1FFFFFF8))
            {
LABEL_68:
              uint64_t result = 1;
LABEL_69:
              a2 = (char *)(v46 + 40 * v11);
              goto LABEL_70;
            }
          }
        }
      }
    }
    else
    {
      uint64_t v14 = *((void *)v13 + 1);
    }
    if ((_DWORD *)v14 != v53) {
      goto LABEL_42;
    }
    if ((_UNKNOWN *)v14 == &unk_1CFB2E344)
    {
      if (llvm::detail::DoubleAPFloat::bitwiseIsEqual(v15, (const llvm::detail::DoubleAPFloat *)&v53)) {
        goto LABEL_79;
      }
      uint64_t v14 = *(void *)v15;
      goto LABEL_42;
    }
    if (v13 == &v52) {
      break;
    }
    int v24 = v13[28];
    int v25 = v24 & 7;
    if (v25 == (v56 & 7) && ((v56 ^ v24) & 8) == 0)
    {
      if (v25 == 3 || v25 == 0) {
        goto LABEL_79;
      }
      BOOL v27 = (v24 & 6) == 0 || v25 == 3;
      if (v27 || *((_DWORD *)v13 + 6) == v55)
      {
        int v28 = *(_DWORD *)(v14 + 8);
        unsigned int v29 = v28 - 64;
        uint64_t v30 = v13 + 16;
        if ((v28 - 64) <= 0xFFFFFF7F) {
          uint64_t v30 = (void *)*v30;
        }
        unsigned int v31 = v28 + 64;
        BOOL v32 = v29 >= 0xFFFFFF80 ? &v54 : (uint64_t *)v54;
        if (!memcmp(v30, v32, (v31 >> 3) & 0x1FFFFFF8)) {
          goto LABEL_79;
        }
      }
    }
LABEL_42:
    if ((_DWORD *)v14 != v48) {
      goto LABEL_60;
    }
    if ((_UNKNOWN *)v14 == &unk_1CFB2E344)
    {
      char IsEqual = llvm::detail::DoubleAPFloat::bitwiseIsEqual(v15, (const llvm::detail::DoubleAPFloat *)&v48);
    }
    else
    {
      if (v13 == &v47) {
        goto LABEL_64;
      }
      int v33 = v13[28];
      int v34 = v33 & 7;
      if (v34 != (v51 & 7) || ((v51 ^ v33) & 8) != 0)
      {
LABEL_60:
        char IsEqual = 0;
        goto LABEL_61;
      }
      if (v34 == 3 || v34 == 0)
      {
LABEL_64:
        char IsEqual = 1;
      }
      else
      {
        if ((v33 & 6) != 0 && v34 != 3 && *((_DWORD *)v13 + 6) != v50) {
          goto LABEL_60;
        }
        int v36 = *(_DWORD *)(v14 + 8);
        unsigned int v37 = v36 - 64;
        unint64_t v38 = v13 + 16;
        if ((v36 - 64) <= 0xFFFFFF7F) {
          unint64_t v38 = (void *)*v38;
        }
        unsigned int v39 = v36 + 64;
        if (v37 >= 0xFFFFFF80) {
          uint64_t v40 = &v49;
        }
        else {
          uint64_t v40 = (uint64_t *)v49;
        }
        char IsEqual = memcmp(v38, v40, (v39 >> 3) & 0x1FFFFFF8) == 0;
      }
    }
LABEL_61:
    if ((IsEqual & (v9 == 0)) != 0) {
      uint64_t v9 = (char *)(v46 + 40 * v11);
    }
    unsigned int v42 = v11 + i;
    unsigned int v11 = v42 & v10;
  }
  uint64_t v13 = &v52;
LABEL_79:
  uint64_t result = 0;
  if (v9) {
    a2 = v9;
  }
  else {
    a2 = v13;
  }
LABEL_70:
  *a3 = a2;
  if (v48 == (_DWORD *)&unk_1CFB2E344)
  {
    uint64_t v43 = result;
    sub_1CB845718(&v49);
    goto LABEL_83;
  }
  if ((v48[2] - 64) <= 0xFFFFFF7F && v49)
  {
    uint64_t v43 = result;
    MEMORY[0x1D25D9CB0](v49, 0x1000C8000313F17);
LABEL_83:
    uint64_t result = v43;
  }
  if (v53 == (_DWORD *)&unk_1CFB2E344)
  {
    uint64_t v44 = result;
    sub_1CB845718(&v54);
    return v44;
  }
  if ((v53[2] - 64) <= 0xFFFFFF7F && v54)
  {
    uint64_t v44 = result;
    MEMORY[0x1D25D9CB0](v54, 0x1000C8000313F17);
    return v44;
  }
  return result;
}

char *sub_1CC570DE4(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CC571018(a1, v7);
  int v17 = 0;
  sub_1CC570914((uint64_t *)a1, a3, &v17);
  a4 = v17;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  unsigned __int8 v21 = 2;
  int v20 = -1;
  BOOL v18 = &unk_1CFB2E394;
  uint64_t v19 = 1;
  llvm::detail::IEEEFloat::normalize((llvm::detail::IEEEFloat *)&v18, 1, 0);
  uint64_t v9 = (_DWORD *)*((void *)a4 + 1);
  if (v9 != v18) {
    goto LABEL_18;
  }
  if (v9 == (_DWORD *)&unk_1CFB2E344)
  {
    if (llvm::detail::DoubleAPFloat::bitwiseIsEqual((llvm::detail::DoubleAPFloat *)(a4 + 8), (const llvm::detail::DoubleAPFloat *)&v18))goto LABEL_19; {
LABEL_18:
    }
    --*(_DWORD *)(a1 + 12);
    goto LABEL_19;
  }
  if (a4 != (char *)&v17)
  {
    int v10 = a4[28];
    if ((v10 & 7) != (v21 & 7) || ((v21 ^ v10) & 8) != 0) {
      goto LABEL_18;
    }
    if ((v10 & 7) != 3 && (v10 & 7) != 0)
    {
      if ((v10 & 6) != 0 && *((_DWORD *)a4 + 6) != v20) {
        goto LABEL_18;
      }
      int v11 = v9[2];
      unsigned int v12 = v11 - 64;
      uint64_t v13 = a4 + 16;
      if ((v11 - 64) <= 0xFFFFFF7F) {
        uint64_t v13 = (void *)*v13;
      }
      unsigned int v14 = v11 + 64;
      unsigned int v15 = v12 >= 0xFFFFFF80 ? &v19 : (uint64_t *)v19;
      if (memcmp(v13, v15, (v14 >> 3) & 0x1FFFFFF8)) {
        goto LABEL_18;
      }
    }
  }
LABEL_19:
  if (v18 == (_DWORD *)&unk_1CFB2E344)
  {
    sub_1CB845718(&v19);
  }
  else if ((v18[2] - 64) <= 0xFFFFFF7F && v19)
  {
    MEMORY[0x1D25D9CB0](v19, 0x1000C8000313F17);
  }
  return a4;
}

uint64_t *sub_1CC571018(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  int v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  *(void *)a1 = operator new(40 * v8, (std::align_val_t)8uLL);
  if (v4)
  {
    sub_1CC571308(a1, v4, &v4[5 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }

  return sub_1CC5710E0((uint64_t *)a1);
}

uint64_t *sub_1CC5710E0(uint64_t *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  a1[1] = 0;
  char v22 = 2;
  int v21 = -1;
  uint64_t v19 = &unk_1CFB2E394;
  uint64_t v20 = 1;
  uint64_t result = (uint64_t *)llvm::detail::IEEEFloat::normalize((llvm::detail::IEEEFloat *)&v19, 1, 0);
  unsigned int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = v4 + 40 * v3;
    do
    {
      uint64_t result = (uint64_t *)(v4 + 8);
      unint64_t v6 = v19;
      if (v19 == (_DWORD *)&unk_1CFB2E344)
      {
        uint64_t v18 = v5;
        uint64_t result = llvm::detail::DoubleAPFloat::DoubleAPFloat(result, (const llvm::detail::DoubleAPFloat *)&v19);
        uint64_t v5 = v18;
      }
      else
      {
        *uint64_t result = (uint64_t)v19;
        if ((v6[2] + 64) >= 0x80) {
          operator new[]();
        }
        char v7 = *(unsigned char *)(v4 + 28) & 0xF7 | v22 & 8;
        *(unsigned char *)(v4 + 28) = v7;
        char v8 = v22;
        int v9 = v22 & 7;
        *(unsigned char *)(v4 + 28) = v7 & 0xF8 | v22 & 7;
        *(_DWORD *)(v4 + 24) = v21;
        BOOL v11 = (v8 & 6) != 0 && v9 != 3;
        if (v9 == 1 || v11)
        {
          uint64_t v13 = *(unsigned int *)(*(void *)(v4 + 8) + 8);
          unsigned int v14 = (void *)(v4 + 16);
          if ((v13 - 64) <= 0xFFFFFF7F) {
            unsigned int v14 = (void *)*v14;
          }
          if ((v19[2] - 64) >= 0xFFFFFF80) {
            unsigned int v15 = &v20;
          }
          else {
            unsigned int v15 = (uint64_t *)v20;
          }
          if (v13 <= 0xFFFFFFBF)
          {
            unint64_t v16 = (unint64_t)(v13 + 64) >> 6;
            do
            {
              uint64_t v17 = *v15++;
              *v14++ = v17;
              --v16;
            }
            while (v16);
          }
        }
      }
      v4 += 40;
    }
    while (v4 != v5);
  }
  if (v19 == (_DWORD *)&unk_1CFB2E344) {
    return sub_1CB845718(&v20);
  }
  if ((v19[2] - 64) <= 0xFFFFFF7F)
  {
    uint64_t result = (uint64_t *)v20;
    if (v20) {
      return (uint64_t *)MEMORY[0x1D25D9CB0](v20, 0x1000C8000313F17);
    }
  }
  return result;
}

void sub_1CC571308(uint64_t a1, void *a2, void *a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  sub_1CC5710E0((uint64_t *)a1);
  unsigned __int8 v35 = 2;
  int v34 = -1;
  BOOL v32 = &unk_1CFB2E394;
  uint64_t v33 = 1;
  llvm::detail::IEEEFloat::normalize((llvm::detail::IEEEFloat *)&v32, 1, 0);
  unsigned __int8 v30 = 2;
  int v29 = -1;
  BOOL v27 = &unk_1CFB2E394;
  uint64_t v28 = 2;
  llvm::detail::IEEEFloat::normalize((llvm::detail::IEEEFloat *)&v27, 1, 0);
  if (a2 != a3)
  {
    unint64_t v6 = a2 + 2;
    do
    {
      char v8 = v6 - 1;
      uint64_t v7 = *(v6 - 1);
      int v9 = v6 - 2;
      if ((_DWORD *)v7 == v32)
      {
        if ((_UNKNOWN *)v7 == &unk_1CFB2E344)
        {
          if (llvm::detail::DoubleAPFloat::bitwiseIsEqual((llvm::detail::DoubleAPFloat *)(v6 - 1), (const llvm::detail::DoubleAPFloat *)&v32))goto LABEL_34; {
          uint64_t v7 = *v8;
          }
        }
        else
        {
          if (v9 == (uint64_t *)&v31) {
            goto LABEL_34;
          }
          int v10 = *((unsigned __int8 *)v6 + 12);
          if ((v10 & 7) == (v35 & 7) && ((v35 ^ v10) & 8) == 0)
          {
            if ((v10 & 7) == 3 || (v10 & 7) == 0) {
              goto LABEL_34;
            }
            if ((v10 & 6) == 0 || *((_DWORD *)v6 + 2) == v34)
            {
              int v11 = *(_DWORD *)(v7 + 8);
              unsigned int v12 = v11 - 64;
              uint64_t v13 = v6;
              if ((v11 - 64) <= 0xFFFFFF7F) {
                uint64_t v13 = (const void *)*v6;
              }
              unsigned int v14 = v11 + 64;
              unsigned int v15 = v12 >= 0xFFFFFF80 ? &v33 : (uint64_t *)v33;
              if (!memcmp(v13, v15, (v14 >> 3) & 0x1FFFFFF8)) {
                goto LABEL_34;
              }
            }
          }
        }
      }
      if ((_DWORD *)v7 == v27)
      {
        if ((_UNKNOWN *)v7 == &unk_1CFB2E344)
        {
          if (llvm::detail::DoubleAPFloat::bitwiseIsEqual((llvm::detail::DoubleAPFloat *)(v6 - 1), (const llvm::detail::DoubleAPFloat *)&v27))goto LABEL_34; {
        }
          }
        else
        {
          if (v9 == (uint64_t *)&v26) {
            goto LABEL_34;
          }
          int v16 = *((unsigned __int8 *)v6 + 12);
          if ((v16 & 7) == (v30 & 7) && ((v30 ^ v16) & 8) == 0)
          {
            if ((v16 & 7) == 3 || (v16 & 7) == 0) {
              goto LABEL_34;
            }
            if ((v16 & 6) == 0 || *((_DWORD *)v6 + 2) == v29)
            {
              int v17 = *(_DWORD *)(v7 + 8);
              unsigned int v18 = v17 - 64;
              uint64_t v19 = v6;
              if ((v17 - 64) <= 0xFFFFFF7F) {
                uint64_t v19 = (const void *)*v6;
              }
              unsigned int v20 = v17 + 64;
              int v21 = v18 >= 0xFFFFFF80 ? &v28 : (uint64_t *)v28;
              if (!memcmp(v19, v21, (v20 >> 3) & 0x1FFFFFF8)) {
                goto LABEL_34;
              }
            }
          }
        }
      }
      int v25 = 0;
      sub_1CC570914((uint64_t *)a1, (char *)v6 - 16, &v25);
      char v22 = v25;
      sub_1CB9190C0((uint64_t *)v25 + 1, (void **)v6 - 1);
      uint64_t v23 = v6[2];
      void v6[2] = 0;
      *((void *)v22 + 4) = v23;
      ++*(_DWORD *)(a1 + 8);
      sub_1CC567FD8(v6 + 2, 0);
LABEL_34:
      if ((_UNKNOWN *)*v8 == &unk_1CFB2E344)
      {
        sub_1CB845718(v6);
      }
      else if ((*(_DWORD *)(*v8 + 8) - 64) <= 0xFFFFFF7F && *v6)
      {
        MEMORY[0x1D25D9CB0](*v6, 0x1000C8000313F17);
      }
      int v24 = v6 + 3;
      v6 += 5;
    }
    while (v24 != a3);
  }
  if (v27 == (_DWORD *)&unk_1CFB2E344)
  {
    sub_1CB845718(&v28);
  }
  else if ((v27[2] - 64) <= 0xFFFFFF7F && v28)
  {
    MEMORY[0x1D25D9CB0](v28, 0x1000C8000313F17);
  }
  if (v32 == (_DWORD *)&unk_1CFB2E344)
  {
    sub_1CB845718(&v33);
  }
  else if ((v32[2] - 64) <= 0xFFFFFF7F)
  {
    if (v33) {
      MEMORY[0x1D25D9CB0](v33, 0x1000C8000313F17);
    }
  }
}

uint64_t *sub_1CC5716C8(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t result = a3;
  uint64_t v5 = (void **)(a4 + 8);
  do
  {
    unint64_t v6 = v5 - 1;
    uint64_t v7 = *a2;
    if (*(v5 - 1))
    {
      *v5[1] = *v5;
      if (*v5) {
        (*v5)[2] = v5[1];
      }
    }
    *unint64_t v6 = v7;
    if (v7)
    {
      int v10 = *(void **)(v7 + 8);
      char v8 = (void *)(v7 + 8);
      int v9 = v10;
      *uint64_t v5 = v10;
      if (v10) {
        unsigned __int8 v9[2] = v5;
      }
      v5[1] = v8;
      *char v8 = v6;
    }
    ++a2;
    v5 += 4;
  }
  while (a2 != a3);
  return result;
}

unint64_t sub_1CC571744(uint64_t *a1, int *a2)
{
  uint64_t v2 = a2;
  unsigned int v3 = a1;
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  memset(__dst, 0, sizeof(__dst));
  uint64_t v4 = &unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    int v6 = __cxa_guard_acquire(&qword_1EBCBE588);
    uint64_t v4 = &unk_1EBCBE000;
    unsigned int v3 = a1;
    uint64_t v2 = a2;
    if (v6)
    {
      unint64_t v7 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v7 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v7;
      __cxa_guard_release(&qword_1EBCBE588);
      uint64_t v4 = (void *)&unk_1EBCBE000;
      unsigned int v3 = a1;
      uint64_t v2 = a2;
    }
  }
  uint64_t v13 = v4[176];
  return sub_1CC57183C((unint64_t *)__dst, 0, (char *)__dst, (char *)v11, v3, v2);
}

unint64_t sub_1CC57183C(unint64_t *a1, uint64_t a2, char *__dst, char *a4, uint64_t *a5, int *a6)
{
  uint64_t v10 = *a5;
  uint64_t __src = *a5;
  int v11 = (unint64_t *)(__dst + 8);
  if (__dst + 8 <= a4)
  {
    *(void *)__dst = v10;
  }
  else
  {
    uint64_t v12 = a4 - __dst;
    memcpy(__dst, &__src, a4 - __dst);
    if (a2)
    {
      unint64_t v13 = a1[9];
      unint64_t v14 = a1[11];
      unint64_t v15 = a1[1];
      unint64_t v16 = a1[12];
      unint64_t v17 = a1[13];
      unint64_t v18 = a1[6];
      unint64_t v19 = a1[7];
      unint64_t v20 = a1[14];
      unint64_t v21 = v20 ^ (0xB492B66FBE98F273 * __ROR8__(v13 + a1[8] + v14 + v15, 37));
      unint64_t v22 = a1[5];
      uint64_t v23 = v22 + v14 - 0x4B6D499041670D8DLL * __ROR8__(v16 + v13 + v18, 42);
      unint64_t v24 = __ROR8__(v17 + a1[10], 33);
      uint64_t v25 = *a1 - 0x4B6D499041670D8DLL * v16;
      unint64_t v26 = v17 + v25;
      unint64_t v28 = a1[2];
      unint64_t v27 = a1[3];
      v24 *= 0xB492B66FBE98F273;
      unint64_t v29 = v24 + v20 + a1[4];
      uint64_t v30 = v25 + v15 + v28;
      unint64_t v31 = v22 + v18 + v29;
      a1[12] = __ROR8__(v26 + v27 + v21, 21) + v25 + __ROR8__(v30, 44);
      a1[13] = v31 + v19;
      a1[14] = __ROR8__(v31, 44) + v29 + __ROR8__(v28 + v23 + v29 + v19, 21);
      a1[10] = v21;
      a1[11] = v30 + v27;
      a1[8] = v24;
      a1[9] = v23;
      a2 += 64;
    }
    else
    {
      unint64_t v36 = a1[15];
      uint64_t v37 = __ROR8__(v36 ^ 0xB492B66FBE98F273, 49);
      unint64_t v38 = v36 ^ (v36 >> 47);
      unint64_t v39 = a1[1];
      uint64_t v40 = v39 + v36 + v37;
      unint64_t v41 = a1[6];
      unint64_t v42 = a1[7];
      unint64_t v43 = a1[5];
      uint64_t v44 = v43 + v37 - 0x4B6D499041670D8DLL * __ROR8__(v41 + v36 - 0x4B6D499041670D8DLL * v36, 42);
      unint64_t v45 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (v36 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69
                                                                     * (v36 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
      unint64_t v46 = 0x9DDFEA08EB382D69
          * (v36 ^ (((0x9DDFEA08EB382D69 * (v38 ^ (0xB492B66FBE98F273 * v36))) ^ v36) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                  * (v38 ^ (0xB492B66FBE98F273 * v36))));
      unint64_t v47 = 0x9DDFEA08EB382D69 * (v46 ^ (v46 >> 47));
      unint64_t v48 = 0xB492B66FBE98F273 * __ROR8__(v38 - 0x622015F714C7D297 * (v45 ^ (v45 >> 47)), 33);
      uint64_t v49 = *a1 - 0x6D8ED9027DD26057 * v36;
      unint64_t v51 = a1[2];
      unint64_t v50 = a1[3];
      uint64_t v52 = v49 + v39 + v51;
      unint64_t v53 = v47 ^ (0xB492B66FBE98F273 * __ROR8__(v40, 37));
      unint64_t v54 = v48 + a1[4] + v47;
      a1[8] = v48;
      a1[9] = v44;
      a1[10] = v53;
      a1[11] = v52 + v50;
      a1[12] = __ROR8__(v52, 44) + v49 + __ROR8__(v49 + v38 + v50 + v53, 21);
      a1[13] = v43 + v41 + v54 + v42;
      a1[14] = __ROR8__(v43 + v41 + v54, 44) + v54 + __ROR8__(v44 + v51 + v42 + v54, 21);
      a2 = 64;
    }
    int v11 = (unint64_t *)((char *)a1 + 8 - v12);
    if (v11 > (unint64_t *)a4) {
      int v11 = a1;
    }
    else {
      memcpy(a1, (char *)&__src + v12, 8 - v12);
    }
  }
  uint64_t __src = a2;
  BOOL v32 = (char *)sub_1CC0AC9D0(a1, &__src, v11, (unint64_t)a4, *a6);
  uint64_t v33 = v32;
  uint64_t v34 = __src;
  if (!__src) {
    return sub_1CBAE06B8(a1, v32 - (char *)a1, a1[15]);
  }
  if (v32 != (char *)a1 && v32 != a4) {
    sub_1CBFFD1E8((char *)a1, v32, a4);
  }
  sub_1CBFFCF68(a1 + 8, a1);
  return sub_1CBFFD150(a1 + 8, (unint64_t)&v33[v34 - (void)a1]);
}

unint64_t sub_1CC571B50(void *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unsigned int v3 = &unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    uint64_t v69 = a1;
    int v65 = __cxa_guard_acquire(&qword_1EBCBE588);
    unsigned int v3 = &unk_1EBCBE000;
    int v66 = v65;
    uint64_t v2 = a2;
    a1 = v69;
    if (v66)
    {
      unint64_t v67 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v67 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v67;
      __cxa_guard_release(&qword_1EBCBE588);
      unsigned int v3 = (void *)&unk_1EBCBE000;
      uint64_t v2 = a2;
      a1 = v69;
    }
  }
  unint64_t v4 = v3[176];
  unint64_t v5 = v2 - (void)a1;
  if ((unint64_t)(v2 - (void)a1) > 0x40)
  {
    unint64_t v7 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v4 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
    uint64_t v8 = __ROR8__(v4 ^ 0xB492B66FBE98F273, 49);
    unint64_t v9 = v4 ^ (v4 >> 47);
    unint64_t v10 = v4 ^ (((0x9DDFEA08EB382D69 * (v9 ^ (0xB492B66FBE98F273 * v4))) ^ v4) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                           * (v9 ^ (0xB492B66FBE98F273
                                                                                                  * v4)));
    uint64_t v11 = a1[1];
    uint64_t v12 = a1[6];
    uint64_t v13 = a1[7];
    uint64_t v14 = v8 + v4 + v11;
    uint64_t v15 = a1[5];
    unint64_t v16 = v15 + v8 - 0x4B6D499041670D8DLL * __ROR8__(v12 + v4 - 0x4B6D499041670D8DLL * v4, 42);
    unint64_t v17 = v9 - 0x622015F714C7D297 * (v7 ^ (v7 >> 47));
    uint64_t v18 = *a1 - 0x6D8ED9027DD26057 * v4;
    uint64_t v19 = a1[2];
    uint64_t v20 = a1[3];
    uint64_t v21 = v18 + v11 + v19;
    unint64_t v22 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v10) ^ ((0x9DDFEA08EB382D69 * v10) >> 47));
    uint64_t v23 = __ROR8__(v17, 33);
    unint64_t v24 = (0xB492B66FBE98F273 * __ROR8__(v14, 37)) ^ v22;
    uint64_t v25 = __ROR8__(v21, 44) + v18 + __ROR8__(v24 + v9 + v18 + v20, 21);
    unint64_t v26 = 0xB492B66FBE98F273 * v23;
    uint64_t v27 = v21 + v20;
    uint64_t v28 = v22 + a1[4] - 0x4B6D499041670D8DLL * v23;
    uint64_t v29 = __ROR8__(v15 + v12 + v28, 44) + v28 + __ROR8__(v16 + v19 + v13 + v28, 21);
    uint64_t v30 = v15 + v12 + v28 + v13;
    unint64_t v31 = (v5 & 0xFFFFFFFFFFFFFFC0) - 64;
    if ((v5 & 0xFFFFFFFFFFFFFFC0) == 0x40)
    {
      unint64_t v42 = v24;
    }
    else
    {
      BOOL v32 = a1 + 15;
      do
      {
        uint64_t v33 = *(v32 - 6);
        uint64_t v34 = __ROR8__(v16 + v26 + v27 + v33, 37);
        uint64_t v36 = *(v32 - 2);
        uint64_t v35 = *(v32 - 1);
        unint64_t v16 = v36 + v27 - 0x4B6D499041670D8DLL * __ROR8__(v25 + v16 + v35, 42);
        uint64_t v37 = v30 + v24;
        uint64_t v38 = *(v32 - 7) - 0x4B6D499041670D8DLL * v25;
        uint64_t v39 = *(v32 - 4);
        uint64_t v40 = *(v32 - 5);
        uint64_t v41 = v38 + v33 + v40;
        unint64_t v42 = (0xB492B66FBE98F273 * v34) ^ v29;
        unint64_t v26 = 0xB492B66FBE98F273 * __ROR8__(v37, 33);
        uint64_t v25 = __ROR8__(v41, 44) + v38 + __ROR8__(v42 + v30 + v38 + v39, 21);
        uint64_t v27 = v41 + v39;
        unint64_t v43 = v26 + v29 + *(v32 - 3);
        uint64_t v44 = *v32;
        v32 += 8;
        uint64_t v45 = __ROR8__(v16 + v40 + v43 + v44, 21);
        unint64_t v46 = v36 + v35 + v43;
        uint64_t v29 = __ROR8__(v46, 44) + v43 + v45;
        uint64_t v30 = v46 + v44;
        unint64_t v24 = v42;
        v31 -= 64;
      }
      while (v31);
    }
    if ((v5 & 0x3F) != 0)
    {
      uint64_t v47 = *(void *)(v2 - 56);
      uint64_t v48 = *(void *)(v2 - 16);
      uint64_t v49 = *(void *)(v2 - 8);
      uint64_t v50 = v42 + v30;
      unint64_t v51 = (0xB492B66FBE98F273 * __ROR8__(v16 + v27 + v26 + v47, 37)) ^ v29;
      uint64_t v53 = *(void *)(v2 - 32);
      uint64_t v52 = *(void *)(v2 - 24);
      unint64_t v16 = v52 + v27 - 0x4B6D499041670D8DLL * __ROR8__(v16 + v25 + v48, 42);
      uint64_t v54 = v51 + v30;
      uint64_t v55 = *(void *)(v2 - 64) - 0x4B6D499041670D8DLL * v25;
      uint64_t v58 = v2 - 48;
      uint64_t v56 = *(void *)(v2 - 48);
      uint64_t v57 = *(void *)(v58 + 8);
      uint64_t v59 = v55 + v47 + v56;
      unint64_t v26 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
      uint64_t v25 = __ROR8__(v59, 44) + v55 + __ROR8__(v54 + v55 + v57, 21);
      uint64_t v27 = v59 + v57;
      unint64_t v60 = v26 + v29 + v53;
      unint64_t v61 = v52 + v48 + v60;
      uint64_t v29 = __ROR8__(v61, 44) + v60 + __ROR8__(v16 + v56 + v60 + v49, 21);
      uint64_t v30 = v61 + v49;
      unint64_t v42 = v51;
    }
    unint64_t v62 = 0x9DDFEA08EB382D69
        * (v29 ^ ((0x9DDFEA08EB382D69 * (v25 ^ v29)) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ v29)));
    uint64_t v63 = v26 - 0x4B6D499041670D8DLL * (v5 ^ (v5 >> 47)) - 0x622015F714C7D297 * (v62 ^ (v62 >> 47));
    unint64_t v64 = 0x9DDFEA08EB382D69
        * ((v42
          - 0x4B6D499041670D8DLL * (v16 ^ (v16 >> 47))
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v30 ^ ((0x9DDFEA08EB382D69 * (v27 ^ v30)) >> 47) ^ (0x9DDFEA08EB382D69 * (v27 ^ v30)))) ^ ((0x9DDFEA08EB382D69 * (v30 ^ ((0x9DDFEA08EB382D69 * (v27 ^ v30)) >> 47) ^ (0x9DDFEA08EB382D69 * (v27 ^ v30)))) >> 47))) ^ v63);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v63 ^ (v64 >> 47) ^ v64)) ^ ((0x9DDFEA08EB382D69 * (v63 ^ (v64 >> 47) ^ v64)) >> 47));
  }
  else
  {
    return sub_1CBAE06B8(a1, v5, v4);
  }
}

uint64_t sub_1CC571F20(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v5 = *a1;
    int v6 = (void *)(a2 + 8);
    int v7 = v4 - 1;
    unsigned int v8 = *(_DWORD *)a2 & (v4 - 1);
    unint64_t v9 = (uint64_t *)(*a1 + 8 * v8);
    if (sub_1CC571FFC((void *)(a2 + 8), *v9))
    {
LABEL_11:
      uint64_t result = 1;
    }
    else
    {
      unint64_t v10 = 0;
      int v11 = 1;
      while (*v9 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = *v9 == -8192;
        }
        if (v12) {
          unint64_t v10 = v9;
        }
        int v13 = v11 + 1;
        unsigned int v8 = (v8 + v11) & v7;
        unint64_t v9 = (uint64_t *)(v5 + 8 * v8);
        BOOL v14 = sub_1CC571FFC(v6, *v9);
        int v11 = v13;
        if (v14) {
          goto LABEL_11;
        }
      }
      uint64_t result = 0;
      if (v10) {
        unint64_t v9 = v10;
      }
    }
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t result = 0;
  }
  *a3 = v9;
  return result;
}

BOOL sub_1CC571FFC(void *a1, uint64_t a2)
{
  if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000) {
    return 0;
  }
  if (*a1 != *(void *)a2) {
    return 0;
  }
  uint64_t v3 = a1[2];
  if (v3 != (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)) {
    return 0;
  }
  if (!a1[2]) {
    return 1;
  }
  int v4 = (uint64_t *)a1[1];
  uint64_t v5 = (uint64_t *)(a2 - 32 * v3);
  uint64_t v6 = a1[2] - 1;
  do
  {
    uint64_t v8 = *v4++;
    uint64_t v7 = v8;
    uint64_t v10 = *v5;
    v5 += 4;
    uint64_t v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

uint64_t sub_1CC572074@<X0>(unint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v12 = 0;
  uint64_t result = sub_1CC571F20((uint64_t *)a1, a3, &v12);
  uint64_t v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CC572104(a1, (uint64_t)a2, a3, v12);
    uint64_t v9 = (uint64_t *)result;
    *(void *)uint64_t result = *a2;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v11;
  *(unsigned char *)(a4 + 16) = v10;
  return result;
}

uint64_t *sub_1CC572104(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CC5721B8(a1, v7);
  uint64_t v9 = 0;
  sub_1CC571F20((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC5721B8(unint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(unint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC572284(a1, v4, &v4[v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

unint64_t sub_1CC572284(unint64_t result, unint64_t *a2, unint64_t *a3)
{
  int v4 = a2;
  unint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v9 = *(void *)v5;
        int v10 = *(_DWORD *)(v5 + 16);
        uint64_t result = sub_1CC572384(result);
        int v11 = v10 - 1;
        unint64_t v12 = *v4;
        unsigned int v13 = result & (v10 - 1);
        BOOL v14 = (unint64_t *)(v9 + 8 * v13);
        unint64_t v15 = *v14;
        if (*v4 != *v14)
        {
          unint64_t v16 = 0;
          int v17 = 1;
          while (v15 != -4096)
          {
            if (v16) {
              BOOL v18 = 0;
            }
            else {
              BOOL v18 = v15 == -8192;
            }
            if (v18) {
              unint64_t v16 = v14;
            }
            unsigned int v19 = v13 + v17++;
            unsigned int v13 = v19 & v11;
            BOOL v14 = (unint64_t *)(v9 + 8 * (v19 & v11));
            unint64_t v15 = *v14;
            if (v12 == *v14) {
              goto LABEL_18;
            }
          }
          if (v16) {
            BOOL v14 = v16;
          }
        }
LABEL_18:
        *BOOL v14 = v12;
        ++*(_DWORD *)(v5 + 8);
      }
      ++v4;
    }
    while (v4 != a3);
  }
  return result;
}

unint64_t sub_1CC572384(uint64_t a1)
{
  v13[32] = *MEMORY[0x1E4F143B8];
  int v11 = v13;
  uint64_t v12 = 0x2000000000;
  uint64_t v1 = *(void *)a1;
  int v2 = *(_DWORD *)(a1 + 20);
  uint64_t v3 = v2 & 0x7FFFFFF;
  if ((v2 & 0x7FFFFFF) != 0)
  {
    LODWORD(v4) = 0;
    uint64_t v5 = a1;
    do
    {
      if (v4 >= HIDWORD(v12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v11 + v4) = *(void *)(v5 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
      uint64_t v4 = (v12 + 1);
      LODWORD(v12) = v12 + 1;
      v5 += 32;
      --v3;
    }
    while (v3);
    uint64_t v6 = v11;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = v13;
  }
  v9[0] = v1;
  v9[1] = (uint64_t)v6;
  unsigned __int8 v9[2] = v4;
  int v10 = sub_1CC571B50(v6, (uint64_t)&v6[v4]);
  unint64_t v7 = sub_1CC571744(v9, &v10);
  if (v11 != v13) {
    free(v11);
  }
  return v7;
}

unint64_t sub_1CC5724CC(void *a1, _DWORD *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  int v2 = &unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    unint64_t v7 = a2;
    uint64_t v8 = a1;
    int v4 = __cxa_guard_acquire(&qword_1EBCBE588);
    int v2 = &unk_1EBCBE000;
    int v5 = v4;
    a2 = v7;
    a1 = v8;
    if (v5)
    {
      unint64_t v6 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v6 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v6;
      __cxa_guard_release(&qword_1EBCBE588);
      int v2 = (void *)&unk_1EBCBE000;
      a2 = v7;
      a1 = v8;
    }
  }
  unint64_t v11 = v2[176];
  *(void *)&v9[0] = *a1;
  DWORD2(v9[0]) = *a2;
  return sub_1CBAE06B8(v9, 0xCuLL, v11);
}

uint64_t sub_1CC5725C8(uint64_t a1, int a2, uint64_t a3, uint64_t **a4)
{
  if (!a2)
  {
    uint64_t v9 = 0;
    uint64_t v16 = 0;
    goto LABEL_18;
  }
  int v4 = 0;
  unsigned int v5 = *(_DWORD *)a3;
  int v6 = a2 - 1;
  for (int i = 1; ; ++i)
  {
    unsigned int v8 = v5 & v6;
    uint64_t v9 = (uint64_t *)(a1 + 8 * (v5 & v6));
    uint64_t v10 = *v9;
    if (*v9 == -8192) {
      goto LABEL_10;
    }
    if (v10 == -4096) {
      break;
    }
    if (*(void *)(a3 + 8) == *(void *)v10)
    {
      uint64_t v11 = *(void *)(a3 + 24);
      if (v11 == (*(_DWORD *)(v10 + 20) & 0x7FFFFFF))
      {
        uint64_t v12 = *(void *)(a3 + 24);
        if (!*(void *)(a3 + 24))
        {
          uint64_t v16 = 1;
          goto LABEL_18;
        }
        unsigned int v13 = *(void **)(a3 + 16);
        BOOL v14 = (void *)(v10 - 32 * v11);
        while (*v13 == *v14)
        {
          v14 += 4;
          ++v13;
          uint64_t v16 = 1;
          if (!--v12) {
            goto LABEL_18;
          }
        }
      }
    }
LABEL_10:
    if (v4) {
      BOOL v15 = 0;
    }
    else {
      BOOL v15 = v10 == -8192;
    }
    if (v15) {
      int v4 = (uint64_t *)(a1 + 8 * v8);
    }
    unsigned int v5 = v8 + i;
  }
  uint64_t v16 = 0;
  if (v4) {
    uint64_t v9 = v4;
  }
LABEL_18:
  *a4 = v9;
  return v16;
}

uint64_t sub_1CC5726A4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  BOOL v14 = 0;
  uint64_t result = sub_1CC5725C8(*(void *)a2, *(_DWORD *)(a2 + 16), a4, &v14);
  uint64_t v9 = v14;
  unsigned int v10 = *(_DWORD *)(a2 + 16);
  if (result)
  {
    char v12 = 0;
    goto LABEL_7;
  }
  int v11 = *(_DWORD *)(a2 + 8);
  if (4 * v11 + 4 >= 3 * v10)
  {
    v10 *= 2;
    goto LABEL_9;
  }
  if (v10 + ~v11 - *(_DWORD *)(a2 + 12) <= v10 >> 3)
  {
LABEL_9:
    sub_1CC5727B0(a2, v10);
    BOOL v14 = 0;
    uint64_t result = sub_1CC5725C8(*(void *)a2, *(_DWORD *)(a2 + 16), a4, &v14);
    uint64_t v9 = v14;
  }
  ++*(_DWORD *)(a2 + 8);
  if (*v9 != -4096) {
    --*(_DWORD *)(a2 + 12);
  }
  *uint64_t v9 = *a3;
  unsigned int v10 = *(_DWORD *)(a2 + 16);
  char v12 = 1;
LABEL_7:
  uint64_t v13 = *(void *)a2 + 8 * v10;
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v13;
  *(unsigned char *)(a1 + 16) = v12;
  return result;
}

void *sub_1CC5727B0(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t ***)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (v12)
    {
      uint64_t v13 = 8 * v12;
      do
      {
        *result++ = -4096;
        v13 -= 8;
      }
      while (v13);
    }
    if (v3)
    {
      BOOL v14 = &v4[v3];
      BOOL v15 = v4;
      do
      {
        if (((unint64_t)*v15 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v16 = *(uint64_t ***)a1;
          int v17 = *(_DWORD *)(a1 + 16);
          int v18 = sub_1CC57294C(*v15);
          int v19 = v17 - 1;
          uint64_t v20 = *v15;
          unsigned int v21 = v18 & (v17 - 1);
          unint64_t v22 = &v16[v21];
          uint64_t v23 = *v22;
          if (*v15 != *v22)
          {
            unint64_t v24 = 0;
            int v25 = 1;
            while (v23 != (uint64_t *)-4096)
            {
              if (v24) {
                BOOL v26 = 0;
              }
              else {
                BOOL v26 = v23 == (uint64_t *)-8192;
              }
              if (v26) {
                unint64_t v24 = v22;
              }
              unsigned int v27 = v21 + v25++;
              unsigned int v21 = v27 & v19;
              unint64_t v22 = &v16[v27 & v19];
              uint64_t v23 = *v22;
              if (v20 == *v22) {
                goto LABEL_27;
              }
            }
            if (v24) {
              unint64_t v22 = v24;
            }
          }
LABEL_27:
          *unint64_t v22 = v20;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v15;
      }
      while (v15 != v14);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

unint64_t sub_1CC57294C(uint64_t *a1)
{
  v13[32] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = v13;
  uint64_t v12 = 0x2000000000;
  uint64_t v1 = *a1;
  int v2 = *((_DWORD *)a1 + 5);
  uint64_t v3 = v2 & 0x7FFFFFF;
  if ((v2 & 0x7FFFFFF) != 0)
  {
    LODWORD(v4) = 0;
    unint64_t v5 = a1;
    do
    {
      if (v4 >= HIDWORD(v12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v11 + v4) = v5[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)];
      uint64_t v4 = (v12 + 1);
      LODWORD(v12) = v12 + 1;
      v5 += 4;
      --v3;
    }
    while (v3);
    unint64_t v6 = v11;
  }
  else
  {
    uint64_t v4 = 0;
    unint64_t v6 = v13;
  }
  v9[0] = v1;
  v9[1] = v6;
  unsigned __int8 v9[2] = v4;
  int v10 = sub_1CC571B50(v6, (uint64_t)&v6[v4]);
  unint64_t result = sub_1CC5724CC(v9, &v10);
  if (v11 != v13)
  {
    unint64_t v8 = result;
    free(v11);
    return v8;
  }
  return result;
}

uint64_t sub_1CC572A90(uint64_t a1, int a2, uint64_t a3, uint64_t **a4)
{
  if (!a2)
  {
    uint64_t v9 = 0;
    uint64_t result = 0;
    goto LABEL_22;
  }
  uint64_t v4 = 0;
  unsigned int v5 = *(_DWORD *)a3;
  int v6 = a2 - 1;
  for (int i = 1; ; ++i)
  {
    unsigned int v8 = v5 & v6;
    uint64_t v9 = (uint64_t *)(a1 + 8 * (v5 & v6));
    uint64_t v10 = *v9;
    if (*v9 == -8192) {
      goto LABEL_12;
    }
    if (v10 == -4096) {
      break;
    }
    if (*(void *)(a3 + 8) == *(void *)v10)
    {
      uint64_t v11 = *(void *)(a3 + 24);
      if (v11 == (*(_DWORD *)(v10 + 20) & 0x7FFFFFF))
      {
        uint64_t v12 = *(void *)(a3 + 24);
        if (!*(void *)(a3 + 24))
        {
LABEL_18:
          uint64_t result = 1;
          goto LABEL_22;
        }
        uint64_t v13 = *(void **)(a3 + 16);
        BOOL v14 = (void *)(v10 - 32 * v11);
        while (*v13 == *v14)
        {
          v14 += 4;
          ++v13;
          if (!--v12) {
            goto LABEL_18;
          }
        }
      }
    }
LABEL_12:
    if (v4) {
      BOOL v15 = 0;
    }
    else {
      BOOL v15 = v10 == -8192;
    }
    if (v15) {
      uint64_t v4 = (uint64_t *)(a1 + 8 * v8);
    }
    unsigned int v5 = v8 + i;
  }
  uint64_t result = 0;
  if (v4) {
    uint64_t v9 = v4;
  }
LABEL_22:
  *a4 = v9;
  return result;
}

uint64_t *sub_1CC572B64@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (v7)
  {
    unsigned int v8 = 0;
    uint64_t v9 = *(void *)a1;
    unsigned int v10 = *(_DWORD *)a3;
    for (int i = 1; ; ++i)
    {
      unsigned int v12 = v10 & (v7 - 1);
      uint64_t result = (uint64_t *)(v9 + 8 * v12);
      uint64_t v14 = *result;
      if (*result != -8192)
      {
        if (v14 == -4096)
        {
          if (v8) {
            unsigned int v21 = v8;
          }
          else {
            unsigned int v21 = (uint64_t *)(v9 + 8 * v12);
          }
          goto LABEL_23;
        }
        if (*(void *)(a3 + 8) == *(void *)v14)
        {
          uint64_t v15 = *(void *)(a3 + 24);
          if (v15 == (*(_DWORD *)(v14 + 20) & 0x7FFFFFF))
          {
            uint64_t v16 = *(void *)(a3 + 24);
            if (!*(void *)(a3 + 24))
            {
LABEL_18:
              char v20 = 0;
              goto LABEL_24;
            }
            int v17 = *(void **)(a3 + 16);
            int v18 = (void *)(v14 - 32 * v15);
            while (*v17 == *v18)
            {
              v18 += 4;
              ++v17;
              if (!--v16) {
                goto LABEL_18;
              }
            }
          }
        }
      }
      if (v8) {
        BOOL v19 = 0;
      }
      else {
        BOOL v19 = v14 == -8192;
      }
      if (v19) {
        unsigned int v8 = (uint64_t *)(v9 + 8 * v12);
      }
      unsigned int v10 = v12 + i;
    }
  }
  unsigned int v21 = 0;
LABEL_23:
  uint64_t result = sub_1CC572C8C(a1, (uint64_t)a2, a3, v21);
  *uint64_t result = *a2;
  uint64_t v9 = *(void *)a1;
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  char v20 = 1;
LABEL_24:
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v9 + 8 * v7;
  *(unsigned char *)(a4 + 16) = v20;
  return result;
}

uint64_t *sub_1CC572C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1CC572E14(a1, v7);
      unsigned int v21 = 0;
      sub_1CC572A90(*(void *)a1, *(_DWORD *)(a1 + 16), a3, &v21);
      a4 = v21;
    }
    goto LABEL_4;
  }
  sub_1CC572E14(a1, 2 * v7);
  int v9 = *(_DWORD *)(a1 + 16);
  if (!v9)
  {
    a4 = 0;
    goto LABEL_4;
  }
  uint64_t v10 = 0;
  unsigned int v11 = *(_DWORD *)a3;
  int v12 = v9 - 1;
  for (int i = 1; ; ++i)
  {
    unsigned int v14 = v11 & v12;
    a4 = (uint64_t *)(*(void *)a1 + 8 * v14);
    uint64_t v15 = *a4;
    if (*a4 == -8192) {
      goto LABEL_18;
    }
    if (v15 == -4096) {
      break;
    }
    if (*(void *)(a3 + 8) == *(void *)v15)
    {
      uint64_t v16 = *(void *)(a3 + 24);
      if (v16 == (*(_DWORD *)(v15 + 20) & 0x7FFFFFF))
      {
        uint64_t v17 = *(void *)(a3 + 24);
        if (!*(void *)(a3 + 24)) {
          goto LABEL_4;
        }
        int v18 = *(void **)(a3 + 16);
        BOOL v19 = (void *)(v15 - 32 * v16);
        while (*v18 == *v19)
        {
          v19 += 4;
          ++v18;
          if (!--v17) {
            goto LABEL_4;
          }
        }
      }
    }
LABEL_18:
    if (v10) {
      BOOL v20 = 0;
    }
    else {
      BOOL v20 = v15 == -8192;
    }
    if (v20) {
      uint64_t v10 = *(void *)a1 + 8 * v14;
    }
    unsigned int v11 = v14 + i;
  }
  if (v10) {
    a4 = (uint64_t *)v10;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC572E14(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(uint64_t ***)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (v12)
    {
      uint64_t v13 = 8 * v12;
      do
      {
        *result++ = -4096;
        v13 -= 8;
      }
      while (v13);
    }
    if (v3)
    {
      unsigned int v14 = &v4[v3];
      uint64_t v15 = v4;
      do
      {
        if (((unint64_t)*v15 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v16 = *(uint64_t ***)a1;
          int v17 = *(_DWORD *)(a1 + 16);
          int v18 = sub_1CC572FB0(*v15);
          int v19 = v17 - 1;
          BOOL v20 = *v15;
          unsigned int v21 = v18 & (v17 - 1);
          unint64_t v22 = &v16[v21];
          uint64_t v23 = *v22;
          if (*v15 != *v22)
          {
            unint64_t v24 = 0;
            int v25 = 1;
            while (v23 != (uint64_t *)-4096)
            {
              if (v24) {
                BOOL v26 = 0;
              }
              else {
                BOOL v26 = v23 == (uint64_t *)-8192;
              }
              if (v26) {
                unint64_t v24 = v22;
              }
              unsigned int v27 = v21 + v25++;
              unsigned int v21 = v27 & v19;
              unint64_t v22 = &v16[v27 & v19];
              uint64_t v23 = *v22;
              if (v20 == *v22) {
                goto LABEL_27;
              }
            }
            if (v24) {
              unint64_t v22 = v24;
            }
          }
LABEL_27:
          *unint64_t v22 = v20;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v15;
      }
      while (v15 != v14);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC572FB0(uint64_t *a1)
{
  v16[34] = *MEMORY[0x1E4F143B8];
  int v15 = 0;
  uint64_t v1 = *a1;
  uint64_t v2 = *((_DWORD *)a1 + 5) & 0x7FFFFFF;
  if (v2)
  {
    LODWORD(v3) = 0;
    uint64_t v4 = a1;
    do
    {
      if (v3 >= 0x20) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v16[v3] = v4[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)];
      uint64_t v3 = ++v15;
      v4 += 4;
      --v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v3 = 0;
  }
  int v5 = sub_1CC571B50(v16, (uint64_t)&v16[v3]);
  memset(&v16[32], 0, 12);
  unint64_t v6 = &unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    int v14 = v5;
    int v11 = __cxa_guard_acquire(&qword_1EBCBE588);
    unint64_t v6 = &unk_1EBCBE000;
    int v12 = v11;
    int v5 = v14;
    if (v12)
    {
      unint64_t v13 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v13 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v13;
      __cxa_guard_release(&qword_1EBCBE588);
      unint64_t v6 = (void *)&unk_1EBCBE000;
      int v5 = v14;
    }
  }
  uint64_t v7 = v6[176];
  v16[32] = v1;
  LODWORD(v16[33]) = v5;
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ v1 ^ __ROR8__(*(void *)((char *)&v16[32] + 4) + 12, 12));
  unint64_t v9 = __ROR8__(*(void *)((char *)&v16[32] + 4) + 12, 12) ^ (v8 >> 47);
  return (-348639895
        * ((((0x9DDFEA08EB382D69 * (v9 ^ v8)) >> 32) >> 15) ^ (-348639895
                                                                             * (v9 ^ v8)))) ^ HIDWORD(v1);
}

uint64_t *sub_1CC5731BC(uint64_t a1, uint64_t *a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    int v11 = 0;
LABEL_9:
    unint64_t v6 = sub_1CC57327C(a1, (uint64_t)a2, a2, v11);
    *unint64_t v6 = *a2;
    v6[1] = 0;
    return v6;
  }
  int v4 = v3 - 1;
  unsigned int v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  unint64_t v6 = (uint64_t *)(*(void *)a1 + 16 * v5);
  uint64_t v7 = *v6;
  if (*a2 != *v6)
  {
    unint64_t v9 = 0;
    int v10 = 1;
    while (v7 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v7 == -8192;
      }
      if (v12) {
        unint64_t v9 = v6;
      }
      unsigned int v13 = v5 + v10++;
      unsigned int v5 = v13 & v4;
      unint64_t v6 = (uint64_t *)(*(void *)a1 + 16 * (v13 & v4));
      uint64_t v7 = *v6;
      if (*a2 == *v6) {
        return v6;
      }
    }
    if (v9) {
      int v11 = v9;
    }
    else {
      int v11 = v6;
    }
    goto LABEL_9;
  }
  return v6;
}

uint64_t *sub_1CC57327C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1CC5733B4(a1, v7);
      int v17 = 0;
      sub_1CC1DE178(*(void *)a1, *(_DWORD *)(a1 + 16), *a3, &v17);
      a4 = v17;
    }
LABEL_4:
    uint64_t v8 = *a4;
    goto LABEL_5;
  }
  sub_1CC5733B4(a1, 2 * v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (uint64_t *)(*(void *)a1 + 16 * v11);
  uint64_t v12 = *a4;
  if (*a3 != *a4)
  {
    unsigned int v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        unsigned int v13 = a4;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a4 = (uint64_t *)(*(void *)a1 + 16 * v11);
      uint64_t v12 = *a4;
      if (v8 == *a4) {
        goto LABEL_5;
      }
    }
    if (v13) {
      a4 = v13;
    }
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC5733B4(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD5A9D80(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void *sub_1CC573480(uint64_t *a1, void *a2)
{
  int v7 = 0;
  char v4 = sub_1CC5734E0(a1, a2, &v7);
  unint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    unint64_t v5 = sub_1CC57357C((uint64_t)a1, (uint64_t)a2, a2, v7);
    *unint64_t v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_1CC5734E0(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    int v7 = (void *)(*a1 + 16 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      unint64_t v9 = 0;
      int v10 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v9) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          unint64_t v9 = v7;
        }
        unsigned int v13 = v6 + v10++;
        unsigned int v6 = v13 & v5;
        int v7 = (void *)(v4 + 16 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_7;
        }
      }
      uint64_t result = 0;
      if (v9) {
        int v7 = v9;
      }
    }
  }
  else
  {
    int v7 = 0;
    uint64_t result = 0;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

void *sub_1CC57357C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CC573630(a1, v7);
  unint64_t v9 = 0;
  sub_1CC5734E0((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC573630(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD5A9F14(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void *sub_1CC5736FC(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1CC573830(a1, v7);
      int v17 = 0;
      sub_1CB915048((uint64_t *)a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    uint64_t v8 = *a4;
    goto LABEL_5;
  }
  sub_1CC573830(a1, 2 * v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (void *)(*(void *)a1 + 16 * v11);
  uint64_t v12 = *a4;
  if (*a3 != *a4)
  {
    unsigned int v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        unsigned int v13 = a4;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a4 = (void *)(*(void *)a1 + 16 * v11);
      uint64_t v12 = *a4;
      if (v8 == *a4) {
        goto LABEL_5;
      }
    }
    if (v13) {
      a4 = v13;
    }
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC573830(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm::Value **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC5738FC(a1, v4, (llvm::Value *)((char *)v4 + 16 * v3));
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC5738FC(uint64_t result, llvm::Value *a2, llvm::Value *a3)
{
  *(void *)(result + 8) = 0;
  uint64_t v3 = *(unsigned int *)(result + 16);
  if (v3)
  {
    uint64_t v4 = *(void **)result;
    uint64_t v5 = 16 * v3;
    do
    {
      *uint64_t v4 = -4096;
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  for (; a2 != a3; a2 = (llvm::Value *)((char *)a2 + 16))
  {
    uint64_t v6 = *(void *)a2;
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      int v7 = *(_DWORD *)(result + 16) - 1;
      unsigned int v8 = v7 & ((v6 >> 4) ^ (v6 >> 9));
      unint64_t v9 = (void *)(*(void *)result + 16 * v8);
      uint64_t v10 = *v9;
      if (v6 != *v9)
      {
        unsigned int v13 = 0;
        int v14 = 1;
        while (v10 != -4096)
        {
          if (v13) {
            BOOL v15 = 0;
          }
          else {
            BOOL v15 = v10 == -8192;
          }
          if (v15) {
            unsigned int v13 = v9;
          }
          unsigned int v16 = v8 + v14++;
          unsigned int v8 = v16 & v7;
          unint64_t v9 = (void *)(*(void *)result + 16 * (v16 & v7));
          uint64_t v10 = *v9;
          if (v6 == *v9) {
            goto LABEL_7;
          }
        }
        if (v13) {
          unint64_t v9 = v13;
        }
      }
LABEL_7:
      *unint64_t v9 = v6;
      uint64_t v11 = *((void *)a2 + 1);
      *((void *)a2 + 1) = 0;
      v9[1] = v11;
      ++*(_DWORD *)(result + 8);
      uint64_t v12 = (llvm::Value *)*((void *)a2 + 1);
      *((void *)a2 + 1) = 0;
      if (v12)
      {
        int v19 = a3;
        uint64_t v20 = result;
        int v18 = a2;
        llvm::Value::~Value(v12, a2);
        llvm::User::operator delete(v17);
        a3 = v19;
        uint64_t result = v20;
        a2 = v18;
      }
    }
  }
  return result;
}

uint64_t *sub_1CC573A2C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1CC573B64(a1, v7);
      int v17 = 0;
      sub_1CC152E2C(*(void *)a1, *(_DWORD *)(a1 + 16), *a3, &v17);
      a4 = v17;
    }
LABEL_4:
    uint64_t v8 = *a4;
    goto LABEL_5;
  }
  sub_1CC573B64(a1, 2 * v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (uint64_t *)(*(void *)a1 + 16 * v11);
  uint64_t v12 = *a4;
  if (*a3 != *a4)
  {
    unsigned int v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        unsigned int v13 = a4;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a4 = (uint64_t *)(*(void *)a1 + 16 * v11);
      uint64_t v12 = *a4;
      if (v8 == *a4) {
        goto LABEL_5;
      }
    }
    if (v13) {
      a4 = v13;
    }
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC573B64(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD5AA2A0(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

unint64_t sub_1CC573C30(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = sub_1CC571B50(*(void **)(a1 + 8), *(void *)(a1 + 8) + 8 * *(void *)(a1 + 16));
  unint64_t v3 = sub_1CC13A6B8(*(void **)(a1 + 24), *(void *)(a1 + 24) + 4 * *(void *)(a1 + 32));
  unint64_t v4 = sub_1CC36B4D0(*(void **)(a1 + 40), *(void *)(a1 + 40) + 4 * *(void *)(a1 + 48));
  uint64_t v17 = 0;
  memset(v16, 0, sizeof(v16));
  memset(__src, 0, sizeof(__src));
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCBE588))
  {
    unint64_t v11 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v11 = 0xFF51AFD7ED558CCDLL;
    }
    qword_1EBCBE580 = v11;
    __cxa_guard_release(&qword_1EBCBE588);
  }
  unint64_t v18 = qword_1EBCBE580;
  LODWORD(__src[0]) = *(_DWORD *)a1;
  *(void *)((char *)__src + 4) = v2;
  uint64_t v12 = 0;
  unint64_t v5 = sub_1CBFFCBA0(__src, &v12, (void *)((unint64_t)__src | 0xC), (unint64_t)v16, v3);
  uint64_t v13 = v12;
  unint64_t v6 = sub_1CBFFCBA0(__src, &v13, v5, (unint64_t)v16, v4);
  uint64_t v14 = v13;
  int v7 = (char *)sub_1CC2E96A4(__src, &v14, v6, (unint64_t)v16, *(void *)(a1 + 56));
  unsigned int v8 = v7;
  uint64_t v9 = v14;
  if (!v14) {
    return sub_1CBAE06B8(__src, v7 - (char *)__src, v18);
  }
  if (v7 != (char *)__src && v7 != (char *)v16) {
    sub_1CBFFD1E8((char *)__src, v7, (char *)v16);
  }
  sub_1CBFFCF68((unint64_t *)v16, __src);
  return sub_1CBFFD150(v16, (unint64_t)&v8[v9 - (void)__src]);
}

uint64_t sub_1CC573E20(uint64_t a1, int a2, uint64_t a3, uint64_t **a4)
{
  if (a2)
  {
    int v7 = 0;
    unsigned int v8 = *(_DWORD *)a3;
    int v9 = a2 - 1;
    for (int i = 1; ; ++i)
    {
      unsigned int v11 = v8 & v9;
      uint64_t v12 = (uint64_t *)(a1 + 8 * (v8 & v9));
      uint64_t v13 = (void *)*v12;
      if (*v12 == -4096) {
        break;
      }
      if (v13 != (void *)-8192)
      {
        if (*(void *)(a3 + 8) == *v13 && sub_1CC573F00((unsigned __int8 *)(a3 + 16), *v12))
        {
          uint64_t result = 1;
          goto LABEL_16;
        }
        if (v13 == (void *)-4096) {
          break;
        }
      }
      if (v7) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v13 == (void *)-8192;
      }
      if (v14) {
        int v7 = (uint64_t *)(a1 + 8 * v11);
      }
      unsigned int v8 = v11 + i;
    }
    uint64_t result = 0;
    if (v7) {
      uint64_t v12 = v7;
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
  }
LABEL_16:
  *a4 = v12;
  return result;
}

BOOL sub_1CC573F00(unsigned __int8 *a1, uint64_t a2)
{
  int v2 = *(unsigned __int16 *)(a2 + 18);
  if (v2 != *a1) {
    return 0;
  }
  if (a1[1] != *(unsigned __int8 *)(a2 + 17) >> 1) {
    return 0;
  }
  uint64_t v5 = *((void *)a1 + 2);
  if (v5 != (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)) {
    return 0;
  }
  int v6 = (v2 - 53) <= 1 ? *(unsigned __int16 *)(a2 + 24) : 0;
  if (v6 != *((unsigned __int16 *)a1 + 1)) {
    return 0;
  }
  uint64_t v7 = *((void *)a1 + 2);
  if (*((void *)a1 + 2))
  {
    unsigned int v8 = (void *)*((void *)a1 + 1);
    int v9 = (void *)(a2 - 32 * v5);
    while (*v8 == *v9)
    {
      ++v8;
      v9 += 4;
      if (!--v7) {
        goto LABEL_11;
      }
    }
    return 0;
  }
LABEL_11:
  uint64_t v10 = *((void *)a1 + 4);
  if ((v2 & 0xFFFE) == 0x40)
  {
    uint64_t v12 = *(const void **)(a2 + 24);
    uint64_t v11 = *(unsigned int *)(a2 + 32);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  if (v10 != v11 || memcmp(*((const void **)a1 + 3), v12, 4 * v10)) {
    return 0;
  }
  uint64_t v13 = *((void *)a1 + 6);
  if (v2 == 63)
  {
    BOOL v15 = *(const void **)(a2 + 24);
    uint64_t v14 = *(unsigned int *)(a2 + 32);
  }
  else
  {
    uint64_t v14 = 0;
    BOOL v15 = 0;
  }
  if (v13 != v14 || memcmp(*((const void **)a1 + 5), v15, 4 * v13)) {
    return 0;
  }
  if (v2 == 34) {
    uint64_t v16 = *(void *)(a2 + 24);
  }
  else {
    uint64_t v16 = 0;
  }
  return *((void *)a1 + 7) == v16;
}

uint64_t *sub_1CC574050(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = a3;
  uint64_t v7 = a1;
  unsigned int v8 = *(_DWORD *)(a2 + 16);
  if (v8)
  {
    int v9 = 0;
    uint64_t v10 = *(void *)a2;
    unsigned int v11 = *(_DWORD *)a4;
    unsigned int v12 = v8 - 1;
    for (int i = 1; ; ++i)
    {
      unsigned int v14 = v11 & v12;
      BOOL v15 = (uint64_t *)(v10 + 8 * (v11 & v12));
      uint64_t v16 = (void *)*v15;
      if (*v15 == -4096) {
        break;
      }
      if (v16 != (void *)-8192)
      {
        if (*(void *)(a4 + 8) == *v16)
        {
          uint64_t result = (uint64_t *)sub_1CC573F00((unsigned __int8 *)(a4 + 16), *v15);
          if (result)
          {
            char v20 = 0;
            uint64_t v7 = a1;
            goto LABEL_19;
          }
        }
        if (v16 == (void *)-4096) {
          break;
        }
      }
      if (v9) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v16 == (void *)-8192;
      }
      if (v18) {
        int v9 = (uint64_t *)(v10 + 8 * v14);
      }
      unsigned int v11 = v14 + i;
    }
    if (v9) {
      uint64_t v19 = v9;
    }
    else {
      uint64_t v19 = (uint64_t *)(v10 + 8 * v14);
    }
    uint64_t v5 = a3;
    uint64_t v7 = a1;
  }
  else
  {
    uint64_t v19 = 0;
  }
  uint64_t result = sub_1CC574178(a2, a4, v19);
  BOOL v15 = result;
  *uint64_t result = *v5;
  uint64_t v10 = *(void *)a2;
  unsigned int v8 = *(_DWORD *)(a2 + 16);
  char v20 = 1;
LABEL_19:
  *(void *)uint64_t v7 = v15;
  *(void *)(v7 + 8) = v10 + 8 * v8;
  *(unsigned char *)(v7 + 16) = v20;
  return result;
}

uint64_t *sub_1CC574178(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    sub_1CC574340(a1, 2 * v6);
    int v9 = *(_DWORD *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)a1;
      unsigned int v12 = *(_DWORD *)a2;
      int v13 = v9 - 1;
      for (int i = 1; ; ++i)
      {
        unsigned int v15 = v12 & v13;
        a3 = (uint64_t *)(v11 + 8 * (v12 & v13));
        uint64_t v16 = (void *)*a3;
        if (*a3 == -4096) {
          break;
        }
        if (v16 != (void *)-8192)
        {
          if (*(void *)(a2 + 8) == *v16 && sub_1CC573F00((unsigned __int8 *)(a2 + 16), *a3)) {
            goto LABEL_3;
          }
          if (v16 == (void *)-4096) {
            goto LABEL_32;
          }
        }
        if (v10) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = v16 == (void *)-8192;
        }
        if (v17) {
          uint64_t v10 = (uint64_t *)(v11 + 8 * v15);
        }
        unsigned int v12 = v15 + i;
      }
      goto LABEL_32;
    }
LABEL_35:
    a3 = 0;
    goto LABEL_3;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3) {
    goto LABEL_3;
  }
  sub_1CC574340(a1, v6);
  int v18 = *(_DWORD *)(a1 + 16);
  if (!v18) {
    goto LABEL_35;
  }
  uint64_t v10 = 0;
  uint64_t v19 = *(void *)a1;
  unsigned int v20 = *(_DWORD *)a2;
  int v21 = v18 - 1;
  for (int j = 1; ; ++j)
  {
    unsigned int v23 = v20 & v21;
    a3 = (uint64_t *)(v19 + 8 * (v20 & v21));
    unint64_t v24 = (void *)*a3;
    if (*a3 == -4096) {
      break;
    }
    if (v24 != (void *)-8192)
    {
      if (*(void *)(a2 + 8) == *v24 && sub_1CC573F00((unsigned __int8 *)(a2 + 16), *a3)) {
        goto LABEL_3;
      }
      if (v24 == (void *)-4096) {
        break;
      }
    }
    if (v10) {
      BOOL v25 = 0;
    }
    else {
      BOOL v25 = v24 == (void *)-8192;
    }
    if (v25) {
      uint64_t v10 = (uint64_t *)(v19 + 8 * v23);
    }
    unsigned int v20 = v23 + j;
  }
LABEL_32:
  if (v10) {
    a3 = v10;
  }
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CC574340(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  unint64_t v4 = *(uint64_t ***)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (v12)
    {
      uint64_t v13 = 8 * v12;
      do
      {
        *result++ = -4096;
        v13 -= 8;
      }
      while (v13);
    }
    if (v3)
    {
      unsigned int v14 = &v4[v3];
      unsigned int v15 = v4;
      do
      {
        if (((unint64_t)*v15 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v16 = *(uint64_t ***)a1;
          int v17 = *(_DWORD *)(a1 + 16);
          int v18 = sub_1CC5744DC(*v15);
          int v19 = v17 - 1;
          unsigned int v20 = *v15;
          unsigned int v21 = v18 & (v17 - 1);
          unint64_t v22 = &v16[v21];
          unsigned int v23 = *v22;
          if (*v15 != *v22)
          {
            unint64_t v24 = 0;
            int v25 = 1;
            while (v23 != (uint64_t *)-4096)
            {
              if (v24) {
                BOOL v26 = 0;
              }
              else {
                BOOL v26 = v23 == (uint64_t *)-8192;
              }
              if (v26) {
                unint64_t v24 = v22;
              }
              unsigned int v27 = v21 + v25++;
              unsigned int v21 = v27 & v19;
              unint64_t v22 = &v16[v27 & v19];
              unsigned int v23 = *v22;
              if (v20 == *v22) {
                goto LABEL_27;
              }
            }
            if (v24) {
              unint64_t v22 = v24;
            }
          }
LABEL_27:
          *unint64_t v22 = v20;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v15;
      }
      while (v15 != v14);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC5744DC(uint64_t *a1)
{
  v42[34] = *MEMORY[0x1E4F143B8];
  uint64_t v40 = v42;
  uint64_t v41 = 0x2000000000;
  int v1 = *((unsigned __int16 *)a1 + 9);
  if ((v1 - 53) <= 1) {
    __int16 v2 = *((_WORD *)a1 + 12);
  }
  else {
    __int16 v2 = 0;
  }
  char v3 = *((_WORD *)a1 + 9);
  if ((v1 & 0xFFFE) == 0x40)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v8 = 0;
    uint64_t v7 = a1[3];
    uint64_t v6 = *((unsigned int *)a1 + 8);
  }
  else if (v1 == 34)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = a1[3];
  }
  else if (v1 == 63)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v4 = a1[3];
    uint64_t v5 = *((unsigned int *)a1 + 8);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((unsigned __int8 *)a1 + 17) >> 1;
  int v11 = *((_DWORD *)a1 + 5);
  uint64_t v12 = v11 & 0x7FFFFFF;
  if ((v11 & 0x7FFFFFF) != 0)
  {
    LODWORD(v13) = 0;
    unsigned int v14 = a1;
    do
    {
      if (v13 >= HIDWORD(v41)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v40 + v13) = v14[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)];
      uint64_t v13 = (v41 + 1);
      LODWORD(v41) = v41 + 1;
      v14 += 4;
      --v12;
    }
    while (v12);
    unsigned int v15 = v40;
  }
  else
  {
    uint64_t v13 = 0;
    unsigned int v15 = v42;
  }
  uint64_t v30 = v9;
  v31[0] = v3;
  v31[1] = v10;
  __int16 v32 = v2;
  uint64_t v33 = v15;
  uint64_t v34 = v13;
  uint64_t v35 = v7;
  uint64_t v36 = v6;
  uint64_t v37 = v4;
  uint64_t v38 = v5;
  uint64_t v39 = v8;
  int v16 = sub_1CC573C30((uint64_t)v31);
  memset(&v42[32], 0, 12);
  int v17 = &unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    int v29 = v16;
    int v24 = __cxa_guard_acquire(&qword_1EBCBE588);
    int v17 = &unk_1EBCBE000;
    int v25 = v24;
    int v16 = v29;
    if (v25)
    {
      unint64_t v26 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v26 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v26;
      __cxa_guard_release(&qword_1EBCBE588);
      int v17 = (void *)&unk_1EBCBE000;
      int v16 = v29;
    }
  }
  uint64_t v18 = v17[176];
  uint64_t v19 = v30;
  v42[32] = v30;
  LODWORD(v42[33]) = v16;
  uint64_t v20 = *(void *)((char *)&v42[32] + 4);
  if (v40 != v42)
  {
    uint64_t v28 = *(void *)((char *)&v42[32] + 4);
    uint64_t v27 = v18;
    free(v40);
    uint64_t v20 = v28;
    uint64_t v19 = v30;
    uint64_t v18 = v27;
  }
  unint64_t v21 = 0x9DDFEA08EB382D69 * (v18 ^ v19 ^ __ROR8__(v20 + 12, 12));
  unint64_t v22 = __ROR8__(v20 + 12, 12) ^ (v21 >> 47);
  return (-348639895
        * ((((0x9DDFEA08EB382D69 * (v22 ^ v21)) >> 32) >> 15) ^ (-348639895
                                                                               * (v22 ^ v21)))) ^ v20;
}

void sub_1CC5747CC(llvm::Value *a1)
{
  uint64_t v2 = *((void *)a1 + 4);
  *((void *)a1 + 4) = 0;
  if (v2)
  {
    sub_1CC5747CC(v2);
    int v3 = *(_DWORD *)(v2 + 20);
    if ((v3 & 0x40000000) != 0)
    {
      int v11 = *(char **)(v2 - 8);
      int v10 = (char *)(v2 - 8);
      uint64_t v9 = v11;
      uint64_t v12 = v3 & 0x7FFFFFF;
      if (v12)
      {
        uint64_t v13 = 32 * v12;
        do
        {
          unsigned int v14 = &v9[v13];
          if (*(void *)&v9[v13 - 32])
          {
            **((void **)v14 - 2) = *((void *)v14 - 3);
            uint64_t v15 = *((void *)v14 - 3);
            if (v15) {
              *(void *)(v15 + 16) = *((void *)v14 - 2);
            }
          }
          v13 -= 32;
        }
        while (v13);
      }
      operator delete(v9);
      uint64_t v5 = v10;
    }
    else
    {
      uint64_t v4 = v3 & 0x7FFFFFF;
      uint64_t v5 = (char *)(v2 - 32 * v4);
      if (v4)
      {
        uint64_t v6 = (void **)(v2 - 16);
        uint64_t v7 = -32 * v4;
        do
        {
          if (*(v6 - 2))
          {
            **uint64_t v6 = *(v6 - 1);
            uint64_t v8 = (uint64_t)*(v6 - 1);
            if (v8) {
              *(void *)(v8 + 16) = *v6;
            }
          }
          v6 -= 4;
          v7 += 32;
        }
        while (v7);
      }
      if (v3 < 0) {
        uint64_t v5 = &v5[-*((void *)v5 - 1) - 8];
      }
    }
    operator delete(v5);
  }

  llvm::Value::~Value(a1);
}

void sub_1CC5748CC(uint64_t a1)
{
  int v1 = *(llvm::Value **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v1)
  {
    sub_1CC5747CC(v1);
    int v2 = *((_DWORD *)v1 + 5);
    if ((v2 & 0x40000000) != 0)
    {
      int v10 = (char *)*((void *)v1 - 1);
      uint64_t v9 = (char *)v1 - 8;
      uint64_t v8 = v10;
      uint64_t v11 = v2 & 0x7FFFFFF;
      if (v11)
      {
        uint64_t v12 = 32 * v11;
        do
        {
          uint64_t v13 = &v8[v12];
          if (*(void *)&v8[v12 - 32])
          {
            **((void **)v13 - 2) = *((void *)v13 - 3);
            uint64_t v14 = *((void *)v13 - 3);
            if (v14) {
              *(void *)(v14 + 16) = *((void *)v13 - 2);
            }
          }
          v12 -= 32;
        }
        while (v12);
      }
      operator delete(v8);
      uint64_t v4 = v9;
    }
    else
    {
      uint64_t v3 = v2 & 0x7FFFFFF;
      uint64_t v4 = (char *)v1 - 32 * v3;
      if (v3)
      {
        uint64_t v5 = (void **)((char *)v1 - 16);
        uint64_t v6 = -32 * v3;
        do
        {
          if (*(v5 - 2))
          {
            **uint64_t v5 = *(v5 - 1);
            uint64_t v7 = (uint64_t)*(v5 - 1);
            if (v7) {
              *(void *)(v7 + 16) = *v5;
            }
          }
          v5 -= 4;
          v6 += 32;
        }
        while (v6);
      }
      if (v2 < 0) {
        uint64_t v4 = &v4[-*((void *)v4 - 1) - 8];
      }
    }
    operator delete(v4);
  }

  JUMPOUT(0x1D25D9CD0);
}

void *sub_1CC5749CC(void *result, size_t a2, int __c)
{
  uint64_t v5 = result;
  if (result[2] < a2)
  {
    result[1] = 0;
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  size_t v6 = result[1];
  if (v6 >= a2) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = result[1];
  }
  if (v7)
  {
    uint64_t result = memset((void *)*result, __c, v7);
    size_t v6 = v5[1];
  }
  if (a2 > v6) {
    uint64_t result = memset((void *)(*v5 + v6), __c, a2 - v6);
  }
  v5[1] = a2;
  return result;
}

unint64_t *sub_1CC574A70(void *a1, unint64_t a2, __int16 a3)
{
  if (a1[2] < a2)
  {
    a1[1] = 0;
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  uint64_t v3 = (_WORD *)*a1;
  unint64_t v6 = a1[1];
  uint64_t result = a1 + 1;
  unint64_t v5 = v6;
  if (v6 >= a2) {
    unint64_t v7 = a2;
  }
  else {
    unint64_t v7 = v5;
  }
  if (v7)
  {
    uint64_t v8 = v3;
    do
    {
      *v8++ = a3;
      --v7;
    }
    while (v7);
  }
  unint64_t v9 = v5 - a2;
  if (v5 < a2)
  {
    int v10 = &v3[v5];
    do
      *v10++ = a3;
    while (!__CFADD__(v9++, 1));
  }
  *uint64_t result = a2;
  return result;
}

void LLVMContextCreate()
{
}

uint64_t LLVMGetGlobalContext()
{
  if (!atomic_load_explicit(&qword_1EA61BF08, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EA61BF08, (void *(*)(void))sub_1CC58168C, (void (*)(void *))sub_1CC5816C8);
  }
  return qword_1EA61BF08;
}

uint64_t *LLVMContextSetDiagnosticHandler(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *result;
  *(void *)(*(void *)(*result + 72) + 16) = a2;
  *(void *)(*(void *)(v3 + 72) + 8) = a3;
  *(unsigned char *)(v3 + 80) = 0;
  return result;
}

uint64_t LLVMContextGetDiagnosticHandler(uint64_t a1)
{
  return *(void *)(*(void *)(*(void *)a1 + 72) + 16);
}

uint64_t LLVMContextGetDiagnosticContext(uint64_t a1)
{
  return *(void *)(*(void *)(*(void *)a1 + 72) + 8);
}

uint64_t *LLVMContextSetYieldCallback(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *result;
  *(void *)(v3 + 136) = a2;
  *(void *)(v3 + 144) = a3;
  return result;
}

uint64_t LLVMContextShouldDiscardValueNames(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)a1 + 2664);
}

uint64_t LLVMContextSetDiscardValueNames(uint64_t result, int a2)
{
  *(unsigned char *)(*(void *)result + 2664) = a2 != 0;
  return result;
}

llvm::LLVMContextImpl **LLVMContextDispose(llvm::LLVMContextImpl **result, llvm::Constant *a2)
{
  if (result)
  {
    llvm::LLVMContext::~LLVMContext(result, a2);
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

uint64_t LLVMGetMDKindIDInContext(uint64_t *a1, unsigned __int8 *a2, unsigned int a3)
{
  return llvm::LLVMContext::getMDKindID(a1, a2, a3);
}

uint64_t LLVMGetMDKindID(unsigned __int8 *a1, unsigned int a2)
{
  if (!atomic_load_explicit(&qword_1EA61BF08, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EA61BF08, (void *(*)(void))sub_1CC58168C, (void (*)(void *))sub_1CC5816C8);
  }
  uint64_t v4 = (uint64_t *)qword_1EA61BF08;

  return llvm::LLVMContext::getMDKindID(v4, a1, a2);
}

uint64_t LLVMGetLastEnumAttributeKind()
{
  return 81;
}

unint64_t LLVMCreateEnumAttribute(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  if (a2 == 73 || a2 == 69) {
    return llvm::Attribute::get(a1, a2, 0);
  }
  else {
    return llvm::Attribute::get(a1, a2, a3);
  }
}

uint64_t LLVMGetEnumAttributeKind(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 12);
  }
  return result;
}

uint64_t LLVMGetEnumAttributeValue(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 8)) {
      return *(void *)(result + 16);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMGetTypeAttributeValue(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

unsigned int *LLVMCreateStringAttribute(uint64_t *a1, unsigned __int8 *a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5)
{
  return llvm::Attribute::get(a1, a2, a3, a4, a5);
}

uint64_t LLVMGetStringAttributeKind(uint64_t result, _DWORD *a2)
{
  uint64_t v2 = result;
  if (result)
  {
    result += 24;
    LODWORD(v2) = *(_DWORD *)(v2 + 12);
  }
  *a2 = v2;
  return result;
}

uint64_t LLVMGetStringAttributeValue(uint64_t result, _DWORD *a2)
{
  if (result)
  {
    int v2 = *(_DWORD *)(result + 16);
    result += *(unsigned int *)(result + 12) + 25;
  }
  else
  {
    int v2 = 0;
  }
  *a2 = v2;
  return result;
}

BOOL LLVMIsEnumAttribute(BOOL result)
{
  if (result) {
    return !*(unsigned char *)(result + 8) || *(unsigned __int8 *)(result + 8) == 1;
  }
  return result;
}

BOOL LLVMIsStringAttribute(BOOL result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 8) == 2;
  }
  return result;
}

BOOL LLVMIsTypeAttribute(BOOL result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 8) == 3;
  }
  return result;
}

char *LLVMGetDiagInfoDescription(uint64_t a1)
{
  v15[0] = 0;
  v15[1] = 0;
  uint64_t v16 = 0;
  int v7 = 0;
  char v11 = 0;
  uint64_t v12 = 0;
  uint64_t v14 = v15;
  int v13 = 0;
  v5[1] = &v6;
  unint64_t v6 = &unk_1F2646F30;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  int v10 = 0;
  v5[0] = &unk_1F26169D0;
  (*(void (**)(uint64_t, void *))(*(void *)a1 + 24))(a1, v5);
  if (v10 != v8)
  {
    int v10 = v8;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v6, v8);
  }
  char v1 = HIBYTE(v16);
  if (v16 >= 0) {
    int v2 = (const char *)v15;
  }
  else {
    int v2 = (const char *)v15[0];
  }
  uint64_t v3 = strdup(v2);
  unint64_t v6 = &unk_1F2646B98;
  if (v13 == 1 && v8)
  {
    MEMORY[0x1D25D9CB0](v8, 0x1000C8077774924);
    char v1 = HIBYTE(v16);
  }
  if (v1 < 0) {
    operator delete(v15[0]);
  }
  return v3;
}

uint64_t LLVMGetDiagInfoSeverity(uint64_t a1)
{
  unsigned int v1 = *(char *)(a1 + 12);
  if (v1 - 1 >= 3) {
    return 0;
  }
  else {
    return v1;
  }
}

void LLVMModuleCreateWithName()
{
}

void LLVMModuleCreateWithNameInContext()
{
}

llvm::Module *LLVMDisposeModule(llvm::Module *result)
{
  if (result)
  {
    llvm::Module::~Module(result);
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

uint64_t LLVMGetModuleIdentifier(uint64_t a1, void *a2)
{
  if (*(char *)(a1 + 191) < 0) {
    uint64_t v2 = *(void *)(a1 + 176);
  }
  else {
    uint64_t v2 = *(unsigned __int8 *)(a1 + 191);
  }
  uint64_t v3 = a1 + 168;
  *a2 = v2;
  if (*(char *)(a1 + 191) < 0) {
    return *(void *)v3;
  }
  return v3;
}

double LLVMSetModuleIdentifier(uint64_t a1, void *__src, size_t __n)
{
  if (__n >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__n >= 0x17)
  {
    size_t v7 = (__n & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__n | 7) != 0x17) {
      size_t v7 = __n | 7;
    }
    size_t v8 = v7 + 1;
    p_dst = (long long *)operator new(v7 + 1);
    *((void *)&__dst + 1) = __n;
    unint64_t v12 = v8 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v12) = __n;
  p_dst = &__dst;
  if (__n) {
LABEL_8:
  }
    memcpy(p_dst, __src, __n);
  *((unsigned char *)p_dst + __n) = 0;
  uint64_t v9 = (void **)(a1 + 168);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*v9);
  }
  double result = *(double *)&__dst;
  *(_OWORD *)uint64_t v9 = __dst;
  *(void *)(a1 + 184) = v12;
  return result;
}

uint64_t LLVMGetSourceFileName(uint64_t a1, void *a2)
{
  if (*(char *)(a1 + 215) < 0) {
    uint64_t v2 = *(void *)(a1 + 200);
  }
  else {
    uint64_t v2 = *(unsigned __int8 *)(a1 + 215);
  }
  uint64_t v3 = a1 + 192;
  *a2 = v2;
  if (*(char *)(a1 + 215) < 0) {
    return *(void *)v3;
  }
  return v3;
}

uint64_t LLVMGetDataLayoutStr(uint64_t a1)
{
  uint64_t result = a1 + 480;
  if (*(char *)(a1 + 503) < 0) {
    return *(void *)result;
  }
  return result;
}

uint64_t LLVMGetDataLayout(uint64_t a1)
{
  uint64_t result = a1 + 480;
  if (*(char *)(a1 + 503) < 0) {
    return *(void *)result;
  }
  return result;
}

void LLVMSetDataLayout(uint64_t a1, char *__s)
{
  if (__s) {
    size_t v4 = strlen(__s);
  }
  else {
    size_t v4 = 0;
  }

  llvm::DataLayout::reset(a1 + 272, __s, v4);
}

uint64_t LLVMGetTarget(uint64_t a1)
{
  uint64_t result = a1 + 216;
  if (*(char *)(a1 + 239) < 0) {
    return *(void *)result;
  }
  return result;
}

double LLVMSetTarget(uint64_t a1, char *__s)
{
  if (__s) {
    size_t v4 = strlen(__s);
  }
  else {
    size_t v4 = 0;
  }

  return sub_1CBF4BD94(a1, __s, v4);
}

char *LLVMCopyModuleFlagsMetadata(llvm::Module *a1, void *a2)
{
  v16[24] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = v16;
  uint64_t v15 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(a1, (uint64_t)&v14);
  int v3 = v15;
  size_t v4 = (char *)malloc_type_malloc(32 * v15, 0x4065EBACuLL);
  if (!v4 && (v3 || (size_t v4 = (char *)malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v5 = v15;
  unint64_t v6 = v14;
  if (v15)
  {
    size_t v7 = v4 + 16;
    size_t v8 = (char *)v14 + 16;
    uint64_t v9 = v15;
    do
    {
      *((_DWORD *)v7 - 4) = *((_DWORD *)v8 - 4) - 1;
      int v10 = *(uint64_t **)(*(v8 - 1) + 8);
      uint64_t v11 = *v10;
      *(v7 - 1) = v10 + 3;
      *size_t v7 = v11;
      uint64_t v12 = *v8;
      v8 += 3;
      v7[1] = v12;
      v7 += 4;
      --v9;
    }
    while (v9);
  }
  else
  {
    uint64_t v5 = 0;
  }
  *a2 = v5;
  if (v6 != v16) {
    free(v6);
  }
  return v4;
}

uint64_t LLVMModuleFlagEntriesGetFlagBehavior(uint64_t a1, unsigned int a2)
{
  return *(unsigned int *)(a1 + 32 * a2);
}

uint64_t LLVMModuleFlagEntriesGetKey(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v3 = a1 + 32 * a2;
  uint64_t result = *(void *)(v3 + 8);
  *a3 = *(void *)(v3 + 16);
  return result;
}

uint64_t LLVMModuleFlagEntriesGetMetadata(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 32 * a2 + 24);
}

uint64_t LLVMGetModuleFlag(llvm::Module *a1, const void *a2, size_t a3)
{
  v15[24] = *MEMORY[0x1E4F143B8];
  int v13 = v15;
  uint64_t v14 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(a1, (uint64_t)&v13);
  uint64_t v5 = v13;
  if (v14)
  {
    unint64_t v6 = (uint64_t *)((char *)v13 + 16);
    uint64_t v7 = 24 * v14;
    while (1)
    {
      size_t v8 = *(uint64_t **)(*(v6 - 1) + 8);
      uint64_t v10 = *v8;
      uint64_t v9 = v8 + 3;
      if (v10 == a3 && (!a3 || !memcmp(a2, v9, a3))) {
        break;
      }
      v6 += 3;
      v7 -= 24;
      if (!v7) {
        goto LABEL_9;
      }
    }
    uint64_t v11 = *v6;
  }
  else
  {
LABEL_9:
    uint64_t v11 = 0;
  }
  if (v5 != v15) {
    free(v5);
  }
  return v11;
}

void *LLVMAddModuleFlag(uint64_t **a1, int a2, unsigned __int8 *a3, size_t a4, uint64_t a5)
{
  return llvm::Module::addModuleFlag(a1, (llvm::Type *)(a2 + 1), a3, a4, a5);
}

void *LLVMDumpModule(llvm *a1)
{
  uint64_t v2 = (llvm::raw_ostream *)llvm::errs(a1);

  return llvm::Module::print((const std::string *)a1, v2, 0, 0, 1);
}

uint64_t LLVMPrintModuleToFile(const std::string *a1, char *a2, char **a3)
{
  v20.__val_ = 0;
  v20.__cat_ = std::system_category();
  if (a2) {
    size_t v6 = strlen(a2);
  }
  else {
    size_t v6 = 0;
  }
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v18, a2, v6, (uint64_t)&v20, 3);
  if (v20.__val_)
  {
    std::error_code::message(&v17, &v20);
    int v12 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
    uint64_t v10 = (void *)v17.__r_.__value_.__r.__words[0];
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v13 = &v17;
    }
    else {
      int v13 = (std::string *)v17.__r_.__value_.__r.__words[0];
    }
    *a3 = strdup((const char *)v13);
    if ((v12 & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  llvm::Module::print(a1, (llvm::raw_ostream *)v18, 0, 0, 0);
  llvm::raw_fd_ostream::close((llvm::raw_fd_ostream *)v18);
  uint64_t v7 = 0;
  if (v19.__val_)
  {
    std::error_code v15 = v19;
    std::error_code::message(&v16, &v15);
    size_t v8 = std::string::insert(&v16, 0, "Error printing to file: ");
    std::string v17 = *v8;
    v8->__r_.__value_.__r.__words[0] = 0;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    int v9 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
    uint64_t v10 = (void *)v17.__r_.__value_.__r.__words[0];
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v17;
    }
    else {
      uint64_t v11 = (std::string *)v17.__r_.__value_.__r.__words[0];
    }
    *a3 = strdup((const char *)v11);
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_18;
    }
LABEL_17:
    operator delete(v10);
LABEL_18:
    uint64_t v7 = 1;
  }
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v18);
  return v7;
}

char *LLVMPrintModuleToString(const std::string *a1)
{
  v14[0] = 0;
  v14[1] = 0;
  uint64_t v15 = 0;
  int v6 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  int v13 = v14;
  int v12 = 0;
  uint64_t v5 = &unk_1F2646F30;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  int v9 = 0;
  llvm::Module::print(a1, (llvm::raw_ostream *)&v5, 0, 0, 0);
  if (v9 != v7)
  {
    int v9 = v7;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v5, v7);
  }
  char v1 = HIBYTE(v15);
  if (v15 >= 0) {
    uint64_t v2 = (const char *)v14;
  }
  else {
    uint64_t v2 = (const char *)v14[0];
  }
  uint64_t v3 = strdup(v2);
  uint64_t v5 = &unk_1F2646B98;
  if (v12 == 1 && v7)
  {
    MEMORY[0x1D25D9CB0](v7, 0x1000C8077774924);
    char v1 = HIBYTE(v15);
  }
  if (v1 < 0) {
    operator delete(v14[0]);
  }
  return v3;
}

void LLVMSetModuleInlineAsm(uint64_t a1, char *__s)
{
  if (__s) {
    std::string::size_type v4 = strlen(__s);
  }
  else {
    std::string::size_type v4 = 0;
  }

  LLVMSetModuleInlineAsm2_0(a1, __s, v4);
}

uint64_t LLVMGetModuleInlineAsm(uint64_t a1, void *a2)
{
  if (*(char *)(a1 + 111) < 0) {
    uint64_t v2 = *(void *)(a1 + 96);
  }
  else {
    uint64_t v2 = *(unsigned __int8 *)(a1 + 111);
  }
  uint64_t v3 = a1 + 88;
  *a2 = v2;
  if (*(char *)(a1 + 111) < 0) {
    return *(void *)v3;
  }
  return v3;
}

uint64_t LLVMGetInlineAsm(llvm::PointerType *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, int a9)
{
  return llvm::InlineAsm::get(a1, a2, a3, a4, a5, a6 != 0, a7 != 0, a8 == 1, a9 != 0);
}

uint64_t LLVMGetModuleContext(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t LLVMGetTypeKind(uint64_t a1)
{
  return *(unsigned int *)((char *)&unk_1CFAC8394 + ((uint64_t)((unint64_t)*(unsigned int *)(a1 + 8) << 56) >> 54));
}

uint64_t LLVMTypeIsSized(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 8);
  if (v1 > 0x11) {
    goto LABEL_6;
  }
  uint64_t v2 = 1;
  if (((1 << v1) & 0xAC7F) == 0)
  {
    if (((1 << v1) & 0x30000) != 0) {
      return llvm::Type::isSizedDerivedType(a1, 0);
    }
LABEL_6:
    if ((v1 & 0xFE) != 0x12 && v1 != 21) {
      return 0;
    }
    return llvm::Type::isSizedDerivedType(a1, 0);
  }
  return v2;
}

uint64_t LLVMGetTypeContext(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t LLVMDumpType(llvm *a1)
{
  uint64_t v2 = (llvm::raw_ostream *)llvm::errs(a1);

  return llvm::Type::print(a1, v2, 1, 0);
}

char *LLVMPrintTypeToString(llvm::Type *a1)
{
  v14[0] = 0;
  v14[1] = 0;
  uint64_t v15 = 0;
  int v6 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  int v13 = v14;
  int v12 = 0;
  uint64_t v5 = &unk_1F2646F30;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  int v9 = 0;
  if (a1) {
    llvm::Type::print(a1, (llvm::raw_ostream *)&v5, 0, 0);
  }
  else {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v5, "Printing <null> Type", 0x14uLL);
  }
  if (v9 != v7)
  {
    int v9 = v7;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v5, v7);
  }
  char v1 = HIBYTE(v15);
  if (v15 >= 0) {
    uint64_t v2 = (const char *)v14;
  }
  else {
    uint64_t v2 = (const char *)v14[0];
  }
  uint64_t v3 = strdup(v2);
  uint64_t v5 = &unk_1F2646B98;
  if (v12 == 1 && v7)
  {
    MEMORY[0x1D25D9CB0](v7, 0x1000C8077774924);
    char v1 = HIBYTE(v15);
  }
  if (v1 < 0) {
    operator delete(v14[0]);
  }
  return v3;
}

uint64_t LLVMInt1TypeInContext(void *a1)
{
  return *a1 + 1888;
}

uint64_t LLVMInt8TypeInContext(void *a1)
{
  return *a1 + 1912;
}

uint64_t LLVMInt16TypeInContext(void *a1)
{
  return *a1 + 1936;
}

uint64_t LLVMInt32TypeInContext(void *a1)
{
  return *a1 + 1960;
}

uint64_t LLVMInt64TypeInContext(void *a1)
{
  return *a1 + 1984;
}

uint64_t LLVMInt128TypeInContext(void *a1)
{
  return *a1 + 2008;
}

uint64_t LLVMInt1Type()
{
  if (!atomic_load_explicit(&qword_1EA61BF08, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EA61BF08, (void *(*)(void))sub_1CC58168C, (void (*)(void *))sub_1CC5816C8);
  }
  return *(void *)qword_1EA61BF08 + 1888;
}

uint64_t LLVMInt8Type()
{
  if (!atomic_load_explicit(&qword_1EA61BF08, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EA61BF08, (void *(*)(void))sub_1CC58168C, (void (*)(void *))sub_1CC5816C8);
  }
  return *(void *)qword_1EA61BF08 + 1912;
}

uint64_t LLVMInt16Type()
{
  if (!atomic_load_explicit(&qword_1EA61BF08, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EA61BF08, (void *(*)(void))sub_1CC58168C, (void (*)(void *))sub_1CC5816C8);
  }
  return *(void *)qword_1EA61BF08 + 1936;
}

uint64_t LLVMInt32Type()
{
  if (!atomic_load_explicit(&qword_1EA61BF08, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EA61BF08, (void *(*)(void))sub_1CC58168C, (void (*)(void *))sub_1CC5816C8);
  }
  return *(void *)qword_1EA61BF08 + 1960;
}

uint64_t LLVMInt64Type()
{
  if (!atomic_load_explicit(&qword_1EA61BF08, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EA61BF08, (void *(*)(void))sub_1CC58168C, (void (*)(void *))sub_1CC5816C8);
  }
  return *(void *)qword_1EA61BF08 + 1984;
}

uint64_t LLVMInt128Type()
{
  if (!atomic_load_explicit(&qword_1EA61BF08, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EA61BF08, (void *(*)(void))sub_1CC58168C, (void (*)(void *))sub_1CC5816C8);
  }
  return *(void *)qword_1EA61BF08 + 2008;
}

uint64_t LLVMIntType(llvm::LLVMContext *a1)
{
  if (!atomic_load_explicit(&qword_1EA61BF08, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EA61BF08, (void *(*)(void))sub_1CC58168C, (void (*)(void *))sub_1CC5816C8);
  }
  uint64_t v2 = (llvm::IntegerType *)qword_1EA61BF08;

  return llvm::IntegerType::get(v2, a1);
}

uint64_t LLVMGetIntTypeWidth(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) >> 8;
}

uint64_t LLVMHalfTypeInContext(void *a1)
{
  return *a1 + 1624;
}

uint64_t LLVMBFloatTypeInContext(void *a1)
{
  return *a1 + 1648;
}

uint64_t LLVMFloatTypeInContext(void *a1)
{
  return *a1 + 1672;
}

uint64_t LLVMDoubleTypeInContext(void *a1)
{
  return *a1 + 1696;
}

uint64_t LLVMX86FP80TypeInContext(void *a1)
{
  return *a1 + 1768;
}

uint64_t LLVMFP128TypeInContext(void *a1)
{
  return *a1 + 1792;
}

uint64_t LLVMPPCFP128TypeInContext(void *a1)
{
  return *a1 + 1816;
}

uint64_t LLVMX86MMXTypeInContext(void *a1)
{
  return *a1 + 1840;
}

uint64_t LLVMX86AMXTypeInContext(void *a1)
{
  return *a1 + 1864;
}

uint64_t LLVMHalfType()
{
  if (!atomic_load_explicit(&qword_1EA61BF08, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EA61BF08, (void *(*)(void))sub_1CC58168C, (void (*)(void *))sub_1CC5816C8);
  }
  return *(void *)qword_1EA61BF08 + 1624;
}

uint64_t LLVMBFloatType()
{
  if (!atomic_load_explicit(&qword_1EA61BF08, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EA61BF08, (void *(*)(void))sub_1CC58168C, (void (*)(void *))sub_1CC5816C8);
  }
  return *(void *)qword_1EA61BF08 + 1648;
}

uint64_t LLVMFloatType()
{
  if (!atomic_load_explicit(&qword_1EA61BF08, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EA61BF08, (void *(*)(void))sub_1CC58168C, (void (*)(void *))sub_1CC5816C8);
  }
  return *(void *)qword_1EA61BF08 + 1672;
}

uint64_t LLVMDoubleType()
{
  if (!atomic_load_explicit(&qword_1EA61BF08, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EA61BF08, (void *(*)(void))sub_1CC58168C, (void (*)(void *))sub_1CC5816C8);
  }
  return *(void *)qword_1EA61BF08 + 1696;
}

uint64_t LLVMX86FP80Type()
{
  if (!atomic_load_explicit(&qword_1EA61BF08, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EA61BF08, (void *(*)(void))sub_1CC58168C, (void (*)(void *))sub_1CC5816C8);
  }
  return *(void *)qword_1EA61BF08 + 1768;
}

uint64_t LLVMFP128Type()
{
  if (!atomic_load_explicit(&qword_1EA61BF08, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EA61BF08, (void *(*)(void))sub_1CC58168C, (void (*)(void *))sub_1CC5816C8);
  }
  return *(void *)qword_1EA61BF08 + 1792;
}

uint64_t LLVMPPCFP128Type()
{
  if (!atomic_load_explicit(&qword_1EA61BF08, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EA61BF08, (void *(*)(void))sub_1CC58168C, (void (*)(void *))sub_1CC5816C8);
  }
  return *(void *)qword_1EA61BF08 + 1816;
}

uint64_t LLVMX86MMXType()
{
  if (!atomic_load_explicit(&qword_1EA61BF08, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EA61BF08, (void *(*)(void))sub_1CC58168C, (void (*)(void *))sub_1CC5816C8);
  }
  return *(void *)qword_1EA61BF08 + 1840;
}

uint64_t LLVMX86AMXType()
{
  if (!atomic_load_explicit(&qword_1EA61BF08, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EA61BF08, (void *(*)(void))sub_1CC58168C, (void (*)(void *))sub_1CC5816C8);
  }
  return *(void *)qword_1EA61BF08 + 1864;
}

uint64_t LLVMFunctionType(uint64_t **a1, uint64_t a2, unsigned int a3, int a4)
{
  return llvm::FunctionType::get(a1, a2, a3, a4 != 0);
}

BOOL LLVMIsFunctionVarArg(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) > 0xFFu;
}

uint64_t LLVMGetReturnType(uint64_t a1)
{
  return **(void **)(a1 + 16);
}

uint64_t LLVMCountParamTypes(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 12) - 1);
}

uint64_t LLVMGetParamTypes(uint64_t result, void *a2)
{
  if (8 * *(unsigned int *)(result + 12) != 8)
  {
    uint64_t v2 = (uint64_t *)(*(void *)(result + 16) + 8);
    uint64_t v3 = 8 * ((8 * *(unsigned int *)(result + 12) - 8) >> 3);
    do
    {
      uint64_t v4 = *v2++;
      *a2++ = v4;
      v3 -= 8;
    }
    while (v3);
  }
  return result;
}

uint64_t LLVMStructTypeInContext(uint64_t *a1, uint64_t a2, unsigned int a3, int a4)
{
  return llvm::StructType::get(a1, a2, a3, a4 != 0);
}

uint64_t LLVMStructType(uint64_t a1, unsigned int a2, int a3)
{
  if (!atomic_load_explicit(&qword_1EA61BF08, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EA61BF08, (void *(*)(void))sub_1CC58168C, (void (*)(void *))sub_1CC5816C8);
  }
  int v6 = (uint64_t *)qword_1EA61BF08;

  return llvm::StructType::get(v6, a1, a2, a3 != 0);
}

uint64_t LLVMStructCreateNamed(uint64_t *a1, char *__s)
{
  if (__s) {
    size_t v4 = strlen(__s);
  }
  else {
    size_t v4 = 0;
  }

  return llvm::StructType::create(a1, (unsigned __int8 *)__s, v4);
}

uint64_t LLVMGetStructName(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1) {
    return v1 + 16;
  }
  else {
    return 0;
  }
}

uint64_t LLVMStructSetBody(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  return llvm::StructType::setBody(a1, a2, a3, a4 != 0);
}

uint64_t LLVMCountStructElementTypes(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t LLVMGetStructElementTypes(uint64_t result, void *a2)
{
  uint64_t v2 = *(unsigned int *)(result + 12);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(result + 16);
    uint64_t v4 = 8 * v2;
    do
    {
      uint64_t v5 = *v3++;
      *a2++ = v5;
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

uint64_t LLVMStructGetTypeAtIndex(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 8 * a2);
}

uint64_t LLVMIsPackedStruct(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 8) >> 9) & 1;
}

BOOL LLVMIsOpaqueStruct(uint64_t a1)
{
  return ((*(_DWORD *)(a1 + 8) >> 8) & 1) == 0;
}

uint64_t LLVMIsLiteralStruct(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 8) >> 10) & 1;
}

uint64_t LLVMGetTypeByName(uint64_t **a1, char *__s)
{
  uint64_t v3 = *a1;
  if (__s) {
    size_t v4 = strlen(__s);
  }
  else {
    size_t v4 = 0;
  }

  return llvm::StructType::getTypeByName(v3, (unsigned __int8 *)__s, v4);
}

uint64_t LLVMGetTypeByName2(uint64_t *a1, char *__s)
{
  if (__s) {
    size_t v4 = strlen(__s);
  }
  else {
    size_t v4 = 0;
  }

  return llvm::StructType::getTypeByName(a1, (unsigned __int8 *)__s, v4);
}

uint64_t LLVMGetSubtypes(uint64_t result, void *a2)
{
  uint64_t v2 = *(unsigned int *)(result + 12);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(result + 16);
    uint64_t v4 = 8 * v2;
    do
    {
      uint64_t v5 = *v3++;
      *a2++ = v5;
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

llvm::ArrayType *LLVMArrayType(llvm::ArrayType *a1, llvm::Type *a2)
{
  return llvm::ArrayType::get(a1, (llvm::Type *)a2);
}

uint64_t LLVMGetElementType(uint64_t a1)
{
  if (a1 && *(unsigned char *)(a1 + 8) == 15) {
    uint64_t v1 = *(void *)(a1 + 16);
  }
  else {
    uint64_t v1 = a1 + 24;
  }
  return *(void *)v1;
}

uint64_t LLVMGetNumContainedTypes(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t LLVMGetArrayLength(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t LLVMGetPointerAddressSpace(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) >> 8;
}

uint64_t LLVMGetVectorSize(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t LLVMVoidTypeInContext(void *a1)
{
  return *a1 + 1576;
}

uint64_t LLVMLabelTypeInContext(void *a1)
{
  return *a1 + 1600;
}

uint64_t LLVMTokenTypeInContext(void *a1)
{
  return *a1 + 1744;
}

uint64_t LLVMMetadataTypeInContext(void *a1)
{
  return *a1 + 1720;
}

uint64_t LLVMVoidType()
{
  if (!atomic_load_explicit(&qword_1EA61BF08, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EA61BF08, (void *(*)(void))sub_1CC58168C, (void (*)(void *))sub_1CC5816C8);
  }
  return *(void *)qword_1EA61BF08 + 1576;
}

uint64_t LLVMLabelType()
{
  if (!atomic_load_explicit(&qword_1EA61BF08, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EA61BF08, (void *(*)(void))sub_1CC58168C, (void (*)(void *))sub_1CC5816C8);
  }
  return *(void *)qword_1EA61BF08 + 1600;
}

uint64_t LLVMTargetExtTypeInContext(void *a1, char *__s, uint64_t *a3, unsigned int a4, int *a5, unsigned int a6)
{
  if (__s) {
    size_t v12 = strlen(__s);
  }
  else {
    size_t v12 = 0;
  }

  return llvm::TargetExtType::get(a1, __s, v12, a3, a4, a5, a6);
}

uint64_t LLVMTypeOf(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t LLVMGetValueKind(uint64_t a1)
{
  unint64_t v1 = *(char *)(a1 + 16);
  if (v1 > 0x1C) {
    return 24;
  }
  else {
    return dword_1CFAC83EC[v1];
  }
}

char *LLVMGetValueName2(uint64_t ***a1, void *a2)
{
  unsigned int v2 = a1 >> 4;
  if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
  {
    uint64_t v3 = ***a1;
    uint64_t v4 = *(void *)(v3 + 152);
    uint64_t v5 = *(unsigned int *)(v3 + 168);
    if (v5)
    {
      LODWORD(v6) = (v5 - 1) & (v2 ^ (a1 >> 9));
      uint64_t v7 = (uint64_t ****)(v4 + 16 * v6);
      uint64_t v8 = *v7;
      if (*v7 == a1)
      {
LABEL_9:
        uint64_t v11 = (uint64_t)*v7[1];
        goto LABEL_10;
      }
      int v9 = 1;
      while (v8 != (uint64_t ***)-4096)
      {
        int v10 = v6 + v9++;
        uint64_t v6 = v10 & (v5 - 1);
        uint64_t v8 = *(uint64_t ****)(v4 + 16 * v6);
        if (v8 == a1)
        {
          uint64_t v7 = (uint64_t ****)(v4 + 16 * v6);
          goto LABEL_9;
        }
      }
    }
    uint64_t v7 = (uint64_t ****)(v4 + 16 * v5);
    goto LABEL_9;
  }
  uint64_t v11 = 0;
LABEL_10:
  *a2 = v11;
  if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
  {
    uint64_t v12 = ***a1;
    uint64_t v13 = *(void *)(v12 + 152);
    uint64_t v14 = *(unsigned int *)(v12 + 168);
    if (v14)
    {
      LODWORD(v15) = (v14 - 1) & (v2 ^ (a1 >> 9));
      std::string v16 = (uint64_t ****)(v13 + 16 * v15);
      std::string v17 = *v16;
      if (*v16 == a1) {
        return (char *)(v16[1] + 2);
      }
      int v18 = 1;
      while (v17 != (uint64_t ***)-4096)
      {
        int v19 = v15 + v18++;
        uint64_t v15 = v19 & (v14 - 1);
        std::string v17 = *(uint64_t ****)(v13 + 16 * v15);
        if (v17 == a1)
        {
          std::string v16 = (uint64_t ****)(v13 + 16 * v15);
          return (char *)(v16[1] + 2);
        }
      }
    }
    std::string v16 = (uint64_t ****)(v13 + 16 * v14);
    return (char *)(v16[1] + 2);
  }
  return &byte_1CFBCE98E;
}

void LLVMSetValueName2(llvm::Value *a1, const char *a2, const char *a3)
{
  __int16 v19 = 261;
  v18[0] = a2;
  v18[1] = a3;
  llvm::Value::setNameImpl(a1, v18);
  if (a1 && !*((unsigned char *)a1 + 16))
  {
    if ((*((unsigned char *)a1 + 23) & 0x10) == 0) {
      goto LABEL_19;
    }
    uint64_t v4 = ***(void ***)a1;
    uint64_t v5 = *(void *)(v4 + 152);
    uint64_t v6 = *(unsigned int *)(v4 + 168);
    if (v6)
    {
      LODWORD(v7) = (v6 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      uint64_t v8 = (llvm::Value **)(v5 + 16 * v7);
      int v9 = *v8;
      if (*v8 == a1)
      {
LABEL_12:
        uint64_t v12 = v8[1];
        unint64_t v15 = *(void *)v12;
        uint64_t v13 = (char *)v12 + 16;
        unint64_t v14 = v15;
        if (v15 >= 5 && *(_DWORD *)v13 == *(_DWORD *)"llvm." && v13[4] == aLlvm_1[4])
        {
          *((_DWORD *)a1 + 8) |= 0x2000u;
          int v17 = llvm::Function::lookupIntrinsicID(v13, v14);
LABEL_20:
          *((_DWORD *)a1 + 9) = v17;
          return;
        }
LABEL_19:
        int v17 = 0;
        *((_DWORD *)a1 + 8) &= ~0x2000u;
        goto LABEL_20;
      }
      int v10 = 1;
      while (v9 != (llvm::Value *)-4096)
      {
        int v11 = v7 + v10++;
        uint64_t v7 = v11 & (v6 - 1);
        int v9 = *(llvm::Value **)(v5 + 16 * v7);
        if (v9 == a1)
        {
          uint64_t v8 = (llvm::Value **)(v5 + 16 * v7);
          goto LABEL_12;
        }
      }
    }
    uint64_t v8 = (llvm::Value **)(v5 + 16 * v6);
    goto LABEL_12;
  }
}

char *LLVMGetValueName(uint64_t ***a1)
{
  if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
  {
    uint64_t v1 = ***a1;
    uint64_t v2 = *(void *)(v1 + 152);
    uint64_t v3 = *(unsigned int *)(v1 + 168);
    if (v3)
    {
      LODWORD(v4) = (v3 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      uint64_t v5 = (uint64_t ****)(v2 + 16 * v4);
      uint64_t v6 = *v5;
      if (*v5 == a1) {
        return (char *)(v5[1] + 2);
      }
      int v7 = 1;
      while (v6 != (uint64_t ***)-4096)
      {
        int v8 = v4 + v7++;
        uint64_t v4 = v8 & (v3 - 1);
        uint64_t v6 = *(uint64_t ****)(v2 + 16 * v4);
        if (v6 == a1)
        {
          uint64_t v5 = (uint64_t ****)(v2 + 16 * v4);
          return (char *)(v5[1] + 2);
        }
      }
    }
    uint64_t v5 = (uint64_t ****)(v2 + 16 * v3);
    return (char *)(v5[1] + 2);
  }
  return &byte_1CFBCE98E;
}

void LLVMSetValueName(llvm::Value *this, const char *a2)
{
  char v3 = 1;
  char v20 = 1;
  if (*a2)
  {
    int v18 = a2;
    char v3 = 3;
  }
  char v19 = v3;
  llvm::Value::setNameImpl(this, &v18);
  if (this && !*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_21;
    }
    uint64_t v4 = ***(void ***)this;
    uint64_t v5 = *(void *)(v4 + 152);
    uint64_t v6 = *(unsigned int *)(v4 + 168);
    if (v6)
    {
      LODWORD(v7) = (v6 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v8 = v5 + 16 * v7;
      int v9 = *(llvm::Value **)v8;
      if (*(llvm::Value **)v8 == this)
      {
LABEL_14:
        uint64_t v12 = *(void **)(v8 + 8);
        unint64_t v15 = *v12;
        uint64_t v13 = v12 + 2;
        unint64_t v14 = v15;
        if (v15 >= 5 && *(_DWORD *)v13 == *(_DWORD *)"llvm." && v13[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v17 = llvm::Function::lookupIntrinsicID(v13, v14);
LABEL_22:
          *((_DWORD *)this + 9) = v17;
          return;
        }
LABEL_21:
        int v17 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_22;
      }
      int v10 = 1;
      while (v9 != (llvm::Value *)-4096)
      {
        int v11 = v7 + v10++;
        uint64_t v7 = v11 & (v6 - 1);
        int v9 = *(llvm::Value **)(v5 + 16 * v7);
        if (v9 == this)
        {
          uint64_t v8 = v5 + 16 * v7;
          goto LABEL_14;
        }
      }
    }
    uint64_t v8 = v5 + 16 * v6;
    goto LABEL_14;
  }
}

void LLVMDumpValue(llvm *a1)
{
  uint64_t v2 = (llvm::raw_ostream *)llvm::errs(a1);

  llvm::Value::print(a1, v2, 1);
}

char *LLVMPrintValueToString(llvm::Value *a1)
{
  v14[0] = 0;
  v14[1] = 0;
  uint64_t v15 = 0;
  int v6 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  uint64_t v13 = v14;
  int v12 = 0;
  uint64_t v5 = &unk_1F2646F30;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  int v9 = 0;
  if (a1) {
    llvm::Value::print(a1, (llvm::raw_ostream *)&v5, 0);
  }
  else {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v5, "Printing <null> Value", 0x15uLL);
  }
  if (v9 != v7)
  {
    int v9 = v7;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v5, v7);
  }
  char v1 = HIBYTE(v15);
  if (v15 >= 0) {
    uint64_t v2 = (const char *)v14;
  }
  else {
    uint64_t v2 = (const char *)v14[0];
  }
  char v3 = strdup(v2);
  uint64_t v5 = &unk_1F2646B98;
  if (v12 == 1 && v7)
  {
    MEMORY[0x1D25D9CB0](v7, 0x1000C8077774924);
    char v1 = HIBYTE(v15);
  }
  if (v1 < 0) {
    operator delete(v14[0]);
  }
  return v3;
}

void LLVMReplaceAllUsesWith(llvm::ValueAsMetadata *a1, llvm::Value *a2)
{
}

uint64_t LLVMHasMetadata(uint64_t a1)
{
  if (*(void *)(a1 + 48)) {
    return 1;
  }
  else {
    return (*(_DWORD *)(a1 + 20) >> 29) & 1;
  }
}

uint64_t LLVMGetMetadata(uint64_t **a1, int a2)
{
  uint64_t v4 = (unsigned __int8 *)a1[6];
  if (!v4 && (*((unsigned char *)a1 + 23) & 0x20) == 0) {
    return 0;
  }
  if (a2)
  {
    if ((*((unsigned char *)a1 + 23) & 0x20) == 0) {
      return 0;
    }
    uint64_t v5 = *(void *)**a1;
    unsigned int v23 = a1;
    int v6 = *(_DWORD *)(v5 + 2496);
    if (v6)
    {
      uint64_t v7 = *(void *)(v5 + 2480);
      int v8 = v6 - 1;
      unsigned int v9 = v8 & ((a1 >> 4) ^ (a1 >> 9));
      char v10 = (uint64_t ***)(v7 + 40 * v9);
      uint64_t v11 = *v10;
      if (*v10 == a1) {
        goto LABEL_15;
      }
      int v12 = 0;
      int v13 = 1;
      while (v11 != (uint64_t **)-4096)
      {
        if (v12) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = v11 == (uint64_t **)-8192;
        }
        if (v14) {
          int v12 = v10;
        }
        unsigned int v15 = v9 + v13++;
        unsigned int v9 = v15 & v8;
        char v10 = (uint64_t ***)(v7 + 40 * v9);
        uint64_t v11 = *v10;
        if (*v10 == a1) {
          goto LABEL_15;
        }
      }
      if (v12) {
        unint64_t v21 = v12;
      }
      else {
        unint64_t v21 = v10;
      }
    }
    else
    {
      unint64_t v21 = 0;
    }
    char v10 = (uint64_t ***)sub_1CC609054(v5 + 2480, (uint64_t)&v23, (uint64_t *)&v23, v21);
    uint64_t v22 = (uint64_t)v23;
    void v10[3] = 0;
    v10[4] = 0;
    *char v10 = (uint64_t **)v22;
    v10[1] = (uint64_t **)(v10 + 3);
    unsigned __int8 v10[2] = (uint64_t **)0x100000000;
LABEL_15:
    uint64_t v16 = *((unsigned int *)v10 + 4);
    if (v16)
    {
      int v17 = (unsigned __int8 **)(v10[1] + 1);
      uint64_t v18 = 16 * v16;
      while (*((_DWORD *)v17 - 2) != a2)
      {
        v17 += 2;
        v18 -= 16;
        if (!v18) {
          return 0;
        }
      }
      uint64_t v4 = *v17;
      goto LABEL_21;
    }
    return 0;
  }
LABEL_21:
  if (!v4) {
    return 0;
  }
  uint64_t v19 = **a1;

  return llvm::MetadataAsValue::get(v19, v4);
}

void LLVMSetMetadata(llvm::Instruction *this, int a2, llvm::MDNode *a3)
{
  if (a3) {
    a3 = sub_1CC576DC4((uint64_t)a3);
  }

  llvm::Instruction::setMetadata(this, a2, a3);
}

llvm::MDNode *sub_1CC576DC4(uint64_t a1)
{
  uint64_t result = *(llvm::MDNode **)(a1 + 24);
  char v3 = result;
  if (*(unsigned __int8 *)result - 4 >= 0x1F) {
    return llvm::MDTuple::getImpl(**(void **)a1, &v3, 1, 0, 1);
  }
  return result;
}

char *LLVMInstructionGetAllMetadataOtherThanDebugLoc(uint64_t a1, void *a2)
{
  char v3 = &v4;
  uint64_t v4 = a1;
  return sub_1CC576E58(a2, (void (*)(uint64_t, void **))sub_1CC581708, (uint64_t)&v3);
}

char *sub_1CC576E58(void *a1, void (*a2)(uint64_t, void **), uint64_t a3)
{
  v15[16] = *MEMORY[0x1E4F143B8];
  int v13 = v15;
  uint64_t v14 = 0x800000000;
  a2(a3, &v13);
  int v4 = v14;
  uint64_t v5 = (char *)malloc_type_malloc(16 * v14, 0x4065EBACuLL);
  if (!v5 && (v4 || (uint64_t v5 = (char *)malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v6 = v14;
  uint64_t v7 = v13;
  if (v14)
  {
    int v8 = v5 + 8;
    unsigned int v9 = (char *)v13 + 8;
    uint64_t v10 = v14;
    do
    {
      *((_DWORD *)v8 - 2) = *((_DWORD *)v9 - 2);
      uint64_t v11 = *v9;
      v9 += 2;
      *int v8 = v11;
      v8 += 2;
      --v10;
    }
    while (v10);
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = v6;
  if (v7 != v15) {
    free(v7);
  }
  return v5;
}

uint64_t LLVMIsAArgument(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 21) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsABasicBlock(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 22) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAInlineAsm(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 24) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAUser(uint64_t result)
{
  if (result)
  {
    if (*(unsigned __int8 *)(result + 16) - 28 >= 0xFFFFFFF9) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAConstant(uint64_t result)
{
  if (result)
  {
    if (*(unsigned __int8 *)(result + 16) >= 0x15u) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsABlockAddress(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 4) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAConstantAggregateZero(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 13) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAConstantArray(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 8) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAConstantDataSequential(uint64_t result)
{
  if (result)
  {
    if ((*(unsigned char *)(result + 16) & 0xFE) != 0xE) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAConstantDataArray(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 14) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAConstantDataVector(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 15) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAConstantExpr(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 5) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAConstantFP(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 17) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAConstantInt(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 16) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAConstantPointerNull(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 19) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAConstantStruct(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 9) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAConstantTokenNone(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 20) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAConstantVector(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 10) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAGlobalValue(uint64_t result)
{
  if (result)
  {
    if (*(unsigned __int8 *)(result + 16) >= 4u) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAGlobalAlias(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 1) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAGlobalObject(uint64_t result)
{
  if (result)
  {
    unsigned int v1 = *(unsigned __int8 *)(result + 16);
    if (v1 > 3 || v1 == 1) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAFunction(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16)) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAGlobalVariable(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 3) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAGlobalIFunc(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 2) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAUndefValue(uint64_t result)
{
  if (result)
  {
    if (*(unsigned __int8 *)(result + 16) - 11 >= 2) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAPoisonValue(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 12) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAInstruction(uint64_t result)
{
  if (result)
  {
    if (*(unsigned __int8 *)(result + 16) <= 0x1Bu) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAUnaryOperator(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 40) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsABinaryOperator(uint64_t result)
{
  if (result)
  {
    unsigned int v1 = *(unsigned __int8 *)(result + 16);
    if (v1 - 41 >= 0x12 || v1 <= 0x1B) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsACallInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 84) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAIntrinsicInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) == 84
      && (uint64_t v1 = *(void *)(result - 32)) != 0
      && !*(unsigned char *)(v1 + 16)
      && *(void *)(v1 + 24) == *(void *)(result + 72))
    {
      if ((*(unsigned char *)(v1 + 33) & 0x20) == 0) {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsADbgInfoIntrinsic(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (sub_1CBF63B28(result)) {
      return v1;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsADbgVariableIntrinsic(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (sub_1CC5817B4(result)) {
      return v1;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsADbgDeclareInst(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (sub_1CC1F4FA8(result)) {
      return v1;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsADbgLabelInst(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (sub_1CC58180C(result)) {
      return v1;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAMemIntrinsic(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (sub_1CBFB3AB0(result)) {
      return v1;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAMemCpyInst(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (sub_1CC581858(result)) {
      return v1;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAMemMoveInst(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (sub_1CC5818AC(result)) {
      return v1;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAMemSetInst(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (sub_1CC5818F8(result)) {
      return v1;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsACmpInst(uint64_t result)
{
  if (result)
  {
    unsigned int v1 = *(unsigned __int8 *)(result + 16);
    if (v1 - 81 >= 2 || v1 <= 0x1B) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAFCmpInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 82) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAICmpInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 81) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAExtractElementInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 89) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAGetElementPtrInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 62) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAInsertElementInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 90) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAInsertValueInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 93) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsALandingPadInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 94) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAPHINode(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 83) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsASelectInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 85) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAShuffleVectorInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 91) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAStoreInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 61) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsABranchInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 30) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAIndirectBrInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 32) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAInvokeInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 33) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAReturnInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 29) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsASwitchInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 31) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAUnreachableInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 35) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAResumeInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 34) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsACleanupReturnInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 36) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsACatchReturnInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 37) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsACatchSwitchInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 38) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsACallBrInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 39) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAFuncletPadInst(uint64_t result)
{
  if (result)
  {
    unsigned int v1 = *(unsigned __int8 *)(result + 16);
    if (v1 - 79 >= 2 || v1 <= 0x1B) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsACatchPadInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 80) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsACleanupPadInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 79) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAUnaryInstruction(uint64_t result)
{
  if (result)
  {
    unsigned int v1 = *(unsigned __int8 *)(result + 16);
    if (v1 < 0x1C)
    {
      return 0;
    }
    else if ((v1 - 40 > 0x34 || ((1 << (v1 - 40)) & 0x11000000180001) == 0) && v1 - 66 >= 0xD)
    {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAAllocaInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 59) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsACastInst(uint64_t result)
{
  if (result)
  {
    unsigned int v1 = *(unsigned __int8 *)(result + 16);
    if (v1 - 66 >= 0xD || v1 <= 0x1B) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAAddrSpaceCastInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 78) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsABitCastInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 77) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAFPExtInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 74) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAFPToSIInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 70) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAFPToUIInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 69) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAFPTruncInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 73) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAIntToPtrInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 76) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAPtrToIntInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 75) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsASExtInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 68) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsASIToFPInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 72) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsATruncInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 66) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAUIToFPInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 71) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAZExtInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 67) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAExtractValueInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 92) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsALoadInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 60) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAVAArgInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 88) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAFreezeInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 95) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAAtomicCmpXchgInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 64) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAAtomicRMWInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 65) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAFenceInst(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 63) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAMDNode(uint64_t result)
{
  if (!result || *(unsigned char *)(result + 16) != 23) {
    return 0;
  }
  int v1 = **(unsigned __int8 **)(result + 24);
  unsigned int v2 = v1 - 4;
  unsigned int v3 = v1 - 1;
  if (v2 >= 0x1F && v3 >= 2) {
    return 0;
  }
  return result;
}

uint64_t LLVMIsAMDString(uint64_t result)
{
  if (!result || *(unsigned char *)(result + 16) != 23 || **(unsigned char **)(result + 24)) {
    return 0;
  }
  return result;
}

uint64_t LLVMGetFirstUse(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t LLVMGetNextUse(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t LLVMGetUser(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t LLVMGetUsedValue(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t LLVMGetOperand(uint64_t a1, unsigned int a2)
{
  if (a1 && *(unsigned char *)(a1 + 16) == 23)
  {
    unsigned int v2 = *(unsigned __int8 **)(a1 + 24);
    if (*v2 - 3 >= 0xFFFFFFFE)
    {
      return *((void *)v2 + 16);
    }
    else
    {
      uint64_t v3 = *(void *)&v2[8 * a2 + -8 * *((unsigned int *)v2 + 2)];
      if (v3)
      {
        if (*(unsigned char *)v3 == 1) {
          return *(void *)(v3 + 128);
        }
        else {
          return llvm::MetadataAsValue::get(**(void **)a1, (unsigned __int8 *)v3);
        }
      }
      else
      {
        return 0;
      }
    }
  }
  else
  {
    int v5 = *(_DWORD *)(a1 + 20);
    if ((v5 & 0x40000000) != 0) {
      uint64_t v6 = *(void *)(a1 - 8);
    }
    else {
      uint64_t v6 = a1 - 32 * (v5 & 0x7FFFFFF);
    }
    return *(void *)(v6 + 32 * a2);
  }
}

uint64_t LLVMGetOperandUse(uint64_t a1, unsigned int a2)
{
  int v2 = *(_DWORD *)(a1 + 20);
  if ((v2 & 0x40000000) != 0) {
    uint64_t v3 = *(void *)(a1 - 8);
  }
  else {
    uint64_t v3 = a1 - 32 * (v2 & 0x7FFFFFF);
  }
  return v3 + 32 * a2;
}

uint64_t LLVMSetOperand(uint64_t result, unsigned int a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(result + 20);
  if ((v3 & 0x40000000) != 0) {
    uint64_t v4 = *(void *)(result - 8);
  }
  else {
    uint64_t v4 = result - 32 * (v3 & 0x7FFFFFF);
  }
  uint64_t v5 = v4 + 32 * a2;
  if (*(void *)v5)
  {
    **(void **)(v5 + 16) = *(void *)(v5 + 8);
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6) {
      *(void *)(v6 + 16) = *(void *)(v5 + 16);
    }
  }
  *(void *)uint64_t v5 = a3;
  if (a3)
  {
    uint64_t v9 = *(void *)(a3 + 8);
    uint64_t v7 = (void *)(a3 + 8);
    uint64_t v8 = v9;
    uint64_t v10 = v4 + 32 * a2;
    *(void *)(v10 + 8) = v9;
    if (v9) {
      *(void *)(v8 + 16) = v10 + 8;
    }
    *(void *)(v10 + 16) = v7;
    *uint64_t v7 = v5;
  }
  return result;
}

uint64_t LLVMGetNumOperands(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16) != 23) {
    return *(_DWORD *)(a1 + 20) & 0x7FFFFFF;
  }
  int v1 = *(unsigned __int8 **)(a1 + 24);
  if (*v1 - 1 >= 2) {
    return *((unsigned int *)v1 + 2);
  }
  else {
    return 1;
  }
}

uint64_t LLVMGetMDNodeNumOperands(uint64_t a1)
{
  int v1 = *(unsigned __int8 **)(a1 + 24);
  if (*v1 - 1 >= 2) {
    return *((unsigned int *)v1 + 2);
  }
  else {
    return 1;
  }
}

BOOL LLVMIsConstant(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16) < 0x15u;
}

uint64_t LLVMIsNull(uint64_t a1)
{
  uint64_t v1 = 0;
  if (a1)
  {
    unsigned int v2 = *(unsigned __int8 *)(a1 + 16);
    if (v2 <= 0x14)
    {
      if (v2 == 16)
      {
        uint64_t v3 = *(unsigned int *)(a1 + 32);
        if (v3 > 0x40)
        {
          int v7 = 0;
          int64_t v8 = (unint64_t)(v3 + 63) >> 6;
          do
          {
            if (v8-- < 1) {
              break;
            }
            unint64_t v10 = *(void *)(*(void *)(a1 + 24) + 8 * v8);
            v7 += __clz(v10);
          }
          while (!v10);
          int v11 = v3 | 0xFFFFFFC0;
          if ((v3 & 0x3F) == 0) {
            int v11 = 0;
          }
          return v7 + v11 == v3;
        }
        else
        {
          return *(void *)(a1 + 24) == 0;
        }
      }
      else if (v2 == 17)
      {
        return sub_1CB844168(a1, 0.0);
      }
      else
      {
        return v2 - 18 < 3 || v2 == 13;
      }
    }
  }
  return v1;
}

BOOL LLVMIsUndef(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16) - 11 < 2;
}

BOOL LLVMIsPoison(uint64_t a1)
{
  return *(unsigned char *)(a1 + 16) == 12;
}

llvm::MDNode *LLVMMDNodeInContext2(uint64_t a1, void *a2, uint64_t a3)
{
  return llvm::MDTuple::getImpl(a1, a2, a3, 0, 1);
}

uint64_t LLVMMDStringInContext(uint64_t *a1, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v4 = (unsigned __int8 *)llvm::MDString::get(a1, a2, a3);

  return llvm::MetadataAsValue::get((uint64_t)a1, v4);
}

uint64_t LLVMMDString(unsigned __int8 *a1, unsigned int a2)
{
  if (!atomic_load_explicit(&qword_1EA61BF08, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EA61BF08, (void *(*)(void))sub_1CC58168C, (void (*)(void *))sub_1CC5816C8);
  }
  uint64_t v4 = qword_1EA61BF08;
  uint64_t v5 = (unsigned __int8 *)llvm::MDString::get((uint64_t *)qword_1EA61BF08, a1, a2);

  return llvm::MetadataAsValue::get(v4, v5);
}

uint64_t LLVMMDNodeInContext(uint64_t a1, llvm::Value *a2, unsigned int a3)
{
  v14[8] = *MEMORY[0x1E4F143B8];
  int v13 = 0;
  if (a3)
  {
    uint64_t v5 = a2;
    LODWORD(v6) = 0;
    uint64_t v7 = 8 * a3;
    while (1)
    {
      uint64_t v8 = *(void *)v5;
      if (*(void *)v5)
      {
        unsigned int v9 = *(unsigned __int8 *)(v8 + 16);
        if (v9 <= 0x14)
        {
          uint64_t v10 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v8, a2);
          LODWORD(v6) = v13;
        }
        else
        {
          if (v9 != 23)
          {
            uint64_t Impl = (unsigned __int8 *)llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v8, a2);
            return llvm::MetadataAsValue::get(a1, Impl);
          }
          uint64_t v10 = *(void *)(v8 + 24);
        }
      }
      else
      {
        uint64_t v10 = 0;
      }
      if (v6 >= 8) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v14[v6] = v10;
      uint64_t v6 = ++v13;
      uint64_t v5 = (llvm::Value *)((char *)v5 + 8);
      v7 -= 8;
      if (!v7) {
        goto LABEL_14;
      }
    }
  }
  uint64_t v6 = 0;
LABEL_14:
  uint64_t Impl = (unsigned __int8 *)llvm::MDTuple::getImpl(a1, v14, v6, 0, 1);
  return llvm::MetadataAsValue::get(a1, Impl);
}

uint64_t LLVMMDNode(llvm::Value *a1, unsigned int a2)
{
  if (!atomic_load_explicit(&qword_1EA61BF08, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EA61BF08, (void *(*)(void))sub_1CC58168C, (void (*)(void *))sub_1CC5816C8);
  }
  uint64_t v4 = qword_1EA61BF08;

  return LLVMMDNodeInContext(v4, a1, a2);
}

uint64_t LLVMValueAsMetadata(uint64_t a1, llvm::Value *a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 16);
  if ((!a1 || v2 > 0x14) && a1 && v2 == 23) {
    return *(void *)(a1 + 24);
  }
  else {
    return llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)a1, a2);
  }
}

_DWORD *LLVMGetMDString(uint64_t a1, _DWORD *a2)
{
  uint64_t result = 0;
  int v4 = 0;
  if (a1 && *(unsigned char *)(a1 + 16) == 23)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if (*(unsigned char *)v5)
    {
      int v4 = 0;
      uint64_t result = 0;
    }
    else
    {
      uint64_t v6 = *(int **)(v5 + 8);
      int v7 = *v6;
      uint64_t result = v6 + 6;
      int v4 = v7;
    }
  }
  *a2 = v4;
  return result;
}

uint64_t LLVMGetFirstNamedMetadata(uint64_t a1)
{
  if (*(void *)(a1 + 80) == a1 + 72) {
    return 0;
  }
  else {
    return *(void *)(a1 + 80);
  }
}

uint64_t LLVMGetLastNamedMetadata(uint64_t a1)
{
  if (a1 + 72 == *(void *)(a1 + 80)) {
    return 0;
  }
  else {
    return *(void *)(a1 + 72);
  }
}

uint64_t LLVMGetNextNamedMetadata(uint64_t a1)
{
  if (*(void *)(a1 + 8) == *(void *)(a1 + 40) + 72) {
    return 0;
  }
  else {
    return *(void *)(a1 + 8);
  }
}

uint64_t LLVMGetPreviousNamedMetadata(void *a1)
{
  if (*(void **)(a1[5] + 80) == a1) {
    return 0;
  }
  else {
    return *a1;
  }
}

uint64_t LLVMGetNamedMetadata(llvm::Module *a1, const char *a2, const char *a3)
{
  __int16 v5 = 261;
  v4[0] = a2;
  v4[1] = a3;
  return llvm::Module::getNamedMetadata(a1, v4);
}

uint64_t LLVMGetNamedMetadataName(uint64_t a1, void *a2)
{
  char v2 = *(unsigned char *)(a1 + 39);
  int v3 = v2;
  uint64_t v4 = v2 & 0x7F;
  if (v3 < 0) {
    uint64_t v4 = *(void *)(a1 + 24);
  }
  *a2 = v4;
  int v5 = *(char *)(a1 + 39);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t result = a1 + 16;
  uint64_t v7 = v8;
  if (v5 < 0) {
    return v7;
  }
  return result;
}

uint64_t LLVMGetMDNodeOperands(uint64_t result, uint64_t *a2)
{
  char v2 = a2;
  int v3 = *(unsigned __int8 **)(result + 24);
  if (*v3 - 3 >= 0xFFFFFFFE)
  {
    *a2 = *((void *)v3 + 16);
  }
  else
  {
    uint64_t v4 = *((unsigned int *)v3 + 2);
    if (v4)
    {
      uint64_t v5 = **(void **)result;
      uint64_t v6 = *(void *)(result + 24);
      do
      {
        uint64_t v7 = *(void *)(v6 - 8 * *((unsigned int *)v3 + 2));
        if (v7)
        {
          if (*(unsigned char *)v7 == 1) {
            uint64_t result = *(void *)(v7 + 128);
          }
          else {
            uint64_t result = llvm::MetadataAsValue::get(v5, (unsigned __int8 *)v7);
          }
        }
        else
        {
          uint64_t result = 0;
        }
        *v2++ = result;
        v6 += 8;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

uint64_t LLVMGetNamedMetadataNumOperands(llvm::Module *a1, const char *a2)
{
  char v2 = 1;
  char v6 = 1;
  if (*a2)
  {
    uint64_t v4 = a2;
    char v2 = 3;
  }
  char v5 = v2;
  uint64_t result = llvm::Module::getNamedMetadata(a1, &v4);
  if (result) {
    return *(unsigned int *)(*(void *)(result + 48) + 8);
  }
  return result;
}

uint64_t LLVMGetNamedMetadataOperands(llvm::Module *this, const char *a2, uint64_t a3)
{
  char v5 = 1;
  char v13 = 1;
  if (*a2)
  {
    int v11 = a2;
    char v5 = 3;
  }
  char v12 = v5;
  uint64_t result = llvm::Module::getNamedMetadata(this, &v11);
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = *(void *)(result + 48);
    if (*(_DWORD *)(v8 + 8))
    {
      unint64_t v9 = 0;
      uint64_t v10 = *(void *)this;
      do
      {
        uint64_t result = llvm::MetadataAsValue::get(v10, *(unsigned __int8 **)(*(void *)v8 + 8 * v9));
        *(void *)(a3 + 8 * v9++) = result;
        uint64_t v8 = *(void *)(v7 + 48);
      }
      while (v9 < *(unsigned int *)(v8 + 8));
    }
  }
  return result;
}

void *LLVMAddNamedMetadataOperand(_DWORD *a1, char *__s, uint64_t a3)
{
  if (__s) {
    size_t v6 = strlen(__s);
  }
  else {
    size_t v6 = 0;
  }
  uint64_t result = (void *)llvm::Module::getOrInsertNamedMetadata(a1, (unsigned __int8 *)__s, v6);
  if (a3)
  {
    uint64_t v8 = result;
    if (result)
    {
      unint64_t v9 = (unsigned __int8 *)sub_1CC576DC4(a3);
      char v13 = v9;
      uint64_t v10 = v8[6];
      uint64_t v11 = *(unsigned int *)(v10 + 8);
      if (v11 >= *(_DWORD *)(v10 + 12))
      {
        return (void *)sub_1CC608328(v8[6], &v13);
      }
      else
      {
        char v12 = v9;
        uint64_t result = (void *)(*(void *)v10 + 8 * v11);
        *uint64_t result = v12;
        if (v12)
        {
          uint64_t result = (void *)llvm::MetadataTracking::track((uint64_t)result, v12, 2);
          LODWORD(v11) = *(_DWORD *)(v10 + 8);
        }
        *(_DWORD *)(v10 + 8) = v11 + 1;
      }
    }
  }
  return result;
}

const char *LLVMGetDebugLocDirectory(unsigned int *a1, _DWORD *a2)
{
  v35[1] = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  unsigned int v3 = *((unsigned __int8 *)a1 + 16);
  if (a1 && v3 >= 0x1C)
  {
    uint64_t v4 = (void **)*((void *)a1 + 6);
    if (!v4) {
      goto LABEL_41;
    }
    char v5 = v4[-*((unsigned int *)v4 + 2)];
LABEL_6:
    if (*(unsigned char *)v5 != 15)
    {
      char v5 = (void *)v5[-*((unsigned int *)v5 + 2)];
      if (!v5)
      {
        int v9 = 0;
        uint64_t v8 = "";
        goto LABEL_42;
      }
    }
    uint64_t v6 = v5[-*((unsigned int *)v5 + 2) + 1];
    if (v6)
    {
      uint64_t v7 = *(void **)(v6 + 8);
      uint64_t v10 = *v7;
      uint64_t v8 = (const char *)(v7 + 3);
      int v9 = v10;
LABEL_42:
      *a2 = v9;
      return v8;
    }
LABEL_41:
    int v9 = 0;
    uint64_t v8 = 0;
    goto LABEL_42;
  }
  if (a1 && v3 == 3)
  {
    uint64_t v33 = v35;
    uint64_t v34 = 0x100000000;
    llvm::GlobalVariable::getDebugInfo(a1, (uint64_t)&v33);
    if (v34)
    {
      uint64_t v11 = *(void *)(*(void *)v33 - 8 * *(unsigned int *)(*(void *)v33 + 8));
      if (v11)
      {
        uint64_t v12 = *(void *)(v11 - 8 * *(unsigned int *)(v11 + 8) + 16);
        if (!v12)
        {
          int v9 = 0;
          uint64_t v8 = "";
LABEL_37:
          if (v33 != v35) {
            free(v33);
          }
          goto LABEL_42;
        }
        uint64_t v13 = *(void *)(v12 - 8 * *(unsigned int *)(v12 + 8) + 8);
        if (v13)
        {
          uint64_t v14 = *(void **)(v13 + 8);
          uint64_t v15 = *v14;
          uint64_t v8 = (const char *)(v14 + 3);
          int v9 = v15;
          goto LABEL_37;
        }
      }
    }
    int v9 = 0;
    uint64_t v8 = 0;
    goto LABEL_37;
  }
  uint64_t v8 = 0;
  if (a1 && !*((unsigned char *)a1 + 16))
  {
    if ((*((unsigned char *)a1 + 23) & 0x20) == 0) {
      goto LABEL_41;
    }
    uint64_t v16 = ***(void ***)a1;
    uint64_t v33 = a1;
    int v17 = *(_DWORD *)(v16 + 2496);
    if (v17)
    {
      uint64_t v18 = *(void *)(v16 + 2480);
      int v19 = v17 - 1;
      unsigned int v20 = (v17 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      unint64_t v21 = (unsigned int **)(v18 + 40 * v20);
      uint64_t v22 = *v21;
      if (*v21 == a1)
      {
LABEL_31:
        uint64_t v27 = *((unsigned int *)v21 + 4);
        if (!v27) {
          goto LABEL_41;
        }
        uint64_t v28 = v21[1] + 2;
        uint64_t v29 = 16 * v27;
        int v9 = 0;
        uint64_t v8 = 0;
        while (*((_DWORD *)v28 - 2))
        {
          v28 += 2;
          v29 -= 16;
          if (!v29) {
            goto LABEL_42;
          }
        }
        char v5 = (void *)*v28;
        if (!v5) {
          goto LABEL_41;
        }
        goto LABEL_6;
      }
      unsigned int v23 = 0;
      int v24 = 1;
      while (v22 != (unsigned int *)-4096)
      {
        if (v23) {
          BOOL v25 = 0;
        }
        else {
          BOOL v25 = v22 == (unsigned int *)-8192;
        }
        if (v25) {
          unsigned int v23 = v21;
        }
        unsigned int v26 = v20 + v24++;
        unsigned int v20 = v26 & v19;
        unint64_t v21 = (unsigned int **)(v18 + 40 * (v26 & v19));
        uint64_t v22 = *v21;
        if (*v21 == a1) {
          goto LABEL_31;
        }
      }
      if (v23) {
        unint64_t v31 = v23;
      }
      else {
        unint64_t v31 = v21;
      }
    }
    else
    {
      unint64_t v31 = 0;
    }
    unint64_t v21 = (unsigned int **)sub_1CC609054(v16 + 2480, (uint64_t)&v33, (uint64_t *)&v33, v31);
    __int16 v32 = (unsigned int *)v33;
    void v21[3] = 0;
    uint64_t v21[4] = 0;
    uint64_t *v21 = v32;
    v21[1] = (unsigned int *)(v21 + 3);
    v21[2] = (unsigned int *)0x100000000;
    goto LABEL_31;
  }
  return v8;
}

const char *LLVMGetDebugLocFilename(unsigned int *a1, _DWORD *a2)
{
  v35[1] = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  unsigned int v3 = *((unsigned __int8 *)a1 + 16);
  if (a1 && v3 >= 0x1C)
  {
    uint64_t v4 = (void **)*((void *)a1 + 6);
    if (!v4) {
      goto LABEL_41;
    }
    char v5 = v4[-*((unsigned int *)v4 + 2)];
LABEL_6:
    if (*(unsigned char *)v5 != 15)
    {
      char v5 = (void *)v5[-*((unsigned int *)v5 + 2)];
      if (!v5)
      {
        int v9 = 0;
        uint64_t v8 = "";
        goto LABEL_42;
      }
    }
    uint64_t v6 = v5[-*((unsigned int *)v5 + 2)];
    if (v6)
    {
      uint64_t v7 = *(void **)(v6 + 8);
      uint64_t v10 = *v7;
      uint64_t v8 = (const char *)(v7 + 3);
      int v9 = v10;
LABEL_42:
      *a2 = v9;
      return v8;
    }
LABEL_41:
    int v9 = 0;
    uint64_t v8 = 0;
    goto LABEL_42;
  }
  if (a1 && v3 == 3)
  {
    uint64_t v33 = v35;
    uint64_t v34 = 0x100000000;
    llvm::GlobalVariable::getDebugInfo(a1, (uint64_t)&v33);
    if (v34)
    {
      uint64_t v11 = *(void *)(*(void *)v33 - 8 * *(unsigned int *)(*(void *)v33 + 8));
      if (v11)
      {
        uint64_t v12 = *(void *)(v11 - 8 * *(unsigned int *)(v11 + 8) + 16);
        if (!v12)
        {
          int v9 = 0;
          uint64_t v8 = "";
LABEL_37:
          if (v33 != v35) {
            free(v33);
          }
          goto LABEL_42;
        }
        uint64_t v13 = *(void *)(v12 - 8 * *(unsigned int *)(v12 + 8));
        if (v13)
        {
          uint64_t v14 = *(void **)(v13 + 8);
          uint64_t v15 = *v14;
          uint64_t v8 = (const char *)(v14 + 3);
          int v9 = v15;
          goto LABEL_37;
        }
      }
    }
    int v9 = 0;
    uint64_t v8 = 0;
    goto LABEL_37;
  }
  uint64_t v8 = 0;
  if (a1 && !*((unsigned char *)a1 + 16))
  {
    if ((*((unsigned char *)a1 + 23) & 0x20) == 0) {
      goto LABEL_41;
    }
    uint64_t v16 = ***(void ***)a1;
    uint64_t v33 = a1;
    int v17 = *(_DWORD *)(v16 + 2496);
    if (v17)
    {
      uint64_t v18 = *(void *)(v16 + 2480);
      int v19 = v17 - 1;
      unsigned int v20 = (v17 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      unint64_t v21 = (unsigned int **)(v18 + 40 * v20);
      uint64_t v22 = *v21;
      if (*v21 == a1)
      {
LABEL_31:
        uint64_t v27 = *((unsigned int *)v21 + 4);
        if (!v27) {
          goto LABEL_41;
        }
        uint64_t v28 = v21[1] + 2;
        uint64_t v29 = 16 * v27;
        int v9 = 0;
        uint64_t v8 = 0;
        while (*((_DWORD *)v28 - 2))
        {
          v28 += 2;
          v29 -= 16;
          if (!v29) {
            goto LABEL_42;
          }
        }
        char v5 = (void *)*v28;
        if (!v5) {
          goto LABEL_41;
        }
        goto LABEL_6;
      }
      unsigned int v23 = 0;
      int v24 = 1;
      while (v22 != (unsigned int *)-4096)
      {
        if (v23) {
          BOOL v25 = 0;
        }
        else {
          BOOL v25 = v22 == (unsigned int *)-8192;
        }
        if (v25) {
          unsigned int v23 = v21;
        }
        unsigned int v26 = v20 + v24++;
        unsigned int v20 = v26 & v19;
        unint64_t v21 = (unsigned int **)(v18 + 40 * (v26 & v19));
        uint64_t v22 = *v21;
        if (*v21 == a1) {
          goto LABEL_31;
        }
      }
      if (v23) {
        unint64_t v31 = v23;
      }
      else {
        unint64_t v31 = v21;
      }
    }
    else
    {
      unint64_t v31 = 0;
    }
    unint64_t v21 = (unsigned int **)sub_1CC609054(v16 + 2480, (uint64_t)&v33, (uint64_t *)&v33, v31);
    __int16 v32 = (unsigned int *)v33;
    void v21[3] = 0;
    uint64_t v21[4] = 0;
    uint64_t *v21 = v32;
    v21[1] = (unsigned int *)(v21 + 3);
    v21[2] = (unsigned int *)0x100000000;
    goto LABEL_31;
  }
  return v8;
}

uint64_t LLVMGetDebugLocLine(uint64_t ***a1)
{
  v25[1] = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *((unsigned __int8 *)a1 + 16);
  if (a1 && v1 >= 0x1C)
  {
    char v2 = a1[6];
    if (v2) {
      return *((unsigned int *)v2 + 1);
    }
    return 0;
  }
  if (!a1 || v1 != 3)
  {
    uint64_t v3 = 0xFFFFFFFFLL;
    if (!a1 || *((unsigned char *)a1 + 16)) {
      return v3;
    }
    if ((*((unsigned char *)a1 + 23) & 0x20) == 0) {
      return 0;
    }
    uint64_t v5 = ***a1;
    unsigned int v23 = a1;
    int v6 = *(_DWORD *)(v5 + 2496);
    if (v6)
    {
      uint64_t v7 = *(void *)(v5 + 2480);
      int v8 = v6 - 1;
      unsigned int v9 = (v6 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      uint64_t v10 = (uint64_t ****)(v7 + 40 * v9);
      uint64_t v11 = *v10;
      if (*v10 == a1)
      {
LABEL_23:
        uint64_t v16 = *((unsigned int *)v10 + 4);
        if (v16)
        {
          int v17 = v10[1] + 1;
          uint64_t v18 = 16 * v16;
          uint64_t v3 = 0;
          while (*((_DWORD *)v17 - 2))
          {
            v17 += 2;
            v18 -= 16;
            if (!v18) {
              return v3;
            }
          }
          uint64_t v19 = *v17;
          if (v19) {
            return *(unsigned int *)(v19 + 24);
          }
        }
        return 0;
      }
      uint64_t v12 = 0;
      int v13 = 1;
      while (v11 != (uint64_t ***)-4096)
      {
        if (v12) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = v11 == (uint64_t ***)-8192;
        }
        if (v14) {
          uint64_t v12 = v10;
        }
        unsigned int v15 = v9 + v13++;
        unsigned int v9 = v15 & v8;
        uint64_t v10 = (uint64_t ****)(v7 + 40 * (v15 & v8));
        uint64_t v11 = *v10;
        if (*v10 == a1) {
          goto LABEL_23;
        }
      }
      if (v12) {
        unint64_t v21 = v12;
      }
      else {
        unint64_t v21 = v10;
      }
    }
    else
    {
      unint64_t v21 = 0;
    }
    uint64_t v10 = (uint64_t ****)sub_1CC609054(v5 + 2480, (uint64_t)&v23, (uint64_t *)&v23, v21);
    uint64_t v22 = (uint64_t ***)v23;
    void v10[3] = 0;
    v10[4] = 0;
    *uint64_t v10 = v22;
    v10[1] = (uint64_t ***)(v10 + 3);
    unsigned __int8 v10[2] = (uint64_t ***)0x100000000;
    goto LABEL_23;
  }
  unsigned int v23 = v25;
  uint64_t v24 = 0x100000000;
  llvm::GlobalVariable::getDebugInfo((unsigned int *)a1, (uint64_t)&v23);
  if (v24 && (uint64_t v4 = *(void *)(*(void *)v23 - 8 * *(unsigned int *)(*(void *)v23 + 8))) != 0) {
    uint64_t v3 = *(unsigned int *)(v4 + 24);
  }
  else {
    uint64_t v3 = 0;
  }
  if (v23 != v25) {
    free(v23);
  }
  return v3;
}

uint64_t LLVMGetDebugLocColumn(uint64_t a1)
{
  uint64_t result = 0;
  if (a1 && *(unsigned __int8 *)(a1 + 16) >= 0x1Cu)
  {
    uint64_t v3 = *(void *)(a1 + 48);
    if (v3) {
      return *(unsigned __int16 *)(v3 + 2);
    }
    else {
      return 0;
    }
  }
  return result;
}

void *LLVMConstInt(llvm::ConstantInt *a1, unint64_t a2, int a3)
{
  return llvm::ConstantInt::get(a1, a2, (const llvm::APInt *)(a3 != 0));
}

void *LLVMConstIntOfArbitraryPrecision(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(llvm::ConstantInt **)a1;
  unsigned int v8 = *(_DWORD *)(a1 + 8) >> 8;
  llvm::APInt::initFromArray((uint64_t)&v7, a3);
  uint64_t v5 = llvm::ConstantInt::get(v3, (llvm::LLVMContext *)&v7, v4);
  if (v8 >= 0x41 && v7) {
    MEMORY[0x1D25D9CB0](v7, 0x1000C8000313F17);
  }
  return v5;
}

void *LLVMConstIntOfString(uint64_t a1, char *__s, unsigned int a3)
{
  if (__s) {
    size_t v6 = strlen(__s);
  }
  else {
    size_t v6 = 0;
  }

  return llvm::ConstantInt::get(a1, __s, v6, a3);
}

void *LLVMConstIntOfStringAndSize(uint64_t a1, char *a2, unsigned int a3, unsigned int a4)
{
  return llvm::ConstantInt::get(a1, a2, a3, a4);
}

const llvm::detail::DoubleAPFloat *LLVMConstRealOfString(uint64_t a1, char *__s)
{
  if (__s) {
    size_t v4 = strlen(__s);
  }
  else {
    size_t v4 = 0;
  }

  return llvm::ConstantFP::get(a1, (unsigned __int8 *)__s, v4);
}

const llvm::detail::DoubleAPFloat *LLVMConstRealOfStringAndSize(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  return llvm::ConstantFP::get(a1, a2, a3);
}

uint64_t *LLVMConstIntGetZExtValue(uint64_t a1)
{
  unsigned int v1 = (uint64_t *)(a1 + 24);
  if (*(_DWORD *)(a1 + 32) >= 0x41u) {
    unsigned int v1 = (uint64_t *)*v1;
  }
  return (uint64_t *)*v1;
}

uint64_t LLVMConstIntGetSExtValue(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 32);
  if (v1 > 0x40) {
    return **(void **)(a1 + 24);
  }
  else {
    return (uint64_t)(*(void *)(a1 + 24) << -(char)v1) >> -(char)v1;
  }
}

double LLVMConstRealGetDouble(uint64_t a1, _DWORD *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned char *)(*(void *)a1 + 8) & 0xFC) != 0)
  {
    unsigned __int8 v18 = 0;
    uint64_t v3 = *(void *)(a1 + 32);
    if ((_UNKNOWN *)v3 == &unk_1CFB2E344)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat(&v20, (const llvm::detail::DoubleAPFloat *)(a1 + 32));
    }
    else
    {
      uint64_t v20 = *(void *)(a1 + 32);
      size_t v4 = (uint64_t *)*(unsigned int *)(v3 + 8);
      if ((v4 + 64) >= 0x80) {
        operator new[]();
      }
      char v5 = *(unsigned char *)(a1 + 52);
      int v6 = v5 & 7;
      char v23 = v5 & 0xF;
      int v22 = *(_DWORD *)(a1 + 48);
      BOOL v8 = (v5 & 6) != 0 && v6 != 3;
      if (v6 == 1 || v8)
      {
        uint64_t v9 = *(unsigned int *)(v3 + 8);
        if ((v9 - 64) > 0xFFFFFF7F) {
          size_t v4 = &v21;
        }
        uint64_t v12 = *(uint64_t **)(a1 + 40);
        uint64_t v10 = (uint64_t *)(a1 + 40);
        uint64_t v11 = v12;
        if ((*(_DWORD *)(*(v10 - 1) + 8) - 64) >= 0xFFFFFF80) {
          uint64_t v11 = v10;
        }
        if (v9 <= 0xFFFFFFBF)
        {
          unint64_t v13 = (unint64_t)(v9 + 64) >> 6;
          do
          {
            uint64_t v14 = *v11++;
            *v4++ = v14;
            --v13;
          }
          while (v13);
        }
      }
    }
    llvm::APFloat::convert((uint64_t)v19, &unk_1CFB2E31C, 1, &v18);
    *a2 = v18;
    double result = llvm::APFloat::convertToDouble((llvm::APFloat *)v19);
    if ((_UNKNOWN *)v20 == &unk_1CFB2E344)
    {
      double v17 = result;
      sub_1CB845718(&v21);
      return v17;
    }
    if ((*(_DWORD *)(v20 + 8) - 64) <= 0xFFFFFF7F && v21)
    {
      double v17 = result;
      MEMORY[0x1D25D9CB0](v21, 0x1000C8000313F17);
      return v17;
    }
  }
  else
  {
    *a2 = 0;
    uint64_t v16 = (llvm::APFloat *)(a1 + 24);
    return llvm::APFloat::convertToDouble(v16);
  }
  return result;
}

llvm::Value *LLVMConstStringInContext(uint64_t a1, char *a2, unsigned int a3, int a4)
{
  return llvm::ConstantDataArray::getString(a1, a2, (llvm::Type *)a3, a4 == 0);
}

llvm::Value *LLVMConstString(char *a1, unsigned int a2, int a3)
{
  if (!atomic_load_explicit(&qword_1EA61BF08, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EA61BF08, (void *(*)(void))sub_1CC58168C, (void (*)(void *))sub_1CC5816C8);
  }
  uint64_t v6 = qword_1EA61BF08;

  return llvm::ConstantDataArray::getString(v6, a1, (llvm::Type *)a2, a3 == 0);
}

BOOL LLVMIsConstantString(uint64_t a1)
{
  return *(unsigned char *)(*(void *)a1 + 8) == 17 && *(_DWORD *)(*(void *)(*(void *)a1 + 24) + 8) == 2061;
}

uint64_t LLVMGetAsString(llvm::ConstantDataSequential *a1, void *a2)
{
  uint64_t result = llvm::ConstantDataSequential::getRawDataValues(a1);
  *a2 = v4;
  return result;
}

llvm::Value *LLVMConstArray(llvm::ArrayType *a1, llvm::Type *a2, llvm::Type *a3)
{
  uint64_t v4 = a3;
  char v5 = llvm::ArrayType::get(a1, (llvm::Type *)a3);

  return llvm::ConstantArray::get(v5, a2, v4);
}

void *LLVMConstStructInContext(uint64_t *a1, llvm::Type *a2, unsigned int a3, int a4)
{
  uint64_t v5 = a3;
  TypeForElements = (llvm::PoisonValue *)llvm::ConstantStruct::getTypeForElements(a1, (uint64_t)a2, a3, a4 != 0);

  return llvm::ConstantStruct::get(TypeForElements, a2, v5);
}

void *LLVMConstStruct(llvm::Type *a1, unsigned int a2, int a3)
{
  if (!atomic_load_explicit(&qword_1EA61BF08, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EA61BF08, (void *(*)(void))sub_1CC58168C, (void (*)(void *))sub_1CC5816C8);
  }
  TypeForElements = (llvm::PoisonValue *)llvm::ConstantStruct::getTypeForElements((uint64_t *)qword_1EA61BF08, (uint64_t)a1, a2, a3 != 0);

  return llvm::ConstantStruct::get(TypeForElements, a1, a2);
}

void *LLVMConstNamedStruct(llvm::PoisonValue *a1, llvm::Type *a2, unsigned int a3)
{
  return llvm::ConstantStruct::get(a1, a2, a3);
}

llvm::Value *LLVMConstVector(llvm::FixedVectorType ***a1, llvm::Type *a2)
{
  uint64_t v4 = a2;
  uint64_t result = llvm::ConstantVector::getImpl(a1, (llvm::Type *)a2);
  if (!result)
  {
    llvm::FixedVectorType::get(**a1, a2);
    uint64_t v7 = (uint64_t)v6;
    uint64_t v8 = **v6 + 1288;
    return (llvm::Value *)sub_1CC56A4DC(v8, v7, a1, v4);
  }
  return result;
}

uint64_t LLVMGetConstOpcode(uint64_t a1)
{
  return sub_1CC578F40(*(unsigned __int16 *)(a1 + 18));
}

uint64_t sub_1CC578F40(int a1)
{
  return dword_1CFAC8460[a1 - 1];
}

const llvm::detail::DoubleAPFloat *LLVMConstNeg(llvm::Constant *a1, llvm::Type *a2, const llvm::APFloat *a3)
{
  v18[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)a1;
  if ((*(_DWORD *)(v4 + 8) & 0xFE) == 0x12) {
    unsigned int v5 = *(unsigned __int8 *)(**(void **)(v4 + 16) + 8);
  }
  else {
    unsigned int v5 = *(_DWORD *)(v4 + 8);
  }
  if (v5 <= 6) {
    Zero = llvm::ConstantFP::getZero((llvm::ConstantFP *)v4, (llvm::Type *)1, a3);
  }
  else {
    Zero = llvm::Constant::getNullValue((llvm::Constant *)v4, a2, a3);
  }
  uint64_t v8 = Zero;
  uint64_t result = llvm::ConstantFoldBinaryInstruction((llvm *)0xF, Zero, a1, v7);
  if (!result)
  {
    uint64_t v10 = *(void ***)v8;
    if (*(void *)v8)
    {
      v18[0] = v8;
      v18[1] = a1;
      uint64_t v11 = **v10 + 1512;
      v12[0] = 15;
      v12[1] = 0;
      unint64_t v13 = v18;
      uint64_t v14 = 2;
      long long v15 = 0u;
      long long v16 = 0u;
      uint64_t v17 = 0;
      return (const llvm::detail::DoubleAPFloat *)sub_1CC56C20C(v11, (uint64_t)v10, (unsigned __int8 *)v12);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

const llvm::detail::DoubleAPFloat *LLVMConstNSWNeg(llvm::Constant *a1, llvm::Type *a2, const llvm::APFloat *a3)
{
  v18[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)a1;
  if ((*(_DWORD *)(v4 + 8) & 0xFE) == 0x12) {
    unsigned int v5 = *(unsigned __int8 *)(**(void **)(v4 + 16) + 8);
  }
  else {
    unsigned int v5 = *(_DWORD *)(v4 + 8);
  }
  if (v5 <= 6) {
    Zero = llvm::ConstantFP::getZero((llvm::ConstantFP *)v4, (llvm::Type *)1, a3);
  }
  else {
    Zero = llvm::Constant::getNullValue((llvm::Constant *)v4, a2, a3);
  }
  uint64_t v8 = Zero;
  uint64_t result = llvm::ConstantFoldBinaryInstruction((llvm *)0xF, Zero, a1, v7);
  if (!result)
  {
    uint64_t v10 = *(void ***)v8;
    if (*(void *)v8)
    {
      v18[0] = v8;
      v18[1] = a1;
      uint64_t v11 = **v10 + 1512;
      v12[0] = 527;
      v12[1] = 0;
      unint64_t v13 = v18;
      uint64_t v14 = 2;
      long long v15 = 0u;
      long long v16 = 0u;
      uint64_t v17 = 0;
      return (const llvm::detail::DoubleAPFloat *)sub_1CC56C20C(v11, (uint64_t)v10, (unsigned __int8 *)v12);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

const llvm::detail::DoubleAPFloat *LLVMConstNUWNeg(llvm::Constant *a1, llvm::Type *a2, const llvm::APFloat *a3)
{
  v18[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)a1;
  if ((*(_DWORD *)(v4 + 8) & 0xFE) == 0x12) {
    unsigned int v5 = *(unsigned __int8 *)(**(void **)(v4 + 16) + 8);
  }
  else {
    unsigned int v5 = *(_DWORD *)(v4 + 8);
  }
  if (v5 <= 6) {
    Zero = llvm::ConstantFP::getZero((llvm::ConstantFP *)v4, (llvm::Type *)1, a3);
  }
  else {
    Zero = llvm::Constant::getNullValue((llvm::Constant *)v4, a2, a3);
  }
  uint64_t v8 = Zero;
  uint64_t result = llvm::ConstantFoldBinaryInstruction((llvm *)0xF, Zero, a1, v7);
  if (!result)
  {
    uint64_t v10 = *(void ***)v8;
    if (*(void *)v8)
    {
      v18[0] = v8;
      v18[1] = a1;
      uint64_t v11 = **v10 + 1512;
      v12[0] = 271;
      v12[1] = 0;
      unint64_t v13 = v18;
      uint64_t v14 = 2;
      long long v15 = 0u;
      long long v16 = 0u;
      uint64_t v17 = 0;
      return (const llvm::detail::DoubleAPFloat *)sub_1CC56C20C(v11, (uint64_t)v10, (unsigned __int8 *)v12);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMConstFNeg(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::Type *a5)
{
  return llvm::ConstantExpr::get((llvm::ConstantExpr *)0xC, a1, 0, 0, a5);
}

const llvm::detail::DoubleAPFloat *LLVMConstAdd(llvm::ConstantExpr *a1, llvm::Constant *a2)
{
  return llvm::ConstantExpr::getAdd(a1, a2, 0, 0);
}

const llvm::detail::DoubleAPFloat *LLVMConstNSWAdd(llvm::ConstantExpr *a1, llvm::Constant *a2)
{
  return llvm::ConstantExpr::getAdd(a1, a2, 0, (llvm::Constant *)1);
}

const llvm::detail::DoubleAPFloat *LLVMConstNUWAdd(llvm::ConstantExpr *a1, llvm::Constant *a2)
{
  return llvm::ConstantExpr::getAdd(a1, a2, (llvm::Constant *)1, 0);
}

const llvm::detail::DoubleAPFloat *LLVMConstSub(llvm::ConstantExpr *a1, llvm::Constant *a2)
{
  return llvm::ConstantExpr::getSub(a1, a2, 0, 0);
}

const llvm::detail::DoubleAPFloat *LLVMConstNSWSub(llvm::ConstantExpr *a1, llvm::Constant *a2)
{
  return llvm::ConstantExpr::getSub(a1, a2, 0, (llvm::Constant *)1);
}

const llvm::detail::DoubleAPFloat *LLVMConstNUWSub(llvm::ConstantExpr *a1, llvm::Constant *a2)
{
  return llvm::ConstantExpr::getSub(a1, a2, (llvm::Constant *)1, 0);
}

const llvm::detail::DoubleAPFloat *LLVMConstMul(llvm::ConstantExpr *a1, llvm::Constant *a2)
{
  return llvm::ConstantExpr::getMul(a1, a2, 0, 0);
}

const llvm::detail::DoubleAPFloat *LLVMConstNSWMul(llvm::ConstantExpr *a1, llvm::Constant *a2)
{
  return llvm::ConstantExpr::getMul(a1, a2, 0, (llvm::Constant *)1);
}

const llvm::detail::DoubleAPFloat *LLVMConstNUWMul(llvm::ConstantExpr *a1, llvm::Constant *a2)
{
  return llvm::ConstantExpr::getMul(a1, a2, (llvm::Constant *)1, 0);
}

const llvm::detail::DoubleAPFloat *LLVMConstUDiv(llvm::ConstantExpr *a1, llvm::Constant *a2, uint64_t a3, llvm::Constant *a4)
{
  return llvm::ConstantExpr::getUDiv(a1, a2, 0, a4);
}

const llvm::detail::DoubleAPFloat *LLVMConstExactUDiv(llvm::ConstantExpr *a1, llvm::Constant *a2, uint64_t a3, llvm::Constant *a4)
{
  return llvm::ConstantExpr::getUDiv(a1, a2, (llvm::Constant *)1, a4);
}

const llvm::detail::DoubleAPFloat *LLVMConstSDiv(llvm::ConstantExpr *a1, llvm::Constant *a2, uint64_t a3, llvm::Constant *a4)
{
  return llvm::ConstantExpr::getSDiv(a1, a2, 0, a4);
}

const llvm::detail::DoubleAPFloat *LLVMConstExactSDiv(llvm::ConstantExpr *a1, llvm::Constant *a2, uint64_t a3, llvm::Constant *a4)
{
  return llvm::ConstantExpr::getSDiv(a1, a2, (llvm::Constant *)1, a4);
}

const llvm::detail::DoubleAPFloat *LLVMConstFRem(llvm::Constant *a1, llvm::Constant *a2, uint64_t a3, llvm::Constant *a4)
{
  unsigned __int8 v15[2] = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::ConstantFoldBinaryInstruction((llvm *)0x18, a1, a2, a4);
  if (!result)
  {
    uint64_t v7 = *(void ***)a1;
    if (*(void *)a1)
    {
      v15[0] = a1;
      v15[1] = a2;
      uint64_t v8 = **v7 + 1512;
      v9[0] = 24;
      v9[1] = 0;
      uint64_t v10 = v15;
      uint64_t v11 = 2;
      long long v12 = 0u;
      long long v13 = 0u;
      uint64_t v14 = 0;
      return (const llvm::detail::DoubleAPFloat *)sub_1CC56C20C(v8, (uint64_t)v7, (unsigned __int8 *)v9);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void *LLVMConstICmp(unsigned __int16 a1, llvm::Type *a2, llvm::Constant *a3, uint64_t a4, BOOL a5)
{
  return llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)a1, a2, a3, 0, a5);
}

uint64_t LLVMConstFCmp(unsigned __int16 a1, uint64_t ***a2, llvm::Constant *a3)
{
  return llvm::ConstantExpr::getFCmp((llvm::ConstantExpr *)a1, a2, a3, 0);
}

const llvm::detail::DoubleAPFloat *LLVMConstShl(llvm::ConstantExpr *a1, llvm::Constant *a2)
{
  return llvm::ConstantExpr::getShl(a1, a2, 0, 0);
}

uint64_t LLVMConstLShr(llvm::ConstantExpr *a1, llvm::Constant *a2, uint64_t a3, llvm::Constant *a4)
{
  return llvm::ConstantExpr::getLShr(a1, a2, 0, a4);
}

const llvm::detail::DoubleAPFloat *LLVMConstAShr(llvm::Constant *a1, llvm::Constant *a2, uint64_t a3, llvm::Constant *a4)
{
  unsigned __int8 v15[2] = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::ConstantFoldBinaryInstruction((llvm *)0x1B, a1, a2, a4);
  if (!result)
  {
    uint64_t v7 = *(void ***)a1;
    if (*(void *)a1)
    {
      v15[0] = a1;
      v15[1] = a2;
      uint64_t v8 = **v7 + 1512;
      v9[0] = 27;
      v9[1] = 0;
      uint64_t v10 = v15;
      uint64_t v11 = 2;
      long long v12 = 0u;
      long long v13 = 0u;
      uint64_t v14 = 0;
      return (const llvm::detail::DoubleAPFloat *)sub_1CC56C20C(v8, (uint64_t)v7, (unsigned __int8 *)v9);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMConstGEP(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *a1;
  if ((*(_DWORD *)(*a1 + 8) & 0xFE) == 0x12) {
    uint64_t v3 = **(void **)(v3 + 16);
  }
  return llvm::ConstantExpr::getGetElementPtr(**(void **)(v3 + 16), a1, a2, a3, 0, 0, 0);
}

uint64_t LLVMConstGEP2(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  return llvm::ConstantExpr::getGetElementPtr(a1, a2, a3, a4, 0, 0, 0);
}

uint64_t LLVMConstInBoundsGEP(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *a1;
  if ((*(_DWORD *)(*a1 + 8) & 0xFE) == 0x12) {
    uint64_t v3 = **(void **)(v3 + 16);
  }
  return llvm::ConstantExpr::getGetElementPtr(**(void **)(v3 + 16), a1, a2, a3, 1, 0, 0);
}

uint64_t LLVMConstInBoundsGEP2(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  return llvm::ConstantExpr::getGetElementPtr(a1, a2, a3, a4, 1, 0, 0);
}

llvm::detail::IEEEFloat *LLVMConstTrunc(llvm::detail::IEEEFloat *a1, llvm::Constant *a2)
{
  return sub_1CC56C0C0((llvm *)0x26, a1, a2, 0);
}

llvm::detail::IEEEFloat *LLVMConstSExt(llvm::detail::IEEEFloat *a1, llvm::Constant *a2)
{
  return sub_1CC56C0C0((llvm *)0x28, a1, a2, 0);
}

llvm::detail::IEEEFloat *LLVMConstZExt(llvm::detail::IEEEFloat *a1, llvm::Constant *a2)
{
  return sub_1CC56C0C0((llvm *)0x27, a1, a2, 0);
}

llvm::detail::IEEEFloat *LLVMConstFPTrunc(llvm::detail::IEEEFloat *a1, llvm::Constant *a2)
{
  return sub_1CC56C0C0((llvm *)0x2D, a1, a2, 0);
}

llvm::detail::IEEEFloat *LLVMConstFPExt(llvm::detail::IEEEFloat *a1, llvm::Constant *a2)
{
  return sub_1CC56C0C0((llvm *)0x2E, a1, a2, 0);
}

llvm::detail::IEEEFloat *LLVMConstUIToFP(llvm::detail::IEEEFloat *a1, llvm::Constant *a2)
{
  return sub_1CC56C0C0((llvm *)0x2B, a1, a2, 0);
}

llvm::detail::IEEEFloat *LLVMConstSIToFP(llvm::detail::IEEEFloat *a1, llvm::Constant *a2)
{
  return sub_1CC56C0C0((llvm *)0x2C, a1, a2, 0);
}

llvm::detail::IEEEFloat *LLVMConstFPToUI(llvm::detail::IEEEFloat *a1, llvm::Constant *a2)
{
  return sub_1CC56C0C0((llvm *)0x29, a1, a2, 0);
}

llvm::detail::IEEEFloat *LLVMConstFPToSI(llvm::detail::IEEEFloat *a1, llvm::Constant *a2)
{
  return sub_1CC56C0C0((llvm *)0x2A, a1, a2, 0);
}

llvm::detail::IEEEFloat *LLVMConstPtrToInt(llvm::detail::IEEEFloat *a1, llvm::Constant *a2)
{
  return sub_1CC56C0C0((llvm *)0x2F, a1, a2, 0);
}

llvm::detail::IEEEFloat *LLVMConstIntToPtr(llvm::detail::IEEEFloat *a1, llvm::Constant *a2)
{
  return sub_1CC56C0C0((llvm *)0x30, a1, a2, 0);
}

llvm::detail::IEEEFloat *LLVMConstBitCast(llvm::detail::IEEEFloat *result, llvm::Constant *a2)
{
  if (*(llvm::Constant **)result != a2) {
    return sub_1CC56C0C0((llvm *)0x31, result, a2, 0);
  }
  return result;
}

uint64_t LLVMConstAddrSpaceCast(llvm::ConstantExpr *a1, llvm::Constant ***a2)
{
  return llvm::ConstantExpr::getAddrSpaceCast(a1, a2, 0);
}

llvm::ConstantExpr *LLVMConstIntCast(llvm::ConstantExpr *a1, llvm::Type ***a2, int a3)
{
  return llvm::ConstantExpr::getIntegerCast(a1, a2, (llvm::Type *)(a3 != 0));
}

llvm::Constant *LLVMConstSelect(llvm::ConstantExpr *a1, llvm::PoisonValue **a2, llvm::Constant *a3, uint64_t a4, llvm::Type *a5)
{
  return llvm::ConstantExpr::getSelect(a1, a2, a3, 0, a5);
}

void *LLVMConstExtractElement(llvm *a1, llvm::Constant *a2, llvm::Constant *a3)
{
  unsigned __int8 v15[2] = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::ConstantFoldExtractElementInstruction(a1, a2, a3);
  if (!result)
  {
    uint64_t v6 = *(void ***)a1;
    uint64_t v7 = *(void *)(*(void *)a1 + 24);
    if (v7)
    {
      v15[0] = a1;
      v15[1] = a2;
      uint64_t v8 = **v6 + 1512;
      v9[0] = 61;
      v9[1] = 0;
      uint64_t v10 = v15;
      uint64_t v11 = 2;
      long long v12 = 0u;
      long long v13 = 0u;
      uint64_t v14 = 0;
      return (void *)sub_1CC56C20C(v8, v7, (unsigned __int8 *)v9);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

llvm *LLVMConstInsertElement(llvm::ConstantExpr *a1, llvm::Constant *a2, llvm::Constant *a3, uint64_t a4, llvm::Type *a5)
{
  return llvm::ConstantExpr::getInsertElement(a1, a2, a3, 0, a5);
}

void *LLVMConstShuffleVector(llvm *a1, llvm *a2, llvm::Constant *a3)
{
  v9[8] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = v9;
  uint64_t v8 = 0x1000000000;
  llvm::ShuffleVectorInst::getShuffleMask(a3, (uint64_t)&v7);
  ShuffleVector = llvm::ConstantExpr::getShuffleVector(a1, a2, (int *)v7, (llvm::Type *)v8, 0);
  if (v7 != v9) {
    free(v7);
  }
  return ShuffleVector;
}

llvm::Constant *LLVMConstExtractValue(llvm::Constant *a1, unsigned int *a2, unsigned int a3)
{
  return llvm::ConstantExpr::getExtractValue(a1, a2, a3, 0);
}

llvm::Value *LLVMConstInsertValue(llvm::Constant *a1, uint64_t *a2, _DWORD *a3, unsigned int a4)
{
  return llvm::ConstantExpr::getInsertValue(a1, a2, a3, a4, 0);
}

uint64_t LLVMConstInlineAsm(unsigned __int8 *a1, char *__s, char *a3, int a4, int a5)
{
  int v10 = a1[8];
  if (__s)
  {
    size_t v11 = strlen(__s);
    if (a3) {
      goto LABEL_3;
    }
  }
  else
  {
    size_t v11 = 0;
    if (a3)
    {
LABEL_3:
      size_t v12 = strlen(a3);
      goto LABEL_6;
    }
  }
  size_t v12 = 0;
LABEL_6:
  if (v10 == 14) {
    long long v13 = (llvm::PointerType *)a1;
  }
  else {
    long long v13 = 0;
  }
  return llvm::InlineAsm::get(v13, (uint64_t)__s, v11, (uint64_t)a3, v12, a4 != 0, a5 != 0, 0, 0);
}

uint64_t LLVMGetGlobalParent(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

BOOL LLVMIsDeclaration(uint64_t a1)
{
  if (a1 && *(unsigned char *)(a1 + 16) == 3)
  {
    return (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) == 0;
  }
  else
  {
    if (*(unsigned char *)(a1 + 16) || *(void *)(a1 + 72) != a1 + 72) {
      return 0;
    }
    return (*(unsigned char *)(a1 + 34) & 0x80) == 0;
  }
}

uint64_t LLVMGetLinkage(uint64_t a1)
{
  return dword_1CFAC856C[*(_DWORD *)(a1 + 32) & 0xF];
}

uint64_t LLVMSetLinkage(uint64_t result, int a2)
{
  uint64_t v2 = result;
  switch(a2)
  {
    case 0:
      int v5 = *(_DWORD *)(result + 32);
      unsigned int v6 = v5 & 0xFFFFFFF0;
      goto LABEL_10;
    case 1:
      int v5 = *(_DWORD *)(result + 32);
      unsigned int v6 = v5 & 0xFFFFFFF0 | 1;
      goto LABEL_10;
    case 2:
      int v5 = *(_DWORD *)(result + 32);
      unsigned int v6 = v5 & 0xFFFFFFF0 | 2;
      goto LABEL_10;
    case 3:
      int v5 = *(_DWORD *)(result + 32);
      unsigned int v6 = v5 & 0xFFFFFFF0 | 3;
      goto LABEL_10;
    case 5:
      int v5 = *(_DWORD *)(result + 32);
      unsigned int v6 = v5 & 0xFFFFFFF0 | 4;
      goto LABEL_10;
    case 6:
      int v7 = *(_DWORD *)(result + 32);
      char v8 = 5;
      goto LABEL_14;
    case 7:
      int v5 = *(_DWORD *)(result + 32);
      unsigned int v6 = v5 & 0xFFFFFFF0 | 6;
LABEL_10:
      *(_DWORD *)(result + 32) = v6;
      if ((v5 & 0x30) == 0) {
        return result;
      }
      goto LABEL_15;
    case 8:
      unsigned int v3 = *(_DWORD *)(result + 32) & 0xFFFFFFC7;
      int v4 = 16391;
      goto LABEL_18;
    case 9:
    case 15:
    case 16:
      unsigned int v3 = *(_DWORD *)(result + 32) & 0xFFFFFFC0;
      int v4 = 16392;
LABEL_18:
      int v9 = v3 | v4;
      goto LABEL_19;
    case 12:
      int v7 = *(_DWORD *)(result + 32);
      char v8 = 9;
      goto LABEL_14;
    case 14:
      int v7 = *(_DWORD *)(result + 32);
      char v8 = 10;
LABEL_14:
      *(_DWORD *)(result + 32) = v7 & 0xFFFFFFF0 | v8 & 0xF;
      if ((v7 & 0x30) != 0)
      {
LABEL_15:
        uint64_t result = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)result);
        if ((result & 1) == 0)
        {
          int v9 = *(_DWORD *)(v2 + 32) | 0x4000;
LABEL_19:
          *(_DWORD *)(v2 + 32) = v9;
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void *LLVMSetSection(void *result, char *__s)
{
  uint64_t v2 = __s;
  uint64_t v3 = (uint64_t)result;
  if (__s)
  {
    uint64_t result = (void *)strlen(__s);
    size_t v4 = (size_t)result;
  }
  else
  {
    size_t v4 = 0;
  }
  if ((*(unsigned char *)(v3 + 34) & 0x40) != 0 || v4)
  {
    if (v4)
    {
      uint64_t v2 = llvm::UniqueStringSaver::save(***(void ***)v3 + 2136, v2, v4);
      uint64_t v6 = v5;
    }
    else
    {
      uint64_t v6 = 0;
    }
    uint64_t v7 = ***(void ***)v3;
    uint64_t v19 = v3;
    int v8 = *(_DWORD *)(v7 + 2520);
    if (v8)
    {
      uint64_t v9 = *(void *)(v7 + 2504);
      int v10 = v8 - 1;
      unsigned int v11 = v10 & ((v3 >> 4) ^ (v3 >> 9));
      uint64_t result = (void *)(v9 + 24 * v11);
      uint64_t v12 = *result;
      if (*result == v3)
      {
LABEL_10:
        result[1] = v2;
        result[2] = v6;
        *(_DWORD *)(v3 + 32) = *(_DWORD *)(v3 + 32) & 0xFFBFFFFF | ((v6 != 0) << 22);
        return result;
      }
      long long v13 = 0;
      int v14 = 1;
      while (v12 != -4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v12 == -8192;
        }
        if (v15) {
          long long v13 = result;
        }
        unsigned int v16 = v11 + v14++;
        unsigned int v11 = v16 & v10;
        uint64_t result = (void *)(v9 + 24 * v11);
        uint64_t v12 = *result;
        if (*result == v3) {
          goto LABEL_10;
        }
      }
      if (v13) {
        uint64_t v17 = v13;
      }
      else {
        uint64_t v17 = result;
      }
    }
    else
    {
      uint64_t v17 = 0;
    }
    uint64_t result = sub_1CC5BF31C(v7 + 2504, (uint64_t)&v19, &v19, v17);
    uint64_t v18 = v19;
    result[1] = 0;
    result[2] = 0;
    *uint64_t result = v18;
    goto LABEL_10;
  }
  return result;
}

uint64_t LLVMGetVisibility(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 32) >> 4) & 3;
}

uint64_t LLVMSetVisibility(uint64_t result, char a2)
{
  uint64_t v2 = result;
  int v3 = *(_DWORD *)(result + 32) & 0xF;
  unsigned int v4 = *(_DWORD *)(result + 32) & 0xFFFFFFCF | (16 * (a2 & 3));
  *(_DWORD *)(result + 32) = v4;
  if ((v3 - 7) < 2) {
    goto LABEL_6;
  }
  if (16 * (a2 & 3))
  {
    uint64_t result = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)result);
    if ((result & 1) == 0)
    {
      unsigned int v4 = *(_DWORD *)(v2 + 32);
LABEL_6:
      *(_DWORD *)(v2 + 32) = v4 | 0x4000;
    }
  }
  return result;
}

uint64_t LLVMGetDLLStorageClass(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 32) >> 8) & 3;
}

uint64_t LLVMSetDLLStorageClass(uint64_t result, char a2)
{
  *(_DWORD *)(result + 32) = *(_DWORD *)(result + 32) & 0xFFFFFCFF | ((a2 & 3) << 8);
  return result;
}

uint64_t LLVMGetUnnamedAddress(uint64_t a1)
{
  return *(_DWORD *)(a1 + 32) >> 6;
}

uint64_t LLVMSetUnnamedAddress(uint64_t result, int a2)
{
  if (a2 == 2)
  {
    unsigned int v2 = *(_DWORD *)(result + 32) & 0xFFFFFF3F | 0x80;
  }
  else if (a2 == 1)
  {
    unsigned int v2 = *(_DWORD *)(result + 32) & 0xFFFFFF3F | 0x40;
  }
  else
  {
    if (a2) {
      return result;
    }
    unsigned int v2 = *(_DWORD *)(result + 32) & 0xFFFFFF3F;
  }
  *(_DWORD *)(result + 32) = v2;
  return result;
}

BOOL LLVMHasUnnamedAddr(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 32) & 0xC0) == 128;
}

uint64_t LLVMSetUnnamedAddr(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = *(_DWORD *)(result + 32) & 0xFFFFFF3F | ((a2 != 0) << 7);
  return result;
}

uint64_t LLVMGlobalGetValueType(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t LLVMGetAlignment(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 16);
  switch(*(unsigned char *)(result + 16))
  {
    case ';':
      return 1 << *(_WORD *)(result + 18);
    case '<':
    case '=':
      unint64_t v2 = (unint64_t)*(unsigned __int16 *)(result + 18) >> 1;
      return 1 << v2;
    case '>':
    case '?':
    case '@':
      goto LABEL_12;
    case 'A':
      LOBYTE(v2) = *(unsigned char *)(result + 19);
      return 1 << v2;
    default:
      if (v1 > 3 || v1 == 1)
      {
LABEL_12:
        if (v1 == 64) {
          unint64_t v2 = result;
        }
        else {
          unint64_t v2 = 0;
        }
        if (v2)
        {
          LOBYTE(v2) = *(unsigned char *)(v2 + 19);
          return 1 << v2;
        }
      }
      else
      {
        char v4 = *(_WORD *)(result + 34);
        BOOL v5 = (v4 & 0x3F) == 0;
        char v6 = (v4 & 0x3F) - 1;
        if (v5) {
          char v6 = 0;
        }
        uint64_t v7 = 1 << v6;
        if (v5) {
          return 0;
        }
        else {
          return v7;
        }
      }
      return result;
  }
}

uint64_t LLVMSetAlignment(uint64_t result, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int8 *)(result + 16);
  switch(*(unsigned char *)(result + 16))
  {
    case ';':
      LOWORD(v3) = *(_WORD *)(result + 18) & 0xFFC0 | (63 - __clz(a2));
      goto LABEL_19;
    case '<':
    case '=':
      LOWORD(v3) = *(_WORD *)(result + 18) & 0xFF81 | (2 * (63 - __clz(a2)));
      goto LABEL_19;
    case '>':
    case '?':
    case '@':
      goto LABEL_13;
    case 'A':
      unsigned int v3 = *(_WORD *)(result + 18) & 0xC0FF | ((63 - __clz(a2)) << 8);
LABEL_19:
      *(_WORD *)(result + 18) = v3;
      break;
    default:
      if (v2 > 3 || v2 == 1)
      {
LABEL_13:
        if (v2 == 64) {
          uint64_t v7 = result;
        }
        else {
          uint64_t v7 = 0;
        }
        *(_WORD *)(v7 + 18) = *(_WORD *)(v7 + 18) & 0xC0FF | ((63 - (unsigned __int16)__clz(a2)) << 8);
      }
      else
      {
        unint64_t v5 = __clz(a2) ^ 0x13F;
        if (!a2) {
          unint64_t v5 = 0;
        }
        if (v5 >= 0x100) {
          int v6 = ((v5 & 0x3F) << 16) + 0x10000;
        }
        else {
          int v6 = 0;
        }
        *(_DWORD *)(result + 32) = *(_DWORD *)(result + 32) & 0xFFC0FFFF | v6;
      }
      break;
  }
  return result;
}

char *LLVMGlobalCopyAllMetadata(uint64_t a1, void *a2)
{
  unsigned int v3 = &v4;
  uint64_t v4 = a1;
  return sub_1CC576E58(a2, (void (*)(uint64_t, void **))sub_1CC581944, (uint64_t)&v3);
}

uint64_t LLVMValueMetadataEntriesGetKind(uint64_t a1, unsigned int a2)
{
  return *(unsigned int *)(a1 + 16 * a2);
}

uint64_t LLVMValueMetadataEntriesGetMetadata(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 16 * a2 + 8);
}

uint64_t LLVMGlobalEraseMetadata(uint64_t result, int a2)
{
  if ((*(unsigned char *)(result + 23) & 0x20) != 0)
  {
    uint64_t v2 = ***(void ***)result + 2480;
    uint64_t v6 = result;
    uint64_t v7 = result;
    uint64_t v4 = sub_1CC608F78(v2, &v7);
    uint64_t result = llvm::MDAttachments::erase((llvm::MDAttachments *)(v4 + 1), a2);
    if (!*((_DWORD *)v4 + 4) && (*(unsigned char *)(v6 + 23) & 0x20) != 0)
    {
      unint64_t v5 = (int32x2_t *)(***(void ***)v6 + 2480);
      uint64_t v7 = v6;
      uint64_t result = sub_1CC6035CC(v5, &v7);
      *(_DWORD *)(v6 + 20) &= ~0x20000000u;
    }
  }
  return result;
}

uint64_t LLVMGlobalClearMetadata(uint64_t result)
{
  if ((*(unsigned char *)(result + 23) & 0x20) != 0)
  {
    uint64_t v1 = result;
    uint64_t v2 = (int32x2_t *)(***(void ***)result + 2480);
    uint64_t v3 = v1;
    uint64_t result = sub_1CC6035CC(v2, &v3);
    *(_DWORD *)(v1 + 20) &= ~0x20000000u;
  }
  return result;
}

unint64_t *LLVMAddGlobal(uint64_t a1, llvm::PointerType *a2, const char *a3)
{
  uint64_t v6 = (char *)operator new(0x78uLL);
  uint64_t v7 = (unint64_t *)(v6 + 32);
  *((_DWORD *)v6 + 13) = *((_DWORD *)v6 + 13) & 0x38000000 | 1;
  *(void *)uint64_t v6 = 0;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *((void *)v6 + 3) = v6 + 32;
  char v8 = 1;
  char v12 = 1;
  if (*a3)
  {
    int v10 = a3;
    char v8 = 3;
  }
  char v11 = v8;
  return llvm::GlobalVariable::GlobalVariable(v7, a1, a2, 0, 0, 0, &v10, 0, 0, 0, 0);
}

unint64_t *LLVMAddGlobalInAddressSpace(uint64_t a1, llvm::PointerType *a2, const char *a3, unsigned int a4)
{
  char v8 = (char *)operator new(0x78uLL);
  uint64_t v9 = (unint64_t *)(v8 + 32);
  *((_DWORD *)v8 + 13) = *((_DWORD *)v8 + 13) & 0x38000000 | 1;
  *(void *)char v8 = 0;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *((void *)v8 + 3) = v8 + 32;
  char v10 = 1;
  char v14 = 1;
  if (*a3)
  {
    char v12 = a3;
    char v10 = 3;
  }
  char v13 = v10;
  return llvm::GlobalVariable::GlobalVariable(v9, a1, a2, 0, 0, 0, &v12, 0, 0, (llvm::Type *)(a4 | 0x100000000), 0);
}

uint64_t LLVMGetNamedGlobal(uint64_t a1, char *__s)
{
  if (!__s)
  {
    unint64_t v5 = *(uint64_t **)(a1 + 112);
    unsigned int v9 = *((_DWORD *)v5 + 2);
    if (v9)
    {
      size_t v8 = 0;
      goto LABEL_19;
    }
    return 0;
  }
  size_t v4 = strlen(__s);
  unint64_t v5 = *(uint64_t **)(a1 + 112);
  size_t v6 = *((unsigned int *)v5 + 8);
  if (v6 <= 1) {
    unint64_t v7 = 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v4 < v7) {
    unint64_t v7 = v4;
  }
  if (v4 <= v6) {
    unint64_t v7 = v4;
  }
  if ((v6 & 0x80000000) == 0) {
    size_t v8 = v7;
  }
  else {
    size_t v8 = v4;
  }
  unsigned int v9 = *((_DWORD *)v5 + 2);
  if (!v9) {
    return 0;
  }
  BOOL v10 = v8 == 0;
  if (v8)
  {
    uint64_t v11 = 0;
    int v12 = 0;
    do
      int v12 = 33 * v12 + __s[v11++];
    while (v8 != v11);
    goto LABEL_20;
  }
LABEL_19:
  int v12 = 0;
  BOOL v10 = 1;
LABEL_20:
  unsigned int v13 = v9 - 1;
  uint64_t v14 = *v5;
  uint64_t v21 = v9;
  uint64_t v15 = *v5 + 8 * v9 + 8;
  int v16 = 1;
  int v17 = v12;
  while (1)
  {
    uint64_t v18 = v17 & v13;
    uint64_t v19 = *(void **)(v14 + 8 * v18);
    if (v19 != (void *)-8)
    {
      if (!v19) {
        return 0;
      }
      if (*(_DWORD *)(v15 + 4 * v18) == v12
        && v8 == *v19
        && (v10 || !memcmp(__s, (char *)v19 + *((unsigned int *)v5 + 5), v8)))
      {
        break;
      }
    }
    int v17 = v16 + v18;
    ++v16;
  }
  if (v18 == -1) {
    return 0;
  }
  if ((int)v18 == v21) {
    return 0;
  }
  uint64_t result = *(void *)(*(void *)(v14 + 8 * (int)v18) + 8);
  if (!result || *(unsigned char *)(result + 16) != 3) {
    return 0;
  }
  return result;
}

uint64_t LLVMGetFirstGlobal(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1) {
    BOOL v2 = v1 == a1 + 8;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return 0;
  }
  else {
    return v1 - 56;
  }
}

uint64_t LLVMGetLastGlobal(uint64_t a1)
{
  if (a1 + 8 == *(void *)(a1 + 16)) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1) {
    return v1 - 56;
  }
  else {
    return 0;
  }
}

uint64_t LLVMGetNextGlobal(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (!a1) {
    uint64_t v1 = 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (v2 == *(void *)(a1 + 40) + 8 || v2 == 0) {
    return 0;
  }
  else {
    return v2 - 56;
  }
}

uint64_t LLVMGetPreviousGlobal(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 56);
  if (!a1) {
    uint64_t v1 = 0;
  }
  if (v1 == *(uint64_t **)(*(void *)(a1 + 40) + 16)) {
    return 0;
  }
  uint64_t v2 = *v1;
  if (v2) {
    return v2 - 56;
  }
  else {
    return 0;
  }
}

uint64_t LLVMGetInitializer(uint64_t a1)
{
  if (a1 && *(unsigned char *)(a1 + 16) == 3)
  {
    if ((*(_DWORD *)(a1 + 20) & 0x7FFFFFF) == 0) {
      return 0;
    }
  }
  else if (!*(unsigned char *)(a1 + 16) && *(void *)(a1 + 72) == a1 + 72 && (*(unsigned char *)(a1 + 34) & 0x80) == 0)
  {
    return 0;
  }
  return *(void *)(a1 - 32);
}

BOOL LLVMIsThreadLocal(uint64_t a1)
{
  return (*(unsigned char *)(a1 + 33) & 0x1C) != 0;
}

uint64_t LLVMSetThreadLocal(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = *(_DWORD *)(result + 32) & 0xFFFFE3FF | ((a2 != 0) << 10);
  return result;
}

uint64_t LLVMIsGlobalConstant(uint64_t a1)
{
  return *(unsigned char *)(a1 + 80) & 1;
}

uint64_t LLVMSetGlobalConstant(uint64_t result, int a2)
{
  *(unsigned char *)(result + 80) = *(unsigned char *)(result + 80) & 0xFE | (a2 != 0);
  return result;
}

uint64_t LLVMGetThreadLocalMode(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 32) >> 10) & 7;
}

uint64_t LLVMSetThreadLocalMode(uint64_t result, int a2)
{
  switch(a2)
  {
    case 0:
      unsigned int v2 = *(_DWORD *)(result + 32) & 0xFFFFE3FF;
      goto LABEL_7;
    case 1:
      unsigned int v2 = *(_DWORD *)(result + 32) & 0xFFFFE3FF | 0x400;
      goto LABEL_7;
    case 2:
      unsigned int v2 = *(_DWORD *)(result + 32) & 0xFFFFE3FF | 0x800;
      goto LABEL_7;
    case 3:
      unsigned int v2 = *(_DWORD *)(result + 32) & 0xFFFFE3FF | 0xC00;
      goto LABEL_7;
    case 4:
      unsigned int v2 = *(_DWORD *)(result + 32) & 0xFFFFE3FF | 0x1000;
LABEL_7:
      *(_DWORD *)(result + 32) = v2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t LLVMIsExternallyInitialized(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 80) >> 1) & 1;
}

uint64_t LLVMSetExternallyInitialized(uint64_t result, int a2)
{
  *(unsigned char *)(result + 80) = *(unsigned char *)(result + 80) & 0xFD | (2 * (a2 != 0));
  return result;
}

unint64_t *LLVMAddAlias(uint64_t a1, uint64_t a2, unint64_t a3, const char *a4)
{
  unint64_t v5 = **(llvm::PointerType ***)(a2 + 16);
  unsigned int v6 = *(_DWORD *)(a2 + 8);
  char v7 = 1;
  char v11 = 1;
  if (*a4)
  {
    unsigned int v9 = a4;
    char v7 = 3;
  }
  char v10 = v7;
  return llvm::GlobalAlias::create(v5, (llvm::Type *)(v6 >> 8), 0, &v9, a3, a1);
}

unint64_t *LLVMAddAlias2(uint64_t a1, llvm::PointerType *a2, llvm::Type *a3, unint64_t a4, const char *a5)
{
  char v5 = 1;
  char v9 = 1;
  if (*a5)
  {
    char v7 = a5;
    char v5 = 3;
  }
  char v8 = v5;
  return llvm::GlobalAlias::create(a2, a3, 0, &v7, a4, a1);
}

uint64_t LLVMGetNamedGlobalAlias(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  uint64_t result = sub_1CC196FC4(*(uint64_t **)(a1 + 112), a2, a3);
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 1) {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMGetFirstGlobalAlias(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1) {
    BOOL v2 = v1 == a1 + 40;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return 0;
  }
  else {
    return v1 - 48;
  }
}

uint64_t LLVMGetLastGlobalAlias(uint64_t a1)
{
  if (a1 + 40 == *(void *)(a1 + 48)) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1) {
    return v1 - 48;
  }
  else {
    return 0;
  }
}

uint64_t LLVMGetNextGlobalAlias(uint64_t a1)
{
  uint64_t v1 = a1 + 48;
  if (!a1) {
    uint64_t v1 = 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (v2 == *(void *)(a1 + 40) + 40 || v2 == 0) {
    return 0;
  }
  else {
    return v2 - 48;
  }
}

uint64_t LLVMGetPreviousGlobalAlias(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 48);
  if (!a1) {
    uint64_t v1 = 0;
  }
  if (v1 == *(uint64_t **)(*(void *)(a1 + 40) + 48)) {
    return 0;
  }
  uint64_t v2 = *v1;
  if (v2) {
    return v2 - 48;
  }
  else {
    return 0;
  }
}

uint64_t LLVMAliasGetAliasee(uint64_t a1)
{
  return *(void *)(a1 - 32);
}

unint64_t *LLVMAddFunction(unint64_t a1, const char *a2, llvm::PointerType *a3)
{
  char v5 = 1;
  char v10 = 1;
  if (*a2)
  {
    char v8 = a2;
    char v5 = 3;
  }
  char v9 = v5;
  unsigned int v6 = operator new(0x80uLL);
  *((_DWORD *)v6 + 7) = *((_DWORD *)v6 + 7) & 0x38000000 | 0x40000000;
  *(void *)unsigned int v6 = 0;
  return llvm::Function::Function((unint64_t *)v6 + 1, a3, 0, (llvm::Type *)0xFFFFFFFFLL, &v8, a1);
}

uint64_t LLVMGetNamedFunction(uint64_t a1, char *__s)
{
  if (!__s)
  {
    char v5 = *(uint64_t **)(a1 + 112);
    unsigned int v9 = *((_DWORD *)v5 + 2);
    if (v9)
    {
      size_t v8 = 0;
      goto LABEL_19;
    }
    return 0;
  }
  size_t v4 = strlen(__s);
  char v5 = *(uint64_t **)(a1 + 112);
  size_t v6 = *((unsigned int *)v5 + 8);
  if (v6 <= 1) {
    unint64_t v7 = 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v4 < v7) {
    unint64_t v7 = v4;
  }
  if (v4 <= v6) {
    unint64_t v7 = v4;
  }
  if ((v6 & 0x80000000) == 0) {
    size_t v8 = v7;
  }
  else {
    size_t v8 = v4;
  }
  unsigned int v9 = *((_DWORD *)v5 + 2);
  if (!v9) {
    return 0;
  }
  BOOL v10 = v8 == 0;
  if (v8)
  {
    uint64_t v11 = 0;
    int v12 = 0;
    do
      int v12 = 33 * v12 + __s[v11++];
    while (v8 != v11);
    goto LABEL_20;
  }
LABEL_19:
  int v12 = 0;
  BOOL v10 = 1;
LABEL_20:
  unsigned int v13 = v9 - 1;
  uint64_t v14 = *v5;
  uint64_t v22 = v9;
  uint64_t v15 = *v5 + 8 * v9 + 8;
  int v16 = 1;
  int v17 = v12;
  while (1)
  {
    uint64_t v18 = v17 & v13;
    uint64_t v19 = *(void **)(v14 + 8 * v18);
    if (v19 != (void *)-8)
    {
      if (!v19) {
        return 0;
      }
      if (*(_DWORD *)(v15 + 4 * v18) == v12
        && v8 == *v19
        && (v10 || !memcmp(__s, (char *)v19 + *((unsigned int *)v5 + 5), v8)))
      {
        break;
      }
    }
    int v17 = v16 + v18;
    ++v16;
  }
  if (v18 == -1) {
    return 0;
  }
  if ((int)v18 == v22) {
    return 0;
  }
  uint64_t v20 = *(void *)(*(void *)(v14 + 8 * (int)v18) + 8);
  if (!v20) {
    return 0;
  }
  if (*(unsigned char *)(v20 + 16)) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(v14 + 8 * (int)v18) + 8);
  }
}

uint64_t LLVMGetFirstFunction(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1) {
    BOOL v2 = v1 == a1 + 24;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return 0;
  }
  else {
    return v1 - 56;
  }
}

uint64_t LLVMGetLastFunction(uint64_t a1)
{
  if (a1 + 24 == *(void *)(a1 + 32)) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1) {
    return v1 - 56;
  }
  else {
    return 0;
  }
}

uint64_t LLVMGetNextFunction(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (!a1) {
    uint64_t v1 = 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (v2 == *(void *)(a1 + 40) + 24 || v2 == 0) {
    return 0;
  }
  else {
    return v2 - 56;
  }
}

uint64_t LLVMGetPreviousFunction(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 56);
  if (!a1) {
    uint64_t v1 = 0;
  }
  if (v1 == *(uint64_t **)(*(void *)(a1 + 40) + 32)) {
    return 0;
  }
  uint64_t v2 = *v1;
  if (v2) {
    return v2 - 56;
  }
  else {
    return 0;
  }
}

uint64_t LLVMHasPersonalityFn(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 18) >> 3) & 1;
}

uint64_t LLVMGetPersonalityFn(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 20);
  if ((v1 & 0x40000000) != 0) {
    uint64_t v2 = *(void *)(a1 - 8);
  }
  else {
    uint64_t v2 = a1 - 32 * (v1 & 0x7FFFFFF);
  }
  return *(void *)v2;
}

void *LLVMSetPersonalityFn(uint64_t a1, uint64_t a2)
{
  __int16 v3 = a2 != 0;
  uint64_t result = sub_1CD5C0280((void *)a1, a2);
  *(_WORD *)(a1 + 18) = *(_WORD *)(a1 + 18) & 0xFFF7 | (8 * v3);
  return result;
}

uint64_t LLVMGetIntrinsicID(uint64_t a1)
{
  uint64_t result = 0;
  if (a1)
  {
    if (!*(unsigned char *)(a1 + 16)) {
      return *(unsigned int *)(a1 + 36);
    }
  }
  return result;
}

char *LLVMIntrinsicGetName(int a1, size_t *a2)
{
  __int16 v3 = off_1E6830B58[a1];
  if (v3) {
    size_t v4 = strlen(off_1E6830B58[a1]);
  }
  else {
    size_t v4 = 0;
  }
  *a2 = v4;
  return v3;
}

char *LLVMIntrinsicCopyOverloadedName(int a1, uint64_t a2, uint64_t a3, std::string::size_type *a4)
{
  sub_1CC5B8334(a1, a2, a3, 0, 0, &v11);
  int v5 = SHIBYTE(v11.__r_.__value_.__r.__words[2]);
  std::string::size_type size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
  unint64_t v7 = (std::string *)v11.__r_.__value_.__r.__words[0];
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v11.__r_.__value_.__l.__size_;
  }
  *a4 = size;
  if (v5 >= 0) {
    size_t v8 = &v11;
  }
  else {
    size_t v8 = v7;
  }
  unsigned int v9 = strdup((const char *)v8);
  if (v5 < 0) {
    operator delete(v7);
  }
  return v9;
}

char *LLVMIntrinsicCopyOverloadedName2(uint64_t **a1, int a2, uint64_t a3, uint64_t a4, std::string::size_type *a5)
{
  sub_1CC5B8334(a2, a3, a4, a1, 0, &v12);
  int v6 = SHIBYTE(v12.__r_.__value_.__r.__words[2]);
  std::string::size_type size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
  size_t v8 = (std::string *)v12.__r_.__value_.__r.__words[0];
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v12.__r_.__value_.__l.__size_;
  }
  *a5 = size;
  if (v6 >= 0) {
    unsigned int v9 = &v12;
  }
  else {
    unsigned int v9 = v8;
  }
  BOOL v10 = strdup((const char *)v9);
  if (v6 < 0) {
    operator delete(v8);
  }
  return v10;
}

uint64_t LLVMIntrinsicIsOverloaded(unsigned int a1)
{
  return (byte_1CFADA6F7[(unint64_t)a1 >> 3] >> (a1 & 7)) & 1;
}

uint64_t LLVMGetFunctionCallConv(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 18) >> 4) & 0x3FF;
}

uint64_t LLVMSetFunctionCallConv(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 18) = *(_WORD *)(result + 18) & 0xC00F | (16 * a2);
  return result;
}

char *LLVMGetGC(llvm::Function *a1)
{
  if ((*((_WORD *)a1 + 9) & 0x4000) == 0) {
    return 0;
  }
  uint64_t result = (char *)llvm::LLVMContext::getGC(**(llvm::LLVMContext ***)a1, a1);
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

void LLVMSetGC(llvm::Function *this, char *__s)
{
  if (!__s)
  {
    llvm::Function::clearGC((uint64_t)this);
    return;
  }
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v6 = operator new(v7 + 1);
    __dst[1] = v5;
    unint64_t v11 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_12;
  }
  HIBYTE(v11) = v4;
  int v6 = __dst;
  if (v4) {
LABEL_12:
  }
    memcpy(v6, __s, v5);
  *((unsigned char *)v6 + v5) = 0;
  llvm::Function::setGC((uint64_t)this, (uint64_t)__dst);
  if (SHIBYTE(v11) < 0)
  {
    unsigned int v9 = (void *)__dst[0];
    operator delete(v9);
  }
}

uint64_t LLVMAddAttributeAtIndex(llvm::LLVMContext ***a1, int a2, uint64_t a3)
{
  uint64_t result = llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(a1 + 14), **a1, a2, a3);
  a1[14] = (llvm::LLVMContext **)result;
  return result;
}

uint64_t LLVMGetAttributeCountAtIndex(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 112);
  if (v2
    && (a2 + 1) < *(_DWORD *)(v2 + 8)
    && (uint64_t v3 = *(void *)(v2 + 8 * (a2 + 1) + 40)) != 0)
  {
    return *(unsigned int *)(v3 + 8);
  }
  else
  {
    return 0;
  }
}

uint64_t LLVMGetAttributesAtIndex(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 112);
  if (v3)
  {
    if ((a2 + 1) < *(_DWORD *)(v3 + 8))
    {
      uint64_t v4 = *(void *)(v3 + 8 * (a2 + 1) + 40);
      if (v4)
      {
        uint64_t v5 = *(unsigned int *)(v4 + 8);
        if (v5)
        {
          int v6 = (uint64_t *)(v4 + 48);
          uint64_t v7 = 8 * v5;
          do
          {
            uint64_t v8 = *v6++;
            *a3++ = v8;
            v7 -= 8;
          }
          while (v7);
        }
      }
    }
  }
  return result;
}

uint64_t LLVMGetEnumAttributeAtIndex(uint64_t a1, int a2, int a3)
{
  return llvm::AttributeList::getAttributeAtIndex((uint64_t *)(a1 + 112), a2, a3);
}

uint64_t LLVMGetStringAttributeAtIndex(uint64_t a1, int a2, void *a3, unsigned int a4)
{
  return llvm::Function::getAttributeAtIndex(a1, a2, a3, a4);
}

uint64_t LLVMRemoveEnumAttributeAtIndex(uint64_t a1, int a2, int a3)
{
  uint64_t result = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(a1 + 112), **(uint64_t ***)a1, a2, a3);
  *(void *)(a1 + 112) = result;
  return result;
}

uint64_t LLVMRemoveStringAttributeAtIndex(uint64_t a1, int a2, void *a3, unsigned int a4)
{
  uint64_t result = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(a1 + 112), **(uint64_t ***)a1, a2, a3, a4);
  *(void *)(a1 + 112) = result;
  return result;
}

uint64_t **LLVMAddTargetDependentFunctionAttr(uint64_t ***a1, char *__s, char *a3)
{
  int v6 = **a1;
  if (!__s)
  {
    size_t v7 = 0;
    if (a3) {
      goto LABEL_3;
    }
LABEL_5:
    size_t v8 = 0;
    goto LABEL_6;
  }
  size_t v7 = strlen(__s);
  if (!a3) {
    goto LABEL_5;
  }
LABEL_3:
  size_t v8 = strlen(a3);
LABEL_6:
  unsigned int v9 = llvm::Attribute::get(v6, (unsigned __int8 *)__s, v7, (unsigned __int8 *)a3, v8);
  uint64_t result = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(a1 + 14), (llvm::LLVMContext *)**a1, -1, (uint64_t)v9);
  a1[14] = result;
  return result;
}

uint64_t LLVMCountParams(uint64_t a1)
{
  return *(unsigned int *)(a1 + 96);
}

void LLVMGetParams(llvm::Function *this, void *a2)
{
  if (*((_WORD *)this + 9))
  {
    llvm::Function::BuildLazyArguments(this);
    uint64_t v4 = *((void *)this + 11);
    if (*((_WORD *)this + 9))
    {
      uint64_t v7 = *((void *)this + 11);
      llvm::Function::BuildLazyArguments(this);
      uint64_t v4 = v7;
      uint64_t v5 = *((void *)this + 11);
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v4 = *((void *)this + 11);
  }
  uint64_t v5 = v4;
LABEL_4:
  uint64_t v6 = v5 + 40 * *((void *)this + 12);
  while (v4 != v6)
  {
    *a2++ = v4;
    v4 += 40;
  }
}

uint64_t LLVMGetParam(llvm::Function *this, unsigned int a2)
{
  if (*((_WORD *)this + 9)) {
    llvm::Function::BuildLazyArguments(this);
  }
  return *((void *)this + 11) + 40 * a2;
}

uint64_t LLVMGetParamParent(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t LLVMGetFirstParam(llvm::Function *this)
{
  if ((*((_WORD *)this + 9) & 1) == 0)
  {
    uint64_t v2 = *((void *)this + 11);
LABEL_4:
    uint64_t v3 = v2;
    goto LABEL_6;
  }
  llvm::Function::BuildLazyArguments(this);
  uint64_t v2 = *((void *)this + 11);
  if ((*((_WORD *)this + 9) & 1) == 0) {
    goto LABEL_4;
  }
  llvm::Function::BuildLazyArguments(this);
  uint64_t v3 = *((void *)this + 11);
LABEL_6:
  if (v2 == v3 + 40 * *((void *)this + 12)) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t LLVMGetLastParam(llvm::Function *this)
{
  if ((*((_WORD *)this + 9) & 1) == 0)
  {
    uint64_t v2 = *((void *)this + 11);
    uint64_t v3 = *((void *)this + 12);
LABEL_4:
    uint64_t v4 = v2;
    goto LABEL_6;
  }
  llvm::Function::BuildLazyArguments(this);
  uint64_t v2 = *((void *)this + 11);
  uint64_t v3 = *((void *)this + 12);
  if ((*((_WORD *)this + 9) & 1) == 0) {
    goto LABEL_4;
  }
  llvm::Function::BuildLazyArguments(this);
  uint64_t v4 = *((void *)this + 11);
LABEL_6:
  uint64_t v5 = v2 + 40 * v3;
  if (v5 == v4) {
    return 0;
  }
  else {
    return v5 - 40;
  }
}

uint64_t LLVMGetNextParam(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  unint64_t v2 = (*(_DWORD *)(a1 + 32) + 1);
  if (*(void *)(v1 + 96) <= v2) {
    return 0;
  }
  if (*(_WORD *)(v1 + 18))
  {
    llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 24));
    LODWORD(v2) = *(_DWORD *)(a1 + 32) + 1;
  }
  return *(void *)(v1 + 88) + 40 * v2;
}

uint64_t LLVMGetPreviousParam(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 32);
  if (!v1) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (*(_WORD *)(v3 + 18))
  {
    llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 24));
    int v1 = *(_DWORD *)(a1 + 32);
  }
  return *(void *)(v3 + 88) + 40 * (v1 - 1);
}

uint64_t LLVMSetParamAlignment(uint64_t a1, unsigned int a2)
{
  unint64_t v3 = llvm::Attribute::get(**(uint64_t ***)a1, 0x4Au, 1 << (63 - __clz(a2)));
  uint64_t v4 = *(void *)(a1 + 24);
  int v6 = *(_DWORD *)(a1 + 32);
  uint64_t result = llvm::AttributeList::addParamAttribute((void *)(v4 + 112), **(uint64_t ***)v4, &v6, 1, v3);
  *(void *)(v4 + 112) = result;
  return result;
}

unint64_t *LLVMAddGlobalIFunc(uint64_t a1, const char *a2, const char *a3, llvm::PointerType *a4, llvm::Type *a5, unint64_t a6)
{
  __int16 v8 = 261;
  v7[0] = a2;
  v7[1] = a3;
  return llvm::GlobalIFunc::create(a4, a5, 0, v7, a6, a1);
}

uint64_t LLVMGetFirstGlobalIFunc(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64);
  if (v1) {
    BOOL v2 = v1 == a1 + 56;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return 0;
  }
  else {
    return v1 - 56;
  }
}

uint64_t LLVMGetLastGlobalIFunc(uint64_t a1)
{
  if (a1 + 56 == *(void *)(a1 + 64)) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 56);
  if (v1) {
    return v1 - 56;
  }
  else {
    return 0;
  }
}

uint64_t LLVMGetNextGlobalIFunc(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (!a1) {
    uint64_t v1 = 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (v2 == *(void *)(a1 + 40) + 56 || v2 == 0) {
    return 0;
  }
  else {
    return v2 - 56;
  }
}

uint64_t LLVMGetPreviousGlobalIFunc(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 56);
  if (!a1) {
    uint64_t v1 = 0;
  }
  if (v1 == *(uint64_t **)(*(void *)(a1 + 40) + 64)) {
    return 0;
  }
  uint64_t v2 = *v1;
  if (v2) {
    return v2 - 56;
  }
  else {
    return 0;
  }
}

uint64_t LLVMGetGlobalIFuncResolver(uint64_t a1)
{
  return *(void *)(a1 - 32);
}

uint64_t LLVMSetGlobalIFuncResolver(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (void *)(result - 32);
  if (*(void *)(result - 32))
  {
    **(void **)(result - 16) = *(void *)(result - 24);
    uint64_t v3 = *(void *)(result - 24);
    if (v3) {
      *(void *)(v3 + 16) = *(void *)(result - 16);
    }
  }
  *uint64_t v2 = a2;
  if (a2)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    uint64_t v4 = (void *)(a2 + 8);
    uint64_t v5 = v6;
    *(void *)(result - 24) = v6;
    if (v6) {
      *(void *)(v5 + 16) = result - 24;
    }
    *(void *)(result - 16) = v4;
    *uint64_t v4 = v2;
  }
  return result;
}

void LLVMEraseGlobalIFunc()
{
}

void LLVMRemoveGlobalIFunc()
{
}

BOOL LLVMValueIsBasicBlock(uint64_t a1)
{
  return *(unsigned char *)(a1 + 16) == 22;
}

char *LLVMGetBasicBlockName(uint64_t ***a1)
{
  if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
  {
    uint64_t v1 = ***a1;
    uint64_t v2 = *(void *)(v1 + 152);
    uint64_t v3 = *(unsigned int *)(v1 + 168);
    if (v3)
    {
      LODWORD(v4) = (v3 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      uint64_t v5 = (uint64_t ****)(v2 + 16 * v4);
      uint64_t v6 = *v5;
      if (*v5 == a1) {
        return (char *)(v5[1] + 2);
      }
      int v7 = 1;
      while (v6 != (uint64_t ***)-4096)
      {
        int v8 = v4 + v7++;
        uint64_t v4 = v8 & (v3 - 1);
        uint64_t v6 = *(uint64_t ****)(v2 + 16 * v4);
        if (v6 == a1)
        {
          uint64_t v5 = (uint64_t ****)(v2 + 16 * v4);
          return (char *)(v5[1] + 2);
        }
      }
    }
    uint64_t v5 = (uint64_t ****)(v2 + 16 * v3);
    return (char *)(v5[1] + 2);
  }
  return &byte_1CFBCE98E;
}

uint64_t LLVMGetBasicBlockParent(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t LLVMGetBasicBlockTerminator(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1 == a1 + 40) {
    return 0;
  }
  if (v1) {
    uint64_t v2 = v1 - 24;
  }
  else {
    uint64_t v2 = 0;
  }
  if (*(unsigned __int8 *)(v2 + 16) - 29 >= 0xB) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t LLVMCountBasicBlocks(uint64_t result)
{
  uint64_t v1 = result + 72;
  LODWORD(result) = -1;
  uint64_t v2 = v1;
  do
  {
    uint64_t v2 = *(void *)(v2 + 8);
    uint64_t result = (result + 1);
  }
  while (v2 != v1);
  return result;
}

uint64_t LLVMGetBasicBlocks(uint64_t result, void *a2)
{
  for (uint64_t i = *(void *)(result + 80); i != result + 72; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v3 = i - 24;
    if (!i) {
      uint64_t v3 = 0;
    }
    *a2++ = v3;
  }
  return result;
}

uint64_t LLVMGetEntryBasicBlock(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  if (v1) {
    return v1 - 24;
  }
  else {
    return 0;
  }
}

uint64_t LLVMGetFirstBasicBlock(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  if (v1) {
    BOOL v2 = v1 == a1 + 72;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return 0;
  }
  else {
    return v1 - 24;
  }
}

uint64_t LLVMGetLastBasicBlock(uint64_t a1)
{
  if (a1 + 72 == *(void *)(a1 + 80)) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 72);
  if (v1) {
    return v1 - 24;
  }
  else {
    return 0;
  }
}

uint64_t LLVMGetNextBasicBlock(uint64_t a1)
{
  uint64_t v1 = a1 + 24;
  if (!a1) {
    uint64_t v1 = 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (v2 == *(void *)(a1 + 56) + 72 || v2 == 0) {
    return 0;
  }
  else {
    return v2 - 24;
  }
}

uint64_t LLVMGetPreviousBasicBlock(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 24);
  if (!a1) {
    uint64_t v1 = 0;
  }
  if (v1 == *(uint64_t **)(*(void *)(a1 + 56) + 80)) {
    return 0;
  }
  uint64_t v2 = *v1;
  if (v2) {
    return v2 - 24;
  }
  else {
    return 0;
  }
}

void LLVMCreateBasicBlockInContext(uint64_t a1, unsigned char *a2)
{
  char v2 = 1;
  char v5 = 1;
  if (*a2)
  {
    uint64_t v3 = a2;
    char v2 = 3;
  }
  char v4 = v2;
  operator new();
}

char *LLVMInsertExistingBasicBlockAfterInsertBlock(uint64_t a1, llvm::Value *a2)
{
  return sub_1CC57B608((void *)(*(void *)(*(void *)(a1 + 48) + 56) + 72), *(void *)(a1 + 48) + 24, a2);
}

char *sub_1CC57B608(void *a1, uint64_t a2, llvm::Value *a3)
{
  if ((void *)*a1 == a1) {
    char v4 = (uint64_t *)a1[1];
  }
  else {
    char v4 = *(uint64_t **)(a2 + 8);
  }
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)a1, a3);
  uint64_t v5 = *v4;
  *((void *)a3 + 3) = *v4;
  *((void *)a3 + 4) = v4;
  uint64_t v6 = (char *)a3 + 24;
  *(void *)(v5 + 8) = v6;
  *char v4 = (uint64_t)v6;
  return v6;
}

void LLVMAppendExistingBasicBlock(uint64_t a1, llvm::Value *a2)
{
  char v2 = a2;
  uint64_t v4 = a1 + 72;
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(a1 + 72, a2);
  uint64_t v5 = *(void *)(a1 + 72);
  *((void *)v2 + 3) = v5;
  *((void *)v2 + 4) = v4;
  char v2 = (llvm::Value *)((char *)v2 + 24);
  *(void *)(v5 + 8) = v2;
  *(void *)(a1 + 72) = v2;
}

void LLVMAppendBasicBlockInContext(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  char v3 = 1;
  char v6 = 1;
  if (*a3)
  {
    uint64_t v4 = a3;
    char v3 = 3;
  }
  char v5 = v3;
  operator new();
}

void LLVMAppendBasicBlock(uint64_t a1, unsigned char *a2)
{
  if (!atomic_load_explicit(&qword_1EA61BF08, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EA61BF08, (void *(*)(void))sub_1CC58168C, (void (*)(void *))sub_1CC5816C8);
  }
  uint64_t v4 = qword_1EA61BF08;

  LLVMAppendBasicBlockInContext(v4, a1, a2);
}

void LLVMInsertBasicBlockInContext(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  char v3 = 1;
  char v6 = 1;
  if (*a3)
  {
    uint64_t v4 = a3;
    char v3 = 3;
  }
  char v5 = v3;
  operator new();
}

void LLVMInsertBasicBlock(uint64_t a1, unsigned char *a2)
{
  if (!atomic_load_explicit(&qword_1EA61BF08, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EA61BF08, (void *(*)(void))sub_1CC58168C, (void (*)(void *))sub_1CC5816C8);
  }
  uint64_t v4 = qword_1EA61BF08;

  LLVMInsertBasicBlockInContext(v4, a1, a2);
}

void LLVMMoveBasicBlockBefore(uint64_t a1, uint64_t a2)
{
}

void LLVMMoveBasicBlockAfter(uint64_t a1, uint64_t a2)
{
}

uint64_t LLVMGetInstructionParent(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t LLVMGetFirstInstruction(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1) {
    BOOL v2 = v1 == a1 + 40;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return 0;
  }
  else {
    return v1 - 24;
  }
}

uint64_t LLVMGetLastInstruction(uint64_t a1)
{
  if (a1 + 40 == *(void *)(a1 + 48)) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1) {
    return v1 - 24;
  }
  else {
    return 0;
  }
}

uint64_t LLVMGetNextInstruction(uint64_t a1)
{
  uint64_t v1 = a1 + 24;
  if (!a1) {
    uint64_t v1 = 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (v2 == *(void *)(a1 + 40) + 40 || v2 == 0) {
    return 0;
  }
  else {
    return v2 - 24;
  }
}

uint64_t LLVMGetPreviousInstruction(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 24);
  if (!a1) {
    uint64_t v1 = 0;
  }
  if (v1 == *(uint64_t **)(*(void *)(a1 + 40) + 48)) {
    return 0;
  }
  uint64_t v2 = *v1;
  if (v2) {
    return v2 - 24;
  }
  else {
    return 0;
  }
}

void LLVMInstructionRemoveFromParent()
{
}

void LLVMInstructionEraseFromParent()
{
}

uint64_t LLVMGetICmpPredicate(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v1 == 81) {
    return *(_WORD *)(a1 + 18) & 0x3F;
  }
  uint64_t v2 = 0;
  if (a1 && v1 == 5)
  {
    if (*(_WORD *)(a1 + 18) == 53) {
      return *(unsigned __int16 *)(a1 + 24);
    }
    else {
      return 0;
    }
  }
  return v2;
}

uint64_t LLVMGetFCmpPredicate(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v1 == 82) {
    return *(_WORD *)(a1 + 18) & 0x3F;
  }
  uint64_t v2 = 0;
  if (a1 && v1 == 5)
  {
    if (*(_WORD *)(a1 + 18) == 54) {
      return *(unsigned __int16 *)(a1 + 24);
    }
    else {
      return 0;
    }
  }
  return v2;
}

uint64_t LLVMGetInstructionOpcode(uint64_t a1)
{
  if (a1 && (unsigned int v1 = *(unsigned __int8 *)(a1 + 16), v1 >= 0x1C)) {
    return sub_1CC578F40(v1 - 28);
  }
  else {
    return 0;
  }
}

void *LLVMInstructionClone(unsigned __int8 *a1)
{
  if (a1 && a1[16] >= 0x1Cu) {
    return llvm::Instruction::clone((llvm::Instruction *)a1);
  }
  else {
    return 0;
  }
}

uint64_t LLVMIsATerminatorInst(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 - 29 >= 0xB) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = a1;
  }
  if (v1 < 0x1C || a1 == 0) {
    return 0;
  }
  else {
    return v2;
  }
}

unint64_t LLVMGetNumArgOperands(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 16);
  if (a1)
  {
    if (v1 >= 0x1C && v1 - 81 >= 0xFFFFFFFE) {
      return (*(_DWORD *)(a1 + 20) & 0x7FFFFFFu) - 1;
    }
  }
  if (v1 == 84)
  {
    uint64_t v4 = 0;
  }
  else if (v1 == 39)
  {
    uint64_t v4 = (*(_DWORD *)(a1 + 80) + 1);
  }
  else
  {
    uint64_t v4 = 2;
  }
  int v5 = 0;
  int v6 = *(_DWORD *)(a1 + 20);
  uint64_t v7 = -(uint64_t)(v6 & 0x7FFFFFF);
  if (v6 < 0)
  {
    uint64_t v8 = a1 - 32 * (v6 & 0x7FFFFFF);
    uint64_t v9 = *(void *)(v8 - 8);
    if ((v9 & 0xFFFFFFFF0) != 0) {
      int v5 = *(_DWORD *)(v8 - 12) - *(_DWORD *)(v8 - v9);
    }
    else {
      int v5 = 0;
    }
  }
  return (-32 * v4 + 32 * (unint64_t)-v5 - 32 * v7 - 32) >> 5;
}

uint64_t LLVMGetInstructionCallConv(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 18) >> 2) & 0x3FF;
}

uint64_t LLVMSetInstructionCallConv(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 18) = *(_WORD *)(result + 18) & 0xF003 | (4 * a2);
  return result;
}

uint64_t LLVMSetInstrParamAlignment(uint64_t ***a1, int a2, unsigned int a3)
{
  unint64_t v5 = llvm::Attribute::get(**a1, 0x4Au, 1 << (63 - __clz(a3)));
  uint64_t result = llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(a1 + 8), (llvm::LLVMContext *)**a1, a2, v5);
  a1[8] = (uint64_t **)result;
  return result;
}

uint64_t LLVMAddCallSiteAttribute(llvm::LLVMContext ***a1, int a2, uint64_t a3)
{
  uint64_t result = llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(a1 + 8), **a1, a2, a3);
  a1[8] = (llvm::LLVMContext **)result;
  return result;
}

uint64_t LLVMGetCallSiteAttributeCount(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2
    && (a2 + 1) < *(_DWORD *)(v2 + 8)
    && (uint64_t v3 = *(void *)(v2 + 8 * (a2 + 1) + 40)) != 0)
  {
    return *(unsigned int *)(v3 + 8);
  }
  else
  {
    return 0;
  }
}

uint64_t LLVMGetCallSiteAttributes(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 64);
  if (v3)
  {
    if ((a2 + 1) < *(_DWORD *)(v3 + 8))
    {
      uint64_t v4 = *(void *)(v3 + 8 * (a2 + 1) + 40);
      if (v4)
      {
        uint64_t v5 = *(unsigned int *)(v4 + 8);
        if (v5)
        {
          int v6 = (uint64_t *)(v4 + 48);
          uint64_t v7 = 8 * v5;
          do
          {
            uint64_t v8 = *v6++;
            *a3++ = v8;
            v7 -= 8;
          }
          while (v7);
        }
      }
    }
  }
  return result;
}

uint64_t LLVMGetCallSiteEnumAttribute(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 64);
  return llvm::AttributeList::getAttributeAtIndex(&v4, a2, a3);
}

uint64_t LLVMGetCallSiteStringAttribute(uint64_t a1, int a2, void *a3, unsigned int a4)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4)
  {
    if ((a2 + 1) < *(_DWORD *)(v4 + 8))
    {
      uint64_t v5 = *(void *)(v4 + 8 * (a2 + 1) + 40);
      if (v5)
      {
        int v6 = *(_DWORD *)(v5 + 40);
        if (v6)
        {
          size_t v9 = a4;
          uint64_t v10 = *(void *)(v5 + 24);
          int v11 = sub_1CD0B03C8(a3, (uint64_t)a3 + a4);
          unsigned int v12 = v6 - 1;
          for (int i = 1; ; ++i)
          {
            int v14 = v11 & v12;
            uint64_t v15 = v10 + 24 * (v11 & v12);
            int v16 = *(const void **)v15;
            if (*(void *)v15 == -1)
            {
              if (a3 == (void *)-1) {
                return *(void *)(v15 + 16);
              }
            }
            else if (v16 == (const void *)-2)
            {
              if (a3 == (void *)-2) {
                return *(void *)(v15 + 16);
              }
            }
            else if (*(void *)(v15 + 8) == v9 && (!a4 || !memcmp(a3, *(const void **)v15, v9)))
            {
              return *(void *)(v15 + 16);
            }
            if (v16 == (const void *)-1) {
              return 0;
            }
            int v11 = i + v14;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t LLVMRemoveCallSiteEnumAttribute(uint64_t a1, int a2, int a3)
{
  uint64_t result = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(a1 + 64), **(uint64_t ***)a1, a2, a3);
  *(void *)(a1 + 64) = result;
  return result;
}

uint64_t LLVMRemoveCallSiteStringAttribute(uint64_t a1, int a2, void *a3, unsigned int a4)
{
  uint64_t result = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(a1 + 64), **(uint64_t ***)a1, a2, a3, a4);
  *(void *)(a1 + 64) = result;
  return result;
}

uint64_t LLVMGetCalledValue(uint64_t a1)
{
  return *(void *)(a1 - 32);
}

uint64_t LLVMGetCalledFunctionType(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

BOOL LLVMIsTailCall(uint64_t a1)
{
  return (*(_WORD *)(a1 + 18) & 3u) - 1 < 2;
}

uint64_t LLVMSetTailCall(uint64_t result, int a2)
{
  *(_WORD *)(result + 18) = *(_WORD *)(result + 18) & 0xFFFC | (a2 != 0);
  return result;
}

uint64_t LLVMGetNormalDest(uint64_t a1)
{
  return *(void *)(a1 - 96);
}

uint64_t LLVMGetUnwindDest(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v1 == 36)
  {
    if (*(_WORD *)(a1 + 18))
    {
      int v2 = *(_DWORD *)(a1 + 20);
      goto LABEL_11;
    }
    return 0;
  }
  if (a1 && v1 == 38)
  {
    if (*(_WORD *)(a1 + 18))
    {
      int v2 = *(_DWORD *)(a1 + 20);
      if ((v2 & 0x40000000) != 0)
      {
        uint64_t v5 = *(void *)(a1 - 8);
        goto LABEL_12;
      }
LABEL_11:
      uint64_t v5 = a1 - 32 * (v2 & 0x7FFFFFF);
LABEL_12:
      uint64_t v4 = v5 + 32;
      return *(void *)v4;
    }
    return 0;
  }
  uint64_t v4 = a1 - 64;
  return *(void *)v4;
}

uint64_t LLVMSetNormalDest(uint64_t result, uint64_t a2)
{
  int v2 = (void *)(result - 96);
  if (*(void *)(result - 96))
  {
    **(void **)(result - 80) = *(void *)(result - 88);
    uint64_t v3 = *(void *)(result - 88);
    if (v3) {
      *(void *)(v3 + 16) = *(void *)(result - 80);
    }
  }
  *int v2 = a2;
  if (a2)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    uint64_t v4 = (void *)(a2 + 8);
    uint64_t v5 = v6;
    *(void *)(result - 88) = v6;
    if (v6) {
      *(void *)(v5 + 16) = result - 88;
    }
    *(void *)(result - 80) = v4;
    *uint64_t v4 = v2;
  }
  return result;
}

uint64_t LLVMSetUnwindDest(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(result + 16);
  if (result && v2 == 36) {
    return sub_1CD5AAFD8(result, a2);
  }
  if (result && v2 == 38) {
    return sub_1CD5AB76C(result, 1u, a2);
  }
  uint64_t v3 = (uint64_t *)(result - 64);
  if (*(void *)(result - 64))
  {
    **(void **)(result - 48) = *(void *)(result - 56);
    uint64_t v4 = *(void *)(result - 56);
    if (v4) {
      *(void *)(v4 + 16) = *(void *)(result - 48);
    }
  }
  *uint64_t v3 = a2;
  if (a2)
  {
    uint64_t v5 = (uint64_t **)(a2 + 8);
    uint64_t v6 = *(void *)(a2 + 8);
    *(void *)(result - 56) = v6;
    if (v6) {
      *(void *)(v6 + 16) = result - 56;
    }
    *(void *)(result - 48) = v5;
    *uint64_t v5 = v3;
  }
  return result;
}

uint64_t LLVMGetNumSuccessors(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  if (v2 == 30)
  {
    if ((*(_DWORD *)(a1 + 20) & 0x7FFFFFF) == 3) {
      return 2;
    }
    else {
      return 1;
    }
  }
  else
  {
    uint64_t result = 0;
    switch(v2)
    {
      case 30:
        __break(1u);
        goto LABEL_8;
      case 31:
        uint64_t result = (*(_DWORD *)(a1 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 32:
      case 38:
        uint64_t result = (*(_DWORD *)(a1 + 20) & 0x7FFFFFFu) - 1;
        break;
      case 33:
LABEL_8:
        uint64_t result = 2;
        break;
      case 36:
        uint64_t result = *(_WORD *)(a1 + 18) & 1;
        break;
      case 37:
        uint64_t result = 1;
        break;
      case 39:
        uint64_t result = (*(_DWORD *)(a1 + 80) + 1);
        break;
      default:
        return result;
    }
  }
  return result;
}

BOOL LLVMIsConditional(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) == 3;
}

uint64_t LLVMGetCondition(uint64_t a1)
{
  return *(void *)(a1 - 96);
}

uint64_t LLVMSetCondition(uint64_t result, uint64_t a2)
{
  int v2 = (void *)(result - 96);
  if (*(void *)(result - 96))
  {
    **(void **)(result - 80) = *(void *)(result - 88);
    uint64_t v3 = *(void *)(result - 88);
    if (v3) {
      *(void *)(v3 + 16) = *(void *)(result - 80);
    }
  }
  *int v2 = a2;
  if (a2)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    uint64_t v4 = (void *)(a2 + 8);
    uint64_t v5 = v6;
    *(void *)(result - 88) = v6;
    if (v6) {
      *(void *)(v5 + 16) = result - 88;
    }
    *(void *)(result - 80) = v4;
    *uint64_t v4 = v2;
  }
  return result;
}

uint64_t LLVMGetSwitchDefaultDest(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 20);
  if ((v1 & 0x40000000) != 0) {
    uint64_t v2 = *(void *)(a1 - 8);
  }
  else {
    uint64_t v2 = a1 - 32 * (v1 & 0x7FFFFFF);
  }
  return *(void *)(v2 + 32);
}

uint64_t LLVMGetAllocatedType(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t LLVMIsInBounds(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 17) >> 1) & 1;
}

uint64_t LLVMSetIsInBounds(uint64_t result, int a2)
{
  *(unsigned char *)(result + 17) = *(unsigned char *)(result + 17) & 0xFD | (2 * (a2 != 0));
  return result;
}

uint64_t LLVMGetGEPSourceElementType(uint64_t a1)
{
  BOOL v1 = *(unsigned char *)(a1 + 16) != 62 || a1 == 0;
  uint64_t v2 = 64;
  if (v1) {
    uint64_t v2 = 24;
  }
  return *(void *)(a1 + v2);
}

void LLVMAddIncoming(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (a4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = a4;
    LODWORD(v8) = *(_DWORD *)(a1 + 60);
    uint64_t v34 = a3;
    uint64_t v35 = a4;
    do
    {
      uint64_t v9 = *(void *)(a2 + 8 * v6);
      uint64_t v10 = *(void *)(a3 + 8 * v6);
      int v11 = *(_DWORD *)(a1 + 20);
      if ((v11 & 0x7FFFFFF) == v8)
      {
        unsigned int v24 = v8 + (v8 >> 1);
        if (v24 <= 2) {
          uint64_t v25 = 2;
        }
        else {
          uint64_t v25 = v24;
        }
        *(_DWORD *)(a1 + 60) = v25;
        if ((v11 & 0x40000000) != 0) {
          unsigned int v26 = *(uint64_t **)(a1 - 8);
        }
        else {
          unsigned int v26 = (uint64_t *)(a1 - 32 * v8);
        }
        __p = v26;
        uint64_t v27 = operator new(40 * v25);
        *(void *)(a1 - 8) = v27;
        uint64_t v28 = v27;
        do
        {
          *uint64_t v28 = 0;
          v28[1] = 0;
          v28[2] = 0;
          v28[3] = a1;
          v28 += 4;
        }
        while (v28 != &v27[4 * v25]);
        int v29 = *(_DWORD *)(a1 + 20);
        if ((v29 & 0x40000000) != 0) {
          uint64_t v30 = (uint64_t)v27;
        }
        else {
          uint64_t v30 = a1 - 32 * (v29 & 0x7FFFFFF);
        }
        sub_1CC5E4108((uint64_t)&v37, __p, &__p[4 * v8], v30);
        if (v8)
        {
          memmove((void *)(v30 + 32 * v25), &__p[4 * v8], 8 * v8);
          uint64_t v31 = 4 * v8;
          do
          {
            __int16 v32 = &__p[v31];
            if (__p[v31 - 4])
            {
              *(void *)*(v32 - 2) = *(v32 - 3);
              uint64_t v33 = *(v32 - 3);
              if (v33) {
                *(void *)(v33 + 16) = *(v32 - 2);
              }
            }
            v31 -= 4;
          }
          while (v31 * 8);
        }
        operator delete(__p);
        int v11 = *(_DWORD *)(a1 + 20);
        a3 = v34;
        uint64_t v7 = v35;
      }
      uint64_t v12 = (v11 + 1) & 0x7FFFFFF;
      *(_DWORD *)(a1 + 20) = v11 & 0xF8000000 | (v11 + 1) & 0x7FFFFFF;
      if ((v11 & 0x40000000) != 0) {
        uint64_t v13 = *(void *)(a1 - 8);
      }
      else {
        uint64_t v13 = a1 - 32 * v12;
      }
      uint64_t v14 = (v12 - 1);
      uint64_t v15 = v13 + 32 * v14;
      if (*(void *)v15)
      {
        **(void **)(v15 + 16) = *(void *)(v15 + 8);
        uint64_t v23 = *(void *)(v15 + 8);
        if (v23) {
          *(void *)(v23 + 16) = *(void *)(v15 + 16);
        }
      }
      *(void *)uint64_t v15 = v9;
      if (v9)
      {
        uint64_t v18 = *(void *)(v9 + 8);
        int v17 = (void *)(v9 + 8);
        uint64_t v16 = v18;
        uint64_t v19 = v13 + 32 * v14;
        *(void *)(v19 + 8) = v18;
        if (v18) {
          *(void *)(v16 + 16) = v19 + 8;
        }
        *(void *)(v19 + 16) = v17;
        void *v17 = v15;
      }
      int v20 = *(_DWORD *)(a1 + 20);
      uint64_t v21 = v20 & 0x7FFFFFF;
      if ((v20 & 0x40000000) != 0) {
        uint64_t v22 = *(void *)(a1 - 8);
      }
      else {
        uint64_t v22 = a1 - 32 * v21;
      }
      uint64_t v8 = *(unsigned int *)(a1 + 60);
      *(void *)(v22 + 32 * v8 + 8 * (v21 - 1)) = v10;
      ++v6;
    }
    while (v6 != v7);
  }
}

uint64_t LLVMCountIncoming(uint64_t a1)
{
  return *(_DWORD *)(a1 + 20) & 0x7FFFFFF;
}

uint64_t LLVMGetIncomingValue(uint64_t a1, unsigned int a2)
{
  int v2 = *(_DWORD *)(a1 + 20);
  if ((v2 & 0x40000000) != 0) {
    uint64_t v3 = *(void *)(a1 - 8);
  }
  else {
    uint64_t v3 = a1 - 32 * (v2 & 0x7FFFFFF);
  }
  return *(void *)(v3 + 32 * a2);
}

uint64_t LLVMGetIncomingBlock(uint64_t a1, unsigned int a2)
{
  int v2 = *(_DWORD *)(a1 + 20);
  if ((v2 & 0x40000000) != 0) {
    uint64_t v3 = *(void *)(a1 - 8);
  }
  else {
    uint64_t v3 = a1 - 32 * (v2 & 0x7FFFFFF);
  }
  return *(void *)(v3 + 32 * *(unsigned int *)(a1 + 60) + 8 * a2);
}

uint64_t LLVMGetNumIndices(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 16);
  if (v1 > 0x5B)
  {
    if (v1 == 92 || v1 == 93) {
      return *(unsigned int *)(result + 72);
    }
    goto LABEL_10;
  }
  if (v1 != 5)
  {
    if (v1 != 62) {
      goto LABEL_10;
    }
    return (*(_DWORD *)(result + 20) & 0x7FFFFFFu) - 1;
  }
  if (*(_WORD *)(result + 18) == 34) {
    return (*(_DWORD *)(result + 20) & 0x7FFFFFFu) - 1;
  }
LABEL_10:
  if (v1 == 5) {
    uint64_t v2 = result;
  }
  else {
    uint64_t v2 = 0;
  }
  if (v2) {
    return *(unsigned int *)(v2 + 32);
  }
  return result;
}

uint64_t LLVMGetIndices(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 16);
  if (result && v1 == 92 || result && v1 == 93) {
    return *(void *)(result + 64);
  }
  if (v1 == 5) {
    uint64_t v2 = result;
  }
  else {
    uint64_t v2 = 0;
  }
  if (v2) {
    return *(void *)(v2 + 24);
  }
  return result;
}

void LLVMCreateBuilderInContext()
{
}

void LLVMCreateBuilder()
{
  if (!atomic_load_explicit(&qword_1EA61BF08, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EA61BF08, (void *(*)(void))sub_1CC58168C, (void (*)(void *))sub_1CC5816C8);
  }

  LLVMCreateBuilderInContext();
}

uint64_t LLVMPositionBuilder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    uint64_t v3 = a3 + 24;
  }
  else {
    uint64_t v3 = a2 + 40;
  }
  return sub_1CBF5385C(a1, a2, v3);
}

uint64_t LLVMPositionBuilderBefore(uint64_t a1, uint64_t a2)
{
  return sub_1CBF5385C(a1, *(void *)(a2 + 40), a2 + 24);
}

uint64_t LLVMPositionBuilderAtEnd(uint64_t result, uint64_t a2)
{
  *(void *)(result + 48) = a2;
  *(void *)(result + 56) = a2 + 40;
  return result;
}

uint64_t LLVMGetInsertBlock(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t LLVMClearInsertionPosition(uint64_t result)
{
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  return result;
}

void LLVMInsertIntoBuilder(uint64_t *a1, llvm::Instruction *a2)
{
  __int16 v8 = 257;
  (*(void (**)(uint64_t, llvm::Instruction *, unsigned char *, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], a2, v7, a1[6], a1[7]);
  uint64_t v4 = *((unsigned int *)a1 + 2);
  if (v4)
  {
    uint64_t v5 = *a1;
    uint64_t v6 = v5 + 16 * v4;
    do
    {
      llvm::Instruction::setMetadata(a2, *(_DWORD *)v5, *(llvm::MDNode **)(v5 + 8));
      v5 += 16;
    }
    while (v5 != v6);
  }
}

void LLVMInsertIntoBuilderWithName(uint64_t *a1, llvm::Instruction *a2, unsigned char *a3)
{
  char v5 = 1;
  char v11 = 1;
  if (*a3)
  {
    uint64_t v9 = a3;
    char v5 = 3;
  }
  char v10 = v5;
  (*(void (**)(uint64_t, llvm::Instruction *, unsigned char **, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], a2, &v9, a1[6], a1[7]);
  uint64_t v6 = *((unsigned int *)a1 + 2);
  if (v6)
  {
    uint64_t v7 = *a1;
    uint64_t v8 = v7 + 16 * v6;
    do
    {
      llvm::Instruction::setMetadata(a2, *(_DWORD *)v7, *(llvm::MDNode **)(v7 + 8));
      v7 += 16;
    }
    while (v7 != v8);
  }
}

void **LLVMDisposeBuilder(void **result)
{
  if (result)
  {
    if (*result != result + 2) {
      free(*result);
    }
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

unsigned __int8 *LLVMGetCurrentDebugLocation2(unsigned int *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return 0;
  }
  uint64_t v4 = (unsigned __int8 **)(*(void *)a1 + 8);
  uint64_t v5 = 16 * v1;
  uint64_t v2 = 0;
  while (*((_DWORD *)v4 - 2))
  {
    v4 += 2;
    v5 -= 16;
    if (!v5) {
      return v2;
    }
  }
  uint64_t v6 = *v4;
  char v11 = v6;
  if (!v6) {
    return 0;
  }
  llvm::MetadataTracking::track((uint64_t)&v11, v6, 2);
  uint64_t v2 = v11;
  if (v11)
  {
    int v7 = *v11;
    if ((v7 - 4) > 0x1E)
    {
      if ((v7 - 3) >= 0xFFFFFFFE) {
        char v10 = v11;
      }
      else {
        char v10 = 0;
      }
      if ((v7 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v9 = (unint64_t)(v10 + 8);
LABEL_21:
        uint64_t v12 = &v11;
        sub_1CC5FA668(v9 + 16, &v12);
        return v2;
      }
      if (v7 == 3) {
        *((void *)v11 + 1) = 0;
      }
    }
    else if ((v11[1] & 0x7F) == 2 || *((_DWORD *)v11 + 3))
    {
      uint64_t v8 = *((void *)v11 + 2);
      if ((v8 & 4) != 0)
      {
        unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFF8;
        if (v9) {
          goto LABEL_21;
        }
      }
    }
  }
  return v2;
}

uint64_t LLVMSetCurrentDebugLocation2(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    uint64_t v16 = a2;
    llvm::MetadataTracking::track((uint64_t)&v16, a2, 2);
    uint64_t result = sub_1CB8461A4(v2, 0, (uint64_t)v16);
    if (v16)
    {
      int v3 = *v16;
      if ((v3 - 4) > 0x1E)
      {
        if ((v3 - 3) >= 0xFFFFFFFE) {
          unint64_t v9 = v16;
        }
        else {
          unint64_t v9 = 0;
        }
        if ((v3 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v5 = (unint64_t)(v9 + 8);
LABEL_18:
          int v17 = &v16;
          return sub_1CC5FA668(v5 + 16, &v17);
        }
        if (v3 == 3) {
          *((void *)v16 + 1) = 0;
        }
      }
      else if ((v16[1] & 0x7F) == 2 || *((_DWORD *)v16 + 3))
      {
        uint64_t v4 = *((void *)v16 + 2);
        if ((v4 & 4) != 0)
        {
          unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFF8;
          if (v5) {
            goto LABEL_18;
          }
        }
      }
    }
  }
  else
  {
    uint64_t v6 = *(void *)result;
    uint64_t v7 = *(unsigned int *)(result + 8);
    if (v7)
    {
      uint64_t v10 = 0;
      uint64_t v8 = v6 + 16 * v7;
      uint64_t v11 = 16 * v7;
      uint64_t v12 = 16 * v7 - 16;
      while (*(_DWORD *)(v6 + v10))
      {
        v10 += 16;
        if (v11 == v10) {
          goto LABEL_11;
        }
      }
      uint64_t v8 = v6 + v10;
      if (v12 != v10)
      {
        uint64_t v13 = (void *)(v8 + 24);
        uint64_t v14 = v11 - v10 - 16;
        do
        {
          int v15 = *((_DWORD *)v13 - 2);
          if (v15)
          {
            *(_DWORD *)uint64_t v8 = v15;
            *(void *)(v8 + 8) = *v13;
            v8 += 16;
          }
          v13 += 2;
          v14 -= 16;
        }
        while (v14);
      }
    }
    else
    {
      uint64_t v8 = *(void *)result;
    }
LABEL_11:
    *(_DWORD *)(result + 8) = (unint64_t)(v8 - v6) >> 4;
  }
  return result;
}

uint64_t LLVMSetCurrentDebugLocation(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    int v3 = *(unsigned __int8 **)(a2 + 24);
    uint64_t v10 = v3;
    if (v3)
    {
      llvm::MetadataTracking::track((uint64_t)&v10, v3, 2);
      uint64_t v4 = (uint64_t)v10;
    }
    else
    {
      uint64_t v4 = 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v10 = 0;
  }
  uint64_t result = sub_1CB8461A4(a1, 0, v4);
  if (v10)
  {
    int v6 = *v10;
    if ((v6 - 4) > 0x1E)
    {
      if ((v6 - 3) >= 0xFFFFFFFE) {
        uint64_t v7 = v10;
      }
      else {
        uint64_t v7 = 0;
      }
      if ((v6 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v8 = (unint64_t)(v7 + 8);
LABEL_15:
        uint64_t v11 = &v10;
        return sub_1CC5FA668(v8 + 16, &v11);
      }
      if (v6 == 3) {
        *((void *)v10 + 1) = 0;
      }
    }
    else if ((v10[1] & 0x7F) == 2 || *((_DWORD *)v10 + 3))
    {
      uint64_t v9 = *((void *)v10 + 2);
      if ((v9 & 4) != 0)
      {
        unint64_t v8 = v9 & 0xFFFFFFFFFFFFFFF8;
        if (v8) {
          goto LABEL_15;
        }
      }
    }
  }
  return result;
}

uint64_t LLVMGetCurrentDebugLocation(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64);
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2)
  {
    uint64_t v9 = (unsigned __int8 **)(*(void *)a1 + 8);
    uint64_t v10 = 16 * v2;
    while (*((_DWORD *)v9 - 2))
    {
      v9 += 2;
      v10 -= 16;
      if (!v10) {
        goto LABEL_2;
      }
    }
    int v3 = *v9;
    uint64_t v12 = v3;
    if (v3)
    {
      llvm::MetadataTracking::track((uint64_t)&v12, v3, 2);
      int v3 = v12;
    }
  }
  else
  {
LABEL_2:
    int v3 = 0;
    uint64_t v12 = 0;
  }
  uint64_t v4 = llvm::MetadataAsValue::get(v1, v3);
  if (v12)
  {
    int v5 = *v12;
    if ((v5 - 4) > 0x1E)
    {
      if ((v5 - 3) >= 0xFFFFFFFE) {
        uint64_t v7 = v12;
      }
      else {
        uint64_t v7 = 0;
      }
      if ((v5 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v8 = (unint64_t)(v7 + 8);
LABEL_13:
        uint64_t v13 = &v12;
        sub_1CC5FA668(v8 + 16, &v13);
        return v4;
      }
      if (v5 == 3) {
        *((void *)v12 + 1) = 0;
      }
    }
    else if ((v12[1] & 0x7F) == 2 || *((_DWORD *)v12 + 3))
    {
      uint64_t v11 = *((void *)v12 + 2);
      if ((v11 & 4) != 0)
      {
        unint64_t v8 = v11 & 0xFFFFFFFFFFFFFFF8;
        if (v8) {
          goto LABEL_13;
        }
      }
    }
  }
  return v4;
}

void LLVMAddMetadataToInst(uint64_t *a1, llvm::Instruction *this)
{
  uint64_t v2 = *((unsigned int *)a1 + 2);
  if (v2)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = *a1 + 16 * v2;
    do
    {
      llvm::Instruction::setMetadata(this, *(_DWORD *)v4, *(llvm::MDNode **)(v4 + 8));
      v4 += 16;
    }
    while (v4 != v5);
  }
}

uint64_t LLVMBuilderSetDefaultFPMathTag(uint64_t result, uint64_t a2)
{
  *(void *)(result + 88) = a2;
  return result;
}

uint64_t LLVMBuilderGetDefaultFPMathTag(uint64_t a1)
{
  return *(void *)(a1 + 88);
}

llvm::Instruction *sub_1CC57CCA8(uint64_t *a1, llvm::Value *a2)
{
  uint64_t v4 = (llvm::LLVMContext *)a1[8];
  BOOL v5 = a2 != 0;
  if (a2) {
    size_t v6 = 96;
  }
  else {
    size_t v6 = 64;
  }
  uint64_t v7 = (llvm::ReturnInst *)operator new(v6);
  unint64_t v8 = (llvm::ReturnInst *)((char *)v7 + 32 * v5);
  *((_DWORD *)v8 + 5) = *((_DWORD *)v8 + 5) & 0x38000000 | v5;
  if (a2)
  {
    do
    {
      *(void *)uint64_t v7 = 0;
      *((void *)v7 + 1) = 0;
      *((void *)v7 + 2) = 0;
      *((void *)v7 + 3) = v8;
      uint64_t v7 = (llvm::ReturnInst *)((char *)v7 + 32);
    }
    while (v7 != v8);
  }
  llvm::ReturnInst::ReturnInst(v8, v4, a2, 0);
  __int16 v11 = 257;
  return sub_1CB844E0C(a1, v8, (uint64_t)v10);
}

llvm::Instruction *LLVMBuildAggregateRet(uint64_t *a1, llvm::Type *a2, int a3)
{
  size_t v6 = llvm::UndefValue::get(**(llvm::UndefValue ***)(*(void *)(*(void *)(a1[6] + 56) + 24) + 16), a2);
  unsigned int v17 = 0;
  if (a3)
  {
    unsigned int v7 = 0;
    do
    {
      uint64_t v8 = *((void *)a2 + v7);
      v15[0] = "mrv";
      __int16 v16 = 259;
      size_t v6 = sub_1CC2411F8((uint64_t)a1, (uint64_t)v6, v8, &v17, 1, (uint64_t)v15);
      unsigned int v7 = v17 + 1;
      unsigned int v17 = v7;
    }
    while (v7 != a3);
  }
  uint64_t v9 = (llvm::LLVMContext *)a1[8];
  BOOL v10 = v6 != 0;
  if (v6) {
    size_t v11 = 96;
  }
  else {
    size_t v11 = 64;
  }
  uint64_t v12 = (llvm::ReturnInst *)operator new(v11);
  uint64_t v13 = (llvm::ReturnInst *)((char *)v12 + 32 * v10);
  *((_DWORD *)v13 + 5) = *((_DWORD *)v13 + 5) & 0x38000000 | v10;
  if (v6)
  {
    do
    {
      *(void *)uint64_t v12 = 0;
      *((void *)v12 + 1) = 0;
      *((void *)v12 + 2) = 0;
      *((void *)v12 + 3) = v13;
      uint64_t v12 = (llvm::ReturnInst *)((char *)v12 + 32);
    }
    while (v12 != v13);
  }
  llvm::ReturnInst::ReturnInst(v13, v9, v6, 0);
  __int16 v16 = 257;
  return sub_1CB844E0C(a1, v13, (uint64_t)v15);
}

llvm::Instruction *LLVMBuildBr(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (char *)operator new(0x60uLL);
  *((_DWORD *)v4 + 13) = *((_DWORD *)v4 + 13) & 0x38000000 | 1;
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 2) = 0;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 4) = ***(void ***)a2 + 1576;
  *((void *)v4 + 3) = v4 + 32;
  *((void *)v4 + 5) = 0;
  v4[48] = 30;
  v4[49] = 0;
  *((_WORD *)v4 + 25) = 0;
  *((_DWORD *)v4 + 13) = 1;
  *((_DWORD *)v4 + 22) = 0;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  BOOL v5 = (void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)uint64_t v4 = a2;
  *((void *)v4 + 1) = v6;
  if (v6) {
    *(void *)(v6 + 16) = v4 + 8;
  }
  *((void *)v4 + 2) = v5;
  *BOOL v5 = v4;
  __int16 v9 = 257;
  return sub_1CB844E0C(a1, (llvm::Instruction *)(v4 + 32), (uint64_t)v8);
}

llvm::Instruction *LLVMBuildCondBr(uint64_t *a1, llvm::Value *a2, llvm::BasicBlock *a3, llvm::BasicBlock *a4)
{
  uint64_t v8 = operator new(0xA0uLL);
  uint64_t v9 = 0;
  BOOL v10 = (llvm::Instruction *)(v8 + 24);
  v8[29] = v8[29] & 0x38000000 | 3;
  do
  {
    size_t v11 = &v8[v9];
    *size_t v11 = 0;
    v11[1] = 0;
    unsigned __int8 v11[2] = 0;
    _OWORD v11[3] = v10;
    v9 += 8;
  }
  while (v9 != 24);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v8 + 24), a3, a4, a2, 0);
  __int16 v14 = 257;
  return sub_1CB844E0C(a1, v10, (uint64_t)v13);
}

llvm::Instruction *LLVMBuildSwitch(uint64_t *a1, void ***a2, uint64_t a3, int a4)
{
  uint64_t v8 = operator new(0x48uLL);
  *uint64_t v8 = 0;
  v8[1] = ***a2 + 1576;
  v8[2] = 0;
  uint64_t v9 = (llvm::Instruction *)(v8 + 1);
  *((unsigned char *)v8 + 24) = 31;
  *((unsigned char *)v8 + 25) = 0;
  *((_WORD *)v8 + 13) = 0;
  *((_DWORD *)v8 + 7) = 0x40000000;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *((_DWORD *)v8 + 16) = 0;
  llvm::SwitchInst::init((uint64_t)(v8 + 1), (uint64_t)a2, a3, 2 * a4 + 2);
  __int16 v12 = 257;
  return sub_1CB844E0C(a1, v9, (uint64_t)v11);
}

llvm::Instruction *LLVMBuildIndirectBr(uint64_t *a1, llvm::Value *a2, int a3)
{
  uint64_t v6 = operator new(0x48uLL);
  unsigned int v7 = (llvm::Instruction *)(v6 + 2);
  v6[7] = v6[7] & 0x38000000 | 0x40000000;
  *(void *)uint64_t v6 = 0;
  llvm::IndirectBrInst::IndirectBrInst((llvm::IndirectBrInst *)(v6 + 2), a2, a3, 0);
  __int16 v10 = 257;
  return sub_1CD509770(a1, v7, (uint64_t)v9);
}

llvm::Instruction *LLVMBuildInvoke(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  uint64_t v9 = **(void **)(*(void *)a2 + 16);
  char v10 = 1;
  char v14 = 1;
  if (*a7)
  {
    __int16 v12 = a7;
    char v10 = 3;
  }
  char v13 = v10;
  return sub_1CD5AB030(a1, v9, a2, a5, a6, a3, a4, (uint64_t)&v12);
}

llvm::Instruction *LLVMBuildInvoke2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5, uint64_t a6, uint64_t a7, unsigned char *a8)
{
  char v8 = 1;
  char v12 = 1;
  if (*a8)
  {
    char v10 = a8;
    char v8 = 3;
  }
  char v11 = v8;
  return sub_1CD5AB030(a1, a2, a3, a6, a7, a4, a5, (uint64_t)&v10);
}

llvm::Instruction *LLVMBuildLandingPad(uint64_t *a1, llvm::LandingPadInst *this, uint64_t a3, llvm::Type *a4, llvm::Instruction *a5)
{
  if (a3)
  {
    uint64_t v9 = *(void *)(a1[6] + 56);
    sub_1CD5C0280((void *)v9, a3);
    *(_WORD *)(v9 + 18) |= 8u;
  }
  char v10 = 1;
  char v15 = 1;
  if (*(unsigned char *)a5)
  {
    char v13 = a5;
    char v10 = 3;
  }
  char v14 = v10;
  __int16 v17 = 257;
  char v11 = llvm::LandingPadInst::Create(this, a4, &v16, 0, a5);
  sub_1CD509770(a1, v11, (uint64_t)&v13);
  return v11;
}

llvm::Instruction *LLVMBuildCatchPad(uint64_t *a1, llvm::Type **a2, uint64_t *a3, unsigned int a4, unsigned char *a5)
{
  char v5 = 1;
  char v9 = 1;
  if (*a5)
  {
    unsigned int v7 = a5;
    char v5 = 3;
  }
  char v8 = v5;
  return sub_1CD5AB0D0(a1, a2, a3, a4, (uint64_t)&v7);
}

llvm::Instruction *LLVMBuildCleanupPad(uint64_t a1, llvm::Type **NullValue, const llvm::APFloat *a3, unsigned int a4, unsigned char *a5)
{
  if (!NullValue) {
    uint64_t NullValue = (llvm::Type **)llvm::Constant::getNullValue((llvm::Constant *)(**(void **)(a1 + 64) + 1744), 0, a3);
  }
  char v9 = 1;
  char v13 = 1;
  if (*a5)
  {
    char v11 = a5;
    char v9 = 3;
  }
  char v12 = v9;
  return sub_1CD5AB170((uint64_t *)a1, NullValue, (uint64_t *)a3, a4, (uint64_t)&v11);
}

llvm::Instruction *LLVMBuildResume(uint64_t *a1, llvm::Value *a2)
{
  uint64_t v4 = operator new(0x60uLL);
  v4[13] = v4[13] & 0x38000000 | 1;
  char v5 = (llvm::Instruction *)(v4 + 8);
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *((void *)v4 + 3) = v4 + 8;
  llvm::ResumeInst::ResumeInst((llvm::ResumeInst *)(v4 + 8), a2, 0);
  __int16 v8 = 257;
  sub_1CD509770(a1, v5, (uint64_t)v7);
  return v5;
}

llvm::Instruction *LLVMBuildCatchSwitch(uint64_t a1, llvm::Type **a2, const llvm::APFloat *a3, int a4, unsigned char *a5)
{
  uint64_t NullValue = a2;
  if (!a2) {
    uint64_t NullValue = (llvm::Type **)llvm::Constant::getNullValue((llvm::Constant *)(**(void **)(a1 + 64) + 1744), 0, a3);
  }
  char v10 = 1;
  char v16 = 1;
  if (*a5)
  {
    char v14 = a5;
    char v10 = 3;
  }
  char v15 = v10;
  __int16 v18 = 257;
  char v11 = operator new(0x48uLL);
  char v12 = (llvm::Instruction *)(v11 + 2);
  v11[7] = v11[7] & 0x38000000 | 0x40000000;
  *(void *)char v11 = 0;
  llvm::CatchSwitchInst::CatchSwitchInst((llvm::CatchSwitchInst *)(v11 + 2), NullValue, a3, a4, &v17, 0);
  sub_1CD509770((uint64_t *)a1, v12, (uint64_t)&v14);
  return v12;
}

llvm::Instruction *LLVMBuildCatchRet(uint64_t *a1, llvm::Value *a2, llvm::BasicBlock *a3)
{
  uint64_t v6 = operator new(0x80uLL);
  v6[21] = v6[21] & 0x38000000 | 2;
  unsigned int v7 = (llvm::Instruction *)(v6 + 16);
  *(void *)uint64_t v6 = 0;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *((void *)v6 + 3) = v6 + 16;
  *((void *)v6 + 4) = 0;
  *((void *)v6 + 5) = 0;
  *((void *)v6 + 6) = 0;
  *((void *)v6 + 7) = v6 + 16;
  llvm::CatchReturnInst::CatchReturnInst((llvm::CatchReturnInst *)(v6 + 16), a2, a3, 0);
  __int16 v10 = 257;
  sub_1CD509770(a1, v7, (uint64_t)v9);
  return v7;
}

uint64_t LLVMGetNumClauses(uint64_t a1)
{
  return *(_DWORD *)(a1 + 20) & 0x7FFFFFF;
}

uint64_t LLVMGetClause(uint64_t a1, unsigned int a2)
{
  int v2 = *(_DWORD *)(a1 + 20);
  if ((v2 & 0x40000000) != 0) {
    uint64_t v3 = *(void *)(a1 - 8);
  }
  else {
    uint64_t v3 = a1 - 32 * (v2 & 0x7FFFFFF);
  }
  return *(void *)(v3 + 32 * a2);
}

uint64_t LLVMIsCleanup(uint64_t a1)
{
  return *(_WORD *)(a1 + 18) & 1;
}

uint64_t LLVMSetCleanup(uint64_t result, int a2)
{
  *(_WORD *)(result + 18) = *(_WORD *)(result + 18) & 0xFFFE | (a2 != 0);
  return result;
}

uint64_t LLVMGetNumHandlers(uint64_t a1)
{
  if (*(_WORD *)(a1 + 18)) {
    int v1 = -2;
  }
  else {
    int v1 = -1;
  }
  return v1 + (*(_DWORD *)(a1 + 20) & 0x7FFFFFFu);
}

uint64_t LLVMGetHandlers(uint64_t result, void *a2)
{
  int v2 = *(_DWORD *)(result + 20);
  if ((v2 & 0x40000000) != 0)
  {
    uint64_t v4 = *(void *)(result - 8);
    uint64_t v3 = v2 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v3 = v2 & 0x7FFFFFF;
    uint64_t v4 = result - 32 * v3;
  }
  uint64_t v5 = 1;
  if (*(_WORD *)(result + 18)) {
    uint64_t v5 = 2;
  }
  if (v5 != v3)
  {
    uint64_t v6 = (uint64_t *)(v4 + 32 * v5);
    uint64_t v7 = 32 * v3 - 32 * v5;
    do
    {
      uint64_t v8 = *v6;
      v6 += 4;
      *a2++ = v8;
      v7 -= 32;
    }
    while (v7);
  }
  return result;
}

uint64_t LLVMGetParentCatchSwitch(uint64_t a1)
{
  return *(void *)(a1 - 32);
}

uint64_t LLVMSetParentCatchSwitch(uint64_t result, uint64_t a2)
{
  int v2 = (void *)(result - 32);
  if (*(void *)(result - 32))
  {
    **(void **)(result - 16) = *(void *)(result - 24);
    uint64_t v3 = *(void *)(result - 24);
    if (v3) {
      *(void *)(v3 + 16) = *(void *)(result - 16);
    }
  }
  *int v2 = a2;
  if (a2)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    uint64_t v4 = (void *)(a2 + 8);
    uint64_t v5 = v6;
    *(void *)(result - 24) = v6;
    if (v6) {
      *(void *)(v5 + 16) = result - 24;
    }
    *(void *)(result - 16) = v4;
    *uint64_t v4 = v2;
  }
  return result;
}

uint64_t LLVMGetArgOperand(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32 * a2);
}

llvm::Instruction *LLVMBuildAdd(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  char v4 = 1;
  char v8 = 1;
  if (*a4)
  {
    uint64_t v6 = a4;
    char v4 = 3;
  }
  char v7 = v4;
  return sub_1CB844A3C(a1, a2, a3, (uint64_t)&v6, 0, 0);
}

llvm::Instruction *LLVMBuildNSWAdd(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  char v4 = 1;
  char v8 = 1;
  if (*a4)
  {
    uint64_t v6 = a4;
    char v4 = 3;
  }
  char v7 = v4;
  return sub_1CB844A3C(a1, a2, a3, (uint64_t)&v6, 0, 1);
}

llvm::Instruction *LLVMBuildNUWAdd(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  char v4 = 1;
  char v8 = 1;
  if (*a4)
  {
    uint64_t v6 = a4;
    char v4 = 3;
  }
  char v7 = v4;
  return sub_1CB844A3C(a1, a2, a3, (uint64_t)&v6, 1, 0);
}

uint64_t LLVMBuildFAdd(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  char v4 = 1;
  char v8 = 1;
  if (*a4)
  {
    uint64_t v6 = a4;
    char v4 = 3;
  }
  char v7 = v4;
  return sub_1CC52C04C(a1, a2, a3, (uint64_t)&v6, 0);
}

llvm::Instruction *LLVMBuildSub(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  char v4 = 1;
  char v8 = 1;
  if (*a4)
  {
    uint64_t v6 = a4;
    char v4 = 3;
  }
  char v7 = v4;
  return sub_1CB84494C(a1, a2, a3, (uint64_t)&v6, 0, 0);
}

llvm::Instruction *LLVMBuildNSWSub(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  char v4 = 1;
  char v8 = 1;
  if (*a4)
  {
    uint64_t v6 = a4;
    char v4 = 3;
  }
  char v7 = v4;
  return sub_1CB84494C(a1, a2, a3, (uint64_t)&v6, 0, 1);
}

llvm::Instruction *LLVMBuildNUWSub(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  char v4 = 1;
  char v8 = 1;
  if (*a4)
  {
    uint64_t v6 = a4;
    char v4 = 3;
  }
  char v7 = v4;
  return sub_1CB84494C(a1, a2, a3, (uint64_t)&v6, 1, 0);
}

uint64_t LLVMBuildFSub(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  char v4 = 1;
  char v8 = 1;
  if (*a4)
  {
    uint64_t v6 = a4;
    char v4 = 3;
  }
  char v7 = v4;
  return sub_1CB843E40(a1, a2, a3, (uint64_t)&v6, 0);
}

llvm::Instruction *LLVMBuildMul(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  char v4 = 1;
  char v8 = 1;
  if (*a4)
  {
    uint64_t v6 = a4;
    char v4 = 3;
  }
  char v7 = v4;
  return sub_1CC09A1EC(a1, a2, a3, (uint64_t)&v6, 0, 0);
}

llvm::Instruction *LLVMBuildNSWMul(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  char v4 = 1;
  char v8 = 1;
  if (*a4)
  {
    uint64_t v6 = a4;
    char v4 = 3;
  }
  char v7 = v4;
  return sub_1CC09A1EC(a1, a2, a3, (uint64_t)&v6, 0, 1);
}

llvm::Instruction *LLVMBuildNUWMul(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  char v4 = 1;
  char v8 = 1;
  if (*a4)
  {
    uint64_t v6 = a4;
    char v4 = 3;
  }
  char v7 = v4;
  return sub_1CC09A1EC(a1, a2, a3, (uint64_t)&v6, 1, 0);
}

uint64_t LLVMBuildFMul(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  char v4 = 1;
  char v8 = 1;
  if (*a4)
  {
    uint64_t v6 = a4;
    char v4 = 3;
  }
  char v7 = v4;
  return sub_1CB843C88(a1, a2, a3, (uint64_t)&v6, 0);
}

llvm::Instruction *LLVMBuildUDiv(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  char v4 = 1;
  char v8 = 1;
  if (*a4)
  {
    uint64_t v6 = a4;
    char v4 = 3;
  }
  char v7 = v4;
  return sub_1CC57DA50(a1, a2, a3, (uint64_t)&v6, 0);
}

llvm::Instruction *sub_1CC57DA50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (!a2 || *(unsigned __int8 *)(a2 + 16) > 0x14u || !a3 || *(unsigned __int8 *)(a3 + 16) > 0x14u)
  {
    __int16 v14 = 257;
    if (a5)
    {
      char v12 = llvm::BinaryOperator::Create(19, (void *)a2, a3, v13, 0);
      llvm::Instruction::setIsExact((uint64_t)v12, 1);
      char v11 = (uint64_t *)a1;
      __int16 v10 = v12;
    }
    else
    {
      __int16 v10 = llvm::BinaryOperator::Create(19, (void *)a2, a3, v13, 0);
      char v11 = (uint64_t *)a1;
    }
    return sub_1CB844E0C(v11, v10, a4);
  }
  char v7 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(a1 + 72) + 104))(*(void *)(a1 + 72));
  if (v7) {
    BOOL v8 = v7[16] >= 0x1Cu;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8) {
    return (llvm::Instruction *)v7;
  }

  return sub_1CB844E0C((uint64_t *)a1, (llvm::Instruction *)v7, a4);
}

llvm::Instruction *LLVMBuildExactUDiv(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  char v4 = 1;
  char v8 = 1;
  if (*a4)
  {
    uint64_t v6 = a4;
    char v4 = 3;
  }
  char v7 = v4;
  return sub_1CC57DA50(a1, a2, a3, (uint64_t)&v6, 1);
}

llvm::Instruction *LLVMBuildSDiv(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  char v4 = 1;
  char v8 = 1;
  if (*a4)
  {
    uint64_t v6 = a4;
    char v4 = 3;
  }
  char v7 = v4;
  return sub_1CC57DBF8(a1, a2, a3, (uint64_t)&v6, 0);
}

llvm::Instruction *sub_1CC57DBF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (!a2 || *(unsigned __int8 *)(a2 + 16) > 0x14u || !a3 || *(unsigned __int8 *)(a3 + 16) > 0x14u)
  {
    __int16 v14 = 257;
    if (a5)
    {
      char v12 = llvm::BinaryOperator::Create(20, (void *)a2, a3, v13, 0);
      llvm::Instruction::setIsExact((uint64_t)v12, 1);
      char v8 = (uint64_t *)a1;
      char v7 = v12;
    }
    else
    {
      char v7 = llvm::BinaryOperator::Create(20, (void *)a2, a3, v13, 0);
      char v8 = (uint64_t *)a1;
    }
    return sub_1CB844E0C(v8, v7, a4);
  }
  char v9 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(a1 + 72) + 112))(*(void *)(a1 + 72));
  if (v9) {
    BOOL v11 = v9[16] >= 0x1Cu;
  }
  else {
    BOOL v11 = 0;
  }
  if (!v11) {
    return (llvm::Instruction *)v9;
  }

  return sub_1CB844E0C((uint64_t *)a1, (llvm::Instruction *)v9, a4);
}

llvm::Instruction *LLVMBuildExactSDiv(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  char v4 = 1;
  char v8 = 1;
  if (*a4)
  {
    uint64_t v6 = a4;
    char v4 = 3;
  }
  char v7 = v4;
  return sub_1CC57DBF8(a1, a2, a3, (uint64_t)&v6, 1);
}

uint64_t LLVMBuildFDiv(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  char v4 = 1;
  char v8 = 1;
  if (*a4)
  {
    uint64_t v6 = a4;
    char v4 = 3;
  }
  char v7 = v4;
  return sub_1CB843AD0(a1, a2, a3, (uint64_t)&v6, 0);
}

llvm::Instruction *LLVMBuildURem(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  char v4 = 1;
  char v8 = 1;
  if (*a4)
  {
    uint64_t v6 = a4;
    char v4 = 3;
  }
  char v7 = v4;
  return sub_1CC57DDE0(a1, a2, a3, (uint64_t)&v6);
}

llvm::Instruction *sub_1CC57DDE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned __int8 *)(a2 + 16) >= 0x15u) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = a2;
  }
  if (*(unsigned __int8 *)(a3 + 16) >= 0x15u) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = a3;
  }
  if (v8) {
    BOOL v10 = v9 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
LABEL_12:
    __int16 v18 = 257;
    BOOL v11 = llvm::BinaryOperator::Create(22, (void *)a2, a3, &v17, 0);
    return sub_1CB844E0C((uint64_t *)a1, v11, a4);
  }
  char v15 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 184))(*(void *)(a1 + 72), 22);
  char v13 = v15;
  if (v15) {
    BOOL v16 = v15[16] >= 0x1Cu;
  }
  else {
    BOOL v16 = 0;
  }
  if (v16)
  {
    char v12 = sub_1CB844E0C((uint64_t *)a1, (llvm::Instruction *)v15, a4);
    if (v12) {
      return v12;
    }
    goto LABEL_12;
  }
  return (llvm::Instruction *)v13;
}

llvm::Instruction *LLVMBuildSRem(uint64_t *a1, void *a2, uint64_t a3, unsigned char *a4)
{
  char v4 = 1;
  char v8 = 1;
  if (*a4)
  {
    uint64_t v6 = a4;
    char v4 = 3;
  }
  char v7 = v4;
  return sub_1CD5AB298(a1, a2, a3, (uint64_t)&v6);
}

llvm::Instruction *LLVMBuildFRem(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned char *a4)
{
  char v4 = 1;
  char v8 = 1;
  if (*a4)
  {
    uint64_t v6 = a4;
    char v4 = 3;
  }
  char v7 = v4;
  return sub_1CD5AB31C(a1, a2, a3, (uint64_t)&v6);
}

llvm::Instruction *LLVMBuildShl(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  char v4 = 1;
  char v8 = 1;
  if (*a4)
  {
    uint64_t v6 = a4;
    char v4 = 3;
  }
  char v7 = v4;
  return sub_1CC242524(a1, a2, a3, (uint64_t)&v6, 0, 0);
}

llvm::Instruction *LLVMBuildLShr(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  char v4 = 1;
  char v8 = 1;
  if (*a4)
  {
    uint64_t v6 = a4;
    char v4 = 3;
  }
  char v7 = v4;
  return sub_1CC2429AC(a1, a2, a3, (uint64_t)&v6, 0);
}

llvm::Instruction *LLVMBuildAShr(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  char v4 = 1;
  char v8 = 1;
  if (*a4)
  {
    uint64_t v6 = a4;
    char v4 = 3;
  }
  char v7 = v4;
  return sub_1CC5357E8(a1, a2, a3, (uint64_t)&v6, 0);
}

llvm::Instruction *LLVMBuildAnd(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  char v4 = 1;
  char v8 = 1;
  if (*a4)
  {
    uint64_t v6 = a4;
    char v4 = 3;
  }
  char v7 = v4;
  return sub_1CBF52474(a1, a2, a3, (uint64_t)&v6);
}

llvm::Instruction *LLVMBuildOr(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  char v4 = 1;
  char v8 = 1;
  if (*a4)
  {
    uint64_t v6 = a4;
    char v4 = 3;
  }
  char v7 = v4;
  return sub_1CB844AF4(a1, a2, a3, (uint64_t)&v6);
}

llvm::Instruction *LLVMBuildXor(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  char v4 = 1;
  char v8 = 1;
  if (*a4)
  {
    uint64_t v6 = a4;
    char v4 = 3;
  }
  char v7 = v4;
  return sub_1CC2428C0(a1, a2, a3, (uint64_t)&v6);
}

llvm::Instruction *LLVMBuildBinOp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  char v8 = 1;
  char v13 = 1;
  if (*a5)
  {
    BOOL v11 = a5;
    char v8 = 3;
  }
  uint64_t v9 = sub_1CC57E154(a2);
  char v12 = v8;
  return sub_1CB844E98(a1, v9, a3, a4, (uint64_t)&v11, 0);
}

uint64_t sub_1CC57E154(uint64_t result)
{
  switch((int)result)
  {
    case 6:
      __break(1u);
      JUMPOUT(0x1CC57E368);
    case 8:
      uint64_t result = 13;
      break;
    case 9:
      uint64_t result = 14;
      break;
    case 10:
      uint64_t result = 15;
      break;
    case 11:
      uint64_t result = 16;
      break;
    case 12:
      uint64_t result = 17;
      break;
    case 13:
      uint64_t result = 18;
      break;
    case 14:
      uint64_t result = 19;
      break;
    case 15:
      uint64_t result = 20;
      break;
    case 16:
      uint64_t result = 21;
      break;
    case 17:
      uint64_t result = 22;
      break;
    case 18:
      uint64_t result = 23;
      break;
    case 19:
      uint64_t result = 24;
      break;
    case 20:
      uint64_t result = 25;
      break;
    case 21:
      uint64_t result = 26;
      break;
    case 22:
      uint64_t result = 27;
      break;
    case 23:
      uint64_t result = 28;
      break;
    case 24:
      uint64_t result = 29;
      break;
    case 25:
      uint64_t result = 30;
      break;
    case 26:
      uint64_t result = 31;
      break;
    case 27:
      uint64_t result = 32;
      break;
    case 28:
      uint64_t result = 33;
      break;
    case 29:
      uint64_t result = 34;
      break;
    case 30:
      uint64_t result = 38;
      break;
    case 31:
      uint64_t result = 39;
      break;
    case 32:
      uint64_t result = 40;
      break;
    case 33:
      uint64_t result = 41;
      break;
    case 34:
      uint64_t result = 42;
      break;
    case 35:
      uint64_t result = 43;
      break;
    case 36:
      uint64_t result = 44;
      break;
    case 37:
      uint64_t result = 45;
      break;
    case 38:
      uint64_t result = 46;
      break;
    case 39:
      uint64_t result = 47;
      break;
    case 40:
      uint64_t result = 48;
      break;
    case 41:
      uint64_t result = 49;
      break;
    case 42:
      uint64_t result = 53;
      break;
    case 43:
      uint64_t result = 54;
      break;
    case 44:
      uint64_t result = 55;
      break;
    case 45:
      uint64_t result = 56;
      break;
    case 46:
      uint64_t result = 57;
      break;
    case 47:
      uint64_t result = 58;
      break;
    case 48:
      uint64_t result = 59;
      break;
    case 49:
      uint64_t result = 60;
      break;
    case 50:
      uint64_t result = 61;
      break;
    case 51:
      uint64_t result = 62;
      break;
    case 52:
      uint64_t result = 63;
      break;
    case 53:
      uint64_t result = 64;
      break;
    case 54:
      uint64_t result = 65;
      break;
    case 55:
      uint64_t result = 35;
      break;
    case 56:
      uint64_t result = 36;
      break;
    case 57:
      uint64_t result = 37;
      break;
    case 58:
      uint64_t result = 6;
      break;
    case 59:
      uint64_t result = 66;
      break;
    case 60:
      uint64_t result = 50;
      break;
    case 61:
      uint64_t result = 8;
      break;
    case 62:
      uint64_t result = 9;
      break;
    case 63:
      uint64_t result = 52;
      break;
    case 64:
      uint64_t result = 51;
      break;
    case 65:
      uint64_t result = 10;
      break;
    case 66:
      uint64_t result = 12;
      break;
    case 67:
      uint64_t result = 11;
      break;
    case 68:
      uint64_t result = 67;
      break;
    default:
      return result;
  }
  return result;
}

llvm::Instruction *LLVMBuildNeg(uint64_t a1, llvm::BinaryOperator *a2, unsigned char *a3)
{
  char v3 = 1;
  char v7 = 1;
  if (*a3)
  {
    uint64_t v5 = a3;
    char v3 = 3;
  }
  char v6 = v3;
  return sub_1CD5A6358(a1, a2, (uint64_t)&v5, 0, 0);
}

llvm::Instruction *LLVMBuildNSWNeg(uint64_t a1, llvm::BinaryOperator *a2, unsigned char *a3)
{
  char v3 = 1;
  char v7 = 1;
  if (*a3)
  {
    uint64_t v5 = a3;
    char v3 = 3;
  }
  char v6 = v3;
  return sub_1CD5A6358(a1, a2, (uint64_t)&v5, 0, 1);
}

llvm::Instruction *LLVMBuildNUWNeg(uint64_t a1, llvm::BinaryOperator *a2, unsigned char *a3)
{
  char v3 = 1;
  char v7 = 1;
  if (*a3)
  {
    uint64_t v5 = a3;
    char v3 = 3;
  }
  char v6 = v3;
  return sub_1CD5A6358(a1, a2, (uint64_t)&v5, (llvm::Instruction *)1, 0);
}

llvm::Instruction *LLVMBuildFNeg(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  char v3 = 1;
  char v7 = 1;
  if (*a3)
  {
    uint64_t v5 = a3;
    char v3 = 3;
  }
  char v6 = v3;
  return sub_1CB843FF8(a1, a2, (uint64_t)&v5, 0);
}

llvm::Instruction *LLVMBuildNot(uint64_t a1, uint64_t a2, unsigned char *a3, llvm::Instruction *a4)
{
  char v4 = 1;
  char v8 = 1;
  if (*a3)
  {
    char v6 = a3;
    char v4 = 3;
  }
  char v7 = v4;
  return sub_1CC2427E8(a1, a2, (uint64_t)&v6, a4);
}

llvm::Instruction *LLVMBuildMalloc(uint64_t *a1, llvm::ConstantExpr *a2, const char *a3)
{
  char v6 = (llvm::Type ***)(***(void ***)a1[6] + 1960);
  SizeOf = (llvm::Type **)llvm::ConstantExpr::getSizeOf(a2, a2);
  TruncOrBitCast = llvm::ConstantExpr::getTruncOrBitCast(SizeOf, v6, v8);
  uint64_t v10 = a1[6];
  __int16 v18 = 257;
  BOOL v11 = sub_1CC5CBD20(0, v10, v6, a2, (uint64_t)TruncOrBitCast, 0, 0, 0, 0, v17);
  char v12 = 1;
  HIBYTE(v18) = 1;
  if (*a3)
  {
    v17[0] = a3;
    char v12 = 3;
  }
  LOBYTE(v18) = v12;
  (*(void (**)(uint64_t, llvm::Instruction *, const char **, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v11, v17, a1[6], a1[7]);
  uint64_t v13 = *((unsigned int *)a1 + 2);
  if (v13)
  {
    uint64_t v15 = *a1;
    uint64_t v16 = v15 + 16 * v13;
    do
    {
      llvm::Instruction::setMetadata(v11, *(_DWORD *)v15, *(llvm::MDNode **)(v15 + 8));
      v15 += 16;
    }
    while (v15 != v16);
  }
  return v11;
}

llvm::Instruction *LLVMBuildArrayMalloc(uint64_t *a1, llvm::ConstantExpr *a2, llvm::Constant **a3, const char *a4)
{
  char v8 = (llvm::Type ***)(***(void ***)a1[6] + 1960);
  SizeOf = (llvm::Type **)llvm::ConstantExpr::getSizeOf(a2, a2);
  TruncOrBitCast = llvm::ConstantExpr::getTruncOrBitCast(SizeOf, v8, v10);
  uint64_t v12 = a1[6];
  __int16 v20 = 257;
  uint64_t v13 = sub_1CC5CBD20(0, v12, v8, a2, (uint64_t)TruncOrBitCast, a3, 0, 0, 0, v19);
  char v14 = 1;
  HIBYTE(v20) = 1;
  if (*a4)
  {
    v19[0] = a4;
    char v14 = 3;
  }
  LOBYTE(v20) = v14;
  (*(void (**)(uint64_t, llvm::Instruction *, const char **, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v13, v19, a1[6], a1[7]);
  uint64_t v15 = *((unsigned int *)a1 + 2);
  if (v15)
  {
    uint64_t v17 = *a1;
    uint64_t v18 = v17 + 16 * v15;
    do
    {
      llvm::Instruction::setMetadata(v13, *(_DWORD *)v17, *(llvm::MDNode **)(v17 + 8));
      v17 += 16;
    }
    while (v17 != v18);
  }
  return v13;
}

uint64_t ***LLVMBuildMemSet(uint64_t a1, llvm::Value *a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  unint64_t v5 = __clz(a5) ^ 0x13F;
  if (a5) {
    __int16 v6 = v5;
  }
  else {
    __int16 v6 = 0;
  }
  return llvm::IRBuilderBase::CreateMemSet(a1, a2, a3, a4, v6, 0, 0, 0, 0);
}

uint64_t ***LLVMBuildMemCpy(uint64_t a1, llvm::Value *a2, unsigned int a3, llvm::Value *a4, unsigned int a5, uint64_t *a6)
{
  __int16 v8 = __clz(a5);
  unint64_t v9 = __clz(a3) ^ 0x13F;
  if (a3) {
    __int16 v10 = v9;
  }
  else {
    __int16 v10 = 0;
  }
  if (a5) {
    __int16 v11 = v8 ^ 0x13F;
  }
  else {
    __int16 v11 = 0;
  }
  return llvm::IRBuilderBase::CreateMemTransferInst(a1, 194, a2, v10, a4, v11, a6, 0, 0, 0, 0, 0);
}

uint64_t ***LLVMBuildMemMove(uint64_t a1, llvm::Value *a2, unsigned int a3, llvm::Value *a4, unsigned int a5, void *a6)
{
  __int16 v6 = __clz(a5);
  unint64_t v7 = __clz(a3) ^ 0x13F;
  if (a3) {
    __int16 v8 = v7;
  }
  else {
    __int16 v8 = 0;
  }
  if (a5) {
    __int16 v9 = v6 ^ 0x13F;
  }
  else {
    __int16 v9 = 0;
  }
  return llvm::IRBuilderBase::CreateMemMove(a1, a2, v8, a4, v9, a6, 0, 0, 0, 0);
}

llvm::Instruction *LLVMBuildAlloca(uint64_t *a1, llvm::Type *a2, unsigned char *a3)
{
  char v3 = 1;
  char v7 = 1;
  if (*a3)
  {
    unint64_t v5 = a3;
    char v3 = 3;
  }
  char v6 = v3;
  return sub_1CB935044(a1, a2, 0, (uint64_t)&v5);
}

llvm::Instruction *LLVMBuildArrayAlloca(uint64_t *a1, llvm::Type *a2, void *a3, unsigned char *a4)
{
  char v4 = 1;
  char v8 = 1;
  if (*a4)
  {
    char v6 = a4;
    char v4 = 3;
  }
  char v7 = v4;
  return sub_1CB935044(a1, a2, a3, (uint64_t)&v6);
}

llvm::Instruction *LLVMBuildFree(uint64_t *a1, void *a2)
{
  char v3 = (llvm::Instruction *)sub_1CC5CC760(a2, 0, 0, 0, a1[6]);
  __int16 v9 = 257;
  (*(void (**)(uint64_t, llvm::Instruction *, unsigned char *, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v3, v8, a1[6], a1[7]);
  uint64_t v4 = *((unsigned int *)a1 + 2);
  if (v4)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = v6 + 16 * v4;
    do
    {
      llvm::Instruction::setMetadata(v3, *(_DWORD *)v6, *(llvm::MDNode **)(v6 + 8));
      v6 += 16;
    }
    while (v6 != v7);
  }
  return v3;
}

llvm::Instruction *LLVMBuildLoad(uint64_t *a1, uint64_t a2, unsigned char *a3)
{
  unint64_t v5 = **(llvm::Type ***)(*(void *)a2 + 16);
  char v6 = 1;
  char v16 = 1;
  if (*a3)
  {
    char v14 = a3;
    char v6 = 3;
  }
  char v15 = v6;
  char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(a1[6] + 56) + 40) + 272), v5, 1);
  char v8 = operator new(0x60uLL);
  v8[13] = v8[13] & 0x38000000 | 1;
  __int16 v9 = (llvm::Instruction *)(v8 + 8);
  *(void *)char v8 = 0;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *((void *)v8 + 3) = v8 + 8;
  __int16 v18 = 257;
  llvm::LoadInst::LoadInst((llvm::Value *)(v8 + 8), (uint64_t)v5, a2, &v17, 0, Alignment, 0);
  (*(void (**)(uint64_t, llvm::Instruction *, unsigned char **, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v9, &v14, a1[6], a1[7]);
  uint64_t v10 = *((unsigned int *)a1 + 2);
  if (v10)
  {
    uint64_t v12 = *a1;
    uint64_t v13 = v12 + 16 * v10;
    do
    {
      llvm::Instruction::setMetadata(v9, *(_DWORD *)v12, *(llvm::MDNode **)(v12 + 8));
      v12 += 16;
    }
    while (v12 != v13);
  }
  return v9;
}

llvm::Instruction *LLVMBuildLoad2(uint64_t *a1, llvm::Type *a2, uint64_t a3, unsigned char *a4)
{
  char v7 = 1;
  char v17 = 1;
  if (*a4)
  {
    char v15 = a4;
    char v7 = 3;
  }
  char v16 = v7;
  char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(a1[6] + 56) + 40) + 272), a2, 1);
  __int16 v9 = operator new(0x60uLL);
  v9[13] = v9[13] & 0x38000000 | 1;
  uint64_t v10 = (llvm::Instruction *)(v9 + 8);
  *(void *)__int16 v9 = 0;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *((void *)v9 + 3) = v9 + 8;
  __int16 v19 = 257;
  llvm::LoadInst::LoadInst((llvm::Value *)(v9 + 8), (uint64_t)a2, a3, &v18, 0, Alignment, 0);
  (*(void (**)(uint64_t, llvm::Instruction *, unsigned char **, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v10, &v15, a1[6], a1[7]);
  uint64_t v11 = *((unsigned int *)a1 + 2);
  if (v11)
  {
    uint64_t v13 = *a1;
    uint64_t v14 = v13 + 16 * v11;
    do
    {
      llvm::Instruction::setMetadata(v10, *(_DWORD *)v13, *(llvm::MDNode **)(v13 + 8));
      v13 += 16;
    }
    while (v13 != v14);
  }
  return v10;
}

llvm::Instruction *LLVMBuildStore(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1CC27BF8C(a1, a2, a3, 0, 0);
}

llvm::Instruction *LLVMBuildFence(uint64_t a1, __int16 a2, int a3, unsigned char *a4)
{
  char v6 = 1;
  char v12 = 1;
  if (*a4)
  {
    uint64_t v10 = a4;
    char v6 = 3;
  }
  BOOL v7 = a3 == 0;
  char v11 = v6;
  char v8 = (char *)operator new(0x40uLL);
  *(void *)char v8 = **(void **)(a1 + 64) + 1576;
  *((void *)v8 + 1) = 0;
  v8[16] = 63;
  *(_OWORD *)(v8 + 17) = 0u;
  *(_OWORD *)(v8 + 44) = 0u;
  *(_OWORD *)(v8 + 33) = 0u;
  *((_WORD *)v8 + 9) = a2;
  v8[60] = v7;
  return sub_1CD509770((uint64_t *)a1, (llvm::Instruction *)v8, (uint64_t)&v10);
}

uint64_t LLVMBuildGEP(uint64_t *a1, uint64_t *a2, uint64_t *a3, unsigned int a4, unsigned char *a5)
{
  uint64_t v7 = *a2;
  if ((*(_DWORD *)(*a2 + 8) & 0xFE) == 0x12) {
    uint64_t v7 = **(void **)(v7 + 16);
  }
  uint64_t v8 = **(void **)(v7 + 16);
  char v9 = 1;
  char v13 = 1;
  if (*a5)
  {
    char v11 = a5;
    char v9 = 3;
  }
  char v12 = v9;
  return sub_1CC27CEC0(a1, v8, a2, a3, a4, (uint64_t)&v11);
}

uint64_t LLVMBuildGEP2(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unsigned int a5, unsigned char *a6)
{
  char v6 = 1;
  char v10 = 1;
  if (*a6)
  {
    uint64_t v8 = a6;
    char v6 = 3;
  }
  char v9 = v6;
  return sub_1CC27CEC0(a1, a2, a3, a4, a5, (uint64_t)&v8);
}

uint64_t LLVMBuildInBoundsGEP(uint64_t *a1, uint64_t *a2, uint64_t *a3, unsigned int a4, unsigned char *a5)
{
  uint64_t v7 = *a2;
  if ((*(_DWORD *)(*a2 + 8) & 0xFE) == 0x12) {
    uint64_t v7 = **(void **)(v7 + 16);
  }
  uint64_t v8 = **(void **)(v7 + 16);
  char v9 = 1;
  char v13 = 1;
  if (*a5)
  {
    char v11 = a5;
    char v9 = 3;
  }
  char v12 = v9;
  return sub_1CC57EEA0(a1, v8, a2, a3, a4, (uint64_t)&v11);
}

uint64_t sub_1CC57EEA0(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t, uint64_t))(*(void *)a1[9] + 48))(a1[9], a2, a3, a4, a5, 1);
  if (v12) {
    return v12;
  }
  uint64_t v13 = (a5 + 1);
  __int16 v23 = 257;
  uint64_t v14 = operator new(32 * v13 + 80);
  char v15 = &v14[4 * v13];
  *((_DWORD *)v15 + 5) = *((_DWORD *)v15 + 5) & 0x38000000 | v13 & 0x7FFFFFF;
  if (a5 != -1)
  {
    do
    {
      *uint64_t v14 = 0;
      v14[1] = 0;
      unsigned __int8 v14[2] = 0;
      uint64_t v14[3] = v15;
      v14 += 4;
    }
    while (v14 != v15);
  }
  sub_1CB845A7C(a2, a3, (uint64_t)a4, a5);
  void *v15 = v16;
  v15[1] = 0;
  int v17 = *((_DWORD *)v15 + 5) & 0xC0000000 | v13 & 0x7FFFFFF;
  *((_DWORD *)v15 + 4) = 62;
  *((_DWORD *)v15 + 5) = v17;
  *(_OWORD *)(v15 + 3) = 0u;
  *(_OWORD *)(v15 + 5) = 0u;
  *((_DWORD *)v15 + 14) = 0;
  unsigned char v15[8] = a2;
  void v15[9] = llvm::GetElementPtrInst::getIndexedType(a2, (uint64_t)a4, a5);
  llvm::GetElementPtrInst::init((uint64_t ***)v15, (uint64_t **)a3, a4, a5, &v22);
  *((unsigned char *)v15 + 17) |= 2u;
  (*(void (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v15, a6, a1[6], a1[7]);
  uint64_t v18 = *((unsigned int *)a1 + 2);
  if (v18)
  {
    uint64_t v20 = *a1;
    uint64_t v21 = v20 + 16 * v18;
    do
    {
      llvm::Instruction::setMetadata((llvm::Instruction *)v15, *(_DWORD *)v20, *(llvm::MDNode **)(v20 + 8));
      v20 += 16;
    }
    while (v20 != v21);
  }
  return (uint64_t)v15;
}

uint64_t LLVMBuildInBoundsGEP2(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unsigned int a5, unsigned char *a6)
{
  char v6 = 1;
  char v10 = 1;
  if (*a6)
  {
    uint64_t v8 = a6;
    char v6 = 3;
  }
  char v9 = v6;
  return sub_1CC57EEA0(a1, a2, a3, a4, a5, (uint64_t)&v8);
}

uint64_t ***LLVMBuildStructGEP(uint64_t *a1, const llvm::APInt *a2, unsigned int a3, unsigned char *a4)
{
  uint64_t v6 = *(void *)a2;
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
    uint64_t v6 = **(void **)(v6 + 16);
  }
  uint64_t v7 = **(void **)(v6 + 16);
  char v8 = 1;
  char v12 = 1;
  if (*a4)
  {
    char v10 = a4;
    char v8 = 3;
  }
  char v11 = v8;
  return sub_1CC5812D4(a1, v7, a2, 0, a3, (uint64_t)&v10);
}

uint64_t ***LLVMBuildStructGEP2(uint64_t *a1, uint64_t a2, const llvm::APInt *a3, unsigned int a4, unsigned char *a5)
{
  char v5 = 1;
  char v9 = 1;
  if (*a5)
  {
    uint64_t v7 = a5;
    char v5 = 3;
  }
  char v8 = v5;
  return sub_1CC5812D4(a1, a2, a3, 0, a4, (uint64_t)&v7);
}

char *LLVMBuildGlobalString(uint64_t a1, char *__s, const char *a3)
{
  if (__s) {
    uint64_t v6 = (llvm::Type *)strlen(__s);
  }
  else {
    uint64_t v6 = 0;
  }
  char v7 = 1;
  char v11 = 1;
  if (*a3)
  {
    char v9 = a3;
    char v7 = 3;
  }
  char v10 = v7;
  return llvm::IRBuilderBase::CreateGlobalString(a1, __s, v6, &v9, 0, 0);
}

uint64_t LLVMBuildGlobalStringPtr(uint64_t a1, char *__s, const char *a3)
{
  if (__s) {
    uint64_t v6 = (llvm::Type *)strlen(__s);
  }
  else {
    uint64_t v6 = 0;
  }
  char v7 = 1;
  char v11 = 1;
  if (*a3)
  {
    char v9 = a3;
    char v7 = 3;
  }
  char v10 = v7;
  return sub_1CD57DDA8(a1, __s, v6, &v9, 0, 0);
}

uint64_t LLVMGetVolatile(uint64_t a1)
{
  return *(_WORD *)(a1 + 18) & 1;
}

uint64_t LLVMSetVolatile(uint64_t result, int a2)
{
  *(_WORD *)(result + 18) = *(_WORD *)(result + 18) & 0xFFFE | (a2 != 0);
  return result;
}

uint64_t LLVMGetWeak(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 18) >> 1) & 1;
}

uint64_t LLVMSetWeak(uint64_t result, int a2)
{
  *(_WORD *)(result + 18) = *(_WORD *)(result + 18) & 0xFFFD | (2 * (a2 != 0));
  return result;
}

uint64_t LLVMGetOrdering(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v1 == 60)
  {
    int v2 = *(unsigned __int16 *)(a1 + 18) >> 7;
  }
  else
  {
    unsigned int v3 = *(unsigned __int16 *)(a1 + 18);
    if (a1 && v1 == 61) {
      int v2 = v3 >> 7;
    }
    else {
      int v2 = v3 >> 1;
    }
  }
  return v2 & 7;
}

uint64_t LLVMSetOrdering(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 18) = *(_WORD *)(result + 18) & 0xFC7F | (a2 << 7);
  return result;
}

uint64_t LLVMGetAtomicRMWBinOp(uint64_t a1)
{
  return *(_WORD *)(a1 + 18) >> 4;
}

uint64_t LLVMSetAtomicRMWBinOp(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 18) = *(_WORD *)(result + 18) & 0xFF0F | (16 * a2);
  return result;
}

unsigned __int8 *LLVMBuildTrunc(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v4 = (unsigned __int8 *)a2;
  char v6 = 1;
  char v17 = 1;
  if (*a4)
  {
    v15[0] = a4;
    char v6 = 3;
  }
  char v16 = v6;
  if (*(void *)a2 != a3)
  {
    if (*(unsigned __int8 *)(a2 + 16) <= 0x14u)
    {
      uint64_t v4 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1[9] + 224))(a1[9], 38, a2, a3);
      if (v4) {
        BOOL v10 = v4[16] >= 0x1Cu;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10)
      {
        (*(void (**)(uint64_t, unsigned __int8 *, void *, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v4, v15, a1[6], a1[7]);
        uint64_t v12 = *((unsigned int *)a1 + 2);
        if (v12)
        {
          uint64_t v13 = *a1;
          uint64_t v14 = v13 + 16 * v12;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v4, *(_DWORD *)v13, *(llvm::MDNode **)(v13 + 8));
            v13 += 16;
          }
          while (v13 != v14);
        }
      }
    }
    else
    {
      __int16 v19 = 257;
      uint64_t v4 = (unsigned __int8 *)llvm::CastInst::Create(38, a2, a3, &v18, 0);
      (*(void (**)(uint64_t, unsigned __int8 *, void *, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v4, v15, a1[6], a1[7]);
      uint64_t v7 = *((unsigned int *)a1 + 2);
      if (v7)
      {
        uint64_t v8 = *a1;
        uint64_t v9 = v8 + 16 * v7;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v4, *(_DWORD *)v8, *(llvm::MDNode **)(v8 + 8));
          v8 += 16;
        }
        while (v8 != v9);
      }
    }
  }
  return v4;
}

unsigned __int8 *LLVMBuildZExt(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v4 = (unsigned __int8 *)a2;
  char v6 = 1;
  char v17 = 1;
  if (*a4)
  {
    v15[0] = a4;
    char v6 = 3;
  }
  char v16 = v6;
  if (*(void *)a2 != a3)
  {
    if (*(unsigned __int8 *)(a2 + 16) <= 0x14u)
    {
      uint64_t v4 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1[9] + 224))(a1[9], 39, a2, a3);
      if (v4) {
        BOOL v10 = v4[16] >= 0x1Cu;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10)
      {
        (*(void (**)(uint64_t, unsigned __int8 *, void *, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v4, v15, a1[6], a1[7]);
        uint64_t v12 = *((unsigned int *)a1 + 2);
        if (v12)
        {
          uint64_t v13 = *a1;
          uint64_t v14 = v13 + 16 * v12;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v4, *(_DWORD *)v13, *(llvm::MDNode **)(v13 + 8));
            v13 += 16;
          }
          while (v13 != v14);
        }
      }
    }
    else
    {
      __int16 v19 = 257;
      uint64_t v4 = (unsigned __int8 *)llvm::CastInst::Create(39, a2, a3, &v18, 0);
      (*(void (**)(uint64_t, unsigned __int8 *, void *, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v4, v15, a1[6], a1[7]);
      uint64_t v7 = *((unsigned int *)a1 + 2);
      if (v7)
      {
        uint64_t v8 = *a1;
        uint64_t v9 = v8 + 16 * v7;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v4, *(_DWORD *)v8, *(llvm::MDNode **)(v8 + 8));
          v8 += 16;
        }
        while (v8 != v9);
      }
    }
  }
  return v4;
}

unsigned __int8 *LLVMBuildSExt(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v4 = (unsigned __int8 *)a2;
  char v6 = 1;
  char v17 = 1;
  if (*a4)
  {
    v15[0] = a4;
    char v6 = 3;
  }
  char v16 = v6;
  if (*(void *)a2 != a3)
  {
    if (*(unsigned __int8 *)(a2 + 16) <= 0x14u)
    {
      uint64_t v4 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1[9] + 224))(a1[9], 40, a2, a3);
      if (v4) {
        BOOL v10 = v4[16] >= 0x1Cu;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10)
      {
        (*(void (**)(uint64_t, unsigned __int8 *, void *, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v4, v15, a1[6], a1[7]);
        uint64_t v12 = *((unsigned int *)a1 + 2);
        if (v12)
        {
          uint64_t v13 = *a1;
          uint64_t v14 = v13 + 16 * v12;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v4, *(_DWORD *)v13, *(llvm::MDNode **)(v13 + 8));
            v13 += 16;
          }
          while (v13 != v14);
        }
      }
    }
    else
    {
      __int16 v19 = 257;
      uint64_t v4 = (unsigned __int8 *)llvm::CastInst::Create(40, a2, a3, &v18, 0);
      (*(void (**)(uint64_t, unsigned __int8 *, void *, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v4, v15, a1[6], a1[7]);
      uint64_t v7 = *((unsigned int *)a1 + 2);
      if (v7)
      {
        uint64_t v8 = *a1;
        uint64_t v9 = v8 + 16 * v7;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v4, *(_DWORD *)v8, *(llvm::MDNode **)(v8 + 8));
          v8 += 16;
        }
        while (v8 != v9);
      }
    }
  }
  return v4;
}

llvm::Instruction *LLVMBuildFPToUI(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned char *a4)
{
  char v4 = 1;
  char v8 = 1;
  if (*a4)
  {
    char v6 = a4;
    char v4 = 3;
  }
  char v7 = v4;
  return sub_1CC57F858(a1, a2, a3, (uint64_t)&v6);
}

llvm::Instruction *sub_1CC57F858(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  char v5 = (unsigned __int8 *)a2;
  if (*(unsigned char *)(a1 + 100)) {
    return (llvm::Instruction *)llvm::IRBuilderBase::CreateConstrainedFPCast(a1, 93, (uint64_t *)a2, a3, 0, a4, 0, 0, 0);
  }
  if (*(uint64_t **)a2 == a3) {
    return (llvm::Instruction *)v5;
  }
  if (*(unsigned __int8 *)(a2 + 16) > 0x14u)
  {
    __int16 v13 = 257;
    char v5 = (unsigned __int8 *)llvm::CastInst::Create(41, a2, (uint64_t)a3, &v12, 0);
    (*(void (**)(void, unsigned __int8 *, uint64_t, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v5, a4, *(void *)(a1 + 48), *(void *)(a1 + 56));
    uint64_t v7 = *(unsigned int *)(a1 + 8);
    if (v7)
    {
      uint64_t v10 = *(void *)a1;
      uint64_t v11 = v10 + 16 * v7;
      do
      {
        llvm::Instruction::setMetadata((llvm::Instruction *)v5, *(_DWORD *)v10, *(llvm::MDNode **)(v10 + 8));
        v10 += 16;
      }
      while (v10 != v11);
    }
    return (llvm::Instruction *)v5;
  }
  char v5 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t *))(**(void **)(a1 + 72) + 224))(*(void *)(a1 + 72), 41, a2, a3);
  if (v5) {
    BOOL v9 = v5[16] >= 0x1Cu;
  }
  else {
    BOOL v9 = 0;
  }
  if (!v9) {
    return (llvm::Instruction *)v5;
  }

  return sub_1CB844E0C((uint64_t *)a1, (llvm::Instruction *)v5, a4);
}

llvm::Instruction *LLVMBuildFPToSI(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned char *a4)
{
  char v4 = 1;
  char v8 = 1;
  if (*a4)
  {
    char v6 = a4;
    char v4 = 3;
  }
  char v7 = v4;
  return sub_1CC57FA24(a1, a2, a3, (uint64_t)&v6);
}

llvm::Instruction *sub_1CC57FA24(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  char v5 = (unsigned __int8 *)a2;
  if (*(unsigned char *)(a1 + 100)) {
    return (llvm::Instruction *)llvm::IRBuilderBase::CreateConstrainedFPCast(a1, 92, (uint64_t *)a2, a3, 0, a4, 0, 0, 0);
  }
  if (*(uint64_t **)a2 == a3) {
    return (llvm::Instruction *)v5;
  }
  if (*(unsigned __int8 *)(a2 + 16) > 0x14u)
  {
    __int16 v13 = 257;
    char v5 = (unsigned __int8 *)llvm::CastInst::Create(42, a2, (uint64_t)a3, &v12, 0);
    (*(void (**)(void, unsigned __int8 *, uint64_t, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v5, a4, *(void *)(a1 + 48), *(void *)(a1 + 56));
    uint64_t v7 = *(unsigned int *)(a1 + 8);
    if (v7)
    {
      uint64_t v10 = *(void *)a1;
      uint64_t v11 = v10 + 16 * v7;
      do
      {
        llvm::Instruction::setMetadata((llvm::Instruction *)v5, *(_DWORD *)v10, *(llvm::MDNode **)(v10 + 8));
        v10 += 16;
      }
      while (v10 != v11);
    }
    return (llvm::Instruction *)v5;
  }
  char v5 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t *))(**(void **)(a1 + 72) + 224))(*(void *)(a1 + 72), 42, a2, a3);
  if (v5) {
    BOOL v9 = v5[16] >= 0x1Cu;
  }
  else {
    BOOL v9 = 0;
  }
  if (!v9) {
    return (llvm::Instruction *)v5;
  }

  return sub_1CB844E0C((uint64_t *)a1, (llvm::Instruction *)v5, a4);
}

llvm::Instruction *LLVMBuildUIToFP(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned char *a4)
{
  char v4 = 1;
  char v8 = 1;
  if (*a4)
  {
    char v6 = a4;
    char v4 = 3;
  }
  char v7 = v4;
  return sub_1CC52CA10(a1, a2, a3, (uint64_t)&v6);
}

llvm::Instruction *LLVMBuildSIToFP(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned char *a4)
{
  char v4 = 1;
  char v8 = 1;
  if (*a4)
  {
    char v6 = a4;
    char v4 = 3;
  }
  char v7 = v4;
  return sub_1CB845378(a1, a2, a3, (uint64_t)&v6);
}

llvm::Instruction *LLVMBuildFPTrunc(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned char *a4)
{
  char v4 = 1;
  char v8 = 1;
  if (*a4)
  {
    char v6 = a4;
    char v4 = 3;
  }
  char v7 = v4;
  return sub_1CB845034(a1, a2, a3, (uint64_t)&v6);
}

llvm::Instruction *LLVMBuildFPExt(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned char *a4)
{
  char v4 = 1;
  char v8 = 1;
  if (*a4)
  {
    char v6 = a4;
    char v4 = 3;
  }
  char v7 = v4;
  return sub_1CB843944(a1, a2, a3, (uint64_t)&v6);
}

unsigned __int8 *LLVMBuildPtrToInt(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  char v4 = (unsigned __int8 *)a2;
  char v6 = 1;
  char v17 = 1;
  if (*a4)
  {
    v15[0] = a4;
    char v6 = 3;
  }
  char v16 = v6;
  if (*(void *)a2 != a3)
  {
    if (*(unsigned __int8 *)(a2 + 16) <= 0x14u)
    {
      char v4 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1[9] + 224))(a1[9], 47, a2, a3);
      if (v4) {
        BOOL v10 = v4[16] >= 0x1Cu;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10)
      {
        (*(void (**)(uint64_t, unsigned __int8 *, void *, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v4, v15, a1[6], a1[7]);
        uint64_t v12 = *((unsigned int *)a1 + 2);
        if (v12)
        {
          uint64_t v13 = *a1;
          uint64_t v14 = v13 + 16 * v12;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v4, *(_DWORD *)v13, *(llvm::MDNode **)(v13 + 8));
            v13 += 16;
          }
          while (v13 != v14);
        }
      }
    }
    else
    {
      __int16 v19 = 257;
      char v4 = (unsigned __int8 *)llvm::CastInst::Create(47, a2, a3, &v18, 0);
      (*(void (**)(uint64_t, unsigned __int8 *, void *, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v4, v15, a1[6], a1[7]);
      uint64_t v7 = *((unsigned int *)a1 + 2);
      if (v7)
      {
        uint64_t v8 = *a1;
        uint64_t v9 = v8 + 16 * v7;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v4, *(_DWORD *)v8, *(llvm::MDNode **)(v8 + 8));
          v8 += 16;
        }
        while (v8 != v9);
      }
    }
  }
  return v4;
}

unsigned __int8 *LLVMBuildIntToPtr(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  char v4 = (unsigned __int8 *)a2;
  char v6 = 1;
  char v17 = 1;
  if (*a4)
  {
    v15[0] = a4;
    char v6 = 3;
  }
  char v16 = v6;
  if (*(void *)a2 != a3)
  {
    if (*(unsigned __int8 *)(a2 + 16) <= 0x14u)
    {
      char v4 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1[9] + 224))(a1[9], 48, a2, a3);
      if (v4) {
        BOOL v10 = v4[16] >= 0x1Cu;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10)
      {
        (*(void (**)(uint64_t, unsigned __int8 *, void *, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v4, v15, a1[6], a1[7]);
        uint64_t v12 = *((unsigned int *)a1 + 2);
        if (v12)
        {
          uint64_t v13 = *a1;
          uint64_t v14 = v13 + 16 * v12;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v4, *(_DWORD *)v13, *(llvm::MDNode **)(v13 + 8));
            v13 += 16;
          }
          while (v13 != v14);
        }
      }
    }
    else
    {
      __int16 v19 = 257;
      char v4 = (unsigned __int8 *)llvm::CastInst::Create(48, a2, a3, &v18, 0);
      (*(void (**)(uint64_t, unsigned __int8 *, void *, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v4, v15, a1[6], a1[7]);
      uint64_t v7 = *((unsigned int *)a1 + 2);
      if (v7)
      {
        uint64_t v8 = *a1;
        uint64_t v9 = v8 + 16 * v7;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v4, *(_DWORD *)v8, *(llvm::MDNode **)(v8 + 8));
          v8 += 16;
        }
        while (v8 != v9);
      }
    }
  }
  return v4;
}

unsigned __int8 *LLVMBuildBitCast(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  char v4 = (unsigned __int8 *)a2;
  char v6 = 1;
  char v17 = 1;
  if (*a4)
  {
    v15[0] = a4;
    char v6 = 3;
  }
  char v16 = v6;
  if (*(void *)a2 != a3)
  {
    if (*(unsigned __int8 *)(a2 + 16) <= 0x14u)
    {
      char v4 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1[9] + 224))(a1[9], 49, a2, a3);
      if (v4) {
        BOOL v10 = v4[16] >= 0x1Cu;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10)
      {
        (*(void (**)(uint64_t, unsigned __int8 *, void *, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v4, v15, a1[6], a1[7]);
        uint64_t v12 = *((unsigned int *)a1 + 2);
        if (v12)
        {
          uint64_t v13 = *a1;
          uint64_t v14 = v13 + 16 * v12;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v4, *(_DWORD *)v13, *(llvm::MDNode **)(v13 + 8));
            v13 += 16;
          }
          while (v13 != v14);
        }
      }
    }
    else
    {
      __int16 v19 = 257;
      char v4 = (unsigned __int8 *)llvm::CastInst::Create(49, a2, a3, &v18, 0);
      (*(void (**)(uint64_t, unsigned __int8 *, void *, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v4, v15, a1[6], a1[7]);
      uint64_t v7 = *((unsigned int *)a1 + 2);
      if (v7)
      {
        uint64_t v8 = *a1;
        uint64_t v9 = v8 + 16 * v7;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v4, *(_DWORD *)v8, *(llvm::MDNode **)(v8 + 8));
          v8 += 16;
        }
        while (v8 != v9);
      }
    }
  }
  return v4;
}

unsigned __int8 *LLVMBuildAddrSpaceCast(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  char v4 = (unsigned __int8 *)a2;
  char v6 = 1;
  char v17 = 1;
  if (*a4)
  {
    v15[0] = a4;
    char v6 = 3;
  }
  char v16 = v6;
  if (*(void *)a2 != a3)
  {
    if (*(unsigned __int8 *)(a2 + 16) <= 0x14u)
    {
      char v4 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1[9] + 224))(a1[9], 50, a2, a3);
      if (v4) {
        BOOL v10 = v4[16] >= 0x1Cu;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10)
      {
        (*(void (**)(uint64_t, unsigned __int8 *, void *, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v4, v15, a1[6], a1[7]);
        uint64_t v12 = *((unsigned int *)a1 + 2);
        if (v12)
        {
          uint64_t v13 = *a1;
          uint64_t v14 = v13 + 16 * v12;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v4, *(_DWORD *)v13, *(llvm::MDNode **)(v13 + 8));
            v13 += 16;
          }
          while (v13 != v14);
        }
      }
    }
    else
    {
      __int16 v19 = 257;
      char v4 = (unsigned __int8 *)llvm::CastInst::Create(50, a2, a3, &v18, 0);
      (*(void (**)(uint64_t, unsigned __int8 *, void *, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v4, v15, a1[6], a1[7]);
      uint64_t v7 = *((unsigned int *)a1 + 2);
      if (v7)
      {
        uint64_t v8 = *a1;
        uint64_t v9 = v8 + 16 * v7;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v4, *(_DWORD *)v8, *(llvm::MDNode **)(v8 + 8));
          v8 += 16;
        }
        while (v8 != v9);
      }
    }
  }
  return v4;
}

llvm::CastInst *LLVMBuildZExtOrBitCast(uint64_t a1, llvm::CastInst *a2, llvm::Type ***a3, unsigned char *a4, llvm::Instruction *a5)
{
  char v5 = 1;
  char v9 = 1;
  if (*a4)
  {
    uint64_t v7 = a4;
    char v5 = 3;
  }
  char v8 = v5;
  return sub_1CC27BE9C(a1, a2, a3, (uint64_t)&v7, a5);
}

llvm::CastInst *LLVMBuildSExtOrBitCast(uint64_t a1, llvm::CastInst *a2, llvm::Type ***a3, unsigned char *a4, llvm::Instruction *a5)
{
  char v5 = 1;
  char v9 = 1;
  if (*a4)
  {
    uint64_t v7 = a4;
    char v5 = 3;
  }
  char v8 = v5;
  return sub_1CD5AB400(a1, a2, a3, (uint64_t)&v7, a5);
}

llvm::CastInst *LLVMBuildTruncOrBitCast(uint64_t a1, llvm::CastInst *a2, llvm::Type ***a3, unsigned char *a4, llvm::Instruction *a5)
{
  char v5 = 1;
  char v9 = 1;
  if (*a4)
  {
    uint64_t v7 = a4;
    char v5 = 3;
  }
  char v8 = v5;
  return sub_1CD5AB4EC(a1, a2, a3, (uint64_t)&v7, a5);
}

unsigned __int8 *LLVMBuildCast(uint64_t *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, unsigned char *a5)
{
  uint64_t v9 = sub_1CC57E154(a2);
  char v10 = 1;
  char v21 = 1;
  if (*a5)
  {
    v19[0] = a5;
    char v10 = 3;
  }
  char v20 = v10;
  if (*(void *)a3 != a4)
  {
    if (a3[16] <= 0x14u)
    {
      a3 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t))(*(void *)a1[9] + 224))(a1[9], v9, a3, a4);
      if (a3) {
        BOOL v14 = a3[16] >= 0x1Cu;
      }
      else {
        BOOL v14 = 0;
      }
      if (v14)
      {
        (*(void (**)(uint64_t, unsigned __int8 *, void *, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], a3, v19, a1[6], a1[7]);
        uint64_t v16 = *((unsigned int *)a1 + 2);
        if (v16)
        {
          uint64_t v17 = *a1;
          uint64_t v18 = v17 + 16 * v16;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)a3, *(_DWORD *)v17, *(llvm::MDNode **)(v17 + 8));
            v17 += 16;
          }
          while (v17 != v18);
        }
      }
    }
    else
    {
      __int16 v23 = 257;
      a3 = (unsigned __int8 *)llvm::CastInst::Create(v9, (uint64_t)a3, a4, &v22, 0);
      (*(void (**)(uint64_t, unsigned __int8 *, void *, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], a3, v19, a1[6], a1[7]);
      uint64_t v11 = *((unsigned int *)a1 + 2);
      if (v11)
      {
        uint64_t v12 = *a1;
        uint64_t v13 = v12 + 16 * v11;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)a3, *(_DWORD *)v12, *(llvm::MDNode **)(v12 + 8));
          v12 += 16;
        }
        while (v12 != v13);
      }
    }
  }
  return a3;
}

llvm::Instruction *LLVMBuildPointerCast(uint64_t a1, llvm::CastInst *a2, llvm::Value *a3, unsigned char *a4, llvm::Instruction *a5)
{
  char v5 = 1;
  char v9 = 1;
  if (*a4)
  {
    uint64_t v7 = a4;
    char v5 = 3;
  }
  char v8 = v5;
  return sub_1CC277FE0(a1, a2, a3, (uint64_t)&v7, a5);
}

llvm::Instruction *LLVMBuildIntCast2(uint64_t a1, llvm::CastInst *a2, llvm::Type ***a3, int a4, unsigned char *a5, llvm::Instruction *a6)
{
  char v6 = 1;
  char v10 = 1;
  if (*a5)
  {
    char v8 = a5;
    char v6 = 3;
  }
  char v9 = v6;
  return sub_1CBF56614(a1, a2, a3, (llvm::Type *)(a4 != 0), (uint64_t)&v8, a6);
}

llvm::Instruction *LLVMBuildIntCast(uint64_t a1, llvm::CastInst *a2, llvm::Type ***a3, unsigned char *a4, uint64_t a5, llvm::Instruction *a6)
{
  char v6 = 1;
  char v10 = 1;
  if (*a4)
  {
    char v8 = a4;
    char v6 = 3;
  }
  char v9 = v6;
  return sub_1CBF56614(a1, a2, a3, (llvm::Type *)1, (uint64_t)&v8, a6);
}

llvm::CastInst *LLVMBuildFPCast(uint64_t a1, llvm::CastInst *a2, llvm::Type ***a3, unsigned char *a4, llvm::Instruction *a5)
{
  char v5 = 1;
  char v9 = 1;
  if (*a4)
  {
    uint64_t v7 = a4;
    char v5 = 3;
  }
  char v8 = v5;
  return sub_1CD5AB5DC(a1, a2, a3, (uint64_t)&v7, a5);
}

llvm::Instruction *LLVMBuildICmp(uint64_t a1, __int16 a2, void *a3, uint64_t a4, unsigned char *a5)
{
  char v5 = 1;
  char v9 = 1;
  if (*a5)
  {
    uint64_t v7 = a5;
    char v5 = 3;
  }
  char v8 = v5;
  return sub_1CB845F20(a1, a2, a3, a4, (uint64_t)&v7);
}

llvm::Instruction *LLVMBuildFCmp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  char v5 = 1;
  char v9 = 1;
  if (*a5)
  {
    uint64_t v7 = a5;
    char v5 = 3;
  }
  char v8 = v5;
  return llvm::IRBuilderBase::CreateFCmpHelper(a1, a2, a3, a4, (uint64_t)&v7, 0, 0);
}

llvm::Instruction *LLVMBuildPhi(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  char v3 = 1;
  char v7 = 1;
  if (*a3)
  {
    char v5 = a3;
    char v3 = 3;
  }
  char v6 = v3;
  return sub_1CB93113C(a1, a2, 0, (uint64_t)&v5);
}

uint64_t LLVMBuildCall(uint64_t *a1, uint64_t **a2, uint64_t *a3, unsigned int a4, unsigned char *a5)
{
  char v7 = *(uint64_t ***)(*a2)[2];
  char v8 = 1;
  char v12 = 1;
  if (*a5)
  {
    char v10 = a5;
    char v8 = 3;
  }
  char v11 = v8;
  return sub_1CB845BAC(a1, v7, a2, a3, a4, (uint64_t)&v10, 0);
}

uint64_t LLVMBuildCall2(uint64_t *a1, uint64_t **a2, uint64_t **a3, uint64_t *a4, unsigned int a5, unsigned char *a6)
{
  char v6 = 1;
  char v10 = 1;
  if (*a6)
  {
    char v8 = a6;
    char v6 = 3;
  }
  char v9 = v6;
  return sub_1CB845BAC(a1, a2, a3, a4, a5, (uint64_t)&v8, 0);
}

llvm::Value *LLVMBuildSelect(llvm::IRBuilderBase *a1, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, unsigned char *a5)
{
  char v5 = 1;
  char v9 = 1;
  if (*a5)
  {
    char v7 = a5;
    char v5 = 3;
  }
  char v8 = v5;
  return llvm::IRBuilderBase::CreateSelect(a1, a2, a3, a4, (const llvm::Twine *)&v7, 0);
}

llvm::Instruction *LLVMBuildVAArg(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  char v4 = 1;
  char v8 = 1;
  if (*a4)
  {
    char v6 = a4;
    char v4 = 3;
  }
  char v7 = v4;
  return sub_1CD5AB6C8(a1, a2, a3, (uint64_t)&v6);
}

llvm::Instruction *LLVMBuildExtractElement(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned char *a4)
{
  char v4 = 1;
  char v8 = 1;
  if (*a4)
  {
    char v6 = a4;
    char v4 = 3;
  }
  char v7 = v4;
  return sub_1CB8445F4(a1, a2, a3, (uint64_t)&v6);
}

llvm::Instruction *LLVMBuildInsertElement(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned char *a5)
{
  char v5 = 1;
  char v9 = 1;
  if (*a5)
  {
    char v7 = a5;
    char v5 = 3;
  }
  char v8 = v5;
  return sub_1CB84478C(a1, a2, a3, a4, (uint64_t)&v7);
}

llvm::Instruction *LLVMBuildShuffleVector(uint64_t a1, uint64_t a2, uint64_t a3, llvm::Constant *a4, unsigned char *a5)
{
  char v5 = 1;
  char v9 = 1;
  if (*a5)
  {
    char v7 = a5;
    char v5 = 3;
  }
  char v8 = v5;
  return sub_1CD3FAD7C(a1, a2, a3, a4, (uint64_t)&v7);
}

llvm::Instruction *LLVMBuildExtractValue(uint64_t a1, uint64_t *a2, unsigned int a3, unsigned char *a4)
{
  unsigned int v9 = a3;
  char v4 = 1;
  char v8 = 1;
  if (*a4)
  {
    char v6 = a4;
    char v4 = 3;
  }
  char v7 = v4;
  return sub_1CC2415A4(a1, a2, &v9, 1, (uint64_t)&v6);
}

llvm::Instruction *LLVMBuildInsertValue(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned char *a5)
{
  int v10 = a4;
  char v5 = 1;
  char v9 = 1;
  if (*a5)
  {
    char v7 = a5;
    char v5 = 3;
  }
  char v8 = v5;
  return sub_1CC2411F8(a1, a2, a3, &v10, 1, (uint64_t)&v7);
}

llvm::Instruction *LLVMBuildFreeze(uint64_t *a1, llvm::Value *a2, unsigned char *a3)
{
  char v5 = 1;
  char v11 = 1;
  if (*a3)
  {
    char v9 = a3;
    char v5 = 3;
  }
  char v10 = v5;
  char v6 = operator new(0x60uLL);
  v6[13] = v6[13] & 0x38000000 | 1;
  char v7 = (llvm::Instruction *)(v6 + 8);
  *(void *)char v6 = 0;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *((void *)v6 + 3) = v6 + 8;
  __int16 v13 = 257;
  llvm::FreezeInst::FreezeInst((llvm::FreezeInst *)(v6 + 8), a2, &v12, 0);
  return sub_1CB844E0C(a1, v7, (uint64_t)&v9);
}

llvm::Instruction *LLVMBuildIsNull(uint64_t a1, llvm::Constant **a2, const llvm::APFloat *a3)
{
  char v5 = 1;
  char v10 = 1;
  if (*(unsigned char *)a3)
  {
    char v8 = a3;
    char v5 = 3;
  }
  char v9 = v5;
  uint64_t NullValue = llvm::Constant::getNullValue(*a2, (llvm::Type *)a2, a3);
  return sub_1CB845F20(a1, 32, a2, (uint64_t)NullValue, (uint64_t)&v8);
}

llvm::Instruction *LLVMBuildIsNotNull(uint64_t a1, llvm::Constant **a2, const llvm::APFloat *a3)
{
  char v5 = 1;
  char v10 = 1;
  if (*(unsigned char *)a3)
  {
    char v8 = a3;
    char v5 = 3;
  }
  char v9 = v5;
  uint64_t NullValue = llvm::Constant::getNullValue(*a2, (llvm::Type *)a2, a3);
  return sub_1CB845F20(a1, 33, a2, (uint64_t)NullValue, (uint64_t)&v8);
}

llvm::Instruction *LLVMBuildPtrDiff(llvm::IRBuilderBase *a1, llvm::Value *a2, llvm::Value *a3, unsigned char *a4)
{
  char v6 = **(llvm::Type ***)(*(void *)a2 + 16);
  char v7 = 1;
  char v11 = 1;
  if (*a4)
  {
    char v9 = a4;
    char v7 = 3;
  }
  char v10 = v7;
  return llvm::IRBuilderBase::CreatePtrDiff(a1, v6, a2, a3, (const llvm::Twine *)&v9);
}

llvm::Instruction *LLVMBuildPtrDiff2(llvm::IRBuilderBase *a1, llvm::Type *a2, llvm::Value *a3, llvm::Value *a4, unsigned char *a5)
{
  char v5 = 1;
  char v9 = 1;
  if (*a5)
  {
    char v7 = a5;
    char v5 = 3;
  }
  char v8 = v5;
  return llvm::IRBuilderBase::CreatePtrDiff(a1, a2, a3, a4, (const llvm::Twine *)&v7);
}

llvm::Instruction *LLVMBuildAtomicRMW(uint64_t *a1, __int16 a2, uint64_t a3, uint64_t *a4, __int16 a5, int a6)
{
  return sub_1CD5097F8(a1, a2, a3, a4, 0, a5, a6 == 0);
}

llvm::Instruction *LLVMBuildAtomicCmpXchg(uint64_t *a1, uint64_t a2, uint64_t ***a3, uint64_t *a4, __int16 a5, __int16 a6, int a7)
{
  return sub_1CD509648(a1, a2, a3, a4, 0, a5, a6, a7 == 0);
}

uint64_t LLVMGetNumMaskElements(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t LLVMGetMaskValue(uint64_t a1, unsigned int a2)
{
  return *(unsigned int *)(*(void *)(a1 + 64) + 4 * a2);
}

uint64_t LLVMGetUndefMaskElem()
{
  return 0xFFFFFFFFLL;
}

BOOL LLVMIsAtomicSingleThread(uint64_t a1)
{
  return *(unsigned char *)(a1 + 60) == 0;
}

uint64_t LLVMSetAtomicSingleThread(uint64_t result, int a2)
{
  *(unsigned char *)(result + 60) = a2 == 0;
  return result;
}

uint64_t LLVMGetCmpXchgSuccessOrdering(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 18) >> 2) & 7;
}

uint64_t LLVMSetCmpXchgSuccessOrdering(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 18) = *(_WORD *)(result + 18) & 0xFFE3 | (4 * a2);
  return result;
}

uint64_t LLVMGetCmpXchgFailureOrdering(uint64_t a1)
{
  return *(_WORD *)(a1 + 18) >> 5;
}

uint64_t LLVMSetCmpXchgFailureOrdering(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 18) = *(_WORD *)(result + 18) & 0xFF1F | (32 * a2);
  return result;
}

llvm::Module *LLVMDisposeModuleProvider(llvm::Module *result)
{
  if (result)
  {
    llvm::Module::~Module(result);
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

uint64_t LLVMCreateMemoryBufferWithContentsOfFile(unsigned char *a1, void *a2, char **a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  char v5 = 1;
  char v14 = 1;
  if (*a1)
  {
    v12.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
    char v5 = 3;
  }
  char v13 = v5;
  sub_1CD096690((unsigned __int8 *)&v12, (llvm::WritableMemoryBuffer *)0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)&v15);
  if ((v16 & 1) == 0)
  {
    std::system_category();
    uint64_t result = 0;
    uint64_t v7 = *(void *)&v15.__val_;
LABEL_13:
    *a2 = v7;
    return result;
  }
  uint64_t v7 = *(void *)&v15.__val_;
  std::error_code v11 = v15;
  if (!v15.__val_)
  {
    uint64_t result = 0;
    goto LABEL_13;
  }
  std::error_code::message(&v12, &v11);
  int v8 = SHIBYTE(v12.__r_.__value_.__r.__words[2]);
  char v9 = (void *)v12.__r_.__value_.__r.__words[0];
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v10 = &v12;
  }
  else {
    char v10 = (std::string *)v12.__r_.__value_.__r.__words[0];
  }
  *a3 = strdup((const char *)v10);
  if (v8 < 0) {
    operator delete(v9);
  }
  return 1;
}

uint64_t LLVMCreateMemoryBufferWithSTDIN(void *a1, char **a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  llvm::MemoryBuffer::getSTDIN((uint64_t)&v11);
  if ((v12 & 1) == 0)
  {
    std::system_category();
    uint64_t result = 0;
    uint64_t v5 = *(void *)&v11.__val_;
LABEL_11:
    *a1 = v5;
    return result;
  }
  uint64_t v5 = *(void *)&v11.__val_;
  std::error_code v10 = v11;
  if (!v11.__val_)
  {
    uint64_t result = 0;
    goto LABEL_11;
  }
  std::error_code::message(&v9, &v10);
  int v6 = SHIBYTE(v9.__r_.__value_.__r.__words[2]);
  uint64_t v7 = (void *)v9.__r_.__value_.__r.__words[0];
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v8 = &v9;
  }
  else {
    int v8 = (std::string *)v9.__r_.__value_.__r.__words[0];
  }
  *a2 = strdup((const char *)v8);
  if (v6 < 0) {
    operator delete(v7);
  }
  return 1;
}

void *LLVMCreateMemoryBufferWithMemoryRange(uint64_t a1, uint64_t a2, char *__s)
{
  if (__s) {
    size_t v6 = strlen(__s);
  }
  else {
    size_t v6 = 0;
  }
  __int16 v9 = 261;
  v8[0] = __s;
  v8[1] = v6;
  std::error_code v10 = v8;
  uint64_t result = sub_1CD096174((llvm::raw_ostream *)0x18, (uint64_t)&v10);
  *uint64_t result = &unk_1F2644E70;
  result[1] = a1;
  result[2] = a1 + a2;
  return result;
}

uint64_t LLVMCreateMemoryBufferWithMemoryRangeCopy(const void *a1, llvm::WritableMemoryBuffer *a2, char *__s)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (__s) {
    size_t v6 = (const void **)strlen(__s);
  }
  else {
    size_t v6 = 0;
  }
  __int16 v9 = 261;
  v8[0] = (const void **)__s;
  v8[1] = v6;
  sub_1CD0963EC(a2, a1, v8, (uint64_t)&v10);
  if (v11) {
    return 0;
  }
  else {
    return v10;
  }
}

uint64_t LLVMGetBufferStart(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t LLVMGetBufferSize(uint64_t a1)
{
  return *(void *)(a1 + 16) - *(void *)(a1 + 8);
}

uint64_t LLVMDisposeMemoryBuffer(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void LLVMCreatePassManager()
{
}

void LLVMCreateFunctionPassManagerForModule()
{
}

void LLVMCreateFunctionPassManager()
{
}

uint64_t LLVMRunPassManager(uint64_t a1, llvm::Module *a2)
{
  return llvm::legacy::PassManagerImpl::run(*(llvm::legacy::PassManagerImpl **)(a1 + 8), a2);
}

uint64_t LLVMInitializeFunctionPassManager(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), *(void *)(a1 + 16));
}

uint64_t LLVMRunFunctionPassManager(llvm::legacy::FunctionPassManagerImpl **a1, llvm::Module **a2)
{
  return llvm::legacy::FunctionPassManager::run(a1, a2);
}

uint64_t LLVMFinalizeFunctionPassManager(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), *(void *)(a1 + 16));
}

uint64_t LLVMDisposePassManager(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t LLVMStartMultithreaded()
{
  return 1;
}

uint64_t LLVMIsMultithreaded()
{
  return 1;
}

llvm::Instruction *sub_1CC581220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = 0;
  if (*(unsigned __int8 *)(a3 + 16) >= 0x15u) {
    a3 = 0;
  }
  if (*(unsigned __int8 *)(a4 + 16) >= 0x15u) {
    a4 = 0;
  }
  if (a3) {
    BOOL v6 = a4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    return (llvm::Instruction *)v5;
  }
  uint64_t v10 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(a1 + 72) + 184))(*(void *)(a1 + 72));
  uint64_t v5 = v10;
  if (!v10 || v10[16] < 0x1Cu) {
    return (llvm::Instruction *)v5;
  }

  return sub_1CB844E0C((uint64_t *)a1, (llvm::Instruction *)v10, a5);
}

uint64_t ***sub_1CC5812D4(uint64_t *a1, uint64_t a2, const llvm::APInt *a3, int a4, unsigned int a5, uint64_t a6)
{
  v38[2] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *(void *)a1[8];
  uint64_t v12 = *(llvm::ConstantInt **)(v11 + 1960);
  unint64_t v13 = *(unsigned int *)(v11 + 1968);
  unsigned int v36 = v13 >> 8;
  if (v13 >> 8 > 0x40) {
    operator new[]();
  }
  if (v13 <= 0xFF) {
    LODWORD(v14) = 0;
  }
  else {
    unint64_t v14 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v13) + 63);
  }
  uint64_t v35 = (const char *)(v14 & a4);
  char v16 = llvm::ConstantInt::get(v12, (llvm::LLVMContext *)&v35, a3);
  if (v36 >= 0x41 && v35) {
    MEMORY[0x1D25D9CB0](v35, 0x1000C8000313F17);
  }
  v38[0] = (uint64_t)v16;
  uint64_t v17 = *(void *)a1[8];
  uint64_t v18 = a5;
  __int16 v19 = *(llvm::ConstantInt **)(v17 + 1960);
  unint64_t v20 = *(unsigned int *)(v17 + 1968);
  unsigned int v36 = v20 >> 8;
  if (v20 >> 8 > 0x40) {
    operator new[]();
  }
  if (v20 <= 0xFF) {
    unint64_t v21 = 0;
  }
  else {
    unint64_t v21 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v20) + 63);
  }
  uint64_t v35 = (const char *)(v21 & v18);
  uint64_t v22 = llvm::ConstantInt::get(v19, (llvm::LLVMContext *)&v35, v15);
  if (v36 >= 0x41 && v35) {
    MEMORY[0x1D25D9CB0](v35, 0x1000C8000313F17);
  }
  v38[1] = (uint64_t)v22;
  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, const llvm::APInt *, uint64_t *, uint64_t, uint64_t))(*(void *)a1[9] + 48))(a1[9], a2, a3, v38, 2, 1);
  if (v23) {
    return (uint64_t ***)v23;
  }
  __int16 v37 = 257;
  unsigned int v24 = (char *)operator new(0xB0uLL);
  uint64_t v25 = v24;
  uint64_t v26 = 0;
  uint64_t v27 = (uint64_t ***)(v24 + 96);
  *((_DWORD *)v24 + 29) = *((_DWORD *)v24 + 29) & 0x38000000 | 3;
  do
  {
    uint64_t v28 = &v24[v26];
    *(void *)uint64_t v28 = 0;
    *((void *)v28 + 1) = 0;
    *((void *)v28 + 2) = 0;
    *((void *)v28 + 3) = v27;
    v26 += 32;
  }
  while (v26 != 96);
  sub_1CB845A7C(a2, (uint64_t *)a3, (uint64_t)v38, 2);
  *((void *)v25 + 12) = v29;
  *((void *)v25 + 13) = 0;
  unsigned int v30 = *((_DWORD *)v25 + 29) & 0xC0000000 | 3;
  *((_DWORD *)v25 + 28) = 62;
  *((_DWORD *)v25 + 29) = v30;
  *(_OWORD *)(v25 + 120) = 0u;
  *(_OWORD *)(v25 + 136) = 0u;
  *((_DWORD *)v25 + 38) = 0;
  *((void *)v25 + 20) = a2;
  *((void *)v25 + 21) = llvm::GetElementPtrInst::getIndexedType(a2, (uint64_t)v38, 2);
  llvm::GetElementPtrInst::init(v27, (uint64_t **)a3, v38, 2, &v35);
  v25[113] |= 2u;
  (*(void (**)(uint64_t, uint64_t ***, uint64_t, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v27, a6, a1[6], a1[7]);
  uint64_t v31 = *((unsigned int *)a1 + 2);
  if (v31)
  {
    uint64_t v33 = *a1;
    uint64_t v34 = v33 + 16 * v31;
    do
    {
      llvm::Instruction::setMetadata((llvm::Instruction *)v27, *(_DWORD *)v33, *(llvm::MDNode **)(v33 + 8));
      v33 += 16;
    }
    while (v33 != v34);
  }
  return v27;
}

void sub_1CC58168C()
{
}

llvm::LLVMContextImpl **sub_1CC5816C8(llvm::LLVMContextImpl **result, llvm::Constant *a2)
{
  if (result)
  {
    llvm::LLVMContext::~LLVMContext(result, a2);
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

void sub_1CC581708(uint64_t **a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 8) = 0;
  uint64_t v2 = **a1;
  uint64_t v3 = *(void *)(v2 + 48);
  if (v3)
  {
    if (!*(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    char v4 = *(void **)a2;
    *char v4 = 0;
    v4[1] = v3;
    ++*(_DWORD *)(a2 + 8);
  }
  else if ((*(unsigned char *)(v2 + 23) & 0x20) == 0)
  {
    return;
  }

  llvm::Value::getAllMetadata((unsigned char *)v2, a2);
}

unint64_t sub_1CC5817B4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16) == 84
    && (uint64_t v1 = *(void *)(a1 - 32)) != 0
    && !*(unsigned char *)(v1 + 16)
    && *(void *)(v1 + 24) == *(void *)(a1 + 72)
    && (*(unsigned char *)(v1 + 33) & 0x20) != 0
    && (unsigned int v2 = *(_DWORD *)(v1 + 36), v2 <= 0x3A))
  {
    return (0x580000000000000uLL >> v2) & 1;
  }
  else
  {
    return 0;
  }
}

BOOL sub_1CC58180C(uint64_t a1)
{
  return *(unsigned char *)(a1 + 16) == 84
      && (uint64_t v1 = *(void *)(a1 - 32)) != 0
      && !*(unsigned char *)(v1 + 16)
      && *(void *)(v1 + 24) == *(void *)(a1 + 72)
      && (*(unsigned char *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 57;
}

BOOL sub_1CC581858(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16) != 84) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 - 32);
  if (!v1 || *(unsigned char *)(v1 + 16) || *(void *)(v1 + 24) != *(void *)(a1 + 72) || (*(unsigned char *)(v1 + 33) & 0x20) == 0) {
    return 0;
  }
  int v3 = *(_DWORD *)(v1 + 36);
  return v3 == 194 || v3 == 196;
}

BOOL sub_1CC5818AC(uint64_t a1)
{
  return *(unsigned char *)(a1 + 16) == 84
      && (uint64_t v1 = *(void *)(a1 - 32)) != 0
      && !*(unsigned char *)(v1 + 16)
      && *(void *)(v1 + 24) == *(void *)(a1 + 72)
      && (*(unsigned char *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 197;
}

BOOL sub_1CC5818F8(uint64_t a1)
{
  return *(unsigned char *)(a1 + 16) == 84
      && (uint64_t v1 = *(void *)(a1 - 32)) != 0
      && !*(unsigned char *)(v1 + 16)
      && *(void *)(v1 + 24) == *(void *)(a1 + 72)
      && (*(unsigned char *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 199;
}

void sub_1CC581944(uint64_t **a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 8) = 0;
  uint64_t v2 = **a1;
  if (v2) {
    BOOL v3 = *(unsigned __int8 *)(v2 + 16) >= 0x1Cu;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(v2 + 48);
    if (v4)
    {
      if (!*(_DWORD *)(a2 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v5 = *(void **)a2;
      *uint64_t v5 = 0;
      v5[1] = v4;
      ++*(_DWORD *)(a2 + 8);
    }
    else if ((*(unsigned char *)(v2 + 23) & 0x20) == 0)
    {
      return;
    }
  }

  llvm::Value::getAllMetadata((unsigned char *)v2, a2);
}

uint64_t llvm::DIBuilder::DIBuilder(uint64_t a1, void *a2, char a3, uint64_t a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 56) = a1 + 72;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 64) = 0x400000000;
  *(void *)(a1 + 104) = a1 + 120;
  uint64_t v5 = (unsigned __int8 ***)(a1 + 104);
  *(void *)(a1 + 112) = 0x400000000;
  *(void *)(a1 + 152) = a1 + 168;
  *(void *)(a1 + 160) = 0x400000000;
  uint64_t v6 = a1 + 216;
  *(void *)(a1 + 200) = a1 + 216;
  uint64_t v7 = (void **)(a1 + 200);
  *(void *)(a1 + 248) = a1 + 264;
  int v8 = (unsigned __int8 ***)(a1 + 248);
  *(void *)(a1 + 208) = 0x400000000;
  *(void *)(a1 + 256) = 0x400000000;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = a1 + 360;
  *(void *)(a1 + 352) = 0x400000000;
  *(unsigned char *)(a1 + 392) = a3;
  *(_DWORD *)(a1 + 416) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 440) = 0;
  if (a4)
  {
    uint64_t v10 = *(unsigned int *)(a4 + 8);
    uint64_t v11 = *(void *)(a4 - 8 * v10 + 32);
    if (v11)
    {
      uint64_t v12 = *(unsigned int *)(v11 + 8);
      *(_DWORD *)(a1 + 64) = 0;
      if (v12)
      {
        int v13 = v12;
        if (((v12 - 1) & 0x1FFFFFFFFFFFFFFFuLL) >= 4) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v39 = *(void **)(a1 + 56);
        uint64_t v40 = -8 * v12;
        do
        {
          *v39++ = *(void *)(v11 + v40);
          v40 += 8;
        }
        while (v40);
        int v8 = (unsigned __int8 ***)(a1 + 248);
        uint64_t v6 = a1 + 216;
        uint64_t v7 = (void **)(a1 + 200);
        uint64_t v5 = (unsigned __int8 ***)(a1 + 104);
      }
      else
      {
        int v13 = 0;
      }
      *(_DWORD *)(a1 + 64) = v13;
      a4 = *(void *)(a1 + 16);
      uint64_t v14 = -(uint64_t)*(unsigned int *)(a4 + 8);
    }
    else
    {
      uint64_t v14 = -v10;
    }
    uint64_t v15 = *(void *)(a4 + 8 * v14 + 40);
    if (v15)
    {
      uint64_t v27 = *(unsigned int *)(v15 + 8);
      uint64_t v28 = *(unsigned int *)(a1 + 112);
      if (v28)
      {
        uint64_t v47 = 8 * v28;
        uint64_t v48 = *(void *)(a1 + 104) - 8;
        do
        {
          uint64_t v49 = v27;
          uint64_t v50 = v5;
          uint64_t v51 = v6;
          uint64_t v52 = *(unsigned __int8 **)(v48 + v47);
          if (v52) {
            llvm::MetadataTracking::untrack(v48 + v47, v52);
          }
          v47 -= 8;
          uint64_t v6 = v51;
          uint64_t v5 = v50;
          uint64_t v27 = v49;
        }
        while (v47);
      }
      *(_DWORD *)(a1 + 112) = 0;
      if (v27) {
        unint64_t v29 = ((v27 - 1) & 0x1FFFFFFFFFFFFFFFLL) + 1;
      }
      else {
        unint64_t v29 = 0;
      }
      if (v29 > *(unsigned int *)(a1 + 116)) {
        sub_1CD5AF26C();
      }
      int v30 = 0;
      if (v27)
      {
        unsigned int v36 = *v5;
        uint64_t v37 = -8 * v27;
        do
        {
          uint64_t v38 = *(unsigned __int8 **)(v15 + v37);
          *unsigned int v36 = v38;
          if (v38) {
            llvm::MetadataTracking::track((uint64_t)v36, v38, 2);
          }
          ++v36;
          v37 += 8;
        }
        while (v37);
        int v30 = *(_DWORD *)(a1 + 112);
      }
      *(_DWORD *)(a1 + 112) = v30 + v29;
      a4 = *(void *)(a1 + 16);
      uint64_t v14 = -(uint64_t)*(unsigned int *)(a4 + 8);
    }
    uint64_t v16 = *(void *)(a4 + 8 * v14 + 48);
    if (v16)
    {
      int v31 = 0;
      uint64_t v32 = *(unsigned int *)(v16 + 8);
      *(_DWORD *)(a1 + 208) = 0;
      if (v32)
      {
        if (((v32 - 1) & 0x1FFFFFFFFFFFFFFFuLL) >= *(unsigned int *)(a1 + 212)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v41 = *v7;
        uint64_t v42 = -8 * v32;
        do
        {
          *v41++ = *(void *)(v16 + v42);
          v42 += 8;
        }
        while (v42);
        int v31 = v32;
      }
      *(_DWORD *)(a1 + 208) = v31;
      a4 = *(void *)(a1 + 16);
      uint64_t v14 = -(uint64_t)*(unsigned int *)(a4 + 8);
    }
    uint64_t v17 = *(void *)(a4 + 8 * v14 + 56);
    if (v17)
    {
      uint64_t v23 = *(unsigned int *)(v17 + 8);
      uint64_t v24 = *(unsigned int *)(a1 + 256);
      if (v24)
      {
        uint64_t v43 = 8 * v24;
        uint64_t v44 = *(void *)(a1 + 248) - 8;
        do
        {
          uint64_t v45 = v23;
          unint64_t v46 = *(unsigned __int8 **)(v44 + v43);
          if (v46) {
            llvm::MetadataTracking::untrack(v44 + v43, v46);
          }
          v43 -= 8;
          uint64_t v23 = v45;
        }
        while (v43);
      }
      *(_DWORD *)(a1 + 256) = 0;
      if (v23) {
        unint64_t v25 = ((v23 - 1) & 0x1FFFFFFFFFFFFFFFLL) + 1;
      }
      else {
        unint64_t v25 = 0;
      }
      if (v25 > *(unsigned int *)(a1 + 260)) {
        sub_1CD5AF26C();
      }
      int v26 = 0;
      if (v23)
      {
        uint64_t v33 = *v8;
        uint64_t v34 = -8 * v23;
        do
        {
          uint64_t v35 = *(unsigned __int8 **)(v17 + v34);
          *uint64_t v33 = v35;
          if (v35) {
            llvm::MetadataTracking::track((uint64_t)v33, v35, 2);
          }
          ++v33;
          v34 += 8;
        }
        while (v34);
        int v26 = *(_DWORD *)(a1 + 256);
      }
      *(_DWORD *)(a1 + 256) = v26 + v25;
      a4 = *(void *)(a1 + 16);
      uint64_t v14 = -(uint64_t)*(unsigned int *)(a4 + 8);
    }
    uint64_t v18 = *(void *)(a4 + 8 * v14 + 64);
    if (v18)
    {
      __int16 v19 = (uint64_t *)(v18 - 8 * *(unsigned int *)(v18 + 8));
      v53[0] = 0;
      v53[1] = 0;
      int v54 = 0;
      uint64_t v56 = 0;
      uint64_t v57 = 0;
      uint64_t v55 = 0;
      sub_1CD5AF3F0((uint64_t)v53, v19, (uint64_t *)v18);
      uint64_t v58 = 0;
      v59[0] = 0;
      int v60 = 0;
      v59[1] = 0;
      sub_1CBFCB9AC((uint64_t)v59, (uint64_t)v53);
      unint64_t v61 = 0;
      unint64_t v62 = 0;
      uint64_t v63 = 0;
      unint64_t v20 = v55;
      int64_t v21 = v56 - v55;
      if (v56 != v55)
      {
        if (v21 < 0) {
          abort();
        }
        unint64_t v61 = (char *)operator new(v56 - v55);
        unint64_t v62 = v61;
        uint64_t v22 = &v61[8 * (v21 >> 3)];
        uint64_t v63 = v22;
        memmove(v61, v20, v21);
        unint64_t v62 = v22;
      }
      sub_1CD5AF2E0(a1 + 296, &v58, (uint64_t)v59);
      sub_1CD456CB4(v59);
      sub_1CD456CB4(v53);
    }
  }
  return a1;
}

uint64_t llvm::DIBuilder::trackIfUnresolved(uint64_t this, llvm::MDNode *a2)
{
  uint64_t v2 = (unsigned __int8 *)a2;
  if (a2 && ((*((unsigned char *)a2 + 1) & 0x7F) == 2 || *((_DWORD *)a2 + 3))) {
    return sub_1CD5AB7E0((uint64_t *)(this + 344), &v2);
  }
  return this;
}

llvm::MDNode *llvm::DIBuilder::getOrCreateMacroArray(uint64_t a1, void *a2, uint64_t a3)
{
  return llvm::MDTuple::getImpl(*(void *)(a1 + 8), a2, a3, 0, 1);
}

unsigned __int8 *sub_1CC581F48(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, unsigned __int8 *a7, size_t a8, uint64_t a9, uint64_t *a10)
{
  unsigned int v16 = *(_DWORD *)(*a1 + 1000);
  if (a8) {
    uint64_t v17 = llvm::MDString::get(a1, a7, a8);
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t result = (unsigned __int8 *)llvm::DIImportedEntity::getImpl(a1, a2, a3, a4, a5, a6, (uint64_t)v17, a9, 0, 1);
  __int16 v19 = result;
  if (v16 < *(_DWORD *)(*a1 + 1000))
  {
    sub_1CD5AB7E0(a10, &v19);
    return v19;
  }
  return result;
}

unsigned __int8 *llvm::DIBuilder::createImportedModule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  return sub_1CC581F48(*(uint64_t **)(a1 + 8), 58, a2, a3, a4, a5, 0, 0, a6, (uint64_t *)(a1 + 248));
}

{
  return sub_1CC581F48(*(uint64_t **)(a1 + 8), 58, a2, a3, a4, a5, 0, 0, a6, (uint64_t *)(a1 + 248));
}

{
  return sub_1CC581F48(*(uint64_t **)(a1 + 8), 58, a2, a3, a4, a5, 0, 0, a6, (uint64_t *)(a1 + 248));
}

BOOL sub_1CC5820BC(void *a1, uint64_t *a2)
{
  sub_1CD5AF490((uint64_t)v17, (uint64_t)a1, a2);
  int v4 = v18;
  if (v18)
  {
    uint64_t v6 = (uint64_t *)a1[4];
    unint64_t v5 = a1[5];
    if ((unint64_t)v6 >= v5)
    {
      int v8 = (void *)a1[3];
      uint64_t v9 = v6 - v8;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61) {
        abort();
      }
      uint64_t v11 = v5 - (void)v8;
      if (v11 >> 2 > v10) {
        unint64_t v10 = v11 >> 2;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v10;
      }
      if (v12)
      {
        if (v12 >> 61) {
          sub_1CB833614();
        }
        int v13 = (char *)operator new(8 * v12);
      }
      else
      {
        int v13 = 0;
      }
      uint64_t v14 = (uint64_t *)&v13[8 * v9];
      *uint64_t v14 = *a2;
      uint64_t v7 = v14 + 1;
      if (v6 != v8)
      {
        do
        {
          uint64_t v15 = *--v6;
          *--uint64_t v14 = v15;
        }
        while (v6 != v8);
        uint64_t v6 = (uint64_t *)a1[3];
      }
      a1[3] = v14;
      a1[4] = v7;
      a1[5] = &v13[8 * v12];
      if (v6) {
        operator delete(v6);
      }
    }
    else
    {
      *uint64_t v6 = *a2;
      uint64_t v7 = v6 + 1;
    }
    a1[4] = v7;
  }
  return v4 != 0;
}

llvm::MDNode *llvm::DIBuilder::createEnumerator(uint64_t a1, unsigned __int8 *a2, size_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = *(uint64_t **)(a1 + 8);
  unsigned int v11 = 64;
  uint64_t v10 = a4;
  if (a3) {
    uint64_t v7 = llvm::MDString::get(v6, a2, a3);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t Impl = llvm::DIEnumerator::getImpl(v6, (const llvm::APInt *)&v10, a5, (uint64_t)v7, 0, 1);
  if (v11 >= 0x41 && v10) {
    MEMORY[0x1D25D9CB0](v10, 0x1000C8000313F17);
  }
  return Impl;
}

llvm::MDNode *llvm::DIBuilder::createStringType(uint64_t a1, unsigned __int8 *a2, void *a3, uint64_t a4)
{
  unint64_t v5 = *(void **)(a1 + 8);
  if (a3) {
    a3 = llvm::MDString::get(*(uint64_t **)(a1 + 8), a2, (size_t)a3);
  }
  return llvm::DIStringType::getImpl(v5, 18, (uint64_t)a3, 0, 0, 0, a4, 0, 0, 0, 1);
}

llvm::MDNode *llvm::DIBuilder::createStringType(uint64_t a1, unsigned __int8 *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void **)(a1 + 8);
  if (a3) {
    a3 = llvm::MDString::get(*(uint64_t **)(a1 + 8), a2, (size_t)a3);
  }
  return llvm::DIStringType::getImpl(v7, 18, (uint64_t)a3, a4, 0, a5, 0, 0, 0, 0, 1);
}

{
  void *v7;

  uint64_t v7 = *(void **)(a1 + 8);
  if (a3) {
    a3 = llvm::MDString::get(*(uint64_t **)(a1 + 8), a2, (size_t)a3);
  }
  return llvm::DIStringType::getImpl(v7, 18, (uint64_t)a3, 0, a4, a5, 0, 0, 0, 0, 1);
}

uint64_t llvm::DIBuilder::createFriend(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return llvm::DIDerivedType::getImpl(*(void **)(a1 + 8), 42, 0, 0, 0, a2, a3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
}

uint64_t llvm::DIBuilder::createVariantMemberType(uint64_t a1, llvm::Value *a2, unsigned __int8 *a3, size_t a4, uint64_t a5, int a6, uint64_t a7, int a8, uint64_t a9, llvm::ValueAsMetadata *a10, int a11, uint64_t a12)
{
  if (a2)
  {
    if (*(unsigned char *)a2 == 16) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = (uint64_t)a2;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  uint64_t v17 = *(uint64_t **)(a1 + 8);
  if (a10) {
    uint64_t v18 = llvm::ValueAsMetadata::get(a10, a2);
  }
  else {
    uint64_t v18 = 0;
  }
  if (a4) {
    __int16 v19 = llvm::MDString::get(v17, a3, a4);
  }
  else {
    __int16 v19 = 0;
  }
  return llvm::DIDerivedType::getImpl(v17, 13, (uint64_t)v19, a5, a6, v16, a12, a7, a8, a9, 0, 0, a11, v18, 0, 0, 1);
}

uint64_t llvm::DIBuilder::createClassType(uint64_t a1, unsigned char *a2, unsigned __int8 *a3, size_t a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, uint64_t a9, unsigned int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned __int8 *a15, size_t a16)
{
  uint64_t v17 = *(uint64_t **)(a1 + 8);
  if (a2)
  {
    if (*a2 == 16) {
      uint64_t v18 = 0;
    }
    else {
      uint64_t v18 = (uint64_t)a2;
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  uint64_t v19 = sub_1CD5AED54(v17, 19, a3, a4, a5, a6, v18, a11, a7, a8, a9, a10, a12, 0, a13, a14, a15, a16, 0,
          0,
          0,
          0,
          0,
          0,
          0,
          1);
  uint64_t v20 = v19;
  uint64_t v22 = (unsigned __int8 *)v19;
  if (v19 && ((*(unsigned char *)(v19 + 1) & 0x7F) == 2 || *(_DWORD *)(v19 + 12))) {
    sub_1CD5AB7E0((uint64_t *)(a1 + 344), &v22);
  }
  return v20;
}

uint64_t llvm::DIBuilder::createUnionType(uint64_t a1, unsigned char *a2, unsigned __int8 *a3, size_t a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, int a11, unsigned __int8 *a12, size_t a13)
{
  uint64_t v14 = *(uint64_t **)(a1 + 8);
  if (a2)
  {
    if (*a2 == 16) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = (uint64_t)a2;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v16 = sub_1CD5AED54(v14, 23, a3, a4, a5, a6, v15, 0, a7, a8, 0, a9, a10, a11, 0, 0, a12, a13, 0,
          0,
          0,
          0,
          0,
          0,
          0,
          1);
  uint64_t v17 = v16;
  uint64_t v19 = (unsigned __int8 *)v16;
  if (v16 && ((*(unsigned char *)(v16 + 1) & 0x7F) == 2 || *(_DWORD *)(v16 + 12))) {
    sub_1CD5AB7E0((uint64_t *)(a1 + 344), &v19);
  }
  return v17;
}

uint64_t llvm::DIBuilder::createVariantPart(uint64_t a1, unsigned char *a2, unsigned __int8 *a3, size_t a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, unint64_t a10, uint64_t a11, unsigned __int8 *a12, size_t a13)
{
  uint64_t v14 = *(uint64_t **)(a1 + 8);
  if (a2)
  {
    if (*a2 == 16) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = (uint64_t)a2;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v16 = sub_1CD5AED54(v14, 51, a3, a4, a5, a6, v15, 0, a7, a8, 0, a9, a11, 0, 0, 0, a12, a13, a10,
          0,
          0,
          0,
          0,
          0,
          0,
          1);
  uint64_t v17 = v16;
  uint64_t v19 = (unsigned __int8 *)v16;
  if (v16 && ((*(unsigned char *)(v16 + 1) & 0x7F) == 2 || *(_DWORD *)(v16 + 12))) {
    sub_1CD5AB7E0((uint64_t *)(a1 + 344), &v19);
  }
  return v17;
}

uint64_t llvm::DIBuilder::createSetType(uint64_t a1, unsigned char *a2, unsigned __int8 *a3, size_t a4, uint64_t a5, int a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t v14 = *(void **)(a1 + 8);
  if (a2)
  {
    if (*a2 == 16) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = (uint64_t)a2;
    }
    if (a4) {
      goto LABEL_6;
    }
LABEL_8:
    uint64_t v16 = 0;
    goto LABEL_9;
  }
  uint64_t v15 = 0;
  if (!a4) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v16 = llvm::MDString::get(*(uint64_t **)(a1 + 8), a3, a4);
LABEL_9:
  uint64_t Impl = llvm::DIDerivedType::getImpl(v14, 32, (uint64_t)v16, a5, a6, v15, a9, a7, a8, 0, 0, 0, 0, 0, 0, 0, 1);
  uint64_t v18 = Impl;
  uint64_t v20 = (unsigned __int8 *)Impl;
  if (Impl && ((*(unsigned char *)(Impl + 1) & 0x7F) == 2 || *(_DWORD *)(Impl + 12))) {
    sub_1CD5AB7E0((uint64_t *)(a1 + 344), &v20);
  }
  return v18;
}

llvm::MDNode *llvm::DIBuilder::createArtificialSubprogram(llvm::DIBuilder *this, llvm::DISubprogram *a2)
{
  int v2 = *((_DWORD *)this + 10) | 0x40;
  sub_1CC582EF0(this, (uint64_t *)&v7);
  BOOL v3 = v7;
  *((_DWORD *)v7 + 10) = v2;
  uint64_t v7 = 0;
  llvm::MDNode::dropReplaceableUses((uint64_t)v3);
  llvm::MDNode::storeDistinctInContext(v3);
  unint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5) {
    llvm::MDNode::deleteTemporary(v5, v4);
  }
  return v3;
}

llvm::MDNode *llvm::DIBuilder::createArtificialType(llvm::MDNode *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *((_DWORD *)result + 7);
  if ((v8 & 0x40) == 0)
  {
    int v9 = v8 | 0x40;
    llvm::MDNode::clone(result, a3, a4, a5, a6, a7, a8, (uint64_t *)&v11);
    uint64_t v10 = v11;
    *((_DWORD *)v11 + 7) = v9;
    return llvm::MDNode::replaceWithUniquedImpl(v10);
  }
  return result;
}

llvm::MDNode *llvm::DIBuilder::getOrCreateSubrange(llvm::DIBuilder *this, unint64_t a2, const llvm::APInt *a3)
{
  Signed = (llvm::ValueAsMetadata *)llvm::ConstantInt::getSigned((llvm::ConstantInt *)(**((void **)this + 1) + 1984), a2, a3);
  uint64_t v7 = llvm::ValueAsMetadata::get(Signed, v6);
  int v9 = (llvm::ValueAsMetadata *)llvm::ConstantInt::getSigned((llvm::ConstantInt *)(**((void **)this + 1) + 1984), (unint64_t)a3, v8);
  uint64_t v11 = llvm::ValueAsMetadata::get(v9, v10);
  unint64_t v12 = (void *)*((void *)this + 1);

  return llvm::DISubrange::getImpl(v12, v11, v7, 0, 0, 0, 1);
}

llvm::MDNode *llvm::DIBuilder::getOrCreateSubrange(llvm::DIBuilder *this, unint64_t a2, llvm::Metadata *a3)
{
  Signed = (llvm::ValueAsMetadata *)llvm::ConstantInt::getSigned((llvm::ConstantInt *)(**((void **)this + 1) + 1984), a2, a3);
  uint64_t v7 = llvm::ValueAsMetadata::get(Signed, v6);
  int v8 = (void *)*((void *)this + 1);

  return llvm::DISubrange::getImpl(v8, (uint64_t)a3, v7, 0, 0, 0, 1);
}

llvm::MDNode *llvm::DIBuilder::getOrCreateGenericSubrange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return llvm::DIGenericSubrange::getImpl(*(void **)(a1 + 8), a2 & 0xFFFFFFFFFFFFFFF8, a3 & 0xFFFFFFFFFFFFFFF8, a4 & 0xFFFFFFFFFFFFFFF8, a5 & 0xFFFFFFFFFFFFFFF8, 0, 1);
}

unsigned __int8 *sub_1CC582A74(uint64_t *a1, uint64_t a2, unsigned char *a3, unsigned __int8 *a4, size_t a5, int a6, uint64_t a7, int a8, uint64_t a9, char a10, int a11, int a12, uint64_t a13)
{
  if (a3)
  {
    if (*a3 == 16) {
      uint64_t v17 = 0;
    }
    else {
      uint64_t v17 = (uint64_t)a3;
    }
  }
  else
  {
    uint64_t v17 = 0;
  }
  if (a5) {
    uint64_t v18 = llvm::MDString::get(a1, a4, a5);
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t Impl = (unsigned __int8 *)llvm::DILocalVariable::getImpl(a1, v17, (uint64_t)v18, a7, a8, a9, a6, a11, a12, a13, 0, 1);
  uint64_t v27 = Impl;
  if (a10)
  {
    uint64_t v21 = (uint64_t)a3;
    if (a3)
    {
      int v22 = *a3;
      if ((v22 - 17) > 2)
      {
        uint64_t v21 = 0;
      }
      else
      {
        while ((v22 & 0xFE) == 0x12)
        {
          uint64_t v21 = *(void *)(v21 - 8 * *(unsigned int *)(v21 + 8) + 8);
          LOBYTE(v22) = *(unsigned char *)v21;
        }
      }
    }
    uint64_t v26 = v21;
    uint64_t v23 = sub_1CD5AF520(a2, &v26);
    sub_1CD5AD280((uint64_t)(v23 + 1), &v27);
  }
  return Impl;
}

llvm::MDNode *llvm::DIBuilder::createCommonBlock(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, size_t a5, uint64_t a6, int a7)
{
  uint64_t v11 = *(void **)(a1 + 8);
  if (a5) {
    unint64_t v12 = llvm::MDString::get(*(uint64_t **)(a1 + 8), a4, a5);
  }
  else {
    unint64_t v12 = 0;
  }

  return llvm::DICommonBlock::getImpl(v11, a2, a3, (uint64_t)v12, a6, a7, 0, 1);
}

uint64_t llvm::DIBuilder::insertLabel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (a4) {
    a4 = *(void *)(a4 + 40);
  }
  return llvm::DIBuilder::insertLabel(a1, a2, a3, a4, v4);
}

{
  return llvm::DIBuilder::insertLabel(a1, a2, a3, a4, 0);
}

uint64_t llvm::DIBuilder::insertDbgValueIntrinsic(uint64_t a1, llvm::ValueAsMetadata *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return llvm::DIBuilder::insertDbgValueIntrinsic(a1, a2, a3, a4, a5, a6, 0);
}

{
  uint64_t v6;

  uint64_t v6 = a6;
  if (a6) {
    a6 = *(void *)(a6 + 40);
  }
  return llvm::DIBuilder::insertDbgValueIntrinsic(a1, a2, a3, a4, a5, a6, v6);
}

uint64_t llvm::DIBuilder::insertDbgAddrIntrinsic(uint64_t a1, llvm::ValueAsMetadata *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a6;
  if (a6) {
    a6 = *(void *)(a6 + 40);
  }
  return llvm::DIBuilder::insertDbgAddrIntrinsic(a1, a2, a3, a4, a5, a6, v6);
}

{
  return llvm::DIBuilder::insertDbgAddrIntrinsic(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t llvm::DIBuilder::insertDbgAddrIntrinsic(uint64_t a1, llvm::ValueAsMetadata *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = *(llvm::Value **)(a1 + 48);
  if (!v14)
  {
    uint64_t v15 = *(uint64_t ***)a1;
    llvm::Intrinsic::getType(**(uint64_t ***)a1, 55, 0, 0);
    Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v15, 55, 0, 0);
    llvm::Module::getOrInsertFunction((uint64_t)v15, "llvm.dbg.addr", (const char *)0xD, Type, 0);
    *(void *)(a1 + 48) = v14;
  }

  return llvm::DIBuilder::insertDbgIntrinsic(a1, v14, this, a3, a4, a5, a6, a7);
}

uint64_t sub_1CC582D48(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    *(void *)(a1 + 48) = *(void *)(a4 + 40);
    *(void *)(a1 + 56) = a4 + 24;
    uint64_t v6 = *(unsigned __int8 **)(a4 + 48);
    uint64_t v19 = v6;
    if (v6)
    {
      llvm::MetadataTracking::track((uint64_t)&v19, v6, 2);
      uint64_t v7 = (uint64_t)v19;
    }
    else
    {
      uint64_t v7 = 0;
    }
    sub_1CB8461A4(a1, 0, v7);
    if (v19)
    {
      int v8 = *v19;
      if ((v8 - 4) > 0x1E)
      {
        if ((v8 - 3) >= 0xFFFFFFFE) {
          uint64_t v16 = v19;
        }
        else {
          uint64_t v16 = 0;
        }
        if ((v8 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v10 = (unint64_t)(v16 + 8);
LABEL_35:
          uint64_t v20 = &v19;
          sub_1CC5FA668(v10 + 16, &v20);
          goto LABEL_13;
        }
        if (v8 == 3) {
          *((void *)v19 + 1) = 0;
        }
      }
      else if ((v19[1] & 0x7F) == 2 || *((_DWORD *)v19 + 3))
      {
        uint64_t v9 = *((void *)v19 + 2);
        if ((v9 & 4) != 0)
        {
          unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFF8;
          if (v10) {
            goto LABEL_35;
          }
        }
      }
    }
  }
  else if (a3)
  {
    *(void *)(a1 + 48) = a3;
    *(void *)(a1 + 56) = a3 + 40;
  }
LABEL_13:
  uint64_t v18 = a2;
  if (a2)
  {
    llvm::MetadataTracking::track((uint64_t)&v18, a2, 2);
    uint64_t v11 = (uint64_t)v18;
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t result = sub_1CB8461A4(a1, 0, v11);
  if (v18)
  {
    int v13 = *v18;
    if ((v13 - 4) > 0x1E)
    {
      if ((v13 - 3) >= 0xFFFFFFFE) {
        uint64_t v14 = v18;
      }
      else {
        uint64_t v14 = 0;
      }
      if ((v13 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v15 = (unint64_t)(v14 + 8);
LABEL_26:
        uint64_t v20 = &v18;
        return sub_1CC5FA668(v15 + 16, &v20);
      }
      if (v13 == 3) {
        *((void *)v18 + 1) = 0;
      }
    }
    else if ((v18[1] & 0x7F) == 2 || *((_DWORD *)v18 + 3))
    {
      uint64_t v17 = *((void *)v18 + 2);
      if ((v17 & 4) != 0)
      {
        unint64_t v15 = v17 & 0xFFFFFFFFFFFFFFF8;
        if (v15) {
          goto LABEL_26;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CC582EF0@<X0>(unsigned char *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *((void *)a1 + 2);
  unint64_t v5 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0) {
    unint64_t v5 = (uint64_t *)*v5;
  }
  uint64_t v6 = *((unsigned int *)a1 + 2);
  uint64_t v7 = &a1[-8 * v6];
  uint64_t v8 = v7[2];
  if (v8)
  {
    uint64_t v9 = *(void **)(v8 + 8);
    size_t v12 = *v9;
    unint64_t v10 = (unsigned __int8 *)(v9 + 3);
    size_t v11 = v12;
  }
  else
  {
    size_t v11 = 0;
    unint64_t v10 = 0;
  }
  uint64_t v13 = v7[3];
  if (v13)
  {
    uint64_t v35 = *(void **)(v13 + 8);
    unsigned int v36 = (void *)*v35;
    unint64_t v15 = (unsigned __int8 *)(v35 + 3);
    uint64_t v14 = v36;
  }
  else
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0;
  }
  uint64_t v16 = (void *)v7[1];
  uint64_t v17 = a1;
  if (*a1 != 15) {
    uint64_t v17 = (void *)*v7;
  }
  uint64_t v18 = (void *)v7[4];
  int v19 = *((_DWORD *)a1 + 6);
  int v20 = *((_DWORD *)a1 + 7);
  if (v6 > 8)
  {
    uint64_t v21 = v7[8];
    unsigned int v22 = *((_DWORD *)a1 + 8);
    unsigned int v23 = *((_DWORD *)a1 + 9);
    unsigned int v25 = *((_DWORD *)a1 + 10);
    unsigned int v24 = *((_DWORD *)a1 + 11);
    uint64_t v37 = v7;
    uint64_t v26 = v7[5];
    if (v6 == 9) {
      goto LABEL_11;
    }
    unsigned int v38 = v6;
    uint64_t v28 = v7[9];
    uint64_t v32 = v7[6];
    uint64_t v33 = v7[7];
    if (v38 < 0xB)
    {
      uint64_t v27 = 0;
      uint64_t v29 = 0;
    }
    else
    {
      uint64_t v29 = v37[10];
      if (v38 == 11)
      {
        uint64_t v27 = 0;
      }
      else
      {
        uint64_t v27 = v37[11];
        if (v38 >= 0xD)
        {
          int v30 = (unsigned __int8 *)v37[12];
          if (v30)
          {
            uint64_t v39 = (size_t *)*((void *)v30 + 1);
            size_t v40 = *v39;
            int v30 = (unsigned __int8 *)(v39 + 3);
            size_t v31 = v40;
            goto LABEL_12;
          }
          goto LABEL_21;
        }
      }
    }
    int v30 = 0;
LABEL_21:
    size_t v31 = 0;
    goto LABEL_12;
  }
  uint64_t v21 = 0;
  unsigned int v22 = *((_DWORD *)a1 + 8);
  unsigned int v23 = *((_DWORD *)a1 + 9);
  unsigned int v25 = *((_DWORD *)a1 + 10);
  unsigned int v24 = *((_DWORD *)a1 + 11);
  uint64_t v26 = v7[5];
LABEL_11:
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  int v30 = 0;
  size_t v31 = 0;
  uint64_t v32 = v7[6];
  uint64_t v33 = v7[7];
LABEL_12:
  uint64_t result = sub_1CC583098(v5, v16, v10, v11, v15, v14, v17, v19, v18, v20, v21, __SPAIR64__(v23, v22), __SPAIR64__(v24, v25), v26, v28, v32, v33, v29, v27,
             v30,
             v31,
             2,
             1);
  *a2 = result;
  return result;
}

uint64_t sub_1CC583098(uint64_t *a1, void *a2, unsigned __int8 *a3, size_t a4, unsigned __int8 *a5, void *a6, void *a7, int a8, void *a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unsigned __int8 *a20,size_t a21,int a22,char a23)
{
  if (a4) {
    unsigned int v25 = llvm::MDString::get(a1, a3, a4);
  }
  else {
    unsigned int v25 = 0;
  }
  if (a6)
  {
    uint64_t v28 = a5;
    size_t v31 = v25;
    uint64_t v29 = llvm::MDString::get(a1, v28, (size_t)a6);
    unsigned int v25 = v31;
    a6 = v29;
  }
  if (a21)
  {
    uint64_t v32 = v25;
    uint64_t v26 = llvm::MDString::get(a1, a20, a21);
    unsigned int v25 = v32;
  }
  else
  {
    uint64_t v26 = 0;
  }

  return llvm::DISubprogram::getImpl(a1, a2, (uint64_t)v25, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, (uint64_t)v26, a22,
           a23);
}

void *sub_1CC583220(void **a1, void *a2, uint64_t a3)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492) {
    abort();
  }
  if (0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)) >= 0x249249249249249) {
    unint64_t v8 = 0x492492492492492;
  }
  else {
    unint64_t v8 = v4;
  }
  if (v8)
  {
    if (v8 > 0x492492492492492) {
      sub_1CB833614();
    }
    uint64_t v9 = (char *)operator new(56 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  unint64_t v10 = &v9[56 * v3];
  size_t v11 = &v9[56 * v8];
  *(void *)unint64_t v10 = *a2;
  size_t v12 = v10 + 56;
  sub_1CD46AEB4((uint64_t)(v10 + 8), a3);
  uint64_t v14 = (char *)*a1;
  uint64_t v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
    if (!v13) {
      return v12;
    }
    goto LABEL_16;
  }
  do
  {
    uint64_t v15 = *((void *)v13 - 7);
    v13 -= 56;
    *((void *)v10 - 7) = v15;
    v10 -= 56;
    sub_1CD46AEB4((uint64_t)(v10 + 8), (uint64_t)(v13 + 8));
  }
  while (v13 != v14);
  uint64_t v13 = (char *)*a1;
  uint64_t v16 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v12;
  a1[2] = v11;
  if (v16 != v13)
  {
    do
    {
      uint64_t v17 = v16 - 56;
      sub_1CD456CB4((void *)v16 - 6);
      uint64_t v16 = v17;
    }
    while (v17 != v13);
  }
  if (v13) {
LABEL_16:
  }
    operator delete(v13);
  return v12;
}

uint64_t sub_1CC583388(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v10 = 0;
  uint64_t result = sub_1CC583418(*(void *)a2, *(_DWORD *)(a2 + 16), *a3, &v10);
  uint64_t v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CC5834AC(a2, a3, v10);
    uint64_t v7 = (void *)result;
    *(void *)uint64_t result = *a3;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a2 + 8 * *(unsigned int *)(a2 + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v9;
  *(unsigned char *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_1CC583418(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 8 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v12 = 1;
    }
    else
    {
      char v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -8192;
        }
        if (v10) {
          char v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        uint64_t v6 = (void *)(a1 + 8 * (v11 & v4));
        uint64_t v7 = *v6;
        uint64_t v12 = 1;
        if (*v6 == a3) {
          goto LABEL_14;
        }
      }
      uint64_t v12 = 0;
      if (v8) {
        uint64_t v6 = v8;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v12 = 0;
  }
LABEL_14:
  *a4 = v6;
  return v12;
}

void *sub_1CC5834AC(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CC583564(a1, v6);
  char v8 = 0;
  sub_1CC583418(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CC583564(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC583630(a1, v4, &v4[v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC583630(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v10 = 0;
      uint64_t result = sub_1CC583418(*(void *)v5, *(_DWORD *)(v5 + 16), v9, &v10);
      *uint64_t v10 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

void sub_1CC5836D8(void **a1, void *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    *uint64_t v5 = *a2;
    uint64_t v6 = v5 + 7;
    sub_1CD46AEB4((uint64_t)(v5 + 1), (uint64_t)(a2 + 1));
    goto LABEL_19;
  }
  uint64_t v7 = 0x6DB6DB6DB6DB6DB7 * (((char *)v5 - (unsigned char *)*a1) >> 3);
  unint64_t v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) > 0x492492492492492) {
    abort();
  }
  unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4 - (void)*a1) >> 3);
  if (2 * v9 > v8) {
    unint64_t v8 = 2 * v9;
  }
  if (v9 >= 0x249249249249249) {
    unint64_t v10 = 0x492492492492492;
  }
  else {
    unint64_t v10 = v8;
  }
  if (v10)
  {
    if (v10 > 0x492492492492492) {
      sub_1CB833614();
    }
    uint64_t v11 = (char *)operator new(56 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v12 = &v11[56 * v7];
  uint64_t v13 = &v11[56 * v10];
  *(void *)uint64_t v12 = *a2;
  uint64_t v6 = v12 + 56;
  sub_1CD46AEB4((uint64_t)(v12 + 8), (uint64_t)(a2 + 1));
  uint64_t v15 = (char *)*a1;
  uint64_t v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v12;
    a1[1] = v6;
    a1[2] = v13;
    if (!v14) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  do
  {
    uint64_t v16 = *((void *)v14 - 7);
    v14 -= 56;
    *((void *)v12 - 7) = v16;
    v12 -= 56;
    sub_1CD46AEB4((uint64_t)(v12 + 8), (uint64_t)(v14 + 8));
  }
  while (v14 != v15);
  uint64_t v14 = (char *)*a1;
  uint64_t v17 = (char *)a1[1];
  *a1 = v12;
  a1[1] = v6;
  a1[2] = v13;
  if (v17 != v14)
  {
    do
    {
      uint64_t v18 = v17 - 56;
      sub_1CD456CB4((void *)v17 - 6);
      uint64_t v17 = v18;
    }
    while (v18 != v14);
  }
  if (v14) {
LABEL_18:
  }
    operator delete(v14);
LABEL_19:
  a1[1] = v6;
}

uint64_t sub_1CC583860()
{
  v4.n128_u64[0] = (unint64_t)"Use llvm.dbg.addr for all local variables";
  v4.n128_u64[1] = 41;
  char v2 = 0;
  uint64_t v3 = &v2;
  int v1 = 1;
  sub_1CD5AF0F4(&v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCD8458, &dword_1CB82C000);
}

llvm::StructLayout *llvm::StructLayout::StructLayout(llvm::StructLayout *this, llvm::StructType *a2, const llvm::DataLayout *a3)
{
  *((unsigned char *)this + 8) = 0;
  *(void *)this = 0;
  *((unsigned char *)this + 9) &= ~1u;
  uint64_t v5 = *((_DWORD *)a2 + 3) & 0x7FFFFFFF;
  *((_DWORD *)this + 3) = *((_DWORD *)this + 3) & 0x80000000 | v5;
  if (v5)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 8 * v5;
    do
    {
      uint64_t v11 = *(llvm::Type **)(*((void *)a2 + 2) + v8);
      if ((*((unsigned char *)a2 + 9) & 2) != 0)
      {
        unsigned __int8 Alignment = 0;
      }
      else
      {
        unsigned __int8 Alignment = llvm::DataLayout::getAlignment(a3, *(llvm::Type **)(*((void *)a2 + 2) + v8), 1);
        uint64_t v9 = *(void *)this;
      }
      unsigned __int8 v13 = Alignment;
      if ((v9 & ~(-1 << Alignment)) != 0)
      {
        *((unsigned char *)this + 9) |= 1u;
        uint64_t v9 = (v9 + (1 << Alignment) - 1) & -(1 << Alignment);
        *(void *)this = v9;
      }
      if (Alignment <= *((unsigned __int8 *)this + 8)) {
        unsigned __int8 v13 = *((unsigned char *)this + 8);
      }
      *((unsigned char *)this + 8) = v13;
      *(void *)((char *)this + v8 + 16) = v9;
      unint64_t v14 = (unint64_t)(sub_1CB83544C(a3, v11) + 7) >> 3;
      unint64_t v3 = v3 & 0xFFFFFFFF00000000 | (v15 == 1);
      char v16 = llvm::DataLayout::getAlignment(a3, v11, 1);
      uint64_t v9 = (((1 << v16) + v14 - 1) & -(1 << v16)) + *(void *)this;
      *(void *)this = v9;
      v8 += 8;
    }
    while (v10 != v8);
    char v17 = *((unsigned char *)this + 8);
  }
  else
  {
    uint64_t v9 = 0;
    char v17 = 0;
  }
  if ((v9 & ~(-1 << v17)) != 0)
  {
    *((unsigned char *)this + 9) |= 1u;
    *(void *)this = (v9 + (1 << v17) - 1) & -(1 << v17);
  }
  return this;
}

uint64_t llvm::DataLayout::getABITypeAlign(llvm::DataLayout *this, llvm::Type *a2)
{
  return llvm::DataLayout::getAlignment(this, a2, 1);
}

unint64_t llvm::StructLayout::getElementContainingOffset(llvm::StructLayout *this, unint64_t a2)
{
  int v2 = *((_DWORD *)this + 3);
  unint64_t v3 = v2 & 0x7FFFFFFF;
  if ((v2 & 0x7FFFFFFF) != 0)
  {
    __n128 v4 = (char *)this + 16;
    do
    {
      unint64_t v5 = v3 >> 1;
      uint64_t v6 = &v4[8 * (v3 >> 1)];
      unint64_t v8 = *(void *)v6;
      uint64_t v7 = v6 + 8;
      v3 += ~(v3 >> 1);
      if (v8 > a2) {
        unint64_t v3 = v5;
      }
      else {
        __n128 v4 = v7;
      }
    }
    while (v3);
  }
  else
  {
    __n128 v4 = (char *)this + 16;
  }
  return (unint64_t)(v4 - ((char *)this + 16) - 8) >> 3;
}

unint64_t llvm::LayoutAlignElem::get(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3, int a4)
{
  return ((unint64_t)a2 << 32) & 0xFFFF00FFFFFFFFFFLL | ((unint64_t)a3 << 40) | a1 | (a4 << 8);
}

BOOL llvm::LayoutAlignElem::operator==(unsigned char *a1, uint64_t a2)
{
  if (*(_DWORD *)a2 != *a1 || a1[4] != *(unsigned char *)(a2 + 4)) {
    return 0;
  }
  return (*(_DWORD *)a2 ^ *(_DWORD *)a1) < 0x100 && a1[5] == *(unsigned char *)(a2 + 5);
}

unint64_t llvm::PointerAlignElem::getInBits(uint64_t a1, unsigned __int8 a2, unsigned __int8 a3, uint64_t a4)
{
  return ((unint64_t)a3 << 8) | (a4 << 32) | a2;
}

BOOL llvm::PointerAlignElem::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2
      && *((_DWORD *)a1 + 2) == *((_DWORD *)a2 + 2)
      && a1[1] == a2[1]
      && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1)
      && *((_DWORD *)a1 + 3) == *((_DWORD *)a2 + 3);
}

const char *llvm::DataLayout::getManglingComponent(_DWORD *a1)
{
  int v1 = a1[11];
  if (v1 == 4) {
    return "-m:l";
  }
  if (v1 == 5 || v1 == 8) {
    return "-m:o";
  }
  if (v1 == 1 && a1[9] == 15)
  {
    __n128 v4 = "-m:w";
    unint64_t v5 = "-m:x";
    BOOL v6 = a1[6] == 41;
  }
  else
  {
    __n128 v4 = "-m:e";
    unint64_t v5 = "-m:a";
    BOOL v6 = v1 == 9;
  }
  if (v6) {
    return v5;
  }
  else {
    return v4;
  }
}

void llvm::DataLayout::reset(uint64_t a1, const void *a2, unint64_t a3)
{
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 240) = 0;
  uint64_t v6 = *(void *)(a1 + 376);
  if (v6)
  {
    uint64_t v9 = *(void *)v6;
    uint64_t v10 = *(unsigned int *)(v6 + 16);
    uint64_t v11 = *(void *)v6 + 16 * v10;
    if (*(_DWORD *)(v6 + 8))
    {
      if (v10)
      {
        uint64_t v12 = 16 * v10;
        uint64_t v13 = *(void *)v6;
        while (*(void *)v13 == -4096 || *(void *)v13 == -8192)
        {
          v13 += 16;
          v12 -= 16;
          if (!v12) {
            goto LABEL_35;
          }
        }
      }
      else
      {
        uint64_t v13 = *(void *)v6;
      }
    }
    else
    {
LABEL_35:
      uint64_t v13 = *(void *)v6 + 16 * v10;
    }
    uint64_t v14 = v9 + 16 * v10;
    if (v13 != v14)
    {
      do
      {
        free(*(void **)(v13 + 8));
        uint64_t v15 = v13 + 16;
        uint64_t v13 = v11;
        if (v15 != v11)
        {
          uint64_t v13 = v15;
          while (*(void *)v13 == -4096 || *(void *)v13 == -8192)
          {
            v13 += 16;
            if (v13 == v11)
            {
              uint64_t v13 = v11;
              break;
            }
          }
        }
      }
      while (v13 != v14);
      uint64_t v9 = *(void *)v6;
    }
    MEMORY[0x1D25D9CD0](v9, 8);
    MEMORY[0x1D25D9CE0](v6, 0x1020C405AF6BDC9);
  }
  *(void *)(a1 + 376) = 0;
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  if (*(unsigned char *)(a1 + 9)) {
    *(unsigned char *)(a1 + 9) = 0;
  }
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  if (*(unsigned char *)(a1 + 21)) {
    *(unsigned char *)(a1 + 21) = 0;
  }
  *(void *)(a1 + 24) = 0;
  uint64_t v7 = &dword_1CFAC85B0;
  *(_DWORD *)(a1 + 392) = 0;
  do
  {
    llvm::DataLayout::setAlignment((unsigned int *)a1, *v7, *((unsigned char *)v7 + 4), *((unsigned char *)v7 + 5), *v7 >> 8, &v19);
    if ((void)v19)
    {
      unint64_t v18 = v19;
      *(void *)&long long v19 = 0;
      char v16 = &v18;
      goto LABEL_33;
    }
    v7 += 2;
  }
  while (v7 != (int *)&unk_1CFAC8610);
  uint64_t v8 = *(void *)(a1 + 232);
  if (!*(_DWORD *)(a1 + 240) || *(_DWORD *)(v8 + 8))
  {
    long long v19 = xmmword_1CFAC85A0;
    sub_1CC586E3C((uint64_t *)(a1 + 232), v8, (__n128 *)&v19);
  }
  else
  {
    *(_WORD *)uint64_t v8 = 771;
    *(_DWORD *)(v8 + 4) = 64;
    *(_DWORD *)(v8 + 12) = 64;
  }
  llvm::DataLayout::parseSpecifier(a1, a2, a3, (llvm *)&v19);
  if ((void)v19)
  {
    unint64_t v17 = v19;
    *(void *)&long long v19 = 0;
    char v16 = &v17;
LABEL_33:
    llvm::report_fatal_error((uint64_t *)v16);
  }
}

uint64_t llvm::DataLayout::clear(uint64_t this)
{
  uint64_t v1 = this;
  *(void *)(this + 40) = 0;
  *(_DWORD *)(this + 72) = 0;
  *(_DWORD *)(this + 240) = 0;
  uint64_t v2 = *(void *)(this + 376);
  if (v2)
  {
    uint64_t v3 = *(void *)v2;
    uint64_t v4 = *(unsigned int *)(v2 + 16);
    uint64_t v5 = *(void *)v2 + 16 * v4;
    if (*(_DWORD *)(v2 + 8))
    {
      if (v4)
      {
        uint64_t v6 = 16 * v4;
        uint64_t v7 = *(void *)v2;
        while (*(void *)v7 == -4096 || *(void *)v7 == -8192)
        {
          v7 += 16;
          v6 -= 16;
          if (!v6) {
            goto LABEL_20;
          }
        }
      }
      else
      {
        uint64_t v7 = *(void *)v2;
      }
    }
    else
    {
LABEL_20:
      uint64_t v7 = *(void *)v2 + 16 * v4;
    }
    uint64_t v8 = v3 + 16 * v4;
    if (v7 != v8)
    {
      do
      {
        free(*(void **)(v7 + 8));
        uint64_t v9 = v7 + 16;
        uint64_t v7 = v5;
        if (v9 != v5)
        {
          uint64_t v7 = v9;
          while (*(void *)v7 == -4096 || *(void *)v7 == -8192)
          {
            v7 += 16;
            if (v7 == v5)
            {
              uint64_t v7 = v5;
              break;
            }
          }
        }
      }
      while (v7 != v8);
      uint64_t v3 = *(void *)v2;
    }
    MEMORY[0x1D25D9CD0](v3, 8);
    this = MEMORY[0x1D25D9CE0](v2, 0x1020C405AF6BDC9);
  }
  *(void *)(v1 + 376) = 0;
  return this;
}

unsigned int *llvm::DataLayout::setAlignment@<X0>(unsigned int *a1@<X0>, unsigned int a2@<W1>, unsigned __int8 a3@<W2>, unsigned __int8 a4@<W3>, unsigned int a5@<W4>, void *a6@<X8>)
{
  if (HIBYTE(a5))
  {
    unsigned int v24 = "Invalid bit width, must be a 24bit integer";
    goto LABEL_29;
  }
  if (a4 < a3)
  {
    unsigned int v24 = "Preferred alignment cannot be less than the ABI alignment";
LABEL_29:
    uint64_t v27 = v24;
    __int16 v28 = 259;
    uint64_t v25 = llvm::inconvertibleErrorCode((llvm *)a1);
    sub_1CD4FF4BC(v25, v26, (llvm::Twine *)&v27);
  }
  uint64_t v10 = (_DWORD *)*((void *)a1 + 8);
  uint64_t result = a1 + 16;
  uint64_t v9 = v10;
  uint64_t v11 = result[2];
  uint64_t v12 = v10;
  if (v11)
  {
    uint64_t v12 = v9;
    unint64_t v13 = result[2];
    do
    {
      unint64_t v14 = v13 >> 1;
      uint64_t v15 = &v12[2 * (v13 >> 1)];
      unsigned int v16 = *v15;
      if (v16 < a2 || (v16 <= a2 ? (BOOL v17 = *v15 >> 8 >= a5) : (BOOL v17 = 1), !v17))
      {
        uint64_t v12 = v15 + 2;
        unint64_t v14 = v13 + ~v14;
      }
      unint64_t v13 = v14;
    }
    while (v14);
  }
  unint64_t v18 = &v9[2 * v11];
  if (v12 != v18 && (a2 == *v12 ? (BOOL v19 = *v12 >> 8 == a5) : (BOOL v19 = 0), v19))
  {
    *((unsigned char *)v12 + 4) = a3;
    *((unsigned char *)v12 + 5) = a4;
  }
  else
  {
    unint64_t v20 = ((unint64_t)a3 << 32) & 0xFFFF00FFFFFFFFFFLL | ((unint64_t)a4 << 40) | a2 | (a5 << 8);
    if (v12 == v18)
    {
      if (v11 >= a1[19]) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)&v9[2 * v11] = v20;
      ++a1[18];
    }
    else
    {
      if (v11 >= a1[19]) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v21 = &v9[2 * (((char *)v12 - (char *)v9) >> 3)];
      *(void *)&v9[2 * v11] = *(void *)&v9[2 * v11 - 2];
      uint64_t v22 = a1[18];
      uint64_t v23 = *((void *)a1 + 8) + 8 * v22;
      if ((_WORD *)(v23 - 8) != v21)
      {
        uint64_t result = (unsigned int *)memmove(v21 + 4, v21, v23 - 8 - (void)v21 - 2);
        LODWORD(v22) = a1[18];
      }
      a1[18] = v22 + 1;
      v21[2] = WORD2(v20);
      *(_DWORD *)uint64_t v21 = v20;
    }
  }
  *a6 = 0;
  return result;
}

void llvm::DataLayout::setPointerAlignmentInBits(llvm *a1@<X0>, unsigned int a2@<W1>, unsigned __int8 a3@<W2>, unsigned __int8 a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  if (a4 < a3)
  {
    v20[0].n128_u64[0] = (unint64_t)"Preferred alignment cannot be less than the ABI alignment";
    __int16 v21 = 259;
    uint64_t v18 = llvm::inconvertibleErrorCode(a1);
    sub_1CD4FF4BC(v18, v19, (llvm::Twine *)v20);
  }
  uint64_t v10 = *((void *)a1 + 29);
  uint64_t v8 = (uint64_t *)((char *)a1 + 232);
  uint64_t v9 = v10;
  uint64_t v11 = *((unsigned int *)v8 + 2);
  if (v11)
  {
    uint64_t v12 = v9;
    unint64_t v13 = *((unsigned int *)v8 + 2);
    do
    {
      unint64_t v14 = v13 >> 1;
      uint64_t v15 = v12 + 16 * (v13 >> 1);
      unsigned int v16 = *(_DWORD *)(v15 + 8);
      uint64_t v17 = v15 + 16;
      v13 += ~(v13 >> 1);
      if (v16 < a2) {
        uint64_t v12 = v17;
      }
      else {
        unint64_t v13 = v14;
      }
    }
    while (v13);
  }
  else
  {
    uint64_t v12 = v9;
  }
  if (v12 == v9 + 16 * v11 || *(_DWORD *)(v12 + 8) != a2)
  {
    v20[0].n128_u64[0] = ((unint64_t)a4 << 8) | (a5 << 32) | a3;
    v20[0].n128_u64[1] = a2 | (unint64_t)(a6 << 32);
    sub_1CC586E3C(v8, v12, v20);
  }
  else
  {
    *(unsigned char *)uint64_t v12 = a3;
    *(unsigned char *)(v12 + 1) = a4;
    *(_DWORD *)(v12 + 4) = a5;
    *(_DWORD *)(v12 + 12) = a6;
  }
  *a7 = 0;
}

void llvm::DataLayout::parseSpecifier(uint64_t a1@<X0>, const void *a2@<X1>, unint64_t a3@<X2>, llvm *a4@<X8>)
{
  if (a3 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v5 = a3;
  if (a3 >= 0x17)
  {
    uint64_t v9 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v9 = a3 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (__n128 *)operator new(v9 + 1);
    __dst.n128_u64[1] = v5;
    unint64_t v81 = v10 | 0x8000000000000000;
    __dst.n128_u64[0] = (unint64_t)p_dst;
    goto LABEL_8;
  }
  HIBYTE(v81) = a3;
  p_dst = &__dst;
  if (a3) {
LABEL_8:
  }
    memmove(p_dst, a2, v5);
  p_dst->n128_u8[v5] = 0;
  uint64_t v11 = (void **)(a1 + 208);
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*v11);
  }
  *(__n128 *)uint64_t v11 = __dst;
  *(void *)(a1 + 224) = v81;
  while (v5)
  {
    long long v78 = 0u;
    long long v79 = 0u;
    sub_1CC584E58(a4, (uint64_t)a2, v5, 45, (uint64_t *)&v78);
    if (*(void *)a4) {
      return;
    }
    size_t v5 = *((void *)&v79 + 1);
    a2 = (const void *)v79;
    uint64_t v12 = sub_1CC584E58(a4, v78, *((unint64_t *)&v78 + 1), 58, (uint64_t *)&v78);
    if (*(void *)a4) {
      return;
    }
    uint64_t v13 = *((void *)&v78 + 1);
    if (*((void *)&v78 + 1) == 2)
    {
      unint64_t v14 = (unsigned __int8 *)v78;
      if (*(_WORD *)v78 == 26990)
      {
        unint64_t v15 = *((void *)&v79 + 1);
        while (1)
        {
          sub_1CC584E58(a4, v79, v15, 58, (uint64_t *)&v78);
          if (*(void *)a4) {
            return;
          }
          v73.i32[0] = 0;
          uint64_t v12 = sub_1CC584F34(a4, (unsigned __int8 *)v78, *((uint64_t *)&v78 + 1), &v73);
          if (*(void *)a4) {
            return;
          }
          if (!v73.i32[0]) {
            break;
          }
          unint64_t v16 = *(unsigned int *)(a1 + 392);
          if (v16 >= *(unsigned int *)(a1 + 396)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)(a1 + 384) + 4 * v16) = v73.i32[0];
          ++*(_DWORD *)(a1 + 392);
          unint64_t v15 = *((void *)&v79 + 1);
          if (!*((void *)&v79 + 1)) {
            goto LABEL_96;
          }
        }
        uint64_t v70 = "Address space 0 can never be non-integral";
LABEL_184:
        __dst.n128_u64[0] = (unint64_t)v70;
        __int16 v82 = 259;
        uint64_t v71 = llvm::inconvertibleErrorCode(v12);
        sub_1CD4FF4BC(v71, v72, (llvm::Twine *)&__dst);
      }
    }
    else
    {
      unint64_t v14 = (unsigned __int8 *)v78;
    }
    signed int v17 = (char)*v14;
    uint64_t v18 = *((void *)&v78 + 1) != 0;
    if (*((void *)&v78 + 1)) {
      uint64_t v19 = v14 + 1;
    }
    else {
      uint64_t v19 = v14;
    }
    uint64_t v20 = *((void *)&v78 + 1) - v18;
    *(void *)&long long v78 = v19;
    *((void *)&v78 + 1) -= v18;
    if (v17 <= 96)
    {
      switch(v17)
      {
        case 'A':
          unsigned int v24 = a4;
          uint64_t v25 = a1 + 4;
          goto LABEL_94;
        case 'B':
        case 'C':
        case 'D':
          goto LABEL_176;
        case 'E':
          *(unsigned char *)a1 = 1;
          break;
        case 'F':
          int v41 = (char)*v19;
          if (v41 == 105)
          {
            int v42 = 0;
          }
          else
          {
            if (v41 != 110)
            {
              uint64_t v70 = "Unknown function pointer alignment type in datalayout string";
              goto LABEL_184;
            }
            int v42 = 1;
          }
          *(_DWORD *)(a1 + 24) = v42;
          BOOL v53 = v13 == v18;
          BOOL v54 = v13 != v18;
          if (!v53) {
            ++v19;
          }
          *(void *)&long long v78 = v19;
          *((void *)&v78 + 1) = v20 - v54;
          int8x8_t v73 = 0;
          uint64_t v12 = sub_1CC585090(a4, v19, v20 - v54, (unint64_t *)&v73);
          if (*(void *)a4) {
            return;
          }
          if (v73)
          {
            uint8x8_t v55 = (uint8x8_t)vcnt_s8(v73);
            v55.i16[0] = vaddlv_u8(v55);
            if (v55.u32[0] >= 2uLL) {
              goto LABEL_172;
            }
          }
          int v56 = __clz(*(void *)&v73) ^ 0x3F | 0x100;
          if (v73) {
            __int16 v57 = v56;
          }
          else {
            __int16 v57 = 0;
          }
          *(_WORD *)(a1 + 20) = v57;
          break;
        case 'G':
          unsigned int v24 = a4;
          uint64_t v25 = a1 + 16;
          goto LABEL_94;
        default:
          if (v17 == 80)
          {
            unsigned int v24 = a4;
            uint64_t v25 = a1 + 12;
LABEL_94:
            sub_1CC5851B8(v24, v19, v20, v25);
LABEL_95:
            if (*(void *)a4) {
              return;
            }
          }
          else
          {
            if (v17 != 83)
            {
LABEL_176:
              uint64_t v70 = "Unknown specifier in datalayout string";
              goto LABEL_184;
            }
            int8x8_t v73 = 0;
            uint64_t v12 = sub_1CC585090(a4, v19, v20, (unint64_t *)&v73);
            if (*(void *)a4) {
              return;
            }
            if (v73)
            {
              uint8x8_t v26 = (uint8x8_t)vcnt_s8(v73);
              v26.i16[0] = vaddlv_u8(v26);
              if (v26.u32[0] >= 2uLL)
              {
LABEL_172:
                uint64_t v70 = "Alignment is neither 0 nor a power of 2";
                goto LABEL_184;
              }
            }
            int v27 = __clz(*(void *)&v73) ^ 0x3F | 0x100;
            if (v73) {
              __int16 v28 = v27;
            }
            else {
              __int16 v28 = 0;
            }
            *(_WORD *)(a1 + 8) = v28;
          }
          break;
      }
    }
    else
    {
      switch(v17)
      {
        case 'a':
        case 'f':
        case 'i':
        case 'v':
          v73.i32[0] = 0;
          if (v13 == v18)
          {
            unsigned int v21 = 0;
            BOOL v22 = v17 == 97;
          }
          else
          {
            uint64_t v12 = sub_1CC584F34(a4, v19, v20, &v73);
            if (*(void *)a4) {
              return;
            }
            unsigned int v21 = v73.i32[0];
            BOOL v22 = v17 == 97;
            if (v17 == 97 && v73.i32[0])
            {
              uint64_t v70 = "Sized aggregate specification in datalayout string";
              goto LABEL_184;
            }
          }
          if (!*((void *)&v79 + 1))
          {
            uint64_t v70 = "Missing alignment specification in datalayout string";
            goto LABEL_184;
          }
          sub_1CC584E58(a4, v79, *((unint64_t *)&v79 + 1), 58, (uint64_t *)&v78);
          if (*(void *)a4) {
            return;
          }
          unsigned int v77 = 0;
          uint64_t v12 = sub_1CC585018(a4, (unsigned __int8 *)v78, *((uint64_t *)&v78 + 1), &v77);
          if (*(void *)a4) {
            return;
          }
          unint64_t v30 = v77;
          if (v77) {
            char v31 = 1;
          }
          else {
            char v31 = v22;
          }
          if ((v31 & 1) == 0)
          {
            uint64_t v70 = "ABI alignment specification must be >0 for non-aggregate types";
            goto LABEL_184;
          }
          if (v77 >= 0x10000)
          {
            uint64_t v70 = "Invalid ABI alignment, must be a 16bit integer";
            goto LABEL_184;
          }
          v29.i32[0] = v77;
          uint8x8_t v32 = (uint8x8_t)vcnt_s8(v29);
          v32.i16[0] = vaddlv_u8(v32);
          unsigned int v33 = v32.i32[0];
          if (v77 && v32.i32[0] >= 2u)
          {
            uint64_t v70 = "Invalid ABI alignment, must be a power of 2";
            goto LABEL_184;
          }
          unsigned int v76 = v77;
          unsigned int v34 = v77;
          if (*((void *)&v79 + 1))
          {
            sub_1CC584E58(a4, v79, *((unint64_t *)&v79 + 1), 58, (uint64_t *)&v78);
            if (*(void *)a4) {
              return;
            }
            uint64_t v12 = sub_1CC585018(a4, (unsigned __int8 *)v78, *((uint64_t *)&v78 + 1), &v76);
            if (*(void *)a4) {
              return;
            }
            unsigned int v34 = v76;
            if (HIWORD(v76))
            {
              uint64_t v70 = "Invalid preferred alignment, must be a 16bit integer";
              goto LABEL_184;
            }
            v35.i32[0] = v76;
            uint8x8_t v36 = (uint8x8_t)vcnt_s8(v35);
            v36.i16[0] = vaddlv_u8(v36);
            unsigned int v33 = v36.i32[0];
          }
          if (v34 && v33 >= 2)
          {
            uint64_t v70 = "Invalid preferred alignment, must be a power of 2";
            goto LABEL_184;
          }
          unsigned __int8 v37 = 63 - __clz(v30);
          unsigned __int8 v38 = 63 - __clz(v34);
          if (v30) {
            unsigned __int8 v39 = v37;
          }
          else {
            unsigned __int8 v39 = 0;
          }
          if (v34) {
            unsigned __int8 v40 = v38;
          }
          else {
            unsigned __int8 v40 = 0;
          }
          llvm::DataLayout::setAlignment((unsigned int *)a1, v17, v39, v40, v21, a4);
          goto LABEL_95;
        case 'e':
          *(unsigned char *)a1 = 0;
          break;
        case 'm':
          if (v13 != v18)
          {
            uint64_t v70 = "Unexpected trailing characters after mangling specifier in datalayout string";
            goto LABEL_184;
          }
          if (*((void *)&v79 + 1) != 1)
          {
            if (*((void *)&v79 + 1)) {
              uint64_t v70 = "Unknown mangling specifier in datalayout string";
            }
            else {
              uint64_t v70 = "Expected mangling specifier in datalayout string";
            }
            goto LABEL_184;
          }
          int v43 = *(char *)v79;
          if (v43 <= 108)
          {
            if (v43 == 97)
            {
              int v44 = 7;
              goto LABEL_157;
            }
            if (v43 != 101)
            {
              if (v43 != 108) {
                goto LABEL_183;
              }
              int v44 = 5;
              goto LABEL_157;
            }
            int v58 = 1;
          }
          else
          {
            if (v43 <= 118)
            {
              if (v43 == 109)
              {
                int v44 = 6;
              }
              else
              {
                if (v43 != 111) {
                  goto LABEL_183;
                }
                int v44 = 2;
              }
              goto LABEL_157;
            }
            if (v43 == 119)
            {
              int v44 = 3;
LABEL_157:
              *(_DWORD *)(a1 + 28) = v44;
              break;
            }
            if (v43 != 120)
            {
LABEL_183:
              uint64_t v70 = "Unknown mangling in datalayout string";
              goto LABEL_184;
            }
            int v58 = 4;
          }
          *(_DWORD *)(a1 + 28) = v58;
          break;
        case 'n':
          while (2)
          {
            v73.i32[0] = 0;
            uint64_t v12 = sub_1CC584F34(a4, (unsigned __int8 *)v78, *((uint64_t *)&v78 + 1), &v73);
            if (*(void *)a4) {
              return;
            }
            if (!v73.i32[0])
            {
              uint64_t v70 = "Zero width native integer type in datalayout string";
              goto LABEL_184;
            }
            uint64_t v23 = *(void *)(a1 + 40);
            if ((unint64_t)(v23 + 1) > *(void *)(a1 + 48)) {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
            }
            *(unsigned char *)(*(void *)(a1 + 32) + v23) = v73.i8[0];
            ++*(void *)(a1 + 40);
            if (*((void *)&v79 + 1))
            {
              sub_1CC584E58(a4, v79, *((unint64_t *)&v79 + 1), 58, (uint64_t *)&v78);
              if (*(void *)a4) {
                return;
              }
              continue;
            }
            goto LABEL_96;
          }
        case 'p':
          v73.i32[0] = 0;
          if (v13 == v18)
          {
            unint64_t v45 = 0;
          }
          else
          {
            uint64_t v12 = sub_1CC584F34(a4, v19, v20, &v73);
            if (*(void *)a4) {
              return;
            }
            unint64_t v45 = v73.u32[0];
            if (v73.i8[3])
            {
              uint64_t v70 = "Invalid address space, must be a 24bit integer";
              goto LABEL_184;
            }
          }
          if (!*((void *)&v79 + 1))
          {
            uint64_t v70 = "Missing size specification for pointer in datalayout string";
            goto LABEL_184;
          }
          sub_1CC584E58(a4, v79, *((unint64_t *)&v79 + 1), 58, (uint64_t *)&v78);
          if (*(void *)a4) {
            return;
          }
          unsigned int v77 = 0;
          uint64_t v12 = sub_1CC584F34(a4, (unsigned __int8 *)v78, *((uint64_t *)&v78 + 1), &v77);
          if (*(void *)a4) {
            return;
          }
          uint64_t v46 = v77;
          if (!v77)
          {
            uint64_t v70 = "Invalid pointer size of 0 bytes";
            goto LABEL_184;
          }
          if (!*((void *)&v79 + 1))
          {
            uint64_t v70 = "Missing alignment specification for pointer in datalayout string";
            goto LABEL_184;
          }
          sub_1CC584E58(a4, v79, *((unint64_t *)&v79 + 1), 58, (uint64_t *)&v78);
          if (*(void *)a4) {
            return;
          }
          unsigned int v76 = 0;
          uint64_t v12 = sub_1CC585018(a4, (unsigned __int8 *)v78, *((uint64_t *)&v78 + 1), &v76);
          if (*(void *)a4) {
            return;
          }
          unint64_t v48 = v76;
          v47.i32[0] = v76;
          uint8x8_t v49 = (uint8x8_t)vcnt_s8(v47);
          v49.i16[0] = vaddlv_u8(v49);
          if (v49.i32[0] != 1)
          {
            uint64_t v70 = "Pointer ABI alignment must be a power of 2";
            goto LABEL_184;
          }
          unsigned int v74 = v76;
          unsigned int v75 = v46;
          uint64_t v50 = v46;
          unsigned int v51 = v76;
          if (*((void *)&v79 + 1))
          {
            sub_1CC584E58(a4, v79, *((unint64_t *)&v79 + 1), 58, (uint64_t *)&v78);
            if (*(void *)a4) {
              return;
            }
            uint64_t v12 = sub_1CC585018(a4, (unsigned __int8 *)v78, *((uint64_t *)&v78 + 1), &v74);
            if (*(void *)a4) {
              return;
            }
            unsigned int v51 = v74;
            uint8x8_t v52 = (uint8x8_t)vcnt_s8((int8x8_t)v74);
            v52.i16[0] = vaddlv_u8(v52);
            if (v52.i32[0] != 1)
            {
              uint64_t v70 = "Pointer preferred alignment must be a power of 2";
              goto LABEL_184;
            }
            if (*((void *)&v79 + 1))
            {
              sub_1CC584E58(a4, v79, *((unint64_t *)&v79 + 1), 58, (uint64_t *)&v78);
              if (*(void *)a4) {
                return;
              }
              uint64_t v12 = sub_1CC584F34(a4, (unsigned __int8 *)v78, *((uint64_t *)&v78 + 1), &v75);
              if (*(void *)a4) {
                return;
              }
              uint64_t v50 = v75;
              if (!v75)
              {
                uint64_t v70 = "Invalid index size of 0 bytes";
                goto LABEL_184;
              }
            }
            else
            {
              uint64_t v50 = v46;
            }
          }
          uint64_t v59 = (63 - __clz(v48));
          uint64_t v60 = (63 - __clz(v51));
          if (!v48) {
            uint64_t v59 = 0;
          }
          if (!v51) {
            uint64_t v60 = 0;
          }
          if (v60 < v59)
          {
            __dst.n128_u64[0] = (unint64_t)"Preferred alignment cannot be less than the ABI alignment";
            __int16 v82 = 259;
            uint64_t v68 = llvm::inconvertibleErrorCode(v12);
            sub_1CD4FF4BC(v68, v69, (llvm::Twine *)&__dst);
          }
          uint64_t v61 = *(unsigned int *)(a1 + 240);
          if (v61)
          {
            uint64_t v62 = *(void *)(a1 + 232);
            unint64_t v63 = *(unsigned int *)(a1 + 240);
            do
            {
              unint64_t v64 = v63 >> 1;
              uint64_t v65 = v62 + 16 * (v63 >> 1);
              unint64_t v66 = *(unsigned int *)(v65 + 8);
              uint64_t v67 = v65 + 16;
              v63 += ~(v63 >> 1);
              if (v66 < v45) {
                uint64_t v62 = v67;
              }
              else {
                unint64_t v63 = v64;
              }
            }
            while (v63);
          }
          else
          {
            uint64_t v62 = *(void *)(a1 + 232);
          }
          if (v62 == *(void *)(a1 + 232) + 16 * v61 || *(_DWORD *)(v62 + 8) != v45)
          {
            __dst.n128_u64[0] = (v46 << 32) | (v60 << 8) | v59;
            __dst.n128_u64[1] = v45 | (v50 << 32);
            sub_1CC586E3C((uint64_t *)(a1 + 232), v62, &__dst);
          }
          else
          {
            *(unsigned char *)uint64_t v62 = v59;
            *(unsigned char *)(v62 + 1) = v60;
            *(_DWORD *)(v62 + 4) = v46;
            *(_DWORD *)(v62 + 12) = v50;
          }
          *(void *)a4 = 0;
          break;
        case 's':
          break;
        default:
          goto LABEL_176;
      }
    }
LABEL_96:
    ;
  }
  *(void *)a4 = 0;
}

void llvm::DataLayout::parse(const void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void v18[4] = *MEMORY[0x1E4F143B8];
  __int16 v9 = 0;
  __int16 v10 = 0;
  uint64_t v11 = v13;
  long long v12 = xmmword_1CD96EEC0;
  v13[1] = v14;
  v13[2] = 0x1000000000;
  memset(&v14[128], 0, 24);
  unint64_t v15 = v17;
  uint64_t v16 = 0x800000000;
  char v17[16] = 0;
  v17[17] = v18;
  v17[18] = 0x800000000;
  llvm::DataLayout::reset((uint64_t)v8, "", 0);
  llvm::DataLayout::parseSpecifier((uint64_t)v8, a1, a2, (llvm *)&v7);
  uint64_t v6 = v7;
  if (v7)
  {
    *(unsigned char *)(a3 + 432) |= 1u;
    *(void *)a3 = v6;
  }
  else
  {
    *(unsigned char *)(a3 + 432) &= ~1u;
    *(_WORD *)(a3 + 8) = 0;
    *(_WORD *)(a3 + 20) = 0;
    *(void *)(a3 + 32) = a3 + 56;
    *(_OWORD *)(a3 + 40) = xmmword_1CD96EEC0;
    *(void *)(a3 + 64) = a3 + 80;
    *(void *)(a3 + 72) = 0x1000000000;
    *(void *)(a3 + 208) = 0;
    *(void *)(a3 + 216) = 0;
    *(void *)(a3 + 224) = 0;
    *(void *)(a3 + 232) = a3 + 248;
    *(void *)(a3 + 240) = 0x800000000;
    *(void *)(a3 + 376) = 0;
    *(void *)(a3 + 384) = a3 + 400;
    *(void *)(a3 + 392) = 0x800000000;
    sub_1CB94E404(a3, (uint64_t)v8);
  }
  llvm::DataLayout::~DataLayout((llvm::DataLayout *)v8);
}

llvm *sub_1CC584E58(void *a1, uint64_t a2, unint64_t a3, char a4, uint64_t *a5)
{
  v17[0] = a2;
  v17[1] = a3;
  v15[0] = a4;
  uint64_t result = (llvm *)llvm::StringRef::find(v17, v15, 1uLL, 0);
  if (result == (llvm *)-1)
  {
    *a5 = a2;
    a5[1] = a3;
    a5[2] = 0;
    a5[3] = 0;
  }
  else
  {
    if (a3 >= (unint64_t)result) {
      unint64_t v10 = (unint64_t)result;
    }
    else {
      unint64_t v10 = a3;
    }
    if (a3 >= (unint64_t)result + 1) {
      uint64_t v11 = (char *)result + 1;
    }
    else {
      uint64_t v11 = (char *)a3;
    }
    *a5 = a2;
    a5[1] = v10;
    a5[2] = (uint64_t)&v11[a2];
    a5[3] = a3 - (void)v11;
    if (a3 <= (unint64_t)result + 1)
    {
      if (a3 > (unint64_t)result)
      {
        long long v12 = "Trailing separator in datalayout string";
LABEL_15:
        *(void *)unint64_t v15 = v12;
        __int16 v16 = 259;
        uint64_t v13 = llvm::inconvertibleErrorCode(result);
        sub_1CD4FF4BC(v13, v14, (llvm::Twine *)v15);
      }
    }
    else if (!v10)
    {
      long long v12 = "Expected token before separator in datalayout string";
      goto LABEL_15;
    }
  }
  *a1 = 0;
  return result;
}

llvm *sub_1CC584F34(llvm *result, unsigned __int8 *a2, uint64_t a3, _DWORD *a4)
{
  if (!a3) {
    goto LABEL_15;
  }
  unint64_t v4 = 0;
  do
  {
    int v5 = *a2;
    if ((v5 - 48) >= 0xA)
    {
      if ((v5 - 97) >= 0x1A)
      {
        if ((v5 - 65) > 0x19) {
          goto LABEL_15;
        }
        int v6 = -55;
      }
      else
      {
        int v6 = -87;
      }
    }
    else
    {
      int v6 = -48;
    }
    unsigned int v7 = v6 + v5;
    if (v7 > 9) {
      goto LABEL_15;
    }
    unint64_t v8 = 10 * v4 + v7;
    if (v4 > v8 / 0xA) {
      goto LABEL_15;
    }
    ++a2;
    unint64_t v4 = v8;
    --a3;
  }
  while (a3);
  if (HIDWORD(v8))
  {
LABEL_15:
    uint64_t v11 = "not a number, or does not fit in an unsigned int";
    __int16 v12 = 259;
    uint64_t v9 = llvm::inconvertibleErrorCode(result);
    sub_1CD4FF4BC(v9, v10, (llvm::Twine *)&v11);
  }
  *a4 = v8;
  *(void *)uint64_t result = 0;
  return result;
}

llvm *sub_1CC585018(llvm *a1, unsigned __int8 *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t result = sub_1CC584F34(a1, a2, a3, a4);
  if (!*(void *)a1)
  {
    if ((*a4 & 7) != 0)
    {
      uint64_t v9 = "number of bits must be a byte width multiple";
      __int16 v10 = 259;
      uint64_t v7 = llvm::inconvertibleErrorCode(result);
      sub_1CD4FF4BC(v7, v8, (llvm::Twine *)&v9);
    }
    *a4 >>= 3;
    *(void *)a1 = 0;
  }
  return result;
}

llvm *sub_1CC585090(llvm *result, unsigned __int8 *a2, uint64_t a3, unint64_t *a4)
{
  if (!a3)
  {
LABEL_15:
    v13[0] = "not a number, or does not fit in an unsigned int";
    __int16 v14 = 259;
    uint64_t v9 = llvm::inconvertibleErrorCode(result);
    sub_1CD4FF4BC(v9, v10, (llvm::Twine *)v13);
  }
  unint64_t v4 = 0;
  do
  {
    int v5 = *a2;
    if ((v5 - 48) >= 0xA)
    {
      if ((v5 - 97) >= 0x1A)
      {
        if ((v5 - 65) > 0x19) {
          goto LABEL_15;
        }
        int v6 = -55;
      }
      else
      {
        int v6 = -87;
      }
    }
    else
    {
      int v6 = -48;
    }
    unsigned int v7 = v6 + v5;
    if (v7 > 9) {
      goto LABEL_15;
    }
    unint64_t v8 = 10 * v4 + v7;
    if (v4 > v8 / 0xA) {
      goto LABEL_15;
    }
    ++a2;
    unint64_t v4 = v8;
    --a3;
  }
  while (a3);
  *a4 = v8;
  *(void *)uint64_t result = 0;
  if ((v8 & 7) != 0)
  {
    v13[0] = "number of bits must be a byte width multiple";
    __int16 v14 = 259;
    uint64_t v11 = llvm::inconvertibleErrorCode(result);
    sub_1CD4FF4BC(v11, v12, (llvm::Twine *)v13);
  }
  *a4 = v8 >> 3;
  *(void *)uint64_t result = 0;
  return result;
}

llvm *sub_1CC5851B8(llvm *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_1CC584F34(a1, a2, a3, (_DWORD *)a4);
  if (!*(void *)a1)
  {
    if (*(unsigned char *)(a4 + 3))
    {
      uint64_t v9 = "Invalid address space, must be a 24-bit integer";
      __int16 v10 = 259;
      uint64_t v7 = llvm::inconvertibleErrorCode(result);
      sub_1CD4FF4BC(v7, v8, (llvm::Twine *)&v9);
    }
    *(void *)a1 = 0;
  }
  return result;
}

uint64_t llvm::DataLayout::init(llvm::DataLayout *this, const llvm::Module *a2)
{
  return sub_1CB94E404((uint64_t)this, (uint64_t)a2 + 272);
}

uint64_t llvm::DataLayout::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2 || *((_DWORD *)a1 + 1) != *((_DWORD *)a2 + 1)) {
    return 0;
  }
  int v4 = a2[9];
  if (a1[9]) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    if ((a1[9] == 0) == (v4 != 0)) {
      return 0;
    }
  }
  else if (a1[8] != a2[8])
  {
    return 0;
  }
  if (*((_DWORD *)a1 + 3) != *((_DWORD *)a2 + 3) || *((_DWORD *)a1 + 4) != *((_DWORD *)a2 + 4)) {
    return 0;
  }
  if (a1[21] && a2[21])
  {
    if (a1[20] != a2[20]) {
      return 0;
    }
  }
  else if ((a1[21] == 0) == (a2[21] != 0))
  {
    return 0;
  }
  if (*((_DWORD *)a1 + 6) != *((_DWORD *)a2 + 6)) {
    return 0;
  }
  if (*((_DWORD *)a1 + 7) != *((_DWORD *)a2 + 7)) {
    return 0;
  }
  size_t v7 = *((void *)a1 + 5);
  if (v7 != *((void *)a2 + 5)
    || memcmp(*((const void **)a1 + 4), *((const void **)a2 + 4), v7)
    || !sub_1CC585380((uint64_t *)a1 + 8, (uint64_t *)a2 + 8))
  {
    return 0;
  }

  return sub_1CC5853F8((unsigned __int8 **)a1 + 29, (unsigned __int8 **)a2 + 29);
}

uint64_t sub_1CC585380(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *((unsigned int *)a1 + 2);
  if (v2 == *((_DWORD *)a2 + 2))
  {
    if (!v2) {
      return 1;
    }
    uint64_t v3 = *a1;
    uint64_t v4 = *a1 + 8 * v2;
    for (uint64_t i = *a2;
          *(_DWORD *)i == *(unsigned char *)v3 && *(unsigned __int8 *)(v3 + 4) == *(unsigned __int8 *)(i + 4);
          i += 8)
    {
      if ((*(_DWORD *)i ^ *(_DWORD *)v3) > 0xFF
        || *(unsigned __int8 *)(v3 + 5) != *(unsigned __int8 *)(i + 5))
      {
        break;
      }
      v3 += 8;
      if (v3 == v4) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_1CC5853F8(unsigned __int8 **a1, unsigned __int8 **a2)
{
  uint64_t v2 = *((unsigned int *)a1 + 2);
  if (v2 == *((_DWORD *)a2 + 2))
  {
    if (!v2) {
      return 1;
    }
    uint64_t v3 = *a1;
    uint64_t v4 = (uint64_t)&(*a1)[16 * v2];
    for (uint64_t i = *a2;
          *v3 == *i
       && *((_DWORD *)v3 + 2) == *((_DWORD *)i + 2)
       && v3[1] == i[1]
       && *((_DWORD *)v3 + 1) == *((_DWORD *)i + 1)
       && *((_DWORD *)v3 + 3) == *((_DWORD *)i + 3);
          i += 16)
    {
      v3 += 16;
      if (v3 == (unsigned __int8 *)v4) {
        return 1;
      }
    }
  }
  return 0;
}

_DWORD *llvm::DataLayout::findAlignmentLowerBound(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result = *(_DWORD **)(a1 + 64);
  unint64_t v5 = *(unsigned int *)(a1 + 72);
  if (v5)
  {
    do
    {
      unint64_t v6 = v5 >> 1;
      size_t v7 = &result[2 * (v5 >> 1)];
      unsigned int v8 = *v7;
      if (v8 < a2 || (v8 <= a2 ? (BOOL v9 = *v7 >> 8 >= a3) : (BOOL v9 = 1), !v9))
      {
        uint64_t result = v7 + 2;
        unint64_t v6 = v5 + ~v6;
      }
      unint64_t v5 = v6;
    }
    while (v6);
  }
  return result;
}

uint64_t llvm::DataLayout::getPointerAlignElem(llvm::DataLayout *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 29);
  if (!a2) {
    return v2;
  }
  unint64_t v3 = *((unsigned int *)this + 60);
  uint64_t result = *((void *)this + 29);
  if (v3)
  {
    uint64_t result = v2;
    unint64_t v5 = v3;
    do
    {
      unint64_t v6 = v5 >> 1;
      uint64_t v7 = result + 16 * (v5 >> 1);
      unsigned int v8 = *(_DWORD *)(v7 + 8);
      uint64_t v9 = v7 + 16;
      v5 += ~(v5 >> 1);
      if (v8 < a2) {
        uint64_t result = v9;
      }
      else {
        unint64_t v5 = v6;
      }
    }
    while (v5);
  }
  if (result == v2 + 16 * v3 || *(_DWORD *)(result + 8) != a2) {
    return v2;
  }
  return result;
}

uint64_t llvm::DataLayout::getIntegerAlignment(llvm::DataLayout *this, unsigned int a2, int a3)
{
  uint64_t v3 = *((unsigned int *)this + 18);
  if (v3)
  {
    uint64_t v4 = (unsigned char *)*((void *)this + 8);
    unint64_t v5 = *((unsigned int *)this + 18);
    do
    {
      unint64_t v6 = v5 >> 1;
      uint64_t v7 = &v4[8 * (v5 >> 1)];
      unsigned int v8 = *v7;
      if (v8 < 0x69 || (v8 == 105 ? (BOOL v9 = *v7 >> 8 >= a2) : (BOOL v9 = 1), !v9))
      {
        uint64_t v4 = v7 + 2;
        unint64_t v6 = v5 + ~v6;
      }
      unint64_t v5 = v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v4 = (unsigned char *)*((void *)this + 8);
  }
  if (v4 == (unsigned char *)(*((void *)this + 8) + 8 * v3) || *v4 != 105) {
    v4 -= 8;
  }
  uint64_t v10 = 4;
  if (!a3) {
    uint64_t v10 = 5;
  }
  return v4[v10];
}

void llvm::DataLayout::~DataLayout(llvm::DataLayout *this)
{
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_DWORD *)this + 60) = 0;
  uint64_t v2 = *((void *)this + 47);
  if (v2)
  {
    uint64_t v7 = *(void *)v2;
    uint64_t v8 = *(unsigned int *)(v2 + 16);
    uint64_t v9 = *(void *)v2 + 16 * v8;
    if (*(_DWORD *)(v2 + 8))
    {
      if (v8)
      {
        uint64_t v10 = 16 * v8;
        uint64_t v11 = *(void *)v2;
        while (*(void *)v11 == -4096 || *(void *)v11 == -8192)
        {
          v11 += 16;
          v10 -= 16;
          if (!v10) {
            goto LABEL_30;
          }
        }
      }
      else
      {
        uint64_t v11 = *(void *)v2;
      }
    }
    else
    {
LABEL_30:
      uint64_t v11 = *(void *)v2 + 16 * v8;
    }
    uint64_t v12 = v7 + 16 * v8;
    if (v11 != v12)
    {
      do
      {
        free(*(void **)(v11 + 8));
        uint64_t v13 = v11 + 16;
        uint64_t v11 = v9;
        if (v13 != v9)
        {
          uint64_t v11 = v13;
          while (*(void *)v11 == -4096 || *(void *)v11 == -8192)
          {
            v11 += 16;
            if (v11 == v9)
            {
              uint64_t v11 = v9;
              break;
            }
          }
        }
      }
      while (v11 != v12);
      uint64_t v7 = *(void *)v2;
    }
    MEMORY[0x1D25D9CD0](v7, 8);
    MEMORY[0x1D25D9CE0](v2, 0x1020C405AF6BDC9);
  }
  *((void *)this + 47) = 0;
  uint64_t v3 = (char *)*((void *)this + 48);
  if (v3 != (char *)this + 400) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 29);
  if (v4 != (char *)this + 248) {
    free(v4);
  }
  if (*((char *)this + 231) < 0) {
    operator delete(*((void **)this + 26));
  }
  unint64_t v5 = (char *)*((void *)this + 8);
  if (v5 != (char *)this + 80) {
    free(v5);
  }
  unint64_t v6 = (char *)*((void *)this + 4);
  if (v6 != (char *)this + 56) {
    free(v6);
  }
}

llvm::StructLayout *llvm::DataLayout::getStructLayout(llvm::DataLayout *this, llvm::StructType *a2)
{
  uint64_t v4 = *((void *)this + 47);
  if (!v4) {
    operator new();
  }
  uint64_t v5 = *(void *)v4;
  int v6 = *(_DWORD *)(v4 + 16);
  uint64_t v18 = a2;
  if (v6)
  {
    int v7 = v6 - 1;
    unsigned int v8 = v7 & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v9 = (llvm::StructType **)(v5 + 16 * v8);
    uint64_t v10 = *v9;
    if (*v9 == a2) {
      goto LABEL_4;
    }
    uint64_t v12 = 0;
    int v13 = 1;
    while (v10 != (llvm::StructType *)-4096)
    {
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v10 == (llvm::StructType *)-8192;
      }
      if (v14) {
        uint64_t v12 = v9;
      }
      unsigned int v15 = v8 + v13++;
      unsigned int v8 = v15 & v7;
      uint64_t v9 = (llvm::StructType **)(v5 + 16 * v8);
      uint64_t v10 = *v9;
      if (*v9 == a2) {
        goto LABEL_4;
      }
    }
    if (v12) {
      signed int v17 = v12;
    }
    else {
      signed int v17 = v9;
    }
  }
  else
  {
    signed int v17 = 0;
  }
  uint64_t v9 = (llvm::StructType **)sub_1CC586D08(v4, (uint64_t)&v18, (uint64_t *)&v18, v17);
  *uint64_t v9 = v18;
  v9[1] = 0;
LABEL_4:
  uint64_t result = v9[1];
  if (!result)
  {
    __int16 v16 = (llvm::StructLayout *)malloc_type_malloc(8 * *((unsigned int *)a2 + 3) + 16, 0x4065EBACuLL);
    if (!v16) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v9[1] = v16;
    return llvm::StructLayout::StructLayout(v16, a2, this);
  }
  return result;
}

unint64_t llvm::DataLayout::getPointerSize(llvm::DataLayout *this, unsigned int a2)
{
  if (!a2) {
    goto LABEL_2;
  }
  uint64_t v4 = *((unsigned int *)this + 60);
  uint64_t v2 = *((void *)this + 29);
  if (v4)
  {
    uint64_t v2 = *((void *)this + 29);
    unint64_t v5 = *((unsigned int *)this + 60);
    do
    {
      unint64_t v6 = v5 >> 1;
      uint64_t v7 = v2 + 16 * (v5 >> 1);
      unsigned int v8 = *(_DWORD *)(v7 + 8);
      uint64_t v9 = v7 + 16;
      v5 += ~(v5 >> 1);
      if (v8 < a2) {
        uint64_t v2 = v9;
      }
      else {
        unint64_t v5 = v6;
      }
    }
    while (v5);
  }
  if (v2 == *((void *)this + 29) + 16 * v4 || *(_DWORD *)(v2 + 8) != a2) {
LABEL_2:
  }
    uint64_t v2 = *((void *)this + 29);
  return ((unint64_t)*(unsigned int *)(v2 + 4) + 7) >> 3;
}

uint64_t llvm::DataLayout::getMaxIndexSize(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 240);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = this;
  LODWORD(this) = 0;
  uint64_t v3 = *(void *)(v2 + 232);
  uint64_t v4 = 16 * v1;
  unint64_t v5 = (unsigned int *)(v3 + 4);
  do
  {
    unsigned int v6 = *v5;
    v5 += 4;
    unint64_t v7 = ((unint64_t)v6 + 7) >> 3;
    if (this <= v7) {
      this = v7;
    }
    else {
      this = this;
    }
    v4 -= 16;
  }
  while (v4);
  return this;
}

uint64_t llvm::DataLayout::getPointerTypeSizeInBits(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 8);
  if ((v2 & 0xFE) == 0x12) {
    unsigned int v2 = *(_DWORD *)(**(void **)(a2 + 16) + 8);
  }
  if (v2 < 0x100) {
    goto LABEL_12;
  }
  unsigned int v3 = v2 >> 8;
  uint64_t v4 = *(unsigned int *)(a1 + 240);
  uint64_t v5 = *(void *)(a1 + 232);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 232);
    unint64_t v6 = *(unsigned int *)(a1 + 240);
    do
    {
      unint64_t v7 = v6 >> 1;
      uint64_t v8 = v5 + 16 * (v6 >> 1);
      unsigned int v9 = *(_DWORD *)(v8 + 8);
      uint64_t v10 = v8 + 16;
      v6 += ~(v6 >> 1);
      if (v9 < v3) {
        uint64_t v5 = v10;
      }
      else {
        unint64_t v6 = v7;
      }
    }
    while (v6);
  }
  if (v5 == *(void *)(a1 + 232) + 16 * v4 || *(_DWORD *)(v5 + 8) != v3) {
LABEL_12:
  }
    uint64_t v5 = *(void *)(a1 + 232);
  return *(unsigned int *)(v5 + 4);
}

unint64_t llvm::DataLayout::getIndexSize(llvm::DataLayout *this, unsigned int a2)
{
  if (!a2) {
    goto LABEL_10;
  }
  uint64_t v2 = *((unsigned int *)this + 60);
  uint64_t v3 = *((void *)this + 29);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 29);
    unint64_t v4 = *((unsigned int *)this + 60);
    do
    {
      unint64_t v5 = v4 >> 1;
      uint64_t v6 = v3 + 16 * (v4 >> 1);
      unsigned int v7 = *(_DWORD *)(v6 + 8);
      uint64_t v8 = v6 + 16;
      v4 += ~(v4 >> 1);
      if (v7 < a2) {
        uint64_t v3 = v8;
      }
      else {
        unint64_t v4 = v5;
      }
    }
    while (v4);
  }
  if (v3 == *((void *)this + 29) + 16 * v2 || *(_DWORD *)(v3 + 8) != a2) {
LABEL_10:
  }
    uint64_t v3 = *((void *)this + 29);
  return ((unint64_t)*(unsigned int *)(v3 + 12) + 7) >> 3;
}

uint64_t llvm::DataLayout::getIndexTypeSizeInBits(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 8);
  if ((v2 & 0xFE) == 0x12) {
    unsigned int v2 = *(_DWORD *)(**(void **)(a2 + 16) + 8);
  }
  if (v2 < 0x100) {
    goto LABEL_12;
  }
  unsigned int v3 = v2 >> 8;
  uint64_t v4 = *(unsigned int *)(a1 + 240);
  uint64_t v5 = *(void *)(a1 + 232);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 232);
    unint64_t v6 = *(unsigned int *)(a1 + 240);
    do
    {
      unint64_t v7 = v6 >> 1;
      uint64_t v8 = v5 + 16 * (v6 >> 1);
      unsigned int v9 = *(_DWORD *)(v8 + 8);
      uint64_t v10 = v8 + 16;
      v6 += ~(v6 >> 1);
      if (v9 < v3) {
        uint64_t v5 = v10;
      }
      else {
        unint64_t v6 = v7;
      }
    }
    while (v6);
  }
  if (v5 == *(void *)(a1 + 232) + 16 * v4 || *(_DWORD *)(v5 + 8) != v3) {
LABEL_12:
  }
    uint64_t v5 = *(void *)(a1 + 232);
  return *(unsigned int *)(v5 + 12);
}

uint64_t llvm::DataLayout::getAlignment(llvm::DataLayout *this, llvm::Type *LayoutType, int a3)
{
  while (2)
  {
    unsigned int v6 = *((_DWORD *)LayoutType + 2);
    switch((char)v6)
    {
      case 7:
      case 9:
      case 12:
      case 14:
      case 20:
        __break(1u);
        goto LABEL_111;
      case 8:
LABEL_111:
        uint64_t v70 = (unsigned __int8 *)*((void *)this + 29);
        if (a3) {
          return *v70;
        }
        else {
          return v70[1];
        }
      case 10:
      case 18:
      case 19:
        unsigned int v22 = sub_1CB83544C(this, LayoutType);
        uint64_t v23 = *((unsigned int *)this + 18);
        if (v23)
        {
          unsigned int v9 = (_DWORD *)*((void *)this + 8);
          unint64_t v24 = *((unsigned int *)this + 18);
          do
          {
            while (1)
            {
              unint64_t v25 = v24 >> 1;
              uint8x8_t v26 = &v9[2 * (v24 >> 1)];
              unsigned int v27 = *v26;
              if (v27 >= 0x76 && (v27 != 118 || *v26 >> 8 >= v22)) {
                break;
              }
              unsigned int v9 = v26 + 2;
              v24 += ~v25;
              if (!v24) {
                goto LABEL_35;
              }
            }
            v24 >>= 1;
          }
          while (v25);
        }
        else
        {
          unsigned int v9 = (_DWORD *)*((void *)this + 8);
        }
LABEL_35:
        if (v9 != (_DWORD *)(*((void *)this + 8) + 8 * v23)
          && (*v9 == 118 ? (BOOL v29 = *v9 >> 8 == v22) : (BOOL v29 = 0), v29))
        {
LABEL_64:
          uint64_t v47 = 4;
          if (!a3) {
            uint64_t v47 = 5;
          }
          return *((unsigned __int8 *)v9 + v47);
        }
        else
        {
          uint64_t v30 = sub_1CB83544C(this, LayoutType);
          if ((unint64_t)(v30 + 7) < 8)
          {
            unint64_t v35 = 0;
          }
          else
          {
            unint64_t v31 = (((unint64_t)(v30 + 7) >> 3) - 1) | ((((unint64_t)(v30 + 7) >> 3) - 1) >> 1);
            unint64_t v32 = v31 | (v31 >> 2) | ((v31 | (v31 >> 2)) >> 4);
            unint64_t v33 = v32 | (v32 >> 8) | ((v32 | (v32 >> 8)) >> 16);
            unint64_t v34 = v33 | HIDWORD(v33);
LABEL_42:
            unint64_t v35 = v34 + 1;
          }
          return 63 - __clz(v35);
        }
      case 11:
        return 6;
      case 13:
        uint64_t v7 = *((unsigned int *)this + 18);
        if (v7)
        {
          unsigned int v8 = v6 >> 8;
          unsigned int v9 = (_DWORD *)*((void *)this + 8);
          unint64_t v10 = *((unsigned int *)this + 18);
          do
          {
            unint64_t v11 = v10 >> 1;
            uint64_t v12 = &v9[2 * (v10 >> 1)];
            unsigned int v13 = *v12;
            if (v13 < 0x69 || (v13 == 105 ? (BOOL v14 = *v12 >> 8 >= v8) : (BOOL v14 = 1), !v14))
            {
              unsigned int v9 = v12 + 2;
              unint64_t v11 = v10 + ~v11;
            }
            unint64_t v10 = v11;
          }
          while (v11);
        }
        else
        {
          unsigned int v9 = (_DWORD *)*((void *)this + 8);
        }
        if (v9 == (_DWORD *)(*((void *)this + 8) + 8 * v7) || *(unsigned char *)v9 != 105) {
          v9 -= 2;
        }
        goto LABEL_64;
      case 15:
        unsigned int v48 = v6 >> 8;
        uint64_t v49 = *((void *)this + 29);
        if (a3)
        {
          if (v6 < 0x100) {
            goto LABEL_79;
          }
          uint64_t v50 = *((unsigned int *)this + 60);
          unsigned int v51 = (_DWORD *)*((void *)this + 29);
          if (v50)
          {
            unsigned int v51 = (_DWORD *)*((void *)this + 29);
            unint64_t v52 = *((unsigned int *)this + 60);
            do
            {
              unint64_t v53 = v52 >> 1;
              BOOL v54 = &v51[4 * (v52 >> 1)];
              unsigned int v55 = v54[2];
              int v56 = v54 + 4;
              v52 += ~(v52 >> 1);
              if (v55 < v48) {
                unsigned int v51 = v56;
              }
              else {
                unint64_t v52 = v53;
              }
            }
            while (v52);
          }
          if (v51 == (_DWORD *)(v49 + 16 * v50) || v51[2] != v48) {
LABEL_79:
          }
            unsigned int v51 = (_DWORD *)*((void *)this + 29);
          return *(unsigned __int8 *)v51;
        }
        else
        {
          if (v6 < 0x100) {
            goto LABEL_90;
          }
          uint64_t v57 = *((unsigned int *)this + 60);
          uint64_t v58 = *((void *)this + 29);
          if (v57)
          {
            uint64_t v58 = *((void *)this + 29);
            unint64_t v59 = *((unsigned int *)this + 60);
            do
            {
              unint64_t v60 = v59 >> 1;
              uint64_t v61 = v58 + 16 * (v59 >> 1);
              unsigned int v62 = *(_DWORD *)(v61 + 8);
              uint64_t v63 = v61 + 16;
              v59 += ~(v59 >> 1);
              if (v62 < v48) {
                uint64_t v58 = v63;
              }
              else {
                unint64_t v59 = v60;
              }
            }
            while (v59);
          }
          if (v58 == v49 + 16 * v57 || *(_DWORD *)(v58 + 8) != v48) {
LABEL_90:
          }
            uint64_t v58 = *((void *)this + 29);
          return *(unsigned __int8 *)(v58 + 1);
        }
      case 16:
        if (v6 & 0x200) != 0 && (a3) {
          return 0;
        }
        uint64_t v37 = *((void *)this + 47);
        if (!v37) {
          operator new();
        }
        uint64_t v38 = *(void *)v37;
        int v39 = *(_DWORD *)(v37 + 16);
        int8x8_t v73 = LayoutType;
        if (!v39)
        {
          uint64_t v69 = 0;
LABEL_107:
          int v42 = (llvm::Type **)sub_1CC586D08(v37, (uint64_t)&v73, (uint64_t *)&v73, v69);
          *int v42 = v73;
          v42[1] = 0;
          goto LABEL_49;
        }
        int v40 = v39 - 1;
        unsigned int v41 = v40 & ((LayoutType >> 4) ^ (LayoutType >> 9));
        int v42 = (llvm::Type **)(v38 + 16 * v41);
        int v43 = *v42;
        if (*v42 == LayoutType) {
          goto LABEL_49;
        }
        unint64_t v64 = 0;
        int v65 = 1;
        do
        {
          if (v43 == (llvm::Type *)-4096)
          {
            if (v64) {
              uint64_t v69 = v64;
            }
            else {
              uint64_t v69 = v42;
            }
            goto LABEL_107;
          }
          if (v64) {
            BOOL v66 = 0;
          }
          else {
            BOOL v66 = v43 == (llvm::Type *)-8192;
          }
          if (v66) {
            unint64_t v64 = v42;
          }
          unsigned int v67 = v41 + v65++;
          unsigned int v41 = v67 & v40;
          int v42 = (llvm::Type **)(v38 + 16 * v41);
          int v43 = *v42;
        }
        while (*v42 != LayoutType);
LABEL_49:
        uint64_t v44 = (uint64_t)v42[1];
        if (!v44)
        {
          uint64_t v68 = (llvm::StructLayout *)malloc_type_malloc(8 * *((unsigned int *)LayoutType + 3) + 16, 0x4065EBACuLL);
          if (!v68) {
            llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
          }
          v42[1] = v68;
          uint64_t v44 = llvm::StructLayout::StructLayout(v68, LayoutType, this);
        }
        uint64_t v45 = 4;
        if (!a3) {
          uint64_t v45 = 5;
        }
        if (*(unsigned __int8 *)(*((void *)this + 8) + v45) <= *(unsigned __int8 *)(v44 + 8)) {
          return *(unsigned __int8 *)(v44 + 8);
        }
        else {
          return *(unsigned __int8 *)(*((void *)this + 8) + v45);
        }
      case 17:
        LayoutType = (llvm::Type *)*((void *)LayoutType + 3);
        continue;
      case 21:
        LayoutType = (llvm::Type *)llvm::TargetExtType::getLayoutType(LayoutType);
        continue;
      default:
        unsigned int v15 = sub_1CB83544C(this, LayoutType);
        uint64_t v16 = *((unsigned int *)this + 18);
        if (v16)
        {
          unsigned int v9 = (_DWORD *)*((void *)this + 8);
          unint64_t v17 = *((unsigned int *)this + 18);
          do
          {
            unint64_t v18 = v17 >> 1;
            uint64_t v19 = &v9[2 * (v17 >> 1)];
            unsigned int v20 = *v19;
            if (v20 < 0x66 || (v20 == 102 ? (BOOL v21 = *v19 >> 8 >= v15) : (BOOL v21 = 1), !v21))
            {
              unsigned int v9 = v19 + 2;
              unint64_t v18 = v17 + ~v18;
            }
            unint64_t v17 = v18;
          }
          while (v18);
        }
        else
        {
          unsigned int v9 = (_DWORD *)*((void *)this + 8);
        }
        if (v9 != (_DWORD *)(*((void *)this + 8) + 8 * v16) && *v9 == 102 && *v9 >> 8 == v15) {
          goto LABEL_64;
        }
        unint64_t v35 = v15 >> 3;
        if (!(v15 >> 3)) {
          return 63 - __clz(v35);
        }
        unint64_t v71 = (v35 - 1) | ((v35 - 1) >> 1) | (((v35 - 1) | ((v35 - 1) >> 1)) >> 2);
        unint64_t v72 = v71 | (v71 >> 4) | ((v71 | (v71 >> 4)) >> 8);
        unint64_t v34 = v72 | (v72 >> 16);
        goto LABEL_42;
    }
  }
}

uint64_t llvm::DataLayout::getABITypeAlignment(llvm::DataLayout *this, llvm::Type *a2)
{
  return 1 << llvm::DataLayout::getAlignment(this, a2, 1);
}

uint64_t llvm::DataLayout::getPrefTypeAlignment(llvm::DataLayout *this, llvm::Type *a2)
{
  return 1 << llvm::DataLayout::getAlignment(this, a2, 0);
}

uint64_t llvm::DataLayout::getPrefTypeAlign(llvm::DataLayout *this, llvm::Type *a2)
{
  return llvm::DataLayout::getAlignment(this, a2, 0);
}

uint64_t llvm::DataLayout::getIntPtrType(llvm::DataLayout *this, llvm::LLVMContext *a2, unsigned int a3)
{
  if (!a3) {
    goto LABEL_10;
  }
  uint64_t v3 = *((unsigned int *)this + 60);
  uint64_t v4 = *((void *)this + 29);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 29);
    unint64_t v5 = *((unsigned int *)this + 60);
    do
    {
      unint64_t v6 = v5 >> 1;
      uint64_t v7 = v4 + 16 * (v5 >> 1);
      unsigned int v8 = *(_DWORD *)(v7 + 8);
      uint64_t v9 = v7 + 16;
      v5 += ~(v5 >> 1);
      if (v8 < a3) {
        uint64_t v4 = v9;
      }
      else {
        unint64_t v5 = v6;
      }
    }
    while (v5);
  }
  if (v4 == *((void *)this + 29) + 16 * v3 || *(_DWORD *)(v4 + 8) != a3) {
LABEL_10:
  }
    uint64_t v4 = *((void *)this + 29);
  return llvm::IntegerType::get(a2, (llvm::LLVMContext *)*(unsigned int *)(v4 + 4));
}

double llvm::DataLayout::getIntPtrType(llvm::DataLayout *this, llvm::Type *a2)
{
  unsigned int v3 = *((_DWORD *)a2 + 2);
  if ((v3 & 0xFE) == 0x12) {
    unsigned int v3 = *(_DWORD *)(**((void **)a2 + 2) + 8);
  }
  if (v3 < 0x100) {
    goto LABEL_12;
  }
  unsigned int v4 = v3 >> 8;
  uint64_t v5 = *((unsigned int *)this + 60);
  uint64_t v6 = *((void *)this + 29);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 29);
    unint64_t v7 = *((unsigned int *)this + 60);
    do
    {
      unint64_t v8 = v7 >> 1;
      uint64_t v9 = v6 + 16 * (v7 >> 1);
      unsigned int v10 = *(_DWORD *)(v9 + 8);
      uint64_t v11 = v9 + 16;
      v7 += ~(v7 >> 1);
      if (v10 < v4) {
        uint64_t v6 = v11;
      }
      else {
        unint64_t v7 = v8;
      }
    }
    while (v7);
  }
  if (v6 == *((void *)this + 29) + 16 * v5 || *(_DWORD *)(v6 + 8) != v4) {
LABEL_12:
  }
    uint64_t v6 = *((void *)this + 29);
  uint64_t v12 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)a2, (llvm::LLVMContext *)*(unsigned int *)(v6 + 4));
  if ((*((_DWORD *)a2 + 2) & 0xFE) == 0x12)
  {
    BOOL v14 = (llvm::Type *)(*((unsigned int *)a2 + 8) | ((unint64_t)(*((_DWORD *)a2 + 2) == 19) << 32));
    return llvm::VectorType::get(v12, v14);
  }
  return result;
}

uint64_t llvm::DataLayout::getLargestLegalIntTypeSizeInBits(llvm::DataLayout *this)
{
  uint64_t v1 = (unsigned __int8 *)*((void *)this + 4);
  unint64_t v2 = *((void *)this + 5);
  unsigned int v3 = &v1[v2];
  if (v2 >= 2)
  {
    uint64_t v6 = v1 + 1;
    unsigned __int8 v5 = *v1;
    unint64_t v7 = v2 - 1;
    unint64_t v8 = v1 + 1;
    do
    {
      unsigned int v10 = *v8++;
      unsigned __int8 v9 = v10;
      BOOL v11 = v5 >= v10;
      if (v5 <= v10) {
        unsigned __int8 v5 = v9;
      }
      if (!v11) {
        uint64_t v1 = v6;
      }
      uint64_t v6 = v8;
      --v7;
    }
    while (v7);
  }
  if (v1 == v3) {
    return 0;
  }
  else {
    return *v1;
  }
}

double llvm::DataLayout::getIndexType(llvm::DataLayout *this, llvm::Type *a2)
{
  unsigned int v3 = *((_DWORD *)a2 + 2);
  if ((v3 & 0xFE) == 0x12) {
    unsigned int v3 = *(_DWORD *)(**((void **)a2 + 2) + 8);
  }
  if (v3 < 0x100) {
    goto LABEL_12;
  }
  unsigned int v4 = v3 >> 8;
  uint64_t v5 = *((unsigned int *)this + 60);
  uint64_t v6 = *((void *)this + 29);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 29);
    unint64_t v7 = *((unsigned int *)this + 60);
    do
    {
      unint64_t v8 = v7 >> 1;
      uint64_t v9 = v6 + 16 * (v7 >> 1);
      unsigned int v10 = *(_DWORD *)(v9 + 8);
      uint64_t v11 = v9 + 16;
      v7 += ~(v7 >> 1);
      if (v10 < v4) {
        uint64_t v6 = v11;
      }
      else {
        unint64_t v7 = v8;
      }
    }
    while (v7);
  }
  if (v6 == *((void *)this + 29) + 16 * v5 || *(_DWORD *)(v6 + 8) != v4) {
LABEL_12:
  }
    uint64_t v6 = *((void *)this + 29);
  uint64_t v12 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)a2, (llvm::LLVMContext *)*(unsigned int *)(v6 + 12));
  if ((*((_DWORD *)a2 + 2) & 0xFE) == 0x12)
  {
    BOOL v14 = (llvm::Type *)(*((unsigned int *)a2 + 8) | ((unint64_t)(*((_DWORD *)a2 + 2) == 19) << 32));
    return llvm::VectorType::get(v12, v14);
  }
  return result;
}

uint64_t llvm::DataLayout::getIndexedOffsetInType(llvm::DataLayout *this, uint64_t a2, const llvm::Value **a3, uint64_t a4)
{
  uint64_t v19 = a3;
  uint64_t v20 = a2 | 4;
  if (a4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = &a3[a4];
    while (1)
    {
      TypeAtIndex = (llvm::Type *)(v20 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v8 = (uint64_t *)((char *)*a3 + 24);
      unsigned int v9 = *((_DWORD *)*a3 + 8);
      if ((v20 & 4) == 0 && TypeAtIndex)
      {
        if (v9 >= 0x41) {
          unint64_t v8 = (uint64_t *)*v8;
        }
        uint64_t v17 = *(unsigned int *)v8;
        unint64_t v16 = *((void *)llvm::DataLayout::getStructLayout(this, (llvm::StructType *)(v20 & 0xFFFFFFFFFFFFFFF8))
              + v17
              + 2);
      }
      else
      {
        if (v9 > 0x40) {
          uint64_t v10 = *(void *)*v8;
        }
        else {
          uint64_t v10 = *v8 << -(char)v9 >> -(char)v9;
        }
        if (!v10) {
          goto LABEL_8;
        }
        if ((v20 & 4) == 0 || !TypeAtIndex) {
          TypeAtIndex = (llvm::Type *)llvm::StructType::getTypeAtIndex((llvm::StructType *)(v20 & 0xFFFFFFFFFFFFFFF8), *a3);
        }
        uint64_t v11 = sub_1CB83544C((uint64_t)this, (uint64_t)TypeAtIndex);
        BOOL v13 = v12 == 1;
        char Alignment = llvm::DataLayout::getAlignment(this, TypeAtIndex, 1);
        if (v13) {
        unint64_t v16 = (((1 << Alignment) + ((unint64_t)(v11 + 7) >> 3) - 1) & -(1 << Alignment)) * v10;
        }
      }
      v5 += v16;
LABEL_8:
      sub_1CB90797C((uint64_t)&v19);
      a3 = v19;
      if (v19 == v6) {
        return v5;
      }
    }
  }
  return 0;
}

uint64_t llvm::DataLayout::getGEPIndexForOffset@<X0>(uint64_t this@<X0>, llvm::Type **a2@<X1>, llvm::APInt *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (llvm::DataLayout *)this;
  unint64_t v8 = *a2;
  int v9 = *((unsigned __int8 *)*a2 + 8);
  if (*a2) {
    BOOL v10 = v9 == 17;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v23 = (llvm::Type *)*((void *)v8 + 3);
    *a2 = v23;
    unint64_t v24 = (unint64_t)(sub_1CB83544C(this, (uint64_t)v23) + 7) >> 3;
    BOOL v26 = v25 == 1;
    char Alignment = llvm::DataLayout::getAlignment(v6, v23, 1);
    this = sub_1CC5866A0((unint64_t)&v29, ((1 << Alignment) + v24 - 1) & -(1 << Alignment), v26, a3);
    *(_DWORD *)(a4 + 8) = v30;
    *(void *)a4 = v29;
    *(unsigned char *)(a4 + 16) = 1;
    return this;
  }
  if (v8) {
    BOOL v11 = (v9 & 0xFE) == 18;
  }
  else {
    BOOL v11 = 0;
  }
  if (!v11)
  {
    if (v8) {
      BOOL v12 = v9 == 16;
    }
    else {
      BOOL v12 = 0;
    }
    if (v12)
    {
      this = (uint64_t)llvm::DataLayout::getStructLayout((llvm::DataLayout *)this, *a2);
      BOOL v13 = *((_DWORD *)a3 + 2) >= 0x41u ? *(llvm::APInt **)a3 : a3;
      unint64_t v14 = *(void *)v13;
      if (*(void *)v13 < *(void *)this)
      {
        uint64_t v15 = this + 16;
        unint64_t v16 = (void *)(this + 16);
        unint64_t v17 = *(_DWORD *)(this + 12) & 0x7FFFFFFF;
        if (v17)
        {
          unint64_t v16 = (void *)(this + 16);
          do
          {
            unint64_t v18 = v17 >> 1;
            uint64_t v19 = &v16[v17 >> 1];
            unint64_t v21 = *v19;
            uint64_t v20 = v19 + 1;
            v17 += ~(v17 >> 1);
            if (v21 > v14) {
              unint64_t v17 = v18;
            }
            else {
              unint64_t v16 = v20;
            }
          }
          while (v17);
        }
        uint64_t v22 = (((unint64_t)v16 - v15 - 8) >> 3);
        this = llvm::APInt::operator-=((uint64_t)a3, *(void *)(v15 + 8 * v22));
        *a2 = *(llvm::Type **)(*((void *)v8 + 2) + 8 * v22);
        *(_DWORD *)(a4 + 8) = 32;
        *(void *)a4 = v22;
        goto LABEL_29;
      }
    }
LABEL_27:
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 16) = 0;
    return this;
  }
  __int16 v28 = (llvm::Type *)*((void *)v8 + 3);
  *a2 = v28;
  this = sub_1CB83544C(this, (uint64_t)v28);
  if ((this & 7) != 0) {
    goto LABEL_27;
  }
  this = sub_1CC5866A0((unint64_t)&v29, this >> 3, 0, a3);
  *(_DWORD *)(a4 + 8) = v30;
  *(void *)a4 = v29;
LABEL_29:
  *(unsigned char *)(a4 + 16) = 1;
  return this;
}

unint64_t sub_1CC5866A0(unint64_t result, unint64_t a2, int a3, llvm::APInt *this)
{
  uint64_t v4 = result;
  unsigned int v5 = *((_DWORD *)this + 2);
  if (a3 == 1 || !a2)
  {
    *(_DWORD *)(result + 8) = v5;
    if (v5 > 0x40) {
      operator new[]();
    }
    goto LABEL_14;
  }
  if (v5 - 1 <= 0x3F && 0xFFFFFFFFFFFFFFFFLL >> (1 - v5) < a2)
  {
    *(_DWORD *)(result + 8) = v5;
LABEL_14:
    *(void *)double result = 0;
    return result;
  }
  llvm::APInt::sdiv(this, a2, result);
  unsigned int v9 = *(_DWORD *)(v4 + 8);
  if (v9 > 0x40) {
    operator new[]();
  }
  unint64_t v10 = *(void *)v4 * a2;
  unint64_t v11 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
  if (!v9) {
    unint64_t v11 = 0;
  }
  BOOL v26 = (unint64_t *)(v10 & v11);
  double result = v10 & v11;
  uint64_t v12 = *((unsigned int *)this + 2);
  if (v12 >= 0x41)
  {
    uint64_t v17 = 0;
    unint64_t v18 = *(unint64_t **)this;
    unint64_t v19 = (unint64_t)(v12 + 63) >> 6;
    uint64_t v20 = v26;
    unint64_t v21 = v19;
    do
    {
      unint64_t v22 = *v20++;
      unint64_t v23 = *v18 - v22;
      BOOL v24 = *v18 < v22;
      unint64_t v25 = *v18 + ~v22;
      if (v17)
      {
        uint64_t v17 = v25 >= *v18;
      }
      else
      {
        unint64_t v25 = v23;
        uint64_t v17 = v24;
      }
      *v18++ = v25;
      --v21;
    }
    while (v21);
    *(void *)(*(void *)this + 8 * (v19 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v12;
  }
  else
  {
    if (v12) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v12;
    }
    else {
      unint64_t v13 = 0;
    }
    *(void *)this = v13 & (*(void *)this - (void)v26);
  }
  unsigned int v14 = *((_DWORD *)this + 2);
  char v15 = v14 - 1;
  if (v14 >= 0x41) {
    unint64_t v16 = (llvm::APInt *)(*(void *)this + 8 * ((v14 - 1) >> 6));
  }
  else {
    unint64_t v16 = this;
  }
  if ((*(void *)v16 >> v15))
  {
    llvm::APInt::operator--(v4);
    return llvm::APInt::operator+=((uint64_t)this, a2);
  }
  return result;
}

void llvm::DataLayout::getGEPIndicesForOffset(llvm::DataLayout *this@<X0>, llvm::Type **a2@<X1>, llvm::APInt *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = a4 + 16;
  *(void *)(a4 + 8) = 0x300000000;
  unint64_t v8 = *a2;
  unint64_t v9 = (unint64_t)(sub_1CB83544C((uint64_t)this, (uint64_t)*a2) + 7) >> 3;
  BOOL v11 = v10 == 1;
  char Alignment = llvm::DataLayout::getAlignment(this, v8, 1);
  unint64_t v13 = (char *)&v30;
  sub_1CC5866A0((unint64_t)&v30, ((1 << Alignment) + v9 - 1) & -(1 << Alignment), v11, a3);
  uint64_t v14 = *(unsigned int *)(a4 + 8);
  unint64_t v15 = *(void *)a4;
  if (v14 >= *(_DWORD *)(a4 + 12))
  {
    unint64_t v26 = v14 + 1;
    BOOL v27 = v15 + 16 * v14 > (unint64_t)&v30;
    if (v15 <= (unint64_t)&v30 && v27)
    {
      uint64_t v29 = (char *)&v30 - v15;
      sub_1CBFC6948(a4, v26);
      unint64_t v15 = *(void *)a4;
      unint64_t v13 = &v29[*(void *)a4];
    }
    else
    {
      sub_1CBFC6948(a4, v26);
      unint64_t v15 = *(void *)a4;
      unint64_t v13 = (char *)&v30;
    }
  }
  uint64_t v16 = v15 + 16 * *(unsigned int *)(a4 + 8);
  *(_DWORD *)(v16 + 8) = *((_DWORD *)v13 + 2);
  *(void *)uint64_t v16 = *(void *)v13;
  *((_DWORD *)v13 + 2) = 0;
  ++*(_DWORD *)(a4 + 8);
LABEL_3:
  if (v31 >= 0x41 && v30) {
    MEMORY[0x1D25D9CB0](v30, 0x1000C8000313F17);
  }
  while (1)
  {
    unsigned int v17 = *((_DWORD *)a3 + 2);
    if (v17 < 0x41 || v17 - llvm::APInt::countLeadingZerosSlowCase(a3) <= 0x40)
    {
      unint64_t v18 = *(llvm::APInt **)a3;
      if (v17 < 0x41) {
        unint64_t v18 = a3;
      }
      if (!*(void *)v18) {
        break;
      }
    }
    llvm::DataLayout::getGEPIndexForOffset((uint64_t)this, a2, a3, (uint64_t)&v30);
    if (!v32) {
      break;
    }
    uint64_t v19 = *(unsigned int *)(a4 + 8);
    unint64_t v20 = *(void *)a4;
    unint64_t v21 = (const llvm::APInt *)&v30;
    if (v19 >= *(_DWORD *)(a4 + 12))
    {
      unint64_t v24 = v19 + 1;
      BOOL v25 = v20 + 16 * v19 > (unint64_t)&v30;
      if (v20 <= (unint64_t)&v30 && v25)
      {
        __int16 v28 = (char *)&v30 - v20;
        sub_1CBFC6948(a4, v24);
        unint64_t v20 = *(void *)a4;
        unint64_t v21 = (const llvm::APInt *)&v28[*(void *)a4];
      }
      else
      {
        sub_1CBFC6948(a4, v24);
        unint64_t v20 = *(void *)a4;
        unint64_t v21 = (const llvm::APInt *)&v30;
      }
    }
    unint64_t v22 = (llvm::APInt *)(v20 + 16 * *(unsigned int *)(a4 + 8));
    unsigned int v23 = *((_DWORD *)v21 + 2);
    *((_DWORD *)v22 + 2) = v23;
    if (v23 > 0x40) {
      llvm::APInt::initSlowCase(v22, v21);
    }
    *(void *)unint64_t v22 = *(void *)v21;
    ++*(_DWORD *)(a4 + 8);
    if (v32) {
      goto LABEL_3;
    }
  }
}

uint64_t llvm::DataLayout::getPreferredAlign(llvm::DataLayout *this, const llvm::GlobalVariable *a2)
{
  unsigned int v4 = *((_DWORD *)a2 + 8);
  uint64_t v5 = (HIWORD(v4) & 0x3F) - 1;
  int v6 = HIWORD(v4) & 0x3F;
  if (v6) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0;
  }
  if ((v4 & 0x400000) != 0 && v6) {
    return v7;
  }
  unint64_t v8 = (llvm::Type *)*((void *)a2 + 3);
  uint64_t Alignment = llvm::DataLayout::getAlignment(this, v8, 0);
  uint64_t v7 = Alignment;
  if (v6)
  {
    uint64_t v7 = v5;
    if (v5 < Alignment)
    {
      unsigned __int8 v10 = llvm::DataLayout::getAlignment(this, v8, 1);
      if (v5 <= v10) {
        uint64_t v7 = v10;
      }
      else {
        uint64_t v7 = v5;
      }
    }
  }
  if (*((unsigned char *)a2 + 16))
  {
    if (*((unsigned char *)a2 + 16) == 3)
    {
      BOOL v11 = (*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0;
      goto LABEL_18;
    }
  }
  else if (*((const llvm::GlobalVariable **)a2 + 9) == (const llvm::GlobalVariable *)((char *)a2 + 72))
  {
    BOOL v11 = (*((unsigned char *)a2 + 34) & 0x80) == 0;
LABEL_18:
    char v12 = v11;
    if (v6) {
      return v7;
    }
    goto LABEL_22;
  }
  char v12 = 0;
  if (v6) {
    return v7;
  }
LABEL_22:
  if ((v12 & 1) == 0 && v7 <= 3u)
  {
    unint64_t v14 = sub_1CB83544C((uint64_t)this, (uint64_t)v8);
    if (v13 == 1) {
    if (v14 <= 0x80)
    }
      return v7;
    else {
      return 4;
    }
  }
  return v7;
}

void *sub_1CC586D08(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1CC0A1AEC(a1, v7);
      unsigned int v17 = 0;
      sub_1CB915048((uint64_t *)a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    uint64_t v8 = *a4;
    goto LABEL_5;
  }
  sub_1CC0A1AEC(a1, 2 * v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (void *)(*(void *)a1 + 16 * v11);
  uint64_t v12 = *a4;
  if (*a3 != *a4)
  {
    unint64_t v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        unint64_t v13 = a4;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a4 = (void *)(*(void *)a1 + 16 * v11);
      uint64_t v12 = *a4;
      if (v8 == *a4) {
        goto LABEL_5;
      }
    }
    if (v13) {
      a4 = v13;
    }
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

__n128 sub_1CC586E3C(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *((unsigned int *)a1 + 2);
  if (*a1 + 16 * v4 == a2)
  {
    __n128 result = *a3;
    if (v4 >= *((_DWORD *)a1 + 3)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(__n128 *)(v3 + 16 * v4) = result;
    ++*((_DWORD *)a1 + 2);
  }
  else
  {
    if (v4 >= *((_DWORD *)a1 + 3)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v6 = (__n128 *)(v3 + 16 * ((a2 - v3) >> 4));
    *(_OWORD *)(v3 + 16 * v4) = *(_OWORD *)(v3 + 16 * v4 - 16);
    uint64_t v7 = *((unsigned int *)a1 + 2);
    uint64_t v8 = *a1 + 16 * v7 - 16;
    if ((__n128 *)v8 != v6)
    {
      memmove(&v6[1], v6, v8 - (void)v6);
      LODWORD(v7) = *((_DWORD *)a1 + 2);
    }
    *((_DWORD *)a1 + 2) = v7 + 1;
    __n128 result = *a3;
    *int v6 = *a3;
  }
  return result;
}

uint64_t llvm::FindDbgAddrUses@<X0>(uint64_t this@<X0>, unint64_t *a2@<X8>)
{
  if ((*(unsigned char *)(this + 23) & 8) != 0
    && (uint64_t v4 = (void ***)this, (this = llvm::ValueAsMetadata::getIfExists((uint64_t ***)this)) != 0))
  {
    this = llvm::MetadataAsValue::getIfExists(**v4, (unsigned __int8 *)this);
    *a2 = 0;
    if (this)
    {
      for (uint64_t i = *(void *)(this + 8); i; uint64_t i = *(void *)(i + 8))
      {
        uint64_t v6 = *(void *)(i + 24);
        this = sub_1CC5817B4(v6);
        if (v6) {
          BOOL v7 = this == 0;
        }
        else {
          BOOL v7 = 1;
        }
        if (!v7 && *(_DWORD *)(*(void *)(v6 - 32) + 36) != 58) {
          this = (uint64_t)sub_1CD486FFC(a2, v6);
        }
      }
    }
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

void *llvm::FindDbgDeclareUses@<X0>(llvm *this@<X0>, unint64_t *a2@<X8>)
{
  *a2 = 0;
  uint64_t v4 = (uint64_t *)&v8;
  llvm::FindDbgAddrUses((uint64_t)this, &v8);
  if ((v8 & 4) != 0)
  {
    uint64_t v4 = *(uint64_t **)(v8 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v5 = (unint64_t *)&v4[*(unsigned int *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8)];
  }
  else
  {
    uint64_t v5 = &v8 + (v8 > 7);
  }
  while (v4 != (uint64_t *)v5)
  {
    uint64_t v6 = *v4;
    if (*v4)
    {
      if (*(_DWORD *)(*(void *)(v6 - 32) + 36) == 56) {
        sub_1CD486FFC(a2, v6);
      }
    }
    ++v4;
  }
  return sub_1CBFA5CA8(&v8);
}

void llvm::findDbgValues(uint64_t a1, uint64_t ***a2)
{
  v42[6] = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)a2 + 23) & 8) != 0)
  {
    unint64_t v35 = v39;
    uint8x8_t v36 = v39;
    uint64_t v37 = 4;
    int v38 = 0;
    IfExists = (unsigned __int8 *)llvm::ValueAsMetadata::getIfExists(a2);
    if (IfExists)
    {
      uint64_t v5 = IfExists;
      uint64_t v6 = llvm::MetadataAsValue::getIfExists(**a2, IfExists);
      if (v6)
      {
        for (uint64_t i = *(void *)(v6 + 8); i; uint64_t i = *(void *)(i + 8))
        {
          uint64_t v8 = *(void *)(i + 24);
          BOOL v9 = sub_1CC27FAEC(v8);
          if (v8) {
            BOOL v10 = !v9;
          }
          else {
            BOOL v10 = 1;
          }
          if (!v10)
          {
            unint64_t v11 = *(unsigned int *)(a1 + 8);
            if (v11 >= *(unsigned int *)(a1 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)a1 + 8 * v11) = v8;
            ++*(_DWORD *)(a1 + 8);
          }
        }
      }
      llvm::ReplaceableMetadataImpl::getAllArgListUsers((llvm::ReplaceableMetadataImpl *)(v5 + 8), (uint64_t)&v40);
      uint64_t v12 = (unsigned __int8 **)v40;
      if (v41)
      {
        unint64_t v13 = (unsigned __int8 **)((char *)v40 + 8 * v41);
        while (1)
        {
          uint64_t v14 = llvm::MetadataAsValue::getIfExists(**a2, *v12);
          if (v14)
          {
            uint64_t v15 = *(void *)(v14 + 8);
            if (v15) {
              break;
            }
          }
LABEL_65:
          if (++v12 == v13)
          {
            uint64_t v12 = (unsigned __int8 **)v40;
            goto LABEL_67;
          }
        }
        while (1)
        {
          uint64_t v16 = *(void *)(v15 + 24);
          BOOL v17 = sub_1CC27FAEC(v16);
          if (v16 && v17) {
            break;
          }
LABEL_56:
          uint64_t v15 = *(void *)(v15 + 8);
          if (!v15) {
            goto LABEL_65;
          }
        }
        uint64_t v19 = v36;
        uint64_t v20 = HIDWORD(v37);
        if (v36 == v35)
        {
          if (HIDWORD(v37))
          {
            unint64_t v21 = 0;
            uint64_t v22 = 8 * HIDWORD(v37);
            unsigned int v23 = (uint64_t *)v36;
            while (*v23 != v16)
            {
              if (*v23 == -2) {
                unint64_t v21 = v23;
              }
              ++v23;
              v22 -= 8;
              if (!v22)
              {
                if (!v21) {
                  goto LABEL_30;
                }
                uint64_t *v21 = v16;
                --v38;
                goto LABEL_54;
              }
            }
            goto LABEL_56;
          }
LABEL_30:
          unsigned int v24 = v37;
          if (HIDWORD(v37) < v37)
          {
            ++HIDWORD(v37);
            *(void *)&v36[8 * v20] = v16;
LABEL_54:
            unint64_t v34 = *(unsigned int *)(a1 + 8);
            if (v34 >= *(unsigned int *)(a1 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)a1 + 8 * v34) = v16;
            ++*(_DWORD *)(a1 + 8);
            goto LABEL_56;
          }
        }
        else
        {
          unsigned int v24 = v37;
        }
        if (3 * v24 <= 4 * (HIDWORD(v37) - v38))
        {
          if (v24 >= 0x40) {
            v24 *= 2;
          }
          else {
            unsigned int v24 = 128;
          }
        }
        else if (v24 - HIDWORD(v37) >= v24 >> 3)
        {
LABEL_35:
          unsigned int v25 = v24 - 1;
          unsigned int v26 = (v24 - 1) & ((v16 >> 4) ^ (v16 >> 9));
          BOOL v27 = &v19[8 * v26];
          uint64_t v28 = *(void *)v27;
          if (*(void *)v27 != -1)
          {
            uint64_t v29 = 0;
            int v30 = 1;
            while (v28 != v16)
            {
              if (v29) {
                BOOL v31 = 0;
              }
              else {
                BOOL v31 = v28 == -2;
              }
              if (v31) {
                uint64_t v29 = (uint64_t *)v27;
              }
              unsigned int v32 = v26 + v30++;
              unsigned int v26 = v32 & v25;
              BOOL v27 = &v19[8 * (v32 & v25)];
              uint64_t v28 = *(void *)v27;
              if (*(void *)v27 == -1) {
                goto LABEL_47;
              }
            }
            goto LABEL_56;
          }
          uint64_t v29 = 0;
LABEL_47:
          if (v29) {
            unint64_t v33 = v29;
          }
          else {
            unint64_t v33 = (uint64_t *)v27;
          }
          if (*v33 == v16) {
            goto LABEL_56;
          }
          if (*v33 == -2) {
            --v38;
          }
          else {
            ++HIDWORD(v37);
          }
          *unint64_t v33 = v16;
          goto LABEL_54;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v35, v24);
        unsigned int v24 = v37;
        uint64_t v19 = v36;
        goto LABEL_35;
      }
LABEL_67:
      if (v12 != v42) {
        free(v12);
      }
    }
    if (v36 != v35) {
      free(v36);
    }
  }
}

void llvm::findDbgUsers(uint64_t a1, uint64_t ***a2)
{
  v42[6] = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)a2 + 23) & 8) != 0)
  {
    unint64_t v35 = v39;
    uint8x8_t v36 = v39;
    uint64_t v37 = 4;
    int v38 = 0;
    IfExists = (unsigned __int8 *)llvm::ValueAsMetadata::getIfExists(a2);
    if (IfExists)
    {
      uint64_t v5 = IfExists;
      uint64_t v6 = llvm::MetadataAsValue::getIfExists(**a2, IfExists);
      if (v6)
      {
        for (uint64_t i = *(void *)(v6 + 8); i; uint64_t i = *(void *)(i + 8))
        {
          uint64_t v8 = *(void *)(i + 24);
          int v9 = sub_1CC5817B4(v8);
          if (v8) {
            BOOL v10 = v9 == 0;
          }
          else {
            BOOL v10 = 1;
          }
          if (!v10)
          {
            unint64_t v11 = *(unsigned int *)(a1 + 8);
            if (v11 >= *(unsigned int *)(a1 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)a1 + 8 * v11) = v8;
            ++*(_DWORD *)(a1 + 8);
          }
        }
      }
      llvm::ReplaceableMetadataImpl::getAllArgListUsers((llvm::ReplaceableMetadataImpl *)(v5 + 8), (uint64_t)&v40);
      uint64_t v12 = (unsigned __int8 **)v40;
      if (v41)
      {
        unint64_t v13 = (unsigned __int8 **)((char *)v40 + 8 * v41);
        while (1)
        {
          uint64_t v14 = llvm::MetadataAsValue::getIfExists(**a2, *v12);
          if (v14)
          {
            uint64_t v15 = *(void *)(v14 + 8);
            if (v15) {
              break;
            }
          }
LABEL_65:
          if (++v12 == v13)
          {
            uint64_t v12 = (unsigned __int8 **)v40;
            goto LABEL_67;
          }
        }
        while (1)
        {
          uint64_t v16 = *(void *)(v15 + 24);
          int v17 = sub_1CC5817B4(v16);
          if (v16 && v17 != 0) {
            break;
          }
LABEL_56:
          uint64_t v15 = *(void *)(v15 + 8);
          if (!v15) {
            goto LABEL_65;
          }
        }
        uint64_t v19 = v36;
        uint64_t v20 = HIDWORD(v37);
        if (v36 == v35)
        {
          if (HIDWORD(v37))
          {
            unint64_t v21 = 0;
            uint64_t v22 = 8 * HIDWORD(v37);
            unsigned int v23 = (uint64_t *)v36;
            while (*v23 != v16)
            {
              if (*v23 == -2) {
                unint64_t v21 = v23;
              }
              ++v23;
              v22 -= 8;
              if (!v22)
              {
                if (!v21) {
                  goto LABEL_30;
                }
                uint64_t *v21 = v16;
                --v38;
                goto LABEL_54;
              }
            }
            goto LABEL_56;
          }
LABEL_30:
          unsigned int v24 = v37;
          if (HIDWORD(v37) < v37)
          {
            ++HIDWORD(v37);
            *(void *)&v36[8 * v20] = v16;
LABEL_54:
            unint64_t v34 = *(unsigned int *)(a1 + 8);
            if (v34 >= *(unsigned int *)(a1 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)a1 + 8 * v34) = v16;
            ++*(_DWORD *)(a1 + 8);
            goto LABEL_56;
          }
        }
        else
        {
          unsigned int v24 = v37;
        }
        if (3 * v24 <= 4 * (HIDWORD(v37) - v38))
        {
          if (v24 >= 0x40) {
            v24 *= 2;
          }
          else {
            unsigned int v24 = 128;
          }
        }
        else if (v24 - HIDWORD(v37) >= v24 >> 3)
        {
LABEL_35:
          unsigned int v25 = v24 - 1;
          unsigned int v26 = (v24 - 1) & ((v16 >> 4) ^ (v16 >> 9));
          BOOL v27 = &v19[8 * v26];
          uint64_t v28 = *(void *)v27;
          if (*(void *)v27 != -1)
          {
            uint64_t v29 = 0;
            int v30 = 1;
            while (v28 != v16)
            {
              if (v29) {
                BOOL v31 = 0;
              }
              else {
                BOOL v31 = v28 == -2;
              }
              if (v31) {
                uint64_t v29 = (uint64_t *)v27;
              }
              unsigned int v32 = v26 + v30++;
              unsigned int v26 = v32 & v25;
              BOOL v27 = &v19[8 * (v32 & v25)];
              uint64_t v28 = *(void *)v27;
              if (*(void *)v27 == -1) {
                goto LABEL_47;
              }
            }
            goto LABEL_56;
          }
          uint64_t v29 = 0;
LABEL_47:
          if (v29) {
            unint64_t v33 = v29;
          }
          else {
            unint64_t v33 = (uint64_t *)v27;
          }
          if (*v33 == v16) {
            goto LABEL_56;
          }
          if (*v33 == -2) {
            --v38;
          }
          else {
            ++HIDWORD(v37);
          }
          *unint64_t v33 = v16;
          goto LABEL_54;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v35, v24);
        unsigned int v24 = v37;
        uint64_t v19 = v36;
        goto LABEL_35;
      }
LABEL_67:
      if (v12 != v42) {
        free(v12);
      }
    }
    if (v36 != v35) {
      free(v36);
    }
  }
}

unsigned __int8 *llvm::getDISubprogram(unsigned __int8 *result)
{
  if (result)
  {
    int v1 = *result;
    if ((v1 - 17) > 2)
    {
      return 0;
    }
    else
    {
      while ((v1 & 0xFE) == 0x12)
      {
        __n128 result = *(unsigned __int8 **)&result[-8 * *((unsigned int *)result + 2) + 8];
        LOBYTE(v1) = *result;
      }
    }
  }
  return result;
}

void *llvm::DebugInfoFinder::reset(llvm::DebugInfoFinder *this)
{
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_DWORD *)this + 42) = 0;
  *((_DWORD *)this + 62) = 0;
  *((_DWORD *)this + 82) = 0;
  __n128 result = (void *)*((void *)this + 51);
  if (result == *((void **)this + 50)) {
    goto LABEL_2;
  }
  uint64_t v3 = *((unsigned int *)this + 104);
  if (v3 < 0x21 || 4 * (*((_DWORD *)this + 105) - *((_DWORD *)this + 106)) >= v3)
  {
    __n128 result = memset(result, 255, 8 * v3);
LABEL_2:
    *(void *)((char *)this + 420) = 0;
    return result;
  }

  return llvm::SmallPtrSetImplBase::shrink_and_clear((void **)this + 50);
}

void *llvm::DebugInfoFinder::processModule(llvm::DebugInfoFinder *this, const llvm::Module *a2)
{
  __n128 result = (void *)sub_1CC362814(a2, &v43);
  uint64_t v41 = v43;
  uint64_t v42 = v44;
  int v6 = v45;
  if (v44 != v45)
  {
    do
    {
      uint64_t v36 = llvm::Module::debug_compile_units_iterator::operator*((unsigned int *)&v41);
      __n128 result = (void *)llvm::DebugInfoFinder::processCompileUnit(this, v36);
      int v37 = v42;
      uint64_t v34 = (v42 + 1);
      LODWORD(v42) = v42 + 1;
      if (v41)
      {
        int v38 = *(uint64_t **)(v41 + 48);
        uint64_t v39 = *((unsigned int *)v38 + 2);
        if (v34 < v39)
        {
          uint64_t v40 = *v38;
          if (!*(_DWORD *)(*(void *)(v40 + 8 * v34) + 36))
          {
            BOOL v31 = (uint64_t *)(v40 + 8 * v34 + 8);
            uint64_t v32 = ~v34 + v39;
            int v33 = v37 + 2;
            do
            {
              LODWORD(v34) = v33;
              if (!v32) {
                break;
              }
              uint64_t v35 = *v31++;
              --v32;
              ++v33;
            }
            while (!*(_DWORD *)(v35 + 36));
            LODWORD(v42) = v34;
          }
        }
      }
    }
    while (v34 != v6);
  }
  BOOL v7 = (char *)a2 + 24;
  uint64_t v8 = *((void *)a2 + 4);
  if ((char *)v8 != v7)
  {
    while (1)
    {
      uint64_t v9 = v8 ? v8 - 56 : 0;
      if ((*(unsigned char *)(v9 + 23) & 0x20) != 0) {
        break;
      }
LABEL_13:
      uint64_t v19 = v9 + 72;
      for (uint64_t i = *(void *)(v9 + 80); i != v19; uint64_t i = *(void *)(i + 8))
      {
        uint64_t v21 = i - 24;
        if (!i) {
          uint64_t v21 = 0;
        }
        uint64_t v22 = v21 + 40;
        for (uint64_t j = *(void *)(v21 + 48); j != v22; uint64_t j = *(void *)(j + 8))
        {
          if (j) {
            unsigned int v24 = (llvm::DILocation **)(j - 24);
          }
          else {
            unsigned int v24 = 0;
          }
          __n128 result = (void *)llvm::DebugInfoFinder::processInstruction(this, v5, v24);
        }
      }
      uint64_t v8 = *(void *)(v8 + 8);
      if ((char *)v8 == v7) {
        return result;
      }
    }
    uint64_t v10 = ***(void ***)v9;
    uint64_t v43 = v9;
    int v11 = *(_DWORD *)(v10 + 2496);
    if (v11)
    {
      uint64_t v12 = *(void *)(v10 + 2480);
      int v13 = v11 - 1;
      unsigned int v14 = v13 & ((v9 >> 4) ^ (v9 >> 9));
      __n128 result = (void *)(v12 + 40 * v14);
      uint64_t v15 = *result;
      if (*result == v9) {
        goto LABEL_9;
      }
      unsigned int v25 = 0;
      int v26 = 1;
      while (v15 != -4096)
      {
        if (v25) {
          BOOL v27 = 0;
        }
        else {
          BOOL v27 = v15 == -8192;
        }
        if (v27) {
          unsigned int v25 = result;
        }
        unsigned int v28 = v14 + v26++;
        unsigned int v14 = v28 & v13;
        __n128 result = (void *)(v12 + 40 * v14);
        uint64_t v15 = *result;
        if (*result == v9) {
          goto LABEL_9;
        }
      }
      if (v25) {
        uint64_t v29 = v25;
      }
      else {
        uint64_t v29 = result;
      }
    }
    else
    {
      uint64_t v29 = 0;
    }
    __n128 result = sub_1CC609054(v10 + 2480, (uint64_t)&v43, &v43, v29);
    uint64_t v30 = v43;
    result[4] = 0;
    result[3] = 0;
    *__n128 result = v30;
    result[1] = result + 3;
    result[2] = 0x100000000;
LABEL_9:
    uint64_t v16 = *((unsigned int *)result + 4);
    if (v16)
    {
      int v17 = (const llvm::Module **)(result[1] + 8);
      uint64_t v18 = 16 * v16;
      while (*((_DWORD *)v17 - 2))
      {
        v17 += 2;
        v18 -= 16;
        if (!v18) {
          goto LABEL_13;
        }
      }
      uint64_t v5 = *v17;
      if (*v17) {
        __n128 result = (void *)llvm::DebugInfoFinder::processSubprogram(this, v5);
      }
    }
    goto LABEL_13;
  }
  return result;
}

uint64_t llvm::DebugInfoFinder::processInstruction(llvm::DebugInfoFinder *this, const llvm::Module *a2, llvm::DILocation **a3)
{
  uint64_t result = sub_1CC5817B4((uint64_t)a3);
  if (result) {
    uint64_t result = (uint64_t)llvm::DebugInfoFinder::processVariable(this, v6, (const llvm::DbgVariableIntrinsic *)a3);
  }
  BOOL v7 = a3[6];
  int v13 = v7;
  if (v7)
  {
    uint64_t result = llvm::MetadataTracking::track((uint64_t)&v13, (unsigned __int8 *)v7, 2);
    if (v13)
    {
      uint64_t result = (uint64_t)llvm::DebugInfoFinder::processLocation(this, v8, v13);
      if (v13)
      {
        int v9 = *(unsigned __int8 *)v13;
        if ((v9 - 4) > 0x1E)
        {
          if ((v9 - 3) >= 0xFFFFFFFE) {
            uint64_t v12 = v13;
          }
          else {
            uint64_t v12 = 0;
          }
          if ((v9 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v11 = (unint64_t)v12 + 8;
LABEL_18:
            unsigned int v14 = &v13;
            return sub_1CC5FA668(v11 + 16, &v14);
          }
          if (v9 == 3) {
            *((void *)v13 + 1) = 0;
          }
        }
        else if ((*((unsigned char *)v13 + 1) & 0x7F) == 2 || *((_DWORD *)v13 + 3))
        {
          uint64_t v10 = *((void *)v13 + 2);
          if ((v10 & 4) != 0)
          {
            unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFF8;
            if (v11) {
              goto LABEL_18;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t llvm::DebugInfoFinder::addGlobalVariable(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 408);
  uint64_t v5 = *(unsigned int *)(a1 + 420);
  if (v4 != *(void *)(a1 + 400))
  {
    unsigned int v9 = *(_DWORD *)(a1 + 416);
    goto LABEL_12;
  }
  if (v5)
  {
    int v6 = 0;
    uint64_t v7 = 8 * v5;
    uint64_t v8 = *(void **)(a1 + 408);
    while (*v8 != a2)
    {
      if (*v8 == -2) {
        int v6 = v8;
      }
      ++v8;
      v7 -= 8;
      if (!v7)
      {
        if (!v6) {
          goto LABEL_9;
        }
        *int v6 = a2;
        --*(_DWORD *)(a1 + 424);
        goto LABEL_33;
      }
    }
    return 0;
  }
LABEL_9:
  unsigned int v9 = *(_DWORD *)(a1 + 416);
  if (v5 >= v9)
  {
LABEL_12:
    if (3 * v9 <= 4 * ((int)v5 - *(_DWORD *)(a1 + 424)))
    {
      if (v9 >= 0x40) {
        v9 *= 2;
      }
      else {
        unsigned int v9 = 128;
      }
    }
    else if (v9 - v5 >= v9 >> 3)
    {
      goto LABEL_14;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 400), v9);
    unsigned int v9 = *(_DWORD *)(a1 + 416);
    uint64_t v4 = *(void *)(a1 + 408);
LABEL_14:
    unsigned int v10 = v9 - 1;
    unsigned int v11 = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v12 = (void *)(v4 + 8 * v11);
    uint64_t v13 = *v12;
    if (*v12 == -1)
    {
      unsigned int v14 = 0;
LABEL_26:
      if (v14) {
        uint64_t v18 = v14;
      }
      else {
        uint64_t v18 = v12;
      }
      if (*v18 != a2)
      {
        if (*v18 == -2) {
          --*(_DWORD *)(a1 + 424);
        }
        else {
          ++*(_DWORD *)(a1 + 420);
        }
        void *v18 = a2;
        goto LABEL_33;
      }
    }
    else
    {
      unsigned int v14 = 0;
      int v15 = 1;
      while (v13 != a2)
      {
        if (v14) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v13 == -2;
        }
        if (v16) {
          unsigned int v14 = v12;
        }
        unsigned int v17 = v11 + v15++;
        unsigned int v11 = v17 & v10;
        uint64_t v12 = (void *)(v4 + 8 * (v17 & v10));
        uint64_t v13 = *v12;
        if (*v12 == -1) {
          goto LABEL_26;
        }
      }
    }
    return 0;
  }
  *(_DWORD *)(a1 + 420) = v5 + 1;
  *(void *)(v4 + 8 * v5) = a2;
LABEL_33:
  unsigned int v19 = *(_DWORD *)(a1 + 168);
  if (v19 >= *(_DWORD *)(a1 + 172)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(a1 + 160) + 8 * v19) = a2;
  ++*(_DWORD *)(a1 + 168);
  return 1;
}

llvm::DebugInfoFinder *llvm::DebugInfoFinder::processScope(llvm::DebugInfoFinder *this, llvm::DIScope *a2)
{
  if (!a2) {
    return this;
  }
  unint64_t v2 = (unsigned int *)a2;
  uint64_t v3 = this;
  while (1)
  {
    unsigned int v4 = *(unsigned __int8 *)v2;
    if (v4 <= 0xF)
    {
      if (v4 - 11 < 4) {
        goto LABEL_13;
      }
      goto LABEL_9;
    }
    if (v4 == 33)
    {
LABEL_13:
      return (llvm::DebugInfoFinder *)llvm::DebugInfoFinder::processType(v3, (uint64_t)v2);
    }
    if (v4 == 16) {
      break;
    }
    if (v4 == 17)
    {
      return (llvm::DebugInfoFinder *)llvm::DebugInfoFinder::processSubprogram(v3, (llvm::DISubprogram *)v2);
    }
LABEL_9:
    this = (llvm::DebugInfoFinder *)llvm::DebugInfoFinder::addScope(v3, (llvm::DIScope *)v2);
    if (this)
    {
      if (*(unsigned __int8 *)v2 - 18 <= 3)
      {
        unint64_t v2 = *(unsigned int **)&v2[-2 * v2[2] + 2];
        if (v2) {
          continue;
        }
      }
    }
    return this;
  }

  return (llvm::DebugInfoFinder *)llvm::DebugInfoFinder::addCompileUnit((uint64_t)v3, (uint64_t)v2);
}

uint64_t llvm::DebugInfoFinder::processType(llvm::DebugInfoFinder *a1, uint64_t a2)
{
  unint64_t v2 = (unsigned __int8 *)a2;
  uint64_t result = llvm::DebugInfoFinder::addType((uint64_t)a1, a2);
  if (result)
  {
    while (1)
    {
      uint64_t result = llvm::DebugInfoFinder::processScope(a1, *(llvm::DIScope **)&v2[-8 * *((unsigned int *)v2 + 2) + 8]);
      int v5 = *v2;
      if (v5 != 12) {
        break;
      }
      unint64_t v2 = *(unsigned __int8 **)&v2[-8 * *((unsigned int *)v2 + 2) + 24];
      uint64_t result = llvm::DebugInfoFinder::addType((uint64_t)a1, (uint64_t)v2);
      if ((result & 1) == 0) {
        return result;
      }
    }
    if (v5 == 13)
    {
      uint64_t result = llvm::DebugInfoFinder::processType(a1, *(void *)&v2[-8 * *((unsigned int *)v2 + 2) + 24]);
      uint64_t v8 = *(void *)&v2[-8 * *((unsigned int *)v2 + 2) + 32];
      if (v8) {
        unsigned int v9 = (llvm::DISubprogram **)(v8 - 8 * *(unsigned int *)(v8 + 8));
      }
      else {
        unsigned int v9 = 0;
      }
      while (v9 != (llvm::DISubprogram **)v8)
      {
        unsigned int v11 = *v9;
        int v12 = *(unsigned __int8 *)*v9;
        if ((v12 - 11) < 4 || v12 == 33)
        {
          uint64_t result = llvm::DebugInfoFinder::processType(a1, v11);
        }
        else if (v12 == 17)
        {
          uint64_t result = llvm::DebugInfoFinder::processSubprogram(a1, v11);
        }
        ++v9;
      }
    }
    else if (v5 == 14)
    {
      uint64_t v6 = *(void *)&v2[-8 * *((unsigned int *)v2 + 2) + 24];
      if (v6) {
        uint64_t v7 = (uint64_t *)(v6 - 8 * *(unsigned int *)(v6 + 8));
      }
      else {
        uint64_t v7 = 0;
      }
      while (v7 != (uint64_t *)v6)
      {
        uint64_t v10 = *v7++;
        uint64_t result = llvm::DebugInfoFinder::processType(a1, v10);
      }
    }
  }
  return result;
}

void llvm::updateLoopMetadataDebugLocations(llvm::Instruction *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  if ((*((unsigned char *)a1 + 23) & 0x20) == 0) {
    return;
  }
  uint64_t v6 = ***(void ***)a1;
  unsigned int v23 = a1;
  int v7 = *(_DWORD *)(v6 + 2496);
  if (v7)
  {
    uint64_t v8 = *(void *)(v6 + 2480);
    int v9 = v7 - 1;
    unsigned int v10 = v9 & ((a1 >> 4) ^ (a1 >> 9));
    unsigned int v11 = (llvm::Instruction **)(v8 + 40 * v10);
    int v12 = *v11;
    if (*v11 == a1) {
      goto LABEL_5;
    }
    BOOL v16 = 0;
    int v17 = 1;
    while (v12 != (llvm::Instruction *)-4096)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v12 == (llvm::Instruction *)-8192;
      }
      if (v18) {
        BOOL v16 = v11;
      }
      unsigned int v19 = v10 + v17++;
      unsigned int v10 = v19 & v9;
      unsigned int v11 = (llvm::Instruction **)(v8 + 40 * v10);
      int v12 = *v11;
      if (*v11 == a1) {
        goto LABEL_5;
      }
    }
    if (v16) {
      uint64_t v21 = v16;
    }
    else {
      uint64_t v21 = v11;
    }
  }
  else
  {
    uint64_t v21 = 0;
  }
  unsigned int v11 = (llvm::Instruction **)sub_1CC609054(v6 + 2480, (uint64_t)&v23, (uint64_t *)&v23, v21);
  uint64_t v22 = (uint64_t)v23;
  _OWORD v11[3] = 0;
  _WORD v11[4] = 0;
  *unsigned int v11 = (llvm::Instruction *)v22;
  v11[1] = (llvm::Instruction *)(v11 + 3);
  unsigned __int8 v11[2] = (llvm::Instruction *)0x100000000;
LABEL_5:
  uint64_t v13 = *((unsigned int *)v11 + 4);
  if (v13)
  {
    unsigned int v14 = (uint64_t *)((char *)v11[1] + 8);
    uint64_t v15 = 16 * v13;
    while (*((_DWORD *)v14 - 2) != 18)
    {
      v14 += 2;
      v15 -= 16;
      if (!v15) {
        return;
      }
    }
    if (*v14)
    {
      uint64_t v20 = sub_1CC588150(*v14, a2, a3);
      llvm::Instruction::setMetadata(a1, 18, v20);
    }
  }
}

llvm::MDNode *sub_1CC588150(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  _WORD v14[4] = *MEMORY[0x1E4F143B8];
  v14[0] = 0;
  unsigned int v13 = 1;
  unint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= 2)
  {
    unint64_t v7 = 1;
    while (*(void *)(a1 - 8 * v4 + 8 * v7))
    {
      uint64_t v8 = a2(a3);
      if (v8)
      {
        if (v13 >= 4uLL) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v14[v13] = v8;
LABEL_9:
        ++v13;
      }
      ++v7;
      unint64_t v4 = *(unsigned int *)(a1 + 8);
      if (v7 >= v4) {
        goto LABEL_14;
      }
    }
    if (v13 >= 4uLL) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v14[v13] = 0;
    goto LABEL_9;
  }
LABEL_14:
  uint64_t v9 = *(void *)(a1 + 16);
  unsigned int v10 = (void *)(v9 & 0xFFFFFFFFFFFFFFF8);
  if ((v9 & 4) != 0) {
    unsigned int v10 = (void *)*v10;
  }
  uint64_t Impl = llvm::MDTuple::getImpl((uint64_t)v10, v14, v13, 1, 1);
  llvm::MDNode::replaceOperandWith(Impl, 0, Impl);
  return Impl;
}

uint64_t llvm::stripDebugInfo(llvm *this, llvm::Function *a2)
{
  if ((*((unsigned char *)this + 23) & 0x20) == 0) {
    goto LABEL_19;
  }
  uint64_t v3 = ***(void ***)this;
  long long v78 = this;
  int v4 = *(_DWORD *)(v3 + 2496);
  if (!v4)
  {
    BOOL v66 = 0;
LABEL_110:
    uint64_t v8 = (llvm **)sub_1CC609054(v3 + 2480, (uint64_t)&v78, (uint64_t *)&v78, v66);
    unsigned int v67 = v78;
    void v8[3] = 0;
    void v8[4] = 0;
    *uint64_t v8 = v67;
    v8[1] = (llvm *)(v8 + 3);
    v8[2] = (llvm *)0x100000000;
    goto LABEL_12;
  }
  uint64_t v5 = *(void *)(v3 + 2480);
  int v6 = v4 - 1;
  unsigned int v7 = v6 & ((this >> 4) ^ (this >> 9));
  uint64_t v8 = (llvm **)(v5 + 40 * v7);
  uint64_t v9 = *v8;
  if (*v8 != this)
  {
    unsigned int v10 = 0;
    int v11 = 1;
    while (v9 != (llvm *)-4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v9 == (llvm *)-8192;
      }
      if (v12) {
        unsigned int v10 = v8;
      }
      unsigned int v13 = v7 + v11++;
      unsigned int v7 = v13 & v6;
      uint64_t v8 = (llvm **)(v5 + 40 * v7);
      uint64_t v9 = *v8;
      if (*v8 == this) {
        goto LABEL_12;
      }
    }
    if (v10) {
      BOOL v66 = v10;
    }
    else {
      BOOL v66 = v8;
    }
    goto LABEL_110;
  }
LABEL_12:
  uint64_t v14 = *((unsigned int *)v8 + 4);
  if (v14)
  {
    uint64_t v15 = (void *)((char *)v8[1] + 8);
    uint64_t v16 = 16 * v14;
    char v17 = 0;
    while (*((_DWORD *)v15 - 2))
    {
      v15 += 2;
      v16 -= 16;
      if (!v16) {
        goto LABEL_20;
      }
    }
    if (*v15)
    {
      llvm::Value::setMetadata((uint64_t ***)this, 0, 0);
      char v17 = 1;
      goto LABEL_20;
    }
  }
LABEL_19:
  char v17 = 0;
LABEL_20:
  BOOL v18 = (char *)this + 72;
  v70[0] = 0;
  v70[1] = 0;
  int v71 = 0;
  unsigned int v19 = (char *)*((void *)this + 10);
  if (v19 == (char *)this + 72)
  {
    uint64_t v64 = 0;
    goto LABEL_106;
  }
  do
  {
    uint64_t v20 = v19 - 24;
    if (!v19) {
      uint64_t v20 = 0;
    }
    uint64_t v21 = v20 + 40;
    uint64_t v22 = (void *)*((void *)v20 + 6);
    while (v22 != v21)
    {
      uint64_t v23 = (uint64_t)(v22 - 3);
      BOOL v12 = v22 == 0;
      uint64_t v22 = (void *)v22[1];
      if (v12) {
        uint64_t v24 = 0;
      }
      else {
        uint64_t v24 = v23;
      }
      if (sub_1CBF63B28(v24)) {
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      }
      int v26 = (unsigned __int8 **)(v24 + 48);
      unsigned int v25 = *(unsigned __int8 **)(v24 + 48);
      if (v25)
      {
        uint64_t v69 = 0;
        if (&v69 == v26)
        {
          uint64_t v68 = 0;
          char v17 = 1;
          goto LABEL_39;
        }
        int v27 = *v25;
        if ((v27 - 4) > 0x1E)
        {
          if ((v27 - 3) >= 0xFFFFFFFE) {
            uint64_t v43 = v25;
          }
          else {
            uint64_t v43 = 0;
          }
          if ((v27 - 3) <= 0xFFFFFFFD)
          {
            if (v27 == 3) {
              *((void *)v25 + 1) = 0;
            }
            goto LABEL_35;
          }
          unint64_t v44 = (unint64_t)(v43 + 8);
LABEL_61:
          long long v78 = (llvm *)(v24 + 48);
          sub_1CC5FA668(v44 + 16, &v78);
          int v45 = v69;
          *int v26 = v69;
          if (v45)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v69, v45, v24 + 48);
            uint64_t v68 = 0;
            uint64_t v69 = 0;
            char v17 = 1;
            if (*v26) {
              goto LABEL_39;
            }
            goto LABEL_38;
          }
        }
        else
        {
          if ((v25[1] & 0x7F) == 2 || *((_DWORD *)v25 + 3))
          {
            uint64_t v53 = *((void *)v25 + 2);
            if ((v53 & 4) != 0)
            {
              unint64_t v44 = v53 & 0xFFFFFFFFFFFFFFF8;
              if (v44) {
                goto LABEL_61;
              }
            }
          }
LABEL_35:
          *int v26 = 0;
        }
        uint64_t v68 = 0;
        char v17 = 1;
        goto LABEL_38;
      }
      uint64_t v68 = 0;
LABEL_38:
      if ((*(unsigned char *)(v24 + 23) & 0x20) == 0) {
        goto LABEL_54;
      }
LABEL_39:
      if ((*(unsigned char *)(v24 + 23) & 0x20) == 0) {
        goto LABEL_54;
      }
      uint64_t v28 = ***(void ***)v24;
      long long v78 = (llvm *)v24;
      int v29 = *(_DWORD *)(v28 + 2496);
      if (!v29)
      {
        unsigned int v51 = 0;
LABEL_74:
        int v33 = sub_1CC609054(v28 + 2480, (uint64_t)&v78, (uint64_t *)&v78, v51);
        unint64_t v52 = v78;
        v33[4] = 0;
        v33[3] = 0;
        *int v33 = v52;
        v33[1] = v33 + 3;
        v33[2] = 0x100000000;
        goto LABEL_50;
      }
      uint64_t v30 = *(void *)(v28 + 2480);
      int v31 = v29 - 1;
      unsigned int v32 = v31 & ((v24 >> 4) ^ (v24 >> 9));
      int v33 = (void *)(v30 + 40 * v32);
      uint64_t v34 = *v33;
      if (*v33 != v24)
      {
        uint64_t v35 = 0;
        int v36 = 1;
        while (v34 != -4096)
        {
          if (v35) {
            BOOL v37 = 0;
          }
          else {
            BOOL v37 = v34 == -8192;
          }
          if (v37) {
            uint64_t v35 = v33;
          }
          unsigned int v38 = v32 + v36++;
          unsigned int v32 = v38 & v31;
          int v33 = (void *)(v30 + 40 * v32);
          uint64_t v34 = *v33;
          if (*v33 == v24) {
            goto LABEL_50;
          }
        }
        if (v35) {
          unsigned int v51 = v35;
        }
        else {
          unsigned int v51 = v33;
        }
        goto LABEL_74;
      }
LABEL_50:
      uint64_t v39 = *((unsigned int *)v33 + 4);
      if (v39)
      {
        uint64_t v40 = (unsigned int **)(v33[1] + 8);
        uint64_t v41 = 16 * v39;
        while (*((_DWORD *)v40 - 2) != 18)
        {
          v40 += 2;
          v41 -= 16;
          if (!v41) {
            goto LABEL_54;
          }
        }
        uint64_t v46 = *v40;
        uint64_t v68 = v46;
        if (v46)
        {
          if (v71)
          {
            uint64_t v47 = (v71 - 1) & ((v46 >> 4) ^ (v46 >> 9));
            unsigned int v48 = *(unsigned int **)(v70[0] + 16 * v47);
            if (v46 == v48)
            {
LABEL_69:
              uint64_t v49 = *(unsigned int **)(v70[0] + 16 * v47 + 8);
              if (v49)
              {
                uint64_t v50 = v46;
                uint64_t v46 = v49;
LABEL_100:
                if (v46 != v50) {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v24, 18, (llvm::MDNode *)v46);
                }
                goto LABEL_54;
              }
            }
            else
            {
              int v54 = 1;
              while (v48 != (unsigned int *)-4096)
              {
                int v55 = v47 + v54++;
                uint64_t v47 = v55 & (v71 - 1);
                unsigned int v48 = *(unsigned int **)(v70[0] + 16 * v47);
                if (v46 == v48) {
                  goto LABEL_69;
                }
              }
            }
          }
          long long v78 = (llvm *)v82;
          long long v79 = (llvm *)v82;
          int v81 = 0;
          int8x8_t v73 = v77;
          unsigned int v74 = v77;
          uint64_t v75 = 8;
          int v76 = 0;
          uint64_t v80 = 0x100000008;
          v82[0] = v46;
          uint64_t v56 = v46[2];
          if (&v46[-2 * v56 + 2] != v46)
          {
            uint64_t v57 = v18;
            uint64_t v58 = 0;
            uint64_t v59 = 8 - 8 * v56;
            do
            {
              v58 += sub_1CC58A984((uint64_t)&v78, (uint64_t *)&v73, *(unsigned __int8 **)((char *)v46 + v59));
              v59 += 8;
            }
            while (v59);
            if (v58)
            {
              uint64_t v60 = 8 - 8 * v46[2];
              BOOL v18 = v57;
              while (v60)
              {
                char v61 = sub_1CC58A984((uint64_t)&v78, (uint64_t *)&v73, *(unsigned __int8 **)((char *)v46 + v60));
                v60 += 8;
                if ((v61 & 1) == 0)
                {
                  unint64_t v72 = (uint64_t *)&v73;
                  uint64_t v46 = (unsigned int *)sub_1CC588150((uint64_t)v46, (uint64_t (*)(uint64_t))sub_1CC58ADC4, (uint64_t)&v72);
                  goto LABEL_93;
                }
              }
              uint64_t v46 = 0;
            }
            else
            {
              BOOL v18 = v57;
            }
          }
LABEL_93:
          if (v74 != v73) {
            free(v74);
          }
          if (v79 != v78) {
            free(v79);
          }
          long long v78 = 0;
          char v62 = sub_1CBFFD518(v70, &v68, &v78);
          uint64_t v63 = v78;
          if ((v62 & 1) == 0)
          {
            uint64_t v63 = sub_1CC0208C4((uint64_t)v70, (uint64_t)&v68, &v68, v78);
            *uint64_t v63 = v68;
            v63[1] = 0;
          }
          v63[1] = v46;
          uint64_t v50 = v68;
          goto LABEL_100;
        }
      }
LABEL_54:
      if ((*(unsigned char *)(v24 + 23) & 0x20) != 0)
      {
        int MDKindID = llvm::LLVMContext::getMDKindID(**(uint64_t ***)v24, "heapallocsite", 0xDuLL);
        llvm::Instruction::setMetadata((llvm::Instruction *)v24, MDKindID, 0);
      }
    }
    unsigned int v19 = (char *)*((void *)v19 + 1);
  }
  while (v19 != v18);
  uint64_t v64 = v70[0];
LABEL_106:
  MEMORY[0x1D25D9CD0](v64, 8);
  return v17 & 1;
}

uint64_t llvm::StripDebugInfo(llvm *this, llvm::Module *a2)
{
  uint64_t v3 = (char *)this + 72;
  int v4 = (char *)*((void *)this + 10);
  if (v4 == v3)
  {
    int v5 = 0;
  }
  else
  {
    int v5 = 0;
    do
    {
      int v6 = (char *)*((void *)v4 + 2);
      unsigned int v7 = (char *)*((void *)v4 + 1);
      char v8 = v4[39];
      int v9 = v8;
      if (v8 >= 0) {
        int v6 = v4 + 16;
      }
      unint64_t v10 = *((void *)v4 + 3);
      unint64_t v11 = v8 & 0x7F;
      if (v9 >= 0) {
        unint64_t v10 = v11;
      }
      if (v10 >= 9)
      {
        BOOL v12 = *(void *)v6 == 0x6762642E6D766C6CLL && v6[8] == 46;
        if (v12
          || v10 == 9
          && ((v21 = *(void *)v6, int v22 = v6[8], v21 == 0x6F63672E6D766C6CLL)
            ? (BOOL v23 = v22 == 118)
            : (BOOL v23 = 0),
              v23))
        {
          uint64_t v24 = v3;
          unsigned int v25 = (char *)*((void *)v4 + 1);
          llvm::NamedMDNode::eraseFromParent((llvm::Module **)v4);
          unsigned int v7 = v25;
          uint64_t v3 = v24;
          int v5 = 1;
        }
      }
      int v4 = v7;
    }
    while (v7 != v3);
  }
  for (uint64_t i = (void *)*((void *)this + 4); i != (void *)((char *)this + 24); uint64_t i = (void *)i[1])
  {
    if (i) {
      uint64_t v14 = (llvm *)(i - 7);
    }
    else {
      uint64_t v14 = 0;
    }
    v5 |= llvm::stripDebugInfo(v14, a2);
  }
  uint64_t v15 = (char *)this + 8;
  for (uint64_t j = *((void *)this + 2); (char *)j != v15; uint64_t j = *(void *)(j + 8))
  {
    uint64_t v17 = j - 56;
    if (!j) {
      uint64_t v17 = 0;
    }
    if ((*(unsigned char *)(v17 + 23) & 0x20) != 0)
    {
      uint64_t v30 = v15;
      uint64_t v31 = j;
      int v29 = v5;
      uint64_t v26 = ***(void ***)v17 + 2480;
      uint64_t v28 = (llvm::Value *)v17;
      uint64_t v33 = v17;
      int v27 = sub_1CC608F78(v26, &v33);
      BOOL v32 = llvm::MDAttachments::erase((llvm::MDAttachments *)(v27 + 1), 0);
      if (!*((_DWORD *)v27 + 4)) {
        llvm::Value::clearMetadata((uint64_t)v28);
      }
      BOOL v18 = v32;
      int v5 = v29;
      uint64_t v15 = v30;
      uint64_t j = v31;
    }
    else
    {
      BOOL v18 = 0;
    }
    v5 |= v18;
  }
  uint64_t v19 = *((void *)this + 20);
  if (v19) {
    (*(void (**)(uint64_t, llvm::Module *))(*(void *)v19 + 40))(v19, a2);
  }
  return v5 & 1;
}

void sub_1CC588AFC(unsigned char **a1, unsigned __int8 *a2, unint64_t a3)
{
  uint64_t v3 = (uint64_t *)*((void *)*a1 + 14);
  unint64_t v4 = *((unsigned int *)v3 + 8);
  if (v4 <= 1) {
    unint64_t v5 = 1;
  }
  else {
    unint64_t v5 = v4;
  }
  if (a3 < v5) {
    unint64_t v5 = a3;
  }
  if (a3 <= v4) {
    unint64_t v5 = a3;
  }
  if ((v4 & 0x80000000) == 0) {
    size_t v7 = v5;
  }
  else {
    size_t v7 = a3;
  }
  uint64_t v8 = *((unsigned int *)v3 + 2);
  if (v8)
  {
    int v9 = 0;
    if (v7)
    {
      size_t v10 = v7;
      unint64_t v11 = a2;
      do
      {
        int v12 = *v11++;
        int v9 = 33 * v9 + v12;
        --v10;
      }
      while (v10);
    }
    uint64_t v13 = *v3;
    uint64_t v14 = *v3 + 8 * v8 + 8;
    int v15 = 1;
    int v16 = v9;
    while (1)
    {
      uint64_t v17 = v16 & (v8 - 1);
      BOOL v18 = *(void **)(v13 + 8 * v17);
      if (v18 != (void *)-8)
      {
        if (!v18) {
          return;
        }
        if (*(_DWORD *)(v14 + 4 * v17) == v9
          && v7 == *v18
          && (!v7 || !memcmp(a2, (char *)v18 + *((unsigned int *)v3 + 5), v7)))
        {
          break;
        }
      }
      int v16 = v15 + v17;
      ++v15;
    }
    if (v17 != -1 && (int)v17 != v8)
    {
      uint64_t v19 = *(void *)(*(void *)(v13 + 8 * (int)v17) + 8);
      if (v19)
      {
        if (!*(unsigned char *)(v19 + 16))
        {
          if (*(void *)(v19 + 8)) {
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
          }
          llvm::Function::eraseFromParent((llvm::Function *)v19);
          *a1[1] = 1;
        }
      }
    }
  }
}

void sub_1CC588C88(uint64_t a1, uint64_t a2)
{
  v24[16] = *MEMORY[0x1E4F143B8];
  if ((sub_1CD40EA84(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v22) & 1) == 0)
  {
    uint64_t v4 = 0;
    int v22 = v24;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    unsigned int v20 = 0;
    v24[0] = a2;
    uint64_t v23 = 0x1000000001;
    unsigned int v5 = 1;
    while (1)
    {
      while (1)
      {
        uint64_t v6 = *((void *)v22 + v5 - 1);
        uint64_t v21 = 0;
        unsigned int v7 = v20;
        if ((sub_1CC58B6F8(v4, v20, v6, &v21) & 1) == 0) {
          break;
        }
        uint64_t v4 = v18;
        sub_1CC58AEC8(a1, (unsigned __int8 *)v6);
        unsigned int v5 = v23 - 1;
        LODWORD(v23) = v5;
        if (!v5)
        {
LABEL_33:
          MEMORY[0x1D25D9CD0](v4, 8);
          if (v22 != v24) {
            free(v22);
          }
          return;
        }
      }
      if (4 * (int)v19 + 4 >= 3 * v7)
      {
        int v8 = 2 * v7;
      }
      else
      {
        if (v7 + ~v19 - HIDWORD(v19) > v7 >> 3) {
          goto LABEL_9;
        }
        int v8 = v7;
      }
      sub_1CC58B78C((uint64_t)&v18, v8);
      uint64_t v21 = 0;
      sub_1CC58B6F8(v18, v20, v6, &v21);
LABEL_9:
      LODWORD(v19) = v19 + 1;
      if (*v21 != -4096) {
        --HIDWORD(v19);
      }
      uint64_t *v21 = v6;
      uint64_t v4 = v18;
      uint64_t v9 = *(unsigned int *)(v6 + 8);
      if (v9)
      {
        size_t v10 = (uint64_t *)(v6 - 8 * v9);
        int v11 = v20;
        unsigned int v12 = v20 - 1;
        while (1)
        {
          uint64_t v13 = (unsigned char *)*v10;
          if (*v10 && *v13 - 4 <= 0x1E)
          {
            if (!v11) {
              goto LABEL_23;
            }
            unsigned int v14 = v12 & ((v13 >> 4) ^ (v13 >> 9));
            int v15 = *(unsigned char **)(v4 + 8 * v14);
            if (v13 != v15) {
              break;
            }
          }
LABEL_17:
          if (++v10 == (uint64_t *)v6) {
            goto LABEL_30;
          }
        }
        int v16 = 1;
        while (v15 != (unsigned char *)-4096)
        {
          unsigned int v17 = v14 + v16++;
          unsigned int v14 = v17 & v12;
          int v15 = *(unsigned char **)(v4 + 8 * v14);
          if (v13 == v15) {
            goto LABEL_17;
          }
        }
LABEL_23:
        if ((sub_1CD40EA84(*(void *)a1, *(_DWORD *)(a1 + 16), *v10, &v21) & 1) == 0
          && (*(unsigned char *)v6 != 17 || *(unsigned char **)(v6 + 56 - 8 * *(unsigned int *)(v6 + 8)) != v13)
          && *v13 != 16)
        {
          if (v23 >= (unint64_t)HIDWORD(v23)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v22 + v23) = v13;
          LODWORD(v23) = v23 + 1;
        }
        goto LABEL_17;
      }
LABEL_30:
      unsigned int v5 = v23;
      if (!v23) {
        goto LABEL_33;
      }
    }
  }
}

unsigned __int8 *sub_1CC588F58(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned int *)(*(void *)a3 + 8);
  uint64_t v7 = *(void *)(*(void *)a3 - 8 * v6);
  if (v6 == 2) {
    uint64_t v8 = *(void *)(*(void *)a3 - 8);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *a2;
  if (v7)
  {
    sub_1CC588C88(*(void *)v9, *(void *)(*(void *)a3 - 8 * v6));
    size_t v10 = (unsigned char *)sub_1CC58B858(*(void *)v9, v7);
    uint64_t v11 = (uint64_t)v10;
    if (v10)
    {
      switch(*v10)
      {
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1C:
        case 0x1D:
        case 0x1E:
        case 0x1F:
        case 0x20:
        case 0x21:
        case 0x22:
          break;
        default:
          uint64_t v11 = 0;
          break;
      }
    }
    **(unsigned char **)(v9 + 8) |= v11 != v7;
    uint64_t v9 = *a2;
    if (v8) {
      goto LABEL_11;
    }
LABEL_8:
    uint64_t v12 = 0;
    goto LABEL_15;
  }
  uint64_t v11 = 0;
  if (!v8) {
    goto LABEL_8;
  }
LABEL_11:
  sub_1CC588C88(*(void *)v9, v8);
  uint64_t v13 = (unsigned char *)sub_1CC58B858(*(void *)v9, v8);
  uint64_t v12 = (uint64_t)v13;
  if (v13)
  {
    switch(*v13)
    {
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
        break;
      default:
        uint64_t v12 = 0;
        break;
    }
  }
  **(unsigned char **)(v9 + 8) |= v12 != v8;
LABEL_15:
  uint64_t result = (unsigned __int8 *)llvm::DILocation::getImpl(*(void **)a2[1], *(_DWORD *)(*(void *)a3 + 4), *(unsigned __int16 *)(*(void *)a3 + 2), v11, v12, 0, 0, 1);
  *a1 = result;
  if (result)
  {
    return (unsigned __int8 *)llvm::MetadataTracking::track((uint64_t)a1, result, 2);
  }
  return result;
}

unsigned char *sub_1CC589210(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  sub_1CC588C88(*(void *)a1, a2);
  uint64_t result = (unsigned char *)sub_1CC58B858(*(void *)a1, a2);
  if (result)
  {
    switch(*result)
    {
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
        break;
      default:
        uint64_t result = 0;
        break;
    }
  }
  **(unsigned char **)(a1 + 8) |= result != (unsigned char *)a2;
  return result;
}

uint64_t llvm::getDebugMetadataVersionFromModule(llvm *this, const llvm::Module *a2)
{
  v16[24] = *MEMORY[0x1E4F143B8];
  unsigned int v14 = v16;
  uint64_t v15 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(this, (uint64_t)&v14);
  if (v15)
  {
    unint64_t v2 = (uint64_t *)((char *)v14 + 16);
    uint64_t v3 = 24 * v15;
    while (1)
    {
      uint64_t v4 = *(void *)(*(v2 - 1) + 8);
      if (*(void *)v4 == 18)
      {
        uint64_t v9 = *(void *)(v4 + 24);
        uint64_t v10 = *(void *)(v4 + 32);
        int v11 = *(unsigned __int16 *)(v4 + 40);
        BOOL v12 = v9 == 0x6E49206775626544 && v10 == 0x6973726556206F66;
        if (v12 && v11 == 28271) {
          break;
        }
      }
      v2 += 3;
      v3 -= 24;
      if (!v3) {
        goto LABEL_5;
      }
    }
    uint64_t v5 = *v2;
  }
  else
  {
LABEL_5:
    uint64_t v5 = 0;
  }
  if (v14 != v16) {
    free(v14);
  }
  if (!v5) {
    return 0;
  }
  if (*(unsigned char *)v5 != 1) {
    return 0;
  }
  uint64_t v7 = *(void *)(v5 + 128);
  if (*(unsigned char *)(v7 + 16) != 16) {
    return 0;
  }
  uint64_t v8 = (unsigned int *)(v7 + 24);
  if (*(_DWORD *)(v7 + 32) >= 0x41u) {
    uint64_t v8 = *(unsigned int **)v8;
  }
  return *v8;
}

unsigned __int8 *llvm::Instruction::applyMergedLocation(llvm::Instruction *this, const llvm::DILocation *a2, const llvm::DILocation *a3)
{
  uint64_t result = (unsigned __int8 *)llvm::DILocation::getMergedLocation(a2, a3, a3);
  BOOL v12 = result;
  if (result) {
    uint64_t result = (unsigned __int8 *)llvm::MetadataTracking::track((uint64_t)&v12, result, 2);
  }
  uint64_t v5 = (unsigned __int8 **)((char *)this + 48);
  if (&v12 != v5)
  {
    uint64_t v6 = *v5;
    if (*v5)
    {
      int v8 = *v6;
      if ((v8 - 4) > 0x1E)
      {
        if ((v8 - 3) >= 0xFFFFFFFE) {
          int v11 = *v5;
        }
        else {
          int v11 = 0;
        }
        if ((v8 - 3) < 0xFFFFFFFE)
        {
          if (v8 == 3) {
            *((void *)v6 + 1) = 0;
          }
          goto LABEL_5;
        }
        unint64_t v10 = (unint64_t)(v11 + 8);
      }
      else
      {
        if ((v6[1] & 0x7F) != 2 && !*((_DWORD *)v6 + 3)) {
          goto LABEL_5;
        }
        uint64_t v9 = *((void *)v6 + 2);
        if ((v9 & 4) == 0) {
          goto LABEL_5;
        }
        unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFF8;
        if (!v10) {
          goto LABEL_5;
        }
      }
      uint64_t v13 = v5;
      uint64_t result = (unsigned __int8 *)sub_1CC5FA668(v10 + 16, &v13);
    }
LABEL_5:
    uint64_t v7 = v12;
    *uint64_t v5 = v12;
    if (v7) {
      return (unsigned __int8 *)llvm::MetadataTracking::retrack((uint64_t)&v12, v7, (uint64_t)v5);
    }
    return result;
  }
  if (v12) {
    return (unsigned __int8 *)llvm::MetadataTracking::untrack((uint64_t)&v12, v12);
  }
  return result;
}

unsigned __int8 **llvm::Instruction::dropLocation(unsigned __int8 **this)
{
  if (!this[6]) {
    return this;
  }
  unint64_t v10 = this + 6;
  int v11 = (llvm::Instruction *)this;
  unsigned int v1 = *((unsigned __int8 *)this + 16) - 33;
  BOOL v2 = v1 > 0x33;
  uint64_t v3 = (1 << v1) & 0x8000000000041;
  if (v2 || v3 == 0)
  {
    unsigned int v14 = 0;
    this = sub_1CB8F69CC(v10, &v14);
    int v8 = v14;
    if (!v14) {
      return this;
    }
    uint64_t v9 = &v14;
    return (unsigned __int8 **)llvm::MetadataTracking::untrack((uint64_t)v9, v8);
  }
  Functioint n = (llvm::Function *)llvm::Instruction::getFunction((llvm::Instruction *)this);
  Subprograint m = llvm::Function::getSubprogram(Function);
  if (!Subprogram)
  {
    BOOL v12 = 0;
    this = sub_1CB8F69CC(v10, &v12);
    int v8 = v12;
    if (!v12) {
      return this;
    }
    uint64_t v9 = &v12;
    return (unsigned __int8 **)llvm::MetadataTracking::untrack((uint64_t)v9, v8);
  }
  uint64_t Impl = (unsigned __int8 *)llvm::DILocation::getImpl(**(void ***)v11, 0, 0, Subprogram, 0, 0, 0, 1);
  uint64_t v13 = Impl;
  if (Impl) {
    llvm::MetadataTracking::track((uint64_t)&v13, Impl, 2);
  }
  this = sub_1CB8F69CC(v10, &v13);
  int v8 = v13;
  if (v13)
  {
    uint64_t v9 = &v13;
    return (unsigned __int8 **)llvm::MetadataTracking::untrack((uint64_t)v9, v8);
  }
  return this;
}

uint64_t LLVMDebugMetadataVersion()
{
  return 3;
}

void LLVMCreateDIBuilderDisallowUnresolved()
{
}

void LLVMCreateDIBuilder()
{
}

uint64_t LLVMStripModuleDebugInfo(llvm *a1, llvm::Module *a2)
{
  return llvm::StripDebugInfo(a1, a2);
}

uint64_t LLVMDisposeDIBuilder(uint64_t result)
{
  if (result)
  {
    sub_1CC2DBB1C(result);
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

uint64_t LLVMDIBuilderCreateCompileUnit(uint64_t a1, int a2, uint64_t a3, unsigned __int8 *a4, size_t a5, int a6, unsigned __int8 *a7, void *a8, int a9, unsigned __int8 *a10, size_t a11, int a12, unsigned int a13, int a14, int a15, unsigned __int8 *a16, size_t a17, unsigned __int8 *a18, size_t a19)
{
  return llvm::DIBuilder::createCompileUnit(a1, dword_1CFAC8610[a2], a3, a4, a5, a6 != 0, a7, a8, a9, a10, a11, a12, a13, a14 != 0, a15 != 0, 0, 0, a16, a17,
           a18,
           a19);
}

llvm::MDNode *LLVMDIBuilderCreateFile(uint64_t a1, unsigned __int8 *a2, void *a3, unsigned __int8 *a4, void *a5)
{
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  v8[0] = 0;
  v8[24] = 0;
  v7[0] = 0;
  v7[16] = 0;
  return sub_1CD5AEA68(v5, a2, a3, a4, a5, (uint64_t)v8, (uint64_t)v7, 0, 1u);
}

llvm::MDNode *LLVMDIBuilderCreateModule(uint64_t a1, unsigned char *a2, unsigned __int8 *a3, size_t a4, unsigned __int8 *a5, void *a6, unsigned __int8 *a7, size_t a8, unsigned __int8 *a9, size_t a10)
{
  unsigned int v14 = *(uint64_t **)(a1 + 8);
  if (a2)
  {
    if (*a2 == 16) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = (uint64_t)a2;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  return sub_1CD5AEFD4(v14, 0, v15, a3, a4, a5, a6, a8, a7, a8, a9, a10, 0, 0, 0, 1);
}

llvm::MDNode *LLVMDIBuilderCreateNameSpace(uint64_t a1, unsigned char *a2, unsigned __int8 *a3, size_t a4, int a5)
{
  return llvm::DIBuilder::createNameSpace(a1, a2, a3, a4, a5 != 0);
}

uint64_t LLVMDIBuilderCreateFunction(uint64_t a1, unsigned char *a2, unsigned __int8 *a3, size_t a4, unsigned __int8 *a5, void *a6, void *a7, int a8, void *a9, int a10, int a11, int a12, unsigned int a13, int a14)
{
  return llvm::DIBuilder::createFunction(a1, a2, a3, a4, a5, a6, a7, a8, a9, a12, a13, (4 * (a10 != 0)) | (8 * (a11 != 0)) | (16 * (a14 != 0)), 0, 0, 0, 0, "", 0);
}

llvm::MDNode *LLVMDIBuilderCreateLexicalBlock(uint64_t a1, unsigned char *a2, uint64_t a3, int a4, unsigned int a5)
{
  uint64_t v5 = *(void **)(a1 + 8);
  if (a2 && *a2 == 16) {
    a2 = 0;
  }
  return llvm::DILexicalBlock::getImpl(v5, (uint64_t)a2, a3, a4, a5, 1, 1);
}

llvm::MDNode *LLVMDIBuilderCreateLexicalBlockFile(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return llvm::DILexicalBlockFile::getImpl(*(void **)(a1 + 8), a2, a3, a4, 0, 1);
}

unsigned __int8 *LLVMDIBuilderCreateImportedModuleFromNamespace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_1CC581F48(*(uint64_t **)(a1 + 8), 58, a2, a3, a4, a5, 0, 0, 0, (uint64_t *)(a1 + 248));
}

unsigned __int8 *LLVMDIBuilderCreateImportedModuleFromAlias(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, void *a6, unsigned int a7)
{
  if (a7) {
    uint64_t Impl = llvm::MDTuple::getImpl(*(void *)(a1 + 8), a6, a7, 0, 1);
  }
  else {
    uint64_t Impl = 0;
  }
  return sub_1CC581F48(*(uint64_t **)(a1 + 8), 58, a2, a3, a4, a5, 0, 0, (uint64_t)Impl, (uint64_t *)(a1 + 248));
}

unsigned __int8 *LLVMDIBuilderCreateImportedModuleFromModule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, void *a6, unsigned int a7)
{
  if (a7) {
    uint64_t Impl = llvm::MDTuple::getImpl(*(void *)(a1 + 8), a6, a7, 0, 1);
  }
  else {
    uint64_t Impl = 0;
  }
  return sub_1CC581F48(*(uint64_t **)(a1 + 8), 58, a2, a3, a4, a5, 0, 0, (uint64_t)Impl, (uint64_t *)(a1 + 248));
}

unsigned __int8 *LLVMDIBuilderCreateImportedDeclaration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned __int8 *a6, size_t a7, void *a8, unsigned int a9)
{
  if (a9) {
    uint64_t Impl = llvm::MDTuple::getImpl(*(void *)(a1 + 8), a8, a9, 0, 1);
  }
  else {
    uint64_t Impl = 0;
  }
  return sub_1CC581F48(*(uint64_t **)(a1 + 8), 8, a2, a3, a4, a5, a6, a7, (uint64_t)Impl, (uint64_t *)(a1 + 248));
}

uint64_t LLVMDIBuilderCreateDebugLocation(void *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  return llvm::DILocation::getImpl(a1, a2, a3, a4, a5, 0, 0, 1);
}

uint64_t LLVMDILocationGetLine(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t LLVMDILocationGetColumn(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 2);
}

uint64_t LLVMDILocationGetScope(uint64_t a1)
{
  return *(void *)(a1 - 8 * *(unsigned int *)(a1 + 8));
}

uint64_t LLVMDILocationGetInlinedAt(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8) == 2) {
    return *(void *)(a1 - 8);
  }
  else {
    return 0;
  }
}

uint64_t LLVMDIScopeGetFile(uint64_t result)
{
  if (*(unsigned char *)result != 15) {
    return *(void *)(result - 8 * *(unsigned int *)(result + 8));
  }
  return result;
}

_DWORD *LLVMDIFileGetDirectory(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = *(void *)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8);
  if (v2)
  {
    uint64_t v3 = *(int **)(v2 + 8);
    int v5 = *v3;
    uint64_t result = v3 + 6;
    LODWORD(v2) = v5;
  }
  else
  {
    uint64_t result = 0;
  }
  *a2 = v2;
  return result;
}

_DWORD *LLVMDIFileGetFilename(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = *(void *)(a1 - 8 * *(unsigned int *)(a1 + 8));
  if (v2)
  {
    uint64_t v3 = *(int **)(v2 + 8);
    int v5 = *v3;
    uint64_t result = v3 + 6;
    LODWORD(v2) = v5;
  }
  else
  {
    uint64_t result = 0;
  }
  *a2 = v2;
  return result;
}

const char *LLVMDIFileGetSource(uint64_t a1, _DWORD *a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 56);
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v3 = *(_DWORD **)(*(void *)(a1 + 48) + 8);
    int v5 = *v3;
    uint64_t result = (const char *)(v3 + 6);
    int v2 = v5;
  }
  else
  {
    uint64_t result = "";
  }
  *a2 = v2;
  return result;
}

llvm::MDNode *LLVMDIBuilderCreateEnumerator(uint64_t a1, unsigned __int8 *a2, size_t a3, uint64_t a4, int a5)
{
  return llvm::DIBuilder::createEnumerator(a1, a2, a3, a4, a5 != 0);
}

uint64_t LLVMDIBuilderCreateEnumerationType(uint64_t a1, unsigned char *a2, unsigned __int8 *a3, size_t a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, void *a9, unsigned int a10, uint64_t a11)
{
  uint64_t Impl = llvm::MDTuple::getImpl(*(void *)(a1 + 8), a9, a10, 0, 1);
  return llvm::DIBuilder::createEnumerationType(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)Impl, a11, "", 0, 0);
}

uint64_t LLVMDIBuilderCreateUnionType(uint64_t a1, unsigned char *a2, unsigned __int8 *a3, size_t a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, void *a10, unsigned int a11, int a12, unsigned __int8 *a13, size_t a14)
{
  uint64_t Impl = llvm::MDTuple::getImpl(*(void *)(a1 + 8), a10, a11, 0, 1);

  return llvm::DIBuilder::createUnionType(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t)Impl, a12, a13, a14);
}

uint64_t LLVMDIBuilderCreateArrayType(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, void *a5, unsigned int a6)
{
  uint64_t Impl = llvm::MDTuple::getImpl(*(void *)(a1 + 8), a5, a6, 0, 1);
  return llvm::DIBuilder::createArrayType(a1, a2, a3, a4, (uint64_t)Impl, 0, 0, 0, 0);
}

uint64_t LLVMDIBuilderCreateVectorType(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, void *a5, unsigned int a6)
{
  uint64_t Impl = llvm::MDTuple::getImpl(*(void *)(a1 + 8), a5, a6, 0, 1);

  return llvm::DIBuilder::createVectorType(a1, a2, a3, a4, (uint64_t)Impl);
}

uint64_t LLVMDIBuilderCreatePointerType(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, unsigned __int8 *a6, size_t a7)
{
  return llvm::DIBuilder::createPointerType(a1, a2, a3, a4, a5 | 0x100000000, a6, a7, 0);
}

uint64_t LLVMDIBuilderCreateStructType(uint64_t a1, unsigned char *a2, unsigned __int8 *a3, size_t a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, void *a11, unsigned int a12, int a13, uint64_t a14, unsigned __int8 *a15, size_t a16)
{
  uint64_t Impl = llvm::MDTuple::getImpl(*(void *)(a1 + 8), a11, a12, 0, 1);

  return llvm::DIBuilder::createStructType(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)Impl, a13, a14, a15, a16);
}

uint64_t LLVMDIBuilderCreateMemberType(uint64_t a1, unsigned char *a2, unsigned __int8 *a3, size_t a4, uint64_t a5, int a6, uint64_t a7, int a8, uint64_t a9, int a10, uint64_t a11)
{
  return llvm::DIBuilder::createMemberType(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0);
}

llvm::MDNode *LLVMDIBuilderCreateUnspecifiedType(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  return sub_1CD5AC354(*(uint64_t **)(a1 + 8), 59, a2, a3);
}

uint64_t LLVMDIBuilderCreateStaticMemberType(uint64_t a1, llvm::Value *a2, unsigned __int8 *a3, size_t a4, uint64_t a5, int a6, uint64_t a7, int a8, llvm::ValueAsMetadata *a9, int a10)
{
  return llvm::DIBuilder::createStaticMemberType(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t LLVMDIBuilderCreateObjCIVar(uint64_t a1, unsigned __int8 *a2, void *a3, unsigned char *a4, int a5, uint64_t a6, int a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11)
{
  return llvm::DIBuilder::createObjCIVar(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

unsigned int *LLVMDIBuilderCreateObjCProperty(uint64_t a1, unsigned __int8 *a2, size_t a3, uint64_t a4, int a5, unsigned __int8 *a6, void *a7, unsigned __int8 *a8, size_t a9, int a10, uint64_t a11)
{
  return sub_1CD5AEC64(*(uint64_t **)(a1 + 8), a2, a3, a4, a5, a6, a7, (uint64_t)a8, a8, a9, a10, a11, 0, 1);
}

llvm::MDNode *LLVMDIBuilderCreateObjectPointerType(uint64_t a1, llvm::MDNode *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return llvm::DIBuilder::createObjectPointerType(a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
}

uint64_t LLVMDIBuilderCreateTypedef(uint64_t a1, uint64_t a2, unsigned __int8 *a3, size_t a4, uint64_t a5, int a6, unsigned char *a7, int a8)
{
  return llvm::DIBuilder::createTypedef(a1, a2, a3, a4, a5, a6, a7, a8, 0);
}

uint64_t LLVMDIBuilderCreateForwardDecl(uint64_t a1, int a2, unsigned __int8 *a3, size_t a4, unsigned char *a5, uint64_t a6, int a7, int a8, uint64_t a9, unsigned int a10, unsigned __int8 *a11, size_t a12)
{
  return llvm::DIBuilder::createForwardDecl(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t LLVMDIBuilderCreateReplaceableCompositeType(uint64_t a1, int a2, unsigned __int8 *a3, size_t a4, unsigned char *a5, uint64_t a6, int a7, int a8, uint64_t a9, unsigned int a10, unsigned int a11, unsigned __int8 *a12, size_t a13)
{
  return llvm::DIBuilder::createReplaceableCompositeType(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, 0);
}

uint64_t LLVMDIBuilderCreateReferenceType(uint64_t a1, int a2, uint64_t a3)
{
  return llvm::DIBuilder::createReferenceType(a1, a2, a3, 0, 0, 0);
}

llvm::MDNode *LLVMDIBuilderCreateNullPtrType(uint64_t a1)
{
  return sub_1CD5AC354(*(uint64_t **)(a1 + 8), 59, "decltype(nullptr)", 0x11uLL);
}

uint64_t LLVMDIBuilderCreateMemberPointerType(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, int a6)
{
  return llvm::DIBuilder::createMemberPointerType(a1, a2, a3, a5, a4, a6);
}

uint64_t LLVMDIBuilderCreateBitFieldMemberType(uint64_t a1, unsigned char *a2, unsigned __int8 *a3, size_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, llvm::IntegerType *a9, int a10, uint64_t a11)
{
  return llvm::DIBuilder::createBitFieldMemberType(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0);
}

uint64_t LLVMDIBuilderCreateClassType(uint64_t a1, unsigned char *a2, unsigned __int8 *a3, size_t a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, uint64_t a9, unsigned int a10, uint64_t a11, void *a12, unsigned int a13, uint64_t a14, uint64_t a15, unsigned __int8 *a16, size_t a17)
{
  uint64_t Impl = llvm::MDTuple::getImpl(*(void *)(a1 + 8), a12, a13, 0, 1);

  return llvm::DIBuilder::createClassType(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (uint64_t)Impl, a14, a15, a16, a17);
}

llvm::MDNode *LLVMDIBuilderCreateArtificialType(uint64_t a1, llvm::MDNode *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return llvm::DIBuilder::createArtificialType(a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
}

void *LLVMDITypeGetName(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 - 8 * *(unsigned int *)(a1 + 8) + 16);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(v2 + 8);
    uint64_t v5 = *v3;
    uint64_t result = v3 + 3;
    uint64_t v2 = v5;
  }
  else
  {
    uint64_t result = 0;
  }
  *a2 = v2;
  return result;
}

uint64_t LLVMDITypeGetSizeInBits(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t LLVMDITypeGetOffsetInBits(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t LLVMDITypeGetAlignInBits(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t LLVMDITypeGetLine(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t LLVMDITypeGetFlags(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void LLVMDIBuilderCreateSubroutineType(uint64_t a1, uint64_t a2, unsigned char **a3, unsigned int a4, int a5)
{
  TypeArray = llvm::DIBuilder::getOrCreateTypeArray(a1, a3, a4);
  int v8 = *(void **)(a1 + 8);

  llvm::DISubroutineType::getImpl(v8, a5, 0, (uint64_t)TypeArray, 0, 1);
}

llvm::MDNode *LLVMDIBuilderCreateExpression(uint64_t a1, const void *a2, uint64_t a3)
{
  return llvm::DIExpression::getImpl(*(void **)(a1 + 8), a2, a3, 0, 1);
}

llvm::MDNode *LLVMDIBuilderCreateConstantValueExpression(uint64_t a1, uint64_t a2)
{
  v4[3] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 8);
  v4[0] = 16;
  v4[1] = a2;
  v4[2] = 159;
  return llvm::DIExpression::getImpl(v2, v4, 3, 0, 1);
}

llvm::MDNode *LLVMDIBuilderCreateGlobalVariableExpression(uint64_t a1, uint64_t a2, unsigned __int8 *a3, size_t a4, unsigned __int8 *a5, size_t a6, uint64_t a7, int a8, uint64_t a9, int a10, llvm::MDNode *a11, uint64_t a12, int a13)
{
  return llvm::DIBuilder::createGlobalVariableExpression(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10 != 0, 1, a11, a12, 0, a13, 0);
}

uint64_t LLVMDIGlobalVariableExpressionGetVariable(uint64_t a1)
{
  return *(void *)(a1 - 8 * *(unsigned int *)(a1 + 8));
}

uint64_t LLVMDIGlobalVariableExpressionGetExpression(uint64_t a1)
{
  return *(void *)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8);
}

uint64_t LLVMDIVariableGetFile(uint64_t a1)
{
  return *(void *)(a1 - 8 * *(unsigned int *)(a1 + 8) + 16);
}

uint64_t LLVMDIVariableGetScope(uint64_t a1)
{
  return *(void *)(a1 - 8 * *(unsigned int *)(a1 + 8));
}

uint64_t LLVMDIVariableGetLine(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

llvm::MDNode *LLVMTemporaryMDNode(uint64_t a1, void *a2, uint64_t a3)
{
  return llvm::MDTuple::getImpl(a1, a2, a3, 2, 1);
}

void LLVMMetadataReplaceAllUsesWith(llvm::MDNode *a1, llvm::Metadata *a2)
{
  uint64_t v3 = *((void *)a1 + 2);
  if ((v3 & 4) != 0) {
    llvm::ReplaceableMetadataImpl::replaceAllUsesWith((llvm::ReplaceableMetadataImpl *)(v3 & 0xFFFFFFFFFFFFFFF8), a2);
  }

  llvm::MDNode::deleteTemporary(a1, a2);
}

llvm::MDNode *LLVMDIBuilderCreateTempGlobalVariableFwdDecl(uint64_t a1, uint64_t a2, unsigned __int8 *a3, size_t a4, unsigned __int8 *a5, size_t a6, uint64_t a7, int a8, uint64_t a9, int a10, uint64_t a11, int a12)
{
  return sub_1CD5AEED0(*(uint64_t **)(a1 + 8), a2, a3, a4, a5, a6, a7, a8, a9, a10 != 0, 0, a11, 0, a12, 0, 2, 1);
}

uint64_t LLVMDIBuilderInsertDeclareBefore(uint64_t a1, llvm::ValueAsMetadata *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return llvm::DIBuilder::insertDeclare(a1, a2, a3, a4, a5, *(void *)(a6 + 40), a6);
}

uint64_t LLVMDIBuilderInsertDbgValueBefore(uint64_t a1, llvm::ValueAsMetadata *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a6;
  if (a6) {
    a6 = *(void *)(a6 + 40);
  }
  return llvm::DIBuilder::insertDbgValueIntrinsic(a1, a2, a3, a4, a5, a6, v6);
}

uint64_t LLVMDIBuilderInsertDbgValueAtEnd(uint64_t a1, llvm::ValueAsMetadata *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return llvm::DIBuilder::insertDbgValueIntrinsic(a1, a2, a3, a4, a5, a6, 0);
}

unsigned __int8 *LLVMDIBuilderCreateAutoVariable(uint64_t a1, unsigned char *a2, unsigned __int8 *a3, size_t a4, uint64_t a5, int a6, uint64_t a7, int a8, int a9, int a10)
{
  return sub_1CC582A74(*(uint64_t **)(a1 + 8), a1 + 400, a2, a3, a4, 0, a5, a6, a7, a8 != 0, a9, a10, 0);
}

unsigned __int8 *LLVMDIBuilderCreateParameterVariable(uint64_t a1, unsigned char *a2, unsigned __int8 *a3, size_t a4, int a5, uint64_t a6, int a7, uint64_t a8, int a9, int a10)
{
  return sub_1CC582A74(*(uint64_t **)(a1 + 8), a1 + 400, a2, a3, a4, a5, a6, a7, a8, a9 != 0, a10, 0, 0);
}

llvm::MDNode *LLVMDIBuilderGetOrCreateArray(uint64_t a1, void *a2, uint64_t a3)
{
  return llvm::MDTuple::getImpl(*(void *)(a1 + 8), a2, a3, 0, 1);
}

uint64_t LLVMGetSubprogram(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 23) & 0x20) == 0) {
    return 0;
  }
  uint64_t v1 = ***(void ***)a1;
  uint64_t v18 = a1;
  int v2 = *(_DWORD *)(v1 + 2496);
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 2480);
    int v4 = v2 - 1;
    unsigned int v5 = (v2 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    uint64_t v6 = (void *)(v3 + 40 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a1) {
      goto LABEL_12;
    }
    int v8 = 0;
    int v9 = 1;
    while (v7 != -4096)
    {
      if (v8) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = v7 == -8192;
      }
      if (v10) {
        int v8 = v6;
      }
      unsigned int v11 = v5 + v9++;
      unsigned int v5 = v11 & v4;
      uint64_t v6 = (void *)(v3 + 40 * (v11 & v4));
      uint64_t v7 = *v6;
      if (*v6 == a1) {
        goto LABEL_12;
      }
    }
    if (v8) {
      int v16 = v8;
    }
    else {
      int v16 = v6;
    }
  }
  else
  {
    int v16 = 0;
  }
  uint64_t v6 = sub_1CC609054(v1 + 2480, (uint64_t)&v18, &v18, v16);
  uint64_t v17 = v18;
  v6[3] = 0;
  v6[4] = 0;
  *uint64_t v6 = v17;
  v6[1] = v6 + 3;
  void v6[2] = 0x100000000;
LABEL_12:
  uint64_t v12 = *((unsigned int *)v6 + 4);
  if (!v12) {
    return 0;
  }
  uint64_t v13 = v6[1] + 8;
  uint64_t v14 = 16 * v12;
  uint64_t result = 0;
  while (*(_DWORD *)(v13 - 8))
  {
    v13 += 16;
    v14 -= 16;
    if (!v14) {
      return result;
    }
  }
  return *(void *)v13;
}

void LLVMSetSubprogram(uint64_t ***a1, llvm::MDNode *a2)
{
}

uint64_t LLVMDISubprogramGetLine(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t LLVMInstructionGetDebugLoc(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t LLVMInstructionSetDebugLoc(uint64_t result, unsigned __int8 *a2)
{
  int v2 = (unsigned __int8 **)(result + 48);
  if (a2)
  {
    unsigned int v20 = a2;
    uint64_t result = llvm::MetadataTracking::track((uint64_t)&v20, a2, 2);
    if (&v20 == v2)
    {
      if (!v20) {
        return result;
      }
      int v15 = *v20;
      if ((v15 - 4) > 0x1E)
      {
        if ((v15 - 3) >= 0xFFFFFFFE) {
          uint64_t v18 = v20;
        }
        else {
          uint64_t v18 = 0;
        }
        if ((v15 - 3) < 0xFFFFFFFE)
        {
          if (v15 == 3) {
            *((void *)v20 + 1) = 0;
          }
          return result;
        }
        unint64_t v17 = (unint64_t)(v18 + 8);
      }
      else
      {
        if ((v20[1] & 0x7F) != 2 && !*((_DWORD *)v20 + 3)) {
          return result;
        }
        uint64_t v16 = *((void *)v20 + 2);
        if ((v16 & 4) == 0) {
          return result;
        }
        unint64_t v17 = v16 & 0xFFFFFFFFFFFFFFF8;
        if (!v17) {
          return result;
        }
      }
      uint64_t v21 = &v20;
      return sub_1CC5FA668(v17 + 16, &v21);
    }
    uint64_t v3 = *v2;
    if (!*v2) {
      goto LABEL_4;
    }
    int v7 = *v3;
    if ((v7 - 4) > 0x1E)
    {
      if ((v7 - 3) >= 0xFFFFFFFE) {
        uint64_t v13 = *v2;
      }
      else {
        uint64_t v13 = 0;
      }
      if ((v7 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v9 = (unint64_t)(v13 + 8);
LABEL_28:
        uint64_t v21 = v2;
        uint64_t result = sub_1CC5FA668(v9 + 16, &v21);
        goto LABEL_4;
      }
      if (v7 == 3) {
        *((void *)v3 + 1) = 0;
      }
    }
    else if ((v3[1] & 0x7F) == 2 || *((_DWORD *)v3 + 3))
    {
      uint64_t v8 = *((void *)v3 + 2);
      if ((v8 & 4) != 0)
      {
        unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFF8;
        if (v9) {
          goto LABEL_28;
        }
      }
    }
LABEL_4:
    int v4 = v20;
    *int v2 = v20;
    if (v4)
    {
      unsigned int v5 = &v20;
      return llvm::MetadataTracking::retrack((uint64_t)v5, v4, (uint64_t)v2);
    }
    return result;
  }
  uint64_t v19 = 0;
  if (&v19 == v2) {
    return result;
  }
  uint64_t v6 = *v2;
  if (!*v2)
  {
LABEL_9:
    *int v2 = 0;
    return result;
  }
  int v10 = *v6;
  if ((v10 - 4) > 0x1E)
  {
    if ((v10 - 3) >= 0xFFFFFFFE) {
      uint64_t v14 = *v2;
    }
    else {
      uint64_t v14 = 0;
    }
    if ((v10 - 3) <= 0xFFFFFFFD)
    {
      if (v10 == 3) {
        *((void *)v6 + 1) = 0;
      }
      goto LABEL_9;
    }
    unint64_t v12 = (unint64_t)(v14 + 8);
  }
  else
  {
    if ((v6[1] & 0x7F) != 2 && !*((_DWORD *)v6 + 3)) {
      goto LABEL_9;
    }
    uint64_t v11 = *((void *)v6 + 2);
    if ((v11 & 4) == 0) {
      goto LABEL_9;
    }
    unint64_t v12 = v11 & 0xFFFFFFFFFFFFFFF8;
    if (!v12) {
      goto LABEL_9;
    }
  }
  uint64_t v21 = (unsigned __int8 **)(result + 48);
  uint64_t result = sub_1CC5FA668(v12 + 16, &v21);
  int v4 = v19;
  *int v2 = v19;
  if (v4)
  {
    unsigned int v5 = &v19;
    return llvm::MetadataTracking::retrack((uint64_t)v5, v4, (uint64_t)v2);
  }
  return result;
}

uint64_t LLVMGetMetadataKind(char *a1)
{
  unint64_t v1 = *a1;
  if (v1 > 0x22) {
    return 8;
  }
  else {
    return dword_1CFAC86B0[v1];
  }
}

uint64_t sub_1CC58A984(uint64_t a1, uint64_t *a2, unsigned __int8 *a3)
{
  if (!a3) {
    return 0;
  }
  int v4 = *a3;
  if (v4 == 5) {
    return 1;
  }
  if (v4 != 4 && (v4 - 6) >= 0x1D) {
    return 0;
  }
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  if (v7 == *a2)
  {
    uint64_t v9 = *((unsigned int *)a2 + 5);
    int v10 = (unsigned __int8 **)(v7 + 8 * v9);
    if (v9)
    {
      uint64_t v11 = 0;
      while (*(unsigned __int8 **)(v7 + v11) != a3)
      {
        v11 += 8;
        if (8 * v9 == v11) {
          goto LABEL_25;
        }
      }
      int v10 = (unsigned __int8 **)(v7 + v11);
    }
LABEL_25:
    uint64_t v8 = a2[1];
  }
  else
  {
    uint64_t v13 = *((unsigned int *)a2 + 4);
    int v14 = v13 - 1;
    unsigned int v15 = (v13 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    int v10 = (unsigned __int8 **)(v7 + 8 * v15);
    uint64_t v16 = *v10;
    if (*v10 == (unsigned __int8 *)-1)
    {
      unint64_t v17 = 0;
LABEL_27:
      if (v17) {
        int v10 = v17;
      }
      if (*v10 != a3)
      {
        LODWORD(v9) = *((_DWORD *)a2 + 5);
        int v10 = (unsigned __int8 **)(v7 + 8 * v13);
        goto LABEL_32;
      }
    }
    else
    {
      unint64_t v17 = 0;
      int v18 = 1;
      while (v16 != a3)
      {
        if (v17) {
          BOOL v19 = 0;
        }
        else {
          BOOL v19 = v16 == (unsigned __int8 *)-2;
        }
        if (v19) {
          unint64_t v17 = v10;
        }
        unsigned int v20 = v15 + v18++;
        unsigned int v15 = v20 & v14;
        int v10 = (unsigned __int8 **)(v7 + 8 * (v20 & v14));
        uint64_t v16 = *v10;
        if (*v10 == (unsigned __int8 *)-1) {
          goto LABEL_27;
        }
      }
    }
    LODWORD(v9) = *((_DWORD *)a2 + 5);
  }
LABEL_32:
  if (v7 == v8) {
    unsigned int v21 = v9;
  }
  else {
    unsigned int v21 = *((_DWORD *)a2 + 4);
  }
  if (v10 != (unsigned __int8 **)(v7 + 8 * v21)) {
    return 1;
  }
  uint64_t v22 = *(void *)(a1 + 8);
  uint64_t v23 = *(unsigned int *)(a1 + 20);
  if (v22 == *(void *)a1)
  {
    if (v23)
    {
      uint64_t v24 = 0;
      uint64_t v25 = 8 * v23;
      uint64_t v26 = *(unsigned __int8 ***)(a1 + 8);
      while (*v26 != a3)
      {
        if (*v26 == (unsigned __int8 *)-2) {
          uint64_t v24 = v26;
        }
        ++v26;
        v25 -= 8;
        if (!v25)
        {
          if (!v24) {
            goto LABEL_45;
          }
          *uint64_t v24 = a3;
          --*(_DWORD *)(a1 + 24);
          goto LABEL_69;
        }
      }
      return 0;
    }
LABEL_45:
    unsigned int v27 = *(_DWORD *)(a1 + 16);
    if (v23 < v27)
    {
      *(_DWORD *)(a1 + 20) = v23 + 1;
      *(void *)(v22 + 8 * v23) = a3;
      goto LABEL_69;
    }
  }
  else
  {
    unsigned int v27 = *(_DWORD *)(a1 + 16);
  }
  if (3 * v27 <= 4 * ((int)v23 - *(_DWORD *)(a1 + 24)))
  {
    if (v27 >= 0x40) {
      v27 *= 2;
    }
    else {
      unsigned int v27 = 128;
    }
    goto LABEL_112;
  }
  if (v27 - v23 < v27 >> 3)
  {
LABEL_112:
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a1, v27);
    unsigned int v27 = *(_DWORD *)(a1 + 16);
    uint64_t v22 = *(void *)(a1 + 8);
  }
  unsigned int v28 = v27 - 1;
  unsigned int v29 = (v27 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  uint64_t v30 = (unsigned __int8 **)(v22 + 8 * v29);
  uint64_t v31 = *v30;
  if (*v30 != (unsigned __int8 *)-1)
  {
    BOOL v32 = 0;
    int v33 = 1;
    while (v31 != a3)
    {
      if (v32) {
        BOOL v34 = 0;
      }
      else {
        BOOL v34 = v31 == (unsigned __int8 *)-2;
      }
      if (v34) {
        BOOL v32 = v30;
      }
      unsigned int v35 = v29 + v33++;
      unsigned int v29 = v35 & v28;
      uint64_t v30 = (unsigned __int8 **)(v22 + 8 * (v35 & v28));
      uint64_t v31 = *v30;
      if (*v30 == (unsigned __int8 *)-1) {
        goto LABEL_62;
      }
    }
    return 0;
  }
  BOOL v32 = 0;
LABEL_62:
  if (v32) {
    int v36 = v32;
  }
  else {
    int v36 = v30;
  }
  if (*v36 == a3) {
    return 0;
  }
  if (*v36 == (unsigned __int8 *)-2) {
    --*(_DWORD *)(a1 + 24);
  }
  else {
    ++*(_DWORD *)(a1 + 20);
  }
  *int v36 = a3;
LABEL_69:
  uint64_t v37 = *((unsigned int *)a3 + 2);
  if (!v37) {
    return 0;
  }
  uint64_t v38 = -8 * v37;
  while (1)
  {
    uint64_t result = sub_1CC58A984(a1, a2, *(void *)&a3[v38]);
    if (result) {
      break;
    }
    v38 += 8;
    if (!v38) {
      return result;
    }
  }
  uint64_t v39 = a2[1];
  uint64_t v40 = *((unsigned int *)a2 + 5);
  if (v39 != *a2)
  {
    unsigned int v44 = *((_DWORD *)a2 + 4);
    goto LABEL_85;
  }
  if (v40)
  {
    uint64_t v41 = 0;
    uint64_t v42 = 8 * v40;
    uint64_t v43 = (unsigned __int8 **)a2[1];
    while (*v43 != a3)
    {
      if (*v43 == (unsigned __int8 *)-2) {
        uint64_t v41 = v43;
      }
      ++v43;
      v42 -= 8;
      if (!v42)
      {
        if (!v41) {
          goto LABEL_82;
        }
        *uint64_t v41 = a3;
        --*((_DWORD *)a2 + 6);
        return 1;
      }
    }
    return 1;
  }
LABEL_82:
  unsigned int v44 = *((_DWORD *)a2 + 4);
  if (v40 >= v44)
  {
LABEL_85:
    if (3 * v44 <= 4 * ((int)v40 - *((_DWORD *)a2 + 6)))
    {
      if (v44 >= 0x40) {
        v44 *= 2;
      }
      else {
        unsigned int v44 = 128;
      }
    }
    else if (v44 - v40 >= v44 >> 3)
    {
      goto LABEL_87;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a2, v44);
    unsigned int v44 = *((_DWORD *)a2 + 4);
    uint64_t v39 = a2[1];
LABEL_87:
    unsigned int v45 = v44 - 1;
    unsigned int v46 = (v44 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    uint64_t v47 = (unsigned __int8 **)(v39 + 8 * v46);
    unsigned int v48 = *v47;
    if (*v47 == (unsigned __int8 *)-1)
    {
      uint64_t v49 = 0;
LABEL_99:
      if (v49) {
        uint64_t v53 = v49;
      }
      else {
        uint64_t v53 = v47;
      }
      if (*v53 != a3)
      {
        if (*v53 == (unsigned __int8 *)-2) {
          --*((_DWORD *)a2 + 6);
        }
        else {
          ++*((_DWORD *)a2 + 5);
        }
        *uint64_t v53 = a3;
      }
    }
    else
    {
      uint64_t v49 = 0;
      int v50 = 1;
      while (v48 != a3)
      {
        if (v49) {
          BOOL v51 = 0;
        }
        else {
          BOOL v51 = v48 == (unsigned __int8 *)-2;
        }
        if (v51) {
          uint64_t v49 = v47;
        }
        unsigned int v52 = v46 + v50++;
        unsigned int v46 = v52 & v45;
        uint64_t v47 = (unsigned __int8 **)(v39 + 8 * (v52 & v45));
        unsigned int v48 = *v47;
        if (*v47 == (unsigned __int8 *)-1) {
          goto LABEL_99;
        }
      }
    }
    return 1;
  }
  *((_DWORD *)a2 + 5) = v40 + 1;
  *(void *)(v39 + 8 * v40) = a3;
  return 1;
}

unsigned char *sub_1CC58ADC4(uint64_t **a1, unsigned char *a2)
{
  if (*a2 == 5) {
    return 0;
  }
  uint64_t v3 = *a1;
  uint64_t v5 = **a1;
  uint64_t v4 = (*a1)[1];
  if (v4 == v5)
  {
    uint64_t v6 = *((unsigned int *)v3 + 5);
    uint64_t v7 = (void *)(v4 + 8 * v6);
    if (v6)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 8 * v6;
      while (*(unsigned char **)(v4 + v8) != a2)
      {
        v8 += 8;
        if (v9 == v8) {
          goto LABEL_21;
        }
      }
      uint64_t v7 = (void *)(v4 + v8);
    }
LABEL_21:
    uint64_t v5 = (*a1)[1];
  }
  else
  {
    uint64_t v10 = *((unsigned int *)v3 + 4);
    int v11 = v10 - 1;
    unsigned int v12 = (v10 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v7 = (void *)(v4 + 8 * v12);
    uint64_t v13 = (unsigned char *)*v7;
    if (*v7 == -1)
    {
      int v14 = 0;
LABEL_28:
      if (v14) {
        uint64_t v7 = v14;
      }
      if ((unsigned char *)*v7 != a2) {
        uint64_t v7 = (void *)(v4 + 8 * v10);
      }
    }
    else
    {
      int v14 = 0;
      int v15 = 1;
      while (v13 != a2)
      {
        if (v14) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v13 == (unsigned char *)-2;
        }
        if (v16) {
          int v14 = v7;
        }
        unsigned int v17 = v12 + v15++;
        unsigned int v12 = v17 & v11;
        uint64_t v7 = (void *)(v4 + 8 * (v17 & v11));
        uint64_t v13 = (unsigned char *)*v7;
        if (*v7 == -1) {
          goto LABEL_28;
        }
      }
    }
  }
  BOOL v16 = v4 == v5;
  uint64_t v18 = 16;
  if (v16) {
    uint64_t v18 = 20;
  }
  if (v7 == (void *)(v4 + 8 * *(unsigned int *)((char *)v3 + v18))) {
    return a2;
  }
  else {
    return 0;
  }
}

uint64_t sub_1CC58AEC8(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  uint64_t result = sub_1CD40EA84(*(void *)a1, *(_DWORD *)(a1 + 16), (uint64_t)a2, &v97);
  if ((result & 1) == 0)
  {
    if (a2)
    {
      uint64_t v6 = *a2;
      uint64_t v5 = a2;
      switch(*a2)
      {
        case 0xEu:
          uint64_t v5 = *(void **)(a1 + 24);
          break;
        case 0xFu:
          break;
        case 0x10u:
          if (*((void *)a2 + 5)) {
            goto LABEL_3;
          }
          uint64_t v8 = sub_1CC58B858(a1, *(void *)&a2[-8 * *((unsigned int *)a2 + 2)]);
          uint64_t v9 = *((void *)a2 + 2);
          uint64_t v10 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFF8);
          if ((v9 & 4) != 0) {
            uint64_t v10 = (uint64_t *)*v10;
          }
          int v11 = &a2[-8 * *((unsigned int *)a2 + 2)];
          uint64_t v12 = *((void *)v11 + 1);
          if (v12)
          {
            uint64_t v26 = *(void **)(v12 + 8);
            size_t v27 = *v26;
            int v14 = (unsigned __int8 *)(v26 + 3);
            size_t v13 = v27;
          }
          else
          {
            size_t v13 = 0;
            int v14 = 0;
          }
          uint64_t v28 = *((void *)v11 + 2);
          if (v28)
          {
            unsigned int v44 = *(void **)(v28 + 8);
            unsigned int v45 = (void *)*v44;
            uint64_t v30 = (unsigned __int8 *)(v44 + 3);
            unsigned int v29 = v45;
          }
          else
          {
            unsigned int v29 = 0;
            uint64_t v30 = 0;
          }
          unsigned int v46 = (unsigned __int8 *)*((void *)v11 + 3);
          if (v46)
          {
            uint64_t v56 = (size_t *)*((void *)v46 + 1);
            size_t v57 = *v56;
            unsigned int v46 = (unsigned __int8 *)(v56 + 3);
            size_t v47 = v57;
          }
          else
          {
            size_t v47 = 0;
          }
          uint64_t v58 = (unsigned __int8 *)*((void *)v11 + 9);
          if (v58)
          {
            uint64_t v68 = (size_t *)*((void *)v58 + 1);
            size_t v69 = *v68;
            uint64_t v58 = (unsigned __int8 *)(v68 + 3);
            size_t v59 = v69;
          }
          else
          {
            size_t v59 = 0;
          }
          uint64_t v70 = *((void *)v11 + 8);
          int v71 = (unsigned __int8 *)*((void *)v11 + 10);
          if (v71)
          {
            uint64_t v75 = (size_t *)*((void *)v71 + 1);
            size_t v76 = *v75;
            int v71 = (unsigned __int8 *)(v75 + 3);
            size_t v72 = v76;
          }
          else
          {
            size_t v72 = 0;
          }
          uint64_t Impl = (uint64_t)sub_1CD5AE724(v10, *((_DWORD *)a2 + 6), v8, v14, v13, a2[28] != 0, v30, v29, *((_DWORD *)a2 + 8), v46, v47, 2, 0, 0, 0, v70, *((void *)a2 + 5), a2[48] != 0, a2[49] != 0,
                            *((_DWORD *)a2 + 13),
                            a2[56] != 0,
                            v58,
                            v59,
                            v71,
                            v72,
                            1);
          goto LABEL_75;
        case 0x11u:
          sub_1CC58AEC8(a1, *(void *)&a2[-8 * *((unsigned int *)a2 + 2) + 40]);
          uint64_t v15 = (uint64_t)a2;
          if (*a2 != 15) {
            uint64_t v15 = *(void *)&a2[-8 * *((unsigned int *)a2 + 2)];
          }
          BOOL v16 = (void *)sub_1CC58B858(a1, v15);
          unsigned int v17 = &a2[-8 * *((unsigned int *)a2 + 2)];
          uint64_t v18 = *((void *)v17 + 2);
          if (v18 && **(void **)(v18 + 8))
          {
            unsigned int v21 = 0;
            unsigned int v20 = "";
          }
          else
          {
            uint64_t v19 = *((void *)v17 + 3);
            if (v19)
            {
              uint64_t v24 = *(void **)(v19 + 8);
              uint64_t v25 = (void *)*v24;
              unsigned int v20 = (unsigned __int8 *)(v24 + 3);
              unsigned int v21 = v25;
            }
            else
            {
              unsigned int v20 = 0;
              unsigned int v21 = 0;
            }
          }
          uint64_t v31 = (void *)sub_1CC58B858(a1, *((void *)v17 + 4));
          uint64_t v32 = *((unsigned int *)a2 + 2);
          if (v32 < 9) {
            uint64_t v33 = 0;
          }
          else {
            uint64_t v33 = *(void *)&a2[-8 * v32 + 64];
          }
          uint64_t v34 = sub_1CC58B858(a1, v33);
          uint64_t v35 = sub_1CC58B858(a1, *(void *)&a2[-8 * *((unsigned int *)a2 + 2) + 40]);
          uint64_t v36 = *((void *)a2 + 2);
          uint64_t v37 = (uint64_t *)(v36 & 0xFFFFFFFFFFFFFFF8);
          if ((a2[1] & 0x7F) == 1)
          {
            if ((v36 & 4) != 0) {
              uint64_t v37 = (uint64_t *)*v37;
            }
            uint64_t v38 = *(void *)&a2[-8 * *((unsigned int *)a2 + 2) + 16];
            if (v38)
            {
              unsigned int v48 = *(void **)(v38 + 8);
              size_t v49 = *v48;
              uint64_t v40 = (unsigned __int8 *)(v48 + 3);
              size_t v39 = v49;
            }
            else
            {
              size_t v39 = 0;
              uint64_t v40 = 0;
            }
            uint64_t Impl = sub_1CC583098(v37, v16, v40, v39, v20, v21, v16, *((_DWORD *)a2 + 6), v31, *((_DWORD *)a2 + 7), v34, *((void *)a2 + 4), *((void *)a2 + 5), v35, 0, 0, 0, 0, 0,
                     "",
                     0,
                     1,
                     1);
          }
          else
          {
            if ((v36 & 4) != 0) {
              uint64_t v37 = (uint64_t *)*v37;
            }
            uint64_t v41 = *(void *)&a2[-8 * *((unsigned int *)a2 + 2) + 16];
            if (v41)
            {
              BOOL v51 = *(void **)(v41 + 8);
              size_t v52 = *v51;
              uint64_t v43 = (unsigned __int8 *)(v51 + 3);
              size_t v42 = v52;
            }
            else
            {
              size_t v42 = 0;
              uint64_t v43 = 0;
            }
            uint64_t v94 = v31;
            unint64_t v95 = v21;
            uint64_t v5 = (void *)sub_1CC583098(v37, v16, v43, v42, v20, v21, v16, *((_DWORD *)a2 + 6), v31, *((_DWORD *)a2 + 7), v34, *((void *)a2 + 4), *((void *)a2 + 5), v35, 0, 0, 0, 0, 0,
                           "",
                           0,
                           0,
                           1);
            uint64_t v53 = *(void *)&a2[-8 * *((unsigned int *)a2 + 2) + 24];
            if (v53)
            {
              uint64_t v60 = *(size_t **)(v53 + 8);
              size_t v61 = *v60;
              int v55 = v60 + 3;
              size_t v54 = v61;
            }
            else
            {
              size_t v54 = 0;
              int v55 = 0;
            }
            uint64_t v62 = *(void *)(a1 + 32);
            int v97 = 0;
            if (!sub_1CD45B528(v62, *(_DWORD *)(a1 + 48), (uint64_t)v5, &v97)
              || v97 == (void *)(*(void *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 48)))
            {
              uint64_t v73 = *(void *)&a2[-8 * *((unsigned int *)a2 + 2) + 24];
              if (v73)
              {
                unsigned int v77 = *(uint64_t **)(v73 + 8);
                uint64_t v78 = *v77;
                unsigned int v74 = v77 + 3;
                uint64_t v73 = v78;
              }
              else
              {
                unsigned int v74 = 0;
              }
              int v97 = v5;
              *(void *)&v98[0] = v74;
              *((void *)&v98[0] + 1) = v73;
              sub_1CD5A0A5C((uint64_t)v96, a1 + 32, (uint64_t *)&v97, v98);
              break;
            }
            if (*((void *)v97 + 2) == v54 && (!v54 || !memcmp(*((const void **)v97 + 1), v55, v54))) {
              break;
            }
            uint64_t v63 = *((void *)a2 + 2);
            uint64_t v64 = (uint64_t *)(v63 & 0xFFFFFFFFFFFFFFF8);
            if ((v63 & 4) != 0) {
              uint64_t v64 = (uint64_t *)*v64;
            }
            uint64_t v65 = *(void *)&a2[-8 * *((unsigned int *)a2 + 2) + 16];
            if (v65)
            {
              long long v79 = *(void **)(v65 + 8);
              size_t v80 = *v79;
              unsigned int v67 = (unsigned __int8 *)(v79 + 3);
              size_t v66 = v80;
            }
            else
            {
              size_t v66 = 0;
              unsigned int v67 = 0;
            }
            uint64_t Impl = sub_1CC583098(v64, v16, v67, v66, v20, v95, v16, *((_DWORD *)a2 + 6), v94, *((_DWORD *)a2 + 7), v34, *((void *)a2 + 4), *((void *)a2 + 5), v35, 0, 0, 0, 0, 0,
                     "",
                     0,
                     1,
                     1);
          }
          goto LABEL_75;
        default:
          if ((v6 & 0xFE) == 0x12)
          {
            uint64_t v7 = (unsigned char *)sub_1CC58B858(a1, *(void *)&a2[-8 * *((unsigned int *)a2 + 2) + 8]);
            uint64_t v5 = v7;
            if (v7)
            {
              switch(*v7)
              {
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 0xA:
                case 0xB:
                case 0xC:
                case 0xD:
                case 0xE:
                case 0xF:
                case 0x10:
                case 0x11:
                case 0x12:
                case 0x13:
                case 0x14:
                case 0x15:
                case 0x16:
                case 0x17:
                case 0x18:
                case 0x19:
                case 0x1A:
                case 0x1B:
                case 0x1C:
                case 0x1D:
                case 0x1E:
                case 0x1F:
                case 0x20:
                case 0x21:
                case 0x22:
                  goto LABEL_4;
                default:
                  goto LABEL_3;
              }
            }
          }
          else
          {
            if (v6 > 0x22) {
              goto LABEL_76;
            }
            if (((1 << v6) & 0x69FFC7F00) != 0) {
              goto LABEL_3;
            }
            if (v6 == 5)
            {
              uint64_t v22 = sub_1CC58B858(a1, *(void *)&a2[-8 * *((unsigned int *)a2 + 2)]);
              if (*((_DWORD *)a2 + 2) == 2) {
                uint64_t v23 = *((void *)a2 - 1);
              }
              else {
                uint64_t v23 = 0;
              }
              uint64_t v84 = sub_1CC58B858(a1, v23);
              uint64_t v85 = *((void *)a2 + 2);
              uint64_t v86 = (void *)(v85 & 0xFFFFFFFFFFFFFFF8);
              if ((a2[1] & 0x7F) == 1)
              {
                if ((v85 & 4) != 0) {
                  uint64_t v86 = (void *)*v86;
                }
                unsigned int v87 = *((_DWORD *)a2 + 1);
                unsigned int v88 = *((unsigned __int16 *)a2 + 1);
                uint64_t v89 = v22;
                int v90 = 1;
              }
              else
              {
                if ((v85 & 4) != 0) {
                  uint64_t v86 = (void *)*v86;
                }
                unsigned int v87 = *((_DWORD *)a2 + 1);
                unsigned int v88 = *((unsigned __int16 *)a2 + 1);
                uint64_t v89 = v22;
                int v90 = 0;
              }
              uint64_t Impl = llvm::DILocation::getImpl(v86, v87, v88, v89, v84, 0, v90, 1);
LABEL_75:
              uint64_t v5 = (void *)Impl;
            }
            else
            {
LABEL_76:
              int v97 = (char *)v98 + 8;
              *(void *)&v98[0] = 0x800000000;
              unsigned int v81 = *((_DWORD *)a2 + 2);
              if (v81 >= 9) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v81)
              {
                uint64_t v91 = -8 * v81;
                do
                {
                  uint64_t v92 = *(void *)&a2[v91];
                  if (v92)
                  {
                    v96[0] = 0;
                    if (sub_1CD40EA84(*(void *)a1, *(_DWORD *)(a1 + 16), v92, v96)) {
                      BOOL v93 = v96[0] == *(void *)a1 + 16 * *(unsigned int *)(a1 + 16);
                    }
                    else {
                      BOOL v93 = 1;
                    }
                    if (!v93) {
                      uint64_t v92 = *(void *)(v96[0] + 8);
                    }
                    if (LODWORD(v98[0]) >= (unint64_t)DWORD1(v98[0])) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((void *)v97 + LODWORD(v98[0])) = v92;
                    ++LODWORD(v98[0]);
                  }
                  v91 += 8;
                }
                while (v91);
              }
              uint64_t v82 = *((void *)a2 + 2);
              uint64_t v83 = (void *)(v82 & 0xFFFFFFFFFFFFFFF8);
              if ((v82 & 4) != 0) {
                uint64_t v83 = (void *)*v83;
              }
              uint64_t v5 = llvm::MDTuple::getImpl((uint64_t)v83, v97, LODWORD(v98[0]), 0, 1);
              if (v97 != (char *)v98 + 8) {
                free(v97);
              }
            }
          }
          break;
      }
    }
    else
    {
LABEL_3:
      uint64_t v5 = 0;
    }
LABEL_4:
    int v97 = a2;
    uint64_t result = (uint64_t)sub_1CD4F8350((uint64_t *)a1, &v97);
    *(void *)(result + 8) = v5;
  }
  return result;
}

uint64_t sub_1CC58B6F8(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 8 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v10 = 1;
    }
    else
    {
      uint64_t v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v8 = v6;
        }
        unsigned int v13 = v5 + v9++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (void *)(a1 + 8 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v10 = 1;
        if (*v6 == a3) {
          goto LABEL_7;
        }
      }
      uint64_t v10 = 0;
      if (v8) {
        uint64_t v6 = v8;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v10 = 0;
  }
LABEL_7:
  *a4 = v6;
  return v10;
}

void *sub_1CC58B78C(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD5B0640(a1, v4, &v4[v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC58B858(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (a2)
  {
    uint64_t v6 = 0;
    if (sub_1CD40EA84(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v6)) {
      BOOL v5 = v6 == *(void *)a1 + 16 * *(unsigned int *)(a1 + 16);
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      return *(void *)(v6 + 8);
    }
  }
  return v2;
}

unsigned __int8 *sub_1CC58B8C8(uint64_t **a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2;
  if (!a2 || *a2 != 5) {
    return v2;
  }
  uint64_t v3 = *a1;
  unsigned int v13 = a2;
  llvm::MetadataTracking::track((uint64_t)&v13, a2, 2);
  sub_1CC588F58(&v14, v3, (uint64_t)&v13);
  uint64_t v2 = v14;
  if (v14)
  {
    int v4 = *v14;
    if ((v4 - 4) > 0x1E)
    {
      if ((v4 - 3) >= 0xFFFFFFFE) {
        int v7 = v14;
      }
      else {
        int v7 = 0;
      }
      if ((v4 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v8 = (unint64_t)(v7 + 8);
LABEL_17:
        uint64_t v15 = &v14;
        sub_1CC5FA668(v8 + 16, &v15);
        goto LABEL_7;
      }
      if (v4 == 3) {
        *((void *)v14 + 1) = 0;
      }
    }
    else if ((v14[1] & 0x7F) == 2 || *((_DWORD *)v14 + 3))
    {
      uint64_t v11 = *((void *)v14 + 2);
      if ((v11 & 4) != 0)
      {
        unint64_t v8 = v11 & 0xFFFFFFFFFFFFFFF8;
        if (v8) {
          goto LABEL_17;
        }
      }
    }
  }
LABEL_7:
  if (v13)
  {
    int v5 = *v13;
    if ((v5 - 4) > 0x1E)
    {
      if ((v5 - 3) >= 0xFFFFFFFE) {
        int v9 = v13;
      }
      else {
        int v9 = 0;
      }
      if ((v5 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v10 = (unint64_t)(v9 + 8);
LABEL_23:
        uint64_t v15 = &v13;
        sub_1CC5FA668(v10 + 16, &v15);
        return v2;
      }
      if (v5 == 3) {
        *((void *)v13 + 1) = 0;
      }
    }
    else if ((v13[1] & 0x7F) == 2 || *((_DWORD *)v13 + 3))
    {
      uint64_t v12 = *((void *)v13 + 2);
      if ((v12 & 4) != 0)
      {
        unint64_t v10 = v12 & 0xFFFFFFFFFFFFFFF8;
        if (v10) {
          goto LABEL_23;
        }
      }
    }
  }
  return v2;
}

uint64_t llvm::DILocation::DILocation(uint64_t a1, uint64_t a2, char a3, int a4, __int16 a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t result = llvm::MDNode::MDNode(a1, a2, 5, a3, a6, a7, 0, 0);
  *(_DWORD *)(result + 4) = a4;
  *(_WORD *)(result + 2) = a5;
  if (a8) {
    char v12 = 0x80;
  }
  else {
    char v12 = 0;
  }
  *(unsigned char *)(result + 1) = v12 & 0x80 | *(unsigned char *)(result + 1) & 0x7F;
  return result;
}

{
  uint64_t result;
  char v12;

  uint64_t result = llvm::MDNode::MDNode(a1, a2, 5, a3, a6, a7, 0, 0);
  *(_DWORD *)(result + 4) = a4;
  *(_WORD *)(result + 2) = a5;
  if (a8) {
    char v12 = 0x80;
  }
  else {
    char v12 = 0;
  }
  *(unsigned char *)(result + 1) = v12 & 0x80 | *(unsigned char *)(result + 1) & 0x7F;
  return result;
}

uint64_t llvm::DILocation::getImpl(void *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (HIWORD(a3)) {
    unsigned int v14 = 0;
  }
  else {
    unsigned int v14 = a3;
  }
  if (a7) {
    goto LABEL_12;
  }
  uint64_t v16 = *a1;
  unsigned int v17 = (uint64_t *)(*a1 + 464);
  uint64_t v31 = (void *)__PAIR64__(v14, a2);
  uint64_t v32 = a4;
  uint64_t v33 = a5;
  LOBYTE(v34) = a6;
  uint64_t v30 = 0;
  uint64_t v18 = 0;
  if (sub_1CC592C38(v17, &v31, &v30)) {
    BOOL v19 = v30 == (uint64_t *)(*(void *)(v16 + 464) + 8 * *(unsigned int *)(v16 + 480));
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19) {
    uint64_t v18 = *v30;
  }
  if (!v18 && a8)
  {
LABEL_12:
    uint64_t v31 = &v33;
    uint64_t v33 = a4;
    uint64_t v32 = 0x200000001;
    if (a5)
    {
      uint64_t v34 = a5;
      LODWORD(v32) = 2;
      size_t v20 = 16;
    }
    else
    {
      size_t v20 = 8;
    }
    unsigned int v21 = operator new(v20 + 24);
    bzero(v21, v20);
    uint64_t v22 = llvm::MDNode::MDNode((uint64_t)v21 + v20, (uint64_t)a1, 5, a7, (uint64_t)v31, v32, 0, 0);
    *(_DWORD *)(v22 + 4) = a2;
    *(_WORD *)(v22 + 2) = v14;
    if (a6) {
      char v23 = 0x80;
    }
    else {
      char v23 = 0;
    }
    *(unsigned char *)(v22 + 1) = v23 & 0x80 | *(unsigned char *)(v22 + 1) & 0x7F;
    uint64_t v24 = *a1;
    uint64_t v29 = v22;
    if (a7)
    {
      if (a7 == 1) {
        llvm::MDNode::storeDistinctInContext((llvm::MDNode *)v22);
      }
      goto LABEL_25;
    }
    uint64_t v30 = 0;
    if (sub_1CC593034((uint64_t *)(v24 + 464), &v29, &v30))
    {
LABEL_25:
      uint64_t v18 = v29;
      if (v31 != &v33) {
        free(v31);
      }
      return v18;
    }
    int v25 = *(_DWORD *)(v24 + 472);
    unsigned int v26 = *(_DWORD *)(v24 + 480);
    if (4 * v25 + 4 >= 3 * v26)
    {
      v26 *= 2;
    }
    else if (v26 + ~v25 - *(_DWORD *)(v24 + 476) > v26 >> 3)
    {
LABEL_22:
      size_t v27 = v30;
      ++*(_DWORD *)(v24 + 472);
      if (*v27 != -4096) {
        --*(_DWORD *)(v24 + 476);
      }
      *size_t v27 = v29;
      goto LABEL_25;
    }
    sub_1CC593238(v24 + 464, v26);
    uint64_t v30 = 0;
    sub_1CC593034((uint64_t *)(v24 + 464), &v29, &v30);
    goto LABEL_22;
  }
  return v18;
}

llvm::DILocation *llvm::DILocation::getMergedLocations(llvm::DILocation **a1, uint64_t a2, const llvm::DILocation *a3)
{
  if (a2 == 1) {
    return *a1;
  }
  if (!a2) {
    return 0;
  }
  int v4 = a1 + 1;
  MergedLocatioint n = *a1;
  for (uint64_t i = 8 * a2 - 8; i; i -= 8)
  {
    uint64_t v6 = *v4++;
    MergedLocatioint n = llvm::DILocation::getMergedLocation(MergedLocation, v6, a3);
    uint64_t v7 = 0;
    if (!MergedLocation) {
      return (llvm::DILocation *)v7;
    }
  }
  return MergedLocation;
}

llvm::DILocation *llvm::DILocation::getMergedLocation(llvm::DILocation *this, const llvm::DILocation *a2, const llvm::DILocation *a3)
{
  uint64_t Impl = 0;
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (!this || !a2) {
    return (llvm::DILocation *)Impl;
  }
  if (this == a2) {
    return this;
  }
  uint64_t v7 = v62;
  uint64_t v58 = v62;
  size_t v59 = v62;
  uint64_t v60 = 8;
  int v61 = 0;
  unsigned int v8 = *((_DWORD *)this + 2);
  if (v8 != 2) {
    goto LABEL_6;
  }
  uint64_t v41 = *((void *)this - 1);
  if (v41)
  {
    unsigned int v42 = 0;
    unsigned int v43 = 8;
    unsigned int v44 = v62;
    while (v44 == v7)
    {
      if (v42)
      {
        unsigned int v45 = 0;
        uint64_t v46 = 8 * v42;
        size_t v47 = v7;
        while (*v47 != v41)
        {
          if (*v47 == -2) {
            unsigned int v45 = v47;
          }
          ++v47;
          v46 -= 8;
          if (!v46)
          {
            if (!v45) {
              goto LABEL_100;
            }
            *unsigned int v45 = v41;
            --v61;
            goto LABEL_102;
          }
        }
        goto LABEL_102;
      }
LABEL_100:
      if (v43 <= v42) {
        break;
      }
      HIDWORD(v60) = v42 + 1;
      *(void *)&v7[8 * v42] = v41;
LABEL_102:
      if (*(_DWORD *)(v41 + 8) == 2)
      {
        unsigned int v43 = v60;
        unsigned int v42 = HIDWORD(v60);
        uint64_t v7 = v58;
        unsigned int v44 = v59;
        uint64_t v41 = *(void *)(v41 - 8);
        if (v41) {
          continue;
        }
      }
      unsigned int v8 = *((_DWORD *)this + 2);
      goto LABEL_6;
    }
    if (3 * v43 <= 4 * (v42 - v61))
    {
      if (v43 >= 0x40) {
        v43 *= 2;
      }
      else {
        unsigned int v43 = 128;
      }
    }
    else if (v43 - v42 >= v43 >> 3)
    {
      goto LABEL_107;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v58, v43);
    unsigned int v43 = v60;
    unsigned int v44 = v59;
LABEL_107:
    unsigned int v48 = v43 - 1;
    unsigned int v49 = (v43 - 1) & ((v41 >> 4) ^ (v41 >> 9));
    int v50 = &v44[8 * v49];
    uint64_t v51 = *v50;
    if (*v50 == -1)
    {
      size_t v52 = 0;
LABEL_119:
      if (v52) {
        uint64_t v56 = v52;
      }
      else {
        uint64_t v56 = v50;
      }
      if (*v56 != v41)
      {
        if (*v56 == -2) {
          --v61;
        }
        else {
          ++HIDWORD(v60);
        }
        void *v56 = v41;
      }
    }
    else
    {
      size_t v52 = 0;
      int v53 = 1;
      while (v51 != v41)
      {
        if (v52) {
          BOOL v54 = 0;
        }
        else {
          BOOL v54 = v51 == -2;
        }
        if (v54) {
          size_t v52 = v50;
        }
        unsigned int v55 = v49 + v53++;
        unsigned int v49 = v55 & v48;
        int v50 = &v44[8 * (v55 & v48)];
        uint64_t v51 = *v50;
        if (*v50 == -1) {
          goto LABEL_119;
        }
      }
    }
    goto LABEL_102;
  }
  unsigned int v8 = 2;
LABEL_6:
  unint64_t v9 = 0;
  uint64_t v63 = v65;
  uint64_t v64 = 0x500000000;
  unsigned int v67 = 0;
  uint64_t v68 = 0;
  size_t v66 = &v67;
  unint64_t v10 = (char *)this - 8 * v8;
  uint64_t v11 = *(unsigned __int8 **)v10;
  if (v8 == 2) {
    unint64_t v9 = *((void *)v10 + 1);
  }
  if (v11)
  {
    while (1)
    {
      *(void *)&long long v57 = v11;
      *((void *)&v57 + 1) = v9;
      if (v68) {
        goto LABEL_40;
      }
      unsigned int v12 = v64;
      if (v64) {
        break;
      }
LABEL_18:
      if (v64 >= HIDWORD(v64)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v16 = (unsigned __int8 **)((char *)v63 + 16 * v64);
      *uint64_t v16 = v11;
      v16[1] = (unsigned __int8 *)v9;
      LODWORD(v64) = v64 + 1;
LABEL_20:
      int v17 = *v11;
      if (v17 == 17 || (v17 - 11) < 4 || v17 == 33 || (v17 & 0xFE) == 0x12 || v17 == 20 || v17 == 21)
      {
        unsigned int v19 = *((_DWORD *)v11 + 2);
        v11 += 8;
        uint64_t v18 = v19;
LABEL_29:
        uint64_t v11 = *(unsigned __int8 **)&v11[-8 * v18];
        goto LABEL_30;
      }
      if (v17 == 31)
      {
        uint64_t v18 = *((unsigned int *)v11 + 2);
        goto LABEL_29;
      }
      uint64_t v11 = 0;
LABEL_30:
      if (v11) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v9 == 0;
      }
      if (!v20)
      {
        uint64_t v21 = *(unsigned int *)(v9 + 8);
        uint64_t v22 = (unsigned __int8 **)(v9 - 8 * v21);
        uint64_t v11 = *v22;
        if (v21 == 2) {
          unint64_t v9 = (unint64_t)v22[1];
        }
        else {
          unint64_t v9 = 0;
        }
      }
      if (!v11) {
        goto LABEL_42;
      }
    }
    uint64_t v13 = 16 * v64;
    unsigned int v14 = (char *)v63 + 8;
    while ((unsigned __int8 *)*(v14 - 1) != v11 || *v14 != v9)
    {
      v14 += 2;
      v13 -= 16;
      if (!v13) {
        goto LABEL_17;
      }
    }
    if (v13) {
      goto LABEL_20;
    }
LABEL_17:
    if (v64 < 5) {
      goto LABEL_18;
    }
    do
    {
      sub_1CC5933AC((uint64_t *)&v66, *((void *)v63 + 2 * v12 - 2), *((void *)v63 + 2 * v12 - 1), (_OWORD *)v63 + v12 - 1);
      unsigned int v12 = v64 - 1;
      LODWORD(v64) = v64 - 1;
    }
    while (v64);
LABEL_40:
    sub_1CC5933AC((uint64_t *)&v66, (unint64_t)v11, v9, &v57);
    goto LABEL_20;
  }
LABEL_42:
  uint64_t v23 = *((unsigned int *)a2 + 2);
  uint64_t v24 = (char *)a2 - 8 * v23;
  int v25 = *(unsigned __int8 **)v24;
  if (v23 == 2) {
    unint64_t v26 = *((void *)v24 + 1);
  }
  else {
    unint64_t v26 = 0;
  }
  if (!v25) {
    goto LABEL_136;
  }
  while (1)
  {
    if (v68)
    {
      uint64_t v33 = v67;
      if (!v67) {
        goto LABEL_53;
      }
      while (1)
      {
        unint64_t v31 = v33[4];
        if (v31 <= (unint64_t)v25)
        {
          if (v31 < (unint64_t)v25) {
            goto LABEL_67;
          }
          unint64_t v32 = v33[5];
          if (v32 <= v26) {
            break;
          }
        }
LABEL_68:
        uint64_t v33 = (void *)*v33;
        if (!v33) {
          goto LABEL_53;
        }
      }
      if (v32 >= v26) {
        break;
      }
LABEL_67:
      ++v33;
      goto LABEL_68;
    }
    if (v64)
    {
      size_t v27 = (char *)v63 + 8;
      uint64_t v28 = 16 * v64;
      while ((unsigned __int8 *)*(v27 - 1) != v25 || *v27 != v26)
      {
        v27 += 2;
        v28 -= 16;
        if (!v28) {
          goto LABEL_53;
        }
      }
      if (v28) {
        break;
      }
    }
LABEL_53:
    int v30 = *v25;
    if (v30 == 17 || (v30 - 11) < 4 || v30 == 33 || (v30 & 0xFE) == 0x12 || v30 == 20 || v30 == 21)
    {
      unsigned int v35 = *((_DWORD *)v25 + 2);
      v25 += 8;
      uint64_t v34 = v35;
LABEL_71:
      int v25 = *(unsigned __int8 **)&v25[-8 * v34];
      goto LABEL_72;
    }
    if (v30 == 31)
    {
      uint64_t v34 = *((unsigned int *)v25 + 2);
      goto LABEL_71;
    }
    int v25 = 0;
LABEL_72:
    if (v25) {
      BOOL v36 = 1;
    }
    else {
      BOOL v36 = v26 == 0;
    }
    if (!v36)
    {
      uint64_t v37 = *(unsigned int *)(v26 + 8);
      uint64_t v38 = (unsigned __int8 **)(v26 - 8 * v37);
      int v25 = *v38;
      if (v37 == 2) {
        unint64_t v26 = (unint64_t)v38[1];
      }
      else {
        unint64_t v26 = 0;
      }
    }
    if (!v25) {
      goto LABEL_136;
    }
  }
  if (*v25 - 17 >= 3) {
LABEL_136:
  }
    int v25 = (unsigned __int8 *)*((void *)this - *((unsigned int *)this + 2));
  uint64_t v39 = *((void *)a2 + 2);
  uint64_t v40 = (void *)(v39 & 0xFFFFFFFFFFFFFFF8);
  if ((v39 & 4) != 0) {
    uint64_t v40 = (void *)*v40;
  }
  uint64_t Impl = llvm::DILocation::getImpl(v40, 0, 0, (uint64_t)v25, v26, 0, 0, 1);
  sub_1CD40B1BC(v67);
  if (v63 != v65) {
    free(v63);
  }
  if (v59 != v58) {
    free(v59);
  }
  return (llvm::DILocation *)Impl;
}

uint64_t llvm::DIScope::getScope(llvm::DIScope *this)
{
  int v1 = *(unsigned __int8 *)this;
  if (v1 == 17 || (v1 - 11) < 4 || v1 == 33 || (v1 & 0xFE) == 0x12 || v1 == 20 || v1 == 21)
  {
    unsigned int v4 = *((_DWORD *)this + 2);
    this = (llvm::DIScope *)((char *)this + 8);
    uint64_t v3 = v4;
  }
  else
  {
    if (v1 != 31) {
      return 0;
    }
    uint64_t v3 = *((unsigned int *)this + 2);
  }
  return *((void *)this - v3);
}

uint64_t llvm::DINode::getTag(llvm::DINode *this)
{
  return *((unsigned __int16 *)this + 1);
}

uint64_t llvm::DINode::getFlag(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0;
  int v3 = 1;
  switch(a2)
  {
    case 10:
      if (*(void *)a1 != 0x655A67616C464944 || *(_WORD *)(a1 + 8) != 28530) {
        goto LABEL_6;
      }
      unint64_t v2 = 0x100000000;
      goto LABEL_218;
    case 11:
LABEL_36:
      if (*(void *)a1 != 0x685467616C464944 || *(void *)(a1 + 3) != 0x6B6E75685467616CLL) {
        goto LABEL_172;
      }
      uint64_t v12 = 0x2000000;
      goto LABEL_217;
    case 12:
      if (*(void *)a1 == 0x755067616C464944 && *(_DWORD *)(a1 + 8) == 1667853410)
      {
        unint64_t v2 = 0x100000003;
        goto LABEL_218;
      }
      if (*(void *)a1 == 0x655667616C464944 && *(_DWORD *)(a1 + 8) == 1919906915)
      {
        unint64_t v2 = 0x100000800;
        goto LABEL_218;
      }
      goto LABEL_172;
    case 13:
      if (*(void *)a1 == 0x725067616C464944 && *(void *)(a1 + 5) == 0x6574617669725067)
      {
        int v3 = 0;
        unint64_t v2 = 0x100000001;
        goto LABEL_173;
      }
      if (*(void *)a1 == 0x774667616C464944 && *(void *)(a1 + 5) == 0x6C63654464774667)
      {
        unint64_t v2 = 0x100000004;
        goto LABEL_218;
      }
      if (*(void *)a1 == 0x695667616C464944 && *(void *)(a1 + 5) == 0x6C61757472695667)
      {
        unint64_t v2 = 0x100000020;
        goto LABEL_218;
      }
      goto LABEL_172;
    case 14:
      if (*(void *)a1 == 0x784567616C464944 && *(void *)(a1 + 6) == 0x746963696C707845)
      {
        unint64_t v2 = 0x100000080;
        goto LABEL_218;
      }
      unint64_t v2 = 0;
      int v3 = 1;
      switch(a2)
      {
        case 11:
          goto LABEL_36;
        case 14:
          if (*(void *)a1 == 0x694267616C464944 && *(void *)(a1 + 6) == 0x646C656946746942)
          {
            unint64_t v2 = 0x100080000;
            goto LABEL_218;
          }
          if (*(void *)a1 == 0x6F4E67616C464944 && *(void *)(a1 + 6) == 0x6E72757465526F4ELL)
          {
            unint64_t v2 = 0x100100000;
            goto LABEL_218;
          }
          break;
        case 15:
          goto LABEL_46;
        case 16:
          goto LABEL_65;
        default:
          goto LABEL_173;
      }
      goto LABEL_172;
    case 15:
      if (*(void *)a1 == 0x725067616C464944 && *(void *)(a1 + 7) == 0x6465746365746F72)
      {
        uint64_t v12 = 2;
        goto LABEL_217;
      }
LABEL_46:
      if (*(void *)a1 == 0x6E4567616C464944 && *(void *)(a1 + 7) == 0x7373616C436D756ELL)
      {
        unint64_t v2 = 0x101000000;
        goto LABEL_218;
      }
      goto LABEL_172;
    case 16:
      if (*(void *)a1 == 0x704167616C464944 && *(void *)(a1 + 8) == 0x6B636F6C42656C70)
      {
        unint64_t v2 = 0x100000008;
        goto LABEL_218;
      }
      if (*(void *)a1 == 0x724167616C464944 && *(void *)(a1 + 8) == 0x6C61696369666974)
      {
        unint64_t v2 = 0x100000040;
        goto LABEL_218;
      }
      if (*(void *)a1 == 0x725067616C464944 && *(void *)(a1 + 8) == 0x64657079746F746FLL)
      {
        unint64_t v2 = 0x100000100;
        goto LABEL_218;
      }
      if (a2 != 16) {
        goto LABEL_172;
      }
LABEL_65:
      if (*(void *)a1 != 0x6F4E67616C464944 || *(void *)(a1 + 8) != 0x6C6169766972546ELL)
      {
LABEL_6:
        unint64_t v2 = 0;
        goto LABEL_218;
      }
      uint64_t v12 = 0x4000000;
      goto LABEL_217;
    case 18:
      if (*(void *)a1 == 0x655267616C464944
        && *(void *)(a1 + 8) == 0x6942646576726573
        && *(_WORD *)(a1 + 16) == 13428)
      {
        unint64_t v2 = 0x100000010;
        goto LABEL_218;
      }
      if (*(void *)a1 == 0x745367616C464944
        && *(void *)(a1 + 8) == 0x626D654D63697461
        && *(_WORD *)(a1 + 16) == 29285)
      {
        unint64_t v2 = 0x100001000;
        goto LABEL_218;
      }
      goto LABEL_172;
    case 19:
      if (*(void *)a1 == 0x624F67616C464944
        && *(void *)(a1 + 8) == 0x6E696F507463656ALL
        && *(void *)(a1 + 11) == 0x7265746E696F5074)
      {
        unint64_t v2 = 0x100000400;
      }
      else if (*(void *)a1 ^ 0x784567616C464944 | *(void *)(a1 + 8) ^ 0x626D795374726F70 | *(void *)(a1 + 11) ^ 0x736C6F626D795374)
      {
        unint64_t v2 = 0;
      }
      else
      {
        unint64_t v2 = 0x100008000;
      }
      goto LABEL_218;
    case 21:
      unint64_t v2 = 0x100002000;
      if (*(void *)a1 == 0x564C67616C464944
        && *(void *)(a1 + 8) == 0x6566655265756C61
        && *(void *)(a1 + 13) == 0x65636E6572656665)
      {
        goto LABEL_218;
      }
      if (*(void *)a1 == 0x565267616C464944
        && *(void *)(a1 + 8) == 0x6566655265756C61
        && *(void *)(a1 + 13) == 0x65636E6572656665)
      {
        unint64_t v2 = 0x100004000;
        goto LABEL_218;
      }
      if (*(void *)a1 == 0x795467616C464944
        && *(void *)(a1 + 8) == 0x7942737361506570
        && *(void *)(a1 + 13) == 0x65756C6156794273)
      {
        unint64_t v2 = 0x100400000;
        goto LABEL_218;
      }
      goto LABEL_172;
    case 23:
      if (*(void *)a1 == 0x624F67616C464944
        && *(void *)(a1 + 8) == 0x437373616C43636ALL
        && *(void *)(a1 + 15) == 0x6574656C706D6F43)
      {
        unint64_t v2 = 0x100000200;
        goto LABEL_218;
      }
      if (*(void *)a1 == 0x695367616C464944
        && *(void *)(a1 + 8) == 0x65686E49656C676ELL
        && *(void *)(a1 + 15) == 0x65636E6174697265)
      {
        unint64_t v2 = 0x100010000;
        goto LABEL_218;
      }
      if (*(void *)a1 == 0x6E4967616C464944
        && *(void *)(a1 + 8) == 0x64656375646F7274
        && *(void *)(a1 + 15) == 0x6C61757472695664)
      {
        unint64_t v2 = 0x100040000;
        goto LABEL_218;
      }
      goto LABEL_172;
    case 24:
      if (*(void *)a1 != 0x695667616C464944
        || *(void *)(a1 + 8) != 0x686E496C61757472
        || *(void *)(a1 + 16) != 0x65636E6174697265)
      {
        goto LABEL_172;
      }
      unint64_t v2 = 0x100030000;
      goto LABEL_218;
    case 25:
      if (*(void *)a1 == 0x754D67616C464944
        && *(void *)(a1 + 8) == 0x6E49656C7069746CLL
        && *(void *)(a1 + 16) == 0x636E617469726568
        && *(unsigned char *)(a1 + 24) == 101)
      {
        unint64_t v2 = 0x100020000;
        goto LABEL_218;
      }
      if (*(void *)a1 == 0x795467616C464944
        && *(void *)(a1 + 8) == 0x7942737361506570
        && *(void *)(a1 + 16) == 0x636E657265666552
        && *(unsigned char *)(a1 + 24) == 101)
      {
        unint64_t v2 = 0x100800000;
        goto LABEL_218;
      }
LABEL_172:
      unint64_t v2 = 0;
      int v3 = 1;
LABEL_173:
      if (a2 == 15 && v3)
      {
        if (*(void *)a1 != 0x694267616C464944 || *(void *)(a1 + 7) != 0x6E6169646E456769) {
          goto LABEL_218;
        }
        uint64_t v12 = 0x8000000;
LABEL_217:
        unint64_t v2 = v12 & 0xFFFF0000FFFFFFFFLL | 0x100000000;
        goto LABEL_218;
      }
      char v46 = v3 ^ 1;
      if (a2 == 18) {
        char v47 = v3 ^ 1;
      }
      else {
        char v47 = 1;
      }
      if (v47)
      {
        if (a2 != 23) {
          char v46 = 1;
        }
        if (v46)
        {
          char v52 = v3 ^ 1;
          if (a2 != 25) {
            char v52 = 1;
          }
          if ((v52 & 1) == 0
            && !(*(void *)a1 ^ 0x6E4967616C464944 | *(void *)(a1 + 8) ^ 0x6956746365726964 | *(void *)(a1 + 16) ^ 0x7361426C61757472 | *(unsigned __int8 *)(a1 + 24) ^ 0x65))
          {
            unint64_t v2 = 0x100000024;
          }
        }
        else if (*(void *)a1 == 0x6C4167616C464944 {
               && *(void *)(a1 + 8) == 0x6544736C6C61436CLL
        }
               && *(void *)(a1 + 15) == 0x6465626972637365)
        {
          uint64_t v12 = 0x20000000;
          goto LABEL_217;
        }
      }
      else if (*(void *)a1 == 0x694C67616C464944 {
             && *(void *)(a1 + 8) == 0x69646E45656C7474
      }
             && *(_WORD *)(a1 + 16) == 28257)
      {
        uint64_t v12 = 0x10000000;
        goto LABEL_217;
      }
LABEL_218:
      if ((v2 & 0x300000000) != 0) {
        return v2;
      }
      else {
        return 0;
      }
    default:
      goto LABEL_173;
  }
}

const char *llvm::DINode::getFlagString(int a1)
{
  if (a1 == 256) {
    return "DIFlagPrototyped";
  }
  if (a1 > 0x7FFFFFF)
  {
    switch(a1)
    {
      case 0x20000000:
        return "DIFlagAllCallsDescribed";
      case 0x8000000:
        return "DIFlagBigEndian";
      case 0x10000000:
        return "DIFlagLittleEndian";
    }
    return (const char *)&unk_1CFB7A80B;
  }
  if (a1 > 127)
  {
    if (a1 <= 4095)
    {
      if (a1 > 2047)
      {
        if (a1 == 2048) {
          return "DIFlagVector";
        }
      }
      else
      {
        switch(a1)
        {
          case 1024:
            return "DIFlagObjectPointer";
          case 128:
            return "DIFlagExplicit";
          case 512:
            return "DIFlagObjcClassComplete";
        }
      }
    }
    else if (a1 >= 0x8000)
    {
      if (a1 >= 0x800000)
      {
        if (a1 <= 0x3FFFFFF)
        {
          switch(a1)
          {
            case 0x800000:
              return "DIFlagTypePassByReference";
            case 0x1000000:
              return "DIFlagEnumClass";
            case 0x2000000:
              return "DIFlagThunk";
          }
        }
        else if (a1 == 0x4000000)
        {
          return "DIFlagNonTrivial";
        }
      }
      else if (a1 < 0x100000)
      {
        if (a1 < 196608)
        {
          switch(a1)
          {
            case 0x8000:
              return "DIFlagExportSymbols";
            case 0x10000:
              return "DIFlagSingleInheritance";
            case 0x20000:
              return "DIFlagMultipleInheritance";
          }
        }
        else
        {
          switch(a1)
          {
            case 0x80000:
              return "DIFlagBitField";
            case 0x30000:
              return "DIFlagVirtualInheritance";
            case 0x40000:
              return "DIFlagIntroducedVirtual";
          }
        }
      }
      else
      {
        if (a1 == 0x400000) {
          return "DIFlagTypePassByValue";
        }
        if (a1 == 0x100000) {
          return "DIFlagNoReturn";
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 0x1000:
          return "DIFlagStaticMember";
        case 0x2000:
          return "DIFlagLValueReference";
        case 0x4000:
          return "DIFlagRValueReference";
      }
    }
    return (const char *)&unk_1CFB7A80B;
  }
  if (a1 > 63)
  {
    if (a1 == 64) {
      return "DIFlagArtificial";
    }
    return (const char *)&unk_1CFB7A80B;
  }
  uint64_t result = "DIFlagZero";
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      return "DIFlagPrivate";
    case 2:
      return "DIFlagProtected";
    case 3:
      return "DIFlagPublic";
    case 4:
      return "DIFlagFwdDecl";
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return (const char *)&unk_1CFB7A80B;
    case 8:
      return "DIFlagAppleBlock";
    case 16:
      return "DIFlagReservedBit4";
    default:
      if (a1 == 32) {
        return "DIFlagVirtual";
      }
      if (a1 != 36) {
        return (const char *)&unk_1CFB7A80B;
      }
      uint64_t result = "DIFlagIndirectVirtualBase";
      break;
  }
  return result;
}

uint64_t llvm::DINode::splitFlags(uint64_t result, uint64_t a2)
{
  int v2 = result & 3;
  if ((result & 3) != 0)
  {
    if (v2 == 1)
    {
      unsigned int v13 = *(_DWORD *)(a2 + 8);
      unsigned int v14 = *(_DWORD *)(a2 + 12);
      int v15 = 1;
    }
    else
    {
      unsigned int v13 = *(_DWORD *)(a2 + 8);
      unsigned int v14 = *(_DWORD *)(a2 + 12);
      if (v2 == 2) {
        int v15 = 2;
      }
      else {
        int v15 = 3;
      }
    }
    if (v13 >= v14) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v13) = v15;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v2 ^ 0x3FFFFFFF) & result;
  }
  int v3 = result & 0x30000;
  if ((result & 0x30000) != 0)
  {
    if (v3 == 0x20000)
    {
      unsigned int v32 = *(_DWORD *)(a2 + 8);
      unsigned int v33 = *(_DWORD *)(a2 + 12);
      int v34 = 0x20000;
    }
    else if (v3 == 0x10000)
    {
      unsigned int v32 = *(_DWORD *)(a2 + 8);
      unsigned int v33 = *(_DWORD *)(a2 + 12);
      int v34 = 0x10000;
    }
    else
    {
      unsigned int v32 = *(_DWORD *)(a2 + 8);
      unsigned int v33 = *(_DWORD *)(a2 + 12);
      int v34 = 196608;
    }
    if (v32 >= v33) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v32) = v34;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (result & 0x30000 ^ 0x3FFFFFFF) & result;
  }
  if ((~result & 0x24) == 0)
  {
    unsigned int v35 = *(_DWORD *)(a2 + 8);
    if (v35 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v35) = 36;
    ++*(_DWORD *)(a2 + 8);
    result &= 0x3FFFFFDBu;
  }
  if (result)
  {
    unsigned int v36 = *(_DWORD *)(a2 + 8);
    if (v36 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v36) = 1;
    ++*(_DWORD *)(a2 + 8);
    result &= 0x3FFFFFFEu;
  }
  if ((result & 2) != 0)
  {
    int v37 = result & 2;
    unsigned int v38 = *(_DWORD *)(a2 + 8);
    if (v38 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v38) = v37;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v37 ^ 0x3FFFFFFF) & result;
  }
  int v4 = result & 3;
  if ((result & 3) != 0)
  {
    unsigned int v39 = *(_DWORD *)(a2 + 8);
    if (v39 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v39) = v4;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v4 ^ 0x3FFFFFFF) & result;
  }
  if ((result & 4) != 0)
  {
    int v24 = result & 4;
    unsigned int v25 = *(_DWORD *)(a2 + 8);
    if (v25 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v25) = v24;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v24 ^ 0x3FFFFFFF) & result;
  }
  if ((result & 8) != 0)
  {
    int v40 = result & 8;
    unsigned int v41 = *(_DWORD *)(a2 + 8);
    if (v41 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v41) = v40;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v40 ^ 0x3FFFFFFF) & result;
  }
  if ((result & 0x10) != 0)
  {
    int v42 = result & 0x10;
    unsigned int v43 = *(_DWORD *)(a2 + 8);
    if (v43 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v43) = v42;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v42 ^ 0x3FFFFFFF) & result;
  }
  if ((result & 0x20) != 0)
  {
    int v44 = result & 0x20;
    unsigned int v45 = *(_DWORD *)(a2 + 8);
    if (v45 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v45) = v44;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v44 ^ 0x3FFFFFFF) & result;
  }
  if ((result & 0x40) != 0)
  {
    int v11 = result & 0x40;
    unsigned int v12 = *(_DWORD *)(a2 + 8);
    if (v12 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v12) = v11;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v11 ^ 0x3FFFFFFF) & result;
  }
  if ((result & 0x80) != 0)
  {
    int v28 = result & 0x80;
    unsigned int v29 = *(_DWORD *)(a2 + 8);
    if (v29 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v29) = v28;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v28 ^ 0x3FFFFFFF) & result;
  }
  if ((result & 0x100) != 0)
  {
    int v5 = result & 0x100;
    unsigned int v6 = *(_DWORD *)(a2 + 8);
    if (v6 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v6) = v5;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v5 ^ 0x3FFFFFFF) & result;
  }
  if ((result & 0x200) != 0)
  {
    int v46 = result & 0x200;
    unsigned int v47 = *(_DWORD *)(a2 + 8);
    if (v47 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v47) = v46;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v46 ^ 0x3FFFFFFF) & result;
  }
  if ((result & 0x400) != 0)
  {
    int v18 = result & 0x400;
    unsigned int v19 = *(_DWORD *)(a2 + 8);
    if (v19 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v19) = v18;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v18 ^ 0x3FFFFFFF) & result;
  }
  if ((result & 0x800) != 0)
  {
    int v20 = result & 0x800;
    unsigned int v21 = *(_DWORD *)(a2 + 8);
    if (v21 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v21) = v20;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v20 ^ 0x3FFFFFFF) & result;
  }
  if ((result & 0x1000) != 0)
  {
    int v16 = result & 0x1000;
    unsigned int v17 = *(_DWORD *)(a2 + 8);
    if (v17 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v17) = v16;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v16 ^ 0x3FFFFFFF) & result;
  }
  if ((result & 0x2000) != 0)
  {
    int v48 = result & 0x2000;
    unsigned int v49 = *(_DWORD *)(a2 + 8);
    if (v49 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v49) = v48;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v48 ^ 0x3FFFFFFF) & result;
  }
  if ((result & 0x4000) != 0)
  {
    int v50 = result & 0x4000;
    unsigned int v51 = *(_DWORD *)(a2 + 8);
    if (v51 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v51) = v50;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v50 ^ 0x3FFFFFFF) & result;
  }
  if ((result & 0x8000) != 0)
  {
    int v52 = result & 0x8000;
    unsigned int v53 = *(_DWORD *)(a2 + 8);
    if (v53 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v53) = v52;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v52 ^ 0x3FFFFFFF) & result;
  }
  if ((result & 0x10000) != 0)
  {
    int v54 = result & 0x10000;
    unsigned int v55 = *(_DWORD *)(a2 + 8);
    if (v55 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v55) = v54;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v54 ^ 0x3FFFFFFF) & result;
  }
  if ((result & 0x20000) != 0)
  {
    int v56 = result & 0x20000;
    unsigned int v57 = *(_DWORD *)(a2 + 8);
    if (v57 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v57) = v56;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v56 ^ 0x3FFFFFFF) & result;
  }
  int v7 = result & 0x30000;
  if ((result & 0x30000) != 0)
  {
    unsigned int v58 = *(_DWORD *)(a2 + 8);
    if (v58 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v58) = v7;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v7 ^ 0x3FFFFFFF) & result;
  }
  if ((result & 0x40000) != 0)
  {
    int v59 = result & 0x40000;
    unsigned int v60 = *(_DWORD *)(a2 + 8);
    if (v60 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v60) = v59;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v59 ^ 0x3FFFFFFF) & result;
  }
  if ((result & 0x80000) != 0)
  {
    int v30 = result & 0x80000;
    unsigned int v31 = *(_DWORD *)(a2 + 8);
    if (v31 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v31) = v30;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v30 ^ 0x3FFFFFFF) & result;
  }
  if ((result & 0x100000) != 0)
  {
    int v61 = result & 0x100000;
    unsigned int v62 = *(_DWORD *)(a2 + 8);
    if (v62 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v62) = v61;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v61 ^ 0x3FFFFFFF) & result;
  }
  if ((result & 0x400000) != 0)
  {
    int v22 = result & 0x400000;
    unsigned int v23 = *(_DWORD *)(a2 + 8);
    if (v23 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v23) = v22;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v22 ^ 0x3FFFFFFF) & result;
  }
  if ((result & 0x800000) != 0)
  {
    int v63 = result & 0x800000;
    unsigned int v64 = *(_DWORD *)(a2 + 8);
    if (v64 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v64) = v63;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v63 ^ 0x3FFFFFFF) & result;
  }
  if ((result & 0x1000000) != 0)
  {
    int v65 = result & 0x1000000;
    unsigned int v66 = *(_DWORD *)(a2 + 8);
    if (v66 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v66) = v65;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v65 ^ 0x3FFFFFFF) & result;
  }
  if ((result & 0x2000000) != 0)
  {
    int v67 = result & 0x2000000;
    unsigned int v68 = *(_DWORD *)(a2 + 8);
    if (v68 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v68) = v67;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v67 ^ 0x3FFFFFFF) & result;
  }
  if ((result & 0x4000000) != 0)
  {
    int v26 = result & 0x4000000;
    unsigned int v27 = *(_DWORD *)(a2 + 8);
    if (v27 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v27) = v26;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v26 ^ 0x3FFFFFFF) & result;
  }
  if ((result & 0x8000000) != 0)
  {
    int v69 = result & 0x8000000;
    unsigned int v70 = *(_DWORD *)(a2 + 8);
    if (v70 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v70) = v69;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v69 ^ 0x3FFFFFFF) & result;
  }
  if ((result & 0x10000000) != 0)
  {
    int v71 = result & 0x10000000;
    unsigned int v72 = *(_DWORD *)(a2 + 8);
    if (v72 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v72) = v71;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v71 ^ 0x3FFFFFFF) & result;
  }
  if ((result & 0x20000000) != 0)
  {
    int v9 = result & 0x20000000;
    unsigned int v10 = *(_DWORD *)(a2 + 8);
    if (v10 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v10) = v9;
    ++*(_DWORD *)(a2 + 8);
    uint64_t result = (v9 ^ 0x3FFFFFFF) & result;
  }
  int v8 = result & 0x24;
  if ((result & 0x24) != 0)
  {
    unsigned int v73 = *(_DWORD *)(a2 + 8);
    if (v73 >= *(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a2 + 4 * v73) = v8;
    ++*(_DWORD *)(a2 + 8);
    return (v8 ^ 0x3FFFFFFF) & result;
  }
  return result;
}

llvm::MDNode *llvm::GenericDINode::getImpl(void *a1, int a2, uint64_t a3, unsigned __int8 **a4, uint64_t a5, int a6, int a7)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (a6)
  {
    int v18 = 0;
    goto LABEL_9;
  }
  v24[0] = a4;
  v24[1] = a5;
  v24[2] = 0;
  uint64_t v24[3] = 0;
  int v25 = sub_1CC571B50(a4, (uint64_t)&a4[a5]);
  int v26 = a2;
  uint64_t v27 = a3;
  uint64_t v14 = *a1;
  int v15 = (uint64_t *)(*a1 + 536);
  unsigned int v23 = 0;
  int v16 = sub_1CD5B2CFC(v15, (uint64_t)v24, (uint64_t **)&v23);
  uint64_t result = 0;
  if (v16 && v23 != (llvm::MDNode **)(*(void *)(v14 + 536) + 8 * *(unsigned int *)(v14 + 552))) {
    uint64_t result = *v23;
  }
  if (!result && a7)
  {
    int v18 = v25;
LABEL_9:
    v24[0] = a3;
    size_t v19 = 8 * (a5 + 1);
    int v20 = operator new(v19 + 24);
    unsigned int v21 = v20;
    if (a5 != -1) {
      bzero(v20, v19);
    }
    uint64_t v22 = llvm::MDNode::MDNode((uint64_t)v21 + v19, (uint64_t)a1, 8, a6, (uint64_t)v24, 1, a4, a5);
    *(_WORD *)(v22 + 2) = a2;
    *(_DWORD *)(v22 + 4) = v18;
    return sub_1CD5B0910((llvm::MDNode *)v22, a6, *a1 + 536);
  }
  return result;
}

uint64_t llvm::DISubrange::DISubrange(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = llvm::MDNode::MDNode(a1, a2, 9, a3, a4, a5, 0, 0);
  *(_WORD *)(result + 2) = 33;
  return result;
}

{
  uint64_t result;

  uint64_t result = llvm::MDNode::MDNode(a1, a2, 9, a3, a4, a5, 0, 0);
  *(_WORD *)(result + 2) = 33;
  return result;
}