void *sub_1CD228FFC(void *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v9;
  unsigned char v10[24];

  if (a2)
  {
    v2 = a2;
    v3 = (uint64_t)result;
    v4 = *(void *)(a2 + 24);
LABEL_3:
    v9 = *(void *)(v4 + 40);
    result = sub_1CD2290D8((uint64_t)v10, v3, &v9);
    if (v10[16])
    {
      v5 = *(unsigned int *)(v3 + 144);
      if (v5 >= *(unsigned int *)(v3 + 148)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v3 + 136) + 8 * v5) = *(void *)(*(void *)(v2 + 24) + 40);
      ++*(_DWORD *)(v3 + 144);
    }
    while (1)
    {
      v2 = *(void *)(v2 + 8);
      if (!v2) {
        break;
      }
      v4 = *(void *)(v2 + 24);
      v6 = *(unsigned __int8 *)(v4 + 16);
      if (v4) {
        v7 = v6 >= 0x1C;
      }
      else {
        v7 = 0;
      }
      if (v7 && v6 - 29 < 0xB) {
        goto LABEL_3;
      }
    }
  }
  return result;
}

void *sub_1CD2290D8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = a2 + 8;
  if (*(_DWORD *)a2)
  {
    int v7 = 16;
    uint64_t v8 = a2 + 8;
  }
  else
  {
    int v7 = *(_DWORD *)(a2 + 16);
    if (!v7)
    {
      v20 = 0;
      goto LABEL_19;
    }
    uint64_t v8 = *(void *)(a2 + 8);
  }
  int v9 = v7 - 1;
  unsigned int v10 = ((*a3 >> 4) ^ (*a3 >> 9)) & v9;
  result = (void *)(v8 + 8 * v10);
  uint64_t v12 = *result;
  if (*a3 == *result)
  {
LABEL_13:
    if (*(_DWORD *)a2)
    {
      uint64_t v17 = 16;
    }
    else
    {
      uint64_t v6 = *(void *)(a2 + 8);
      uint64_t v17 = *(unsigned int *)(a2 + 16);
    }
    char v18 = 0;
    uint64_t v19 = v6 + 8 * v17;
    goto LABEL_22;
  }
  v13 = 0;
  int v14 = 1;
  while (v12 != -4096)
  {
    if (v13) {
      BOOL v15 = 0;
    }
    else {
      BOOL v15 = v12 == -8192;
    }
    if (v15) {
      v13 = result;
    }
    unsigned int v16 = v10 + v14++;
    unsigned int v10 = v16 & v9;
    result = (void *)(v8 + 8 * v10);
    uint64_t v12 = *result;
    if (*a3 == *result) {
      goto LABEL_13;
    }
  }
  if (v13) {
    v20 = v13;
  }
  else {
    v20 = result;
  }
LABEL_19:
  result = sub_1CCD11EEC(a2, (uint64_t)a3, a3, v20);
  void *result = *a3;
  if (*(unsigned char *)a2)
  {
    uint64_t v21 = 16;
  }
  else
  {
    uint64_t v6 = *(void *)(a2 + 8);
    uint64_t v21 = *(unsigned int *)(a2 + 16);
  }
  uint64_t v19 = v6 + 8 * v21;
  char v18 = 1;
LABEL_22:
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v19;
  *(unsigned char *)(a1 + 16) = v18;
  return result;
}

uint64_t *sub_1CD2291FC(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  if (!a2 || v4 != 31)
  {
    uint64_t v7 = 0;
    if (!a2 || v4 != 30) {
      return (uint64_t *)v7;
    }
    if ((*(_DWORD *)(a2 + 20) & 0x7FFFFFF) == 3)
    {
      uint64_t v8 = *(void *)(a2 - 96);
      uint64_t v9 = *(void *)(v8 + 8);
      if (v9)
      {
        if (!*(void *)(v9 + 8)
          && *(unsigned char *)(v8 + 16) == 81
          && (*(_WORD *)(v8 + 18) & 0x3E) == 0x20
          && sub_1CD22FA48(*(unsigned __int8 **)(v8 - 32), *(void *)(*(void *)(a1 + 16) + 232), *(_DWORD *)(*(void *)(a1 + 16) + 240)))
        {
          uint64_t v6 = (uint64_t *)(v8 - 64);
          goto LABEL_18;
        }
      }
    }
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(a2 + 20);
  if (llvm::BasicBlock::hasNPredecessorsOrMore(*(llvm::BasicBlock **)(a2 + 40), 0x80 / ((v5 >> 1) & 0x3FFFFFF))) {
    return 0;
  }
  if ((v5 & 0x40000000) != 0) {
    uint64_t v6 = *(uint64_t **)(a2 - 8);
  }
  else {
    uint64_t v6 = (uint64_t *)(a2 - 32 * (v5 & 0x7FFFFFF));
  }
LABEL_18:
  uint64_t v7 = *v6;
  if (*v6 && *(unsigned char *)(v7 + 16) == 75)
  {
    v11 = *(uint64_t **)(v7 - 32);
    uint64_t v12 = *(void *)(a1 + 16);
    uint64_t v13 = *v11;
    unsigned int v14 = *(_DWORD *)(*v11 + 8);
    if ((v14 & 0xFE) == 0x12) {
      unsigned int v14 = *(_DWORD *)(**(void **)(v13 + 16) + 8);
    }
    uint64_t v15 = *(void *)(v12 + 232);
    if (v14 < 0x100) {
      goto LABEL_31;
    }
    unsigned int v16 = v14 >> 8;
    unint64_t v17 = *(unsigned int *)(v12 + 240);
    uint64_t v18 = *(void *)(v12 + 232);
    if (v17)
    {
      uint64_t v18 = v15;
      unint64_t v19 = v17;
      do
      {
        unint64_t v20 = v19 >> 1;
        uint64_t v21 = v18 + 16 * (v19 >> 1);
        unsigned int v22 = *(_DWORD *)(v21 + 8);
        uint64_t v23 = v21 + 16;
        v19 += ~(v19 >> 1);
        if (v22 < v16) {
          uint64_t v18 = v23;
        }
        else {
          unint64_t v19 = v20;
        }
      }
      while (v19);
    }
    if (v18 == v15 + 16 * v17 || *(_DWORD *)(v18 + 8) != v16) {
LABEL_31:
    }
      uint64_t v18 = v15;
    v24 = *(uint64_t ***)v7;
    v25 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v13, (llvm::LLVMContext *)*(unsigned int *)(v18 + 4));
    if ((*(_DWORD *)(v13 + 8) & 0xFE) == 0x12)
    {
      v26 = (llvm::Type *)*(unsigned int *)(v13 + 32);
      if (*(_DWORD *)(v13 + 8) == 19) {
        llvm::ScalableVectorType::get(v25, v26);
      }
      else {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v25, v26);
      }
    }
    if (v24 == v25) {
      return v11;
    }
  }
  return (uint64_t *)v7;
}

uint64_t sub_1CD2293D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v177 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (void *)(a3 + 40);
  uint64_t v7 = *(void *)(a3 + 40);
  if (v7 == a3 + 40)
  {
    uint64_t v10 = 0;
  }
  else
  {
    if (v7) {
      uint64_t v9 = v7 - 24;
    }
    else {
      uint64_t v9 = 0;
    }
    if (*(unsigned __int8 *)(v9 + 16) - 29 >= 0xB) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = v9;
    }
  }
  v11 = sub_1CD2291FC(a1, v10);
  if (!v11 || sub_1CD2291FC(a1, a2) != v11) {
    return 0;
  }
  v160 = 0;
  v161 = 0;
  uint64_t v162 = 0;
  unsigned int v14 = (void *)*v8;
  if ((void *)*v8 == v8)
  {
    uint64_t v16 = 0;
  }
  else
  {
    if (v14) {
      uint64_t v15 = (uint64_t)(v14 - 3);
    }
    else {
      uint64_t v15 = 0;
    }
    if (*(unsigned __int8 *)(v15 + 16) - 29 >= 0xB) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = v15;
    }
  }
  uint64_t v17 = sub_1CD22FCB8(a1, v16, (uint64_t)&v160);
  sub_1CD22FFE4(v17, (uint64_t *)&v160);
  __p = 0;
  v158 = 0;
  uint64_t v159 = 0;
  p_p = &__p;
  uint64_t v19 = sub_1CD22FCB8(a1, a2, (uint64_t)&__p);
  sub_1CD22FFE4(v19, (uint64_t *)&__p);
  uint64_t v21 = *(llvm::BasicBlock **)(a2 + 40);
  uint64_t v23 = v160;
  unsigned int v22 = v161;
  unint64_t v24 = v161 - (unsigned char *)v160;
  if ((llvm::BasicBlock *)v17 != v21)
  {
    if ((v24 & 0xFFFFFFFF0) != 0)
    {
      v25 = 0;
      uint64_t v26 = (v24 >> 4);
      v27 = (llvm::BasicBlock **)((char *)v160 + 8);
      do
      {
        if (*v27 == v21)
        {
          if (v25) {
            goto LABEL_65;
          }
          v25 = *(v27 - 1);
        }
        v27 += 2;
        --v26;
      }
      while (v26);
    }
    else
    {
      v25 = 0;
    }
    v155 = a4;
    if (((v158 - (unsigned char *)__p) & 0xFFFFFFFF0) != 0)
    {
      uint64_t v45 = ((unint64_t)(v158 - (unsigned char *)__p) >> 4);
      v46 = (llvm::Type **)((char *)__p + 8);
      while (*(v46 - 1) != v25)
      {
        v46 += 2;
        if (!--v45) {
          goto LABEL_71;
        }
      }
      v47 = *v46;
    }
    else
    {
LABEL_71:
      v47 = 0;
    }
    if (v47) {
      v48 = v47;
    }
    else {
      v48 = (llvm::Type *)v19;
    }
    v167 = (char *)v171;
    v168 = (char *)v171;
    uint64_t v169 = 2;
    int v170 = 0;
    v49 = (void *)*((void *)v21 + 5);
    if (v49 == (void *)((char *)v21 + 40))
    {
LABEL_252:
      v131 = (char *)operator new(0x60uLL);
      *((_DWORD *)v131 + 13) = *((_DWORD *)v131 + 13) & 0x38000000 | 1;
      *(void *)v131 = 0;
      *((void *)v131 + 1) = 0;
      *((void *)v131 + 2) = 0;
      *((void *)v131 + 4) = ***(void ***)v48 + 1576;
      *((void *)v131 + 3) = v131 + 32;
      *((void *)v131 + 5) = 0;
      v131[48] = 30;
      v131[49] = 0;
      *((_WORD *)v131 + 25) = 0;
      *((_DWORD *)v131 + 13) = 1;
      *(_OWORD *)(v131 + 56) = 0u;
      *(_OWORD *)(v131 + 72) = 0u;
      *((_DWORD *)v131 + 22) = 0;
      *(void *)v131 = v48;
      uint64_t v134 = *((void *)v48 + 1);
      v133 = (void *)((char *)v48 + 8);
      uint64_t v132 = v134;
      *((void *)v131 + 1) = v134;
      if (v134) {
        *(void *)(v132 + 16) = v131 + 8;
      }
      *((void *)v131 + 2) = v133;
      void *v133 = v131;
      __int16 v166 = 257;
      sub_1CB844E0C(v155, (llvm::Instruction *)(v131 + 32), (uint64_t)&v163);
      sub_1CD2300A0(a2);
    }
    if (v49) {
      v50 = v49 - 3;
    }
    else {
      v50 = 0;
    }
    int v51 = *((unsigned __int8 *)v50 + 16);
    int v52 = v51 - 29;
    if (v51 != 30)
    {
      unsigned int v130 = 2;
      switch(v52)
      {
        case 1:
LABEL_300:
          __break(1u);
          goto LABEL_301;
        case 2:
          unsigned int v130 = (*((_DWORD *)v50 + 5) >> 1) & 0x3FFFFFF;
          goto LABEL_260;
        case 3:
        case 9:
          unsigned int v130 = (*((_DWORD *)v50 + 5) & 0x7FFFFFF) - 1;
          goto LABEL_260;
        case 4:
          goto LABEL_85;
        case 7:
          unsigned int v130 = *((_WORD *)v50 + 9) & 1;
          goto LABEL_260;
        case 8:
          unsigned int v130 = 1;
          goto LABEL_85;
        case 10:
          unsigned int v130 = *((_DWORD *)v50 + 20) + 1;
LABEL_260:
          if (!v130) {
            goto LABEL_252;
          }
          goto LABEL_85;
        default:
          goto LABEL_252;
      }
    }
    if ((*((_DWORD *)v50 + 5) & 0x7FFFFFF) == 3) {
      unsigned int v130 = 2;
    }
    else {
      unsigned int v130 = 1;
    }
LABEL_85:
    uint64_t v53 = 0;
    v54 = v50 - 4;
    v55 = v48;
    uint64_t v56 = v130;
    while (2)
    {
      int v57 = *((unsigned __int8 *)v50 + 16);
      if (v57 != 30)
      {
        uint64_t v74 = (v57 - 31);
        v75 = (llvm::Type **)(v50 - 4);
        switch(v74)
        {
          case 1:
          case 7:
            int v79 = *((_DWORD *)v50 + 5);
            if ((v79 & 0x40000000) != 0) {
              v80 = (void *)*(v50 - 1);
            }
            else {
              v80 = &v50[-4 * (v79 & 0x7FFFFFF)];
            }
            v78 = &v80[4 * v53];
            goto LABEL_132;
          case 2:
            uint64_t v81 = 0x1FFFFFFFFFFFFFF8;
            if (!v53) {
              uint64_t v81 = 0x1FFFFFFFFFFFFFF4;
            }
            v75 = (llvm::Type **)&v50[v81];
            goto LABEL_89;
          case 3:
          case 4:
            goto LABEL_300;
          case 5:
            if (*((_WORD *)v50 + 9))
            {
              uint64_t v82 = *((_DWORD *)v50 + 5) & 0x7FFFFFF;
              v83 = v50 + 4;
              goto LABEL_152;
            }
            v58 = 0;
LABEL_90:
            if (v58 != v55)
            {
              if (v58 != v48)
              {
                v59 = v168;
                uint64_t v60 = HIDWORD(v169);
                if (v168 != v167)
                {
                  unsigned int v64 = v169;
                  goto LABEL_104;
                }
                if (!HIDWORD(v169)) {
                  goto LABEL_102;
                }
                v61 = 0;
                uint64_t v62 = 8 * HIDWORD(v169);
                v63 = (llvm::Type **)v168;
                do
                {
                  if (*v63 == v58) {
                    goto LABEL_125;
                  }
                  if (*v63 == (llvm::Type *)-2) {
                    v61 = v63;
                  }
                  ++v63;
                  v62 -= 8;
                }
                while (v62);
                if (v61)
                {
                  *v61 = v58;
                  --v170;
                }
                else
                {
LABEL_102:
                  unsigned int v64 = v169;
                  if (HIDWORD(v169) >= v169)
                  {
LABEL_104:
                    if (3 * v64 <= 4 * (HIDWORD(v169) - v170))
                    {
                      if (v64 >= 0x40) {
                        v64 *= 2;
                      }
                      else {
                        unsigned int v64 = 128;
                      }
                    }
                    else if (v64 - HIDWORD(v169) >= v64 >> 3)
                    {
                      goto LABEL_106;
                    }
                    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v167, v64);
                    unsigned int v64 = v169;
                    v59 = v168;
LABEL_106:
                    unsigned int v65 = v64 - 1;
                    unsigned int v66 = (v64 - 1) & ((v58 >> 4) ^ (v58 >> 9));
                    v67 = &v59[8 * v66];
                    v68 = *(llvm::Type **)v67;
                    if (*(void *)v67 == -1)
                    {
                      v72 = 0;
LABEL_117:
                      if (v72) {
                        v73 = v72;
                      }
                      else {
                        v73 = (llvm::Type **)v67;
                      }
                      if (*v73 != v58)
                      {
                        if (*v73 == (llvm::Type *)-2) {
                          --v170;
                        }
                        else {
                          ++HIDWORD(v169);
                        }
                        *v73 = v58;
                      }
                    }
                    else
                    {
                      v72 = 0;
                      int v69 = 1;
                      while (v68 != v58)
                      {
                        if (v72) {
                          BOOL v70 = 0;
                        }
                        else {
                          BOOL v70 = v68 == (llvm::Type *)-2;
                        }
                        if (v70) {
                          v72 = (llvm::Type **)v67;
                        }
                        unsigned int v71 = v66 + v69++;
                        unsigned int v66 = v71 & v65;
                        v67 = &v59[8 * (v71 & v65)];
                        v68 = *(llvm::Type **)v67;
                        if (*(void *)v67 == -1) {
                          goto LABEL_117;
                        }
                      }
                    }
                    goto LABEL_125;
                  }
                  ++HIDWORD(v169);
                  *(void *)&v168[8 * v60] = v58;
                }
              }
LABEL_125:
              llvm::BasicBlock::removePredecessor(v58, v21, 0);
              goto LABEL_126;
            }
            v55 = 0;
LABEL_126:
            if (++v53 == v56) {
              goto LABEL_252;
            }
            continue;
          case 6:
            goto LABEL_89;
          case 8:
            if (v53)
            {
              v75 = (llvm::Type **)&v54[4 * v53 - 4 + -4 * *((unsigned int *)v50 + 20)];
            }
            else
            {
              uint64_t v82 = *((unsigned int *)v50 + 20);
              v83 = v50 - 8;
LABEL_152:
              v75 = (llvm::Type **)&v83[-4 * v82];
            }
            goto LABEL_89;
          default:
            int v76 = *((_DWORD *)v50 + 5);
            if ((v76 & 0x40000000) != 0) {
              v77 = (void *)*(v50 - 1);
            }
            else {
              v77 = &v50[-4 * (v76 & 0x7FFFFFF)];
            }
            v78 = &v77[4 * (2 * v53)];
LABEL_132:
            v75 = (llvm::Type **)(v78 + 4);
            goto LABEL_89;
        }
      }
      break;
    }
    v75 = (llvm::Type **)&v54[-4 * v53];
LABEL_89:
    v58 = *v75;
    goto LABEL_90;
  }
  v153 = (llvm::BasicBlock *)v17;
  v154 = a4;
  v28 = (llvm::Type **)__p;
  unint64_t v29 = v158 - (unsigned char *)__p;
  if (v24 <= v158 - (unsigned char *)__p) {
    v30 = (char *)v160;
  }
  else {
    v30 = (char *)__p;
  }
  if (v24 <= v158 - (unsigned char *)__p) {
    v31 = __p;
  }
  else {
    v31 = v160;
  }
  if (v24 <= v158 - (unsigned char *)__p)
  {
    v32 = v161;
  }
  else
  {
    p_p = &v160;
    v32 = v158;
  }
  if (v30 == v32)
  {
LABEL_65:
    uint64_t v12 = 0;
    goto LABEL_255;
  }
  uint64_t v33 = v32 - v30;
  unint64_t v34 = (unint64_t)v33 >> 4;
  if (v33 != 16)
  {
LABEL_46:
    if (v33 >= 32)
    {
      qsort(v30, (unint64_t)v33 >> 4, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_1CD23025C);
      v31 = *p_p;
    }
LABEL_48:
    if (v24 <= v29) {
      v37 = &__p;
    }
    else {
      v37 = &v160;
    }
    uint64_t v38 = (unsigned char *)v37[1] - v31;
    if (v38 >= 32)
    {
      qsort(v31, (unint64_t)v38 >> 4, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_1CD23025C);
      v31 = *p_p;
      uint64_t v38 = (unsigned char *)v37[1] - (unsigned char *)*p_p;
    }
    uint64_t v12 = 0;
    if (!v34) {
      goto LABEL_255;
    }
    unint64_t v39 = (unint64_t)v38 >> 4;
    if (!v39) {
      goto LABEL_255;
    }
    int v40 = 0;
    int v41 = 0;
    while (1)
    {
      unint64_t v42 = *(void *)&v30[16 * v41];
      unint64_t v43 = *(void *)&v31[16 * v40];
      if (v42 == v43) {
        goto LABEL_153;
      }
      if (v42 >= v43) {
        ++v40;
      }
      else {
        ++v41;
      }
      if (v41 == v34 || v40 == v39) {
        goto LABEL_65;
      }
    }
  }
  if (v24 <= v29) {
    unsigned int v22 = v158;
  }
  if (((v22 - v31) & 0xFFFFFFFF0) == 0) {
    goto LABEL_48;
  }
  uint64_t v35 = ((unint64_t)(v22 - v31) >> 4);
  v36 = v31;
  while (*(void *)v30 != *v36)
  {
    v36 += 2;
    if (!--v35) {
      goto LABEL_46;
    }
  }
LABEL_153:
  if (*(unsigned char *)(a2 + 16) == 30)
  {
    v84 = (char *)operator new(0x60uLL);
    *((_DWORD *)v84 + 13) = *((_DWORD *)v84 + 13) & 0x38000000 | 1;
    *(void *)v84 = 0;
    *((void *)v84 + 2) = 0;
    *((void *)v84 + 1) = 0;
    *((void *)v84 + 4) = ***(void ***)v19 + 1576;
    *((void *)v84 + 3) = v84 + 32;
    *((void *)v84 + 5) = 0;
    v84[48] = 30;
    v84[49] = 0;
    *((_WORD *)v84 + 25) = 0;
    *((_DWORD *)v84 + 13) = 1;
    *(_OWORD *)(v84 + 56) = 0u;
    *(_OWORD *)(v84 + 72) = 0u;
    *((_DWORD *)v84 + 22) = 0;
    v85 = (void *)(v19 + 8);
    uint64_t v86 = *(void *)(v19 + 8);
    *(void *)v84 = v19;
    *((void *)v84 + 1) = v86;
    if (v86) {
      *(void *)(v86 + 16) = v84 + 8;
    }
    *((void *)v84 + 2) = v85;
    void *v85 = v84;
    v171[0] = 257;
    sub_1CB844E0C(v154, (llvm::Instruction *)(v84 + 32), (uint64_t)&v167);
    llvm::BasicBlock::removePredecessor(v28[1], v153, 0);
    sub_1CD2300A0(a2);
  }
  v172 = (llvm::SwitchInstProfUpdateWrapper *)a2;
  LOBYTE(v173) = 0;
  char v175 = 0;
  char v176 = 0;
  llvm::SwitchInstProfUpdateWrapper::init(&v172, v20);
  v87 = (char *)v171;
  v167 = (char *)v171;
  v168 = (char *)v171;
  uint64_t v169 = 16;
  int v170 = 0;
  if ((v24 & 0xFFFFFFFF0) != 0)
  {
    unsigned int v88 = 0;
    uint64_t v89 = 0;
    unsigned int v90 = 16;
    v91 = (char *)v171;
    while (1)
    {
      uint64_t v92 = v23[2 * v89];
      if (v91 != v87) {
        break;
      }
      if (v88)
      {
        v93 = 0;
        uint64_t v94 = 8 * v88;
        v95 = v87;
        while (*(void *)v95 != v92)
        {
          if (*(void *)v95 == -2) {
            v93 = v95;
          }
          v95 += 8;
          v94 -= 8;
          if (!v94)
          {
            if (!v93) {
              goto LABEL_167;
            }
            *(void *)v93 = v92;
            --v170;
            goto LABEL_190;
          }
        }
        goto LABEL_190;
      }
LABEL_167:
      if (v90 <= v88) {
        break;
      }
      HIDWORD(v169) = v88 + 1;
      *(void *)&v87[8 * v88] = v92;
LABEL_190:
      v87 = v167;
      v91 = v168;
      unsigned int v90 = v169;
      unsigned int v88 = HIDWORD(v169);
      if (++v89 == (v24 >> 4)) {
        goto LABEL_198;
      }
    }
    if (3 * v90 <= 4 * (v88 - v170))
    {
      if (v90 >= 0x40) {
        v90 *= 2;
      }
      else {
        unsigned int v90 = 128;
      }
    }
    else if (v90 - v88 >= v90 >> 3)
    {
      goto LABEL_171;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v167, v90);
    unsigned int v90 = v169;
    v91 = v168;
LABEL_171:
    unsigned int v96 = v90 - 1;
    unsigned int v97 = (v90 - 1) & ((v92 >> 4) ^ (v92 >> 9));
    v98 = &v91[8 * v97];
    uint64_t v99 = *(void *)v98;
    if (*(void *)v98 == -1)
    {
      v100 = 0;
LABEL_183:
      if (v100) {
        v104 = v100;
      }
      else {
        v104 = v98;
      }
      if (*(void *)v104 != v92)
      {
        if (*(void *)v104 == -2) {
          --v170;
        }
        else {
          ++HIDWORD(v169);
        }
        *(void *)v104 = v92;
      }
    }
    else
    {
      v100 = 0;
      int v101 = 1;
      while (v99 != v92)
      {
        if (v100) {
          BOOL v102 = 0;
        }
        else {
          BOOL v102 = v99 == -2;
        }
        if (v102) {
          v100 = v98;
        }
        unsigned int v103 = v97 + v101++;
        unsigned int v97 = v103 & v96;
        v98 = &v91[8 * (v103 & v96)];
        uint64_t v99 = *(void *)v98;
        if (*(void *)v98 == -1) {
          goto LABEL_183;
        }
      }
    }
    goto LABEL_190;
  }
LABEL_198:
  v163 = (void *)1;
  for (uint64_t i = 8; i != 136; i += 16)
    *(void **)((char *)&v163 + i) = (void *)-4096;
  v106 = v172;
  int v107 = (*((_DWORD *)v172 + 5) >> 1) & 0x3FFFFFF;
  uint64_t v108 = (v107 - 1);
  if (v107 != 1)
  {
    while (1)
    {
      uint64_t v109 = v108;
      v156 = 0;
      int v110 = *((_DWORD *)v106 + 5);
      if ((v110 & 0x40000000) != 0) {
        v111 = (char *)*((void *)v106 - 1);
      }
      else {
        v111 = (char *)v106 - 32 * (v110 & 0x7FFFFFF);
      }
      --v108;
      int v112 = 2 * (v109 - 1);
      uint64_t v113 = (v112 + 3);
      if (v109 == -1) {
        uint64_t v113 = 1;
      }
      v156 = *(llvm::BasicBlock **)&v111[32 * v113];
      if (*(void *)(a1 + 8))
      {
        v115 = sub_1CD88474C(&v163, &v156);
        ++*((_DWORD *)v115 + 2);
        int v110 = *((_DWORD *)v106 + 5);
        if ((v110 & 0x40000000) != 0)
        {
LABEL_210:
          v114 = (char *)*((void *)v106 - 1);
          goto LABEL_211;
        }
      }
      else if ((v110 & 0x40000000) != 0)
      {
        goto LABEL_210;
      }
      v114 = (char *)v106 - 32 * (v110 & 0x7FFFFFF);
LABEL_211:
      uint64_t v116 = *(void *)&v114[32 * ((v112 + 2) & 0xFFFFFFFE)];
      v117 = v167;
      if (v168 == v167)
      {
        int v118 = HIDWORD(v169);
        v119 = &v168[8 * HIDWORD(v169)];
        if (HIDWORD(v169))
        {
          uint64_t v120 = 0;
          while (*(void *)&v168[v120] != v116)
          {
            v120 += 8;
            if (8 * HIDWORD(v169) == v120) {
              goto LABEL_230;
            }
          }
          v119 = &v168[v120];
        }
LABEL_230:
        v117 = v168;
      }
      else
      {
        int v121 = v169 - 1;
        unsigned int v122 = (v169 - 1) & ((v116 >> 4) ^ (v116 >> 9));
        v119 = &v168[8 * v122];
        uint64_t v123 = *(void *)v119;
        if (*(void *)v119 == -1)
        {
          v124 = 0;
LABEL_240:
          if (v124) {
            v119 = v124;
          }
          int v118 = HIDWORD(v169);
          if (*(void *)v119 != v116) {
            v119 = &v168[8 * v169];
          }
        }
        else
        {
          v124 = 0;
          int v125 = 1;
          while (v123 != v116)
          {
            if (v124) {
              BOOL v126 = 0;
            }
            else {
              BOOL v126 = v123 == -2;
            }
            if (v126) {
              v124 = v119;
            }
            unsigned int v127 = v122 + v125++;
            unsigned int v122 = v127 & v121;
            v119 = &v168[8 * (v127 & v121)];
            uint64_t v123 = *(void *)v119;
            if (*(void *)v119 == -1) {
              goto LABEL_240;
            }
          }
          int v118 = HIDWORD(v169);
        }
      }
      int v128 = v169;
      if (v168 == v117) {
        int v128 = v118;
      }
      if (v119 == &v168[8 * v128]) {
        goto LABEL_237;
      }
      llvm::BasicBlock::removePredecessor(v156, v153, 0);
      if (v175)
      {
        char v176 = 1;
        *(_DWORD *)(v173 + 4 * v109) = *(_DWORD *)(v173 + 4 * v174-- - 4);
      }
      llvm::SwitchInst::removeCase((uint64_t)v172, (uint64_t)v106, v109 - 1);
      if (*(void *)(a1 + 8))
      {
        v129 = sub_1CD88474C(&v163, &v156);
        --*((_DWORD *)v129 + 2);
        if (v109 == 1) {
          break;
        }
      }
      else
      {
LABEL_237:
        if (v109 == 1) {
          break;
        }
      }
    }
  }
  if (*(void *)(a1 + 8))
  {
    v135 = sub_1CD461934((int *)&v163);
    if (v163) {
      v137 = &v164;
    }
    else {
      v137 = v164;
    }
    unsigned int v138 = v165;
    if (v163) {
      unsigned int v138 = 8;
    }
    v139 = (int *)&v137[2 * v138];
    if (v139 == v135)
    {
      v144 = 0;
      v143 = 0;
    }
    else
    {
      v140 = v135;
      v141 = v136;
      v142 = 0;
      v143 = 0;
      v144 = 0;
      do
      {
        if (!v140[2])
        {
          uint64_t v145 = *(void *)v140 | 4;
          if (v143 >= v142)
          {
            uint64_t v146 = ((char *)v143 - (char *)v144) >> 4;
            unint64_t v147 = v146 + 1;
            if ((unint64_t)(v146 + 1) >> 60) {
              abort();
            }
            if (v142 - v144 > v147) {
              unint64_t v147 = v142 - v144;
            }
            if ((unint64_t)((char *)v142 - (char *)v144) >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v148 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v148 = v147;
            }
            if (v148)
            {
              if (v148 >> 60) {
                sub_1CB833614();
              }
              v149 = (char *)operator new(16 * v148);
            }
            else
            {
              v149 = 0;
            }
            v150 = (llvm::BasicBlock **)&v149[16 * v146];
            *v150 = v153;
            v150[1] = (llvm::BasicBlock *)v145;
            if (v143 == v144)
            {
              v152 = v143;
              v144 = (unint64_t *)&v149[16 * v146];
            }
            else
            {
              v151 = (unint64_t *)&v149[16 * v146];
              do
              {
                *((_OWORD *)v151 - 1) = *((_OWORD *)v143 - 1);
                v151 -= 2;
                v143 -= 2;
              }
              while (v143 != v144);
              v152 = v144;
              v144 = v151;
            }
            v142 = (unint64_t *)&v149[16 * v148];
            v143 = (unint64_t *)(v150 + 2);
            if (v152) {
              operator delete(v152);
            }
          }
          else
          {
            unint64_t *v143 = (unint64_t)v153;
            v143[1] = v145;
            v143 += 2;
          }
        }
        while (1)
        {
          v140 += 4;
          if (v140 == v141) {
            break;
          }
          if ((*(void *)v140 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_293;
          }
        }
        v140 = v141;
LABEL_293:
        ;
      }
      while (v140 != v139);
    }
    llvm::DomTreeUpdater::applyUpdates(*(void *)(a1 + 8), v144, ((char *)v143 - (char *)v144) >> 4);
    if (v144) {
      operator delete(v144);
    }
  }
  if ((v163 & 1) == 0) {
LABEL_301:
  }
    MEMORY[0x1D25D9CD0](v164, 8);
  if (v168 != v167) {
    free(v168);
  }
  sub_1CCD3104C((uint64_t)&v172);
  uint64_t v12 = 1;
LABEL_255:
  if (__p) {
    operator delete(__p);
  }
  if (v160) {
    operator delete(v160);
  }
  return v12;
}

uint64_t sub_1CD22A348(uint64_t a1, void **a2, uint64_t a3)
{
  v362[64] = *MEMORY[0x1E4F143B8];
  unsigned int v5 = a2[5];
  uint64_t v6 = sub_1CD2291FC(a1, (uint64_t)a2);
  for (uint64_t i = v5[1]; i; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v8 = *(void *)(i + 24);
    unsigned int v9 = *(unsigned __int8 *)(v8 + 16);
    if (v8) {
      BOOL v10 = v9 >= 0x1C;
    }
    else {
      BOOL v10 = 0;
    }
    if (v10 && v9 - 29 < 0xB) {
      break;
    }
  }
  v342[0] = 1;
  uint64_t v12 = 1;
  int64x2_t v13 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&v342[v12] = v13;
    v12 += 2;
  }
  while (v12 != 17);
  v343 = v345;
  uint64_t v344 = 0x1000000000;
  sub_1CD228FFC(v342, i);
  uint64_t v14 = v344;
  if (!v344) {
    goto LABEL_528;
  }
  unsigned int v312 = (a2 >> 4) ^ (a2 >> 9);
  int64x2_t v314 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  uint64_t v319 = a1;
  while (1)
  {
    uint64_t v15 = (char *)v343 + 8 * v14;
    uint64_t v16 = (void *)*((void *)v15 - 1);
    sub_1CCD11CF4((uint64_t)v342, (void *)v15 - 1);
    LODWORD(v344) = v344 - 1;
    uint64_t v17 = (void *)v16[5];
    if (v17 == v16 + 5)
    {
      uint64_t v19 = 0;
    }
    else
    {
      uint64_t v18 = v17 ? (uint64_t)(v17 - 3) : 0;
      uint64_t v19 = *(unsigned __int8 *)(v18 + 16) - 29 >= 0xB ? 0 : v18;
    }
    if (v16 != v5 && sub_1CD2291FC(a1, v19) == v6) {
      break;
    }
    uint64_t v14 = v344;
    if (!v344) {
      goto LABEL_528;
    }
  }
  v315 = v6;
  uint64_t v336 = 1;
  int64x2_t v337 = v314;
  int64x2_t v338 = v314;
  v339 = v341;
  uint64_t v340 = 0x400000000;
  if ((sub_1CD20EE2C((uint64_t)a2, v19, (uint64_t)&v336) & 1) != 0 || !v340)
  {
LABEL_30:
    uint64_t v23 = (uint64_t ***)v19;
    unint64_t v24 = (llvm::Type *)a2[5];
    v25 = (llvm::BasicBlock *)v23[5];
    v360 = v362;
    uint64_t v361 = 0x2000000000;
    v333 = 0;
    uint64_t v334 = 0;
    uint64_t v335 = 0;
    uint64_t v26 = sub_1CD22FCB8(a1, (uint64_t)a2, (uint64_t)&v333);
    uint64_t v27 = a1;
    v28 = (llvm::Type *)v26;
    v331 = 0;
    uint64_t v332 = v26;
    __p = 0;
    v330 = 0;
    uint64_t v320 = (uint64_t)v23;
    uint64_t v318 = sub_1CD22FCB8(v27, (uint64_t)v23, (uint64_t)&__p);
    uint64_t v356 = 1;
    for (uint64_t j = 8; j != 136; j += 16)
      *(uint64_t *)((char *)&v356 + j) = -4096;
    v357 = &v359;
    uint64_t v358 = 0x800000000;
    v353 = &v355;
    uint64_t v354 = 0x800000000;
    if ((*((unsigned char *)v23 + 23) & 0x20) == 0) {
      goto LABEL_59;
    }
    uint64_t v30 = ***v23;
    v350 = v23;
    int v31 = *(_DWORD *)(v30 + 2496);
    if (v31)
    {
      uint64_t v32 = *(void *)(v30 + 2480);
      int v33 = v31 - 1;
      unsigned int v34 = v33 & ((v23 >> 4) ^ (v23 >> 9));
      uint64_t v35 = (uint64_t ****)(v32 + 40 * v34);
      v36 = *v35;
      if (*v35 == v23)
      {
LABEL_43:
        uint64_t v41 = *((unsigned int *)v35 + 4);
        if (v41)
        {
          unint64_t v42 = v35[1] + 1;
          uint64_t v43 = 16 * v41;
          while (*((_DWORD *)v42 - 2) != 2)
          {
            BOOL v44 = 0;
            v42 += 2;
            v43 -= 16;
            if (!v43) {
              goto LABEL_60;
            }
          }
          uint64_t v45 = *v42;
          if (v45)
          {
            uint64_t v46 = *(void *)(v45 - 8 * *(unsigned int *)(v45 + 8));
            if (v46)
            {
              if (!*(unsigned char *)v46)
              {
                v47 = *(void **)(v46 + 8);
                if (*v47 == 14)
                {
                  uint64_t v48 = v47[3];
                  uint64_t v49 = *(void *)((char *)v47 + 30);
                  BOOL v44 = v48 == 0x775F68636E617262 && v49 == 0x737468676965775FLL;
LABEL_60:
                  if ((*((unsigned char *)a2 + 23) & 0x20) == 0) {
                    goto LABEL_95;
                  }
                  uint64_t v51 = **(void **)*a2;
                  v350 = a2;
                  int v52 = *(_DWORD *)(v51 + 2496);
                  if (v52)
                  {
                    uint64_t v53 = *(void *)(v51 + 2480);
                    int v54 = v52 - 1;
                    unsigned int v55 = v54 & v312;
                    uint64_t v56 = (void ***)(v53 + 40 * (v54 & v312));
                    int v57 = *v56;
                    if (*v56 == a2)
                    {
LABEL_71:
                      uint64_t v62 = *((unsigned int *)v56 + 4);
                      if (v62)
                      {
                        v63 = v56[1] + 1;
                        uint64_t v64 = 16 * v62;
                        while (*((_DWORD *)v63 - 2) != 2)
                        {
                          BOOL v65 = 0;
                          v63 += 2;
                          v64 -= 16;
                          if (!v64)
                          {
                            if (v44) {
                              goto LABEL_76;
                            }
LABEL_96:
                            if (v65)
                            {
                              sub_1CBF7C198((uint64_t)&v353, (((char *)v330 - (unsigned char *)__p) >> 4) + 1, 1);
                              v350 = v352;
                              uint64_t v351 = 0x800000000;
                              goto LABEL_98;
                            }
                            uint64_t v316 = 0;
                            v350 = v352;
                            uint64_t v351 = 0x800000000;
LABEL_103:
                            if ((llvm::Type *)v318 == v24)
                            {
                              v325 = 0;
                              uint64_t v326 = 0;
                              __dst = &v325;
                              v77 = (char *)__p;
                              int v76 = (char *)v330;
                              unint64_t v78 = (unint64_t)((char *)v330 - (unsigned char *)__p) >> 4;
                              if (v78)
                              {
                                int v79 = 0;
                                do
                                {
                                  v80 = (llvm::Type **)&v77[16 * v79];
                                  if (v80[1] == v24)
                                  {
                                    long long v346 = *(_OWORD *)v80;
                                    long long v81 = v346;
                                    *(_OWORD *)v80 = *((_OWORD *)v76 - 1);
                                    *((_OWORD *)v76 - 1) = v81;
                                    if (v316)
                                    {
                                      uint64_t v82 = v353;
                                      *(void *)v353 += *((void *)v353 + (v79 + 1));
                                      int v83 = v354;
                                      v84 = (char *)&v82[v354];
                                      uint64_t v85 = v82[v79 + 1];
                                      v82[v79 + 1] = *((void *)v84 - 1);
                                      *((void *)v84 - 1) = v85;
                                      LODWORD(v354) = v83 - 1;
                                    }
                                    v76 -= 16;
                                    --v79;
                                    LODWORD(v78) = v78 - 1;
                                  }
                                  else
                                  {
                                    sub_1CD23048C((uint64_t *)&__dst, (uint64_t)*v80);
                                  }
                                  ++v79;
                                }
                                while (v79 != v78);
                              }
                              v330 = (unint64_t *)v76;
                              uint64_t v86 = v24;
                              if (v24 != v28)
                              {
                                llvm::BasicBlock::removePredecessor(v24, v25, 0);
                                v87 = (_DWORD *)sub_1CD2305DC((uint64_t)&v356, &v332);
                                ++*v87;
                                uint64_t v86 = v28;
                              }
                              uint64_t v318 = (uint64_t)v86;
                              uint64_t v88 = v354;
                              uint64_t v89 = (char *)v333;
                              if (((v334 - (void)v333) & 0xFFFFFFFF0) != 0)
                              {
                                uint64_t v90 = 0;
                                uint64_t v91 = -(uint64_t)((unint64_t)(v334 - (void)v333) >> 4);
                                uint64_t v313 = 0;
                                do
                                {
                                  while (1)
                                  {
                                    uint64_t v92 = (uint64_t)v325;
                                    uint64_t v93 = v332;
                                    uint64_t v94 = (16 * v90++) | 8;
                                    while (sub_1CD2306B4(v92, *(void *)&v89[v94 - 8]) || *(void *)&v89[v94] == v93)
                                    {
                                      ++v90;
                                      v94 += 16;
                                      if (v91 + v90 == 1)
                                      {
                                        uint64_t v105 = v319;
                                        if (((v316 | BYTE4(v316)) & 1) == 0) {
                                          goto LABEL_155;
                                        }
                                        goto LABEL_150;
                                      }
                                    }
                                    v95 = &v89[v94 - 8];
                                    if (v76 >= v331)
                                    {
                                      uint64_t v96 = v88;
                                      unsigned int v97 = (char *)__p;
                                      uint64_t v98 = (v76 - (unsigned char *)__p) >> 4;
                                      unint64_t v99 = v98 + 1;
                                      if ((unint64_t)(v98 + 1) >> 60) {
                                        goto LABEL_533;
                                      }
                                      uint64_t v100 = v331 - (unsigned char *)__p;
                                      if ((v331 - (unsigned char *)__p) >> 3 > v99) {
                                        unint64_t v99 = v100 >> 3;
                                      }
                                      if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF0) {
                                        unint64_t v99 = 0xFFFFFFFFFFFFFFFLL;
                                      }
                                      unint64_t v311 = v99;
                                      if (v99)
                                      {
                                        if (v99 >> 60) {
                                          goto LABEL_534;
                                        }
                                        int v101 = (char *)operator new(16 * v99);
                                      }
                                      else
                                      {
                                        int v101 = 0;
                                      }
                                      BOOL v102 = &v101[16 * v98];
                                      *(_OWORD *)BOOL v102 = *(_OWORD *)v95;
                                      if (v76 == v97)
                                      {
                                        v104 = v76;
                                        unsigned int v103 = &v101[16 * v98];
                                        uint64_t v88 = v96;
                                      }
                                      else
                                      {
                                        unsigned int v103 = &v101[16 * v98];
                                        uint64_t v88 = v96;
                                        do
                                        {
                                          *((_OWORD *)v103 - 1) = *((_OWORD *)v76 - 1);
                                          v103 -= 16;
                                          v76 -= 16;
                                        }
                                        while (v76 != v97);
                                        v104 = __p;
                                      }
                                      int v76 = v102 + 16;
                                      __p = v103;
                                      v330 = (unint64_t *)(v102 + 16);
                                      v331 = &v101[16 * v311];
                                      if (v104) {
                                        operator delete(v104);
                                      }
                                    }
                                    else
                                    {
                                      *(_OWORD *)int v76 = *(_OWORD *)v95;
                                      v76 += 16;
                                    }
                                    uint64_t v105 = v319;
                                    v330 = (unint64_t *)v76;
                                    uint64_t v89 = (char *)v333;
                                    v106 = (_DWORD *)sub_1CD2305DC((uint64_t)&v356, (uint64_t *)((char *)v333 + v94));
                                    ++*v106;
                                    if (v316) {
                                      break;
                                    }
                                    if (!(v91 + v90)) {
                                      goto LABEL_155;
                                    }
                                  }
                                  if (v354 >= (unint64_t)HIDWORD(v354)) {
                                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                                  }
                                  *((void *)v353 + v354) = *((void *)v350 + v90) * *(void *)v353;
                                  LODWORD(v354) = v354 + 1;
                                  v313 += *((void *)v350 + v90);
                                }
                                while (v91 + v90);
                              }
                              else
                              {
                                uint64_t v105 = v319;
                                if (((v316 | HIDWORD(v316)) & 1) == 0) {
                                  goto LABEL_155;
                                }
                                uint64_t v313 = 0;
                              }
LABEL_150:
                              int v107 = (uint64_t *)v350;
                              uint64_t v108 = *(void *)v350;
                              uint64_t v109 = v353;
                              if (v88 >= 2)
                              {
                                uint64_t v110 = v108 + v313;
                                uint64_t v111 = v88 - 1;
                                int v112 = (char *)v353 + 8;
                                do
                                {
                                  *v112++ *= v110;
                                  --v111;
                                }
                                while (v111);
                                uint64_t v108 = *v107;
                              }
                              *v109 *= v108;
LABEL_155:
                              sub_1CBB0D544(v325);
                              goto LABEL_156;
                            }
                            v325 = 0;
                            uint64_t v326 = 0;
                            __dst = &v325;
                            *((void *)&v346 + 1) = 0;
                            uint64_t v347 = 0;
                            *(void *)&long long v346 = (char *)&v346 + 8;
                            uint64_t v145 = (uint64_t **)__p;
                            uint64_t v146 = v330;
                            unint64_t v147 = (unint64_t)((char *)v330 - (unsigned char *)__p) >> 4;
                            if (v147)
                            {
                              unsigned int v151 = 0;
                              do
                              {
                                if (v145[2 * v151 + 1] == (uint64_t *)v24)
                                {
                                  v152 = (uint64_t *)&v145[2 * v151];
                                  sub_1CD23048C((uint64_t *)&__dst, *v152);
                                  if (v316)
                                  {
                                    v154 = (uint64_t *)*((void *)v353 + v151 + 1);
                                    sub_1CD508D28((uint64_t **)&v346, *v152, &v145[2 * v151])[5] = v154;
                                    int v155 = v354;
                                    v156 = (char *)v353 + 8 * v354;
                                    uint64_t v157 = *((void *)v353 + v151 + 1);
                                    *((void *)v353 + v151 + 1) = *((void *)v156 - 1);
                                    *((void *)v156 - 1) = v157;
                                    LODWORD(v354) = v155 - 1;
                                  }
                                  v322[0] = *(_OWORD *)v152;
                                  long long v153 = v322[0];
                                  *(_OWORD *)v152 = *((_OWORD *)v146 - 1);
                                  *((_OWORD *)v146 - 1) = v153;
                                  v146 -= 2;
                                  --v151;
                                  LODWORD(v147) = v147 - 1;
                                }
                                ++v151;
                              }
                              while (v151 != v147);
                            }
                            v330 = v146;
                            unint64_t v148 = (uint64_t **)v333;
                            if (((v334 - (void)v333) & 0xFFFFFFFF0) == 0)
                            {
                              v149 = v146;
LABEL_234:
                              v150 = __dst;
                              if (__dst != &v325)
                              {
                                uint64_t v199 = v332;
                                do
                                {
                                  unint64_t v200 = v150[4];
                                  *(void *)&v322[0] = v200;
                                  if (v316)
                                  {
                                    v213 = sub_1CD508D28((uint64_t **)&v346, v200, (uint64_t **)v322)[5];
                                    if (v354 >= (unint64_t)HIDWORD(v354)) {
                                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                                    }
                                    *((void *)v353 + v354) = v213;
                                    LODWORD(v354) = v354 + 1;
                                  }
                                  if (v149 >= (unint64_t *)v331)
                                  {
                                    v201 = (unint64_t *)__p;
                                    uint64_t v202 = ((char *)v149 - (unsigned char *)__p) >> 4;
                                    unint64_t v203 = v202 + 1;
                                    if ((unint64_t)(v202 + 1) >> 60) {
                                      goto LABEL_533;
                                    }
                                    uint64_t v204 = v331 - (unsigned char *)__p;
                                    if ((v331 - (unsigned char *)__p) >> 3 > v203) {
                                      unint64_t v203 = v204 >> 3;
                                    }
                                    if ((unint64_t)v204 >= 0x7FFFFFFFFFFFFFF0) {
                                      unint64_t v205 = 0xFFFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      unint64_t v205 = v203;
                                    }
                                    if (v205)
                                    {
                                      if (v205 >> 60) {
                                        goto LABEL_534;
                                      }
                                      v206 = (char *)operator new(16 * v205);
                                    }
                                    else
                                    {
                                      v206 = 0;
                                    }
                                    v207 = (unint64_t *)&v206[16 * v202];
                                    unint64_t *v207 = v200;
                                    v207[1] = v199;
                                    if (v149 == v201)
                                    {
                                      v209 = v149;
                                      v208 = &v206[16 * v202];
                                    }
                                    else
                                    {
                                      v208 = &v206[16 * v202];
                                      do
                                      {
                                        *((_OWORD *)v208 - 1) = *((_OWORD *)v149 - 1);
                                        v208 -= 16;
                                        v149 -= 2;
                                      }
                                      while (v149 != v201);
                                      v209 = __p;
                                    }
                                    v149 = v207 + 2;
                                    __p = v208;
                                    v331 = &v206[16 * v205];
                                    if (v209) {
                                      operator delete(v209);
                                    }
                                  }
                                  else
                                  {
                                    unint64_t *v149 = v200;
                                    v149[1] = v199;
                                    v149 += 2;
                                  }
                                  v330 = v149;
                                  v210 = (_DWORD *)sub_1CD2305DC((uint64_t)&v356, &v332);
                                  ++*v210;
                                  v211 = (void **)v150[1];
                                  if (v211)
                                  {
                                    do
                                    {
                                      v212 = v211;
                                      v211 = (void **)*v211;
                                    }
                                    while (v211);
                                  }
                                  else
                                  {
                                    do
                                    {
                                      v212 = (void **)v150[2];
                                      BOOL v39 = *v212 == v150;
                                      v150 = v212;
                                    }
                                    while (!v39);
                                  }
                                  v150 = v212;
                                }
                                while (v212 != (void **)&v325);
                              }
                              sub_1CBC0FD34(*((void **)&v346 + 1));
                              sub_1CBB0D544(v325);
                              uint64_t v105 = v319;
LABEL_156:
                              __dst = v328;
                              v325 = v328;
                              uint64_t v326 = 2;
                              int v327 = 0;
                              if (!*(void *)(v105 + 8))
                              {
LABEL_357:
                                if (v358)
                                {
                                  v221 = (uint64_t *)v357;
                                  v222 = (uint64_t *)((char *)v357 + 16 * v358);
                                  do
                                  {
                                    uint64_t v223 = *((int *)v221 + 2);
                                    if (v223)
                                    {
                                      do
                                      {
                                        sub_1CD2191C8(*v221, (uint64_t)v25, (uint64_t)v24, 0);
                                        --v223;
                                      }
                                      while (v223);
                                    }
                                    if (*(void *)(v105 + 8))
                                    {
                                      uint64_t v224 = *v221;
                                      v225 = (char *)__dst;
                                      if (v325 == __dst)
                                      {
                                        int v226 = HIDWORD(v326);
                                        v227 = &v325[8 * HIDWORD(v326)];
                                        if (HIDWORD(v326))
                                        {
                                          uint64_t v228 = 0;
                                          while (*(void *)&v325[v228] != v224)
                                          {
                                            v228 += 8;
                                            if (8 * HIDWORD(v326) == v228) {
                                              goto LABEL_382;
                                            }
                                          }
                                          v227 = &v325[v228];
                                        }
LABEL_382:
                                        v225 = v325;
                                      }
                                      else
                                      {
                                        int v229 = v326 - 1;
                                        unsigned int v230 = (v326 - 1) & ((v224 >> 4) ^ (v224 >> 9));
                                        v227 = &v325[8 * v230];
                                        uint64_t v231 = *(void *)v227;
                                        if (*(void *)v227 == -1)
                                        {
                                          v237 = 0;
LABEL_392:
                                          if (v237) {
                                            v227 = v237;
                                          }
                                          int v226 = HIDWORD(v326);
                                          if (*(void *)v227 != v224) {
                                            v227 = &v325[8 * v326];
                                          }
                                        }
                                        else
                                        {
                                          v237 = 0;
                                          int v232 = 1;
                                          while (v231 != v224)
                                          {
                                            if (v237) {
                                              BOOL v233 = 0;
                                            }
                                            else {
                                              BOOL v233 = v231 == -2;
                                            }
                                            if (v233) {
                                              v237 = v227;
                                            }
                                            unsigned int v234 = v230 + v232++;
                                            unsigned int v230 = v234 & v229;
                                            v227 = &v325[8 * (v234 & v229)];
                                            uint64_t v231 = *(void *)v227;
                                            if (*(void *)v227 == -1) {
                                              goto LABEL_392;
                                            }
                                          }
                                          int v226 = HIDWORD(v326);
                                        }
                                      }
                                      if (v325 == v225) {
                                        int v235 = v226;
                                      }
                                      else {
                                        int v235 = v326;
                                      }
                                      if (v227 == &v325[8 * v235])
                                      {
                                        if (v361 >= (unint64_t)HIDWORD(v361)) {
                                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                                        }
                                        v236 = (llvm::BasicBlock **)((char *)v360 + 16 * v361);
                                        *v236 = v25;
                                        v236[1] = (llvm::BasicBlock *)(v224 & 0xFFFFFFFFFFFFFFFBLL);
                                        LODWORD(v361) = v361 + 1;
                                      }
                                    }
                                    v221 += 2;
                                  }
                                  while (v221 != v222);
                                }
                                *(void *)(a3 + 48) = *(void *)(v320 + 40);
                                *(void *)(a3 + 56) = v320 + 24;
                                v238 = *(unsigned __int8 **)(v320 + 48);
                                *(void *)&v322[0] = v238;
                                if (v238)
                                {
                                  llvm::MetadataTracking::track((uint64_t)v322, v238, 2);
                                  uint64_t v239 = *(void *)&v322[0];
                                }
                                else
                                {
                                  uint64_t v239 = 0;
                                }
                                v240 = (unsigned __int8 *)v315;
                                sub_1CB8461A4(a3, 0, v239);
                                if (!*(void *)&v322[0])
                                {
LABEL_400:
                                  uint64_t v241 = *v315;
                                  unsigned int v242 = *(_DWORD *)(*v315 + 8);
                                  if (v242 == 15)
                                  {
                                    if ((v242 & 0xFE) == 0x12) {
                                      unsigned int v242 = *(_DWORD *)(**(void **)(v241 + 16) + 8);
                                    }
                                    uint64_t v243 = *(void *)(v105 + 16);
                                    uint64_t v244 = *(void *)(v243 + 232);
                                    if (v242 < 0x100) {
                                      goto LABEL_412;
                                    }
                                    unsigned int v245 = v242 >> 8;
                                    unint64_t v246 = *(unsigned int *)(v243 + 240);
                                    uint64_t v247 = v244;
                                    if (v246)
                                    {
                                      uint64_t v247 = v244;
                                      unint64_t v248 = v246;
                                      do
                                      {
                                        unint64_t v249 = v248 >> 1;
                                        uint64_t v250 = v247 + 16 * (v248 >> 1);
                                        unsigned int v251 = *(_DWORD *)(v250 + 8);
                                        uint64_t v252 = v250 + 16;
                                        v248 += ~(v248 >> 1);
                                        if (v251 < v245) {
                                          uint64_t v247 = v252;
                                        }
                                        else {
                                          unint64_t v248 = v249;
                                        }
                                      }
                                      while (v248);
                                    }
                                    if (v247 == v244 + 16 * v246 || *(_DWORD *)(v247 + 8) != v245) {
LABEL_412:
                                    }
                                      uint64_t v247 = v244;
                                    v253 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v241, (llvm::LLVMContext *)*(unsigned int *)(v247 + 4));
                                    uint64_t v254 = (uint64_t)v253;
                                    if ((*(_DWORD *)(v241 + 8) & 0xFE) == 0x12)
                                    {
                                      v304 = (llvm::Type *)*(unsigned int *)(v241 + 32);
                                      if (*(_DWORD *)(v241 + 8) == 19) {
                                        llvm::ScalableVectorType::get(v253, v304);
                                      }
                                      else {
                                        llvm::FixedVectorType::get((llvm::FixedVectorType *)v253, v304);
                                      }
                                      uint64_t v254 = v305;
                                      v240 = (unsigned __int8 *)v315;
                                    }
                                    *(void *)&v322[0] = "magicptr";
                                    __int16 v323 = 259;
                                    if (*(void *)v240 != v254)
                                    {
                                      if (v240[16] <= 0x14u)
                                      {
                                        v240 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**(void **)(a3 + 72) + 224))(*(void *)(a3 + 72), 47, v240, v254);
                                        if (v240) {
                                          BOOL v258 = v240[16] >= 0x1Cu;
                                        }
                                        else {
                                          BOOL v258 = 0;
                                        }
                                        if (v258)
                                        {
                                          (*(void (**)(void, unsigned __int8 *, _OWORD *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v240, v322, *(void *)(a3 + 48), *(void *)(a3 + 56));
                                          uint64_t v306 = *(unsigned int *)(a3 + 8);
                                          if (v306)
                                          {
                                            uint64_t v308 = *(void *)a3;
                                            uint64_t v309 = *(void *)a3 + 16 * v306;
                                            do
                                            {
                                              llvm::Instruction::setMetadata((llvm::Instruction *)v240, *(_DWORD *)v308, *(llvm::MDNode **)(v308 + 8));
                                              v308 += 16;
                                            }
                                            while (v308 != v309);
                                          }
                                        }
                                      }
                                      else
                                      {
                                        v349[0] = 257;
                                        v240 = (unsigned __int8 *)llvm::CastInst::Create(47, (uint64_t)v240, v254, (const char **)&v346, 0);
                                        (*(void (**)(void, unsigned __int8 *, _OWORD *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v240, v322, *(void *)(a3 + 48), *(void *)(a3 + 56));
                                        uint64_t v255 = *(unsigned int *)(a3 + 8);
                                        if (v255)
                                        {
                                          uint64_t v256 = *(void *)a3;
                                          uint64_t v257 = *(void *)a3 + 16 * v255;
                                          do
                                          {
                                            llvm::Instruction::setMetadata((llvm::Instruction *)v240, *(_DWORD *)v256, *(llvm::MDNode **)(v256 + 8));
                                            v256 += 16;
                                          }
                                          while (v256 != v257);
                                        }
                                      }
                                    }
                                  }
                                  unint64_t v259 = (char *)v330 - (unsigned char *)__p;
                                  v260 = operator new(0x48uLL);
                                  v260[7] = v260[7] & 0x38000000 | 0x40000000;
                                  *(void *)v260 = 0;
                                  uint64_t v261 = ***(void ***)v240 + 1576;
                                  v260[7] = 0x40000000;
                                  *((void *)v260 + 1) = v261;
                                  *((void *)v260 + 2) = 0;
                                  v262 = (llvm::Instruction *)(v260 + 2);
                                  *((unsigned char *)v260 + 24) = 31;
                                  *((unsigned char *)v260 + 25) = 0;
                                  *((_WORD *)v260 + 13) = 0;
                                  v260[16] = 0;
                                  *((_OWORD *)v260 + 3) = 0u;
                                  *((_OWORD *)v260 + 2) = 0u;
                                  llvm::SwitchInst::init((uint64_t)(v260 + 2), (uint64_t)v240, v318, ((v259 >> 3) & 0xFFFFFFFE) + 2);
                                  v349[0] = 257;
                                  v263 = sub_1CB844E0C((uint64_t *)a3, v262, (uint64_t)&v346);
                                  v264 = *(unsigned __int8 **)(v320 + 48);
                                  v321 = v264;
                                  if (v264) {
                                    llvm::MetadataTracking::track((uint64_t)&v321, v264, 2);
                                  }
                                  v265 = (unsigned __int8 **)((char *)v263 + 48);
                                  if (&v321 == (unsigned __int8 **)((char *)v263 + 48))
                                  {
                                    if (!v321) {
                                      goto LABEL_430;
                                    }
                                    int v301 = *v321;
                                    if ((v301 - 4) > 0x1E)
                                    {
                                      if ((v301 - 3) >= 0xFFFFFFFE) {
                                        v307 = v321;
                                      }
                                      else {
                                        v307 = 0;
                                      }
                                      if ((v301 - 3) < 0xFFFFFFFE)
                                      {
                                        if (v301 == 3) {
                                          *((void *)v321 + 1) = 0;
                                        }
LABEL_430:
                                        v268 = v330;
                                        v269 = (llvm::ConstantInt **)__p;
                                        if (__p != v330)
                                        {
                                          do
                                          {
                                            v270 = *v269;
                                            v271 = v269[1];
                                            v269 += 2;
                                            llvm::SwitchInst::addCase(v263, v270, v271);
                                          }
                                          while (v269 != (llvm::ConstantInt **)v268);
                                        }
                                        if (((HIDWORD(v316) | v316) & 1) == 0) {
                                          goto LABEL_456;
                                        }
                                        v272 = (uint64_t *)v353;
                                        unsigned int v273 = v354;
                                        uint64_t v274 = 8 * v354;
                                        v275 = (unint64_t *)v353;
                                        if (v354 >= 2)
                                        {
                                          v277 = (unint64_t *)((char *)v353 + 8);
                                          unint64_t v276 = *(void *)v353;
                                          uint64_t v278 = v274 - 8;
                                          v275 = (unint64_t *)v353;
                                          v279 = (unint64_t *)((char *)v353 + 8);
                                          do
                                          {
                                            unint64_t v281 = *v279++;
                                            unint64_t v280 = v281;
                                            BOOL v282 = v276 >= v281;
                                            if (v276 <= v281) {
                                              unint64_t v276 = v280;
                                            }
                                            if (!v282) {
                                              v275 = v277;
                                            }
                                            v277 = v279;
                                            v278 -= 8;
                                          }
                                          while (v278);
                                        }
                                        if (HIDWORD(*v275))
                                        {
                                          if (!v354)
                                          {
                                            int v288 = 0;
                                            *(void *)&long long v346 = &v347;
                                            HIDWORD(v346) = 8;
LABEL_449:
                                            uint64_t v289 = v288 + v273;
                                            DWORD2(v346) = v288 + v273;
                                            if (v288 + v273)
                                            {
                                              uint64_t v290 = 4 * v289;
                                              v291 = &v347;
                                              while (!*(_DWORD *)v291)
                                              {
                                                v291 = (uint64_t *)((char *)v291 + 4);
                                                v290 -= 4;
                                                if (!v290) {
                                                  goto LABEL_453;
                                                }
                                              }
                                              *(void *)&v322[0] = ***((void ***)v263 + 5);
                                              BranchWeights = llvm::MDBuilder::createBranchWeights((uint64_t **)v322, (uint64_t)&v347, v289);
                                            }
                                            else
                                            {
LABEL_453:
                                              BranchWeights = 0;
                                            }
                                            llvm::Instruction::setMetadata(v263, 2, BranchWeights);
                                            if ((uint64_t *)v346 != &v347) {
                                              free((void *)v346);
                                            }
LABEL_456:
                                            sub_1CD2300A0(v320);
                                          }
                                          unint64_t v283 = 32 - __clz(*v275);
                                          uint64_t v284 = 8 * v354;
                                          v285 = v353;
                                          do
                                          {
                                            *v285++ >>= v283;
                                            v284 -= 8;
                                          }
                                          while (v284);
                                        }
                                        *(void *)&long long v346 = &v347;
                                        *((void *)&v346 + 1) = 0x800000000;
                                        if (v273 >= 9) {
                                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                                        }
                                        if (v273)
                                        {
                                          uint64_t v286 = 0;
                                          do
                                          {
                                            uint64_t v287 = *v272++;
                                            *(_DWORD *)((char *)&v347 + v286) = v287;
                                            v286 += 4;
                                            v274 -= 8;
                                          }
                                          while (v274);
                                          int v288 = DWORD2(v346);
                                        }
                                        else
                                        {
                                          int v288 = 0;
                                        }
                                        goto LABEL_449;
                                      }
                                      unint64_t v303 = (unint64_t)(v307 + 8);
                                    }
                                    else
                                    {
                                      if ((v321[1] & 0x7F) != 2 && !*((_DWORD *)v321 + 3)) {
                                        goto LABEL_430;
                                      }
                                      uint64_t v302 = *((void *)v321 + 2);
                                      if ((v302 & 4) == 0) {
                                        goto LABEL_430;
                                      }
                                      unint64_t v303 = v302 & 0xFFFFFFFFFFFFFFF8;
                                      if (!v303) {
                                        goto LABEL_430;
                                      }
                                    }
                                    *(void *)&long long v346 = &v321;
                                    sub_1CC5FA668(v303 + 16, &v346);
                                    goto LABEL_430;
                                  }
                                  v266 = *v265;
                                  if (!*v265)
                                  {
LABEL_428:
                                    v267 = v321;
                                    *v265 = v321;
                                    if (v267)
                                    {
                                      llvm::MetadataTracking::retrack((uint64_t)&v321, v267, (uint64_t)v263 + 48);
                                      v321 = 0;
                                    }
                                    goto LABEL_430;
                                  }
                                  int v293 = *v266;
                                  if ((v293 - 4) > 0x1E)
                                  {
                                    if ((v293 - 3) >= 0xFFFFFFFE) {
                                      v299 = *v265;
                                    }
                                    else {
                                      v299 = 0;
                                    }
                                    if ((v293 - 3) < 0xFFFFFFFE)
                                    {
                                      if (v293 == 3) {
                                        *((void *)v266 + 1) = 0;
                                      }
                                      goto LABEL_428;
                                    }
                                    unint64_t v295 = (unint64_t)(v299 + 8);
                                  }
                                  else
                                  {
                                    if ((v266[1] & 0x7F) != 2 && !*((_DWORD *)v266 + 3)) {
                                      goto LABEL_428;
                                    }
                                    uint64_t v294 = *((void *)v266 + 2);
                                    if ((v294 & 4) == 0) {
                                      goto LABEL_428;
                                    }
                                    unint64_t v295 = v294 & 0xFFFFFFFFFFFFFFF8;
                                    if (!v295) {
                                      goto LABEL_428;
                                    }
                                  }
                                  *(void *)&long long v346 = (char *)v263 + 48;
                                  sub_1CC5FA668(v295 + 16, &v346);
                                  goto LABEL_428;
                                }
                                int v296 = **(unsigned char **)&v322[0];
                                if ((v296 - 4) > 0x1E)
                                {
                                  if ((v296 - 3) >= 0xFFFFFFFE) {
                                    uint64_t v300 = *(void *)&v322[0];
                                  }
                                  else {
                                    uint64_t v300 = 0;
                                  }
                                  if ((v296 - 3) < 0xFFFFFFFE)
                                  {
                                    if (v296 == 3) {
                                      *(void *)(*(void *)&v322[0] + 8) = 0;
                                    }
                                    goto LABEL_400;
                                  }
                                  unint64_t v298 = v300 + 8;
                                }
                                else
                                {
                                  if ((*(unsigned char *)(*(void *)&v322[0] + 1) & 0x7F) != 2
                                    && !*(_DWORD *)(*(void *)&v322[0] + 12))
                                  {
                                    goto LABEL_400;
                                  }
                                  uint64_t v297 = *(void *)(*(void *)&v322[0] + 16);
                                  if ((v297 & 4) == 0) {
                                    goto LABEL_400;
                                  }
                                  unint64_t v298 = v297 & 0xFFFFFFFFFFFFFFF8;
                                  if (!v298) {
                                    goto LABEL_400;
                                  }
                                }
                                *(void *)&long long v346 = v322;
                                sub_1CC5FA668(v298 + 16, &v346);
                                goto LABEL_400;
                              }
                              uint64_t v113 = (void *)*((void *)v25 + 5);
                              if (v113 == (void *)((char *)v25 + 40))
                              {
LABEL_347:
                                *(void *)&long long v346 = v349;
                                *((void *)&v346 + 1) = v349;
                                uint64_t v347 = 2;
                                int v348 = 0;
LABEL_348:
                                v219 = (void *)*((void *)&v346 + 1);
                                v220 = (void *)v346;
                                if (*((void *)&v346 + 1) == (void)v346)
                                {
                                  v325 = (char *)__dst;
                                  if (HIDWORD(v347))
                                  {
                                    memmove(__dst, *((const void **)&v346 + 1), 8 * HIDWORD(v347));
                                    v220 = (void *)*((void *)&v346 + 1);
                                    v219 = (void *)v346;
                                  }
                                  else
                                  {
                                    v220 = (void *)*((void *)&v346 + 1);
                                  }
                                }
                                else
                                {
                                  v325 = (char *)*((void *)&v346 + 1);
                                  *((void *)&v346 + 1) = v346;
                                  v219 = (void *)v346;
                                }
                                uint64_t v326 = v347;
                                int v327 = v348;
                                uint64_t v347 = 2;
                                int v348 = 0;
                                if (v220 != v219) {
                                  free(v220);
                                }
                                if (v358 + (unint64_t)v361 > HIDWORD(v361)) {
                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                }
                                goto LABEL_357;
                              }
                              if (v113) {
                                v114 = v113 - 3;
                              }
                              else {
                                v114 = 0;
                              }
                              int v115 = *((unsigned __int8 *)v114 + 16);
                              int v116 = v115 - 29;
                              if (v115 != 30)
                              {
                                unsigned int v218 = 2;
                                switch(v116)
                                {
                                  case 1:
LABEL_535:
                                    __break(1u);
                                    JUMPOUT(0x1CD22C3A0);
                                  case 2:
                                    unsigned int v218 = (*((_DWORD *)v114 + 5) >> 1) & 0x3FFFFFF;
                                    goto LABEL_495;
                                  case 3:
                                  case 9:
                                    unsigned int v218 = (*((_DWORD *)v114 + 5) & 0x7FFFFFF) - 1;
                                    goto LABEL_495;
                                  case 4:
                                    goto LABEL_166;
                                  case 7:
                                    unsigned int v218 = *((_WORD *)v114 + 9) & 1;
                                    goto LABEL_495;
                                  case 8:
                                    unsigned int v218 = 1;
                                    goto LABEL_166;
                                  case 10:
                                    unsigned int v218 = *((_DWORD *)v114 + 20) + 1;
LABEL_495:
                                    *(void *)&long long v346 = v349;
                                    *((void *)&v346 + 1) = v349;
                                    uint64_t v347 = 2;
                                    int v348 = 0;
                                    if (!v218) {
                                      goto LABEL_348;
                                    }
                                    goto LABEL_167;
                                  default:
                                    goto LABEL_347;
                                }
                              }
                              if ((*((_DWORD *)v114 + 5) & 0x7FFFFFF) == 3) {
                                unsigned int v218 = 2;
                              }
                              else {
                                unsigned int v218 = 1;
                              }
LABEL_166:
                              *(void *)&long long v346 = v349;
                              *((void *)&v346 + 1) = v349;
                              uint64_t v347 = 2;
                              int v348 = 0;
LABEL_167:
                              uint64_t v117 = 0;
                              int v118 = v114 - 4;
                              unsigned int v119 = 2;
                              uint64_t v120 = v218;
                              while (2)
                              {
                                int v121 = *((unsigned __int8 *)v114 + 16);
                                if (v121 == 30)
                                {
                                  unsigned int v138 = &v118[-4 * v117];
                                }
                                else
                                {
                                  uint64_t v137 = (v121 - 31);
                                  unsigned int v138 = v114 - 4;
                                  switch(v137)
                                  {
                                    case 1:
                                    case 7:
                                      int v142 = *((_DWORD *)v114 + 5);
                                      if ((v142 & 0x40000000) != 0) {
                                        v143 = (void *)*(v114 - 1);
                                      }
                                      else {
                                        v143 = &v114[-4 * (v142 & 0x7FFFFFF)];
                                      }
                                      v141 = &v143[4 * v117];
                                      goto LABEL_209;
                                    case 2:
                                      uint64_t v144 = 0x1FFFFFFFFFFFFFF8;
                                      if (!v117) {
                                        uint64_t v144 = 0x1FFFFFFFFFFFFFF4;
                                      }
                                      unsigned int v138 = &v114[v144];
                                      break;
                                    case 3:
                                    case 4:
                                      goto LABEL_535;
                                    case 5:
                                      if ((*((_WORD *)v114 + 9) & 1) == 0)
                                      {
                                        uint64_t v122 = 0;
LABEL_172:
                                        uint64_t v123 = *((void *)&v346 + 1);
                                        uint64_t v124 = HIDWORD(v347);
                                        if (*((void *)&v346 + 1) == (void)v346)
                                        {
                                          if (HIDWORD(v347))
                                          {
                                            int v125 = 0;
                                            uint64_t v126 = 8 * HIDWORD(v347);
                                            unsigned int v127 = (void *)*((void *)&v346 + 1);
                                            do
                                            {
                                              if (*v127 == v122) {
                                                goto LABEL_203;
                                              }
                                              if (*v127 == -2) {
                                                int v125 = v127;
                                              }
                                              ++v127;
                                              v126 -= 8;
                                            }
                                            while (v126);
                                            if (v125)
                                            {
                                              *int v125 = v122;
                                              --v348;
                                              goto LABEL_203;
                                            }
                                          }
                                          if (HIDWORD(v347) < v119)
                                          {
                                            ++HIDWORD(v347);
                                            *(void *)(*((void *)&v346 + 1) + 8 * v124) = v122;
LABEL_203:
                                            if (++v117 != v120) {
                                              continue;
                                            }
                                            uint64_t v105 = v319;
                                            if (v325 != __dst) {
                                              free(v325);
                                            }
                                            goto LABEL_348;
                                          }
                                        }
                                        if (3 * v119 <= 4 * (HIDWORD(v347) - v348))
                                        {
                                          if (v119 >= 0x40) {
                                            v119 *= 2;
                                          }
                                          else {
                                            unsigned int v119 = 128;
                                          }
                                        }
                                        else if (v119 - HIDWORD(v347) >= v119 >> 3)
                                        {
                                          goto LABEL_184;
                                        }
                                        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v346, v119);
                                        unsigned int v119 = v347;
                                        uint64_t v123 = *((void *)&v346 + 1);
LABEL_184:
                                        unsigned int v128 = v119 - 1;
                                        unsigned int v129 = (v119 - 1) & ((v122 >> 4) ^ (v122 >> 9));
                                        unsigned int v130 = (void *)(v123 + 8 * v129);
                                        uint64_t v131 = *v130;
                                        if (*v130 == -1)
                                        {
                                          v135 = 0;
LABEL_195:
                                          if (v135) {
                                            v136 = v135;
                                          }
                                          else {
                                            v136 = v130;
                                          }
                                          if (*v136 != v122)
                                          {
                                            if (*v136 == -2) {
                                              --v348;
                                            }
                                            else {
                                              ++HIDWORD(v347);
                                            }
                                            void *v136 = v122;
                                          }
                                        }
                                        else
                                        {
                                          v135 = 0;
                                          int v132 = 1;
                                          while (v131 != v122)
                                          {
                                            if (v135) {
                                              BOOL v133 = 0;
                                            }
                                            else {
                                              BOOL v133 = v131 == -2;
                                            }
                                            if (v133) {
                                              v135 = v130;
                                            }
                                            unsigned int v134 = v129 + v132++;
                                            unsigned int v129 = v134 & v128;
                                            unsigned int v130 = (void *)(v123 + 8 * (v134 & v128));
                                            uint64_t v131 = *v130;
                                            if (*v130 == -1) {
                                              goto LABEL_195;
                                            }
                                          }
                                        }
                                        goto LABEL_203;
                                      }
                                      unsigned int v138 = &v114[-4 * (*((_DWORD *)v114 + 5) & 0x7FFFFFF) + 4];
                                      break;
                                    case 6:
                                      goto LABEL_171;
                                    case 8:
                                      unsigned int v138 = &v114[-4 * *((unsigned int *)v114 + 20) - 8];
                                      if (v117) {
                                        unsigned int v138 = &v118[4 * (v117 - 1) + -4 * *((unsigned int *)v114 + 20)];
                                      }
                                      goto LABEL_171;
                                    default:
                                      int v139 = *((_DWORD *)v114 + 5);
                                      if ((v139 & 0x40000000) != 0) {
                                        v140 = (void *)*(v114 - 1);
                                      }
                                      else {
                                        v140 = &v114[-4 * (v139 & 0x7FFFFFF)];
                                      }
                                      v141 = &v140[8 * v117];
LABEL_209:
                                      unsigned int v138 = v141 + 4;
                                      goto LABEL_171;
                                  }
                                }
                                break;
                              }
LABEL_171:
                              uint64_t v122 = *v138;
                              goto LABEL_172;
                            }
                            uint64_t v158 = 0;
                            uint64_t v159 = ((unint64_t)(v334 - (void)v333) >> 4);
                            while (2)
                            {
                              v160 = (uint64_t *)&v148[2 * v158];
                              unint64_t v161 = *v160;
                              if (sub_1CD2306B4((uint64_t)v325, *v160))
                              {
                                if (v316)
                                {
                                  v192 = sub_1CD508D28((uint64_t **)&v346, v161, &v148[2 * v158])[5];
                                  if (v354 >= (unint64_t)HIDWORD(v354)) {
                                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                                  }
                                  *((void *)v353 + v354) = v192;
                                  LODWORD(v354) = v354 + 1;
                                }
                                if (v146 >= (unint64_t *)v331)
                                {
                                  uint64_t v162 = (unint64_t *)__p;
                                  uint64_t v163 = ((char *)v146 - (unsigned char *)__p) >> 4;
                                  unint64_t v164 = v163 + 1;
                                  if ((unint64_t)(v163 + 1) >> 60) {
LABEL_533:
                                  }
                                    abort();
                                  uint64_t v165 = v331 - (unsigned char *)__p;
                                  if ((v331 - (unsigned char *)__p) >> 3 > v164) {
                                    unint64_t v164 = v165 >> 3;
                                  }
                                  if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFF0) {
                                    unint64_t v166 = 0xFFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v166 = v164;
                                  }
                                  if (v166)
                                  {
                                    if (v166 >> 60) {
LABEL_534:
                                    }
                                      sub_1CB833614();
                                    v167 = (char *)operator new(16 * v166);
                                  }
                                  else
                                  {
                                    v167 = 0;
                                  }
                                  v168 = &v167[16 * v163];
                                  *(_OWORD *)v168 = *(_OWORD *)v160;
                                  uint64_t v169 = v168;
                                  if (v146 != v162)
                                  {
                                    do
                                    {
                                      *((_OWORD *)v169 - 1) = *((_OWORD *)v146 - 1);
                                      v169 -= 16;
                                      v146 -= 2;
                                    }
                                    while (v146 != v162);
                                    uint64_t v146 = (unint64_t *)__p;
                                  }
                                  v149 = (unint64_t *)(v168 + 16);
                                  __p = v169;
                                  v331 = &v167[16 * v166];
                                  if (v146) {
                                    operator delete(v146);
                                  }
                                }
                                else
                                {
                                  *(_OWORD *)uint64_t v146 = *(_OWORD *)v160;
                                  v149 = v146 + 2;
                                }
                                v330 = v149;
                                unint64_t v148 = (uint64_t **)v333;
                                int v170 = (_DWORD *)sub_1CD2305DC((uint64_t)&v356, (uint64_t *)v333 + 2 * v158 + 1);
                                ++*v170;
                                if (v325)
                                {
                                  v171 = v148[2 * v158];
                                  v172 = (void **)v325;
                                  uint64_t v173 = (void **)&v325;
                                  do
                                  {
                                    unsigned int v174 = v173;
                                    char v175 = v172;
                                    char v176 = v172[4];
                                    uint64_t v177 = *((unsigned int *)v176 + 8);
                                    if (v177 > 0x40)
                                    {
                                      uint64_t v182 = v176[3];
                                      unint64_t v178 = v171[3];
                                      unint64_t v179 = ((unint64_t)(v177 + 63) >> 3) & 0x3FFFFFF8;
                                      uint64_t v183 = v182 - 8;
                                      do
                                      {
                                        if (!v179) {
                                          goto LABEL_269;
                                        }
                                        unint64_t v184 = *(void *)(v183 + v179);
                                        unint64_t v185 = *(void *)(v178 + v179 - 8);
                                        v179 -= 8;
                                      }
                                      while (v184 == v185);
                                      if (v184 > v185) {
                                        LODWORD(v179) = 1;
                                      }
                                      else {
                                        LODWORD(v179) = -1;
                                      }
                                    }
                                    else
                                    {
                                      unint64_t v179 = v176[3];
                                      unint64_t v178 = v171[3];
                                      BOOL v10 = v179 >= v178;
                                      LODWORD(v179) = v179 > v178;
                                      if (!v10) {
                                        LODWORD(v179) = -1;
                                      }
                                    }
LABEL_269:
                                    v180 = (void ***)(v175 + 1);
                                    if ((v179 & 0x80000000) == 0) {
                                      v181 = v175;
                                    }
                                    else {
                                      v181 = v175 + 1;
                                    }
                                    if ((v179 & 0x80000000) == 0) {
                                      uint64_t v173 = v175;
                                    }
                                    v172 = (void **)*v181;
                                  }
                                  while (v172);
                                  if (v173 != (void **)&v325)
                                  {
                                    if ((v179 & 0x80000000) != 0) {
                                      char v175 = v174;
                                    }
                                    v186 = v175[4];
                                    uint64_t v187 = *((unsigned int *)v171 + 8);
                                    if (v187 > 0x40)
                                    {
                                      unint64_t v193 = v187 + 63;
                                      uint64_t v194 = v186[3] - 8;
                                      uint64_t v195 = (v193 >> 3) & 0x3FFFFFF8;
                                      unint64_t v196 = v178 - 8;
                                      do
                                      {
                                        if (!v195) {
                                          goto LABEL_287;
                                        }
                                        unint64_t v197 = *(void *)(v196 + v195);
                                        unint64_t v198 = *(void *)(v194 + v195);
                                        v195 -= 8;
                                      }
                                      while (v197 == v198);
                                      if (v197 > v198)
                                      {
LABEL_287:
                                        v188 = (void ***)(v174 + 1);
                                        if ((v179 & 0x80000000) == 0) {
                                          v188 = v180;
                                        }
                                        v189 = *v188;
                                        v190 = v173;
                                        if (*v188)
                                        {
                                          do
                                          {
                                            v191 = v189;
                                            v189 = (void **)*v189;
                                          }
                                          while (v189);
                                        }
                                        else
                                        {
                                          do
                                          {
                                            v191 = (void **)v190[2];
                                            BOOL v39 = *v191 == v190;
                                            v190 = v191;
                                          }
                                          while (!v39);
                                        }
                                        if (__dst == v173) {
                                          __dst = v191;
                                        }
                                        --v326;
                                        sub_1CB91F7C8((uint64_t *)v325, (uint64_t *)v173);
                                        operator delete(v173);
                                      }
                                    }
                                    else if (v178 >= v186[3])
                                    {
                                      goto LABEL_287;
                                    }
                                  }
                                }
                              }
                              else
                              {
                                v149 = v146;
                              }
                              ++v158;
                              uint64_t v146 = v149;
                              if (v158 == v159) {
                                goto LABEL_234;
                              }
                              continue;
                            }
                          }
                        }
                        uint64_t v68 = *v63;
                        if (v68)
                        {
                          uint64_t v69 = *(void *)(v68 - 8 * *(unsigned int *)(v68 + 8));
                          if (v69)
                          {
                            if (!*(unsigned char *)v69)
                            {
                              BOOL v70 = *(void **)(v69 + 8);
                              if (*v70 == 14)
                              {
                                uint64_t v71 = v70[3];
                                uint64_t v72 = *(void *)((char *)v70 + 30);
                                BOOL v65 = v71 == 0x775F68636E617262 && v72 == 0x737468676965775FLL;
                                if (!v44) {
                                  goto LABEL_96;
                                }
LABEL_76:
                                sub_1CD230274((uint64_t ***)v320, (uint64_t **)&v353);
                                uint64_t v66 = (((char *)v330 - (unsigned char *)__p) >> 4) + 1;
                                BOOL v67 = v66 == v354 && v65;
                                v350 = v352;
                                uint64_t v351 = 0x800000000;
                                if (v67)
                                {
LABEL_98:
                                  sub_1CD230274((uint64_t ***)a2, (uint64_t **)&v350);
                                  uint64_t v74 = ((v334 - (uint64_t)v333) >> 4) + 1;
                                  LODWORD(v316) = v74 == v351;
                                  BOOL v75 = v74 == v351 && v44;
                                  HIDWORD(v316) = v75;
                                }
                                else if (v66 == v354)
                                {
                                  sub_1CBF7C198((uint64_t)&v350, ((v334 - (uint64_t)v333) >> 4) + 1, 1);
                                  uint64_t v316 = 0x100000000;
                                }
                                else
                                {
                                  uint64_t v316 = 0;
                                }
                                goto LABEL_103;
                              }
                            }
                          }
                        }
                      }
LABEL_95:
                      BOOL v65 = 0;
                      if (!v44) {
                        goto LABEL_96;
                      }
                      goto LABEL_76;
                    }
                    v58 = 0;
                    int v59 = 1;
                    while (v57 != (void **)-4096)
                    {
                      if (v58) {
                        BOOL v60 = 0;
                      }
                      else {
                        BOOL v60 = v57 == (void **)-8192;
                      }
                      if (v60) {
                        v58 = v56;
                      }
                      unsigned int v61 = v55 + v59++;
                      unsigned int v55 = v61 & v54;
                      uint64_t v56 = (void ***)(v53 + 40 * v55);
                      int v57 = *v56;
                      if (*v56 == a2) {
                        goto LABEL_71;
                      }
                    }
                    if (v58) {
                      v216 = v58;
                    }
                    else {
                      v216 = v56;
                    }
                  }
                  else
                  {
                    v216 = 0;
                  }
                  uint64_t v56 = (void ***)sub_1CC609054(v51 + 2480, (uint64_t)&v350, (uint64_t *)&v350, v216);
                  v217 = (void **)v350;
                  v56[4] = 0;
                  v56[3] = 0;
                  *uint64_t v56 = v217;
                  v56[1] = (void **)(v56 + 3);
                  v56[2] = (void **)0x100000000;
                  goto LABEL_71;
                }
              }
            }
          }
        }
LABEL_59:
        BOOL v44 = 0;
        goto LABEL_60;
      }
      v37 = 0;
      int v38 = 1;
      while (v36 != (uint64_t ***)-4096)
      {
        if (v37) {
          BOOL v39 = 0;
        }
        else {
          BOOL v39 = v36 == (uint64_t ***)-8192;
        }
        if (v39) {
          v37 = v35;
        }
        unsigned int v40 = v34 + v38++;
        unsigned int v34 = v40 & v33;
        uint64_t v35 = (uint64_t ****)(v32 + 40 * v34);
        v36 = *v35;
        if (*v35 == v23) {
          goto LABEL_43;
        }
      }
      if (v37) {
        v214 = v37;
      }
      else {
        v214 = v35;
      }
    }
    else
    {
      v214 = 0;
    }
    uint64_t v35 = (uint64_t ****)sub_1CC609054(v30 + 2480, (uint64_t)&v350, (uint64_t *)&v350, v214);
    v215 = (uint64_t ***)v350;
    v35[4] = 0;
    v35[3] = 0;
    *uint64_t v35 = v215;
    v35[1] = (uint64_t ***)(v35 + 3);
    v35[2] = (uint64_t ***)0x100000000;
    goto LABEL_43;
  }
  unint64_t v20 = (uint64_t ***)v339;
  uint64_t v21 = 8 * v340;
  while (1)
  {
    unsigned int v22 = *v20;
    v360 = a2[5];
    if (!sub_1CD1271B8(v22, (int)&v360, 1, ".fold.split", *(void *)(a1 + 8), 0, 0, 0, 0)) {
      break;
    }
    ++v20;
    v21 -= 8;
    if (!v21) {
      goto LABEL_30;
    }
  }
  if (v339 != v341) {
    free(v339);
  }
LABEL_528:
  if (v343 != v345) {
    free(v343);
  }
  if ((v342[0] & 1) == 0) {
    MEMORY[0x1D25D9CD0](v342[1], 8);
  }
  return 0;
}

uint64_t sub_1CD22C3F0(uint64_t ***this, uint64_t a2, void *a3)
{
  uint64_t v289 = *MEMORY[0x1E4F143B8];
  v3 = *(this - 12);
  if (*((unsigned char *)v3 + 16) == 82) {
    return 0;
  }
  uint64_t v5 = a2;
  unint64_t v6 = (unint64_t)this;
  uint64_t v7 = (uint64_t)this[5];
  unsigned int v9 = (uint64_t *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 40);
  if (v8 == a2 + 40)
  {
    uint64_t v10 = 0;
  }
  else
  {
    if (v8) {
      uint64_t v10 = v8 - 24;
    }
    else {
      uint64_t v10 = 0;
    }
    if (*(unsigned __int8 *)(v10 + 16) - 29 >= 0xB) {
      uint64_t v10 = 0;
    }
  }
  if (*(unsigned char *)(v10 + 16) == 30)
  {
LABEL_12:
    v11 = (void *)(v10 - 32);
  }
  else
  {
    switch(*(unsigned char *)(v10 + 16))
    {
      case ' ':
      case '&':
        int v226 = *(_DWORD *)(v10 + 20);
        if ((v226 & 0x40000000) == 0) {
          goto LABEL_517;
        }
        uint64_t v227 = *(void *)(v10 - 8);
        goto LABEL_518;
      case '!':
        v11 = (void *)(v10 - 96);
        break;
      case '""':
      case '#':
        __break(1u);
        goto LABEL_512;
      case '$':
LABEL_512:
        if ((*(_WORD *)(v10 + 18) & 1) == 0)
        {
          uint64_t v12 = 0;
          uint64_t v5 = a2;
          goto LABEL_14;
        }
        int v226 = *(_DWORD *)(v10 + 20);
LABEL_517:
        uint64_t v227 = v10 - 32 * (v226 & 0x7FFFFFF);
LABEL_518:
        v11 = (void *)(v227 + 32);
        uint64_t v5 = a2;
        break;
      case '%':
        goto LABEL_12;
      case '\'':
        v11 = (void *)(v10 - 32 * *(unsigned int *)(v10 + 80) - 64);
        break;
      default:
        int v133 = *(_DWORD *)(v10 + 20);
        if ((v133 & 0x40000000) != 0) {
          uint64_t v134 = *(void *)(v10 - 8);
        }
        else {
          uint64_t v134 = v10 - 32 * (v133 & 0x7FFFFFF);
        }
        v11 = (void *)(v134 + 32);
        break;
    }
  }
  uint64_t v12 = (void *)*v11;
LABEL_14:
  int64_t v13 = dword_1EBCFDD48;
  uint64_t v14 = (uint64_t)*(this - 4);
  if ((*((unsigned char *)this + 23) & 0x20) == 0) {
    goto LABEL_29;
  }
  uint64_t v15 = ***this;
  v271[0] = this;
  int v16 = *(_DWORD *)(v15 + 2496);
  if (!v16) {
    goto LABEL_339;
  }
  uint64_t v17 = *(void *)(v15 + 2480);
  int v18 = v16 - 1;
  unsigned int v19 = v18 & ((this >> 4) ^ (this >> 9));
  unint64_t v20 = (void *)(v17 + 40 * v19);
  uint64_t v21 = *v20;
  if (*v20 != v6)
  {
    unsigned int v22 = 0;
    int v23 = 1;
    do
    {
      if (v21 == -4096)
      {
        if (v22) {
          v135 = v22;
        }
        else {
          v135 = v20;
        }
        goto LABEL_337;
      }
      if (v22) {
        BOOL v24 = 0;
      }
      else {
        BOOL v24 = v21 == -8192;
      }
      if (v24) {
        unsigned int v22 = v20;
      }
      unsigned int v25 = v19 + v23++;
      unsigned int v19 = v25 & v18;
      unint64_t v20 = (void *)(v17 + 40 * v19);
      uint64_t v21 = *v20;
    }
    while (*v20 != v6);
  }
LABEL_25:
  uint64_t v26 = *((unsigned int *)v20 + 4);
  if (!v26) {
    goto LABEL_29;
  }
  uint64_t v27 = (void *)(v20[1] + 8);
  uint64_t v28 = 16 * v26;
  while (*((_DWORD *)v27 - 2) != 15)
  {
    v27 += 2;
    v28 -= 16;
    if (!v28) {
      goto LABEL_29;
    }
  }
  if (!*v27)
  {
LABEL_29:
    v271[0] = 0;
    v264[0] = 0;
    if (llvm::Instruction::extractProfMetadata((llvm::Instruction *)v6, (unint64_t *)v271, v264)
      && (char *)v271[0] + v264[0])
    {
      if (v14 == v5) {
        unint64_t v29 = v264[0];
      }
      else {
        unint64_t v29 = (unint64_t)v271[0];
      }
      unint64_t v30 = (unint64_t)v271[0] + v264[0];
      unint64_t v31 = ((unint64_t)v271[0] + v264[0]) >> 32;
      if (v31)
      {
        LOBYTE(v31) = 0;
        unint64_t v204 = (unint64_t)v271[0] + v264[0];
        do
        {
          unint64_t v30 = v204 >> 1;
          LOBYTE(v31) = v31 + 1;
          unint64_t v205 = v204 >> 33;
          v204 >>= 1;
        }
        while (v205);
      }
      unint64_t v32 = v29 >> v31;
      if (v30 != 0x80000000) {
        unint64_t v32 = (((unint64_t)(v29 >> v31) << 31) | (v30 >> 1)) / v30;
      }
      if ((*(unsigned int (**)(void))(*(void *)*a3 + 80))() <= v32) {
        return 0;
      }
    }
  }
  uint64_t v255 = 1;
  int v33 = &v258;
  for (uint64_t i = 8; i != 72; i += 16)
    *(uint64_t *)((char *)&v255 + i) = -4096;
  int64_t v231 = v13;
  uint64_t v232 = v14;
  uint64_t v228 = v9;
  int v229 = (llvm::Instruction *)v6;
  unsigned int v230 = (llvm::Value *)v3;
  BOOL v233 = v12;
  uint64_t v252 = v254;
  uint64_t v253 = 0x400000000;
  uint64_t v35 = *(void *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 48);
  if (v5 == v35)
  {
    unint64_t v246 = 0;
    uint64_t v36 = 0;
    int v37 = 0;
    goto LABEL_224;
  }
  uint64_t v36 = 0;
  int v37 = 0;
  unint64_t v246 = 0;
  uint64_t v12 = v287;
  v3 = v284;
  uint64_t v237 = *(void *)(a2 + 40);
  do
  {
    if (v5) {
      uint64_t v14 = v5 - 24;
    }
    else {
      uint64_t v14 = 0;
    }
    if (sub_1CBF63B28(v14) || sub_1CC27D470(v14))
    {
      if (v253 >= (unint64_t)HIDWORD(v253)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v252 + v253) = v14;
      LODWORD(v253) = v253 + 1;
      goto LABEL_194;
    }
    if (v37) {
      goto LABEL_350;
    }
    if (llvm::isSafeToSpeculativelyExecute(v14, 0, 0, 0))
    {
      int v38 = (const llvm::DILocation **)v14;
      if (!v36)
      {
        int v39 = *(_DWORD *)(v14 + 20);
        if ((v39 & 0x40000000) != 0)
        {
          uint64_t v41 = *(uint64_t **)(v14 - 8);
          unint64_t v40 = v39 & 0x7FFFFFF;
        }
        else
        {
          unint64_t v40 = v39 & 0x7FFFFFF;
          uint64_t v41 = (uint64_t *)(v14 - 32 * v40);
        }
        v271[0] = v272;
        v271[1] = (void *)0x400000000;
        if (v40 >= 5) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v40)
        {
          uint64_t v42 = 32 * v40;
          uint64_t v43 = v272;
          do
          {
            uint64_t v44 = *v41;
            v41 += 4;
            *v43++ = v44;
            v42 -= 32;
          }
          while (v42);
          uint64_t v45 = v271[0];
        }
        else
        {
          uint64_t v45 = v272;
        }
        LODWORD(v271[1]) = v40;
        uint64_t v69 = (*(uint64_t (**)(void, uint64_t, void *))(*(void *)*a3 + 72))(*a3, v14, v45);
        int v71 = v70;
        if (v271[0] != v272) {
          free(v271[0]);
        }
        BOOL v72 = v69 > dword_1EBCFDD48;
        if (v71) {
          BOOL v72 = v71 > 0;
        }
        if (v72) {
          goto LABEL_350;
        }
        uint64_t v36 = 0;
        int v38 = v246;
      }
      goto LABEL_176;
    }
    if (!byte_1EBCFE048) {
      goto LABEL_350;
    }
    uint64_t v4 = 0;
    if (!v5 || *(unsigned char *)(v14 + 16) != 61) {
      goto LABEL_351;
    }
    if ((*(_WORD *)(v14 + 18) & 0x381) != 0) {
      goto LABEL_350;
    }
    uint64_t v244 = **(llvm::Value ***)(v14 - 64);
    uint64_t v247 = *(llvm **)(v14 - 32);
    llvm::BasicBlock::instructionsWithoutDebug((llvm::BasicBlock *)v7, 1, (uint64_t)v264);
    sub_1CD230AE0((uint64_t)v271, (long long *)v264);
    if (v270 == v269)
    {
      (*(void (**)(void *))(v269[0] + 32))(v269);
    }
    else if (v270)
    {
      (*(void (**)(void))(*v270 + 40))();
    }
    if (v267 == v265)
    {
      (*(void (**)(void *))(v265[0] + 32))(v265);
    }
    else if (v267)
    {
      (*(void (**)(void))(*v267 + 40))();
    }
    *(_OWORD *)v264 = *(_OWORD *)v271;
    if (v273)
    {
      if (v273 == v272)
      {
        v267 = v265;
        (*(void (**)(void *, void *))(v272[0] + 24))(v272, v265);
      }
      else
      {
        v267 = (void *)(*(uint64_t (**)(void))(*v273 + 16))();
      }
    }
    else
    {
      v267 = 0;
    }
    long long v268 = v274;
    if (v276)
    {
      if (v276 == v275)
      {
        v270 = v269;
        (*(void (**)(void *, void *))(v275[0] + 24))(v275, v269);
      }
      else
      {
        v270 = (void *)(*(uint64_t (**)(void))(*v276 + 16))();
      }
    }
    else
    {
      v270 = 0;
    }
    long long v258 = v277;
    if (v279)
    {
      if (v279 == v278)
      {
        v260 = v259;
        (*(void (**)(void *))(v278[0] + 24))(v278);
      }
      else
      {
        v260 = (void *)(*(uint64_t (**)(void))(*v279 + 16))();
      }
    }
    else
    {
      v260 = 0;
    }
    long long v261 = v280;
    if (v282)
    {
      if (v282 == v281)
      {
        v263 = v262;
        (*(void (**)(void *, void *))(v281[0] + 24))(v281, v262);
      }
      else
      {
        v263 = (void *)(*(uint64_t (**)(void))(*v282 + 16))();
      }
    }
    else
    {
      v263 = 0;
    }
    unint64_t v6 = 9;
    while (1)
    {
      long long v286 = v268;
      sub_1CC53A1FC((uint64_t)v287, (uint64_t)v269);
      long long v283 = v261;
      sub_1CC53A1FC((uint64_t)v284, (uint64_t)v262);
      uint64_t v36 = v286;
      int64_t v13 = v283;
      if (v285 == v284)
      {
        (*(void (**)(void *))(v284[0] + 32))(v284);
      }
      else if (v285)
      {
        (*(void (**)(void))(*v285 + 40))();
      }
      if (v288 == v287)
      {
        (*(void (**)(void *))(v287[0] + 32))(v287);
      }
      else if (v288)
      {
        (*(void (**)(void))(*v288 + 40))();
      }
      if (v36 == v13 || (uint64_t v46 = sub_1CD231290((uint64_t)v264), !v6))
      {
        char v66 = 1;
        goto LABEL_148;
      }
      uint64_t v36 = v46;
      int v47 = *(unsigned __int8 *)(v46 + 16);
      uint64_t v48 = (v47 - 33);
      if (v48 <= 0x37)
      {
        if (((1 << (v47 - 33)) & 0x8000000000041) == 0)
        {
          if (v48 == 27)
          {
            int v47 = 60;
            if ((*(_WORD *)(v46 + 18) & 0x301) == 0) {
              goto LABEL_104;
            }
          }
          else if (((1 << (v47 - 33)) & 0x808001D0000010) == 0)
          {
            goto LABEL_104;
          }
          goto LABEL_141;
        }
        uint64_t v54 = *(void *)(v46 + 64);
        if (v54 && (*(unsigned char *)(v54 + 17) & 0x30) != 0) {
          goto LABEL_104;
        }
        int v55 = *(_DWORD *)(v46 + 20);
        if (v55 < 0)
        {
          uint64_t v57 = v46 - 32 * (v55 & 0x7FFFFFF);
          uint64_t v60 = *(void *)(v57 - 8);
          uint64_t v58 = v57 - 8;
          uint64_t v59 = v60;
          if (v60)
          {
            uint64_t v61 = -v59;
            while (1)
            {
              unsigned int v62 = *(_DWORD *)(*(void *)(v58 + v61) + 8);
              BOOL v63 = v62 > 7;
              int v64 = (1 << v62) & 0x83;
              if (v63 || v64 == 0) {
                break;
              }
              v61 += 16;
              if (!v61) {
                goto LABEL_127;
              }
            }
LABEL_141:
            if (v47 != 61) {
              goto LABEL_147;
            }
            goto LABEL_104;
          }
        }
LABEL_127:
        if (llvm::CallBase::hasFnAttrOnCalledFunction(v46, 45))
        {
          int v47 = *(unsigned __int8 *)(v36 + 16);
          goto LABEL_104;
        }
        int hasFnAttrOnCalledFunction = llvm::CallBase::hasFnAttrOnCalledFunction(v36, 44);
        int v47 = *(unsigned __int8 *)(v36 + 16);
        if (hasFnAttrOnCalledFunction != 1) {
          goto LABEL_141;
        }
      }
LABEL_104:
      if (v47 != 60) {
        break;
      }
      if (*(llvm **)(v36 - 32) == v247 && *(void *)v36 == (void)v244 && (*(_WORD *)(v36 + 18) & 0x381) == 0)
      {
        UnderlyingObject = llvm::getUnderlyingObject(v247, (const llvm::Value *)6);
        if (UnderlyingObject)
        {
          if (*((unsigned char *)UnderlyingObject + 16) == 59 && !llvm::PointerMayBeCaptured(UnderlyingObject, 0, 1, 0))
          {
            char v66 = 0;
            goto LABEL_148;
          }
        }
      }
LABEL_116:
      uint64_t v51 = v270;
      uint64_t v52 = *(void *)v268;
      *(void *)&long long v268 = *(void *)v268;
      unsigned int v9 = v262;
      if (!v270)
      {
LABEL_338:
        sub_1CB920400();
LABEL_339:
        v135 = 0;
LABEL_337:
        unint64_t v20 = sub_1CC609054(v15 + 2480, (uint64_t)v271, (uint64_t *)v271, v135);
        v136 = v271[0];
        v20[3] = 0;
        v20[4] = 0;
        void *v20 = v136;
        v20[1] = v20 + 3;
        v20[2] = 0x100000000;
        goto LABEL_25;
      }
      unint64_t v6 = (v6 - 1);
      while (1)
      {
        uint64_t v53 = v52 ? v52 - 24 : 0;
        if ((*(uint64_t (**)(void *, uint64_t))(*v51 + 48))(v51, v53)) {
          break;
        }
        uint64_t v51 = v270;
        uint64_t v52 = *(void *)v268;
        *(void *)&long long v268 = *(void *)v268;
        if (!v270) {
          goto LABEL_338;
        }
      }
    }
    if (v47 != 61) {
      goto LABEL_116;
    }
    if (*(llvm **)(v36 - 32) == v247
      && **(llvm::Value ***)(v36 - 64) == v244
      && (__int16 v67 = *(_WORD *)(v36 + 18), (v67 & 0x380) == 0))
    {
      char v66 = 0;
      if (v67) {
        uint64_t v36 = 0;
      }
      else {
        uint64_t v36 = *(void *)(v36 - 64);
      }
    }
    else
    {
LABEL_147:
      char v66 = 0;
      uint64_t v36 = 0;
    }
LABEL_148:
    if (v263 == v262)
    {
      (*(void (**)(void *))(v262[0] + 32))(v262);
    }
    else if (v263)
    {
      (*(void (**)(void))(*v263 + 40))();
    }
    if (v260 == v259)
    {
      (*(void (**)(void *))(v259[0] + 32))(v259);
    }
    else if (v260)
    {
      (*(void (**)(void))(*v260 + 40))();
    }
    if (v270 == v269)
    {
      (*(void (**)(void *))(v269[0] + 32))(v269);
    }
    else if (v270)
    {
      (*(void (**)(void))(*v270 + 40))();
    }
    if (v267 == v265)
    {
      (*(void (**)(void *))(v265[0] + 32))(v265);
    }
    else if (v267)
    {
      (*(void (**)(void))(*v267 + 40))();
    }
    if (v282 == v281)
    {
      (*(void (**)(void *))(v281[0] + 32))(v281);
    }
    else if (v282)
    {
      (*(void (**)(void))(*v282 + 40))();
    }
    if (v279 == v278)
    {
      (*(void (**)(void *))(v278[0] + 32))(v278);
    }
    else if (v279)
    {
      (*(void (**)(void))(*v279 + 40))();
    }
    if (v276 == v275)
    {
      (*(void (**)(void *))(v275[0] + 32))(v275);
    }
    else if (v276)
    {
      (*(void (**)(void))(*v276 + 40))();
    }
    if (v273 == v272)
    {
      (*(void (**)(void *))(v272[0] + 32))(v272);
    }
    else if (v273)
    {
      (*(void (**)(void))(*v273 + 40))();
    }
    if (v36) {
      char v68 = v66;
    }
    else {
      char v68 = 1;
    }
    int v38 = (const llvm::DILocation **)v14;
    if (v68)
    {
LABEL_350:
      uint64_t v4 = 0;
      goto LABEL_351;
    }
LABEL_176:
    int v73 = *(_DWORD *)(v14 + 20);
    if ((v73 & 0x40000000) != 0)
    {
      uint64_t v75 = *(void *)(v14 - 8);
      uint64_t v74 = v73 & 0x7FFFFFF;
      if (!v74) {
        goto LABEL_193;
      }
    }
    else
    {
      uint64_t v74 = v73 & 0x7FFFFFF;
      uint64_t v75 = v14 - 32 * v74;
      if (!v74) {
        goto LABEL_193;
      }
    }
    uint64_t v76 = 32 * v74;
    do
    {
      v264[0] = 0;
      if (*(unsigned __int8 *)(*(void *)v75 + 16) <= 0x1Bu) {
        v77 = 0;
      }
      else {
        v77 = *(llvm::Instruction **)v75;
      }
      v264[0] = (unint64_t)v77;
      if (v77 && *((void *)v77 + 5) == v7 && (llvm::Instruction::mayHaveSideEffects(v77) & 1) == 0)
      {
        v271[0] = 0;
        int v78 = sub_1CBFC6508((uint64_t)&v255, v264, v271);
        int v79 = v271[0];
        if (v78)
        {
          int v80 = *((_DWORD *)v271[0] + 2);
        }
        else
        {
          int v79 = sub_1CCEA8EB0(&v255, (uint64_t)v264, v264, (void *)v271[0]);
          int v80 = 0;
          *int v79 = v264[0];
          *((_DWORD *)v79 + 2) = 0;
        }
        *((_DWORD *)v79 + 2) = v80 + 1;
      }
      v75 += 32;
      v76 -= 32;
    }
    while (v76);
LABEL_193:
    int v37 = 1;
    unint64_t v246 = v38;
    uint64_t v35 = v237;
LABEL_194:
    uint64_t v5 = *(void *)(v5 + 8);
  }
  while (v5 != v35);
LABEL_224:
  int v81 = v255;
  if (v255 <= 1)
  {
    uint64_t v82 = v233;
    if (v255)
    {
      uint64_t v83 = 4;
      v84 = &v256;
    }
    else
    {
      v84 = v256;
      uint64_t v83 = v257;
    }
    uint64_t v85 = (long long *)&v84[2 * v83];
    int v33 = v85;
    goto LABEL_228;
  }
  uint64_t v82 = v233;
  uint64_t v85 = (long long *)&v256;
  if (v255)
  {
LABEL_326:
    int v81 = v255 & 1;
    while ((*(void *)v85 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      if (++v85 == v33)
      {
        uint64_t v85 = v33;
        break;
      }
    }
  }
  else
  {
    uint64_t v85 = (long long *)v256;
    if (v257)
    {
      int v33 = (long long *)&v256[2 * v257];
      uint64_t v82 = v233;
      goto LABEL_326;
    }
    int v81 = 0;
    int v33 = (long long *)v256;
    uint64_t v82 = v233;
  }
LABEL_228:
  BOOL v86 = v81 == 0;
  if (v81) {
    v87 = &v256;
  }
  else {
    v87 = v256;
  }
  unsigned int v88 = v257;
  if (!v86) {
    unsigned int v88 = 4;
  }
  uint64_t v89 = (long long *)&v87[2 * v88];
LABEL_234:
  while (v85 != v89)
  {
    int v90 = *((_DWORD *)v85 + 2);
    uint64_t v91 = *(void *)(*(void *)v85 + 8);
    if (v90)
    {
      while (v91)
      {
        uint64_t v91 = *(void *)(v91 + 8);
        if (!--v90) {
          goto LABEL_238;
        }
      }
    }
    else
    {
LABEL_238:
      if (!v91)
      {
        if (v37) {
          goto LABEL_350;
        }
        int v37 = 1;
      }
    }
    uint64_t v92 = v85 + 1;
    uint64_t v85 = v33;
    if (v92 != v33)
    {
      uint64_t v85 = v92;
      while ((*(void *)v85 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v85 == v33)
        {
          uint64_t v85 = v33;
          goto LABEL_234;
        }
      }
    }
  }
  uint64_t v93 = *(void *)(*(void *)(v7 + 56) + 112);
  if (v93)
  {
    if (*(char *)(v93 + 13) < 0) {
      int v94 = 2;
    }
    else {
      int v94 = 3;
    }
  }
  else
  {
    int v94 = 3;
  }
  unsigned int __n = v94;
  uint64_t v95 = a2;
  v238 = v82 + 5;
  if ((void *)v82[5] == v82 + 5)
  {
    int64_t v97 = 0;
    int v96 = 0;
LABEL_344:
    char v101 = 0;
  }
  else
  {
    int v96 = 0;
    int64_t v97 = 0;
    uint64_t v98 = v82[6];
    unint64_t v99 = (void *)(v98 - 24);
    if (v98) {
      uint64_t v100 = v98 - 24;
    }
    else {
      uint64_t v100 = 0;
    }
    if (v98)
    {
      char v101 = 0;
      if (*(unsigned char *)(v100 + 16) != 83) {
        goto LABEL_345;
      }
      char v101 = 0;
      int v96 = 0;
      int64_t v97 = 0;
      while (2)
      {
        uint64_t v102 = sub_1CBF73380((uint64_t)v99, v7);
        uint64_t v103 = sub_1CBF73380((uint64_t)v99, v95);
        if (v103 == v102) {
          goto LABEL_314;
        }
        uint64_t v104 = v103;
        uint64_t v105 = (*(uint64_t (**)(void, uint64_t, void, void, uint64_t, void, void))(*(void *)*a3 + 864))(*a3, 57, *v99, 0, 42, __n, 0);
        if (v106 == 1) {
          int v96 = 1;
        }
        if (__OFADD__(v97, v105)) {
          int64_t v97 = ((v97 + v105) >> 63) ^ 0x8000000000000000;
        }
        else {
          v97 += v105;
        }
        if (sub_1CD220C58(v102, (uint64_t)v99) & 1) != 0 || (sub_1CD220C58(v104, (uint64_t)v99)) {
          goto LABEL_344;
        }
        if (*(unsigned char *)(v102 + 16) == 5) {
          uint64_t v107 = v102;
        }
        else {
          uint64_t v107 = 0;
        }
        if (*(unsigned char *)(v104 + 16) != 5) {
          uint64_t v104 = 0;
        }
        if (!(v107 | v104))
        {
          char v101 = 1;
          goto LABEL_314;
        }
        if (v104 && !llvm::isSafeToSpeculativelyExecute(v104, 0, 0, 0)) {
          goto LABEL_344;
        }
        if (v107)
        {
          if (!llvm::isSafeToSpeculativelyExecute(v107, 0, 0, 0)) {
            goto LABEL_344;
          }
          int v108 = *(_DWORD *)(v107 + 20);
          if ((v108 & 0x40000000) != 0)
          {
            uint64_t v110 = *(uint64_t **)(v107 - 8);
            unint64_t v109 = v108 & 0x7FFFFFF;
          }
          else
          {
            unint64_t v109 = v108 & 0x7FFFFFF;
            uint64_t v110 = (uint64_t *)(v107 - 32 * v109);
          }
          v271[0] = v272;
          v271[1] = (void *)0x400000000;
          if (v109 >= 5) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v109)
          {
            uint64_t v111 = 32 * v109;
            int v112 = v272;
            do
            {
              uint64_t v113 = *v110;
              v110 += 4;
              *v112++ = v113;
              v111 -= 32;
            }
            while (v111);
            v114 = v271[0];
          }
          else
          {
            v114 = v272;
          }
          LODWORD(v271[1]) = v109;
          uint64_t v107 = (*(uint64_t (**)(void, uint64_t, void *))(*(void *)*a3 + 72))(*a3, v107, v114);
          int v118 = v117;
          if (v271[0] != v272) {
            free(v271[0]);
          }
          int v115 = v118;
          if (v104)
          {
LABEL_290:
            uint64_t v240 = v107;
            int v119 = *(_DWORD *)(v104 + 20);
            if ((v119 & 0x40000000) != 0)
            {
              int v121 = *(uint64_t **)(v104 - 8);
              unint64_t v120 = v119 & 0x7FFFFFF;
            }
            else
            {
              unint64_t v120 = v119 & 0x7FFFFFF;
              int v121 = (uint64_t *)(v104 - 32 * v120);
            }
            v271[0] = v272;
            v271[1] = (void *)0x400000000;
            if (v120 >= 5) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v120)
            {
              uint64_t v122 = 32 * v120;
              uint64_t v123 = v272;
              do
              {
                uint64_t v124 = *v121;
                v121 += 4;
                *v123++ = v124;
                v122 -= 32;
              }
              while (v122);
              int v125 = v271[0];
            }
            else
            {
              int v125 = v272;
            }
            LODWORD(v271[1]) = v120;
            uint64_t v104 = (*(uint64_t (**)(void, uint64_t, void *))(*(void *)*a3 + 72))(*a3, v104, v125);
            int v116 = v126;
            if (v271[0] != v272) {
              free(v271[0]);
            }
            uint64_t v107 = v240;
LABEL_301:
            int64_t v127 = v107 + v104;
            if (__OFADD__(v107, v104)) {
              int64_t v127 = ((v107 + v104) >> 63) ^ 0x8000000000000000;
            }
            if (v116 == 1) {
              int v128 = 1;
            }
            else {
              int v128 = v115;
            }
            BOOL v129 = v127 <= (2 * dword_1EBCFDD48);
            if (v128) {
              BOOL v129 = v128 < 1;
            }
            if (!v129 || v37 != 0)
            {
              char v101 = 0;
              uint64_t v95 = a2;
              goto LABEL_345;
            }
            char v101 = 1;
            int v37 = 1;
            uint64_t v95 = a2;
LABEL_314:
            uint64_t v131 = v99[4];
            unint64_t v99 = (void *)(v131 - 24);
            if (v131) {
              uint64_t v132 = v131 - 24;
            }
            else {
              uint64_t v132 = 0;
            }
            if (!v131 || *(unsigned char *)(v132 + 16) != 83) {
              goto LABEL_345;
            }
            continue;
          }
        }
        else
        {
          int v115 = 0;
          if (v104) {
            goto LABEL_290;
          }
        }
        break;
      }
      int v116 = 0;
      goto LABEL_301;
    }
    char v101 = 0;
  }
LABEL_345:
  if (!v246 && (v101 & 1) == 0) {
    goto LABEL_350;
  }
  BOOL v137 = v97 > v231;
  if (v96) {
    BOOL v137 = v96 > 0;
  }
  if (v137) {
    goto LABEL_350;
  }
  int v139 = (uint64_t **)v229;
  if (v36)
  {
    sub_1CC8A8E38((uint64_t)v271, (uint64_t **)v229, 0, 0, 0);
    v140 = v246 - 8;
    if (v232 == v95) {
      v141 = *(v246 - 8);
    }
    else {
      v141 = (llvm::Value *)v36;
    }
    if (v232 == v95) {
      int v142 = (llvm::Value *)v36;
    }
    else {
      int v142 = *(v246 - 8);
    }
    v264[0] = (unint64_t)"spec.store.select";
    __int16 v266 = 259;
    Select = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)v271, v230, v141, v142, (const llvm::Twine *)v264, (uint64_t ***)v229);
    if (*v140)
    {
      *(void *)*(v246 - 6) = *(v246 - 7);
      uint64_t v144 = (uint64_t)*(v246 - 7);
      if (v144) {
        *(void *)(v144 + 16) = *(v246 - 6);
      }
    }
    void *v140 = Select;
    if (Select)
    {
      unint64_t v147 = (const llvm::DILocation *)*((void *)Select + 1);
      uint64_t v145 = (llvm::Value *)((char *)Select + 8);
      uint64_t v146 = v147;
      *(v246 - 7) = v147;
      if (v147) {
        *((void *)v146 + 2) = v246 - 7;
      }
      *(v246 - 6) = v145;
      *(void *)uint64_t v145 = v140;
    }
    llvm::Instruction::applyMergedLocation((llvm::Instruction *)v246, *((const llvm::DILocation **)v229 + 6), v246[6]);
    if (v271[0] != v272) {
      free(v271[0]);
    }
  }
  unint64_t v148 = *(uint64_t **)(v95 + 48);
  v149 = v228;
  if (v148 != v228)
  {
    while (2)
    {
      if (v148) {
        v150 = v148 - 3;
      }
      else {
        v150 = 0;
      }
      if (!v36 || v150 != (uint64_t *)v246)
      {
        unsigned int v251 = 0;
        unsigned int v151 = (unsigned __int8 **)(v150 + 6);
        if (&v251 != (unsigned __int8 **)(v150 + 6))
        {
          v152 = *v151;
          if (!*v151) {
            goto LABEL_380;
          }
          int v153 = *v152;
          if ((v153 - 4) > 0x1E)
          {
            if ((v153 - 3) >= 0xFFFFFFFE) {
              v156 = *v151;
            }
            else {
              v156 = 0;
            }
            if ((v153 - 3) <= 0xFFFFFFFD)
            {
              if (v153 == 3) {
                *((void *)v152 + 1) = 0;
              }
              goto LABEL_380;
            }
            unint64_t v155 = (unint64_t)(v156 + 8);
LABEL_394:
            v271[0] = v150 + 6;
            sub_1CC5FA668(v155 + 16, v271);
            uint64_t v157 = v251;
            unint64_t *v151 = v251;
            if (v157)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v251, v157, (uint64_t)(v150 + 6));
              unsigned int v251 = 0;
            }
          }
          else
          {
            if ((v152[1] & 0x7F) == 2 || *((_DWORD *)v152 + 3))
            {
              uint64_t v154 = *((void *)v152 + 2);
              if ((v154 & 4) != 0)
              {
                unint64_t v155 = v154 & 0xFFFFFFFFFFFFFFF8;
                if (v155) {
                  goto LABEL_394;
                }
              }
            }
LABEL_380:
            unint64_t *v151 = 0;
          }
        }
      }
      llvm::Instruction::dropUndefImplyingAttrsAndUnknownMetadata(v150, 0, 0);
      unint64_t v148 = (uint64_t *)v148[1];
      if (v148 == v228)
      {
        v149 = *(uint64_t **)(v95 + 48);
        break;
      }
      continue;
    }
  }
  uint64_t v158 = (uint64_t *)*v228;
  if (v149 == (uint64_t *)*v228) {
    goto LABEL_411;
  }
  uint64_t v159 = (uint64_t *)((char *)v229 + 24);
  if ((uint64_t *)((char *)v229 + 24) == v158) {
    goto LABEL_411;
  }
  *(_WORD *)(v7 + 18) &= ~0x8000u;
  if (v7 == v95) {
    goto LABEL_410;
  }
  uint64_t v160 = *(void *)(v7 + 56);
  if (v160) {
    unint64_t v161 = *(llvm::ValueSymbolTable **)(v160 + 104);
  }
  else {
    unint64_t v161 = 0;
  }
  uint64_t v162 = *(void *)(v95 + 56);
  if (v162) {
    uint64_t v163 = *(llvm::ValueSymbolTable **)(v162 + 104);
  }
  else {
    uint64_t v163 = 0;
  }
  if (v161 != v163)
  {
    uint64_t v241 = v149;
    while (1)
    {
      v206 = (llvm::Value *)(v241 - 3);
      if (!v241) {
        v206 = 0;
      }
      unsigned int v245 = v206;
      int v235 = *((_DWORD *)v206 + 5) & 0x10000000;
      if (v163)
      {
        if (v235) {
          break;
        }
      }
LABEL_503:
      *((void *)v245 + 5) = v7;
      if (v161 && v235) {
        llvm::ValueSymbolTable::reinsertValue(v161, v245);
      }
      uint64_t v95 = a2;
      uint64_t v241 = (uint64_t *)v241[1];
      if (v241 == v158) {
        goto LABEL_410;
      }
    }
    uint64_t v207 = ***(void ***)v206;
    uint64_t v208 = *(void *)(v207 + 152);
    uint64_t v209 = *(unsigned int *)(v207 + 168);
    if (v209)
    {
      LODWORD(v210) = (v209 - 1) & ((v245 >> 4) ^ (v245 >> 9));
      v211 = (llvm::Value **)(v208 + 16 * v210);
      v212 = *v211;
      if (*v211 == v245) {
        goto LABEL_490;
      }
      int v213 = 1;
      while (v212 != (llvm::Value *)-4096)
      {
        int v214 = v210 + v213++;
        uint64_t v210 = v214 & (v209 - 1);
        v212 = *(llvm::Value **)(v208 + 16 * v210);
        if (v212 == v245)
        {
          v211 = (llvm::Value **)(v208 + 16 * v210);
          goto LABEL_490;
        }
      }
    }
    v211 = (llvm::Value **)(v208 + 16 * v209);
LABEL_490:
    uint64_t v215 = *((unsigned int *)v163 + 2);
    if (v215)
    {
      v216 = (size_t *)v211[1];
      uint64_t v234 = *((unsigned int *)v163 + 5);
      __s1 = (unsigned __int8 *)v216 + v234;
      size_t __na = *v216;
      int v217 = 0;
      if (*v216)
      {
        size_t v218 = *v216;
        v219 = __s1;
        do
        {
          int v220 = *v219++;
          int v217 = 33 * v217 + v220;
          --v218;
        }
        while (v218);
      }
      unsigned int v248 = v215 - 1;
      uint64_t v221 = *(void *)v163;
      uint64_t v243 = *(void *)v163 + 8 * v215 + 8;
      int v222 = 1;
      int v223 = v217;
      while (1)
      {
        uint64_t v224 = v223 & v248;
        v225 = *(void **)(v221 + 8 * v224);
        if (v225 != (void *)-8)
        {
          if (!v225) {
            goto LABEL_503;
          }
          if (*(_DWORD *)(v243 + 4 * v224) == v217
            && __na == *v225
            && (!__na || !memcmp(__s1, (char *)v225 + v234, __na)))
          {
            break;
          }
        }
        int v223 = v222 + v224;
        ++v222;
      }
      *(void *)(v221 + 8 * (int)v224) = -8;
      *(int32x2_t *)((char *)v163 + 12) = vadd_s32(*(int32x2_t *)((char *)v163 + 12), (int32x2_t)0x1FFFFFFFFLL);
    }
    goto LABEL_503;
  }
  unint64_t v164 = v149;
  do
  {
    uint64_t v165 = v164 - 3;
    if (!v164) {
      uint64_t v165 = 0;
    }
    v165[5] = v7;
    unint64_t v164 = (uint64_t *)v164[1];
  }
  while (v164 != v158);
LABEL_410:
  uint64_t v166 = *v158;
  uint64_t v167 = *v149;
  *(void *)(v167 + 8) = v158;
  uint64_t *v158 = v167;
  uint64_t v168 = *v159;
  *(void *)(v166 + 8) = v159;
  uint64_t *v149 = v168;
  *(void *)(v168 + 8) = v149;
  *uint64_t v159 = v166;
  int v139 = (uint64_t **)v229;
LABEL_411:
  sub_1CC8A8E38((uint64_t)v271, v139, 0, 0, 0);
  if ((void *)*v238 != v238)
  {
    uint64_t v169 = v233[6];
    uint64_t v170 = v169 - 24;
    uint64_t v171 = v169 ? v169 - 24 : 0;
    if (v169 && *(unsigned char *)(v171 + 16) == 83)
    {
      do
      {
        int v172 = *(_DWORD *)(v170 + 20);
        uint64_t v173 = v172 & 0x7FFFFFF;
        if ((v172 & 0x7FFFFFF) != 0)
        {
          uint64_t v174 = 0;
          uint64_t v175 = 32 * *(unsigned int *)(v170 + 60);
          while (1)
          {
            uint64_t v176 = v170 - 32 * v173;
            if ((v172 & 0x40000000) != 0) {
              uint64_t v176 = *(void *)(v170 - 8);
            }
            if (*(void *)(v176 + v175 + 8 * v174) == v7) {
              break;
            }
            if (v173 == ++v174)
            {
              uint64_t v177 = 0xFFFFFFFFLL;
              goto LABEL_426;
            }
          }
          uint64_t v177 = v174;
LABEL_426:
          uint64_t v178 = 0;
          while (1)
          {
            uint64_t v179 = v170 - 32 * v173;
            if ((v172 & 0x40000000) != 0) {
              uint64_t v179 = *(void *)(v170 - 8);
            }
            if (*(void *)(v179 + v175 + 8 * v178) == v95) {
              break;
            }
            if (v173 == ++v178) {
              goto LABEL_431;
            }
          }
        }
        else
        {
          uint64_t v177 = 0xFFFFFFFFLL;
LABEL_431:
          LODWORD(v178) = -1;
        }
        if ((v172 & 0x40000000) != 0) {
          uint64_t v180 = *(void *)(v170 - 8);
        }
        else {
          uint64_t v180 = v170 - 32 * v173;
        }
        v181 = *(llvm::Value **)(v180 + 32 * v177);
        uint64_t v182 = v178;
        uint64_t v183 = *(llvm::Value **)(v180 + 32 * v178);
        if (v181 != v183)
        {
          if (v232 == v95) {
            unint64_t v184 = v183;
          }
          else {
            unint64_t v184 = v181;
          }
          if (v232 == v95) {
            unint64_t v185 = v181;
          }
          else {
            unint64_t v185 = v183;
          }
          v264[0] = (unint64_t)"spec.select";
          __int16 v266 = 259;
          v186 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)v271, v230, v184, v185, (const llvm::Twine *)v264, (uint64_t ***)v139);
          int v187 = *(_DWORD *)(v170 + 20);
          if ((v187 & 0x40000000) != 0) {
            uint64_t v188 = *(void *)(v170 - 8);
          }
          else {
            uint64_t v188 = v170 - 32 * (v187 & 0x7FFFFFF);
          }
          uint64_t v189 = v188 + 32 * v177;
          if (*(void *)v189)
          {
            **(void **)(v189 + 16) = *(void *)(v189 + 8);
            uint64_t v202 = *(void *)(v189 + 8);
            if (v202) {
              *(void *)(v202 + 16) = *(void *)(v189 + 16);
            }
          }
          *(void *)uint64_t v189 = v186;
          if (v186)
          {
            v190 = (void *)((char *)v186 + 8);
            uint64_t v191 = *((void *)v186 + 1);
            uint64_t v192 = v188 + 32 * v177;
            *(void *)(v192 + 8) = v191;
            if (v191) {
              *(void *)(v191 + 16) = v192 + 8;
            }
            *(void *)(v192 + 16) = v190;
            void *v190 = v189;
          }
          int v193 = *(_DWORD *)(v170 + 20);
          if ((v193 & 0x40000000) != 0) {
            uint64_t v194 = *(void *)(v170 - 8);
          }
          else {
            uint64_t v194 = v170 - 32 * (v193 & 0x7FFFFFF);
          }
          uint64_t v195 = v194 + 32 * v182;
          if (*(void *)v195)
          {
            **(void **)(v195 + 16) = *(void *)(v195 + 8);
            uint64_t v203 = *(void *)(v195 + 8);
            if (v203) {
              *(void *)(v203 + 16) = *(void *)(v195 + 16);
            }
          }
          *(void *)uint64_t v195 = v186;
          if (v186)
          {
            uint64_t v198 = *((void *)v186 + 1);
            unint64_t v196 = (void *)((char *)v186 + 8);
            uint64_t v197 = v198;
            uint64_t v199 = v194 + 32 * v182;
            *(void *)(v199 + 8) = v198;
            if (v198) {
              *(void *)(v197 + 16) = v199 + 8;
            }
            *(void *)(v199 + 16) = v196;
            *unint64_t v196 = v195;
          }
        }
        uint64_t v200 = *(void *)(v170 + 32);
        uint64_t v170 = v200 - 24;
        if (v200) {
          uint64_t v201 = v200 - 24;
        }
        else {
          uint64_t v201 = 0;
        }
      }
      while (v200 && *(unsigned char *)(v201 + 16) == 83);
    }
  }
  if (v253) {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  if (v271[0] != v272) {
    free(v271[0]);
  }
  uint64_t v4 = 1;
LABEL_351:
  if (v252 != v254) {
    free(v252);
  }
  if ((v255 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v256, 8);
  }
  return v4;
}

uint64_t sub_1CD22E0B4(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  v276[1] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a1 - 32);
  uint64_t v9 = *(void *)(a1 - 64);
  uint64_t v10 = *(llvm::BasicBlock **)(a2 - 32);
  v11 = *(llvm::BasicBlock **)(a2 - 64);
  uint64_t SingleSuccessor = llvm::BasicBlock::getSingleSuccessor(v11);
  if ((llvm::BasicBlock *)llvm::BasicBlock::getSingleSuccessor(v10) == v11) {
    int64_t v13 = v11;
  }
  else {
    int64_t v13 = (llvm::BasicBlock *)SingleSuccessor;
  }
  if (v13)
  {
    int v243 = a3;
    uint64_t v244 = a4;
    uint64_t v14 = *(void *)(a2 + 40);
    uint64_t v15 = (llvm::BasicBlock *)(v9 == v14 ? v8 : v9);
    uint64_t v16 = v9 == v14 ? v9 : v8;
    uint64_t v17 = v11 == v13 ? v10 : v11;
    unsigned int v245 = v17;
    uint64_t v242 = v9;
    int v18 = v11 == v13 ? v11 : v10;
    unsigned int v19 = v16 == v14 ? 0 : (llvm::BasicBlock *)v16;
    unint64_t v20 = v18 == v13 ? 0 : v18;
    uint64_t v21 = *(void *)(a1 + 40);
    unsigned int v22 = v11;
    int v23 = (uint64_t **)v13;
    if (llvm::BasicBlock::getSinglePredecessor(v15) == v21)
    {
      uint64_t v239 = (uint64_t)v18;
      uint64_t v240 = v20;
      v238 = (uint64_t **)v22;
      uint64_t v241 = v23;
      if (llvm::BasicBlock::getSingleSuccessor(v15) == v14)
      {
        uint64_t v24 = v14;
        uint64_t v25 = *(void *)(a2 + 40);
        if (llvm::BasicBlock::getSinglePredecessor(v245) == v25
          && (uint64_t **)llvm::BasicBlock::getSingleSuccessor(v245) == v23)
        {
          uint64_t v27 = (uint64_t)v19;
          if (!v19
            || (uint64_t v28 = *(void *)(a1 + 40), llvm::BasicBlock::getSinglePredecessor(v19) == v28)
            && (uint64_t v29 = *(void *)(a2 + 40), llvm::BasicBlock::getSingleSuccessor(v19) == v29))
          {
            if (!v20
              || (uint64_t v30 = *(void *)(a2 + 40), llvm::BasicBlock::getSinglePredecessor(v20) == v30)
              && (uint64_t **)llvm::BasicBlock::getSingleSuccessor(v20) == v23)
            {
              uint64_t v31 = *(void *)(*(void *)(a2 + 40) + 8);
              if (v31)
              {
                uint64_t v32 = *(void *)(v31 + 8);
                if (v32)
                {
                  if (!*(void *)(v32 + 8))
                  {
                    int v33 = 0;
                    unsigned int v34 = 0;
                    char v35 = 0;
                    uint64_t v36 = 0;
                    int v37 = v255;
                    unsigned int v251 = v255;
                    uint64_t v252 = v255;
                    uint64_t v253 = 4;
                    int v254 = 0;
                    unint64_t v246 = v250;
                    uint64_t v247 = v250;
                    uint64_t v248 = 4;
                    int v249 = 0;
                    unsigned int v38 = 4;
                    long long v261 = v19;
                    uint64_t v262 = (uint64_t)v15;
                    int v39 = v255;
                    do
                    {
                      char v40 = v35;
                      uint64_t v41 = *(&v261 + v36);
                      if (v41)
                      {
                        uint64_t v42 = v41 + 5;
                        for (uint64_t i = (void *)v41[6]; ; uint64_t i = (void *)i[1])
                        {
                          if (i == v42) {
                            goto LABEL_82;
                          }
                          if (i && *((unsigned char *)i - 8) == 61) {
                            break;
                          }
LABEL_75:
                          ;
                        }
                        uint64_t v44 = *(i - 7);
                        if (v37 == v39)
                        {
                          if (v34)
                          {
                            uint64_t v45 = 0;
                            uint64_t v46 = 8 * v34;
                            int v47 = v39;
                            while (*(void *)v47 != v44)
                            {
                              if (*(void *)v47 == -2) {
                                uint64_t v45 = v47;
                              }
                              v47 += 8;
                              v46 -= 8;
                              if (!v46)
                              {
                                if (!v45) {
                                  goto LABEL_51;
                                }
                                *(void *)uint64_t v45 = v44;
                                --v254;
                                goto LABEL_74;
                              }
                            }
                            goto LABEL_74;
                          }
LABEL_51:
                          if (v34 < v38)
                          {
                            HIDWORD(v253) = v34 + 1;
                            *(void *)&v39[8 * v34] = v44;
LABEL_74:
                            int v39 = v251;
                            int v37 = v252;
                            int v33 = HIDWORD(v253);
                            unsigned int v38 = v253;
                            unsigned int v34 = HIDWORD(v253);
                            goto LABEL_75;
                          }
                        }
                        if (3 * v38 <= 4 * (v33 - v254))
                        {
                          if (v38 >= 0x40) {
                            v38 *= 2;
                          }
                          else {
                            unsigned int v38 = 128;
                          }
                        }
                        else if (v38 - v33 >= v38 >> 3)
                        {
                          goto LABEL_55;
                        }
                        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v251, v38);
                        unsigned int v38 = v253;
                        int v37 = v252;
LABEL_55:
                        unsigned int v48 = v38 - 1;
                        unsigned int v49 = (v38 - 1) & ((v44 >> 4) ^ (v44 >> 9));
                        v50 = &v37[8 * v49];
                        uint64_t v51 = *(void *)v50;
                        if (*(void *)v50 == -1)
                        {
                          uint64_t v52 = 0;
LABEL_67:
                          if (v52) {
                            uint64_t v56 = v52;
                          }
                          else {
                            uint64_t v56 = v50;
                          }
                          if (*(void *)v56 != v44)
                          {
                            if (*(void *)v56 == -2) {
                              --v254;
                            }
                            else {
                              ++HIDWORD(v253);
                            }
                            *(void *)uint64_t v56 = v44;
                          }
                        }
                        else
                        {
                          uint64_t v52 = 0;
                          int v53 = 1;
                          while (v51 != v44)
                          {
                            if (v52) {
                              BOOL v54 = 0;
                            }
                            else {
                              BOOL v54 = v51 == -2;
                            }
                            if (v54) {
                              uint64_t v52 = v50;
                            }
                            unsigned int v55 = v49 + v53++;
                            unsigned int v49 = v55 & v48;
                            v50 = &v37[8 * (v55 & v48)];
                            uint64_t v51 = *(void *)v50;
                            if (*(void *)v50 == -1) {
                              goto LABEL_67;
                            }
                          }
                        }
                        goto LABEL_74;
                      }
LABEL_82:
                      char v35 = 1;
                      uint64_t v36 = 1;
                    }
                    while ((v40 & 1) == 0);
                    char v57 = 0;
                    uint64_t v58 = 0;
                    long long v261 = v20;
                    uint64_t v262 = (uint64_t)v245;
                    do
                    {
                      char v59 = v57;
                      uint64_t v60 = *(&v261 + v58);
                      if (v60)
                      {
                        uint64_t v61 = v60 + 5;
                        for (uint64_t j = (void *)v60[6]; j != v61; uint64_t j = (void *)j[1])
                        {
                          if (j && *((unsigned char *)j - 8) == 61)
                          {
                            uint64_t v63 = *(j - 7);
                            int v64 = v247;
                            uint64_t v65 = HIDWORD(v248);
                            if (v247 != v246)
                            {
                              unsigned int v69 = v248;
                              goto LABEL_100;
                            }
                            if (!HIDWORD(v248))
                            {
LABEL_97:
                              unsigned int v69 = v248;
                              if (HIDWORD(v248) < v248)
                              {
                                ++HIDWORD(v248);
                                *(void *)&v247[8 * v65] = v63;
                                continue;
                              }
LABEL_100:
                              if (3 * v69 <= 4 * (HIDWORD(v248) - v249))
                              {
                                if (v69 >= 0x40) {
                                  v69 *= 2;
                                }
                                else {
                                  unsigned int v69 = 128;
                                }
                              }
                              else if (v69 - HIDWORD(v248) >= v69 >> 3)
                              {
                                goto LABEL_102;
                              }
                              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v246, v69);
                              unsigned int v69 = v248;
                              int v64 = v247;
LABEL_102:
                              unsigned int v70 = v69 - 1;
                              unsigned int v71 = (v69 - 1) & ((v63 >> 4) ^ (v63 >> 9));
                              BOOL v72 = &v64[8 * v71];
                              uint64_t v73 = *(void *)v72;
                              if (*(void *)v72 == -1)
                              {
                                uint64_t v74 = 0;
LABEL_114:
                                if (v74) {
                                  int v78 = v74;
                                }
                                else {
                                  int v78 = v72;
                                }
                                if (*(void *)v78 != v63)
                                {
                                  if (*(void *)v78 == -2) {
                                    --v249;
                                  }
                                  else {
                                    ++HIDWORD(v248);
                                  }
                                  *(void *)int v78 = v63;
                                }
                              }
                              else
                              {
                                uint64_t v74 = 0;
                                int v75 = 1;
                                while (v73 != v63)
                                {
                                  if (v74) {
                                    BOOL v76 = 0;
                                  }
                                  else {
                                    BOOL v76 = v73 == -2;
                                  }
                                  if (v76) {
                                    uint64_t v74 = v72;
                                  }
                                  unsigned int v77 = v71 + v75++;
                                  unsigned int v71 = v77 & v70;
                                  BOOL v72 = &v64[8 * (v77 & v70)];
                                  uint64_t v73 = *(void *)v72;
                                  if (*(void *)v72 == -1) {
                                    goto LABEL_114;
                                  }
                                }
                              }
                              continue;
                            }
                            char v66 = 0;
                            uint64_t v67 = 8 * HIDWORD(v248);
                            char v68 = v247;
                            while (*v68 != v63)
                            {
                              if (*v68 == -2) {
                                char v66 = v68;
                              }
                              ++v68;
                              v67 -= 8;
                              if (!v67)
                              {
                                if (!v66) {
                                  goto LABEL_97;
                                }
                                *char v66 = v63;
                                --v249;
                                break;
                              }
                            }
                          }
                        }
                      }
                      char v57 = 1;
                      uint64_t v58 = 1;
                    }
                    while ((v59 & 1) == 0);
                    int v79 = (unint64_t *)v251;
                    int v80 = (unint64_t *)v252;
                    unsigned int v81 = HIDWORD(v253);
                    unsigned int v82 = v253;
                    if (v252 == v251) {
                      uint64_t v83 = HIDWORD(v253);
                    }
                    else {
                      uint64_t v83 = v253;
                    }
                    v84 = (unint64_t *)&v252[8 * v83];
                    uint64_t v85 = v252;
                    if (v83)
                    {
                      uint64_t v86 = 0;
                      while (*(void *)&v252[v86] >= 0xFFFFFFFFFFFFFFFELL)
                      {
                        v86 += 8;
                        if (8 * v83 == v86)
                        {
                          v87 = v245;
                          goto LABEL_207;
                        }
                      }
                      uint64_t v85 = &v252[v86];
                    }
                    if (v85 != (char *)v84)
                    {
                      int v88 = v253 - 1;
                      int v89 = v254;
                      do
                      {
                        uint64_t v92 = *(void *)v85;
                        int v90 = (unint64_t *)(v85 + 8);
                        uint64_t v91 = v92;
                        while (v90 != v84)
                        {
                          unint64_t v93 = *v90++;
                          if (v93 <= 0xFFFFFFFFFFFFFFFDLL)
                          {
                            uint64_t v85 = (char *)(v90 - 1);
                            goto LABEL_145;
                          }
                        }
                        uint64_t v85 = (char *)v84;
LABEL_145:
                        int v94 = v246;
                        if (v247 == v246)
                        {
                          int v95 = HIDWORD(v248);
                          int v96 = &v247[8 * HIDWORD(v248)];
                          if (HIDWORD(v248))
                          {
                            uint64_t v97 = 0;
                            while (*(void *)&v247[v97] != v91)
                            {
                              v97 += 8;
                              if (8 * HIDWORD(v248) == v97) {
                                goto LABEL_164;
                              }
                            }
                            int v96 = &v247[v97];
                          }
LABEL_164:
                          int v94 = v247;
                        }
                        else
                        {
                          int v98 = v248 - 1;
                          unsigned int v99 = (v248 - 1) & ((v91 >> 4) ^ (v91 >> 9));
                          int v96 = &v247[8 * v99];
                          uint64_t v100 = *(void *)v96;
                          if (*(void *)v96 == -1)
                          {
                            char v101 = 0;
LABEL_189:
                            if (v101) {
                              int v96 = v101;
                            }
                            int v95 = HIDWORD(v248);
                            if (*(void *)v96 != v91) {
                              int v96 = &v247[8 * v248];
                            }
                          }
                          else
                          {
                            char v101 = 0;
                            int v102 = 1;
                            while (v100 != v91)
                            {
                              if (v101) {
                                BOOL v103 = 0;
                              }
                              else {
                                BOOL v103 = v100 == -2;
                              }
                              if (v103) {
                                char v101 = v96;
                              }
                              unsigned int v104 = v99 + v102++;
                              unsigned int v99 = v104 & v98;
                              int v96 = &v247[8 * (v104 & v98)];
                              uint64_t v100 = *(void *)v96;
                              if (*(void *)v96 == -1) {
                                goto LABEL_189;
                              }
                            }
                            int v95 = HIDWORD(v248);
                          }
                        }
                        if (v247 == v94) {
                          int v105 = v95;
                        }
                        else {
                          int v105 = v248;
                        }
                        if (v96 == &v247[8 * v105])
                        {
                          if (v80 == v79)
                          {
                            int v106 = &v79[v81];
                            if (v81)
                            {
                              uint64_t v107 = 8 * v81;
                              int v108 = v79;
                              while (*v108 != v91)
                              {
                                ++v108;
                                v107 -= 8;
                                if (!v107)
                                {
                                  unsigned int v109 = v81;
                                  goto LABEL_200;
                                }
                              }
                              unsigned int v109 = v81;
                              int v106 = v108;
                            }
                            else
                            {
                              unsigned int v109 = 0;
                            }
                          }
                          else
                          {
                            unsigned int v110 = ((v91 >> 4) ^ (v91 >> 9)) & v88;
                            int v106 = &v80[v110];
                            unint64_t v111 = *v106;
                            if (*v106 == -1)
                            {
                              int v112 = 0;
LABEL_195:
                              if (v112) {
                                int v106 = v112;
                              }
                              if (*v106 != v91) {
                                int v106 = &v80[v82];
                              }
                            }
                            else
                            {
                              int v112 = 0;
                              int v113 = 1;
                              while (v111 != v91)
                              {
                                if (v112) {
                                  BOOL v114 = 0;
                                }
                                else {
                                  BOOL v114 = v111 == -2;
                                }
                                if (v114) {
                                  int v112 = v106;
                                }
                                unsigned int v115 = v110 + v113++;
                                unsigned int v110 = v115 & v88;
                                int v106 = &v80[v115 & v88];
                                unint64_t v111 = *v106;
                                if (*v106 == -1) {
                                  goto LABEL_195;
                                }
                              }
                            }
                            unsigned int v109 = v82;
                          }
LABEL_200:
                          if (v106 != &v80[v109])
                          {
                            unint64_t *v106 = -2;
                            int v254 = ++v89;
                            int v79 = (unint64_t *)v251;
                            int v80 = (unint64_t *)v252;
                            unsigned int v81 = HIDWORD(v253);
                            unsigned int v82 = v253;
                          }
                        }
                        if (v80 == v79) {
                          uint64_t v83 = v81;
                        }
                        else {
                          uint64_t v83 = v82;
                        }
                      }
                      while (v85 != (char *)&v80[v83]);
                    }
                    v84 = &v80[v83];
                    v87 = v245;
                    if (v83)
                    {
LABEL_207:
                      while (*v80 >= 0xFFFFFFFFFFFFFFFELL)
                      {
                        if (++v80 == v84) {
                          goto LABEL_490;
                        }
                      }
                    }
                    if (v80 != v84)
                    {
                      uint64_t v116 = (uint64_t)v240;
                      uint64_t v237 = (char *)v87 + 40;
LABEL_212:
                      uint64_t v117 = sub_1CD231664(v27, (uint64_t)v15);
                      uint64_t v118 = (uint64_t)v87;
                      int v119 = (llvm::Instruction *)v117;
                      uint64_t v120 = sub_1CD231664(v116, v118);
                      if (!v119) {
                        goto LABEL_216;
                      }
                      uint64_t v121 = v120;
                      if (!v120 || (*(_WORD *)(v120 + 18) & 0x301) != 0 || (*((_WORD *)v119 + 9) & 0x301) != 0) {
                        goto LABEL_216;
                      }
                      int v235 = v119;
                      uint64_t v236 = v24;
                      uint64_t v124 = v15;
                      if (**((void **)v119 - 8) != **(void **)(v120 - 64)) {
                        goto LABEL_221;
                      }
                      uint64_t SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v245);
                      uint64_t v126 = SinglePredecessor + 40;
                      uint64_t v127 = *(void *)(SinglePredecessor + 48);
                      while (2)
                      {
                        if (v127 != v126)
                        {
                          uint64_t v128 = v127;
                          if (v127) {
                            uint64_t v129 = v127 - 24;
                          }
                          else {
                            uint64_t v129 = 0;
                          }
                          int v130 = *(unsigned __int8 *)(v129 + 16);
                          uint64_t v131 = (v130 - 33);
                          if (v131 <= 0x37)
                          {
                            if (((1 << (v130 - 33)) & 0x8000000000041) != 0)
                            {
                              uint64_t v132 = *(void *)(v129 + 64);
                              if (!v132 || (*(unsigned char *)(v132 + 20) & 4) == 0 && (*(unsigned char *)(v132 + 17) & 0x10) == 0)
                              {
                                LODWORD(v261) = 7;
                                if (sub_1CC5CB59C(v129, (__int32 *)&v261, 1uLL))
                                {
                                  uint64_t v136 = *(void *)(v129 - 32);
                                  if (!v136
                                    || *(unsigned char *)(v136 + 16)
                                    || *(void *)(v136 + 24) != *(void *)(v129 + 72)
                                    || *(_DWORD *)(v136 + 36) != 7)
                                  {
                                    goto LABEL_221;
                                  }
                                }
                                if ((llvm::CallBase::hasFnAttrOnCalledFunction(v129, 66) & 1) == 0
                                  && !llvm::CallBase::hasFnAttrOnCalledFunction(v129, 44))
                                {
                                  goto LABEL_221;
                                }
                              }
LABEL_239:
                              int v130 = *(unsigned __int8 *)(v129 + 16);
                            }
                            else
                            {
                              if (((1 << (v130 - 33)) & 0x808001C8000010) != 0) {
                                goto LABEL_221;
                              }
                              if (v131 == 28)
                              {
                                if ((*(_WORD *)(v129 + 18) & 0x301) != 0) {
                                  goto LABEL_221;
                                }
                                goto LABEL_239;
                              }
                            }
                          }
                          uint64_t v133 = (v130 - 33);
                          if (v133 <= 0x37)
                          {
                            if (((1 << v133) & 0x8000000000041) != 0)
                            {
                              uint64_t v134 = *(void *)(v129 + 64);
                              if (!v134 || (*(unsigned char *)(v134 + 17) & 0x30) == 0)
                              {
                                int v135 = *(_DWORD *)(v129 + 20);
                                if (v135 < 0)
                                {
                                  uint64_t v137 = v129 - 32 * (v135 & 0x7FFFFFF);
                                  uint64_t v140 = *(void *)(v137 - 8);
                                  uint64_t v138 = v137 - 8;
                                  uint64_t v139 = v140;
                                  if (v140)
                                  {
                                    uint64_t v141 = -v139;
                                    do
                                    {
                                      unsigned int v142 = *(_DWORD *)(*(void *)(v138 + v141) + 8);
                                      BOOL v207 = v142 > 7;
                                      int v143 = (1 << v142) & 0x83;
                                      if (v207 || v143 == 0) {
                                        goto LABEL_221;
                                      }
                                      v141 += 16;
                                    }
                                    while (v141);
                                  }
                                }
                                if ((llvm::CallBase::hasFnAttrOnCalledFunction(v129, 45) & 1) == 0
                                  && (llvm::CallBase::hasFnAttrOnCalledFunction(v129, 44) & 1) == 0)
                                {
                                  goto LABEL_221;
                                }
                              }
                            }
                            else if (v133 == 27)
                            {
                              if ((*(_WORD *)(v129 + 18) & 0x301) != 0) {
                                goto LABEL_221;
                              }
                            }
                            else if (((1 << v133) & 0x808001D0000010) != 0)
                            {
                              goto LABEL_221;
                            }
                          }
                          uint64_t v127 = *(void *)(v128 + 8);
                          continue;
                        }
                        break;
                      }
                      uint64_t v145 = *((void *)v245 + 6);
                      while (2)
                      {
                        if ((char *)v145 != v237)
                        {
                          if (v145) {
                            uint64_t v146 = v145 - 24;
                          }
                          else {
                            uint64_t v146 = 0;
                          }
                          if (v146 != v121)
                          {
                            int v147 = *(unsigned __int8 *)(v146 + 16);
                            uint64_t v148 = (v147 - 33);
                            if (v148 <= 0x37)
                            {
                              if (((1 << (v147 - 33)) & 0x8000000000041) != 0)
                              {
                                uint64_t v149 = *(void *)(v146 + 64);
                                if (!v149 || (*(unsigned char *)(v149 + 20) & 4) == 0 && (*(unsigned char *)(v149 + 17) & 0x10) == 0)
                                {
                                  LODWORD(v261) = 7;
                                  if (sub_1CC5CB59C(v146, (__int32 *)&v261, 1uLL))
                                  {
                                    uint64_t v153 = *(void *)(v146 - 32);
                                    if (!v153
                                      || *(unsigned char *)(v153 + 16)
                                      || *(void *)(v153 + 24) != *(void *)(v146 + 72)
                                      || *(_DWORD *)(v153 + 36) != 7)
                                    {
                                      goto LABEL_221;
                                    }
                                  }
                                  if ((llvm::CallBase::hasFnAttrOnCalledFunction(v146, 66) & 1) == 0
                                    && !llvm::CallBase::hasFnAttrOnCalledFunction(v146, 44))
                                  {
                                    goto LABEL_221;
                                  }
                                }
LABEL_284:
                                int v147 = *(unsigned __int8 *)(v146 + 16);
                              }
                              else
                              {
                                if (((1 << (v147 - 33)) & 0x808001C8000010) != 0) {
                                  goto LABEL_221;
                                }
                                if (v148 == 28)
                                {
                                  if ((*(_WORD *)(v146 + 18) & 0x301) != 0) {
                                    goto LABEL_221;
                                  }
                                  goto LABEL_284;
                                }
                              }
                            }
                            uint64_t v150 = (v147 - 33);
                            if (v150 <= 0x37)
                            {
                              if (((1 << v150) & 0x8000000000041) != 0)
                              {
                                uint64_t v151 = *(void *)(v146 + 64);
                                if (!v151 || (*(unsigned char *)(v151 + 17) & 0x30) == 0)
                                {
                                  int v152 = *(_DWORD *)(v146 + 20);
                                  if (v152 < 0)
                                  {
                                    uint64_t v154 = v146 - 32 * (v152 & 0x7FFFFFF);
                                    uint64_t v157 = *(void *)(v154 - 8);
                                    uint64_t v155 = v154 - 8;
                                    uint64_t v156 = v157;
                                    if (v157)
                                    {
                                      uint64_t v158 = -v156;
                                      do
                                      {
                                        unsigned int v159 = *(_DWORD *)(*(void *)(v155 + v158) + 8);
                                        BOOL v207 = v159 > 7;
                                        int v160 = (1 << v159) & 0x83;
                                        if (v207 || v160 == 0) {
                                          goto LABEL_221;
                                        }
                                        v158 += 16;
                                      }
                                      while (v158);
                                    }
                                  }
                                  if ((llvm::CallBase::hasFnAttrOnCalledFunction(v146, 45) & 1) == 0
                                    && !llvm::CallBase::hasFnAttrOnCalledFunction(v146, 44))
                                  {
                                    goto LABEL_221;
                                  }
                                }
                              }
                              else if (v150 == 27)
                              {
                                if ((*(_WORD *)(v146 + 18) & 0x301) != 0) {
                                  goto LABEL_221;
                                }
                              }
                              else if (((1 << v150) & 0x808001D0000010) != 0)
                              {
                                goto LABEL_221;
                              }
                            }
                          }
                          uint64_t v145 = *(void *)(v145 + 8);
                          continue;
                        }
                        break;
                      }
                      if (v240)
                      {
                        for (k = (void *)*((void *)v240 + 6); ; k = (void *)k[1])
                        {
                          if (k == (void *)((char *)v240 + 40)) {
                            goto LABEL_357;
                          }
                          uint64_t v163 = k ? (uint64_t)(k - 3) : 0;
                          if (v163 != v121) {
                            break;
                          }
LABEL_335:
                          ;
                        }
                        int v164 = *(unsigned __int8 *)(v163 + 16);
                        uint64_t v165 = (v164 - 33);
                        if (v165 <= 0x37)
                        {
                          if (((1 << (v164 - 33)) & 0x8000000000041) != 0)
                          {
                            uint64_t v166 = *(void *)(v163 + 64);
                            if (!v166 || (*(unsigned char *)(v166 + 20) & 4) == 0 && (*(unsigned char *)(v166 + 17) & 0x10) == 0)
                            {
                              LODWORD(v261) = 7;
                              if (sub_1CC5CB59C(v163, (__int32 *)&v261, 1uLL))
                              {
                                uint64_t v170 = *(void *)(v163 - 32);
                                if (!v170
                                  || *(unsigned char *)(v170 + 16)
                                  || *(void *)(v170 + 24) != *(void *)(v163 + 72)
                                  || *(_DWORD *)(v170 + 36) != 7)
                                {
                                  goto LABEL_221;
                                }
                              }
                              if ((llvm::CallBase::hasFnAttrOnCalledFunction(v163, 66) & 1) == 0
                                && !llvm::CallBase::hasFnAttrOnCalledFunction(v163, 44))
                              {
                                goto LABEL_221;
                              }
                            }
                            goto LABEL_330;
                          }
                          if (((1 << (v164 - 33)) & 0x808001C8000010) != 0) {
                            goto LABEL_221;
                          }
                          if (v165 == 28)
                          {
                            if ((*(_WORD *)(v163 + 18) & 0x301) != 0) {
                              goto LABEL_221;
                            }
LABEL_330:
                            int v164 = *(unsigned __int8 *)(v163 + 16);
                          }
                        }
                        uint64_t v167 = (v164 - 33);
                        if (v167 <= 0x37)
                        {
                          if (((1 << v167) & 0x8000000000041) != 0)
                          {
                            uint64_t v168 = *(void *)(v163 + 64);
                            if (!v168 || (*(unsigned char *)(v168 + 17) & 0x30) == 0)
                            {
                              int v169 = *(_DWORD *)(v163 + 20);
                              if (v169 < 0)
                              {
                                uint64_t v171 = v163 - 32 * (v169 & 0x7FFFFFF);
                                uint64_t v174 = *(void *)(v171 - 8);
                                uint64_t v172 = v171 - 8;
                                uint64_t v173 = v174;
                                if (v174)
                                {
                                  uint64_t v175 = -v173;
                                  do
                                  {
                                    unsigned int v176 = *(_DWORD *)(*(void *)(v172 + v175) + 8);
                                    BOOL v207 = v176 > 7;
                                    int v177 = (1 << v176) & 0x83;
                                    if (v207 || v177 == 0) {
                                      goto LABEL_221;
                                    }
                                    v175 += 16;
                                  }
                                  while (v175);
                                }
                              }
                              if ((llvm::CallBase::hasFnAttrOnCalledFunction(v163, 45) & 1) == 0
                                && !llvm::CallBase::hasFnAttrOnCalledFunction(v163, 44))
                              {
                                goto LABEL_221;
                              }
                            }
                          }
                          else if (v167 == 27)
                          {
                            if ((*(_WORD *)(v163 + 18) & 0x301) != 0) {
                              goto LABEL_221;
                            }
                          }
                          else if (((1 << v167) & 0x808001D0000010) != 0)
                          {
                            goto LABEL_221;
                          }
                        }
                        goto LABEL_335;
                      }
LABEL_357:
                      uint64_t v179 = *((void *)v235 + 5) + 40;
                      if ((llvm::Instruction *)((char *)v235 + 24) != (llvm::Instruction *)v179)
                      {
                        uint64_t v180 = (char *)v235 + 24;
                        while (1)
                        {
                          uint64_t v181 = v180 ? (uint64_t)(v180 - 24) : 0;
                          if ((llvm::Instruction *)v181 != v235) {
                            break;
                          }
LABEL_380:
                          uint64_t v180 = (char *)*((void *)v180 + 1);
                          if (v180 == (char *)v179) {
                            goto LABEL_403;
                          }
                        }
                        uint64_t v182 = v181;
                        int v183 = *(unsigned __int8 *)(v181 + 16);
                        uint64_t v184 = (v183 - 33);
                        if (v184 <= 0x37)
                        {
                          if (((1 << (v183 - 33)) & 0x8000000000041) != 0)
                          {
                            uint64_t v185 = *(void *)(v182 + 64);
                            if (!v185 || (*(unsigned char *)(v185 + 20) & 4) == 0 && (*(unsigned char *)(v185 + 17) & 0x10) == 0)
                            {
                              LODWORD(v261) = 7;
                              if (sub_1CC5CB59C(v182, (__int32 *)&v261, 1uLL))
                              {
                                uint64_t v189 = *(void *)(v182 - 32);
                                if (!v189
                                  || *(unsigned char *)(v189 + 16)
                                  || *(void *)(v189 + 24) != *(void *)(v182 + 72)
                                  || *(_DWORD *)(v189 + 36) != 7)
                                {
                                  goto LABEL_221;
                                }
                              }
                              if ((llvm::CallBase::hasFnAttrOnCalledFunction(v182, 66) & 1) == 0
                                && !llvm::CallBase::hasFnAttrOnCalledFunction(v182, 44))
                              {
                                goto LABEL_221;
                              }
                            }
                            goto LABEL_375;
                          }
                          if (((1 << (v183 - 33)) & 0x808001C8000010) != 0) {
                            goto LABEL_221;
                          }
                          if (v184 == 28)
                          {
                            if ((*(_WORD *)(v182 + 18) & 0x301) != 0) {
                              goto LABEL_221;
                            }
LABEL_375:
                            int v183 = *(unsigned __int8 *)(v182 + 16);
                          }
                        }
                        uint64_t v186 = (v183 - 33);
                        if (v186 <= 0x37)
                        {
                          if (((1 << v186) & 0x8000000000041) != 0)
                          {
                            uint64_t v187 = *(void *)(v182 + 64);
                            if (!v187 || (*(unsigned char *)(v187 + 17) & 0x30) == 0)
                            {
                              int v188 = *(_DWORD *)(v182 + 20);
                              if (v188 < 0)
                              {
                                uint64_t v190 = v182 - 32 * (v188 & 0x7FFFFFF);
                                uint64_t v193 = *(void *)(v190 - 8);
                                uint64_t v191 = v190 - 8;
                                uint64_t v192 = v193;
                                if (v193)
                                {
                                  uint64_t v194 = -v192;
                                  do
                                  {
                                    unsigned int v195 = *(_DWORD *)(*(void *)(v191 + v194) + 8);
                                    BOOL v207 = v195 > 7;
                                    int v196 = (1 << v195) & 0x83;
                                    if (v207 || v196 == 0) {
                                      goto LABEL_221;
                                    }
                                    v194 += 16;
                                  }
                                  while (v194);
                                }
                              }
                              if ((llvm::CallBase::hasFnAttrOnCalledFunction(v182, 45) & 1) == 0
                                && !llvm::CallBase::hasFnAttrOnCalledFunction(v182, 44))
                              {
                                goto LABEL_221;
                              }
                            }
                          }
                          else if (v186 == 27)
                          {
                            if ((*(_WORD *)(v182 + 18) & 0x301) != 0) {
                              goto LABEL_221;
                            }
                          }
                          else if (((1 << v186) & 0x808001D0000010) != 0)
                          {
                            goto LABEL_221;
                          }
                        }
                        goto LABEL_380;
                      }
LABEL_403:
                      v257[1] = v121;
                      long long v258 = v244;
                      v257[0] = v235;
                      if (!byte_1EBCFE1C8
                        && (!sub_1CD231734(&v258, v19, (uint64_t)v257)
                         || !sub_1CD231734(&v258, v124, (uint64_t)v257)
                         || !sub_1CD231734(&v258, v240, (uint64_t)v257)
                         || !sub_1CD231734(&v258, v245, (uint64_t)v257)))
                      {
                        goto LABEL_221;
                      }
                      uint64_t v198 = v241;
                      do
                      {
                        uint64_t v198 = (uint64_t **)v198[1];
                        if (!v198) {
                          break;
                        }
                        uint64_t v199 = v198[3];
                        unsigned int v200 = *((unsigned __int8 *)v199 + 16);
                        BOOL v201 = v199 && v200 >= 0x1C;
                      }
                      while (!v201 || v200 - 29 >= 0xB);
                      unint64_t v203 = 2;
                      while (1)
                      {
                        uint64_t v198 = (uint64_t **)v198[1];
                        if (!v198) {
                          break;
                        }
                        unint64_t v204 = v198[3];
                        unsigned int v205 = *((unsigned __int8 *)v204 + 16);
                        if (v204) {
                          BOOL v206 = v205 >= 0x1C;
                        }
                        else {
                          BOOL v206 = 0;
                        }
                        BOOL v207 = !v206 || v205 - 29 > 0xA;
                        if (!v207)
                        {
                          if (v203 < 2)
                          {
                            uint64_t v208 = v239;
                            if (!v240) {
                              uint64_t v208 = llvm::BasicBlock::getSinglePredecessor(v245);
                            }
                            long long v261 = v245;
                            uint64_t v262 = v208;
                            uint64_t v209 = sub_1CD1271B8(v241, (int)&v261, 2, "condstore.split", v243, 0, 0, 0, 0);
                            if (v209)
                            {
                              uint64_t v210 = v209;
LABEL_436:
                              uint64_t v211 = *(void *)(llvm::BasicBlock::getSinglePredecessor(v124) + 40);
                              if (v211) {
                                uint64_t v212 = v211 - 24;
                              }
                              else {
                                uint64_t v212 = 0;
                              }
                              if (*(unsigned __int8 *)(v212 + 16) - 29 >= 0xB) {
                                uint64_t v212 = 0;
                              }
                              int v213 = *(llvm::Instruction **)(v212 - 96);
                              uint64_t v214 = *(void *)(llvm::BasicBlock::getSinglePredecessor(v245) + 40);
                              if (v214) {
                                uint64_t v215 = v214 - 24;
                              }
                              else {
                                uint64_t v215 = 0;
                              }
                              if (*(unsigned __int8 *)(v215 + 16) - 29 >= 0xB) {
                                uint64_t v215 = 0;
                              }
                              uint64_t v234 = *(llvm::Instruction **)(v215 - 96);
                              v216 = sub_1CD231E08(*((void *)v235 - 8), *((llvm::BasicBlock **)v235 + 5), 0);
                              sub_1CD231E08(*(void *)(v121 - 64), *(llvm::BasicBlock **)(v121 + 40), v216);
                              uint64_t v217 = v210 + 40;
                              for (uint64_t m = *(void *)(v210 + 48); ; uint64_t m = *(void *)(m + 8))
                              {
                                if (m == v217) {
                                  goto LABEL_458;
                                }
                                uint64_t v219 = m - 24;
                                if (!m) {
                                  uint64_t v219 = 0;
                                }
                                if (*(unsigned char *)(v219 + 16) != 83) {
                                  break;
                                }
                              }
                              unsigned int v220 = *(unsigned __int8 *)(m - 8) - 38;
                              BOOL v207 = v220 > 0x38;
                              uint64_t v221 = (1 << v220) & 0x100060000000001;
                              if (v207 || v221 == 0) {
                                uint64_t v217 = m;
                              }
                              else {
                                uint64_t v217 = *(void *)(m + 8);
                              }
LABEL_458:
                              uint64_t v223 = 0;
                              if (v217) {
                                uint64_t v224 = (uint64_t **)(v217 - 24);
                              }
                              else {
                                uint64_t v224 = 0;
                              }
                              uint64_t v225 = **v224;
                              long long v261 = (llvm::BasicBlock *)&v263;
                              uint64_t v262 = 0x200000000;
                              uint64_t v266 = v225;
                              v267 = &v275;
                              long long v268 = v276;
                              uint64_t v269 = 0;
                              int v270 = 0;
                              __int16 v271 = 512;
                              char v272 = 7;
                              v264 = 0;
                              v265 = 0;
                              uint64_t v273 = 0;
                              uint64_t v274 = 0;
                              v275 = &unk_1F2616E88;
                              v276[0] = &unk_1F2617008;
                              v264 = v224[5];
                              v265 = v224 + 3;
                              int v226 = (unsigned __int8 *)v224[6];
                              v256[0] = v226;
                              if (v226)
                              {
                                llvm::MetadataTracking::track((uint64_t)v256, v226, 2);
                                uint64_t v223 = v256[0];
                              }
                              sub_1CB8461A4((uint64_t)&v261, 0, v223);
                              if (!v256[0])
                              {
LABEL_464:
                                if (*((llvm::BasicBlock **)v235 + 5) != v19)
                                {
                                  __int16 v260 = 257;
                                  int v213 = sub_1CC2427E8((uint64_t)&v261, (uint64_t)v213, (uint64_t)&v259, v227);
                                }
                                if (*(llvm::BasicBlock **)(v121 + 40) != v240)
                                {
                                  __int16 v260 = 257;
                                  uint64_t v234 = sub_1CC2427E8((uint64_t)&v261, (uint64_t)v234, (uint64_t)&v259, v227);
                                }
                                if (v242 == v236)
                                {
                                  __int16 v260 = 257;
                                  int v213 = sub_1CC2427E8((uint64_t)&v261, (uint64_t)v213, (uint64_t)&v259, v227);
                                }
                                if (v238 == v241)
                                {
                                  __int16 v260 = 257;
                                  uint64_t v234 = sub_1CC2427E8((uint64_t)&v261, (uint64_t)v234, (uint64_t)&v259, v227);
                                }
                                __int16 v260 = 257;
                                uint64_t v228 = sub_1CB844AF4((uint64_t)&v261, v213, (uint64_t)v234, (uint64_t)&v259);
                                if (v265) {
                                  uint64_t v229 = (uint64_t)(v265 - 3);
                                }
                                else {
                                  uint64_t v229 = 0;
                                }
                                sub_1CD1290BC((uint64_t)v228, v229);
                              }
                              int v230 = *(unsigned __int8 *)v256[0];
                              if ((v230 - 4) > 0x1E)
                              {
                                if ((v230 - 3) >= 0xFFFFFFFE) {
                                  uint64_t v233 = v256[0];
                                }
                                else {
                                  uint64_t v233 = 0;
                                }
                                if ((v230 - 3) < 0xFFFFFFFE)
                                {
                                  if (v230 == 3) {
                                    *(void *)(v256[0] + 8) = 0;
                                  }
                                  goto LABEL_464;
                                }
                                unint64_t v232 = v233 + 8;
                              }
                              else
                              {
                                if ((*(unsigned char *)(v256[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v256[0] + 12)) {
                                  goto LABEL_464;
                                }
                                uint64_t v231 = *(void *)(v256[0] + 16);
                                if ((v231 & 4) == 0) {
                                  goto LABEL_464;
                                }
                                unint64_t v232 = v231 & 0xFFFFFFFFFFFFFFF8;
                                if (!v232) {
                                  goto LABEL_464;
                                }
                              }
                              unint64_t v259 = (llvm::MDNode *)v256;
                              sub_1CC5FA668(v232 + 16, &v259);
                              goto LABEL_464;
                            }
LABEL_221:
                            uint64_t v27 = (uint64_t)v19;
                            uint64_t v15 = v124;
                            uint64_t v24 = v236;
LABEL_216:
                            uint64_t v122 = v80 + 1;
                            do
                            {
                              if (v122 == v84) {
                                goto LABEL_490;
                              }
                              unint64_t v123 = *v122++;
                            }
                            while (v123 > 0xFFFFFFFFFFFFFFFDLL);
                            int v80 = v122 - 1;
                            v87 = v245;
                            uint64_t v116 = (uint64_t)v240;
                            goto LABEL_212;
                          }
LABEL_425:
                          --v203;
                        }
                      }
                      if (v203 <= 1)
                      {
                        uint64_t v210 = (uint64_t)v241;
                        goto LABEL_436;
                      }
                      goto LABEL_425;
                    }
LABEL_490:
                    if (v247 != v246) {
                      free(v247);
                    }
                    if (v252 != v251) {
                      free(v252);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

unsigned __int8 *sub_1CD22FA48(unsigned __int8 *result, uint64_t a2, unsigned int a3)
{
  v3 = result;
  unsigned int v4 = result[16];
  if (v4 != 16) {
    result = 0;
  }
  if (v4 <= 0x14 && result == 0)
  {
    uint64_t v6 = *(void *)v3;
    unsigned int v7 = *(_DWORD *)(*(void *)v3 + 8);
    if (v7 == 15)
    {
      if ((v7 & 0xFE) == 0x12) {
        unsigned int v7 = *(_DWORD *)(**(void **)(v6 + 16) + 8);
      }
      if (v7 < 0x100) {
        goto LABEL_20;
      }
      unsigned int v8 = v7 >> 8;
      uint64_t v9 = a2;
      if (a3)
      {
        uint64_t v9 = a2;
        unint64_t v10 = a3;
        do
        {
          unint64_t v11 = v10 >> 1;
          uint64_t v12 = v9 + 16 * (v10 >> 1);
          unsigned int v13 = *(_DWORD *)(v12 + 8);
          uint64_t v14 = v12 + 16;
          v10 += ~(v10 >> 1);
          if (v13 < v8) {
            uint64_t v9 = v14;
          }
          else {
            unint64_t v10 = v11;
          }
        }
        while (v10);
      }
      if (v9 == a2 + 16 * a3 || *(_DWORD *)(v9 + 8) != v8) {
LABEL_20:
      }
        uint64_t v9 = a2;
      uint64_t v15 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v6, (llvm::LLVMContext *)*(unsigned int *)(v9 + 4));
      uint64_t v17 = v15;
      if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
      {
        int v23 = (llvm::Type *)*(unsigned int *)(v6 + 32);
        if (*(_DWORD *)(v6 + 8) == 19) {
          llvm::ScalableVectorType::get(v15, v23);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v15, v23);
        }
        uint64_t v17 = v24;
      }
      int v18 = v3[16];
      if (v18 == 5)
      {
        if (*((_WORD *)v3 + 9) == 48)
        {
          result = *(unsigned __int8 **)&v3[-32 * (*((_DWORD *)v3 + 5) & 0x7FFFFFF)];
          if (result && result[16] == 16)
          {
            if (*(uint64_t ***)result != v17)
            {
              return (unsigned __int8 *)llvm::ConstantExpr::getIntegerCast((llvm::ConstantExpr *)result, (llvm::Type ***)v17, 0);
            }
            return result;
          }
        }
      }
      else if (v18 == 19)
      {
        unsigned int v19 = (llvm::Type **)*v17;
        unsigned int v20 = *((_DWORD *)v17 + 2);
        unsigned int v26 = v20 >> 8;
        if (v20 >> 8 >= 0x41) {
          operator new[]();
        }
        uint64_t v25 = 0;
        result = (unsigned __int8 *)llvm::ConstantInt::get((llvm::ConstantInt *)v19, (llvm::LLVMContext *)&v25, v16);
        if (v26 >= 0x41)
        {
          if (v25)
          {
            uint64_t v21 = result;
            MEMORY[0x1D25D9CB0](v25, 0x1000C8000313F17);
            return v21;
          }
        }
        return result;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_1CD22FCB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 && *(unsigned char *)(a2 + 16) == 31)
  {
    unint64_t v5 = ((*(_DWORD *)(a2 + 20) >> 1) & 0x3FFFFFFu) - 1;
    uint64_t v6 = *(unsigned __int8 ***)a3;
    if (v5 > (uint64_t)(*(void *)(a3 + 16) - *(void *)a3) >> 4)
    {
      unsigned int v7 = *(unsigned __int8 ***)(a3 + 8);
      unsigned int v8 = (char *)operator new(16 * v5);
      uint64_t v9 = &v8[((char *)v7 - (char *)v6) & 0xFFFFFFFFFFFFFFF0];
      unint64_t v10 = v9;
      if (v7 != v6)
      {
        unint64_t v11 = &v8[((char *)v7 - (char *)v6) & 0xFFFFFFFFFFFFFFF0];
        do
        {
          unint64_t v10 = v11 - 16;
          *((_OWORD *)v11 - 1) = *((_OWORD *)v7 - 1);
          v7 -= 2;
          v11 -= 16;
        }
        while (v7 != v6);
      }
      *(void *)a3 = v10;
      *(void *)(a3 + 8) = v9;
      *(void *)(a3 + 16) = &v8[16 * v5];
      if (v6) {
        operator delete(v6);
      }
    }
    unsigned int v12 = *(_DWORD *)(a2 + 20);
    int v13 = (v12 >> 1) & 0x3FFFFFF;
    uint64_t v14 = (v13 - 1);
    if (v13 != 1)
    {
      uint64_t v15 = 0;
      do
      {
        int v16 = *(_DWORD *)(a2 + 20);
        if ((v16 & 0x40000000) != 0) {
          uint64_t v17 = *(void *)(a2 - 8);
        }
        else {
          uint64_t v17 = a2 - 32 * (v16 & 0x7FFFFFF);
        }
        int v18 = *(unsigned __int8 **)(v17 + 32 * (2 * v15 + 2));
        uint64_t v19 = (2 * v15 + 3);
        if (v15 == 4294967294) {
          uint64_t v19 = 1;
        }
        unsigned int v20 = *(unsigned __int8 **)(v17 + 32 * v19);
        unsigned int v22 = *(unsigned __int8 ***)(a3 + 8);
        unint64_t v21 = *(void *)(a3 + 16);
        if ((unint64_t)v22 >= v21)
        {
          uint64_t v24 = *(unsigned __int8 ***)a3;
          uint64_t v25 = ((uint64_t)v22 - *(void *)a3) >> 4;
          unint64_t v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 60) {
            goto LABEL_64;
          }
          uint64_t v27 = v21 - (void)v24;
          if (v27 >> 3 > v26) {
            unint64_t v26 = v27 >> 3;
          }
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v26;
          }
          if (v28)
          {
            if (v28 >> 60) {
              goto LABEL_65;
            }
            uint64_t v29 = (char *)operator new(16 * v28);
          }
          else
          {
            uint64_t v29 = 0;
          }
          uint64_t v30 = &v29[16 * v25];
          *(void *)uint64_t v30 = v18;
          *((void *)v30 + 1) = v20;
          uint64_t v31 = v30;
          if (v22 != v24)
          {
            do
            {
              *((_OWORD *)v31 - 1) = *((_OWORD *)v22 - 1);
              v31 -= 16;
              v22 -= 2;
            }
            while (v22 != v24);
            unsigned int v22 = *(unsigned __int8 ***)a3;
          }
          int v23 = v30 + 16;
          *(void *)a3 = v31;
          *(void *)(a3 + 8) = v30 + 16;
          *(void *)(a3 + 16) = &v29[16 * v28];
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          *unsigned int v22 = v18;
          v22[1] = v20;
          int v23 = v22 + 2;
        }
        *(void *)(a3 + 8) = v23;
        ++v15;
      }
      while (v15 != v14);
      unsigned int v12 = *(_DWORD *)(a2 + 20);
    }
    if ((v12 & 0x40000000) != 0) {
      uint64_t v32 = *(void *)(a2 - 8);
    }
    else {
      uint64_t v32 = a2 - 32 * (v12 & 0x7FFFFFF);
    }
    uint64_t v48 = v32 + 32;
  }
  else
  {
    uint64_t v33 = *(void *)(a2 - 96);
    uint64_t v34 = a2 - 32;
    if ((*(_WORD *)(v33 + 18) & 0x3F) == 0x21) {
      uint64_t v35 = -1;
    }
    else {
      uint64_t v35 = 0;
    }
    uint64_t v36 = *(unsigned __int8 **)(v34 + 32 * v35);
    int v37 = sub_1CD22FA48(*(unsigned __int8 **)(v33 - 32), *(void *)(*(void *)(a1 + 16) + 232), *(_DWORD *)(*(void *)(a1 + 16) + 240));
    unsigned int v38 = v37;
    char v40 = *(unsigned __int8 ***)(a3 + 8);
    unint64_t v39 = *(void *)(a3 + 16);
    if ((unint64_t)v40 >= v39)
    {
      uint64_t v42 = *(unsigned __int8 ***)a3;
      uint64_t v43 = ((uint64_t)v40 - *(void *)a3) >> 4;
      unint64_t v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 60) {
LABEL_64:
      }
        abort();
      uint64_t v45 = v39 - (void)v42;
      if (v45 >> 3 > v44) {
        unint64_t v44 = v45 >> 3;
      }
      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v46 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v46 = v44;
      }
      if (v46)
      {
        if (v46 >> 60) {
LABEL_65:
        }
          sub_1CB833614();
        int v47 = (char *)operator new(16 * v46);
      }
      else
      {
        int v47 = 0;
      }
      unsigned int v49 = (unsigned __int8 **)&v47[16 * v43];
      void *v49 = v38;
      v49[1] = v36;
      uint64_t v41 = v49 + 2;
      if (v40 != v42)
      {
        do
        {
          *((_OWORD *)v49 - 1) = *((_OWORD *)v40 - 1);
          v49 -= 2;
          v40 -= 2;
        }
        while (v40 != v42);
        char v40 = *(unsigned __int8 ***)a3;
      }
      *(void *)a3 = v49;
      *(void *)(a3 + 8) = v41;
      *(void *)(a3 + 16) = &v47[16 * v46];
      if (v40) {
        operator delete(v40);
      }
    }
    else
    {
      *char v40 = v37;
      v40[1] = v36;
      uint64_t v41 = v40 + 2;
    }
    *(void *)(a3 + 8) = v41;
    if ((*(_WORD *)(v33 + 18) & 0x3F) == 0x20) {
      uint64_t v50 = -1;
    }
    else {
      uint64_t v50 = 0;
    }
    uint64_t v48 = v34 + 32 * v50;
  }
  return *(void *)v48;
}

uint64_t sub_1CD22FFE4(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = a2[1];
  uint64_t v3 = *a2;
  if (*a2 != v2)
  {
    while (*(void *)(v3 + 8) != result)
    {
      v3 += 16;
      if (v3 == v2)
      {
        uint64_t v3 = a2[1];
        break;
      }
    }
  }
  uint64_t v4 = v3 + 16;
  if (v3 != v2 && v4 != v2)
  {
    do
    {
      if (*(void *)(v4 + 8) != result)
      {
        *(_OWORD *)uint64_t v3 = *(_OWORD *)v4;
        v3 += 16;
      }
      v4 += 16;
    }
    while (v4 != v2);
    uint64_t v2 = a2[1];
  }
  if (v3 != v2) {
    a2[1] = v3;
  }
  return result;
}

void sub_1CD2300A0(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v1 = *(unsigned __int8 *)(a1 + 16);
  if (!a1 || v1 != 31)
  {
    if (a1 && v1 == 30)
    {
      if ((*(_DWORD *)(a1 + 20) & 0x7FFFFFF) != 3) {
        goto LABEL_15;
      }
      uint64_t v4 = *(void *)(a1 - 96);
      goto LABEL_11;
    }
    if (!a1 || v1 != 32) {
LABEL_15:
    }
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  int v2 = *(_DWORD *)(a1 + 20);
  if ((v2 & 0x40000000) != 0) {
    uint64_t v3 = *(uint64_t **)(a1 - 8);
  }
  else {
    uint64_t v3 = (uint64_t *)(a1 - 32 * (v2 & 0x7FFFFFF));
  }
  uint64_t v4 = *v3;
LABEL_11:
  if (*(unsigned __int8 *)(v4 + 16) > 0x1Bu) {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  goto LABEL_15;
}

uint64_t sub_1CD23025C(void *a1, void *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a1 > *a2;
  }
}

uint64_t ***sub_1CD230274(uint64_t ***result, uint64_t **a2)
{
  uint64_t v3 = (uint64_t **)result;
  if ((*((unsigned char *)result + 23) & 0x20) == 0) {
    goto LABEL_17;
  }
  uint64_t v4 = ***result;
  uint64_t v31 = result;
  int v5 = *(_DWORD *)(v4 + 2496);
  if (v5)
  {
    uint64_t v6 = *(void *)(v4 + 2480);
    int v7 = v5 - 1;
    unsigned int v8 = v7 & ((result >> 4) ^ (result >> 9));
    result = (uint64_t ***)(v6 + 40 * v8);
    uint64_t v9 = *result;
    if (*result == v3) {
      goto LABEL_12;
    }
    unint64_t v10 = 0;
    int v11 = 1;
    while (v9 != (uint64_t **)-4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v9 == (uint64_t **)-8192;
      }
      if (v12) {
        unint64_t v10 = result;
      }
      unsigned int v13 = v8 + v11++;
      unsigned int v8 = v13 & v7;
      result = (uint64_t ***)(v6 + 40 * v8);
      uint64_t v9 = *result;
      if (*result == v3) {
        goto LABEL_12;
      }
    }
    if (v10) {
      uint64_t v29 = v10;
    }
    else {
      uint64_t v29 = result;
    }
  }
  else
  {
    uint64_t v29 = 0;
  }
  result = (uint64_t ***)sub_1CC609054(v4 + 2480, (uint64_t)&v31, (uint64_t *)&v31, v29);
  uint64_t v30 = (uint64_t)v31;
  result[3] = 0;
  result[4] = 0;
  void *result = (uint64_t **)v30;
  result[1] = (uint64_t **)(result + 3);
  result[2] = (uint64_t **)0x100000000;
LABEL_12:
  uint64_t v14 = *((unsigned int *)result + 4);
  if (!v14)
  {
LABEL_17:
    uint64_t v17 = 0;
    goto LABEL_18;
  }
  uint64_t v15 = result[1] + 1;
  uint64_t v16 = 16 * v14;
  while (*((_DWORD *)v15 - 2) != 2)
  {
    uint64_t v17 = 0;
    v15 += 2;
    v16 -= 16;
    if (!v16) {
      goto LABEL_18;
    }
  }
  uint64_t v17 = *v15;
LABEL_18:
  unsigned int v20 = *(_DWORD *)(v17 + 8);
  uint64_t v19 = (unsigned int *)(v17 + 8);
  uint64_t v18 = v20;
  if (v20 >= 2)
  {
    uint64_t v21 = v18 - 1;
    unsigned int v22 = v19;
    do
    {
      uint64_t v23 = *(void *)(*(void *)&v22[-2 * *v19] + 128);
      uint64_t v24 = (void *)(v23 + 24);
      if (*(_DWORD *)(v23 + 32) >= 0x41u) {
        uint64_t v24 = (void *)*v24;
      }
      uint64_t v25 = (void *)*v24;
      unint64_t v26 = *((unsigned int *)a2 + 2);
      if (v26 >= *((unsigned int *)a2 + 3)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      (*a2)[v26] = (uint64_t)v25;
      ++*((_DWORD *)a2 + 2);
      v22 += 2;
      --v21;
    }
    while (v21);
  }
  if (v3 && *((unsigned char *)v3 + 16) == 30 && (*((_WORD *)*(v3 - 12) + 9) & 0x3F) == 0x20)
  {
    uint64_t v27 = (uint64_t)&(*a2)[*((unsigned int *)a2 + 2)];
    uint64_t v28 = **a2;
    **a2 = *(void *)(v27 - 8);
    *(void *)(v27 - 8) = v28;
  }
  return result;
}

uint64_t *sub_1CD23048C(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v5 = (uint64_t **)(result + 1);
  uint64_t v4 = (uint64_t *)result[1];
  if (v4)
  {
    uint64_t v6 = *(unsigned int *)(a2 + 32);
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t **)v4;
        uint64_t v8 = v4[4];
        if (v6 <= 0x40) {
          break;
        }
        unint64_t v9 = *(void *)(a2 + 24);
        unint64_t v10 = *(void *)(v8 + 24);
        unint64_t v11 = ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8;
        while (v11)
        {
          unint64_t v12 = *(void *)(v9 + v11 - 8);
          unint64_t v13 = *(void *)(v10 + v11 - 8);
          v11 -= 8;
          if (v12 != v13)
          {
            if (v12 <= v13) {
              goto LABEL_5;
            }
            break;
          }
        }
LABEL_11:
        uint64_t v14 = *(unsigned int *)(v8 + 32);
        if (v14 > 0x40)
        {
          unint64_t v15 = v9 - 8;
          unint64_t v16 = ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8;
          unint64_t v17 = v10 - 8;
          while (v16)
          {
            unint64_t v18 = *(void *)(v17 + v16);
            unint64_t v19 = *(void *)(v15 + v16);
            v16 -= 8;
            if (v18 != v19)
            {
              if (v18 <= v19) {
                goto LABEL_13;
              }
              return result;
            }
          }
          return result;
        }
        if (v10 >= v9) {
          return result;
        }
LABEL_13:
        uint64_t v4 = v7[1];
        if (!v4)
        {
          int v5 = v7 + 1;
          goto LABEL_21;
        }
      }
      unint64_t v9 = *(void *)(a2 + 24);
      unint64_t v10 = *(void *)(v8 + 24);
      if (v9 >= v10) {
        goto LABEL_11;
      }
LABEL_5:
      uint64_t v4 = *v7;
      int v5 = v7;
      if (!*v7) {
        goto LABEL_21;
      }
    }
  }
  int v7 = (uint64_t **)(result + 1);
LABEL_21:
  unsigned int v20 = (uint64_t *)operator new(0x28uLL);
  v20[4] = a2;
  uint64_t *v20 = 0;
  v20[1] = 0;
  v20[2] = (uint64_t)v7;
  *int v5 = v20;
  uint64_t v21 = *(void *)*v3;
  if (v21)
  {
    uint64_t *v3 = v21;
    unsigned int v22 = *v5;
  }
  else
  {
    unsigned int v22 = v20;
  }
  result = sub_1CB8358B8((uint64_t *)v3[1], v22);
  ++v3[2];
  return result;
}

uint64_t sub_1CD2305DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v10 = *a2;
  int v11 = 0;
  unint64_t v12 = 0;
  if (sub_1CB901A88(a1, &v10, &v12))
  {
    unsigned int v8 = *((_DWORD *)v12 + 2);
  }
  else
  {
    uint64_t v4 = sub_1CCA982A8((_DWORD *)a1, (uint64_t)&v10, &v10, v12);
    *uint64_t v4 = v10;
    *((_DWORD *)v4 + 2) = v11;
    uint64_t v5 = *a2;
    unsigned int v6 = *(_DWORD *)(a1 + 144);
    if (v6 >= *(_DWORD *)(a1 + 148)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v7 = (void *)(*(void *)(a1 + 136) + 16 * v6);
    *int v7 = v5;
    v7[1] = 0;
    unsigned int v8 = *(_DWORD *)(a1 + 144);
    *(_DWORD *)(a1 + 144) = v8 + 1;
    *((_DWORD *)v4 + 2) = v8;
  }
  return *(void *)(a1 + 136) + 16 * v8 + 8;
}

uint64_t sub_1CD2306B4(uint64_t result, uint64_t a2)
{
  if (!result) {
    return result;
  }
  int v2 = (void *)result;
  uint64_t v3 = *(unsigned int *)(a2 + 32);
  result = 1;
  while (1)
  {
    uint64_t v4 = v2[4];
    if (v3 > 0x40) {
      break;
    }
    unint64_t v5 = *(void *)(a2 + 24);
    unint64_t v6 = *(void *)(v4 + 24);
    if (v5 >= v6) {
      goto LABEL_5;
    }
LABEL_8:
    int v2 = (void *)*v2;
    if (!v2) {
      return 0;
    }
  }
  unint64_t v5 = *(void *)(a2 + 24);
  unint64_t v6 = *(void *)(v4 + 24);
  unint64_t v8 = ((unint64_t)(v3 + 63) >> 3) & 0x3FFFFFF8;
  while (v8)
  {
    unint64_t v9 = *(void *)(v5 + v8 - 8);
    unint64_t v10 = *(void *)(v6 + v8 - 8);
    v8 -= 8;
    if (v9 != v10)
    {
      if (v9 <= v10) {
        goto LABEL_8;
      }
      break;
    }
  }
LABEL_5:
  uint64_t v7 = *(unsigned int *)(v4 + 32);
  if (v7 <= 0x40)
  {
    if (v6 >= v5) {
      return result;
    }
LABEL_7:
    ++v2;
    goto LABEL_8;
  }
  unint64_t v11 = v5 - 8;
  unint64_t v12 = ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8;
  unint64_t v13 = v6 - 8;
  while (v12)
  {
    unint64_t v14 = *(void *)(v13 + v12);
    unint64_t v15 = *(void *)(v11 + v12);
    v12 -= 8;
    if (v14 != v15)
    {
      if (v14 <= v15) {
        goto LABEL_7;
      }
      return result;
    }
  }
  return result;
}

uint64_t sub_1CD230780(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (*a1 == *a2) {
    return 0;
  }
  uint64_t v4 = *(unsigned int *)(v2 + 32);
  if (v4 > 0x40)
  {
    uint64_t v6 = *(void *)(v2 + 24);
    uint64_t v7 = *(void *)(v3 + 24) - 8;
    unint64_t v8 = ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8;
    uint64_t v9 = v6 - 8;
    do
    {
      if (!v8) {
        return 0xFFFFFFFFLL;
      }
      unint64_t v10 = *(void *)(v9 + v8);
      unint64_t v11 = *(void *)(v7 + v8);
      v8 -= 8;
    }
    while (v10 == v11);
    if (v10 > v11) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 1;
    }
  }
  else if (*(void *)(v2 + 24) < *(void *)(v3 + 24))
  {
    return 1;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_1CD230804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4 != a1 + 40)
  {
    if (v4) {
      uint64_t v5 = v4 - 24;
    }
    else {
      uint64_t v5 = 0;
    }
    int v6 = *(unsigned __int8 *)(v5 + 16);
    int v7 = v6 - 29;
    uint64_t result = 1;
    if (v6 != 30)
    {
      unsigned int v34 = 2;
      switch(v7)
      {
        case 0:
        case 5:
        case 6:
          return result;
        case 1:
LABEL_54:
          __break(1u);
          goto LABEL_55;
        case 2:
          unsigned int v34 = (*(_DWORD *)(v5 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_52;
        case 3:
        case 9:
          unsigned int v34 = (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_52;
        case 4:
          goto LABEL_10;
        case 7:
          unsigned int v34 = *(_WORD *)(v5 + 18) & 1;
          goto LABEL_52;
        case 8:
LABEL_55:
          unsigned int v34 = 1;
          goto LABEL_10;
        case 10:
          unsigned int v34 = *(_DWORD *)(v5 + 80) + 1;
LABEL_52:
          if (!v34) {
            return result;
          }
          goto LABEL_10;
        default:
          return 1;
      }
    }
    if ((*(_DWORD *)(v5 + 20) & 0x7FFFFFF) == 3) {
      unsigned int v34 = 2;
    }
    else {
      unsigned int v34 = 1;
    }
LABEL_10:
    uint64_t v13 = 0;
    uint64_t v14 = v5 - 32;
    uint64_t v15 = v34;
    do
    {
      int v16 = *(unsigned __int8 *)(v5 + 16);
      if (v16 == 30)
      {
        uint64_t v25 = (uint64_t *)(v14 - 32 * v13);
      }
      else
      {
        uint64_t v24 = (v16 - 31);
        uint64_t v25 = (uint64_t *)(v5 - 32);
        switch(v24)
        {
          case 1:
          case 7:
            int v29 = *(_DWORD *)(v5 + 20);
            if ((v29 & 0x40000000) != 0) {
              uint64_t v30 = *(void *)(v5 - 8);
            }
            else {
              uint64_t v30 = v5 - 32 * (v29 & 0x7FFFFFF);
            }
            uint64_t v28 = v30 + 32 * v13;
            goto LABEL_32;
          case 2:
            uint64_t v31 = -64;
            if (!v13) {
              uint64_t v31 = -96;
            }
            uint64_t v25 = (uint64_t *)(v5 + v31);
            break;
          case 3:
          case 4:
            goto LABEL_54;
          case 5:
            if ((*(_WORD *)(v5 + 18) & 1) == 0)
            {
              uint64_t v17 = 0;
              goto LABEL_15;
            }
            uint64_t v32 = *(_DWORD *)(v5 + 20) & 0x7FFFFFF;
            uint64_t v33 = v5 + 32;
            goto LABEL_47;
          case 6:
            break;
          case 8:
            if (v13)
            {
              uint64_t v25 = (uint64_t *)(v14 - 32 * *(unsigned int *)(v5 + 80) + 32 * v13 - 32);
            }
            else
            {
              uint64_t v32 = *(unsigned int *)(v5 + 80);
              uint64_t v33 = v5 - 64;
LABEL_47:
              uint64_t v25 = (uint64_t *)(v33 - 32 * v32);
            }
            break;
          default:
            int v26 = *(_DWORD *)(v5 + 20);
            if ((v26 & 0x40000000) != 0) {
              uint64_t v27 = *(void *)(v5 - 8);
            }
            else {
              uint64_t v27 = v5 - 32 * (v26 & 0x7FFFFFF);
            }
            uint64_t v28 = v27 + 32 * (2 * v13);
LABEL_32:
            uint64_t v25 = (uint64_t *)(v28 + 32);
            break;
        }
      }
      uint64_t v17 = *v25;
LABEL_15:
      if (*(void *)(v17 + 40) != v17 + 40)
      {
        for (uint64_t i = *(void *)(v17 + 48); ; uint64_t i = *(void *)(v19 + 32))
        {
          uint64_t v19 = i - 24;
          uint64_t v20 = i ? i - 24 : 0;
          if (!i || *(unsigned char *)(v20 + 16) != 83) {
            break;
          }
          uint64_t v21 = sub_1CBF73380(i - 24, a1);
          uint64_t v22 = sub_1CBF73380(v19, a2);
          if (v21 != v22)
          {
            uint64_t v23 = v22;
            uint64_t result = 0;
            if (v21 == a3 || v23 == a4) {
              return result;
            }
          }
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  return 1;
}

uint64_t sub_1CD230AE0(uint64_t a1, long long *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  long long v15 = a2[3];
  sub_1CC53A1FC((uint64_t)v16, (uint64_t)(a2 + 4));
  sub_1CD2313B8((uint64_t)&v18, &v15);
  long long v6 = *a2;
  sub_1CC53A1FC((uint64_t)v7, (uint64_t)(a2 + 1));
  sub_1CD2313B8((uint64_t)&v9, &v6);
  long long v30 = v18;
  if (v20)
  {
    if (v20 == v19)
    {
      uint64_t v32 = v31;
      (*(void (**)(void *, void *))(*v20 + 24))(v20, v31);
    }
    else
    {
      uint64_t v32 = v20;
      uint64_t v20 = 0;
    }
  }
  else
  {
    uint64_t v32 = 0;
  }
  long long v33 = v21;
  if (v23)
  {
    if (v23 == v22)
    {
      uint64_t v35 = v34;
      (*(void (**)(void *, void *))(*v23 + 24))(v23, v34);
    }
    else
    {
      uint64_t v35 = v23;
      uint64_t v23 = 0;
    }
  }
  else
  {
    uint64_t v35 = 0;
  }
  long long v24 = v9;
  if (v11)
  {
    if (v11 == v10)
    {
      int v26 = v25;
      (*(void (**)(void *, void *))(*v11 + 24))(v11, v25);
    }
    else
    {
      int v26 = v11;
      unint64_t v11 = 0;
    }
  }
  else
  {
    int v26 = 0;
  }
  long long v27 = v12;
  if (v14)
  {
    if (v14 == v13)
    {
      int v29 = v28;
      (*(void (**)(void *, void *))(*v14 + 24))(v14, v28);
    }
    else
    {
      int v29 = v14;
      uint64_t v14 = 0;
    }
  }
  else
  {
    int v29 = 0;
  }
  *(_OWORD *)a1 = v30;
  uint64_t v4 = a1 + 16;
  if (v32)
  {
    if (v32 == v31)
    {
      *(void *)(a1 + 40) = v4;
      (*(void (**)(void *))(v31[0] + 24))(v31);
    }
    else
    {
      *(void *)(a1 + 40) = v32;
      uint64_t v32 = 0;
    }
  }
  else
  {
    *(void *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 48) = v33;
  if (v35)
  {
    if (v35 == v34)
    {
      *(void *)(a1 + 88) = a1 + 64;
      (*(void (**)(void *))(v34[0] + 24))(v34);
    }
    else
    {
      *(void *)(a1 + 88) = v35;
      uint64_t v35 = 0;
    }
  }
  else
  {
    *(void *)(a1 + 88) = 0;
  }
  *(_OWORD *)(a1 + 96) = v24;
  if (v26)
  {
    if (v26 == v25)
    {
      *(void *)(a1 + 136) = a1 + 112;
      (*(void (**)(void *))(v25[0] + 24))(v25);
    }
    else
    {
      *(void *)(a1 + 136) = v26;
      int v26 = 0;
    }
  }
  else
  {
    *(void *)(a1 + 136) = 0;
  }
  *(_OWORD *)(a1 + 144) = v27;
  if (v29)
  {
    if (v29 == v28)
    {
      *(void *)(a1 + 184) = a1 + 160;
      (*(void (**)(void *))(v28[0] + 24))(v28);
      if (v29 == v28)
      {
        (*(void (**)(void *))(v28[0] + 32))(v28);
      }
      else if (v29)
      {
        (*(void (**)(void *, uint64_t))(*v29 + 40))(v29, v4);
      }
    }
    else
    {
      *(void *)(a1 + 184) = v29;
      int v29 = 0;
    }
  }
  else
  {
    *(void *)(a1 + 184) = 0;
  }
  if (v26 == v25)
  {
    (*(void (**)(void *))(v25[0] + 32))(v25);
  }
  else if (v26)
  {
    (*(void (**)(void *, uint64_t))(*v26 + 40))(v26, v4);
  }
  if (v35 == v34)
  {
    (*(void (**)(void *))(v34[0] + 32))(v34);
  }
  else if (v35)
  {
    (*(void (**)(void *))(*v35 + 40))(v35);
  }
  if (v32 == v31)
  {
    (*(void (**)(void *))(v31[0] + 32))(v31);
  }
  else if (v32)
  {
    (*(void (**)(void *))(*v32 + 40))(v32);
  }
  if (v14 == v13)
  {
    (*(void (**)(void *))(v13[0] + 32))(v13);
  }
  else if (v14)
  {
    (*(void (**)(void *, uint64_t))(*v14 + 40))(v14, v4);
  }
  if (v11 == v10)
  {
    (*(void (**)(void *))(v10[0] + 32))(v10);
  }
  else if (v11)
  {
    (*(void (**)(void *, uint64_t))(*v11 + 40))(v11, v4);
  }
  if (v8 == v7)
  {
    (*(void (**)(void *))(v7[0] + 32))(v7);
  }
  else if (v8)
  {
    (*(void (**)(void *, uint64_t))(*v8 + 40))(v8, v4);
  }
  if (v23 == v22)
  {
    (*(void (**)(void *))(v22[0] + 32))(v22);
  }
  else if (v23)
  {
    (*(void (**)(void *, uint64_t))(*v23 + 40))(v23, v4);
  }
  if (v20 == v19)
  {
    (*(void (**)(void *))(v19[0] + 32))(v19);
  }
  else if (v20)
  {
    (*(void (**)(void *, uint64_t))(*v20 + 40))(v20, v4);
  }
  uint64_t result = (uint64_t)v17;
  if (v17 == v16) {
    return (*(uint64_t (**)(void *))(v16[0] + 32))(v16);
  }
  if (v17) {
    return (*(uint64_t (**)(void *, uint64_t))(*v17 + 40))(v17, v4);
  }
  return result;
}

uint64_t sub_1CD231290(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  long long v2 = *(_OWORD *)(a1 + 48);
  sub_1CC53A1FC((uint64_t)v3, a1 + 64);
  do
  {
    *(void *)&long long v2 = *(void *)v2;
    if (!v4) {
      sub_1CB920400();
    }
  }
  while (!(*(unsigned int (**)(void))(*v4 + 48))());
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  if ((void)v2) {
    return v2 - 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_1CD2313B8(uint64_t a1, long long *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  long long v4 = *a2;
  sub_1CC53A1FC((uint64_t)v5, (uint64_t)(a2 + 1));
  *(_OWORD *)a1 = v4;
  if (v6)
  {
    if (v6 == v5)
    {
      *(void *)(a1 + 40) = a1 + 16;
      (*(void (**)(void *))(v5[0] + 24))(v5);
    }
    else
    {
      *(void *)(a1 + 40) = (*(uint64_t (**)(void))(*v6 + 16))();
    }
  }
  else
  {
    *(void *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 48) = v4;
  uint64_t result = (uint64_t)v6;
  if (v6)
  {
    if (v6 == v5)
    {
      *(void *)(a1 + 88) = a1 + 64;
      (*(void (**)(void *))(v5[0] + 24))(v5);
    }
    else
    {
      *(void *)(a1 + 88) = (*(uint64_t (**)(void))(*v6 + 16))();
    }
    uint64_t result = (uint64_t)v6;
    if (v6 == v5)
    {
      return (*(uint64_t (**)(void *))(v5[0] + 32))(v5);
    }
    else if (v6)
    {
      return (*(uint64_t (**)(void))(*v6 + 40))();
    }
  }
  else
  {
    *(void *)(a1 + 88) = 0;
  }
  return result;
}

uint64_t sub_1CD23157C(_DWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v10 = *a2;
  int v11 = 0;
  long long v12 = 0;
  uint64_t result = sub_1CB901A88((uint64_t)a1, &v10, &v12);
  if ((result & 1) == 0)
  {
    uint64_t v7 = sub_1CCA982A8(a1, (uint64_t)&v10, &v10, v12);
    *uint64_t v7 = v10;
    *((_DWORD *)v7 + 2) = v11;
    uint64_t result = (uint64_t)(a1 + 34);
    uint64_t v8 = a1[36];
    *((_DWORD *)v7 + 2) = v8;
    if (v8 >= a1[37]) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    long long v9 = (uint64_t *)(*(void *)result + 16 * v8);
    *long long v9 = *a2;
    v9[1] = *a3;
    a1[36] = v8 + 1;
  }
  return result;
}

uint64_t sub_1CD231664(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  char v3 = 0;
  uint64_t v4 = 0;
  v11[2] = *MEMORY[0x1E4F143B8];
  v11[0] = a1;
  v11[1] = a2;
  do
  {
    char v5 = v3;
    uint64_t v6 = v11[v4];
    if (v6)
    {
      uint64_t v7 = v6 + 40;
      uint64_t v8 = *(void *)(v6 + 48);
      if (v8 != v7)
      {
        while (1)
        {
          uint64_t result = v8 - 24;
          if (v8) {
            uint64_t v10 = v8 - 24;
          }
          else {
            uint64_t v10 = 0;
          }
          if (v8 && *(unsigned char *)(v10 + 16) == 61)
          {
            if (v2) {
              return 0;
            }
          }
          else
          {
            uint64_t result = v2;
          }
          uint64_t v8 = *(void *)(v8 + 8);
          uint64_t v2 = result;
          if (v8 == v7) {
            goto LABEL_15;
          }
        }
      }
    }
    uint64_t result = v2;
LABEL_15:
    char v3 = 1;
    uint64_t v2 = result;
    uint64_t v4 = 1;
  }
  while ((v5 & 1) == 0);
  return result;
}

uint64_t sub_1CD231734(void **a1, llvm::BasicBlock *this, uint64_t a3)
{
  v42[4] = *MEMORY[0x1E4F143B8];
  if (!this) {
    return 1;
  }
  int64_t v5 = dword_1EBCFDD48;
  llvm::BasicBlock::instructionsWithoutDebug(this, 0, (uint64_t)&v34);
  long long v31 = v34;
  if (v36)
  {
    if (v36 == v35)
    {
      long long v33 = v32;
      (*(void (**)(void))(*v36 + 24))();
    }
    else
    {
      long long v33 = (void *)(*(uint64_t (**)(void))(*v36 + 16))();
    }
  }
  else
  {
    long long v33 = 0;
  }
  uint64_t v28 = v37;
  if (v39)
  {
    if (v39 == v38)
    {
      long long v30 = v29;
      (*(void (**)(void))(*v39 + 24))();
    }
    else
    {
      long long v30 = (void *)(*(uint64_t (**)(void))(*v39 + 16))();
    }
  }
  else
  {
    long long v30 = 0;
  }
  uint64_t v6 = v31;
  if ((void)v31 == v28)
  {
LABEL_54:
    if (v30 == v29)
    {
      (*(void (**)(void *))(v29[0] + 32))(v29);
    }
    else if (v30)
    {
      (*(void (**)(void))(*v30 + 40))();
    }
    if (v33 == v32)
    {
      (*(void (**)(void *))(v32[0] + 32))(v32);
    }
    else if (v33)
    {
      (*(void (**)(void))(*v33 + 40))();
    }
    int v26 = v39;
    if (v39 == v38)
    {
      (*(void (**)(void *))(v38[0] + 32))(v38);
    }
    else
    {
LABEL_81:
      if (v26) {
        (*(void (**)(void *))(*v26 + 40))(v26);
      }
    }
    if (v36 == v35)
    {
      (*(void (**)(void *))(v35[0] + 32))(v35);
    }
    else if (v36)
    {
      (*(void (**)(void))(*v36 + 40))();
    }
    return 1;
  }
  int v7 = 0;
  int64_t v8 = 0;
  while (2)
  {
    if (v6) {
      uint64_t v9 = v6 - 24;
    }
    else {
      uint64_t v9 = 0;
    }
    int v10 = *(unsigned __int8 *)(v9 + 16);
    if ((v10 - 29) < 0xB || v6 && (v10 == 61 ? (BOOL v11 = a3 == 0) : (BOOL v11 = 1), !v11))
    {
      do
      {
LABEL_47:
        uint64_t v6 = *(void *)(v6 + 8);
        *(void *)&long long v31 = v6;
        if (v6 == *((void *)&v31 + 1)) {
          break;
        }
        if (!v33)
        {
          sub_1CB920400();
          goto LABEL_81;
        }
        char v25 = (*(uint64_t (**)(void))(*v33 + 48))();
        uint64_t v6 = v31;
      }
      while ((v25 & 1) == 0);
      if (v6 != v28) {
        continue;
      }
      goto LABEL_54;
    }
    break;
  }
  if (v10 == 62 || (v10 - 41) <= 0x11)
  {
    int v13 = *(_DWORD *)(v9 + 20);
    if ((v13 & 0x40000000) != 0)
    {
      long long v15 = *(uint64_t **)(v9 - 8);
      unint64_t v14 = v13 & 0x7FFFFFF;
    }
    else
    {
      unint64_t v14 = v13 & 0x7FFFFFF;
      long long v15 = (uint64_t *)(v9 - 32 * v14);
    }
    int v16 = *a1;
    char v40 = v42;
    uint64_t v41 = 0x400000000;
    if (v14 >= 5) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v14)
    {
      uint64_t v17 = 32 * v14;
      long long v18 = v42;
      do
      {
        uint64_t v19 = *v15;
        v15 += 4;
        *v18++ = v19;
        v17 -= 32;
      }
      while (v17);
      uint64_t v20 = v40;
    }
    else
    {
      uint64_t v20 = v42;
    }
    LODWORD(v41) = v14;
    uint64_t v21 = (*(uint64_t (**)(void, uint64_t, void *))(*(void *)*v16 + 72))(*v16, v9, v20);
    int v23 = v22;
    if (v40 != v42) {
      free(v40);
    }
    if (v23 == 1) {
      int v7 = 1;
    }
    if (__OFADD__(v8, v21)) {
      int64_t v8 = ((v8 + v21) >> 63) ^ 0x8000000000000000;
    }
    else {
      v8 += v21;
    }
    BOOL v24 = v7 < 1;
    if (!v7) {
      BOOL v24 = v8 <= v5;
    }
    if (v24)
    {
      uint64_t v6 = v31;
      goto LABEL_47;
    }
  }
  if (v30 == v29)
  {
    (*(void (**)(void *))(v29[0] + 32))(v29);
  }
  else if (v30)
  {
    (*(void (**)(void))(*v30 + 40))();
  }
  if (v33 == v32)
  {
    (*(void (**)(void *))(v32[0] + 32))(v32);
  }
  else if (v33)
  {
    (*(void (**)(void))(*v33 + 40))();
  }
  if (v39 == v38)
  {
    (*(void (**)(void *))(v38[0] + 32))(v38);
  }
  else if (v39)
  {
    (*(void (**)(void))(*v39 + 40))();
  }
  if (v36 == v35)
  {
    (*(void (**)(void *))(v35[0] + 32))(v35);
  }
  else if (v36)
  {
    (*(void (**)(void))(*v36 + 40))();
  }
  return 0;
}

llvm::Value *sub_1CD231E08(uint64_t a1, llvm::BasicBlock *this, llvm::UndefValue *a3)
{
  uint64_t SingleSuccessor = llvm::BasicBlock::getSingleSuccessor(this);
  uint64_t v7 = *(void *)(SingleSuccessor + 48);
  int64_t v8 = (llvm::Value *)(v7 - 24);
  BOOL v9 = v7 == 0;
  if (v7) {
    uint64_t v10 = v7 - 24;
  }
  else {
    uint64_t v10 = 0;
  }
  if (*(unsigned char *)(v10 + 16) != 83)
  {
LABEL_34:
    if (a3)
    {
      int v22 = 0;
    }
    else
    {
LABEL_106:
      if (*(unsigned __int8 *)(a1 + 16) < 0x1Cu || *(llvm::BasicBlock **)(a1 + 40) != this) {
        return (llvm::Value *)a1;
      }
      int v22 = 1;
    }
    int v23 = *(llvm::UndefValue **)a1;
    v113[0] = "simplifycfg.merge";
    __int16 v114 = 259;
    BOOL v24 = *(uint64_t **)(SingleSuccessor + 48);
    char v25 = operator new(0x48uLL);
    int v26 = v25;
    v25[1] = v23;
    int64_t v8 = (llvm::Value *)(v25 + 1);
    void *v25 = 0;
    v25[2] = 0;
    void v25[3] = 0x4000000000000053;
    *((_OWORD *)v25 + 2) = 0u;
    long long v27 = (char *)(v25 + 4);
    *((_OWORD *)v25 + 3) = 0u;
    *((_DWORD *)v25 + 16) = 0;
    if (v24)
    {
      uint64_t v90 = v24[2];
      v25[6] = v90;
      *(_WORD *)(v90 + 18) &= ~0x8000u;
      if ((*((unsigned char *)v25 + 31) & 0x10) != 0)
      {
        uint64_t v100 = *(void *)(v90 + 56);
        if (v100)
        {
          char v101 = *(llvm::ValueSymbolTable **)(v100 + 104);
          if (v101) {
            llvm::ValueSymbolTable::reinsertValue(v101, v8);
          }
        }
      }
      uint64_t v91 = *v24;
      v26[4] = *v24;
      v26[5] = v24;
      *(void *)(v91 + 8) = v27;
      *BOOL v24 = (uint64_t)v27;
    }
    *((_DWORD *)v26 + 17) = 2;
    llvm::Value::setNameImpl(v8, v113);
    if (*((unsigned char *)v26 + 24)) {
      goto LABEL_38;
    }
    if ((*((unsigned char *)v26 + 31) & 0x10) == 0) {
      goto LABEL_150;
    }
    uint64_t v92 = ***(void ***)v8;
    uint64_t v93 = *(void *)(v92 + 152);
    uint64_t v94 = *(unsigned int *)(v92 + 168);
    if (v94)
    {
      LODWORD(v95) = (v94 - 1) & ((v8 >> 4) ^ (v8 >> 9));
      int v96 = (llvm::Value **)(v93 + 16 * v95);
      uint64_t v97 = *v96;
      if (*v96 == v8)
      {
LABEL_143:
        int v102 = v96[1];
        unint64_t v105 = *(void *)v102;
        BOOL v103 = (char *)v102 + 16;
        unint64_t v104 = v105;
        if (v105 >= 5 && *(_DWORD *)v103 == *(_DWORD *)"llvm." && v103[4] == aLlvm_1[4])
        {
          *((_DWORD *)v26 + 10) |= 0x2000u;
          int v107 = llvm::Function::lookupIntrinsicID(v103, v104);
LABEL_151:
          *((_DWORD *)v26 + 11) = v107;
LABEL_38:
          uint64_t v28 = *((unsigned int *)v26 + 17);
          int v29 = operator new(40 * v28);
          void *v26 = v29;
          if (v28)
          {
            long long v31 = v29;
            do
            {
              void *v31 = 0;
              v31[1] = 0;
              v31[2] = 0;
              void v31[3] = v8;
              v31 += 4;
            }
            while (v31 != &v29[4 * v28]);
          }
          int v32 = *((_DWORD *)v26 + 7);
          uint64_t v33 = v32 & 0x7FFFFFF;
          if ((v32 & 0x7FFFFFF) == *((_DWORD *)v26 + 17))
          {
            unsigned int v80 = v33 + (v33 >> 1);
            if (v80 <= 2) {
              uint64_t v81 = 2;
            }
            else {
              uint64_t v81 = v80;
            }
            *((_DWORD *)v26 + 17) = v81;
            unsigned int v82 = (uint64_t *)((char *)v8 - 32 * v33);
            if ((v32 & 0x40000000) != 0) {
              unsigned int v82 = v29;
            }
            __pa = v82;
            uint64_t v83 = operator new(40 * v81);
            void *v26 = v83;
            v84 = v83;
            do
            {
              void *v84 = 0;
              v84[1] = 0;
              v84[2] = 0;
              v84[3] = v8;
              v84 += 4;
            }
            while (v84 != &v83[4 * v81]);
            int v85 = *((_DWORD *)v26 + 7);
            if ((v85 & 0x40000000) != 0) {
              uint64_t v86 = (uint64_t)v83;
            }
            else {
              uint64_t v86 = (uint64_t)v8 - 32 * (v85 & 0x7FFFFFF);
            }
            uint64_t v110 = v86;
            sub_1CC5E4108((uint64_t)v113, __pa, &__pa[4 * v33], v86);
            if (v33)
            {
              memmove((void *)(v110 + 32 * v81), &__pa[4 * v33], 8 * v33);
              uint64_t v87 = 4 * v33;
              do
              {
                int v88 = &__pa[v87];
                if (__pa[v87 - 4])
                {
                  *(void *)*(v88 - 2) = *(v88 - 3);
                  uint64_t v89 = *(v88 - 3);
                  if (v89) {
                    *(void *)(v89 + 16) = *(v88 - 2);
                  }
                }
                v87 -= 4;
              }
              while (v87 * 8);
            }
            operator delete(__pa);
            int v32 = *((_DWORD *)v26 + 7);
          }
          uint64_t v34 = (v32 + 1) & 0x7FFFFFF;
          *((_DWORD *)v26 + 7) = v32 & 0xF8000000 | (v32 + 1) & 0x7FFFFFF;
          uint64_t v35 = (v34 - 1);
          if ((v32 & 0x40000000) != 0) {
            uint64_t v36 = (char *)*v26;
          }
          else {
            uint64_t v36 = (char *)v8 - 32 * v34;
          }
          long long v37 = &v36[32 * v35];
          unsigned int v38 = v37;
          if (*(void *)v37)
          {
            **((void **)v37 + 2) = *((void *)v37 + 1);
            uint64_t v79 = *((void *)v37 + 1);
            if (v79) {
              *(void *)(v79 + 16) = *((void *)v37 + 2);
            }
          }
          *(void *)long long v37 = a1;
          unint64_t v39 = (char **)(a1 + 8);
          uint64_t v40 = *(void *)(a1 + 8);
          *((void *)v37 + 1) = v40;
          uint64_t v41 = v37 + 8;
          if (v40) {
            *(void *)(v40 + 16) = v41;
          }
          *(void *)&v36[32 * v35 + 16] = v39;
          *unint64_t v39 = v38;
          int v42 = *((_DWORD *)v26 + 7);
          uint64_t v43 = v42 & 0x7FFFFFF;
          if ((v42 & 0x40000000) != 0) {
            unint64_t v44 = (char *)*v26;
          }
          else {
            unint64_t v44 = (char *)v8 - 32 * v43;
          }
          uint64_t v45 = *((unsigned int *)v26 + 17);
          *(void *)&v44[32 * v45 + 8 * (v43 - 1)] = this;
          uint64_t v46 = *(void *)(SingleSuccessor + 8);
          if (v46)
          {
            while (1)
            {
              uint64_t v47 = *(void *)(v46 + 24);
              unsigned int v48 = *(unsigned __int8 *)(v47 + 16);
              BOOL v49 = v47 && v48 >= 0x1C;
              if (v49 && v48 - 29 <= 0xA) {
                break;
              }
              uint64_t v46 = *(void *)(v46 + 8);
              if (!v46) {
                return v8;
              }
            }
LABEL_60:
            uint64_t v51 = *(llvm::BasicBlock **)(v47 + 40);
            if (v51 != this)
            {
              uint64_t v52 = a3;
              if (v22)
              {
                uint64_t v52 = llvm::UndefValue::get(*(llvm::UndefValue **)a1, v30);
                LODWORD(v45) = *((_DWORD *)v26 + 17);
              }
              int v53 = *((_DWORD *)v26 + 7);
              if ((v53 & 0x7FFFFFF) == v45)
              {
                LODWORD(v69) = v45 + (v45 >> 1);
                if (v69 <= 2) {
                  uint64_t v69 = 2;
                }
                else {
                  uint64_t v69 = v69;
                }
                uint64_t v109 = v69;
                *((_DWORD *)v26 + 17) = v69;
                if ((v53 & 0x40000000) != 0) {
                  unsigned int v70 = (uint64_t *)*v26;
                }
                else {
                  unsigned int v70 = (uint64_t *)((char *)v8 - 32 * v45);
                }
                __p = v70;
                unsigned int v71 = operator new(40 * v69);
                void *v26 = v71;
                BOOL v72 = v71;
                do
                {
                  *BOOL v72 = 0;
                  v72[1] = 0;
                  v72[2] = 0;
                  v72[3] = v8;
                  v72 += 4;
                }
                while (v72 != &v71[4 * v109]);
                int v73 = *((_DWORD *)v26 + 7);
                if ((v73 & 0x40000000) != 0) {
                  uint64_t v74 = (uint64_t)v71;
                }
                else {
                  uint64_t v74 = (uint64_t)v8 - 32 * (v73 & 0x7FFFFFF);
                }
                uint64_t v108 = v74;
                sub_1CC5E4108((uint64_t)v113, __p, &__p[4 * v45], v74);
                if (v45)
                {
                  memmove((void *)(v108 + 32 * v109), &__p[4 * v45], 8 * v45);
                  uint64_t v75 = 4 * v45;
                  do
                  {
                    BOOL v76 = &__p[v75];
                    if (__p[v75 - 4])
                    {
                      *(void *)*(v76 - 2) = *(v76 - 3);
                      uint64_t v77 = *(v76 - 3);
                      if (v77) {
                        *(void *)(v77 + 16) = *(v76 - 2);
                      }
                    }
                    v75 -= 4;
                  }
                  while (v75 * 8);
                }
                operator delete(__p);
                int v53 = *((_DWORD *)v26 + 7);
              }
              uint64_t v54 = (v53 + 1) & 0x7FFFFFF;
              *((_DWORD *)v26 + 7) = v53 & 0xF8000000 | (v53 + 1) & 0x7FFFFFF;
              if ((v53 & 0x40000000) != 0) {
                unsigned int v55 = (char *)*v26;
              }
              else {
                unsigned int v55 = (char *)v8 - 32 * v54;
              }
              uint64_t v56 = (v54 - 1);
              char v57 = &v55[32 * v56];
              if (*(void *)v57)
              {
                **((void **)v57 + 2) = *((void *)v57 + 1);
                uint64_t v68 = *((void *)v57 + 1);
                if (v68) {
                  *(void *)(v68 + 16) = *((void *)v57 + 2);
                }
              }
              *(void *)char v57 = v52;
              if (v52)
              {
                uint64_t v60 = *((void *)v52 + 1);
                char v59 = (char **)((char *)v52 + 8);
                uint64_t v58 = v60;
                uint64_t v61 = &v55[32 * v56];
                *((void *)v61 + 1) = v60;
                if (v60) {
                  *(void *)(v58 + 16) = v61 + 8;
                }
                *((void *)v61 + 2) = v59;
                char *v59 = v57;
              }
              int v62 = *((_DWORD *)v26 + 7);
              uint64_t v63 = v62 & 0x7FFFFFF;
              if ((v62 & 0x40000000) != 0) {
                int v64 = (char *)*v26;
              }
              else {
                int v64 = (char *)v8 - 32 * v63;
              }
              uint64_t v45 = *((unsigned int *)v26 + 17);
              *(void *)&v64[32 * v45 + 8 * (v63 - 1)] = v51;
            }
            while (1)
            {
              uint64_t v46 = *(void *)(v46 + 8);
              if (!v46) {
                break;
              }
              uint64_t v47 = *(void *)(v46 + 24);
              unsigned int v65 = *(unsigned __int8 *)(v47 + 16);
              if (v47) {
                BOOL v66 = v65 >= 0x1C;
              }
              else {
                BOOL v66 = 0;
              }
              if (v66 && v65 - 29 < 0xB) {
                goto LABEL_60;
              }
            }
          }
          return v8;
        }
LABEL_150:
        int v107 = 0;
        *((_DWORD *)v26 + 10) &= ~0x2000u;
        goto LABEL_151;
      }
      int v98 = 1;
      while (v97 != (llvm::Value *)-4096)
      {
        int v99 = v95 + v98++;
        uint64_t v95 = v99 & (v94 - 1);
        uint64_t v97 = *(llvm::Value **)(v93 + 16 * v95);
        if (v97 == v8)
        {
          int v96 = (llvm::Value **)(v93 + 16 * v95);
          goto LABEL_143;
        }
      }
    }
    int v96 = (llvm::Value **)(v93 + 16 * v94);
    goto LABEL_143;
  }
  while (1)
  {
    if (sub_1CBF73380((uint64_t)v8, (uint64_t)this) != a1) {
      goto LABEL_30;
    }
    if (!a3) {
      break;
    }
    for (uint64_t i = *(void *)(SingleSuccessor + 8); i; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v12 = *(void *)(i + 24);
      unsigned int v13 = *(unsigned __int8 *)(v12 + 16);
      if (v12) {
        BOOL v14 = v13 >= 0x1C;
      }
      else {
        BOOL v14 = 0;
      }
      if (v14 && v13 - 29 < 0xB) {
        break;
      }
    }
    int v16 = *(llvm::BasicBlock **)(*(void *)(i + 24) + 40);
    if (v16 == this)
    {
      while (1)
      {
        uint64_t i = *(void *)(i + 8);
        if (!i) {
          break;
        }
        uint64_t v17 = *(void *)(i + 24);
        unsigned int v18 = *(unsigned __int8 *)(v17 + 16);
        if (v17) {
          BOOL v19 = v18 >= 0x1C;
        }
        else {
          BOOL v19 = 0;
        }
        if (v19 && v18 - 29 <= 0xA) {
          goto LABEL_28;
        }
      }
      uint64_t v17 = MEMORY[0x18];
LABEL_28:
      int v16 = *(llvm::BasicBlock **)(v17 + 40);
    }
    if ((llvm::UndefValue *)sub_1CBF73380((uint64_t)v8, (uint64_t)v16) == a3) {
      return v8;
    }
LABEL_30:
    uint64_t v7 = *(void *)(v7 + 8);
    int64_t v8 = (llvm::Value *)(v7 - 24);
    BOOL v9 = v7 == 0;
    if (v7) {
      uint64_t v21 = v7 - 24;
    }
    else {
      uint64_t v21 = 0;
    }
    if (*(unsigned char *)(v21 + 16) != 83) {
      goto LABEL_34;
    }
  }
  if (v9) {
    goto LABEL_106;
  }
  return v8;
}

uint64_t sub_1CD232508(uint64_t a1, uint64_t a2)
{
  while (a1 != a2)
  {
    uint64_t v2 = a1 - 24;
    if (!a1) {
      uint64_t v2 = 0;
    }
    if (*(unsigned char *)(v2 + 16) != 84) {
      return 0;
    }
    uint64_t v3 = *(void *)(v2 - 32);
    if (!v3) {
      return 0;
    }
    if (*(unsigned char *)(v3 + 16)) {
      return 0;
    }
    if (*(void *)(v3 + 24) != *(void *)(v2 + 72)) {
      return 0;
    }
    if ((*(unsigned char *)(v3 + 33) & 0x20) == 0) {
      return 0;
    }
    int v4 = *(_DWORD *)(*(void *)(a1 - 56) + 36);
    if ((v4 - 56) >= 3 && v4 != 167) {
      return 0;
    }
    a1 = *(void *)(a1 + 8);
  }
  return 1;
}

void sub_1CD232584(void **a1, uint64_t a2, llvm::Value *a3, void *a4, void *a5, int a6, int a7)
{
  uint64_t v7 = a5;
  int64_t v8 = a4;
  uint64_t v9 = a2;
  v121[2] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v117 = 1;
  int64x2_t v118 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  if (a4 == a5) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = (unint64_t)a5;
  }
  int v119 = (void **)v121;
  uint64_t v120 = 0x200000000;
  if (!a2)
  {
LABEL_105:
    uint64_t v68 = v10;
    unint64_t v16 = (unint64_t)a4;
LABEL_106:
    uint64_t v70 = 0;
    uint64_t v71 = **(void **)v9;
    v108[0] = v109;
    v108[1] = (void *)0x200000000;
    v109[6] = v71;
    v109[7] = &v115;
    v109[8] = &v116;
    v109[9] = 0;
    int v110 = 0;
    __int16 v111 = 512;
    char v112 = 7;
    uint64_t v113 = 0;
    uint64_t v114 = 0;
    unsigned int v115 = &unk_1F2616E88;
    uint64_t v116 = &unk_1F2617008;
    v109[4] = v68;
    v109[5] = v9 + 24;
    BOOL v72 = *(unsigned __int8 **)(v9 + 48);
    unint64_t v105 = v72;
    if (v72)
    {
      llvm::MetadataTracking::track((uint64_t)&v105, v72, 2);
      uint64_t v70 = (uint64_t)v105;
    }
    sub_1CB8461A4((uint64_t)v108, 0, v70);
    if (!v105)
    {
LABEL_109:
      int v73 = *(unsigned __int8 **)(v9 + 48);
      unint64_t v104 = v73;
      if (v73)
      {
        llvm::MetadataTracking::track((uint64_t)&v104, v73, 2);
        uint64_t v74 = (uint64_t)v104;
      }
      else
      {
        uint64_t v74 = 0;
      }
      sub_1CB8461A4((uint64_t)v108, 0, v74);
      if (v104)
      {
        int v75 = *v104;
        if ((v75 - 4) > 0x1E)
        {
          if ((v75 - 3) >= 0xFFFFFFFE) {
            uint64_t v87 = v104;
          }
          else {
            uint64_t v87 = 0;
          }
          if ((v75 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v88 = (unint64_t)(v87 + 8);
LABEL_135:
            int v106 = &v104;
            sub_1CC5FA668(v88 + 16, &v106);
            goto LABEL_116;
          }
          if (v75 == 3) {
            *((void *)v104 + 1) = 0;
          }
        }
        else if ((v104[1] & 0x7F) == 2 || *((_DWORD *)v104 + 3))
        {
          uint64_t v94 = *((void *)v104 + 2);
          if ((v94 & 4) != 0)
          {
            unint64_t v88 = v94 & 0xFFFFFFFFFFFFFFF8;
            if (v88) {
              goto LABEL_135;
            }
          }
        }
      }
LABEL_116:
      if (v16 | v11)
      {
        if (v16)
        {
          if (v8 == v7 || v11)
          {
            uint64_t v89 = (llvm::UnreachableInst *)operator new(0x40uLL);
            *((_DWORD *)v89 + 5) &= 0x38000000u;
            llvm::UnreachableInst::UnreachableInst(v89, **(llvm::LLVMContext ***)v9, (llvm::Instruction *)v9);
            goto LABEL_137;
          }
          BOOL v76 = (char *)operator new(0x60uLL);
          *((_DWORD *)v76 + 13) = *((_DWORD *)v76 + 13) & 0x38000000 | 1;
          *(void *)BOOL v76 = 0;
          *((void *)v76 + 2) = 0;
          *((void *)v76 + 1) = 0;
          uint64_t v77 = v76 + 8;
          *((void *)v76 + 4) = **(void **)*v7 + 1576;
          int v78 = (llvm::Instruction *)(v76 + 32);
          *((void *)v76 + 3) = v76 + 32;
          *((void *)v76 + 5) = 0;
          v76[48] = 30;
          v76[49] = 0;
          *((_WORD *)v76 + 25) = 0;
          *((_DWORD *)v76 + 13) = 1;
          *((_DWORD *)v76 + 22) = 0;
          *(_OWORD *)(v76 + 72) = 0u;
          *(_OWORD *)(v76 + 56) = 0u;
          uint64_t v79 = v7 + 1;
          uint64_t v80 = v7[1];
          *(void *)BOOL v76 = v7;
          goto LABEL_127;
        }
      }
      else if (v8 != v7)
      {
        uint64_t v81 = (llvm::BasicBlock *)v7;
        unsigned int v82 = operator new(0xA0uLL);
        uint64_t v83 = 0;
        v84 = (llvm::Instruction *)(v82 + 24);
        v82[29] = v82[29] & 0x38000000 | 3;
        do
        {
          int v85 = &v82[v83];
          void *v85 = 0;
          v85[1] = 0;
          v85[2] = 0;
          v85[3] = v84;
          v83 += 8;
        }
        while (v83 != 24);
        llvm::BranchInst::BranchInst((llvm::BranchInst *)(v82 + 24), (llvm::BasicBlock *)v8, v81, a3, 0);
        __int16 v107 = 257;
        uint64_t v86 = sub_1CB844E0C((uint64_t *)v108, v84, (uint64_t)&v106);
        if (a6 != a7) {
          sub_1CD219628(v86, a6, a7);
        }
LABEL_137:
        sub_1CD2300A0(v9);
      }
      BOOL v76 = (char *)operator new(0x60uLL);
      *((_DWORD *)v76 + 13) = *((_DWORD *)v76 + 13) & 0x38000000 | 1;
      *(void *)BOOL v76 = 0;
      *((void *)v76 + 2) = 0;
      *((void *)v76 + 1) = 0;
      uint64_t v77 = v76 + 8;
      *((void *)v76 + 4) = **(void **)*v8 + 1576;
      int v78 = (llvm::Instruction *)(v76 + 32);
      *((void *)v76 + 3) = v76 + 32;
      *((void *)v76 + 5) = 0;
      v76[48] = 30;
      v76[49] = 0;
      *((_WORD *)v76 + 25) = 0;
      *((_DWORD *)v76 + 13) = 1;
      *((_DWORD *)v76 + 22) = 0;
      *(_OWORD *)(v76 + 72) = 0u;
      *(_OWORD *)(v76 + 56) = 0u;
      uint64_t v79 = v8 + 1;
      uint64_t v80 = v8[1];
      *(void *)BOOL v76 = v8;
LABEL_127:
      void *v77 = v80;
      if (v80) {
        *(void *)(v80 + 16) = v77;
      }
      *((void *)v76 + 2) = v79;
      *uint64_t v79 = v76;
      __int16 v107 = 257;
      sub_1CB844E0C((uint64_t *)v108, v78, (uint64_t)&v106);
      goto LABEL_137;
    }
    int v90 = *v105;
    if ((v90 - 4) > 0x1E)
    {
      if ((v90 - 3) >= 0xFFFFFFFE) {
        uint64_t v93 = v105;
      }
      else {
        uint64_t v93 = 0;
      }
      if ((v90 - 3) < 0xFFFFFFFE)
      {
        if (v90 == 3) {
          *((void *)v105 + 1) = 0;
        }
        goto LABEL_109;
      }
      unint64_t v92 = (unint64_t)(v93 + 8);
    }
    else
    {
      if ((v105[1] & 0x7F) != 2 && !*((_DWORD *)v105 + 3)) {
        goto LABEL_109;
      }
      uint64_t v91 = *((void *)v105 + 2);
      if ((v91 & 4) == 0) {
        goto LABEL_109;
      }
      unint64_t v92 = v91 & 0xFFFFFFFFFFFFFFF8;
      if (!v92) {
        goto LABEL_109;
      }
    }
    int v106 = &v105;
    sub_1CC5FA668(v92 + 16, &v106);
    goto LABEL_109;
  }
  int v12 = *(unsigned __int8 *)(a2 + 16);
  if (v12 == 30)
  {
    if ((*(_DWORD *)(a2 + 20) & 0x7FFFFFF) == 3) {
      unsigned int v13 = 2;
    }
    else {
      unsigned int v13 = 1;
    }
LABEL_9:
    uint64_t v14 = 0;
    long long v15 = (void **)(a2 - 32);
    uint64_t v95 = a2 - 64;
    uint64_t v96 = a2 + 32;
    unint64_t v16 = (unint64_t)a4;
    uint64_t v17 = v13;
    BOOL v103 = (void **)(a2 - 32);
    while (1)
    {
      v108[0] = 0;
      int v18 = *(unsigned __int8 *)(v9 + 16);
      if (v18 == 30) {
        break;
      }
      uint64_t v25 = (v18 - 31);
      BOOL v19 = v15;
      switch(v25)
      {
        case 1:
        case 7:
          int v63 = *(_DWORD *)(v9 + 20);
          if ((v63 & 0x40000000) != 0) {
            uint64_t v64 = *(void *)(a2 - 8);
          }
          else {
            uint64_t v64 = a2 - 32 * (v63 & 0x7FFFFFF);
          }
          BOOL v19 = (void **)(v64 + 32 * (v14 + 1));
          uint64_t v9 = a2;
          goto LABEL_101;
        case 2:
          uint64_t v65 = -64;
          if (!v14) {
            uint64_t v65 = -96;
          }
          BOOL v19 = (void **)(v9 + v65);
          goto LABEL_12;
        case 3:
        case 4:
          goto LABEL_162;
        case 5:
          if (*(_WORD *)(v9 + 18))
          {
            uint64_t v9 = a2;
            uint64_t v66 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
            uint64_t v67 = v96;
LABEL_100:
            BOOL v19 = (void **)(v67 - 32 * v66);
LABEL_101:
            long long v15 = v103;
LABEL_12:
            uint64_t v20 = *v19;
            goto LABEL_13;
          }
          uint64_t v20 = 0;
          uint64_t v9 = a2;
          long long v15 = v103;
LABEL_13:
          v108[0] = v20;
          if (v20 == (void *)v16)
          {
            unint64_t v16 = 0;
          }
          else if (v20 == (void *)v11)
          {
            unint64_t v11 = 0;
          }
          else
          {
            uint64_t v21 = (void *)v11;
            if ((void *)v20[5] != v20 + 5)
            {
              uint64_t v22 = v20[6];
              uint64_t v23 = v22 - 24;
              uint64_t v24 = v22 ? v22 - 24 : 0;
              if (*(unsigned char *)(v24 + 16) == 83)
              {
                do
                {
                  uint64_t v37 = *(void *)(v23 + 32);
                  uint64_t v38 = v37 - 24;
                  if (!v37) {
                    uint64_t v38 = 0;
                  }
                  int v39 = *(unsigned __int8 *)(v38 + 16);
                  if (v39 == 83) {
                    uint64_t v40 = v38;
                  }
                  else {
                    uint64_t v40 = 0;
                  }
                  int v41 = *(_DWORD *)(v23 + 20);
                  uint64_t v42 = v41 & 0x7FFFFFF;
                  if ((v41 & 0x7FFFFFF) != 0)
                  {
                    uint64_t v43 = 0;
                    while (1)
                    {
                      uint64_t v44 = v23 - 32 * v42;
                      if ((v41 & 0x40000000) != 0) {
                        uint64_t v44 = *(void *)(v23 - 8);
                      }
                      if (*(void *)(v44 + 32 * *(unsigned int *)(v23 + 60) + 8 * v43) == v10) {
                        break;
                      }
                      if (v42 == ++v43) {
                        goto LABEL_41;
                      }
                    }
                    uint64_t v45 = v43;
                  }
                  else
                  {
LABEL_41:
                    uint64_t v45 = 0xFFFFFFFFLL;
                  }
                  if ((v41 & 0x40000000) != 0)
                  {
                    uint64_t v28 = *(void *)(v23 - 8);
                    uint64_t v29 = v28 + 32 * v45;
                    long long v30 = (uint64_t *)(v28 + 32 * v42);
                  }
                  else
                  {
                    uint64_t v28 = v23 - 32 * v42;
                    uint64_t v29 = v28 + 32 * v45;
                    long long v30 = (uint64_t *)v23;
                  }
                  a1 = (void **)sub_1CC5E4108((uint64_t)&v106, (uint64_t *)(v29 + 32), v30, v28 + 32 * v45);
                  int v46 = *(_DWORD *)(v23 + 20);
                  if ((v46 & 0x40000000) != 0)
                  {
                    uint64_t v32 = *(void *)(v23 - 8);
                    uint64_t v33 = *(unsigned int *)(v23 + 60);
                    uint64_t v34 = v32 + 32 * v33;
                    uint64_t v31 = v46 & 0x7FFFFFF;
                  }
                  else
                  {
                    uint64_t v31 = v46 & 0x7FFFFFF;
                    uint64_t v32 = v23 - 32 * v31;
                    uint64_t v33 = *(unsigned int *)(v23 + 60);
                    uint64_t v34 = v32 + 32 * v33;
                  }
                  uint64_t v47 = (unsigned char *)(v34 + 8 * v31);
                  unsigned int v48 = (unsigned char *)(v34 + 8 * v45 + 8);
                  if (v47 != v48)
                  {
                    a1 = (void **)memmove((void *)(v32 + 32 * v33 + 8 * v45), v48, v47 - v48);
                    int v46 = *(_DWORD *)(v23 + 20);
                  }
                  if ((v46 & 0x40000000) != 0)
                  {
                    uint64_t v36 = *(void *)(v23 - 8);
                    uint64_t v35 = v46 & 0x7FFFFFF;
                  }
                  else
                  {
                    uint64_t v35 = v46 & 0x7FFFFFF;
                    uint64_t v36 = v23 - 32 * v35;
                  }
                  uint64_t v49 = v36 + 32 * v35;
                  if (*(void *)(v49 - 32))
                  {
                    **(void **)(v49 - 16) = *(void *)(v49 - 24);
                    uint64_t v50 = *(void *)(v49 - 24);
                    if (v50) {
                      *(void *)(v50 + 16) = *(void *)(v49 - 16);
                    }
                  }
                  *(void *)(v49 - 32) = 0;
                  *(_DWORD *)(v23 + 20) = *(_DWORD *)(v23 + 20) & 0xF8000000 | (*(_DWORD *)(v23 + 20) - 1) & 0x7FFFFFF;
                  if (!v37) {
                    break;
                  }
                  uint64_t v23 = v40;
                }
                while (v39 == 83);
                uint64_t v20 = v108[0];
                int64_t v8 = a4;
                uint64_t v9 = a2;
                uint64_t v7 = a5;
              }
            }
            BOOL v51 = v20 == v8 || v20 == v7;
            unint64_t v11 = (unint64_t)v21;
            if (v51)
            {
              long long v15 = v103;
            }
            else
            {
              long long v15 = v103;
              if (v117)
              {
                int v52 = 2;
                int v53 = &v118;
              }
              else
              {
                int v52 = v118.i32[2];
                if (!v118.i32[2])
                {
                  int v62 = 0;
LABEL_80:
                  a1 = (void **)sub_1CC0BE7D8((uint64_t)&v117, (uint64_t)v108, v108, v62);
                  *a1 = v108[0];
                  if (v120 >= (unint64_t)HIDWORD(v120)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  v119[v120] = v108[0];
                  LODWORD(v120) = v120 + 1;
                  goto LABEL_82;
                }
                int v53 = (int64x2_t *)v118.i64[0];
              }
              int v54 = v52 - 1;
              unsigned int v55 = v54 & ((v20 >> 4) ^ (v20 >> 9));
              uint64_t v56 = &v53->i64[v55];
              char v57 = (void *)*v56;
              if (v20 != (void *)*v56)
              {
                uint64_t v58 = 0;
                int v59 = 1;
                while (v57 != (void *)-4096)
                {
                  if (v58) {
                    BOOL v60 = 0;
                  }
                  else {
                    BOOL v60 = v57 == (void *)-8192;
                  }
                  if (v60) {
                    uint64_t v58 = v56;
                  }
                  unsigned int v61 = v55 + v59++;
                  unsigned int v55 = v61 & v54;
                  uint64_t v56 = &v53->i64[v55];
                  char v57 = (void *)*v56;
                  if (v20 == (void *)*v56) {
                    goto LABEL_82;
                  }
                }
                if (v58) {
                  int v62 = v58;
                }
                else {
                  int v62 = v56;
                }
                goto LABEL_80;
              }
            }
          }
LABEL_82:
          if (++v14 == v17)
          {
            uint64_t v68 = *(void *)(v9 + 40);
            goto LABEL_106;
          }
          break;
        case 6:
          goto LABEL_12;
        case 8:
          if (!v14)
          {
            uint64_t v9 = a2;
            uint64_t v66 = *(unsigned int *)(a2 + 80);
            uint64_t v67 = v95;
            goto LABEL_100;
          }
          uint64_t v9 = a2;
          long long v15 = v103;
          BOOL v19 = &(&v103[4 * v14])[-4 * *(unsigned int *)(a2 + 80) - 4];
          goto LABEL_12;
        default:
          int v26 = *(_DWORD *)(v9 + 20);
          if ((v26 & 0x40000000) != 0) {
            uint64_t v27 = *(void *)(v9 - 8);
          }
          else {
            uint64_t v27 = v9 - 32 * (v26 & 0x7FFFFFF);
          }
          BOOL v19 = (void **)(v27 + 32 * (2 * v14) + 32);
          goto LABEL_12;
      }
    }
    BOOL v19 = &v15[-4 * v14];
    goto LABEL_12;
  }
  unsigned int v13 = 2;
  uint64_t v69 = (v12 - 29);
  uint64_t v68 = v10;
  unint64_t v16 = (unint64_t)a4;
  switch(v69)
  {
    case 1:
LABEL_162:
      __break(1u);
      free(a1);
      if (v119 != v121) {
        free(v119);
      }
      if ((v117 & 1) == 0) {
        MEMORY[0x1D25D9CD0](v118.i64[0], 8);
      }
      return;
    case 2:
      unsigned int v13 = (*(_DWORD *)(a2 + 20) >> 1) & 0x3FFFFFF;
      goto LABEL_104;
    case 3:
    case 9:
      unsigned int v13 = (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) - 1;
      goto LABEL_104;
    case 4:
      goto LABEL_9;
    case 7:
      unsigned int v13 = *(_WORD *)(a2 + 18) & 1;
      goto LABEL_104;
    case 8:
      unsigned int v13 = 1;
      goto LABEL_9;
    case 10:
      unsigned int v13 = *(_DWORD *)(a2 + 80) + 1;
LABEL_104:
      if (!v13) {
        goto LABEL_105;
      }
      goto LABEL_9;
    default:
      goto LABEL_106;
  }
}

uint64_t sub_1CD233048(uint64_t a1)
{
  size_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 >= 2)
  {
    qsort(*(void **)a1, v2, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1CD230780);
    LODWORD(v2) = *(_DWORD *)(a1 + 8);
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v4 = 0;
  uint64_t v5 = v2 - 2;
  do
  {
    uint64_t v6 = (uint64_t *)(*(void *)a1 + 8 * v4);
    uint64_t v7 = *v6;
    uint64_t v8 = v6[1];
    unsigned int v16 = *(_DWORD *)(v8 + 32);
    if (v16 > 0x40) {
      operator new[]();
    }
    __s2 = *(void **)(v8 + 24);
    llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
    unsigned int v9 = v16;
    uint64_t v10 = __s2;
    unsigned int v16 = 0;
    uint64_t v11 = *(unsigned int *)(v7 + 32);
    if (v11 > 0x40) {
      BOOL v12 = memcmp(*(const void **)(v7 + 24), __s2, ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8) == 0;
    }
    else {
      BOOL v12 = *(void *)(v7 + 24) == (void)__s2;
    }
    uint64_t v3 = v12;
    if (v9 >= 0x41)
    {
      if (v10)
      {
        MEMORY[0x1D25D9CB0](v10, 0x1000C8000313F17);
        if (v16 >= 0x41)
        {
          if (__s2) {
            MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
          }
        }
      }
    }
    if (v5 == v4) {
      char v13 = 0;
    }
    else {
      char v13 = v3;
    }
    ++v4;
  }
  while ((v13 & 1) != 0);
  return v3;
}

void sub_1CD2331DC(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v1 = *(llvm::BasicBlock **)(a1 + 40);
  int v2 = *(_DWORD *)(a1 + 20);
  if ((v2 & 0x40000000) != 0) {
    uint64_t v3 = *(void *)(a1 - 8);
  }
  else {
    uint64_t v3 = a1 - 32 * (v2 & 0x7FFFFFF);
  }
  llvm::BasicBlock::removePredecessor(*(llvm::Type **)(v3 + 32), v1, 0);
  uint64_t v4 = **(void **)v1;
  if ((*((unsigned char *)v1 + 23) & 0x10) != 0)
  {
    uint64_t v5 = *(void *)(*(void *)v4 + 152);
    uint64_t v6 = *(unsigned int *)(*(void *)v4 + 168);
    if (v6)
    {
      LODWORD(v7) = (v6 - 1) & ((v1 >> 4) ^ (v1 >> 9));
      uint64_t v8 = (llvm::BasicBlock **)(v5 + 16 * v7);
      unsigned int v9 = *v8;
      if (*v8 != v1)
      {
        int v10 = 1;
        do
        {
          if (v9 == (llvm::BasicBlock *)-4096) {
            goto LABEL_11;
          }
          int v11 = v7 + v10++;
          uint64_t v7 = v11 & (v6 - 1);
          unsigned int v9 = *(llvm::BasicBlock **)(v5 + 16 * v7);
        }
        while (v9 != v1);
        uint64_t v8 = (llvm::BasicBlock **)(v5 + 16 * v7);
      }
    }
    else
    {
LABEL_11:
      uint64_t v8 = (llvm::BasicBlock **)(v5 + 16 * v6);
    }
    BOOL v12 = v8[1];
    uint64_t v15 = *(void *)v12;
    char v13 = (char *)v12 + 16;
    uint64_t v14 = v15;
  }
  else
  {
    uint64_t v14 = 0;
    char v13 = &byte_1CFBCE98E;
  }
  LOWORD(v19) = 773;
  unsigned int v16 = v13;
  uint64_t v17 = v14;
  int v18 = ".unreachabledefault";
  operator new();
}

uint64_t sub_1CD233670(uint64_t a1, uint64_t a2, llvm::BasicBlock *a3, llvm::BasicBlock **a4, uint64_t a5, llvm::DataLayout *a6, uint64_t a7)
{
  v88[4] = *MEMORY[0x1E4F143B8];
  int v11 = *(llvm::BasicBlock **)(a1 + 40);
  v85[0] = 1;
  for (uint64_t i = 1; i != 9; i += 2)
    v85[i] = -4096;
  int v13 = *(_DWORD *)(a1 + 20);
  if ((v13 & 0x40000000) != 0) {
    uint64_t v14 = *(void ***)(a1 - 8);
  }
  else {
    uint64_t v14 = (void **)(a1 - 32 * (v13 & 0x7FFFFFF));
  }
  uint64_t v86 = (uint64_t **)*v14;
  uint64_t v87 = a2;
  sub_1CD234174((uint64_t)&v79, (uint64_t)v85, (uint64_t *)&v86, &v87);
  uint64_t v15 = (uint64_t)&v79;
  llvm::BasicBlock::instructionsWithoutDebug(a3, 0, (uint64_t)&v79);
  long long v76 = v79;
  if (v81)
  {
    if (v81 == v80)
    {
      int v78 = v77;
      (*(void (**)(void))(*v81 + 24))();
    }
    else
    {
      int v78 = (void *)(*(uint64_t (**)(void))(*v81 + 16))();
    }
  }
  else
  {
    int v78 = 0;
  }
  long long v73 = v82;
  uint64_t v16 = (uint64_t)v84;
  if (v84)
  {
    if (v84 == v83)
    {
      int v75 = v74;
      uint64_t v16 = (*(uint64_t (**)(void))(*v84 + 24))();
    }
    else
    {
      uint64_t v16 = (*(uint64_t (**)(void))(*v84 + 16))();
      int v75 = (void *)v16;
    }
  }
  else
  {
    int v75 = 0;
  }
  uint64_t v17 = v76;
  if ((void)v76 == (void)v73)
  {
LABEL_126:
    uint64_t v15 = 1;
    goto LABEL_127;
  }
LABEL_17:
  if (v17) {
    uint64_t v18 = v17 - 24;
  }
  else {
    uint64_t v18 = 0;
  }
  int v19 = *(unsigned __int8 *)(v18 + 16);
  if (v19 != 30)
  {
    uint64_t v15 = 0;
    switch(*(unsigned char *)(v18 + 16))
    {
      case 0x1D:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x25:
        break;
      case 0x1E:
        goto LABEL_181;
      case 0x1F:
        int v42 = (*(_DWORD *)(v18 + 20) >> 1) & 0x3FFFFFF;
        goto LABEL_99;
      case 0x20:
      case 0x26:
        int v42 = (*(_DWORD *)(v18 + 20) & 0x7FFFFFF) - 1;
        goto LABEL_99;
      case 0x24:
        int v42 = *(_WORD *)(v18 + 18) & 1;
        goto LABEL_99;
      case 0x27:
        int v42 = *(_DWORD *)(v18 + 80) + 1;
LABEL_99:
        if (v42 == 1)
        {
          uint64_t v15 = 0;
          switch(*(unsigned char *)(v18 + 16))
          {
            case '!':
            case '""':
            case '$':
            case '%':
            case '&':
              goto LABEL_127;
            case '#':
              goto LABEL_181;
            case '\'':
              uint64_t v20 = (llvm::BasicBlock **)(v18 - 32 * *(unsigned int *)(v18 + 80) - 64);
              goto LABEL_24;
            default:
              int v43 = *(_DWORD *)(v18 + 20);
              if ((v43 & 0x40000000) != 0) {
                uint64_t v44 = *(void *)(v18 - 8);
              }
              else {
                uint64_t v44 = v18 - 32 * (v43 & 0x7FFFFFF);
              }
              uint64_t v20 = (llvm::BasicBlock **)(v44 + 32);
              goto LABEL_24;
          }
        }
        goto LABEL_125;
      default:
        if (!v17 || v19 != 85)
        {
          uint64_t v86 = (uint64_t **)v88;
          uint64_t v87 = 0x400000000;
          int v23 = *(_DWORD *)(v18 + 20);
          uint64_t v24 = v23 & 0x7FFFFFF;
          if ((v23 & 0x7FFFFFF) == 0)
          {
            unsigned int v26 = 0;
            if (v17) {
              goto LABEL_68;
            }
            goto LABEL_70;
          }
          uint64_t v68 = a4;
          uint64_t v69 = a7;
          uint64_t v25 = 0;
          unsigned int v26 = 0;
          uint64_t v27 = 32 * v24;
          do
          {
            int v28 = *(_DWORD *)(v18 + 20);
            if ((v28 & 0x40000000) != 0) {
              uint64_t v29 = *(void *)(v18 - 8);
            }
            else {
              uint64_t v29 = v18 - 32 * (v28 & 0x7FFFFFF);
            }
            uint64_t v15 = *(void *)(v29 + v25);
            if (v15) {
              BOOL v30 = *(unsigned __int8 *)(v15 + 16) >= 0x15u;
            }
            else {
              BOOL v30 = 1;
            }
            if (v30)
            {
              uint64_t v71 = 0;
              if ((sub_1CD234510((uint64_t)v85, v15, &v71) & 1) == 0)
              {
                uint64_t v15 = 0;
LABEL_73:
                a4 = v68;
                a7 = v69;
                goto LABEL_74;
              }
              uint64_t v15 = *(void *)(v71 + 8);
              if (!v15) {
                goto LABEL_73;
              }
              unsigned int v26 = v87;
            }
            if (v26 >= HIDWORD(v87)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v86[v26] = (uint64_t *)v15;
            unsigned int v26 = v87 + 1;
            LODWORD(v87) = v87 + 1;
            v25 += 32;
          }
          while (v27 != v25);
          int v19 = *(unsigned __int8 *)(v18 + 16);
          a4 = v68;
          a7 = v69;
          if (v17)
          {
LABEL_68:
            if ((v19 - 83) >= 0xFFFFFFFE)
            {
              uint64_t v35 = llvm::ConstantFoldCompareInstOperands(*(_WORD *)(v18 + 18) & 0x3F, (llvm::ConstantExpr *)*v86, (llvm::Constant *)v86[1], a6, 0);
              goto LABEL_71;
            }
          }
LABEL_70:
          uint64_t v35 = sub_1CBFB8E50((llvm *)v18, (llvm *)(v19 - 28), v86, v26, a6, 0);
LABEL_71:
          uint64_t v15 = (uint64_t)v35;
LABEL_74:
          if (v86 != v88) {
            free(v86);
          }
LABEL_76:
          if (!v15) {
            goto LABEL_126;
          }
          goto LABEL_77;
        }
        uint64_t v21 = *(void *)(v18 - 96);
        if (v21) {
          BOOL v22 = *(unsigned __int8 *)(v21 + 16) >= 0x15u;
        }
        else {
          BOOL v22 = 1;
        }
        if (v22)
        {
          uint64_t v86 = 0;
          if ((sub_1CD234510((uint64_t)v85, v21, &v86) & 1) == 0) {
            goto LABEL_126;
          }
          uint64_t v21 = (uint64_t)v86[1];
          if (!v21) {
            goto LABEL_126;
          }
        }
        if (llvm::Constant::isAllOnesValue((llvm::Constant *)v21))
        {
          uint64_t v15 = *(void *)(v18 - 64);
          if (v15 && *(unsigned __int8 *)(v15 + 16) < 0x15u) {
            goto LABEL_77;
          }
          goto LABEL_63;
        }
        int v31 = *(unsigned __int8 *)(v21 + 16);
        if (v31 == 16)
        {
          uint64_t v32 = *(unsigned int *)(v21 + 32);
          if (v32 >= 0x41)
          {
            int v46 = 0;
            int64_t v47 = (unint64_t)(v32 + 63) >> 6;
            do
            {
              if (v47-- < 1) {
                break;
              }
              unint64_t v49 = *(void *)(*(void *)(v21 + 24) + 8 * v47);
              v46 += __clz(v49);
            }
            while (!v49);
            int v50 = v32 | 0xFFFFFFC0;
            if ((v32 & 0x3F) == 0) {
              int v50 = 0;
            }
            if (v46 + v50 != v32) {
              goto LABEL_126;
            }
          }
          else if (*(void *)(v21 + 24))
          {
            goto LABEL_126;
          }
        }
        else if (v31 == 17)
        {
          if ((sub_1CB844168(v21, 0.0) & 1) == 0) {
            goto LABEL_126;
          }
        }
        else if ((v31 - 18) >= 3 && v31 != 13)
        {
          goto LABEL_126;
        }
        uint64_t v15 = *(void *)(v18 - 32);
        if (v15) {
          BOOL v33 = *(unsigned __int8 *)(v15 + 16) >= 0x15u;
        }
        else {
          BOOL v33 = 1;
        }
        if (v33)
        {
LABEL_63:
          uint64_t v86 = 0;
          int v34 = sub_1CD234510((uint64_t)v85, v15, &v86);
          uint64_t v15 = 0;
          if (v34) {
            uint64_t v15 = (uint64_t)v86[1];
          }
          goto LABEL_76;
        }
LABEL_77:
        uint64_t v36 = *(void *)(v18 + 8);
        if (!v36)
        {
LABEL_91:
          uint64_t v71 = v18;
          uint64_t v72 = v15;
          uint64_t v16 = sub_1CD234174((uint64_t)&v86, (uint64_t)v85, &v71, &v72);
          uint64_t v17 = v76;
          goto LABEL_92;
        }
        while (1)
        {
          uint64_t v37 = *(void *)(v36 + 24);
          unsigned int v38 = *(unsigned __int8 *)(v37 + 16);
          BOOL v39 = v37 && v38 >= 0x1C;
          if (!v39 || *(llvm::BasicBlock **)(v37 + 40) != a3)
          {
            if (!v37 || v38 != 83) {
              break;
            }
            int v40 = *(_DWORD *)(v37 + 20);
            uint64_t v41 = (v40 & 0x40000000) != 0 ? *(void *)(v37 - 8) : v37 - 32 * (v40 & 0x7FFFFFF);
            if (*(llvm::BasicBlock **)(v41
                                      + 32 * *(unsigned int *)(v37 + 60)
                                      + 8 * ((unint64_t)(v36 - v41) >> 5)) != a3)
              break;
          }
          uint64_t v36 = *(void *)(v36 + 8);
          if (!v36) {
            goto LABEL_91;
          }
        }
LABEL_125:
        uint64_t v15 = 0;
        break;
    }
LABEL_127:
    if (v75 == v74)
    {
      (*(void (**)(void *))(v74[0] + 32))(v74);
    }
    else if (v75)
    {
      (*(void (**)(void))(*v75 + 40))();
    }
    if (v78 == v77)
    {
      (*(void (**)(void *))(v77[0] + 32))(v77);
    }
    else if (v78)
    {
      (*(void (**)(void))(*v78 + 40))();
    }
    uint64_t v16 = (uint64_t)v84;
    if (v84 != v83) {
      goto LABEL_182;
    }
    (*(void (**)(void *))(v83[0] + 32))(v83);
    goto LABEL_137;
  }
  if ((*(_DWORD *)(v18 + 20) & 0x7FFFFFF) == 3) {
    goto LABEL_125;
  }
  uint64_t v20 = (llvm::BasicBlock **)(v18 - 32);
LABEL_24:
  int v11 = a3;
  a3 = *v20;
  while (1)
  {
LABEL_92:
    uint64_t v17 = *(void *)(v17 + 8);
    *(void *)&long long v76 = v17;
    if (v17 == *((void *)&v76 + 1))
    {
LABEL_95:
      if (v17 == (void)v73) {
        goto LABEL_126;
      }
      goto LABEL_17;
    }
    if (!v78) {
      break;
    }
    uint64_t v16 = (*(uint64_t (**)(void))(*v78 + 48))();
    uint64_t v17 = v76;
    if (v16) {
      goto LABEL_95;
    }
  }
  sub_1CB920400();
LABEL_181:
  __break(1u);
LABEL_182:
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 40))(v16);
  }
LABEL_137:
  if (v81 == v80)
  {
    (*(void (**)(void *))(v80[0] + 32))(v80);
  }
  else if (v81)
  {
    (*(void (**)(void))(*v81 + 40))();
  }
  if (v15)
  {
    BOOL v51 = *a4;
    if (!*a4)
    {
      *a4 = a3;
      BOOL v51 = a3;
    }
    if (a3 != v51)
    {
LABEL_143:
      uint64_t v15 = 0;
      goto LABEL_177;
    }
    if (*((llvm::BasicBlock **)a3 + 5) == (llvm::BasicBlock *)((char *)a3 + 40)) {
      goto LABEL_176;
    }
    uint64_t v52 = *((void *)a3 + 6);
    uint64_t v53 = v52 - 24;
    uint64_t v54 = v52 ? v52 - 24 : 0;
    if (!v52 || *(unsigned char *)(v54 + 16) != 83) {
      goto LABEL_176;
    }
LABEL_150:
    int v55 = *(_DWORD *)(v53 + 20);
    uint64_t v56 = v55 & 0x7FFFFFF;
    if ((v55 & 0x7FFFFFF) == 0) {
      goto LABEL_169;
    }
    uint64_t v57 = 0;
    uint64_t v58 = v53 - 32 * v56;
    uint64_t v59 = 32 * *(unsigned int *)(v53 + 60);
    uint64_t v60 = 32 * v56;
    while (1)
    {
      if ((v55 & 0x40000000) != 0)
      {
        if (*(llvm::BasicBlock **)(*(void *)(v53 - 8) + v59) == v11)
        {
          uint64_t v58 = *(void *)(v53 - 8);
LABEL_159:
          unsigned int v61 = *(unsigned __int8 **)(v58 + v57);
          if (v61) {
            BOOL v62 = v61[16] >= 0x15u;
          }
          else {
            BOOL v62 = 1;
          }
          if (v62)
          {
            *(void *)&long long v79 = 0;
            if ((sub_1CD234510((uint64_t)v85, (uint64_t)v61, &v79) & 1) == 0) {
              goto LABEL_143;
            }
            unsigned int v61 = *(unsigned __int8 **)(v79 + 8);
            if (!v61) {
              goto LABEL_143;
            }
          }
          if (!sub_1CD2340A0(v61, a7)) {
            goto LABEL_143;
          }
          unint64_t v63 = *(unsigned int *)(a5 + 8);
          if (v63 >= *(unsigned int *)(a5 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v64 = (void *)(*(void *)a5 + 16 * v63);
          *uint64_t v64 = v53;
          v64[1] = v61;
          ++*(_DWORD *)(a5 + 8);
LABEL_169:
          uint64_t v65 = *(void *)(v53 + 32);
          uint64_t v53 = v65 - 24;
          if (v65) {
            uint64_t v66 = v65 - 24;
          }
          else {
            uint64_t v66 = 0;
          }
          if (!v65 || *(unsigned char *)(v66 + 16) != 83)
          {
LABEL_176:
            uint64_t v15 = *(_DWORD *)(a5 + 8) != 0;
            break;
          }
          goto LABEL_150;
        }
      }
      else if (*(llvm::BasicBlock **)(v58 + v59) == v11)
      {
        goto LABEL_159;
      }
      v57 += 32;
      v59 += 8;
      if (v60 == v57) {
        goto LABEL_169;
      }
    }
  }
LABEL_177:
  if ((v85[0] & 1) == 0) {
    MEMORY[0x1D25D9CD0](v85[1], 8);
  }
  return v15;
}

uint64_t sub_1CD2340A0(unsigned __int8 *a1, uint64_t a2)
{
  if (llvm::Constant::isThreadDependent((llvm::Constant *)a1)) {
    return 0;
  }
  if (llvm::Constant::isDLLImportDependent((llvm::Constant *)a1)) {
    return 0;
  }
  unsigned int v5 = a1[16];
  if (v5 > 0x13) {
    return 0;
  }
  if (((1 << v5) & 0xB180F) == 0)
  {
    if (v5 != 5) {
      return 0;
    }
    uint64_t v7 = llvm::Value::stripInBoundsConstantOffsets((llvm::Value *)a1);
    if (v7 == (llvm::Value *)a1 || !sub_1CD2340A0(v7, a2)) {
      return 0;
    }
  }
  uint64_t v6 = *(uint64_t (**)(void))(**(void **)a2 + 504);

  return v6();
}

uint64_t sub_1CD234174(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  int v19 = 0;
  uint64_t result = sub_1CC056A94(a2, *a3, &v19);
  unsigned int v9 = v19;
  unsigned int v10 = *(_DWORD *)a2;
  if (result)
  {
    if (v10)
    {
      uint64_t v17 = a2 + 8;
      uint64_t v18 = 4;
    }
    else
    {
      uint64_t v17 = *(void *)(a2 + 8);
      uint64_t v18 = *(unsigned int *)(a2 + 16);
    }
    char v16 = 0;
    uint64_t v15 = v17 + 16 * v18;
    goto LABEL_11;
  }
  unsigned int v11 = v10 >> 1;
  if (v10) {
    unsigned int v12 = 4;
  }
  else {
    unsigned int v12 = *(_DWORD *)(a2 + 16);
  }
  if (4 * v11 + 4 >= 3 * v12)
  {
    v12 *= 2;
    goto LABEL_14;
  }
  if (v12 + ~v11 - *(_DWORD *)(a2 + 4) <= v12 >> 3)
  {
LABEL_14:
    sub_1CD2342C0(a2, v12);
    int v19 = 0;
    uint64_t result = sub_1CC056A94(a2, *a3, &v19);
    unsigned int v9 = v19;
  }
  *(_DWORD *)a2 += 2;
  if (*v9 != -4096) {
    --*(_DWORD *)(a2 + 4);
  }
  *unsigned int v9 = *a3;
  v9[1] = *a4;
  uint64_t v13 = a2 + 8;
  if (*(unsigned char *)a2)
  {
    uint64_t v14 = 4;
  }
  else
  {
    uint64_t v13 = *(void *)(a2 + 8);
    uint64_t v14 = *(unsigned int *)(a2 + 16);
  }
  uint64_t v15 = v13 + 16 * v14;
  char v16 = 1;
LABEL_11:
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v15;
  *(unsigned char *)(a1 + 16) = v16;
  return result;
}

uint64_t sub_1CD2342C0(uint64_t a1, unsigned int a2)
{
  v14[8] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    unsigned int v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CD23444C(a1, v11, &v11[2 * v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  uint64_t v7 = v14;
  do
  {
    uint64_t v8 = *(void *)(a1 + v6 + 8);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *uint64_t v7 = v8;
      v7[1] = *(void *)(a1 + v6 + 16);
      v7 += 2;
    }
    v6 += 16;
  }
  while (v6 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CD23444C(a1, v14, v7);
}

uint64_t sub_1CD23444C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 72);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[2 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    uint64_t v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v12 = 0;
      uint64_t result = sub_1CC056A94((uint64_t)v5, v10, &v12);
      unsigned int v11 = v12;
      *uint64_t v12 = *a2;
      v11[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1CD234510(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_15;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
LABEL_12:
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v12 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_12;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_15:
  *a3 = v7;
  return result;
}

void sub_1CD2345B4(char **a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *((unsigned int *)a1 + 3);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  unsigned int v6 = (char *)malloc_type_malloc(56 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v7 = v6;
  uint64_t v8 = *a1;
  int v9 = *((_DWORD *)a1 + 2);
  if (v9)
  {
    int v10 = &v8[56 * v9];
    BOOL v11 = v7 + 8;
    uint64_t v12 = (uint64_t)(v8 + 8);
    do
    {
      uint64_t v13 = v12 - 8;
      *(v11 - 1) = *(void *)(v12 - 8);
      void *v11 = v11 + 2;
      v11[1] = 0x400000000;
      if (*(_DWORD *)(v12 + 8)) {
        sub_1CD69EC18((uint64_t)v11, v12);
      }
      v11 += 7;
      v12 += 56;
    }
    while ((char *)(v13 + 56) != v10);
    uint64_t v8 = *a1;
    uint64_t v14 = *((unsigned int *)a1 + 2);
    if (v14)
    {
      uint64_t v15 = 56 * v14;
      do
      {
        if (&v8[v15 - 32] != *(char **)&v8[v15 - 48])
        {
          char v16 = v8;
          free(*(void **)&v8[v15 - 48]);
          uint64_t v8 = v16;
        }
        v15 -= 56;
      }
      while (v15);
      uint64_t v8 = *a1;
    }
  }
  if (v8 != (char *)(a1 + 2)) {
    free(v8);
  }
  *a1 = v7;
  *((_DWORD *)a1 + 3) = v5;
}

char **sub_1CD234724(char **a1)
{
  int v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v5 = 56 * v3;
    do
    {
      unsigned int v6 = *(char **)&v2[v5 - 48];
      if (&v2[v5 - 32] != v6) {
        free(v6);
      }
      v5 -= 56;
    }
    while (v5);
    int v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CD2347A8(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    unsigned int v6 = (void *)(a1 + 40 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v10 = 1;
    }
    else
    {
      uint64_t v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v8 = v6;
        }
        unsigned int v13 = v5 + v9++;
        unsigned int v5 = v13 & v4;
        unsigned int v6 = (void *)(a1 + 40 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v10 = 1;
        if (*v6 == a3) {
          goto LABEL_9;
        }
      }
      uint64_t v10 = 0;
      if (v8) {
        unsigned int v6 = v8;
      }
    }
  }
  else
  {
    unsigned int v6 = 0;
    uint64_t v10 = 0;
  }
LABEL_9:
  *a4 = v6;
  return v10;
}

void *sub_1CD234844(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD891C5C(a1, v4, v4 + 40 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 40 * v10;
    do
    {
      void *result = -4096;
      result += 5;
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD23491C()
{
  int v5 = 1;
  int v3 = 1;
  char v1 = 0;
  uint64_t v4 = (int *)&v1;
  v2.n128_u64[0] = (unint64_t)"Temorary development switch used to gradually uplift SimplifyCFG into preserving DomTree,";
  v2.n128_u64[1] = 89;
  sub_1CD89237C(&v5, &v3, (char **)&v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::RequireAndPreserveDomTree, &dword_1CB82C000);
  int v5 = 1;
  int v3 = 2;
  uint64_t v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Control the amount of phi node folding to perform (default = 2)";
  v2.n128_u64[1] = 63;
  sub_1CD45A86C((uint64_t)&unk_1EBCFDCC8, "phi-node-folding-threshold", &v5, &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCFDCC8, &dword_1CB82C000);
  int v5 = 1;
  int v3 = 4;
  uint64_t v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Control the maximal total instruction cost that we are willing to speculatively exe"
                                     "cute to fold a 2-entry PHI node into a select (default = 4)";
  v2.n128_u64[1] = 142;
  sub_1CD892514(&v5, &v4, (long long *)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCFDD88, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v3) = 1;
  uint64_t v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Hoist common instructions up to the parent block";
  v2.n128_u64[1] = 48;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCFDE48, "simplifycfg-hoist-common", &v5, (unsigned char **)&v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCFDE48, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v3) = 1;
  uint64_t v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Sink common instructions down to the end block";
  v2.n128_u64[1] = 46;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCFDF08, "simplifycfg-sink-common", &v5, (unsigned char **)&v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCFDF08, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v3) = 1;
  uint64_t v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Hoist conditional stores if an unconditional store precedes";
  v2.n128_u64[1] = 59;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCFDFC8, "simplifycfg-hoist-cond-stores", &v5, (unsigned char **)&v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCFDFC8, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v3) = 1;
  uint64_t v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Hoist conditional stores even if an unconditional store does not precede - hoist mu"
                                     "ltiple conditional stores into a single predicated store";
  v2.n128_u64[1] = 139;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCFE088, "simplifycfg-merge-cond-stores", &v5, (unsigned char **)&v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCFE088, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v3) = 0;
  uint64_t v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"When merging conditional stores, do so even if the resultant basic blocks are unlik"
                                     "ely to be if-converted as a result";
  v2.n128_u64[1] = 117;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCFE148, "simplifycfg-merge-cond-stores-aggressively", &v5, (unsigned char **)&v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCFE148, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v3) = 1;
  uint64_t v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Allow exactly one expensive instruction to be speculatively executed";
  v2.n128_u64[1] = 68;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCFE208, "speculate-one-expensive-inst", &v5, (unsigned char **)&v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCFE208, &dword_1CB82C000);
  int v5 = 1;
  int v3 = 10;
  uint64_t v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Limit maximum recursion depth when calculating costs of speculatively executed instructions";
  v2.n128_u64[1] = 91;
  sub_1CD45A86C((uint64_t)&unk_1EBCFE2C8, "max-speculation-depth", &v5, &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCFE2C8, &dword_1CB82C000);
  int v5 = 1;
  int v3 = 10;
  uint64_t v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Max size of a block which is still considered small enough to thread through";
  v2.n128_u64[1] = 76;
  sub_1CD89263C(&v5, &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &qword_1EBCFE388, &dword_1CB82C000);
  int v5 = 1;
  int v3 = 2;
  uint64_t v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Maximum cost of combining conditions when folding branches";
  v2.n128_u64[1] = 58;
  sub_1CD45A86C((uint64_t)&unk_1EBCFE448, "simplifycfg-branch-fold-threshold", &v5, &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCFE448, &dword_1CB82C000);
  int v5 = 1;
  int v3 = 2;
  uint64_t v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Multiplier to apply to threshold when determining whether or not to fold branch to "
                                     "common destination when vector operations are present";
  v2.n128_u64[1] = 136;
  sub_1CD8927B4(&v5, &v4, (long long *)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCFE508, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v3) = 1;
  uint64_t v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Allow SimplifyCFG to merge invokes together when appropriate";
  v2.n128_u64[1] = 60;
  sub_1CD8928DC(&v5, (char **)&v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCFE5C8, &dword_1CB82C000);
  int v5 = 1;
  int v3 = 16;
  uint64_t v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Limit cases to analyze when converting a switch to select";
  v2.n128_u64[1] = 57;
  sub_1CD45A86C((uint64_t)&unk_1EBCFE688, "max-switch-cases-per-result", &v5, &v4, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCFE688, &dword_1CB82C000);
}

BOOL llvm::simplifyUsersOfIV(llvm::Value *a1, uint64_t a2, llvm::DominatorTree *a3, uint64_t *a4, uint64_t a5, unsigned int *a6, llvm::SCEVExpander *a7, uint64_t a8)
{
  uint64_t v546 = *MEMORY[0x1E4F143B8];
  int v12 = *((_DWORD *)a4 + 4);
  if (!v12)
  {
LABEL_7:
    uint64_t v20 = 0;
    goto LABEL_8;
  }
  uint64_t v13 = *((void *)a1 + 5);
  uint64_t v14 = *a4;
  unsigned int v15 = v12 - 1;
  uint64_t v16 = ((v13 >> 4) ^ (v13 >> 9)) & (v12 - 1);
  uint64_t v17 = *(void *)(*a4 + 16 * v16);
  if (v13 != v17)
  {
    int v18 = 1;
    while (v17 != -4096)
    {
      int v19 = v16 + v18++;
      uint64_t v16 = v19 & v15;
      uint64_t v17 = *(void *)(v14 + 16 * v16);
      if (v13 == v17) {
        goto LABEL_6;
      }
    }
    goto LABEL_7;
  }
LABEL_6:
  uint64_t v20 = *(const llvm::Loop **)(v14 + 16 * v16 + 8);
LABEL_8:
  if ((*(_DWORD *)(*(void *)a1 + 8) & 0xFD) != 0xD)
  {
    int v507 = 0;
    return v507 != 0;
  }
  v523 = v527;
  v524 = v527;
  uint64_t v525 = 16;
  int v526 = 0;
  v535 = v537;
  uint64_t v536 = 0x800000000;
  sub_1CD23CFE8((uint64_t)a1, (uint64_t)v20, (llvm::SmallPtrSetImplBase *)&v523, (uint64_t)&v535);
  unsigned int v22 = v536;
  if (!v536)
  {
    int v521 = 0;
    goto LABEL_673;
  }
  v520 = a1;
  uint64_t v509 = a8;
  int v521 = 0;
  v519 = a6;
  do
  {
    int v23 = (char *)v535 + 16 * v22;
    uint64_t v24 = (llvm::Value *)*((void *)v23 - 2);
    unint64_t v25 = *((void *)v23 - 1);
    LODWORD(v536) = v22 - 1;
    v522 = v24;
    if (!*((void *)v24 + 1))
    {
      if (llvm::wouldInstructionBeTriviallyDead((uint64_t)v24, 0))
      {
        unsigned int v109 = a6[2];
        if (v109 >= a6[3])
        {
          sub_1CC9E6F68(a6, (uint64_t *)&v522);
        }
        else
        {
          int v110 = v522;
          __int16 v111 = (llvm::ValueHandleBase *)(*(void *)a6 + 24 * v109);
          *(void *)__int16 v111 = 6;
          *((void *)v111 + 1) = 0;
          *((void *)v111 + 2) = v110;
          if (v110 != (llvm::Value *)-8192 && v110 != (llvm::Value *)-4096 && v110)
          {
            llvm::ValueHandleBase::AddToUseList(v111);
            unsigned int v109 = a6[2];
          }
          a6[2] = v109 + 1;
        }
        goto LABEL_346;
      }
      uint64_t v24 = v522;
    }
    if (v24 == v520) {
      goto LABEL_346;
    }
    unint64_t v541 = (unint64_t)v24;
    if ((*(_DWORD *)(*(void *)v24 + 8) & 0xFD) != 0xD) {
      goto LABEL_27;
    }
    uint64_t v26 = *(void *)(a2 + 104);
    unsigned int v27 = *(_DWORD *)(a2 + 120);
    if (v27)
    {
      unsigned int v28 = (v27 - 1) & ((v24 >> 4) ^ (v24 >> 9));
      uint64_t v29 = v26 + 48 * v28;
      BOOL v30 = *(llvm::Value **)(v29 + 24);
      if (v30 == v24) {
        goto LABEL_21;
      }
      int v31 = 1;
      while (v30 != (llvm::Value *)-4096)
      {
        unsigned int v32 = v28 + v31++;
        unsigned int v28 = v32 & (v27 - 1);
        uint64_t v29 = v26 + 48 * v28;
        BOOL v30 = *(llvm::Value **)(v29 + 24);
        if (v30 == v24) {
          goto LABEL_21;
        }
      }
    }
    uint64_t v29 = v26 + 48 * v27;
LABEL_21:
    if (v29 == v26 + 48 * v27 || (SCEVIter = *(const llvm::SCEV **)(v29 + 40)) == 0) {
      SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, (unint64_t)v24);
    }
    if (llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)a2, SCEVIter, v20) == 1
      && (sub_1CCD8232C(a7, (unint64_t)SCEVIter, v20, dword_1EBD0C7D8, a5, (llvm::Instruction *)v541) & 1) == 0)
    {
      llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor();
    }
LABEL_27:
    if (!v25) {
      goto LABEL_346;
    }
    while (1)
    {
      int v34 = v522;
      v538 = (uint64_t ***)v25;
      int v35 = *((unsigned __int8 *)v522 + 16);
      if (v35 != 54 && v35 != 47) {
        break;
      }
      int v36 = *((_DWORD *)v522 + 5);
      uint64_t v37 = (v36 & 0x40000000) != 0
          ? (llvm::Value *)*((void *)v522 - 1)
          : (llvm::Value *)((char *)v522 - 32 * (v36 & 0x7FFFFFF));
      if (v25 != *(void *)v37
        || *(unsigned char *)(*((void *)v37 + 4) + 16) != 16
        || *(unsigned __int8 *)(v25 + 16) - 41 > 0x11)
      {
        break;
      }
      int v38 = *(_DWORD *)(v25 + 20);
      BOOL v39 = (v38 & 0x40000000) != 0
          ? *(unint64_t **)(v25 - 8)
          : (unint64_t *)(v25 - 32 * (v38 & 0x7FFFFFF));
      if (*(unsigned char *)(v39[4] + 16) != 16) {
        break;
      }
      if ((v36 & 0x40000000) != 0) {
        int v40 = (char *)*((void *)v522 - 1);
      }
      else {
        int v40 = (char *)v522 - 32 * (v36 & 0x7FFFFFF);
      }
      unint64_t v41 = *v39;
      int v42 = (void *)*((void *)v40 + 4);
      if (v35 == 54)
      {
        unint64_t v43 = *(unsigned int *)(*(void *)v522 + 8);
        unint64_t v44 = v43 >> 8;
        uint64_t v45 = *((unsigned int *)v42 + 8);
        if (v45 >= 0x41)
        {
          int v47 = 0;
          int64_t v48 = (unint64_t)(v45 + 63) >> 6;
          do
          {
            BOOL v49 = v48-- < 1;
            if (v49) {
              break;
            }
            unint64_t v50 = *(void *)(v42[3] + 8 * v48);
            v47 += __clz(v50);
          }
          while (!v50);
          int v51 = v45 | 0xFFFFFFC0;
          if ((v45 & 0x3F) == 0) {
            int v51 = 0;
          }
          if ((v45 - v47 - v51) > 0x40) {
            break;
          }
          unint64_t v46 = *(void *)v42[3];
        }
        else
        {
          unint64_t v46 = v42[3];
        }
        if (v46 >= v44) {
          break;
        }
        uint64_t v52 = **(llvm::ConstantInt ***)v522;
        LODWORD(v542) = *(_DWORD *)(*(void *)v522 + 8) >> 8;
        if (v43 >> 8 > 0x40) {
          operator new[]();
        }
        unint64_t v541 = 0;
        uint64_t v53 = 1 << v46;
        if (v44 > 0x40) {
          *(void *)(v541 + 8 * (v46 >> 6)) |= v53;
        }
        else {
          v541 |= v53;
        }
        int v42 = llvm::ConstantInt::get(v52, (llvm::LLVMContext *)&v541, v21);
        if (v542 >= 0x41 && v541) {
          MEMORY[0x1D25D9CB0](v541, 0x1000C8000313F17);
        }
      }
      uint64_t v54 = *(void *)(a2 + 104);
      unsigned int v55 = *(_DWORD *)(a2 + 120);
      unsigned int v56 = v41 >> 4;
      if (!v55) {
        goto LABEL_67;
      }
      unsigned int v57 = v55 - 1;
      unsigned int v58 = (v55 - 1) & (v56 ^ (v41 >> 9));
      uint64_t v59 = v54 + 48 * v58;
      uint64_t v60 = *(void *)(v59 + 24);
      if (v60 != v41)
      {
        int v61 = 1;
        while (v60 != -4096)
        {
          unsigned int v62 = v58 + v61++;
          unsigned int v58 = v62 & v57;
          uint64_t v59 = v54 + 48 * (v62 & v57);
          uint64_t v60 = *(void *)(v59 + 24);
          if (v60 == v41) {
            goto LABEL_68;
          }
        }
LABEL_67:
        uint64_t v59 = v54 + 48 * v55;
      }
LABEL_68:
      if (v59 == v54 + 48 * v55 || (unint64_t v63 = *(const llvm::SCEV **)(v59 + 40)) == 0)
      {
        unint64_t v63 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, v41);
        uint64_t v54 = *(void *)(a2 + 104);
        unsigned int v55 = *(_DWORD *)(a2 + 120);
      }
      unsigned int v64 = v42 >> 4;
      uint64_t v65 = v54 + 48 * v55;
      if (!v55) {
        goto LABEL_77;
      }
      unsigned int v66 = v55 - 1;
      unsigned int v67 = v66 & (v64 ^ (v42 >> 9));
      uint64_t v68 = v54 + 48 * v67;
      uint64_t v69 = *(void **)(v68 + 24);
      if (v69 != v42)
      {
        int v70 = 1;
        while (v69 != (void *)-4096)
        {
          unsigned int v71 = v67 + v70++;
          unsigned int v67 = v71 & v66;
          uint64_t v68 = v54 + 48 * v67;
          uint64_t v69 = *(void **)(v68 + 24);
          if (v69 == v42) {
            goto LABEL_78;
          }
        }
LABEL_77:
        uint64_t v68 = v65;
      }
LABEL_78:
      if (v68 == v65 || (unint64_t v72 = *(void *)(v68 + 40)) == 0) {
        unint64_t v72 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, (unint64_t)v42);
      }
      uint64_t UDivExpr = llvm::ScalarEvolution::getUDivExpr((llvm::ScalarEvolution *)a2, v63, v72);
      if ((*((unsigned char *)v34 + 17) & 2) == 0)
      {
        BOOL v74 = 0;
        goto LABEL_106;
      }
      uint64_t v75 = *(void *)(a2 + 104);
      unsigned int v76 = *(_DWORD *)(a2 + 120);
      if (!v76) {
        goto LABEL_89;
      }
      unsigned int v77 = v76 - 1;
      unsigned int v78 = (v76 - 1) & (v56 ^ (v41 >> 9));
      uint64_t v79 = v75 + 48 * v78;
      uint64_t v80 = *(void *)(v79 + 24);
      if (v80 != v41)
      {
        int v81 = 1;
        while (v80 != -4096)
        {
          unsigned int v82 = v78 + v81++;
          unsigned int v78 = v82 & v77;
          uint64_t v79 = v75 + 48 * (v82 & v77);
          uint64_t v80 = *(void *)(v79 + 24);
          if (v80 == v41) {
            goto LABEL_90;
          }
        }
LABEL_89:
        uint64_t v79 = v75 + 48 * v76;
      }
LABEL_90:
      if (v79 == v75 + 48 * v76 || (uint64_t v83 = *(void *)(v79 + 40)) == 0)
      {
        uint64_t v83 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, v41);
        uint64_t v75 = *(void *)(a2 + 104);
        unsigned int v76 = *(_DWORD *)(a2 + 120);
      }
      uint64_t v84 = v75 + 48 * v76;
      if (v76)
      {
        unsigned int v85 = v76 - 1;
        unsigned int v86 = v85 & (v64 ^ (v42 >> 9));
        uint64_t v87 = v75 + 48 * v86;
        unint64_t v88 = *(void **)(v87 + 24);
        if (v88 == v42) {
          goto LABEL_100;
        }
        int v89 = 1;
        while (v88 != (void *)-4096)
        {
          unsigned int v90 = v86 + v89++;
          unsigned int v86 = v90 & v85;
          uint64_t v87 = v75 + 48 * v86;
          unint64_t v88 = *(void **)(v87 + 24);
          if (v88 == v42) {
            goto LABEL_100;
          }
        }
      }
      uint64_t v87 = v84;
LABEL_100:
      if (v87 == v84 || (uint64_t v91 = *(void *)(v87 + 40)) == 0) {
        uint64_t v91 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, (unint64_t)v42);
      }
      unint64_t v541 = (unint64_t)&v543;
      v543 = (const char *)UDivExpr;
      uint64_t v544 = v91;
      uint64_t v542 = 0x200000002;
      uint64_t MulExpr = llvm::ScalarEvolution::getMulExpr(a2, (uint64_t)&v541, 0, 0);
      if ((const char **)v541 != &v543) {
        free((void *)v541);
      }
      BOOL v74 = v83 != MulExpr;
LABEL_106:
      if ((*(_DWORD *)(*(void *)v34 + 8) & 0xFD) != 0xD) {
        break;
      }
      uint64_t v93 = *(void *)(a2 + 104);
      unsigned int v94 = *(_DWORD *)(a2 + 120);
      if (!v94) {
        goto LABEL_113;
      }
      unsigned int v95 = (v94 - 1) & ((v34 >> 4) ^ (v34 >> 9));
      uint64_t v96 = v93 + 48 * v95;
      uint64_t v97 = *(llvm::Instruction **)(v96 + 24);
      if (v97 != v34)
      {
        int v98 = 1;
        while (v97 != (llvm::Instruction *)-4096)
        {
          unsigned int v99 = v95 + v98++;
          unsigned int v95 = v99 & (v94 - 1);
          uint64_t v96 = v93 + 48 * v95;
          uint64_t v97 = *(llvm::Instruction **)(v96 + 24);
          if (v97 == v34) {
            goto LABEL_114;
          }
        }
LABEL_113:
        uint64_t v96 = v93 + 48 * v94;
      }
LABEL_114:
      if (v96 == v93 + 48 * v94 || (uint64_t v100 = *(void *)(v96 + 40)) == 0) {
        uint64_t v100 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, (unint64_t)v34);
      }
      if (v100 != UDivExpr) {
        break;
      }
      int v101 = *((_DWORD *)v34 + 5);
      if ((v101 & 0x40000000) != 0) {
        int v102 = (char *)*((void *)v34 - 1);
      }
      else {
        int v102 = (char *)v34 - 32 * (v101 & 0x7FFFFFF);
      }
      if (*(void *)v102)
      {
        **((void **)v102 + 2) = *((void *)v102 + 1);
        uint64_t v103 = *((void *)v102 + 1);
        if (v103) {
          *(void *)(v103 + 16) = *((void *)v102 + 2);
        }
      }
      *(void *)int v102 = v41;
      if (v41)
      {
        unint64_t v104 = (void *)(v41 + 8);
        uint64_t v105 = *(void *)(v41 + 8);
        *((void *)v102 + 1) = v105;
        if (v105) {
          *(void *)(v105 + 16) = v102 + 8;
        }
        *((void *)v102 + 2) = v104;
        void *v104 = v102;
      }
      if (v74) {
        llvm::Instruction::dropPoisonGeneratingFlags(v34);
      }
      int v106 = v538;
      if (v538[1]) {
        goto LABEL_136;
      }
      unsigned int v107 = a6[2];
      if (v107 < a6[3])
      {
        uint64_t v108 = (llvm::ValueHandleBase *)(*(void *)a6 + 24 * v107);
        *(void *)uint64_t v108 = 6;
        *((void *)v108 + 1) = 0;
        *((void *)v108 + 2) = v106;
        if (v106 != (uint64_t ***)-8192 && v106 != (uint64_t ***)-4096 && v106)
        {
          llvm::ValueHandleBase::AddToUseList(v108);
          unsigned int v107 = a6[2];
        }
        a6[2] = v107 + 1;
LABEL_136:
        if (!v41) {
          goto LABEL_151;
        }
        goto LABEL_137;
      }
      sub_1CC9E6F68(a6, (uint64_t *)&v538);
      if (!v41)
      {
LABEL_151:
        int v521 = 1;
        break;
      }
LABEL_137:
      int v521 = 1;
      unint64_t v25 = v41;
      if (*(unsigned __int8 *)(v41 + 16) < 0x1Cu) {
        goto LABEL_346;
      }
    }
    char v112 = v522;
    int v113 = *((unsigned __int8 *)v522 + 16);
    if (v522 && v113 == 81)
    {
      v528[0] = (uint64_t ***)v522;
      uint64_t v114 = (char *)v522 - 64;
      int v511 = *((_WORD *)v522 + 9) & 0x3F;
      if (*((void *)v522 - 8) == v25)
      {
        uint64_t v116 = 0;
        uint64_t v115 = *((_WORD *)v522 + 9) & 0x3F;
      }
      else
      {
        uint64_t v115 = dword_1CFB32ED4[*((_WORD *)v522 + 9) & 0x3F];
        uint64_t v116 = 1;
      }
      int v127 = *((_DWORD *)a4 + 4);
      if (!v127) {
        goto LABEL_177;
      }
      uint64_t v128 = *((void *)v522 + 5);
      uint64_t v129 = *a4;
      unsigned int v130 = v127 - 1;
      uint64_t v131 = ((v128 >> 4) ^ (v128 >> 9)) & (v127 - 1);
      uint64_t v132 = *(void *)(*a4 + 16 * v131);
      if (v128 == v132)
      {
LABEL_176:
        int v135 = *(const llvm::Loop **)(v129 + 16 * v131 + 8);
      }
      else
      {
        int v133 = 1;
        while (v132 != -4096)
        {
          int v134 = v131 + v133++;
          uint64_t v131 = v134 & v130;
          uint64_t v132 = *(void *)(v129 + 16 * v131);
          if (v128 == v132) {
            goto LABEL_176;
          }
        }
LABEL_177:
        int v135 = 0;
      }
      SCEVAtScope = llvm::ScalarEvolution::getSCEVAtScope((llvm::ScalarEvolution *)a2, *(llvm::Value **)&v114[32 * v116], v135);
      v515 = llvm::ScalarEvolution::getSCEVAtScope((llvm::ScalarEvolution *)a2, *(llvm::Value **)&v114[32 * (v116 ^ 1)], v135);
      uint64_t v137 = (const llvm::Value **)v540;
      v538 = (uint64_t ***)v540;
      uint64_t v539 = 0x400000000;
      uint64_t v138 = *((void *)v112 + 1);
      if (v138)
      {
        unsigned int v139 = 0;
        do
        {
          if (v139 >= HIDWORD(v539)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v538[v139] = *(uint64_t ***)(v138 + 24);
          unsigned int v139 = v539 + 1;
          LODWORD(v539) = v539 + 1;
          uint64_t v138 = *(void *)(v138 + 8);
        }
        while (v138);
        uint64_t v137 = (const llvm::Value **)v538;
      }
      else
      {
        unsigned int v139 = 0;
      }
      uint64_t v140 = sub_1CD23D2E4(v137, v139, a3);
      unsigned __int16 v141 = llvm::ScalarEvolution::evaluatePredicateAt((llvm::ScalarEvolution *)a2, v115, SCEVAtScope, v515, (uint64_t)v140);
      if (v141 >= 0x100u)
      {
        Bool = (llvm::Value *)llvm::ConstantInt::getBool(**(llvm::ConstantInt ***)v112, (llvm::LLVMContext *)(v141 != 0), v142);
        int v521 = 1;
        llvm::Value::doRAUW(v112, Bool, (llvm::Value *)1);
        sub_1CD23D4E0((uint64_t)a6, v528);
      }
      else
      {
        unint64_t v143 = *((_WORD *)v112 + 9) & 0x3F;
        if (*((void *)v112 - 8) == v25)
        {
          uint64_t v144 = 0;
        }
        else
        {
          unint64_t v143 = dword_1CFB32ED4[v143];
          uint64_t v144 = 1;
        }
        int v204 = *((_DWORD *)a4 + 4);
        v510 = v112;
        if (!v204) {
          goto LABEL_258;
        }
        uint64_t v205 = *((void *)v112 + 5);
        uint64_t v206 = *a4;
        unsigned int v207 = v204 - 1;
        uint64_t v208 = ((v205 >> 4) ^ (v205 >> 9)) & (v204 - 1);
        uint64_t v209 = *(void *)(*a4 + 16 * v208);
        if (v205 == v209)
        {
LABEL_257:
          uint64_t v212 = *(const llvm::Loop **)(v206 + 16 * v208 + 8);
        }
        else
        {
          int v210 = 1;
          while (v209 != -4096)
          {
            int v211 = v208 + v210++;
            uint64_t v208 = v211 & v207;
            uint64_t v209 = *(void *)(v206 + 16 * v208);
            if (v205 == v209) {
              goto LABEL_257;
            }
          }
LABEL_258:
          uint64_t v212 = 0;
        }
        int v213 = (llvm::Value **)&v114[32 * v144];
        uint64_t v214 = llvm::ScalarEvolution::getSCEVAtScope((llvm::ScalarEvolution *)a2, *v213, v212);
        v534 = v214;
        uint64_t v215 = (llvm::Value **)&v114[32 * (v144 ^ 1)];
        v216 = llvm::ScalarEvolution::getSCEVAtScope((llvm::ScalarEvolution *)a2, *v215, v212);
        v529 = v216;
        if (*(unsigned char *)(v25 + 16) == 83)
        {
          llvm::ScalarEvolution::getLoopInvariantPredicate((llvm::ScalarEvolution *)a2, v143, v214, v216, v20, (uint64_t)&v530);
          if ((_BYTE)v533)
          {
            v528[2] = v532;
            v528[3] = v531;
            unint64_t v541 = 1;
            for (uint64_t i = 8; i != 72; i += 16)
              *(unint64_t *)((char *)&v541 + i) = -4096;
            v418 = *v213;
            sub_1CD68C958(&v541, (uint64_t *)&v534)[1] = v418;
            v419 = *v215;
            sub_1CD68C958(&v541, (uint64_t *)&v529)[1] = v419;
            llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor();
          }
        }
        a6 = v519;
        if ((v511 - 38) <= 3)
        {
          uint64_t RangeRef = llvm::ScalarEvolution::getRangeRef(a2, (uint64_t)SCEVAtScope, 1, 0);
          llvm::ConstantRange::getSignedMin(RangeRef, (uint64_t)&v541);
          unsigned int v218 = v542 - 1;
          uint64_t v219 = &v541;
          if (v542 >= 0x41) {
            uint64_t v219 = (unint64_t *)(v541 + 8 * (v218 >> 6));
          }
          unint64_t v220 = *v219;
          if (v542 >= 0x41 && v541) {
            MEMORY[0x1D25D9CB0]();
          }
          if (((v220 >> v218) & 1) == 0)
          {
            uint64_t v221 = llvm::ScalarEvolution::getRangeRef(a2, (uint64_t)v515, 1, 0);
            llvm::ConstantRange::getSignedMin(v221, (uint64_t)&v541);
            unsigned int v222 = v542 - 1;
            uint64_t v223 = &v541;
            if (v542 >= 0x41) {
              uint64_t v223 = (unint64_t *)(v541 + 8 * (v222 >> 6));
            }
            unint64_t v224 = *v223;
            if (v542 >= 0x41 && v541) {
              MEMORY[0x1D25D9CB0]();
            }
            if (((v224 >> v222) & 1) == 0)
            {
              *((_WORD *)v510 + 9) = *((_WORD *)v510 + 9) & 0xFFC0 | (v511 - 4);
              int v521 = 1;
            }
          }
        }
      }
      if (v538 != v540) {
        free(v538);
      }
LABEL_344:
      uint64_t v269 = (llvm::Value *)v25;
      uint64_t v270 = (uint64_t)v20;
LABEL_345:
      sub_1CD23CFE8((uint64_t)v269, v270, (llvm::SmallPtrSetImplBase *)&v523, (uint64_t)&v535);
      goto LABEL_346;
    }
    if (!v522 || (v113 - 59) < 0xFFFFFFEE) {
      goto LABEL_681;
    }
    if ((v113 - 50) < 2)
    {
      uint64_t v117 = *((void *)v522 - 8);
      if (v113 != 51 && v117 != v25) {
        goto LABEL_344;
      }
      uint64_t v119 = *(void *)(a2 + 104);
      unsigned int v120 = *(_DWORD *)(a2 + 120);
      if (v120)
      {
        unsigned int v121 = v120 - 1;
        unsigned int v122 = (v120 - 1) & ((v117 >> 4) ^ (v117 >> 9));
        uint64_t v123 = v119 + 48 * v122;
        uint64_t v124 = *(void *)(v123 + 24);
        if (v124 != v117)
        {
          int v125 = 1;
          while (v124 != -4096)
          {
            unsigned int v126 = v122 + v125++;
            unsigned int v122 = v126 & v121;
            uint64_t v123 = v119 + 48 * (v126 & v121);
            uint64_t v124 = *(void *)(v123 + 24);
            if (v124 == v117) {
              goto LABEL_349;
            }
          }
          goto LABEL_348;
        }
      }
      else
      {
LABEL_348:
        uint64_t v123 = v119 + 48 * v120;
      }
LABEL_349:
      unint64_t v271 = *((void *)v522 - 4);
      if (v123 == v119 + 48 * v120 || (char v272 = *(const llvm::SCEV **)(v123 + 40)) == 0) {
        char v272 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, *((void *)v522 - 8));
      }
      int v273 = *((_DWORD *)a4 + 4);
      if (v273)
      {
        uint64_t v274 = *((void *)v112 + 5);
        uint64_t v275 = *a4;
        unsigned int v276 = v273 - 1;
        uint64_t v277 = ((v274 >> 4) ^ (v274 >> 9)) & (v273 - 1);
        uint64_t v278 = *(void *)(*a4 + 16 * v277);
        if (v274 != v278)
        {
          int v279 = 1;
          while (v278 != -4096)
          {
            int v280 = v277 + v279++;
            uint64_t v277 = v280 & v276;
            uint64_t v278 = *(void *)(v275 + 16 * v277);
            if (v274 == v278) {
              goto LABEL_357;
            }
          }
          goto LABEL_378;
        }
LABEL_357:
        unint64_t v281 = *(const llvm::Loop **)(v275 + 16 * v277 + 8);
      }
      else
      {
LABEL_378:
        unint64_t v281 = 0;
      }
      unint64_t v303 = llvm::ScalarEvolution::getSCEVAtScope((llvm::ScalarEvolution *)a2, v272, v281);
      v304 = v303;
      if (v113 == 51)
      {
        v516 = v281;
        unint64_t v305 = v271;
        uint64_t v306 = v112;
        uint64_t v307 = llvm::ScalarEvolution::getRangeRef(a2, (uint64_t)v303, 1, 0);
        llvm::ConstantRange::getSignedMin(v307, (uint64_t)&v541);
        unsigned int v308 = v542 - 1;
        uint64_t v309 = &v541;
        if (v542 >= 0x41) {
          uint64_t v309 = (unint64_t *)(v541 + 8 * (v308 >> 6));
        }
        unint64_t v310 = *v309;
        if (v542 >= 0x41 && v541) {
          MEMORY[0x1D25D9CB0]();
        }
        unint64_t v311 = v310 >> v308;
        a6 = v519;
        char v112 = v306;
        unint64_t v271 = v305;
        unint64_t v281 = v516;
        if (v311) {
          goto LABEL_344;
        }
      }
      uint64_t v312 = *(void *)(a2 + 104);
      unsigned int v313 = *(_DWORD *)(a2 + 120);
      if (v313)
      {
        unsigned int v314 = (v313 - 1) & ((v271 >> 4) ^ (v271 >> 9));
        uint64_t v315 = v312 + 48 * v314;
        uint64_t v316 = *(void *)(v315 + 24);
        if (v316 != v271)
        {
          int v317 = 1;
          while (v316 != -4096)
          {
            unsigned int v318 = v314 + v317++;
            unsigned int v314 = v318 & (v313 - 1);
            uint64_t v315 = v312 + 48 * v314;
            uint64_t v316 = *(void *)(v315 + 24);
            if (v316 == v271) {
              goto LABEL_415;
            }
          }
          goto LABEL_414;
        }
      }
      else
      {
LABEL_414:
        uint64_t v315 = v312 + 48 * v313;
      }
LABEL_415:
      if (v315 == v312 + 48 * v313 || (int64x2_t v338 = *(const llvm::SCEV **)(v315 + 40)) == 0) {
        int64x2_t v338 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, v271);
      }
      v339 = llvm::ScalarEvolution::getSCEVAtScope((llvm::ScalarEvolution *)a2, v338, v281);
      if (v117 == v25)
      {
        if (v113 == 51) {
          unsigned int v340 = 40;
        }
        else {
          unsigned int v340 = 36;
        }
        if (llvm::ScalarEvolution::isKnownPredicate((llvm::ScalarEvolution *)a2, v340, v304, v339))
        {
          unint64_t v541 = (unint64_t)v112;
          int v521 = 1;
          llvm::Value::doRAUW(v112, *((llvm::Value **)v112 - 8), (llvm::Value *)1);
          v480 = (uint64_t ****)&v541;
        }
        else
        {
          Constant = (const llvm::APInt *)llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)a2, *(llvm::Type **)v112, 1uLL, 0);
          MinusSCEV = (const llvm::SCEV *)llvm::ScalarEvolution::getMinusSCEV((llvm::ScalarEvolution *)a2, v304, Constant, 0, 0);
          if (!llvm::ScalarEvolution::isKnownPredicate((llvm::ScalarEvolution *)a2, v340, MinusSCEV, v339))goto LABEL_424; {
          v538 = (uint64_t ***)v112;
          }
          v481 = *(llvm::ConstantInt ***)v112;
          v482 = (void *)*((void *)v112 - 8);
          uint64_t v483 = *((void *)v112 - 4);
          v484 = operator new(0x80uLL);
          v485 = (llvm::Value *)(v484 + 16);
          v484[21] = v484[21] & 0x38000000 | 2;
          *(void *)v484 = 0;
          *((void *)v484 + 1) = 0;
          *((void *)v484 + 2) = 0;
          *((void *)v484 + 3) = v484 + 16;
          *((void *)v484 + 4) = 0;
          *((void *)v484 + 5) = 0;
          *((void *)v484 + 6) = 0;
          *((void *)v484 + 7) = v484 + 16;
          __int16 v545 = 257;
          v486 = (void **)*v482;
          uint64_t v487 = **(void **)*v482 + 1888;
          if (*v482 && (v486[1] & 0xFE) == 0x12)
          {
            v503 = (uint64_t **)(**(void **)*v482 + 1888);
            v504 = (llvm::Type *)*((unsigned int *)v486 + 8);
            if (*((_DWORD *)v486 + 2) == 19) {
              llvm::ScalableVectorType::get(v503, v504);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v503, v504);
            }
            uint64_t v487 = v505;
            a6 = v519;
          }
          llvm::CmpInst::CmpInst(v485, v487, 53, 32, (uint64_t)v482, v483, (const char **)&v541, (uint64_t)v112, 0);
          v488 = llvm::ConstantInt::get((llvm::ConstantInt *)v481, 0, 0);
          unint64_t v541 = (unint64_t)"iv.rem";
          __int16 v545 = 259;
          v489 = sub_1CC199EFC((uint64_t)v485, v488, (uint64_t)v482, (const char **)&v541, (uint64_t)v112, 0);
LABEL_644:
          int v521 = 1;
          llvm::Value::doRAUW(v112, v489, (llvm::Value *)1);
          v480 = &v538;
        }
        sub_1CD76B968((uint64_t)a6, v480);
        goto LABEL_344;
      }
LABEL_424:
      if (v113 != 51) {
        goto LABEL_344;
      }
      uint64_t v343 = llvm::ScalarEvolution::getRangeRef(a2, (uint64_t)v339, 1, 0);
      llvm::ConstantRange::getSignedMin(v343, (uint64_t)&v541);
      unsigned int v344 = v542 - 1;
      v345 = &v541;
      if (v542 >= 0x41) {
        v345 = (unint64_t *)(v541 + 8 * (v344 >> 6));
      }
      unint64_t v346 = *v345;
      if (v542 >= 0x41 && v541) {
        MEMORY[0x1D25D9CB0]();
      }
      if ((v346 >> v344)) {
        goto LABEL_344;
      }
      v538 = (uint64_t ***)v112;
      if ((*((unsigned char *)v112 + 23) & 0x10) != 0)
      {
        uint64_t v347 = ***(void ***)v112;
        uint64_t v348 = *(void *)(v347 + 152);
        uint64_t v349 = *(unsigned int *)(v347 + 168);
        if (!v349) {
          goto LABEL_641;
        }
        LODWORD(v350) = (v349 - 1) & ((v112 >> 4) ^ (v112 >> 9));
        uint64_t v351 = (llvm::Value **)(v348 + 16 * v350);
        v352 = *v351;
        if (*v351 != v112)
        {
          int v353 = 1;
          while (v352 != (llvm::Value *)-4096)
          {
            int v354 = v350 + v353++;
            uint64_t v350 = v354 & (v349 - 1);
            v352 = *(llvm::Value **)(v348 + 16 * v350);
            if (v352 == v112)
            {
              uint64_t v351 = (llvm::Value **)(v348 + 16 * v350);
              goto LABEL_642;
            }
          }
LABEL_641:
          uint64_t v351 = (llvm::Value **)(v348 + 16 * v349);
        }
LABEL_642:
        v495 = v351[1];
        uint64_t v498 = *(void *)v495;
        v497 = (char *)v495 + 16;
        uint64_t v496 = v498;
      }
      else
      {
        uint64_t v496 = 0;
        v497 = &byte_1CFBCE98E;
      }
      v499 = (void *)*((void *)v112 - 8);
      uint64_t v500 = *((void *)v112 - 4);
      __int16 v545 = 773;
      unint64_t v541 = (unint64_t)v497;
      uint64_t v542 = v496;
      v543 = ".urem";
      v489 = llvm::BinaryOperator::Create(22, v499, v500, (const char **)&v541, (uint64_t)v112);
      goto LABEL_644;
    }
    if (v113 != 48)
    {
LABEL_681:
      if (sub_1CC062BC4((uint64_t)v522))
      {
        uint64_t v155 = *((_DWORD *)v112 + 5) & 0x7FFFFFF;
        unint64_t v156 = *((void *)v112 - 4 * v155);
        uint64_t v157 = *(void *)(a2 + 104);
        unsigned int v158 = *(_DWORD *)(a2 + 120);
        if (!v158) {
          goto LABEL_203;
        }
        unsigned int v159 = v158 - 1;
        unsigned int v160 = ((v156 >> 4) ^ (v156 >> 9)) & (v158 - 1);
        uint64_t v161 = v157 + 48 * v160;
        uint64_t v162 = *(void *)(v161 + 24);
        if (v162 != v156)
        {
          int v163 = 1;
          while (v162 != -4096)
          {
            unsigned int v164 = v160 + v163++;
            unsigned int v160 = v164 & v159;
            uint64_t v161 = v157 + 48 * (v164 & v159);
            uint64_t v162 = *(void *)(v161 + 24);
            if (v162 == v156) {
              goto LABEL_204;
            }
          }
LABEL_203:
          uint64_t v161 = v157 + 48 * v158;
        }
LABEL_204:
        if (v161 == v157 + 48 * v158 || (uint64_t v165 = *(llvm::detail::IEEEFloat ***)(v161 + 40)) == 0)
        {
          uint64_t v165 = (llvm::detail::IEEEFloat **)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, v156);
          uint64_t v157 = *(void *)(a2 + 104);
          unsigned int v158 = *(_DWORD *)(a2 + 120);
          uint64_t v155 = *((_DWORD *)v112 + 5) & 0x7FFFFFF;
        }
        unint64_t v166 = ((void *)v112 - 4 * v155)[4];
        uint64_t v167 = v157 + 48 * v158;
        if (v158)
        {
          unsigned int v168 = v158 - 1;
          unsigned int v169 = ((v166 >> 4) ^ (v166 >> 9)) & v168;
          uint64_t v170 = v157 + 48 * v169;
          uint64_t v171 = *(void *)(v170 + 24);
          if (v171 != v166)
          {
            int v172 = 1;
            while (v171 != -4096)
            {
              unsigned int v173 = v169 + v172++;
              unsigned int v169 = v173 & v168;
              uint64_t v170 = v157 + 48 * v169;
              uint64_t v171 = *(void *)(v170 + 24);
              if (v171 == v166) {
                goto LABEL_214;
              }
            }
            goto LABEL_213;
          }
        }
        else
        {
LABEL_213:
          uint64_t v170 = v167;
        }
LABEL_214:
        if (v170 == v167 || (uint64_t v174 = *(llvm::detail::IEEEFloat ***)(v170 + 40)) == 0) {
          uint64_t v174 = (llvm::detail::IEEEFloat **)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, v166);
        }
        int v175 = 13;
        unsigned int v176 = *(_DWORD *)(*((void *)v112 - 4) + 36) - 262;
        if (((1 << (*(unsigned char *)(*((void *)v112 - 4) + 36) - 6)) & 0xC000000003) == 0)
        {
          if (((1 << v176) & 0x6000000600000) != 0) {
            int v175 = 15;
          }
          else {
            int v175 = 17;
          }
        }
        if (llvm::ScalarEvolution::willNotOverflow((llvm::ScalarEvolution *)a2, v175, (v176 < 0x17) & (0x610003u >> v176), v165, v174))
        {
          char v177 = 13;
          if (((1 << (*(unsigned char *)(*((void *)v112 - 4) + 36) - 6)) & 0xC000000003) == 0)
          {
            if (((1 << (*(unsigned char *)(*((void *)v112 - 4) + 36) - 6)) & 0x6000000600000) != 0) {
              char v177 = 15;
            }
            else {
              char v177 = 17;
            }
          }
          uint64_t v178 = (char *)v112 - 32 * (*((_DWORD *)v112 + 5) & 0x7FFFFFF);
          uint64_t v179 = *(void **)v178;
          uint64_t v180 = *((void *)v178 + 4);
          __int16 v545 = 257;
          uint64_t v181 = llvm::BinaryOperator::Create(v177, v179, v180, (const char **)&v541, (uint64_t)v112);
          int v183 = v181;
          unsigned int v184 = *(_DWORD *)(*((void *)v112 - 4) + 36) - 262;
          if (v184 <= 0x16 && ((1 << v184) & 0x610003) != 0) {
            char v185 = 4;
          }
          else {
            char v185 = 2;
          }
          *((unsigned char *)v181 + 17) |= v185;
          unint64_t v541 = (unint64_t)&v543;
          uint64_t v542 = 0x400000000;
          uint64_t v186 = *((void *)v112 + 1);
          if (!v186) {
            goto LABEL_340;
          }
          int v187 = 0;
          do
          {
            uint64_t v188 = *(void *)(v186 + 24);
            if (v188 && *(unsigned char *)(v188 + 16) == 92)
            {
              uint64_t v189 = v183;
              if (**(_DWORD **)(v188 + 64) == 1)
              {
                uint64_t v190 = **(uint64_t ***)v112;
                uint64_t v191 = *v190;
                uint64_t v189 = *(llvm::Value **)(*v190 + 1568);
                if (!v189)
                {
                  uint64_t v192 = *(llvm::ConstantInt **)(v191 + 1888);
                  unsigned int v193 = *(_DWORD *)(v191 + 1896);
                  LODWORD(v539) = v193 >> 8;
                  if (v193 >> 8 > 0x40) {
                    operator new[]();
                  }
                  v538 = 0;
                  uint64_t v189 = (llvm::Value *)llvm::ConstantInt::get(v192, (llvm::LLVMContext *)&v538, v182);
                  if (v539 >= 0x41 && v538) {
                    MEMORY[0x1D25D9CB0](v538, 0x1000C8000313F17);
                  }
                  *(void *)(v191 + 1568) = v189;
                }
              }
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v188, v189, (llvm::Value *)1);
              if (v542 >= (unint64_t)HIDWORD(v542)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              a6 = v519;
              *(void *)(v541 + 8 * v542) = v188;
              int v187 = v542 + 1;
              LODWORD(v542) = v542 + 1;
            }
            uint64_t v186 = *(void *)(v186 + 8);
          }
          while (v186);
          if (v187) {
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
          }
          if (!*((void *)v112 + 1)) {
LABEL_340:
          }
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
          if ((const char **)v541 != &v543) {
            free((void *)v541);
          }
          goto LABEL_343;
        }
      }
      if (sub_1CCD30E34((uint64_t)v112))
      {
        v538 = (uint64_t ***)v112;
        uint64_t v194 = *((_DWORD *)v112 + 5) & 0x7FFFFFF;
        unint64_t v195 = *((void *)v112 - 4 * v194);
        uint64_t v196 = *(void *)(a2 + 104);
        unsigned int v197 = *(_DWORD *)(a2 + 120);
        if (!v197) {
          goto LABEL_277;
        }
        unsigned int v198 = v197 - 1;
        unsigned int v199 = ((v195 >> 4) ^ (v195 >> 9)) & (v197 - 1);
        uint64_t v200 = v196 + 48 * v199;
        uint64_t v201 = *(void *)(v200 + 24);
        if (v201 != v195)
        {
          int v202 = 1;
          while (v201 != -4096)
          {
            unsigned int v203 = v199 + v202++;
            unsigned int v199 = v203 & v198;
            uint64_t v200 = v196 + 48 * (v203 & v198);
            uint64_t v201 = *(void *)(v200 + 24);
            if (v201 == v195) {
              goto LABEL_278;
            }
          }
LABEL_277:
          uint64_t v200 = v196 + 48 * v197;
        }
LABEL_278:
        if (v200 == v196 + 48 * v197 || (uint64_t v225 = *(llvm::detail::IEEEFloat ***)(v200 + 40)) == 0)
        {
          uint64_t v225 = (llvm::detail::IEEEFloat **)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, v195);
          uint64_t v196 = *(void *)(a2 + 104);
          unsigned int v197 = *(_DWORD *)(a2 + 120);
          uint64_t v194 = *((_DWORD *)v112 + 5) & 0x7FFFFFF;
        }
        unint64_t v226 = ((void *)v112 - 4 * v194)[4];
        uint64_t v227 = v196 + 48 * v197;
        if (v197)
        {
          unsigned int v228 = v197 - 1;
          unsigned int v229 = ((v226 >> 4) ^ (v226 >> 9)) & v228;
          uint64_t v230 = v196 + 48 * v229;
          uint64_t v231 = *(void *)(v230 + 24);
          if (v231 != v226)
          {
            int v232 = 1;
            while (v231 != -4096)
            {
              unsigned int v233 = v229 + v232++;
              unsigned int v229 = v233 & v228;
              uint64_t v230 = v196 + 48 * v229;
              uint64_t v231 = *(void *)(v230 + 24);
              if (v231 == v226) {
                goto LABEL_288;
              }
            }
            goto LABEL_287;
          }
        }
        else
        {
LABEL_287:
          uint64_t v230 = v227;
        }
LABEL_288:
        if (v230 == v227 || (uint64_t v234 = *(llvm::detail::IEEEFloat ***)(v230 + 40)) == 0) {
          uint64_t v234 = (llvm::detail::IEEEFloat **)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, v226);
        }
        int v235 = 13;
        unsigned int v236 = *(_DWORD *)(*((void *)v112 - 4) + 36) - 262;
        if (((1 << (*(unsigned char *)(*((void *)v112 - 4) + 36) - 6)) & 0xC000000003) == 0)
        {
          if (((1 << v236) & 0x6000000600000) != 0) {
            int v235 = 15;
          }
          else {
            int v235 = 17;
          }
        }
        if (llvm::ScalarEvolution::willNotOverflow((llvm::ScalarEvolution *)a2, v235, (v236 < 0x17) & (0x610003u >> v236), v225, v234))
        {
          char v420 = 13;
          if (((1 << (*(unsigned char *)(*((void *)v112 - 4) + 36) - 6)) & 0xC000000003) == 0)
          {
            if (((1 << (*(unsigned char *)(*((void *)v112 - 4) + 36) - 6)) & 0x6000000600000) != 0) {
              char v420 = 15;
            }
            else {
              char v420 = 17;
            }
          }
          int v421 = *((_DWORD *)v112 + 5);
          if ((v421 & 0x10000000) != 0)
          {
            uint64_t v422 = ***(void ***)v112;
            uint64_t v423 = *(void *)(v422 + 152);
            uint64_t v424 = *(unsigned int *)(v422 + 168);
            if (v424)
            {
              LODWORD(v425) = (v424 - 1) & ((v112 >> 4) ^ (v112 >> 9));
              v426 = (llvm::Value **)(v423 + 16 * v425);
              v427 = *v426;
              if (*v426 != v112)
              {
                int v428 = 1;
                do
                {
                  if (v427 == (llvm::Value *)-4096) {
                    goto LABEL_618;
                  }
                  int v429 = v425 + v428++;
                  uint64_t v425 = v429 & (v424 - 1);
                  v427 = *(llvm::Value **)(v423 + 16 * v425);
                }
                while (v427 != v112);
                v426 = (llvm::Value **)(v423 + 16 * v425);
              }
            }
            else
            {
LABEL_618:
              v426 = (llvm::Value **)(v423 + 16 * v424);
            }
            v467 = v426[1];
            uint64_t v470 = *(void *)v467;
            v469 = (char *)v467 + 16;
            uint64_t v468 = v470;
          }
          else
          {
            uint64_t v468 = 0;
            v469 = &byte_1CFBCE98E;
          }
          v471 = (char *)v112 - 32 * (v421 & 0x7FFFFFF);
          v472 = *(void **)v471;
          uint64_t v473 = *((void *)v471 + 4);
          __int16 v545 = 261;
          unint64_t v541 = (unint64_t)v469;
          uint64_t v542 = v468;
          v474 = llvm::BinaryOperator::Create(v420, v472, v473, (const char **)&v541, (uint64_t)v112);
          unsigned int v475 = *(_DWORD *)(*((void *)v112 - 4) + 36) - 262;
          BOOL v49 = v475 > 0x16;
          int v476 = (1 << v475) & 0x610003;
          if (v49 || v476 == 0) {
            char v478 = 2;
          }
          else {
            char v478 = 4;
          }
          *((unsigned char *)v474 + 17) |= v478;
          int v521 = 1;
          llvm::Value::doRAUW(v112, v474, (llvm::Value *)1);
          sub_1CD76B968((uint64_t)a6, &v538);
          goto LABEL_344;
        }
      }
      if (v112 && *((unsigned char *)v112 + 16) == 66)
      {
        v530 = (uint64_t ***)v112;
        uint64_t v237 = (uint64_t ***)*((void *)v112 - 4);
        uint64_t v238 = *(void *)(a2 + 104);
        unsigned int v239 = *(_DWORD *)(a2 + 120);
        if (!v239) {
          goto LABEL_303;
        }
        unsigned int v240 = v239 - 1;
        unsigned int v241 = (v239 - 1) & ((v237 >> 4) ^ (v237 >> 9));
        uint64_t v242 = v238 + 48 * v241;
        int v243 = *(uint64_t ****)(v242 + 24);
        if (v243 != v237)
        {
          int v244 = 1;
          while (v243 != (uint64_t ***)-4096)
          {
            unsigned int v245 = v241 + v244++;
            unsigned int v241 = v245 & v240;
            uint64_t v242 = v238 + 48 * (v245 & v240);
            int v243 = *(uint64_t ****)(v242 + 24);
            if (v243 == v237) {
              goto LABEL_304;
            }
          }
LABEL_303:
          uint64_t v242 = v238 + 48 * v239;
        }
LABEL_304:
        v512 = *v237;
        if (v242 == v238 + 48 * v239 || (uint64_t v246 = *(void *)(v242 + 40)) == 0)
        {
          uint64_t v246 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, (unint64_t)v237);
          uint64_t v238 = *(void *)(a2 + 104);
          unsigned int v239 = *(_DWORD *)(a2 + 120);
        }
        uint64_t v247 = v238 + 48 * v239;
        if (v239)
        {
          unsigned int v248 = v239 - 1;
          unsigned int v249 = v248 & ((v112 >> 4) ^ (v112 >> 9));
          uint64_t v250 = v238 + 48 * v249;
          unsigned int v251 = *(llvm::Value **)(v250 + 24);
          if (v251 != v112)
          {
            int v252 = 1;
            while (v251 != (llvm::Value *)-4096)
            {
              unsigned int v253 = v249 + v252++;
              unsigned int v249 = v253 & v248;
              uint64_t v250 = v238 + 48 * v249;
              unsigned int v251 = *(llvm::Value **)(v250 + 24);
              if (v251 == v112) {
                goto LABEL_314;
              }
            }
            goto LABEL_313;
          }
        }
        else
        {
LABEL_313:
          uint64_t v250 = v247;
        }
LABEL_314:
        if (v250 == v247 || (int v254 = *(llvm::detail::IEEEFloat ***)(v250 + 40)) == 0) {
          int v254 = (llvm::detail::IEEEFloat **)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, (unint64_t)v112);
        }
        unint64_t SignExtendExpr = llvm::ScalarEvolution::getSignExtendExpr((llvm::ScalarEvolution *)a2, v254, v512, 0);
        unint64_t ZeroExtendExpr = llvm::ScalarEvolution::getZeroExtendExpr((llvm::ScalarEvolution *)a2, v254, v512, 0);
        if (v246 == SignExtendExpr || v246 == ZeroExtendExpr)
        {
          unint64_t v541 = (unint64_t)&v543;
          uint64_t v542 = 0x400000000;
          uint64_t v259 = *((void *)v112 + 1);
          if (v259)
          {
            if (*(unsigned __int8 *)(*(void *)(v259 + 24) + 16) >= 0x1Cu) {
              llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry();
            }
            char v260 = 0;
          }
          else
          {
            v479 = llvm::UndefValue::get(*(llvm::UndefValue **)v112, v257);
            char v260 = 1;
            llvm::Value::doRAUW(v112, v479, (llvm::Value *)1);
            sub_1CD76B968((uint64_t)a6, &v530);
          }
          if ((const char **)v541 != &v543) {
            free((void *)v541);
          }
          if (v260) {
            goto LABEL_344;
          }
        }
      }
      unint64_t v541 = (unint64_t)v112;
      if ((*(_DWORD *)(*(void *)v112 + 8) & 0xFD) != 0xD || *(void *)v112 != *(void *)v25) {
        goto LABEL_453;
      }
      uint64_t v261 = *(void *)(a2 + 104);
      unsigned int v262 = *(_DWORD *)(a2 + 120);
      if (v262)
      {
        unsigned int v263 = v262 - 1;
        unsigned int v264 = (v262 - 1) & ((v112 >> 4) ^ (v112 >> 9));
        uint64_t v265 = v261 + 48 * v264;
        uint64_t v266 = *(llvm::Value **)(v265 + 24);
        if (v266 != v112)
        {
          int v267 = 1;
          while (v266 != (llvm::Value *)-4096)
          {
            unsigned int v268 = v264 + v267++;
            unsigned int v264 = v268 & v263;
            uint64_t v265 = v261 + 48 * (v268 & v263);
            uint64_t v266 = *(llvm::Value **)(v265 + 24);
            if (v266 == v112) {
              goto LABEL_439;
            }
          }
          goto LABEL_438;
        }
      }
      else
      {
LABEL_438:
        uint64_t v265 = v261 + 48 * v262;
      }
LABEL_439:
      if (v265 == v261 + 48 * v262 || (uint64_t v355 = *(void *)(v265 + 40)) == 0)
      {
        uint64_t v355 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, (unint64_t)v112);
        uint64_t v261 = *(void *)(a2 + 104);
        unsigned int v262 = *(_DWORD *)(a2 + 120);
      }
      uint64_t v356 = v261 + 48 * v262;
      if (v262)
      {
        unsigned int v357 = v262 - 1;
        unsigned int v358 = v357 & ((v25 >> 4) ^ (v25 >> 9));
        uint64_t v359 = v261 + 48 * v358;
        uint64_t v360 = *(void *)(v359 + 24);
        if (v360 != v25)
        {
          int v361 = 1;
          while (v360 != -4096)
          {
            unsigned int v362 = v358 + v361++;
            unsigned int v358 = v362 & v357;
            uint64_t v359 = v261 + 48 * v358;
            uint64_t v360 = *(void *)(v359 + 24);
            if (v360 == v25) {
              goto LABEL_449;
            }
          }
          goto LABEL_448;
        }
      }
      else
      {
LABEL_448:
        uint64_t v359 = v356;
      }
LABEL_449:
      if (v359 == v356 || (uint64_t v363 = *(void *)(v359 + 40)) == 0) {
        uint64_t v363 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, v25);
      }
      if (v355 != v363) {
        goto LABEL_453;
      }
      uint64_t v21 = (const llvm::APInt *)v541;
      if (*(unsigned char *)(v541 + 16) == 83)
      {
        if (!a3
          || !llvm::DominatorTree::dominates(a3, (const llvm::Value *)v25, (const llvm::Instruction *)v541))
        {
          goto LABEL_453;
        }
        uint64_t v21 = (const llvm::APInt *)v541;
      }
      if (*(unsigned __int8 *)(v25 + 16) >= 0x1Cu)
      {
        uint64_t v430 = *(void *)(v25 + 40);
        uint64_t v431 = *((void *)v21 + 5);
        if (v430 != v431)
        {
          int v432 = *((_DWORD *)a4 + 4);
          if (v432)
          {
            uint64_t v433 = *a4;
            unsigned int v434 = v432 - 1;
            LODWORD(v435) = v434 & ((v430 >> 4) ^ (v430 >> 9));
            v436 = (uint64_t *)(*a4 + 16 * v435);
            uint64_t v437 = *v436;
            if (v430 == *v436)
            {
              v440 = (void *)v436[1];
              if (v440) {
                goto LABEL_635;
              }
            }
            else
            {
              int v438 = 1;
              do
              {
                if (v437 == -4096) {
                  goto LABEL_536;
                }
                int v439 = v435 + v438++;
                uint64_t v435 = v439 & v434;
                uint64_t v437 = *(void *)(v433 + 16 * v435);
              }
              while (v430 != v437);
              v440 = *(void **)(v433 + 16 * v435 + 8);
              if (!v440) {
                goto LABEL_536;
              }
LABEL_635:
              uint64_t v490 = v434 & ((v431 >> 4) ^ (v431 >> 9));
              uint64_t v491 = *(void *)(v433 + 16 * v490);
              if (v431 == v491)
              {
LABEL_639:
                v494 = *(void **)(v433 + 16 * v490 + 8);
                goto LABEL_648;
              }
              int v492 = 1;
              while (v491 != -4096)
              {
                int v493 = v490 + v492++;
                uint64_t v490 = v493 & v434;
                uint64_t v491 = *(void *)(v433 + 16 * v490);
                if (v431 == v491) {
                  goto LABEL_639;
                }
              }
              v494 = 0;
LABEL_648:
              while (v494 != v440)
              {
                if (!v494) {
                  goto LABEL_453;
                }
                v494 = (void *)*v494;
              }
            }
          }
        }
      }
LABEL_536:
      llvm::Value::doRAUW(v21, (llvm::Value *)v25, (llvm::Value *)1);
      unsigned int v404 = a6[2];
      if (v404 >= a6[3])
      {
        sub_1CC9E6F68(a6, (uint64_t *)&v541);
      }
      else
      {
        unint64_t v405 = v541;
        v406 = (llvm::ValueHandleBase *)(*(void *)a6 + 24 * v404);
        *(void *)v406 = 6;
        *((void *)v406 + 1) = 0;
        *((void *)v406 + 2) = v405;
        if (v405 != -8192 && v405 != -4096 && v405)
        {
          llvm::ValueHandleBase::AddToUseList(v406);
          unsigned int v404 = a6[2];
        }
        a6[2] = v404 + 1;
      }
      goto LABEL_343;
    }
    unint64_t v146 = *((void *)v522 - 8);
    uint64_t v147 = *(void *)(a2 + 104);
    unsigned int v148 = *(_DWORD *)(a2 + 120);
    if (!v148) {
      goto LABEL_358;
    }
    unsigned int v149 = v148 - 1;
    unsigned int v150 = ((v146 >> 4) ^ (v146 >> 9)) & (v148 - 1);
    uint64_t v151 = v147 + 48 * v150;
    uint64_t v152 = *(void *)(v151 + 24);
    if (v152 != v146)
    {
      int v153 = 1;
      while (v152 != -4096)
      {
        unsigned int v154 = v150 + v153++;
        unsigned int v150 = v154 & v149;
        uint64_t v151 = v147 + 48 * (v154 & v149);
        uint64_t v152 = *(void *)(v151 + 24);
        if (v152 == v146) {
          goto LABEL_359;
        }
      }
LABEL_358:
      uint64_t v151 = v147 + 48 * v148;
    }
LABEL_359:
    if (v151 == v147 + 48 * v148 || (BOOL v282 = *(const llvm::SCEV **)(v151 + 40)) == 0)
    {
      BOOL v282 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, v146);
      uint64_t v147 = *(void *)(a2 + 104);
      unsigned int v148 = *(_DWORD *)(a2 + 120);
    }
    unint64_t v283 = *((void *)v112 - 4);
    uint64_t v284 = v147 + 48 * v148;
    if (v148)
    {
      unsigned int v285 = v148 - 1;
      unsigned int v286 = ((v283 >> 4) ^ (v283 >> 9)) & v285;
      uint64_t v287 = v147 + 48 * v286;
      uint64_t v288 = *(void *)(v287 + 24);
      if (v288 != v283)
      {
        int v289 = 1;
        while (v288 != -4096)
        {
          unsigned int v290 = v286 + v289++;
          unsigned int v286 = v290 & v285;
          uint64_t v287 = v147 + 48 * v286;
          uint64_t v288 = *(void *)(v287 + 24);
          if (v288 == v283) {
            goto LABEL_369;
          }
        }
        goto LABEL_368;
      }
    }
    else
    {
LABEL_368:
      uint64_t v287 = v284;
    }
LABEL_369:
    v291 = a4;
    if (v287 == v284 || (v292 = *(const llvm::SCEV **)(v287 + 40)) == 0)
    {
      uint64_t v293 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, v283);
      v291 = a4;
      v292 = (const llvm::SCEV *)v293;
    }
    int v294 = *((_DWORD *)v291 + 4);
    if (v294)
    {
      uint64_t v295 = *((void *)v112 + 5);
      uint64_t v296 = *v291;
      unsigned int v297 = v294 - 1;
      uint64_t v298 = ((v295 >> 4) ^ (v295 >> 9)) & (v294 - 1);
      uint64_t v299 = *(void *)(v296 + 16 * v298);
      if (v295 != v299)
      {
        int v300 = 1;
        while (v299 != -4096)
        {
          int v301 = v298 + v300++;
          uint64_t v298 = v301 & v297;
          uint64_t v299 = *(void *)(v296 + 16 * v298);
          if (v295 == v299) {
            goto LABEL_377;
          }
        }
        goto LABEL_392;
      }
LABEL_377:
      uint64_t v302 = *(const llvm::Loop **)(v296 + 16 * v298 + 8);
    }
    else
    {
LABEL_392:
      uint64_t v302 = 0;
    }
    uint64_t v319 = llvm::ScalarEvolution::getSCEVAtScope((llvm::ScalarEvolution *)a2, v282, v302);
    uint64_t v320 = llvm::ScalarEvolution::getSCEVAtScope((llvm::ScalarEvolution *)a2, v292, v302);
    uint64_t v321 = llvm::ScalarEvolution::getRangeRef(a2, (uint64_t)v319, 1, 0);
    llvm::ConstantRange::getSignedMin(v321, (uint64_t)&v541);
    unsigned int v322 = v542 - 1;
    __int16 v323 = &v541;
    if (v542 >= 0x41) {
      __int16 v323 = (unint64_t *)(v541 + 8 * (v322 >> 6));
    }
    unint64_t v324 = *v323;
    if (v542 >= 0x41 && v541 != 0) {
      MEMORY[0x1D25D9CB0]();
    }
    if (((v324 >> v322) & 1) == 0)
    {
      uint64_t v326 = llvm::ScalarEvolution::getRangeRef(a2, (uint64_t)v320, 1, 0);
      llvm::ConstantRange::getSignedMin(v326, (uint64_t)&v541);
      unsigned int v327 = v542 - 1;
      v328 = &v541;
      if (v542 >= 0x41) {
        v328 = (unint64_t *)(v541 + 8 * (v327 >> 6));
      }
      unint64_t v329 = *v328;
      if (v542 >= 0x41 && v541) {
        MEMORY[0x1D25D9CB0]();
      }
      if (((v329 >> v327) & 1) == 0)
      {
        if ((*((unsigned char *)v112 + 23) & 0x10) != 0)
        {
          uint64_t v330 = ***(void ***)v112;
          uint64_t v331 = *(void *)(v330 + 152);
          uint64_t v332 = *(unsigned int *)(v330 + 168);
          if (!v332) {
            goto LABEL_592;
          }
          LODWORD(v333) = (v332 - 1) & ((v112 >> 4) ^ (v112 >> 9));
          uint64_t v334 = (llvm::Value **)(v331 + 16 * v333);
          uint64_t v335 = *v334;
          if (*v334 != v112)
          {
            int v336 = 1;
            while (v335 != (llvm::Value *)-4096)
            {
              int v337 = v333 + v336++;
              uint64_t v333 = v337 & (v332 - 1);
              uint64_t v335 = *(llvm::Value **)(v331 + 16 * v333);
              if (v335 == v112)
              {
                uint64_t v334 = (llvm::Value **)(v331 + 16 * v333);
                goto LABEL_593;
              }
            }
LABEL_592:
            uint64_t v334 = (llvm::Value **)(v331 + 16 * v332);
          }
LABEL_593:
          v441 = v334[1];
          uint64_t v444 = *(void *)v441;
          v443 = (char *)v441 + 16;
          uint64_t v442 = v444;
        }
        else
        {
          uint64_t v442 = 0;
          v443 = &byte_1CFBCE98E;
        }
        v445 = (void *)*((void *)v112 - 8);
        uint64_t v446 = *((void *)v112 - 4);
        __int16 v545 = 773;
        unint64_t v541 = (unint64_t)v443;
        uint64_t v542 = v442;
        v543 = ".udiv";
        v447 = llvm::BinaryOperator::Create(19, v445, v446, (const char **)&v541, (uint64_t)v112);
        *((unsigned char *)v447 + 17) = *((unsigned char *)v447 + 17) & 0xFD | *((unsigned char *)v112 + 17) & 2;
        llvm::Value::doRAUW(v112, v447, (llvm::Value *)1);
        unint64_t v541 = 6;
        uint64_t v542 = 0;
        v543 = (const char *)v112;
        if (v112 != (llvm::Value *)-8192 && v112 != (llvm::Value *)-4096 && v112) {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v541);
        }
        uint64_t v448 = a6[2];
        unint64_t v449 = *(void *)a6;
        if (v448 >= a6[3])
        {
          unint64_t v501 = v448 + 1;
          BOOL v502 = v449 + 24 * v448 > (unint64_t)&v541;
          if (v449 > (unint64_t)&v541 || !v502)
          {
            sub_1CC261F80(a6, v501);
            unint64_t v449 = *(void *)a6;
            goto LABEL_599;
          }
          v506 = (char *)&v541 - v449;
          sub_1CC261F80(a6, v501);
          unint64_t v449 = *(void *)a6;
          v450 = (unint64_t *)&v506[*(void *)a6];
        }
        else
        {
LABEL_599:
          v450 = &v541;
        }
        unsigned int v451 = a6[2];
        v452 = (unint64_t *)(v449 + 24 * v451);
        unint64_t *v452 = 6;
        v452[1] = 0;
        unint64_t v453 = v450[2];
        v452[2] = v453;
        if (v453 != -8192 && v453 != -4096)
        {
          if (v453)
          {
            unint64_t v454 = *v450 & 0xFFFFFFFFFFFFFFF8;
            v452[1] = *(void *)v454;
            *(void *)unint64_t v454 = v452;
            unint64_t *v452 = v454 | 6;
            v455 = (unint64_t *)v452[1];
            if (v455) {
              unint64_t *v455 = *v455 & 7 | (unint64_t)(v452 + 1);
            }
          }
        }
        a6[2] = v451 + 1;
        if (v543 != (const char *)-8192 && v543 != (const char *)-4096 && v543)
        {
          unint64_t v456 = v541 & 0xFFFFFFFFFFFFFFF8;
          *(void *)(v541 & 0xFFFFFFFFFFFFFFF8) = v542;
          if (v542)
          {
            *(void *)uint64_t v542 = *(void *)v542 & 7 | v456;
          }
          else
          {
            v457 = v543;
            v458 = ***(int32x2_t ****)v543;
            unint64_t v459 = (unint64_t)v458[303];
            if (v459 <= v456)
            {
              uint64_t v460 = v458[305].u32[0];
              if (v459 + 16 * v460 > v456)
              {
                unsigned int v461 = v460 - 1;
                LODWORD(v462) = v461 & ((v543 >> 4) ^ (v543 >> 9));
                v463 = (const char **)(v459 + 16 * v462);
                v464 = *v463;
                if (v543 == *v463)
                {
LABEL_616:
                  *v463 = (const char *)-8192;
                  v458[304] = vadd_s32(v458[304], (int32x2_t)0x1FFFFFFFFLL);
                  v457 = v543;
                }
                else
                {
                  int v465 = 1;
                  while (v464 != (const char *)-4096)
                  {
                    int v466 = v462 + v465++;
                    uint64_t v462 = v466 & v461;
                    v464 = *(const char **)(v459 + 16 * v462);
                    if (v543 == v464)
                    {
                      v463 = (const char **)(v459 + 16 * v462);
                      goto LABEL_616;
                    }
                  }
                }
                *((unsigned char *)v457 + 17) &= ~1u;
              }
            }
          }
        }
LABEL_343:
        int v521 = 1;
        goto LABEL_344;
      }
    }
LABEL_453:
    v364 = v522;
    int v365 = *((unsigned __int8 *)v522 + 16);
    if (v522) {
      BOOL v366 = (v365 - 59) >= 0xFFFFFFEE;
    }
    else {
      BOOL v366 = 0;
    }
    if (!v366) {
      goto LABEL_546;
    }
    HIDWORD(v368) = v365 - 41;
    LODWORD(v368) = v365 - 41;
    unsigned int v367 = v368 >> 1;
    BOOL v49 = v367 > 6;
    int v369 = (1 << v367) & 0x47;
    if (!v49 && v369 != 0)
    {
      unint64_t StrengthenedNoWrapFlagsFromBinOp = llvm::ScalarEvolution::getStrengthenedNoWrapFlagsFromBinOp(a2, (uint64_t)v522);
      if ((StrengthenedNoWrapFlagsFromBinOp & 0xFF00000000) != 0)
      {
        *((unsigned char *)v364 + 17) = StrengthenedNoWrapFlagsFromBinOp & 6 | *((unsigned char *)v364 + 17) & 0xF9;
LABEL_464:
        sub_1CD23CFE8(v25, (uint64_t)v20, (llvm::SmallPtrSetImplBase *)&v523, (uint64_t)&v535);
        goto LABEL_546;
      }
      int v365 = *((unsigned __int8 *)v364 + 16);
    }
    if (v365 != 53) {
      goto LABEL_546;
    }
    uint64_t v372 = *(void *)(a2 + 104);
    unsigned int v373 = *(_DWORD *)(a2 + 120);
    if (v373)
    {
      unsigned int v374 = (v373 - 1) & ((v25 >> 4) ^ (v25 >> 9));
      uint64_t v375 = v372 + 48 * v374;
      uint64_t v376 = *(void *)(v375 + 24);
      if (v376 != v25)
      {
        int v377 = 1;
        while (v376 != -4096)
        {
          unsigned int v378 = v374 + v377++;
          unsigned int v374 = v378 & (v373 - 1);
          uint64_t v375 = v372 + 48 * v374;
          uint64_t v376 = *(void *)(v375 + 24);
          if (v376 == v25) {
            goto LABEL_474;
          }
        }
        goto LABEL_473;
      }
    }
    else
    {
LABEL_473:
      uint64_t v375 = v372 + 48 * v373;
    }
LABEL_474:
    if (v375 == v372 + 48 * v373 || (uint64_t v379 = *(void *)(v375 + 40)) == 0) {
      uint64_t v379 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, v25);
    }
    uint64_t v380 = llvm::ScalarEvolution::getRangeRef(a2, v379, 0, 0);
    LODWORD(v542) = *(_DWORD *)(v380 + 8);
    if (v542 > 0x40) {
      operator new[]();
    }
    unint64_t v541 = *(void *)v380;
    unsigned int v381 = *(_DWORD *)(v380 + 24);
    LODWORD(v544) = v381;
    if (v381 > 0x40) {
      operator new[]();
    }
    v543 = *(const char **)(v380 + 16);
    uint64_t v382 = *((void *)v364 + 1);
    if (!v382)
    {
      char v383 = 0;
      goto LABEL_543;
    }
    char v383 = 0;
    while (2)
    {
      uint64_t v384 = *(void *)(v382 + 24);
      v534 = 0;
      uint64_t v539 = v25;
      v540[0] = &v534;
      v540[1] = 0;
      int v385 = *(unsigned __int8 *)(v384 + 16);
      if (v385 == 5)
      {
        if (*(_WORD *)(v384 + 18) != 27) {
          goto LABEL_499;
        }
        v389 = (llvm::Constant **)(v384 - 32 * (*(_DWORD *)(v384 + 20) & 0x7FFFFFF));
        v390 = *v389;
        int v391 = *((unsigned __int8 *)*v389 + 16);
        if (v391 == 5)
        {
          if (*((_WORD *)v390 + 9) != 25) {
            goto LABEL_499;
          }
          uint64_t v392 = ((void *)v390 - 4 * (*((_DWORD *)v390 + 5) & 0x7FFFFFF))[4];
        }
        else
        {
          if (v391 != 53) {
            goto LABEL_499;
          }
          uint64_t v392 = *((void *)v390 - 4);
        }
        if (v25 == v392 && (sub_1CBF5295C((uint64_t)v540, v389[4]) & 1) != 0) {
          goto LABEL_517;
        }
      }
      else if (v385 == 55)
      {
        uint64_t v386 = *(void *)(v384 - 64);
        int v387 = *(unsigned __int8 *)(v386 + 16);
        if (v387 == 5)
        {
          if (*(_WORD *)(v386 + 18) == 25)
          {
            uint64_t v388 = *(void *)(v386 - 32 * (*(_DWORD *)(v386 + 20) & 0x7FFFFFF) + 32);
            goto LABEL_492;
          }
        }
        else if (v387 == 53)
        {
          uint64_t v388 = *(void *)(v386 - 32);
LABEL_492:
          if (v25 == v388 && sub_1CBF528D8((uint64_t)v540, *(unsigned __int8 **)(v384 - 32)))
          {
LABEL_517:
            if ((*(unsigned char *)(v384 + 17) & 2) == 0)
            {
              llvm::ConstantRange::getUnsignedMin((uint64_t)&v541, (uint64_t)&v538);
              if (v539 > 0x40)
              {
                unint64_t v401 = (((unint64_t)v539 + 63) >> 3) & 0x3FFFFFF8;
                do
                {
                  if (!v401)
                  {
                    if (v538) {
                      MEMORY[0x1D25D9CB0](v538, 0x1000C8000313F17);
                    }
                    a6 = v519;
                    goto LABEL_520;
                  }
                  unint64_t v402 = *(unint64_t *)((char *)v538 + v401 - 8);
                  unint64_t v403 = *(void *)(*(void *)v534 - 8 + v401);
                  v401 -= 8;
                }
                while (v402 == v403);
                MEMORY[0x1D25D9CB0](v538, 0x1000C8000313F17);
                if (v402 > v403) {
                  goto LABEL_520;
                }
              }
              else if ((unint64_t)v538 >= *(void *)v534)
              {
LABEL_520:
                *(unsigned char *)(v384 + 17) |= 2u;
                char v383 = 1;
              }
            }
            goto LABEL_521;
          }
        }
      }
LABEL_499:
      v531 = (uint64_t ***)v25;
      v532 = (uint64_t ***)&v534;
      uint64_t v533 = 0;
      int v393 = *(unsigned __int8 *)(v384 + 16);
      if (v393 == 5)
      {
        if (*(_WORD *)(v384 + 18) != 26) {
          goto LABEL_521;
        }
        v397 = (llvm::Constant **)(v384 - 32 * (*(_DWORD *)(v384 + 20) & 0x7FFFFFF));
        v398 = *v397;
        int v399 = *((unsigned __int8 *)*v397 + 16);
        if (v399 == 5)
        {
          if (*((_WORD *)v398 + 9) != 25) {
            goto LABEL_521;
          }
          uint64_t v400 = ((void *)v398 - 4 * (*((_DWORD *)v398 + 5) & 0x7FFFFFF))[4];
        }
        else
        {
          if (v399 != 53) {
            goto LABEL_521;
          }
          uint64_t v400 = *((void *)v398 - 4);
        }
        if (v25 == v400 && (sub_1CBF5295C((uint64_t)&v532, v397[4]) & 1) != 0) {
          goto LABEL_517;
        }
      }
      else
      {
        if (v393 != 54) {
          goto LABEL_521;
        }
        uint64_t v394 = *(void *)(v384 - 64);
        int v395 = *(unsigned __int8 *)(v394 + 16);
        if (v395 == 5)
        {
          if (*(_WORD *)(v394 + 18) != 25) {
            goto LABEL_521;
          }
          uint64_t v396 = *(void *)(v394 - 32 * (*(_DWORD *)(v394 + 20) & 0x7FFFFFF) + 32);
        }
        else
        {
          if (v395 != 53) {
            goto LABEL_521;
          }
          uint64_t v396 = *(void *)(v394 - 32);
        }
        if (v25 == v396 && sub_1CBF528D8((uint64_t)&v532, *(unsigned __int8 **)(v384 - 32))) {
          goto LABEL_517;
        }
      }
LABEL_521:
      uint64_t v382 = *(void *)(v382 + 8);
      if (v382) {
        continue;
      }
      break;
    }
    unsigned int v381 = v544;
LABEL_543:
    if (v381 >= 0x41 && v543) {
      MEMORY[0x1D25D9CB0](v543, 0x1000C8000313F17);
    }
    if (v542 >= 0x41 && v541) {
      MEMORY[0x1D25D9CB0](v541, 0x1000C8000313F17);
    }
    if (v383) {
      goto LABEL_464;
    }
LABEL_546:
    if (*((unsigned __int8 *)v522 + 16) - 66 >= 0xD) {
      v407 = 0;
    }
    else {
      v407 = v522;
    }
    if (v509 && v407)
    {
      (*(void (**)(void))(*(void *)v509 + 24))();
      goto LABEL_346;
    }
    if ((*(_DWORD *)(*(void *)v522 + 8) & 0xFD) == 0xD)
    {
      uint64_t v408 = *(void *)(a2 + 104);
      unsigned int v409 = *(_DWORD *)(a2 + 120);
      if (!v409) {
        goto LABEL_559;
      }
      unsigned int v410 = (v409 - 1) & ((v522 >> 4) ^ (v522 >> 9));
      uint64_t v411 = v408 + 48 * v410;
      v412 = *(llvm::Value **)(v411 + 24);
      if (v412 != v522)
      {
        int v413 = 1;
        while (v412 != (llvm::Value *)-4096)
        {
          unsigned int v414 = v410 + v413++;
          unsigned int v410 = v414 & (v409 - 1);
          uint64_t v411 = v408 + 48 * v410;
          v412 = *(llvm::Value **)(v411 + 24);
          if (v412 == v522) {
            goto LABEL_560;
          }
        }
LABEL_559:
        uint64_t v411 = v408 + 48 * v409;
      }
LABEL_560:
      if (v411 == v408 + 48 * v409 || (uint64_t v415 = *(void *)(v411 + 40)) == 0) {
        uint64_t v415 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, (unint64_t)v522);
      }
      if (v415 && *(_WORD *)(v415 + 24) == 7)
      {
        uint64_t v270 = (uint64_t)v20;
        if (*(const llvm::Loop **)(v415 + 48) == v20)
        {
          uint64_t v269 = v522;
          goto LABEL_345;
        }
      }
    }
LABEL_346:
    unsigned int v22 = v536;
  }
  while (v536);
LABEL_673:
  if (v535 != v537) {
    free(v535);
  }
  if (v524 != v523) {
    free(v524);
  }
  int v507 = v521;
  return v507 != 0;
}

uint64_t llvm::simplifyLoopIVs(uint64_t a1, uint64_t ***a2, llvm::DominatorTree *a3, uint64_t *a4, uint64_t a5, unsigned int *a6)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  sub_1CC2B6C4C((uint64_t)v18, a2, (uint64_t)((*a2)[5] + 34), (uint64_t)"indvars", 1);
  uint64_t v12 = *(void *)(**(void **)(a1 + 32) + 48);
  uint64_t v13 = (llvm::Value *)(v12 - 24);
  if (v12) {
    uint64_t v14 = v12 - 24;
  }
  else {
    uint64_t v14 = 0;
  }
  if (*(unsigned char *)(v14 + 16) == 83)
  {
    int v15 = 0;
    do
    {
      v15 |= llvm::simplifyUsersOfIV(v13, (uint64_t)a2, a3, a4, a5, a6, (llvm::SCEVExpander *)v18, 0);
      uint64_t v12 = *(void *)(v12 + 8);
      uint64_t v13 = (llvm::Value *)(v12 - 24);
      if (v12) {
        uint64_t v16 = v12 - 24;
      }
      else {
        uint64_t v16 = 0;
      }
    }
    while (*(unsigned char *)(v16 + 16) == 83);
  }
  else
  {
    LOBYTE(v15) = 0;
  }
  sub_1CC2B7040((uint64_t)v18);
  return v15 & 1;
}

uint64_t llvm::createWideIV(long long *a1, uint64_t *a2, llvm::ScalarEvolution *a3, llvm::SCEVExpander *a4, llvm::DominatorTree *a5, uint64_t *a6, _DWORD *a7, _DWORD *a8, char a9, char a10)
{
  uint64_t v153 = *MEMORY[0x1E4F143B8];
  long long v13 = *a1;
  *(_OWORD *)int v113 = *a1;
  uint64_t v114 = a2;
  int v14 = *((_DWORD *)a2 + 4);
  if (v14)
  {
    uint64_t v15 = *(void *)(v13 + 40);
    uint64_t v16 = *a2;
    unsigned int v17 = v14 - 1;
    uint64_t v18 = ((v15 >> 4) ^ (v15 >> 9)) & (v14 - 1);
    uint64_t v19 = *(void *)(*a2 + 16 * v18);
    if (v15 == v19)
    {
LABEL_6:
      unsigned int v22 = *(void **)(v16 + 16 * v18 + 8);
      goto LABEL_8;
    }
    int v20 = 1;
    while (v19 != -4096)
    {
      int v21 = v18 + v20++;
      uint64_t v18 = v21 & v17;
      uint64_t v19 = *(void *)(v16 + 16 * v18);
      if (v15 == v19) {
        goto LABEL_6;
      }
    }
  }
  unsigned int v22 = 0;
LABEL_8:
  uint64_t v115 = v22;
  uint64_t v116 = a3;
  uint64_t v117 = a5;
  char v118 = a9;
  char v119 = a10;
  int v121 = 0;
  int v120 = 0;
  unsigned int v122 = 0;
  uint64_t v123 = 0;
  uint64_t v124 = 0;
  int v125 = a6;
  unsigned int v126 = v130;
  int v127 = v130;
  uint64_t v128 = 16;
  int v129 = 0;
  v131[1] = 0;
  v131[0] = 0;
  unsigned int v132 = 0;
  unsigned int v135 = 0;
  uint64_t v133 = 0;
  uint64_t v134 = 0;
  uint64_t v136 = v138;
  uint64_t v137 = 0x800000000;
  int v23 = *((unsigned __int8 *)a1 + 16);
  unsigned int v142 = (void *)v13;
  *(_DWORD *)sub_1CC90FA3C((uint64_t)v131, (uint64_t *)&v142) = v23;
  uint64_t v24 = *((void *)v116 + 13);
  unsigned int v25 = *((_DWORD *)v116 + 30);
  if (v25)
  {
    unsigned int v26 = ((LODWORD(v113[0]) >> 4) ^ (LODWORD(v113[0]) >> 9)) & (v25 - 1);
    uint64_t v27 = v24 + 48 * v26;
    unsigned int v28 = *(llvm::Type **)(v27 + 24);
    if (v28 == v113[0]) {
      goto LABEL_15;
    }
    int v29 = 1;
    while (v28 != (llvm::Type *)-4096)
    {
      unsigned int v30 = v26 + v29++;
      unsigned int v26 = v30 & (v25 - 1);
      uint64_t v27 = v24 + 48 * v26;
      unsigned int v28 = *(llvm::Type **)(v27 + 24);
      if (v28 == v113[0]) {
        goto LABEL_15;
      }
    }
  }
  uint64_t v27 = v24 + 48 * v25;
LABEL_15:
  if (v27 == v24 + 48 * v25 || (uint64_t SCEVIter = *(void *)(v27 + 40)) == 0) {
    uint64_t SCEVIter = llvm::ScalarEvolution::createSCEVIter(v116, (unint64_t)v113[0]);
  }
  if (SCEVIter) {
    BOOL v32 = *(unsigned __int16 *)(SCEVIter + 24) == 7;
  }
  else {
    BOOL v32 = 0;
  }
  if (v32)
  {
    if (v132)
    {
      LODWORD(v33) = ((LODWORD(v113[0]) >> 4) ^ (LODWORD(v113[0]) >> 9)) & (v132 - 1);
      uint64_t v34 = v131[0] + 16 * v33;
      int v35 = *(llvm::Type **)v34;
      if (v113[0] != *(llvm::Type **)v34)
      {
        int v36 = 1;
        while (v35 != (llvm::Type *)-4096)
        {
          int v37 = v33 + v36++;
          uint64_t v33 = v37 & (v132 - 1);
          int v35 = *(llvm::Type **)(v131[0] + 16 * v33);
          if (v113[0] == v35)
          {
            uint64_t v34 = v131[0] + 16 * v33;
            goto LABEL_30;
          }
        }
        uint64_t v34 = v131[0] + 16 * v132;
      }
    }
    else
    {
      uint64_t v34 = v131[0];
    }
LABEL_30:
    unint64_t v38 = *(_DWORD *)(v34 + 8) == 1
        ? llvm::ScalarEvolution::getSignExtendExpr(v116, (llvm::detail::IEEEFloat **)SCEVIter, (uint64_t **)v113[1], 0)
        : llvm::ScalarEvolution::getZeroExtendExpr(v116, (llvm::detail::IEEEFloat **)SCEVIter, (uint64_t **)v113[1], 0);
    BOOL v39 = (llvm::Instruction **)v38;
    if (v38 && *(_WORD *)(v38 + 24) == 7)
    {
      unint64_t v41 = *(void **)(v38 + 48);
      if (v41 == v115)
      {
        if (!v119)
        {
LABEL_132:
          uint64_t v88 = *(void *)v41[4];
          uint64_t v89 = v88 + 40;
          for (uint64_t i = *(void *)(v88 + 48); i != v89; uint64_t i = *(void *)(i + 8))
          {
            uint64_t v91 = i - 24;
            if (!i) {
              uint64_t v91 = 0;
            }
            if (*(unsigned char *)(v91 + 16) != 83)
            {
              unsigned int v92 = *(unsigned __int8 *)(i - 8) - 38;
              BOOL v93 = v92 > 0x38;
              uint64_t v94 = (1 << v92) & 0x100060000000001;
              if (v93 || v94 == 0) {
                uint64_t v89 = i;
              }
              else {
                uint64_t v89 = *(void *)(i + 8);
              }
              break;
            }
          }
          if (v89) {
            uint64_t v96 = (llvm::Instruction *)(v89 - 24);
          }
          else {
            uint64_t v96 = 0;
          }
          uint64_t v97 = llvm::SCEVExpander::expandCodeForImpl(a4, v39, v113[1], v96);
          uint64_t v108 = v97;
          if (*((unsigned char *)v97 + 16) == 83) {
            int v98 = v97;
          }
          else {
            int v98 = 0;
          }
          unsigned int v122 = v98;
          if (v98) {
            llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch();
          }
          if (!*((void *)v97 + 1) && sub_1CCE12E28((uint64_t)a4, (uint64_t)v97)) {
            sub_1CCD849B4(v125, (uint64_t *)&v108);
          }
          goto LABEL_39;
        }
        unsigned int v142 = v146;
        unint64_t v143 = v146;
        int v145 = 0;
        int v106 = (llvm::Instruction **)v38;
        unsigned int v139 = &v141;
        v140[1] = 6;
        unsigned __int16 v141 = v113[0];
        uint64_t v144 = 0x100000010;
        v146[0] = v113[0];
        unsigned int v45 = 1;
LABEL_47:
        uint64_t v46 = *((void *)v139 + --v45);
        v140[0] = v45;
        uint64_t v47 = *(void *)(v46 + 8);
        if (!v47) {
          goto LABEL_126;
        }
        while (1)
        {
          int v48 = *((_DWORD *)v114 + 4);
          if (v48)
          {
            uint64_t v49 = *(void *)(v47 + 24);
            uint64_t v50 = *(void *)(v49 + 40);
            uint64_t v51 = *v114;
            unsigned int v52 = v48 - 1;
            uint64_t v53 = ((v50 >> 4) ^ (v50 >> 9)) & (v48 - 1);
            uint64_t v54 = *(void *)(*v114 + 16 * v53);
            if (v50 != v54)
            {
              int v55 = 1;
              while (v54 != -4096)
              {
                int v56 = v53 + v55++;
                uint64_t v53 = v56 & v52;
                uint64_t v54 = *(void *)(v51 + 16 * v53);
                if (v50 == v54) {
                  goto LABEL_53;
                }
              }
              goto LABEL_123;
            }
LABEL_53:
            unsigned int v57 = *(void **)(v51 + 16 * v53 + 8);
            if (v57) {
              break;
            }
          }
LABEL_123:
          uint64_t v47 = *(void *)(v47 + 8);
          if (!v47)
          {
            unsigned int v45 = v140[0];
LABEL_126:
            if (!v45)
            {
              if (v139 != &v141) {
                free(v139);
              }
              BOOL v39 = v106;
              if (v143 != v142) {
                free(v143);
              }
              unint64_t v41 = v115;
              goto LABEL_132;
            }
            goto LABEL_47;
          }
        }
        while (v57 != v115)
        {
          if (!v57) {
            goto LABEL_123;
          }
          unsigned int v57 = (void *)*v57;
        }
        unsigned int v58 = (char *)v143;
        uint64_t v59 = HIDWORD(v144);
        if (v143 == v142)
        {
          if (HIDWORD(v144))
          {
            uint64_t v60 = 0;
            uint64_t v61 = 8 * HIDWORD(v144);
            unsigned int v62 = v143;
            while (*v62 != v49)
            {
              if (*v62 == -2) {
                uint64_t v60 = v62;
              }
              ++v62;
              v61 -= 8;
              if (!v61)
              {
                if (!v60) {
                  goto LABEL_65;
                }
                *uint64_t v60 = v49;
                --v145;
                goto LABEL_89;
              }
            }
            goto LABEL_123;
          }
LABEL_65:
          unsigned int v63 = v144;
          if (HIDWORD(v144) < v144)
          {
            ++HIDWORD(v144);
            *((void *)v143 + v59) = v49;
LABEL_89:
            if (v140[0] >= (unint64_t)v140[1]) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v139 + v140[0]++) = v49;
            uint64_t v111 = v46;
            *(void *)&long long v110 = v49;
            *(void *)&long long v109 = 0;
            v107[0] = 0;
            unsigned int v148 = &v109;
            unsigned int v149 = v107;
            unsigned int v150 = 0;
            unsigned int v73 = *(unsigned __int8 *)(v46 + 16);
            HIDWORD(v75) = v73 - 41;
            LODWORD(v75) = v73 - 41;
            unsigned int v74 = v75 >> 1;
            if (v74 <= 6 && ((1 << v74) & 0x47) != 0)
            {
              int v76 = v73 > 0x1B ? v73 - 28 : *(unsigned __int16 *)(v46 + 18);
              if (v76 == 13 && (*(unsigned char *)(v46 + 17) & 4) != 0)
              {
                int v77 = *(_DWORD *)(v46 + 20);
                unsigned int v78 = (v77 & 0x40000000) != 0 ? *(uint64_t **)(v46 - 8) : (uint64_t *)(v46 - 32 * (v77 & 0x7FFFFFF));
                uint64_t v79 = *v78;
                if (v79)
                {
                  *(void *)&long long v109 = v79;
                  int v80 = *(_DWORD *)(v46 + 20);
                  uint64_t v81 = (v80 & 0x40000000) != 0 ? *(void *)(v46 - 8) : v46 - 32 * (v80 & 0x7FFFFFF);
                  if (sub_1CBF528D8((uint64_t)&v149, *(unsigned __int8 **)(v81 + 32)))
                  {
                    unsigned int v82 = v107[0];
                    unsigned int v83 = *((_DWORD *)v107[0] + 2);
                    unsigned int v84 = v83 - 1;
                    if (v83 >= 0x41) {
                      unsigned int v82 = (llvm::Value *)(*(void *)v107[0] + 8 * (v84 >> 6));
                    }
                    if (((*(void *)v82 >> v84) & 1) == 0)
                    {
                      unsigned int v148 = &v109;
                      unsigned int v149 = v113;
                      unsigned int v150 = v107;
                      uint64_t v151 = &v111;
                      uint64_t v152 = &v110;
                      if (v118)
                      {
                        unsigned int v85 = (void *)(v110 + 24);
                        uint64_t v86 = *(void *)(v110 + 40) + 40;
                        if ((void)v110 + 24 != v86)
                        {
                          do
                          {
                            uint64_t v112 = 0;
                            if (v85) {
                              uint64_t v87 = (uint64_t)(v85 - 3);
                            }
                            else {
                              uint64_t v87 = 0;
                            }
                            LODWORD(v147[0]) = 125;
                            v147[1] = 0;
                            v147[2] = &v112;
                            if (sub_1CC062C2C((uint64_t)v147, v87)) {
                              sub_1CD23DB14((uint64_t)&v148, v112, 1);
                            }
                            unsigned int v85 = (void *)*v85;
                          }
                          while (v85 != (void *)v86);
                        }
                      }
                      llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry();
                    }
                  }
                }
              }
            }
            goto LABEL_123;
          }
        }
        else
        {
          unsigned int v63 = v144;
        }
        if (3 * v63 <= 4 * (HIDWORD(v144) - v145))
        {
          if (v63 >= 0x40) {
            v63 *= 2;
          }
          else {
            unsigned int v63 = 128;
          }
        }
        else if (v63 - HIDWORD(v144) >= v63 >> 3)
        {
LABEL_70:
          unsigned int v64 = v63 - 1;
          unsigned int v65 = (v63 - 1) & ((v49 >> 4) ^ (v49 >> 9));
          unsigned int v66 = &v58[8 * v65];
          uint64_t v67 = *(void *)v66;
          if (*(void *)v66 != -1)
          {
            uint64_t v68 = 0;
            int v69 = 1;
            while (v67 != v49)
            {
              if (v68) {
                BOOL v70 = 0;
              }
              else {
                BOOL v70 = v67 == -2;
              }
              if (v70) {
                uint64_t v68 = v66;
              }
              unsigned int v71 = v65 + v69++;
              unsigned int v65 = v71 & v64;
              unsigned int v66 = &v58[8 * (v71 & v64)];
              uint64_t v67 = *(void *)v66;
              if (*(void *)v66 == -1) {
                goto LABEL_82;
              }
            }
            goto LABEL_123;
          }
          uint64_t v68 = 0;
LABEL_82:
          if (v68) {
            unint64_t v72 = v68;
          }
          else {
            unint64_t v72 = v66;
          }
          if (*(void *)v72 == v49) {
            goto LABEL_123;
          }
          if (*(void *)v72 == -2) {
            --v145;
          }
          else {
            ++HIDWORD(v144);
          }
          *(void *)unint64_t v72 = v49;
          goto LABEL_89;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v142, v63);
        unsigned int v63 = v144;
        unsigned int v58 = (char *)v143;
        goto LABEL_70;
      }
    }
  }
LABEL_39:
  int v42 = v121;
  *a7 = v120;
  *a8 = v42;
  if (v136 != v138) {
    free(v136);
  }
  uint64_t v43 = v133;
  if (v135)
  {
    uint64_t v99 = v133 + 48 * v135;
    uint64_t v100 = v133 + 24;
    do
    {
      uint64_t v102 = *(void *)(v100 - 24);
      uint64_t v101 = *(void *)(v100 - 16);
      uint64_t v103 = v100 - 24;
      if ((v102 != -4096 || v101 != -4096) && (v102 != -8192 || v101 != -8192))
      {
        if (*(_DWORD *)(v100 + 16) >= 0x41u)
        {
          uint64_t v104 = *(void *)(v100 + 8);
          if (v104) {
            MEMORY[0x1D25D9CB0](v104, 0x1000C8000313F17);
          }
        }
        if (*(_DWORD *)v100 >= 0x41u)
        {
          uint64_t v105 = *(void *)(v100 - 8);
          if (v105) {
            MEMORY[0x1D25D9CB0](v105, 0x1000C8000313F17);
          }
        }
      }
      v100 += 48;
    }
    while (v103 + 48 != v99);
    uint64_t v43 = v133;
  }
  MEMORY[0x1D25D9CD0](v43, 8);
  MEMORY[0x1D25D9CD0](v131[0], 8);
  if (v127 != v126) {
    free(v127);
  }
  return 0;
}

uint64_t sub_1CD23CFE8(uint64_t result, uint64_t a2, llvm::SmallPtrSetImplBase *this, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 8);
  if (v4)
  {
    uint64_t v8 = result;
    int v9 = (unsigned int *)(a2 + 76);
    uint64_t v10 = (unsigned int *)(a2 + 72);
    uint64_t result = 128;
    while (1)
    {
      uint64_t v11 = *(void *)(v4 + 24);
      if (v11 == v8) {
        goto LABEL_61;
      }
      uint64_t v12 = *(void *)(v11 + 40);
      uint64_t v14 = *(void *)(a2 + 56);
      uint64_t v13 = *(void *)(a2 + 64);
      if (v13 == v14)
      {
        uint64_t v15 = *v9;
        uint64_t v16 = (void *)(v13 + 8 * v15);
        if (v15)
        {
          uint64_t v17 = 0;
          uint64_t v18 = 8 * v15;
          while (*(void *)(v13 + v17) != v12)
          {
            v17 += 8;
            if (v18 == v17) {
              goto LABEL_22;
            }
          }
          uint64_t v16 = (void *)(v13 + v17);
        }
LABEL_22:
        uint64_t v14 = *(void *)(a2 + 64);
      }
      else
      {
        uint64_t v19 = *v10;
        int v20 = v19 - 1;
        unsigned int v21 = (v19 - 1) & ((v12 >> 4) ^ (v12 >> 9));
        uint64_t v16 = (void *)(v13 + 8 * v21);
        uint64_t v22 = *v16;
        if (*v16 == -1)
        {
          int v23 = 0;
LABEL_64:
          if (v23) {
            uint64_t v16 = v23;
          }
          if (*v16 != v12) {
            uint64_t v16 = (void *)(v13 + 8 * v19);
          }
        }
        else
        {
          int v23 = 0;
          int v24 = 1;
          while (v22 != v12)
          {
            if (v23) {
              BOOL v25 = 0;
            }
            else {
              BOOL v25 = v22 == -2;
            }
            if (v25) {
              int v23 = v16;
            }
            unsigned int v26 = v21 + v24++;
            unsigned int v21 = v26 & v20;
            uint64_t v16 = (void *)(v13 + 8 * (v26 & v20));
            uint64_t v22 = *v16;
            if (*v16 == -1) {
              goto LABEL_64;
            }
          }
        }
      }
      uint64_t v27 = v13 == v14 ? v9 : v10;
      if (v16 == (void *)(v13 + 8 * *v27)) {
        goto LABEL_61;
      }
      uint64_t v28 = *((void *)this + 1);
      uint64_t v29 = *((unsigned int *)this + 5);
      if (v28 == *(void *)this)
      {
        if (v29)
        {
          unsigned int v30 = 0;
          uint64_t v31 = 8 * v29;
          BOOL v32 = (void *)*((void *)this + 1);
          while (*v32 != v11)
          {
            if (*v32 == -2) {
              unsigned int v30 = v32;
            }
            ++v32;
            v31 -= 8;
            if (!v31)
            {
              if (!v30) {
                goto LABEL_35;
              }
              void *v30 = v11;
              --*((_DWORD *)this + 6);
              goto LABEL_59;
            }
          }
          goto LABEL_61;
        }
LABEL_35:
        unsigned int v33 = *((_DWORD *)this + 4);
        if (v29 < v33)
        {
          *((_DWORD *)this + 5) = v29 + 1;
          *(void *)(v28 + 8 * v29) = v11;
          goto LABEL_59;
        }
      }
      else
      {
        unsigned int v33 = *((_DWORD *)this + 4);
      }
      if (3 * v33 <= 4 * ((int)v29 - *((_DWORD *)this + 6))) {
        break;
      }
      if (v33 - v29 < v33 >> 3) {
        goto LABEL_73;
      }
LABEL_40:
      unsigned int v34 = v33 - 1;
      unsigned int v35 = (v33 - 1) & ((v11 >> 4) ^ (v11 >> 9));
      int v36 = (void *)(v28 + 8 * v35);
      uint64_t v37 = *v36;
      if (*v36 != -1)
      {
        unint64_t v38 = 0;
        int v39 = 1;
        while (v37 != v11)
        {
          if (v38) {
            BOOL v40 = 0;
          }
          else {
            BOOL v40 = v37 == -2;
          }
          if (v40) {
            unint64_t v38 = v36;
          }
          unsigned int v41 = v35 + v39++;
          unsigned int v35 = v41 & v34;
          int v36 = (void *)(v28 + 8 * (v41 & v34));
          uint64_t v37 = *v36;
          if (*v36 == -1) {
            goto LABEL_52;
          }
        }
        goto LABEL_61;
      }
      unint64_t v38 = 0;
LABEL_52:
      if (v38) {
        int v42 = v38;
      }
      else {
        int v42 = v36;
      }
      if (*v42 == v11) {
        goto LABEL_61;
      }
      if (*v42 == -2) {
        --*((_DWORD *)this + 6);
      }
      else {
        ++*((_DWORD *)this + 5);
      }
      *int v42 = v11;
LABEL_59:
      unint64_t v43 = *(unsigned int *)(a4 + 8);
      if (v43 >= *(unsigned int *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unint64_t v44 = (void *)(*(void *)a4 + 16 * v43);
      *unint64_t v44 = v11;
      v44[1] = v8;
      ++*(_DWORD *)(a4 + 8);
LABEL_61:
      uint64_t v4 = *(void *)(v4 + 8);
      if (!v4) {
        return result;
      }
    }
    if (v33 >= 0x40) {
      v33 *= 2;
    }
    else {
      unsigned int v33 = 128;
    }
LABEL_73:
    llvm::SmallPtrSetImplBase::Grow(this, v33);
    uint64_t result = 128;
    unsigned int v33 = *((_DWORD *)this + 4);
    uint64_t v28 = *((void *)this + 1);
    goto LABEL_40;
  }
  return result;
}

const llvm::Value *sub_1CD23D2E4(const llvm::Value **a1, uint64_t a2, llvm::DominatorTree *this)
{
  if (a2)
  {
    uint64_t v4 = a1;
    int v5 = 0;
    unint64_t v6 = &a1[a2];
    while (1)
    {
      int v7 = *v4;
      if (v5 && (llvm::DominatorTree::dominates(this, *v4, v5) & 1) == 0)
      {
        if ((llvm::DominatorTree::dominates(this, v5, v7) & 1) == 0)
        {
          uint64_t v8 = *((void *)v5 + 5);
          uint64_t v9 = *((void *)v7 + 5);
          uint64_t v10 = *(void *)(*(void *)(v8 + 56) + 80);
          if (v10) {
            uint64_t v11 = v10 - 24;
          }
          else {
            uint64_t v11 = 0;
          }
          if (v11 != v8 && v11 != v9)
          {
            uint64_t v13 = *((void *)this + 3);
            uint64_t v14 = *((unsigned int *)this + 10);
            if (!v14) {
              goto LABEL_20;
            }
            LODWORD(v15) = (v14 - 1) & ((v8 >> 4) ^ (v8 >> 9));
            uint64_t v16 = (uint64_t *)(v13 + 16 * v15);
            uint64_t v17 = *v16;
            if (*v16 != v8)
            {
              int v18 = 1;
              while (v17 != -4096)
              {
                int v19 = v15 + v18++;
                uint64_t v15 = v19 & (v14 - 1);
                uint64_t v17 = *(void *)(v13 + 16 * v15);
                if (v17 == v8)
                {
                  uint64_t v16 = (uint64_t *)(v13 + 16 * v15);
                  goto LABEL_21;
                }
              }
LABEL_20:
              uint64_t v16 = (uint64_t *)(v13 + 16 * v14);
            }
LABEL_21:
            int v20 = (uint64_t *)(v13 + 16 * v14);
            if (v16 == v20)
            {
              unsigned int v21 = 0;
              if (!v14) {
                goto LABEL_51;
              }
LABEL_23:
              unsigned int v22 = v14 - 1;
              LODWORD(v14) = (v14 - 1) & ((v9 >> 4) ^ (v9 >> 9));
              int v23 = (uint64_t *)(v13 + 16 * v14);
              uint64_t v24 = *v23;
              if (*v23 != v9)
              {
                int v25 = 1;
                while (v24 != -4096)
                {
                  int v26 = v14 + v25++;
                  uint64_t v14 = v26 & v22;
                  uint64_t v24 = *(void *)(v13 + 16 * v14);
                  if (v24 == v9)
                  {
                    int v23 = (uint64_t *)(v13 + 16 * v14);
                    goto LABEL_28;
                  }
                }
                goto LABEL_51;
              }
LABEL_28:
              if (v23 == v20) {
                goto LABEL_51;
              }
              uint64_t v27 = (uint64_t *)v23[1];
            }
            else
            {
              unsigned int v21 = (uint64_t *)v16[1];
              if (v14) {
                goto LABEL_23;
              }
LABEL_51:
              uint64_t v27 = 0;
            }
            if (v21 == v27)
            {
              uint64_t v27 = v21;
            }
            else
            {
              do
              {
                unsigned int v28 = *((_DWORD *)v21 + 4);
                unsigned int v29 = *((_DWORD *)v27 + 4);
                BOOL v30 = v28 >= v29;
                if (v28 >= v29) {
                  uint64_t v31 = v21;
                }
                else {
                  uint64_t v31 = v27;
                }
                if (!v30) {
                  uint64_t v27 = v21;
                }
                unsigned int v21 = (uint64_t *)v31[1];
              }
              while (v21 != v27);
            }
            uint64_t v11 = *v27;
          }
          uint64_t v32 = *(void *)(v11 + 40);
          if (v32 == v11 + 40)
          {
            int v7 = 0;
          }
          else
          {
            if (v32) {
              unsigned int v33 = (unsigned __int8 *)(v32 - 24);
            }
            else {
              unsigned int v33 = 0;
            }
            if (v33[16] - 29 >= 0xB) {
              int v7 = 0;
            }
            else {
              int v7 = (const llvm::Value *)v33;
            }
          }
          goto LABEL_48;
        }
        int v7 = v5;
      }
LABEL_48:
      ++v4;
      int v5 = v7;
      if (v4 == v6) {
        return v7;
      }
    }
  }
  return 0;
}

uint64_t ****sub_1CD23D4E0(uint64_t a1, uint64_t ****a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    sub_1CD892A58();
  }
  uint64_t result = (uint64_t ****)(*(void *)a1 + 24 * v3);
  int v5 = *a2;
  void *result = (uint64_t ***)6;
  result[1] = 0;
  result[2] = v5;
  if (v5 != (uint64_t ***)-8192 && v5 != (uint64_t ***)-4096 && v5 != 0)
  {
    uint64_t result = llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)result);
    unsigned int v3 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v3 + 1;
  return result;
}

void sub_1CD23D56C(uint64_t a1, llvm::Value *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(v6 + 104);
  unsigned int v8 = *(_DWORD *)(v6 + 120);
  if (v8)
  {
    unsigned int v9 = v8 - 1;
    unsigned int v10 = (v8 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v11 = v7 + 48 * v10;
    uint64_t v12 = *(llvm::Value **)(v11 + 24);
    if (v12 == a2) {
      goto LABEL_8;
    }
    int v13 = 1;
    while (v12 != (llvm::Value *)-4096)
    {
      unsigned int v14 = v10 + v13++;
      unsigned int v10 = v14 & v9;
      uint64_t v11 = v7 + 48 * (v14 & v9);
      uint64_t v12 = *(llvm::Value **)(v11 + 24);
      if (v12 == a2) {
        goto LABEL_8;
      }
    }
  }
  uint64_t v11 = v7 + 48 * v8;
LABEL_8:
  if (v11 == v7 + 48 * v8 || (uint64_t SCEVIter = *(const llvm::SCEV **)(v11 + 40)) == 0)
  {
    uint64_t SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(*(llvm::ScalarEvolution **)(a1 + 32), (unint64_t)a2);
    uint64_t v6 = *(void *)(a1 + 32);
  }
  uint64_t v16 = SCEVIter;
  while (2)
  {
    switch(*((_WORD *)v16 + 12))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        int v18 = (llvm::Type **)((char *)v16 + 40);
        goto LABEL_19;
      case 4:
        int v18 = (llvm::Type **)((char *)v16 + 48);
        goto LABEL_19;
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        uint64_t v17 = (const llvm::SCEV **)*((void *)v16 + 4);
        goto LABEL_14;
      case 6:
        uint64_t v17 = (const llvm::SCEV **)((char *)v16 + 40);
LABEL_14:
        uint64_t v16 = *v17;
        continue;
      case 0xE:
        int v18 = (llvm::Type **)*((void *)v16 - 1);
        goto LABEL_19;
      default:
        int v18 = (llvm::Type **)*((void *)v16 + 4);
LABEL_19:
        Constant = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)v6, *v18, 0, 0);
        char isKnownPredicate = llvm::ScalarEvolution::isKnownPredicate((llvm::ScalarEvolution *)v6, 0x27u, SCEVIter, Constant);
        uint64_t v21 = *((void *)a2 + 1);
        if (!v21) {
          return;
        }
        char v22 = isKnownPredicate;
        unsigned int v45 = (void *)(a1 + 304);
        break;
    }
    break;
  }
  do
  {
    uint64_t v23 = *(void *)(v21 + 24);
    uint64_t v24 = *(void *)(a1 + 104);
    uint64_t v25 = *(unsigned int *)(a1 + 116);
    if (v24 == *(void *)(a1 + 96))
    {
      if (v25)
      {
        int v26 = 0;
        uint64_t v27 = 8 * v25;
        unsigned int v28 = *(uint64_t **)(a1 + 104);
        while (*v28 != v23)
        {
          if (*v28 == -2) {
            int v26 = v28;
          }
          ++v28;
          v27 -= 8;
          if (!v27)
          {
            if (!v26) {
              goto LABEL_29;
            }
            uint64_t *v26 = v23;
            --*(_DWORD *)(a1 + 120);
            if (v22) {
              goto LABEL_54;
            }
            goto LABEL_56;
          }
        }
        goto LABEL_70;
      }
LABEL_29:
      unsigned int v29 = *(_DWORD *)(a1 + 112);
      if (v25 < v29)
      {
        *(_DWORD *)(a1 + 116) = v25 + 1;
        *(void *)(v24 + 8 * v25) = v23;
        if (v22) {
          goto LABEL_54;
        }
        goto LABEL_56;
      }
    }
    else
    {
      unsigned int v29 = *(_DWORD *)(a1 + 112);
    }
    if (3 * v29 <= 4 * ((int)v25 - *(_DWORD *)(a1 + 120)))
    {
      if (v29 >= 0x40) {
        v29 *= 2;
      }
      else {
        unsigned int v29 = 128;
      }
    }
    else if (v29 - v25 >= v29 >> 3)
    {
      goto LABEL_35;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 96), v29);
    unsigned int v29 = *(_DWORD *)(a1 + 112);
    uint64_t v24 = *(void *)(a1 + 104);
LABEL_35:
    unsigned int v30 = v29 - 1;
    unsigned int v31 = (v29 - 1) & ((v23 >> 4) ^ (v23 >> 9));
    uint64_t v32 = (uint64_t *)(v24 + 8 * v31);
    uint64_t v33 = *v32;
    if (*v32 == -1)
    {
      unsigned int v34 = 0;
LABEL_47:
      if (v34) {
        unint64_t v38 = v34;
      }
      else {
        unint64_t v38 = v32;
      }
      if (*v38 != v23)
      {
        if (*v38 == -2) {
          --*(_DWORD *)(a1 + 120);
        }
        else {
          ++*(_DWORD *)(a1 + 116);
        }
        *unint64_t v38 = v23;
        if (v22)
        {
LABEL_54:
          BOOL v39 = 1;
LABEL_68:
          uint64_t v42 = *(unsigned int *)(a1 + 312);
          if (v42 >= *(_DWORD *)(a1 + 316))
          {
            int v48 = a2;
            uint64_t v49 = v23;
            uint64_t v50 = a3;
            LOBYTE(v51) = v39;
            BOOL v44 = *v45 + 32 * v42 > (unint64_t)&v48;
            if (*v45 <= (unint64_t)&v48 && v44) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v43 = *(void *)(a1 + 304) + 32 * v42;
          *(void *)uint64_t v43 = a2;
          *(void *)(v43 + 8) = v23;
          *(void *)(v43 + 16) = a3;
          *(unsigned char *)(v43 + 24) = v39;
          *(_DWORD *)(a1 + 312) = v42 + 1;
          goto LABEL_70;
        }
LABEL_56:
        int v48 = 0;
        BOOL v39 = 0;
        if (sub_1CD23E258(*(void *)(a1 + 280), *(_DWORD *)(a1 + 296), (uint64_t)a2, v23, &v48))
        {
          BOOL v40 = v48;
          if (v48 != (llvm::Value *)(*(void *)(a1 + 280) + 48 * *(unsigned int *)(a1 + 296)))
          {
            LODWORD(v49) = *((_DWORD *)v48 + 6);
            if (v49 > 0x40) {
              operator new[]();
            }
            int v48 = (llvm::Value *)*((void *)v48 + 2);
            unsigned int v51 = *((_DWORD *)v40 + 10);
            if (v51 > 0x40) {
              operator new[]();
            }
            uint64_t v50 = *((void *)v40 + 4);
            char v52 = 1;
            llvm::ConstantRange::getSignedMin((uint64_t)&v48, (uint64_t)&v46);
            unsigned int v41 = (uint64_t *)(v46 + 8 * ((v47 - 1) >> 6));
            if (v47 < 0x41) {
              unsigned int v41 = &v46;
            }
            BOOL v39 = (((unint64_t)*v41 >> (v47 - 1)) & 1) == 0;
            if (v47 >= 0x41 && v46) {
              MEMORY[0x1D25D9CB0]();
            }
            if (v52)
            {
              if (v51 >= 0x41 && v50) {
                MEMORY[0x1D25D9CB0](v50, 0x1000C8000313F17);
              }
              if (v49 >= 0x41 && v48) {
                MEMORY[0x1D25D9CB0](v48, 0x1000C8000313F17);
              }
            }
          }
        }
        goto LABEL_68;
      }
    }
    else
    {
      unsigned int v34 = 0;
      int v35 = 1;
      while (v33 != v23)
      {
        if (v34) {
          BOOL v36 = 0;
        }
        else {
          BOOL v36 = v33 == -2;
        }
        if (v36) {
          unsigned int v34 = v32;
        }
        unsigned int v37 = v31 + v35++;
        unsigned int v31 = v37 & v30;
        uint64_t v32 = (uint64_t *)(v24 + 8 * (v37 & v30));
        uint64_t v33 = *v32;
        if (*v32 == -1) {
          goto LABEL_47;
        }
      }
    }
LABEL_70:
    uint64_t v21 = *(void *)(v21 + 8);
  }
  while (v21);
}

uint64_t sub_1CD23DB14(uint64_t result, uint64_t a2, char a3)
{
  if (!a2) {
    return result;
  }
  if (*(unsigned char *)(a2 + 16) != 81) {
    return result;
  }
  uint64_t v4 = result;
  if (**(void **)result != *(void *)(a2 - 64)) {
    return result;
  }
  unint64_t v5 = *(void *)(a2 - 32);
  if (!v5) {
    return result;
  }
  uint64_t v6 = *(void *)(result + 8);
  uint64_t v7 = *(_WORD *)(a2 + 18) & 0x3FLL;
  if ((a3 & 1) == 0) {
    uint64_t v7 = dword_1CFB32F7C[v7];
  }
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t v9 = *(void *)(v8 + 104);
  unsigned int v10 = *(_DWORD *)(v8 + 120);
  if (!v10) {
    goto LABEL_13;
  }
  unsigned int v11 = v10 - 1;
  unsigned int v12 = (v10 - 1) & ((v5 >> 4) ^ (v5 >> 9));
  uint64_t v13 = v9 + 48 * v12;
  uint64_t v14 = *(void *)(v13 + 24);
  if (v14 != v5)
  {
    int v15 = 1;
    while (v14 != -4096)
    {
      unsigned int v16 = v12 + v15++;
      unsigned int v12 = v16 & v11;
      uint64_t v13 = v9 + 48 * (v16 & v11);
      uint64_t v14 = *(void *)(v13 + 24);
      if (v14 == v5) {
        goto LABEL_14;
      }
    }
LABEL_13:
    uint64_t v13 = v9 + 48 * v10;
  }
LABEL_14:
  if (v13 == v9 + 48 * v10 || (uint64_t SCEVIter = *(void *)(v13 + 40)) == 0) {
    uint64_t SCEVIter = llvm::ScalarEvolution::createSCEVIter(*(llvm::ScalarEvolution **)(v6 + 32), v5);
  }
  uint64_t RangeRef = llvm::ScalarEvolution::getRangeRef(v8, SCEVIter, 1, 0);
  unsigned int v40 = *(_DWORD *)(RangeRef + 8);
  if (v40 > 0x40) {
    operator new[]();
  }
  uint64_t v39 = *(void *)RangeRef;
  unsigned int v42 = *(_DWORD *)(RangeRef + 24);
  if (v42 > 0x40) {
    operator new[]();
  }
  uint64_t v41 = *(void *)(RangeRef + 16);
  llvm::ConstantRange::makeAllowedICmpRegion((llvm::ConstantRange *)&v39, v7, (uint64_t)&v35);
  int v19 = *(void ****)(v4 + 16);
  unsigned int v20 = *((_DWORD *)*v19 + 2);
  if (v20 > 0x40) {
    operator new[]();
  }
  uint64_t v21 = (char *)**v19;
  LODWORD(v45) = *((_DWORD *)*v19 + 2);
  BOOL v44 = v21;
  unsigned int v32 = v20;
  __src = v21;
  llvm::APInt::operator+=((uint64_t)&__src, 1uLL);
  unsigned int v47 = v32;
  uint64_t v46 = __src;
  llvm::ConstantRange::addWithNoWrap((llvm::ConstantRange *)&v35, (llvm::ConstantRange *)&v44, 2, 0, (uint64_t)&__src);
  if (v47 >= 0x41 && v46) {
    MEMORY[0x1D25D9CB0](v46, 0x1000C8000313F17);
  }
  if (v45 >= 0x41 && v44) {
    MEMORY[0x1D25D9CB0](v44, 0x1000C8000313F17);
  }
  uint64_t v22 = **(void **)(v4 + 24);
  uint64_t v23 = **(void **)(v4 + 32);
  unsigned int v28 = v32;
  if (v32 > 0x40) {
    operator new[]();
  }
  uint64_t v27 = __src;
  unsigned int v30 = v34;
  if (v34 > 0x40) {
    operator new[]();
  }
  unsigned int v29 = v33;
  BOOL v44 = 0;
  if (!sub_1CD23E258(*(void *)(v6 + 280), *(_DWORD *)(v6 + 296), v22, v23, &v44)
    || (uint64_t v24 = (uint64_t)v44, v44 == (char *)(*(void *)(v6 + 280) + 48 * *(unsigned int *)(v6 + 296))))
  {
    BOOL v44 = (char *)v22;
    uint64_t v45 = v23;
    unsigned int v47 = v28;
    if (v28 > 0x40) {
      operator new[]();
    }
    uint64_t v46 = v27;
    unsigned int v49 = v30;
    if (v30 > 0x40) {
      operator new[]();
    }
    int v48 = v29;
    uint64_t result = sub_1CD892B1C((uint64_t)v43, v6 + 280, (uint64_t *)&v44, (uint64_t)&v46);
    if (v49 >= 0x41)
    {
      uint64_t result = (uint64_t)v48;
      if (v48) {
        uint64_t result = MEMORY[0x1D25D9CB0](v48, 0x1000C8000313F17);
      }
    }
    if (v47 < 0x41) {
      goto LABEL_31;
    }
    uint64_t result = (uint64_t)v46;
    if (!v46) {
      goto LABEL_31;
    }
  }
  else
  {
    uint64_t v25 = (uint64_t *)(v44 + 16);
    uint64_t result = llvm::ConstantRange::intersectWith((uint64_t)&v27, (llvm::ConstantRange *)(v44 + 16), 0, (uint64_t)&v44);
    if (*(_DWORD *)(v24 + 24) >= 0x41u)
    {
      uint64_t result = *v25;
      if (*v25) {
        uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
      }
    }
    *(void *)(v24 + 16) = v44;
    *(_DWORD *)(v24 + 24) = v45;
    LODWORD(v45) = 0;
    if (*(_DWORD *)(v24 + 40) < 0x41u || (uint64_t result = *(void *)(v24 + 32)) == 0)
    {
      *(void *)(v24 + 32) = v46;
      *(_DWORD *)(v24 + 40) = v47;
      goto LABEL_31;
    }
    uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
    unsigned int v26 = v45;
    *(void *)(v24 + 32) = v46;
    *(_DWORD *)(v24 + 40) = v47;
    unsigned int v47 = 0;
    if (v26 < 0x41) {
      goto LABEL_31;
    }
    uint64_t result = (uint64_t)v44;
    if (!v44) {
      goto LABEL_31;
    }
  }
  uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
LABEL_31:
  if (v30 >= 0x41)
  {
    uint64_t result = (uint64_t)v29;
    if (v29) {
      uint64_t result = MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
    }
  }
  if (v28 >= 0x41)
  {
    uint64_t result = (uint64_t)v27;
    if (v27) {
      uint64_t result = MEMORY[0x1D25D9CB0](v27, 0x1000C8000313F17);
    }
  }
  if (v34 >= 0x41)
  {
    uint64_t result = (uint64_t)v33;
    if (v33) {
      uint64_t result = MEMORY[0x1D25D9CB0](v33, 0x1000C8000313F17);
    }
  }
  if (v32 >= 0x41)
  {
    uint64_t result = (uint64_t)__src;
    if (__src) {
      uint64_t result = MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
    }
  }
  if (v38 >= 0x41)
  {
    uint64_t result = v37;
    if (v37) {
      uint64_t result = MEMORY[0x1D25D9CB0](v37, 0x1000C8000313F17);
    }
  }
  if (v36 >= 0x41)
  {
    uint64_t result = v35;
    if (v35) {
      uint64_t result = MEMORY[0x1D25D9CB0](v35, 0x1000C8000313F17);
    }
  }
  if (v42 >= 0x41)
  {
    uint64_t result = v41;
    if (v41) {
      uint64_t result = MEMORY[0x1D25D9CB0](v41, 0x1000C8000313F17);
    }
  }
  if (v40 >= 0x41)
  {
    uint64_t result = v39;
    if (v39) {
      return MEMORY[0x1D25D9CB0](v39, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t sub_1CD23E258(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a2)
  {
    unint64_t v8 = ((a4 >> 4) ^ (a4 >> 9) | ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32))
       + ~((unint64_t)((a4 >> 4) ^ (a4 >> 9)) << 32);
    unint64_t v9 = (v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13);
    unint64_t v10 = (9 * (v9 ^ (v9 >> 8))) ^ ((9 * (v9 ^ (v9 >> 8))) >> 15);
    int v11 = a2 - 1;
    unsigned int v12 = (a2 - 1) & (((v10 + ~(v10 << 27)) >> 31) ^ (v10 + ~(v10 << 27)));
    unint64_t v5 = (void *)(a1 + 48 * v12);
    uint64_t v13 = *v5;
    uint64_t v14 = v5[1];
    if (*v5 == a3 && v14 == a4)
    {
      uint64_t v6 = 1;
    }
    else
    {
      unsigned int v16 = 0;
      int v17 = 1;
      while (v13 != -4096 || v14 != -4096)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v14 == -8192;
        }
        if (v18 && v13 == -8192) {
          unsigned int v16 = v5;
        }
        unsigned int v20 = v12 + v17++;
        unsigned int v12 = v20 & v11;
        unint64_t v5 = (void *)(a1 + 48 * (v20 & v11));
        uint64_t v13 = *v5;
        uint64_t v14 = v5[1];
        uint64_t v6 = 1;
        if (*v5 == a3 && v14 == a4) {
          goto LABEL_3;
        }
      }
      uint64_t v6 = 0;
      if (v16) {
        unint64_t v5 = v16;
      }
    }
  }
  else
  {
    unint64_t v5 = 0;
    uint64_t v6 = 0;
  }
LABEL_3:
  *a5 = v5;
  return v6;
}

void sub_1CD23E348(uint64_t *a1)
{
  v36[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = sub_1CD23E680(a1[1], *a1);
  if (!v2) {
    return;
  }
  uint64_t v3 = 0;
  uint64_t v4 = **(void **)v2;
  uint64_t v21 = v23;
  uint64_t v22 = 0x200000000;
  uint64_t v26 = v4;
  uint64_t v27 = &v35;
  unsigned int v28 = v36;
  uint64_t v29 = 0;
  int v30 = 0;
  __int16 v31 = 512;
  char v32 = 7;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = &unk_1F2616E88;
  v36[0] = &unk_1F2617008;
  uint64_t v24 = *(void *)(v2 + 40);
  uint64_t v25 = v2 + 24;
  unint64_t v5 = *(unsigned __int8 **)(v2 + 48);
  v17[0] = v5;
  if (v5)
  {
    llvm::MetadataTracking::track((uint64_t)v17, v5, 2);
    uint64_t v3 = v17[0];
  }
  sub_1CB8461A4((uint64_t)&v21, 0, v3);
  if (v17[0])
  {
    int v11 = *(unsigned __int8 *)v17[0];
    if ((v11 - 4) > 0x1E)
    {
      if ((v11 - 3) >= 0xFFFFFFFE) {
        uint64_t v14 = v17[0];
      }
      else {
        uint64_t v14 = 0;
      }
      if ((v11 - 3) < 0xFFFFFFFE)
      {
        if (v11 == 3) {
          *(void *)(v17[0] + 8) = 0;
        }
        goto LABEL_5;
      }
      unint64_t v13 = v14 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v17[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v17[0] + 12)) {
        goto LABEL_5;
      }
      uint64_t v12 = *(void *)(v17[0] + 16);
      if ((v12 & 4) == 0) {
        goto LABEL_5;
      }
      unint64_t v13 = v12 & 0xFFFFFFFFFFFFFFF8;
      if (!v13) {
        goto LABEL_5;
      }
    }
    v19[0] = (const char *)v17;
    sub_1CC5FA668(v13 + 16, v19);
  }
LABEL_5:
  uint64_t v6 = (unsigned __int8 *)a1[2];
  uint64_t v7 = *(void *)*a1;
  __int16 v18 = 257;
  if (*(void *)v6 != v7)
  {
    if (v6[16] <= 0x14u)
    {
      uint64_t v10 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v27 + 28))(v27, 38, v6, v7);
      uint64_t v6 = (unsigned __int8 *)v10;
      if (v10)
      {
        if (*(unsigned __int8 *)(v10 + 16) >= 0x1Cu)
        {
          (*(void (**)(void *, uint64_t, void *, uint64_t, uint64_t))(*v28 + 16))(v28, v10, v17, v24, v25);
          if (v22)
          {
            int v15 = (llvm::MDNode **)v21;
            unsigned int v16 = (llvm::MDNode **)((char *)v21 + 16 * v22);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v6, *(_DWORD *)v15, v15[1]);
              v15 += 2;
            }
            while (v15 != v16);
          }
        }
      }
    }
    else
    {
      __int16 v20 = 257;
      uint64_t v6 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v6, v7, v19, 0);
      (*(void (**)(void *, unsigned __int8 *, void *, uint64_t, uint64_t))(*v28 + 16))(v28, v6, v17, v24, v25);
      if (v22)
      {
        unint64_t v8 = (llvm::MDNode **)v21;
        unint64_t v9 = (llvm::MDNode **)((char *)v21 + 16 * v22);
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v6, *(_DWORD *)v8, v8[1]);
          v8 += 2;
        }
        while (v8 != v9);
      }
    }
  }
  llvm::User::replaceUsesOfWith((llvm::User *)a1[1], (llvm::Value *)*a1, (llvm::Value *)v6);
  if (v21 != v23) {
    free(v21);
  }
}

uint64_t sub_1CD23E680(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if (a1 && *(unsigned char *)(a1 + 16) == 83)
  {
    int v3 = *(_DWORD *)(a1 + 20);
    uint64_t v4 = v3 & 0x7FFFFFF;
    if ((v3 & 0x7FFFFFF) != 0)
    {
      uint64_t v5 = 0;
      do
      {
        int v6 = *(_DWORD *)(a1 + 20);
        if ((v6 & 0x40000000) != 0) {
          uint64_t v7 = *(void *)(a1 - 8);
        }
        else {
          uint64_t v7 = a1 - 32 * (v6 & 0x7FFFFFF);
        }
        if (*(void *)(v7 + 32 * v5) == a2) {
          llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry();
        }
        ++v5;
      }
      while (v5 != v4);
    }
    return 0;
  }
  return v2;
}

unint64_t sub_1CD23EA58(uint64_t a1, llvm::SCEV *a2, const llvm::APInt *a3, int a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  switch(a4)
  {
    case 14:
    case 16:
    case 18:
      __break(1u);
      JUMPOUT(0x1CD23EBC4);
    case 15:
      unint64_t v8 = *(llvm::ScalarEvolution **)(a1 + 32);
      return llvm::ScalarEvolution::getMinusSCEV(v8, a2, a3, 0, 0);
    case 17:
      uint64_t v9 = *(void *)(a1 + 32);
      int v11 = &v13;
      unint64_t v13 = a2;
      uint64_t v14 = a3;
      uint64_t v12 = 0x200000002;
      uint64_t MulExpr = llvm::ScalarEvolution::getMulExpr(v9, (uint64_t)&v11, 0, 0);
      goto LABEL_10;
    case 19:
      int v6 = *(llvm::ScalarEvolution **)(a1 + 32);
      return llvm::ScalarEvolution::getUDivExpr(v6, a2, (unint64_t)a3);
    default:
      uint64_t v4 = *(void *)(a1 + 32);
      int v11 = &v13;
      unint64_t v13 = a2;
      uint64_t v14 = a3;
      uint64_t v12 = 0x200000002;
      uint64_t MulExpr = llvm::ScalarEvolution::getAddExpr(v4, (unint64_t **)&v11, 0, 0);
LABEL_10:
      uint64_t v10 = MulExpr;
      if (v11 != &v13) {
        free(v11);
      }
      return v10;
  }
}

unsigned __int8 *sub_1CD23EBE0(uint64_t a1, unsigned __int8 *a2, uint64_t a3, char a4, uint64_t **a5)
{
  uint64_t v10 = 0;
  v58[1] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = **a5;
  uint64_t v43 = v45;
  uint64_t v44 = 0x200000000;
  uint64_t v48 = v11;
  unsigned int v49 = &v57;
  uint64_t v50 = v58;
  uint64_t v51 = 0;
  int v52 = 0;
  __int16 v53 = 512;
  char v54 = 7;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  unsigned int v57 = &unk_1F2616E88;
  v58[0] = &unk_1F2617008;
  uint64_t v12 = (unsigned __int8 *)a5[6];
  uint64_t v46 = a5[5];
  unsigned int v47 = a5 + 3;
  v39[0] = v12;
  if (v12)
  {
    llvm::MetadataTracking::track((uint64_t)v39, v12, 2);
    uint64_t v10 = v39[0];
  }
  sub_1CB8461A4((uint64_t)&v43, 0, v10);
  if (v39[0])
  {
    int v33 = *(unsigned __int8 *)v39[0];
    if ((v33 - 4) > 0x1E)
    {
      if ((v33 - 3) >= 0xFFFFFFFE) {
        uint64_t v36 = v39[0];
      }
      else {
        uint64_t v36 = 0;
      }
      if ((v33 - 3) < 0xFFFFFFFE)
      {
        if (v33 == 3) {
          *(void *)(v39[0] + 8) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v35 = v36 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v39[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v39[0] + 12)) {
        goto LABEL_4;
      }
      uint64_t v34 = *(void *)(v39[0] + 16);
      if ((v34 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v35 = v34 & 0xFFFFFFFFFFFFFFF8;
      if (!v35) {
        goto LABEL_4;
      }
    }
    v41[0] = (const char *)v39;
    sub_1CC5FA668(v35 + 16, v41);
  }
LABEL_4:
  unint64_t v13 = *(uint64_t **)(a1 + 16);
  int v14 = *((_DWORD *)v13 + 4);
  if (v14)
  {
    uint64_t v15 = a5[5];
    uint64_t v16 = *v13;
    unsigned int v17 = v14 - 1;
    uint64_t v18 = ((v15 >> 4) ^ (v15 >> 9)) & (v14 - 1);
    int v19 = *(uint64_t **)(v16 + 16 * v18);
    if (v15 == v19)
    {
LABEL_9:
      if (*(void *)(v16 + 16 * v18 + 8)) {
        llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor();
      }
    }
    else
    {
      int v20 = 1;
      while (v19 != (uint64_t *)-4096)
      {
        int v21 = v18 + v20++;
        uint64_t v18 = v21 & v17;
        int v19 = *(uint64_t **)(v16 + 16 * v18);
        if (v15 == v19) {
          goto LABEL_9;
        }
      }
    }
  }
  if (a4)
  {
    __int16 v40 = 257;
    if (*(void *)a2 != a3)
    {
      if (a2[16] > 0x14u)
      {
        __int16 v42 = 257;
        a2 = (unsigned __int8 *)llvm::CastInst::Create(40, (uint64_t)a2, a3, v41, 0);
        (*(void (**)(void *, unsigned __int8 *, void *, uint64_t *, uint64_t **))(*v50 + 16))(v50, a2, v39, v46, v47);
        if (v44)
        {
          uint64_t v22 = (llvm::MDNode **)v43;
          uint64_t v23 = (llvm::MDNode **)((char *)v43 + 16 * v44);
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)a2, *(_DWORD *)v22, v22[1]);
            v22 += 2;
          }
          while (v22 != v23);
        }
      }
      else
      {
        uint64_t v26 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v49 + 28))(v49, 40, a2, a3);
        a2 = (unsigned __int8 *)v26;
        if (v26) {
          BOOL v27 = *(unsigned __int8 *)(v26 + 16) >= 0x1Cu;
        }
        else {
          BOOL v27 = 0;
        }
        if (v27)
        {
          (*(void (**)(void *, uint64_t, void *, uint64_t *, uint64_t **))(*v50 + 16))(v50, v26, v39, v46, v47);
          if (v44)
          {
            unsigned int v28 = (llvm::MDNode **)v43;
            uint64_t v29 = (llvm::MDNode **)((char *)v43 + 16 * v44);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)a2, *(_DWORD *)v28, v28[1]);
              v28 += 2;
            }
            while (v28 != v29);
          }
        }
      }
    }
  }
  else
  {
    __int16 v40 = 257;
    if (*(void *)a2 != a3)
    {
      if (a2[16] > 0x14u)
      {
        __int16 v42 = 257;
        a2 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)a2, a3, v41, 0);
        (*(void (**)(void *, unsigned __int8 *, void *, uint64_t *, uint64_t **))(*v50 + 16))(v50, a2, v39, v46, v47);
        if (v44)
        {
          uint64_t v24 = (llvm::MDNode **)v43;
          uint64_t v25 = (llvm::MDNode **)((char *)v43 + 16 * v44);
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)a2, *(_DWORD *)v24, v24[1]);
            v24 += 2;
          }
          while (v24 != v25);
        }
      }
      else
      {
        uint64_t v30 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v49 + 28))(v49, 39, a2, a3);
        a2 = (unsigned __int8 *)v30;
        if (v30) {
          BOOL v31 = *(unsigned __int8 *)(v30 + 16) >= 0x1Cu;
        }
        else {
          BOOL v31 = 0;
        }
        if (v31)
        {
          (*(void (**)(void *, uint64_t, void *, uint64_t *, uint64_t **))(*v50 + 16))(v50, v30, v39, v46, v47);
          if (v44)
          {
            uint64_t v37 = (llvm::MDNode **)v43;
            unsigned int v38 = (llvm::MDNode **)((char *)v43 + 16 * v44);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)a2, *(_DWORD *)v37, v37[1]);
              v37 += 2;
            }
            while (v37 != v38);
          }
        }
      }
    }
  }
  if (v43 != v45) {
    free(v43);
  }
  return a2;
}

BOOL sub_1CD23F358(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)a1;
  int v5 = **(_DWORD **)(a1 + 8);
  uint64_t v6 = *(void *)(*(void *)a1 + 32);
  if (!v5)
  {
    unint64_t v10 = **(void **)(a1 + 16);
    uint64_t v11 = *(void *)(v6 + 104);
    unsigned int v12 = *(_DWORD *)(v6 + 120);
    if (v12)
    {
      unsigned int v13 = ((v10 >> 4) ^ (v10 >> 9)) & (v12 - 1);
      uint64_t v14 = v11 + 48 * v13;
      uint64_t v15 = *(void *)(v14 + 24);
      if (v15 == v10)
      {
LABEL_35:
        if (v14 == v11 + 48 * v12 || (uint64_t SCEVIter = *(llvm::SCEV **)(v14 + 40)) == 0)
        {
          uint64_t SCEVIter = (llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v6, v10);
          uint64_t v6 = *(void *)(v4 + 32);
        }
        uint64_t v41 = **(void **)(a1 + 24);
        int v42 = *(_DWORD *)(v41 + 20);
        if ((v42 & 0x40000000) != 0) {
          uint64_t v43 = *(void *)(v41 - 8);
        }
        else {
          uint64_t v43 = v41 - 32 * (v42 & 0x7FFFFFF);
        }
        unint64_t v44 = *(void *)(v43 + 32);
        uint64_t v45 = *(void *)(v6 + 104);
        unsigned int v46 = *(_DWORD *)(v6 + 120);
        if (v46)
        {
          unsigned int v47 = ((v44 >> 4) ^ (v44 >> 9)) & (v46 - 1);
          uint64_t v48 = v45 + 48 * v47;
          uint64_t v49 = *(void *)(v48 + 24);
          if (v49 == v44) {
            goto LABEL_48;
          }
          int v50 = 1;
          while (v49 != -4096)
          {
            unsigned int v51 = v47 + v50++;
            unsigned int v47 = v51 & (v46 - 1);
            uint64_t v48 = v45 + 48 * v47;
            uint64_t v49 = *(void *)(v48 + 24);
            if (v49 == v44) {
              goto LABEL_48;
            }
          }
        }
        uint64_t v48 = v45 + 48 * v46;
LABEL_48:
        if (v48 == v45 + 48 * v46 || (int v52 = *(llvm::detail::IEEEFloat ***)(v48 + 40)) == 0)
        {
          int v52 = (llvm::detail::IEEEFloat **)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v6, v44);
          uint64_t v6 = *(void *)(v4 + 32);
        }
        __int16 v53 = *(uint64_t ***)(v4 + 8);
        if (a2) {
          unint64_t SignExtendExpr = llvm::ScalarEvolution::getSignExtendExpr((llvm::ScalarEvolution *)v6, v52, v53, 0);
        }
        else {
          unint64_t SignExtendExpr = llvm::ScalarEvolution::getZeroExtendExpr((llvm::ScalarEvolution *)v6, v52, v53, 0);
        }
        goto LABEL_54;
      }
      int v16 = 1;
      while (v15 != -4096)
      {
        unsigned int v17 = v13 + v16++;
        unsigned int v13 = v17 & (v12 - 1);
        uint64_t v14 = v11 + 48 * v13;
        uint64_t v15 = *(void *)(v14 + 24);
        if (v15 == v10) {
          goto LABEL_35;
        }
      }
    }
    uint64_t v14 = v11 + 48 * v12;
    goto LABEL_35;
  }
  uint64_t v7 = **(void **)(a1 + 24);
  int v8 = *(_DWORD *)(v7 + 20);
  if ((v8 & 0x40000000) != 0) {
    uint64_t v9 = *(unint64_t **)(v7 - 8);
  }
  else {
    uint64_t v9 = (unint64_t *)(v7 - 32 * (v8 & 0x7FFFFFF));
  }
  unint64_t v18 = *v9;
  uint64_t v19 = *(void *)(v6 + 104);
  unsigned int v20 = *(_DWORD *)(v6 + 120);
  if (!v20)
  {
LABEL_17:
    uint64_t v22 = v19 + 48 * v20;
    goto LABEL_18;
  }
  unsigned int v21 = ((v18 >> 4) ^ (v18 >> 9)) & (v20 - 1);
  uint64_t v22 = v19 + 48 * v21;
  uint64_t v23 = *(void *)(v22 + 24);
  if (v23 != v18)
  {
    int v24 = 1;
    while (v23 != -4096)
    {
      unsigned int v25 = v21 + v24++;
      unsigned int v21 = v25 & (v20 - 1);
      uint64_t v22 = v19 + 48 * v21;
      uint64_t v23 = *(void *)(v22 + 24);
      if (v23 == v18) {
        goto LABEL_18;
      }
    }
    goto LABEL_17;
  }
LABEL_18:
  if (v22 == v19 + 48 * v20 || (uint64_t v26 = *(llvm::detail::IEEEFloat ***)(v22 + 40)) == 0)
  {
    uint64_t v26 = (llvm::detail::IEEEFloat **)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v6, v18);
    uint64_t v6 = *(void *)(v4 + 32);
  }
  BOOL v27 = *(uint64_t ***)(v4 + 8);
  if (a2) {
    unint64_t ZeroExtendExpr = llvm::ScalarEvolution::getSignExtendExpr((llvm::ScalarEvolution *)v6, v26, v27, 0);
  }
  else {
    unint64_t ZeroExtendExpr = llvm::ScalarEvolution::getZeroExtendExpr((llvm::ScalarEvolution *)v6, v26, v27, 0);
  }
  uint64_t SCEVIter = (llvm::SCEV *)ZeroExtendExpr;
  uint64_t v30 = *(void *)(v4 + 32);
  unint64_t v31 = **(void **)(a1 + 16);
  uint64_t v32 = *(void *)(v30 + 104);
  unsigned int v33 = *(_DWORD *)(v30 + 120);
  if (!v33)
  {
LABEL_30:
    uint64_t v35 = v32 + 48 * v33;
    goto LABEL_31;
  }
  unsigned int v34 = ((v31 >> 4) ^ (v31 >> 9)) & (v33 - 1);
  uint64_t v35 = v32 + 48 * v34;
  uint64_t v36 = *(void *)(v35 + 24);
  if (v36 != v31)
  {
    int v37 = 1;
    while (v36 != -4096)
    {
      unsigned int v38 = v34 + v37++;
      unsigned int v34 = v38 & (v33 - 1);
      uint64_t v35 = v32 + 48 * v34;
      uint64_t v36 = *(void *)(v35 + 24);
      if (v36 == v31) {
        goto LABEL_31;
      }
    }
    goto LABEL_30;
  }
LABEL_31:
  if (v35 == v32 + 48 * v33 || (uint64_t v39 = *(const llvm::APInt **)(v35 + 40)) == 0)
  {
    unint64_t SignExtendExpr = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v30, v31);
LABEL_54:
    uint64_t v39 = (const llvm::APInt *)SignExtendExpr;
  }
  return sub_1CD23EA58(v4, SCEVIter, v39, *(unsigned __int8 *)(**(void **)(a1 + 24) + 16) - 28) == **(void **)(a1 + 32);
}

unint64_t sub_1CD23F678(unint64_t result, unsigned int *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(result + 40) + 56);
  if (v3) {
    BOOL v4 = a3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    unint64_t v6 = result;
    uint64_t v7 = (uint64_t *)(result + 64);
    uint64_t v8 = 4 * a3;
    do
    {
      unsigned int v12 = *a2;
      if ((llvm::CallBase::paramHasAttr(v6, v12, 36) & 1) == 0) {
        *(void *)(v6 + 64) = llvm::AttributeList::addAttributeAtIndex(v7, **(uint64_t ***)v6, v12 + 1, 36);
      }
      uint64_t result = llvm::CallBase::paramHasAttr(v6, v12, 39);
      if ((result & 1) == 0)
      {
        uint64_t v9 = **(void **)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) + 32 * v12);
        unsigned int v10 = *(_DWORD *)(v9 + 8);
        if ((v10 & 0xFE) == 0x12) {
          unsigned int v10 = *(_DWORD *)(**(void **)(v9 + 16) + 8);
        }
        uint64_t v11 = *(void *)(v3 + 112);
        if ((!v11 || (*(unsigned char *)(v11 + 17) & 1) == 0) && v10 <= 0xFF)
        {
          *(void *)(v6 + 64) = llvm::AttributeList::addAttributeAtIndex(v7, **(uint64_t ***)v6, v12 + 1, 39);
          uint64_t result = sub_1CD23F7A8(v6, (int *)&v12, 1, 1uLL);
        }
      }
      ++a2;
      v8 -= 4;
    }
    while (v8);
  }
  return result;
}

unint64_t sub_1CD23F7A8(unint64_t result, int *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = *(void *)(*(void *)(result + 40) + 56);
  if (v4) {
    BOOL v5 = a3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v7 = a2;
    uint64_t v8 = result;
    uint64_t v9 = &a2[a3];
    unsigned int v10 = (llvm::AttributeList *)(result + 64);
    do
    {
      uint64_t v11 = *v7;
      uint64_t v12 = **(void **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32 * v11);
      unsigned int v13 = *(_DWORD *)(v12 + 8);
      if ((v13 & 0xFE) == 0x12) {
        unsigned int v13 = *(_DWORD *)(**(void **)(v12 + 16) + 8);
      }
      uint64_t v14 = *(void *)(v4 + 112);
      if (v14)
      {
        if ((*(unsigned char *)(v14 + 17) & 1) != 0 || v13 > 0xFF)
        {
LABEL_14:
          uint64_t result = llvm::CallBase::paramHasAttr(v8, *v7, 39);
          unint64_t v15 = a4;
          if (!result) {
            goto LABEL_18;
          }
        }
      }
      else if (v13 >= 0x100)
      {
        goto LABEL_14;
      }
      uint64_t result = llvm::AttributeList::getParamDereferenceableOrNullBytes(v10, v11);
      if (result <= a4) {
        unint64_t v15 = a4;
      }
      else {
        unint64_t v15 = result;
      }
LABEL_18:
      unint64_t v16 = *(void *)v10;
      if (*(void *)v10)
      {
        if ((v11 + 2) < *(_DWORD *)(v16 + 8)
          && (uint64_t v17 = *(void *)(v16 + 8 * (v11 + 2) + 40)) != 0
          && (*(unsigned char *)(v17 + 21) & 0x10) != 0)
        {
          unsigned int v20 = (void *)(v17 + 48);
          uint64_t v21 = 8 * *(unsigned int *)(v17 + 8) - 8 * *(unsigned int *)(v17 + 32);
          if (v21)
          {
            unint64_t v22 = v21 >> 3;
            do
            {
              unint64_t v23 = v22 >> 1;
              int v24 = &v20[v22 >> 1];
              uint64_t v25 = *v24;
              if (*v24) {
                LODWORD(v25) = *(_DWORD *)(v25 + 12);
              }
              uint64_t v26 = v24 + 1;
              v22 += ~v23;
              if ((int)v25 < 76) {
                unsigned int v20 = v26;
              }
              else {
                unint64_t v22 = v23;
              }
            }
            while (v22);
          }
          unint64_t v16 = *(void *)(*v20 + 16);
        }
        else
        {
          unint64_t v16 = 0;
        }
      }
      if (v16 >= v15) {
        goto LABEL_32;
      }
      *(void *)(v8 + 64) = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)v10, **(uint64_t ***)v8, (int)v11 + 1, 76);
      uint64_t v18 = *(void *)(v4 + 112);
      if (v18)
      {
        if ((*(unsigned char *)(v18 + 17) & 1) == 0 && v13 <= 0xFF)
        {
LABEL_30:
          *(void *)(v8 + 64) = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)v10, **(uint64_t ***)v8, (int)v11 + 1, 77);
          goto LABEL_31;
        }
      }
      else if (v13 < 0x100)
      {
        goto LABEL_30;
      }
      if (llvm::CallBase::paramHasAttr(v8, v11, 39)) {
        goto LABEL_30;
      }
LABEL_31:
      unint64_t v19 = llvm::Attribute::get(**(uint64_t ***)v8, 0x4Cu, v15);
      int v27 = v11;
      uint64_t result = llvm::AttributeList::addParamAttribute(v10, **(uint64_t ***)v8, &v27, 1, v19);
      *(void *)(v8 + 64) = result;
LABEL_32:
      ++v7;
    }
    while (v7 != v9);
  }
  return result;
}

llvm::Instruction *llvm::LibCallSimplifier::optimizeStrChr(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  uint64_t v6 = *(void *)(*((void *)a2 - 4) + 24);
  uint64_t v7 = (llvm *)*((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  LODWORD(v42) = 0;
  sub_1CD23F678((unint64_t)a2, (unsigned int *)&v42, 1);
  uint64_t v8 = ((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
  if (v8) {
    BOOL v9 = *(unsigned char *)(v8 + 16) == 16;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    __s = 0;
    size_t __n = 0;
    BOOL ConstantStringInfo = llvm::getConstantStringInfo(v7, (const llvm::Value *)&__s, 0, 1);
    uint64_t v22 = *(unsigned int *)(v8 + 32);
    if (!ConstantStringInfo)
    {
      if (v22 > 0x40)
      {
        int v27 = 0;
        int64_t v28 = (unint64_t)(v22 + 63) >> 6;
        do
        {
          if (v28-- < 1) {
            break;
          }
          unint64_t v30 = *(void *)(*(void *)(v8 + 24) + 8 * v28);
          v27 += __clz(v30);
        }
        while (!v30);
        int v31 = v22 | 0xFFFFFFC0;
        if ((v22 & 0x3F) == 0) {
          int v31 = 0;
        }
        if (v27 + v31 != v22) {
          return 0;
        }
      }
      else if (*(void *)(v8 + 24))
      {
        return 0;
      }
      uint64_t result = (llvm::Instruction *)llvm::emitStrLen(v7, (uint64_t)a3, *((void *)this + 2), *((uint64_t **)this + 3));
      if (!result) {
        return result;
      }
      uint64_t v32 = (const char *)result;
      uint64_t v33 = **((void **)a3 + 8) + 1912;
      int v42 = "strchr";
      __int16 v44 = 259;
      unsigned int v34 = (uint64_t *)a3;
      uint64_t v35 = (uint64_t *)v7;
      return sub_1CB930F7C(v34, v33, v35, v32, (uint64_t)&v42);
    }
    if (v22 > 0x40) {
      uint64_t v23 = **(void **)(v8 + 24);
    }
    else {
      uint64_t v23 = (uint64_t)(*(void *)(v8 + 24) << -(char)v22) >> -(char)v22;
    }
    if ((_BYTE)v23)
    {
      uint64_t v21 = (const llvm::APFloat *)__n;
      if (!__n) {
        return llvm::Constant::getNullValue(*(llvm::Constant **)a2, v20, v21);
      }
      int v24 = __s;
      uint64_t v25 = memchr(__s, (char)v23, __n);
      if (!v25) {
        return llvm::Constant::getNullValue(*(llvm::Constant **)a2, v20, v21);
      }
      size_t v26 = v25 - v24;
    }
    else
    {
      size_t v26 = __n;
    }
    if (v26 != -1)
    {
      uint64_t v36 = **((void **)a3 + 8);
      uint64_t v37 = v36 + 1912;
      unsigned int v38 = *(llvm::ConstantInt **)(v36 + 1984);
      unint64_t v39 = *(unsigned int *)(v36 + 1992);
      unsigned int v43 = v39 >> 8;
      if (v39 >> 8 > 0x40) {
        operator new[]();
      }
      if (v39 <= 0xFF) {
        unint64_t v40 = 0;
      }
      else {
        unint64_t v40 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v39) + 63);
      }
      int v42 = (const char *)(v40 & v26);
      uint64_t v41 = (const char *)llvm::ConstantInt::get(v38, (llvm::LLVMContext *)&v42, v21);
      if (v43 >= 0x41 && v42) {
        MEMORY[0x1D25D9CB0](v42, 0x1000C8000313F17);
      }
      int v42 = "strchr";
      __int16 v44 = 259;
      unsigned int v34 = (uint64_t *)a3;
      uint64_t v33 = v37;
      uint64_t v35 = (uint64_t *)v7;
      uint64_t v32 = v41;
      return sub_1CB930F7C(v34, v33, v35, v32, (uint64_t)&v42);
    }
    return llvm::Constant::getNullValue(*(llvm::Constant **)a2, v20, v21);
  }
  uint64_t result = (llvm::Instruction *)llvm::GetStringLength(v7, (const llvm::Value *)8);
  if (!result) {
    return result;
  }
  uint64_t v11 = result;
  LODWORD(v42) = 0;
  sub_1CD23F7A8((unint64_t)a2, (int *)&v42, 1, (unint64_t)result);
  if (*(_DWORD *)(*(void *)(*(void *)(v6 + 16) + 16) + 8) != 8205) {
    return 0;
  }
  uint64_t v12 = ((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
  uint64_t v14 = llvm::IntegerType::get(**(llvm::IntegerType ***)a2, (llvm::LLVMContext *)*(unsigned int *)(*(void *)(*((void *)this + 2) + 232) + 4));
  unint64_t v15 = *(llvm::ConstantInt **)v14;
  unsigned int v16 = *(_DWORD *)(v14 + 8);
  unsigned int v43 = v16 >> 8;
  if (v16 >> 8 > 0x40) {
    operator new[]();
  }
  unint64_t v17 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v16) + 63);
  if (v16 <= 0xFF) {
    unint64_t v17 = 0;
  }
  int v42 = (const char *)(v17 & (unint64_t)v11);
  uint64_t v18 = llvm::ConstantInt::get(v15, (llvm::LLVMContext *)&v42, v13);
  if (v43 >= 0x41 && v42) {
    MEMORY[0x1D25D9CB0](v42, 0x1000C8000313F17);
  }
  uint64_t result = (llvm::Instruction *)llvm::emitMemChr(v7, v12, (uint64_t)v18, (uint64_t)a3, *((void *)this + 2), *((uint64_t **)this + 3));
  if (result)
  {
    if (*((unsigned char *)result + 16) == 84) {
      *((_WORD *)result + 9) = *((_WORD *)result + 9) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
    }
  }
  return result;
}

llvm::Instruction *llvm::LibCallSimplifier::optimizeStrRChr(uint64_t **this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  uint64_t v6 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
  uint64_t v7 = *(llvm **)v6;
  uint64_t v8 = *((void *)v6 + 4);
  int v9 = *(unsigned __int8 *)(v8 + 16);
  LODWORD(v32) = 0;
  sub_1CD23F678((unint64_t)a2, (unsigned int *)&v32, 1);
  if (v8) {
    BOOL v10 = v9 == 16;
  }
  else {
    BOOL v10 = 0;
  }
  if (!v10) {
    return 0;
  }
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  BOOL ConstantStringInfo = llvm::getConstantStringInfo(v7, (const llvm::Value *)&v35, 0, 1);
  uint64_t v15 = *(unsigned int *)(v8 + 32);
  if (ConstantStringInfo)
  {
    if (v15 > 0x40)
    {
      LOBYTE(v16) = **(unsigned char **)(v8 + 24);
      if ((_BYTE)v16)
      {
LABEL_10:
        int v17 = v16;
        uint64_t v18 = v36;
        while (v18)
        {
          uint64_t v19 = v18 - 1;
          int v20 = *(unsigned __int8 *)(v35 - 1 + v18--);
          if (v20 == v17) {
            goto LABEL_19;
          }
        }
        return llvm::Constant::getNullValue(*(llvm::Constant **)a2, v13, v14);
      }
    }
    else
    {
      uint64_t v16 = (uint64_t)(*(void *)(v8 + 24) << -(char)v15) >> -(char)v15;
      if ((_BYTE)v16) {
        goto LABEL_10;
      }
    }
    uint64_t v19 = v36;
    if (v36 == -1) {
      return llvm::Constant::getNullValue(*(llvm::Constant **)a2, v13, v14);
    }
LABEL_19:
    uint64_t v21 = **((void **)a3 + 8);
    uint64_t v22 = v21 + 1912;
    uint64_t v23 = *(llvm::ConstantInt **)(v21 + 1984);
    unsigned int v24 = *(_DWORD *)(v21 + 1992);
    unsigned int v33 = v24 >> 8;
    if (v24 >> 8 > 0x40) {
      operator new[]();
    }
    unint64_t v25 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v24) + 63);
    if (v24 <= 0xFF) {
      unint64_t v25 = 0;
    }
    uint64_t v32 = (const char *)(v25 & v19);
    size_t v26 = (const char *)llvm::ConstantInt::get(v23, (llvm::LLVMContext *)&v32, v14);
    if (v33 >= 0x41)
    {
      if (v32) {
        MEMORY[0x1D25D9CB0](v32, 0x1000C8000313F17);
      }
    }
    uint64_t v32 = "strrchr";
    __int16 v34 = 259;
    return sub_1CB930F7C((uint64_t *)a3, v22, (uint64_t *)v7, v26, (uint64_t)&v32);
  }
  else
  {
    if (v15 > 0x40)
    {
      int v27 = 0;
      int64_t v28 = (unint64_t)(v15 + 63) >> 6;
      do
      {
        if (v28-- < 1) {
          break;
        }
        unint64_t v30 = *(void *)(*(void *)(v8 + 24) + 8 * v28);
        v27 += __clz(v30);
      }
      while (!v30);
      int v31 = v15 | 0xFFFFFFC0;
      if ((v15 & 0x3F) == 0) {
        int v31 = 0;
      }
      if (v27 + v31 != v15) {
        return 0;
      }
    }
    else if (*(void *)(v8 + 24))
    {
      return 0;
    }
    uint64_t result = (llvm::Instruction *)llvm::emitStrChr(v7, 0, a3, this[3]);
    if (result && *((unsigned char *)result + 16) == 84) {
      *((_WORD *)result + 9) = *((_WORD *)result + 9) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
    }
  }
  return result;
}

llvm::Instruction *llvm::LibCallSimplifier::optimizeStrCmp(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
  BOOL v5 = *(llvm **)v4;
  uint64_t v6 = (llvm *)*((void *)v4 + 4);
  if (*(llvm **)v4 != v6)
  {
    __s1 = 0;
    size_t v76 = 0;
    __s2 = 0;
    size_t v74 = 0;
    BOOL ConstantStringInfo = llvm::getConstantStringInfo(v5, (const llvm::Value *)&__s1, 0, 1);
    BOOL v13 = llvm::getConstantStringInfo(v6, (const llvm::Value *)&__s2, 0, 1);
    BOOL v14 = v13;
    int v15 = !v13;
    if (ConstantStringInfo && (v15 & 1) == 0)
    {
      uint64_t v16 = *(llvm::ConstantInt **)a2;
      size_t v17 = v74;
      size_t v18 = v76;
      if (v74 >= v76) {
        size_t v19 = v76;
      }
      else {
        size_t v19 = v74;
      }
      if (!v19 || ((v20 = memcmp(__s1, __s2, v19), v20 >= 0) ? (unint64_t v8 = 1) : (unint64_t v8 = -1), !v20))
      {
        uint64_t v21 = -1;
        if (v18 >= v17) {
          uint64_t v21 = 1;
        }
        if (v18 == v17) {
          unint64_t v8 = 0;
        }
        else {
          unint64_t v8 = v21;
        }
      }
      uint64_t v7 = v16;
      goto LABEL_3;
    }
    if (v76) {
      BOOL v22 = 0;
    }
    else {
      BOOL v22 = ConstantStringInfo;
    }
    if (v22)
    {
      uint64_t v36 = (llvm::Type *)(**((void **)a3 + 8) + 1912);
      v77[0] = "strcmpload";
      __int16 v78 = 259;
      char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(*((void *)a3 + 6) + 56) + 40) + 272), v36, 1);
      unsigned int v38 = (char *)operator new(0x60uLL);
      *((_DWORD *)v38 + 13) = *((_DWORD *)v38 + 13) & 0x38000000 | 1;
      unint64_t v39 = (unsigned __int8 *)(v38 + 32);
      *(void *)unsigned int v38 = 0;
      *((void *)v38 + 1) = 0;
      *((void *)v38 + 2) = 0;
      *((void *)v38 + 3) = v38 + 32;
      __int16 v81 = 257;
      llvm::LoadInst::LoadInst((llvm::Value *)(v38 + 32), (uint64_t)v36, (uint64_t)v6, (const char **)&v79, 0, Alignment, 0);
      (*(void (**)(void, char *, void *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v38 + 32, v77, *((void *)a3 + 6), *((void *)a3 + 7));
      uint64_t v40 = *((unsigned int *)a3 + 2);
      if (v40)
      {
        __int16 v53 = *(void **)a3;
        uint64_t v54 = *(void *)a3 + 16 * v40;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v39, *(_DWORD *)v53, (llvm::MDNode *)v53[1]);
          v53 += 2;
        }
        while (v53 != (void *)v54);
      }
      uint64_t v41 = *(void *)a2;
      __int16 v78 = 257;
      if (*(void *)v39 != v41)
      {
        if (v38[48] <= 0x14u)
        {
          unint64_t v39 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**((void **)a3 + 9) + 224))(*((void *)a3 + 9), 39, v39, v41);
          if (v39) {
            BOOL v52 = v39[16] >= 0x1Cu;
          }
          else {
            BOOL v52 = 0;
          }
          if (v52)
          {
            (*(void (**)(void, unsigned __int8 *, void *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v39, v77, *((void *)a3 + 6), *((void *)a3 + 7));
            uint64_t v69 = *((unsigned int *)a3 + 2);
            if (v69)
            {
              BOOL v70 = *(void **)a3;
              uint64_t v71 = *(void *)a3 + 16 * v69;
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v39, *(_DWORD *)v70, (llvm::MDNode *)v70[1]);
                v70 += 2;
              }
              while (v70 != (void *)v71);
            }
          }
        }
        else
        {
          __int16 v81 = 257;
          unint64_t v39 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)v39, v41, (const char **)&v79, 0);
          (*(void (**)(void, unsigned __int8 *, void *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v39, v77, *((void *)a3 + 6), *((void *)a3 + 7));
          uint64_t v42 = *((unsigned int *)a3 + 2);
          if (v42)
          {
            unsigned int v43 = *(void **)a3;
            uint64_t v44 = *(void *)a3 + 16 * v42;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v39, *(_DWORD *)v43, (llvm::MDNode *)v43[1]);
              v43 += 2;
            }
            while (v43 != (void *)v44);
          }
        }
      }
      __int16 v81 = 257;
      return sub_1CD5A6358((uint64_t)a3, (llvm::BinaryOperator *)v39, (uint64_t)&v79, 0, 0);
    }
    if (v74) {
      BOOL v23 = 0;
    }
    else {
      BOOL v23 = v13;
    }
    if (v23)
    {
      unsigned int v24 = (llvm::Type *)(**((void **)a3 + 8) + 1912);
      v77[0] = "strcmpload";
      __int16 v78 = 259;
      char v25 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(*((void *)a3 + 6) + 56) + 40) + 272), v24, 1);
      size_t v26 = (char *)operator new(0x60uLL);
      *((_DWORD *)v26 + 13) = *((_DWORD *)v26 + 13) & 0x38000000 | 1;
      int v27 = (unsigned __int8 *)(v26 + 32);
      *(void *)size_t v26 = 0;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = 0;
      *((void *)v26 + 3) = v26 + 32;
      __int16 v81 = 257;
      llvm::LoadInst::LoadInst((llvm::Value *)(v26 + 32), (uint64_t)v24, (uint64_t)v5, (const char **)&v79, 0, v25, 0);
      (*(void (**)(void, char *, void *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v26 + 32, v77, *((void *)a3 + 6), *((void *)a3 + 7));
      uint64_t v28 = *((unsigned int *)a3 + 2);
      if (v28)
      {
        __int16 v34 = *(void **)a3;
        uint64_t v35 = *(void *)a3 + 16 * v28;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v27, *(_DWORD *)v34, (llvm::MDNode *)v34[1]);
          v34 += 2;
        }
        while (v34 != (void *)v35);
      }
      uint64_t v29 = *(void *)a2;
      __int16 v78 = 257;
      if (*(void *)v27 != v29)
      {
        if (v26[48] <= 0x14u)
        {
          int v27 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**((void **)a3 + 9) + 224))(*((void *)a3 + 9), 39, v27, v29);
          if (v27) {
            BOOL v33 = v27[16] >= 0x1Cu;
          }
          else {
            BOOL v33 = 0;
          }
          if (v33)
          {
            (*(void (**)(void, unsigned __int8 *, void *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v27, v77, *((void *)a3 + 6), *((void *)a3 + 7));
            uint64_t v66 = *((unsigned int *)a3 + 2);
            if (v66)
            {
              uint64_t v67 = *(void **)a3;
              uint64_t v68 = &v67[2 * v66];
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v27, *(_DWORD *)v67, (llvm::MDNode *)v67[1]);
                v67 += 2;
              }
              while (v67 != v68);
            }
          }
        }
        else
        {
          __int16 v81 = 257;
          int v27 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)v27, v29, (const char **)&v79, 0);
          (*(void (**)(void, unsigned __int8 *, void *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v27, v77, *((void *)a3 + 6), *((void *)a3 + 7));
          uint64_t v30 = *((unsigned int *)a3 + 2);
          if (v30)
          {
            int v31 = *(void **)a3;
            uint64_t v32 = &v31[2 * v30];
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v27, *(_DWORD *)v31, (llvm::MDNode *)v31[1]);
              v31 += 2;
            }
            while (v31 != v32);
          }
        }
      }
      return (llvm::Instruction *)v27;
    }
    unint64_t StringLength = llvm::GetStringLength(v5, (const llvm::Value *)8);
    if (StringLength)
    {
      LODWORD(v79) = 0;
      sub_1CD23F7A8((unint64_t)a2, (int *)&v79, 1, StringLength);
    }
    unint64_t v45 = llvm::GetStringLength(v6, (const llvm::Value *)8);
    if (v45 && (LODWORD(v79) = 1, sub_1CD23F7A8((unint64_t)a2, (int *)&v79, 1, v45), StringLength))
    {
      uint64_t v55 = llvm::IntegerType::get(**(llvm::IntegerType ***)a2, (llvm::LLVMContext *)*(unsigned int *)(*(void *)(*((void *)this + 2) + 232) + 4));
      if (v45 >= StringLength) {
        unint64_t v56 = StringLength;
      }
      else {
        unint64_t v56 = v45;
      }
      unsigned int v57 = *(llvm::ConstantInt **)v55;
      unsigned int v58 = *(_DWORD *)(v55 + 8);
      unsigned int v80 = v58 >> 8;
      if (v58 >> 8 > 0x40) {
        operator new[]();
      }
      if (v58 <= 0xFF) {
        unint64_t v59 = 0;
      }
      else {
        unint64_t v59 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v58) + 63);
      }
      uint64_t v60 = (const char *)(v59 & v56);
    }
    else
    {
      if ((ConstantStringInfo | v15))
      {
        if (ConstantStringInfo && !v14 && sub_1CD240AE0((uint64_t)a2, (uint64_t)v6, StringLength, *((void *)this + 2)))
        {
          uint64_t v46 = llvm::IntegerType::get(**(llvm::IntegerType ***)a2, (llvm::LLVMContext *)*(unsigned int *)(*(void *)(*((void *)this + 2) + 232) + 4));
          uint64_t v48 = *(llvm::ConstantInt **)v46;
          unsigned int v49 = *(_DWORD *)(v46 + 8);
          unsigned int v80 = v49 >> 8;
          if (v49 >> 8 > 0x40) {
            operator new[]();
          }
          if (v49 <= 0xFF) {
            unint64_t v50 = 0;
          }
          else {
            unint64_t v50 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v49) + 63);
          }
          uint64_t v79 = v50 & StringLength;
          unsigned int v51 = v48;
          goto LABEL_88;
        }
LABEL_65:
        uint64_t v79 = 0x100000000;
        sub_1CD23F678((unint64_t)a2, (unsigned int *)&v79, 2);
        return 0;
      }
      if (!sub_1CD240AE0((uint64_t)a2, (uint64_t)v5, v45, *((void *)this + 2))) {
        goto LABEL_65;
      }
      uint64_t v61 = llvm::IntegerType::get(**(llvm::IntegerType ***)a2, (llvm::LLVMContext *)*(unsigned int *)(*(void *)(*((void *)this + 2) + 232) + 4));
      unsigned int v57 = *(llvm::ConstantInt **)v61;
      unsigned int v62 = *(_DWORD *)(v61 + 8);
      unsigned int v80 = v62 >> 8;
      if (v62 >> 8 > 0x40) {
        operator new[]();
      }
      if (v62 <= 0xFF) {
        unint64_t v63 = 0;
      }
      else {
        unint64_t v63 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v62) + 63);
      }
      uint64_t v60 = (const char *)(v63 & v45);
    }
    uint64_t v79 = (uint64_t)v60;
    unsigned int v51 = v57;
LABEL_88:
    unsigned int v64 = llvm::ConstantInt::get(v51, (llvm::LLVMContext *)&v79, v47);
    if (v80 >= 0x41 && v79) {
      MEMORY[0x1D25D9CB0](v79, 0x1000C8000313F17);
    }
    uint64_t v65 = llvm::emitMemCmp(v5, v6, (uint64_t)v64, (uint64_t)a3, *((void *)this + 2), *((uint64_t **)this + 3));
    int v27 = (unsigned __int8 *)v65;
    if (v65 && *(unsigned char *)(v65 + 16) == 84) {
      *(_WORD *)(v65 + 18) = *(_WORD *)(v65 + 18) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
    }
    return (llvm::Instruction *)v27;
  }
  uint64_t v7 = *(llvm::ConstantInt **)a2;
  unint64_t v8 = 0;
LABEL_3:

  return (llvm::Instruction *)llvm::ConstantInt::get(v7, v8, 0);
}

BOOL sub_1CD240AE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  for (uint64_t i = *(void *)(a1 + 8); i; uint64_t i = *(void *)(i + 8))
  {
    unsigned int v9 = 0;
    uint64_t v10 = *(void *)(i + 24);
    if (v10 && *(unsigned char *)(v10 + 16) == 81)
    {
      uint64_t v11 = *(void *)(v10 - 32);
      unsigned int v12 = *(unsigned __int8 *)(v11 + 16);
      if (v11) {
        BOOL v13 = v12 > 0x14;
      }
      else {
        BOOL v13 = 1;
      }
      if (v13) {
        goto LABEL_11;
      }
      if (v12 == 16)
      {
        uint64_t v14 = *(unsigned int *)(v11 + 32);
        if (v14 >= 0x41)
        {
          int v16 = 0;
          int64_t v17 = (unint64_t)(v14 + 63) >> 6;
          do
          {
            BOOL v13 = v17-- < 1;
            if (v13) {
              break;
            }
            unint64_t v18 = *(void *)(*(void *)(v11 + 24) + 8 * v17);
            v16 += __clz(v18);
          }
          while (!v18);
          int v19 = v14 | 0xFFFFFFC0;
          if ((v14 & 0x3F) == 0) {
            int v19 = 0;
          }
          if (v16 + v19 != v14)
          {
LABEL_11:
            unsigned int v9 = 0;
            goto LABEL_12;
          }
        }
        else if (*(void *)(v11 + 24))
        {
          goto LABEL_11;
        }
      }
      else if (v12 == 17)
      {
        if ((sub_1CB844168(v11, 0.0) & 1) == 0) {
          goto LABEL_11;
        }
      }
      else if (v12 - 18 >= 3 && v12 != 13)
      {
        goto LABEL_11;
      }
      unsigned int v9 = 3;
    }
LABEL_12:
    if (v9 <= 1) {
      unsigned int v9 = 1;
    }
    if (v9 != 3) {
      return 0;
    }
  }
  unsigned int v24 = 64;
  uint64_t v23 = a3;
  char v25 = v29;
  size_t v26 = v29;
  uint64_t v27 = 32;
  int v28 = 0;
  int v20 = sub_1CC06D628(a2, 0, (uint64_t)&v23, a4, 0, 0, 0, (uint64_t)&v25, 16);
  if (v26 != v25) {
    free(v26);
  }
  if (v24 >= 0x41 && v23) {
    MEMORY[0x1D25D9CB0](v23, 0x1000C8000313F17);
  }
  if (!v20) {
    return 0;
  }
  uint64_t v21 = *(void *)(*(void *)(*(void *)(a1 + 40) + 56) + 112);
  return !v21 || (*(unsigned char *)(v21 + 18) & 0x20) == 0;
}

llvm::Value *llvm::LibCallSimplifier::optimizeStringLength(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IntegerType **a3, const llvm::Value *a4)
{
  v92[34] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  uint64_t StringLength = llvm::GetStringLength((llvm *)v8, a4);
  if (!StringLength)
  {
    int v14 = *(unsigned __int8 *)(v8 + 16);
    if (v14 != 62)
    {
      if (v14 != 5)
      {
LABEL_57:
        if (v14 == 85)
        {
          uint64_t v39 = llvm::GetStringLength(*(llvm **)(v8 - 64), a4);
          uint64_t v40 = llvm::GetStringLength(*(llvm **)(v8 - 32), a4);
          if (v39 && v40 != 0)
          {
            uint64_t v42 = v40;
            unsigned int v43 = (uint64_t ***)*((void *)this + 4);
            uint64_t v44 = *(void *)***v43;
            if (*(void *)(v44 + 128)
              || (*(unsigned int (**)(void))(**(void **)(v44 + 72) + 48))(*(void *)(v44 + 72)))
            {
              llvm::OptimizationRemark::OptimizationRemark((uint64_t)&v83, (uint64_t)"instcombine", (uint64_t)"simplify-libcalls", 17, (uint64_t)a2);
              __src = "folded strlen(select) to select of constants";
              uint64_t v74 = 44;
              sub_1CC59ADEC((uint64_t *)&v90, (uint64_t)&__src);
              LODWORD(v74) = v84;
              BYTE4(v74) = BYTE4(v84);
              long long v75 = v85;
              uint64_t v76 = v86;
              __src = &unk_1F2616800;
              long long v77 = v87;
              long long v78 = v88;
              uint64_t v79 = v89;
              unsigned int v80 = v82;
              uint64_t v81 = 0x400000000;
              unsigned int v63 = v91;
              if (v91)
              {
                sub_1CD494D68((uint64_t)&v80, (uint64_t)&v90);
                unsigned int v63 = v91;
              }
              v82[32] = v92[32];
              v82[33] = v92[33];
              __src = &unk_1F2616570;
              unsigned int v83 = (const char *)&unk_1F2616800;
              unsigned int v64 = (char *)v90;
              if (v63)
              {
                unint64_t v65 = (unint64_t)v63 << 6;
                do
                {
                  uint64_t v66 = (void **)&v64[v65];
                  if (v64[v65 - 17] < 0) {
                    operator delete(*(v66 - 5));
                  }
                  if (*((char *)v66 - 41) < 0) {
                    operator delete(*(v66 - 8));
                  }
                  v65 -= 64;
                }
                while (v65);
                unsigned int v64 = (char *)v90;
              }
              if (v64 != (char *)v92) {
                free(v64);
              }
              llvm::OptimizationRemarkEmitter::emit(v43, (llvm::DiagnosticInfoOptimizationBase *)&__src);
              __src = &unk_1F2616800;
              uint64_t v67 = (char *)v80;
              if (v81)
              {
                unint64_t v68 = (unint64_t)v81 << 6;
                do
                {
                  uint64_t v69 = (void **)&v67[v68];
                  if (v67[v68 - 17] < 0) {
                    operator delete(*(v69 - 5));
                  }
                  if (*((char *)v69 - 41) < 0) {
                    operator delete(*(v69 - 8));
                  }
                  v68 -= 64;
                }
                while (v68);
                uint64_t v67 = (char *)v80;
              }
              if (v67 != (char *)v82) {
                free(v67);
              }
            }
            unint64_t v45 = *(llvm::Value **)(v8 - 96);
            uint64_t v46 = (llvm::Value *)llvm::ConstantInt::get(*(llvm::ConstantInt **)a2, v39 - 1, 0);
            unsigned int v47 = (llvm::Value *)llvm::ConstantInt::get(*(llvm::ConstantInt **)a2, v42 - 1, 0);
            LOWORD(v86) = 257;
            return llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)a3, v45, v46, v47, (const llvm::Twine *)&v83, 0);
          }
        }
        goto LABEL_65;
      }
      if (*(_WORD *)(v8 + 18) != 34)
      {
LABEL_65:
        if (llvm::isOnlyUsedInZeroEqualityComparison(a2, v10))
        {
          uint64_t v48 = (llvm::Type *)llvm::IntegerType::get(a3[8], a4);
          __src = "strlenfirst";
          LOWORD(v76) = 259;
          char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*((void *)a3[6] + 7) + 40) + 272), v48, 1);
          unint64_t v50 = (char *)operator new(0x60uLL);
          *((_DWORD *)v50 + 13) = *((_DWORD *)v50 + 13) & 0x38000000 | 1;
          unint64_t v18 = (unsigned __int8 *)(v50 + 32);
          *(void *)unint64_t v50 = 0;
          *((void *)v50 + 1) = 0;
          *((void *)v50 + 2) = 0;
          *((void *)v50 + 3) = v50 + 32;
          LOWORD(v86) = 257;
          llvm::LoadInst::LoadInst((llvm::Value *)(v50 + 32), (uint64_t)v48, v8, &v83, 0, Alignment, 0);
          (*(void (**)(llvm::IntegerType *, char *, void **, llvm::IntegerType *, llvm::IntegerType *))(*(void *)a3[10] + 16))(a3[10], v50 + 32, &__src, a3[6], a3[7]);
          uint64_t v51 = *((unsigned int *)a3 + 2);
          if (v51)
          {
            uint64_t v61 = *a3;
            uint64_t v62 = (uint64_t)*a3 + 16 * v51;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v18, *(_DWORD *)v61, *((llvm::MDNode **)v61 + 1));
              uint64_t v61 = (llvm::IntegerType *)((char *)v61 + 16);
            }
            while (v61 != (llvm::IntegerType *)v62);
          }
          uint64_t v52 = *(void *)a2;
          LOWORD(v76) = 257;
          if (*(void *)v18 != v52)
          {
            if (v50[48] <= 0x14u)
            {
              unint64_t v18 = (unsigned __int8 *)(*(uint64_t (**)(llvm::IntegerType *, uint64_t, unsigned __int8 *, uint64_t))(*(void *)a3[9] + 224))(a3[9], 39, v18, v52);
              if (v18) {
                BOOL v57 = v18[16] >= 0x1Cu;
              }
              else {
                BOOL v57 = 0;
              }
              if (v57)
              {
                (*(void (**)(llvm::IntegerType *, unsigned __int8 *, void **, llvm::IntegerType *, llvm::IntegerType *))(*(void *)a3[10] + 16))(a3[10], v18, &__src, a3[6], a3[7]);
                uint64_t v58 = *((unsigned int *)a3 + 2);
                if (v58)
                {
                  unint64_t v59 = *a3;
                  uint64_t v60 = (llvm::IntegerType *)((char *)v59 + 16 * v58);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v18, *(_DWORD *)v59, *((llvm::MDNode **)v59 + 1));
                    unint64_t v59 = (llvm::IntegerType *)((char *)v59 + 16);
                  }
                  while (v59 != v60);
                }
              }
            }
            else
            {
              LOWORD(v86) = 257;
              unint64_t v18 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)v18, v52, &v83, 0);
              (*(void (**)(llvm::IntegerType *, unsigned __int8 *, void **, llvm::IntegerType *, llvm::IntegerType *))(*(void *)a3[10] + 16))(a3[10], v18, &__src, a3[6], a3[7]);
              uint64_t v53 = *((unsigned int *)a3 + 2);
              if (v53)
              {
                uint64_t v54 = *a3;
                uint64_t v55 = (llvm::IntegerType *)((char *)v54 + 16 * v53);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v18, *(_DWORD *)v54, *((llvm::MDNode **)v54 + 1));
                  uint64_t v54 = (llvm::IntegerType *)((char *)v54 + 16);
                }
                while (v54 != v55);
              }
            }
          }
          return (llvm::Value *)v18;
        }
        return 0;
      }
    }
    if (llvm::isGEPBasedOnPointerToString(v8, (int)a4))
    {
      int v15 = *(_DWORD *)(v8 + 20);
      if ((v15 & 0x40000000) != 0) {
        int v16 = *(llvm::Value ***)(v8 - 8);
      }
      else {
        int v16 = (llvm::Value **)(v8 - 32 * (v15 & 0x7FFFFFF));
      }
      if (!llvm::getConstantDataArrayInfo(*v16, (uint64_t *)&v70, a4, 0))
      {
LABEL_56:
        int v14 = *(unsigned __int8 *)(v8 + 16);
        goto LABEL_57;
      }
      if (!v70)
      {
        unint64_t v18 = 0;
        goto LABEL_20;
      }
      int64_t v17 = v72;
      if (v72)
      {
        unint64_t v18 = 0;
        while (llvm::ConstantDataSequential::getElementAsInteger(v70, (int)v18 + v71))
        {
          if (v17 == ++v18) {
            return 0;
          }
        }
LABEL_20:
        int v19 = *(_DWORD *)(v8 + 20);
        if ((v19 & 0x40000000) != 0) {
          uint64_t v20 = *(void *)(v8 - 8);
        }
        else {
          uint64_t v20 = v8 - 32 * (v19 & 0x7FFFFFF);
        }
        uint64_t v21 = *(void *)(v20 + 64);
        if (!a2 || (BOOL v22 = a2, !*((void *)a2 + 5)))
        {
          BOOL v56 = v21 && *(unsigned __int8 *)(v21 + 16) >= 0x1Cu;
          if (!v56 || (BOOL v22 = *(llvm::CallInst **)(v20 + 64), !*(void *)(v21 + 40))) {
            BOOL v22 = 0;
          }
        }
        unsigned int v83 = (const char *)*((void *)this + 2);
        uint64_t v84 = 0;
        uint64_t v86 = 0;
        long long v85 = (unint64_t)v22;
        LOBYTE(v87) = 1;
        sub_1CC16089C((uint64_t *)v21, 0, (const llvm::DataLayout **)&v83, (uint64_t)&__src);
        uint64_t v24 = 24;
        if (*(unsigned char *)(v8 + 16) == 62) {
          uint64_t v24 = 64;
        }
        uint64_t v25 = *(void *)(*(void *)(v8 + v24) + 32);
        p_src = (void **)((char *)__src + 8 * ((v74 - 1) >> 6));
        if (v74 < 0x41) {
          p_src = &__src;
        }
        uint64_t v27 = (1 << (v74 - 1)) & (unint64_t)*p_src;
        if (!v27) {
          goto LABEL_34;
        }
        LODWORD(v84) = v74;
        if (v74 > 0x40) {
          operator new[]();
        }
        unint64_t v28 = ~(unint64_t)__src;
        unint64_t v29 = v74 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v74 : 0;
        unint64_t v23 = v29 & v28;
        if ((v29 & v28) <= (unint64_t)v18)
        {
          LOBYTE(v34) = 1;
        }
        else
        {
LABEL_34:
          int v30 = *(_DWORD *)(v8 + 20);
          if ((v30 & 0x40000000) != 0) {
            uint64_t v31 = *(void *)(v8 - 8);
          }
          else {
            uint64_t v31 = v8 - 32 * (v30 & 0x7FFFFFF);
          }
          uint64_t v32 = (unsigned __int8 *)(v25 - 1);
          BOOL v34 = *(unsigned char *)(*(void *)v31 + 16) == 3 && v18 == v32;
          if (!v27)
          {
            if (v34)
            {
LABEL_50:
              uint64_t v35 = *(void *)a2;
              LOWORD(v86) = 257;
              uint64_t v36 = sub_1CB845504((uint64_t)a3, (unsigned __int8 *)v21, v35, (uint64_t)&v83);
              uint64_t v37 = llvm::ConstantInt::get(*(llvm::ConstantInt **)a2, (unint64_t)v18, 0);
              LOWORD(v86) = 257;
              unint64_t v18 = (unsigned __int8 *)sub_1CB84494C((uint64_t)a3, (uint64_t)v37, (uint64_t)v36, (uint64_t)&v83, 0, 0);
              char v38 = 0;
LABEL_53:
              if (DWORD2(v75) >= 0x41 && (void)v75) {
                MEMORY[0x1D25D9CB0](v75, 0x1000C8000313F17);
              }
              if (v74 >= 0x41 && __src) {
                MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
              }
              if ((v38 & 1) == 0) {
                return (llvm::Value *)v18;
              }
              goto LABEL_56;
            }
LABEL_52:
            char v38 = 1;
            goto LABEL_53;
          }
        }
        if (v74 >= 0x41 && v23) {
          MEMORY[0x1D25D9CB0](v23, 0x1000C8000313F17);
        }
        if (v34) {
          goto LABEL_50;
        }
        goto LABEL_52;
      }
    }
    return 0;
  }
  unint64_t v11 = StringLength - 1;
  unsigned int v12 = *(llvm::ConstantInt **)a2;

  return (llvm::Value *)llvm::ConstantInt::get(v12, v11, 0);
}

llvm::Value *llvm::LibCallSimplifier::optimizeStrStr(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  uint64_t v4 = a2;
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
  uint64_t v7 = *(unsigned __int8 **)v6;
  uint64_t v8 = (llvm *)*((void *)v6 + 4);
  if (*(llvm **)v6 == v8)
  {
    uint64_t v9 = *(void *)a2;
    __int16 v72 = 257;
    if (*(void *)v7 != v9)
    {
      if (v7[16] <= 0x14u)
      {
        uint64_t v7 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**((void **)a3 + 9) + 224))(*((void *)a3 + 9), 49, v7, v9);
        if (v7) {
          BOOL v13 = v7[16] >= 0x1Cu;
        }
        else {
          BOOL v13 = 0;
        }
        if (v13)
        {
          (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v7, v71, *((void *)a3 + 6), *((void *)a3 + 7));
          uint64_t v65 = *((unsigned int *)a3 + 2);
          if (v65)
          {
            uint64_t v66 = *(void **)a3;
            uint64_t v67 = &v66[2 * v65];
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v7, *(_DWORD *)v66, (llvm::MDNode *)v66[1]);
              v66 += 2;
            }
            while (v66 != v67);
          }
        }
      }
      else
      {
        __int16 v74 = 257;
        uint64_t v7 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v7, v9, v73, 0);
        (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v7, v71, *((void *)a3 + 6), *((void *)a3 + 7));
        uint64_t v10 = *((unsigned int *)a3 + 2);
        if (v10)
        {
          unint64_t v11 = *(void **)a3;
          unsigned int v12 = &v11[2 * v10];
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v7, *(_DWORD *)v11, (llvm::MDNode *)v11[1]);
            v11 += 2;
          }
          while (v11 != v12);
        }
      }
    }
    return (llvm::Value *)v7;
  }
  uint64_t v15 = *((void *)a2 + 1);
  if (v15)
  {
    while (1)
    {
      uint64_t v17 = *(void *)(v15 + 24);
      if (!v17
        || *(unsigned char *)(v17 + 16) != 81
        || (*(_WORD *)(v17 + 18) & 0x3E) != 0x20
        || *(unsigned __int8 **)(v17 - 32) != v7)
      {
        break;
      }
      uint64_t v15 = *(void *)(v15 + 8);
      if (!v15) {
        goto LABEL_15;
      }
    }
    v70[0] = 0;
    v70[1] = 0;
    unint64_t v68 = 0;
    size_t v69 = 0;
    BOOL ConstantStringInfo = llvm::getConstantStringInfo((llvm *)v7, (const llvm::Value *)v70, 0, 1);
    BOOL v19 = llvm::getConstantStringInfo(((llvm **)v4 - 4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF))[4], (const llvm::Value *)&v68, 0, 1);
    if (v19 && v69 == 0)
    {
      uint64_t v7 = (unsigned __int8 *)*((void *)v4 - 4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF));
      uint64_t v24 = *(llvm::Constant **)v4;
      __int16 v72 = 257;
      if (*(llvm::Constant **)v7 != v24)
      {
        if (v7[16] <= 0x14u)
        {
          uint64_t v7 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, llvm::Constant *))(**((void **)a3 + 9) + 224))(*((void *)a3 + 9), 49, v7, v24);
          if (v7) {
            BOOL v29 = v7[16] >= 0x1Cu;
          }
          else {
            BOOL v29 = 0;
          }
          if (v29)
          {
            (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v7, v71, *((void *)a3 + 6), *((void *)a3 + 7));
            uint64_t v30 = *((unsigned int *)a3 + 2);
            if (v30)
            {
              uint64_t v31 = *(void **)a3;
              uint64_t v32 = &v31[2 * v30];
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v7, *(_DWORD *)v31, (llvm::MDNode *)v31[1]);
                v31 += 2;
              }
              while (v31 != v32);
            }
          }
        }
        else
        {
          __int16 v74 = 257;
          uint64_t v7 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v7, (uint64_t)v24, v73, 0);
          (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v7, v71, *((void *)a3 + 6), *((void *)a3 + 7));
          uint64_t v25 = *((unsigned int *)a3 + 2);
          if (v25)
          {
            size_t v26 = *(void **)a3;
            uint64_t v27 = &v26[2 * v25];
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v7, *(_DWORD *)v26, (llvm::MDNode *)v26[1]);
              v26 += 2;
            }
            while (v26 != v27);
          }
        }
      }
    }
    else if (ConstantStringInfo && v19)
    {
      uint64_t v21 = llvm::StringRef::find(v70, v68, v69, 0);
      if (v21 == -1)
      {
        return llvm::Constant::getNullValue(*(llvm::Constant **)v4, v22, v23);
      }
      else
      {
        uint64_t v44 = (llvm::IntegerType *)v21;
        unint64_t v45 = (uint64_t *)llvm::castToCStr(*((llvm **)v4 - 4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF)), a3, v23);
        uint64_t v46 = **((void **)a3 + 8) + 1912;
        v73[0] = "strstr";
        __int16 v74 = 259;
        unsigned int v47 = sub_1CD894418((uint64_t)a3, v46, v45, v44, (uint64_t)v73);
        uint64_t v7 = (unsigned __int8 *)v47;
        uint64_t v48 = *(llvm::Constant **)v4;
        __int16 v72 = 257;
        if (*(llvm::Constant **)v47 != v48)
        {
          if (*((unsigned __int8 *)v47 + 16) <= 0x14u)
          {
            uint64_t v7 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, llvm::Instruction *, llvm::Constant *))(**((void **)a3 + 9) + 224))(*((void *)a3 + 9), 49, v47, v48);
            if (v7) {
              BOOL v57 = v7[16] >= 0x1Cu;
            }
            else {
              BOOL v57 = 0;
            }
            if (v57)
            {
              (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v7, v71, *((void *)a3 + 6), *((void *)a3 + 7));
              uint64_t v58 = *((unsigned int *)a3 + 2);
              if (v58)
              {
                unint64_t v59 = *(void **)a3;
                uint64_t v60 = &v59[2 * v58];
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v7, *(_DWORD *)v59, (llvm::MDNode *)v59[1]);
                  v59 += 2;
                }
                while (v59 != v60);
              }
            }
          }
          else
          {
            __int16 v74 = 257;
            uint64_t v7 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v47, (uint64_t)v48, v73, 0);
            (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v7, v71, *((void *)a3 + 6), *((void *)a3 + 7));
            uint64_t v49 = *((unsigned int *)a3 + 2);
            if (v49)
            {
              unint64_t v50 = *(void **)a3;
              uint64_t v51 = &v50[2 * v49];
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v7, *(_DWORD *)v50, (llvm::MDNode *)v50[1]);
                v50 += 2;
              }
              while (v50 != v51);
            }
          }
        }
      }
    }
    else if (v69 == 1 && v19)
    {
      uint64_t v52 = llvm::emitStrChr(*((llvm **)v4 - 4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF)), *v68, a3, *((uint64_t **)this + 3));
      uint64_t v7 = (unsigned __int8 *)v52;
      if (v52)
      {
        uint64_t v53 = *(llvm::Constant **)v4;
        __int16 v72 = 257;
        if (*(llvm::Constant **)v52 != v53)
        {
          if (*(unsigned __int8 *)(v52 + 16) <= 0x14u)
          {
            uint64_t v7 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, uint64_t, llvm::Constant *))(**((void **)a3 + 9) + 224))(*((void *)a3 + 9), 49, v52, v53);
            if (v7) {
              BOOL v61 = v7[16] >= 0x1Cu;
            }
            else {
              BOOL v61 = 0;
            }
            if (v61)
            {
              (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v7, v71, *((void *)a3 + 6), *((void *)a3 + 7));
              uint64_t v62 = *((unsigned int *)a3 + 2);
              if (v62)
              {
                unsigned int v63 = *(void **)a3;
                unsigned int v64 = &v63[2 * v62];
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v7, *(_DWORD *)v63, (llvm::MDNode *)v63[1]);
                  v63 += 2;
                }
                while (v63 != v64);
              }
            }
          }
          else
          {
            __int16 v74 = 257;
            uint64_t v7 = (unsigned __int8 *)llvm::CastInst::Create(49, v52, (uint64_t)v53, v73, 0);
            (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v7, v71, *((void *)a3 + 6), *((void *)a3 + 7));
            uint64_t v54 = *((unsigned int *)a3 + 2);
            if (v54)
            {
              uint64_t v55 = *(void **)a3;
              BOOL v56 = &v55[2 * v54];
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v7, *(_DWORD *)v55, (llvm::MDNode *)v55[1]);
                v55 += 2;
              }
              while (v55 != v56);
            }
          }
        }
      }
    }
    else
    {
      v73[0] = (const char *)0x100000000;
      sub_1CD23F678((unint64_t)v4, (unsigned int *)v73, 2);
      return 0;
    }
    return (llvm::Value *)v7;
  }
LABEL_15:
  uint64_t v16 = llvm::emitStrLen(v8, (uint64_t)a3, *((void *)this + 2), *((uint64_t **)this + 3));
  if (!v16) {
    return 0;
  }
  BOOL v33 = (llvm **)((char *)v4 - 32 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF));
  uint64_t v34 = llvm::emitStrNCmp(*v33, v33[4], v16, (uint64_t)a3, *((void *)this + 2), *((uint64_t **)this + 3));
  if (!v34) {
    return 0;
  }
  uint64_t v37 = *((void *)v4 + 1);
  if (v37)
  {
    char v38 = (llvm::Constant **)v34;
    do
    {
      uint64_t v39 = *(void *)(v37 + 8);
      uint64_t v40 = *(void *)(v37 + 24);
      __int16 v41 = *(_WORD *)(v40 + 18) & 0x3F;
      NullValue = llvm::Constant::getNullValue(*v38, v35, v36);
      v73[0] = "cmp";
      __int16 v74 = 259;
      unsigned int v43 = sub_1CB845F20((uint64_t)a3, v41, v38, (uint64_t)NullValue, (uint64_t)v73);
      (*((void (**)(void, uint64_t, llvm::Instruction *))this + 8))(*((void *)this + 9), v40, v43);
      uint64_t v37 = v39;
    }
    while (v39);
  }
  return v4;
}

uint64_t llvm::LibCallSimplifier::replaceAllUsesWith(llvm::LibCallSimplifier *this, llvm::Instruction *a2, llvm::Value *a3)
{
  return (*((uint64_t (**)(void, llvm::Instruction *, llvm::Value *))this + 8))(*((void *)this + 9), a2, a3);
}

llvm::Value *llvm::LibCallSimplifier::optimizeMemChr(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  uint64_t v6 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
  uint64_t v7 = *((void *)v6 + 8);
  if (v7) {
    BOOL v8 = *(unsigned __int8 *)(v7 + 16) >= 0x1Cu;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8 || (uint64_t v9 = *((void *)v6 + 8), !*(void *)(v7 + 40))) {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(llvm **)v6;
  uint64_t v137 = (const char *)*((void *)this + 2);
  uint64_t v138 = 0;
  uint64_t v140 = 0;
  uint64_t v141 = 0;
  uint64_t v139 = v9;
  char v142 = 1;
  if (sub_1CC1620B8(v7, 0, (uint64_t)&v137))
  {
    LODWORD(v137) = 0;
    sub_1CD23F678((unint64_t)a2, (unsigned int *)&v137, 1);
  }
  BOOL v13 = (llvm::Value *)((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
  if (*((unsigned char *)v13 + 16) == 16) {
    uint64_t v14 = ((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
  }
  else {
    uint64_t v14 = 0;
  }
  if (*(unsigned char *)(v7 + 16) == 16) {
    uint64_t v15 = v7;
  }
  else {
    uint64_t v15 = 0;
  }
  if (v15)
  {
    uint64_t v16 = *(unsigned int *)(v15 + 32);
    if (v16 > 0x40)
    {
      int v27 = 0;
      int64_t v28 = (unint64_t)(v16 + 63) >> 6;
      do
      {
        if (v28-- < 1) {
          break;
        }
        unint64_t v30 = *(void *)(*(void *)(v15 + 24) + 8 * v28);
        v27 += __clz(v30);
      }
      while (!v30);
      int v31 = v16 | 0xFFFFFFC0;
      if ((v16 & 0x3F) == 0) {
        int v31 = 0;
      }
      int v32 = v27 + v31;
      if (v32 == v16) {
        return llvm::Constant::getNullValue(*(llvm::Constant **)a2, v11, v12);
      }
      if (v32 == v16 - 1) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v17 = *(void *)(v15 + 24);
      if (!v17) {
        return llvm::Constant::getNullValue(*(llvm::Constant **)a2, v11, v12);
      }
      if (v17 == 1)
      {
LABEL_19:
        unint64_t v18 = (llvm::Type *)(**((void **)a3 + 8) + 1912);
        v135[0] = "memchr.char0";
        __int16 v136 = 259;
        char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(*((void *)a3 + 6) + 56) + 40) + 272), v18, 1);
        uint64_t v20 = operator new(0x60uLL);
        v20[13] = v20[13] & 0x38000000 | 1;
        uint64_t v21 = (llvm::Instruction *)(v20 + 8);
        *(void *)uint64_t v20 = 0;
        *((void *)v20 + 1) = 0;
        *((void *)v20 + 2) = 0;
        *((void *)v20 + 3) = v20 + 8;
        LOWORD(v141) = 257;
        llvm::LoadInst::LoadInst((llvm::Value *)(v20 + 8), (uint64_t)v18, (uint64_t)v10, &v137, 0, Alignment, 0);
        (*(void (**)(void, llvm::Instruction *, void *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v21, v135, *((void *)a3 + 6), *((void *)a3 + 7));
        uint64_t v22 = *((unsigned int *)a3 + 2);
        if (v22)
        {
          unint64_t v59 = *(void **)a3;
          uint64_t v60 = *(void *)a3 + 16 * v22;
          do
          {
            llvm::Instruction::setMetadata(v21, *(_DWORD *)v59, (llvm::MDNode *)v59[1]);
            v59 += 2;
          }
          while (v59 != (void *)v60);
        }
        uint64_t v23 = **((void **)a3 + 8) + 1912;
        __int16 v136 = 257;
        if (*(void *)v13 != v23)
        {
          if (*((unsigned __int8 *)v13 + 16) <= 0x14u)
          {
            BOOL v13 = (llvm::Value *)(*(uint64_t (**)(void, uint64_t, llvm::Value *, uint64_t))(**((void **)a3 + 9) + 224))(*((void *)a3 + 9), 38, v13, v23);
            if (v13) {
              BOOL v55 = *((unsigned __int8 *)v13 + 16) >= 0x1Cu;
            }
            else {
              BOOL v55 = 0;
            }
            if (v55)
            {
              (*(void (**)(void, llvm::Value *, void *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v13, v135, *((void *)a3 + 6), *((void *)a3 + 7));
              uint64_t v126 = *((unsigned int *)a3 + 2);
              if (v126)
              {
                int v127 = *(void **)a3;
                uint64_t v128 = *(void *)a3 + 16 * v126;
                do
                {
                  llvm::Instruction::setMetadata(v13, *(_DWORD *)v127, (llvm::MDNode *)v127[1]);
                  v127 += 2;
                }
                while (v127 != (void *)v128);
              }
            }
          }
          else
          {
            LOWORD(v141) = 257;
            BOOL v13 = llvm::CastInst::Create(38, (uint64_t)v13, v23, &v137, 0);
            (*(void (**)(void, llvm::Value *, void *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v13, v135, *((void *)a3 + 6), *((void *)a3 + 7));
            uint64_t v24 = *((unsigned int *)a3 + 2);
            if (v24)
            {
              uint64_t v25 = *(void **)a3;
              uint64_t v26 = *(void *)a3 + 16 * v24;
              do
              {
                llvm::Instruction::setMetadata(v13, *(_DWORD *)v25, (llvm::MDNode *)v25[1]);
                v25 += 2;
              }
              while (v25 != (void *)v26);
            }
          }
        }
        uint64_t v137 = "memchr.char0cmp";
        LOWORD(v141) = 259;
        BOOL v56 = sub_1CB845F20((uint64_t)a3, 32, v21, (uint64_t)v13, (uint64_t)&v137);
        NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)a2, v57, v58);
        uint64_t v137 = "memchr.sel";
        LOWORD(v141) = 259;
        uint64_t v52 = a3;
        uint64_t v53 = v56;
        uint64_t v54 = v10;
        return llvm::IRBuilderBase::CreateSelect(v52, v53, v54, NullValue, (const llvm::Twine *)&v137, 0);
      }
    }
  }
  __s = 0;
  size_t __n = 0;
  BOOL ConstantStringInfo = llvm::getConstantStringInfo(v10, (const llvm::Value *)&__s, 0, 0);
  uint64_t result = 0;
  if (!ConstantStringInfo) {
    return result;
  }
  if (v14)
  {
    uint64_t v35 = (char *)(v14 + 24);
    if (*(_DWORD *)(v14 + 32) >= 0x41u) {
      uint64_t v35 = *(char **)v35;
    }
    unsigned int v12 = (const llvm::APFloat *)__n;
    if (__n)
    {
      uint64_t v36 = __s;
      uint64_t v37 = memchr(__s, *v35, __n);
      if (v37)
      {
        unint64_t v38 = v37 - v36;
        if (v37 - v36 != -1)
        {
          uint64_t v39 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v7, v38, 0);
          uint64_t v137 = "memchr.cmp";
          LOWORD(v141) = 259;
          uint64_t v40 = sub_1CB845F20((uint64_t)a3, 37, (void *)v7, (uint64_t)v39, (uint64_t)&v137);
          uint64_t v44 = llvm::Constant::getNullValue(*(llvm::Constant **)a2, v41, v42);
          uint64_t v45 = **((void **)a3 + 8);
          uint64_t v46 = v45 + 1912;
          unsigned int v47 = *(llvm::ConstantInt **)(v45 + 1984);
          unsigned int v48 = *(_DWORD *)(v45 + 1992);
          LODWORD(v138) = v48 >> 8;
          if (v48 >> 8 > 0x40) {
            operator new[]();
          }
          unint64_t v49 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v48) + 63);
          if (v48 <= 0xFF) {
            unint64_t v49 = 0;
          }
          uint64_t v137 = (const char *)(v49 & v38);
          unint64_t v50 = (const char *)llvm::ConstantInt::get(v47, (llvm::LLVMContext *)&v137, v43);
          if (v138 >= 0x41 && v137) {
            MEMORY[0x1D25D9CB0](v137, 0x1000C8000313F17);
          }
          uint64_t v137 = "memchr.ptr";
          LOWORD(v141) = 259;
          NullValue = sub_1CB930F7C((uint64_t *)a3, v46, (uint64_t *)v10, v50, (uint64_t)&v137);
          LOWORD(v141) = 257;
          uint64_t v52 = a3;
          uint64_t v53 = v40;
          uint64_t v54 = v44;
          return llvm::IRBuilderBase::CreateSelect(v52, v53, v54, NullValue, (const llvm::Twine *)&v137, 0);
        }
      }
    }
    return llvm::Constant::getNullValue(*(llvm::Constant **)a2, v11, v12);
  }
  if (!v15) {
    return 0;
  }
  BOOL v61 = (size_t *)(v15 + 24);
  if (*(_DWORD *)(v15 + 32) >= 0x41u) {
    BOOL v61 = (size_t *)*v61;
  }
  size_t v62 = *v61;
  unsigned int v63 = (unsigned __int8 *)__s;
  size_t v64 = __n >= v62 ? v62 : __n;
  size_t __n = v64;
  if (!v64 || !llvm::isOnlyUsedInZeroEqualityComparison(a2, v11)) {
    return 0;
  }
  unint64_t v66 = (unint64_t)v63;
  if (v64 >= 2)
  {
    unint64_t v68 = v63 + 1;
    unsigned __int8 v67 = *v63;
    size_t v69 = v64 - 1;
    unint64_t v66 = (unint64_t)v63;
    BOOL v70 = v63 + 1;
    do
    {
      unsigned int v72 = *v70++;
      unsigned __int8 v71 = v72;
      BOOL v73 = v67 >= v72;
      if (v67 <= v72) {
        unsigned __int8 v67 = v71;
      }
      if (!v73) {
        unint64_t v66 = (unint64_t)v68;
      }
      unint64_t v68 = v70;
      --v69;
    }
    while (v69);
  }
  uint64_t v74 = *((void *)this + 2);
  uint64_t v75 = *(void *)(v74 + 40);
  if (!v75) {
    return 0;
  }
  LODWORD(v66) = *(unsigned __int8 *)v66;
  for (uint64_t i = *(unsigned __int8 **)(v74 + 32); v66 >= *i; ++i)
  {
    uint64_t result = 0;
    if (!--v75) {
      return result;
    }
  }
  if (v66 <= 7) {
    unint64_t v66 = 7;
  }
  else {
    unint64_t v66 = v66;
  }
  unint64_t v77 = v66 | (v66 >> 1) | ((v66 | (v66 >> 1)) >> 2);
  unint64_t v78 = v77 | (v77 >> 4);
  unsigned __int8 v79 = v78 + 1;
  unsigned int v80 = (llvm::LLVMContext *)(v78 + 1);
  unsigned int v132 = v80;
  if (v80 > 0x40) {
    operator new[]();
  }
  uint64_t v131 = 0;
  unsigned int v81 = (v78 + 1);
  do
  {
    unint64_t v82 = *v63;
    uint64_t v83 = 1 << v82;
    if (v81 > 0x40) {
      *(void *)(v131 + ((v82 >> 3) & 0x18)) |= v83;
    }
    else {
      v131 |= v83;
    }
    ++v63;
    --v64;
  }
  while (v64);
  uint64_t v84 = llvm::ConstantInt::get(*((llvm::ConstantInt **)a3 + 8), (llvm::LLVMContext *)&v131, v65);
  uint64_t v85 = *v84;
  LOWORD(v141) = 257;
  uint64_t v86 = sub_1CB844B8C((uint64_t)a3, (unsigned __int8 *)v13, v85, (uint64_t)&v137);
  uint64_t v87 = llvm::IntegerType::get(*((llvm::IntegerType **)a3 + 8), v80);
  uint64_t v89 = *(llvm::ConstantInt **)v87;
  unsigned int v90 = *(_DWORD *)(v87 + 8);
  LODWORD(v138) = v90 >> 8;
  if (v90 >> 8 > 0x40) {
    operator new[]();
  }
  unint64_t v91 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v90) + 63);
  if (v90 <= 0xFF) {
    LOBYTE(v91) = 0;
  }
  uint64_t v137 = (const char *)v91;
  unsigned int v92 = llvm::ConstantInt::get(v89, (llvm::LLVMContext *)&v137, v88);
  if (v138 >= 0x41 && v137) {
    MEMORY[0x1D25D9CB0](v137, 0x1000C8000313F17);
  }
  LOWORD(v141) = 257;
  BOOL v93 = sub_1CBF52474((uint64_t)a3, v86, (uint64_t)v92, (uint64_t)&v137);
  uint64_t v94 = llvm::IntegerType::get(*((llvm::IntegerType **)a3 + 8), v80);
  uint64_t v96 = *(llvm::ConstantInt **)v94;
  unsigned int v97 = *(_DWORD *)(v94 + 8);
  LODWORD(v138) = v97 >> 8;
  if (v97 >> 8 > 0x40) {
    operator new[]();
  }
  unint64_t v98 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v97) + 63);
  if (v97 <= 0xFF) {
    LOBYTE(v98) = 0;
  }
  uint64_t v137 = (const char *)(v98 & v79);
  uint64_t v99 = llvm::ConstantInt::get(v96, (llvm::LLVMContext *)&v137, v95);
  if (v138 >= 0x41 && v137) {
    MEMORY[0x1D25D9CB0](v137, 0x1000C8000313F17);
  }
  uint64_t v137 = "memchr.bounds";
  LOWORD(v141) = 259;
  uint64_t v100 = sub_1CB845F20((uint64_t)a3, 36, v93, (uint64_t)v99, (uint64_t)&v137);
  uint64_t v101 = llvm::IntegerType::get(*((llvm::IntegerType **)a3 + 8), v80);
  uint64_t v103 = *(llvm::ConstantInt **)v101;
  unsigned int v104 = *(_DWORD *)(v101 + 8);
  LODWORD(v138) = v104 >> 8;
  if (v104 >> 8 > 0x40) {
    operator new[]();
  }
  if (v104 <= 0xFF) {
    LOBYTE(v105) = 0;
  }
  else {
    unint64_t v105 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v104) + 63);
  }
  uint64_t v137 = (const char *)(v105 & 1);
  int v106 = llvm::ConstantInt::get(v103, (llvm::LLVMContext *)&v137, v102);
  if (v138 >= 0x41 && v137) {
    MEMORY[0x1D25D9CB0](v137, 0x1000C8000313F17);
  }
  LOWORD(v141) = 257;
  unsigned int v107 = sub_1CC242524((uint64_t)a3, (uint64_t)v106, (uint64_t)v93, (uint64_t)&v137, 0, 0);
  LOWORD(v141) = 257;
  uint64_t v108 = (llvm::Constant **)sub_1CBF52474((uint64_t)a3, v107, (uint64_t)v84, (uint64_t)&v137);
  v135[0] = "memchr.bits";
  __int16 v136 = 259;
  uint64_t v111 = llvm::Constant::getNullValue(*v108, v109, v110);
  uint64_t v112 = (llvm::Constant **)sub_1CB845F20((uint64_t)a3, 33, v108, (uint64_t)v111, (uint64_t)v135);
  v135[0] = "memchr";
  __int16 v136 = 259;
  uint64_t v115 = llvm::Constant::getNullValue(*v112, v113, v114);
  Select = llvm::IRBuilderBase::CreateSelect(a3, v100, (llvm::Value *)v112, v115, (const llvm::Twine *)v135, 0);
  uint64_t v117 = *(void *)a2;
  __int16 v130 = 257;
  if (*(void *)Select == v117)
  {
    char v118 = Select;
  }
  else if (*((unsigned __int8 *)Select + 16) <= 0x14u)
  {
    uint64_t v122 = (*(uint64_t (**)(void, uint64_t, llvm::Value *, uint64_t))(**((void **)a3 + 9) + 224))(*((void *)a3 + 9), 48, Select, v117);
    char v118 = (llvm::Instruction *)v122;
    if (v122)
    {
      if (*(unsigned __int8 *)(v122 + 16) >= 0x1Cu)
      {
        (*(void (**)(void, uint64_t, char *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v122, v129, *((void *)a3 + 6), *((void *)a3 + 7));
        uint64_t v123 = *((unsigned int *)a3 + 2);
        if (v123)
        {
          uint64_t v124 = *(void **)a3;
          int v125 = &v124[2 * v123];
          do
          {
            llvm::Instruction::setMetadata(v118, *(_DWORD *)v124, (llvm::MDNode *)v124[1]);
            v124 += 2;
          }
          while (v124 != v125);
        }
      }
    }
  }
  else
  {
    LOWORD(v141) = 257;
    char v118 = llvm::CastInst::Create(48, (uint64_t)Select, v117, &v137, 0);
    (*(void (**)(void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10));
    uint64_t v119 = *((unsigned int *)a3 + 2);
    if (v119)
    {
      int v120 = *(void **)a3;
      int v121 = &v120[2 * v119];
      do
      {
        llvm::Instruction::setMetadata(v118, *(_DWORD *)v120, (llvm::MDNode *)v120[1]);
        v120 += 2;
      }
      while (v120 != v121);
    }
  }
  if (v132 >= 0x41 && v131) {
    MEMORY[0x1D25D9CB0](v131, 0x1000C8000313F17);
  }
  return v118;
}

llvm::Instruction *llvm::LibCallSimplifier::optimizeMemCmpBCmpCommon(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
  BOOL v5 = *(unsigned __int8 **)v4;
  uint64_t v6 = (unsigned __int8 *)*((void *)v4 + 4);
  if (*(unsigned __int8 **)v4 != v6)
  {
    uint64_t v9 = *((void *)v4 + 8);
    __s1 = (void *)0x100000000;
    sub_1CD243A74((unint64_t)a2, (unsigned int *)&__s1, 2, v9, *((void *)this + 2));
    if (v9) {
      BOOL v12 = *(unsigned char *)(v9 + 16) == 16;
    }
    else {
      BOOL v12 = 0;
    }
    if (!v12) {
      return 0;
    }
    if (*(_DWORD *)(v9 + 32) > 0x40u)
    {
      size_t v16 = **(void **)(v9 + 24);
      if (v16)
      {
LABEL_12:
        if (v16 == 1)
        {
          uint64_t v17 = (llvm::Type *)(**((void **)a3 + 8) + 1912);
          unint64_t v18 = llvm::castToCStr((llvm *)v5, a3, v11);
          __s2 = "lhsc";
          __int16 v121 = 259;
          char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(*((void *)a3 + 6) + 56) + 40) + 272), v17, 1);
          uint64_t v20 = (char *)operator new(0x60uLL);
          *((_DWORD *)v20 + 13) = *((_DWORD *)v20 + 13) & 0x38000000 | 1;
          uint64_t v21 = (unsigned __int8 *)(v20 + 32);
          *(void *)uint64_t v20 = 0;
          *((void *)v20 + 1) = 0;
          *((void *)v20 + 2) = 0;
          *((void *)v20 + 3) = v20 + 32;
          __int16 v124 = 257;
          llvm::LoadInst::LoadInst((llvm::Value *)(v20 + 32), (uint64_t)v17, (uint64_t)v18, (const char **)&__s1, 0, Alignment, 0);
          (*(void (**)(void, char *, void **, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v20 + 32, &__s2, *((void *)a3 + 6), *((void *)a3 + 7));
          uint64_t v23 = *((unsigned int *)a3 + 2);
          if (v23)
          {
            unsigned int v72 = *(void **)a3;
            uint64_t v73 = *(void *)a3 + 16 * v23;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v21, *(_DWORD *)v72, (llvm::MDNode *)v72[1]);
              v72 += 2;
            }
            while (v72 != (void *)v73);
          }
          uint64_t v24 = *(void *)a2;
          __s2 = "lhsv";
          __int16 v121 = 259;
          if (*(void *)v21 != v24)
          {
            if (v20[48] <= 0x14u)
            {
              uint64_t v21 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**((void **)a3 + 9) + 224))(*((void *)a3 + 9), 39, v21, v24);
              if (v21) {
                BOOL v60 = v21[16] >= 0x1Cu;
              }
              else {
                BOOL v60 = 0;
              }
              if (v60)
              {
                (*(void (**)(void, unsigned __int8 *, void **, void, void))(**((void **)a3 + 10)
                                                                                           + 16))(*((void *)a3 + 10), v21, &__s2, *((void *)a3 + 6), *((void *)a3 + 7));
                uint64_t v104 = *((unsigned int *)a3 + 2);
                if (v104)
                {
                  unint64_t v105 = *(void **)a3;
                  uint64_t v106 = *(void *)a3 + 16 * v104;
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v21, *(_DWORD *)v105, (llvm::MDNode *)v105[1]);
                    v105 += 2;
                  }
                  while (v105 != (void *)v106);
                }
              }
            }
            else
            {
              __int16 v124 = 257;
              uint64_t v21 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)v21, v24, (const char **)&__s1, 0);
              (*(void (**)(void, unsigned __int8 *, void **, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v21, &__s2, *((void *)a3 + 6), *((void *)a3 + 7));
              uint64_t v25 = *((unsigned int *)a3 + 2);
              if (v25)
              {
                uint64_t v26 = *(void **)a3;
                uint64_t v27 = *(void *)a3 + 16 * v25;
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v21, *(_DWORD *)v26, (llvm::MDNode *)v26[1]);
                  v26 += 2;
                }
                while (v26 != (void *)v27);
              }
            }
          }
          BOOL v61 = (llvm::Type *)(**((void **)a3 + 8) + 1912);
          size_t v62 = llvm::castToCStr((llvm *)v6, a3, v22);
          __s2 = "rhsc";
          __int16 v121 = 259;
          char v63 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(*((void *)a3 + 6) + 56) + 40) + 272), v61, 1);
          size_t v64 = (char *)operator new(0x60uLL);
          *((_DWORD *)v64 + 13) = *((_DWORD *)v64 + 13) & 0x38000000 | 1;
          uint64_t v65 = (unsigned __int8 *)(v64 + 32);
          *(void *)size_t v64 = 0;
          *((void *)v64 + 1) = 0;
          *((void *)v64 + 2) = 0;
          *((void *)v64 + 3) = v64 + 32;
          __int16 v124 = 257;
          llvm::LoadInst::LoadInst((llvm::Value *)(v64 + 32), (uint64_t)v61, (uint64_t)v62, (const char **)&__s1, 0, v63, 0);
          (*(void (**)(void, char *, void **, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v64 + 32, &__s2, *((void *)a3 + 6), *((void *)a3 + 7));
          uint64_t v66 = *((unsigned int *)a3 + 2);
          if (v66)
          {
            uint64_t v74 = *(void **)a3;
            uint64_t v75 = *(void *)a3 + 16 * v66;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v65, *(_DWORD *)v74, (llvm::MDNode *)v74[1]);
              v74 += 2;
            }
            while (v74 != (void *)v75);
          }
          uint64_t v67 = *(void *)a2;
          __s2 = "rhsv";
          __int16 v121 = 259;
          if (*(void *)v65 != v67)
          {
            if (v64[48] <= 0x14u)
            {
              uint64_t v65 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**((void **)a3 + 9) + 224))(*((void *)a3 + 9), 39, v65, v67);
              if (v65) {
                BOOL v71 = v65[16] >= 0x1Cu;
              }
              else {
                BOOL v71 = 0;
              }
              if (v71)
              {
                (*(void (**)(void, unsigned __int8 *, void **, void, void))(**((void **)a3 + 10)
                                                                                           + 16))(*((void *)a3 + 10), v65, &__s2, *((void *)a3 + 6), *((void *)a3 + 7));
                uint64_t v107 = *((unsigned int *)a3 + 2);
                if (v107)
                {
                  uint64_t v108 = *(void **)a3;
                  uint64_t v109 = *(void *)a3 + 16 * v107;
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v65, *(_DWORD *)v108, (llvm::MDNode *)v108[1]);
                    v108 += 2;
                  }
                  while (v108 != (void *)v109);
                }
              }
            }
            else
            {
              __int16 v124 = 257;
              uint64_t v65 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)v65, v67, (const char **)&__s1, 0);
              (*(void (**)(void, unsigned __int8 *, void **, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v65, &__s2, *((void *)a3 + 6), *((void *)a3 + 7));
              uint64_t v68 = *((unsigned int *)a3 + 2);
              if (v68)
              {
                size_t v69 = *(void **)a3;
                uint64_t v70 = *(void *)a3 + 16 * v68;
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v65, *(_DWORD *)v69, (llvm::MDNode *)v69[1]);
                  v69 += 2;
                }
                while (v69 != (void *)v70);
              }
            }
          }
          __s1 = "chardiff";
          __int16 v124 = 259;
          return sub_1CB84494C((uint64_t)a3, (uint64_t)v21, (uint64_t)v65, (uint64_t)&__s1, 0, 0);
        }
        else
        {
          uint64_t v29 = *((void *)this + 2);
          uint64_t v30 = *(void *)(v29 + 32);
          int v31 = *(char **)(v29 + 40);
          int v32 = &v31[v30];
          if (8 * v16 <= 0xFF)
          {
            BOOL v33 = (char *)memchr(*(void **)(v29 + 32), (char)(8 * v16), *(void *)(v29 + 40));
            if (v33) {
              int v32 = v33;
            }
          }
          if (&v32[-v30] != v31 && llvm::isOnlyUsedInZeroEqualityComparison(a2, v10))
          {
            unint64_t v38 = (llvm::Type *)llvm::IntegerType::get(**(llvm::IntegerType ***)a2, (llvm::LLVMContext *)(8 * v16));
            char v39 = llvm::DataLayout::getAlignment((llvm::DataLayout *)v29, v38, 0);
            uint64_t v40 = 0;
            if (v5 && v5[16] <= 0x14u)
            {
              __int16 v41 = (llvm::Constant *)llvm::PointerType::get(v38, 0);
              uint64_t v46 = (llvm *)v5;
              if (*(llvm::Constant **)v5 != v41) {
                uint64_t v46 = sub_1CC56C0C0((llvm *)0x31, (llvm::detail::IEEEFloat *)v5, v41, 0);
              }
              uint64_t v40 = (llvm::Instruction *)llvm::ConstantFoldLoadFromConstPtr(v46, v38, (llvm::Type *)v29, v42, v43, v44, v45);
            }
            uint64_t v116 = v38;
            unsigned int v47 = 0;
            uint64_t v48 = 1 << v39;
            if (v6 && v6[16] <= 0x14u)
            {
              unint64_t v49 = (llvm::Constant *)llvm::PointerType::get(v116, 0);
              uint64_t v54 = (llvm *)v6;
              if (*(llvm::Constant **)v6 != v49) {
                uint64_t v54 = sub_1CC56C0C0((llvm *)0x31, (llvm::detail::IEEEFloat *)v6, v49, 0);
              }
              unsigned int v47 = (llvm::Instruction *)llvm::ConstantFoldLoadFromConstPtr(v54, v116, (llvm::Type *)v29, v50, v51, v52, v53);
            }
            if ((v40
               || 1 << llvm::getOrEnforceKnownAlignment((uint64_t)v5, 0, (unsigned __int8 *)v29, a2, 0, 0) >= (unint64_t)v48)
              && (v47
               || 1 << llvm::getOrEnforceKnownAlignment((uint64_t)v6, 0, (unsigned __int8 *)v29, a2, 0, 0) >= (unint64_t)v48))
            {
              if (!v40)
              {
                unsigned int v55 = *(_DWORD *)(*(void *)v5 + 8);
                if ((v55 & 0xFE) == 0x12) {
                  unsigned int v55 = *(_DWORD *)(**(void **)(*(void *)v5 + 16) + 8);
                }
                unint64_t v56 = llvm::PointerType::get(v116, (llvm::Type *)(v55 >> 8));
                __int16 v118 = 257;
                if (*(void *)v5 != v56)
                {
                  if (v5[16] <= 0x14u)
                  {
                    BOOL v5 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, unint64_t))(**((void **)a3 + 9) + 224))(*((void *)a3 + 9), 49, v5, v56);
                    if (v5) {
                      BOOL v76 = v5[16] >= 0x1Cu;
                    }
                    else {
                      BOOL v76 = 0;
                    }
                    if (v76)
                    {
                      (*(void (**)(void, unsigned __int8 *, void *, void, void))(**((void **)a3 + 10)
                                                                                                  + 16))(*((void *)a3 + 10), v5, v117, *((void *)a3 + 6), *((void *)a3 + 7));
                      uint64_t v110 = *((unsigned int *)a3 + 2);
                      if (v110)
                      {
                        uint64_t v111 = *(void **)a3;
                        uint64_t v112 = *(void *)a3 + 16 * v110;
                        do
                        {
                          llvm::Instruction::setMetadata((llvm::Instruction *)v5, *(_DWORD *)v111, (llvm::MDNode *)v111[1]);
                          v111 += 2;
                        }
                        while (v111 != (void *)v112);
                      }
                    }
                  }
                  else
                  {
                    __int16 v124 = 257;
                    BOOL v5 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v5, v56, (const char **)&__s1, 0);
                    (*(void (**)(void, unsigned __int8 *, void *, void, void))(**((void **)a3 + 10)
                                                                                                + 16))(*((void *)a3 + 10), v5, v117, *((void *)a3 + 6), *((void *)a3 + 7));
                    uint64_t v57 = *((unsigned int *)a3 + 2);
                    if (v57)
                    {
                      uint64_t v58 = *(void **)a3;
                      uint64_t v59 = *(void *)a3 + 16 * v57;
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v5, *(_DWORD *)v58, (llvm::MDNode *)v58[1]);
                        v58 += 2;
                      }
                      while (v58 != (void *)v59);
                    }
                  }
                }
                __s2 = "lhsv";
                __int16 v121 = 259;
                char v77 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(*((void *)a3 + 6) + 56) + 40) + 272), v116, 1);
                unint64_t v78 = operator new(0x60uLL);
                v78[13] = v78[13] & 0x38000000 | 1;
                uint64_t v40 = (llvm::Instruction *)(v78 + 8);
                *(void *)unint64_t v78 = 0;
                *((void *)v78 + 1) = 0;
                *((void *)v78 + 2) = 0;
                *((void *)v78 + 3) = v78 + 8;
                __int16 v124 = 257;
                llvm::LoadInst::LoadInst((llvm::Value *)(v78 + 8), (uint64_t)v116, (uint64_t)v5, (const char **)&__s1, 0, v77, 0);
                (*(void (**)(void, llvm::Instruction *, void **, void, void))(**((void **)a3 + 10)
                                                                                             + 16))(*((void *)a3 + 10), v40, &__s2, *((void *)a3 + 6), *((void *)a3 + 7));
                uint64_t v79 = *((unsigned int *)a3 + 2);
                if (v79)
                {
                  uint64_t v100 = *(void **)a3;
                  uint64_t v101 = *(void *)a3 + 16 * v79;
                  do
                  {
                    llvm::Instruction::setMetadata(v40, *(_DWORD *)v100, (llvm::MDNode *)v100[1]);
                    v100 += 2;
                  }
                  while (v100 != (void *)v101);
                }
              }
              if (!v47)
              {
                unsigned int v80 = *(_DWORD *)(*(void *)v6 + 8);
                if ((v80 & 0xFE) == 0x12) {
                  unsigned int v80 = *(_DWORD *)(**(void **)(*(void *)v6 + 16) + 8);
                }
                unsigned int v81 = v116;
                unint64_t v82 = llvm::PointerType::get(v116, (llvm::Type *)(v80 >> 8));
                __int16 v118 = 257;
                if (*(void *)v6 != v82)
                {
                  if (v6[16] <= 0x14u)
                  {
                    uint64_t v6 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, unint64_t))(**((void **)a3 + 9) + 224))(*((void *)a3 + 9), 49, v6, v82);
                    if (v6) {
                      BOOL v86 = v6[16] >= 0x1Cu;
                    }
                    else {
                      BOOL v86 = 0;
                    }
                    if (v86)
                    {
                      (*(void (**)(void, unsigned __int8 *, void *, void, void))(**((void **)a3 + 10)
                                                                                                  + 16))(*((void *)a3 + 10), v6, v117, *((void *)a3 + 6), *((void *)a3 + 7));
                      uint64_t v113 = *((unsigned int *)a3 + 2);
                      if (v113)
                      {
                        uint64_t v114 = *(void **)a3;
                        uint64_t v115 = *(void *)a3 + 16 * v113;
                        do
                        {
                          llvm::Instruction::setMetadata((llvm::Instruction *)v6, *(_DWORD *)v114, (llvm::MDNode *)v114[1]);
                          v114 += 2;
                        }
                        while (v114 != (void *)v115);
                      }
                      unsigned int v81 = v116;
                    }
                  }
                  else
                  {
                    __int16 v124 = 257;
                    uint64_t v6 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v6, v82, (const char **)&__s1, 0);
                    (*(void (**)(void, unsigned __int8 *, void *, void, void))(**((void **)a3 + 10)
                                                                                                + 16))(*((void *)a3 + 10), v6, v117, *((void *)a3 + 6), *((void *)a3 + 7));
                    uint64_t v83 = *((unsigned int *)a3 + 2);
                    if (v83)
                    {
                      uint64_t v84 = *(void **)a3;
                      uint64_t v85 = *(void *)a3 + 16 * v83;
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v6, *(_DWORD *)v84, (llvm::MDNode *)v84[1]);
                        v84 += 2;
                      }
                      while (v84 != (void *)v85);
                    }
                  }
                }
                __s2 = "rhsv";
                __int16 v121 = 259;
                char v87 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(*((void *)a3 + 6) + 56) + 40) + 272), v81, 1);
                long long v88 = operator new(0x60uLL);
                v88[13] = v88[13] & 0x38000000 | 1;
                uint64_t v89 = (uint64_t)v81;
                unsigned int v47 = (llvm::Instruction *)(v88 + 8);
                *(void *)long long v88 = 0;
                *((void *)v88 + 1) = 0;
                *((void *)v88 + 2) = 0;
                *((void *)v88 + 3) = v88 + 8;
                __int16 v124 = 257;
                llvm::LoadInst::LoadInst((llvm::Value *)(v88 + 8), v89, (uint64_t)v6, (const char **)&__s1, 0, v87, 0);
                (*(void (**)(void, llvm::Instruction *, void **, void, void))(**((void **)a3 + 10)
                                                                                             + 16))(*((void *)a3 + 10), v47, &__s2, *((void *)a3 + 6), *((void *)a3 + 7));
                uint64_t v90 = *((unsigned int *)a3 + 2);
                if (v90)
                {
                  uint64_t v102 = *(void **)a3;
                  uint64_t v103 = *(void *)a3 + 16 * v90;
                  do
                  {
                    llvm::Instruction::setMetadata(v47, *(_DWORD *)v102, (llvm::MDNode *)v102[1]);
                    v102 += 2;
                  }
                  while (v102 != (void *)v103);
                }
              }
              __int16 v121 = 257;
              unint64_t v91 = sub_1CB845F20((uint64_t)a3, 33, v40, (uint64_t)v47, (uint64_t)&__s2);
              BOOL v13 = (unsigned __int8 *)v91;
              uint64_t v92 = *(void *)a2;
              v117[0] = "memcmp";
              __int16 v118 = 259;
              if (*(void *)v91 != v92)
              {
                if (*((unsigned __int8 *)v91 + 16) <= 0x14u)
                {
                  BOOL v13 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, llvm::Instruction *, uint64_t))(**((void **)a3 + 9) + 224))(*((void *)a3 + 9), 39, v91, v92);
                  if (v13) {
                    BOOL v96 = v13[16] >= 0x1Cu;
                  }
                  else {
                    BOOL v96 = 0;
                  }
                  if (v96)
                  {
                    (*(void (**)(void, unsigned __int8 *, void *, void, void))(**((void **)a3 + 10)
                                                                                                + 16))(*((void *)a3 + 10), v13, v117, *((void *)a3 + 6), *((void *)a3 + 7));
                    uint64_t v97 = *((unsigned int *)a3 + 2);
                    if (v97)
                    {
                      unint64_t v98 = *(void **)a3;
                      uint64_t v99 = &v98[2 * v97];
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v13, *(_DWORD *)v98, (llvm::MDNode *)v98[1]);
                        v98 += 2;
                      }
                      while (v98 != v99);
                    }
                  }
                }
                else
                {
                  __int16 v124 = 257;
                  BOOL v13 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)v91, v92, (const char **)&__s1, 0);
                  (*(void (**)(void, unsigned __int8 *, void *, void, void))(**((void **)a3 + 10)
                                                                                              + 16))(*((void *)a3 + 10), v13, v117, *((void *)a3 + 6), *((void *)a3 + 7));
                  uint64_t v93 = *((unsigned int *)a3 + 2);
                  if (v93)
                  {
                    uint64_t v94 = *(void **)a3;
                    unsigned int v95 = &v94[2 * v93];
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v13, *(_DWORD *)v94, (llvm::MDNode *)v94[1]);
                      v94 += 2;
                    }
                    while (v94 != v95);
                  }
                }
              }
              return (llvm::Instruction *)v13;
            }
          }
          __s1 = 0;
          size_t v123 = 0;
          __s2 = 0;
          size_t v120 = 0;
          BOOL v13 = 0;
          if (!llvm::getConstantStringInfo((llvm *)v5, (const llvm::Value *)&__s1, 0, 1)) {
            return (llvm::Instruction *)v13;
          }
          BOOL v13 = 0;
          BOOL v34 = llvm::getConstantStringInfo((llvm *)v6, (const llvm::Value *)&__s2, 0, 1) && v123 >= v16;
          if (!v34 || v120 < v16) {
            return (llvm::Instruction *)v13;
          }
          int v36 = memcmp(__s1, __s2, v16);
          if (v36 < 0) {
            unint64_t v37 = -1;
          }
          else {
            unint64_t v37 = v36 != 0;
          }
          return (llvm::Instruction *)llvm::ConstantInt::get(*(llvm::ConstantInt **)a2, v37, 0);
        }
      }
    }
    else
    {
      size_t v16 = *(void *)(v9 + 24);
      if (v16) {
        goto LABEL_12;
      }
    }
    return llvm::Constant::getNullValue(*(llvm::Constant **)a2, v10, v11);
  }
  uint64_t v14 = *(llvm::Constant **)a2;

  return llvm::Constant::getNullValue(v14, a2, a3);
}

uint64_t sub_1CD243A74(unint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v9 = *(unsigned __int8 *)(a4 + 16);
  if (a4 && v9 == 16)
  {
    sub_1CD23F678(a1, a2, a3);
    uint64_t v10 = (unint64_t *)(a4 + 24);
    if (*(_DWORD *)(a4 + 32) >= 0x41u) {
      uint64_t v10 = (unint64_t *)*v10;
    }
    unint64_t v11 = *v10;
    return sub_1CD23F7A8(a1, (int *)a2, a3, v11);
  }
  else
  {
    if (!a4 || v9 < 0x1C || (uint64_t v13 = a4, !*(void *)(a4 + 40))) {
      uint64_t v13 = 0;
    }
    uint64_t v21 = a5;
    uint64_t v22 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v23 = v13;
    char v26 = 1;
    uint64_t result = sub_1CC1620B8(a4, 0, (uint64_t)&v21);
    if (result)
    {
      sub_1CD23F678(a1, a2, a3);
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v22 = &v20;
      uint64_t v23 = 0;
      uint64_t v24 = &v19;
      uint64_t v25 = 0;
      uint64_t result = sub_1CD8981C0((uint64_t)&v21, a4);
      if (result)
      {
        uint64_t v14 = (unint64_t *)v20;
        if (*(_DWORD *)(v20 + 8) >= 0x41u) {
          uint64_t v14 = *(unint64_t **)v20;
        }
        unint64_t v15 = *v14;
        size_t v16 = (unint64_t *)v19;
        if (*(_DWORD *)(v19 + 8) >= 0x41u) {
          size_t v16 = *(unint64_t **)v19;
        }
        unint64_t v17 = *v16;
        if (v17 >= v15) {
          unint64_t v18 = v15;
        }
        else {
          unint64_t v18 = v17;
        }
        return sub_1CD23F7A8(a1, (int *)a2, a3, v18);
      }
    }
  }
  return result;
}

uint64_t llvm::LibCallSimplifier::optimizeMemCpy(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  v26[2] = *(void **)MEMORY[0x1E4F143B8];
  BOOL v5 = (uint64_t *)((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[8];
  *(void *)&long long v24 = 0x100000000;
  sub_1CD243A74((unint64_t)a2, (unsigned int *)&v24, 2, (uint64_t)v5, *((void *)this + 2));
  uint64_t v6 = *((void *)a2 - 4);
  if (v6 && !*(unsigned char *)(v6 + 16) && *(void *)(v6 + 24) == *((void *)a2 + 9) && (*(unsigned char *)(v6 + 33) & 0x20) != 0) {
    return 0;
  }
  uint64_t v7 = (llvm::Value **)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  MemTransferInst = llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)a3, 194, *v7, 256, v7[4], 256, v5, 0, 0, 0, 0, 0);
  uint64_t v9 = *((void *)a2 + 8);
  MemTransferInst[8] = (uint64_t **)v9;
  uint64_t v10 = (uint64_t *)(MemTransferInst + 8);
  unint64_t v11 = *MemTransferInst;
  long long v24 = 0uLL;
  v26[0] = 0;
  v26[1] = 0;
  uint64_t v25 = v26;
  int v12 = *((unsigned __int8 *)v11 + 8);
  if (v12 == 13)
  {
    uint64_t v13 = 0x308000480000;
    uint64_t v14 = 12288;
  }
  else
  {
    long long v24 = xmmword_1CFAC6340;
    if (v12 == 15)
    {
      unint64_t v16 = 0x1001000000002;
      uint64_t v15 = 1032;
      goto LABEL_10;
    }
    uint64_t v13 = 0x1308000480002;
    uint64_t v14 = 12296;
  }
  *(void *)&long long v24 = v13 | 0x8000000000040000;
  *((void *)&v24 + 1) = v14 | 0x3F0;
  uint64_t v15 = v14 | 0x7F0;
  unint64_t v16 = v13 | 0x8000001000040000;
LABEL_10:
  int v17 = v12;
  if ((v12 & 0xFE) == 0x12) {
    int v17 = *(unsigned __int8 *)(*v11[2] + 8);
  }
  if (v17 != 15) {
    *((void *)&v24 + 1) = v15;
  }
  if (v12 == 7) {
    *(void *)&long long v24 = v16;
  }
  unint64_t v18 = *v11;
  if (v9 && *(_DWORD *)(v9 + 8) >= 2u) {
    uint64_t v19 = *(void *)(v9 + 48);
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v23 = v19;
  uint64_t v20 = llvm::AttributeSet::removeAttributes(&v23, v18, (uint64_t)&v24);
  if (v19 == v20) {
    uint64_t v21 = *v10;
  }
  else {
    uint64_t v21 = llvm::AttributeList::setAttributesAtIndex(v10, v18, 0, v20);
  }
  MemTransferInst[8] = (uint64_t **)v21;
  sub_1CC1E4850((uint64_t)&v25, v26[0]);
  if (*((unsigned char *)MemTransferInst + 16) == 84) {
    *((_WORD *)MemTransferInst + 9) = *((_WORD *)MemTransferInst + 9) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
  }
  return *((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
}

uint64_t llvm::LibCallSimplifier::optimizeMemMove(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  v26[2] = *(void **)MEMORY[0x1E4F143B8];
  BOOL v5 = (void *)((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[8];
  *(void *)&long long v24 = 0x100000000;
  sub_1CD243A74((unint64_t)a2, (unsigned int *)&v24, 2, (uint64_t)v5, *((void *)this + 2));
  uint64_t v6 = *((void *)a2 - 4);
  if (v6 && !*(unsigned char *)(v6 + 16) && *(void *)(v6 + 24) == *((void *)a2 + 9) && (*(unsigned char *)(v6 + 33) & 0x20) != 0) {
    return 0;
  }
  BOOL v8 = (llvm::Value **)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  MemMove = llvm::IRBuilderBase::CreateMemMove((uint64_t)a3, *v8, 256, v8[4], 256, v5, 0, 0, 0, 0);
  uint64_t v10 = *((void *)a2 + 8);
  MemMove[8] = (uint64_t **)v10;
  unint64_t v11 = (uint64_t *)(MemMove + 8);
  int v12 = *MemMove;
  long long v24 = 0uLL;
  v26[0] = 0;
  v26[1] = 0;
  uint64_t v25 = v26;
  int v13 = *((unsigned __int8 *)v12 + 8);
  if (v13 == 13)
  {
    uint64_t v14 = 0x308000480000;
    uint64_t v15 = 12288;
  }
  else
  {
    long long v24 = xmmword_1CFAC6340;
    if (v13 == 15)
    {
      unint64_t v17 = 0x1001000000002;
      uint64_t v16 = 1032;
      goto LABEL_11;
    }
    uint64_t v14 = 0x1308000480002;
    uint64_t v15 = 12296;
  }
  *(void *)&long long v24 = v14 | 0x8000000000040000;
  *((void *)&v24 + 1) = v15 | 0x3F0;
  uint64_t v16 = v15 | 0x7F0;
  unint64_t v17 = v14 | 0x8000001000040000;
LABEL_11:
  int v18 = v13;
  if ((v13 & 0xFE) == 0x12) {
    int v18 = *(unsigned __int8 *)(*v12[2] + 8);
  }
  if (v18 != 15) {
    *((void *)&v24 + 1) = v16;
  }
  if (v13 == 7) {
    *(void *)&long long v24 = v17;
  }
  uint64_t v19 = *v12;
  if (v10 && *(_DWORD *)(v10 + 8) >= 2u) {
    uint64_t v20 = *(void *)(v10 + 48);
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t v23 = v20;
  uint64_t v21 = llvm::AttributeSet::removeAttributes(&v23, v19, (uint64_t)&v24);
  if (v20 == v21) {
    uint64_t v22 = *v11;
  }
  else {
    uint64_t v22 = llvm::AttributeList::setAttributesAtIndex(v11, v19, 0, v21);
  }
  MemMove[8] = (uint64_t **)v22;
  sub_1CC1E4850((uint64_t)&v25, v26[0]);
  if (*((unsigned char *)MemMove + 16) == 84) {
    *((_WORD *)MemMove + 9) = *((_WORD *)MemMove + 9) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
  }
  return *((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
}

uint64_t llvm::LibCallSimplifier::optimizeMemSet(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  BOOL v5 = (uint64_t *)((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[8];
  LODWORD(v26) = 0;
  sub_1CD243A74((unint64_t)a2, (unsigned int *)&v26, 1, (uint64_t)v5, *((void *)this + 2));
  uint64_t v7 = *((void *)a2 - 4);
  if (v7 && !*(unsigned char *)(v7 + 16) && *(void *)(v7 + 24) == *((void *)a2 + 9) && (*(unsigned char *)(v7 + 33) & 0x20) != 0) {
    return 0;
  }
  BOOL v8 = (llvm::CastInst *)((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
  uint64_t v9 = (llvm::Type ***)(**((void **)a3 + 8) + 1912);
  LOWORD(v29) = 257;
  uint64_t v10 = sub_1CBF56614((uint64_t)a3, v8, v9, 0, (uint64_t)&v26, v6);
  MemSet = llvm::IRBuilderBase::CreateMemSet((uint64_t)a3, *((llvm::Value **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)), (uint64_t)v10, v5, 256, 0, 0, 0, 0);
  uint64_t v12 = *((void *)a2 + 8);
  MemSet[8] = (uint64_t **)v12;
  int v13 = (uint64_t *)(MemSet + 8);
  uint64_t v14 = *MemSet;
  long long v26 = 0uLL;
  int64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v27 = &v28;
  int v15 = *((unsigned __int8 *)v14 + 8);
  if (v15 == 13)
  {
    uint64_t v16 = 0x308000480000;
    uint64_t v17 = 12288;
  }
  else
  {
    long long v26 = xmmword_1CFAC6340;
    if (v15 == 15)
    {
      unint64_t v19 = 0x1001000000002;
      uint64_t v18 = 1032;
      goto LABEL_10;
    }
    uint64_t v16 = 0x1308000480002;
    uint64_t v17 = 12296;
  }
  *(void *)&long long v26 = v16 | 0x8000000000040000;
  *((void *)&v26 + 1) = v17 | 0x3F0;
  uint64_t v18 = v17 | 0x7F0;
  unint64_t v19 = v16 | 0x8000001000040000;
LABEL_10:
  int v20 = v15;
  if ((v15 & 0xFE) == 0x12) {
    int v20 = *(unsigned __int8 *)(*v14[2] + 8);
  }
  if (v20 != 15) {
    *((void *)&v26 + 1) = v18;
  }
  if (v15 == 7) {
    *(void *)&long long v26 = v19;
  }
  uint64_t v21 = *v14;
  if (v12 && *(_DWORD *)(v12 + 8) >= 2u) {
    uint64_t v22 = *(void *)(v12 + 48);
  }
  else {
    uint64_t v22 = 0;
  }
  uint64_t v30 = v22;
  uint64_t v23 = llvm::AttributeSet::removeAttributes(&v30, v21, (uint64_t)&v26);
  if (v22 == v23) {
    uint64_t v24 = *v13;
  }
  else {
    uint64_t v24 = llvm::AttributeList::setAttributesAtIndex(v13, v21, 0, v23);
  }
  MemSet[8] = (uint64_t **)v24;
  sub_1CC1E4850((uint64_t)&v27, v28);
  if (*((unsigned char *)MemSet + 16) == 84) {
    *((_WORD *)MemSet + 9) = *((_WORD *)MemSet + 9) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
  }
  return *((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
}

unsigned __int8 *sub_1CD24435C(uint64_t a1, uint64_t *a2, llvm::LLVMContext *a3)
{
  if (*(unsigned __int8 *)(a1 + 16) - 71 > 1) {
    return 0;
  }
  int v6 = *(_DWORD *)(a1 + 20);
  if ((v6 & 0x40000000) != 0) {
    uint64_t v7 = *(llvm::Type ****)(a1 - 8);
  }
  else {
    uint64_t v7 = (llvm::Type ***)(a1 - 32 * (v6 & 0x7FFFFFF));
  }
  BOOL v8 = (unsigned __int8 *)*v7;
  unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(**v7);
  if (v10 == 1)
  {
    unsigned int v28 = PrimitiveSizeInBits;
    unsigned int PrimitiveSizeInBits = v28;
  }
  if (PrimitiveSizeInBits >= a3)
  {
    if (PrimitiveSizeInBits == a3 && *(unsigned char *)(a1 + 16) == 72) {
      goto LABEL_17;
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 16) != 72)
  {
    uint64_t v11 = llvm::IntegerType::get((llvm::IntegerType *)a2[8], a3);
    __int16 v30 = 257;
    if (*(void *)v8 != v11)
    {
      if (v8[16] <= 0x14u)
      {
        BOOL v8 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t))(*(void *)a2[9] + 224))(a2[9], 39, v8, v11);
        if (v8) {
          BOOL v24 = v8[16] >= 0x1Cu;
        }
        else {
          BOOL v24 = 0;
        }
        if (v24)
        {
          (*(void (**)(uint64_t, unsigned __int8 *, unsigned char *, uint64_t, uint64_t))(*(void *)a2[10] + 16))(a2[10], v8, v29, a2[6], a2[7]);
          uint64_t v25 = *((unsigned int *)a2 + 2);
          if (v25)
          {
            uint64_t v26 = *a2;
            uint64_t v27 = v26 + 16 * v25;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v8, *(_DWORD *)v26, *(llvm::MDNode **)(v26 + 8));
              v26 += 16;
            }
            while (v26 != v27);
          }
        }
      }
      else
      {
        __int16 v34 = 257;
        BOOL v8 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)v8, v11, v33, 0);
        (*(void (**)(uint64_t, unsigned __int8 *, unsigned char *, uint64_t, uint64_t))(*(void *)a2[10] + 16))(a2[10], v8, v29, a2[6], a2[7]);
        uint64_t v12 = *((unsigned int *)a2 + 2);
        if (v12)
        {
          uint64_t v13 = *a2;
          uint64_t v14 = v13 + 16 * v12;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v8, *(_DWORD *)v13, *(llvm::MDNode **)(v13 + 8));
            v13 += 16;
          }
          while (v13 != v14);
        }
      }
    }
    return v8;
  }
LABEL_17:
  uint64_t v15 = llvm::IntegerType::get((llvm::IntegerType *)a2[8], a3);
  __int16 v32 = 257;
  if (*(void *)v8 != v15)
  {
    if (v8[16] <= 0x14u)
    {
      BOOL v8 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t))(*(void *)a2[9] + 224))(a2[9], 40, v8, v15);
      if (v8) {
        BOOL v20 = v8[16] >= 0x1Cu;
      }
      else {
        BOOL v20 = 0;
      }
      if (v20)
      {
        (*(void (**)(uint64_t, unsigned __int8 *, unsigned char *, uint64_t, uint64_t))(*(void *)a2[10] + 16))(a2[10], v8, v31, a2[6], a2[7]);
        uint64_t v21 = *((unsigned int *)a2 + 2);
        if (v21)
        {
          uint64_t v22 = *a2;
          uint64_t v23 = v22 + 16 * v21;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v8, *(_DWORD *)v22, *(llvm::MDNode **)(v22 + 8));
            v22 += 16;
          }
          while (v22 != v23);
        }
      }
    }
    else
    {
      __int16 v34 = 257;
      BOOL v8 = (unsigned __int8 *)llvm::CastInst::Create(40, (uint64_t)v8, v15, v33, 0);
      (*(void (**)(uint64_t, unsigned __int8 *, unsigned char *, uint64_t, uint64_t))(*(void *)a2[10] + 16))(a2[10], v8, v31, a2[6], a2[7]);
      uint64_t v16 = *((unsigned int *)a2 + 2);
      if (v16)
      {
        uint64_t v17 = *a2;
        uint64_t v18 = v17 + 16 * v16;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v8, *(_DWORD *)v17, *(llvm::MDNode **)(v17 + 8));
          v17 += 16;
        }
        while (v17 != v18);
      }
    }
  }
  return v8;
}

uint64_t sub_1CD2446E0(uint64_t ***a1, uint64_t a2, int a3, uint64_t **a4, uint64_t *a5, void *a6)
{
  uint64_t v15 = a2;
  uint64_t v14 = a1;
  if (a3)
  {
    v12[0] = *a1;
    uint64_t Declaration = llvm::Intrinsic::getDeclaration(a4, 280, (uint64_t)v12, 1);
    if (Declaration) {
      uint64_t v9 = *(uint64_t ***)(Declaration + 24);
    }
    else {
      uint64_t v9 = 0;
    }
    v12[0] = "sqrt";
    __int16 v13 = 259;
    return sub_1CB845BAC(a5, v9, (uint64_t **)Declaration, (uint64_t *)&v14, 1, (uint64_t)v12, 0);
  }
  else if (llvm::hasFloatFn(a6, (uint64_t)*a1, 0x189u, 0x18Au, 0x18Bu))
  {
    return llvm::emitUnaryFloatFnCall(a1, a6, 0x189u, 0x18Au, 0x18Bu, (uint64_t)a5, &v15);
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::LibCallSimplifier::optimizePow(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  int v6 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
  uint64_t v7 = *(unsigned __int8 **)v6;
  BOOL v8 = (uint64_t ***)*((void *)a2 - 4);
  if (!v8 || *((unsigned char *)v8 + 16) || v8[3] != *((uint64_t ***)a2 + 9)) {
    BOOL v8 = 0;
  }
  uint64_t v9 = (unsigned __int8 *)*((void *)v6 + 4);
  if ((*((unsigned char *)v8 + 23) & 0x10) != 0)
  {
    uint64_t v10 = ***v8;
    uint64_t v11 = *(void *)(v10 + 152);
    uint64_t v12 = *(unsigned int *)(v10 + 168);
    if (v12)
    {
      LODWORD(v13) = (v12 - 1) & ((v8 >> 4) ^ (v8 >> 9));
      uint64_t v14 = (uint64_t ****)(v11 + 16 * v13);
      uint64_t v15 = *v14;
      if (*v14 == v8)
      {
LABEL_13:
        uint64_t v18 = v14[1];
        size_t v20 = (size_t)*v18;
        unint64_t v19 = (char *)(v18 + 2);
        size_t __n = v20;
        goto LABEL_14;
      }
      int v16 = 1;
      while (v15 != (uint64_t ***)-4096)
      {
        int v17 = v13 + v16++;
        uint64_t v13 = v17 & (v12 - 1);
        uint64_t v15 = *(uint64_t ****)(v11 + 16 * v13);
        if (v15 == v8)
        {
          uint64_t v14 = (uint64_t ****)(v11 + 16 * v13);
          goto LABEL_13;
        }
      }
    }
    uint64_t v14 = (uint64_t ****)(v11 + 16 * v12);
    goto LABEL_13;
  }
  size_t __n = 0;
  unint64_t v19 = &byte_1CFBCE98E;
LABEL_14:
  size_t v69 = *(llvm::ConstantFP ***)a2;
  uint64_t v21 = *(uint64_t ***)(*(void *)(*((void *)a2 + 5) + 56) + 40);
  unsigned int v22 = *((unsigned __int8 *)a2 + 17);
  char v76 = 0;
  int v23 = *((_DWORD *)a3 + 24);
  uint64_t v72 = *((void *)a3 + 11);
  char v24 = *((unsigned char *)a3 + 100);
  char v70 = *((unsigned char *)a3 + 102);
  char v71 = *((unsigned char *)a3 + 101);
  int v25 = v22 >> 1;
  if (v22 >> 1 == 127) {
    int v25 = -1;
  }
  *((_DWORD *)a3 + 24) = v25;
  unsigned int v26 = v7[16];
  if (v7 && (SplatValue = v7, v26 == 17)
    || v26 <= 0x14
    && (*(_DWORD *)(*(void *)v7 + 8) & 0xFE) == 0x12
    && (SplatValue = llvm::Constant::getSplatValue((llvm::Constant *)v7, 0)) != 0
    && SplatValue[16] == 17)
  {
    if (sub_1CB844168((uint64_t)SplatValue, 1.0)) {
      goto LABEL_57;
    }
  }
  uint64_t v67 = v21;
  uint64_t v28 = llvm::LibCallSimplifier::replacePowWithExp(this, a2, a3);
  if (v28) {
    goto LABEL_58;
  }
  unsigned int v29 = v9[16];
  if (v9 && (__int16 v30 = v9, v29 == 17)
    || v29 <= 0x14
    && (*(_DWORD *)(*(void *)v9 + 8) & 0xFE) == 0x12
    && (__int16 v30 = llvm::Constant::getSplatValue((llvm::Constant *)v9, 0)) != 0
    && v30[16] == 17)
  {
    if (sub_1CB844168((uint64_t)v30, -1.0))
    {
      uint64_t v43 = llvm::ConstantFP::get(v69, v42, 1.0);
      *(void *)&long long v77 = "reciprocal";
      LOWORD(v79) = 259;
      uint64_t v32 = sub_1CB843AD0((uint64_t)a3, (uint64_t)v43, (uint64_t)v7, (uint64_t)&v77, 0);
      goto LABEL_27;
    }
  }
  if (sub_1CC0241FC((uint64_t)&v77, (llvm::Constant *)v9))
  {
    uint64_t v32 = (uint64_t)llvm::ConstantFP::get(v69, v31, 1.0);
LABEL_27:
    uint64_t v28 = v32;
    goto LABEL_58;
  }
  unsigned int v33 = v9[16];
  if (v9 && (__int16 v34 = v9, v33 == 17)
    || v33 <= 0x14
    && (*(_DWORD *)(*(void *)v9 + 8) & 0xFE) == 0x12
    && (__int16 v34 = llvm::Constant::getSplatValue((llvm::Constant *)v9, 0)) != 0
    && v34[16] == 17)
  {
    if (sub_1CB844168((uint64_t)v34, 1.0))
    {
LABEL_57:
      uint64_t v28 = (uint64_t)v7;
      goto LABEL_58;
    }
  }
  unsigned int v35 = v9[16];
  if (v9 && (int v36 = v9, v35 == 17)
    || v35 <= 0x14
    && (*(_DWORD *)(*(void *)v9 + 8) & 0xFE) == 0x12
    && (int v36 = llvm::Constant::getSplatValue((llvm::Constant *)v9, 0)) != 0
    && v36[16] == 17)
  {
    if (sub_1CB844168((uint64_t)v36, 2.0))
    {
      *(void *)&long long v77 = "square";
      LOWORD(v79) = 259;
      uint64_t v32 = sub_1CB843C88((uint64_t)a3, (uint64_t)v7, (uint64_t)v7, (uint64_t)&v77, 0);
      goto LABEL_27;
    }
  }
  uint64_t v28 = (uint64_t)llvm::LibCallSimplifier::replacePowWithSqrt(this, a2, a3);
  if (v28) {
    goto LABEL_58;
  }
  uint64_t v75 = 0;
  if ((v22 & 0x80) == 0)
  {
LABEL_46:
    if (!*((unsigned char *)this + 56)
      || (char v39 = sub_1CC92CEDC(*((void **)this + 3), 0x15Bu), __n != v40)
      || __n && memcmp(v19, v39, __n)
      || !llvm::LibCallSimplifier::hasFloatVersion((uint64_t)this, v19, __n)
      || (uint64_t v28 = (uint64_t)sub_1CD24A3C0((uint64_t)a2, (uint64_t)a3, 1, 1)) == 0)
    {
      uint64_t v28 = 0;
    }
    goto LABEL_58;
  }
  long long v77 = (unint64_t)&v75;
  if (!sub_1CC04AFFC((uint64_t)&v77, v9)
    || (sub_1CB8BE1E4(v75, 0.5) & 1) != 0
    || (sub_1CB8BE1E4(v75, -0.5) & 1) != 0)
  {
LABEL_41:
    if (v9[16] - 71 <= 1)
    {
      unint64_t v37 = (uint64_t *)sub_1CD24435C((uint64_t)v9, (uint64_t *)a3, (llvm::LLVMContext *)*(unsigned int *)(**((void **)this + 3) + 148));
      if (v37)
      {
        uint64_t v38 = sub_1CD245514(v7, v37, v67, (uint64_t *)a3);
        uint64_t v28 = v38;
        if (v38 && *(unsigned char *)(v38 + 16) == 84) {
          *(_WORD *)(v38 + 18) = *(_WORD *)(v38 + 18) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
        }
        goto LABEL_58;
      }
    }
    goto LABEL_46;
  }
  uint64_t v44 = *(void *)(v75 + 8);
  if ((_UNKNOWN *)v44 == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(&v103, (uint64_t)&unk_1CFB2E344);
  }
  uint64_t v103 = *(void *)(v75 + 8);
  if ((*(_DWORD *)(v44 + 8) + 64) >= 0x80) {
    operator new[]();
  }
  unsigned __int8 v106 = v106 & 0xF0 | 2;
  int v45 = *(_DWORD *)(v44 + 8);
  if ((v45 - 64) < 0xFFFFFF80)
  {
    uint64_t v65 = v104;
    void *v104 = 0;
    bzero(v65 + 1, 8 * (((v45 + 64) >> 6) - 2) + 8);
    uint64_t v46 = v104;
  }
  else
  {
    uint64_t v46 = &v104;
    uint64_t v104 = 0;
  }
  int v105 = *(_DWORD *)(v44 + 8) - 1;
  *uint64_t v46 = 33;
  llvm::detail::IEEEFloat::normalize((llvm::detail::IEEEFloat *)&v103, 1, 0);
  unsigned int v47 = (const llvm::detail::DoubleAPFloat *)(v75 + 8);
  if (*(_UNKNOWN **)(v75 + 8) == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(&v94, v47);
  }
  else {
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v94, v47);
  }
  uint64_t v48 = v94;
  if (v94 != (_DWORD *)&unk_1CFB2E344)
  {
    if ((v97 & 8) != 0) {
      v97 ^= 8u;
    }
LABEL_72:
    int v101 = v96;
    char v102 = v102 & 0xF0 | v97 & 0xF;
    uint64_t v99 = v48;
    uint64_t v100 = v95;
    uint64_t v94 = &unk_1CFB2E394;
    switch(4 * (v97 & 7) + (v106 & 7))
    {
      case 1:
      case 4:
      case 5:
      case 6:
      case 7:
      case 9:
      case 0xD:
      case 0xF:
        goto LABEL_110;
      case 2:
      case 3:
      case 0xB:
        int v49 = ~(v97 >> 2) & 2;
        goto LABEL_84;
      case 8:
      case 0xC:
      case 0xE:
        int v49 = (v106 >> 2) & 2;
        goto LABEL_84;
      case 0xA:
        int v50 = (v97 >> 3) & 1;
        if (v50 != ((v106 >> 3) & 1)) {
          goto LABEL_132;
        }
        int v49 = llvm::detail::IEEEFloat::compareAbsoluteValue((llvm::detail::IEEEFloat *)&v99, (const llvm::detail::IEEEFloat *)&v103);
        if ((v102 & 8) == 0) {
          goto LABEL_84;
        }
        if (v49 != 2) {
          goto LABEL_110;
        }
        goto LABEL_85;
      default:
        int v50 = (v97 >> 3) & 1;
        if (v50 == ((v106 >> 3) & 1)) {
          goto LABEL_110;
        }
LABEL_132:
        int v49 = (2 * v50) ^ 2;
        goto LABEL_84;
    }
  }
  if ((*(unsigned char *)(v95 + 28) & 8) != 0)
  {
    sub_1CBFC6FB8(v95);
    sub_1CBFC6FB8(v95 + 32);
    uint64_t v48 = v94;
    if (v94 != (_DWORD *)&unk_1CFB2E344) {
      goto LABEL_72;
    }
  }
  uint64_t v99 = &unk_1CFB2E344;
  uint64_t v100 = v95;
  uint64_t v94 = &unk_1CFB2E394;
  uint64_t v95 = 0;
  int v49 = llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)&v99, (const llvm::detail::DoubleAPFloat *)&v103);
LABEL_84:
  if (!v49)
  {
LABEL_85:
    if (sub_1CD63B67C((uint64_t)v98))
    {
      uint64_t v51 = 0;
    }
    else
    {
      if (v99 == (_DWORD *)&unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::DoubleAPFloat((void *)&v77 + 1, (const llvm::detail::DoubleAPFloat *)&v99);
      }
      else {
        llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v77 + 8, (const llvm::detail::IEEEFloat *)&v99);
      }
      if (sub_1CB88A708((uint64_t)&v77, (uint64_t)v98, 1) || !sub_1CD63B67C((uint64_t)&v77))
      {
        uint64_t v51 = 0;
        BOOL v52 = 0;
      }
      else
      {
        uint64_t v58 = *(void *)(*((void *)a2 - 4) + 112);
        uint64_t v59 = *((void *)a2 + 8);
        if (v59 && (*(unsigned char *)(v59 + 17) & 0x10) != 0)
        {
          int hasFnAttrOnCalledFunction = 1;
        }
        else
        {
          v73[0] = 7;
          if (!sub_1CC5CB59C((uint64_t)a2, v73, 1uLL)
            || (uint64_t v66 = *((void *)a2 - 4)) != 0
            && !*(unsigned char *)(v66 + 16)
            && *(void *)(v66 + 24) == *((void *)a2 + 9)
            && *(_DWORD *)(v66 + 36) == 7)
          {
            int hasFnAttrOnCalledFunction = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 44);
          }
          else
          {
            int hasFnAttrOnCalledFunction = 0;
          }
        }
        uint64_t v51 = sub_1CD2446E0((uint64_t ***)v7, v58, hasFnAttrOnCalledFunction, v67, (uint64_t *)a3, *((void **)this + 3));
        BOOL v52 = v51 != 0;
      }
      if (*((_UNKNOWN **)&v77 + 1) == &unk_1CFB2E344)
      {
        sub_1CB845718((uint64_t *)&v78);
      }
      else if ((*(_DWORD *)(*((void *)&v77 + 1) + 8) - 64) <= 0xFFFFFF7F && (void)v78)
      {
        MEMORY[0x1D25D9CB0](v78, 0x1000C8000313F17);
      }
      if (!v52)
      {
        uint64_t v28 = 0;
LABEL_101:
        int v57 = 1;
        goto LABEL_117;
      }
    }
    uint64_t v93 = 0;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    long long v82 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    *(void *)&long long v77 = 0;
    *((void *)&v77 + 1) = v7;
    *(void *)uint64_t v73 = "square";
    __int16 v74 = 259;
    *(void *)&long long v78 = sub_1CB843C88((uint64_t)a3, (uint64_t)v7, (uint64_t)v7, (uint64_t)v73, 0);
    llvm::APFloat::convert((uint64_t)v98, &unk_1CFB2E31C, 0, &v76);
    double v53 = llvm::APFloat::convertToDouble((llvm::APFloat *)v98);
    uint64_t v28 = sub_1CD24547C((uint64_t)&v77, v53, (uint64_t)a3);
    if (v51)
    {
      __int16 v74 = 257;
      uint64_t v28 = sub_1CB843C88((uint64_t)a3, v28, v51, (uint64_t)v73, 0);
    }
    uint64_t v55 = v75;
    if (*(_UNKNOWN **)(v75 + 8) == &unk_1CFB2E344) {
      uint64_t v55 = *(void *)(v75 + 16);
    }
    if ((*(unsigned char *)(v55 + 28) & 8) != 0)
    {
      unint64_t v56 = llvm::ConstantFP::get(v69, v54, 1.0);
      *(void *)uint64_t v73 = "reciprocal";
      __int16 v74 = 259;
      uint64_t v28 = sub_1CB843AD0((uint64_t)a3, (uint64_t)v56, v28, (uint64_t)v73, 0);
    }
    goto LABEL_101;
  }
LABEL_110:
  DWORD2(v77) = *(_DWORD *)(**((void **)this + 3) + 148);
  if (DWORD2(v77) > 0x40) {
    operator new[]();
  }
  *(void *)&long long v77 = 0;
  BYTE12(v77) = 0;
  if (sub_1CD63B67C(v75) && !llvm::APFloat::convertToInteger(v75, (uint64_t)&v77, 0, &v76))
  {
    uint64_t v61 = llvm::IntegerType::get(*((llvm::IntegerType **)a3 + 8), (llvm::LLVMContext *)*(unsigned int *)(**((void **)this + 3) + 148));
    Splat = llvm::ConstantInt::get(*(llvm::ConstantInt **)v61, (llvm::LLVMContext *)&v77, v62);
    if ((*(_DWORD *)(v61 + 8) & 0xFE) == 0x12) {
      Splat = (uint64_t *)llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v61 + 32) | ((unint64_t)(*(_DWORD *)(v61 + 8) == 19) << 32)), (uint64_t)Splat);
    }
    uint64_t v64 = sub_1CD245514(v7, Splat, v67, (uint64_t *)a3);
    uint64_t v28 = v64;
    if (v64 && *(unsigned char *)(v64 + 16) == 84) {
      *(_WORD *)(v64 + 18) = *(_WORD *)(v64 + 18) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
    }
    int v57 = 1;
  }
  else
  {
    int v57 = 0;
    uint64_t v28 = 0;
  }
  if (DWORD2(v77) >= 0x41 && (void)v77) {
    MEMORY[0x1D25D9CB0](v77, 0x1000C8000313F17);
  }
LABEL_117:
  if (v99 == (_DWORD *)&unk_1CFB2E344)
  {
    sub_1CB845718(&v100);
  }
  else if ((v99[2] - 64) <= 0xFFFFFF7F && v100)
  {
    MEMORY[0x1D25D9CB0](v100, 0x1000C8000313F17);
  }
  if ((_UNKNOWN *)v103 == &unk_1CFB2E344)
  {
    sub_1CB845718((uint64_t *)&v104);
  }
  else if ((*(_DWORD *)(v103 + 8) - 64) <= 0xFFFFFF7F && v104)
  {
    MEMORY[0x1D25D9CB0](v104, 0x1000C8000313F17);
  }
  if (!v57) {
    goto LABEL_41;
  }
LABEL_58:
  *((_DWORD *)a3 + 24) = v23;
  *((void *)a3 + 11) = v72;
  *((unsigned char *)a3 + 100) = v24;
  *((unsigned char *)a3 + 101) = v71;
  *((unsigned char *)a3 + 102) = v70;
  return v28;
}

uint64_t sub_1CD24547C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 8 * a2);
  if (!result)
  {
    uint64_t v6 = a2;
    uint64_t v7 = (unsigned int *)((char *)&unk_1CFB33030 + 8 * a2);
    uint64_t v8 = sub_1CD24547C(a1, *v7);
    uint64_t v9 = sub_1CD24547C(a1, v7[1]);
    __int16 v11 = 257;
    uint64_t result = sub_1CB843C88(a3, v8, v9, (uint64_t)v10, 0);
    *(void *)(a1 + 8 * v6) = result;
  }
  return result;
}

uint64_t sub_1CD245514(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4)
{
  v11[2] = *MEMORY[0x1E4F143B8];
  v11[0] = (uint64_t)a1;
  v11[1] = (uint64_t)a2;
  uint64_t v5 = *a2;
  v10[0] = *a1;
  v10[1] = v5;
  uint64_t Declaration = llvm::Intrinsic::getDeclaration(a3, 239, (uint64_t)v10, 2);
  if (Declaration) {
    uint64_t v7 = *(uint64_t ***)(Declaration + 24);
  }
  else {
    uint64_t v7 = 0;
  }
  v9[16] = 257;
  return sub_1CB845BAC(a4, v7, (uint64_t **)Declaration, v11, 2, (uint64_t)v9, 0);
}

BOOL llvm::LibCallSimplifier::hasFloatVersion(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a3 >= 0x15) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  if (a3) {
    memcpy(v18, a2, a3);
  }
  if (a3 + 1 > 0x14) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  v18[a3] = 102;
  int v17 = *(void **)(a1 + 24);
  uint64_t v5 = sub_1CC154CDC(v18, a3 + 1);
  size_t v7 = v6;
  if (v6)
  {
    uint64_t v8 = v5;
    unint64_t v9 = 468;
    uint64_t v10 = &llvm::TargetLibraryInfoImpl::StandardNames;
    do
    {
      __int16 v11 = &v10[2 * (v9 >> 1)];
      size_t v12 = (size_t)v11[1];
      if (v7 >= v12) {
        size_t v13 = (size_t)v11[1];
      }
      else {
        size_t v13 = v7;
      }
      if (v13 && (int v14 = memcmp(*v11, v8, v13)) != 0)
      {
        int v15 = (v14 >> 31) | 1;
      }
      else
      {
        if (v12 < v7) {
          int v15 = -1;
        }
        else {
          int v15 = 1;
        }
        if (v12 == v7) {
          int v15 = 0;
        }
      }
      if (v15 == -1) {
        v9 += ~(v9 >> 1);
      }
      else {
        v9 >>= 1;
      }
      if (v15 == -1) {
        uint64_t v10 = v11 + 2;
      }
    }
    while (v9);
    return v10 != &llvm::TargetLibraryInfoImpl::StandardNames + 936
        && v10[1] == (char *)v7
        && !memcmp(*v10, v8, v7)
        && ((*(void *)(v17[1]
                       + 8
                       * (((unint64_t)((char *)v10 - (char *)&llvm::TargetLibraryInfoImpl::StandardNames) >> 10) & 0x3FFFFFF)) >> ((unint64_t)((char *)v10 - (char *)&llvm::TargetLibraryInfoImpl::StandardNames) >> 4)) & 1) == 0
        && ((*(unsigned __int8 *)(*v17
                                + (((unint64_t)((char *)v10 - (char *)&llvm::TargetLibraryInfoImpl::StandardNames) >> 6) & 0x3FFFFFFF)) >> (((v10 - &llvm::TargetLibraryInfoImpl::StandardNames) >> 3) & 6)) & 3) != 0;
  }
  return v7;
}

llvm::Instruction *llvm::LibCallSimplifier::optimizeExp2(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  size_t v6 = (uint64_t ***)*((void *)a2 - 4);
  if (!v6 || *((unsigned char *)v6 + 16) || v6[3] != *((uint64_t ***)a2 + 9)) {
    size_t v6 = 0;
  }
  uint64_t v30 = 0;
  if ((*((unsigned char *)v6 + 23) & 0x10) != 0)
  {
    uint64_t v7 = ***v6;
    uint64_t v8 = *(void *)(v7 + 152);
    uint64_t v9 = *(unsigned int *)(v7 + 168);
    if (v9)
    {
      LODWORD(v10) = (v9 - 1) & ((v6 >> 4) ^ (v6 >> 9));
      __int16 v11 = (uint64_t ****)(v8 + 16 * v10);
      size_t v12 = *v11;
      if (*v11 == v6)
      {
LABEL_11:
        int v15 = v11[1];
        size_t v18 = (size_t)*v15;
        int v16 = (char *)(v15 + 2);
        size_t v17 = v18;
        goto LABEL_12;
      }
      int v13 = 1;
      while (v12 != (uint64_t ***)-4096)
      {
        int v14 = v10 + v13++;
        uint64_t v10 = v14 & (v9 - 1);
        size_t v12 = *(uint64_t ****)(v8 + 16 * v10);
        if (v12 == v6)
        {
          __int16 v11 = (uint64_t ****)(v8 + 16 * v10);
          goto LABEL_11;
        }
      }
    }
    __int16 v11 = (uint64_t ****)(v8 + 16 * v9);
    goto LABEL_11;
  }
  size_t v17 = 0;
  int v16 = &byte_1CFBCE98E;
LABEL_12:
  if (*((unsigned char *)this + 56)
    && (uint64_t v19 = sub_1CC92CEDC(*((void **)this + 3), 0xCFu), v17 == v20)
    && (!v17 || !memcmp(v16, v19, v17))
    && llvm::LibCallSimplifier::hasFloatVersion((uint64_t)this, v16, v17))
  {
    uint64_t v21 = sub_1CD24A3C0((uint64_t)a2, (uint64_t)a3, 0, 1);
  }
  else
  {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  if (*(unsigned __int8 *)(v22 + 16) - 71 <= 1)
  {
    char v24 = *(llvm::ConstantFP ***)a2;
    int v25 = (void *)*((void *)this + 3);
    if (llvm::hasFloatFn(v25, (uint64_t)v24, 0x128u, 0x129u, 0x12Au))
    {
      unsigned int v26 = sub_1CD24435C(v22, (uint64_t *)a3, (llvm::LLVMContext *)*(unsigned int *)(*v25 + 148));
      if (v26)
      {
        uint64_t v28 = (uint64_t *)v26;
        unsigned int v29 = (uint64_t ***)llvm::ConstantFP::get(v24, v27, 1.0);
        return (llvm::Instruction *)llvm::emitBinaryFloatFnCall(v29, v28, *((uint64_t **)this + 3), 0x128u, 0x129u, 0x12Au, (uint64_t)a3, &v30);
      }
    }
  }
  return v21;
}

uint64_t llvm::LibCallSimplifier::optimizeLog(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  size_t v6 = (uint64_t ***)*((void *)a2 - 4);
  if (!v6 || *((unsigned char *)v6 + 16) || v6[3] != *((uint64_t ***)a2 + 9)) {
    size_t v6 = 0;
  }
  v78[0] = 0;
  if ((*((unsigned char *)v6 + 23) & 0x10) != 0)
  {
    uint64_t v7 = ***v6;
    uint64_t v8 = *(void *)(v7 + 152);
    uint64_t v9 = *(unsigned int *)(v7 + 168);
    if (v9)
    {
      LODWORD(v10) = (v9 - 1) & ((v6 >> 4) ^ (v6 >> 9));
      __int16 v11 = (uint64_t ****)(v8 + 16 * v10);
      size_t v12 = *v11;
      if (*v11 == v6)
      {
LABEL_11:
        int v15 = v11[1];
        size_t v18 = (size_t)*v15;
        size_t v17 = (char *)(v15 + 2);
        size_t v16 = v18;
        goto LABEL_12;
      }
      int v13 = 1;
      while (v12 != (uint64_t ***)-4096)
      {
        int v14 = v10 + v13++;
        uint64_t v10 = v14 & (v9 - 1);
        size_t v12 = *(uint64_t ****)(v8 + 16 * v10);
        if (v12 == v6)
        {
          __int16 v11 = (uint64_t ****)(v8 + 16 * v10);
          goto LABEL_11;
        }
      }
    }
    __int16 v11 = (uint64_t ****)(v8 + 16 * v9);
    goto LABEL_11;
  }
  size_t v16 = 0;
  size_t v17 = &byte_1CFBCE98E;
LABEL_12:
  int v19 = *((_DWORD *)v6 + 9);
  uint64_t v20 = *(uint64_t ***)(*(void *)(*((void *)a2 + 5) + 56) + 40);
  uint64_t v21 = *(void *)a2;
  uint64_t v77 = *(void *)a2;
  if (*((unsigned char *)this + 56) && llvm::LibCallSimplifier::hasFloatVersion((uint64_t)this, v17, v16)) {
    uint64_t v22 = (uint64_t)sub_1CD24A3C0((uint64_t)a2, (uint64_t)a3, 0, 1);
  }
  else {
    uint64_t v22 = 0;
  }
  if (*(unsigned char *)(*((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)) + 16) == 84) {
    uint64_t v23 = *((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  }
  else {
    uint64_t v23 = 0;
  }
  if (*((unsigned __int8 *)a2 + 17) >= 0xFEu)
  {
    if (v23)
    {
      if (*(unsigned __int8 *)(v23 + 17) >= 0xFEu)
      {
        uint64_t v25 = *(void *)(v23 + 8);
        if (v25)
        {
          if (!*(void *)(v25 + 8))
          {
            int v69 = v19;
            BOOL v60 = v20;
            uint64_t v61 = (const char *)v16;
            uint64_t v71 = v23;
            uint64_t v72 = (uint64_t *)a3;
            size_t v62 = this;
            uint64_t v66 = (uint64_t *)*((void *)this + 3);
            uint64_t v67 = v22;
            unsigned int v26 = sub_1CC154CDC(v17, v16);
            if (v27)
            {
              uint64_t v28 = v26;
              size_t v29 = v27;
              uint64_t v30 = &llvm::TargetLibraryInfoImpl::StandardNames;
              unint64_t v31 = 468;
              do
              {
                uint64_t v32 = &v30[2 * (v31 >> 1)];
                size_t v33 = (size_t)v32[1];
                if (v29 >= v33) {
                  size_t v34 = (size_t)v32[1];
                }
                else {
                  size_t v34 = v29;
                }
                if (v34 && (int v35 = memcmp(*v32, v28, v34)) != 0)
                {
                  int v36 = (v35 >> 31) | 1;
                }
                else
                {
                  if (v33 < v29) {
                    int v36 = -1;
                  }
                  else {
                    int v36 = 1;
                  }
                  if (v33 == v29) {
                    int v36 = 0;
                  }
                }
                if (v36 == -1) {
                  v31 += ~(v31 >> 1);
                }
                else {
                  v31 >>= 1;
                }
                if (v36 == -1) {
                  uint64_t v30 = v32 + 2;
                }
              }
              while (v31);
              if (v30 != &llvm::TargetLibraryInfoImpl::StandardNames + 936
                && v30[1] == (char *)v29
                && !memcmp(*v30, v28, v29))
              {
                signed int v48 = ((unint64_t)((char *)v30 - (char *)&llvm::TargetLibraryInfoImpl::StandardNames) >> 4) - 300;
                if (v48 >= 0xF || ((0x638Fu >> v48) & 1) == 0) {
                  return v67;
                }
                int v43 = dword_1CFB331C8[v48];
                int v42 = dword_1CFB33204[v48];
                int v63 = dword_1CFB33240[v48];
                int v41 = dword_1CFB3327C[v48];
                int v37 = dword_1CFB332B8[v48];
                uint64_t v38 = v71;
                char v39 = v72;
                goto LABEL_90;
              }
            }
            int v37 = v69;
            uint64_t v38 = v71;
            char v39 = v72;
            uint64_t v22 = v67;
            if ((v69 - 175) <= 2)
            {
              if ((*(_DWORD *)(v21 + 8) & 0xFE) == 0x12)
              {
                int v40 = *(unsigned __int8 *)(**(void **)(v21 + 16) + 8);
                if (v40 == 2)
                {
                  int v41 = 210;
                  int v63 = 208;
                  int v42 = 205;
                  int v43 = 348;
                  uint64_t v38 = v71;
                  char v39 = v72;
                  int v37 = v69;
LABEL_90:
                  uint64_t v22 = v67;
                  goto LABEL_50;
                }
                uint64_t v38 = v71;
                char v39 = v72;
                int v37 = v69;
                uint64_t v22 = v67;
              }
              else
              {
                int v40 = *(_DWORD *)(v21 + 8);
                if (v40 == 2)
                {
                  int v41 = 210;
                  int v63 = 208;
                  int v42 = 205;
                  int v43 = 348;
                  goto LABEL_50;
                }
              }
              if (v40 != 3) {
                return v22;
              }
              int v41 = 203;
              int v63 = 207;
              int v42 = 204;
              int v43 = 347;
LABEL_50:
              int v44 = *((_DWORD *)v39 + 24);
              uint64_t v70 = v39[11];
              char v68 = *((unsigned char *)v39 + 100);
              char v64 = *((unsigned char *)v39 + 102);
              char v65 = *((unsigned char *)v39 + 101);
              *((_DWORD *)v39 + 24) = -1;
              uint64_t v45 = *(void *)(v38 - 32);
              if (v45 && !*(unsigned char *)(v45 + 16) && *(void *)(v45 + 24) == *(void *)(v38 + 72)) {
                int v46 = *(_DWORD *)(v45 + 36);
              }
              else {
                int v46 = 0;
              }
              int v76 = 469;
              sub_1CC0A4DF4(v66, v38, &v76);
              if (v76 == v43 || v46 == 238)
              {
                if (sub_1CB8F8740((uint64_t)a2, 44))
                {
                  uint64_t Declaration = llvm::Intrinsic::getDeclaration(v60, v37, (uint64_t)&v77, 1);
                  if (Declaration) {
                    BOOL v52 = *(uint64_t ***)(Declaration + 24);
                  }
                  else {
                    BOOL v52 = 0;
                  }
                  uint64_t v75 = *(const llvm::detail::DoubleAPFloat **)(v71 - 32 * (*(_DWORD *)(v71 + 20) & 0x7FFFFFF));
                  v73[0] = "log";
                  __int16 v74 = 259;
                  uint64_t v53 = sub_1CB845BAC(v72, v52, (uint64_t **)Declaration, (uint64_t *)&v75, 1, (uint64_t)v73, 0);
                }
                else
                {
                  uint64_t v53 = llvm::emitUnaryFloatFnCall(*(void **)(v71 - 32 * (*(_DWORD *)(v71 + 20) & 0x7FFFFFF)), (unsigned __int8 *)v17, v61, (uint64_t)v72, v78);
                }
                uint64_t v54 = v53;
                uint64_t v55 = *(void *)(v71 - 32 * (*(_DWORD *)(v71 + 20) & 0x7FFFFFF) + 32);
              }
              else
              {
                if (v76 != v41 && v76 != v63 && v76 != v42 && (v46 - 75) > 1) {
                  goto LABEL_60;
                }
                if (v76 == v41 || v46 == 75)
                {
                  int v49 = *(llvm::ConstantFP ***)a2;
                  double v50 = 2.71828183;
                }
                else
                {
                  int v49 = *(llvm::ConstantFP ***)a2;
                  if (v76 == v63 || v46 == 76) {
                    double v50 = 2.0;
                  }
                  else {
                    double v50 = 10.0;
                  }
                }
                unint64_t v56 = llvm::ConstantFP::get(v49, v47, v50);
                if (sub_1CB8F8740((uint64_t)a2, 44))
                {
                  uint64_t v57 = llvm::Intrinsic::getDeclaration(v60, v37, (uint64_t)&v77, 1);
                  if (v57) {
                    uint64_t v58 = *(uint64_t ***)(v57 + 24);
                  }
                  else {
                    uint64_t v58 = 0;
                  }
                  uint64_t v75 = v56;
                  v73[0] = "log";
                  __int16 v74 = 259;
                  uint64_t v59 = sub_1CB845BAC(v72, v58, (uint64_t **)v57, (uint64_t *)&v75, 1, (uint64_t)v73, 0);
                }
                else
                {
                  uint64_t v59 = llvm::emitUnaryFloatFnCall(v56, (unsigned __int8 *)v17, v61, (uint64_t)v72, v78);
                }
                uint64_t v54 = v59;
                uint64_t v55 = *(void *)(v71 - 32 * (*(_DWORD *)(v71 + 20) & 0x7FFFFFF));
              }
              v73[0] = "mul";
              __int16 v74 = 259;
              uint64_t v22 = sub_1CB843C88((uint64_t)v72, v55, v54, (uint64_t)v73, 0);
              (*((void (**)(void, uint64_t, uint64_t))v62 + 8))(*((void *)v62 + 9), v71, v22);
              (*((void (**)(void, uint64_t))v62 + 10))(*((void *)v62 + 11), v71);
              char v39 = v72;
LABEL_60:
              *((_DWORD *)v39 + 24) = v44;
              v39[11] = v70;
              *((unsigned char *)v39 + 100) = v68;
              *((unsigned char *)v39 + 101) = v65;
              *((unsigned char *)v39 + 102) = v64;
            }
          }
        }
      }
    }
  }
  return v22;
}

uint64_t llvm::LibCallSimplifier::optimizeSqrt(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  uint64_t v5 = (uint64_t ***)*((void *)a2 - 4);
  if (!v5 || *((unsigned char *)v5 + 16) || v5[3] != *((uint64_t ***)a2 + 9)) {
    uint64_t v5 = 0;
  }
  size_t v6 = (void *)*((void *)this + 3);
  if ((*(unsigned char *)(v6[1] + 49) & 4) != 0 || (*(unsigned char *)(*v6 + 98) & 0x30) == 0) {
    goto LABEL_19;
  }
  if ((*((unsigned char *)v5 + 23) & 0x10) == 0) {
    goto LABEL_17;
  }
  uint64_t v7 = ***v5;
  uint64_t v8 = *(void *)(v7 + 152);
  uint64_t v9 = *(unsigned int *)(v7 + 168);
  if (!v9) {
    goto LABEL_14;
  }
  LODWORD(v10) = (v9 - 1) & ((v5 >> 4) ^ (v5 >> 9));
  __int16 v11 = (uint64_t ****)(v8 + 16 * v10);
  size_t v12 = *v11;
  if (*v11 != v5)
  {
    int v13 = 1;
    while (v12 != (uint64_t ***)-4096)
    {
      int v14 = v10 + v13++;
      uint64_t v10 = v14 & (v9 - 1);
      size_t v12 = *(uint64_t ****)(v8 + 16 * v10);
      if (v12 == v5)
      {
        __int16 v11 = (uint64_t ****)(v8 + 16 * v10);
        goto LABEL_15;
      }
    }
LABEL_14:
    __int16 v11 = (uint64_t ****)(v8 + 16 * v9);
  }
LABEL_15:
  int v15 = v11[1];
  if (*v15 == (uint64_t **)4 && *((_DWORD *)v15 + 4) == 1953657203) {
    goto LABEL_18;
  }
LABEL_17:
  if (*((_DWORD *)v5 + 9) != 280)
  {
LABEL_19:
    uint64_t v16 = 0;
    goto LABEL_20;
  }
LABEL_18:
  uint64_t v16 = (uint64_t)sub_1CD24A3C0((uint64_t)a2, (uint64_t)a3, 0, 1);
LABEL_20:
  if (*((unsigned __int8 *)a2 + 17) >= 0xFEu)
  {
    size_t v17 = (uint64_t *)*((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
    if (v17)
    {
      if (*((unsigned char *)v17 + 16) == 46 && *((unsigned __int8 *)v17 + 17) >= 0xFEu)
      {
        int v18 = *((_DWORD *)v17 + 5);
        if ((v18 & 0x40000000) != 0) {
          int v19 = (uint64_t *)*(v17 - 1);
        }
        else {
          int v19 = &v17[-4 * (v18 & 0x7FFFFFF)];
        }
        uint64_t v20 = *v19;
        uint64_t v21 = v19[4];
        uint64_t v42 = 0;
        if (v20 == v21)
        {
          uint64_t v43 = v20;
          if (!v20) {
            return v16;
          }
          uint64_t v21 = 0;
          goto LABEL_35;
        }
        int v22 = *(unsigned __int8 *)(v20 + 16);
        if (v22 != 5)
        {
          if (v22 != 46) {
            return v16;
          }
          uint64_t v23 = *(void *)(v20 - 64);
          if (!v23) {
            return v16;
          }
          uint64_t v24 = *(void *)(v20 - 32);
          if (!v24) {
            return v16;
          }
          goto LABEL_40;
        }
        if (*(_WORD *)(v20 + 18) == 18)
        {
          size_t v33 = (uint64_t *)(v20 - 32 * (*(_DWORD *)(v20 + 20) & 0x7FFFFFF));
          uint64_t v23 = *v33;
          if (*v33)
          {
            uint64_t v24 = v33[4];
            if (v24)
            {
LABEL_40:
              if (v23 != v24 || *(unsigned __int8 *)(v20 + 17) < 0xFEu) {
                return v16;
              }
              uint64_t v42 = v21;
              uint64_t v43 = v23;
LABEL_35:
              int v25 = *((_DWORD *)a3 + 24);
              uint64_t v26 = *((void *)a3 + 11);
              char v27 = *((unsigned char *)a3 + 100);
              char v28 = *((unsigned char *)a3 + 101);
              char v29 = *((unsigned char *)a3 + 102);
              *((_DWORD *)a3 + 24) = -1;
              uint64_t v30 = v5[5];
              uint64_t v41 = *v17;
              uint64_t Declaration = llvm::Intrinsic::getDeclaration(v30, 139, (uint64_t)&v41, 1);
              if (Declaration) {
                uint64_t v32 = *(uint64_t ***)(Declaration + 24);
              }
              else {
                uint64_t v32 = 0;
              }
              v39[0] = "fabs";
              __int16 v40 = 259;
              uint64_t v34 = sub_1CB845BAC((uint64_t *)a3, v32, (uint64_t **)Declaration, &v43, 1, (uint64_t)v39, 0);
              uint64_t v16 = v34;
              if (v21)
              {
                uint64_t v35 = llvm::Intrinsic::getDeclaration(v30, 280, (uint64_t)&v41, 1);
                if (v35) {
                  int v36 = *(uint64_t ***)(v35 + 24);
                }
                else {
                  int v36 = 0;
                }
                v39[0] = "sqrt";
                __int16 v40 = 259;
                uint64_t v37 = sub_1CB845BAC((uint64_t *)a3, v36, (uint64_t **)v35, &v42, 1, (uint64_t)v39, 0);
                __int16 v40 = 257;
                uint64_t v16 = sub_1CB843C88((uint64_t)a3, v16, v37, (uint64_t)v39, 0);
                if (!v16) {
                  goto LABEL_53;
                }
              }
              else if (!v34)
              {
LABEL_53:
                *((_DWORD *)a3 + 24) = v25;
                *((void *)a3 + 11) = v26;
                *((unsigned char *)a3 + 100) = v27;
                *((unsigned char *)a3 + 101) = v28;
                *((unsigned char *)a3 + 102) = v29;
                return v16;
              }
              if (*(unsigned char *)(v16 + 16) == 84) {
                *(_WORD *)(v16 + 18) = *(_WORD *)(v16 + 18) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
              }
              goto LABEL_53;
            }
          }
        }
      }
    }
  }
  return v16;
}

llvm::Instruction *llvm::LibCallSimplifier::optimizeTan(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  size_t v6 = (uint64_t ***)*((void *)a2 - 4);
  if (!v6 || *((unsigned char *)v6 + 16) || v6[3] != *((uint64_t ***)a2 + 9)) {
    size_t v6 = 0;
  }
  if ((*((unsigned char *)v6 + 23) & 0x10) == 0) {
    goto LABEL_25;
  }
  uint64_t v7 = ***v6;
  uint64_t v8 = *(void *)(v7 + 152);
  uint64_t v9 = *(unsigned int *)(v7 + 168);
  if (v9)
  {
    LODWORD(v10) = (v9 - 1) & ((v6 >> 4) ^ (v6 >> 9));
    __int16 v11 = (uint64_t ****)(v8 + 16 * v10);
    size_t v12 = *v11;
    if (*v11 == v6) {
      goto LABEL_13;
    }
    int v13 = 1;
    while (v12 != (uint64_t ***)-4096)
    {
      int v14 = v10 + v13++;
      uint64_t v10 = v14 & (v9 - 1);
      size_t v12 = *(uint64_t ****)(v8 + 16 * v10);
      if (v12 == v6)
      {
        __int16 v11 = (uint64_t ****)(v8 + 16 * v10);
        goto LABEL_13;
      }
    }
  }
  __int16 v11 = (uint64_t ****)(v8 + 16 * v9);
LABEL_13:
  int v15 = (size_t *)v11[1];
  size_t v18 = *v15;
  uint64_t v16 = v15 + 2;
  size_t v17 = v18;
  if (*((unsigned char *)this + 56)) {
    BOOL v19 = v17 == 3;
  }
  else {
    BOOL v19 = 0;
  }
  if (!v19
    || (*(_WORD *)v16 == 24948 ? (BOOL v20 = v16[2] == 110) : (BOOL v20 = 0),
        !v20 || !llvm::LibCallSimplifier::hasFloatVersion((uint64_t)this, v16, v17)))
  {
LABEL_25:
    uint64_t v21 = 0;
    goto LABEL_26;
  }
  uint64_t v21 = sub_1CD24A3C0((uint64_t)a2, (uint64_t)a3, 0, 1);
LABEL_26:
  uint64_t v22 = *((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  if (!v22) {
    return v21;
  }
  if (*(unsigned char *)(v22 + 16) != 84) {
    return v21;
  }
  if (*((unsigned __int8 *)a2 + 17) < 0xFEu) {
    return v21;
  }
  if (*(unsigned __int8 *)(v22 + 17) < 0xFEu) {
    return v21;
  }
  unsigned int v69 = 0;
  uint64_t v23 = *(uint64_t ****)(v22 - 32);
  if (!v23 || *((unsigned char *)v23 + 16) || v23[3] != *(uint64_t ***)(v22 + 72)) {
    return v21;
  }
  uint64_t v24 = (uint64_t *)*((void *)this + 3);
  if ((*((unsigned char *)v23 + 23) & 0x10) == 0)
  {
    size_t v35 = 0;
    uint64_t v34 = &byte_1CFBCE98E;
    goto LABEL_42;
  }
  uint64_t v25 = ***v23;
  uint64_t v26 = *(void *)(v25 + 152);
  uint64_t v27 = *(unsigned int *)(v25 + 168);
  if (!v27) {
    goto LABEL_40;
  }
  LODWORD(v28) = (v27 - 1) & ((v23 >> 4) ^ (v23 >> 9));
  char v29 = (uint64_t ****)(v26 + 16 * v28);
  uint64_t v30 = *v29;
  if (*v29 != v23)
  {
    int v31 = 1;
    while (v30 != (uint64_t ***)-4096)
    {
      int v32 = v28 + v31++;
      uint64_t v28 = v32 & (v27 - 1);
      uint64_t v30 = *(uint64_t ****)(v26 + 16 * v28);
      if (v30 == v23)
      {
        char v29 = (uint64_t ****)(v26 + 16 * v28);
        goto LABEL_41;
      }
    }
LABEL_40:
    char v29 = (uint64_t ****)(v26 + 16 * v27);
  }
LABEL_41:
  size_t v33 = v29[1];
  size_t v36 = (size_t)*v33;
  uint64_t v34 = (char *)(v33 + 2);
  size_t v35 = v36;
LABEL_42:
  uint64_t v37 = *v24;
  if (!llvm::TargetLibraryInfoImpl::getLibFunc(*v24, v34, v35, &v69)
    || ((*(void *)(v24[1] + (((unint64_t)v69 >> 3) & 0x1FFFFFF8)) >> v69) & 1) != 0
    || ((*(unsigned __int8 *)(v37 + ((unint64_t)v69 >> 2)) >> (2 * (v69 & 3))) & 3) == 0)
  {
    return v21;
  }
  if (v69 == 163)
  {
    if ((*((unsigned char *)v6 + 23) & 0x10) == 0) {
      return v21;
    }
    uint64_t v60 = ***v6;
    uint64_t v61 = *(void *)(v60 + 152);
    uint64_t v62 = *(unsigned int *)(v60 + 168);
    if (v62)
    {
      LODWORD(v63) = (v62 - 1) & ((v6 >> 4) ^ (v6 >> 9));
      char v64 = (uint64_t ****)(v61 + 16 * v63);
      char v65 = *v64;
      if (*v64 == v6)
      {
LABEL_85:
        char v68 = v64[1];
        if (*v68 != (uint64_t **)4 || *((_DWORD *)v68 + 4) != 1819173236) {
          return v21;
        }
        return *(llvm::Instruction **)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF));
      }
      int v66 = 1;
      while (v65 != (uint64_t ***)-4096)
      {
        int v67 = v63 + v66++;
        uint64_t v63 = v67 & (v62 - 1);
        char v65 = *(uint64_t ****)(v61 + 16 * v63);
        if (v65 == v6)
        {
          char v64 = (uint64_t ****)(v61 + 16 * v63);
          goto LABEL_85;
        }
      }
    }
    char v64 = (uint64_t ****)(v61 + 16 * v62);
    goto LABEL_85;
  }
  if (v69 == 159)
  {
    if ((*((unsigned char *)v6 + 23) & 0x10) == 0) {
      return v21;
    }
    uint64_t v47 = ***v6;
    uint64_t v48 = *(void *)(v47 + 152);
    uint64_t v49 = *(unsigned int *)(v47 + 168);
    if (v49)
    {
      LODWORD(v50) = (v49 - 1) & ((v6 >> 4) ^ (v6 >> 9));
      uint64_t v51 = (uint64_t ****)(v48 + 16 * v50);
      BOOL v52 = *v51;
      if (*v51 == v6)
      {
LABEL_75:
        uint64_t v59 = v51[1];
        if (*v59 != (uint64_t **)4 || *((_DWORD *)v59 + 4) != 1718509940) {
          return v21;
        }
        return *(llvm::Instruction **)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF));
      }
      int v53 = 1;
      while (v52 != (uint64_t ***)-4096)
      {
        int v54 = v50 + v53++;
        uint64_t v50 = v54 & (v49 - 1);
        BOOL v52 = *(uint64_t ****)(v48 + 16 * v50);
        if (v52 == v6)
        {
          uint64_t v51 = (uint64_t ****)(v48 + 16 * v50);
          goto LABEL_75;
        }
      }
    }
    uint64_t v51 = (uint64_t ****)(v48 + 16 * v49);
    goto LABEL_75;
  }
  if (v69 != 155 || (*((unsigned char *)v6 + 23) & 0x10) == 0) {
    return v21;
  }
  uint64_t v39 = ***v6;
  uint64_t v40 = *(void *)(v39 + 152);
  uint64_t v41 = *(unsigned int *)(v39 + 168);
  if (!v41) {
    goto LABEL_66;
  }
  LODWORD(v42) = (v41 - 1) & ((v6 >> 4) ^ (v6 >> 9));
  uint64_t v43 = (uint64_t ****)(v40 + 16 * v42);
  int v44 = *v43;
  if (*v43 != v6)
  {
    int v45 = 1;
    while (v44 != (uint64_t ***)-4096)
    {
      int v46 = v42 + v45++;
      uint64_t v42 = v46 & (v41 - 1);
      int v44 = *(uint64_t ****)(v40 + 16 * v42);
      if (v44 == v6)
      {
        uint64_t v43 = (uint64_t ****)(v40 + 16 * v42);
        goto LABEL_67;
      }
    }
LABEL_66:
    uint64_t v43 = (uint64_t ****)(v40 + 16 * v41);
  }
LABEL_67:
  uint64_t v55 = v43[1];
  if (*v55 == (uint64_t **)3)
  {
    int v56 = *((unsigned __int16 *)v55 + 8);
    int v57 = *((unsigned __int8 *)v55 + 18);
    if (v56 == 24948 && v57 == 110) {
      return *(llvm::Instruction **)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF));
    }
  }
  return v21;
}

uint64_t llvm::LibCallSimplifier::optimizeSinCosPi(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)a2 + 8);
  if (v6 && (*(unsigned char *)(v6 + 16) & 0x20) != 0) {
    goto LABEL_5;
  }
  if (!llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 37)) {
    return 0;
  }
  uint64_t v6 = *((void *)a2 + 8);
  if (v6)
  {
LABEL_5:
    if ((*(unsigned char *)(v6 + 17) & 0x10) != 0) {
      goto LABEL_8;
    }
  }
  LODWORD(__p[0]) = 7;
  if (!sub_1CC5CB59C((uint64_t)a2, (__int32 *)__p, 1uLL)
    || (uint64_t v53 = *((void *)a2 - 4)) != 0
    && !*(unsigned char *)(v53 + 16)
    && *(void *)(v53 + 24) == *((void *)a2 + 9)
    && *(_DWORD *)(v53 + 36) == 7)
  {
    if (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 44))
    {
LABEL_8:
      uint64_t v7 = *((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
      char v65 = &v67;
      uint64_t v66 = 0x100000000;
      uint64_t v62 = &v64;
      uint64_t v63 = 0x100000000;
      uint64_t v59 = &v61;
      uint64_t v60 = 0x100000000;
      uint64_t v8 = *(void *)(v7 + 8);
      if (v8)
      {
        int v9 = *(unsigned __int8 *)(*(void *)v7 + 8);
        uint64_t v10 = *(void *)(*((void *)a2 + 5) + 56);
        do
        {
          llvm::LibCallSimplifier::classifyArgUse((uint64_t)this, *(void *)(v8 + 24), v10, v9 == 2, (uint64_t)&v65, (uint64_t)&v62, (uint64_t)&v59);
          uint64_t v8 = *(void *)(v8 + 8);
        }
        while (v8);
        if (v66 && v63 != 0)
        {
          uint64_t v13 = *((void *)a2 - 4);
          if (!v13 || *(unsigned char *)(v13 + 16) || *(void *)(v13 + 24) != *((void *)a2 + 9)) {
            uint64_t v13 = 0;
          }
          uint64_t v58 = v7;
          int v14 = *(llvm::FixedVectorType **)v7;
          uint64_t v15 = *(void *)(v13 + 40) + 216;
          __int16 v70 = 260;
          char v68 = (const char *)v15;
          llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)&v68);
          if (v9 == 2)
          {
            if (v57 == 42)
            {
              llvm::FixedVectorType::get(v14, (llvm::Type *)2);
            }
            else
            {
              uint64_t v21 = *(uint64_t **)v14;
              char v68 = (const char *)v14;
              unsigned int v69 = v14;
              uint64_t v16 = llvm::StructType::get(v21, (uint64_t)&v68, 2, 0);
            }
            size_t v18 = (uint64_t **)v16;
            BOOL v19 = "__sincospif_stret";
            uint64_t v20 = 17;
          }
          else
          {
            size_t v17 = *(uint64_t **)v14;
            char v68 = (const char *)v14;
            unsigned int v69 = v14;
            size_t v18 = (uint64_t **)llvm::StructType::get(v17, (uint64_t)&v68, 2, 0);
            BOOL v19 = "__sincospi_stret";
            uint64_t v20 = 16;
          }
          uint64_t v22 = (uint64_t **)sub_1CD57B9C0(*(void *)(v13 + 40), (unsigned __int8 *)v19, (const char *)v20, *(void *)(v13 + 112), v18, (uint64_t)v14);
          uint64_t v24 = v23;
          if (*(unsigned __int8 *)(v7 + 16) >= 0x1Cu)
          {
            uint64_t v27 = *(void *)(v7 + 32);
            uint64_t v26 = *(void *)(v7 + 40);
          }
          else
          {
            uint64_t v25 = *(void *)(*(void *)(*((void *)a3 + 6) + 56) + 80);
            if (v25) {
              uint64_t v26 = v25 - 24;
            }
            else {
              uint64_t v26 = 0;
            }
            uint64_t v27 = *(void *)(v26 + 48);
          }
          sub_1CBF5385C((uint64_t)a3, v26, v27);
          char v68 = "sincospi";
          __int16 v70 = 259;
          char v29 = (uint64_t *)sub_1CB845BAC((uint64_t *)a3, v22, v24, &v58, 1, (uint64_t)&v68, 0);
          if (*(unsigned char *)(*v29 + 8) == 16)
          {
            unsigned int v54 = 0;
            char v68 = "sinpi";
            __int16 v70 = 259;
            uint64_t v30 = sub_1CC2415A4((uint64_t)a3, v29, &v54, 1, (uint64_t)&v68);
            unsigned int v54 = 1;
            char v68 = "cospi";
            __int16 v70 = 259;
            int v31 = sub_1CC2415A4((uint64_t)a3, v29, &v54, 1, (uint64_t)&v68);
          }
          else
          {
            uint64_t v32 = **((void **)a3 + 8);
            size_t v33 = *(llvm::ConstantInt **)(v32 + 1960);
            unsigned int v34 = *(_DWORD *)(v32 + 1968);
            LODWORD(v69) = v34 >> 8;
            if (v34 >> 8 >= 0x41) {
              operator new[]();
            }
            char v68 = 0;
            size_t v35 = (unsigned __int8 *)llvm::ConstantInt::get(v33, (llvm::LLVMContext *)&v68, v28);
            if (v69 >= 0x41 && v68) {
              MEMORY[0x1D25D9CB0](v68, 0x1000C8000313F17);
            }
            char v68 = "sinpi";
            __int16 v70 = 259;
            uint64_t v30 = sub_1CB8445F4((uint64_t)a3, (unsigned __int8 *)v29, v35, (uint64_t)&v68);
            uint64_t v37 = **((void **)a3 + 8);
            uint64_t v38 = *(llvm::ConstantInt **)(v37 + 1960);
            unint64_t v39 = *(unsigned int *)(v37 + 1968);
            LODWORD(v69) = v39 >> 8;
            if (v39 >> 8 > 0x40) {
              operator new[]();
            }
            if (v39 <= 0xFF) {
              LOBYTE(v40) = 0;
            }
            else {
              unint64_t v40 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v39) + 63);
            }
            char v68 = (const char *)(v40 & 1);
            uint64_t v41 = (unsigned __int8 *)llvm::ConstantInt::get(v38, (llvm::LLVMContext *)&v68, v36);
            if (v69 >= 0x41 && v68)
            {
              BOOL v52 = v41;
              MEMORY[0x1D25D9CB0](v68, 0x1000C8000313F17);
              uint64_t v41 = v52;
            }
            char v68 = "cospi";
            __int16 v70 = 259;
            int v31 = sub_1CB8445F4((uint64_t)a3, (unsigned __int8 *)v29, v41, (uint64_t)&v68);
          }
          uint64_t v42 = v31;
          if (v56 < 0) {
            operator delete(__p[0]);
          }
          if (v66)
          {
            uint64_t v43 = (uint64_t *)v65;
            uint64_t v44 = 8 * v66;
            do
            {
              uint64_t v45 = *v43++;
              (*((void (**)(void, uint64_t, llvm::Instruction *))this + 8))(*((void *)this + 9), v45, v30);
              v44 -= 8;
            }
            while (v44);
          }
          if (v63)
          {
            int v46 = (uint64_t *)v62;
            uint64_t v47 = 8 * v63;
            do
            {
              uint64_t v48 = *v46++;
              (*((void (**)(void, uint64_t, llvm::Instruction *))this + 8))(*((void *)this + 9), v48, v42);
              v47 -= 8;
            }
            while (v47);
          }
          if (v60)
          {
            uint64_t v49 = (uint64_t *)v59;
            uint64_t v50 = 8 * v60;
            do
            {
              uint64_t v51 = *v49++;
              (*((void (**)(void, uint64_t, uint64_t *))this + 8))(*((void *)this + 9), v51, v29);
              v50 -= 8;
            }
            while (v50);
          }
        }
      }
      if (v59 != &v61) {
        free(v59);
      }
      if (v62 != &v64) {
        free(v62);
      }
      if (v65 != &v67) {
        free(v65);
      }
    }
  }
  return 0;
}

llvm::Value *llvm::LibCallSimplifier::optimizeFFS(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  v35[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::Constant **)*((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  unsigned int v34 = *v4;
  uint64_t Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(*((void *)a2 - 4) + 40), 54, (uint64_t)&v34, 1);
  uint64_t v7 = (uint64_t **)Declaration;
  if (Declaration) {
    uint64_t v8 = *(uint64_t ***)(Declaration + 24);
  }
  else {
    uint64_t v8 = 0;
  }
  v35[0] = (uint64_t)v4;
  int v9 = (uint64_t *)*((void *)a3 + 8);
  uint64_t v10 = *v9;
  __int16 v11 = *(void **)(*v9 + 1560);
  if (!v11)
  {
    uint64_t v28 = *(llvm::ConstantInt **)(v10 + 1888);
    unsigned int v29 = *(_DWORD *)(v10 + 1896);
    unsigned int v32 = v29 >> 8;
    if (v29 >> 8 > 0x40) {
      operator new[]();
    }
    unint64_t v30 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v29) + 63);
    if (v29 <= 0xFF) {
      LOBYTE(v30) = 0;
    }
    int v31 = (const char *)(v30 & 1);
    __int16 v11 = llvm::ConstantInt::get(v28, (llvm::LLVMContext *)&v31, v6);
    if (v32 >= 0x41 && v31) {
      MEMORY[0x1D25D9CB0](v31, 0x1000C8000313F17);
    }
    *(void *)(v10 + 1560) = v11;
  }
  v35[1] = (uint64_t)v11;
  int v31 = "cttz";
  __int16 v33 = 259;
  size_t v12 = (llvm::ConstantInt **)sub_1CB845BAC((uint64_t *)a3, v8, v7, v35, 2, (uint64_t)&v31, 0);
  uint64_t v13 = llvm::ConstantInt::get(*v12, 1uLL, 0);
  __int16 v33 = 257;
  int v14 = sub_1CB844A3C((uint64_t)a3, v12, (uint64_t)v13, (uint64_t)&v31, 0, 0);
  uint64_t v15 = (llvm::Type ***)(**((void **)a3 + 8) + 1960);
  __int16 v33 = 257;
  size_t v17 = sub_1CBF56614((uint64_t)a3, v14, v15, 0, (uint64_t)&v31, v16);
  NullValue = llvm::Constant::getNullValue(v34, v18, v19);
  __int16 v33 = 257;
  uint64_t v22 = sub_1CB845F20((uint64_t)a3, 33, v4, (uint64_t)NullValue, (uint64_t)&v31);
  uint64_t v23 = **((void **)a3 + 8);
  uint64_t v24 = *(llvm::ConstantInt **)(v23 + 1960);
  unsigned int v25 = *(_DWORD *)(v23 + 1968);
  unsigned int v32 = v25 >> 8;
  if (v25 >> 8 >= 0x41) {
    operator new[]();
  }
  int v31 = 0;
  uint64_t v26 = (llvm::Value *)llvm::ConstantInt::get(v24, (llvm::LLVMContext *)&v31, v21);
  if (v32 >= 0x41 && v31) {
    MEMORY[0x1D25D9CB0](v31, 0x1000C8000313F17);
  }
  __int16 v33 = 257;
  return llvm::IRBuilderBase::CreateSelect(a3, v22, v17, v26, (const llvm::Twine *)&v31, 0);
}

llvm::Instruction *llvm::LibCallSimplifier::optimizeFls(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  v26[2] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (uint64_t *)*((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  uint64_t v25 = *v5;
  uint64_t Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(*((void *)a2 - 4) + 40), 52, (uint64_t)&v25, 1);
  uint64_t v8 = (uint64_t **)Declaration;
  if (Declaration) {
    int v9 = *(uint64_t ***)(Declaration + 24);
  }
  else {
    int v9 = 0;
  }
  v26[0] = (uint64_t)v5;
  uint64_t v10 = (uint64_t *)*((void *)a3 + 8);
  uint64_t v11 = *v10;
  size_t v12 = *(void **)(*v10 + 1568);
  if (!v12)
  {
    BOOL v19 = *(llvm::ConstantInt **)(v11 + 1888);
    unsigned int v20 = *(_DWORD *)(v11 + 1896);
    unsigned int v23 = v20 >> 8;
    if (v20 >> 8 > 0x40) {
      operator new[]();
    }
    uint64_t v22 = 0;
    size_t v12 = llvm::ConstantInt::get(v19, (llvm::LLVMContext *)&v22, v7);
    if (v23 >= 0x41 && v22)
    {
      uint64_t v21 = v12;
      MEMORY[0x1D25D9CB0](v22, 0x1000C8000313F17);
      size_t v12 = v21;
    }
    *(void *)(v11 + 1568) = v12;
  }
  v26[1] = (uint64_t)v12;
  uint64_t v22 = "ctlz";
  __int16 v24 = 259;
  uint64_t v13 = (llvm::ConstantInt **)sub_1CB845BAC((uint64_t *)a3, v9, v8, v26, 2, (uint64_t)&v22, 0);
  int v14 = llvm::ConstantInt::get(*v13, (unint64_t)*(unsigned int *)(v25 + 8) >> 8, 0);
  __int16 v24 = 257;
  uint64_t v15 = sub_1CB84494C((uint64_t)a3, (uint64_t)v14, (uint64_t)v13, (uint64_t)&v22, 0, 0);
  uint64_t v16 = *(llvm::Type ****)a2;
  __int16 v24 = 257;
  return sub_1CBF56614((uint64_t)a3, v15, v16, 0, (uint64_t)&v22, v17);
}

void *sub_1CD247434(llvm::Type **a1, void *__src, size_t __n, uint64_t a4)
{
  int v4 = a4;
  if (a4 && (unint64_t)(a4 - 37) < 0xFFFFFFFFFFFFFFDDLL) {
    return 0;
  }
  __endptr = 0;
  if (__src)
  {
    if (__n >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (__n >= 0x17)
    {
      size_t v11 = (__n & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__n | 7) != 0x17) {
        size_t v11 = __n | 7;
      }
      size_t v12 = v11 + 1;
      p_p = operator new(v11 + 1);
      size_t v19 = __n;
      int64_t v20 = v12 | 0x8000000000000000;
      __p = p_p;
    }
    else
    {
      HIBYTE(v20) = __n;
      p_p = &__p;
      if (!__n)
      {
LABEL_14:
        *((unsigned char *)p_p + __n) = 0;
        if (v20 >= 0) {
          uint64_t v10 = (const char *)&__p;
        }
        else {
          uint64_t v10 = (const char *)__p;
        }
        goto LABEL_17;
      }
    }
    memcpy(p_p, __src, __n);
    goto LABEL_14;
  }
  __p = 0;
  size_t v19 = 0;
  uint64_t v10 = (const char *)&__p;
  int64_t v20 = 0;
LABEL_17:
  *__error() = 0;
  int64_t v13 = strtoll(v10, &__endptr, v4);
  if (*__error() || *__endptr)
  {
    uint64_t v8 = 0;
  }
  else
  {
    int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*a1);
    if (v15 == 1) {
    if ((PrimitiveSizeInBits & 0xFFFFFFC0) != 0
    }
      || (uint64_t v8 = 0, v17 = -1 << (PrimitiveSizeInBits - 1), v17 <= v13) && v13 <= ~v17)
    {
      uint64_t v8 = llvm::ConstantInt::get(*a1, v13, 0);
    }
  }
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
  return v8;
}

void *llvm::LibCallSimplifier::optimizeStrtol(llvm::LibCallSimplifier *this, llvm **a2, llvm::IRBuilderBase *a3)
{
  size_t v12 = 0;
  size_t v13 = 0;
  if (!llvm::getConstantStringInfo(a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)], (const llvm::Value *)&v12, 0, 1)) {
    return 0;
  }
  int v4 = &a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
  if (*((unsigned char *)v4[4] + 16) != 19) {
    return 0;
  }
  uint64_t v5 = v4[8];
  if (!v5 || *((unsigned char *)v5 + 16) != 16) {
    return 0;
  }
  unsigned int v8 = *((_DWORD *)v5 + 8);
  if (v8 > 0x40) {
    uint64_t v9 = **((void **)v5 + 3);
  }
  else {
    uint64_t v9 = (uint64_t)(*((void *)v5 + 3) << -(char)v8) >> -(char)v8;
  }
  uint64_t v10 = v12;
  size_t v11 = v13;

  return sub_1CD247434(a2, v10, v11, v9);
}

uint64_t llvm::LibCallSimplifier::optimizeErrorReporting(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3, int a4)
{
  uint64_t v6 = *((void *)a2 - 4);
  if (!v6 || *(unsigned char *)(v6 + 16) || *(void *)(v6 + 24) != *((void *)a2 + 9)) {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *((void *)a2 + 8);
  if (!v7 || (*(unsigned char *)(v7 + 12) & 0x20) == 0)
  {
    char hasFnAttrOnCalledFunction = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 5);
    if (v6)
    {
      if ((hasFnAttrOnCalledFunction & 1) == 0)
      {
        if (*(unsigned char *)(v6 + 16))
        {
          if (*(unsigned char *)(v6 + 16) != 3 || (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) != 0) {
            return 0;
          }
        }
        else if (*(void *)(v6 + 72) != v6 + 72 || (*(unsigned char *)(v6 + 34) & 0x80) != 0)
        {
          return 0;
        }
        if (a4 < 0) {
          goto LABEL_41;
        }
        int v9 = *((unsigned __int8 *)a2 + 16);
        if (v9 == 84)
        {
          uint64_t v10 = 0;
        }
        else if (v9 == 39)
        {
          uint64_t v10 = (*((_DWORD *)a2 + 20) + 1);
        }
        else
        {
          uint64_t v10 = 2;
        }
        int v11 = 0;
        int v12 = *((_DWORD *)a2 + 5);
        uint64_t v13 = -(uint64_t)(v12 & 0x7FFFFFF);
        if (v12 < 0)
        {
          unsigned int v32 = (char *)a2 - 32 * (v12 & 0x7FFFFFF);
          uint64_t v33 = *((void *)v32 - 1);
          if ((v33 & 0xFFFFFFFF0) != 0) {
            int v11 = *((_DWORD *)v32 - 3) - *(_DWORD *)&v32[-v33];
          }
          else {
            int v11 = 0;
          }
        }
        int v14 = (char *)a2 + 32 * -v11 + -32 * v10;
        uint64_t v15 = (char *)a2 + 32 * v13;
        if ((int)((unint64_t)(v14 - v15 - 32) >> 5) > a4)
        {
          uint64_t v16 = *(void *)&v15[32 * a4];
          if (v16)
          {
            if (*(unsigned char *)(v16 + 16) == 60)
            {
              uint64_t v17 = *(uint64_t ****)(v16 - 32);
              BOOL v18 = v17 && *((unsigned char *)v17 + 16) == 3;
              if (v18 && (*((_DWORD *)v17 + 5) & 0x17FFFFFF) == 0x10000000)
              {
                uint64_t v19 = ***v17;
                uint64_t v20 = *(void *)(v19 + 152);
                uint64_t v21 = *(unsigned int *)(v19 + 168);
                if (v21)
                {
                  LODWORD(v22) = (v21 - 1) & ((v17 >> 4) ^ (v17 >> 9));
                  unsigned int v23 = (uint64_t ****)(v20 + 16 * v22);
                  __int16 v24 = *v23;
                  if (*v23 == v17)
                  {
LABEL_35:
                    uint64_t v27 = v23[1];
                    if (*v27 != (uint64_t **)6) {
                      return 0;
                    }
                    int v28 = *((_DWORD *)v27 + 4);
                    int v29 = *((unsigned __int16 *)v27 + 10);
                    if (v28 != 1701082227 || v29 != 29298) {
                      return 0;
                    }
LABEL_41:
                    *((void *)a2 + 8) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a2 + 8, **(uint64_t ***)a2, -1, 5);
                    return 0;
                  }
                  int v25 = 1;
                  while (v24 != (uint64_t ***)-4096)
                  {
                    int v26 = v22 + v25++;
                    uint64_t v22 = v26 & (v21 - 1);
                    __int16 v24 = *(uint64_t ****)(v20 + 16 * v22);
                    if (v24 == v17)
                    {
                      unsigned int v23 = (uint64_t ****)(v20 + 16 * v22);
                      goto LABEL_35;
                    }
                  }
                }
                unsigned int v23 = (uint64_t ****)(v20 + 16 * v21);
                goto LABEL_35;
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

BOOL sub_1CD2478F8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 20);
  if ((v1 & 0x40000000) == 0)
  {
    uint64_t v2 = v1 & 0x7FFFFFF;
    uint64_t v3 = (uint64_t *)(a1 - 32 * v2);
    if (v2) {
      goto LABEL_3;
    }
    return 0;
  }
  uint64_t v3 = *(uint64_t **)(a1 - 8);
  uint64_t v2 = v1 & 0x7FFFFFF;
  if (!v2) {
    return 0;
  }
LABEL_3:
  uint64_t v4 = 32 * v2 - 32;
  do
  {
    uint64_t v5 = *v3;
    v3 += 4;
    unsigned int v6 = *(unsigned __int8 *)(*(void *)v5 + 8);
    BOOL result = v6 < 7;
    BOOL v8 = v6 < 7 || v4 == 0;
    v4 -= 32;
  }
  while (!v8);
  return result;
}

BOOL sub_1CD24794C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 20);
  if ((v1 & 0x40000000) == 0)
  {
    uint64_t v2 = v1 & 0x7FFFFFF;
    uint64_t v3 = (uint64_t *)(a1 - 32 * v2);
    if (v2) {
      goto LABEL_3;
    }
    return 0;
  }
  uint64_t v3 = *(uint64_t **)(a1 - 8);
  uint64_t v2 = v1 & 0x7FFFFFF;
  if (!v2) {
    return 0;
  }
LABEL_3:
  uint64_t v4 = 32 * v2 - 32;
  do
  {
    uint64_t v5 = *v3;
    v3 += 4;
    int v6 = *(unsigned __int8 *)(*(void *)v5 + 8);
    BOOL result = v6 == 5;
    BOOL v8 = v6 == 5 || v4 == 0;
    v4 -= 32;
  }
  while (!v8);
  return result;
}

llvm::Instruction *llvm::LibCallSimplifier::optimizeSPrintFString(llvm::LibCallSimplifier *this, llvm **a2, llvm::IRBuilderBase *a3)
{
  __s = 0;
  size_t __n = 0;
  BOOL ConstantStringInfo = llvm::getConstantStringInfo(a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 4], (const llvm::Value *)&__s, 0, 1);
  BOOL result = 0;
  if (!ConstantStringInfo) {
    return result;
  }
  int v9 = *((_DWORD *)a2 + 5);
  uint64_t v10 = &a2[-4 * (v9 & 0x7FFFFFF)];
  int v11 = *v10;
  int v12 = *((unsigned __int8 *)a2 + 16);
  if (v12 == 84)
  {
    uint64_t v13 = 0;
  }
  else if (v12 == 39)
  {
    uint64_t v13 = (*((_DWORD *)a2 + 20) + 1);
  }
  else
  {
    uint64_t v13 = 2;
  }
  if (v9 < 0 && (uint64_t v80 = (uint64_t)*(v10 - 1), (v80 & 0xFFFFFFFF0) != 0)) {
    int v14 = *((_DWORD *)v10 - 3) - *(_DWORD *)((char *)v10 - v80);
  }
  else {
    int v14 = 0;
  }
  size_t v15 = __n;
  if (((-32 * v13 + 32 * -v14 - -32 * (v9 & 0x7FFFFFF) - 32) & 0x1FFFFFFFE0) == 0x40)
  {
    if (!__n || (uint64_t v16 = __s, (v17 = memchr(__s, 37, __n)) == 0) || v17 - v16 == -1)
    {
      BOOL v18 = v10[4];
      uint64_t v19 = llvm::IntegerType::get(*(llvm::IntegerType **)*a2, (llvm::LLVMContext *)*(unsigned int *)(*(void *)(*((void *)this + 2) + 232) + 4));
      uint64_t v21 = *(llvm::ConstantInt **)v19;
      unsigned int v22 = *(_DWORD *)(v19 + 8);
      unsigned int v90 = v22 >> 8;
      if (v22 >> 8 > 0x40) {
        operator new[]();
      }
      unint64_t v23 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v22) + 63);
      if (v22 <= 0xFF) {
        unint64_t v23 = 0;
      }
      long long v89 = (const char *)(v23 & (v15 + 1));
      __int16 v24 = llvm::ConstantInt::get(v21, (llvm::LLVMContext *)&v89, v20);
      if (v90 >= 0x41)
      {
        if (v89) {
          MEMORY[0x1D25D9CB0](v89, 0x1000C8000313F17);
        }
      }
      llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)a3, 194, v11, 256, v18, 256, v24, 0, 0, 0, 0, 0);
      int v25 = *a2;
      unint64_t v26 = v15;
      return (llvm::Instruction *)llvm::ConstantInt::get(v25, v26, 0);
    }
    return 0;
  }
  if (__n != 2 || *(unsigned char *)__s != 37) {
    return 0;
  }
  if (v12 == 84) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = v12 == 39 ? (*((_DWORD *)a2 + 20) + 1) : 2;
  }
  if (v9 < 0 && (uint64_t v81 = (uint64_t)*(v10 - 1), (v81 & 0xFFFFFFFF0) != 0)) {
    int v28 = *((_DWORD *)v10 - 3) - *(_DWORD *)((char *)v10 - v81);
  }
  else {
    int v28 = 0;
  }
  if (((unint64_t)((char *)(&a2[4 * -v28] - 4 * v27) - (char *)v10 - 32) >> 5) < 3) {
    return 0;
  }
  int v29 = *((unsigned __int8 *)__s + 1);
  if (v29 != 115)
  {
    if (v29 == 99)
    {
      unint64_t v30 = (unsigned __int8 *)v10[8];
      uint64_t v31 = *(void *)v30;
      if (*(unsigned char *)(*(void *)v30 + 8) == 13)
      {
        uint64_t v32 = **((void **)a3 + 8) + 1912;
        v85[0] = "char";
        __int16 v86 = 259;
        if (v31 != v32)
        {
          if (v30[16] <= 0x14u)
          {
            uint64_t v47 = (*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**((void **)a3 + 9) + 224))(*((void *)a3 + 9), 38, v30, v32);
            unint64_t v30 = (unsigned __int8 *)v47;
            if (v47)
            {
              if (*(unsigned __int8 *)(v47 + 16) >= 0x1Cu)
              {
                (*(void (**)(void, uint64_t, void *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v47, v85, *((void *)a3 + 6), *((void *)a3 + 7));
                uint64_t v82 = *((unsigned int *)a3 + 2);
                if (v82)
                {
                  long long v83 = *(void **)a3;
                  uint64_t v84 = *(void *)a3 + 16 * v82;
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v30, *(_DWORD *)v83, (llvm::MDNode *)v83[1]);
                    v83 += 2;
                  }
                  while (v83 != (void *)v84);
                }
              }
            }
          }
          else
          {
            __int16 v91 = 257;
            unint64_t v30 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v30, v32, &v89, 0);
            (*(void (**)(void, unsigned __int8 *, void *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v30, v85, *((void *)a3 + 6), *((void *)a3 + 7));
            uint64_t v33 = *((unsigned int *)a3 + 2);
            if (v33)
            {
              unsigned int v34 = *(void **)a3;
              uint64_t v35 = *(void *)a3 + 16 * v33;
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v30, *(_DWORD *)v34, (llvm::MDNode *)v34[1]);
                v34 += 2;
              }
              while (v34 != (void *)v35);
            }
          }
        }
        uint64_t v48 = (uint64_t *)llvm::castToCStr(v11, a3, v6);
        sub_1CC27BF8C((uint64_t *)a3, (uint64_t)v30, (uint64_t)v48, 0, 0);
        uint64_t v50 = **((void **)a3 + 8);
        uint64_t v51 = v50 + 1912;
        BOOL v52 = *(llvm::ConstantInt **)(v50 + 1960);
        unint64_t v53 = *(unsigned int *)(v50 + 1968);
        unsigned int v90 = v53 >> 8;
        if (v53 >> 8 > 0x40) {
          operator new[]();
        }
        if (v53 <= 0xFF) {
          LOBYTE(v54) = 0;
        }
        else {
          unint64_t v54 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v53) + 63);
        }
        long long v89 = (const char *)(v54 & 1);
        uint64_t v55 = (const char *)llvm::ConstantInt::get(v52, (llvm::LLVMContext *)&v89, v49);
        if (v90 >= 0x41 && v89) {
          MEMORY[0x1D25D9CB0](v89, 0x1000C8000313F17);
        }
        long long v89 = "nul";
        __int16 v91 = 259;
        int v57 = sub_1CB930F7C((uint64_t *)a3, v51, v48, v55, (uint64_t)&v89);
        uint64_t v58 = **((void **)a3 + 8);
        uint64_t v59 = *(llvm::ConstantInt **)(v58 + 1912);
        unsigned int v60 = *(_DWORD *)(v58 + 1920);
        unsigned int v90 = v60 >> 8;
        if (v60 >> 8 >= 0x41) {
          operator new[]();
        }
        long long v89 = 0;
        uint64_t v61 = llvm::ConstantInt::get(v59, (llvm::LLVMContext *)&v89, v56);
        if (v90 >= 0x41 && v89) {
          MEMORY[0x1D25D9CB0](v89, 0x1000C8000313F17);
        }
        sub_1CC27BF8C((uint64_t *)a3, (uint64_t)v61, (uint64_t)v57, 0, 0);
        int v25 = *a2;
        unint64_t v26 = 1;
        return (llvm::Instruction *)llvm::ConstantInt::get(v25, v26, 0);
      }
    }
    return 0;
  }
  size_t v36 = v10[8];
  if (*(unsigned char *)(*(void *)v36 + 8) != 15) {
    return 0;
  }
  if (!a2[1])
  {
    BOOL result = (llvm::Instruction *)llvm::emitStrCpy(*v10, v36, a3, *((uint64_t **)this + 3));
    if (result && *((unsigned char *)result + 16) == 84) {
      *((_WORD *)result + 9) = *((_WORD *)result + 9) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
    }
    return result;
  }
  uint64_t StringLength = llvm::GetStringLength(v10[8], (const llvm::Value *)8);
  uint64_t v38 = &a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
  unint64_t v39 = v38[8];
  if (StringLength)
  {
    uint64_t v40 = StringLength;
    uint64_t v41 = llvm::IntegerType::get(*(llvm::IntegerType **)*a2, (llvm::LLVMContext *)*(unsigned int *)(*(void *)(*((void *)this + 2) + 232) + 4));
    uint64_t v43 = *(llvm::ConstantInt **)v41;
    unsigned int v44 = *(_DWORD *)(v41 + 8);
    unsigned int v90 = v44 >> 8;
    if (v44 >> 8 > 0x40) {
      operator new[]();
    }
    unint64_t v45 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v44) + 63);
    if (v44 <= 0xFF) {
      unint64_t v45 = 0;
    }
    long long v89 = (const char *)(v45 & v40);
    int v46 = llvm::ConstantInt::get(v43, (llvm::LLVMContext *)&v89, v42);
    if (v90 >= 0x41 && v89) {
      MEMORY[0x1D25D9CB0](v89, 0x1000C8000313F17);
    }
    llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)a3, 194, v11, 256, v39, 256, v46, 0, 0, 0, 0, 0);
    int v25 = *a2;
    unint64_t v26 = v40 - 1;
    return (llvm::Instruction *)llvm::ConstantInt::get(v25, v26, 0);
  }
  uint64_t v62 = llvm::emitStpCpy(v11, v38[8], a3, *((uint64_t **)this + 3));
  if (v62)
  {
    uint64_t v72 = (llvm::CastInst *)v62;
    uint64_t v73 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(**((void **)a3 + 8) + 1912), 0);
    __int16 v91 = 257;
    uint64_t v75 = sub_1CC277FE0((uint64_t)a3, v72, v73, (uint64_t)&v89, v74);
    int v76 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(**((void **)a3 + 8) + 1912), 0);
    __int16 v91 = 257;
    long long v78 = sub_1CC277FE0((uint64_t)a3, v11, v76, (uint64_t)&v89, v77);
    long long v79 = (llvm::Type *)(**((void **)a3 + 8) + 1912);
    __int16 v91 = 257;
    PtrDiff = llvm::IRBuilderBase::CreatePtrDiff(a3, v79, v75, v78, (const llvm::Twine *)&v89);
    unsigned int v69 = *a2;
    __int16 v91 = 257;
    __int16 v70 = a3;
    return sub_1CBF56614((uint64_t)v70, PtrDiff, (llvm::Type ***)v69, 0, (uint64_t)&v89, v68);
  }
  uint64_t v63 = a2[5];
  uint64_t v64 = *(void *)(*((void *)v63 + 7) + 112);
  if (v64 && ((*(unsigned char *)(v64 + 17) & 4) != 0 || *(char *)(v64 + 13) < 0)
    || (llvm::shouldOptimizeForSize(v63, *((llvm::ProfileSummaryInfo **)this + 6), *((llvm::BlockFrequencyInfoImplBase ***)this + 5)) & 1) != 0)
  {
    return 0;
  }
  BOOL result = (llvm::Instruction *)llvm::emitStrLen(a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 8], (uint64_t)a3, *((void *)this + 2), *((uint64_t **)this + 3));
  if (result)
  {
    char v65 = result;
    uint64_t v66 = llvm::ConstantInt::get(*(llvm::ConstantInt **)result, 1uLL, 0);
    long long v89 = "leninc";
    __int16 v91 = 259;
    uint64_t v67 = (uint64_t *)sub_1CB844A3C((uint64_t)a3, v65, (uint64_t)v66, (uint64_t)&v89, 0, 0);
    llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)a3, 194, v11, 256, a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 8], 256, v67, 0, 0, 0, 0, 0);
    unsigned int v69 = *a2;
    __int16 v91 = 257;
    __int16 v70 = a3;
    PtrDiff = v65;
    return sub_1CBF56614((uint64_t)v70, PtrDiff, (llvm::Type ***)v69, 0, (uint64_t)&v89, v68);
  }
  return result;
}

void *llvm::LibCallSimplifier::optimizeSnPrintFString(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  uint64_t v3 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
  uint64_t v4 = *((void *)v3 + 4);
  if (v4) {
    BOOL v5 = *(unsigned char *)(v4 + 16) == 16;
  }
  else {
    BOOL v5 = 0;
  }
  if (!v5) {
    return 0;
  }
  uint64_t v10 = (unint64_t *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u) {
    uint64_t v10 = (unint64_t *)*v10;
  }
  unint64_t v11 = *v10;
  __s = 0;
  size_t __n = 0;
  BOOL ConstantStringInfo = llvm::getConstantStringInfo(*((llvm **)v3 + 8), (const llvm::Value *)&__s, 0, 1);
  BOOL result = 0;
  if (ConstantStringInfo)
  {
    int v14 = *((unsigned __int8 *)a2 + 16);
    if (v14 == 84)
    {
      uint64_t v15 = 0;
    }
    else if (v14 == 39)
    {
      uint64_t v15 = (*((_DWORD *)a2 + 20) + 1);
    }
    else
    {
      uint64_t v15 = 2;
    }
    int v16 = *((_DWORD *)a2 + 5);
    if (v16 < 0 && (v63 = (char *)a2 - 32 * (v16 & 0x7FFFFFF), uint64_t v64 = *((void *)v63 - 1), (v64 & 0xFFFFFFFF0) != 0))
    {
      uint64_t v18 = -(uint64_t)(v16 & 0x7FFFFFF);
      int v17 = *((_DWORD *)v63 - 3) - *(_DWORD *)&v63[-v64];
    }
    else
    {
      int v17 = 0;
      uint64_t v18 = -(uint64_t)(v16 & 0x7FFFFFF);
    }
    uint64_t v19 = (char *)a2 + 32 * v18;
    size_t v20 = __n;
    if (((-32 * v15 + 32 * -v17 - 32 * v18 - 32) & 0x1FFFFFFFE0) == 0x60)
    {
      if (__n)
      {
        uint64_t v21 = __s;
        unsigned int v22 = memchr(__s, 37, __n);
        if (v22)
        {
          if (v22 - v21 != -1) {
            return 0;
          }
        }
      }
      if (v11)
      {
        if (v11 >= v20 + 1)
        {
          unint64_t v23 = *(llvm::Value **)v19;
          __int16 v24 = (llvm::Value *)*((void *)v19 + 8);
          uint64_t v25 = llvm::IntegerType::get(**(llvm::IntegerType ***)a2, (llvm::LLVMContext *)*(unsigned int *)(*(void *)(*((void *)this + 2) + 232) + 4));
          uint64_t v27 = *(llvm::ConstantInt **)v25;
          unsigned int v28 = *(_DWORD *)(v25 + 8);
          LODWORD(v74) = v28 >> 8;
          if (v28 >> 8 > 0x40) {
            operator new[]();
          }
          unint64_t v29 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v28) + 63);
          if (v28 <= 0xFF) {
            unint64_t v29 = 0;
          }
          uint64_t v73 = (const char *)(v29 & (v20 + 1));
          unint64_t v30 = llvm::ConstantInt::get(v27, (llvm::LLVMContext *)&v73, v26);
          if (v74 >= 0x41 && v73) {
            MEMORY[0x1D25D9CB0](v73, 0x1000C8000313F17);
          }
          MemTransferInst = llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)a3, 194, v23, 256, v24, 256, v30, 0, 0, 0, 0, 0);
          goto LABEL_25;
        }
        return 0;
      }
LABEL_28:
      uint64_t v32 = *(llvm::ConstantInt **)a2;
      unint64_t v33 = v20;
      return llvm::ConstantInt::get(v32, v33, 0);
    }
    if (__n != 2 || *(unsigned char *)__s != 37) {
      return 0;
    }
    if (v14 == 84) {
      uint64_t v34 = 0;
    }
    else {
      uint64_t v34 = v14 == 39 ? (*((_DWORD *)a2 + 20) + 1) : 2;
    }
    if (v16 < 0 && (uint64_t v65 = *((void *)v19 - 1), (v65 & 0xFFFFFFFF0) != 0)) {
      int v35 = *((_DWORD *)v19 - 3) - *(_DWORD *)&v19[-v65];
    }
    else {
      int v35 = 0;
    }
    if (((-32 * v34 + 32 * -v35 - 32 * v18 - 32) & 0x1FFFFFFFE0) != 0x80) {
      return 0;
    }
    int v36 = *((unsigned __int8 *)__s + 1);
    if (v36 == 99)
    {
      if (v11 != 1)
      {
        if (v11)
        {
          uint64_t v42 = (unsigned __int8 *)*((void *)v19 + 12);
          uint64_t v43 = *(void *)v42;
          if (*(unsigned char *)(*(void *)v42 + 8) != 13) {
            return 0;
          }
          uint64_t v44 = **((void **)a3 + 8) + 1912;
          v69[0] = "char";
          __int16 v70 = 259;
          if (v43 != v44)
          {
            if (v42[16] <= 0x14u)
            {
              uint64_t v48 = (*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**((void **)a3 + 9)
                                                                                           + 224))(*((void *)a3 + 9), 38, v42, v44);
              uint64_t v42 = (unsigned __int8 *)v48;
              if (v48)
              {
                if (*(unsigned __int8 *)(v48 + 16) >= 0x1Cu)
                {
                  (*(void (**)(void, uint64_t, void *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v48, v69, *((void *)a3 + 6), *((void *)a3 + 7));
                  uint64_t v66 = *((unsigned int *)a3 + 2);
                  if (v66)
                  {
                    uint64_t v67 = *(void **)a3;
                    uint64_t v68 = *(void *)a3 + 16 * v66;
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v42, *(_DWORD *)v67, (llvm::MDNode *)v67[1]);
                      v67 += 2;
                    }
                    while (v67 != (void *)v68);
                  }
                }
              }
            }
            else
            {
              __int16 v75 = 257;
              uint64_t v42 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v42, v44, &v73, 0);
              (*(void (**)(void, unsigned __int8 *, void *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v42, v69, *((void *)a3 + 6), *((void *)a3 + 7));
              uint64_t v45 = *((unsigned int *)a3 + 2);
              if (v45)
              {
                int v46 = *(void **)a3;
                uint64_t v47 = *(void *)a3 + 16 * v45;
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v42, *(_DWORD *)v46, (llvm::MDNode *)v46[1]);
                  v46 += 2;
                }
                while (v46 != (void *)v47);
              }
            }
          }
          uint64_t v49 = (uint64_t *)llvm::castToCStr(*((llvm **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)), a3, v12);
          sub_1CC27BF8C((uint64_t *)a3, (uint64_t)v42, (uint64_t)v49, 0, 0);
          uint64_t v51 = **((void **)a3 + 8);
          uint64_t v52 = v51 + 1912;
          unint64_t v53 = *(llvm::ConstantInt **)(v51 + 1960);
          unint64_t v54 = *(unsigned int *)(v51 + 1968);
          LODWORD(v74) = v54 >> 8;
          if (v54 >> 8 > 0x40) {
            operator new[]();
          }
          if (v54 <= 0xFF) {
            LOBYTE(v55) = 0;
          }
          else {
            unint64_t v55 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v54) + 63);
          }
          uint64_t v73 = (const char *)(v55 & 1);
          char v56 = (const char *)llvm::ConstantInt::get(v53, (llvm::LLVMContext *)&v73, v50);
          if (v74 >= 0x41 && v73) {
            MEMORY[0x1D25D9CB0](v73, 0x1000C8000313F17);
          }
          uint64_t v73 = "nul";
          __int16 v75 = 259;
          uint64_t v58 = sub_1CB930F7C((uint64_t *)a3, v52, v49, v56, (uint64_t)&v73);
          uint64_t v59 = **((void **)a3 + 8);
          unsigned int v60 = *(llvm::ConstantInt **)(v59 + 1912);
          unsigned int v61 = *(_DWORD *)(v59 + 1920);
          LODWORD(v74) = v61 >> 8;
          if (v61 >> 8 >= 0x41) {
            operator new[]();
          }
          uint64_t v73 = 0;
          uint64_t v62 = llvm::ConstantInt::get(v60, (llvm::LLVMContext *)&v73, v57);
          if (v74 >= 0x41 && v73) {
            MEMORY[0x1D25D9CB0](v73, 0x1000C8000313F17);
          }
          sub_1CC27BF8C((uint64_t *)a3, (uint64_t)v62, (uint64_t)v58, 0, 0);
        }
        uint64_t v32 = *(llvm::ConstantInt **)a2;
        unint64_t v33 = 1;
        return llvm::ConstantInt::get(v32, v33, 0);
      }
      return 0;
    }
    if (v36 != 115) {
      return 0;
    }
    uint64_t v73 = 0;
    size_t v74 = 0;
    BOOL v37 = llvm::getConstantStringInfo(*((llvm **)v19 + 12), (const llvm::Value *)&v73, 0, 1);
    BOOL result = 0;
    if (v37)
    {
      size_t v20 = v74;
      if (!v11) {
        goto LABEL_28;
      }
      if (v11 >= v74 + 1)
      {
        uint64_t v38 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
        unint64_t v39 = *(llvm::Value **)v38;
        uint64_t v40 = (llvm::Value *)*((void *)v38 + 12);
        uint64_t v41 = llvm::ConstantInt::get(*(llvm::ConstantInt **)a2, v74 + 1, 0);
        MemTransferInst = llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)a3, 194, v39, 256, v40, 256, v41, 0, 0, 0, 0, 0);
LABEL_25:
        if (MemTransferInst)
        {
          if (*((unsigned char *)MemTransferInst + 16) == 84) {
            *((_WORD *)MemTransferInst + 9) = *((_WORD *)MemTransferInst + 9) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
          }
        }
        goto LABEL_28;
      }
      return 0;
    }
  }
  return result;
}

llvm::Instruction *llvm::LibCallSimplifier::optimizeStringMemoryLibCall(llvm::LibCallSimplifier *this, uint64_t ****a2, llvm::IRBuilderBase *a3)
{
  int v10 = 0;
  BOOL LibFunc = llvm::TargetLibraryInfoImpl::getLibFunc(**((void **)this + 3), *(a2 - 4), &v10);
  if (!LibFunc) {
    return 0;
  }
  BOOL v8 = (void *)*((void *)this + 3);
  if (((*(void *)(v8[1] + (((unint64_t)v10 >> 3) & 0x1FFFFFF8)) >> v10) & 1) != 0
    || ((*(unsigned __int8 *)(*v8 + ((unint64_t)v10 >> 2)) >> (2 * (v10 & 3))) & 3) == 0)
  {
    return 0;
  }
  if (v10 > 360)
  {
    switch(v10)
    {
      case 401:
        return llvm::LibCallSimplifier::optimizeStpCpy(this, (llvm::CallInst *)a2, a3);
      case 402:
      case 403:
      case 407:
      case 410:
      case 411:
      case 412:
      case 414:
      case 419:
      case 426:
      case 427:
        return 0;
      case 404:
        return llvm::LibCallSimplifier::optimizeStrCat(this, (llvm::CallInst *)a2, a3);
      case 405:
        return llvm::LibCallSimplifier::optimizeStrChr(this, (llvm::CallInst *)a2, a3);
      case 406:
        return llvm::LibCallSimplifier::optimizeStrCmp(this, (llvm::CallInst *)a2, a3);
      case 408:
        return llvm::LibCallSimplifier::optimizeStrCpy(this, (llvm::CallInst *)a2, a3);
      case 409:
        return llvm::LibCallSimplifier::optimizeStrCSpn(this, (llvm **)a2, a3);
      case 413:
        return llvm::LibCallSimplifier::optimizeStrLen(this, (llvm::CallInst *)a2, (llvm::IntegerType **)a3);
      case 415:
        return llvm::LibCallSimplifier::optimizeStrNCat((const llvm::Value **)this, (llvm::CallInst *)a2, a3);
      case 416:
        return llvm::LibCallSimplifier::optimizeStrNCmp((const llvm::Value **)this, (llvm::CallInst *)a2, a3);
      case 417:
        return llvm::LibCallSimplifier::optimizeStrNCpy((const llvm::Value **)this, (uint64_t **)a2, a3);
      case 418:
        return (llvm::Instruction *)llvm::LibCallSimplifier::optimizeStrNDup((uint64_t **)this, (llvm::CallInst *)a2, a3);
      case 420:
        return llvm::LibCallSimplifier::optimizeStrPBrk((uint64_t **)this, (llvm **)a2, a3);
      case 421:
        return llvm::LibCallSimplifier::optimizeStrRChr((uint64_t **)this, (llvm::CallInst *)a2, a3);
      case 422:
        return llvm::LibCallSimplifier::optimizeStrSpn((llvm::LibCallSimplifier *)LibFunc, (llvm **)a2, v7);
      case 423:
        return llvm::LibCallSimplifier::optimizeStrStr(this, (llvm::CallInst *)a2, a3);
      case 424:
      case 425:
      case 428:
      case 429:
      case 430:
      case 431:
      case 432:
        llvm::LibCallSimplifier::optimizeStrTo((llvm::LibCallSimplifier *)LibFunc, (llvm::CallInst *)a2, v7);
        return 0;
      default:
        if (v10 == 361)
        {
          BOOL result = (llvm::Instruction *)llvm::LibCallSimplifier::optimizeRealloc(this, (llvm::CallInst *)a2, a3);
        }
        else
        {
          if (v10 != 466) {
            return 0;
          }
          BOOL result = llvm::LibCallSimplifier::optimizeWcslen((llvm::TargetLibraryInfoImpl ***)this, (llvm::CallInst *)a2, (llvm::IntegerType **)a3);
        }
        break;
    }
  }
  else
  {
    switch(v10)
    {
      case 319:
        return llvm::LibCallSimplifier::optimizeMemCCpy((llvm::LibCallSimplifier *)LibFunc, (llvm::CallInst *)a2, a3);
      case 320:
        return llvm::LibCallSimplifier::optimizeMemChr(this, (llvm::CallInst *)a2, a3);
      case 321:
        return (llvm::Instruction *)llvm::LibCallSimplifier::optimizeMemCmp(this, (llvm::CallInst *)a2, a3);
      case 322:
        return (llvm::Instruction *)llvm::LibCallSimplifier::optimizeMemCpy(this, (llvm::CallInst *)a2, a3);
      case 323:
        return (llvm::Instruction *)llvm::LibCallSimplifier::optimizeMemMove(this, (llvm::CallInst *)a2, a3);
      case 324:
        return llvm::LibCallSimplifier::optimizeMemPCpy((llvm::LibCallSimplifier *)LibFunc, (llvm::CallInst *)a2, a3);
      case 325:
        llvm::LibCallSimplifier::optimizeMemRChr((const llvm::Value **)this, (llvm **)a2, v7);
        return 0;
      case 326:
        return (llvm::Instruction *)llvm::LibCallSimplifier::optimizeMemSet(this, (llvm::CallInst *)a2, a3);
      default:
        if (v10 == 168)
        {
          BOOL result = llvm::LibCallSimplifier::optimizeMemCmpBCmpCommon(this, (llvm::CallInst *)a2, a3);
        }
        else
        {
          if (v10 != 169) {
            return 0;
          }
          BOOL result = (llvm::Instruction *)llvm::LibCallSimplifier::optimizeBCopy((llvm::LibCallSimplifier *)LibFunc, (llvm::CallInst *)a2, a3);
        }
        break;
    }
  }
  return result;
}

uint64_t sub_1CD249244(uint64_t a1, uint64_t a2, int a3)
{
  int v5 = *(_DWORD *)(a2 + 96);
  uint64_t v6 = *(void *)(a2 + 88);
  char v7 = *(unsigned char *)(a2 + 100);
  char v8 = *(unsigned char *)(a2 + 101);
  char v9 = *(unsigned char *)(a2 + 102);
  int v10 = *(unsigned __int8 *)(a1 + 17) >> 1;
  if (v10 == 127) {
    int v10 = -1;
  }
  *(_DWORD *)(a2 + 96) = v10;
  unint64_t v11 = *(uint64_t ***)(*(void *)(*(void *)(a1 + 40) + 56) + 40);
  uint64_t v18 = *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
  v16[0] = *(void *)a1;
  uint64_t Declaration = llvm::Intrinsic::getDeclaration(v11, a3, (uint64_t)v16, 1);
  if (Declaration) {
    uint64_t v13 = *(uint64_t ***)(Declaration + 24);
  }
  else {
    uint64_t v13 = 0;
  }
  __int16 v17 = 257;
  uint64_t v14 = sub_1CB845BAC((uint64_t *)a2, v13, (uint64_t **)Declaration, &v18, 1, (uint64_t)v16, 0);
  llvm::Value::takeName((int32x2_t ****)v14, (llvm::Value *)a1);
  if (v14 && *(unsigned char *)(v14 + 16) == 84) {
    *(_WORD *)(v14 + 18) = *(_WORD *)(v14 + 18) & 0xFFFC | *(_WORD *)(a1 + 18) & 3;
  }
  *(_DWORD *)(a2 + 96) = v5;
  *(void *)(a2 + 88) = v6;
  *(unsigned char *)(a2 + 100) = v7;
  *(unsigned char *)(a2 + 101) = v8;
  *(unsigned char *)(a2 + 102) = v9;
  return v14;
}

llvm::Instruction *llvm::LibCallSimplifier::optimizeCall(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  v79[12] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)a2 + 8);
  if (v6 && (*(unsigned char *)(v6 + 14) & 0x10) != 0) {
    goto LABEL_5;
  }
  if (!llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 20)) {
    goto LABEL_7;
  }
  uint64_t v6 = *((void *)a2 + 8);
  if (v6)
  {
LABEL_5:
    if ((*(unsigned char *)(v6 + 12) & 0x10) != 0) {
      goto LABEL_7;
    }
  }
  if (!llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 4)) {
    return 0;
  }
LABEL_7:
  int v74 = 0;
  uint64_t v7 = *((void *)a2 - 4);
  if (!v7 || *(unsigned char *)(v7 + 16) || (uint64_t v8 = *(void *)(v7 + 24), v8 != *((void *)a2 + 9)))
  {
    uint64_t v7 = 0;
    uint64_t v8 = *((void *)a2 + 9);
  }
  uint64_t v9 = *(void *)(*(void *)(*((void *)a2 + 5) + 56) + 40);
  uint64_t v12 = *(void *)(v9 + 216);
  uint64_t v10 = v9 + 216;
  uint64_t v11 = v12;
  char v13 = *(unsigned char *)(v10 + 23);
  if (v13 >= 0) {
    uint64_t v14 = v10;
  }
  else {
    uint64_t v14 = v11;
  }
  uint64_t v15 = *(void *)(v10 + 8);
  if (v13 >= 0) {
    uint64_t v16 = v13 & 0x7F;
  }
  else {
    uint64_t v16 = v15;
  }
  BOOL v17 = sub_1CC153868((*((unsigned __int16 *)a2 + 9) >> 2) & 0x3FF, v14, v16, v8);
  uint64_t v77 = v79;
  uint64_t v78 = 0x200000000;
  int v18 = *((_DWORD *)a2 + 5);
  if (v18 < 0 && (unint64_t v61 = *((void *)a2 - 4 * (v18 & 0x7FFFFFF) - 1), (v61 & 0xFFFFFFFF0) != 0))
  {
    uint64_t v62 = (v61 >> 4);
    uint64_t v63 = a2;
    do
    {
      uint64_t v64 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
      uint64_t v65 = (char *)a2 - 32 * v64;
      uint64_t v66 = (unsigned int *)((char *)v63 - *((void *)v65 - 1) + -32 * v64);
      uint64_t v67 = *v66;
      uint64_t v68 = v66[1];
      uint64_t v69 = *((void *)v66 - 1);
      __int16 v70 = (llvm::IRBuilderBase *)&v65[32 * v67];
      *(void *)&long long v71 = v68 - v67;
      *((void *)&v71 + 1) = v69;
      sub_1CD5C74F0((uint64_t)&v77, (uint64_t)&v70);
      uint64_t v63 = (llvm::CallInst *)((char *)v63 + 16);
      --v62;
    }
    while (v62);
    size_t v20 = v77;
    unsigned int v19 = v78;
  }
  else
  {
    unsigned int v19 = 0;
    size_t v20 = v79;
  }
  long long v73 = *(_OWORD *)((char *)a3 + 104);
  *((void *)a3 + 13) = v20;
  *((void *)a3 + 14) = v19;
  if (word_1EBCFE750)
  {
    char v21 = byte_1EBCFE7C8;
  }
  else
  {
    if (!sub_1CB845E74((uint64_t)a2) || *((unsigned __int8 *)a2 + 17) < 0xFEu) {
      goto LABEL_25;
    }
    char v21 = 1;
  }
  *((unsigned char *)this + 56) = v21;
LABEL_25:
  unsigned int v22 = (_OWORD *)((char *)a3 + 104);
  uint64_t v23 = *((void *)a2 - 4);
  if (v23 && !*(unsigned char *)(v23 + 16) && *(void *)(v23 + 24) == *((void *)a2 + 9))
  {
    if ((*(unsigned char *)(v23 + 33) & 0x20) != 0) {
      unint64_t v30 = a2;
    }
    else {
      unint64_t v30 = 0;
    }
    if (v30) {
      BOOL v31 = v17;
    }
    else {
      BOOL v31 = 0;
    }
    if (v31)
    {
      uint64_t v27 = 0;
      int v32 = *(_DWORD *)(*((void *)v30 - 4) + 36);
      if (v32 <= 193)
      {
        if ((v32 - 175) >= 3)
        {
          if (v32 != 76) {
            goto LABEL_57;
          }
          uint64_t v33 = (uint64_t)llvm::LibCallSimplifier::optimizeExp2(this, a2, a3);
        }
        else
        {
          uint64_t v33 = llvm::LibCallSimplifier::optimizeLog(this, a2, a3);
        }
      }
      else if (v32 <= 198)
      {
        if (v32 == 194)
        {
          uint64_t v33 = llvm::LibCallSimplifier::optimizeMemCpy(this, a2, a3);
        }
        else
        {
          if (v32 != 197) {
            goto LABEL_57;
          }
          uint64_t v33 = llvm::LibCallSimplifier::optimizeMemMove(this, a2, a3);
        }
      }
      else
      {
        switch(v32)
        {
          case 199:
            uint64_t v33 = llvm::LibCallSimplifier::optimizeMemSet(this, a2, a3);
            break;
          case 280:
            uint64_t v33 = llvm::LibCallSimplifier::optimizeSqrt(this, a2, a3);
            break;
          case 238:
            uint64_t v33 = llvm::LibCallSimplifier::optimizePow(this, a2, a3);
            break;
          default:
            goto LABEL_57;
        }
      }
LABEL_99:
      uint64_t v27 = (llvm::Instruction *)v33;
      goto LABEL_57;
    }
    if (v30)
    {
LABEL_56:
      uint64_t v27 = 0;
      goto LABEL_57;
    }
  }
  uint64_t v24 = llvm::FortifiedLibCallSimplifier::optimizeCall((uint64_t **)this, a2, a3);
  if (!v24)
  {
    if (!llvm::TargetLibraryInfoImpl::getLibFunc(**((void **)this + 3), (uint64_t ***)v7, &v74)) {
      goto LABEL_56;
    }
    unsigned int v28 = (void *)*((void *)this + 3);
    int v29 = v74;
    if (((*(void *)(v28[1] + (((unint64_t)v74 >> 3) & 0x1FFFFFF8)) >> v74) & 1) != 0
      || ((*(unsigned __int8 *)(*v28 + ((unint64_t)v74 >> 2)) >> (2 * (v74 & 3))) & 3) == 0)
    {
      goto LABEL_56;
    }
    if (v74 > 298)
    {
      if (v74 == 299 || v74 == 413) {
        goto LABEL_76;
      }
    }
    else if (v74 == 140 || v74 == 294)
    {
      goto LABEL_76;
    }
    if (!v17) {
      goto LABEL_56;
    }
LABEL_76:
    uint64_t v27 = llvm::LibCallSimplifier::optimizeStringMemoryLibCall(this, (uint64_t ****)a2, a3);
    if (v27) {
      goto LABEL_57;
    }
    uint64_t v27 = llvm::LibCallSimplifier::optimizeFloatingPointLibCall(this, (uint64_t)a2, v29, (uint64_t)a3);
    if (v27) {
      goto LABEL_57;
    }
    if (v29 <= 251)
    {
      if (v29 <= 231)
      {
        if ((v29 - 223) >= 3)
        {
          if ((v29 - 165) < 3)
          {
            uint64_t v33 = (uint64_t)llvm::LibCallSimplifier::optimizeAtoi(0, (llvm **)a2, v42);
          }
          else
          {
            if (v29 != 140) {
              goto LABEL_57;
            }
LABEL_168:
            uint64_t v33 = (uint64_t)llvm::LibCallSimplifier::optimizeAbs(0, a2, a3);
          }
        }
        else
        {
          uint64_t v33 = (uint64_t)llvm::LibCallSimplifier::optimizeFFS(0, a2, a3);
        }
        goto LABEL_99;
      }
      if ((v29 - 237) < 3)
      {
        uint64_t v33 = (uint64_t)llvm::LibCallSimplifier::optimizeFls(0, a2, a3);
        goto LABEL_99;
      }
      if (v29 != 232) {
        goto LABEL_57;
      }
      goto LABEL_149;
    }
    if (v29 > 429)
    {
      if (v29 != 430)
      {
        if (v29 != 459)
        {
          if (v29 != 444) {
            goto LABEL_57;
          }
          uint64_t v33 = (uint64_t)llvm::LibCallSimplifier::optimizeToAscii(0, a2, a3);
          goto LABEL_99;
        }
LABEL_149:
        uint64_t v48 = a2;
        int v49 = 0;
LABEL_150:
        llvm::LibCallSimplifier::optimizeErrorReporting(0, v48, v42, v49);
        goto LABEL_56;
      }
    }
    else
    {
      if (v29 <= 350)
      {
        if (v29 <= 343)
        {
          if (v29 > 291)
          {
            switch(v29)
            {
              case 292:
                uint64_t v33 = (uint64_t)llvm::LibCallSimplifier::optimizeIsAscii(0, a2, a3);
                goto LABEL_99;
              case 293:
                uint64_t v33 = (uint64_t)llvm::LibCallSimplifier::optimizeIsDigit(0, a2, a3);
                goto LABEL_99;
              case 294:
              case 299:
                goto LABEL_168;
              default:
                goto LABEL_57;
            }
            goto LABEL_57;
          }
          switch(v29)
          {
            case 252:
              uint64_t v33 = llvm::LibCallSimplifier::optimizeFPrintF(this, a2, a3);
              break;
            case 255:
              uint64_t v33 = llvm::LibCallSimplifier::optimizeFPuts(this, (llvm::BasicBlock **)a2, a3);
              break;
            case 277:
              uint64_t v33 = (uint64_t)llvm::LibCallSimplifier::optimizeFWrite((uint64_t **)this, a2, a3);
              break;
            default:
              goto LABEL_57;
          }
          goto LABEL_99;
        }
        if (v29 != 344) {
          goto LABEL_57;
        }
        uint64_t v48 = a2;
        int v49 = -1;
        goto LABEL_150;
      }
      if (v29 <= 391)
      {
        switch(v29)
        {
          case 351:
            uint64_t v33 = (uint64_t)llvm::LibCallSimplifier::optimizePrintF((uint64_t **)this, a2, a3);
            break;
          case 356:
            uint64_t v33 = llvm::LibCallSimplifier::optimizePuts((uint64_t **)this, a2, a3);
            break;
          case 391:
            uint64_t v33 = (uint64_t)llvm::LibCallSimplifier::optimizeSnPrintF((const llvm::Value **)this, a2, a3);
            break;
          default:
            goto LABEL_57;
        }
        goto LABEL_99;
      }
      if (v29 != 428)
      {
        if (v29 != 392) {
          goto LABEL_57;
        }
        uint64_t v33 = (uint64_t)llvm::LibCallSimplifier::optimizeSPrintF(this, a2, a3);
        goto LABEL_99;
      }
    }
    uint64_t v33 = (uint64_t)llvm::LibCallSimplifier::optimizeStrtol(0, (llvm **)a2, v42);
    goto LABEL_99;
  }
  uint64_t v25 = v24;
  if (*(unsigned char *)(v24 + 16) == 84)
  {
    uint64_t v26 = *(void *)(v24 - 32);
    if (v26)
    {
      if (!*(unsigned char *)(v26 + 16) && *(void *)(v26 + 24) == *(void *)(v24 + 72))
      {
        (*((void (**)(void, llvm::CallInst *, uint64_t))this + 8))(*((void *)this + 9), a2, v24);
        __int16 v70 = a3;
        long long v71 = *((_OWORD *)a3 + 3);
        uint64_t v38 = *((unsigned int *)a3 + 2);
        if (v38)
        {
          uint64_t v50 = (unsigned __int8 **)(*(void *)a3 + 8);
          uint64_t v51 = 16 * v38;
          while (*((_DWORD *)v50 - 2))
          {
            v50 += 2;
            v51 -= 16;
            if (!v51) {
              goto LABEL_65;
            }
          }
          uint64_t v52 = *v50;
          uint64_t v72 = v52;
          if (v52) {
            llvm::MetadataTracking::track((uint64_t)&v72, v52, 2);
          }
        }
        else
        {
LABEL_65:
          uint64_t v72 = 0;
        }
        *((void *)a3 + 6) = *(void *)(v25 + 40);
        *((void *)a3 + 7) = v25 + 24;
        unint64_t v39 = *(unsigned __int8 **)(v25 + 48);
        __int16 v75 = v39;
        if (v39)
        {
          llvm::MetadataTracking::track((uint64_t)&v75, v39, 2);
          uint64_t v40 = (uint64_t)v75;
        }
        else
        {
          uint64_t v40 = 0;
        }
        sub_1CB8461A4((uint64_t)a3, 0, v40);
        if (!v75)
        {
LABEL_69:
          uint64_t v27 = llvm::LibCallSimplifier::optimizeStringMemoryLibCall(this, (uint64_t ****)v25, a3);
          if (v27)
          {
            (*((void (**)(void, uint64_t, llvm::Instruction *))this + 8))(*((void *)this + 9), v25, v27);
            (*((void (**)(void, uint64_t))this + 10))(*((void *)this + 11), v25);
          }
          uint64_t v41 = v70;
          if ((void)v71)
          {
            sub_1CBF5385C((uint64_t)v70, v71, *((uint64_t *)&v71 + 1));
            uint64_t v41 = v70;
          }
          else
          {
            *((void *)v70 + 6) = 0;
            *((void *)v41 + 7) = 0;
          }
          __int16 v75 = v72;
          if (v72)
          {
            llvm::MetadataTracking::track((uint64_t)&v75, v72, 2);
            uint64_t v43 = (uint64_t)v75;
          }
          else
          {
            uint64_t v43 = 0;
          }
          sub_1CB8461A4((uint64_t)v41, 0, v43);
          if (!v75)
          {
LABEL_91:
            if (!v72) {
              goto LABEL_92;
            }
            int v56 = *v72;
            if ((v56 - 4) > 0x1E)
            {
              if ((v56 - 3) >= 0xFFFFFFFE) {
                unsigned int v60 = v72;
              }
              else {
                unsigned int v60 = 0;
              }
              if ((v56 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v58 = (unint64_t)(v60 + 8);
LABEL_162:
                int v76 = &v72;
                sub_1CC5FA668(v58 + 16, &v76);
                goto LABEL_92;
              }
              if (v56 == 3) {
                *((void *)v72 + 1) = 0;
              }
            }
            else if ((v72[1] & 0x7F) == 2 || *((_DWORD *)v72 + 3))
            {
              uint64_t v57 = *((void *)v72 + 2);
              if ((v57 & 4) != 0)
              {
                unint64_t v58 = v57 & 0xFFFFFFFFFFFFFFF8;
                if (v58) {
                  goto LABEL_162;
                }
              }
            }
LABEL_92:
            if (v27) {
              goto LABEL_57;
            }
            goto LABEL_33;
          }
          int v53 = *v75;
          if ((v53 - 4) > 0x1E)
          {
            if ((v53 - 3) >= 0xFFFFFFFE) {
              uint64_t v59 = v75;
            }
            else {
              uint64_t v59 = 0;
            }
            if ((v53 - 3) < 0xFFFFFFFE)
            {
              if (v53 == 3) {
                *((void *)v75 + 1) = 0;
              }
              goto LABEL_91;
            }
            unint64_t v55 = (unint64_t)(v59 + 8);
          }
          else
          {
            if ((v75[1] & 0x7F) != 2 && !*((_DWORD *)v75 + 3)) {
              goto LABEL_91;
            }
            uint64_t v54 = *((void *)v75 + 2);
            if ((v54 & 4) == 0) {
              goto LABEL_91;
            }
            unint64_t v55 = v54 & 0xFFFFFFFFFFFFFFF8;
            if (!v55) {
              goto LABEL_91;
            }
          }
          int v76 = &v75;
          sub_1CC5FA668(v55 + 16, &v76);
          goto LABEL_91;
        }
        int v44 = *v75;
        if ((v44 - 4) > 0x1E)
        {
          if ((v44 - 3) >= 0xFFFFFFFE) {
            uint64_t v47 = v75;
          }
          else {
            uint64_t v47 = 0;
          }
          if ((v44 - 3) < 0xFFFFFFFE)
          {
            if (v44 == 3) {
              *((void *)v75 + 1) = 0;
            }
            goto LABEL_69;
          }
          unint64_t v46 = (unint64_t)(v47 + 8);
        }
        else
        {
          if ((v75[1] & 0x7F) != 2 && !*((_DWORD *)v75 + 3)) {
            goto LABEL_69;
          }
          uint64_t v45 = *((void *)v75 + 2);
          if ((v45 & 4) == 0) {
            goto LABEL_69;
          }
          unint64_t v46 = v45 & 0xFFFFFFFFFFFFFFF8;
          if (!v46) {
            goto LABEL_69;
          }
        }
        int v76 = &v75;
        sub_1CC5FA668(v46 + 16, &v76);
        goto LABEL_69;
      }
    }
  }
LABEL_33:
  uint64_t v27 = (llvm::Instruction *)v25;
LABEL_57:
  *unsigned int v22 = v73;
  uint64_t v34 = v77;
  if (v78)
  {
    uint64_t v35 = 48 * v78;
    int v36 = (char *)v77 - 48;
    do
    {
      sub_1CD4AF9B4((uint64_t)&v36[v35]);
      v35 -= 48;
    }
    while (v35);
    uint64_t v34 = v77;
  }
  if (v34 != v79) {
    free(v34);
  }
  return v27;
}

uint64_t llvm::FortifiedLibCallSimplifier::optimizeCall(uint64_t **this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  v41[12] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)a2 - 4);
  if (!v6 || *(unsigned char *)(v6 + 16) || (uint64_t v7 = *(void *)(v6 + 24), v7 != *((void *)a2 + 9)))
  {
    uint64_t v6 = 0;
    uint64_t v7 = *((void *)a2 + 9);
  }
  int v36 = 0;
  int v8 = (*((unsigned __int16 *)a2 + 9) >> 2) & 0x3FF;
  uint64_t v9 = *(void *)(*(void *)(*((void *)a2 + 5) + 56) + 40);
  uint64_t v12 = *(void *)(v9 + 216);
  uint64_t v10 = v9 + 216;
  uint64_t v11 = v12;
  char v13 = *(unsigned char *)(v10 + 23);
  if (v13 >= 0) {
    uint64_t v14 = v10;
  }
  else {
    uint64_t v14 = v11;
  }
  uint64_t v15 = *(void *)(v10 + 8);
  if (v13 >= 0) {
    uint64_t v16 = v13 & 0x7F;
  }
  else {
    uint64_t v16 = v15;
  }
  BOOL v17 = sub_1CC153868(v8, v14, v16, v7);
  unint64_t v39 = v41;
  uint64_t v40 = 0x200000000;
  int v18 = *((_DWORD *)a2 + 5);
  if (v18 < 0 && (unint64_t v23 = *((void *)a2 - 4 * (v18 & 0x7FFFFFF) - 1), (v23 & 0xFFFFFFFF0) != 0))
  {
    uint64_t v24 = (v23 >> 4);
    uint64_t v25 = a2;
    do
    {
      uint64_t v26 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
      uint64_t v27 = (char *)a2 - 32 * v26;
      unsigned int v28 = (unsigned int *)((char *)v25 - *((void *)v27 - 1) + -32 * v26);
      uint64_t v29 = *v28;
      uint64_t v30 = v28[1];
      uint64_t v31 = *((void *)v28 - 1);
      *(void *)&long long v37 = &v27[32 * v29];
      *((void *)&v37 + 1) = v30 - v29;
      uint64_t v38 = v31;
      sub_1CD5C74F0((uint64_t)&v39, (uint64_t)&v37);
      uint64_t v25 = (llvm::CallInst *)((char *)v25 + 16);
      --v24;
    }
    while (v24);
    size_t v20 = v39;
    uint64_t v19 = v40;
  }
  else
  {
    uint64_t v19 = 0;
    size_t v20 = v41;
  }
  long long v37 = *(_OWORD *)((char *)a3 + 104);
  *((void *)a3 + 13) = v20;
  *((void *)a3 + 14) = v19;
  if (!llvm::TargetLibraryInfoImpl::getLibFunc(**this, (uint64_t ***)v6, &v36)) {
    goto LABEL_13;
  }
  uint64_t result = 0;
  if (v36 > 298)
  {
    if (v36 == 299 || v36 == 413) {
      goto LABEL_14;
    }
  }
  else if (v36 == 140 || v36 == 294)
  {
    goto LABEL_14;
  }
  if (!v17)
  {
LABEL_13:
    uint64_t result = 0;
    goto LABEL_14;
  }
  uint64_t result = 0;
  switch(v36)
  {
    case 102:
      uint64_t result = llvm::FortifiedLibCallSimplifier::optimizeMemCCpyChk(this, a2, a3);
      break;
    case 103:
      uint64_t result = llvm::FortifiedLibCallSimplifier::optimizeMemCpyChk((llvm::FortifiedLibCallSimplifier *)this, a2, a3);
      break;
    case 104:
      uint64_t result = llvm::FortifiedLibCallSimplifier::optimizeMemMoveChk((llvm::FortifiedLibCallSimplifier *)this, a2, a3);
      break;
    case 105:
      uint64_t result = (uint64_t)llvm::FortifiedLibCallSimplifier::optimizeMemPCpyChk(this, a2, a3);
      break;
    case 106:
      uint64_t result = llvm::FortifiedLibCallSimplifier::optimizeMemSetChk((llvm::FortifiedLibCallSimplifier *)this, a2, a3);
      break;
    case 121:
      uint64_t result = llvm::FortifiedLibCallSimplifier::optimizeSNPrintfChk(this, a2, a3);
      break;
    case 122:
      uint64_t result = llvm::FortifiedLibCallSimplifier::optimizeSPrintfChk(this, a2, a3);
      break;
    case 126:
    case 129:
      uint64_t result = (uint64_t)llvm::FortifiedLibCallSimplifier::optimizeStrpCpyChk(this, (unint64_t)a2, (uint64_t)a3, v36);
      break;
    case 127:
    case 135:
      uint64_t result = llvm::FortifiedLibCallSimplifier::optimizeStrpNCpyChk(this, (unint64_t)a2, a3, v36);
      break;
    case 128:
      uint64_t result = llvm::FortifiedLibCallSimplifier::optimizeStrCatChk(this, a2, a3);
      break;
    case 131:
      uint64_t result = llvm::FortifiedLibCallSimplifier::optimizeStrLCat(this, a2, a3);
      break;
    case 132:
      uint64_t result = llvm::FortifiedLibCallSimplifier::optimizeStrLCpyChk(this, a2, a3);
      break;
    case 133:
      uint64_t result = llvm::FortifiedLibCallSimplifier::optimizeStrLenChk(this, (llvm **)a2, a3);
      break;
    case 134:
      uint64_t result = llvm::FortifiedLibCallSimplifier::optimizeStrNCatChk(this, a2, a3);
      break;
    case 138:
      uint64_t result = llvm::FortifiedLibCallSimplifier::optimizeVSNPrintfChk(this, a2, a3);
      break;
    case 139:
      uint64_t result = llvm::FortifiedLibCallSimplifier::optimizeVSPrintfChk(this, a2, a3);
      break;
    default:
      break;
  }
LABEL_14:
  *(_OWORD *)((char *)a3 + 104) = v37;
  unsigned int v22 = v39;
  if (v40)
  {
    uint64_t v32 = result;
    uint64_t v33 = 48 * v40;
    uint64_t v34 = (char *)v39 - 48;
    do
    {
      sub_1CD4AF9B4((uint64_t)&v34[v33]);
      v33 -= 48;
    }
    while (v33);
    unsigned int v22 = v39;
    uint64_t result = v32;
  }
  if (v22 != v41)
  {
    uint64_t v35 = result;
    free(v22);
    return v35;
  }
  return result;
}

uint64_t llvm::LibCallSimplifier::LibCallSimplifier(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)uint64_t result = a3;
  *(unsigned char *)(result + 8) = 0;
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = a3;
  *(void *)(result + 32) = a4;
  *(void *)(result + 40) = a5;
  *(void *)(result + 48) = a6;
  *(unsigned char *)(result + 56) = 0;
  *(void *)(result + 64) = a7;
  *(void *)(result + 72) = a8;
  *(void *)(result + 80) = a9;
  *(void *)(result + 88) = a10;
  return result;
}

{
  *(void *)uint64_t result = a3;
  *(unsigned char *)(result + 8) = 0;
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = a3;
  *(void *)(result + 32) = a4;
  *(void *)(result + 40) = a5;
  *(void *)(result + 48) = a6;
  *(unsigned char *)(result + 56) = 0;
  *(void *)(result + 64) = a7;
  *(void *)(result + 72) = a8;
  *(void *)(result + 80) = a9;
  *(void *)(result + 88) = a10;
  return result;
}

uint64_t llvm::FortifiedLibCallSimplifier::FortifiedLibCallSimplifier(uint64_t result, uint64_t a2, char a3)
{
  *(void *)uint64_t result = a2;
  *(unsigned char *)(result + 8) = a3;
  return result;
}

{
  *(void *)uint64_t result = a2;
  *(unsigned char *)(result + 8) = a3;
  return result;
}

uint64_t llvm::LibCallSimplifier::eraseFromParent(llvm::LibCallSimplifier *this, llvm::Instruction *a2)
{
  return (*((uint64_t (**)(void, llvm::Instruction *))this + 10))(*((void *)this + 11), a2);
}

unint64_t llvm::FortifiedLibCallSimplifier::isFortifiedCallFoldable(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v34 = a5;
  int v10 = *(_DWORD *)(a2 + 20);
  if ((a6 & 0xFF00000000) != 0)
  {
    uint64_t v11 = *(void *)(a2 - 32 * (v10 & 0x7FFFFFF) + 32 * a6);
    if (v11) {
      BOOL v12 = *(unsigned char *)(v11 + 16) == 16;
    }
    else {
      BOOL v12 = 0;
    }
    if (!v12) {
      return 0;
    }
    uint64_t v13 = *(unsigned int *)(v11 + 32);
    if (v13 > 0x40)
    {
      int v14 = 0;
      int64_t v15 = (unint64_t)(v13 + 63) >> 6;
      do
      {
        if (v15-- < 1) {
          break;
        }
        unint64_t v17 = *(void *)(*(void *)(v11 + 24) + 8 * v15);
        v14 += __clz(v17);
      }
      while (!v17);
      unint64_t result = 0;
      int v19 = v13 | 0xFFFFFFC0;
      if ((v13 & 0x3F) == 0) {
        int v19 = 0;
      }
      if (v14 + v19 != v13) {
        return result;
      }
    }
    else if (*(void *)(v11 + 24))
    {
      return 0;
    }
  }
  if ((a4 & 0xFF00000000) != 0)
  {
    uint64_t v20 = v10 & 0x7FFFFFF;
    unint64_t v21 = a2 - 32 * v20;
    uint64_t v22 = *(void *)(v21 + 32 * a3);
    if (v22 == *(void *)(v21 + 32 * a4)) {
      return 1;
    }
    uint64_t v23 = -v20;
  }
  else
  {
    uint64_t v24 = v10 & 0x7FFFFFF;
    uint64_t v23 = -v24;
    uint64_t v22 = *(void *)(a2 - 32 * v24 + 32 * a3);
  }
  if (v22) {
    BOOL v25 = *(unsigned char *)(v22 + 16) == 16;
  }
  else {
    BOOL v25 = 0;
  }
  if (!v25) {
    return 0;
  }
  unsigned int v26 = *(_DWORD *)(v22 + 32);
  if (!v26) {
    return 1;
  }
  uint64_t v27 = (void *)(v22 + 24);
  if (v26 > 0x40)
  {
    if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)(v22 + 24)) == v26) {
      return 1;
    }
  }
  else if (*v27 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v26)
  {
    return 1;
  }
  if (*(unsigned char *)(a1 + 8)) {
    return 0;
  }
  unint64_t v28 = a2 + 32 * v23;
  if ((a5 & 0xFF00000000) == 0)
  {
    if ((a4 & 0xFF00000000) == 0) {
      return 0;
    }
    uint64_t v29 = *(void *)(v28 + 32 * a4);
    if (!v29 || *(unsigned char *)(v29 + 16) != 16) {
      return 0;
    }
    if (v26 >= 0x41) {
      uint64_t v27 = (void *)*v27;
    }
    uint64_t v31 = (void *)*v27;
    uint64_t v32 = (void *)(v29 + 24);
    if (*(_DWORD *)(v29 + 32) >= 0x41u) {
      uint64_t v32 = (void *)*v32;
    }
    uint64_t v33 = (void *)*v32;
    return v31 >= v33;
  }
  unint64_t result = llvm::GetStringLength(*(llvm **)(v28 + 32 * a5), (const llvm::Value *)8);
  if (result)
  {
    uint64_t v33 = (void *)result;
    sub_1CD23F7A8(a2, (int *)&v34, 1, result);
    if (*(_DWORD *)(v22 + 32) >= 0x41u) {
      uint64_t v27 = (void *)*v27;
    }
    uint64_t v31 = (void *)*v27;
    return v31 >= v33;
  }
  return result;
}

llvm::Instruction *sub_1CD24A3C0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  v66[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(uint64_t ****)(a1 - 32);
  if (!v4 || *((unsigned char *)v4 + 16) || v4[3] != *(uint64_t ***)(a1 + 72) || *(unsigned char *)(*(void *)a1 + 8) != 3) {
    return 0;
  }
  if (!a4 || (uint64_t v8 = *(void *)(a1 + 8)) == 0)
  {
LABEL_11:
    uint64_t v11 = sub_1CD24A7D0(*(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)));
    v66[0] = (uint64_t)v11;
    if (a3) {
      BOOL v12 = (uint64_t *)sub_1CD24A7D0(*(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32));
    }
    else {
      BOOL v12 = 0;
    }
    unint64_t result = 0;
    v66[1] = (uint64_t)v12;
    if (v12) {
      char v13 = 0;
    }
    else {
      char v13 = a3;
    }
    if (!v11 || (v13 & 1) != 0) {
      return result;
    }
    if ((*((unsigned char *)v4 + 23) & 0x10) == 0)
    {
      uint64_t v24 = 0;
      uint64_t v23 = (unsigned __int8 *)&byte_1CFBCE98E;
LABEL_28:
      if ((*((unsigned char *)v4 + 33) & 0x20) != 0)
      {
        int v35 = *(_DWORD *)(a2 + 96);
        uint64_t v36 = *(void *)(a2 + 88);
        char v37 = *(unsigned char *)(a2 + 100);
        char v38 = *(unsigned char *)(a2 + 101);
        char v39 = *(unsigned char *)(a2 + 102);
        int v40 = *(unsigned __int8 *)(a1 + 17) >> 1;
        if (v40 == 127) {
          int v40 = -1;
        }
        *(_DWORD *)(a2 + 96) = v40;
        uint64_t v41 = *(uint64_t ***)(*(void *)(*(void *)(a1 + 40) + 56) + 40);
        int v42 = *((_DWORD *)v4 + 9);
        v64[0] = **(void **)(a2 + 64) + 1672;
        uint64_t Declaration = llvm::Intrinsic::getDeclaration(v41, v42, (uint64_t)v64, 1);
        int v44 = (uint64_t **)Declaration;
        if (a3)
        {
          if (Declaration) {
            uint64_t v45 = *(uint64_t ***)(Declaration + 24);
          }
          else {
            uint64_t v45 = 0;
          }
          __int16 v65 = 257;
          unint64_t v46 = v64;
          uint64_t v47 = (uint64_t *)a2;
          uint64_t v48 = 2;
        }
        else
        {
          if (Declaration) {
            uint64_t v45 = *(uint64_t ***)(Declaration + 24);
          }
          else {
            uint64_t v45 = 0;
          }
          __int16 v63 = 257;
          unint64_t v46 = (uint64_t *)&v62;
          uint64_t v47 = (uint64_t *)a2;
          uint64_t v48 = 1;
        }
        uint64_t v49 = sub_1CB845BAC(v47, v45, v44, v66, v48, (uint64_t)v46, 0);
        goto LABEL_48;
      }
      unsigned int v26 = *(uint64_t ****)(*(void *)(a1 + 40) + 56);
      if ((*((unsigned char *)v26 + 23) & 0x10) == 0)
      {
LABEL_63:
        int v61 = *(_DWORD *)(a2 + 96);
        uint64_t v60 = *(void *)(a2 + 88);
        char v59 = *(unsigned char *)(a2 + 100);
        char v38 = *(unsigned char *)(a2 + 101);
        char v39 = *(unsigned char *)(a2 + 102);
        int v57 = *(unsigned __int8 *)(a1 + 17) >> 1;
        if (v57 == 127) {
          int v57 = -1;
        }
        *(_DWORD *)(a2 + 96) = v57;
        v64[0] = (uint64_t)v4[14];
        if (a3) {
          uint64_t v58 = llvm::emitBinaryFloatFnCall(v11, v12, v23, v24, a2, v64);
        }
        else {
          uint64_t v58 = llvm::emitUnaryFloatFnCall(v11, v23, v24, a2, v64);
        }
        uint64_t v49 = v58;
        int v35 = v61;
        uint64_t v36 = v60;
        char v37 = v59;
LABEL_48:
        uint64_t v50 = (uint64_t *)(**(void **)(a2 + 64) + 1696);
        __int16 v65 = 257;
        unint64_t result = sub_1CB843944(a2, v49, v50, (uint64_t)v64);
        *(_DWORD *)(a2 + 96) = v35;
        *(void *)(a2 + 88) = v36;
        *(unsigned char *)(a2 + 100) = v37;
        *(unsigned char *)(a2 + 101) = v38;
        *(unsigned char *)(a2 + 102) = v39;
        return result;
      }
      uint64_t v27 = ***v26;
      uint64_t v28 = *(void *)(v27 + 152);
      uint64_t v29 = *(unsigned int *)(v27 + 168);
      if (v29)
      {
        LODWORD(v30) = (v29 - 1) & ((v26 >> 4) ^ (v26 >> 9));
        uint64_t v31 = (uint64_t ****)(v28 + 16 * v30);
        uint64_t v32 = *v31;
        if (*v31 == v26)
        {
LABEL_50:
          uint64_t v51 = v31[1];
          uint64_t v54 = (const char *)*v51;
          uint64_t v52 = (char *)(v51 + 2);
          int v53 = v54;
          if (v54)
          {
            BOOL v55 = v52[(void)v53 - 1] == 102 && v53 == v24 + 1;
            BOOL v56 = v55 && v53 >= v24;
            if (v56 && (!v24 || !memcmp(v52, v23, (size_t)v24))) {
              return 0;
            }
          }
          goto LABEL_63;
        }
        int v33 = 1;
        while (v32 != (uint64_t ***)-4096)
        {
          int v34 = v30 + v33++;
          uint64_t v30 = v34 & (v29 - 1);
          uint64_t v32 = *(uint64_t ****)(v28 + 16 * v30);
          if (v32 == v26)
          {
            uint64_t v31 = (uint64_t ****)(v28 + 16 * v30);
            goto LABEL_50;
          }
        }
      }
      uint64_t v31 = (uint64_t ****)(v28 + 16 * v29);
      goto LABEL_50;
    }
    uint64_t v14 = ***v4;
    uint64_t v15 = *(void *)(v14 + 152);
    uint64_t v16 = *(unsigned int *)(v14 + 168);
    if (v16)
    {
      LODWORD(v17) = (v16 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      int v18 = (uint64_t ****)(v15 + 16 * v17);
      int v19 = *v18;
      if (*v18 == v4)
      {
LABEL_27:
        uint64_t v22 = v18[1];
        BOOL v25 = (const char *)*v22;
        uint64_t v23 = (unsigned __int8 *)(v22 + 2);
        uint64_t v24 = v25;
        goto LABEL_28;
      }
      int v20 = 1;
      while (v19 != (uint64_t ***)-4096)
      {
        int v21 = v17 + v20++;
        uint64_t v17 = v21 & (v16 - 1);
        int v19 = *(uint64_t ****)(v15 + 16 * v17);
        if (v19 == v4)
        {
          int v18 = (uint64_t ****)(v15 + 16 * v17);
          goto LABEL_27;
        }
      }
    }
    int v18 = (uint64_t ****)(v15 + 16 * v16);
    goto LABEL_27;
  }
  while (1)
  {
    unint64_t result = 0;
    int v10 = *(unsigned char **)(v8 + 24);
    if (!v10 || v10[16] != 73) {
      return result;
    }
    if (*(unsigned char *)(*(void *)v10 + 8) != 2) {
      return 0;
    }
    uint64_t v8 = *(void *)(v8 + 8);
    if (!v8) {
      goto LABEL_11;
    }
  }
}

const llvm::detail::DoubleAPFloat *sub_1CD24A7D0(uint64_t a1)
{
  v11[2] = *MEMORY[0x1E4F143B8];
  int v3 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v3 == 74)
  {
    int v1 = *(const llvm::detail::DoubleAPFloat **)(a1 - 32);
    if (*(unsigned char *)(*(void *)v1 + 8) == 2) {
      return v1;
    }
    return 0;
  }
  if (!a1 || v3 != 17) {
    return 0;
  }
  uint64_t v4 = (const llvm::detail::DoubleAPFloat *)(a1 + 32);
  if (*(_UNKNOWN **)(a1 + 32) == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(&v10, v4);
  }
  else {
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v10, v4);
  }
  unsigned __int8 v8 = 0;
  llvm::APFloat::convert((uint64_t)v9, &unk_1CFB2E308, 1, &v8);
  int v6 = v8;
  if (!v8) {
    int v1 = llvm::ConstantFP::get(**(llvm::ConstantFP ***)a1, (llvm::LLVMContext *)v9, v5);
  }
  if ((_UNKNOWN *)v10 == &unk_1CFB2E344)
  {
    sub_1CB845718(v11);
  }
  else if ((*(_DWORD *)(v10 + 8) - 64) <= 0xFFFFFF7F && v11[0])
  {
    MEMORY[0x1D25D9CB0](v11[0], 0x1000C8000313F17);
  }
  if (v6) {
    return 0;
  }
  return v1;
}

uint64_t sub_1CD24A920(double *a1, llvm::Constant *this)
{
  unsigned int v3 = *((unsigned __int8 *)this + 16);
  if (!this || v3 != 17)
  {
    if (v3 > 0x14 || (*(_DWORD *)(*(void *)this + 8) & 0xFE) != 18) {
      return 0;
    }
    SplatValue = (llvm::Constant *)llvm::Constant::getSplatValue(this, 0);
    if (!SplatValue) {
      return 0;
    }
    this = SplatValue;
    if (*((unsigned char *)SplatValue + 16) != 17) {
      return 0;
    }
  }
  double v7 = *a1;

  return sub_1CB844168((uint64_t)this, v7);
}

uint64_t sub_1CD24A9B0()
{
  int v4 = 1;
  char v2 = 0;
  unsigned int v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Enable unsafe double to float shrinking for math lib calls";
  v1.n128_u64[1] = 58;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCFE748, "enable-double-float-shrink", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCFE748, &dword_1CB82C000);
}

uint64_t llvm::shouldOptimizeForSize(llvm::BasicBlock *a1, llvm::ProfileSummaryInfo *a2, llvm::BlockFrequencyInfoImplBase **a3)
{
  uint64_t result = 0;
  if (a2 && a3)
  {
    double v7 = a1;
    int v5 = (_DWORD *)*((void *)a2 + 1);
    if (!v5) {
      return 0;
    }
    if (byte_1EBD0D258) {
      return 1;
    }
    if (byte_1EBD0CDD8)
    {
      if (sub_1CD24AB34((uint64_t)a2))
      {
        return llvm::ProfileSummaryInfo::isColdBlock(a2, v7, a3);
      }
      else if (*v5 == 2)
      {
        int v6 = dword_1EBD0D3D8;
        return llvm::ProfileSummaryInfo::isColdBlockNthPercentile(a2, v6, v7, a3);
      }
      else
      {
        return !llvm::ProfileSummaryInfo::isHotBlockNthPercentile(a2, dword_1EBD0D318, v7, a3);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL sub_1CD24AB34(uint64_t a1)
{
  if (byte_1EBD0CF58) {
    return 1;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    if (*(_DWORD *)v2) {
      BOOL v3 = 1;
    }
    else {
      BOOL v3 = byte_1EBD0D018 == 0;
    }
    if (!v3) {
      return 1;
    }
    if (*(_DWORD *)v2 == 2)
    {
      if (byte_1EBD04938)
      {
        BOOL v4 = 1;
      }
      else
      {
        int v5 = *(unsigned __int8 *)(v2 + 72);
        BOOL v4 = *(unsigned char *)(v2 + 72) != 0;
        if (v5) {
          BOOL v6 = 1;
        }
        else {
          BOOL v6 = byte_1EBD0D0D8 == 0;
        }
        if (!v6) {
          return 1;
        }
      }
      if (v4 && byte_1EBD0D198) {
        return 1;
      }
    }
  }
  if (byte_1EBD0CE98)
  {
    if (*(unsigned char *)(a1 + 51)) {
      return *(unsigned char *)(a1 + 50) == 0;
    }
    return 1;
  }
  return 0;
}

uint64_t sub_1CD24ABE0()
{
  int v5 = 1;
  LOBYTE(v3) = 1;
  BOOL v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"Enable the profile guided size optimizations. ";
  v1.n128_u64[1] = 46;
  sub_1CD898358(&v5, (char **)&v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::EnablePGSO, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v3) = 1;
  BOOL v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"Apply the profile guided size optimizations only if the working set size is large ("
                                     "except for cold code.)";
  v1.n128_u64[1] = 105;
  sub_1CC025F34((llvm::cl::Option *)&llvm::PGSOLargeWorkingSetSizeOnly, "pgso-lwss-only", &v5, (unsigned char **)&v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::PGSOLargeWorkingSetSizeOnly, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v3) = 0;
  BOOL v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"Apply the profile guided size optimizations only to cold code.";
  v1.n128_u64[1] = 62;
  sub_1CC025F34((llvm::cl::Option *)&llvm::PGSOColdCodeOnly, "pgso-cold-code-only", &v5, (unsigned char **)&v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::PGSOColdCodeOnly, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v3) = 0;
  BOOL v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"Apply the profile guided size optimizations only to cold code under instrumentation PGO.";
  v1.n128_u64[1] = 88;
  sub_1CC025F34((llvm::cl::Option *)&llvm::PGSOColdCodeOnlyForInstrPGO, "pgso-cold-code-only-for-instr-pgo", &v5, (unsigned char **)&v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::PGSOColdCodeOnlyForInstrPGO, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v3) = 0;
  BOOL v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"Apply the profile guided size optimizations only to cold code under sample PGO.";
  v1.n128_u64[1] = 79;
  sub_1CD8984D0(&v5, (char **)&v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::PGSOColdCodeOnlyForSamplePGO, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v3) = 0;
  BOOL v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"Apply the profile guided size optimizations only to cold code under partial-profile sample PGO.";
  v1.n128_u64[1] = 95;
  sub_1CC025F34((llvm::cl::Option *)&llvm::PGSOColdCodeOnlyForPartialSamplePGO, "pgso-cold-code-only-for-partial-sample-pgo", &v5, (unsigned char **)&v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::PGSOColdCodeOnlyForPartialSamplePGO, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v3) = 0;
  BOOL v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"Force the (profiled-guided) size optimizations. ";
  v1.n128_u64[1] = 48;
  sub_1CC025F34((llvm::cl::Option *)&llvm::ForcePGSO, "force-pgso", &v5, (unsigned char **)&v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::ForcePGSO, &dword_1CB82C000);
  int v5 = 1;
  int v2 = 1;
  int v3 = 950000;
  BOOL v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"The profile guided size optimization profile summary cutoff for instrumentation profile.";
  v1.n128_u64[1] = 88;
  sub_1CD495014((llvm::cl::Option *)&llvm::PgsoCutoffInstrProf, "pgso-cutoff-instr-prof", &v5, &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &llvm::PgsoCutoffInstrProf, &dword_1CB82C000);
  int v5 = 1;
  int v2 = 1;
  int v3 = 990000;
  BOOL v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"The profile guided size optimization profile summary cutoff for sample profile.";
  v1.n128_u64[1] = 79;
  sub_1CD495014((llvm::cl::Option *)&llvm::PgsoCutoffSampleProf, "pgso-cutoff-sample-prof", &v5, &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &llvm::PgsoCutoffSampleProf, &dword_1CB82C000);
}

uint64_t llvm::SplitModule(void *a1, int a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v136 = *MEMORY[0x1E4F143B8];
  int v121 = a2;
  if ((a5 & 1) == 0)
  {
    uint64_t v23 = a1 + 3;
    for (uint64_t i = (void *)a1[4]; i != v23; uint64_t i = (void *)i[1])
    {
      if (i) {
        BOOL v25 = (llvm::GlobalValue *)(i - 7);
      }
      else {
        BOOL v25 = 0;
      }
      sub_1CD24BB4C(v25);
    }
    for (uint64_t j = (void *)a1[2]; j != a1 + 1; uint64_t j = (void *)j[1])
    {
      if (j) {
        uint64_t v27 = (llvm::GlobalValue *)(j - 7);
      }
      else {
        uint64_t v27 = 0;
      }
      sub_1CD24BB4C(v27);
    }
    for (k = (void *)a1[6]; k != a1 + 5; k = (void *)k[1])
    {
      if (k) {
        uint64_t v29 = (llvm::GlobalValue *)(k - 6);
      }
      else {
        uint64_t v29 = 0;
      }
      sub_1CD24BB4C(v29);
    }
    for (uint64_t m = (void *)a1[8]; m != a1 + 7; uint64_t m = (void *)m[1])
    {
      if (m) {
        uint64_t v31 = (llvm::GlobalValue *)(m - 7);
      }
      else {
        uint64_t v31 = 0;
      }
      sub_1CD24BB4C(v31);
    }
  }
  v119[0] = 0;
  v119[1] = 0;
  int v120 = 0;
  v130[0] = 0;
  v130[1] = 0;
  int v129 = (llvm::Module *)v130;
  v127[0] = 0;
  v127[1] = 0;
  int v128 = 0;
  BOOL v6 = (void *)a1[4];
  uint64_t v131 = &v129;
  uint64_t v132 = (uint64_t)v127;
  while (v6 != a1 + 3)
  {
    if (v6) {
      double v7 = (llvm::Value *)(v6 - 7);
    }
    else {
      double v7 = 0;
    }
    sub_1CD24BCE8((uint64_t)&v131, v7);
    BOOL v6 = (void *)v6[1];
  }
  unsigned __int8 v8 = (void *)a1[2];
  uint64_t v131 = &v129;
  uint64_t v132 = (uint64_t)v127;
  while (v8 != a1 + 1)
  {
    if (v8) {
      uint64_t v9 = (llvm::Value *)(v8 - 7);
    }
    else {
      uint64_t v9 = 0;
    }
    sub_1CD24BCE8((uint64_t)&v131, v9);
    unsigned __int8 v8 = (void *)v8[1];
  }
  uint64_t v10 = (void *)a1[6];
  uint64_t v131 = &v129;
  uint64_t v132 = (uint64_t)v127;
  while (v10 != a1 + 5)
  {
    if (v10) {
      uint64_t v11 = (llvm::Value *)(v10 - 6);
    }
    else {
      uint64_t v11 = 0;
    }
    sub_1CD24BCE8((uint64_t)&v131, v11);
    uint64_t v10 = (void *)v10[1];
  }
  if (a2)
  {
    uint64_t v12 = 0;
    char v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    do
    {
      if (v14 >= v13)
      {
        uint64_t v17 = (v14 - v15) >> 3;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 61) {
LABEL_231:
        }
          abort();
        if ((v13 - v15) >> 2 > v18) {
          unint64_t v18 = (v13 - v15) >> 2;
        }
        if ((unint64_t)(v13 - v15) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v18;
        }
        if (v19)
        {
          if (v19 >> 61) {
LABEL_232:
          }
            sub_1CB833614();
          int v20 = (char *)operator new(8 * v19);
        }
        else
        {
          int v20 = 0;
        }
        int v21 = &v20[8 * v17];
        *(void *)int v21 = v12;
        uint64_t v16 = (uint64_t)(v21 + 8);
        if (v14 != v15)
        {
          do
          {
            uint64_t v22 = *((void *)v14 - 1);
            v14 -= 8;
            *((void *)v21 - 1) = v22;
            v21 -= 8;
          }
          while (v14 != v15);
          uint64_t v14 = v15;
        }
        uint64_t v15 = v21;
        char v13 = &v20[8 * v19];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *(void *)uint64_t v14 = v12;
        uint64_t v16 = (uint64_t)(v14 + 8);
      }
      sub_1CD24C350((uint64_t)v15, v16, (v16 - (uint64_t)v15) >> 3);
      ++v12;
      uint64_t v14 = (char *)v16;
    }
    while (v12 != a2);
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    char v13 = 0;
  }
  uint64_t v131 = &v133;
  uint64_t v132 = 0x4000000000;
  uint64_t v122 = (llvm::Module *)v126;
  unint64_t v123 = (unint64_t)v126;
  uint64_t v124 = 32;
  LODWORD(v125) = 0;
  uint64_t v32 = v129;
  if (v129 == (llvm::Module *)v130)
  {
    int v40 = &v133;
    char v39 = (char *)&v133;
  }
  else
  {
    unsigned int v33 = 0;
    do
    {
      if (*((unsigned char *)v32 + 40))
      {
        unsigned int v34 = 0;
        unint64_t v35 = (unint64_t)v32 + 32;
        do
        {
          ++v34;
          unint64_t v35 = *(void *)(v35 + 8) & 0xFFFFFFFFFFFFFFFELL;
        }
        while (v35);
        if (v33 >= HIDWORD(v132)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v36 = (char *)v131 + 16 * v33;
        void *v36 = v34;
        v36[1] = v32;
        unsigned int v33 = v132 + 1;
        LODWORD(v132) = v132 + 1;
      }
      char v37 = (llvm::Module *)*((void *)v32 + 1);
      if (v37)
      {
        do
        {
          char v38 = (llvm::Module **)v37;
          char v37 = *(llvm::Module **)v37;
        }
        while (v37);
      }
      else
      {
        do
        {
          char v38 = (llvm::Module **)*((void *)v32 + 2);
          BOOL v70 = *v38 == v32;
          uint64_t v32 = (llvm::Module *)v38;
        }
        while (!v70);
      }
      uint64_t v32 = (llvm::Module *)v38;
    }
    while (v38 != (llvm::Module **)v130);
    char v39 = (char *)v131;
    int v40 = (unsigned int *)((char *)v131 + 16 * v33);
    if (v33)
    {
      uint64_t v41 = 126 - 2 * __clz(v33);
      goto LABEL_85;
    }
  }
  uint64_t v41 = 0;
LABEL_85:
  sub_1CD24C400(v39, (unint64_t)v40, v41, 1);
  if (v132)
  {
    int v42 = (char *)v131;
    uint64_t v117 = (char *)v131 + 16 * v132;
    while (1)
    {
      uint64_t v44 = *(unsigned int *)v15;
      uint64_t v43 = *((unsigned int *)v15 + 1);
      if (v16 - (uint64_t)v15 >= 9)
      {
        uint64_t v45 = 0;
        uint64_t v46 = (v16 - (uint64_t)v15) >> 3;
        uint64_t v47 = *(void *)v15;
        uint64_t v48 = v15;
        do
        {
          uint64_t v49 = &v48[8 * v45 + 8];
          uint64_t v50 = (2 * v45) | 1;
          uint64_t v51 = 2 * v45 + 2;
          if (v51 < v46)
          {
            unsigned int v52 = *((_DWORD *)v49 + 1);
            unsigned int v53 = *((_DWORD *)v49 + 3);
            if (!(v52 | v53))
            {
              unsigned int v52 = *(_DWORD *)v49;
              unsigned int v53 = *((_DWORD *)v49 + 2);
            }
            if (v52 > v53)
            {
              v49 += 8;
              uint64_t v50 = v51;
            }
          }
          *(_DWORD *)uint64_t v48 = *(_DWORD *)v49;
          *((_DWORD *)v48 + 1) = *((_DWORD *)v49 + 1);
          uint64_t v48 = v49;
          uint64_t v45 = v50;
        }
        while (v50 <= (uint64_t)((unint64_t)(v46 - 2) >> 1));
        if (v49 == (char *)(v16 - 8))
        {
          *(void *)uint64_t v49 = v47;
        }
        else
        {
          *(_DWORD *)uint64_t v49 = *(_DWORD *)(v16 - 8);
          *((_DWORD *)v49 + 1) = *(_DWORD *)(v16 - 4);
          *(void *)(v16 - 8) = v47;
          sub_1CD24C350((uint64_t)v15, (uint64_t)(v49 + 8), (v49 + 8 - v15) >> 3);
        }
      }
      uint64_t v54 = (void **)*((void *)v42 + 1);
      if (v130 != v54)
      {
        uint64_t v55 = sub_1CC957040((uint64_t)(v54 + 4));
        if (v55) {
          break;
        }
      }
LABEL_179:
      long long v89 = (char *)(v16 - 8);
      uint64_t v90 = v44 | (v43 << 32);
      if (v89 >= v13)
      {
        uint64_t v93 = (v89 - v15) >> 3;
        unint64_t v94 = v93 + 1;
        if ((unint64_t)(v93 + 1) >> 61) {
          goto LABEL_231;
        }
        if ((v13 - v15) >> 2 > v94) {
          unint64_t v94 = (v13 - v15) >> 2;
        }
        if ((unint64_t)(v13 - v15) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v95 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v95 = v94;
        }
        if (v95)
        {
          if (v95 >> 61) {
            goto LABEL_232;
          }
          int v96 = (char *)operator new(8 * v95);
        }
        else
        {
          int v96 = 0;
        }
        long long v92 = &v96[8 * v93];
        *(void *)long long v92 = v90;
        uint64_t v91 = (uint64_t)v92;
        if (v89 != v15)
        {
          uint64_t v91 = (uint64_t)v92;
          do
          {
            uint64_t v97 = *((void *)v89 - 1);
            v89 -= 8;
            *(void *)(v91 - 8) = v97;
            v91 -= 8;
          }
          while (v89 != v15);
        }
        char v13 = &v96[8 * v95];
        operator delete(v15);
        uint64_t v15 = (char *)v91;
      }
      else
      {
        *(void *)long long v89 = v90;
        uint64_t v91 = (uint64_t)v15;
        long long v92 = v89;
      }
      uint64_t v16 = (uint64_t)(v92 + 8);
      sub_1CD24C350(v91, (uint64_t)(v92 + 8), (uint64_t)&v92[-v91 + 8] >> 3);
      v42 += 16;
      if (v42 == v117) {
        goto LABEL_196;
      }
    }
    unint64_t v56 = v55;
    while (1)
    {
      uint64_t v57 = *(void *)(v56 + 16);
      unint64_t v58 = v123;
      uint64_t v59 = HIDWORD(v124);
      if ((llvm::Module *)v123 != v122) {
        break;
      }
      if (HIDWORD(v124))
      {
        uint64_t v60 = 0;
        uint64_t v61 = 8 * HIDWORD(v124);
        char v62 = (void *)v123;
        while (*v62 != v57)
        {
          if (*v62 == -2) {
            uint64_t v60 = v62;
          }
          ++v62;
          v61 -= 8;
          if (!v61)
          {
            if (!v60) {
              goto LABEL_109;
            }
            *uint64_t v60 = v57;
            LODWORD(v125) = v125 - 1;
            goto LABEL_133;
          }
        }
        goto LABEL_165;
      }
LABEL_109:
      unsigned int v63 = v124;
      if (HIDWORD(v124) >= v124) {
        goto LABEL_112;
      }
      ++HIDWORD(v124);
      *(void *)(v123 + 8 * v59) = v57;
LABEL_133:
      unint64_t v73 = v123;
      unsigned int v74 = v124;
      unsigned int v75 = HIDWORD(v124);
      uint64_t v76 = *(void *)(v56 + 16);
      if ((llvm::Module *)v123 != v122) {
        goto LABEL_143;
      }
      if (HIDWORD(v124))
      {
        uint64_t v77 = 0;
        uint64_t v78 = 8 * HIDWORD(v124);
        long long v79 = (void *)v123;
        while (*v79 != v76)
        {
          if (*v79 == -2) {
            uint64_t v77 = v79;
          }
          ++v79;
          v78 -= 8;
          if (!v78)
          {
            if (!v77) {
              goto LABEL_141;
            }
            void *v77 = v76;
            LODWORD(v125) = v125 - 1;
            goto LABEL_164;
          }
        }
        goto LABEL_164;
      }
LABEL_141:
      if (v124 <= HIDWORD(v124))
      {
LABEL_143:
        if (3 * (int)v124 <= (4 * (HIDWORD(v124) - v125)))
        {
          if (v124 >= 0x40) {
            unsigned int v74 = 2 * v124;
          }
          else {
            unsigned int v74 = 128;
          }
        }
        else if ((int)v124 - HIDWORD(v124) >= v124 >> 3)
        {
          goto LABEL_145;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v122, v74);
        unsigned int v74 = v124;
        unint64_t v73 = v123;
LABEL_145:
        unsigned int v80 = v74 - 1;
        unsigned int v81 = (v74 - 1) & ((v76 >> 4) ^ (v76 >> 9));
        uint64_t v82 = (void *)(v73 + 8 * v81);
        uint64_t v83 = *v82;
        if (*v82 == -1)
        {
          uint64_t v84 = 0;
LABEL_157:
          if (v84) {
            long long v88 = v84;
          }
          else {
            long long v88 = v82;
          }
          if (*v88 != v76)
          {
            if (*v88 == -2) {
              LODWORD(v125) = v125 - 1;
            }
            else {
              ++HIDWORD(v124);
            }
            *long long v88 = v76;
          }
        }
        else
        {
          uint64_t v84 = 0;
          int v85 = 1;
          while (v83 != v76)
          {
            if (v84) {
              BOOL v86 = 0;
            }
            else {
              BOOL v86 = v83 == -2;
            }
            if (v86) {
              uint64_t v84 = v82;
            }
            unsigned int v87 = v81 + v85++;
            unsigned int v81 = v87 & v80;
            uint64_t v82 = (void *)(v73 + 8 * (v87 & v80));
            uint64_t v83 = *v82;
            if (*v82 == -1) {
              goto LABEL_157;
            }
          }
        }
        goto LABEL_164;
      }
      ++HIDWORD(v124);
      *(void *)(v123 + 8 * v75) = v76;
LABEL_164:
      *((_DWORD *)sub_1CD5D0D10(v119, (uint64_t *)(v56 + 16)) + 2) = v44;
      uint64_t v43 = (v43 + 1);
LABEL_165:
      unint64_t v56 = *(void *)(v56 + 8) & 0xFFFFFFFFFFFFFFFELL;
      if (!v56) {
        goto LABEL_179;
      }
    }
    unsigned int v63 = v124;
LABEL_112:
    if (3 * v63 <= 4 * (HIDWORD(v124) - (int)v125))
    {
      if (v63 >= 0x40) {
        v63 *= 2;
      }
      else {
        unsigned int v63 = 128;
      }
    }
    else if (v63 - HIDWORD(v124) >= v63 >> 3)
    {
LABEL_114:
      unsigned int v64 = v63 - 1;
      unsigned int v65 = (v63 - 1) & ((v57 >> 4) ^ (v57 >> 9));
      uint64_t v66 = (void *)(v58 + 8 * v65);
      uint64_t v67 = *v66;
      if (*v66 != -1)
      {
        uint64_t v68 = 0;
        int v69 = 1;
        while (v67 != v57)
        {
          if (v68) {
            BOOL v70 = 0;
          }
          else {
            BOOL v70 = v67 == -2;
          }
          if (v70) {
            uint64_t v68 = v66;
          }
          unsigned int v71 = v65 + v69++;
          unsigned int v65 = v71 & v64;
          uint64_t v66 = (void *)(v58 + 8 * (v71 & v64));
          uint64_t v67 = *v66;
          if (*v66 == -1) {
            goto LABEL_126;
          }
        }
        goto LABEL_165;
      }
      uint64_t v68 = 0;
LABEL_126:
      if (v68) {
        uint64_t v72 = v68;
      }
      else {
        uint64_t v72 = v66;
      }
      if (*v72 == v57) {
        goto LABEL_165;
      }
      if (*v72 == -2) {
        LODWORD(v125) = v125 - 1;
      }
      else {
        ++HIDWORD(v124);
      }
      *uint64_t v72 = v57;
      goto LABEL_133;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v122, v63);
    unsigned int v63 = v124;
    unint64_t v58 = v123;
    goto LABEL_114;
  }
LABEL_196:
  if ((llvm::Module *)v123 != v122) {
    free((void *)v123);
  }
  if (v131 != &v133) {
    free(v131);
  }
  if (v15) {
    operator delete(v15);
  }
  MEMORY[0x1D25D9CD0](v127[0], 8);
  sub_1CBB0D544(v130[0]);
  LODWORD(v127[0]) = 0;
  if (v121)
  {
    unsigned int v133 = 128;
    unint64_t v98 = operator new(0x2000uLL, (std::align_val_t)8uLL);
    uint64_t v131 = v98;
    uint64_t v132 = 0;
    unint64_t v123 = 2;
    uint64_t v124 = 0;
    uint64_t v125 = -4096;
    v126[0] = 0;
    uint64_t v122 = (llvm::Module *)&unk_1F2615EC8;
    if (v133)
    {
      uint64_t v99 = 0;
      unint64_t v100 = (unint64_t)v133 << 6;
      int v101 = v98 + 2;
      do
      {
        unint64_t v102 = v123;
        uint64_t v103 = v125;
        *(v101 - 1) = v123 & 6;
        *int v101 = 0;
        v101[1] = v103;
        if (v103 != -4096 && v103 != -8192 && v103 != 0)
        {
          *int v101 = *(void *)(v102 & 0xFFFFFFFFFFFFFFF8);
          *(void *)(v102 & 0xFFFFFFFFFFFFFFF8) = v101 - 1;
          *(v101 - 1) = v102 & 0xFFFFFFFFFFFFFFFELL;
          if (*v101) {
            *(void *)*int v101 = *(void *)*v101 & 7 | (unint64_t)(v98 + 2);
          }
          uint64_t v99 = v126[0];
        }
        *(v101 - 2) = &unk_1F2615EC8;
        v101[2] = v99;
        v101 += 8;
        v98 += 8;
        v100 -= 64;
      }
      while (v100);
      if (v125 != -8192 && v125 != -4096 && v125)
      {
        unint64_t v105 = v123 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v123 & 0xFFFFFFFFFFFFFFF8) = v124;
        if (v124)
        {
          *(void *)uint64_t v124 = *(void *)v124 & 7 | v105;
        }
        else
        {
          uint64_t v106 = v125;
          uint64_t v107 = ***(int32x2_t ****)v125;
          unint64_t v108 = (unint64_t)v107[303];
          if (v108 <= v105)
          {
            uint64_t v109 = v107[305].u32[0];
            if (v108 + 16 * v109 > v105)
            {
              unsigned int v110 = v109 - 1;
              LODWORD(v111) = v110 & ((v125 >> 4) ^ (v125 >> 9));
              uint64_t v112 = (uint64_t *)(v108 + 16 * v111);
              uint64_t v113 = *v112;
              if (v125 != *v112)
              {
                int v114 = 1;
                do
                {
                  if (v113 == -4096) {
                    goto LABEL_228;
                  }
                  int v115 = v111 + v114++;
                  uint64_t v111 = v115 & v110;
                  uint64_t v113 = *(void *)(v108 + 16 * v111);
                }
                while (v125 != v113);
                uint64_t v112 = (uint64_t *)(v108 + 16 * v111);
              }
              *uint64_t v112 = -8192;
              v107[304] = vadd_s32(v107[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v106 = v125;
LABEL_228:
              *(unsigned char *)(v106 + 17) &= ~1u;
            }
          }
        }
      }
    }
    LOBYTE(v134) = 0;
    char v135 = 0;
    uint64_t v122 = (llvm::Module *)v119;
    unint64_t v123 = (unint64_t)v127;
    uint64_t v124 = (uint64_t)&v121;
    llvm::CloneModule();
  }
  return MEMORY[0x1D25D9CD0](v119[0], 8);
}

void sub_1CD24BB4C(llvm::GlobalValue *this)
{
  int v2 = *((_DWORD *)this + 8);
  if ((v2 & 0xFu) - 7 <= 1)
  {
    unsigned int v3 = v2 & 0xFFFFFFF0;
    *((_DWORD *)this + 8) = v2 & 0xFFFFFFF0;
    if ((v2 & 0x30) != 0)
    {
      int hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage(this);
      unsigned int v3 = *((_DWORD *)this + 8);
      if (!hasExternalWeakLinkage) {
        v3 |= 0x4000u;
      }
    }
    unsigned int v5 = v3 & 0xFFFFFFCF | 0x10;
    *((_DWORD *)this + 8) = v5;
    if ((v3 & 0xF) - 7 < 2) {
      goto LABEL_8;
    }
    if ((llvm::GlobalValue::hasExternalWeakLinkage(this) & 1) == 0)
    {
      unsigned int v5 = *((_DWORD *)this + 8);
LABEL_8:
      *((_DWORD *)this + 8) = v5 | 0x4000;
    }
  }
  if ((*((unsigned char *)this + 23) & 0x10) == 0)
  {
    int v20 = "__llvmsplit_unnamed";
    __int16 v21 = 259;
    llvm::Value::setNameImpl(this, &v20);
    if (!*((unsigned char *)this + 16))
    {
      if ((*((unsigned char *)this + 23) & 0x10) == 0) {
        goto LABEL_27;
      }
      uint64_t v6 = ***(void ***)this;
      uint64_t v7 = *(void *)(v6 + 152);
      uint64_t v8 = *(unsigned int *)(v6 + 168);
      if (v8)
      {
        LODWORD(v9) = (v8 - 1) & ((this >> 4) ^ (this >> 9));
        uint64_t v10 = v7 + 16 * v9;
        uint64_t v11 = *(llvm::GlobalValue **)v10;
        if (*(llvm::GlobalValue **)v10 == this)
        {
LABEL_20:
          uint64_t v14 = *(void **)(v10 + 8);
          unint64_t v17 = *v14;
          uint64_t v15 = v14 + 2;
          unint64_t v16 = v17;
          if (v17 >= 5 && *(_DWORD *)v15 == *(_DWORD *)"llvm." && v15[4] == aLlvm_1[4])
          {
            *((_DWORD *)this + 8) |= 0x2000u;
            int v19 = llvm::Function::lookupIntrinsicID(v15, v16);
LABEL_28:
            *((_DWORD *)this + 9) = v19;
            return;
          }
LABEL_27:
          int v19 = 0;
          *((_DWORD *)this + 8) &= ~0x2000u;
          goto LABEL_28;
        }
        int v12 = 1;
        while (v11 != (llvm::GlobalValue *)-4096)
        {
          int v13 = v9 + v12++;
          uint64_t v9 = v13 & (v8 - 1);
          uint64_t v11 = *(llvm::GlobalValue **)(v7 + 16 * v9);
          if (v11 == this)
          {
            uint64_t v10 = v7 + 16 * v9;
            goto LABEL_20;
          }
        }
      }
      uint64_t v10 = v7 + 16 * v8;
      goto LABEL_20;
    }
  }
}

void sub_1CD24BCE8(uint64_t a1, llvm::Value *this)
{
  int v4 = *((unsigned __int8 *)this + 16);
  if (*((unsigned char *)this + 16))
  {
    if (v4 == 3 && (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0) {
      return;
    }
  }
  else if (*((llvm::Value **)this + 9) == (llvm::Value *)((char *)this + 72) && (*((unsigned char *)this + 34) & 0x80) == 0)
  {
    return;
  }
  if ((*((unsigned char *)this + 23) & 0x10) == 0)
  {
    v36[0] = "__llvmsplit_unnamed";
    __int16 v38 = 259;
    llvm::Value::setNameImpl(this, v36);
    int v4 = *((unsigned __int8 *)this + 16);
    if (!*((unsigned char *)this + 16))
    {
      if ((*((unsigned char *)this + 23) & 0x10) == 0) {
        goto LABEL_58;
      }
      uint64_t v22 = ***(void ***)this;
      uint64_t v23 = *(void *)(v22 + 152);
      uint64_t v24 = *(unsigned int *)(v22 + 168);
      if (v24)
      {
        LODWORD(v25) = (v24 - 1) & ((this >> 4) ^ (this >> 9));
        uint64_t v26 = v23 + 16 * v25;
        uint64_t v27 = *(llvm::Value **)v26;
        if (*(llvm::Value **)v26 == this)
        {
LABEL_51:
          uint64_t v30 = *(void **)(v26 + 8);
          unint64_t v33 = *v30;
          uint64_t v31 = v30 + 2;
          unint64_t v32 = v33;
          if (v33 >= 5 && *(_DWORD *)v31 == *(_DWORD *)"llvm." && v31[4] == aLlvm_1[4])
          {
            *((_DWORD *)this + 8) |= 0x2000u;
            int v35 = llvm::Function::lookupIntrinsicID(v31, v32);
            int v4 = *((unsigned __int8 *)this + 16);
LABEL_59:
            *((_DWORD *)this + 9) = v35;
            goto LABEL_9;
          }
LABEL_58:
          int v4 = 0;
          int v35 = 0;
          *((_DWORD *)this + 8) &= ~0x2000u;
          goto LABEL_59;
        }
        int v28 = 1;
        while (v27 != (llvm::Value *)-4096)
        {
          int v29 = v25 + v28++;
          uint64_t v25 = v29 & (v24 - 1);
          uint64_t v27 = *(llvm::Value **)(v23 + 16 * v25);
          if (v27 == this)
          {
            uint64_t v26 = v23 + 16 * v25;
            goto LABEL_51;
          }
        }
      }
      uint64_t v26 = v23 + 16 * v24;
      goto LABEL_51;
    }
  }
LABEL_9:
  if (v4 == 2) {
    goto LABEL_21;
  }
  AliaseeObject = this;
  if (v4 == 1)
  {
    AliaseeObject = (llvm::Value *)llvm::GlobalAlias::getAliaseeObject(this);
    if (!AliaseeObject) {
      goto LABEL_21;
    }
  }
  uint64_t v6 = *((void *)AliaseeObject + 6);
  if (!v6) {
    goto LABEL_21;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  v36[0] = 0;
  char v8 = sub_1CBB0BF40(*(void *)v7, *(_DWORD *)(v7 + 16), v6, v36);
  uint64_t v9 = (char *)v36[0];
  if ((v8 & 1) == 0)
  {
    int v12 = *(_DWORD *)(v7 + 8);
    unsigned int v13 = *(_DWORD *)(v7 + 16);
    if (4 * v12 + 4 >= 3 * v13)
    {
      v13 *= 2;
    }
    else if (v13 + ~v12 - *(_DWORD *)(v7 + 12) > v13 >> 3)
    {
LABEL_17:
      ++*(_DWORD *)(v7 + 8);
      if (*(void *)v9 != -4096) {
        --*(_DWORD *)(v7 + 12);
      }
      *(void *)uint64_t v9 = v6;
      *((void *)v9 + 1) = 0;
      goto LABEL_20;
    }
    sub_1CD24C20C(v7, v13);
    v36[0] = 0;
    sub_1CBB0BF40(*(void *)v7, *(_DWORD *)(v7 + 16), v6, v36);
    uint64_t v9 = (char *)v36[0];
    goto LABEL_17;
  }
  uint64_t v10 = (uint64_t *)*((void *)v36[0] + 1);
  if (!v10)
  {
LABEL_20:
    *((void *)v9 + 1) = this;
    goto LABEL_21;
  }
  uint64_t v11 = *(uint64_t ***)a1;
  v36[0] = (const char *)this;
  sub_1CD24C044(v11, v10, (unint64_t *)v36);
LABEL_21:
  v36[0] = 0;
  v36[1] = 0;
  int v37 = 0;
  uint64_t ResolverFunction = sub_1CC5BE54C((uint64_t)this, (uint64_t)v36);
  MEMORY[0x1D25D9CD0](v36[0], 8);
  if (ResolverFunction)
  {
    if ((*(unsigned char *)(ResolverFunction + 16) != 2
       || (uint64_t ResolverFunction = llvm::GlobalIFunc::getResolverFunction((llvm::GlobalIFunc *)ResolverFunction)) != 0)
      && (llvm::Value *)ResolverFunction != this)
    {
      unint64_t v16 = *(uint64_t ***)a1;
      v36[0] = (const char *)ResolverFunction;
      sub_1CD24C044(v16, (uint64_t *)this, (unint64_t *)v36);
    }
  }
  if (*((unsigned char *)this + 16)) {
    unint64_t v17 = 0;
  }
  else {
    unint64_t v17 = (uint64_t *)this;
  }
  if (!*((unsigned char *)this + 16))
  {
    for (uint64_t i = (void *)*((void *)this + 10); i != (void *)((char *)this + 72); uint64_t i = (void *)i[1])
    {
      if (i) {
        int v19 = (llvm::BlockAddress *)(i - 3);
      }
      else {
        int v19 = 0;
      }
      int v20 = (llvm::Constant *)llvm::BlockAddress::lookup(v19, v15);
      if (v20)
      {
        __int16 v21 = v20;
        if (llvm::Constant::isConstantUsed(v20)) {
          sub_1CD24C0F4(*(uint64_t ***)a1, v17, *((void *)v21 + 1));
        }
      }
    }
  }
  if ((*((_DWORD *)this + 8) & 0xFu) - 7 <= 1) {
    sub_1CD24C0F4(*(uint64_t ***)a1, (uint64_t *)this, *((void *)this + 1));
  }
}

uint64_t sub_1CD24C044(uint64_t **a1, uint64_t *a2, unint64_t *a3)
{
  unsigned int v5 = sub_1CD4D6F30(a1, (unint64_t)a2, a2);
  uint64_t v6 = sub_1CD4D6F30(a1, *a3, (uint64_t *)*a3);
  uint64_t v7 = a1 + 1;
  if (v7 == v5) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = sub_1CC957040((uint64_t)(v5 + 4));
  }
  if (v7 == v6) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = sub_1CC957040((uint64_t)(v6 + 4));
  }
  if (v8 != result)
  {
    *(void *)(*(void *)v8 + 8) = *(void *)(*(void *)v8 + 8) & 1 | result;
    uint64_t v10 = *(void *)(result + 8);
    *(void *)uint64_t v8 = *(void *)result;
    *(void *)uint64_t result = v8;
    *(void *)(result + 8) = v10 & 0xFFFFFFFFFFFFFFFELL;
  }
  return result;
}

void sub_1CD24C0F4(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  v14[4] = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v3 = a3;
    do
    {
      uint64_t v6 = *(void *)(v3 + 24);
      uint64_t v11 = v14;
      int v13 = 4;
      v14[0] = v6;
      unsigned int v7 = 1;
      do
      {
        unint64_t v8 = *((void *)v11 + v7 - 1);
        unsigned int v12 = v7 - 1;
        unsigned int v9 = *(unsigned __int8 *)(v8 + 16);
        if (v9 - 21 >= 0xFFFFFFEF)
        {
          sub_1CC472E24((uint64_t)&v11, *(void *)(v8 + 8), 0);
        }
        else
        {
          if (v9 >= 0x1C)
          {
            unint64_t v8 = *(void *)(*(void *)(v8 + 40) + 56);
          }
          else if (v9 >= 4)
          {
            unint64_t v8 = 0;
          }
          unint64_t v10 = v8;
          sub_1CD24C044(a1, a2, &v10);
        }
        unsigned int v7 = v12;
      }
      while (v12);
      if (v11 != v14) {
        free(v11);
      }
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3);
  }
}

void *sub_1CD24C20C(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        void *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 16 * v3;
      int v13 = (uint64_t *)v4;
      do
      {
        uint64_t v14 = *v13;
        if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          unint64_t v18 = 0;
          sub_1CBB0BF40(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          uint64_t v15 = v18;
          *unint64_t v18 = *v13;
          v15[1] = v13[1];
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 2;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 16 * v16;
    do
    {
      void *result = -4096;
      result += 2;
      v17 -= 16;
    }
    while (v17);
  }
  return result;
}

uint64_t sub_1CD24C350(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3 - 2;
  if (a3 >= 2)
  {
    unint64_t v4 = v3 >> 1;
    unint64_t v5 = (unsigned int *)(result + 8 * (v3 >> 1));
    unsigned int v6 = v5[1];
    unsigned int v7 = *(_DWORD *)(a2 - 4);
    if (v6 | v7)
    {
      if (v6 <= v7) {
        return result;
      }
      unsigned int v8 = *v5;
    }
    else
    {
      unsigned int v8 = *v5;
      if (*v5 <= *(_DWORD *)(a2 - 8)) {
        return result;
      }
    }
    unsigned int v9 = *(_DWORD *)(a2 - 8);
    unsigned int v10 = *(_DWORD *)(a2 - 4);
    *(_DWORD *)(a2 - 8) = v8;
    *(_DWORD *)(a2 - 4) = v5[1];
    if (v3 >= 2)
    {
      do
      {
        unint64_t v12 = v4 - 1;
        unint64_t v4 = (v4 - 1) >> 1;
        uint64_t v11 = (unsigned int *)(result + 8 * v4);
        unsigned int v13 = v11[1];
        if (v13 | v10)
        {
          if (v13 <= v10) {
            goto LABEL_8;
          }
          unsigned int v14 = *v11;
        }
        else
        {
          unsigned int v14 = *v11;
          if (*v11 <= v9) {
            goto LABEL_8;
          }
        }
        *unint64_t v5 = v14;
        v5[1] = v13;
        unint64_t v5 = (unsigned int *)(result + 8 * v4);
      }
      while (v12 > 1);
    }
    else
    {
LABEL_8:
      uint64_t v11 = v5;
    }
    unsigned int *v11 = v9;
    v11[1] = v10;
  }
  return result;
}

char *sub_1CD24C400(char *result, unint64_t a2, uint64_t a3, char a4)
{
  unsigned int v7 = result;
LABEL_2:
  v756 = (unsigned int *)(a2 - 16);
  unint64_t v8 = (unint64_t)v7;
  while (1)
  {
    uint64_t v9 = v8;
    uint64_t v10 = a2 - v8;
    uint64_t v11 = (uint64_t)(a2 - v8) >> 4;
    if (v5 || !v4)
    {
      switch(v11)
      {
        case 0:
        case 1:
          return result;
        case 2:
          unsigned int v372 = *(_DWORD *)(a2 - 16);
          unsigned int v373 = *(_DWORD *)v9;
          if (v372 != *(_DWORD *)v9)
          {
            if (v372 <= v373) {
              return result;
            }
            uint64_t v677 = *(void *)(v9 + 8);
            uint64_t v374 = *(void *)(a2 - 8);
            goto LABEL_860;
          }
          uint64_t v374 = *(void *)(a2 - 8);
          uint64_t v375 = *(uint64_t ****)(v374 + 48);
          if ((*((unsigned char *)v375 + 23) & 0x10) != 0)
          {
            uint64_t v376 = ***v375;
            uint64_t v377 = *(void *)(v376 + 152);
            uint64_t v378 = *(unsigned int *)(v376 + 168);
            if (v378)
            {
              LODWORD(v379) = (v378 - 1) & ((v375 >> 4) ^ (v375 >> 9));
              uint64_t v380 = (uint64_t ****)(v377 + 16 * v379);
              unsigned int v381 = *v380;
              if (*v380 != v375)
              {
                int v382 = 1;
                do
                {
                  if (v381 == (uint64_t ***)-4096) {
                    goto LABEL_841;
                  }
                  int v383 = v379 + v382++;
                  uint64_t v379 = v383 & (v378 - 1);
                  unsigned int v381 = *(uint64_t ****)(v377 + 16 * v379);
                }
                while (v381 != v375);
                uint64_t v380 = (uint64_t ****)(v377 + 16 * v379);
              }
            }
            else
            {
LABEL_841:
              uint64_t v380 = (uint64_t ****)(v377 + 16 * v378);
            }
            v739 = v380[1];
            size_t v741 = (size_t)*v739;
            uint64_t result = (char *)(v739 + 2);
            size_t v740 = v741;
            goto LABEL_843;
          }
          size_t v740 = 0;
          uint64_t result = &byte_1CFBCE98E;
LABEL_843:
          uint64_t v677 = *(void *)(v9 + 8);
          v742 = *(uint64_t ****)(v677 + 48);
          if ((*((unsigned char *)v742 + 23) & 0x10) != 0)
          {
            uint64_t v743 = ***v742;
            uint64_t v744 = *(void *)(v743 + 152);
            uint64_t v745 = *(unsigned int *)(v743 + 168);
            if (v745)
            {
              LODWORD(v746) = (v745 - 1) & ((v742 >> 4) ^ (v742 >> 9));
              v747 = (uint64_t ****)(v744 + 16 * v746);
              v748 = *v747;
              if (*v747 != v742)
              {
                int v749 = 1;
                do
                {
                  if (v748 == (uint64_t ***)-4096) {
                    goto LABEL_850;
                  }
                  int v750 = v746 + v749++;
                  uint64_t v746 = v750 & (v745 - 1);
                  v748 = *(uint64_t ****)(v744 + 16 * v746);
                }
                while (v748 != v742);
                v747 = (uint64_t ****)(v744 + 16 * v746);
              }
            }
            else
            {
LABEL_850:
              v747 = (uint64_t ****)(v744 + 16 * v745);
            }
            v751 = v747[1];
            size_t v754 = (size_t)*v751;
            v752 = (char *)(v751 + 2);
            size_t v753 = v754;
            goto LABEL_852;
          }
          size_t v753 = 0;
          v752 = &byte_1CFBCE98E;
LABEL_852:
          if (v753 >= v740) {
            size_t v755 = v740;
          }
          else {
            size_t v755 = v753;
          }
          if (v755 && (uint64_t result = (char *)memcmp(result, v752, v755), result))
          {
            if ((result & 0x80000000) != 0) {
              return result;
            }
          }
          else if (v740 <= v753)
          {
            return result;
          }
LABEL_860:
          *(_DWORD *)uint64_t v9 = v372;
          *(_DWORD *)(a2 - 16) = v373;
          *(void *)(v9 + 8) = v374;
          *(void *)(a2 - 8) = v677;
          break;
        case 3:
          return sub_1CD24F32C((char *)v9, (unsigned int *)(v9 + 16), v756);
        case 4:
          return sub_1CD250080(v9, v9 + 16, v9 + 32, (uint64_t)v756);
        case 5:
          return sub_1CD24ECB4(v9, v9 + 16, v9 + 32, v9 + 48, v756);
        default:
          JUMPOUT(0);
      }
      return result;
    }
    unint64_t v767 = v9;
    if (v10 <= 383) {
      break;
    }
    if (!a3)
    {
      if (v9 == a2) {
        return result;
      }
      int64_t v451 = (unint64_t)(v11 - 2) >> 1;
      int64_t v762 = v451;
      while (1)
      {
        int64_t v452 = v451;
        if (v762 < v451) {
          goto LABEL_653;
        }
        uint64_t v453 = (2 * v451) | 1;
        unint64_t v454 = v767 + 16 * v453;
        if (2 * v451 + 2 >= v11) {
          goto LABEL_554;
        }
        unsigned int v455 = *(_DWORD *)(v454 + 16);
        BOOL v456 = *(_DWORD *)v454 > v455;
        if (*(_DWORD *)v454 == v455)
        {
          v457 = *(uint64_t ****)(*(void *)(v767 + 16 * v453 + 8) + 48);
          if ((*((unsigned char *)v457 + 23) & 0x10) != 0)
          {
            uint64_t v458 = ***v457;
            uint64_t v459 = *(void *)(v458 + 152);
            uint64_t v460 = *(unsigned int *)(v458 + 168);
            if (v460)
            {
              LODWORD(v461) = (v460 - 1) & ((v457 >> 4) ^ (v457 >> 9));
              uint64_t v462 = (uint64_t ****)(v459 + 16 * v461);
              v463 = *v462;
              if (*v462 != v457)
              {
                int v464 = 1;
                do
                {
                  if (v463 == (uint64_t ***)-4096) {
                    goto LABEL_531;
                  }
                  int v465 = v461 + v464++;
                  uint64_t v461 = v465 & (v460 - 1);
                  v463 = *(uint64_t ****)(v459 + 16 * v461);
                }
                while (v463 != v457);
                uint64_t v462 = (uint64_t ****)(v459 + 16 * v461);
              }
            }
            else
            {
LABEL_531:
              uint64_t v462 = (uint64_t ****)(v459 + 16 * v460);
            }
            int v466 = v462[1];
            size_t v468 = (size_t)*v466;
            uint64_t result = (char *)(v466 + 2);
            size_t v467 = v468;
          }
          else
          {
            size_t v467 = 0;
            uint64_t result = &byte_1CFBCE98E;
          }
          v469 = *(uint64_t ****)(*(void *)(v454 + 24) + 48);
          if ((*((unsigned char *)v469 + 23) & 0x10) != 0)
          {
            uint64_t v470 = ***v469;
            uint64_t v471 = *(void *)(v470 + 152);
            uint64_t v472 = *(unsigned int *)(v470 + 168);
            if (v472)
            {
              LODWORD(v473) = (v472 - 1) & ((v469 >> 4) ^ (v469 >> 9));
              v474 = (uint64_t ****)(v471 + 16 * v473);
              unsigned int v475 = *v474;
              if (*v474 != v469)
              {
                int v476 = 1;
                do
                {
                  if (v475 == (uint64_t ***)-4096) {
                    goto LABEL_540;
                  }
                  int v477 = v473 + v476++;
                  uint64_t v473 = v477 & (v472 - 1);
                  unsigned int v475 = *(uint64_t ****)(v471 + 16 * v473);
                }
                while (v475 != v469);
                v474 = (uint64_t ****)(v471 + 16 * v473);
              }
            }
            else
            {
LABEL_540:
              v474 = (uint64_t ****)(v471 + 16 * v472);
            }
            char v478 = v474[1];
            size_t v481 = (size_t)*v478;
            v479 = (char *)(v478 + 2);
            size_t v480 = v481;
          }
          else
          {
            size_t v480 = 0;
            v479 = &byte_1CFBCE98E;
          }
          if (v480 >= v467) {
            size_t v482 = v467;
          }
          else {
            size_t v482 = v480;
          }
          if (v482)
          {
            uint64_t result = (char *)memcmp(result, v479, v482);
            if (result)
            {
              BOOL v483 = (int)result >= 0;
              goto LABEL_552;
            }
          }
          BOOL v456 = v467 > v480;
        }
        BOOL v483 = v456;
LABEL_552:
        if (v483)
        {
          v454 += 16;
          uint64_t v453 = 2 * v452 + 2;
        }
LABEL_554:
        unint64_t v484 = v767 + 16 * v452;
        unsigned int v485 = *(_DWORD *)v454;
        unsigned int v486 = *(_DWORD *)v484;
        if (*(_DWORD *)v454 == *(_DWORD *)v484)
        {
          uint64_t v487 = *(void *)(v454 + 8);
          v488 = *(uint64_t ****)(v487 + 48);
          if ((*((unsigned char *)v488 + 23) & 0x10) != 0)
          {
            uint64_t v489 = ***v488;
            uint64_t v490 = *(void *)(v489 + 152);
            uint64_t v491 = *(unsigned int *)(v489 + 168);
            if (v491)
            {
              LODWORD(v492) = (v491 - 1) & ((v488 >> 4) ^ (v488 >> 9));
              int v493 = (uint64_t ****)(v490 + 16 * v492);
              v494 = *v493;
              if (*v493 != v488)
              {
                int v495 = 1;
                do
                {
                  if (v494 == (uint64_t ***)-4096) {
                    goto LABEL_564;
                  }
                  int v496 = v492 + v495++;
                  uint64_t v492 = v496 & (v491 - 1);
                  v494 = *(uint64_t ****)(v490 + 16 * v492);
                }
                while (v494 != v488);
                int v493 = (uint64_t ****)(v490 + 16 * v492);
              }
            }
            else
            {
LABEL_564:
              int v493 = (uint64_t ****)(v490 + 16 * v491);
            }
            v497 = v493[1];
            size_t v499 = (size_t)*v497;
            uint64_t result = (char *)(v497 + 2);
            size_t v498 = v499;
          }
          else
          {
            size_t v498 = 0;
            uint64_t result = &byte_1CFBCE98E;
          }
          uint64_t v759 = *(void *)(v767 + 16 * v452 + 8);
          uint64_t v500 = *(uint64_t ****)(v759 + 48);
          if ((*((unsigned char *)v500 + 23) & 0x10) != 0)
          {
            uint64_t v501 = ***v500;
            uint64_t v502 = *(void *)(v501 + 152);
            uint64_t v503 = *(unsigned int *)(v501 + 168);
            if (v503)
            {
              LODWORD(v504) = (v503 - 1) & ((v500 >> 4) ^ (v500 >> 9));
              uint64_t v505 = (uint64_t ****)(v502 + 16 * v504);
              v506 = *v505;
              if (*v505 != v500)
              {
                int v507 = 1;
                do
                {
                  if (v506 == (uint64_t ***)-4096) {
                    goto LABEL_573;
                  }
                  int v508 = v504 + v507++;
                  uint64_t v504 = v508 & (v503 - 1);
                  v506 = *(uint64_t ****)(v502 + 16 * v504);
                }
                while (v506 != v500);
                uint64_t v505 = (uint64_t ****)(v502 + 16 * v504);
              }
            }
            else
            {
LABEL_573:
              uint64_t v505 = (uint64_t ****)(v502 + 16 * v503);
            }
            uint64_t v509 = v505[1];
            size_t v512 = (size_t)*v509;
            v510 = (char *)(v509 + 2);
            size_t v511 = v512;
          }
          else
          {
            size_t v511 = 0;
            v510 = &byte_1CFBCE98E;
          }
          if (v511 >= v498) {
            size_t v513 = v498;
          }
          else {
            size_t v513 = v511;
          }
          if (v513 && (uint64_t result = (char *)memcmp(result, v510, v513), result))
          {
            if ((result & 0x80000000) == 0) {
              goto LABEL_653;
            }
          }
          else if (v498 > v511)
          {
            goto LABEL_653;
          }
        }
        else
        {
          if (v485 > v486) {
            goto LABEL_653;
          }
          uint64_t v759 = *(void *)(v484 + 8);
          uint64_t v487 = *(void *)(v454 + 8);
        }
        *(_DWORD *)unint64_t v484 = v485;
        *(void *)(v484 + 8) = v487;
        while (1)
        {
          if (v762 < v453) {
            goto LABEL_652;
          }
          unint64_t v514 = v454;
          uint64_t v515 = 2 * v453;
          uint64_t v453 = (2 * v453) | 1;
          unint64_t v454 = v767 + 16 * v453;
          uint64_t v516 = v515 + 2;
          if (v515 + 2 < v11)
          {
            unsigned int v517 = *(_DWORD *)(v454 + 16);
            BOOL v518 = *(_DWORD *)v454 > v517;
            if (*(_DWORD *)v454 == v517)
            {
              v519 = *(uint64_t ****)(*(void *)(v767 + 16 * v453 + 8) + 48);
              if ((*((unsigned char *)v519 + 23) & 0x10) != 0)
              {
                uint64_t v520 = ***v519;
                uint64_t v521 = *(void *)(v520 + 152);
                uint64_t v522 = *(unsigned int *)(v520 + 168);
                if (v522)
                {
                  LODWORD(v523) = (v522 - 1) & ((v519 >> 4) ^ (v519 >> 9));
                  v524 = (uint64_t ****)(v521 + 16 * v523);
                  uint64_t v525 = *v524;
                  if (*v524 != v519)
                  {
                    int v526 = 1;
                    do
                    {
                      if (v525 == (uint64_t ***)-4096) {
                        goto LABEL_594;
                      }
                      int v527 = v523 + v526++;
                      uint64_t v523 = v527 & (v522 - 1);
                      uint64_t v525 = *(uint64_t ****)(v521 + 16 * v523);
                    }
                    while (v525 != v519);
                    v524 = (uint64_t ****)(v521 + 16 * v523);
                  }
                }
                else
                {
LABEL_594:
                  v524 = (uint64_t ****)(v521 + 16 * v522);
                }
                v528 = v524[1];
                size_t v530 = (size_t)*v528;
                uint64_t result = (char *)(v528 + 2);
                size_t v529 = v530;
              }
              else
              {
                size_t v529 = 0;
                uint64_t result = &byte_1CFBCE98E;
              }
              v531 = *(uint64_t ****)(*(void *)(v454 + 24) + 48);
              if ((*((unsigned char *)v531 + 23) & 0x10) != 0)
              {
                uint64_t v532 = ***v531;
                uint64_t v533 = *(void *)(v532 + 152);
                uint64_t v534 = *(unsigned int *)(v532 + 168);
                if (v534)
                {
                  LODWORD(v535) = (v534 - 1) & ((v531 >> 4) ^ (v531 >> 9));
                  uint64_t v536 = (uint64_t ****)(v533 + 16 * v535);
                  v537 = *v536;
                  if (*v536 != v531)
                  {
                    int v538 = 1;
                    do
                    {
                      if (v537 == (uint64_t ***)-4096) {
                        goto LABEL_603;
                      }
                      int v539 = v535 + v538++;
                      uint64_t v535 = v539 & (v534 - 1);
                      v537 = *(uint64_t ****)(v533 + 16 * v535);
                    }
                    while (v537 != v531);
                    uint64_t v536 = (uint64_t ****)(v533 + 16 * v535);
                  }
                }
                else
                {
LABEL_603:
                  uint64_t v536 = (uint64_t ****)(v533 + 16 * v534);
                }
                v540 = v536[1];
                size_t v543 = (size_t)*v540;
                unint64_t v541 = (char *)(v540 + 2);
                size_t v542 = v543;
              }
              else
              {
                size_t v542 = 0;
                unint64_t v541 = &byte_1CFBCE98E;
              }
              if (v542 >= v529) {
                size_t v544 = v529;
              }
              else {
                size_t v544 = v542;
              }
              if (v544)
              {
                uint64_t result = (char *)memcmp(result, v541, v544);
                if (result)
                {
                  BOOL v545 = (int)result >= 0;
                  goto LABEL_615;
                }
              }
              BOOL v518 = v529 > v542;
            }
            BOOL v545 = v518;
LABEL_615:
            if (v545)
            {
              v454 += 16;
              uint64_t v453 = v516;
            }
          }
          unsigned int v546 = *(_DWORD *)v454;
          if (*(_DWORD *)v454 != v486)
          {
            if (v546 > v486) {
              goto LABEL_651;
            }
            uint64_t v547 = *(void *)(v454 + 8);
            goto LABEL_646;
          }
          uint64_t v547 = *(void *)(v454 + 8);
          v548 = *(uint64_t ****)(v547 + 48);
          if ((*((unsigned char *)v548 + 23) & 0x10) != 0)
          {
            uint64_t v549 = ***v548;
            uint64_t v550 = *(void *)(v549 + 152);
            uint64_t v551 = *(unsigned int *)(v549 + 168);
            if (v551)
            {
              LODWORD(v552) = (v551 - 1) & ((v548 >> 4) ^ (v548 >> 9));
              v553 = (uint64_t ****)(v550 + 16 * v552);
              v554 = *v553;
              if (*v553 != v548)
              {
                int v555 = 1;
                do
                {
                  if (v554 == (uint64_t ***)-4096) {
                    goto LABEL_627;
                  }
                  int v556 = v552 + v555++;
                  uint64_t v552 = v556 & (v551 - 1);
                  v554 = *(uint64_t ****)(v550 + 16 * v552);
                }
                while (v554 != v548);
                v553 = (uint64_t ****)(v550 + 16 * v552);
              }
            }
            else
            {
LABEL_627:
              v553 = (uint64_t ****)(v550 + 16 * v551);
            }
            v557 = v553[1];
            unint64_t v559 = (unint64_t)*v557;
            uint64_t result = (char *)(v557 + 2);
            unint64_t v558 = v559;
          }
          else
          {
            unint64_t v558 = 0;
            uint64_t result = &byte_1CFBCE98E;
          }
          v560 = *(uint64_t ****)(v759 + 48);
          if ((*((unsigned char *)v560 + 23) & 0x10) != 0)
          {
            uint64_t v561 = ***v560;
            uint64_t v562 = *(void *)(v561 + 152);
            uint64_t v563 = *(unsigned int *)(v561 + 168);
            if (v563)
            {
              LODWORD(v564) = (v563 - 1) & ((v560 >> 4) ^ (v560 >> 9));
              v565 = (uint64_t ****)(v562 + 16 * v564);
              v566 = *v565;
              if (*v565 != v560)
              {
                int v567 = 1;
                do
                {
                  if (v566 == (uint64_t ***)-4096) {
                    goto LABEL_636;
                  }
                  int v568 = v564 + v567++;
                  uint64_t v564 = v568 & (v563 - 1);
                  v566 = *(uint64_t ****)(v562 + 16 * v564);
                }
                while (v566 != v560);
                v565 = (uint64_t ****)(v562 + 16 * v564);
              }
            }
            else
            {
LABEL_636:
              v565 = (uint64_t ****)(v562 + 16 * v563);
            }
            v569 = v565[1];
            unint64_t v572 = (unint64_t)*v569;
            v570 = (char *)(v569 + 2);
            unint64_t v571 = v572;
          }
          else
          {
            unint64_t v571 = 0;
            v570 = &byte_1CFBCE98E;
          }
          size_t v573 = v571 >= v558 ? v558 : v571;
          if (!v573) {
            break;
          }
          uint64_t result = (char *)memcmp(result, v570, v573);
          if (!result) {
            break;
          }
          if ((result & 0x80000000) == 0) {
            goto LABEL_651;
          }
LABEL_646:
          *(_DWORD *)unint64_t v514 = v546;
          *(void *)(v514 + 8) = v547;
        }
        if (v558 <= v571) {
          goto LABEL_646;
        }
LABEL_651:
        unint64_t v454 = v514;
LABEL_652:
        *(_DWORD *)unint64_t v454 = v486;
        *(void *)(v454 + 8) = v759;
LABEL_653:
        int64_t v451 = v452 - 1;
        if (!v452)
        {
          unint64_t v574 = v767;
          while (1)
          {
            uint64_t v575 = 0;
            int v763 = *(_DWORD *)v574;
            uint64_t v576 = *(void *)(v574 + 8);
            do
            {
              uint64_t v577 = v575 + 1;
              unint64_t v578 = v574 + 16 * (v575 + 1);
              uint64_t v579 = (2 * v575) | 1;
              uint64_t v580 = 2 * v575 + 2;
              if (v580 >= v11) {
                goto LABEL_692;
              }
              unsigned int v581 = *(_DWORD *)(v578 + 16);
              BOOL v582 = *(_DWORD *)v578 > v581;
              if (*(_DWORD *)v578 != v581) {
                goto LABEL_687;
              }
              v583 = *(uint64_t ****)(*(void *)(v574 + 16 * v577 + 8) + 48);
              if ((*((unsigned char *)v583 + 23) & 0x10) != 0)
              {
                uint64_t v584 = ***v583;
                uint64_t v585 = *(void *)(v584 + 152);
                uint64_t v586 = *(unsigned int *)(v584 + 168);
                if (!v586) {
                  goto LABEL_669;
                }
                LODWORD(v587) = (v586 - 1) & ((v583 >> 4) ^ (v583 >> 9));
                v588 = (uint64_t ****)(v585 + 16 * v587);
                v589 = *v588;
                if (*v588 != v583)
                {
                  int v590 = 1;
                  while (v589 != (uint64_t ***)-4096)
                  {
                    int v591 = v587 + v590++;
                    uint64_t v587 = v591 & (v586 - 1);
                    v589 = *(uint64_t ****)(v585 + 16 * v587);
                    if (v589 == v583)
                    {
                      v588 = (uint64_t ****)(v585 + 16 * v587);
                      goto LABEL_670;
                    }
                  }
LABEL_669:
                  v588 = (uint64_t ****)(v585 + 16 * v586);
                }
LABEL_670:
                v592 = v588[1];
                size_t v594 = (size_t)*v592;
                uint64_t result = (char *)(v592 + 2);
                size_t v593 = v594;
                goto LABEL_671;
              }
              size_t v593 = 0;
              uint64_t result = &byte_1CFBCE98E;
LABEL_671:
              v595 = *(uint64_t ****)(*(void *)(v578 + 24) + 48);
              if ((*((unsigned char *)v595 + 23) & 0x10) == 0)
              {
                size_t v606 = 0;
                v605 = &byte_1CFBCE98E;
                goto LABEL_680;
              }
              uint64_t v596 = ***v595;
              uint64_t v597 = *(void *)(v596 + 152);
              uint64_t v598 = *(unsigned int *)(v596 + 168);
              if (!v598) {
                goto LABEL_678;
              }
              LODWORD(v599) = (v598 - 1) & ((v595 >> 4) ^ (v595 >> 9));
              v600 = (uint64_t ****)(v597 + 16 * v599);
              v601 = *v600;
              if (*v600 != v595)
              {
                int v602 = 1;
                while (v601 != (uint64_t ***)-4096)
                {
                  int v603 = v599 + v602++;
                  uint64_t v599 = v603 & (v598 - 1);
                  v601 = *(uint64_t ****)(v597 + 16 * v599);
                  if (v601 == v595)
                  {
                    v600 = (uint64_t ****)(v597 + 16 * v599);
                    goto LABEL_679;
                  }
                }
LABEL_678:
                v600 = (uint64_t ****)(v597 + 16 * v598);
              }
LABEL_679:
              v604 = v600[1];
              size_t v607 = (size_t)*v604;
              v605 = (char *)(v604 + 2);
              size_t v606 = v607;
LABEL_680:
              if (v606 >= v593) {
                size_t v608 = v593;
              }
              else {
                size_t v608 = v606;
              }
              if (v608)
              {
                uint64_t result = (char *)memcmp(result, v605, v608);
                if (result)
                {
                  BOOL v609 = (int)result >= 0;
                  goto LABEL_690;
                }
              }
              BOOL v582 = v593 > v606;
LABEL_687:
              BOOL v609 = v582;
LABEL_690:
              if (v609)
              {
                v578 += 16;
                uint64_t v579 = v580;
              }
LABEL_692:
              *(_DWORD *)unint64_t v574 = *(_DWORD *)v578;
              *(void *)(v574 + 8) = *(void *)(v578 + 8);
              unint64_t v574 = v578;
              uint64_t v575 = v579;
            }
            while (v579 <= (uint64_t)((unint64_t)(v11 - 2) >> 1));
            unint64_t v610 = a2 - 16;
            if (v578 == a2 - 16)
            {
              *(_DWORD *)unint64_t v578 = v763;
              *(void *)(v578 + 8) = v576;
              goto LABEL_733;
            }
            *(_DWORD *)unint64_t v578 = *(_DWORD *)(a2 - 16);
            *(void *)(v578 + 8) = *(void *)(a2 - 8);
            *(_DWORD *)(a2 - 16) = v763;
            *(void *)(a2 - 8) = v576;
            uint64_t v611 = v578 - v767 + 16;
            if (v611 >= 17)
            {
              unint64_t v612 = ((unint64_t)v611 >> 4) - 2;
              unint64_t v613 = v612 >> 1;
              unint64_t v614 = v767 + 16 * (v612 >> 1);
              unsigned int v615 = *(_DWORD *)v614;
              unsigned int v616 = *(_DWORD *)v578;
              unint64_t v760 = a2 - 16;
              if (*(_DWORD *)v614 != *(_DWORD *)v578)
              {
                if (v615 <= v616) {
                  goto LABEL_733;
                }
                uint64_t v627 = *(void *)(v578 + 8);
                uint64_t v617 = *(void *)(v767 + 16 * v613 + 8);
                goto LABEL_729;
              }
              uint64_t v617 = *(void *)(v614 + 8);
              v618 = *(uint64_t ****)(v617 + 48);
              if ((*((unsigned char *)v618 + 23) & 0x10) != 0)
              {
                uint64_t v619 = ***v618;
                uint64_t v620 = *(void *)(v619 + 152);
                uint64_t v621 = *(unsigned int *)(v619 + 168);
                if (!v621) {
                  goto LABEL_709;
                }
                LODWORD(v622) = (v621 - 1) & ((v618 >> 4) ^ (v618 >> 9));
                v623 = (uint64_t ****)(v620 + 16 * v622);
                v624 = *v623;
                if (*v623 != v618)
                {
                  int v625 = 1;
                  while (v624 != (uint64_t ***)-4096)
                  {
                    int v626 = v622 + v625++;
                    uint64_t v622 = v626 & (v621 - 1);
                    v624 = *(uint64_t ****)(v620 + 16 * v622);
                    if (v624 == v618)
                    {
                      v623 = (uint64_t ****)(v620 + 16 * v622);
                      goto LABEL_710;
                    }
                  }
LABEL_709:
                  v623 = (uint64_t ****)(v620 + 16 * v621);
                }
LABEL_710:
                v628 = v623[1];
                size_t v630 = (size_t)*v628;
                uint64_t result = (char *)(v628 + 2);
                size_t v629 = v630;
              }
              else
              {
                size_t v629 = 0;
                uint64_t result = &byte_1CFBCE98E;
              }
              uint64_t v627 = *(void *)(v578 + 8);
              v631 = *(uint64_t ****)(v627 + 48);
              if ((*((unsigned char *)v631 + 23) & 0x10) != 0)
              {
                uint64_t v632 = ***v631;
                uint64_t v633 = *(void *)(v632 + 152);
                uint64_t v634 = *(unsigned int *)(v632 + 168);
                if (!v634) {
                  goto LABEL_718;
                }
                LODWORD(v635) = (v634 - 1) & ((v631 >> 4) ^ (v631 >> 9));
                v636 = (uint64_t ****)(v633 + 16 * v635);
                v637 = *v636;
                if (*v636 != v631)
                {
                  int v638 = 1;
                  while (v637 != (uint64_t ***)-4096)
                  {
                    int v639 = v635 + v638++;
                    uint64_t v635 = v639 & (v634 - 1);
                    v637 = *(uint64_t ****)(v633 + 16 * v635);
                    if (v637 == v631)
                    {
                      v636 = (uint64_t ****)(v633 + 16 * v635);
                      goto LABEL_719;
                    }
                  }
LABEL_718:
                  v636 = (uint64_t ****)(v633 + 16 * v634);
                }
LABEL_719:
                v640 = v636[1];
                size_t v643 = (size_t)*v640;
                v641 = (char *)(v640 + 2);
                size_t v642 = v643;
              }
              else
              {
                size_t v642 = 0;
                v641 = &byte_1CFBCE98E;
              }
              if (v642 >= v629) {
                size_t v644 = v629;
              }
              else {
                size_t v644 = v642;
              }
              if (v644
                && (uint64_t v645 = *(void *)(v578 + 8),
                    unint64_t v646 = v612,
                    size_t v765 = v629,
                    uint64_t result = (char *)memcmp(result, v641, v644),
                    size_t v629 = v765,
                    unint64_t v612 = v646,
                    uint64_t v627 = v645,
                    result))
              {
                unint64_t v610 = v760;
                if ((result & 0x80000000) != 0) {
                  goto LABEL_733;
                }
LABEL_729:
                *(_DWORD *)unint64_t v578 = v615;
                *(void *)(v578 + 8) = v617;
                if (v612 >= 2)
                {
                  unsigned int v766 = v616;
                  while (1)
                  {
                    unint64_t v648 = v613 - 1;
                    unint64_t v613 = (v613 - 1) >> 1;
                    unint64_t v647 = v767 + 16 * v613;
                    unsigned int v649 = *(_DWORD *)v647;
                    if (*(_DWORD *)v647 == v616) {
                      break;
                    }
                    if (v649 <= v616) {
                      goto LABEL_731;
                    }
                    uint64_t v650 = *(void *)(v767 + 16 * v613 + 8);
LABEL_766:
                    *(_DWORD *)unint64_t v614 = v649;
                    *(void *)(v614 + 8) = v650;
                    unint64_t v614 = v767 + 16 * v613;
                    if (v648 <= 1) {
                      goto LABEL_732;
                    }
                  }
                  uint64_t v650 = *(void *)(v647 + 8);
                  v651 = *(uint64_t ****)(v650 + 48);
                  if ((*((unsigned char *)v651 + 23) & 0x10) != 0)
                  {
                    uint64_t v652 = ***v651;
                    uint64_t v653 = *(void *)(v652 + 152);
                    uint64_t v654 = *(unsigned int *)(v652 + 168);
                    if (!v654) {
                      goto LABEL_746;
                    }
                    LODWORD(v655) = (v654 - 1) & ((v651 >> 4) ^ (v651 >> 9));
                    v656 = (uint64_t ****)(v653 + 16 * v655);
                    v657 = *v656;
                    if (*v656 != v651)
                    {
                      int v658 = 1;
                      while (v657 != (uint64_t ***)-4096)
                      {
                        int v659 = v655 + v658++;
                        uint64_t v655 = v659 & (v654 - 1);
                        v657 = *(uint64_t ****)(v653 + 16 * v655);
                        if (v657 == v651)
                        {
                          v656 = (uint64_t ****)(v653 + 16 * v655);
                          goto LABEL_747;
                        }
                      }
LABEL_746:
                      v656 = (uint64_t ****)(v653 + 16 * v654);
                    }
LABEL_747:
                    v660 = v656[1];
                    size_t v662 = (size_t)*v660;
                    uint64_t result = (char *)(v660 + 2);
                    size_t v661 = v662;
                  }
                  else
                  {
                    size_t v661 = 0;
                    uint64_t result = &byte_1CFBCE98E;
                  }
                  v663 = *(uint64_t ****)(v627 + 48);
                  if ((*((unsigned char *)v663 + 23) & 0x10) != 0)
                  {
                    uint64_t v664 = ***v663;
                    uint64_t v665 = *(void *)(v664 + 152);
                    uint64_t v666 = *(unsigned int *)(v664 + 168);
                    if (!v666) {
                      goto LABEL_755;
                    }
                    LODWORD(v667) = (v666 - 1) & ((v663 >> 4) ^ (v663 >> 9));
                    v668 = (uint64_t ****)(v665 + 16 * v667);
                    v669 = *v668;
                    if (*v668 != v663)
                    {
                      int v670 = 1;
                      while (v669 != (uint64_t ***)-4096)
                      {
                        int v671 = v667 + v670++;
                        uint64_t v667 = v671 & (v666 - 1);
                        v669 = *(uint64_t ****)(v665 + 16 * v667);
                        if (v669 == v663)
                        {
                          v668 = (uint64_t ****)(v665 + 16 * v667);
                          goto LABEL_756;
                        }
                      }
LABEL_755:
                      v668 = (uint64_t ****)(v665 + 16 * v666);
                    }
LABEL_756:
                    v672 = v668[1];
                    size_t v675 = (size_t)*v672;
                    v673 = (char *)(v672 + 2);
                    size_t v674 = v675;
                  }
                  else
                  {
                    size_t v674 = 0;
                    v673 = &byte_1CFBCE98E;
                  }
                  if (v674 >= v661) {
                    size_t v676 = v661;
                  }
                  else {
                    size_t v676 = v674;
                  }
                  if (v676 && (uint64_t result = (char *)memcmp(result, v673, v676), result))
                  {
                    unsigned int v616 = v766;
                    if ((result & 0x80000000) != 0) {
                      goto LABEL_731;
                    }
                  }
                  else
                  {
                    BOOL v46 = v661 > v674;
                    unsigned int v616 = v766;
                    if (!v46) {
                      goto LABEL_731;
                    }
                  }
                  goto LABEL_766;
                }
LABEL_731:
                unint64_t v647 = v614;
LABEL_732:
                *(_DWORD *)unint64_t v647 = v616;
                *(void *)(v647 + 8) = v627;
                unint64_t v610 = v760;
              }
              else
              {
                BOOL v46 = v629 > v642;
                unint64_t v610 = v760;
                if (v46) {
                  goto LABEL_729;
                }
              }
            }
LABEL_733:
            a2 = v610;
            BOOL v46 = v11-- <= 2;
            unint64_t v574 = v767;
            if (v46) {
              return result;
            }
          }
        }
      }
    }
    unint64_t v12 = (unint64_t)v11 >> 1;
    unint64_t v13 = v9 + 16 * ((unint64_t)v11 >> 1);
    if ((unint64_t)v10 < 0x801)
    {
      uint64_t result = sub_1CD24F32C((char *)v13, (unsigned int *)v9, v756);
    }
    else
    {
      sub_1CD24F32C((char *)v9, (unsigned int *)v13, v756);
      sub_1CD24F32C((char *)(v9 + 16), (unsigned int *)(v13 - 16), (unsigned int *)(a2 - 32));
      sub_1CD24F32C((char *)(v9 + 32), (unsigned int *)(v9 + 16 + 16 * v12), (unsigned int *)(a2 - 48));
      uint64_t result = sub_1CD24F32C((char *)(v13 - 16), (unsigned int *)v13, (unsigned int *)(v9 + 16 + 16 * v12));
      unsigned int v14 = *(_DWORD *)v9;
      *(_DWORD *)uint64_t v9 = *(_DWORD *)v13;
      *(_DWORD *)unint64_t v13 = v14;
      uint64_t v15 = *(void *)(v9 + 8);
      *(void *)(v9 + 8) = *(void *)(v13 + 8);
      *(void *)(v13 + 8) = v15;
    }
    --a3;
    unsigned int v16 = *(_DWORD *)v9;
    if (a4) {
      goto LABEL_47;
    }
    unsigned int v17 = *(_DWORD *)(v9 - 16);
    if (v17 != v16)
    {
      if (v17 <= v16)
      {
        uint64_t v27 = *(void *)(v9 + 8);
        goto LABEL_38;
      }
      goto LABEL_47;
    }
    unint64_t v18 = *(uint64_t ****)(*(void *)(v9 - 8) + 48);
    if ((*((unsigned char *)v18 + 23) & 0x10) != 0)
    {
      uint64_t v19 = ***v18;
      uint64_t v20 = *(void *)(v19 + 152);
      uint64_t v21 = *(unsigned int *)(v19 + 168);
      if (!v21) {
        goto LABEL_21;
      }
      LODWORD(v22) = (v21 - 1) & ((v18 >> 4) ^ (v18 >> 9));
      uint64_t v23 = (uint64_t ****)(v20 + 16 * v22);
      uint64_t v24 = *v23;
      if (*v23 != v18)
      {
        int v25 = 1;
        while (v24 != (uint64_t ***)-4096)
        {
          int v26 = v22 + v25++;
          uint64_t v22 = v26 & (v21 - 1);
          uint64_t v24 = *(uint64_t ****)(v20 + 16 * v22);
          if (v24 == v18)
          {
            uint64_t v23 = (uint64_t ****)(v20 + 16 * v22);
            goto LABEL_22;
          }
        }
LABEL_21:
        uint64_t v23 = (uint64_t ****)(v20 + 16 * v21);
      }
LABEL_22:
      int v28 = v23[1];
      size_t v30 = (size_t)*v28;
      uint64_t result = (char *)(v28 + 2);
      size_t v29 = v30;
      goto LABEL_23;
    }
    size_t v29 = 0;
    uint64_t result = &byte_1CFBCE98E;
LABEL_23:
    uint64_t v27 = *(void *)(v9 + 8);
    uint64_t v31 = *(uint64_t ****)(v27 + 48);
    if ((*((unsigned char *)v31 + 23) & 0x10) != 0)
    {
      uint64_t v32 = ***v31;
      uint64_t v33 = *(void *)(v32 + 152);
      uint64_t v34 = *(unsigned int *)(v32 + 168);
      if (v34)
      {
        LODWORD(v35) = (v34 - 1) & ((v31 >> 4) ^ (v31 >> 9));
        uint64_t v36 = (uint64_t ****)(v33 + 16 * v35);
        int v37 = *v36;
        if (*v36 == v31)
        {
LABEL_31:
          int v40 = v36[1];
          size_t v43 = (size_t)*v40;
          uint64_t v41 = (char *)(v40 + 2);
          size_t v42 = v43;
          goto LABEL_32;
        }
        int v38 = 1;
        while (v37 != (uint64_t ***)-4096)
        {
          int v39 = v35 + v38++;
          uint64_t v35 = v39 & (v34 - 1);
          int v37 = *(uint64_t ****)(v33 + 16 * v35);
          if (v37 == v31)
          {
            uint64_t v36 = (uint64_t ****)(v33 + 16 * v35);
            goto LABEL_31;
          }
        }
      }
      uint64_t v36 = (uint64_t ****)(v33 + 16 * v34);
      goto LABEL_31;
    }
    size_t v42 = 0;
    uint64_t v41 = &byte_1CFBCE98E;
LABEL_32:
    if (v42 >= v29) {
      size_t v44 = v29;
    }
    else {
      size_t v44 = v42;
    }
    if (v44)
    {
      uint64_t result = (char *)memcmp(result, v41, v44);
      if (result)
      {
        if ((result & 0x80000000) != 0) {
          goto LABEL_38;
        }
        goto LABEL_47;
      }
    }
    if (v29 <= v42)
    {
LABEL_38:
      unsigned int v45 = *v756;
      BOOL v46 = v16 > *v756;
      if (v16 != *v756) {
        goto LABEL_278;
      }
      uint64_t v47 = *(uint64_t ****)(v27 + 48);
      if ((*((unsigned char *)v47 + 23) & 0x10) != 0)
      {
        uint64_t v48 = ***v47;
        uint64_t v49 = *(void *)(v48 + 152);
        uint64_t v50 = *(unsigned int *)(v48 + 168);
        if (v50)
        {
          LODWORD(v51) = (v50 - 1) & ((v47 >> 4) ^ (v47 >> 9));
          unsigned int v52 = (uint64_t ****)(v49 + 16 * v51);
          unsigned int v53 = *v52;
          if (*v52 == v47)
          {
LABEL_228:
            int v213 = v52[1];
            size_t v215 = (size_t)*v213;
            uint64_t result = (char *)(v213 + 2);
            size_t v214 = v215;
            goto LABEL_229;
          }
          int v54 = 1;
          while (v53 != (uint64_t ***)-4096)
          {
            int v55 = v51 + v54++;
            uint64_t v51 = v55 & (v50 - 1);
            unsigned int v53 = *(uint64_t ****)(v49 + 16 * v51);
            if (v53 == v47)
            {
              unsigned int v52 = (uint64_t ****)(v49 + 16 * v51);
              goto LABEL_228;
            }
          }
        }
        unsigned int v52 = (uint64_t ****)(v49 + 16 * v50);
        goto LABEL_228;
      }
      size_t v214 = 0;
      uint64_t result = &byte_1CFBCE98E;
LABEL_229:
      v216 = *(uint64_t ****)(*(void *)(a2 - 8) + 48);
      if ((*((unsigned char *)v216 + 23) & 0x10) == 0)
      {
        size_t v227 = 0;
        unint64_t v226 = &byte_1CFBCE98E;
        goto LABEL_238;
      }
      uint64_t v217 = ***v216;
      uint64_t v218 = *(void *)(v217 + 152);
      uint64_t v219 = *(unsigned int *)(v217 + 168);
      if (!v219) {
        goto LABEL_236;
      }
      LODWORD(v220) = (v219 - 1) & ((v216 >> 4) ^ (v216 >> 9));
      uint64_t v221 = (uint64_t ****)(v218 + 16 * v220);
      unsigned int v222 = *v221;
      if (*v221 != v216)
      {
        int v223 = 1;
        while (v222 != (uint64_t ***)-4096)
        {
          int v224 = v220 + v223++;
          uint64_t v220 = v224 & (v219 - 1);
          unsigned int v222 = *(uint64_t ****)(v218 + 16 * v220);
          if (v222 == v216)
          {
            uint64_t v221 = (uint64_t ****)(v218 + 16 * v220);
            goto LABEL_237;
          }
        }
LABEL_236:
        uint64_t v221 = (uint64_t ****)(v218 + 16 * v219);
      }
LABEL_237:
      uint64_t v225 = v221[1];
      size_t v228 = (size_t)*v225;
      unint64_t v226 = (char *)(v225 + 2);
      size_t v227 = v228;
LABEL_238:
      if (v227 >= v214) {
        size_t v229 = v214;
      }
      else {
        size_t v229 = v227;
      }
      if (v229)
      {
        uint64_t result = (char *)memcmp(result, v226, v229);
        if (result)
        {
          if ((result & 0x80000000) != 0) {
            goto LABEL_244;
          }
          while (1)
          {
LABEL_280:
            while (1)
            {
              unint64_t v8 = v9 + 16;
              unsigned int v259 = *(_DWORD *)(v9 + 16);
              if (v16 == v259) {
                break;
              }
              v9 += 16;
              if (v16 > v259) {
                goto LABEL_312;
              }
            }
            char v260 = *(uint64_t ****)(v27 + 48);
            if ((*((unsigned char *)v260 + 23) & 0x10) != 0) {
              break;
            }
            size_t v270 = 0;
            uint64_t result = &byte_1CFBCE98E;
LABEL_292:
            char v272 = *(uint64_t ****)(*(void *)(v9 + 24) + 48);
            if ((*((unsigned char *)v272 + 23) & 0x10) == 0)
            {
              size_t v283 = 0;
              BOOL v282 = &byte_1CFBCE98E;
              goto LABEL_301;
            }
            uint64_t v273 = ***v272;
            uint64_t v274 = *(void *)(v273 + 152);
            uint64_t v275 = *(unsigned int *)(v273 + 168);
            if (!v275) {
              goto LABEL_299;
            }
            LODWORD(v276) = (v275 - 1) & ((v272 >> 4) ^ (v272 >> 9));
            uint64_t v277 = (uint64_t ****)(v274 + 16 * v276);
            uint64_t v278 = *v277;
            if (*v277 != v272)
            {
              int v279 = 1;
              while (v278 != (uint64_t ***)-4096)
              {
                int v280 = v276 + v279++;
                uint64_t v276 = v280 & (v275 - 1);
                uint64_t v278 = *(uint64_t ****)(v274 + 16 * v276);
                if (v278 == v272)
                {
                  uint64_t v277 = (uint64_t ****)(v274 + 16 * v276);
                  goto LABEL_300;
                }
              }
LABEL_299:
              uint64_t v277 = (uint64_t ****)(v274 + 16 * v275);
            }
LABEL_300:
            unint64_t v281 = v277[1];
            size_t v284 = (size_t)*v281;
            BOOL v282 = (char *)(v281 + 2);
            size_t v283 = v284;
LABEL_301:
            if (v283 >= v270) {
              size_t v285 = v270;
            }
            else {
              size_t v285 = v283;
            }
            if (v285 && (uint64_t result = (char *)memcmp(result, v282, v285), result))
            {
              v9 += 16;
              if ((result & 0x80000000) == 0) {
                goto LABEL_312;
              }
            }
            else
            {
              v9 += 16;
              if (v270 > v283) {
                goto LABEL_312;
              }
            }
          }
          uint64_t v261 = ***v260;
          uint64_t v262 = *(void *)(v261 + 152);
          uint64_t v263 = *(unsigned int *)(v261 + 168);
          if (v263)
          {
            LODWORD(v264) = (v263 - 1) & ((v260 >> 4) ^ (v260 >> 9));
            uint64_t v265 = (uint64_t ****)(v262 + 16 * v264);
            uint64_t v266 = *v265;
            if (*v265 == v260)
            {
LABEL_291:
              uint64_t v269 = v265[1];
              size_t v271 = (size_t)*v269;
              uint64_t result = (char *)(v269 + 2);
              size_t v270 = v271;
              goto LABEL_292;
            }
            int v267 = 1;
            while (v266 != (uint64_t ***)-4096)
            {
              int v268 = v264 + v267++;
              uint64_t v264 = v268 & (v263 - 1);
              uint64_t v266 = *(uint64_t ****)(v262 + 16 * v264);
              if (v266 == v260)
              {
                uint64_t v265 = (uint64_t ****)(v262 + 16 * v264);
                goto LABEL_291;
              }
            }
          }
          uint64_t v265 = (uint64_t ****)(v262 + 16 * v263);
          goto LABEL_291;
        }
      }
      BOOL v46 = v214 > v227;
LABEL_278:
      if (v46) {
        goto LABEL_280;
      }
LABEL_244:
      while (1)
      {
        unint64_t v8 = v9 + 16;
        if (v9 + 16 >= a2) {
          break;
        }
        uint64_t v230 = v9;
        v9 += 16;
        unsigned int v231 = *(_DWORD *)(v230 + 16);
        BOOL v232 = v16 > v231;
        if (v16 == v231)
        {
          unsigned int v233 = *(uint64_t ****)(v27 + 48);
          if ((*((unsigned char *)v233 + 23) & 0x10) != 0)
          {
            uint64_t v234 = ***v233;
            uint64_t v235 = *(void *)(v234 + 152);
            uint64_t v236 = *(unsigned int *)(v234 + 168);
            if (!v236) {
              goto LABEL_253;
            }
            LODWORD(v237) = (v236 - 1) & ((v233 >> 4) ^ (v233 >> 9));
            uint64_t v238 = (uint64_t ****)(v235 + 16 * v237);
            unsigned int v239 = *v238;
            if (*v238 != v233)
            {
              int v240 = 1;
              while (v239 != (uint64_t ***)-4096)
              {
                int v241 = v237 + v240++;
                uint64_t v237 = v241 & (v236 - 1);
                unsigned int v239 = *(uint64_t ****)(v235 + 16 * v237);
                if (v239 == v233)
                {
                  uint64_t v238 = (uint64_t ****)(v235 + 16 * v237);
                  goto LABEL_254;
                }
              }
LABEL_253:
              uint64_t v238 = (uint64_t ****)(v235 + 16 * v236);
            }
LABEL_254:
            uint64_t v242 = v238[1];
            size_t v244 = (size_t)*v242;
            uint64_t result = (char *)(v242 + 2);
            size_t v243 = v244;
            goto LABEL_255;
          }
          size_t v243 = 0;
          uint64_t result = &byte_1CFBCE98E;
LABEL_255:
          unsigned int v245 = *(uint64_t ****)(*(void *)(v230 + 24) + 48);
          if ((*((unsigned char *)v245 + 23) & 0x10) != 0)
          {
            uint64_t v246 = ***v245;
            uint64_t v247 = *(void *)(v246 + 152);
            uint64_t v248 = *(unsigned int *)(v246 + 168);
            if (!v248) {
              goto LABEL_262;
            }
            LODWORD(v249) = (v248 - 1) & ((v245 >> 4) ^ (v245 >> 9));
            uint64_t v250 = (uint64_t ****)(v247 + 16 * v249);
            unsigned int v251 = *v250;
            if (*v250 != v245)
            {
              int v252 = 1;
              while (v251 != (uint64_t ***)-4096)
              {
                int v253 = v249 + v252++;
                uint64_t v249 = v253 & (v248 - 1);
                unsigned int v251 = *(uint64_t ****)(v247 + 16 * v249);
                if (v251 == v245)
                {
                  uint64_t v250 = (uint64_t ****)(v247 + 16 * v249);
                  goto LABEL_263;
                }
              }
LABEL_262:
              uint64_t v250 = (uint64_t ****)(v247 + 16 * v248);
            }
LABEL_263:
            int v254 = v250[1];
            size_t v257 = (size_t)*v254;
            uint64_t v255 = (char *)(v254 + 2);
            size_t v256 = v257;
            goto LABEL_264;
          }
          size_t v256 = 0;
          uint64_t v255 = &byte_1CFBCE98E;
LABEL_264:
          if (v256 >= v243) {
            size_t v258 = v243;
          }
          else {
            size_t v258 = v256;
          }
          if (!v258 || (uint64_t result = (char *)memcmp(result, v255, v258), !result))
          {
            BOOL v232 = v243 > v256;
            goto LABEL_272;
          }
          if ((result & 0x80000000) == 0) {
            break;
          }
        }
        else
        {
LABEL_272:
          if (v232) {
            break;
          }
        }
      }
LABEL_312:
      unint64_t v286 = a2;
      if (v8 < a2)
      {
        for (unint64_t i = a2; ; i -= 16)
        {
          unint64_t v286 = i - 16;
          BOOL v288 = v16 > v45;
          if (v16 != v45) {
            goto LABEL_341;
          }
          int v289 = *(uint64_t ****)(v27 + 48);
          if ((*((unsigned char *)v289 + 23) & 0x10) != 0) {
            break;
          }
          size_t v299 = 0;
          uint64_t result = &byte_1CFBCE98E;
LABEL_324:
          int v301 = *(uint64_t ****)(*(void *)(i - 8) + 48);
          if ((*((unsigned char *)v301 + 23) & 0x10) == 0)
          {
            size_t v312 = 0;
            unint64_t v311 = &byte_1CFBCE98E;
            goto LABEL_333;
          }
          uint64_t v302 = ***v301;
          uint64_t v303 = *(void *)(v302 + 152);
          uint64_t v304 = *(unsigned int *)(v302 + 168);
          if (!v304) {
            goto LABEL_331;
          }
          LODWORD(v305) = (v304 - 1) & ((v301 >> 4) ^ (v301 >> 9));
          uint64_t v306 = (uint64_t ****)(v303 + 16 * v305);
          uint64_t v307 = *v306;
          if (*v306 != v301)
          {
            int v308 = 1;
            while (v307 != (uint64_t ***)-4096)
            {
              int v309 = v305 + v308++;
              uint64_t v305 = v309 & (v304 - 1);
              uint64_t v307 = *(uint64_t ****)(v303 + 16 * v305);
              if (v307 == v301)
              {
                uint64_t v306 = (uint64_t ****)(v303 + 16 * v305);
                goto LABEL_332;
              }
            }
LABEL_331:
            uint64_t v306 = (uint64_t ****)(v303 + 16 * v304);
          }
LABEL_332:
          unint64_t v310 = v306[1];
          size_t v313 = (size_t)*v310;
          unint64_t v311 = (char *)(v310 + 2);
          size_t v312 = v313;
LABEL_333:
          if (v312 >= v299) {
            size_t v314 = v299;
          }
          else {
            size_t v314 = v312;
          }
          if (v314)
          {
            uint64_t result = (char *)memcmp(result, v311, v314);
            if (result)
            {
              if ((result & 0x80000000) != 0) {
                goto LABEL_346;
              }
              goto LABEL_343;
            }
          }
          BOOL v288 = v299 > v312;
LABEL_341:
          if (!v288) {
            goto LABEL_346;
          }
LABEL_343:
          unsigned int v45 = *(_DWORD *)(i - 32);
        }
        uint64_t v290 = ***v289;
        uint64_t v291 = *(void *)(v290 + 152);
        uint64_t v292 = *(unsigned int *)(v290 + 168);
        if (v292)
        {
          LODWORD(v293) = (v292 - 1) & ((v289 >> 4) ^ (v289 >> 9));
          int v294 = (uint64_t ****)(v291 + 16 * v293);
          uint64_t v295 = *v294;
          if (*v294 == v289)
          {
LABEL_323:
            uint64_t v298 = v294[1];
            size_t v300 = (size_t)*v298;
            uint64_t result = (char *)(v298 + 2);
            size_t v299 = v300;
            goto LABEL_324;
          }
          int v296 = 1;
          while (v295 != (uint64_t ***)-4096)
          {
            int v297 = v293 + v296++;
            uint64_t v293 = v297 & (v292 - 1);
            uint64_t v295 = *(uint64_t ****)(v291 + 16 * v293);
            if (v295 == v289)
            {
              int v294 = (uint64_t ****)(v291 + 16 * v293);
              goto LABEL_323;
            }
          }
        }
        int v294 = (uint64_t ****)(v291 + 16 * v292);
        goto LABEL_323;
      }
LABEL_346:
      if (v8 >= v286) {
        goto LABEL_413;
      }
      unsigned int v315 = *(_DWORD *)v8;
      unsigned int v316 = *(_DWORD *)v286;
      do
      {
        unint64_t v317 = v286;
        *(_DWORD *)unint64_t v8 = v316;
        *(_DWORD *)unint64_t v286 = v315;
        uint64_t v318 = *(void *)(v8 + 8);
        *(void *)(v8 + 8) = *(void *)(v286 + 8);
        *(void *)(v286 + 8) = v318;
        unint64_t v319 = v8;
        do
        {
          while (1)
          {
            while (1)
            {
              unint64_t v8 = v319 + 16;
              unsigned int v315 = *(_DWORD *)(v319 + 16);
              if (v16 == v315) {
                break;
              }
              v319 += 16;
              if (v16 > v315) {
                goto LABEL_383;
              }
            }
            uint64_t v320 = *(uint64_t ****)(v27 + 48);
            if ((*((unsigned char *)v320 + 23) & 0x10) != 0)
            {
              uint64_t v321 = ***v320;
              uint64_t v322 = *(void *)(v321 + 152);
              uint64_t v323 = *(unsigned int *)(v321 + 168);
              if (v323)
              {
                LODWORD(v324) = (v323 - 1) & ((v320 >> 4) ^ (v320 >> 9));
                v325 = (uint64_t ****)(v322 + 16 * v324);
                uint64_t v326 = *v325;
                if (*v325 == v320)
                {
LABEL_360:
                  unint64_t v329 = v325[1];
                  unint64_t v331 = (unint64_t)*v329;
                  uint64_t result = (char *)(v329 + 2);
                  unint64_t v330 = v331;
                  goto LABEL_361;
                }
                int v327 = 1;
                while (v326 != (uint64_t ***)-4096)
                {
                  int v328 = v324 + v327++;
                  uint64_t v324 = v328 & (v323 - 1);
                  uint64_t v326 = *(uint64_t ****)(v322 + 16 * v324);
                  if (v326 == v320)
                  {
                    v325 = (uint64_t ****)(v322 + 16 * v324);
                    goto LABEL_360;
                  }
                }
              }
              v325 = (uint64_t ****)(v322 + 16 * v323);
              goto LABEL_360;
            }
            unint64_t v330 = 0;
            uint64_t result = &byte_1CFBCE98E;
LABEL_361:
            uint64_t v332 = *(uint64_t ****)(*(void *)(v319 + 24) + 48);
            if ((*((unsigned char *)v332 + 23) & 0x10) != 0)
            {
              uint64_t v333 = ***v332;
              uint64_t v334 = *(void *)(v333 + 152);
              uint64_t v335 = *(unsigned int *)(v333 + 168);
              if (v335)
              {
                LODWORD(v336) = (v335 - 1) & ((v332 >> 4) ^ (v332 >> 9));
                int v337 = (uint64_t ****)(v334 + 16 * v336);
                int64x2_t v338 = *v337;
                if (*v337 == v332)
                {
LABEL_369:
                  v341 = v337[1];
                  unint64_t v344 = (unint64_t)*v341;
                  v342 = (char *)(v341 + 2);
                  unint64_t v343 = v344;
                  goto LABEL_370;
                }
                int v339 = 1;
                while (v338 != (uint64_t ***)-4096)
                {
                  int v340 = v336 + v339++;
                  uint64_t v336 = v340 & (v335 - 1);
                  int64x2_t v338 = *(uint64_t ****)(v334 + 16 * v336);
                  if (v338 == v332)
                  {
                    int v337 = (uint64_t ****)(v334 + 16 * v336);
                    goto LABEL_369;
                  }
                }
              }
              int v337 = (uint64_t ****)(v334 + 16 * v335);
              goto LABEL_369;
            }
            unint64_t v343 = 0;
            v342 = &byte_1CFBCE98E;
LABEL_370:
            size_t v345 = v343 >= v330 ? v330 : v343;
            if (!v345) {
              break;
            }
            uint64_t result = (char *)memcmp(result, v342, v345);
            if (!result) {
              break;
            }
            unint64_t v319 = v8;
            if ((result & 0x80000000) == 0) {
              goto LABEL_383;
            }
          }
          unint64_t v319 = v8;
        }
        while (v330 <= v343);
        do
        {
          while (1)
          {
LABEL_383:
            while (1)
            {
              unint64_t v286 = v317 - 16;
              unsigned int v316 = *(_DWORD *)(v317 - 16);
              if (v16 == v316) {
                break;
              }
              v317 -= 16;
              if (v16 <= v316) {
                goto LABEL_412;
              }
            }
            uint64_t v349 = *(uint64_t ****)(v27 + 48);
            if ((*((unsigned char *)v349 + 23) & 0x10) == 0)
            {
              unint64_t v346 = 0;
              uint64_t result = &byte_1CFBCE98E;
              goto LABEL_395;
            }
            uint64_t v350 = ***v349;
            uint64_t v351 = *(void *)(v350 + 152);
            uint64_t v352 = *(unsigned int *)(v350 + 168);
            if (!v352) {
              goto LABEL_393;
            }
            LODWORD(v353) = (v352 - 1) & ((v349 >> 4) ^ (v349 >> 9));
            int v354 = (uint64_t ****)(v351 + 16 * v353);
            uint64_t v355 = *v354;
            if (*v354 != v349)
            {
              int v356 = 1;
              while (v355 != (uint64_t ***)-4096)
              {
                int v357 = v353 + v356++;
                uint64_t v353 = v357 & (v352 - 1);
                uint64_t v355 = *(uint64_t ****)(v351 + 16 * v353);
                if (v355 == v349)
                {
                  int v354 = (uint64_t ****)(v351 + 16 * v353);
                  goto LABEL_394;
                }
              }
LABEL_393:
              int v354 = (uint64_t ****)(v351 + 16 * v352);
            }
LABEL_394:
            unsigned int v358 = v354[1];
            unint64_t v359 = (unint64_t)*v358;
            uint64_t result = (char *)(v358 + 2);
            unint64_t v346 = v359;
LABEL_395:
            uint64_t v360 = *(uint64_t ****)(*(void *)(v317 - 8) + 48);
            if ((*((unsigned char *)v360 + 23) & 0x10) == 0)
            {
              unint64_t v347 = 0;
              uint64_t v348 = &byte_1CFBCE98E;
              goto LABEL_404;
            }
            uint64_t v361 = ***v360;
            uint64_t v362 = *(void *)(v361 + 152);
            uint64_t v363 = *(unsigned int *)(v361 + 168);
            if (!v363) {
              goto LABEL_402;
            }
            LODWORD(v364) = (v363 - 1) & ((v360 >> 4) ^ (v360 >> 9));
            int v365 = (uint64_t ****)(v362 + 16 * v364);
            BOOL v366 = *v365;
            if (*v365 != v360)
            {
              int v367 = 1;
              while (v366 != (uint64_t ***)-4096)
              {
                int v368 = v364 + v367++;
                uint64_t v364 = v368 & (v363 - 1);
                BOOL v366 = *(uint64_t ****)(v362 + 16 * v364);
                if (v366 == v360)
                {
                  int v365 = (uint64_t ****)(v362 + 16 * v364);
                  goto LABEL_403;
                }
              }
LABEL_402:
              int v365 = (uint64_t ****)(v362 + 16 * v363);
            }
LABEL_403:
            int v369 = v365[1];
            unint64_t v370 = (unint64_t)*v369;
            uint64_t v348 = (char *)(v369 + 2);
            unint64_t v347 = v370;
LABEL_404:
            size_t v371 = v347 >= v346 ? v346 : v347;
            if (!v371) {
              break;
            }
            uint64_t result = (char *)memcmp(result, v348, v371);
            if (!result) {
              break;
            }
            v317 -= 16;
            if ((result & 0x80000000) != 0) {
              goto LABEL_412;
            }
          }
          v317 -= 16;
        }
        while (v346 > v347);
LABEL_412:
        ;
      }
      while (v8 < v286);
LABEL_413:
      BOOL v4 = v8 - 16 >= v767;
      BOOL v5 = v8 - 16 == v767;
      if (v8 - 16 != v767)
      {
        *(_DWORD *)unint64_t v767 = *(_DWORD *)(v8 - 16);
        *(void *)(v767 + 8) = *(void *)(v8 - 8);
      }
      a4 = 0;
      *(_DWORD *)(v8 - 16) = v16;
      *(void *)(v8 - 8) = v27;
    }
    else
    {
LABEL_47:
      uint64_t v761 = a3;
      uint64_t v56 = *(void *)(v9 + 8);
      unint64_t v8 = v9;
      do
      {
        while (1)
        {
          unint64_t v57 = v8;
          unsigned int v59 = *(_DWORD *)(v8 + 16);
          v8 += 16;
          unsigned int v58 = v59;
          BOOL v60 = v59 > v16;
          if (v59 != v16) {
            goto LABEL_75;
          }
          uint64_t v61 = *(uint64_t ****)(*(void *)(v57 + 24) + 48);
          if ((*((unsigned char *)v61 + 23) & 0x10) != 0)
          {
            uint64_t v62 = ***v61;
            uint64_t v63 = *(void *)(v62 + 152);
            uint64_t v64 = *(unsigned int *)(v62 + 168);
            if (!v64) {
              goto LABEL_56;
            }
            LODWORD(v65) = (v64 - 1) & ((v61 >> 4) ^ (v61 >> 9));
            uint64_t v66 = (uint64_t ****)(v63 + 16 * v65);
            uint64_t v67 = *v66;
            if (*v66 != v61)
            {
              int v68 = 1;
              while (v67 != (uint64_t ***)-4096)
              {
                int v69 = v65 + v68++;
                uint64_t v65 = v69 & (v64 - 1);
                uint64_t v67 = *(uint64_t ****)(v63 + 16 * v65);
                if (v67 == v61)
                {
                  uint64_t v66 = (uint64_t ****)(v63 + 16 * v65);
                  goto LABEL_57;
                }
              }
LABEL_56:
              uint64_t v66 = (uint64_t ****)(v63 + 16 * v64);
            }
LABEL_57:
            BOOL v70 = v66[1];
            unint64_t v73 = (unint64_t)*v70;
            unsigned int v71 = (char *)(v70 + 2);
            unint64_t v72 = v73;
            goto LABEL_58;
          }
          unint64_t v72 = 0;
          unsigned int v71 = &byte_1CFBCE98E;
LABEL_58:
          unsigned int v74 = *(uint64_t ****)(v56 + 48);
          if ((*((unsigned char *)v74 + 23) & 0x10) != 0)
          {
            uint64_t v75 = ***v74;
            uint64_t v76 = *(void *)(v75 + 152);
            uint64_t v77 = *(unsigned int *)(v75 + 168);
            if (v77)
            {
              LODWORD(v78) = (v77 - 1) & ((v74 >> 4) ^ (v74 >> 9));
              long long v79 = (uint64_t ****)(v76 + 16 * v78);
              unsigned int v80 = *v79;
              if (*v79 == v74)
              {
LABEL_66:
                uint64_t v83 = v79[1];
                unint64_t v86 = (unint64_t)*v83;
                uint64_t v84 = (char *)(v83 + 2);
                unint64_t v85 = v86;
                goto LABEL_67;
              }
              int v81 = 1;
              while (v80 != (uint64_t ***)-4096)
              {
                int v82 = v78 + v81++;
                uint64_t v78 = v82 & (v77 - 1);
                unsigned int v80 = *(uint64_t ****)(v76 + 16 * v78);
                if (v80 == v74)
                {
                  long long v79 = (uint64_t ****)(v76 + 16 * v78);
                  goto LABEL_66;
                }
              }
            }
            long long v79 = (uint64_t ****)(v76 + 16 * v77);
            goto LABEL_66;
          }
          unint64_t v85 = 0;
          uint64_t v84 = &byte_1CFBCE98E;
LABEL_67:
          size_t v87 = v85 >= v72 ? v72 : v85;
          if (!v87) {
            break;
          }
          int v88 = memcmp(v71, v84, v87);
          if (!v88) {
            break;
          }
          if (v88 < 0) {
            goto LABEL_79;
          }
        }
        BOOL v60 = v72 > v85;
LABEL_75:
        ;
      }
      while (v60);
LABEL_79:
      long long v89 = (_DWORD *)a2;
      if (v57 != v9)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v91 = v89 - 4;
            unsigned int v90 = *(v89 - 4);
            if (v90 == v16) {
              break;
            }
            v89 -= 4;
            if (v90 > v16) {
              goto LABEL_152;
            }
          }
          long long v92 = *(uint64_t ****)(*((void *)v89 - 1) + 48);
          if ((*((unsigned char *)v92 + 23) & 0x10) != 0) {
            break;
          }
          size_t v103 = 0;
          unint64_t v102 = &byte_1CFBCE98E;
LABEL_92:
          unint64_t v105 = *(uint64_t ****)(v56 + 48);
          if ((*((unsigned char *)v105 + 23) & 0x10) == 0)
          {
            size_t v116 = 0;
            int v115 = &byte_1CFBCE98E;
            goto LABEL_101;
          }
          uint64_t v106 = ***v105;
          uint64_t v107 = *(void *)(v106 + 152);
          uint64_t v108 = *(unsigned int *)(v106 + 168);
          if (!v108) {
            goto LABEL_99;
          }
          LODWORD(v109) = (v108 - 1) & ((v105 >> 4) ^ (v105 >> 9));
          unsigned int v110 = (uint64_t ****)(v107 + 16 * v109);
          uint64_t v111 = *v110;
          if (*v110 != v105)
          {
            int v112 = 1;
            while (v111 != (uint64_t ***)-4096)
            {
              int v113 = v109 + v112++;
              uint64_t v109 = v113 & (v108 - 1);
              uint64_t v111 = *(uint64_t ****)(v107 + 16 * v109);
              if (v111 == v105)
              {
                unsigned int v110 = (uint64_t ****)(v107 + 16 * v109);
                goto LABEL_100;
              }
            }
LABEL_99:
            unsigned int v110 = (uint64_t ****)(v107 + 16 * v108);
          }
LABEL_100:
          int v114 = v110[1];
          size_t v117 = (size_t)*v114;
          int v115 = (char *)(v114 + 2);
          size_t v116 = v117;
LABEL_101:
          if (v116 >= v103) {
            size_t v118 = v103;
          }
          else {
            size_t v118 = v116;
          }
          if (v118 && (int v119 = memcmp(v102, v115, v118)) != 0)
          {
            long long v89 = v91;
            if ((v119 & 0x80000000) == 0) {
              goto LABEL_152;
            }
          }
          else
          {
            long long v89 = v91;
            if (v103 > v116) {
              goto LABEL_152;
            }
          }
        }
        uint64_t v93 = ***v92;
        uint64_t v94 = *(void *)(v93 + 152);
        uint64_t v95 = *(unsigned int *)(v93 + 168);
        if (v95)
        {
          LODWORD(v96) = (v95 - 1) & ((v92 >> 4) ^ (v92 >> 9));
          uint64_t v97 = (uint64_t ****)(v94 + 16 * v96);
          unint64_t v98 = *v97;
          if (*v97 != v92)
          {
            int v99 = 1;
            while (v98 != (uint64_t ***)-4096)
            {
              int v100 = v96 + v99++;
              uint64_t v96 = v100 & (v95 - 1);
              unint64_t v98 = *(uint64_t ****)(v94 + 16 * v96);
              if (v98 == v92)
              {
                uint64_t v97 = (uint64_t ****)(v94 + 16 * v96);
                goto LABEL_91;
              }
            }
            goto LABEL_90;
          }
        }
        else
        {
LABEL_90:
          uint64_t v97 = (uint64_t ****)(v94 + 16 * v95);
        }
LABEL_91:
        int v101 = v97[1];
        size_t v104 = (size_t)*v101;
        unint64_t v102 = (char *)(v101 + 2);
        size_t v103 = v104;
        goto LABEL_92;
      }
      uint64_t v91 = (_DWORD *)a2;
      if (v8 < a2)
      {
        int v120 = (_DWORD *)a2;
        while (1)
        {
          while (1)
          {
            uint64_t v91 = v120 - 4;
            unsigned int v121 = *(v120 - 4);
            if (v121 == v16) {
              break;
            }
            BOOL v131 = v121 > v16 || v8 >= (unint64_t)v91;
            v120 -= 4;
            if (v131) {
              goto LABEL_152;
            }
          }
          uint64_t v122 = *(uint64_t ****)(*((void *)v120 - 1) + 48);
          if ((*((unsigned char *)v122 + 23) & 0x10) != 0) {
            break;
          }
          size_t v134 = 0;
          unsigned int v133 = &byte_1CFBCE98E;
LABEL_130:
          uint64_t v136 = *(uint64_t ****)(v56 + 48);
          if ((*((unsigned char *)v136 + 23) & 0x10) == 0)
          {
            size_t v147 = 0;
            unint64_t v146 = &byte_1CFBCE98E;
            goto LABEL_139;
          }
          uint64_t v137 = ***v136;
          uint64_t v138 = *(void *)(v137 + 152);
          uint64_t v139 = *(unsigned int *)(v137 + 168);
          if (!v139) {
            goto LABEL_137;
          }
          LODWORD(v140) = (v139 - 1) & ((v136 >> 4) ^ (v136 >> 9));
          uint64_t v141 = (uint64_t ****)(v138 + 16 * v140);
          char v142 = *v141;
          if (*v141 != v136)
          {
            int v143 = 1;
            while (v142 != (uint64_t ***)-4096)
            {
              int v144 = v140 + v143++;
              uint64_t v140 = v144 & (v139 - 1);
              char v142 = *(uint64_t ****)(v138 + 16 * v140);
              if (v142 == v136)
              {
                uint64_t v141 = (uint64_t ****)(v138 + 16 * v140);
                goto LABEL_138;
              }
            }
LABEL_137:
            uint64_t v141 = (uint64_t ****)(v138 + 16 * v139);
          }
LABEL_138:
          int v145 = v141[1];
          size_t v148 = (size_t)*v145;
          unint64_t v146 = (char *)(v145 + 2);
          size_t v147 = v148;
LABEL_139:
          if (v147 >= v134) {
            size_t v149 = v134;
          }
          else {
            size_t v149 = v147;
          }
          if (v149 && (int v150 = memcmp(v133, v146, v149)) != 0)
          {
            if (v8 >= (unint64_t)v91) {
              goto LABEL_152;
            }
            int v120 = v91;
            if ((v150 & 0x80000000) == 0) {
              goto LABEL_152;
            }
          }
          else
          {
            if (v8 >= (unint64_t)v91) {
              goto LABEL_152;
            }
            int v120 = v91;
            if (v134 > v147) {
              goto LABEL_152;
            }
          }
        }
        uint64_t v123 = ***v122;
        uint64_t v124 = *(void *)(v123 + 152);
        uint64_t v125 = *(unsigned int *)(v123 + 168);
        if (v125)
        {
          LODWORD(v126) = (v125 - 1) & ((v122 >> 4) ^ (v122 >> 9));
          int v127 = (uint64_t ****)(v124 + 16 * v126);
          int v128 = *v127;
          if (*v127 != v122)
          {
            int v129 = 1;
            while (v128 != (uint64_t ***)-4096)
            {
              int v130 = v126 + v129++;
              uint64_t v126 = v130 & (v125 - 1);
              int v128 = *(uint64_t ****)(v124 + 16 * v126);
              if (v128 == v122)
              {
                int v127 = (uint64_t ****)(v124 + 16 * v126);
                goto LABEL_129;
              }
            }
            goto LABEL_128;
          }
        }
        else
        {
LABEL_128:
          int v127 = (uint64_t ****)(v124 + 16 * v125);
        }
LABEL_129:
        uint64_t v132 = v127[1];
        size_t v135 = (size_t)*v132;
        unsigned int v133 = (char *)(v132 + 2);
        size_t v134 = v135;
        goto LABEL_130;
      }
LABEL_152:
      unint64_t v758 = v8;
      if (v8 >= (unint64_t)v91) {
        goto LABEL_219;
      }
      unsigned int v151 = *v91;
      uint64_t v152 = v91;
      while (2)
      {
        uint64_t v153 = v152;
        *(_DWORD *)unint64_t v8 = v151;
        unsigned int *v152 = v58;
        uint64_t v154 = *(void *)(v8 + 8);
        *(void *)(v8 + 8) = *((void *)v152 + 1);
        *((void *)v152 + 1) = v154;
        unint64_t v155 = v8;
        while (2)
        {
          while (2)
          {
            while (1)
            {
              unint64_t v8 = v155 + 16;
              unsigned int v58 = *(_DWORD *)(v155 + 16);
              if (v58 == v16) {
                break;
              }
              v155 += 16;
              if (v58 <= v16) {
                goto LABEL_189;
              }
            }
            unint64_t v156 = *(uint64_t ****)(*(void *)(v155 + 24) + 48);
            if ((*((unsigned char *)v156 + 23) & 0x10) != 0)
            {
              uint64_t v157 = ***v156;
              uint64_t v158 = *(void *)(v157 + 152);
              uint64_t v159 = *(unsigned int *)(v157 + 168);
              if (!v159) {
                goto LABEL_165;
              }
              LODWORD(v160) = (v159 - 1) & ((v156 >> 4) ^ (v156 >> 9));
              uint64_t v161 = (uint64_t ****)(v158 + 16 * v160);
              uint64_t v162 = *v161;
              if (*v161 != v156)
              {
                int v163 = 1;
                while (v162 != (uint64_t ***)-4096)
                {
                  int v164 = v160 + v163++;
                  uint64_t v160 = v164 & (v159 - 1);
                  uint64_t v162 = *(uint64_t ****)(v158 + 16 * v160);
                  if (v162 == v156)
                  {
                    uint64_t v161 = (uint64_t ****)(v158 + 16 * v160);
                    goto LABEL_166;
                  }
                }
LABEL_165:
                uint64_t v161 = (uint64_t ****)(v158 + 16 * v159);
              }
LABEL_166:
              uint64_t v165 = v161[1];
              size_t v168 = (size_t)*v165;
              unint64_t v166 = (char *)(v165 + 2);
              size_t v167 = v168;
            }
            else
            {
              size_t v167 = 0;
              unint64_t v166 = &byte_1CFBCE98E;
            }
            unsigned int v169 = *(uint64_t ****)(v56 + 48);
            if ((*((unsigned char *)v169 + 23) & 0x10) != 0)
            {
              uint64_t v170 = ***v169;
              uint64_t v171 = *(void *)(v170 + 152);
              uint64_t v172 = *(unsigned int *)(v170 + 168);
              if (!v172) {
                goto LABEL_174;
              }
              LODWORD(v173) = (v172 - 1) & ((v169 >> 4) ^ (v169 >> 9));
              uint64_t v174 = (uint64_t ****)(v171 + 16 * v173);
              int v175 = *v174;
              if (*v174 != v169)
              {
                int v176 = 1;
                while (v175 != (uint64_t ***)-4096)
                {
                  int v177 = v173 + v176++;
                  uint64_t v173 = v177 & (v172 - 1);
                  int v175 = *(uint64_t ****)(v171 + 16 * v173);
                  if (v175 == v169)
                  {
                    uint64_t v174 = (uint64_t ****)(v171 + 16 * v173);
                    goto LABEL_175;
                  }
                }
LABEL_174:
                uint64_t v174 = (uint64_t ****)(v171 + 16 * v172);
              }
LABEL_175:
              uint64_t v178 = v174[1];
              size_t v181 = (size_t)*v178;
              uint64_t v179 = (char *)(v178 + 2);
              size_t v180 = v181;
            }
            else
            {
              size_t v180 = 0;
              uint64_t v179 = &byte_1CFBCE98E;
            }
            if (v180 >= v167) {
              size_t v182 = v167;
            }
            else {
              size_t v182 = v180;
            }
            if (v182)
            {
              int v183 = memcmp(v166, v179, v182);
              if (v183)
              {
                unint64_t v155 = v8;
                if (v183 < 0) {
                  goto LABEL_189;
                }
                continue;
              }
            }
            break;
          }
          unint64_t v155 = v8;
          if (v167 > v180) {
            continue;
          }
          break;
        }
LABEL_189:
        while (2)
        {
          while (2)
          {
            while (1)
            {
              uint64_t v152 = v153 - 4;
              unsigned int v151 = *(v153 - 4);
              if (v151 == v16) {
                break;
              }
              v153 -= 4;
              if (v151 > v16) {
                goto LABEL_218;
              }
            }
            uint64_t v188 = *(uint64_t ****)(*((void *)v153 - 1) + 48);
            if ((*((unsigned char *)v188 + 23) & 0x10) != 0)
            {
              uint64_t v189 = ***v188;
              uint64_t v190 = *(void *)(v189 + 152);
              uint64_t v191 = *(unsigned int *)(v189 + 168);
              if (!v191) {
                goto LABEL_199;
              }
              LODWORD(v192) = (v191 - 1) & ((v188 >> 4) ^ (v188 >> 9));
              unsigned int v193 = (uint64_t ****)(v190 + 16 * v192);
              uint64_t v194 = *v193;
              if (*v193 != v188)
              {
                int v195 = 1;
                while (v194 != (uint64_t ***)-4096)
                {
                  int v196 = v192 + v195++;
                  uint64_t v192 = v196 & (v191 - 1);
                  uint64_t v194 = *(uint64_t ****)(v190 + 16 * v192);
                  if (v194 == v188)
                  {
                    unsigned int v193 = (uint64_t ****)(v190 + 16 * v192);
                    goto LABEL_200;
                  }
                }
LABEL_199:
                unsigned int v193 = (uint64_t ****)(v190 + 16 * v191);
              }
LABEL_200:
              unsigned int v197 = v193[1];
              size_t v198 = (size_t)*v197;
              char v185 = (char *)(v197 + 2);
              size_t v184 = v198;
            }
            else
            {
              size_t v184 = 0;
              char v185 = &byte_1CFBCE98E;
            }
            unsigned int v199 = *(uint64_t ****)(v56 + 48);
            if ((*((unsigned char *)v199 + 23) & 0x10) != 0)
            {
              uint64_t v200 = ***v199;
              uint64_t v201 = *(void *)(v200 + 152);
              uint64_t v202 = *(unsigned int *)(v200 + 168);
              if (!v202) {
                goto LABEL_208;
              }
              LODWORD(v203) = (v202 - 1) & ((v199 >> 4) ^ (v199 >> 9));
              int v204 = (uint64_t ****)(v201 + 16 * v203);
              uint64_t v205 = *v204;
              if (*v204 != v199)
              {
                int v206 = 1;
                while (v205 != (uint64_t ***)-4096)
                {
                  int v207 = v203 + v206++;
                  uint64_t v203 = v207 & (v202 - 1);
                  uint64_t v205 = *(uint64_t ****)(v201 + 16 * v203);
                  if (v205 == v199)
                  {
                    int v204 = (uint64_t ****)(v201 + 16 * v203);
                    goto LABEL_209;
                  }
                }
LABEL_208:
                int v204 = (uint64_t ****)(v201 + 16 * v202);
              }
LABEL_209:
              uint64_t v208 = v204[1];
              size_t v209 = (size_t)*v208;
              int v187 = (char *)(v208 + 2);
              size_t v186 = v209;
            }
            else
            {
              size_t v186 = 0;
              int v187 = &byte_1CFBCE98E;
            }
            if (v186 >= v184) {
              size_t v210 = v184;
            }
            else {
              size_t v210 = v186;
            }
            if (v210)
            {
              int v211 = memcmp(v185, v187, v210);
              if (v211)
              {
                v153 -= 4;
                if ((v211 & 0x80000000) == 0) {
                  goto LABEL_218;
                }
                continue;
              }
            }
            break;
          }
          v153 -= 4;
          if (v184 <= v186) {
            continue;
          }
          break;
        }
LABEL_218:
        if (v8 < (unint64_t)v152) {
          continue;
        }
        break;
      }
LABEL_219:
      unsigned int v7 = (char *)v767;
      if (v8 - 16 != v767)
      {
        *(_DWORD *)unint64_t v767 = *(_DWORD *)(v8 - 16);
        *(void *)(v767 + 8) = *(void *)(v8 - 8);
      }
      *(_DWORD *)(v8 - 16) = v16;
      *(void *)(v8 - 8) = v56;
      a3 = v761;
      if (v758 < (unint64_t)v91)
      {
LABEL_224:
        uint64_t result = (char *)sub_1CD24C400(v767, v8 - 16, v761, a4 & 1);
        a4 = 0;
      }
      else
      {
        BOOL v212 = sub_1CD24FAA0(v767, v8 - 16);
        uint64_t result = (char *)sub_1CD24FAA0(v8, a2);
        if (result)
        {
          a2 = v8 - 16;
          if (v212) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v212) {
          goto LABEL_224;
        }
      }
    }
  }
  uint64_t v384 = v9 + 16;
  BOOL v386 = v9 == a2 || v384 == a2;
  if ((a4 & 1) == 0)
  {
    if (v386) {
      return result;
    }
    while (1)
    {
      uint64_t v678 = v9;
      uint64_t v9 = v384;
      unsigned int v679 = *(_DWORD *)(v678 + 16);
      unsigned int v680 = *(_DWORD *)v678;
      if (v679 == *(_DWORD *)v678)
      {
        uint64_t v681 = *(void *)(v678 + 24);
        v682 = *(uint64_t ****)(v681 + 48);
        if ((*((unsigned char *)v682 + 23) & 0x10) != 0)
        {
          uint64_t v683 = ***v682;
          uint64_t v684 = *(void *)(v683 + 152);
          uint64_t v685 = *(unsigned int *)(v683 + 168);
          if (v685)
          {
            LODWORD(v686) = (v685 - 1) & ((v682 >> 4) ^ (v682 >> 9));
            v687 = (uint64_t ****)(v684 + 16 * v686);
            v688 = *v687;
            if (*v687 != v682)
            {
              int v689 = 1;
              do
              {
                if (v688 == (uint64_t ***)-4096) {
                  goto LABEL_785;
                }
                int v690 = v686 + v689++;
                uint64_t v686 = v690 & (v685 - 1);
                v688 = *(uint64_t ****)(v684 + 16 * v686);
              }
              while (v688 != v682);
              v687 = (uint64_t ****)(v684 + 16 * v686);
            }
          }
          else
          {
LABEL_785:
            v687 = (uint64_t ****)(v684 + 16 * v685);
          }
          v691 = v687[1];
          size_t v693 = (size_t)*v691;
          uint64_t result = (char *)(v691 + 2);
          size_t v692 = v693;
        }
        else
        {
          size_t v692 = 0;
          uint64_t result = &byte_1CFBCE98E;
        }
        v694 = *(uint64_t ****)(*(void *)(v678 + 8) + 48);
        if ((*((unsigned char *)v694 + 23) & 0x10) != 0)
        {
          uint64_t v695 = ***v694;
          uint64_t v696 = *(void *)(v695 + 152);
          uint64_t v697 = *(unsigned int *)(v695 + 168);
          if (v697)
          {
            LODWORD(v698) = (v697 - 1) & ((v694 >> 4) ^ (v694 >> 9));
            v699 = (uint64_t ****)(v696 + 16 * v698);
            v700 = *v699;
            if (*v699 != v694)
            {
              int v701 = 1;
              do
              {
                if (v700 == (uint64_t ***)-4096) {
                  goto LABEL_794;
                }
                int v702 = v698 + v701++;
                uint64_t v698 = v702 & (v697 - 1);
                v700 = *(uint64_t ****)(v696 + 16 * v698);
              }
              while (v700 != v694);
              v699 = (uint64_t ****)(v696 + 16 * v698);
            }
          }
          else
          {
LABEL_794:
            v699 = (uint64_t ****)(v696 + 16 * v697);
          }
          v703 = v699[1];
          size_t v706 = (size_t)*v703;
          v704 = (char *)(v703 + 2);
          size_t v705 = v706;
        }
        else
        {
          size_t v705 = 0;
          v704 = &byte_1CFBCE98E;
        }
        if (v705 >= v692) {
          size_t v707 = v692;
        }
        else {
          size_t v707 = v705;
        }
        if (v707)
        {
          uint64_t result = (char *)memcmp(result, v704, v707);
          if (result)
          {
            if ((result & 0x80000000) != 0) {
              goto LABEL_837;
            }
LABEL_804:
            uint64_t v708 = v9;
            uint64_t v709 = v9;
            while (1)
            {
              uint64_t v710 = v708;
              uint64_t v708 = v678;
              *(_DWORD *)uint64_t v710 = v680;
              unsigned int v711 = *(_DWORD *)(v678 - 16);
              v678 -= 16;
              unsigned int v680 = v711;
              *(void *)(v710 + 8) = *(void *)(v678 + 24);
              BOOL v712 = v679 > v711;
              if (v679 == v711)
              {
                v713 = *(uint64_t ****)(v681 + 48);
                if ((*((unsigned char *)v713 + 23) & 0x10) != 0)
                {
                  uint64_t v714 = ***v713;
                  uint64_t v715 = *(void *)(v714 + 152);
                  uint64_t v716 = *(unsigned int *)(v714 + 168);
                  if (v716)
                  {
                    LODWORD(v717) = (v716 - 1) & ((v713 >> 4) ^ (v713 >> 9));
                    v718 = (uint64_t ****)(v715 + 16 * v717);
                    v719 = *v718;
                    if (*v718 != v713)
                    {
                      int v720 = 1;
                      do
                      {
                        if (v719 == (uint64_t ***)-4096) {
                          goto LABEL_813;
                        }
                        int v721 = v717 + v720++;
                        uint64_t v717 = v721 & (v716 - 1);
                        v719 = *(uint64_t ****)(v715 + 16 * v717);
                      }
                      while (v719 != v713);
                      v718 = (uint64_t ****)(v715 + 16 * v717);
                    }
                  }
                  else
                  {
LABEL_813:
                    v718 = (uint64_t ****)(v715 + 16 * v716);
                  }
                  v722 = v718[1];
                  size_t v724 = (size_t)*v722;
                  uint64_t result = (char *)(v722 + 2);
                  size_t v723 = v724;
                }
                else
                {
                  size_t v723 = 0;
                  uint64_t result = &byte_1CFBCE98E;
                }
                v725 = *(uint64_t ****)(*(void *)(v708 - 8) + 48);
                if ((*((unsigned char *)v725 + 23) & 0x10) != 0)
                {
                  uint64_t v726 = ***v725;
                  uint64_t v727 = *(void *)(v726 + 152);
                  uint64_t v728 = *(unsigned int *)(v726 + 168);
                  if (v728)
                  {
                    LODWORD(v729) = (v728 - 1) & ((v725 >> 4) ^ (v725 >> 9));
                    v730 = (uint64_t ****)(v727 + 16 * v729);
                    v731 = *v730;
                    if (*v730 != v725)
                    {
                      int v732 = 1;
                      do
                      {
                        if (v731 == (uint64_t ***)-4096) {
                          goto LABEL_822;
                        }
                        int v733 = v729 + v732++;
                        uint64_t v729 = v733 & (v728 - 1);
                        v731 = *(uint64_t ****)(v727 + 16 * v729);
                      }
                      while (v731 != v725);
                      v730 = (uint64_t ****)(v727 + 16 * v729);
                    }
                  }
                  else
                  {
LABEL_822:
                    v730 = (uint64_t ****)(v727 + 16 * v728);
                  }
                  v734 = v730[1];
                  size_t v737 = (size_t)*v734;
                  v735 = (char *)(v734 + 2);
                  size_t v736 = v737;
                }
                else
                {
                  size_t v736 = 0;
                  v735 = &byte_1CFBCE98E;
                }
                if (v736 >= v723) {
                  size_t v738 = v723;
                }
                else {
                  size_t v738 = v736;
                }
                if (v738)
                {
                  uint64_t result = (char *)memcmp(result, v735, v738);
                  if (result)
                  {
                    uint64_t v9 = v709;
                    if ((result & 0x80000000) != 0) {
                      goto LABEL_836;
                    }
                    continue;
                  }
                }
                BOOL v712 = v723 > v736;
                uint64_t v9 = v709;
              }
              if (!v712)
              {
LABEL_836:
                *(_DWORD *)uint64_t v708 = v679;
                *(void *)(v708 + 8) = v681;
                goto LABEL_837;
              }
            }
          }
        }
        if (v692 > v705) {
          goto LABEL_804;
        }
      }
      else if (v679 > v680)
      {
        uint64_t v681 = *(void *)(v678 + 24);
        goto LABEL_804;
      }
LABEL_837:
      uint64_t v384 = v9 + 16;
      if (v9 + 16 == a2) {
        return result;
      }
    }
  }
  if (v386) {
    return result;
  }
  uint64_t v387 = v9;
  while (2)
  {
    unint64_t v388 = v387;
    uint64_t v387 = v384;
    unsigned int v389 = *(_DWORD *)(v388 + 16);
    unsigned int v390 = *(_DWORD *)v388;
    if (v389 == *(_DWORD *)v388)
    {
      uint64_t v391 = *(void *)(v388 + 24);
      uint64_t v392 = *(uint64_t ****)(v391 + 48);
      if ((*((unsigned char *)v392 + 23) & 0x10) != 0)
      {
        uint64_t v393 = ***v392;
        uint64_t v394 = *(void *)(v393 + 152);
        uint64_t v395 = *(unsigned int *)(v393 + 168);
        if (!v395) {
          goto LABEL_457;
        }
        LODWORD(v396) = (v395 - 1) & ((v392 >> 4) ^ (v392 >> 9));
        v397 = (uint64_t ****)(v394 + 16 * v396);
        v398 = *v397;
        if (*v397 != v392)
        {
          int v399 = 1;
          while (v398 != (uint64_t ***)-4096)
          {
            int v400 = v396 + v399++;
            uint64_t v396 = v400 & (v395 - 1);
            v398 = *(uint64_t ****)(v394 + 16 * v396);
            if (v398 == v392)
            {
              v397 = (uint64_t ****)(v394 + 16 * v396);
              goto LABEL_458;
            }
          }
LABEL_457:
          v397 = (uint64_t ****)(v394 + 16 * v395);
        }
LABEL_458:
        unint64_t v402 = v397[1];
        size_t v404 = (size_t)*v402;
        uint64_t result = (char *)(v402 + 2);
        size_t v403 = v404;
      }
      else
      {
        size_t v403 = 0;
        uint64_t result = &byte_1CFBCE98E;
      }
      uint64_t v401 = *(void *)(v388 + 8);
      unint64_t v405 = *(uint64_t ****)(v401 + 48);
      if ((*((unsigned char *)v405 + 23) & 0x10) != 0)
      {
        uint64_t v406 = ***v405;
        uint64_t v407 = *(void *)(v406 + 152);
        uint64_t v408 = *(unsigned int *)(v406 + 168);
        if (!v408) {
          goto LABEL_466;
        }
        LODWORD(v409) = (v408 - 1) & ((v405 >> 4) ^ (v405 >> 9));
        unsigned int v410 = (uint64_t ****)(v407 + 16 * v409);
        uint64_t v411 = *v410;
        if (*v410 != v405)
        {
          int v412 = 1;
          while (v411 != (uint64_t ***)-4096)
          {
            int v413 = v409 + v412++;
            uint64_t v409 = v413 & (v408 - 1);
            uint64_t v411 = *(uint64_t ****)(v407 + 16 * v409);
            if (v411 == v405)
            {
              unsigned int v410 = (uint64_t ****)(v407 + 16 * v409);
              goto LABEL_467;
            }
          }
LABEL_466:
          unsigned int v410 = (uint64_t ****)(v407 + 16 * v408);
        }
LABEL_467:
        unsigned int v414 = v410[1];
        size_t v417 = (size_t)*v414;
        uint64_t v415 = (char *)(v414 + 2);
        size_t v416 = v417;
      }
      else
      {
        size_t v416 = 0;
        uint64_t v415 = &byte_1CFBCE98E;
      }
      if (v416 >= v403) {
        size_t v418 = v403;
      }
      else {
        size_t v418 = v416;
      }
      if (v418 && (uint64_t result = (char *)memcmp(result, v415, v418), result))
      {
        uint64_t v9 = v767;
        if ((result & 0x80000000) != 0) {
          goto LABEL_515;
        }
      }
      else
      {
        BOOL v46 = v403 > v416;
        uint64_t v9 = v767;
        if (!v46) {
          goto LABEL_515;
        }
      }
    }
    else
    {
      if (v389 <= v390) {
        goto LABEL_515;
      }
      uint64_t v391 = *(void *)(v388 + 24);
      uint64_t v401 = *(void *)(v388 + 8);
    }
    *(_DWORD *)(v388 + 16) = v390;
    *(void *)(v387 + 8) = v401;
    unint64_t v419 = v9;
    if (v388 == v9) {
      goto LABEL_514;
    }
    unint64_t v420 = v388;
    while (2)
    {
      unsigned int v422 = *(_DWORD *)(v420 - 16);
      v420 -= 16;
      unsigned int v421 = v422;
      BOOL v423 = v389 > v422;
      if (v389 != v422)
      {
        if (!v423)
        {
          unint64_t v419 = v388;
          goto LABEL_514;
        }
        uint64_t v433 = *(void *)(v388 - 8);
        goto LABEL_509;
      }
      uint64_t v424 = *(uint64_t ****)(v391 + 48);
      if ((*((unsigned char *)v424 + 23) & 0x10) != 0)
      {
        uint64_t v425 = ***v424;
        uint64_t v426 = *(void *)(v425 + 152);
        uint64_t v427 = *(unsigned int *)(v425 + 168);
        if (!v427) {
          goto LABEL_490;
        }
        LODWORD(v428) = (v427 - 1) & ((v424 >> 4) ^ (v424 >> 9));
        int v429 = (uint64_t ****)(v426 + 16 * v428);
        uint64_t v430 = *v429;
        if (*v429 != v424)
        {
          int v431 = 1;
          while (v430 != (uint64_t ***)-4096)
          {
            int v432 = v428 + v431++;
            uint64_t v428 = v432 & (v427 - 1);
            uint64_t v430 = *(uint64_t ****)(v426 + 16 * v428);
            if (v430 == v424)
            {
              int v429 = (uint64_t ****)(v426 + 16 * v428);
              goto LABEL_491;
            }
          }
LABEL_490:
          int v429 = (uint64_t ****)(v426 + 16 * v427);
        }
LABEL_491:
        unsigned int v434 = v429[1];
        size_t v436 = (size_t)*v434;
        uint64_t result = (char *)(v434 + 2);
        size_t v435 = v436;
      }
      else
      {
        size_t v435 = 0;
        uint64_t result = &byte_1CFBCE98E;
      }
      uint64_t v433 = *(void *)(v388 - 8);
      uint64_t v437 = *(uint64_t ****)(v433 + 48);
      if ((*((unsigned char *)v437 + 23) & 0x10) != 0)
      {
        uint64_t v438 = ***v437;
        uint64_t v439 = *(void *)(v438 + 152);
        uint64_t v440 = *(unsigned int *)(v438 + 168);
        if (!v440) {
          goto LABEL_499;
        }
        LODWORD(v441) = (v440 - 1) & ((v437 >> 4) ^ (v437 >> 9));
        uint64_t v442 = (uint64_t ****)(v439 + 16 * v441);
        v443 = *v442;
        if (*v442 != v437)
        {
          int v444 = 1;
          while (v443 != (uint64_t ***)-4096)
          {
            int v445 = v441 + v444++;
            uint64_t v441 = v445 & (v440 - 1);
            v443 = *(uint64_t ****)(v439 + 16 * v441);
            if (v443 == v437)
            {
              uint64_t v442 = (uint64_t ****)(v439 + 16 * v441);
              goto LABEL_500;
            }
          }
LABEL_499:
          uint64_t v442 = (uint64_t ****)(v439 + 16 * v440);
        }
LABEL_500:
        uint64_t v446 = v442[1];
        size_t v449 = (size_t)*v446;
        v447 = (char *)(v446 + 2);
        size_t v448 = v449;
      }
      else
      {
        size_t v448 = 0;
        v447 = &byte_1CFBCE98E;
      }
      if (v448 >= v435) {
        size_t v450 = v435;
      }
      else {
        size_t v450 = v448;
      }
      if (v450)
      {
        uint64_t result = (char *)memcmp(result, v447, v450);
        if (result)
        {
          if ((result & 0x80000000) != 0) {
            break;
          }
          goto LABEL_509;
        }
      }
      if (v435 > v448)
      {
LABEL_509:
        *(_DWORD *)unint64_t v388 = v421;
        *(void *)(v388 + 8) = v433;
        unint64_t v388 = v420;
        uint64_t v9 = v767;
        if (v420 == v767)
        {
          unint64_t v419 = v767;
          goto LABEL_514;
        }
        continue;
      }
      break;
    }
    unint64_t v419 = v388;
    uint64_t v9 = v767;
LABEL_514:
    *(_DWORD *)unint64_t v419 = v389;
    *(void *)(v419 + 8) = v391;
LABEL_515:
    uint64_t v384 = v387 + 16;
    if (v387 + 16 != a2) {
      continue;
    }
    return result;
  }
}

char *sub_1CD24ECB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v7 = a3;
  uint64_t v8 = a2;
  uint64_t v9 = a1;
  uint64_t result = sub_1CD250080(a1, a2, a3, a4);
  unsigned int v11 = *a5;
  unsigned int v12 = *(_DWORD *)a4;
  if (*a5 == *(_DWORD *)a4)
  {
    uint64_t v13 = *((void *)a5 + 1);
    unsigned int v14 = *(uint64_t ****)(v13 + 48);
    uint64_t v134 = v7;
    if ((*((unsigned char *)v14 + 23) & 0x10) == 0)
    {
      uint64_t v24 = v8;
      uint64_t v25 = v9;
      size_t v27 = 0;
      uint64_t result = &byte_1CFBCE98E;
LABEL_13:
      uint64_t v23 = *(void *)(a4 + 8);
      size_t v29 = *(uint64_t ****)(v23 + 48);
      if ((*((unsigned char *)v29 + 23) & 0x10) == 0)
      {
        size_t v40 = 0;
        int v39 = &byte_1CFBCE98E;
LABEL_22:
        if (v40 >= v27) {
          size_t v42 = v27;
        }
        else {
          size_t v42 = v40;
        }
        if (v42 && (uint64_t result = (char *)memcmp(result, v39, v42), result))
        {
          uint64_t v9 = v25;
          uint64_t v8 = v24;
          uint64_t v7 = v134;
          if ((result & 0x80000000) != 0) {
            return result;
          }
        }
        else
        {
          BOOL v43 = v27 > v40;
          uint64_t v9 = v25;
          uint64_t v8 = v24;
          uint64_t v7 = v134;
          if (!v43) {
            return result;
          }
        }
        goto LABEL_31;
      }
      uint64_t v30 = ***v29;
      uint64_t v31 = *(void *)(v30 + 152);
      uint64_t v32 = *(unsigned int *)(v30 + 168);
      if (v32)
      {
        LODWORD(v33) = (v32 - 1) & ((v29 >> 4) ^ (v29 >> 9));
        uint64_t v34 = (uint64_t ****)(v31 + 16 * v33);
        uint64_t v35 = *v34;
        if (*v34 == v29)
        {
LABEL_21:
          int v38 = v34[1];
          size_t v41 = (size_t)*v38;
          int v39 = (char *)(v38 + 2);
          size_t v40 = v41;
          goto LABEL_22;
        }
        int v36 = 1;
        while (v35 != (uint64_t ***)-4096)
        {
          int v37 = v33 + v36++;
          uint64_t v33 = v37 & (v32 - 1);
          uint64_t v35 = *(uint64_t ****)(v31 + 16 * v33);
          if (v35 == v29)
          {
            uint64_t v34 = (uint64_t ****)(v31 + 16 * v33);
            goto LABEL_21;
          }
        }
      }
      uint64_t v34 = (uint64_t ****)(v31 + 16 * v32);
      goto LABEL_21;
    }
    uint64_t v15 = ***v14;
    uint64_t v16 = *(void *)(v15 + 152);
    uint64_t v17 = *(unsigned int *)(v15 + 168);
    if (v17)
    {
      LODWORD(v18) = (v17 - 1) & ((v14 >> 4) ^ (v14 >> 9));
      uint64_t v19 = (uint64_t ****)(v16 + 16 * v18);
      uint64_t v20 = *v19;
      if (*v19 == v14)
      {
LABEL_12:
        uint64_t v24 = v8;
        uint64_t v25 = v9;
        int v26 = v19[1];
        size_t v28 = (size_t)*v26;
        uint64_t result = (char *)(v26 + 2);
        size_t v27 = v28;
        goto LABEL_13;
      }
      int v21 = 1;
      while (v20 != (uint64_t ***)-4096)
      {
        int v22 = v18 + v21++;
        uint64_t v18 = v22 & (v17 - 1);
        uint64_t v20 = *(uint64_t ****)(v16 + 16 * v18);
        if (v20 == v14)
        {
          uint64_t v19 = (uint64_t ****)(v16 + 16 * v18);
          goto LABEL_12;
        }
      }
    }
    uint64_t v19 = (uint64_t ****)(v16 + 16 * v17);
    goto LABEL_12;
  }
  if (v11 <= v12) {
    return result;
  }
  uint64_t v23 = *(void *)(a4 + 8);
  uint64_t v13 = *((void *)a5 + 1);
LABEL_31:
  *(_DWORD *)a4 = v11;
  *a5 = v12;
  *(void *)(a4 + 8) = v13;
  *((void *)a5 + 1) = v23;
  unsigned int v44 = *(_DWORD *)a4;
  unsigned int v45 = *(_DWORD *)v7;
  if (*(_DWORD *)a4 != *(_DWORD *)v7)
  {
    if (v44 <= v45) {
      return result;
    }
    uint64_t v56 = *(void *)(v7 + 8);
    uint64_t v46 = *(void *)(a4 + 8);
    goto LABEL_60;
  }
  uint64_t v46 = *(void *)(a4 + 8);
  uint64_t v47 = *(uint64_t ****)(v46 + 48);
  if ((*((unsigned char *)v47 + 23) & 0x10) != 0)
  {
    uint64_t v48 = ***v47;
    uint64_t v49 = *(void *)(v48 + 152);
    uint64_t v50 = *(unsigned int *)(v48 + 168);
    if (v50)
    {
      LODWORD(v51) = (v50 - 1) & ((v47 >> 4) ^ (v47 >> 9));
      unsigned int v52 = (uint64_t ****)(v49 + 16 * v51);
      unsigned int v53 = *v52;
      if (*v52 == v47)
      {
LABEL_42:
        unint64_t v57 = v52[1];
        size_t v59 = (size_t)*v57;
        uint64_t result = (char *)(v57 + 2);
        size_t v58 = v59;
        goto LABEL_43;
      }
      int v54 = 1;
      while (v53 != (uint64_t ***)-4096)
      {
        int v55 = v51 + v54++;
        uint64_t v51 = v55 & (v50 - 1);
        unsigned int v53 = *(uint64_t ****)(v49 + 16 * v51);
        if (v53 == v47)
        {
          unsigned int v52 = (uint64_t ****)(v49 + 16 * v51);
          goto LABEL_42;
        }
      }
    }
    unsigned int v52 = (uint64_t ****)(v49 + 16 * v50);
    goto LABEL_42;
  }
  size_t v58 = 0;
  uint64_t result = &byte_1CFBCE98E;
LABEL_43:
  uint64_t v56 = *(void *)(v7 + 8);
  BOOL v60 = *(uint64_t ****)(v56 + 48);
  if ((*((unsigned char *)v60 + 23) & 0x10) != 0)
  {
    uint64_t v61 = ***v60;
    uint64_t v62 = *(void *)(v61 + 152);
    uint64_t v63 = *(unsigned int *)(v61 + 168);
    if (v63)
    {
      LODWORD(v64) = (v63 - 1) & ((v60 >> 4) ^ (v60 >> 9));
      uint64_t v65 = (uint64_t ****)(v62 + 16 * v64);
      uint64_t v66 = *v65;
      if (*v65 == v60)
      {
LABEL_51:
        int v69 = v65[1];
        size_t v72 = (size_t)*v69;
        BOOL v70 = (char *)(v69 + 2);
        size_t v71 = v72;
        goto LABEL_52;
      }
      int v67 = 1;
      while (v66 != (uint64_t ***)-4096)
      {
        int v68 = v64 + v67++;
        uint64_t v64 = v68 & (v63 - 1);
        uint64_t v66 = *(uint64_t ****)(v62 + 16 * v64);
        if (v66 == v60)
        {
          uint64_t v65 = (uint64_t ****)(v62 + 16 * v64);
          goto LABEL_51;
        }
      }
    }
    uint64_t v65 = (uint64_t ****)(v62 + 16 * v63);
    goto LABEL_51;
  }
  size_t v71 = 0;
  BOOL v70 = &byte_1CFBCE98E;
LABEL_52:
  if (v71 >= v58) {
    size_t v73 = v58;
  }
  else {
    size_t v73 = v71;
  }
  if (v73 && (uint64_t result = (char *)memcmp(result, v70, v73), result))
  {
    if ((result & 0x80000000) != 0) {
      return result;
    }
  }
  else if (v58 <= v71)
  {
    return result;
  }
LABEL_60:
  *(_DWORD *)uint64_t v7 = v44;
  *(_DWORD *)a4 = v45;
  *(void *)(v7 + 8) = v46;
  *(void *)(a4 + 8) = v56;
  unsigned int v74 = *(_DWORD *)v7;
  unsigned int v75 = *(_DWORD *)v8;
  if (*(_DWORD *)v7 != *(_DWORD *)v8)
  {
    if (v74 <= v75) {
      return result;
    }
    uint64_t v86 = *(void *)(v8 + 8);
    uint64_t v76 = *(void *)(v7 + 8);
    goto LABEL_89;
  }
  uint64_t v76 = *(void *)(v7 + 8);
  uint64_t v77 = *(uint64_t ****)(v76 + 48);
  if ((*((unsigned char *)v77 + 23) & 0x10) != 0)
  {
    uint64_t v78 = ***v77;
    uint64_t v79 = *(void *)(v78 + 152);
    uint64_t v80 = *(unsigned int *)(v78 + 168);
    if (v80)
    {
      LODWORD(v81) = (v80 - 1) & ((v77 >> 4) ^ (v77 >> 9));
      int v82 = (uint64_t ****)(v79 + 16 * v81);
      uint64_t v83 = *v82;
      if (*v82 == v77)
      {
LABEL_71:
        size_t v87 = v82[1];
        size_t v89 = (size_t)*v87;
        uint64_t result = (char *)(v87 + 2);
        size_t v88 = v89;
        goto LABEL_72;
      }
      int v84 = 1;
      while (v83 != (uint64_t ***)-4096)
      {
        int v85 = v81 + v84++;
        uint64_t v81 = v85 & (v80 - 1);
        uint64_t v83 = *(uint64_t ****)(v79 + 16 * v81);
        if (v83 == v77)
        {
          int v82 = (uint64_t ****)(v79 + 16 * v81);
          goto LABEL_71;
        }
      }
    }
    int v82 = (uint64_t ****)(v79 + 16 * v80);
    goto LABEL_71;
  }
  size_t v88 = 0;
  uint64_t result = &byte_1CFBCE98E;
LABEL_72:
  uint64_t v86 = *(void *)(v8 + 8);
  unsigned int v90 = *(uint64_t ****)(v86 + 48);
  if ((*((unsigned char *)v90 + 23) & 0x10) != 0)
  {
    uint64_t v91 = ***v90;
    uint64_t v92 = *(void *)(v91 + 152);
    uint64_t v93 = *(unsigned int *)(v91 + 168);
    if (v93)
    {
      LODWORD(v94) = (v93 - 1) & ((v90 >> 4) ^ (v90 >> 9));
      uint64_t v95 = (uint64_t ****)(v92 + 16 * v94);
      uint64_t v96 = *v95;
      if (*v95 == v90)
      {
LABEL_80:
        int v99 = v95[1];
        size_t v102 = (size_t)*v99;
        int v100 = (char *)(v99 + 2);
        size_t v101 = v102;
        goto LABEL_81;
      }
      int v97 = 1;
      while (v96 != (uint64_t ***)-4096)
      {
        int v98 = v94 + v97++;
        uint64_t v94 = v98 & (v93 - 1);
        uint64_t v96 = *(uint64_t ****)(v92 + 16 * v94);
        if (v96 == v90)
        {
          uint64_t v95 = (uint64_t ****)(v92 + 16 * v94);
          goto LABEL_80;
        }
      }
    }
    uint64_t v95 = (uint64_t ****)(v92 + 16 * v93);
    goto LABEL_80;
  }
  size_t v101 = 0;
  int v100 = &byte_1CFBCE98E;
LABEL_81:
  if (v101 >= v88) {
    size_t v103 = v88;
  }
  else {
    size_t v103 = v101;
  }
  if (v103 && (uint64_t result = (char *)memcmp(result, v100, v103), result))
  {
    if ((result & 0x80000000) != 0) {
      return result;
    }
  }
  else if (v88 <= v101)
  {
    return result;
  }
LABEL_89:
  *(_DWORD *)uint64_t v8 = v74;
  *(_DWORD *)uint64_t v7 = v75;
  *(void *)(v8 + 8) = v76;
  *(void *)(v7 + 8) = v86;
  unsigned int v104 = *(_DWORD *)v8;
  unsigned int v105 = *(_DWORD *)v9;
  if (*(_DWORD *)v8 != *(_DWORD *)v9)
  {
    if (v104 <= v105) {
      return result;
    }
    uint64_t v116 = *(void *)(v9 + 8);
    uint64_t v106 = *(void *)(v8 + 8);
    goto LABEL_120;
  }
  uint64_t v106 = *(void *)(v8 + 8);
  uint64_t v107 = *(uint64_t ****)(v106 + 48);
  if ((*((unsigned char *)v107 + 23) & 0x10) != 0)
  {
    uint64_t v108 = ***v107;
    uint64_t v109 = *(void *)(v108 + 152);
    uint64_t v110 = *(unsigned int *)(v108 + 168);
    if (v110)
    {
      LODWORD(v111) = (v110 - 1) & ((v107 >> 4) ^ (v107 >> 9));
      int v112 = (uint64_t ****)(v109 + 16 * v111);
      int v113 = *v112;
      if (*v112 == v107)
      {
LABEL_102:
        size_t v117 = v112[1];
        size_t v119 = (size_t)*v117;
        uint64_t result = (char *)(v117 + 2);
        size_t v118 = v119;
        goto LABEL_103;
      }
      int v114 = 1;
      while (v113 != (uint64_t ***)-4096)
      {
        int v115 = v111 + v114++;
        uint64_t v111 = v115 & (v110 - 1);
        int v113 = *(uint64_t ****)(v109 + 16 * v111);
        if (v113 == v107)
        {
          int v112 = (uint64_t ****)(v109 + 16 * v111);
          goto LABEL_102;
        }
      }
    }
    int v112 = (uint64_t ****)(v109 + 16 * v110);
    goto LABEL_102;
  }
  size_t v118 = 0;
  uint64_t result = &byte_1CFBCE98E;
LABEL_103:
  uint64_t v116 = *(void *)(v9 + 8);
  int v120 = *(uint64_t ****)(v116 + 48);
  if ((*((unsigned char *)v120 + 23) & 0x10) != 0)
  {
    uint64_t v121 = ***v120;
    uint64_t v122 = *(void *)(v121 + 152);
    uint64_t v123 = *(unsigned int *)(v121 + 168);
    if (v123)
    {
      LODWORD(v124) = (v123 - 1) & ((v120 >> 4) ^ (v120 >> 9));
      uint64_t v125 = (uint64_t ****)(v122 + 16 * v124);
      uint64_t v126 = *v125;
      if (*v125 == v120)
      {
LABEL_111:
        int v129 = v125[1];
        size_t v132 = (size_t)*v129;
        int v130 = (char *)(v129 + 2);
        size_t v131 = v132;
        goto LABEL_112;
      }
      int v127 = 1;
      while (v126 != (uint64_t ***)-4096)
      {
        int v128 = v124 + v127++;
        uint64_t v124 = v128 & (v123 - 1);
        uint64_t v126 = *(uint64_t ****)(v122 + 16 * v124);
        if (v126 == v120)
        {
          uint64_t v125 = (uint64_t ****)(v122 + 16 * v124);
          goto LABEL_111;
        }
      }
    }
    uint64_t v125 = (uint64_t ****)(v122 + 16 * v123);
    goto LABEL_111;
  }
  size_t v131 = 0;
  int v130 = &byte_1CFBCE98E;
LABEL_112:
  if (v131 >= v118) {
    size_t v133 = v118;
  }
  else {
    size_t v133 = v131;
  }
  if (v133 && (uint64_t result = (char *)memcmp(result, v130, v133), result))
  {
    if ((result & 0x80000000) != 0) {
      return result;
    }
  }
  else if (v118 <= v131)
  {
    return result;
  }
LABEL_120:
  *(_DWORD *)uint64_t v9 = v104;
  *(_DWORD *)uint64_t v8 = v105;
  *(void *)(v9 + 8) = v106;
  *(void *)(v8 + 8) = v116;
  return result;
}

char *sub_1CD24F32C(char *result, unsigned int *a2, unsigned int *a3)
{
  BOOL v5 = result;
  unsigned int v6 = *a2;
  unsigned int v7 = *(_DWORD *)result;
  BOOL v8 = *a2 > *(_DWORD *)result;
  if (*a2 != *(_DWORD *)result) {
    goto LABEL_35;
  }
  uint64_t v9 = *(uint64_t ****)(*((void *)a2 + 1) + 48);
  if ((*((unsigned char *)v9 + 23) & 0x10) != 0)
  {
    uint64_t v10 = ***v9;
    uint64_t v11 = *(void *)(v10 + 152);
    uint64_t v12 = *(unsigned int *)(v10 + 168);
    if (v12)
    {
      LODWORD(v13) = (v12 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      unsigned int v14 = (uint64_t ****)(v11 + 16 * v13);
      uint64_t v15 = *v14;
      if (*v14 == v9)
      {
LABEL_10:
        uint64_t v18 = v14[1];
        size_t v20 = (size_t)*v18;
        uint64_t result = (char *)(v18 + 2);
        size_t v19 = v20;
        goto LABEL_11;
      }
      int v16 = 1;
      while (v15 != (uint64_t ***)-4096)
      {
        int v17 = v13 + v16++;
        uint64_t v13 = v17 & (v12 - 1);
        uint64_t v15 = *(uint64_t ****)(v11 + 16 * v13);
        if (v15 == v9)
        {
          unsigned int v14 = (uint64_t ****)(v11 + 16 * v13);
          goto LABEL_10;
        }
      }
    }
    unsigned int v14 = (uint64_t ****)(v11 + 16 * v12);
    goto LABEL_10;
  }
  size_t v19 = 0;
  uint64_t result = &byte_1CFBCE98E;
LABEL_11:
  int v21 = *(uint64_t ****)(*((void *)v5 + 1) + 48);
  if ((*((unsigned char *)v21 + 23) & 0x10) == 0)
  {
    size_t v32 = 0;
    uint64_t v31 = &byte_1CFBCE98E;
    goto LABEL_20;
  }
  uint64_t v22 = ***v21;
  uint64_t v23 = *(void *)(v22 + 152);
  uint64_t v24 = *(unsigned int *)(v22 + 168);
  if (!v24) {
    goto LABEL_18;
  }
  LODWORD(v25) = (v24 - 1) & ((v21 >> 4) ^ (v21 >> 9));
  int v26 = (uint64_t ****)(v23 + 16 * v25);
  size_t v27 = *v26;
  if (*v26 != v21)
  {
    int v28 = 1;
    while (v27 != (uint64_t ***)-4096)
    {
      int v29 = v25 + v28++;
      uint64_t v25 = v29 & (v24 - 1);
      size_t v27 = *(uint64_t ****)(v23 + 16 * v25);
      if (v27 == v21)
      {
        int v26 = (uint64_t ****)(v23 + 16 * v25);
        goto LABEL_19;
      }
    }
LABEL_18:
    int v26 = (uint64_t ****)(v23 + 16 * v24);
  }
LABEL_19:
  uint64_t v30 = v26[1];
  size_t v33 = (size_t)*v30;
  uint64_t v31 = (char *)(v30 + 2);
  size_t v32 = v33;
LABEL_20:
  if (v32 >= v19) {
    size_t v34 = v19;
  }
  else {
    size_t v34 = v32;
  }
  if (v34)
  {
    uint64_t result = (char *)memcmp(result, v31, v34);
    if (result)
    {
      if ((result & 0x80000000) != 0) {
        goto LABEL_26;
      }
LABEL_37:
      unsigned int v46 = *a3;
      if (*a3 != v6)
      {
        if (v46 <= v6)
        {
          uint64_t v57 = *((void *)a2 + 1);
          goto LABEL_93;
        }
        goto LABEL_102;
      }
      uint64_t v47 = *(uint64_t ****)(*((void *)a3 + 1) + 48);
      if ((*((unsigned char *)v47 + 23) & 0x10) == 0)
      {
        size_t v71 = 0;
        uint64_t result = &byte_1CFBCE98E;
LABEL_60:
        uint64_t v57 = *((void *)a2 + 1);
        size_t v73 = *(uint64_t ****)(v57 + 48);
        if ((*((unsigned char *)v73 + 23) & 0x10) == 0)
        {
          size_t v102 = 0;
          size_t v101 = &byte_1CFBCE98E;
LABEL_87:
          if (v102 >= v71) {
            size_t v104 = v71;
          }
          else {
            size_t v104 = v102;
          }
          if (v104 && (uint64_t result = (char *)memcmp(result, v101, v104), result))
          {
            if ((result & 0x80000000) != 0) {
              goto LABEL_93;
            }
          }
          else if (v71 <= v102)
          {
LABEL_93:
            *(_DWORD *)BOOL v5 = v6;
            *a2 = v7;
            uint64_t v105 = *((void *)v5 + 1);
            *((void *)v5 + 1) = v57;
            *((void *)a2 + 1) = v105;
            uint64_t v106 = (uint64_t *)(a2 + 2);
            unsigned int v107 = *a3;
            BOOL v108 = *a3 > v7;
            if (*a3 != v7) {
              goto LABEL_144;
            }
            uint64_t v109 = *(uint64_t ****)(*((void *)a3 + 1) + 48);
            if ((*((unsigned char *)v109 + 23) & 0x10) == 0)
            {
              size_t v131 = 0;
              uint64_t result = &byte_1CFBCE98E;
LABEL_114:
              size_t v133 = *(uint64_t ****)(v105 + 48);
              if ((*((unsigned char *)v133 + 23) & 0x10) == 0)
              {
                size_t v149 = 0;
                size_t v148 = &byte_1CFBCE98E;
                goto LABEL_136;
              }
              uint64_t v134 = ***v133;
              uint64_t v135 = *(void *)(v134 + 152);
              uint64_t v136 = *(unsigned int *)(v134 + 168);
              if (v136)
              {
                LODWORD(v137) = (v136 - 1) & ((v133 >> 4) ^ (v133 >> 9));
                uint64_t v138 = (uint64_t ****)(v135 + 16 * v137);
                uint64_t v139 = *v138;
                if (*v138 == v133)
                {
LABEL_135:
                  size_t v147 = v138[1];
                  size_t v150 = (size_t)*v147;
                  size_t v148 = (char *)(v147 + 2);
                  size_t v149 = v150;
LABEL_136:
                  if (v149 >= v131) {
                    size_t v151 = v131;
                  }
                  else {
                    size_t v151 = v149;
                  }
                  if (v151)
                  {
                    uint64_t result = (char *)memcmp(result, v148, v151);
                    if (result)
                    {
                      if ((result & 0x80000000) != 0) {
                        return result;
                      }
LABEL_146:
                      *a2 = v107;
                      goto LABEL_147;
                    }
                  }
                  BOOL v108 = v131 > v149;
LABEL_144:
                  if (!v108) {
                    return result;
                  }
                  goto LABEL_146;
                }
                int v140 = 1;
                while (v139 != (uint64_t ***)-4096)
                {
                  int v141 = v137 + v140++;
                  uint64_t v137 = v141 & (v136 - 1);
                  uint64_t v139 = *(uint64_t ****)(v135 + 16 * v137);
                  if (v139 == v133)
                  {
                    uint64_t v138 = (uint64_t ****)(v135 + 16 * v137);
                    goto LABEL_135;
                  }
                }
              }
              uint64_t v138 = (uint64_t ****)(v135 + 16 * v136);
              goto LABEL_135;
            }
            uint64_t v110 = ***v109;
            uint64_t v111 = *(void *)(v110 + 152);
            uint64_t v112 = *(unsigned int *)(v110 + 168);
            if (v112)
            {
              LODWORD(v113) = (v112 - 1) & ((v109 >> 4) ^ (v109 >> 9));
              int v114 = (uint64_t ****)(v111 + 16 * v113);
              int v115 = *v114;
              if (*v114 == v109)
              {
LABEL_113:
                int v130 = v114[1];
                size_t v132 = (size_t)*v130;
                uint64_t result = (char *)(v130 + 2);
                size_t v131 = v132;
                goto LABEL_114;
              }
              int v116 = 1;
              while (v115 != (uint64_t ***)-4096)
              {
                int v117 = v113 + v116++;
                uint64_t v113 = v117 & (v112 - 1);
                int v115 = *(uint64_t ****)(v111 + 16 * v113);
                if (v115 == v109)
                {
                  int v114 = (uint64_t ****)(v111 + 16 * v113);
                  goto LABEL_113;
                }
              }
            }
            int v114 = (uint64_t ****)(v111 + 16 * v112);
            goto LABEL_113;
          }
LABEL_102:
          *(_DWORD *)BOOL v5 = v46;
          uint64_t v106 = (uint64_t *)(v5 + 8);
LABEL_147:
          *a3 = v7;
          size_t v87 = (int *)(a3 + 2);
          goto LABEL_148;
        }
        uint64_t v74 = ***v73;
        uint64_t v75 = *(void *)(v74 + 152);
        uint64_t v76 = *(unsigned int *)(v74 + 168);
        if (v76)
        {
          LODWORD(v77) = (v76 - 1) & ((v73 >> 4) ^ (v73 >> 9));
          uint64_t v78 = (uint64_t ****)(v75 + 16 * v77);
          uint64_t v79 = *v78;
          if (*v78 == v73)
          {
LABEL_86:
            int v100 = v78[1];
            size_t v103 = (size_t)*v100;
            size_t v101 = (char *)(v100 + 2);
            size_t v102 = v103;
            goto LABEL_87;
          }
          int v80 = 1;
          while (v79 != (uint64_t ***)-4096)
          {
            int v81 = v77 + v80++;
            uint64_t v77 = v81 & (v76 - 1);
            uint64_t v79 = *(uint64_t ****)(v75 + 16 * v77);
            if (v79 == v73)
            {
              uint64_t v78 = (uint64_t ****)(v75 + 16 * v77);
              goto LABEL_86;
            }
          }
        }
        uint64_t v78 = (uint64_t ****)(v75 + 16 * v76);
        goto LABEL_86;
      }
      uint64_t v48 = ***v47;
      uint64_t v49 = *(void *)(v48 + 152);
      uint64_t v50 = *(unsigned int *)(v48 + 168);
      if (v50)
      {
        LODWORD(v51) = (v50 - 1) & ((v47 >> 4) ^ (v47 >> 9));
        unsigned int v52 = (uint64_t ****)(v49 + 16 * v51);
        unsigned int v53 = *v52;
        if (*v52 == v47)
        {
LABEL_59:
          BOOL v70 = v52[1];
          size_t v72 = (size_t)*v70;
          uint64_t result = (char *)(v70 + 2);
          size_t v71 = v72;
          goto LABEL_60;
        }
        int v54 = 1;
        while (v53 != (uint64_t ***)-4096)
        {
          int v55 = v51 + v54++;
          uint64_t v51 = v55 & (v50 - 1);
          unsigned int v53 = *(uint64_t ****)(v49 + 16 * v51);
          if (v53 == v47)
          {
            unsigned int v52 = (uint64_t ****)(v49 + 16 * v51);
            goto LABEL_59;
          }
        }
      }
      unsigned int v52 = (uint64_t ****)(v49 + 16 * v50);
      goto LABEL_59;
    }
  }
  BOOL v8 = v19 > v32;
LABEL_35:
  if (v8) {
    goto LABEL_37;
  }
LABEL_26:
  unsigned int v35 = *a3;
  if (*a3 != v6)
  {
    if (v35 <= v6) {
      return result;
    }
    uint64_t v56 = *((void *)a2 + 1);
    uint64_t v36 = *((void *)a3 + 1);
    goto LABEL_77;
  }
  uint64_t v36 = *((void *)a3 + 1);
  int v37 = *(uint64_t ****)(v36 + 48);
  if ((*((unsigned char *)v37 + 23) & 0x10) != 0)
  {
    uint64_t v38 = ***v37;
    uint64_t v39 = *(void *)(v38 + 152);
    uint64_t v40 = *(unsigned int *)(v38 + 168);
    if (v40)
    {
      LODWORD(v41) = (v40 - 1) & ((v37 >> 4) ^ (v37 >> 9));
      size_t v42 = (uint64_t ****)(v39 + 16 * v41);
      BOOL v43 = *v42;
      if (*v42 == v37)
      {
LABEL_50:
        size_t v58 = v42[1];
        size_t v60 = (size_t)*v58;
        uint64_t result = (char *)(v58 + 2);
        size_t v59 = v60;
        goto LABEL_51;
      }
      int v44 = 1;
      while (v43 != (uint64_t ***)-4096)
      {
        int v45 = v41 + v44++;
        uint64_t v41 = v45 & (v40 - 1);
        BOOL v43 = *(uint64_t ****)(v39 + 16 * v41);
        if (v43 == v37)
        {
          size_t v42 = (uint64_t ****)(v39 + 16 * v41);
          goto LABEL_50;
        }
      }
    }
    size_t v42 = (uint64_t ****)(v39 + 16 * v40);
    goto LABEL_50;
  }
  size_t v59 = 0;
  uint64_t result = &byte_1CFBCE98E;
LABEL_51:
  uint64_t v56 = *((void *)a2 + 1);
  uint64_t v61 = *(uint64_t ****)(v56 + 48);
  if ((*((unsigned char *)v61 + 23) & 0x10) != 0)
  {
    uint64_t v62 = ***v61;
    uint64_t v63 = *(void *)(v62 + 152);
    uint64_t v64 = *(unsigned int *)(v62 + 168);
    if (v64)
    {
      LODWORD(v65) = (v64 - 1) & ((v61 >> 4) ^ (v61 >> 9));
      uint64_t v66 = (uint64_t ****)(v63 + 16 * v65);
      int v67 = *v66;
      if (*v66 == v61)
      {
LABEL_68:
        int v82 = v66[1];
        size_t v85 = (size_t)*v82;
        uint64_t v83 = (char *)(v82 + 2);
        size_t v84 = v85;
        goto LABEL_69;
      }
      int v68 = 1;
      while (v67 != (uint64_t ***)-4096)
      {
        int v69 = v65 + v68++;
        uint64_t v65 = v69 & (v64 - 1);
        int v67 = *(uint64_t ****)(v63 + 16 * v65);
        if (v67 == v61)
        {
          uint64_t v66 = (uint64_t ****)(v63 + 16 * v65);
          goto LABEL_68;
        }
      }
    }
    uint64_t v66 = (uint64_t ****)(v63 + 16 * v64);
    goto LABEL_68;
  }
  size_t v84 = 0;
  uint64_t v83 = &byte_1CFBCE98E;
LABEL_69:
  if (v84 >= v59) {
    size_t v86 = v59;
  }
  else {
    size_t v86 = v84;
  }
  if (v86 && (uint64_t result = (char *)memcmp(result, v83, v86), result))
  {
    if ((result & 0x80000000) != 0) {
      return result;
    }
  }
  else if (v59 <= v84)
  {
    return result;
  }
LABEL_77:
  *a2 = v35;
  *a3 = v6;
  *((void *)a2 + 1) = v36;
  size_t v87 = (int *)(a2 + 2);
  *((void *)a3 + 1) = v56;
  unsigned int v88 = *a2;
  unsigned int v89 = *(_DWORD *)v5;
  BOOL v90 = *a2 > *(_DWORD *)v5;
  if (*a2 != *(_DWORD *)v5) {
    goto LABEL_131;
  }
  uint64_t v91 = *(uint64_t ****)(*(void *)v87 + 48);
  if ((*((unsigned char *)v91 + 23) & 0x10) != 0)
  {
    uint64_t v92 = ***v91;
    uint64_t v93 = *(void *)(v92 + 152);
    uint64_t v94 = *(unsigned int *)(v92 + 168);
    if (v94)
    {
      LODWORD(v95) = (v94 - 1) & ((v91 >> 4) ^ (v91 >> 9));
      uint64_t v96 = (uint64_t ****)(v93 + 16 * v95);
      int v97 = *v96;
      if (*v96 == v91)
      {
LABEL_104:
        size_t v118 = v96[1];
        size_t v120 = (size_t)*v118;
        uint64_t result = (char *)(v118 + 2);
        size_t v119 = v120;
        goto LABEL_105;
      }
      int v98 = 1;
      while (v97 != (uint64_t ***)-4096)
      {
        int v99 = v95 + v98++;
        uint64_t v95 = v99 & (v94 - 1);
        int v97 = *(uint64_t ****)(v93 + 16 * v95);
        if (v97 == v91)
        {
          uint64_t v96 = (uint64_t ****)(v93 + 16 * v95);
          goto LABEL_104;
        }
      }
    }
    uint64_t v96 = (uint64_t ****)(v93 + 16 * v94);
    goto LABEL_104;
  }
  size_t v119 = 0;
  uint64_t result = &byte_1CFBCE98E;
LABEL_105:
  uint64_t v121 = *(uint64_t ****)(*((void *)v5 + 1) + 48);
  if ((*((unsigned char *)v121 + 23) & 0x10) != 0)
  {
    uint64_t v122 = ***v121;
    uint64_t v123 = *(void *)(v122 + 152);
    uint64_t v124 = *(unsigned int *)(v122 + 168);
    if (v124)
    {
      LODWORD(v125) = (v124 - 1) & ((v121 >> 4) ^ (v121 >> 9));
      uint64_t v126 = (uint64_t ****)(v123 + 16 * v125);
      int v127 = *v126;
      if (*v126 == v121)
      {
LABEL_122:
        char v142 = v126[1];
        size_t v145 = (size_t)*v142;
        int v143 = (char *)(v142 + 2);
        size_t v144 = v145;
        goto LABEL_123;
      }
      int v128 = 1;
      while (v127 != (uint64_t ***)-4096)
      {
        int v129 = v125 + v128++;
        uint64_t v125 = v129 & (v124 - 1);
        int v127 = *(uint64_t ****)(v123 + 16 * v125);
        if (v127 == v121)
        {
          uint64_t v126 = (uint64_t ****)(v123 + 16 * v125);
          goto LABEL_122;
        }
      }
    }
    uint64_t v126 = (uint64_t ****)(v123 + 16 * v124);
    goto LABEL_122;
  }
  size_t v144 = 0;
  int v143 = &byte_1CFBCE98E;
LABEL_123:
  if (v144 >= v119) {
    size_t v146 = v119;
  }
  else {
    size_t v146 = v144;
  }
  if (!v146 || (uint64_t result = (char *)memcmp(result, v143, v146), !result))
  {
    BOOL v90 = v119 > v144;
LABEL_131:
    if (!v90) {
      return result;
    }
    goto LABEL_133;
  }
  if ((result & 0x80000000) != 0) {
    return result;
  }
LABEL_133:
  *(_DWORD *)BOOL v5 = v88;
  uint64_t v106 = (uint64_t *)(v5 + 8);
  *a2 = v89;
LABEL_148:
  uint64_t v152 = *v106;
  uint64_t *v106 = *(void *)v87;
  *(void *)size_t v87 = v152;
  return result;
}

BOOL sub_1CD24FAA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v6 = *(_DWORD *)(a2 - 16);
      unsigned int v7 = *(_DWORD *)a1;
      if (v6 == *(_DWORD *)a1)
      {
        uint64_t v8 = *(void *)(a2 - 8);
        uint64_t v9 = *(uint64_t ****)(v8 + 48);
        if ((*((unsigned char *)v9 + 23) & 0x10) != 0)
        {
          uint64_t v10 = ***v9;
          uint64_t v11 = *(void *)(v10 + 152);
          uint64_t v12 = *(unsigned int *)(v10 + 168);
          if (v12)
          {
            LODWORD(v13) = (v12 - 1) & ((v9 >> 4) ^ (v9 >> 9));
            unsigned int v14 = (uint64_t ****)(v11 + 16 * v13);
            uint64_t v15 = *v14;
            if (*v14 != v9)
            {
              int v16 = 1;
              do
              {
                if (v15 == (uint64_t ***)-4096) {
                  goto LABEL_91;
                }
                int v17 = v13 + v16++;
                uint64_t v13 = v17 & (v12 - 1);
                uint64_t v15 = *(uint64_t ****)(v11 + 16 * v13);
              }
              while (v15 != v9);
              unsigned int v14 = (uint64_t ****)(v11 + 16 * v13);
            }
          }
          else
          {
LABEL_91:
            unsigned int v14 = (uint64_t ****)(v11 + 16 * v12);
          }
          size_t v87 = v14[1];
          size_t v90 = (size_t)*v87;
          unsigned int v88 = (char *)(v87 + 2);
          size_t v89 = v90;
        }
        else
        {
          size_t v89 = 0;
          unsigned int v88 = &byte_1CFBCE98E;
        }
        uint64_t v86 = *(void *)(a1 + 8);
        uint64_t v91 = *(uint64_t ****)(v86 + 48);
        if ((*((unsigned char *)v91 + 23) & 0x10) != 0)
        {
          uint64_t v92 = ***v91;
          uint64_t v93 = *(void *)(v92 + 152);
          uint64_t v94 = *(unsigned int *)(v92 + 168);
          if (v94)
          {
            LODWORD(v95) = (v94 - 1) & ((v91 >> 4) ^ (v91 >> 9));
            uint64_t v96 = (uint64_t ****)(v93 + 16 * v95);
            int v97 = *v96;
            if (*v96 != v91)
            {
              int v98 = 1;
              do
              {
                if (v97 == (uint64_t ***)-4096) {
                  goto LABEL_100;
                }
                int v99 = v95 + v98++;
                uint64_t v95 = v99 & (v94 - 1);
                int v97 = *(uint64_t ****)(v93 + 16 * v95);
              }
              while (v97 != v91);
              uint64_t v96 = (uint64_t ****)(v93 + 16 * v95);
            }
          }
          else
          {
LABEL_100:
            uint64_t v96 = (uint64_t ****)(v93 + 16 * v94);
          }
          int v100 = v96[1];
          size_t v103 = (size_t)*v100;
          size_t v101 = (char *)(v100 + 2);
          size_t v102 = v103;
        }
        else
        {
          size_t v102 = 0;
          size_t v101 = &byte_1CFBCE98E;
        }
        if (v102 >= v89) {
          size_t v104 = v89;
        }
        else {
          size_t v104 = v102;
        }
        if (v104 && (int v105 = memcmp(v88, v101, v104)) != 0)
        {
          if (v105 < 0) {
            return 1;
          }
        }
        else if (v89 <= v102)
        {
          return 1;
        }
        goto LABEL_110;
      }
      if (v6 <= v7) {
        return result;
      }
      uint64_t v86 = *(void *)(a1 + 8);
      uint64_t v8 = *(void *)(a2 - 8);
LABEL_110:
      *(_DWORD *)a1 = v6;
      *(_DWORD *)(v2 - 16) = v7;
      *(void *)(a1 + 8) = v8;
      BOOL result = 1;
      *(void *)(v2 - 8) = v86;
      return result;
    case 3:
      sub_1CD24F32C((char *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a2 - 16));
      return 1;
    case 4:
      sub_1CD250080(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      sub_1CD24ECB4(a1, a1 + 16, a1 + 32, a1 + 48, (unsigned int *)(a2 - 16));
      return 1;
    default:
      uint64_t v18 = a1 + 32;
      sub_1CD24F32C((char *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 32));
      uint64_t v19 = a1 + 48;
      if (a1 + 48 == v2) {
        return 1;
      }
      int v107 = 0;
      uint64_t v106 = v2;
      break;
  }
  do
  {
    unsigned int v20 = *(_DWORD *)v19;
    unsigned int v21 = *(_DWORD *)v18;
    if (*(_DWORD *)v19 == *(_DWORD *)v18)
    {
      uint64_t v22 = *(void *)(v19 + 8);
      uint64_t v23 = *(uint64_t ****)(v22 + 48);
      if ((*((unsigned char *)v23 + 23) & 0x10) == 0)
      {
        size_t v35 = 0;
        size_t v34 = &byte_1CFBCE98E;
LABEL_24:
        uint64_t v32 = *(void *)(v18 + 8);
        int v37 = *(uint64_t ****)(v32 + 48);
        if ((*((unsigned char *)v37 + 23) & 0x10) == 0)
        {
          size_t v48 = 0;
          uint64_t v47 = &byte_1CFBCE98E;
LABEL_33:
          if (v48 >= v35) {
            size_t v50 = v35;
          }
          else {
            size_t v50 = v48;
          }
          if (v50 && (int v51 = memcmp(v34, v47, v50)) != 0)
          {
            if (v51 < 0) {
              goto LABEL_39;
            }
          }
          else if (v35 <= v48)
          {
LABEL_39:
            uint64_t v2 = v106;
            goto LABEL_79;
          }
          goto LABEL_41;
        }
        uint64_t v38 = ***v37;
        uint64_t v39 = *(void *)(v38 + 152);
        uint64_t v40 = *(unsigned int *)(v38 + 168);
        if (v40)
        {
          LODWORD(v41) = (v40 - 1) & ((v37 >> 4) ^ (v37 >> 9));
          size_t v42 = (uint64_t ****)(v39 + 16 * v41);
          BOOL v43 = *v42;
          if (*v42 == v37)
          {
LABEL_32:
            unsigned int v46 = v42[1];
            size_t v49 = (size_t)*v46;
            uint64_t v47 = (char *)(v46 + 2);
            size_t v48 = v49;
            goto LABEL_33;
          }
          int v44 = 1;
          while (v43 != (uint64_t ***)-4096)
          {
            int v45 = v41 + v44++;
            uint64_t v41 = v45 & (v40 - 1);
            BOOL v43 = *(uint64_t ****)(v39 + 16 * v41);
            if (v43 == v37)
            {
              size_t v42 = (uint64_t ****)(v39 + 16 * v41);
              goto LABEL_32;
            }
          }
        }
        size_t v42 = (uint64_t ****)(v39 + 16 * v40);
        goto LABEL_32;
      }
      uint64_t v24 = ***v23;
      uint64_t v25 = *(void *)(v24 + 152);
      uint64_t v26 = *(unsigned int *)(v24 + 168);
      if (v26)
      {
        LODWORD(v27) = (v26 - 1) & ((v23 >> 4) ^ (v23 >> 9));
        int v28 = (uint64_t ****)(v25 + 16 * v27);
        int v29 = *v28;
        if (*v28 == v23)
        {
LABEL_23:
          size_t v33 = v28[1];
          size_t v36 = (size_t)*v33;
          size_t v34 = (char *)(v33 + 2);
          size_t v35 = v36;
          goto LABEL_24;
        }
        int v30 = 1;
        while (v29 != (uint64_t ***)-4096)
        {
          int v31 = v27 + v30++;
          uint64_t v27 = v31 & (v26 - 1);
          int v29 = *(uint64_t ****)(v25 + 16 * v27);
          if (v29 == v23)
          {
            int v28 = (uint64_t ****)(v25 + 16 * v27);
            goto LABEL_23;
          }
        }
      }
      int v28 = (uint64_t ****)(v25 + 16 * v26);
      goto LABEL_23;
    }
    if (v20 <= v21) {
      goto LABEL_79;
    }
    uint64_t v22 = *(void *)(v19 + 8);
    uint64_t v32 = *(void *)(v18 + 8);
LABEL_41:
    *(_DWORD *)uint64_t v19 = v21;
    *(void *)(v19 + 8) = v32;
    uint64_t v52 = a1;
    if (v18 == a1) {
      goto LABEL_78;
    }
    uint64_t v53 = v18;
    while (1)
    {
      unsigned int v55 = *(_DWORD *)(v53 - 16);
      v53 -= 16;
      unsigned int v54 = v55;
      BOOL v56 = v20 > v55;
      if (v20 != v55)
      {
        if (!v56) {
          goto LABEL_77;
        }
        uint64_t v66 = *(void *)(v18 - 8);
        goto LABEL_73;
      }
      uint64_t v57 = *(uint64_t ****)(v22 + 48);
      if ((*((unsigned char *)v57 + 23) & 0x10) != 0)
      {
        uint64_t v58 = ***v57;
        uint64_t v59 = *(void *)(v58 + 152);
        uint64_t v60 = *(unsigned int *)(v58 + 168);
        if (!v60) {
          goto LABEL_54;
        }
        LODWORD(v61) = (v60 - 1) & ((v57 >> 4) ^ (v57 >> 9));
        uint64_t v62 = (uint64_t ****)(v59 + 16 * v61);
        uint64_t v63 = *v62;
        if (*v62 != v57)
        {
          int v64 = 1;
          while (v63 != (uint64_t ***)-4096)
          {
            int v65 = v61 + v64++;
            uint64_t v61 = v65 & (v60 - 1);
            uint64_t v63 = *(uint64_t ****)(v59 + 16 * v61);
            if (v63 == v57)
            {
              uint64_t v62 = (uint64_t ****)(v59 + 16 * v61);
              goto LABEL_55;
            }
          }
LABEL_54:
          uint64_t v62 = (uint64_t ****)(v59 + 16 * v60);
        }
LABEL_55:
        int v67 = v62[1];
        unint64_t v70 = (unint64_t)*v67;
        int v68 = (char *)(v67 + 2);
        unint64_t v69 = v70;
        goto LABEL_56;
      }
      unint64_t v69 = 0;
      int v68 = &byte_1CFBCE98E;
LABEL_56:
      uint64_t v66 = *(void *)(v18 - 8);
      size_t v71 = *(uint64_t ****)(v66 + 48);
      if ((*((unsigned char *)v71 + 23) & 0x10) != 0)
      {
        uint64_t v72 = ***v71;
        uint64_t v73 = *(void *)(v72 + 152);
        uint64_t v74 = *(unsigned int *)(v72 + 168);
        if (v74)
        {
          LODWORD(v75) = (v74 - 1) & ((v71 >> 4) ^ (v71 >> 9));
          uint64_t v76 = (uint64_t ****)(v73 + 16 * v75);
          uint64_t v77 = *v76;
          if (*v76 == v71)
          {
LABEL_64:
            int v80 = v76[1];
            unint64_t v83 = (unint64_t)*v80;
            int v81 = (char *)(v80 + 2);
            unint64_t v82 = v83;
            goto LABEL_65;
          }
          int v78 = 1;
          while (v77 != (uint64_t ***)-4096)
          {
            int v79 = v75 + v78++;
            uint64_t v75 = v79 & (v74 - 1);
            uint64_t v77 = *(uint64_t ****)(v73 + 16 * v75);
            if (v77 == v71)
            {
              uint64_t v76 = (uint64_t ****)(v73 + 16 * v75);
              goto LABEL_64;
            }
          }
        }
        uint64_t v76 = (uint64_t ****)(v73 + 16 * v74);
        goto LABEL_64;
      }
      unint64_t v82 = 0;
      int v81 = &byte_1CFBCE98E;
LABEL_65:
      size_t v84 = v82 >= v69 ? v69 : v82;
      if (!v84) {
        break;
      }
      int v85 = memcmp(v68, v81, v84);
      if (!v85) {
        break;
      }
      if (v85 < 0) {
        goto LABEL_77;
      }
LABEL_73:
      *(_DWORD *)uint64_t v18 = v54;
      *(void *)(v18 + 8) = v66;
      uint64_t v18 = v53;
      if (v53 == a1)
      {
        uint64_t v52 = a1;
        goto LABEL_78;
      }
    }
    if (v69 > v82) {
      goto LABEL_73;
    }
LABEL_77:
    uint64_t v52 = v18;
LABEL_78:
    *(_DWORD *)uint64_t v52 = v20;
    *(void *)(v52 + 8) = v22;
    ++v107;
    uint64_t v2 = v106;
    if (v107 == 8) {
      return v19 + 16 == v106;
    }
LABEL_79:
    uint64_t v18 = v19;
    v19 += 16;
  }
  while (v19 != v2);
  return 1;
}

char *sub_1CD250080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL result = sub_1CD24F32C((char *)a1, (unsigned int *)a2, (unsigned int *)a3);
  unsigned int v9 = *(_DWORD *)a4;
  unsigned int v10 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 != *(_DWORD *)a3)
  {
    if (v9 <= v10) {
      return result;
    }
    uint64_t v21 = *(void *)(a3 + 8);
    uint64_t v11 = *(void *)(a4 + 8);
    goto LABEL_30;
  }
  uint64_t v11 = *(void *)(a4 + 8);
  uint64_t v12 = *(uint64_t ****)(v11 + 48);
  if ((*((unsigned char *)v12 + 23) & 0x10) != 0)
  {
    uint64_t v13 = ***v12;
    uint64_t v14 = *(void *)(v13 + 152);
    uint64_t v15 = *(unsigned int *)(v13 + 168);
    if (v15)
    {
      LODWORD(v16) = (v15 - 1) & ((v12 >> 4) ^ (v12 >> 9));
      int v17 = (uint64_t ****)(v14 + 16 * v16);
      uint64_t v18 = *v17;
      if (*v17 == v12)
      {
LABEL_12:
        uint64_t v22 = v17[1];
        size_t v24 = (size_t)*v22;
        BOOL result = (char *)(v22 + 2);
        size_t v23 = v24;
        goto LABEL_13;
      }
      int v19 = 1;
      while (v18 != (uint64_t ***)-4096)
      {
        int v20 = v16 + v19++;
        uint64_t v16 = v20 & (v15 - 1);
        uint64_t v18 = *(uint64_t ****)(v14 + 16 * v16);
        if (v18 == v12)
        {
          int v17 = (uint64_t ****)(v14 + 16 * v16);
          goto LABEL_12;
        }
      }
    }
    int v17 = (uint64_t ****)(v14 + 16 * v15);
    goto LABEL_12;
  }
  size_t v23 = 0;
  BOOL result = &byte_1CFBCE98E;
LABEL_13:
  uint64_t v21 = *(void *)(a3 + 8);
  uint64_t v25 = *(uint64_t ****)(v21 + 48);
  if ((*((unsigned char *)v25 + 23) & 0x10) != 0)
  {
    uint64_t v26 = ***v25;
    uint64_t v27 = *(void *)(v26 + 152);
    uint64_t v28 = *(unsigned int *)(v26 + 168);
    if (v28)
    {
      LODWORD(v29) = (v28 - 1) & ((v25 >> 4) ^ (v25 >> 9));
      int v30 = (uint64_t ****)(v27 + 16 * v29);
      int v31 = *v30;
      if (*v30 == v25)
      {
LABEL_21:
        size_t v34 = v30[1];
        size_t v37 = (size_t)*v34;
        size_t v35 = (char *)(v34 + 2);
        size_t v36 = v37;
        goto LABEL_22;
      }
      int v32 = 1;
      while (v31 != (uint64_t ***)-4096)
      {
        int v33 = v29 + v32++;
        uint64_t v29 = v33 & (v28 - 1);
        int v31 = *(uint64_t ****)(v27 + 16 * v29);
        if (v31 == v25)
        {
          int v30 = (uint64_t ****)(v27 + 16 * v29);
          goto LABEL_21;
        }
      }
    }
    int v30 = (uint64_t ****)(v27 + 16 * v28);
    goto LABEL_21;
  }
  size_t v36 = 0;
  size_t v35 = &byte_1CFBCE98E;
LABEL_22:
  if (v36 >= v23) {
    size_t v38 = v23;
  }
  else {
    size_t v38 = v36;
  }
  if (v38 && (BOOL result = (char *)memcmp(result, v35, v38), result))
  {
    if ((result & 0x80000000) != 0) {
      return result;
    }
  }
  else if (v23 <= v36)
  {
    return result;
  }
LABEL_30:
  *(_DWORD *)a3 = v9;
  *(_DWORD *)a4 = v10;
  *(void *)(a3 + 8) = v11;
  *(void *)(a4 + 8) = v21;
  unsigned int v39 = *(_DWORD *)a3;
  unsigned int v40 = *(_DWORD *)a2;
  if (*(_DWORD *)a3 != *(_DWORD *)a2)
  {
    if (v39 <= v40) {
      return result;
    }
    uint64_t v51 = *(void *)(a2 + 8);
    uint64_t v41 = *(void *)(a3 + 8);
    goto LABEL_59;
  }
  uint64_t v41 = *(void *)(a3 + 8);
  size_t v42 = *(uint64_t ****)(v41 + 48);
  if ((*((unsigned char *)v42 + 23) & 0x10) != 0)
  {
    uint64_t v43 = ***v42;
    uint64_t v44 = *(void *)(v43 + 152);
    uint64_t v45 = *(unsigned int *)(v43 + 168);
    if (v45)
    {
      LODWORD(v46) = (v45 - 1) & ((v42 >> 4) ^ (v42 >> 9));
      uint64_t v47 = (uint64_t ****)(v44 + 16 * v46);
      size_t v48 = *v47;
      if (*v47 == v42)
      {
LABEL_41:
        uint64_t v52 = v47[1];
        size_t v54 = (size_t)*v52;
        BOOL result = (char *)(v52 + 2);
        size_t v53 = v54;
        goto LABEL_42;
      }
      int v49 = 1;
      while (v48 != (uint64_t ***)-4096)
      {
        int v50 = v46 + v49++;
        uint64_t v46 = v50 & (v45 - 1);
        size_t v48 = *(uint64_t ****)(v44 + 16 * v46);
        if (v48 == v42)
        {
          uint64_t v47 = (uint64_t ****)(v44 + 16 * v46);
          goto LABEL_41;
        }
      }
    }
    uint64_t v47 = (uint64_t ****)(v44 + 16 * v45);
    goto LABEL_41;
  }
  size_t v53 = 0;
  BOOL result = &byte_1CFBCE98E;
LABEL_42:
  uint64_t v51 = *(void *)(a2 + 8);
  unsigned int v55 = *(uint64_t ****)(v51 + 48);
  if ((*((unsigned char *)v55 + 23) & 0x10) != 0)
  {
    uint64_t v56 = ***v55;
    uint64_t v57 = *(void *)(v56 + 152);
    uint64_t v58 = *(unsigned int *)(v56 + 168);
    if (v58)
    {
      LODWORD(v59) = (v58 - 1) & ((v55 >> 4) ^ (v55 >> 9));
      uint64_t v60 = (uint64_t ****)(v57 + 16 * v59);
      uint64_t v61 = *v60;
      if (*v60 == v55)
      {
LABEL_50:
        int v64 = v60[1];
        size_t v67 = (size_t)*v64;
        int v65 = (char *)(v64 + 2);
        size_t v66 = v67;
        goto LABEL_51;
      }
      int v62 = 1;
      while (v61 != (uint64_t ***)-4096)
      {
        int v63 = v59 + v62++;
        uint64_t v59 = v63 & (v58 - 1);
        uint64_t v61 = *(uint64_t ****)(v57 + 16 * v59);
        if (v61 == v55)
        {
          uint64_t v60 = (uint64_t ****)(v57 + 16 * v59);
          goto LABEL_50;
        }
      }
    }
    uint64_t v60 = (uint64_t ****)(v57 + 16 * v58);
    goto LABEL_50;
  }
  size_t v66 = 0;
  int v65 = &byte_1CFBCE98E;
LABEL_51:
  if (v66 >= v53) {
    size_t v68 = v53;
  }
  else {
    size_t v68 = v66;
  }
  if (v68 && (BOOL result = (char *)memcmp(result, v65, v68), result))
  {
    if ((result & 0x80000000) != 0) {
      return result;
    }
  }
  else if (v53 <= v66)
  {
    return result;
  }
LABEL_59:
  *(_DWORD *)a2 = v39;
  *(_DWORD *)a3 = v40;
  *(void *)(a2 + 8) = v41;
  *(void *)(a3 + 8) = v51;
  unsigned int v69 = *(_DWORD *)a2;
  unsigned int v70 = *(_DWORD *)a1;
  if (*(_DWORD *)a2 != *(_DWORD *)a1)
  {
    if (v69 <= v70) {
      return result;
    }
    uint64_t v81 = *(void *)(a1 + 8);
    uint64_t v71 = *(void *)(a2 + 8);
    goto LABEL_88;
  }
  uint64_t v71 = *(void *)(a2 + 8);
  uint64_t v72 = *(uint64_t ****)(v71 + 48);
  if ((*((unsigned char *)v72 + 23) & 0x10) != 0)
  {
    uint64_t v73 = ***v72;
    uint64_t v74 = *(void *)(v73 + 152);
    uint64_t v75 = *(unsigned int *)(v73 + 168);
    if (v75)
    {
      LODWORD(v76) = (v75 - 1) & ((v72 >> 4) ^ (v72 >> 9));
      uint64_t v77 = (uint64_t ****)(v74 + 16 * v76);
      int v78 = *v77;
      if (*v77 == v72)
      {
LABEL_70:
        unint64_t v82 = v77[1];
        size_t v84 = (size_t)*v82;
        BOOL result = (char *)(v82 + 2);
        size_t v83 = v84;
        goto LABEL_71;
      }
      int v79 = 1;
      while (v78 != (uint64_t ***)-4096)
      {
        int v80 = v76 + v79++;
        uint64_t v76 = v80 & (v75 - 1);
        int v78 = *(uint64_t ****)(v74 + 16 * v76);
        if (v78 == v72)
        {
          uint64_t v77 = (uint64_t ****)(v74 + 16 * v76);
          goto LABEL_70;
        }
      }
    }
    uint64_t v77 = (uint64_t ****)(v74 + 16 * v75);
    goto LABEL_70;
  }
  size_t v83 = 0;
  BOOL result = &byte_1CFBCE98E;
LABEL_71:
  uint64_t v81 = *(void *)(a1 + 8);
  int v85 = *(uint64_t ****)(v81 + 48);
  if ((*((unsigned char *)v85 + 23) & 0x10) != 0)
  {
    uint64_t v86 = ***v85;
    uint64_t v87 = *(void *)(v86 + 152);
    uint64_t v88 = *(unsigned int *)(v86 + 168);
    if (v88)
    {
      LODWORD(v89) = (v88 - 1) & ((v85 >> 4) ^ (v85 >> 9));
      size_t v90 = (uint64_t ****)(v87 + 16 * v89);
      uint64_t v91 = *v90;
      if (*v90 == v85)
      {
LABEL_79:
        uint64_t v94 = v90[1];
        size_t v97 = (size_t)*v94;
        uint64_t v95 = (char *)(v94 + 2);
        size_t v96 = v97;
        goto LABEL_80;
      }
      int v92 = 1;
      while (v91 != (uint64_t ***)-4096)
      {
        int v93 = v89 + v92++;
        uint64_t v89 = v93 & (v88 - 1);
        uint64_t v91 = *(uint64_t ****)(v87 + 16 * v89);
        if (v91 == v85)
        {
          size_t v90 = (uint64_t ****)(v87 + 16 * v89);
          goto LABEL_79;
        }
      }
    }
    size_t v90 = (uint64_t ****)(v87 + 16 * v88);
    goto LABEL_79;
  }
  size_t v96 = 0;
  uint64_t v95 = &byte_1CFBCE98E;
LABEL_80:
  if (v96 >= v83) {
    size_t v98 = v83;
  }
  else {
    size_t v98 = v96;
  }
  if (v98 && (BOOL result = (char *)memcmp(result, v95, v98), result))
  {
    if ((result & 0x80000000) != 0) {
      return result;
    }
  }
  else if (v83 <= v96)
  {
    return result;
  }
LABEL_88:
  *(_DWORD *)a1 = v69;
  *(_DWORD *)a2 = v70;
  *(void *)(a1 + 8) = v71;
  *(void *)(a2 + 8) = v81;
  return result;
}

BOOL sub_1CD250544(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned __int8 *)a2;
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v31 = a2;
  uint64_t v4 = *a1;
  int v5 = *(_DWORD *)(v4 + 16);
  if (v5)
  {
    int v6 = v5 - 1;
    unsigned int v7 = v6 & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v8 = *(void *)(*(void *)v4 + 16 * v7);
    if (v8 == a2) {
      return *((_DWORD *)sub_1CD5D0D10((uint64_t *)v4, &v31) + 2) == *(_DWORD *)a1[1];
    }
    int v9 = 1;
    while (v8 != -4096)
    {
      unsigned int v10 = v7 + v9++;
      unsigned int v7 = v10 & v6;
      uint64_t v8 = *(void *)(*(void *)v4 + 16 * v7);
      if (v8 == a2) {
        return *((_DWORD *)sub_1CD5D0D10((uint64_t *)v4, &v31) + 2) == *(_DWORD *)a1[1];
      }
    }
  }
  int v12 = *(_DWORD *)a1[1];
  unsigned int v13 = *(_DWORD *)a1[2];
  long long v33 = 0uLL;
  LODWORD(v34) = 0;
  uint64_t ResolverFunction = (llvm::GlobalIFunc *)sub_1CC5BE54C(a2, (uint64_t)&v33);
  MEMORY[0x1D25D9CD0](v33, 8);
  if (ResolverFunction && *((unsigned char *)ResolverFunction + 16) == 2) {
    uint64_t ResolverFunction = (llvm::GlobalIFunc *)llvm::GlobalIFunc::getResolverFunction(ResolverFunction);
  }
  if (ResolverFunction) {
    uint64_t v2 = (unsigned __int8 *)ResolverFunction;
  }
  int v15 = v2[16];
  uint64_t AliaseeObject = (uint64_t)v2;
  if (v15 != 1 || v2 == 0)
  {
    if (v15 == 2) {
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t AliaseeObject = llvm::GlobalAlias::getAliaseeObject((llvm::GlobalAlias *)v2);
    if (!AliaseeObject)
    {
LABEL_21:
      if ((v2[23] & 0x10) == 0)
      {
        size_t v29 = 0;
        int v20 = (int *)&byte_1CFBCE98E;
        goto LABEL_31;
      }
      uint64_t v21 = ***(void ***)v2;
      uint64_t v22 = *(void *)(v21 + 152);
      uint64_t v23 = *(unsigned int *)(v21 + 168);
      if (v23)
      {
        LODWORD(v24) = (v23 - 1) & ((v2 >> 4) ^ (v2 >> 9));
        uint64_t v25 = (unsigned __int8 **)(v22 + 16 * v24);
        uint64_t v26 = *v25;
        if (*v25 == v2)
        {
LABEL_29:
          int v19 = (size_t *)v25[1];
          int v20 = (int *)(v19 + 2);
          goto LABEL_30;
        }
        int v27 = 1;
        while (v26 != (unsigned __int8 *)-4096)
        {
          int v28 = v24 + v27++;
          uint64_t v24 = v28 & (v23 - 1);
          uint64_t v26 = *(unsigned __int8 **)(v22 + 16 * v24);
          if (v26 == v2)
          {
            uint64_t v25 = (unsigned __int8 **)(v22 + 16 * v24);
            goto LABEL_29;
          }
        }
      }
      uint64_t v25 = (unsigned __int8 **)(v22 + 16 * v23);
      goto LABEL_29;
    }
  }
  uint64_t v18 = *(size_t ***)(AliaseeObject + 48);
  if (!v18) {
    goto LABEL_21;
  }
  int v19 = *v18;
  int v20 = (int *)(v19 + 9);
LABEL_30:
  size_t v29 = *v19;
LABEL_31:
  long long v33 = xmmword_1CFAC4320;
  uint64_t v34 = 0;
  llvm::MD5::update((int *)&v33, v20, v29);
  llvm::MD5::final((int *)&v33, v32);
  return LOWORD(v32[0]) % v13 == v12;
}

void llvm::initializeStripNonLineTableDebugLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFE810, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CD2507E4;
    v4[1] = &v2;
    unint64_t v3 = v4;
    std::__call_once(&qword_1EBCFE810, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD2507E4()
{
}

void llvm::createStripNonLineTableDebugLegacyPass(llvm *this)
{
}

uint64_t sub_1CD2508BC(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCFE808;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F2648E38;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFE810, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CD2507E4;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCFE810, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CD25096C()
{
}

void sub_1CD2509AC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD2509E4(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
}

uint64_t sub_1CD2509F0(uint64_t a1, llvm *a2)
{
  return llvm::stripNonLineTableDebugInfo(a2, a2);
}

void llvm::SymbolRewriter::RewriteMapParser::parse()
{
  uint64_t v4 = 0;
  long long v2 = 0u;
  long long v3 = 0u;
  long long v0 = 0u;
  long long v1 = 0u;
  operator new();
}

uint64_t llvm::SymbolRewriter::RewriteMapParser::parseEntry(int a1, llvm ***a2, llvm::yaml::KeyValueNode *this)
{
  v23[4] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = v23;
  long long v22 = xmmword_1CDC7F9D0;
  uint64_t Key = llvm::yaml::KeyValueNode::getKey(this);
  if (Key && (uint64_t v6 = Key, *(_DWORD *)(Key + 32) == 1))
  {
    uint64_t Value = llvm::yaml::KeyValueNode::getValue(this);
    if (Value && (uint64_t v8 = (llvm::yaml::MappingNode *)Value, *(_DWORD *)(Value + 32) == 4))
    {
      int v9 = llvm::yaml::ScalarNode::getValue(v6, (uint64_t *)&v21);
      if (v10 == 15)
      {
        if (*(void *)v9 == 0x76206C61626F6C67 && *(void *)(v9 + 7) == 0x656C626169726176)
        {
          uint64_t v12 = llvm::SymbolRewriter::RewriteMapParser::parseRewriteGlobalVariableDescriptor((int)v9, a2, v11, v8);
          goto LABEL_22;
        }
      }
      else if (v10 == 12)
      {
        if (*(void *)v9 == 0x61206C61626F6C67 && *((_DWORD *)v9 + 2) == 1935763820)
        {
          uint64_t v12 = llvm::SymbolRewriter::RewriteMapParser::parseRewriteGlobalAliasDescriptor((int)v9, a2, v11, v8);
          goto LABEL_22;
        }
      }
      else if (v10 == 8 && *(void *)v9 == 0x6E6F6974636E7566)
      {
        uint64_t v12 = llvm::SymbolRewriter::RewriteMapParser::parseRewriteFunctionDescriptor((int)v9, a2, v11, v8);
LABEL_22:
        uint64_t v15 = v12;
        goto LABEL_23;
      }
      uint64_t v17 = llvm::yaml::KeyValueNode::getKey(this);
      uint64_t v18 = "unknown rewrite type";
    }
    else
    {
      uint64_t v17 = llvm::yaml::KeyValueNode::getValue(this);
      uint64_t v18 = "rewrite descriptor must be a map";
    }
  }
  else
  {
    uint64_t v17 = llvm::yaml::KeyValueNode::getKey(this);
    uint64_t v18 = "rewrite type must be a scalar";
  }
  int v19 = v18;
  __int16 v20 = 259;
  llvm::yaml::Stream::printError(a2, v17, (llvm::Twine *)&v19, 0);
  uint64_t v15 = 0;
LABEL_23:
  if (v21 != v23) {
    free(v21);
  }
  return v15;
}

uint64_t llvm::SymbolRewriter::RewriteMapParser::parseRewriteFunctionDescriptor(int a1, llvm ***a2, int a3, llvm::yaml::MappingNode *this)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  v82[0] = 0;
  v82[1] = 0;
  int64_t v83 = 0;
  v80[0] = 0;
  v80[1] = 0;
  int64_t v81 = 0;
  v78[0] = 0;
  v78[1] = 0;
  int64_t v79 = 0;
  *((unsigned char *)this + 76) = 0;
  llvm::yaml::MappingNode::increment(this);
  char v6 = 0;
  unsigned int v7 = 0;
  if (!this)
  {
    int v9 = 0;
    char v10 = 0;
    goto LABEL_118;
  }
  uint64_t v8 = (llvm::yaml::KeyValueNode *)*((void *)this + 10);
  int v9 = 0;
  char v10 = 0;
  if (!v8)
  {
LABEL_118:
    int v62 = v10;
    int v63 = (void *)(v10 & 0x7F);
    if (v62 >= 0) {
      int v64 = v63;
    }
    else {
      int v64 = v9;
    }
    int v65 = v6;
    size_t v66 = (void *)(v6 & 0x7F);
    if (v65 >= 0) {
      size_t v67 = v66;
    }
    else {
      size_t v67 = v7;
    }
    if ((v67 == 0) != (v64 == 0)) {
      operator new();
    }
    uint64_t v86 = "exactly one of transform or target must be specified";
    v88[4] = 259;
    llvm::yaml::Stream::printError(a2, (uint64_t)this, (llvm::Twine *)&v86, 0);
    goto LABEL_126;
  }
  BOOL v11 = 0;
  while (1)
  {
    BOOL v12 = v11;
    uint64_t v86 = (char *)v88;
    long long v87 = xmmword_1CDC7F9D0;
    v84.__r_.__value_.__r.__words[0] = (std::string::size_type)v85;
    *(_OWORD *)&v84.__r_.__value_.__r.__words[1] = xmmword_1CDC7F9D0;
    uint64_t Key = llvm::yaml::KeyValueNode::getKey(v8);
    if (!Key || (uint64_t v14 = Key, *(_DWORD *)(Key + 32) != 1))
    {
      uint64_t v69 = llvm::yaml::KeyValueNode::getKey(v8);
      unsigned int v70 = "descriptor key must be a scalar";
      goto LABEL_138;
    }
    uint64_t Value = llvm::yaml::KeyValueNode::getValue(v8);
    if (!Value) {
      break;
    }
    uint64_t v16 = Value;
    if (*(_DWORD *)(Value + 32) != 1) {
      break;
    }
    uint64_t v17 = llvm::yaml::ScalarNode::getValue(v14, (uint64_t *)&v86);
    if (v18 == 5)
    {
      if (*(_DWORD *)v17 != 1701536110 || v17[4] != 100)
      {
LABEL_135:
        uint64_t v69 = llvm::yaml::KeyValueNode::getKey(v8);
        unsigned int v70 = "unknown key for function";
        goto LABEL_138;
      }
      __p[0] = 0;
      __p[1] = 0;
      int64_t v76 = 0;
      int v27 = llvm::yaml::ScalarNode::getValue(v16, (uint64_t *)&v84);
      if (v28 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_142;
      }
      size_t v29 = v27;
      size_t v30 = v28;
      if (v28 >= 0x17)
      {
        uint64_t v38 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v28 | 7) != 0x17) {
          uint64_t v38 = v28 | 7;
        }
        uint64_t v39 = v38 + 1;
        p_dst = (long long *)operator new(v38 + 1);
        *((void *)&__dst + 1) = v30;
        int64_t v74 = v39 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v74) = v28;
        p_dst = &__dst;
        if (!v28)
        {
LABEL_46:
          *((unsigned char *)p_dst + v30) = 0;
          if (SHIBYTE(v76) < 0) {
            operator delete(__p[0]);
          }
          int64_t v76 = v74;
          *(_OWORD *)__p = __dst;
          unsigned int v40 = (void **)__dst;
          if (v74 >= 0) {
            unsigned int v40 = __p;
          }
          uint64_t v41 = (void *)(HIBYTE(v74) & 0x7F);
          if (v74 < 0) {
            uint64_t v41 = (void *)*((void *)&__dst + 1);
          }
          v72[0] = v40;
          v72[1] = v41;
          llvm::StringRef::lower((llvm::StringRef *)v72, &__dst);
          char v42 = HIBYTE(v74);
          unint64_t v43 = *((void *)&__dst + 1);
          if (v74 >= 0) {
            uint64_t v44 = HIBYTE(v74) & 0x7F;
          }
          else {
            uint64_t v44 = *((void *)&__dst + 1);
          }
          if (v44 == 4
            && (v74 < 0 ? (v45 = (long long *)__dst) : (long long *)(v45 = &__dst, unint64_t v43 = HIBYTE(v74)),
                v43 >= 4 ? (size_t v46 = 4) : (size_t v46 = v43),
                !memcmp(v45, "true", v46) && v43 == 4))
          {
            BOOL v11 = 1;
            if (v42 < 0) {
              goto LABEL_95;
            }
          }
          else
          {
            uint64_t v47 = (void *)HIBYTE(v76);
            if (v76 >= 0) {
              size_t v48 = (void *)(HIBYTE(v76) & 0x7F);
            }
            else {
              size_t v48 = __p[1];
            }
            if (v48 == (void *)1)
            {
              if (v76 < 0)
              {
                int v49 = (void **)__p[0];
                uint64_t v47 = __p[1];
              }
              else
              {
                int v49 = __p;
              }
              int v50 = memcmp(v49, "1", v47 != 0);
              BOOL v11 = v47 == (void *)1 && v50 == 0;
              if (v42 < 0) {
LABEL_95:
              }
                operator delete((void *)__dst);
            }
            else
            {
              BOOL v11 = 0;
              if (v42 < 0) {
                goto LABEL_95;
              }
            }
          }
          if (SHIBYTE(v76) < 0) {
            operator delete(__p[0]);
          }
          goto LABEL_98;
        }
      }
      memmove(p_dst, v29, v30);
      goto LABEL_46;
    }
    if (v18 == 9)
    {
      if (*(void *)v17 != 0x726F66736E617274 || v17[8] != 109) {
        goto LABEL_135;
      }
      long long v33 = llvm::yaml::ScalarNode::getValue(v16, (uint64_t *)&v84);
      if (v34 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_142;
      }
      uint64_t v35 = v33;
      size_t v36 = (void *)v34;
      if (v34 >= 0x17)
      {
        uint64_t v52 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v34 | 7) != 0x17) {
          uint64_t v52 = v34 | 7;
        }
        uint64_t v53 = v52 + 1;
        size_t v37 = operator new(v52 + 1);
        __p[1] = v36;
        int64_t v76 = v53 | 0x8000000000000000;
        __p[0] = v37;
      }
      else
      {
        HIBYTE(v76) = v34;
        size_t v37 = __p;
        if (!v34) {
          goto LABEL_83;
        }
      }
      memmove(v37, v35, (size_t)v36);
LABEL_83:
      *((unsigned char *)v36 + (void)v37) = 0;
      if (SHIBYTE(v79) < 0) {
        operator delete(v78[0]);
      }
      *(_OWORD *)int v78 = *(_OWORD *)__p;
      int64_t v79 = v76;
      goto LABEL_93;
    }
    if (v18 != 6) {
      goto LABEL_135;
    }
    if (*(_DWORD *)v17 == 1920298867 && *((_WORD *)v17 + 2) == 25955)
    {
      long long __dst = 0uLL;
      int64_t v74 = 0;
      uint64_t v56 = llvm::yaml::ScalarNode::getValue(v16, (uint64_t *)&v84);
      if (v57 > 0x7FFFFFFFFFFFFFF7) {
LABEL_142:
      }
        abort();
      uint64_t v58 = v56;
      uint64_t v59 = (void *)v57;
      if (v57 >= 0x17)
      {
        uint64_t v61 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v57 | 7) != 0x17) {
          uint64_t v61 = v57 | 7;
        }
        uint64_t v71 = v61 + 1;
        uint64_t v60 = operator new(v61 + 1);
        __p[1] = v59;
        int64_t v76 = v71 | 0x8000000000000000;
        __p[0] = v60;
      }
      else
      {
        HIBYTE(v76) = v57;
        uint64_t v60 = __p;
        if (!v57)
        {
LABEL_112:
          *((unsigned char *)v59 + (void)v60) = 0;
          if (SHIBYTE(v83) < 0) {
            operator delete(v82[0]);
          }
          int64_t v83 = v76;
          *(_OWORD *)unint64_t v82 = *(_OWORD *)__p;
          llvm::Regex::Regex();
        }
      }
      memmove(v60, v58, (size_t)v59);
      goto LABEL_112;
    }
    if (*(_DWORD *)v17 != 1735549300 || *((_WORD *)v17 + 2) != 29797) {
      goto LABEL_135;
    }
    uint64_t v21 = llvm::yaml::ScalarNode::getValue(v16, (uint64_t *)&v84);
    if (v22 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_142;
    }
    uint64_t v23 = v21;
    uint64_t v24 = (void *)v22;
    if (v22 >= 0x17)
    {
      uint64_t v54 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v22 | 7) != 0x17) {
        uint64_t v54 = v22 | 7;
      }
      uint64_t v55 = v54 + 1;
      uint64_t v25 = operator new(v54 + 1);
      __p[1] = v24;
      int64_t v76 = v55 | 0x8000000000000000;
      __p[0] = v25;
    }
    else
    {
      HIBYTE(v76) = v22;
      uint64_t v25 = __p;
      if (!v22) {
        goto LABEL_90;
      }
    }
    memmove(v25, v23, (size_t)v24);
LABEL_90:
    *((unsigned char *)v24 + (void)v25) = 0;
    if (SHIBYTE(v81) < 0) {
      operator delete(v80[0]);
    }
    *(_OWORD *)int v80 = *(_OWORD *)__p;
    int64_t v81 = v76;
LABEL_93:
    BOOL v11 = v12;
LABEL_98:
    if (v84.__r_.__value_.__l.__data_ != v85) {
      free(v84.__r_.__value_.__l.__data_);
    }
    if (v86 != (char *)v88) {
      free(v86);
    }
    llvm::yaml::MappingNode::increment(this);
    uint64_t v8 = (llvm::yaml::KeyValueNode *)*((void *)this + 10);
    if (!v8)
    {
      char v10 = HIBYTE(v79);
      int v9 = v78[1];
      char v6 = HIBYTE(v81);
      unsigned int v7 = v80[1];
      goto LABEL_118;
    }
  }
  uint64_t v69 = llvm::yaml::KeyValueNode::getValue(v8);
  unsigned int v70 = "descriptor value must be a scalar";
LABEL_138:
  __p[0] = (void *)v70;
  __int16 v77 = 259;
  llvm::yaml::Stream::printError(a2, v69, (llvm::Twine *)__p, 0);
  if (v84.__r_.__value_.__l.__data_ != v85) {
    free(v84.__r_.__value_.__l.__data_);
  }
  if (v86 != (char *)v88) {
    free(v86);
  }
LABEL_126:
  if (SHIBYTE(v79) < 0) {
    operator delete(v78[0]);
  }
  if (SHIBYTE(v81) < 0) {
    operator delete(v80[0]);
  }
  if (SHIBYTE(v83) < 0) {
    operator delete(v82[0]);
  }
  return 0;
}

uint64_t llvm::SymbolRewriter::RewriteMapParser::parseRewriteGlobalVariableDescriptor(int a1, llvm ***a2, int a3, llvm::yaml::MappingNode *this)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  long long v57 = 0uLL;
  unint64_t v58 = 0;
  v55[0] = 0;
  v55[1] = 0;
  unint64_t v56 = 0;
  __p[0] = 0;
  __p[1] = 0;
  unint64_t v54 = 0;
  *((unsigned char *)this + 76) = 0;
  llvm::yaml::MappingNode::increment(this);
  char v6 = 0;
  unsigned int v7 = 0;
  if (!this)
  {
    int v9 = 0;
    char v10 = 0;
    goto LABEL_63;
  }
  uint64_t v8 = (llvm::yaml::KeyValueNode *)*((void *)this + 10);
  int v9 = 0;
  char v10 = 0;
  if (!v8)
  {
LABEL_63:
    int v40 = v10;
    uint64_t v41 = (void *)(v10 & 0x7F);
    if (v40 >= 0) {
      char v42 = v41;
    }
    else {
      char v42 = v9;
    }
    int v43 = v6;
    uint64_t v44 = (void *)(v6 & 0x7F);
    if (v43 >= 0) {
      uint64_t v45 = v44;
    }
    else {
      uint64_t v45 = v7;
    }
    if ((v45 == 0) != (v42 == 0)) {
      operator new();
    }
    int v62 = "exactly one of transform or target must be specified";
    uint64_t v64[4] = 259;
    llvm::yaml::Stream::printError(a2, (uint64_t)this, (llvm::Twine *)&v62, 0);
    goto LABEL_71;
  }
  while (1)
  {
    int v62 = (char *)v64;
    long long v63 = xmmword_1CDC7F9D0;
    uint64_t v59 = v61;
    long long v60 = xmmword_1CDC7F9D0;
    uint64_t Key = llvm::yaml::KeyValueNode::getKey(v8);
    if (!Key || (uint64_t v12 = Key, *(_DWORD *)(Key + 32) != 1))
    {
      uint64_t v47 = llvm::yaml::KeyValueNode::getKey(v8);
      size_t v48 = "descriptor Key must be a scalar";
      goto LABEL_83;
    }
    uint64_t Value = llvm::yaml::KeyValueNode::getValue(v8);
    if (!Value) {
      break;
    }
    uint64_t v14 = Value;
    if (*(_DWORD *)(Value + 32) != 1) {
      break;
    }
    uint64_t v15 = llvm::yaml::ScalarNode::getValue(v12, (uint64_t *)&v62);
    if (v16 == 9)
    {
      if (*(void *)v15 != 0x726F66736E617274 || v15[8] != 109)
      {
LABEL_80:
        uint64_t v47 = llvm::yaml::KeyValueNode::getKey(v8);
        size_t v48 = "unknown Key for Global Variable";
        goto LABEL_83;
      }
      uint64_t v25 = llvm::yaml::ScalarNode::getValue(v14, (uint64_t *)&v59);
      if (v26 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_87;
      }
      int v27 = v25;
      size_t v28 = v26;
      if (v26 >= 0x17)
      {
        uint64_t v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v26 | 7) != 0x17) {
          uint64_t v30 = v26 | 7;
        }
        uint64_t v31 = v30 + 1;
        p_dst = (long long *)operator new(v30 + 1);
        *((void *)&__dst + 1) = v28;
        unint64_t v51 = v31 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v51) = v26;
        p_dst = &__dst;
        if (!v26) {
          goto LABEL_35;
        }
      }
      memmove(p_dst, v27, v28);
LABEL_35:
      *((unsigned char *)p_dst + v28) = 0;
      if (SHIBYTE(v54) < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)__p = __dst;
      unint64_t v54 = v51;
      goto LABEL_45;
    }
    if (v16 != 6) {
      goto LABEL_80;
    }
    if (*(_DWORD *)v15 == 1920298867 && *((_WORD *)v15 + 2) == 25955)
    {
      unint64_t v34 = llvm::yaml::ScalarNode::getValue(v14, (uint64_t *)&v59);
      if (v35 > 0x7FFFFFFFFFFFFFF7) {
LABEL_87:
      }
        abort();
      size_t v36 = v34;
      size_t v37 = v35;
      if (v35 >= 0x17)
      {
        uint64_t v39 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v35 | 7) != 0x17) {
          uint64_t v39 = v35 | 7;
        }
        uint64_t v49 = v39 + 1;
        uint64_t v38 = (long long *)operator new(v39 + 1);
        *((void *)&__dst + 1) = v37;
        unint64_t v51 = v49 | 0x8000000000000000;
        *(void *)&long long __dst = v38;
      }
      else
      {
        HIBYTE(v51) = v35;
        uint64_t v38 = &__dst;
        if (!v35)
        {
LABEL_59:
          *((unsigned char *)v38 + v37) = 0;
          if (SHIBYTE(v58) < 0) {
            operator delete((void *)v57);
          }
          unint64_t v58 = v51;
          long long v57 = __dst;
          llvm::Regex::Regex();
        }
      }
      memmove(v38, v36, v37);
      goto LABEL_59;
    }
    if (*(_DWORD *)v15 != 1735549300 || *((_WORD *)v15 + 2) != 29797) {
      goto LABEL_80;
    }
    int v19 = llvm::yaml::ScalarNode::getValue(v14, (uint64_t *)&v59);
    if (v20 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_87;
    }
    uint64_t v21 = v19;
    size_t v22 = v20;
    if (v20 >= 0x17)
    {
      uint64_t v32 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17) {
        uint64_t v32 = v20 | 7;
      }
      uint64_t v33 = v32 + 1;
      uint64_t v23 = (long long *)operator new(v32 + 1);
      *((void *)&__dst + 1) = v22;
      unint64_t v51 = v33 | 0x8000000000000000;
      *(void *)&long long __dst = v23;
    }
    else
    {
      HIBYTE(v51) = v20;
      uint64_t v23 = &__dst;
      if (!v20) {
        goto LABEL_42;
      }
    }
    memmove(v23, v21, v22);
LABEL_42:
    *((unsigned char *)v23 + v22) = 0;
    if (SHIBYTE(v56) < 0) {
      operator delete(v55[0]);
    }
    *(_OWORD *)uint64_t v55 = __dst;
    unint64_t v56 = v51;
LABEL_45:
    if (v59 != v61) {
      free(v59);
    }
    if (v62 != (char *)v64) {
      free(v62);
    }
    llvm::yaml::MappingNode::increment(this);
    uint64_t v8 = (llvm::yaml::KeyValueNode *)*((void *)this + 10);
    if (!v8)
    {
      char v10 = HIBYTE(v54);
      int v9 = __p[1];
      char v6 = HIBYTE(v56);
      unsigned int v7 = v55[1];
      goto LABEL_63;
    }
  }
  uint64_t v47 = llvm::yaml::KeyValueNode::getValue(v8);
  size_t v48 = "descriptor value must be a scalar";
LABEL_83:
  *(void *)&long long __dst = v48;
  __int16 v52 = 259;
  llvm::yaml::Stream::printError(a2, v47, (llvm::Twine *)&__dst, 0);
  if (v59 != v61) {
    free(v59);
  }
  if (v62 != (char *)v64) {
    free(v62);
  }
LABEL_71:
  if (SHIBYTE(v54) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v56) < 0) {
    operator delete(v55[0]);
  }
  if (SHIBYTE(v58) < 0) {
    operator delete((void *)v57);
  }
  return 0;
}

uint64_t llvm::SymbolRewriter::RewriteMapParser::parseRewriteGlobalAliasDescriptor(int a1, llvm ***a2, int a3, llvm::yaml::MappingNode *this)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  long long v57 = 0uLL;
  unint64_t v58 = 0;
  v55[0] = 0;
  v55[1] = 0;
  unint64_t v56 = 0;
  __p[0] = 0;
  __p[1] = 0;
  unint64_t v54 = 0;
  *((unsigned char *)this + 76) = 0;
  llvm::yaml::MappingNode::increment(this);
  char v6 = 0;
  unsigned int v7 = 0;
  if (!this)
  {
    int v9 = 0;
    char v10 = 0;
    goto LABEL_63;
  }
  uint64_t v8 = (llvm::yaml::KeyValueNode *)*((void *)this + 10);
  int v9 = 0;
  char v10 = 0;
  if (!v8)
  {
LABEL_63:
    int v40 = v10;
    uint64_t v41 = (void *)(v10 & 0x7F);
    if (v40 >= 0) {
      char v42 = v41;
    }
    else {
      char v42 = v9;
    }
    int v43 = v6;
    uint64_t v44 = (void *)(v6 & 0x7F);
    if (v43 >= 0) {
      uint64_t v45 = v44;
    }
    else {
      uint64_t v45 = v7;
    }
    if ((v45 == 0) != (v42 == 0)) {
      operator new();
    }
    int v62 = "exactly one of transform or target must be specified";
    uint64_t v64[4] = 259;
    llvm::yaml::Stream::printError(a2, (uint64_t)this, (llvm::Twine *)&v62, 0);
    goto LABEL_71;
  }
  while (1)
  {
    int v62 = (char *)v64;
    long long v63 = xmmword_1CDC7F9D0;
    uint64_t v59 = v61;
    long long v60 = xmmword_1CDC7F9D0;
    uint64_t Key = llvm::yaml::KeyValueNode::getKey(v8);
    if (!Key || (uint64_t v12 = Key, *(_DWORD *)(Key + 32) != 1))
    {
      uint64_t v47 = llvm::yaml::KeyValueNode::getKey(v8);
      size_t v48 = "descriptor key must be a scalar";
      goto LABEL_83;
    }
    uint64_t Value = llvm::yaml::KeyValueNode::getValue(v8);
    if (!Value) {
      break;
    }
    uint64_t v14 = Value;
    if (*(_DWORD *)(Value + 32) != 1) {
      break;
    }
    uint64_t v15 = llvm::yaml::ScalarNode::getValue(v12, (uint64_t *)&v62);
    if (v16 == 9)
    {
      if (*(void *)v15 != 0x726F66736E617274 || v15[8] != 109)
      {
LABEL_80:
        uint64_t v47 = llvm::yaml::KeyValueNode::getKey(v8);
        size_t v48 = "unknown key for Global Alias";
        goto LABEL_83;
      }
      uint64_t v25 = llvm::yaml::ScalarNode::getValue(v14, (uint64_t *)&v59);
      if (v26 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_87;
      }
      int v27 = v25;
      size_t v28 = v26;
      if (v26 >= 0x17)
      {
        uint64_t v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v26 | 7) != 0x17) {
          uint64_t v30 = v26 | 7;
        }
        uint64_t v31 = v30 + 1;
        p_dst = (long long *)operator new(v30 + 1);
        *((void *)&__dst + 1) = v28;
        unint64_t v51 = v31 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v51) = v26;
        p_dst = &__dst;
        if (!v26) {
          goto LABEL_35;
        }
      }
      memmove(p_dst, v27, v28);
LABEL_35:
      *((unsigned char *)p_dst + v28) = 0;
      if (SHIBYTE(v54) < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)__p = __dst;
      unint64_t v54 = v51;
      goto LABEL_45;
    }
    if (v16 != 6) {
      goto LABEL_80;
    }
    if (*(_DWORD *)v15 == 1920298867 && *((_WORD *)v15 + 2) == 25955)
    {
      unint64_t v34 = llvm::yaml::ScalarNode::getValue(v14, (uint64_t *)&v59);
      if (v35 > 0x7FFFFFFFFFFFFFF7) {
LABEL_87:
      }
        abort();
      size_t v36 = v34;
      size_t v37 = v35;
      if (v35 >= 0x17)
      {
        uint64_t v39 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v35 | 7) != 0x17) {
          uint64_t v39 = v35 | 7;
        }
        uint64_t v49 = v39 + 1;
        uint64_t v38 = (long long *)operator new(v39 + 1);
        *((void *)&__dst + 1) = v37;
        unint64_t v51 = v49 | 0x8000000000000000;
        *(void *)&long long __dst = v38;
      }
      else
      {
        HIBYTE(v51) = v35;
        uint64_t v38 = &__dst;
        if (!v35)
        {
LABEL_59:
          *((unsigned char *)v38 + v37) = 0;
          if (SHIBYTE(v58) < 0) {
            operator delete((void *)v57);
          }
          unint64_t v58 = v51;
          long long v57 = __dst;
          llvm::Regex::Regex();
        }
      }
      memmove(v38, v36, v37);
      goto LABEL_59;
    }
    if (*(_DWORD *)v15 != 1735549300 || *((_WORD *)v15 + 2) != 29797) {
      goto LABEL_80;
    }
    int v19 = llvm::yaml::ScalarNode::getValue(v14, (uint64_t *)&v59);
    if (v20 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_87;
    }
    uint64_t v21 = v19;
    size_t v22 = v20;
    if (v20 >= 0x17)
    {
      uint64_t v32 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17) {
        uint64_t v32 = v20 | 7;
      }
      uint64_t v33 = v32 + 1;
      uint64_t v23 = (long long *)operator new(v32 + 1);
      *((void *)&__dst + 1) = v22;
      unint64_t v51 = v33 | 0x8000000000000000;
      *(void *)&long long __dst = v23;
    }
    else
    {
      HIBYTE(v51) = v20;
      uint64_t v23 = &__dst;
      if (!v20) {
        goto LABEL_42;
      }
    }
    memmove(v23, v21, v22);
LABEL_42:
    *((unsigned char *)v23 + v22) = 0;
    if (SHIBYTE(v56) < 0) {
      operator delete(v55[0]);
    }
    *(_OWORD *)uint64_t v55 = __dst;
    unint64_t v56 = v51;
LABEL_45:
    if (v59 != v61) {
      free(v59);
    }
    if (v62 != (char *)v64) {
      free(v62);
    }
    llvm::yaml::MappingNode::increment(this);
    uint64_t v8 = (llvm::yaml::KeyValueNode *)*((void *)this + 10);
    if (!v8)
    {
      char v10 = HIBYTE(v54);
      int v9 = __p[1];
      char v6 = HIBYTE(v56);
      unsigned int v7 = v55[1];
      goto LABEL_63;
    }
  }
  uint64_t v47 = llvm::yaml::KeyValueNode::getValue(v8);
  size_t v48 = "descriptor value must be a scalar";
LABEL_83:
  *(void *)&long long __dst = v48;
  __int16 v52 = 259;
  llvm::yaml::Stream::printError(a2, v47, (llvm::Twine *)&__dst, 0);
  if (v59 != v61) {
    free(v59);
  }
  if (v62 != (char *)v64) {
    free(v62);
  }
LABEL_71:
  if (SHIBYTE(v54) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v56) < 0) {
    operator delete(v55[0]);
  }
  if (SHIBYTE(v58) < 0) {
    operator delete((void *)v57);
  }
  return 0;
}

uint64_t llvm::RewriteSymbolPass::runImpl(llvm::RewriteSymbolPass *this, llvm::Module *a2)
{
  uint64_t v2 = *((void *)this + 1);
  if ((llvm::RewriteSymbolPass *)v2 == this)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    int v5 = 0;
    do
    {
      v5 |= (*(uint64_t (**)(void, llvm::Module *))(**(void **)(v2 + 16) + 16))(*(void *)(v2 + 16), a2);
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while ((llvm::RewriteSymbolPass *)v2 != this);
  }
  return v5 & 1;
}

void llvm::initializeRewriteSymbolsLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFE820, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CD252A70;
    v4[1] = &v2;
    long long v3 = v4;
    std::__call_once(&qword_1EBCFE820, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD252A70()
{
}

uint64_t sub_1CD252B08(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCFE818;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F2648ED8;
  uint64_t v2 = (llvm::RewriteSymbolPass *)(a1 + 32);
  *(void *)(a1 + 32) = v2;
  *(void *)(a1 + 40) = v2;
  *(void *)(a1 + 48) = 0;
  llvm::RewriteSymbolPass::loadAndParseMapFiles(v2);
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v3);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFE820, memory_order_acquire) != -1)
  {
    v7[0] = sub_1CD252A70;
    v7[1] = &PassRegistry;
    char v6 = v7;
    std::__call_once(&qword_1EBCFE820, &v6, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CD252BC4()
{
}

void sub_1CD252C00(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1F2648ED8;
  sub_1CD719814(a1 + 4);

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1CD252C54(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1F2648ED8;
  sub_1CD719814(a1 + 4);
  llvm::Pass::~Pass((llvm::Pass *)a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD252CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 32;
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 == a1 + 32)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    int v5 = 0;
    do
    {
      v5 |= (*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 16) + 16))(*(void *)(v3 + 16), a2);
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return v5 & 1;
}

uint64_t sub_1CD252D40(uint64_t a1)
{
  *(void *)a1 = &unk_1F2648F78;
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1CD252DA0(uint64_t a1)
{
  *(void *)a1 = &unk_1F2648F78;
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD252E20(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 39);
  int v4 = v3;
  if (v3 >= 0) {
    int v5 = (unsigned __int8 *)(a1 + 16);
  }
  else {
    int v5 = *(unsigned __int8 **)(a1 + 16);
  }
  unint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = v3 & 0x7F;
  if (v4 >= 0) {
    unint64_t v6 = v7;
  }
  uint64_t v8 = *(uint64_t **)(a2 + 112);
  unint64_t v9 = *((unsigned int *)v8 + 8);
  if (v9 <= 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v6 < v10) {
    unint64_t v10 = v6;
  }
  if (v6 <= v9) {
    unint64_t v10 = v6;
  }
  if ((v9 & 0x80000000) == 0) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = v6;
  }
  uint64_t v12 = *((unsigned int *)v8 + 2);
  if (!v12) {
    return 0;
  }
  int v13 = 0;
  if (v11)
  {
    size_t v14 = v11;
    uint64_t v15 = v5;
    do
    {
      int v16 = *v15++;
      int v13 = 33 * v13 + v16;
      --v14;
    }
    while (v14);
  }
  unsigned int v17 = v12 - 1;
  uint64_t v18 = *v8;
  int64_t v76 = (llvm::Value *)*((unsigned int *)v8 + 2);
  uint64_t v19 = *v8 + 8 * v12 + 8;
  int v20 = 1;
  int v21 = v13;
  while (1)
  {
    uint64_t v22 = v21 & v17;
    uint64_t v23 = *(void **)(v18 + 8 * v22);
    if (v23 != (void *)-8)
    {
      if (!v23) {
        return 0;
      }
      if (*(_DWORD *)(v19 + 4 * v22) == v13
        && v11 == *v23
        && (!v11 || !memcmp(v5, (char *)v23 + *((unsigned int *)v8 + 5), v11)))
      {
        break;
      }
    }
    int v21 = v20 + v22;
    ++v20;
  }
  if (v22 == -1) {
    return 0;
  }
  if ((llvm::Value *)(int)v22 == v76) {
    return 0;
  }
  uint64_t v24 = *(llvm::GlobalObject **)(*(void *)(v18 + 8 * (int)v22) + 8);
  if (!v24 || *((unsigned char *)v24 + 16)) {
    return 0;
  }
  unint64_t v26 = (unsigned __int8 *)(a1 + 40);
  __int16 v77 = *(llvm::Value **)(*(void *)(v18 + 8 * (int)v22) + 8);
  sub_1CD253234(a2, v24, v2, a1 + 40);
  char v27 = *(unsigned char *)(a1 + 63);
  BOOL v28 = v27 < 0;
  size_t v29 = *(unsigned __int8 **)(a1 + 40);
  size_t v30 = *(void *)(a1 + 48);
  int64_t v74 = (const char *)(a1 + 40);
  if (v27 >= 0) {
    uint64_t v31 = v26;
  }
  else {
    uint64_t v31 = v29;
  }
  size_t v32 = v27 & 0x7F;
  if (v28) {
    size_t v33 = v30;
  }
  else {
    size_t v33 = v32;
  }
  unint64_t v34 = *(uint64_t **)(a2 + 112);
  size_t v35 = *((unsigned int *)v34 + 8);
  if ((v35 & 0x80000000) == 0)
  {
    if (v35 <= 1) {
      unint64_t v36 = 1;
    }
    else {
      unint64_t v36 = v35;
    }
    if (v33 < v36) {
      unint64_t v36 = v33;
    }
    if (v33 > v35) {
      size_t v33 = v36;
    }
  }
  uint64_t v37 = *((unsigned int *)v34 + 2);
  if (v37)
  {
    int v38 = 0;
    if (v33)
    {
      size_t v39 = v33;
      int v40 = v31;
      do
      {
        int v41 = *v40++;
        int v38 = 33 * v38 + v41;
        --v39;
      }
      while (v39);
    }
    uint64_t v42 = *v34;
    uint64_t v43 = *v34 + 8 * v37 + 8;
    int v44 = 1;
    int v45 = v38;
    while (1)
    {
      uint64_t v46 = v45 & (v37 - 1);
      uint64_t v47 = *(void **)(v42 + 8 * v46);
      if (v47 != (void *)-8)
      {
        if (!v47) {
          goto LABEL_62;
        }
        if (*(_DWORD *)(v43 + 4 * v46) == v38
          && v33 == *v47
          && (!v33 || !memcmp(v31, (char *)v47 + *((unsigned int *)v34 + 5), v33)))
        {
          break;
        }
      }
      int v45 = v44 + v46;
      ++v44;
    }
    if (v46 != -1 && (int)v46 != v37)
    {
      size_t v48 = *(uint64_t ****)(*(void *)(v42 + 8 * (int)v46) + 8);
      if (v48)
      {
        if (!*((unsigned char *)v48 + 16))
        {
          if ((*((unsigned char *)v48 + 23) & 0x10) == 0)
          {
            unint64_t v58 = 0;
            __int16 v52 = (int32x2_t ****)v77;
LABEL_82:
            llvm::Value::setValueName(v52, v58);
            return 1;
          }
          uint64_t v49 = ***v48;
          uint64_t v50 = *(void *)(v49 + 152);
          uint64_t v51 = *(unsigned int *)(v49 + 168);
          __int16 v52 = (int32x2_t ****)v77;
          if (v51)
          {
            LODWORD(v53) = (v51 - 1) & ((v48 >> 4) ^ (v48 >> 9));
            unint64_t v54 = (uint64_t ****)(v50 + 16 * v53);
            uint64_t v55 = *v54;
            if (*v54 == v48)
            {
LABEL_81:
              unint64_t v58 = (int32x2_t ***)v54[1];
              goto LABEL_82;
            }
            int v56 = 1;
            while (v55 != (uint64_t ***)-4096)
            {
              int v57 = v53 + v56++;
              uint64_t v53 = v57 & (v51 - 1);
              uint64_t v55 = *(uint64_t ****)(v50 + 16 * v53);
              if (v55 == v48)
              {
                unint64_t v54 = (uint64_t ****)(v50 + 16 * v53);
                goto LABEL_81;
              }
            }
          }
          unint64_t v54 = (uint64_t ****)(v50 + 16 * v51);
          goto LABEL_81;
        }
      }
    }
  }
LABEL_62:
  __int16 v79 = 260;
  int v78 = v74;
  llvm::Value::setNameImpl(v77, &v78);
  if (!*((unsigned char *)v77 + 16))
  {
    if ((*((unsigned char *)v77 + 23) & 0x10) == 0) {
      goto LABEL_91;
    }
    uint64_t v59 = ***(void ***)v77;
    uint64_t v60 = *(void *)(v59 + 152);
    uint64_t v61 = *(unsigned int *)(v59 + 168);
    if (v61)
    {
      LODWORD(v62) = (v61 - 1) & ((v77 >> 4) ^ (v77 >> 9));
      long long v63 = (llvm::Value **)(v60 + 16 * v62);
      int v64 = *v63;
      if (*v63 == v77)
      {
LABEL_84:
        size_t v67 = v63[1];
        unint64_t v70 = *(void *)v67;
        size_t v68 = (char *)v67 + 16;
        unint64_t v69 = v70;
        if (v70 >= 5 && *(_DWORD *)v68 == *(_DWORD *)"llvm." && v68[4] == aLlvm_1[4])
        {
          *((_DWORD *)v77 + 8) |= 0x2000u;
          int v72 = llvm::Function::lookupIntrinsicID(v68, v69);
LABEL_92:
          *((_DWORD *)v77 + 9) = v72;
          return 1;
        }
LABEL_91:
        int v72 = 0;
        *((_DWORD *)v77 + 8) &= ~0x2000u;
        goto LABEL_92;
      }
      int v65 = 1;
      while (v64 != (llvm::Value *)-4096)
      {
        int v66 = v62 + v65++;
        uint64_t v62 = v66 & (v61 - 1);
        int v64 = *(llvm::Value **)(v60 + 16 * v62);
        if (v64 == v77)
        {
          long long v63 = (llvm::Value **)(v60 + 16 * v62);
          goto LABEL_84;
        }
      }
    }
    long long v63 = (llvm::Value **)(v60 + 16 * v61);
    goto LABEL_84;
  }
  return 1;
}

void sub_1CD253234(uint64_t a1, llvm::GlobalObject *a2, unsigned char *a3, uint64_t a4)
{
  uint64_t v4 = *((void *)a2 + 6);
  if (v4)
  {
    uint64_t v8 = (uint64_t *)(a1 + 120);
    char v9 = *(unsigned char *)(a4 + 23);
    BOOL v10 = v9 < 0;
    if (v9 >= 0) {
      size_t v11 = (unsigned __int8 *)a4;
    }
    else {
      size_t v11 = *(unsigned __int8 **)a4;
    }
    size_t v12 = v9 & 0x7F;
    if (v10) {
      size_t v13 = *(void *)(a4 + 8);
    }
    else {
      size_t v13 = v12;
    }
    inserted = llvm::Module::getOrInsertComdat(a1, v11, v13);
    *((_DWORD *)inserted + 2) = *(_DWORD *)(v4 + 8);
    llvm::GlobalObject::setComdat(a2, (llvm::Comdat *)inserted);
    char v15 = a3[23];
    BOOL v16 = v15 < 0;
    size_t v17 = *((void *)a3 + 1);
    if (v15 < 0) {
      a3 = *(unsigned char **)a3;
    }
    size_t v18 = v15 & 0x7F;
    if (v16) {
      size_t v19 = v17;
    }
    else {
      size_t v19 = v18;
    }
    uint64_t v20 = *(unsigned int *)(a1 + 128);
    if (v20)
    {
      uint64_t v31 = v8;
      int v21 = 0;
      if (v19)
      {
        size_t v22 = v19;
        uint64_t v23 = a3;
        do
        {
          int v24 = *v23++;
          int v21 = 33 * v21 + v24;
          --v22;
        }
        while (v22);
      }
      uint64_t v25 = *(void *)(a1 + 120);
      uint64_t v26 = *(unsigned int *)(a1 + 140);
      int v27 = 1;
      for (int i = v21; ; int i = v29 + v27++)
      {
        uint64_t v29 = i & (v20 - 1);
        size_t v30 = *(void **)(v25 + 8 * v29);
        if (v30 != (void *)-8)
        {
          if (!v30) {
            goto LABEL_27;
          }
          if (*(_DWORD *)(v25 + 8 * v20 + 8 + 4 * v29) == v21
            && v19 == *v30
            && (!v19 || !memcmp(a3, (char *)v30 + v26, v19)))
          {
            break;
          }
        }
      }
      if (v29 != -1) {
        uint64_t v20 = (int)v29;
      }
LABEL_27:
      uint64_t v8 = v31;
    }
    else
    {
      uint64_t v20 = 0;
      uint64_t v25 = *v8;
    }
    sub_1CD898BBC(v8, (size_t **)(v25 + 8 * v20));
  }
}

uint64_t sub_1CD2533D0(uint64_t a1)
{
  *(void *)a1 = &unk_1F2648FA0;
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1CD253430(uint64_t a1)
{
  *(void *)a1 = &unk_1F2648FA0;
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD2534B0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 32) != a2 + 24) {
    llvm::Regex::Regex();
  }
  return 0;
}

uint64_t sub_1CD253BE0(uint64_t a1)
{
  *(void *)a1 = &unk_1F2648FC8;
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1CD253C40(uint64_t a1)
{
  *(void *)a1 = &unk_1F2648FC8;
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD253CC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 39);
  int v4 = v3;
  if (v3 >= 0) {
    int v5 = (unsigned __int8 *)(a1 + 16);
  }
  else {
    int v5 = *(unsigned __int8 **)(a1 + 16);
  }
  unint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = v3 & 0x7F;
  if (v4 >= 0) {
    unint64_t v6 = v7;
  }
  uint64_t v8 = *(uint64_t **)(a2 + 112);
  unint64_t v9 = *((unsigned int *)v8 + 8);
  if (v9 <= 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v6 < v10) {
    unint64_t v10 = v6;
  }
  if (v6 <= v9) {
    unint64_t v10 = v6;
  }
  if ((v9 & 0x80000000) == 0) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = v6;
  }
  uint64_t v12 = *((unsigned int *)v8 + 2);
  if (!v12) {
    return 0;
  }
  int v13 = 0;
  if (v11)
  {
    size_t v14 = v11;
    char v15 = v5;
    do
    {
      int v16 = *v15++;
      int v13 = 33 * v13 + v16;
      --v14;
    }
    while (v14);
  }
  unsigned int v17 = v12 - 1;
  uint64_t v18 = *v8;
  uint64_t v74 = *((unsigned int *)v8 + 2);
  uint64_t v19 = *v8 + 8 * v12 + 8;
  int v20 = 1;
  int v21 = v13;
  while (1)
  {
    uint64_t v22 = v21 & v17;
    uint64_t v23 = *(void **)(v18 + 8 * v22);
    if (v23 != (void *)-8)
    {
      if (!v23) {
        return 0;
      }
      if (*(_DWORD *)(v19 + 4 * v22) == v13
        && v11 == *v23
        && (!v11 || !memcmp(v5, (char *)v23 + *((unsigned int *)v8 + 5), v11)))
      {
        break;
      }
    }
    int v21 = v20 + v22;
    ++v20;
  }
  if (v22 == -1) {
    return 0;
  }
  if ((int)v22 == v74) {
    return 0;
  }
  int v24 = *(uint64_t ****)(*(void *)(v18 + 8 * (int)v22) + 8);
  if (!v24 || *((unsigned char *)v24 + 16) != 3 || (v24[4] & 0xFu) - 7 < 2) {
    return 0;
  }
  uint64_t v26 = (unsigned __int8 *)(a1 + 40);
  sub_1CD253234(a2, *(llvm::GlobalObject **)(*(void *)(v18 + 8 * (int)v22) + 8), v2, a1 + 40);
  char v27 = *(unsigned char *)(a1 + 63);
  BOOL v28 = v27 < 0;
  uint64_t v29 = *(unsigned __int8 **)(a1 + 40);
  size_t v30 = *(void *)(a1 + 48);
  int v72 = (const char *)(a1 + 40);
  if (v27 >= 0) {
    uint64_t v31 = v26;
  }
  else {
    uint64_t v31 = v29;
  }
  size_t v32 = v27 & 0x7F;
  if (v28) {
    size_t v33 = v30;
  }
  else {
    size_t v33 = v32;
  }
  unint64_t v34 = *(uint64_t **)(a2 + 112);
  size_t v35 = *((unsigned int *)v34 + 8);
  if ((v35 & 0x80000000) == 0)
  {
    if (v35 <= 1) {
      unint64_t v36 = 1;
    }
    else {
      unint64_t v36 = v35;
    }
    if (v33 < v36) {
      unint64_t v36 = v33;
    }
    if (v33 > v35) {
      size_t v33 = v36;
    }
  }
  uint64_t v75 = *((unsigned int *)v34 + 2);
  if (v75)
  {
    int v37 = 0;
    if (v33)
    {
      size_t v38 = v33;
      size_t v39 = v31;
      do
      {
        int v40 = *v39++;
        int v37 = 33 * v37 + v40;
        --v38;
      }
      while (v38);
    }
    uint64_t v41 = *v34;
    uint64_t v42 = *v34 + 8 * v75 + 8;
    int v43 = 1;
    int v44 = v37;
    while (1)
    {
      uint64_t v45 = v44 & (v75 - 1);
      uint64_t v46 = *(void **)(v41 + 8 * v45);
      if (v46 != (void *)-8)
      {
        if (!v46) {
          goto LABEL_63;
        }
        if (*(_DWORD *)(v42 + 4 * v45) == v37
          && v33 == *v46
          && (!v33 || !memcmp(v31, (char *)v46 + *((unsigned int *)v34 + 5), v33)))
        {
          break;
        }
      }
      int v44 = v43 + v45;
      ++v43;
    }
    if (v45 != -1 && (int)v45 != v75)
    {
      uint64_t v47 = *(uint64_t ****)(*(void *)(v41 + 8 * (int)v45) + 8);
      if (v47)
      {
        if (*((unsigned char *)v47 + 16) == 3 && (v47[4] & 0xFu) - 7 >= 2)
        {
          if ((*((unsigned char *)v47 + 23) & 0x10) == 0)
          {
            int v64 = 0;
LABEL_84:
            llvm::Value::setValueName((int32x2_t ****)v24, v64);
            return 1;
          }
          uint64_t v48 = ***v47;
          uint64_t v49 = *(void *)(v48 + 152);
          uint64_t v50 = *(unsigned int *)(v48 + 168);
          if (v50)
          {
            LODWORD(v51) = (v50 - 1) & ((v47 >> 4) ^ (v47 >> 9));
            __int16 v52 = (uint64_t ****)(v49 + 16 * v51);
            uint64_t v53 = *v52;
            if (*v52 == v47)
            {
LABEL_83:
              int v64 = (int32x2_t ***)v52[1];
              goto LABEL_84;
            }
            int v54 = 1;
            while (v53 != (uint64_t ***)-4096)
            {
              int v55 = v51 + v54++;
              uint64_t v51 = v55 & (v50 - 1);
              uint64_t v53 = *(uint64_t ****)(v49 + 16 * v51);
              if (v53 == v47)
              {
                __int16 v52 = (uint64_t ****)(v49 + 16 * v51);
                goto LABEL_83;
              }
            }
          }
          __int16 v52 = (uint64_t ****)(v49 + 16 * v50);
          goto LABEL_83;
        }
      }
    }
  }
LABEL_63:
  __int16 v77 = 260;
  int64_t v76 = v72;
  llvm::Value::setNameImpl((llvm::Value *)v24, &v76);
  if (!*((unsigned char *)v24 + 16))
  {
    if ((*((unsigned char *)v24 + 23) & 0x10) == 0) {
      goto LABEL_93;
    }
    uint64_t v56 = ***v24;
    uint64_t v57 = *(void *)(v56 + 152);
    uint64_t v58 = *(unsigned int *)(v56 + 168);
    if (v58)
    {
      LODWORD(v59) = (v58 - 1) & ((v24 >> 4) ^ (v24 >> 9));
      uint64_t v60 = (uint64_t ****)(v57 + 16 * v59);
      uint64_t v61 = *v60;
      if (*v60 == v24)
      {
LABEL_86:
        int v65 = v60[1];
        unint64_t v68 = (unint64_t)*v65;
        int v66 = v65 + 2;
        unint64_t v67 = v68;
        if (v68 >= 5 && *(_DWORD *)v66 == *(_DWORD *)"llvm." && v66[4] == aLlvm_1[4])
        {
          *((_DWORD *)v24 + 8) |= 0x2000u;
          int v70 = llvm::Function::lookupIntrinsicID(v66, v67);
LABEL_94:
          *((_DWORD *)v24 + 9) = v70;
          return 1;
        }
LABEL_93:
        int v70 = 0;
        *((_DWORD *)v24 + 8) &= ~0x2000u;
        goto LABEL_94;
      }
      int v62 = 1;
      while (v61 != (uint64_t ***)-4096)
      {
        int v63 = v59 + v62++;
        uint64_t v59 = v63 & (v58 - 1);
        uint64_t v61 = *(uint64_t ****)(v57 + 16 * v59);
        if (v61 == v24)
        {
          uint64_t v60 = (uint64_t ****)(v57 + 16 * v59);
          goto LABEL_86;
        }
      }
    }
    uint64_t v60 = (uint64_t ****)(v57 + 16 * v58);
    goto LABEL_86;
  }
  return 1;
}

uint64_t sub_1CD25410C(uint64_t a1)
{
  *(void *)a1 = &unk_1F2648FF0;
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1CD25416C(uint64_t a1)
{
  *(void *)a1 = &unk_1F2648FF0;
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD2541EC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) != a2 + 8) {
    llvm::Regex::Regex();
  }
  return 0;
}

uint64_t sub_1CD254934(uint64_t a1)
{
  *(void *)a1 = &unk_1F2649018;
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1CD254994(uint64_t a1)
{
  *(void *)a1 = &unk_1F2649018;
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD254A14(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a1 + 39);
  if (v4 >= 0) {
    int v5 = (unsigned __int8 *)(a1 + 16);
  }
  else {
    int v5 = *(unsigned __int8 **)(a1 + 16);
  }
  if (v4 >= 0) {
    unint64_t v6 = v4 & 0x7F;
  }
  else {
    unint64_t v6 = *(void *)(a1 + 24);
  }
  uint64_t result = sub_1CC196FC4(*(uint64_t **)(a2 + 112), v5, v6);
  if (result)
  {
    uint64_t v8 = (int32x2_t ****)result;
    if (*(unsigned char *)(result + 16) != 1) {
      return 0;
    }
    size_t v11 = *(unsigned __int8 **)(a1 + 40);
    uint64_t v10 = a1 + 40;
    unint64_t v9 = v11;
    char v12 = *(unsigned char *)(v10 + 23);
    int v13 = v12;
    if (v12 >= 0) {
      size_t v14 = (unsigned __int8 *)v10;
    }
    else {
      size_t v14 = v9;
    }
    unint64_t v15 = v12 & 0x7F;
    if (v13 >= 0) {
      unint64_t v16 = v15;
    }
    else {
      unint64_t v16 = *(void *)(v10 + 8);
    }
    uint64_t v17 = sub_1CC196FC4(*(uint64_t **)(a2 + 112), v14, v16);
    if (v17 && *(unsigned char *)(v17 + 16) == 1)
    {
      if ((*(unsigned char *)(v17 + 23) & 0x10) == 0)
      {
        unint64_t v34 = 0;
LABEL_36:
        llvm::Value::setValueName(v8, v34);
        return 1;
      }
      uint64_t v18 = ***(void ***)v17;
      uint64_t v19 = *(void *)(v18 + 152);
      uint64_t v20 = *(unsigned int *)(v18 + 168);
      if (v20)
      {
        LODWORD(v21) = (v20 - 1) & ((v17 >> 4) ^ (v17 >> 9));
        uint64_t v22 = (uint64_t *)(v19 + 16 * v21);
        uint64_t v23 = *v22;
        if (*v22 == v17)
        {
LABEL_35:
          unint64_t v34 = (int32x2_t ***)v22[1];
          goto LABEL_36;
        }
        int v24 = 1;
        while (v23 != -4096)
        {
          int v25 = v21 + v24++;
          uint64_t v21 = v25 & (v20 - 1);
          uint64_t v23 = *(void *)(v19 + 16 * v21);
          if (v23 == v17)
          {
            uint64_t v22 = (uint64_t *)(v19 + 16 * v21);
            goto LABEL_35;
          }
        }
      }
      uint64_t v22 = (uint64_t *)(v19 + 16 * v20);
      goto LABEL_35;
    }
    __int16 v42 = 260;
    uint64_t v41 = (const char *)v10;
    llvm::Value::setNameImpl((llvm::Value *)v8, &v41);
    if (*((unsigned char *)v8 + 16)) {
      return 1;
    }
    if ((*((unsigned char *)v8 + 23) & 0x10) == 0) {
      goto LABEL_47;
    }
    uint64_t v26 = ***v8;
    int32x2_t v27 = v26[19];
    uint64_t v28 = v26[21].u32[0];
    if (v28)
    {
      LODWORD(v29) = (v28 - 1) & ((v8 >> 4) ^ (v8 >> 9));
      size_t v30 = (int32x2_t *****)(*(void *)&v27 + 16 * v29);
      uint64_t v31 = *v30;
      if (*v30 == v8)
      {
LABEL_40:
        size_t v35 = v30[1];
        unint64_t v38 = (unint64_t)*v35;
        unint64_t v36 = v35 + 2;
        unint64_t v37 = v38;
        if (v38 >= 5 && *(_DWORD *)v36 == *(_DWORD *)"llvm." && v36[4] == aLlvm_1[4])
        {
          *((_DWORD *)v8 + 8) |= 0x2000u;
          int v40 = llvm::Function::lookupIntrinsicID(v36, v37);
LABEL_48:
          *((_DWORD *)v8 + 9) = v40;
          return 1;
        }
LABEL_47:
        int v40 = 0;
        *((_DWORD *)v8 + 8) &= ~0x2000u;
        goto LABEL_48;
      }
      int v32 = 1;
      while (v31 != (int32x2_t ****)-4096)
      {
        int v33 = v29 + v32++;
        uint64_t v29 = v33 & (v28 - 1);
        uint64_t v31 = *(int32x2_t *****)(*(void *)&v27 + 16 * v29);
        if (v31 == v8)
        {
          size_t v30 = (int32x2_t *****)(*(void *)&v27 + 16 * v29);
          goto LABEL_40;
        }
      }
    }
    size_t v30 = (int32x2_t *****)(*(void *)&v27 + 16 * v28);
    goto LABEL_40;
  }
  return result;
}

uint64_t sub_1CD254C48(uint64_t a1)
{
  *(void *)a1 = &unk_1F2649040;
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1CD254CA8(uint64_t a1)
{
  *(void *)a1 = &unk_1F2649040;
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD254D28(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 48) != a2 + 40) {
    llvm::Regex::Regex();
  }
  return 0;
}

uint64_t sub_1CD255360()
{
  *(void *)&long long v3 = "Symbol Rewrite Map";
  *((void *)&v3 + 1) = 18;
  *(void *)&long long v2 = "filename";
  *((void *)&v2 + 1) = 8;
  int v1 = 1;
  sub_1CD898ABC(&v3, &v2, &v1);

  return __cxa_atexit((void (*)(void *))sub_1CD510A20, &qword_1EBD0D418, &dword_1CB82C000);
}

void llvm::initializeUnifyFunctionExitNodesLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  long long v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFE828, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CD255458;
    v4[1] = &v2;
    long long v3 = v4;
    std::__call_once(&qword_1EBCFE828, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD255458()
{
}

uint64_t llvm::UnifyFunctionExitNodesLegacyPass::runOnFunction(llvm::UnifyFunctionExitNodesLegacyPass *this, llvm::Function *a2)
{
  BOOL v3 = sub_1CD25552C((uint64_t)a2);
  return v3 | sub_1CD2557C8((uint64_t)a2);
}

BOOL sub_1CD25552C(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2 != a1 + 72)
  {
    BOOL v3 = 0;
    char v4 = 0;
    int v5 = 0;
    while (1)
    {
      if (v2) {
        uint64_t v6 = v2 - 24;
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v7 = *(void *)(v6 + 40);
      if (v7) {
        uint64_t v8 = v7 - 24;
      }
      else {
        uint64_t v8 = 0;
      }
      if (*(unsigned __int8 *)(v8 + 16) - 29 >= 0xB) {
        uint64_t v8 = 0;
      }
      if (*(unsigned char *)(v8 + 16) == 35)
      {
        if (v5 >= v3)
        {
          uint64_t v10 = (v5 - v4) >> 3;
          unint64_t v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 61) {
            abort();
          }
          if ((v3 - v4) >> 2 > v11) {
            unint64_t v11 = (v3 - v4) >> 2;
          }
          if ((unint64_t)(v3 - v4) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v12 = v11;
          }
          if (v12)
          {
            if (v12 >> 61) {
              sub_1CB833614();
            }
            int v13 = (char *)operator new(8 * v12);
          }
          else
          {
            int v13 = 0;
          }
          size_t v14 = &v13[8 * v10];
          *(void *)size_t v14 = v6;
          unint64_t v9 = v14 + 8;
          while (v5 != v4)
          {
            uint64_t v15 = *((void *)v5 - 1);
            v5 -= 8;
            *((void *)v14 - 1) = v15;
            v14 -= 8;
          }
          BOOL v3 = &v13[8 * v12];
          if (v4) {
            operator delete(v4);
          }
          char v4 = v14;
          goto LABEL_31;
        }
        *(void *)int v5 = v6;
        v5 += 8;
      }
      unint64_t v9 = v5;
LABEL_31:
      uint64_t v2 = *(void *)(v2 + 8);
      int v5 = v9;
      if (v2 == v1) {
        goto LABEL_34;
      }
    }
  }
  unint64_t v9 = 0;
  char v4 = 0;
LABEL_34:
  if ((unint64_t)(v9 - v4) > 8) {
    operator new();
  }
  if (v4) {
    operator delete(v4);
  }
  return (unint64_t)(v9 - v4) > 8;
}

BOOL sub_1CD2557C8(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2 != a1 + 72)
  {
    BOOL v3 = 0;
    char v4 = 0;
    int v5 = 0;
    while (1)
    {
      if (v2) {
        uint64_t v6 = v2 - 24;
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v7 = *(void *)(v6 + 40);
      if (v7) {
        uint64_t v8 = v7 - 24;
      }
      else {
        uint64_t v8 = 0;
      }
      if (*(unsigned __int8 *)(v8 + 16) - 29 >= 0xB) {
        uint64_t v8 = 0;
      }
      if (*(unsigned char *)(v8 + 16) == 29)
      {
        if (v5 >= v3)
        {
          uint64_t v10 = (v5 - v4) >> 3;
          unint64_t v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 61) {
            abort();
          }
          if ((v3 - v4) >> 2 > v11) {
            unint64_t v11 = (v3 - v4) >> 2;
          }
          if ((unint64_t)(v3 - v4) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v12 = v11;
          }
          if (v12)
          {
            if (v12 >> 61) {
              sub_1CB833614();
            }
            int v13 = (char *)operator new(8 * v12);
          }
          else
          {
            int v13 = 0;
          }
          size_t v14 = &v13[8 * v10];
          *(void *)size_t v14 = v6;
          unint64_t v9 = v14 + 8;
          while (v5 != v4)
          {
            uint64_t v15 = *((void *)v5 - 1);
            v5 -= 8;
            *((void *)v14 - 1) = v15;
            v14 -= 8;
          }
          BOOL v3 = &v13[8 * v12];
          if (v4) {
            operator delete(v4);
          }
          char v4 = v14;
          goto LABEL_31;
        }
        *(void *)int v5 = v6;
        v5 += 8;
      }
      unint64_t v9 = v5;
LABEL_31:
      uint64_t v2 = *(void *)(v2 + 8);
      int v5 = v9;
      if (v2 == v1) {
        goto LABEL_34;
      }
    }
  }
  unint64_t v9 = 0;
  char v4 = 0;
LABEL_34:
  if ((unint64_t)(v9 - v4) > 8) {
    operator new();
  }
  if (v4) {
    operator delete(v4);
  }
  return (unint64_t)(v9 - v4) > 8;
}

uint64_t sub_1CD255E5C(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCFE830;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F2649108;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFE838, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CD255F7C;
    v5[1] = &PassRegistry;
    char v4 = v5;
    std::__call_once(&qword_1EBCFE838, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void llvm::initializeUnifyLoopExitsLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFE838, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CD255F7C;
    v4[1] = &v2;
    BOOL v3 = v4;
    std::__call_once(&qword_1EBCFE838, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD255F7C(llvm *a1, llvm::PassRegistry *a2)
{
}

void sub_1CD25602C()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::getLoopsInPreorder();
}

void sub_1CD256D88(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD256DC0(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&unk_1EA61F34D);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&unk_1EA61F34D);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::LoopInfoWrapperPass::ID);

  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
}

void sub_1CD256E74(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (v3 == v4)
  {
LABEL_4:
    uint64_t v5 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v3 != &llvm::LoopInfoWrapperPass::ID)
    {
      v3 += 16;
      if (v3 == v4) {
        goto LABEL_4;
      }
    }
    uint64_t v5 = *(void *)(v3 + 8);
  }
  (*(void (**)(uint64_t, void *))(*(void *)v5 + 96))(v5, &llvm::LoopInfoWrapperPass::ID);
  uint64_t v6 = *(uint64_t **)(a1 + 8);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  if (v7 == v8)
  {
LABEL_9:
    uint64_t v9 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v7 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v7 += 16;
      if (v7 == v8) {
        goto LABEL_9;
      }
    }
    uint64_t v9 = *(void *)(v7 + 8);
  }
  (*(void (**)(uint64_t, void *))(*(void *)v9 + 96))(v9, &llvm::DominatorTreeWrapperPass::ID);

  sub_1CD25602C();
}

void sub_1CD256F84()
{
}

void sub_1CD256FC0(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[2];
  unint64_t v5 = a1[1];
  if (v5 >= v4)
  {
    uint64_t v11 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v5 - *a1) >> 3);
    if ((unint64_t)(v11 + 1) > 0x2E8BA2E8BA2E8BALL) {
      abort();
    }
    unint64_t v12 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v4 - *a1) >> 3);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= v11 + 1) {
      uint64_t v13 = v11 + 1;
    }
    if (v12 >= 0x1745D1745D1745DLL) {
      unint64_t v14 = 0x2E8BA2E8BA2E8BALL;
    }
    else {
      unint64_t v14 = v13;
    }
    uint64_t v29 = a1 + 2;
    if (v14 > 0x2E8BA2E8BA2E8BALL) {
      sub_1CB833614();
    }
    uint64_t v15 = 88 * v14;
    unint64_t v16 = (char *)operator new(88 * v14);
    uint64_t v17 = &v16[88 * v11];
    __p = v16;
    uint64_t v26 = v17;
    uint64_t v28 = &v16[v15];
    *(void *)uint64_t v17 = *(void *)a2;
    *((void *)v17 + 1) = v17 + 24;
    uint64_t v18 = v17 + 8;
    *((void *)v17 + 2) = 0x800000000;
    unsigned int v19 = *(_DWORD *)(a2 + 16);
    if (v19 && v18 != (void *)(a2 + 8))
    {
      uint64_t v20 = *(const void **)(a2 + 8);
      if (v20 == (const void *)(a2 + 24))
      {
        if (v19 >= 9)
        {
          *((_DWORD *)v17 + 4) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(v17 + 24, v20, 8 * *(unsigned int *)(a2 + 16));
        *((_DWORD *)v17 + 4) = v19;
      }
      else
      {
        *uint64_t v18 = v20;
        int v24 = *(_DWORD *)(a2 + 20);
        *((_DWORD *)v17 + 4) = v19;
        *((_DWORD *)v17 + 5) = v24;
        *(void *)(a2 + 8) = a2 + 24;
        *(_DWORD *)(a2 + 20) = 0;
      }
      *(_DWORD *)(a2 + 16) = 0;
    }
    int32x2_t v27 = v17 + 88;
    sub_1CD778470(a1, &__p);
    uint64_t v10 = a1[1];
    uint64_t v21 = v26;
    for (int i = v27; i != v21; i -= 88)
    {
      uint64_t v23 = (char *)*((void *)i - 10);
      if (i - 64 != v23) {
        free(v23);
      }
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else
  {
    *(void *)unint64_t v5 = *(void *)a2;
    *(void *)(v5 + 8) = v5 + 24;
    *(void *)(v5 + 16) = 0x800000000;
    unsigned int v6 = *(_DWORD *)(a2 + 16);
    if (v6) {
      BOOL v7 = v5 == a2;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      uint64_t v8 = *(void *)(a2 + 8);
      uint64_t v9 = (const void *)(a2 + 24);
      if (v8 == a2 + 24)
      {
        if (v6 >= 9) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy((void *)(v5 + 24), v9, 8 * *(unsigned int *)(a2 + 16));
        *(_DWORD *)(v5 + 16) = v6;
      }
      else
      {
        *(void *)(v5 + 8) = v8;
        *(_DWORD *)(v5 + 16) = v6;
        *(_DWORD *)(v5 + 20) = *(_DWORD *)(a2 + 20);
        *(void *)(a2 + 8) = v9;
        *(_DWORD *)(a2 + 20) = 0;
      }
      *(_DWORD *)(a2 + 16) = 0;
    }
    uint64_t v10 = v5 + 88;
  }
  a1[1] = v10;
}

void llvm::initializeTransformUtils(llvm *this, llvm::PassRegistry *a2)
{
  llvm::initializeAGXShaderCanonicalizerPass(this, a2);
  llvm::initializeAddDiscriminatorsLegacyPassPass(this, v3);
  llvm::initializeAssumeSimplifyPassLegacyPassPass(this, v4);
  llvm::initializeAssumeBuilderPassLegacyPassPass(this, v5);
  llvm::initializeBreakCriticalEdgesPass(this, v6);
  llvm::initializeCanonicalizeAliasesLegacyPassPass(this, v7);
  llvm::initializeCanonicalizeFreezeInLoopsPass(this, v8);
  llvm::initializeInstNamerPass(this, v9);
  llvm::initializeLCSSAWrapperPassPass(this, v10);
  llvm::initializeLibCallsShrinkWrapLegacyPassPass(this, v11);
  llvm::initializeLoopSimplifyPass(this, v12);
  llvm::initializeLowerGlobalDtorsLegacyPassPass(this, v13);
  llvm::initializeLowerInvokeLegacyPassPass(this, v14);
  llvm::initializeLowerSwitchLegacyPassPass(this, v15);
  llvm::initializeNameAnonGlobalLegacyPassPass(this, v16);
  llvm::initializePromoteLegacyPassPass(this, v17);
  llvm::initializeStripNonLineTableDebugLegacyPassPass(this, v18);
  llvm::initializeUnifyFunctionExitNodesLegacyPassPass(this, v19);
  llvm::initializeMetaRenamerPass(this, v20);
  llvm::initializeStripGCRelocatesLegacyPass(this, v21);
  llvm::initializePredicateInfoPrinterLegacyPassPass(this, v22);
  llvm::initializeInjectTLIMappingsLegacyPass(this, v23);
  llvm::initializeFixIrreduciblePass(this, v24);

  llvm::initializeUnifyLoopExitsLegacyPassPass(this, v25);
}

void LLVMAddLowerSwitchPass(llvm *a1)
{
}

void LLVMAddPromoteMemoryToRegisterPass(llvm *a1)
{
}

void LLVMAddAddDiscriminatorsPass(llvm *a1)
{
}

uint64_t llvm::GetItrKind(llvm *this)
{
  int v1 = (int)this;
  uint64_t result = 0;
  if (v1 > 2453)
  {
    switch(v1)
    {
      case 2528:
      case 2529:
      case 2530:
      case 2531:
      case 2532:
      case 2533:
      case 2534:
      case 2535:
LABEL_5:
        uint64_t result = 11;
        break;
      case 2536:
      case 2537:
      case 2538:
      case 2539:
      case 2540:
      case 2541:
      case 2542:
      case 2543:
LABEL_12:
        uint64_t result = 8;
        break;
      default:
        return result;
    }
  }
  else if (v1 <= 0x995)
  {
    switch(v1)
    {
      case 2115:
      case 2116:
      case 2117:
      case 2118:
      case 2119:
      case 2120:
      case 2121:
      case 2122:
LABEL_13:
        uint64_t result = 12;
        break;
      case 2123:
      case 2124:
      case 2125:
      case 2126:
      case 2127:
      case 2128:
      case 2129:
      case 2130:
LABEL_10:
        uint64_t result = 9;
        break;
      default:
        JUMPOUT(0);
    }
  }
  else
  {
    switch(v1)
    {
      case 2309:
      case 2310:
      case 2311:
      case 2312:
      case 2313:
      case 2314:
      case 2315:
      case 2316:
        goto LABEL_13;
      case 2317:
      case 2318:
      case 2319:
      case 2320:
      case 2321:
      case 2322:
      case 2323:
      case 2324:
        uint64_t result = 10;
        break;
      case 2325:
      case 2326:
      case 2327:
      case 2328:
      case 2329:
      case 2330:
      case 2331:
      case 2332:
        goto LABEL_5;
      case 2333:
      case 2334:
      case 2335:
      case 2336:
        return result;
      case 2337:
      case 2338:
      case 2339:
      case 2340:
      case 2341:
      case 2342:
      case 2343:
      case 2344:
        goto LABEL_10;
      case 2345:
      case 2346:
      case 2347:
      case 2348:
      case 2349:
      case 2350:
      case 2351:
      case 2352:
        uint64_t result = 7;
        break;
      case 2353:
      case 2354:
      case 2355:
      case 2356:
      case 2357:
      case 2358:
      case 2359:
      case 2360:
        goto LABEL_12;
      default:
        switch(v1)
        {
          case 1886:
          case 1887:
          case 1888:
          case 1889:
          case 1890:
          case 1891:
          case 1892:
          case 1893:
            uint64_t result = 6;
            break;
          case 1894:
          case 1895:
          case 1896:
          case 1897:
          case 1898:
          case 1899:
          case 1900:
          case 1901:
            uint64_t result = 4;
            break;
          case 1902:
          case 1903:
          case 1904:
          case 1905:
          case 1906:
          case 1907:
          case 1908:
          case 1909:
            uint64_t result = 5;
            break;
          case 1924:
          case 1925:
            uint64_t result = 13;
            break;
          case 1927:
          case 1928:
          case 1929:
          case 1930:
          case 1931:
          case 1932:
          case 1933:
          case 1934:
            uint64_t result = 3;
            break;
          case 1935:
          case 1936:
          case 1937:
          case 1938:
          case 1939:
          case 1940:
          case 1941:
          case 1942:
            uint64_t result = 1;
            break;
          case 1943:
          case 1944:
          case 1945:
          case 1946:
          case 1947:
          case 1948:
          case 1949:
          case 1950:
            uint64_t result = 2;
            break;
          default:
            return result;
        }
        break;
    }
  }
  return result;
}

uint64_t llvm::IsItrProj(unsigned int a1)
{
  return (a1 < 0xA) & (0x38Eu >> a1);
}

uint64_t llvm::getItrIntrinsic(int a1, int a2, int a3, int a4)
{
  if (a2 == 7)
  {
LABEL_2:
    unint64_t v4 = (unsigned int *)&unk_1CFB33354;
    unint64_t v5 = (unsigned int *)&unk_1CFB332F4;
LABEL_3:
    if (!a3) {
      unint64_t v4 = v5;
    }
    return v4[4 * a4 + a1 - 1];
  }
  else
  {
    switch(a2)
    {
      case 1:
        goto LABEL_2;
      case 2:
      case 8:
        unint64_t v4 = (unsigned int *)&unk_1CFB33374;
        unint64_t v5 = (unsigned int *)&unk_1CFB33314;
        goto LABEL_3;
      case 3:
      case 9:
        unint64_t v4 = (unsigned int *)&unk_1CFB33394;
        unint64_t v5 = (unsigned int *)&unk_1CFB33334;
        goto LABEL_3;
      case 4:
      case 10:
        unint64_t v4 = (unsigned int *)&unk_1CFB33414;
        unint64_t v5 = (unsigned int *)&unk_1CFB333B4;
        goto LABEL_3;
      case 5:
      case 11:
        unint64_t v4 = (unsigned int *)&unk_1CFB33434;
        unint64_t v5 = (unsigned int *)&unk_1CFB333D4;
        goto LABEL_3;
      case 6:
      case 12:
        unint64_t v4 = (unsigned int *)&unk_1CFB33454;
        unint64_t v5 = (unsigned int *)&unk_1CFB333F4;
        goto LABEL_3;
      case 7:
        __break(1u);
        goto LABEL_14;
      case 13:
LABEL_14:
        if (a3) {
          uint64_t result = 1925;
        }
        else {
          uint64_t result = 1924;
        }
        break;
      default:
        llvm::llvm_unreachable_internal(0, 0, 0);
    }
  }
  return result;
}

BOOL llvm::isTextureIntrinsic(llvm *this)
{
  return (this - 2022) < 0x40;
}

uint64_t llvm::isFDivFeedingProjSmp(llvm *this, llvm::Instruction *a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (!v2) {
    return 0;
  }
  while (1)
  {
    uint64_t v3 = *(void *)(v2 + 24);
    int v4 = *(unsigned __int8 *)(v3 + 16);
    if (v4 == 74)
    {
      uint64_t v5 = *(void *)(v3 + 8);
      if (!v5)
      {
        uint64_t v6 = v2;
        goto LABEL_12;
      }
      uint64_t v6 = v2;
      if (*(void *)(v5 + 8)) {
        goto LABEL_12;
      }
      uint64_t v3 = *(void *)(v5 + 24);
      int v4 = *(unsigned __int8 *)(v3 + 16);
      uint64_t v6 = v5;
    }
    else
    {
      uint64_t v6 = v2;
    }
    while (v4 == 90)
    {
      uint64_t v7 = *(void *)(v3 + 8);
      if (!v7 || *(void *)(v7 + 8)) {
        break;
      }
      uint64_t v6 = *(void *)(v3 + 8);
      uint64_t v3 = *(void *)(v7 + 24);
      int v4 = *(unsigned __int8 *)(v3 + 16);
    }
LABEL_12:
    uint64_t v8 = *(void *)(v6 + 24);
    int v9 = *(_DWORD *)(v8 + 20);
    uint64_t v10 = (v9 & 0x40000000) != 0 ? *(void *)(v8 - 8) : v8 - 32 * (v9 & 0x7FFFFFF);
    if (((v6 - v10) & 0x1FFFFFFFE0) == 0x80 && *(unsigned char *)(v3 + 16) == 84)
    {
      uint64_t v11 = *(void *)(v3 - 32);
      if (v11)
      {
        if (!*(unsigned char *)(v11 + 16)
          && *(void *)(v11 + 24) == *(void *)(v3 + 72)
          && (*(unsigned char *)(v11 + 33) & 0x20) != 0
          && (*(_DWORD *)(v11 + 36) - 2086) > 0xFFFFFFBF)
        {
          return 1;
        }
      }
    }
    uint64_t v2 = *(void *)(v2 + 8);
    if (!v2) {
      return 0;
    }
  }
}

uint64_t llvm::SampleInfo::SampleInfo(uint64_t result, int a2, int a3)
{
  uint64_t v3 = 0;
  v59[13] = *MEMORY[0x1E4F143B8];
  *(void *)&long long v4 = -1;
  *((void *)&v4 + 1) = -1;
  *(_OWORD *)(result + 28) = v4;
  *(unsigned char *)(result + 2) = 0;
  *(_DWORD *)(result + 4) = -1;
  *(_WORD *)(result + 8) = 0;
  *(_OWORD *)(result + 12) = v4;
  *(_OWORD *)(result + 44) = v4;
  *(_WORD *)(result + 60) = 0;
  *(unsigned char *)(result + 62) = 0;
  *(unsigned char *)(result + 96) = 0;
  *(_DWORD *)(result + 100) = a2;
  v59[0] = result + 48;
  v59[1] = result + 52;
  v59[2] = result + 56;
  v59[3] = result + 64;
  v59[4] = result + 68;
  v59[5] = result + 72;
  v59[6] = result + 76;
  v59[7] = result + 80;
  *(_DWORD *)(result + 88) = -1;
  v59[8] = result + 84;
  v59[9] = result + 92;
  v59[10] = result + 28;
  v59[11] = result + 40;
  v59[12] = result + 88;
  do
    *(_DWORD *)v59[v3++] = -1;
  while (v3 != 13);
  switch(a2)
  {
    case 1282:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 88) = 8;
      int v5 = 1283;
      goto LABEL_406;
    case 1283:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 88) = 8;
      int v5 = 1282;
      goto LABEL_406;
    case 1284:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 88) = 8;
      int v5 = 1285;
      goto LABEL_406;
    case 1285:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 88) = 8;
      int v5 = 1284;
      goto LABEL_406;
    case 1286:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1287;
      goto LABEL_406;
    case 1287:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1286;
      goto LABEL_406;
    case 1288:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1289;
      goto LABEL_406;
    case 1289:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1288;
      goto LABEL_406;
    case 1290:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1291;
      goto LABEL_406;
    case 1291:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1290;
      goto LABEL_406;
    case 1292:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1293;
      goto LABEL_406;
    case 1293:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1292;
      goto LABEL_406;
    case 1294:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1295;
      goto LABEL_406;
    case 1295:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1294;
      goto LABEL_406;
    case 1296:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1297;
      goto LABEL_406;
    case 1297:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1296;
      goto LABEL_406;
    case 1298:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1299;
      goto LABEL_406;
    case 1299:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1298;
      goto LABEL_406;
    case 1300:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1301;
      goto LABEL_406;
    case 1301:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1300;
      goto LABEL_406;
    case 1302:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1303;
      goto LABEL_406;
    case 1303:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1302;
      goto LABEL_406;
    case 1304:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1305;
      goto LABEL_406;
    case 1305:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1304;
      goto LABEL_406;
    case 1306:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 88) = 8;
      int v5 = 1307;
      goto LABEL_406;
    case 1307:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 88) = 8;
      int v5 = 1306;
      goto LABEL_406;
    case 1308:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 88) = 8;
      int v5 = 1309;
      goto LABEL_406;
    case 1309:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 88) = 8;
      int v5 = 1308;
      goto LABEL_406;
    case 1310:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1311;
      goto LABEL_406;
    case 1311:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1310;
      goto LABEL_406;
    case 1312:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1313;
      goto LABEL_406;
    case 1313:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1312;
      goto LABEL_406;
    case 1314:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 88) = 8;
      int v5 = 1315;
      goto LABEL_406;
    case 1315:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 88) = 8;
      int v5 = 1314;
      goto LABEL_406;
    case 1316:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 88) = 8;
      int v5 = 1317;
      goto LABEL_406;
    case 1317:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 88) = 8;
      int v5 = 1316;
      goto LABEL_406;
    case 1318:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1319;
      goto LABEL_406;
    case 1319:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1318;
      goto LABEL_406;
    case 1320:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1321;
      goto LABEL_406;
    case 1321:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1320;
      goto LABEL_406;
    case 1322:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 76) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1323;
      goto LABEL_406;
    case 1323:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 76) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1322;
      goto LABEL_406;
    case 1324:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 76) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1325;
      goto LABEL_406;
    case 1325:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 76) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1324;
      goto LABEL_406;
    case 1326:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1327;
      goto LABEL_406;
    case 1327:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1326;
      goto LABEL_406;
    case 1328:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1329;
      goto LABEL_406;
    case 1329:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1328;
      goto LABEL_406;
    case 1330:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1331;
      goto LABEL_406;
    case 1331:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1330;
      goto LABEL_406;
    case 1332:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1333;
      goto LABEL_406;
    case 1333:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1332;
      goto LABEL_406;
    case 1334:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1335;
      goto LABEL_406;
    case 1335:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1334;
      goto LABEL_406;
    case 1336:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1337;
      goto LABEL_406;
    case 1337:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1336;
      goto LABEL_406;
    case 1338:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(unsigned char *)(result + 62) = 1;
      *(void *)(result + 84) = 0xA00000009;
      int v5 = 1339;
      goto LABEL_406;
    case 1339:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(unsigned char *)(result + 62) = 1;
      *(void *)(result + 84) = 0xA00000009;
      int v5 = 1338;
      goto LABEL_406;
    case 1340:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(unsigned char *)(result + 62) = 1;
      *(void *)(result + 84) = 0xA00000009;
      int v5 = 1341;
      goto LABEL_406;
    case 1341:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(unsigned char *)(result + 62) = 1;
      *(void *)(result + 84) = 0xA00000009;
      int v5 = 1340;
      goto LABEL_406;
    case 1342:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(unsigned char *)(result + 62) = 1;
      *(void *)(result + 80) = 0xA00000009;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1343;
      goto LABEL_406;
    case 1343:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(unsigned char *)(result + 62) = 1;
      *(void *)(result + 80) = 0xA00000009;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1342;
      goto LABEL_406;
    case 1344:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(unsigned char *)(result + 62) = 1;
      *(void *)(result + 80) = 0xA00000009;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1345;
      goto LABEL_406;
    case 1345:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(unsigned char *)(result + 62) = 1;
      *(void *)(result + 80) = 0xA00000009;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1344;
      goto LABEL_406;
    case 1346:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1347;
      goto LABEL_406;
    case 1347:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1346;
      goto LABEL_406;
    case 1348:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1349;
      goto LABEL_406;
    case 1349:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1348;
      goto LABEL_406;
    case 1350:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 80) = 11;
      *(_DWORD *)(result + 88) = 12;
      int v5 = 1351;
      goto LABEL_406;
    case 1351:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 80) = 11;
      *(_DWORD *)(result + 88) = 12;
      int v5 = 1350;
      goto LABEL_406;
    case 1352:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 80) = 11;
      *(_DWORD *)(result + 88) = 12;
      int v5 = 1353;
      goto LABEL_406;
    case 1353:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 80) = 11;
      *(_DWORD *)(result + 88) = 12;
      int v5 = 1352;
      goto LABEL_406;
    case 1354:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1355;
      goto LABEL_406;
    case 1355:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1354;
      goto LABEL_406;
    case 1356:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1357;
      goto LABEL_406;
    case 1357:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1356;
      goto LABEL_406;
    case 1358:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1359;
      goto LABEL_406;
    case 1359:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1358;
      goto LABEL_406;
    case 1360:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1361;
      goto LABEL_406;
    case 1361:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1360;
      goto LABEL_406;
    case 1362:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1363;
      goto LABEL_406;
    case 1363:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1362;
      goto LABEL_406;
    case 1364:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1365;
      goto LABEL_406;
    case 1365:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1364;
      goto LABEL_406;
    case 1366:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1367;
      goto LABEL_406;
    case 1367:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1366;
      goto LABEL_406;
    case 1368:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1369;
      goto LABEL_406;
    case 1369:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1368;
      goto LABEL_406;
    case 1370:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(void *)(result + 76) = 0xA00000009;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1371;
      goto LABEL_406;
    case 1371:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(void *)(result + 76) = 0xA00000009;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1370;
      goto LABEL_406;
    case 1372:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(void *)(result + 76) = 0xA00000009;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1373;
      goto LABEL_406;
    case 1373:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(void *)(result + 76) = 0xA00000009;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1372;
      goto LABEL_406;
    case 1374:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 76) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1375;
      goto LABEL_406;
    case 1375:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 76) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1374;
      goto LABEL_406;
    case 1376:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(unsigned char *)(result + 62) = 1;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1377;
      goto LABEL_406;
    case 1377:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(unsigned char *)(result + 62) = 1;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1376;
      goto LABEL_406;
    case 1378:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(unsigned char *)(result + 62) = 1;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1379;
      goto LABEL_406;
    case 1379:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(unsigned char *)(result + 62) = 1;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1378;
      goto LABEL_406;
    case 1380:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 72) = 10;
      *(_DWORD *)(result + 88) = 12;
      int v5 = 1381;
      goto LABEL_406;
    case 1381:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 72) = 10;
      *(_DWORD *)(result + 88) = 12;
      int v5 = 1380;
      goto LABEL_406;
    case 1382:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 72) = 10;
      *(_DWORD *)(result + 80) = 12;
      *(_DWORD *)(result + 88) = 13;
      int v5 = 1383;
      goto LABEL_406;
    case 1383:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 72) = 10;
      *(_DWORD *)(result + 80) = 12;
      *(_DWORD *)(result + 88) = 13;
      int v5 = 1382;
      goto LABEL_406;
    case 1384:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(void *)(result + 64) = 0xA00000009;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1385;
      goto LABEL_406;
    case 1385:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(void *)(result + 64) = 0xA00000009;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1384;
      goto LABEL_406;
    case 1386:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(void *)(result + 64) = 0xA00000009;
      *(_DWORD *)(result + 80) = 11;
      *(_DWORD *)(result + 88) = 12;
      int v5 = 1387;
      goto LABEL_406;
    case 1387:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(void *)(result + 64) = 0xA00000009;
      *(_DWORD *)(result + 80) = 11;
      *(_DWORD *)(result + 88) = 12;
      int v5 = 1386;
      goto LABEL_406;
    case 1388:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 64) = 9;
      *(void *)(result + 76) = 0xB0000000ALL;
      *(_DWORD *)(result + 88) = 12;
      int v5 = 1389;
      goto LABEL_406;
    case 1389:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 64) = 9;
      *(void *)(result + 76) = 0xB0000000ALL;
      *(_DWORD *)(result + 88) = 12;
      int v5 = 1388;
      goto LABEL_406;
    case 1390:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1391;
      goto LABEL_406;
    case 1391:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1390;
      goto LABEL_406;
    case 1392:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1393;
      goto LABEL_406;
    case 1393:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1392;
      goto LABEL_406;
    case 1394:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1395;
      goto LABEL_406;
    case 1395:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1394;
      goto LABEL_406;
    case 1396:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1397;
      goto LABEL_406;
    case 1397:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1396;
      goto LABEL_406;
    case 1398:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 62) = 1;
      *(void *)(result + 84) = 0x900000008;
      int v5 = 1399;
      goto LABEL_406;
    case 1399:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 62) = 1;
      *(void *)(result + 84) = 0x900000008;
      int v5 = 1398;
      goto LABEL_406;
    case 1400:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 62) = 1;
      *(void *)(result + 84) = 0x900000008;
      int v5 = 1401;
      goto LABEL_406;
    case 1401:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 62) = 1;
      *(void *)(result + 84) = 0x900000008;
      int v5 = 1400;
      goto LABEL_406;
    case 1402:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 62) = 1;
      *(void *)(result + 80) = 0x900000008;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1403;
      goto LABEL_406;
    case 1403:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 62) = 1;
      *(void *)(result + 80) = 0x900000008;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1402;
      goto LABEL_406;
    case 1404:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 62) = 1;
      *(void *)(result + 80) = 0x900000008;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1405;
      goto LABEL_406;
    case 1405:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 62) = 1;
      *(void *)(result + 80) = 0x900000008;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1404;
      goto LABEL_406;
    case 1406:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1407;
      goto LABEL_406;
    case 1407:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1406;
      goto LABEL_406;
    case 1408:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1409;
      goto LABEL_406;
    case 1409:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1408;
      goto LABEL_406;
    case 1410:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1411;
      goto LABEL_406;
    case 1411:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1410;
      goto LABEL_406;
    case 1412:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1413;
      goto LABEL_406;
    case 1413:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1412;
      goto LABEL_406;
    case 1414:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1415;
      goto LABEL_406;
    case 1415:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1414;
      goto LABEL_406;
    case 1416:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1417;
      goto LABEL_406;
    case 1417:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1416;
      goto LABEL_406;
    case 1418:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1419;
      goto LABEL_406;
    case 1419:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1418;
      goto LABEL_406;
    case 1420:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1421;
      goto LABEL_406;
    case 1421:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1420;
      goto LABEL_406;
    case 1422:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1423;
      goto LABEL_406;
    case 1423:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1422;
      goto LABEL_406;
    case 1424:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1425;
      goto LABEL_406;
    case 1425:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1424;
      goto LABEL_406;
    case 1426:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1427;
      goto LABEL_406;
    case 1427:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1426;
      goto LABEL_406;
    case 1428:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1429;
      goto LABEL_406;
    case 1429:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1428;
      goto LABEL_406;
    case 1430:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1431;
      goto LABEL_406;
    case 1431:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1430;
      goto LABEL_406;
    case 1432:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1433;
      goto LABEL_406;
    case 1433:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1432;
      goto LABEL_406;
    case 1434:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(void *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1435;
      goto LABEL_406;
    case 1435:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(void *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1434;
      goto LABEL_406;
    case 1436:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(void *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1437;
      goto LABEL_406;
    case 1437:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(void *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1436;
      goto LABEL_406;
    case 1438:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(void *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1439;
      goto LABEL_406;
    case 1439:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(void *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1438;
      goto LABEL_406;
    case 1440:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(void *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1441;
      goto LABEL_406;
    case 1441:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(void *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1440;
      goto LABEL_406;
    case 1442:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(void *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1443;
      goto LABEL_406;
    case 1443:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(void *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1442;
      goto LABEL_406;
    case 1444:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(void *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1445;
      goto LABEL_406;
    case 1445:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(void *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1444;
      goto LABEL_406;
    case 1446:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(void *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1447;
      goto LABEL_406;
    case 1447:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(void *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1446;
      goto LABEL_406;
    case 1448:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(void *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1449;
      goto LABEL_406;
    case 1449:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(void *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1448;
      goto LABEL_406;
    case 1450:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(void *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1451;
      goto LABEL_406;
    case 1451:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(void *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1450;
      goto LABEL_406;
    case 1452:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(void *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1453;
      goto LABEL_406;
    case 1453:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(void *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1452;
      goto LABEL_406;
    case 1454:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1455;
      goto LABEL_406;
    case 1455:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1454;
      goto LABEL_406;
    case 1456:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1457;
      goto LABEL_406;
    case 1457:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1456;
      goto LABEL_406;
    case 1458:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1459;
      goto LABEL_406;
    case 1459:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1458;
      goto LABEL_406;
    case 1460:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1461;
      goto LABEL_406;
    case 1461:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1460;
      goto LABEL_406;
    case 1462:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1463;
      goto LABEL_406;
    case 1463:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1462;
      goto LABEL_406;
    case 1464:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1465;
      goto LABEL_406;
    case 1465:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1464;
      goto LABEL_406;
    case 1466:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1467;
      goto LABEL_406;
    case 1467:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1466;
      goto LABEL_406;
    case 1468:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1469;
      goto LABEL_406;
    case 1469:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1468;
      goto LABEL_406;
    case 1470:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(void *)(result + 76) = 0x900000008;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1471;
      goto LABEL_406;
    case 1471:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(void *)(result + 76) = 0x900000008;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1470;
      goto LABEL_406;
    case 1472:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(void *)(result + 76) = 0x900000008;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1473;
      goto LABEL_406;
    case 1473:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(void *)(result + 76) = 0x900000008;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1472;
      goto LABEL_406;
    case 1474:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1475;
      goto LABEL_406;
    case 1475:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1474;
      goto LABEL_406;
    case 1476:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 62) = 1;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1477;
      goto LABEL_406;
    case 1477:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 62) = 1;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1476;
      goto LABEL_406;
    case 1478:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 62) = 1;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1479;
      goto LABEL_406;
    case 1479:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 62) = 1;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1478;
      goto LABEL_406;
    case 1480:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1481;
      goto LABEL_406;
    case 1481:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1480;
      goto LABEL_406;
    case 1482:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 80) = 11;
      *(_DWORD *)(result + 88) = 12;
      int v5 = 1483;
      goto LABEL_406;
    case 1483:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 80) = 11;
      *(_DWORD *)(result + 88) = 12;
      int v5 = 1482;
      goto LABEL_406;
    case 1484:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(void *)(result + 64) = 0x900000008;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1485;
      goto LABEL_406;
    case 1485:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(void *)(result + 64) = 0x900000008;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1484;
      goto LABEL_406;
    case 1486:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(void *)(result + 64) = 0x900000008;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1487;
      goto LABEL_406;
    case 1487:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(void *)(result + 64) = 0x900000008;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1486;
      goto LABEL_406;
    case 1488:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 64) = 8;
      *(void *)(result + 76) = 0xA00000009;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1489;
      goto LABEL_406;
    case 1489:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 64) = 8;
      *(void *)(result + 76) = 0xA00000009;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1488;
      goto LABEL_406;
    case 1490:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 76) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1491;
      goto LABEL_406;
    case 1491:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 76) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1490;
      goto LABEL_406;
    case 1492:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 76) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1493;
      goto LABEL_406;
    case 1493:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 76) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1492;
      goto LABEL_406;
    case 1494:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1495;
      goto LABEL_406;
    case 1495:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1494;
      goto LABEL_406;
    case 1496:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1497;
      goto LABEL_406;
    case 1497:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1496;
      goto LABEL_406;
    case 1498:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1499;
      goto LABEL_406;
    case 1499:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1498;
      goto LABEL_406;
    case 1500:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1501;
      goto LABEL_406;
    case 1501:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1500;
      goto LABEL_406;
    case 1502:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1503;
      goto LABEL_406;
    case 1503:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1502;
      goto LABEL_406;
    case 1504:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1505;
      goto LABEL_406;
    case 1505:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1504;
      goto LABEL_406;
    case 1506:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 80) = 11;
      *(_DWORD *)(result + 88) = 12;
      int v5 = 1507;
      goto LABEL_406;
    case 1507:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 80) = 11;
      *(_DWORD *)(result + 88) = 12;
      int v5 = 1506;
      goto LABEL_406;
    case 1508:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 80) = 11;
      *(_DWORD *)(result + 88) = 12;
      int v5 = 1509;
      goto LABEL_406;
    case 1509:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 80) = 11;
      *(_DWORD *)(result + 88) = 12;
      int v5 = 1508;
      goto LABEL_406;
    case 1510:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1511;
      goto LABEL_406;
    case 1511:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1510;
      goto LABEL_406;
    case 1512:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1513;
      goto LABEL_406;
    case 1513:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1512;
      goto LABEL_406;
    case 1514:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1515;
      goto LABEL_406;
    case 1515:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1514;
      goto LABEL_406;
    case 1516:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1517;
      goto LABEL_406;
    case 1517:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1516;
      goto LABEL_406;
    case 1518:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1519;
      goto LABEL_406;
    case 1519:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1518;
      goto LABEL_406;
    case 1520:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1521;
      goto LABEL_406;
    case 1521:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1520;
      goto LABEL_406;
    case 1522:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1523;
      goto LABEL_406;
    case 1523:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1522;
      goto LABEL_406;
    case 1524:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1525;
      goto LABEL_406;
    case 1525:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1524;
      goto LABEL_406;
    case 1526:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(void *)(result + 76) = 0x900000008;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1527;
      goto LABEL_406;
    case 1527:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(void *)(result + 76) = 0x900000008;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1526;
      goto LABEL_406;
    case 1528:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(void *)(result + 76) = 0x900000008;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1529;
      goto LABEL_406;
    case 1529:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(void *)(result + 76) = 0x900000008;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1528;
      goto LABEL_406;
    case 1530:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 61) = 1;
      *(_DWORD *)(result + 76) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1531;
      goto LABEL_406;
    case 1531:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 61) = 1;
      *(_DWORD *)(result + 76) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1530;
      goto LABEL_406;
    case 1532:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(unsigned char *)(result + 61) = 1;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1533;
      goto LABEL_406;
    case 1533:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(unsigned char *)(result + 61) = 1;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1532;
      goto LABEL_406;
    case 1534:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_WORD *)(result + 61) = 257;
      *(void *)(result + 84) = 0xA00000009;
      int v5 = 1535;
      goto LABEL_406;
    case 1535:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_WORD *)(result + 61) = 257;
      *(void *)(result + 84) = 0xA00000009;
      int v5 = 1534;
      goto LABEL_406;
    case 1536:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(unsigned char *)(result + 61) = 1;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 12;
      int v5 = 1537;
      goto LABEL_406;
    case 1537:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(unsigned char *)(result + 61) = 1;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 12;
      int v5 = 1536;
      goto LABEL_406;
    case 1538:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(unsigned char *)(result + 61) = 1;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1539;
      goto LABEL_406;
    case 1539:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(unsigned char *)(result + 61) = 1;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1538;
      goto LABEL_406;
    case 1540:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_WORD *)(result + 61) = 257;
      *(void *)(result + 84) = 0x900000008;
      int v5 = 1541;
      goto LABEL_406;
    case 1541:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_WORD *)(result + 61) = 257;
      *(void *)(result + 84) = 0x900000008;
      int v5 = 1540;
      goto LABEL_406;
    case 1542:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 61) = 1;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1543;
      goto LABEL_406;
    case 1543:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 61) = 1;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1542;
      goto LABEL_406;
    case 1544:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 61) = 1;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1545;
      goto LABEL_406;
    case 1545:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 61) = 1;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1544;
      goto LABEL_406;
    case 1546:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 61) = 1;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1547;
      goto LABEL_406;
    case 1547:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 61) = 1;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1546;
      goto LABEL_406;
    case 1548:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_WORD *)(result + 61) = 257;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1549;
      goto LABEL_406;
    case 1549:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_WORD *)(result + 61) = 257;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1548;
      goto LABEL_406;
    case 1550:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 61) = 1;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 12;
      int v5 = 1551;
      goto LABEL_406;
    case 1551:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 61) = 1;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 12;
      int v5 = 1550;
      goto LABEL_406;
    case 1552:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 61) = 1;
      *(void *)(result + 64) = 0x900000008;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1553;
      goto LABEL_406;
    case 1553:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 61) = 1;
      *(void *)(result + 64) = 0x900000008;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1552;
      goto LABEL_406;
    case 1554:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 76) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1555;
      goto LABEL_406;
    case 1555:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 76) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1554;
      goto LABEL_406;
    case 1556:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 76) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1557;
      goto LABEL_406;
    case 1557:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 76) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1556;
      goto LABEL_406;
    case 1558:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1559;
      goto LABEL_406;
    case 1559:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1558;
      goto LABEL_406;
    case 1560:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1561;
      goto LABEL_406;
    case 1561:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1560;
      goto LABEL_406;
    case 1562:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(unsigned char *)(result + 62) = 1;
      *(void *)(result + 84) = 0xA00000009;
      int v5 = 1563;
      goto LABEL_406;
    case 1563:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(unsigned char *)(result + 62) = 1;
      *(void *)(result + 84) = 0xA00000009;
      int v5 = 1562;
      goto LABEL_406;
    case 1564:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(unsigned char *)(result + 62) = 1;
      *(void *)(result + 84) = 0xA00000009;
      int v5 = 1565;
      goto LABEL_406;
    case 1565:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(unsigned char *)(result + 62) = 1;
      *(void *)(result + 84) = 0xA00000009;
      int v5 = 1564;
      goto LABEL_406;
    case 1566:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 12;
      int v5 = 1567;
      goto LABEL_406;
    case 1567:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 12;
      int v5 = 1566;
      goto LABEL_406;
    case 1568:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 12;
      int v5 = 1569;
      goto LABEL_406;
    case 1569:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 12;
      int v5 = 1568;
      goto LABEL_406;
    case 1570:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1571;
      goto LABEL_406;
    case 1571:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1570;
      goto LABEL_406;
    case 1572:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1573;
      goto LABEL_406;
    case 1573:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1572;
      goto LABEL_406;
    case 1574:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 76) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1575;
      goto LABEL_406;
    case 1575:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 76) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1574;
      goto LABEL_406;
    case 1576:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(unsigned char *)(result + 62) = 1;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1577;
      goto LABEL_406;
    case 1577:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(unsigned char *)(result + 62) = 1;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1576;
      goto LABEL_406;
    case 1578:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 72) = 10;
      *(_DWORD *)(result + 88) = 13;
      int v5 = 1579;
      goto LABEL_406;
    case 1579:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 72) = 10;
      *(_DWORD *)(result + 88) = 13;
      int v5 = 1578;
      goto LABEL_406;
    case 1580:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(void *)(result + 64) = 0xA00000009;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1581;
      goto LABEL_406;
    case 1581:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(void *)(result + 64) = 0xA00000009;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1580;
      goto LABEL_406;
    case 1582:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(unsigned char *)(result + 62) = 1;
      *(void *)(result + 84) = 0x900000008;
      int v5 = 1583;
      goto LABEL_406;
    case 1583:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(unsigned char *)(result + 62) = 1;
      *(void *)(result + 84) = 0x900000008;
      int v5 = 1582;
      goto LABEL_406;
    case 1584:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(unsigned char *)(result + 62) = 1;
      *(void *)(result + 84) = 0x900000008;
      int v5 = 1585;
      goto LABEL_406;
    case 1585:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(unsigned char *)(result + 62) = 1;
      *(void *)(result + 84) = 0x900000008;
      int v5 = 1584;
      goto LABEL_406;
    case 1586:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1587;
      goto LABEL_406;
    case 1587:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1586;
      goto LABEL_406;
    case 1588:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1589;
      goto LABEL_406;
    case 1589:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1588;
      goto LABEL_406;
    case 1590:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1591;
      goto LABEL_406;
    case 1591:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1590;
      goto LABEL_406;
    case 1592:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1593;
      goto LABEL_406;
    case 1593:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1592;
      goto LABEL_406;
    case 1594:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1595;
      goto LABEL_406;
    case 1595:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1594;
      goto LABEL_406;
    case 1596:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(unsigned char *)(result + 62) = 1;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1597;
      goto LABEL_406;
    case 1597:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(unsigned char *)(result + 62) = 1;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1596;
      goto LABEL_406;
    case 1598:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 12;
      int v5 = 1599;
      goto LABEL_406;
    case 1599:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 12;
      int v5 = 1598;
      goto LABEL_406;
    case 1600:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(void *)(result + 64) = 0x900000008;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1601;
      goto LABEL_406;
    case 1601:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(unsigned char *)(result + 60) = 1;
      *(void *)(result + 64) = 0x900000008;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1600;
      goto LABEL_406;
    case 1602:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1603;
      goto LABEL_406;
    case 1603:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1602;
      goto LABEL_406;
    case 1604:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1605;
      goto LABEL_406;
    case 1605:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1604;
      goto LABEL_406;
    case 1606:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 76) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1607;
      goto LABEL_406;
    case 1607:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 76) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1606;
      goto LABEL_406;
    case 1608:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 76) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1609;
      goto LABEL_406;
    case 1609:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 76) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1608;
      goto LABEL_406;
    case 1610:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1611;
      goto LABEL_406;
    case 1611:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1610;
      goto LABEL_406;
    case 1612:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1613;
      goto LABEL_406;
    case 1613:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1612;
      goto LABEL_406;
    case 1614:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1615;
      goto LABEL_406;
    case 1615:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1614;
      goto LABEL_406;
    case 1616:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1617;
      goto LABEL_406;
    case 1617:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1616;
      goto LABEL_406;
    case 1618:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(unsigned char *)(result + 62) = 1;
      *(void *)(result + 84) = 0xB0000000ALL;
      int v5 = 1619;
      goto LABEL_406;
    case 1619:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(unsigned char *)(result + 62) = 1;
      *(void *)(result + 84) = 0xB0000000ALL;
      int v5 = 1618;
      goto LABEL_406;
    case 1620:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(unsigned char *)(result + 62) = 1;
      *(void *)(result + 84) = 0xB0000000ALL;
      int v5 = 1621;
      goto LABEL_406;
    case 1621:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(unsigned char *)(result + 62) = 1;
      *(void *)(result + 84) = 0xB0000000ALL;
      int v5 = 1620;
      goto LABEL_406;
    case 1622:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 72) = 10;
      *(_DWORD *)(result + 88) = 12;
      int v5 = 1623;
      goto LABEL_406;
    case 1623:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 72) = 10;
      *(_DWORD *)(result + 88) = 12;
      int v5 = 1622;
      goto LABEL_406;
    case 1624:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 72) = 10;
      *(_DWORD *)(result + 88) = 12;
      int v5 = 1625;
      goto LABEL_406;
    case 1625:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 72) = 10;
      *(_DWORD *)(result + 88) = 12;
      int v5 = 1624;
      goto LABEL_406;
    case 1626:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1627;
      goto LABEL_406;
    case 1627:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1626;
      goto LABEL_406;
    case 1628:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1629;
      goto LABEL_406;
    case 1629:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1628;
      goto LABEL_406;
    case 1630:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1631;
      goto LABEL_406;
    case 1631:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1630;
      goto LABEL_406;
    case 1632:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1633;
      goto LABEL_406;
    case 1633:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1632;
      goto LABEL_406;
    case 1634:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1635;
      goto LABEL_406;
    case 1635:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1634;
      goto LABEL_406;
    case 1636:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1637;
      goto LABEL_406;
    case 1637:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1636;
      goto LABEL_406;
    case 1638:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 64) = 10;
      *(_DWORD *)(result + 76) = 11;
      *(_DWORD *)(result + 88) = 12;
      int v5 = 1639;
      goto LABEL_406;
    case 1639:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 64) = 10;
      *(_DWORD *)(result + 76) = 11;
      *(_DWORD *)(result + 88) = 12;
      int v5 = 1638;
      goto LABEL_406;
    case 1640:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(unsigned char *)(result + 62) = 1;
      *(_DWORD *)(result + 64) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1641;
      goto LABEL_406;
    case 1641:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(unsigned char *)(result + 62) = 1;
      *(_DWORD *)(result + 64) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1640;
      goto LABEL_406;
    case 1642:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 64) = 10;
      *(_DWORD *)(result + 72) = 11;
      *(_DWORD *)(result + 88) = 13;
      int v5 = 1643;
      goto LABEL_406;
    case 1643:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 64) = 10;
      *(_DWORD *)(result + 72) = 11;
      *(_DWORD *)(result + 88) = 13;
      int v5 = 1642;
      goto LABEL_406;
    case 1644:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(void *)(result + 64) = 0xB0000000ALL;
      *(_DWORD *)(result + 88) = 12;
      int v5 = 1645;
      goto LABEL_406;
    case 1645:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 56) = 9;
      *(void *)(result + 64) = 0xB0000000ALL;
      *(_DWORD *)(result + 88) = 12;
      int v5 = 1644;
      goto LABEL_406;
    case 1646:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1647;
      goto LABEL_406;
    case 1647:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1646;
      goto LABEL_406;
    case 1648:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1649;
      goto LABEL_406;
    case 1649:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1648;
      goto LABEL_406;
    case 1650:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1651;
      goto LABEL_406;
    case 1651:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1650;
      goto LABEL_406;
    case 1652:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1653;
      goto LABEL_406;
    case 1653:
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1652;
      goto LABEL_406;
    case 1654:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(unsigned char *)(result + 62) = 1;
      *(void *)(result + 84) = 0xA00000009;
      int v5 = 1655;
      goto LABEL_406;
    case 1655:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(unsigned char *)(result + 62) = 1;
      *(void *)(result + 84) = 0xA00000009;
      int v5 = 1654;
      goto LABEL_406;
    case 1656:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(unsigned char *)(result + 62) = 1;
      *(void *)(result + 84) = 0xA00000009;
      int v5 = 1657;
      goto LABEL_406;
    case 1657:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(unsigned char *)(result + 62) = 1;
      *(void *)(result + 84) = 0xA00000009;
      int v5 = 1656;
      goto LABEL_406;
    case 1658:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1659;
      goto LABEL_406;
    case 1659:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1658;
      goto LABEL_406;
    case 1660:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1661;
      goto LABEL_406;
    case 1661:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1660;
      goto LABEL_406;
    case 1662:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1663;
      goto LABEL_406;
    case 1663:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1662;
      goto LABEL_406;
    case 1664:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1665;
      goto LABEL_406;
    case 1665:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 88) = 9;
      int v5 = 1664;
      goto LABEL_406;
    case 1666:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1667;
      goto LABEL_406;
    case 1667:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1666;
      goto LABEL_406;
    case 1668:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1669;
      goto LABEL_406;
    case 1669:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1668;
      goto LABEL_406;
    case 1670:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1671;
      goto LABEL_406;
    case 1671:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1670;
      goto LABEL_406;
    case 1672:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1673;
      goto LABEL_406;
    case 1673:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1672;
      goto LABEL_406;
    case 1674:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 76) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1675;
      goto LABEL_406;
    case 1675:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 76) = 10;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1674;
      goto LABEL_406;
    case 1676:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(unsigned char *)(result + 62) = 1;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1677;
      goto LABEL_406;
    case 1677:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(unsigned char *)(result + 62) = 1;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 88) = 10;
      int v5 = 1676;
      goto LABEL_406;
    case 1678:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 72) = 10;
      *(_DWORD *)(result + 88) = 12;
      int v5 = 1679;
      goto LABEL_406;
    case 1679:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 72) = 10;
      *(_DWORD *)(result + 88) = 12;
      int v5 = 1678;
      goto LABEL_406;
    case 1680:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(void *)(result + 64) = 0xA00000009;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1681;
      goto LABEL_406;
    case 1681:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(_OWORD *)(result + 36) = xmmword_1CFB33480;
      *(void *)(result + 64) = 0xA00000009;
      *(_DWORD *)(result + 88) = 11;
      int v5 = 1680;
LABEL_406:
      *(_DWORD *)(result + 100) = v5;
      break;
    case 1682:
      __int16 v6 = 256;
      goto LABEL_409;
    case 1683:
      __int16 v6 = 257;
LABEL_409:
      *(_WORD *)uint64_t result = v6;
      goto LABEL_422;
    case 1684:
      __int16 v7 = 256;
      goto LABEL_412;
    case 1685:
      __int16 v7 = 257;
LABEL_412:
      *(_WORD *)uint64_t result = v7;
      goto LABEL_426;
    case 1686:
      __int16 v8 = 256;
      goto LABEL_415;
    case 1687:
      __int16 v8 = 257;
LABEL_415:
      *(_WORD *)uint64_t result = v8;
      goto LABEL_429;
    case 1688:
      __int16 v9 = 256;
      goto LABEL_418;
    case 1689:
      __int16 v9 = 257;
LABEL_418:
      *(_WORD *)uint64_t result = v9;
      goto LABEL_433;
    case 1690:
      __int16 v10 = 256;
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      int v11 = 1;
      goto LABEL_495;
    case 1691:
      *(_WORD *)uint64_t result = 256;
      goto LABEL_437;
    case 1692:
      *(_WORD *)uint64_t result = 0;
LABEL_422:
      *(unsigned char *)(result + 2) = 0;
      goto LABEL_424;
    case 1693:
      *(_WORD *)uint64_t result = 1;
      *(unsigned char *)(result + 2) = 0;
LABEL_424:
      *(_DWORD *)(result + 4) = 1;
      goto LABEL_484;
    case 1694:
      *(_WORD *)uint64_t result = 0;
LABEL_426:
      *(unsigned char *)(result + 2) = 0;
      int v12 = 1;
      goto LABEL_489;
    case 1695:
      int v12 = 1;
      *(_WORD *)uint64_t result = 1;
      *(unsigned char *)(result + 2) = 0;
      goto LABEL_489;
    case 1696:
      *(_WORD *)uint64_t result = 0;
LABEL_429:
      *(unsigned char *)(result + 2) = 0;
      __int16 v10 = 1;
      goto LABEL_431;
    case 1697:
      __int16 v10 = 1;
      *(_WORD *)uint64_t result = 1;
      *(unsigned char *)(result + 2) = 0;
LABEL_431:
      *(_DWORD *)(result + 4) = 1;
      goto LABEL_506;
    case 1698:
      *(_WORD *)uint64_t result = 0;
LABEL_433:
      *(unsigned char *)(result + 2) = 0;
      int v13 = 1;
      goto LABEL_500;
    case 1699:
      int v13 = 1;
      *(_WORD *)uint64_t result = 1;
      *(unsigned char *)(result + 2) = 0;
      goto LABEL_500;
    case 1700:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      int v14 = 1;
      goto LABEL_502;
    case 1701:
      *(_WORD *)uint64_t result = 0;
LABEL_437:
      *(unsigned char *)(result + 2) = 0;
      int v15 = 1;
      goto LABEL_505;
    case 1702:
      __int16 v16 = 256;
      goto LABEL_440;
    case 1703:
      __int16 v16 = 257;
LABEL_440:
      *(_WORD *)uint64_t result = v16;
      goto LABEL_453;
    case 1704:
      __int16 v17 = 256;
      goto LABEL_443;
    case 1705:
      __int16 v17 = 257;
LABEL_443:
      *(_WORD *)uint64_t result = v17;
      goto LABEL_457;
    case 1706:
      __int16 v18 = 256;
      goto LABEL_446;
    case 1707:
      __int16 v18 = 257;
LABEL_446:
      *(_WORD *)uint64_t result = v18;
      goto LABEL_460;
    case 1708:
      __int16 v19 = 256;
      goto LABEL_449;
    case 1709:
      __int16 v19 = 257;
LABEL_449:
      *(_WORD *)uint64_t result = v19;
      goto LABEL_464;
    case 1710:
      __int16 v20 = 256;
      *(_WORD *)uint64_t result = 256;
      *(unsigned char *)(result + 2) = 0;
      int v21 = 1;
      goto LABEL_567;
    case 1711:
      *(_WORD *)uint64_t result = 256;
      goto LABEL_468;
    case 1712:
      *(_WORD *)uint64_t result = 0;
LABEL_453:
      *(unsigned char *)(result + 2) = 0;
      goto LABEL_455;
    case 1713:
      *(_WORD *)uint64_t result = 1;
      *(unsigned char *)(result + 2) = 0;
LABEL_455:
      *(_DWORD *)(result + 4) = 1;
      goto LABEL_555;
    case 1714:
      *(_WORD *)uint64_t result = 0;
LABEL_457:
      *(unsigned char *)(result + 2) = 0;
      int v22 = 1;
      goto LABEL_560;
    case 1715:
      int v22 = 1;
      *(_WORD *)uint64_t result = 1;
      *(unsigned char *)(result + 2) = 0;
      goto LABEL_560;
    case 1716:
      *(_WORD *)uint64_t result = 0;
LABEL_460:
      *(unsigned char *)(result + 2) = 0;
      __int16 v20 = 1;
      goto LABEL_462;
    case 1717:
      __int16 v20 = 1;
      *(_WORD *)uint64_t result = 1;
      *(unsigned char *)(result + 2) = 0;
LABEL_462:
      *(_DWORD *)(result + 4) = 1;
      goto LABEL_578;
    case 1718:
      *(_WORD *)uint64_t result = 0;
LABEL_464:
      *(unsigned char *)(result + 2) = 0;
      int v23 = 1;
      goto LABEL_572;
    case 1719:
      int v23 = 1;
      *(_WORD *)uint64_t result = 1;
      *(unsigned char *)(result + 2) = 0;
      goto LABEL_572;
    case 1720:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      int v24 = 1;
      goto LABEL_574;
    case 1721:
      *(_WORD *)uint64_t result = 0;
LABEL_468:
      *(unsigned char *)(result + 2) = 0;
      int v25 = 1;
      goto LABEL_577;
    case 1722:
      __int16 v26 = 256;
      goto LABEL_471;
    case 1723:
      __int16 v26 = 257;
LABEL_471:
      *(_WORD *)uint64_t result = v26;
      goto LABEL_482;
    case 1724:
      __int16 v27 = 256;
      goto LABEL_487;
    case 1725:
      __int16 v27 = 257;
      goto LABEL_487;
    case 1726:
      __int16 v28 = 256;
      goto LABEL_476;
    case 1727:
      __int16 v28 = 257;
LABEL_476:
      *(_WORD *)uint64_t result = v28;
      goto LABEL_492;
    case 1728:
      __int16 v29 = 256;
      goto LABEL_498;
    case 1729:
      __int16 v29 = 257;
      goto LABEL_498;
    case 1730:
      __int16 v10 = 256;
      goto LABEL_494;
    case 1731:
      *(_WORD *)uint64_t result = 256;
      goto LABEL_504;
    case 1732:
      *(_WORD *)uint64_t result = 0;
LABEL_482:
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      goto LABEL_484;
    case 1733:
      *(_WORD *)uint64_t result = 1;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
LABEL_484:
      *(_WORD *)(result + 8) = 1;
      goto LABEL_490;
    case 1734:
      *(_WORD *)uint64_t result = 0;
      goto LABEL_488;
    case 1735:
      __int16 v27 = 1;
LABEL_487:
      *(_WORD *)uint64_t result = v27;
LABEL_488:
      *(unsigned char *)(result + 2) = 0;
      int v12 = 2;
LABEL_489:
      *(_DWORD *)(result + 4) = v12;
      *(_WORD *)(result + 8) = 0;
LABEL_490:
      *(void *)(result + 16) = 4;
      *(_OWORD *)(result + 32) = xmmword_1CDB0CFA0;
      *(_DWORD *)(result + 56) = 6;
      goto LABEL_580;
    case 1736:
      *(_WORD *)uint64_t result = 0;
LABEL_492:
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      __int16 v10 = 1;
      goto LABEL_506;
    case 1737:
      __int16 v10 = 1;
LABEL_494:
      *(_WORD *)uint64_t result = v10;
      *(unsigned char *)(result + 2) = 0;
      int v11 = 2;
LABEL_495:
      *(_DWORD *)(result + 4) = v11;
      goto LABEL_506;
    case 1738:
      *(_WORD *)uint64_t result = 0;
      goto LABEL_499;
    case 1739:
      __int16 v29 = 1;
LABEL_498:
      *(_WORD *)uint64_t result = v29;
LABEL_499:
      *(unsigned char *)(result + 2) = 0;
      int v13 = 2;
LABEL_500:
      *(_DWORD *)(result + 4) = v13;
      *(_WORD *)(result + 8) = 0;
      goto LABEL_507;
    case 1740:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      int v14 = 2;
LABEL_502:
      *(_DWORD *)(result + 4) = v14;
      __int16 v10 = 256;
      goto LABEL_506;
    case 1741:
      *(_WORD *)uint64_t result = 0;
LABEL_504:
      *(unsigned char *)(result + 2) = 0;
      int v15 = 2;
LABEL_505:
      *(_DWORD *)(result + 4) = v15;
      __int16 v10 = 257;
LABEL_506:
      *(_WORD *)(result + 8) = v10;
LABEL_507:
      *(void *)(result + 16) = 4;
      *(_OWORD *)(result + 32) = xmmword_1CDB0CFA0;
      *(_DWORD *)(result + 56) = 6;
      goto LABEL_649;
    case 1742:
      __int16 v30 = 256;
      goto LABEL_510;
    case 1743:
      __int16 v30 = 257;
LABEL_510:
      *(_WORD *)uint64_t result = v30;
      goto LABEL_521;
    case 1744:
      __int16 v31 = 256;
      goto LABEL_525;
    case 1745:
      __int16 v31 = 257;
      goto LABEL_525;
    case 1746:
      __int16 v32 = 256;
      goto LABEL_515;
    case 1747:
      __int16 v32 = 257;
LABEL_515:
      *(_WORD *)uint64_t result = v32;
      goto LABEL_528;
    case 1748:
      __int16 v33 = 256;
      goto LABEL_533;
    case 1749:
      __int16 v33 = 257;
      goto LABEL_533;
    case 1750:
      __int16 v20 = 256;
      goto LABEL_530;
    case 1751:
      *(_WORD *)uint64_t result = 256;
      goto LABEL_537;
    case 1752:
      *(_WORD *)uint64_t result = 0;
LABEL_521:
      *(unsigned char *)(result + 2) = 0;
      int v34 = 2;
      goto LABEL_552;
    case 1753:
      *(_WORD *)uint64_t result = 1;
      *(unsigned char *)(result + 2) = 0;
      int v35 = 2;
      goto LABEL_554;
    case 1754:
      *(_WORD *)uint64_t result = 0;
      goto LABEL_526;
    case 1755:
      __int16 v31 = 1;
LABEL_525:
      *(_WORD *)uint64_t result = v31;
LABEL_526:
      *(unsigned char *)(result + 2) = 0;
      int v22 = 2;
      goto LABEL_560;
    case 1756:
      *(_WORD *)uint64_t result = 0;
LABEL_528:
      *(unsigned char *)(result + 2) = 0;
      int v36 = 2;
      goto LABEL_564;
    case 1757:
      __int16 v20 = 1;
LABEL_530:
      *(_WORD *)uint64_t result = v20;
      *(unsigned char *)(result + 2) = 0;
      int v21 = 2;
      goto LABEL_567;
    case 1758:
      *(_WORD *)uint64_t result = 0;
      goto LABEL_534;
    case 1759:
      __int16 v33 = 1;
LABEL_533:
      *(_WORD *)uint64_t result = v33;
LABEL_534:
      *(unsigned char *)(result + 2) = 0;
      int v23 = 2;
      goto LABEL_572;
    case 1760:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      int v24 = 2;
      goto LABEL_574;
    case 1761:
      *(_WORD *)uint64_t result = 0;
LABEL_537:
      *(unsigned char *)(result + 2) = 0;
      int v25 = 2;
      goto LABEL_577;
    case 1762:
      __int16 v37 = 256;
      goto LABEL_540;
    case 1763:
      __int16 v37 = 257;
LABEL_540:
      *(_WORD *)uint64_t result = v37;
      goto LABEL_551;
    case 1764:
      __int16 v38 = 256;
      goto LABEL_558;
    case 1765:
      __int16 v38 = 257;
      goto LABEL_558;
    case 1766:
      __int16 v39 = 256;
      goto LABEL_545;
    case 1767:
      __int16 v39 = 257;
LABEL_545:
      *(_WORD *)uint64_t result = v39;
      goto LABEL_563;
    case 1768:
      __int16 v40 = 256;
      goto LABEL_570;
    case 1769:
      __int16 v40 = 257;
      goto LABEL_570;
    case 1770:
      __int16 v20 = 256;
      goto LABEL_566;
    case 1771:
      *(_WORD *)uint64_t result = 256;
      goto LABEL_576;
    case 1772:
      *(_WORD *)uint64_t result = 0;
LABEL_551:
      *(unsigned char *)(result + 2) = 0;
      int v34 = 3;
LABEL_552:
      *(_DWORD *)(result + 4) = v34;
      goto LABEL_555;
    case 1773:
      *(_WORD *)uint64_t result = 1;
      *(unsigned char *)(result + 2) = 0;
      int v35 = 3;
LABEL_554:
      *(_DWORD *)(result + 4) = v35;
LABEL_555:
      *(_WORD *)(result + 8) = 1;
      goto LABEL_561;
    case 1774:
      *(_WORD *)uint64_t result = 0;
      goto LABEL_559;
    case 1775:
      __int16 v38 = 1;
LABEL_558:
      *(_WORD *)uint64_t result = v38;
LABEL_559:
      *(unsigned char *)(result + 2) = 0;
      int v22 = 3;
LABEL_560:
      *(_DWORD *)(result + 4) = v22;
      *(_WORD *)(result + 8) = 0;
LABEL_561:
      *(void *)(result + 16) = 4;
      *(_OWORD *)(result + 32) = xmmword_1CDB0CFA0;
      int v41 = 6;
      goto LABEL_651;
    case 1776:
      *(_WORD *)uint64_t result = 0;
LABEL_563:
      *(unsigned char *)(result + 2) = 0;
      int v36 = 3;
LABEL_564:
      *(_DWORD *)(result + 4) = v36;
      __int16 v20 = 1;
      goto LABEL_578;
    case 1777:
      __int16 v20 = 1;
LABEL_566:
      *(_WORD *)uint64_t result = v20;
      *(unsigned char *)(result + 2) = 0;
      int v21 = 3;
LABEL_567:
      *(_DWORD *)(result + 4) = v21;
      goto LABEL_578;
    case 1778:
      *(_WORD *)uint64_t result = 0;
      goto LABEL_571;
    case 1779:
      __int16 v40 = 1;
LABEL_570:
      *(_WORD *)uint64_t result = v40;
LABEL_571:
      *(unsigned char *)(result + 2) = 0;
      int v23 = 3;
LABEL_572:
      *(_DWORD *)(result + 4) = v23;
      *(_WORD *)(result + 8) = 0;
      goto LABEL_579;
    case 1780:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      int v24 = 3;
LABEL_574:
      *(_DWORD *)(result + 4) = v24;
      __int16 v20 = 256;
      goto LABEL_578;
    case 1781:
      *(_WORD *)uint64_t result = 0;
LABEL_576:
      *(unsigned char *)(result + 2) = 0;
      int v25 = 3;
LABEL_577:
      *(_DWORD *)(result + 4) = v25;
      __int16 v20 = 257;
LABEL_578:
      *(_WORD *)(result + 8) = v20;
LABEL_579:
      *(void *)(result + 16) = 4;
      *(_OWORD *)(result + 32) = xmmword_1CDB0CFA0;
      *(_DWORD *)(result + 68) = 6;
      goto LABEL_580;
    case 1782:
      __int16 v42 = 256;
      goto LABEL_583;
    case 1783:
      __int16 v42 = 257;
LABEL_583:
      *(_WORD *)uint64_t result = v42;
      goto LABEL_594;
    case 1784:
      __int16 v43 = 256;
      goto LABEL_599;
    case 1785:
      __int16 v43 = 257;
      goto LABEL_599;
    case 1786:
      __int16 v44 = 256;
      goto LABEL_588;
    case 1787:
      __int16 v44 = 257;
LABEL_588:
      *(_WORD *)uint64_t result = v44;
      goto LABEL_603;
    case 1788:
      __int16 v45 = 256;
      goto LABEL_608;
    case 1789:
      __int16 v45 = 257;
      goto LABEL_608;
    case 1790:
      __int16 v46 = 256;
      goto LABEL_605;
    case 1791:
      *(_WORD *)uint64_t result = 256;
      goto LABEL_612;
    case 1792:
      *(_WORD *)uint64_t result = 0;
LABEL_594:
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      goto LABEL_596;
    case 1793:
      *(_WORD *)uint64_t result = 1;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
LABEL_596:
      *(_WORD *)(result + 8) = 1;
      goto LABEL_601;
    case 1794:
      *(_WORD *)uint64_t result = 0;
      goto LABEL_600;
    case 1795:
      __int16 v43 = 1;
LABEL_599:
      *(_WORD *)uint64_t result = v43;
LABEL_600:
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
LABEL_601:
      *(void *)(result + 16) = 4;
      *(_OWORD *)(result + 32) = xmmword_1CDB0CFA0;
      *(_DWORD *)(result + 48) = 6;
      *(_DWORD *)(result + 56) = 7;
      goto LABEL_650;
    case 1796:
      *(_WORD *)uint64_t result = 0;
LABEL_603:
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      __int16 v46 = 1;
      goto LABEL_613;
    case 1797:
      __int16 v46 = 1;
LABEL_605:
      *(_WORD *)uint64_t result = v46;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      goto LABEL_613;
    case 1798:
      *(_WORD *)uint64_t result = 0;
      goto LABEL_609;
    case 1799:
      __int16 v45 = 1;
LABEL_608:
      *(_WORD *)uint64_t result = v45;
LABEL_609:
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      goto LABEL_614;
    case 1800:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      __int16 v46 = 256;
      goto LABEL_613;
    case 1801:
      *(_WORD *)uint64_t result = 0;
LABEL_612:
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      __int16 v46 = 257;
LABEL_613:
      *(_WORD *)(result + 8) = v46;
LABEL_614:
      *(void *)(result + 16) = 4;
      *(_OWORD *)(result + 32) = xmmword_1CDB0CFA0;
      *(_DWORD *)(result + 48) = 6;
      *(_DWORD *)(result + 56) = 7;
      *(_DWORD *)(result + 68) = 8;
      int v41 = 9;
      goto LABEL_651;
    case 1802:
      __int16 v47 = 256;
      goto LABEL_617;
    case 1803:
      __int16 v47 = 257;
LABEL_617:
      *(_WORD *)uint64_t result = v47;
      goto LABEL_628;
    case 1804:
      __int16 v48 = 256;
      goto LABEL_633;
    case 1805:
      __int16 v48 = 257;
      goto LABEL_633;
    case 1806:
      __int16 v49 = 256;
      goto LABEL_622;
    case 1807:
      __int16 v49 = 257;
LABEL_622:
      *(_WORD *)uint64_t result = v49;
      goto LABEL_637;
    case 1808:
      __int16 v50 = 256;
      goto LABEL_642;
    case 1809:
      __int16 v50 = 257;
      goto LABEL_642;
    case 1810:
      __int16 v51 = 256;
      goto LABEL_639;
    case 1811:
      *(_WORD *)uint64_t result = 256;
      goto LABEL_646;
    case 1812:
      *(_WORD *)uint64_t result = 0;
LABEL_628:
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      goto LABEL_630;
    case 1813:
      *(_WORD *)uint64_t result = 1;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
LABEL_630:
      *(_WORD *)(result + 8) = 1;
      goto LABEL_635;
    case 1814:
      *(_WORD *)uint64_t result = 0;
      goto LABEL_634;
    case 1815:
      __int16 v48 = 1;
LABEL_633:
      *(_WORD *)uint64_t result = v48;
LABEL_634:
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
LABEL_635:
      *(void *)(result + 16) = 4;
      *(_OWORD *)(result + 32) = xmmword_1CDB0CFA0;
      *(_DWORD *)(result + 48) = 6;
LABEL_580:
      int v41 = 7;
      goto LABEL_651;
    case 1816:
      *(_WORD *)uint64_t result = 0;
LABEL_637:
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      __int16 v51 = 1;
      goto LABEL_647;
    case 1817:
      __int16 v51 = 1;
LABEL_639:
      *(_WORD *)uint64_t result = v51;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      goto LABEL_647;
    case 1818:
      *(_WORD *)uint64_t result = 0;
      goto LABEL_643;
    case 1819:
      __int16 v50 = 1;
LABEL_642:
      *(_WORD *)uint64_t result = v50;
LABEL_643:
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      goto LABEL_648;
    case 1820:
      *(_WORD *)uint64_t result = 0;
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      __int16 v51 = 256;
      goto LABEL_647;
    case 1821:
      *(_WORD *)uint64_t result = 0;
LABEL_646:
      *(unsigned char *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      __int16 v51 = 257;
LABEL_647:
      *(_WORD *)(result + 8) = v51;
LABEL_648:
      *(void *)(result + 16) = 4;
      *(_OWORD *)(result + 32) = xmmword_1CDB0CFA0;
      *(_DWORD *)(result + 48) = 6;
LABEL_649:
      *(_DWORD *)(result + 68) = 7;
LABEL_650:
      int v41 = 8;
LABEL_651:
      *(_DWORD *)(result + 92) = v41;
      break;
    default:
      switch(a2)
      {
        case 2825:
          *(_WORD *)(result + 8) = 257;
          *(_DWORD *)(result + 100) = 2827;
          *(_DWORD *)(result + 12) = 4;
          goto LABEL_665;
        case 2826:
          *(_WORD *)(result + 8) = 0;
          int v55 = 2824;
          goto LABEL_668;
        case 2827:
          *(_WORD *)(result + 8) = 256;
          int v55 = 2825;
LABEL_668:
          *(_DWORD *)(result + 100) = v55;
          *(_DWORD *)(result + 12) = 8;
          *(_DWORD *)(result + 4) = 1;
          *(unsigned char *)uint64_t result = 0;
          break;
        case 2828:
          *(_WORD *)(result + 8) = 1;
          int v56 = 2830;
          goto LABEL_674;
        case 2829:
          *(_WORD *)(result + 8) = 257;
          int v57 = 2831;
          goto LABEL_677;
        case 2830:
          *(_WORD *)(result + 8) = 0;
          int v58 = 2828;
          goto LABEL_680;
        case 2831:
          *(_WORD *)(result + 8) = 256;
          int v58 = 2829;
          goto LABEL_680;
        case 2832:
          *(_WORD *)(result + 8) = 1;
          int v56 = 2834;
LABEL_674:
          *(_DWORD *)(result + 100) = v56;
          *(_DWORD *)(result + 12) = 4;
          *(_DWORD *)(result + 4) = 2;
          goto LABEL_675;
        case 2833:
          *(_WORD *)(result + 8) = 257;
          int v57 = 2835;
LABEL_677:
          *(_DWORD *)(result + 100) = v57;
          *(_DWORD *)(result + 12) = 4;
          *(_DWORD *)(result + 4) = 2;
          *(unsigned char *)uint64_t result = 0;
          break;
        case 2834:
          *(_WORD *)(result + 8) = 0;
          int v58 = 2832;
          goto LABEL_680;
        case 2835:
          *(_WORD *)(result + 8) = 256;
          int v58 = 2833;
LABEL_680:
          *(_DWORD *)(result + 100) = v58;
          *(_DWORD *)(result + 12) = 8;
          *(_DWORD *)(result + 4) = 2;
          *(unsigned char *)uint64_t result = 0;
          break;
        default:
          *(_WORD *)(result + 8) = 1;
          *(_DWORD *)(result + 100) = 2826;
          *(_DWORD *)(result + 12) = 4;
LABEL_665:
          *(_DWORD *)(result + 4) = 1;
LABEL_675:
          *(unsigned char *)uint64_t result = 0;
          break;
      }
      *(unsigned char *)(result + 96) = 1;
      *(_WORD *)(result + 1) = 0;
      *(_OWORD *)(result + 20) = xmmword_1CDC7F960;
      *(void *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 88) = 8;
      break;
  }
  switch(a3)
  {
    case 0:
      return result;
    case 1:
    case 2:
      unsigned int v52 = 2;
      goto LABEL_657;
    case 3:
      unsigned int v52 = -1;
      goto LABEL_657;
    case 4:
      unsigned int v52 = 1;
      goto LABEL_657;
    default:
      unsigned int v52 = 0;
LABEL_657:
      *(_DWORD *)(result + 20) = -1;
      if (*(_DWORD *)(result + 92) == -1) {
        *(_DWORD *)(result + 24) -= v52;
      }
      uint64_t v53 = 0;
      *(int32x2_t *)(result + 32) = vsub_s32(*(int32x2_t *)(result + 32), vdup_n_s32(v52));
      *(_DWORD *)(result + 44) -= v52;
      do
      {
        int v54 = (_DWORD *)v59[v53];
        if (*v54 != -1) {
          *v54 -= v52;
        }
        ++v53;
      }
      while (v53 != 13);
      return result;
  }
}

void llvm::ValueMapper::ValueMapper()
{
}

{
  operator new();
}

void llvm::ValueMapper::~ValueMapper(llvm::ValueMapper *this, llvm::LLVMContext *a2)
{
  uint64_t v2 = *(void *)this;
  if (v2)
  {
    if (*(void *)(v2 + 216) != v2 + 232)
    {
      uint64_t v5 = v2;
      free(*(void **)(v2 + 216));
      uint64_t v2 = v5;
    }
    uint64_t v3 = *(char **)(v2 + 184);
    uint64_t v4 = *(unsigned int *)(v2 + 192);
    if (v4)
    {
      uint64_t v11 = v2;
      __int16 v6 = v3 - 8;
      uint64_t v7 = 16 * v4;
      do
      {
        __int16 v8 = *(llvm::Type ****)&v6[v7];
        *(void *)&v6[v7] = 0;
        if (v8)
        {
          llvm::BasicBlock::~BasicBlock(v8, a2);
          MEMORY[0x1D25D9CE0]();
        }
        v7 -= 16;
      }
      while (v7);
      uint64_t v2 = v11;
      uint64_t v3 = *(char **)(v11 + 184);
    }
    if (v3 != (char *)(v2 + 200))
    {
      uint64_t v9 = v2;
      free(v3);
      uint64_t v2 = v9;
    }
    if (*(void *)(v2 + 72) != v2 + 88)
    {
      uint64_t v10 = v2;
      free(*(void **)(v2 + 72));
      uint64_t v2 = v10;
    }
    if (*(void *)(v2 + 24) != v2 + 40) {
      free(*(void **)(v2 + 24));
    }
    MEMORY[0x1D25D9CE0]();
  }
}

uint64_t *sub_1CD2624E0(uint64_t *a1, llvm::LLVMContext *a2, const llvm::APFloat *a3)
{
  uint64_t v3 = a1;
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  unsigned int v5 = *(_DWORD *)(*a1 + 80);
  if (v5)
  {
    uint64_t v6 = v4 + 216;
    uint64_t v7 = &v59;
    while (1)
    {
      uint64_t v8 = *(void *)(v4 + 72) + 24 * v5;
      unsigned int v10 = *(_DWORD *)(v8 - 24);
      int v9 = *(_DWORD *)(v8 - 20);
      uint64_t v11 = *(void *)(v8 - 16);
      int v12 = *(llvm::Constant **)(v8 - 8);
      *(_DWORD *)(v4 + 80) = v5 - 1;
      *(_DWORD *)(v4 + 16) = (v10 >> 2) & 0x1FFFFFFF;
      switch(v10 & 3)
      {
        case 1u:
          int v56 = v3;
          uint64_t v21 = *(unsigned int *)(v4 + 224);
          unint64_t v22 = (v21 - v9);
          uint64_t v23 = *(void *)(v4 + 216);
          int v54 = v7;
          int v57 = v7;
          uint64_t v58 = 0x800000000;
          sub_1CD47792C((unsigned int *)&v57, (unsigned char *)(v23 + 8 * v22), (unsigned char *)(v23 + 8 * v21));
          uint64_t v55 = v6;
          sub_1CC34BDE0(v6, v22);
          int v25 = (llvm::MDNode ***)v57;
          uint64_t v26 = v58;
          uint64_t v60 = v62;
          uint64_t v61 = 0x1000000000;
          if (v12)
          {
            int v27 = *(_DWORD *)(*(void *)v12 + 32);
            if (v27)
            {
              __int16 v28 = 0;
              do
              {
                AggregateElement = llvm::Constant::getAggregateElement(v12, v28);
                if (v61 >= (unint64_t)HIDWORD(v61)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v60 + v61) = AggregateElement;
                LODWORD(v61) = v61 + 1;
                __int16 v28 = (llvm::Type *)(v28 + 1);
              }
              while (v27 != v28);
            }
          }
          if ((v10 & 0x80000000) != 0)
          {
            __int16 v31 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)(***(void ***)v11 + 1912), 0);
            __int16 v42 = **v25;
            int v64 = 0;
            long long v63 = 0uLL;
            long long v63 = *(_OWORD *)*((void *)v42 + 2);
            int v64 = v31;
            __int16 v30 = (llvm::PoisonValue *)llvm::StructType::get(**(uint64_t ***)v11, (uint64_t)&v63, 3, 0);
            if (v26)
            {
LABEL_32:
              uint64_t v32 = 8 * v26;
              do
              {
                __int16 v33 = *v25;
                if ((v10 & 0x80000000) != 0)
                {
                  uint64_t v35 = sub_1CD2629B8(v4, (llvm::MDNode **)v33[-4 * (*((_DWORD *)v33 + 5) & 0x7FFFFFF)], v24);
                  uint64_t v37 = sub_1CD2629B8(v4, (llvm::MDNode **)v33[-4 * (*((_DWORD *)v33 + 5) & 0x7FFFFFF) + 4], v36);
                  Nulluint64_t Value = llvm::Constant::getNullValue(v31, v38, v39);
                  *(void *)&long long v63 = v35;
                  *((void *)&v63 + 1) = v37;
                  int v64 = NullValue;
                  uint64_t v34 = (uint64_t)llvm::ConstantStruct::get(v30, (llvm::Type *)&v63, 3);
                }
                else
                {
                  uint64_t v34 = sub_1CD2629B8(v4, *v25, v24);
                }
                if (v61 >= (unint64_t)HIDWORD(v61)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v60 + v61) = v34;
                unsigned int v41 = v61 + 1;
                LODWORD(v61) = v61 + 1;
                ++v25;
                v32 -= 8;
              }
              while (v32);
              goto LABEL_42;
            }
          }
          else
          {
            __int16 v30 = 0;
            __int16 v31 = 0;
            if (v26) {
              goto LABEL_32;
            }
          }
          unsigned int v41 = v61;
LABEL_42:
          __int16 v43 = llvm::ConstantArray::get(*(llvm::PoisonValue **)(v11 + 24), (llvm::Type *)v60, v41);
          llvm::GlobalVariable::setInitializer(v11, v43);
          uint64_t v3 = v56;
          uint64_t v7 = v54;
          uint64_t v6 = v55;
          if (v60 != v62) {
            free(v60);
          }
          if (v57 != v54) {
            free(v57);
          }
LABEL_21:
          unsigned int v5 = *(_DWORD *)(v4 + 80);
          if (!v5) {
            goto LABEL_46;
          }
          break;
        case 2u:
          int v14 = (void *)sub_1CD2629B8(v4, (llvm::MDNode **)v12, a3);
          a2 = (llvm::LLVMContext *)v14;
          int v15 = *(unsigned __int8 *)(v11 + 16);
          if (v15 != 1 || v11 == 0)
          {
            if (v15 == 2) {
              uint64_t v17 = v11;
            }
            else {
              uint64_t v17 = 0;
            }
            __int16 v18 = (void *)(v17 - 32);
            if (*(void *)(v17 - 32))
            {
              **(void **)(v17 - 16) = *(void *)(v17 - 24);
              uint64_t v19 = *(void *)(v17 - 24);
              if (v19) {
                *(void *)(v19 + 16) = *(void *)(v17 - 16);
              }
            }
            *__int16 v18 = v14;
            if (v14)
            {
              a2 = (llvm::LLVMContext *)(v14 + 1);
              uint64_t v20 = v14[1];
              *(void *)(v17 - 24) = v20;
              if (v20) {
                *(void *)(v20 + 16) = v17 - 24;
              }
              *(void *)(v17 - 16) = a2;
              *(void *)a2 = v18;
            }
          }
          else
          {
            llvm::GlobalAlias::setAliasee(v11, (llvm::Constant *)v14);
          }
          goto LABEL_21;
        case 3u:
          sub_1CD266520(v4, v11, a3);
          goto LABEL_21;
        default:
          int v13 = (llvm::Constant *)sub_1CD2629B8(v4, (llvm::MDNode **)v12, a3);
          llvm::GlobalVariable::setInitializer(v11, v13);
          sub_1CD2666C8(v4, (int32x2_t ****)v11);
          goto LABEL_21;
      }
    }
  }
LABEL_46:
  *(_DWORD *)(v4 + 16) = 0;
  while (1)
  {
    unsigned int v44 = *(_DWORD *)(v4 + 192);
    if (!v44) {
      break;
    }
    uint64_t v45 = *(void *)(v4 + 184) + 16 * v44;
    __int16 v47 = *(llvm::MDNode ***)(v45 - 16);
    __int16 v46 = *(llvm::ValueAsMetadata **)(v45 - 8);
    *(void *)(v45 - 8) = 0;
    unsigned int v48 = v44 - 1;
    *(_DWORD *)(v4 + 192) = v48;
    uint64_t v49 = *(void *)(v4 + 184) + 16 * v48;
    __int16 v50 = *(llvm::Type ****)(v49 + 8);
    *(void *)(v49 + 8) = 0;
    if (v50)
    {
      llvm::BasicBlock::~BasicBlock(v50, a2);
      MEMORY[0x1D25D9CE0]();
    }
    uint64_t v51 = sub_1CD2629B8(v4, v47, a3);
    if (v51) {
      unsigned int v52 = (llvm::Value *)v51;
    }
    else {
      unsigned int v52 = (llvm::Value *)v47;
    }
    llvm::Value::doRAUW(v46, v52, (llvm::Value *)1);
    if (v46)
    {
      llvm::BasicBlock::~BasicBlock((llvm::Type ***)v46, a2);
      MEMORY[0x1D25D9CE0]();
    }
  }
  return v3;
}

uint64_t llvm::ValueMapper::mapValue(llvm::ValueMapper *this, llvm::MDNode **a2, const llvm::APFloat *a3)
{
  uint64_t v7 = *(void *)this;
  uint64_t v3 = sub_1CD2629B8(v7, a2, a3);
  sub_1CD2624E0(&v7, v4, v5);
  return v3;
}

uint64_t sub_1CD2629B8(uint64_t a1, llvm::MDNode **a2, const llvm::APFloat *a3)
{
  uint64_t v482 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(unsigned int *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(uint64_t **)(v6 + 16 * v5);
  uint64_t v8 = *v7;
  uint64_t v9 = *((unsigned int *)v7 + 4);
  if (v9)
  {
    uint64_t v10 = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v11 = v8 + (v10 << 6);
    int v12 = *(llvm::MDNode ***)(v11 + 24);
    if (v12 == a2) {
      goto LABEL_8;
    }
    int v13 = 1;
    while (v12 != (llvm::MDNode **)-4096)
    {
      int v14 = v10 + v13++;
      uint64_t v10 = v14 & (v9 - 1);
      uint64_t v11 = v8 + (v10 << 6);
      int v12 = *(llvm::MDNode ***)(v11 + 24);
      if (v12 == a2) {
        goto LABEL_8;
      }
    }
  }
  uint64_t v11 = v8 + (v9 << 6);
LABEL_8:
  if (v11 != v8 + (v9 << 6)) {
    return *(void *)(v11 + 56);
  }
  uint64_t v16 = *(void *)(v6 + 16 * v5 + 8);
  if (v16)
  {
    uint64_t v17 = (*(uint64_t (**)(uint64_t, llvm::MDNode **))(*(void *)v16 + 8))(v16, a2);
    if (v17)
    {
      Impl = (llvm::detail::IEEEFloat *)v17;
      uint64_t v18 = *(void *)(*(void *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
      uint64_t v478 = 2;
      v479 = 0;
      size_t v480 = (int32x2_t ****)a2;
      if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2) {
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v478);
      }
      int v477 = &unk_1F2615EC8;
      uint64_t v481 = v18;
      uint64_t v19 = sub_1CC4CFF80(v18, &v477);
      if (v480 != (int32x2_t ****)-8192 && v480 != (int32x2_t ****)-4096 && v480)
      {
        unint64_t v20 = v478 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v478 & 0xFFFFFFFFFFFFFFF8) = v479;
        if (v479)
        {
          unint64_t *v479 = *v479 & 7 | v20;
        }
        else
        {
          uint64_t v21 = v480;
          unint64_t v22 = ***v480;
          unint64_t v23 = (unint64_t)v22[303];
          if (v23 <= v20)
          {
            uint64_t v24 = v22[305].u32[0];
            if (v23 + 16 * v24 > v20)
            {
              unsigned int v25 = v24 - 1;
              LODWORD(v26) = v25 & ((v480 >> 4) ^ (v480 >> 9));
              int v27 = (int32x2_t *****)(v23 + 16 * v26);
              __int16 v28 = *v27;
              if (v480 == *v27)
              {
LABEL_27:
                *int v27 = (int32x2_t ****)-8192;
                v22[304] = vadd_s32(v22[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v21 = v480;
              }
              else
              {
                int v29 = 1;
                while (v28 != (int32x2_t ****)-4096)
                {
                  int v30 = v26 + v29++;
                  uint64_t v26 = v30 & v25;
                  __int16 v28 = *(int32x2_t *****)(v23 + 16 * v26);
                  if (v480 == v28)
                  {
                    int v27 = (int32x2_t *****)(v23 + 16 * v26);
                    goto LABEL_27;
                  }
                }
              }
              *((unsigned char *)v21 + 17) &= ~1u;
            }
          }
        }
      }
      uint64_t v59 = (llvm::detail::IEEEFloat *)v19[7];
      if (v59 == Impl) {
        return (uint64_t)Impl;
      }
      if (!v59 || v59 == (llvm::detail::IEEEFloat *)-8192 || v59 == (llvm::detail::IEEEFloat *)-4096) {
        goto LABEL_149;
      }
      unint64_t v60 = v19[5] & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v60 = v19[6];
      uint64_t v61 = (unint64_t *)v19[6];
      if (!v61)
      {
        uint64_t v62 = v19[7];
        long long v63 = ***(int32x2_t ****)v62;
        unint64_t v64 = (unint64_t)v63[303];
        if (v64 <= v60)
        {
          uint64_t v65 = v63[305].u32[0];
          if (v64 + 16 * v65 > v60)
          {
            unsigned int v66 = v65 - 1;
            LODWORD(v67) = v66 & ((v62 >> 4) ^ (v62 >> 9));
            unint64_t v68 = (uint64_t *)(v64 + 16 * v67);
            uint64_t v69 = *v68;
            if (v62 != *v68)
            {
              int v70 = 1;
              while (v69 != -4096)
              {
                int v71 = v67 + v70++;
                uint64_t v67 = v71 & v66;
                uint64_t v69 = *(void *)(v64 + 16 * v67);
                if (v62 == v69) {
                  goto LABEL_302;
                }
              }
              goto LABEL_304;
            }
LABEL_303:
            uint64_t *v68 = -8192;
            v63[304] = vadd_s32(v63[304], (int32x2_t)0x1FFFFFFFFLL);
            uint64_t v62 = v19[7];
LABEL_304:
            *(unsigned char *)(v62 + 17) &= ~1u;
            goto LABEL_149;
          }
        }
        goto LABEL_149;
      }
      goto LABEL_704;
    }
  }
  unsigned int v31 = *((unsigned __int8 *)a2 + 16);
  if (v31 <= 3)
  {
    if ((*(unsigned char *)a1 & 8) == 0)
    {
      uint64_t v32 = *(void *)(*(void *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
      uint64_t v478 = 2;
      v479 = 0;
      size_t v480 = (int32x2_t ****)a2;
      if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2) {
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v478);
      }
      int v477 = &unk_1F2615EC8;
      uint64_t v481 = v32;
      __int16 v33 = sub_1CC4CFF80(v32, &v477);
      if (v480 != (int32x2_t ****)-8192 && v480 != (int32x2_t ****)-4096 && v480)
      {
        unint64_t v34 = v478 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v478 & 0xFFFFFFFFFFFFFFF8) = v479;
        if (v479)
        {
          unint64_t *v479 = *v479 & 7 | v34;
        }
        else
        {
          uint64_t v35 = v480;
          int v36 = ***v480;
          unint64_t v37 = (unint64_t)v36[303];
          if (v37 <= v34)
          {
            uint64_t v38 = v36[305].u32[0];
            if (v37 + 16 * v38 > v34)
            {
              unsigned int v39 = v38 - 1;
              LODWORD(v40) = v39 & ((v480 >> 4) ^ (v480 >> 9));
              unsigned int v41 = (int32x2_t *****)(v37 + 16 * v40);
              __int16 v42 = *v41;
              if (v480 == *v41)
              {
LABEL_46:
                *unsigned int v41 = (int32x2_t ****)-8192;
                v36[304] = vadd_s32(v36[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v35 = v480;
              }
              else
              {
                int v43 = 1;
                while (v42 != (int32x2_t ****)-4096)
                {
                  int v44 = v40 + v43++;
                  uint64_t v40 = v44 & v39;
                  __int16 v42 = *(int32x2_t *****)(v37 + 16 * v40);
                  if (v480 == v42)
                  {
                    unsigned int v41 = (int32x2_t *****)(v37 + 16 * v40);
                    goto LABEL_46;
                  }
                }
              }
              *((unsigned char *)v35 + 17) &= ~1u;
            }
          }
        }
      }
      uint64_t v88 = (llvm::MDNode **)v33[7];
      if (v88 == a2) {
        return (uint64_t)a2;
      }
      if (!v88 || v88 == (llvm::MDNode **)-8192 || v88 == (llvm::MDNode **)-4096) {
        goto LABEL_106;
      }
      unint64_t v153 = v33[5] & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v153 = v33[6];
      uint64_t v154 = (unint64_t *)v33[6];
      if (!v154)
      {
        uint64_t v155 = v33[7];
        unint64_t v156 = ***(int32x2_t ****)v155;
        unint64_t v157 = (unint64_t)v156[303];
        if (v157 <= v153)
        {
          uint64_t v158 = v156[305].u32[0];
          if (v157 + 16 * v158 > v153)
          {
            unsigned int v159 = v158 - 1;
            LODWORD(v160) = v159 & ((v155 >> 4) ^ (v155 >> 9));
            uint64_t v161 = (uint64_t *)(v157 + 16 * v160);
            uint64_t v162 = *v161;
            if (v155 != *v161)
            {
              int v163 = 1;
              while (v162 != -4096)
              {
                int v164 = v160 + v163++;
                uint64_t v160 = v164 & v159;
                uint64_t v162 = *(void *)(v157 + 16 * v160);
                if (v155 == v162) {
                  goto LABEL_243;
                }
              }
              goto LABEL_245;
            }
LABEL_244:
            uint64_t *v161 = -8192;
            v156[304] = vadd_s32(v156[304], (int32x2_t)0x1FFFFFFFFLL);
            uint64_t v155 = v33[7];
LABEL_245:
            *(unsigned char *)(v155 + 17) &= ~1u;
            goto LABEL_106;
          }
        }
        goto LABEL_106;
      }
      goto LABEL_494;
    }
    return 0;
  }
  if (v31 != 23)
  {
    if (v31 == 24)
    {
      uint64_t v45 = *(void *)(a1 + 8);
      if (v45
        && (__int16 v46 = (llvm::PointerType *)(*(uint64_t (**)(uint64_t, llvm::MDNode *))(*(void *)v45 + 24))(v45, a2[9]), v46 != a2[9]))
      {
        uint64_t v202 = a2[3];
        uint64_t v201 = a2 + 3;
        uint64_t v200 = (uint64_t)v202;
        char v203 = *((unsigned char *)v201 + 23);
        int v204 = v203;
        if (v203 >= 0) {
          uint64_t v205 = (uint64_t)v201;
        }
        else {
          uint64_t v205 = v200;
        }
        uint64_t v206 = v203 & 0x7F;
        if (v204 >= 0) {
          uint64_t v207 = v206;
        }
        else {
          uint64_t v207 = (uint64_t)v201[1];
        }
        char v208 = *((unsigned char *)v201 + 47);
        int v209 = v208;
        if (v208 >= 0) {
          uint64_t v210 = (uint64_t)(v201 + 3);
        }
        else {
          uint64_t v210 = (uint64_t)v201[3];
        }
        uint64_t v211 = v208 & 0x7F;
        if (v209 >= 0) {
          uint64_t v212 = v211;
        }
        else {
          uint64_t v212 = (uint64_t)v201[4];
        }
        Impl = (llvm::detail::IEEEFloat *)llvm::InlineAsm::get(v46, v205, v207, v210, v212, *((unsigned char *)v201 + 56), *((unsigned char *)v201 + 57), *((_DWORD *)v201 + 15), *((unsigned char *)v201 + 64));
      }
      else
      {
        Impl = (llvm::detail::IEEEFloat *)a2;
      }
      uint64_t v47 = *(void *)(*(void *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
      uint64_t v478 = 2;
      v479 = 0;
      size_t v480 = (int32x2_t ****)Impl;
      if (Impl != (llvm::detail::IEEEFloat *)-8192 && Impl != (llvm::detail::IEEEFloat *)-4096 && Impl) {
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v478);
      }
      int v477 = &unk_1F2615EC8;
      uint64_t v481 = v47;
      uint64_t v19 = sub_1CC4CFF80(v47, &v477);
      if (v480 != (int32x2_t ****)-8192 && v480 != (int32x2_t ****)-4096 && v480)
      {
        unint64_t v48 = v478 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v478 & 0xFFFFFFFFFFFFFFF8) = v479;
        if (v479)
        {
          unint64_t *v479 = *v479 & 7 | v48;
        }
        else
        {
          uint64_t v49 = v480;
          __int16 v50 = ***v480;
          unint64_t v51 = (unint64_t)v50[303];
          if (v51 <= v48)
          {
            uint64_t v52 = v50[305].u32[0];
            if (v51 + 16 * v52 > v48)
            {
              unsigned int v53 = v52 - 1;
              LODWORD(v54) = v53 & ((v480 >> 4) ^ (v480 >> 9));
              uint64_t v55 = (int32x2_t *****)(v51 + 16 * v54);
              int v56 = *v55;
              if (v480 == *v55)
              {
LABEL_68:
                const char *v55 = (int32x2_t ****)-8192;
                v50[304] = vadd_s32(v50[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v49 = v480;
              }
              else
              {
                int v57 = 1;
                while (v56 != (int32x2_t ****)-4096)
                {
                  int v58 = v54 + v57++;
                  uint64_t v54 = v58 & v53;
                  int v56 = *(int32x2_t *****)(v51 + 16 * v54);
                  if (v480 == v56)
                  {
                    uint64_t v55 = (int32x2_t *****)(v51 + 16 * v54);
                    goto LABEL_68;
                  }
                }
              }
              *((unsigned char *)v49 + 17) &= ~1u;
            }
          }
        }
      }
      uint64_t v109 = (llvm::detail::IEEEFloat *)v19[7];
      if (v109 == Impl) {
        return (uint64_t)Impl;
      }
      if (!v109 || v109 == (llvm::detail::IEEEFloat *)-8192 || v109 == (llvm::detail::IEEEFloat *)-4096) {
        goto LABEL_149;
      }
      unint64_t v60 = v19[5] & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v60 = v19[6];
      uint64_t v61 = (unint64_t *)v19[6];
      if (!v61)
      {
        uint64_t v62 = v19[7];
        long long v63 = ***(int32x2_t ****)v62;
        unint64_t v64 = (unint64_t)v63[303];
        if (v64 <= v60)
        {
          uint64_t v195 = v63[305].u32[0];
          if (v64 + 16 * v195 > v60)
          {
            unsigned int v196 = v195 - 1;
            LODWORD(v67) = v196 & ((v62 >> 4) ^ (v62 >> 9));
            unint64_t v68 = (uint64_t *)(v64 + 16 * v67);
            uint64_t v197 = *v68;
            if (v62 != *v68)
            {
              int v198 = 1;
              while (v197 != -4096)
              {
                int v199 = v67 + v198++;
                uint64_t v67 = v199 & v196;
                uint64_t v197 = *(void *)(v64 + 16 * v67);
                if (v62 == v197) {
                  goto LABEL_302;
                }
              }
              goto LABEL_304;
            }
            goto LABEL_303;
          }
        }
        goto LABEL_149;
      }
      goto LABEL_704;
    }
    if (v31 > 0x14) {
      return 0;
    }
    switch(v31)
    {
      case 7u:
        unsigned int v233 = (llvm::NoCFIValue *)sub_1CD2629B8(a1, *(a2 - 4));
        Impl = (llvm::detail::IEEEFloat *)llvm::NoCFIValue::get(v233, v234);
        uint64_t v235 = *(void *)(*(void *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
        uint64_t v478 = 2;
        v479 = 0;
        size_t v480 = (int32x2_t ****)a2;
        if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2) {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v478);
        }
        int v477 = &unk_1F2615EC8;
        uint64_t v481 = v235;
        uint64_t v19 = sub_1CC4CFF80(v235, &v477);
        if (v480 != (int32x2_t ****)-8192 && v480 != (int32x2_t ****)-4096 && v480)
        {
          unint64_t v236 = v478 & 0xFFFFFFFFFFFFFFF8;
          *(void *)(v478 & 0xFFFFFFFFFFFFFFF8) = v479;
          if (v479)
          {
            unint64_t *v479 = *v479 & 7 | v236;
          }
          else
          {
            uint64_t v237 = v480;
            uint64_t v238 = ***v480;
            unint64_t v239 = (unint64_t)v238[303];
            if (v239 <= v236)
            {
              uint64_t v240 = v238[305].u32[0];
              if (v239 + 16 * v240 > v236)
              {
                unsigned int v241 = v240 - 1;
                LODWORD(v242) = v241 & ((v480 >> 4) ^ (v480 >> 9));
                size_t v243 = (int32x2_t *****)(v239 + 16 * v242);
                size_t v244 = *v243;
                if (v480 == *v243)
                {
LABEL_366:
                  *size_t v243 = (int32x2_t ****)-8192;
                  v238[304] = vadd_s32(v238[304], (int32x2_t)0x1FFFFFFFFLL);
                  uint64_t v237 = v480;
                }
                else
                {
                  int v245 = 1;
                  while (v244 != (int32x2_t ****)-4096)
                  {
                    int v246 = v242 + v245++;
                    uint64_t v242 = v246 & v241;
                    size_t v244 = *(int32x2_t *****)(v239 + 16 * v242);
                    if (v480 == v244)
                    {
                      size_t v243 = (int32x2_t *****)(v239 + 16 * v242);
                      goto LABEL_366;
                    }
                  }
                }
                *((unsigned char *)v237 + 17) &= ~1u;
              }
            }
          }
        }
        uint64_t v364 = (llvm::detail::IEEEFloat *)v19[7];
        if (v364 == Impl) {
          return (uint64_t)Impl;
        }
        if (!v364 || v364 == (llvm::detail::IEEEFloat *)-8192 || v364 == (llvm::detail::IEEEFloat *)-4096) {
          goto LABEL_149;
        }
        unint64_t v60 = v19[5] & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v60 = v19[6];
        uint64_t v61 = (unint64_t *)v19[6];
        if (!v61)
        {
          uint64_t v62 = v19[7];
          long long v63 = ***(int32x2_t ****)v62;
          unint64_t v64 = (unint64_t)v63[303];
          if (v64 <= v60)
          {
            uint64_t v365 = v63[305].u32[0];
            if (v64 + 16 * v365 > v60)
            {
              unsigned int v366 = v365 - 1;
              LODWORD(v67) = v366 & ((v62 >> 4) ^ (v62 >> 9));
              unint64_t v68 = (uint64_t *)(v64 + 16 * v67);
              uint64_t v367 = *v68;
              if (v62 != *v68)
              {
                int v368 = 1;
                while (v367 != -4096)
                {
                  int v369 = v67 + v368++;
                  uint64_t v67 = v369 & v366;
                  uint64_t v367 = *(void *)(v64 + 16 * v67);
                  if (v62 == v367) {
                    goto LABEL_302;
                  }
                }
                goto LABEL_304;
              }
              goto LABEL_303;
            }
          }
          goto LABEL_149;
        }
        goto LABEL_704;
      case 6u:
        uint64_t v219 = (unsigned __int8 *)sub_1CD2629B8(a1, *(a2 - 4));
        if (v219 && v219[16] <= 3u)
        {
          Impl = (llvm::detail::IEEEFloat *)llvm::DSOLocalEquivalent::get((llvm::DSOLocalEquivalent *)v219, v220);
          uint64_t v221 = *(void *)(*(void *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
          uint64_t v478 = 2;
          v479 = 0;
          size_t v480 = (int32x2_t ****)a2;
          if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2) {
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v478);
          }
          int v477 = &unk_1F2615EC8;
          uint64_t v481 = v221;
          uint64_t v19 = sub_1CC4CFF80(v221, &v477);
          if (v480 != (int32x2_t ****)-8192 && v480 != (int32x2_t ****)-4096 && v480)
          {
            unint64_t v222 = v478 & 0xFFFFFFFFFFFFFFF8;
            *(void *)(v478 & 0xFFFFFFFFFFFFFFF8) = v479;
            if (v479)
            {
              unint64_t *v479 = *v479 & 7 | v222;
            }
            else
            {
              int v223 = v480;
              int v224 = ***v480;
              unint64_t v225 = (unint64_t)v224[303];
              if (v225 <= v222)
              {
                uint64_t v226 = v224[305].u32[0];
                if (v225 + 16 * v226 > v222)
                {
                  unsigned int v227 = v226 - 1;
                  LODWORD(v228) = v227 & ((v480 >> 4) ^ (v480 >> 9));
                  size_t v229 = (int32x2_t *****)(v225 + 16 * v228);
                  uint64_t v230 = *v229;
                  if (v480 == *v229)
                  {
LABEL_349:
                    *size_t v229 = (int32x2_t ****)-8192;
                    v224[304] = vadd_s32(v224[304], (int32x2_t)0x1FFFFFFFFLL);
                    int v223 = v480;
                  }
                  else
                  {
                    int v231 = 1;
                    while (v230 != (int32x2_t ****)-4096)
                    {
                      int v232 = v228 + v231++;
                      uint64_t v228 = v232 & v227;
                      uint64_t v230 = *(int32x2_t *****)(v225 + 16 * v228);
                      if (v480 == v230)
                      {
                        size_t v229 = (int32x2_t *****)(v225 + 16 * v228);
                        goto LABEL_349;
                      }
                    }
                  }
                  *((unsigned char *)v223 + 17) &= ~1u;
                }
              }
            }
          }
          uint64_t v442 = (llvm::detail::IEEEFloat *)v19[7];
          if (v442 == Impl) {
            return (uint64_t)Impl;
          }
          if (!v442 || v442 == (llvm::detail::IEEEFloat *)-8192 || v442 == (llvm::detail::IEEEFloat *)-4096) {
            goto LABEL_149;
          }
          unint64_t v60 = v19[5] & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v60 = v19[6];
          uint64_t v61 = (unint64_t *)v19[6];
          if (!v61)
          {
            uint64_t v62 = v19[7];
            long long v63 = ***(int32x2_t ****)v62;
            unint64_t v64 = (unint64_t)v63[303];
            if (v64 <= v60)
            {
              uint64_t v443 = v63[305].u32[0];
              if (v64 + 16 * v443 > v60)
              {
                unsigned int v444 = v443 - 1;
                LODWORD(v67) = v444 & ((v62 >> 4) ^ (v62 >> 9));
                unint64_t v68 = (uint64_t *)(v64 + 16 * v67);
                uint64_t v445 = *v68;
                if (v62 != *v68)
                {
                  int v446 = 1;
                  while (v445 != -4096)
                  {
                    int v447 = v67 + v446++;
                    uint64_t v67 = v447 & v444;
                    uint64_t v445 = *(void *)(v64 + 16 * v67);
                    if (v62 == v445) {
                      goto LABEL_302;
                    }
                  }
                  goto LABEL_304;
                }
                goto LABEL_303;
              }
            }
            goto LABEL_149;
          }
        }
        else
        {
          uint64_t v323 = llvm::Value::stripPointerCastsAndAliases((llvm::Value *)v219);
          uint64_t v324 = *a2;
          uint64_t v325 = *(void *)(a1 + 8);
          if (v325) {
            uint64_t v324 = (llvm::Constant *)(*(uint64_t (**)(uint64_t, llvm::MDNode *))(*(void *)v325 + 24))(v325, *a2);
          }
          Impl = (llvm::detail::IEEEFloat *)llvm::DSOLocalEquivalent::get(v323, v322);
          if (*(llvm::Constant **)Impl != v324) {
            Impl = sub_1CC56C0C0((llvm *)0x31, Impl, v324, 0);
          }
          uint64_t v326 = *(void *)(*(void *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
          uint64_t v478 = 2;
          v479 = 0;
          size_t v480 = (int32x2_t ****)a2;
          if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2) {
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v478);
          }
          int v477 = &unk_1F2615EC8;
          uint64_t v481 = v326;
          uint64_t v19 = sub_1CC4CFF80(v326, &v477);
          if (v480 != (int32x2_t ****)-8192 && v480 != (int32x2_t ****)-4096 && v480)
          {
            unint64_t v327 = v478 & 0xFFFFFFFFFFFFFFF8;
            *(void *)(v478 & 0xFFFFFFFFFFFFFFF8) = v479;
            if (v479)
            {
              unint64_t *v479 = *v479 & 7 | v327;
            }
            else
            {
              int v328 = v480;
              unint64_t v329 = ***v480;
              unint64_t v330 = (unint64_t)v329[303];
              if (v330 <= v327)
              {
                uint64_t v331 = v329[305].u32[0];
                if (v330 + 16 * v331 > v327)
                {
                  unsigned int v332 = v331 - 1;
                  LODWORD(v333) = v332 & ((v480 >> 4) ^ (v480 >> 9));
                  uint64_t v334 = (int32x2_t *****)(v330 + 16 * v333);
                  uint64_t v335 = *v334;
                  if (v480 == *v334)
                  {
LABEL_514:
                    *uint64_t v334 = (int32x2_t ****)-8192;
                    v329[304] = vadd_s32(v329[304], (int32x2_t)0x1FFFFFFFFLL);
                    int v328 = v480;
                  }
                  else
                  {
                    int v336 = 1;
                    while (v335 != (int32x2_t ****)-4096)
                    {
                      int v337 = v333 + v336++;
                      uint64_t v333 = v337 & v332;
                      uint64_t v335 = *(int32x2_t *****)(v330 + 16 * v333);
                      if (v480 == v335)
                      {
                        uint64_t v334 = (int32x2_t *****)(v330 + 16 * v333);
                        goto LABEL_514;
                      }
                    }
                  }
                  *((unsigned char *)v328 + 17) &= ~1u;
                }
              }
            }
          }
          size_t v436 = (llvm::detail::IEEEFloat *)v19[7];
          if (v436 == Impl) {
            return (uint64_t)Impl;
          }
          if (!v436 || v436 == (llvm::detail::IEEEFloat *)-8192 || v436 == (llvm::detail::IEEEFloat *)-4096) {
            goto LABEL_149;
          }
          unint64_t v60 = v19[5] & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v60 = v19[6];
          uint64_t v61 = (unint64_t *)v19[6];
          if (!v61)
          {
            uint64_t v62 = v19[7];
            long long v63 = ***(int32x2_t ****)v62;
            unint64_t v64 = (unint64_t)v63[303];
            if (v64 <= v60)
            {
              uint64_t v437 = v63[305].u32[0];
              if (v64 + 16 * v437 > v60)
              {
                unsigned int v438 = v437 - 1;
                LODWORD(v67) = v438 & ((v62 >> 4) ^ (v62 >> 9));
                unint64_t v68 = (uint64_t *)(v64 + 16 * v67);
                uint64_t v439 = *v68;
                if (v62 != *v68)
                {
                  int v440 = 1;
                  while (v439 != -4096)
                  {
                    int v441 = v67 + v440++;
                    uint64_t v67 = v441 & v438;
                    uint64_t v439 = *(void *)(v64 + 16 * v67);
                    if (v62 == v439) {
                      goto LABEL_302;
                    }
                  }
                  goto LABEL_304;
                }
                goto LABEL_303;
              }
            }
            goto LABEL_149;
          }
        }
        goto LABEL_704;
      case 4u:
        uint64_t v247 = (llvm::BlockAddress *)sub_1CD2629B8(a1, *(a2 - 8));
        if (*((llvm::BlockAddress **)v247 + 9) == (llvm::BlockAddress *)((char *)v247 + 72))
        {
          uint64_t v472 = *(a2 - 4);
          LOWORD(v481) = 257;
          operator new();
        }
        int64x2_t v338 = (llvm::Function *)sub_1CD2629B8(a1, *(a2 - 4));
        if (!v338) {
          int64x2_t v338 = *(a2 - 4);
        }
        Impl = llvm::BlockAddress::get(v247, v338, v339);
        uint64_t v340 = *(void *)(*(void *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
        uint64_t v478 = 2;
        v479 = 0;
        size_t v480 = (int32x2_t ****)a2;
        if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2) {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v478);
        }
        int v477 = &unk_1F2615EC8;
        uint64_t v481 = v340;
        uint64_t v19 = sub_1CC4CFF80(v340, &v477);
        if (v480 != (int32x2_t ****)-8192 && v480 != (int32x2_t ****)-4096 && v480)
        {
          unint64_t v341 = v478 & 0xFFFFFFFFFFFFFFF8;
          *(void *)(v478 & 0xFFFFFFFFFFFFFFF8) = v479;
          if (v479)
          {
            unint64_t *v479 = *v479 & 7 | v341;
          }
          else
          {
            v342 = v480;
            unint64_t v343 = ***v480;
            unint64_t v344 = (unint64_t)v343[303];
            if (v344 <= v341)
            {
              uint64_t v345 = v343[305].u32[0];
              if (v344 + 16 * v345 > v341)
              {
                unsigned int v346 = v345 - 1;
                LODWORD(v347) = v346 & ((v480 >> 4) ^ (v480 >> 9));
                uint64_t v348 = (int32x2_t *****)(v344 + 16 * v347);
                uint64_t v349 = *v348;
                if (v480 == *v348)
                {
LABEL_533:
                  *uint64_t v348 = (int32x2_t ****)-8192;
                  v343[304] = vadd_s32(v343[304], (int32x2_t)0x1FFFFFFFFLL);
                  v342 = v480;
                }
                else
                {
                  int v350 = 1;
                  while (v349 != (int32x2_t ****)-4096)
                  {
                    int v351 = v347 + v350++;
                    uint64_t v347 = v351 & v346;
                    uint64_t v349 = *(int32x2_t *****)(v344 + 16 * v347);
                    if (v480 == v349)
                    {
                      uint64_t v348 = (int32x2_t *****)(v344 + 16 * v347);
                      goto LABEL_533;
                    }
                  }
                }
                *((unsigned char *)v342 + 17) &= ~1u;
              }
            }
          }
        }
        unint64_t v370 = (llvm::detail::IEEEFloat *)v19[7];
        if (v370 == Impl) {
          return (uint64_t)Impl;
        }
        if (!v370 || v370 == (llvm::detail::IEEEFloat *)-8192 || v370 == (llvm::detail::IEEEFloat *)-4096) {
          goto LABEL_149;
        }
        unint64_t v60 = v19[5] & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v60 = v19[6];
        uint64_t v61 = (unint64_t *)v19[6];
        if (!v61)
        {
          uint64_t v62 = v19[7];
          long long v63 = ***(int32x2_t ****)v62;
          unint64_t v64 = (unint64_t)v63[303];
          if (v64 <= v60)
          {
            uint64_t v371 = v63[305].u32[0];
            if (v64 + 16 * v371 > v60)
            {
              unsigned int v372 = v371 - 1;
              LODWORD(v67) = v372 & ((v62 >> 4) ^ (v62 >> 9));
              unint64_t v68 = (uint64_t *)(v64 + 16 * v67);
              uint64_t v373 = *v68;
              if (v62 != *v68)
              {
                int v374 = 1;
                while (v373 != -4096)
                {
                  int v375 = v67 + v374++;
                  uint64_t v67 = v375 & v372;
                  uint64_t v373 = *(void *)(v64 + 16 * v67);
                  if (v62 == v373) {
                    goto LABEL_302;
                  }
                }
                goto LABEL_304;
              }
              goto LABEL_303;
            }
          }
          goto LABEL_149;
        }
        goto LABEL_704;
    }
    int v78 = *((_DWORD *)a2 + 5);
    uint64_t v79 = v78 & 0x7FFFFFF;
    if ((v78 & 0x7FFFFFF) != 0)
    {
      uint64_t v80 = 0;
      uint64_t v81 = 0;
      while (1)
      {
        int v82 = *((_DWORD *)a2 + 5);
        if ((v82 & 0x40000000) != 0) {
          int64_t v83 = (llvm::MDNode **)*(a2 - 1);
        }
        else {
          int64_t v83 = &a2[-4 * (v82 & 0x7FFFFFF)];
        }
        std::string v84 = v83[v80];
        uint64_t v85 = sub_1CD2629B8(a1, v84);
        int v86 = 4 * (v85 != (void)v84);
        if (!v85) {
          int v86 = 1;
        }
        if (v86) {
          break;
        }
        ++v81;
        v80 += 4;
        if (v79 == v81)
        {
          int v87 = 1;
          LODWORD(v81) = v79;
          goto LABEL_174;
        }
      }
      if (v86 != 4) {
        return 0;
      }
      int v87 = 0;
    }
    else
    {
      LODWORD(v81) = 0;
      uint64_t v85 = 0;
      int v87 = 1;
    }
LABEL_174:
    uint64_t v124 = *a2;
    uint64_t v125 = *(void *)(a1 + 8);
    if (v125) {
      uint64_t v124 = (llvm::PoisonValue *)(*(uint64_t (**)(uint64_t, llvm::MDNode *))(*(void *)v125 + 24))(v125, *a2);
    }
    if (v87 && v124 == *a2)
    {
      uint64_t v177 = *(void *)(*(void *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
      uint64_t v478 = 2;
      v479 = 0;
      size_t v480 = (int32x2_t ****)a2;
      if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2) {
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v478);
      }
      int v477 = &unk_1F2615EC8;
      uint64_t v481 = v177;
      __int16 v33 = sub_1CC4CFF80(v177, &v477);
      if (v480 != (int32x2_t ****)-8192 && v480 != (int32x2_t ****)-4096 && v480)
      {
        unint64_t v178 = v478 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v478 & 0xFFFFFFFFFFFFFFF8) = v479;
        if (v479)
        {
          unint64_t *v479 = *v479 & 7 | v178;
        }
        else
        {
          uint64_t v179 = v480;
          size_t v180 = ***v480;
          unint64_t v181 = (unint64_t)v180[303];
          if (v181 <= v178)
          {
            uint64_t v182 = v180[305].u32[0];
            if (v181 + 16 * v182 > v178)
            {
              unsigned int v183 = v182 - 1;
              LODWORD(v184) = v183 & ((v480 >> 4) ^ (v480 >> 9));
              char v185 = (int32x2_t *****)(v181 + 16 * v184);
              size_t v186 = *v185;
              if (v480 == *v185)
              {
LABEL_278:
                *char v185 = (int32x2_t ****)-8192;
                v180[304] = vadd_s32(v180[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v179 = v480;
              }
              else
              {
                int v187 = 1;
                while (v186 != (int32x2_t ****)-4096)
                {
                  int v188 = v184 + v187++;
                  uint64_t v184 = v188 & v183;
                  size_t v186 = *(int32x2_t *****)(v181 + 16 * v184);
                  if (v480 == v186)
                  {
                    char v185 = (int32x2_t *****)(v181 + 16 * v184);
                    goto LABEL_278;
                  }
                }
              }
              *((unsigned char *)v179 + 17) &= ~1u;
            }
          }
        }
      }
      unsigned int v316 = (llvm::MDNode **)v33[7];
      if (v316 == a2) {
        return (uint64_t)a2;
      }
      if (!v316 || v316 == (llvm::MDNode **)-8192 || v316 == (llvm::MDNode **)-4096) {
        goto LABEL_106;
      }
      unint64_t v153 = v33[5] & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v153 = v33[6];
      uint64_t v154 = (unint64_t *)v33[6];
      if (!v154)
      {
        uint64_t v155 = v33[7];
        unint64_t v156 = ***(int32x2_t ****)v155;
        unint64_t v157 = (unint64_t)v156[303];
        if (v157 <= v153)
        {
          uint64_t v317 = v156[305].u32[0];
          if (v157 + 16 * v317 > v153)
          {
            unsigned int v318 = v317 - 1;
            LODWORD(v160) = v318 & ((v155 >> 4) ^ (v155 >> 9));
            uint64_t v161 = (uint64_t *)(v157 + 16 * v160);
            uint64_t v319 = *v161;
            if (v155 != *v161)
            {
              int v320 = 1;
              while (v319 != -4096)
              {
                int v321 = v160 + v320++;
                uint64_t v160 = v321 & v318;
                uint64_t v319 = *(void *)(v157 + 16 * v160);
                if (v155 == v319) {
                  goto LABEL_243;
                }
              }
              goto LABEL_245;
            }
            goto LABEL_244;
          }
        }
        goto LABEL_106;
      }
      goto LABEL_494;
    }
    int v477 = &v479;
    uint64_t v478 = 0x800000000;
    if (v79 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v81)
    {
      uint64_t v126 = 0;
      do
      {
        int v127 = *((_DWORD *)a2 + 5);
        if ((v127 & 0x40000000) != 0) {
          int v128 = (llvm::MDNode **)*(a2 - 1);
        }
        else {
          int v128 = &a2[-4 * (v127 & 0x7FFFFFF)];
        }
        if (v478 >= (unint64_t)HIDWORD(v478)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v477 + v478) = v128[v126];
        LODWORD(v478) = v478 + 1;
        v126 += 4;
      }
      while (4 * v81 != v126);
    }
    if ((v87 & 1) == 0)
    {
      if (v478 >= HIDWORD(v478)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v477 + v478) = v85;
      LODWORD(v478) = v478 + 1;
      unsigned int v129 = v81 + 1;
      if (v129 != v79)
      {
        while (1)
        {
          int v135 = *((_DWORD *)a2 + 5);
          uint64_t v136 = (v135 & 0x40000000) != 0 ? *(a2 - 1) : (llvm::MDNode *)&a2[-4 * (v135 & 0x7FFFFFF)];
          uint64_t v137 = sub_1CD2629B8(a1, *((void *)v136 + 4 * v129));
          if (!v137) {
            break;
          }
          if (v478 >= (unint64_t)HIDWORD(v478)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v477 + v478) = v137;
          LODWORD(v478) = v478 + 1;
          if (v79 == ++v129) {
            goto LABEL_192;
          }
        }
        Impl = 0;
        goto LABEL_466;
      }
    }
LABEL_192:
    uint64_t v130 = *(void *)(a1 + 8);
    int v131 = *((unsigned __int8 *)a2 + 16);
    if (v130)
    {
      if (v131 != 62)
      {
        if (v131 != 5) {
          goto LABEL_216;
        }
        if (*((_WORD *)a2 + 9) != 34)
        {
          uint64_t v134 = 0;
          goto LABEL_442;
        }
      }
      BOOL v132 = v131 == 62;
      uint64_t v133 = 3;
      if (v132) {
        uint64_t v133 = 8;
      }
      uint64_t v134 = (llvm::Type *)(*(uint64_t (**)(uint64_t, llvm::MDNode *))(*(void *)v130 + 24))(v130, a2[v133]);
      int v131 = *((unsigned __int8 *)a2 + 16);
    }
    else
    {
      uint64_t v134 = 0;
    }
    if (v131 != 5)
    {
LABEL_216:
      switch(v131)
      {
        case 8:
          Impl = llvm::ConstantArray::get(v124, (llvm::Type *)v477, v478);
          uint64_t v140 = *(void *)(*(void *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
          uint64_t v473 = (llvm::BasicBlock *)2;
          v474 = 0;
          unsigned int v475 = (int32x2_t ****)a2;
          if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2) {
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v473);
          }
          uint64_t v472 = &unk_1F2615EC8;
          uint64_t v476 = v140;
          int v141 = sub_1CC4CFF80(v140, &v472);
          if (v475 != (int32x2_t ****)-8192 && v475 != (int32x2_t ****)-4096 && v475)
          {
            unint64_t v142 = (unint64_t)v473 & 0xFFFFFFFFFFFFFFF8;
            *(void *)((unint64_t)v473 & 0xFFFFFFFFFFFFFFF8) = v474;
            if (v474)
            {
              unint64_t *v474 = *v474 & 7 | v142;
            }
            else
            {
              int v143 = v475;
              size_t v144 = ***v475;
              unint64_t v145 = (unint64_t)v144[303];
              if (v145 <= v142)
              {
                uint64_t v146 = v144[305].u32[0];
                if (v145 + 16 * v146 > v142)
                {
                  unsigned int v147 = v146 - 1;
                  LODWORD(v148) = v147 & ((v475 >> 4) ^ (v475 >> 9));
                  size_t v149 = (int32x2_t *****)(v145 + 16 * v148);
                  size_t v150 = *v149;
                  if (v475 == *v149)
                  {
LABEL_232:
                    uint64_t *v149 = (int32x2_t ****)-8192;
                    v144[304] = vadd_s32(v144[304], (int32x2_t)0x1FFFFFFFFLL);
                    int v143 = v475;
                  }
                  else
                  {
                    int v151 = 1;
                    while (v150 != (int32x2_t ****)-4096)
                    {
                      int v152 = v148 + v151++;
                      uint64_t v148 = v152 & v147;
                      size_t v150 = *(int32x2_t *****)(v145 + 16 * v148);
                      if (v475 == v150)
                      {
                        size_t v149 = (int32x2_t *****)(v145 + 16 * v148);
                        goto LABEL_232;
                      }
                    }
                  }
                  *((unsigned char *)v143 + 17) &= ~1u;
                }
              }
            }
          }
          unsigned int v389 = (llvm::detail::IEEEFloat *)v141[7];
          if (v389 != Impl)
          {
            if (!v389 || v389 == (llvm::detail::IEEEFloat *)-8192 || v389 == (llvm::detail::IEEEFloat *)-4096) {
              goto LABEL_462;
            }
            unint64_t v377 = v141[5] & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v377 = v141[6];
            uint64_t v378 = (unint64_t *)v141[6];
            if (v378) {
              goto LABEL_757;
            }
            uint64_t v379 = v141[7];
            uint64_t v380 = ***(int32x2_t ****)v379;
            unint64_t v381 = (unint64_t)v380[303];
            if (v381 > v377) {
              goto LABEL_462;
            }
            uint64_t v390 = v380[305].u32[0];
            if (v381 + 16 * v390 <= v377) {
              goto LABEL_462;
            }
            unsigned int v391 = v390 - 1;
            LODWORD(v384) = v391 & ((v379 >> 4) ^ (v379 >> 9));
            int v385 = (uint64_t *)(v381 + 16 * v384);
            uint64_t v392 = *v385;
            if (v379 == *v385) {
              goto LABEL_642;
            }
            int v393 = 1;
            do
            {
              if (v392 == -4096) {
                goto LABEL_643;
              }
              int v394 = v384 + v393++;
              uint64_t v384 = v394 & v391;
              uint64_t v392 = *(void *)(v381 + 16 * v384);
            }
            while (v379 != v392);
            goto LABEL_641;
          }
          break;
        case 9:
          Impl = (llvm::detail::IEEEFloat *)llvm::ConstantStruct::get(v124, (llvm::Type *)v477, v478);
          uint64_t v261 = *(void *)(*(void *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
          uint64_t v473 = (llvm::BasicBlock *)2;
          v474 = 0;
          unsigned int v475 = (int32x2_t ****)a2;
          if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2) {
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v473);
          }
          uint64_t v472 = &unk_1F2615EC8;
          uint64_t v476 = v261;
          int v141 = sub_1CC4CFF80(v261, &v472);
          if (v475 != (int32x2_t ****)-8192 && v475 != (int32x2_t ****)-4096 && v475)
          {
            unint64_t v262 = (unint64_t)v473 & 0xFFFFFFFFFFFFFFF8;
            *(void *)((unint64_t)v473 & 0xFFFFFFFFFFFFFFF8) = v474;
            if (v474)
            {
              unint64_t *v474 = *v474 & 7 | v262;
            }
            else
            {
              uint64_t v263 = v475;
              uint64_t v264 = ***v475;
              unint64_t v265 = (unint64_t)v264[303];
              if (v265 <= v262)
              {
                uint64_t v266 = v264[305].u32[0];
                if (v265 + 16 * v266 > v262)
                {
                  unsigned int v267 = v266 - 1;
                  LODWORD(v268) = v267 & ((v475 >> 4) ^ (v475 >> 9));
                  uint64_t v269 = (int32x2_t *****)(v265 + 16 * v268);
                  size_t v270 = *v269;
                  if (v475 == *v269)
                  {
LABEL_404:
                    *uint64_t v269 = (int32x2_t ****)-8192;
                    v264[304] = vadd_s32(v264[304], (int32x2_t)0x1FFFFFFFFLL);
                    uint64_t v263 = v475;
                  }
                  else
                  {
                    int v271 = 1;
                    while (v270 != (int32x2_t ****)-4096)
                    {
                      int v272 = v268 + v271++;
                      uint64_t v268 = v272 & v267;
                      size_t v270 = *(int32x2_t *****)(v265 + 16 * v268);
                      if (v475 == v270)
                      {
                        uint64_t v269 = (int32x2_t *****)(v265 + 16 * v268);
                        goto LABEL_404;
                      }
                    }
                  }
                  *((unsigned char *)v263 + 17) &= ~1u;
                }
              }
            }
          }
          uint64_t v395 = (llvm::detail::IEEEFloat *)v141[7];
          if (v395 != Impl)
          {
            if (!v395 || v395 == (llvm::detail::IEEEFloat *)-8192 || v395 == (llvm::detail::IEEEFloat *)-4096) {
              goto LABEL_462;
            }
            unint64_t v377 = v141[5] & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v377 = v141[6];
            uint64_t v378 = (unint64_t *)v141[6];
            if (v378) {
              goto LABEL_757;
            }
            uint64_t v379 = v141[7];
            uint64_t v380 = ***(int32x2_t ****)v379;
            unint64_t v381 = (unint64_t)v380[303];
            if (v381 > v377) {
              goto LABEL_462;
            }
            uint64_t v396 = v380[305].u32[0];
            if (v381 + 16 * v396 <= v377) {
              goto LABEL_462;
            }
            unsigned int v397 = v396 - 1;
            LODWORD(v384) = v397 & ((v379 >> 4) ^ (v379 >> 9));
            int v385 = (uint64_t *)(v381 + 16 * v384);
            uint64_t v398 = *v385;
            if (v379 == *v385) {
              goto LABEL_642;
            }
            int v399 = 1;
            do
            {
              if (v398 == -4096) {
                goto LABEL_643;
              }
              int v400 = v384 + v399++;
              uint64_t v384 = v400 & v397;
              uint64_t v398 = *(void *)(v381 + 16 * v384);
            }
            while (v379 != v398);
            goto LABEL_641;
          }
          break;
        case 10:
          Impl = llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)v477, (llvm::Type *)v478);
          if (!Impl)
          {
            llvm::FixedVectorType::get(**(llvm::FixedVectorType ***)v477, (llvm::Type *)v478);
            Impl = (llvm::detail::IEEEFloat *)sub_1CC56A4DC(**v248 + 1288, (uint64_t)v248, v477, v478);
          }
          uint64_t v249 = *(void *)(*(void *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
          uint64_t v473 = (llvm::BasicBlock *)2;
          v474 = 0;
          unsigned int v475 = (int32x2_t ****)a2;
          if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2) {
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v473);
          }
          uint64_t v472 = &unk_1F2615EC8;
          uint64_t v476 = v249;
          int v141 = sub_1CC4CFF80(v249, &v472);
          if (v475 != (int32x2_t ****)-8192 && v475 != (int32x2_t ****)-4096 && v475)
          {
            unint64_t v250 = (unint64_t)v473 & 0xFFFFFFFFFFFFFFF8;
            *(void *)((unint64_t)v473 & 0xFFFFFFFFFFFFFFF8) = v474;
            if (v474)
            {
              unint64_t *v474 = *v474 & 7 | v250;
            }
            else
            {
              unsigned int v251 = v475;
              int v252 = ***v475;
              unint64_t v253 = (unint64_t)v252[303];
              if (v253 <= v250)
              {
                uint64_t v254 = v252[305].u32[0];
                if (v253 + 16 * v254 > v250)
                {
                  unsigned int v255 = v254 - 1;
                  LODWORD(v256) = v255 & ((v475 >> 4) ^ (v475 >> 9));
                  size_t v257 = (int32x2_t *****)(v253 + 16 * v256);
                  size_t v258 = *v257;
                  if (v475 == *v257)
                  {
LABEL_387:
                    *size_t v257 = (int32x2_t ****)-8192;
                    v252[304] = vadd_s32(v252[304], (int32x2_t)0x1FFFFFFFFLL);
                    unsigned int v251 = v475;
                  }
                  else
                  {
                    int v259 = 1;
                    while (v258 != (int32x2_t ****)-4096)
                    {
                      int v260 = v256 + v259++;
                      uint64_t v256 = v260 & v255;
                      size_t v258 = *(int32x2_t *****)(v253 + 16 * v256);
                      if (v475 == v258)
                      {
                        size_t v257 = (int32x2_t *****)(v253 + 16 * v256);
                        goto LABEL_387;
                      }
                    }
                  }
                  *((unsigned char *)v251 + 17) &= ~1u;
                }
              }
            }
          }
          uint64_t v376 = (llvm::detail::IEEEFloat *)v141[7];
          if (v376 != Impl)
          {
            if (!v376 || v376 == (llvm::detail::IEEEFloat *)-8192 || v376 == (llvm::detail::IEEEFloat *)-4096) {
              goto LABEL_462;
            }
            unint64_t v377 = v141[5] & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v377 = v141[6];
            uint64_t v378 = (unint64_t *)v141[6];
            if (v378) {
              goto LABEL_757;
            }
            uint64_t v379 = v141[7];
            uint64_t v380 = ***(int32x2_t ****)v379;
            unint64_t v381 = (unint64_t)v380[303];
            if (v381 > v377) {
              goto LABEL_462;
            }
            uint64_t v382 = v380[305].u32[0];
            if (v381 + 16 * v382 <= v377) {
              goto LABEL_462;
            }
            unsigned int v383 = v382 - 1;
            LODWORD(v384) = v383 & ((v379 >> 4) ^ (v379 >> 9));
            int v385 = (uint64_t *)(v381 + 16 * v384);
            uint64_t v386 = *v385;
            if (v379 == *v385) {
              goto LABEL_642;
            }
            int v387 = 1;
            do
            {
              if (v386 == -4096) {
                goto LABEL_643;
              }
              int v388 = v384 + v387++;
              uint64_t v384 = v388 & v383;
              uint64_t v386 = *(void *)(v381 + 16 * v384);
            }
            while (v379 != v386);
            goto LABEL_641;
          }
          break;
        case 12:
          Impl = (llvm::detail::IEEEFloat *)llvm::PoisonValue::get(v124, (llvm::Type *)a2);
          uint64_t v273 = *(void *)(*(void *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
          uint64_t v473 = (llvm::BasicBlock *)2;
          v474 = 0;
          unsigned int v475 = (int32x2_t ****)a2;
          if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2) {
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v473);
          }
          uint64_t v472 = &unk_1F2615EC8;
          uint64_t v476 = v273;
          int v141 = sub_1CC4CFF80(v273, &v472);
          if (v475 != (int32x2_t ****)-8192 && v475 != (int32x2_t ****)-4096 && v475)
          {
            unint64_t v274 = (unint64_t)v473 & 0xFFFFFFFFFFFFFFF8;
            *(void *)((unint64_t)v473 & 0xFFFFFFFFFFFFFFF8) = v474;
            if (v474)
            {
              unint64_t *v474 = *v474 & 7 | v274;
            }
            else
            {
              uint64_t v275 = v475;
              uint64_t v276 = ***v475;
              unint64_t v277 = (unint64_t)v276[303];
              if (v277 <= v274)
              {
                uint64_t v278 = v276[305].u32[0];
                if (v277 + 16 * v278 > v274)
                {
                  unsigned int v279 = v278 - 1;
                  LODWORD(v280) = v279 & ((v475 >> 4) ^ (v475 >> 9));
                  unint64_t v281 = (int32x2_t *****)(v277 + 16 * v280);
                  BOOL v282 = *v281;
                  if (v475 == *v281)
                  {
LABEL_421:
                    *unint64_t v281 = (int32x2_t ****)-8192;
                    v276[304] = vadd_s32(v276[304], (int32x2_t)0x1FFFFFFFFLL);
                    uint64_t v275 = v475;
                  }
                  else
                  {
                    int v283 = 1;
                    while (v282 != (int32x2_t ****)-4096)
                    {
                      int v284 = v280 + v283++;
                      uint64_t v280 = v284 & v279;
                      BOOL v282 = *(int32x2_t *****)(v277 + 16 * v280);
                      if (v475 == v282)
                      {
                        unint64_t v281 = (int32x2_t *****)(v277 + 16 * v280);
                        goto LABEL_421;
                      }
                    }
                  }
                  *((unsigned char *)v275 + 17) &= ~1u;
                }
              }
            }
          }
          uint64_t v401 = (llvm::detail::IEEEFloat *)v141[7];
          if (v401 != Impl)
          {
            if (!v401 || v401 == (llvm::detail::IEEEFloat *)-8192 || v401 == (llvm::detail::IEEEFloat *)-4096) {
              goto LABEL_462;
            }
            unint64_t v377 = v141[5] & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v377 = v141[6];
            uint64_t v378 = (unint64_t *)v141[6];
            if (v378) {
              goto LABEL_757;
            }
            uint64_t v379 = v141[7];
            uint64_t v380 = ***(int32x2_t ****)v379;
            unint64_t v381 = (unint64_t)v380[303];
            if (v381 > v377) {
              goto LABEL_462;
            }
            uint64_t v402 = v380[305].u32[0];
            if (v381 + 16 * v402 <= v377) {
              goto LABEL_462;
            }
            unsigned int v403 = v402 - 1;
            LODWORD(v384) = v403 & ((v379 >> 4) ^ (v379 >> 9));
            int v385 = (uint64_t *)(v381 + 16 * v384);
            uint64_t v404 = *v385;
            if (v379 == *v385) {
              goto LABEL_642;
            }
            int v405 = 1;
            do
            {
              if (v404 == -4096) {
                goto LABEL_643;
              }
              int v406 = v384 + v405++;
              uint64_t v384 = v406 & v403;
              uint64_t v404 = *(void *)(v381 + 16 * v384);
            }
            while (v379 != v404);
            goto LABEL_641;
          }
          break;
        default:
          if ((v131 - 11) > 1)
          {
            if (v131 == 18)
            {
              Impl = llvm::Constant::getNullValue(v124, (llvm::Type *)a2, a3);
              uint64_t v412 = *(void *)(*(void *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
              uint64_t v473 = (llvm::BasicBlock *)2;
              v474 = 0;
              unsigned int v475 = (int32x2_t ****)a2;
              if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2) {
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v473);
              }
              uint64_t v472 = &unk_1F2615EC8;
              uint64_t v476 = v412;
              int v141 = sub_1CC4CFF80(v412, &v472);
              if (v475 != (int32x2_t ****)-8192 && v475 != (int32x2_t ****)-4096 && v475)
              {
                unint64_t v413 = (unint64_t)v473 & 0xFFFFFFFFFFFFFFF8;
                *(void *)((unint64_t)v473 & 0xFFFFFFFFFFFFFFF8) = v474;
                if (v474)
                {
                  unint64_t *v474 = *v474 & 7 | v413;
                }
                else
                {
                  unsigned int v414 = v475;
                  uint64_t v415 = ***v475;
                  unint64_t v416 = (unint64_t)v415[303];
                  if (v416 <= v413)
                  {
                    uint64_t v417 = v415[305].u32[0];
                    if (v416 + 16 * v417 > v413)
                    {
                      unsigned int v418 = v417 - 1;
                      LODWORD(v419) = v418 & ((v475 >> 4) ^ (v475 >> 9));
                      unint64_t v420 = (int32x2_t *****)(v416 + 16 * v419);
                      unsigned int v421 = *v420;
                      if (v475 == *v420)
                      {
LABEL_659:
                        *unint64_t v420 = (int32x2_t ****)-8192;
                        v415[304] = vadd_s32(v415[304], (int32x2_t)0x1FFFFFFFFLL);
                        unsigned int v414 = v475;
                      }
                      else
                      {
                        int v422 = 1;
                        while (v421 != (int32x2_t ****)-4096)
                        {
                          int v423 = v419 + v422++;
                          uint64_t v419 = v423 & v418;
                          unsigned int v421 = *(int32x2_t *****)(v416 + 16 * v419);
                          if (v475 == v421)
                          {
                            unint64_t v420 = (int32x2_t *****)(v416 + 16 * v419);
                            goto LABEL_659;
                          }
                        }
                      }
                      *((unsigned char *)v414 + 17) &= ~1u;
                    }
                  }
                }
              }
              uint64_t v460 = (llvm::detail::IEEEFloat *)v141[7];
              if (v460 != Impl)
              {
                if (!v460 || v460 == (llvm::detail::IEEEFloat *)-8192 || v460 == (llvm::detail::IEEEFloat *)-4096) {
                  goto LABEL_462;
                }
                unint64_t v377 = v141[5] & 0xFFFFFFFFFFFFFFF8;
                *(void *)unint64_t v377 = v141[6];
                uint64_t v378 = (unint64_t *)v141[6];
                if (v378) {
                  goto LABEL_757;
                }
                uint64_t v379 = v141[7];
                uint64_t v380 = ***(int32x2_t ****)v379;
                unint64_t v381 = (unint64_t)v380[303];
                if (v381 > v377) {
                  goto LABEL_462;
                }
                uint64_t v461 = v380[305].u32[0];
                if (v381 + 16 * v461 <= v377) {
                  goto LABEL_462;
                }
                unsigned int v462 = v461 - 1;
                LODWORD(v384) = v462 & ((v379 >> 4) ^ (v379 >> 9));
                int v385 = (uint64_t *)(v381 + 16 * v384);
                uint64_t v463 = *v385;
                if (v379 == *v385) {
                  goto LABEL_642;
                }
                int v464 = 1;
                do
                {
                  if (v463 == -4096) {
                    goto LABEL_643;
                  }
                  int v465 = v384 + v464++;
                  uint64_t v384 = v465 & v462;
                  uint64_t v463 = *(void *)(v381 + 16 * v384);
                }
                while (v379 != v463);
                goto LABEL_641;
              }
            }
            else if (v131 == 13)
            {
              Impl = (llvm::detail::IEEEFloat *)llvm::ConstantAggregateZero::get(v124, (llvm::Type *)a2);
              uint64_t v352 = *(void *)(*(void *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
              uint64_t v473 = (llvm::BasicBlock *)2;
              v474 = 0;
              unsigned int v475 = (int32x2_t ****)a2;
              if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2) {
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v473);
              }
              uint64_t v472 = &unk_1F2615EC8;
              uint64_t v476 = v352;
              int v141 = sub_1CC4CFF80(v352, &v472);
              if (v475 != (int32x2_t ****)-8192 && v475 != (int32x2_t ****)-4096 && v475)
              {
                unint64_t v353 = (unint64_t)v473 & 0xFFFFFFFFFFFFFFF8;
                *(void *)((unint64_t)v473 & 0xFFFFFFFFFFFFFFF8) = v474;
                if (v474)
                {
                  unint64_t *v474 = *v474 & 7 | v353;
                }
                else
                {
                  int v354 = v475;
                  uint64_t v355 = ***v475;
                  unint64_t v356 = (unint64_t)v355[303];
                  if (v356 <= v353)
                  {
                    uint64_t v357 = v355[305].u32[0];
                    if (v356 + 16 * v357 > v353)
                    {
                      unsigned int v358 = v357 - 1;
                      LODWORD(v359) = v358 & ((v475 >> 4) ^ (v475 >> 9));
                      uint64_t v360 = (int32x2_t *****)(v356 + 16 * v359);
                      uint64_t v361 = *v360;
                      if (v475 == *v360)
                      {
LABEL_552:
                        void *v360 = (int32x2_t ****)-8192;
                        v355[304] = vadd_s32(v355[304], (int32x2_t)0x1FFFFFFFFLL);
                        int v354 = v475;
                      }
                      else
                      {
                        int v362 = 1;
                        while (v361 != (int32x2_t ****)-4096)
                        {
                          int v363 = v359 + v362++;
                          uint64_t v359 = v363 & v358;
                          uint64_t v361 = *(int32x2_t *****)(v356 + 16 * v359);
                          if (v475 == v361)
                          {
                            uint64_t v360 = (int32x2_t *****)(v356 + 16 * v359);
                            goto LABEL_552;
                          }
                        }
                      }
                      *((unsigned char *)v354 + 17) &= ~1u;
                    }
                  }
                }
              }
              unint64_t v454 = (llvm::detail::IEEEFloat *)v141[7];
              if (v454 != Impl)
              {
                if (!v454 || v454 == (llvm::detail::IEEEFloat *)-8192 || v454 == (llvm::detail::IEEEFloat *)-4096) {
                  goto LABEL_462;
                }
                unint64_t v377 = v141[5] & 0xFFFFFFFFFFFFFFF8;
                *(void *)unint64_t v377 = v141[6];
                uint64_t v378 = (unint64_t *)v141[6];
                if (v378) {
                  goto LABEL_757;
                }
                uint64_t v379 = v141[7];
                uint64_t v380 = ***(int32x2_t ****)v379;
                unint64_t v381 = (unint64_t)v380[303];
                if (v381 > v377) {
                  goto LABEL_462;
                }
                uint64_t v455 = v380[305].u32[0];
                if (v381 + 16 * v455 <= v377) {
                  goto LABEL_462;
                }
                unsigned int v456 = v455 - 1;
                LODWORD(v384) = v456 & ((v379 >> 4) ^ (v379 >> 9));
                int v385 = (uint64_t *)(v381 + 16 * v384);
                uint64_t v457 = *v385;
                if (v379 == *v385) {
                  goto LABEL_642;
                }
                int v458 = 1;
                do
                {
                  if (v457 == -4096) {
                    goto LABEL_643;
                  }
                  int v459 = v384 + v458++;
                  uint64_t v384 = v459 & v456;
                  uint64_t v457 = *(void *)(v381 + 16 * v384);
                }
                while (v379 != v457);
                goto LABEL_641;
              }
            }
            else
            {
              Impl = (llvm::detail::IEEEFloat *)llvm::ConstantPointerNull::get(v124, (llvm::PointerType *)a2);
              uint64_t v424 = *(void *)(*(void *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
              uint64_t v473 = (llvm::BasicBlock *)2;
              v474 = 0;
              unsigned int v475 = (int32x2_t ****)a2;
              if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2) {
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v473);
              }
              uint64_t v472 = &unk_1F2615EC8;
              uint64_t v476 = v424;
              int v141 = sub_1CC4CFF80(v424, &v472);
              if (v475 != (int32x2_t ****)-8192 && v475 != (int32x2_t ****)-4096 && v475)
              {
                unint64_t v425 = (unint64_t)v473 & 0xFFFFFFFFFFFFFFF8;
                *(void *)((unint64_t)v473 & 0xFFFFFFFFFFFFFFF8) = v474;
                if (v474)
                {
                  unint64_t *v474 = *v474 & 7 | v425;
                }
                else
                {
                  uint64_t v426 = v475;
                  uint64_t v427 = ***v475;
                  unint64_t v428 = (unint64_t)v427[303];
                  if (v428 <= v425)
                  {
                    uint64_t v429 = v427[305].u32[0];
                    if (v428 + 16 * v429 > v425)
                    {
                      unsigned int v430 = v429 - 1;
                      LODWORD(v431) = v430 & ((v475 >> 4) ^ (v475 >> 9));
                      int v432 = (int32x2_t *****)(v428 + 16 * v431);
                      uint64_t v433 = *v432;
                      if (v475 == *v432)
                      {
LABEL_676:
                        *int v432 = (int32x2_t ****)-8192;
                        v427[304] = vadd_s32(v427[304], (int32x2_t)0x1FFFFFFFFLL);
                        uint64_t v426 = v475;
                      }
                      else
                      {
                        int v434 = 1;
                        while (v433 != (int32x2_t ****)-4096)
                        {
                          int v435 = v431 + v434++;
                          uint64_t v431 = v435 & v430;
                          uint64_t v433 = *(int32x2_t *****)(v428 + 16 * v431);
                          if (v475 == v433)
                          {
                            int v432 = (int32x2_t *****)(v428 + 16 * v431);
                            goto LABEL_676;
                          }
                        }
                      }
                      *((unsigned char *)v426 + 17) &= ~1u;
                    }
                  }
                }
              }
              int v466 = (llvm::detail::IEEEFloat *)v141[7];
              if (v466 != Impl)
              {
                if (!v466 || v466 == (llvm::detail::IEEEFloat *)-8192 || v466 == (llvm::detail::IEEEFloat *)-4096) {
                  goto LABEL_462;
                }
                unint64_t v377 = v141[5] & 0xFFFFFFFFFFFFFFF8;
                *(void *)unint64_t v377 = v141[6];
                uint64_t v378 = (unint64_t *)v141[6];
                if (v378) {
                  goto LABEL_757;
                }
                uint64_t v379 = v141[7];
                uint64_t v380 = ***(int32x2_t ****)v379;
                unint64_t v381 = (unint64_t)v380[303];
                if (v381 > v377) {
                  goto LABEL_462;
                }
                uint64_t v467 = v380[305].u32[0];
                if (v381 + 16 * v467 <= v377) {
                  goto LABEL_462;
                }
                unsigned int v468 = v467 - 1;
                LODWORD(v384) = v468 & ((v379 >> 4) ^ (v379 >> 9));
                int v385 = (uint64_t *)(v381 + 16 * v384);
                uint64_t v469 = *v385;
                if (v379 == *v385) {
                  goto LABEL_642;
                }
                int v470 = 1;
                do
                {
                  if (v469 == -4096) {
                    goto LABEL_643;
                  }
                  int v471 = v384 + v470++;
                  uint64_t v384 = v471 & v468;
                  uint64_t v469 = *(void *)(v381 + 16 * v384);
                }
                while (v379 != v469);
                goto LABEL_641;
              }
            }
          }
          else
          {
            Impl = llvm::UndefValue::get(v124, (llvm::Type *)a2);
            uint64_t v285 = *(void *)(*(void *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
            uint64_t v473 = (llvm::BasicBlock *)2;
            v474 = 0;
            unsigned int v475 = (int32x2_t ****)a2;
            if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2) {
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v473);
            }
            uint64_t v472 = &unk_1F2615EC8;
            uint64_t v476 = v285;
            int v141 = sub_1CC4CFF80(v285, &v472);
            if (v475 != (int32x2_t ****)-8192 && v475 != (int32x2_t ****)-4096 && v475)
            {
              unint64_t v286 = (unint64_t)v473 & 0xFFFFFFFFFFFFFFF8;
              *(void *)((unint64_t)v473 & 0xFFFFFFFFFFFFFFF8) = v474;
              if (v474)
              {
                unint64_t *v474 = *v474 & 7 | v286;
              }
              else
              {
                uint64_t v287 = v475;
                BOOL v288 = ***v475;
                unint64_t v289 = (unint64_t)v288[303];
                if (v289 <= v286)
                {
                  uint64_t v290 = v288[305].u32[0];
                  if (v289 + 16 * v290 > v286)
                  {
                    unsigned int v291 = v290 - 1;
                    LODWORD(v292) = v291 & ((v475 >> 4) ^ (v475 >> 9));
                    uint64_t v293 = (int32x2_t *****)(v289 + 16 * v292);
                    int v294 = *v293;
                    if (v475 == *v293)
                    {
LABEL_439:
                      *uint64_t v293 = (int32x2_t ****)-8192;
                      v288[304] = vadd_s32(v288[304], (int32x2_t)0x1FFFFFFFFLL);
                      uint64_t v287 = v475;
                    }
                    else
                    {
                      int v295 = 1;
                      while (v294 != (int32x2_t ****)-4096)
                      {
                        int v296 = v292 + v295++;
                        uint64_t v292 = v296 & v291;
                        int v294 = *(int32x2_t *****)(v289 + 16 * v292);
                        if (v475 == v294)
                        {
                          uint64_t v293 = (int32x2_t *****)(v289 + 16 * v292);
                          goto LABEL_439;
                        }
                      }
                    }
                    *((unsigned char *)v287 + 17) &= ~1u;
                  }
                }
              }
            }
            size_t v448 = (llvm::detail::IEEEFloat *)v141[7];
            if (v448 != Impl)
            {
              if (!v448 || v448 == (llvm::detail::IEEEFloat *)-8192 || v448 == (llvm::detail::IEEEFloat *)-4096) {
                goto LABEL_462;
              }
              unint64_t v377 = v141[5] & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v377 = v141[6];
              uint64_t v378 = (unint64_t *)v141[6];
              if (v378) {
                goto LABEL_757;
              }
              uint64_t v379 = v141[7];
              uint64_t v380 = ***(int32x2_t ****)v379;
              unint64_t v381 = (unint64_t)v380[303];
              if (v381 > v377) {
                goto LABEL_462;
              }
              uint64_t v449 = v380[305].u32[0];
              if (v381 + 16 * v449 <= v377) {
                goto LABEL_462;
              }
              unsigned int v450 = v449 - 1;
              LODWORD(v384) = v450 & ((v379 >> 4) ^ (v379 >> 9));
              int v385 = (uint64_t *)(v381 + 16 * v384);
              uint64_t v451 = *v385;
              if (v379 == *v385) {
                goto LABEL_642;
              }
              int v452 = 1;
              do
              {
                if (v451 == -4096) {
                  goto LABEL_643;
                }
                int v453 = v384 + v452++;
                uint64_t v384 = v453 & v450;
                uint64_t v451 = *(void *)(v381 + 16 * v384);
              }
              while (v379 != v451);
              goto LABEL_641;
            }
          }
          break;
      }
LABEL_466:
      if (v477 != &v479) {
        free(v477);
      }
      return (uint64_t)Impl;
    }
LABEL_442:
    Impl = llvm::ConstantExpr::getWithOperands((llvm::ConstantExpr *)a2, (llvm::ConstantExpr **)v477, v478, (llvm::Constant ***)v124, 0, v134);
    uint64_t v297 = *(void *)(*(void *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
    uint64_t v473 = (llvm::BasicBlock *)2;
    v474 = 0;
    unsigned int v475 = (int32x2_t ****)a2;
    if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2) {
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v473);
    }
    uint64_t v472 = &unk_1F2615EC8;
    uint64_t v476 = v297;
    int v141 = sub_1CC4CFF80(v297, &v472);
    if (v475 != (int32x2_t ****)-8192 && v475 != (int32x2_t ****)-4096 && v475)
    {
      unint64_t v298 = (unint64_t)v473 & 0xFFFFFFFFFFFFFFF8;
      *(void *)((unint64_t)v473 & 0xFFFFFFFFFFFFFFF8) = v474;
      if (v474)
      {
        unint64_t *v474 = *v474 & 7 | v298;
      }
      else
      {
        size_t v299 = v475;
        size_t v300 = ***v475;
        unint64_t v301 = (unint64_t)v300[303];
        if (v301 <= v298)
        {
          uint64_t v302 = v300[305].u32[0];
          if (v301 + 16 * v302 > v298)
          {
            unsigned int v303 = v302 - 1;
            LODWORD(v304) = v303 & ((v475 >> 4) ^ (v475 >> 9));
            uint64_t v305 = (int32x2_t *****)(v301 + 16 * v304);
            uint64_t v306 = *v305;
            if (v475 == *v305)
            {
LABEL_457:
              *uint64_t v305 = (int32x2_t ****)-8192;
              v300[304] = vadd_s32(v300[304], (int32x2_t)0x1FFFFFFFFLL);
              size_t v299 = v475;
            }
            else
            {
              int v307 = 1;
              while (v306 != (int32x2_t ****)-4096)
              {
                int v308 = v304 + v307++;
                uint64_t v304 = v308 & v303;
                uint64_t v306 = *(int32x2_t *****)(v301 + 16 * v304);
                if (v475 == v306)
                {
                  uint64_t v305 = (int32x2_t *****)(v301 + 16 * v304);
                  goto LABEL_457;
                }
              }
            }
            *((unsigned char *)v299 + 17) &= ~1u;
          }
        }
      }
    }
    int v309 = (llvm::detail::IEEEFloat *)v141[7];
    if (v309 != Impl)
    {
      if (v309 && v309 != (llvm::detail::IEEEFloat *)-8192 && v309 != (llvm::detail::IEEEFloat *)-4096)
      {
        unint64_t v377 = v141[5] & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v377 = v141[6];
        uint64_t v378 = (unint64_t *)v141[6];
        if (v378)
        {
LABEL_757:
          *uint64_t v378 = *v378 & 7 | v377;
        }
        else
        {
          uint64_t v379 = v141[7];
          uint64_t v380 = ***(int32x2_t ****)v379;
          unint64_t v381 = (unint64_t)v380[303];
          if (v381 <= v377)
          {
            uint64_t v407 = v380[305].u32[0];
            if (v381 + 16 * v407 > v377)
            {
              unsigned int v408 = v407 - 1;
              LODWORD(v384) = v408 & ((v379 >> 4) ^ (v379 >> 9));
              int v385 = (uint64_t *)(v381 + 16 * v384);
              uint64_t v409 = *v385;
              if (v379 == *v385)
              {
LABEL_642:
                *int v385 = -8192;
                v380[304] = vadd_s32(v380[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v379 = v141[7];
              }
              else
              {
                int v410 = 1;
                while (v409 != -4096)
                {
                  int v411 = v384 + v410++;
                  uint64_t v384 = v411 & v408;
                  uint64_t v409 = *(void *)(v381 + 16 * v384);
                  if (v379 == v409)
                  {
LABEL_641:
                    int v385 = (uint64_t *)(v381 + 16 * v384);
                    goto LABEL_642;
                  }
                }
              }
LABEL_643:
              *(unsigned char *)(v379 + 17) &= ~1u;
            }
          }
        }
      }
LABEL_462:
      v141[7] = Impl;
      if (Impl != (llvm::detail::IEEEFloat *)-8192 && Impl != (llvm::detail::IEEEFloat *)-4096 && Impl) {
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v141 + 5));
      }
    }
    goto LABEL_466;
  }
  int v72 = (unsigned __int8 *)a2[3];
  int v73 = *v72;
  if (v73 == 32)
  {
    int v477 = &v479;
    uint64_t v478 = 0x400000000;
    uint64_t v89 = *((unsigned int *)v72 + 8);
    if (!v89)
    {
      unint64_t v90 = 0;
      uint64_t v111 = &v479;
LABEL_213:
      uint64_t v138 = *(void **)*a2;
      uint64_t v139 = (unsigned __int8 *)llvm::DIArgList::getImpl(v138, v111, (const void *)v90, 0, 1);
      Impl = (llvm::detail::IEEEFloat *)llvm::MetadataAsValue::get((uint64_t)v138, v139);
      goto LABEL_466;
    }
    LODWORD(v90) = 0;
    uint64_t v91 = (uint64_t *)*((void *)v72 + 3);
    uint64_t v92 = 8 * v89;
    while (1)
    {
      uint64_t v93 = *v91;
      if ((*(unsigned char *)a1 & 1) != 0 && *(unsigned char *)v93 == 1) {
        goto LABEL_123;
      }
      uint64_t v94 = (llvm::UndefValue *)sub_1CD2629B8(a1, *(void *)(v93 + 128));
      if (v94)
      {
        if (v94 == *(llvm::UndefValue **)(v93 + 128)) {
          goto LABEL_122;
        }
      }
      else
      {
        if ((*(unsigned char *)a1 & 2) != 0 && *(unsigned char *)v93 == 2) {
          goto LABEL_122;
        }
        uint64_t v94 = llvm::UndefValue::get(**(llvm::UndefValue ***)(v93 + 128), v95);
      }
      uint64_t v93 = llvm::ValueAsMetadata::get(v94, v95);
LABEL_122:
      LODWORD(v90) = v478;
LABEL_123:
      if (v90 >= HIDWORD(v478)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v477 + v90) = v93;
      unint64_t v90 = (v478 + 1);
      LODWORD(v478) = v478 + 1;
      ++v91;
      v92 -= 8;
      if (!v92)
      {
        uint64_t v111 = v477;
        goto LABEL_213;
      }
    }
  }
  if (v73 != 2)
  {
    if (*(unsigned char *)a1)
    {
      uint64_t v112 = *(void *)(*(void *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
      uint64_t v478 = 2;
      v479 = 0;
      size_t v480 = (int32x2_t ****)a2;
      if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2) {
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v478);
      }
      int v477 = &unk_1F2615EC8;
      uint64_t v481 = v112;
      __int16 v33 = sub_1CC4CFF80(v112, &v477);
      if (v480 != (int32x2_t ****)-8192 && v480 != (int32x2_t ****)-4096 && v480)
      {
        unint64_t v113 = v478 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v478 & 0xFFFFFFFFFFFFFFF8) = v479;
        if (v479)
        {
          unint64_t *v479 = *v479 & 7 | v113;
        }
        else
        {
          int v114 = v480;
          int v115 = ***v480;
          unint64_t v116 = (unint64_t)v115[303];
          if (v116 <= v113)
          {
            uint64_t v117 = v115[305].u32[0];
            if (v116 + 16 * v117 > v113)
            {
              unsigned int v118 = v117 - 1;
              LODWORD(v119) = v118 & ((v480 >> 4) ^ (v480 >> 9));
              size_t v120 = (int32x2_t *****)(v116 + 16 * v119);
              uint64_t v121 = *v120;
              if (v480 == *v120)
              {
LABEL_171:
                *size_t v120 = (int32x2_t ****)-8192;
                v115[304] = vadd_s32(v115[304], (int32x2_t)0x1FFFFFFFFLL);
                int v114 = v480;
              }
              else
              {
                int v122 = 1;
                while (v121 != (int32x2_t ****)-4096)
                {
                  int v123 = v119 + v122++;
                  uint64_t v119 = v123 & v118;
                  uint64_t v121 = *(int32x2_t *****)(v116 + 16 * v119);
                  if (v480 == v121)
                  {
                    size_t v120 = (int32x2_t *****)(v116 + 16 * v119);
                    goto LABEL_171;
                  }
                }
              }
              *((unsigned char *)v114 + 17) &= ~1u;
            }
          }
        }
      }
      uint64_t v189 = (llvm::MDNode **)v33[7];
      if (v189 == a2) {
        return (uint64_t)a2;
      }
      if (!v189 || v189 == (llvm::MDNode **)-8192 || v189 == (llvm::MDNode **)-4096) {
        goto LABEL_106;
      }
      unint64_t v153 = v33[5] & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v153 = v33[6];
      uint64_t v154 = (unint64_t *)v33[6];
      if (!v154)
      {
        uint64_t v155 = v33[7];
        unint64_t v156 = ***(int32x2_t ****)v155;
        unint64_t v157 = (unint64_t)v156[303];
        if (v157 <= v153)
        {
          uint64_t v190 = v156[305].u32[0];
          if (v157 + 16 * v190 > v153)
          {
            unsigned int v191 = v190 - 1;
            LODWORD(v160) = v191 & ((v155 >> 4) ^ (v155 >> 9));
            uint64_t v161 = (uint64_t *)(v157 + 16 * v160);
            uint64_t v192 = *v161;
            if (v155 != *v161)
            {
              int v193 = 1;
              while (v192 != -4096)
              {
                int v194 = v160 + v193++;
                uint64_t v160 = v194 & v191;
                uint64_t v192 = *(void *)(v157 + 16 * v160);
                if (v155 == v192)
                {
LABEL_243:
                  uint64_t v161 = (uint64_t *)(v157 + 16 * v160);
                  goto LABEL_244;
                }
              }
              goto LABEL_245;
            }
            goto LABEL_244;
          }
        }
LABEL_106:
        v33[7] = a2;
        if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2) {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v33 + 5));
        }
        return (uint64_t)a2;
      }
LABEL_494:
      unint64_t *v154 = *v154 & 7 | v153;
      goto LABEL_106;
    }
    size_t v96 = (unsigned __int8 *)sub_1CD265DF0(a1, a2[3]);
    if (v72 != v96)
    {
      Impl = (llvm::detail::IEEEFloat *)llvm::MetadataAsValue::get(*(void *)*a2, v96);
      uint64_t v97 = *(void *)(*(void *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
      uint64_t v478 = 2;
      v479 = 0;
      size_t v480 = (int32x2_t ****)a2;
      if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2) {
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v478);
      }
      int v477 = &unk_1F2615EC8;
      uint64_t v481 = v97;
      uint64_t v19 = sub_1CC4CFF80(v97, &v477);
      if (v480 != (int32x2_t ****)-8192 && v480 != (int32x2_t ****)-4096 && v480)
      {
        unint64_t v98 = v478 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v478 & 0xFFFFFFFFFFFFFFF8) = v479;
        if (v479)
        {
          unint64_t *v479 = *v479 & 7 | v98;
        }
        else
        {
          int v99 = v480;
          int v100 = ***v480;
          unint64_t v101 = (unint64_t)v100[303];
          if (v101 <= v98)
          {
            uint64_t v102 = v100[305].u32[0];
            if (v101 + 16 * v102 > v98)
            {
              unsigned int v103 = v102 - 1;
              LODWORD(v104) = v103 & ((v480 >> 4) ^ (v480 >> 9));
              int v105 = (int32x2_t *****)(v101 + 16 * v104);
              uint64_t v106 = *v105;
              if (v480 == *v105)
              {
LABEL_144:
                *int v105 = (int32x2_t ****)-8192;
                v100[304] = vadd_s32(v100[304], (int32x2_t)0x1FFFFFFFFLL);
                int v99 = v480;
              }
              else
              {
                int v107 = 1;
                while (v106 != (int32x2_t ****)-4096)
                {
                  int v108 = v104 + v107++;
                  uint64_t v104 = v108 & v103;
                  uint64_t v106 = *(int32x2_t *****)(v101 + 16 * v104);
                  if (v480 == v106)
                  {
                    int v105 = (int32x2_t *****)(v101 + 16 * v104);
                    goto LABEL_144;
                  }
                }
              }
              *((unsigned char *)v99 + 17) &= ~1u;
            }
          }
        }
      }
      int v213 = (llvm::detail::IEEEFloat *)v19[7];
      if (v213 == Impl) {
        return (uint64_t)Impl;
      }
      if (!v213 || v213 == (llvm::detail::IEEEFloat *)-8192 || v213 == (llvm::detail::IEEEFloat *)-4096) {
        goto LABEL_149;
      }
      unint64_t v60 = v19[5] & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v60 = v19[6];
      uint64_t v61 = (unint64_t *)v19[6];
      if (!v61)
      {
        uint64_t v62 = v19[7];
        long long v63 = ***(int32x2_t ****)v62;
        unint64_t v64 = (unint64_t)v63[303];
        if (v64 <= v60)
        {
          uint64_t v214 = v63[305].u32[0];
          if (v64 + 16 * v214 > v60)
          {
            unsigned int v215 = v214 - 1;
            LODWORD(v67) = v215 & ((v62 >> 4) ^ (v62 >> 9));
            unint64_t v68 = (uint64_t *)(v64 + 16 * v67);
            uint64_t v216 = *v68;
            if (v62 != *v68)
            {
              int v217 = 1;
              while (v216 != -4096)
              {
                int v218 = v67 + v217++;
                uint64_t v67 = v218 & v215;
                uint64_t v216 = *(void *)(v64 + 16 * v67);
                if (v62 == v216)
                {
LABEL_302:
                  unint64_t v68 = (uint64_t *)(v64 + 16 * v67);
                  goto LABEL_303;
                }
              }
              goto LABEL_304;
            }
            goto LABEL_303;
          }
        }
LABEL_149:
        v19[7] = Impl;
        if (Impl != (llvm::detail::IEEEFloat *)-8192 && Impl != (llvm::detail::IEEEFloat *)-4096)
        {
          if (Impl) {
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v19 + 5));
          }
        }
        return (uint64_t)Impl;
      }
LABEL_704:
      *uint64_t v61 = *v61 & 7 | v60;
      goto LABEL_149;
    }
    uint64_t v165 = *(void *)(*(void *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
    uint64_t v478 = 2;
    v479 = 0;
    size_t v480 = (int32x2_t ****)a2;
    if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2) {
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v478);
    }
    int v477 = &unk_1F2615EC8;
    uint64_t v481 = v165;
    __int16 v33 = sub_1CC4CFF80(v165, &v477);
    if (v480 != (int32x2_t ****)-8192 && v480 != (int32x2_t ****)-4096 && v480)
    {
      unint64_t v166 = v478 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v478 & 0xFFFFFFFFFFFFFFF8) = v479;
      if (v479)
      {
        unint64_t *v479 = *v479 & 7 | v166;
      }
      else
      {
        size_t v167 = v480;
        size_t v168 = ***v480;
        unint64_t v169 = (unint64_t)v168[303];
        if (v169 <= v166)
        {
          uint64_t v170 = v168[305].u32[0];
          if (v169 + 16 * v170 > v166)
          {
            unsigned int v171 = v170 - 1;
            LODWORD(v172) = v171 & ((v480 >> 4) ^ (v480 >> 9));
            uint64_t v173 = (int32x2_t *****)(v169 + 16 * v172);
            uint64_t v174 = *v173;
            if (v480 == *v173)
            {
LABEL_261:
              *uint64_t v173 = (int32x2_t ****)-8192;
              v168[304] = vadd_s32(v168[304], (int32x2_t)0x1FFFFFFFFLL);
              size_t v167 = v480;
            }
            else
            {
              int v175 = 1;
              while (v174 != (int32x2_t ****)-4096)
              {
                int v176 = v172 + v175++;
                uint64_t v172 = v176 & v171;
                uint64_t v174 = *(int32x2_t *****)(v169 + 16 * v172);
                if (v480 == v174)
                {
                  uint64_t v173 = (int32x2_t *****)(v169 + 16 * v172);
                  goto LABEL_261;
                }
              }
            }
            *((unsigned char *)v167 + 17) &= ~1u;
          }
        }
      }
    }
    unint64_t v310 = (llvm::MDNode **)v33[7];
    if (v310 != a2)
    {
      if (!v310 || v310 == (llvm::MDNode **)-8192 || v310 == (llvm::MDNode **)-4096) {
        goto LABEL_106;
      }
      unint64_t v153 = v33[5] & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v153 = v33[6];
      uint64_t v154 = (unint64_t *)v33[6];
      if (!v154)
      {
        uint64_t v155 = v33[7];
        unint64_t v156 = ***(int32x2_t ****)v155;
        unint64_t v157 = (unint64_t)v156[303];
        if (v157 <= v153)
        {
          uint64_t v311 = v156[305].u32[0];
          if (v157 + 16 * v311 > v153)
          {
            unsigned int v312 = v311 - 1;
            LODWORD(v160) = v312 & ((v155 >> 4) ^ (v155 >> 9));
            uint64_t v161 = (uint64_t *)(v157 + 16 * v160);
            uint64_t v313 = *v161;
            if (v155 != *v161)
            {
              int v314 = 1;
              while (v313 != -4096)
              {
                int v315 = v160 + v314++;
                uint64_t v160 = v315 & v312;
                uint64_t v313 = *(void *)(v157 + 16 * v160);
                if (v155 == v313) {
                  goto LABEL_243;
                }
              }
              goto LABEL_245;
            }
            goto LABEL_244;
          }
        }
        goto LABEL_106;
      }
      goto LABEL_494;
    }
    return (uint64_t)a2;
  }
  uint64_t v74 = (llvm::ValueAsMetadata *)sub_1CD2629B8(a1, *((void *)v72 + 16));
  if (v74)
  {
    if (*((llvm::MDNode ***)v72 + 16) != a2)
    {
      uint64_t v76 = *(void *)*a2;
      __int16 v77 = (unsigned __int8 *)llvm::ValueAsMetadata::get(v74, v75);
      goto LABEL_209;
    }
    return (uint64_t)a2;
  }
  if ((*(unsigned char *)a1 & 2) != 0) {
    return 0;
  }
  uint64_t v76 = *(void *)*a2;
  __int16 v77 = (unsigned __int8 *)llvm::MDTuple::getImpl(v76, 0, 0, 0, 1);
LABEL_209:

  return llvm::MetadataAsValue::get(v76, v77);
}

uint64_t llvm::ValueMapper::mapConstant(llvm::ValueMapper *this, llvm::MDNode **a2, const llvm::APFloat *a3)
{
  uint64_t v7 = *(void *)this;
  uint64_t v3 = sub_1CD2629B8(v7, a2, a3);
  sub_1CD2624E0(&v7, v4, v5);
  return v3;
}

uint64_t llvm::ValueMapper::mapMetadata(llvm::ValueMapper *this, const llvm::Metadata *a2)
{
  uint64_t v6 = *(void *)this;
  uint64_t v2 = sub_1CD265DF0(v6, a2);
  sub_1CD2624E0(&v6, v3, v4);
  return v2;
}

uint64_t sub_1CD265DF0(uint64_t a1, llvm::MDNode *a2)
{
  v30[16] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = sub_1CD2667D4(a1, (uint64_t)a2);
  if (v11) {
    return v4;
  }
  uint64_t v23 = a1;
  uint64_t v24 = v26;
  uint64_t v25 = 0x1000000000;
  v27[0] = 1;
  for (uint64_t i = 160; i != 928; i += 24)
    *(uint64_t *)((char *)&v23 + i) = -4096;
  __int16 v28 = v30;
  uint64_t v29 = 0x1000000000;
  if ((*((unsigned char *)a2 + 1) & 0x7F) != 0) {
    uint64_t v14 = sub_1CD266E64((uint64_t)&v23, a2, v5, v6, v7, v8, v9, v10);
  }
  else {
    uint64_t v14 = sub_1CD2668C0(&v23, (unint64_t)a2);
  }
  uint64_t v12 = v14;
  unsigned int v16 = v25;
  while (v16)
  {
    uint64_t v17 = (unsigned int *)*((void *)v24 + --v16);
    LODWORD(v25) = v16;
    uint64_t v18 = v17[2];
    if (v18)
    {
      for (uint64_t j = 0; j != v18; ++j)
      {
        unint64_t v20 = *(llvm::MDNode **)&v17[2 * j + -2 * v17[2]];
        uint64_t v21 = (llvm::Metadata *)sub_1CD267644(&v23, v20);
        if (!(_BYTE)v15) {
          uint64_t v21 = (llvm::Metadata *)sub_1CD2668C0(&v23, (unint64_t)v20);
        }
        if (v20 != v21) {
          llvm::MDNode::replaceOperandWith((llvm::MDNode *)v17, j, v21);
        }
      }
      unsigned int v16 = v25;
    }
  }
  if (v28 != v30) {
    free(v28);
  }
  sub_1CD2677B4((int *)v27, v15);
  if (v24 != v26) {
    free(v24);
  }
  return v12;
}

uint64_t llvm::ValueMapper::mapMDNode(llvm::ValueMapper *this, const llvm::MDNode *a2)
{
  uint64_t v6 = *(void *)this;
  uint64_t v2 = sub_1CD265DF0(v6, a2);
  sub_1CD2624E0(&v6, v3, v4);
  return v2;
}

uint64_t *llvm::ValueMapper::remapInstruction(llvm::ValueMapper *this, uint64_t ***a2, const llvm::APFloat *a3)
{
  uint64_t v6 = *(void *)this;
  sub_1CD26600C(v6, a2, a3);
  return sub_1CD2624E0(&v6, v3, v4);
}

void sub_1CD26600C(uint64_t a1, uint64_t ***a2, const llvm::APFloat *a3)
{
  v52[8] = *MEMORY[0x1E4F143B8];
  int v5 = *((_DWORD *)a2 + 5);
  if ((v5 & 0x40000000) != 0)
  {
    uint64_t v7 = (uint64_t ***)*(a2 - 1);
    uint64_t v6 = v5 & 0x7FFFFFF;
    if (!v6) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v6 = v5 & 0x7FFFFFF;
    uint64_t v7 = &a2[-4 * v6];
    if (!v6) {
      goto LABEL_14;
    }
  }
  uint64_t v8 = 32 * v6;
  uint64_t v9 = v7 + 1;
  do
  {
    uint64_t v10 = v9 - 1;
    uint64_t v11 = sub_1CD2629B8(a1, (llvm::MDNode **)*(v9 - 1), a3);
    if (v11)
    {
      if (*v10)
      {
        *v9[1] = *v9;
        if (*v9) {
          (*v9)[2] = v9[1];
        }
      }
      *(v9 - 1) = (void *)v11;
      uint64_t v14 = *(void **)(v11 + 8);
      uint64_t v12 = (void *)(v11 + 8);
      int v13 = v14;
      *uint64_t v9 = v14;
      if (v14) {
        v13[2] = v9;
      }
      v9[1] = v12;
      *uint64_t v12 = v10;
    }
    v9 += 4;
    v8 -= 32;
  }
  while (v8);
LABEL_14:
  if (a2)
  {
    if (*((unsigned char *)a2 + 16) == 83)
    {
      uint64_t v15 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
      if (v15)
      {
        unint64_t v16 = 0;
        uint64_t v17 = 8 * v15;
        do
        {
          int v18 = *((_DWORD *)a2 + 5);
          if ((v18 & 0x40000000) != 0) {
            uint64_t v19 = (uint64_t ***)*(a2 - 1);
          }
          else {
            uint64_t v19 = &a2[-4 * (v18 & 0x7FFFFFF)];
          }
          uint64_t v20 = sub_1CD2629B8(a1, (llvm::MDNode **)(&v19[4 * *((unsigned int *)a2 + 15)])[v16 / 8], a3);
          if (v20)
          {
            int v21 = *((_DWORD *)a2 + 5);
            if ((v21 & 0x40000000) != 0) {
              unint64_t v22 = (uint64_t ***)*(a2 - 1);
            }
            else {
              unint64_t v22 = &a2[-4 * (v21 & 0x7FFFFFF)];
            }
            (&v22[4 * *((unsigned int *)a2 + 15)])[v16 / 8] = (uint64_t **)v20;
          }
          v16 += 8;
        }
        while (v17 != v16);
      }
    }
  }
  __int16 v50 = v52;
  uint64_t v51 = 0x400000000;
  uint64_t v23 = a2[6];
  if (v23)
  {
    v52[0] = 0;
    v52[1] = v23;
    int v24 = 1;
  }
  else
  {
    if ((*((unsigned char *)a2 + 23) & 0x20) == 0) {
      goto LABEL_36;
    }
    int v24 = 0;
  }
  LODWORD(v51) = v24;
  llvm::Value::getAllMetadata(a2, (uint64_t)&v50);
  if (v51)
  {
    uint64_t v25 = 16 * v51;
    uint64_t v26 = (llvm::MDNode **)((char *)v50 + 8);
    do
    {
      int v27 = *v26;
      __int16 v28 = (llvm::MDNode *)sub_1CD265DF0(a1, *v26);
      if (v28 != v27) {
        llvm::Instruction::setMetadata((llvm::Instruction *)a2, *((_DWORD *)v26 - 2), v28);
      }
      v26 += 2;
      v25 -= 16;
    }
    while (v25);
  }
LABEL_36:
  uint64_t v29 = *(void *)(a1 + 8);
  if (v29)
  {
    int v30 = *((unsigned __int8 *)a2 + 16);
    if ((v30 - 33) > 0x33 || ((1 << (v30 - 33)) & 0x8000000000041) == 0)
    {
      if (a2 && v30 == 59)
      {
        a2[8] = (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t **))(*(void *)v29 + 24))(v29, a2[8]);
        int v30 = *((unsigned __int8 *)a2 + 16);
        uint64_t v29 = *(void *)(a1 + 8);
      }
      if (a2 && v30 == 62)
      {
        a2[8] = (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t **))(*(void *)v29 + 24))(v29, a2[8]);
        a2[9] = (uint64_t **)(*(uint64_t (**)(void, uint64_t **))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), a2[9]);
        uint64_t v29 = *(void *)(a1 + 8);
      }
      *a2 = (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t **))(*(void *)v29 + 24))(v29, *a2);
    }
    else
    {
      uint64_t v47 = v49;
      uint64_t v48 = 0x300000000;
      uint64_t v32 = a2[9];
      if ((*((_DWORD *)v32 + 3) - 1) >= 4) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (8 * *((unsigned int *)v32 + 3) != 8)
      {
        __int16 v33 = v32[2] + 1;
        uint64_t v34 = 8 * ((8 * *((unsigned int *)v32 + 3) - 8) >> 3);
        do
        {
          uint64_t v35 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), *v33);
          if (v48 >= (unint64_t)HIDWORD(v48)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v47 + v48) = v35;
          LODWORD(v48) = v48 + 1;
          ++v33;
          v34 -= 8;
        }
        while (v34);
      }
      int v36 = (uint64_t **)(*(uint64_t (**)(void, uint64_t **))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), *a2);
      uint64_t v37 = llvm::FunctionType::get(v36, (uint64_t)v47, v48, *((_DWORD *)v32 + 2) > 0xFFu);
      unsigned int v38 = 0;
      unsigned int v39 = **(uint64_t ****)(v37 + 16);
      *a2 = v39;
      a2[9] = (uint64_t **)v37;
      uint64_t v40 = *v39;
      uint64_t v41 = (uint64_t)a2[8];
      uint64_t v46 = v41;
      if (v41) {
        goto LABEL_51;
      }
LABEL_50:
      for (unsigned int i = 0; v38 < i; unsigned int i = *(_DWORD *)(v41 + 8))
      {
        int v43 = 68;
        while (1)
        {
          uint64_t AttributeAtIndex = llvm::AttributeList::getAttributeAtIndex(&v46, v38, v43);
          if (AttributeAtIndex)
          {
            if (*(void *)(AttributeAtIndex + 16)) {
              break;
            }
          }
          if (++v43 == 74) {
            goto LABEL_59;
          }
        }
        uint64_t v45 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8));
        uint64_t v41 = sub_1CCB98A9C(&v46, v40, v38, v43, v45);
        uint64_t v46 = v41;
LABEL_59:
        ++v38;
        if (!v41) {
          goto LABEL_50;
        }
LABEL_51:
        ;
      }
      a2[8] = (uint64_t **)v41;
      if (v47 != v49) {
        free(v47);
      }
    }
  }
  if (v50 != v52) {
    free(v50);
  }
}

void sub_1CD266520(uint64_t a1, uint64_t a2, const llvm::APFloat *a3)
{
  int v5 = *(_DWORD *)(a2 + 20);
  if ((v5 & 0x40000000) != 0)
  {
    uint64_t v7 = *(void *)(a2 - 8);
    uint64_t v6 = v5 & 0x7FFFFFF;
    if (!v6) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v6 = v5 & 0x7FFFFFF;
    uint64_t v7 = a2 - 32 * v6;
    if (!v6) {
      goto LABEL_15;
    }
  }
  uint64_t v8 = 32 * v6;
  uint64_t v9 = (void **)(v7 + 8);
  do
  {
    uint64_t v11 = (uint64_t *)(v9 - 1);
    uint64_t v10 = (llvm::MDNode **)*(v9 - 1);
    if (v10)
    {
      uint64_t v12 = sub_1CD2629B8(a1, v10, a3);
      if (*v11)
      {
        *v9[1] = *v9;
        if (*v9) {
          (*v9)[2] = v9[1];
        }
      }
      uint64_t *v11 = v12;
      if (v12)
      {
        uint64_t v15 = *(void **)(v12 + 8);
        int v13 = (uint64_t **)(v12 + 8);
        uint64_t v14 = v15;
        *uint64_t v9 = v15;
        if (v15) {
          v14[2] = v9;
        }
        v9[1] = v13;
        void *v13 = v11;
      }
    }
    v9 += 4;
    v8 -= 32;
  }
  while (v8);
LABEL_15:
  sub_1CD2666C8(a1, (int32x2_t ****)a2);
  if (*(void *)(a1 + 8))
  {
    if (*(_WORD *)(a2 + 18))
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)a2);
      uint64_t v17 = *(void **)(a2 + 88);
      if (*(_WORD *)(a2 + 18))
      {
        llvm::Function::BuildLazyArguments((llvm::Function *)a2);
        int v18 = *(void **)(a2 + 88);
LABEL_19:
        uint64_t v19 = &v18[5 * *(void *)(a2 + 96)];
        while (v17 != v19)
        {
          *uint64_t v17 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), *v17);
          v17 += 5;
        }
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v17 = *(void **)(a2 + 88);
    }
    int v18 = v17;
    goto LABEL_19;
  }
LABEL_22:
  uint64_t v20 = a2 + 72;
  for (uint64_t i = *(void *)(a2 + 80); i != v20; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v22 = i - 24;
    if (!i) {
      uint64_t v22 = 0;
    }
    uint64_t v23 = v22 + 40;
    for (uint64_t j = *(void *)(v22 + 48); j != v23; uint64_t j = *(void *)(j + 8))
    {
      if (j) {
        uint64_t v25 = (uint64_t ***)(j - 24);
      }
      else {
        uint64_t v25 = 0;
      }
      sub_1CD26600C(a1, v25, v16);
    }
  }
}

void sub_1CD2666C8(uint64_t a1, int32x2_t ****a2)
{
  v12[16] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = v12;
  uint64_t v11 = 0x800000000;
  llvm::Value::getAllMetadata(a2, (uint64_t)&v10);
  if ((*((unsigned char *)a2 + 23) & 0x20) != 0)
  {
    uint64_t v4 = ***a2 + 310;
    uint64_t v9 = a2;
    sub_1CC6035CC(v4, &v9);
    *((_DWORD *)a2 + 5) &= ~0x20000000u;
  }
  int v5 = (llvm::MDNode **)v10;
  if (v11)
  {
    uint64_t v6 = (llvm::MDNode **)((char *)v10 + 16 * v11);
    do
    {
      int v7 = *(_DWORD *)v5;
      uint64_t v8 = (llvm::MDNode *)sub_1CD265DF0(a1, v5[1]);
      llvm::Value::addMetadata((llvm::Value *)a2, v7, v8);
      v5 += 2;
    }
    while (v5 != v6);
    int v5 = (llvm::MDNode **)v10;
  }
  if (v5 != v12) {
    free(v5);
  }
}

uint64_t sub_1CD2667D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)(*(void *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
  if (*(unsigned char *)(v4 + 48))
  {
    uint64_t v11 = 0;
    uint64_t v12 = a2;
    if (sub_1CBA0E618(v4 + 24, &v12, &v11))
    {
      uint64_t v7 = v11;
      uint64_t v8 = *(void *)(v4 + 24);
      uint64_t v9 = *(unsigned int *)(v4 + 40);
    }
    else
    {
      uint64_t v8 = *(void *)(v4 + 24);
      uint64_t v9 = *(unsigned int *)(v4 + 40);
      uint64_t v7 = v8 + 16 * v9;
    }
    if (v7 != v8 + 16 * v9) {
      return *(void *)(v7 + 8);
    }
  }
  if (*(unsigned char *)v2 && (*(unsigned char *)a1 & 1) == 0)
  {
    if (*(unsigned char *)v2 == 1)
    {
      int v5 = (llvm::ValueAsMetadata *)sub_1CD2629B8(a1, *(void *)(v2 + 128));
      if (*(llvm::ValueAsMetadata **)(v2 + 128) != v5)
      {
        if (v5) {
          return llvm::ValueAsMetadata::get(v5, v6);
        }
        else {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t sub_1CD2668C0(uint64_t *a1, unint64_t a2)
{
  v84[48] = *MEMORY[0x1E4F143B8];
  uint64_t v76 = 1;
  for (uint64_t i = 8; i != 776; i += 24)
    *(uint64_t *)((char *)&v76 + i) = -4096;
  v73.n128_u64[0] = a2;
  uint64_t v79 = v81;
  uint64_t v80 = 0x1000000000;
  int v82 = v84;
  uint64_t v83 = 0x1000000000;
  v73.n128_u64[1] = a2 - 8 * *(unsigned int *)(a2 + 8);
  LOBYTE(v74) = 0;
  sub_1CBC0D590((uint64_t)&v82, &v73);
  int v72 = (llvm::Value *)a2;
  v73.n128_u64[0] = a2;
  sub_1CD267210((uint64_t)&v76, (uint64_t *)&v73);
  unsigned int v6 = v83;
  if (v83)
  {
    BOOL v7 = 0;
LABEL_5:
    while (2)
    {
      uint64_t v8 = (char *)v82 + 24 * v6;
      uint64_t v9 = (llvm::MDNode **)*((void *)v8 - 3);
      while (1)
      {
        uint64_t v10 = (llvm::MDNode **)*((void *)v8 - 2);
        if (v10 == v9) {
          break;
        }
        *((void *)v8 - 2) = v10 + 1;
        uint64_t v11 = *v10;
        uint64_t v12 = sub_1CD267644(a1, *v10);
        if (v13)
        {
          *(v8 - 8) |= v11 != (llvm::MDNode *)v12;
        }
        else
        {
          v73.n128_u64[0] = (unint64_t)v11;
          v73.n128_u64[1] = 0xFFFFFFFF00000000;
          uint64_t v74 = 0;
          uint64_t v75 = 0;
          if (!sub_1CD267278((uint64_t)&v76, (uint64_t)v11, &v75))
          {
            uint64_t v14 = sub_1CD267328((uint64_t)&v76, (llvm::MDNode *)&v73, v75);
            *uint64_t v14 = v11;
            v14[1] = 0xFFFFFFFF00000000;
            v14[2] = 0;
            if (v11)
            {
              unint64_t v15 = (unint64_t)v11 - 8 * *((unsigned int *)v11 + 2);
              v73.n128_u64[0] = (unint64_t)v11;
              v73.n128_u64[1] = v15;
              LOBYTE(v74) = 0;
              sub_1CBC0D590((uint64_t)&v82, &v73);
              unsigned int v6 = v83;
              if (v83) {
                goto LABEL_5;
              }
              goto LABEL_18;
            }
            break;
          }
        }
      }
      v73.n128_u64[0] = *((void *)v8 - 3);
      unint64_t v16 = sub_1CD267210((uint64_t)&v76, (uint64_t *)&v73);
      char v17 = *(v8 - 8);
      *(unsigned char *)unint64_t v16 = v17;
      BOOL v7 = (v17 | v7) != 0;
      unint64_t v18 = v80;
      *((_DWORD *)v16 + 1) = v80;
      uint64_t v19 = *((void *)v8 - 3);
      if (v18 >= HIDWORD(v80)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v79 + v18) = v19;
      LODWORD(v80) = v80 + 1;
      unsigned int v6 = v83 - 1;
      LODWORD(v83) = v6;
      if (v6) {
        continue;
      }
      break;
    }
  }
  else
  {
    BOOL v7 = 0;
  }
LABEL_18:
  if (v82 != v84) {
    free(v82);
  }
  if (v7)
  {
    do
    {
      if (!v80) {
        goto LABEL_81;
      }
      char v20 = 0;
      int v21 = (void **)v79;
      uint64_t v22 = (void **)((char *)v79 + 8 * v80);
      do
      {
        uint64_t v23 = (unsigned int *)*v21;
        int v82 = *v21;
        int v24 = sub_1CD267210((uint64_t)&v76, (uint64_t *)&v82);
        if (!*(unsigned char *)v24)
        {
          uint64_t v25 = v23[2];
          if (v25)
          {
            uint64_t v26 = v24;
            uint64_t v27 = -2 * v25;
            while (1)
            {
              uint64_t v28 = sub_1CD267750((uint64_t)&v76, *(void *)&v23[v27]);
              if (v76) {
                uint64_t v29 = &v77;
              }
              else {
                uint64_t v29 = v77;
              }
              unsigned int v30 = v78;
              if (v76) {
                unsigned int v30 = 32;
              }
              if (&v29[3 * v30] != (void *)v28 && *(unsigned char *)(v28 + 8)) {
                break;
              }
              v27 += 2;
              if (!(v27 * 4)) {
                goto LABEL_24;
              }
            }
            char v20 = 1;
            unsigned char *v26 = 1;
          }
        }
LABEL_24:
        ++v21;
      }
      while (v21 != v22);
    }
    while ((v20 & 1) != 0);
    unsigned int v31 = (llvm::MDNode **)v79;
    int v82 = v84;
    uint64_t v83 = 0x1000000000;
    if (v80)
    {
      uint64_t v32 = (llvm::MDNode **)((char *)v79 + 8 * v80);
      do
      {
        __int16 v33 = *v31;
        v73.n128_u64[0] = (unint64_t)*v31;
        uint64_t v34 = sub_1CD267210((uint64_t)&v76, (uint64_t *)&v73);
        if (*(unsigned char *)v34)
        {
          uint64_t v41 = (llvm::MDNode *)v34[1];
          if (v41)
          {
            v34[1] = 0;
            uint64_t v75 = v41;
            __int16 v42 = (unsigned int *)v41;
          }
          else
          {
            llvm::MDNode::clone(v33, v35, v36, v37, v38, v39, v40, (uint64_t *)&v75);
            __int16 v42 = (unsigned int *)v75;
          }
          uint64_t v43 = v42[2];
          if (v43)
          {
            uint64_t v44 = 0;
            while (1)
            {
              uint64_t v45 = *(llvm::Value **)&v42[2 * v44 + -2 * v42[2]];
              uint64_t v46 = sub_1CD266F54((uint64_t)a1, v45);
              if (v47) {
                break;
              }
              uint64_t v49 = sub_1CD267750((uint64_t)&v76, (uint64_t)v45);
              if (*(unsigned char *)(v49 + 8))
              {
                uint64_t v55 = v49;
                uint64_t v48 = *(llvm::Metadata **)(v49 + 16);
                if (!v48)
                {
                  llvm::MDNode::clone(v45, 0, v50, v51, v52, v53, v54, (uint64_t *)&v73);
                  unint64_t v57 = v73.n128_u64[0];
                  v73.n128_u64[0] = 0;
                  int v58 = *(llvm::MDNode **)(v55 + 16);
                  *(void *)(v55 + 16) = v57;
                  if (v58)
                  {
                    llvm::MDNode::deleteTemporary(v58, v56);
                    unint64_t v60 = (llvm::MDNode *)v73.n128_u64[0];
                    v73.n128_u64[0] = 0;
                    if (v60) {
                      llvm::MDNode::deleteTemporary(v60, v59);
                    }
                  }
                  uint64_t v48 = *(llvm::Metadata **)(v55 + 16);
                }
                goto LABEL_50;
              }
LABEL_58:
              if (v43 == ++v44)
              {
                __int16 v42 = (unsigned int *)v75;
                goto LABEL_60;
              }
            }
            uint64_t v48 = (llvm::Metadata *)v46;
LABEL_50:
            if (v45 != v48) {
              llvm::MDNode::replaceOperandWith((llvm::MDNode *)v42, v44, v48);
            }
            goto LABEL_58;
          }
LABEL_60:
          uint64_t v75 = 0;
          uint64_t v61 = (unsigned __int8 *)llvm::MDNode::replaceWithUniquedImpl((llvm::MDNode *)v42);
          sub_1CD2676B8(*(_DWORD *)(*a1 + 16), *(void *)(*a1 + 24), (unsigned __int8 *)v33, v61);
          if (v41)
          {
            if (v83 >= (unint64_t)HIDWORD(v83)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v82 + v83) = v61;
            LODWORD(v83) = v83 + 1;
          }
          long long v63 = v75;
          uint64_t v75 = 0;
          if (v63) {
            llvm::MDNode::deleteTemporary(v63, v62);
          }
        }
        else
        {
          sub_1CD2676B8(*(_DWORD *)(*a1 + 16), *(void *)(*a1 + 24), (unsigned __int8 *)v33, (unsigned __int8 *)v33);
        }
        ++v31;
      }
      while (v31 != v32);
      unint64_t v68 = (uint64_t *)v82;
      if (v83)
      {
        uint64_t v69 = 8 * v83;
        do
        {
          uint64_t v70 = *v68;
          if ((*(unsigned char *)(*v68 + 1) & 0x7F) == 2 || *(_DWORD *)(v70 + 12)) {
            llvm::MDNode::resolveCycles(v70);
          }
          ++v68;
          v69 -= 8;
        }
        while (v69);
        unint64_t v68 = (uint64_t *)v82;
      }
      if (v68 != v84) {
        free(v68);
      }
    }
LABEL_81:
    uint64_t v64 = sub_1CD266F54((uint64_t)a1, v72);
  }
  else
  {
    uint64_t v64 = (uint64_t)v72;
    if (v80)
    {
      uint64_t v65 = (unsigned __int8 **)v79;
      uint64_t v66 = 8 * v80;
      do
      {
        uint64_t v67 = *v65++;
        sub_1CD2676B8(*(_DWORD *)(*a1 + 16), *(void *)(*a1 + 24), v67, v67);
        v66 -= 8;
      }
      while (v66);
    }
  }
  if (v79 != v81) {
    free(v79);
  }
  sub_1CD2677B4((int *)&v76, v5);
  return v64;
}

uint64_t sub_1CD266E64(uint64_t a1, llvm::MDNode *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((**(unsigned char **)a1 & 4) != 0)
  {
    sub_1CD2676B8(*(_DWORD *)(*(void *)a1 + 16), *(void *)(*(void *)a1 + 24), (unsigned __int8 *)this, (unsigned __int8 *)this);
    uint64_t v10 = this;
  }
  else
  {
    llvm::MDNode::clone(this, a3, a4, a5, a6, a7, a8, (uint64_t *)&v16);
    uint64_t v10 = v16;
    unint64_t v16 = 0;
    llvm::MDNode::dropReplaceableUses((uint64_t)v10);
    llvm::MDNode::storeDistinctInContext(v10);
    uint64_t v12 = v16;
    unint64_t v16 = 0;
    if (v12) {
      llvm::MDNode::deleteTemporary(v12, v11);
    }
    sub_1CD2676B8(*(_DWORD *)(*(void *)a1 + 16), *(void *)(*(void *)a1 + 24), (unsigned __int8 *)this, (unsigned __int8 *)v10);
  }
  unsigned int v13 = *(_DWORD *)(a1 + 16);
  if (v13 >= *(_DWORD *)(a1 + 20)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(a1 + 8) + 8 * v13) = v10;
  unsigned int v14 = *(_DWORD *)(a1 + 16) + 1;
  *(_DWORD *)(a1 + 16) = v14;
  return *(void *)(*(void *)(a1 + 8) + 8 * v14 - 8);
}

uint64_t sub_1CD266F54(uint64_t a1, llvm::Value *a2)
{
  uint64_t v2 = (uint64_t)a2;
  if (a2)
  {
    uint64_t v4 = *(void *)(*(void *)(*(void *)a1 + 24) + 16 * *(unsigned int *)(*(void *)a1 + 16));
    if (*(unsigned char *)(v4 + 48))
    {
      uint64_t v33 = (uint64_t)a2;
      uint64_t v36 = 0;
      if (sub_1CBA0E618(v4 + 24, &v33, &v36))
      {
        uint64_t v14 = v36;
        uint64_t v15 = *(void *)(v4 + 24);
        uint64_t v16 = *(unsigned int *)(v4 + 40);
      }
      else
      {
        uint64_t v15 = *(void *)(v4 + 24);
        uint64_t v16 = *(unsigned int *)(v4 + 40);
        uint64_t v14 = v15 + 16 * v16;
      }
      if (v14 != v15 + 16 * v16) {
        return *(void *)(v14 + 8);
      }
    }
    if (*(unsigned char *)v2)
    {
      if (*(unsigned char *)v2 != 1) {
        return 0;
      }
      int v5 = *(uint64_t **)(*(void *)(*(void *)a1 + 24) + 16 * *(unsigned int *)(*(void *)a1 + 16));
      unsigned int v6 = *(llvm::ValueAsMetadata **)(v2 + 128);
      uint64_t v7 = *v5;
      uint64_t v8 = *((unsigned int *)v5 + 4);
      if (v8)
      {
        uint64_t v9 = ((v6 >> 4) ^ (v6 >> 9)) & (v8 - 1);
        uint64_t v10 = (void *)(v7 + (v9 << 6));
        uint64_t v11 = (llvm::ValueAsMetadata *)v10[3];
        if (v6 == v11) {
          goto LABEL_15;
        }
        int v12 = 1;
        while (v11 != (llvm::ValueAsMetadata *)-4096)
        {
          int v13 = v9 + v12++;
          uint64_t v9 = v13 & (v8 - 1);
          uint64_t v10 = (void *)(v7 + (v9 << 6));
          uint64_t v11 = (llvm::ValueAsMetadata *)v10[3];
          if (v6 == v11) {
            goto LABEL_15;
          }
        }
      }
      uint64_t v10 = (void *)(v7 + (v8 << 6));
LABEL_15:
      uint64_t v33 = 6;
      if (v10 == (void *)(v7 + (v8 << 6)))
      {
        char v17 = 0;
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        if (v6) {
          uint64_t v2 = 0;
        }
      }
      else
      {
        char v17 = (llvm::ValueAsMetadata *)v10[7];
        uint64_t v34 = 0;
        uint64_t v35 = v17;
        if (v17 != (llvm::ValueAsMetadata *)-8192 && v17 != (llvm::ValueAsMetadata *)-4096 && v17 != 0)
        {
          unint64_t v19 = v10[5] & 0xFFFFFFFFFFFFFFF8;
          uint64_t v34 = *(unint64_t **)v19;
          char v20 = v34;
          *(void *)unint64_t v19 = &v33;
          uint64_t v33 = v19 | 6;
          if (v20) {
            unint64_t *v20 = *v20 & 7 | (unint64_t)&v34;
          }
          unsigned int v6 = *(llvm::ValueAsMetadata **)(v2 + 128);
        }
        if (v6 != v17)
        {
          if (v17)
          {
            uint64_t v2 = llvm::ValueAsMetadata::get(v17, a2);
            char v17 = v35;
          }
          else
          {
            uint64_t v2 = 0;
          }
        }
      }
      if (v17 != (llvm::ValueAsMetadata *)-8192 && v17 != (llvm::ValueAsMetadata *)-4096 && v17)
      {
        unint64_t v21 = v33 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v33 & 0xFFFFFFFFFFFFFFF8) = v34;
        if (v34)
        {
          *uint64_t v34 = *v34 & 7 | v21;
        }
        else
        {
          uint64_t v22 = v35;
          uint64_t v23 = ***(int32x2_t ****)v35;
          unint64_t v24 = (unint64_t)v23[303];
          if (v24 <= v21)
          {
            uint64_t v25 = v23[305].u32[0];
            if (v24 + 16 * v25 > v21)
            {
              unsigned int v26 = v25 - 1;
              LODWORD(v27) = v26 & ((v35 >> 4) ^ (v35 >> 9));
              uint64_t v28 = (llvm::ValueAsMetadata **)(v24 + 16 * v27);
              uint64_t v29 = *v28;
              if (v35 == *v28)
              {
LABEL_45:
                llvm::MDNode *v28 = (llvm::ValueAsMetadata *)-8192;
                v23[304] = vadd_s32(v23[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v22 = v35;
              }
              else
              {
                int v30 = 1;
                while (v29 != (llvm::ValueAsMetadata *)-4096)
                {
                  int v31 = v27 + v30++;
                  uint64_t v27 = v31 & v26;
                  uint64_t v29 = *(llvm::ValueAsMetadata **)(v24 + 16 * v27);
                  if (v35 == v29)
                  {
                    uint64_t v28 = (llvm::ValueAsMetadata **)(v24 + 16 * v27);
                    goto LABEL_45;
                  }
                }
              }
              *((unsigned char *)v22 + 17) &= ~1u;
            }
          }
        }
      }
    }
  }
  return v2;
}

void *sub_1CD267210(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CD267278(a1, *a2, &v7);
  int v5 = v7;
  if ((v4 & 1) == 0)
  {
    int v5 = sub_1CD267328(a1, (llvm::MDNode *)a2, v7);
    *int v5 = *a2;
    v5[1] = 0xFFFFFFFF00000000;
    void v5[2] = 0;
  }
  return v5 + 1;
}

uint64_t sub_1CD267278(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 32;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v3 + 24 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 24 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_7;
      }
    }
    uint64_t result = 0;
    if (v10) {
      uint64_t v7 = v10;
    }
  }
LABEL_7:
  *a3 = v7;
  return result;
}

void *sub_1CD267328(uint64_t a1, llvm::MDNode *a2, void *a3)
{
  v22[96] = *MEMORY[0x1E4F143B8];
  unint64_t v21 = a3;
  int v5 = *(_DWORD *)a1;
  int v6 = *(_DWORD *)a1 >> 1;
  int v7 = *(_DWORD *)a1 & 1;
  if (v7) {
    unsigned int v8 = 32;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v6 + 4 >= 3 * v8)
  {
    v8 *= 2;
  }
  else if (v8 + ~v6 - *(_DWORD *)(a1 + 4) > v8 >> 3)
  {
    goto LABEL_6;
  }
  if (v8 >= 0x21)
  {
    unint64_t v10 = (v8 - 1) | ((unint64_t)(v8 - 1) >> 1);
    unint64_t v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
    int v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
    if ((v12 + 1) > 0x40) {
      unsigned int v8 = v12 + 1;
    }
    else {
      unsigned int v8 = 64;
    }
  }
  if (v7)
  {
    uint64_t v15 = 0;
    uint64_t v16 = v22;
    do
    {
      uint64_t v17 = a1 + v15;
      uint64_t v18 = *(void *)(a1 + v15 + 8);
      if ((v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        *uint64_t v16 = v18;
        v16[1] = *(void *)(v17 + 16);
        uint64_t v19 = *(void *)(v17 + 24);
        *(void *)(v17 + 24) = 0;
        v16[2] = v19;
        v16 += 3;
        char v20 = *(llvm::MDNode **)(v17 + 24);
        *(void *)(v17 + 24) = 0;
        if (v20) {
          llvm::MDNode::deleteTemporary(v20, a2);
        }
      }
      v15 += 24;
    }
    while (v15 != 768);
    if (v8 > 0x20)
    {
      *(_DWORD *)a1 &= ~1u;
      *(void *)(a1 + 8) = operator new(24 * v8, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v8;
    }
    sub_1CD267560(a1, v22, v16);
  }
  else
  {
    unsigned int v13 = *(uint64_t **)(a1 + 8);
    unsigned int v14 = *(_DWORD *)(a1 + 16);
    if (v8 > 0x20)
    {
      *(void *)(a1 + 8) = operator new(24 * v8, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v8;
    }
    else
    {
      *(_DWORD *)a1 = v5 | 1;
    }
    sub_1CD267560(a1, v13, &v13[3 * v14]);
    MEMORY[0x1D25D9CD0](v13, 8);
  }
  sub_1CD267278(a1, *(void *)a2, &v21);
  int v5 = *(_DWORD *)a1;
  a3 = v21;
  int v7 = *(_DWORD *)a1 & 1;
LABEL_6:
  *(_DWORD *)a1 = (v5 & 0xFFFFFFFE | v7) + 2;
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  return a3;
}

void sub_1CD267560(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6 = *(_DWORD *)a1;
  *(void *)a1 = *(_DWORD *)a1 & 1;
  if (v6)
  {
    unsigned int v8 = (void *)(a1 + 8);
    uint64_t v9 = (void *)(a1 + 776);
  }
  else
  {
    unsigned int v7 = *(_DWORD *)(a1 + 16);
    if (!v7) {
      goto LABEL_11;
    }
    unsigned int v8 = *(void **)(a1 + 8);
    uint64_t v9 = &v8[3 * v7];
  }
  do
  {
    *unsigned int v8 = -4096;
    v8 += 3;
  }
  while (v8 != v9);
LABEL_11:
  while (a2 != a3)
  {
    uint64_t v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v15 = 0;
      sub_1CD267278(a1, v10, &v15);
      int v12 = v15;
      *uint64_t v15 = *a2;
      v12[1] = a2[1];
      uint64_t v13 = a2[2];
      a2[2] = 0;
      v12[2] = v13;
      *(_DWORD *)a1 += 2;
      unsigned int v14 = (llvm::MDNode *)a2[2];
      a2[2] = 0;
      if (v14) {
        llvm::MDNode::deleteTemporary(v14, v11);
      }
    }
    a2 += 3;
  }
}

uint64_t sub_1CD267644(uint64_t *a1, llvm::MDNode *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t result = sub_1CD2667D4(*a1, (uint64_t)a2);
  if (!v11)
  {
    if ((*((unsigned char *)a2 + 1) & 0x7F) == 1) {
      return sub_1CD266E64((uint64_t)a1, a2, v5, v6, v7, v8, v9, v10);
    }
    else {
      return result & 0xFFFFFFFFFFFFFF00;
    }
  }
  return result;
}

unsigned __int8 *sub_1CD2676B8(unsigned int a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  uint64_t v10 = a3;
  uint64_t v5 = *(void *)(a2 + 16 * a1);
  uint64_t v6 = (_DWORD *)(v5 + 24);
  if (!*(unsigned char *)(v5 + 48))
  {
    *(void *)uint64_t v6 = 0;
    *(void *)(v5 + 32) = 0;
    *(_DWORD *)(v5 + 40) = 0;
    *(unsigned char *)(v5 + 48) = 1;
  }
  char v11 = 0;
  char v7 = sub_1CBA0E618(v5 + 24, &v10, &v11);
  uint64_t v8 = v11;
  if ((v7 & 1) == 0)
  {
    uint64_t v8 = (unsigned __int8 **)sub_1CCB997A0(v6, (uint64_t)&v10, &v10, v11);
    *uint64_t v8 = v10;
    v8[1] = 0;
  }
  sub_1CC19E068(v8 + 1, a4);
  return a4;
}

uint64_t sub_1CD267750(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  if (sub_1CD267278(a1, a2, &v6)) {
    return v6;
  }
  uint64_t v4 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    unsigned int v5 = 32;
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    unsigned int v5 = *(_DWORD *)(a1 + 16);
  }
  return v4 + 24 * v5;
}

int *sub_1CD2677B4(int *a1, llvm::MDNode *a2)
{
  int v3 = *a1;
  if (*a1)
  {
    unsigned int v5 = a1 + 2;
    uint64_t v4 = 32;
  }
  else
  {
    uint64_t v4 = a1[4];
    if (!v4) {
      goto LABEL_11;
    }
    unsigned int v5 = (int *)*((void *)a1 + 1);
  }
  uint64_t v6 = 24 * v4;
  char v7 = (llvm::MDNode **)(v5 + 4);
  do
  {
    if (((unint64_t)*(v7 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v8 = *v7;
      *char v7 = 0;
      if (v8) {
        llvm::MDNode::deleteTemporary(v8, a2);
      }
    }
    v7 += 3;
    v6 -= 24;
  }
  while (v6);
  int v3 = *a1;
LABEL_11:
  if ((v3 & 1) == 0) {
    MEMORY[0x1D25D9CD0](*((void *)a1 + 1), 8);
  }
  return a1;
}

void llvm::irinject::getSerialModulePath(const std::string *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  __int16 v10 = 773;
  v9[0] = a2;
  v9[1] = a3;
  v9[2] = "/";
  sub_1CD114070(a1, v5);
  sub_1CD113EF4((uint64_t)v5, __p);
  v11[0] = v9;
  v11[2] = __p;
  __int16 v12 = 1026;
  v13[0] = v11;
  v13[2] = ".ll";
  __int16 v14 = 770;
  llvm::Twine::str((llvm::Twine *)v13, a4);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

BOOL llvm::irinject::doesSerialModuleExist(const void *a1, size_t a2)
{
  v19[19] = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __p = 0;
    size_t v15 = 0;
    unint64_t v16 = 0;
    goto LABEL_12;
  }
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (a2 >= 0x17)
  {
    uint64_t v5 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v5 = a2 | 7;
    }
    uint64_t v6 = v5 + 1;
    p_p = operator new(v5 + 1);
    size_t v15 = a2;
    unint64_t v16 = v6 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v16) = a2;
    p_p = &__p;
    if (!a2) {
      goto LABEL_11;
    }
  }
  memmove(p_p, a1, a2);
LABEL_11:
  *((unsigned char *)p_p + a2) = 0;
LABEL_12:
  uint64_t v7 = MEMORY[0x1E4FBA460] + 24;
  uint64_t v8 = MEMORY[0x1E4FBA460] + 64;
  v19[0] = MEMORY[0x1E4FBA460] + 64;
  uint64_t v9 = (void *)MEMORY[0x1E4FBA3F8];
  uint64_t v10 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
  v17[0] = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
  *(void *)((char *)v17 + *(void *)(v17[0] - 24)) = v10;
  v17[1] = 0;
  char v11 = (std::ios_base *)((char *)v17 + *(void *)(v17[0] - 24));
  std::ios_base::init(v11, v18);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v17[0] = v7;
  v19[0] = v8;
  MEMORY[0x1D25D9770](v18);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)v17 + *(void *)(v17[0] - 24)), *(_DWORD *)&v18[*(void *)(v17[0] - 24) + 16] | 4);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(__p);
  }
  int v12 = *(_DWORD *)&v18[*(void *)(v17[0] - 24) + 16];
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)v17 + *(void *)(v17[0] - 24)), *(_DWORD *)&v18[*(void *)(v17[0] - 24) + 16] | 4);
  }
  v17[0] = *v9;
  *(void *)((char *)v17 + *(void *)(v17[0] - 24)) = v9[3];
  MEMORY[0x1D25D9780](v18);
  std::istream::~istream();
  MEMORY[0x1D25D9C00](v19);
  return v12 == 0;
}

uint64_t llvm::irinject::serializeModule(const std::string *a1, const void *a2, size_t a3)
{
  v43[19] = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    long long __dst = 0;
    size_t v29 = 0;
    v30[0] = 0;
    goto LABEL_12;
  }
  if (a3 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_55;
  }
  if (a3 >= 0x17)
  {
    uint64_t v7 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v7 = a3 | 7;
    }
    uint64_t v8 = v7 + 1;
    p_dst = (void **)operator new(v7 + 1);
    size_t v29 = a3;
    v30[0] = (void *)(v8 | 0x8000000000000000);
    long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v30[0]) = a3;
    p_dst = (void **)&__dst;
    if (!a3) {
      goto LABEL_11;
    }
  }
  memmove(p_dst, a2, a3);
LABEL_11:
  *((unsigned char *)p_dst + a3) = 0;
LABEL_12:
  uint64_t v9 = MEMORY[0x1E4FBA468] + 24;
  uint64_t v10 = MEMORY[0x1E4FBA468] + 64;
  v43[0] = MEMORY[0x1E4FBA468] + 64;
  char v11 = (uint64_t *)MEMORY[0x1E4FBA400];
  uint64_t v12 = *(void *)(MEMORY[0x1E4FBA400] + 16);
  uint64_t v41 = *(void *)(MEMORY[0x1E4FBA400] + 8);
  *(void *)&v42[*(void *)(v41 - 24) - 8] = v12;
  uint64_t v13 = (std::ios_base *)&v42[*(void *)(v41 - 24) - 8];
  std::ios_base::init(v13, v42);
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  uint64_t v41 = v9;
  v43[0] = v10;
  MEMORY[0x1D25D9770](v42);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)&v42[*(void *)(v41 - 24) - 8], *(_DWORD *)&v42[*(void *)(v41 - 24) + 24] | 4);
  }
  if (SHIBYTE(v30[0]) < 0) {
    operator delete(__dst);
  }
  sub_1CD114070(a1, &__dst);
  if (SHIBYTE(v30[0]) >= 0) {
    __int16 v14 = (void **)&__dst;
  }
  else {
    __int16 v14 = __dst;
  }
  if (SHIBYTE(v30[0]) >= 0) {
    uint64_t v15 = HIBYTE(v30[0]) & 0x7F;
  }
  else {
    uint64_t v15 = v29;
  }
  sub_1CBF435C4(&v41, (uint64_t)v14, v15);
  if (SHIBYTE(v30[0]) < 0) {
    operator delete(__dst);
  }
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)&v42[*(void *)(v41 - 24) - 8], *(_DWORD *)&v42[*(void *)(v41 - 24) + 24] | 4);
  }
  if (*(_DWORD *)&v42[*(void *)(v41 - 24) + 24])
  {
    unint64_t v16 = __error();
    uint64_t v17 = strerror(*v16);
    uint64_t v18 = v17;
    if (v17)
    {
      uint64_t v17 = (char *)strlen(v17);
      size_t v19 = (size_t)v17;
    }
    else
    {
      size_t v19 = 0;
    }
    long long __dst = 0;
    size_t v29 = 0;
    if (a3 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_55;
    }
    if (a3 >= 0x17)
    {
      uint64_t v21 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17) {
        uint64_t v21 = a3 | 7;
      }
      uint64_t v22 = v21 + 1;
      char v20 = (void **)operator new(v21 + 1);
      v30[1] = (void *)a3;
      unint64_t v31 = v22 | 0x8000000000000000;
      v30[0] = v20;
    }
    else
    {
      char v20 = v30;
      HIBYTE(v31) = a3;
      if (!a3)
      {
LABEL_38:
        *((unsigned char *)v20 + a3) = 0;
        uint64_t v32 = -1;
        int v33 = 0;
        if (v19 <= 0x7FFFFFFFFFFFFFF7)
        {
          if (v19 >= 0x17)
          {
            uint64_t v24 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v19 | 7) != 0x17) {
              uint64_t v24 = v19 | 7;
            }
            uint64_t v25 = v24 + 1;
            uint64_t v23 = operator new(v24 + 1);
            v34[1] = (void *)v19;
            unint64_t v35 = v25 | 0x8000000000000000;
            v34[0] = v23;
          }
          else
          {
            uint64_t v23 = v34;
            HIBYTE(v35) = v19;
            if (!v19) {
              goto LABEL_46;
            }
          }
          uint64_t v17 = (char *)memmove(v23, v18, v19);
LABEL_46:
          *((unsigned char *)v23 + v19) = 0;
          long long v38 = 0u;
          *(_OWORD *)__p = 0u;
          *(_OWORD *)uint64_t v36 = 0u;
          v39[0] = &v40;
          v39[1] = (void *)0x400000000;
          unsigned int v26 = (llvm::raw_ostream *)llvm::errs((llvm *)v17);
          llvm::SMDiagnostic::print((llvm::SMDiagnostic *)&__dst, "IRInject", v26, 1, 1);
          sub_1CC1925A4(v39);
          if (__p[1])
          {
            *(void **)&long long v38 = __p[1];
            operator delete(__p[1]);
          }
          if (SHIBYTE(__p[0]) < 0) {
            operator delete(v36[0]);
          }
          if (SHIBYTE(v35) < 0) {
            operator delete(v34[0]);
          }
          if (SHIBYTE(v31) < 0) {
            operator delete(v30[0]);
          }
          goto LABEL_54;
        }
LABEL_55:
        abort();
      }
    }
    uint64_t v17 = (char *)memmove(v20, a2, a3);
    goto LABEL_38;
  }
LABEL_54:
  uint64_t v41 = *v11;
  *(void *)&v42[*(void *)(v41 - 24) - 8] = v11[3];
  MEMORY[0x1D25D9780](v42);
  std::ostream::~ostream();
  return MEMORY[0x1D25D9C00](v43);
}

void llvm::irinject::deserializeModule(const void *a1@<X0>, size_t a2@<X1>, void *a3@<X8>)
{
  v30[21] = *MEMORY[0x1E4F143B8];
  int v23 = 0;
  *(_OWORD *)uint64_t v21 = 0u;
  long long v22 = 0u;
  long long v20 = 0u;
  *(_OWORD *)uint64_t v24 = 0u;
  *(_OWORD *)__p = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  uint64_t v28 = 0;
  v29[0] = v30;
  v29[1] = (void *)0x400000000;
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (a2 >= 0x17)
  {
    uint64_t v7 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v7 = a2 | 7;
    }
    uint64_t v8 = v7 + 1;
    p_dst = (void **)operator new(v7 + 1);
    std::string::size_type v17 = a2;
    int64_t v18 = v8 | 0x8000000000000000;
    long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v18) = a2;
  p_dst = (void **)&__dst;
  if (a2) {
LABEL_8:
  }
    memmove(p_dst, a1, a2);
  *((unsigned char *)p_dst + a2) = 0;
  if (v18 >= 0) {
    uint64_t v9 = (const std::string::value_type *)&__dst;
  }
  else {
    uint64_t v9 = (const std::string::value_type *)__dst;
  }
  if (v18 >= 0) {
    std::string::size_type v10 = HIBYTE(v18) & 0x7F;
  }
  else {
    std::string::size_type v10 = v17;
  }
  llvm::parseIRFile(v9, v10, (uint64_t)&v20, (char **)&v19);
  if (SHIBYTE(v18) < 0) {
    operator delete(__dst);
  }
  if (v19) {
    llvm::CloneModule(v19, v11);
  }
  uint64_t v13 = llvm::dbgs(0);
  __int16 v14 = (void *)*((void *)v13 + 4);
  if (*((void *)v13 + 3) - (void)v14 > 0x1DuLL)
  {
    qmemcpy(v14, "IR is malformed, can't parse:\n", 30);
    *((void *)v13 + 4) += 30;
  }
  else
  {
    uint64_t v13 = llvm::raw_ostream::write(v13, "IR is malformed, can't parse:\n", 0x1EuLL);
  }
  uint64_t v15 = (llvm::raw_ostream *)llvm::errs(v13);
  llvm::SMDiagnostic::print((llvm::SMDiagnostic *)&v20, "IRInject", v15, 1, 1);
  *a3 = 0;
  uint64_t v12 = v19;
  size_t v19 = 0;
  if (v12)
  {
    llvm::Module::~Module(v12);
    MEMORY[0x1D25D9CE0]();
  }
  sub_1CC1925A4(v29);
  if ((void)v27)
  {
    *((void *)&v27 + 1) = v27;
    operator delete((void *)v27);
  }
  if (SHIBYTE(v26) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v24[0]);
  }
  if (SBYTE7(v22) < 0) {
    operator delete(v21[0]);
  }
}

void sub_1CD268438(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

uint64_t llvm::VNCoercion::canCoerceMustAliasedValueToLoad(llvm::VNCoercion *this, llvm::Value ***a2, llvm::Type *a3, const llvm::DataLayout *a4)
{
  uint64_t v5 = *(void *)this;
  uint64_t result = 1;
  if ((llvm::Value ***)v5 == a2) {
    return result;
  }
  unsigned int v8 = *((unsigned __int8 *)a2 + 8);
  if (v8 <= 0x13 && ((1 << v8) & 0xB0000) != 0) {
    return 0;
  }
  unsigned int v10 = *(unsigned __int8 *)(v5 + 8);
  if (v10 <= 0x13 && ((1 << v10) & 0xB0000) != 0) {
    return 0;
  }
  unint64_t v13 = sub_1CB83544C((uint64_t)a3, v5);
  if (((v13 + 7) & 0xFFFFFFFFFFFFFFF8) != v13) {
    return 0;
  }
  unint64_t v14 = v13;
  if (v13 < sub_1CB83544C((uint64_t)a3, (uint64_t)a2)) {
    return 0;
  }
  uint64_t v15 = v5;
  if ((*(_DWORD *)(v5 + 8) & 0xFE) == 0x12) {
    uint64_t v15 = **(void **)(v5 + 16);
  }
  int v16 = sub_1CBFB72C8((uint64_t)a3, v15);
  std::string::size_type v17 = (llvm::Value *)a2;
  if ((a2[1] & 0xFE) == 0x12) {
    std::string::size_type v17 = *a2[2];
  }
  int v18 = sub_1CBFB72C8((uint64_t)a3, (uint64_t)v17);
  if (v16 == v18)
  {
    if ((v16 & v18) != 1) {
      goto LABEL_35;
    }
    unsigned int v22 = *(_DWORD *)(v5 + 8);
    if ((v22 & 0xFE) == 0x12) {
      unsigned int v22 = *(_DWORD *)(**(void **)(v5 + 16) + 8);
    }
    int v23 = *((_DWORD *)a2 + 2);
    if ((v23 & 0xFE) == 0x12) {
      int v23 = *((_DWORD *)*a2[2] + 2);
    }
    if ((v23 ^ v22) <= 0xFF)
    {
LABEL_35:
      if ((!v16 || v14 == sub_1CB83544C((uint64_t)a3, (uint64_t)a2)) && *(unsigned char *)(v5 + 8) != 21) {
        return *((unsigned __int8 *)a2 + 8) != 21;
      }
    }
    return 0;
  }
  unsigned int v19 = *((unsigned __int8 *)this + 16);
  if (v19 > 0x14) {
    return 0;
  }
  if (v19 == 16)
  {
    uint64_t v20 = *((unsigned int *)this + 8);
    if (v20 > 0x40)
    {
      int v24 = 0;
      int64_t v25 = (unint64_t)(v20 + 63) >> 6;
      do
      {
        if (v25-- < 1) {
          break;
        }
        unint64_t v27 = *(void *)(*((void *)this + 3) + 8 * v25);
        v24 += __clz(v27);
      }
      while (!v27);
      int v28 = v20 | 0xFFFFFFC0;
      if ((v20 & 0x3F) == 0) {
        int v28 = 0;
      }
      return v24 + v28 == v20;
    }
    else
    {
      return *((void *)this + 3) == 0;
    }
  }
  if (v19 != 17)
  {
    uint64_t result = 1;
    if (v19 - 18 < 3 || v19 == 13) {
      return result;
    }
    return 0;
  }

  return sub_1CB844168((uint64_t)this, 0.0);
}

llvm::Value *llvm::VNCoercion::coerceAvailableValueToLoadType(llvm::VNCoercion *this, llvm::Value *a2, llvm::Type *a3, llvm::IRBuilderBase *a4, const llvm::DataLayout *a5)
{
  unsigned int v8 = this;
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  if (this)
  {
    if (*((unsigned __int8 *)this + 16) <= 0x14u)
    {
      uint64_t v122 = 1;
      for (uint64_t i = 8; i != 72; i += 16)
        *(uint64_t *)((char *)&v122 + i) = -4096;
      unsigned int v8 = sub_1CBFB8694((uint64_t)this, a4, 0, (uint64_t)&v122);
      if ((v122 & 1) == 0) {
        MEMORY[0x1D25D9CD0](v123, 8);
      }
    }
  }
  uint64_t v10 = *(void *)v8;
  char v11 = (llvm::LLVMContext *)sub_1CB83544C((uint64_t)a4, *(void *)v8);
  uint64_t v12 = sub_1CB83544C((uint64_t)a4, (uint64_t)a2);
  unsigned int v13 = *(_DWORD *)(v10 + 8);
  int v14 = v13 & 0xFE;
  if (v11 == (llvm::LLVMContext *)v12)
  {
    int v15 = *(_DWORD *)(v10 + 8);
    if (v14 == 18) {
      LOBYTE(v15) = *(unsigned char *)(**(void **)(v10 + 16) + 8);
    }
    if (v15 == 15
      && ((*((_DWORD *)a2 + 2) & 0xFE) != 0x12
        ? (int v16 = *((_DWORD *)a2 + 2))
        : (int v16 = *(unsigned __int8 *)(**((void **)a2 + 2) + 8)),
          v16 == 15))
    {
      __int16 v121 = 257;
      if (*(llvm::Value **)v8 != a2)
      {
        if (*((unsigned __int8 *)v8 + 16) <= 0x14u)
        {
          unsigned int v8 = (llvm::Value *)(*(uint64_t (**)(void, uint64_t, llvm::Value *, llvm::Value *))(**((void **)a3 + 9) + 224))(*((void *)a3 + 9), 49, v8, a2);
          if (v8) {
            BOOL v57 = *((unsigned __int8 *)v8 + 16) >= 0x1Cu;
          }
          else {
            BOOL v57 = 0;
          }
          if (v57)
          {
            (*(void (**)(void, llvm::Value *, unsigned char *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v8, v120, *((void *)a3 + 6), *((void *)a3 + 7));
            uint64_t v107 = *((unsigned int *)a3 + 2);
            if (v107)
            {
              int v108 = *(void **)a3;
              uint64_t v109 = &v108[2 * v107];
              do
              {
                llvm::Instruction::setMetadata(v8, *(_DWORD *)v108, (llvm::MDNode *)v108[1]);
                v108 += 2;
              }
              while (v108 != v109);
            }
          }
        }
        else
        {
          __int16 v124 = 257;
          unsigned int v8 = llvm::CastInst::Create(49, (uint64_t)v8, (uint64_t)a2, (const char **)&v122, 0);
          (*(void (**)(void, llvm::Value *, unsigned char *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v8, v120, *((void *)a3 + 6), *((void *)a3 + 7));
          uint64_t v17 = *((unsigned int *)a3 + 2);
          if (v17)
          {
            int v18 = *(void **)a3;
            unsigned int v19 = &v18[2 * v17];
            do
            {
              llvm::Instruction::setMetadata(v8, *(_DWORD *)v18, (llvm::MDNode *)v18[1]);
              v18 += 2;
            }
            while (v18 != v19);
          }
        }
      }
    }
    else
    {
      if (v14 == 18) {
        unsigned int v13 = *(_DWORD *)(**(void **)(v10 + 16) + 8);
      }
      if (v13 == 15)
      {
        if (v13 < 0x100) {
          goto LABEL_33;
        }
        unsigned int v20 = v13 >> 8;
        uint64_t v21 = *((unsigned int *)a4 + 60);
        uint64_t v22 = *((void *)a4 + 29);
        if (v21)
        {
          uint64_t v22 = *((void *)a4 + 29);
          unint64_t v23 = *((unsigned int *)a4 + 60);
          do
          {
            unint64_t v24 = v23 >> 1;
            uint64_t v25 = v22 + 16 * (v23 >> 1);
            unsigned int v26 = *(_DWORD *)(v25 + 8);
            uint64_t v27 = v25 + 16;
            v23 += ~(v23 >> 1);
            if (v26 < v20) {
              uint64_t v22 = v27;
            }
            else {
              unint64_t v23 = v24;
            }
          }
          while (v23);
        }
        if (v22 == *((void *)a4 + 29) + 16 * v21 || *(_DWORD *)(v22 + 8) != v20) {
LABEL_33:
        }
          uint64_t v22 = *((void *)a4 + 29);
        int v28 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)v10, (llvm::LLVMContext *)*(unsigned int *)(v22 + 4));
        uint64_t v29 = (uint64_t)v28;
        if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12)
        {
          llvm::VectorType::get(v28, (llvm::Type *)(*(unsigned int *)(v10 + 32) | ((unint64_t)(*(_DWORD *)(v10 + 8) == 19) << 32)));
          uint64_t v29 = v99;
        }
        __int16 v121 = 257;
        if (*(void *)v8 != v29)
        {
          if (*((unsigned __int8 *)v8 + 16) <= 0x14u)
          {
            unsigned int v8 = (llvm::Value *)(*(uint64_t (**)(void, uint64_t, llvm::Value *, uint64_t))(**((void **)a3 + 9) + 224))(*((void *)a3 + 9), 47, v8, v29);
            if (v8) {
              BOOL v33 = *((unsigned __int8 *)v8 + 16) >= 0x1Cu;
            }
            else {
              BOOL v33 = 0;
            }
            if (v33)
            {
              (*(void (**)(void, llvm::Value *, unsigned char *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v8, v120, *((void *)a3 + 6), *((void *)a3 + 7));
              uint64_t v104 = *((unsigned int *)a3 + 2);
              if (v104)
              {
                int v105 = *(void **)a3;
                uint64_t v106 = *(void *)a3 + 16 * v104;
                do
                {
                  llvm::Instruction::setMetadata(v8, *(_DWORD *)v105, (llvm::MDNode *)v105[1]);
                  v105 += 2;
                }
                while (v105 != (void *)v106);
              }
            }
          }
          else
          {
            __int16 v124 = 257;
            unsigned int v8 = llvm::CastInst::Create(47, (uint64_t)v8, v29, (const char **)&v122, 0);
            (*(void (**)(void, llvm::Value *, unsigned char *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v8, v120, *((void *)a3 + 6), *((void *)a3 + 7));
            uint64_t v30 = *((unsigned int *)a3 + 2);
            if (v30)
            {
              unint64_t v31 = *(void **)a3;
              uint64_t v32 = *(void *)a3 + 16 * v30;
              do
              {
                llvm::Instruction::setMetadata(v8, *(_DWORD *)v31, (llvm::MDNode *)v31[1]);
                v31 += 2;
              }
              while (v31 != (void *)v32);
            }
          }
        }
      }
      else
      {
        uint64_t v29 = v10;
      }
      unsigned int v34 = *((_DWORD *)a2 + 2);
      if ((v34 & 0xFE) == 0x12) {
        unsigned int v34 = *(_DWORD *)(**((void **)a2 + 2) + 8);
      }
      unint64_t v35 = a2;
      if (v34 == 15)
      {
        if (v34 < 0x100) {
          goto LABEL_59;
        }
        unsigned int v36 = v34 >> 8;
        uint64_t v37 = *((unsigned int *)a4 + 60);
        uint64_t v38 = *((void *)a4 + 29);
        if (v37)
        {
          uint64_t v38 = *((void *)a4 + 29);
          unint64_t v39 = *((unsigned int *)a4 + 60);
          do
          {
            unint64_t v40 = v39 >> 1;
            uint64_t v41 = v38 + 16 * (v39 >> 1);
            unsigned int v42 = *(_DWORD *)(v41 + 8);
            uint64_t v43 = v41 + 16;
            v39 += ~(v39 >> 1);
            if (v42 < v36) {
              uint64_t v38 = v43;
            }
            else {
              unint64_t v39 = v40;
            }
          }
          while (v39);
        }
        if (v38 == *((void *)a4 + 29) + 16 * v37 || *(_DWORD *)(v38 + 8) != v36) {
LABEL_59:
        }
          uint64_t v38 = *((void *)a4 + 29);
        uint64_t v44 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)a2, (llvm::LLVMContext *)*(unsigned int *)(v38 + 4));
        unint64_t v35 = v44;
        if ((*((_DWORD *)a2 + 2) & 0xFE) == 0x12)
        {
          llvm::VectorType::get(v44, (llvm::Type *)(*((unsigned int *)a2 + 8) | ((unint64_t)(*((_DWORD *)a2 + 2) == 19) << 32)));
          unint64_t v35 = v100;
        }
      }
      if ((llvm::Value *)v29 != v35)
      {
        __int16 v121 = 257;
        if (*(llvm::Value **)v8 != v35)
        {
          if (*((unsigned __int8 *)v8 + 16) <= 0x14u)
          {
            unsigned int v8 = (llvm::Value *)(*(uint64_t (**)(void, uint64_t, llvm::Value *, llvm::Value *))(**((void **)a3 + 9) + 224))(*((void *)a3 + 9), 49, v8, v35);
            if (v8) {
              BOOL v48 = *((unsigned __int8 *)v8 + 16) >= 0x1Cu;
            }
            else {
              BOOL v48 = 0;
            }
            if (v48)
            {
              (*(void (**)(void, llvm::Value *, unsigned char *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v8, v120, *((void *)a3 + 6), *((void *)a3 + 7));
              uint64_t v101 = *((unsigned int *)a3 + 2);
              if (v101)
              {
                uint64_t v102 = *(void **)a3;
                uint64_t v103 = *(void *)a3 + 16 * v101;
                do
                {
                  llvm::Instruction::setMetadata(v8, *(_DWORD *)v102, (llvm::MDNode *)v102[1]);
                  v102 += 2;
                }
                while (v102 != (void *)v103);
              }
            }
          }
          else
          {
            __int16 v124 = 257;
            unsigned int v8 = llvm::CastInst::Create(49, (uint64_t)v8, (uint64_t)v35, (const char **)&v122, 0);
            (*(void (**)(void, llvm::Value *, unsigned char *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v8, v120, *((void *)a3 + 6), *((void *)a3 + 7));
            uint64_t v45 = *((unsigned int *)a3 + 2);
            if (v45)
            {
              uint64_t v46 = *(void **)a3;
              uint64_t v47 = *(void *)a3 + 16 * v45;
              do
              {
                llvm::Instruction::setMetadata(v8, *(_DWORD *)v46, (llvm::MDNode *)v46[1]);
                v46 += 2;
              }
              while (v46 != (void *)v47);
            }
          }
        }
      }
      if ((*((_DWORD *)a2 + 2) & 0xFE) == 0x12) {
        int v49 = *(unsigned __int8 *)(**((void **)a2 + 2) + 8);
      }
      else {
        int v49 = *((_DWORD *)a2 + 2);
      }
      if (v49 == 15)
      {
        __int16 v121 = 257;
        if (*(llvm::Value **)v8 != a2)
        {
          if (*((unsigned __int8 *)v8 + 16) <= 0x14u)
          {
            unsigned int v8 = (llvm::Value *)(*(uint64_t (**)(void, uint64_t, llvm::Value *, llvm::Value *))(**((void **)a3 + 9) + 224))(*((void *)a3 + 9), 48, v8, a2);
            if (v8) {
              BOOL v53 = *((unsigned __int8 *)v8 + 16) >= 0x1Cu;
            }
            else {
              BOOL v53 = 0;
            }
            if (v53)
            {
              (*(void (**)(void, llvm::Value *, unsigned char *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v8, v120, *((void *)a3 + 6), *((void *)a3 + 7));
              uint64_t v54 = *((unsigned int *)a3 + 2);
              if (v54)
              {
                uint64_t v55 = *(void **)a3;
                int v56 = &v55[2 * v54];
                do
                {
                  llvm::Instruction::setMetadata(v8, *(_DWORD *)v55, (llvm::MDNode *)v55[1]);
                  v55 += 2;
                }
                while (v55 != v56);
              }
            }
          }
          else
          {
            __int16 v124 = 257;
            unsigned int v8 = llvm::CastInst::Create(48, (uint64_t)v8, (uint64_t)a2, (const char **)&v122, 0);
            (*(void (**)(void, llvm::Value *, unsigned char *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v8, v120, *((void *)a3 + 6), *((void *)a3 + 7));
            uint64_t v50 = *((unsigned int *)a3 + 2);
            if (v50)
            {
              uint64_t v51 = *(void **)a3;
              uint64_t v52 = &v51[2 * v50];
              do
              {
                llvm::Instruction::setMetadata(v8, *(_DWORD *)v51, (llvm::MDNode *)v51[1]);
                v51 += 2;
              }
              while (v51 != v52);
            }
          }
        }
      }
    }
    if (v8 && *((unsigned char *)v8 + 16) == 5)
    {
LABEL_98:
      uint64_t v122 = 1;
      for (uint64_t j = 8; j != 72; j += 16)
        *(uint64_t *)((char *)&v122 + j) = -4096;
      unsigned int v8 = sub_1CBFB8694((uint64_t)v8, a4, 0, (uint64_t)&v122);
      if ((v122 & 1) == 0) {
        MEMORY[0x1D25D9CD0](v123, 8);
      }
    }
  }
  else
  {
    unint64_t v60 = (llvm::LLVMContext *)v12;
    if (v14 == 18)
    {
      unsigned int v61 = *(_DWORD *)(**(void **)(v10 + 16) + 8);
      int v62 = v61;
    }
    else
    {
      int v62 = *(_DWORD *)(v10 + 8);
      unsigned int v61 = *(_DWORD *)(v10 + 8);
    }
    if (v62 == 15)
    {
      if (v61 < 0x100) {
        goto LABEL_116;
      }
      unsigned int v63 = v61 >> 8;
      uint64_t v64 = *((unsigned int *)a4 + 60);
      uint64_t v65 = *((void *)a4 + 29);
      if (v64)
      {
        uint64_t v65 = *((void *)a4 + 29);
        unint64_t v66 = *((unsigned int *)a4 + 60);
        do
        {
          unint64_t v67 = v66 >> 1;
          uint64_t v68 = v65 + 16 * (v66 >> 1);
          unsigned int v69 = *(_DWORD *)(v68 + 8);
          uint64_t v70 = v68 + 16;
          v66 += ~(v66 >> 1);
          if (v69 < v63) {
            uint64_t v65 = v70;
          }
          else {
            unint64_t v66 = v67;
          }
        }
        while (v66);
      }
      if (v65 == *((void *)a4 + 29) + 16 * v64 || *(_DWORD *)(v65 + 8) != v63) {
LABEL_116:
      }
        uint64_t v65 = *((void *)a4 + 29);
      int v71 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)v10, (llvm::LLVMContext *)*(unsigned int *)(v65 + 4));
      uint64_t v72 = (uint64_t)v71;
      if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12)
      {
        llvm::VectorType::get(v71, (llvm::Type *)(*(unsigned int *)(v10 + 32) | ((unint64_t)(*(_DWORD *)(v10 + 8) == 19) << 32)));
        uint64_t v72 = v110;
      }
      __int16 v121 = 257;
      if (*(void *)v8 != v72)
      {
        if (*((unsigned __int8 *)v8 + 16) <= 0x14u)
        {
          unsigned int v8 = (llvm::Value *)(*(uint64_t (**)(void, uint64_t, llvm::Value *, uint64_t))(**((void **)a3 + 9)
                                                                                                 + 224))(*((void *)a3 + 9), 47, v8, v72);
          if (v8) {
            BOOL v76 = *((unsigned __int8 *)v8 + 16) >= 0x1Cu;
          }
          else {
            BOOL v76 = 0;
          }
          if (v76)
          {
            (*(void (**)(void, llvm::Value *, unsigned char *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v8, v120, *((void *)a3 + 6), *((void *)a3 + 7));
            uint64_t v111 = *((unsigned int *)a3 + 2);
            if (v111)
            {
              uint64_t v112 = *(void **)a3;
              uint64_t v113 = *(void *)a3 + 16 * v111;
              do
              {
                llvm::Instruction::setMetadata(v8, *(_DWORD *)v112, (llvm::MDNode *)v112[1]);
                v112 += 2;
              }
              while (v112 != (void *)v113);
            }
          }
        }
        else
        {
          __int16 v124 = 257;
          unsigned int v8 = llvm::CastInst::Create(47, (uint64_t)v8, v72, (const char **)&v122, 0);
          (*(void (**)(void, llvm::Value *, unsigned char *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v8, v120, *((void *)a3 + 6), *((void *)a3 + 7));
          uint64_t v73 = *((unsigned int *)a3 + 2);
          if (v73)
          {
            uint64_t v74 = *(void **)a3;
            uint64_t v75 = *(void *)a3 + 16 * v73;
            do
            {
              llvm::Instruction::setMetadata(v8, *(_DWORD *)v74, (llvm::MDNode *)v74[1]);
              v74 += 2;
            }
            while (v74 != (void *)v75);
          }
        }
      }
      LOBYTE(v13) = *(unsigned char *)(v72 + 8);
    }
    else
    {
      uint64_t v72 = v10;
    }
    if (v13 != 13)
    {
      uint64_t v72 = llvm::IntegerType::get(*(llvm::IntegerType **)v72, v11);
      __int16 v121 = 257;
      if (*(void *)v8 != v72)
      {
        if (*((unsigned __int8 *)v8 + 16) <= 0x14u)
        {
          unsigned int v8 = (llvm::Value *)(*(uint64_t (**)(void, uint64_t, llvm::Value *, uint64_t))(**((void **)a3 + 9)
                                                                                                 + 224))(*((void *)a3 + 9), 49, v8, v72);
          if (v8) {
            BOOL v80 = *((unsigned __int8 *)v8 + 16) >= 0x1Cu;
          }
          else {
            BOOL v80 = 0;
          }
          if (v80)
          {
            (*(void (**)(void, llvm::Value *, unsigned char *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v8, v120, *((void *)a3 + 6), *((void *)a3 + 7));
            uint64_t v114 = *((unsigned int *)a3 + 2);
            if (v114)
            {
              int v115 = *(void **)a3;
              uint64_t v116 = *(void *)a3 + 16 * v114;
              do
              {
                llvm::Instruction::setMetadata(v8, *(_DWORD *)v115, (llvm::MDNode *)v115[1]);
                v115 += 2;
              }
              while (v115 != (void *)v116);
            }
          }
        }
        else
        {
          __int16 v124 = 257;
          unsigned int v8 = llvm::CastInst::Create(49, (uint64_t)v8, v72, (const char **)&v122, 0);
          (*(void (**)(void, llvm::Value *, unsigned char *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v8, v120, *((void *)a3 + 6), *((void *)a3 + 7));
          uint64_t v77 = *((unsigned int *)a3 + 2);
          if (v77)
          {
            unsigned int v78 = *(void **)a3;
            uint64_t v79 = *(void *)a3 + 16 * v77;
            do
            {
              llvm::Instruction::setMetadata(v8, *(_DWORD *)v78, (llvm::MDNode *)v78[1]);
              v78 += 2;
            }
            while (v78 != (void *)v79);
          }
        }
      }
    }
    if (*(unsigned char *)a4)
    {
      unint64_t v81 = (sub_1CB83544C((uint64_t)a4, v72) + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v82 = sub_1CB83544C((uint64_t)a4, (uint64_t)a2);
      uint64_t v83 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v8, v81 - ((v82 + 7) & 0xFFFFFFFFFFFFFFF8), 0);
      __int16 v124 = 257;
      unsigned int v8 = sub_1CC2429AC((uint64_t)a3, (uint64_t)v8, (uint64_t)v83, (uint64_t)&v122, 0);
    }
    std::string v84 = (llvm::Type ***)llvm::IntegerType::get(*(llvm::IntegerType **)v72, v60);
    __int16 v124 = 257;
    int v86 = sub_1CD5AB4EC((uint64_t)a3, v8, v84, (uint64_t)&v122, v85);
    unsigned int v8 = v86;
    if (v84 != (llvm::Type ***)a2)
    {
      if ((*((_DWORD *)a2 + 2) & 0xFE) == 0x12) {
        int v87 = *(unsigned __int8 *)(**((void **)a2 + 2) + 8);
      }
      else {
        int v87 = *((_DWORD *)a2 + 2);
      }
      if (v87 == 15)
      {
        __int16 v121 = 257;
        if (*(llvm::Value **)v86 != a2)
        {
          if (*((unsigned __int8 *)v86 + 16) <= 0x14u)
          {
            unsigned int v8 = (llvm::Value *)(*(uint64_t (**)(void, uint64_t, llvm::CastInst *, llvm::Value *))(**((void **)a3 + 9) + 224))(*((void *)a3 + 9), 48, v86, a2);
            if (v8) {
              BOOL v94 = *((unsigned __int8 *)v8 + 16) >= 0x1Cu;
            }
            else {
              BOOL v94 = 0;
            }
            if (v94)
            {
              (*(void (**)(void, llvm::Value *, unsigned char *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v8, v120, *((void *)a3 + 6), *((void *)a3 + 7));
              uint64_t v95 = *((unsigned int *)a3 + 2);
              if (v95)
              {
                size_t v96 = *(void **)a3;
                uint64_t v97 = &v96[2 * v95];
                do
                {
                  llvm::Instruction::setMetadata(v8, *(_DWORD *)v96, (llvm::MDNode *)v96[1]);
                  v96 += 2;
                }
                while (v96 != v97);
              }
            }
          }
          else
          {
            __int16 v124 = 257;
            unsigned int v8 = llvm::CastInst::Create(48, (uint64_t)v86, (uint64_t)a2, (const char **)&v122, 0);
            (*(void (**)(void, llvm::Value *, unsigned char *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v8, v120, *((void *)a3 + 6), *((void *)a3 + 7));
            uint64_t v88 = *((unsigned int *)a3 + 2);
            if (v88)
            {
              uint64_t v89 = *(void **)a3;
              unint64_t v90 = &v89[2 * v88];
              do
              {
                llvm::Instruction::setMetadata(v8, *(_DWORD *)v89, (llvm::MDNode *)v89[1]);
                v89 += 2;
              }
              while (v89 != v90);
            }
          }
        }
      }
      else
      {
        __int16 v121 = 257;
        if (*(llvm::Value **)v86 != a2)
        {
          if (*((unsigned __int8 *)v86 + 16) <= 0x14u)
          {
            unsigned int v8 = (llvm::Value *)(*(uint64_t (**)(void, uint64_t, llvm::CastInst *, llvm::Value *))(**((void **)a3 + 9) + 224))(*((void *)a3 + 9), 49, v86, a2);
            if (v8) {
              BOOL v98 = *((unsigned __int8 *)v8 + 16) >= 0x1Cu;
            }
            else {
              BOOL v98 = 0;
            }
            if (v98)
            {
              (*(void (**)(void, llvm::Value *, unsigned char *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v8, v120, *((void *)a3 + 6), *((void *)a3 + 7));
              uint64_t v117 = *((unsigned int *)a3 + 2);
              if (v117)
              {
                unsigned int v118 = *(void **)a3;
                uint64_t v119 = &v118[2 * v117];
                do
                {
                  llvm::Instruction::setMetadata(v8, *(_DWORD *)v118, (llvm::MDNode *)v118[1]);
                  v118 += 2;
                }
                while (v118 != v119);
              }
            }
          }
          else
          {
            __int16 v124 = 257;
            unsigned int v8 = llvm::CastInst::Create(49, (uint64_t)v86, (uint64_t)a2, (const char **)&v122, 0);
            (*(void (**)(void, llvm::Value *, unsigned char *, void, void))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v8, v120, *((void *)a3 + 6), *((void *)a3 + 7));
            uint64_t v91 = *((unsigned int *)a3 + 2);
            if (v91)
            {
              uint64_t v92 = *(void **)a3;
              uint64_t v93 = &v92[2 * v91];
              do
              {
                llvm::Instruction::setMetadata(v8, *(_DWORD *)v92, (llvm::MDNode *)v92[1]);
                v92 += 2;
              }
              while (v92 != v93);
            }
          }
        }
      }
    }
    if (v8 && *((unsigned __int8 *)v8 + 16) <= 0x14u) {
      goto LABEL_98;
    }
  }
  return v8;
}

uint64_t llvm::VNCoercion::analyzeLoadFromClobberingStore(llvm::Value ***this, llvm::Type *a2, llvm::Value *a3, llvm::StoreInst *a4, const llvm::DataLayout *a5)
{
  uint64_t v6 = (llvm::VNCoercion *)*((void *)a3 - 8);
  unsigned int v7 = *(unsigned __int8 *)(*(void *)v6 + 8);
  BOOL v8 = v7 > 0x13;
  int v9 = (1 << v7) & 0xB0000;
  BOOL v10 = v8 || v9 == 0;
  if (!v10 || !llvm::VNCoercion::canCoerceMustAliasedValueToLoad(v6, this, a4, a4)) {
    return 0xFFFFFFFFLL;
  }
  int v14 = (llvm::GlobalValue *)*((void *)a3 - 4);
  unint64_t v15 = sub_1CB83544C((uint64_t)a4, **((void **)a3 - 8));

  return sub_1CD269798((uint64_t)this, a2, v14, v15, a4, v16, v17);
}

uint64_t sub_1CD269798(uint64_t a1, llvm::GlobalValue *a2, llvm::GlobalValue *this, unint64_t a4, llvm::DataLayout *a5, uint64_t a6, uint64_t a7)
{
  unsigned int v7 = *(unsigned __int8 *)(a1 + 8);
  BOOL v8 = v7 > 0x13;
  int v9 = (1 << v7) & 0xB0000;
  if (!v8 && v9 != 0) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v16 = *(_DWORD *)(*(void *)this + 8);
  if ((v16 & 0xFE) == 0x12) {
    unsigned int v16 = *(_DWORD *)(**(void **)(*(void *)this + 16) + 8);
  }
  if (v16 < 0x100) {
    goto LABEL_18;
  }
  unsigned int v17 = v16 >> 8;
  uint64_t v18 = *((unsigned int *)a5 + 60);
  uint64_t v19 = *((void *)a5 + 29);
  if (v18)
  {
    uint64_t v19 = *((void *)a5 + 29);
    unint64_t v20 = *((unsigned int *)a5 + 60);
    do
    {
      unint64_t v21 = v20 >> 1;
      uint64_t v22 = v19 + 16 * (v20 >> 1);
      unsigned int v23 = *(_DWORD *)(v22 + 8);
      uint64_t v24 = v22 + 16;
      v20 += ~(v20 >> 1);
      if (v23 < v17) {
        uint64_t v19 = v24;
      }
      else {
        unint64_t v20 = v21;
      }
    }
    while (v20);
  }
  if (v19 == *((void *)a5 + 29) + 16 * v18 || *(_DWORD *)(v19 + 8) != v17) {
LABEL_18:
  }
    uint64_t v19 = *((void *)a5 + 29);
  unsigned int v41 = *(_DWORD *)(v19 + 12);
  if (v41 > 0x40) {
    operator new[]();
  }
  unint64_t v40 = 0;
  unsigned int v26 = llvm::Value::stripAndAccumulateConstantOffsets(this, a5, (llvm::APInt *)&v40, 1, 0, 0, a7);
  if (v41 > 0x40)
  {
    uint64_t v27 = *v40;
    MEMORY[0x1D25D9CB0]();
  }
  else
  {
    uint64_t v27 = (uint64_t)((void)v40 << -(uint64_t)v41) >> -(uint64_t)v41;
  }
  unsigned int v28 = *(_DWORD *)(*(void *)a2 + 8);
  if ((v28 & 0xFE) == 0x12) {
    unsigned int v28 = *(_DWORD *)(**(void **)(*(void *)a2 + 16) + 8);
  }
  if (v28 < 0x100) {
    goto LABEL_33;
  }
  unsigned int v29 = v28 >> 8;
  uint64_t v30 = *((unsigned int *)a5 + 60);
  uint64_t v31 = *((void *)a5 + 29);
  if (v30)
  {
    uint64_t v31 = *((void *)a5 + 29);
    unint64_t v32 = *((unsigned int *)a5 + 60);
    do
    {
      unint64_t v33 = v32 >> 1;
      uint64_t v34 = v31 + 16 * (v32 >> 1);
      unsigned int v35 = *(_DWORD *)(v34 + 8);
      uint64_t v36 = v34 + 16;
      v32 += ~(v32 >> 1);
      if (v35 < v29) {
        uint64_t v31 = v36;
      }
      else {
        unint64_t v32 = v33;
      }
    }
    while (v32);
  }
  if (v31 == *((void *)a5 + 29) + 16 * v30 || *(_DWORD *)(v31 + 8) != v29) {
LABEL_33:
  }
    uint64_t v31 = *((void *)a5 + 29);
  unsigned int v41 = *(_DWORD *)(v31 + 12);
  if (v41 > 0x40) {
    operator new[]();
  }
  unint64_t v40 = 0;
  uint64_t v37 = llvm::Value::stripAndAccumulateConstantOffsets(a2, a5, (llvm::APInt *)&v40, 1, 0, 0, v25);
  if (v41 > 0x40)
  {
    uint64_t v38 = *v40;
    MEMORY[0x1D25D9CB0]();
  }
  else
  {
    uint64_t v38 = (uint64_t)((void)v40 << -(uint64_t)v41) >> -(uint64_t)v41;
  }
  if (v26 != v37) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v39 = sub_1CB83544C((uint64_t)a5, a1);
  uint64_t result = 0xFFFFFFFFLL;
  if (((v39 | a4) & 7) == 0
    && v38 >= v27
    && (uint64_t)(v27 + (a4 >> 3)) >= (uint64_t)(v38 + (v39 >> 3)))
  {
    return (v38 - v27);
  }
  return result;
}

uint64_t llvm::VNCoercion::analyzeLoadFromClobberingLoad(llvm::Value ***this, llvm::Type *a2, llvm::Value *a3, llvm::LoadInst *a4, const llvm::DataLayout *a5)
{
  if ((*(_DWORD *)(*(void *)a3 + 8) & 0xFE) == 0x10
    || !llvm::VNCoercion::canCoerceMustAliasedValueToLoad(a3, this, a4, a4))
  {
    return 0xFFFFFFFFLL;
  }
  int v9 = (llvm::GlobalValue *)*((void *)a3 - 4);
  unint64_t v10 = sub_1CB83544C((uint64_t)a4, *(void *)a3);
  uint64_t result = sub_1CD269798((uint64_t)this, a2, v9, v10, a4, v11, v12);
  if (result != -1) {
    return result;
  }
  unsigned int v15 = *(_DWORD *)(*(void *)a2 + 8);
  if ((v15 & 0xFE) == 0x12) {
    unsigned int v15 = *(_DWORD *)(**(void **)(*(void *)a2 + 16) + 8);
  }
  if (v15 < 0x100) {
    goto LABEL_15;
  }
  unsigned int v16 = v15 >> 8;
  uint64_t v17 = *((unsigned int *)a4 + 60);
  uint64_t v18 = *((void *)a4 + 29);
  if (v17)
  {
    uint64_t v18 = *((void *)a4 + 29);
    unint64_t v19 = *((unsigned int *)a4 + 60);
    do
    {
      unint64_t v20 = v19 >> 1;
      uint64_t v21 = v18 + 16 * (v19 >> 1);
      unsigned int v22 = *(_DWORD *)(v21 + 8);
      uint64_t v23 = v21 + 16;
      v19 += ~(v19 >> 1);
      if (v22 < v16) {
        uint64_t v18 = v23;
      }
      else {
        unint64_t v19 = v20;
      }
    }
    while (v19);
  }
  if (v18 == *((void *)a4 + 29) + 16 * v17 || *(_DWORD *)(v18 + 8) != v16) {
LABEL_15:
  }
    uint64_t v18 = *((void *)a4 + 29);
  unsigned int v63 = *(_DWORD *)(v18 + 12);
  if (v63 > 0x40) {
    operator new[]();
  }
  int v62 = 0;
  uint64_t v24 = llvm::Value::stripAndAccumulateConstantOffsets(a2, a4, (llvm::APInt *)&v62, 1, 0, 0, v14);
  if (v63 > 0x40)
  {
    uint64_t v25 = *v62;
    MEMORY[0x1D25D9CB0]();
  }
  else
  {
    uint64_t v25 = (uint64_t)((void)v62 << -(uint64_t)v63) >> -(uint64_t)v63;
  }
  uint64_t v26 = sub_1CB83544C((uint64_t)a4, (uint64_t)this);
  if (*(unsigned char *)(*(void *)a3 + 8) != 13) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v28 = v26;
  int v29 = *((unsigned __int8 *)a3 + 16);
  if (v29 == 60 || v29 == 61)
  {
    __int16 v30 = *((_WORD *)a3 + 9);
    if (v30 & 0x380) != 0 || (v30) {
      return 0xFFFFFFFFLL;
    }
  }
  else if (v29 - 63) < 3 || (*((_WORD *)a3 + 9))
  {
    return 0xFFFFFFFFLL;
  }
  uint64_t v31 = *(void *)(*((void *)a3 + 5) + 56);
  uint64_t v32 = *(void *)(v31 + 112);
  if (v32 && (*(unsigned char *)(v32 + 18) & 0x40) != 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v33 = *(void *)(v31 + 40);
  uint64_t v34 = (llvm::GlobalValue *)*((void *)a3 - 4);
  unsigned int v35 = *(_DWORD *)(*(void *)v34 + 8);
  if ((v35 & 0xFE) == 0x12) {
    unsigned int v35 = *(_DWORD *)(**(void **)(*(void *)v34 + 16) + 8);
  }
  if (v35 < 0x100) {
    goto LABEL_36;
  }
  unsigned int v36 = v35 >> 8;
  uint64_t v37 = *(unsigned int *)(v33 + 512);
  uint64_t v38 = *(void *)(v33 + 504);
  if (v37)
  {
    uint64_t v38 = *(void *)(v33 + 504);
    unint64_t v39 = *(unsigned int *)(v33 + 512);
    do
    {
      unint64_t v40 = v39 >> 1;
      uint64_t v41 = v38 + 16 * (v39 >> 1);
      unsigned int v42 = *(_DWORD *)(v41 + 8);
      uint64_t v43 = v41 + 16;
      v39 += ~(v39 >> 1);
      if (v42 < v36) {
        uint64_t v38 = v43;
      }
      else {
        unint64_t v39 = v40;
      }
    }
    while (v39);
  }
  if (v38 == *(void *)(v33 + 504) + 16 * v37 || *(_DWORD *)(v38 + 8) != v36) {
LABEL_36:
  }
    uint64_t v38 = *(void *)(v33 + 504);
  unsigned int v63 = *(_DWORD *)(v38 + 12);
  if (v63 > 0x40) {
    operator new[]();
  }
  int v62 = 0;
  uint64_t v44 = llvm::Value::stripAndAccumulateConstantOffsets(v34, (llvm::DataLayout *)(v33 + 272), (llvm::APInt *)&v62, 1, 0, 0, v27);
  if (v63 > 0x40)
  {
    uint64_t v45 = *v62;
    unsigned int v61 = v44;
    MEMORY[0x1D25D9CB0]();
    uint64_t v44 = v61;
  }
  else
  {
    uint64_t v45 = (uint64_t)((void)v62 << -(uint64_t)v63) >> -(uint64_t)v63;
  }
  uint64_t result = 0xFFFFFFFFLL;
  if (v44 == v24 && v45 <= v25)
  {
    unint64_t v46 = (unint64_t)(v28 + 7) >> 3;
    uint64_t v47 = 1 << ((unint64_t)*((unsigned __int16 *)a3 + 9) >> 1);
    int64_t v48 = v25 + v46;
    if (v45 + v47 >= v48)
    {
      unint64_t PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)a3);
      if (v49 == 1) {
      unint64_t v53 = (PrimitiveSizeInBits >> 3) | ((unint64_t)(PrimitiveSizeInBits >> 3) >> 1);
      }
      unint64_t v54 = v53 | (v53 >> 2) | ((v53 | (v53 >> 2)) >> 4);
      unsigned int v55 = (((v54 | (v54 >> 8)) >> 16) | v54 | (v54 >> 8)) + 1;
      if (v55 <= v47 && *(void *)(v33 + 312))
      {
        while (1)
        {
          unint64_t v56 = 8 * v55;
          uint64_t v57 = *(void *)(v33 + 312);
          for (uint64_t i = *(unsigned __int8 **)(v33 + 304); v56 > *i; ++i)
          {
            uint64_t result = 0xFFFFFFFFLL;
            if (!--v57) {
              return result;
            }
          }
          int64_t v59 = v45 + v55;
          if (v59 > v48)
          {
            uint64_t v60 = *(void *)(*(void *)(*((void *)a3 + 5) + 56) + 112);
            if (v60)
            {
              if ((*(unsigned char *)(v60 + 18) & 0xC) != 0) {
                break;
              }
            }
          }
          if (v59 >= v48)
          {
            if (!v55) {
              return 0xFFFFFFFFLL;
            }
            return sub_1CD269798((uint64_t)this, a2, v9, v56, a4, v50, v51);
          }
          v55 *= 2;
          uint64_t result = 0xFFFFFFFFLL;
          if (v55 > v47) {
            return result;
          }
        }
      }
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t llvm::VNCoercion::analyzeLoadFromClobberingMemInst(uint64_t a1, llvm::GlobalValue *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF);
  uint64_t v5 = *(void *)(v4 + 64);
  if (v5) {
    BOOL v6 = *(unsigned char *)(v5 + 16) == 16;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v12 = (void *)(v5 + 24);
  if (*(_DWORD *)(v5 + 32) >= 0x41u) {
    uint64_t v12 = (void *)*v12;
  }
  unint64_t v13 = 8 * *v12;
  if (*(_DWORD *)(*(void *)(a3 - 32) + 36) == 199)
  {
    uint64_t v14 = a1;
    if ((*(_DWORD *)(a1 + 8) & 0xFE) == 0x12) {
      uint64_t v14 = **(void **)(a1 + 16);
    }
    if (sub_1CBFB72C8(a4, v14))
    {
      uint64_t v15 = *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32);
      if (v15) {
        BOOL v16 = *(unsigned char *)(v15 + 16) == 16;
      }
      else {
        BOOL v16 = 0;
      }
      if (!v16) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v17 = *(unsigned int *)(v15 + 32);
      if (v17 > 0x40)
      {
        int v43 = 0;
        int64_t v44 = (unint64_t)(v17 + 63) >> 6;
        do
        {
          BOOL v19 = v44-- < 1;
          if (v19) {
            break;
          }
          unint64_t v45 = *(void *)(*(void *)(v15 + 24) + 8 * v44);
          v43 += __clz(v45);
        }
        while (!v45);
        int v46 = v17 | 0xFFFFFFC0;
        if ((v17 & 0x3F) == 0) {
          int v46 = 0;
        }
        if (v43 + v46 != v17) {
          return 0xFFFFFFFFLL;
        }
      }
      else if (*(void *)(v15 + 24))
      {
        return 0xFFFFFFFFLL;
      }
    }
    uint64_t v47 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF)));
    return sub_1CD269798(a1, a2, v47, v13, (llvm::DataLayout *)a4, v48, v49);
  }
  else
  {
    uint64_t v18 = (unsigned __int8 *)llvm::Value::stripPointerCasts(*(llvm::Value **)(v4 + 32));
    if (v18) {
      BOOL v19 = v18[16] > 0x14u;
    }
    else {
      BOOL v19 = 1;
    }
    if (v19) {
      return 0xFFFFFFFFLL;
    }
    unint64_t v20 = (llvm::GlobalValue *)v18;
    UnderlyingObject = llvm::getUnderlyingObject((llvm *)v18, (const llvm::Value *)6);
    if (!UnderlyingObject || *((unsigned char *)UnderlyingObject + 16) != 3) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v23 = UnderlyingObject;
    if ((*((unsigned char *)UnderlyingObject + 80) & 1) == 0
      || (*((_DWORD *)UnderlyingObject + 5) & 0x7FFFFFF) == 0
      || (llvm::GlobalValue::isInterposable(UnderlyingObject) & 1) != 0
      || (*((unsigned char *)v23 + 80) & 2) != 0)
    {
      return 0xFFFFFFFFLL;
    }
    uint64_t v24 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF)));
    uint64_t result = sub_1CD269798(a1, a2, v24, v13, (llvm::DataLayout *)a4, v25, v26);
    if (result != -1)
    {
      unsigned int v30 = result;
      unsigned int v31 = *(_DWORD *)(*(void *)v20 + 8);
      if ((v31 & 0xFE) == 0x12) {
        unsigned int v31 = *(_DWORD *)(**(void **)(*(void *)v20 + 16) + 8);
      }
      if (v31 < 0x100) {
        goto LABEL_46;
      }
      unsigned int v32 = v31 >> 8;
      uint64_t v33 = *(unsigned int *)(a4 + 240);
      uint64_t v34 = *(void *)(a4 + 232);
      if (v33)
      {
        uint64_t v34 = *(void *)(a4 + 232);
        unint64_t v35 = *(unsigned int *)(a4 + 240);
        do
        {
          unint64_t v36 = v35 >> 1;
          uint64_t v37 = v34 + 16 * (v35 >> 1);
          unsigned int v38 = *(_DWORD *)(v37 + 8);
          uint64_t v39 = v37 + 16;
          v35 += ~(v35 >> 1);
          if (v38 < v32) {
            uint64_t v34 = v39;
          }
          else {
            unint64_t v35 = v36;
          }
        }
        while (v35);
      }
      if (v34 == *(void *)(a4 + 232) + 16 * v33 || *(_DWORD *)(v34 + 8) != v32) {
LABEL_46:
      }
        uint64_t v34 = *(void *)(a4 + 232);
      unsigned int v40 = *(_DWORD *)(v34 + 12);
      unsigned int v51 = v40;
      if (v40 > 0x40) {
        operator new[]();
      }
      unint64_t v41 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v40;
      if (!v40) {
        unint64_t v41 = 0;
      }
      unint64_t v50 = v41 & (int)result;
      unsigned int v42 = llvm::ConstantFoldLoadFromConstPtr(v20, a1, (llvm::APInt *)&v50, (llvm::DataLayout *)a4, v27, v28, v29);
      if (v51 >= 0x41 && v50) {
        MEMORY[0x1D25D9CB0](v50, 0x1000C8000313F17);
      }
      if (v42) {
        return v30;
      }
      else {
        return 0xFFFFFFFFLL;
      }
    }
  }
  return result;
}

llvm::Value *llvm::VNCoercion::getStoreValueForLoad(llvm::VNCoercion *this, llvm::Value *a2, uint64_t a3, llvm::Type *a4, llvm::Instruction *a5, const llvm::DataLayout *a6)
{
  int v8 = (int)a2;
  uint64_t v10 = 0;
  v76[1] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = **(void **)a4;
  unsigned int v61 = v63;
  uint64_t v62 = 0x200000000;
  uint64_t v66 = v11;
  unint64_t v67 = &v75;
  uint64_t v68 = v76;
  uint64_t v69 = 0;
  int v70 = 0;
  __int16 v71 = 512;
  char v72 = 7;
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  uint64_t v75 = &unk_1F2616E88;
  v76[0] = &unk_1F2617008;
  uint64_t v12 = (unsigned __int8 *)*((void *)a4 + 6);
  uint64_t v64 = *((void *)a4 + 5);
  uint64_t v65 = (char *)a4 + 24;
  v57[0] = v12;
  if (v12)
  {
    llvm::MetadataTracking::track((uint64_t)v57, v12, 2);
    uint64_t v10 = v57[0];
  }
  sub_1CB8461A4((uint64_t)&v61, 0, v10);
  if (v57[0])
  {
    int v44 = *(unsigned __int8 *)v57[0];
    if ((v44 - 4) > 0x1E)
    {
      if ((v44 - 3) >= 0xFFFFFFFE) {
        uint64_t v49 = v57[0];
      }
      else {
        uint64_t v49 = 0;
      }
      if ((v44 - 3) < 0xFFFFFFFE)
      {
        if (v44 == 3) {
          *(void *)(v57[0] + 8) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v46 = v49 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v57[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v57[0] + 12)) {
        goto LABEL_4;
      }
      uint64_t v45 = *(void *)(v57[0] + 16);
      if ((v45 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v46 = v45 & 0xFFFFFFFFFFFFFFF8;
      if (!v46) {
        goto LABEL_4;
      }
    }
    v59[0] = (const char *)v57;
    sub_1CC5FA668(v46 + 16, v59);
  }
LABEL_4:
  unint64_t v56 = **(llvm::IntegerType ***)this;
  if (*(_DWORD *)(*(void *)this + 8) != 15
    || *(_DWORD *)(a3 + 8) != 15
    || (*(_DWORD *)(a3 + 8) ^ *(_DWORD *)(*(void *)this + 8)) >= 0x100)
  {
    uint64_t v13 = sub_1CB83544C((uint64_t)a5, *(void *)this);
    int v14 = v13 + 7;
    unint64_t v15 = (unint64_t)(v13 + 7) >> 3;
    uint64_t v16 = sub_1CB83544C((uint64_t)a5, a3);
    int v17 = v16 + 7;
    unint64_t v18 = (unint64_t)(v16 + 7) >> 3;
    uint64_t v19 = *(void *)this;
    int v20 = *(_DWORD *)(*(void *)this + 8);
    if ((v20 & 0xFE) == 0x12)
    {
      unsigned int v21 = *(_DWORD *)(**(void **)(v19 + 16) + 8);
      int v22 = v21;
    }
    else
    {
      int v22 = *(_DWORD *)(*(void *)this + 8);
      unsigned int v21 = *(_DWORD *)(*(void *)this + 8);
    }
    if (v22 == 15)
    {
      if (v21 < 0x100) {
        goto LABEL_20;
      }
      unsigned int v23 = v21 >> 8;
      uint64_t v24 = *((unsigned int *)a5 + 60);
      uint64_t v25 = *((void *)a5 + 29);
      if (v24)
      {
        uint64_t v25 = *((void *)a5 + 29);
        unint64_t v26 = *((unsigned int *)a5 + 60);
        do
        {
          unint64_t v27 = v26 >> 1;
          uint64_t v28 = v25 + 16 * (v26 >> 1);
          unsigned int v29 = *(_DWORD *)(v28 + 8);
          uint64_t v30 = v28 + 16;
          v26 += ~(v26 >> 1);
          if (v29 < v23) {
            uint64_t v25 = v30;
          }
          else {
            unint64_t v26 = v27;
          }
        }
        while (v26);
      }
      if (v25 == *((void *)a5 + 29) + 16 * v24 || *(_DWORD *)(v25 + 8) != v23) {
LABEL_20:
      }
        uint64_t v25 = *((void *)a5 + 29);
      unsigned int v31 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)v19, (llvm::LLVMContext *)*(unsigned int *)(v25 + 4));
      uint64_t v32 = (uint64_t)v31;
      if ((*(_DWORD *)(v19 + 8) & 0xFE) == 0x12)
      {
        llvm::VectorType::get(v31, (llvm::Type *)(*(unsigned int *)(v19 + 32) | ((unint64_t)(*(_DWORD *)(v19 + 8) == 19) << 32)));
        uint64_t v32 = v50;
      }
      __int16 v58 = 257;
      if (*(void *)this != v32)
      {
        if (*((unsigned __int8 *)this + 16) <= 0x14u)
        {
          this = (llvm::VNCoercion *)(*((uint64_t (**)(void **, uint64_t, llvm::VNCoercion *, uint64_t))*v67 + 28))(v67, 47, this, v32);
          if (this) {
            BOOL v34 = *((unsigned __int8 *)this + 16) >= 0x1Cu;
          }
          else {
            BOOL v34 = 0;
          }
          if (v34)
          {
            (*(void (**)(void *, llvm::VNCoercion *, void *, uint64_t, char *))(*v68 + 16))(v68, this, v57, v64, v65);
            if (v62)
            {
              unsigned int v51 = (llvm::MDNode **)v61;
              unsigned int v55 = (llvm::MDNode **)((char *)v61 + 16 * v62);
              do
              {
                llvm::Instruction::setMetadata(this, *(_DWORD *)v51, v51[1]);
                v51 += 2;
              }
              while (v51 != v55);
            }
          }
        }
        else
        {
          __int16 v60 = 257;
          this = llvm::CastInst::Create(47, (uint64_t)this, v32, v59, 0);
          (*(void (**)(void *, llvm::VNCoercion *, void *, uint64_t, char *))(*v68 + 16))(v68, this, v57, v64, v65);
          if (v62)
          {
            uint64_t v33 = (llvm::MDNode **)v61;
            unint64_t v54 = (llvm::MDNode **)((char *)v61 + 16 * v62);
            do
            {
              llvm::Instruction::setMetadata(this, *(_DWORD *)v33, v33[1]);
              v33 += 2;
            }
            while (v33 != v54);
          }
        }
      }
      LOBYTE(v20) = *(unsigned char *)(*(void *)this + 8);
    }
    if (v20 != 13)
    {
      uint64_t v35 = llvm::IntegerType::get(v56, (llvm::LLVMContext *)(v14 & 0xFFFFFFF8));
      __int16 v58 = 257;
      if (*(void *)this != v35)
      {
        if (*((unsigned __int8 *)this + 16) <= 0x14u)
        {
          this = (llvm::VNCoercion *)(*((uint64_t (**)(void **, uint64_t, llvm::VNCoercion *, uint64_t))*v67 + 28))(v67, 49, this, v35);
          if (this) {
            BOOL v38 = *((unsigned __int8 *)this + 16) >= 0x1Cu;
          }
          else {
            BOOL v38 = 0;
          }
          if (v38)
          {
            (*(void (**)(void *, llvm::VNCoercion *, void *, uint64_t, char *))(*v68 + 16))(v68, this, v57, v64, v65);
            if (v62)
            {
              uint64_t v52 = (llvm::MDNode **)v61;
              unint64_t v53 = (llvm::MDNode **)((char *)v61 + 16 * v62);
              do
              {
                llvm::Instruction::setMetadata(this, *(_DWORD *)v52, v52[1]);
                v52 += 2;
              }
              while (v52 != v53);
            }
          }
        }
        else
        {
          __int16 v60 = 257;
          this = llvm::CastInst::Create(49, (uint64_t)this, v35, v59, 0);
          (*(void (**)(void *, llvm::VNCoercion *, void *, uint64_t, char *))(*v68 + 16))(v68, this, v57, v64, v65);
          if (v62)
          {
            unint64_t v36 = (llvm::MDNode **)v61;
            uint64_t v37 = (llvm::MDNode **)((char *)v61 + 16 * v62);
            do
            {
              llvm::Instruction::setMetadata(this, *(_DWORD *)v36, v36[1]);
              v36 += 2;
            }
            while (v36 != v37);
          }
        }
      }
    }
    if (*(unsigned char *)a5) {
      int v39 = v15 - (v18 + v8);
    }
    else {
      int v39 = v8;
    }
    unint64_t v40 = (8 * v39);
    if (v40)
    {
      unint64_t v41 = llvm::ConstantInt::get(*(llvm::ConstantInt **)this, v40, 0);
      __int16 v60 = 257;
      this = sub_1CC2429AC((uint64_t)&v61, (uint64_t)this, (uint64_t)v41, (uint64_t)v59, 0);
    }
    if (v18 != v15)
    {
      uint64_t v47 = (llvm::Type ***)llvm::IntegerType::get(v56, (llvm::LLVMContext *)(v17 & 0xFFFFFFF8));
      __int16 v60 = 257;
      this = sub_1CD5AB4EC((uint64_t)&v61, this, v47, (uint64_t)v59, v48);
    }
  }
  unsigned int v42 = sub_1CD26AA70((uint64_t)this, a3, (uint64_t)&v61, (uint64_t)a5);
  if (v61 != v63) {
    free(v61);
  }
  return v42;
}

llvm::Value *sub_1CD26AA70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7 = (llvm::Value *)a1;
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (*(unsigned __int8 *)(a1 + 16) <= 0x14u)
    {
      uint64_t v121 = 1;
      for (uint64_t i = 8; i != 72; i += 16)
        *(uint64_t *)((char *)&v121 + i) = -4096;
      unsigned int v7 = sub_1CBFB8694(a1, (llvm::DataLayout *)a4, 0, (uint64_t)&v121);
      if ((v121 & 1) == 0) {
        MEMORY[0x1D25D9CD0](v122, 8);
      }
    }
  }
  uint64_t v9 = *(void *)v7;
  uint64_t v10 = (llvm::LLVMContext *)sub_1CB83544C(a4, *(void *)v7);
  uint64_t v11 = sub_1CB83544C(a4, a2);
  unsigned int v12 = *(_DWORD *)(v9 + 8);
  int v13 = v12 & 0xFE;
  if (v10 == (llvm::LLVMContext *)v11)
  {
    int v14 = *(_DWORD *)(v9 + 8);
    if (v13 == 18) {
      LOBYTE(v14) = *(unsigned char *)(**(void **)(v9 + 16) + 8);
    }
    if (v14 == 15
      && ((*(_DWORD *)(a2 + 8) & 0xFE) != 0x12
        ? (int v15 = *(_DWORD *)(a2 + 8))
        : (int v15 = *(unsigned __int8 *)(**(void **)(a2 + 16) + 8)),
          v15 == 15))
    {
      __int16 v120 = 257;
      if (*(void *)v7 != a2)
      {
        if (*((unsigned __int8 *)v7 + 16) <= 0x14u)
        {
          unsigned int v7 = (llvm::Value *)(*(uint64_t (**)(void, uint64_t, llvm::Value *, uint64_t))(**(void **)(a3 + 72)
                                                                                                 + 224))(*(void *)(a3 + 72), 49, v7, a2);
          if (v7) {
            BOOL v56 = *((unsigned __int8 *)v7 + 16) >= 0x1Cu;
          }
          else {
            BOOL v56 = 0;
          }
          if (v56)
          {
            (*(void (**)(void, llvm::Value *, unsigned char *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v7, v119, *(void *)(a3 + 48), *(void *)(a3 + 56));
            uint64_t v106 = *(unsigned int *)(a3 + 8);
            if (v106)
            {
              uint64_t v107 = *(void *)a3;
              uint64_t v108 = v107 + 16 * v106;
              do
              {
                llvm::Instruction::setMetadata(v7, *(_DWORD *)v107, *(llvm::MDNode **)(v107 + 8));
                v107 += 16;
              }
              while (v107 != v108);
            }
          }
        }
        else
        {
          __int16 v123 = 257;
          unsigned int v7 = llvm::CastInst::Create(49, (uint64_t)v7, a2, (const char **)&v121, 0);
          (*(void (**)(void, llvm::Value *, unsigned char *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v7, v119, *(void *)(a3 + 48), *(void *)(a3 + 56));
          uint64_t v16 = *(unsigned int *)(a3 + 8);
          if (v16)
          {
            uint64_t v17 = *(void *)a3;
            uint64_t v18 = v17 + 16 * v16;
            do
            {
              llvm::Instruction::setMetadata(v7, *(_DWORD *)v17, *(llvm::MDNode **)(v17 + 8));
              v17 += 16;
            }
            while (v17 != v18);
          }
        }
      }
    }
    else
    {
      if (v13 == 18) {
        unsigned int v12 = *(_DWORD *)(**(void **)(v9 + 16) + 8);
      }
      if (v12 == 15)
      {
        if (v12 < 0x100) {
          goto LABEL_33;
        }
        unsigned int v19 = v12 >> 8;
        uint64_t v20 = *(unsigned int *)(a4 + 240);
        uint64_t v21 = *(void *)(a4 + 232);
        if (v20)
        {
          uint64_t v21 = *(void *)(a4 + 232);
          unint64_t v22 = *(unsigned int *)(a4 + 240);
          do
          {
            unint64_t v23 = v22 >> 1;
            uint64_t v24 = v21 + 16 * (v22 >> 1);
            unsigned int v25 = *(_DWORD *)(v24 + 8);
            uint64_t v26 = v24 + 16;
            v22 += ~(v22 >> 1);
            if (v25 < v19) {
              uint64_t v21 = v26;
            }
            else {
              unint64_t v22 = v23;
            }
          }
          while (v22);
        }
        if (v21 == *(void *)(a4 + 232) + 16 * v20 || *(_DWORD *)(v21 + 8) != v19) {
LABEL_33:
        }
          uint64_t v21 = *(void *)(a4 + 232);
        unint64_t v27 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)v9, (llvm::LLVMContext *)*(unsigned int *)(v21 + 4));
        uint64_t v28 = (uint64_t)v27;
        if ((*(_DWORD *)(v9 + 8) & 0xFE) == 0x12)
        {
          llvm::VectorType::get(v27, (llvm::Type *)(*(unsigned int *)(v9 + 32) | ((unint64_t)(*(_DWORD *)(v9 + 8) == 19) << 32)));
          uint64_t v28 = v98;
        }
        __int16 v120 = 257;
        if (*(void *)v7 != v28)
        {
          if (*((unsigned __int8 *)v7 + 16) <= 0x14u)
          {
            unsigned int v7 = (llvm::Value *)(*(uint64_t (**)(void, uint64_t, llvm::Value *, uint64_t))(**(void **)(a3 + 72) + 224))(*(void *)(a3 + 72), 47, v7, v28);
            if (v7) {
              BOOL v32 = *((unsigned __int8 *)v7 + 16) >= 0x1Cu;
            }
            else {
              BOOL v32 = 0;
            }
            if (v32)
            {
              (*(void (**)(void, llvm::Value *, unsigned char *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v7, v119, *(void *)(a3 + 48), *(void *)(a3 + 56));
              uint64_t v103 = *(unsigned int *)(a3 + 8);
              if (v103)
              {
                uint64_t v104 = *(void *)a3;
                uint64_t v105 = *(void *)a3 + 16 * v103;
                do
                {
                  llvm::Instruction::setMetadata(v7, *(_DWORD *)v104, *(llvm::MDNode **)(v104 + 8));
                  v104 += 16;
                }
                while (v104 != v105);
              }
            }
          }
          else
          {
            __int16 v123 = 257;
            unsigned int v7 = llvm::CastInst::Create(47, (uint64_t)v7, v28, (const char **)&v121, 0);
            (*(void (**)(void, llvm::Value *, unsigned char *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v7, v119, *(void *)(a3 + 48), *(void *)(a3 + 56));
            uint64_t v29 = *(unsigned int *)(a3 + 8);
            if (v29)
            {
              uint64_t v30 = *(void *)a3;
              uint64_t v31 = *(void *)a3 + 16 * v29;
              do
              {
                llvm::Instruction::setMetadata(v7, *(_DWORD *)v30, *(llvm::MDNode **)(v30 + 8));
                v30 += 16;
              }
              while (v30 != v31);
            }
          }
        }
      }
      else
      {
        uint64_t v28 = v9;
      }
      unsigned int v33 = *(_DWORD *)(a2 + 8);
      if ((v33 & 0xFE) == 0x12) {
        unsigned int v33 = *(_DWORD *)(**(void **)(a2 + 16) + 8);
      }
      uint64_t v34 = a2;
      if (v33 == 15)
      {
        if (v33 < 0x100) {
          goto LABEL_59;
        }
        unsigned int v35 = v33 >> 8;
        uint64_t v36 = *(unsigned int *)(a4 + 240);
        uint64_t v37 = *(void *)(a4 + 232);
        if (v36)
        {
          uint64_t v37 = *(void *)(a4 + 232);
          unint64_t v38 = *(unsigned int *)(a4 + 240);
          do
          {
            unint64_t v39 = v38 >> 1;
            uint64_t v40 = v37 + 16 * (v38 >> 1);
            unsigned int v41 = *(_DWORD *)(v40 + 8);
            uint64_t v42 = v40 + 16;
            v38 += ~(v38 >> 1);
            if (v41 < v35) {
              uint64_t v37 = v42;
            }
            else {
              unint64_t v38 = v39;
            }
          }
          while (v38);
        }
        if (v37 == *(void *)(a4 + 232) + 16 * v36 || *(_DWORD *)(v37 + 8) != v35) {
LABEL_59:
        }
          uint64_t v37 = *(void *)(a4 + 232);
        int v43 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)a2, (llvm::LLVMContext *)*(unsigned int *)(v37 + 4));
        uint64_t v34 = (uint64_t)v43;
        if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
        {
          llvm::VectorType::get(v43, (llvm::Type *)(*(unsigned int *)(a2 + 32) | ((unint64_t)(*(_DWORD *)(a2 + 8) == 19) << 32)));
          uint64_t v34 = v99;
        }
      }
      if (v28 != v34)
      {
        __int16 v120 = 257;
        if (*(void *)v7 != v34)
        {
          if (*((unsigned __int8 *)v7 + 16) <= 0x14u)
          {
            unsigned int v7 = (llvm::Value *)(*(uint64_t (**)(void, uint64_t, llvm::Value *, uint64_t))(**(void **)(a3 + 72) + 224))(*(void *)(a3 + 72), 49, v7, v34);
            if (v7) {
              BOOL v47 = *((unsigned __int8 *)v7 + 16) >= 0x1Cu;
            }
            else {
              BOOL v47 = 0;
            }
            if (v47)
            {
              (*(void (**)(void, llvm::Value *, unsigned char *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v7, v119, *(void *)(a3 + 48), *(void *)(a3 + 56));
              uint64_t v100 = *(unsigned int *)(a3 + 8);
              if (v100)
              {
                uint64_t v101 = *(void *)a3;
                uint64_t v102 = *(void *)a3 + 16 * v100;
                do
                {
                  llvm::Instruction::setMetadata(v7, *(_DWORD *)v101, *(llvm::MDNode **)(v101 + 8));
                  v101 += 16;
                }
                while (v101 != v102);
              }
            }
          }
          else
          {
            __int16 v123 = 257;
            unsigned int v7 = llvm::CastInst::Create(49, (uint64_t)v7, v34, (const char **)&v121, 0);
            (*(void (**)(void, llvm::Value *, unsigned char *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v7, v119, *(void *)(a3 + 48), *(void *)(a3 + 56));
            uint64_t v44 = *(unsigned int *)(a3 + 8);
            if (v44)
            {
              uint64_t v45 = *(void *)a3;
              uint64_t v46 = *(void *)a3 + 16 * v44;
              do
              {
                llvm::Instruction::setMetadata(v7, *(_DWORD *)v45, *(llvm::MDNode **)(v45 + 8));
                v45 += 16;
              }
              while (v45 != v46);
            }
          }
        }
      }
      if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12) {
        int v48 = *(unsigned __int8 *)(**(void **)(a2 + 16) + 8);
      }
      else {
        int v48 = *(_DWORD *)(a2 + 8);
      }
      if (v48 == 15)
      {
        __int16 v120 = 257;
        if (*(void *)v7 != a2)
        {
          if (*((unsigned __int8 *)v7 + 16) <= 0x14u)
          {
            unsigned int v7 = (llvm::Value *)(*(uint64_t (**)(void, uint64_t, llvm::Value *, uint64_t))(**(void **)(a3 + 72) + 224))(*(void *)(a3 + 72), 48, v7, a2);
            if (v7) {
              BOOL v52 = *((unsigned __int8 *)v7 + 16) >= 0x1Cu;
            }
            else {
              BOOL v52 = 0;
            }
            if (v52)
            {
              (*(void (**)(void, llvm::Value *, unsigned char *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v7, v119, *(void *)(a3 + 48), *(void *)(a3 + 56));
              uint64_t v53 = *(unsigned int *)(a3 + 8);
              if (v53)
              {
                uint64_t v54 = *(void *)a3;
                uint64_t v55 = v54 + 16 * v53;
                do
                {
                  llvm::Instruction::setMetadata(v7, *(_DWORD *)v54, *(llvm::MDNode **)(v54 + 8));
                  v54 += 16;
                }
                while (v54 != v55);
              }
            }
          }
          else
          {
            __int16 v123 = 257;
            unsigned int v7 = llvm::CastInst::Create(48, (uint64_t)v7, a2, (const char **)&v121, 0);
            (*(void (**)(void, llvm::Value *, unsigned char *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v7, v119, *(void *)(a3 + 48), *(void *)(a3 + 56));
            uint64_t v49 = *(unsigned int *)(a3 + 8);
            if (v49)
            {
              uint64_t v50 = *(void *)a3;
              uint64_t v51 = v50 + 16 * v49;
              do
              {
                llvm::Instruction::setMetadata(v7, *(_DWORD *)v50, *(llvm::MDNode **)(v50 + 8));
                v50 += 16;
              }
              while (v50 != v51);
            }
          }
        }
      }
    }
    if (v7 && *((unsigned char *)v7 + 16) == 5)
    {
LABEL_98:
      uint64_t v121 = 1;
      for (uint64_t j = 8; j != 72; j += 16)
        *(uint64_t *)((char *)&v121 + j) = -4096;
      unsigned int v7 = sub_1CBFB8694((uint64_t)v7, (llvm::DataLayout *)a4, 0, (uint64_t)&v121);
      if ((v121 & 1) == 0) {
        MEMORY[0x1D25D9CD0](v122, 8);
      }
    }
  }
  else
  {
    int64_t v59 = (llvm::LLVMContext *)v11;
    if (v13 == 18)
    {
      unsigned int v60 = *(_DWORD *)(**(void **)(v9 + 16) + 8);
      int v61 = v60;
    }
    else
    {
      int v61 = *(_DWORD *)(v9 + 8);
      unsigned int v60 = *(_DWORD *)(v9 + 8);
    }
    if (v61 == 15)
    {
      if (v60 < 0x100) {
        goto LABEL_116;
      }
      unsigned int v62 = v60 >> 8;
      uint64_t v63 = *(unsigned int *)(a4 + 240);
      uint64_t v64 = *(void *)(a4 + 232);
      if (v63)
      {
        uint64_t v64 = *(void *)(a4 + 232);
        unint64_t v65 = *(unsigned int *)(a4 + 240);
        do
        {
          unint64_t v66 = v65 >> 1;
          uint64_t v67 = v64 + 16 * (v65 >> 1);
          unsigned int v68 = *(_DWORD *)(v67 + 8);
          uint64_t v69 = v67 + 16;
          v65 += ~(v65 >> 1);
          if (v68 < v62) {
            uint64_t v64 = v69;
          }
          else {
            unint64_t v65 = v66;
          }
        }
        while (v65);
      }
      if (v64 == *(void *)(a4 + 232) + 16 * v63 || *(_DWORD *)(v64 + 8) != v62) {
LABEL_116:
      }
        uint64_t v64 = *(void *)(a4 + 232);
      int v70 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)v9, (llvm::LLVMContext *)*(unsigned int *)(v64 + 4));
      uint64_t v71 = (uint64_t)v70;
      if ((*(_DWORD *)(v9 + 8) & 0xFE) == 0x12)
      {
        llvm::VectorType::get(v70, (llvm::Type *)(*(unsigned int *)(v9 + 32) | ((unint64_t)(*(_DWORD *)(v9 + 8) == 19) << 32)));
        uint64_t v71 = v109;
      }
      __int16 v120 = 257;
      if (*(void *)v7 != v71)
      {
        if (*((unsigned __int8 *)v7 + 16) <= 0x14u)
        {
          unsigned int v7 = (llvm::Value *)(*(uint64_t (**)(void, uint64_t, llvm::Value *, uint64_t))(**(void **)(a3 + 72)
                                                                                                 + 224))(*(void *)(a3 + 72), 47, v7, v71);
          if (v7) {
            BOOL v75 = *((unsigned __int8 *)v7 + 16) >= 0x1Cu;
          }
          else {
            BOOL v75 = 0;
          }
          if (v75)
          {
            (*(void (**)(void, llvm::Value *, unsigned char *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v7, v119, *(void *)(a3 + 48), *(void *)(a3 + 56));
            uint64_t v110 = *(unsigned int *)(a3 + 8);
            if (v110)
            {
              uint64_t v111 = *(void *)a3;
              uint64_t v112 = *(void *)a3 + 16 * v110;
              do
              {
                llvm::Instruction::setMetadata(v7, *(_DWORD *)v111, *(llvm::MDNode **)(v111 + 8));
                v111 += 16;
              }
              while (v111 != v112);
            }
          }
        }
        else
        {
          __int16 v123 = 257;
          unsigned int v7 = llvm::CastInst::Create(47, (uint64_t)v7, v71, (const char **)&v121, 0);
          (*(void (**)(void, llvm::Value *, unsigned char *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v7, v119, *(void *)(a3 + 48), *(void *)(a3 + 56));
          uint64_t v72 = *(unsigned int *)(a3 + 8);
          if (v72)
          {
            uint64_t v73 = *(void *)a3;
            uint64_t v74 = *(void *)a3 + 16 * v72;
            do
            {
              llvm::Instruction::setMetadata(v7, *(_DWORD *)v73, *(llvm::MDNode **)(v73 + 8));
              v73 += 16;
            }
            while (v73 != v74);
          }
        }
      }
      LOBYTE(v12) = *(unsigned char *)(v71 + 8);
    }
    else
    {
      uint64_t v71 = v9;
    }
    if (v12 != 13)
    {
      uint64_t v71 = llvm::IntegerType::get(*(llvm::IntegerType **)v71, v10);
      __int16 v120 = 257;
      if (*(void *)v7 != v71)
      {
        if (*((unsigned __int8 *)v7 + 16) <= 0x14u)
        {
          unsigned int v7 = (llvm::Value *)(*(uint64_t (**)(void, uint64_t, llvm::Value *, uint64_t))(**(void **)(a3 + 72)
                                                                                                 + 224))(*(void *)(a3 + 72), 49, v7, v71);
          if (v7) {
            BOOL v79 = *((unsigned __int8 *)v7 + 16) >= 0x1Cu;
          }
          else {
            BOOL v79 = 0;
          }
          if (v79)
          {
            (*(void (**)(void, llvm::Value *, unsigned char *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v7, v119, *(void *)(a3 + 48), *(void *)(a3 + 56));
            uint64_t v113 = *(unsigned int *)(a3 + 8);
            if (v113)
            {
              uint64_t v114 = *(void *)a3;
              uint64_t v115 = *(void *)a3 + 16 * v113;
              do
              {
                llvm::Instruction::setMetadata(v7, *(_DWORD *)v114, *(llvm::MDNode **)(v114 + 8));
                v114 += 16;
              }
              while (v114 != v115);
            }
          }
        }
        else
        {
          __int16 v123 = 257;
          unsigned int v7 = llvm::CastInst::Create(49, (uint64_t)v7, v71, (const char **)&v121, 0);
          (*(void (**)(void, llvm::Value *, unsigned char *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v7, v119, *(void *)(a3 + 48), *(void *)(a3 + 56));
          uint64_t v76 = *(unsigned int *)(a3 + 8);
          if (v76)
          {
            uint64_t v77 = *(void *)a3;
            uint64_t v78 = *(void *)a3 + 16 * v76;
            do
            {
              llvm::Instruction::setMetadata(v7, *(_DWORD *)v77, *(llvm::MDNode **)(v77 + 8));
              v77 += 16;
            }
            while (v77 != v78);
          }
        }
      }
    }
    if (*(unsigned char *)a4)
    {
      unint64_t v80 = (sub_1CB83544C(a4, v71) + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v81 = sub_1CB83544C(a4, a2);
      uint64_t v82 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v7, v80 - ((v81 + 7) & 0xFFFFFFFFFFFFFFF8), 0);
      __int16 v123 = 257;
      unsigned int v7 = sub_1CC2429AC(a3, (uint64_t)v7, (uint64_t)v82, (uint64_t)&v121, 0);
    }
    uint64_t v83 = (llvm::Type ***)llvm::IntegerType::get(*(llvm::IntegerType **)v71, v59);
    __int16 v123 = 257;
    uint64_t v85 = sub_1CD5AB4EC(a3, v7, v83, (uint64_t)&v121, v84);
    unsigned int v7 = v85;
    if (v83 != (llvm::Type ***)a2)
    {
      if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12) {
        int v86 = *(unsigned __int8 *)(**(void **)(a2 + 16) + 8);
      }
      else {
        int v86 = *(_DWORD *)(a2 + 8);
      }
      if (v86 == 15)
      {
        __int16 v120 = 257;
        if (*(void *)v85 != a2)
        {
          if (*((unsigned __int8 *)v85 + 16) <= 0x14u)
          {
            unsigned int v7 = (llvm::Value *)(*(uint64_t (**)(void, uint64_t, llvm::CastInst *, uint64_t))(**(void **)(a3 + 72) + 224))(*(void *)(a3 + 72), 48, v85, a2);
            if (v7) {
              BOOL v93 = *((unsigned __int8 *)v7 + 16) >= 0x1Cu;
            }
            else {
              BOOL v93 = 0;
            }
            if (v93)
            {
              (*(void (**)(void, llvm::Value *, unsigned char *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v7, v119, *(void *)(a3 + 48), *(void *)(a3 + 56));
              uint64_t v94 = *(unsigned int *)(a3 + 8);
              if (v94)
              {
                uint64_t v95 = *(void *)a3;
                uint64_t v96 = v95 + 16 * v94;
                do
                {
                  llvm::Instruction::setMetadata(v7, *(_DWORD *)v95, *(llvm::MDNode **)(v95 + 8));
                  v95 += 16;
                }
                while (v95 != v96);
              }
            }
          }
          else
          {
            __int16 v123 = 257;
            unsigned int v7 = llvm::CastInst::Create(48, (uint64_t)v85, a2, (const char **)&v121, 0);
            (*(void (**)(void, llvm::Value *, unsigned char *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v7, v119, *(void *)(a3 + 48), *(void *)(a3 + 56));
            uint64_t v87 = *(unsigned int *)(a3 + 8);
            if (v87)
            {
              uint64_t v88 = *(void *)a3;
              uint64_t v89 = v88 + 16 * v87;
              do
              {
                llvm::Instruction::setMetadata(v7, *(_DWORD *)v88, *(llvm::MDNode **)(v88 + 8));
                v88 += 16;
              }
              while (v88 != v89);
            }
          }
        }
      }
      else
      {
        __int16 v120 = 257;
        if (*(void *)v85 != a2)
        {
          if (*((unsigned __int8 *)v85 + 16) <= 0x14u)
          {
            unsigned int v7 = (llvm::Value *)(*(uint64_t (**)(void, uint64_t, llvm::CastInst *, uint64_t))(**(void **)(a3 + 72) + 224))(*(void *)(a3 + 72), 49, v85, a2);
            if (v7) {
              BOOL v97 = *((unsigned __int8 *)v7 + 16) >= 0x1Cu;
            }
            else {
              BOOL v97 = 0;
            }
            if (v97)
            {
              (*(void (**)(void, llvm::Value *, unsigned char *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v7, v119, *(void *)(a3 + 48), *(void *)(a3 + 56));
              uint64_t v116 = *(unsigned int *)(a3 + 8);
              if (v116)
              {
                uint64_t v117 = *(void *)a3;
                uint64_t v118 = v117 + 16 * v116;
                do
                {
                  llvm::Instruction::setMetadata(v7, *(_DWORD *)v117, *(llvm::MDNode **)(v117 + 8));
                  v117 += 16;
                }
                while (v117 != v118);
              }
            }
          }
          else
          {
            __int16 v123 = 257;
            unsigned int v7 = llvm::CastInst::Create(49, (uint64_t)v85, a2, (const char **)&v121, 0);
            (*(void (**)(void, llvm::Value *, unsigned char *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v7, v119, *(void *)(a3 + 48), *(void *)(a3 + 56));
            uint64_t v90 = *(unsigned int *)(a3 + 8);
            if (v90)
            {
              uint64_t v91 = *(void *)a3;
              uint64_t v92 = v91 + 16 * v90;
              do
              {
                llvm::Instruction::setMetadata(v7, *(_DWORD *)v91, *(llvm::MDNode **)(v91 + 8));
                v91 += 16;
              }
              while (v91 != v92);
            }
          }
        }
      }
    }
    if (v7 && *((unsigned __int8 *)v7 + 16) <= 0x14u) {
      goto LABEL_98;
    }
  }
  return v7;
}

uint64_t llvm::VNCoercion::getConstantStoreValueForLoad(llvm::VNCoercion *this, llvm::Constant *a2, uint64_t a3, llvm::Type *a4, const llvm::DataLayout *a5)
{
  int v7 = (int)a2;
  LShr = this;
  uint64_t v9 = **(llvm::IntegerType ***)this;
  if (*(_DWORD *)(*(void *)this + 8) != 15
    || *(_DWORD *)(a3 + 8) != 15
    || (*(_DWORD *)(a3 + 8) ^ *(_DWORD *)(*(void *)this + 8)) >= 0x100)
  {
    uint64_t v10 = sub_1CB83544C((uint64_t)a4, *(void *)this);
    int v11 = v10 + 7;
    unint64_t v12 = (unint64_t)(v10 + 7) >> 3;
    uint64_t v13 = sub_1CB83544C((uint64_t)a4, a3);
    int v14 = v13 + 7;
    unint64_t v15 = (unint64_t)(v13 + 7) >> 3;
    uint64_t v16 = *(void *)LShr;
    int v17 = *(_DWORD *)(*(void *)LShr + 8);
    if ((v17 & 0xFE) == 0x12)
    {
      unsigned int v18 = *(_DWORD *)(**(void **)(v16 + 16) + 8);
      int v19 = v18;
    }
    else
    {
      int v19 = *(_DWORD *)(*(void *)LShr + 8);
      unsigned int v18 = *(_DWORD *)(*(void *)LShr + 8);
    }
    if (v19 == 15)
    {
      if (v18 < 0x100) {
        goto LABEL_17;
      }
      unsigned int v20 = v18 >> 8;
      uint64_t v21 = *((unsigned int *)a4 + 60);
      uint64_t v22 = *((void *)a4 + 29);
      if (v21)
      {
        uint64_t v22 = *((void *)a4 + 29);
        unint64_t v23 = *((unsigned int *)a4 + 60);
        do
        {
          unint64_t v24 = v23 >> 1;
          uint64_t v25 = v22 + 16 * (v23 >> 1);
          unsigned int v26 = *(_DWORD *)(v25 + 8);
          uint64_t v27 = v25 + 16;
          v23 += ~(v23 >> 1);
          if (v26 < v20) {
            uint64_t v22 = v27;
          }
          else {
            unint64_t v23 = v24;
          }
        }
        while (v23);
      }
      if (v22 == *((void *)a4 + 29) + 16 * v21 || *(_DWORD *)(v22 + 8) != v20) {
LABEL_17:
      }
        uint64_t v22 = *((void *)a4 + 29);
      uint64_t v28 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)v16, (llvm::LLVMContext *)*(unsigned int *)(v22 + 4));
      uint64_t v29 = v28;
      if ((*(_DWORD *)(v16 + 8) & 0xFE) == 0x12)
      {
        llvm::VectorType::get(v28, (llvm::Type *)(*(unsigned int *)(v16 + 32) | ((unint64_t)(*(_DWORD *)(v16 + 8) == 19) << 32)));
        uint64_t v29 = v38;
      }
      LShr = sub_1CC56C0C0((llvm *)0x2F, LShr, v29, 0);
      LOBYTE(v17) = *(unsigned char *)(*(void *)LShr + 8);
    }
    if (v17 != 13)
    {
      uint64_t v30 = (llvm::Constant *)llvm::IntegerType::get(v9, (llvm::LLVMContext *)(v11 & 0xFFFFFFF8));
      if (*(llvm::Constant **)LShr != v30) {
        LShr = sub_1CC56C0C0((llvm *)0x31, LShr, v30, 0);
      }
    }
    if (*(unsigned char *)a4) {
      int v31 = v12 - (v15 + v7);
    }
    else {
      int v31 = v7;
    }
    unint64_t v32 = (8 * v31);
    if (v32)
    {
      unsigned int v33 = (llvm::Constant *)llvm::ConstantInt::get(*(llvm::ConstantInt **)LShr, v32, 0);
      LShr = (llvm::detail::IEEEFloat *)llvm::ConstantExpr::getLShr(LShr, v33, 0, v34);
    }
    if (v15 != v12)
    {
      uint64_t v36 = (llvm::Type ***)llvm::IntegerType::get(v9, (llvm::LLVMContext *)(v14 & 0xFFFFFFF8));
      LShr = llvm::ConstantExpr::getTruncOrBitCast((llvm::Type **)LShr, v36, v37);
    }
  }
  return sub_1CD26BD30((uint64_t)LShr, a3, (uint64_t)a4);
}

uint64_t sub_1CD26BD30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v63 = 1;
    for (uint64_t i = 8; i != 72; i += 16)
      *(uint64_t *)((char *)&v63 + i) = -4096;
    uint64_t LShr = (uint64_t)sub_1CBFB8694(a1, (llvm::DataLayout *)a3, 0, (uint64_t)&v63);
    if ((v63 & 1) == 0) {
      MEMORY[0x1D25D9CD0](v64, 8);
    }
  }
  else
  {
    uint64_t LShr = 0;
  }
  uint64_t v7 = *(void *)LShr;
  int v8 = (llvm::LLVMContext *)sub_1CB83544C(a3, *(void *)LShr);
  uint64_t v9 = sub_1CB83544C(a3, a2);
  unsigned int v10 = *(_DWORD *)(v7 + 8);
  int v11 = v10 & 0xFE;
  if (v8 == (llvm::LLVMContext *)v9)
  {
    int v12 = *(_DWORD *)(v7 + 8);
    if (v11 == 18) {
      LOBYTE(v12) = *(unsigned char *)(**(void **)(v7 + 16) + 8);
    }
    if (v12 == 15
      && ((*(_DWORD *)(a2 + 8) & 0xFE) != 0x12
        ? (int v13 = *(_DWORD *)(a2 + 8))
        : (int v13 = *(unsigned __int8 *)(**(void **)(a2 + 16) + 8)),
          v13 == 15))
    {
      if (*(void *)LShr != a2)
      {
        uint64_t v14 = 49;
LABEL_56:
        uint64_t LShr = (uint64_t)sub_1CC56C0C0((llvm *)v14, (llvm::detail::IEEEFloat *)LShr, (llvm::Constant *)a2, 0);
      }
    }
    else
    {
      if (v11 == 18) {
        unsigned int v10 = *(_DWORD *)(**(void **)(v7 + 16) + 8);
      }
      if (v10 == 15)
      {
        if (v10 < 0x100) {
          goto LABEL_29;
        }
        unsigned int v15 = v10 >> 8;
        uint64_t v16 = *(unsigned int *)(a3 + 240);
        uint64_t v17 = *(void *)(a3 + 232);
        if (v16)
        {
          uint64_t v17 = *(void *)(a3 + 232);
          unint64_t v18 = *(unsigned int *)(a3 + 240);
          do
          {
            unint64_t v19 = v18 >> 1;
            uint64_t v20 = v17 + 16 * (v18 >> 1);
            unsigned int v21 = *(_DWORD *)(v20 + 8);
            uint64_t v22 = v20 + 16;
            v18 += ~(v18 >> 1);
            if (v21 < v15) {
              uint64_t v17 = v22;
            }
            else {
              unint64_t v18 = v19;
            }
          }
          while (v18);
        }
        if (v17 == *(void *)(a3 + 232) + 16 * v16 || *(_DWORD *)(v17 + 8) != v15) {
LABEL_29:
        }
          uint64_t v17 = *(void *)(a3 + 232);
        unint64_t v23 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)v7, (llvm::LLVMContext *)*(unsigned int *)(v17 + 4));
        unint64_t v24 = v23;
        if ((*(_DWORD *)(v7 + 8) & 0xFE) == 0x12)
        {
          llvm::VectorType::get(v23, (llvm::Type *)(*(unsigned int *)(v7 + 32) | ((unint64_t)(*(_DWORD *)(v7 + 8) == 19) << 32)));
          unint64_t v24 = v60;
        }
        uint64_t LShr = (uint64_t)sub_1CC56C0C0((llvm *)0x2F, (llvm::detail::IEEEFloat *)LShr, v24, 0);
        uint64_t v7 = (uint64_t)v24;
      }
      unsigned int v25 = *(_DWORD *)(a2 + 8);
      if ((v25 & 0xFE) == 0x12) {
        unsigned int v25 = *(_DWORD *)(**(void **)(a2 + 16) + 8);
      }
      unsigned int v26 = (llvm::Constant *)a2;
      if (v25 == 15)
      {
        if (v25 < 0x100) {
          goto LABEL_45;
        }
        unsigned int v27 = v25 >> 8;
        uint64_t v28 = *(unsigned int *)(a3 + 240);
        uint64_t v29 = *(void *)(a3 + 232);
        if (v28)
        {
          uint64_t v29 = *(void *)(a3 + 232);
          unint64_t v30 = *(unsigned int *)(a3 + 240);
          do
          {
            unint64_t v31 = v30 >> 1;
            uint64_t v32 = v29 + 16 * (v30 >> 1);
            unsigned int v33 = *(_DWORD *)(v32 + 8);
            uint64_t v34 = v32 + 16;
            v30 += ~(v30 >> 1);
            if (v33 < v27) {
              uint64_t v29 = v34;
            }
            else {
              unint64_t v30 = v31;
            }
          }
          while (v30);
        }
        if (v29 == *(void *)(a3 + 232) + 16 * v28 || *(_DWORD *)(v29 + 8) != v27) {
LABEL_45:
        }
          uint64_t v29 = *(void *)(a3 + 232);
        unsigned int v35 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)a2, (llvm::LLVMContext *)*(unsigned int *)(v29 + 4));
        unsigned int v26 = v35;
        if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
        {
          llvm::VectorType::get(v35, (llvm::Type *)(*(unsigned int *)(a2 + 32) | ((unint64_t)(*(_DWORD *)(a2 + 8) == 19) << 32)));
          unsigned int v26 = v61;
        }
      }
      if ((llvm::Constant *)v7 != v26 && *(llvm::Constant **)LShr != v26) {
        uint64_t LShr = (uint64_t)sub_1CC56C0C0((llvm *)0x31, (llvm::detail::IEEEFloat *)LShr, v26, 0);
      }
      if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12) {
        int v36 = *(unsigned __int8 *)(**(void **)(a2 + 16) + 8);
      }
      else {
        int v36 = *(_DWORD *)(a2 + 8);
      }
      if (v36 == 15)
      {
        uint64_t v14 = 48;
        goto LABEL_56;
      }
    }
    if (!LShr || *(unsigned char *)(LShr + 16) != 5) {
      return LShr;
    }
    goto LABEL_59;
  }
  unint64_t v39 = (llvm::LLVMContext *)v9;
  if (v11 == 18)
  {
    unsigned int v40 = *(_DWORD *)(**(void **)(v7 + 16) + 8);
    int v41 = v40;
  }
  else
  {
    int v41 = *(_DWORD *)(v7 + 8);
    unsigned int v40 = *(_DWORD *)(v7 + 8);
  }
  if (v41 == 15)
  {
    if (v40 < 0x100) {
      goto LABEL_77;
    }
    unsigned int v42 = v40 >> 8;
    uint64_t v43 = *(unsigned int *)(a3 + 240);
    uint64_t v44 = *(void *)(a3 + 232);
    if (v43)
    {
      uint64_t v44 = *(void *)(a3 + 232);
      unint64_t v45 = *(unsigned int *)(a3 + 240);
      do
      {
        unint64_t v46 = v45 >> 1;
        uint64_t v47 = v44 + 16 * (v45 >> 1);
        unsigned int v48 = *(_DWORD *)(v47 + 8);
        uint64_t v49 = v47 + 16;
        v45 += ~(v45 >> 1);
        if (v48 < v42) {
          uint64_t v44 = v49;
        }
        else {
          unint64_t v45 = v46;
        }
      }
      while (v45);
    }
    if (v44 == *(void *)(a3 + 232) + 16 * v43 || *(_DWORD *)(v44 + 8) != v42) {
LABEL_77:
    }
      uint64_t v44 = *(void *)(a3 + 232);
    uint64_t v50 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)v7, (llvm::LLVMContext *)*(unsigned int *)(v44 + 4));
    uint64_t v51 = v50;
    if ((*(_DWORD *)(v7 + 8) & 0xFE) == 0x12)
    {
      llvm::VectorType::get(v50, (llvm::Type *)(*(unsigned int *)(v7 + 32) | ((unint64_t)(*(_DWORD *)(v7 + 8) == 19) << 32)));
      uint64_t v51 = v62;
    }
    uint64_t LShr = (uint64_t)sub_1CC56C0C0((llvm *)0x2F, (llvm::detail::IEEEFloat *)LShr, v51, 0);
    LOBYTE(v10) = *((unsigned char *)v51 + 8);
    uint64_t v7 = (uint64_t)v51;
  }
  if (v10 != 13)
  {
    uint64_t v7 = llvm::IntegerType::get(*(llvm::IntegerType **)v7, v8);
    if (*(void *)LShr != v7) {
      uint64_t LShr = (uint64_t)sub_1CC56C0C0((llvm *)0x31, (llvm::detail::IEEEFloat *)LShr, (llvm::Constant *)v7, 0);
    }
  }
  if (*(unsigned char *)a3)
  {
    unint64_t v52 = (sub_1CB83544C(a3, v7) + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v53 = sub_1CB83544C(a3, a2);
    uint64_t v54 = (llvm::Constant *)llvm::ConstantInt::get(*(llvm::ConstantInt **)LShr, v52 - ((v53 + 7) & 0xFFFFFFFFFFFFFFF8), 0);
    uint64_t LShr = llvm::ConstantExpr::getLShr((llvm::ConstantExpr *)LShr, v54, 0, v55);
  }
  BOOL v56 = (llvm::Type ***)llvm::IntegerType::get(*(llvm::IntegerType **)v7, v39);
  uint64_t LShr = (uint64_t)llvm::ConstantExpr::getTruncOrBitCast((llvm::Type **)LShr, v56, v57);
  if (v56 != (llvm::Type ***)a2)
  {
    if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12) {
      int v58 = *(unsigned __int8 *)(**(void **)(a2 + 16) + 8);
    }
    else {
      int v58 = *(_DWORD *)(a2 + 8);
    }
    if (v58 == 15) {
      uint64_t v59 = 48;
    }
    else {
      uint64_t v59 = 49;
    }
    uint64_t LShr = (uint64_t)llvm::ConstantExpr::getCast((llvm::ConstantExpr *)v59, (llvm::ConstantExpr *)LShr, (llvm::Constant ***)a2, 0);
  }
  if (LShr)
  {
LABEL_59:
    uint64_t v63 = 1;
    for (uint64_t j = 8; j != 72; j += 16)
      *(uint64_t *)((char *)&v63 + j) = -4096;
    uint64_t LShr = (uint64_t)sub_1CBFB8694(LShr, (llvm::DataLayout *)a3, 0, (uint64_t)&v63);
    if ((v63 & 1) == 0) {
      MEMORY[0x1D25D9CD0](v64, 8);
    }
  }
  return LShr;
}

const char *llvm::archToDevDivInternalArch(int a1)
{
  if (a1 > 40)
  {
    if (a1 != 41)
    {
      if (a1 == 42) {
        return "amd64";
      }
      return "";
    }
    return "i386";
  }
  else
  {
    if (a1 != 1)
    {
      if (a1 == 3) {
        return "arm64";
      }
      return "";
    }
    return "arm";
  }
}

uint64_t sub_1CD26C398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7)
{
  v53[16] = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a2 + 16) && !*(unsigned char *)(a4 + 16)) {
    return 0;
  }
  unint64_t v41 = 0;
  uint64_t v42 = 0;
  if (*(unsigned char *)(a3 + 16)) {
    llvm::VersionTuple::tryParse(&v41, *(unsigned __int8 **)a3, *(void *)(a3 + 8));
  }
  if (!*(unsigned char *)(a4 + 16))
  {
    uint64_t v16 = *(const void **)a2;
    if (!*(void *)a2)
    {
      memset(__src, 0, sizeof(__src));
LABEL_37:
      if (*(char *)(a5 + 23) < 0) {
        operator delete(*(void **)a5);
      }
      *(_OWORD *)a5 = *(_OWORD *)__src;
      *(void **)(a5 + 16) = __src[2];
      goto LABEL_40;
    }
    size_t v17 = *(void *)(a2 + 8);
    if (v17 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_65;
    }
    if (v17 >= 0x17)
    {
      uint64_t v27 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17) {
        uint64_t v27 = v17 | 7;
      }
      uint64_t v28 = v27 + 1;
      unint64_t v18 = operator new(v27 + 1);
      __src[1] = (void *)v17;
      __src[2] = (void *)(v28 | 0x8000000000000000);
      __src[0] = v18;
    }
    else
    {
      HIBYTE(__src[2]) = v17;
      unint64_t v18 = __src;
      if (!v17) {
        goto LABEL_36;
      }
    }
    memmove(v18, v16, v17);
LABEL_36:
    *((unsigned char *)v18 + v17) = 0;
    goto LABEL_37;
  }
  uint64_t v14 = *(const void **)a4;
  size_t v13 = *(void *)(a4 + 8);
  __src[0] = v53;
  *(_OWORD *)&__src[1] = xmmword_1CFAC3020;
  if (v13 >= 0x81) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  unsigned int v15 = 0;
  if (v13)
  {
    memcpy(__src[0], v14, v13);
    unsigned int v15 = (char *)__src[1];
  }
  __src[1] = &v15[v13];
  *(void *)&long long __dst = "Windows Kits";
  __int16 v51 = 259;
  __int16 v48 = 257;
  __int16 v46 = 257;
  __int16 v44 = 257;
  llvm::sys::path::append(__src, 0, (const char **)&__dst, v47, (uint64_t)v45, (uint64_t)v43);
  if (v41 & 0x7FFFFFFFFFFFFFFFLL | v42 & 0x7FFFFFFF7FFFFFFFLL)
  {
    __int16 v51 = 264;
    LODWORD(__dst) = v41;
    __int16 v48 = 257;
    __int16 v46 = 257;
    __int16 v44 = 257;
    llvm::sys::path::append(__src, 0, (const char **)&__dst, v47, (uint64_t)v45, (uint64_t)v43);
  }
  else
  {
    sub_1CD26C880((uint64_t)__p, a1, __src[0], __src[1]);
    __int16 v51 = 260;
    *(void *)&long long __dst = __p;
    __int16 v48 = 257;
    __int16 v46 = 257;
    __int16 v44 = 257;
    llvm::sys::path::append(__src, 0, (const char **)&__dst, v47, (uint64_t)v45, (uint64_t)v43);
    if (v40 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v19 = __src[1];
  if (__src[1] > (void *)0x7FFFFFFFFFFFFFF7) {
LABEL_65:
  }
    abort();
  uint64_t v20 = __src[0];
  if (__src[1] >= (void *)0x17)
  {
    unint64_t v22 = ((unint64_t)__src[1] & 0xFFFFFFFFFFFFFFF8) + 8;
    if (((unint64_t)__src[1] | 7) != 0x17) {
      unint64_t v22 = (unint64_t)__src[1] | 7;
    }
    unint64_t v23 = a6;
    unint64_t v24 = v22 + 1;
    p_dst = (long long *)operator new(v22 + 1);
    unint64_t v25 = v24 | 0x8000000000000000;
    a6 = v23;
    *((void *)&__dst + 1) = v19;
    unint64_t v50 = v25;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v50) = __src[1];
    p_dst = &__dst;
    if (!__src[1]) {
      goto LABEL_26;
    }
  }
  memmove(p_dst, v20, (size_t)v19);
LABEL_26:
  v19[(void)p_dst] = 0;
  if (*(char *)(a5 + 23) < 0) {
    operator delete(*(void **)a5);
  }
  *(_OWORD *)a5 = __dst;
  *(void *)(a5 + 16) = v50;
  if (__src[0] != v53) {
    free(__src[0]);
  }
LABEL_40:
  if (v41 & 0x7FFFFFFFFFFFFFFFLL | v42 & 0x7FFFFFFF7FFFFFFFLL)
  {
    *a6 = v41;
    llvm::VersionTuple::getAsString((llvm::VersionTuple *)&v41, __src);
    if (*(char *)(a7 + 23) < 0) {
      operator delete(*(void **)a7);
    }
    *(_OWORD *)a7 = *(_OWORD *)__src;
    *(void **)(a7 + 16) = __src[2];
  }
  else
  {
    char v29 = *(unsigned char *)(a5 + 23);
    BOOL v30 = v29 < 0;
    if (v29 >= 0) {
      unint64_t v31 = (const void *)a5;
    }
    else {
      unint64_t v31 = *(const void **)a5;
    }
    size_t v32 = v29 & 0x7F;
    if (v30) {
      size_t v33 = *(void *)(a5 + 8);
    }
    else {
      size_t v33 = v32;
    }
    __src[0] = v53;
    *(_OWORD *)&__src[1] = xmmword_1CFAC3020;
    if (v33 >= 0x81) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    uint64_t v34 = 0;
    if (v33)
    {
      memcpy(v53, v31, v33);
      uint64_t v34 = (char *)__src[1];
    }
    __src[1] = &v34[v33];
    *(void *)&long long __dst = "Include";
    __int16 v51 = 259;
    __int16 v48 = 257;
    __int16 v46 = 257;
    __int16 v44 = 257;
    llvm::sys::path::append(__src, 0, (const char **)&__dst, v47, (uint64_t)v45, (uint64_t)v43);
    sub_1CD26C880((uint64_t)&__dst, a1, __src[0], __src[1]);
    if (*(char *)(a7 + 23) < 0) {
      operator delete(*(void **)a7);
    }
    *(_OWORD *)a7 = __dst;
    unint64_t v35 = v50;
    *(void *)(a7 + 16) = v50;
    unint64_t v36 = HIBYTE(v35);
    uint64_t v37 = *(void *)(a7 + 8);
    if (__src[0] != v53) {
      free(__src[0]);
    }
    if ((v36 & 0x80u) == 0) {
      uint64_t v38 = v36 & 0x7F;
    }
    else {
      uint64_t v38 = v37;
    }
    if (v38) {
      *a6 = 10;
    }
  }
  return 1;
}

void sub_1CD26C880(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  long long v32 = 0uLL;
  LODWORD(v31[0]) = 0;
  v31[1] = std::system_category();
  __int16 v40 = 261;
  __p[0] = a3;
  __p[1] = a4;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **, void *))(*(void *)a2 + 32))(&v29, a2, __p, v31);
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  if (LODWORD(v31[0])) {
    goto LABEL_2;
  }
  while (!sub_1CD065CEC(&v29, &v27))
  {
    uint64_t v9 = *(void *)(v29 + 8);
    char v10 = *(unsigned char *)(v29 + 31);
    int v11 = v10;
    if (v10 >= 0) {
      uint64_t v9 = v29 + 8;
    }
    uint64_t v12 = *(void *)(v29 + 16);
    uint64_t v13 = v10 & 0x7F;
    if (v11 >= 0) {
      uint64_t v12 = v13;
    }
    LOWORD(v36) = 261;
    *(void *)&long long __dst = v9;
    *((void *)&__dst + 1) = v12;
    (*(void (**)(void **__return_ptr, uint64_t, long long *))(*(void *)a2 + 16))(__p, a2, &__dst);
    char v14 = v42;
    if ((v42 & 1) != 0 || v41 != 3) {
      goto LABEL_34;
    }
    uint64_t v15 = *(void *)(v29 + 8);
    char v16 = *(unsigned char *)(v29 + 31);
    int v17 = v16;
    if (v16 >= 0) {
      uint64_t v15 = v29 + 8;
    }
    uint64_t v18 = *(void *)(v29 + 16);
    uint64_t v19 = v16 & 0x7F;
    if (v17 >= 0) {
      uint64_t v18 = v19;
    }
    uint64_t v34 = 0;
    size_t v35 = 0;
    *(void *)&long long __dst = v15;
    *((void *)&__dst + 1) = v18;
    uint64_t v36 = v18;
    int v37 = 0;
    llvm::sys::path::reverse_iterator::operator++((uint64_t)&__dst);
    unsigned int v21 = v34;
    size_t v20 = v35;
    long long v26 = 0uLL;
    if ((llvm::VersionTuple::tryParse((unint64_t *)&v26, v34, v35) & 1) == 0
      && sub_1CC156834(&v32, &v26))
    {
      long long v32 = v26;
      if (v21)
      {
        if (v20 >= 0x7FFFFFFFFFFFFFF8) {
          abort();
        }
        if (v20 >= 0x17)
        {
          uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v20 | 7) != 0x17) {
            uint64_t v23 = v20 | 7;
          }
          uint64_t v24 = v23 + 1;
          p_dst = (long long *)operator new(v23 + 1);
          *((void *)&__dst + 1) = v20;
          uint64_t v34 = (unsigned __int8 *)(v24 | 0x8000000000000000);
          *(void *)&long long __dst = p_dst;
        }
        else
        {
          HIBYTE(v34) = v20;
          p_dst = &__dst;
          if (!v20)
          {
LABEL_29:
            *((unsigned char *)p_dst + v20) = 0;
            goto LABEL_30;
          }
        }
        memmove(p_dst, v21, v20);
        goto LABEL_29;
      }
      long long __dst = 0uLL;
      uint64_t v34 = 0;
LABEL_30:
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      *(_OWORD *)a1 = __dst;
      *(void *)(a1 + 16) = v34;
    }
    char v14 = v42;
LABEL_34:
    if ((v14 & 1) == 0 && v39 < 0) {
      operator delete(__p[0]);
    }
    sub_1CD06540C(&v29, v31);
    if (LODWORD(v31[0])) {
      break;
    }
  }
  unint64_t v25 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
LABEL_2:
  int v8 = v30;
  if (v30)
  {
    if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

uint64_t sub_1CD26CBB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = &unk_1F26491F8;
  *(void *)(a1 + 16) = 0;
  uint64_t v7 = a1 + 16;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = a2;
  *(void *)(a1 + 48) = a3;
  *(void *)(a1 + 56) = a4;
  *(void *)(a1 + 64) = a5;
  *(void *)(a1 + 72) = a6;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 104) = &unk_1F2646F30;
  *(void *)(a1 + 168) = a1 + 80;
  *(_DWORD *)(a1 + 160) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  if (a6) {
    sub_1CD26DDE0(v7, a6);
  }
  return a1;
}

uint64_t sub_1CD26CC60(uint64_t result, uint64_t a2)
{
  unint64_t v2 = **(unsigned int **)(a2 + 8);
  uint64_t v3 = *(void *)(result + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(result + 24) - v3) >> 2) > v2 && *(_DWORD *)a2 == 4)
  {
    uint64_t v5 = v3 + 12 * v2;
    if (!*(unsigned char *)(v5 + 4))
    {
      *(_DWORD *)uint64_t v5 = *(_DWORD *)(result + 8);
      *(unsigned char *)(v5 + 4) = 1;
    }
    *(_DWORD *)(v3 + 12 * v2 + 8) = *(_DWORD *)(result + 8);
  }
  return result;
}

uint64_t sub_1CD26CCC4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16) + 12 * **(unsigned int **)(a2 + 8);
  if (!*(unsigned char *)(v2 + 4))
  {
    *(_DWORD *)uint64_t v2 = *(_DWORD *)(result + 8);
    *(unsigned char *)(v2 + 4) = 1;
  }
  return result;
}

llvm::raw_ostream *sub_1CD26CCF8(uint64_t a1, uint64_t a2)
{
  int v29 = 0;
  char v33 = 0;
  uint64_t v34 = 0;
  int v35 = 1;
  unint64_t v31 = 0;
  long long v32 = 0;
  BOOL v30 = 0;
  uint64_t v28 = &unk_1F2644C68;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = &v40;
  long long v39 = xmmword_1CDB159A0;
  sub_1CBF2ECF8((uint64_t)&v28, a2);
  uint64_t v3 = v32;
  if ((unint64_t)(v31 - v32) > 0x1A)
  {
    *(_OWORD *)long long v32 = *(_OWORD *)"\n\nAGXProfilerWeights view:\n";
    *(_OWORD *)(v3 + 11) = *(_OWORD *)"erWeights view:\n";
    uint64_t v4 = v32 + 27;
    v32 += 27;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v28, "\n\nAGXProfilerWeights view:\n", 0x1BuLL);
    uint64_t v4 = v32;
  }
  if (v4 != v30)
  {
    long long v32 = v30;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v28, v30);
  }
  uint64_t v5 = *(void *)(a1 + 72);
  if (v5)
  {
    unsigned int v6 = 0;
    uint64_t v7 = *(void *)(a1 + 64);
    uint64_t v27 = v7 + 168 * v5;
    do
    {
      int v8 = (_DWORD *)(*(void *)(a1 + 16) + 12 * v6);
      unsigned int v9 = v8[2] - *v8 + 1;
      sub_1CD098D14((llvm::raw_ostream *)&v28, v9, 0, 0, 0);
      llvm::formatted_raw_ostream::PadToColumn((llvm::formatted_raw_ostream *)&v28, 5);
      unint64_t v10 = 8;
      do
      {
        if (v10 <= v9)
        {
          int v11 = off_1E685A658[v10];
          do
          {
            size_t v12 = strlen(v11);
            if (v12 <= v31 - v32)
            {
              if (v12)
              {
                memcpy(v32, v11, v12);
                v32 += v12;
              }
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)&v28, v11, v12);
            }
            v9 -= v10;
          }
          while (v9 >= v10);
        }
        --v10;
      }
      while (v10);
      llvm::formatted_raw_ostream::PadToColumn((llvm::formatted_raw_ostream *)&v28, 20);
      if (v31 == v32) {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v28, " ", 1uLL);
      }
      else {
        *v32++ = 32;
      }
      MEMORY[0x1D25D9630](a1 + 80, "");
      (*(void (**)(void, uint64_t, void, const char *, void, void, uint64_t))(**(void **)(a1 + 48)
                                                                                             + 32))(*(void *)(a1 + 48), v7, 0, "", 0, *(void *)(a1 + 40), a1 + 104);
      uint64_t v13 = *(const char **)(a1 + 120);
      if (*(const char **)(a1 + 136) != v13)
      {
        *(void *)(a1 + 136) = v13;
        llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)(a1 + 104), v13);
      }
      char v14 = *(unsigned char *)(a1 + 103);
      BOOL v15 = v14 < 0;
      if (v14 >= 0) {
        uint64_t v16 = a1 + 80;
      }
      else {
        uint64_t v16 = *(void *)(a1 + 80);
      }
      unint64_t v17 = v14 & 0x7F;
      if (v15) {
        unint64_t v18 = *(void *)(a1 + 88);
      }
      else {
        unint64_t v18 = v17;
      }
      v41[0] = v16;
      v41[1] = v18;
      unint64_t first_not_of = llvm::StringRef::find_first_not_of(v41, " \t\n\v\f\r", 6, 0);
      unint64_t v20 = first_not_of;
      if (first_not_of >= v18) {
        unint64_t v21 = v18;
      }
      else {
        unint64_t v21 = first_not_of;
      }
      unint64_t v22 = (const void *)(v16 + v21);
      size_t v23 = v18 - v21;
      uint64_t v24 = v32;
      if (v18 - v21 <= v31 - v32)
      {
        if (v18 > v20)
        {
          memcpy(v32, v22, v23);
          uint64_t v24 = &v32[v23];
          v32 += v23;
        }
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v28, (const char *)v22, v23);
        uint64_t v24 = v32;
      }
      if (v31 == v24)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v28, "\n", 1uLL);
        unint64_t v25 = v32;
      }
      else
      {
        *uint64_t v24 = 10;
        unint64_t v25 = ++v32;
      }
      if (v25 != v30)
      {
        long long v32 = v30;
        llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v28, v30);
      }
      v7 += 168;
      ++v6;
    }
    while (v7 != v27);
  }
  return sub_1CBF2EF74((llvm::raw_ostream *)&v28);
}

void sub_1CD26D09C(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1[9];
  if (v2)
  {
    uint64_t v3 = 0;
    unsigned int v4 = 0;
    unint64_t v5 = 0;
    unsigned int v6 = 0;
    uint64_t v7 = a1[8];
    uint64_t v8 = v7 + 168 * v2;
    unint64_t v20 = a1;
    do
    {
      unsigned int v9 = (_DWORD *)(a1[2] + 12 * v4);
      uint64_t v10 = (v9[2] - *v9 + 1);
      if ((unint64_t)v3 >= v5)
      {
        uint64_t v11 = (v3 - (char *)v6) >> 5;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 59) {
          abort();
        }
        if ((uint64_t)(v5 - (void)v6) >> 4 > v12) {
          unint64_t v12 = (uint64_t)(v5 - (void)v6) >> 4;
        }
        if (v5 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13 >> 59) {
          sub_1CB833614();
        }
        char v14 = (char *)operator new(32 * v13);
        BOOL v15 = v14;
        uint64_t v16 = &v14[32 * v11];
        *(_WORD *)uint64_t v16 = 3;
        *((void *)v16 + 1) = v10;
        if (v3 == (char *)v6)
        {
          uint64_t v18 = (uint64_t)&v14[32 * v11];
        }
        else
        {
          unint64_t v17 = (unsigned __int16 *)v3;
          uint64_t v18 = (uint64_t)v16;
          do
          {
            v18 -= 32;
            v17 -= 16;
            llvm::json::Value::moveFrom(v18, v17);
          }
          while (v17 != v6);
          do
          {
            v3 -= 32;
            llvm::json::Value::destroy((llvm::json::Value *)v3);
          }
          while (v3 != (char *)v6);
        }
        unint64_t v5 = (unint64_t)&v15[32 * v13];
        uint64_t v3 = v16 + 32;
        if (v6) {
          operator delete(v6);
        }
        unsigned int v6 = (unsigned __int16 *)v18;
        a1 = v20;
      }
      else
      {
        *(_WORD *)uint64_t v3 = 3;
        *((void *)v3 + 1) = v10;
        v3 += 32;
      }
      v7 += 168;
      ++v4;
    }
    while (v7 != v8);
  }
  else
  {
    uint64_t v3 = 0;
    unsigned int v6 = 0;
    unint64_t v5 = 0;
  }
  *(_WORD *)a2 = 8;
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = v3;
  *(void *)(a2 + 24) = v5;
  memset(v21, 0, sizeof(v21));
  unint64_t v22 = (void **)v21;
  sub_1CBF2C7E0(&v22);
}

uint64_t sub_1CD26D25C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 72);
  if (v3)
  {
    uint64_t v4 = a1;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)(a1 + 64);
    uint64_t v99 = v9 + 168 * v3;
    while (1)
    {
      unint64_t v101 = (unint64_t)v6;
      uint64_t v102 = v7;
      uint64_t v10 = (_DWORD *)(*(void *)(v4 + 16) + 12 * v5);
      LODWORD(v10) = v10[2] - *v10;
      int v11 = v10 + 1;
      *(unsigned char *)(a2 + 70) = 1;
      uint64_t v13 = *(void *)(a2 + 40);
      uint64_t v12 = *(void *)(a2 + 48);
      uint64_t v14 = *(void *)(a2 + 32);
      if (v10 != -1 || *(unsigned char *)(a2 + 80) != 0) {
        break;
      }
LABEL_21:
      int v24 = sub_1CBF2CB78(a2, (unsigned __int16)v14 - (unsigned __int16)v12 + (unsigned __int16)v13);
      int v25 = v24;
      unsigned int v6 = (char *)v101;
      if ((unint64_t)v8 >= v101)
      {
        uint64_t v27 = (v8 - v102) >> 2;
        unint64_t v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 62) {
          abort();
        }
        if ((uint64_t)(v101 - (void)v102) >> 1 > v28) {
          unint64_t v28 = (uint64_t)(v101 - (void)v102) >> 1;
        }
        if (v101 - (unint64_t)v102 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v28;
        }
        if (v29)
        {
          if (v29 >> 62) {
            sub_1CB833614();
          }
          BOOL v30 = (char *)operator new(4 * v29);
        }
        else
        {
          BOOL v30 = 0;
        }
        unint64_t v31 = &v30[4 * v27];
        *(_DWORD *)unint64_t v31 = v25;
        long long v26 = v31 + 4;
        while (v8 != v102)
        {
          int v32 = *((_DWORD *)v8 - 1);
          v8 -= 4;
          *((_DWORD *)v31 - 1) = v32;
          v31 -= 4;
        }
        unsigned int v6 = &v30[4 * v29];
        if (v102) {
          operator delete(v102);
        }
        uint64_t v7 = v31;
        uint64_t v4 = a1;
      }
      else
      {
        *(_DWORD *)uint64_t v8 = v24;
        long long v26 = v8 + 4;
        uint64_t v7 = v102;
      }
      v9 += 168;
      ++v5;
      uint64_t v8 = v26;
      if (v9 == v99) {
        goto LABEL_43;
      }
    }
    if (*(void *)(a2 + 72) <= 3uLL) {
      *(void *)(a2 + 72) = 4;
    }
    unint64_t v16 = ((_BYTE)v12 - ((_BYTE)v14 + (_BYTE)v13)) & 3;
    unint64_t v17 = *(uint64_t **)(a2 + 56);
    if (v12 - (uint64_t)v17 < v16)
    {
      sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v12 - ((_BYTE)v14 + (_BYTE)v13)) & 3);
      *(void *)(a2 + 48) -= v16;
    }
    else
    {
      uint64_t v18 = v12 - v16;
      *(void *)(a2 + 48) = v12 - v16;
      if ((((_BYTE)v12 - ((_BYTE)v14 + (_BYTE)v13)) & 3) == 0)
      {
LABEL_14:
        if ((unint64_t)(v18 - (void)v17) <= 3)
        {
          sub_1CBF2C904((uint64_t *)a2, 4uLL);
          uint64_t v18 = *(void *)(a2 + 48);
          unint64_t v17 = *(uint64_t **)(a2 + 56);
        }
        *(_DWORD *)(v18 - 4) = v11;
        uint64_t v20 = v18 - 4;
        *(void *)(a2 + 48) = v20;
        uint64_t v21 = *(void *)(a2 + 32);
        uint64_t v22 = *(void *)(a2 + 40);
        if ((unint64_t)(v20 - (void)v17) <= 7)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          unint64_t v17 = *(uint64_t **)(a2 + 56);
        }
        *unint64_t v17 = (v21 - v20 + v22) | 0x400000000;
        *(void *)(a2 + 56) += 8;
        ++*(_DWORD *)(a2 + 64);
        unsigned int v23 = *(unsigned __int16 *)(a2 + 68);
        if (v23 <= 4) {
          LOWORD(v23) = 4;
        }
        *(_WORD *)(a2 + 68) = v23;
        uint64_t v4 = a1;
        goto LABEL_21;
      }
    }
    uint64_t v19 = 0;
    do
      *(unsigned char *)(*(void *)(a2 + 48) + v19++) = 0;
    while (v16 != v19);
    uint64_t v18 = *(void *)(a2 + 48);
    unint64_t v17 = *(uint64_t **)(a2 + 56);
    goto LABEL_14;
  }
  long long v26 = 0;
  uint64_t v7 = 0;
LABEL_43:
  uint64_t v33 = v26 - v7;
  if (v26 == v7) {
    uint64_t v34 = (char *)&unk_1CFB33690;
  }
  else {
    uint64_t v34 = v7;
  }
  *(unsigned char *)(a2 + 70) = 1;
  if (*(void *)(a2 + 72) <= 3uLL) {
    *(void *)(a2 + 72) = 4;
  }
  uint64_t v35 = *(void *)(a2 + 48);
  unint64_t v36 = ((_BYTE)v35 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v35 - *(void *)(a2 + 56) < v36)
  {
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v35 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(void *)(a2 + 48) -= v36;
  }
  else
  {
    *(void *)(a2 + 48) = v35 - v36;
    if (!v36) {
      goto LABEL_50;
    }
  }
  uint64_t v97 = 0;
  do
    *(unsigned char *)(*(void *)(a2 + 48) + v97++) = 0;
  while (v36 != v97);
  if (*(void *)(a2 + 72) <= 3uLL) {
    *(void *)(a2 + 72) = 4;
  }
LABEL_50:
  uint64_t v37 = *(void *)(a2 + 48);
  unint64_t v38 = ((_BYTE)v37 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v37 - *(void *)(a2 + 56) < v38)
  {
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v37 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(void *)(a2 + 48) -= v38;
  }
  else
  {
    *(void *)(a2 + 48) = v37 - v38;
    if (!v38) {
      goto LABEL_54;
    }
  }
  uint64_t v39 = 0;
  do
    *(unsigned char *)(*(void *)(a2 + 48) + v39++) = 0;
  while (v38 != v39);
LABEL_54:
  if (v7 != v26)
  {
    uint64_t v40 = v33 >> 2;
    do
    {
      --v40;
      int v41 = *(_DWORD *)&v34[4 * v40];
      if (*(void *)(a2 + 72) <= 3uLL) {
        *(void *)(a2 + 72) = 4;
      }
      uint64_t v42 = *(void *)(a2 + 32);
      uint64_t v43 = *(void *)(a2 + 40);
      uint64_t v44 = *(void *)(a2 + 48);
      unint64_t v45 = ((int)v44 - ((int)v42 + (int)v43)) & 3;
      if (v44 - *(void *)(a2 + 56) < v45)
      {
        sub_1CBF2C904((uint64_t *)a2, ((int)v44 - ((int)v42 + (int)v43)) & 3);
        *(void *)(a2 + 48) -= v45;
      }
      else
      {
        uint64_t v46 = v44 - v45;
        *(void *)(a2 + 48) = v46;
        if (!v45)
        {
          int v47 = v42 + v43 - v46;
          goto LABEL_66;
        }
      }
      uint64_t v48 = 0;
      do
        *(unsigned char *)(*(void *)(a2 + 48) + v48++) = 0;
      while (v45 != v48);
      uint64_t v43 = *(void *)(a2 + 40);
      uint64_t v46 = *(void *)(a2 + 48);
      uint64_t v42 = *(void *)(a2 + 32);
      int v47 = v42 - v46 + v43;
      if (*(void *)(a2 + 72) <= 3uLL) {
        *(void *)(a2 + 72) = 4;
      }
LABEL_66:
      unint64_t v49 = ((_BYTE)v46 - ((_BYTE)v42 + (_BYTE)v43)) & 3;
      uint64_t v50 = *(void *)(a2 + 56);
      if (v46 - v50 < v49)
      {
        sub_1CBF2C904((uint64_t *)a2, v49);
        *(void *)(a2 + 48) -= v49;
LABEL_68:
        uint64_t v52 = 0;
        do
          *(unsigned char *)(*(void *)(a2 + 48) + v52++) = 0;
        while (v49 != v52);
        uint64_t v51 = *(void *)(a2 + 48);
        uint64_t v50 = *(void *)(a2 + 56);
        goto LABEL_71;
      }
      uint64_t v51 = v46 - v49;
      *(void *)(a2 + 48) = v46 - v49;
      if (v49) {
        goto LABEL_68;
      }
LABEL_71:
      if ((unint64_t)(v51 - v50) <= 3)
      {
        sub_1CBF2C904((uint64_t *)a2, 4uLL);
        uint64_t v51 = *(void *)(a2 + 48);
      }
      *(_DWORD *)(v51 - 4) = v47 - v41 + 4;
      *(void *)(a2 + 48) = v51 - 4;
    }
    while (v40);
  }
  *(unsigned char *)(a2 + 70) = 0;
  if (*(void *)(a2 + 72) <= 3uLL) {
    *(void *)(a2 + 72) = 4;
  }
  uint64_t v54 = *(void *)(a2 + 48);
  uint64_t v53 = *(void *)(a2 + 56);
  unint64_t v55 = ((_BYTE)v54 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v54 - v53 < v55)
  {
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v54 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(void *)(a2 + 48) -= v55;
  }
  else
  {
    uint64_t v56 = v54 - v55;
    *(void *)(a2 + 48) = v54 - v55;
    if (!v55) {
      goto LABEL_83;
    }
  }
  uint64_t v57 = 0;
  do
    *(unsigned char *)(*(void *)(a2 + 48) + v57++) = 0;
  while (v55 != v57);
  uint64_t v56 = *(void *)(a2 + 48);
  uint64_t v53 = *(void *)(a2 + 56);
LABEL_83:
  if ((unint64_t)(v56 - v53) <= 3)
  {
    sub_1CBF2C904((uint64_t *)a2, 4uLL);
    uint64_t v56 = *(void *)(a2 + 48);
  }
  *(_DWORD *)(v56 - 4) = (unint64_t)v33 >> 2;
  uint64_t v58 = v56 - 4;
  *(void *)(a2 + 48) = v58;
  uint64_t v59 = *(void *)(a2 + 32);
  uint64_t v60 = *(void *)(a2 + 40);
  *(unsigned char *)(a2 + 70) = 1;
  int v61 = v59 - v58 + v60;
  if (v61)
  {
    if (*(void *)(a2 + 72) <= 3uLL) {
      *(void *)(a2 + 72) = 4;
    }
    unint64_t v62 = ((_BYTE)v58 - ((_BYTE)v59 + (_BYTE)v60)) & 3;
    if (v58 - *(void *)(a2 + 56) < v62)
    {
      sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v58 - ((_BYTE)v59 + (_BYTE)v60)) & 3);
      *(void *)(a2 + 48) -= v62;
    }
    else
    {
      uint64_t v63 = v58 - v62;
      *(void *)(a2 + 48) = v63;
      if (!v62)
      {
LABEL_93:
        int v65 = v60 - v63 + v59 - v61 + 4;
        if (v60 - v63 + v59 - v61 == -4 && *(unsigned char *)(a2 + 80) == 0) {
          goto LABEL_111;
        }
        if (*(void *)(a2 + 72) <= 3uLL) {
          *(void *)(a2 + 72) = 4;
        }
        unint64_t v67 = ((_BYTE)v63 - ((_BYTE)v59 + (_BYTE)v60)) & 3;
        unsigned int v68 = *(uint64_t **)(a2 + 56);
        if (v63 - (uint64_t)v68 < v67)
        {
          sub_1CBF2C904((uint64_t *)a2, v67);
          *(void *)(a2 + 48) -= v67;
        }
        else
        {
          uint64_t v69 = v63 - v67;
          *(void *)(a2 + 48) = v63 - v67;
          if (!v67)
          {
LABEL_104:
            if ((unint64_t)(v69 - (void)v68) <= 3)
            {
              sub_1CBF2C904((uint64_t *)a2, 4uLL);
              uint64_t v69 = *(void *)(a2 + 48);
              unsigned int v68 = *(uint64_t **)(a2 + 56);
            }
            *(_DWORD *)(v69 - 4) = v65;
            uint64_t v71 = v69 - 4;
            *(void *)(a2 + 48) = v71;
            uint64_t v72 = *(void *)(a2 + 32) - v71 + *(void *)(a2 + 40);
            if ((unint64_t)(v71 - (void)v68) <= 7)
            {
              sub_1CBF2C904((uint64_t *)a2, 8uLL);
              unsigned int v68 = *(uint64_t **)(a2 + 56);
            }
            uint64_t *v68 = v72 | 0x400000000;
            *(void *)(a2 + 56) += 8;
            ++*(_DWORD *)(a2 + 64);
            unsigned int v73 = *(unsigned __int16 *)(a2 + 68);
            if (v73 <= 4) {
              LOWORD(v73) = 4;
            }
            *(_WORD *)(a2 + 68) = v73;
            goto LABEL_111;
          }
        }
        uint64_t v70 = 0;
        do
          *(unsigned char *)(*(void *)(a2 + 48) + v70++) = 0;
        while (v67 != v70);
        uint64_t v69 = *(void *)(a2 + 48);
        unsigned int v68 = *(uint64_t **)(a2 + 56);
        goto LABEL_104;
      }
    }
    uint64_t v64 = 0;
    do
      *(unsigned char *)(*(void *)(a2 + 48) + v64++) = 0;
    while (v62 != v64);
    uint64_t v60 = *(void *)(a2 + 40);
    uint64_t v63 = *(void *)(a2 + 48);
    uint64_t v59 = *(void *)(a2 + 32);
    goto LABEL_93;
  }
LABEL_111:
  int v74 = sub_1CBF2CB78(a2, v61);
  int v75 = v74;
  *(unsigned char *)(a2 + 70) = 1;
  int v76 = *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 48) + *(_DWORD *)(a2 + 40);
  if (!*(unsigned char *)(a2 + 80))
  {
    if (!v74) {
      goto LABEL_138;
    }
LABEL_113:
    if (*(void *)(a2 + 72) <= 3uLL) {
      *(void *)(a2 + 72) = 4;
    }
    uint64_t v77 = *(void *)(a2 + 32);
    uint64_t v78 = *(void *)(a2 + 40);
    uint64_t v79 = *(void *)(a2 + 48);
    unint64_t v80 = ((_BYTE)v79 - ((_BYTE)v77 + (_BYTE)v78)) & 3;
    if (v79 - *(void *)(a2 + 56) < v80)
    {
      unint64_t v103 = ((_BYTE)v79 - ((_BYTE)v77 + (_BYTE)v78)) & 3;
      sub_1CBF2C904((uint64_t *)a2, v103);
      unint64_t v80 = v103;
      *(void *)(a2 + 48) -= v103;
    }
    else
    {
      uint64_t v81 = v79 - v80;
      *(void *)(a2 + 48) = v81;
      if (!v80)
      {
LABEL_120:
        int v83 = v78 - v81 + v77 - v75 + 4;
        if (v78 - v81 + v77 - v75 == -4 && *(unsigned char *)(a2 + 80) == 0) {
          goto LABEL_138;
        }
        if (*(void *)(a2 + 72) <= 3uLL) {
          *(void *)(a2 + 72) = 4;
        }
        unint64_t v85 = ((_BYTE)v81 - ((_BYTE)v77 + (_BYTE)v78)) & 3;
        int v86 = *(uint64_t **)(a2 + 56);
        if (v81 - (uint64_t)v86 < v85)
        {
          sub_1CBF2C904((uint64_t *)a2, v85);
          *(void *)(a2 + 48) -= v85;
        }
        else
        {
          uint64_t v87 = v81 - v85;
          *(void *)(a2 + 48) = v81 - v85;
          if (!v85)
          {
LABEL_131:
            if ((unint64_t)(v87 - (void)v86) <= 3)
            {
              sub_1CBF2C904((uint64_t *)a2, 4uLL);
              uint64_t v87 = *(void *)(a2 + 48);
              int v86 = *(uint64_t **)(a2 + 56);
            }
            *(_DWORD *)(v87 - 4) = v83;
            uint64_t v89 = v87 - 4;
            *(void *)(a2 + 48) = v89;
            uint64_t v90 = *(void *)(a2 + 32) - v89 + *(void *)(a2 + 40);
            if ((unint64_t)(v89 - (void)v86) <= 7)
            {
              sub_1CBF2C904((uint64_t *)a2, 8uLL);
              int v86 = *(uint64_t **)(a2 + 56);
            }
            *int v86 = v90 | 0x600000000;
            *(void *)(a2 + 56) += 8;
            ++*(_DWORD *)(a2 + 64);
            unsigned int v91 = *(unsigned __int16 *)(a2 + 68);
            if (v91 <= 6) {
              LOWORD(v91) = 6;
            }
            *(_WORD *)(a2 + 68) = v91;
            goto LABEL_138;
          }
        }
        uint64_t v88 = 0;
        do
          *(unsigned char *)(*(void *)(a2 + 48) + v88++) = 0;
        while (v85 != v88);
        uint64_t v87 = *(void *)(a2 + 48);
        int v86 = *(uint64_t **)(a2 + 56);
        goto LABEL_131;
      }
    }
    uint64_t v82 = 0;
    do
      *(unsigned char *)(*(void *)(a2 + 48) + v82++) = 0;
    while (v80 != v82);
    uint64_t v78 = *(void *)(a2 + 40);
    uint64_t v81 = *(void *)(a2 + 48);
    uint64_t v77 = *(void *)(a2 + 32);
    goto LABEL_120;
  }
  unsigned int v94 = sub_1CD4525F4(a2, 0);
  uint64_t v95 = *(uint64_t **)(a2 + 56);
  if (*(void *)(a2 + 48) - (void)v95 <= 7uLL)
  {
    unsigned int v98 = v94;
    sub_1CBF2C904((uint64_t *)a2, 8uLL);
    unsigned int v94 = v98;
    uint64_t v95 = *(uint64_t **)(a2 + 56);
  }
  uint64_t *v95 = v94 | 0x400000000;
  *(void *)(a2 + 56) += 8;
  ++*(_DWORD *)(a2 + 64);
  unsigned int v96 = *(unsigned __int16 *)(a2 + 68);
  if (v96 <= 4) {
    LOWORD(v96) = 4;
  }
  *(_WORD *)(a2 + 68) = v96;
  if (v75) {
    goto LABEL_113;
  }
LABEL_138:
  unsigned int v92 = sub_1CBF2CB78(a2, v76);
  if (v7) {
    operator delete(v7);
  }
  return v92 | 0x100000000;
}

uint64_t sub_1CD26DC48(uint64_t result)
{
  return result;
}

uint64_t sub_1CD26DC58(uint64_t a1)
{
  *(void *)a1 = &unk_1F26491F8;
  *(void *)(a1 + 104) = &unk_1F2646B98;
  if (*(_DWORD *)(a1 + 160) == 1)
  {
    uint64_t v4 = *(void *)(a1 + 120);
    if (v4) {
      MEMORY[0x1D25D9CB0](v4, 0x1000C8077774924);
    }
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(void *)(a1 + 24) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1CD26DD04(uint64_t a1)
{
  *(void *)a1 = &unk_1F26491F8;
  *(void *)(a1 + 104) = &unk_1F2646B98;
  if (*(_DWORD *)(a1 + 160) == 1)
  {
    uint64_t v3 = *(void *)(a1 + 120);
    if (v3) {
      MEMORY[0x1D25D9CB0](v3, 0x1000C8077774924);
    }
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(void *)(a1 + 24) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CD26DDD0()
{
  return "AGXProfilerWeightsView";
}

void sub_1CD26DDE0(uint64_t a1, unint64_t a2)
{
  unsigned int v5 = *(_DWORD **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 2) >= a2)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), 12 * ((12 * a2 - 12) / 0xC) + 12);
      v5 += 3 * a2;
    }
    *(void *)(a1 + ++*(_DWORD *)(result + 8) = v5;
  }
  else
  {
    unsigned int v6 = *(_DWORD **)a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(void *)a1) >> 2);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0x1555555555555555) {
      abort();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 2);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v10 = 0x1555555555555555;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0x1555555555555555) {
        sub_1CB833614();
      }
      int v11 = (char *)operator new(12 * v10);
    }
    else
    {
      int v11 = 0;
    }
    uint64_t v12 = &v11[12 * v7];
    uint64_t v13 = &v11[12 * v10];
    uint64_t v14 = 3 * a2;
    bzero(v12, 12 * ((4 * v14 - 12) / 0xCuLL) + 12);
    BOOL v15 = &v12[4 * v14];
    if (v5 != v6)
    {
      do
      {
        uint64_t v16 = *(void *)(v5 - 3);
        v5 -= 3;
        int v17 = v5[2];
        *(void *)(v12 - 12) = v16;
        v12 -= 12;
        *((_DWORD *)v12 + 2) = v17;
      }
      while (v5 != v6);
      unsigned int v5 = *(_DWORD **)a1;
    }
    *(void *)a1 = v12;
    *(void *)(a1 + ++*(_DWORD *)(result + 8) = v15;
    *(void *)(a1 + 16) = v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

uint64_t sub_1CD26DF8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  *(void *)a1 = &unk_1F2649290;
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = a5;
  *(void *)(a1 + 40) = a6;
  *(unsigned char *)(a1 + 4++*(_DWORD *)(result + 8) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 8++*(_DWORD *)(result + 8) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  *(void *)(a1 + 12++*(_DWORD *)(result + 8) = 0;
  *(void *)(a1 + 80) = &unk_1F2646F30;
  *(void *)(a1 + 144) = a1 + 56;
  *(_DWORD *)(a1 + 136) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 152) = a1 + 168;
  *(void *)(a1 + 160) = 0x8000000000;
  *(void *)(a1 + 48296) = a1 + 48312;
  *(void *)(a1 + 48304) = 0x600000000;
  *(_DWORD *)(a1 + 48360) = 0;
  *(void *)(a1 + 4836++*(_DWORD *)(result + 8) = a1 + 48384;
  *(void *)(a1 + 48376) = 0x600000000;
  *(_DWORD *)(a1 + 48432) = 0;
  sub_1CD271840((char **)(a1 + 152), a6);
  return a1;
}

unsigned char *sub_1CD26E06C(unsigned char *result)
{
  if (!result[48])
  {
    int v1 = result;
    uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)result + 152))(result);
    v1[48] = 1;
  }
  return result;
}

uint64_t sub_1CD26E0C0(uint64_t result, uint64_t a2)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a2 == 4)
  {
    uint64_t v3 = (void *)result;
    uint64_t v4 = result + 48296;
    (*(void (**)(uint64_t))(*(void *)result + 168))(result);
    unsigned int v5 = *(int **)(a2 + 8);
    uint64_t v6 = *((void *)v5 + 1);
    unsigned int v82 = *v5;
    uint64_t v80 = a2;
    uint64_t v81 = v3[19];
    int v7 = *(_DWORD *)(v4 + 136);
    unsigned int v8 = v7 + 63;
    uint64_t v9 = (v7 + 63) >> 6;
    int v83 = v86;
    int v85 = 6;
    if ((v7 + 63) >= 0x1C0)
    {
      unsigned int v84 = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unint64_t v10 = v86;
    if (v8 >= 0x40)
    {
      bzero(v86, 8 * v9);
      unint64_t v10 = v86;
    }
    unsigned int v84 = (v7 + 63) >> 6;
    int v87 = v7;
    int v11 = (void **)(v81 + 376 * v82 + 16);
    if (v11 != &v83)
    {
      uint64_t v12 = *(unsigned int *)(v81 + 376 * v82 + 24);
      if (v12 < v9)
      {
        if (*(_DWORD *)(v81 + 376 * v82 + 28) < v9)
        {
          *(_DWORD *)(v81 + 376 * v82 + 24) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v12) {
          memmove(*v11, v86, 8 * v12);
        }
        else {
          uint64_t v12 = 0;
        }
        if (v12 != v84) {
          memcpy((char *)*v11 + 8 * v12, (char *)v83 + 8 * v12, 8 * v84 - 8 * v12);
        }
      }
      else if (v8 >= 0x40)
      {
        memmove(*v11, v86, 8 * v9);
      }
      *(_DWORD *)(v81 + 376 * v82 + 24) = v9;
      unsigned int v84 = 0;
      int v7 = v87;
      unint64_t v10 = v83;
    }
    uint64_t v78 = v6;
    uint64_t v13 = v81 + 376 * v82;
    *(_DWORD *)(v13 + 80) = v7;
    uint64_t v14 = (int *)(v13 + 80);
    if (v10 != v86) {
      free(v10);
    }
    int v15 = *(_DWORD *)(v4 + 136);
    unsigned int v16 = v15 + 63;
    uint64_t v17 = (v15 + 63) >> 6;
    int v83 = v86;
    int v85 = 6;
    uint64_t v79 = v14;
    if ((v15 + 63) >= 0x1C0)
    {
      unsigned int v84 = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v18 = v86;
    if (v16 >= 0x40)
    {
      bzero(v86, 8 * v17);
      uint64_t v18 = v86;
    }
    unsigned int v84 = (v15 + 63) >> 6;
    int v87 = v15;
    uint64_t v19 = (void **)(v81 + 376 * v82 + 88);
    if (v19 != &v83)
    {
      uint64_t v20 = *(unsigned int *)(v81 + 376 * v82 + 96);
      if (v20 < v17)
      {
        if (*(_DWORD *)(v81 + 376 * v82 + 100) < v17)
        {
          *(_DWORD *)(v81 + 376 * v82 + 96) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v20) {
          memmove(*v19, v86, 8 * v20);
        }
        else {
          uint64_t v20 = 0;
        }
        if (v20 != v84) {
          memcpy((char *)*v19 + 8 * v20, (char *)v83 + 8 * v20, 8 * v84 - 8 * v20);
        }
      }
      else if (v16 >= 0x40)
      {
        memmove(*v19, v86, 8 * v17);
      }
      *(_DWORD *)(v81 + 376 * v82 + 96) = v17;
      unsigned int v84 = 0;
      int v15 = v87;
      uint64_t v18 = v83;
    }
    *(_DWORD *)(v81 + 376 * v82 + 152) = v15;
    if (v18 != v86) {
      free(v18);
    }
    int v21 = *(_DWORD *)(v4 + 136);
    unsigned int v22 = v21 + 63;
    uint64_t v23 = (v21 + 63) >> 6;
    int v83 = v86;
    int v85 = 6;
    if ((v21 + 63) >= 0x1C0)
    {
      unsigned int v84 = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v24 = v86;
    if (v22 >= 0x40)
    {
      bzero(v86, 8 * v23);
      int v24 = v86;
    }
    unsigned int v84 = (v21 + 63) >> 6;
    int v87 = v21;
    int v25 = (void **)(v81 + 376 * v82 + 160);
    if (v25 != &v83)
    {
      uint64_t v26 = *(unsigned int *)(v81 + 376 * v82 + 168);
      if (v26 < v23)
      {
        if (*(_DWORD *)(v81 + 376 * v82 + 172) < v23)
        {
          *(_DWORD *)(v81 + 376 * v82 + 16++*(_DWORD *)(result + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v26) {
          memmove(*v25, v86, 8 * v26);
        }
        else {
          uint64_t v26 = 0;
        }
        if (v26 != v84) {
          memcpy((char *)*v25 + 8 * v26, (char *)v83 + 8 * v26, 8 * v84 - 8 * v26);
        }
      }
      else if (v22 >= 0x40)
      {
        memmove(*v25, v86, 8 * v23);
      }
      *(_DWORD *)(v81 + 376 * v82 + 16++*(_DWORD *)(result + 8) = v23;
      unsigned int v84 = 0;
      int v21 = v87;
      int v24 = v83;
    }
    uint64_t v27 = v81 + 376 * v82;
    *(_DWORD *)(v27 + 224) = v21;
    if (v24 != v86) {
      free(v24);
    }
    unsigned int v28 = *(_DWORD *)(v78 + 312);
    if (v28)
    {
      uint64_t v29 = *(void *)(v78 + 304);
      uint64_t v30 = v29 + 48 * v28;
      do
      {
        unint64_t v31 = (void *)v3[3];
        uint64_t v32 = v31[6];
        if (v32)
        {
          int v33 = *(unsigned __int16 *)(v29 + 8);
          uint64_t v34 = (unsigned __int16 *)(v32 + 2 * *(unsigned int *)(*v31 + 24 * *(unsigned __int16 *)(v29 + 8) + 4));
          do
          {
            (*(void (**)(void *, uint64_t, void))(*v3 + 136))(v3, v27, (unsigned __int16)v33);
            int v35 = *v34++;
            v33 += v35;
          }
          while (v35);
        }
        v29 += 48;
      }
      while (v29 != v30);
    }
    unsigned int v36 = *(_DWORD *)(v78 + 24);
    if (v36)
    {
      uint64_t v37 = *(void *)(v78 + 16);
      uint64_t v38 = v37 + 136 * v36;
      do
      {
        uint64_t v39 = (void *)v3[3];
        uint64_t v40 = v39[6];
        if (v40)
        {
          int v41 = *(unsigned __int16 *)(v37 + 12);
          uint64_t v42 = (unsigned __int16 *)(v40 + 2 * *(unsigned int *)(*v39 + 24 * *(unsigned __int16 *)(v37 + 12) + 4));
          do
          {
            (*(void (**)(void *, uint64_t, void))(*v3 + 144))(v3, v27, (unsigned __int16)v41);
            int v43 = *v42++;
            v41 += v43;
          }
          while (v43);
        }
        v37 += 136;
      }
      while (v37 != v38);
    }
    int v44 = *v79;
    if (*(_DWORD *)(v4 + 64) < *v79)
    {
      int v65 = *(_DWORD *)(v4 + 64) & 0x3F;
      uint64_t v66 = *(unsigned int *)(v4 + 8);
      if (v65) {
        *(void *)(*(void *)v4 + 8 * v66 - 8) &= ~(-1 << v65);
      }
      unsigned int v67 = v66;
      *(_DWORD *)(v4 + 64) = v44;
      unsigned int v68 = v44 + 63;
      if (v66 != (v44 + 63) >> 6)
      {
        uint64_t v69 = v68 >> 6;
        if (v66 > v69)
        {
          *(_DWORD *)(v4 + ++*(_DWORD *)(result + 8) = v69;
          unsigned int v67 = v68 >> 6;
        }
        else
        {
          if (v69 > *(_DWORD *)(v4 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v69 != v66) {
            bzero((void *)(*(void *)v4 + 8 * v66), 8 * (v69 - v66));
          }
          unsigned int v67 = v69;
          *(_DWORD *)(v4 + ++*(_DWORD *)(result + 8) = v69;
          int v44 = *(_DWORD *)(v4 + 64);
        }
      }
      int v70 = v44 & 0x3F;
      if (v70) {
        *(void *)(*(void *)v4 + 8 * v67 - 8) &= ~(-1 << v70);
      }
    }
    unint64_t v45 = (const void **)(v4 + 72);
    uint64_t v46 = *(unsigned int *)(v81 + 376 * v82 + 24);
    if (v46)
    {
      int v47 = (uint64_t *)*v11;
      uint64_t v48 = *(void **)v4;
      do
      {
        uint64_t v49 = *v47++;
        *v48++ |= v49;
        --v46;
      }
      while (v46);
    }
    int v50 = *v79;
    if (*(_DWORD *)(v4 + 136) < *v79)
    {
      int v71 = *(_DWORD *)(v4 + 136) & 0x3F;
      uint64_t v72 = *(unsigned int *)(v4 + 80);
      if (v71)
      {
        uint64_t v77 = *(void *)(v4 + 72) + 8 * v72;
        *(void *)(v77 - 8) &= ~(-1 << v71);
      }
      unsigned int v73 = v72;
      *(_DWORD *)(v4 + 136) = v50;
      unsigned int v74 = v50 + 63;
      if (v72 != (v50 + 63) >> 6)
      {
        uint64_t v75 = v74 >> 6;
        if (v72 > v75)
        {
          *(_DWORD *)(v4 + 80) = v75;
          unsigned int v73 = v74 >> 6;
        }
        else
        {
          if (v75 > *(_DWORD *)(v4 + 84)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v75 != v72) {
            bzero((char *)*v45 + 8 * v72, 8 * (v75 - v72));
          }
          unsigned int v73 = v75;
          *(_DWORD *)(v4 + 80) = v75;
          int v50 = *(_DWORD *)(v4 + 136);
        }
      }
      int v76 = v50 & 0x3F;
      if (v76) {
        *((void *)*v45 + v73 - 1) &= ~(-1 << v76);
      }
    }
    uint64_t v51 = *(unsigned int *)(v81 + 376 * v82 + 24);
    if (v51)
    {
      uint64_t v52 = (uint64_t *)*v11;
      uint64_t v53 = *v45;
      do
      {
        uint64_t v54 = *v52++;
        *v53++ |= v54;
        --v51;
      }
      while (v51);
    }
    uint64_t v55 = v81 + 376 * v82;
    uint64_t v56 = v55 + 232;
    if (v55 + 232 != v4)
    {
      uint64_t v57 = *(unsigned int *)(v4 + 8);
      uint64_t v58 = *(unsigned int *)(v55 + 240);
      if (v58 >= v57)
      {
        if (v57) {
          memmove(*(void **)v56, *(const void **)v4, 8 * v57);
        }
      }
      else
      {
        if (*(_DWORD *)(v55 + 244) < v57)
        {
          *(_DWORD *)(v55 + 240) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v58) {
          memmove(*(void **)v56, *(const void **)v4, 8 * v58);
        }
        else {
          uint64_t v58 = 0;
        }
        uint64_t v59 = *(unsigned int *)(v4 + 8);
        if (v58 != v59) {
          memcpy((void *)(*(void *)v56 + 8 * v58), (const void *)(*(void *)v4 + 8 * v58), *(void *)v4 + 8 * v59 - (*(void *)v4 + 8 * v58));
        }
      }
      *(_DWORD *)(v56 + ++*(_DWORD *)(result + 8) = v57;
    }
    uint64_t v60 = (_DWORD *)(v81 + 376 * v82);
    v60[74] = *(_DWORD *)(v4 + 64);
    int v61 = (void **)(v60 + 76);
    if (v60 + 76 != (_DWORD *)v45)
    {
      uint64_t v62 = *(unsigned int *)(v4 + 80);
      uint64_t v63 = v60[78];
      if (v63 >= v62)
      {
        if (v62) {
          memmove(*v61, *v45, 8 * v62);
        }
      }
      else
      {
        if (v60[79] < v62)
        {
          v60[78] = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v63) {
          memmove(*v61, *v45, 8 * v63);
        }
        else {
          uint64_t v63 = 0;
        }
        uint64_t v64 = *(unsigned int *)(v4 + 80);
        if (v63 != v64) {
          memcpy((char *)*v61 + 8 * v63, (char *)*v45 + 8 * v63, (unsigned char *)*v45 + 8 * v64 - ((unsigned char *)*v45 + 8 * v63));
        }
      }
      *((_DWORD *)v61 + 2) = v62;
    }
    *(_DWORD *)(v81 + 376 * v82 + 36++*(_DWORD *)(result + 8) = *(_DWORD *)(v4 + 136);
    return (*(uint64_t (**)(void *, uint64_t))(*v3 + 176))(v3, v80);
  }
  return result;
}

void sub_1CD26EB54(uint64_t a1)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *(_DWORD *)(a1 + 48432);
  uint64_t v3 = (v2 + 63) >> 6;
  __src = v92;
  unsigned int v91 = 6;
  uint64_t v81 = (unsigned int *)(a1 + 48432);
  if (v2 + 63 >= 0x1C0)
  {
    unsigned int v90 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v2 + 63 >= 0x40)
  {
    bzero(v92, 8 * v3);
    unsigned int v90 = (v2 + 63) >> 6;
    unsigned int v93 = v2;
    if (v90 <= 1uLL) {
      uint64_t v4 = 1;
    }
    else {
      uint64_t v4 = (v2 + 63) >> 6;
    }
    memset(v92, 255, 8 * v4);
  }
  else
  {
    unsigned int v90 = (v2 + 63) >> 6;
    unsigned int v93 = v2;
  }
  if ((v2 & 0x3F) != 0) {
    v92[v3 - 1] &= ~(-1 << (v2 & 0x3F));
  }
  uint64_t v82 = a1;
  unsigned int v5 = *(_DWORD *)(a1 + 160);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 152);
    uint64_t v7 = v6 + 376 * v5;
    do
    {
      uint64_t v8 = v7 - 376;
      unsigned int v9 = v93;
      unsigned int v10 = *(_DWORD *)(v7 - 296);
      if (v93 < v10)
      {
        uint64_t v54 = v90;
        if ((v93 & 0x3F) != 0) {
          *((void *)__src + v90 - 1) &= ~(-1 << (v93 & 0x3F));
        }
        unsigned int v55 = v54;
        unsigned int v93 = v10;
        unsigned int v56 = v10 + 63;
        if (v54 != (v10 + 63) >> 6)
        {
          uint64_t v57 = v56 >> 6;
          if (v54 > v57)
          {
            unsigned int v90 = v56 >> 6;
            unsigned int v55 = v56 >> 6;
          }
          else
          {
            if (v57 > v91) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v57 != v54) {
              bzero((char *)__src + 8 * v54, 8 * (v57 - v54));
            }
            unsigned int v55 = v57;
            unsigned int v90 = v57;
            unsigned int v10 = v93;
          }
        }
        if ((v10 & 0x3F) != 0) {
          *((void *)__src + v55 - 1) &= ~(-1 << (v10 & 0x3F));
        }
        unsigned int v9 = v10;
      }
      uint64_t v11 = *(unsigned int *)(v7 - 352);
      if (v11)
      {
        uint64_t v12 = *(uint64_t **)(v7 - 360);
        uint64_t v13 = __src;
        do
        {
          uint64_t v14 = *v12++;
          *v13++ |= v14;
          --v11;
        }
        while (v11);
      }
      long long __dst = v87;
      uint64_t v86 = 0x600000000;
      unsigned int v15 = v90;
      if (v90)
      {
        if (v90 >= 7) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(v87, __src, 8 * v90);
        LODWORD(v86) = v15;
        unsigned int v9 = v93;
      }
      int v88 = v9;
      unsigned int v16 = *(_DWORD *)(v7 - 280);
      if (v16 >= v15) {
        uint64_t v17 = v15;
      }
      else {
        uint64_t v17 = v16;
      }
      if (v17)
      {
        uint64_t v18 = *(uint64_t **)(v7 - 288);
        uint64_t v19 = __dst;
        uint64_t v20 = v17;
        do
        {
          uint64_t v21 = *v18++;
          *v19++ &= v21;
          --v20;
        }
        while (v20);
      }
      if (v15 > v16)
      {
        unsigned int v22 = __dst;
        do
        {
          v22[v17] = 0;
          LODWORD(v17) = v17 + 1;
        }
        while (v15 != v17);
      }
      uint64_t v23 = (void *)(v7 - 216);
      if (*(_DWORD *)(v7 - 152) < v9)
      {
        int v24 = *(_DWORD *)(v7 - 152) & 0x3F;
        uint64_t v25 = *(unsigned int *)(v7 - 208);
        if (v24)
        {
          uint64_t v58 = *(void *)(v7 - 216) + 8 * v25;
          *(void *)(v58 - 8) &= ~(-1 << v24);
        }
        unsigned int v26 = v25;
        *(_DWORD *)(v7 - 152) = v9;
        unsigned int v27 = v9 + 63;
        if (v25 != (v9 + 63) >> 6)
        {
          uint64_t v28 = v27 >> 6;
          if (v25 > v28)
          {
            *(_DWORD *)(v7 - 20++*(_DWORD *)(result + 8) = v28;
            unsigned int v26 = v27 >> 6;
          }
          else
          {
            if (v28 > *(_DWORD *)(v7 - 204)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v28 != v25) {
              bzero((void *)(*v23 + 8 * v25), 8 * (v28 - v25));
            }
            unsigned int v26 = v28;
            *(_DWORD *)(v7 - 20++*(_DWORD *)(result + 8) = v28;
            unsigned int v9 = *(_DWORD *)(v7 - 152);
          }
        }
        int v29 = v9 & 0x3F;
        if (v29) {
          *(void *)(*v23 + 8 * v26 - 8) &= ~(-1 << v29);
        }
      }
      uint64_t v30 = v86;
      unint64_t v31 = __dst;
      if (v86)
      {
        uint64_t v32 = (void *)*v23;
        int v33 = (uint64_t *)__dst;
        uint64_t v34 = v86;
        do
        {
          uint64_t v35 = *v33++;
          *v32++ |= v35;
          --v34;
        }
        while (v34);
        uint64_t v36 = 8 * v30;
        uint64_t v37 = v31;
        do
        {
          *uint64_t v37 = ~*v37;
          ++v37;
          v36 -= 8;
        }
        while (v36);
        uint64_t v38 = v30;
      }
      else
      {
        uint64_t v38 = 0;
      }
      int v39 = v88;
      if ((v88 & 0x3F) != 0) {
        *(void *)&v31[8 * v38 - 8] &= ~(-1 << (v88 & 0x3F));
      }
      int v83 = (uint64_t *)v84;
      if (v30)
      {
        if (v31 == v87)
        {
          if (v30 >= 7) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memcpy(v84, v87, 8 * v30);
          int v39 = v88;
        }
        else
        {
          int v83 = (uint64_t *)v31;
          long long __dst = v87;
          HIDWORD(v86) = 0;
        }
        LODWORD(v86) = 0;
      }
      v84[12] = v39;
      unsigned int v40 = *(_DWORD *)(v7 - 64);
      if (v30 >= v40) {
        uint64_t v41 = v40;
      }
      else {
        uint64_t v41 = v30;
      }
      if (v41)
      {
        uint64_t v42 = v83;
        int v43 = *(void **)(v7 - 72);
        uint64_t v44 = v41;
        do
        {
          uint64_t v45 = *v42++;
          *v43++ &= v45;
          --v44;
        }
        while (v44);
      }
      if (v40 > v30)
      {
        uint64_t v46 = *(void *)(v7 - 72);
        do
        {
          *(void *)(v46 + 8 * v41) = 0;
          LODWORD(v41) = v41 + 1;
        }
        while (v40 != v41);
      }
      unsigned int v47 = v90;
      if (v30 >= v90) {
        uint64_t v48 = v90;
      }
      else {
        uint64_t v48 = v30;
      }
      if (v48)
      {
        uint64_t v49 = v83;
        int v50 = __src;
        uint64_t v51 = v48;
        do
        {
          uint64_t v52 = *v49++;
          *v50++ &= v52;
          --v51;
        }
        while (v51);
      }
      if (v47 > v30)
      {
        uint64_t v53 = __src;
        do
        {
          v53[v48] = 0;
          LODWORD(v4++*(_DWORD *)(result + 8) = v48 + 1;
        }
        while (v47 != v48);
      }
      if (v83 != (uint64_t *)v84) {
        free(v83);
      }
      if (__dst != v87) {
        free(__dst);
      }
      v7 -= 376;
    }
    while (v8 != v6);
  }
  unsigned int v59 = *v81;
  unsigned int v60 = *v81 + 63;
  uint64_t v61 = v60 >> 6;
  long long __dst = v87;
  HIDWORD(v86) = 6;
  if (v60 >= 0x1C0)
  {
    LODWORD(v86) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v62 = v87;
  if (v60 >= 0x40)
  {
    bzero(v87, 8 * v61);
    uint64_t v62 = v87;
  }
  LODWORD(v86) = v61;
  int v88 = v59;
  unsigned int v63 = *(_DWORD *)(v82 + 160);
  if (v63)
  {
    uint64_t v64 = *(void *)(v82 + 152);
    uint64_t v65 = v64 + 376 * v63;
    do
    {
      unsigned int v66 = *(_DWORD *)(v64 + 224);
      if (v59 < v66)
      {
        if ((v59 & 0x3F) != 0) {
          *((void *)__dst + v61 - 1) &= ~(-1 << (v59 & 0x3F));
        }
        int v88 = v66;
        unsigned int v79 = v66 + 63;
        if (v61 != (v66 + 63) >> 6)
        {
          uint64_t v80 = v79 >> 6;
          if (v61 > v80)
          {
            LODWORD(v86) = v79 >> 6;
            LODWORD(v61) = v79 >> 6;
          }
          else
          {
            if (v80 > HIDWORD(v86)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v80 != v61) {
              bzero((char *)__dst + 8 * v61, 8 * (v80 - v61));
            }
            LODWORD(v61) = v80;
            LODWORD(v86) = v80;
            unsigned int v66 = v88;
          }
        }
        if ((v66 & 0x3F) != 0) {
          *((void *)__dst + v61 - 1) &= ~(-1 << (v66 & 0x3F));
        }
        unsigned int v59 = v66;
      }
      uint64_t v67 = *(unsigned int *)(v64 + 168);
      if (v67)
      {
        unsigned int v68 = *(uint64_t **)(v64 + 160);
        uint64_t v69 = __dst;
        do
        {
          uint64_t v70 = *v68++;
          *v69++ |= v70;
          --v67;
        }
        while (v67);
      }
      LODWORD(v71) = *(_DWORD *)(v64 + 24);
      if (v71 >= v61) {
        uint64_t v71 = v61;
      }
      else {
        uint64_t v71 = v71;
      }
      if (v71)
      {
        uint64_t v72 = *(uint64_t **)(v64 + 16);
        unsigned int v73 = __dst;
        do
        {
          uint64_t v74 = *v72++;
          *v73++ &= ~v74;
          --v71;
        }
        while (v71);
      }
      LODWORD(v75) = *(_DWORD *)(v64 + 312);
      if (v61 >= v75) {
        uint64_t v75 = v75;
      }
      else {
        uint64_t v75 = v61;
      }
      if (v75)
      {
        int v76 = (uint64_t *)__dst;
        uint64_t v77 = *(void **)(v64 + 304);
        do
        {
          uint64_t v78 = *v76++;
          *v77++ &= ~v78;
          --v75;
        }
        while (v75);
      }
      v64 += 376;
    }
    while (v64 != v65);
    uint64_t v62 = __dst;
  }
  if (v62 != v87) {
    free(v62);
  }
  if (__src != v92) {
    free(__src);
  }
}

uint64_t sub_1CD26F364(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 56;
  MEMORY[0x1D25D9630](a1 + 56, "");
  (*(void (**)(void, uint64_t, void, const char *, void, void, uint64_t))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a2, 0, "", 0, *(void *)(a1 + 8), a1 + 80);
  unsigned int v5 = *(const char **)(a1 + 96);
  if (*(const char **)(a1 + 112) != v5)
  {
    *(void *)(a1 + 112) = v5;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)(a1 + 80), v5);
  }
  char v6 = *(unsigned char *)(a1 + 79);
  BOOL v7 = v6 < 0;
  unint64_t v8 = *(void *)(a1 + 64);
  if (v6 >= 0) {
    uint64_t v9 = v4;
  }
  else {
    uint64_t v9 = *(void *)(a1 + 56);
  }
  unint64_t v10 = v6 & 0x7F;
  if (v7) {
    unint64_t v11 = v8;
  }
  else {
    unint64_t v11 = v10;
  }
  v15[0] = v9;
  v15[1] = v11;
  unint64_t first_not_of = llvm::StringRef::find_first_not_of(v15, " \t\n\v\f\r", 6, 0);
  if (first_not_of >= v11) {
    unint64_t v13 = v11;
  }
  else {
    unint64_t v13 = first_not_of;
  }
  return v9 + v13;
}

void sub_1CD26F45C(uint64_t *a1, uint64_t a2)
{
  int v4 = sub_1CB9FA02C((void *)a2, 0, *(_DWORD *)(a2 + 64));
  if (v4 >= 0) {
    signed int v5 = v4 + 1;
  }
  else {
    signed int v5 = 0;
  }
  if (v5 < 0) {
    abort();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    BOOL v7 = operator new(v8 + 1);
    a1[1] = v6;
    a1[2] = v9 | 0x8000000000000000;
    *a1 = (uint64_t)v7;
    goto LABEL_11;
  }
  *((unsigned char *)a1 + 23) = v5;
  BOOL v7 = a1;
  if (v5) {
LABEL_11:
  }
    bzero(v7, v6);
  *((unsigned char *)v7 + v6) = 0;
  char v10 = *((unsigned char *)a1 + 23);
  BOOL v11 = v10 < 0;
  BOOL v12 = v11;
  uint64_t v13 = v10 & 0x7F;
  if (v11) {
    uint64_t v13 = a1[1];
  }
  if (v13)
  {
    uint64_t v14 = 0;
    unsigned int v15 = 1;
    do
    {
      if ((*(void *)(*(void *)a2 + 8 * ((v15 - 1) >> 6)) >> (v15 - 1))) {
        char v16 = 49;
      }
      else {
        char v16 = 48;
      }
      if (v12) {
        uint64_t v17 = (uint64_t *)*a1;
      }
      else {
        uint64_t v17 = a1;
      }
      *((unsigned char *)v17 + v14) = v16;
      uint64_t v14 = v15;
      char v18 = *((unsigned char *)a1 + 23);
      BOOL v11 = v18 < 0;
      BOOL v12 = v11;
      unint64_t v19 = v18 & 0x7F;
      if (v11) {
        unint64_t v19 = a1[1];
      }
    }
    while (v19 > v15++);
  }
}

llvm::raw_ostream *sub_1CD26F590(uint64_t a1, uint64_t a2)
{
  int v65 = 0;
  char v69 = 0;
  uint64_t v70 = 0;
  int v71 = 1;
  uint64_t v67 = 0;
  unsigned int v68 = 0;
  unsigned int v66 = 0;
  uint64_t v64 = &unk_1F2644C68;
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  uint64_t v74 = &v76;
  long long v75 = xmmword_1CDB159A0;
  sub_1CBF2ECF8((uint64_t)&v64, a2);
  int v4 = v68;
  if ((unint64_t)(v67 - v68) > 0x13)
  {
    *((_DWORD *)v68 + 4) = 171603813;
    *(_OWORD *)int v4 = *(_OWORD *)"\n\nAGXPressure view:\n";
    signed int v5 = v68 + 20;
    v68 += 20;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v64, "\n\nAGXPressure view:\n", 0x14uLL);
    signed int v5 = v68;
  }
  size_t v6 = v66;
  int64_t v7 = v5 - v66;
  if (v5 != v66)
  {
    unsigned int v68 = v66;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v64, v66);
  }
  int v8 = (*(uint64_t (**)(uint64_t, char *, int64_t))(*(void *)a2 + 56))(a2, v6, v7);
  unsigned int v9 = *(_DWORD *)(a1 + 160);
  if (v9)
  {
    unsigned int v10 = 0;
    uint64_t v11 = 376 * v9;
    uint64_t v12 = *(void *)(a1 + 152) + 304;
    do
    {
      int v13 = sub_1CB9FA02C((void *)v12, 0, *(_DWORD *)(v12 + 64));
      if (v10 <= v13 + 1) {
        int v14 = v13 + 1;
      }
      else {
        int v14 = v10;
      }
      if (v13 >= 0) {
        unsigned int v10 = v14;
      }
      v12 += 376;
      v11 -= 376;
    }
    while (v11);
  }
  else
  {
    unsigned int v10 = 0;
  }
  if (*(_DWORD *)(a1 + 48432) >= v10) {
    unsigned int v15 = v10;
  }
  else {
    unsigned int v15 = *(_DWORD *)(a1 + 48432);
  }
  char v16 = v68;
  if ((unint64_t)(v67 - v68) > 0x4E)
  {
    *((_OWORD *)v68 + 2) = *(_OWORD *)" loops may extend live range beyond that shown\n";
    qmemcpy(v16 + 48, "d live range beyond that shown\n", 31);
    qmemcpy(v16, "warning: branching backwards for", 32);
    v68 += 79;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v64, "warning: branching backwards for loops may extend live range beyond that shown\n", 0x4FuLL);
  }
  if (v15 < 0xC8)
  {
    if (v15 < 0x14) {
      goto LABEL_24;
    }
  }
  else
  {
    sub_1CD2716C8((llvm::raw_ostream *)&v64, v15, 3u);
  }
  sub_1CD2716C8((llvm::raw_ostream *)&v64, v15, 2u);
LABEL_24:
  sub_1CD2716C8((llvm::raw_ostream *)&v64, v15, 1u);
  sub_1CD2716C8((llvm::raw_ostream *)&v64, v15, 0);
  if (v15)
  {
    for (int i = 0; i != v15; ++i)
    {
      if (i) {
        char v18 = 104;
      }
      else {
        char v18 = 108;
      }
      unint64_t v19 = v68;
      if (v68 >= v67)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v64, v18);
      }
      else
      {
        ++v68;
        *unint64_t v19 = v18;
      }
    }
  }
  uint64_t v20 = v68;
  if (v68 >= v67)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v64, 10);
    if (!v15) {
      goto LABEL_42;
    }
  }
  else
  {
    ++v68;
    char *v20 = 10;
    if (!v15) {
      goto LABEL_42;
    }
  }
  unsigned int v21 = v15;
  do
  {
    unsigned int v22 = v68;
    if (v68 >= v67)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v64, 61);
    }
    else
    {
      ++v68;
      *unsigned int v22 = 61;
    }
    --v21;
  }
  while (v21);
LABEL_42:
  uint64_t v23 = v68;
  if (v68 >= v67)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v64, 10);
  }
  else
  {
    ++v68;
    *uint64_t v23 = 10;
  }
  unsigned int v24 = *(_DWORD *)(a1 + 160);
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *(void *)(a1 + 152);
    uint64_t v63 = v26 + 376 * v24;
    while (1)
    {
      uint64_t v27 = a1;
      uint64_t v28 = *(void *)(a1 + 32);
      if (v15) {
        break;
      }
LABEL_90:
      if (v8) {
        (*(void (**)(uint64_t))(*(void *)a2 + 32))(a2);
      }
      unsigned int v40 = v68;
      if ((unint64_t)(v67 - v68) > 6)
      {
        *(_DWORD *)(v68 + 3) = 540698727;
        *(_DWORD *)unsigned int v40 = 1734952992;
        v68 += 7;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v64, " High: ", 7uLL);
      }
      a1 = v27;
      int v41 = sub_1CB9FA02C((void *)(v26 + 304), 0, *(_DWORD *)(v26 + 368));
      if (v41 >= 0) {
        unint64_t v42 = (v41 + 1);
      }
      else {
        unint64_t v42 = 0;
      }
      sub_1CD098D14((llvm::raw_ostream *)&v64, v42, 0, 0, 0);
      int v43 = v68;
      if ((unint64_t)(v67 - v68) > 6)
      {
        *(_DWORD *)(v68 + 3) = 540697974;
        *(_DWORD *)int v43 = 1986612233;
        v68 += 7;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v64, "\tLive: ", 7uLL);
      }
      uint64_t v44 = *(unsigned int *)(v26 + 312);
      if (v44)
      {
        unsigned int v45 = 0;
        uint64_t v46 = *(int8x8_t **)(v26 + 304);
        uint64_t v47 = 8 * v44;
        do
        {
          int8x8_t v48 = *v46++;
          uint8x8_t v49 = (uint8x8_t)vcnt_s8(v48);
          v49.i16[0] = vaddlv_u8(v49);
          v45 += v49.i32[0];
          v47 -= 8;
        }
        while (v47);
      }
      else
      {
        unsigned int v45 = 0;
      }
      sub_1CD098D14((llvm::raw_ostream *)&v64, v45, 0, 0, 0);
      if (v67 == v68) {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v64, "\t", 1uLL);
      }
      else {
        *v68++ = 9;
      }
      uint64_t v51 = (const void *)sub_1CD26F364(v27, v28 + 168 * v25);
      size_t v52 = v50;
      uint64_t v53 = v68;
      if (v50 <= v67 - v68)
      {
        if (v50)
        {
          memcpy(v68, v51, v50);
          uint64_t v53 = &v68[v52];
          v68 += v52;
        }
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v64, (const char *)v51, v50);
        uint64_t v53 = v68;
      }
      if (v53 >= v67)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v64, 10);
      }
      else
      {
        unsigned int v68 = v53 + 1;
        *uint64_t v53 = 10;
      }
      v26 += 376;
      ++v25;
      if (v26 == v63) {
        goto LABEL_118;
      }
    }
    unsigned int v29 = 0;
    while (1)
    {
      if (v8) {
        (*(void (**)(uint64_t))(*(void *)a2 + 32))(a2);
      }
      uint64_t v30 = v29 >> 6;
      uint64_t v31 = 1 << v29;
      uint64_t v32 = *(void *)(*(void *)(v26 + 16) + 8 * v30) & (1 << v29);
      if ((*(void *)(*(void *)(v26 + 160) + 8 * v30) & (1 << v29)) != 0)
      {
        int v33 = v68;
        if (v32)
        {
          if ((unint64_t)(v67 - v68) > 2)
          {
            char v36 = -117;
            goto LABEL_80;
          }
          uint64_t v34 = "╋";
        }
        else
        {
          if ((unint64_t)(v67 - v68) > 2)
          {
            char v38 = -105;
            goto LABEL_85;
          }
          uint64_t v34 = "┗";
        }
        goto LABEL_71;
      }
      if (v32)
      {
        int v33 = v68;
        if ((unint64_t)(v67 - v68) > 2)
        {
          char v38 = -109;
LABEL_85:
          v33[2] = v38;
          __int16 v37 = -27422;
          goto LABEL_86;
        }
        uint64_t v34 = "┓";
        goto LABEL_71;
      }
      if ((*(void *)(*(void *)(v26 + 88) + 8 * v30) & v31) != 0)
      {
        int v33 = v68;
        if ((unint64_t)(v67 - v68) > 2)
        {
          char v38 = -96;
          goto LABEL_85;
        }
        uint64_t v34 = "┠";
        goto LABEL_71;
      }
      if ((*(void *)(*(void *)(v26 + 304) + 8 * v30) & v31) != 0) {
        break;
      }
      if ((*(void *)(*(void *)(v26 + 232) + 8 * v30) & v31) != 0)
      {
        if (v8) {
          (*(void (**)(uint64_t, void, uint64_t, void))(*(void *)a2 + 24))(a2, 0, 1, 0);
        }
        int v33 = v68;
        if ((unint64_t)(v67 - v68) > 2)
        {
          char v36 = -114;
LABEL_80:
          v33[2] = v36;
          __int16 v37 = -27166;
LABEL_86:
          *(_WORD *)int v33 = v37;
          int v39 = v68 + 3;
LABEL_87:
          unsigned int v68 = v39;
          goto LABEL_73;
        }
        uint64_t v34 = "╎";
LABEL_71:
        size_t v35 = 3;
        goto LABEL_72;
      }
      if (v8) {
        (*(void (**)(uint64_t, void, void, void))(*(void *)a2 + 24))(a2, 0, 0, 0);
      }
      if ((unint64_t)(v67 - v68) > 1)
      {
        *(_WORD *)unsigned int v68 = -18494;
        int v39 = v68 + 2;
        goto LABEL_87;
      }
      uint64_t v34 = "·";
      size_t v35 = 2;
LABEL_72:
      llvm::raw_ostream::write((llvm::raw_ostream *)&v64, v34, v35);
LABEL_73:
      if (v15 == ++v29) {
        goto LABEL_90;
      }
    }
    int v33 = v68;
    if ((unint64_t)(v67 - v68) > 2)
    {
      char v38 = -125;
      goto LABEL_85;
    }
    uint64_t v34 = "┃";
    goto LABEL_71;
  }
LABEL_118:
  if ((unint64_t)(v67 - v68) > 7)
  {
    *(void *)unsigned int v68 = 0xA3A646E6567654CLL;
    uint64_t v54 = v68 + 8;
    v68 += 8;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v64, "Legend:\n", 8uLL);
    uint64_t v54 = v68;
  }
  if ((unint64_t)(v67 - v54) > 9)
  {
    *((_WORD *)v54 + 4) = 2662;
    *(void *)uint64_t v54 = *(void *)"┓ - Def\n";
    unsigned int v55 = v68 + 10;
    v68 += 10;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v64, "┓ - Def\n", 0xAuLL);
    unsigned int v55 = v68;
  }
  if ((unint64_t)(v67 - v55) > 9)
  {
    *((_WORD *)v55 + 4) = 2661;
    *(void *)unsigned int v55 = *(void *)"┠ - Use\n";
    unsigned int v56 = v68 + 10;
    v68 += 10;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v64, "┠ - Use\n", 0xAuLL);
    unsigned int v56 = v68;
  }
  if ((unint64_t)(v67 - (char *)v56) > 0xE)
  {
    *unsigned int v56 = *(void *)"┗ - Last use\n";
    *(void *)((char *)v56 + 7) = *(void *)"ast use\n";
    uint64_t v57 = v68 + 15;
    v68 += 15;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v64, "┗ - Last use\n", 0xFuLL);
    uint64_t v57 = v68;
  }
  if ((unint64_t)(v67 - v57) > 0x17)
  {
    *(_OWORD *)uint64_t v57 = *(_OWORD *)"╋ - Last use then Def\n";
    *((void *)v57 + 2) = *(void *)"hen Def\n";
    uint64_t v58 = v68 + 24;
    v68 += 24;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v64, "╋ - Last use then Def\n", 0x18uLL);
    uint64_t v58 = v68;
  }
  if ((unint64_t)(v67 - v58) > 0xA)
  {
    *(_DWORD *)(v58 + 7) = 174421609;
    *(void *)uint64_t v58 = *(void *)"┃ - Live\n";
    v68 += 11;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v64, "┃ - Live\n", 0xBuLL);
  }
  (*(void (**)(uint64_t, void, uint64_t, void))(*(void *)v72 + 24))(v72, 0, 1, 0);
  unsigned int v59 = v68;
  if ((unint64_t)(v67 - v68) > 2)
  {
    v68[2] = -114;
    *(_WORD *)unsigned int v59 = -27166;
    v68 += 3;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v64, "╎", 3uLL);
  }
  (*(void (**)(uint64_t))(*(void *)v72 + 32))(v72);
  unsigned int v60 = v68;
  if ((unint64_t)(v67 - v68) > 0x19)
  {
    *(_OWORD *)unsigned int v68 = *(_OWORD *)" - Allocated but not Live\n";
    *(_OWORD *)((char *)v60 + 10) = *(_OWORD *)"ed but not Live\n";
    v68 += 26;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v64, " - Allocated but not Live\n", 0x1AuLL);
  }
  (*(void (**)(uint64_t, void, void, void))(*(void *)v72 + 24))(v72, 0, 0, 0);
  if ((unint64_t)(v67 - v68) > 1)
  {
    *(_WORD *)unsigned int v68 = -18494;
    v68 += 2;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v64, "·", 2uLL);
  }
  (*(void (**)(uint64_t))(*(void *)v72 + 32))(v72);
  uint64_t v61 = v68;
  if ((unint64_t)(v67 - v68) > 0x10)
  {
    v68[16] = 10;
    *(_OWORD *)uint64_t v61 = *(_OWORD *)" - Not allocated\n";
    v68 += 17;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v64, " - Not allocated\n", 0x11uLL);
  }
  return sub_1CBF2EF74((llvm::raw_ostream *)&v64);
}

void sub_1CD270108(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  unint64_t v44 = 0;
  long long v2 = 0uLL;
  long long v43 = 0u;
  unsigned int v3 = *(_DWORD *)(a1 + 160);
  if (!v3)
  {
    unint64_t v32 = 0;
    goto LABEL_58;
  }
  uint64_t v33 = a2;
  uint64_t v5 = 0;
  uint64_t v6 = *(void *)(a1 + 152);
  uint64_t v34 = v6 + 376 * v3;
  do
  {
    uint64_t v7 = *(void *)(a1 + 32);
    sub_1CBF2C538(v48, "Live", 4uLL);
    uint64_t v8 = *(unsigned int *)(v6 + 312);
    if (v8)
    {
      unsigned int v9 = 0;
      unsigned int v10 = *(int8x8_t **)(v6 + 304);
      uint64_t v11 = 8 * v8;
      do
      {
        int8x8_t v12 = *v10++;
        uint8x8_t v13 = (uint8x8_t)vcnt_s8(v12);
        v13.i16[0] = vaddlv_u8(v13);
        v9 += v13.i32[0];
        v11 -= 8;
      }
      while (v11);
    }
    else
    {
      unsigned int v9 = 0;
    }
    uint64_t v14 = v7 + 168 * v5;
    LOWORD(v49) = 3;
    uint64_t v50 = v9;
    sub_1CBF2C538(v51, "High", 4uLL);
    int v15 = sub_1CB9FA02C((void *)(v6 + 304), 0, *(_DWORD *)(v6 + 368));
    if (v15 >= 0) {
      uint64_t v16 = (v15 + 1);
    }
    else {
      uint64_t v16 = 0;
    }
    __int16 v52 = 3;
    uint64_t v53 = v16;
    sub_1CBF2C538(v54, "Instr", 5uLL);
    sub_1CBF2C538(__p, "Asm", 3uLL);
    uint64_t v17 = sub_1CD26F364(a1, v14);
    if (v18 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    unint64_t v19 = (const void *)v17;
    uint64_t v20 = (void *)v18;
    if (v18 >= 0x17)
    {
      uint64_t v22 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17) {
        uint64_t v22 = v18 | 7;
      }
      uint64_t v23 = v22 + 1;
      unsigned int v21 = (void **)operator new(v22 + 1);
      __dst[1] = v20;
      unint64_t v36 = v23 | 0x8000000000000000;
      __dst[0] = v21;
    }
    else
    {
      HIBYTE(v36) = v18;
      unsigned int v21 = __dst;
      if (!v18) {
        goto LABEL_18;
      }
    }
    memmove(v21, v19, (size_t)v20);
LABEL_18:
    *((unsigned char *)v20 + (void)v21) = 0;
    sub_1CD452764((uint64_t)v47, (unint64_t)__dst);
    sub_1CD451B70((uint64_t)&v37, (uint64_t)__p, 1);
    __int16 v55 = 7;
    uint64_t v56 = v37;
    uint64_t v57 = v38;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    int v58 = v39;
    int v39 = 0;
    sub_1CD451B70((uint64_t)&v40, (uint64_t)v48, 3);
    uint64_t v24 = 21;
    do
    {
      llvm::json::Value::destroy((llvm::json::Value *)&v47[v24 * 8]);
      sub_1CB833F88((uint64_t *)&__p[v24], 0);
      v24 -= 7;
    }
    while (v24 * 8);
    sub_1CD452448((unsigned int *)&v37);
    MEMORY[0x1D25D9CD0](v37, 8);
    llvm::json::Value::destroy((llvm::json::Value *)v47);
    sub_1CB833F88((uint64_t *)__p, 0);
    if (SHIBYTE(v36) < 0) {
      operator delete(__dst[0]);
    }
    sub_1CBF2C538(v48, "Defs", 4uLL);
    sub_1CD26F45C((uint64_t *)__p, v6 + 16);
    sub_1CD271EB0((uint64_t)&v37, (uint64_t)&v40, (uint64_t)v48, (uint64_t)__p);
    if (v46 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v25 = v48[0];
    v48[0] = 0;
    if (v25)
    {
      if (*((char *)v25 + 23) < 0) {
        operator delete(*v25);
      }
      MEMORY[0x1D25D9CE0](v25, 0x1012C40EC159624);
    }
    sub_1CBF2C538(v48, "Uses", 4uLL);
    sub_1CD26F45C((uint64_t *)__p, v6 + 88);
    sub_1CD271EB0((uint64_t)&v37, (uint64_t)&v40, (uint64_t)v48, (uint64_t)__p);
    if (v46 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v26 = v48[0];
    v48[0] = 0;
    if (v26)
    {
      if (*((char *)v26 + 23) < 0) {
        operator delete(*v26);
      }
      MEMORY[0x1D25D9CE0](v26, 0x1012C40EC159624);
    }
    sub_1CBF2C538(v48, "LastUses", 8uLL);
    sub_1CD26F45C((uint64_t *)__p, v6 + 160);
    sub_1CD271EB0((uint64_t)&v37, (uint64_t)&v40, (uint64_t)v48, (uint64_t)__p);
    if (v46 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v27 = v48[0];
    v48[0] = 0;
    if (v27)
    {
      if (*((char *)v27 + 23) < 0) {
        operator delete(*v27);
      }
      MEMORY[0x1D25D9CE0](v27, 0x1012C40EC159624);
    }
    sub_1CBF2C538(v48, "AllocGPRs", 9uLL);
    sub_1CD26F45C((uint64_t *)__p, v6 + 232);
    sub_1CD271EB0((uint64_t)&v37, (uint64_t)&v40, (uint64_t)v48, (uint64_t)__p);
    if (v46 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v28 = v48[0];
    v48[0] = 0;
    if (v28)
    {
      if (*((char *)v28 + 23) < 0) {
        operator delete(*v28);
      }
      MEMORY[0x1D25D9CE0](v28, 0x1012C40EC159624);
    }
    sub_1CBF2C538(v48, "LiveGPRs", 8uLL);
    sub_1CD26F45C((uint64_t *)__p, v6 + 304);
    sub_1CD271EB0((uint64_t)&v37, (uint64_t)&v40, (uint64_t)v48, (uint64_t)__p);
    if (v46 < 0) {
      operator delete(__p[0]);
    }
    unsigned int v29 = v48[0];
    v48[0] = 0;
    if (v29)
    {
      if (*((char *)v29 + 23) < 0) {
        operator delete(*v29);
      }
      MEMORY[0x1D25D9CE0](v29, 0x1012C40EC159624);
    }
    LOWORD(v48[0]) = 7;
    v48[1] = v40;
    v48[2] = v41;
    unsigned int v40 = 0;
    int v41 = 0;
    int v49 = v42;
    int v42 = 0;
    uint64_t v30 = *((void *)&v43 + 1);
    if (*((void *)&v43 + 1) >= v44)
    {
      uint64_t v31 = sub_1CBF2C6D0((unsigned __int16 **)&v43, (unsigned __int16 *)v48);
    }
    else
    {
      llvm::json::Value::moveFrom(*((uint64_t *)&v43 + 1), (unsigned __int16 *)v48);
      uint64_t v31 = v30 + 32;
    }
    *((void *)&v43 + 1) = v31;
    llvm::json::Value::destroy((llvm::json::Value *)v48);
    sub_1CD452448((unsigned int *)&v40);
    MEMORY[0x1D25D9CD0](v40, 8);
    v6 += 376;
    ++v5;
  }
  while (v6 != v34);
  long long v2 = v43;
  unint64_t v32 = v44;
  a2 = v33;
LABEL_58:
  *(_WORD *)a2 = 8;
  *(_OWORD *)(a2 + ++*(_DWORD *)(result + 8) = v2;
  *(void *)(a2 + 24) = v32;
  unint64_t v44 = 0;
  long long v43 = 0uLL;
  v48[0] = (void **)&v43;
  sub_1CBF2C7E0(v48);
}

uint64_t sub_1CD2706F4(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 160);
  if (v3)
  {
    uint64_t v59 = a1;
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    uint64_t v5 = 0;
    int v4 = 0;
    uint64_t v62 = *(void *)(a1 + 152);
    uint64_t v167 = v62 + 376 * v3;
    while (1)
    {
      unint64_t v171 = (unint64_t)v61;
      uint64_t v63 = *(unsigned int *)(v62 + 312);
      if (v63)
      {
        int v64 = 0;
        int v65 = *(int8x8_t **)(v62 + 304);
        uint64_t v66 = 8 * v63;
        do
        {
          int8x8_t v67 = *v65++;
          uint8x8_t v68 = (uint8x8_t)vcnt_s8(v67);
          v68.i16[0] = vaddlv_u8(v68);
          v64 += v68.i32[0];
          v66 -= 8;
        }
        while (v66);
      }
      else
      {
        int v64 = 0;
      }
      uint64_t v69 = *(void *)(v59 + 32) + 168 * v60;
      int v70 = sub_1CB9FA02C((void *)(v62 + 304), 0, *(_DWORD *)(v62 + 368));
      if (v70 >= 0) {
        int v71 = v70 + 1;
      }
      else {
        int v71 = 0;
      }
      int v172 = v71;
      uint64_t v72 = sub_1CD26F364(v59, v69);
      if (v73 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_259:
      }
        abort();
      uint64_t v74 = (const void *)v72;
      size_t v75 = v73;
      uint64_t v169 = v60;
      uint64_t v170 = v5;
      if (v73 >= 0x17) {
        break;
      }
      HIBYTE(v185) = v73;
      p_dst = (void **)&__dst;
      if (v73) {
        goto LABEL_99;
      }
LABEL_100:
      *((unsigned char *)p_dst + v75) = 0;
      if (v185 >= 0) {
        unsigned int v79 = (void **)&__dst;
      }
      else {
        unsigned int v79 = __dst;
      }
      if (v185 >= 0) {
        size_t v80 = HIBYTE(v185) & 0x7F;
      }
      else {
        size_t v80 = v184;
      }
      int v81 = sub_1CBF2F03C(a2, v79, v80);
      sub_1CD26F45C((uint64_t *)v181, v62 + 16);
      if (v182 >= 0) {
        uint64_t v82 = v181;
      }
      else {
        uint64_t v82 = (void **)v181[0];
      }
      if (v182 >= 0) {
        size_t v83 = v182 & 0x7F;
      }
      else {
        size_t v83 = (size_t)v181[1];
      }
      int v84 = sub_1CBF2F03C(a2, v82, v83);
      sub_1CD26F45C((uint64_t *)v179, v62 + 88);
      if (v180 >= 0) {
        int v85 = v179;
      }
      else {
        int v85 = (void **)v179[0];
      }
      if (v180 >= 0) {
        size_t v86 = v180 & 0x7F;
      }
      else {
        size_t v86 = (size_t)v179[1];
      }
      int v87 = sub_1CBF2F03C(a2, v85, v86);
      sub_1CD26F45C((uint64_t *)v177, v62 + 160);
      if (v178 >= 0) {
        int v88 = v177;
      }
      else {
        int v88 = (void **)v177[0];
      }
      if (v178 >= 0) {
        size_t v89 = v178 & 0x7F;
      }
      else {
        size_t v89 = (size_t)v177[1];
      }
      int v90 = sub_1CBF2F03C(a2, v88, v89);
      sub_1CD26F45C((uint64_t *)v175, v62 + 232);
      if (v176 >= 0) {
        unsigned int v91 = v175;
      }
      else {
        unsigned int v91 = (void **)v175[0];
      }
      if (v176 >= 0) {
        size_t v92 = v176 & 0x7F;
      }
      else {
        size_t v92 = (size_t)v175[1];
      }
      int v93 = sub_1CBF2F03C(a2, v91, v92);
      sub_1CD26F45C((uint64_t *)__p, v62 + 304);
      if (v174 >= 0) {
        uint64_t v94 = __p;
      }
      else {
        uint64_t v94 = (void **)__p[0];
      }
      if (v174 >= 0) {
        size_t v95 = v174 & 0x7F;
      }
      else {
        size_t v95 = (size_t)__p[1];
      }
      int v96 = sub_1CBF2F03C(a2, v94, v95);
      int v97 = v81;
      int v98 = v84;
      int v99 = v87;
      int v100 = v90;
      int v101 = v93;
      *(unsigned char *)(a2 + 70) = 1;
      int v102 = *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 48) + *(_DWORD *)(a2 + 40);
      sub_1CC780134((uint64_t *)a2, 14, v96);
      sub_1CC780134((uint64_t *)a2, 12, v101);
      sub_1CC780134((uint64_t *)a2, 10, v100);
      sub_1CC780134((uint64_t *)a2, 8, v99);
      sub_1CC780134((uint64_t *)a2, 6, v98);
      sub_1CC780134((uint64_t *)a2, 4, v97);
      int v103 = sub_1CBF2CB78(a2, v102);
      *(unsigned char *)(a2 + 70) = 1;
      uint64_t v104 = *(void *)(a2 + 40);
      uint64_t v105 = *(void *)(a2 + 48);
      uint64_t v106 = *(void *)(a2 + 32);
      if (!v103) {
        goto LABEL_164;
      }
      int v107 = v103;
      if (*(void *)(a2 + 72) <= 3uLL) {
        *(void *)(a2 + 72) = 4;
      }
      unint64_t v108 = ((_BYTE)v105 - ((_BYTE)v106 + (_BYTE)v104)) & 3;
      if (v105 - *(void *)(a2 + 56) < v108)
      {
        sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v105 - ((_BYTE)v106 + (_BYTE)v104)) & 3);
        *(void *)(a2 + 48) -= v108;
LABEL_143:
        uint64_t v112 = 0;
        do
          *(unsigned char *)(*(void *)(a2 + 48) + v112++) = 0;
        while (v108 != v112);
        uint64_t v110 = *(void *)(a2 + 40);
        uint64_t v109 = *(void *)(a2 + 48);
        uint64_t v111 = *(void *)(a2 + 32);
        goto LABEL_146;
      }
      uint64_t v109 = v105 - v108;
      *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v105 - v108;
      if ((((_BYTE)v105 - ((_BYTE)v106 + (_BYTE)v104)) & 3) != 0) {
        goto LABEL_143;
      }
      LODWORD(v110) = v104;
      LODWORD(v111) = v106;
LABEL_146:
      int v113 = v110 - v109 + v111 - v107 + 4;
      if (v110 - v109 + v111 - v107 == -4 && *(unsigned char *)(a2 + 80) == 0) {
        goto LABEL_164;
      }
      if (*(void *)(a2 + 72) <= 3uLL) {
        *(void *)(a2 + 72) = 4;
      }
      unint64_t v115 = ((_BYTE)v109 - ((_BYTE)v111 + (_BYTE)v110)) & 3;
      uint64_t v116 = *(uint64_t **)(a2 + 56);
      if (v109 - (uint64_t)v116 < v115)
      {
        sub_1CBF2C904((uint64_t *)a2, v115);
        *(void *)(a2 + 48) -= v115;
LABEL_154:
        uint64_t v118 = 0;
        do
          *(unsigned char *)(*(void *)(a2 + 48) + v118++) = 0;
        while (v115 != v118);
        uint64_t v117 = *(void *)(a2 + 48);
        uint64_t v116 = *(uint64_t **)(a2 + 56);
        goto LABEL_157;
      }
      uint64_t v117 = v109 - v115;
      *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v109 - v115;
      if (v115) {
        goto LABEL_154;
      }
LABEL_157:
      if ((unint64_t)(v117 - (void)v116) <= 3)
      {
        sub_1CBF2C904((uint64_t *)a2, 4uLL);
        uint64_t v117 = *(void *)(a2 + 48);
        uint64_t v116 = *(uint64_t **)(a2 + 56);
      }
      *(_DWORD *)(v117 - 4) = v113;
      uint64_t v119 = v117 - 4;
      *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v119;
      uint64_t v120 = *(void *)(a2 + 32);
      uint64_t v121 = *(void *)(a2 + 40);
      if ((unint64_t)(v119 - (void)v116) <= 7)
      {
        sub_1CBF2C904((uint64_t *)a2, 8uLL);
        uint64_t v116 = *(uint64_t **)(a2 + 56);
      }
      *uint64_t v116 = (v120 - v119 + v121) | 0x800000000;
      *(void *)(a2 + 56) += 8;
      ++*(_DWORD *)(a2 + 64);
      unsigned int v122 = *(unsigned __int16 *)(a2 + 68);
      if (v122 <= 8) {
        LOWORD(v122) = 8;
      }
      *(_WORD *)(a2 + 6++*(_DWORD *)(result + 8) = v122;
LABEL_164:
      int v123 = v172;
      if (!v172 && !*(unsigned char *)(a2 + 80))
      {
        BOOL v124 = 1;
        uint64_t v59 = a1;
        if (v64) {
          goto LABEL_183;
        }
        goto LABEL_182;
      }
      if (*(void *)(a2 + 72) <= 3uLL) {
        *(void *)(a2 + 72) = 4;
      }
      uint64_t v126 = *(void *)(a2 + 48);
      uint64_t v125 = *(uint64_t **)(a2 + 56);
      unint64_t v127 = ((_BYTE)v126 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
      if (v126 - (uint64_t)v125 < v127)
      {
        sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v126 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
        int v123 = v172;
        *(void *)(a2 + 48) -= v127;
      }
      else
      {
        uint64_t v128 = v126 - v127;
        *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v126 - v127;
        if (!v127) {
          goto LABEL_175;
        }
      }
      uint64_t v129 = 0;
      do
        *(unsigned char *)(*(void *)(a2 + 48) + v129++) = 0;
      while (v127 != v129);
      uint64_t v128 = *(void *)(a2 + 48);
      uint64_t v125 = *(uint64_t **)(a2 + 56);
LABEL_175:
      if ((unint64_t)(v128 - (void)v125) <= 3)
      {
        sub_1CBF2C904((uint64_t *)a2, 4uLL);
        int v123 = v172;
        uint64_t v128 = *(void *)(a2 + 48);
        uint64_t v125 = *(uint64_t **)(a2 + 56);
      }
      *(_DWORD *)(v128 - 4) = v123;
      uint64_t v130 = v128 - 4;
      *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v130;
      uint64_t v131 = *(void *)(a2 + 32);
      uint64_t v132 = *(void *)(a2 + 40);
      if ((unint64_t)(v130 - (void)v125) <= 7)
      {
        sub_1CBF2C904((uint64_t *)a2, 8uLL);
        uint64_t v125 = *(uint64_t **)(a2 + 56);
      }
      *uint64_t v125 = (v131 - v130 + v132) | 0x600000000;
      *(void *)(a2 + 56) += 8;
      ++*(_DWORD *)(a2 + 64);
      unsigned int v133 = *(unsigned __int16 *)(a2 + 68);
      if (v133 <= 6) {
        LOWORD(v133) = 6;
      }
      *(_WORD *)(a2 + 6++*(_DWORD *)(result + 8) = v133;
      BOOL v124 = *(unsigned char *)(a2 + 80) == 0;
      uint64_t v59 = a1;
      if (v64)
      {
LABEL_183:
        if (*(void *)(a2 + 72) <= 3uLL) {
          *(void *)(a2 + 72) = 4;
        }
        uint64_t v135 = *(void *)(a2 + 48);
        uint64_t v134 = *(uint64_t **)(a2 + 56);
        unint64_t v136 = ((_BYTE)v135 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
        if (v135 - (uint64_t)v134 >= v136)
        {
          uint64_t v137 = v135 - v136;
          *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v135 - v136;
          if (v136)
          {
LABEL_187:
            uint64_t v138 = 0;
            do
              *(unsigned char *)(*(void *)(a2 + 48) + v138++) = 0;
            while (v136 != v138);
            uint64_t v137 = *(void *)(a2 + 48);
            uint64_t v134 = *(uint64_t **)(a2 + 56);
          }
          if ((unint64_t)(v137 - (void)v134) <= 3)
          {
            sub_1CBF2C904((uint64_t *)a2, 4uLL);
            uint64_t v137 = *(void *)(a2 + 48);
            uint64_t v134 = *(uint64_t **)(a2 + 56);
          }
          *(_DWORD *)(v137 - 4) = v64;
          uint64_t v139 = v137 - 4;
          *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v139;
          uint64_t v140 = *(void *)(a2 + 32);
          uint64_t v141 = *(void *)(a2 + 40);
          if ((unint64_t)(v139 - (void)v134) <= 7)
          {
            sub_1CBF2C904((uint64_t *)a2, 8uLL);
            uint64_t v134 = *(uint64_t **)(a2 + 56);
          }
          *uint64_t v134 = (v140 - v139 + v141) | 0x400000000;
          *(void *)(a2 + 56) += 8;
          ++*(_DWORD *)(a2 + 64);
          unsigned int v142 = *(unsigned __int16 *)(a2 + 68);
          if (v142 <= 4) {
            LOWORD(v142) = 4;
          }
          *(_WORD *)(a2 + 6++*(_DWORD *)(result + 8) = v142;
          goto LABEL_197;
        }
        sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v135 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
        *(void *)(a2 + 48) -= v136;
        goto LABEL_187;
      }
LABEL_182:
      if (!v124) {
        goto LABEL_183;
      }
LABEL_197:
      int v143 = sub_1CBF2CB78(a2, (unsigned __int16)v106 - (unsigned __int16)v105 + (unsigned __int16)v104);
      int v144 = v143;
      uint64_t v61 = (char *)v171;
      if ((unint64_t)v4 >= v171)
      {
        uint64_t v145 = v169;
        uint64_t v146 = (v4 - v170) >> 2;
        unint64_t v147 = v146 + 1;
        if ((unint64_t)(v146 + 1) >> 62) {
          goto LABEL_259;
        }
        if ((uint64_t)(v171 - (void)v170) >> 1 > v147) {
          unint64_t v147 = (uint64_t)(v171 - (void)v170) >> 1;
        }
        if (v171 - (unint64_t)v170 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v148 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v148 = v147;
        }
        if (v148)
        {
          if (v148 >> 62) {
            sub_1CB833614();
          }
          size_t v149 = (char *)operator new(4 * v148);
        }
        else
        {
          size_t v149 = 0;
        }
        size_t v150 = &v149[4 * v146];
        *(_DWORD *)size_t v150 = v144;
        int v151 = v150 + 4;
        while (v4 != v170)
        {
          int v152 = *((_DWORD *)v4 - 1);
          v4 -= 4;
          *((_DWORD *)v150 - 1) = v152;
          v150 -= 4;
        }
        uint64_t v61 = &v149[4 * v148];
        if (v170) {
          operator delete(v170);
        }
        uint64_t v5 = v150;
        int v4 = v151;
      }
      else
      {
        *(_DWORD *)int v4 = v143;
        v4 += 4;
        uint64_t v145 = v169;
        uint64_t v5 = v170;
      }
      if (v174 < 0) {
        operator delete(__p[0]);
      }
      if (v176 < 0) {
        operator delete(v175[0]);
      }
      if (v178 < 0) {
        operator delete(v177[0]);
      }
      if (v180 < 0) {
        operator delete(v179[0]);
      }
      if (v182 < 0) {
        operator delete(v181[0]);
      }
      if (SHIBYTE(v185) < 0) {
        operator delete(__dst);
      }
      v62 += 376;
      uint64_t v60 = v145 + 1;
      if (v62 == v167) {
        goto LABEL_3;
      }
    }
    uint64_t v77 = (v73 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v73 | 7) != 0x17) {
      uint64_t v77 = v73 | 7;
    }
    uint64_t v78 = v77 + 1;
    p_dst = (void **)operator new(v77 + 1);
    size_t v184 = v75;
    int64_t v185 = v78 | 0x8000000000000000;
    long long __dst = p_dst;
LABEL_99:
    memmove(p_dst, v74, v75);
    goto LABEL_100;
  }
  int v4 = 0;
  uint64_t v5 = 0;
LABEL_3:
  uint64_t v6 = v4 - v5;
  if (v4 == v5) {
    uint64_t v7 = (char *)&unk_1CFB33691;
  }
  else {
    uint64_t v7 = v5;
  }
  *(unsigned char *)(a2 + 70) = 1;
  if (*(void *)(a2 + 72) <= 3uLL) {
    *(void *)(a2 + 72) = 4;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  unint64_t v9 = ((_BYTE)v8 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v8 - *(void *)(a2 + 56) < v9)
  {
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v8 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(void *)(a2 + 48) -= v9;
  }
  else
  {
    *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v8 - v9;
    if (!v9) {
      goto LABEL_10;
    }
  }
  uint64_t v166 = 0;
  do
    *(unsigned char *)(*(void *)(a2 + 48) + v166++) = 0;
  while (v9 != v166);
  if (*(void *)(a2 + 72) <= 3uLL) {
    *(void *)(a2 + 72) = 4;
  }
LABEL_10:
  uint64_t v10 = *(void *)(a2 + 48);
  unint64_t v11 = ((_BYTE)v10 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v10 - *(void *)(a2 + 56) < v11)
  {
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v10 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(void *)(a2 + 48) -= v11;
  }
  else
  {
    *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v10 - v11;
    if (!v11) {
      goto LABEL_14;
    }
  }
  uint64_t v12 = 0;
  do
    *(unsigned char *)(*(void *)(a2 + 48) + v12++) = 0;
  while (v11 != v12);
LABEL_14:
  uint8x8_t v13 = v5;
  if (v5 != v4)
  {
    uint64_t v153 = v6 >> 2;
    do
    {
      --v153;
      int v154 = *(_DWORD *)&v7[4 * v153];
      if (*(void *)(a2 + 72) <= 3uLL) {
        *(void *)(a2 + 72) = 4;
      }
      uint64_t v155 = *(void *)(a2 + 32);
      uint64_t v156 = *(void *)(a2 + 40);
      uint64_t v157 = *(void *)(a2 + 48);
      unint64_t v158 = ((int)v157 - ((int)v155 + (int)v156)) & 3;
      if (v157 - *(void *)(a2 + 56) < v158)
      {
        sub_1CBF2C904((uint64_t *)a2, ((int)v157 - ((int)v155 + (int)v156)) & 3);
        *(void *)(a2 + 48) -= v158;
      }
      else
      {
        uint64_t v159 = v157 - v158;
        *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v159;
        if (!v158)
        {
          int v160 = v155 + v156 - v159;
          goto LABEL_243;
        }
      }
      uint64_t v161 = 0;
      do
        *(unsigned char *)(*(void *)(a2 + 48) + v161++) = 0;
      while (v158 != v161);
      uint64_t v156 = *(void *)(a2 + 40);
      uint64_t v159 = *(void *)(a2 + 48);
      uint64_t v155 = *(void *)(a2 + 32);
      int v160 = v155 - v159 + v156;
      if (*(void *)(a2 + 72) <= 3uLL) {
        *(void *)(a2 + 72) = 4;
      }
LABEL_243:
      unint64_t v162 = ((_BYTE)v159 - ((_BYTE)v155 + (_BYTE)v156)) & 3;
      uint64_t v163 = *(void *)(a2 + 56);
      if (v159 - v163 < v162)
      {
        sub_1CBF2C904((uint64_t *)a2, v162);
        *(void *)(a2 + 48) -= v162;
LABEL_245:
        uint64_t v165 = 0;
        do
          *(unsigned char *)(*(void *)(a2 + 48) + v165++) = 0;
        while (v162 != v165);
        uint64_t v164 = *(void *)(a2 + 48);
        uint64_t v163 = *(void *)(a2 + 56);
        goto LABEL_248;
      }
      uint64_t v164 = v159 - v162;
      *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v159 - v162;
      if (v162) {
        goto LABEL_245;
      }
LABEL_248:
      if ((unint64_t)(v164 - v163) <= 3)
      {
        sub_1CBF2C904((uint64_t *)a2, 4uLL);
        uint64_t v164 = *(void *)(a2 + 48);
      }
      *(_DWORD *)(v164 - 4) = v160 - v154 + 4;
      *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v164 - 4;
    }
    while (v153);
  }
  *(unsigned char *)(a2 + 70) = 0;
  if (*(void *)(a2 + 72) <= 3uLL) {
    *(void *)(a2 + 72) = 4;
  }
  uint64_t v15 = *(void *)(a2 + 48);
  uint64_t v14 = *(void *)(a2 + 56);
  unint64_t v16 = ((_BYTE)v15 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v15 - v14 < v16)
  {
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v15 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(void *)(a2 + 48) -= v16;
    unint64_t v18 = v13;
  }
  else
  {
    uint64_t v17 = v15 - v16;
    *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v15 - v16;
    unint64_t v18 = v13;
    if (!v16) {
      goto LABEL_22;
    }
  }
  uint64_t v19 = 0;
  do
    *(unsigned char *)(*(void *)(a2 + 48) + v19++) = 0;
  while (v16 != v19);
  uint64_t v17 = *(void *)(a2 + 48);
  uint64_t v14 = *(void *)(a2 + 56);
LABEL_22:
  if ((unint64_t)(v17 - v14) <= 3)
  {
    sub_1CBF2C904((uint64_t *)a2, 4uLL);
    uint64_t v17 = *(void *)(a2 + 48);
  }
  *(_DWORD *)(v17 - 4) = (unint64_t)v6 >> 2;
  uint64_t v20 = v17 - 4;
  *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v20;
  uint64_t v21 = *(void *)(a2 + 32);
  uint64_t v22 = *(void *)(a2 + 40);
  *(unsigned char *)(a2 + 70) = 1;
  int v23 = v21 - v20 + v22;
  if (v23)
  {
    if (*(void *)(a2 + 72) <= 3uLL) {
      *(void *)(a2 + 72) = 4;
    }
    unint64_t v24 = ((_BYTE)v20 - ((_BYTE)v21 + (_BYTE)v22)) & 3;
    if (v20 - *(void *)(a2 + 56) < v24)
    {
      sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v20 - ((_BYTE)v21 + (_BYTE)v22)) & 3);
      *(void *)(a2 + 48) -= v24;
    }
    else
    {
      uint64_t v25 = v20 - v24;
      *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v25;
      if (!v24)
      {
LABEL_32:
        int v27 = v22 - v25 + v21 - v23 + 4;
        if (v22 - v25 + v21 - v23 == -4 && *(unsigned char *)(a2 + 80) == 0) {
          goto LABEL_50;
        }
        if (*(void *)(a2 + 72) <= 3uLL) {
          *(void *)(a2 + 72) = 4;
        }
        unint64_t v29 = ((_BYTE)v25 - ((_BYTE)v21 + (_BYTE)v22)) & 3;
        uint64_t v30 = *(uint64_t **)(a2 + 56);
        if (v25 - (uint64_t)v30 < v29)
        {
          sub_1CBF2C904((uint64_t *)a2, v29);
          *(void *)(a2 + 48) -= v29;
        }
        else
        {
          uint64_t v31 = v25 - v29;
          *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v25 - v29;
          if (!v29)
          {
LABEL_43:
            if ((unint64_t)(v31 - (void)v30) <= 3)
            {
              sub_1CBF2C904((uint64_t *)a2, 4uLL);
              uint64_t v31 = *(void *)(a2 + 48);
              uint64_t v30 = *(uint64_t **)(a2 + 56);
            }
            *(_DWORD *)(v31 - 4) = v27;
            uint64_t v33 = v31 - 4;
            *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v33;
            uint64_t v34 = *(void *)(a2 + 32) - v33 + *(void *)(a2 + 40);
            if ((unint64_t)(v33 - (void)v30) <= 7)
            {
              sub_1CBF2C904((uint64_t *)a2, 8uLL);
              uint64_t v30 = *(uint64_t **)(a2 + 56);
            }
            uint64_t *v30 = v34 | 0x400000000;
            *(void *)(a2 + 56) += 8;
            ++*(_DWORD *)(a2 + 64);
            unsigned int v35 = *(unsigned __int16 *)(a2 + 68);
            if (v35 <= 4) {
              LOWORD(v35) = 4;
            }
            *(_WORD *)(a2 + 6++*(_DWORD *)(result + 8) = v35;
            goto LABEL_50;
          }
        }
        uint64_t v32 = 0;
        do
          *(unsigned char *)(*(void *)(a2 + 48) + v32++) = 0;
        while (v29 != v32);
        uint64_t v31 = *(void *)(a2 + 48);
        uint64_t v30 = *(uint64_t **)(a2 + 56);
        goto LABEL_43;
      }
    }
    uint64_t v26 = 0;
    do
      *(unsigned char *)(*(void *)(a2 + 48) + v26++) = 0;
    while (v24 != v26);
    uint64_t v22 = *(void *)(a2 + 40);
    uint64_t v25 = *(void *)(a2 + 48);
    uint64_t v21 = *(void *)(a2 + 32);
    goto LABEL_32;
  }
LABEL_50:
  int v36 = sub_1CBF2CB78(a2, v23);
  *(unsigned char *)(a2 + 70) = 1;
  int v37 = *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 48) + *(_DWORD *)(a2 + 40);
  unsigned int v38 = sub_1CD4525F4(a2, 1);
  int v39 = *(uint64_t **)(a2 + 56);
  if (*(void *)(a2 + 48) - (void)v39 <= 7uLL)
  {
    sub_1CBF2C904((uint64_t *)a2, 8uLL);
    int v39 = *(uint64_t **)(a2 + 56);
  }
  *int v39 = v38 | 0x400000000;
  uint64_t v40 = *(void *)(a2 + 56) + 8;
  *(void *)(a2 + 56) = v40;
  ++*(_DWORD *)(a2 + 64);
  unsigned int v41 = *(unsigned __int16 *)(a2 + 68);
  if (v41 <= 4) {
    LOWORD(v41) = 4;
  }
  *(_WORD *)(a2 + 6++*(_DWORD *)(result + 8) = v41;
  if (v36)
  {
    if (*(void *)(a2 + 72) <= 3uLL) {
      *(void *)(a2 + 72) = 4;
    }
    uint64_t v42 = *(void *)(a2 + 40);
    uint64_t v43 = *(void *)(a2 + 48);
    uint64_t v44 = *(void *)(a2 + 32);
    unint64_t v45 = ((int)v43 - ((int)v44 + (int)v42)) & 3;
    if (v43 - v40 < v45)
    {
      sub_1CBF2C904((uint64_t *)a2, ((int)v43 - ((int)v44 + (int)v42)) & 3);
      *(void *)(a2 + 48) -= v45;
    }
    else
    {
      uint64_t v46 = v43 - v45;
      *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v43 - v45;
      if (!v45)
      {
LABEL_62:
        int v48 = v42 - v46 + v44 - v36 + 4;
        if (v42 - v46 + v44 - v36 == -4 && *(unsigned char *)(a2 + 80) == 0) {
          goto LABEL_80;
        }
        if (*(void *)(a2 + 72) <= 3uLL) {
          *(void *)(a2 + 72) = 4;
        }
        unint64_t v50 = ((_BYTE)v46 - ((_BYTE)v44 + (_BYTE)v42)) & 3;
        uint64_t v51 = *(uint64_t **)(a2 + 56);
        if (v46 - (uint64_t)v51 < v50)
        {
          sub_1CBF2C904((uint64_t *)a2, v50);
          *(void *)(a2 + 48) -= v50;
        }
        else
        {
          uint64_t v52 = v46 - v50;
          *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v46 - v50;
          if (!v50)
          {
LABEL_73:
            if ((unint64_t)(v52 - (void)v51) <= 3)
            {
              sub_1CBF2C904((uint64_t *)a2, 4uLL);
              uint64_t v52 = *(void *)(a2 + 48);
              uint64_t v51 = *(uint64_t **)(a2 + 56);
            }
            *(_DWORD *)(v52 - 4) = v48;
            uint64_t v54 = v52 - 4;
            *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v54;
            uint64_t v55 = *(void *)(a2 + 32) - v54 + *(void *)(a2 + 40);
            if ((unint64_t)(v54 - (void)v51) <= 7)
            {
              sub_1CBF2C904((uint64_t *)a2, 8uLL);
              uint64_t v51 = *(uint64_t **)(a2 + 56);
            }
            *uint64_t v51 = v55 | 0x800000000;
            *(void *)(a2 + 56) += 8;
            ++*(_DWORD *)(a2 + 64);
            unsigned int v56 = *(unsigned __int16 *)(a2 + 68);
            if (v56 <= 8) {
              LOWORD(v56) = 8;
            }
            *(_WORD *)(a2 + 6++*(_DWORD *)(result + 8) = v56;
            goto LABEL_80;
          }
        }
        uint64_t v53 = 0;
        do
          *(unsigned char *)(*(void *)(a2 + 48) + v53++) = 0;
        while (v50 != v53);
        uint64_t v52 = *(void *)(a2 + 48);
        uint64_t v51 = *(uint64_t **)(a2 + 56);
        goto LABEL_73;
      }
    }
    uint64_t v47 = 0;
    do
      *(unsigned char *)(*(void *)(a2 + 48) + v47++) = 0;
    while (v45 != v47);
    uint64_t v42 = *(void *)(a2 + 40);
    uint64_t v46 = *(void *)(a2 + 48);
    uint64_t v44 = *(void *)(a2 + 32);
    goto LABEL_62;
  }
LABEL_80:
  unsigned int v57 = sub_1CBF2CB78(a2, v37);
  if (v18) {
    operator delete(v18);
  }
  return v57 | 0x100000000;
}

llvm::raw_ostream *sub_1CD2716C8(llvm::raw_ostream *this, int a2, unsigned int a3)
{
  unsigned int v3 = this;
  if (a2)
  {
    for (unsigned int i = 0; i != a2; ++i)
    {
      if (i < 0xC8) {
        int v7 = 2;
      }
      else {
        int v7 = 3;
      }
      if (i < 0x14) {
        unsigned int v8 = 1;
      }
      else {
        unsigned int v8 = v7;
      }
      unsigned int v9 = i >> 1;
      for (unsigned int j = a3; j; --j)
        v9 /= 0xAu;
      if (v8 >= a3)
      {
        if (v8 == a3)
        {
          uint64_t v12 = (unsigned char *)*((void *)v3 + 4);
          if ((unint64_t)v12 >= *((void *)v3 + 3))
          {
            uint8x8_t v13 = v3;
            char v14 = 114;
            goto LABEL_20;
          }
          *((void *)v3 + 4) = v12 + 1;
          *uint64_t v12 = 114;
        }
        else
        {
          this = sub_1CD098D14(v3, v9 - 10 * (((1717986919 * (unint64_t)v9) >> 32) >> 2), 0, 0, 0);
        }
      }
      else
      {
        unint64_t v11 = (unsigned char *)*((void *)v3 + 4);
        if ((unint64_t)v11 >= *((void *)v3 + 3))
        {
          uint8x8_t v13 = v3;
          char v14 = 32;
LABEL_20:
          this = llvm::raw_ostream::write(v13, v14);
          continue;
        }
        *((void *)v3 + 4) = v11 + 1;
        unsigned char *v11 = 32;
      }
    }
  }
  uint64_t v15 = (unsigned char *)*((void *)v3 + 4);
  if ((unint64_t)v15 >= *((void *)v3 + 3))
  {
    return llvm::raw_ostream::write(v3, 10);
  }
  else
  {
    *((void *)v3 + 4) = v15 + 1;
    *uint64_t v15 = 10;
  }
  return this;
}

void sub_1CD271840(char **a1, unint64_t a2)
{
  unint64_t v2 = *((unsigned int *)a1 + 2);
  if (v2 != a2)
  {
    unint64_t v3 = a2;
    int v4 = a1;
    if (v2 <= a2)
    {
      unint64_t v15 = *((unsigned int *)a1 + 3);
      if (v15 >= a2)
      {
        uint64_t v19 = *a1;
      }
      else
      {
        if (HIDWORD(a2)) {
          sub_1CD0A88F0(a2);
        }
        if (v15 == -1) {
          sub_1CD0A89A8(0xFFFFFFFFuLL);
        }
        unint64_t v16 = (2 * v15) | 1;
        if (v16 <= a2) {
          unint64_t v16 = a2;
        }
        if (v16 >= 0xFFFFFFFF) {
          uint64_t v17 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v17 = v16;
        }
        unint64_t v18 = (char *)malloc_type_malloc(376 * v17, 0x4065EBACuLL);
        if (!v18) {
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        }
        uint64_t v19 = v18;
        uint64_t v20 = *v4;
        unsigned int v21 = *((_DWORD *)v4 + 2);
        if (v21)
        {
          int v65 = v17;
          uint64_t v66 = v4;
          unint64_t v67 = v3;
          uint64_t v22 = 0;
          uint64_t v23 = 376 * v21;
          do
          {
            unint64_t v24 = &v20[v22];
            uint64_t v25 = &v19[v22];
            *(_OWORD *)uint64_t v25 = *(_OWORD *)&v20[v22];
            uint64_t v26 = &v19[v22 + 32];
            *(void *)&v19[v22 + 16] = v26;
            *((void *)v25 + 3) = 0x600000000;
            unsigned int v27 = *(_DWORD *)&v20[v22 + 24];
            if (v27) {
              BOOL v28 = v24 == v25;
            }
            else {
              BOOL v28 = 1;
            }
            if (!v28)
            {
              unint64_t v29 = (char *)*((void *)v24 + 2);
              if (v24 + 32 == v29)
              {
                if (v27 >= 7) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                memcpy(v26, v29, 8 * *(unsigned int *)&v20[v22 + 24]);
                *((_DWORD *)v25 + 6) = v27;
              }
              else
              {
                *(void *)&v19[v22 + 16] = v29;
                int v50 = *(_DWORD *)&v20[v22 + 28];
                *((_DWORD *)v25 + 6) = v27;
                *((_DWORD *)v25 + 7) = v50;
                *((void *)v24 + 2) = v24 + 32;
                *(_DWORD *)&v20[v22 + 28] = 0;
              }
              *((_DWORD *)v24 + 6) = 0;
            }
            *((_DWORD *)v25 + 20) = *((_DWORD *)v24 + 20);
            *((void *)v25 + 11) = v25 + 104;
            *((void *)v25 + 12) = 0x600000000;
            unsigned int v30 = *((_DWORD *)v24 + 24);
            if (v30 && v24 != v25)
            {
              uint64_t v31 = *(const void **)&v20[v22 + 88];
              uint64_t v32 = (uint64_t)&v20[v22 + 104];
              if ((const void *)v32 == v31)
              {
                if (v30 >= 7) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                memcpy(v25 + 104, v31, 8 * *((unsigned int *)v24 + 24));
                *((_DWORD *)v25 + 24) = v30;
              }
              else
              {
                *((void *)v25 + 11) = v31;
                int v51 = *(_DWORD *)&v20[v22 + 100];
                *((_DWORD *)v25 + 24) = v30;
                *((_DWORD *)v25 + 25) = v51;
                *(void *)&v20[v22 + 88] = v32;
                *(_DWORD *)&v20[v22 + 100] = 0;
              }
              *((_DWORD *)v24 + 24) = 0;
            }
            uint64_t v33 = &v19[v22];
            uint64_t v34 = &v20[v22];
            *((_DWORD *)v33 + 3++*(_DWORD *)(result + 8) = *(_DWORD *)&v20[v22 + 152];
            unsigned int v35 = &v19[v22 + 176];
            *(void *)&v19[v22 + 160] = v35;
            *((void *)v33 + 21) = 0x600000000;
            unsigned int v36 = *(_DWORD *)&v20[v22 + 168];
            if (v36 && v24 != v25)
            {
              int v37 = (const void *)*((void *)v34 + 20);
              unsigned int v38 = &v20[v22];
              uint64_t v39 = (uint64_t)&v20[v22 + 176];
              if ((const void *)v39 == v37)
              {
                if (v36 >= 7) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                memcpy(v35, v37, 8 * *(unsigned int *)&v20[v22 + 168]);
                *((_DWORD *)v33 + 42) = v36;
              }
              else
              {
                *(void *)&v19[v22 + 160] = v37;
                int v52 = *((_DWORD *)v38 + 43);
                *((_DWORD *)v33 + 42) = v36;
                *((_DWORD *)v33 + 43) = v52;
                *((void *)v34 + 20) = v39;
                *((_DWORD *)v38 + 43) = 0;
              }
              *((_DWORD *)v34 + 42) = 0;
            }
            *((_DWORD *)v33 + 56) = *((_DWORD *)v34 + 56);
            *((void *)v33 + 29) = v33 + 248;
            *((void *)v33 + 30) = 0x600000000;
            unsigned int v40 = *((_DWORD *)v34 + 60);
            if (v40 && v24 != v25)
            {
              unsigned int v41 = *(const void **)&v20[v22 + 232];
              uint64_t v42 = (uint64_t)&v20[v22 + 248];
              if ((const void *)v42 == v41)
              {
                if (v40 >= 7) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                memcpy(v33 + 248, v41, 8 * *((unsigned int *)v34 + 60));
                *((_DWORD *)v33 + 60) = v40;
              }
              else
              {
                *((void *)v33 + 29) = v41;
                int v53 = *(_DWORD *)&v20[v22 + 244];
                *((_DWORD *)v33 + 60) = v40;
                *((_DWORD *)v33 + 61) = v53;
                *(void *)&v20[v22 + 232] = v42;
                *(_DWORD *)&v20[v22 + 244] = 0;
              }
              *((_DWORD *)v34 + 60) = 0;
            }
            uint64_t v43 = &v19[v22];
            uint64_t v44 = &v20[v22];
            *((_DWORD *)v43 + 74) = *(_DWORD *)&v20[v22 + 296];
            unint64_t v45 = &v19[v22 + 320];
            *((void *)v43 + 3++*(_DWORD *)(result + 8) = v45;
            *((void *)v43 + 39) = 0x600000000;
            unsigned int v46 = *(_DWORD *)&v20[v22 + 312];
            if (v46 && v24 != v25)
            {
              uint64_t v47 = (const void *)*((void *)v44 + 38);
              int v48 = &v20[v22];
              uint64_t v49 = (uint64_t)&v20[v22 + 320];
              if ((const void *)v49 == v47)
              {
                if (v46 >= 7) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                memcpy(v45, v47, 8 * *(unsigned int *)&v20[v22 + 312]);
                *((_DWORD *)v43 + 7++*(_DWORD *)(result + 8) = v46;
              }
              else
              {
                *((void *)v43 + 3++*(_DWORD *)(result + 8) = v47;
                *((_DWORD *)v43 + 7++*(_DWORD *)(result + 8) = v46;
                *((_DWORD *)v43 + 79) = *((_DWORD *)v48 + 79);
                *((void *)v44 + 3++*(_DWORD *)(result + 8) = v49;
                *((_DWORD *)v48 + 79) = 0;
              }
              *((_DWORD *)v44 + 7++*(_DWORD *)(result + 8) = 0;
            }
            *((_DWORD *)v43 + 92) = *((_DWORD *)v44 + 92);
            v22 += 376;
          }
          while (v23 != v22);
          int v4 = v66;
          uint64_t v20 = *v66;
          unsigned int v54 = *((_DWORD *)v66 + 2);
          if (v54)
          {
            uint64_t v55 = 0;
            uint64_t v56 = 376 * v54;
            LODWORD(v17) = v65;
            do
            {
              unsigned int v57 = &v20[v56];
              int v58 = *(char **)&v20[v56 - 72];
              if (&v20[v56 - 56] != v58) {
                free(v58);
              }
              uint64_t v59 = (char *)*((void *)v57 - 18);
              if (v57 - 128 != v59) {
                free(v59);
              }
              uint64_t v60 = &v20[v56];
              uint64_t v61 = *(char **)&v20[v56 - 216];
              if (&v20[v56 - 200] != v61) {
                free(v61);
              }
              uint64_t v62 = (char *)*((void *)v60 - 36);
              if (v60 - 272 != v62) {
                free(v62);
              }
              uint64_t v63 = *(char **)&v20[v56 - 360];
              if (&v20[v56 - 344] != v63) {
                free(v63);
              }
              v20 -= 376;
              v55 += 376;
            }
            while (v56 != v55);
            uint64_t v20 = *v66;
            unint64_t v3 = v67;
          }
          else
          {
            unint64_t v3 = v67;
            LODWORD(v17) = v65;
          }
        }
        if (v20 != (char *)(v4 + 2)) {
          free(v20);
        }
        *int v4 = v19;
        *((_DWORD *)v4 + 3) = v17;
        unint64_t v2 = *((unsigned int *)v4 + 2);
      }
      if (v2 != v3)
      {
        int v64 = &v19[376 * v2];
        do
        {
          *((void *)v64 + 46) = 0;
          *((_OWORD *)v64 + 21) = 0uLL;
          *((_OWORD *)v64 + 22) = 0uLL;
          *((_OWORD *)v64 + 19) = 0uLL;
          *((_OWORD *)v64 + 20) = 0uLL;
          *((_OWORD *)v64 + 17) = 0uLL;
          *((_OWORD *)v64 + 1++*(_DWORD *)(result + 8) = 0uLL;
          *((_OWORD *)v64 + 15) = 0uLL;
          *((_OWORD *)v64 + 16) = 0uLL;
          *((_OWORD *)v64 + 13) = 0uLL;
          *((_OWORD *)v64 + 14) = 0uLL;
          *((_OWORD *)v64 + 12) = 0uLL;
          *((_OWORD *)v64 + 9) = 0uLL;
          *((_OWORD *)v64 + 10) = 0uLL;
          *((_OWORD *)v64 + 7) = 0uLL;
          *((_OWORD *)v64 + ++*(_DWORD *)(result + 8) = 0uLL;
          *((_OWORD *)v64 + 5) = 0uLL;
          *((_OWORD *)v64 + 6) = 0uLL;
          *((_OWORD *)v64 + 3) = 0uLL;
          *((_OWORD *)v64 + 4) = 0uLL;
          *(_OWORD *)int v64 = 0uLL;
          *((_OWORD *)v64 + 1) = 0uLL;
          *((_OWORD *)v64 + 11) = 0uLL;
          *((_OWORD *)v64 + 2) = 0uLL;
          *((void *)v64 + 2) = v64 + 32;
          *((_DWORD *)v64 + 7) = 6;
          *((void *)v64 + 11) = v64 + 104;
          *((_DWORD *)v64 + 25) = 6;
          *((void *)v64 + 20) = v64 + 176;
          *((_DWORD *)v64 + 43) = 6;
          *((void *)v64 + 29) = v64 + 248;
          *((_DWORD *)v64 + 61) = 6;
          *((void *)v64 + 3++*(_DWORD *)(result + 8) = v64 + 320;
          *((_DWORD *)v64 + 79) = 6;
          v64 += 376;
        }
        while (v64 != &v19[376 * v3]);
      }
    }
    else
    {
      uint64_t v5 = *a1;
      uint64_t v6 = 376 * v2;
      uint64_t v7 = 376 * a2;
      do
      {
        unsigned int v8 = &v5[v6];
        unsigned int v9 = *(char **)&v5[v6 - 72];
        if (&v5[v6 - 56] != v9) {
          free(v9);
        }
        uint64_t v10 = (char *)*((void *)v8 - 18);
        if (v8 - 128 != v10) {
          free(v10);
        }
        unint64_t v11 = &v5[v6];
        uint64_t v12 = *(char **)&v5[v6 - 216];
        if (&v5[v6 - 200] != v12) {
          free(v12);
        }
        uint8x8_t v13 = (char *)*((void *)v11 - 36);
        if (v11 - 272 != v13) {
          free(v13);
        }
        char v14 = *(char **)&v5[v6 - 360];
        if (&v5[v6 - 344] != v14) {
          free(v14);
        }
        v5 -= 376;
        v7 += 376;
      }
      while (v6 != v7);
    }
    *((_DWORD *)v4 + 2) = v3;
  }
}

void sub_1CD271EB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __p[0] = 0;
  char v8 = sub_1CD451D3C((uint64_t *)a2, a3, __p);
  unsigned int v9 = (char *)__p[0];
  if (v8)
  {
    char v10 = 0;
  }
  else
  {
    unsigned int v9 = (char *)sub_1CD45205C(a2, a3, a3, (uint64_t)__p[0]);
    uint64_t v12 = *(void *)a3;
    *(void *)a3 = 0;
    sub_1CB833F88((uint64_t *)v9, v12);
    *(_OWORD *)(v9 + ++*(_DWORD *)(result + 8) = *(_OWORD *)(a3 + 8);
    *(_OWORD *)__p = *(_OWORD *)a4;
    uint64_t v14 = *(void *)(a4 + 16);
    *(void *)(a4 + ++*(_DWORD *)(result + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = 0;
    sub_1CD452764((uint64_t)(v9 + 24), (unint64_t)__p);
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a2 + 56 * *(unsigned int *)(a2 + 16);
  *(void *)a1 = v9;
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = v11;
  *(unsigned char *)(a1 + 16) = v10;
}

void sub_1CD271F94(int a1@<W5>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1) {
    operator new();
  }
}

uint64_t sub_1CD27205C()
{
  qword_1EBCFE840 = (uint64_t)"AGX Custom View Options";
  *(void *)algn_1EBCFE848 = 23;
  qword_1EBCFE850 = (uint64_t)"";
  unk_1EBCFE858 = 0;
  llvm::cl::OptionCategory::registerCategory((llvm::cl::OptionCategory *)&qword_1EBCFE840);
  uint64_t v0 = sub_1CB883A14((uint64_t)&qword_1EBCFE860, 0, 0);
  qword_1EBCFE8E0 = 0;
  byte_1EBCFE8F1 = 0;
  qword_1EBCFE8E8 = (uint64_t)&unk_1F25EDE58;
  qword_1EBCFE860 = (uint64_t)&unk_1F2605290;
  qword_1EBCFE8F8 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCFE900 = (uint64_t)&unk_1F26052F8;
  qword_1EBCFE918 = (uint64_t)&qword_1EBCFE900;
  llvm::cl::Option::setArgStr(v0, "agx-instr-info", 0xEuLL);
  qword_1EBCFE880 = (uint64_t)"Print the AGX Instruction Info Views";
  unk_1EBCFE888 = 36;
  llvm::cl::Option::addCategory((llvm::cl::Option *)&qword_1EBCFE860, (llvm::cl::OptionCategory *)&qword_1EBCFE840);
  sub_1CC08D588((llvm *)&qword_1EBCFE8E0, &qword_1EBCFE860, &byte_1EA61F350);
  *(unsigned char *)qword_1EBCFE8E0 = 0;
  unk_1EBCFE8F0 = 256;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCFE860);
  __cxa_atexit((void (*)(void *))sub_1CC086C1C, &qword_1EBCFE860, &dword_1CB82C000);
  sub_1CB883A14((uint64_t)&qword_1EBCFE920, 0, 0);
  byte_1EBCFE9B1 = 0;
  qword_1EBCFE9A0 = 0;
  unk_1EBCFE9A8 = &unk_1F25EDE58;
  qword_1EBCFE920 = (uint64_t)&unk_1F2605290;
  qword_1EBCFE9B8 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCFE9C0 = (uint64_t)&unk_1F26052F8;
  qword_1EBCFE9D8 = (uint64_t)&qword_1EBCFE9C0;
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCFE920, "agx-profiler-weights", 0x14uLL);
  qword_1EBCFE940 = (uint64_t)"Print the profiler weights";
  unk_1EBCFE948 = 26;
  llvm::cl::Option::addCategory((llvm::cl::Option *)&qword_1EBCFE920, (llvm::cl::OptionCategory *)&qword_1EBCFE840);
  sub_1CC08D588((llvm *)&qword_1EBCFE9A0, &qword_1EBCFE920, &byte_1EA61F351);
  *(unsigned char *)qword_1EBCFE9A0 = 0;
  unk_1EBCFE9B0 = 256;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCFE920);
  __cxa_atexit((void (*)(void *))sub_1CC086C1C, &qword_1EBCFE920, &dword_1CB82C000);
  sub_1CB883A14((uint64_t)&qword_1EBCFE9E0, 0, 0);
  qword_1EBCFEA60 = 0;
  byte_1EBCFEA71 = 0;
  qword_1EBCFEA68 = (uint64_t)&unk_1F25EDE58;
  qword_1EBCFE9E0 = (uint64_t)&unk_1F2605290;
  qword_1EBCFEA78 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCFEA80 = (uint64_t)&unk_1F26052F8;
  qword_1EBCFEA98 = (uint64_t)&qword_1EBCFEA80;
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCFE9E0, "agx-pressure", 0xCuLL);
  qword_1EBCFEA00 = (uint64_t)"Print the AGX pressure view";
  unk_1EBCFEA08 = 27;
  llvm::cl::Option::addCategory((llvm::cl::Option *)&qword_1EBCFE9E0, (llvm::cl::OptionCategory *)&qword_1EBCFE840);
  sub_1CC08D588((llvm *)&qword_1EBCFEA60, &qword_1EBCFE9E0, &byte_1EA61F352);
  *(unsigned char *)qword_1EBCFEA60 = 0;
  unk_1EBCFEA70 = 256;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCFE9E0);
  __cxa_atexit((void (*)(void *))sub_1CC086C1C, &qword_1EBCFE9E0, &dword_1CB82C000);
  sub_1CB883A14((uint64_t)&qword_1EBCFEAA0, 0, 0);
  qword_1EBCFEB20 = 0;
  byte_1EBCFEB31 = 0;
  qword_1EBCFEB28 = (uint64_t)&unk_1F25EDE58;
  qword_1EBCFEAA0 = (uint64_t)&unk_1F2605290;
  qword_1EBCFEB38 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCFEB40 = (uint64_t)&unk_1F26052F8;
  qword_1EBCFEB58 = (uint64_t)&qword_1EBCFEB40;
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCFEAA0, "agx-wait", 8uLL);
  qword_1EBCFEAC0 = (uint64_t)"Print the AGX wait view";
  qword_1EBCFEAC8 = 23;
  llvm::cl::Option::addCategory((llvm::cl::Option *)&qword_1EBCFEAA0, (llvm::cl::OptionCategory *)&qword_1EBCFE840);
  sub_1CC08D588((llvm *)&qword_1EBCFEB20, &qword_1EBCFEAA0, &byte_1EA61F353);
  *(unsigned char *)qword_1EBCFEB20 = 0;
  unk_1EBCFEB30 = 256;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCFEAA0);

  return __cxa_atexit((void (*)(void *))sub_1CC086C1C, &qword_1EBCFEAA0, &dword_1CB82C000);
}

uint64_t sub_1CD2724FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  *(void *)a1 = &unk_1F2649358;
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = a5;
  *(void *)(a1 + 40) = a6;
  *(_DWORD *)(a1 + 4++*(_DWORD *)(result + 8) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 8++*(_DWORD *)(result + 8) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  *(void *)(a1 + 12++*(_DWORD *)(result + 8) = 0;
  *(void *)(a1 + 80) = &unk_1F2646F30;
  *(void *)(a1 + 144) = a1 + 56;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 16++*(_DWORD *)(result + 8) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  char v8 = (uint64_t *)(a1 + 152);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  sub_1CD2725E4(a1 + 152, a7);
  uint64_t v9 = *v8;
  uint64_t v10 = *(void *)(a1 + 160);
  if (*v8 != v10)
  {
    int v11 = 0;
    do
    {
      *(_DWORD *)uint64_t v9 = v11;
      *(void *)(v9 + 16) = *(void *)(v9 + 8);
      *(_DWORD *)(v9 + 40) = 0;
      ++v11;
      v9 += 80;
    }
    while (v9 != v10);
  }
  return a1;
}

void sub_1CD2725E4(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *(void *)a1) >> 4);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_1CD274714((void **)a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *(void *)a1 + 80 * a2;
    if (v3 != v7)
    {
      char v8 = (char *)(v3 - 32);
      do
      {
        uint64_t v9 = (char *)*((void *)v8 - 2);
        if (v8 != v9) {
          free(v9);
        }
        uint64_t v10 = (void *)*((void *)v8 - 5);
        if (v10)
        {
          *((void *)v8 - 4) = v10;
          operator delete(v10);
        }
        int v11 = v8 - 48;
        v8 -= 80;
      }
      while (v11 != (char *)v7);
    }
    *(void *)(a1 + ++*(_DWORD *)(result + 8) = v7;
  }
}

_DWORD *sub_1CD2726A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = *(_DWORD **)a1;
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  if (v5)
  {
    uint64_t v6 = 32 * v5;
    uint64_t result = *(_DWORD **)a1;
    while (*result != a2)
    {
      result += 8;
      v6 -= 32;
      if (!v6) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    if (v5 >= *(_DWORD *)(a1 + 12))
    {
      v14[0] = a2;
      v14[1] = a3;
      v14[2] = 0;
      int v15 = 0;
      int v11 = (_OWORD *)sub_1CB8968D4(a1, (unint64_t)v14, 1);
      uint64_t v12 = (_OWORD *)(*(void *)a1 + 32 * *(unsigned int *)(a1 + 8));
      long long v13 = v11[1];
      *uint64_t v12 = *v11;
      v12[1] = v13;
    }
    else
    {
      char v8 = &v4[8 * v5];
      *(void *)char v8 = a2;
      *((void *)v8 + 1) = a3;
      *((void *)v8 + 2) = 0;
      v8[6] = 0;
    }
    uint64_t v9 = (*(_DWORD *)(a1 + 8) + 1);
    uint64_t v10 = *(void *)a1 + 32 * v9;
    *(_DWORD *)(a1 + ++*(_DWORD *)(result + 8) = v9;
    return (_DWORD *)(v10 - 32);
  }
  return result;
}

_DWORD *sub_1CD272760(uint64_t a1, uint64_t a2)
{
  uint64_t result = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 144))(a1, *(void *)(a1 + 32) + 168 * **(unsigned int **)(a2 + 8));
  if (result)
  {
    uint64_t v5 = *(void *)(a1 + 152);
    if (*(void *)(a1 + 160) != v5)
    {
      unint64_t v6 = (unint64_t)result;
      uint64_t v7 = 0;
      unsigned int v8 = 1;
      do
      {
        if ((v6 >> v7))
        {
          uint64_t result = sub_1CD2726A0(v5 + 80 * v7 + 32, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
          if (!*((unsigned char *)result + 20))
          {
            result[4] = *(_DWORD *)(a1 + 48);
            *((unsigned char *)result + 20) = 1;
          }
        }
        uint64_t v7 = v8;
        uint64_t v5 = *(void *)(a1 + 152);
      }
      while (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 160) - v5) >> 4) > v8++);
    }
  }
  return result;
}

char *sub_1CD272850(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 184);
  if (v4 >= *(void *)(a1 + 192))
  {
    uint64_t result = sub_1CBF33EA0((void **)(a1 + 176), a2);
  }
  else
  {
    *(_DWORD *)unint64_t v4 = *(_DWORD *)a2;
    *(void *)(v4 + 16) = 0;
    *(void *)(v4 + 24) = 0;
    *(void *)(v4 + ++*(_DWORD *)(result + 8) = 0;
    sub_1CBF340A8((void *)(v4 + 8), *(unsigned char **)(a2 + 8), *(unsigned char **)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
    *(void *)(v4 + 32) = v4 + 48;
    *(void *)(v4 + 40) = 0x100000000;
    if (*(_DWORD *)(a2 + 40)) {
      sub_1CBF3415C((uint64_t *)(v4 + 32), (uint64_t *)(a2 + 32));
    }
    uint64_t result = (char *)(v4 + 80);
  }
  *(void *)(a1 + 184) = result;
  return result;
}

unint64_t sub_1CD2728F8(unint64_t result, uint64_t a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a2 == 4)
  {
    unint64_t v2 = result;
    uint64_t v3 = (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)result + 144))(result, *(void *)(result + 32) + 168 * **(unsigned int **)(a2 + 8));
    if (v3)
    {
      uint64_t v5 = *(void *)(v2 + 152);
      uint64_t v4 = *(void *)(v2 + 160);
      if (v4 != v5)
      {
        unint64_t v6 = v3;
        uint64_t v7 = 0;
        unsigned int v8 = 1;
        do
        {
          if ((v6 >> v7))
          {
            uint64_t v9 = sub_1CD2726A0(v5 + 80 * v7 + 32, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
            if (!*((unsigned char *)v9 + 20))
            {
              void v9[4] = *(_DWORD *)(v2 + 48);
              *((unsigned char *)v9 + 20) = 1;
            }
            v9[6] = *(_DWORD *)(v2 + 48);
            (*(void (**)(unint64_t, uint64_t))(*(void *)v2 + 152))(v2, v5 + 80 * v7);
            uint64_t v10 = v5 + 80 * v7;
            *(void *)(v10 + 16) = *(void *)(v10 + 8);
            *(_DWORD *)(v10 + 40) = 0;
            uint64_t v5 = *(void *)(v2 + 152);
            uint64_t v4 = *(void *)(v2 + 160);
          }
          uint64_t v7 = v8;
        }
        while (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 4) > v8++);
      }
    }
    uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)v2 + 136))(v2, *(void *)(v2 + 32) + 168 * **(unsigned int **)(a2 + 8));
    if (result)
    {
      uint64_t v12 = *(void *)(v2 + 152);
      uint64_t v13 = *(void *)(v2 + 160);
      if (v13 != v12)
      {
        uint64_t v14 = 0;
        unsigned int v15 = 0;
        unint64_t v16 = (long long *)((char *)&v41 + 4);
        unint64_t v38 = result;
        do
        {
          if ((result >> v14))
          {
            int v17 = *(_DWORD *)(v2 + 48);
            *unint64_t v16 = *(_OWORD *)*(void *)(a2 + 8);
            uint64_t v18 = v12 + 80 * v14;
            unint64_t v21 = *(void *)(v18 + 24);
            uint64_t v20 = (void *)(v18 + 24);
            unint64_t v19 = v21;
            uint64_t v23 = v20 - 1;
            uint64_t v22 = (char *)*(v20 - 1);
            if ((unint64_t)v22 >= v21)
            {
              uint64_t v25 = v16;
              uint64_t v26 = v12 + 80 * v14;
              unint64_t v29 = *(char **)(v26 + 8);
              BOOL v28 = (char **)(v26 + 8);
              unsigned int v27 = v29;
              unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((v22 - v29) >> 3);
              unint64_t v31 = v30 + 1;
              if (v30 + 1 > 0xAAAAAAAAAAAAAAALL) {
                abort();
              }
              unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - (void)v27) >> 3);
              if (2 * v32 > v31) {
                unint64_t v31 = 2 * v32;
              }
              if (v32 >= 0x555555555555555) {
                unint64_t v31 = 0xAAAAAAAAAAAAAAALL;
              }
              unint64_t v39 = v31;
              if (v31)
              {
                if (v31 > 0xAAAAAAAAAAAAAAALL) {
                  sub_1CB833614();
                }
                uint64_t v33 = (char *)operator new(24 * v31);
              }
              else
              {
                uint64_t v33 = 0;
              }
              uint64_t v34 = &v33[24 * v30];
              *(_DWORD *)uint64_t v34 = v17;
              *(_OWORD *)(v34 + 4) = v41;
              *((_DWORD *)v34 + 5) = v42;
              unsigned int v35 = v34;
              unint64_t v16 = v25;
              if (v22 == v27)
              {
                unint64_t v36 = v39;
              }
              else
              {
                unint64_t v36 = v39;
                do
                {
                  long long v37 = *(_OWORD *)(v22 - 24);
                  *((void *)v35 - 1) = *((void *)v22 - 1);
                  *(_OWORD *)(v35 - 24) = v37;
                  v35 -= 24;
                  v22 -= 24;
                }
                while (v22 != v27);
                uint64_t v22 = *v28;
              }
              void *v28 = v35;
              unint64_t v24 = v34 + 24;
              *uint64_t v23 = v34 + 24;
              void *v20 = &v33[24 * v36];
              if (v22) {
                operator delete(v22);
              }
              uint64_t result = v38;
            }
            else
            {
              *(_DWORD *)uint64_t v22 = v17;
              *(_OWORD *)(v22 + 4) = v41;
              *((_DWORD *)v22 + 5) = v42;
              unint64_t v24 = v22 + 24;
            }
            *uint64_t v23 = v24;
            uint64_t v12 = *(void *)(v2 + 152);
            uint64_t v13 = *(void *)(v2 + 160);
          }
          uint64_t v14 = ++v15;
        }
        while (0xCCCCCCCCCCCCCCCDLL * ((v13 - v12) >> 4) > v15);
      }
    }
  }
  return result;
}

uint64_t sub_1CD272C90(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int **)(a1 + 176);
  unint64_t v262 = *(unsigned int **)(a1 + 184);
  if (v3 != v262)
  {
    unsigned int v57 = 0;
    uint64_t v5 = 0;
    uint64_t v4 = 0;
    while (1)
    {
      unint64_t v263 = (unint64_t)v57;
      uint64_t v264 = v5;
      unint64_t v265 = v4;
      uint64_t v266 = v3;
      int v58 = (unsigned int *)*((void *)v3 + 1);
      uint64_t v59 = (unsigned int *)*((void *)v3 + 2);
      if (v58 == v59)
      {
        uint64_t v60 = 0;
        __p = 0;
      }
      else
      {
        __p = 0;
        uint64_t v60 = 0;
        uint64_t v61 = 0;
        do
        {
          uint64_t v62 = *v58;
          char v279 = 0;
          LOBYTE(__src[0]) = 0;
          int v63 = sub_1CD27448C((void *)a2, __src);
          *(unsigned char *)(a2 + 70) = 1;
          uint64_t v64 = *(void *)(a2 + 40);
          uint64_t v65 = *(void *)(a2 + 48);
          uint64_t v66 = *(void *)(a2 + 32);
          if (v62) {
            BOOL v67 = 0;
          }
          else {
            BOOL v67 = *(unsigned char *)(a2 + 80) == 0;
          }
          if (!v67)
          {
            unsigned int v68 = sub_1CC7807FC(a2, v62);
            uint64_t v69 = *(uint64_t **)(a2 + 56);
            if (*(void *)(a2 + 48) - (void)v69 <= 7uLL)
            {
              sub_1CBF2C904((uint64_t *)a2, 8uLL);
              uint64_t v69 = *(uint64_t **)(a2 + 56);
            }
            *uint64_t v69 = v68 | 0x400000000;
            *(void *)(a2 + 56) += 8;
            ++*(_DWORD *)(a2 + 64);
            unsigned int v70 = *(unsigned __int16 *)(a2 + 68);
            if (v70 <= 4) {
              LOWORD(v70) = 4;
            }
            *(_WORD *)(a2 + 6++*(_DWORD *)(result + 8) = v70;
          }
          sub_1CC780134((uint64_t *)a2, 6, v63);
          int v71 = sub_1CBF2CB78(a2, (unsigned __int16)v66 - (unsigned __int16)v65 + (unsigned __int16)v64);
          int v72 = v71;
          if (v60 >= v61)
          {
            uint64_t v74 = (v60 - __p) >> 2;
            unint64_t v75 = v74 + 1;
            if ((unint64_t)(v74 + 1) >> 62) {
              goto LABEL_368;
            }
            if ((v61 - __p) >> 1 > v75) {
              unint64_t v75 = (v61 - __p) >> 1;
            }
            if ((unint64_t)(v61 - __p) >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v76 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v76 = v75;
            }
            if (v76)
            {
              if (v76 >> 62) {
                goto LABEL_369;
              }
              uint64_t v77 = (char *)operator new(4 * v76);
            }
            else
            {
              uint64_t v77 = 0;
            }
            unint64_t v73 = &v77[4 * v74];
            *(_DWORD *)unint64_t v73 = v72;
            uint64_t v78 = v73 + 4;
            while (v60 != __p)
            {
              int v79 = *((_DWORD *)v60 - 1);
              v60 -= 4;
              *((_DWORD *)v73 - 1) = v79;
              v73 -= 4;
            }
            uint64_t v61 = &v77[4 * v76];
            if (__p) {
              operator delete(__p);
            }
            uint64_t v60 = v78;
          }
          else
          {
            *(_DWORD *)uint64_t v60 = v71;
            v60 += 4;
            unint64_t v73 = __p;
          }
          if (v279 < 0) {
            operator delete(__src[0]);
          }
          __p = v73;
          v58 += 6;
        }
        while (v58 != v59);
      }
      uint64_t v80 = v266[10];
      if (v80)
      {
        int v81 = 0;
        uint64_t v82 = 0;
        size_t v83 = 0;
        uint64_t v84 = *((void *)v266 + 4);
        uint64_t v267 = v84 + 32 * v80;
        do
        {
          unint64_t v269 = (unint64_t)v83;
          uint64_t v275 = v81;
          uint64_t v85 = *(unsigned int *)(v84 + 16);
          uint64_t v86 = *(unsigned int *)(v84 + 24);
          char v279 = 0;
          LOBYTE(__src[0]) = 0;
          int v87 = sub_1CD27448C((void *)a2, __src);
          BOOL v88 = 1;
          *(unsigned char *)(a2 + 70) = 1;
          uint64_t v89 = *(void *)(a2 + 40);
          uint64_t v90 = *(void *)(a2 + 48);
          uint64_t v91 = *(void *)(a2 + 32);
          if (v86 || *(unsigned char *)(a2 + 80))
          {
            unsigned int v92 = sub_1CC7807FC(a2, v86);
            int v93 = *(uint64_t **)(a2 + 56);
            if (*(void *)(a2 + 48) - (void)v93 <= 7uLL)
            {
              sub_1CBF2C904((uint64_t *)a2, 8uLL);
              int v93 = *(uint64_t **)(a2 + 56);
            }
            uint64_t *v93 = v92 | 0x600000000;
            *(void *)(a2 + 56) += 8;
            ++*(_DWORD *)(a2 + 64);
            unsigned int v94 = *(unsigned __int16 *)(a2 + 68);
            if (v94 <= 6) {
              LOWORD(v94) = 6;
            }
            *(_WORD *)(a2 + 6++*(_DWORD *)(result + 8) = v94;
            BOOL v88 = *(unsigned char *)(a2 + 80) == 0;
          }
          if (v85 || !v88)
          {
            unsigned int v95 = sub_1CC7807FC(a2, v85);
            int v96 = *(uint64_t **)(a2 + 56);
            if (*(void *)(a2 + 48) - (void)v96 <= 7uLL)
            {
              sub_1CBF2C904((uint64_t *)a2, 8uLL);
              int v96 = *(uint64_t **)(a2 + 56);
            }
            *int v96 = v95 | 0x400000000;
            *(void *)(a2 + 56) += 8;
            ++*(_DWORD *)(a2 + 64);
            unsigned int v97 = *(unsigned __int16 *)(a2 + 68);
            if (v97 <= 4) {
              LOWORD(v97) = 4;
            }
            *(_WORD *)(a2 + 6++*(_DWORD *)(result + 8) = v97;
          }
          sub_1CC780134((uint64_t *)a2, 8, v87);
          int v98 = sub_1CBF2CB78(a2, (unsigned __int16)v91 - (unsigned __int16)v90 + (unsigned __int16)v89);
          int v99 = v98;
          size_t v83 = (char *)v269;
          if ((unint64_t)v82 >= v269)
          {
            uint64_t v100 = (v82 - v275) >> 2;
            unint64_t v101 = v100 + 1;
            if ((unint64_t)(v100 + 1) >> 62) {
              goto LABEL_368;
            }
            if ((uint64_t)(v269 - (void)v275) >> 1 > v101) {
              unint64_t v101 = (uint64_t)(v269 - (void)v275) >> 1;
            }
            if (v269 - (unint64_t)v275 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v102 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v102 = v101;
            }
            if (v102)
            {
              if (v102 >> 62) {
                goto LABEL_369;
              }
              int v103 = (char *)operator new(4 * v102);
            }
            else
            {
              int v103 = 0;
            }
            uint64_t v104 = &v103[4 * v100];
            *(_DWORD *)uint64_t v104 = v99;
            uint64_t v105 = v104 + 4;
            while (v82 != v275)
            {
              int v106 = *((_DWORD *)v82 - 1);
              v82 -= 4;
              *((_DWORD *)v104 - 1) = v106;
              v104 -= 4;
            }
            size_t v83 = &v103[4 * v102];
            if (v275) {
              operator delete(v275);
            }
            int v81 = v104;
            uint64_t v82 = v105;
          }
          else
          {
            *(_DWORD *)uint64_t v82 = v98;
            v82 += 4;
            int v81 = v275;
          }
          if (v279 < 0) {
            operator delete(__src[0]);
          }
          v84 += 32;
        }
        while (v84 != v267);
      }
      else
      {
        uint64_t v82 = 0;
        int v81 = 0;
      }
      uint64_t v107 = *v266;
      uint64_t v108 = v60 - __p;
      if (v60 == __p) {
        uint64_t v109 = (char *)&unk_1CFB33692;
      }
      else {
        uint64_t v109 = __p;
      }
      *(unsigned char *)(a2 + 70) = 1;
      if (*(void *)(a2 + 72) <= 3uLL) {
        *(void *)(a2 + 72) = 4;
      }
      uint64_t v110 = *(void *)(a2 + 48);
      unint64_t v111 = ((_BYTE)v110 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
      if (v110 - *(void *)(a2 + 56) < v111)
      {
        uint64_t v217 = v107;
        sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v110 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
        uint64_t v107 = v217;
        *(void *)(a2 + 48) -= v111;
      }
      else
      {
        *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v110 - v111;
        if (!v111) {
          goto LABEL_164;
        }
      }
      uint64_t v218 = 0;
      do
        *(unsigned char *)(*(void *)(a2 + 48) + v218++) = 0;
      while (v111 != v218);
      if (*(void *)(a2 + 72) <= 3uLL) {
        *(void *)(a2 + 72) = 4;
      }
LABEL_164:
      uint64_t v112 = *(void *)(a2 + 48);
      unint64_t v113 = ((_BYTE)v112 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
      uint64_t v276 = v81;
      if (v112 - *(void *)(a2 + 56) < v113)
      {
        uint64_t v219 = v107;
        sub_1CBF2C904((uint64_t *)a2, v113);
        uint64_t v107 = v219;
        *(void *)(a2 + 48) -= v113;
      }
      else
      {
        *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v112 - v113;
        if (!v113) {
          goto LABEL_168;
        }
      }
      uint64_t v114 = 0;
      do
        *(unsigned char *)(*(void *)(a2 + 48) + v114++) = 0;
      while (v113 != v114);
LABEL_168:
      if (__p != v60)
      {
        uint64_t v115 = v108 >> 2;
        do
        {
          --v115;
          int v116 = *(_DWORD *)&v109[4 * v115];
          if (*(void *)(a2 + 72) <= 3uLL) {
            *(void *)(a2 + 72) = 4;
          }
          uint64_t v117 = *(void *)(a2 + 32);
          uint64_t v118 = *(void *)(a2 + 40);
          uint64_t v119 = *(void *)(a2 + 48);
          unint64_t v120 = ((int)v119 - ((int)v117 + (int)v118)) & 3;
          if (v119 - *(void *)(a2 + 56) < v120)
          {
            uint64_t v123 = v107;
            sub_1CBF2C904((uint64_t *)a2, ((int)v119 - ((int)v117 + (int)v118)) & 3);
            uint64_t v107 = v123;
            *(void *)(a2 + 48) -= v120;
          }
          else
          {
            uint64_t v121 = v119 - v120;
            *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v121;
            if (!v120)
            {
              int v122 = v117 + v118 - v121;
              goto LABEL_180;
            }
          }
          uint64_t v124 = 0;
          do
            *(unsigned char *)(*(void *)(a2 + 48) + v124++) = 0;
          while (v120 != v124);
          uint64_t v118 = *(void *)(a2 + 40);
          uint64_t v121 = *(void *)(a2 + 48);
          uint64_t v117 = *(void *)(a2 + 32);
          int v122 = v117 - v121 + v118;
          if (*(void *)(a2 + 72) <= 3uLL) {
            *(void *)(a2 + 72) = 4;
          }
LABEL_180:
          unint64_t v125 = ((_BYTE)v121 - ((_BYTE)v117 + (_BYTE)v118)) & 3;
          uint64_t v126 = *(void *)(a2 + 56);
          if (v121 - v126 < v125)
          {
            uint64_t v130 = v107;
            sub_1CBF2C904((uint64_t *)a2, v125);
            uint64_t v107 = v130;
            *(void *)(a2 + 48) -= v125;
LABEL_182:
            uint64_t v128 = 0;
            do
              *(unsigned char *)(*(void *)(a2 + 48) + v128++) = 0;
            while (v125 != v128);
            uint64_t v127 = *(void *)(a2 + 48);
            uint64_t v126 = *(void *)(a2 + 56);
            goto LABEL_185;
          }
          uint64_t v127 = v121 - v125;
          *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v121 - v125;
          if (v125) {
            goto LABEL_182;
          }
LABEL_185:
          if ((unint64_t)(v127 - v126) <= 3)
          {
            uint64_t v129 = v107;
            sub_1CBF2C904((uint64_t *)a2, 4uLL);
            uint64_t v107 = v129;
            uint64_t v127 = *(void *)(a2 + 48);
          }
          *(_DWORD *)(v127 - 4) = v122 - v116 + 4;
          *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v127 - 4;
        }
        while (v115);
      }
      *(unsigned char *)(a2 + 70) = 0;
      if (*(void *)(a2 + 72) <= 3uLL) {
        *(void *)(a2 + 72) = 4;
      }
      uint64_t v132 = *(void *)(a2 + 48);
      uint64_t v131 = *(void *)(a2 + 56);
      unint64_t v133 = ((_BYTE)v132 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
      if (v132 - v131 < v133)
      {
        uint64_t v236 = v107;
        sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v132 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
        uint64_t v107 = v236;
        *(void *)(a2 + 48) -= v133;
      }
      else
      {
        uint64_t v134 = v132 - v133;
        *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v132 - v133;
        if (!v133) {
          goto LABEL_197;
        }
      }
      uint64_t v135 = 0;
      do
        *(unsigned char *)(*(void *)(a2 + 48) + v135++) = 0;
      while (v133 != v135);
      uint64_t v134 = *(void *)(a2 + 48);
      uint64_t v131 = *(void *)(a2 + 56);
LABEL_197:
      if ((unint64_t)(v134 - v131) <= 3)
      {
        uint64_t v225 = v107;
        sub_1CBF2C904((uint64_t *)a2, 4uLL);
        uint64_t v107 = v225;
        uint64_t v134 = *(void *)(a2 + 48);
      }
      *(_DWORD *)(v134 - 4) = (unint64_t)v108 >> 2;
      uint64_t v136 = v134 - 4;
      *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v136;
      uint64_t v138 = *(void *)(a2 + 32);
      uint64_t v137 = *(void *)(a2 + 40);
      uint64_t v139 = v82 - v81;
      if (v82 == v276) {
        uint64_t v140 = (char *)&unk_1CFB33692;
      }
      else {
        uint64_t v140 = v276;
      }
      *(unsigned char *)(a2 + 70) = 1;
      if (*(void *)(a2 + 72) <= 3uLL) {
        *(void *)(a2 + 72) = 4;
      }
      unint64_t v141 = ((_BYTE)v136 - ((_BYTE)v138 + (_BYTE)v137)) & 3;
      if (v136 - *(void *)(a2 + 56) < v141)
      {
        uint64_t v220 = v107;
        uint64_t v221 = v137;
        uint64_t v272 = v138;
        sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v136 - ((_BYTE)v138 + (_BYTE)v137)) & 3);
        uint64_t v138 = v272;
        uint64_t v137 = v221;
        uint64_t v107 = v220;
        *(void *)(a2 + 48) -= v141;
      }
      else
      {
        *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v136 - v141;
        if ((((_BYTE)v136 - ((_BYTE)v138 + (_BYTE)v137)) & 3) == 0) {
          goto LABEL_206;
        }
      }
      uint64_t v222 = 0;
      do
        *(unsigned char *)(*(void *)(a2 + 48) + v222++) = 0;
      while (v141 != v222);
      if (*(void *)(a2 + 72) <= 3uLL) {
        *(void *)(a2 + 72) = 4;
      }
LABEL_206:
      uint64_t v142 = *(void *)(a2 + 48);
      unint64_t v143 = ((_BYTE)v142 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
      if (v142 - *(void *)(a2 + 56) < v143)
      {
        uint64_t v223 = v107;
        uint64_t v224 = v137;
        uint64_t v273 = v138;
        sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v142 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
        uint64_t v138 = v273;
        uint64_t v137 = v224;
        uint64_t v107 = v223;
        *(void *)(a2 + 48) -= v143;
      }
      else
      {
        *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v142 - v143;
        if (!v143) {
          goto LABEL_210;
        }
      }
      uint64_t v144 = 0;
      do
        *(unsigned char *)(*(void *)(a2 + 48) + v144++) = 0;
      while (v143 != v144);
LABEL_210:
      if (v276 != v82)
      {
        uint64_t v145 = v139 >> 2;
        do
        {
          --v145;
          int v146 = *(_DWORD *)&v140[4 * v145];
          if (*(void *)(a2 + 72) <= 3uLL) {
            *(void *)(a2 + 72) = 4;
          }
          uint64_t v147 = *(void *)(a2 + 32);
          uint64_t v148 = *(void *)(a2 + 40);
          uint64_t v149 = *(void *)(a2 + 48);
          unint64_t v150 = ((int)v149 - ((int)v147 + (int)v148)) & 3;
          if (v149 - *(void *)(a2 + 56) < v150)
          {
            uint64_t v153 = v107;
            uint64_t v154 = v137;
            uint64_t v270 = v138;
            sub_1CBF2C904((uint64_t *)a2, ((int)v149 - ((int)v147 + (int)v148)) & 3);
            uint64_t v138 = v270;
            uint64_t v137 = v154;
            uint64_t v107 = v153;
            *(void *)(a2 + 48) -= v150;
          }
          else
          {
            uint64_t v151 = v149 - v150;
            *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v151;
            if (!v150)
            {
              int v152 = v147 + v148 - v151;
              goto LABEL_222;
            }
          }
          uint64_t v155 = 0;
          do
            *(unsigned char *)(*(void *)(a2 + 48) + v155++) = 0;
          while (v150 != v155);
          uint64_t v148 = *(void *)(a2 + 40);
          uint64_t v151 = *(void *)(a2 + 48);
          uint64_t v147 = *(void *)(a2 + 32);
          int v152 = v147 - v151 + v148;
          if (*(void *)(a2 + 72) <= 3uLL) {
            *(void *)(a2 + 72) = 4;
          }
LABEL_222:
          unint64_t v156 = ((_BYTE)v151 - ((_BYTE)v147 + (_BYTE)v148)) & 3;
          uint64_t v157 = *(void *)(a2 + 56);
          if (v151 - v157 < v156)
          {
            unsigned int v268 = v107;
            uint64_t v163 = v137;
            uint64_t v271 = v138;
            sub_1CBF2C904((uint64_t *)a2, v156);
            uint64_t v138 = v271;
            uint64_t v137 = v163;
            uint64_t v107 = v268;
            *(void *)(a2 + 48) -= v156;
LABEL_224:
            uint64_t v159 = 0;
            do
              *(unsigned char *)(*(void *)(a2 + 48) + v159++) = 0;
            while (v156 != v159);
            uint64_t v158 = *(void *)(a2 + 48);
            uint64_t v157 = *(void *)(a2 + 56);
            goto LABEL_227;
          }
          uint64_t v158 = v151 - v156;
          *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v151 - v156;
          if (v156) {
            goto LABEL_224;
          }
LABEL_227:
          if ((unint64_t)(v158 - v157) <= 3)
          {
            uint64_t v160 = v107;
            uint64_t v161 = v137;
            uint64_t v162 = v138;
            sub_1CBF2C904((uint64_t *)a2, 4uLL);
            uint64_t v138 = v162;
            uint64_t v137 = v161;
            uint64_t v107 = v160;
            uint64_t v158 = *(void *)(a2 + 48);
          }
          *(_DWORD *)(v158 - 4) = v152 - v146 + 4;
          *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v158 - 4;
        }
        while (v145);
      }
      *(unsigned char *)(a2 + 70) = 0;
      if (*(void *)(a2 + 72) <= 3uLL) {
        *(void *)(a2 + 72) = 4;
      }
      uint64_t v165 = *(void *)(a2 + 48);
      uint64_t v164 = *(void *)(a2 + 56);
      unint64_t v166 = ((_BYTE)v165 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
      uint64_t v4 = v265;
      if (v165 - v164 < v166)
      {
        char v237 = v107;
        int v238 = v137;
        int v239 = v138;
        sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v165 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
        LODWORD(v13++*(_DWORD *)(result + 8) = v239;
        LODWORD(v137) = v238;
        LOBYTE(v107) = v237;
        *(void *)(a2 + 48) -= v166;
        size_t v168 = v276;
      }
      else
      {
        uint64_t v167 = v165 - v166;
        *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v165 - v166;
        size_t v168 = v276;
        if (!v166) {
          goto LABEL_239;
        }
      }
      uint64_t v169 = 0;
      do
        *(unsigned char *)(*(void *)(a2 + 48) + v169++) = 0;
      while (v166 != v169);
      uint64_t v167 = *(void *)(a2 + 48);
      uint64_t v164 = *(void *)(a2 + 56);
LABEL_239:
      if ((unint64_t)(v167 - v164) <= 3)
      {
        char v226 = v107;
        int v227 = v137;
        int v228 = v138;
        sub_1CBF2C904((uint64_t *)a2, 4uLL);
        LODWORD(v13++*(_DWORD *)(result + 8) = v228;
        LODWORD(v137) = v227;
        LOBYTE(v107) = v226;
        uint64_t v167 = *(void *)(a2 + 48);
      }
      *(_DWORD *)(v167 - 4) = (unint64_t)v139 >> 2;
      uint64_t v170 = v167 - 4;
      *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v170;
      uint64_t v171 = *(void *)(a2 + 32);
      uint64_t v172 = *(void *)(a2 + 40);
      *(unsigned char *)(a2 + 70) = 1;
      int v173 = v171 - v170 + v172;
      if (v173)
      {
        if (*(void *)(a2 + 72) <= 3uLL) {
          *(void *)(a2 + 72) = 4;
        }
        unint64_t v174 = ((_BYTE)v170 - ((_BYTE)v171 + (_BYTE)v172)) & 3;
        if (v170 - *(void *)(a2 + 56) < v174)
        {
          char v240 = v107;
          int v241 = v137;
          int v242 = v138;
          sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v170 - ((_BYTE)v171 + (_BYTE)v172)) & 3);
          LODWORD(v13++*(_DWORD *)(result + 8) = v242;
          LODWORD(v137) = v241;
          LOBYTE(v107) = v240;
          *(void *)(a2 + 48) -= v174;
          goto LABEL_246;
        }
        uint64_t v175 = v170 - v174;
        *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v175;
        if (v174)
        {
LABEL_246:
          uint64_t v176 = 0;
          do
            *(unsigned char *)(*(void *)(a2 + 48) + v176++) = 0;
          while (v174 != v176);
          uint64_t v172 = *(void *)(a2 + 40);
          uint64_t v175 = *(void *)(a2 + 48);
          uint64_t v171 = *(void *)(a2 + 32);
        }
        int v177 = v172 - v175 + v171 - v173 + 4;
        if (v172 - v175 + v171 - v173 == -4 && *(unsigned char *)(a2 + 80) == 0) {
          goto LABEL_267;
        }
        if (*(void *)(a2 + 72) <= 3uLL) {
          *(void *)(a2 + 72) = 4;
        }
        unint64_t v179 = ((_BYTE)v175 - ((_BYTE)v171 + (_BYTE)v172)) & 3;
        char v180 = *(uint64_t **)(a2 + 56);
        if (v175 - (uint64_t)v180 >= v179)
        {
          uint64_t v181 = v175 - v179;
          *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v175 - v179;
          if (v179)
          {
LABEL_257:
            uint64_t v182 = 0;
            do
              *(unsigned char *)(*(void *)(a2 + 48) + v182++) = 0;
            while (v179 != v182);
            uint64_t v181 = *(void *)(a2 + 48);
            char v180 = *(uint64_t **)(a2 + 56);
          }
          if ((unint64_t)(v181 - (void)v180) <= 3)
          {
            char v229 = v107;
            int v230 = v137;
            int v231 = v138;
            sub_1CBF2C904((uint64_t *)a2, 4uLL);
            LODWORD(v13++*(_DWORD *)(result + 8) = v231;
            LODWORD(v137) = v230;
            LOBYTE(v107) = v229;
            uint64_t v181 = *(void *)(a2 + 48);
            char v180 = *(uint64_t **)(a2 + 56);
          }
          *(_DWORD *)(v181 - 4) = v177;
          uint64_t v183 = v181 - 4;
          *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v183;
          uint64_t v184 = *(void *)(a2 + 32);
          uint64_t v185 = *(void *)(a2 + 40);
          if ((unint64_t)(v183 - (void)v180) <= 7)
          {
            char v233 = v107;
            int v234 = v137;
            int v274 = v138;
            sub_1CBF2C904((uint64_t *)a2, 8uLL);
            LODWORD(v13++*(_DWORD *)(result + 8) = v274;
            LODWORD(v137) = v234;
            LOBYTE(v107) = v233;
            char v180 = *(uint64_t **)(a2 + 56);
          }
          *char v180 = (v184 - v183 + v185) | 0x800000000;
          *(void *)(a2 + 56) += 8;
          ++*(_DWORD *)(a2 + 64);
          unsigned int v186 = *(unsigned __int16 *)(a2 + 68);
          if (v186 <= 8) {
            LOWORD(v186) = 8;
          }
          *(_WORD *)(a2 + 6++*(_DWORD *)(result + 8) = v186;
          goto LABEL_267;
        }
        char v244 = v107;
        int v245 = v137;
        int v246 = v138;
        sub_1CBF2C904((uint64_t *)a2, v179);
        LODWORD(v13++*(_DWORD *)(result + 8) = v246;
        LODWORD(v137) = v245;
        LOBYTE(v107) = v244;
        *(void *)(a2 + 48) -= v179;
        goto LABEL_257;
      }
LABEL_267:
      int v187 = v138 - v136 + v137;
      int v188 = v264;
      if (!v187) {
        goto LABEL_293;
      }
      if (*(void *)(a2 + 72) <= 3uLL) {
        *(void *)(a2 + 72) = 4;
      }
      uint64_t v189 = *(void *)(a2 + 32);
      uint64_t v190 = *(void *)(a2 + 40);
      uint64_t v191 = *(void *)(a2 + 48);
      unint64_t v192 = ((_BYTE)v191 - ((_BYTE)v189 + (_BYTE)v190)) & 3;
      if (v191 - *(void *)(a2 + 56) < v192)
      {
        char v243 = v107;
        sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v191 - ((_BYTE)v189 + (_BYTE)v190)) & 3);
        LOBYTE(v107) = v243;
        *(void *)(a2 + 48) -= v192;
LABEL_272:
        uint64_t v194 = 0;
        do
          *(unsigned char *)(*(void *)(a2 + 48) + v194++) = 0;
        while (v192 != v194);
        uint64_t v190 = *(void *)(a2 + 40);
        uint64_t v193 = *(void *)(a2 + 48);
        uint64_t v189 = *(void *)(a2 + 32);
        goto LABEL_275;
      }
      uint64_t v193 = v191 - v192;
      *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v193;
      if (v192) {
        goto LABEL_272;
      }
LABEL_275:
      int v195 = v190 - v193 + v189 - v187 + 4;
      if (v195) {
        BOOL v196 = 0;
      }
      else {
        BOOL v196 = *(unsigned char *)(a2 + 80) == 0;
      }
      if (v196) {
        goto LABEL_293;
      }
      if (*(void *)(a2 + 72) <= 3uLL) {
        *(void *)(a2 + 72) = 4;
      }
      unint64_t v197 = ((_BYTE)v193 - ((_BYTE)v189 + (_BYTE)v190)) & 3;
      int v198 = *(uint64_t **)(a2 + 56);
      if (v193 - (uint64_t)v198 < v197)
      {
        char v247 = v107;
        sub_1CBF2C904((uint64_t *)a2, v197);
        LOBYTE(v107) = v247;
        *(void *)(a2 + 48) -= v197;
LABEL_283:
        uint64_t v200 = 0;
        do
          *(unsigned char *)(*(void *)(a2 + 48) + v200++) = 0;
        while (v197 != v200);
        uint64_t v199 = *(void *)(a2 + 48);
        int v198 = *(uint64_t **)(a2 + 56);
        goto LABEL_286;
      }
      uint64_t v199 = v193 - v197;
      *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v193 - v197;
      if (v197) {
        goto LABEL_283;
      }
LABEL_286:
      if ((unint64_t)(v199 - (void)v198) <= 3)
      {
        char v232 = v107;
        sub_1CBF2C904((uint64_t *)a2, 4uLL);
        LOBYTE(v107) = v232;
        uint64_t v199 = *(void *)(a2 + 48);
        int v198 = *(uint64_t **)(a2 + 56);
      }
      *(_DWORD *)(v199 - 4) = v195;
      uint64_t v201 = v199 - 4;
      *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v201;
      uint64_t v202 = *(void *)(a2 + 32);
      uint64_t v203 = *(void *)(a2 + 40);
      if ((unint64_t)(v201 - (void)v198) <= 7)
      {
        char v235 = v107;
        sub_1CBF2C904((uint64_t *)a2, 8uLL);
        LOBYTE(v107) = v235;
        int v198 = *(uint64_t **)(a2 + 56);
      }
      *int v198 = (v202 - v201 + v203) | 0x600000000;
      *(void *)(a2 + 56) += 8;
      ++*(_DWORD *)(a2 + 64);
      unsigned int v204 = *(unsigned __int16 *)(a2 + 68);
      if (v204 <= 6) {
        LOWORD(v204) = 6;
      }
      *(_WORD *)(a2 + 6++*(_DWORD *)(result + 8) = v204;
LABEL_293:
      unsigned int v57 = (char *)v263;
      if (v107 | *(unsigned __int8 *)(a2 + 80))
      {
        unsigned int v205 = sub_1CBF2CB00(a2, v107);
        uint64_t v206 = *(uint64_t **)(a2 + 56);
        if (*(void *)(a2 + 48) - (void)v206 <= 7uLL)
        {
          sub_1CBF2C904((uint64_t *)a2, 8uLL);
          uint64_t v206 = *(uint64_t **)(a2 + 56);
        }
        uint64_t *v206 = v205 | 0x400000000;
        *(void *)(a2 + 56) += 8;
        ++*(_DWORD *)(a2 + 64);
        unsigned int v207 = *(unsigned __int16 *)(a2 + 68);
        if (v207 <= 4) {
          LOWORD(v207) = 4;
        }
        *(_WORD *)(a2 + 6++*(_DWORD *)(result + 8) = v207;
      }
      int v208 = sub_1CBF2CB78(a2, v173);
      int v209 = v208;
      if ((unint64_t)v264 >= v263)
      {
        uint64_t v210 = (v264 - v265) >> 2;
        unint64_t v211 = v210 + 1;
        if ((unint64_t)(v210 + 1) >> 62) {
LABEL_368:
        }
          abort();
        if ((uint64_t)(v263 - (void)v265) >> 1 > v211) {
          unint64_t v211 = (uint64_t)(v263 - (void)v265) >> 1;
        }
        if (v263 - (unint64_t)v265 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v212 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v212 = v211;
        }
        if (v212)
        {
          if (v212 >> 62) {
LABEL_369:
          }
            sub_1CB833614();
          int v213 = (char *)operator new(4 * v212);
        }
        else
        {
          int v213 = 0;
        }
        uint64_t v214 = &v213[4 * v210];
        *(_DWORD *)uint64_t v214 = v209;
        unsigned int v215 = v214 + 4;
        while (v188 != v265)
        {
          int v216 = *((_DWORD *)v188 - 1);
          v188 -= 4;
          *((_DWORD *)v214 - 1) = v216;
          v214 -= 4;
        }
        unsigned int v57 = &v213[4 * v212];
        if (v265) {
          operator delete(v265);
        }
        uint64_t v4 = v214;
        uint64_t v5 = v215;
        if (!v168) {
          goto LABEL_302;
        }
LABEL_301:
        operator delete(v168);
        goto LABEL_302;
      }
      *(_DWORD *)uint64_t v264 = v208;
      uint64_t v5 = v264 + 4;
      if (v168) {
        goto LABEL_301;
      }
LABEL_302:
      if (__p) {
        operator delete(__p);
      }
      uint64_t v3 = v266 + 20;
      if (v266 + 20 == v262) {
        goto LABEL_3;
      }
    }
  }
  uint64_t v4 = 0;
  uint64_t v5 = 0;
LABEL_3:
  uint64_t v6 = v5 - v4;
  if (v5 == v4) {
    uint64_t v7 = (char *)&unk_1CFB33692;
  }
  else {
    uint64_t v7 = v4;
  }
  *(unsigned char *)(a2 + 70) = 1;
  if (*(void *)(a2 + 72) <= 3uLL) {
    *(void *)(a2 + 72) = 4;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  unint64_t v9 = ((_BYTE)v8 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v8 - *(void *)(a2 + 56) < v9)
  {
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v8 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(void *)(a2 + 48) -= v9;
  }
  else
  {
    *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v8 - v9;
    if (!v9) {
      goto LABEL_10;
    }
  }
  uint64_t v261 = 0;
  do
    *(unsigned char *)(*(void *)(a2 + 48) + v261++) = 0;
  while (v9 != v261);
  if (*(void *)(a2 + 72) <= 3uLL) {
    *(void *)(a2 + 72) = 4;
  }
LABEL_10:
  uint64_t v10 = *(void *)(a2 + 48);
  unint64_t v11 = ((_BYTE)v10 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v10 - *(void *)(a2 + 56) < v11)
  {
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v10 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(void *)(a2 + 48) -= v11;
  }
  else
  {
    *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v10 - v11;
    if (!v11) {
      goto LABEL_14;
    }
  }
  uint64_t v12 = 0;
  do
    *(unsigned char *)(*(void *)(a2 + 48) + v12++) = 0;
  while (v11 != v12);
LABEL_14:
  if (v4 != v5)
  {
    uint64_t v248 = v6 >> 2;
    do
    {
      --v248;
      int v249 = *(_DWORD *)&v7[4 * v248];
      if (*(void *)(a2 + 72) <= 3uLL) {
        *(void *)(a2 + 72) = 4;
      }
      uint64_t v250 = *(void *)(a2 + 32);
      uint64_t v251 = *(void *)(a2 + 40);
      uint64_t v252 = *(void *)(a2 + 48);
      unint64_t v253 = ((int)v252 - ((int)v250 + (int)v251)) & 3;
      if (v252 - *(void *)(a2 + 56) < v253)
      {
        sub_1CBF2C904((uint64_t *)a2, ((int)v252 - ((int)v250 + (int)v251)) & 3);
        *(void *)(a2 + 48) -= v253;
      }
      else
      {
        uint64_t v254 = v252 - v253;
        *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v254;
        if (!v253)
        {
          int v255 = v250 + v251 - v254;
          goto LABEL_352;
        }
      }
      uint64_t v256 = 0;
      do
        *(unsigned char *)(*(void *)(a2 + 48) + v256++) = 0;
      while (v253 != v256);
      uint64_t v251 = *(void *)(a2 + 40);
      uint64_t v254 = *(void *)(a2 + 48);
      uint64_t v250 = *(void *)(a2 + 32);
      int v255 = v250 - v254 + v251;
      if (*(void *)(a2 + 72) <= 3uLL) {
        *(void *)(a2 + 72) = 4;
      }
LABEL_352:
      unint64_t v257 = ((_BYTE)v254 - ((_BYTE)v250 + (_BYTE)v251)) & 3;
      uint64_t v258 = *(void *)(a2 + 56);
      if (v254 - v258 < v257)
      {
        sub_1CBF2C904((uint64_t *)a2, v257);
        *(void *)(a2 + 48) -= v257;
LABEL_354:
        uint64_t v260 = 0;
        do
          *(unsigned char *)(*(void *)(a2 + 48) + v260++) = 0;
        while (v257 != v260);
        uint64_t v259 = *(void *)(a2 + 48);
        uint64_t v258 = *(void *)(a2 + 56);
        goto LABEL_357;
      }
      uint64_t v259 = v254 - v257;
      *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v254 - v257;
      if (v257) {
        goto LABEL_354;
      }
LABEL_357:
      if ((unint64_t)(v259 - v258) <= 3)
      {
        sub_1CBF2C904((uint64_t *)a2, 4uLL);
        uint64_t v259 = *(void *)(a2 + 48);
      }
      *(_DWORD *)(v259 - 4) = v255 - v249 + 4;
      *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v259 - 4;
    }
    while (v248);
  }
  *(unsigned char *)(a2 + 70) = 0;
  if (*(void *)(a2 + 72) <= 3uLL) {
    *(void *)(a2 + 72) = 4;
  }
  uint64_t v14 = *(void *)(a2 + 48);
  uint64_t v13 = *(void *)(a2 + 56);
  unint64_t v15 = ((_BYTE)v14 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v14 - v13 < v15)
  {
    sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v14 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(void *)(a2 + 48) -= v15;
  }
  else
  {
    uint64_t v16 = v14 - v15;
    *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v14 - v15;
    if (!v15) {
      goto LABEL_22;
    }
  }
  uint64_t v17 = 0;
  do
    *(unsigned char *)(*(void *)(a2 + 48) + v17++) = 0;
  while (v15 != v17);
  uint64_t v16 = *(void *)(a2 + 48);
  uint64_t v13 = *(void *)(a2 + 56);
LABEL_22:
  if ((unint64_t)(v16 - v13) <= 3)
  {
    sub_1CBF2C904((uint64_t *)a2, 4uLL);
    uint64_t v16 = *(void *)(a2 + 48);
  }
  *(_DWORD *)(v16 - 4) = (unint64_t)v6 >> 2;
  uint64_t v18 = v16 - 4;
  *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v18;
  uint64_t v19 = *(void *)(a2 + 32);
  uint64_t v20 = *(void *)(a2 + 40);
  *(unsigned char *)(a2 + 70) = 1;
  int v21 = v19 - v18 + v20;
  if (v21)
  {
    if (*(void *)(a2 + 72) <= 3uLL) {
      *(void *)(a2 + 72) = 4;
    }
    unint64_t v22 = ((_BYTE)v18 - ((_BYTE)v19 + (_BYTE)v20)) & 3;
    if (v18 - *(void *)(a2 + 56) < v22)
    {
      sub_1CBF2C904((uint64_t *)a2, ((_BYTE)v18 - ((_BYTE)v19 + (_BYTE)v20)) & 3);
      *(void *)(a2 + 48) -= v22;
    }
    else
    {
      uint64_t v23 = v18 - v22;
      *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v23;
      if (!v22)
      {
LABEL_32:
        int v25 = v20 - v23 + v19 - v21 + 4;
        if (v20 - v23 + v19 - v21 == -4 && *(unsigned char *)(a2 + 80) == 0) {
          goto LABEL_50;
        }
        if (*(void *)(a2 + 72) <= 3uLL) {
          *(void *)(a2 + 72) = 4;
        }
        unint64_t v27 = ((_BYTE)v23 - ((_BYTE)v19 + (_BYTE)v20)) & 3;
        BOOL v28 = *(uint64_t **)(a2 + 56);
        if (v23 - (uint64_t)v28 < v27)
        {
          sub_1CBF2C904((uint64_t *)a2, v27);
          *(void *)(a2 + 48) -= v27;
        }
        else
        {
          uint64_t v29 = v23 - v27;
          *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v23 - v27;
          if (!v27)
          {
LABEL_43:
            if ((unint64_t)(v29 - (void)v28) <= 3)
            {
              sub_1CBF2C904((uint64_t *)a2, 4uLL);
              uint64_t v29 = *(void *)(a2 + 48);
              BOOL v28 = *(uint64_t **)(a2 + 56);
            }
            *(_DWORD *)(v29 - 4) = v25;
            uint64_t v31 = v29 - 4;
            *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v31;
            uint64_t v32 = *(void *)(a2 + 32) - v31 + *(void *)(a2 + 40);
            if ((unint64_t)(v31 - (void)v28) <= 7)
            {
              sub_1CBF2C904((uint64_t *)a2, 8uLL);
              BOOL v28 = *(uint64_t **)(a2 + 56);
            }
            uint64_t *v28 = v32 | 0x400000000;
            *(void *)(a2 + 56) += 8;
            ++*(_DWORD *)(a2 + 64);
            unsigned int v33 = *(unsigned __int16 *)(a2 + 68);
            if (v33 <= 4) {
              LOWORD(v33) = 4;
            }
            *(_WORD *)(a2 + 6++*(_DWORD *)(result + 8) = v33;
            goto LABEL_50;
          }
        }
        uint64_t v30 = 0;
        do
          *(unsigned char *)(*(void *)(a2 + 48) + v30++) = 0;
        while (v27 != v30);
        uint64_t v29 = *(void *)(a2 + 48);
        BOOL v28 = *(uint64_t **)(a2 + 56);
        goto LABEL_43;
      }
    }
    uint64_t v24 = 0;
    do
      *(unsigned char *)(*(void *)(a2 + 48) + v24++) = 0;
    while (v22 != v24);
    uint64_t v20 = *(void *)(a2 + 40);
    uint64_t v23 = *(void *)(a2 + 48);
    uint64_t v19 = *(void *)(a2 + 32);
    goto LABEL_32;
  }
LABEL_50:
  int v34 = sub_1CBF2CB78(a2, v21);
  *(unsigned char *)(a2 + 70) = 1;
  int v35 = *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 48) + *(_DWORD *)(a2 + 40);
  unsigned int v36 = sub_1CD4525F4(a2, 2);
  long long v37 = *(uint64_t **)(a2 + 56);
  if (*(void *)(a2 + 48) - (void)v37 <= 7uLL)
  {
    sub_1CBF2C904((uint64_t *)a2, 8uLL);
    long long v37 = *(uint64_t **)(a2 + 56);
  }
  *long long v37 = v36 | 0x400000000;
  uint64_t v38 = *(void *)(a2 + 56) + 8;
  *(void *)(a2 + 56) = v38;
  ++*(_DWORD *)(a2 + 64);
  unsigned int v39 = *(unsigned __int16 *)(a2 + 68);
  if (v39 <= 4) {
    LOWORD(v39) = 4;
  }
  *(_WORD *)(a2 + 6++*(_DWORD *)(result + 8) = v39;
  if (v34)
  {
    if (*(void *)(a2 + 72) <= 3uLL) {
      *(void *)(a2 + 72) = 4;
    }
    uint64_t v40 = *(void *)(a2 + 40);
    uint64_t v41 = *(void *)(a2 + 48);
    uint64_t v42 = *(void *)(a2 + 32);
    unint64_t v43 = ((int)v41 - ((int)v42 + (int)v40)) & 3;
    if (v41 - v38 < v43)
    {
      sub_1CBF2C904((uint64_t *)a2, ((int)v41 - ((int)v42 + (int)v40)) & 3);
      *(void *)(a2 + 48) -= v43;
    }
    else
    {
      uint64_t v44 = v41 - v43;
      *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v41 - v43;
      if (!v43)
      {
LABEL_62:
        int v46 = v40 - v44 + v42 - v34 + 4;
        if (v40 - v44 + v42 - v34 == -4 && *(unsigned char *)(a2 + 80) == 0) {
          goto LABEL_80;
        }
        if (*(void *)(a2 + 72) <= 3uLL) {
          *(void *)(a2 + 72) = 4;
        }
        unint64_t v48 = ((_BYTE)v44 - ((_BYTE)v42 + (_BYTE)v40)) & 3;
        uint64_t v49 = *(uint64_t **)(a2 + 56);
        if (v44 - (uint64_t)v49 < v48)
        {
          sub_1CBF2C904((uint64_t *)a2, v48);
          *(void *)(a2 + 48) -= v48;
        }
        else
        {
          uint64_t v50 = v44 - v48;
          *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v44 - v48;
          if (!v48)
          {
LABEL_73:
            if ((unint64_t)(v50 - (void)v49) <= 3)
            {
              sub_1CBF2C904((uint64_t *)a2, 4uLL);
              uint64_t v50 = *(void *)(a2 + 48);
              uint64_t v49 = *(uint64_t **)(a2 + 56);
            }
            *(_DWORD *)(v50 - 4) = v46;
            uint64_t v52 = v50 - 4;
            *(void *)(a2 + 4++*(_DWORD *)(result + 8) = v52;
            uint64_t v53 = *(void *)(a2 + 32) - v52 + *(void *)(a2 + 40);
            if ((unint64_t)(v52 - (void)v49) <= 7)
            {
              sub_1CBF2C904((uint64_t *)a2, 8uLL);
              uint64_t v49 = *(uint64_t **)(a2 + 56);
            }
            uint64_t *v49 = v53 | 0xA00000000;
            *(void *)(a2 + 56) += 8;
            ++*(_DWORD *)(a2 + 64);
            unsigned int v54 = *(unsigned __int16 *)(a2 + 68);
            if (v54 <= 0xA) {
              LOWORD(v54) = 10;
            }
            *(_WORD *)(a2 + 6++*(_DWORD *)(result + 8) = v54;
            goto LABEL_80;
          }
        }
        uint64_t v51 = 0;
        do
          *(unsigned char *)(*(void *)(a2 + 48) + v51++) = 0;
        while (v48 != v51);
        uint64_t v50 = *(void *)(a2 + 48);
        uint64_t v49 = *(uint64_t **)(a2 + 56);
        goto LABEL_73;
      }
    }
    uint64_t v45 = 0;
    do
      *(unsigned char *)(*(void *)(a2 + 48) + v45++) = 0;
    while (v43 != v45);
    uint64_t v40 = *(void *)(a2 + 40);
    uint64_t v44 = *(void *)(a2 + 48);
    uint64_t v42 = *(void *)(a2 + 32);
    goto LABEL_62;
  }
LABEL_80:
  unsigned int v55 = sub_1CBF2CB78(a2, v35);
  if (v4) {
    operator delete(v4);
  }
  return v55 | 0x100000000;
}

uint64_t sub_1CD27448C(void *a1, void *__src)
{
  if (!a1[11]) {
    operator new();
  }
  uint64_t v4 = a1[5];
  uint64_t v3 = a1[6];
  uint64_t v5 = a1[4];
  uint64_t v6 = sub_1CBF2F03C((uint64_t)a1, __src, 0);
  uint64_t v7 = v6;
  uint64_t v8 = (uint64_t **)a1[11];
  unint64_t v9 = v8 + 1;
  uint64_t v10 = v8[1];
  if (v10)
  {
    int v42 = v4;
    int v43 = v5;
    int v44 = v3;
    uint64_t v11 = v8[3][5] + v8[3][4];
    unsigned int v45 = v6;
    uint64_t v12 = (unsigned int *)(v11 - v6);
    unsigned int v15 = *v12;
    uint64_t v13 = v12 + 1;
    unsigned int v14 = v15;
    uint64_t v16 = v8 + 1;
    uint64_t v17 = v8[1];
    do
    {
      uint64_t v18 = *((unsigned int *)v17 + 7);
      unsigned int v19 = *(_DWORD *)(v11 - v18);
      if (v14 >= v19) {
        size_t v20 = v19;
      }
      else {
        size_t v20 = v14;
      }
      int v21 = memcmp((const void *)(v11 - v18 + 4), v13, v20);
      BOOL v22 = v19 < v14;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      BOOL v23 = !v22;
      if (v22) {
        uint64_t v24 = (uint64_t **)(v17 + 1);
      }
      else {
        uint64_t v24 = (uint64_t **)v17;
      }
      if (v23) {
        uint64_t v16 = (uint64_t **)v17;
      }
      uint64_t v17 = *v24;
    }
    while (*v24);
    if (v9 == v16)
    {
      uint64_t v7 = v45;
      goto LABEL_23;
    }
    uint64_t v25 = *((unsigned int *)v16 + 7);
    unsigned int v26 = *(_DWORD *)(v11 - v25);
    if (v26 >= v14) {
      size_t v27 = v14;
    }
    else {
      size_t v27 = v26;
    }
    int v28 = memcmp(v13, (const void *)(v11 - v25 + 4), v27);
    BOOL v29 = v14 < v26;
    if (v28) {
      BOOL v29 = v28 < 0;
    }
    uint64_t v7 = v45;
    if (v29)
    {
      while (1)
      {
        while (1)
        {
LABEL_23:
          uint64_t v30 = v10;
          uint64_t v31 = *((unsigned int *)v10 + 7);
          uint64_t v32 = (const void *)(v11 - v31 + 4);
          unsigned int v33 = *(_DWORD *)(v11 - v31);
          if (v33 >= v14) {
            size_t v34 = v14;
          }
          else {
            size_t v34 = v33;
          }
          int v35 = memcmp(v13, (const void *)(v11 - v31 + 4), v34);
          BOOL v36 = v14 < v33;
          if (v35) {
            BOOL v36 = v35 < 0;
          }
          if (!v36) {
            break;
          }
          uint64_t v10 = (uint64_t *)*v10;
          unint64_t v9 = (uint64_t **)v30;
          if (!*v30) {
            goto LABEL_35;
          }
        }
        int v37 = memcmp(v32, v13, v34);
        BOOL v38 = v33 < v14;
        if (v37) {
          BOOL v38 = v37 < 0;
        }
        if (!v38) {
          break;
        }
        uint64_t v10 = (uint64_t *)v10[1];
        if (!v10)
        {
          unint64_t v9 = (uint64_t **)(v30 + 1);
          goto LABEL_35;
        }
      }
    }
    else
    {
      a1[6] += *((_DWORD *)a1 + 8) + v44 - (v43 + v42 + a1[6]) + *((_DWORD *)a1 + 10);
      return v25;
    }
  }
  else
  {
    uint64_t v30 = (uint64_t *)(v8 + 1);
LABEL_35:
    unsigned int v39 = operator new(0x20uLL);
    v39[7] = v7;
    *(void *)unsigned int v39 = 0;
    *((void *)v39 + 1) = 0;
    *((void *)v39 + 2) = v30;
    *unint64_t v9 = (uint64_t *)v39;
    uint64_t v40 = (uint64_t *)**v8;
    if (v40)
    {
      *uint64_t v8 = v40;
      unsigned int v39 = *v9;
    }
    sub_1CB8358B8(v8[1], (uint64_t *)v39);
    v8[2] = (uint64_t *)((char *)v8[2] + 1);
  }
  return v7;
}

void sub_1CD274714(void **a1, unint64_t a2)
{
  uint64_t v5 = (char *)a1[1];
  uint64_t v4 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 4) >= a2)
  {
    if (a2)
    {
      uint64_t v11 = &v5[80 * a2];
      do
      {
        *((_OWORD *)v5 + 1) = 0uLL;
        *((_OWORD *)v5 + 2) = 0uLL;
        *((_OWORD *)v5 + 4) = 0uLL;
        *(_OWORD *)uint64_t v5 = 0uLL;
        *((_OWORD *)v5 + 3) = 0uLL;
        *((void *)v5 + 4) = v5 + 48;
        *((_DWORD *)v5 + 11) = 1;
        v5 += 80;
      }
      while (v5 != v11);
      uint64_t v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)*a1) >> 4);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0x333333333333333) {
      abort();
    }
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (unsigned char *)*a1) >> 4);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x199999999999999) {
      unint64_t v9 = 0x333333333333333;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0x333333333333333) {
        sub_1CB833614();
      }
      uint64_t v10 = (char *)operator new(80 * v9);
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v12 = &v10[80 * v6];
    uint64_t v13 = &v12[80 * a2];
    unsigned int v14 = v12;
    do
    {
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_OWORD *)v14 + 2) = 0uLL;
      *((_OWORD *)v14 + 4) = 0uLL;
      *(_OWORD *)unsigned int v14 = 0uLL;
      *((_OWORD *)v14 + 3) = 0uLL;
      *((void *)v14 + 4) = v14 + 48;
      *((_DWORD *)v14 + 11) = 1;
      v14 += 80;
    }
    while (v14 != v13);
    unsigned int v15 = &v10[80 * v9];
    uint64_t v16 = (char *)*a1;
    if (v5 != *a1)
    {
      uint64_t v17 = 0;
      do
      {
        uint64_t v18 = &v12[v17];
        unsigned int v19 = &v5[v17];
        *((_DWORD *)v18 - 20) = *(_DWORD *)&v5[v17 - 80];
        *((void *)v18 - ++*(_DWORD *)(result + 8) = 0;
        *((void *)v18 - 7) = 0;
        *(_OWORD *)(v18 - 72) = *(_OWORD *)&v5[v17 - 72];
        *((void *)v18 - 7) = *(void *)&v5[v17 - 56];
        *((void *)v19 - 9) = 0;
        *((void *)v19 - ++*(_DWORD *)(result + 8) = 0;
        *((void *)v19 - 7) = 0;
        *((void *)v18 - 6) = &v12[v17 - 32];
        *(void *)&v12[v17 - 40] = 0x100000000;
        if (*(_DWORD *)&v5[v17 - 40]) {
          sub_1CBF34284((uint64_t)&v12[v17 - 48], (uint64_t *)v19 - 6);
        }
        v17 -= 80;
      }
      while (&v5[v17] != v16);
      uint64_t v5 = (char *)*a1;
      v12 += v17;
    }
    size_t v20 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = v15;
    if (v20 != v5)
    {
      int v21 = v20 - 32;
      do
      {
        BOOL v22 = (char *)*((void *)v21 - 2);
        if (v21 != v22) {
          free(v22);
        }
        BOOL v23 = (void *)*((void *)v21 - 5);
        if (v23)
        {
          *((void *)v21 - 4) = v23;
          operator delete(v23);
        }
        uint64_t v24 = v21 - 48;
        v21 -= 80;
      }
      while (v24 != v5);
    }
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void sub_1CD274978(void *a1, int *a2, int a3)
{
  unint64_t v6 = (char *)a1[125];
  unint64_t v7 = a1[126];
  if ((unint64_t)v6 >= v7)
  {
    unint64_t v9 = (char *)a1[124];
    uint64_t v10 = (v6 - v9) >> 2;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 62) {
      abort();
    }
    uint64_t v12 = v7 - (void)v9;
    if (v12 >> 1 > v11) {
      unint64_t v11 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 62) {
        sub_1CB833614();
      }
      unsigned int v14 = (char *)operator new(4 * v13);
    }
    else
    {
      unsigned int v14 = 0;
    }
    unsigned int v15 = &v14[4 * v10];
    *(_DWORD *)unsigned int v15 = a3;
    unint64_t v8 = v15 + 4;
    while (v6 != v9)
    {
      int v16 = *((_DWORD *)v6 - 1);
      v6 -= 4;
      *((_DWORD *)v15 - 1) = v16;
      v15 -= 4;
    }
    a1[124] = v15;
    a1[125] = v8;
    a1[126] = &v14[4 * v13];
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v6 = a3;
    unint64_t v8 = v6 + 4;
  }
  a1[125] = v8;
  int v17 = *a2;
  uint64_t v18 = (llvm::MachineFunction *)a1[115];
  uint64_t v19 = *(void *)(a1[116] + 8) + 48 * *a2;
  size_t v20 = (unsigned __int8 *)a1[118];
  *(void *)&long long v101 = v20;
  if (v20) {
    llvm::MetadataTracking::track((uint64_t)&v101, v20, 2);
  }
  MachineInstr = llvm::MachineFunction::CreateMachineInstr(v18, v19, (unsigned __int8 **)&v101, 0);
  if ((void)v101)
  {
    int v93 = *(unsigned __int8 *)v101;
    if ((v93 - 4) > 0x1E)
    {
      if ((v93 - 3) >= 0xFFFFFFFE) {
        uint64_t v96 = v101;
      }
      else {
        uint64_t v96 = 0;
      }
      if ((v93 - 3) < 0xFFFFFFFE)
      {
        if (v93 == 3) {
          *(void *)(v101 + ++*(_DWORD *)(result + 8) = 0;
        }
        goto LABEL_21;
      }
      unint64_t v95 = v96 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v101 + 1) & 0x7F) != 2 && !*(_DWORD *)(v101 + 12)) {
        goto LABEL_21;
      }
      uint64_t v94 = *(void *)(v101 + 16);
      if ((v94 & 4) == 0) {
        goto LABEL_21;
      }
      unint64_t v95 = v94 & 0xFFFFFFFFFFFFFFF8;
      if (!v95) {
        goto LABEL_21;
      }
    }
    *(void *)&long long v104 = &v101;
    sub_1CC5FA668(v95 + 16, &v104);
  }
LABEL_21:
  BOOL v22 = (unint64_t *)a1[120];
  uint64_t v23 = *(void *)(a1[119] + 40);
  *((void *)MachineInstr + 3) = v23;
  uint64_t v24 = *(void *)(v23 + 32);
  uint64_t v25 = *((unsigned int *)MachineInstr + 10);
  if (v25)
  {
    uint64_t v86 = *((void *)MachineInstr + 4);
    uint64_t v87 = *(void *)(v24 + 40);
    uint64_t v88 = 32 * v25;
    do
    {
      if (!*(unsigned char *)v86)
      {
        uint64_t v89 = *(unsigned int *)(v86 + 4);
        if ((int)v89 >= 0) {
          uint64_t v90 = (uint64_t *)(*(void *)(v87 + 272) + 8 * v89);
        }
        else {
          uint64_t v90 = (uint64_t *)(*(void *)(v87 + 24) + 16 * (v89 & 0x7FFFFFFF) + 8);
        }
        uint64_t v91 = *v90;
        if (*v90)
        {
          uint64_t v92 = *(void *)(v91 + 16);
          *(void *)(v91 + 16) = v86;
          *(void *)(v86 + 16) = v92;
          if (*(unsigned char *)(v86 + 3))
          {
            *(void *)(v86 + 24) = v91;
          }
          else
          {
            *(void *)(v86 + 24) = 0;
            uint64_t v90 = (uint64_t *)(v92 + 24);
          }
        }
        else
        {
          *(void *)(v86 + 16) = v86;
          *(void *)(v86 + 24) = 0;
        }
        *uint64_t v90 = v86;
      }
      v86 += 32;
      v88 -= 32;
    }
    while (v88);
  }
  uint64_t v26 = *(void *)(v24 + 728);
  if (v26) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v26 + 24))(v26, MachineInstr);
  }
  unint64_t v27 = *v22 & 0xFFFFFFFFFFFFFFF8;
  *(void *)MachineInstr = v27 | *(void *)MachineInstr & 7;
  *((void *)MachineInstr + 1) = v22;
  *(void *)(v27 + ++*(_DWORD *)(result + 8) = MachineInstr;
  *BOOL v22 = *v22 & 7 | (unint64_t)MachineInstr;
  unsigned int v97 = a1;
  uint64_t v28 = a1[121];
  if (v28) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v28 + 24))(v28, MachineInstr);
  }
  uint64_t v29 = a2[6];
  if (v29)
  {
    int v30 = 0;
    uint64_t v31 = 16 * v29;
    uint64_t v32 = (int *)(*((void *)a2 + 2) + 8);
    while (1)
    {
      int v33 = *((unsigned __int8 *)v32 - 8);
      if (v33 == 2) {
        break;
      }
      if (v33 == 1)
      {
        if (v30) {
          goto LABEL_34;
        }
        uint64_t v34 = sub_1CBE52E8C(v17);
        if ((v34 & 0xFF00000000) == 0) {
          goto LABEL_138;
        }
        if ((v34 - 190) < 4 || (v34 - 105) < 2)
        {
LABEL_34:
          int v35 = *v32;
          *((void *)&v104 + 1) = 0;
          LODWORD(v104) = 0;
          DWORD1(v104) = v35;
          long long v105 = 0uLL;
        }
        else
        {
          int v44 = *v32;
          *((void *)&v104 + 1) = 0;
          long long v105 = 0uLL;
          LODWORD(v104) = 0x1000000;
          DWORD1(v104) = v44;
        }
        goto LABEL_74;
      }
      uint64_t v37 = *(void *)v32;
      if (**(unsigned char **)v32 == 4)
      {
        __int16 v38 = 0;
        unsigned int v39 = *(_DWORD *)(*(void *)(v37 + 24) + 16);
        int v40 = 81;
        int v41 = 0;
        switch(*(_DWORD *)(v37 + 16))
        {
          case 0:
            int v42 = *(_DWORD *)(v37 + 32);
            if (v42 == 4) {
              __int16 v43 = 2;
            }
            else {
              __int16 v43 = 3;
            }
            if (v42 == 2) {
              __int16 v38 = 1;
            }
            else {
              __int16 v38 = v43;
            }
            int v41 = 64;
            goto LABEL_73;
          case 1:
          case 3:
            goto LABEL_73;
          case 2:
            int v41 = 68;
            __int16 v38 = 4;
            goto LABEL_73;
          case 4:
            goto LABEL_52;
          case 5:
            int v40 = 82;
            goto LABEL_52;
          case 6:
            int v40 = 83;
            goto LABEL_52;
          case 7:
            int v40 = 84;
            goto LABEL_52;
          case 8:
            int v40 = 85;
LABEL_52:
            if (v30 == sub_1CBDA6464((unsigned __int16)v17, 3u))
            {
              uint64_t v45 = sub_1CBE52E8C(v17);
              if ((v45 & 0xFF00000000) == 0) {
                goto LABEL_138;
              }
              int v46 = (v45 - 164) >= 4 && (v45 - 78) > 2;
              uint64_t v47 = *(unsigned char **)(v97[113] + 16);
              int v48 = *(_DWORD *)(v37 + 32);
              if (v47[303] || v47[305] || ((v47[362] != 0) & ~v46) != 0)
              {
                __int16 v38 = ((v48 == 2) | (unsigned __int16)(2 * (v39 & 1))) + 129;
                if (v48 == 2)
                {
                  int v52 = -2;
                }
                else
                {
                  __int16 v38 = 129;
                  int v52 = -1;
                }
              }
              else
              {
                BOOL v49 = v48 == 2;
                if (v48 == 2) {
                  int v50 = 1;
                }
                else {
                  int v50 = 15;
                }
                if (v49) {
                  __int16 v51 = 130;
                }
                else {
                  __int16 v51 = 129;
                }
                __int16 v38 = v51 + 2 * (v50 & v39);
                int v52 = ~v50;
              }
              v39 &= v52;
            }
            else
            {
              __int16 v38 = 0;
            }
            v39 >>= 1;
            int v41 = v40;
LABEL_73:
            *((void *)&v104 + 1) = 0;
            LODWORD(v105) = v41;
            DWORD2(v105) = 0;
            LODWORD(v104) = ((v38 & 0xFFF) << 8) | 7;
            DWORD1(v104) = v39;
            break;
          case 9:
            __int16 v38 = 0;
            int v41 = 86;
            goto LABEL_73;
          case 0xA:
            __int16 v38 = 0;
            int v41 = 87;
            goto LABEL_73;
          default:
            int v41 = 0;
            goto LABEL_73;
        }
        goto LABEL_74;
      }
LABEL_75:
      ++v30;
      v32 += 4;
      v31 -= 16;
      if (!v31) {
        goto LABEL_80;
      }
    }
    uint64_t v36 = *(void *)v32;
    LODWORD(v104) = 1;
    *((void *)&v104 + 1) = 0;
    *(void *)&long long v105 = v36;
LABEL_74:
    llvm::MachineInstr::addOperand(MachineInstr, v18, (const llvm::MachineOperand *)&v104);
    goto LABEL_75;
  }
LABEL_80:
  uint64_t v53 = (unsigned __int16 *)*((void *)MachineInstr + 2);
  uint64_t v54 = *((void *)v53 + 2);
  if ((v54 & 0x300) == 0) {
    return;
  }
  uint64_t v55 = *v53;
  uint64_t v56 = sub_1CBE52E8C(*v53);
  if ((v56 & 0xFF00000000) == 0) {
LABEL_138:
  }
    llvm::report_fatal_error((llvm *)"Unknown Opcode", (const llvm::Twine *)1);
  if ((int)v56 > 187)
  {
    if ((v56 - 188) <= 1)
    {
      BOOL v57 = sub_1CBDB2780(v55, 46, 0) == 80;
      uint64_t v58 = 2;
      uint64_t v59 = 4;
      goto LABEL_91;
    }
    goto LABEL_102;
  }
  if (v56 == 19 || v56 == 63)
  {
    BOOL v57 = sub_1CBDB2780(v55, 0, 0) == 15;
    goto LABEL_90;
  }
  if (v56 != 147)
  {
LABEL_102:
    uint64_t v69 = *(void *)(*((void *)MachineInstr + 4) + 32 * sub_1CBDA6464(v55, 0x2Fu) + 16);
    uint8x8_t v70 = (uint8x8_t)vcnt_s8((int8x8_t)(v69 >> 4));
    v70.i16[0] = vaddlv_u8(v70);
    unint64_t v60 = qword_1CFB33698[v69 & 0xF] * v70.u32[0];
    goto LABEL_94;
  }
  BOOL v57 = sub_1CBDB2780(v55, 0, 0) == 65;
LABEL_90:
  uint64_t v58 = 4;
  uint64_t v59 = 2;
LABEL_91:
  if (v57) {
    unint64_t v60 = v59;
  }
  else {
    unint64_t v60 = v58;
  }
LABEL_94:
  unint64_t v61 = v60 | (v60 >> 1) | ((v60 | (v60 >> 1)) >> 2);
  unint64_t v62 = v61 | (v61 >> 4) | ((v61 | (v61 >> 4)) >> 8);
  char v63 = __clz((v62 | (v62 >> 16)) + 1) ^ 0x3F;
  LODWORD(v64) = v54;
  if ((v55 - 4348) <= 5)
  {
    uint64_t v65 = *(void *)(*((void *)MachineInstr + 3) + 32);
    long long v101 = xmmword_1CD91CB40;
    int v102 = 0;
    char v103 = 0;
    long long v104 = 0u;
    long long v105 = 0u;
    MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(v65, (uint64_t)&v101, 2, v60, v63, &v104, 0, 1, 0, 0, 0);
    llvm::MachineInstr::addMemOperand(MachineInstr, v18, MachineMemOperand);
    uint64_t v64 = *(void *)(*((void *)MachineInstr + 2) + 16);
  }
  uint64_t v67 = v64 & 0x1C00;
  int v68 = 3;
  if (v67 != 2048 && (v64 & 0x4000000) == 0)
  {
    switch(v67)
    {
      case 1024:
        int v68 = 1;
        break;
      case 3072:
        int v68 = 0;
        break;
      case 4096:
        int v68 = 5;
        break;
      default:
        int v68 = 4;
        break;
    }
  }
  uint64_t v71 = *(void *)(*((void *)MachineInstr + 3) + 32);
  long long v98 = xmmword_1CD91CB40;
  int v99 = v68;
  char v100 = 0;
  long long v104 = 0u;
  long long v105 = 0u;
  int v72 = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(v71, (uint64_t)&v98, (v54 >> 8) & 3, v60, v63, &v104, 0, 1, BYTE3(v54) & 2, 0, 0);
  llvm::MachineInstr::addMemOperand(MachineInstr, v18, v72);
  uint64_t v74 = (int *)((char *)MachineInstr + 48);
  unint64_t v73 = *((void *)MachineInstr + 6);
  if (v73 >= 8)
  {
    if ((v73 & 7) != 0)
    {
      if ((*((void *)MachineInstr + 6) & 7) != 3) {
        return;
      }
      unint64_t v75 = (int *)(v73 & 0xFFFFFFFFFFFFFFF8);
      if ((v73 & 0xFFFFFFFFFFFFFFF8) == 0) {
        return;
      }
      uint64_t v77 = *v75;
      uint64_t v74 = v75 + 2;
      uint64_t v76 = v77;
      if (!v77) {
        return;
      }
      uint64_t v78 = &v74[2 * v76];
    }
    else
    {
      *((void *)MachineInstr + 6) = v73 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v78 = (int *)((char *)MachineInstr + 56);
    }
    do
    {
      uint64_t v79 = *(void *)v74;
      if ((*(_WORD *)(*(void *)v74 + 32) & 2) != 0 && !*(_DWORD *)(v79 + 16))
      {
        uint64_t v81 = *(void *)(v79 + 24);
        uint64_t v80 = (unint64_t *)(v79 + 24);
        if ((v81 & 0xFFFFFFFFFFFFFFF9) != 0)
        {
          unint64_t v83 = (unint64_t)(sub_1CB8F1DC4(v80) + 7) >> 3;
          if (v82 == 1) {
        }
          }
        else
        {
          unint64_t v83 = -1;
        }
        unint64_t v84 = v83 | (v83 >> 1) | ((v83 | (v83 >> 1)) >> 2);
        unint64_t v85 = v84 | (v84 >> 4) | ((v84 | (v84 >> 4)) >> 8);
        *((_DWORD *)v97 + 246) += (((v85 | (v85 >> 16)) >> 32) | v85 | (v85 >> 16)) + 1;
      }
      v74 += 2;
    }
    while (v74 != v78);
  }
}

llvm::raw_ostream *sub_1CD27524C(uint64_t a1, llvm::raw_ostream *a2)
{
  v171[16] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *(void **)(a1 + 904);
  uint64_t v163 = v2;
  uint64_t v3 = (void *)v2[41];
  uint64_t v160 = v2 + 40;
  if (v3 != v2 + 40)
  {
    uint64_t v4 = (void *)v2[41];
    while (2)
    {
      for (uint64_t i = v4[7]; (void *)i != v4 + 6; uint64_t i = *(void *)(i + 8))
      {
        int v6 = **(unsigned __int16 **)(i + 16);
        int v7 = sub_1CBDA6464(v6, 0x2Eu);
        if (v7 >= 1)
        {
          uint64_t v8 = 0;
          uint64_t v9 = (unsigned __int16)v7;
          unsigned int v10 = (unsigned __int16)v7;
          unint64_t v11 = (_DWORD *)(*(void *)(i + 32) + 16);
          while (1)
          {
            if (*((unsigned char *)v11 - 16) == 7 && *v11 == 64)
            {
              int v12 = sub_1CBDA6464(v6, 0x57u);
              uint64_t v13 = sub_1CBE52E8C(v6);
              if ((v13 & 0xFF00000000) == 0) {
LABEL_269:
              }
                llvm::report_fatal_error((llvm *)"Unknown Opcode", (const llvm::Twine *)1);
              BOOL v14 = (v13 - 190) >= 4 && (v13 - 105) > 1 || v8 != v12;
              if (v10 > v8 && v14) {
                break;
              }
            }
            ++v8;
            v11 += 8;
            if (v9 == v8) {
              goto LABEL_18;
            }
          }
          *(_WORD *)(*v163 + 1++*(_DWORD *)(result + 8) = *(_WORD *)(*v163 + 18) & 0xC00F | 0x640;
          goto LABEL_25;
        }
LABEL_18:
        if ((*(unsigned char *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 8) != 0)
            uint64_t i = *(void *)(i + 8);
        }
      }
      uint64_t v4 = (void *)v4[1];
      if (v4 != v160) {
        continue;
      }
      break;
    }
  }
LABEL_25:
  uint64_t v15 = *(unsigned int *)(a1 + 984);
  if (v15)
  {
    uint64_t v16 = v163[7];
    *(void *)(v16 + 4++*(_DWORD *)(result + 8) = v15;
    *(_DWORD *)(v16 + 72) = v15;
  }
  uint64_t v169 = v171;
  uint64_t v170 = 0x800000000;
  int v17 = v3 + 6;
  uint64_t v18 = v3[7];
  if ((void *)v18 != v3 + 6)
  {
    uint64_t v19 = 0;
    uint64_t v20 = -4;
    do
    {
      int v21 = *(unsigned __int16 **)(v18 + 16);
      uint64_t v22 = *((void *)v21 + 1);
      if ((*(_WORD *)(v18 + 44) & 0xC) != 0 && (*(_WORD *)(v18 + 44) & 4) == 0)
      {
        uint64_t v31 = v18;
        if ((v22 & 0x400) == 0)
        {
          while ((*(_WORD *)(v31 + 44) & 8) != 0)
          {
            uint64_t v31 = *(void *)(v31 + 8);
            if ((*(unsigned char *)(*(void *)(v31 + 16) + 9) & 4) != 0) {
              goto LABEL_34;
            }
          }
          goto LABEL_55;
        }
      }
      else if ((v22 & 0x400) == 0)
      {
        goto LABEL_55;
      }
LABEL_34:
      uint64_t v24 = *v21;
      uint64_t v25 = sub_1CBE52E8C(*v21);
      if ((v25 & 0xFF00000000) == 0) {
        goto LABEL_269;
      }
      BOOL v26 = v25 > 0x10 || ((1 << v25) & 0x10808) == 0;
      if (v26 && v25 != 151)
      {
        sub_1CBDB2780(v24, 3, 0);
        uint64_t v27 = *(void *)(*(void *)(v18 + 32) + 32 * sub_1CBDA6464(v24, 0x24u) + 16);
        if (v27 < 0)
        {
          uint64_t v32 = (unsigned int *)(*(void *)(a1 + 992) + v20);
          uint64_t v29 = (void *)v18;
          do
          {
            unsigned int v33 = *v32--;
            uint64_t v29 = (void *)(*v29 & 0xFFFFFFFFFFFFFFF8);
            v27 += v33;
          }
          while (v27);
        }
        else
        {
          if (!v27)
          {
            uint64_t v165 = (unsigned __int8 **)v18;
            sub_1CCD94EF8((uint64_t)&v169, v18, &v165);
            goto LABEL_55;
          }
          uint64_t v28 = (unsigned int *)(*(void *)(a1 + 992) + v19);
          uint64_t v29 = (void *)v18;
          do
          {
            unsigned int v30 = *v28++;
            uint64_t v29 = (void *)v29[1];
            v27 -= v30;
          }
          while (v27);
        }
        uint64_t v165 = (unsigned __int8 **)v29;
        sub_1CCD94EF8((uint64_t)&v169, v18, &v165);
        if (!v18) {
          goto LABEL_58;
        }
      }
LABEL_55:
      if ((*(unsigned char *)v18 & 4) == 0)
      {
LABEL_58:
        while ((*(_WORD *)(v18 + 44) & 8) != 0)
          uint64_t v18 = *(void *)(v18 + 8);
      }
      uint64_t v18 = *(void *)(v18 + 8);
      v19 += 4;
      v20 += 4;
    }
    while ((void *)v18 != v17);
  }
  unint64_t v34 = *v17 & 0xFFFFFFFFFFFFFFF8;
  if (!v34 || (*(unsigned char *)v34 & 4) == 0)
  {
    while ((*(_WORD *)(v34 + 44) & 4) != 0)
      unint64_t v34 = *(void *)v34 & 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v35 = a1;
  if ((void *)v34 != v17)
  {
    LOBYTE(v36) = 0;
    BOOL v37 = 0;
    while (!v37)
    {
      if ((v36 & 1) == 0)
      {
        uint64_t v43 = *(void *)(v34 + 16);
        uint64_t v44 = *(void *)(v43 + 8);
        if ((*(_WORD *)(v34 + 44) & 0xC) != 0 && (*(_WORD *)(v34 + 44) & 4) == 0)
        {
          unint64_t v49 = v34;
          if ((v44 & 0x400) != 0) {
            break;
          }
          while ((*(_WORD *)(v49 + 44) & 8) != 0)
          {
            unint64_t v49 = *(void *)(v49 + 8);
            if ((*(unsigned char *)(*(void *)(v49 + 16) + 9) & 4) != 0) {
              goto LABEL_68;
            }
          }
          unint64_t v50 = v34;
          if (*(void *)(v43 + 16) & 0x40 | *(void *)(v43 + 8) & 0x20) {
            break;
          }
          while ((*(_WORD *)(v50 + 44) & 8) != 0)
          {
            unint64_t v50 = *(void *)(v50 + 8);
            if ((*(unsigned char *)(*(void *)(v50 + 16) + 8) & 0x20) != 0) {
              goto LABEL_68;
            }
          }
        }
        else if ((v44 & 0x400) != 0 || *(void *)(v43 + 16) & 0x40 | *(void *)(v43 + 8) & 0x20)
        {
          break;
        }
      }
LABEL_70:
      __int16 v38 = *(unsigned __int16 **)(v34 + 16);
      uint64_t v39 = sub_1CBE52E8C(*v38);
      if ((v39 & 0xFF00000000) == 0) {
        goto LABEL_269;
      }
      BOOL v37 = (v39 - 13) < 2;
      if ((v39 - 13) >= 2)
      {
        __int16 v40 = *(_WORD *)(v34 + 44);
        unint64_t v41 = *((void *)v38 + 1);
        if ((v40 & 0xC) == 0 || (v40 & 4) != 0)
        {
          if ((v41 & 0x400) == 0)
          {
            uint64_t v46 = (v41 >> 5) & 1;
            if ((v38[8] & 0x40) != 0) {
              LOBYTE(v36) = 1;
            }
            else {
              LOBYTE(v36) = v46;
            }
            goto LABEL_73;
          }
        }
        else
        {
          unint64_t v42 = v34;
          if ((v41 & 0x400) == 0)
          {
            while ((*(_WORD *)(v42 + 44) & 8) != 0)
            {
              unint64_t v42 = *(void *)(v42 + 8);
              LOBYTE(v36) = 1;
              if ((*(unsigned char *)(*(void *)(v42 + 16) + 9) & 4) != 0) {
                goto LABEL_73;
              }
            }
            unint64_t v47 = v34;
            if (!(*((void *)v38 + 2) & 0x40 | *((void *)v38 + 1) & 0x20))
            {
              do
              {
                unsigned int v48 = *(unsigned __int16 *)(v47 + 44);
                int v36 = (v48 >> 3) & 1;
                if ((v48 & 8) == 0) {
                  break;
                }
                unint64_t v47 = *(void *)(v47 + 8);
              }
              while ((*(unsigned char *)(*(void *)(v47 + 16) + 8) & 0x20) == 0);
              goto LABEL_73;
            }
          }
        }
      }
      LOBYTE(v36) = 1;
LABEL_73:
      unint64_t v34 = *(void *)v34 & 0xFFFFFFFFFFFFFFF8;
      if (!v34 || (*(unsigned char *)v34 & 4) == 0)
      {
        while ((*(_WORD *)(v34 + 44) & 4) != 0)
          unint64_t v34 = *(void *)v34 & 0xFFFFFFFFFFFFFFF8;
      }
      if ((void *)v34 == v17) {
        goto LABEL_109;
      }
    }
LABEL_68:
    llvm::MachineBasicBlock::splitAt((llvm::MachineBasicBlock *)v3, (llvm::MachineInstr *)v34, 0, 0);
    goto LABEL_70;
  }
LABEL_109:
  if (v170)
  {
    __int16 v51 = (llvm::MachineInstr **)v169;
    int v52 = (llvm::MachineInstr **)((char *)v169 + 16 * v170);
    do
    {
      uint64_t v54 = *v51;
      uint64_t v53 = v51[1];
      uint64_t v55 = (llvm::MachineBasicBlock *)*((void *)v53 + 3);
      if (*((llvm::MachineInstr **)v55 + 7) != v53) {
        uint64_t v55 = llvm::MachineBasicBlock::splitAt(v55, (llvm::MachineInstr *)(*(void *)v53 & 0xFFFFFFFFFFFFFFF8), 0, 0);
      }
      uint64_t v56 = (void *)*((void *)v54 + 3);
      BOOL v57 = (llvm::MachineBasicBlock **)v56[11];
      uint64_t v58 = (llvm::MachineBasicBlock **)v56[12];
      if (v57 != v58)
      {
        while (*v57 != v55)
        {
          if (++v57 == v58)
          {
            BOOL v57 = (llvm::MachineBasicBlock **)v56[12];
            break;
          }
        }
      }
      if (v57 == v58) {
        llvm::MachineBasicBlock::addSuccessorWithoutProb(v56, v55);
      }
      uint64_t v59 = (unsigned __int16 *)*((void *)v54 + 2);
      int v60 = *v59;
      int v61 = sub_1CBE1DE3C(*v59, 4);
      unint64_t v62 = sub_1CBE04154(v60);
      if (v63)
      {
        if (v63 >> 62) {
LABEL_267:
        }
          abort();
        uint64_t v64 = v62;
        uint64_t v65 = &v62[4 * v63];
        uint64_t v66 = (char *)operator new(4 * v63);
        memcpy(v66, v64, v65 - v64);
        uint64_t v67 = &v66[v65 - v64];
        uint64_t v35 = a1;
      }
      else
      {
        uint64_t v66 = 0;
        uint64_t v67 = 0;
      }
      *(_DWORD *)&v66[4 * v61] = 6;
      uint64_t v68 = sub_1CBE52E8C(v60);
      if ((v68 & 0xFF00000000) == 0) {
        goto LABEL_269;
      }
      unsigned int v69 = sub_1CBE0418C(v68, (v67 - v66) >> 2, v66);
      *(void *)(v35 + 952) = *((void *)v54 + 3);
      *(void *)(v35 + 960) = v54;
      uint8x8_t v70 = *(llvm::MachineFunction **)(v35 + 920);
      uint64_t v71 = *(void *)(*(void *)(v35 + 928) + 8);
      int v72 = *(unsigned __int8 **)(v35 + 944);
      size_t v168 = v72;
      if (v72) {
        llvm::MetadataTracking::track((uint64_t)&v168, v72, 2);
      }
      unint64_t v73 = llvm::MachineFunction::CreateMachineInstr(v70, v71 + 48 * v69, &v168, 0);
      if (v168)
      {
        int v89 = *v168;
        if ((v89 - 4) > 0x1E)
        {
          if ((v89 - 3) >= 0xFFFFFFFE) {
            uint64_t v92 = v168;
          }
          else {
            uint64_t v92 = 0;
          }
          if ((v89 - 3) < 0xFFFFFFFE)
          {
            uint64_t v35 = a1;
            if (v89 == 3) {
              *((void *)v168 + 1) = 0;
            }
            goto LABEL_127;
          }
          unint64_t v91 = (unint64_t)(v92 + 8);
        }
        else
        {
          uint64_t v35 = a1;
          if ((v168[1] & 0x7F) != 2 && !*((_DWORD *)v168 + 3)) {
            goto LABEL_127;
          }
          uint64_t v90 = *((void *)v168 + 2);
          if ((v90 & 4) == 0) {
            goto LABEL_127;
          }
          unint64_t v91 = v90 & 0xFFFFFFFFFFFFFFF8;
          if (!v91) {
            goto LABEL_127;
          }
        }
        uint64_t v165 = &v168;
        sub_1CC5FA668(v91 + 16, &v165);
        uint64_t v35 = a1;
      }
LABEL_127:
      uint64_t v74 = *(unint64_t **)(v35 + 960);
      uint64_t v75 = *(void *)(*(void *)(v35 + 952) + 40);
      *((void *)v73 + 3) = v75;
      uint64_t v76 = *(void *)(v75 + 32);
      uint64_t v77 = *((unsigned int *)v73 + 10);
      if (v77)
      {
        uint64_t v82 = *((void *)v73 + 4);
        uint64_t v83 = *(void *)(v76 + 40);
        uint64_t v84 = 32 * v77;
        do
        {
          if (!*(unsigned char *)v82)
          {
            uint64_t v85 = *(unsigned int *)(v82 + 4);
            if ((int)v85 >= 0) {
              uint64_t v86 = (uint64_t *)(*(void *)(v83 + 272) + 8 * v85);
            }
            else {
              uint64_t v86 = (uint64_t *)(*(void *)(v83 + 24) + 16 * (v85 & 0x7FFFFFFF) + 8);
            }
            uint64_t v87 = *v86;
            if (*v86)
            {
              uint64_t v88 = *(void *)(v87 + 16);
              *(void *)(v87 + 16) = v82;
              *(void *)(v82 + 16) = v88;
              if (*(unsigned char *)(v82 + 3))
              {
                *(void *)(v82 + 24) = v87;
              }
              else
              {
                *(void *)(v82 + 24) = 0;
                uint64_t v86 = (uint64_t *)(v88 + 24);
              }
            }
            else
            {
              *(void *)(v82 + 16) = v82;
              *(void *)(v82 + 24) = 0;
            }
            *uint64_t v86 = v82;
          }
          v82 += 32;
          v84 -= 32;
        }
        while (v84);
      }
      uint64_t v78 = *(void *)(v76 + 728);
      if (v78) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v78 + 24))(v78, v73);
      }
      unint64_t v79 = *v74 & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v73 = v79 | *(void *)v73 & 7;
      *((void *)v73 + 1) = v74;
      *(void *)(v79 + ++*(_DWORD *)(result + 8) = v73;
      *uint64_t v74 = *v74 & 7 | (unint64_t)v73;
      uint64_t v80 = *(void *)(v35 + 968);
      if (v80) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v80 + 24))(v80, v73);
      }
      uint64_t v81 = *(llvm::MachineBasicBlock **)(*((void *)v54 + 4)
                                        + 32 * sub_1CBDA6464(**((unsigned __int16 **)v54 + 2), 0x2Eu)
                                        + 16);
      LODWORD(v165) = 1;
      uint64_t v166 = 0;
      uint64_t v167 = v81;
      llvm::MachineInstr::addOperand(v73, v70, (const llvm::MachineOperand *)&v165);
      uint64_t v166 = 0;
      uint64_t v167 = v55;
      LODWORD(v165) = 4;
      llvm::MachineInstr::addOperand(v73, v70, (const llvm::MachineOperand *)&v165);
      llvm::MachineInstr::eraseFromParent(v54);
      if (v66) {
        operator delete(v66);
      }
      v51 += 2;
    }
    while (v51 != v52);
  }
  int v93 = *(void **)(v35 + 904);
  uint64_t v94 = (llvm::MachineBasicBlock *)v93[41];
  uint64_t v164 = (llvm::MachineBasicBlock *)(v93 + 40);
  if (v94 == (llvm::MachineBasicBlock *)(v93 + 40))
  {
    uint64_t v96 = 0;
  }
  else
  {
    unint64_t v95 = 0;
    uint64_t v96 = 0;
    unsigned int v97 = 0;
    do
    {
      for (uint64_t j = *((void *)v94 + 7);
            (llvm::MachineBasicBlock *)j != (llvm::MachineBasicBlock *)((char *)v94 + 48);
            uint64_t j = *(void *)(j + 8))
      {
        int v99 = *(unsigned __int16 **)(j + 16);
        if ((v99[8] & 0x40) != 0)
        {
          int v100 = *v99;
          uint64_t v101 = sub_1CBE52E8C(v100);
          if ((v101 & 0xFF00000000) == 0) {
            goto LABEL_269;
          }
          switch((int)v101)
          {
            case 13:
            case 15:
            case 17:
              if (v97 < v95)
              {
                *(void *)unsigned int v97 = j;
                v97 += 8;
                break;
              }
              uint64_t v102 = (v97 - v96) >> 3;
              unint64_t v103 = v102 + 1;
              if ((unint64_t)(v102 + 1) >> 61) {
                goto LABEL_267;
              }
              if ((v95 - v96) >> 2 > v103) {
                unint64_t v103 = (v95 - v96) >> 2;
              }
              if ((unint64_t)(v95 - v96) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v104 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v104 = v103;
              }
              if (v104)
              {
                if (v104 >> 61) {
                  sub_1CB833614();
                }
                long long v105 = (char *)operator new(8 * v104);
              }
              else
              {
                long long v105 = 0;
              }
              int v116 = &v105[8 * v102];
              *(void *)int v116 = j;
              uint64_t v115 = v116 + 8;
              while (v97 != v96)
              {
                uint64_t v117 = *((void *)v97 - 1);
                v97 -= 8;
                *((void *)v116 - 1) = v117;
                v116 -= 8;
              }
              unint64_t v95 = &v105[8 * v104];
              if (v96) {
                operator delete(v96);
              }
LABEL_203:
              uint64_t v96 = v116;
              unsigned int v97 = v115;
              if (j) {
                break;
              }
              goto LABEL_207;
            case 14:
              int v106 = *(_DWORD *)(*(void *)(j + 32) + 32 * sub_1CBDA6464(v100, 0x3Cu) + 16);
              if (v106) {
                BOOL v107 = v96 == v97;
              }
              else {
                BOOL v107 = 1;
              }
              if (v107) {
                break;
              }
              do
              {
                uint64_t v109 = *((void *)v97 - 1);
                v97 -= 8;
                uint64_t v108 = v109;
                uint64_t v110 = *(void **)(v109 + 24);
                unint64_t v111 = (llvm::MachineBasicBlock **)v110[11];
                uint64_t v112 = (llvm::MachineBasicBlock **)v110[12];
                if (v111 != v112)
                {
                  while (*v111 != v94)
                  {
                    if (++v111 == v112)
                    {
                      unint64_t v111 = (llvm::MachineBasicBlock **)v110[12];
                      break;
                    }
                  }
                }
                if (v111 == v112) {
                  llvm::MachineBasicBlock::addSuccessorWithoutProb(v110, v94);
                }
                int v113 = **(unsigned __int16 **)(v108 + 16);
                uint64_t v114 = sub_1CBE52E8C(v113);
                if ((v114 & 0xFF00000000) == 0) {
                  goto LABEL_269;
                }
                if (v114 == 17) {
                  v106 -= *(_DWORD *)(*(void *)(v108 + 32) + 32 * sub_1CBDA6464(v113, 0x3Cu) + 16);
                }
              }
              while (v106 && v96 != v97);
              uint64_t v115 = v97;
              int v116 = v96;
              goto LABEL_203;
            default:
              llvm::MachineInstr::dump((llvm::MachineInstr *)j);
              __break(1u);
              JUMPOUT(0x1CD2760ACLL);
          }
        }
        if ((*(unsigned char *)j & 4) == 0)
        {
LABEL_207:
          while ((*(_WORD *)(j + 44) & 8) != 0)
            uint64_t j = *(void *)(j + 8);
        }
      }
      uint64_t v94 = (llvm::MachineBasicBlock *)*((void *)v94 + 1);
    }
    while (v94 != v164);
    uint64_t v35 = a1;
    int v93 = *(void **)(a1 + 904);
  }
  uint64_t v118 = v93 + 40;
  uint64_t v119 = *(uint64_t **)v93[40];
  if (v119 != v93 + 40)
  {
    do
    {
      unint64_t v120 = (uint64_t *)*v119;
      FallThrough = (void *)llvm::MachineBasicBlock::getFallThrough((llvm::MachineBasicBlock *)v119);
      if (FallThrough)
      {
        if (((v119[12] - v119[11]) & 0x7FFFFFFF8) == 8)
        {
          int v122 = (llvm::MachineBasicBlock *)FallThrough;
          if (((FallThrough[9] - FallThrough[8]) & 0x7FFFFFFF8) == 8)
          {
            uint64_t v123 = FallThrough + 6;
            if (FallThrough + 6 != (void *)(FallThrough[6] & 0xFFFFFFFFFFFFFFF8))
            {
              uint64_t v128 = v119 + 6;
              do
              {
                uint64_t v129 = *((void *)v122 + 7);
                uint64_t v130 = *(void *)(*(void *)(v129 + 24) + 32);
                if (v130)
                {
                  uint64_t v131 = *(void *)(v130 + 728);
                  if (v131) {
                    (*(void (**)(uint64_t, void))(*(void *)v131 + 32))(v131, *((void *)v122 + 7));
                  }
                  uint64_t v132 = *(unsigned int *)(v129 + 40);
                  if (v132)
                  {
                    uint64_t v133 = *(void *)(v129 + 32);
                    uint64_t v134 = *(void *)(v130 + 40);
                    uint64_t v135 = 32 * v132;
                    do
                    {
                      if (!*(unsigned char *)v133)
                      {
                        uint64_t v136 = *(unsigned int *)(v133 + 4);
                        if ((v136 & 0x80000000) != 0) {
                          uint64_t v137 = (uint64_t *)(*(void *)(v134 + 24) + 16 * (v136 & 0x7FFFFFFF) + 8);
                        }
                        else {
                          uint64_t v137 = (uint64_t *)(*(void *)(v134 + 272) + 8 * v136);
                        }
                        uint64_t v138 = *v137;
                        uint64_t v140 = *(void *)(v133 + 16);
                        uint64_t v139 = *(void *)(v133 + 24);
                        if (v133 != *v137) {
                          uint64_t v137 = (uint64_t *)(v140 + 24);
                        }
                        uint64_t *v137 = v139;
                        if (v139) {
                          uint64_t v141 = v139;
                        }
                        else {
                          uint64_t v141 = v138;
                        }
                        *(void *)(v141 + 16) = v140;
                        *(void *)(v133 + 16) = 0;
                        *(void *)(v133 + 24) = 0;
                      }
                      v133 += 32;
                      v135 -= 32;
                    }
                    while (v135);
                  }
                }
                uint64_t v142 = *(unint64_t **)(v129 + 8);
                unint64_t v143 = *(void *)v129 & 0xFFFFFFFFFFFFFFF8;
                unint64_t *v142 = v143 | *v142 & 7;
                *(void *)(v143 + ++*(_DWORD *)(result + 8) = v142;
                *(void *)v129 &= 7uLL;
                *(void *)(v129 + ++*(_DWORD *)(result + 8) = 0;
                uint64_t v144 = v119[5];
                *(void *)(v129 + 24) = v144;
                uint64_t v145 = *(void *)(v144 + 32);
                uint64_t v146 = *(unsigned int *)(v129 + 40);
                if (v146)
                {
                  uint64_t v149 = *(void *)(v129 + 32);
                  uint64_t v150 = *(void *)(v145 + 40);
                  uint64_t v151 = 32 * v146;
                  do
                  {
                    if (!*(unsigned char *)v149)
                    {
                      uint64_t v152 = *(unsigned int *)(v149 + 4);
                      if ((int)v152 >= 0) {
                        uint64_t v153 = (uint64_t *)(*(void *)(v150 + 272) + 8 * v152);
                      }
                      else {
                        uint64_t v153 = (uint64_t *)(*(void *)(v150 + 24) + 16 * (v152 & 0x7FFFFFFF) + 8);
                      }
                      uint64_t v154 = *v153;
                      if (*v153)
                      {
                        uint64_t v155 = *(void *)(v154 + 16);
                        *(void *)(v154 + 16) = v149;
                        *(void *)(v149 + 16) = v155;
                        if (*(unsigned char *)(v149 + 3))
                        {
                          *(void *)(v149 + 24) = v154;
                        }
                        else
                        {
                          *(void *)(v149 + 24) = 0;
                          uint64_t v153 = (uint64_t *)(v155 + 24);
                        }
                      }
                      else
                      {
                        *(void *)(v149 + 16) = v149;
                        *(void *)(v149 + 24) = 0;
                      }
                      uint64_t *v153 = v149;
                    }
                    v149 += 32;
                    v151 -= 32;
                  }
                  while (v151);
                }
                uint64_t v147 = *(void *)(v145 + 728);
                if (v147) {
                  (*(void (**)(uint64_t, uint64_t))(*(void *)v147 + 24))(v147, v129);
                }
                unint64_t v148 = *v128 & 0xFFFFFFFFFFFFFFF8;
                *(void *)uint64_t v129 = v148 | *(void *)v129 & 7;
                *(void *)(v129 + ++*(_DWORD *)(result + 8) = v128;
                *(void *)(v148 + ++*(_DWORD *)(result + 8) = v129;
                *uint64_t v128 = *v128 & 7 | v129;
              }
              while (v123 != (void *)(*v123 & 0xFFFFFFFFFFFFFFF8));
            }
            llvm::MachineBasicBlock::transferSuccessors((char *)v119, v122);
            llvm::MachineBasicBlock::removeSuccessor((llvm::MachineBasicBlock *)v119, v122, 0);
            uint64_t v124 = *((void *)v122 + 4);
            int v125 = v124 + 320;
            *(void *)(*(void *)(v124 + 104) + 8 * *((unsigned int *)v122 + 6)) = 0;
            *((_DWORD *)v122 + 6) = -1;
            uint64_t v126 = *(void *)v122;
            uint64_t v127 = (void *)*((void *)v122 + 1);
            *uint64_t v127 = *(void *)v122;
            *(void *)(v126 + ++*(_DWORD *)(result + 8) = v127;
            *(void *)int v122 = 0;
            *((void *)v122 + 1) = 0;
            llvm::ilist_alloc_traits<llvm::MachineBasicBlock>::deleteNode(v125, v122);
            uint64_t v35 = a1;
          }
        }
      }
      uint64_t v119 = v120;
    }
    while (v120 != v118);
    int v93 = *(void **)(v35 + 904);
  }
  llvm::MachineFunction::RenumberBlocks((llvm::MachineFunction *)v93, 0);
  if (v96) {
    operator delete(v96);
  }
  if (v169 != v171) {
    free(v169);
  }
  llvm::legacy::PassManagerImpl::run(*(llvm::legacy::PassManagerImpl **)(v35 + 24), (llvm::Module *)(v35 + 128));
  uint64_t v156 = *(void *)(v35 + 120);
  uint64_t v157 = *(const void **)v156;
  size_t v158 = *(void *)(v156 + 8);
  uint64_t result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v158 <= *((void *)a2 + 3) - (void)result)
  {
    if (v158)
    {
      uint64_t result = (llvm::raw_ostream *)memcpy(result, v157, v158);
      *((void *)a2 + 4) += v158;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v157, v158);
  }
  return result;
}

void sub_1CD2760C0()
{
}

void LLVMInitializeAGX3MCInstLifter()
{
  qword_1EA61E9C8 = (uint64_t)sub_1CD2760C0;
}

void sub_1CD276AEC(uint64_t a1)
{
  sub_1CD276B24(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD276B24(uint64_t a1)
{
  *(void *)a1 = &unk_1F2649408;
  unint64_t v2 = *(void **)(a1 + 992);
  if (v2)
  {
    *(void *)(a1 + 1000) = v2;
    operator delete(v2);
  }
  *(void *)(a1 + 912) = &unk_1F261CD58;
  uint64_t v3 = *(unsigned __int8 **)(a1 + 944);
  if (v3)
  {
    int v4 = *v3;
    if ((v4 - 4) > 0x1E)
    {
      if ((v4 - 3) >= 0xFFFFFFFE) {
        uint64_t v11 = *(void *)(a1 + 944);
      }
      else {
        uint64_t v11 = 0;
      }
      if ((v4 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v12 = v11 + 8;
LABEL_20:
        uint64_t v15 = a1 + 944;
        sub_1CC5FA668(v12 + 16, &v15);
        goto LABEL_7;
      }
      if (v4 == 3) {
        *((void *)v3 + 1) = 0;
      }
    }
    else if ((v3[1] & 0x7F) == 2 || *((_DWORD *)v3 + 3))
    {
      uint64_t v13 = *((void *)v3 + 2);
      if ((v13 & 4) != 0)
      {
        unint64_t v12 = v13 & 0xFFFFFFFFFFFFFFF8;
        if (v12) {
          goto LABEL_20;
        }
      }
    }
  }
LABEL_7:
  uint64_t v5 = *(void *)(a1 + 896);
  *(void *)(a1 + 896) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  llvm::Module::~Module((llvm::Module *)(a1 + 128));
  int v7 = (void *)(a1 + 56);
  *(void *)(a1 + 56) = &unk_1F2646B98;
  if (*(_DWORD *)(a1 + 112) == 1)
  {
    uint64_t v14 = *(void *)(a1 + 72);
    if (v14)
    {
      MEMORY[0x1D25D9CB0](v14, 0x1000C8077774924);
      int v7 = (void *)(a1 + 56);
    }
  }
  uint64_t v8 = *(void **)(a1 + 32);
  if (v8 != v7) {
    free(v8);
  }
  *(void *)(a1 + 16) = &unk_1F26174C0;
  uint64_t v9 = *(void *)(a1 + 24);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  llvm::LLVMContext::~LLVMContext((llvm::LLVMContextImpl **)(a1 + 8), v6);
  return a1;
}

void sub_1CD276D0C(uint64_t a1, uint64_t a2, void *a3, char *a4)
{
  uint64_t v4 = *(unsigned int *)(a1 + 104);
  if (v4)
  {
    for (uint64_t i = *(uint64_t **)(a1 + 96); !*i || *i == -8; ++i)
      ;
  }
  else
  {
    uint64_t i = *(uint64_t **)(a1 + 96);
  }
  uint64_t v6 = *(void *)(a1 + 96) + 8 * v4;
  if (i != (uint64_t *)v6)
  {
    uint64_t v7 = *i;
    do
    {
      uint64_t v8 = *(uint64_t **)(v7 + 24);
      uint64_t v9 = *(uint64_t **)(v7 + 32);
      if ((char *)v9 - (char *)v8 >= 1025)
      {
        unint64_t v87 = v9 - v8;
        while (1)
        {
          uint64_t v88 = (uint64_t *)operator new(8 * v87, MEMORY[0x1E4FBA2D0]);
          if (v88) {
            break;
          }
          BOOL v95 = v87 > 1;
          v87 >>= 1;
          if (!v95) {
            goto LABEL_6;
          }
        }
        int v89 = v88;
        sub_1CD278360(v8, v9, v9 - v8, v88, v87);
        operator delete(v89);
      }
      else
      {
LABEL_6:
        sub_1CD278360(v8, v9, v9 - v8, 0, 0);
      }
      uint64_t v11 = *(uint64_t **)(v7 + 24);
      unsigned int v10 = *(uint64_t **)(v7 + 32);
      if (v11 == v10)
      {
LABEL_140:
        if (v11 != v10)
        {
          uint64_t v90 = v11 + 2;
          if (v11 + 2 != v10)
          {
            uint64_t v91 = *v11;
            do
            {
              uint64_t v92 = v91;
              uint64_t v91 = *v90;
              if (v92 != *v90)
              {
                v11[1] = v91;
                ++v11;
              }
              ++v90;
            }
            while (v90 != v10);
            unsigned int v10 = *(uint64_t **)(v7 + 32);
          }
          if (v11 + 1 != v10) {
            *(void *)(v7 + 32) = v11 + 1;
          }
        }
      }
      else
      {
        unint64_t v12 = v11 + 1;
        while (v12 != v10)
        {
          uint64_t v13 = *(v12 - 1);
          uint64_t v14 = *v12++;
          if (v13 == v14)
          {
            uint64_t v11 = v12 - 2;
            goto LABEL_140;
          }
        }
      }
      do
      {
        uint64_t v15 = i[1];
        ++i;
        uint64_t v7 = v15;
        if (v15) {
          BOOL v16 = v7 == -8;
        }
        else {
          BOOL v16 = 1;
        }
      }
      while (v16);
    }
    while (i != (uint64_t *)v6);
  }
  __base = 0;
  uint64_t v112 = 0;
  int v113 = 0;
  uint64_t v17 = a1;
  sub_1CC34AE58((uint64_t)&__base, *(unsigned int *)(a1 + 108));
  uint64_t v18 = *(unsigned int *)(a1 + 104);
  if (v18)
  {
    for (uint64_t j = *(uint64_t **)(a1 + 96); !*j || *j == -8; ++j)
      ;
  }
  else
  {
    uint64_t j = *(uint64_t **)(a1 + 96);
  }
  uint64_t v21 = *(void *)(a1 + 96) + 8 * v18;
  uint64_t v22 = v112;
  if (j != (uint64_t *)v21)
  {
    uint64_t v23 = *j;
    do
    {
      if (v22 >= v113)
      {
        uint64_t v24 = (char *)__base;
        uint64_t v25 = (v22 - (unsigned char *)__base) >> 2;
        unint64_t v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 62) {
LABEL_138:
        }
          abort();
        uint64_t v27 = v113 - (unsigned char *)__base;
        if ((v113 - (unsigned char *)__base) >> 1 > v26) {
          unint64_t v26 = v27 >> 1;
        }
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v28)
        {
          if (v28 >> 62) {
            goto LABEL_139;
          }
          uint64_t v29 = (char *)operator new(4 * v28);
        }
        else
        {
          uint64_t v29 = 0;
        }
        unsigned int v30 = &v29[4 * v25];
        *(_DWORD *)unsigned int v30 = *(_DWORD *)(v23 + 16);
        uint64_t v31 = v30 + 4;
        while (v22 != v24)
        {
          int v32 = *((_DWORD *)v22 - 1);
          v22 -= 4;
          *((_DWORD *)v30 - 1) = v32;
          v30 -= 4;
        }
        __base = v30;
        uint64_t v112 = v31;
        int v113 = &v29[4 * v28];
        if (v24) {
          operator delete(v24);
        }
        uint64_t v22 = v31;
      }
      else
      {
        *(_DWORD *)uint64_t v22 = *(_DWORD *)(v23 + 16);
        v22 += 4;
      }
      uint64_t v112 = v22;
      do
      {
        uint64_t v33 = j[1];
        ++j;
        uint64_t v23 = v33;
        if (v33) {
          BOOL v34 = v23 == -8;
        }
        else {
          BOOL v34 = 1;
        }
      }
      while (v34);
    }
    while (j != (uint64_t *)v21);
  }
  uint64_t v35 = (char *)__base;
  if (v22 - (unsigned char *)__base >= 8)
  {
    qsort(__base, (unint64_t)(v22 - (unsigned char *)__base) >> 2, 4uLL, (int (__cdecl *)(const void *, const void *))sub_1CBC0DC50);
    uint64_t v35 = (char *)__base;
    uint64_t v22 = v112;
  }
  if (v35 != v22)
  {
    int v36 = v35 + 4;
    while (v36 != v22)
    {
      int v37 = *((_DWORD *)v36 - 1);
      int v38 = *(_DWORD *)v36;
      v36 += 4;
      if (v37 == v38)
      {
        uint64_t v39 = v36 - 8;
        while (v36 != v22)
        {
          int v40 = v37;
          int v37 = *(_DWORD *)v36;
          if (v40 != *(_DWORD *)v36)
          {
            *((_DWORD *)v39 + 1) = v37;
            v39 += 4;
          }
          v36 += 4;
        }
        uint64_t v22 = v39 + 4;
        break;
      }
    }
  }
  unint64_t v41 = (unint64_t)(v22 - v35) >> 2;
  *(_DWORD *)(a1 + 140) = v41;
  if (v41 <= 1) {
    unsigned int v42 = 1;
  }
  else {
    unsigned int v42 = (unint64_t)(v22 - v35) >> 2;
  }
  if (v41 >= 0x11) {
    unsigned int v42 = v41 >> 1;
  }
  if (v41 <= 0x400) {
    LODWORD(v41) = v42;
  }
  else {
    LODWORD(v41) = v41 >> 2;
  }
  *(_DWORD *)(a1 + 136) = v41;
  if (v35)
  {
    uint64_t v112 = v35;
    operator delete(v35);
    LODWORD(v41) = *(_DWORD *)(a1 + 136);
  }
  unint64_t v41 = v41;
  uint64_t v43 = *(char **)(a1 + 168);
  uint64_t v44 = *(char **)(a1 + 176);
  unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * ((v44 - v43) >> 3);
  unint64_t v46 = v41 - v45;
  if (v41 <= v45)
  {
    if (v41 < v45)
    {
      unsigned int v97 = &v43[24 * v41];
      if (v44 != v97)
      {
        long long v98 = *(char **)(a1 + 176);
        do
        {
          int v100 = (void *)*((void *)v98 - 3);
          v98 -= 24;
          int v99 = v100;
          if (v100)
          {
            *((void *)v44 - 2) = v99;
            operator delete(v99);
          }
          uint64_t v44 = v98;
        }
        while (v98 != v97);
      }
      uint64_t v17 = a1;
      *(void *)(a1 + 176) = v97;
    }
  }
  else
  {
    uint64_t v47 = *(void *)(a1 + 184);
    if (0xAAAAAAAAAAAAAAABLL * ((v47 - (uint64_t)v44) >> 3) >= v46)
    {
      bzero(*(void **)(a1 + 176), 24 * ((24 * v46 - 24) / 0x18) + 24);
      *(void *)(a1 + 176) = &v44[24 * ((24 * v46 - 24) / 0x18) + 24];
    }
    else
    {
      unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * ((v47 - (uint64_t)v43) >> 3);
      unint64_t v49 = 0x5555555555555556 * ((v47 - (uint64_t)v43) >> 3);
      if (v49 > v41) {
        unint64_t v41 = v49;
      }
      if (v48 >= 0x555555555555555) {
        unint64_t v41 = 0xAAAAAAAAAAAAAAALL;
      }
      if (v41 > 0xAAAAAAAAAAAAAAALL) {
LABEL_139:
      }
        sub_1CB833614();
      uint64_t v50 = 3 * v41;
      __int16 v51 = (char *)operator new(24 * v41);
      int v52 = &v51[8 * ((v44 - v43) >> 3)];
      uint64_t v53 = &v51[8 * v50];
      bzero(v52, 24 * ((24 * v46 - 24) / 0x18) + 24);
      unint64_t v54 = (unint64_t)&v51[24 * ((24 * v46 - 24) / 0x18) + 24 + v44 - v43];
      if (v44 == v43)
      {
        *(void *)(a1 + 16++*(_DWORD *)(result + 8) = v52;
        *(void *)(a1 + 176) = v54;
        *(void *)(a1 + 184) = v53;
      }
      else
      {
        do
        {
          long long v101 = *(_OWORD *)(v44 - 24);
          v44 -= 24;
          *(_OWORD *)(v52 - 24) = v101;
          v52 -= 24;
          *((void *)v52 + 2) = *((void *)v44 + 2);
          *(void *)uint64_t v44 = 0;
          *((void *)v44 + 1) = 0;
          *((void *)v44 + 2) = 0;
        }
        while (v44 != v43);
        uint64_t v44 = *(char **)(a1 + 168);
        uint64_t v102 = *(char **)(a1 + 176);
        *(void *)(a1 + 16++*(_DWORD *)(result + 8) = v52;
        *(void *)(a1 + 176) = v54;
        *(void *)(a1 + 184) = v53;
        if (v102 != v44)
        {
          unint64_t v103 = v102;
          do
          {
            long long v105 = (void *)*((void *)v103 - 3);
            v103 -= 24;
            unint64_t v104 = v105;
            if (v105)
            {
              *((void *)v102 - 2) = v104;
              operator delete(v104);
            }
            uint64_t v102 = v103;
          }
          while (v103 != v44);
        }
        uint64_t v17 = a1;
      }
      if (v44) {
        operator delete(v44);
      }
    }
  }
  uint64_t v55 = *(unsigned int *)(v17 + 104);
  if (v55)
  {
    for (k = *(uint64_t **)(v17 + 96); !*k || *k == -8; ++k)
      ;
  }
  else
  {
    k = *(uint64_t **)(v17 + 96);
  }
  uint64_t v106 = *(void *)(v17 + 96) + 8 * v55;
  if (k != (uint64_t *)v106)
  {
    uint64_t v57 = *k;
    do
    {
      uint64_t v58 = v57 + 8;
      unsigned int v59 = *(_DWORD *)(v57 + 16) % *(_DWORD *)(v17 + 136);
      uint64_t v60 = *(void *)(v17 + 168);
      uint64_t v61 = v60 + 24 * v59;
      uint64_t v64 = *(char **)(v61 + 8);
      unint64_t v62 = (void *)(v61 + 8);
      unint64_t v63 = v64;
      unint64_t v65 = v62[1];
      if ((unint64_t)v64 < v65)
      {
        *(void *)unint64_t v63 = v58;
        uint64_t v74 = v63 + 8;
        uint64_t v17 = a1;
      }
      else
      {
        uint64_t v66 = (char **)(v60 + 24 * v59);
        uint64_t v67 = *v66;
        uint64_t v68 = (v63 - *v66) >> 3;
        unint64_t v69 = v68 + 1;
        if ((unint64_t)(v68 + 1) >> 61) {
          goto LABEL_138;
        }
        uint64_t v70 = v65 - (void)v67;
        if (v70 >> 2 > v69) {
          unint64_t v69 = v70 >> 2;
        }
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v71 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v71 = v69;
        }
        if (v71)
        {
          if (v71 >> 61) {
            goto LABEL_139;
          }
          int v72 = (char *)operator new(8 * v71);
        }
        else
        {
          int v72 = 0;
        }
        unint64_t v73 = &v72[8 * v68];
        *(void *)unint64_t v73 = v58;
        uint64_t v74 = v73 + 8;
        if (v63 != v67)
        {
          do
          {
            uint64_t v75 = *((void *)v63 - 1);
            v63 -= 8;
            *((void *)v73 - 1) = v75;
            v73 -= 8;
          }
          while (v63 != v67);
          unint64_t v63 = *v66;
        }
        *uint64_t v66 = v73;
        *unint64_t v62 = v74;
        v62[1] = &v72[8 * v71];
        if (v63) {
          operator delete(v63);
        }
        uint64_t v17 = a1;
      }
      *unint64_t v62 = v74;
      __int16 v114 = 261;
      __base = a3;
      uint64_t v112 = a4;
      *(void *)(v57 + 4++*(_DWORD *)(result + 8) = llvm::MCContext::createTempSymbol(*(llvm::MCContext **)(a2 + 264), (const llvm::Twine *)&__base, 1);
      do
      {
        uint64_t v76 = k[1];
        ++k;
        uint64_t v57 = v76;
        if (v76) {
          BOOL v77 = v57 == -8;
        }
        else {
          BOOL v77 = 1;
        }
      }
      while (v77);
    }
    while (k != (uint64_t *)v106);
  }
  uint64_t v78 = *(char ***)(v17 + 168);
  unint64_t v79 = *(char ***)(v17 + 176);
  if (v78 != v79)
  {
    uint64_t v80 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    do
    {
      uint64_t v81 = *v78;
      uint64_t v82 = v78[1];
      uint64_t v83 = v82 - *v78;
      unint64_t v84 = v83 >> 3;
      if (v83 >= 1025)
      {
        unint64_t v93 = v83 >> 3;
        while (1)
        {
          uint64_t v94 = (uint64_t *)operator new(8 * v93, v80);
          if (v94) {
            break;
          }
          BOOL v95 = v93 > 1;
          v93 >>= 1;
          if (!v95) {
            goto LABEL_117;
          }
        }
        uint64_t v96 = v94;
        sub_1CD2790B0(v81, v82, v84, v94, v93);
        operator delete(v96);
      }
      else
      {
LABEL_117:
        sub_1CD2790B0(v81, v82, v84, 0, 0);
      }
      v78 += 3;
    }
    while (v78 != v79);
  }
}

void sub_1CD277490(uint64_t a1, uint64_t a2, void *a3, char *a4, uint64_t a5, const void *a6, uint64_t a7)
{
  v72[3] = *MEMORY[0x1E4F143B8];
  sub_1CD276D0C(a2, a1, a3, a4);
  int v12 = 0;
  uint64_t v63 = a1;
  uint64_t v64 = a2;
  char v65 = 1;
  uint64_t v66 = 0x148415348;
  uint64_t v67 = *(void *)(a2 + 136);
  int v68 = 4 * a7 + 8;
  int v69 = 0;
  uint64_t v70 = v72;
  uint64_t v71 = 0x400000000;
  if ((unint64_t)(4 * a7) >= 0x11) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a7)
  {
    memcpy(v70, a6, 4 * a7);
    int v12 = v71;
  }
  LODWORD(v71) = v12 + ((unint64_t)(4 * a7) >> 2);
  v72[2] = a5;
  uint64_t v13 = v63;
  uint64_t v14 = *(void *)(v63 + 272);
  *(void *)&long long v60 = "Header Magic";
  __int16 v62 = 259;
  (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)v14 + 112))(v14, &v60, 1);
  (*(void (**)(void))(**(void **)(v13 + 272) + 520))();
  uint64_t v15 = *(void *)(v13 + 272);
  *(void *)&long long v60 = "Header Version";
  __int16 v62 = 259;
  (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)v15 + 112))(v15, &v60, 1);
  (*(void (**)(void))(**(void **)(v13 + 272) + 520))();
  uint64_t v16 = *(void *)(v13 + 272);
  *(void *)&long long v60 = "Header Hash Function";
  __int16 v62 = 259;
  (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)v16 + 112))(v16, &v60, 1);
  (*(void (**)(void))(**(void **)(v13 + 272) + 520))();
  uint64_t v17 = *(void *)(v13 + 272);
  *(void *)&long long v60 = "Header Bucket Count";
  __int16 v62 = 259;
  (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)v17 + 112))(v17, &v60, 1);
  (*(void (**)(void))(**(void **)(v13 + 272) + 520))();
  uint64_t v18 = *(void *)(v13 + 272);
  *(void *)&long long v60 = "Header Hash Count";
  __int16 v62 = 259;
  (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)v18 + 112))(v18, &v60, 1);
  (*(void (**)(void))(**(void **)(v13 + 272) + 520))();
  uint64_t v19 = *(void *)(v13 + 272);
  *(void *)&long long v60 = "Header Data Length";
  __int16 v62 = 259;
  (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)v19 + 112))(v19, &v60, 1);
  (*(void (**)(void))(**(void **)(v13 + 272) + 520))();
  uint64_t v20 = v63;
  uint64_t v21 = *(void *)(v63 + 272);
  *(void *)&long long v60 = "HeaderData Die Offset Base";
  __int16 v62 = 259;
  (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)v21 + 112))(v21, &v60, 1);
  (*(void (**)(void))(**(void **)(v20 + 272) + 520))();
  uint64_t v22 = *(void *)(v20 + 272);
  *(void *)&long long v60 = "HeaderData Atom Count";
  __int16 v62 = 259;
  (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)v22 + 112))(v22, &v60, 1);
  (*(void (**)(void))(**(void **)(v20 + 272) + 520))();
  if (v71)
  {
    uint64_t v23 = (char *)v70;
    uint64_t v24 = (char *)v70 + 4 * v71;
    do
    {
      unint64_t v25 = *(__int16 *)v23;
      if (v25 > 7)
      {
        unint64_t v26 = 0;
        uint64_t v27 = 0;
      }
      else
      {
        unint64_t v26 = off_1E685A6A0[v25];
        uint64_t v27 = qword_1CFB336C8[v25];
      }
      uint64_t v28 = *(void *)(v20 + 272);
      __int16 v62 = 261;
      *(void *)&long long v60 = v26;
      *((void *)&v60 + 1) = v27;
      (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)v28 + 112))(v28, &v60, 1);
      (*(void (**)(void))(**(void **)(v20 + 272) + 520))();
      uint64_t v29 = *(void *)(v20 + 272);
      unsigned int v30 = llvm::dwarf::FormEncodingString((llvm::dwarf *)*((unsigned __int16 *)v23 + 1));
      __int16 v62 = 261;
      *(void *)&long long v60 = v30;
      *((void *)&v60 + 1) = v31;
      (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)v29 + 112))(v29, &v60, 1);
      (*(void (**)(void))(**(void **)(v20 + 272) + 520))();
      v23 += 4;
    }
    while (v23 != v24);
  }
  uint64_t v33 = *(void *)(v64 + 168);
  uint64_t v32 = *(void *)(v64 + 176);
  unint64_t v59 = 0;
  uint64_t v34 = v32 - v33;
  if (v34)
  {
    int v35 = 0;
    unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * (v34 >> 3);
    do
    {
      uint64_t v37 = *(void *)(v63 + 272);
      *(void *)&long long v60 = "Bucket ";
      uint64_t v61 = &v59;
      __int16 v62 = 2563;
      (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)v37 + 112))(v37, &v60, 1);
      (*(void (**)(void))(**(void **)(v63 + 272) + 520))();
      int v38 = (uint64_t **)(v33 + 24 * v59);
      uint64_t v39 = *v38;
      int v40 = v38[1];
      if (v39 != v40)
      {
        uint64_t v41 = -1;
        do
        {
          uint64_t v42 = *v39++;
          uint64_t v43 = *(unsigned int *)(v42 + 8);
          if (v41 != v43) {
            ++v35;
          }
          uint64_t v41 = v43;
        }
        while (v39 != v40);
      }
      ++v59;
    }
    while (v59 < v36);
  }
  sub_1CD27807C((uint64_t)&v63);
  sub_1CD2781DC((uint64_t)&v63);
  uint64_t v44 = *(uint64_t **)(v64 + 168);
  for (uint64_t i = *(uint64_t **)(v64 + 176); v44 != i; v44 += 3)
  {
    uint64_t v46 = *v44;
    uint64_t v47 = v44[1];
    if (*v44 != v47)
    {
      uint64_t v48 = -1;
      do
      {
        unint64_t v49 = *(void **)v46;
        if (v48 != -1 && v48 != *((_DWORD *)v49 + 2))
        {
          (*(void (**)(void, void, uint64_t))(**(void **)(v63 + 272) + 520))(*(void *)(v63 + 272), 0, 4);
          unint64_t v49 = *(void **)v46;
        }
        (*(void (**)(void, void, void))(**(void **)(v63 + 272) + 192))(*(void *)(v63 + 272), v49[5], 0);
        uint64_t v50 = *(void *)(v63 + 272);
        __int16 v51 = (uint64_t *)(**(void **)v46 & 0xFFFFFFFFFFFFFFF8);
        uint64_t v52 = *v51;
        __int16 v62 = 261;
        *(void *)&long long v60 = v51 + 4;
        *((void *)&v60 + 1) = v52;
        (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)v50 + 112))(v50, &v60, 1);
        unint64_t v53 = **(void **)v46 & 0xFFFFFFFFFFFFFFF8;
        long long v60 = *(_OWORD *)(v53 + 8);
        uint64_t v61 = *(unint64_t **)(v53 + 24);
        sub_1CD28B41C(v63, (uint64_t)&v60);
        uint64_t v54 = *(void *)(v63 + 272);
        *(void *)&long long v60 = "Num DIEs";
        __int16 v62 = 259;
        (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)v54 + 112))(v54, &v60, 1);
        (*(void (**)(void))(**(void **)(v63 + 272) + 520))();
        uint64_t v55 = *(void **)v46;
        uint64_t v56 = *(uint64_t **)(*(void *)v46 + 16);
        uint64_t v57 = *(uint64_t **)(*(void *)v46 + 24);
        if (v56 != v57)
        {
          do
          {
            uint64_t v58 = *v56++;
            (*(void (**)(uint64_t, uint64_t))(*(void *)v58 + 24))(v58, v63);
          }
          while (v56 != v57);
          uint64_t v55 = *(void **)v46;
        }
        uint64_t v48 = *((unsigned int *)v55 + 2);
        v46 += 8;
      }
      while (v46 != v47);
      if (*v44 != v44[1]) {
        (*(void (**)(void, void, uint64_t))(**(void **)(v63 + 272) + 520))(*(void *)(v63 + 272), 0, 4);
      }
    }
  }
  if (v70 != v72) {
    free(v70);
  }
}

uint64_t sub_1CD277F00(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int)sub_1CD291374(*(void *)(a1 + 8));
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(**(void **)(a2 + 272) + 520);
  uint64_t v5 = *(void *)(a2 + 272);

  return v4(v5, v3, 4);
}

uint64_t sub_1CD277F70(uint64_t a1, uint64_t a2)
{
  int v3 = sub_1CD291374(*(void *)(a1 + 8));
  (*(void (**)(void, void, uint64_t))(**(void **)(a2 + 272) + 520))(*(void *)(a2 + 272), v3, 4);
  (*(void (**)(void))(**(void **)(a2 + 272) + 520))();
  uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a2 + 272) + 520);

  return v4();
}

uint64_t sub_1CD278070(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 16);
}

uint64_t sub_1CD27807C(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  int v3 = *(uint64_t **)(v2 + 168);
  int v12 = *(uint64_t **)(v2 + 176);
  if (v12 != v3)
  {
    uint64_t v4 = (unsigned char *)result;
    unsigned int v5 = 0;
    uint64_t v6 = -1;
    do
    {
      uint64_t v7 = *v3;
      uint64_t v8 = v3[1];
      if (*v3 == v8)
      {
        uint64_t v9 = v6;
      }
      else
      {
        do
        {
          uint64_t v9 = *(unsigned int *)(*(void *)v7 + 8);
          if (v4[16]) {
            BOOL v10 = v6 == v9;
          }
          else {
            BOOL v10 = 0;
          }
          if (v10)
          {
            uint64_t v9 = v6;
          }
          else
          {
            uint64_t v11 = *(void *)(*(void *)v4 + 272);
            unint64_t v1 = v1 & 0xFFFFFFFF00000000 | v5;
            v13[0] = "Hash in Bucket ";
            v13[2] = v1;
            __int16 v14 = 2051;
            (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v11 + 112))(v11, v13, 1);
            uint64_t result = (*(uint64_t (**)(void))(**(void **)(*(void *)v4 + 272) + 520))();
            uint64_t v6 = v9;
          }
          v7 += 8;
        }
        while (v7 != v8);
      }
      ++v5;
      v3 += 3;
      uint64_t v6 = v9;
    }
    while (v3 != v12);
  }
  return result;
}

uint64_t sub_1CD2781DC(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  uint64_t v3 = *(void *)(v1 + 168);
  uint64_t v2 = *(void *)(v1 + 176);
  unint64_t v18 = 0;
  uint64_t v15 = v3;
  uint64_t v4 = v2 - v3;
  if (v4)
  {
    unsigned int v5 = (unsigned char *)result;
    unint64_t v6 = 0;
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
    uint64_t v7 = -1;
    do
    {
      uint64_t v8 = (uint64_t *)(v15 + 24 * v6);
      uint64_t v10 = *v8;
      uint64_t v9 = v8[1];
      if (*v8 != v9)
      {
        do
        {
          uint64_t v11 = *(unsigned int *)(*(void *)v10 + 8);
          if (v5[16]) {
            BOOL v12 = v7 == v11;
          }
          else {
            BOOL v12 = 0;
          }
          if (!v12)
          {
            uint64_t v13 = *(void *)(*(void *)v5 + 272);
            v16[0] = "Offset in Bucket ";
            v16[2] = &v18;
            __int16 v17 = 2563;
            (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v13 + 112))(v13, v16, 1);
            uint64_t result = (*(uint64_t (**)(void))(**(void **)(*(void *)v5 + 272) + 840))();
            uint64_t v7 = v11;
          }
          v10 += 8;
        }
        while (v10 != v9);
        unint64_t v6 = v18;
      }
      unint64_t v18 = ++v6;
    }
    while (v6 < v14);
  }
  return result;
}

uint64_t *sub_1CD278360(uint64_t *result, uint64_t *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    unint64_t v6 = (char *)result;
    if (a3 == 2)
    {
      uint64_t v7 = *result;
      unint64_t v8 = (*(uint64_t (**)(void))(*(void *)*(a2 - 1) + 16))(*(a2 - 1));
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
      if (v8 < (unint64_t)result)
      {
        uint64_t v9 = *(void *)v6;
        *(void *)unint64_t v6 = *(a2 - 1);
        *(a2 - 1) = v9;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      uint64_t v22 = (char *)a4;
      unint64_t v23 = a3 >> 1;
      uint64_t v24 = &result[a3 >> 1];
      unint64_t v25 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_1CD2786E8(result, v24, v25, a4);
        unint64_t v26 = (uint64_t *)&v22[8 * v23];
        uint64_t result = sub_1CD2786E8((uint64_t *)&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v26);
        uint64_t v27 = &v22[8 * a3];
        uint64_t v28 = v26;
        while (v28 != (uint64_t *)v27)
        {
          uint64_t v29 = v28;
          uint64_t v30 = *(void *)v22;
          unint64_t v31 = (*(uint64_t (**)(void))(*(void *)*v28 + 16))();
          uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v30 + 16))(v30);
          if (v31 < (unint64_t)result) {
            uint64_t v32 = (char *)v29;
          }
          else {
            uint64_t v32 = v22;
          }
          v22 += 8 * (v31 >= (unint64_t)result);
          uint64_t v28 = &v29[v31 < (unint64_t)result];
          *(void *)unint64_t v6 = *(void *)v32;
          v6 += 8;
          if (v22 == (char *)v26)
          {
            if (v28 != (uint64_t *)v27)
            {
              uint64_t v33 = 0;
              if (v31 < (unint64_t)result) {
                char v34 = 1;
              }
              else {
                char v34 = 2;
              }
              int v35 = &v29[v34 & 1];
              do
              {
                *(void *)&v6[v33 * 8] = v35[v33];
                ++v33;
              }
              while (&v35[v33] != (uint64_t *)v27);
            }
            return result;
          }
        }
        if (v22 != (char *)v26)
        {
          uint64_t v36 = 0;
          do
          {
            *(void *)&v6[v36] = *(void *)&v22[v36];
            v36 += 8;
          }
          while (&v22[v36] != (char *)v26);
        }
      }
      else
      {
        sub_1CD278360(result, v24, v25, a4, a5);
        sub_1CD278360(&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v22, a5);
        return (uint64_t *)sub_1CD278A1C(v6, &v6[8 * (a3 >> 1)], (char *)a2, a3 >> 1, a3 - (a3 >> 1), v22, a5);
      }
    }
    else if (result != a2)
    {
      uint64_t v11 = result + 1;
      if (result + 1 != a2)
      {
        uint64_t v12 = 0;
        uint64_t v13 = result;
        do
        {
          uint64_t v14 = *v13;
          uint64_t v13 = v11;
          unint64_t v15 = (*(uint64_t (**)(void))(*(void *)*v11 + 16))();
          uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14);
          if (v15 < (unint64_t)result)
          {
            uint64_t v16 = *v13;
            uint64_t v17 = v12;
            while (1)
            {
              *(void *)&v6[v17 + 8] = *(void *)&v6[v17];
              if (!v17) {
                break;
              }
              uint64_t v18 = *(void *)&v6[v17 - 8];
              unint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 16))(v16);
              uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
              v17 -= 8;
              if (v19 >= (unint64_t)result)
              {
                uint64_t v20 = &v6[v17 + 8];
                goto LABEL_15;
              }
            }
            uint64_t v20 = v6;
LABEL_15:
            *(void *)uint64_t v20 = v16;
          }
          uint64_t v11 = v13 + 1;
          v12 += 8;
        }
        while (v13 + 1 != a2);
      }
    }
  }
  return result;
}

uint64_t *sub_1CD2786E8(uint64_t *result, uint64_t *a2, unint64_t a3, uint64_t *a4)
{
  if (a3)
  {
    uint64_t v4 = a4;
    unint64_t v6 = result;
    if (a3 == 1)
    {
LABEL_9:
      *uint64_t v4 = *v6;
      return result;
    }
    if (a3 == 2)
    {
      unint64_t v8 = a2 - 1;
      uint64_t v9 = *result;
      unint64_t v10 = (*(uint64_t (**)(void))(*(void *)*(a2 - 1) + 16))(*(a2 - 1));
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
      if (v10 >= (unint64_t)result) {
        uint64_t v11 = v6;
      }
      else {
        uint64_t v11 = v8;
      }
      *v4++ = *v11;
      if (v10 >= (unint64_t)result) {
        unint64_t v6 = v8;
      }
      goto LABEL_9;
    }
    if ((uint64_t)a3 > 8)
    {
      unint64_t v23 = &result[a3 >> 1];
      sub_1CD278360(result, v23, a3 >> 1, a4, a3 >> 1);
      uint64_t result = (uint64_t *)sub_1CD278360(&v6[a3 >> 1], a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      uint64_t v24 = &v6[a3 >> 1];
      while (v24 != a2)
      {
        unint64_t v25 = v24;
        uint64_t v26 = *v6;
        unint64_t v27 = (*(uint64_t (**)(void))(*(void *)*v24 + 16))();
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v26 + 16))(v26);
        if (v27 >= (unint64_t)result) {
          uint64_t v28 = v6;
        }
        else {
          uint64_t v28 = v25;
        }
        uint64_t v24 = &v25[v27 < (unint64_t)result];
        v6 += v27 >= (unint64_t)result;
        *v4++ = *v28;
        if (v6 == v23)
        {
          if (v24 != a2)
          {
            uint64_t v29 = 0;
            uint64_t v30 = &v25[v27 < (unint64_t)result];
            do
            {
              v4[v29] = v30[v29];
              ++v29;
            }
            while (&v30[v29] != a2);
          }
          return result;
        }
      }
      if (v6 != v23)
      {
        uint64_t v31 = 0;
        do
        {
          v4[v31] = v6[v31];
          ++v31;
        }
        while (&v6[v31] != v23);
      }
    }
    else if (result != a2)
    {
      uint64_t v12 = result + 1;
      *a4 = *result;
      if (result + 1 != a2)
      {
        uint64_t v13 = 0;
        uint64_t v14 = a4;
        do
        {
          unint64_t v15 = v14;
          uint64_t v16 = *v14++;
          unint64_t v17 = (*(uint64_t (**)(void))(*(void *)*v12 + 16))();
          uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v16 + 16))(v16);
          uint64_t v18 = v14;
          if (v17 < (unint64_t)result)
          {
            v15[1] = *v15;
            uint64_t v18 = v4;
            if (v15 != v4)
            {
              uint64_t v19 = v13;
              while (1)
              {
                uint64_t v18 = (uint64_t *)((char *)v4 + v19);
                uint64_t v20 = *(uint64_t *)((char *)v4 + v19 - 8);
                unint64_t v21 = (*(uint64_t (**)(void))(*(void *)*v12 + 16))();
                uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 16))(v20);
                if (v21 >= (unint64_t)result) {
                  break;
                }
                *uint64_t v18 = *(v18 - 1);
                v19 -= 8;
                if (!v19)
                {
                  uint64_t v18 = v4;
                  break;
                }
              }
            }
          }
          uint64_t v22 = *v12++;
          *uint64_t v18 = v22;
          v13 += 8;
        }
        while (v12 != a2);
      }
    }
  }
  return result;
}

char *sub_1CD278A1C(char *result, char *a2, char *a3, int64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v9 = a5;
    uint64_t v13 = result;
    while (a4 > a7 && v9 > a7)
    {
      if (!a4) {
        return result;
      }
      uint64_t v14 = 0;
      uint64_t v15 = -a4;
      while (1)
      {
        uint64_t v16 = *(void *)&v13[v14];
        unint64_t v17 = (*(uint64_t (**)(void))(**(void **)a2 + 16))();
        uint64_t result = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v16 + 16))(v16);
        if (v17 < (unint64_t)result) {
          break;
        }
        v14 += 8;
        if (__CFADD__(v15++, 1)) {
          return result;
        }
      }
      uint64_t v19 = -v15;
      uint64_t v77 = a7;
      uint64_t v78 = a3;
      uint64_t v79 = v9;
      __src = a2;
      uint64_t v76 = &v13[v14];
      if (-v15 >= v9)
      {
        if (v15 == -1)
        {
          uint64_t v72 = *(void *)&v13[v14];
          *(void *)&v13[v14] = *(void *)a2;
          *(void *)a2 = v72;
          return result;
        }
        if (v15 > 0) {
          uint64_t v19 = 1 - v15;
        }
        unint64_t v23 = v19 >> 1;
        uint64_t v28 = a2;
        a2 = &v13[8 * (v19 >> 1) + v14];
        BOOL v37 = a3 == v28;
        uint64_t v22 = a3;
        unint64_t v21 = (a3 - v28) >> 3;
        if (!v37)
        {
          uint64_t v75 = a6;
          uint64_t v22 = v28;
          do
          {
            uint64_t v29 = &v22[8 * (v21 >> 1)];
            uint64_t v31 = *(void *)v29;
            uint64_t v30 = v29 + 8;
            uint64_t v32 = *(void *)a2;
            unint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 16))(v31);
            unint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 16))(v32);
            if (v33 >= v34) {
              v21 >>= 1;
            }
            else {
              v21 += ~(v21 >> 1);
            }
            if (v33 < v34) {
              uint64_t v22 = v30;
            }
          }
          while (v21);
          unint64_t v21 = (v22 - __src) >> 3;
          a6 = v75;
        }
      }
      else
      {
        if (v9 >= 0) {
          uint64_t v20 = v9;
        }
        else {
          uint64_t v20 = v9 + 1;
        }
        unint64_t v21 = v20 >> 1;
        uint64_t v22 = &a2[8 * (v20 >> 1)];
        unint64_t v23 = (a2 - v13 - v14) >> 3;
        if (&v13[v14] != a2)
        {
          uint64_t v74 = a6;
          a2 = &v13[v14];
          do
          {
            uint64_t v24 = &a2[8 * (v23 >> 1)];
            uint64_t v26 = *(void *)v24;
            unint64_t v25 = v24 + 8;
            unint64_t v27 = (*(uint64_t (**)(void))(**(void **)v22 + 16))();
            if (v27 < (*(uint64_t (**)(uint64_t))(*(void *)v26 + 16))(v26))
            {
              v23 >>= 1;
            }
            else
            {
              a2 = v25;
              v23 += ~(v23 >> 1);
            }
          }
          while (v23);
          a6 = v74;
          unint64_t v23 = (a2 - v13 - v14) >> 3;
        }
      }
      int v35 = v22;
      if (a2 != __src)
      {
        int v35 = a2;
        if (__src != v22)
        {
          if (a2 + 8 == __src)
          {
            int v38 = v13;
            uint64_t v39 = *(void *)a2;
            memmove(a2, __src, v22 - __src);
            int v35 = &a2[v22 - __src];
            *(void *)int v35 = v39;
            uint64_t v13 = v38;
          }
          else if (__src + 8 == v22)
          {
            uint64_t v40 = *((void *)v22 - 1);
            int v35 = a2 + 8;
            if (v22 - 8 != a2)
            {
              memmove(a2 + 8, a2, v22 - 8 - a2);
              int v35 = a2 + 8;
            }
            *(void *)a2 = v40;
          }
          else
          {
            uint64_t v36 = (__src - a2) >> 3;
            if (v36 == (v22 - __src) >> 3)
            {
              BOOL v37 = __src == v22 || a2 == __src;
              if (v37)
              {
                int v35 = __src;
              }
              else
              {
                uint64_t v54 = a2 + 8;
                uint64_t v55 = __src + 8;
                do
                {
                  uint64_t v56 = *((void *)v54 - 1);
                  *((void *)v54 - 1) = *((void *)v55 - 1);
                  *((void *)v55 - 1) = v56;
                  if (v54 == __src) {
                    break;
                  }
                  v54 += 8;
                  BOOL v37 = v55 == v22;
                  v55 += 8;
                }
                while (!v37);
                int v35 = __src;
              }
            }
            else
            {
              uint64_t v41 = (v22 - __src) >> 3;
              uint64_t v42 = (__src - a2) >> 3;
              do
              {
                uint64_t v43 = v42;
                uint64_t v42 = v41;
                uint64_t v41 = v43 % v41;
              }
              while (v41);
              if (v42)
              {
                uint64_t v44 = &a2[8 * v42];
                do
                {
                  uint64_t v46 = *((void *)v44 - 1);
                  v44 -= 8;
                  uint64_t v45 = v46;
                  uint64_t v47 = &v44[8 * v36];
                  uint64_t v48 = v44;
                  do
                  {
                    unint64_t v49 = v47;
                    *(void *)uint64_t v48 = *(void *)v47;
                    uint64_t v50 = &v47[8 * v36];
                    BOOL v51 = __OFSUB__(v36, (v22 - v47) >> 3);
                    uint64_t v53 = v36 - ((v22 - v47) >> 3);
                    char v52 = (v53 < 0) ^ v51;
                    uint64_t v47 = &a2[8 * v53];
                    if (v52) {
                      uint64_t v47 = v50;
                    }
                    uint64_t v48 = v49;
                  }
                  while (v47 != v44);
                  *(void *)unint64_t v49 = v45;
                }
                while (v44 != a2);
              }
              int v35 = &a2[8 * ((v22 - __src) >> 3)];
            }
          }
        }
      }
      a4 = -(uint64_t)(v23 + v15);
      unint64_t v57 = v79 - v21;
      if ((uint64_t)(v23 + v21) >= (uint64_t)(v79 - (v23 + v21) - v15))
      {
        long long v60 = v35;
        uint64_t result = (char *)sub_1CD278A1C(v35, v22, v78, -(uint64_t)(v23 + v15), v79 - v21, a6, v77);
        uint64_t v22 = a2;
        unint64_t v57 = v21;
        a4 = v23;
        a7 = v77;
        a3 = v60;
        uint64_t v13 = v76;
      }
      else
      {
        uint64_t v58 = &v13[v14];
        unint64_t v59 = v23;
        a7 = v77;
        uint64_t v13 = v35;
        uint64_t result = (char *)sub_1CD278A1C(v58, a2, v35, v59, v21, a6, v77);
        a3 = v78;
      }
      a2 = v22;
      uint64_t v9 = v57;
      if (!v57) {
        return result;
      }
    }
    if (a4 <= v9)
    {
      if (v13 != a2)
      {
        unint64_t v67 = 0;
        do
        {
          *(void *)&a6[v67] = *(void *)&v13[v67];
          v67 += 8;
        }
        while (&v13[v67] != a2);
        if (v67)
        {
          int v68 = a6;
          while (a2 != a3)
          {
            uint64_t v69 = *(void *)v68;
            unint64_t v70 = (*(uint64_t (**)(void))(**(void **)a2 + 16))();
            uint64_t result = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v69 + 16))(v69);
            if (v70 >= (unint64_t)result) {
              uint64_t v71 = v68;
            }
            else {
              uint64_t v71 = a2;
            }
            a2 += 8 * (v70 < (unint64_t)result);
            v68 += 8 * (v70 >= (unint64_t)result);
            *(void *)uint64_t v13 = *(void *)v71;
            v13 += 8;
            if (&a6[v67] == v68) {
              return result;
            }
          }
          return (char *)memmove(v13, v68, a6 - v68 + v67);
        }
      }
    }
    else if (a2 != a3)
    {
      uint64_t v61 = 0;
      do
      {
        *(void *)&a6[v61] = *(void *)&a2[v61];
        v61 += 8;
      }
      while (&a2[v61] != a3);
      if (v61)
      {
        __int16 v62 = &a6[v61];
        uint64_t v63 = a3 - 8;
        while (a2 != v13)
        {
          uint64_t v64 = *((void *)a2 - 1);
          unint64_t v65 = (*(uint64_t (**)(void))(**((void **)v62 - 1) + 16))(*((void *)v62 - 1));
          uint64_t result = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v64 + 16))(v64);
          if (v65 >= (unint64_t)result) {
            uint64_t v66 = v62;
          }
          else {
            uint64_t v66 = a2;
          }
          if (v65 >= (unint64_t)result) {
            v62 -= 8;
          }
          else {
            a2 -= 8;
          }
          *(void *)uint64_t v63 = *((void *)v66 - 1);
          v63 -= 8;
          if (v62 == a6) {
            return result;
          }
        }
        if (v62 != a6)
        {
          uint64_t v73 = 0;
          do
          {
            *(void *)&v63[v73] = *(void *)&v62[v73 - 8];
            v73 -= 8;
          }
          while (&v62[v73] != a6);
        }
      }
    }
  }
  return result;
}

char *sub_1CD2790B0(char *result, char *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    unint64_t v6 = result;
    if (a3 == 2)
    {
      uint64_t v7 = *((void *)a2 - 1);
      uint64_t v8 = *(void *)result;
      if (*(_DWORD *)(v7 + 8) < *(_DWORD *)(*(void *)result + 8))
      {
        *(void *)uint64_t result = v7;
        *((void *)a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      uint64_t v19 = (char *)a4;
      unint64_t v20 = a3 >> 1;
      unint64_t v21 = &result[8 * (a3 >> 1)];
      unint64_t v22 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_1CD2792FC((uint64_t)result, v21, v22, a4);
        unint64_t v23 = (uint64_t *)&v19[8 * v20];
        uint64_t result = (char *)sub_1CD2792FC((uint64_t)&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v23);
        uint64_t v24 = &v19[8 * a3];
        unint64_t v25 = v23;
        while (v25 != (uint64_t *)v24)
        {
          uint64_t v26 = v25;
          uint64_t v27 = *v25;
          uint64_t v28 = *(void *)v19;
          unsigned int v29 = *(_DWORD *)(v27 + 8);
          unsigned int v30 = *(_DWORD *)(*(void *)v19 + 8);
          if (v29 < v30) {
            uint64_t v28 = v27;
          }
          v19 += 8 * (v29 >= v30);
          unint64_t v25 = &v26[v29 < v30];
          *(void *)unint64_t v6 = v28;
          v6 += 8;
          if (v19 == (char *)v23)
          {
            if (v25 != (uint64_t *)v24)
            {
              uint64_t v31 = 0;
              if (v29 < v30) {
                char v32 = 1;
              }
              else {
                char v32 = 2;
              }
              unint64_t v33 = &v26[v32 & 1];
              do
              {
                *(void *)&v6[v31 * 8] = v33[v31];
                ++v31;
              }
              while (&v33[v31] != (uint64_t *)v24);
            }
            return result;
          }
        }
        if (v19 != (char *)v23)
        {
          uint64_t v34 = 0;
          do
          {
            *(void *)&v6[v34] = *(void *)&v19[v34];
            v34 += 8;
          }
          while (&v19[v34] != (char *)v23);
        }
      }
      else
      {
        sub_1CD2790B0(result, v21, v22, a4, a5);
        sub_1CD2790B0(&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v19, a5);
        return sub_1CD2794FC(v6, &v6[8 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), v19, a5);
      }
    }
    else if (result != a2)
    {
      unint64_t v10 = result + 8;
      if (result + 8 != a2)
      {
        uint64_t v11 = 0;
        uint64_t v12 = result;
        do
        {
          uint64_t v13 = *(void *)v12;
          uint64_t v12 = v10;
          uint64_t v14 = *(void *)v10;
          unsigned int v15 = *(_DWORD *)(v14 + 8);
          if (v15 < *(_DWORD *)(v13 + 8))
          {
            uint64_t v16 = v11;
            while (1)
            {
              *(void *)&result[v16 + 8] = v13;
              if (!v16) {
                break;
              }
              uint64_t v13 = *(void *)&result[v16 - 8];
              v16 -= 8;
              if (v15 >= *(_DWORD *)(v13 + 8))
              {
                unint64_t v17 = &result[v16 + 8];
                goto LABEL_15;
              }
            }
            unint64_t v17 = result;
LABEL_15:
            *(void *)unint64_t v17 = v14;
          }
          unint64_t v10 = v12 + 8;
          v11 += 8;
        }
        while (v12 + 8 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1CD2792FC(uint64_t result, void *a2, unint64_t a3, uint64_t *a4)
{
  if (a3)
  {
    uint64_t v4 = a4;
    uint64_t v6 = result;
    if (a3 == 1)
    {
LABEL_8:
      *uint64_t v4 = *(void *)v6;
      return result;
    }
    if (a3 == 2)
    {
      uint64_t v8 = *(a2 - 1);
      unsigned int v9 = *(_DWORD *)(v8 + 8);
      unsigned int v10 = *(_DWORD *)(*(void *)result + 8);
      if (v9 >= v10) {
        uint64_t v8 = *(void *)result;
      }
      *a4 = v8;
      uint64_t v4 = a4 + 1;
      if (v9 >= v10) {
        uint64_t v6 = (uint64_t)(a2 - 1);
      }
      goto LABEL_8;
    }
    if ((uint64_t)a3 > 8)
    {
      unint64_t v20 = result + 8 * (a3 >> 1);
      sub_1CD2790B0(result, v20, a3 >> 1, a4, a3 >> 1);
      uint64_t result = sub_1CD2790B0(v6 + 8 * (a3 >> 1), a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      unint64_t v21 = (void *)(v6 + 8 * (a3 >> 1));
      while (v21 != a2)
      {
        unint64_t v22 = v21;
        uint64_t v23 = *v21;
        uint64_t v24 = *(void *)v6;
        unsigned int v25 = *(_DWORD *)(v23 + 8);
        unsigned int v26 = *(_DWORD *)(*(void *)v6 + 8);
        if (v25 < v26) {
          uint64_t v24 = v23;
        }
        unint64_t v21 = &v22[v25 < v26];
        v6 += 8 * (v25 >= v26);
        *v4++ = v24;
        if (v6 == v20)
        {
          if (v21 != a2)
          {
            uint64_t v27 = 0;
            uint64_t v28 = &v22[v25 < v26];
            do
            {
              v4[v27] = v28[v27];
              ++v27;
            }
            while (&v28[v27] != a2);
          }
          return result;
        }
      }
      if (v6 != v20)
      {
        uint64_t v29 = 0;
        do
        {
          v4[v29] = *(void *)(v6 + v29 * 8);
          ++v29;
        }
        while (v6 + v29 * 8 != v20);
      }
    }
    else if ((void *)result != a2)
    {
      uint64_t v11 = result + 8;
      *a4 = *(void *)result;
      if ((void *)(result + 8) != a2)
      {
        uint64_t v12 = 0;
        uint64_t v13 = a4;
        uint64_t v14 = a4;
        do
        {
          uint64_t v16 = *v14++;
          uint64_t v15 = v16;
          if (*(_DWORD *)(*(void *)v11 + 8) >= *(_DWORD *)(v16 + 8))
          {
            *uint64_t v14 = *(void *)v11;
          }
          else
          {
            v13[1] = v15;
            unint64_t v17 = a4;
            if (v13 != a4)
            {
              uint64_t v18 = v12;
              while (1)
              {
                unint64_t v17 = (uint64_t *)((char *)a4 + v18);
                uint64_t v19 = *(uint64_t *)((char *)a4 + v18 - 8);
                if (*(_DWORD *)(*(void *)v11 + 8) >= *(_DWORD *)(v19 + 8)) {
                  break;
                }
                *unint64_t v17 = v19;
                v18 -= 8;
                if (!v18)
                {
                  unint64_t v17 = a4;
                  break;
                }
              }
            }
            *unint64_t v17 = *(void *)v11;
          }
          v11 += 8;
          v12 += 8;
          uint64_t v13 = v14;
        }
        while ((void *)v11 != a2);
      }
    }
  }
  return result;
}

char *sub_1CD2794FC(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v7 = a5;
    unsigned int v10 = result;
    while (a4 > a7 && v7 > a7)
    {
      if (!a4) {
        return result;
      }
      uint64_t v11 = 0;
      uint64_t v12 = -a4;
      while (1)
      {
        uint64_t v13 = *(void *)&v10[v11];
        if (*(_DWORD *)(*(void *)a2 + 8) < *(_DWORD *)(v13 + 8)) {
          break;
        }
        v11 += 8;
        if (__CFADD__(v12++, 1)) {
          return result;
        }
      }
      uint64_t v15 = &v10[v11];
      if (-v12 >= v7)
      {
        if (v12 == -1)
        {
          *(void *)&v10[v11] = *(void *)a2;
          *(void *)a2 = v13;
          return result;
        }
        if (v12 <= 0) {
          uint64_t v25 = -v12;
        }
        else {
          uint64_t v25 = 1 - v12;
        }
        uint64_t v26 = v25 >> 1;
        unint64_t v20 = &v10[8 * (v25 >> 1) + v11];
        uint64_t v18 = a3;
        if (a3 != a2)
        {
          unint64_t v27 = (a3 - a2) >> 3;
          uint64_t v18 = a2;
          do
          {
            unint64_t v28 = v27 >> 1;
            uint64_t v29 = &v18[8 * (v27 >> 1)];
            uint64_t v31 = *(void *)v29;
            unsigned int v30 = v29 + 8;
            v27 += ~(v27 >> 1);
            if (*(_DWORD *)(v31 + 8) < *(_DWORD *)(*(void *)v20 + 8)) {
              uint64_t v18 = v30;
            }
            else {
              unint64_t v27 = v28;
            }
          }
          while (v27);
        }
        uint64_t v17 = (v18 - a2) >> 3;
      }
      else
      {
        if (v7 >= 0) {
          uint64_t v16 = v7;
        }
        else {
          uint64_t v16 = v7 + 1;
        }
        uint64_t v17 = v16 >> 1;
        uint64_t v18 = &a2[8 * (v16 >> 1)];
        if (v15 == a2)
        {
          unint64_t v20 = a2;
        }
        else
        {
          unint64_t v19 = (a2 - v10 - v11) >> 3;
          unint64_t v20 = &v10[v11];
          do
          {
            unint64_t v21 = v19 >> 1;
            unint64_t v22 = &v20[8 * (v19 >> 1)];
            uint64_t v24 = *(void *)v22;
            uint64_t v23 = v22 + 8;
            v19 += ~(v19 >> 1);
            if (*(_DWORD *)(*(void *)v18 + 8) < *(_DWORD *)(v24 + 8)) {
              unint64_t v19 = v21;
            }
            else {
              unint64_t v20 = v23;
            }
          }
          while (v19);
        }
        uint64_t v26 = (v20 - v10 - v11) >> 3;
      }
      char v32 = v18;
      if (v20 != a2)
      {
        char v32 = v20;
        if (a2 != v18)
        {
          if (v20 + 8 == a2)
          {
            uint64_t v79 = *(void *)v20;
            uint64_t v81 = v17;
            int64_t v38 = v18 - a2;
            uint64_t v83 = a6;
            uint64_t v85 = a7;
            uint64_t v39 = a3;
            uint64_t v40 = v26;
            memmove(v20, a2, v18 - a2);
            uint64_t v26 = v40;
            uint64_t v17 = v81;
            a6 = v83;
            uint64_t v15 = &v10[v11];
            a7 = v85;
            a3 = v39;
            char v32 = &v20[v38];
            *(void *)char v32 = v79;
          }
          else if (a2 + 8 == v18)
          {
            uint64_t v41 = *((void *)v18 - 1);
            char v32 = v20 + 8;
            if (v18 - 8 != v20)
            {
              unint64_t v84 = a6;
              uint64_t v86 = a7;
              uint64_t v42 = a3;
              uint64_t v80 = *((void *)v18 - 1);
              uint64_t v82 = v17;
              uint64_t v43 = v26;
              memmove(v20 + 8, v20, v18 - 8 - v20);
              uint64_t v41 = v80;
              uint64_t v17 = v82;
              uint64_t v26 = v43;
              uint64_t v15 = &v10[v11];
              a6 = v84;
              a7 = v86;
              a3 = v42;
            }
            *(void *)unint64_t v20 = v41;
          }
          else
          {
            uint64_t v33 = (a2 - v20) >> 3;
            if (v33 == (v18 - a2) >> 3)
            {
              BOOL v34 = a2 == v18 || v20 == a2;
              if (!v34)
              {
                int v35 = v20 + 8;
                uint64_t v36 = a2 + 8;
                do
                {
                  uint64_t v37 = *((void *)v35 - 1);
                  *((void *)v35 - 1) = *((void *)v36 - 1);
                  *((void *)v36 - 1) = v37;
                  if (v35 == a2) {
                    break;
                  }
                  v35 += 8;
                  BOOL v34 = v36 == v18;
                  v36 += 8;
                }
                while (!v34);
              }
              char v32 = a2;
            }
            else
            {
              uint64_t v44 = (v18 - a2) >> 3;
              uint64_t v45 = (a2 - v20) >> 3;
              do
              {
                uint64_t v46 = v45;
                uint64_t v45 = v44;
                uint64_t v44 = v46 % v44;
              }
              while (v44);
              if (v45)
              {
                uint64_t v47 = &v20[8 * v45];
                do
                {
                  uint64_t v49 = *((void *)v47 - 1);
                  v47 -= 8;
                  uint64_t v48 = v49;
                  uint64_t v50 = &v47[8 * v33];
                  BOOL v51 = v47;
                  do
                  {
                    char v52 = v50;
                    *(void *)BOOL v51 = *(void *)v50;
                    uint64_t v53 = &v50[8 * v33];
                    BOOL v54 = __OFSUB__(v33, (v18 - v50) >> 3);
                    uint64_t v56 = v33 - ((v18 - v50) >> 3);
                    char v55 = (v56 < 0) ^ v54;
                    uint64_t v50 = &v20[8 * v56];
                    if (v55) {
                      uint64_t v50 = v53;
                    }
                    BOOL v51 = v52;
                  }
                  while (v50 != v47);
                  *(void *)char v52 = v48;
                }
                while (v47 != v20);
              }
              char v32 = &v20[8 * ((v18 - a2) >> 3)];
            }
          }
        }
      }
      a4 = -(v26 + v12);
      uint64_t v57 = v7 - v17;
      if (v26 + v17 >= v7 - (v26 + v17) - v12)
      {
        uint64_t v63 = v26;
        uint64_t v64 = -(v26 + v12);
        uint64_t v65 = v17;
        uint64_t v66 = v7 - v17;
        unint64_t v67 = a6;
        uint64_t v68 = a7;
        uint64_t v69 = v15;
        uint64_t result = (char *)sub_1CD2794FC(v32, v18, a3, v64, v66);
        __int16 v62 = v69;
        a7 = v68;
        a6 = v67;
        uint64_t v18 = v20;
        uint64_t v57 = v65;
        a4 = v63;
        a3 = v32;
      }
      else
      {
        uint64_t v58 = &v10[v11];
        unint64_t v59 = a6;
        uint64_t v60 = a7;
        uint64_t v61 = a3;
        uint64_t result = (char *)sub_1CD2794FC(v58, v20, v32, v26, v17);
        a7 = v60;
        a3 = v61;
        a6 = v59;
        __int16 v62 = v32;
      }
      uint64_t v7 = v57;
      unsigned int v10 = v62;
      a2 = v18;
      if (!v57) {
        return result;
      }
    }
    if (a4 <= v7)
    {
      if (v10 != a2)
      {
        unint64_t v74 = 0;
        do
        {
          *(void *)&a6[v74] = *(void *)&v10[v74];
          v74 += 8;
        }
        while (&v10[v74] != a2);
        if (v74)
        {
          uint64_t v75 = a6;
          while (a2 != a3)
          {
            uint64_t v76 = *(void *)a2;
            BOOL v77 = *(_DWORD *)(*(void *)a2 + 8) >= *(_DWORD *)(*(void *)v75 + 8);
            if (*(_DWORD *)(*(void *)a2 + 8) >= *(_DWORD *)(*(void *)v75 + 8)) {
              uint64_t v76 = *(void *)v75;
            }
            a2 += 8 * (*(_DWORD *)(*(void *)a2 + 8) < *(_DWORD *)(*(void *)v75 + 8));
            v75 += 8 * v77;
            *(void *)unsigned int v10 = v76;
            v10 += 8;
            if (&a6[v74] == v75) {
              return result;
            }
          }
          return (char *)memmove(v10, v75, a6 - v75 + v74);
        }
      }
    }
    else if (a2 != a3)
    {
      uint64_t v70 = 0;
      do
      {
        *(void *)&a6[v70] = *(void *)&a2[v70];
        v70 += 8;
      }
      while (&a2[v70] != a3);
      if (v70)
      {
        uint64_t v71 = &a6[v70];
        uint64_t v72 = a3 - 8;
        while (a2 != v10)
        {
          uint64_t v73 = *((void *)v71 - 1);
          if (*(_DWORD *)(v73 + 8) >= *(_DWORD *)(*((void *)a2 - 1) + 8))
          {
            v71 -= 8;
          }
          else
          {
            uint64_t v73 = *((void *)a2 - 1);
            a2 -= 8;
          }
          *(void *)uint64_t v72 = v73;
          v72 -= 8;
          if (v71 == a6) {
            return result;
          }
        }
        if (v71 != a6)
        {
          uint64_t v78 = 0;
          do
          {
            *(void *)&v72[v78] = *(void *)&v71[v78 - 8];
            v78 -= 8;
          }
          while (&v71[v78] != a6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CD279A34(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (v2)
  {
    while (1)
    {
      int v3 = *(unsigned __int16 *)(v2 + 28);
      if (v3 == 17 || v3 == 65 || v3 == 74) {
        break;
      }
      unint64_t v4 = 0;
      uint64_t v5 = *(void *)(v2 + 40);
      if ((v5 & 4) == 0)
      {
        unint64_t v2 = v5 & 0xFFFFFFFFFFFFFFF8;
        if (v2) {
          continue;
        }
      }
      goto LABEL_9;
    }
    unint64_t v4 = v2;
  }
  else
  {
    unint64_t v4 = 0;
  }
LABEL_9:
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = (uint64_t *)(*(void *)(a1 + 8) + 584);
  uint64_t v9 = 0;
  unint64_t v10 = v4;
  sub_1CD40EE24(v7, &v10, &v9);
  return *(unsigned int *)(*v6 + 4 * *(unsigned int *)(*(void *)(v9 + 8) + 312));
}

_DWORD *sub_1CD279ACC(uint64_t *a1, int a2)
{
  unsigned int v3 = *((_DWORD *)a1 + 4);
  unint64_t v4 = (int *)*a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *((_DWORD *)a1 + 4) = v8;
  uint64_t result = operator new(40 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    uint64_t v10 = *((unsigned int *)a1 + 4);
    if (v10)
    {
      uint64_t v11 = 40 * v10;
      do
      {
        _DWORD *result = -1;
        result += 10;
        v11 -= 40;
      }
      while (v11);
    }
    if (!v3)
    {
LABEL_39:
      JUMPOUT(0x1D25D9CD0);
    }
    uint64_t v12 = &v4[10 * v3];
    uint64_t v13 = v4;
    while (1)
    {
      int v14 = *v13;
      if (*v13 <= 0xFFFFFFFD)
      {
        int v15 = *((_DWORD *)a1 + 4);
        if (v15)
        {
          int v16 = v15 - 1;
          unsigned int v17 = v16 & (37 * v14);
          uint64_t v18 = *a1 + 40 * v17;
          int v19 = *(_DWORD *)v18;
          if (v14 != *(_DWORD *)v18)
          {
            uint64_t v20 = 0;
            int v21 = 1;
            while (v19 != -1)
            {
              if (v20) {
                BOOL v22 = 0;
              }
              else {
                BOOL v22 = v19 == -2;
              }
              if (v22) {
                uint64_t v20 = v18;
              }
              unsigned int v23 = v17 + v21++;
              unsigned int v17 = v23 & v16;
              uint64_t v18 = *a1 + 40 * v17;
              int v19 = *(_DWORD *)v18;
              if (v14 == *(_DWORD *)v18) {
                goto LABEL_23;
              }
            }
            if (v20) {
              uint64_t v18 = v20;
            }
          }
        }
        else
        {
          uint64_t v18 = 0;
        }
LABEL_23:
        *(void *)(v18 + ++*(_DWORD *)(result + 8) = v18 + 24;
        *(_DWORD *)uint64_t v18 = v14;
        *(void *)(v18 + 16) = 0x200000000;
        unint64_t v24 = v13[4];
        uint64_t v25 = (int *)*((void *)v13 + 1);
        if ((int *)v18 == v13 || v24 == 0) {
          goto LABEL_32;
        }
        if (v25 == v13 + 6)
        {
          if (v24 >= 3) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memcpy((void *)(v18 + 24), v25, 8 * v13[4]);
          uint64_t v25 = (int *)*((void *)v13 + 1);
          *(_DWORD *)(v18 + 16) = v24;
          void v13[4] = 0;
LABEL_32:
          ++*((_DWORD *)a1 + 2);
          if (v25 != v13 + 6) {
            free(v25);
          }
          goto LABEL_34;
        }
        *(void *)(v18 + ++*(_DWORD *)(result + 8) = v25;
        int v27 = v13[5];
        *(_DWORD *)(v18 + 16) = v24;
        *(_DWORD *)(v18 + 20) = v27;
        *((void *)v13 + 1) = v13 + 6;
        *((void *)v13 + 2) = 0;
        ++*((_DWORD *)a1 + 2);
      }
LABEL_34:
      v13 += 10;
      if (v13 == v12) {
        goto LABEL_39;
      }
    }
  }
  a1[1] = 0;
  uint64_t v28 = *((unsigned int *)a1 + 4);
  if (v28)
  {
    uint64_t v29 = 40 * v28;
    do
    {
      _DWORD *result = -1;
      result += 10;
      v29 -= 40;
    }
    while (v29);
  }
  return result;
}

void sub_1CD279D58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v25[64] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8))
  {
    (*(void (**)(void, uint64_t, void))(**(void **)(a2 + 272) + 168))(*(void *)(a2 + 272), a3, 0);
    uint64_t v22 = a2;
    unsigned int v5 = sub_1CD287194(a2);
    uint64_t v6 = 0;
    if (v5 >= 5) {
      uint64_t v6 = sub_1CD89C3B0(v22);
    }
    (*(void (**)(void, void, void))(**(void **)(v22 + 272) + 192))(*(void *)(v22 + 272), *(void *)(a1 + 32), 0);
    unint64_t v7 = *(unsigned int *)(a1 + 8);
    unsigned int v23 = v25;
    uint64_t v24 = 0x4000000000;
    sub_1CD676A68((uint64_t)&v23, v7);
    int v8 = *(_DWORD *)(a1 + 8);
    uint64_t v9 = *(uint64_t **)a1;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    uint64_t v11 = *(void *)a1 + 16 * v10;
    if (v8)
    {
      if (v10)
      {
        uint64_t v12 = 16 * v10;
        uint64_t v13 = v9;
        while ((*v13 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v13 += 2;
          v12 -= 16;
          if (!v12) {
            goto LABEL_10;
          }
        }
      }
      else
      {
        uint64_t v13 = v9;
      }
    }
    else
    {
LABEL_10:
      uint64_t v13 = (uint64_t *)v11;
    }
    int v14 = &v9[2 * v10];
LABEL_12:
    while (v13 != v14)
    {
      if (*((unsigned char *)v13 + 12))
      {
        uint64_t v15 = sub_1CD27A4F0(v22);
        unint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 152))(v15, *v13);
      }
      else
      {
        unint64_t v16 = llvm::MCSymbolRefExpr::create(*v13, 0, *(void *)(v22 + 264), 0);
      }
      *((void *)v23 + *((unsigned int *)v13 + 2)) = v16;
      unsigned int v17 = v13 + 2;
      uint64_t v13 = (uint64_t *)v11;
      if (v17 != (uint64_t *)v11)
      {
        uint64_t v13 = v17;
        while ((*v13 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v13 += 2;
          if (v13 == (uint64_t *)v11)
          {
            uint64_t v13 = (uint64_t *)v11;
            goto LABEL_12;
          }
        }
      }
    }
    if (v24)
    {
      uint64_t v18 = (char *)v23;
      uint64_t v19 = 8 * v24;
      do
      {
        v18 += 8;
        uint64_t v20 = *(void *)(v22 + 272);
        int v21 = (llvm::DataLayout *)sub_1CD27A518(v22);
        llvm::DataLayout::getPointerSize(v21, 0);
        llvm::MCStreamer::emitValue(v20);
        v19 -= 8;
      }
      while (v19);
    }
    if (v6) {
      (*(void (**)(void, uint64_t, void))(**(void **)(v22 + 272) + 192))(*(void *)(v22 + 272), v6, 0);
    }
    if (v23 != v25) {
      free(v23);
    }
  }
}

unint64_t *sub_1CD27A004(uint64_t a1, uint64_t a2)
{
  v47[0] = a2;
  unint64_t v4 = sub_1CD8A05C4(a1 + 8, v47);
  uint64_t v6 = v4 + 1;
  unint64_t v5 = v4[1];
  if (v5 >= 8)
  {
    unint64_t v7 = (_DWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 4) == 0 || !v7)
    {
      if ((v5 & 4) == 0) {
        return v6;
      }
      return *(unint64_t **)v7;
    }
    if (v7[2]) {
      return *(unint64_t **)v7;
    }
  }
  uint64_t v9 = *(char **)(a1 + 40);
  unint64_t v8 = *(void *)(a1 + 48);
  if ((unint64_t)v9 >= v8)
  {
    uint64_t v11 = *(char **)(a1 + 32);
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - v11) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0x666666666666666) {
      abort();
    }
    unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - (void)v11) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x333333333333333) {
      unint64_t v15 = 0x666666666666666;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 > 0x666666666666666) {
        sub_1CB833614();
      }
      unint64_t v16 = operator new(40 * v15);
    }
    else
    {
      unint64_t v16 = 0;
    }
    unsigned int v17 = &v16[(v9 - v11) >> 3];
    v17[1] = 2;
    void v17[2] = 0;
    v17[3] = a2;
    if (a2 != -8192 && a2 != -4096 && a2)
    {
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v17 + 1));
      uint64_t v11 = *(char **)(a1 + 32);
      uint64_t v9 = *(char **)(a1 + 40);
    }
    uint64_t v18 = (char *)&v16[5 * v15];
    *unsigned int v17 = &unk_1F26497B8;
    uint64_t v10 = v17 + 5;
    v16[5 * v12 + 4] = 0;
    if (v9 == v11)
    {
      *(void *)(a1 + 32) = v17;
      *(void *)(a1 + 40) = v10;
      *(void *)(a1 + 4++*(_DWORD *)(result + 8) = v18;
    }
    else
    {
      uint64_t v19 = 0;
      do
      {
        uint64_t v20 = &v17[v19];
        int v21 = &v9[v19 * 8];
        uint64_t v22 = *(void *)&v9[v19 * 8 - 32] & 6;
        v17[v19 - 4] = v22;
        unsigned int v23 = &v17[v19 - 4];
        *(v20 - 3) = 0;
        uint64_t v24 = *(void *)&v9[v19 * 8 - 16];
        *(v20 - 2) = v24;
        if (v24 != -8192 && v24 != -4096 && v24 != 0)
        {
          unint64_t v26 = *((void *)v21 - 4) & 0xFFFFFFFFFFFFFFF8;
          *(v20 - 3) = *(void *)v26;
          *(void *)unint64_t v26 = v23;
          *unsigned int v23 = v26 | v22;
          int v27 = (unint64_t *)*(v20 - 3);
          if (v27) {
            *int v27 = *v27 & 7 | (unint64_t)&v16[5 * v12 - 3 + v19];
          }
        }
        v19 -= 5;
        *(v20 - 5) = &unk_1F26497B8;
        *(v20 - 1) = *((void *)v21 - 1);
      }
      while (&v9[v19 * 8] != v11);
      uint64_t v11 = *(char **)(a1 + 32);
      uint64_t v28 = *(char **)(a1 + 40);
      *(void *)(a1 + 32) = &v17[v19];
      *(void *)(a1 + 40) = v10;
      for (*(void *)(a1 + 4++*(_DWORD *)(result + 8) = v18; v28 != v11; v28 -= 40)
      {
        uint64_t v33 = *((void *)v28 - 2);
        if (v33 != -8192 && v33 != -4096 && v33 != 0)
        {
          unint64_t v35 = *((void *)v28 - 4) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v35 = *((void *)v28 - 3);
          uint64_t v36 = (unint64_t *)*((void *)v28 - 3);
          if (v36)
          {
            unint64_t *v36 = *v36 & 7 | v35;
          }
          else
          {
            uint64_t v37 = *((void *)v28 - 2);
            int64_t v38 = ***(int32x2_t ****)v37;
            unint64_t v39 = (unint64_t)v38[303];
            if (v39 <= v35)
            {
              uint64_t v40 = v38[305].u32[0];
              if (v39 + 16 * v40 > v35)
              {
                unsigned int v41 = v40 - 1;
                LODWORD(v42) = v41 & ((v37 >> 4) ^ (v37 >> 9));
                uint64_t v43 = (uint64_t *)(v39 + 16 * v42);
                uint64_t v44 = *v43;
                if (v37 == *v43)
                {
LABEL_66:
                  *uint64_t v43 = -8192;
                  v38[304] = vadd_s32(v38[304], (int32x2_t)0x1FFFFFFFFLL);
                  uint64_t v37 = *((void *)v28 - 2);
                }
                else
                {
                  int v45 = 1;
                  while (v44 != -4096)
                  {
                    int v46 = v42 + v45++;
                    uint64_t v42 = v46 & v41;
                    uint64_t v44 = *(void *)(v39 + 16 * v42);
                    if (v37 == v44)
                    {
                      uint64_t v43 = (uint64_t *)(v39 + 16 * v42);
                      goto LABEL_66;
                    }
                  }
                }
                *(unsigned char *)(v37 + 17) &= ~1u;
              }
            }
          }
        }
      }
    }
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    *((void *)v9 + 1) = 2;
    *((void *)v9 + 2) = 0;
    *((void *)v9 + 3) = a2;
    if (a2 != -8192 && a2 != -4096 && a2) {
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v9 + 8));
    }
    *(void *)uint64_t v9 = &unk_1F26497B8;
    *((void *)v9 + 4) = 0;
    uint64_t v10 = v9 + 40;
  }
  *(void *)(a1 + 40) = v10;
  *(v10 - 1) = a1;
  *((_DWORD *)v4 + 6) = -858993459 * (((unint64_t)v10 - *(void *)(a1 + 32)) >> 3) - 1;
  void v4[2] = *(void *)(a2 + 56);
  uint64_t v29 = *(llvm::MCContext **)a1;
  if ((*(_WORD *)(a2 + 18) & 0x7FFF) != 0)
  {
    v47[0] = (uint64_t)"tmp";
    __int16 v48 = 259;
    uint64_t NamedTempSymbol = llvm::MCContext::createNamedTempSymbol(v29, (const llvm::Twine *)v47);
  }
  else
  {
    v47[0] = (uint64_t)"tmp";
    __int16 v48 = 259;
    uint64_t NamedTempSymbol = llvm::MCContext::createTempSymbol(v29, (const llvm::Twine *)v47, 1);
  }
  sub_1CD486FFC(v6, NamedTempSymbol);
  unint64_t v31 = *v6;
  if (*v6 >= 8)
  {
    if ((v31 & 4) == 0) {
      return v6;
    }
    unint64_t v7 = (_DWORD *)(v31 & 0xFFFFFFFFFFFFFFF8);
    return *(unint64_t **)v7;
  }
  return 0;
}

uint64_t sub_1CD27A478(uint64_t result, llvm::DataLayout *this, unsigned int a3)
{
  uint64_t v4 = result;
  LODWORD(result) = 0;
  if (v4 && *(unsigned char *)(v4 + 16) == 3) {
    LODWORD(result) = llvm::DataLayout::getPreferredAlign(this, (const llvm::GlobalVariable *)v4);
  }
  if (a3 <= result) {
    uint64_t result = result;
  }
  else {
    uint64_t result = a3;
  }
  unsigned int v5 = *(_DWORD *)(v4 + 32);
  int v6 = HIWORD(v5) & 0x3F;
  if (v6)
  {
    unsigned int v7 = v6 - 1;
    int v8 = (v5 >> 22) & 1;
    if (v7 > result) {
      int v8 = 1;
    }
    if (v8) {
      return v7;
    }
    else {
      return result;
    }
  }
  return result;
}

uint64_t sub_1CD27A4F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 248) + 24))();
}

uint64_t sub_1CD27A518(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 288) + 2064) + 272;
}

uint64_t sub_1CD27A528(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 280) + 16);
}

uint64_t sub_1CD27A534(uint64_t a1, uint64_t a2)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24), &llvm::MachineModuleInfoWrapperPass::ID, 1);
  if (AnalysisPass) {
    uint64_t AnalysisPass = (*(uint64_t (**)(uint64_t, void *))(*(void *)AnalysisPass + 96))(AnalysisPass, &llvm::MachineModuleInfoWrapperPass::ID);
  }
  uint64_t v5 = AnalysisPass + 32;
  if (!AnalysisPass) {
    uint64_t v5 = 0;
  }
  *(void *)(a1 + 28++*(_DWORD *)(result + 8) = v5;
  *(_WORD *)(a1 + 596) = 0;
  uint64_t v6 = *(void *)(a1 + 488);
  *(void *)(a1 + 48++*(_DWORD *)(result + 8) = 0;
  if (v6)
  {
    uint64_t v46 = sub_1CD8A0890(v6);
    MEMORY[0x1D25D9CE0](v46, 0x1020C40D7426AC9);
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 248) + 24))(*(void *)(a1 + 248));
  (*(void (**)(uint64_t, void, void))(*(void *)v7 + 24))(v7, *(void *)(a1 + 264), *(void *)(a1 + 248));
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 248) + 24))(*(void *)(a1 + 248));
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 48))(v8, a2);
  (*(void (**)(void, void, void))(**(void **)(a1 + 272) + 176))(*(void *)(a1 + 272), 0, *(void *)(*(void *)(a1 + 248) + 584));
  uint64_t v9 = (const llvm::Triple *)(*(void *)(a1 + 248) + 448);
  __int16 v72 = 261;
  __p = (void *)llvm::Module::getDarwinTargetVariantTriple((llvm::Module *)a2);
  *(void *)&long long v70 = v10;
  uint64_t v11 = v66;
  llvm::Triple::Triple((llvm::Triple *)v66, (const llvm::Twine *)&__p);
  uint64_t v12 = *(void *)(a1 + 272);
  __p = (void *)llvm::Module::getSDKVersion((llvm::Module *)a2);
  *(void *)&long long v70 = v13;
  llvm::Module::getDarwinTargetVariantTriple((llvm::Module *)a2);
  if (!v14) {
    uint64_t v11 = 0;
  }
  *(void *)__s = llvm::Module::getDarwinTargetVariantSDKVersion((llvm::Module *)a2);
  *(void *)&__s[8] = v15;
  llvm::MCStreamer::emitVersionForTarget(v12, v9, (const llvm::VersionTuple *)&__p, (const llvm::Triple *)v11, (const llvm::VersionTuple *)__s);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 232))(a1, a2);
  uint64_t v16 = *(void *)(a1 + 256);
  if (*(unsigned char *)(v16 + 364))
  {
    __p = &v71;
    long long v70 = xmmword_1CFAC3020;
    int v47 = *(unsigned __int8 *)(v16 + 360);
    __int16 v48 = *(unsigned char **)(a2 + 192);
    char v49 = *(unsigned char *)(a2 + 215);
    int v50 = v49;
    if (v49 >= 0) {
      __int16 v48 = (unsigned char *)(a2 + 192);
    }
    uint64_t v51 = v49 & 0x7F;
    if (v50 >= 0) {
      uint64_t v52 = v51;
    }
    else {
      uint64_t v52 = *(void *)(a2 + 200);
    }
    if (v47)
    {
      __int16 v48 = (unsigned char *)llvm::sys::path::filename((uint64_t)v48, v52, 0);
      BOOL v54 = &v48[v53];
      *(void *)&long long v70 = 0;
    }
    else
    {
      BOOL v54 = &v48[v52];
    }
    sub_1CC22C75C(&__p, v48, v54);
    if (*(unsigned char *)(*(void *)(a1 + 256) + 365))
    {
      strcpy(__s, "LLVM version 32023.408");
      size_t v55 = strlen(__s);
      (*(void (**)(void, void *, void, char *, size_t))(**(void **)(a1 + 272) + 672))(*(void *)(a1 + 272), __p, v70, __s, v55);
    }
    else
    {
      (*(void (**)(void, void *, void))(**(void **)(a1 + 272) + 664))(*(void *)(a1 + 272), __p, v70);
    }
    if (__p != &v71) {
      free(__p);
    }
  }
  uint64_t v17 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24), &llvm::GCModuleInfo::ID, 1);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v17 + 96))(v17, &llvm::GCModuleInfo::ID);
  uint64_t v19 = *(unsigned int *)(v18 + 40);
  if (v19)
  {
    uint64_t v56 = *(uint64_t **)(v18 + 32);
    uint64_t v57 = 8 * v19;
    do
    {
      uint64_t v65 = v18;
      uint64_t v58 = sub_1CD89D8BC(a1, *v56);
      if (v58) {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v58 + 16))(v58, a2, v65, a1);
      }
      ++v56;
      v57 -= 8;
      uint64_t v18 = v65;
    }
    while (v57);
  }
  char v20 = *(unsigned char *)(a2 + 111);
  int v21 = v20;
  uint64_t v22 = v20 & 0x7F;
  if (v21 < 0) {
    uint64_t v22 = *(void *)(a2 + 96);
  }
  if (v22)
  {
    uint64_t v59 = *(void *)(a1 + 272);
    __p = "Start of file scope inline assembly";
    __int16 v72 = 259;
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v59 + 112))(v59, &__p, 1);
    (*(void (**)(void))(**(void **)(a1 + 272) + 152))(*(void *)(a1 + 272));
    sub_1CBAD7600("\n", (const void **)(a2 + 88), &__p);
    if (v70 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if (v70 >= 0) {
      unint64_t v61 = HIBYTE(v70) & 0x7F;
    }
    else {
      unint64_t v61 = v70;
    }
    sub_1CD8A1B54(a1, p_p, v61, *(void *)(*(void *)(a1 + 248) + 584), *(void *)(a1 + 248) + 1128, 0);
    if (SHIBYTE(v70) < 0) {
      operator delete(__p);
    }
    uint64_t v62 = *(void *)(a1 + 272);
    __p = "End of file scope inline assembly";
    __int16 v72 = 259;
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v62 + 112))(v62, &__p, 1);
    (*(void (**)(void))(**(void **)(a1 + 272) + 152))(*(void *)(a1 + 272));
  }
  if (*(unsigned char *)(*(void *)(a1 + 256) + 408))
  {
    if (!llvm::Module::getCodeViewFlag((llvm::Module *)a2)) {
      goto LABEL_130;
    }
    if (*(_DWORD *)(*(void *)(a1 + 248) + 484) == 15) {
      operator new();
    }
    if (llvm::Module::getDwarfVersion((llvm::Module *)a2))
    {
LABEL_130:
      if (*(unsigned char *)(*(void *)(a1 + 288) + 2108)) {
        operator new();
      }
    }
  }
  __p = "llvm.pseudo_probe_desc";
  __int16 v72 = 259;
  if (llvm::Module::getNamedMetadata((llvm::Module *)a2, (const char **)&__p)) {
    operator new();
  }
  uint64_t v23 = *(void *)(a1 + 256);
  unsigned int v24 = *(_DWORD *)(v23 + 412);
  if (v24 <= 3)
  {
    uint64_t v25 = *(void *)(a2 + 32);
    if (v25 != a2 + 24)
    {
      while (1)
      {
        uint64_t v26 = v25 - 56;
        if (!v25) {
          uint64_t v26 = 0;
        }
        int v27 = *(_DWORD *)(v26 + 32);
        if ((v27 & 0xF) == 1) {
          goto LABEL_26;
        }
        if (v25 && *(unsigned char *)(v26 + 16) == 3)
        {
          if ((*(_DWORD *)(v26 + 20) & 0x7FFFFFF) == 0) {
            goto LABEL_26;
          }
        }
        else if (!*(unsigned char *)(v26 + 16) && (v27 & 0x800000) == 0 && *(void *)(v26 + 72) == v26 + 72)
        {
          goto LABEL_26;
        }
        uint64_t v29 = *(void *)(a1 + 256);
        if (*(unsigned char *)(v29 + 409)
          || *(_DWORD *)(v29 + 412) != 1
          || (uint64_t v41 = v26 + 112,
              uint64_t v42 = v26,
              int UWTableKind = llvm::AttributeList::getUWTableKind((llvm::AttributeList *)(v26 + 112)),
              uint64_t v26 = v42,
              !UWTableKind)
          && *(void *)v41
          && (*(unsigned char *)(*(void *)v41 + 16) & 0x20) != 0
          && (*(_WORD *)(v42 + 18) & 8) == 0)
        {
          if (!*(unsigned char *)(*(void *)(a1 + 288) + 2108) && (*(_WORD *)(*(void *)(a1 + 248) + 1064) & 0x10) == 0)
          {
LABEL_26:
            int v28 = *(_DWORD *)(a1 + 592);
            goto LABEL_27;
          }
        }
        int v44 = *(_DWORD *)(v26 + 32);
        if ((v44 & 0xF) != 1)
        {
          if (v25 && *(unsigned char *)(v26 + 16) == 3)
          {
            if ((*(_DWORD *)(v26 + 20) & 0x7FFFFFF) != 0) {
              goto LABEL_74;
            }
          }
          else if (*(unsigned char *)(v26 + 16) || (v44 & 0x800000) != 0 || *(void *)(v26 + 72) != v26 + 72)
          {
LABEL_74:
            uint64_t v45 = *(void *)(a1 + 256);
            if (*(unsigned char *)(v45 + 409)
              || *(_DWORD *)(v45 + 412) != 1
              || (uint64_t v63 = v26,
                  uint64_t v64 = v26 + 112,
                  !llvm::AttributeList::getUWTableKind((llvm::AttributeList *)(v26 + 112)))
              && *(void *)v64
              && (*(unsigned char *)(*(void *)v64 + 16) & 0x20) != 0
              && (*(_WORD *)(v63 + 18) & 8) == 0)
            {
              if (*(unsigned char *)(*(void *)(a1 + 288) + 2108)) {
                int v28 = 2;
              }
              else {
                int v28 = (*(unsigned __int16 *)(*(void *)(a1 + 248) + 1064) >> 3) & 2;
              }
            }
            else
            {
              int v28 = 1;
            }
            goto LABEL_70;
          }
        }
        int v28 = 0;
LABEL_70:
        *(_DWORD *)(a1 + 592) = v28;
LABEL_27:
        if (v28 != 1)
        {
          uint64_t v25 = *(void *)(v25 + 8);
          if (v25 != a2 + 24) {
            continue;
          }
        }
        uint64_t v23 = *(void *)(a1 + 256);
        unsigned int v24 = *(_DWORD *)(v23 + 412);
        break;
      }
    }
  }
  switch(v24)
  {
    case 0u:
      if (*(unsigned char *)(v23 + 416) && *(_DWORD *)(a1 + 592) == 2) {
        goto LABEL_42;
      }
      break;
    case 1u:
    case 2u:
LABEL_42:
      operator new();
    case 3u:
      operator new();
    case 4u:
      if (*(_DWORD *)(v23 + 420)) {
        operator new();
      }
      return result;
    case 5u:
      operator new();
    case 6u:
      operator new();
    default:
      break;
  }
  __p = (char *)&v70 + 8;
  *(void *)&long long v70 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata((llvm::Module *)a2, (uint64_t)&__p);
  if (v70)
  {
    unsigned int v30 = (uint64_t *)((char *)__p + 16);
    uint64_t v31 = 24 * v70;
    while (1)
    {
      uint64_t v32 = *(void *)(*(v30 - 1) + 8);
      if (*(void *)v32 == 7)
      {
        int v38 = *(_DWORD *)(v32 + 24);
        int v39 = *(_DWORD *)(v32 + 27);
        if (v38 == 1969710691 && v39 == 1685217653) {
          break;
        }
      }
      v30 += 3;
      v31 -= 24;
      if (!v31) {
        goto LABEL_47;
      }
    }
    uint64_t v33 = *v30;
  }
  else
  {
LABEL_47:
    uint64_t v33 = 0;
  }
  if (__p != (char *)&v70 + 8) {
    free(__p);
  }
  if (v33 && *(void *)(v33 + 128)) {
    operator new();
  }
  BOOL v34 = *(uint64_t **)(a1 + 528);
  unint64_t v35 = *(uint64_t **)(a1 + 536);
  while (v34 != v35)
  {
    uint64_t v36 = *v34;
    v34 += 9;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v36 + 24))(v36, a2);
  }
  if (v67 < 0) {
    operator delete(v66[0]);
  }
  return 0;
}

uint64_t sub_1CD27B234(void *a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 32);
  if ((v2 & 0xF) == 1) {
    return 0;
  }
  if (*(unsigned char *)(a2 + 16) == 3)
  {
    if ((*(_DWORD *)(a2 + 20) & 0x7FFFFFF) == 0) {
      return 0;
    }
  }
  else if (!*(unsigned char *)(a2 + 16) && (v2 & 0x800000) == 0 && *(void *)(a2 + 72) == a2 + 72)
  {
    return 0;
  }
  uint64_t v4 = a1[32];
  if (!*(unsigned char *)(v4 + 409) && *(_DWORD *)(v4 + 412) == 1)
  {
    uint64_t v7 = a1;
    uint64_t v5 = a2 + 112;
    if (llvm::AttributeList::getUWTableKind((llvm::AttributeList *)(a2 + 112))) {
      return 1;
    }
    if (!*(void *)v5) {
      return 1;
    }
    if ((*(unsigned char *)(*(void *)v5 + 16) & 0x20) == 0) {
      return 1;
    }
    a1 = v7;
    if ((*(_WORD *)(a2 + 18) & 8) != 0) {
      return 1;
    }
  }
  if (*(unsigned char *)(a1[36] + 2108)) {
    return 2;
  }
  return (*(unsigned __int16 *)(a1[31] + 1064) >> 3) & 2;
}

uint64_t sub_1CD27B318(uint64_t result, llvm::GlobalValue *a2, uint64_t a3)
{
  if ((*((_DWORD *)a2 + 8) & 0xF) != 0)
  {
    if (((1 << (*((_DWORD *)a2 + 8) & 0xF)) & 0x180) != 0) {
      return result;
    }
    uint64_t v6 = result;
    uint64_t v4 = *(void *)(result + 256);
    if (*(unsigned char *)(v4 + 392))
    {
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(result + 272) + 304))(*(void *)(result + 272), a3, 9);
      if (*(unsigned char *)(*(void *)(v6 + 256) + 393) && llvm::GlobalValue::canBeOmittedFromSymbolTable(a2)) {
        unsigned int v3 = *(uint64_t (**)(void))(**(void **)(v6 + 272) + 304);
      }
      else {
        unsigned int v3 = *(uint64_t (**)(void))(**(void **)(v6 + 272) + 304);
      }
    }
    else if (*(unsigned char *)(v4 + 394) && llvm::GlobalValue::getComdat((uint64_t)a2))
    {
      unsigned int v3 = *(uint64_t (**)(void))(**(void **)(v6 + 272) + 304);
    }
    else
    {
      unsigned int v3 = *(uint64_t (**)(void))(**(void **)(v6 + 272) + 304);
    }
  }
  else
  {
    unsigned int v3 = *(uint64_t (**)(void))(**(void **)(result + 272) + 304);
  }

  return v3();
}

uint64_t sub_1CD27B4E0(uint64_t a1, const llvm::GlobalValue *a2)
{
  return llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(a1 + 248), a2);
}

uint64_t sub_1CD27B4E8(uint64_t a1, llvm::GlobalValue *this)
{
  unsigned int v3 = *(llvm::TargetMachine **)(a1 + 248);
  if (*((_DWORD *)v3 + 123) != 3)
  {
LABEL_2:
    return llvm::TargetMachine::getSymbol(v3, this);
  }
  uint64_t v9 = this;
  uint64_t v5 = a1;
  BOOL canBenefitFromLocalAlias = llvm::GlobalValue::canBenefitFromLocalAlias(this);
  unsigned int v3 = *(llvm::TargetMachine **)(v5 + 248);
  if (!canBenefitFromLocalAlias)
  {
LABEL_9:
    this = v9;
    goto LABEL_2;
  }
  this = v9;
  if (!*((_DWORD *)v3 + 136)) {
    goto LABEL_2;
  }
  if (llvm::Module::getPIELevel(*((llvm::Module **)v9 + 5)))
  {
    unsigned int v3 = *(llvm::TargetMachine **)(v5 + 248);
    goto LABEL_9;
  }
  unsigned int v3 = *(llvm::TargetMachine **)(v5 + 248);
  if ((*((unsigned char *)v9 + 33) & 0x40) == 0) {
    goto LABEL_9;
  }
  uint64_t v7 = (*(uint64_t (**)(llvm::TargetMachine *))(*(void *)v3 + 24))(v3);
  uint64_t v8 = *(void *)(v5 + 248);

  return llvm::TargetLoweringObjectFile::getSymbolWithGlobalValueBase(v7, v9, "$local", 6, v8);
}

uint64_t sub_1CD27B5E4(uint64_t result, llvm::GlobalValue *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(_DWORD **)(result + 248);
  int v5 = v4[260];
  if ((v5 & 0x40000) != 0)
  {
    if ((v5 & 0x20000) == 0) {
      goto LABEL_8;
    }
  }
  else
  {
    int v6 = v4[122];
    if (v6 != 11)
    {
      int v7 = v4[121];
      if (v7 != 13 && (v7 != 15 || v6 != 18)) {
        goto LABEL_8;
      }
    }
  }
  if ((*((unsigned char *)a2 + 33) & 0x1C) != 0) {
    return result;
  }
LABEL_8:
  if (a2 && *((unsigned char *)a2 + 16) == 3)
  {
    if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0) {
      goto LABEL_33;
    }
  }
  else if (!*((unsigned char *)a2 + 16) {
         && *((llvm::GlobalValue **)a2 + 9) == (llvm::GlobalValue *)((char *)a2 + 72)
  }
         && (*((unsigned char *)a2 + 34) & 0x80) == 0)
  {
    goto LABEL_33;
  }
  if ((*((unsigned char *)a2 + 23) & 0x10) != 0)
  {
    uint64_t v9 = ***(void ***)a2;
    uint64_t v10 = *(void *)(v9 + 152);
    uint64_t v11 = *(unsigned int *)(v9 + 168);
    if (v11)
    {
      LODWORD(v12) = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      uint64_t v13 = v10 + 16 * v12;
      uint64_t v14 = *(llvm::GlobalValue **)v13;
      if (*(llvm::GlobalValue **)v13 == a2)
      {
LABEL_23:
        uint64_t v17 = *(void *)(v13 + 8);
        if (*(void *)v17 == 9)
        {
          uint64_t v61 = *(void *)(v17 + 16);
          int v62 = *(unsigned __int8 *)(v17 + 24);
          if (v61 == 0x6573752E6D766C6CLL && v62 == 100)
          {
            if (*(unsigned char *)(*(void *)(result + 256) + 367))
            {
              uint64_t v64 = *((void *)a2 - 4);
              int v65 = *(_DWORD *)(v64 + 20);
              uint64_t v66 = v65 & 0x7FFFFFF;
              if ((v65 & 0x7FFFFFF) != 0)
              {
                uint64_t v67 = *((void *)a2 - 4);
                do
                {
                  uint64_t result = (uint64_t)llvm::Value::stripPointerCasts(*(llvm::Value **)(v67
                                                                                   - 32
                                                                                   * (*(_DWORD *)(v64 + 20) & 0x7FFFFFF)));
                  if (result) {
                    BOOL v68 = *(unsigned __int8 *)(result + 16) > 3u;
                  }
                  else {
                    BOOL v68 = 1;
                  }
                  if (!v68)
                  {
                    uint64_t v69 = *(void *)(v3 + 272);
                    uint64_t Symbol = llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(v3 + 248), (const llvm::GlobalValue *)result);
                    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v69 + 304))(v69, Symbol, 17);
                  }
                  v67 += 32;
                  --v66;
                }
                while (v66);
              }
            }
            return result;
          }
        }
        goto LABEL_24;
      }
      int v15 = 1;
      while (v14 != (llvm::GlobalValue *)-4096)
      {
        int v16 = v12 + v15++;
        uint64_t v12 = v16 & (v11 - 1);
        uint64_t v14 = *(llvm::GlobalValue **)(v10 + 16 * v12);
        if (v14 == a2)
        {
          uint64_t v13 = v10 + 16 * v12;
          goto LABEL_23;
        }
      }
    }
    uint64_t v13 = v10 + 16 * v11;
    goto LABEL_23;
  }
LABEL_24:
  if ((*((unsigned char *)a2 + 34) & 0x40) != 0)
  {
    uint64_t result = (uint64_t)llvm::GlobalObject::getSectionImpl(a2);
    if (v96 == 13 && *(void *)result == 0x74656D2E6D766C6CLL && *(void *)(result + 5) == 0x617461646174656DLL) {
      return result;
    }
  }
  int v18 = *((_DWORD *)a2 + 8);
  if ((v18 & 0xF) == 1) {
    return result;
  }
  if ((v18 & 0x400000) != 0)
  {
    uint64_t result = (uint64_t)llvm::GlobalObject::getSectionImpl(a2);
    if (v98 == 12 && *(void *)result == 0x7274702E6D766C6CLL && *(_DWORD *)(result + 8) == 1752462689) {
      return result;
    }
  }
  if ((*((_DWORD *)a2 + 8) & 0xF) != 6 || (*((unsigned char *)a2 + 23) & 0x10) == 0) {
    goto LABEL_28;
  }
  uint64_t v100 = ***(void ***)a2;
  uint64_t v101 = *(void *)(v100 + 152);
  uint64_t v102 = *(unsigned int *)(v100 + 168);
  if (v102)
  {
    LODWORD(v103) = (v102 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v104 = v101 + 16 * v103;
    long long v105 = *(llvm::GlobalValue **)v104;
    if (*(llvm::GlobalValue **)v104 == a2) {
      goto LABEL_168;
    }
    int v106 = 1;
    while (v105 != (llvm::GlobalValue *)-4096)
    {
      int v107 = v103 + v106++;
      uint64_t v103 = v107 & (v102 - 1);
      long long v105 = *(llvm::GlobalValue **)(v101 + 16 * v103);
      if (v105 == a2)
      {
        uint64_t v104 = v101 + 16 * v103;
        goto LABEL_168;
      }
    }
  }
  uint64_t v104 = v101 + 16 * v102;
LABEL_168:
  uint64_t v108 = *(void *)(v104 + 8);
  if (*(void *)v108 == 17)
  {
    if (*(void *)(v108 + 16) == 0x6F6C672E6D766C6CLL
      && *(void *)(v108 + 24) == 0x726F74635F6C6162
      && *(unsigned char *)(v108 + 32) == 115)
    {
      uint64_t v116 = *((void *)a2 + 5) + 272;
      uint64_t v117 = *((void *)a2 - 4);
      uint64_t v118 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v3 + 216);
      uint64_t v119 = v3;
      uint64_t v120 = 1;
    }
    else
    {
      uint64_t v111 = *(void *)(v108 + 16);
      uint64_t v112 = *(void *)(v108 + 24);
      int v113 = *(unsigned __int8 *)(v108 + 32);
      if (v111 != 0x6F6C672E6D766C6CLL || v112 != 0x726F74645F6C6162 || v113 != 115) {
        goto LABEL_28;
      }
      uint64_t v116 = *((void *)a2 + 5) + 272;
      uint64_t v117 = *((void *)a2 - 4);
      uint64_t v118 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v3 + 216);
      uint64_t v119 = v3;
      uint64_t v120 = 0;
    }
    return v118(v119, v116, v117, v120);
  }
LABEL_28:
  v123[0] = (unsigned __int8 **)llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(v3 + 248), a2);
  v121[0] = 0;
  uint64_t result = sub_1CC48C528((uint64_t *)(v3 + 400), v123, v121);
  if (result)
  {
    uint64_t v19 = v121[0];
    uint64_t v20 = *(void *)(v3 + 400);
    uint64_t v21 = *(unsigned int *)(v3 + 416);
  }
  else
  {
    uint64_t v20 = *(void *)(v3 + 400);
    uint64_t v21 = *(unsigned int *)(v3 + 416);
    uint64_t v19 = v20 + 16 * v21;
  }
  if (v19 != v20 + 16 * v21) {
    return result;
  }
  if (*(unsigned char *)(v3 + 504))
  {
    uint64_t v56 = (llvm::raw_ostream *)(*(uint64_t (**)(void))(**(void **)(v3 + 272) + 120))(*(void *)(v3 + 272));
    llvm::Value::printAsOperand(a2, v56, 0, *((const llvm::Module **)a2 + 5));
    uint64_t v57 = (llvm::raw_ostream *)(*(uint64_t (**)(void))(**(void **)(v3 + 272) + 120))(*(void *)(v3 + 272));
    uint64_t v58 = (unsigned char *)*((void *)v57 + 4);
    if ((unint64_t)v58 >= *((void *)v57 + 3))
    {
      llvm::raw_ostream::write(v57, 10);
    }
    else
    {
      *((void *)v57 + 4) = v58 + 1;
      unsigned char *v58 = 10;
    }
  }
LABEL_33:
  uint64_t result = llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(v3 + 248), a2);
  uint64_t v23 = result;
  unsigned int v24 = *((_DWORD *)a2 + 8);
  int v25 = (v24 >> 4) & 3;
  if (v25 == 2)
  {
    int v27 = (unsigned int *)(*(void *)(v3 + 256) + 404);
    goto LABEL_44;
  }
  if (v25 == 1)
  {
    if (a2 && *((unsigned char *)a2 + 16) == 3)
    {
      uint64_t v26 = *(void *)(v3 + 256);
      if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0)
      {
LABEL_38:
        int v27 = (unsigned int *)(v26 + 400);
        goto LABEL_44;
      }
    }
    else if (!*((unsigned char *)a2 + 16) && *((llvm::GlobalValue **)a2 + 9) == (llvm::GlobalValue *)((char *)a2 + 72))
    {
      uint64_t v26 = *(void *)(v3 + 256);
      if ((v24 & 0x800000) == 0) {
        goto LABEL_38;
      }
    }
    else
    {
      uint64_t v26 = *(void *)(v3 + 256);
    }
    int v27 = (unsigned int *)(v26 + 396);
LABEL_44:
    uint64_t v22 = (const llvm::TargetMachine *)*v27;
    if (v22) {
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 272) + 304))(*(void *)(v3 + 272), result);
    }
  }
  if (a2 && *((unsigned char *)a2 + 16) == 3)
  {
    if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0) {
      return result;
    }
LABEL_53:
    int v28 = *(_DWORD *)(v23 + 8);
    if ((v28 & 2) != 0)
    {
      if ((*(_DWORD *)(v23 + 8) & 0x1C00) == 0x800)
      {
        *(void *)(v23 + 24) = 0;
        v28 &= 0xFFFFE3FF;
      }
      uint64_t v29 = *(void *)v23 & 7;
      *(void *)uint64_t v23 = v29;
      v28 &= ~2u;
      *(_DWORD *)(v23 + ++*(_DWORD *)(result + 8) = v28;
    }
    else
    {
      uint64_t v29 = *(void *)v23;
    }
    unint64_t v30 = v29 & 0xFFFFFFFFFFFFFFF8;
    if ((v28 & 0x1C00) == 0x800 && !v30)
    {
      *(_DWORD *)(v23 + ++*(_DWORD *)(result + 8) = v28 | 4;
      unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v23 + 24));
      uint64_t v29 = *(void *)v23 & 7 | AssociatedFragment;
      *(void *)uint64_t v23 = v29;
      if (!AssociatedFragment)
      {
LABEL_61:
        if ((*(_DWORD *)(v23 + 8) & 0x1C00) != 0x800) {
          goto LABEL_62;
        }
      }
    }
    else if (!v30)
    {
      goto LABEL_61;
    }
    uint64_t v72 = *(void *)(v3 + 264);
    if ((v29 & 4) != 0)
    {
      uint64_t v75 = *(uint64_t **)(v23 - 8);
      uint64_t v76 = *v75;
      uint64_t v73 = v75 + 2;
      uint64_t v74 = v76;
    }
    else
    {
      uint64_t v73 = 0;
      uint64_t v74 = 0;
    }
    v121[0] = "symbol '";
    v121[2] = v73;
    v121[3] = v74;
    __int16 v122 = 1283;
    v123[0] = (unsigned __int8 **)v121;
    uint64_t v124 = "' is already defined";
    __int16 v125 = 770;
    llvm::MCContext::reportError(v72, 0, (uint64_t)v123);
LABEL_62:
    if (*(unsigned char *)(*(void *)(v3 + 256) + 363)) {
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 272) + 304))(*(void *)(v3 + 272), v23, 4);
    }
    unsigned __int8 KindForGlobal = llvm::TargetLoweringObjectFile::getKindForGlobal(a2, *(const llvm::GlobalObject **)(v3 + 248), v22);
    uint64_t v32 = *((void *)a2 + 5);
    uint64_t v33 = (llvm::Type *)*((void *)a2 + 3);
    unint64_t v34 = (unint64_t)(sub_1CB83544C(v32 + 272, (uint64_t)v33) + 7) >> 3;
    BOOL v36 = v35 == 1;
    char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(v32 + 272), v33, 1);
    unint64_t v39 = ((1 << Alignment) + v34 - 1) & -(1 << Alignment);
    if (v36) {
    int v40 = KindForGlobal;
    }
    unsigned __int8 v41 = sub_1CD27A478((uint64_t)a2, (llvm::DataLayout *)(v32 + 272), 0);
    uint64_t v42 = *(uint64_t **)(v3 + 528);
    uint64_t v43 = *(uint64_t **)(v3 + 536);
    while (v42 != v43)
    {
      uint64_t v44 = *v42;
      v42 += 9;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v44 + 16))(v44, v23, v39);
    }
    if (KindForGlobal == 18) {
      goto LABEL_70;
    }
    uint64_t v45 = (*(uint64_t (**)(void))(**(void **)(v3 + 248) + 24))(*(void *)(v3 + 248));
    uint64_t v46 = llvm::TargetLoweringObjectFile::SectionForGlobal(v45, (uint64_t)a2, KindForGlobal);
    uint64_t v47 = v46;
    if (KindForGlobal - 15 > 2)
    {
      if (KindForGlobal - 12 <= 2 && *(unsigned char *)(*(void *)(v3 + 256) + 20))
      {
        __int16 v48 = *(llvm::MCContext **)(v3 + 264);
        if ((*(unsigned char *)v23 & 4) != 0)
        {
          BOOL v77 = *(void **)(v23 - 8);
          uint64_t v78 = (unsigned __int8 **)*v77;
          char v49 = (unsigned __int8 **)(v77 + 2);
          int v50 = v78;
        }
        else
        {
          char v49 = 0;
          int v50 = 0;
        }
        v123[0] = v49;
        v123[1] = v50;
        uint64_t v124 = "$tlv$init";
        __int16 v125 = 773;
        uint64_t v79 = (const llvm::MCSymbol *)llvm::MCContext::getOrCreateSymbol(v48, v123);
        if ((v40 & 0xFFFFFFFD) == 0xC)
        {
          (*(void (**)(void))(**(void **)(v3 + 248) + 24))(*(void *)(v3 + 248));
          (*(void (**)(void))(**(void **)(v3 + 272) + 480))();
        }
        else if (v40 == 13)
        {
          (*(void (**)(void, uint64_t, void))(**(void **)(v3 + 272) + 168))(*(void *)(v3 + 272), v47, 0);
          sub_1CD27C664(v3, v41, a2);
          (*(void (**)(void, const llvm::MCSymbol *, void))(**(void **)(v3 + 272) + 192))(*(void *)(v3 + 272), v79, 0);
          sub_1CD27C7A4(v3, (llvm::DataLayout *)(*((void *)a2 + 5) + 272), *((uint64_t **)a2 - 4));
        }
        (*(void (**)(void))(**(void **)(v3 + 272) + 152))(*(void *)(v3 + 272));
        uint64_t v80 = (*(uint64_t (**)(void))(**(void **)(v3 + 248) + 24))(*(void *)(v3 + 248));
        (*(void (**)(void, void, void))(**(void **)(v3 + 272) + 168))(*(void *)(v3 + 272), *(void *)(v80 + 408), 0);
        (*(void (**)(uint64_t, llvm::GlobalValue *, uint64_t))(*(void *)v3 + 432))(v3, a2, v23);
        (*(void (**)(void, uint64_t, void))(**(void **)(v3 + 272) + 192))(*(void *)(v3 + 272), v23, 0);
        unsigned int v81 = *(_DWORD *)(*(void *)a2 + 8);
        if ((v81 & 0xFE) == 0x12) {
          unsigned int v81 = *(_DWORD *)(**(void **)(*(void *)a2 + 16) + 8);
        }
        if (v81 < 0x100) {
          goto LABEL_136;
        }
        unsigned int v82 = v81 >> 8;
        uint64_t v83 = *(unsigned int *)(v32 + 512);
        uint64_t v84 = *(void *)(v32 + 504);
        if (v83)
        {
          uint64_t v84 = *(void *)(v32 + 504);
          unint64_t v85 = *(unsigned int *)(v32 + 512);
          do
          {
            unint64_t v86 = v85 >> 1;
            uint64_t v87 = v84 + 16 * (v85 >> 1);
            unsigned int v88 = *(_DWORD *)(v87 + 8);
            uint64_t v89 = v87 + 16;
            v85 += ~(v85 >> 1);
            if (v88 < v82) {
              uint64_t v84 = v89;
            }
            else {
              unint64_t v85 = v86;
            }
          }
          while (v85);
        }
        if (v84 == *(void *)(v32 + 504) + 16 * v83 || *(_DWORD *)(v84 + 8) != v82) {
LABEL_136:
        }
          uint64_t v84 = *(void *)(v32 + 504);
        uint64_t v90 = *(_DWORD *)(v84 + 4) >> 3;
        uint64_t v91 = *(llvm::MCStreamer **)(v3 + 272);
        uint64_t v92 = (const llvm::MCSymbol *)sub_1CD89DC8C(v3, "_tlv_bootstrap", 14);
        llvm::MCStreamer::emitSymbolValue(v91, v92, v90, 0);
        (*(void (**)(void))(**(void **)(v3 + 272) + 520))();
        llvm::MCStreamer::emitSymbolValue(*(llvm::MCStreamer **)(v3 + 272), v79, v90, 0);
        return (*(uint64_t (**)(void))(**(void **)(v3 + 272) + 152))(*(void *)(v3 + 272));
      }
    }
    else
    {
      if (*(unsigned char *)(*(void *)(v3 + 256) + 19)
        && (*(unsigned int (**)(uint64_t))(*(void *)v46 + 16))(v46))
      {
        (*(void (**)(uint64_t, llvm::GlobalValue *, uint64_t))(*(void *)v3 + 432))(v3, a2, v23);
        return (*(uint64_t (**)(void))(**(void **)(v3 + 272) + 472))();
      }
      if (KindForGlobal == 16
        && *(void *)((*(uint64_t (**)(void))(**(void **)(v3 + 248) + 24))(*(void *)(v3 + 248)) + 40) == v47)
      {
        if (v39 <= 1) {
          uint64_t v59 = 1;
        }
        else {
          uint64_t v59 = v39;
        }
        uint64_t v60 = *(void *)(v3 + 272);
        if (*(_DWORD *)(*(void *)(v3 + 256) + 356)) {
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v60 + 464))(v60, v23, v59, 1 << v41);
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v60 + 304))(v60, v23, 16);
LABEL_70:
        (*(uint64_t (**)(void))(**(void **)(v3 + 248) + 24))(*(void *)(v3 + 248));
        return (*(uint64_t (**)(void))(**(void **)(v3 + 272) + 456))();
      }
    }
    (*(void (**)(void, uint64_t, void))(**(void **)(v3 + 272) + 168))(*(void *)(v3 + 272), v47, 0);
    (*(void (**)(uint64_t, llvm::GlobalValue *, uint64_t))(*(void *)v3 + 432))(v3, a2, v23);
    sub_1CD27C664(v3, v41, a2);
    (*(void (**)(void, uint64_t, void))(**(void **)(v3 + 272) + 192))(*(void *)(v3 + 272), v23, 0);
    uint64_t v51 = sub_1CD27B4E8(v3, a2);
    if (v51 != v23) {
      (*(void (**)(void, uint64_t, void))(**(void **)(v3 + 272) + 192))(*(void *)(v3 + 272), v51, 0);
    }
    sub_1CD27C7A4(v3, (llvm::DataLayout *)(*((void *)a2 + 5) + 272), *((uint64_t **)a2 - 4));
    if (*(unsigned char *)(*(void *)(v3 + 256) + 363))
    {
      uint64_t v53 = *(void *)(v3 + 264);
      uint64_t v52 = *(void *)(v3 + 272);
      *(void *)(v53 + 272) += 24;
      uint64_t v54 = *(void *)(v53 + 192);
      if (((v54 + 7) & 0xFFFFFFFFFFFFFFF8) - v54 + 24 > *(void *)(v53 + 200) - v54)
      {
        unsigned int v93 = *(_DWORD *)(v53 + 216) >> 7;
        if (v93 >= 0x1E) {
          LOBYTE(v93) = 30;
        }
        uint64_t v94 = 4096 << v93;
        unint64_t v55 = (unint64_t)operator new(4096 << v93, (std::align_val_t)8uLL);
        unsigned int v95 = *(_DWORD *)(v53 + 216);
        if (v95 >= *(_DWORD *)(v53 + 220)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v53 + 208) + 8 * v95) = v55;
        ++*(_DWORD *)(v53 + 216);
        *(void *)(v53 + 200) = v55 + v94;
      }
      else
      {
        unint64_t v55 = (v54 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *(void *)(v53 + 192) = v55 + 24;
      *(unsigned char *)unint64_t v55 = 1;
      *(_DWORD *)(v55 + 1) = *(unsigned __int8 *)(v55 + 4) << 24;
      *(void *)(v55 + ++*(_DWORD *)(result + 8) = 0;
      *(void *)(v55 + 16) = v39;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v52 + 424))(v52, v23, v55);
    }
    return (*(uint64_t (**)(void))(**(void **)(v3 + 272) + 152))(*(void *)(v3 + 272));
  }
  if (*((unsigned char *)a2 + 16)
    || *((llvm::GlobalValue **)a2 + 9) != (llvm::GlobalValue *)((char *)a2 + 72)
    || (*((unsigned char *)a2 + 34) & 0x80) != 0)
  {
    goto LABEL_53;
  }
  return result;
}

uint64_t sub_1CD27C664(uint64_t a1, uint64_t a2, llvm::GlobalVariable *a3)
{
  if (a3) {
    uint64_t result = sub_1CD27A478((uint64_t)a3, (llvm::DataLayout *)(*((void *)a3 + 5) + 272), a2);
  }
  else {
    uint64_t result = a2;
  }
  if ((_BYTE)result)
  {
    uint64_t v5 = *(void *)(a1 + 272);
    if ((*(_DWORD *)(*(void *)(*(void *)(v5 + 112) + 32 * *(unsigned int *)(v5 + 120) - 32) + 220) & 0xFE) == 2)
    {
      int v6 = *(uint64_t (**)(void))(*(void *)v5 + 648);
      return v6();
    }
    else
    {
      int v7 = *(uint64_t (**)(void))(*(void *)v5 + 640);
      return v7();
    }
  }
  return result;
}

uint64_t sub_1CD27C7A4(uint64_t a1, llvm::DataLayout *a2, uint64_t *a3)
{
  int v6 = (llvm::Type *)*a3;
  unint64_t v7 = (unint64_t)(sub_1CB83544C((uint64_t)a2, *a3) + 7) >> 3;
  BOOL v9 = v8 == 1;
  uint64_t result = llvm::DataLayout::getAlignment(a2, v6, 1);
  uint64_t v12 = ((1 << result) + v7 - 1) & -(1 << result);
  if (v9) {
  if (v12)
  }
  {
    return sub_1CD2852DC(a2, (uint64_t)a3, a1, 0, 0);
  }
  else if (*(unsigned char *)(*(void *)(a1 + 256) + 18))
  {
    uint64_t v13 = *(uint64_t (**)(void))(**(void **)(a1 + 272) + 520);
    return v13();
  }
  return result;
}

void sub_1CD27C8E8(uint64_t a1)
{
  uint64_t v2 = **(void **)(a1 + 280);
  if (!*(unsigned char *)(a1 + 504)) {
    goto LABEL_2;
  }
  uint64_t v78 = (llvm::raw_ostream *)(*(uint64_t (**)(void))(**(void **)(a1 + 272) + 120))(*(void *)(a1 + 272));
  uint64_t v79 = sub_1CB8E509C(v78, "-- Begin function ");
  Name = llvm::Value::getName((llvm::Value *)v2);
  if (v81)
  {
    uint64_t v82 = v81;
    BOOL v83 = *Name == 1;
    if (*Name == 1) {
      uint64_t v84 = Name + 1;
    }
    else {
      uint64_t v84 = Name;
    }
    size_t v85 = v82 - v83;
    unint64_t v86 = (unsigned char *)*((void *)v79 + 4);
    if ((unint64_t)(v82 - v83) <= *((void *)v79 + 3) - (void)v86)
    {
      if (v85)
      {
        memcpy(v86, v84, v85);
        unint64_t v86 = (unsigned char *)(*((void *)v79 + 4) + v85);
        *((void *)v79 + 4) = v86;
      }
      goto LABEL_133;
    }
    llvm::raw_ostream::write(v79, v84, v85);
  }
  unint64_t v86 = (unsigned char *)*((void *)v79 + 4);
LABEL_133:
  if ((unint64_t)v86 >= *((void *)v79 + 3))
  {
    llvm::raw_ostream::write(v79, 10);
  }
  else
  {
    *((void *)v79 + 4) = v86 + 1;
    *unint64_t v86 = 10;
  }
LABEL_2:
  (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
  uint64_t v3 = *(void *)(a1 + 280);
  int v4 = *(unsigned __int8 *)(*(void *)(v3 + 328) + 200);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 248) + 24))(*(void *)(a1 + 248));
  uint64_t v7 = v5;
  if (v4)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v5 + 72))(v5, v2, *(void *)(a1 + 248));
  }
  else
  {
    unsigned __int8 KindForGlobal = llvm::TargetLoweringObjectFile::getKindForGlobal((llvm::TargetLoweringObjectFile *)v2, *(const llvm::GlobalObject **)(a1 + 248), v6);
    uint64_t v9 = llvm::TargetLoweringObjectFile::SectionForGlobal(v7, v2, KindForGlobal);
  }
  *(void *)(v3 + 80) = v9;
  (*(void (**)(void, void, void))(**(void **)(a1 + 272) + 168))(*(void *)(a1 + 272), *(void *)(*(void *)(a1 + 280) + 80), 0);
  uint64_t v10 = *(void *)(a1 + 256);
  if (*(unsigned char *)(v10 + 23)) {
    goto LABEL_7;
  }
  int v11 = (*(_DWORD *)(v2 + 32) >> 4) & 3;
  if (v11 == 1)
  {
    BOOL v68 = (_DWORD *)(v10 + 396);
    goto LABEL_116;
  }
  if (v11 == 2)
  {
    BOOL v68 = (_DWORD *)(v10 + 404);
LABEL_116:
    if (*v68)
    {
      (*(void (**)(void, void))(**(void **)(a1 + 272) + 304))(*(void *)(a1 + 272), *(void *)(a1 + 328));
      uint64_t v10 = *(void *)(a1 + 256);
    }
  }
LABEL_7:
  if (*(unsigned char *)(v10 + 476)) {
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 432))(a1, v2, *(void *)(a1 + 336));
  }
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 432))(a1, v2, *(void *)(a1 + 328));
  uint64_t v12 = *(void *)(a1 + 256);
  if (*(unsigned char *)(v12 + 362))
  {
    sub_1CD27C664(a1, *(unsigned __int8 *)(*(void *)(a1 + 280) + 352), (llvm::GlobalVariable *)v2);
    uint64_t v12 = *(void *)(a1 + 256);
  }
  if (*(unsigned char *)(v12 + 363)) {
    (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 272) + 304))(*(void *)(a1 + 272), *(void *)(a1 + 328), 2);
  }
  uint64_t v13 = *(void *)(v2 + 112);
  if (v13 && (*(unsigned char *)(v13 + 12) & 0x20) != 0) {
    (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 272) + 304))(*(void *)(a1 + 272), *(void *)(a1 + 328), 1);
  }
  if (*(unsigned char *)(a1 + 504))
  {
    uint64_t v87 = (llvm::raw_ostream *)(*(uint64_t (**)(void))(**(void **)(a1 + 272) + 120))(*(void *)(a1 + 272));
    llvm::Value::printAsOperand((llvm::Value *)v2, v87, 0, *(const llvm::Module **)(v2 + 40));
    (*(void (**)(uint64_t))(*(void *)a1 + 448))(a1);
    unsigned int v88 = (llvm::raw_ostream *)(*(uint64_t (**)(void))(**(void **)(a1 + 272) + 120))(*(void *)(a1 + 272));
    uint64_t v89 = (unsigned char *)*((void *)v88 + 4);
    if ((unint64_t)v89 >= *((void *)v88 + 3))
    {
      llvm::raw_ostream::write(v88, 10);
    }
    else
    {
      *((void *)v88 + 4) = v89 + 1;
      *uint64_t v89 = 10;
    }
  }
  if ((*(_WORD *)(v2 + 18) & 2) != 0)
  {
    if (*(unsigned char *)(*(void *)(a1 + 256) + 18))
    {
      LinkerPrivateTempuint64_t Symbol = llvm::MCContext::createLinkerPrivateTempSymbol(*(llvm::MCContext **)(a1 + 264));
      (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 272) + 192))(*(void *)(a1 + 272), LinkerPrivateTempSymbol, 0);
      int v66 = *(_DWORD *)(v2 + 20);
      if ((v66 & 0x40000000) != 0) {
        uint64_t v67 = *(void *)(v2 - 8);
      }
      else {
        uint64_t v67 = v2 - 32 * (v66 & 0x7FFFFFF);
      }
      sub_1CD27C7A4(a1, (llvm::DataLayout *)(*(void *)(v2 + 40) + 272), *(uint64_t **)(v67 + 32));
      (*(void (**)(void))(**(void **)(a1 + 272) + 304))();
    }
    else
    {
      int v104 = *(_DWORD *)(v2 + 20);
      if ((v104 & 0x40000000) != 0) {
        uint64_t v105 = *(void *)(v2 - 8);
      }
      else {
        uint64_t v105 = v2 - 32 * (v104 & 0x7FFFFFF);
      }
      sub_1CD27C7A4(a1, (llvm::DataLayout *)(*(void *)(v2 + 40) + 272), *(uint64_t **)(v105 + 32));
    }
  }
  uint64_t v14 = *(void *)(v2 + 112);
  if (!v14) {
    goto LABEL_52;
  }
  LODWORD(v15) = *(_DWORD *)(v14 + 8);
  if (!v15) {
    goto LABEL_86;
  }
  unint64_t v16 = *(void *)(v14 + 40);
  if (!v16) {
    goto LABEL_28;
  }
  LODWORD(v15) = *(_DWORD *)(v16 + 40);
  if (!v15)
  {
LABEL_86:
    unint64_t v16 = 0;
    goto LABEL_29;
  }
  uint64_t v17 = *(void *)(v16 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    uint64_t v69 = v17;
    int v70 = v15;
    int v71 = __cxa_guard_acquire(&qword_1EBCBE588);
    LODWORD(v15) = v70;
    uint64_t v17 = v69;
    if (v71)
    {
      unint64_t v72 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v72 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v72;
      __cxa_guard_release(&qword_1EBCBE588);
      LODWORD(v15) = v70;
      uint64_t v17 = v69;
    }
  }
  uint64_t v18 = __ROR8__(qword_1EBCBE580 ^ 0xA78AF1B51BD984F2, 30);
  unint64_t v19 = 0x9DDFEA08EB382D69
      * ((qword_1EBCBE580 + 0xBA5F5326B54B2D6) ^ ((0x9DDFEA08EB382D69
                                                   * ((v18 - 0x2BFCB67E25672AFALL) ^ (qword_1EBCBE580
                                                                                    + 0xBA5F5326B54B2D6))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v18 - 0x2BFCB67E25672AFALL) ^ (qword_1EBCBE580 + 0xBA5F5326B54B2D6))));
  unsigned int v20 = -348639895 * ((v19 >> 47) ^ v19);
  int v21 = v15 - 1;
  for (int i = 1; ; ++i)
  {
    unsigned int v23 = v20 & v21;
    unsigned int v24 = (uint64_t *)(v17 + 24 * v23);
    uint64_t v25 = *v24;
    if (*v24 == -1)
    {
      if ("patchable-function-prefix" == (char *)-1) {
        goto LABEL_77;
      }
      goto LABEL_26;
    }
    if (v25 != -2) {
      break;
    }
    if ("patchable-function-prefix" == (char *)-2) {
      goto LABEL_77;
    }
LABEL_26:
    if (v25 == -1)
    {
      unint64_t v16 = 0;
      goto LABEL_28;
    }
    unsigned int v20 = i + v23;
  }
  if (v24[1] != 25) {
    goto LABEL_26;
  }
  BOOL v46 = *(void *)v25 == 0x6C62616863746170 && *(void *)(v25 + 8) == 0x6974636E75662D65;
  BOOL v47 = v46 && *(void *)(v25 + 16) == 0x69666572702D6E6FLL;
  if (!v47 || *(unsigned char *)(v25 + 24) != 120) {
    goto LABEL_26;
  }
LABEL_77:
  unint64_t v16 = v24[2];
  if (!v16)
  {
LABEL_28:
    LOBYTE(v15) = 0;
    goto LABEL_29;
  }
  uint64_t v15 = *(unsigned int *)(v16 + 16);
  if (!v15) {
    goto LABEL_86;
  }
  unint64_t v49 = 0;
  int v50 = (unsigned __int8 *)(*(unsigned int *)(v16 + 12) + v16 + 25);
  uint64_t v51 = *(unsigned int *)(v16 + 16);
  while (1)
  {
    int v53 = *v50++;
    int v52 = v53;
    if ((v53 - 48) >= 0xA)
    {
      if ((v52 - 97) >= 0x1A)
      {
        if ((v52 - 65) > 0x19)
        {
LABEL_160:
          unint64_t v16 = v49;
LABEL_85:
          BOOL v26 = v51 == v15;
          LOBYTE(v15) = v51 != 0;
          goto LABEL_30;
        }
        int v54 = -55;
      }
      else
      {
        int v54 = -87;
      }
    }
    else
    {
      int v54 = -48;
    }
    unsigned int v55 = v54 + v52;
    if (v55 > 9) {
      goto LABEL_160;
    }
    unint64_t v16 = 10 * v49 + v55;
    if (v49 > v16 / 0xA) {
      break;
    }
    unint64_t v49 = v16;
    if (!--v51) {
      goto LABEL_85;
    }
  }
  LOBYTE(v15) = 1;
LABEL_29:
  BOOL v26 = 1;
LABEL_30:
  uint64_t v27 = *(void *)(v2 + 112);
  char v28 = v15 | v26;
  if (v16 >= 0x100000000) {
    LODWORD(v16) = 0;
  }
  if (!v27) {
    goto LABEL_106;
  }
  if (!*(_DWORD *)(v27 + 8))
  {
LABEL_41:
    unint64_t v29 = 0;
    goto LABEL_42;
  }
  unint64_t v29 = *(void *)(v27 + 40);
  if (!v29)
  {
LABEL_42:
    LOBYTE(v27) = 0;
    goto LABEL_43;
  }
  LODWORD(v27) = *(_DWORD *)(v29 + 40);
  if (!v27)
  {
LABEL_106:
    unint64_t v29 = 0;
    goto LABEL_43;
  }
  uint64_t v30 = *(void *)(v29 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    int v73 = v16;
    char v74 = v28;
    uint64_t v106 = v30;
    int v75 = v27;
    int v76 = __cxa_guard_acquire(&qword_1EBCBE588);
    LODWORD(v27) = v75;
    uint64_t v30 = v106;
    char v28 = v74;
    LODWORD(v16) = v73;
    if (v76)
    {
      unint64_t v77 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v77 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v77;
      __cxa_guard_release(&qword_1EBCBE588);
      LODWORD(v27) = v75;
      uint64_t v30 = v106;
      char v28 = v74;
      LODWORD(v16) = v73;
    }
  }
  uint64_t v31 = __ROR8__(qword_1EBCBE580 ^ 0xD0DB31C61410D441, 30);
  unint64_t v32 = 0x9DDFEA08EB382D69
      * ((qword_1EBCBE580 - 0x1DAA4ADE8CE29C7ALL) ^ ((0x9DDFEA08EB382D69
                                                    * ((v31 - 0x447750EBFF2F1972) ^ (qword_1EBCBE580
                                                                                     - 0x1DAA4ADE8CE29C7ALL))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v31 - 0x447750EBFF2F1972) ^ (qword_1EBCBE580 - 0x1DAA4ADE8CE29C7ALL))));
  unsigned int v33 = -348639895 * ((v32 >> 47) ^ v32);
  int v34 = v27 - 1;
  for (int j = 1; ; ++j)
  {
    unsigned int v36 = v33 & v34;
    uint64_t v37 = v30 + 24 * v36;
    int v38 = *(void **)v37;
    if (*(void *)v37 == -1)
    {
      if ("patchable-function-entry" == (char *)-1) {
        goto LABEL_97;
      }
      goto LABEL_40;
    }
    if (v38 != (void *)-2) {
      break;
    }
    if ("patchable-function-entry" == (char *)-2) {
      goto LABEL_97;
    }
LABEL_40:
    if (v38 == (void *)-1) {
      goto LABEL_41;
    }
    unsigned int v33 = j + v36;
  }
  if (*(void *)(v37 + 8) != 24) {
    goto LABEL_40;
  }
  BOOL v56 = *v38 == 0x6C62616863746170 && v38[1] == 0x6974636E75662D65;
  if (!v56 || v38[2] != 0x7972746E652D6E6FLL) {
    goto LABEL_40;
  }
LABEL_97:
  unint64_t v29 = *(void *)(v37 + 16);
  if (!v29) {
    goto LABEL_42;
  }
  uint64_t v27 = *(unsigned int *)(v29 + 16);
  if (!v27) {
    goto LABEL_106;
  }
  unint64_t v58 = 0;
  uint64_t v59 = (unsigned __int8 *)(*(unsigned int *)(v29 + 12) + v29 + 25);
  uint64_t v60 = *(unsigned int *)(v29 + 16);
  while (1)
  {
    int v62 = *v59++;
    int v61 = v62;
    if ((v62 - 48) >= 0xA)
    {
      if ((v61 - 97) >= 0x1A)
      {
        if ((v61 - 65) > 0x19)
        {
LABEL_163:
          unint64_t v29 = v58;
LABEL_105:
          BOOL v39 = v60 == v27;
          LOBYTE(v27) = v60 != 0;
          goto LABEL_44;
        }
        int v63 = -55;
      }
      else
      {
        int v63 = -87;
      }
    }
    else
    {
      int v63 = -48;
    }
    unsigned int v64 = v63 + v61;
    if (v64 > 9) {
      goto LABEL_163;
    }
    unint64_t v29 = 10 * v58 + v64;
    if (v58 > v29 / 0xA) {
      break;
    }
    unint64_t v58 = v29;
    if (!--v60) {
      goto LABEL_105;
    }
  }
  LOBYTE(v27) = 1;
LABEL_43:
  BOOL v39 = 1;
LABEL_44:
  if (!v16) {
    char v28 = 1;
  }
  if (v28)
  {
    int v40 = 0;
    if (v29 < 0x100000000) {
      int v40 = v29;
    }
    if (((v27 | v39) & 1) == 0 && v40) {
      *(void *)(a1 + 320) = *(void *)(a1 + 520);
    }
  }
  else
  {
    int v97 = v16;
    uint64_t v98 = llvm::MCContext::createLinkerPrivateTempSymbol(*(llvm::MCContext **)(a1 + 264));
    *(void *)(a1 + 320) = v98;
    (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 272) + 192))(*(void *)(a1 + 272), v98, 0);
    sub_1CD89DD8C(a1, v97);
  }
LABEL_52:
  if (*(unsigned char *)(*(void *)(a1 + 256) + 476)) {
    (*(void (**)(uint64_t))(*(void *)a1 + 304))(a1);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 296))(a1);
  unsigned __int8 v41 = 0;
  int v107 = 0;
  uint64_t v108 = 0;
  uint64_t v109 = 0;
  uint64_t v42 = *(void *)(a1 + 488);
  if (v42)
  {
    v90.n128_u64[0] = (unint64_t)sub_1CD89D160(v42, v2, (uint64_t *)&v107);
    unsigned __int8 v41 = v107;
    uint64_t v91 = v108;
    if (v107 != v108)
    {
      uint64_t v92 = v107;
      do
      {
        uint64_t v93 = *v92++;
        uint64_t v94 = *(void *)(a1 + 272);
        v110[0] = "Address taken block that was later removed";
        __int16 v111 = 259;
        (*(void (**)(uint64_t, void *, uint64_t, __n128))(*(void *)v94 + 112))(v94, v110, 1, v90);
        (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 272) + 192))(*(void *)(a1 + 272), v93, 0);
      }
      while (v92 != v91);
    }
  }
  if (*(void *)(a1 + 520))
  {
    if (*(unsigned char *)(*(void *)(a1 + 256) + 81))
    {
      int v99 = *(llvm::MCContext **)(a1 + 264);
      v110[0] = "tmp";
      __int16 v111 = 259;
      Tempuint64_t Symbol = llvm::MCContext::createTempSymbol(v99, (const llvm::Twine *)v110, 1);
      (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 272) + 192))(*(void *)(a1 + 272), TempSymbol, 0);
      uint64_t v101 = *(void *)(a1 + 520);
      uint64_t v102 = *(void *)(a1 + 272);
      unint64_t v103 = llvm::MCSymbolRefExpr::create(TempSymbol, 0, *(void *)(a1 + 264), 0);
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v102 + 280))(v102, v101, v103);
    }
    else
    {
      (*(void (**)(void))(**(void **)(a1 + 272) + 192))(*(void *)(a1 + 272));
    }
  }
  uint64_t v43 = *(uint64_t **)(a1 + 528);
  uint64_t v44 = *(uint64_t **)(a1 + 536);
  while (v43 != v44)
  {
    uint64_t v45 = *v43;
    v43 += 9;
    (*(void (**)(uint64_t, void))(*(void *)v45 + 40))(v45, *(void *)(a1 + 280));
  }
  if ((*(_WORD *)(v2 + 18) & 4) != 0)
  {
    unsigned int v95 = (llvm::DataLayout *)(*(void *)(v2 + 40) + 272);
    PrologueData = (uint64_t *)llvm::Function::getPrologueData((llvm::Function *)v2);
    sub_1CD27C7A4(a1, v95, PrologueData);
  }
  if (v41) {
    operator delete(v41);
  }
}

uint64_t sub_1CD27D6B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 328);
  int v3 = *(_DWORD *)(v2 + 8);
  if ((v3 & 2) != 0)
  {
    if ((*(_DWORD *)(v2 + 8) & 0x1C00) == 0x800)
    {
      *(void *)(v2 + 24) = 0;
      v3 &= 0xFFFFE3FF;
    }
    *(void *)v2 &= 7uLL;
    *(_DWORD *)(v2 + ++*(_DWORD *)(result + 8) = v3 & 0xFFFFFFFD;
    uint64_t v2 = *(void *)(a1 + 328);
    int v3 = *(_DWORD *)(v2 + 8);
  }
  if ((v3 & 0x1C00) == 0x800)
  {
    int v11 = "'";
    __int16 v12 = 259;
    __int16 v10 = 261;
    v9[0] = sub_1CD6ACAC0((unsigned char *)v2);
    v9[1] = v5;
    sub_1CD3E3950((uint64_t *)&v11, v9, (uint64_t)v13);
    uint64_t v7 = "' is a protected alias";
    __int16 v8 = 259;
    sub_1CD3E3950(v13, (uint64_t *)&v7, (uint64_t)v14);
    llvm::report_fatal_error((llvm *)v14, (const llvm::Twine *)1);
  }
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 272) + 192))(*(void *)(a1 + 272));
  if (*(_DWORD *)(*(void *)(a1 + 248) + 492) == 3)
  {
    uint64_t result = sub_1CD27B4E8(a1, **(llvm::GlobalValue ***)(a1 + 280));
    if (result != *(void *)(a1 + 328))
    {
      int v6 = *(uint64_t (**)(void))(**(void **)(a1 + 272) + 192);
      return v6();
    }
  }
  return result;
}

uint64_t sub_1CD27D82C(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  int v3 = *(_DWORD *)(*a2 + 32);
  if ((v3 & 0xF) == 1) {
    return 0;
  }
  if (*(unsigned char *)(v2 + 16) == 3)
  {
    if ((*(_DWORD *)(v2 + 20) & 0x7FFFFFF) == 0) {
      return 0;
    }
  }
  else if (!*(unsigned char *)(v2 + 16) && (v3 & 0x800000) == 0 && *(void *)(v2 + 72) == v2 + 72)
  {
    return 0;
  }
  uint64_t v5 = a1[32];
  if (!*(unsigned char *)(v5 + 409) && *(_DWORD *)(v5 + 412) == 1)
  {
    uint64_t v7 = *a2;
    __int16 v8 = a1;
    uint64_t v6 = v2 + 112;
    if (llvm::AttributeList::getUWTableKind((llvm::AttributeList *)(v2 + 112))) {
      return 1;
    }
    if (!*(void *)v6) {
      return 1;
    }
    if ((*(unsigned char *)(*(void *)v6 + 16) & 0x20) == 0) {
      return 1;
    }
    a1 = v8;
    if ((*(_WORD *)(v7 + 18) & 8) != 0) {
      return 1;
    }
  }
  if (*(unsigned char *)(a1[36] + 2108)) {
    return 2;
  }
  return (*(unsigned __int16 *)(a1[31] + 1064) >> 3) & 2;
}

uint64_t sub_1CD27D914(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 256);
  int v5 = *(_DWORD *)(v4 + 412);
  BOOL v6 = v5 == 1 || v5 == 3;
  if (v6 || !v5 && *(unsigned char *)(v4 + 416) && *(_DWORD *)(result + 592) == 2)
  {
    uint64_t result = sub_1CD27B234((void *)result, **(void **)(result + 280));
    if (result)
    {
      uint64_t v7 = a2[3];
      for (uint64_t i = a2[1]; i != v7 + 48; uint64_t i = *(void *)(i + 8))
      {
        uint64_t result = sub_1CB834754(i);
        if (!result) {
          goto LABEL_10;
        }
      }
      if (v7 == *(void *)(*(void *)(v7 + 32) + 320)) {
        return result;
      }
LABEL_10:
      uint64_t v9 = *(void *)(*(void *)(v3 + 280) + 440) + 80 * *(unsigned int *)(a2[4] + 16);
      return sub_1CD8A147C(v3, v9);
    }
  }
  return result;
}

void sub_1CD27DA04(uint64_t a1)
{
  uint64_t v468 = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint64_t))(*(void *)a1 + 440))(a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 248))(a1);
  if (!*(unsigned char *)(a1 + 504)) {
    goto LABEL_6;
  }
  uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24), &llvm::MachineDominatorTree::ID, 1);
  if (!AnalysisPass)
  {
    *(void *)(a1 + 296) = 0;
LABEL_584:
    operator new();
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t, void *))(*(void *)AnalysisPass + 96))(AnalysisPass, &llvm::MachineDominatorTree::ID);
  *(void *)(a1 + 296) = v4;
  if (!v4) {
    goto LABEL_584;
  }
  uint64_t v5 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24), &llvm::MachineLoopInfo::ID, 1);
  if (!v5)
  {
    *(void *)(a1 + 304) = 0;
LABEL_586:
    operator new();
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 96))(v5, &llvm::MachineLoopInfo::ID);
  *(void *)(a1 + 304) = v6;
  if (!v6) {
    goto LABEL_586;
  }
LABEL_6:
  uint64_t v7 = ******(void ******)(a1 + 312);
  if (*(void *)(v7 + 128)) {
    int v416 = 1;
  }
  else {
    int v416 = sub_1CC421DEC(*(void *)(v7 + 72), (uint64_t)"asm-printer", 11);
  }
  __int16 v8 = *(void **)(a1 + 280);
  uint64_t v9 = (char *)v8[41];
  __int16 v10 = &dword_1CD912700[7744];
  uint64_t v415 = (char *)(v8 + 40);
  if (v9 != (char *)(v8 + 40))
  {
    LODWORD(v11) = 0;
    int v12 = 0;
    uint64_t v419 = (void (*)(void))off_1F2615510;
    uint64_t v13 = 32;
    while (1)
    {
      (*(void (**)(uint64_t, char *))(*(void *)a1 + 264))(a1, v9);
      uint64_t v14 = v9 + 48;
      uint64_t v437 = 0;
      uint64_t v438 = 0;
      unsigned int v439 = 0;
      unsigned int v418 = (llvm::MachineBasicBlock *)v9;
      uint64_t v15 = (char *)*((void *)v9 + 7);
      unint64_t v420 = v14;
      while (v15 != v14)
      {
        int v16 = **((unsigned __int16 **)v15 + 2);
        if ((v16 - 18) >= 0xFFFFFFFB) {
          int v17 = v12;
        }
        else {
          int v17 = v12 + 1;
        }
        BOOL v18 = (v16 - 3) < 5 || v16 == 10;
        if (v18)
        {
          uint64_t v11 = v11;
        }
        else
        {
          int v12 = v17;
          uint64_t v11 = ((v16 - 18) < 0xFFFFFFFB) | v11;
        }
        unint64_t v19 = *((void *)v15 + 6);
        if (v19 >= 8)
        {
          unsigned int v20 = (int *)(v19 & 0xFFFFFFFFFFFFFFF8);
          BOOL v21 = (*((void *)v15 + 6) & 7) != 1 || v20 == 0;
          if (!v21
            || ((*((void *)v15 + 6) & 7) == 3 ? (BOOL v22 = v20 == 0) : (BOOL v22 = 1),
                !v22 && *((unsigned char *)v20 + 4) && *(void *)&v20[2 * *v20 + 2]))
          {
            (*(void (**)(void))(**(void **)(a1 + 272) + 192))(*(void *)(a1 + 272));
          }
        }
        unsigned int v23 = *(uint64_t **)(a1 + 528);
        unsigned int v24 = *(uint64_t **)(a1 + 536);
        while (v23 != v24)
        {
          uint64_t v25 = *v23;
          v23 += 9;
          (*(void (**)(uint64_t, char *))(*(void *)v25 + 96))(v25, v15);
        }
        if (!*(unsigned char *)(a1 + 504)) {
          goto LABEL_46;
        }
        uint64_t v1 = (*(uint64_t (**)(void))(**(void **)(a1 + 272) + 120))(*(void *)(a1 + 272));
        uint64_t v26 = *(void *)(*(void *)(*((void *)v15 + 3) + 32) + 16);
        uint64_t v27 = (const llvm::TargetInstrInfo *)(*(uint64_t (**)(uint64_t))(*(void *)v26 + 104))(v26);
        uint64_t RestoreSize = llvm::MachineInstr::getRestoreSize((llvm::MachineInstr *)v15, v27);
        if ((RestoreSize & 0xFF00000000) != 0)
        {
          sub_1CD098D14((llvm::raw_ostream *)v1, RestoreSize, 0, 0, 0);
          unint64_t v29 = *(void **)(v1 + 32);
          if (*(void *)(v1 + 24) - (void)v29 <= 0xCuLL)
          {
            uint64_t v30 = (llvm::raw_ostream *)v1;
            uint64_t v31 = "-byte Reload\n";
            size_t v32 = 13;
LABEL_42:
            llvm::raw_ostream::write(v30, v31, v32);
            goto LABEL_43;
          }
          qmemcpy(v29, "-byte Reload\n", 13);
          uint64_t v74 = *(void *)(v1 + 32) + 13;
          goto LABEL_112;
        }
        Foldeduint64_t RestoreSize = llvm::MachineInstr::getFoldedRestoreSize((llvm::MachineInstr *)v15, v27);
        if ((FoldedRestoreSize & 0xFF00000000) != 0)
        {
          if (!FoldedRestoreSize) {
            goto LABEL_43;
          }
          if (FoldedRestoreSize == -1)
          {
            int v65 = *(void **)(v1 + 32);
            if (*(void *)(v1 + 24) - (void)v65 <= 0x1AuLL)
            {
              uint64_t v30 = (llvm::raw_ostream *)v1;
              uint64_t v31 = "Unknown-size Folded Reload\n";
              size_t v32 = 27;
              goto LABEL_42;
            }
            qmemcpy(v65, "Unknown-size Folded Reload\n", 27);
            uint64_t v74 = *(void *)(v1 + 32) + 27;
          }
          else
          {
            sub_1CD098D14((llvm::raw_ostream *)v1, FoldedRestoreSize, 0, 0, 0);
            uint64_t v75 = *(void *)(v1 + 32);
            if ((unint64_t)(*(void *)(v1 + 24) - v75) <= 0x13)
            {
              uint64_t v30 = (llvm::raw_ostream *)v1;
              uint64_t v31 = "-byte Folded Reload\n";
              size_t v32 = 20;
              goto LABEL_42;
            }
            *(_DWORD *)(v75 + 16) = 174350703;
            *(_OWORD *)uint64_t v75 = *(_OWORD *)"-byte Folded Reload\n";
            uint64_t v74 = *(void *)(v1 + 32) + 20;
          }
          goto LABEL_112;
        }
        uint64_t SpillSize = llvm::MachineInstr::getSpillSize((llvm::MachineInstr *)v15, v27);
        if ((SpillSize & 0xFF00000000) != 0)
        {
          sub_1CD098D14((llvm::raw_ostream *)v1, SpillSize, 0, 0, 0);
          uint64_t v73 = *(void *)(v1 + 32);
          if ((unint64_t)(*(void *)(v1 + 24) - v73) <= 0xB)
          {
            uint64_t v30 = (llvm::raw_ostream *)v1;
            uint64_t v31 = "-byte Spill\n";
            size_t v32 = 12;
            goto LABEL_42;
          }
          *(_DWORD *)(v73 + ++*(_DWORD *)(result + 8) = 174877801;
          *(void *)uint64_t v73 = *(void *)"-byte Spill\n";
          uint64_t v74 = *(void *)(v1 + 32) + 12;
          goto LABEL_112;
        }
        Foldeduint64_t SpillSize = llvm::MachineInstr::getFoldedSpillSize((llvm::MachineInstr *)v15, v27);
        if ((FoldedSpillSize & 0xFF00000000) != 0 && FoldedSpillSize != 0)
        {
          if (FoldedSpillSize == -1)
          {
            uint64_t v132 = *(void **)(v1 + 32);
            if (*(void *)(v1 + 24) - (void)v132 <= 0x19uLL)
            {
              uint64_t v30 = (llvm::raw_ostream *)v1;
              uint64_t v31 = "Unknown-size Folded Spill\n";
              size_t v32 = 26;
              goto LABEL_42;
            }
            qmemcpy(v132, "Unknown-size Folded Spill\n", 26);
            uint64_t v74 = *(void *)(v1 + 32) + 26;
          }
          else
          {
            sub_1CD098D14((llvm::raw_ostream *)v1, FoldedSpillSize, 0, 0, 0);
            uint64_t v147 = *(void *)(v1 + 32);
            if ((unint64_t)(*(void *)(v1 + 24) - v147) <= 0x12)
            {
              uint64_t v30 = (llvm::raw_ostream *)v1;
              uint64_t v31 = "-byte Folded Spill\n";
              size_t v32 = 19;
              goto LABEL_42;
            }
            *(_DWORD *)(v147 + 15) = 174877801;
            *(_OWORD *)uint64_t v147 = *(_OWORD *)"-byte Folded Spill\n";
            uint64_t v74 = *(void *)(v1 + 32) + 19;
          }
LABEL_112:
          *(void *)(v1 + 32) = v74;
        }
LABEL_43:
        if (v15[46])
        {
          unsigned int v33 = *(void **)(v1 + 32);
          if (*(void *)(v1 + 24) - (void)v33 > 0xDuLL)
          {
            qmemcpy(v33, " Reload Reuse\n", 14);
            *(void *)(v1 + 32) += 14;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)v1, " Reload Reuse\n", 0xEuLL);
          }
        }
LABEL_46:
        switch(**((_WORD **)v15 + 2))
        {
          case 1:
          case 2:
            sub_1CD28B82C(a1, (uint64_t)v15);
            goto LABEL_263;
          case 3:
            sub_1CD27D914(a1, v15);
            goto LABEL_263;
          case 4:
          case 5:
          case 6:
            (*(void (**)(void, void, void))(**(void **)(a1 + 272) + 192))(*(void *)(a1 + 272), *(void *)(*((void *)v15 + 4) + 16), 0);
            goto LABEL_263;
          case 7:
            if (*(unsigned char *)(a1 + 504))
            {
              memset(v465, 0, sizeof(v465));
              *(_DWORD *)&v440[8] = 0;
              LOBYTE(v443) = 0;
              unsigned int v444 = 0;
              *(void *)int v440 = &unk_1F2646F30;
              int v446 = v465;
              LODWORD(v445) = 0;
              unint64_t v441 = 0;
              long long __dst = 0;
              *(void *)&v440[16] = 0;
              llvm::raw_ostream::write((llvm::raw_ostream *)v440, "kill:", 5uLL);
              uint64_t v51 = *((unsigned int *)v15 + 10);
              if (v51)
              {
                int v52 = (_DWORD *)*((void *)v15 + 4);
                int v53 = &v52[8 * v51];
                do
                {
                  int v54 = __dst;
                  if ((unint64_t)__dst >= v441)
                  {
                    llvm::raw_ostream::write((llvm::raw_ostream *)v440, 32);
                  }
                  else
                  {
                    long long __dst = (char *)__dst + 1;
                    unsigned char *v54 = 32;
                  }
                  if ((*v52 & 0x1000000) != 0) {
                    unsigned int v55 = "def ";
                  }
                  else {
                    unsigned int v55 = "killed ";
                  }
                  if ((*v52 & 0x1000000) != 0) {
                    size_t v56 = 4;
                  }
                  else {
                    size_t v56 = 7;
                  }
                  if (v56 <= v441 - (unint64_t)__dst)
                  {
                    memcpy(__dst, v55, v56);
                    long long __dst = (char *)__dst + v56;
                  }
                  else
                  {
                    llvm::raw_ostream::write((llvm::raw_ostream *)v440, v55, v56);
                  }
                  int v57 = v52[1];
                  uint64_t v58 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 280) + 16) + 176))(*(void *)(*(void *)(a1 + 280) + 16));
                  uint64_t v59 = operator new(0x28uLL);
                  *(void *)uint64_t v59 = &unk_1F26154E0;
                  v59[2] = v57;
                  *((void *)v59 + 2) = v58;
                  v59[6] = 0;
                  *((void *)v59 + 4) = 0;
                  *(void *)&long long v454 = v59;
                  v419();
                  if ((std::string *)v454 == &v453)
                  {
                    (*(void (**)(std::string *))(v453.__r_.__value_.__r.__words[0] + 32))(&v453);
                  }
                  else if ((void)v454)
                  {
                    (*(void (**)(void))(*(void *)v454 + 40))();
                  }
                  v52 += 8;
                }
                while (v52 != v53);
              }
              uint64_t v63 = *(void *)(a1 + 272);
              WORD4(v454) = 260;
              v453.__r_.__value_.__r.__words[0] = (std::string::size_type)v446;
              (*(void (**)(uint64_t, std::string *, uint64_t))(*(void *)v63 + 112))(v63, &v453, 1);
              (*(void (**)(void))(**(void **)(a1 + 272) + 152))(*(void *)(a1 + 272));
              *(void *)int v440 = &unk_1F2646B98;
              if (v445 == 1 && *(void *)&v440[16]) {
                MEMORY[0x1D25D9CB0](*(void *)&v440[16], 0x1000C8077774924);
              }
              if ((v465[23] & 0x80000000) != 0) {
                operator delete(*(void **)v465);
              }
            }
            goto LABEL_263;
          case 0xA:
            if (*(unsigned char *)(a1 + 504)) {
              (*(void (**)(uint64_t, char *))(*(void *)a1 + 336))(a1, v15);
            }
            goto LABEL_263;
          case 0xD:
          case 0xE:
            if (!*(unsigned char *)(a1 + 504)) {
              goto LABEL_263;
            }
            if (**((_WORD **)v15 + 2) == 13 && *((_DWORD *)v15 + 10) != 4) {
              goto LABEL_94;
            }
            *(void *)int v440 = &v441;
            *(_OWORD *)&v440[8] = xmmword_1CFAC3020;
            LODWORD(v453.__r_.__value_.__r.__words[1]) = 0;
            LOBYTE(v455) = 0;
            unsigned int v456 = 0;
            v453.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F2646FA8;
            int v458 = (uint64_t *)v440;
            LODWORD(v457) = 0;
            long long v454 = 0uLL;
            v453.__r_.__value_.__r.__words[2] = 0;
            llvm::raw_ostream::write((llvm::raw_ostream *)&v453, "DEBUG_VALUE: ", 0xDuLL);
            uint64_t v34 = *(void *)(*((void *)v15 + 4) + ((unint64_t)(**((_WORD **)v15 + 2) != 14) << 6) + 16);
            uint64_t v35 = *(void *)(v34 - 8 * *(unsigned int *)(v34 + 8));
            if (*(unsigned char *)v35 == 17)
            {
              uint64_t v36 = *(void *)(v35 - 8 * *(unsigned int *)(v35 + 8) + 16);
              if (v36)
              {
                uint64_t v37 = *(size_t **)(v36 + 8);
                size_t v40 = *v37;
                int v38 = v37 + 3;
                size_t v39 = v40;
                if (v40)
                {
                  if (v39 <= (void)v454 - *((void *)&v454 + 1))
                  {
                    memcpy(*((void **)&v454 + 1), v38, v39);
                    unsigned __int8 v41 = (unsigned char *)(*((void *)&v454 + 1) + v39);
                    *((void *)&v454 + 1) += v39;
                  }
                  else
                  {
                    llvm::raw_ostream::write((llvm::raw_ostream *)&v453, (const char *)v38, v39);
                    unsigned __int8 v41 = (unsigned char *)*((void *)&v454 + 1);
                  }
                  if ((unsigned char *)v454 == v41)
                  {
                    llvm::raw_ostream::write((llvm::raw_ostream *)&v453, ":", 1uLL);
                  }
                  else
                  {
                    *unsigned __int8 v41 = 58;
                    ++*((void *)&v454 + 1);
                  }
                }
              }
            }
            uint64_t v76 = *(void *)(v34 - 8 * *(unsigned int *)(v34 + 8) + 8);
            unint64_t v77 = (_DWORD *)*((void *)&v454 + 1);
            if (v76)
            {
              uint64_t v78 = *(size_t **)(v76 + 8);
              size_t v81 = *v78;
              uint64_t v79 = v78 + 3;
              size_t v80 = v81;
              if (v81 <= (void)v454 - *((void *)&v454 + 1))
              {
                if (v80)
                {
                  memcpy(*((void **)&v454 + 1), v79, v80);
                  unint64_t v77 = (_DWORD *)(*((void *)&v454 + 1) + v80);
                  *((void *)&v454 + 1) += v80;
                }
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&v453, (const char *)v79, v80);
                unint64_t v77 = (_DWORD *)*((void *)&v454 + 1);
              }
            }
            if ((void)v454 - (void)v77 > 3uLL)
            {
              _DWORD *v77 = 539835424;
              *((void *)&v454 + 1) += 4;
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)&v453, " <- ", 4uLL);
            }
            uint64_t v82 = 96;
            if (**((_WORD **)v15 + 2) == 14) {
              uint64_t v82 = 32;
            }
            unint64_t v83 = *(void *)(*((void *)v15 + 4) + v82 + 16);
            if (((*(void *)(v83 + 32) - *(void *)(v83 + 24)) & 0x7FFFFFFF8) != 0)
            {
              uint64_t v84 = (unsigned char *)*((void *)&v454 + 1);
              if (*((void *)&v454 + 1) >= (unint64_t)v454)
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&v453, 91);
              }
              else
              {
                ++*((void *)&v454 + 1);
                unsigned char *v84 = 91;
              }
              size_t v85 = *(uint64_t **)(v83 + 24);
              unint64_t v86 = *(uint64_t **)(v83 + 32);
              *(void *)int v465 = v85;
              if (v86 != v85)
              {
                char v87 = 0;
                do
                {
                  v429[0] = v85;
                  if (v87) {
                    size_t v88 = 2;
                  }
                  else {
                    size_t v88 = 0;
                  }
                  if (v88 <= (void)v454 - *((void *)&v454 + 1))
                  {
                    if (v87)
                    {
                      **((_WORD **)&v454 + 1) = 8236;
                      *((void *)&v454 + 1) += 2;
                    }
                  }
                  else
                  {
                    if (v87) {
                      uint64_t v89 = ", ";
                    }
                    else {
                      uint64_t v89 = 0;
                    }
                    llvm::raw_ostream::write((llvm::raw_ostream *)&v453, v89, v88);
                  }
                  uint64_t v91 = llvm::dwarf::OperationEncodingString((llvm::dwarf *)*(unsigned int *)v85);
                  size_t v92 = v90;
                  if (v90 <= (void)v454 - *((void *)&v454 + 1))
                  {
                    if (v90)
                    {
                      memcpy(*((void **)&v454 + 1), v91, v90);
                      *((void *)&v454 + 1) += v92;
                    }
                  }
                  else
                  {
                    llvm::raw_ostream::write((llvm::raw_ostream *)&v453, v91, v90);
                  }
                  if (llvm::DIExpression::ExprOperand::getSize(v429) != 1)
                  {
                    unint64_t v93 = 0;
                    unint64_t v83 = (unint64_t)(v85 + 1);
                    do
                    {
                      uint64_t v94 = (unsigned char *)*((void *)&v454 + 1);
                      if (*((void *)&v454 + 1) >= (unint64_t)v454)
                      {
                        llvm::raw_ostream::write((llvm::raw_ostream *)&v453, 32);
                      }
                      else
                      {
                        ++*((void *)&v454 + 1);
                        *uint64_t v94 = 32;
                      }
                      sub_1CD098D14((llvm::raw_ostream *)&v453, *(void *)(v83 + 8 * v93++), 0, 0, 0);
                      uint64_t v1 = v93;
                    }
                    while (v93 < llvm::DIExpression::ExprOperand::getSize(v429) - 1);
                  }
                  v85 += llvm::DIExpression::ExprOperand::getSize((uint64_t **)v465);
                  *(void *)int v465 = v85;
                  char v87 = 1;
                }
                while (v85 != v86);
              }
              if ((void)v454 - *((void *)&v454 + 1) > 1uLL)
              {
                **((_WORD **)&v454 + 1) = 8285;
                *((void *)&v454 + 1) += 2;
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&v453, "] ", 2uLL);
              }
            }
            int v417 = v11;
            unsigned int v95 = (unsigned __int8 *)*((void *)v15 + 4);
            if (**((_WORD **)v15 + 2) != 14)
            {
              uint64_t v100 = v95 + 32;
              while (1)
              {
LABEL_164:
                if (v95 != (unsigned __int8 *)(*((void *)v15 + 4)
                                              + ((unint64_t)(**((_WORD **)v15 + 2) == 14) << 6)))
                {
                  if ((void)v454 - *((void *)&v454 + 1) > 1uLL)
                  {
                    **((_WORD **)&v454 + 1) = 8236;
                    *((void *)&v454 + 1) += 2;
                  }
                  else
                  {
                    llvm::raw_ostream::write((llvm::raw_ostream *)&v453, ", ", 2uLL);
                  }
                }
                switch(*v95)
                {
                  case 1u:
                    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v453, *((void *)v95 + 2));
                    goto LABEL_231;
                  case 2u:
                    int v104 = (unsigned int *)(*((void *)v95 + 2) + 24);
                    unint64_t v83 = (unint64_t)&v466;
                    *(void *)int v465 = &v466;
                    *(_OWORD *)&v465[8] = xmmword_1CDB15B30;
                    llvm::APInt::toString(v104, v465, 0xAu, 0, 0);
                    llvm::raw_ostream::write((llvm::raw_ostream *)&v453, *(const char **)v465, *(size_t *)&v465[8]);
                    if (*(unsigned char ***)v465 != &v466) {
                      free(*(void **)v465);
                    }
                    goto LABEL_231;
                  case 3u:
                    unint64_t v83 = *((void *)v95 + 2);
                    uint64_t v111 = *(void *)(v83 + 32);
                    if ((_UNKNOWN *)v111 == &unk_1CFB2E344)
                    {
                      llvm::detail::DoubleAPFloat::DoubleAPFloat(&v465[8], (const llvm::detail::DoubleAPFloat *)(v83 + 32));
                    }
                    else
                    {
                      *(void *)&v465[8] = *(void *)(v83 + 32);
                      if ((*(_DWORD *)(v111 + 8) + 64) >= 0x80) {
                        operator new[]();
                      }
                      char v112 = *(unsigned char *)(v83 + 52);
                      int v113 = v112 & 7;
                      BYTE4(v466) = BYTE4(v466) & 0xF0 | v112 & 0xF;
                      LODWORD(v466) = *(_DWORD *)(v83 + 48);
                      BOOL v115 = (v112 & 6) != 0 && v113 != 3;
                      if (v113 == 1 || v115)
                      {
                        uint64_t v117 = *(unsigned int *)(*(void *)&v465[8] + 8);
                        uint64_t v118 = &v465[16];
                        if ((v117 - 64) <= 0xFFFFFF7F) {
                          uint64_t v118 = *(void **)&v465[16];
                        }
                        uint64_t v120 = *(uint64_t **)(v83 + 40);
                        v83 += 40;
                        uint64_t v119 = v120;
                        if ((*(_DWORD *)(*(void *)(v83 - 8) + 8) - 64) >= 0xFFFFFF80) {
                          uint64_t v119 = (uint64_t *)v83;
                        }
                        if (v117 <= 0xFFFFFFBF)
                        {
                          unint64_t v121 = (unint64_t)(v117 + 64) >> 6;
                          do
                          {
                            uint64_t v122 = *v119++;
                            *v118++ = v122;
                            --v121;
                          }
                          while (v121);
                        }
                      }
                    }
                    if ((*(unsigned char *)(**((void **)v95 + 2) + 8) & 0xFC) != 0)
                    {
                      llvm::APFloat::convert((uint64_t)v465, &unk_1CFB2E31C, 1, v429);
                      uint64_t v123 = *((void *)&v454 + 1);
                      if ((void)v454 - *((void *)&v454 + 1) > 0xDuLL)
                      {
                        **((void **)&v454 + 1) = *(void *)"(long double) ";
                        *(void *)(v123 + 6) = *(void *)"double) ";
                        *((void *)&v454 + 1) += 14;
                      }
                      else
                      {
                        llvm::raw_ostream::write((llvm::raw_ostream *)&v453, "(long double) ", 0xEuLL);
                      }
                    }
                    double v124 = llvm::APFloat::convertToDouble((llvm::APFloat *)v465);
                    llvm::write_double((llvm::raw_ostream *)&v453, 0, 0, 0, v124);
                    if (*(_UNKNOWN **)&v465[8] == &unk_1CFB2E344)
                    {
                      sub_1CB845718((uint64_t *)&v465[16]);
                    }
                    else if ((*(_DWORD *)(*(void *)&v465[8] + 8) - 64) <= 0xFFFFFF7F {
                           && *(void *)&v465[16])
                    }
                    {
                      MEMORY[0x1D25D9CB0](*(void *)&v465[16], 0x1000C8000313F17);
                    }
                    goto LABEL_231;
                  case 4u:
                  case 6u:
                    __break(1u);
                    goto LABEL_609;
                  case 7u:
                    uint64_t v105 = *((void *)&v454 + 1);
                    if ((void)v454 - *((void *)&v454 + 1) > 0xDuLL)
                    {
                      **((void **)&v454 + 1) = *(void *)"!target-index(";
                      *(void *)(v105 + 6) = *(void *)"t-index(";
                      *((void *)&v454 + 1) += 14;
                    }
                    else
                    {
                      llvm::raw_ostream::write((llvm::raw_ostream *)&v453, "!target-index(", 0xEuLL);
                    }
                    unint64_t v106 = *((int *)v95 + 4);
                    if ((v106 & 0x80000000) != 0)
                    {
                      unint64_t v106 = -(uint64_t)v106;
                      int v107 = 1;
                    }
                    else
                    {
                      int v107 = 0;
                    }
                    sub_1CD098D14((llvm::raw_ostream *)&v453, v106, 0, 0, v107);
                    if ((void)v454 == *((void *)&v454 + 1))
                    {
                      llvm::raw_ostream::write((llvm::raw_ostream *)&v453, ",", 1uLL);
                    }
                    else
                    {
                      **((unsigned char **)&v454 + 1) = 44;
                      ++*((void *)&v454 + 1);
                    }
                    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v453, *((unsigned int *)v95 + 1) | ((unint64_t)*((unsigned int *)v95 + 6) << 32));
                    if ((void)v454 == *((void *)&v454 + 1))
                    {
                      llvm::raw_ostream::write((llvm::raw_ostream *)&v453, ")", 1uLL);
                    }
                    else
                    {
                      **((unsigned char **)&v454 + 1) = 41;
                      ++*((void *)&v454 + 1);
                    }
                    uint64_t v108 = *(void *)(a1 + 272);
                    uint64_t v110 = *v458;
                    uint64_t v109 = v458[1];
                    __int16 v467 = 261;
                    *(void *)int v465 = v110;
                    *(void *)&v465[8] = v109;
                    (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)v108 + 128))(v108, v465, 1);
                    goto LABEL_231;
                  default:
                    LODWORD(v429[0]) = 0;
                    unint64_t v83 = *v95;
                    if (*v95)
                    {
                      uint64_t v101 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 280) + 16) + 112))(*(void *)(*(void *)(a1 + 280) + 16));
                      uint64_t v1 = (*(uint64_t (**)(uint64_t, void, void, uint64_t **))(*(void *)v101 + 232))(v101, *(void *)(a1 + 280), *((unsigned int *)v95 + 4), v429);
                      if (!LODWORD(v429[0])) {
                        goto LABEL_215;
                      }
                    }
                    else
                    {
                      v1 &= 0xFFFFFFFFFFFFFF00;
                      LODWORD(v429[0]) = *((_DWORD *)v95 + 1);
                      if (!LODWORD(v429[0]))
                      {
LABEL_215:
                        __int16 v125 = (_DWORD *)*((void *)&v454 + 1);
                        if ((void)v454 - *((void *)&v454 + 1) > 4uLL)
                        {
                          *(unsigned char *)(*((void *)&v454 + 1) + 4) = 102;
                          *__int16 v125 = 1701080693;
                          *((void *)&v454 + 1) += 5;
                        }
                        else
                        {
                          llvm::raw_ostream::write((llvm::raw_ostream *)&v453, "undef", 5uLL);
                        }
                        goto LABEL_231;
                      }
                    }
                    if (**((_WORD **)v15 + 2) == 13
                      && (uint64_t v102 = *((void *)v15 + 4), *(unsigned char *)(v102 + 32) == 1)
                      && !*(unsigned char *)v102)
                    {
                      uint64_t v1 = *(void *)(v102 + 48);
                    }
                    else if (!v83)
                    {
                      unint64_t v83 = 1;
                      goto LABEL_219;
                    }
                    unint64_t v103 = (unsigned char *)*((void *)&v454 + 1);
                    if (*((void *)&v454 + 1) >= (unint64_t)v454)
                    {
                      llvm::raw_ostream::write((llvm::raw_ostream *)&v453, 91);
                      unint64_t v83 = 0;
                    }
                    else
                    {
                      unint64_t v83 = 0;
                      ++*((void *)&v454 + 1);
                      *unint64_t v103 = 91;
                    }
LABEL_219:
                    uint64_t v11 = LODWORD(v429[0]);
                    uint64_t v126 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 280) + 16) + 176))(*(void *)(*(void *)(a1 + 280) + 16));
                    uint64_t v127 = operator new(0x28uLL);
                    *(void *)uint64_t v127 = &unk_1F26154E0;
                    void v127[2] = v11;
                    *((void *)v127 + 2) = v126;
                    v127[6] = 0;
                    *((void *)v127 + 4) = 0;
                    int v466 = v127;
                    v419();
                    if (v466 == v465)
                    {
                      (*(void (**)(unsigned char *))(*(void *)v465 + 32))(v465);
                      if (v83) {
                        goto LABEL_231;
                      }
LABEL_225:
                      uint64_t v128 = (unsigned char *)*((void *)&v454 + 1);
                      if (*((void *)&v454 + 1) >= (unint64_t)v454)
                      {
                        llvm::raw_ostream::write((llvm::raw_ostream *)&v453, 43);
                      }
                      else
                      {
                        ++*((void *)&v454 + 1);
                        *uint64_t v128 = 43;
                      }
                      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v453, v1);
                      uint64_t v129 = (unsigned char *)*((void *)&v454 + 1);
                      if (*((void *)&v454 + 1) >= (unint64_t)v454)
                      {
                        llvm::raw_ostream::write((llvm::raw_ostream *)&v453, 93);
                      }
                      else
                      {
                        ++*((void *)&v454 + 1);
                        unsigned char *v129 = 93;
                      }
                      goto LABEL_231;
                    }
                    if (v466) {
                      (*(void (**)(void))(*(void *)v466 + 40))();
                    }
                    if ((v83 & 1) == 0) {
                      goto LABEL_225;
                    }
LABEL_231:
                    v95 += 32;
                    if (v95 == v100) {
                      goto LABEL_159;
                    }
                    break;
                }
              }
            }
            uint64_t v96 = *((unsigned int *)v15 + 10);
            if (v96 != 2)
            {
              uint64_t v100 = &v95[32 * v96];
              v95 += 64;
              goto LABEL_164;
            }
LABEL_159:
            uint64_t v97 = *(void *)(a1 + 272);
            uint64_t v99 = *v458;
            uint64_t v98 = v458[1];
            __int16 v467 = 261;
            *(void *)int v465 = v99;
            *(void *)&v465[8] = v98;
            (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)v97 + 128))(v97, v465, 1);
            v453.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F2646B98;
            if (v457 == 1 && v453.__r_.__value_.__r.__words[2]) {
              MEMORY[0x1D25D9CB0](v453.__r_.__value_.__r.__words[2], 0x1000C8077774924);
            }
            int v62 = *(void **)v440;
            LODWORD(v11) = v417;
            if (*(unint64_t **)v440 != &v441) {
LABEL_262:
            }
              free(v62);
LABEL_263:
            unint64_t v141 = *((void *)v15 + 6);
            if (v141 >= 8)
            {
              uint64_t v142 = (int *)(v141 & 0xFFFFFFFFFFFFFFF8);
              BOOL v143 = (*((void *)v15 + 6) & 7) != 2 || v142 == 0;
              if (!v143
                || (*((void *)v15 + 6) & 7) == 3
                && v142
                && *((unsigned char *)v142 + 5)
                && *(void *)&v142[2 * *v142 + 2 + 2 * *((unsigned __int8 *)v142 + 4)])
              {
                (*(void (**)(void))(**(void **)(a1 + 272) + 192))(*(void *)(a1 + 272));
              }
            }
            uint64_t v144 = *(uint64_t **)(a1 + 528);
            uint64_t v145 = *(uint64_t **)(a1 + 536);
            if (v144 != v145)
            {
              do
              {
                uint64_t v146 = *v144;
                v144 += 9;
                (*(void (**)(uint64_t))(*(void *)v146 + 104))(v146);
              }
              while (v144 != v145);
              if (!v15) {
                goto LABEL_280;
              }
            }
            if ((*v15 & 4) == 0)
            {
LABEL_280:
              while ((*((_WORD *)v15 + 22) & 8) != 0)
                uint64_t v15 = (char *)*((void *)v15 + 1);
            }
            uint64_t v15 = (char *)*((void *)v15 + 1);
            uint64_t v14 = v420;
            break;
          case 0xF:
          case 0x10:
            goto LABEL_263;
          case 0x11:
            if (!*(unsigned char *)(a1 + 504)) {
              goto LABEL_263;
            }
            if (*((_DWORD *)v15 + 10) != 1)
            {
LABEL_94:
              (*(void (**)(uint64_t, char *))(*(void *)a1 + 280))(a1, v15);
              goto LABEL_263;
            }
            *(void *)int v440 = &v441;
            *(_OWORD *)&v440[8] = xmmword_1CFAC3020;
            LODWORD(v453.__r_.__value_.__r.__words[1]) = 0;
            LOBYTE(v455) = 0;
            unsigned int v456 = 0;
            v453.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F2646FA8;
            int v458 = (uint64_t *)v440;
            LODWORD(v457) = 0;
            long long v454 = 0uLL;
            v453.__r_.__value_.__r.__words[2] = 0;
            llvm::raw_ostream::write((llvm::raw_ostream *)&v453, "DEBUG_LABEL: ", 0xDuLL);
            uint64_t v42 = *(void *)(*((void *)v15 + 4) + 16);
            for (uint64_t i = *(unsigned __int8 **)(v42 - 8 * *(unsigned int *)(v42 + 8));
                  ;
                  uint64_t i = *(unsigned __int8 **)&i[-8 * *((unsigned int *)i + 2) + 8])
            {
              int v44 = *i;
              if (v44 != 19) {
                break;
              }
            }
            if (v44 == 17)
            {
              uint64_t v66 = *(void *)&i[-8 * *((unsigned int *)i + 2) + 16];
              if (v66)
              {
                uint64_t v67 = *(size_t **)(v66 + 8);
                size_t v70 = *v67;
                BOOL v68 = v67 + 3;
                size_t v69 = v70;
                if (v70)
                {
                  if (v69 <= (void)v454 - *((void *)&v454 + 1))
                  {
                    memcpy(*((void **)&v454 + 1), v68, v69);
                    int v71 = (unsigned char *)(*((void *)&v454 + 1) + v69);
                    *((void *)&v454 + 1) += v69;
                  }
                  else
                  {
                    llvm::raw_ostream::write((llvm::raw_ostream *)&v453, (const char *)v68, v69);
                    int v71 = (unsigned char *)*((void *)&v454 + 1);
                  }
                  if ((unsigned char *)v454 == v71)
                  {
                    llvm::raw_ostream::write((llvm::raw_ostream *)&v453, ":", 1uLL);
                  }
                  else
                  {
                    *int v71 = 58;
                    ++*((void *)&v454 + 1);
                  }
                }
              }
            }
            uint64_t v133 = *(void *)(v42 - 8 * *(unsigned int *)(v42 + 8) + 8);
            if (v133)
            {
              uint64_t v134 = *(size_t **)(v133 + 8);
              size_t v137 = *v134;
              uint64_t v135 = v134 + 3;
              size_t v136 = v137;
              if (v137 <= (void)v454 - *((void *)&v454 + 1))
              {
                if (v136)
                {
                  memcpy(*((void **)&v454 + 1), v135, v136);
                  *((void *)&v454 + 1) += v136;
                }
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&v453, (const char *)v135, v136);
              }
            }
            uint64_t v138 = *(void *)(a1 + 272);
            uint64_t v140 = *v458;
            uint64_t v139 = v458[1];
            __int16 v467 = 261;
            *(void *)int v465 = v140;
            *(void *)&v465[8] = v139;
            (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)v138 + 128))(v138, v465, 1);
            v453.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F2646B98;
            if (v457 == 1 && v453.__r_.__value_.__r.__words[2]) {
              MEMORY[0x1D25D9CB0](v453.__r_.__value_.__r.__words[2], 0x1000C8077774924);
            }
            int v62 = *(void **)v440;
            if (*(unint64_t **)v440 != &v441) {
              goto LABEL_262;
            }
            goto LABEL_263;
          case 0x17:
            sub_1CD89E390(a1, (uint64_t)v15);
            goto LABEL_263;
          case 0x18:
            if (*(unsigned char *)(a1 + 504))
            {
              uint64_t v60 = *(void *)(a1 + 272);
              *(void *)int v440 = "ARITH_FENCE";
              LOWORD(__dst) = 259;
              (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)v60 + 128))(v60, v440, 1);
            }
            goto LABEL_263;
          case 0x20:
            uint64_t v45 = *((void *)v15 + 4);
            uint64_t v1 = *(void *)(v45 + 16);
            uint64_t v46 = *(int *)(v45 + 48);
            uint64_t v47 = *(void *)(a1 + 264);
            uint64_t v48 = *(void *)(a1 + 272);
            *(void *)(v47 + 272) += 24;
            uint64_t v49 = *(void *)(v47 + 192);
            if (((v49 + 7) & 0xFFFFFFFFFFFFFFF8) - v49 + 24 > *(void *)(v47 + 200) - v49)
            {
              unsigned int v148 = *(_DWORD *)(v47 + 216) >> 7;
              if (v148 >= 0x1E) {
                LOBYTE(v14++*(_DWORD *)(result + 8) = 30;
              }
              uint64_t v414 = 4096 << v148;
              unint64_t v50 = (unint64_t)operator new(4096 << v148, (std::align_val_t)8uLL);
              unint64_t v149 = *(unsigned int *)(v47 + 216);
              if (v149 >= *(unsigned int *)(v47 + 220)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*(void *)(v47 + 208) + 8 * v149) = v50;
              ++*(_DWORD *)(v47 + 216);
              *(void *)(v47 + 200) = v50 + v414;
            }
            else
            {
              unint64_t v50 = (v49 + 7) & 0xFFFFFFFFFFFFFFF8;
            }
            *(void *)(v47 + 192) = v50 + 24;
            *(unsigned char *)unint64_t v50 = 1;
            *(_DWORD *)(v50 + 1) = *(unsigned __int8 *)(v50 + 4) << 24;
            *(void *)(v50 + ++*(_DWORD *)(result + 8) = 0;
            *(void *)(v50 + 16) = v46;
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v48 + 280))(v48, v1, v50);
            goto LABEL_263;
          default:
            (*(void (**)(uint64_t, char *))(*(void *)a1 + 280))(a1, v15);
            if (!v416) {
              goto LABEL_263;
            }
            *(void *)int v440 = 0;
            *(void *)&v440[8] = 0;
            *(void *)&v440[16] = &__dst;
            unint64_t v441 = 0x800000000;
            v450[64] = 0;
            *(_DWORD *)int v440 = **((unsigned __int16 **)v15 + 2);
            *(void *)int v465 = (*(uint64_t (**)(void, unsigned char *))(**(void **)(a1 + 272) + 184))(*(void *)(a1 + 272), v440);
            *(void *)&v465[8] = v61;
            *(_DWORD *)&v465[16] = 0;
            sub_1CD69C76C((uint64_t)&v437, (const void **)v465, &v465[16], (uint64_t)&v453);
            ++*(_DWORD *)(v453.__r_.__value_.__r.__words[0] + 16);
            int v62 = *(void **)&v440[16];
            if (*(void ***)&v440[16] == &__dst) {
              goto LABEL_263;
            }
            goto LABEL_262;
        }
      }
      uint64_t v150 = v418;
      if (*(_DWORD *)(*(void *)(a1 + 280) + 640) == 2
        || *(unsigned char *)(*(void *)(a1 + 256) + 363) && *((unsigned char *)v418 + 201))
      {
        uint64_t v155 = *(void *)(a1 + 272);
        Enduint64_t Symbol = llvm::MachineBasicBlock::getEndSymbol(v418);
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)v155 + 192))(v155, EndSymbol, 0);
      }
      if (*((unsigned char *)v418 + 201)
        && *((void *)v418 + 24) != *(void *)(*(void *)(*(void *)(a1 + 280) + 328) + 192))
      {
        if (*(unsigned char *)(*(void *)(a1 + 256) + 363))
        {
          uint64_t v174 = llvm::MachineBasicBlock::getEndSymbol(v418);
          uint64_t v175 = *(void *)(a1 + 264);
          *(void *)(v175 + 272) += 24;
          uint64_t v176 = *(void *)(v175 + 192);
          if (((v176 + 7) & 0xFFFFFFFFFFFFFFF8) - v176 + 24 > *(void *)(v175 + 200) - v176)
          {
            unsigned int v205 = *(_DWORD *)(v175 + 216) >> 7;
            if (v205 >= 0x1E) {
              LOBYTE(v205) = 30;
            }
            uint64_t v206 = 4096 << v205;
            unint64_t v177 = (unint64_t)operator new(4096 << v205, (std::align_val_t)8uLL);
            unint64_t v207 = *(unsigned int *)(v175 + 216);
            if (v207 >= *(unsigned int *)(v175 + 220)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(v175 + 208) + 8 * v207) = v177;
            ++*(_DWORD *)(v175 + 216);
            *(void *)(v175 + 200) = v177 + v206;
          }
          else
          {
            unint64_t v177 = (v176 + 7) & 0xFFFFFFFFFFFFFFF8;
          }
          *(void *)(v175 + 192) = v177 + 24;
          int v178 = *(unsigned __int8 *)(*(void *)(v175 + 152) + 18) << 16;
          *(unsigned char *)unint64_t v177 = 2;
          *(_DWORD *)(v177 + 1) = v178 | (*(unsigned __int8 *)(v177 + 4) << 24);
          *(void *)(v177 + ++*(_DWORD *)(result + 8) = 0;
          *(void *)(v177 + 16) = v174;
          uint64_t v179 = *(void *)(a1 + 480);
          uint64_t v180 = *(void *)(a1 + 264);
          *(void *)(v180 + 272) += 24;
          uint64_t v181 = *(void *)(v180 + 192);
          if (((v181 + 7) & 0xFFFFFFFFFFFFFFF8) - v181 + 24 > *(void *)(v180 + 200) - v181)
          {
            unsigned int v208 = *(_DWORD *)(v180 + 216) >> 7;
            if (v208 >= 0x1E) {
              LOBYTE(v20++*(_DWORD *)(result + 8) = 30;
            }
            uint64_t v209 = 4096 << v208;
            uint64_t v1 = (uint64_t)operator new(4096 << v208, (std::align_val_t)8uLL);
            unint64_t v210 = *(unsigned int *)(v180 + 216);
            if (v210 >= *(unsigned int *)(v180 + 220)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(v180 + 208) + 8 * v210) = v1;
            ++*(_DWORD *)(v180 + 216);
            *(void *)(v180 + 200) = v1 + v209;
          }
          else
          {
            uint64_t v1 = (v181 + 7) & 0xFFFFFFFFFFFFFFF8;
          }
          *(void *)(v180 + 192) = v1 + 24;
          int v182 = *(unsigned __int8 *)(*(void *)(v180 + 152) + 18) << 16;
          *(unsigned char *)uint64_t v1 = 2;
          *(_DWORD *)(v1 + 1) = v182 | (*(unsigned __int8 *)(v1 + 4) << 24);
          *(void *)(v1 + ++*(_DWORD *)(result + 8) = 0;
          *(void *)(v1 + 16) = v179;
          uint64_t v183 = *(void *)(a1 + 264);
          *(void *)(v183 + 272) += 32;
          uint64_t v184 = *(void *)(v183 + 192);
          if (((v184 + 7) & 0xFFFFFFFFFFFFFFF8) - v184 + 32 > *(void *)(v183 + 200) - v184)
          {
            unsigned int v211 = *(_DWORD *)(v183 + 216) >> 7;
            if (v211 >= 0x1E) {
              LOBYTE(v211) = 30;
            }
            uint64_t v212 = 4096 << v211;
            unint64_t v185 = (unint64_t)operator new(4096 << v211, (std::align_val_t)8uLL);
            unint64_t v213 = *(unsigned int *)(v183 + 216);
            if (v213 >= *(unsigned int *)(v183 + 220)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(v183 + 208) + 8 * v213) = v185;
            ++*(_DWORD *)(v183 + 216);
            *(void *)(v183 + 200) = v185 + v212;
          }
          else
          {
            unint64_t v185 = (v184 + 7) & 0xFFFFFFFFFFFFFFF8;
          }
          *(void *)(v183 + 192) = v185 + 32;
          *(unsigned char *)unint64_t v185 = 0;
          *(_DWORD *)(v185 + 1) = (*(unsigned __int8 *)(v185 + 4) << 24) | 0x12;
          *(void *)(v185 + ++*(_DWORD *)(result + 8) = 0;
          *(void *)(v185 + 16) = v177;
          *(void *)(v185 + 24) = v1;
          (*(void (**)(void))(**(void **)(a1 + 272) + 424))();
          uint64_t v150 = v418;
        }
        uint64_t v186 = *(void *)(a1 + 480);
        uint64_t v187 = llvm::MachineBasicBlock::getEndSymbol(v150);
        *(_DWORD *)int v440 = *((_DWORD *)v150 + 49) - *((_DWORD *)v150 + 48) + 2;
        int v188 = (void *)sub_1CD2817E4(a1 + 352, (int *)v440);
        *int v188 = v186;
        v188[1] = v187;
      }
      (*(void (**)(uint64_t, llvm::MachineBasicBlock *))(*(void *)a1 + 272))(a1, v150);
      if (v416 && v420 != (char *)(*(void *)v420 & 0xFFFFFFFFFFFFFFF8))
      {
        llvm::DiagnosticLocation::DiagnosticLocation(v440, (const llvm::DebugLoc *)(*((void *)v150 + 7) + 56));
        std::string::size_type v151 = **((void **)v150 + 4);
        LODWORD(v453.__r_.__value_.__r.__words[1]) = 17;
        v453.__r_.__value_.__s.__data_[12] = 2;
        v453.__r_.__value_.__r.__words[2] = v151;
        long long v454 = *(_OWORD *)v440;
        uint64_t v455 = "asm-printer";
        unsigned int v456 = "InstructionMix";
        uint64_t v457 = 14;
        LOBYTE(v45++*(_DWORD *)(result + 8) = 0;
        char v459 = 0;
        uint64_t v460 = v462;
        uint64_t v461 = 0x400000000;
        v462[256] = 0;
        int v463 = -1;
        int v464 = v150;
        v453.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F260E0D8;
        *(void *)int v440 = &v440[16];
        *(void *)&v440[8] = 0x8000000000;
        uint64_t v152 = &v437[3 * v439];
        if (v438)
        {
          if (v439)
          {
            uint64_t v153 = 24 * v439;
            uint64_t v154 = v437;
            while (*v154 >= 0xFFFFFFFFFFFFFFFELL)
            {
              v154 += 3;
              v153 -= 24;
              if (!v153) {
                goto LABEL_316;
              }
            }
          }
          else
          {
            uint64_t v154 = v437;
          }
        }
        else
        {
LABEL_316:
          uint64_t v154 = &v437[3 * v439];
        }
        uint64_t v157 = &v437[3 * v439];
        size_t v158 = &v440[16];
        uint64_t v159 = (size_t *)&v440[16];
        if (v154 == v157) {
          goto LABEL_328;
        }
        do
        {
          sub_1CD89E420((unint64_t)v440, (long long *)v154, (int *)v154 + 4);
          uint64_t v160 = v154 + 3;
          while (v160 != v152)
          {
            unint64_t v161 = *v160;
            v160 += 3;
            if (v161 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              uint64_t v154 = v160 - 3;
              goto LABEL_325;
            }
          }
          uint64_t v154 = v152;
LABEL_325:
          ;
        }
        while (v154 != v157);
        size_t v158 = *(unsigned char **)v440;
        uint64_t v159 = (size_t *)(*(void *)v440 + 24 * *(unsigned int *)&v440[8]);
        if (!*(_DWORD *)&v440[8]) {
LABEL_328:
        }
          uint64_t v162 = 0;
        else {
          uint64_t v162 = (char *)(126 - 2 * __clz(*(unsigned int *)&v440[8]));
        }
        sub_1CD288C14((uint64_t)v158, v159, v162, 1);
        *(void *)int v465 = "BasicBlock: ";
        *(void *)&v465[8] = 12;
        sub_1CC59ADEC((uint64_t *)&v460, (uint64_t)v465);
        uint64_t v163 = (uint64_t ***)*((void *)v418 + 2);
        if (v163)
        {
          if ((*((unsigned char *)v163 + 23) & 0x10) != 0)
          {
            uint64_t v164 = ***v163;
            uint64_t v165 = *(void *)(v164 + 152);
            uint64_t v166 = *(unsigned int *)(v164 + 168);
            if (!v166) {
              goto LABEL_347;
            }
            LODWORD(v167) = (v166 - 1) & ((v163 >> 4) ^ (v163 >> 9));
            size_t v168 = (uint64_t ****)(v165 + 16 * v167);
            uint64_t v169 = *v168;
            if (*v168 != v163)
            {
              int v170 = 1;
              while (v169 != (uint64_t ***)-4096)
              {
                int v171 = v167 + v170++;
                uint64_t v167 = v171 & (v166 - 1);
                uint64_t v169 = *(uint64_t ****)(v165 + 16 * v167);
                if (v169 == v163)
                {
                  size_t v168 = (uint64_t ****)(v165 + 16 * v167);
                  goto LABEL_348;
                }
              }
LABEL_347:
              size_t v168 = (uint64_t ****)(v165 + 16 * v166);
            }
LABEL_348:
            uint64_t v189 = v168[1];
            size_t v190 = (size_t)*v189;
            int v173 = (char *)(v189 + 2);
            size_t v172 = v190;
          }
          else
          {
            size_t v172 = 0;
            int v173 = &byte_1CFBCE98E;
          }
        }
        else
        {
          size_t v172 = 0;
          int v173 = (char *)&unk_1CFB6806A;
        }
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument(v433, "BasicBlock", 0xAuLL, v173, v172);
        uint64_t v191 = sub_1CC34D4D8((uint64_t)&v453, (uint64_t)v433);
        *(void *)int v465 = "\n";
        *(void *)&v465[8] = 1;
        sub_1CC59ADEC((uint64_t *)(v191 + 80), (uint64_t)v465);
        if (v436 < 0) {
          operator delete(__p);
        }
        if (v434 < 0) {
          operator delete(v433[0]);
        }
        if (*(_DWORD *)&v440[8])
        {
          uint64_t v1 = *(void *)v440;
          uint64_t v192 = *(void *)v440 + 24 * *(unsigned int *)&v440[8];
          do
          {
            v429[0] = (uint64_t *)"INST_";
            __int16 v430 = 259;
            uint64_t v193 = sub_1CD5A69D0((void *)v1, " \t\n\v\f\r", 6);
            llvm::getToken(v193, v194, " \t\n\v\f\r", 6, v428);
            char v195 = v430;
            if ((_BYTE)v430)
            {
              if (v430 == 1)
              {
                *(void *)int v465 = v428[0];
                char v196 = 1;
                char v195 = 5;
                unint64_t v197 = &v465[8];
              }
              else
              {
                if (HIBYTE(v430) != 1) {
                  char v195 = 2;
                }
                int v198 = v429;
                if (HIBYTE(v430) == 1) {
                  int v198 = (uint64_t **)v429[0];
                }
                *(void *)int v465 = v198;
                *(uint64_t **)&v465[8] = v429[1];
                *(void *)&v465[16] = v428[0];
                char v196 = 5;
                unint64_t v197 = &v466;
              }
              *unint64_t v197 = v428[1];
            }
            else
            {
              char v196 = 1;
            }
            LOBYTE(v467) = v195;
            HIBYTE(v467) = v196;
            llvm::Twine::str((llvm::Twine *)v465, v431);
            *(_OWORD *)int v465 = *(_OWORD *)v1;
            sub_1CC59ADEC((uint64_t *)&v460, (uint64_t)v465);
            *(void *)int v465 = ": ";
            *(void *)&v465[8] = 2;
            sub_1CC59ADEC((uint64_t *)&v460, (uint64_t)v465);
            if (v432 >= 0) {
              uint64_t v199 = v431;
            }
            else {
              uint64_t v199 = (void **)v431[0];
            }
            if (v432 >= 0) {
              std::string::size_type v200 = v432 & 0x7F;
            }
            else {
              std::string::size_type v200 = (std::string::size_type)v431[1];
            }
            llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v425, (const std::string::value_type *)v199, v200, *(_DWORD *)(v1 + 16));
            uint64_t v201 = sub_1CC34D4D8((uint64_t)&v453, (uint64_t)&v425);
            *(void *)int v465 = "\n";
            *(void *)&v465[8] = 1;
            sub_1CC59ADEC((uint64_t *)(v201 + 80), (uint64_t)v465);
            if (v427 < 0) {
              operator delete(v426);
            }
            if (SHIBYTE(v425.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v425.__r_.__value_.__l.__data_);
            }
            if (v432 < 0) {
              operator delete(v431[0]);
            }
            v1 += 24;
          }
          while (v1 != v192);
        }
        llvm::MachineOptimizationRemarkEmitter::emit(*(uint64_t *****)(a1 + 312), (llvm::DiagnosticInfoOptimizationBase *)&v453);
        if (*(unsigned char **)v440 != &v440[16]) {
          free(*(void **)v440);
        }
        v453.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F2616800;
        uint64_t v202 = (char *)v460;
        uint64_t v150 = v418;
        if (v461)
        {
          unint64_t v203 = (unint64_t)v461 << 6;
          do
          {
            unsigned int v204 = (void **)&v202[v203];
            if (v202[v203 - 17] < 0) {
              operator delete(*(v204 - 5));
            }
            if (*((char *)v204 - 41) < 0) {
              operator delete(*(v204 - 8));
            }
            v203 -= 64;
          }
          while (v203);
          uint64_t v202 = (char *)v460;
        }
        if (v202 != v462) {
          free(v202);
        }
      }
      MEMORY[0x1D25D9CD0](v437, 8);
      uint64_t v9 = (char *)*((void *)v150 + 1);
      if (v9 == v415)
      {
        __int16 v8 = *(void **)(a1 + 280);
        __int16 v10 = dword_1CD912700 + 30976;
        goto LABEL_409;
      }
    }
  }
  int v12 = 0;
  LOBYTE(v11) = 0;
LABEL_409:
  uint64_t v214 = (uint64_t ***)*v8;
  if ((*(unsigned char *)(*v8 + 23) & 0x20) == 0) {
    goto LABEL_425;
  }
  uint64_t v215 = ***v214;
  *(void *)int v440 = v214;
  int v216 = *(_DWORD *)(v215 + 2496);
  if (v216)
  {
    uint64_t v217 = *(void *)(v215 + 2480);
    int v218 = v216 - 1;
    unsigned int v219 = v218 & ((v214 >> 4) ^ (v214 >> 9));
    uint64_t v220 = (uint64_t ****)(v217 + 40 * v219);
    uint64_t v221 = *v220;
    if (*v220 == v214) {
      goto LABEL_420;
    }
    uint64_t v222 = 0;
    int v223 = 1;
    while (v221 != (uint64_t ***)-4096)
    {
      if (v222) {
        BOOL v224 = 0;
      }
      else {
        BOOL v224 = v221 == (uint64_t ***)-8192;
      }
      if (v224) {
        uint64_t v222 = v220;
      }
      unsigned int v225 = v219 + v223++;
      unsigned int v219 = v225 & v218;
      uint64_t v220 = (uint64_t ****)(v217 + 40 * v219);
      uint64_t v221 = *v220;
      if (*v220 == v214) {
        goto LABEL_420;
      }
    }
    if (v222) {
      unint64_t v327 = v222;
    }
    else {
      unint64_t v327 = v220;
    }
  }
  else
  {
    unint64_t v327 = 0;
  }
  uint64_t v220 = (uint64_t ****)sub_1CC609054(v215 + 2480, (uint64_t)v440, (uint64_t *)v440, v327);
  int v328 = *(uint64_t ****)v440;
  v220[3] = 0;
  v220[4] = 0;
  llvm::GlobalValue *v220 = v328;
  v220[1] = (uint64_t ***)(v220 + 3);
  v220[2] = (uint64_t ***)0x100000000;
LABEL_420:
  uint64_t v226 = *((unsigned int *)v220 + 4);
  if (!v226)
  {
LABEL_425:
    LODWORD(v229) = 0;
LABEL_426:
    unint64_t v230 = 0;
    goto LABEL_427;
  }
  int v227 = v220[1] + 1;
  uint64_t v228 = 16 * v226;
  LODWORD(v229) = 0;
  while (*((_DWORD *)v227 - 2))
  {
    unint64_t v230 = 0;
    v227 += 2;
    v228 -= 16;
    if (!v228) {
      goto LABEL_427;
    }
  }
  uint64_t v229 = *v227;
  if (!*v227) {
    goto LABEL_426;
  }
  unint64_t v230 = *v227;
  if (*(unsigned char *)v229 != 15) {
    unint64_t v230 = *(void *)(v229 - 8 * *(unsigned int *)(v229 + 8));
  }
  LODWORD(v229) = *(_DWORD *)(v229 + 28);
LABEL_427:
  uint64_t v231 = *(void *)(*(void *)(a1 + 280) + 328);
  uint64_t v232 = **(void **)(v231 + 32);
  *(_DWORD *)&v440[8] = 17;
  v440[12] = 2;
  *(void *)&v440[16] = v232;
  unint64_t v441 = v230;
  long long __dst = (void *)v229;
  unint64_t v420 = (char *)&unk_1F2616800;
  uint64_t v443 = "asm-printer";
  unsigned int v444 = "InstructionCount";
  uint64_t v445 = 16;
  LOBYTE(v446) = 0;
  char v447 = 0;
  uint64_t v15 = v450;
  size_t v448 = v450;
  uint64_t v449 = *((void *)v10 + 126);
  v450[256] = 0;
  int v451 = -1;
  uint64_t v452 = v231;
  *(void *)int v440 = &unk_1F260E0D8;
  llvm::DiagnosticInfoOptimizationBase::Argument::Argument(v421, "NumInstructions", 0xFuLL, v12);
  uint64_t v233 = sub_1CC34D4D8((uint64_t)v440, (uint64_t)v421);
  v453.__r_.__value_.__r.__words[0] = (std::string::size_type)" instructions in function";
  v453.__r_.__value_.__l.__size_ = 25;
  sub_1CC59ADEC((uint64_t *)(v233 + 80), (uint64_t)&v453);
  if (v424 < 0) {
    operator delete(v423);
  }
  if (v422 < 0) {
    operator delete(v421[0]);
  }
  llvm::MachineOptimizationRemarkEmitter::emit(*(uint64_t *****)(a1 + 312), (llvm::DiagnosticInfoOptimizationBase *)v440);
  if ((v11 & 1) == 0)
  {
    if (*(unsigned char *)(*(void *)(a1 + 256) + 18)
      || (uint64_t v235 = *(void *)(a1 + 248), *(_DWORD *)(v235 + 484) == 15) && *(_DWORD *)(v235 + 492) == 1)
    {
      uint64_t v234 = *(void *)(*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 280) + 16) + 104))(*(void *)(*(void *)(a1 + 280) + 16));
      (*(void (**)(std::string *__return_ptr))(v234 + 752))(&v453);
      if (LODWORD(v453.__r_.__value_.__l.__data_))
      {
        uint64_t v329 = *(void *)(a1 + 272);
        *(void *)int v465 = "avoids zero-length function";
        __int16 v467 = 259;
        (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)v329 + 112))(v329, v465, 1);
        sub_1CD89DD8C(a1, 1);
      }
      if ((long long *)v453.__r_.__value_.__r.__words[2] != (long long *)((char *)&v454 + 8)) {
        free((void *)v453.__r_.__value_.__r.__words[2]);
      }
    }
  }
  (*(void (**)(void, void, void))(**(void **)(a1 + 272) + 168))(*(void *)(a1 + 272), *(void *)(*(void *)(a1 + 280) + 80), 0);
  uint64_t v236 = **(void **)(a1 + 280);
  uint64_t v237 = v236 + 72;
  uint64_t v238 = *(void *)(v236 + 80);
  if (v238 != v236 + 72)
  {
    do
    {
      if (v238) {
        uint64_t v239 = v238 - 24;
      }
      else {
        uint64_t v239 = 0;
      }
      if ((*(_WORD *)(v239 + 18) & 0x7FFF) != 0)
      {
        char v240 = sub_1CD89D224(a1, v239);
        int v241 = (void *)*v240;
        unint64_t AssociatedFragment = *(void *)*v240 & 0xFFFFFFFFFFFFFFF8;
        if (!AssociatedFragment && (v241[1] & 0x1C00) == 0x800)
        {
          *((_DWORD *)v241 + 2) |= 4u;
          unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment((llvm::MCExpr *)v241[3]);
          *int v241 = *v241 & 7 | AssociatedFragment;
        }
        if (!AssociatedFragment)
        {
          uint64_t v243 = *(void *)(a1 + 272);
          v453.__r_.__value_.__r.__words[0] = (std::string::size_type)"Address of block that was removed by CodeGen";
          WORD4(v454) = 259;
          (*(void (**)(uint64_t, std::string *, uint64_t))(*(void *)v243 + 112))(v243, &v453, 1);
          (*(void (**)(void, void *, void))(**(void **)(a1 + 272) + 192))(*(void *)(a1 + 272), v241, 0);
        }
      }
      uint64_t v238 = *(void *)(v238 + 8);
    }
    while (v238 != v237);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 256))(a1);
  if (sub_1CD281938(*(uint64_t **)(a1 + 280), v244) || *(unsigned char *)(*(void *)(a1 + 256) + 363))
  {
    v453.__r_.__value_.__r.__words[0] = (std::string::size_type)"func_end";
    WORD4(v454) = 259;
    Tempuint64_t Symbol = llvm::MCContext::createTempSymbol(*(llvm::MCContext **)(a1 + 264), (const llvm::Twine *)&v453, 1);
    *(void *)(a1 + 44++*(_DWORD *)(result + 8) = TempSymbol;
    (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 272) + 192))(*(void *)(a1 + 272), TempSymbol, 0);
    if (*(unsigned char *)(*(void *)(a1 + 256) + 363))
    {
      uint64_t v246 = *(void *)(a1 + 448);
      uint64_t v247 = *(void *)(a1 + 264);
      *(void *)(v247 + 272) += 24;
      uint64_t v248 = *(void *)(v247 + 192);
      if (((v248 + 7) & 0xFFFFFFFFFFFFFFF8) - v248 + 24 > *(void *)(v247 + 200) - v248)
      {
        unsigned int v330 = *(_DWORD *)(v247 + 216) >> 7;
        if (v330 >= 0x1E) {
          LOBYTE(v330) = 30;
        }
        uint64_t v331 = 4096 << v330;
        unint64_t v249 = (unint64_t)operator new(4096 << v330, (std::align_val_t)8uLL);
        unsigned int v332 = *(_DWORD *)(v247 + 216);
        if (v332 >= *(_DWORD *)(v247 + 220)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v247 + 208) + 8 * v332) = v249;
        ++*(_DWORD *)(v247 + 216);
        *(void *)(v247 + 200) = v249 + v331;
      }
      else
      {
        unint64_t v249 = (v248 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *(void *)(v247 + 192) = v249 + 24;
      int v250 = *(unsigned __int8 *)(*(void *)(v247 + 152) + 18) << 16;
      *(unsigned char *)unint64_t v249 = 2;
      *(_DWORD *)(v249 + 1) = v250 | (*(unsigned __int8 *)(v249 + 4) << 24);
      *(void *)(v249 + ++*(_DWORD *)(result + 8) = 0;
      *(void *)(v249 + 16) = v246;
      uint64_t v251 = *(void *)(a1 + 344);
      uint64_t v252 = *(void *)(a1 + 264);
      *(void *)(v252 + 272) += 24;
      uint64_t v253 = *(void *)(v252 + 192);
      if (((v253 + 7) & 0xFFFFFFFFFFFFFFF8) - v253 + 24 > *(void *)(v252 + 200) - v253)
      {
        unsigned int v333 = *(_DWORD *)(v252 + 216) >> 7;
        if (v333 >= 0x1E) {
          LOBYTE(v333) = 30;
        }
        uint64_t v334 = 4096 << v333;
        unint64_t v254 = (unint64_t)operator new(4096 << v333, (std::align_val_t)8uLL);
        unsigned int v335 = *(_DWORD *)(v252 + 216);
        if (v335 >= *(_DWORD *)(v252 + 220)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v252 + 208) + 8 * v335) = v254;
        ++*(_DWORD *)(v252 + 216);
        *(void *)(v252 + 200) = v254 + v334;
      }
      else
      {
        unint64_t v254 = (v253 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *(void *)(v252 + 192) = v254 + 24;
      int v255 = *(unsigned __int8 *)(*(void *)(v252 + 152) + 18) << 16;
      *(unsigned char *)unint64_t v254 = 2;
      *(_DWORD *)(v254 + 1) = v255 | (*(unsigned __int8 *)(v254 + 4) << 24);
      *(void *)(v254 + ++*(_DWORD *)(result + 8) = 0;
      *(void *)(v254 + 16) = v251;
      uint64_t v256 = *(void *)(a1 + 264);
      *(void *)(v256 + 272) += 32;
      uint64_t v257 = *(void *)(v256 + 192);
      if (((v257 + 7) & 0xFFFFFFFFFFFFFFF8) - v257 + 32 > *(void *)(v256 + 200) - v257)
      {
        unsigned int v336 = *(_DWORD *)(v256 + 216) >> 7;
        if (v336 >= 0x1E) {
          LOBYTE(v336) = 30;
        }
        uint64_t v337 = 4096 << v336;
        unint64_t v258 = (unint64_t)operator new(4096 << v336, (std::align_val_t)8uLL);
        unsigned int v338 = *(_DWORD *)(v256 + 216);
        if (v338 >= *(_DWORD *)(v256 + 220)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v256 + 208) + 8 * v33++*(_DWORD *)(result + 8) = v258;
        ++*(_DWORD *)(v256 + 216);
        *(void *)(v256 + 200) = v258 + v337;
      }
      else
      {
        unint64_t v258 = (v257 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *(void *)(v256 + 192) = v258 + 32;
      *(unsigned char *)unint64_t v258 = 0;
      *(_DWORD *)(v258 + 1) = (*(unsigned __int8 *)(v258 + 4) << 24) | 0x12;
      *(void *)(v258 + ++*(_DWORD *)(result + 8) = 0;
      *(void *)(v258 + 16) = v249;
      *(void *)(v258 + 24) = v254;
      (*(void (**)(void))(**(void **)(a1 + 272) + 424))();
    }
  }
  uint64_t v259 = *(uint64_t **)(a1 + 528);
  uint64_t v260 = *(uint64_t **)(a1 + 536);
  while (v259 != v260)
  {
    uint64_t v261 = *v259;
    v259 += 9;
    (*(void (**)(uint64_t))(*(void *)v261 + 48))(v261);
  }
  uint64_t v262 = *(void *)(a1 + 520);
  uint64_t v263 = *(void *)(a1 + 448);
  LODWORD(v453.__r_.__value_.__l.__data_) = *(_DWORD *)(*(void *)(*(void *)(a1 + 280) + 328) + 196)
                                          - *(_DWORD *)(*(void *)(*(void *)(a1 + 280) + 328) + 192)
                                          + 2;
  uint64_t v264 = (void *)sub_1CD2817E4(a1 + 352, (int *)&v453);
  void *v264 = v262;
  v264[1] = v263;
  (*(void (**)(uint64_t))(*(void *)a1 + 200))(a1);
  unint64_t v265 = *(uint64_t **)(a1 + 528);
  uint64_t v266 = *(uint64_t **)(a1 + 536);
  while (v265 != v266)
  {
    uint64_t v267 = *v265;
    v265 += 9;
    (*(void (**)(uint64_t, void))(*(void *)v267 + 56))(v267, *(void *)(a1 + 280));
  }
  uint64_t v268 = *(void *)(a1 + 280);
  if (((*(_DWORD *)(v268 + 640) == 2) & v11) != 0)
  {
    sub_1CD89E128(a1, *(void *)(a1 + 280));
    uint64_t v268 = *(void *)(a1 + 280);
  }
  if ((*(unsigned char *)(*(void *)(v268 + 8) + 1042) & 0x10) != 0)
  {
    uint64_t v348 = (llvm::MCObjectFileInfo *)(*(uint64_t (**)(void))(**(void **)(a1 + 248) + 24))(*(void *)(a1 + 248));
    uint64_t StackSizesSection = llvm::MCObjectFileInfo::getStackSizesSection(v348, *(const llvm::MCSection **)(*(void *)(*(void *)(a1 + 272) + 112)+ 32 * *(unsigned int *)(*(void *)(a1 + 272) + 120)- 32));
    if (StackSizesSection)
    {
      uint64_t v350 = *(void *)(v268 + 56);
      if (!*(unsigned char *)(v350 + 36))
      {
        uint64_t v351 = StackSizesSection;
        __n128 v352 = sub_1CD6AD2C8(*(void *)(a1 + 272));
        (*(void (**)(void, uint64_t, void, __n128))(**(void **)(a1 + 272) + 168))(*(void *)(a1 + 272), v351, 0, v352);
        unint64_t v353 = *(void *)(v350 + 672) + *(void *)(v350 + 48);
        uint64_t v354 = *(void *)(a1 + 248);
        unsigned int v355 = *(_DWORD *)(v354 + 28);
        uint64_t v356 = *(void *)(v354 + 248);
        if (!v355) {
          goto LABEL_635;
        }
        unint64_t v357 = *(unsigned int *)(v354 + 256);
        uint64_t v358 = *(void *)(v354 + 248);
        if (v357)
        {
          uint64_t v358 = v356;
          unint64_t v359 = v357;
          do
          {
            unint64_t v360 = v359 >> 1;
            uint64_t v361 = v358 + 16 * (v359 >> 1);
            unsigned int v362 = *(_DWORD *)(v361 + 8);
            uint64_t v363 = v361 + 16;
            v359 += ~(v359 >> 1);
            if (v362 < v355) {
              uint64_t v358 = v363;
            }
            else {
              unint64_t v359 = v360;
            }
          }
          while (v359);
        }
        if (v358 == v356 + 16 * v357 || *(_DWORD *)(v358 + 8) != v355) {
LABEL_635:
        }
          uint64_t v358 = v356;
        llvm::MCStreamer::emitSymbolValue(*(llvm::MCStreamer **)(a1 + 272), *(const llvm::MCSymbol **)(a1 + 520), ((unint64_t)*(unsigned int *)(v358 + 4) + 7) >> 3, 0);
        llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(a1 + 272), v353, 0);
        sub_1CCBC2468(*(void *)(a1 + 272));
      }
    }
  }
  unint64_t v269 = *(llvm::Value ***)(a1 + 280);
  uint64_t v270 = v269[1];
  if (*((char *)v270 + 1095) < 0)
  {
    if (!*((void *)v270 + 135)) {
      goto LABEL_472;
    }
  }
  else if (!*((unsigned char *)v270 + 1095))
  {
    goto LABEL_472;
  }
  uint64_t v364 = v269[7];
  uint64_t v365 = *((void *)v364 + 6);
  uint64_t v366 = *((void *)v364 + 84);
  uint64_t v367 = *(llvm::raw_ostream **)(a1 + 512);
  if (!v367)
  {
    *(_DWORD *)int v465 = 0;
    *(void *)&v465[8] = std::system_category();
    operator new();
  }
  uint64_t v368 = *((void *)*v269 + 5);
  uint64_t v371 = *(const void **)(v368 + 168);
  uint64_t v369 = v368 + 168;
  unint64_t v370 = v371;
  char v372 = *(unsigned char *)(v369 + 23);
  if (v372 >= 0) {
    uint64_t v373 = (const void *)v369;
  }
  else {
    uint64_t v373 = v370;
  }
  size_t v374 = *(void *)(v369 + 8);
  if (v372 >= 0) {
    size_t v375 = v372 & 0x7F;
  }
  else {
    size_t v375 = v374;
  }
  uint64_t v376 = (void *)*((void *)v367 + 4);
  if (v375 <= *((void *)v367 + 3) - (void)v376)
  {
    if (v375)
    {
      memcpy(v376, v373, v375);
      *((void *)v367 + 4) += v375;
    }
  }
  else
  {
    llvm::raw_ostream::write(v367, (const char *)v373, v375);
  }
  unint64_t v377 = *v269;
  if ((*((unsigned char *)*v269 + 23) & 0x20) != 0)
  {
    uint64_t v378 = ***(void ***)v377;
    v453.__r_.__value_.__r.__words[0] = (std::string::size_type)*v269;
    int v379 = *(_DWORD *)(v378 + 2496);
    if (v379)
    {
      uint64_t v380 = *(void *)(v378 + 2480);
      int v381 = v379 - 1;
      unsigned int v382 = v381 & ((v377 >> 4) ^ (v377 >> 9));
      unsigned int v383 = (llvm::Value **)(v380 + 40 * v382);
      uint64_t v384 = *v383;
      if (*v383 == v377) {
        goto LABEL_661;
      }
      int v385 = 0;
      int v386 = 1;
      while (v384 != (llvm::Value *)-4096)
      {
        if (v385) {
          BOOL v387 = 0;
        }
        else {
          BOOL v387 = v384 == (llvm::Value *)-8192;
        }
        if (v387) {
          int v385 = v383;
        }
        unsigned int v388 = v382 + v386++;
        unsigned int v382 = v388 & v381;
        unsigned int v383 = (llvm::Value **)(v380 + 40 * v382);
        uint64_t v384 = *v383;
        if (*v383 == v377) {
          goto LABEL_661;
        }
      }
      if (v385) {
        int v411 = v385;
      }
      else {
        int v411 = v383;
      }
    }
    else
    {
      int v411 = 0;
    }
    unsigned int v383 = (llvm::Value **)sub_1CC609054(v378 + 2480, (uint64_t)&v453, (uint64_t *)&v453, v411);
    std::string::size_type v412 = v453.__r_.__value_.__r.__words[0];
    v383[3] = 0;
    v383[4] = 0;
    *unsigned int v383 = (llvm::Value *)v412;
    v383[1] = (llvm::Value *)(v383 + 3);
    v383[2] = (llvm::Value *)0x100000000;
LABEL_661:
    uint64_t v389 = *((unsigned int *)v383 + 4);
    if (v389)
    {
      uint64_t v390 = (void *)((char *)v383[1] + 8);
      uint64_t v391 = 16 * v389;
      while (*((_DWORD *)v390 - 2))
      {
        v390 += 2;
        v391 -= 16;
        if (!v391) {
          goto LABEL_680;
        }
      }
      uint64_t v392 = *v390;
      if (*v390)
      {
        int v393 = *(llvm::raw_ostream **)(a1 + 512);
        int v394 = (unsigned char *)*((void *)v393 + 4);
        if ((unint64_t)v394 >= *((void *)v393 + 3))
        {
          int v393 = llvm::raw_ostream::write(v393, 58);
        }
        else
        {
          *((void *)v393 + 4) = v394 + 1;
          *int v394 = 58;
        }
        sub_1CD098D14(v393, *(unsigned int *)(v392 + 24), 0, 0, 0);
      }
    }
  }
LABEL_680:
  int v399 = *(llvm::raw_ostream **)(a1 + 512);
  int v400 = (unsigned char *)*((void *)v399 + 4);
  if ((unint64_t)v400 >= *((void *)v399 + 3))
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 512), 58);
  }
  else
  {
    *((void *)v399 + 4) = v400 + 1;
    *int v400 = 58;
  }
  Name = llvm::MachineFunction::getName(v269);
  size_t v403 = v401;
  uint64_t v404 = (unsigned char *)*((void *)v399 + 4);
  if (v401 <= *((void *)v399 + 3) - (void)v404)
  {
    if (v401)
    {
      memcpy(v404, Name, v401);
      uint64_t v404 = (unsigned char *)(*((void *)v399 + 4) + v403);
      *((void *)v399 + 4) = v404;
    }
  }
  else
  {
    llvm::raw_ostream::write(v399, Name, v401);
    uint64_t v404 = (unsigned char *)*((void *)v399 + 4);
  }
  if ((unint64_t)v404 >= *((void *)v399 + 3))
  {
    llvm::raw_ostream::write(v399, 9);
  }
  else
  {
    *((void *)v399 + 4) = v404 + 1;
    *uint64_t v404 = 9;
  }
  sub_1CD098D14(v399, v366 + v365, 0, 0, 0);
  int v405 = (unsigned char *)*((void *)v399 + 4);
  if ((unint64_t)v405 >= *((void *)v399 + 3))
  {
    llvm::raw_ostream::write(v399, 9);
  }
  else
  {
    *((void *)v399 + 4) = v405 + 1;
    *int v405 = 9;
  }
  int v406 = *(llvm::raw_ostream **)(a1 + 512);
  uint64_t v407 = *((void *)v406 + 4);
  unint64_t v408 = *((void *)v406 + 3) - v407;
  if (*((unsigned char *)v364 + 36))
  {
    if (v408 <= 7)
    {
      uint64_t v409 = "dynamic\n";
      size_t v410 = 8;
LABEL_698:
      llvm::raw_ostream::write(v406, v409, v410);
      goto LABEL_472;
    }
    *(void *)uint64_t v407 = 0xA63696D616E7964;
    uint64_t v413 = *((void *)v406 + 4) + 8;
  }
  else
  {
    if (v408 <= 6)
    {
      uint64_t v409 = "static\n";
      size_t v410 = 7;
      goto LABEL_698;
    }
    *(_DWORD *)(v407 + 3) = 174287220;
    *(_DWORD *)uint64_t v407 = 1952543859;
    uint64_t v413 = *((void *)v406 + 4) + 7;
  }
  *((void *)v406 + 4) = v413;
LABEL_472:
  uint64_t v13 = **(void **)(a1 + 280);
  unint64_t v271 = *(void *)(v13 + 112);
  if (!v271)
  {
    int v295 = 0;
    LODWORD(v310) = 0;
    char v294 = 1;
    goto LABEL_555;
  }
  unint64_t v83 = 0x9DDFEA08EB382D69;
  LODWORD(v272) = *(_DWORD *)(v271 + 8);
  unsigned int v95 = (unsigned __int8 *)&unk_1EBCBE000;
  uint64_t v1 = (uint64_t)&qword_1EBCBE588;
  if (!v272) {
    goto LABEL_647;
  }
  unint64_t v273 = *(void *)(v271 + 40);
  if (!v273)
  {
LABEL_511:
    LOBYTE(v272) = 0;
LABEL_512:
    BOOL v292 = 1;
    goto LABEL_513;
  }
  LODWORD(v100) = *(_DWORD *)(v273 + 40);
  if (!v100)
  {
LABEL_510:
    unint64_t v273 = 0;
    goto LABEL_511;
  }
  uint64_t v11 = *(void *)(v273 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
LABEL_609:
    if (__cxa_guard_acquire(&qword_1EBCBE588))
    {
      unint64_t v339 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v339 = 0xFF51AFD7ED558CCDLL;
      }
      *((void *)v95 + 176) = v339;
      __cxa_guard_release(&qword_1EBCBE588);
    }
  }
  uint64_t v274 = *((void *)v95 + 176);
  uint64_t v275 = __ROR8__(v274 ^ 0xA78AF1B51BD984F2, 30);
  unint64_t v276 = ((v274 + 0xBA5F5326B54B2D6) ^ ((((v275 - 0x2BFCB67E25672AFALL) ^ (v274 + 0xBA5F5326B54B2D6)) * v83) >> 47) ^ (((v275 - 0x2BFCB67E25672AFALL) ^ (v274 + 0xBA5F5326B54B2D6)) * v83))
       * v83;
  unsigned int v277 = -348639895 * ((v276 >> 47) ^ v276);
  for (int j = 1; ; ++j)
  {
    unsigned int v279 = v277 & (v100 - 1);
    uint64_t v280 = (uint64_t *)(v11 + 24 * v279);
    uint64_t v281 = *v280;
    if (*v280 == -1)
    {
      if ("patchable-function-prefix" == (char *)-1) {
        goto LABEL_497;
      }
      goto LABEL_480;
    }
    if (v281 != -2) {
      break;
    }
    if ("patchable-function-prefix" == (char *)-2) {
      goto LABEL_497;
    }
LABEL_480:
    if (v281 == -1) {
      goto LABEL_510;
    }
    unsigned int v277 = j + v279;
  }
  if (v280[1] != 25) {
    goto LABEL_480;
  }
  BOOL v282 = *(void *)v281 == 0x6C62616863746170 && *(void *)(v281 + 8) == 0x6974636E75662D65;
  BOOL v283 = v282 && *(void *)(v281 + 16) == 0x69666572702D6E6FLL;
  if (!v283 || *(unsigned char *)(v281 + 24) != 120) {
    goto LABEL_480;
  }
LABEL_497:
  unint64_t v273 = v280[2];
  if (!v273) {
    goto LABEL_511;
  }
  uint64_t v272 = *(unsigned int *)(v273 + 16);
  if (!v272)
  {
LABEL_647:
    unint64_t v273 = 0;
    goto LABEL_512;
  }
  unint64_t v285 = 0;
  unint64_t v286 = (unsigned __int8 *)(*(unsigned int *)(v273 + 12) + v273 + 25);
  uint64_t v287 = *(unsigned int *)(v273 + 16);
  while (1)
  {
    int v289 = *v286++;
    int v288 = v289;
    if ((v289 - 48) < 0xA)
    {
      int v290 = -48;
      goto LABEL_502;
    }
    if ((v288 - 97) < 0x1A)
    {
      int v290 = -87;
      goto LABEL_502;
    }
    if ((v288 - 65) > 0x19) {
      break;
    }
    int v290 = -55;
LABEL_502:
    unsigned int v291 = v290 + v288;
    if (v291 > 9)
    {
      unint64_t v273 = v285;
      goto LABEL_704;
    }
    unint64_t v273 = 10 * v285 + v291;
    if (v285 > v273 / 0xA)
    {
      LOBYTE(v272) = 1;
      goto LABEL_512;
    }
    unint64_t v285 = v273;
    if (!--v287) {
      goto LABEL_704;
    }
  }
  unint64_t v273 = v285;
LABEL_704:
  BOOL v292 = v287 == v272;
  LOBYTE(v272) = v287 != 0;
LABEL_513:
  uint64_t v293 = *(void *)(v13 + 112);
  char v294 = v272 | v292;
  if (v273 >= 0x100000000) {
    int v295 = 0;
  }
  else {
    int v295 = v273;
  }
  if (!v293 || !*(_DWORD *)(v293 + 8))
  {
LABEL_552:
    unint64_t v271 = 0;
LABEL_553:
    LODWORD(v310) = 0;
LABEL_555:
    BOOL v318 = 1;
    goto LABEL_556;
  }
  unint64_t v271 = *(void *)(v293 + 40);
  if (!v271) {
    goto LABEL_553;
  }
  int v296 = v15;
  int v297 = *(_DWORD *)(v271 + 40);
  if (!v297)
  {
    unint64_t v271 = 0;
    LODWORD(v310) = 0;
    BOOL v318 = 1;
    uint64_t v15 = v296;
    goto LABEL_556;
  }
  uint64_t v298 = *(void *)(v271 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)v1, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCBE588))
  {
    unint64_t v340 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v340 = 0xFF51AFD7ED558CCDLL;
    }
    *((void *)v95 + 176) = v340;
    __cxa_guard_release(&qword_1EBCBE588);
  }
  uint64_t v299 = *((void *)v95 + 176);
  uint64_t v300 = __ROR8__(v299 ^ 0xD0DB31C61410D441, 30);
  unint64_t v301 = ((v299 - 0x1DAA4ADE8CE29C7ALL) ^ ((((v300 - 0x447750EBFF2F1972) ^ (v299 - 0x1DAA4ADE8CE29C7ALL)) * v83) >> 47) ^ (((v300 - 0x447750EBFF2F1972) ^ (v299 - 0x1DAA4ADE8CE29C7ALL)) * v83))
       * v83;
  unsigned int v302 = -348639895 * ((v301 >> 47) ^ v301);
  int v303 = v297 - 1;
  int v304 = 1;
  uint64_t v15 = v296;
  while (1)
  {
    unsigned int v305 = v302 & v303;
    uint64_t v306 = v298 + 24 * v305;
    int v307 = *(void **)v306;
    if (*(void *)v306 == -1)
    {
      if ("patchable-function-entry" == (char *)-1) {
        goto LABEL_538;
      }
      goto LABEL_524;
    }
    if (v307 != (void *)-2) {
      break;
    }
    if ("patchable-function-entry" == (char *)-2) {
      goto LABEL_538;
    }
LABEL_524:
    if (v307 == (void *)-1) {
      goto LABEL_552;
    }
    unsigned int v302 = v304 + v305;
    ++v304;
  }
  if (*(void *)(v306 + 8) != 24) {
    goto LABEL_524;
  }
  BOOL v308 = *v307 == 0x6C62616863746170 && v307[1] == 0x6974636E75662D65;
  if (!v308 || v307[2] != 0x7972746E652D6E6FLL) {
    goto LABEL_524;
  }
LABEL_538:
  unint64_t v271 = *(void *)(v306 + 16);
  if (!v271) {
    goto LABEL_553;
  }
  uint64_t v310 = *(unsigned int *)(v271 + 16);
  if (!v310)
  {
    unint64_t v271 = 0;
    goto LABEL_555;
  }
  unint64_t v311 = 0;
  unsigned int v312 = (unsigned __int8 *)(*(unsigned int *)(v271 + 12) + v271 + 25);
  uint64_t v313 = *(unsigned int *)(v271 + 16);
  while (1)
  {
    int v315 = *v312++;
    int v314 = v315;
    if ((v315 - 48) < 0xA)
    {
      int v316 = -48;
      goto LABEL_543;
    }
    if ((v314 - 97) >= 0x1A) {
      break;
    }
    int v316 = -87;
LABEL_551:
    uint64_t v15 = v296;
LABEL_543:
    unsigned int v317 = v316 + v314;
    if (v317 > 9)
    {
      unint64_t v271 = v311;
      goto LABEL_707;
    }
    unint64_t v271 = 10 * v311 + v317;
    if (v311 > v271 / 0xA)
    {
      LODWORD(v310) = 1;
      goto LABEL_555;
    }
    unint64_t v311 = v271;
    if (!--v313) {
      goto LABEL_707;
    }
  }
  if ((v314 - 65) <= 0x19)
  {
    int v316 = -55;
    goto LABEL_551;
  }
  unint64_t v271 = v311;
  uint64_t v15 = v296;
LABEL_707:
  BOOL v318 = v313 == v310;
  LODWORD(v310) = v313 != 0;
LABEL_556:
  int v319 = v310 | v318;
  if (v271 >= 0x100000000) {
    LODWORD(v271) = 0;
  }
  char v320 = v294 ^ 1;
  if (!v295) {
    char v320 = 0;
  }
  BOOL v18 = v271 == 0;
  int v321 = v319 ^ 1;
  if (v18) {
    int v321 = 0;
  }
  if ((v320 & 1) != 0 || v321)
  {
    uint64_t v341 = *(void *)(a1 + 248);
    if (*(_DWORD *)(v341 + 492) == 3)
    {
      unint64_t v342 = ((unint64_t)*(unsigned int *)(*(void *)(v341 + 248) + 4) + 7) >> 3;
      uint64_t v343 = *(void *)(a1 + 256);
      if (!*(unsigned char *)(v343 + 464)
        && ((int v344 = *(_DWORD *)(v343 + 456), v344 < 2) || v344 == 2 && *(int *)(v343 + 460) < 36))
      {
        uint64_t v346 = 0;
        uint64_t v345 = 0;
        uint64_t v395 = 0;
        int v347 = 3;
      }
      else
      {
        uint64_t v345 = *(llvm::Comdat **)(v13 + 48);
        if (v345)
        {
          uint64_t v345 = (llvm::Comdat *)llvm::Comdat::getName(v345);
          int v347 = 643;
        }
        else
        {
          uint64_t v346 = 0;
          int v347 = 131;
        }
        uint64_t v395 = *(const llvm::MCSymbolELF **)(a1 + 328);
      }
      uint64_t v396 = *(llvm::MCContext **)(a1 + 264);
      uint64_t v397 = *(void *)(a1 + 272);
      v453.__r_.__value_.__r.__words[0] = (std::string::size_type)"__patchable_function_entries";
      WORD4(v454) = 259;
      __int16 v467 = 261;
      *(void *)int v465 = v345;
      *(void *)&v465[8] = v346;
      uint64_t ELFSection = llvm::MCContext::getELFSection(v396, (const llvm::Twine *)&v453, 1, v347, 0, (const llvm::Twine *)v465, *(void *)(v13 + 48) != 0, -1, v395);
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v397 + 168))(v397, ELFSection, 0);
      sub_1CD27C664(a1, (63 - __clz(v342)), 0);
      llvm::MCStreamer::emitSymbolValue(*(llvm::MCStreamer **)(a1 + 272), *(const llvm::MCSymbol **)(a1 + 320), v342, 0);
    }
  }
  if (*(unsigned char *)(a1 + 504))
  {
    uint64_t v322 = (llvm::raw_ostream *)(*(uint64_t (**)(void))(**(void **)(a1 + 272) + 120))(*(void *)(a1 + 272));
    uint64_t v323 = (_OWORD *)*((void *)v322 + 4);
    if (*((void *)v322 + 3) - (void)v323 > 0xFuLL)
    {
      *uint64_t v323 = *(_OWORD *)"-- End function\n";
      *((void *)v322 + 4) += 16;
    }
    else
    {
      llvm::raw_ostream::write(v322, "-- End function\n", 0x10uLL);
    }
  }
  (*(void (**)(void))(**(void **)(a1 + 272) + 152))(*(void *)(a1 + 272));
  *(void *)int v440 = v420;
  uint64_t v324 = (char *)v448;
  if (v449)
  {
    unint64_t v325 = (unint64_t)v449 << 6;
    do
    {
      uint64_t v326 = (void **)&v324[v325];
      if (v324[v325 - 17] < 0) {
        operator delete(*(v326 - 5));
      }
      if (*((char *)v326 - 41) < 0) {
        operator delete(*(v326 - 8));
      }
      v325 -= 64;
    }
    while (v325);
    uint64_t v324 = (char *)v448;
  }
  if (v324 != v15) {
    free(v324);
  }
}

uint64_t sub_1CD2817E4(uint64_t a1, int *a2)
{
  int v4 = *a2;
  int v26 = *a2;
  int v27 = 0;
  int v5 = *(_DWORD *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)a1;
    unsigned int v7 = v5 - 1;
    uint64_t v8 = (v5 - 1) & (37 * v4);
    uint64_t v9 = (_DWORD *)(*(void *)a1 + 8 * v8);
    int v10 = *v9;
    if (v4 == *v9)
    {
LABEL_20:
      unsigned int v19 = *(_DWORD *)(v6 + 8 * v8 + 4);
      uint64_t v18 = *(void *)(a1 + 24);
      return v18 + 24 * v19 + 8;
    }
    uint64_t v11 = 0;
    int v12 = 1;
    while (v10 != -1)
    {
      if (v11) {
        BOOL v22 = 0;
      }
      else {
        BOOL v22 = v10 == -2;
      }
      if (v22) {
        uint64_t v11 = v9;
      }
      int v23 = v8 + v12++;
      uint64_t v8 = v23 & v7;
      uint64_t v9 = (_DWORD *)(v6 + 8 * v8);
      int v10 = *v9;
      if (v4 == *v9) {
        goto LABEL_20;
      }
    }
    if (v11) {
      uint64_t v13 = v11;
    }
    else {
      uint64_t v13 = v9;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v14 = sub_1CB83889C(a1, (uint64_t)&v26, &v26, v13);
  *uint64_t v14 = v26;
  v14[1] = v27;
  *((void *)&v24 + 1) = 0;
  uint64_t v25 = 0;
  LODWORD(v24) = *a2;
  unint64_t v15 = *(void *)(a1 + 32);
  if (v15 >= *(void *)(a1 + 40))
  {
    BOOL v21 = v14;
    int v17 = sub_1CBF56DE8((void **)(a1 + 24), (uint64_t)&v24);
    uint64_t v14 = v21;
  }
  else
  {
    long long v16 = v24;
    *(void *)(v15 + 16) = v25;
    *(_OWORD *)unint64_t v15 = v16;
    int v17 = (char *)(v15 + 24);
  }
  *(void *)(a1 + 32) = v17;
  uint64_t v18 = *(void *)(a1 + 24);
  unsigned int v19 = -1431655765 * ((unint64_t)&v17[-v18] >> 3) - 1;
  v14[1] = v19;
  return v18 + 24 * v19 + 8;
}

BOOL sub_1CD281938(uint64_t *a1, const llvm::Value *a2)
{
  BOOL v2 = a1[64] == a1[65] && *((unsigned char *)a1 + 636) == 0;
  if (!v2 || *(unsigned char *)(a1[4] + 2108)) {
    return 1;
  }
  uint64_t v4 = *a1;
  if ((*(_WORD *)(*a1 + 18) & 8) == 0) {
    return 0;
  }
  int v5 = *(_DWORD *)(v4 + 20);
  if ((v5 & 0x40000000) != 0) {
    uint64_t v6 = *(llvm::Value ***)(v4 - 8);
  }
  else {
    uint64_t v6 = (llvm::Value **)(v4 - 32 * (v5 & 0x7FFFFFF));
  }
  return llvm::classifyEHPersonality(*v6, a2) == 0;
}

uint64_t sub_1CD2819B4(uint64_t a1, const llvm::Twine *a2)
{
  return llvm::MCContext::createTempSymbol(*(llvm::MCContext **)(a1 + 264), a2, 1);
}

uint64_t sub_1CD2819C0(uint64_t a1, llvm::Module *a2)
{
  uint64_t v233 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 280) = 0;
  if (*(unsigned char *)((*(uint64_t (**)(void))(**(void **)(a1 + 248) + 24))(*(void *)(a1 + 248)) + 944))
  {
    for (uint64_t i = (void *)*((void *)a2 + 2); i != (void *)((char *)a2 + 8); uint64_t i = (void *)i[1])
    {
      if (i) {
        int v5 = i - 7;
      }
      else {
        int v5 = 0;
      }
      int v6 = *((_DWORD *)v5 + 8);
      if ((v6 & 0xC0) == 0x80)
      {
        if (i && *((unsigned char *)v5 + 16) == 3)
        {
          if ((*((_DWORD *)v5 + 5) & 0x7FFFFFF) != 0) {
            goto LABEL_16;
          }
        }
        else if (*((unsigned char *)v5 + 16) || (v6 & 0x800000) != 0 || (void *)v5[9] != v5 + 9)
        {
LABEL_16:
          if (v5[10])
          {
            int v7 = v6 & 0xF;
            if (((v7 - 7) < 2 || (v7 - 1) <= 2)
              && *(unsigned __int8 *)(*(v5 - 4) + 16) <= 3u)
            {
              uint64_t v8 = v5[1];
              if (v8)
              {
                int v9 = 0;
                do
                {
                  if (*(unsigned __int8 *)(*(void *)(v8 + 24) + 16) >= 0x15u) {
                    uint64_t v10 = 0;
                  }
                  else {
                    uint64_t v10 = *(void *)(v8 + 24);
                  }
                  v9 += sub_1CD287790(v10);
                  uint64_t v8 = *(void *)(v8 + 8);
                }
                while (v8);
                if (v9)
                {
                  uint64_t Symbol = (void *)llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(a1 + 248), (const llvm::GlobalValue *)v5);
                  uint64_t v11 = sub_1CD89E4C0(a1 + 400, (unint64_t *)&Symbol);
                  *(void *)uint64_t v11 = v5;
                  *(_DWORD *)(v11 + ++*(_DWORD *)(result + 8) = v9;
                }
              }
            }
          }
        }
      }
    }
  }
  for (int j = (void *)*((void *)a2 + 2); j != (void *)((char *)a2 + 8); int j = (void *)j[1])
  {
    if (j) {
      uint64_t v13 = j - 7;
    }
    else {
      uint64_t v13 = 0;
    }
    (*(void (**)(uint64_t, void *))(*(void *)a1 + 208))(a1, v13);
  }
  unsigned int v208 = (void *)((char *)a2 + 8);
  if (*(unsigned char *)((*(uint64_t (**)(void))(**(void **)(a1 + 248) + 24))(*(void *)(a1 + 248)) + 944))
  {
    uint64_t Symbol = (char *)&v230 + 8;
    *(void *)&long long v230 = 0x800000000;
    uint64_t v14 = *(void *)(a1 + 424);
    uint64_t v15 = *(void *)(a1 + 432);
    if (v14 != v15)
    {
      unsigned int v186 = 0;
      do
      {
        if (*(_DWORD *)(v14 + 16))
        {
          if (v186 >= DWORD1(v230)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)Symbol + v186) = *(void *)(v14 + 8);
          unsigned int v186 = v230 + 1;
          LODWORD(v230) = v230 + 1;
        }
        v14 += 24;
      }
      while (v14 != v15);
    }
    sub_1CCBD17BC(a1 + 400);
    *(void *)(a1 + 432) = *(void *)(a1 + 424);
    long long v16 = (uint64_t *)Symbol;
    if (v230)
    {
      uint64_t v187 = 8 * v230;
      do
      {
        uint64_t v188 = *v16++;
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, v188);
        v187 -= 8;
      }
      while (v187);
      long long v16 = (uint64_t *)Symbol;
    }
    if (v16 != (uint64_t *)((char *)&v230 + 8)) {
      free(v16);
    }
  }
  int v17 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 248) + 24))(*(void *)(a1 + 248));
  for (k = (void *)*((void *)a2 + 4); k != (void *)((char *)a2 + 24); k = (void *)k[1])
  {
    if (k) {
      unsigned int v19 = k - 7;
    }
    else {
      unsigned int v19 = 0;
    }
    int v20 = *((_DWORD *)v19 + 8);
    if ((v20 & 0xF) != 1)
    {
      if (k && *((unsigned char *)v19 + 16) == 3)
      {
        if ((*((_DWORD *)v19 + 5) & 0x7FFFFFF) != 0) {
          continue;
        }
      }
      else if (*((unsigned char *)v19 + 16) || (v20 & 0x800000) != 0 || (void *)v19[9] != v19 + 9)
      {
        continue;
      }
    }
    uint64_t v21 = llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(a1 + 248), (const llvm::GlobalValue *)v19);
    unsigned int v22 = *((_DWORD *)v19 + 8);
    if (*(_DWORD *)(*(void *)(a1 + 248) + 492) == 9)
    {
      if ((v22 & 0x2000) == 0)
      {
        uint64_t v23 = (*(uint64_t (**)(void *, void *))(*v17 + 240))(v17, v19);
        (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 432))(a1, v19, v23);
        (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 432))(a1, v19, v21);
      }
    }
    else
    {
      int v24 = (v22 >> 4) & 3;
      if (v24 == 2)
      {
        uint64_t v25 = (_DWORD *)(*(void *)(a1 + 256) + 404);
      }
      else
      {
        if (v24 != 1) {
          continue;
        }
        uint64_t v25 = (_DWORD *)(*(void *)(a1 + 256) + 400);
      }
      if (*v25) {
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 272) + 304))(*(void *)(a1 + 272), v21);
      }
    }
  }
  int v26 = *(llvm::remarks::RemarkStreamer **)(**(void **)a2 + 64);
  if (v26) {
    sub_1CD89EE08(a1, v26);
  }
  (*(void (**)(void *, void, llvm::Module *))(*v17 + 40))(v17, *(void *)(a1 + 272), a2);
  int v27 = *(_DWORD *)(*(void *)(a1 + 248) + 492);
  if (v27 == 3)
  {
    uint64_t v28 = *(void *)(*(void *)(a1 + 288) + 2072);
    if (!v28) {
      operator new();
    }
    llvm::MachineModuleInfoImpl::getSortedStubs((_DWORD *)(v28 + 8), (uint64_t)&Symbol);
    unint64_t v29 = Symbol;
    if (Symbol != (void *)v230)
    {
      (*(void (**)(void, void, void))(**(void **)(a1 + 272) + 168))(*(void *)(a1 + 272), v17[4], 0);
      sub_1CD27C664(a1, (63 - __clz(((unint64_t)*(unsigned int *)(*((void *)a2 + 63) + 4) + 7) >> 3)), 0);
      unint64_t v29 = Symbol;
      uint64_t v30 = (void *)v230;
      if (Symbol != (void *)v230)
      {
        do
        {
          (*(void (**)(void, void, void))(**(void **)(a1 + 272) + 192))(*(void *)(a1 + 272), *v29, 0);
          llvm::MCStreamer::emitSymbolValue(*(llvm::MCStreamer **)(a1 + 272), (const llvm::MCSymbol *)(v29[1] & 0xFFFFFFFFFFFFFFF8), ((unint64_t)*(unsigned int *)(*((void *)a2 + 63) + 4) + 7) >> 3, 0);
          v29 += 2;
        }
        while (v29 != v30);
        unint64_t v29 = Symbol;
      }
    }
    if (v29)
    {
      *(void *)&long long v230 = v29;
      operator delete(v29);
    }
    int v27 = *(_DWORD *)(*(void *)(a1 + 248) + 492);
  }
  if (v27 == 1)
  {
    uint64_t v31 = *(void *)(*(void *)(a1 + 288) + 2072);
    if (!v31) {
      operator new();
    }
    llvm::MachineModuleInfoImpl::getSortedStubs((_DWORD *)(v31 + 8), (uint64_t)&v226);
    size_t v32 = v226;
    unsigned int v33 = (void *)v227;
    if (v226 != (void *)v227)
    {
      while (1)
      {
        uint64_t Symbol = &v231;
        qmemcpy(&v231, ".rdata$", 7);
        long long v230 = xmmword_1CFB33710;
        uint64_t v34 = (unsigned char *)*v32;
        if ((*(unsigned char *)*v32 & 4) == 0) {
          break;
        }
        uint64_t v35 = (size_t *)*((void *)v34 - 1);
        size_t v38 = *v35;
        uint64_t v37 = v35 + 2;
        size_t v36 = v38;
        if (v38 + 7 >= 0x101) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        if (!v36)
        {
          uint64_t v41 = 1;
          goto LABEL_93;
        }
        memcpy((char *)&v231 + 7, v37, v36);
        size_t v39 = (std::string::value_type *)Symbol;
        uint64_t v40 = v230;
        uint64_t v34 = (unsigned char *)*v32;
        uint64_t v41 = *(void *)*v32 & 4;
LABEL_84:
        std::string::size_type v42 = v40 + v36;
        *(void *)&long long v230 = v40 + v36;
        uint64_t v43 = *(void *)(a1 + 272);
        if (v41)
        {
          int v44 = (std::string::size_type *)*((void *)v34 - 1);
          std::string::size_type v47 = *v44;
          std::string::size_type v45 = (std::string::size_type)(v44 + 2);
          std::string::size_type v46 = v47;
        }
        else
        {
          std::string::size_type v45 = 0;
          std::string::size_type v46 = 0;
        }
        uint64_t COFFSection = llvm::MCContext::getCOFFSection(*(llvm::MCContext **)(a1 + 264), v39, v42, 1073745984, 4, v45, v46, 2u, 0xFFFFFFFF, 0);
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)v43 + 168))(v43, COFFSection, 0);
        sub_1CD27C664(a1, (63 - __clz(((unint64_t)*(unsigned int *)(*((void *)a2 + 63) + 4) + 7) >> 3)), 0);
        (*(void (**)(void))(**(void **)(a1 + 272) + 304))();
        (*(void (**)(void, void, void))(**(void **)(a1 + 272) + 192))(*(void *)(a1 + 272), *v32, 0);
        llvm::MCStreamer::emitSymbolValue(*(llvm::MCStreamer **)(a1 + 272), (const llvm::MCSymbol *)(v32[1] & 0xFFFFFFFFFFFFFFF8), ((unint64_t)*(unsigned int *)(*((void *)a2 + 63) + 4) + 7) >> 3, 0);
        if (Symbol != &v231) {
          free(Symbol);
        }
        v32 += 2;
        if (v32 == v33)
        {
          size_t v32 = v226;
          goto LABEL_95;
        }
      }
      uint64_t v41 = 0;
      size_t v36 = 0;
LABEL_93:
      size_t v39 = (std::string::value_type *)&v231;
      uint64_t v40 = 7;
      goto LABEL_84;
    }
LABEL_95:
    if (v32)
    {
      uint64_t v227 = (uint64_t)v32;
      operator delete(v32);
    }
  }
  uint64_t v49 = *(void *)(*(void *)(a1 + 272) + 16);
  if (v49) {
    (*(void (**)(uint64_t))(*(void *)v49 + 72))(v49);
  }
  unint64_t v50 = *(uint64_t **)(a1 + 528);
  uint64_t v51 = *(uint64_t **)(a1 + 536);
  unint64_t v207 = (char *)a2 + 24;
  if (v50 == v51)
  {
    uint64_t v53 = *(void *)(a1 + 528);
  }
  else
  {
    do
    {
      uint64_t v52 = *v50;
      v50 += 9;
      (*(void (**)(uint64_t))(*(void *)v52 + 32))(v52);
    }
    while (v50 != v51);
    uint64_t v53 = *(void *)(a1 + 528);
    unint64_t v50 = *(uint64_t **)(a1 + 536);
  }
  if ((uint64_t *)(v53 + 72 * *(void *)(a1 + 552)) != v50)
  {
    int v54 = (uint64_t *)(v53 + 72 * *(void *)(a1 + 552));
    while (v50 != v54)
    {
      uint64_t v56 = *(v50 - 9);
      v50 -= 9;
      uint64_t v55 = v56;
      uint64_t *v50 = 0;
      if (v56) {
        (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
      }
    }
    *(void *)(a1 + 536) = v54;
  }
  *(void *)(a1 + 576) = 0;
  if (*(void *)(*(void *)(a1 + 256) + 384))
  {
    int v57 = (char *)*((void *)a2 + 4);
    uint64_t v58 = (void *)*((void *)a2 + 2);
    uint64_t Symbol = v57;
    *(void *)&long long v230 = v58;
    *((void *)&v230 + 1) = (char *)a2 + 24;
    uint64_t v231 = (void *)((char *)a2 + 8);
    while (1)
    {
      if (v57 == v207 && v58 == v208)
      {
        BOOL v59 = *((const char **)&v230 + 1) == v207 && v231 == v208;
        if (v59) {
          break;
        }
      }
      uint64_t v60 = 0;
      do
      {
        uint64_t v61 = (llvm::GlobalValue *)(*(uint64_t (**)(void **))((char *)&off_1F26497F0 + v60))(&Symbol);
        if (v61) {
          BOOL v62 = 1;
        }
        else {
          BOOL v62 = v60 == 16;
        }
        v60 += 16;
      }
      while (!v62);
      uint64_t v63 = v61;
      if (llvm::GlobalValue::hasExternalWeakLinkage(v61))
      {
        uint64_t v64 = *(void *)(a1 + 272);
        uint64_t v65 = llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(a1 + 248), v63);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v64 + 304))(v64, v65, 25);
      }
      uint64_t v66 = 0;
      do
      {
        if ((*(uint64_t (**)(void **))((char *)&off_1F26497D0 + v66))(&Symbol)) {
          break;
        }
        BOOL v59 = v66 == 16;
        v66 += 16;
      }
      while (!v59);
      int v57 = (char *)Symbol;
      uint64_t v58 = (void *)v230;
    }
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 456))(a1))
    {
      uint64_t v67 = (uint64_t *)*((void *)a2 + 14);
      unsigned int v68 = *((_DWORD *)v67 + 8);
      uint64_t v69 = v68 <= 1 ? 1 : v68;
      size_t v70 = v68 <= 0x24 ? v69 : 37;
      uint64_t v209 = *((unsigned int *)v67 + 2);
      uint64_t v211 = *((void *)a2 + 14);
      if (!v209) {
        goto LABEL_150;
      }
      uint64_t v71 = 0;
      int v72 = 0;
      do
        int v72 = 33 * v72 + aSwiftAsyncExte[v71++];
      while (v70 != v71);
      uint64_t v73 = *v67;
      uint64_t v74 = *v67 + 8 * v209 + 8;
      int v75 = 1;
      int v76 = v72;
      while (1)
      {
        uint64_t v77 = v76 & (v209 - 1);
        uint64_t v78 = *(void **)(v73 + 8 * v77);
        if (v78 != (void *)-8)
        {
          if (!v78) {
            goto LABEL_150;
          }
          if (*(_DWORD *)(v74 + 4 * v77) == v72
            && v70 == *v78
            && !memcmp("swift_async_extendedFramePointerFlags", (char *)v78 + *(unsigned int *)(v211 + 20), v70))
          {
            break;
          }
        }
        int v76 = v75 + v77;
        ++v75;
      }
      if (v77 == -1
        || (int)v77 == v209
        || (uint64_t v79 = *(void *)(*(void *)(v73 + 8 * (int)v77) + 8)) == 0
        || *(unsigned char *)(v79 + 16) != 3
        || (*(_DWORD *)(v79 + 32) & 0xFu) - 7 <= 1)
      {
LABEL_150:
        size_t v80 = (llvm::PointerType *)llvm::PointerType::get((llvm::PointerType *)(**(void **)a2 + 1912), 0);
        size_t v81 = operator new(0x78uLL);
        v81[13] = v81[13] & 0x38000000 | 1;
        uint64_t v82 = (const llvm::GlobalValue *)(v81 + 8);
        *(void *)size_t v81 = 0;
        *((void *)v81 + 1) = 0;
        *((void *)v81 + 2) = 0;
        *((void *)v81 + 3) = v81 + 8;
        uint64_t Symbol = "swift_async_extendedFramePointerFlags";
        v232[0] = 259;
        llvm::GlobalVariable::GlobalVariable((unint64_t *)v81 + 4, (uint64_t)a2, v80, 0, 9, 0, (const char **)&Symbol, 0, 0, 0, 0);
        uint64_t v83 = *(void *)(a1 + 272);
        uint64_t v84 = llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(a1 + 248), v82);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v83 + 304))(v83, v84, 25);
      }
    }
  }
  uint64_t v226 = v228;
  uint64_t v227 = 0x1000000000;
  uint64_t Symbol = v232;
  *(void *)&long long v230 = v232;
  *((void *)&v230 + 1) = 16;
  LODWORD(v231) = 0;
  size_t v85 = (void *)((char *)a2 + 40);
  unint64_t v86 = (void *)*((void *)a2 + 6);
  if (v86 == (void *)((char *)a2 + 40)) {
    goto LABEL_202;
  }
  do
  {
    if (!v86) {
      goto LABEL_201;
    }
    unsigned int v87 = 0;
    size_t v88 = v86 - 6;
    while (1)
    {
      uint64_t v89 = v230;
      uint64_t v90 = HIDWORD(v230);
      if ((void *)v230 != Symbol)
      {
        unsigned int v94 = DWORD2(v230);
        goto LABEL_165;
      }
      if (HIDWORD(v230)) {
        break;
      }
LABEL_162:
      unsigned int v94 = DWORD2(v230);
      if (HIDWORD(v230) < DWORD2(v230))
      {
        ++HIDWORD(v230);
        *(void *)(v230 + 8 * v90) = v88;
        goto LABEL_186;
      }
LABEL_165:
      if (3 * v94 <= 4 * (HIDWORD(v230) - (int)v231))
      {
        if (v94 >= 0x40) {
          v94 *= 2;
        }
        else {
          unsigned int v94 = 128;
        }
LABEL_195:
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&Symbol, v94);
        unsigned int v94 = DWORD2(v230);
        uint64_t v89 = v230;
        goto LABEL_167;
      }
      if (v94 - HIDWORD(v230) < v94 >> 3) {
        goto LABEL_195;
      }
LABEL_167:
      unsigned int v95 = v94 - 1;
      unsigned int v96 = (v94 - 1) & ((v88 >> 4) ^ (v88 >> 9));
      uint64_t v97 = (void *)(v89 + 8 * v96);
      uint64_t v98 = (void *)*v97;
      if (*v97 != -1)
      {
        uint64_t v99 = 0;
        int v100 = 1;
        while (v98 != v88)
        {
          if (v99) {
            BOOL v101 = 0;
          }
          else {
            BOOL v101 = v98 == (void *)-2;
          }
          if (v101) {
            uint64_t v99 = v97;
          }
          unsigned int v102 = v96 + v100++;
          unsigned int v96 = v102 & v95;
          uint64_t v97 = (void *)(v89 + 8 * (v102 & v95));
          uint64_t v98 = (void *)*v97;
          if (*v97 == -1) {
            goto LABEL_179;
          }
        }
LABEL_197:
        unsigned int v87 = v227;
        goto LABEL_198;
      }
      uint64_t v99 = 0;
LABEL_179:
      if (v99) {
        unint64_t v103 = v99;
      }
      else {
        unint64_t v103 = v97;
      }
      if ((void *)*v103 == v88) {
        goto LABEL_197;
      }
      if (*v103 == -2) {
        LODWORD(v231) = v231 - 1;
      }
      else {
        ++HIDWORD(v230);
      }
      *unint64_t v103 = v88;
      unsigned int v87 = v227;
LABEL_186:
      if (v87 >= HIDWORD(v227)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v226 + v87) = v88;
      unsigned int v87 = v227 + 1;
      LODWORD(v227) = v227 + 1;
      size_t v88 = (void *)*(v88 - 4);
      if (!v88 || *((unsigned char *)v88 + 16) != 1) {
        goto LABEL_198;
      }
    }
    uint64_t v91 = 0;
    uint64_t v92 = 8 * HIDWORD(v230);
    unint64_t v93 = (void *)v230;
    while ((void *)*v93 != v88)
    {
      if (*v93 == -2) {
        uint64_t v91 = v93;
      }
      ++v93;
      v92 -= 8;
      if (!v92)
      {
        if (!v91) {
          goto LABEL_162;
        }
        void *v91 = v88;
        LODWORD(v231) = v231 - 1;
        goto LABEL_186;
      }
    }
LABEL_198:
    if (v87)
    {
      uint64_t v104 = 8 * v87;
      uint64_t v105 = (char *)v226 - 8;
      do
      {
        sub_1CD89E59C((llvm::TargetMachine **)a1, (uint64_t)a2, *(llvm::GlobalValue **)&v105[v104]);
        v104 -= 8;
      }
      while (v104);
    }
LABEL_201:
    LODWORD(v227) = 0;
    unint64_t v86 = (void *)v86[1];
  }
  while (v86 != v85);
LABEL_202:
  for (uint64_t m = (void *)*((void *)a2 + 8); m != (void *)((char *)a2 + 56); uint64_t m = (void *)m[1])
  {
    if (m) {
      int v107 = (const llvm::GlobalValue *)(m - 7);
    }
    else {
      int v107 = 0;
    }
    sub_1CD89EBC4(a1, v107);
  }
  uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24), &llvm::GCModuleInfo::ID, 1);
  uint64_t v109 = (*(uint64_t (**)(uint64_t, void *))(*(void *)AnalysisPass + 96))(AnalysisPass, &llvm::GCModuleInfo::ID);
  uint64_t v110 = *(unsigned int *)(v109 + 40);
  if (v110)
  {
    uint64_t v111 = v109;
    uint64_t v112 = 8 * v110;
    uint64_t v113 = *(void *)(v109 + 32) - 8;
    do
    {
      uint64_t v114 = sub_1CD89D8BC(a1, *(void *)(v113 + v112));
      if (v114) {
        (*(void (**)(uint64_t, llvm::Module *, uint64_t, uint64_t))(*(void *)v114 + 24))(v114, a2, v111, a1);
      }
      v112 -= 8;
    }
    while (v112);
  }
  unint64_t v210 = (void *)((char *)a2 + 56);
  if (*(unsigned char *)(*(void *)(a1 + 256) + 366))
  {
    int v216 = "llvm.ident";
    LOWORD(v220) = 259;
    NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(a2, &v216);
    if (NamedMetadata)
    {
      size_t v190 = NamedMetadata;
      int NumOperands = llvm::NamedMDNode::getNumOperands(NamedMetadata);
      if (NumOperands)
      {
        int v192 = NumOperands;
        for (unsigned int n = 0; n != v192; ++n)
        {
          uint64_t Operand = llvm::NamedMDNode::getOperand(v190, n);
          uint64_t v195 = *(void *)(Operand - 8 * *(unsigned int *)(Operand + 8));
          (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 272) + 680))(*(void *)(a1 + 272), *(void *)(v195 + 8) + 24, **(void **)(v195 + 8));
        }
      }
    }
  }
  uint64_t v115 = (*(uint64_t (**)(void))(**(void **)(a1 + 248) + 24))(*(void *)(a1 + 248));
  uint64_t v116 = (*(uint64_t (**)(uint64_t))(*(void *)v115 + 200))(v115);
  if (v116)
  {
    uint64_t v196 = v116;
    int v216 = "llvm.commandline";
    LOWORD(v220) = 259;
    unint64_t v197 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(a2, &v216);
    if (v197)
    {
      int v198 = v197;
      if (llvm::NamedMDNode::getNumOperands(v197))
      {
        __n128 v199 = sub_1CD6AD2C8(*(void *)(a1 + 272));
        (*(void (**)(void, uint64_t, void, __n128))(**(void **)(a1 + 272) + 168))(*(void *)(a1 + 272), v196, 0, v199);
        llvm::MCStreamer::emitZeros(*(llvm::MCStreamer **)(a1 + 272), 1);
        int v200 = llvm::NamedMDNode::getNumOperands(v198);
        if (v200)
        {
          int v201 = v200;
          for (iuint64_t i = 0; ii != v201; ++ii)
          {
            uint64_t v203 = llvm::NamedMDNode::getOperand(v198, ii);
            uint64_t v204 = *(void *)(v203 - 8 * *(unsigned int *)(v203 + 8));
            (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 272) + 488))(*(void *)(a1 + 272), *(void *)(v204 + 8) + 24, **(void **)(v204 + 8));
            llvm::MCStreamer::emitZeros(*(llvm::MCStreamer **)(a1 + 272), 1);
          }
        }
        sub_1CCBC2468(*(void *)(a1 + 272));
      }
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 248) + 492) == 3)
  {
    if (*(unsigned char *)(a1 + 596))
    {
      uint64_t v180 = *(llvm::MCContext **)(a1 + 264);
      uint64_t v181 = *(void *)(a1 + 272);
      v224[0] = ".note.GNU-split-stack";
      __int16 v225 = 259;
      LOWORD(v220) = 257;
      uint64_t ELFSection = llvm::MCContext::getELFSection(v180, (const llvm::Twine *)v224, 1, 0, 0, (const llvm::Twine *)&v216, 0, -1, 0);
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v181 + 168))(v181, ELFSection, 0);
      if (*(unsigned char *)(a1 + 597))
      {
        uint64_t v183 = *(llvm::MCContext **)(a1 + 264);
        uint64_t v184 = *(void *)(a1 + 272);
        v224[0] = ".note.GNU-no-split-stack";
        __int16 v225 = 259;
        LOWORD(v220) = 257;
        uint64_t v185 = llvm::MCContext::getELFSection(v183, (const llvm::Twine *)v224, 1, 0, 0, (const llvm::Twine *)&v216, 0, -1, 0);
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)v184 + 168))(v184, v185, 0);
      }
    }
  }
  uint64_t v117 = *((void *)a2 + 14);
  unsigned int v118 = *(_DWORD *)(v117 + 32);
  if (v118 <= 1) {
    uint64_t v119 = 1;
  }
  else {
    uint64_t v119 = v118;
  }
  if (v118 <= 0x13) {
    size_t v120 = v119;
  }
  else {
    size_t v120 = 20;
  }
  uint64_t v212 = (uint64_t *)*((void *)a2 + 14);
  unsigned int v205 = a2;
  uint64_t v206 = *(unsigned int *)(v117 + 8);
  if (!v206) {
    goto LABEL_236;
  }
  uint64_t v121 = 0;
  int v122 = 0;
  do
    int v122 = 33 * v122 + aLlvmInitTrampo_1[v121++];
  while (v120 != v121);
  uint64_t v123 = *v212;
  uint64_t v124 = *v212 + 8 * v206 + 8;
  int v125 = 1;
  int v126 = v122;
  while (1)
  {
    uint64_t v127 = v126 & (v206 - 1);
    uint64_t v128 = *(void **)(v123 + 8 * v127);
    if (v128 != (void *)-8)
    {
      if (!v128) {
        goto LABEL_236;
      }
      if (*(_DWORD *)(v124 + 4 * v127) == v122
        && v120 == *v128
        && !memcmp("llvm.init.trampoline", (char *)v128 + *((unsigned int *)v212 + 5), v120))
      {
        break;
      }
    }
    int v126 = v125 + v127;
    ++v125;
  }
  if (v127 == -1
    || (int)v127 == v206
    || (uint64_t v129 = *(void *)(*(void *)(v123 + 8 * (int)v127) + 8)) == 0
    || *(unsigned char *)(v129 + 16)
    || !*(void *)(v129 + 8))
  {
LABEL_236:
    uint64_t v130 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 256) + 16))(*(void *)(a1 + 256), *(void *)(a1 + 264));
    if (v130) {
      (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 272) + 168))(*(void *)(a1 + 272), v130, 0);
    }
  }
  uint64_t v131 = *(void *)(a1 + 248);
  uint64_t v132 = v210;
  if ((*(unsigned char *)(v131 + 1043) & 1) == 0) {
    goto LABEL_268;
  }
  (*(void (**)(void))(**(void **)(a1 + 272) + 1176))(*(void *)(a1 + 272));
  uint64_t v133 = (const char *)*((void *)v205 + 4);
  uint64_t v134 = (void *)*((void *)v205 + 2);
  uint64_t v135 = (void *)*((void *)v205 + 6);
  size_t v136 = (void *)*((void *)v205 + 8);
  int v216 = v133;
  uint64_t v217 = v134;
  int v218 = v135;
  unsigned int v219 = v136;
  uint64_t v220 = v207;
  uint64_t v221 = v208;
  uint64_t v222 = v85;
  int v223 = v210;
  while (2)
  {
    if (v133 != v207
      || v134 != v208
      || v135 != v85
      || v136 != v132
      || v220 != v207
      || v221 != v208
      || v222 != v85
      || v223 != v132)
    {
      size_t v137 = (void *)sub_1CC4AD368((uint64_t)&v216);
      if (v137[1])
      {
        uint64_t v138 = v137;
        if (!llvm::Value::isTransitiveUsedByMetadataOnly((llvm::Value *)v137))
        {
          int v139 = v138[8];
          if ((v139 & 0x1C00) == 0 && (v138[8] & 0x300) != 0x100)
          {
            if ((*((unsigned char *)v138 + 23) & 0x10) == 0) {
              goto LABEL_262;
            }
            uint64_t v140 = ***(void ***)v138;
            uint64_t v141 = *(void *)(v140 + 152);
            uint64_t v142 = *(unsigned int *)(v140 + 168);
            if (!v142) {
              goto LABEL_260;
            }
            LODWORD(v143) = (v142 - 1) & ((v138 >> 4) ^ (v138 >> 9));
            uint64_t v144 = (void *)(v141 + 16 * v143);
            uint64_t v145 = (_DWORD *)*v144;
            if ((_DWORD *)*v144 != v138)
            {
              int v146 = 1;
              while (v145 != (_DWORD *)-4096)
              {
                int v147 = v143 + v146++;
                uint64_t v143 = v147 & (v142 - 1);
                uint64_t v145 = *(_DWORD **)(v141 + 16 * v143);
                if (v145 == v138)
                {
                  uint64_t v144 = (void *)(v141 + 16 * v143);
                  goto LABEL_261;
                }
              }
LABEL_260:
              uint64_t v144 = (void *)(v141 + 16 * v142);
            }
LABEL_261:
            uint64_t v148 = v144[1];
            if (*(void *)v148 >= 5uLL)
            {
              if ((v139 & 0xC0) == 0 && *(_DWORD *)(v148 + 16) ^ 0x6D766C6C | *(unsigned __int8 *)(v148 + 20) ^ 0x2E)
              {
LABEL_266:
                unint64_t v149 = *(void **)(a1 + 272);
                uint64_t v150 = llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(a1 + 248), (const llvm::GlobalValue *)v138);
                uint64_t v151 = *v149;
                uint64_t v152 = v149;
                uint64_t v132 = v210;
                (*(void (**)(void *, uint64_t))(v151 + 1184))(v152, v150);
              }
            }
            else
            {
LABEL_262:
              if ((v139 & 0xC0) == 0) {
                goto LABEL_266;
              }
            }
          }
        }
      }
      sub_1CC4AD1DC((uint64_t)&v216);
      uint64_t v133 = v216;
      uint64_t v134 = v217;
      uint64_t v135 = v218;
      size_t v136 = v219;
      continue;
    }
    break;
  }
  uint64_t v131 = *(void *)(a1 + 248);
LABEL_268:
  if (*(_DWORD *)(v131 + 492) == 3)
  {
    int v153 = 0;
    uint64_t v154 = (const char *)*((void *)v205 + 4);
    uint64_t v155 = (void *)*((void *)v205 + 2);
    uint64_t v156 = (void *)*((void *)v205 + 6);
    uint64_t v157 = (void *)*((void *)v205 + 8);
    int v216 = v154;
    uint64_t v217 = v155;
    int v218 = v156;
    unsigned int v219 = v157;
    uint64_t v220 = v207;
    uint64_t v221 = v208;
    uint64_t v222 = v85;
    int v223 = v132;
    while (v154 != v207
         || v155 != v208
         || v156 != v85
         || v157 != v132
         || v220 != v207
         || v221 != v208
         || v222 != v85
         || v223 != v132)
    {
      uint64_t v158 = sub_1CC4AD368((uint64_t)&v216);
      int v159 = *(_DWORD *)(v158 + 32);
      if ((v159 & 0x8000) != 0 && (*(_DWORD *)(v158 + 32) & 0xF) != 1)
      {
        uint64_t v160 = (llvm::GlobalValue *)v158;
        if (*(unsigned char *)(v158 + 16))
        {
          if (*(unsigned char *)(v158 + 16) == 3 && (*(_DWORD *)(v158 + 20) & 0x7FFFFFF) == 0) {
            goto LABEL_287;
          }
        }
        else if ((v159 & 0x800000) == 0 && *(void *)(v158 + 72) == v158 + 72)
        {
          goto LABEL_287;
        }
        if ((v159 & 0x30) == 0)
        {
          unint64_t v161 = *(llvm::MCContext **)(a1 + 264);
          uint64_t v162 = *(void *)(a1 + 272);
          v224[0] = ".llvm_sympart";
          __int16 v225 = 259;
          ++v153;
          __int16 v215 = 257;
          uint64_t v163 = llvm::MCContext::getELFSection(v161, (const llvm::Twine *)v224, 1879002117, 0, 0, (const llvm::Twine *)v214, 0, v153, 0);
          (*(void (**)(uint64_t, uint64_t, void))(*(void *)v162 + 168))(v162, v163, 0);
          uint64_t v164 = *(void *)(a1 + 272);
          Partitiounsigned int n = llvm::GlobalValue::getPartition(v160);
          (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)v164 + 488))(v164, Partition, v166);
          llvm::MCStreamer::emitZeros(*(llvm::MCStreamer **)(a1 + 272), 1);
          uint64_t v167 = *(void *)(a1 + 272);
          uint64_t v168 = llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(a1 + 248), v160);
          uint64_t v169 = *(void *)(a1 + 264);
          *(void *)(v169 + 272) += 24;
          uint64_t v170 = *(void *)(v169 + 192);
          if (((v170 + 7) & 0xFFFFFFFFFFFFFFF8) - v170 + 24 > *(void *)(v169 + 200) - v170)
          {
            unsigned int v173 = *(_DWORD *)(v169 + 216) >> 7;
            if (v173 >= 0x1E) {
              LOBYTE(v173) = 30;
            }
            uint64_t v213 = 4096 << v173;
            unint64_t v171 = (unint64_t)operator new(4096 << v173, (std::align_val_t)8uLL);
            unint64_t v174 = *(unsigned int *)(v169 + 216);
            if (v174 >= *(unsigned int *)(v169 + 220)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(v169 + 208) + 8 * v174) = v171;
            ++*(_DWORD *)(v169 + 216);
            *(void *)(v169 + 200) = v171 + v213;
          }
          else
          {
            unint64_t v171 = (v170 + 7) & 0xFFFFFFFFFFFFFFF8;
          }
          *(void *)(v169 + 192) = v171 + 24;
          int v172 = *(unsigned __int8 *)(*(void *)(v169 + 152) + 18) << 16;
          *(unsigned char *)unint64_t v171 = 2;
          *(_DWORD *)(v171 + 1) = v172 | (*(unsigned __int8 *)(v171 + 4) << 24);
          *(void *)(v171 + ++*(_DWORD *)(result + 8) = 0;
          *(void *)(v171 + 16) = v168;
          (*(void (**)(uint64_t, unint64_t, void, void))(*(void *)v167 + 512))(v167, v171, *(unsigned int *)(*(void *)(a1 + 256) + 8), 0);
          uint64_t v132 = v210;
        }
      }
LABEL_287:
      sub_1CC4AD1DC((uint64_t)&v216);
      uint64_t v154 = v216;
      uint64_t v155 = v217;
      uint64_t v156 = v218;
      uint64_t v157 = v219;
      continue;
    }
  }
  (*(void (**)(uint64_t, llvm::Module *))(*(void *)a1 + 240))(a1, v205);
  *(void *)(a1 + 28++*(_DWORD *)(result + 8) = 0;
  uint64_t v175 = *(void *)(a1 + 488);
  *(void *)(a1 + 48++*(_DWORD *)(result + 8) = 0;
  if (v175)
  {
    uint64_t v179 = sub_1CD8A0890(v175);
    MEMORY[0x1D25D9CE0](v179, 0x1020C40D7426AC9);
  }
  llvm::MCStreamer::Finish(*(void **)(a1 + 272), 0);
  (*(void (**)(void))(**(void **)(a1 + 272) + 64))(*(void *)(a1 + 272));
  uint64_t v176 = *(void *)(a1 + 568);
  *(void *)(a1 + 56++*(_DWORD *)(result + 8) = 0;
  if (v176) {
    (*(void (**)(uint64_t))(*(void *)v176 + 8))(v176);
  }
  uint64_t v177 = *(void *)(a1 + 560);
  *(void *)(a1 + 560) = 0;
  if (v177) {
    (*(void (**)(uint64_t))(*(void *)v177 + 8))(v177);
  }
  if ((void *)v230 != Symbol) {
    free((void *)v230);
  }
  if (v226 != v228) {
    free(v226);
  }
  return 0;
}

uint64_t sub_1CD28354C(uint64_t a1, llvm::MachineFunction *this)
{
  *(void *)(a1 + 280) = this;
  uint64_t v4 = *(void *)this;
  if (!llvm::MachineFunction::shouldSplitStack(this)
    || (*(unsigned char *)(a1 + 596) = 1, uint64_t v5 = *((void *)this + 7), !*(void *)(v5 + 48)) && !*(unsigned char *)(v5 + 654))
  {
    *(unsigned char *)(a1 + 597) = 1;
  }
  if (*(unsigned char *)(*(void *)(a1 + 256) + 476))
  {
    uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 248) + 24))(*(void *)(a1 + 248));
    uint64_t Symbol = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v6 + 240))(v6, v4, *(void *)(a1 + 248));
  }
  else
  {
    uint64_t Symbol = llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(a1 + 248), *(const llvm::GlobalValue **)this);
  }
  *(void *)(a1 + 32++*(_DWORD *)(result + 8) = Symbol;
  *(void *)(a1 + 344) = Symbol;
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 480) = 0;
  int v9 = *(_DWORD *)(a1 + 360);
  if (v9 || *(_DWORD *)(a1 + 364))
  {
    uint64_t v10 = (_DWORD *)(a1 + 352);
    uint64_t v11 = *(unsigned int *)(a1 + 368);
    if (v11 <= 4 * v9 || v11 < 0x41)
    {
      if (v11)
      {
        int v12 = *(_DWORD **)v10;
        uint64_t v13 = 8 * v11;
        do
        {
          *int v12 = -1;
          v12 += 2;
          v13 -= 8;
        }
        while (v13);
      }
      *(void *)(a1 + 360) = 0;
    }
    else
    {
      sub_1CB83872C(v10);
    }
  }
  *(void *)(a1 + 384) = *(void *)(a1 + 376);
  int v14 = *(_DWORD *)(a1 + 464);
  if (v14 || *(_DWORD *)(a1 + 468))
  {
    uint64_t v73 = (_DWORD *)(a1 + 456);
    uint64_t v74 = *(unsigned int *)(a1 + 472);
    if (v74 > 4 * v14 && v74 >= 0x41)
    {
      sub_1CD569898(v73);
    }
    else
    {
      if (v74)
      {
        int v75 = *(_DWORD **)v73;
        uint64_t v76 = 16 * v74;
        do
        {
          *int v75 = -1;
          v75 += 4;
          v76 -= 16;
        }
        while (v76);
      }
      *(void *)(a1 + 464) = 0;
    }
  }
  int v15 = *(unsigned __int8 *)(*(void *)(a1 + 256) + 82);
  uint64_t v16 = *(void *)(v4 + 112);
  if (v16)
  {
    int v17 = &unk_1EBCBE000;
    if (!*(_DWORD *)(v16 + 8)) {
      goto LABEL_125;
    }
    uint64_t v18 = *(void *)(v16 + 40);
    if (!v18) {
      goto LABEL_125;
    }
    int v19 = *(_DWORD *)(v18 + 40);
    if (!v19) {
      goto LABEL_125;
    }
    uint64_t v20 = *(void *)(v18 + 24);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
    {
      uint64_t v79 = v20;
      int v77 = v19;
      int v67 = __cxa_guard_acquire(&qword_1EBCBE588);
      int v19 = v77;
      uint64_t v20 = v79;
      int v17 = &unk_1EBCBE000;
      if (v67)
      {
        unint64_t v68 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v68 = 0xFF51AFD7ED558CCDLL;
        }
        qword_1EBCBE580 = v68;
        __cxa_guard_release(&qword_1EBCBE588);
        int v19 = v77;
        uint64_t v20 = v79;
        int v17 = (void *)&unk_1EBCBE000;
      }
    }
    uint64_t v21 = v17[176];
    uint64_t v22 = __ROR8__(v21 ^ 0xD0DB31C61410D441, 30);
    unint64_t v23 = 0x9DDFEA08EB382D69
        * ((v21 - 0x1DAA4ADE8CE29C7ALL) ^ ((0x9DDFEA08EB382D69
                                          * ((v22 - 0x447750EBFF2F1972) ^ (v21 - 0x1DAA4ADE8CE29C7ALL))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v22 - 0x447750EBFF2F1972) ^ (v21 - 0x1DAA4ADE8CE29C7ALL))));
    unsigned int v24 = -348639895 * ((v23 >> 47) ^ v23);
    int v25 = v19 - 1;
    int v26 = 1;
    uint64_t v8 = 0x7972746E652D6E6FLL;
    while (1)
    {
      unsigned int v27 = v24 & v25;
      uint64_t v28 = v20 + 24 * v27;
      unint64_t v29 = *(void **)v28;
      if (*(void *)v28 == -1)
      {
        if ("patchable-function-entry" == (char *)-1) {
          goto LABEL_94;
        }
      }
      else if (v29 == (void *)-2)
      {
        if ("patchable-function-entry" == (char *)-2) {
          goto LABEL_94;
        }
      }
      else if (*(void *)(v28 + 8) == 24)
      {
        BOOL v30 = *v29 == 0x6C62616863746170 && v29[1] == 0x6974636E75662D65;
        if (v30 && v29[2] == 0x7972746E652D6E6FLL) {
          goto LABEL_94;
        }
      }
      if (v29 == (void *)-1) {
        break;
      }
      unsigned int v24 = v26 + v27;
      ++v26;
    }
    uint64_t v16 = *(void *)(v4 + 112);
    if (v16)
    {
LABEL_125:
      if (!*(_DWORD *)(v16 + 8)) {
        goto LABEL_126;
      }
      uint64_t v32 = *(void *)(v16 + 40);
      if (!v32) {
        goto LABEL_126;
      }
      int v33 = *(_DWORD *)(v32 + 40);
      if (!v33) {
        goto LABEL_126;
      }
      uint64_t v34 = *(void *)(v32 + 24);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
      {
        uint64_t v80 = v34;
        int v78 = v33;
        int v69 = __cxa_guard_acquire(&qword_1EBCBE588);
        int v33 = v78;
        uint64_t v34 = v80;
        int v17 = &unk_1EBCBE000;
        if (v69)
        {
          unint64_t v70 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override) {
            unint64_t v70 = 0xFF51AFD7ED558CCDLL;
          }
          qword_1EBCBE580 = v70;
          __cxa_guard_release(&qword_1EBCBE588);
          int v33 = v78;
          uint64_t v34 = v80;
          int v17 = (void *)&unk_1EBCBE000;
        }
      }
      uint64_t v35 = v17[176];
      uint64_t v36 = __ROR8__(v35 ^ 0xAA3A3267791EAF7DLL, 30);
      unint64_t v37 = 0x9DDFEA08EB382D69
          * ((v35 - 0x6C47B2EB309A5459) ^ ((0x9DDFEA08EB382D69
                                            * ((v36 + 0x50251E57CC92A4C1) ^ (v35 - 0x6C47B2EB309A5459))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v36 + 0x50251E57CC92A4C1) ^ (v35 - 0x6C47B2EB309A5459))));
      unsigned int v38 = -348639895 * ((v37 >> 47) ^ v37);
      int v39 = v33 - 1;
      int v40 = 1;
      uint64_t v8 = 0x746E656D75727473;
      while (1)
      {
        unsigned int v41 = v38 & v39;
        uint64_t v42 = v34 + 24 * v41;
        uint64_t v43 = *(void **)v42;
        if (*(void *)v42 == -1)
        {
          if ("function-instrument" == (char *)-1) {
            goto LABEL_94;
          }
        }
        else if (v43 == (void *)-2)
        {
          if ("function-instrument" == (char *)-2) {
            goto LABEL_94;
          }
        }
        else if (*(void *)(v42 + 8) == 19)
        {
          BOOL v44 = *v43 == 0x6E6F6974636E7566 && v43[1] == 0x6D757274736E692DLL;
          if (v44 && *(void *)((char *)v43 + 11) == 0x746E656D75727473) {
            goto LABEL_94;
          }
        }
        if (v43 == (void *)-1) {
          break;
        }
        unsigned int v38 = v40 + v41;
        ++v40;
      }
      uint64_t v16 = *(void *)(v4 + 112);
      if (v16)
      {
LABEL_126:
        if (*(_DWORD *)(v16 + 8))
        {
          uint64_t v46 = *(void *)(v16 + 40);
          if (v46)
          {
            int v47 = *(_DWORD *)(v46 + 40);
            if (v47)
            {
              uint64_t v48 = *(void *)(v46 + 24);
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
              {
                int v81 = v47;
                int v71 = __cxa_guard_acquire(&qword_1EBCBE588);
                int v47 = v81;
                int v17 = &unk_1EBCBE000;
                if (v71)
                {
                  unint64_t v72 = llvm::hashing::detail::fixed_seed_override;
                  if (!llvm::hashing::detail::fixed_seed_override) {
                    unint64_t v72 = 0xFF51AFD7ED558CCDLL;
                  }
                  qword_1EBCBE580 = v72;
                  __cxa_guard_release(&qword_1EBCBE588);
                  int v47 = v81;
                  int v17 = (void *)&unk_1EBCBE000;
                }
              }
              uint64_t v49 = v17[176];
              uint64_t v50 = __ROR8__(v49 ^ 0xA869751E6B684E18, 30);
              unint64_t v51 = 0x9DDFEA08EB382D69
                  * ((v49 + 0x7375858ACBEC128) ^ ((0x9DDFEA08EB382D69
                                                   * ((v50 - 0x126B550998E27C48) ^ (v49 + 0x7375858ACBEC128))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v50 - 0x126B550998E27C48) ^ (v49 + 0x7375858ACBEC128))));
              unsigned int v52 = -348639895 * ((v51 >> 47) ^ v51);
              for (int i = 1; ; ++i)
              {
                unsigned int v54 = v52 & (v47 - 1);
                uint64_t v55 = (uint64_t *)(v48 + 24 * v54);
                uint64_t v56 = *v55;
                if (*v55 == -1)
                {
                  if ("xray-instruction-threshold" == (char *)-1) {
                    goto LABEL_94;
                  }
                }
                else if (v56 == -2)
                {
                  if ("xray-instruction-threshold" == (char *)-2) {
                    goto LABEL_94;
                  }
                }
                else if (v55[1] == 26)
                {
                  uint64_t v8 = *(void *)(v56 + 8);
                  BOOL v57 = *(void *)v56 == 0x736E692D79617278 && v8 == 0x6E6F697463757274;
                  BOOL v58 = v57 && *(void *)(v56 + 16) == 0x6F6873657268742DLL;
                  if (v58 && *(_WORD *)(v56 + 24) == 25708) {
                    goto LABEL_94;
                  }
                }
                if (v56 == -1) {
                  break;
                }
                unsigned int v52 = i + v54;
              }
            }
          }
        }
      }
    }
  }
  BOOL v60 = sub_1CD281938((uint64_t *)this, (const llvm::Value *)v8);
  if (v15 || v60 || (*(unsigned char *)(*((void *)this + 1) + 1042) & 0x10) != 0 || *((_DWORD *)this + 160) == 2)
  {
LABEL_94:
    uint64_t v82 = "func_begin";
    __int16 v83 = 259;
    Tempuint64_t Symbol = llvm::MCContext::createTempSymbol(*(llvm::MCContext **)(a1 + 264), (const llvm::Twine *)&v82, 1);
    *(void *)(a1 + 520) = TempSymbol;
    if (v15) {
      *(void *)(a1 + 344) = TempSymbol;
    }
  }
  BOOL v62 = *(uint64_t **)(a1 + 8);
  uint64_t v63 = *v62;
  uint64_t v64 = v62[1];
  if (v63 == v64)
  {
LABEL_99:
    uint64_t v65 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v63 != &llvm::MachineOptimizationRemarkEmitterPass::ID)
    {
      v63 += 16;
      if (v63 == v64) {
        goto LABEL_99;
      }
    }
    uint64_t v65 = *(void *)(v63 + 8);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)v65 + 96))(v65, &llvm::MachineOptimizationRemarkEmitterPass::ID);
  *(void *)(a1 + 312) = *(void *)(result + 248);
  return result;
}

void sub_1CD283D84(uint64_t a1)
{
  v50[24] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(*(void *)(a1 + 280) + 64);
  uint64_t v3 = *(void *)(v2 + 8);
  uint64_t v4 = *(void *)(v2 + 16);
  if (v3 != v4)
  {
    uint64_t v41 = *(void *)(*(void *)(a1 + 280) + 64);
    uint64_t v48 = v50;
    uint64_t v49 = 0x400000000;
    unint64_t v5 = v4 - v3;
    if ((v5 & 0xFFFFFFFF0) != 0)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (v5 >> 4);
      do
      {
        int v9 = (llvm::MachineConstantPoolEntry *)(*(void *)(v41 + 8) + 16 * v7);
        unsigned __int8 v42 = *((unsigned char *)v9 + 8);
        unsigned int SectionKind = llvm::MachineConstantPoolEntry::getSectionKind(v9, (const llvm::DataLayout *)(*(void *)(*(void *)(a1 + 288) + 2064) + 272));
        if (*((unsigned char *)v9 + 9)) {
          uint64_t v11 = 0;
        }
        else {
          uint64_t v11 = *(void *)v9;
        }
        uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 248) + 24))(*(void *)(a1 + 248));
        unint64_t v1 = v1 & 0xFFFFFFFF00000000 | SectionKind;
        uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, unsigned __int8 *))(*(void *)v12 + 56))(v12, *(void *)(*(void *)(a1 + 288) + 2064) + 272, v1, v11, &v42);
        int v14 = v49;
        int v15 = (char *)v48;
        uint64_t v16 = 48 * v49 - 48;
        uint64_t v17 = v49;
        while (v17)
        {
          --v17;
          uint64_t v18 = *(void *)((char *)v48 + v16);
          v16 -= 48;
          if (v18 == v13)
          {
            int v14 = v17;
            goto LABEL_18;
          }
        }
        *(void *)&long long v44 = v13;
        BYTE8(v44) = v42;
        std::string::size_type v45 = v47;
        uint64_t v46 = 0x400000000;
        if (v49 >= HIDWORD(v49))
        {
          uint64_t v43 = 0;
          llvm::SmallVectorBase<unsigned int>::mallocForGrow();
        }
        int v19 = (char *)v48 + 48 * v49;
        uint64_t v20 = v44;
        v19[8] = BYTE8(v44);
        *(void *)int v19 = v20;
        *((void *)v19 + 3) = 0x400000000;
        *((void *)v19 + 2) = v19 + 32;
        uint64_t v21 = (uint64_t)(v19 + 16);
        if (v46) {
          sub_1CC0778D4(v21, (uint64_t)&v45);
        }
        LODWORD(v49) = v49 + 1;
        if (v45 != v47) {
          free(v45);
        }
        int v15 = (char *)v48;
LABEL_18:
        uint64_t v22 = &v15[48 * v14];
        unsigned int v24 = v22[8];
        unint64_t v23 = (unsigned __int8 *)(v22 + 8);
        if (v42 > v24)
        {
          *unint64_t v23 = v42;
          int v15 = (char *)v48;
        }
        int v25 = &v15[48 * v14];
        unint64_t v26 = *((unsigned int *)v25 + 6);
        if (v26 >= *((unsigned int *)v25 + 7)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*((void *)v25 + 2) + 4 * v26) = v7;
        ++*((_DWORD *)v25 + 6);
        ++v7;
      }
      while (v7 != v8);
      uint64_t v40 = v49;
      if (v49)
      {
        uint64_t v27 = 0;
        int v28 = 0;
        uint64_t v29 = 0;
        do
        {
          uint64_t v30 = *((unsigned int *)v48 + 12 * v27 + 6);
          if (v30)
          {
            uint64_t v31 = 0;
            uint64_t v32 = 4 * v30;
            do
            {
              uint64_t v33 = *(unsigned int *)(*((void *)v48 + 6 * v27 + 2) + v31);
              uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 288))(a1, v33);
              if (!sub_1CC34BE58(v34, 1))
              {
                if (v29 != *((void *)v48 + 6 * v27))
                {
                  (*(void (**)(void))(**(void **)(a1 + 272) + 168))(*(void *)(a1 + 272));
                  sub_1CD27C664(a1, *((unsigned __int8 *)v48 + 48 * v27 + 8), 0);
                  int v28 = 0;
                  uint64_t v29 = *((void *)v48 + 6 * v27);
                }
                long long v44 = *(_OWORD *)(*(void *)(v41 + 8) + 16 * v33);
                int v35 = (v28 + (1 << SBYTE8(v44)) - 1) & -(1 << SBYTE8(v44));
                llvm::MCStreamer::emitZeros(*(llvm::MCStreamer **)(a1 + 272), (v35 - v28));
                int SizeInBytes = llvm::MachineConstantPoolEntry::getSizeInBytes((llvm::Type ***)&v44, (const llvm::DataLayout *)(*(void *)(*(void *)(a1 + 288) + 2064) + 272));
                (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 272) + 192))(*(void *)(a1 + 272), v34, 0);
                if (BYTE9(v44)) {
                  (*(void (**)(uint64_t, void))(*(void *)a1 + 312))(a1, v44);
                }
                else {
                  sub_1CD27C7A4(a1, (llvm::DataLayout *)(*(void *)(*(void *)(a1 + 288) + 2064) + 272), (uint64_t *)v44);
                }
                int v28 = SizeInBytes + v35;
              }
              v31 += 4;
            }
            while (v32 != v31);
          }
          ++v27;
        }
        while (v27 != v40);
        unint64_t v37 = (char *)v48;
        if (!v49) {
          goto LABEL_42;
        }
        uint64_t v38 = 48 * v49;
        do
        {
          int v39 = *(char **)&v37[v38 - 32];
          if (&v37[v38 - 16] != v39) {
            free(v39);
          }
          v38 -= 48;
        }
        while (v38);
      }
      unint64_t v37 = (char *)v48;
LABEL_42:
      if (v37 != (char *)v50) {
        free(v37);
      }
    }
  }
}

uint64_t sub_1CD2843F0(uint64_t result)
{
  unint64_t v1 = *(void **)(result + 280);
  uint64_t v2 = (llvm::MachineJumpTableInfo *)v1[9];
  if (v2 && *(_DWORD *)v2 != 4 && *((void *)v2 + 1) != *((void *)v2 + 2))
  {
    uint64_t v3 = result;
    uint64_t v4 = *v1;
    uint64_t v5 = *(void *)(*v1 + 40);
    uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(result + 248) + 24))(*(void *)(result + 248));
    int v7 = (*(uint64_t (**)(uint64_t, BOOL, uint64_t))(*(void *)v6 + 104))(v6, *(_DWORD *)v2 == 3, v4);
    if (v7)
    {
      Entrychar Alignment = llvm::MachineJumpTableInfo::getEntryAlignment(v2, (const llvm::DataLayout *)(v5 + 272));
      sub_1CD27C664(v3, (63 - __clz(EntryAlignment)), 0);
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 272) + 232))(*(void *)(v3 + 272), 3);
    }
    else
    {
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v6 + 88))(v6, v4, *(void *)(v3 + 248));
      (*(void (**)(void, uint64_t, void))(**(void **)(v3 + 272) + 168))(*(void *)(v3 + 272), v9, 0);
      unsigned int v10 = llvm::MachineJumpTableInfo::getEntryAlignment(v2, (const llvm::DataLayout *)(v5 + 272));
      uint64_t result = sub_1CD27C664(v3, (63 - __clz(v10)), 0);
    }
    uint64_t v11 = -1431655765 * ((*((void *)v2 + 2) - *((void *)v2 + 1)) >> 3);
    if (!v11) {
      goto LABEL_82;
    }
    uint64_t v12 = 0;
    uint64_t v13 = &v68;
    while (1)
    {
      int v14 = (int ***)(*((void *)v2 + 1) + 24 * v12);
      if (*v14 == v14[1]) {
        goto LABEL_11;
      }
      if (*(_DWORD *)v2 != 3 || !*(unsigned char *)(*(void *)(v3 + 256) + 352)) {
        goto LABEL_74;
      }
      BOOL v58 = v13;
      uint64_t v59 = v11;
      int v60 = v7;
      uint64_t v61 = v5;
      uint64_t v64 = v13;
      uint64_t v65 = v13;
      uint64_t v66 = 16;
      int v67 = 0;
      uint64_t v15 = *(void *)(*(uint64_t (**)(void))(**(void **)(*(void *)(v3 + 280) + 16) + 120))(*(void *)(*(void *)(v3 + 280) + 16));
      uint64_t v63 = (*(uint64_t (**)(void))(v15 + 1576))();
      BOOL v57 = v14;
      uint64_t v17 = *v14;
      uint64_t v16 = v14[1];
      while (v17 != v16)
      {
        uint64_t v18 = *v17;
        int v19 = v65;
        uint64_t v20 = HIDWORD(v66);
        if (v65 == v64)
        {
          if (HIDWORD(v66))
          {
            uint64_t v21 = 0;
            uint64_t v22 = 8 * HIDWORD(v66);
            unint64_t v23 = (int **)v65;
            while (*v23 != v18)
            {
              if (*v23 == (int *)-2) {
                uint64_t v21 = v23;
              }
              ++v23;
              v22 -= 8;
              if (!v22)
              {
                if (!v21) {
                  goto LABEL_25;
                }
                *uint64_t v21 = v18;
                --v67;
                goto LABEL_49;
              }
            }
            goto LABEL_54;
          }
LABEL_25:
          unsigned int v24 = v66;
          if (HIDWORD(v66) < v66)
          {
            ++HIDWORD(v66);
            v65[v20] = (uint64_t)v18;
LABEL_49:
            uint64_t Symbol = llvm::MachineBasicBlock::getSymbol((llvm::MachineBasicBlock *)v18);
            uint64_t v35 = *(void *)(v3 + 264);
            *(void *)(v35 + 272) += 24;
            uint64_t v36 = *(void *)(v35 + 192);
            if (((v36 + 7) & 0xFFFFFFFFFFFFFFF8) - v36 + 24 > *(void *)(v35 + 200) - v36)
            {
              unsigned int v44 = *(_DWORD *)(v35 + 216) >> 7;
              if (v44 >= 0x1E) {
                LOBYTE(v44) = 30;
              }
              uint64_t v45 = 4096 << v44;
              unint64_t v37 = (unint64_t)operator new(4096 << v44, (std::align_val_t)8uLL);
              unint64_t v46 = *(unsigned int *)(v35 + 216);
              if (v46 >= *(unsigned int *)(v35 + 220)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*(void *)(v35 + 208) + 8 * v46) = v37;
              ++*(_DWORD *)(v35 + 216);
              *(void *)(v35 + 200) = v37 + v45;
            }
            else
            {
              unint64_t v37 = (v36 + 7) & 0xFFFFFFFFFFFFFFF8;
            }
            *(void *)(v35 + 192) = v37 + 24;
            int v38 = *(unsigned __int8 *)(*(void *)(v35 + 152) + 18) << 16;
            *(unsigned char *)unint64_t v37 = 2;
            *(_DWORD *)(v37 + 1) = v38 | (*(unsigned __int8 *)(v37 + 4) << 24);
            *(void *)(v37 + ++*(_DWORD *)(result + 8) = 0;
            *(void *)(v37 + 16) = Symbol;
            uint64_t v39 = *(void *)(v3 + 272);
            uint64_t v40 = sub_1CD89F230((void *)v3, v12, v18[6]);
            uint64_t v41 = *(void *)(v3 + 264);
            *(void *)(v41 + 272) += 32;
            uint64_t v42 = *(void *)(v41 + 192);
            if (((v42 + 7) & 0xFFFFFFFFFFFFFFF8) - v42 + 32 > *(void *)(v41 + 200) - v42)
            {
              unsigned int v47 = *(_DWORD *)(v41 + 216) >> 7;
              if (v47 >= 0x1E) {
                LOBYTE(v47) = 30;
              }
              uint64_t v62 = 4096 << v47;
              unint64_t v43 = (unint64_t)operator new(4096 << v47, (std::align_val_t)8uLL);
              unint64_t v48 = *(unsigned int *)(v41 + 216);
              if (v48 >= *(unsigned int *)(v41 + 220)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*(void *)(v41 + 208) + 8 * v4++*(_DWORD *)(result + 8) = v43;
              ++*(_DWORD *)(v41 + 216);
              *(void *)(v41 + 200) = v43 + v62;
            }
            else
            {
              unint64_t v43 = (v42 + 7) & 0xFFFFFFFFFFFFFFF8;
            }
            *(void *)(v41 + 192) = v43 + 32;
            *(unsigned char *)unint64_t v43 = 0;
            *(_DWORD *)(v43 + 1) = (*(unsigned __int8 *)(v43 + 4) << 24) | 0x12;
            *(void *)(v43 + ++*(_DWORD *)(result + 8) = 0;
            *(void *)(v43 + 16) = v37;
            *(void *)(v43 + 24) = v63;
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v39 + 280))(v39, v40, v43);
            goto LABEL_54;
          }
        }
        else
        {
          unsigned int v24 = v66;
        }
        if (3 * v24 <= 4 * (HIDWORD(v66) - v67))
        {
          if (v24 >= 0x40) {
            v24 *= 2;
          }
          else {
            unsigned int v24 = 128;
          }
        }
        else if (v24 - HIDWORD(v66) >= v24 >> 3)
        {
          goto LABEL_30;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v64, v24);
        unsigned int v24 = v66;
        int v19 = v65;
LABEL_30:
        unsigned int v25 = v24 - 1;
        unsigned int v26 = (v24 - 1) & ((v18 >> 4) ^ (v18 >> 9));
        uint64_t v27 = (int **)&v19[v26];
        int v28 = *v27;
        if (*v27 == (int *)-1)
        {
          uint64_t v29 = 0;
LABEL_42:
          if (v29) {
            uint64_t v33 = v29;
          }
          else {
            uint64_t v33 = v27;
          }
          if (*v33 != v18)
          {
            if (*v33 == (int *)-2) {
              --v67;
            }
            else {
              ++HIDWORD(v66);
            }
            *uint64_t v33 = v18;
            goto LABEL_49;
          }
        }
        else
        {
          uint64_t v29 = 0;
          int v30 = 1;
          while (v28 != v18)
          {
            if (v29) {
              BOOL v31 = 0;
            }
            else {
              BOOL v31 = v28 == (int *)-2;
            }
            if (v31) {
              uint64_t v29 = v27;
            }
            unsigned int v32 = v26 + v30++;
            unsigned int v26 = v32 & v25;
            uint64_t v27 = (int **)&v19[v32 & v25];
            int v28 = *v27;
            if (*v27 == (int *)-1) {
              goto LABEL_42;
            }
          }
        }
LABEL_54:
        ++v17;
      }
      if (v65 != v64) {
        free(v65);
      }
      uint64_t v5 = v61;
      int v7 = v60;
      uint64_t v13 = v58;
      uint64_t v11 = v59;
      int v14 = v57;
LABEL_74:
      if (*(_DWORD *)(v5 + 300) == 2) {
        int v49 = v7;
      }
      else {
        int v49 = 1;
      }
      if (v49 != 1)
      {
        uint64_t v50 = *(void *)(v3 + 272);
        JTIuint64_t Symbol = llvm::MachineFunction::getJTISymbol(*(llvm::MachineFunction **)(v3 + 280), v12, *(llvm::MCContext **)(v3 + 264), 1);
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)v50 + 192))(v50, JTISymbol, 0);
      }
      uint64_t v52 = llvm::MachineFunction::getJTISymbol(*(llvm::MachineFunction **)(v3 + 280), v12, *(llvm::MCContext **)(v3 + 264), 0);
      uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v3 + 272) + 192))(*(void *)(v3 + 272), v52, 0);
      uint64_t v53 = v14;
      unsigned int v54 = (llvm::MachineBasicBlock **)*v14;
      uint64_t v55 = (llvm::MachineBasicBlock **)v53[1];
      while (v54 != v55)
      {
        uint64_t v56 = *v54++;
        uint64_t result = sub_1CD89F340((void *)v3, v2, v56, v12);
      }
LABEL_11:
      if (++v12 == v11)
      {
LABEL_82:
        if (v7) {
          return (*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 272) + 232))(*(void *)(v3 + 272), 4);
        }
        return result;
      }
    }
  }
  return result;
}

void sub_1CD284B84(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  if (*(unsigned char *)(a2 + 16) != 8) {
    return;
  }
  int v6 = *(_DWORD *)(a2 + 20);
  if ((v6 & 0x40000000) != 0)
  {
    uint64_t v8 = *(uint64_t **)(a2 - 8);
    uint64_t v7 = v6 & 0x7FFFFFF;
    if (!v7) {
      goto LABEL_79;
    }
    goto LABEL_6;
  }
  uint64_t v7 = v6 & 0x7FFFFFF;
  uint64_t v8 = (uint64_t *)(a2 - 32 * v7);
  if (v7)
  {
LABEL_6:
    uint64_t v9 = &v8[4 * v7];
    while (1)
    {
      uint64_t v10 = *v8;
      uint64_t v11 = *(_DWORD *)(*v8 + 20) & 0x7FFFFFF;
      uint64_t v12 = -v11;
      uint64_t v13 = *(void *)(*v8 - 32 * v11 + 32);
      unsigned int v14 = *(unsigned __int8 *)(v13 + 16);
      if (v13) {
        BOOL v15 = v14 == 16;
      }
      else {
        BOOL v15 = 0;
      }
      if (v15)
      {
        uint64_t v16 = *(unsigned int *)(v13 + 32);
        if (v16 >= 0x41)
        {
          int v42 = 0;
          int64_t v43 = (unint64_t)(v16 + 63) >> 6;
          do
          {
            BOOL v20 = v43-- < 1;
            if (v20) {
              break;
            }
            unint64_t v44 = *(void *)(*(void *)(v13 + 24) + 8 * v43);
            v42 += __clz(v44);
          }
          while (!v44);
          int v45 = v16 | 0xFFFFFFC0;
          if ((v16 & 0x3F) == 0) {
            int v45 = 0;
          }
          if (v42 + v45 == v16) {
            goto LABEL_79;
          }
        }
        else if (!*(void *)(v13 + 24))
        {
          goto LABEL_79;
        }
      }
      else
      {
        if (v13) {
          BOOL v19 = v14 == 17;
        }
        else {
          BOOL v19 = 0;
        }
        if (v19)
        {
          if (sub_1CB844168(v13, 0.0)) {
            goto LABEL_79;
          }
          uint64_t v12 = -(uint64_t)(*(_DWORD *)(v10 + 20) & 0x7FFFFFF);
        }
        else
        {
          BOOL v20 = v14 > 0x14;
          int v21 = (1 << v14) & 0x1C2000;
          if (!v20 && v21 != 0) {
            goto LABEL_79;
          }
        }
      }
      uint64_t v17 = *(void *)(v10 + 32 * v12);
      if (v17) {
        BOOL v18 = *(unsigned char *)(v17 + 16) == 16;
      }
      else {
        BOOL v18 = 0;
      }
      if (!v18) {
        goto LABEL_18;
      }
      memset(v56, 0, sizeof(v56));
      unint64_t v23 = (__n128 *)sub_1CD483108(a3, (unint64_t)v56);
      unsigned int v24 = (__n128 *)(*(void *)a3 + 24 * *(unsigned int *)(a3 + 8));
      a4 = *v23;
      v24[1].n128_u64[0] = v23[1].n128_u64[0];
      *unsigned int v24 = a4;
      unsigned int v25 = *(_DWORD *)(a3 + 8) + 1;
      *(_DWORD *)(a3 + ++*(_DWORD *)(result + 8) = v25;
      uint64_t v26 = *(unsigned int *)(v17 + 32);
      if (v26 < 0x41) {
        break;
      }
      int v28 = 0;
      int64_t v29 = (unint64_t)(v26 + 63) >> 6;
      do
      {
        BOOL v20 = v29-- < 1;
        if (v20) {
          break;
        }
        unint64_t v30 = *(void *)(*(void *)(v17 + 24) + 8 * v29);
        v28 += __clz(v30);
      }
      while (!v30);
      int v31 = v26 | 0xFFFFFFC0;
      if ((v26 & 0x3F) == 0) {
        int v31 = 0;
      }
      if ((v26 - v28 - v31) <= 0x40)
      {
        unint64_t v27 = **(void **)(v17 + 24);
LABEL_38:
        if (!(v27 >> 16)) {
          goto LABEL_40;
        }
      }
      LODWORD(v27) = 0xFFFF;
LABEL_40:
      uint64_t v32 = *(void *)a3 + 24 * v25;
      *(_DWORD *)(v32 - 24) = v27;
      *(void *)(v32 - 16) = *(void *)(v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) + 32);
      uint64_t v33 = *(void *)(v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) + 64);
      unsigned int v34 = *(unsigned __int8 *)(v33 + 16);
      if (v33) {
        BOOL v35 = v34 == 16;
      }
      else {
        BOOL v35 = 0;
      }
      if (v35)
      {
        uint64_t v36 = *(unsigned int *)(v33 + 32);
        if (v36 >= 0x41)
        {
          int v46 = 0;
          int64_t v47 = (unint64_t)(v36 + 63) >> 6;
          do
          {
            BOOL v20 = v47-- < 1;
            if (v20) {
              break;
            }
            unint64_t v48 = *(void *)(*(void *)(v33 + 24) + 8 * v47);
            v46 += __clz(v48);
          }
          while (!v48);
          int v49 = v36 | 0xFFFFFFC0;
          if ((v36 & 0x3F) == 0) {
            int v49 = 0;
          }
          if (v46 + v49 == v36) {
            goto LABEL_18;
          }
LABEL_47:
          if (*(_DWORD *)(*(void *)(a1 + 248) + 484) == 21) {
            llvm::report_fatal_error((llvm *)"associated data of XXStructor list is not yet supported on AIX", (const llvm::Twine *)1);
          }
          unint64_t v37 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) + 64));
          if (*((unsigned __int8 *)v37 + 16) >= 4u) {
            int v38 = 0;
          }
          else {
            int v38 = v37;
          }
          *(void *)(v32 - ++*(_DWORD *)(result + 8) = v38;
          goto LABEL_18;
        }
        if (*(void *)(v33 + 24)) {
          goto LABEL_47;
        }
      }
      else
      {
        if (v33) {
          BOOL v39 = v34 == 17;
        }
        else {
          BOOL v39 = 0;
        }
        if (v39)
        {
          if ((sub_1CB844168(v33, 0.0) & 1) == 0) {
            goto LABEL_47;
          }
        }
        else
        {
          BOOL v20 = v34 > 0x14;
          int v40 = (1 << v34) & 0x1C2000;
          if (v20 || v40 == 0) {
            goto LABEL_47;
          }
        }
      }
LABEL_18:
      v8 += 4;
      if (v8 == v9) {
        goto LABEL_79;
      }
    }
    unint64_t v27 = *(void *)(v17 + 24);
    goto LABEL_38;
  }
LABEL_79:
  uint64_t v50 = *(__n128 **)a3;
  unint64_t v51 = *(unsigned int *)(a3 + 8);
  if (v51 < 0x81)
  {
LABEL_83:
    sub_1CD28A3F0(v50, (__n128 *)((char *)v50 + 24 * v51), v51, 0, 0, a4);
  }
  else
  {
    uint64_t v52 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    unint64_t v53 = v51;
    while (1)
    {
      unsigned int v54 = (int *)operator new(24 * v53, v52);
      if (v54) {
        break;
      }
      BOOL v20 = v53 > 1;
      v53 >>= 1;
      if (!v20) {
        goto LABEL_83;
      }
    }
    uint64_t v55 = v54;
    sub_1CD28A3F0(v50, (__n128 *)((char *)v50 + 24 * v51), v51, v54, v53, a4);
    operator delete(v55);
  }
}

uint64_t sub_1CD284F40(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 272) + 520))(*(void *)(a1 + 272), a2, 1);
}

uint64_t sub_1CD284F78(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 272) + 520))(*(void *)(a1 + 272), a2, 2);
}

uint64_t sub_1CD284FB0(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 272) + 520))(*(void *)(a1 + 272), a2, 4);
}

uint64_t sub_1CD284FE8(uint64_t a1, uint64_t a2, llvm::MCConstantExpr *this, unsigned int a4, int a5)
{
  if (*(unsigned char *)(*(void *)(a1 + 256) + 338)) {
    BOOL v9 = a5 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 264);
    *(void *)(v10 + 272) += 24;
    uint64_t v11 = *(void *)(v10 + 192);
    if (((v11 + 7) & 0xFFFFFFFFFFFFFFF8) - v11 + 24 > *(void *)(v10 + 200) - v11)
    {
      unsigned int v15 = *(_DWORD *)(v10 + 216) >> 7;
      if (v15 >= 0x1E) {
        LOBYTE(v15) = 30;
      }
      uint64_t v16 = 4096 << v15;
      uint64_t v12 = (uint64_t)operator new(4096 << v15, (std::align_val_t)8uLL);
      unsigned int v17 = *(_DWORD *)(v10 + 216);
      if (v17 >= *(_DWORD *)(v10 + 220)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v10 + 208) + 8 * v17) = v12;
      ++*(_DWORD *)(v10 + 216);
      *(void *)(v10 + 200) = v12 + v16;
    }
    else
    {
      uint64_t v12 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(v10 + 192) = v12 + 24;
    int v13 = *(unsigned __int8 *)(*(void *)(v10 + 152) + 18) << 16;
    *(unsigned char *)uint64_t v12 = 2;
    *(_DWORD *)(v12 + 1) = v13 | (*(unsigned __int8 *)(v12 + 4) << 24);
    *(void *)(v12 + ++*(_DWORD *)(result + 8) = 0;
    *(void *)(v12 + 16) = a2;
    if (this)
    {
      unint64_t v20 = llvm::MCConstantExpr::create(this, *(void *)(a1 + 264), 0, 0);
      llvm::MCBinaryExpr::create(0, v12, v20, *(void *)(a1 + 264), 0);
    }
    unsigned int v14 = *(uint64_t (**)(void))(**(void **)(a1 + 272) + 512);
    return v14();
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, llvm::MCConstantExpr *))(**(void **)(a1 + 272) + 376))(*(void *)(a1 + 272), a2, this);
    if (a4 >= 5)
    {
      BOOL v19 = *(llvm::MCStreamer **)(a1 + 272);
      return llvm::MCStreamer::emitZeros(v19, a4 - 4);
    }
  }
  return result;
}

uint64_t sub_1CD2852DC(llvm::DataLayout *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v7 = a3;
  uint64_t v186 = *MEMORY[0x1E4F143B8];
  while (1)
  {
    uint64_t v10 = *(llvm::Type **)a2;
    uint64_t v11 = sub_1CB83544C((uint64_t)a1, *(void *)a2);
    BOOL v13 = v12 == 1;
    uint64_t Alignment = llvm::DataLayout::getAlignment(a1, v10, 1);
    if (v13)
    {
      uint64_t v20 = Alignment;
      uint64_t Alignment = v20;
      if (a4) {
        goto LABEL_10;
      }
    }
    else if (a4)
    {
      goto LABEL_10;
    }
    uint64_t v16 = *(void *)(a2 + 8);
    if (v16 && !*(void *)(v16 + 8))
    {
      uint64_t v17 = *(void *)(v16 + 24);
      a4 = *(unsigned __int8 *)(v17 + 16) >= 0x15u ? 0 : (unsigned __int8 *)v17;
    }
    else
    {
      a4 = 0;
    }
LABEL_10:
    unint64_t v18 = (unint64_t)(v11 + 7) >> 3;
    int v19 = *(unsigned __int8 *)(a2 + 16);
    if ((v19 - 11) <= 2)
    {
      uint64_t v32 = ((1 << Alignment) + v18 - 1) & -(1 << Alignment);
      uint64_t v33 = *(llvm::MCStreamer **)(v7 + 272);
      return llvm::MCStreamer::emitZeros(v33, v32);
    }
    switch(v19)
    {
      case 19:
        unsigned int v34 = *(uint64_t (**)(uint64_t, void, uint64_t))(**(void **)(v7 + 272) + 520);
        uint64_t v35 = ((1 << Alignment) + v18 - 1) & -(1 << Alignment);
        uint64_t v36 = *(void *)(v7 + 272);
        return v34(v36, 0, v35);
      case 17:
        uint64_t v47 = *(void *)(a2 + 32);
        if ((_UNKNOWN *)v47 == &unk_1CFB2E344)
        {
          llvm::detail::DoubleAPFloat::DoubleAPFloat(&v182, (const llvm::detail::DoubleAPFloat *)(a2 + 32));
        }
        else
        {
          int v182 = *(const char **)(a2 + 32);
          if ((*(_DWORD *)(v47 + 8) + 64) >= 0x80) {
            operator new[]();
          }
          char v48 = *(unsigned char *)(a2 + 52);
          int v49 = v48 & 7;
          char v185 = v48 & 0xF;
          int v184 = *(_DWORD *)(a2 + 48);
          BOOL v51 = (v48 & 6) != 0 && v49 != 3;
          if (v49 == 1 || v51)
          {
            uint64_t v52 = *(unsigned int *)(v47 + 8);
            if ((v52 - 64) <= 0xFFFFFF7F) {
              unint64_t v53 = (uint64_t *)Alignment;
            }
            else {
              unint64_t v53 = &v183;
            }
            unsigned int v54 = (uint64_t *)(a2 + 40);
            if ((*(_DWORD *)(*(void *)(a2 + 32) + 8) - 64) < 0xFFFFFF80) {
              unsigned int v54 = *(uint64_t **)(a2 + 40);
            }
            if (v52 <= 0xFFFFFFBF)
            {
              unint64_t v55 = (unint64_t)(v52 + 64) >> 6;
              do
              {
                uint64_t v56 = *v54++;
                *v53++ = v56;
                --v55;
              }
              while (v55);
            }
          }
        }
        uint64_t result = sub_1CD2877FC((uint64_t)&v181, *(llvm::Type **)a2, v7);
        if (v182 == (const char *)&unk_1CFB2E344) {
          return (uint64_t)sub_1CB845718(&v183);
        }
        if ((*((_DWORD *)v182 + 2) - 64) <= 0xFFFFFF7F)
        {
          uint64_t result = v183;
          if (v183) {
            return MEMORY[0x1D25D9CB0](v183, 0x1000C8000313F17);
          }
        }
        return result;
      case 16:
        uint64_t v37 = (1 << Alignment) + v18 - 1;
        uint64_t v38 = -(1 << Alignment);
        uint64_t result = sub_1CB83544C((uint64_t)a1, *(void *)a2);
        unint64_t v40 = result + 7;
        if (v39 == 1) {
        uint64_t v41 = v37 & v38;
        }
        unint64_t v42 = v40 >> 3;
        if (v40 <= 0x47)
        {
          if (*(unsigned char *)(v7 + 504))
          {
            int64_t v43 = (llvm::raw_ostream *)(*(uint64_t (**)(void))(**(void **)(v7 + 272) + 120))(*(void *)(v7 + 272));
            unint64_t v44 = (uint64_t *)(a2 + 24);
            if (*(_DWORD *)(a2 + 32) >= 0x41u) {
              unint64_t v44 = (uint64_t *)*v44;
            }
            uint64_t v45 = *v44;
            uint64_t v181 = (uint64_t)&unk_1F25FF808;
            int v182 = "0x%llx\n";
            uint64_t v183 = v45;
            llvm::raw_ostream::operator<<(v43, (uint64_t)&v181);
          }
          int v46 = (void *)(a2 + 24);
          if (*(_DWORD *)(a2 + 32) >= 0x41u) {
            int v46 = (void *)*v46;
          }
          uint64_t result = (*(uint64_t (**)(void, void, unint64_t))(**(void **)(v7 + 272) + 520))(*(void *)(v7 + 272), *v46, v40 >> 3);
LABEL_160:
          uint64_t v110 = v41 - v42;
          if (v41 == v42) {
            return result;
          }
          uint64_t v111 = *(llvm::MCStreamer **)(v7 + 272);
          return llvm::MCStreamer::emitZeros(v111, v110);
        }
        uint64_t v130 = *(void *)(*(void *)(v7 + 288) + 2064);
        unint64_t v131 = *(unsigned int *)(a2 + 32);
        LODWORD(v182) = v131;
        if (v131 > 0x40) {
          operator new[]();
        }
        unint64_t v132 = *(void *)(a2 + 24);
        uint64_t v181 = *(void *)(a2 + 24);
        if ((v131 & 0x3F) != 0)
        {
          if (*(unsigned char *)(v130 + 272))
          {
            int v149 = ((v131 & 0x3F) + 7) & 0x78;
            unint64_t v177 = v181 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v149);
            uint64_t v7 = a3;
            if (v131 == v149)
            {
              uint64_t v181 = 0;
              int v149 = v131;
            }
            else
            {
              uint64_t v181 = v132 >> v149;
            }
            goto LABEL_149;
          }
          unint64_t v177 = *(uint64_t *)((char *)&v181 + ((v131 >> 3) & 0x1FFFFFF8));
          int v149 = 1;
        }
        else
        {
          unint64_t v177 = 0;
          int v149 = 0;
        }
        uint64_t v7 = a3;
LABEL_149:
        unsigned int v150 = v131 >> 6;
        if (v131 >= 0x40)
        {
          unint64_t v174 = v42;
          unsigned int v151 = 0;
          unsigned int v152 = v150 - 1;
          do
          {
            if (*(unsigned char *)(v130 + 272)) {
              unsigned int v153 = v152;
            }
            else {
              unsigned int v153 = v151;
            }
            uint64_t result = (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a3 + 272) + 520))(*(void *)(a3 + 272), *(&v181 + v153), 8);
            ++v151;
            --v152;
          }
          while (v152 != -1);
          uint64_t v7 = a3;
          unint64_t v42 = v174;
        }
        if (v149)
        {
          unint64_t v155 = sub_1CB83544C(*(void *)(*(void *)(v7 + 288) + 2064) + 272, *(void *)a2) + 7;
          if (v154 == 1) {
          uint64_t result = (*(uint64_t (**)(void, unint64_t, void))(**(void **)(v7 + 272) + 520))(*(void *)(v7 + 272), v177, (v155 >> 3) - 8 * v150);
          }
        }
        goto LABEL_160;
    }
    if ((v19 & 0xFE) == 0xE) {
      break;
    }
    if (v19 != 5)
    {
      uint64_t v176 = a1;
      if (v19 == 9)
      {
        unsigned int v173 = a4;
        int v69 = *(llvm::Type **)a2;
        uint64_t v70 = sub_1CB83544C((uint64_t)a1, *(void *)a2);
        BOOL v72 = v71 == 1;
        char v74 = llvm::DataLayout::getAlignment(a1, v69, 1);
        if (v72) {
        uint64_t result = (uint64_t)llvm::DataLayout::getStructLayout(a1, *(llvm::StructType **)a2);
        }
        int v75 = *(_DWORD *)(a2 + 20);
        uint64_t v76 = v75 & 0x7FFFFFF;
        uint64_t v77 = a5;
        if ((v75 & 0x7FFFFFF) != 0)
        {
          uint64_t v78 = 0;
          unsigned int v79 = (1 << v74) - 1 + ((unint64_t)(v70 + 7) >> 3);
          uint64_t v80 = (v76 - 1);
          uint64_t v172 = -(1 << v74) & v79;
          int v81 = (uint64_t *)(result + 24);
          uint64_t v82 = a2;
          do
          {
            __int16 v83 = *(uint64_t **)(v82 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
            sub_1CD2852DC(v176, v83, v7, v173, v78 + v77);
            uint64_t v84 = (llvm::Type *)*v83;
            uint64_t v85 = sub_1CB83544C((uint64_t)v176, *v83);
            BOOL v87 = v86 == 1;
            char v88 = llvm::DataLayout::getAlignment(v176, v84, 1);
            if (v87)
            {
              char v92 = v88;
              char v88 = v92;
            }
            uint64_t v90 = v172;
            if (v80) {
              uint64_t v90 = *v81;
            }
            uint64_t v91 = v90 - *(v81 - 1);
            v78 += v91;
            uint64_t v7 = a3;
            uint64_t result = llvm::MCStreamer::emitZeros(*(llvm::MCStreamer **)(a3 + 272), v91 - (((1 << v88) + ((unint64_t)(v85 + 7) >> 3) - 1) & -(1 << v88)));
            ++v81;
            --v80;
            v82 += 32;
            --v76;
            uint64_t v77 = a5;
          }
          while (v76);
        }
      }
      else
      {
        if (v19 != 8)
        {
          unint64_t v93 = ((1 << Alignment) + v18 - 1) & -(1 << Alignment);
          goto LABEL_85;
        }
        uint64_t result = sub_1CD287BBC(a2, a1);
        if (result == -1)
        {
          int v22 = *(_DWORD *)(a2 + 20);
          uint64_t v23 = v22 & 0x7FFFFFF;
          if ((v22 & 0x7FFFFFF) != 0)
          {
            unsigned int v24 = a4;
            uint64_t v25 = a2;
            do
            {
              sub_1CD2852DC(v176, *(void *)(v25 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), v7, v24, a5);
              uint64_t v26 = **(llvm::Type ***)(v25 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
              uint64_t v27 = sub_1CB83544C((uint64_t)v176, (uint64_t)v26);
              BOOL v29 = v28 == 1;
              uint64_t result = llvm::DataLayout::getAlignment(v176, v26, 1);
              if (v29)
              {
                uint64_t v31 = result;
                uint64_t result = v31;
              }
              a5 += ((1 << result) + ((unint64_t)(v27 + 7) >> 3) - 1) & -(1 << result);
              v25 += 32;
              --v23;
            }
            while (v23);
          }
        }
        else
        {
          unsigned __int8 v156 = result;
          uint64_t v157 = *(llvm::Type **)a2;
          uint64_t v158 = sub_1CB83544C((uint64_t)a1, *(void *)a2);
          BOOL v160 = v159 == 1;
          char v162 = llvm::DataLayout::getAlignment(a1, v157, 1);
          if (v160) {
          uint64_t v163 = *(llvm::MCStreamer **)(a3 + 272);
          }
          return llvm::MCStreamer::emitFill(v163, (llvm::MCConstantExpr *)(((1 << v162) + ((unint64_t)(v158 + 7) >> 3) - 1) & -(1 << v162)), v156);
        }
      }
      return result;
    }
    if (*(_WORD *)(a2 + 18) != 49)
    {
      unint64_t v93 = ((1 << Alignment) + v18 - 1) & -(1 << Alignment);
      if (v93 < 9) {
        goto LABEL_103;
      }
      uint64_t v181 = 1;
      for (uint64_t i = 8; i != 72; i += 16)
        *(uint64_t *)((char *)&v181 + i) = -4096;
      uint64_t v113 = sub_1CBFB8694(a2, a1, 0, (uint64_t)&v181);
      if ((v181 & 1) == 0) {
        MEMORY[0x1D25D9CD0](v182, 8);
      }
      if (v113 != (llvm::Value *)a2) {
        return sub_1CD2852DC(a1, v113, v7, 0, 0);
      }
      int v19 = *(unsigned __int8 *)(a2 + 16);
LABEL_85:
      if (v19 == 10)
      {
        unsigned int v94 = *(llvm::Type **)a2;
        uint64_t v95 = *(unsigned int *)(*(void *)a2 + 32);
        if (v95)
        {
          uint64_t v96 = 0;
          uint64_t v97 = 32 * v95;
          do
          {
            sub_1CD2852DC(a1, *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + v96), v7, 0, 0);
            v96 += 32;
          }
          while (v97 != v96);
          unsigned int v94 = *(llvm::Type **)a2;
        }
        unint64_t v98 = (unint64_t)(sub_1CB83544C((uint64_t)a1, (uint64_t)v94) + 7) >> 3;
        BOOL v100 = v99 == 1;
        char v101 = llvm::DataLayout::getAlignment(a1, v94, 1);
        uint64_t v103 = ((1 << v101) + v98 - 1) & -(1 << v101);
        if (v100) {
        uint64_t v104 = *(llvm::Type **)(*(void *)a2 + 24);
        }
        unint64_t v105 = (unint64_t)(sub_1CB83544C((uint64_t)a1, (uint64_t)v104) + 7) >> 3;
        BOOL v107 = v106 == 1;
        uint64_t result = llvm::DataLayout::getAlignment(a1, v104, 1);
        uint64_t v109 = (((1 << result) + v105 - 1) & -(1 << result)) * *(unsigned int *)(*(void *)a2 + 32);
        if (v107) {
        if (v103 != v109)
        }
        {
          uint64_t v110 = (v103 - v109);
          uint64_t v111 = *(llvm::MCStreamer **)(a3 + 272);
          return llvm::MCStreamer::emitZeros(v111, v110);
        }
      }
      else
      {
LABEL_103:
        uint64_t v114 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 224))(v7, a2);
        if (*(unsigned char *)((*(uint64_t (**)(void))(**(void **)(v7 + 248) + 24))(*(void *)(v7 + 248)) + 944))
        {
          uint64_t v181 = 0;
          int v182 = 0;
          int v184 = 0;
          uint64_t v183 = 0;
          if (llvm::MCExpr::evaluateAsRelocatableImpl(v114, (uint64_t)&v181, 0, 0, 0, 0, 0))
          {
            if (v181)
            {
              unint64_t v178 = *(void *)(v181 + 16);
              uint64_t v179 = 0;
              uint64_t v115 = v7 + 400;
              unint64_t v180 = v178;
              int v116 = sub_1CC48C528((uint64_t *)(v7 + 400), &v180, &v179);
              if (a4)
              {
                if (v116)
                {
                  if (v179 != *(void *)(v7 + 400) + 16 * *(unsigned int *)(v7 + 416) && a4[16] <= 3u)
                  {
                    uint64_t Symbol = llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(v7 + 248), (const llvm::GlobalValue *)a4);
                    if (v182)
                    {
                      if (Symbol == *((void *)v182 + 2))
                      {
                        uint64_t v118 = v183 + a5;
                        if (v183 + a5 >= 0)
                        {
                          uint64_t v119 = (*(uint64_t (**)(void))(**(void **)(v7 + 248) + 24))(*(void *)(v7 + 248));
                          if (!v118 || *(unsigned char *)(v119 + 945))
                          {
                            uint64_t v164 = sub_1CD89E4C0(v7 + 400, &v178);
                            uint64_t v165 = *(void *)v164;
                            int v166 = *(_DWORD *)(v164 + 8);
                            if (*(unsigned __int8 *)(*(void *)(*(void *)v164 - 32) + 16) >= 4u) {
                              uint64_t v167 = 0;
                            }
                            else {
                              uint64_t v167 = *(const llvm::GlobalValue **)(*(void *)v164 - 32);
                            }
                            uint64_t v168 = v7;
                            uint64_t v169 = llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(v7 + 248), v167);
                            uint64_t v170 = (*(uint64_t (**)(void))(**(void **)(v168 + 248) + 24))(*(void *)(v168 + 248));
                            uint64_t v114 = (*(uint64_t (**)(uint64_t, const llvm::GlobalValue *, uint64_t, uint64_t *, uint64_t, void, void))(*(void *)v170 + 192))(v170, v167, v169, &v181, a5, *(void *)(v168 + 288), *(void *)(v168 + 272));
                            if (v166 >= 1)
                            {
                              uint64_t v171 = sub_1CD89E4C0(v115, &v178);
                              *(void *)uint64_t v171 = v165;
                              *(_DWORD *)(v171 + ++*(_DWORD *)(result + 8) = v166 - 1;
                            }
                            uint64_t v7 = a3;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return (*(uint64_t (**)(void, uint64_t, unint64_t, void))(**(void **)(v7 + 272) + 512))(*(void *)(v7 + 272), v114, v93, 0);
      }
      return result;
    }
    a4 = 0;
    a5 = 0;
    a2 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  }
  int v57 = sub_1CD287BBC(a2, a1);
  if (v57 == -1) {
    goto LABEL_72;
  }
  unsigned __int8 v58 = v57;
  uint64_t v59 = *(llvm::Type **)a2;
  unint64_t v60 = (unint64_t)(sub_1CB83544C((uint64_t)a1, *(void *)a2) + 7) >> 3;
  BOOL v62 = v61 == 1;
  char v63 = llvm::DataLayout::getAlignment(a1, v59, 1);
  uint64_t v65 = (llvm::MCConstantExpr *)(((1 << v63) + v60 - 1) & -(1 << v63));
  if (v62) {
  if ((unint64_t)v65 >= 2)
  }
    return llvm::MCStreamer::emitFill(*(llvm::MCStreamer **)(a3 + 272), v65, v58);
LABEL_72:
  if (*(unsigned char *)(*(void *)a2 + 8) == 17 && *(_DWORD *)(*(void *)(*(void *)a2 + 24) + 8) == 2061)
  {
    uint64_t v66 = *(void *)(a3 + 272);
    uint64_t RawDataValues = llvm::ConstantDataSequential::getRawDataValues((llvm::ConstantDataSequential *)a2);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v66 + 488))(v66, RawDataValues, v68);
  }
  unint64_t ElementByteSize = llvm::ConstantDataSequential::getElementByteSize((llvm::ConstantDataSequential *)a2);
  uint64_t v121 = *(void *)a2;
  int v122 = *(llvm::Type **)(*(void *)a2 + 24);
  if (*((unsigned char *)v122 + 8) == 13)
  {
    unint64_t v123 = ElementByteSize;
    int v124 = *(_DWORD *)(v121 + 32);
    if (v124)
    {
      for (unsigned int j = 0; j != v124; ++j)
      {
        if (*(unsigned char *)(a3 + 504))
        {
          int v126 = (llvm::raw_ostream *)(*(uint64_t (**)(void))(**(void **)(a3 + 272) + 120))(*(void *)(a3 + 272));
          uint64_t ElementAsInteger = llvm::ConstantDataSequential::getElementAsInteger((llvm::ConstantDataSequential *)a2, j);
          uint64_t v181 = (uint64_t)&unk_1F25FF808;
          int v182 = "0x%llx\n";
          uint64_t v183 = ElementAsInteger;
          llvm::raw_ostream::operator<<(v126, (uint64_t)&v181);
        }
        uint64_t v128 = *(void *)(a3 + 272);
        uint64_t v129 = llvm::ConstantDataSequential::getElementAsInteger((llvm::ConstantDataSequential *)a2, j);
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v128 + 520))(v128, v129, v123);
      }
    }
  }
  else
  {
    int v133 = *(_DWORD *)(v121 + 32);
    uint64_t v134 = a3;
    if (v133)
    {
      for (unsigned int k = 0; k != v133; ++k)
      {
        llvm::ConstantDataSequential::getElementAsAPFloat((llvm::ConstantDataSequential *)a2, k, (uint64_t)&v181);
        sub_1CD2877FC((uint64_t)&v181, v122, v134);
        if (v182 == (const char *)&unk_1CFB2E344)
        {
          sub_1CB845718(&v183);
        }
        else if ((*((_DWORD *)v182 + 2) - 64) <= 0xFFFFFF7F && v183)
        {
          MEMORY[0x1D25D9CB0](v183, 0x1000C8000313F17);
        }
        uint64_t v134 = a3;
      }
    }
  }
  size_t v136 = *(llvm::Type **)a2;
  unint64_t v137 = (unint64_t)(sub_1CB83544C((uint64_t)a1, *(void *)a2) + 7) >> 3;
  BOOL v139 = v138 == 1;
  char v140 = llvm::DataLayout::getAlignment(a1, v136, 1);
  uint64_t v142 = ((1 << v140) + v137 - 1) & -(1 << v140);
  if (v139) {
  uint64_t v143 = *(llvm::Type **)(*(void *)a2 + 24);
  }
  unint64_t v144 = (unint64_t)(sub_1CB83544C((uint64_t)a1, (uint64_t)v143) + 7) >> 3;
  BOOL v146 = v145 == 1;
  uint64_t result = llvm::DataLayout::getAlignment(a1, v143, 1);
  int v148 = (((1 << result) + v144 - 1) & -(1 << result)) * *(_DWORD *)(*(void *)a2 + 32);
  if (v146) {
  if (v142 != v148)
  }
  {
    uint64_t v110 = (v142 - v148);
    uint64_t v111 = *(llvm::MCStreamer **)(a3 + 272);
    return llvm::MCStreamer::emitZeros(v111, v110);
  }
  return result;
}

uint64_t sub_1CD2864E0(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void **)(a1 + 280);
  uint64_t v5 = v4[2];
  if (*(_DWORD *)(v5 + 44) != 15) {
    goto LABEL_4;
  }
  if ((*(_DWORD *)(v5 + 48) | 0x10) != 0x10) {
    goto LABEL_4;
  }
  uint64_t v6 = *(void *)(v4[8] + 8);
  if (*(unsigned char *)(v6 + 16 * a2 + 9)) {
    goto LABEL_4;
  }
  unsigned int v14 = (llvm::MachineConstantPoolEntry *)(v6 + 16 * a2);
  unsigned int v15 = (const llvm::DataLayout *)(*(void *)(*v4 + 40) + 272);
  unsigned int SectionKind = llvm::MachineConstantPoolEntry::getSectionKind(v14, v15);
  uint64_t v17 = *(void *)v14;
  LOBYTE(v28[0]) = *((unsigned char *)v14 + 8);
  uint64_t v18 = (*(uint64_t (**)(void))(**(void **)(a1 + 248) + 24))(*(void *)(a1 + 248));
  uint64_t v19 = (*(uint64_t (**)(uint64_t, const llvm::DataLayout *, void, uint64_t, unsigned __int8 ***))(*(void *)v18 + 56))(v18, v15, SectionKind, v17, v28);
  BOOL v20 = v19 && *(_DWORD *)(v19 + 216) == 0;
  if (v20 && (uint64_t v12 = *(void *)(v19 + 232)) != 0)
  {
    unint64_t AssociatedFragment = *(void *)v12 & 0xFFFFFFFFFFFFFFF8;
    if (!AssociatedFragment && (*(_DWORD *)(v12 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v12 + 8) |= 4u;
      unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v12 + 24));
      *(void *)uint64_t v12 = *(void *)v12 & 7 | AssociatedFragment;
    }
    if (!AssociatedFragment) {
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 272) + 304))(*(void *)(a1 + 272), v12, 9);
    }
  }
  else
  {
LABEL_4:
    uint64_t v7 = *(void *)(a1 + 280);
    uint64_t v8 = *(int *)(*(void *)(*(void *)(a1 + 288) + 2064) + 300);
    uint64_t v9 = qword_1CFB33800[v8];
    uint64_t v10 = *(llvm::MCContext **)(a1 + 264);
    v22[0] = *((void *)&off_1E685A6E0 + v8);
    v22[1] = v9;
    v22[2] = "CPI";
    __int16 v23 = 773;
    uint64_t v11 = *(unsigned int *)(v7 + 336);
    v24[0] = v22;
    v24[2] = v11;
    __int16 v25 = 2050;
    v26[0] = v24;
    v26[2] = "_";
    __int16 v27 = 770;
    v28[0] = (unsigned __int8 **)v26;
    v28[2] = (unsigned __int8 **)a2;
    __int16 v29 = 2050;
    return llvm::MCContext::getOrCreateSymbol(v10, v28);
  }
  return v12;
}

uint64_t sub_1CD286710(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 189))
  {
    uint64_t v10 = *(uint64_t **)(a1 + 528);
    uint64_t v11 = *(uint64_t **)(a1 + 536);
    while (v10 != v11)
    {
      (*(void (**)(void))(*(void *)*v10 + 88))();
      uint64_t v12 = *v10;
      v10 += 9;
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v12 + 80))(v12, a2, 0);
    }
  }
  if (*(unsigned char *)(a2 + 176)) {
    sub_1CD27C664(a1, *(unsigned __int8 *)(a2 + 176), 0);
  }
  if (*(unsigned char *)(a2 + 200) && *(void *)(*(void *)(a2 + 32) + 328) != a2)
  {
    uint64_t v13 = *(void *)(a1 + 272);
    uint64_t v14 = (*(uint64_t (**)(void))(**(void **)(a1 + 248) + 24))(*(void *)(a1 + 248));
    uint64_t v15 = (*(uint64_t (**)(uint64_t, void, uint64_t, void))(*(void *)v14 + 64))(v14, **(void **)(a1 + 280), a2, *(void *)(a1 + 248));
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v13 + 168))(v13, v15, 0);
    *(void *)(a1 + 480) = llvm::MachineBasicBlock::getSymbol((llvm::MachineBasicBlock *)a2);
  }
  uint64_t v4 = *(void *)(a2 + 16);
  if (*(unsigned char *)(a2 + 185))
  {
    if (*(unsigned char *)(a1 + 504))
    {
      uint64_t v16 = *(void *)(a1 + 272);
      v65[0] = "Block address taken";
      __int16 v66 = 259;
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v16 + 112))(v16, v65, 1);
    }
    if (!v4)
    {
      if (!*(unsigned char *)(a1 + 504)) {
        goto LABEL_7;
      }
      goto LABEL_32;
    }
    if ((*(_WORD *)(v4 + 18) & 0x7FFF) != 0)
    {
      uint64_t v17 = sub_1CD89D224(a1, v4);
      if (v18)
      {
        uint64_t v19 = v17;
        uint64_t v20 = 8 * v18;
        do
        {
          uint64_t v21 = *v19++;
          (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 272) + 192))(*(void *)(a1 + 272), v21, 0);
          v20 -= 8;
        }
        while (v20);
      }
    }
  }
  if (!*(unsigned char *)(a1 + 504)) {
    goto LABEL_7;
  }
  if (v4 && (*(unsigned char *)(v4 + 23) & 0x10) != 0)
  {
    uint64_t v41 = (llvm::raw_ostream *)(*(uint64_t (**)(void))(**(void **)(a1 + 272) + 120))(*(void *)(a1 + 272));
    Module = (const llvm::Module *)llvm::BasicBlock::getModule((llvm::BasicBlock *)v4);
    llvm::Value::printAsOperand((llvm::Value *)v4, v41, 0, Module);
    int64_t v43 = (llvm::raw_ostream *)(*(uint64_t (**)(void))(**(void **)(a1 + 272) + 120))(*(void *)(a1 + 272));
    unint64_t v44 = (unsigned char *)*((void *)v43 + 4);
    if ((unint64_t)v44 >= *((void *)v43 + 3))
    {
      llvm::raw_ostream::write(v43, 10);
    }
    else
    {
      *((void *)v43 + 4) = v44 + 1;
      *unint64_t v44 = 10;
    }
  }
LABEL_32:
  int v22 = (uint64_t *)(*(void *)(a1 + 304) + 248);
  v65[0] = a2;
  v63[0] = 0;
  if (sub_1CB834D78(v22, v65, v63))
  {
    uint64_t v23 = *(void *)(v63[0] + 8);
    if (v23)
    {
      uint64_t v24 = *(void *)(a1 + 272);
      if (**(void **)(v23 + 32) == a2)
      {
        unsigned int v34 = (llvm::raw_ostream *)(*(uint64_t (**)(void))(*(void *)v24 + 120))(*(void *)(a1 + 272));
        sub_1CD287E68(v34, *(void **)v23, *(_DWORD *)(*(void *)(a1 + 280) + 336));
        sub_1CB8E509C(v34, "=>");
        unsigned int v35 = -2;
        uint64_t v36 = (void *)v23;
        do
        {
          uint64_t v36 = (void *)*v36;
          v35 += 2;
        }
        while (v36);
        uint64_t v37 = llvm::raw_ostream::indent(v34, v35);
        sub_1CB8E509C(v37, "This ");
        if (*(void *)(v23 + 8) == *(void *)(v23 + 16)) {
          sub_1CB8E509C(v34, "Inner ");
        }
        int v38 = 0;
        v63[0] = (uint64_t)"Loop Header: Depth=";
        __int16 v64 = 259;
        BOOL v39 = (void *)v23;
        do
        {
          BOOL v39 = (void *)*v39;
          ++v38;
        }
        while (v39);
        __int16 v62 = 264;
        LODWORD(v61[0]) = v38;
        sub_1CB8F1E58(v63, v61, (uint64_t)v65);
        llvm::Twine::print((llvm::Twine *)v65, v34);
        unint64_t v40 = (unsigned char *)*((void *)v34 + 4);
        if ((unint64_t)v40 >= *((void *)v34 + 3))
        {
          llvm::raw_ostream::write(v34, 10);
        }
        else
        {
          *((void *)v34 + 4) = v40 + 1;
          *unint64_t v40 = 10;
        }
        sub_1CD28804C((uint64_t)v34, v23, *(unsigned int *)(*(void *)(a1 + 280) + 336));
      }
      else
      {
        unint64_t v55 = "  in Loop: Header=BB";
        __int16 v56 = 259;
        int v25 = *(_DWORD *)(*(void *)(a1 + 280) + 336);
        __int16 v54 = 264;
        LODWORD(v53[0]) = v25;
        sub_1CB8F1E58((uint64_t *)&v55, v53, (uint64_t)v57);
        BOOL v51 = "_";
        __int16 v52 = 259;
        sub_1CB8F1E58(v57, (uint64_t *)&v51, (uint64_t)v59);
        int v26 = *(_DWORD *)(**(void **)(v23 + 32) + 24);
        __int16 v50 = 265;
        LODWORD(v49[0]) = v26;
        sub_1CB8F1E58(v59, v49, (uint64_t)v61);
        uint64_t v47 = " Depth=";
        __int16 v48 = 259;
        sub_1CB8F1E58(v61, (uint64_t *)&v47, (uint64_t)v63);
        int v27 = 0;
        do
        {
          uint64_t v23 = *(void *)v23;
          ++v27;
        }
        while (v23);
        __int16 v46 = 264;
        LODWORD(v45[0]) = v27;
        sub_1CB8F1E58(v63, v45, (uint64_t)v65);
        (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v24 + 112))(v24, v65, 1);
      }
    }
  }
LABEL_7:
  uint64_t result = sub_1CD286E54((void *)a1, a2);
  if (result)
  {
    if (*(unsigned char *)(a1 + 504) && *(unsigned char *)(a2 + 186))
    {
      uint64_t v33 = *(void *)(a1 + 272);
      v65[0] = "Label of block must be emitted";
      __int16 v66 = 259;
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v33 + 112))(v33, v65, 1);
    }
    uint64_t v8 = *(void *)(a1 + 272);
    uint64_t Symbol = llvm::MachineBasicBlock::getSymbol((llvm::MachineBasicBlock *)a2);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v8 + 192))(v8, Symbol, 0);
  }
  else if (*(unsigned char *)(a1 + 504))
  {
    uint64_t v6 = *(void *)(a1 + 272);
    v61[0] = (uint64_t)" %bb.";
    __int16 v62 = 259;
    int v7 = *(_DWORD *)(a2 + 24);
    __int16 v60 = 265;
    LODWORD(v59[0]) = v7;
    sub_1CB8F1E58(v61, v59, (uint64_t)v63);
    v57[0] = (uint64_t)":";
    __int16 v58 = 259;
    sub_1CB8F1E58(v63, v57, (uint64_t)v65);
    uint64_t result = (*(uint64_t (**)(uint64_t, void *, void))(*(void *)v6 + 128))(v6, v65, 0);
  }
  if (*(unsigned char *)(a2 + 188) && *(_DWORD *)(*(void *)(a1 + 256) + 412) == 4)
  {
    uint64_t v28 = *(void *)(a1 + 272);
    EHCatchretuint64_t Symbol = llvm::MachineBasicBlock::getEHCatchretSymbol((llvm::MachineBasicBlock *)a2);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v28 + 192))(v28, EHCatchretSymbol, 0);
  }
  if (*(unsigned char *)(a2 + 200) && *(void *)(*(void *)(a2 + 32) + 328) != a2)
  {
    unint64_t v30 = *(uint64_t **)(a1 + 528);
    uint64_t v31 = *(uint64_t **)(a1 + 536);
    while (v30 != v31)
    {
      uint64_t v32 = *v30;
      v30 += 9;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v32 + 112))(v32, a2);
    }
  }
  return result;
}

BOOL sub_1CD286E54(void *a1, uint64_t a2)
{
  BOOL v3 = *(_DWORD *)(a1[35] + 640) != 2 && *(unsigned char *)(a2 + 200) == 0;
  if (!v3 && *(void *)(*(void *)(a2 + 32) + 328) != a2) {
    return 1;
  }
  if (*(void *)(a2 + 64) == *(void *)(a2 + 72)) {
    return 0;
  }
  if ((*(unsigned int (**)(void *, uint64_t))(*a1 + 328))(a1, a2)) {
    BOOL v4 = *(unsigned char *)(a2 + 189) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4) {
    return 1;
  }
  return *(unsigned char *)(a2 + 186) != 0;
}

uint64_t sub_1CD286F04(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 201))
  {
    uint64_t v2 = *(uint64_t **)(result + 528);
    for (uint64_t i = *(uint64_t **)(result + 536);
          v2 != i;
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 120))(v4, a2))
    {
      uint64_t v4 = *v2;
      v2 += 9;
    }
  }
  return result;
}

BOOL sub_1CD286F7C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 184)) {
    return 0;
  }
  BOOL v3 = *(llvm::MachineBasicBlock ***)(a2 + 64);
  uint64_t v4 = *(llvm::MachineBasicBlock ***)(a2 + 72);
  if (v3 == v4) {
    return 0;
  }
  if ((((char *)v4 - (char *)v3) & 0x7FFFFFFF0) != 0) {
    return 0;
  }
  uint64_t v5 = *v3;
  if (*((void *)*v3 + 1) != a2) {
    return 0;
  }
  uint64_t v6 = (void *)((char *)v5 + 48);
  if ((llvm::MachineBasicBlock *)((char *)v5 + 48) != (llvm::MachineBasicBlock *)(*((void *)v5 + 6) & 0xFFFFFFFFFFFFFFF8))
  {
    unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v5);
    if (v6 != (void *)FirstTerminator)
    {
      unint64_t v20 = FirstTerminator;
      while (1)
      {
        __int16 v9 = *(_WORD *)(v20 + 44);
        int v10 = v9 & 0xC;
        if ((v9 & 0xC) != 0 && (v9 & 4) == 0)
        {
          BOOL result = llvm::MachineInstr::hasPropertyInBundle(v20, 1024, 1);
          if (!result) {
            return result;
          }
          __int16 v9 = *(_WORD *)(v20 + 44);
          int v10 = v9 & 0xC;
        }
        else if ((*(unsigned char *)(*(void *)(v20 + 16) + 9) & 4) == 0)
        {
          return 0;
        }
        int v12 = v9 & 4;
        if (v10 && v12 == 0)
        {
          if (llvm::MachineInstr::hasPropertyInBundle(v20, 2048, 1)) {
            return 0;
          }
        }
        else if ((*(unsigned char *)(*(void *)(v20 + 16) + 9) & 8) != 0)
        {
          return 0;
        }
        sub_1CC301138(&v21, v20);
        uint64_t v15 = v23;
        uint64_t v14 = v24;
        if (v23 != v24) {
          break;
        }
LABEL_42:
        if ((*(unsigned char *)v20 & 4) == 0)
        {
          for (i = v20; (*(_WORD *)(i + 44) & 8) != 0; unint64_t v20 = i)
            unint64_t i = *(void *)(v20 + 8);
        }
        BOOL result = 1;
        unint64_t v20 = *(void *)(v20 + 8);
        if ((void *)v20 == v6) {
          return result;
        }
      }
      while (1)
      {
        int v16 = *v15;
        if (v16 == 4)
        {
          if (*((void *)v15 + 2) == a2) {
            return 0;
          }
        }
        else if (v16 == 8)
        {
          return 0;
        }
        v15 += 32;
        uint64_t v23 = v15;
        if (v15 != v14) {
          goto LABEL_31;
        }
        uint64_t v17 = *(void *)(v21 + 8);
        if (v17 == v22)
        {
          uint64_t v15 = v14;
        }
        else
        {
          uint64_t v15 = v14;
          if ((*(_WORD *)(v17 + 44) & 4) != 0)
          {
            while (1)
            {
              uint64_t v15 = *(unsigned __int8 **)(v17 + 32);
              uint64_t v18 = *(unsigned int *)(v17 + 40);
              uint64_t v14 = &v15[32 * v18];
              if (v18) {
                break;
              }
              uint64_t v17 = *(void *)(v17 + 8);
              if (v17 == v22 || (*(_WORD *)(v17 + 44) & 4) == 0)
              {
                uint64_t v23 = v15;
                uint64_t v24 = &v15[32 * v18];
                uint64_t v14 = v24;
                goto LABEL_40;
              }
            }
            uint64_t v23 = *(unsigned __int8 **)(v17 + 32);
            uint64_t v24 = &v15[32 * v18];
            uint64_t v21 = v17;
            goto LABEL_31;
          }
        }
LABEL_40:
        uint64_t v21 = v22;
LABEL_31:
        if (v15 == v14) {
          goto LABEL_42;
        }
      }
    }
  }
  return 1;
}

uint64_t sub_1CD287194(uint64_t a1)
{
  return *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 272) + 8) + 1624);
}

BOOL sub_1CD2871A4(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 272) + 8) + 1626) == 1;
}

uint64_t sub_1CD2871BC(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 272) + 8) + 1626)) {
    return 8;
  }
  else {
    return 4;
  }
}

unint64_t sub_1CD2871DC(void *a1)
{
  return ((unint64_t)*(unsigned __int8 *)(*(void *)(a1[34] + 8) + 1626) << 24) | ((unint64_t)*(unsigned __int8 *)(a1[32] + 424) << 32) | *(unsigned __int16 *)(*(void *)(a1[34] + 8) + 1624) | ((*(_DWORD *)(*(void *)(a1[31] + 248) + 4) << 13) + 57344) & 0xFF0000;
}

uint64_t *sub_1CD28721C(uint64_t a1)
{
  return sub_1CD89D2D0(*(void *)(a1 + 32), *(void *)(a1 + 24));
}

uint64_t *sub_1CD287228(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  char v74 = *(void **)(a1 + 24);
  uint64_t v3 = (uint64_t)v74;
  uint64_t v5 = sub_1CD8A05C4(v4 + 8, (uint64_t *)&v74);
  unint64_t v6 = v5[1];
  uint64_t v7 = v5[2];
  v5[1] = 0;
  unint64_t v79 = v6;
  uint64_t v80 = v7;
  unsigned int v81 = *((_DWORD *)v5 + 6);
  sub_1CD89D454(v4 + 8, v3);
  char v74 = a2;
  uint64_t v8 = sub_1CD8A05C4(v4 + 8, (uint64_t *)&v74);
  int v10 = v8 + 1;
  unint64_t v9 = v8[1];
  if (v9 < 8 || (v9 & 4) != 0 && (unint64_t v19 = v9 & 0xFFFFFFFFFFFFFFF8) != 0 && !*(_DWORD *)(v19 + 8))
  {
    uint64_t v11 = *(void *)(v4 + 32);
    uint64_t v12 = v11 + 40 * v81;
    uint64_t v15 = *(void **)(v12 + 24);
    uint64_t v13 = (int32x2_t *****)(v12 + 24);
    uint64_t v14 = v15;
    if (v15 != a2)
    {
      int v16 = (llvm::ValueHandleBase *)(v13 - 2);
      if (v14 && v14 != (void *)-8192 && v14 != (void *)-4096)
      {
        unint64_t v61 = *(void *)v16 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v62 = v11 + 40 * v81;
        *(void *)unint64_t v61 = *(void *)(v62 + 16);
        char v63 = *(unint64_t **)(v62 + 16);
        if (v63)
        {
          unint64_t *v63 = *v63 & 7 | v61;
        }
        else
        {
          __int16 v64 = *v13;
          uint64_t v65 = ****v13;
          unint64_t v66 = (unint64_t)v65[303];
          if (v66 <= v61)
          {
            uint64_t v67 = v65[305].u32[0];
            if (v66 + 16 * v67 > v61)
            {
              unsigned int v68 = v67 - 1;
              LODWORD(v69) = v68 & ((v64 >> 4) ^ (v64 >> 9));
              uint64_t v70 = (int32x2_t *****)(v66 + 16 * v69);
              int v71 = *v70;
              if (v64 == *v70)
              {
LABEL_77:
                *uint64_t v70 = (int32x2_t ****)-8192;
                v65[304] = vadd_s32(v65[304], (int32x2_t)0x1FFFFFFFFLL);
                __int16 v64 = *v13;
              }
              else
              {
                int v72 = 1;
                while (v71 != (int32x2_t ****)-4096)
                {
                  int v73 = v69 + v72++;
                  uint64_t v69 = v73 & v68;
                  int v71 = *(int32x2_t *****)(v66 + 16 * v69);
                  if (v64 == v71)
                  {
                    uint64_t v70 = (int32x2_t *****)(v66 + 16 * v69);
                    goto LABEL_77;
                  }
                }
              }
              *((unsigned char *)v64 + 17) &= ~1u;
            }
          }
        }
      }
      uint64_t *v13 = (int32x2_t ****)a2;
      if (a2 != (void *)-8192 && a2 != (void *)-4096 && a2) {
        llvm::ValueHandleBase::AddToUseList(v16);
      }
    }
    if (v10 == (uint64_t *)&v79) {
      goto LABEL_65;
    }
    unint64_t v17 = v79;
    if (v79 < 8 || (unint64_t v18 = v79 & 0xFFFFFFFFFFFFFFF8, (v79 & 4) != 0) && v18 && !*(_DWORD *)(v18 + 8))
    {
      if ((*v10 & 4) != 0)
      {
        unint64_t v46 = *v10 & 0xFFFFFFFFFFFFFFF8;
        if (v46) {
          *(_DWORD *)(v46 + ++*(_DWORD *)(result + 8) = 0;
        }
      }
      else
      {
        *int v10 = 0;
      }
      goto LABEL_65;
    }
    uint64_t v44 = *v10;
    if ((*v10 & 4) != 0)
    {
      unint64_t v45 = v44 & 0xFFFFFFFFFFFFFFF8;
      if ((v44 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        if ((v79 & 4) == 0)
        {
          *(_DWORD *)(v45 + ++*(_DWORD *)(result + 8) = 0;
          if (!*(_DWORD *)(v45 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          **(void **)unint64_t v45 = v18;
          ++*(_DWORD *)(v45 + 8);
          goto LABEL_64;
        }
        if (*(void *)v45 != v45 + 16) {
          free(*(void **)v45);
        }
        MEMORY[0x1D25D9CE0](v45, 0x1080C40ED926357);
        unint64_t v17 = v79;
      }
    }
    *int v10 = v17;
LABEL_64:
    unint64_t v79 = 0;
LABEL_65:
    v8[2] = v80;
    *((_DWORD *)v8 + 6) = v81;
    return sub_1CD487110((uint64_t *)&v79);
  }
  uint64_t v75 = 2;
  uint64_t v76 = 0;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  char v74 = &unk_1F26497B8;
  unsigned int v20 = v81;
  uint64_t v21 = *(void *)(v4 + 32);
  uint64_t v22 = v21 + 40 * v81;
  uint64_t v25 = *(void *)(v22 + 24);
  uint64_t v23 = (int32x2_t *****)(v22 + 24);
  uint64_t v24 = v25;
  if (v25)
  {
    int v26 = 0;
    int v27 = (unint64_t *)(v23 - 2);
    if (v24 != -4096 && v24 != -8192)
    {
      unint64_t v47 = *v27 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v48 = v21 + 40 * v81;
      *(void *)unint64_t v47 = *(void *)(v48 + 16);
      int v49 = *(unint64_t **)(v48 + 16);
      if (v49)
      {
        unint64_t *v49 = *v49 & 7 | v47;
      }
      else
      {
        __int16 v50 = *v23;
        BOOL v51 = ****v23;
        unint64_t v52 = (unint64_t)v51[303];
        if (v52 <= v47)
        {
          uint64_t v53 = v51[305].u32[0];
          if (v52 + 16 * v53 > v47)
          {
            unsigned int v54 = v53 - 1;
            LODWORD(v55) = v54 & ((v50 >> 4) ^ (v50 >> 9));
            __int16 v56 = (int32x2_t *****)(v52 + 16 * v55);
            int v57 = *v56;
            if (v50 == *v56)
            {
LABEL_56:
              *__int16 v56 = (int32x2_t ****)-8192;
              v51[304] = vadd_s32(v51[304], (int32x2_t)0x1FFFFFFFFLL);
              __int16 v50 = *v23;
            }
            else
            {
              int v58 = 1;
              while (v57 != (int32x2_t ****)-4096)
              {
                int v59 = v55 + v58++;
                uint64_t v55 = v59 & v54;
                int v57 = *(int32x2_t *****)(v52 + 16 * v55);
                if (v50 == v57)
                {
                  __int16 v56 = (int32x2_t *****)(v52 + 16 * v55);
                  goto LABEL_56;
                }
              }
            }
            *((unsigned char *)v50 + 17) &= ~1u;
          }
        }
      }
      int v26 = v77;
    }
    *uint64_t v23 = v26;
    if (v26 != (int32x2_t ****)-4096 && v26 != (int32x2_t ****)-8192 && v26 != 0)
    {
      uint64_t v29 = v75;
      unint64_t v30 = (void *)(v75 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v31 = v21 + 40 * v20;
      *(void *)(v31 + 16) = *(void *)(v75 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v32 = (unint64_t **)(v31 + 16);
      void *v30 = v27;
      *int v27 = v29 & 0xFFFFFFFFFFFFFFF8 | *v27 & 7;
      if (*v32) {
        *void *v32 = **v32 & 7 | (unint64_t)v32;
      }
    }
  }
  *(void *)(v21 + 40 * v20 + 32) = v78;
  if (v77 != (int32x2_t ****)-8192 && v77 != (int32x2_t ****)-4096 && v77)
  {
    unint64_t v33 = v75 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v75 & 0xFFFFFFFFFFFFFFF++*(_DWORD *)(result + 8) = v76;
    if (v76)
    {
      *uint64_t v76 = *v76 & 7 | v33;
    }
    else
    {
      unsigned int v34 = v77;
      unsigned int v35 = ***v77;
      unint64_t v36 = (unint64_t)v35[303];
      if (v36 <= v33)
      {
        uint64_t v37 = v35[305].u32[0];
        if (v36 + 16 * v37 > v33)
        {
          unsigned int v38 = v37 - 1;
          LODWORD(v39) = v38 & ((v77 >> 4) ^ (v77 >> 9));
          unint64_t v40 = (int32x2_t *****)(v36 + 16 * v39);
          uint64_t v41 = *v40;
          if (v77 == *v40)
          {
LABEL_38:
            *unint64_t v40 = (int32x2_t ****)-8192;
            v35[304] = vadd_s32(v35[304], (int32x2_t)0x1FFFFFFFFLL);
            unsigned int v34 = v77;
          }
          else
          {
            int v42 = 1;
            while (v41 != (int32x2_t ****)-4096)
            {
              int v43 = v39 + v42++;
              uint64_t v39 = v43 & v38;
              uint64_t v41 = *(int32x2_t *****)(v36 + 16 * v39);
              if (v77 == v41)
              {
                unint64_t v40 = (int32x2_t *****)(v36 + 16 * v39);
                goto LABEL_38;
              }
            }
          }
          *((unsigned char *)v34 + 17) &= ~1u;
        }
      }
    }
  }
  sub_1CD89D4C4(v10, (uint64_t *)&v79);
  return sub_1CD487110((uint64_t *)&v79);
}

uint64_t sub_1CD287790(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 16) == 3) {
    return 1;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  LODWORD(v1) = 0;
  do
  {
    if (*(unsigned __int8 *)(*(void *)(v2 + 24) + 16) >= 0x15u) {
      uint64_t v3 = 0;
    }
    else {
      uint64_t v3 = *(void *)(v2 + 24);
    }
    uint64_t v1 = sub_1CD287790(v3) + v1;
    uint64_t v2 = *(void *)(v2 + 8);
  }
  while (v2);
  return v1;
}

uint64_t sub_1CD2877FC(uint64_t a1, llvm::Type *a2, uint64_t a3)
{
  v36[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void **)(a1 + 8);
  unint64_t v6 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  if (v7 == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v6, (llvm::APInt *)&v32);
  }
  else {
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v6, (uint64_t)&v32);
  }
  if (*(unsigned char *)(a3 + 504))
  {
    unsigned int v34 = v36;
    long long v35 = xmmword_1CD96EEC0;
    sub_1CC504338(a1, (uint64_t *)&v34, 0, 3, 1);
    uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(void))(**(void **)(a3 + 272) + 120))(*(void *)(a3 + 272));
    llvm::Type::print(a2, v8, 0, 0);
    unint64_t v9 = (llvm::raw_ostream *)(*(uint64_t (**)(void))(**(void **)(a3 + 272) + 120))(*(void *)(a3 + 272));
    int v10 = (unsigned char *)*((void *)v9 + 4);
    if ((unint64_t)v10 >= *((void *)v9 + 3))
    {
      unint64_t v9 = llvm::raw_ostream::write(v9, 32);
    }
    else
    {
      *((void *)v9 + 4) = v10 + 1;
      *int v10 = 32;
    }
    uint64_t v11 = llvm::raw_ostream::write(v9, (const char *)v34, v35);
    uint64_t v12 = (unsigned char *)*((void *)v11 + 4);
    if ((unint64_t)v12 >= *((void *)v11 + 3))
    {
      llvm::raw_ostream::write(v11, 10);
    }
    else
    {
      *((void *)v11 + 4) = v12 + 1;
      *uint64_t v12 = 10;
    }
    if (v34 != v36) {
      free(v34);
    }
  }
  uint64_t v13 = (v33 >> 3) & 7;
  if (v33 >= 0x41) {
    uint64_t v14 = v32;
  }
  else {
    uint64_t v14 = (uint64_t *)&v32;
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a3 + 288) + 2064) + 272) && *((unsigned char *)a2 + 8) != 6)
  {
    unint64_t v19 = ((unint64_t)v33 + 63) >> 6;
    unsigned int v20 = v19 - 1;
    if (v13)
    {
      unsigned int v21 = v19 - 2;
      (*(void (**)(void, uint64_t, void))(**(void **)(a3 + 272) + 544))(*(void *)(a3 + 272), v14[v20], (v33 >> 3) & 7);
      unsigned int v20 = v21;
    }
    if ((v20 & 0x80000000) == 0)
    {
      uint64_t v22 = v20;
      do
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a3 + 272) + 544))(*(void *)(a3 + 272), v14[v22--], 8);
      while (v22 != -1);
    }
  }
  else
  {
    if (v33 >= 0x40)
    {
      uint64_t v15 = v33 >> 6;
      int v16 = v14;
      uint64_t v17 = v15;
      do
      {
        uint64_t v18 = *v16++;
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a3 + 272) + 544))(*(void *)(a3 + 272), v18, 8);
        --v17;
      }
      while (v17);
    }
    else
    {
      uint64_t v15 = 0;
    }
    if (v13) {
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a3 + 272) + 544))(*(void *)(a3 + 272), v14[v15], v13);
    }
  }
  uint64_t v23 = (llvm::DataLayout *)(*(void *)(*(void *)(a3 + 288) + 2064) + 272);
  uint64_t v24 = *(llvm::MCStreamer **)(a3 + 272);
  unint64_t v25 = (unint64_t)(sub_1CB83544C((uint64_t)v23, (uint64_t)a2) + 7) >> 3;
  BOOL v27 = v26 == 1;
  char Alignment = llvm::DataLayout::getAlignment(v23, a2, 1);
  uint64_t v30 = v25
      + ~(-1 << Alignment)
      - (((v25 + ~(-1 << Alignment)) & ~(-1 << Alignment))
       + ((unint64_t)(sub_1CB83544C((uint64_t)v23, (uint64_t)a2) + 7) >> 3));
  if (v27) {
  uint64_t result = llvm::MCStreamer::emitZeros(v24, v30);
  }
  if (v33 >= 0x41)
  {
    uint64_t result = (uint64_t)v32;
    if (v32) {
      return MEMORY[0x1D25D9CB0](v32, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t sub_1CD287BBC(uint64_t a1, llvm::DataLayout *a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v3 == 16)
  {
    unsigned int v13 = sub_1CC5CA218(a2, *(llvm::Type **)a1);
    if (v12 == 1) {
    uint64_t v14 = (unint64_t *)(a1 + 24);
    }
    unsigned int v15 = *(_DWORD *)(a1 + 32);
    if (v15 < v13)
    {
      if (v13 > 0x40) {
        operator new[]();
      }
      unint64_t v18 = *v14;
      unsigned int v22 = v13;
      unint64_t v16 = v18 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v13);
    }
    else
    {
      unsigned int v22 = *(_DWORD *)(a1 + 32);
      if (v15 > 0x40) {
        operator new[]();
      }
      unint64_t v16 = *v14;
    }
    unint64_t v21 = v16;
    if (llvm::APInt::isSplat((llvm::APInt *)&v21, 8u))
    {
      llvm::APInt::zextOrTrunc((uint64_t *)&v21, 8u, (uint64_t)&v19);
      if (v20 >= 0x41) {
        uint64_t v17 = v19;
      }
      else {
        uint64_t v17 = (unsigned int **)&v19;
      }
      uint64_t v5 = *(unsigned int *)v17;
      if (v20 >= 0x41 && v19) {
        MEMORY[0x1D25D9CB0]();
      }
    }
    else
    {
      uint64_t v5 = 0xFFFFFFFFLL;
    }
    if (v22 >= 0x41 && v21) {
      MEMORY[0x1D25D9CB0](v21, 0x1000C8000313F17);
    }
  }
  else if (a1 && v3 == 8)
  {
    uint64_t v4 = *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
    uint64_t v5 = sub_1CD287BBC(v4);
    if (v5 != -1)
    {
      uint64_t v6 = *(_DWORD *)(a1 + 20) & 0x7FFFFFF;
      if (v6 != 1)
      {
        unsigned int v7 = 1;
        while (*(void *)(a1 - 32 * v6 + 32 * v7) == v4)
        {
          if (v6 == ++v7) {
            return v5;
          }
        }
        return 0xFFFFFFFFLL;
      }
    }
  }
  else
  {
    uint64_t v5 = 0xFFFFFFFFLL;
    if (a1)
    {
      if ((v3 & 0xFE) == 0xE)
      {
        uint64_t RawDataValues = (unsigned __int8 *)llvm::ConstantDataSequential::getRawDataValues((llvm::ConstantDataSequential *)a1);
        uint64_t v5 = *RawDataValues;
        if (v9 != 1)
        {
          unsigned int v10 = 1;
          while (RawDataValues[v10] == v5)
          {
            if (v9 == ++v10) {
              return v5;
            }
          }
          return 0xFFFFFFFFLL;
        }
      }
    }
  }
  return v5;
}

llvm::raw_ostream *sub_1CD287E68(llvm::raw_ostream *result, void *a2, unsigned int a3)
{
  if (a2)
  {
    uint64_t v4 = a2;
    uint64_t v5 = result;
    sub_1CD287E68(result, *a2);
    unsigned int v6 = 0;
    unsigned int v7 = v4;
    do
    {
      unsigned int v7 = (void *)*v7;
      v6 += 2;
    }
    while (v7);
    llvm::raw_ostream::indent(v5, v6);
    uint64_t v8 = (void *)*((void *)v5 + 4);
    if (*((void *)v5 + 3) - (void)v8 > 0xDuLL)
    {
      qmemcpy(v8, "Parent Loop BB", 14);
      *((void *)v5 + 4) += 14;
    }
    else
    {
      llvm::raw_ostream::write(v5, "Parent Loop BB", 0xEuLL);
    }
    sub_1CD098D14(v5, a3, 0, 0, 0);
    int v9 = (unsigned char *)*((void *)v5 + 4);
    if (*((unsigned char **)v5 + 3) == v9)
    {
      llvm::raw_ostream::write(v5, "_", 1uLL);
    }
    else
    {
      *int v9 = 95;
      ++*((void *)v5 + 4);
    }
    unint64_t v10 = *(int *)(*(void *)v4[4] + 24);
    if ((v10 & 0x80000000) != 0)
    {
      unint64_t v10 = -(uint64_t)v10;
      uint64_t v11 = v5;
      int v12 = 1;
    }
    else
    {
      uint64_t v11 = v5;
      int v12 = 0;
    }
    sub_1CD098D14(v11, v10, 0, 0, v12);
    unsigned int v13 = (_DWORD *)*((void *)v5 + 4);
    if (*((void *)v5 + 3) - (void)v13 > 6uLL)
    {
      *(_DWORD *)((char *)v13 + 3) = 1030255728;
      _DWORD *v13 = 1885684768;
      *((void *)v5 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v5, " Depth=", 7uLL);
    }
    LODWORD(v14) = 0;
    do
    {
      uint64_t v4 = (void *)*v4;
      unint64_t v14 = (v14 + 1);
    }
    while (v4);
    uint64_t result = sub_1CD098D14(v5, v14, 0, 0, 0);
    unsigned int v15 = (unsigned char *)*((void *)v5 + 4);
    if ((unint64_t)v15 >= *((void *)v5 + 3))
    {
      return llvm::raw_ostream::write(v5, 10);
    }
    else
    {
      *((void *)v5 + 4) = v15 + 1;
      *unsigned int v15 = 10;
    }
  }
  return result;
}

uint64_t sub_1CD28804C(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3 = *(void **)(a2 + 8);
  uint64_t v4 = *(void **)(a2 + 16);
  if (v3 != v4)
  {
    unsigned int v6 = (llvm::raw_ostream *)result;
    unint64_t v7 = a3;
    do
    {
      unsigned int v8 = 0;
      int v9 = (void *)*v3;
      unint64_t v10 = (void *)*v3;
      do
      {
        unint64_t v10 = (void *)*v10;
        v8 += 2;
      }
      while (v10);
      llvm::raw_ostream::indent(v6, v8);
      uint64_t v11 = (void *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v11 > 0xCuLL)
      {
        qmemcpy(v11, "Child Loop BB", 13);
        *((void *)v6 + 4) += 13;
      }
      else
      {
        llvm::raw_ostream::write(v6, "Child Loop BB", 0xDuLL);
      }
      sub_1CD098D14(v6, v7, 0, 0, 0);
      int v12 = (unsigned char *)*((void *)v6 + 4);
      if (*((unsigned char **)v6 + 3) == v12)
      {
        llvm::raw_ostream::write(v6, "_", 1uLL);
      }
      else
      {
        *int v12 = 95;
        ++*((void *)v6 + 4);
      }
      unint64_t v13 = *(int *)(*(void *)v9[4] + 24);
      if ((v13 & 0x80000000) != 0)
      {
        unint64_t v13 = -(uint64_t)v13;
        unint64_t v14 = v6;
        int v15 = 1;
      }
      else
      {
        unint64_t v14 = v6;
        int v15 = 0;
      }
      sub_1CD098D14(v14, v13, 0, 0, v15);
      unint64_t v16 = (_DWORD *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v16 > 6uLL)
      {
        *(_DWORD *)((char *)v16 + 3) = 543716464;
        *unint64_t v16 = 1885684768;
        *((void *)v6 + 4) += 7;
      }
      else
      {
        llvm::raw_ostream::write(v6, " Depth ", 7uLL);
      }
      LODWORD(v17) = 0;
      unint64_t v18 = v9;
      do
      {
        unint64_t v18 = (void *)*v18;
        unint64_t v17 = (v17 + 1);
      }
      while (v18);
      sub_1CD098D14(v6, v17, 0, 0, 0);
      unint64_t v19 = (unsigned char *)*((void *)v6 + 4);
      if ((unint64_t)v19 >= *((void *)v6 + 3))
      {
        llvm::raw_ostream::write(v6, 10);
      }
      else
      {
        *((void *)v6 + 4) = v19 + 1;
        *unint64_t v19 = 10;
      }
      uint64_t result = sub_1CD28804C(v6, v9, a3);
      ++v3;
    }
    while (v3 != v4);
  }
  return result;
}

void sub_1CD28825C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *(v4 - 9);
        v4 -= 9;
        uint64_t v6 = v7;
        *uint64_t v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned int *sub_1CD288304(unsigned int *result)
{
  uint64_t v1 = result[4];
  if (v1)
  {
    uint64_t v2 = 16 * v1;
    int v3 = (unsigned int **)(*(void *)result + 8);
    do
    {
      if (((unint64_t)*(v3 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t result = *v3;
        void *v3 = 0;
        if (result) {
          uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
        }
      }
      v3 += 2;
      v2 -= 16;
    }
    while (v2);
  }
  return result;
}

void *sub_1CD288380(int64x2_t *a1, uint64_t *a2)
{
  unint64_t v2 = 0x8E38E38E38E38E39 * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x38E38E38E38E38ELL) {
    abort();
  }
  if (0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v3) {
    unint64_t v3 = 0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if (0x8E38E38E38E38E39 * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v5 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v5 = v3;
  }
  uint64_t v24 = a1 + 1;
  if (v5 > 0x38E38E38E38E38ELL) {
    sub_1CB833614();
  }
  uint64_t v7 = (char *)operator new(72 * v5);
  uint64_t v8 = *a2;
  *a2 = 0;
  int v9 = &v7[72 * v2];
  *(void *)int v9 = v8;
  *((void *)v9 + 1) = "emit";
  *((void *)v9 + 2) = 4;
  *((void *)v9 + 3) = "Debug Info Emission";
  *((void *)v9 + 4) = 19;
  *((void *)v9 + 5) = "linetables";
  *((void *)v9 + 6) = 10;
  *((void *)v9 + 7) = "CodeView Line Tables";
  *((void *)v9 + ++*(_DWORD *)(result + 8) = 20;
  uint64_t v11 = a1->i64[0];
  unint64_t v10 = a1->u64[1];
  if (v10 == a1->i64[0])
  {
    int64x2_t v17 = vdupq_n_s64(v10);
    int v12 = &v7[72 * v2];
  }
  else
  {
    int v12 = &v7[72 * v2];
    do
    {
      uint64_t v13 = *(void *)(v10 - 72);
      v10 -= 72;
      *(void *)unint64_t v10 = 0;
      *((void *)v12 - 9) = v13;
      v12 -= 72;
      long long v14 = *(_OWORD *)(v10 + 8);
      long long v15 = *(_OWORD *)(v10 + 24);
      long long v16 = *(_OWORD *)(v10 + 40);
      *(_OWORD *)(v12 + 56) = *(_OWORD *)(v10 + 56);
      *(_OWORD *)(v12 + 40) = v16;
      *(_OWORD *)(v12 + 24) = v15;
      *(_OWORD *)(v12 + ++*(_DWORD *)(result + 8) = v14;
    }
    while (v10 != v11);
    int64x2_t v17 = *a1;
  }
  unint64_t v18 = v9 + 72;
  a1->i64[0] = (uint64_t)v12;
  a1->i64[1] = (uint64_t)(v9 + 72);
  int64x2_t v22 = v17;
  uint64_t v19 = a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)&v7[72 * v5];
  uint64_t v23 = v19;
  uint64_t v21 = v17.i64[0];
  sub_1CD288520((uint64_t)&v21);
  return v18;
}

uint64_t sub_1CD288520(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    uint64_t v4 = *(void *)(i - 72);
    *(void *)(i - 72) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_1CD28859C(int64x2_t *a1, uint64_t *a2)
{
  unint64_t v2 = 0x8E38E38E38E38E39 * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x38E38E38E38E38ELL) {
    abort();
  }
  if (0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v3) {
    unint64_t v3 = 0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if (0x8E38E38E38E38E39 * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v5 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v5 = v3;
  }
  uint64_t v24 = a1 + 1;
  if (v5 > 0x38E38E38E38E38ELL) {
    sub_1CB833614();
  }
  uint64_t v7 = (char *)operator new(72 * v5);
  uint64_t v8 = *a2;
  *a2 = 0;
  int v9 = &v7[72 * v2];
  *(void *)int v9 = v8;
  *((void *)v9 + 1) = "emit";
  *((void *)v9 + 2) = 4;
  *((void *)v9 + 3) = "Debug Info Emission";
  *((void *)v9 + 4) = 19;
  *((void *)v9 + 5) = "dwarf";
  *((void *)v9 + 6) = 5;
  *((void *)v9 + 7) = "DWARF Emission";
  *((void *)v9 + ++*(_DWORD *)(result + 8) = 14;
  uint64_t v11 = a1->i64[0];
  unint64_t v10 = a1->u64[1];
  if (v10 == a1->i64[0])
  {
    int64x2_t v17 = vdupq_n_s64(v10);
    int v12 = &v7[72 * v2];
  }
  else
  {
    int v12 = &v7[72 * v2];
    do
    {
      uint64_t v13 = *(void *)(v10 - 72);
      v10 -= 72;
      *(void *)unint64_t v10 = 0;
      *((void *)v12 - 9) = v13;
      v12 -= 72;
      long long v14 = *(_OWORD *)(v10 + 8);
      long long v15 = *(_OWORD *)(v10 + 24);
      long long v16 = *(_OWORD *)(v10 + 40);
      *(_OWORD *)(v12 + 56) = *(_OWORD *)(v10 + 56);
      *(_OWORD *)(v12 + 40) = v16;
      *(_OWORD *)(v12 + 24) = v15;
      *(_OWORD *)(v12 + ++*(_DWORD *)(result + 8) = v14;
    }
    while (v10 != v11);
    int64x2_t v17 = *a1;
  }
  unint64_t v18 = v9 + 72;
  a1->i64[0] = (uint64_t)v12;
  a1->i64[1] = (uint64_t)(v9 + 72);
  int64x2_t v22 = v17;
  uint64_t v19 = a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)&v7[72 * v5];
  uint64_t v23 = v19;
  uint64_t v21 = v17.i64[0];
  sub_1CD288520((uint64_t)&v21);
  return v18;
}

void *sub_1CD28873C(int64x2_t *a1, uint64_t *a2)
{
  unint64_t v2 = 0x8E38E38E38E38E39 * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x38E38E38E38E38ELL) {
    abort();
  }
  if (0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v3) {
    unint64_t v3 = 0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if (0x8E38E38E38E38E39 * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v5 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v5 = v3;
  }
  uint64_t v24 = a1 + 1;
  if (v5 > 0x38E38E38E38E38ELL) {
    sub_1CB833614();
  }
  uint64_t v7 = (char *)operator new(72 * v5);
  uint64_t v8 = *a2;
  *a2 = 0;
  int v9 = &v7[72 * v2];
  *(void *)int v9 = v8;
  *((void *)v9 + 1) = "emit";
  *((void *)v9 + 2) = 4;
  *((void *)v9 + 3) = "Pseudo Probe Emission";
  *((void *)v9 + 4) = 21;
  *((void *)v9 + 5) = "pseudo probe";
  *((void *)v9 + 6) = 12;
  *((void *)v9 + 7) = "Pseudo Probe Emission";
  *((void *)v9 + ++*(_DWORD *)(result + 8) = 21;
  uint64_t v11 = a1->i64[0];
  unint64_t v10 = a1->u64[1];
  if (v10 == a1->i64[0])
  {
    int64x2_t v17 = vdupq_n_s64(v10);
    int v12 = &v7[72 * v2];
  }
  else
  {
    int v12 = &v7[72 * v2];
    do
    {
      uint64_t v13 = *(void *)(v10 - 72);
      v10 -= 72;
      *(void *)unint64_t v10 = 0;
      *((void *)v12 - 9) = v13;
      v12 -= 72;
      long long v14 = *(_OWORD *)(v10 + 8);
      long long v15 = *(_OWORD *)(v10 + 24);
      long long v16 = *(_OWORD *)(v10 + 40);
      *(_OWORD *)(v12 + 56) = *(_OWORD *)(v10 + 56);
      *(_OWORD *)(v12 + 40) = v16;
      *(_OWORD *)(v12 + 24) = v15;
      *(_OWORD *)(v12 + ++*(_DWORD *)(result + 8) = v14;
    }
    while (v10 != v11);
    int64x2_t v17 = *a1;
  }
  unint64_t v18 = v9 + 72;
  a1->i64[0] = (uint64_t)v12;
  a1->i64[1] = (uint64_t)(v9 + 72);
  int64x2_t v22 = v17;
  uint64_t v19 = a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)&v7[72 * v5];
  uint64_t v23 = v19;
  uint64_t v21 = v17.i64[0];
  sub_1CD288520((uint64_t)&v21);
  return v18;
}

void *sub_1CD2888D8(int64x2_t *a1, uint64_t *a2)
{
  unint64_t v2 = 0x8E38E38E38E38E39 * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x38E38E38E38E38ELL) {
    abort();
  }
  if (0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v3) {
    unint64_t v3 = 0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if (0x8E38E38E38E38E39 * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v5 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v5 = v3;
  }
  uint64_t v24 = a1 + 1;
  if (v5 > 0x38E38E38E38E38ELL) {
    sub_1CB833614();
  }
  uint64_t v7 = (char *)operator new(72 * v5);
  uint64_t v8 = *a2;
  *a2 = 0;
  int v9 = &v7[72 * v2];
  *(void *)int v9 = v8;
  *((void *)v9 + 1) = "write_exception";
  *((void *)v9 + 2) = 15;
  *((void *)v9 + 3) = "DWARF Exception Writer";
  *((void *)v9 + 4) = 22;
  *((void *)v9 + 5) = "dwarf";
  *((void *)v9 + 6) = 5;
  *((void *)v9 + 7) = "DWARF Emission";
  *((void *)v9 + ++*(_DWORD *)(result + 8) = 14;
  uint64_t v11 = a1->i64[0];
  unint64_t v10 = a1->u64[1];
  if (v10 == a1->i64[0])
  {
    int64x2_t v17 = vdupq_n_s64(v10);
    int v12 = &v7[72 * v2];
  }
  else
  {
    int v12 = &v7[72 * v2];
    do
    {
      uint64_t v13 = *(void *)(v10 - 72);
      v10 -= 72;
      *(void *)unint64_t v10 = 0;
      *((void *)v12 - 9) = v13;
      v12 -= 72;
      long long v14 = *(_OWORD *)(v10 + 8);
      long long v15 = *(_OWORD *)(v10 + 24);
      long long v16 = *(_OWORD *)(v10 + 40);
      *(_OWORD *)(v12 + 56) = *(_OWORD *)(v10 + 56);
      *(_OWORD *)(v12 + 40) = v16;
      *(_OWORD *)(v12 + 24) = v15;
      *(_OWORD *)(v12 + ++*(_DWORD *)(result + 8) = v14;
    }
    while (v10 != v11);
    int64x2_t v17 = *a1;
  }
  unint64_t v18 = v9 + 72;
  a1->i64[0] = (uint64_t)v12;
  a1->i64[1] = (uint64_t)(v9 + 72);
  int64x2_t v22 = v17;
  uint64_t v19 = a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)&v7[72 * v5];
  uint64_t v23 = v19;
  uint64_t v21 = v17.i64[0];
  sub_1CD288520((uint64_t)&v21);
  return v18;
}

void *sub_1CD288A78(int64x2_t *a1, uint64_t *a2)
{
  unint64_t v2 = 0x8E38E38E38E38E39 * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x38E38E38E38E38ELL) {
    abort();
  }
  if (0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v3) {
    unint64_t v3 = 0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if (0x8E38E38E38E38E39 * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v5 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v5 = v3;
  }
  uint64_t v24 = a1 + 1;
  if (v5 > 0x38E38E38E38E38ELL) {
    sub_1CB833614();
  }
  uint64_t v7 = (char *)operator new(72 * v5);
  uint64_t v8 = *a2;
  *a2 = 0;
  int v9 = &v7[72 * v2];
  *(void *)int v9 = v8;
  *((void *)v9 + 1) = "Control Flow Guard";
  *((void *)v9 + 2) = 18;
  *((void *)v9 + 3) = "Control Flow Guard";
  *((void *)v9 + 4) = 18;
  *((void *)v9 + 5) = "dwarf";
  *((void *)v9 + 6) = 5;
  *((void *)v9 + 7) = "DWARF Emission";
  *((void *)v9 + ++*(_DWORD *)(result + 8) = 14;
  uint64_t v11 = a1->i64[0];
  unint64_t v10 = a1->u64[1];
  if (v10 == a1->i64[0])
  {
    int64x2_t v17 = vdupq_n_s64(v10);
    int v12 = &v7[72 * v2];
  }
  else
  {
    int v12 = &v7[72 * v2];
    do
    {
      uint64_t v13 = *(void *)(v10 - 72);
      v10 -= 72;
      *(void *)unint64_t v10 = 0;
      *((void *)v12 - 9) = v13;
      v12 -= 72;
      long long v14 = *(_OWORD *)(v10 + 8);
      long long v15 = *(_OWORD *)(v10 + 24);
      long long v16 = *(_OWORD *)(v10 + 40);
      *(_OWORD *)(v12 + 56) = *(_OWORD *)(v10 + 56);
      *(_OWORD *)(v12 + 40) = v16;
      *(_OWORD *)(v12 + 24) = v15;
      *(_OWORD *)(v12 + ++*(_DWORD *)(result + 8) = v14;
    }
    while (v10 != v11);
    int64x2_t v17 = *a1;
  }
  unint64_t v18 = v9 + 72;
  a1->i64[0] = (uint64_t)v12;
  a1->i64[1] = (uint64_t)(v9 + 72);
  int64x2_t v22 = v17;
  uint64_t v19 = a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)&v7[72 * v5];
  uint64_t v23 = v19;
  uint64_t v21 = v17.i64[0];
  sub_1CD288520((uint64_t)&v21);
  return v18;
}

uint64_t sub_1CD288C14(uint64_t result, size_t *a2, char *a3, char a4)
{
  unint64_t v8 = result;
LABEL_2:
  __s1 = (const void **)(a2 - 3);
  uint64_t v191 = (uint64_t)a2;
  uint64_t v176 = (long long *)(a2 - 9);
  unint64_t v177 = (long long *)(a2 - 6);
  unint64_t v178 = a2 - 2;
  unint64_t i = v8;
  while (1)
  {
    unint64_t v8 = i;
    uint64_t v10 = (uint64_t)a2 - i;
    uint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - i) >> 3);
    if (v5 || !v4)
    {
      switch(v11)
      {
        case 0:
        case 1:
          return result;
        case 2:
          unsigned int v79 = *((_DWORD *)a2 - 2);
          unsigned int v80 = *(_DWORD *)(v8 + 16);
          if (v79 > v80) {
            goto LABEL_188;
          }
          if (v79 != v80) {
            return result;
          }
          unint64_t v162 = *(a2 - 2);
          unint64_t v163 = *(void *)(v8 + 8);
          if (v163 >= v162) {
            size_t v164 = *(a2 - 2);
          }
          else {
            size_t v164 = *(void *)(v8 + 8);
          }
          if (v164 && (uint64_t result = memcmp(*__s1, *(const void **)v8, v164), result))
          {
            if ((result & 0x80000000) == 0) {
              return result;
            }
          }
          else if (v162 >= v163)
          {
            return result;
          }
LABEL_188:
          long long v196 = *(_OWORD *)v8;
          *(_OWORD *)unint64_t v8 = *(_OWORD *)__s1;
          *(_OWORD *)__s1 = v196;
          int v81 = *(_DWORD *)(v8 + 16);
          *(_DWORD *)(v8 + 16) = *((_DWORD *)a2 - 2);
          *((_DWORD *)a2 - 2) = v81;
          return result;
        case 3:
          return sub_1CD289D3C(v8, (long long *)(v8 + 24), (long long *)__s1);
        case 4:
          return sub_1CD28A264(v8, v8 + 24, v8 + 48, (uint64_t)__s1);
        case 5:
          return sub_1CD289B38(v8, v8 + 24, v8 + 48, v8 + 72, (uint64_t)__s1);
        default:
          JUMPOUT(0);
      }
    }
    if (v10 <= 575) {
      break;
    }
    if (!a3)
    {
      if ((size_t *)v8 == a2) {
        return result;
      }
      int64_t v100 = (unint64_t)(v11 - 2) >> 1;
      int64_t v101 = v100;
      while (1)
      {
        int64_t v102 = v101;
        if (v100 < v101) {
          goto LABEL_293;
        }
        uint64_t v103 = (2 * v101) | 1;
        unint64_t v104 = v8 + 24 * v103;
        if (2 * v101 + 2 >= v11) {
          goto LABEL_254;
        }
        unsigned int v105 = *(_DWORD *)(v8 + 24 * v103 + 16);
        unsigned int v106 = *(_DWORD *)(v104 + 40);
        if (v105 <= v106)
        {
          if (v105 != v106) {
            goto LABEL_254;
          }
          unint64_t v107 = *(void *)(v104 + 8);
          unint64_t v108 = *(void *)(v104 + 32);
          if (v108 >= v107) {
            size_t v109 = *(void *)(v104 + 8);
          }
          else {
            size_t v109 = *(void *)(v104 + 32);
          }
          if (v109 && (uint64_t result = memcmp(*(const void **)v104, *(const void **)(v104 + 24), v109), result))
          {
            if ((result & 0x80000000) == 0) {
              goto LABEL_254;
            }
          }
          else if (v107 >= v108)
          {
            goto LABEL_254;
          }
        }
        v104 += 24;
        uint64_t v103 = 2 * v102 + 2;
LABEL_254:
        unsigned int v110 = *(_DWORD *)(v104 + 16);
        unint64_t v111 = v8 + 24 * v102;
        unsigned int v114 = *(_DWORD *)(v111 + 16);
        uint64_t v113 = (_DWORD *)(v111 + 16);
        unsigned int v112 = v114;
        BOOL v115 = v110 == v114;
        if (v110 > v114) {
          goto LABEL_293;
        }
        unint64_t v116 = v8 + 24 * v102;
        unsigned int __s1b = v112;
        if (v115)
        {
          unint64_t v117 = *(void *)(v104 + 8);
          unint64_t v119 = *(void *)(v116 + 8);
          if (v119 >= v117) {
            size_t v118 = *(void *)(v104 + 8);
          }
          else {
            size_t v118 = *(void *)(v116 + 8);
          }
          if (v118 && (result = memcmp(*(const void **)v104, *(const void **)v116, v118), unsigned int v112 = __s1b, result))
          {
            if ((result & 0x80000000) != 0) {
              goto LABEL_293;
            }
          }
          else if (v117 < v119)
          {
            goto LABEL_293;
          }
        }
        else
        {
          unint64_t v119 = *(void *)(v116 + 8);
        }
        __s2b = *(void **)v116;
        *(_OWORD *)unint64_t v116 = *(_OWORD *)v104;
        *uint64_t v113 = *(_DWORD *)(v104 + 16);
        while (1)
        {
          if (v100 < v103) {
            goto LABEL_292;
          }
          unint64_t v120 = v104;
          uint64_t v121 = 2 * v103;
          uint64_t v103 = (2 * v103) | 1;
          unint64_t v104 = v8 + 24 * v103;
          uint64_t v122 = v121 + 2;
          if (v121 + 2 < v11)
          {
            unsigned int v123 = *(_DWORD *)(v8 + 24 * v103 + 16);
            unsigned int v124 = *(_DWORD *)(v104 + 40);
            if (v123 > v124) {
              goto LABEL_269;
            }
            if (v123 == v124)
            {
              unint64_t v125 = *(void *)(v104 + 8);
              unint64_t v126 = *(void *)(v104 + 32);
              if (v126 >= v125) {
                size_t v127 = *(void *)(v104 + 8);
              }
              else {
                size_t v127 = *(void *)(v104 + 32);
              }
              if (v127
                && (uint64_t result = memcmp(*(const void **)v104, *(const void **)(v104 + 24), v127),
                    unsigned int v112 = __s1b,
                    result))
              {
                int64_t v100 = (unint64_t)(v11 - 2) >> 1;
                if ((result & 0x80000000) != 0) {
                  goto LABEL_269;
                }
              }
              else
              {
                BOOL v4 = v125 >= v126;
                int64_t v100 = (unint64_t)(v11 - 2) >> 1;
                if (!v4)
                {
LABEL_269:
                  v104 += 24;
                  uint64_t v103 = v122;
                }
              }
            }
          }
          unsigned int v128 = *(_DWORD *)(v104 + 16);
          if (v128 > v112) {
            goto LABEL_291;
          }
          if (v128 != v112) {
            goto LABEL_290;
          }
          unint64_t v129 = *(void *)(v104 + 8);
          size_t v130 = v119 >= v129 ? *(void *)(v104 + 8) : v119;
          if (!v130) {
            break;
          }
          uint64_t result = memcmp(*(const void **)v104, __s2b, v130);
          unsigned int v112 = __s1b;
          if (!result) {
            break;
          }
          if ((result & 0x80000000) != 0) {
            goto LABEL_291;
          }
LABEL_290:
          *(_OWORD *)unint64_t v120 = *(_OWORD *)v104;
          *(_DWORD *)(v120 + 16) = *(_DWORD *)(v104 + 16);
        }
        if (v129 >= v119) {
          goto LABEL_290;
        }
LABEL_291:
        unint64_t v104 = v120;
LABEL_292:
        *(void *)unint64_t v104 = __s2b;
        *(void *)(v104 + ++*(_DWORD *)(result + 8) = v119;
        *(_DWORD *)(v104 + 16) = v112;
LABEL_293:
        int64_t v101 = v102 - 1;
        if (!v102)
        {
          unint64_t v131 = (_DWORD *)v191;
          while (1)
          {
            uint64_t v132 = 0;
            __s1c = v131;
            long long v197 = *(_OWORD *)v8;
            int __s2c = *(_DWORD *)(v8 + 16);
            unint64_t v133 = v8;
            do
            {
              unint64_t v134 = v133;
              uint64_t v135 = v132 + 1;
              v133 += 24 * (v132 + 1);
              uint64_t v136 = 2 * v132;
              uint64_t v132 = (2 * v132) | 1;
              uint64_t v137 = v136 + 2;
              if (v136 + 2 >= v11) {
                goto LABEL_308;
              }
              unsigned int v138 = *(_DWORD *)(v134 + 24 * v135 + 16);
              unsigned int v139 = *(_DWORD *)(v133 + 40);
              if (v138 > v139)
              {
LABEL_298:
                v133 += 24;
                uint64_t v132 = v137;
                goto LABEL_308;
              }
              if (v138 == v139)
              {
                unint64_t v140 = *(void *)(v133 + 8);
                unint64_t v141 = *(void *)(v133 + 32);
                if (v141 >= v140) {
                  size_t v142 = *(void *)(v133 + 8);
                }
                else {
                  size_t v142 = *(void *)(v133 + 32);
                }
                if (v142 && (uint64_t result = memcmp(*(const void **)v133, *(const void **)(v133 + 24), v142), result))
                {
                  if ((result & 0x80000000) != 0) {
                    goto LABEL_298;
                  }
                }
                else if (v140 < v141)
                {
                  goto LABEL_298;
                }
              }
LABEL_308:
              *(_OWORD *)unint64_t v134 = *(_OWORD *)v133;
              *(_DWORD *)(v134 + 16) = *(_DWORD *)(v133 + 16);
            }
            while (v132 <= (uint64_t)((unint64_t)(v11 - 2) >> 1));
            uint64_t v143 = __s1c - 6;
            int v192 = (char *)(__s1c - 6);
            if ((_DWORD *)v133 == __s1c - 6)
            {
              *(_OWORD *)unint64_t v133 = v197;
              *(_DWORD *)(v133 + 16) = __s2c;
              goto LABEL_340;
            }
            *(_OWORD *)unint64_t v133 = *v143;
            *(_DWORD *)(v133 + 16) = *(__s1c - 2);
            _OWORD *v143 = v197;
            *(__s1c - 2) = __s2c;
            uint64_t v144 = v133 - v8 + 24;
            if (v144 >= 25)
            {
              unint64_t v145 = v144 / 0x18uLL - 2;
              unint64_t v146 = v145 >> 1;
              unint64_t v147 = v8 + 24 * (v145 >> 1);
              unsigned int v148 = *(_DWORD *)(v147 + 16);
              uint64_t v149 = *(unsigned int *)(v133 + 16);
              BOOL v150 = v148 == v149;
              if (v148 <= v149)
              {
                if (!v150) {
                  goto LABEL_340;
                }
                unint64_t v159 = *(void *)(v147 + 8);
                unsigned int v151 = *(void **)(v133 + 8);
                if ((unint64_t)v151 >= v159) {
                  size_t v160 = *(void *)(v147 + 8);
                }
                else {
                  size_t v160 = *(void *)(v133 + 8);
                }
                if (v160
                  && (unsigned int __s1e = *(_DWORD *)(v133 + 16),
                      uint64_t result = memcmp(*(const void **)v147, *(const void **)v133, v160),
                      uint64_t v149 = __s1e,
                      result))
                {
                  if ((result & 0x80000000) == 0) {
                    goto LABEL_340;
                  }
                }
                else if (v159 >= (unint64_t)v151)
                {
                  goto LABEL_340;
                }
              }
              else
              {
                unsigned int v151 = *(void **)(v133 + 8);
              }
              __s1d = *(void **)v133;
              *(_OWORD *)unint64_t v133 = *(_OWORD *)v147;
              *(_DWORD *)(v133 + 16) = *(_DWORD *)(v147 + 16);
              if (v145 < 2) {
                goto LABEL_339;
              }
              __s2d = v151;
              while (1)
              {
                unint64_t v152 = v147;
                unint64_t v153 = v146 - 1;
                unint64_t v146 = (v146 - 1) >> 1;
                unint64_t v147 = v8 + 24 * v146;
                unsigned int v154 = *(_DWORD *)(v147 + 16);
                BOOL v155 = v154 == v149;
                if (v154 <= v149)
                {
                  if (!v155) {
                    goto LABEL_338;
                  }
                  unint64_t v156 = *(void *)(v147 + 8);
                  if ((unint64_t)v151 >= v156) {
                    size_t v157 = *(void *)(v147 + 8);
                  }
                  else {
                    size_t v157 = (size_t)v151;
                  }
                  if (v157
                    && (uint64_t v158 = v149,
                        uint64_t result = memcmp(*(const void **)v147, __s1d, v157),
                        uint64_t v149 = v158,
                        unsigned int v151 = __s2d,
                        result))
                  {
                    if ((result & 0x80000000) == 0) {
                      goto LABEL_338;
                    }
                  }
                  else if (v156 >= (unint64_t)v151)
                  {
LABEL_338:
                    unint64_t v147 = v152;
LABEL_339:
                    *(void *)unint64_t v147 = __s1d;
                    *(void *)(v147 + ++*(_DWORD *)(result + 8) = v151;
                    *(_DWORD *)(v147 + 16) = v149;
                    break;
                  }
                }
                *(_OWORD *)unint64_t v152 = *(_OWORD *)v147;
                *(_DWORD *)(v152 + 16) = *(_DWORD *)(v147 + 16);
                if (v153 <= 1) {
                  goto LABEL_339;
                }
              }
            }
LABEL_340:
            BOOL v161 = v11-- <= 2;
            unint64_t v131 = v192;
            if (v161) {
              return result;
            }
          }
        }
      }
    }
    unint64_t v12 = (unint64_t)v11 >> 1;
    uint64_t v13 = (long long *)(v8 + 24 * ((unint64_t)v11 >> 1));
    if ((unint64_t)v10 < 0xC01)
    {
      uint64_t result = sub_1CD289D3C((uint64_t)v13, (long long *)v8, (long long *)__s1);
    }
    else
    {
      sub_1CD289D3C(v8, v13, (long long *)__s1);
      uint64_t v14 = 3 * v12;
      unint64_t v15 = v8 + 8 * v14;
      sub_1CD289D3C(v8 + 24, (long long *)(v15 - 24), v177);
      sub_1CD289D3C(v8 + 48, (long long *)(v8 + 24 + 8 * v14), v176);
      uint64_t result = sub_1CD289D3C(v15 - 24, v13, (long long *)(v8 + 24 + 8 * v14));
      long long v193 = *(_OWORD *)v8;
      *(_OWORD *)unint64_t v8 = *v13;
      long long *v13 = v193;
      int v16 = *(_DWORD *)(v8 + 16);
      *(_DWORD *)(v8 + 16) = *(_DWORD *)(v15 + 16);
      *(_DWORD *)(v15 + 16) = v16;
    }
    __s2 = a3 - 1;
    if (a4)
    {
      unsigned int v17 = *(_DWORD *)(v8 + 16);
LABEL_24:
      uint64_t v21 = 0;
      uint64_t v23 = *(const void **)v8;
      size_t v22 = *(void *)(v8 + 8);
      while (1)
      {
        unsigned int v24 = *(_DWORD *)(v8 + v21 + 40);
        if (v24 > v17) {
          goto LABEL_35;
        }
        if (v24 != v17) {
          goto LABEL_36;
        }
        size_t v25 = *(void *)(v8 + v21 + 32);
        size_t v26 = v22 >= v25 ? *(void *)(v8 + v21 + 32) : v22;
        if (!v26) {
          break;
        }
        int v27 = memcmp(*(const void **)(v8 + v21 + 24), v23, v26);
        if (!v27) {
          break;
        }
        if ((v27 & 0x80000000) == 0) {
          goto LABEL_36;
        }
LABEL_35:
        v21 += 24;
      }
      if (v25 < v22) {
        goto LABEL_35;
      }
LABEL_36:
      unint64_t v28 = v8 + v21 + 24;
      if (v21)
      {
        unsigned int v29 = *((_DWORD *)a2 - 2);
        uint64_t v30 = v178;
        a2 = (size_t *)__s1;
        if (v29 <= v17)
        {
          do
          {
            if (v29 == v17)
            {
              size_t v31 = *v30;
              if (v22 >= *v30) {
                size_t v32 = *v30;
              }
              else {
                size_t v32 = v22;
              }
              if (v32 && (int v33 = memcmp((const void *)*(v30 - 1), v23, v32)) != 0)
              {
                if (v33 < 0) {
                  break;
                }
              }
              else if (v31 < v22)
              {
                goto LABEL_51;
              }
            }
            a2 -= 3;
            unsigned int v29 = *((_DWORD *)v30 - 4);
            v30 -= 3;
          }
          while (v29 <= v17);
LABEL_48:
          a2 = v30 - 1;
        }
      }
      else if (v28 < (unint64_t)a2)
      {
        a2 = (size_t *)__s1;
        unsigned int v34 = *(_DWORD *)(v191 - 8);
        if (v34 <= v17)
        {
          uint64_t v30 = v178;
          a2 = (size_t *)__s1;
          while (1)
          {
            uint64_t v48 = (const void **)(v30 - 1);
            if (v34 == v17)
            {
              size_t v49 = *v30;
              if (v22 >= *v30) {
                size_t v50 = *v30;
              }
              else {
                size_t v50 = v22;
              }
              if (v50 && (int v51 = memcmp(*v48, v23, v50)) != 0)
              {
                BOOL v52 = v51 >= 0;
              }
              else
              {
                if (v49 < v22) {
                  break;
                }
                BOOL v52 = 1;
              }
              if (!v52 || v28 >= (unint64_t)v48) {
                break;
              }
            }
            else if (v28 >= (unint64_t)v48)
            {
              a2 = v30 - 1;
              break;
            }
            a2 -= 3;
            unsigned int v34 = *((_DWORD *)v30 - 4);
            v30 -= 3;
            if (v34 > v17) {
              goto LABEL_48;
            }
          }
        }
      }
LABEL_51:
      unint64_t i = v28;
      if (v28 < (unint64_t)a2)
      {
        long long v35 = a2;
        do
        {
          long long v194 = *(_OWORD *)i;
          *(_OWORD *)unint64_t i = *(_OWORD *)v35;
          *(_OWORD *)long long v35 = v194;
          int v36 = *(_DWORD *)(i + 16);
          *(_DWORD *)(i + 16) = *((_DWORD *)v35 + 4);
          *((_DWORD *)v35 + 4) = v36;
          while (1)
          {
            do
            {
              i += 24;
              unsigned int v37 = *(_DWORD *)(i + 16);
            }
            while (v37 > v17);
            if (v37 != v17) {
              break;
            }
            size_t v38 = *(void *)(i + 8);
            if (v22 >= v38) {
              size_t v39 = *(void *)(i + 8);
            }
            else {
              size_t v39 = v22;
            }
            if (v39 && (int v40 = memcmp(*(const void **)i, v23, v39)) != 0)
            {
              if ((v40 & 0x80000000) == 0) {
                break;
              }
            }
            else if (v38 >= v22)
            {
              break;
            }
          }
          uint64_t v41 = v35 - 3;
          unsigned int v42 = *((_DWORD *)v35 - 2);
          if (v42 <= v17)
          {
            int v43 = v35 - 2;
            do
            {
              if (v42 == v17)
              {
                size_t v44 = *v43;
                if (v22 >= *v43) {
                  size_t v45 = *v43;
                }
                else {
                  size_t v45 = v22;
                }
                if (v45 && (int v46 = memcmp((const void *)*(v43 - 1), v23, v45)) != 0)
                {
                  if (v46 < 0) {
                    break;
                  }
                }
                else if (v44 < v22)
                {
                  goto LABEL_77;
                }
              }
              v41 -= 3;
              unsigned int v42 = *((_DWORD *)v43 - 4);
              v43 -= 3;
            }
            while (v42 <= v17);
            uint64_t v41 = v43 - 1;
          }
LABEL_77:
          long long v35 = v41;
        }
        while (i < (unint64_t)v41);
      }
      if (i - 24 != v8)
      {
        *(_OWORD *)unint64_t v8 = *(_OWORD *)(i - 24);
        *(_DWORD *)(v8 + 16) = *(_DWORD *)(i - 8);
      }
      *(void *)(i - 24) = v23;
      *(void *)(i - 16) = v22;
      *(_DWORD *)(i - ++*(_DWORD *)(result + 8) = v17;
      BOOL v4 = v28 >= (unint64_t)a2;
      a2 = (size_t *)v191;
      a3 = __s2;
      if (v4)
      {
        BOOL v47 = sub_1CD289F88(v8, i - 24);
        uint64_t result = sub_1CD289F88(i, v191);
        if (result)
        {
          a2 = (size_t *)(i - 24);
          if (v47) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v47) {
          goto LABEL_84;
        }
      }
      else
      {
LABEL_84:
        uint64_t result = sub_1CD288C14(v8, i - 24, __s2, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      unsigned int v17 = *(_DWORD *)(v8 - 8);
      unsigned int v18 = *(_DWORD *)(v8 + 16);
      if (v17 > v18)
      {
        unsigned int v17 = *(_DWORD *)(v8 + 16);
        goto LABEL_24;
      }
      if (v17 == v18)
      {
        size_t v19 = *(void *)(v8 - 16);
        size_t v54 = *(void *)(v8 + 8);
        if (v54 >= v19) {
          size_t v20 = *(void *)(v8 - 16);
        }
        else {
          size_t v20 = *(void *)(v8 + 8);
        }
        if (v20 && (uint64_t result = memcmp(*(const void **)(v8 - 24), *(const void **)v8, v20), result))
        {
          if ((result & 0x80000000) != 0) {
            goto LABEL_24;
          }
        }
        else if (v19 < v54)
        {
          goto LABEL_24;
        }
      }
      else
      {
        size_t v54 = *(void *)(v8 + 8);
      }
      uint64_t v55 = *(const void **)v8;
      unsigned int v56 = *((_DWORD *)a2 - 2);
      if (v18 > v56)
      {
LABEL_104:
        unint64_t i = v8 + 24;
        unsigned int v57 = *(_DWORD *)(v8 + 40);
        if (v18 <= v57)
        {
          unint64_t v58 = v8 + 32;
          do
          {
            if (v18 == v57)
            {
              size_t v59 = *(void *)v58;
              if (*(void *)v58 >= v54) {
                size_t v60 = v54;
              }
              else {
                size_t v60 = *(void *)v58;
              }
              if (v60 && (uint64_t result = memcmp(v55, *(const void **)(v58 - 8), v60), result))
              {
                a2 = (size_t *)v191;
                if ((result & 0x80000000) != 0) {
                  break;
                }
              }
              else
              {
                BOOL v4 = v54 >= v59;
                a2 = (size_t *)v191;
                if (!v4) {
                  goto LABEL_118;
                }
              }
            }
            i += 24;
            unsigned int v57 = *(_DWORD *)(v58 + 32);
            v58 += 24;
          }
          while (v18 <= v57);
          unint64_t i = v58 - 8;
        }
        goto LABEL_118;
      }
      if (v18 == v56)
      {
        size_t v65 = *(a2 - 2);
        if (v65 >= v54) {
          size_t v66 = v54;
        }
        else {
          size_t v66 = *(a2 - 2);
        }
        if (v66 && (uint64_t result = memcmp(*(const void **)v8, *__s1, v66), result))
        {
          if ((result & 0x80000000) != 0) {
            goto LABEL_104;
          }
        }
        else if (v54 < v65)
        {
          goto LABEL_104;
        }
      }
      for (unint64_t i = v8 + 24; i < (unint64_t)a2; i += 24)
      {
        unsigned int v76 = *(_DWORD *)(i + 16);
        if (v18 > v76) {
          break;
        }
        if (v18 == v76)
        {
          size_t v77 = *(void *)(i + 8);
          if (v77 >= v54) {
            size_t v78 = v54;
          }
          else {
            size_t v78 = *(void *)(i + 8);
          }
          if (v78 && (uint64_t result = memcmp(v55, *(const void **)i, v78), result))
          {
            if ((result & 0x80000000) != 0) {
              break;
            }
          }
          else if (v54 < v77)
          {
            break;
          }
        }
      }
LABEL_118:
      unint64_t v61 = a2;
      if (i >= (unint64_t)a2) {
        goto LABEL_166;
      }
      for (unsigned int j = v178; ; j -= 3)
      {
        if (v18 > v56) {
          goto LABEL_130;
        }
        if (v18 != v56) {
          goto LABEL_139;
        }
        size_t v63 = *j;
        size_t v64 = *j >= v54 ? v54 : *j;
        if (!v64) {
          break;
        }
        uint64_t result = memcmp(v55, (const void *)*(j - 1), v64);
        if (!result) {
          break;
        }
        if ((result & 0x80000000) == 0) {
          goto LABEL_139;
        }
LABEL_130:
        unsigned int v56 = *((_DWORD *)j - 4);
      }
      if (v54 < v63) {
        goto LABEL_130;
      }
LABEL_139:
      unint64_t v61 = j - 1;
LABEL_166:
      if (i < (unint64_t)v61)
      {
        long long v195 = *(_OWORD *)i;
        *(_OWORD *)unint64_t i = *(_OWORD *)v61;
        *(_OWORD *)unint64_t v61 = v195;
        int v67 = *(_DWORD *)(i + 16);
        *(_DWORD *)(i + 16) = *((_DWORD *)v61 + 4);
        *((_DWORD *)v61 + 4) = v67;
        unint64_t v68 = i + 24;
        unsigned int v69 = *(_DWORD *)(i + 40);
        if (v18 > v69)
        {
          i += 24;
          goto LABEL_156;
        }
        unint64_t v70 = i + 32;
        while (1)
        {
          if (v18 == v69)
          {
            size_t v71 = *(void *)v70;
            if (*(void *)v70 >= v54) {
              size_t v72 = v54;
            }
            else {
              size_t v72 = *(void *)v70;
            }
            if (v72 && (uint64_t result = memcmp(v55, *(const void **)(v70 - 8), v72), result))
            {
              if ((result & 0x80000000) != 0) {
                goto LABEL_153;
              }
            }
            else if (v54 < v71)
            {
              unint64_t i = v68;
LABEL_155:
              a2 = (size_t *)v191;
              while (1)
              {
                do
                {
LABEL_156:
                  v61 -= 3;
                  unsigned int v73 = *((_DWORD *)v61 + 4);
                }
                while (v18 > v73);
                if (v18 != v73) {
                  goto LABEL_166;
                }
                size_t v74 = v61[1];
                if (v74 >= v54) {
                  size_t v75 = v54;
                }
                else {
                  size_t v75 = v61[1];
                }
                if (v75 && (uint64_t result = memcmp(v55, (const void *)*v61, v75), result))
                {
                  if ((result & 0x80000000) == 0) {
                    goto LABEL_166;
                  }
                }
                else if (v54 >= v74)
                {
                  goto LABEL_166;
                }
              }
            }
          }
          v68 += 24;
          unsigned int v69 = *(_DWORD *)(v70 + 32);
          v70 += 24;
          if (v18 > v69)
          {
LABEL_153:
            unint64_t i = v70 - 8;
            goto LABEL_155;
          }
        }
      }
      BOOL v4 = i - 24 >= v8;
      BOOL v5 = i - 24 == v8;
      if (i - 24 != v8)
      {
        *(_OWORD *)unint64_t v8 = *(_OWORD *)(i - 24);
        *(_DWORD *)(v8 + 16) = *(_DWORD *)(i - 8);
      }
      a4 = 0;
      *(void *)(i - 24) = v55;
      *(void *)(i - 16) = v54;
      *(_DWORD *)(i - ++*(_DWORD *)(result + 8) = v18;
      --a3;
    }
  }
  unint64_t v82 = v8 + 24;
  BOOL v84 = (size_t *)v8 == a2 || v82 == (void)a2;
  if ((a4 & 1) == 0)
  {
    if (v84) {
      return result;
    }
    while (1)
    {
      unint64_t v165 = v8;
      unint64_t v8 = v82;
      unsigned int v166 = *(_DWORD *)(v165 + 40);
      unsigned int v167 = *(_DWORD *)(v165 + 16);
      if (v166 <= v167)
      {
        if (v166 != v167) {
          goto LABEL_377;
        }
        size_t v168 = *(void *)(v165 + 32);
        size_t v174 = *(void *)(v165 + 8);
        if (v174 >= v168) {
          size_t v175 = *(void *)(v165 + 32);
        }
        else {
          size_t v175 = *(void *)(v165 + 8);
        }
        if (v175 && (uint64_t result = memcmp(*(const void **)v8, *(const void **)v165, v175), result))
        {
          if ((result & 0x80000000) == 0) {
            goto LABEL_377;
          }
        }
        else if (v168 >= v174)
        {
          goto LABEL_377;
        }
      }
      else
      {
        size_t v168 = *(void *)(v165 + 32);
      }
      uint64_t v169 = *(const void **)v8;
      while (1)
      {
        do
        {
          unint64_t v170 = v165;
          *(_OWORD *)(v165 + 24) = *(_OWORD *)v165;
          *(_DWORD *)(v165 + 40) = *(_DWORD *)(v165 + 16);
          v165 -= 24;
          unsigned int v171 = *(_DWORD *)(v170 - 8);
        }
        while (v166 > v171);
        if (v166 != v171) {
          break;
        }
        size_t v172 = *(void *)(v170 - 16);
        if (v172 >= v168) {
          size_t v173 = v168;
        }
        else {
          size_t v173 = *(void *)(v170 - 16);
        }
        if (v173 && (uint64_t result = memcmp(v169, *(const void **)(v170 - 24), v173), result))
        {
          if ((result & 0x80000000) == 0) {
            break;
          }
        }
        else if (v168 >= v172)
        {
          break;
        }
      }
      *(void *)unint64_t v170 = v169;
      *(void *)(v170 + ++*(_DWORD *)(result + 8) = v168;
      *(_DWORD *)(v170 + 16) = v166;
      a2 = (size_t *)v191;
LABEL_377:
      unint64_t v82 = v8 + 24;
      if ((size_t *)(v8 + 24) == a2) {
        return result;
      }
    }
  }
  if (v84) {
    return result;
  }
  uint64_t v85 = 0;
  int v86 = (const void **)v8;
  while (2)
  {
    BOOL v87 = v86;
    int v86 = (const void **)v82;
    unsigned int v88 = *((_DWORD *)v87 + 10);
    unsigned int v89 = *((_DWORD *)v87 + 4);
    if (v88 <= v89)
    {
      if (v88 != v89) {
        goto LABEL_237;
      }
      size_t v90 = (size_t)v87[4];
      size_t v98 = (size_t)v87[1];
      if (v98 >= v90) {
        size_t v99 = (size_t)v87[4];
      }
      else {
        size_t v99 = (size_t)v87[1];
      }
      if (v99 && (uint64_t result = memcmp(*v86, *v87, v99), result))
      {
        if ((result & 0x80000000) == 0) {
          goto LABEL_237;
        }
      }
      else if (v90 >= v98)
      {
        goto LABEL_237;
      }
    }
    else
    {
      size_t v90 = (size_t)v87[4];
    }
    __s1a = (void *)v87[3];
    *(_OWORD *)int v86 = *(_OWORD *)v87;
    *((_DWORD *)v86 + 4) = *((_DWORD *)v87 + 4);
    unint64_t v91 = v8;
    if (v87 == (const void **)v8) {
      goto LABEL_236;
    }
    __s2a = v86;
    uint64_t v92 = v85;
    while (2)
    {
      uint64_t v93 = v8 + v92;
      unsigned int v94 = (const void **)(v8 + v92 - 24);
      unsigned int v95 = *(_DWORD *)(v8 + v92 - 8);
      if (v88 > v95) {
        goto LABEL_221;
      }
      if (v88 != v95) {
        goto LABEL_233;
      }
      size_t v96 = *(void *)(v8 + v92 - 16);
      if (v96 >= v90) {
        size_t v97 = v90;
      }
      else {
        size_t v97 = *(void *)(v8 + v92 - 16);
      }
      if (v97)
      {
        uint64_t result = memcmp(__s1a, *v94, v97);
        if (result)
        {
          if ((result & 0x80000000) == 0)
          {
LABEL_233:
            unint64_t v91 = (unint64_t)v87;
            goto LABEL_235;
          }
          goto LABEL_221;
        }
      }
      if (v90 < v96)
      {
LABEL_221:
        v87 -= 3;
        *(_OWORD *)uint64_t v93 = *(_OWORD *)v94;
        *(_DWORD *)(v93 + 16) = v95;
        v92 -= 24;
        if (!v92)
        {
          unint64_t v91 = v8;
          goto LABEL_235;
        }
        continue;
      }
      break;
    }
    unint64_t v91 = v8 + v92;
LABEL_235:
    a2 = (size_t *)v191;
    int v86 = __s2a;
LABEL_236:
    *(void *)unint64_t v91 = __s1a;
    *(void *)(v91 + ++*(_DWORD *)(result + 8) = v90;
    *(_DWORD *)(v91 + 16) = v88;
LABEL_237:
    unint64_t v82 = (unint64_t)(v86 + 3);
    v85 += 24;
    if (v86 + 3 != (const void **)a2) {
      continue;
    }
    return result;
  }
}

uint64_t sub_1CD289B38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_1CD28A264(a1, a2, a3, a4);
  unsigned int v11 = *(_DWORD *)(a5 + 16);
  unsigned int v12 = *(_DWORD *)(a4 + 16);
  if (v11 <= v12)
  {
    if (v11 != v12) {
      return result;
    }
    unint64_t v27 = *(void *)(a5 + 8);
    unint64_t v28 = *(void *)(a4 + 8);
    if (v28 >= v27) {
      size_t v29 = *(void *)(a5 + 8);
    }
    else {
      size_t v29 = *(void *)(a4 + 8);
    }
    if (v29 && (uint64_t result = memcmp(*(const void **)a5, *(const void **)a4, v29), result))
    {
      if ((result & 0x80000000) == 0) {
        return result;
      }
    }
    else if (v27 >= v28)
    {
      return result;
    }
  }
  long long v13 = *(_OWORD *)a4;
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(_OWORD *)a5 = v13;
  int v14 = *(_DWORD *)(a4 + 16);
  *(_DWORD *)(a4 + 16) = *(_DWORD *)(a5 + 16);
  *(_DWORD *)(a5 + 16) = v14;
  unsigned int v15 = *(_DWORD *)(a4 + 16);
  unsigned int v16 = *(_DWORD *)(a3 + 16);
  if (v15 <= v16)
  {
    if (v15 != v16) {
      return result;
    }
    unint64_t v30 = *(void *)(a4 + 8);
    unint64_t v31 = *(void *)(a3 + 8);
    if (v31 >= v30) {
      size_t v32 = *(void *)(a4 + 8);
    }
    else {
      size_t v32 = *(void *)(a3 + 8);
    }
    if (v32 && (uint64_t result = memcmp(*(const void **)a4, *(const void **)a3, v32), result))
    {
      if ((result & 0x80000000) == 0) {
        return result;
      }
    }
    else if (v30 >= v31)
    {
      return result;
    }
  }
  long long v17 = *(_OWORD *)a3;
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_OWORD *)a4 = v17;
  int v18 = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
  *(_DWORD *)(a4 + 16) = v18;
  unsigned int v19 = *(_DWORD *)(a3 + 16);
  unsigned int v20 = *(_DWORD *)(a2 + 16);
  if (v19 <= v20)
  {
    if (v19 != v20) {
      return result;
    }
    unint64_t v33 = *(void *)(a3 + 8);
    unint64_t v34 = *(void *)(a2 + 8);
    if (v34 >= v33) {
      size_t v35 = *(void *)(a3 + 8);
    }
    else {
      size_t v35 = *(void *)(a2 + 8);
    }
    if (v35 && (uint64_t result = memcmp(*(const void **)a3, *(const void **)a2, v35), result))
    {
      if ((result & 0x80000000) == 0) {
        return result;
      }
    }
    else if (v33 >= v34)
    {
      return result;
    }
  }
  long long v21 = *(_OWORD *)a2;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)a3 = v21;
  int v22 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(a3 + 16) = v22;
  unsigned int v23 = *(_DWORD *)(a2 + 16);
  unsigned int v24 = *(_DWORD *)(a1 + 16);
  if (v23 > v24)
  {
LABEL_5:
    long long v25 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v25;
    int v26 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = v26;
    return result;
  }
  if (v23 == v24)
  {
    unint64_t v36 = *(void *)(a2 + 8);
    unint64_t v37 = *(void *)(a1 + 8);
    if (v37 >= v36) {
      size_t v38 = *(void *)(a2 + 8);
    }
    else {
      size_t v38 = *(void *)(a1 + 8);
    }
    if (v38 && (uint64_t result = memcmp(*(const void **)a2, *(const void **)a1, v38), result))
    {
      if ((result & 0x80000000) != 0) {
        goto LABEL_5;
      }
    }
    else if (v36 < v37)
    {
      goto LABEL_5;
    }
  }
  return result;
}

uint64_t sub_1CD289D3C(uint64_t result, long long *a2, long long *a3)
{
  BOOL v5 = (long long *)result;
  uint64_t v6 = (unsigned int *)(a2 + 1);
  unsigned int v7 = *((_DWORD *)a2 + 4);
  int v9 = (unsigned int *)(result + 16);
  unsigned int v8 = *(_DWORD *)(result + 16);
  if (v7 > v8) {
    goto LABEL_2;
  }
  if (v7 != v8) {
    goto LABEL_21;
  }
  unint64_t v13 = *((void *)a2 + 1);
  unint64_t v14 = *(void *)(result + 8);
  if (v14 >= v13) {
    size_t v15 = *((void *)a2 + 1);
  }
  else {
    size_t v15 = *(void *)(result + 8);
  }
  if (v15)
  {
    uint64_t result = memcmp(*(const void **)a2, *(const void **)result, v15);
    if (result)
    {
      if ((result & 0x80000000) != 0) {
        goto LABEL_2;
      }
LABEL_21:
      unsigned int v19 = *((_DWORD *)a3 + 4);
      if (v19 <= v7)
      {
        if (v19 != v7) {
          return result;
        }
        unint64_t v24 = *((void *)a3 + 1);
        unint64_t v25 = *((void *)a2 + 1);
        if (v25 >= v24) {
          size_t v26 = *((void *)a3 + 1);
        }
        else {
          size_t v26 = *((void *)a2 + 1);
        }
        if (v26 && (uint64_t result = memcmp(*(const void **)a3, *(const void **)a2, v26), result))
        {
          if ((result & 0x80000000) == 0) {
            return result;
          }
        }
        else if (v24 >= v25)
        {
          return result;
        }
      }
      long long v20 = *a2;
      *a2 = *a3;
      *a3 = v20;
      int v21 = *((_DWORD *)a2 + 4);
      *((_DWORD *)a2 + 4) = *((_DWORD *)a3 + 4);
      *((_DWORD *)a3 + 4) = v21;
      unsigned int v22 = *((_DWORD *)a2 + 4);
      if (v22 <= *v9)
      {
        if (v22 != *v9) {
          return result;
        }
        unint64_t v27 = *((void *)a2 + 1);
        unint64_t v28 = *((void *)v5 + 1);
        if (v28 >= v27) {
          size_t v29 = *((void *)a2 + 1);
        }
        else {
          size_t v29 = *((void *)v5 + 1);
        }
        if (v29 && (uint64_t result = memcmp(*(const void **)a2, *(const void **)v5, v29), result))
        {
          if ((result & 0x80000000) == 0) {
            return result;
          }
        }
        else if (v27 >= v28)
        {
          return result;
        }
      }
      long long v23 = *v5;
      *BOOL v5 = *a2;
      *a2 = v23;
LABEL_44:
      unsigned int v33 = *v9;
      *int v9 = *v6;
      *uint64_t v6 = v33;
      return result;
    }
  }
  if (v13 >= v14) {
    goto LABEL_21;
  }
LABEL_2:
  unsigned int v11 = (unsigned int *)(a3 + 1);
  unsigned int v10 = *((_DWORD *)a3 + 4);
  if (v10 > v7)
  {
LABEL_3:
    long long v12 = *v5;
    *BOOL v5 = *a3;
    *a3 = v12;
LABEL_43:
    uint64_t v6 = (unsigned int *)(a3 + 1);
    goto LABEL_44;
  }
  if (v10 == v7)
  {
    unint64_t v16 = *((void *)a3 + 1);
    unint64_t v17 = *((void *)a2 + 1);
    if (v17 >= v16) {
      size_t v18 = *((void *)a3 + 1);
    }
    else {
      size_t v18 = *((void *)a2 + 1);
    }
    if (v18 && (uint64_t result = memcmp(*(const void **)a3, *(const void **)a2, v18), result))
    {
      if ((result & 0x80000000) != 0) {
        goto LABEL_3;
      }
    }
    else if (v16 < v17)
    {
      goto LABEL_3;
    }
  }
  long long v30 = *v5;
  *BOOL v5 = *a2;
  *a2 = v30;
  unsigned int v31 = *((_DWORD *)v5 + 4);
  *((_DWORD *)v5 + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v31;
  if (*v11 > v31) {
    goto LABEL_42;
  }
  if (*v11 == v31)
  {
    unint64_t v34 = *((void *)a3 + 1);
    unint64_t v35 = *((void *)a2 + 1);
    if (v35 >= v34) {
      size_t v36 = *((void *)a3 + 1);
    }
    else {
      size_t v36 = *((void *)a2 + 1);
    }
    if (!v36 || (uint64_t result = memcmp(*(const void **)a3, *(const void **)a2, v36), !result))
    {
      if (v34 >= v35) {
        return result;
      }
      goto LABEL_42;
    }
    if ((result & 0x80000000) != 0)
    {
LABEL_42:
      long long v32 = *a2;
      *a2 = *a3;
      *a3 = v32;
      int v9 = v6;
      goto LABEL_43;
    }
  }
  return result;
}

BOOL sub_1CD289F88(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v6 = (const void **)(a2 - 24);
      unsigned int v7 = *(_DWORD *)(a2 - 8);
      unsigned int v8 = *(_DWORD *)(a1 + 16);
      if (v7 > v8) {
        goto LABEL_3;
      }
      if (v7 != v8) {
        return result;
      }
      unint64_t v28 = *(void *)(a2 - 16);
      unint64_t v29 = *(void *)(a1 + 8);
      if (v29 >= v28) {
        size_t v30 = *(void *)(a2 - 16);
      }
      else {
        size_t v30 = *(void *)(a1 + 8);
      }
      if (v30)
      {
        int v31 = memcmp(*v6, *(const void **)a1, v30);
        if (v31)
        {
          if ((v31 & 0x80000000) == 0) {
            return 1;
          }
LABEL_3:
          long long v9 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v6;
          *(_OWORD *)uint64_t v6 = v9;
          int v10 = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(v2 - 8);
          *(_DWORD *)(v2 - ++*(_DWORD *)(result + 8) = v10;
          return 1;
        }
      }
      if (v28 < v29) {
        goto LABEL_3;
      }
      return 1;
    case 3uLL:
      sub_1CD289D3C(a1, (long long *)(a1 + 24), (long long *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_1CD28A264(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      sub_1CD289B38(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      uint64_t v11 = a1 + 48;
      sub_1CD289D3C(a1, (long long *)(a1 + 24), (long long *)(a1 + 48));
      uint64_t v12 = a1 + 72;
      if (a1 + 72 == v2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      uint64_t v32 = v2;
      while (2)
      {
        unsigned int v15 = *(_DWORD *)(v12 + 16);
        unsigned int v16 = *(_DWORD *)(v11 + 16);
        if (v15 <= v16)
        {
          if (v15 != v16) {
            goto LABEL_36;
          }
          size_t v17 = *(void *)(v12 + 8);
          size_t v25 = *(void *)(v11 + 8);
          if (v25 >= v17) {
            size_t v26 = *(void *)(v12 + 8);
          }
          else {
            size_t v26 = *(void *)(v11 + 8);
          }
          if (v26 && (int v27 = memcmp(*(const void **)v12, *(const void **)v11, v26)) != 0)
          {
            if ((v27 & 0x80000000) == 0) {
              goto LABEL_36;
            }
          }
          else if (v17 >= v25)
          {
            goto LABEL_36;
          }
        }
        else
        {
          size_t v17 = *(void *)(v12 + 8);
        }
        __s1 = *(void **)v12;
        *(_OWORD *)uint64_t v12 = *(_OWORD *)v11;
        *(_DWORD *)(v12 + 16) = *(_DWORD *)(v11 + 16);
        uint64_t v18 = a1;
        if (v11 == a1) {
          goto LABEL_35;
        }
        int v33 = v14;
        uint64_t v34 = v13;
        while (2)
        {
          uint64_t v19 = a1 + v13;
          long long v20 = (const void **)(a1 + v13 + 24);
          unsigned int v21 = *(_DWORD *)(a1 + v13 + 40);
          if (v15 > v21) {
            goto LABEL_20;
          }
          if (v15 != v21) {
            goto LABEL_32;
          }
          size_t v22 = *(void *)(a1 + v13 + 32);
          if (v22 >= v17) {
            size_t v23 = v17;
          }
          else {
            size_t v23 = *(void *)(a1 + v13 + 32);
          }
          if (v23)
          {
            int v24 = memcmp(__s1, *v20, v23);
            if (v24)
            {
              if ((v24 & 0x80000000) == 0)
              {
LABEL_32:
                uint64_t v18 = v11;
                goto LABEL_34;
              }
              goto LABEL_20;
            }
          }
          if (v17 < v22)
          {
LABEL_20:
            v11 -= 24;
            *(_OWORD *)(v19 + 4++*(_DWORD *)(result + 8) = *(_OWORD *)v20;
            *(_DWORD *)(v19 + 64) = v21;
            v13 -= 24;
            if (v13 == -48)
            {
              uint64_t v18 = a1;
              goto LABEL_34;
            }
            continue;
          }
          break;
        }
        uint64_t v18 = a1 + v13 + 48;
LABEL_34:
        uint64_t v2 = v32;
        uint64_t v13 = v34;
        int v14 = v33;
LABEL_35:
        *(void *)uint64_t v18 = __s1;
        *(void *)(v18 + ++*(_DWORD *)(result + 8) = v17;
        *(_DWORD *)(v18 + 16) = v15;
        if (++v14 != 8)
        {
LABEL_36:
          uint64_t v11 = v12;
          v13 += 24;
          v12 += 24;
          if (v12 == v2) {
            return 1;
          }
          continue;
        }
        return v12 + 24 == v2;
      }
  }
}

uint64_t sub_1CD28A264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_1CD289D3C(a1, (long long *)a2, (long long *)a3);
  unsigned int v9 = *(_DWORD *)(a4 + 16);
  unsigned int v10 = *(_DWORD *)(a3 + 16);
  if (v9 <= v10)
  {
    if (v9 != v10) {
      return result;
    }
    unint64_t v21 = *(void *)(a4 + 8);
    unint64_t v22 = *(void *)(a3 + 8);
    if (v22 >= v21) {
      size_t v23 = *(void *)(a4 + 8);
    }
    else {
      size_t v23 = *(void *)(a3 + 8);
    }
    if (v23 && (uint64_t result = memcmp(*(const void **)a4, *(const void **)a3, v23), result))
    {
      if ((result & 0x80000000) == 0) {
        return result;
      }
    }
    else if (v21 >= v22)
    {
      return result;
    }
  }
  long long v11 = *(_OWORD *)a3;
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_OWORD *)a4 = v11;
  int v12 = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
  *(_DWORD *)(a4 + 16) = v12;
  unsigned int v13 = *(_DWORD *)(a3 + 16);
  unsigned int v14 = *(_DWORD *)(a2 + 16);
  if (v13 <= v14)
  {
    if (v13 != v14) {
      return result;
    }
    unint64_t v24 = *(void *)(a3 + 8);
    unint64_t v25 = *(void *)(a2 + 8);
    if (v25 >= v24) {
      size_t v26 = *(void *)(a3 + 8);
    }
    else {
      size_t v26 = *(void *)(a2 + 8);
    }
    if (v26 && (uint64_t result = memcmp(*(const void **)a3, *(const void **)a2, v26), result))
    {
      if ((result & 0x80000000) == 0) {
        return result;
      }
    }
    else if (v24 >= v25)
    {
      return result;
    }
  }
  long long v15 = *(_OWORD *)a2;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)a3 = v15;
  int v16 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(a3 + 16) = v16;
  unsigned int v17 = *(_DWORD *)(a2 + 16);
  unsigned int v18 = *(_DWORD *)(a1 + 16);
  if (v17 > v18)
  {
LABEL_4:
    long long v19 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v19;
    int v20 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = v20;
    return result;
  }
  if (v17 == v18)
  {
    unint64_t v27 = *(void *)(a2 + 8);
    unint64_t v28 = *(void *)(a1 + 8);
    if (v28 >= v27) {
      size_t v29 = *(void *)(a2 + 8);
    }
    else {
      size_t v29 = *(void *)(a1 + 8);
    }
    if (v29 && (uint64_t result = memcmp(*(const void **)a2, *(const void **)a1, v29), result))
    {
      if ((result & 0x80000000) != 0) {
        goto LABEL_4;
      }
    }
    else if (v27 < v28)
    {
      goto LABEL_4;
    }
  }
  return result;
}

void sub_1CD28A3F0(__n128 *a1, __n128 *a2, unint64_t a3, int *a4, uint64_t a5, __n128 a6)
{
  if (a3 >= 2)
  {
    unsigned int v7 = a1;
    if (a3 == 2)
    {
      unsigned int v8 = (__n128 *)((char *)a2 - 24);
      if ((signed __int32)a2[-2].n128_u32[2] < (signed __int32)a1->n128_u32[0])
      {
        unint64_t v9 = a1[1].n128_u64[0];
        __n128 v10 = *a1;
        unint64_t v11 = a2[-1].n128_u64[1];
        *a1 = *v8;
        a1[1].n128_u64[0] = v11;
        *unsigned int v8 = v10;
        a2[-1].n128_u64[1] = v9;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      unint64_t v22 = a4;
      unint64_t v23 = a3 >> 1;
      unint64_t v24 = (__n128 *)((char *)a1 + 24 * (a3 >> 1));
      unint64_t v25 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        __n128 v26 = sub_1CD28A6F0(a1, v24, v25, a4, a6);
        unint64_t v27 = &v22[6 * v23];
        sub_1CD28A6F0((__n128 *)((char *)v7 + 24 * (a3 >> 1)), a2, a3 - (a3 >> 1), v27, v26);
        unint64_t v28 = &v22[6 * a3];
        size_t v29 = v27;
        while (v29 != v28)
        {
          if (*v29 >= *v22)
          {
            __n128 v31 = *(__n128 *)v22;
            v7[1].n128_u64[0] = *((void *)v22 + 2);
            *unsigned int v7 = v31;
            v22 += 6;
          }
          else
          {
            __n128 v30 = *(__n128 *)v29;
            v7[1].n128_u64[0] = *((void *)v29 + 2);
            *unsigned int v7 = v30;
            v29 += 6;
          }
          unsigned int v7 = (__n128 *)((char *)v7 + 24);
          if (v22 == v27)
          {
            if (v29 != v28)
            {
              uint64_t v32 = 0;
              do
              {
                int v33 = (char *)v7 + v32 * 4;
                long long v34 = *(_OWORD *)&v29[v32];
                *((void *)v33 + 2) = *(void *)&v29[v32 + 4];
                *(_OWORD *)int v33 = v34;
                v32 += 6;
              }
              while (&v29[v32] != v28);
            }
            return;
          }
        }
        if (v22 != v27)
        {
          uint64_t v35 = 0;
          do
          {
            size_t v36 = (char *)v7 + v35 * 4;
            long long v37 = *(_OWORD *)&v22[v35];
            *((void *)v36 + 2) = *(void *)&v22[v35 + 4];
            *(_OWORD *)size_t v36 = v37;
            v35 += 6;
          }
          while (&v22[v35] != v27);
        }
      }
      else
      {
        sub_1CD28A3F0(a1, v24, v25, a4, a5);
        sub_1CD28A3F0((char *)v7 + 24 * (a3 >> 1), a2, a3 - (a3 >> 1), v22, a5);
        sub_1CD28A968((char *)v7, (char *)v7 + 24 * (a3 >> 1), (char *)a2, a3 >> 1, a3 - (a3 >> 1), (char *)v22, a5);
      }
    }
    else if (a1 != a2)
    {
      unsigned int v13 = &a1[1].n128_i8[8];
      if (&a1[1].n128_i8[8] != (__int8 *)a2)
      {
        uint64_t v14 = 0;
        long long v15 = a1;
        do
        {
          int v16 = (__n128 *)v13;
          signed __int32 v17 = v15[1].n128_i32[2];
          if (v17 < (signed __int32)v15->n128_u32[0])
          {
            long long v38 = *(long long *)((char *)&v15[1] + 12);
            unsigned __int32 v39 = v15[2].n128_u32[3];
            uint64_t v18 = v14;
            while (1)
            {
              long long v19 = (char *)a1 + v18;
              *(__n128 *)(v19 + 24) = *(__n128 *)((char *)a1 + v18);
              *((void *)v19 + 5) = *(unint64_t *)((char *)a1[1].n128_u64 + v18);
              if (!v18) {
                break;
              }
              v18 -= 24;
              if (v17 >= *((_DWORD *)v19 - 6))
              {
                uint64_t v20 = (uint64_t)&a1[1].n128_i64[1] + v18;
                goto LABEL_15;
              }
            }
            uint64_t v20 = (uint64_t)a1;
LABEL_15:
            *(_DWORD *)uint64_t v20 = v17;
            *(_OWORD *)(v20 + 4) = v38;
            *(_DWORD *)(v20 + 20) = v39;
          }
          unsigned int v13 = &v16[1].n128_i8[8];
          v14 += 24;
          long long v15 = v16;
        }
        while (&v16[1].n128_i8[8] != (__int8 *)a2);
      }
    }
  }
}

__n128 sub_1CD28A6F0(__n128 *a1, __n128 *a2, unint64_t a3, int *a4, __n128 result)
{
  if (a3)
  {
    BOOL v5 = (__n128 *)a4;
    unsigned int v8 = a1;
    if (a3 == 2)
    {
      unint64_t v9 = (__n128 *)((char *)a2 - 24);
      if ((signed __int32)a2[-2].n128_u32[2] >= (signed __int32)a1->n128_u32[0])
      {
        __n128 v19 = *a1;
        *((void *)a4 + 2) = a1[1].n128_u64[0];
        *(__n128 *)a4 = v19;
        uint64_t result = *v9;
        unint64_t v11 = a2[-1].n128_u64[1];
      }
      else
      {
        __n128 v10 = *v9;
        *((void *)a4 + 2) = a2[-1].n128_u64[1];
        *(__n128 *)a4 = v10;
        uint64_t result = *a1;
        unint64_t v11 = a1[1].n128_u64[0];
      }
      *((void *)a4 + 5) = v11;
      *(__n128 *)(a4 + 6) = result;
    }
    else if (a3 == 1)
    {
      uint64_t result = *a1;
      *((void *)a4 + 2) = a1[1].n128_u64[0];
      *(__n128 *)a4 = result;
    }
    else if ((uint64_t)a3 > 8)
    {
      uint64_t v20 = (__n128 *)((char *)a1 + 24 * (a3 >> 1));
      sub_1CD28A3F0(a1, v20, a3 >> 1, a4, a3 >> 1);
      sub_1CD28A3F0((char *)v8 + 24 * (a3 >> 1), a2, a3 - (a3 >> 1), (char *)v5 + 24 * (a3 >> 1), a3 - (a3 >> 1));
      unint64_t v21 = (__n128 *)((char *)v8 + 24 * (a3 >> 1));
      while (v21 != a2)
      {
        if ((signed __int32)v21->n128_u32[0] >= (signed __int32)v8->n128_u32[0])
        {
          uint64_t result = *v8;
          v5[1].n128_u64[0] = v8[1].n128_u64[0];
          *BOOL v5 = result;
          unsigned int v8 = (__n128 *)((char *)v8 + 24);
        }
        else
        {
          uint64_t result = *v21;
          v5[1].n128_u64[0] = v21[1].n128_u64[0];
          *BOOL v5 = result;
          unint64_t v21 = (__n128 *)((char *)v21 + 24);
        }
        BOOL v5 = (__n128 *)((char *)v5 + 24);
        if (v8 == v20)
        {
          if (v21 != a2)
          {
            unint64_t v22 = 0;
            do
            {
              unint64_t v23 = (__n128 *)((char *)v5 + v22);
              uint64_t result = *(__n128 *)((char *)v21 + v22);
              v23[1].n128_u64[0] = v21[1].n128_u64[v22 / 8];
              *unint64_t v23 = result;
              v22 += 24;
            }
            while ((__n128 *)((char *)v21 + v22) != a2);
          }
          return result;
        }
      }
      if (v8 != v20)
      {
        unint64_t v24 = 0;
        do
        {
          unint64_t v25 = (__n128 *)((char *)v5 + v24);
          uint64_t result = *(__n128 *)((char *)v8 + v24);
          v25[1].n128_u64[0] = v8[1].n128_u64[v24 / 8];
          __n128 *v25 = result;
          v24 += 24;
        }
        while ((__n128 *)((char *)v8 + v24) != v20);
      }
    }
    else if (a1 != a2)
    {
      uint64_t result = *a1;
      *((void *)a4 + 2) = a1[1].n128_u64[0];
      *(__n128 *)a4 = result;
      int v12 = (__n128 *)((char *)a1 + 24);
      if (&a1[1].n128_i8[8] != (__int8 *)a2)
      {
        uint64_t v13 = 0;
        uint64_t v14 = a4;
        do
        {
          long long v15 = v14;
          signed __int32 v16 = *v14;
          v14 += 6;
          signed __int32 v17 = v14;
          if ((signed __int32)v12->n128_u32[0] < v16)
          {
            *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
            *((void *)v14 + 2) = *((void *)v15 + 2);
            signed __int32 v17 = a4;
            if (v15 != a4)
            {
              uint64_t v18 = v13;
              while (1)
              {
                signed __int32 v17 = (int *)((char *)a4 + v18);
                if ((signed __int32)v12->n128_u32[0] >= *(int *)((char *)a4 + v18 - 24)) {
                  break;
                }
                *(_OWORD *)signed __int32 v17 = *(_OWORD *)((char *)a4 + v18 - 24);
                *((void *)v17 + 2) = *(void *)((char *)a4 + v18 - 8);
                v18 -= 24;
                if (!v18)
                {
                  signed __int32 v17 = a4;
                  break;
                }
              }
            }
          }
          uint64_t result = *v12;
          *((void *)v17 + 2) = v12[1].n128_u64[0];
          *(__n128 *)signed __int32 v17 = result;
          int v12 = (__n128 *)((char *)v12 + 24);
          v13 += 24;
        }
        while (v12 != a2);
      }
    }
  }
  return result;
}

char *sub_1CD28A968(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v7 = a5;
    while (a4 > a7 && v7 > a7)
    {
      if (!a4) {
        return result;
      }
      uint64_t v10 = 0;
      uint64_t v11 = -a4;
      while (*(_DWORD *)a2 >= *(_DWORD *)&result[v10])
      {
        v10 += 24;
        if (__CFADD__(v11++, 1)) {
          return result;
        }
      }
      uint64_t v13 = -v11;
      uint64_t v14 = &result[v10];
      if (-v11 >= v7)
      {
        if (v11 == -1)
        {
          uint64_t v85 = &result[v10];
          uint64_t v105 = *((void *)v85 + 2);
          long long v100 = *(_OWORD *)v85;
          long long v86 = *(_OWORD *)a2;
          *((void *)v85 + 2) = *((void *)a2 + 2);
          *(_OWORD *)uint64_t v85 = v86;
          *((void *)a2 + 2) = v105;
          *(_OWORD *)a2 = v100;
          return result;
        }
        if (v11 > 0) {
          uint64_t v13 = 1 - v11;
        }
        uint64_t v24 = v13 >> 1;
        uint64_t v18 = &result[24 * (v13 >> 1) + v10];
        signed __int32 v17 = a3;
        if (a3 != a2)
        {
          unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 3);
          signed __int32 v17 = a2;
          do
          {
            unint64_t v26 = v25 >> 1;
            unint64_t v27 = &v17[24 * (v25 >> 1)];
            int v29 = *(_DWORD *)v27;
            unint64_t v28 = v27 + 24;
            v25 += ~(v25 >> 1);
            if (v29 < *(_DWORD *)v18) {
              signed __int32 v17 = v28;
            }
            else {
              unint64_t v25 = v26;
            }
          }
          while (v25);
        }
        uint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v17 - a2) >> 3);
      }
      else
      {
        if (v7 >= 0) {
          uint64_t v15 = v7;
        }
        else {
          uint64_t v15 = v7 + 1;
        }
        uint64_t v16 = v15 >> 1;
        signed __int32 v17 = &a2[24 * (v15 >> 1)];
        uint64_t v18 = a2;
        if (v14 != a2)
        {
          unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((a2 - result - v10) >> 3);
          uint64_t v18 = &result[v10];
          do
          {
            unint64_t v20 = v19 >> 1;
            unint64_t v21 = &v18[24 * (v19 >> 1)];
            int v23 = *(_DWORD *)v21;
            unint64_t v22 = v21 + 24;
            v19 += ~(v19 >> 1);
            if (*(_DWORD *)v17 < v23) {
              unint64_t v19 = v20;
            }
            else {
              uint64_t v18 = v22;
            }
          }
          while (v19);
        }
        uint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v18 - result - v10) >> 3);
      }
      __n128 v30 = v17;
      if (v18 != a2)
      {
        __n128 v30 = v18;
        if (a2 != v17)
        {
          if (v18 + 24 == a2)
          {
            uint64_t v102 = *((void *)v18 + 2);
            long long v97 = *(_OWORD *)v18;
            int64_t v36 = v17 - a2;
            uint64_t v92 = a6;
            uint64_t v94 = a7;
            long long v37 = a3;
            long long v38 = &result[v10];
            uint64_t v90 = v16;
            uint64_t v39 = v24;
            memmove(v18, a2, v17 - a2);
            uint64_t v24 = v39;
            uint64_t v16 = v90;
            a6 = v92;
            uint64_t v14 = v38;
            a7 = v94;
            a3 = v37;
            __n128 v30 = &v18[v36];
            *(_OWORD *)__n128 v30 = v97;
            *((void *)v30 + 2) = v102;
          }
          else if (a2 + 24 == v17)
          {
            __n128 v30 = v18 + 24;
            uint64_t v103 = *((void *)v17 - 1);
            long long v98 = *(_OWORD *)(v17 - 24);
            if (v17 - 24 != v18)
            {
              uint64_t v93 = a6;
              uint64_t v95 = a7;
              int v40 = a3;
              uint64_t v41 = &result[v10];
              uint64_t v91 = v16;
              uint64_t v42 = v24;
              memmove(v18 + 24, v18, v17 - 24 - v18);
              uint64_t v24 = v42;
              uint64_t v16 = v91;
              a6 = v93;
              uint64_t v14 = v41;
              a7 = v95;
              a3 = v40;
            }
            *((void *)v18 + 2) = v103;
            *(_OWORD *)uint64_t v18 = v98;
          }
          else
          {
            unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v18) >> 3);
            if (v31 == 0xAAAAAAAAAAAAAAABLL * ((v17 - a2) >> 3))
            {
              uint64_t v32 = 0;
              do
              {
                int v33 = &a2[v32];
                long long v34 = &v18[v32];
                uint64_t v101 = *(void *)&v18[v32 + 16];
                long long v96 = *(_OWORD *)&v18[v32];
                long long v35 = *(_OWORD *)&a2[v32];
                *((void *)v34 + 2) = *(void *)&a2[v32 + 16];
                *(_OWORD *)long long v34 = v35;
                *((void *)v33 + 2) = v101;
                *(_OWORD *)int v33 = v96;
                if (&v18[v32 + 24] == a2) {
                  break;
                }
                v32 += 24;
              }
              while (v33 + 24 != v17);
              __n128 v30 = a2;
            }
            else
            {
              uint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((v17 - a2) >> 3);
              unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v18) >> 3);
              do
              {
                uint64_t v45 = v44;
                unint64_t v44 = v43;
                uint64_t v43 = v45 % v43;
              }
              while (v43);
              if (v44)
              {
                int v46 = &v18[24 * v44];
                do
                {
                  long long v47 = *(_OWORD *)(v46 - 24);
                  uint64_t v48 = *((void *)v46 - 1);
                  v46 -= 24;
                  uint64_t v104 = v48;
                  long long v99 = v47;
                  size_t v49 = &v46[8 * ((a2 - v18) >> 3)];
                  size_t v50 = v46;
                  do
                  {
                    int v51 = v50;
                    size_t v50 = v49;
                    long long v52 = *(_OWORD *)v49;
                    *((void *)v51 + 2) = *((void *)v49 + 2);
                    *(_OWORD *)int v51 = v52;
                    unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v49) >> 3);
                    BOOL v54 = __OFSUB__(v31, v53);
                    uint64_t v55 = v31 - v53;
                    char v75 = (v55 < 0) ^ v54;
                    size_t v49 = &v18[24 * v55];
                    if (v75) {
                      size_t v49 = &v50[8 * ((a2 - v18) >> 3)];
                    }
                  }
                  while (v49 != v46);
                  *((void *)v50 + 2) = v104;
                  *(_OWORD *)size_t v50 = v99;
                }
                while (v46 != v18);
              }
              __n128 v30 = &v18[8 * ((v17 - a2) >> 3)];
            }
          }
        }
      }
      a4 = -(v24 + v11);
      uint64_t v56 = v7 - v16;
      if (v24 + v16 >= v7 - (v24 + v16) - v11)
      {
        uint64_t v61 = v24;
        uint64_t v62 = -(v24 + v11);
        uint64_t v63 = v16;
        uint64_t v64 = v7 - v16;
        size_t v65 = a6;
        uint64_t v66 = a7;
        int v67 = v14;
        sub_1CD28A968(v30, v17, a3, v62, v64);
        uint64_t result = v67;
        a7 = v66;
        a6 = v65;
        signed __int32 v17 = v18;
        uint64_t v56 = v63;
        a4 = v61;
        a3 = v30;
      }
      else
      {
        unsigned int v57 = v18;
        unint64_t v58 = a6;
        uint64_t v59 = a7;
        size_t v60 = a3;
        sub_1CD28A968(v14, v57, v30, v24, v16);
        a7 = v59;
        a3 = v60;
        a6 = v58;
        uint64_t result = v30;
      }
      uint64_t v7 = v56;
      a2 = v17;
      if (!v56) {
        return result;
      }
    }
    if (a4 <= v7)
    {
      if (result != a2)
      {
        unint64_t v79 = 0;
        do
        {
          unsigned int v80 = &a6[v79];
          long long v81 = *(_OWORD *)&result[v79];
          *((void *)v80 + 2) = *(void *)&result[v79 + 16];
          *(_OWORD *)unsigned int v80 = v81;
          v79 += 24;
        }
        while (&result[v79] != a2);
        if (v79)
        {
          unint64_t v82 = a6;
          while (a2 != a3)
          {
            if (*(_DWORD *)a2 >= *(_DWORD *)v82)
            {
              long long v84 = *(_OWORD *)v82;
              *((void *)result + 2) = *((void *)v82 + 2);
              *(_OWORD *)uint64_t result = v84;
              v82 += 24;
            }
            else
            {
              long long v83 = *(_OWORD *)a2;
              *((void *)result + 2) = *((void *)a2 + 2);
              *(_OWORD *)uint64_t result = v83;
              a2 += 24;
            }
            result += 24;
            if (&a6[v79] == v82) {
              return result;
            }
          }
          return (char *)memmove(result, v82, a6 - v82 + v79);
        }
      }
    }
    else if (a2 != a3)
    {
      unint64_t v68 = 0;
      do
      {
        unsigned int v69 = &a6[v68];
        long long v70 = *(_OWORD *)&a2[v68];
        *((void *)v69 + 2) = *(void *)&a2[v68 + 16];
        *(_OWORD *)unsigned int v69 = v70;
        v68 += 24;
      }
      while (&a2[v68] != a3);
      if (v68)
      {
        size_t v71 = &a6[v68];
        size_t v72 = a3 - 24;
        while (a2 != result)
        {
          int v73 = *((_DWORD *)v71 - 6);
          int v74 = *((_DWORD *)a2 - 6);
          char v75 = v73 < v74;
          if (v73 >= v74) {
            unsigned int v76 = v71 - 24;
          }
          else {
            unsigned int v76 = a2 - 24;
          }
          if (v75) {
            a2 -= 24;
          }
          long long v77 = *(_OWORD *)v76;
          uint64_t v78 = *((void *)v76 + 2);
          if (!v75) {
            v71 -= 24;
          }
          *((void *)v72 + 2) = v78;
          *(_OWORD *)size_t v72 = v77;
          v72 -= 24;
          if (v71 == a6) {
            return result;
          }
        }
        if (v71 != a6)
        {
          unint64_t v87 = 0;
          do
          {
            unsigned int v88 = &v72[v87];
            long long v89 = *(_OWORD *)&v71[v87 - 24];
            *((void *)v88 + 2) = *(void *)&v71[v87 - 8];
            *(_OWORD *)unsigned int v88 = v89;
            v87 -= 24;
          }
          while (&v71[v87] != a6);
        }
      }
    }
  }
  return result;
}

void sub_1CD28AF78(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  if (a3 && *(unsigned char *)(a1 + 504))
  {
    uint64_t v5 = a1;
    uint64_t v6 = a2;
    uint64_t v3 = *(void *)(a1 + 272);
    char v4 = 1;
    char v9 = 1;
    if (*a3)
    {
      uint64_t v7 = a3;
      char v4 = 3;
    }
    char v8 = v4;
    (*(void (**)(uint64_t, unsigned char **, uint64_t))(*(void *)v3 + 112))(v3, &v7, 1);
    a1 = v5;
    a2 = v6;
  }
  llvm::MCStreamer::emitSLEB128IntValue(*(llvm::MCStreamer **)(a1 + 272), a2);
}

void sub_1CD28B000(uint64_t a1, unint64_t a2, unsigned char *a3, unsigned int a4)
{
  if (a3 && *(unsigned char *)(a1 + 504))
  {
    uint64_t v7 = a1;
    unint64_t v8 = a2;
    unsigned int v6 = a4;
    uint64_t v4 = *(void *)(a1 + 272);
    char v5 = 1;
    char v11 = 1;
    if (*a3)
    {
      char v9 = a3;
      char v5 = 3;
    }
    char v10 = v5;
    (*(void (**)(uint64_t, unsigned char **, uint64_t))(*(void *)v4 + 112))(v4, &v9, 1);
    a4 = v6;
    a1 = v7;
    a2 = v8;
  }
  llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(a1 + 272), a2, a4);
}

const char *sub_1CD28B094(int a1)
{
  if (a1 > 146)
  {
    if (a1 > 186)
    {
      switch(a1)
      {
        case 187:
          return "indirect datarel sdata4";
        case 188:
          return "indirect datarel sdata8";
        case 255:
          return "omit";
        default:
          return "<unknown encoding>";
      }
    }
    else
    {
      switch(a1)
      {
        case 147:
          uint64_t result = "indirect pcrel udata4";
          break;
        case 148:
          uint64_t result = "indirect pcrel udata8";
          break;
        case 155:
          uint64_t result = "indirect pcrel sdata4";
          break;
        case 156:
          uint64_t result = "indirect pcrel sdata8";
          break;
        default:
          return "<unknown encoding>";
      }
    }
  }
  else
  {
    uint64_t result = "absptr";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        uint64_t result = "uleb128";
        break;
      case 3:
        uint64_t result = "udata4";
        break;
      case 4:
        uint64_t result = "udata8";
        break;
      case 9:
        uint64_t result = "sleb128";
        break;
      case 11:
        uint64_t result = "sdata4";
        break;
      case 12:
        uint64_t result = "sdata8";
        break;
      case 16:
        uint64_t result = "pcrel";
        break;
      case 19:
        uint64_t result = "pcrel udata4";
        break;
      case 20:
        uint64_t result = "pcrel udata8";
        break;
      case 27:
        uint64_t result = "pcrel sdata4";
        break;
      case 28:
        uint64_t result = "pcrel sdata8";
        break;
      default:
        return "<unknown encoding>";
    }
  }
  return result;
}

uint64_t sub_1CD28B2B4(uint64_t a1, llvm::MCSymbol *a2, char a3)
{
  if (a3) {
    goto LABEL_4;
  }
  uint64_t v4 = *(void *)(a1 + 256);
  if (*(unsigned char *)(v4 + 338))
  {
    uint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 272) + 376);
    return v7();
  }
  else
  {
    if (!*(unsigned char *)(v4 + 424))
    {
LABEL_4:
      if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == 0 && (*((_DWORD *)a2 + 2) & 0x1C00) == 0x800)
      {
        *((_DWORD *)a2 + 2) |= 4u;
        *(void *)a2 = *(void *)a2 & 7 | llvm::MCExpr::findAssociatedFragment(*((llvm::MCExpr **)a2 + 3));
      }
      char v5 = *(uint64_t (**)(void))(**(void **)(a1 + 272) + 840);
      return v5();
    }
    unint64_t v8 = *(llvm::MCStreamer **)(a1 + 272);
    if (*(unsigned char *)(*((void *)v8 + 1) + 1626)) {
      uint64_t v9 = 8;
    }
    else {
      uint64_t v9 = 4;
    }
    return llvm::MCStreamer::emitSymbolValue(v8, a2, v9, 0);
  }
}

uint64_t sub_1CD28B41C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(*(void *)(a1 + 256) + 424)) {
    return sub_1CD28B2B4(a1, *(llvm::MCSymbol **)a2, 0);
  }
  uint64_t v2 = *(void **)(a1 + 272);
  uint64_t v3 = *(void *)(a2 + 8);
  if (*(unsigned char *)(v2[1] + 1626)) {
    uint64_t v4 = 8;
  }
  else {
    uint64_t v4 = 4;
  }
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*v2 + 520))(v2, v3, v4);
}

uint64_t sub_1CD28B47C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 272) + 1256))();
}

void sub_1CD28B4F0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 504))
  {
    uint64_t v20 = *(void *)(a1 + 272);
    uint64_t v41 = "Abbrev [";
    __int16 v42 = 259;
    int v21 = *(_DWORD *)(a2 + 24);
    __int16 v40 = 264;
    LODWORD(v39[0]) = v21;
    sub_1CB8F1E58((uint64_t *)&v41, v39, (uint64_t)v43);
    long long v37 = "] 0x";
    __int16 v38 = 259;
    sub_1CB8F1E58(v43, (uint64_t *)&v37, (uint64_t)v44);
    uint64_t v34 = *(unsigned int *)(a2 + 16);
    v35[0] = (uint64_t)&v34;
    v35[2] = 0;
    __int16 v36 = 270;
    sub_1CB8F1E58(v44, v35, (uint64_t)v45);
    uint64_t v32 = ":0x";
    __int16 v33 = 259;
    sub_1CB8F1E58(v45, (uint64_t *)&v32, (uint64_t)v46);
    uint64_t v29 = *(unsigned int *)(a2 + 20);
    v30[0] = (uint64_t)&v29;
    v30[2] = 0;
    __int16 v31 = 270;
    sub_1CB8F1E58(v46, v30, (uint64_t)v47);
    unint64_t v27 = " ";
    __int16 v28 = 259;
    sub_1CB8F1E58(v47, (uint64_t *)&v27, (uint64_t)v48);
    unint64_t v22 = llvm::dwarf::TagString((llvm::dwarf *)*(unsigned __int16 *)(a2 + 28));
    __int16 v26 = 261;
    v25[0] = (uint64_t)v22;
    v25[1] = v23;
    sub_1CB8F1E58(v48, v25, (uint64_t)&v49);
    (*(void (**)(uint64_t, const char **, uint64_t))(*(void *)v20 + 112))(v20, &v49, 1);
  }
  llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(a1 + 272), *(unsigned int *)(a2 + 24), 0);
  uint64_t v4 = *(void **)(a2 + 8);
  if (v4)
  {
    unint64_t v5 = *v4 & 0xFFFFFFFFFFFFFFF8;
    if (v5)
    {
      do
      {
        if (*(unsigned char *)(a1 + 504))
        {
          char v11 = (llvm::dwarf *)*(unsigned __int16 *)(v5 + 12);
          unint64_t v24 = v5;
          uint64_t v12 = *(void *)(a1 + 272);
          uint64_t v13 = llvm::dwarf::AttributeString(v11);
          __int16 v51 = 261;
          size_t v49 = v13;
          uint64_t v50 = v14;
          uint64_t v15 = *(void (**)(uint64_t, const char **, uint64_t))(*(void *)v12 + 112);
          uint64_t v16 = v12;
          unint64_t v5 = v24;
          v15(v16, &v49, 1);
          if (v11 == 50)
          {
            uint64_t v17 = *(void *)(a1 + 272);
            uint64_t v18 = llvm::dwarf::AccessibilityString((llvm::dwarf *)*(unsigned int *)(v24 + 16));
            __int16 v51 = 261;
            size_t v49 = v18;
            uint64_t v50 = v19;
            (*(void (**)(uint64_t, const char **, uint64_t))(*(void *)v17 + 112))(v17, &v49, 1);
          }
        }
        sub_1CD291C20(v5 + 8, a1);
        uint64_t v6 = *(void *)v5;
        if ((*(void *)v5 & 4) != 0) {
          break;
        }
        unint64_t v5 = v6 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((v6 & 0xFFFFFFFFFFFFFFF8) != 0);
    }
  }
  uint64_t v7 = *(void **)(a2 + 32);
  if (*(unsigned char *)(a2 + 30) || v7)
  {
    if (v7)
    {
      unint64_t v8 = (uint64_t *)(*v7 & 0xFFFFFFFFFFFFFFF8);
      if (v8)
      {
        do
        {
          sub_1CD28B4F0(a1, v8);
          uint64_t v9 = *v8;
          if ((*v8 & 4) != 0) {
            break;
          }
          unint64_t v8 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFF8);
        }
        while ((v9 & 0xFFFFFFFFFFFFFFF8) != 0);
      }
    }
    uint64_t v10 = *(void *)(a1 + 272);
    size_t v49 = "End Of Children Mark";
    __int16 v51 = 259;
    (*(void (**)(uint64_t, const char **, uint64_t))(*(void *)v10 + 112))(v10, &v49, 1);
    (*(void (**)(void))(**(void **)(a1 + 272) + 520))();
  }
}

void sub_1CD28B82C(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = 0;
  uint64_t v137 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a2 + 32);
  do
  {
    unsigned int v6 = v4;
    int v7 = *(_DWORD *)(v5 + 32 * v4++) & 0x10000FF;
  }
  while (v7 == 0x1000000);
  unint64_t v8 = *(const char **)(v5 + 32 * v6 + 16);
  uint64_t v9 = *(void *)(a1 + 272);
  if (!*v8)
  {
    uint64_t v10 = *(unsigned char **)(*(void *)(a1 + 256) + 136);
    char v11 = 1;
    HIBYTE(v127) = 1;
    if (*v10)
    {
      unsigned int v124 = v10;
      char v12 = 3;
    }
    else
    {
      char v12 = 1;
    }
    LOBYTE(v127) = v12;
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 128))(v9, &v124, 1);
    uint64_t v13 = *(void *)(a1 + 272);
    uint64_t v14 = *(unsigned char **)(*(void *)(a1 + 256) + 144);
    HIBYTE(v127) = 1;
    if (*v14)
    {
      unsigned int v124 = v14;
      char v11 = 3;
    }
    LOBYTE(v127) = v11;
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v13 + 128))(v13, &v124, 1);
    return;
  }
  uint64_t v15 = *(unsigned char **)(*(void *)(a1 + 256) + 136);
  __int16 v127 = 257;
  if (*v15)
  {
    unsigned int v124 = v15;
    char v16 = 3;
  }
  else
  {
    char v16 = 1;
  }
  LOBYTE(v127) = v16;
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 128))(v9, &v124, 1);
  uint64_t v17 = *(void *)(a2 + 32);
  uint64_t v18 = *(unsigned int *)(a2 + 40);
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 32 * v18;
    while (1)
    {
      if (*(unsigned char *)(v17 + v20 - 32) == 14)
      {
        uint64_t v19 = *(void *)(v17 + v20 - 16);
        if (v19)
        {
          uint64_t v21 = *(unsigned int *)(v19 + 8);
          if (v21)
          {
            uint64_t v22 = *(void *)(v19 - 8 * v21);
            if (*(unsigned char *)v22 == 1)
            {
              uint64_t v23 = *(void *)(v22 + 128);
              if (*(unsigned char *)(v23 + 16) == 16) {
                break;
              }
            }
          }
        }
      }
      v20 -= 32;
      if (!v20) {
        goto LABEL_23;
      }
    }
    long long v96 = (void *)(v23 + 24);
    if (*(_DWORD *)(v23 + 32) >= 0x41u) {
      long long v96 = (void *)*v96;
    }
    long long v97 = (void *)*v96;
  }
  else
  {
    uint64_t v19 = 0;
LABEL_23:
    long long v97 = 0;
  }
  unsigned int v124 = &v126;
  long long v125 = xmmword_1CD96DBF0;
  int v102 = 0;
  char v106 = 0;
  uint64_t v107 = 0;
  size_t v109 = &v124;
  int v108 = 0;
  uint64_t v101 = &unk_1F2646FA8;
  uint64_t v103 = 0;
  unint64_t v104 = 0;
  uint64_t v105 = 0;
  unint64_t v24 = *(char **)(v17 + 48);
  uint64_t v98 = *(void *)(a1 + 288);
  if ((v24 & 4) != 0)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v101, "\t.intel_syntax\n\t", 0x10uLL);
    LODWORD(v1++*(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 40);
    int v100 = 1;
  }
  else
  {
    uint64_t v25 = *(void *)(a1 + 256);
    int v100 = (*(uint64_t (**)(void))(***(void ***)(a1 + 288) + 200))();
    if (*(unsigned char *)(v25 + 66)) {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v101, 9);
    }
  }
  char v26 = *v8;
  if (*v8)
  {
    int v28 = -1;
    uint64_t v29 = v8;
    char v99 = (char)v24;
    while (1)
    {
      if (v26 == 10)
      {
        __int16 v31 = (char *)(v29 + 1);
        uint64_t v32 = v105;
        if ((unint64_t)v105 >= v104)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v101, 10);
        }
        else
        {
          uint64_t v105 = (void *)((char *)v105 + 1);
          unsigned char *v32 = 10;
        }
        goto LABEL_127;
      }
      if (v26 != 36)
      {
        size_t v33 = 0;
        do
        {
          unsigned int v34 = v29[++v33];
          BOOL v35 = v34 > 0x24 || ((1 << v34) & 0x1000000401) == 0;
        }
        while (v35 && v34 - 123 >= 3);
        __int16 v31 = (char *)&v29[v33];
        if (v28 == -1 || v28 == v100) {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v101, v29, v33);
        }
        goto LABEL_127;
      }
      int v30 = v29[1];
      if (v30 <= 40) {
        break;
      }
      if (v30 == 41)
      {
        __int16 v31 = (char *)(v29 + 2);
        if (v28 != -1) {
          goto LABEL_104;
        }
        __int16 v42 = (char *)v105;
        if ((unint64_t)v105 < v104)
        {
          uint64_t v105 = (void *)((char *)v105 + 1);
          char v43 = 125;
          goto LABEL_99;
        }
        char v54 = 125;
        goto LABEL_103;
      }
      if (v30 != 124) {
        goto LABEL_59;
      }
      __int16 v31 = (char *)(v29 + 2);
      if (v28 == -1)
      {
        __int16 v42 = (char *)v105;
        if ((unint64_t)v105 < v104)
        {
          uint64_t v105 = (void *)((char *)v105 + 1);
          char v43 = 124;
LABEL_99:
          *__int16 v42 = v43;
LABEL_104:
          int v28 = -1;
          goto LABEL_127;
        }
        char v54 = 124;
LABEL_103:
        llvm::raw_ostream::write((llvm::raw_ostream *)&v101, v54);
        goto LABEL_104;
      }
      ++v28;
LABEL_127:
      char v26 = *v31;
      uint64_t v29 = v31;
      if (!*v31) {
        goto LABEL_29;
      }
    }
    if (v30 == 36)
    {
      if ((v24 & 4) == 0 && (v28 == -1 || v28 == v100))
      {
        uint64_t v41 = v105;
        if ((unint64_t)v105 >= v104)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v101, 36);
        }
        else
        {
          uint64_t v105 = (void *)((char *)v105 + 1);
          *uint64_t v41 = 36;
        }
      }
LABEL_126:
      __int16 v31 = (char *)(v29 + 2);
      goto LABEL_127;
    }
    if (v30 == 40)
    {
      if (v28 != -1)
      {
        size_t v71 = "Nested variants found in inline asm string: '";
        goto LABEL_147;
      }
      int v28 = 0;
      goto LABEL_126;
    }
LABEL_59:
    int v36 = *((unsigned __int8 *)v29 + 1);
    BOOL v37 = v36 == 123;
    if (v36 == 123 && (__int16 v38 = v29 + 2, v29[2] == 58))
    {
      uint64_t v39 = v29 + 3;
      __int16 v40 = strchr((char *)v38 + 1, 125);
      if (!v40)
      {
        size_t v71 = "Unterminated ${:foo} operand in inline asm string: '";
        goto LABEL_147;
      }
      unint64_t v24 = v40;
      if (v28 == -1 || v28 == v100) {
        (*(void (**)(uint64_t, uint64_t, void **, const char *, int64_t))(*(void *)a1 + 384))(a1, a2, &v101, v39, v40 - v39);
      }
      __int16 v31 = v24 + 1;
      LOBYTE(v24) = v99;
    }
    else
    {
      uint64_t v44 = 0;
      do
        unsigned int v45 = v29[v37 + 1 + v44++] - 48;
      while (v45 < 0xA);
      if (v44 == 1) {
        goto LABEL_146;
      }
      unint64_t v46 = 0;
      __int16 v31 = (char *)&v29[v37 + v44];
      for (uint64_t i = 1; i != v44; ++i)
      {
        int v48 = v29[v37 + i];
        if ((v48 - 48) >= 0xA)
        {
          if ((v48 - 97) >= 0x1A)
          {
            LOBYTE(v24) = v99;
            if ((v48 - 65) > 0x19) {
              goto LABEL_146;
            }
            int v49 = -55;
          }
          else
          {
            int v49 = -87;
            LOBYTE(v24) = v99;
          }
        }
        else
        {
          int v49 = -48;
        }
        unsigned int v50 = v49 + v48;
        if (v50 > 9) {
          goto LABEL_146;
        }
        unint64_t v51 = 10 * v46 + v50;
        if (v46 > v51 / 0xA) {
          goto LABEL_146;
        }
        unint64_t v46 = v51;
      }
      unsigned int v52 = v51 >= 0x100000000 ? 0 : v51;
      if (HIDWORD(v51))
      {
LABEL_146:
        size_t v71 = "Bad $ operand number in inline asm string: '";
        goto LABEL_147;
      }
      if ((int)v18 - 1 <= v52)
      {
        size_t v71 = "Invalid $ operand number in inline asm string: '";
        goto LABEL_147;
      }
      __int16 v110 = 0;
      if (v36 == 123)
      {
        int v53 = *v31;
        if (v53 == 58)
        {
          if (!v31[1])
          {
            size_t v71 = "Bad ${:} expression in inline asm string: '";
LABEL_147:
            v116[0] = (uint64_t)v71;
            __int16 v117 = 259;
            char v72 = 1;
            char v115 = 1;
            if (*v8)
            {
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
              char v72 = 3;
            }
            char v114 = v72;
            sub_1CD3E3950(v116, (uint64_t *)&__p, (uint64_t)&v118);
            unint64_t v111 = "'";
            __int16 v112 = 259;
            sub_1CD3E3950((uint64_t *)&v118, (uint64_t *)&v111, (uint64_t)&v128);
            llvm::report_fatal_error((llvm *)&v128, (const llvm::Twine *)1);
          }
          LOBYTE(v110) = v31[1];
          __int16 v31 = (char *)&v29[v37 + 2 + v44];
          int v53 = *v31;
        }
        if (v53 != 125)
        {
          size_t v71 = "Bad ${} expression in inline asm string: '";
          goto LABEL_147;
        }
        ++v31;
      }
      if (v28 == -1 || v28 == v100)
      {
        unsigned int v55 = *(_DWORD *)(a2 + 40);
        if (v52)
        {
          int v56 = -v52;
          unsigned int v57 = 2;
          do
          {
            if (v57 >= v55) {
              break;
            }
            v57 += ((unsigned __int16)*(_DWORD *)(*(void *)(a2 + 32) + 32 * v57 + 16) >> 3) + 1;
          }
          while (!__CFADD__(v56++, 1));
        }
        else
        {
          unsigned int v57 = 2;
        }
        if (v57 >= v55 || (uint64_t v59 = *(void *)(a2 + 32), *(unsigned char *)(v59 + 32 * v57) == 14))
        {
LABEL_118:
          memset(&__p, 0, sizeof(__p));
          LODWORD(v129) = 0;
          char v133 = 0;
          uint64_t v134 = 0;
          unsigned int v128 = (uint64_t *)&unk_1F2646F30;
          p_p = &__p;
          int v135 = 0;
          unint64_t v131 = 0;
          uint64_t v132 = 0;
          uint64_t v130 = 0;
          llvm::raw_ostream::write((llvm::raw_ostream *)&v128, "invalid operand in inline asm: '", 0x20uLL);
          size_t v60 = v132;
          size_t v61 = strlen(v8);
          size_t v62 = v61;
          if (v61 <= v131 - v132)
          {
            if (v61)
            {
              memcpy(v132, v8, v61);
              size_t v60 = &v132[v62];
              v132 += v62;
            }
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v128, v8, v61);
            size_t v60 = v132;
          }
          LOBYTE(v24) = v99;
          if (v131 == v60)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v128, "'", 1uLL);
          }
          else
          {
            *size_t v60 = 39;
            ++v132;
          }
          uint64_t v63 = **(void **)(v98 + 2064);
          __int16 v117 = 260;
          v116[0] = (uint64_t)p_p;
          int v119 = 0;
          char v120 = 0;
          size_t v118 = &unk_1F2616540;
          uint64_t v121 = v97;
          uint64_t v122 = v116;
          uint64_t v123 = 0;
          llvm::LLVMContext::diagnose(v63, (const llvm::DiagnosticInfo *)&v118);
          unsigned int v128 = (uint64_t *)&unk_1F2646B98;
          if (v135 == 1 && v130) {
            MEMORY[0x1D25D9CB0](v130, 0x1000C8077774924);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          goto LABEL_127;
        }
        uint64_t v64 = v57 + 1;
        int v65 = *(unsigned __int8 *)(v59 + 32 * v64);
        if (v65 == 4)
        {
          uint64_t Symbol = (llvm::MCSymbol *)llvm::MachineBasicBlock::getSymbol(*(llvm::MachineBasicBlock **)(v59 + 32 * v64 + 16));
          llvm::MCSymbol::print(Symbol, (llvm::raw_ostream *)&v101, *(const llvm::MCAsmInfo **)(a1 + 256));
        }
        else if (v65 == 11)
        {
          unint64_t v68 = (llvm::MCSymbol **)sub_1CD89D224(a1, *(void *)(*(void *)(v59 + 32 * v64 + 16) - 32));
          unsigned int v69 = *v68;
          llvm::MCSymbol::print(*v68, (llvm::raw_ostream *)&v101, *(const llvm::MCAsmInfo **)(a1 + 256));
          if (*(void *)(v98 + 2056)) {
            long long v70 = *(llvm::MCContext **)(v98 + 2056);
          }
          else {
            long long v70 = (llvm::MCContext *)(v98 + 8);
          }
          llvm::MCContext::registerInlineAsmLabel(v70, v69);
        }
        else
        {
          uint64_t v66 = *(void *)a1;
          if ((*(void *)(v59 + 32 * v57 + 16) & 7) == 6)
          {
            if ((*(uint64_t (**)(uint64_t, uint64_t))(v66 + 408))(a1, a2)) {
              goto LABEL_118;
            }
          }
          else if ((*(unsigned int (**)(uint64_t, uint64_t))(v66 + 400))(a1, a2))
          {
            goto LABEL_118;
          }
        }
      }
    }
    goto LABEL_127;
  }
LABEL_29:
  unint64_t v27 = (char *)v105;
  if ((v24 & 4) != 0)
  {
    if (v104 - (unint64_t)v105 > 0xC)
    {
      *uint64_t v105 = *(void *)"\n\t.att_syntax";
      *(void *)(v27 + 5) = *(void *)"t_syntax";
      unint64_t v27 = (char *)v105 + 13;
      uint64_t v105 = (void *)((char *)v105 + 13);
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v101, "\n\t.att_syntax", 0xDuLL);
      unint64_t v27 = (char *)v105;
    }
  }
  if ((unint64_t)v27 >= v104)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v101, 10);
  }
  else
  {
    uint64_t v105 = v27 + 1;
    *unint64_t v27 = 10;
  }
  int v73 = v105;
  if ((unint64_t)v105 >= v104)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v101, 0);
  }
  else
  {
    uint64_t v105 = (void *)((char *)v105 + 1);
    *int v73 = 0;
  }
  unsigned int v128 = &v130;
  uint64_t v129 = 0x800000000;
  uint64_t v74 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 280) + 16) + 176))(*(void *)(*(void *)(a1 + 280) + 16));
  unsigned int v75 = *(_DWORD *)(a2 + 40);
  if (v75 >= 3)
  {
    for (unsigned int j = 2; j < v75; ++j)
    {
      uint64_t v77 = *(void *)(a2 + 32);
      if (*(unsigned char *)(v77 + 32 * j) == 1)
      {
        int v78 = *(_DWORD *)(v77 + 32 * j + 16);
        if ((v78 & 7) == 4)
        {
          uint64_t v79 = *(unsigned int *)(v77 + 32 * (j + 1) + 4);
          if (((*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v74 + 96))(v74, *(void *)(a1 + 280), v79) & 1) == 0)
          {
            if (v129 >= (unint64_t)HIDWORD(v129)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_DWORD *)v128 + v129) = v79;
            LODWORD(v129) = v129 + 1;
          }
        }
        j += (unsigned __int16)v78 >> 3;
      }
    }
  }
  uint64_t v80 = v129;
  if (v129)
  {
    long long v81 = (char *)operator new(0x38uLL);
    char v82 = 0;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v81;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1CFB287B0;
    strcpy(v81, "inline asm clobber list contains reserved registers: ");
    long long v83 = (unsigned int *)v128;
    uint64_t v84 = 4 * v80;
    do
    {
      unsigned int v86 = *v83++;
      uint64_t v85 = v86;
      if (v82) {
        std::string::size_type v87 = 2;
      }
      else {
        std::string::size_type v87 = 0;
      }
      if (v82) {
        unsigned int v88 = ", ";
      }
      else {
        unsigned int v88 = 0;
      }
      std::string::append(&__p, v88, v87);
      long long v89 = (const std::string::value_type *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v74 + 512))(v74, v85);
      std::string::append(&__p, v89, v90);
      char v82 = 1;
      v84 -= 4;
    }
    while (v84);
    uint64_t v91 = **(void **)(*(void *)(a1 + 288) + 2064);
    __int16 v117 = 260;
    v116[0] = (uint64_t)&__p;
    int v119 = 0;
    char v120 = 1;
    size_t v118 = &unk_1F2616540;
    uint64_t v121 = v97;
    uint64_t v122 = v116;
    uint64_t v123 = 0;
    llvm::LLVMContext::diagnose(v91, (const llvm::DiagnosticInfo *)&v118);
    uint64_t v92 = **(void **)(*(void *)(a1 + 288) + 2064);
    v116[0] = (uint64_t)"Reserved registers on the clobber list may not be preserved across the asm statement, and clobber"
                       "ing them may lead to undefined behaviour.";
    __int16 v117 = 259;
    int v119 = 0;
    char v120 = 3;
    size_t v118 = &unk_1F2616540;
    uint64_t v121 = v97;
    uint64_t v122 = v116;
    uint64_t v123 = 0;
    llvm::LLVMContext::diagnose(v92, (const llvm::DiagnosticInfo *)&v118);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  sub_1CD8A1B54(a1, *v109, (unint64_t)v109[1], *(void *)(*(void *)(a1 + 280) + 16), *(void *)(a1 + 248) + 1128, v19);
  uint64_t v93 = *(void *)(a1 + 272);
  uint64_t v94 = *(unsigned char **)(*(void *)(a1 + 256) + 144);
  char v95 = 1;
  BYTE1(v123) = 1;
  if (*v94)
  {
    size_t v118 = v94;
    char v95 = 3;
  }
  LOBYTE(v123) = v95;
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v93 + 128))(v93, &v118, 1);
  if (v128 != &v130) {
    free(v128);
  }
  uint64_t v101 = &unk_1F2646B98;
  if (v108 == 1 && v103) {
    MEMORY[0x1D25D9CB0](v103, 0x1000C8077774924);
  }
  if (v124 != &v126) {
    free(v124);
  }
}

_DWORD *sub_1CD28C784(_DWORD *a1, uint64_t a2)
{
  uint64_t result = sub_1CC6FE80C(a1);
  uint64_t v5 = a2 + 320;
  uint64_t v6 = *(void *)(a2 + 328);
  if (v6 != v5)
  {
    int v7 = 0;
    do
    {
      for (uint64_t i = *(void *)(v6 + 56); i != v6 + 48; uint64_t i = *(void *)(i + 8))
      {
        if ((*(void *)(*(void *)(i + 16) + 8) & 0x10) == 0) {
          ++v7;
        }
        uint64_t v18 = i;
        int v9 = a1[4];
        if (v9)
        {
          int v10 = v9 - 1;
          unsigned int v11 = v10 & ((i >> 4) ^ (i >> 9));
          uint64_t result = (_DWORD *)(*(void *)a1 + 16 * v11);
          uint64_t v12 = *(void *)result;
          if (i == *(void *)result)
          {
            result[2] = v7;
LABEL_23:
            if ((*(unsigned char *)i & 4) != 0) {
              continue;
            }
            goto LABEL_24;
          }
          uint64_t v13 = 0;
          int v14 = 1;
          while (v12 != -4096)
          {
            if (v13) {
              BOOL v15 = 0;
            }
            else {
              BOOL v15 = v12 == -8192;
            }
            if (v15) {
              uint64_t v13 = result;
            }
            unsigned int v16 = v11 + v14++;
            unsigned int v11 = v16 & v10;
            uint64_t result = (_DWORD *)(*(void *)a1 + 16 * v11);
            uint64_t v12 = *(void *)result;
            if (i == *(void *)result) {
              goto LABEL_22;
            }
          }
          if (v13) {
            uint64_t v17 = v13;
          }
          else {
            uint64_t v17 = result;
          }
        }
        else
        {
          uint64_t v17 = 0;
        }
        uint64_t result = sub_1CBB268D8((uint64_t)a1, (uint64_t)&v18, &v18, v17);
        *(void *)uint64_t result = v18;
        result[2] = 0;
LABEL_22:
        result[2] = v7;
        if (i) {
          goto LABEL_23;
        }
LABEL_24:
        while ((*(_WORD *)(i + 44) & 8) != 0)
          uint64_t i = *(void *)(i + 8);
      }
      uint64_t v6 = *(void *)(v6 + 8);
    }
    while (v6 != v5);
  }
  return result;
}

BOOL sub_1CD28C8DC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (!v3)
  {
    unsigned int v10 = 0;
LABEL_14:
    unsigned int v15 = 0;
    return v10 < v15;
  }
  uint64_t v4 = *a1;
  unsigned int v5 = v3 - 1;
  uint64_t v6 = v5 & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = *(void *)(*a1 + 16 * v6);
  if (v7 == a2)
  {
LABEL_6:
    unsigned int v10 = *(_DWORD *)(v4 + 16 * v6 + 8);
  }
  else
  {
    int v8 = 1;
    while (v7 != -4096)
    {
      int v9 = v6 + v8++;
      uint64_t v6 = v9 & v5;
      uint64_t v7 = *(void *)(v4 + 16 * v6);
      if (v7 == a2) {
        goto LABEL_6;
      }
    }
    unsigned int v10 = 0;
  }
  uint64_t v11 = v5 & ((a3 >> 4) ^ (a3 >> 9));
  uint64_t v12 = *(void *)(v4 + 16 * v11);
  if (v12 != a3)
  {
    int v13 = 1;
    while (v12 != -4096)
    {
      int v14 = v11 + v13++;
      uint64_t v11 = v14 & v5;
      uint64_t v12 = *(void *)(v4 + 16 * v11);
      if (v12 == a3) {
        goto LABEL_12;
      }
    }
    goto LABEL_14;
  }
LABEL_12:
  unsigned int v15 = *(_DWORD *)(v4 + 16 * v11 + 8);
  return v10 < v15;
}

uint64_t sub_1CD28C9A4(uint64_t *a1, long long *a2)
{
  v36[9] = *MEMORY[0x1E4F143B8];
  long long v24 = *a2;
  int v25 = 0;
  sub_1CD28EF54((uint64_t)&v22, (uint64_t)a1, (uint64_t *)&v24, &v25);
  uint64_t v4 = v22;
  if (v23)
  {
    unint64_t v8 = a1[5];
    __int16 v31 = v33;
    uint64_t v32 = 0x400000000;
    v33[4] = *a2;
    unsigned int v34 = v36;
    uint64_t v35 = 0x400000000;
    unint64_t v9 = a1[4];
    if (v9 >= v8)
    {
      uint64_t v11 = a1[3];
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v11) >> 5);
      if (v12 + 1 > 0x2AAAAAAAAAAAAAALL) {
        abort();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v11) >> 5);
      uint64_t v14 = 2 * v13;
      if (2 * v13 <= v12 + 1) {
        uint64_t v14 = v12 + 1;
      }
      if (v13 >= 0x155555555555555) {
        unint64_t v15 = 0x2AAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v15 = v14;
      }
      int v30 = a1 + 5;
      if (v15 > 0x2AAAAAAAAAAAAAALL) {
        sub_1CB833614();
      }
      uint64_t v16 = 3 * v15;
      uint64_t v17 = (char *)operator new(96 * v15);
      uint64_t v18 = &v17[96 * v12];
      std::string __p = v17;
      unint64_t v27 = v18;
      *(_OWORD *)uint64_t v18 = *a2;
      *((void *)v18 + 2) = v18 + 32;
      *((void *)v18 + 3) = 0x400000000;
      int v28 = v18 + 96;
      uint64_t v29 = &v17[32 * v16];
      sub_1CD28F44C(a1 + 3, &__p);
      uint64_t v10 = a1[4];
      uint64_t v19 = v27;
      for (uint64_t i = v28; i != v19; i -= 96)
      {
        uint64_t v21 = (char *)*((void *)i - 10);
        if (i - 64 != v21) {
          free(v21);
        }
      }
      if (__p) {
        operator delete(__p);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v9 = *a2;
      *(void *)(v9 + 16) = v9 + 32;
      *(void *)(v9 + 24) = 0x400000000;
      if (v35) {
        sub_1CD28F30C(v9 + 16, (const void **)&v34);
      }
      uint64_t v10 = v9 + 96;
    }
    a1[4] = v10;
    if (v34 != v36) {
      free(v34);
    }
    if (v31 != v33) {
      free(v31);
    }
    uint64_t v6 = a1[3];
    unsigned int v5 = -1431655765 * ((unint64_t)(a1[4] - v6) >> 5) - 1;
    *(_DWORD *)(v4 + 16) = v5;
  }
  else
  {
    unsigned int v5 = *(_DWORD *)(v22 + 16);
    uint64_t v6 = a1[3];
  }
  return v6 + 96 * v5 + 16;
}

uint64_t sub_1CD28CC14(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *(unsigned int *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v4 = (unint64_t *)(*(void *)result + 16 * v3);
  *uint64_t v4 = a2 & 0xFFFFFFFFFFFFFFFBLL | (4 * a3);
  v4[1] = -1;
  *(_DWORD *)(result + ++*(_DWORD *)(result + 8) = v3 + 1;
  return result;
}

uint64_t sub_1CD28CCB0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&long long v10 = a2;
  *((void *)&v10 + 1) = a3;
  uint64_t v5 = sub_1CD28C9A4(a1, &v10);
  uint64_t v6 = v5;
  uint64_t v7 = *(unsigned int *)(v5 + 8);
  uint64_t v8 = *(void *)(*(void *)v5 + 16 * v7 - 16);
  if ((v8 & 4) == 0 || (v8 & 0xFFFFFFFFFFFFFFF8) != a4)
  {
    sub_1CD28CC14(v5, a4, 1u);
    uint64_t v7 = *(unsigned int *)(v6 + 8);
  }
  return v7 - 1;
}

void sub_1CD28CD20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  v81[4] = *MEMORY[0x1E4F143B8];
  __base = v81;
  size_t __nel = 0x400000000;
  unsigned int v76 = v78;
  uint64_t v77 = 0x400000000;
  uint64_t v4 = v75;
  unsigned int v74 = 0;
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5 != *(void *)(a1 + 32))
  {
    uint64_t v72 = *(void *)(a1 + 32);
    do
    {
      unint64_t v7 = *(unsigned int *)(v5 + 24);
      if (!v7) {
        goto LABEL_61;
      }
      unint64_t v8 = *(void *)(v5 + 8);
      unint64_t v9 = *(void *)(*(void *)v5 - 8 * *(unsigned int *)(*(void *)v5 + 8));
      if (v8)
      {
        int8x8_t v10 = (int8x8_t)a3[7];
        if (!*(void *)&v10) {
          goto LABEL_61;
        }
        unint64_t v11 = 0x9DDFEA08EB382D69 * (((8 * v9) + 8) ^ HIDWORD(v9));
        unint64_t v12 = 0x9DDFEA08EB382D69 * (HIDWORD(v9) ^ (v11 >> 47) ^ v11);
        unint64_t v13 = 0x9DDFEA08EB382D69 * (((8 * v8) + 8) ^ HIDWORD(v8));
        unint64_t v14 = 0x9DDFEA08EB382D69 * (HIDWORD(v8) ^ (v13 >> 47) ^ v13);
        unint64_t v15 = 0x9DDFEA08EB382D69 * (v14 ^ (v14 >> 47)) + 0x1E1D57147BCD7FB7 * (v12 ^ (v12 >> 47));
        uint8x8_t v16 = (uint8x8_t)vcnt_s8(v10);
        v16.i16[0] = vaddlv_u8(v16);
        if (v16.u32[0] <= 1uLL) {
          uint64_t v17 = (*(void *)&v10 - 1) & v15;
        }
        else {
          uint64_t v17 = v15 < *(void *)&v10 ? v15 : v15 % *(void *)&v10;
        }
        uint64_t v18 = *(void **)(a3[6] + 8 * v17);
        if (!v18) {
          goto LABEL_61;
        }
        do
        {
          while (1)
          {
            uint64_t v18 = (void *)*v18;
            if (!v18) {
              goto LABEL_61;
            }
            unint64_t v19 = v18[1];
            if (v19 == v15) {
              break;
            }
            if (v16.u32[0] <= 1uLL)
            {
              v19 &= *(void *)&v10 - 1;
            }
            else if (v19 >= *(void *)&v10)
            {
              v19 %= *(void *)&v10;
            }
            if (v19 != v17) {
              goto LABEL_61;
            }
          }
        }
        while (v18[2] != v9 || v18[3] != v8);
        uint64_t v21 = v18 + 4;
LABEL_28:
        LODWORD(__nel) = 0;
        int v67 = v4;
        unint64_t v68 = a3;
        if (HIDWORD(v77) < v7)
        {
          LODWORD(v77) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v22 = (char *)v76;
        unint64_t v23 = v77;
        if (v77 >= v7) {
          unint64_t v24 = v7;
        }
        else {
          unint64_t v24 = v77;
        }
        if (v24)
        {
          bzero(v76, 4 * v24);
          unint64_t v23 = v77;
        }
        if (v7 > v23) {
          bzero(&v22[4 * v23], 4 * (v7 - v23));
        }
        LODWORD(v77) = v7;
        uint64_t v25 = *(unsigned int *)(v5 + 24);
        if (!v25) {
          goto LABEL_60;
        }
        uint64_t v26 = 0;
        unint64_t v27 = *(uint64_t **)(v5 + 16);
        int v28 = &v27[2 * v25];
        uint64_t v29 = *((unsigned int *)v21 + 22);
        int v30 = (uint64_t *)v21[10];
        long long v70 = v28;
LABEL_38:
        uint64_t v31 = *v27;
        if ((*v27 & 4) != 0) {
          goto LABEL_54;
        }
        uint64_t v32 = v27[1];
        size_t v33 = (int *)v76;
        if (v32 == -1)
        {
          if (*((int *)v76 + v26) > 0) {
            goto LABEL_54;
          }
          unint64_t v34 = 0;
        }
        else
        {
          ++*((_DWORD *)v76 + v32);
          if (v33[v26] > 0) {
            goto LABEL_54;
          }
          unint64_t v34 = *(void *)(*(void *)(v5 + 16) + 16 * v32) & 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v71 = v29;
        if (!v29)
        {
LABEL_51:
          if (__nel >= (unint64_t)HIDWORD(__nel)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v28 = v70;
          uint64_t v29 = v71;
          *((void *)__base + __nel) = v26;
          LODWORD(__nel) = __nel + 1;
          if (v32 != -1) {
            --*((_DWORD *)v76 + v32);
          }
LABEL_54:
          int v36 = v30;
          goto LABEL_55;
        }
        unint64_t v69 = v31 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v35 = 16 * v29;
        int v36 = v30;
        while (1)
        {
          if (v34)
          {
            if (sub_1CD28C8DC(a4, v34, *v36)) {
              goto LABEL_51;
            }
            uint64_t v37 = v36[1];
            if (!sub_1CD28C8DC(a4, v37, v34))
            {
LABEL_57:
              uint64_t v29 = v35 >> 4;
              int v28 = v70;
LABEL_55:
              v27 += 2;
              ++v26;
              int v30 = v36;
              if (v27 == v28)
              {
LABEL_60:
                unsigned int v38 = __nel;
                uint64_t v4 = v67;
                a3 = v68;
                if (__nel)
                {
                  unsigned int v39 = *(_DWORD *)(v5 + 24);
                  if (v39)
                  {
                    uint64_t v40 = 0;
                    for (unint64_t i = 0; i < v39; ++i)
                    {
                      if (*((int *)v76 + i) <= 0 && (*(unsigned char *)(*(void *)(v5 + 16) + v40) & 4) != 0)
                      {
                        if (v38 >= HIDWORD(__nel)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *((void *)__base + v3++*(_DWORD *)(result + 8) = i;
                        unsigned int v38 = __nel + 1;
                        LODWORD(__nel) = __nel + 1;
                        unsigned int v39 = *(_DWORD *)(v5 + 24);
                      }
                      v40 += 16;
                    }
                  }
                  if (v38 >= 2)
                  {
                    qsort(__base, v38, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1CD8A2924);
                    unsigned int v39 = *(_DWORD *)(v5 + 24);
                  }
                  a3 = v68;
                  uint64_t v4 = v67;
                  if (v39 > 4) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  if (v74 >= (unint64_t)v39) {
                    uint64_t v42 = v39;
                  }
                  else {
                    uint64_t v42 = v74;
                  }
                  if (v42) {
                    bzero(v75, 8 * v42);
                  }
                  if (v74 < v39) {
                    bzero(&v75[v74], 8 * (v39 - (unint64_t)v74));
                  }
                  unsigned int v43 = v39;
                  unsigned int v74 = v39;
                  uint64_t v44 = (char *)__base;
                  uint64_t v45 = *(void *)__base;
                  if (*(void *)__base < (unint64_t)v39)
                  {
                    uint64_t v46 = 0;
                    long long v47 = (char *)__base + 8 * __nel;
                    int v48 = (char *)__base;
                    do
                    {
                      if (v48 == v47)
                      {
                        int v48 = v47;
                      }
                      else if (v45 == *(void *)v48)
                      {
                        ++v46;
                        v48 += 8;
                      }
                      v75[v45++] = v46;
                    }
                    while (v39 != v45);
                  }
                  if (v39)
                  {
                    uint64_t v49 = 16 * v39;
                    unsigned int v50 = (void *)(*(void *)(v5 + 16) + 8);
                    do
                    {
                      if (*v50 != -1) {
                        *v50 -= v75[*v50];
                      }
                      v50 += 2;
                      v49 -= 16;
                    }
                    while (v49);
                  }
                  if (__nel)
                  {
                    uint64_t v51 = 8 * __nel;
                    unsigned int v52 = v44 - 8;
                    do
                    {
                      uint64_t v53 = *(void *)(v5 + 16);
                      uint64_t v54 = v53 + 16 * *(void *)&v52[v51];
                      uint64_t v55 = v53 + 16 * v43;
                      if (v55 != v54 + 16)
                      {
                        memmove((void *)v54, (const void *)(v54 + 16), v55 - (v54 + 16));
                        unsigned int v43 = *(_DWORD *)(v5 + 24);
                      }
                      *(_DWORD *)(v5 + 24) = --v43;
                      v51 -= 8;
                    }
                    while (v51);
                  }
                }
                goto LABEL_61;
              }
              goto LABEL_38;
            }
          }
          else
          {
            uint64_t v37 = v36[1];
          }
          if (sub_1CD28C8DC(a4, v69, v37)) {
            goto LABEL_57;
          }
          v36 += 2;
          v35 -= 16;
          if (!v35) {
            goto LABEL_51;
          }
        }
      }
      int8x8_t v56 = (int8x8_t)a3[2];
      if (!*(void *)&v56) {
        goto LABEL_61;
      }
      unint64_t v57 = 0x9DDFEA08EB382D69 * (((8 * v9) + 8) ^ HIDWORD(v9));
      unint64_t v58 = 0x9DDFEA08EB382D69 * (HIDWORD(v9) ^ (v57 >> 47) ^ v57);
      unint64_t v59 = 0x9DDFEA08EB382D69 * (v58 ^ (v58 >> 47));
      uint8x8_t v60 = (uint8x8_t)vcnt_s8(v56);
      v60.i16[0] = vaddlv_u8(v60);
      if (v60.u32[0] > 1uLL) {
        uint64_t v61 = v59 < *(void *)&v56 ? v59 : v59 % *(void *)&v56;
      }
      else {
        uint64_t v61 = (*(void *)&v56 - 1) & v59;
      }
      size_t v62 = *(void **)(a3[1] + 8 * v61);
      if (!v62) {
        goto LABEL_61;
      }
      do
      {
        while (1)
        {
          size_t v62 = (void *)*v62;
          if (!v62) {
            goto LABEL_61;
          }
          unint64_t v63 = v62[1];
          if (v63 != v59) {
            break;
          }
          if (v62[2] == v9)
          {
            uint64_t v21 = v62 + 3;
            uint64_t v64 = (unsigned char *)v62[4];
            if ((*v64 & 0xFE) == 0x12)
            {
              uint64_t v65 = v62[4];
              do
                uint64_t v65 = *(void *)(v65 - 8 * *(unsigned int *)(v65 + 8) + 8);
              while ((*(unsigned char *)v65 & 0xFE) == 0x12);
              if (v64 == (unsigned char *)v65 && v64 == (unsigned char *)v9) {
                goto LABEL_61;
              }
            }
            else if (v64 == (unsigned char *)v9)
            {
              goto LABEL_61;
            }
            goto LABEL_28;
          }
        }
        if (v60.u32[0] <= 1uLL)
        {
          v63 &= *(void *)&v56 - 1;
        }
        else if (v63 >= *(void *)&v56)
        {
          v63 %= *(void *)&v56;
        }
      }
      while (v63 == v61);
LABEL_61:
      v5 += 96;
    }
    while (v5 != v72);
    if (v75 != v4) {
      free(v75);
    }
  }
  if (v76 != v78) {
    free(v76);
  }
  if (__base != v81) {
    free(__base);
  }
}

uint64_t sub_1CD28D4C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 8);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = 16 * v2;
  while (1)
  {
    if ((*v3 & 4) == 0)
    {
      uint64_t v5 = *(void *)((*v3 & 0xFFFFFFFFFFFFFFF8) + 32);
      if (*(unsigned char *)v5 || *(_DWORD *)(v5 + 4)) {
        break;
      }
    }
    v3 += 2;
    v4 -= 16;
    if (!v4) {
      return 0;
    }
  }
  return 1;
}

void sub_1CD28D50C(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v159 = *MEMORY[0x1E4F143B8];
  int v7 = *(_DWORD *)((*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120))(*(void *)(a1 + 16)) + 88);
  uint64_t v132 = a2;
  int v131 = (*(uint64_t (**)(void *, uint64_t))(*a2 + 552))(a2, a1);
  unsigned int v148 = 0;
  uint64_t v149 = 0;
  uint64_t v146 = 0;
  unint64_t v147 = &v148;
  uint64_t v144 = (uint64_t *)&v145;
  unint64_t v145 = 0;
  unint64_t v8 = *(void **)(a1 + 328);
  unsigned int v128 = (void *)(a1 + 320);
  if (v8 == (void *)(a1 + 320))
  {
    uint64_t v126 = 0;
    goto LABEL_229;
  }
  int v135 = v7;
  do
  {
    unint64_t v9 = v8 + 6;
    uint64_t v129 = v8;
    uint64_t v10 = v8[7];
    uint64_t v130 = v8 + 6;
    while ((void *)v10 != v9)
    {
      int v11 = **(unsigned __int16 **)(v10 + 16);
      if ((v11 - 13) > 1)
      {
        if (v11 == 17)
        {
          uint64_t v15 = *(void *)(v10 + 56);
          if (*(_DWORD *)(v15 + 8) == 2) {
            uint8x8_t v16 = *(void **)(v15 - 8);
          }
          else {
            uint8x8_t v16 = 0;
          }
          v153[0] = *(void **)(*(void *)(v10 + 32) + 16);
          v153[1] = v16;
          *(void *)sub_1CD8A2350(a4, (long long *)v153) = v10;
        }
      }
      else
      {
        uint64_t v12 = v11 != 14;
        uint64_t v13 = *(void *)(v10 + 56);
        if (*(_DWORD *)(v13 + 8) == 2) {
          unint64_t v14 = *(void **)(v13 - 8);
        }
        else {
          unint64_t v14 = 0;
        }
        uint64_t v17 = *(void **)(*(void *)(v10 + 32) + (v12 << 6) + 16);
        *(void *)&long long v151 = v17;
        *((void *)&v151 + 1) = v14;
        v153[0] = v17;
        v153[1] = v14;
        uint64_t v18 = sub_1CD28C9A4(a3, (long long *)v153);
        uint64_t v19 = v18;
        uint64_t v20 = *(unsigned int *)(v18 + 8);
        if (!v20
          || (uint64_t v21 = *(void *)v18 + 16 * v20, v22 = *(void *)(v21 - 16), (v22 & 4) != 0)
          || *(void *)(v21 - 8) != -1
          || !llvm::MachineInstr::isIdenticalTo(v22 & 0xFFFFFFFFFFFFFFF8, v10, 0))
        {
          sub_1CD28CC14(v19, v10, 0);
          uint64_t v133 = *(unsigned int *)(v19 + 8) - 1;
          uint64_t v150 = v133;
          uint64_t v155 = 1;
          for (uint64_t i = 8; i != 40; i += 8)
            *(_DWORD *)((char *)&v155 + i) = -1;
          v153[0] = v154;
          v153[1] = (void *)0x400000000;
          uint64_t v24 = 96;
          if (**(_WORD **)(v10 + 16) == 14) {
            uint64_t v24 = 32;
          }
          uint64_t v136 = *(void *)(*(void *)(v10 + 32) + v24 + 16);
          unint64_t v137 = (unint64_t)v14;
          uint64_t v25 = sub_1CD28EB58(&v144, (unint64_t)v17, (unint64_t)v14, &v151);
          uint64_t v26 = v25[11];
          int v138 = v26 == 0;
          uint64_t v27 = 9;
          if (!v26) {
            uint64_t v27 = 6;
          }
          int v28 = v25[v27];
          unint64_t v141 = (unint64_t)v17;
          if (v26)
          {
            int v29 = 0;
            uint64_t v30 = (uint64_t)(v25 + 10);
          }
          else
          {
            uint64_t v30 = (uint64_t)&v25[6][*((unsigned int *)v25 + 14)];
            int v29 = 1;
          }
          uint64_t v134 = (uint64_t *)v30;
          BOOL v31 = v29 == v138 && v28 == (uint64_t *)v30;
          if (!v31)
          {
            while (1)
            {
              uint64_t v32 = v28 + 4;
              if (!v26) {
                uint64_t v32 = v28;
              }
              uint64_t v33 = *v32;
              *(void *)&long long v152 = v141;
              *((void *)&v152 + 1) = v137;
              unint64_t v34 = (uint64_t *)sub_1CD28C9A4(a3, &v152);
              uint64_t v35 = *v34;
              unint64_t v36 = *(void *)(*v34 + 16 * v33) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v37 = 96;
              if (**(_WORD **)(v36 + 16) == 14) {
                uint64_t v37 = 32;
              }
              BOOL v38 = sub_1CC3EF174(v136, *(void *)(*(void *)(v36 + 32) + v37 + 16));
              if (v38)
              {
                if (LODWORD(v153[1]) >= (unint64_t)HIDWORD(v153[1])) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v153[0] + LODWORD(v153[1])) = v33;
                ++LODWORD(v153[1]);
                *(void *)(v35 + 16 * v33 + ++*(_DWORD *)(result + 8) = v133;
              }
              int v7 = v135;
              if (llvm::MachineInstr::isDebugEntryValue((llvm::MachineInstr *)v36)) {
                goto LABEL_46;
              }
              uint64_t v39 = *(void *)(v36 + 32);
              if (**(_WORD **)(v36 + 16) != 14) {
                break;
              }
              uint64_t v40 = *(unsigned int *)(v36 + 40);
              if (v40 != 2)
              {
                uint64_t v41 = v39 + 32 * v40;
                v39 += 64;
                goto LABEL_41;
              }
LABEL_46:
              if (v26)
              {
                uint64_t v44 = (uint64_t *)v28[1];
                uint64_t v45 = v28;
                if (v44)
                {
                  do
                  {
                    int v28 = v44;
                    uint64_t v44 = (uint64_t *)*v44;
                  }
                  while (v44);
                }
                else
                {
                  do
                  {
                    int v28 = (uint64_t *)v45[2];
                    BOOL v31 = *v28 == (void)v45;
                    uint64_t v45 = v28;
                  }
                  while (!v31);
                }
              }
              else
              {
                ++v28;
              }
              if (v29 == v138 && v28 == v134) {
                goto LABEL_58;
              }
            }
            uint64_t v41 = v39 + 32;
LABEL_41:
            BOOL v42 = !v38;
            do
            {
              if (!*(unsigned char *)v39 && *(_DWORD *)(v39 + 4))
              {
                LODWORD(v152) = *(_DWORD *)(v39 + 4);
                uint64_t v43 = sub_1CD28EC64(&v155, (int *)&v152);
                *(unsigned char *)(v43 + 4) |= v42;
              }
              v39 += 32;
            }
            while (v39 != v41);
            goto LABEL_46;
          }
LABEL_58:
          if (llvm::MachineInstr::isDebugEntryValue((llvm::MachineInstr *)v10))
          {
            unint64_t v46 = v137;
            unint64_t v47 = v141;
          }
          else
          {
            uint64_t v48 = *(unsigned int *)(v10 + 40);
            if (**(_WORD **)(v10 + 16) != 14) {
              uint64_t v48 = 1;
            }
            unint64_t v46 = v137;
            unint64_t v47 = v141;
            if (2 * (**(_WORD **)(v10 + 16) == 14) != v48)
            {
              uint64_t v100 = *(void *)(v10 + 32);
              uint64_t v101 = v100 + 32 * v48;
              uint64_t v102 = v100 + ((unint64_t)(**(_WORD **)(v10 + 16) == 14) << 6);
              uint64_t v140 = v101;
              do
              {
                if (!*(unsigned char *)v102)
                {
                  unsigned int v103 = *(_DWORD *)(v102 + 4);
                  if (v103)
                  {
                    if (!sub_1CD28ED4C((uint64_t)&v155, *(_DWORD *)(v102 + 4), &v152))
                    {
                      unint64_t v143 = v47;
                      unint64_t v104 = v148;
                      uint64_t v105 = &v148;
LABEL_172:
                      char v106 = v105;
                      if (v104)
                      {
                        do
                        {
                          uint64_t v105 = (uint64_t **)v104;
                          unsigned int v107 = *((_DWORD *)v104 + 8);
                          if (v107 > v103)
                          {
                            unint64_t v104 = *v105;
                            goto LABEL_172;
                          }
                          if (v107 >= v103) {
                            goto LABEL_182;
                          }
                          unint64_t v104 = v105[1];
                        }
                        while (v104);
                        char v106 = v105 + 1;
                      }
                      int v108 = (uint64_t *)v105;
                      uint64_t v105 = (uint64_t **)operator new(0x48uLL);
                      *((_DWORD *)v105 + ++*(_DWORD *)(result + 8) = v103;
                      v105[5] = (uint64_t *)(v105 + 7);
                      v105[6] = (uint64_t *)0x100000000;
                      *uint64_t v105 = 0;
                      v105[1] = 0;
                      v105[2] = v108;
                      uint64_t *v106 = (uint64_t *)v105;
                      size_t v109 = (uint64_t *)v105;
                      if (*v147)
                      {
                        unint64_t v147 = (uint64_t **)*v147;
                        size_t v109 = *v106;
                      }
                      sub_1CB8358B8(v148, v109);
                      ++v149;
                      int v7 = v135;
LABEL_182:
                      unint64_t v110 = *((unsigned int *)v105 + 12);
                      if (v110 >= *((unsigned int *)v105 + 13)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      unint64_t v111 = &v105[5][2 * v110];
                      uint64_t *v111 = v143;
                      v111[1] = v46;
                      ++*((_DWORD *)v105 + 12);
                      unint64_t v46 = *((void *)&v151 + 1);
                      unint64_t v47 = v151;
                      uint64_t v101 = v140;
                    }
                    __int16 v112 = sub_1CD28EB58(&v144, v47, v46, &v151);
                    sub_1CD28E87C((uint64_t)(v112 + 6), (unint64_t *)&v150);
                    LODWORD(v152) = v103;
                    *(unsigned char *)(sub_1CD28EC64(&v155, (int *)&v152) + 4) = 1;
                  }
                }
                v102 += 32;
              }
              while (v102 != v101);
            }
          }
          int v49 = v155;
          if (v155 <= 1)
          {
            if (v155)
            {
              unsigned int v50 = (void **)&v156;
              uint64_t v51 = 4;
            }
            else
            {
              unsigned int v50 = v156;
              uint64_t v51 = v157;
            }
            unsigned int v52 = (char **)&v50[v51];
            uint64_t v53 = (char *)v52;
LABEL_67:
            BOOL v54 = v49 == 0;
            if (v49) {
              uint64_t v55 = (void **)&v156;
            }
            else {
              uint64_t v55 = v156;
            }
            unsigned int v56 = v157;
            if (!v54) {
              unsigned int v56 = 4;
            }
            unint64_t v57 = (char **)&v55[v56];
LABEL_73:
            while (v52 != v57)
            {
              if ((*((unsigned char *)v52 + 4) & 1) == 0) {
                sub_1CD28E984((uint64_t)&v147, *(_DWORD *)v52, v47, v46);
              }
              unint64_t v58 = (unsigned int *)(v52 + 1);
              while (v58 != (unsigned int *)v53)
              {
                unsigned int v59 = *v58;
                v58 += 2;
                if (v59 <= 0xFFFFFFFD)
                {
                  unsigned int v52 = (char **)(v58 - 2);
                  goto LABEL_73;
                }
              }
              unsigned int v52 = (char **)v53;
            }
            if (LODWORD(v153[1]))
            {
              uint8x8_t v60 = (unint64_t *)v153[0];
              uint64_t v61 = 8 * LODWORD(v153[1]);
              do
              {
                unint64_t v62 = *v60++;
                unint64_t v63 = sub_1CD28EB58(&v144, v47, v46, &v151);
                sub_1CD28EA2C((uint64_t)(v63 + 6), v62);
                v61 -= 8;
              }
              while (v61);
            }
            uint64_t v64 = sub_1CD28EB58(&v144, v47, v46, &v151);
            sub_1CD28E87C((uint64_t)(v64 + 6), (unint64_t *)&v150);
            if (v153[0] != v154) {
              free(v153[0]);
            }
            if ((v155 & 1) == 0) {
              MEMORY[0x1D25D9CD0](v156, 4);
            }
            goto LABEL_88;
          }
          uint64_t v53 = (char *)&v159;
          unsigned int v52 = (char **)&v156;
          if ((v155 & 1) == 0)
          {
            unsigned int v52 = (char **)v156;
            if (!v157)
            {
              int v49 = 0;
              uint64_t v53 = (char *)v156;
              int v7 = v135;
              goto LABEL_67;
            }
            uint64_t v53 = (char *)&v156[v157];
            int v7 = v135;
          }
          int v49 = v155 & 1;
          while (*(_DWORD *)v52 >= 0xFFFFFFFE)
          {
            if (++v52 == (char **)v53)
            {
              unsigned int v52 = (char **)v53;
              goto LABEL_67;
            }
          }
          goto LABEL_67;
        }
      }
LABEL_88:
      if ((*(unsigned char *)(*(void *)(v10 + 16) + 8) & 0x10) != 0 || (uint64_t v65 = *(unsigned int *)(v10 + 40), !v65))
      {
LABEL_157:
        if ((*(unsigned char *)v10 & 4) == 0) {
          goto LABEL_160;
        }
        goto LABEL_161;
      }
      uint64_t v66 = *(void *)(v10 + 32);
      uint64_t v142 = v66 + 32 * v65;
      do
      {
        if ((*(_DWORD *)v66 & 0x10000FF) != 0x1000000 || (unsigned int v67 = *(_DWORD *)(v66 + 4)) == 0)
        {
          if (*(_DWORD *)v66 == 12)
          {
            v153[0] = v154;
            v153[1] = (void *)0x2000000000;
            long long v81 = v147;
            if (v147 != &v148)
            {
              do
              {
                unsigned int v82 = *((_DWORD *)v81 + 8);
                LODWORD(v155) = v82;
                unint64_t v156 = (void **)v158;
                uint64_t v157 = 0x100000000;
                unsigned int v83 = *((_DWORD *)v81 + 12);
                uint64_t v84 = (void **)(v81 + 5);
                if (v83) {
                  BOOL v85 = &v156 == (void ***)v84;
                }
                else {
                  BOOL v85 = 1;
                }
                if (!v85)
                {
                  if (v83 >= 2) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  memcpy(v156, *v84, 16 * *((unsigned int *)v81 + 12));
                  LODWORD(v157) = v83;
                  unsigned int v82 = v155;
                }
                BOOL v86 = v82 == v7 || v82 - 1 > 0x3FFFFFFE;
                if (!v86 && ((*(_DWORD *)(*(void *)(v66 + 16) + 4 * (v82 >> 5)) >> v82) & 1) == 0)
                {
                  if (LODWORD(v153[1]) >= (unint64_t)HIDWORD(v153[1])) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((_DWORD *)v153[0] + LODWORD(v153[1])) = v82;
                  ++LODWORD(v153[1]);
                }
                if (v156 != (void **)v158) {
                  free(v156);
                }
                std::string::size_type v87 = v81[1];
                if (v87)
                {
                  do
                  {
                    unsigned int v88 = (uint64_t **)v87;
                    std::string::size_type v87 = (uint64_t *)*v87;
                  }
                  while (v87);
                }
                else
                {
                  do
                  {
                    unsigned int v88 = (uint64_t **)v81[2];
                    BOOL v31 = *v88 == (uint64_t *)v81;
                    long long v81 = v88;
                  }
                  while (!v31);
                }
                long long v81 = v88;
              }
              while (v88 != &v148);
              long long v89 = (unsigned int *)v153[0];
              if (LODWORD(v153[1]))
              {
                uint64_t v90 = 4 * LODWORD(v153[1]);
                do
                {
                  unsigned int v91 = *v89++;
                  sub_1CD28E24C((uint64_t)&v147, v91, a3, &v144, v10);
                  v90 -= 4;
                }
                while (v90);
                long long v89 = (unsigned int *)v153[0];
              }
              if (v89 != (unsigned int *)v154) {
                free(v89);
              }
            }
          }
          goto LABEL_147;
        }
        __int16 v68 = *(_WORD *)(v10 + 44);
        uint64_t v69 = *(void *)(*(void *)(v10 + 16) + 8);
        if ((v68 & 0xC) != 0 && (v68 & 4) == 0)
        {
          uint64_t v92 = v10;
          if ((v69 & 0x80) != 0)
          {
LABEL_98:
            if (v67 == v7) {
              goto LABEL_147;
            }
            goto LABEL_99;
          }
          while ((*(_WORD *)(v92 + 44) & 8) != 0)
          {
            uint64_t v92 = *(void *)(v92 + 8);
            if ((*(unsigned char *)(*(void *)(v92 + 16) + 8) & 0x80) != 0) {
              goto LABEL_98;
            }
          }
        }
        else if ((v69 & 0x80) != 0)
        {
          goto LABEL_98;
        }
LABEL_99:
        if ((v67 & 0x80000000) != 0)
        {
          sub_1CD28E24C((uint64_t)&v147, v67, a3, &v144, v10);
        }
        else if (v67 != v131 || (v68 & 3) == 0)
        {
          uint64_t v71 = v132[1];
          unint64_t v72 = ((unint64_t)*(unsigned int *)(v71 + 24 * v67 + 16) >> 3) & 0x1FFFFFFE;
          uint64_t v74 = v132[6];
          uint64_t v73 = v132[7];
          unsigned int v75 = (_WORD *)(v73 + v72 + 2);
          int v76 = *(unsigned __int16 *)(v73 + v72) + (*(_DWORD *)(v71 + 24 * v67 + 16) & 0xF) * v67;
          do
          {
            uint64_t v77 = 4 * (unsigned __int16)v76;
            unsigned int v78 = *(unsigned __int16 *)(v74 + v77);
            if (*(_WORD *)(v74 + v77)) {
              BOOL v79 = v73 == 0;
            }
            else {
              BOOL v79 = 1;
            }
            if (!v79)
            {
              unsigned int v93 = *(unsigned __int16 *)(v74 + 4 * (unsigned __int16)v76 + 2) << 16;
              uint64_t v94 = (unsigned int *)(v71 + 24 * *(unsigned __int16 *)(v74 + 4 * (unsigned __int16)v76) + 8);
              int v139 = v76;
              while (1)
              {
                char v95 = (unsigned __int16 *)(v73 + 2 * *v94);
                do
                {
                  sub_1CD28E24C((uint64_t)&v147, (unsigned __int16)v78, a3, &v144, v10);
                  int v96 = *v95++;
                  v78 += v96;
                }
                while (v96);
                unsigned int v78 = HIWORD(v93);
                if (HIWORD(v93))
                {
                  v93 >>= 16;
                  uint64_t v98 = v132;
                }
                else
                {
                  int v97 = (unsigned __int16)*v75;
                  if (!*v75) {
                    goto LABEL_147;
                  }
                  ++v75;
                  uint64_t v98 = v132;
                  v139 += v97;
                  char v99 = (unsigned __int16 *)(v132[6] + 4 * (unsigned __int16)v139);
                  unsigned int v78 = *v99;
                  unsigned int v93 = v99[1] << 16;
                }
                uint64_t v73 = v98[7];
                uint64_t v94 = (unsigned int *)(v98[1] + 24 * v78 + 8);
              }
            }
            int v80 = (unsigned __int16)*v75++;
            v76 += v80;
          }
          while (v80);
        }
LABEL_147:
        v66 += 32;
      }
      while (v66 != v142);
      if (v10) {
        goto LABEL_157;
      }
LABEL_160:
      while ((*(_WORD *)(v10 + 44) & 8) != 0)
        uint64_t v10 = *(void *)(v10 + 8);
LABEL_161:
      uint64_t v10 = *(void *)(v10 + 8);
      unint64_t v9 = v130;
    }
    uint64_t v113 = v129;
    if (v130 != (void *)(*v130 & 0xFFFFFFFFFFFFFFF8) && v129 != (void *)*v128)
    {
      char v114 = v144;
      if (v144 != (uint64_t *)&v145)
      {
        do
        {
          if (*((_DWORD *)v114 + 14) || v114[11])
          {
            unint64_t v115 = *v130 & 0xFFFFFFFFFFFFFFF8;
            if (!v115 || (*(unsigned char *)v115 & 4) == 0)
            {
              while ((*(_WORD *)(v115 + 44) & 4) != 0)
                unint64_t v115 = *(void *)v115 & 0xFFFFFFFFFFFFFFF8;
            }
            uint64_t v116 = sub_1CD28CCB0(a3, v114[4], v114[5], v115);
            uint64_t v117 = v114[11];
            if (v117)
            {
              size_t v118 = v114 + 10;
              int v119 = (uint64_t *)v114[9];
            }
            else
            {
              int v119 = (uint64_t *)v114[6];
              size_t v118 = &v119[*((unsigned int *)v114 + 14)];
            }
            if (v119 != v118)
            {
              do
              {
                char v120 = v119 + 4;
                if (!v117) {
                  char v120 = v119;
                }
                uint64_t v121 = *v120;
                *(_OWORD *)unint64_t v153 = *((_OWORD *)v114 + 2);
                *(void *)(*(void *)sub_1CD28C9A4(a3, (long long *)v153) + 16 * v121 + ++*(_DWORD *)(result + 8) = v116;
                if (v117)
                {
                  uint64_t v122 = (uint64_t *)v119[1];
                  if (v122)
                  {
                    do
                    {
                      uint64_t v123 = v122;
                      uint64_t v122 = (uint64_t *)*v122;
                    }
                    while (v122);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v123 = (uint64_t *)v119[2];
                      BOOL v31 = *v123 == (void)v119;
                      int v119 = v123;
                    }
                    while (!v31);
                  }
                }
                else
                {
                  uint64_t v123 = v119 + 1;
                }
                int v119 = v123;
              }
              while (v123 != v118);
            }
          }
          unsigned int v124 = (uint64_t *)v114[1];
          if (v124)
          {
            do
            {
              long long v125 = v124;
              unsigned int v124 = (uint64_t *)*v124;
            }
            while (v124);
          }
          else
          {
            do
            {
              long long v125 = (uint64_t *)v114[2];
              BOOL v31 = *v125 == (void)v114;
              char v114 = v125;
            }
            while (!v31);
          }
          char v114 = v125;
        }
        while (v125 != (uint64_t *)&v145);
      }
      sub_1CD28F51C(v145);
      unint64_t v145 = 0;
      uint64_t v146 = 0;
      uint64_t v144 = (uint64_t *)&v145;
      sub_1CC3A533C(v148);
      unsigned int v148 = 0;
      uint64_t v149 = 0;
      unint64_t v147 = &v148;
      uint64_t v113 = v129;
    }
    unint64_t v8 = (void *)v113[1];
  }
  while (v8 != v128);
  uint64_t v126 = v145;
LABEL_229:
  sub_1CD28F51C(v126);
  sub_1CC3A533C(v148);
}

void sub_1CD28E24C(uint64_t a1, unsigned int a2, uint64_t *a3, uint64_t **a4, uint64_t a5)
{
  v95[4] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    uint64_t v6 = a4;
    int v7 = (uint64_t **)a1;
    uint64_t v8 = a1 + 8;
    do
    {
      unsigned int v9 = *(_DWORD *)(v5 + 32);
      BOOL v10 = v9 >= a2;
      if (v9 >= a2) {
        int v11 = (uint64_t *)v5;
      }
      else {
        int v11 = (uint64_t *)(v5 + 8);
      }
      if (v10) {
        uint64_t v8 = v5;
      }
      uint64_t v5 = *v11;
    }
    while (*v11);
    if (v8 != a1 + 8 && *(_DWORD *)(v8 + 32) <= a2)
    {
      uint64_t v12 = *(unsigned int *)(v8 + 48);
      if (v12)
      {
        uint64_t v13 = *(unint64_t **)(v8 + 40);
        uint64_t v66 = (uint64_t *)&v13[2 * v12];
        uint64_t v67 = v8;
        while (1)
        {
          unsigned int v78 = v80;
          uint64_t v79 = 0x400000000;
          unint64_t v15 = *v13;
          unint64_t v14 = v13[1];
          uint64_t v71 = (uint64_t *)v13;
          int v16 = *(_DWORD *)(v8 + 32);
          *(void *)&long long v76 = v15;
          *((void *)&v76 + 1) = v14;
          uint64_t v72 = sub_1CD28CCB0(a3, v15, v14, a5);
          unsigned int v93 = v95;
          uint64_t v94 = 0x400000000;
          std::string::size_type v87 = v89;
          uint64_t v88 = 0x400000000;
          unsigned int v91 = 0;
          uint64_t v92 = 0;
          uint64_t v90 = (char *)&v91;
          long long v81 = v83;
          uint64_t v82 = 0x400000000;
          BOOL v85 = 0;
          uint64_t v86 = 0;
          uint64_t v84 = &v85;
          uint64_t v17 = sub_1CD28EB58(v6, v15, v14, &v76);
          uint64_t v18 = v17[11];
          int v75 = v18 == 0;
          uint64_t v19 = 9;
          if (v18)
          {
            int v21 = 0;
            uint64_t v20 = (uint64_t)(v17 + 10);
          }
          else
          {
            uint64_t v19 = 6;
            uint64_t v20 = (uint64_t)&v17[6][*((unsigned int *)v17 + 14)];
            int v21 = 1;
          }
          uint64_t v22 = v17[v19];
          uint64_t v73 = (uint64_t *)v20;
          BOOL v23 = v21 == v75 && v22 == (uint64_t *)v20;
          if (!v23)
          {
            do
            {
              uint64_t v24 = v22 + 4;
              if (!v18) {
                uint64_t v24 = v22;
              }
              unint64_t v25 = *v24;
              *(void *)&long long v77 = v15;
              *((void *)&v77 + 1) = v14;
              uint64_t v26 = *(void *)sub_1CD28C9A4(a3, &v77);
              uint64_t v27 = (void *)(v26 + 16 * v25);
              if (!llvm::MachineInstr::isDebugEntryValue((llvm::MachineInstr *)(*v27 & 0xFFFFFFFFFFFFFFF8)))
              {
                unint64_t v28 = *v27 & 0xFFFFFFFFFFFFFFF8;
                int v29 = **(unsigned __int16 **)(v28 + 16);
                uint64_t v30 = *(void *)(v28 + 32);
                if (v29 != 14)
                {
                  uint64_t v33 = v30 + 32;
                  uint64_t v32 = *(void *)(v28 + 32);
                  goto LABEL_28;
                }
                uint64_t v31 = *(unsigned int *)(v28 + 40);
                if (v31 != 2)
                {
                  uint64_t v32 = v30 + 64;
                  uint64_t v33 = v30 + 32 * v31;
LABEL_28:
                  while (*(unsigned char *)v32 || *(_DWORD *)(v32 + 4) != v16)
                  {
                    v32 += 32;
                    if (v32 == v33)
                    {
                      if (v29 == 14)
                      {
                        uint64_t v34 = *(unsigned int *)(v28 + 40);
                        if (v34 == 2) {
                          goto LABEL_52;
                        }
                        uint64_t v35 = v30 + 32 * v34;
                        v30 += 64;
                      }
                      else
                      {
                        uint64_t v35 = v30 + 32;
                      }
                      do
                      {
                        if (!*(unsigned char *)v30 && *(_DWORD *)(v30 + 4))
                        {
                          LODWORD(v77) = *(_DWORD *)(v30 + 4);
                          sub_1CBB141C8((uint64_t)&v81, (unsigned int *)&v77);
                        }
                        v30 += 32;
                      }
                      while (v30 != v35);
                      goto LABEL_52;
                    }
                  }
                  if (v94 >= (unint64_t)HIDWORD(v94)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  v93[v94] = v25;
                  LODWORD(v94) = v94 + 1;
                  *(void *)(v26 + 16 * v25 + ++*(_DWORD *)(result + 8) = v72;
                  unint64_t v36 = *v27 & 0xFFFFFFFFFFFFFFF8;
                  uint64_t v37 = *(void *)(v36 + 32);
                  if (**(_WORD **)(v36 + 16) == 14)
                  {
                    uint64_t v38 = *(unsigned int *)(v36 + 40);
                    if (v38 == 2) {
                      goto LABEL_52;
                    }
                    uint64_t v39 = v37 + 32 * v38;
                    v37 += 64;
                  }
                  else
                  {
                    uint64_t v39 = v37 + 32;
                  }
                  do
                  {
                    if (!*(unsigned char *)v37)
                    {
                      int v40 = *(_DWORD *)(v37 + 4);
                      if (v40 && v40 != v16)
                      {
                        LODWORD(v77) = *(_DWORD *)(v37 + 4);
                        sub_1CBB141C8((uint64_t)&v87, (unsigned int *)&v77);
                      }
                    }
                    v37 += 32;
                  }
                  while (v37 != v39);
                }
              }
LABEL_52:
              if (v18)
              {
                BOOL v42 = (uint64_t *)v22[1];
                uint64_t v43 = v22;
                if (v42)
                {
                  do
                  {
                    uint64_t v22 = v42;
                    BOOL v42 = (uint64_t *)*v42;
                  }
                  while (v42);
                }
                else
                {
                  do
                  {
                    uint64_t v22 = (uint64_t *)v43[2];
                    BOOL v23 = *v22 == (void)v43;
                    uint64_t v43 = v22;
                  }
                  while (!v23);
                }
              }
              else
              {
                ++v22;
              }
            }
            while (v21 != v75 || v22 != v73);
          }
          uint64_t v44 = v92;
          uint64_t v45 = v92 ? v90 : v87;
          unint64_t v46 = v92 ? (char *)&v91 : &v87[4 * v88];
          if (v45 != v46) {
            break;
          }
LABEL_101:
          uint64_t v6 = a4;
          if (v94)
          {
            unsigned int v59 = v93;
            uint64_t v60 = 8 * v94;
            do
            {
              unint64_t v61 = *v59++;
              unint64_t v62 = sub_1CD28EB58(a4, v15, v14, &v76);
              sub_1CD28EA2C((uint64_t)(v62 + 6), v61);
              v60 -= 8;
            }
            while (v60);
          }
          sub_1CB833A08((uint64_t)&v84, v85);
          if (v81 != v83) {
            free(v81);
          }
          sub_1CB833A08((uint64_t)&v90, v91);
          int v7 = (uint64_t **)a1;
          if (v87 != v89) {
            free(v87);
          }
          if (v93 != v95) {
            free(v93);
          }
          unint64_t v63 = (unsigned int *)v78;
          if (v79)
          {
            uint64_t v64 = 4 * v79;
            do
            {
              unsigned int v65 = *v63++;
              sub_1CD28E984(a1, v65, *v71, v71[1]);
              v64 -= 4;
            }
            while (v64);
            unint64_t v63 = (unsigned int *)v78;
          }
          if (v63 != (unsigned int *)v80) {
            free(v63);
          }
          uint64_t v13 = (unint64_t *)(v71 + 2);
          uint64_t v8 = v67;
          if (v71 + 2 == v66) {
            goto LABEL_117;
          }
        }
        while (1)
        {
          unint64_t v47 = (unsigned int *)(v45 + 28);
          if (!v44) {
            unint64_t v47 = (unsigned int *)v45;
          }
          unsigned int v48 = *v47;
          if (v86)
          {
            int v49 = v85;
            unsigned int v50 = &v85;
            if (v85)
            {
              do
              {
                uint64_t v51 = v50;
                unsigned int v52 = v49;
                unsigned int v53 = *((_DWORD *)v49 + 7);
                BOOL v54 = v49 + 1;
                if (v53 >= v48)
                {
                  BOOL v54 = v52;
                  unsigned int v50 = (void **)v52;
                }
                int v49 = (void *)*v54;
              }
              while (v49);
              if (v50 != &v85)
              {
                if (v53 >= v48) {
                  uint64_t v51 = (void **)v52;
                }
                if (v48 >= *((_DWORD *)v51 + 7)) {
                  goto LABEL_82;
                }
              }
            }
          }
          else if (v82)
          {
            unint64_t v57 = v81;
            uint64_t v58 = 4 * v82;
            while (*v57 != v48)
            {
              ++v57;
              v58 -= 4;
              if (!v58) {
                goto LABEL_95;
              }
            }
            if (v58)
            {
LABEL_82:
              if (v44) {
                goto LABEL_83;
              }
              goto LABEL_97;
            }
          }
LABEL_95:
          if (v79 >= (unint64_t)HIDWORD(v79)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)v78 + v79) = v48;
          LODWORD(v79) = v79 + 1;
          if (v44)
          {
LABEL_83:
            uint64_t v55 = (char *)*((void *)v45 + 1);
            if (v55)
            {
              do
              {
                unsigned int v56 = v55;
                uint64_t v55 = *(char **)v55;
              }
              while (v55);
            }
            else
            {
              do
              {
                unsigned int v56 = (char *)*((void *)v45 + 2);
                BOOL v23 = *(void *)v56 == (void)v45;
                uint64_t v45 = v56;
              }
              while (!v23);
            }
            goto LABEL_98;
          }
LABEL_97:
          unsigned int v56 = v45 + 4;
LABEL_98:
          uint64_t v45 = v56;
          if (v56 == v46) {
            goto LABEL_101;
          }
        }
      }
LABEL_117:
      sub_1CD28EEB0(v7, (uint64_t *)v8);
    }
  }
}

uint64_t sub_1CD28E87C(uint64_t result, unint64_t *a2)
{
  uint64_t v3 = result;
  if (*(void *)(result + 40))
  {
    BOOL v10 = (uint64_t **)(result + 24);
    unint64_t v9 = *a2;
  }
  else
  {
    uint64_t v4 = *(unint64_t **)result;
    uint64_t v5 = *(unsigned int *)(result + 8);
    unint64_t v6 = *a2;
    if (!v5)
    {
      if (!*(_DWORD *)(result + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *uint64_t v4 = v6;
      ++*(_DWORD *)(result + 8);
      return result;
    }
    uint64_t v7 = 8 * v5;
    while (*v4 != v6)
    {
      ++v4;
      v7 -= 8;
      if (!v7) {
        goto LABEL_9;
      }
    }
    if (v7) {
      return result;
    }
    do
    {
LABEL_9:
      unint64_t v8 = *(void *)(*(void *)v3 + 8 * v5 - 8);
      sub_1CD28EDF0((uint64_t **)(v3 + 24), v8, v8);
      LODWORD(v5) = *(_DWORD *)(v3 + 8) - 1;
      *(_DWORD *)(v3 + ++*(_DWORD *)(result + 8) = v5;
    }
    while (v5);
    unint64_t v9 = *a2;
    BOOL v10 = (uint64_t **)(v3 + 24);
  }

  return sub_1CD28EDF0(v10, v9, v9);
}

void sub_1CD28E984(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v6 = a1 + 8;
  do
  {
    unsigned int v7 = *(_DWORD *)(v4 + 32);
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      unint64_t v9 = (uint64_t *)v4;
    }
    else {
      unint64_t v9 = (uint64_t *)(v4 + 8);
    }
    if (v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 == a1 + 8 || *(_DWORD *)(v6 + 32) > a2) {
LABEL_12:
  }
    uint64_t v6 = a1 + 8;
  BOOL v10 = *(void **)(v6 + 40);
  uint64_t v11 = *(unsigned int *)(v6 + 48);
  uint64_t v12 = &v10[2 * v11];
  if (v11)
  {
    uint64_t v13 = 16 * v11;
    while (*v10 != a3 || v10[1] != a4)
    {
      v10 += 2;
      v13 -= 16;
      if (!v13)
      {
        BOOL v10 = v12;
        break;
      }
    }
  }
  while (1)
  {
    v10 += 2;
    if (v10 == v12) {
      break;
    }
    *((_OWORD *)v10 - 1) = *(_OWORD *)v10;
  }
  int v15 = v11 - 1;
  *(_DWORD *)(v6 + 4++*(_DWORD *)(result + 8) = v15;
  if (!v15) {
    sub_1CD28EEB0((uint64_t **)a1, (uint64_t *)v6);
  }
}

void sub_1CD28EA2C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    uint64_t v5 = (uint64_t *)(a1 + 32);
    uint64_t v4 = *(uint64_t **)(a1 + 32);
    if (v4)
    {
      uint64_t v6 = *(void **)(a1 + 32);
      unsigned int v7 = (uint64_t *)(a1 + 32);
      do
      {
        unint64_t v8 = v6[4];
        BOOL v9 = v8 >= a2;
        if (v8 >= a2) {
          BOOL v10 = v6;
        }
        else {
          BOOL v10 = v6 + 1;
        }
        if (v9) {
          unsigned int v7 = v6;
        }
        uint64_t v6 = (void *)*v10;
      }
      while (*v10);
      if (v7 != v5 && v7[4] <= a2)
      {
        uint64_t v11 = (uint64_t *)v7[1];
        if (v11)
        {
          do
          {
            uint64_t v12 = v11;
            uint64_t v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
        else
        {
          uint64_t v18 = v7;
          do
          {
            uint64_t v12 = (uint64_t *)v18[2];
            BOOL v19 = *v12 == (void)v18;
            uint64_t v18 = v12;
          }
          while (!v19);
        }
        if (*(uint64_t **)(a1 + 24) == v7) {
          *(void *)(a1 + 24) = v12;
        }
        *(void *)(a1 + 40) = v3 - 1;
        sub_1CB91F7C8(v4, v7);
        operator delete(v7);
      }
    }
  }
  else
  {
    uint64_t v13 = *(unsigned int *)(a1 + 8);
    if (v13)
    {
      unint64_t v14 = *(uint64_t **)a1;
      size_t v15 = 8 * v13 - 8;
      int v16 = *(uint64_t **)a1;
      while (1)
      {
        uint64_t v17 = *v16++;
        if (v17 == a2) {
          break;
        }
        v15 -= 8;
        unint64_t v14 = v16;
        if (v15 == -8) {
          return;
        }
      }
      if (v15)
      {
        memmove(v14, v14 + 1, v15);
        LODWORD(v13) = *(_DWORD *)(a1 + 8);
      }
      *(_DWORD *)(a1 + ++*(_DWORD *)(result + 8) = v13 - 1;
    }
  }
}

uint64_t **sub_1CD28EB58(uint64_t **a1, unint64_t a2, unint64_t a3, _OWORD *a4)
{
  unsigned int v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (!v6)
  {
    unint64_t v8 = a1 + 1;
    goto LABEL_9;
  }
  do
  {
    while (1)
    {
      unint64_t v8 = (uint64_t **)v6;
      unint64_t v9 = v6[4];
      if (v9 <= a2)
      {
        if (v9 < a2) {
          goto LABEL_6;
        }
        BOOL v10 = v8[5];
        if ((unint64_t)v10 <= a3) {
          break;
        }
      }
      uint64_t v6 = *v8;
      unsigned int v7 = v8;
      if (!*v8) {
        goto LABEL_9;
      }
    }
    if ((unint64_t)v10 >= a3) {
      return v8;
    }
LABEL_6:
    uint64_t v6 = v8[1];
  }
  while (v6);
  unsigned int v7 = v8 + 1;
LABEL_9:
  uint64_t v11 = (uint64_t *)v8;
  unint64_t v8 = (uint64_t **)operator new(0x60uLL);
  *((_OWORD *)v8 + 2) = *a4;
  v8[8] = 0;
  v8[6] = (uint64_t *)(v8 + 8);
  v8[7] = (uint64_t *)0x100000000;
  v8[11] = 0;
  v8[10] = 0;
  v8[9] = (uint64_t *)(v8 + 10);
  *unint64_t v8 = 0;
  v8[1] = 0;
  v8[2] = v11;
  *unsigned int v7 = (uint64_t *)v8;
  uint64_t v12 = (uint64_t *)**a1;
  uint64_t v13 = (uint64_t *)v8;
  if (v12)
  {
    *a1 = v12;
    uint64_t v13 = *v7;
  }
  sub_1CB8358B8(a1[1], v13);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v8;
}

uint64_t sub_1CD28EC64(_DWORD *a1, int *a2)
{
  uint64_t v8 = 0;
  char v4 = sub_1CD28ED4C((uint64_t)a1, *a2, &v8);
  uint64_t result = v8;
  if (v4) {
    return result;
  }
  int v6 = *a1 >> 1;
  if (*a1) {
    unsigned int v7 = 4;
  }
  else {
    unsigned int v7 = a1[4];
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_12;
  }
  if (v7 + ~v6 - a1[1] <= v7 >> 3)
  {
LABEL_12:
    sub_1CD8A26DC((uint64_t)a1, v7);
    uint64_t v8 = 0;
    sub_1CD28ED4C((uint64_t)a1, *a2, &v8);
    uint64_t result = v8;
  }
  *a1 += 2;
  if (*(_DWORD *)result != -1) {
    --a1[1];
  }
  *(_DWORD *)uint64_t result = *a2;
  *(unsigned char *)(result + 4) = 0;
  return result;
}

uint64_t sub_1CD28ED4C(uint64_t a1, int a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      unsigned int v7 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & (37 * a2);
  unsigned int v7 = (_DWORD *)(v3 + 8 * v6);
  int v8 = *v7;
  if (*v7 == a2)
  {
LABEL_15:
    uint64_t result = 1;
  }
  else
  {
    unint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -1)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -2;
      }
      if (v12) {
        unint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      unsigned int v7 = (_DWORD *)(v3 + 8 * (v13 & v5));
      int v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_15;
      }
    }
    uint64_t result = 0;
    if (v9) {
      unsigned int v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

uint64_t sub_1CD28EDF0(uint64_t **a1, unint64_t a2, uint64_t a3)
{
  unsigned int v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        int v5 = *v7;
        unsigned int v6 = v7;
        if (!*v7) {
          goto LABEL_6;
        }
      }
      if (v8 >= a2) {
        return 0;
      }
      int v5 = v7[1];
      if (!v5)
      {
        unsigned int v6 = v7 + 1;
        goto LABEL_6;
      }
    }
  }
  else
  {
    unsigned int v7 = a1 + 1;
LABEL_6:
    unint64_t v9 = (uint64_t *)operator new(0x28uLL);
    uint64_t v9[4] = a3;
    *unint64_t v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v7;
    *unsigned int v6 = v9;
    int v10 = (uint64_t *)**a1;
    if (v10)
    {
      *a1 = v10;
      unint64_t v9 = *v6;
    }
    sub_1CB8358B8(a1[1], v9);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return 1;
  }
}

void sub_1CD28EEB0(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = (uint64_t *)a2[1];
  if (v3)
  {
    do
    {
      int v5 = v3;
      uint64_t v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  else
  {
    int v4 = a2;
    do
    {
      int v5 = (uint64_t *)v4[2];
      BOOL v6 = *v5 == (void)v4;
      int v4 = v5;
    }
    while (!v6);
  }
  if (*a1 == a2) {
    *a1 = v5;
  }
  unsigned int v7 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_1CB91F7C8(v7, a2);
  unint64_t v8 = (uint64_t *)a2[5];
  if (v8 != a2 + 7) {
    free(v8);
  }

  operator delete(a2);
}

uint64_t sub_1CD28EF54(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t v14 = 0;
  uint64_t result = sub_1CD28F07C(*(void *)a2, *(_DWORD *)(a2 + 16), *a3, a3[1], &v14);
  uint64_t v9 = v14;
  if (result)
  {
    char v10 = 0;
    goto LABEL_3;
  }
  int v12 = *(_DWORD *)(a2 + 8);
  unsigned int v13 = *(_DWORD *)(a2 + 16);
  if (4 * v12 + 4 >= 3 * v13)
  {
    v13 *= 2;
  }
  else if (v13 + ~v12 - *(_DWORD *)(a2 + 12) > v13 >> 3)
  {
    goto LABEL_6;
  }
  sub_1CD28F15C(a2, v13);
  uint64_t v14 = 0;
  uint64_t result = sub_1CD28F07C(*(void *)a2, *(_DWORD *)(a2 + 16), *a3, a3[1], &v14);
  uint64_t v9 = v14;
LABEL_6:
  ++*(_DWORD *)(a2 + 8);
  if (*(void *)v9 != -4096 || *(void *)(v9 + 8) != -4096) {
    --*(_DWORD *)(a2 + 12);
  }
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a3;
  *(_DWORD *)(v9 + 16) = *a4;
  char v10 = 1;
LABEL_3:
  uint64_t v11 = *(void *)a2 + 24 * *(unsigned int *)(a2 + 16);
  *(void *)a1 = v9;
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = v11;
  *(unsigned char *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_1CD28F07C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a2)
  {
    unint64_t v5 = ((a4 >> 4) ^ (a4 >> 9) | ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32))
       + ~((unint64_t)((a4 >> 4) ^ (a4 >> 9)) << 32);
    unint64_t v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    unint64_t v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    int v8 = a2 - 1;
    unsigned int v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~(v7 << 27)));
    char v10 = (void *)(a1 + 24 * v9);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    if (*v10 == a3 && v12 == a4)
    {
LABEL_22:
      uint64_t result = 1;
    }
    else
    {
      uint64_t v14 = 0;
      int v15 = 1;
      while (v11 != -4096 || v12 != -4096)
      {
        if (v14) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v12 == -8192;
        }
        if (v16 && v11 == -8192) {
          uint64_t v14 = v10;
        }
        unsigned int v18 = v9 + v15++;
        unsigned int v9 = v18 & v8;
        char v10 = (void *)(a1 + 24 * (v18 & v8));
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        if (*v10 == a3 && v12 == a4) {
          goto LABEL_22;
        }
      }
      uint64_t result = 0;
      if (v14) {
        char v10 = v14;
      }
    }
  }
  else
  {
    char v10 = 0;
    uint64_t result = 0;
  }
  *a5 = v10;
  return result;
}

_OWORD *sub_1CD28F15C(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD28F238(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 24 * v10;
    int64x2_t v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      _OWORD *result = v12;
      uint64_t result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD28F238(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + ++*(_DWORD *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(int64x2_t **)result;
    uint64_t v8 = 24 * v6;
    int64x2_t v9 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *int v7 = v9;
      int v7 = (int64x2_t *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v10 = *(void *)a2;
    uint64_t v11 = *(void *)(a2 + 8);
    if ((*(void *)a2 != -4096 || v11 != -4096) && (v10 != -8192 || v11 != -8192))
    {
      unsigned int v13 = 0;
      uint64_t result = sub_1CD28F07C(*(void *)v5, *(_DWORD *)(v5 + 16), v10, v11, &v13);
      int64x2_t v12 = v13;
      void *v13 = *(void *)a2;
      v12[1] = *(void *)(a2 + 8);
      *((_DWORD *)v12 + 4) = *(_DWORD *)(a2 + 16);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

uint64_t sub_1CD28F30C(uint64_t a1, const void **a2)
{
  if ((const void **)a1 != a2)
  {
    uint64_t v4 = a2 + 2;
    unsigned int v3 = *a2;
    if (*a2 == a2 + 2)
    {
      uint64_t v6 = a2 + 1;
      uint64_t v5 = *((unsigned int *)a2 + 2);
      uint64_t v7 = *(unsigned int *)(a1 + 8);
      if (v7 >= v5)
      {
        if (v5) {
          memmove(*(void **)a1, *a2, 16 * v5);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v5)
        {
          *(_DWORD *)(a1 + ++*(_DWORD *)(result + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v7)
        {
          uint64_t v13 = *(unsigned int *)(a1 + 8);
          uint64_t v14 = a2;
          memmove(*(void **)a1, v3, 16 * v7);
          uint64_t v8 = v13;
          a2 = v14;
        }
        else
        {
          uint64_t v8 = 0;
        }
        uint64_t v9 = *v6;
        if (v8 != v9) {
          memcpy((void *)(*(void *)a1 + 16 * v8), (char *)*a2 + 16 * v8, (unsigned char *)*a2 + 16 * v9 - ((unsigned char *)*a2 + 16 * v8));
        }
      }
      *(_DWORD *)(a1 + ++*(_DWORD *)(result + 8) = v5;
    }
    else
    {
      uint64_t v11 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        int64x2_t v12 = a2;
        free(v11);
        a2 = v12;
        unsigned int v3 = *v12;
      }
      *(void *)a1 = v3;
      uint64_t v6 = a2 + 1;
      *(void *)(a1 + ++*(_DWORD *)(result + 8) = a2[1];
      *a2 = v4;
      *((_DWORD *)a2 + 3) = 0;
    }
    *uint64_t v6 = 0;
  }
  return a1;
}

uint64_t *sub_1CD28F44C(uint64_t *result, void *a2)
{
  unsigned int v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    uint64_t v7 = 0;
    do
    {
      long long v8 = *(_OWORD *)(v4 + v7 - 96);
      *(void *)(v6 + v7 - 80) = v6 + v7 - 64;
      uint64_t result = (uint64_t *)(v6 + v7 - 80);
      *((_OWORD *)result - 1) = v8;
      result[1] = 0x400000000;
      if (*(_DWORD *)(v4 + v7 - 72)) {
        uint64_t result = (uint64_t *)sub_1CD28F30C((uint64_t)result, (const void **)(v4 + v7 - 80));
      }
      v7 -= 96;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  uint64_t v9 = *v3;
  uint64_t *v3 = v6;
  a2[1] = v9;
  uint64_t v10 = v3[1];
  v3[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = v3[2];
  v3[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

void sub_1CD28F51C(void *a1)
{
  if (a1)
  {
    sub_1CD28F51C(*a1);
    sub_1CD28F51C(a1[1]);
    sub_1CD40B1BC((void *)a1[10]);
    unsigned int v3 = (char *)a1[6];
    if (v3 != (char *)(a1 + 8)) {
      free(v3);
    }
    operator delete(a1);
  }
}

double sub_1CD28F588(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F2649820;
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 288);
  double result = 0.0;
  *(_OWORD *)(a1 + 8++*(_DWORD *)(result + 8) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 104) = 1065353216;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 12++*(_DWORD *)(result + 8) = 0u;
  *(_DWORD *)(a1 + 144) = 1065353216;
  *(_OWORD *)(a1 + 16++*(_DWORD *)(result + 8) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 184) = 1065353216;
  *(void *)(a1 + 192) = a1 + 208;
  *(void *)(a1 + 200) = 0x400000000;
  *(_DWORD *)(a1 + 264) = 0;
  *(void *)(a1 + 24++*(_DWORD *)(result + 8) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 28++*(_DWORD *)(result + 8) = 0;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 372) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 40++*(_DWORD *)(result + 8) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(_DWORD *)(a1 + 432) = 0;
  return result;
}

uint64_t sub_1CD28F63C(uint64_t a1, llvm::Module *a2)
{
  uint64_t result = sub_1CC362814(a2, &v4);
  if (v5 == v6) {
    *(void *)(a1 + ++*(_DWORD *)(result + 8) = 0;
  }
  return result;
}

uint64_t sub_1CD28F688(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 384);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 368);
    unsigned int v4 = v2 - 1;
    uint64_t v5 = (v2 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v6 = *(void *)(v3 + 16 * v5);
    if (v6 == a2) {
      return *(void *)(v3 + 16 * v5 + 8);
    }
    int v7 = 1;
    while (v6 != -4096)
    {
      int v8 = v5 + v7++;
      uint64_t v5 = v8 & v4;
      uint64_t v6 = *(void *)(v3 + 16 * v5);
      if (v6 == a2) {
        return *(void *)(v3 + 16 * v5 + 8);
      }
    }
  }
  return 0;
}

uint64_t sub_1CD28F6F0(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 408);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 392);
    unsigned int v4 = v2 - 1;
    uint64_t v5 = (v2 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v6 = *(void *)(v3 + 16 * v5);
    if (v6 == a2) {
      return *(void *)(v3 + 16 * v5 + 8);
    }
    int v7 = 1;
    while (v6 != -4096)
    {
      int v8 = v5 + v7++;
      uint64_t v5 = v8 & v4;
      uint64_t v6 = *(void *)(v3 + 16 * v5);
      if (v6 == a2) {
        return *(void *)(v3 + 16 * v5 + 8);
      }
    }
  }
  return 0;
}

uint64_t sub_1CD28F758(uint64_t result)
{
  do
  {
    uint64_t v1 = result;
    if (*(unsigned char *)result != 12) {
      break;
    }
    unsigned int v2 = *(unsigned __int16 *)(result + 2) - 13;
    BOOL v3 = v2 > 0x3E;
    uint64_t v4 = (1 << v2) & 0x4400050002000201;
    if (v3 || v4 == 0) {
      break;
    }
    uint64_t result = *(void *)(result - 8 * *(unsigned int *)(result + 8) + 24);
    if (!result) {
      return result;
    }
    int v6 = *(unsigned __int16 *)(result + 2);
  }
  while (v6 != 66 && v6 != 16);
  return *(void *)(v1 + 32);
}

uint64_t sub_1CD28F7C0(uint64_t result)
{
  while (1)
  {
    int v1 = *(unsigned __int8 *)result;
    if (v1 == 13)
    {
      if (*(_WORD *)(result + 2) != 4) {
        return 1;
      }
      uint64_t result = *(void *)(result - 8 * *(unsigned int *)(result + 8) + 24);
      if (!result) {
        return result;
      }
      int v1 = *(unsigned __int8 *)result;
    }
    else if (v1 == 33)
    {
      return 1;
    }
    if (v1 != 12) {
      break;
    }
    unsigned int v2 = *(unsigned __int16 *)(result + 2) - 15;
    if (v2 < 0x34 && ((0x8000000010003uLL >> v2) & 1) != 0) {
      return 1;
    }
    uint64_t result = *(void *)(result - 8 * *(unsigned int *)(result + 8) + 24);
  }
  unsigned int v3 = *(_DWORD *)(result + 52) - 2;
  if (v3 >= 0xF || ((0x4061u >> v3) & 1) == 0) {
    return *(unsigned __int16 *)(result + 2) == 59;
  }
  return 1;
}

uint64_t sub_1CD28F868(uint64_t *a1, uint64_t ****a2)
{
  v83[4] = *MEMORY[0x1E4F143B8];
  a1[5] = 0;
  if (!a1[1]) {
    goto LABEL_18;
  }
  if (!*(unsigned char *)(a1[2] + 2108)) {
    goto LABEL_18;
  }
  uint64_t v4 = *a2;
  if ((*((unsigned char *)*a2 + 23) & 0x20) == 0) {
    goto LABEL_18;
  }
  uint64_t v5 = ***v4;
  v82.i64[0] = (uint64_t)*a2;
  int v6 = *(_DWORD *)(v5 + 2496);
  if (!v6)
  {
    long long v70 = 0;
LABEL_104:
    uint64_t v10 = sub_1CC609054(v5 + 2480, (uint64_t)&v82, v82.i64, v70);
    uint64_t v71 = v82.i64[0];
    void v10[3] = 0;
    v10[4] = 0;
    *uint64_t v10 = v71;
    v10[1] = v10 + 3;
    void v10[2] = 0x100000000;
    goto LABEL_14;
  }
  uint64_t v7 = *(void *)(v5 + 2480);
  int v8 = v6 - 1;
  unsigned int v9 = v8 & ((v4 >> 4) ^ (v4 >> 9));
  uint64_t v10 = (void *)(v7 + 40 * v9);
  uint64_t v11 = (void ***)*v10;
  if ((uint64_t ***)*v10 != v4)
  {
    int64x2_t v12 = 0;
    int v13 = 1;
    while (v11 != (void ***)-4096)
    {
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v11 == (void ***)-8192;
      }
      if (v14) {
        int64x2_t v12 = v10;
      }
      unsigned int v15 = v9 + v13++;
      unsigned int v9 = v15 & v8;
      uint64_t v10 = (void *)(v7 + 40 * v9);
      uint64_t v11 = (void ***)*v10;
      if ((uint64_t ***)*v10 == v4) {
        goto LABEL_14;
      }
    }
    if (v12) {
      long long v70 = v12;
    }
    else {
      long long v70 = v10;
    }
    goto LABEL_104;
  }
LABEL_14:
  uint64_t v16 = *((unsigned int *)v10 + 4);
  if (!v16) {
    goto LABEL_18;
  }
  uint64_t v17 = (void *)(v10[1] + 8);
  uint64_t v18 = 16 * v16;
  while (*((_DWORD *)v17 - 2))
  {
    v17 += 2;
    v18 -= 16;
    if (!v18) {
      goto LABEL_18;
    }
  }
  uint64_t v21 = *v17;
  if (!v21 || !*(_DWORD *)(*(void *)(v21 - 8 * *(unsigned int *)(v21 + 8) + 40) + 36))
  {
LABEL_18:
    BOOL v19 = *(uint64_t (**)(uint64_t *))(*a1 + 144);
    return v19(a1);
  }
  llvm::LexicalScopes::initialize((llvm::LexicalScopes *)(a1 + 8), a2);
  uint64_t v22 = a1[30];
  if (!v22)
  {
    uint64_t v72 = *(uint64_t (**)(uint64_t *, uint64_t ****))(*a1 + 128);
    return v72(a1, a2);
  }
  v82.i64[0] = (uint64_t)v83;
  v82.i32[3] = 4;
  v83[0] = v22;
  LODWORD(v22) = 1;
  do
  {
    uint64_t v23 = *(void *)(v82.i64[0] + 8 * v22 - 8);
    uint64_t v22 = (v22 - 1);
    v82.i32[2] = v22;
    uint64_t v24 = *(unsigned int *)(v23 + 40);
    if (v24)
    {
      if (v24 + (unint64_t)v22 > v82.u32[3]) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy((void *)(v82.i64[0] + 8 * v22), *(const void **)(v23 + 32), 8 * v24);
      LODWORD(v22) = v82.i32[2] + v24;
      v82.i32[2] += v24;
    }
    if (!*(unsigned char *)(v23 + 24))
    {
      uint64_t v25 = *(unsigned int *)(v23 + 88);
      if (v25)
      {
        uint64_t v26 = *(uint64_t **)(v23 + 80);
        uint64_t v27 = &v26[2 * v25];
        do
        {
          uint64_t v80 = *v26;
          uint64_t v81 = 0;
          sub_1CD290568((uint64_t)(a1 + 46), &v80, &v81, (uint64_t)&v78);
          uint64_t v80 = v26[1];
          uint64_t v81 = 0;
          sub_1CD290568((uint64_t)(a1 + 49), &v80, &v81, (uint64_t)&v78);
          v26 += 2;
        }
        while (v26 != v27);
        LODWORD(v22) = v82.i32[2];
      }
    }
  }
  while (v22);
  if ((void *)v82.i64[0] != v83) {
    free((void *)v82.i64[0]);
  }
  uint64_t v28 = *(void *)(*(void *)(a1[1] + 280) + 16);
  int v29 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v28 + 176))(v28);
  sub_1CD28D50C((uint64_t)a2, v29, a1 + 34, (uint64_t)(a1 + 40));
  sub_1CD28C784((_DWORD *)a1 + 104, (uint64_t)a2);
  if (byte_1EBCFEBF0) {
    sub_1CD28CD20((uint64_t)(a1 + 34), (uint64_t)a2, a1 + 8, a1 + 52);
  }
  uint64_t v30 = a1[37];
  uint64_t v31 = a1[38];
  if (v30 == v31) {
    goto LABEL_95;
  }
  do
  {
    if (!*(_DWORD *)(v30 + 24)) {
      goto LABEL_94;
    }
    uint64_t v32 = *(void *)(*(void *)((**(void **)(v30 + 16) & 0xFFFFFFFFFFFFFFF8) + 32)
                    + ((unint64_t)(**(_WORD **)((**(void **)(v30 + 16) & 0xFFFFFFFFFFFFFFF8) + 16) != 14) << 6)
                    + 16);
    if (!*(_WORD *)(v32 + 32)) {
      goto LABEL_88;
    }
    uint64_t v33 = *(unsigned int **)(v32 - 8 * *(unsigned int *)(v32 + 8));
    if (v33)
    {
      int v34 = *(unsigned __int8 *)v33;
      if ((v34 - 17) > 2)
      {
        uint64_t v33 = 0;
      }
      else
      {
        while ((v34 & 0xFE) == 0x12)
        {
          uint64_t v33 = *(unsigned int **)&v33[-2 * v33[2] + 2];
          LOBYTE(v34) = *(unsigned char *)v33;
        }
      }
    }
    if (!llvm::DISubprogram::describes((llvm::DISubprogram *)v33, (const llvm::Function *)*a2)) {
      goto LABEL_88;
    }
    unint64_t v35 = **(void **)(v30 + 16) & 0xFFFFFFFFFFFFFFF8;
    int v36 = **(unsigned __int16 **)(v35 + 16);
    uint64_t v37 = *(void *)(v35 + 32);
    if (v36 == 14)
    {
      uint64_t v38 = *(unsigned int *)(v35 + 40);
      if (v38 != 2)
      {
        uint64_t v39 = v37 + 64;
        uint64_t v40 = v37 + 32 * v38;
        goto LABEL_53;
      }
LABEL_59:
      uint64_t v42 = *(void *)(a1[1] + 520);
      v82.i64[0] = **(void **)(v30 + 16) & 0xFFFFFFFFFFFFFFF8;
      sub_1CD8A2DD8((uint64_t)(a1 + 46), v82.i64)[1] = v42;
      unint64_t v43 = **(void **)(v30 + 16) & 0xFFFFFFFFFFFFFFF8;
      int v36 = **(unsigned __int16 **)(v43 + 16);
      uint64_t v37 = *(void *)(v43 + 32);
    }
    else
    {
      uint64_t v40 = v37 + 32;
      uint64_t v39 = *(void *)(v35 + 32);
LABEL_53:
      while (*(unsigned char *)v39 || *(_DWORD *)(v39 + 4) == 0)
      {
        v39 += 32;
        if (v39 == v40) {
          goto LABEL_59;
        }
      }
    }
    BOOL v14 = v36 == 14;
    uint64_t v44 = 96;
    if (v14) {
      uint64_t v44 = 32;
    }
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(void *)(v37 + v44 + 16) + 24), *(uint64_t **)(*(void *)(v37 + v44 + 16) + 32), &v82);
    if (!LOBYTE(v83[0])) {
      goto LABEL_88;
    }
    uint64_t v45 = *(unsigned int *)(v30 + 24);
    if (!v45) {
      goto LABEL_94;
    }
    unint64_t v46 = *(uint64_t **)(v30 + 16);
    unint64_t v47 = v46;
    while (1)
    {
      uint64_t v48 = *v47;
      if ((*v47 & 4) != 0) {
        goto LABEL_87;
      }
      unint64_t v49 = v48 & 0xFFFFFFFFFFFFFFF8;
      BOOL v14 = **(unsigned __int16 **)((v48 & 0xFFFFFFFFFFFFFFF8) + 16) == 14;
      uint64_t v50 = 96;
      if (v14) {
        uint64_t v50 = 32;
      }
      if (v46 != v47) {
        break;
      }
LABEL_76:
      uint64_t v56 = *(void *)(v49 + 32);
      if (**(_WORD **)(v49 + 16) != 14)
      {
        uint64_t v58 = v56 + 32;
LABEL_80:
        while (*(unsigned char *)v56 || *(_DWORD *)(v56 + 4) == 0)
        {
          v56 += 32;
          if (v56 == v58) {
            goto LABEL_86;
          }
        }
        goto LABEL_88;
      }
      uint64_t v57 = *(unsigned int *)(v49 + 40);
      if (v57 != 2)
      {
        uint64_t v58 = v56 + 32 * v57;
        v56 += 64;
        goto LABEL_80;
      }
LABEL_86:
      uint64_t v60 = *(void *)(a1[1] + 520);
      v82.i64[0] = v49;
      sub_1CD8A2DD8((uint64_t)(a1 + 46), v82.i64)[1] = v60;
      unint64_t v46 = *(uint64_t **)(v30 + 16);
      uint64_t v45 = *(unsigned int *)(v30 + 24);
LABEL_87:
      v47 += 2;
      if (v47 == &v46[2 * v45]) {
        goto LABEL_88;
      }
    }
    uint64_t v51 = *(void *)(*(void *)(v49 + 32) + v50 + 16);
    while (1)
    {
      if ((*v46 & 4) == 0)
      {
        unint64_t v52 = *v46 & 0xFFFFFFFFFFFFFFF8;
        int v53 = **(unsigned __int16 **)(v52 + 16);
        uint64_t v54 = *(void *)(v52 + 32);
        BOOL v14 = v53 == 14;
        uint64_t v55 = 96;
        if (v14) {
          uint64_t v55 = 32;
        }
        if (sub_1CC3EF174(v51, *(void *)(v54 + v55 + 16))) {
          break;
        }
      }
      v46 += 2;
      if (v46 == v47)
      {
        unint64_t v49 = *v47 & 0xFFFFFFFFFFFFFFF8;
        goto LABEL_76;
      }
    }
LABEL_88:
    uint64_t v61 = *(unsigned int *)(v30 + 24);
    if (v61)
    {
      unint64_t v62 = *(void **)(v30 + 16);
      uint64_t v63 = 16 * v61;
      do
      {
        if ((*v62 & 4) != 0)
        {
          unint64_t v78 = *v62 & 0xFFFFFFFFFFFFFFF8;
          v79[0] = 0;
          uint64_t v64 = (uint64_t)(a1 + 49);
        }
        else
        {
          unint64_t v78 = *v62 & 0xFFFFFFFFFFFFFFF8;
          v79[0] = 0;
          uint64_t v64 = (uint64_t)(a1 + 46);
        }
        sub_1CD290568(v64, (uint64_t *)&v78, v79, (uint64_t)&v82);
        v62 += 2;
        v63 -= 16;
      }
      while (v63);
    }
LABEL_94:
    v30 += 96;
  }
  while (v30 != v31);
LABEL_95:
  uint64_t v65 = a1[43];
  for (uint64_t i = a1[44]; v65 != i; v65 += 24)
  {
    unint64_t v78 = *(void *)(v65 + 16);
    v79[0] = 0;
    sub_1CD290568((uint64_t)(a1 + 46), (uint64_t *)&v78, v79, (uint64_t)&v82);
  }
  unint64_t v78 = 0;
  uint64_t v67 = (unint64_t *)(a1 + 3);
  if (&v78 != (unint64_t *)(a1 + 3))
  {
    __int16 v68 = (unsigned __int8 *)*v67;
    if (!*v67) {
      goto LABEL_99;
    }
    int v73 = *v68;
    if ((v73 - 4) > 0x1E)
    {
      if ((v73 - 3) >= 0xFFFFFFFE) {
        unint64_t v76 = *v67;
      }
      else {
        unint64_t v76 = 0;
      }
      if ((v73 - 3) <= 0xFFFFFFFD)
      {
        if (v73 == 3) {
          *((void *)v68 + 1) = 0;
        }
        goto LABEL_99;
      }
      unint64_t v75 = v76 + 8;
LABEL_119:
      v82.i64[0] = (uint64_t)(a1 + 3);
      sub_1CC5FA668(v75 + 16, &v82);
      long long v77 = (unsigned __int8 *)v78;
      unint64_t *v67 = v78;
      if (v77) {
        llvm::MetadataTracking::retrack((uint64_t)&v78, v77, (uint64_t)(a1 + 3));
      }
    }
    else
    {
      if ((v68[1] & 0x7F) == 2 || *((_DWORD *)v68 + 3))
      {
        uint64_t v74 = *((void *)v68 + 2);
        if ((v74 & 4) != 0)
        {
          unint64_t v75 = v74 & 0xFFFFFFFFFFFFFFF8;
          if (v75) {
            goto LABEL_119;
          }
        }
      }
LABEL_99:
      unint64_t *v67 = 0;
    }
  }
  uint64_t v69 = *a1;
  a1[4] = *(void *)(a1[1] + 520);
  return (*(uint64_t (**)(uint64_t *, uint64_t ****))(v69 + 128))(a1, a2);
}

uint64_t sub_1CD290078(uint64_t result, uint64_t a2)
{
  if (!*(void *)(result + 8)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(result + 16);
  if (!*(unsigned char *)(v3 + 2108)) {
    return result;
  }
  *(void *)(result + 56) = a2;
  uint64_t v4 = *(void *)(result + 368);
  uint64_t v5 = *(unsigned int *)(result + 384);
  if (!v5) {
    goto LABEL_9;
  }
  LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (uint64_t *)(v4 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 != a2)
  {
    int v9 = 1;
    while (v8 != -4096)
    {
      int v10 = v6 + v9++;
      uint64_t v6 = v10 & (v5 - 1);
      uint64_t v8 = *(void *)(v4 + 16 * v6);
      if (v8 == a2)
      {
        uint64_t v7 = (uint64_t *)(v4 + 16 * v6);
        goto LABEL_10;
      }
    }
LABEL_9:
    uint64_t v7 = (uint64_t *)(v4 + 16 * v5);
  }
LABEL_10:
  if (v7 != (uint64_t *)(v4 + 16 * v5) && !v7[1])
  {
    uint64_t v11 = *(void *)(result + 32);
    if (!v11)
    {
      int64x2_t v12 = *(llvm::MCContext **)(v3 + 2056);
      int v13 = (llvm::MCContext *)(v3 + 8);
      if (v12) {
        BOOL v14 = v12;
      }
      else {
        BOOL v14 = v13;
      }
      uint64_t v16 = "tmp";
      __int16 v17 = 259;
      Tempuint64_t Symbol = llvm::MCContext::createTempSymbol(v14, (const llvm::Twine *)&v16, 1);
      *(void *)(v2 + 32) = TempSymbol;
      uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(*(void *)(v2 + 8) + 272) + 192))(*(void *)(*(void *)(v2 + 8) + 272), TempSymbol, 0);
      uint64_t v11 = *(void *)(v2 + 32);
    }
    v7[1] = v11;
  }
  return result;
}

uint64_t sub_1CD2901A8(uint64_t result)
{
  if (!*(void *)(result + 8)) {
    return result;
  }
  int v1 = (void *)result;
  uint64_t v2 = *(void *)(result + 16);
  if (!*(unsigned char *)(v2 + 2108)) {
    return result;
  }
  uint64_t v3 = *(void **)(result + 56);
  if ((*(unsigned char *)(v3[2] + 8) & 0x10) == 0)
  {
    *(void *)(result + 32) = 0;
    *(void *)(result + 40) = v3[3];
  }
  uint64_t v4 = *(void *)(result + 392);
  uint64_t v5 = *(unsigned int *)(result + 408);
  if (v5)
  {
    LODWORD(v6) = (v5 - 1) & ((v3 >> 4) ^ (v3 >> 9));
    uint64_t v7 = (void *)(v4 + 16 * v6);
    uint64_t v8 = (void *)*v7;
    if (v3 == (void *)*v7) {
      goto LABEL_12;
    }
    int v9 = 1;
    while (v8 != (void *)-4096)
    {
      int v10 = v6 + v9++;
      uint64_t v6 = v10 & (v5 - 1);
      uint64_t v8 = *(void **)(v4 + 16 * v6);
      if (v3 == v8)
      {
        uint64_t v7 = (void *)(v4 + 16 * v6);
        goto LABEL_12;
      }
    }
  }
  uint64_t v7 = (void *)(v4 + 16 * v5);
LABEL_12:
  if (v7 != (void *)(v4 + 16 * v5) && !v7[1])
  {
    uint64_t v11 = (llvm::MachineBasicBlock *)v3[3];
    if (*((unsigned char *)v11 + 201) && ((uint64_t v16 = (unsigned char *)v3[1], v16 == (char *)v11 + 48) || !v16))
    {
      uint64_t result = llvm::MachineBasicBlock::getEndSymbol(v11);
      v1[4] = result;
    }
    else
    {
      uint64_t result = v1[4];
      if (!result)
      {
        int64x2_t v12 = *(llvm::MCContext **)(v2 + 2056);
        int v13 = (llvm::MCContext *)(v2 + 8);
        if (v12) {
          BOOL v14 = v12;
        }
        else {
          BOOL v14 = v13;
        }
        __int16 v17 = "tmp";
        __int16 v18 = 259;
        Tempuint64_t Symbol = llvm::MCContext::createTempSymbol(v14, (const llvm::Twine *)&v17, 1);
        v1[4] = TempSymbol;
        (*(void (**)(void, uint64_t, void))(**(void **)(v1[1] + 272) + 192))(*(void *)(v1[1] + 272), TempSymbol, 0);
        uint64_t result = v1[4];
      }
    }
    v7[1] = result;
  }
  v1[7] = 0;
  return result;
}

_DWORD *sub_1CD290320(uint64_t a1, uint64_t ****a2)
{
  if (!*(void *)(a1 + 8)) {
    goto LABEL_10;
  }
  if (!*(unsigned char *)(*(void *)(a1 + 16) + 2108)) {
    goto LABEL_10;
  }
  uint64_t v4 = *a2;
  if ((*((unsigned char *)*a2 + 23) & 0x20) == 0) {
    goto LABEL_10;
  }
  uint64_t v5 = ***v4;
  uint64_t v26 = *a2;
  int v6 = *(_DWORD *)(v5 + 2496);
  if (v6)
  {
    uint64_t v7 = *(void *)(v5 + 2480);
    int v8 = v6 - 1;
    unsigned int v9 = v8 & ((v4 >> 4) ^ (v4 >> 9));
    int v10 = (uint64_t ****)(v7 + 40 * v9);
    uint64_t v11 = *v10;
    if (*v10 == v4) {
      goto LABEL_6;
    }
    __int16 v18 = 0;
    int v19 = 1;
    while (v11 != (uint64_t ***)-4096)
    {
      if (v18) {
        BOOL v20 = 0;
      }
      else {
        BOOL v20 = v11 == (uint64_t ***)-8192;
      }
      if (v20) {
        __int16 v18 = v10;
      }
      unsigned int v21 = v9 + v19++;
      unsigned int v9 = v21 & v8;
      int v10 = (uint64_t ****)(v7 + 40 * v9);
      uint64_t v11 = *v10;
      if (*v10 == v4) {
        goto LABEL_6;
      }
    }
    if (v18) {
      uint64_t v24 = v18;
    }
    else {
      uint64_t v24 = v10;
    }
  }
  else
  {
    uint64_t v24 = 0;
  }
  int v10 = (uint64_t ****)sub_1CC609054(v5 + 2480, (uint64_t)&v26, (uint64_t *)&v26, v24);
  uint64_t v25 = (uint64_t)v26;
  void v10[3] = 0;
  v10[4] = 0;
  *int v10 = (uint64_t ***)v25;
  v10[1] = (uint64_t ***)(v10 + 3);
  void v10[2] = (uint64_t ***)0x100000000;
LABEL_6:
  uint64_t v12 = *((unsigned int *)v10 + 4);
  if (v12)
  {
    int v13 = v10[1] + 1;
    uint64_t v14 = 16 * v12;
    while (*((_DWORD *)v13 - 2))
    {
      v13 += 2;
      v14 -= 16;
      if (!v14) {
        goto LABEL_10;
      }
    }
    uint64_t v22 = *v13;
    if (v22 && *(_DWORD *)(*(void *)(v22 - 8 * *(unsigned int *)(v22 + 8) + 40) + 36)) {
      (*(void (**)(uint64_t, uint64_t ****))(*(void *)a1 + 136))(a1, a2);
    }
  }
LABEL_10:
  sub_1CC0799B4((_DWORD *)(a1 + 272));
  uint64_t v15 = *(void *)(a1 + 296);
  for (uint64_t i = *(void *)(a1 + 304); i != v15; i -= 96)
  {
    uint64_t v23 = *(void **)(i - 80);
    if ((void *)(i - 64) != v23) {
      free(v23);
    }
  }
  *(void *)(a1 + 304) = v15;
  sub_1CC0799B4((_DWORD *)(a1 + 320));
  *(void *)(a1 + 352) = *(void *)(a1 + 344);
  sub_1CD290518((_DWORD *)(a1 + 368));
  sub_1CD290518((_DWORD *)(a1 + 392));

  return sub_1CC6FE80C((_DWORD *)(a1 + 416));
}

_DWORD *sub_1CD290518(_DWORD *result)
{
  if (*((void *)result + 1))
  {
    uint64_t v1 = result[4];
    if (v1 > 4 * result[2] && v1 >= 0x41)
    {
      return sub_1CBA7B248(result);
    }
    else
    {
      if (v1)
      {
        uint64_t v2 = *(void **)result;
        uint64_t v3 = 16 * v1;
        do
        {
          *uint64_t v2 = -4096;
          v2 += 2;
          v3 -= 16;
        }
        while (v3);
      }
      *((void *)result + 1) = 0;
    }
  }
  return result;
}

void *sub_1CD290568@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  if (!v8)
  {
    __int16 v18 = 0;
LABEL_15:
    uint64_t result = sub_1CD290658(a1, (uint64_t)a2, a2, v18);
    void *result = *a2;
    result[1] = *a3;
    uint64_t v9 = *(void *)a1;
    unsigned int v8 = *(_DWORD *)(a1 + 16);
    char v17 = 1;
    goto LABEL_16;
  }
  uint64_t v9 = *(void *)a1;
  unsigned int v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v8 - 1);
  uint64_t result = (void *)(*(void *)a1 + 16 * v10);
  uint64_t v12 = *result;
  if (*a2 != *result)
  {
    int v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        int v13 = result;
      }
      unsigned int v16 = v10 + v14++;
      unsigned int v10 = v16 & (v8 - 1);
      uint64_t result = (void *)(v9 + 16 * v10);
      uint64_t v12 = *result;
      if (*a2 == *result) {
        goto LABEL_11;
      }
    }
    if (v13) {
      __int16 v18 = v13;
    }
    else {
      __int16 v18 = result;
    }
    goto LABEL_15;
  }
LABEL_11:
  char v17 = 0;
LABEL_16:
  *(void *)a4 = result;
  *(void *)(a4 + ++*(_DWORD *)(result + 8) = v9 + 16 * v8;
  *(unsigned char *)(a4 + 16) = v17;
  return result;
}

void *sub_1CD290658(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1CB8465A8(a1, v7);
      char v17 = 0;
      sub_1CBA0E618(a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    uint64_t v8 = *a4;
    goto LABEL_5;
  }
  sub_1CB8465A8(a1, 2 * v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (void *)(*(void *)a1 + 16 * v11);
  uint64_t v12 = *a4;
  if (*a3 != *a4)
  {
    int v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        int v13 = a4;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a4 = (void *)(*(void *)a1 + 16 * v11);
      uint64_t v12 = *a4;
      if (v8 == *a4) {
        goto LABEL_5;
      }
    }
    if (v13) {
      a4 = v13;
    }
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

uint64_t sub_1CD29078C()
{
  int v3 = 1;
  char v1 = 1;
  uint64_t v2 = &v1;
  sub_1CD8A2CB8(&v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCFEB70, &dword_1CB82C000);
}

BOOL sub_1CD2907EC(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(*(void *)a1 + 24 * v2 - 8);
  uint64_t v4 = *(unsigned int *)(a1 + 120);
  if (v3 == v4)
  {
    *(_DWORD *)(a1 + ++*(_DWORD *)(result + 8) = v2 - 1;
  }
  else
  {
    int v6 = "debug_loc";
    __int16 v7 = 259;
    *(void *)(*(void *)a1 + 24 * *(unsigned int *)(a1 + 8) - 16) = llvm::MCContext::createTempSymbol(*(llvm::MCContext **)(a2 + 264), (const llvm::Twine *)&v6, 1);
  }
  return v3 != v4;
}

uint64_t sub_1CD290888(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 112) + 32 * *(unsigned int *)(result + 120);
  if (*(void *)(v1 - 16) == *(void *)(result + 1160))
  {
    uint64_t v2 = result;
    uint64_t result = sub_1CD8A2E38(result + 1432, *(void *)(v2 + 1432) + 24 * *(void *)(v1 - 8), *(long long **)(v2 + 1440));
    --*(_DWORD *)(v2 + 120);
  }
  return result;
}

uint64_t *sub_1CD2908F0(uint64_t *a1)
{
  if (sub_1CD2907EC(*a1, a1[1])) {
    sub_1CD299984(a1[2], a1[3]);
  }
  return a1;
}

uint64_t sub_1CD29095C(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 8);
  if (v2 >= *(_DWORD *)(a2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)a2 + 4 * v2) = *(unsigned __int16 *)(result + 12);
  unsigned int v3 = *(_DWORD *)(a2 + 12);
  unsigned int v4 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + ++*(_DWORD *)(result + 8) = v4;
  if (v4 >= v3) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)a2 + 4 * v4) = *(unsigned __int8 *)(result + 14);
  ++*(_DWORD *)(a2 + 8);
  uint64_t v5 = *(unsigned int *)(result + 24);
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 16 * v5;
    do
    {
      uint64_t v8 = *(void *)(result + 16);
      unint64_t v9 = *(unsigned int *)(a2 + 8);
      if (v9 >= *(unsigned int *)(a2 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a2 + 4 * v9) = *(unsigned __int16 *)(v8 + v6);
      unsigned int v10 = *(_DWORD *)(a2 + 12);
      unsigned int v11 = *(_DWORD *)(a2 + 8) + 1;
      *(_DWORD *)(a2 + ++*(_DWORD *)(result + 8) = v11;
      if (v11 >= v10) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a2 + 4 * v11) = *(unsigned __int16 *)(v8 + v6 + 2);
      ++*(_DWORD *)(a2 + 8);
      if (*(_WORD *)(v8 + v6 + 2) == 33)
      {
        uint64_t v13 = v6;
        uint64_t v12 = v7;
        uint64_t v14 = a2;
        uint64_t v15 = result;
        sub_1CC1312F4(a2, *(void *)(v8 + v6 + 8));
        uint64_t v7 = v12;
        uint64_t v6 = v13;
        a2 = v14;
        uint64_t result = v15;
      }
      v6 += 16;
    }
    while (v7 != v6);
  }
  return result;
}

void sub_1CD290B48(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(unsigned __int16 *)(a1 + 12);
  uint64_t v5 = (char *)llvm::dwarf::TagString((llvm::dwarf *)v4);
  sub_1CD28B000(a2, v4, v5, 0);
  if (*(unsigned char *)(a1 + 14)) {
    uint64_t v6 = "DW_CHILDREN_yes";
  }
  else {
    uint64_t v6 = "DW_CHILDREN_no";
  }
  sub_1CD28B000(a2, *(unsigned __int8 *)(a1 + 14), v6, 0);
  uint64_t v7 = *(unsigned int *)(a1 + 24);
  if (v7)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 16 * v7;
    do
    {
      unsigned int v10 = (unsigned __int16 *)(*(void *)(a1 + 16) + v8);
      unint64_t v11 = *v10;
      uint64_t v12 = (char *)llvm::dwarf::AttributeString((llvm::dwarf *)v11);
      sub_1CD28B000(a2, v11, v12, 0);
      unint64_t v13 = v10[1];
      uint64_t v14 = (char *)llvm::dwarf::FormEncodingString((llvm::dwarf *)v13);
      sub_1CD28B000(a2, v13, v14, 0);
      if (v10[1] == 33) {
        llvm::MCStreamer::emitSLEB128IntValue(*(llvm::MCStreamer **)(a2 + 272), *((void *)v10 + 1));
      }
      v8 += 16;
    }
    while (v9 != v8);
  }
  sub_1CD28B000(a2, 0, "EOM(1)", 0);

  sub_1CD28B000(a2, 0, "EOM(2)", 0);
}

uint64_t sub_1CD290C80(uint64_t a1)
{
  unsigned int v2 = *(char **)(a1 + 24);
  unsigned int v3 = *(char **)(a1 + 32);
  if (v2 != v3)
  {
    do
    {
      unint64_t v4 = *(void **)(*(void *)v2 + 16);
      if (v4 != (void *)(*(void *)v2 + 32))
      {
        uint64_t v6 = v3;
        uint64_t v7 = v2;
        free(v4);
        unsigned int v3 = v6;
        unsigned int v2 = v7;
      }
      v2 += 8;
    }
    while (v2 != v3);
    unsigned int v2 = *(char **)(a1 + 24);
  }
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  free(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_1CD290D08(uint64_t *a1, uint64_t a2)
{
  v58[16] = *MEMORY[0x1E4F143B8];
  int v53 = v55;
  uint64_t v54 = 0x2000000000;
  __int16 v4 = *(_WORD *)(a2 + 28);
  if (*(unsigned char *)(a2 + 30)) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = *(void *)(a2 + 32) == 0;
  }
  char v6 = !v5;
  uint64_t v48 = 0;
  *(_DWORD *)unint64_t v49 = 0;
  *(_WORD *)&uint64_t v49[4] = v4;
  v49[6] = v6;
  __src = v52;
  uint64_t v51 = 0xC00000000;
  uint64_t v7 = *(void **)(a2 + 8);
  if (v7)
  {
    unint64_t v8 = *v7 & 0xFFFFFFFFFFFFFFF8;
    if (v8)
    {
      unsigned int v9 = 0;
      do
      {
        uint64_t v10 = *(unsigned __int16 *)(v8 + 14);
        uint64_t v11 = *(unsigned __int16 *)(v8 + 12);
        if (v10 == 33)
        {
          uint64_t v12 = *(void *)(v8 + 16);
          if (v9 >= HIDWORD(v51)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v13 = v11 | 0x210000;
        }
        else
        {
          if (v9 >= HIDWORD(v51)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v12 = 0;
          uint64_t v13 = v11 | (v10 << 16);
        }
        uint64_t v14 = (uint64_t *)((char *)__src + 16 * v9);
        *uint64_t v14 = v13;
        v14[1] = v12;
        unsigned int v9 = v51 + 1;
        LODWORD(v51) = v51 + 1;
        uint64_t v15 = *(void *)v8;
        if ((*(void *)v8 & 4) != 0) {
          break;
        }
        unint64_t v8 = v15 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((v15 & 0xFFFFFFFFFFFFFFF8) != 0);
    }
  }
  sub_1CD29095C((uint64_t)&v48, (uint64_t)&v53);
  unint64_t v16 = sub_1CC13A6B8(v53, (uint64_t)v53 + 4 * v54);
  uint64_t v18 = a1[1] + 8 * ((*((_DWORD *)a1 + 4) - 1) & v16);
  uint64_t v19 = *(void *)v18;
  uint64_t v56 = v58;
  uint64_t v57 = 0x2000000000;
  if (v19) {
    BOOL v20 = (v19 & 1) == 0;
  }
  else {
    BOOL v20 = 0;
  }
  if (!v20) {
    goto LABEL_36;
  }
  while (1)
  {
    LOBYTE(v16) = sub_1CD292864(v16, v19, (uint64_t)&v53, v17, (uint64_t)&v56);
    if (v16) {
      break;
    }
    LODWORD(v57) = 0;
    uint64_t v19 = *(void *)v19;
    if (v19) {
      BOOL v21 = (v19 & 1) == 0;
    }
    else {
      BOOL v21 = 0;
    }
    if (!v21)
    {
      uint64_t v19 = 0;
      goto LABEL_27;
    }
  }
  uint64_t v18 = 0;
LABEL_27:
  if (v56 != v58) {
    free(v56);
  }
  if (v19)
  {
    *(_DWORD *)(a2 + 24) = *(_DWORD *)(v19 + 8);
  }
  else
  {
LABEL_36:
    uint64_t v23 = *a1;
    *(void *)(v23 + 80) = *(void *)(*a1 + 80) + 224;
    if (((*(void *)v23 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v23 + 224 > *(void *)(v23 + 8) - *(void *)v23)
    {
      unsigned int v44 = *(_DWORD *)(v23 + 24) >> 7;
      if (v44 >= 0x1E) {
        LOBYTE(v44) = 30;
      }
      uint64_t v45 = 4096 << v44;
      uint64_t v19 = (uint64_t)operator new(4096 << v44, (std::align_val_t)8uLL);
      unsigned int v46 = *(_DWORD *)(v23 + 24);
      if (v46 >= *(_DWORD *)(v23 + 28)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v23 + 16) + 8 * v46) = v19;
      ++*(_DWORD *)(v23 + 24);
      *(void *)(v23 + ++*(_DWORD *)(result + 8) = v19 + v45;
    }
    else
    {
      uint64_t v19 = (*(void *)v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)uint64_t v23 = v19 + 224;
    *(void *)uint64_t v19 = v48;
    int v24 = *(_DWORD *)&v49[3];
    *(_DWORD *)(v19 + ++*(_DWORD *)(result + 8) = *(_DWORD *)v49;
    uint64_t v25 = (_DWORD *)(v19 + 8);
    *(void *)(v19 + 16) = v19 + 32;
    *(_DWORD *)(v19 + 11) = v24;
    *(void *)(v19 + 24) = 0xC00000000;
    int v26 = v51;
    if ((uint64_t *)v19 != &v48 && v51 != 0)
    {
      if (__src == v52)
      {
        if (v51 >= 0xD) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(*(void **)(v19 + 16), __src, 16 * v51);
        *(_DWORD *)(v19 + 24) = v26;
      }
      else
      {
        *(void *)(v19 + 16) = __src;
        *(_DWORD *)(v19 + 24) = v26;
        *(_DWORD *)(v19 + 2++*(_DWORD *)(result + 8) = HIDWORD(v51);
        __src = v52;
        HIDWORD(v51) = 0;
      }
      LODWORD(v51) = 0;
    }
    int v29 = (uint64_t *)a1[4];
    unint64_t v28 = a1[5];
    if ((unint64_t)v29 < v28)
    {
      *int v29 = v19;
      uint64_t v38 = v29 + 1;
    }
    else
    {
      uint64_t v30 = (void *)a1[3];
      uint64_t v31 = v29 - v30;
      unint64_t v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 61) {
        abort();
      }
      uint64_t v33 = v28 - (void)v30;
      if (v33 >> 2 > v32) {
        unint64_t v32 = v33 >> 2;
      }
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v34 = v32;
      }
      if (v34)
      {
        if (v34 >> 61) {
          sub_1CB833614();
        }
        unint64_t v35 = (char *)operator new(8 * v34);
      }
      else
      {
        unint64_t v35 = 0;
      }
      int v36 = (uint64_t *)&v35[8 * v31];
      uint64_t v37 = &v35[8 * v34];
      uint64_t *v36 = v19;
      uint64_t v38 = v36 + 1;
      if (v29 == v30)
      {
        uint64_t v25 = (_DWORD *)(v19 + 8);
      }
      else
      {
        uint64_t v25 = (_DWORD *)(v19 + 8);
        do
        {
          uint64_t v39 = *--v29;
          *--int v36 = v39;
        }
        while (v29 != v30);
        int v29 = (uint64_t *)a1[3];
      }
      a1[3] = (uint64_t)v36;
      a1[4] = (uint64_t)v38;
      a1[5] = (uint64_t)v37;
      if (v29) {
        operator delete(v29);
      }
    }
    a1[4] = (uint64_t)v38;
    unint64_t v40 = ((unint64_t)v38 - a1[3]) >> 3;
    _DWORD *v25 = v40;
    *(_DWORD *)(a2 + 24) = v40;
    int v41 = *((_DWORD *)a1 + 4);
    unsigned int v42 = *((_DWORD *)a1 + 5) + 1;
    if (v42 > 2 * v41)
    {
      llvm::FoldingSetBase::GrowBucketCount((uint64_t)(a1 + 1), 2 * v41, (uint64_t)off_1F26498B8);
      uint64_t v56 = v58;
      uint64_t v57 = 0x2000000000;
      uint64_t v18 = a1[1] + 8 * ((*((_DWORD *)a1 + 4) - 1) & sub_1CD8A3EC8(v47, v19, (uint64_t)&v56));
      if (v56 != v58) {
        free(v56);
      }
      unsigned int v42 = *((_DWORD *)a1 + 5) + 1;
    }
    *((_DWORD *)a1 + 5) = v42;
    uint64_t v43 = *(void *)v18;
    if (!*(void *)v18) {
      uint64_t v43 = v18 | 1;
    }
    *(void *)uint64_t v19 = v43;
    *(void *)uint64_t v18 = v19;
  }
  if (__src != v52) {
    free(__src);
  }
  if (v53 != v55) {
    free(v53);
  }
  return v19;
}

void sub_1CD29125C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = (uint64_t **)(a1 + 24);
  if (*(void *)(a1 + 24) != *(void *)(a1 + 32))
  {
    (*(void (**)(void, uint64_t, void))(**(void **)(a2 + 272) + 168))(*(void *)(a2 + 272), a3, 0);
    sub_1CD2912E0(a2, v3);
  }
}

void sub_1CD2912E0(uint64_t a1, uint64_t **a2)
{
  unsigned int v3 = *a2;
  __int16 v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      uint64_t v5 = *v3++;
      sub_1CD28B000(a1, *(unsigned int *)(v5 + 8), "Abbreviation Code", 0);
      sub_1CD290B48(v5, a1);
    }
    while (v3 != v4);
  }

  sub_1CD28B000(a1, 0, "EOM(3)", 0);
}

uint64_t sub_1CD291374(unint64_t a1)
{
  unint64_t v1 = a1;
  while (1)
  {
    unsigned int v2 = *(unsigned __int16 *)(v1 + 28) - 17;
    BOOL v3 = v2 > 0x39;
    uint64_t v4 = (1 << v2) & 0x201000000000001;
    if (!v3 && v4 != 0) {
      break;
    }
    uint64_t v6 = *(void *)(v1 + 40);
    if ((v6 & 4) != 0) {
      unint64_t v1 = 0;
    }
    else {
      unint64_t v1 = v6 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  return *(void *)((*(void *)(v1 + 40) & ((uint64_t)(*(void *)(v1 + 40) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8) + 0x40)
       + *(unsigned int *)(a1 + 16);
}

unint64_t sub_1CD2913D4(unint64_t a1)
{
  if (!a1) {
    return 0;
  }
  while (1)
  {
    unsigned int v1 = *(unsigned __int16 *)(a1 + 28) - 17;
    BOOL v2 = v1 > 0x39;
    uint64_t v3 = (1 << v1) & 0x201000000000001;
    if (!v2 && v3 != 0) {
      break;
    }
    uint64_t v6 = 0;
    uint64_t v5 = *(void *)(a1 + 40);
    if ((v5 & 4) == 0)
    {
      a1 = v5 & 0xFFFFFFFFFFFFFFF8;
      if ((v5 & 0xFFFFFFFFFFFFFFF8) != 0) {
        continue;
      }
    }
    return v6;
  }
  return *(void *)(a1 + 40) & ((uint64_t)(*(void *)(a1 + 40) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
}

void sub_1CD291438(llvm::raw_ostream *this, void **a2, char *a3, size_t a4, unsigned int a5, unsigned int a6)
{
  uint64_t v12 = *((void *)this + 3);
  uint64_t v11 = (void *)*((void *)this + 4);
  if (a4 <= v12 - (uint64_t)v11)
  {
    if (a4)
    {
      memcpy(v11, a3, a4);
      uint64_t v11 = (void *)(*((void *)this + 4) + a4);
      *((void *)this + 4) = v11;
    }
  }
  else
  {
    llvm::raw_ostream::write(this, a3, a4);
    uint64_t v11 = (void *)*((void *)this + 4);
  }
  if (*((void *)this + 3) - (void)v11 > 7uLL)
  {
    void *v11 = 0x203A657A6953203ALL;
    *((void *)this + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(this, ": Size: ", 8uLL);
  }
  sub_1CD098D14(this, a5, 0, 0, 0);
  uint64_t v13 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v13)
  {
    llvm::raw_ostream::write(this, "\n", 1uLL);
  }
  else
  {
    unsigned char *v13 = 10;
    ++*((void *)this + 4);
  }
  size_t v14 = a6;
  if (a6 >= 0x17)
  {
    if ((a6 | 7) == 0x17) {
      uint64_t v16 = (a6 & 0xFFFFFFF8) + 8;
    }
    else {
      uint64_t v16 = a6 | 7;
    }
    p_b = (void **)operator new(v16 + 1);
    size_t v31 = v14;
    uint64_t v32 = v16 - 0x7FFFFFFFFFFFFFFFLL;
    __b = p_b;
  }
  else
  {
    HIBYTE(v32) = a6;
    p_b = (void **)&__b;
    if (!a6) {
      goto LABEL_17;
    }
  }
  memset(p_b, 32, v14);
LABEL_17:
  *((unsigned char *)p_b + v14) = 0;
  if (*a2)
  {
    unint64_t v17 = **a2 & 0xFFFFFFFFFFFFFFF8;
    if (v17)
    {
      unsigned int v18 = 0;
      do
      {
        if (v32 >= 0) {
          uint64_t v19 = (const char *)&__b;
        }
        else {
          uint64_t v19 = (const char *)__b;
        }
        if (v32 >= 0) {
          size_t v20 = HIBYTE(v32) & 0x7F;
        }
        else {
          size_t v20 = v31;
        }
        llvm::raw_ostream::write(this, v19, v20);
        BOOL v21 = (_DWORD *)*((void *)this + 4);
        if (*((void *)this + 3) - (void)v21 > 3uLL)
        {
          *BOOL v21 = 1533766722;
          *((void *)this + 4) += 4;
        }
        else
        {
          llvm::raw_ostream::write(this, "Blk[", 4uLL);
        }
        sub_1CD098D14(this, v18, 0, 0, 0);
        uint64_t v22 = (unsigned char *)*((void *)this + 4);
        if (*((unsigned char **)this + 3) == v22)
        {
          llvm::raw_ostream::write(this, "]", 1uLL);
          uint64_t v23 = (_WORD *)*((void *)this + 4);
        }
        else
        {
          *uint64_t v22 = 93;
          uint64_t v23 = (_WORD *)(*((void *)this + 4) + 1);
          *((void *)this + 4) = v23;
        }
        if (*((void *)this + 3) - (void)v23 > 1uLL)
        {
          *uint64_t v23 = 8224;
          int v24 = (unsigned char *)(*((void *)this + 4) + 2);
          *((void *)this + 4) = v24;
        }
        else
        {
          llvm::raw_ostream::write(this, "  ", 2uLL);
          int v24 = (unsigned char *)*((void *)this + 4);
        }
        int v26 = llvm::dwarf::FormEncodingString((llvm::dwarf *)*(unsigned __int16 *)(v17 + 14));
        size_t v27 = v25;
        if (v25 <= *((void *)this + 3) - (void)v24)
        {
          if (v25)
          {
            memcpy(v24, v26, v25);
            int v24 = (unsigned char *)(*((void *)this + 4) + v27);
            *((void *)this + 4) = v24;
          }
        }
        else
        {
          llvm::raw_ostream::write(this, v26, v25);
          int v24 = (unsigned char *)*((void *)this + 4);
        }
        if (*((unsigned char **)this + 3) == v24)
        {
          llvm::raw_ostream::write(this, " ", 1uLL);
        }
        else
        {
          *int v24 = 32;
          ++*((void *)this + 4);
        }
        sub_1CD8A3258(v17 + 8, this);
        unint64_t v28 = (unsigned char *)*((void *)this + 4);
        if (*((unsigned char **)this + 3) == v28)
        {
          llvm::raw_ostream::write(this, "\n", 1uLL);
        }
        else
        {
          unsigned char *v28 = 10;
          ++*((void *)this + 4);
        }
        uint64_t v29 = *(void *)v17;
        if ((*(void *)v17 & 4) != 0) {
          break;
        }
        ++v18;
        unint64_t v17 = v29 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((v29 & 0xFFFFFFFFFFFFFFF8) != 0);
    }
  }
  if (SHIBYTE(v32) < 0) {
    operator delete(__b);
  }
}

uint64_t sub_1CD29181C(uint64_t a1, unsigned int *a2, uint64_t *a3, int a4)
{
  sub_1CD290D08(a3, a1);
  *(_DWORD *)(a1 + 16) = a4;
  unint64_t v8 = *(unsigned int *)(a1 + 24);
  LODWORD(v9) = a4;
  do
  {
    uint64_t v9 = (v9 + 1);
    BOOL v10 = v8 > 0x7F;
    v8 >>= 7;
  }
  while (v10);
  uint64_t v11 = *(void **)(a1 + 8);
  if (v11)
  {
    unint64_t v12 = *v11 & 0xFFFFFFFFFFFFFFF8;
    if (v12)
    {
      do
      {
        uint64_t v9 = sub_1CD291918((int *)(v12 + 8), a2) + v9;
        uint64_t v13 = *(void *)v12;
        if ((*(void *)v12 & 4) != 0) {
          break;
        }
        unint64_t v12 = v13 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((v13 & 0xFFFFFFFFFFFFFFF8) != 0);
    }
  }
  size_t v14 = *(void **)(a1 + 32);
  if (*(unsigned char *)(a1 + 30))
  {
    if (!v14)
    {
LABEL_15:
      uint64_t v9 = (v9 + 1);
      goto LABEL_9;
    }
LABEL_11:
    uint64_t v16 = (uint64_t *)(*v14 & 0xFFFFFFFFFFFFFFF8);
    if (v16)
    {
      do
      {
        uint64_t v9 = sub_1CD29181C(v16, a2, a3, v9);
        uint64_t v17 = *v16;
        if ((*v16 & 4) != 0) {
          break;
        }
        uint64_t v16 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFFFF8);
      }
      while ((v17 & 0xFFFFFFFFFFFFFFF8) != 0);
      a4 = *(_DWORD *)(a1 + 16);
    }
    goto LABEL_15;
  }
  if (v14) {
    goto LABEL_11;
  }
LABEL_9:
  *(_DWORD *)(a1 + 20) = v9 - a4;
  return v9;
}

uint64_t sub_1CD291918(int *a1, unsigned int *a2)
{
  int v3 = *a1;
  uint64_t result = 4;
  switch(v3)
  {
    case 2:
      int v10 = *((unsigned __int16 *)a1 + 3);
      if (v10 == 14)
      {
        if (*((unsigned char *)a2 + 4)) {
          goto LABEL_25;
        }
        if ((*a2 & 0xFF000000) != 0) {
          uint64_t result = 8;
        }
        else {
          uint64_t result = 4;
        }
        if (!(unsigned __int16)*a2 || (*a2 & 0xFF0000) == 0)
        {
          LODWORD(result) = 0;
          unint64_t v11 = *(void *)((*((void *)a1 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
          do
          {
            uint64_t result = (result + 1);
            BOOL v12 = v11 >= 0x80;
            v11 >>= 7;
          }
          while (v12);
        }
      }
      else
      {
        uint64_t v23 = *(unsigned int *)((*((void *)a1 + 1) & 0xFFFFFFFFFFFFFFF8) + 24);
        uint64_t result = sub_1CD292614(&v23, *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32), v10);
      }
      break;
    case 3:
    case 6:
      int v8 = *((unsigned __int16 *)a1 + 3);
      if (v8 != 6)
      {
        if (v8 != 23) {
          goto LABEL_52;
        }
        goto LABEL_25;
      }
      uint64_t result = 4;
      break;
    case 4:
      int v9 = *((unsigned __int16 *)a1 + 3);
      if (v9 == 1)
      {
        uint64_t result = *((unsigned __int8 *)a2 + 2);
      }
      else
      {
        if (v9 > 13) {
LABEL_25:
        }
          BOOL v13 = *((unsigned char *)a2 + 3) == 0;
        else {
          BOOL v13 = v9 == 6;
        }
        if (v13) {
          uint64_t result = 4;
        }
        else {
          uint64_t result = 8;
        }
      }
      break;
    case 5:
      return result;
    case 7:
      int v7 = *((unsigned __int16 *)a1 + 3);
      uint64_t result = sub_1CD2926A4((uint64_t)(a1 + 2), (uint64_t)a2, v7);
      break;
    case 8:
      uint64_t v20 = *((void *)a1 + 1);
      int v21 = *((unsigned __int16 *)a1 + 3);
      uint64_t result = sub_1CD8A3858(v20, v21);
      break;
    case 9:
      uint64_t v15 = *((void *)a1 + 1);
      int v16 = *((unsigned __int16 *)a1 + 3);
      if (v16 != 24)
      {
        switch(v16)
        {
          case 4:
            return (*(_DWORD *)(v15 + 8) + 4);
          case 5:
          case 6:
          case 7:
          case 8:
            __break(1u);
            JUMPOUT(0x1CD291BD0);
          case 9:
            break;
          case 10:
            int v19 = *(_DWORD *)(v15 + 8);
            goto LABEL_43;
          default:
            return (*(_DWORD *)(v15 + 8) + 2);
        }
      }
      LODWORD(result) = *(_DWORD *)(v15 + 8);
      unint64_t v17 = result;
      do
      {
        uint64_t result = (result + 1);
        BOOL v12 = v17 >= 0x80;
        v17 >>= 7;
      }
      while (v12);
      break;
    case 10:
      int v14 = *((unsigned __int16 *)a1 + 3);
      uint64_t result = 4;
      if (v14 == 23)
      {
        if (*((unsigned char *)a2 + 3)) {
          uint64_t result = 8;
        }
        else {
          uint64_t result = 4;
        }
      }
      else if (v14 != 6)
      {
        if (v14 == 7)
        {
LABEL_52:
          uint64_t result = 8;
        }
        else
        {
          LODWORD(result) = 0;
          unint64_t v22 = *((void *)a1 + 1);
          do
          {
            uint64_t result = (result + 1);
            BOOL v12 = v22 >= 0x80;
            v22 >>= 7;
          }
          while (v12);
        }
      }
      break;
    case 11:
      int v19 = *(_DWORD *)(*((void *)a1 + 1) + 8);
LABEL_43:
      uint64_t result = (v19 + 1);
      break;
    case 12:
      unint64_t v18 = **((void **)a1 + 1);
      LODWORD(result) = 4;
      do
      {
        uint64_t result = (result + 1);
        BOOL v12 = v18 >= 0x80;
        v18 >>= 7;
      }
      while (v12);
      break;
    default:
      int v5 = *((unsigned __int16 *)a1 + 3);
      unint64_t v6 = *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32);
      uint64_t result = sub_1CD292614((uint64_t *)a1 + 1, v6, v5);
      break;
  }
  return result;
}

void sub_1CD291C20(uint64_t a1, uint64_t a2)
{
  switch(*(_DWORD *)a1)
  {
    case 1:
      int v3 = *(unsigned __int16 *)(a1 + 6);
      uint64_t v4 = (uint64_t *)(a1 + 8);
      sub_1CD2923C0(v4, (void *)a2, v3);
      return;
    case 2:
      int v18 = *(unsigned __int16 *)(a1 + 6);
      if (v18 == 14)
      {
        if (*(unsigned char *)(*(void *)(a2 + 256) + 424))
        {
          uint64_t v13 = *(void *)((*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8) + 8);
          if (*(unsigned char *)(*(void *)(*(void *)(a2 + 272) + 8) + 1626)) {
            unsigned int v14 = 8;
          }
          else {
            unsigned int v14 = 4;
          }
          uint64_t v16 = a2;
          unint64_t v17 = 0;
          goto LABEL_79;
        }
        uint64_t v52 = *(void *)((*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8) + 16);
        int v18 = 14;
      }
      else
      {
        uint64_t v52 = *(unsigned int *)((*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8) + 24);
      }
      sub_1CD2923C0(&v52, (void *)a2, v18);
      return;
    case 3:
      int v43 = *(unsigned __int16 *)(a1 + 6);
      uint64_t v44 = *(void *)(a1 + 8);
      sub_1CD8A36E0(v44, (void *)a2, v43);
      return;
    case 4:
      int v12 = *(unsigned __int16 *)(a1 + 6);
      uint64_t v13 = *(void *)(a1 + 8);
      if (v12 == 1)
      {
        unsigned int v14 = (((*(_DWORD *)(*(void *)(*(void *)(a2 + 248) + 248) + 4) << 13)
                                             + 57344) >> 16);
      }
      else if (*(unsigned __int16 *)(a1 + 6) > 0xDu)
      {
        if (*(unsigned char *)(*(void *)(*(void *)(a2 + 272) + 8) + 1626)) {
          unsigned int v14 = 8;
        }
        else {
          unsigned int v14 = 4;
        }
      }
      else if (v12 == 6)
      {
        unsigned int v14 = 4;
      }
      else
      {
        unsigned int v14 = 8;
      }
      BOOL v15 = v12 != 1;
      uint64_t v16 = a2;
      unint64_t v17 = 0;
      goto LABEL_14;
    case 5:
      unint64_t v40 = *(unsigned int *)(*(void *)(*(void *)(**(void **)(a1 + 8) + 568)
                                        + 16 * *(void *)(*(void *)(a1 + 8) + 8)
                                        + 8)
                            + 16);
      int v41 = *(llvm::MCStreamer **)(a2 + 272);
      unsigned int v42 = 4;
      goto LABEL_55;
    case 6:
      unint64_t v11 = *(void (**)(void))(**(void **)(a2 + 272) + 840);
      v11();
      return;
    case 7:
      int v5 = (unint64_t *)(a1 + 8);
      int v6 = *(unsigned __int16 *)(a1 + 6);
      if ((v6 - 17) < 4)
      {
        int v7 = *(void **)(a2 + 272);
        uint64_t v8 = *(unsigned int *)(*v5 + 16);
        int v9 = ((*(_DWORD *)(*(void *)(*(void *)(a2 + 248) + 248) + 4) << 13) + 57344) & 0xFF0000 | (*(unsigned __int8 *)(v7[1] + 1626) << 24) | *(unsigned __int16 *)(v7[1] + 1624);
        WORD2(v52) = *(unsigned __int8 *)(*(void *)(a2 + 256) + 424);
        LODWORD(v52) = v9;
        uint64_t v10 = sub_1CD2926A4(a1 + 8, (uint64_t)&v52, v6);
        (*(void (**)(void *, uint64_t, uint64_t))(*v7 + 520))(v7, v8, v10);
        return;
      }
      if (v6 != 16)
      {
        unint64_t v40 = *(unsigned int *)(*v5 + 16);
        goto LABEL_84;
      }
      unint64_t v25 = *v5;
      unint64_t v26 = v25;
      while (1)
      {
        unsigned int v27 = *(unsigned __int16 *)(v26 + 28) - 17;
        BOOL v28 = v27 > 0x39;
        uint64_t v29 = (1 << v27) & 0x201000000000001;
        if (!v28 && v29 != 0) {
          break;
        }
        uint64_t v31 = *(void *)(v26 + 40);
        if ((v31 & 4) != 0) {
          unint64_t v26 = 0;
        }
        else {
          unint64_t v26 = v31 & 0xFFFFFFFFFFFFFFF8;
        }
      }
      uint64_t v32 = (llvm::MCConstantExpr *)(*(void *)((*(void *)(v26 + 40) & ((uint64_t)(*(void *)(v26 + 40) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)
                                               + 0x40)
                                   + *(unsigned int *)(v25 + 16));
      while (1)
      {
        unsigned int v33 = *(unsigned __int16 *)(v25 + 28) - 17;
        BOOL v28 = v33 > 0x39;
        uint64_t v34 = (1 << v33) & 0x201000000000001;
        if (!v28 && v34 != 0) {
          break;
        }
        uint64_t v36 = *(void *)(v25 + 40);
        if ((v36 & 4) != 0) {
          unint64_t v25 = 0;
        }
        else {
          unint64_t v25 = v36 & 0xFFFFFFFFFFFFFFF8;
        }
      }
      unint64_t v37 = *(void *)(v25 + 40) & ((uint64_t)(*(void *)(v25 + 40) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v38 = (*(uint64_t (**)(unint64_t))(*(void *)v37 + 16))(v37);
      if (v38)
      {
        uint64_t v48 = v38;
        int v49 = sub_1CD2871DC((void *)a2);
        if ((v49 & 0xFF000000) != 0) {
          char v50 = 8;
        }
        else {
          char v50 = 4;
        }
        if ((unsigned __int16)v49 == 2) {
          unsigned __int8 v51 = BYTE2(v49);
        }
        else {
          unsigned __int8 v51 = v50;
        }
        unsigned int v14 = v51;
        uint64_t v16 = a2;
        uint64_t v13 = v48;
        unint64_t v17 = v32;
LABEL_79:
        BOOL v15 = 1;
LABEL_14:
        sub_1CD284FE8(v16, v13, v17, v14, v15);
      }
      else
      {
        uint64_t v39 = *(void (**)(void))(**(void **)(a2 + 272) + 520);
        v39();
      }
      break;
    case 8:
      int v46 = *(unsigned __int16 *)(a1 + 6);
      uint64_t v47 = *(void *)(a1 + 8);
      sub_1CD8A378C(v47, a2, v46);
      return;
    case 9:
      uint64_t v22 = *(void *)(a1 + 8);
      if (*(_WORD *)(a1 + 6) != 24)
      {
        switch(*(_WORD *)(a1 + 6))
        {
          case 4:
            sub_1CD284FB0(a2, *(_DWORD *)(v22 + 8));
            goto LABEL_27;
          case 5:
          case 6:
          case 7:
          case 8:
            __break(1u);
            JUMPOUT(0x1CD292370);
          case 9:
            break;
          case 0xA:
            sub_1CD284F40(a2, *(_DWORD *)(v22 + 8));
            goto LABEL_27;
          default:
            sub_1CD284F78(a2, *(_DWORD *)(v22 + 8));
            goto LABEL_27;
        }
      }
      llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(a2 + 272), *(unsigned int *)(v22 + 8), 0);
LABEL_27:
      if (*(void *)v22)
      {
        uint64_t v23 = (uint64_t *)(**(void **)v22 & 0xFFFFFFFFFFFFFFF8);
        if (v23)
        {
          do
          {
            sub_1CD291C20(v23 + 1, a2);
            uint64_t v24 = *v23;
            if ((*v23 & 4) != 0) {
              break;
            }
            uint64_t v23 = (uint64_t *)(v24 & 0xFFFFFFFFFFFFFFF8);
          }
          while ((v24 & 0xFFFFFFFFFFFFFFF8) != 0);
        }
      }
      return;
    case 0xA:
      if (*(_WORD *)(a1 + 6) == 34)
      {
        unint64_t v40 = *(void *)(a1 + 8);
LABEL_84:
        int v41 = *(llvm::MCStreamer **)(a2 + 272);
        unsigned int v42 = 0;
LABEL_55:
        llvm::MCStreamer::emitULEB128IntValue(v41, v40, v42);
      }
      else
      {
        uint64_t v19 = *(void *)(a2 + 576);
        uint64_t v20 = *(llvm::MCSymbol **)(*(void *)(v19 + 1184) + 24 * *(void *)(a1 + 8) + 8);
        char v21 = *(unsigned char *)(v19 + 3549);
        sub_1CD28B2B4(a2, v20, v21);
      }
      break;
    case 0xB:
      (*(void (**)(void, void, void))(**(void **)(a2 + 272) + 488))(*(void *)(a2 + 272), **(void **)(a1 + 8), *(void *)(*(void *)(a1 + 8) + 8));
      sub_1CD284F40(a2, 0);
      return;
    case 0xC:
      llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(a2 + 272), **(void **)(a1 + 8), 0);
      sub_1CD2871DC((void *)a2);
      uint64_t v45 = *(void (**)(void))(**(void **)(a2 + 272) + 840);
      v45();
      return;
    default:
      return;
  }
}

void sub_1CD2923C0(uint64_t *a1, void *a2, int a3)
{
  switch(a3)
  {
    case 1:
    case 5:
    case 6:
    case 7:
    case 11:
    case 12:
    case 14:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 23:
    case 28:
    case 29:
    case 31:
    case 32:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 44:
      goto LABEL_2;
    case 2:
    case 3:
    case 4:
    case 8:
    case 9:
    case 10:
    case 22:
    case 24:
    case 30:
    case 34:
    case 43:
      __break(1u);
      JUMPOUT(0x1CD292544);
    case 13:
      uint64_t v8 = *a1;
      int v9 = (llvm::MCStreamer *)a2[34];
      llvm::MCStreamer::emitSLEB128IntValue(v9, v8);
      return;
    case 15:
    case 21:
    case 26:
    case 27:
    case 35:
      goto LABEL_12;
    case 25:
    case 33:
      int v7 = *(void (**)(void))(*(void *)a2[34] + 152);
      v7();
      return;
    default:
      if ((a3 - 7937) >= 2)
      {
LABEL_2:
        int v3 = (void *)a2[34];
        uint64_t v4 = *a1;
        uint64_t v5 = sub_1CD292614(a1, ((unint64_t)*(unsigned __int8 *)(v3[1] + 1626) << 24) | ((unint64_t)*(unsigned __int8 *)(a2[32] + 424) << 32) | *(unsigned __int16 *)(v3[1] + 1624) | ((*(_DWORD *)(*(void *)(a2[31] + 248) + 4) << 13) + 57344) & 0xFF0000, a3);
        int v6 = *(void (**)(void *, uint64_t, uint64_t))(*v3 + 520);
        v6(v3, v4, v5);
      }
      else
      {
LABEL_12:
        unint64_t v10 = *a1;
        unint64_t v11 = (llvm::MCStreamer *)a2[34];
        llvm::MCStreamer::emitULEB128IntValue(v11, v10, 0);
      }
      return;
  }
}

uint64_t sub_1CD292614(uint64_t *a1, uint64_t a2, int a3)
{
  LOWORD(result) = llvm::dwarf::getFixedFormByteSize(a3, a2 & 0xFFFFFFFFFFFFLL);
  if ((unsigned __int16)result > 0xFFu) {
    return result;
  }
  uint64_t v6 = *a1;
  if (a3 == 13)
  {
    LODWORD(result) = 0;
    uint64_t v8 = v6 >> 63;
    do
    {
      do
      {
        int v9 = v6;
        v6 >>= 7;
        uint64_t result = (result + 1);
      }
      while (v6 != v8);
    }
    while (((v9 ^ v8) & 0x40) != 0);
  }
  else
  {
    LODWORD(result) = 0;
    do
    {
      uint64_t result = (result + 1);
      BOOL v7 = (unint64_t)v6 >= 0x80;
      uint64_t v6 = (unint64_t)v6 >> 7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1CD2926A4(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 19) {
    return 4;
  }
  uint64_t result = 1;
  switch(a3)
  {
    case 17:
      return result;
    case 18:
      uint64_t result = 2;
      break;
    case 19:
      __break(1u);
      goto LABEL_13;
    case 20:
LABEL_13:
      uint64_t result = 8;
      break;
    case 21:
      LODWORD(result) = 0;
      unint64_t v7 = *(unsigned int *)(*(void *)a1 + 16);
      do
      {
        uint64_t result = (result + 1);
        BOOL v8 = v7 >= 0x80;
        v7 >>= 7;
      }
      while (v8);
      break;
    default:
      if (*(unsigned char *)(a2 + 3)) {
        char v5 = 8;
      }
      else {
        char v5 = 4;
      }
      if (*(_WORD *)a2 == 2) {
        unsigned __int8 v6 = *(unsigned char *)(a2 + 2);
      }
      else {
        unsigned __int8 v6 = v5;
      }
      uint64_t result = v6;
      break;
  }
  return result;
}

uint64_t sub_1CD29277C(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2)
  {
    if (*(void *)a1 && (unint64_t v4 = **(void **)a1 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      LODWORD(v2) = 0;
      do
      {
        uint64_t v2 = v2 + sub_1CD291918((int *)(v4 + 8), a2);
        *(_DWORD *)(a1 + ++*(_DWORD *)(result + 8) = v2;
        uint64_t v6 = *(void *)v4;
        if ((*(void *)v4 & 4) != 0) {
          break;
        }
        unint64_t v4 = v6 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((v6 & 0xFFFFFFFFFFFFFFF8) != 0);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t sub_1CD2927F8(uint64_t result, uint64_t a2)
{
  switch(*(_DWORD *)result)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
      *(void *)(result + ++*(_DWORD *)(result + 8) = *(void *)(a2 + 8);
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_1CD292864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1CD29095C(a2, a5);
  uint64_t v7 = *(unsigned int *)(a3 + 8);
  return v7 == *(_DWORD *)(a5 + 8) && memcmp(*(const void **)a5, *(const void **)a3, 4 * v7) == 0;
}

void *sub_1CD2928C4(int *a1, unint64_t a2)
{
  uint64_t v2 = a2;
  LOBYTE(__src[0]) = a2 & 0x7F;
  if (a2 >= 0x40)
  {
    char v4 = a2;
    do
    {
      if (v2 >> 7 == -1 && (v4 & 0x40) != 0) {
        break;
      }
      LOBYTE(__src[0]) = v4 | 0x80;
      llvm::MD5::update(a1, __src, 1uLL);
      char v4 = v2 >> 7;
      LOBYTE(__src[0]) = v4 & 0x7F;
      unint64_t v6 = (unint64_t)v2 >> 13;
      v2 >>= 7;
    }
    while (v6);
  }
  return llvm::MD5::update(a1, __src, 1uLL);
}

void *sub_1CD292B3C(void *a1)
{
  (*(void (**)(void *))(*a1 + 72))(a1);
  uint64_t result = *(void **)(a1[1] + 280);
  if (result[64] != result[65])
  {
    return llvm::MachineFunction::tidyLandingPads(result, 0, 1);
  }
  return result;
}

uint64_t sub_1CD292BBC(uint64_t result)
{
  if (*(unsigned char *)(result + 24))
  {
    uint64_t v1 = *(void *)(result + 8);
    unsigned int v2 = *(_DWORD *)(*(void *)(v1 + 280) + 640);
    if (v2 > 3 || v2 == 2) {
      return llvm::MCStreamer::emitCFIEndProc(*(llvm::MCStreamer **)(v1 + 272));
    }
  }
  return result;
}

void sub_1CD292BE8()
{
}

uint64_t sub_1CD292BFC(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = *(void *)(v2 + 256);
  int v4 = *(_DWORD *)(v3 + 412);
  BOOL v5 = v4 == 1 || v4 == 3;
  if (v5 || v4 == 4 && ((int v9 = *(_DWORD *)(v3 + 420)) != 0 ? (v10 = v9 == 6) : (v10 = 1), !v10))
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v2 + 248) + 24))(*(void *)(v2 + 248));
    if ((*(unsigned char *)(result + 948) & 0x80) != 0)
    {
      uint64_t v6 = *(void *)(v1 + 16);
      uint64_t v7 = *(const llvm::GlobalValue ***)(v6 + 2080);
      BOOL v8 = *(const llvm::GlobalValue ***)(v6 + 2088);
      if (v7 != v8)
      {
        do
        {
          uint64_t v11 = result;
          int v12 = v7;
          if (*v7)
          {
            uint64_t v13 = sub_1CD27B4E0(*(void *)(v1 + 8), *v7);
            uint64_t v14 = *(void *)(v1 + 8);
            uint64_t v15 = *(void *)(v14 + 272);
            uint64_t v16 = sub_1CD27A518(v14);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, v15, v16, v13);
          }
          uint64_t v7 = v12 + 1;
          uint64_t result = v11;
        }
        while (v12 + 1 != v8);
      }
    }
  }
  return result;
}

uint64_t sub_1CD292D18(uint64_t a1, uint64_t *a2)
{
  *(unsigned char *)(a1 + 2++*(_DWORD *)(result + 8) = 0;
  *(unsigned char *)(a1 + 26) = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[64];
  uint64_t v6 = a2[65];
  int v7 = sub_1CD27D82C(*(void **)(a1 + 8), a2);
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 248) + 24))(*(void *)(*(void *)(a1 + 8) + 248));
  int v9 = *(_DWORD *)(v8 + 948);
  if ((*(_WORD *)(v4 + 18) & 8) == 0)
  {
    BOOL v10 = 0;
    goto LABEL_11;
  }
  int v11 = *(_DWORD *)(v4 + 20);
  if ((v11 & 0x40000000) != 0) {
    int v12 = *(llvm::Value ***)(v4 - 8);
  }
  else {
    int v12 = (llvm::Value **)(v4 - 32 * (v11 & 0x7FFFFFF));
  }
  uint64_t v13 = llvm::Value::stripPointerCasts(*v12);
  if (*((unsigned char *)v13 + 16)) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = v13;
  }
  if ((*(_WORD *)(v4 + 18) & 8) == 0 || llvm::classifyEHPersonality(v10, v14))
  {
LABEL_11:
    BOOL v15 = 0;
    *(unsigned char *)(a1 + 27) = 0;
    if (v5 == v6 || v9 == 255) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v30 = v4 + 112;
  if (llvm::AttributeList::getUWTableKind((llvm::AttributeList *)(v4 + 112))
    || !*(void *)v30
    || (*(unsigned char *)(*(void *)v30 + 16) & 0x20) == 0)
  {
    *(unsigned char *)(a1 + 27) = 1;
LABEL_13:
    BOOL v15 = v10 != 0;
    goto LABEL_14;
  }
  __int16 v31 = *(_WORD *)(v4 + 18);
  *(unsigned char *)(a1 + 27) = (v31 & 8) != 0;
  BOOL v33 = v5 == v6 || v9 == 255;
  if ((v31 & 8) != 0 || !v33) {
    goto LABEL_13;
  }
  BOOL v15 = 0;
LABEL_14:
  LOBYTE(v16) = 0;
  *(unsigned char *)(a1 + 26) = v15;
  BOOL v17 = *(_DWORD *)(v8 + 952) != 255 && v15;
  *(unsigned char *)(a1 + 2++*(_DWORD *)(result + 8) = v17;
  uint64_t v18 = a2[4];
  uint64_t v19 = *(void *)(v18 + 2056);
  uint64_t v20 = v18 + 8;
  if (v19) {
    uint64_t v20 = v19;
  }
  uint64_t v21 = *(void *)(v20 + 152);
  switch(*(_DWORD *)(v21 + 412))
  {
    case 0:
      uint64_t v22 = *(void *)(a1 + 8);
      uint64_t v23 = *(void *)(v22 + 256);
      if (*(_DWORD *)(v23 + 412)) {
        goto LABEL_36;
      }
      int v16 = *(unsigned __int8 *)(v23 + 416);
      if (v16) {
        LOBYTE(v16) = *(_DWORD *)(v22 + 592) == 2 && v7 != 0;
      }
      break;
    case 1:
    case 3:
      goto LABEL_20;
    case 4:
      int v25 = *(_DWORD *)(v21 + 420);
      if (v25) {
        BOOL v26 = v25 == 6;
      }
      else {
        BOOL v26 = 1;
      }
      if (v26)
      {
LABEL_36:
        LOBYTE(v16) = 0;
      }
      else
      {
LABEL_20:
        if (v7) {
          LOBYTE(v16) = 1;
        }
        else {
          LOBYTE(v16) = v15;
        }
      }
      break;
    default:
      break;
  }
  *(unsigned char *)(a1 + 24) = v16;
  uint64_t v27 = a2[41];
  BOOL v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)()))(*(void *)a1 + 64);

  return v28(a1, v27, sub_1CD292F80);
}

void sub_1CD292F84(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  if (*(unsigned char *)(a1 + 24))
  {
    if (!*(unsigned char *)(a1 + 25))
    {
      uint64_t v6 = *(void *)(a1 + 8);
      int v7 = *(_DWORD *)(v6 + 592);
      if (v7 == 2 || (*(_WORD *)(*(void *)(v6 + 248) + 1064) & 0x10) != 0) {
        (*(void (**)(void, BOOL, uint64_t))(**(void **)(v6 + 272) + 864))(*(void *)(v6 + 272), v7 == 1, 1);
      }
      *(unsigned char *)(a1 + 25) = 1;
    }
    llvm::MCStreamer::emitCFIStartProc(*(void *)(*(void *)(a1 + 8) + 272), 0, 0);
    if (*(unsigned char *)(a1 + 26))
    {
      uint64_t v8 = **(void **)(a2 + 32);
      int v9 = *(_DWORD *)(v8 + 20);
      if ((v9 & 0x40000000) != 0) {
        BOOL v10 = *(llvm::Value ***)(v8 - 8);
      }
      else {
        BOOL v10 = (llvm::Value **)(v8 - 32 * (v9 & 0x7FFFFFF));
      }
      int v11 = llvm::Value::stripPointerCasts(*v10);
      if (*((unsigned char *)v11 + 16)) {
        int v12 = 0;
      }
      else {
        int v12 = (const Function *)v11;
      }
      if (*(unsigned char *)(a1 + 27)) {
        llvm::MachineModuleInfo::addPersonality(*(llvm::MachineModuleInfo **)(a1 + 16), v12);
      }
      uint64_t v13 = (unsigned int *)(*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 248) + 24))(*(void *)(*(void *)(a1 + 8) + 248));
      (*(void (**)(unsigned int *, const Function *, void, void))(*(void *)v13 + 128))(v13, v12, *(void *)(*(void *)(a1 + 8) + 248), *(void *)(a1 + 16));
      (*(void (**)(void))(**(void **)(*(void *)(a1 + 8) + 272) + 912))();
      if (*(unsigned char *)(a1 + 28))
      {
        uint64_t v14 = *(void *)(*(void *)(a1 + 8) + 272);
        uint64_t v15 = a3();
        uint64_t v16 = v13[238];
        BOOL v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 920);
        v17(v14, v15, v16);
      }
    }
  }
}

uint64_t *sub_1CD2931BC(uint64_t *a1)
{
  if (*((unsigned char *)a1 + 26)) {
    return (uint64_t *)sub_1CD8B1A4C(a1);
  }
  return a1;
}

uint64_t sub_1CD2931CC(uint64_t a1, int a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  unsigned int v8 = *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(a5 + 8) + 272) + 8) + 1624);
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = (a1 + 8) | 4;
  *(_OWORD *)(a1 + 16) = 0u;
  BOOL v9 = v8 > 4 && a7 == 0;
  *(_DWORD *)(a1 + 32) = -1;
  if (v9) {
    __int16 v10 = 74;
  }
  else {
    __int16 v10 = 17;
  }
  *(_WORD *)(a1 + 36) = v10;
  *(unsigned char *)(a1 + 3++*(_DWORD *)(result + 8) = 0;
  *(_OWORD *)(a1 + 40) = 0uLL;
  *(_OWORD *)(a1 + 56) = 0uLL;
  *(void *)(a1 + 4++*(_DWORD *)(result + 8) = a1 | 4;
  *(void *)(a1 + 72) = a3;
  *(_OWORD *)(a1 + 80) = 0uLL;
  *(void *)(a1 + 96) = a1 + 112;
  *(void *)(a1 + 104) = 0x400000000;
  *(void *)(a1 + 144) = a1 + 160;
  *(_OWORD *)(a1 + 152) = 0uLL;
  *(void *)(a1 + 16++*(_DWORD *)(result + 8) = 1;
  *(void *)(a1 + 176) = a4;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = a5;
  *(void *)(a1 + 200) = a6;
  *(_DWORD *)(a1 + 232) = 0;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 20++*(_DWORD *)(result + 8) = 0uLL;
  *(_DWORD *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 272) = 0uLL;
  *(_OWORD *)(a1 + 28++*(_DWORD *)(result + 8) = 0uLL;
  *(_OWORD *)(a1 + 240) = 0uLL;
  *(_OWORD *)(a1 + 256) = 0uLL;
  *(void *)a1 = &unk_1F2649A50;
  *(_DWORD *)(a1 + 312) = a2;
  *(unsigned char *)(a1 + 316) = 0;
  *(_OWORD *)(a1 + 32++*(_DWORD *)(result + 8) = 0uLL;
  *(_DWORD *)(a1 + 36++*(_DWORD *)(result + 8) = 0;
  *(_OWORD *)(a1 + 352) = 0uLL;
  *(_DWORD *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 376) = 0uLL;
  *(_DWORD *)(a1 + 396) = 16;
  *(_DWORD *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 40++*(_DWORD *)(result + 8) = 0uLL;
  *(_DWORD *)(a1 + 42++*(_DWORD *)(result + 8) = 16;
  *(void *)(a1 + 440) = a1 + 456;
  *(void *)(a1 + 44++*(_DWORD *)(result + 8) = 0x200000000;
  *(_DWORD *)(a1 + 512) = 0;
  *(void *)(a1 + 504) = 0;
  *(_OWORD *)(a1 + 48++*(_DWORD *)(result + 8) = 0uLL;
  *(_DWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 520) = 0uLL;
  *(_OWORD *)(a1 + 544) = 0uLL;
  *(void *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 56++*(_DWORD *)(result + 8) = 0uLL;
  sub_1CD2B2658((void *)a1, a3, a1 + 8);
  uint64_t v11 = *(void *)(a1 + 176);
  uint64_t v13 = "cu_macro_begin";
  __int16 v14 = 259;
  *(void *)(a1 + 344) = llvm::MCContext::createTempSymbol(*(llvm::MCContext **)(v11 + 264), (const llvm::Twine *)&v13, 1);
  return a1;
}

unint64_t sub_1CD293370(unint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(void *)(a1 + 328))
  {
    if (!a4) {
      goto LABEL_7;
    }
    uint64_t v8 = *(void *)(a1 + 192);
  }
  else
  {
    if (!a4) {
      goto LABEL_7;
    }
    uint64_t v8 = *(void *)(a1 + 192);
    if (*(unsigned char *)(v8 + 3549)) {
      goto LABEL_7;
    }
  }
  BOOL v9 = *(uint64_t **)(v8 + 616);
  unint64_t v10 = *(void *)(v8 + 624);
  if ((unint64_t)v9 >= v10)
  {
    uint64_t v20 = *(uint64_t **)(v8 + 608);
    uint64_t v21 = ((char *)v9 - (char *)v20) >> 4;
    unint64_t v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 60) {
      abort();
    }
    uint64_t v23 = v10 - (void)v20;
    if (v23 >> 3 > v22) {
      unint64_t v22 = v23 >> 3;
    }
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v22;
    }
    if (v24)
    {
      if (v24 >> 60) {
        sub_1CB833614();
      }
      int v25 = (char *)operator new(16 * v24);
    }
    else
    {
      int v25 = 0;
    }
    BOOL v26 = (uint64_t *)&v25[16 * v21];
    uint64_t *v26 = a4;
    v26[1] = a1;
    uint64_t v11 = v26 + 2;
    if (v9 != v20)
    {
      do
      {
        *((_OWORD *)v26 - 1) = *((_OWORD *)v9 - 1);
        v26 -= 2;
        v9 -= 2;
      }
      while (v9 != v20);
      BOOL v9 = *(uint64_t **)(v8 + 608);
    }
    *(void *)(v8 + 60++*(_DWORD *)(result + 8) = v26;
    *(void *)(v8 + 616) = v11;
    *(void *)(v8 + 624) = &v25[16 * v24];
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *BOOL v9 = a4;
    v9[1] = a1;
    uint64_t v11 = v9 + 2;
  }
  *(void *)(v8 + 616) = v11;
LABEL_7:
  uint64_t v12 = *(void *)(a1 + 192);
  if (*(unsigned char *)(v12 + 3549) && *(void *)(a1 + 328)
    || *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(v12 + 8) + 272) + 8) + 1624) > 4u)
  {
    int v13 = *(_DWORD *)(v12 + 3540);
    unint64_t AssociatedFragment = *(void *)a4 & 0xFFFFFFFFFFFFFFF8;
    if (!AssociatedFragment && (*(_DWORD *)(a4 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(a4 + 8) |= 4u;
      unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a4 + 24));
      *(void *)a4 = *(void *)a4 & 7 | AssociatedFragment;
    }
    if (!AssociatedFragment)
    {
      uint64_t v15 = *(void *)(a1 + 192);
LABEL_12:
      unsigned int v16 = sub_1CD89C358(v15 + 4512, a4, 0);
      unsigned int v17 = *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 192) + 8) + 272) + 8)
                                + 1624);
      uint64_t v45 = v16;
      if (v17 <= 4) {
        __int16 v18 = 7937;
      }
      else {
        __int16 v18 = 27;
      }
      return sub_1CD2938A0(a1, (unint64_t *)(a2 + 8), a3, v18, &v45);
    }
    unsigned int v27 = v13 - 5;
    BOOL v28 = (void *)sub_1CC34BE58(a4, 1);
    uint64_t v29 = *(void *)(a1 + 192);
    if (v28 == llvm::MCSymbol::AbsolutePseudoFragment || v27 < 0xFFFFFFFE)
    {
      uint64_t v15 = *(void *)(a1 + 192);
      goto LABEL_12;
    }
    unint64_t v31 = *(void *)a4 & 0xFFFFFFFFFFFFFFF8;
    if (!v31 && (*(_DWORD *)(a4 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(a4 + 8) |= 4u;
      unint64_t v31 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a4 + 24));
      *(void *)a4 = *(void *)a4 & 7 | v31;
    }
    uint64_t v32 = sub_1CD8A8DF0(v29, *(void *)(v31 + 16));
    uint64_t v15 = *(void *)(a1 + 192);
    if (!v32) {
      goto LABEL_12;
    }
    uint64_t v33 = v32;
    if (v32 == a4) {
      goto LABEL_12;
    }
    if (*(_DWORD *)(v15 + 3540) == 3)
    {
      *(void *)(a1 + 160) += 16;
      uint64_t v34 = *(void *)(a1 + 80);
      if (((v34 + 7) & 0xFFFFFFFFFFFFFFF8) - v34 + 16 > *(void *)(a1 + 88) - v34)
      {
        unsigned int v39 = *(_DWORD *)(a1 + 104) >> 7;
        if (v39 >= 0x1E) {
          LOBYTE(v39) = 30;
        }
        uint64_t v40 = 4096 << v39;
        unint64_t v35 = (unint64_t *)operator new(4096 << v39, (std::align_val_t)8uLL);
        unsigned int v41 = *(_DWORD *)(a1 + 104);
        if (v41 >= *(_DWORD *)(a1 + 108)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(a1 + 96) + 8 * v41) = v35;
        ++*(_DWORD *)(a1 + 104);
        *(void *)(a1 + 8++*(_DWORD *)(result + 8) = (char *)v35 + v40;
      }
      else
      {
        unint64_t v35 = (unint64_t *)((v34 + 7) & 0xFFFFFFFFFFFFFFF8);
      }
      *(void *)(a1 + 80) = v35 + 2;
      *unint64_t v35 = 0;
      v35[1] = 0;
      sub_1CD8AE8D4(a1, v35, a4);
      return sub_1CD8AEC28(a1, a2, a3, 24, (uint64_t)v35);
    }
    else
    {
      uint64_t v36 = (unint64_t *)(a2 + 8);
      *(void *)(a1 + 160) += 24;
      uint64_t v37 = *(void *)(a1 + 80);
      if (((v37 + 7) & 0xFFFFFFFFFFFFFFF8) - v37 + 24 > *(void *)(a1 + 88) - v37)
      {
        unsigned int v42 = *(_DWORD *)(a1 + 104) >> 7;
        if (v42 >= 0x1E) {
          LOBYTE(v42) = 30;
        }
        uint64_t v43 = 4096 << v42;
        uint64_t v38 = operator new(4096 << v42, (std::align_val_t)8uLL);
        unsigned int v44 = *(_DWORD *)(a1 + 104);
        if (v44 >= *(_DWORD *)(a1 + 108)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(a1 + 96) + 8 * v44) = v38;
        ++*(_DWORD *)(a1 + 104);
        *(void *)(a1 + 8++*(_DWORD *)(result + 8) = (char *)v38 + v43;
        uint64_t v15 = *(void *)(a1 + 192);
      }
      else
      {
        uint64_t v38 = (void *)((v37 + 7) & 0xFFFFFFFFFFFFFFF8);
      }
      *(void *)(a1 + 80) = v38 + 3;
      *uint64_t v38 = sub_1CD89C358(v15 + 4512, v33, 0);
      v38[1] = a4;
      v38[2] = v33;
      uint64_t v45 = (uint64_t)v38;
      return sub_1CD8A59D8(a1, v36, a3, &v45);
    }
  }
  else
  {
    return sub_1CD293858(a1, a2, a3, a4);
  }
}

unint64_t sub_1CD293858(unint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4 = (unint64_t *)(a2 + 8);
  if (a4)
  {
    uint64_t v6 = a4;
    return sub_1CD29397C(a1, v4, a3, 1, &v6);
  }
  else
  {
    uint64_t v6 = 0;
    return sub_1CD2938A0(a1, v4, a3, 1, &v6);
  }
}

unint64_t sub_1CD2938A0(unint64_t result, unint64_t *a2, int a3, __int16 a4, void *a5)
{
  uint64_t v5 = a2;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!a3) {
    goto LABEL_3;
  }
  if ((*(_WORD *)(*(void *)(*(void *)(result + 176) + 248) + 1064) & 0x40) == 0) {
    goto LABEL_3;
  }
  unsigned int v6 = *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(*(void *)(result + 192) + 8) + 272) + 8)
                           + 1624);
  unint64_t v13 = result;
  unint64_t v10 = a5;
  __int16 v11 = a4;
  __int16 v9 = a3;
  unsigned int v7 = llvm::dwarf::AttributeVersion(a3);
  LOWORD(a3) = v9;
  a4 = v11;
  a5 = v10;
  unsigned int v8 = v7;
  uint64_t v5 = a2;
  uint64_t result = v13;
  if (v8 <= v6)
  {
LABEL_3:
    int v14 = 1;
    __int16 v15 = a3;
    __int16 v16 = a4;
    uint64_t v17 = *a5;
    return sub_1CD298EC8(v5, result + 80, &v14);
  }
  return result;
}

unint64_t sub_1CD29397C(unint64_t result, unint64_t *a2, int a3, __int16 a4, void *a5)
{
  uint64_t v5 = a2;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!a3) {
    goto LABEL_3;
  }
  if ((*(_WORD *)(*(void *)(*(void *)(result + 176) + 248) + 1064) & 0x40) == 0) {
    goto LABEL_3;
  }
  unsigned int v6 = *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(*(void *)(result + 192) + 8) + 272) + 8)
                           + 1624);
  unint64_t v13 = result;
  unint64_t v10 = a5;
  __int16 v11 = a4;
  __int16 v9 = a3;
  unsigned int v7 = llvm::dwarf::AttributeVersion(a3);
  LOWORD(a3) = v9;
  a4 = v11;
  a5 = v10;
  unsigned int v8 = v7;
  uint64_t v5 = a2;
  uint64_t result = v13;
  if (v8 <= v6)
  {
LABEL_3:
    int v14 = 4;
    __int16 v15 = a3;
    __int16 v16 = a4;
    uint64_t v17 = *a5;
    return sub_1CD298EC8(v5, result + 80, &v14);
  }
  return result;
}

uint64_t sub_1CD293A58(uint64_t a1, uint64_t a2)
{
  v29[2] = *MEMORY[0x1E4F143B8];
  if ((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 176) + 272) + 96))(*(void *)(*(void *)(a1 + 176) + 272))) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(a1 + 312);
  }
  if (a2)
  {
    if (*(void *)(a1 + 552) == a2)
    {
      return *(unsigned int *)(a1 + 560);
    }
    else
    {
      *(void *)(a1 + 552) = a2;
      unsigned int v6 = (void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
      uint64_t v7 = v6[1];
      if (v7)
      {
        unsigned int v8 = *(uint64_t **)(v7 + 8);
        uint64_t v11 = *v8;
        __int16 v9 = v8 + 3;
        uint64_t v10 = v11;
      }
      else
      {
        uint64_t v10 = 0;
        __int16 v9 = 0;
      }
      uint64_t v12 = *(void *)(*(void *)(a1 + 176) + 272);
      if (*v6)
      {
        unint64_t v13 = *(uint64_t **)(*v6 + 8);
        uint64_t v16 = *v13;
        int v14 = v13 + 3;
        uint64_t v15 = v16;
      }
      else
      {
        uint64_t v15 = 0;
        int v14 = 0;
      }
      sub_1CD29B98C(*(void *)(a1 + 192), a2, &v25);
      if (*(unsigned char *)(a2 + 56))
      {
        uint64_t v20 = *(uint64_t **)(*(void *)(a2 + 48) + 8);
        uint64_t v21 = *v20;
        uint64_t v19 = v20 + 3;
        uint64_t v17 = v21;
        char v18 = 1;
      }
      else
      {
        char v18 = 0;
        uint64_t v19 = 0;
      }
      long long v27 = v25;
      char v28 = v26;
      v23[0] = v19;
      v23[1] = v17;
      char v24 = v18;
      (*(void (**)(void *__return_ptr, uint64_t, void, void *, uint64_t, void *, uint64_t, long long *, void *, int))(*(void *)v12 + 688))(v29, v12, 0, v9, v10, v14, v15, &v27, v23, v4);
      uint64_t result = LODWORD(v29[0]);
      *(_DWORD *)(a1 + 560) = v29[0];
    }
  }
  else
  {
    uint64_t v22 = *(void *)(*(void *)(a1 + 176) + 272);
    LOBYTE(v27) = 0;
    char v28 = 0;
    LOBYTE(v23[0]) = 0;
    char v24 = 0;
    (*(void (**)(void *__return_ptr))(*(void *)v22 + 688))(v29);
    return LODWORD(v29[0]);
  }
  return result;
}

void sub_1CD293C9C(void *a1, const std::string::value_type *a2, std::string::size_type a3, size_t a4, llvm::DIScope *a5)
{
  if (sub_1CD2982E8(a1))
  {
    sub_1CD8AF93C(a5, (uint64_t)a1, (uint64_t)&v22);
    if (a2)
    {
      std::string::__init(&__p, a2, a3);
      char v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
      std::string::size_type v11 = __p.__r_.__value_.__r.__words[0];
    }
    else
    {
      std::string::size_type size = 0;
      std::string::size_type v11 = 0;
      char v12 = 0;
      memset(&__p, 0, sizeof(__p));
    }
    BOOL v13 = v12 < 0;
    if (v12 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)v11;
    }
    std::string::size_type v15 = v12 & 0x7F;
    if (v13) {
      std::string::size_type v16 = size;
    }
    else {
      std::string::size_type v16 = v15;
    }
    uint64_t v17 = std::string::append(&v22, (const std::string::value_type *)p_p, v16);
    std::string::size_type v18 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v23 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    uint64_t v24 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (v24 >= 0) {
      uint64_t v19 = (unsigned __int8 *)v23;
    }
    else {
      uint64_t v19 = (unsigned __int8 *)v23[0];
    }
    if (v24 >= 0) {
      size_t v20 = HIBYTE(v24) & 0x7F;
    }
    else {
      size_t v20 = (size_t)v23[1];
    }
    (*sub_1CD5CF708((uint64_t)(a1 + 47), v19, v20))[1] = a4;
    if (SHIBYTE(v24) < 0) {
      operator delete(v23[0]);
    }
  }
}

void **sub_1CD293DCC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  v43[2] = *MEMORY[0x1E4F143B8];
  unsigned int v42 = 0;
  if (a5)
  {
    uint64_t v7 = a4;
    char v41 = 0;
    unsigned int v8 = &a4[2 * a5];
    while (1)
    {
      uint64_t v9 = *v7;
      uint64_t v10 = (llvm::DIExpression *)v7[1];
      if (a5 == 1)
      {
        if (v10)
        {
          uint64_t isConstant = llvm::DIExpression::isConstant((llvm::DIExpression *)v7[1]);
          if ((isConstant & 0xFF00000000) != 0) {
            break;
          }
        }
      }
      if (v9)
      {
        int v11 = *(_DWORD *)(v9 + 32);
        if ((v11 & 0x300) != 0x100
          && ((v11 & 0x1C00) == 0
           || *(unsigned char *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 176) + 248) + 24))(*(void *)(*(void *)(a1 + 176) + 248))
                       + 946)))
        {
          goto LABEL_13;
        }
      }
      else if (v10 && (llvm::DIExpression::isConstant(v10) & 0xFF00000000) != 0)
      {
LABEL_13:
        *(void *)(a1 + 160) += 16;
        uint64_t v12 = *(void *)(a1 + 80);
        if (((v12 + 7) & 0xFFFFFFFFFFFFFFF8) - v12 + 16 > *(void *)(a1 + 88) - v12)
        {
          unsigned int v15 = *(_DWORD *)(a1 + 104) >> 7;
          if (v15 >= 0x1E) {
            LOBYTE(v15) = 30;
          }
          uint64_t v16 = 4096 << v15;
          unint64_t v13 = (unint64_t)operator new(4096 << v15, (std::align_val_t)8uLL);
          unint64_t v17 = *(unsigned int *)(a1 + 104);
          if (v17 >= *(unsigned int *)(a1 + 108)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(a1 + 96) + 8 * v17) = v13;
          ++*(_DWORD *)(a1 + 104);
          *(void *)(a1 + 8++*(_DWORD *)(result + 8) = v13 + v16;
        }
        else
        {
          unint64_t v13 = (v12 + 7) & 0xFFFFFFFFFFFFFFF8;
        }
        *(void *)(a1 + 80) = v13 + 16;
        *(void *)unint64_t v13 = 0;
        *(_DWORD *)(v13 + ++*(_DWORD *)(result + 8) = 0;
        operator new();
      }
      v7 += 2;
      if (v7 == v8) {
        goto LABEL_26;
      }
    }
    v43[0] = *(void *)(*((void *)v10 + 3) + 8);
    if (isConstant == 1) {
      __int16 v38 = 15;
    }
    else {
      __int16 v38 = 13;
    }
    sub_1CD2938A0(a1, (unint64_t *)(a2 + 8), 28, v38, v43);
    char v41 = 1;
  }
  else
  {
    char v41 = 0;
  }
LABEL_26:
  if ((*(_DWORD *)(*(void *)(*(void *)(a1 + 176) + 248) + 472) & 0xFFFFFFFE) == 0x2C
    && *(_DWORD *)(*(void *)(a1 + 192) + 5512) == 1)
  {
    v43[0] = 5;
    sub_1CD2938A0(a1, (unint64_t *)(a2 + 8), 51, 11, v43);
  }
  if (*(unsigned char *)(*(void *)(a1 + 192) + 3530))
  {
    uint64_t v18 = *(void *)(a3 - 8 * *(unsigned int *)(a3 + 8) + 40);
    if (v18)
    {
      uint64_t v19 = *(void **)(v18 + 8);
      uint64_t v22 = *v19;
      size_t v20 = v19 + 3;
      uint64_t v21 = v22;
    }
    else
    {
      uint64_t v21 = 0;
      size_t v20 = 0;
    }
    sub_1CD2B33E8((uint64_t *)a1, a2, v20, v21);
  }
  if (v41)
  {
    uint64_t v23 = *(void *)(a3 - 8 * *(unsigned int *)(a3 + 8) + 8);
    if (v23)
    {
      uint64_t v24 = *(void **)(v23 + 8);
      size_t v27 = *v24;
      long long v25 = (unsigned __int8 *)(v24 + 3);
      size_t v26 = v27;
    }
    else
    {
      size_t v26 = 0;
      long long v25 = 0;
    }
    sub_1CD2A4490(*(void *)(a1 + 192), *(void *)(a1 + 72), *(void *)(a1 + 192) + 4744, v25, v26, a2);
    uint64_t v28 = a3 - 8 * *(unsigned int *)(a3 + 8);
    uint64_t v29 = *(void *)(v28 + 40);
    if (v29)
    {
      uint64_t v30 = *(void **)(v29 + 8);
      size_t v33 = *v30;
      unint64_t v31 = (unsigned __int8 *)(v30 + 3);
      size_t v32 = v33;
      if (v33)
      {
        uint64_t v34 = *(void *)(v28 + 8);
        if (!v34 || (unint64_t v35 = *(void **)(v34 + 8), *v35 != v32) || memcmp(v35 + 3, v31, v32))
        {
          uint64_t v36 = *(void *)(a1 + 192);
          if (*(unsigned char *)(v36 + 3530)) {
            sub_1CD2A4490(v36, *(void *)(a1 + 72), v36 + 4744, v31, v32, a2);
          }
        }
      }
    }
  }
  return sub_1CD299144(&v42, 0);
}

void sub_1CD294700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1CD2A47E4(*(void *)(a1 + 192), a2);
  uint64_t v6 = *(void *)(a1 + 192);
  uint64_t v7 = *(void *)(v6 + 2968);
  *(void *)(v6 + 296++*(_DWORD *)(result + 8) = a1;
  uint64_t v8 = *(unsigned int *)(a1 + 448);
  if (v8) {
    BOOL v9 = v7 == a1;
  }
  else {
    BOOL v9 = 0;
  }
  if (!v9) {
    goto LABEL_5;
  }
  uint64_t v12 = *(void *)(*(void *)(a1 + 440) + 16 * v8 - 8);
  unint64_t AssociatedFragment = *(void *)v12 & 0xFFFFFFFFFFFFFFF8;
  if (!AssociatedFragment && (*(_DWORD *)(v12 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v12 + 8) |= 4u;
    unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v12 + 24));
    *(void *)uint64_t v12 = *(void *)v12 & 7 | AssociatedFragment;
  }
  uint64_t v14 = *(void *)(AssociatedFragment + 16);
  unint64_t v15 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
  if (!v15 && (*(_DWORD *)(a3 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(a3 + 8) |= 4u;
    unint64_t v15 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a3 + 24));
    *(void *)a3 = *(void *)a3 & 7 | v15;
  }
  if (v14 == *(void *)(v15 + 16))
  {
    *(void *)(*(void *)(a1 + 440) + 16 * *(unsigned int *)(a1 + 448) - ++*(_DWORD *)(result + 8) = a3;
  }
  else
  {
LABEL_5:
    if (v7) {
      sub_1CD29D60C(*(void *)(a1 + 192), v7);
    }
    unsigned int v10 = *(_DWORD *)(a1 + 448);
    if (v10 >= *(_DWORD *)(a1 + 452)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v11 = (uint64_t *)(*(void *)(a1 + 440) + 16 * v10);
    uint64_t *v11 = a2;
    v11[1] = a3;
    ++*(_DWORD *)(a1 + 448);
  }
}

unint64_t sub_1CD294868(unint64_t result)
{
  if (*(_DWORD *)(*(void *)(result + 72) + 36) != 3)
  {
    unint64_t v1 = result;
    uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(*(void *)(result + 176) + 248) + 24))(*(void *)(*(void *)(result + 176) + 248));
    uint64_t v3 = v2;
    if (*(unsigned char *)(*(void *)(v1 + 192) + 3533)) {
      int v4 = *(void **)(*(void *)(v2 + 88) + 8);
    }
    else {
      int v4 = (void *)(*(uint64_t (**)(void, void))(**(void **)(*(void *)(v1 + 176) + 272) + 856))(*(void *)(*(void *)(v1 + 176) + 272), *(unsigned int *)(v1 + 312));
    }
    *(void *)(v1 + 320) = v4;
    uint64_t v5 = *(void *)(*(void *)(v3 + 88) + 8);
    return sub_1CD2B636C(v1, v1 + 8, 16, v4, v5);
  }
  return result;
}

unint64_t sub_1CD294950(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1CD293370(a1, a2, 17, a3);
  if (*(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 192) + 8) + 272) + 8) + 1624) <= 3u)
  {
    return sub_1CD293370(a1, a2, 18, a4);
  }
  else
  {
    return sub_1CD2B2A00(a1, (unint64_t *)(a2 + 8), 18, a4, a3);
  }
}

uint64_t sub_1CD294A00(void *a1, uint64_t a2)
{
  if (*(_DWORD *)(a1[9] + 36) == 2)
  {
    BOOL v3 = 1;
  }
  else if (*(unsigned char *)(a1[24] + 3549))
  {
    BOOL v3 = a1[41] == 0;
  }
  else
  {
    BOOL v3 = 0;
  }
  uint64_t v4 = sub_1CD2B37E8(a1, a2, v3);
  uint64_t v5 = (uint64_t *)sub_1CD2913D4(v4);

  return sub_1CD294A80(v5, a2, v4);
}

uint64_t sub_1CD294A80(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v37[4] = *MEMORY[0x1E4F143B8];
  unint64_t v35 = v37;
  uint64_t v36 = 0x200000000;
  uint64_t v6 = a1[22];
  uint64_t v7 = *(void *)(v6 + 376);
  uint64_t v8 = *(void *)(v6 + 384);
  if (v7 == v8)
  {
    long long __dst = v34;
    uint64_t v33 = 0x200000000;
  }
  else
  {
    unsigned int v9 = 0;
    do
    {
      if (v9 >= HIDWORD(v36)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v35[v9] = *(_OWORD *)(v7 + 8);
      unsigned int v9 = v36 + 1;
      LODWORD(v36) = v36 + 1;
      v7 += 24;
    }
    while (v7 != v8);
    long long __dst = v34;
    uint64_t v33 = 0x200000000;
    if (v9)
    {
      if (v9 >= 3) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(__dst, v35, 16 * v9);
      LODWORD(v33) = v9;
    }
  }
  sub_1CD294F94((unint64_t)a1, a3, (uint64_t)&__dst);
  if (__dst != v34) {
    free(__dst);
  }
  uint64_t v10 = a1[24];
  if (*(unsigned char *)(v10 + 3548)
    && !llvm::TargetOptions::DisableFramePointerElim((llvm::TargetOptions *)(*(void *)(*(void *)(v10 + 2960) + 8) + 1008), *(const llvm::MachineFunction **)(v10 + 2960)))
  {
    sub_1CD2B26C0((unint64_t)a1, a3, 16359);
  }
  if (*(_DWORD *)(a1[9] + 36) != 2 && (!*(unsigned char *)(a1[24] + 3549) || a1[41]))
  {
    uint64_t v12 = *(void *)(*(void *)(a1[22] + 280) + 16);
    uint64_t v13 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 112))(v12);
    unint64_t v14 = (*(uint64_t (**)(void))(v13 + 368))();
    unint64_t v16 = HIDWORD(v14);
    if (!v14)
    {
      if ((HIDWORD(v14) - 1) <= 0x3FFFFFFE)
      {
        LOBYTE(v2++*(_DWORD *)(result + 8) = 1;
        HIDWORD(v2++*(_DWORD *)(result + 8) = HIDWORD(v14);
        sub_1CD8A5EDC((unint64_t)a1, a3, 64, (uint64_t)&v28);
      }
      goto LABEL_15;
    }
    unsigned int v26 = v15;
    if (v14 == 1)
    {
      uint64_t v17 = sub_1CB906F34(a1 + 10, 16, 3);
      *(void *)uint64_t v17 = 0;
      *(_DWORD *)(v17 + ++*(_DWORD *)(result + 8) = 0;
      uint64_t v28 = 0xB000000000001;
      uint64_t v29 = 156;
      sub_1CD298EC8((unint64_t *)v17, (uint64_t)(a1 + 10), (int *)&v28);
      unint64_t v18 = (unint64_t)a1;
      uint64_t v19 = a3;
      uint64_t v20 = v17;
    }
    else
    {
      if (v14 != 2) {
        goto LABEL_15;
      }
      if (HIDWORD(v14) != 3)
      {
        uint64_t v25 = sub_1CB906F34(a1 + 10, 16, 3);
        *(void *)uint64_t v25 = 0;
        *(_DWORD *)(v25 + ++*(_DWORD *)(result + 8) = 0;
        sub_1CD2B20CC((uint64_t)&v28, a1[22], (uint64_t)a1, v25);
        v27[0] = 0;
        v27[1] = 0;
        sub_1CD8ADE6C((unsigned int *)&v28, v16, v26);
        sub_1CD2AF934((uint64_t)&v28, (llvm::DIExpression::ExprOperand *)v27);
        sub_1CD2B0100(&v28);
        sub_1CD2B2F80((unint64_t)a1, a3, 64, v31[7]);
        uint64_t v28 = (uint64_t)&unk_1F2649AF8;
        if (v30 != v31) {
          free(v30);
        }
        goto LABEL_15;
      }
      uint64_t v21 = sub_1CD89DC8C(a1[22], "__stack_pointer", 15);
      uint64_t v22 = v21;
      if (!*(unsigned char *)(v21 + 36)) {
        *(unsigned char *)(v21 + 36) = 1;
      }
      *(_DWORD *)(v21 + 32) = 2;
      if (*(_DWORD *)(sub_1CD27A528(a1[22]) + 32) == 64) {
        __int16 v23 = 382;
      }
      else {
        __int16 v23 = 383;
      }
      if (!*(unsigned char *)(v22 + 130)) {
        *(unsigned char *)(v22 + 130) = 1;
      }
      *(_WORD *)(v22 + 12++*(_DWORD *)(result + 8) = v23;
      uint64_t v24 = sub_1CB906F34(a1 + 10, 16, 3);
      *(void *)uint64_t v24 = 0;
      *(_DWORD *)(v24 + ++*(_DWORD *)(result + 8) = 0;
      uint64_t v28 = 0xB000000000001;
      uint64_t v29 = 237;
      sub_1CD298EC8((unint64_t *)v24, (uint64_t)(a1 + 10), (int *)&v28);
      uint64_t v28 = 0xD000000000001;
      uint64_t v29 = 3;
      sub_1CD298EC8((unint64_t *)v24, (uint64_t)(a1 + 10), (int *)&v28);
      if (*(unsigned char *)(a1[24] + 3549) && a1[41])
      {
        uint64_t v28 = 0x6000000000001;
        uint64_t v29 = v26;
        sub_1CD298EC8((unint64_t *)v24, (uint64_t)(a1 + 10), (int *)&v28);
      }
      else
      {
        sub_1CD8AE664((uint64_t)a1, (unint64_t *)v24, 6, v22);
      }
      uint64_t v28 = 0xB000000000001;
      uint64_t v29 = 159;
      sub_1CD298EC8((unint64_t *)v24, (uint64_t)(a1 + 10), (int *)&v28);
      unint64_t v18 = (unint64_t)a1;
      uint64_t v19 = a3;
      uint64_t v20 = v24;
    }
    sub_1CD2B2F80(v18, v19, 64, v20);
  }
LABEL_15:
  sub_1CD29AA7C(a1[24], a1[9], a2, a3);
  if (v35 != (_OWORD *)v37) {
    free(v35);
  }
  return a3;
}

void sub_1CD294F94(unint64_t a1, uint64_t a2, uint64_t a3)
{
  v15[4] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 192);
  if (*(unsigned char *)(v5 + 3532))
  {
    int v6 = *(_DWORD *)(a3 + 8);
    if (v6 != 1)
    {
LABEL_3:
      v14[0] = v15;
      v14[1] = (void *)0x200000000;
      if (v6) {
        sub_1CD298D88((uint64_t)v14, (const void **)a3);
      }
      sub_1CD29604C(a1, a2, (uint64_t)v14);
      if (v14[0] != v15) {
        free(v14[0]);
      }
      return;
    }
    uint64_t v7 = *(uint64_t **)a3;
    if (*(_DWORD *)(v5 + 3540) == 2)
    {
      uint64_t v11 = a3;
      unint64_t v12 = sub_1CC34BE58(*v7, 1);
      uint64_t v13 = sub_1CD8A8DF0(v5, *(void *)(v12 + 16));
      a3 = v11;
      uint64_t v7 = *(uint64_t **)v11;
      if (v13 != **(void **)v11)
      {
        int v6 = *(_DWORD *)(v11 + 8);
        goto LABEL_3;
      }
    }
  }
  else
  {
    uint64_t v7 = *(uint64_t **)a3;
  }
  uint64_t v8 = &v7[2 * *(unsigned int *)(a3 + 8)];
  uint64_t v9 = *v7;
  uint64_t v10 = *(v8 - 1);

  sub_1CD294950(a1, a2, v9, v10);
}

BOOL sub_1CD2950FC(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(a1 + 192) + 3549) && *(void *)(a1 + 328) != 0;
}

unint64_t sub_1CD295120(unint64_t a1, uint64_t a2, unint64_t a3)
{
  v138[8] = *MEMORY[0x1E4F143B8];
  unint64_t v110 = 0;
  sub_1CD297540((char *)&v116, *(void *)(*(void *)(a1 + 200) + 336), *(_DWORD *)(*(void *)(a1 + 200) + 352), a2);
  int v6 = v116;
  if (v116 != v117)
  {
    do
    {
      __int16 v68 = (void *)sub_1CD296584(a1, v6[5], *(unsigned char *)(a2 + 24), &v110);
      v68[5] = a3;
      uint64_t v69 = *(void **)(a3 + 32);
      if (v69)
      {
        void *v68 = *v69;
        *uint64_t v69 = v68;
      }
      *(void *)(a3 + 32) = v68;
      long long v70 = (void *)v6[1];
      if (v70)
      {
        do
        {
          uint64_t v71 = (void **)v70;
          long long v70 = (void *)*v70;
        }
        while (v70);
      }
      else
      {
        do
        {
          uint64_t v71 = (void **)v6[2];
          BOOL v66 = *v71 == v6;
          int v6 = v71;
        }
        while (!v66);
      }
      int v6 = v71;
    }
    while (v71 != v117);
  }
  uint64_t v113 = v115;
  uint64_t v114 = 0x800000000;
  unint64_t v133 = (unint64_t)&v135;
  uint64_t v134 = 0x800000000;
  v131[0] = 1;
  for (uint64_t i = 1; i != 9; i += 2)
    v131[i] = -4096;
  uint64_t v129 = 1;
  v130[0] = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v130[1] = v130[0];
  v130[2] = v130[0];
  v130[3] = v130[0];
  uint64_t v124 = 1;
  long long v125 = v130[0];
  long long v126 = v130[0];
  long long v127 = v130[0];
  long long v128 = v130[0];
  if (v119)
  {
    uint64_t v43 = 8 * v119;
    unsigned int v44 = (char *)v118 - 8;
    while (1)
    {
      uint64_t v45 = *(void *)&v44[v43];
      uint64_t v46 = *(void *)(v45 + 8);
      uint64_t v121 = 0;
      if ((sub_1CC00C33C((uint64_t)v131, v46, &v121) & 1) == 0) {
        break;
      }
LABEL_78:
      if (v134 >= (unint64_t)HIDWORD(v134)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(v133 + 8 * v134) = v45 & 0xFFFFFFFFFFFFFFFBLL;
      unsigned int v50 = v134 + 1;
      LODWORD(v134) = v134 + 1;
      v43 -= 8;
      if (!v43)
      {
        if (!v50) {
          goto LABEL_5;
        }
        while (2)
        {
          uint64_t v51 = *(void *)(v133 + 8 * v50 - 8);
          unint64_t v52 = v51 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v111 = v51 & 0xFFFFFFFFFFFFFFF8;
          LODWORD(v134) = v50 - 1;
          if (v129)
          {
            int v53 = 8;
            uint64_t v54 = v130;
LABEL_84:
            int v55 = v53 - 1;
            unsigned int v56 = v55 & ((v52 >> 4) ^ (v52 >> 9));
            uint64_t v57 = *((void *)v54 + v56);
            if (v57 != v52)
            {
              int v58 = 1;
              while (v57 != -4096)
              {
                unsigned int v59 = v56 + v58++;
                unsigned int v56 = v59 & v55;
                uint64_t v57 = *((void *)v54 + v56);
                if (v57 == v52) {
                  goto LABEL_98;
                }
              }
              goto LABEL_89;
            }
          }
          else
          {
            int v53 = DWORD2(v130[0]);
            if (DWORD2(v130[0]))
            {
              uint64_t v54 = *(_OWORD **)&v130[0];
              goto LABEL_84;
            }
LABEL_89:
            if ((v51 & 4) != 0)
            {
              sub_1CD298720((uint64_t)&v121, (uint64_t)&v129, (uint64_t *)&v111);
              if (v114 >= (unint64_t)HIDWORD(v114)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v113 + v114) = v52;
              LODWORD(v114) = v114 + 1;
            }
            else
            {
              sub_1CD298720((uint64_t)&v121, (uint64_t)&v124, (uint64_t *)&v111);
              if (!LOBYTE(v123[0])) {
                goto LABEL_5;
              }
              if (v134 >= (unint64_t)HIDWORD(v134)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(v133 + 8 * v134) = v52 | 4;
              LODWORD(v134) = v134 + 1;
              uint64_t v121 = v123;
              uint64_t v122 = 0x200000000;
              uint64_t v60 = *(void *)(*(void *)(v52 + 8) - 8 * *(unsigned int *)(*(void *)(v52 + 8) + 8) + 24);
              if (*(unsigned char *)v60 == 13 && *(_WORD *)(v60 + 2) == 1)
              {
                uint64_t v72 = *(unsigned int *)(v60 + 8);
                uint64_t v73 = -v72;
                uint64_t v74 = *(unsigned char **)(v60 - 8 * v72 + 72);
                if (v74)
                {
                  if ((*v74 & 0xFE) == 0x18)
                  {
                    v123[0] = v74;
                    LODWORD(v74) = 1;
                    LODWORD(v122) = 1;
                    uint64_t v73 = -(uint64_t)*(unsigned int *)(v60 + 8);
                  }
                  else
                  {
                    LODWORD(v74) = 0;
                  }
                }
                BOOL v85 = *(unsigned char **)(v60 + 8 * v73 + 80);
                if (v85 && (*v85 & 0xFE) == 0x18)
                {
                  v123[v74] = v85;
                  LODWORD(v74) = v74 + 1;
                  LODWORD(v122) = v74;
                  uint64_t v73 = -(uint64_t)*(unsigned int *)(v60 + 8);
                }
                uint64_t v86 = *(unsigned char **)(v60 + 8 * v73 + 88);
                if (v86 && (*v86 & 0xFE) == 0x18)
                {
                  if (v74 >= 2) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  v123[v74] = v86;
                  LODWORD(v74) = v122 + 1;
                  LODWORD(v122) = v122 + 1;
                  uint64_t v73 = -(uint64_t)*(unsigned int *)(v60 + 8);
                }
                uint64_t v87 = *(void *)(v60 + 8 * v73 + 32);
                if (v87) {
                  uint64_t v88 = (llvm::DIGenericSubrange **)(v87 - 8 * *(unsigned int *)(v87 + 8));
                }
                else {
                  uint64_t v88 = 0;
                }
                if (v88 != (llvm::DIGenericSubrange **)v87)
                {
                  while (1)
                  {
                    long long v89 = *v88;
                    int v90 = *(unsigned __int8 *)*v88;
                    if (v90 == 34)
                    {
                      unint64_t Count = llvm::DIGenericSubrange::getCount(*v88);
                      if (Count >= 8 && (Count & 4) == 0 && (Count & 0xFFFFFFFFFFFFFFF8) != 0)
                      {
                        if (v122 >= (unint64_t)HIDWORD(v122)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *((void *)v121 + v122) = Count & 0xFFFFFFFFFFFFFFF8;
                        LODWORD(v122) = v122 + 1;
                      }
                      unint64_t LowerBound = llvm::DIGenericSubrange::getLowerBound(v89);
                      if (LowerBound >= 8 && (LowerBound & 4) == 0 && (LowerBound & 0xFFFFFFFFFFFFFFF8) != 0)
                      {
                        if (v122 >= (unint64_t)HIDWORD(v122)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *((void *)v121 + v122) = LowerBound & 0xFFFFFFFFFFFFFFF8;
                        LODWORD(v122) = v122 + 1;
                      }
                      unint64_t UpperBound = llvm::DIGenericSubrange::getUpperBound(v89);
                      if (UpperBound >= 8 && (UpperBound & 4) == 0 && (UpperBound & 0xFFFFFFFFFFFFFFF8) != 0)
                      {
                        if (v122 >= (unint64_t)HIDWORD(v122)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *((void *)v121 + v122) = UpperBound & 0xFFFFFFFFFFFFFFF8;
                        LODWORD(v122) = v122 + 1;
                      }
                      unint64_t Stride = llvm::DIGenericSubrange::getStride(v89);
                      if (Stride < 8 || (Stride & 4) != 0) {
                        goto LABEL_222;
                      }
                    }
                    else
                    {
                      if (v90 != 9) {
                        goto LABEL_222;
                      }
                      unint64_t v91 = llvm::DISubrange::getCount(*v88);
                      unint64_t v92 = v91 & 0xFFFFFFFFFFFFFFF8;
                      if (v91 >= 8 && (v91 & 6) == 2 && v92 != 0)
                      {
                        if (v122 >= (unint64_t)HIDWORD(v122)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *((void *)v121 + v122) = v92;
                        LODWORD(v122) = v122 + 1;
                      }
                      unint64_t v95 = llvm::DISubrange::getLowerBound(v89);
                      unint64_t v96 = v95 & 0xFFFFFFFFFFFFFFF8;
                      if (v95 >= 8 && (v95 & 6) == 2 && v96 != 0)
                      {
                        if (v122 >= (unint64_t)HIDWORD(v122)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *((void *)v121 + v122) = v96;
                        LODWORD(v122) = v122 + 1;
                      }
                      unint64_t v99 = llvm::DISubrange::getUpperBound(v89);
                      if (v99 >= 8 && (v99 & 6) == 2 && (v99 & 0xFFFFFFFFFFFFFFF8) != 0)
                      {
                        if (v122 >= (unint64_t)HIDWORD(v122)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *((void *)v121 + v122) = v99 & 0xFFFFFFFFFFFFFFF8;
                        LODWORD(v122) = v122 + 1;
                      }
                      unint64_t Stride = llvm::DISubrange::getStride(v89);
                      if (Stride < 8 || (Stride & 6) != 2) {
                        goto LABEL_222;
                      }
                    }
                    if ((Stride & 0xFFFFFFFFFFFFFFF8) != 0)
                    {
                      if (v122 >= (unint64_t)HIDWORD(v122)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((void *)v121 + v122) = Stride & 0xFFFFFFFFFFFFFFF8;
                      LODWORD(v122) = v122 + 1;
                    }
LABEL_222:
                    if (++v88 == (llvm::DIGenericSubrange **)v87)
                    {
                      LODWORD(v74) = v122;
                      break;
                    }
                  }
                }
                uint64_t v61 = (unsigned char **)v121;
                if (v74)
                {
                  uint64_t v107 = 8 * v74;
                  do
                  {
                    int v108 = *v61;
                    if (**v61 == 25)
                    {
                      uint64_t v112 = 0;
                      if (sub_1CC00C33C((uint64_t)v131, (uint64_t)v108, &v112))
                      {
                        uint64_t v109 = *(void *)(v112 + 8);
                        if (v109)
                        {
                          if (v134 >= (unint64_t)HIDWORD(v134)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *(void *)(v133 + 8 * v134) = v109 & 0xFFFFFFFFFFFFFFFBLL;
                          LODWORD(v134) = v134 + 1;
                        }
                      }
                    }
                    ++v61;
                    v107 -= 8;
                  }
                  while (v107);
                  uint64_t v61 = (unsigned char **)v121;
                }
              }
              else
              {
                uint64_t v61 = (unsigned char **)v121;
              }
              if (v61 != v123) {
                free(v61);
              }
            }
          }
LABEL_98:
          unsigned int v50 = v134;
          if (!v134) {
            goto LABEL_5;
          }
          continue;
        }
      }
    }
    int v47 = LODWORD(v131[0]) >> 1;
    if (v131[0]) {
      unsigned int v48 = 4;
    }
    else {
      unsigned int v48 = v132;
    }
    if (4 * v47 + 4 >= 3 * v48)
    {
      v48 *= 2;
    }
    else if (v48 + ~v47 - HIDWORD(v131[0]) > v48 >> 3)
    {
LABEL_75:
      int v49 = v121;
      LODWORD(v131[0]) += 2;
      if (*(void *)v121 != -4096) {
        --HIDWORD(v131[0]);
      }
      *(void *)uint64_t v121 = v46;
      v49[1] = v45;
      goto LABEL_78;
    }
    sub_1CC87D99C((uint64_t)v131, v48);
    uint64_t v121 = 0;
    sub_1CC00C33C((uint64_t)v131, v46, &v121);
    goto LABEL_75;
  }
LABEL_5:
  if ((v124 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v125, 8);
  }
  if ((v129 & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)&v130[0], 8);
  }
  if ((v131[0] & 1) == 0) {
    MEMORY[0x1D25D9CD0](v131[1], 8);
  }
  if ((uint64_t *)v133 != &v135) {
    free((void *)v133);
  }
  if (v114)
  {
    unint64_t v62 = (uint64_t *)v113;
    uint64_t v63 = 8 * v114;
    do
    {
      uint64_t v64 = (void *)sub_1CD296584(a1, *v62, *(unsigned char *)(a2 + 24), &v110);
      v64[5] = a3;
      uint64_t v65 = *(void **)(a3 + 32);
      if (v65)
      {
        *uint64_t v64 = *v65;
        *uint64_t v65 = v64;
      }
      *(void *)(a3 + 32) = v64;
      ++v62;
      v63 -= 8;
    }
    while (v63);
  }
  if (*(_DWORD *)(*(void *)(a1 + 72) + 36) != 2
    && (!*(unsigned char *)(*(void *)(a1 + 192) + 3549) || *(void *)(a1 + 328)))
  {
    unint64_t v133 = *(void *)(a2 + 8);
    size_t v32 = sub_1CD298AE8((uint64_t *)(a1 + 352), &v133);
    uint64_t v33 = *((unsigned int *)v32 + 4);
    if (v33)
    {
      uint64_t v34 = (uint64_t *)v32[1];
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = (void *)sub_1CD2977C8(a1, *v34);
        v36[5] = a3;
        uint64_t v37 = *(void **)(a3 + 32);
        if (v37)
        {
          void *v36 = *v37;
          *uint64_t v37 = v36;
        }
        *(void *)(a3 + 32) = v36;
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  uint64_t v8 = *(void *)(a1 + 200);
  int v9 = *(_DWORD *)(v8 + 376);
  if (v9)
  {
    uint64_t v75 = *(void *)(v8 + 360);
    int v76 = v9 - 1;
    unsigned int v77 = v76 & ((a2 >> 4) ^ (a2 >> 9));
    unint64_t v78 = (uint64_t *)(v75 + 56 * v77);
    uint64_t v79 = *v78;
    if (*v78 == a2)
    {
LABEL_141:
      unint64_t v133 = (unint64_t)&v135;
      uint64_t v134 = 0x400000000;
      if (*((_DWORD *)v78 + 4))
      {
        llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)&v133, (uint64_t)(v78 + 1));
        uint64_t v80 = (uint64_t *)v133;
        if (v134)
        {
          uint64_t v104 = 8 * v134;
          do
          {
            uint64_t v105 = (void *)sub_1CD8A6110((uint64_t *)a1, *v80, a2);
            v105[5] = a3;
            char v106 = *(void **)(a3 + 32);
            if (v106)
            {
              *uint64_t v105 = *v106;
              void *v106 = v105;
            }
            *(void *)(a3 + 32) = v105;
            ++v80;
            v104 -= 8;
          }
          while (v104);
          uint64_t v80 = (uint64_t *)v133;
        }
        if (v80 != &v135) {
          free(v80);
        }
      }
    }
    else
    {
      int v83 = 1;
      while (v79 != -4096)
      {
        unsigned int v84 = v77 + v83++;
        unsigned int v77 = v84 & v76;
        unint64_t v78 = (uint64_t *)(v75 + 56 * v77);
        uint64_t v79 = *v78;
        if (*v78 == a2) {
          goto LABEL_141;
        }
      }
    }
  }
  uint64_t v10 = *(unsigned int *)(a2 + 40);
  if (v10)
  {
    uint64_t v13 = 8 * v10;
    unint64_t v14 = *(uint64_t **)(a2 + 32);
    do
    {
      unsigned int v15 = (void *)*v14;
      unint64_t v16 = *(unsigned char **)(*v14 + 8);
      if (*v16 != 17)
      {
        sub_1CD297540((char *)&v133, *(void *)(*(void *)(a1 + 200) + 336), *(_DWORD *)(*(void *)(a1 + 200) + 352), *v14);
        if (v135) {
          BOOL v66 = 0;
        }
        else {
          BOOL v66 = v137 == 0;
        }
        BOOL v67 = 1;
        if (v66)
        {
          if (*(_DWORD *)(*(void *)(a1 + 72) + 36) == 2
            || *(unsigned char *)(*(void *)(a1 + 192) + 3549) && !*(void *)(a1 + 328)
            || (v131[0] = v15[1], !*((_DWORD *)sub_1CD298AE8((uint64_t *)(a1 + 352), v131) + 4)))
          {
            BOOL v67 = 0;
          }
        }
        if (v136 != v138) {
          free(v136);
        }
        sub_1CB833A08((uint64_t)&v133, (void *)v134);
        unint64_t v21 = a3;
        if (!v67) {
          goto LABEL_41;
        }
        unint64_t v16 = (unsigned char *)v15[1];
        if (!v16) {
          goto LABEL_42;
        }
      }
      if (*v15)
      {
        uint64_t v17 = *(void *)(a1 + 192);
        if (*v16 == 17)
        {
          if (*(unsigned char *)(v17 + 3549) && *(void *)(a1 + 328) && !sub_1CD8A70D8()) {
            unint64_t v18 = (uint64_t *)(a1 + 496);
          }
          else {
            unint64_t v18 = (uint64_t *)(*(void *)(a1 + 200) + 384);
          }
          unint64_t v133 = (unint64_t)v16;
          unint64_t v19 = sub_1CC08B608(v18, &v133)[1];
          *(void *)(a1 + 160) += 48;
          uint64_t v20 = *(void *)(a1 + 80);
          if (((v20 + 7) & 0xFFFFFFFFFFFFFFF8) - v20 + 48 > *(void *)(a1 + 88) - v20)
          {
            unsigned int v38 = *(_DWORD *)(a1 + 104) >> 7;
            if (v38 >= 0x1E) {
              LOBYTE(v3++*(_DWORD *)(result + 8) = 30;
            }
            uint64_t v39 = 4096 << v38;
            unint64_t v21 = (unint64_t)operator new(4096 << v38, (std::align_val_t)8uLL);
            unint64_t v40 = *(unsigned int *)(a1 + 104);
            if (v40 >= *(unsigned int *)(a1 + 108)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(a1 + 96) + 8 * v40) = v21;
            ++*(_DWORD *)(a1 + 104);
            *(void *)(a1 + 8++*(_DWORD *)(result + 8) = v21 + v39;
          }
          else
          {
            unint64_t v21 = (v20 + 7) & 0xFFFFFFFFFFFFFFF8;
          }
          *(void *)(a1 + 80) = v21 + 48;
          *(void *)unint64_t v21 = v21 | 4;
          *(void *)(v21 + ++*(_DWORD *)(result + 8) = 0;
          *(void *)(v21 + 16) = 0;
          *(_DWORD *)(v21 + 24) = -1;
          *(_WORD *)(v21 + 2++*(_DWORD *)(result + 8) = 29;
          *(unsigned char *)(v21 + 30) = 0;
          *(void *)(v21 + 32) = 0;
          *(void *)(v21 + 40) = a3;
          uint64_t v22 = *(unint64_t **)(a3 + 32);
          if (v22)
          {
            *(void *)unint64_t v21 = *v22;
            *uint64_t v22 = v21;
          }
          *(void *)(a3 + 32) = v21;
          sub_1CD2B2BF0(a1, v21, 49, v19);
          sub_1CD296200(a1, v21, (uint64_t)(v15 + 10));
          uint64_t v23 = v15[2];
          uint64_t v24 = *(void *)(v23 - 8 * *(unsigned int *)(v23 + 8));
          if (*(unsigned char *)v24 != 15) {
            uint64_t v24 = *(void *)(v24 - 8 * *(unsigned int *)(v24 + 8));
          }
          unsigned int v25 = sub_1CD293A58(a1, v24);
          if (v25 >= 0x100)
          {
            if (v25 >= 0x10000) {
              __int16 v26 = 6;
            }
            else {
              __int16 v26 = 5;
            }
          }
          else
          {
            __int16 v26 = 11;
          }
          unint64_t v133 = v25;
          sub_1CD2938A0(a1, (unint64_t *)(v21 + 8), 88, v26, &v133);
          unsigned int v27 = *(_DWORD *)(v23 + 4);
          if (v27 >= 0x100)
          {
            if (v27 >= 0x10000) {
              __int16 v28 = 6;
            }
            else {
              __int16 v28 = 5;
            }
          }
          else
          {
            __int16 v28 = 11;
          }
          unint64_t v133 = *(unsigned int *)(v23 + 4);
          sub_1CD2938A0(a1, (unint64_t *)(v21 + 8), 89, v28, &v133);
          unsigned int v29 = *(unsigned __int16 *)(v23 + 2);
          if (*(_WORD *)(v23 + 2))
          {
            unint64_t v133 = *(unsigned __int16 *)(v23 + 2);
            if (v29 >= 0x100) {
              __int16 v31 = 5;
            }
            else {
              __int16 v31 = 11;
            }
            sub_1CD2938A0(a1, (unint64_t *)(v21 + 8), 87, v31, &v133);
          }
          uint64_t v30 = *(void *)(v23 - 8 * *(unsigned int *)(v23 + 8));
          if (*(unsigned char *)v30 == 19)
          {
            unint64_t v41 = *(unsigned int *)(v30 + 24);
            if (v41)
            {
              if (*(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 192) + 8) + 272) + 8)
                                       + 1624) >= 4u)
              {
                if (v41 >= 0x100)
                {
                  if (v41 >= 0x10000) {
                    __int16 v42 = 6;
                  }
                  else {
                    __int16 v42 = 5;
                  }
                }
                else
                {
                  __int16 v42 = 11;
                }
                unint64_t v133 = v41;
                sub_1CD2938A0(a1, (unint64_t *)(v21 + 8), 8502, v42, &v133);
              }
            }
          }
          sub_1CD29AA7C(*(void *)(a1 + 192), *(void *)(a1 + 72), (uint64_t)v16, v21);
          goto LABEL_41;
        }
      }
      else
      {
        uint64_t v17 = *(void *)(a1 + 192);
      }
      if (sub_1CD29AE2C(v17, (uint64_t)v15)) {
        goto LABEL_42;
      }
      uint64_t v81 = (void *)sub_1CD8A6078(a1, (uint64_t)v15);
      unint64_t v21 = (unint64_t)v81;
      v81[5] = a3;
      int8x16_t v82 = *(void **)(a3 + 32);
      if (v82)
      {
        *uint64_t v81 = *v82;
        *int8x16_t v82 = v81;
      }
      *(void *)(a3 + 32) = v81;
LABEL_41:
      sub_1CD295120(a1, v15, v21);
LABEL_42:
      ++v14;
      v13 -= 8;
    }
    while (v13);
  }
  unint64_t v11 = v110;
  if (v113 != v115) {
    free(v113);
  }
  if (v118 != &v120) {
    free(v118);
  }
  sub_1CB833A08((uint64_t)&v116, v117[0]);
  return v11;
}

unint64_t sub_1CD29604C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  void v16[4] = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a1 + 316) = 1;
  uint64_t v5 = *(void *)(a1 + 328);
  if (*(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 192) + 8) + 272) + 8) + 1624) > 4u
    || (unint64_t v6 = *(void *)(a1 + 328), !v5))
  {
    unint64_t v6 = a1;
  }
  uint64_t v7 = *(uint64_t **)(v6 + 200);
  if (v5) {
    uint64_t v8 = *(void *)(a1 + 328);
  }
  else {
    uint64_t v8 = a1;
  }
  v15[0] = v16;
  v15[1] = (void *)0x200000000;
  if (*(_DWORD *)(a3 + 8)) {
    sub_1CD298D88((uint64_t)v15, (const void **)a3);
  }
  unsigned int v9 = sub_1CD2B07F8(v7, v8, (uint64_t)v15);
  unint64_t v11 = v10;
  if (v15[0] != v16) {
    free(v15[0]);
  }
  if (*(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 192) + 8) + 272) + 8) + 1624) >= 5u)
  {
    uint64_t v14 = v9;
    return sub_1CD2938A0(a1, (unint64_t *)(a2 + 8), 85, 35, &v14);
  }
  else
  {
    uint64_t v12 = *(void *)(*(void *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 176) + 248) + 24))(*(void *)(*(void *)(a1 + 176) + 248))
                                + 152)
                    + 8);
    if (*(unsigned char *)(*(void *)(a1 + 192) + 3549) && *(void *)(a1 + 328)) {
      return sub_1CD8B0D34(a1, a2, 85, *v11, v12);
    }
    else {
      return sub_1CD2B636C(a1, a2, 85, (void *)*v11, v12);
    }
  }
}

void sub_1CD296200(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v30[4] = *MEMORY[0x1E4F143B8];
  __int16 v28 = v30;
  uint64_t v29 = 0x200000000;
  unsigned int v5 = *(_DWORD *)(a3 + 8);
  if (v5 >= 3) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v5)
  {
    unint64_t v6 = *(uint64_t **)a3;
    uint64_t v7 = *(void *)a3 + 16 * v5;
    do
    {
      uint64_t v8 = *(void *)(a1 + 192);
      uint64_t v9 = *v6;
      uint64_t v10 = sub_1CD28F688(v8, *v6);
      uint64_t v11 = v6[1];
      uint64_t v12 = sub_1CD28F6F0(v8, v11);
      uint64_t v13 = *(void *)(v9 + 24);
      uint64_t v14 = *(void *)(v11 + 24);
      uint64_t v15 = *(void *)(v14 + 192);
      uint64_t v16 = v13;
      while (1)
      {
        uint64_t v17 = *(void *)(v16 + 192);
        if (v17 == v15 || *(unsigned char *)(v16 + 201))
        {
          uint64_t v18 = *(void *)(a1 + 176) + 352;
          int v25 = HIDWORD(v17) - v17 + 2;
          unint64_t v19 = (uint64_t *)sub_1CD2817E4(v18, &v25);
          uint64_t v20 = *(void *)(v16 + 192);
          if (v20 == *(void *)(v13 + 192)) {
            uint64_t v21 = v10;
          }
          else {
            uint64_t v21 = *v19;
          }
          if (v20 == *(void *)(v14 + 192)) {
            uint64_t v22 = v12;
          }
          else {
            uint64_t v22 = v19[1];
          }
          if (v29 >= (unint64_t)HIDWORD(v29)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v23 = (uint64_t *)((char *)v28 + 16 * v29);
          *uint64_t v23 = v21;
          v23[1] = v22;
          LODWORD(v29) = v29 + 1;
          uint64_t v17 = *(void *)(v16 + 192);
          uint64_t v15 = *(void *)(v14 + 192);
        }
        if (v17 == v15) {
          break;
        }
        if (*(void *)(v16 + 8) == *(void *)(v16 + 32) + 320) {
          uint64_t v16 = 0;
        }
        else {
          uint64_t v16 = *(void *)(v16 + 8);
        }
      }
      v6 += 2;
    }
    while (v6 != (uint64_t *)v7);
  }
  v26[0] = v27;
  v26[1] = (void *)0x200000000;
  if (v29) {
    sub_1CD298D88((uint64_t)v26, (const void **)&v28);
  }
  sub_1CD294F94(a1, a2, (uint64_t)v26);
  if (v26[0] != v27) {
    free(v26[0]);
  }
  if (v28 != v30) {
    free(v28);
  }
}

unint64_t sub_1CD296434(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = *(unsigned int **)(a2 + 8);
  uint64_t v7 = *(void *)&v6[-2 * v6[2] + 2];
  if (v7)
  {
    uint64_t v8 = *(size_t **)(v7 + 8);
    if (*v8)
    {
      sub_1CD2B2780(a1, a3, 3, v8 + 3, *v8);
      unint64_t v6 = *(unsigned int **)(a2 + 8);
    }
  }
  unint64_t v9 = v6[7];
  if (v9 >= 8)
  {
    unint64_t v13 = v9 >> 3;
    sub_1CD2938A0((unint64_t)a1, (unint64_t *)(a3 + 8), 136, 15, &v13);
  }
  sub_1CD2B48E8((uint64_t)a1, a3, *(void *)&v6[-2 * v6[2] + 8]);
  sub_1CD2B3164((unint64_t)a1, a3, v6[6], *(void *)&v6[-2 * v6[2] + 4]);
  unint64_t v10 = sub_1CD2B35BC(a1, *(void *)(*(void *)(a2 + 8) - 8 * *(unsigned int *)(*(void *)(a2 + 8) + 8) + 24));
  unint64_t result = sub_1CD2B2BF0((unint64_t)a1, a3, 73, v10);
  uint64_t v12 = *(void *)(a2 + 8);
  if ((*(unsigned char *)(v12 + 36) & 0x40) != 0
    || (*(unsigned char *)(*(void *)(v12 - 8 * *(unsigned int *)(v12 + 8) + 24) + 28) & 0x40) != 0)
  {
    return sub_1CD2B26C0((unint64_t)a1, a3, 52);
  }
  return result;
}

unint64_t sub_1CD296584(unint64_t a1, uint64_t a2, char a3, unint64_t *a4)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = a1 + 80;
  uint64_t v8 = *(void *)(a1 + 80);
  uint64_t v10 = *(void *)(a2 + 8);
  if (*(_WORD *)(v10 + 32)) {
    __int16 v11 = 5;
  }
  else {
    __int16 v11 = 52;
  }
  *(void *)(a1 + 160) += 48;
  if (((v8 + 7) & 0xFFFFFFFFFFFFFFF8) - v8 + 48 > *(void *)(a1 + 88) - v8)
  {
    unsigned int v58 = *(_DWORD *)(a1 + 104) >> 7;
    if (v58 >= 0x1E) {
      LOBYTE(v5++*(_DWORD *)(result + 8) = 30;
    }
    uint64_t v59 = 4096 << v58;
    unint64_t v12 = (unint64_t)operator new(4096 << v58, (std::align_val_t)8uLL);
    unsigned int v60 = *(_DWORD *)(a1 + 104);
    if (v60 >= *(_DWORD *)(a1 + 108)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 96) + 8 * v60) = v12;
    ++*(_DWORD *)(a1 + 104);
    *(void *)(a1 + 8++*(_DWORD *)(result + 8) = v12 + v59;
    uint64_t v10 = *(void *)(a2 + 8);
  }
  else
  {
    unint64_t v12 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 80) = v12 + 48;
  *(void *)unint64_t v12 = v12 | 4;
  *(void *)(v12 + ++*(_DWORD *)(result + 8) = 0;
  *(void *)(v12 + 16) = 0;
  *(_DWORD *)(v12 + 24) = -1;
  *(_WORD *)(v12 + 2++*(_DWORD *)(result + 8) = v11;
  *(unsigned char *)(v12 + 30) = 0;
  *(void *)(v12 + 32) = 0;
  *(void *)(v12 + 40) = 0;
  sub_1CD2B2658((void *)a1, (unsigned __int8 *)v10, v12);
  if (a3)
  {
    sub_1CD296434((uint64_t *)a1, a2, v12);
    goto LABEL_8;
  }
  uint64_t v15 = (void (**)(void))*(unsigned int *)(a2 + 36);
  if (v15 != -1)
  {
    uint64_t v16 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 192) + 8) + 272) + 8);
    unsigned int v17 = *(unsigned __int16 *)(v16 + 1624);
    if (v17 > 4)
    {
      __int16 v18 = 34;
    }
    else if (v17 == 4)
    {
      __int16 v18 = 23;
    }
    else if (*(unsigned char *)(v16 + 1626) == 1)
    {
      __int16 v18 = 7;
    }
    else
    {
      __int16 v18 = 6;
    }
    if ((*(_WORD *)(*(void *)(*(void *)(a1 + 176) + 248) + 1064) & 0x40) == 0
      || llvm::dwarf::AttributeVersion(2) <= v17)
    {
      LODWORD(v98[0]) = 10;
      WORD2(v98[0]) = 2;
      HIWORD(v98[0]) = v18;
      v98[1] = v15;
      sub_1CD298EC8((unint64_t *)(v12 + 8), v9, (int *)v98);
    }
    if (*(unsigned __int16 *)(a2 + 40) >= 0x100u)
    {
      v98[0] = (void (**)(void))*(_WORD *)(a2 + 40);
      sub_1CD2938A0(a1, (unint64_t *)(v12 + 8), 15875, 11, v98);
    }
    goto LABEL_8;
  }
  uint64_t v19 = *(void *)(a2 + 48);
  uint64_t v94 = v19;
  if (!v19)
  {
    if (!*(_DWORD *)(a2 + 64)) {
      goto LABEL_8;
    }
    *(void *)(a1 + 160) += 16;
    uint64_t v32 = *(void *)(a1 + 80);
    if (((v32 + 7) & 0xFFFFFFFFFFFFFFF8) - v32 + 16 > *(void *)(a1 + 88) - v32)
    {
      unsigned int v84 = *(_DWORD *)(a1 + 104) >> 7;
      if (v84 >= 0x1E) {
        LOBYTE(v84) = 30;
      }
      uint64_t v85 = 4096 << v84;
      uint64_t v33 = (uint64_t)operator new(4096 << v84, (std::align_val_t)8uLL);
      unsigned int v86 = *(_DWORD *)(a1 + 104);
      if (v86 >= *(_DWORD *)(a1 + 108)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a1 + 96) + 8 * v86) = v33;
      ++*(_DWORD *)(a1 + 104);
      *(void *)(a1 + 8++*(_DWORD *)(result + 8) = v33 + v85;
    }
    else
    {
      uint64_t v33 = (v32 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(a1 + 80) = v33 + 16;
    *(void *)uint64_t v33 = 0;
    *(_DWORD *)(v33 + ++*(_DWORD *)(result + 8) = 0;
    sub_1CD2B20CC((uint64_t)v98, *(void *)(a1 + 176), a1, v33);
    uint64_t v34 = sub_1CD8A6F64(a2);
    if (v35)
    {
      uint64_t v87 = 0;
      uint64_t v88 = (unint64_t *)v33;
      uint64_t v36 = 16 * v35;
      uint64_t v37 = (llvm::MDNode **)(v34 + 8);
      do
      {
        LODWORD(v94) = 0;
        unsigned int v38 = *v37;
        uint64_t v39 = *(void *)(*(void *)(*(void *)(a1 + 176) + 280) + 16);
        uint64_t v40 = (*(uint64_t (**)(uint64_t))(*(void *)v39 + 112))(v39);
        unint64_t v92 = (*(uint64_t (**)(uint64_t, void, void, uint64_t *))(*(void *)v40 + 232))(v40, *(void *)(*(void *)(a1 + 176) + 280), *((unsigned int *)v37 - 2), &v94);
        uint64_t v93 = v41;
        sub_1CD2B0120(v98, (uint64_t)v38);
        uint64_t v42 = *(void *)(*(void *)(*(void *)(a1 + 176) + 280) + 16);
        uint64_t v43 = (*(uint64_t (**)(uint64_t))(*(void *)v42 + 176))(v42);
        unint64_t v95 = v97;
        uint64_t v96 = 0x800000000;
        (*(void (**)(void))(*(void *)v43 + 488))();
        unsigned int v89 = 0;
        if ((*(_DWORD *)(*(void *)(*(void *)(a1 + 176) + 248) + 472) & 0xFFFFFFFE) == 0x2C
          && *(_DWORD *)(*(void *)(a1 + 192) + 5512) == 1)
        {
          AddressClass = llvm::DIExpression::extractAddressClass(v38, (const llvm::DIExpression *)&v89, v44);
          if (AddressClass != v38)
          {
            uint64_t v87 = v89 | 0x100000000;
            unsigned int v38 = AddressClass;
          }
        }
        if (v38) {
          sub_1CBFCBB74((unsigned int *)&v95, *((unsigned char **)v38 + 3), *((unsigned char **)v38 + 4));
        }
        unint64_t v90 = (unint64_t)v95;
        unint64_t v91 = (uint64_t *)((char *)v95 + 8 * v96);
        unsigned __int16 v102 = ((v101 | ((unint64_t)v102 << 32)) & 0xFFFFFFF8FFFFFFFFLL | 0x200000000) >> 32;
        uint64_t v45 = (*(uint64_t (**)(void))(**(void **)(a1 + 176) + 176))(*(void *)(a1 + 176));
        if (v45)
        {
          sub_1CD8AEAC4(a1, v88, v45);
        }
        else
        {
          uint64_t v46 = *(void *)(*(void *)(*(void *)(a1 + 176) + 280) + 16);
          int v47 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v46 + 176))(v46);
          sub_1CD2AECCC((uint64_t)v98, v47, (uint64_t)&v90, v94);
        }
        sub_1CD2AF934((uint64_t)v98, (llvm::DIExpression::ExprOperand *)&v90);
        if (v95 != v97) {
          free(v95);
        }
        v37 += 2;
        v36 -= 16;
      }
      while (v36);
    }
    else
    {
      uint64_t v87 = 0;
    }
    if ((*(_DWORD *)(*(void *)(*(void *)(a1 + 176) + 248) + 472) & 0xFFFFFFFE) == 0x2C
      && *(_DWORD *)(*(void *)(a1 + 192) + 5512) == 1)
    {
      uint64_t v71 = v87;
      if (!HIDWORD(v87)) {
        uint64_t v71 = 6;
      }
      unint64_t v95 = (void *)v71;
      sub_1CD2938A0(a1, (unint64_t *)(v12 + 8), 51, 11, &v95);
    }
LABEL_94:
    if (v101 >= 0x10000 && (_WORD)v101) {
      sub_1CD8AD320(v98, (unsigned __int16)v101, HIWORD(v101));
    }
    sub_1CD2B2F80(a1, v12, 2, v105);
    if (v104)
    {
      unint64_t v95 = (void *)v103;
      uint64_t v30 = &v95;
      goto LABEL_40;
    }
LABEL_41:
    v98[0] = (void (**)(void))&unk_1F2649AF8;
    __int16 v31 = v99;
LABEL_42:
    if (v31 != &v100) {
      free(v31);
    }
    goto LABEL_8;
  }
  uint64_t v20 = *(void *)(v19 + 8);
  if (!*(unsigned char *)(v19 + 72))
  {
    switch(*(_DWORD *)v20)
    {
      case 0:
        int v49 = *(void (*****)(void))(v20 + 16);
        unint64_t v90 = (unint64_t)v49;
        if (*(_DWORD *)(a2 + 64))
        {
          *(void *)(a1 + 160) += 16;
          uint64_t v50 = *(void *)(a1 + 80);
          if (((v50 + 7) & 0xFFFFFFFFFFFFFFF8) - v50 + 16 > *(void *)(a1 + 88) - v50)
          {
            unsigned int v75 = *(_DWORD *)(a1 + 104) >> 7;
            if (v75 >= 0x1E) {
              LOBYTE(v75) = 30;
            }
            uint64_t v76 = 4096 << v75;
            uint64_t v51 = (uint64_t)operator new(4096 << v75, (std::align_val_t)8uLL);
            unsigned int v77 = *(_DWORD *)(a1 + 104);
            if (v77 >= *(_DWORD *)(a1 + 108)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(a1 + 96) + 8 * v77) = v51;
            ++*(_DWORD *)(a1 + 104);
            *(void *)(a1 + 8++*(_DWORD *)(result + 8) = v51 + v76;
          }
          else
          {
            uint64_t v51 = (v50 + 7) & 0xFFFFFFFFFFFFFFF8;
          }
          *(void *)(a1 + 80) = v51 + 16;
          *(void *)uint64_t v51 = 0;
          *(_DWORD *)(v51 + ++*(_DWORD *)(result + 8) = 0;
          sub_1CD2B20CC((uint64_t)v98, *(void *)(a1 + 176), a1, v51);
          if (*(_DWORD *)(a2 + 64)) {
            uint64_t v52 = *(void *)(*(void *)(a2 + 56) + 8);
          }
          else {
            uint64_t v52 = 0;
          }
          sub_1CD2B0120(v98, v52);
          sub_1CD2AF890((uint64_t)v98, &v90, v52);
          unint64_t v95 = 0;
          uint64_t v96 = 0;
          if (v52)
          {
            int v53 = *(void **)(v52 + 24);
            uint64_t v54 = *(void *)(v52 + 32);
            uint64_t v55 = v54 - (void)v53;
            unint64_t v95 = v53;
            uint64_t v96 = v54;
          }
          else
          {
            int v53 = (void *)MEMORY[0x18];
            uint64_t v55 = MEMORY[0x20] - MEMORY[0x18];
          }
          if ((v55 & 0x7FFFFFFF8) != 0 && *v53 == 4099) {
            sub_1CD8AD84C((uint64_t)v98, (uint64_t **)&v95);
          }
          uint64_t v56 = *(void *)(*(void *)(*(void *)(a1 + 176) + 280) + 16);
          uint64_t v57 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v56 + 176))(v56);
          if (sub_1CD2AECCC((uint64_t)v98, v57, (uint64_t)&v95, HIDWORD(v49)))
          {
            sub_1CD2AF934((uint64_t)v98, (llvm::DIExpression::ExprOperand *)&v95);
            if (v101 >= 0x10000 && (_WORD)v101) {
              sub_1CD8AD320(v98, (unsigned __int16)v101, HIWORD(v101));
            }
            sub_1CD2B2F80(a1, v12, 2, v105);
            if (v104)
            {
              unint64_t v92 = v103;
              sub_1CD2938A0(a1, (unint64_t *)(v12 + 8), 15875, 11, &v92);
            }
          }
          goto LABEL_108;
        }
        sub_1CD8A5EDC(a1, v12, 2, (uint64_t)&v90);
        goto LABEL_8;
      case 1:
        if (!*(_DWORD *)(a2 + 64)
          || (uint64_t v61 = *(void *)(*(void *)(a2 + 56) + 8)) == 0
          || ((*(void *)(v61 + 32) - *(void *)(v61 + 24)) & 0x7FFFFFFF8) == 0)
        {
          sub_1CD8AEE34(a1, v12, *(void *)(v20 + 8), *(void *)(*(void *)(a2 + 8) - 8 * *(unsigned int *)(*(void *)(a2 + 8) + 8) + 24));
          goto LABEL_8;
        }
        *(void *)(a1 + 160) += 16;
        uint64_t v62 = *(void *)(a1 + 80);
        if (((v62 + 7) & 0xFFFFFFFFFFFFFFF8) - v62 + 16 > *(void *)(a1 + 88) - v62)
        {
          unsigned int v81 = *(_DWORD *)(a1 + 104) >> 7;
          if (v81 >= 0x1E) {
            LOBYTE(v81) = 30;
          }
          uint64_t v82 = 4096 << v81;
          uint64_t v63 = (uint64_t)operator new(4096 << v81, (std::align_val_t)8uLL);
          unsigned int v83 = *(_DWORD *)(a1 + 104);
          if (v83 >= *(_DWORD *)(a1 + 108)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(a1 + 96) + 8 * v83) = v63;
          ++*(_DWORD *)(a1 + 104);
          *(void *)(a1 + 8++*(_DWORD *)(result + 8) = v63 + v82;
        }
        else
        {
          uint64_t v63 = (v62 + 7) & 0xFFFFFFFFFFFFFFF8;
        }
        *(void *)(a1 + 80) = v63 + 16;
        *(void *)uint64_t v63 = 0;
        *(_DWORD *)(v63 + ++*(_DWORD *)(result + 8) = 0;
        sub_1CD2B20CC((uint64_t)v98, *(void *)(a1 + 176), a1, v63);
        sub_1CD2B0120(v98, v61);
        unint64_t v64 = *(void *)(v20 + 8);
        unsigned __int16 v102 = ((v101 | ((unint64_t)v102 << 32)) & 0xFFFFFFF8FFFFFFFFLL | 0x300000000) >> 32;
        sub_1CD2AE980(v98, v64);
        uint64_t v65 = *(void *)(v61 + 32);
        unint64_t v95 = *(void **)(v61 + 24);
        uint64_t v96 = v65;
        sub_1CD2AF934((uint64_t)v98, (llvm::DIExpression::ExprOperand *)&v95);
        break;
      case 2:
        sub_1CD8AEDBC(a1, v12, *(void *)(v20 + 8));
        goto LABEL_8;
      case 3:
        uint64_t v69 = (uint64_t *)(*(void *)(v20 + 8) + 24);
        int v70 = sub_1CD28F7C0(*(void *)(*(void *)(a2 + 8) - 8 * *(unsigned int *)(*(void *)(a2 + 8) + 8) + 24));
        sub_1CD2B3238(a1, v12, v69, v70);
        goto LABEL_8;
      case 4:
        *(void *)(a1 + 160) += 16;
        uint64_t v66 = *(void *)(a1 + 80);
        if (((v66 + 7) & 0xFFFFFFFFFFFFFFF8) - v66 + 16 > *(void *)(a1 + 88) - v66)
        {
          unsigned int v78 = *(_DWORD *)(a1 + 104) >> 7;
          if (v78 >= 0x1E) {
            LOBYTE(v7++*(_DWORD *)(result + 8) = 30;
          }
          uint64_t v79 = 4096 << v78;
          uint64_t v67 = (uint64_t)operator new(4096 << v78, (std::align_val_t)8uLL);
          unsigned int v80 = *(_DWORD *)(a1 + 104);
          if (v80 >= *(_DWORD *)(a1 + 108)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(a1 + 96) + 8 * v80) = v67;
          ++*(_DWORD *)(a1 + 104);
          *(void *)(a1 + 8++*(_DWORD *)(result + 8) = v67 + v79;
        }
        else
        {
          uint64_t v67 = (v66 + 7) & 0xFFFFFFFFFFFFFFF8;
        }
        *(void *)(a1 + 80) = v67 + 16;
        *(void *)uint64_t v67 = 0;
        *(_DWORD *)(v67 + ++*(_DWORD *)(result + 8) = 0;
        sub_1CD2B20CC((uint64_t)v98, *(void *)(a1 + 176), a1, v67);
        if (**(unsigned char **)(*(void *)(a2 + 8) - 8 * *(unsigned int *)(*(void *)(a2 + 8) + 8) + 24) == 11) {
          uint64_t v68 = *(void *)(*(void *)(a2 + 8) - 8 * *(unsigned int *)(*(void *)(a2 + 8) + 8) + 24);
        }
        else {
          uint64_t v68 = 0;
        }
        sub_1CD2A2090(*(void *)(a1 + 176), v68, v19, v98);
        if (v101 >= 0x10000 && (_WORD)v101) {
          sub_1CD8AD320(v98, (unsigned __int16)v101, HIWORD(v101));
        }
        sub_1CD2B2F80(a1, v12, 2, v105);
LABEL_108:
        v98[0] = (void (**)(void))&unk_1F2649AF8;
        __int16 v31 = v99;
        goto LABEL_42;
      default:
        goto LABEL_8;
    }
    goto LABEL_94;
  }
  unsigned int v21 = *(_DWORD *)(v19 + 16);
  if (!v21)
  {
LABEL_28:
    if (*(_DWORD *)(a2 + 64)) {
      uint64_t v24 = *(void *)(*(void *)(a2 + 56) + 8);
    }
    else {
      uint64_t v24 = 0;
    }
    *(void *)(a1 + 160) += 16;
    uint64_t v25 = *(void *)(a1 + 80);
    if (((v25 + 7) & 0xFFFFFFFFFFFFFFF8) - v25 + 16 > *(void *)(a1 + 88) - v25)
    {
      unsigned int v72 = *(_DWORD *)(a1 + 104) >> 7;
      if (v72 >= 0x1E) {
        LOBYTE(v72) = 30;
      }
      uint64_t v73 = 4096 << v72;
      uint64_t v26 = (uint64_t)operator new(4096 << v72, (std::align_val_t)8uLL);
      unsigned int v74 = *(_DWORD *)(a1 + 104);
      if (v74 >= *(_DWORD *)(a1 + 108)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a1 + 96) + 8 * v74) = v26;
      ++*(_DWORD *)(a1 + 104);
      *(void *)(a1 + 8++*(_DWORD *)(result + 8) = v26 + v73;
    }
    else
    {
      uint64_t v26 = (v25 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(a1 + 80) = v26 + 16;
    *(void *)uint64_t v26 = 0;
    *(_DWORD *)(v26 + ++*(_DWORD *)(result + 8) = 0;
    sub_1CD2B20CC((uint64_t)v98, *(void *)(a1 + 176), a1, v26);
    sub_1CD2B0120(v98, v24);
    unint64_t v95 = 0;
    uint64_t v96 = 0;
    if (v24)
    {
      uint64_t v27 = *(void *)(v24 + 32);
      unint64_t v95 = *(void **)(v24 + 24);
      uint64_t v96 = v27;
    }
    uint64_t v28 = *(void *)(*(void *)(*(void *)(a1 + 176) + 280) + 16);
    uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 176))(v28);
    unint64_t v92 = (unint64_t)v98;
    uint64_t v93 = v29;
    unint64_t v90 = (unint64_t)&v92;
    unint64_t v91 = &v94;
    if (sub_1CD2AF968((uint64_t)v98, (llvm::DIExpression::ExprOperand *)&v95, (uint64_t (*)(uint64_t, void, llvm::DIExpression::ExprOperand *))sub_1CD2991CC, (uint64_t)&v90))
    {
      if (v101 >= 0x10000 && (_WORD)v101) {
        sub_1CD8AD320(v98, (unsigned __int16)v101, HIWORD(v101));
      }
      sub_1CD2B2F80(a1, v12, 2, v105);
      if (v104)
      {
        unint64_t v90 = v103;
        uint64_t v30 = (void **)&v90;
LABEL_40:
        sub_1CD2938A0(a1, (unint64_t *)(v12 + 8), 15875, 11, v30);
        goto LABEL_41;
      }
    }
    goto LABEL_41;
  }
  uint64_t v22 = v20 + 24 * v21;
  while (*(_DWORD *)v20 || HIDWORD(*(void *)(v20 + 16)) != 0)
  {
    v20 += 24;
    if (v20 == v22) {
      goto LABEL_28;
    }
  }
LABEL_8:
  *(void *)(a2 + 24) = v12;
  uint64_t v13 = *(void *)(a2 + 8);
  if ((*(unsigned char *)(v13 + 37) & 4) != 0
    || (*(unsigned char *)(*(void *)(v13 - 8 * *(unsigned int *)(v13 + 8) + 24) + 29) & 4) != 0)
  {
    *a4 = v12;
  }
  return v12;
}

unint64_t sub_1CD2973CC(void *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1CD294A00(a1, a2);
  unint64_t v7 = v6;
  while (1)
  {
    unsigned int v8 = *(unsigned __int16 *)(v7 + 28) - 17;
    BOOL v9 = v8 > 0x39;
    uint64_t v10 = (1 << v8) & 0x201000000000001;
    if (!v9 && v10 != 0) {
      break;
    }
    unint64_t v13 = 0;
    uint64_t v12 = *(void *)(v7 + 40);
    if ((v12 & 4) == 0)
    {
      unint64_t v7 = v12 & 0xFFFFFFFFFFFFFFF8;
      if (v7) {
        continue;
      }
    }
    goto LABEL_9;
  }
  unint64_t v13 = *(void *)(v7 + 40) & ((uint64_t)(*(void *)(v7 + 40) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
LABEL_9:
  if (a3)
  {
    unint64_t v14 = sub_1CD295120(v13, a3, v6);
    if (v14) {
      sub_1CD2B2BF0(v13, v6, 100, v14);
    }
  }
  uint64_t v15 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32);
  uint64_t v16 = *(void *)(v15 - 8 * *(unsigned int *)(v15 + 8) + 24);
  if (v16)
  {
    uint64_t v17 = *(unsigned int *)(v16 + 8);
    if (v17 >= 2
      && !*(void *)(v16 - 8 * v17 + 8 * (v17 - 1))
      && *(_DWORD *)(a1[9] + 36) != 2
      && (!*(unsigned char *)(a1[24] + 3549) || a1[41]))
    {
      uint64_t v19 = sub_1CB906F34(a1 + 10, 48, 3);
      *(void *)(v19 + ++*(_DWORD *)(result + 8) = 0;
      *(void *)(v19 + 16) = 0;
      *(void *)uint64_t v19 = v19 | 4;
      *(_DWORD *)(v19 + 24) = -1;
      *(_WORD *)(v19 + 2++*(_DWORD *)(result + 8) = 24;
      *(unsigned char *)(v19 + 30) = 0;
      *(void *)(v19 + 32) = 0;
      *(void *)(v19 + 40) = v6;
      uint64_t v20 = *(uint64_t **)(v6 + 32);
      if (v20)
      {
        *(void *)uint64_t v19 = *v20;
        uint64_t *v20 = v19;
      }
      *(void *)(v6 + 32) = v19;
    }
  }
  return v6;
}

char *sub_1CD297540(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4 = result;
  if (!a3)
  {
LABEL_2:
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8++*(_DWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(_DWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = result + 8;
    *((void *)result + 3) = result + 40;
    *((_DWORD *)result + 9) = 8;
    return result;
  }
  unsigned int v5 = ((a4 >> 4) ^ (a4 >> 9)) & (a3 - 1);
  unint64_t v6 = (uint64_t *)(a2 + 112 * v5);
  uint64_t v7 = *v6;
  if (*v6 != a4)
  {
    int v8 = 1;
    while (v7 != -4096)
    {
      unsigned int v9 = v5 + v8++;
      unsigned int v5 = v9 & (a3 - 1);
      unint64_t v6 = (uint64_t *)(a2 + 112 * v5);
      uint64_t v7 = *v6;
      if (*v6 == a4) {
        goto LABEL_8;
      }
    }
    goto LABEL_2;
  }
LABEL_8:
  *((void *)result + 1) = 0;
  uint64_t v10 = result + 8;
  *((void *)result + 2) = 0;
  *(void *)unint64_t result = result + 8;
  __int16 v11 = (uint64_t *)v6[1];
  if (v11 != v6 + 2)
  {
    while (1)
    {
      unsigned int v12 = *((_DWORD *)v11 + 8);
      uint64_t v13 = *((void *)v4 + 1);
      unint64_t v14 = v4 + 8;
      if (*(char **)v4 != v10)
      {
        uint64_t v21 = *((void *)v4 + 1);
        uint64_t v22 = v4 + 8;
        if (v13)
        {
          do
          {
            unint64_t v14 = (char *)v21;
            uint64_t v21 = *(void *)(v21 + 8);
          }
          while (v21);
        }
        else
        {
          do
          {
            unint64_t v14 = (char *)*((void *)v22 + 2);
            BOOL v27 = *(void *)v14 == (void)v22;
            uint64_t v22 = v14;
          }
          while (v27);
        }
        if (*((_DWORD *)v14 + 8) >= v12) {
          break;
        }
      }
      if (v13) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = v4 + 8;
      }
      if (v13) {
        uint64_t v16 = v14 + 8;
      }
      else {
        uint64_t v16 = v4 + 8;
      }
      if (!*(void *)v16) {
        goto LABEL_17;
      }
LABEL_20:
      uint64_t v19 = (uint64_t *)v11[1];
      if (v19)
      {
        do
        {
          uint64_t v20 = v19;
          uint64_t v19 = (uint64_t *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          uint64_t v20 = (uint64_t *)v11[2];
          BOOL v27 = *v20 == (void)v11;
          __int16 v11 = v20;
        }
        while (!v27);
      }
      __int16 v11 = v20;
      if (v20 == v6 + 2) {
        goto LABEL_37;
      }
    }
    uint64_t v16 = v4 + 8;
    uint64_t v15 = v4 + 8;
    if (v13)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v15 = (char *)v13;
          unsigned int v23 = *(_DWORD *)(v13 + 32);
          if (v23 <= v12) {
            break;
          }
          uint64_t v13 = *(void *)v15;
          uint64_t v16 = v15;
          if (!*(void *)v15) {
            goto LABEL_17;
          }
        }
        if (v23 >= v12) {
          goto LABEL_20;
        }
        uint64_t v13 = *((void *)v15 + 1);
        if (!v13)
        {
          uint64_t v16 = v15 + 8;
          break;
        }
      }
    }
LABEL_17:
    uint64_t v17 = operator new(0x30uLL);
    void v17[2] = *((_OWORD *)v11 + 2);
    *(void *)uint64_t v17 = 0;
    *((void *)v17 + 1) = 0;
    *((void *)v17 + 2) = v15;
    *(void *)uint64_t v16 = v17;
    uint64_t v18 = **(void **)v4;
    if (v18)
    {
      *(void *)uint64_t v4 = v18;
      uint64_t v17 = *(_OWORD **)v16;
    }
    unint64_t result = (char *)sub_1CB8358B8(*((uint64_t **)v4 + 1), (uint64_t *)v17);
    ++*((void *)v4 + 2);
    goto LABEL_20;
  }
LABEL_37:
  *((void *)v4 + 3) = v4 + 40;
  uint64_t v24 = (void **)(v4 + 24);
  *((void *)v4 + 4) = 0x800000000;
  unsigned int v25 = *((_DWORD *)v6 + 10);
  uint64_t v26 = (const void **)(v6 + 4);
  if (v25) {
    BOOL v27 = v24 == (void **)v26;
  }
  else {
    BOOL v27 = 1;
  }
  if (!v27)
  {
    if (v25 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unint64_t result = (char *)memcpy(*v24, *v26, 8 * *((unsigned int *)v6 + 10));
    *((_DWORD *)v4 + ++*(_DWORD *)(result + 8) = v25;
  }
  return result;
}

unint64_t sub_1CD2977C8(unint64_t a1, uint64_t a2)
{
  __int16 v4 = *(_WORD *)(a2 + 2);
  *(void *)(a1 + 160) += 48;
  uint64_t v5 = *(void *)(a1 + 80);
  if (((v5 + 7) & 0xFFFFFFFFFFFFFFF8) - v5 + 48 > *(void *)(a1 + 88) - v5)
  {
    unsigned int v19 = *(_DWORD *)(a1 + 104) >> 7;
    if (v19 >= 0x1E) {
      LOBYTE(v19) = 30;
    }
    uint64_t v20 = 4096 << v19;
    unint64_t v6 = (unint64_t)operator new(4096 << v19, (std::align_val_t)8uLL);
    unsigned int v21 = *(_DWORD *)(a1 + 104);
    if (v21 >= *(_DWORD *)(a1 + 108)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 96) + 8 * v21) = v6;
    ++*(_DWORD *)(a1 + 104);
    *(void *)(a1 + 8++*(_DWORD *)(result + 8) = v6 + v20;
  }
  else
  {
    unint64_t v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 80) = v6 + 48;
  *(void *)(v6 + ++*(_DWORD *)(result + 8) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)unint64_t v6 = v6 | 4;
  *(_DWORD *)(v6 + 24) = -1;
  *(_WORD *)(v6 + 2++*(_DWORD *)(result + 8) = v4;
  *(unsigned char *)(v6 + 30) = 0;
  *(void *)(v6 + 32) = 0;
  uint64_t v7 = (void **)(v6 + 32);
  *(void *)(v6 + 40) = 0;
  sub_1CD2B2658((void *)a1, (unsigned __int8 *)a2, v6);
  int v8 = *(unsigned __int8 **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  int v9 = *v8;
  if (v9 == 21)
  {
    uint64_t v10 = sub_1CD2B3910((uint64_t *)a1, (uint64_t)v8);
  }
  else
  {
    switch(*v8)
    {
      case 0xBu:
      case 0xCu:
      case 0xDu:
      case 0xEu:
        goto LABEL_26;
      case 0xFu:
      case 0x10u:
      case 0x12u:
      case 0x13u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
        goto LABEL_27;
      case 0x11u:
        uint64_t v10 = sub_1CD2B37E8((void *)a1, (uint64_t)v8, 0);
        break;
      case 0x14u:
        uint64_t v10 = sub_1CD2B36B4((uint64_t *)a1, (uint64_t)v8);
        break;
      case 0x18u:
        uint64_t v10 = sub_1CD8A5AAC((uint64_t *)a1, (uint64_t)v8, 0, 0);
        break;
      default:
        if (v9 == 33) {
LABEL_26:
        }
          uint64_t v10 = sub_1CD2B35BC((uint64_t *)a1, (uint64_t)v8);
        else {
LABEL_27:
        }
          uint64_t v10 = sub_1CD2B25F0((void *)a1, v8);
        break;
    }
  }
  unint64_t v11 = v10;
  sub_1CD2B3164(a1, v6, *(_DWORD *)(a2 + 24), *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24));
  sub_1CD2B2BF0(a1, v6, 24, v11);
  uint64_t v12 = *(unsigned int *)(a2 + 8);
  uint64_t v13 = -v12;
  uint64_t v14 = *(void *)(a2 - 8 * v12 + 16);
  if (v14)
  {
    uint64_t v18 = *(size_t **)(v14 + 8);
    if (*v18)
    {
      sub_1CD2B2780((uint64_t *)a1, v6, 3, v18 + 3, *v18);
      uint64_t v13 = -(uint64_t)*(unsigned int *)(a2 + 8);
    }
  }
  uint64_t v15 = *(void *)(a2 + 8 * v13 + 32);
  if (v15) {
    uint64_t v16 = (void *)(v15 - 8 * *(unsigned int *)(v15 + 8));
  }
  else {
    uint64_t v16 = 0;
  }
  while (v16 != (void *)v15)
  {
    if (*v16)
    {
      uint64_t v22 = (void *)sub_1CD2977C8(a1);
      v22[5] = v6 & 0xFFFFFFFFFFFFFFFBLL;
      unsigned int v23 = *v7;
      if (*v7)
      {
        *uint64_t v22 = *v23;
        *unsigned int v23 = v22;
      }
      *uint64_t v7 = v22;
    }
    ++v16;
  }
  return v6;
}

unint64_t sub_1CD297A8C(uint64_t *a1, uint64_t a2)
{
  if (*(unsigned char *)(a1[24] + 3549) && a1[41] && (sub_1CD8A70D8() & 1) == 0) {
    __int16 v4 = a1 + 62;
  }
  else {
    __int16 v4 = (uint64_t *)(a1[25] + 384);
  }
  uint64_t v23 = *(void *)(a2 + 8);
  unint64_t result = (unint64_t)sub_1CC08B608(v4, &v23);
  if (!*(void *)(result + 8))
  {
    unint64_t v6 = result;
    uint64_t v7 = *(void *)(a2 + 8);
    if (*(_DWORD *)(a1[9] + 36) == 2 || *(unsigned char *)(a1[24] + 3549) && !a1[41])
    {
      uint64_t v8 = (uint64_t)(a1 + 1);
    }
    else
    {
      uint64_t v14 = v7 - 8 * *(unsigned int *)(v7 + 8);
      uint64_t v15 = *(void *)(v14 + 48);
      if (!v15)
      {
        uint64_t v16 = sub_1CD2B352C(a1, *(unsigned __int8 **)(v14 + 8));
        uint64_t v8 = v16;
        uint64_t v17 = a1[24];
        if (v16)
        {
          unint64_t v18 = v16;
          while (1)
          {
            int v19 = *(unsigned __int16 *)(v18 + 28);
            if (v19 == 17 || v19 == 65 || v19 == 74) {
              break;
            }
            unint64_t v20 = 0;
            uint64_t v21 = *(void *)(v18 + 40);
            if ((v21 & 4) == 0)
            {
              unint64_t v18 = v21 & 0xFFFFFFFFFFFFFFF8;
              if (v18) {
                continue;
              }
            }
            goto LABEL_19;
          }
          unint64_t v20 = v18;
        }
        else
        {
          unint64_t v20 = 0;
        }
LABEL_19:
        uint64_t v22 = 0;
        uint64_t v23 = v20;
        if (sub_1CD40EE24((uint64_t *)(v17 + 584), &v23, &v22)) {
          int v9 = *(uint64_t **)(v22 + 8);
        }
        else {
          int v9 = 0;
        }
        goto LABEL_7;
      }
      uint64_t v8 = (uint64_t)(a1 + 1);
      sub_1CD2B37E8(a1, v15, 0);
    }
    int v9 = a1;
LABEL_7:
    size_t v10 = sub_1CD2B2E44((uint64_t)v9, 46, v8, 0);
    *(void *)(v6 + ++*(_DWORD *)(result + 8) = v10;
    sub_1CD297C88(v9, v7, v10);
    unint64_t v11 = (unint64_t *)(*(void *)(v6 + 8) + 8);
    unsigned int v12 = *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(a1[24] + 8) + 272) + 8) + 1624);
    uint64_t v23 = 1;
    if (v12 >= 5) {
      __int16 v13 = 33;
    }
    else {
      __int16 v13 = 11;
    }
    sub_1CD2938A0((unint64_t)v9, v11, 32, v13, &v23);
    unint64_t result = sub_1CD295120((unint64_t)v9, a2, *(void *)(v6 + 8));
    if (result) {
      return sub_1CD2B2BF0((unint64_t)v9, *(void *)(v6 + 8), 100, result);
    }
  }
  return result;
}

void sub_1CD297C88(void *a1, uint64_t a2, size_t a3)
{
  uint64_t v6 = a2 - 8 * *(unsigned int *)(a2 + 8);
  uint64_t v7 = *(void *)(v6 + 48);
  if (v7) {
    uint64_t v6 = v7 - 8 * *(unsigned int *)(v7 + 8);
  }
  uint64_t v8 = *(llvm::DIScope **)(v6 + 8);
  if (*(_DWORD *)(a1[9] + 36) == 2)
  {
    BOOL v9 = 1;
  }
  else if (*(unsigned char *)(a1[24] + 3549))
  {
    BOOL v9 = a1[41] == 0;
  }
  else
  {
    BOOL v9 = 0;
  }
  sub_1CD2B4EB0((unint64_t)a1, a2, a3, v9);
  uint64_t v10 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  if (v10)
  {
    unint64_t v11 = *(void **)(v10 + 8);
    std::string::size_type v14 = *v11;
    unsigned int v12 = (const std::string::value_type *)(v11 + 3);
    std::string::size_type v13 = v14;
  }
  else
  {
    std::string::size_type v13 = 0;
    unsigned int v12 = 0;
  }

  sub_1CD293C9C(a1, v12, v13, a3, v8);
}

void sub_1CD297D60(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = sub_1CD2B25F0(a1, a2);
  if (*(unsigned char *)(a1[24] + 3549) && a1[41] && (sub_1CD8A70D8() & 1) == 0) {
    uint64_t v5 = a1 + 62;
  }
  else {
    uint64_t v5 = (uint64_t *)(a1[25] + 384);
  }
  uint64_t v7 = 0;
  uint64_t v8 = a2;
  if ((sub_1CB915048(v5, &v8, &v7) & 1) != 0 && (unint64_t v6 = *(void *)(v7 + 8)) != 0)
  {
    if (v4) {
      sub_1CD2B2BF0((unint64_t)a1, v4, 49, v6);
    }
  }
  else if (v4)
  {
    sub_1CD297C88(a1, (uint64_t)a2, v4);
  }
}

unint64_t sub_1CD297E14(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = sub_1CD297EF0(a1, *(void *)(a2 + 8));
  uint64_t v5 = *(void *)(a2 + 24);
  if (v4)
  {
    unint64_t v6 = *(void *)(v4 + 24);
    if (v6)
    {
      unint64_t result = sub_1CD2B2BF0((unint64_t)a1, *(void *)(a2 + 24), 49, v6);
      if (*(_DWORD *)(a2 + 32) != 1) {
        return result;
      }
      goto LABEL_13;
    }
  }
  int v8 = *(_DWORD *)(a2 + 32);
  if (v8)
  {
    if (v8 == 1) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = 0;
    }
    unint64_t result = sub_1CD8A61AC(a1, v10, *(void *)(a2 + 24));
LABEL_13:
    uint64_t v11 = *(void *)(a2 + 40);
    if (v11)
    {
      return sub_1CD293370((unint64_t)a1, v5, 17, v11);
    }
    return result;
  }
  unint64_t v9 = *(void *)(a2 + 24);

  return sub_1CD296434(a1, a2, v9);
}

uint64_t sub_1CD297EF0(void *a1, uint64_t a2)
{
  if (*(unsigned char *)(a1[24] + 3549) && a1[41] && (v8 = a2, char v7 = sub_1CD8A70D8(), a2 = v8, (v7 & 1) == 0)) {
    uint64_t v3 = (uint64_t)(a1 + 65);
  }
  else {
    uint64_t v3 = a1[25] + 408;
  }
  uint64_t v9 = a2;
  uint64_t v10 = 0;
  int v4 = sub_1CBA0E618(v3, &v9, &v10);
  uint64_t result = 0;
  if (v4) {
    BOOL v6 = v10 == *(void *)v3 + 16 * *(unsigned int *)(v3 + 16);
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6) {
    return *(void *)(v10 + 8);
  }
  return result;
}

uint64_t sub_1CD297F88(void *a1, unsigned __int8 *a2)
{
  uint64_t v9 = a2;
  if (*(unsigned char *)(a1[24] + 3549) && a1[41] && (sub_1CD8A70D8() & 1) == 0) {
    uint64_t v3 = a1 + 65;
  }
  else {
    uint64_t v3 = (_DWORD *)(a1[25] + 408);
  }
  uint64_t v10 = 0;
  uint64_t result = sub_1CBA0E618((uint64_t)v3, &v9, &v10);
  uint64_t v5 = v10;
  if (result) {
    goto LABEL_9;
  }
  int v6 = v3[2];
  unsigned int v7 = v3[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_13;
  }
  if (v7 + ~v6 - v3[3] <= v7 >> 3)
  {
LABEL_13:
    sub_1CD2993E8((uint64_t)v3, v7);
    uint64_t v10 = 0;
    uint64_t result = sub_1CBA0E618((uint64_t)v3, &v9, &v10);
    uint64_t v5 = v10;
  }
  ++v3[2];
  if (*v5 != -4096) {
    --v3[3];
  }
  *uint64_t v5 = v9;
  v5[1] = 0;
LABEL_9:
  int v8 = *v9;
  if (v8 == 25) {
    operator new();
  }
  if (v8 == 26) {
    operator new();
  }
  return result;
}

uint64_t sub_1CD2981D8(void *a1, int a2)
{
  if (a1[41]) {
    goto LABEL_12;
  }
  uint64_t v4 = a1[24];
  if (*(unsigned char *)(v4 + 3533)) {
    goto LABEL_5;
  }
  uint64_t v5 = a1[22];
  uint64_t v9 = "cu_begin";
  __int16 v10 = 259;
  Tempuint64_t Symbol = llvm::MCContext::createTempSymbol(*(llvm::MCContext **)(v5 + 264), (const llvm::Twine *)&v9, 1);
  a1[42] = TempSymbol;
  (*(void (**)(void, uint64_t, void))(**(void **)(a1[22] + 272) + 192))(*(void *)(a1[22] + 272), TempSymbol, 0);
  if (a1[41])
  {
LABEL_12:
    int v7 = 5;
    goto LABEL_8;
  }
  uint64_t v4 = a1[24];
LABEL_5:
  if (*(unsigned char *)(v4 + 3549)) {
    int v7 = 4;
  }
  else {
    int v7 = 1;
  }
LABEL_8:
  uint64_t result = sub_1CD2B5F24(a1, a2);
  if (v7 != 1
    && *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(a1[24] + 8) + 272) + 8) + 1624) >= 5u)
  {
    return sub_1CD89F954(a1[22], a1[68]);
  }
  return result;
}

BOOL sub_1CD2982E8(void *a1)
{
  uint64_t v1 = a1[9];
  int v2 = *(_DWORD *)(v1 + 52);
  if (v2) {
    return v2 != 2;
  }
  uint64_t v3 = a1[24];
  if (*(_DWORD *)(v3 + 5512) != 1) {
    return 0;
  }
  int v5 = *(_DWORD *)(v1 + 36);
  if (v5 == 2) {
    return 0;
  }
  if (!*(unsigned char *)(v3 + 3549))
  {
    if (v5 != 3) {
      goto LABEL_14;
    }
    return 0;
  }
  if (v5 == 3 || a1[41] == 0) {
    return 0;
  }
LABEL_14:
  if (*(_DWORD *)(v3 + 3544) == 2) {
    return 0;
  }
  return *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(v3 + 8) + 272) + 8) + 1624) < 5u;
}

void sub_1CD298374(void *a1, uint64_t a2, size_t a3, llvm::DIScope *a4)
{
  if (sub_1CD2982E8(a1))
  {
    sub_1CD8AF93C(a4, (uint64_t)a1, (uint64_t)&v20);
    uint64_t v8 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
    if (v8)
    {
      std::string::__init(&__p, (const std::string::value_type *)(*(void *)(v8 + 8) + 24), **(void **)(v8 + 8));
      LOBYTE(v++*(_DWORD *)(result + 8) = *((unsigned char *)&__p.__r_.__value_.__s + 23);
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
      std::string::size_type v10 = __p.__r_.__value_.__r.__words[0];
    }
    else
    {
      std::string::size_type size = 0;
      std::string::size_type v10 = 0;
      memset(&__p, 0, sizeof(__p));
    }
    BOOL v11 = (v8 & 0x80u) != 0;
    if ((v8 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)v10;
    }
    std::string::size_type v13 = v8 & 0x7F;
    if (v11) {
      std::string::size_type v14 = size;
    }
    else {
      std::string::size_type v14 = v13;
    }
    uint64_t v15 = std::string::append(&v20, (const std::string::value_type *)p_p, v14);
    std::string::size_type v16 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v21 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    uint64_t v22 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (v22 >= 0) {
      uint64_t v17 = (unsigned __int8 *)v21;
    }
    else {
      uint64_t v17 = (unsigned __int8 *)v21[0];
    }
    if (v22 >= 0) {
      size_t v18 = HIBYTE(v22) & 0x7F;
    }
    else {
      size_t v18 = (size_t)v21[1];
    }
    (*sub_1CD5CF708((uint64_t)(a1 + 51), v17, v18))[1] = a3;
    if (SHIBYTE(v22) < 0) {
      operator delete(v21[0]);
    }
  }
}

uint64_t *sub_1CD2984A0(uint64_t *result)
{
  void v24[4] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = result[72];
  uint64_t v2 = result[71];
  if (v1 != v2)
  {
    __sz = result + 10;
    unint64_t v3 = (unint64_t)(result + 1) & 0xFFFFFFFFFFFFFFFBLL;
    do
    {
      uint64_t v4 = result;
      uint64_t v5 = sub_1CB906F34(__sz, 48, 3);
      *(void *)(v5 + ++*(_DWORD *)(result + 8) = 0;
      *(void *)(v5 + 16) = 0;
      *(void *)uint64_t v5 = v5 | 4;
      *(_DWORD *)(v5 + 24) = -1;
      *(_WORD *)(v5 + 2++*(_DWORD *)(result + 8) = 36;
      *(unsigned char *)(v5 + 30) = 0;
      *(void *)(v5 + 32) = 0;
      *(void *)(v5 + 40) = v3;
      int v6 = v4;
      int v7 = (uint64_t *)v4[5];
      if (v7)
      {
        *(void *)uint64_t v5 = *v7 & 0xFFFFFFFFFFFFFFF8;
        *int v7 = v5 | 4;
      }
      else
      {
        v4[5] = v5;
      }
      unint64_t v8 = v5 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v22 = v24;
      long long v23 = xmmword_1CDC7F9D0;
      uint64_t v9 = llvm::dwarf::AttributeEncodingString((llvm::dwarf *)*(unsigned __int8 *)(v1 - 12));
      __int16 v20 = 773;
      v19[0] = (uint64_t)v9;
      v19[1] = v10;
      v19[2] = (uint64_t)"_";
      int v11 = *(_DWORD *)(v1 - 16);
      __int16 v18 = 264;
      LODWORD(v17[0]) = v11;
      sub_1CB8F1E58(v19, v17, (uint64_t)v21);
      unsigned int v12 = (char *)sub_1CC229614(v21, (uint64_t)&v22);
      sub_1CD2B2780(v6, v8, 3, v12, v13);
      v21[0] = (void *)*(unsigned __int8 *)(v1 - 12);
      __int16 v14 = 11;
      sub_1CD2938A0((unint64_t)v6, (unint64_t *)(v8 + 8), 62, 11, v21);
      uint64_t v15 = *(unsigned int *)(v1 - 16);
      if (v15 >= 0x7F9)
      {
        if (v15 >= 0x7FFF9) {
          __int16 v14 = 6;
        }
        else {
          __int16 v14 = 5;
        }
      }
      v21[0] = (void *)((unint64_t)(v15 + 7) >> 3);
      sub_1CD2938A0((unint64_t)v6, (unint64_t *)(v8 + 8), 11, v14, v21);
      *(void *)(v1 - ++*(_DWORD *)(result + 8) = v8;
      if (v22 != v24) {
        free(v22);
      }
      v1 -= 16;
      uint64_t result = v6;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_1CD2986BC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 192);
  unsigned int v2 = *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(v1 + 8) + 272) + 8) + 1624);
  int v3 = 3;
  if (v2 >= 5)
  {
    if (*(unsigned char *)(v1 + 3549)) {
      int v3 = 11;
    }
    else {
      int v3 = 3;
    }
  }
  if (*(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 176) + 272) + 8) + 1626)) {
    int v4 = 8;
  }
  else {
    int v4 = 4;
  }
  if (v2 <= 4) {
    int v5 = v3;
  }
  else {
    int v5 = v3 + 1;
  }
  return (v5 + v4);
}

uint64_t sub_1CD298720(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v17 = 0;
  uint64_t result = sub_1CD145328(a2, *a3, &v17);
  int v7 = v17;
  unsigned int v8 = *(_DWORD *)a2;
  if (result)
  {
    if (v8)
    {
      uint64_t v15 = a2 + 8;
      uint64_t v16 = 8;
    }
    else
    {
      uint64_t v15 = *(void *)(a2 + 8);
      uint64_t v16 = *(unsigned int *)(a2 + 16);
    }
    char v14 = 0;
    uint64_t v13 = v15 + 8 * v16;
    goto LABEL_11;
  }
  unsigned int v9 = v8 >> 1;
  if (v8) {
    unsigned int v10 = 8;
  }
  else {
    unsigned int v10 = *(_DWORD *)(a2 + 16);
  }
  if (4 * v9 + 4 >= 3 * v10)
  {
    v10 *= 2;
    goto LABEL_15;
  }
  if (v10 + ~v9 - *(_DWORD *)(a2 + 4) <= v10 >> 3)
  {
LABEL_15:
    sub_1CD1453CC(a2, v10);
    uint64_t v17 = 0;
    uint64_t result = sub_1CD145328(a2, *a3, &v17);
    int v7 = v17;
  }
  *(_DWORD *)a2 += 2;
  if (*v7 != -4096) {
    --*(_DWORD *)(a2 + 4);
  }
  *int v7 = *a3;
  uint64_t v11 = a2 + 8;
  if (*(unsigned char *)a2)
  {
    uint64_t v12 = 8;
  }
  else
  {
    uint64_t v11 = *(void *)(a2 + 8);
    uint64_t v12 = *(unsigned int *)(a2 + 16);
  }
  uint64_t v13 = v11 + 8 * v12;
  char v14 = 1;
LABEL_11:
  *(void *)a1 = v7;
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = v13;
  *(unsigned char *)(a1 + 16) = v14;
  return result;
}

uint64_t sub_1CD298860(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(unsigned int *)(a2 + 8);
    uint64_t v4 = *(unsigned int *)(a1 + 8);
    if (v4 >= v3)
    {
      if (v3) {
        memmove(*(void **)a1, *(const void **)a2, 24 * v3);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) < v3)
      {
        *(_DWORD *)(a1 + ++*(_DWORD *)(result + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v4)
      {
        uint64_t v8 = *(unsigned int *)(a1 + 8);
        uint64_t v9 = a2;
        memmove(*(void **)a1, *(const void **)a2, 24 * v4);
        uint64_t v5 = v8;
        a2 = v9;
      }
      else
      {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(unsigned int *)(a2 + 8);
      if (v5 != v6) {
        memcpy((void *)(*(void *)a1 + 24 * v5), (const void *)(*(void *)a2 + 24 * v5), *(void *)a2 + 24 * v6 - (*(void *)a2 + 24 * v5));
      }
    }
    *(_DWORD *)(a1 + ++*(_DWORD *)(result + 8) = v3;
  }
  return a1;
}

uint64_t sub_1CD298954(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 568);
  if (v2)
  {
    *(void *)(a1 + 576) = v2;
    operator delete(v2);
  }
  sub_1CD2989F8((unsigned int *)(a1 + 520));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 520), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 496), 8);
  uint64_t v3 = *(void **)(a1 + 440);
  if (v3 != (void *)(a1 + 456)) {
    free(v3);
  }
  sub_1CD61201C(a1 + 408);
  sub_1CD61201C(a1 + 376);
  sub_1CD298A74(a1 + 352);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 352), 8);

  return sub_1CD2B23B8(a1);
}

unsigned int *sub_1CD2989F8(unsigned int *result)
{
  uint64_t v1 = result[4];
  if (v1)
  {
    uint64_t v2 = 16 * v1;
    uint64_t v3 = (unsigned int **)(*(void *)result + 8);
    do
    {
      if (((unint64_t)*(v3 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t result = *v3;
        void *v3 = 0;
        if (result) {
          uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
        }
      }
      v3 += 2;
      v2 -= 16;
    }
    while (v2);
  }
  return result;
}

void sub_1CD298A74(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = 88 * v1;
    uint64_t v3 = *(void *)a1 + 24;
    do
    {
      uint64_t v4 = *(void *)(v3 - 24);
      if (v4 != -4096 && v4 != -8192)
      {
        uint64_t v5 = *(void **)(v3 - 16);
        if ((void *)v3 != v5)
        {
          uint64_t v6 = v3;
          uint64_t v7 = v2;
          free(v5);
          uint64_t v3 = v6;
          uint64_t v2 = v7;
        }
      }
      v3 += 88;
      v2 -= 88;
    }
    while (v2);
  }
}

void *sub_1CD298AE8(uint64_t *a1, void *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CD298B5C(a1, a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CD298BFC((uint64_t)a1, (uint64_t)a2, a2, v7);
    *uint64_t v5 = *a2;
    v5[1] = v5 + 3;
    void v5[2] = 0x800000000;
  }
  return v5;
}

uint64_t sub_1CD298B5C(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    uint64_t v7 = (void *)(*a1 + 88 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      unsigned int v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          unsigned int v10 = v7;
        }
        unsigned int v13 = v6 + v11++;
        unsigned int v6 = v13 & v5;
        uint64_t v7 = (void *)(v4 + 88 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_4;
        }
      }
      uint64_t result = 0;
      if (v10) {
        uint64_t v7 = v10;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

void *sub_1CD298BFC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CD298CB0(a1, v7);
  uint64_t v9 = 0;
  sub_1CD298B5C((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CD298CB0(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(88 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD8A6B80(a1, v4, v4 + 88 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = 0;
  unsigned int v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 88 * v10;
    do
    {
      void *result = -4096;
      result += 11;
      v11 -= 88;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD298D88(uint64_t a1, const void **a2)
{
  if ((const void **)a1 != a2)
  {
    uint64_t v4 = a2 + 2;
    unsigned int v3 = *a2;
    if (*a2 == a2 + 2)
    {
      unint64_t v6 = a2 + 1;
      uint64_t v8 = *((unsigned int *)a2 + 2);
      uint64_t v9 = *(unsigned int *)(a1 + 8);
      if (v9 >= v8)
      {
        if (v8) {
          memmove(*(void **)a1, *a2, 16 * v8);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v8)
        {
          *(_DWORD *)(a1 + ++*(_DWORD *)(result + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v9)
        {
          uint64_t v13 = *(unsigned int *)(a1 + 8);
          char v14 = a2;
          memmove(*(void **)a1, v3, 16 * v9);
          uint64_t v10 = v13;
          a2 = v14;
        }
        else
        {
          uint64_t v10 = 0;
        }
        uint64_t v11 = *v6;
        if (v10 != v11) {
          memcpy((void *)(*(void *)a1 + 16 * v10), (char *)*a2 + 16 * v10, (unsigned char *)*a2 + 16 * v11 - ((unsigned char *)*a2 + 16 * v10));
        }
      }
      *(_DWORD *)(a1 + ++*(_DWORD *)(result + 8) = v8;
    }
    else
    {
      unint64_t v5 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        BOOL v12 = a2;
        free(v5);
        a2 = v12;
        unsigned int v3 = *v12;
      }
      *(void *)a1 = v3;
      unint64_t v6 = a2 + 1;
      *(void *)(a1 + ++*(_DWORD *)(result + 8) = a2[1];
      *a2 = v4;
      *((_DWORD *)a2 + 3) = 0;
    }
    *unint64_t v6 = 0;
  }
  return a1;
}

unint64_t sub_1CD298EC8(unint64_t *a1, uint64_t a2, int *a3)
{
  *(void *)(a2 + 80) += 24;
  if (((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2 + 24 > *(void *)(a2 + 8) - *(void *)a2)
  {
    unsigned int v14 = *(_DWORD *)(a2 + 24) >> 7;
    if (v14 >= 0x1E) {
      LOBYTE(v14) = 30;
    }
    uint64_t v15 = 4096 << v14;
    unint64_t v6 = (unint64_t)operator new(4096 << v14, (std::align_val_t)8uLL);
    unsigned int v16 = *(_DWORD *)(a2 + 24);
    if (v16 >= *(_DWORD *)(a2 + 28)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v16) = v6;
    ++*(_DWORD *)(a2 + 24);
    *(void *)(a2 + ++*(_DWORD *)(result + 8) = v6 + v15;
  }
  else
  {
    unint64_t v6 = (*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a2 = v6 + 24;
  int v7 = *a3;
  __int16 v8 = *((_WORD *)a3 + 2);
  __int16 v9 = *((_WORD *)a3 + 3);
  switch(*a3)
  {
    case 1:
      uint64_t v10 = *((void *)a3 + 1);
      *(void *)unint64_t v6 = v6 | 4;
      int v11 = 1;
      goto LABEL_5;
    case 2:
      uint64_t v10 = *((void *)a3 + 1);
      *(void *)unint64_t v6 = v6 | 4;
      int v11 = 2;
      goto LABEL_5;
    case 3:
      uint64_t v10 = *((void *)a3 + 1);
      *(void *)unint64_t v6 = v6 | 4;
      int v11 = 3;
      goto LABEL_5;
    case 4:
      uint64_t v10 = *((void *)a3 + 1);
      *(void *)unint64_t v6 = v6 | 4;
      int v11 = 4;
      goto LABEL_5;
    case 5:
      uint64_t v10 = *((void *)a3 + 1);
      *(void *)unint64_t v6 = v6 | 4;
      int v11 = 5;
      goto LABEL_5;
    case 6:
      uint64_t v10 = *((void *)a3 + 1);
      *(void *)unint64_t v6 = v6 | 4;
      int v11 = 6;
      goto LABEL_5;
    case 7:
      uint64_t v10 = *((void *)a3 + 1);
      *(void *)unint64_t v6 = v6 | 4;
      int v11 = 7;
      goto LABEL_5;
    case 8:
      uint64_t v10 = *((void *)a3 + 1);
      *(void *)unint64_t v6 = v6 | 4;
      int v11 = 8;
      goto LABEL_5;
    case 9:
      uint64_t v10 = *((void *)a3 + 1);
      *(void *)unint64_t v6 = v6 | 4;
      int v11 = 9;
      goto LABEL_5;
    case 10:
      uint64_t v10 = *((void *)a3 + 1);
      *(void *)unint64_t v6 = v6 | 4;
      int v11 = 10;
      goto LABEL_5;
    case 11:
      uint64_t v10 = *((void *)a3 + 1);
      *(void *)unint64_t v6 = v6 | 4;
      int v11 = 11;
      goto LABEL_5;
    case 12:
      uint64_t v10 = *((void *)a3 + 1);
      *(void *)unint64_t v6 = v6 | 4;
      int v11 = 12;
LABEL_5:
      *(_DWORD *)(v6 + ++*(_DWORD *)(result + 8) = v11;
      *(_WORD *)(v6 + 12) = v8;
      *(_WORD *)(v6 + 14) = v9;
      *(void *)(v6 + 16) = v10;
      break;
    default:
      *(void *)unint64_t v6 = v6 | 4;
      *(_DWORD *)(v6 + ++*(_DWORD *)(result + 8) = v7;
      *(_WORD *)(v6 + 12) = v8;
      *(_WORD *)(v6 + 14) = v9;
      break;
  }
  BOOL v12 = (unint64_t *)*a1;
  if (*a1)
  {
    *(void *)unint64_t v6 = *v12;
    *BOOL v12 = v6;
  }
  *a1 = v6;
  return v6;
}

void **sub_1CD299144(void **result, void *a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    *uint64_t v2 = &unk_1F2649AF8;
    unsigned int v3 = (void *)v2[3];
    if (v3 != v2 + 5) {
      free(v3);
    }
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

uint64_t sub_1CD2991CC(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*(void *)a1[1] + 8);
  switch(*(_DWORD *)(v4 + 24 * a2))
  {
    case 0:
      char v5 = sub_1CD2AECCC(*(void *)v3, *(void **)(v3 + 8), a3, *(_DWORD *)(v4 + 24 * a2 + 20));
      uint64_t result = 0;
      if (v5) {
        goto LABEL_16;
      }
      return result;
    case 1:
      uint64_t v17 = *(void *)v3;
      unint64_t v16 = *(void *)(v4 + 24 * a2 + 8);
      goto LABEL_15;
    case 2:
      uint64_t v7 = *(void *)(v4 + 24 * a2 + 8);
      __int16 v9 = *(void **)(v7 + 32);
      __int16 v8 = (llvm::detail::DoubleAPFloat *)(v7 + 32);
      if (v9 == &unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v8, (llvm::APInt *)&v20);
      }
      else {
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v8, (uint64_t)&v20);
      }
      unsigned int v10 = v21;
      if (v21 <= 0x40)
      {
        int v11 = *(void (****)(void))v3;
        unint64_t v12 = v20;
        uint64_t v13 = (unsigned int *)(*(void *)v3 + 80);
        unint64_t v14 = (*v13 | ((unint64_t)*(unsigned __int16 *)(*(void *)v3 + 84) << 32)) & 0xFFFFFFF8FFFFFFFFLL | 0x300000000;
        unsigned int *v13 = *v13;
        *((_WORD *)v13 + 2) = WORD2(v14);
        sub_1CD2AE980(v11, v12);
        if (v21 <= 0x40) {
          goto LABEL_16;
        }
      }
      if (v20) {
        MEMORY[0x1D25D9CB0](v20, 0x1000C8000313F17);
      }
      if (v10 < 0x41) {
        goto LABEL_16;
      }
      uint64_t result = 0;
      break;
    case 3:
      uint64_t v15 = *(void *)(v4 + 24 * a2 + 8);
      if (*(_DWORD *)(v15 + 32) >= 0x41u) {
        operator new[]();
      }
      unint64_t v16 = *(void *)(v15 + 24);
      uint64_t v17 = *(void *)v3;
LABEL_15:
      unint64_t v18 = (*(unsigned int *)(v17 + 80) | ((unint64_t)*(unsigned __int16 *)(v17 + 84) << 32)) & 0xFFFFFFF8FFFFFFFFLL | 0x300000000;
      *(_DWORD *)(v17 + 80) = *(_DWORD *)(v17 + 80);
      *(_WORD *)(v17 + 84) = WORD2(v18);
      sub_1CD2AE980((void (***)(void))v17, v16);
      goto LABEL_16;
    default:
      uint64_t v19 = *(void *)(v4 + 24 * a2 + 16);
      sub_1CD8ADE6C(*(unsigned int **)v3, v19, v19 >> 32);
LABEL_16:
      uint64_t result = 1;
      break;
  }
  return result;
}

void *sub_1CD2993E8(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD2994B4(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      void *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD2994B4(uint64_t result, void *a2, void *a3)
{
  uint64_t v5 = result;
  *(void *)(result + ++*(_DWORD *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      sub_1CBA0E618(v5, a2, &v11);
      __int16 v9 = v11;
      void *v11 = *a2;
      uint64_t v10 = a2[1];
      a2[1] = 0;
      v9[1] = v10;
      ++*(_DWORD *)(v5 + 8);
      uint64_t result = a2[1];
      a2[1] = 0;
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
    a2 += 2;
  }
  return result;
}

void *sub_1CD29959C(void *a1)
{
  *a1 = &unk_1F2649AB8;
  uint64_t v2 = (void *)a1[7];
  if (v2 != a1 + 9) {
    free(v2);
  }
  sub_1CD299674(a1 + 6);
  return a1;
}

void sub_1CD2995F8(void *a1)
{
  *a1 = &unk_1F2649AB8;
  uint64_t v2 = (void *)a1[7];
  if (v2 != a1 + 9) {
    free(v2);
  }
  sub_1CD299674(a1 + 6);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t *sub_1CD299674(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 8);
    if (v3 != (void *)(v2 + 24)) {
      free(v3);
    }
    MEMORY[0x1D25D9CE0](v2, 0x10E0C400FD40FC7);
  }
  return a1;
}

uint64_t sub_1CD2996D0(uint64_t a1, llvm::dwarf *this, unsigned char *a3)
{
  if (*(unsigned char *)(a1 + 104)) {
    uint64_t v4 = (uint64_t (***)(void, llvm::dwarf *, void *))(*(void *)(a1 + 88) + 80);
  }
  else {
    uint64_t v4 = *(uint64_t (****)(void, llvm::dwarf *, void *))(a1 + 96);
  }
  if (a3)
  {
    char v7 = 1;
    char v15 = 1;
    if (*a3)
    {
      v13[0] = (uint64_t)a3;
      char v7 = 3;
    }
    char v14 = v7;
    uint64_t v11 = " ";
    __int16 v12 = 259;
    sub_1CB8F1E58(v13, (uint64_t *)&v11, (uint64_t)v16);
    __int16 v10 = 261;
    v9[0] = (uint64_t)llvm::dwarf::OperationEncodingString(this);
    v9[1] = v8;
    sub_1CB8F1E58(v16, v9, (uint64_t)v17);
  }
  else
  {
    __int16 v18 = 261;
    v17[0] = llvm::dwarf::OperationEncodingString(this);
    v17[1] = v5;
  }
  return (**v4)(v4, this, v17);
}

uint64_t sub_1CD2997C0(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  if (*(unsigned char *)(a1 + 104)) {
    uint64_t v2 = *(void *)(a1 + 88) + 80;
  }
  else {
    uint64_t v2 = *(void *)(a1 + 96);
  }
  __int16 v5 = 269;
  uint64_t v4 = &v6;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t **))(*(void *)v2 + 8))(v2, a2, &v4);
}

uint64_t sub_1CD299830(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  if (*(unsigned char *)(a1 + 104)) {
    uint64_t v2 = *(void *)(a1 + 88) + 80;
  }
  else {
    uint64_t v2 = *(void *)(a1 + 96);
  }
  __int16 v5 = 268;
  uint64_t v4 = &v6;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t **, void))(*(void *)v2 + 16))(v2, a2, &v4, 0);
}

uint64_t sub_1CD2998A4()
{
  return 0;
}

void sub_1CD2998AC(uint64_t a1, char a2, llvm::Twine *this)
{
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = v3[1];
  if ((unint64_t)(v4 + 1) > v3[2]) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  *(unsigned char *)(*v3 + v4) = a2;
  ++v3[1];
  if (*(unsigned char *)(a1 + 24))
  {
    __int16 v5 = *(int64x2_t **)(a1 + 16);
    llvm::Twine::str(this, __p);
    unint64_t v6 = v5->u64[1];
    if (v6 >= v5[1].i64[0])
    {
      uint64_t v8 = sub_1CBF4ECB4(v5, (uint64_t)__p);
      int v9 = SHIBYTE(v11);
      v5->i64[1] = (uint64_t)v8;
      if (v9 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v7 = *(_OWORD *)__p;
      *(void *)(v6 + 16) = v11;
      *(_OWORD *)unint64_t v6 = v7;
      v5->i64[1] = v6 + 24;
    }
  }
}

void sub_1CD299984(uint64_t a1, uint64_t a2)
{
  v2[10] = *(void **)MEMORY[0x1E4F143B8];
  sub_1CD299B18(a2, (uint64_t)v2);
  operator new();
}

void sub_1CD299B18(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v27[12] = *MEMORY[0x1E4F143B8];
  int v4 = **(unsigned __int16 **)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = 96;
  if (v4 == 14) {
    uint64_t v6 = 32;
  }
  uint64_t v7 = *(void *)(v5 + v6 + 16);
  __src = v27;
  uint64_t v26 = 0x400000000;
  if (v4 == 14)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 40);
    if (v8 == 2)
    {
      unsigned int v9 = 0;
      __int16 v10 = v27;
      goto LABEL_21;
    }
    uint64_t v20 = v7;
    int v21 = 14;
    uint64_t v11 = v5 + 32 * v8;
    v5 += 64;
  }
  else
  {
    uint64_t v20 = v7;
    int v21 = v4;
    uint64_t v11 = v5 + 32;
  }
  while (2)
  {
    switch(*(unsigned char *)v5)
    {
      case 0:
        BOOL v12 = **(_WORD **)(a1 + 16) == 13 && *(unsigned __int8 *)(*(void *)(a1 + 32) + 32) == 1;
        unint64_t v14 = !v12 | ((unint64_t)*(unsigned int *)(v5 + 4) << 32);
        int v22 = 0;
        goto LABEL_18;
      case 1:
        uint64_t v13 = *(void *)(v5 + 16);
        int v22 = 1;
        goto LABEL_15;
      case 3:
        uint64_t v13 = *(void *)(v5 + 16);
        int v22 = 2;
        goto LABEL_15;
      case 7:
        unint64_t v14 = *(unsigned int *)(v5 + 16) | ((unint64_t)*(unsigned int *)(v5 + 4) << 32);
        int v22 = 4;
LABEL_18:
        unint64_t v24 = v14;
        goto LABEL_19;
      default:
        uint64_t v13 = *(void *)(v5 + 16);
        int v22 = 3;
LABEL_15:
        uint64_t v23 = v13;
LABEL_19:
        unint64_t v15 = sub_1CD46398C((uint64_t)&__src, (unint64_t)&v22);
        unint64_t v16 = (char *)__src + 24 * v26;
        long long v17 = *(_OWORD *)v15;
        *((void *)v16 + 2) = *(void *)(v15 + 16);
        *(_OWORD *)unint64_t v16 = v17;
        unsigned int v9 = v26 + 1;
        LODWORD(v26) = v26 + 1;
        v5 += 32;
        if (v5 != v11) {
          continue;
        }
        __int16 v10 = __src;
        int v4 = v21;
        uint64_t v7 = v20;
        break;
    }
    break;
  }
LABEL_21:
  BOOL v18 = v4 == 14;
  *(void *)a2 = v7;
  *(void *)(a2 + ++*(_DWORD *)(result + 8) = a2 + 24;
  *(void *)(a2 + 16) = 0x200000000;
  if (v9 >= 3) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v9)
  {
    memcpy(*(void **)(a2 + 8), v10, 24 * v9);
    int v19 = *(_DWORD *)(a2 + 16);
  }
  else
  {
    int v19 = 0;
  }
  *(_DWORD *)(a2 + 16) = v19 + v9;
  *(unsigned char *)(a2 + 72) = v18;
  if (__src != v27) {
    free(__src);
  }
}

uint64_t sub_1CD299DD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 288);
  uint64_t v5 = a1 + 4440;
  uint64_t v6 = a1 + 3531;
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = a2;
  *(void *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 8++*(_DWORD *)(result + 8) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 104) = 1065353216;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 12++*(_DWORD *)(result + 8) = 0u;
  *(_DWORD *)(a1 + 144) = 1065353216;
  *(_OWORD *)(a1 + 16++*(_DWORD *)(result + 8) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 184) = 1065353216;
  *(void *)(a1 + 192) = a1 + 208;
  *(void *)(a1 + 200) = 0x400000000;
  *(_DWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 24++*(_DWORD *)(result + 8) = 0u;
  *(void *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 28++*(_DWORD *)(result + 8) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 372) = 0u;
  *(_DWORD *)(a1 + 40++*(_DWORD *)(result + 8) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_DWORD *)(a1 + 432) = 0;
  *(_OWORD *)(a1 + 416) = 0u;
  *(void *)a1 = &unk_1F2649B58;
  uint64_t v7 = a1 + 440;
  *(_OWORD *)(a1 + 440) = 0u;
  *(void *)(a1 + 456) = a1 + 472;
  *(void *)(a1 + 464) = 0x400000000;
  *(void *)(a1 + 504) = a1 + 520;
  *(_OWORD *)(a1 + 512) = 0u;
  *(void *)(a1 + 52++*(_DWORD *)(result + 8) = 1;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_DWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 58++*(_DWORD *)(result + 8) = 0u;
  *(_OWORD *)(a1 + 636) = 0u;
  *(_OWORD *)(a1 + 60++*(_DWORD *)(result + 8) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(void *)(a1 + 656) = a1 + 672;
  *(void *)(a1 + 664) = 0x4000000000;
  char v8 = (*(uint64_t (**)(void))(**(void **)(a2 + 272) + 88))(*(void *)(a2 + 272));
  *(void *)(a1 + 1184) = a1 + 1200;
  *(void *)(a1 + 1192) = 0x400000000;
  *(void *)(a1 + 1296) = a1 + 1312;
  *(void *)(a1 + 1304) = 0x2000000000;
  *(void *)(a1 + 2336) = a1 + 2360;
  *(void *)(a1 + 2344) = 0;
  *(void *)(a1 + 2352) = 256;
  *(void *)(a1 + 2616) = 0;
  *(_OWORD *)(a1 + 2624) = 0u;
  *(unsigned char *)(a1 + 264++*(_DWORD *)(result + 8) = v8;
  *(void *)(a1 + 2656) = a1 + 2688;
  *(void *)(a1 + 2664) = a1 + 2688;
  *(void *)(a1 + 2672) = 16;
  *(_DWORD *)(a1 + 2680) = 0;
  *(void *)(a1 + 2816) = a1 + 2832;
  *(void *)(a1 + 2824) = 0x1000000000;
  *(_OWORD *)(a1 + 2960) = 0u;
  *(_OWORD *)(a1 + 2976) = 0u;
  sub_1CD2B02A8((uint64_t *)(a1 + 2992), a2, (uint64_t)"info_string", 11, v7);
  *(_DWORD *)(a1 + 3464) = 0;
  *(_OWORD *)(a1 + 344++*(_DWORD *)(result + 8) = 0u;
  *(_OWORD *)(a1 + 3472) = 0u;
  *(_DWORD *)(a1 + 348++*(_DWORD *)(result + 8) = 0;
  *(void *)(a1 + 3496) = a1 + 3512;
  *(void *)(a1 + 3504) = 0x100000000;
  *(_DWORD *)uint64_t v6 = 16777472;
  *(_DWORD *)(a1 + 3540) = 1;
  sub_1CD2B02A8((uint64_t *)(a1 + 3552), a2, (uint64_t)"skel_string", 11, v7);
  *(void *)(a1 + 400++*(_DWORD *)(result + 8) = 0;
  *(void *)(a1 + 4016) = a1 + 4032;
  *(void *)(a1 + 4024) = 0x300000000;
  *(void *)(a1 + 4104) = a1 + 4120;
  *(void *)(a1 + 4112) = 0x300000000;
  *(_OWORD *)(a1 + 4336) = 0u;
  *(void *)(a1 + 4352) = 0x1000000000;
  *(unsigned char *)(v6 + 905) = 0;
  *(unsigned char *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 16) = 0;
  *(unsigned char *)(v5 + 24) = 0;
  *(_OWORD *)(a1 + 436++*(_DWORD *)(result + 8) = 0u;
  *(_OWORD *)(a1 + 4384) = 0u;
  *(_OWORD *)(a1 + 4400) = 0u;
  *(void *)(a1 + 4413) = 0;
  *(_WORD *)(v5 + 25) = 1;
  *(unsigned char *)(v5 + 32) = 0;
  unint64_t v9 = *(unsigned int *)(*(void *)(a2 + 248) + 484);
  char v10 = (v9 < 0x22) & (0x3F0000888uLL >> v9);
  *(unsigned char *)(v5 + 41) = v10;
  *(unsigned char *)(v5 + 96) = 0;
  *(_OWORD *)(a1 + 448++*(_DWORD *)(result + 8) = 0u;
  *(_DWORD *)(a1 + 4504) = 0;
  *(_DWORD *)(a1 + 452++*(_DWORD *)(result + 8) = 0;
  *(_OWORD *)(a1 + 4512) = 0u;
  *(void *)(a1 + 4552) = 0;
  *(void *)(a1 + 4560) = 0;
  *(void *)(a1 + 4544) = 0;
  *(void *)(a1 + 456++*(_DWORD *)(result + 8) = a1 + 4584;
  *(void *)(a1 + 4576) = 0x400000000;
  *(void *)(a1 + 4616) = a1 + 4632;
  *(void *)(a1 + 4624) = 0;
  *(void *)(a1 + 4632) = 0;
  *(void *)(a1 + 4640) = 1;
  *(void *)(a1 + 4656) = 0;
  *(void *)(a1 + 464++*(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(a1 + 4664) = 0;
  *(_DWORD *)(a1 + 466++*(_DWORD *)(result + 8) = 56;
  *(void *)(a1 + 4672) = a1 + 4552;
  *(void *)(a1 + 4680) = sub_1CD8ABD88;
  *(_OWORD *)(a1 + 472++*(_DWORD *)(result + 8) = 0u;
  *(_OWORD *)(a1 + 4744) = 0u;
  *(_OWORD *)(a1 + 4696) = 0u;
  *(_OWORD *)(a1 + 4712) = 0u;
  *(void *)(a1 + 4760) = a1 + 4776;
  *(void *)(a1 + 476++*(_DWORD *)(result + 8) = 0x400000000;
  *(void *)(a1 + 480++*(_DWORD *)(result + 8) = a1 + 4824;
  *(void *)(a1 + 4824) = 0;
  *(void *)(a1 + 4816) = 0;
  *(void *)(a1 + 4832) = 1;
  *(void *)(a1 + 484++*(_DWORD *)(result + 8) = 0;
  *(void *)(a1 + 4840) = 0;
  *(_DWORD *)(a1 + 4856) = 0;
  *(_DWORD *)(a1 + 4860) = 56;
  *(void *)(a1 + 4864) = a1 + 4744;
  *(void *)(a1 + 4872) = sub_1CD2A9258;
  *(_OWORD *)(a1 + 4920) = 0u;
  *(_OWORD *)(a1 + 4936) = 0u;
  *(_OWORD *)(a1 + 488++*(_DWORD *)(result + 8) = 0u;
  *(_OWORD *)(a1 + 4904) = 0u;
  *(void *)(a1 + 4952) = a1 + 4968;
  *(void *)(a1 + 4960) = 0x400000000;
  *(void *)(a1 + 5000) = a1 + 5016;
  *(void *)(a1 + 5016) = 0;
  *(void *)(a1 + 500++*(_DWORD *)(result + 8) = 0;
  *(void *)(a1 + 5024) = 1;
  *(void *)(a1 + 5040) = 0;
  *(void *)(a1 + 5032) = 0;
  *(_DWORD *)(a1 + 504++*(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(a1 + 5052) = 56;
  *(void *)(a1 + 5056) = a1 + 4936;
  *(void *)(a1 + 5064) = sub_1CD2A9258;
  *(_OWORD *)(a1 + 5112) = 0u;
  *(_OWORD *)(a1 + 512++*(_DWORD *)(result + 8) = 0u;
  *(_OWORD *)(a1 + 5080) = 0u;
  *(_OWORD *)(a1 + 5096) = 0u;
  *(void *)(a1 + 5144) = a1 + 5160;
  *(void *)(a1 + 5152) = 0x400000000;
  *(void *)(a1 + 5192) = a1 + 5208;
  *(void *)(a1 + 520++*(_DWORD *)(result + 8) = 0;
  *(void *)(a1 + 5200) = 0;
  *(void *)(a1 + 5216) = 1;
  *(void *)(a1 + 5232) = 0;
  *(void *)(a1 + 5224) = 0;
  *(_DWORD *)(a1 + 5240) = 0;
  *(_DWORD *)(a1 + 5244) = 56;
  *(void *)(a1 + 524++*(_DWORD *)(result + 8) = a1 + 5128;
  *(void *)(a1 + 5256) = sub_1CD2A9258;
  *(_OWORD *)(a1 + 5304) = 0u;
  *(_OWORD *)(a1 + 5320) = 0u;
  *(_OWORD *)(a1 + 5272) = 0u;
  *(_OWORD *)(a1 + 528++*(_DWORD *)(result + 8) = 0u;
  *(void *)(a1 + 5336) = a1 + 5352;
  *(void *)(a1 + 5344) = 0x400000000;
  *(void *)(a1 + 5384) = a1 + 5400;
  *(void *)(a1 + 5400) = 0;
  *(void *)(a1 + 5392) = 0;
  *(void *)(a1 + 540++*(_DWORD *)(result + 8) = 1;
  *(void *)(a1 + 5424) = 0;
  *(void *)(a1 + 5416) = 0;
  *(_DWORD *)(a1 + 5432) = 0;
  *(_DWORD *)(a1 + 5436) = 56;
  *(void *)(a1 + 5440) = a1 + 5320;
  *(void *)(a1 + 544++*(_DWORD *)(result + 8) = sub_1CD2A9258;
  *(_DWORD *)(a1 + 5512) = 0;
  *(_OWORD *)(a1 + 5480) = 0u;
  *(_OWORD *)(a1 + 5496) = 0u;
  *(_OWORD *)(a1 + 5464) = 0u;
  uint64_t v11 = *(void *)(*(void *)(a1 + 8) + 248);
  int v12 = *(_DWORD *)(v11 + 1116);
  if (v12) {
    int v13 = *(_DWORD *)(v11 + 1116);
  }
  else {
    int v13 = 2;
  }
  *(void *)(a1 + 2960) = 0;
  if ((v10 & 1) == 0 && !v12)
  {
    if (*(_DWORD *)(v11 + 472) == 42 && *(_DWORD *)(v11 + 480) == 3 && *(_DWORD *)(v11 + 484) == 25)
    {
      int v13 = 3;
    }
    else if (*(_DWORD *)(v11 + 484) == 21)
    {
      int v13 = 4;
    }
    else
    {
      int v13 = 1;
    }
  }
  *(_DWORD *)(a1 + 5512) = v13;
  if (dword_1EBCFF5E0)
  {
    BOOL v14 = dword_1EBCFF5E0 == 1;
    unsigned int v15 = *(_DWORD *)(v11 + 472) & 0xFFFFFFFE;
  }
  else
  {
    unsigned int v15 = *(_DWORD *)(v11 + 472) & 0xFFFFFFFE;
    BOOL v14 = v15 == 44 || v13 == 4;
  }
  *(unsigned char *)(a1 + 3531) = v14;
  *(unsigned char *)(a1 + 3534) = v15 != 44;
  *(unsigned char *)(a1 + 354++*(_DWORD *)(result + 8) = v13 == 2;
  if (*(char *)(v11 + 1215) < 0) {
    uint64_t v17 = *(void *)(v11 + 1200);
  }
  else {
    uint64_t v17 = *(unsigned __int8 *)(v11 + 1215);
  }
  *(unsigned char *)(a1 + 3549) = v17 != 0;
  BOOL v18 = v13 != 3;
  if (dword_1EBCFFCE8) {
    BOOL v19 = dword_1EBCFFCE8 == 1;
  }
  else {
    BOOL v19 = v18;
  }
  *(unsigned char *)(a1 + 3530) = v19;
  DwarfVersiounsigned int n = *(_DWORD *)(v11 + 1136);
  if (!DwarfVersion) {
    DwarfVersiounsigned int n = llvm::Module::getDwarfVersion(*(llvm::Module **)(*(void *)(a1 + 16) + 2064));
  }
  if (DwarfVersion) {
    int v21 = DwarfVersion;
  }
  else {
    int v21 = 4;
  }
  if ((*(_DWORD *)(v11 + 472) & 0xFFFFFFFE) == 0x2C) {
    unsigned int v22 = 2;
  }
  else {
    unsigned int v22 = v21;
  }
  BOOL v23 = v22 >= 3 && sub_1CD0BDF24(*(_DWORD *)(v11 + 472)) == 64;
  if ((*(_WORD *)(*(void *)(*(void *)(a1 + 8) + 248) + 1128) & 0x2000) == 0
    && !llvm::Module::isDwarf64(*(llvm::Module **)(*(void *)(a1 + 16) + 2064)))
  {
    int v24 = *(_DWORD *)(v11 + 492);
    goto LABEL_43;
  }
  int v24 = *(_DWORD *)(v11 + 492);
  if (v24 != 3)
  {
LABEL_43:
    BOOL v25 = v24 == 9;
    goto LABEL_44;
  }
  BOOL v25 = 1;
LABEL_44:
  BOOL v26 = v23 && v25;
  if (!v26 && sub_1CD0BDF24(*(_DWORD *)(v11 + 472)) == 64 && v24 == 9) {
    llvm::report_fatal_error((llvm *)"XCOFF requires DWARF64 for 64-bit mode!", (const llvm::Twine *)1);
  }
  if (byte_1EBCFEFB0) {
    BOOL v27 = 0;
  }
  else {
    BOOL v27 = (*(_DWORD *)(v11 + 472) & 0xFFFFFFFE) != 44;
  }
  *(unsigned char *)(a1 + 3532) = v27;
  if (dword_1EBCFF838) {
    BOOL v28 = dword_1EBCFF838 == 1;
  }
  else {
    BOOL v28 = (*(_DWORD *)(v11 + 472) & 0xFFFFFFFE) == 44;
  }
  char v29 = v28;
  *(unsigned char *)(a1 + 3533) = v29;
  int v30 = *(_DWORD *)(*(void *)(a2 + 248) + 492);
  BOOL v31 = (v30 | 4) == 7 && byte_1EBCFEE30 != 0;
  *(unsigned char *)(a1 + 3535) = v31;
  int v32 = *(_DWORD *)(a1 + 5512);
  if (dword_1EBCFF388) {
    int v33 = dword_1EBCFF388;
  }
  else {
    int v33 = 1;
  }
  if (!v31 && !dword_1EBCFF388)
  {
    if (v22 <= 4)
    {
      if (v32 == 2)
      {
        if (v30 == 5) {
          int v33 = 2;
        }
        else {
          int v33 = 3;
        }
      }
      else
      {
        int v33 = 1;
      }
    }
    else
    {
      int v33 = 3;
    }
  }
  *(_DWORD *)(a1 + 3544) = v33;
  BOOL v34 = v22 < 3;
  if (v32 == 1) {
    BOOL v34 = 1;
  }
  *(unsigned char *)(a1 + 352++*(_DWORD *)(result + 8) = v34;
  BOOL v35 = v32 == 1 || v22 < 4;
  *(unsigned char *)(a1 + 3529) = v35;
  *(unsigned char *)(a1 + 3550) = v22 > 4;
  uint64_t v36 = *(void *)(a1 + 8);
  uint64_t v37 = *(void *)(v36 + 248);
  unsigned int v38 = *(unsigned __int16 *)(v37 + 1064);
  if ((v38 & 2) == 0 || *(_DWORD *)(v37 + 1116) == 3) {
    int v39 = (v38 >> 2) & 1;
  }
  else {
    LOBYTE(v39) = 1;
  }
  *(unsigned char *)(a1 + 3551) = v39;
  if (v22 <= 4)
  {
    char v40 = byte_1EBCFF070;
    if (byte_1EBCFF070) {
      char v40 = *(unsigned char *)(a1 + 3549) == 0;
    }
  }
  else
  {
    char v40 = 1;
  }
  *(unsigned char *)(a1 + 3536) = v40;
  if (dword_1EBCFFA90)
  {
    BOOL v41 = dword_1EBCFFA90 == 1;
  }
  else if (v32 == 2)
  {
    BOOL v41 = v24 == 5;
  }
  else
  {
    if (v32 != 1)
    {
      char v42 = 1;
      goto LABEL_87;
    }
    BOOL v41 = *(unsigned char *)(a1 + 3549) == 0;
  }
  char v42 = v41;
LABEL_87:
  *(unsigned char *)(a1 + 3537) = v42;
  if (v22 >= 5)
  {
    int v43 = dword_1EBCFFF40;
    if (dword_1EBCFFF40 <= 1) {
      int v43 = 1;
    }
    *(_DWORD *)(a1 + 3540) = v43;
  }
  uint64_t v44 = *(void *)(*(void *)(v36 + 272) + 8);
  *(_WORD *)(v44 + 1624) = v22;
  *(unsigned char *)(v44 + 1626) = v26;
  return a1;
}

uint64_t sub_1CD29A624(uint64_t a1)
{
  uint64_t v2 = (char *)(a1 + 4391);
  *(void *)a1 = &unk_1F2649B58;
  sub_1CD2A48BC(a1 + 5320);
  sub_1CD2A48BC(a1 + 5128);
  sub_1CD2A48BC(a1 + 4936);
  sub_1CD2A48BC(a1 + 4744);
  sub_1CD2A48BC(a1 + 4552);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 4512), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 4488), 8);
  if (v2[24] < 0) {
    operator delete(*(void **)(a1 + 4392));
  }
  if (*v2 < 0) {
    operator delete(*(void **)(a1 + 4368));
  }
  sub_1CC3724DC(a1 + 4336);
  sub_1CCBB8FFC((char **)(a1 + 4104));
  sub_1CBFCD310((char **)(a1 + 4016));
  sub_1CD2A4A14(a1 + 3552);
  sub_1CD2A927C((void **)(a1 + 3496));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 3472), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 3448), 8);
  sub_1CD2A4A14(a1 + 2992);
  uint64_t v3 = *(void **)(a1 + 2816);
  if (v3 != (void *)(a1 + 2832)) {
    free(v3);
  }
  uint64_t v4 = *(void **)(a1 + 2664);
  if (v4 != *(void **)(a1 + 2656)) {
    free(v4);
  }
  BOOL v25 = (void **)(a1 + 2616);
  sub_1CB8338B8(&v25);
  uint64_t v5 = *(void **)(a1 + 2336);
  if (v5 != (void *)(a1 + 2360)) {
    free(v5);
  }
  uint64_t v6 = *(void **)(a1 + 1296);
  if (v6 != (void *)(a1 + 1312)) {
    free(v6);
  }
  uint64_t v7 = *(void **)(a1 + 1184);
  if (v7 != (void *)(a1 + 1200)) {
    free(v7);
  }
  char v8 = *(char **)(a1 + 656);
  uint64_t v9 = *(unsigned int *)(a1 + 664);
  if (v9)
  {
    uint64_t v20 = 8 * v9;
    int v21 = v8 - 8;
    do
    {
      uint64_t v22 = *(void *)&v21[v20];
      *(void *)&v21[v20] = 0;
      if (v22) {
        (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
      }
      v20 -= 8;
    }
    while (v20);
    char v8 = *(char **)(a1 + 656);
  }
  if (v8 != (char *)(a1 + 672)) {
    free(v8);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 632), 8);
  char v10 = *(void **)(a1 + 608);
  if (v10)
  {
    *(void *)(a1 + 616) = v10;
    operator delete(v10);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 584), 8);
  uint64_t v11 = *(void **)(a1 + 560);
  if (v11)
  {
    *(void *)(a1 + 56++*(_DWORD *)(result + 8) = v11;
    operator delete(v11);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 536), 8);
  uint64_t v12 = *(unsigned int *)(a1 + 464);
  if (v12)
  {
    int v13 = *(uint64_t **)(a1 + 456);
    uint64_t v14 = 8 * v12;
    do
    {
      uint64_t v15 = *v13++;
      MEMORY[0x1D25D9CD0](v15, 8);
      v14 -= 8;
    }
    while (v14);
  }
  unint64_t v16 = *(uint64_t **)(a1 + 504);
  uint64_t v17 = *(unsigned int *)(a1 + 512);
  if (v17)
  {
    uint64_t v23 = 16 * v17;
    do
    {
      uint64_t v24 = *v16;
      v16 += 2;
      MEMORY[0x1D25D9CD0](v24, 8);
      v23 -= 16;
    }
    while (v23);
    unint64_t v16 = *(uint64_t **)(a1 + 504);
  }
  if (v16 != (uint64_t *)(a1 + 520)) {
    free(v16);
  }
  BOOL v18 = *(void **)(a1 + 456);
  if (v18 != (void *)(a1 + 472)) {
    free(v18);
  }
  return sub_1CD29A900(a1);
}

uint64_t sub_1CD29A900(uint64_t a1)
{
  *(void *)a1 = &unk_1F2649820;
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 416), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 392), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 368), 8);
  uint64_t v2 = *(void **)(a1 + 344);
  if (v2)
  {
    *(void *)(a1 + 352) = v2;
    operator delete(v2);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 320), 8);
  char v10 = (void **)(a1 + 296);
  sub_1CD2A4CC0(&v10);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 272), 8);
  sub_1CC2EDB5C(a1 + 64);
  uint64_t v3 = *(unsigned __int8 **)(a1 + 48);
  if (v3) {
    llvm::MetadataTracking::untrack(a1 + 48, v3);
  }
  uint64_t v4 = *(unsigned __int8 **)(a1 + 24);
  if (v4)
  {
    int v5 = *v4;
    if ((v5 - 4) > 0x1E)
    {
      if ((v5 - 3) >= 0xFFFFFFFE) {
        uint64_t v7 = *(void *)(a1 + 24);
      }
      else {
        uint64_t v7 = 0;
      }
      if ((v5 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v8 = v7 + 8;
LABEL_15:
        char v10 = (void **)(a1 + 24);
        sub_1CC5FA668(v8 + 16, &v10);
        return a1;
      }
      if (v5 == 3) {
        *((void *)v4 + 1) = 0;
      }
    }
    else if ((v4[1] & 0x7F) == 2 || *((_DWORD *)v4 + 3))
    {
      uint64_t v9 = *((void *)v4 + 2);
      if ((v9 & 4) != 0)
      {
        unint64_t v8 = v9 & 0xFFFFFFFFFFFFFFF8;
        if (v8) {
          goto LABEL_15;
        }
      }
    }
  }
  return a1;
}

void sub_1CD29AA44(uint64_t a1)
{
  sub_1CD29A624(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD29AA7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v4 = *(_DWORD *)(a1 + 3544) != 2 && *(_DWORD *)(a2 + 52) == 2;
  if (v4 || (*(unsigned char *)(a3 + 44) & 8) == 0) {
    return;
  }
  uint64_t v9 = *(unsigned int *)(a3 + 8);
  uint64_t v10 = -v9;
  uint64_t v11 = *(void *)(a3 - 8 * v9 + 16);
  if (v11)
  {
    uint64_t v12 = *(void *)(v11 + 8);
    if (*(void *)v12)
    {
      sub_1CD2A4490(a1, a2, a1 + 4744, (unsigned __int8 *)(v12 + 24), *(void *)v12, a4);
      uint64_t v10 = -(uint64_t)*(unsigned int *)(a3 + 8);
    }
  }
  uint64_t v13 = a3 + 8 * v10;
  uint64_t v14 = *(void *)(v13 + 24);
  if (v14)
  {
    uint64_t v15 = *(size_t **)(v14 + 8);
    size_t v16 = *v15;
    if (*v15)
    {
      uint64_t v17 = *(void *)(v13 + 16);
      if (!v17 || (BOOL v18 = *(void **)(v17 + 8), *v18 != v16) || memcmp(v18 + 3, v15 + 3, v16))
      {
        if (!*(unsigned char *)(a1 + 3530))
        {
          uint64_t v54 = 0;
          v55[0] = a3;
          if ((sub_1CB915048((uint64_t *)(a1 + 3376), v55, &v54) & 1) == 0 || !*(void *)(v54 + 8)) {
            goto LABEL_22;
          }
          uint64_t v10 = -(uint64_t)*(unsigned int *)(a3 + 8);
        }
        uint64_t v19 = *(void *)(a3 + 8 * v10 + 24);
        if (v19)
        {
          uint64_t v20 = *(void **)(v19 + 8);
          size_t v23 = *v20;
          int v21 = (unsigned __int8 *)(v20 + 3);
          size_t v22 = v23;
        }
        else
        {
          size_t v22 = 0;
          int v21 = 0;
        }
        sub_1CD2A4490(a1, a2, a1 + 4744, v21, v22, a4);
      }
    }
  }
LABEL_22:
  uint64_t v24 = *(void *)(a3 - 8 * *(unsigned int *)(a3 + 8) + 16);
  if (!v24) {
    return;
  }
  BOOL v25 = *(void **)(v24 + 8);
  size_t v28 = *v25;
  BOOL v26 = (unsigned __int8 *)(v25 + 3);
  size_t v27 = v28;
  if (!v28) {
    return;
  }
  int v29 = *v26;
  if (v29 != 45 && v29 != 43) {
    return;
  }
  v55[0] = (uint64_t)v26;
  v55[1] = v27;
  if (llvm::StringRef::find(v55, ") ", 2uLL, 0) == -1)
  {
    char v40 = memchr(v26, 91, v27);
    if (v40) {
      unint64_t v41 = v40 - v26 + 1;
    }
    else {
      unint64_t v41 = 0;
    }
    char v42 = memchr(v26, 32, v27);
    size_t v39 = 0;
    unint64_t v43 = v42 - v26;
    if (!v42) {
      unint64_t v43 = -1;
    }
    if (v27 >= v41) {
      size_t v34 = v41;
    }
    else {
      size_t v34 = v27;
    }
    if (v34 > v43) {
      unint64_t v43 = v34;
    }
    if (v27 < v43) {
      unint64_t v43 = v27;
    }
    size_t v35 = v43 - v34;
    unsigned int v38 = "";
  }
  else
  {
    int v30 = memchr(v26, 91, v27);
    if (v30) {
      unint64_t v31 = v30 - v26 + 1;
    }
    else {
      unint64_t v31 = 0;
    }
    int v32 = memchr(v26, 40, v27);
    unint64_t v33 = v32 - v26;
    if (!v32) {
      unint64_t v33 = -1;
    }
    if (v27 >= v31) {
      size_t v34 = v31;
    }
    else {
      size_t v34 = v27;
    }
    if (v34 > v33) {
      unint64_t v33 = v34;
    }
    if (v27 < v33) {
      unint64_t v33 = v27;
    }
    size_t v35 = v33 - v34;
    uint64_t v36 = memchr(v26, 32, v27);
    unint64_t v37 = v36 - v26;
    if (!v36) {
      unint64_t v37 = -1;
    }
    if (v34 > v37) {
      unint64_t v37 = v34;
    }
    if (v27 < v37) {
      unint64_t v37 = v27;
    }
    unsigned int v38 = &v26[v34];
    size_t v39 = v37 - v34;
  }
  if (*(_DWORD *)(a1 + 3544) == 2) {
    sub_1CD2A4490(a1, a2, a1 + 4936, &v26[v34], v35, a4);
  }
  if (v39 && *(_DWORD *)(a1 + 3544) == 2) {
    sub_1CD2A4490(a1, a2, a1 + 4936, v38, v39, a4);
  }
  uint64_t v44 = *(void *)(a3 - 8 * *(unsigned int *)(a3 + 8) + 16);
  if (!v44)
  {
    size_t v47 = 0;
    uint64_t v46 = 0;
    goto LABEL_72;
  }
  uint64_t v45 = *(size_t **)(v44 + 8);
  size_t v48 = *v45;
  uint64_t v46 = v45 + 3;
  size_t v47 = v48;
  if (!v48)
  {
LABEL_72:
    uint64_t v50 = -1;
LABEL_73:
    unint64_t v52 = -1;
    goto LABEL_74;
  }
  int v49 = memchr(v46, 32, v47);
  if (v49) {
    uint64_t v50 = v49 - (unsigned char *)v46;
  }
  else {
    uint64_t v50 = -1;
  }
  uint64_t v51 = memchr(v46, 93, v47);
  if (!v51) {
    goto LABEL_73;
  }
  unint64_t v52 = v51 - (unsigned char *)v46;
LABEL_74:
  if (v47 >= v50 + 1) {
    size_t v53 = v50 + 1;
  }
  else {
    size_t v53 = v47;
  }
  if (v53 > v52) {
    unint64_t v52 = v53;
  }
  if (v47 < v52) {
    unint64_t v52 = v47;
  }
  sub_1CD2A4490(a1, a2, a1 + 4744, (unsigned __int8 *)v46 + v53, v52 - v53, a4);
}

BOOL sub_1CD29AE2C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24)) {
    return 0;
  }
  int v3 = *(_DWORD *)(a2 + 88);
  if (v3 == 1) {
    return sub_1CD28F6F0(a1, *(void *)(*(void *)(a2 + 80) + 8)) == 0;
  }
  else {
    return v3 == 0;
  }
}

uint64_t sub_1CD29AE80(uint64_t *a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = sub_1CD29B8B0(a1 + 67, a2);
  if (!v4)
  {
    uint64_t v5 = a2;
    if (*(unsigned char *)a2 == 15 || (uint64_t v5 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8))) != 0)
    {
      uint64_t v5 = *(void *)(v5 - 8 * *(unsigned int *)(v5 + 8) + 8);
      if (v5)
      {
        uint64_t v6 = *(void **)(v5 + 8);
        uint64_t v8 = *v6;
        uint64_t v7 = (const char *)(v6 + 3);
        uint64_t v5 = v8;
      }
      else
      {
        uint64_t v7 = 0;
      }
    }
    else
    {
      uint64_t v7 = "";
    }
    a1[372] = (uint64_t)v7;
    a1[373] = v5;
    operator new();
  }
  return v4;
}

unint64_t sub_1CD29B4B0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = a2;
  if (*(unsigned char *)a2 == 15 || (uint64_t v6 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8))) != 0)
  {
    uint64_t v7 = *(void *)(v6 - 8 * *(unsigned int *)(v6 + 8));
    if (v7)
    {
      uint64_t v8 = *(void **)(v7 + 8);
      size_t v11 = *v8;
      uint64_t v10 = (char *)(v8 + 3);
      size_t v9 = v11;
    }
    else
    {
      size_t v9 = 0;
      uint64_t v10 = 0;
    }
  }
  else
  {
    size_t v9 = 0;
    uint64_t v10 = "";
  }
  uint64_t v12 = a2 - 8 * *(unsigned int *)(a2 + 8);
  uint64_t v13 = *(void *)(v12 + 8);
  if (v13)
  {
    uint64_t v14 = *(void **)(v13 + 8);
    std::string::size_type v17 = *v14;
    uint64_t v15 = (std::string::value_type *)(v14 + 3);
    std::string::size_type v16 = v17;
  }
  else
  {
    std::string::size_type v16 = 0;
    uint64_t v15 = 0;
  }
  uint64_t v18 = *(void *)(v12 + 16);
  if (v18
    && (uint64_t v19 = *(void **)(v18 + 8), v22 = *v19, v21 = (const std::string::value_type *)(v19 + 3), (v20 = v22) != 0)
    && !*(unsigned char *)(a1 + 3548))
  {
    std::string::size_type __sz = v20;
    if (v15) {
      std::string::__init(&v46, v15, v16);
    }
    else {
      memset(&v46, 0, sizeof(v46));
    }
    uint64_t v36 = std::string::append(&v46, " ");
    std::string::size_type v37 = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    std::string::__init(&v45, v21, __sz);
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v38 = &v45;
    }
    else {
      unsigned int v38 = (std::string *)v45.__r_.__value_.__r.__words[0];
    }
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = *((unsigned char *)&v45.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      std::string::size_type size = v45.__r_.__value_.__l.__size_;
    }
    char v40 = std::string::append(&v47, (const std::string::value_type *)v38, size);
    std::string::size_type v41 = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    uint64_t v49 = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    if (v49 >= 0) {
      char v42 = __p;
    }
    else {
      char v42 = (void **)__p[0];
    }
    if (v49 >= 0) {
      size_t v43 = HIBYTE(v49) & 0x7F;
    }
    else {
      size_t v43 = (size_t)__p[1];
    }
    sub_1CD2B2780((uint64_t *)a3, a3 + 8, 37, v42, v43);
    if (SHIBYTE(v49) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    sub_1CD2B2780((uint64_t *)a3, a3 + 8, 37, v15, v16);
  }
  __p[0] = (void *)*(unsigned int *)(a2 + 24);
  sub_1CD2938A0(a3, (unint64_t *)(a3 + 16), 19, 5, __p);
  unint64_t result = (unint64_t)sub_1CD2B2780((uint64_t *)a3, a3 + 8, 3, v10, v9);
  uint64_t v24 = *(unsigned int *)(a2 + 8);
  uint64_t v25 = -v24;
  uint64_t v26 = *(void *)(a2 - 8 * v24 + 72);
  if (v26)
  {
    unint64_t v31 = *(size_t **)(v26 + 8);
    if (*v31)
    {
      unint64_t result = (unint64_t)sub_1CD2B2780((uint64_t *)a3, a3 + 8, 15874, v31 + 3, *v31);
      uint64_t v25 = -(uint64_t)*(unsigned int *)(a2 + 8);
    }
  }
  uint64_t v27 = *(void *)(a2 + 8 * v25 + 80);
  if (v27)
  {
    int v32 = *(size_t **)(v27 + 8);
    if (*v32) {
      unint64_t result = (unint64_t)sub_1CD2B2780((uint64_t *)a3, a3 + 8, 16367, v32 + 3, *v32);
    }
  }
  if (*(unsigned char *)(a1 + 3550) && !*(unsigned char *)(a1 + 3549)) {
    unint64_t result = sub_1CD8B0E04(a3);
  }
  if (!*(unsigned char *)(a1 + 3549))
  {
    sub_1CD294868(a3);
    size_t v28 = *(void *)(a1 + 2984);
    if (v28) {
      sub_1CD2B2780((uint64_t *)a3, a3 + 8, 27, *(void **)(a1 + 2976), v28);
    }
    unint64_t result = sub_1CD2982E8((void *)a3);
    if (result) {
      unint64_t result = sub_1CD2B26C0(a3, a3 + 8, 8500);
    }
  }
  if (*(unsigned char *)(a1 + 3548))
  {
    if (*(unsigned char *)(a2 + 28)) {
      unint64_t result = sub_1CD2B26C0(a3, a3 + 8, 16353);
    }
    uint64_t v29 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
    if (v29)
    {
      int v30 = *(size_t **)(v29 + 8);
      if (*v30) {
        unint64_t result = (unint64_t)sub_1CD2B2780((uint64_t *)a3, a3 + 8, 16354, v30 + 3, *v30);
      }
    }
    if (*(_DWORD *)(a2 + 32))
    {
      __p[0] = (void *)*(unsigned int *)(a2 + 32);
      unint64_t result = sub_1CD2938A0(a3, (unint64_t *)(a3 + 16), 16357, 11, __p);
    }
  }
  if (*(void *)(a2 + 40))
  {
    __p[0] = *(void **)(a2 + 40);
    unint64_t result = sub_1CD2938A0(a3, (unint64_t *)(a3 + 16), 8497, 7, __p);
    uint64_t v33 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
    if (v33)
    {
      size_t v34 = *(size_t **)(v33 + 8);
      if (*v34)
      {
        if (*(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 272) + 8) + 1624) <= 4u) {
          int v35 = 8496;
        }
        else {
          int v35 = 118;
        }
        return (unint64_t)sub_1CD2B2780((uint64_t *)a3, a3 + 8, v35, v34 + 3, *v34);
      }
    }
  }
  return result;
}

uint64_t sub_1CD29B8B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 4);
  if (v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v5 = (uint64_t *)(v2 + 16 * v4);
    uint64_t v6 = *v5;
    if (*v5 == a2) {
      goto LABEL_8;
    }
    int v7 = 1;
    while (v6 != -4096)
    {
      int v8 = v4 + v7++;
      uint64_t v4 = v8 & (v3 - 1);
      uint64_t v6 = *(void *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        uint64_t v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  uint64_t v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_8:
  if (v5 == (uint64_t *)(v2 + 16 * v3)) {
    return 0;
  }
  else {
    return *(void *)(a1[3] + 16 * *((unsigned int *)v5 + 2) + 8);
  }
}