uint64_t llvm::SROAPass::deleteDeadInstructions(unsigned int *a1, llvm::SmallPtrSetImplBase *this)
{
  unsigned int v2;
  unsigned int *v5;
  unint64_t v6;
  uint64_t v7;
  int32x2_t ****v8;
  unint64_t v9;
  unsigned int v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  int32x2_t *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  unsigned int v32;
  unint64_t v33;
  int32x2_t ****v34;
  int32x2_t *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int32x2_t *****v40;
  int32x2_t ****v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  int v49;
  BOOL v50;
  unsigned int v51;
  uint64_t *v52;
  unint64_t *v53;
  unint64_t *v54;
  llvm::UndefValue *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unsigned int v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  int32x2_t ****v72;
  int32x2_t *v73;
  unint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  int32x2_t *****v78;
  int32x2_t ****v79;
  int v80;
  int v81;
  unint64_t v82;
  BOOL v83;
  char *v84;
  unint64_t v86;
  unint64_t *v87;
  int32x2_t ****v88;

  v2 = a1[50];
  if (v2)
  {
    v5 = a1 + 48;
    while (1)
    {
      v6 = *(void *)v5;
      v7 = *(void *)v5 + 24 * v2;
      v86 = 4;
      v87 = 0;
      v8 = *(int32x2_t *****)(v7 - 8);
      v88 = v8;
      if (v8 && v8 != (int32x2_t ****)-8192 && v8 != (int32x2_t ****)-4096)
      {
        v9 = *(void *)(v7 - 24) & 0xFFFFFFFFFFFFFFF8;
        v87 = *(unint64_t **)v9;
        *(void *)v9 = &v86;
        v86 = v9 | 4;
        if (v87) {
          *v87 = *v87 & 7 | (unint64_t)&v87;
        }
        v6 = *(void *)v5;
      }
      v10 = v2 - 1;
      a1[50] = v10;
      v11 = (void *)(v6 + 24 * v10);
      v12 = v11[2];
      if (v12 && v12 != -8192 && v12 != -4096)
      {
        v13 = *v11 & 0xFFFFFFFFFFFFFFF8;
        *(void *)v13 = v11[1];
        v14 = (unint64_t *)v11[1];
        if (v14)
        {
          *v14 = *v14 & 7 | v13;
        }
        else
        {
          v15 = v11[2];
          v16 = ***(int32x2_t ****)v15;
          v17 = (unint64_t)v16[303];
          if (v17 <= v13)
          {
            v18 = v16[305].u32[0];
            if (v17 + 16 * v18 > v13)
            {
              v19 = v18 - 1;
              LODWORD(v20) = v19 & ((v15 >> 4) ^ (v15 >> 9));
              v21 = (uint64_t *)(v17 + 16 * v20);
              v22 = *v21;
              if (v15 == *v21)
              {
LABEL_20:
                *v21 = -8192;
                v16[304] = vadd_s32(v16[304], (int32x2_t)0x1FFFFFFFFLL);
                v15 = v11[2];
              }
              else
              {
                v23 = 1;
                while (v22 != -4096)
                {
                  v24 = v20 + v23++;
                  v20 = v24 & v19;
                  v22 = *(void *)(v17 + 16 * v20);
                  if (v15 == v22)
                  {
                    v21 = (uint64_t *)(v17 + 16 * v20);
                    goto LABEL_20;
                  }
                }
              }
              *(unsigned char *)(v15 + 17) &= ~1u;
            }
          }
        }
      }
      if (v88)
      {
        if (*((unsigned __int8 *)v88 + 16) <= 0x1Bu) {
          v25 = 0;
        }
        else {
          v25 = (uint64_t)v88;
        }
      }
      else
      {
        v25 = 0;
      }
      if (v88 != (int32x2_t ****)-8192 && v88 != (int32x2_t ****)-4096 && v88 != 0)
      {
        v33 = v86 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v86 & 0xFFFFFFFFFFFFFFF8) = v87;
        if (v87)
        {
          *v87 = *v87 & 7 | v33;
        }
        else
        {
          v34 = v88;
          v35 = ***v88;
          v36 = (unint64_t)v35[303];
          if (v36 <= v33)
          {
            v37 = v35[305].u32[0];
            if (v36 + 16 * v37 > v33)
            {
              v38 = v37 - 1;
              LODWORD(v39) = v38 & ((v88 >> 4) ^ (v88 >> 9));
              v40 = (int32x2_t *****)(v36 + 16 * v39);
              v41 = *v40;
              if (v88 == *v40)
              {
LABEL_54:
                *v40 = (int32x2_t ****)-8192;
                v35[304] = vadd_s32(v35[304], (int32x2_t)0x1FFFFFFFFLL);
                v34 = v88;
              }
              else
              {
                v42 = 1;
                while (v41 != (int32x2_t ****)-4096)
                {
                  v43 = v39 + v42++;
                  v39 = v43 & v38;
                  v41 = *(int32x2_t *****)(v36 + 16 * v39);
                  if (v88 == v41)
                  {
                    v40 = (int32x2_t *****)(v36 + 16 * v39);
                    goto LABEL_54;
                  }
                }
              }
              *((unsigned char *)v34 + 17) &= ~1u;
            }
          }
        }
      }
      if (v25) {
        break;
      }
      v2 = a1[50];
      if (!v2) {
        return 0;
      }
    }
    if (*(unsigned char *)(v25 + 16) != 59) {
      goto LABEL_85;
    }
    v27 = *((void *)this + 1);
    v28 = *((unsigned int *)this + 5);
    if (v27 == *(void *)this)
    {
      if (v28)
      {
        v29 = 0;
        v30 = 8 * v28;
        v31 = (uint64_t *)*((void *)this + 1);
        do
        {
          if (*v31 == v25) {
            goto LABEL_79;
          }
          if (*v31 == -2) {
            v29 = v31;
          }
          ++v31;
          v30 -= 8;
        }
        while (v30);
        if (v29)
        {
          *v29 = v25;
          --*((_DWORD *)this + 6);
          goto LABEL_79;
        }
      }
      v32 = *((_DWORD *)this + 4);
      if (v28 < v32)
      {
        *((_DWORD *)this + 5) = v28 + 1;
        *(void *)(v27 + 8 * v28) = v25;
LABEL_79:
        llvm::FindDbgAddrUses(v25, &v86);
        if ((v86 & 4) != 0)
        {
          v53 = *(unint64_t **)(v86 & 0xFFFFFFFFFFFFFFF8);
          v54 = &v53[*(unsigned int *)((v86 & 0xFFFFFFFFFFFFFFF8) + 8)];
        }
        else
        {
          v53 = &v86;
          v54 = &v86 + (v86 > 7);
        }
        if (v53 != v54) {
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        sub_1CBFA5CA8(&v86);
LABEL_85:
        v55 = llvm::UndefValue::get(*(llvm::UndefValue **)v25, this);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v25, v55, (llvm::Value *)1);
        v56 = *(_DWORD *)(v25 + 20);
        if ((v56 & 0x40000000) != 0)
        {
          v58 = *(void *)(v25 - 8);
          v57 = v56 & 0x7FFFFFF;
        }
        else
        {
          v57 = v56 & 0x7FFFFFF;
          v58 = v25 - 32 * v57;
        }
        v59 = v58 + 32 * v57;
        if (!v57) {
LABEL_129:
        }
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        while (1)
        {
          v60 = *(void *)v58;
          if (*(void *)v58 && *(unsigned __int8 *)(*(void *)v58 + 16) >= 0x1Cu)
          {
            **(void **)(v58 + 16) = *(void *)(v58 + 8);
            v62 = *(void *)(v58 + 8);
            if (v62) {
              *(void *)(v62 + 16) = *(void *)(v58 + 16);
            }
            *(void *)v58 = 0;
            if (!*(void *)(v60 + 8))
            {
              if (llvm::wouldInstructionBeTriviallyDead(v60, 0)) {
                break;
              }
            }
          }
LABEL_97:
          v58 += 32;
          if (v58 == v59) {
            goto LABEL_129;
          }
        }
        v86 = 4;
        v87 = 0;
        v88 = (int32x2_t ****)v60;
        if (v60 != -8192 && v60 != -4096 && v60) {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v86);
        }
        v63 = a1[50];
        v64 = *((void *)a1 + 24);
        if (v63 >= a1[51])
        {
          v82 = v63 + 1;
          v83 = v64 + 24 * v63 > (unint64_t)&v86;
          if (v64 <= (unint64_t)&v86 && v83)
          {
            v84 = (char *)&v86 - v64;
            sub_1CC0BD844(v5, v82);
            v64 = *(void *)v5;
            v65 = (unint64_t *)&v84[*(void *)v5];
            goto LABEL_106;
          }
          sub_1CC0BD844(v5, v82);
          v64 = *(void *)v5;
        }
        v65 = &v86;
LABEL_106:
        v66 = a1[50];
        v67 = (unint64_t *)(v64 + 24 * v66);
        *v67 = 4;
        v67[1] = 0;
        v68 = v65[2];
        v67[2] = v68;
        if (v68 != -8192 && v68 != -4096)
        {
          if (v68)
          {
            v69 = *v65 & 0xFFFFFFFFFFFFFFF8;
            v67[1] = *(void *)v69;
            *(void *)v69 = v67;
            *v67 = v69 | 4;
            v70 = (unint64_t *)v67[1];
            if (v70) {
              *v70 = *v70 & 7 | (unint64_t)(v67 + 1);
            }
          }
        }
        a1[50] = v66 + 1;
        if (v88 != (int32x2_t ****)-8192 && v88 != (int32x2_t ****)-4096 && v88)
        {
          v71 = v86 & 0xFFFFFFFFFFFFFFF8;
          *(void *)(v86 & 0xFFFFFFFFFFFFFFF8) = v87;
          if (v87)
          {
            *v87 = *v87 & 7 | v71;
          }
          else
          {
            v72 = v88;
            v73 = ***v88;
            v74 = (unint64_t)v73[303];
            if (v74 <= v71)
            {
              v75 = v73[305].u32[0];
              if (v74 + 16 * v75 > v71)
              {
                v76 = v75 - 1;
                LODWORD(v77) = v76 & ((v88 >> 4) ^ (v88 >> 9));
                v78 = (int32x2_t *****)(v74 + 16 * v77);
                v79 = *v78;
                if (v88 != *v78)
                {
                  v80 = 1;
                  do
                  {
                    if (v79 == (int32x2_t ****)-4096) {
                      goto LABEL_123;
                    }
                    v81 = v77 + v80++;
                    v77 = v81 & v76;
                    v79 = *(int32x2_t *****)(v74 + 16 * v77);
                  }
                  while (v88 != v79);
                  v78 = (int32x2_t *****)(v74 + 16 * v77);
                }
                *v78 = (int32x2_t ****)-8192;
                v73[304] = vadd_s32(v73[304], (int32x2_t)0x1FFFFFFFFLL);
                v72 = v88;
LABEL_123:
                *((unsigned char *)v72 + 17) &= ~1u;
              }
            }
          }
        }
        goto LABEL_97;
      }
    }
    else
    {
      v32 = *((_DWORD *)this + 4);
    }
    if (3 * v32 <= 4 * ((int)v28 - *((_DWORD *)this + 6)))
    {
      if (v32 >= 0x40) {
        v32 *= 2;
      }
      else {
        v32 = 128;
      }
    }
    else if (v32 - v28 >= v32 >> 3)
    {
      goto LABEL_59;
    }
    llvm::SmallPtrSetImplBase::Grow(this, v32);
    v32 = *((_DWORD *)this + 4);
    v27 = *((void *)this + 1);
LABEL_59:
    v44 = v32 - 1;
    v45 = (v32 - 1) & ((v25 >> 4) ^ (v25 >> 9));
    v46 = (uint64_t *)(v27 + 8 * v45);
    v47 = *v46;
    if (*v46 == -1)
    {
      v48 = 0;
LABEL_72:
      if (v48) {
        v52 = v48;
      }
      else {
        v52 = v46;
      }
      if (*v52 != v25)
      {
        if (*v52 == -2) {
          --*((_DWORD *)this + 6);
        }
        else {
          ++*((_DWORD *)this + 5);
        }
        *v52 = v25;
      }
    }
    else
    {
      v48 = 0;
      v49 = 1;
      while (v47 != v25)
      {
        if (v48) {
          v50 = 0;
        }
        else {
          v50 = v47 == -2;
        }
        if (v50) {
          v48 = v46;
        }
        v51 = v45 + v49++;
        v45 = v51 & v44;
        v46 = (uint64_t *)(v27 + 8 * (v51 & v44));
        v47 = *v46;
        if (*v46 == -1) {
          goto LABEL_72;
        }
      }
    }
    goto LABEL_79;
  }
  return 0;
}

BOOL llvm::SROAPass::promoteAllocas(llvm::SROAPass *this, llvm::Function *a2)
{
  uint64_t v2 = *((void *)this + 71);
  uint64_t v3 = *((void *)this + 72);
  if (v2 != v3)
  {
    llvm::PromoteMemToReg(*((const void **)this + 71), (v3 - v2) >> 3, *((void **)this + 1), *((void *)this + 2));
    *((void *)this + 72) = *((void *)this + 71);
  }
  return v2 != v3;
}

void llvm::SROAPass::runImpl(int32x2_t *this@<X0>, int32x2_t **a2@<X1>, llvm::DominatorTree *a3@<X2>, llvm::AssumptionCache *a4@<X3>, uint64_t a5@<X8>)
{
  *this = **a2;
  this[1] = (int32x2_t)a3;
  this[2] = (int32x2_t)a4;
  v6 = a2[10];
  if (v6) {
    v7 = v6 - 3;
  }
  else {
    v7 = 0;
  }
  int32x2_t v9 = v7[5];
  int32x2_t v8 = v7[6];
  if (*(void *)&v8 != *(void *)&v9)
  {
    v10 = (llvm::DataLayout *)&a2[5][34];
    do
    {
      uint64_t v11 = *(void *)&v8 - 24;
      if (!*(void *)&v8) {
        uint64_t v11 = 0;
      }
      int v12 = *(unsigned __int8 *)(v11 + 16);
      if (v12 != 59) {
        uint64_t v11 = 0;
      }
      v72 = (llvm *)v11;
      if (*(void *)&v8 && v12 == 59)
      {
        v13 = *(llvm::Type **)(v11 + 64);
        sub_1CB83544C((uint64_t)v10, (uint64_t)v13);
        BOOL v15 = v14 == 1;
        llvm::DataLayout::getAlignment(v10, v13, 1);
        if (v15 && llvm::isAllocaPromotable(v72, v16))
        {
          v17 = (llvm **)this[72];
          unint64_t v18 = (unint64_t)this[73];
          if ((unint64_t)v17 >= v18)
          {
            v20 = (void *)this[71];
            uint64_t v21 = v17 - (llvm **)v20;
            unint64_t v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 61) {
              abort();
            }
            uint64_t v23 = v18 - (void)v20;
            if (v23 >> 2 > v22) {
              unint64_t v22 = v23 >> 2;
            }
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v24 = v22;
            }
            if (v24)
            {
              if (v24 >> 61) {
                sub_1CB833614();
              }
              v25 = (char *)operator new(8 * v24);
            }
            else
            {
              v25 = 0;
            }
            v26 = (llvm **)&v25[8 * v21];
            *v26 = v72;
            v19 = v26 + 1;
            if (v17 != v20)
            {
              do
              {
                v27 = *--v17;
                *--v26 = v27;
              }
              while (v17 != v20);
              v17 = (llvm **)this[71];
            }
            this[71] = (int32x2_t)v26;
            this[72] = (int32x2_t)v19;
            this[73] = (int32x2_t)&v25[8 * v24];
            if (v17) {
              operator delete(v17);
            }
          }
          else
          {
            *v17 = v72;
            v19 = v17 + 1;
          }
          this[72] = (int32x2_t)v19;
        }
        else
        {
          sub_1CCE93F38((uint64_t)&this[3], (uint64_t *)&v72);
        }
      }
      int32x2_t v8 = *(int32x2_t *)(*(void *)&v8 + 8);
    }
    while (*(void *)&v8 != *(void *)&v9);
  }
  int v28 = 0;
  v72 = (llvm *)v76;
  v73 = (llvm *)v76;
  uint64_t v74 = 4;
  int v75 = 0;
  uint64_t v29 = this[7].u32[0];
  do
  {
    if (v29)
    {
      do
      {
        v30 = *(llvm::AllocaInst **)(*(void *)&this[6] + 8 * v29 - 8);
        sub_1CCE996B8(this + 3);
        int v31 = llvm::SROAPass::runOnAlloca((llvm::SROAPass *)this, v30);
        int v32 = llvm::SROAPass::deleteDeadInstructions((unsigned int *)this, (llvm::SmallPtrSetImplBase *)&v72);
        if (HIDWORD(v74) != v75)
        {
          sub_1CCE9FCC8((uint64_t)&this[3], (uint64_t *)&v72);
          sub_1CCE9FCC8((uint64_t)&this[50], (uint64_t *)&v72);
          v33 = (llvm::Function *)this[71];
          v34 = (llvm::Function *)this[72];
          if (v33 != v34)
          {
            int v35 = v74 - 1;
            if (v73 == v72) {
              unsigned int v36 = HIDWORD(v74);
            }
            else {
              unsigned int v36 = v74;
            }
            v37 = (char *)v73 + 8 * v36;
            v38 = v73;
            while (1)
            {
              uint64_t v39 = *(void *)v33;
              if (v38 == v72)
              {
                if (HIDWORD(v74))
                {
                  uint64_t v40 = 0;
                  while (*(void *)((char *)v72 + v40) != v39)
                  {
                    v40 += 8;
                    if (8 * HIDWORD(v74) == v40)
                    {
                      unsigned int v41 = HIDWORD(v74);
                      goto LABEL_62;
                    }
                  }
                  a2 = (int32x2_t **)((char *)v72 + v40);
                  unsigned int v41 = HIDWORD(v74);
                  v38 = v72;
                }
                else
                {
                  unsigned int v41 = 0;
LABEL_62:
                  v38 = v72;
                  a2 = (int32x2_t **)((char *)v72 + 8 * HIDWORD(v74));
                }
              }
              else
              {
                unsigned int v42 = v35 & ((v39 >> 4) ^ (v39 >> 9));
                v43 = (char *)v73 + 8 * v42;
                uint64_t v44 = *(void *)v43;
                if (*(void *)v43 == -1)
                {
                  v45 = 0;
LABEL_64:
                  if (v45) {
                    v43 = v45;
                  }
                  uint64_t v49 = *(void *)v43;
                }
                else
                {
                  v45 = 0;
                  int v46 = 1;
                  while (v44 != v39)
                  {
                    if (v45) {
                      BOOL v47 = 0;
                    }
                    else {
                      BOOL v47 = v44 == -2;
                    }
                    if (v47) {
                      v45 = v43;
                    }
                    unsigned int v48 = v42 + v46++;
                    unsigned int v42 = v48 & v35;
                    v43 = (char *)v73 + 8 * (v48 & v35);
                    uint64_t v44 = *(void *)v43;
                    if (*(void *)v43 == -1) {
                      goto LABEL_64;
                    }
                  }
                  uint64_t v49 = *(void *)v33;
                }
                a2 = (int32x2_t **)(v49 == v39 ? v43 : v37);
                unsigned int v41 = HIDWORD(v74);
                v38 = v73;
              }
              if (v38 != v72) {
                unsigned int v41 = v74;
              }
              v50 = (llvm *)((char *)v38 + 8 * v41);
              v51 = (llvm::Function *)((char *)v33 + 8);
              if (a2 != (int32x2_t **)v50) {
                break;
              }
              v33 = (llvm::Function *)((char *)v33 + 8);
              if (v51 == v34) {
                goto LABEL_111;
              }
            }
            if (v51 != v34)
            {
              do
              {
                uint64_t v52 = *(void *)v51;
                v53 = v72;
                if (v73 == v72)
                {
                  unsigned int v54 = HIDWORD(v74);
                  v55 = (char *)v73 + 8 * HIDWORD(v74);
                  if (HIDWORD(v74))
                  {
                    uint64_t v56 = 0;
                    while (*(void *)((char *)v73 + v56) != v52)
                    {
                      v56 += 8;
                      if (8 * HIDWORD(v74) == v56) {
                        goto LABEL_96;
                      }
                    }
                    v55 = (char *)v73 + v56;
                  }
LABEL_96:
                  v53 = v73;
                }
                else
                {
                  unsigned int v57 = ((v52 >> 4) ^ (v52 >> 9)) & v35;
                  v55 = (char *)v73 + 8 * v57;
                  uint64_t v58 = *(void *)v55;
                  if (*(void *)v55 == -1)
                  {
                    v59 = 0;
LABEL_105:
                    if (v59) {
                      v55 = v59;
                    }
                    unsigned int v54 = HIDWORD(v74);
                    if (*(void *)v55 != v52) {
                      v55 = (char *)v73 + 8 * v74;
                    }
                  }
                  else
                  {
                    v59 = 0;
                    int v60 = 1;
                    while (v58 != v52)
                    {
                      if (v59) {
                        BOOL v61 = 0;
                      }
                      else {
                        BOOL v61 = v58 == -2;
                      }
                      if (v61) {
                        v59 = v55;
                      }
                      unsigned int v62 = v57 + v60++;
                      unsigned int v57 = v62 & v35;
                      v55 = (char *)v73 + 8 * (v62 & v35);
                      uint64_t v58 = *(void *)v55;
                      if (*(void *)v55 == -1) {
                        goto LABEL_105;
                      }
                    }
                    unsigned int v54 = HIDWORD(v74);
                  }
                }
                if (v73 == v53) {
                  unsigned int v63 = v54;
                }
                else {
                  unsigned int v63 = v74;
                }
                if (v55 == (char *)v73 + 8 * v63)
                {
                  *(void *)v33 = v52;
                  v33 = (llvm::Function *)((char *)v33 + 8);
                }
                v51 = (llvm::Function *)((char *)v51 + 8);
              }
              while (v51 != v34);
              v34 = (llvm::Function *)this[72];
            }
            if (v33 != v34)
            {
              a2 = (int32x2_t **)v34;
              this[72] = (int32x2_t)v33;
            }
          }
LABEL_111:
          if (v73 != v72)
          {
            if (v74 >= 0x21 && 4 * (HIDWORD(v74) - v75) < v74)
            {
              llvm::SmallPtrSetImplBase::shrink_and_clear((void **)&v72);
              goto LABEL_113;
            }
            memset(v73, 255, 8 * v74);
          }
          HIDWORD(v74) = 0;
          int v75 = 0;
        }
LABEL_113:
        v28 |= v32 | v31;
        uint64_t v29 = this[7].u32[0];
      }
      while (v29);
    }
    BOOL v64 = llvm::SROAPass::promoteAllocas((llvm::SROAPass *)this, (llvm::Function *)a2);
    MEMORY[0x1D25D9CD0](*(void *)&this[3], 8);
    uint64_t v65 = this[52].u32[0];
    this[5].i32[0] = v65;
    if (v65)
    {
      v66 = operator new(8 * v65, (std::align_val_t)8uLL);
      this[3] = (int32x2_t)v66;
      this[4] = this[51];
      memcpy(v66, *(const void **)&this[50], 8 * this[5].u32[0]);
    }
    else
    {
      this[3] = 0;
      this[4] = 0;
    }
    sub_1CBC5C404((uint64_t)&this[6], (uint64_t)&this[53]);
    __int32 v67 = this[51].i32[0];
    if (v67 || this[51].i32[1])
    {
      uint64_t v68 = this[52].u32[0];
      if (v68 > 4 * v67 && v68 >= 0x41)
      {
        sub_1CD42616C(&this[50]);
      }
      else
      {
        if (v68)
        {
          v69 = (void *)this[50];
          uint64_t v70 = 8 * v68;
          do
          {
            *v69++ = -4096;
            v70 -= 8;
          }
          while (v70);
        }
        this[51] = 0;
      }
    }
    v28 |= v64;
    this[54].i32[0] = 0;
    uint64_t v29 = this[7].u32[0];
  }
  while (v29);
  *(void *)a5 = a5 + 32;
  *(void *)(a5 + 8) = a5 + 32;
  *(_DWORD *)(a5 + 16) = 2;
  if (v28)
  {
    *(_DWORD *)(a5 + 20) = 0;
    *(_DWORD *)(a5 + 24) = 0;
    *(void *)(a5 + 48) = a5 + 80;
    *(void *)(a5 + 56) = a5 + 80;
    *(void *)(a5 + 64) = 2;
    *(_DWORD *)(a5 + 72) = 0;
    sub_1CBF541A4((llvm::SmallPtrSetImplBase *)a5, (uint64_t)&llvm::CFGAnalyses::SetKey);
  }
  else
  {
    *(void *)(a5 + 48) = a5 + 80;
    *(void *)(a5 + 56) = a5 + 80;
    *(void *)(a5 + 64) = 2;
    *(_DWORD *)(a5 + 72) = 0;
    *(void *)(a5 + 20) = 1;
    *(void *)(a5 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  }
  if (v73 != v72) {
    free(v73);
  }
}

uint64_t sub_1CCE9FCC8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = (int32x2_t *)result;
  uint64_t v3 = *(uint64_t **)(result + 24);
  uint64_t v4 = *(unsigned int *)(result + 32);
  if (!v4) {
    goto LABEL_12;
  }
  v6 = &v3[v4];
  uint64_t v7 = 8 * v4 - 8;
  int32x2_t v8 = *(uint64_t **)(result + 24);
  do
  {
    uint64_t v9 = *v8++;
    result = sub_1CCEA9FCC(a2, v2, v9);
    if (result) {
      break;
    }
    v7 -= 8;
    uint64_t v3 = v8;
  }
  while (v8 != v6);
  if (v8 == v6)
  {
LABEL_12:
    v6 = v3;
  }
  else
  {
    uint64_t v10 = 1;
    v6 = v3;
    do
    {
      result = sub_1CCEA9FCC(a2, v2, v3[v10]);
      if ((result & 1) == 0) {
        *v6++ = v3[v10];
      }
      ++v10;
      v7 -= 8;
    }
    while (v7);
  }
  int32x2_t v11 = v2[3];
  if (v6 != (uint64_t *)(*(void *)&v11 + 8 * v2[4].u32[0])) {
    v2[4].i32[0] = ((unint64_t)v6 - *(void *)&v11) >> 3;
  }
  return result;
}

void llvm::SROAPass::run()
{
}

void sub_1CCE9FE2C(uint64_t a1)
{
}

uint64_t sub_1CCE9FED4(uint64_t result)
{
  v1 = (char **)(result + 32);
  uint64_t v2 = *(unsigned int *)(result + 40);
  if (v2)
  {
    unint64_t v15 = *(void *)(result + 8);
    if (v15 >= *(void *)(result + 88))
    {
      LODWORD(v3) = 0;
      *(_DWORD *)(result + 40) = 0;
      *(void *)(result + 88) = 0;
    }
    else
    {
      v16 = *v1;
      v17 = &(*v1)[8 * v2];
      uint64_t v18 = 8 * v2 - 8;
      v19 = *v1;
      v20 = *v1;
      while (1)
      {
        uint64_t v21 = *(void *)v20;
        v20 += 8;
        if (*(void *)(v21 + 8) <= v15) {
          break;
        }
        v18 -= 8;
        v19 = v20;
        if (v20 == v17) {
          goto LABEL_32;
        }
      }
      if (v20 == v17)
      {
        v17 = v19;
      }
      else
      {
        uint64_t v24 = 8;
        v17 = v19;
        do
        {
          uint64_t v25 = *(void *)&v19[v24];
          if (*(void *)(v25 + 8) > v15)
          {
            *(void *)v17 = v25;
            v17 += 8;
          }
          v24 += 8;
          v18 -= 8;
        }
        while (v18);
        v16 = *v1;
      }
LABEL_32:
      unint64_t v3 = (unint64_t)(v17 - v16) >> 3;
      *(_DWORD *)(result + 40) = v3;
    }
  }
  else
  {
    LODWORD(v3) = 0;
  }
  uint64_t v4 = *(uint64_t **)(result + 16);
  v5 = *(uint64_t **)(result + 80);
  if (v4 != v5)
  {
    v6 = *(uint64_t **)(result + 24);
    if (v4 == v6)
    {
      uint64_t v10 = *(uint64_t **)(result + 16);
      if (!v3) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v7 = *(void *)(result + 16);
      do
      {
        if ((v4[2] & 4) != 0 && (unint64_t)v4[1] > *(void *)(result + 8))
        {
          if (v3 >= *(_DWORD *)(result + 44)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(result + 32) + 8 * v3) = v7;
          LODWORD(v3) = *(_DWORD *)(result + 40) + 1;
          *(_DWORD *)(result + 40) = v3;
          unint64_t v8 = v4[1];
          if (v8 <= *(void *)(result + 88)) {
            unint64_t v8 = *(void *)(result + 88);
          }
          *(void *)(result + 88) = v8;
        }
        v4 += 3;
        v7 += 24;
      }
      while (v4 != v6);
      uint64_t v4 = *(uint64_t **)(result + 24);
      *(void *)(result + 16) = v4;
      v5 = *(uint64_t **)(result + 80);
      if (v4 == v5)
      {
        uint64_t v9 = *(void *)(result + 88);
        *(void *)result = *(void *)(result + 8);
        *(void *)(result + 8) = v9;
        return result;
      }
      if (!v3)
      {
        uint64_t v10 = v4;
LABEL_18:
        unint64_t v11 = v4[1];
        *(void *)result = *v10;
        *(void *)(result + 8) = v11;
        int v12 = v4 + 3;
        *(void *)(result + 24) = v4 + 3;
        if ((v4[2] & 4) != 0)
        {
          while (v12 != v5 && *v12 < v11)
          {
            if ((v12[2] & 4) == 0)
            {
              *(void *)(result + 8) = *v12;
              return result;
            }
            if (v11 <= v12[1]) {
              unint64_t v11 = v12[1];
            }
            *(void *)(result + 8) = v11;
            v12 += 3;
            *(void *)(result + 24) = v12;
          }
        }
        else if (v12 != v5)
        {
          v13 = (unint64_t *)(v4 + 4);
          do
          {
            if (*(v13 - 1) >= v11) {
              break;
            }
            if ((v13[1] & 4) == 0)
            {
              if (v11 <= *v13) {
                unint64_t v11 = *v13;
              }
              *(void *)(result + 8) = v11;
            }
            int v14 = (uint64_t *)(v13 + 2);
            *(void *)(result + 24) = v13 + 2;
            v13 += 3;
          }
          while (v14 != v5);
        }
        return result;
      }
      uint64_t v22 = *v4;
      uint64_t v23 = *(void *)(result + 8);
      if (*v4 != v23 && (v4[2] & 4) == 0)
      {
        *(void *)result = v23;
        *(void *)(result + 8) = v22;
        return result;
      }
    }
    uint64_t v10 = (uint64_t *)(result + 8);
    goto LABEL_18;
  }
  return result;
}

char **sub_1CCEA0168(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v5 = 24 * v3;
    do
    {
      if (*(_DWORD *)&v2[v5 - 8] >= 0x41u)
      {
        uint64_t v6 = *(void *)&v2[v5 - 16];
        if (v6)
        {
          uint64_t v7 = v5;
          unint64_t v8 = v2;
          MEMORY[0x1D25D9CB0](v6, 0x1000C8000313F17);
          uint64_t v5 = v7;
          uint64_t v2 = v8;
        }
      }
      v5 -= 24;
    }
    while (v5);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CCEA0208(void *a1, void *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  if (*a1 > *a2) {
    return 1;
  }
  unint64_t v3 = a1[2];
  if (((v3 >> 2) & 1) != ((a2[2] >> 2) & 1))
  {
    if ((v3 & 4) != 0) {
      return (a2[2] & 4) == 0;
    }
    return 0xFFFFFFFFLL;
  }
  unint64_t v4 = a1[1];
  unint64_t v5 = a2[1];
  if (v4 > v5) {
    return 0xFFFFFFFFLL;
  }
  return v5 > v4;
}

char *sub_1CCEA0270(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  if (!a5) {
    return result;
  }
  while (a4 > a7 && a5 > a7)
  {
    if (!a4) {
      return result;
    }
    uint64_t v9 = 0;
    unint64_t v10 = *(void *)a2;
    uint64_t v11 = -a4;
    while (1)
    {
      unint64_t v12 = *(void *)&result[v9];
      if (v10 < v12) {
        break;
      }
      if (v10 <= v12)
      {
        unint64_t v13 = *((void *)a2 + 2);
        if (((v13 >> 2) & 1) == (result[v9 + 16] & 4) >> 2)
        {
          if (*((void *)a2 + 1) > *(void *)&result[v9 + 8]) {
            break;
          }
        }
        else if ((v13 & 4) == 0)
        {
          break;
        }
      }
      v9 += 24;
      if (__CFADD__(v11++, 1)) {
        return result;
      }
    }
    uint64_t v15 = -v11;
    v16 = &result[v9];
    if (-v11 >= a5)
    {
      if (v11 == -1)
      {
        v95 = &result[v9];
        uint64_t v112 = *((void *)v95 + 2);
        long long v107 = *(_OWORD *)v95;
        long long v96 = *(_OWORD *)a2;
        *((void *)v95 + 2) = *((void *)a2 + 2);
        *(_OWORD *)v95 = v96;
        *((void *)a2 + 2) = v112;
        *(_OWORD *)a2 = v107;
        return result;
      }
      if (v11 > 0) {
        uint64_t v15 = 1 - v11;
      }
      uint64_t v28 = v15 >> 1;
      v19 = &result[24 * (v15 >> 1) + v9];
      uint64_t v18 = 0;
      if (a3 == a2)
      {
        v37 = a3;
LABEL_52:
        a2 = v19;
        goto LABEL_68;
      }
      unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 3);
      unint64_t v30 = *(void *)v19;
      int v31 = &result[24 * v28 + v9];
      int v32 = a2;
      while (2)
      {
        unint64_t v33 = v29 >> 1;
        unint64_t v34 = v18 + (v29 >> 1);
        unint64_t v35 = *(void *)&a2[24 * v34];
        if (v35 >= v30)
        {
          if (v35 <= v30)
          {
            unint64_t v36 = *(void *)&v32[24 * v33 + 16];
            if (((v36 >> 2) & 1) == (v31[16] & 4) >> 2)
            {
              if (*(void *)&v32[24 * v33 + 8] > *((void *)v31 + 1)) {
                goto LABEL_36;
              }
            }
            else if ((v36 & 4) == 0)
            {
              goto LABEL_36;
            }
          }
        }
        else
        {
LABEL_36:
          uint64_t v18 = v34 + 1;
          unint64_t v33 = v29 + ~v33;
        }
        int v32 = &a2[24 * v18];
        unint64_t v29 = v33;
        if (!v33) {
          goto LABEL_43;
        }
        continue;
      }
    }
    if (a5 >= 0) {
      uint64_t v17 = a5;
    }
    else {
      uint64_t v17 = a5 + 1;
    }
    uint64_t v18 = v17 >> 1;
    v19 = a2;
    if (v16 != a2)
    {
      unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((a2 - result - v9) >> 3);
      uint64_t v21 = &a2[24 * v18];
      uint64_t v22 = v21 + 16;
      unint64_t v25 = *(void *)v21;
      uint64_t v23 = v21 + 8;
      unint64_t v24 = v25;
      v19 = &result[v9];
      do
      {
        unint64_t v26 = v20 >> 1;
        v27 = &v19[24 * (v20 >> 1)];
        if (v24 >= *(void *)v27)
        {
          if (v24 > *(void *)v27) {
            goto LABEL_27;
          }
          if (((*v22 >> 2) & 1) != (v19[24 * v26 + 16] & 4) >> 2)
          {
            if ((*v22 & 4) == 0) {
              goto LABEL_28;
            }
LABEL_27:
            v19 = v27 + 24;
            unint64_t v26 = v20 + ~v26;
            goto LABEL_28;
          }
          if (*v23 <= *(void *)&v19[24 * v26 + 8]) {
            goto LABEL_27;
          }
        }
LABEL_28:
        unint64_t v20 = v26;
      }
      while (v26);
    }
    uint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((v19 - result - v9) >> 3);
LABEL_43:
    v37 = &a2[24 * v18];
    a5 -= v18;
    if (v19 != a2)
    {
      if (v18)
      {
        if (v19 + 24 == a2)
        {
          uint64_t v109 = *((void *)v19 + 2);
          long long v104 = *(_OWORD *)v19;
          v100 = a3;
          v102 = v16;
          v43 = a2;
          uint64_t v44 = a6;
          uint64_t v45 = a7;
          uint64_t v46 = a5;
          uint64_t v47 = v28;
          memmove(v19, v43, 24 * v18);
          uint64_t v28 = v47;
          a5 = v46;
          a3 = v100;
          v16 = v102;
          a7 = v45;
          a6 = v44;
          a2 = &v19[24 * v18];
          *(_OWORD *)a2 = v104;
          *((void *)a2 + 2) = v109;
        }
        else
        {
          uint64_t v38 = a5;
          uint64_t v39 = a3;
          if (v18 == 1)
          {
            a2 = v19 + 24;
            uint64_t v108 = *((void *)v37 - 1);
            long long v103 = *(_OWORD *)(v37 - 24);
            if (v37 - 24 != v19)
            {
              v101 = v16;
              uint64_t v40 = a6;
              uint64_t v41 = a7;
              uint64_t v42 = v28;
              memmove(v19 + 24, v19, v37 - 24 - v19);
              uint64_t v28 = v42;
              v16 = v101;
              a7 = v41;
              a6 = v40;
            }
            *((void *)v19 + 2) = v108;
            *(_OWORD *)v19 = v103;
            uint64_t v18 = 1;
            a3 = v39;
            a5 = v38;
          }
          else
          {
            unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v19) >> 3);
            uint64_t v49 = v18;
            uint64_t v50 = v48;
            if (v48 == v18)
            {
              uint64_t v51 = 0;
              do
              {
                uint64_t v52 = &a2[v51];
                v53 = &v19[v51];
                uint64_t v110 = *(void *)&v19[v51 + 16];
                long long v105 = *(_OWORD *)&v19[v51];
                long long v54 = *(_OWORD *)&a2[v51];
                *((void *)v53 + 2) = *(void *)&a2[v51 + 16];
                *(_OWORD *)v53 = v54;
                *((void *)v52 + 2) = v110;
                *(_OWORD *)uint64_t v52 = v105;
                if (&v19[v51 + 24] == a2) {
                  break;
                }
                BOOL v55 = 24 * v18 - 24 == v51;
                v51 += 24;
              }
              while (!v55);
            }
            else
            {
              do
              {
                uint64_t v56 = v50;
                uint64_t v50 = v49;
                uint64_t v49 = v56 % v49;
              }
              while (v49);
              unsigned int v57 = &v19[24 * v50];
              do
              {
                long long v58 = *(_OWORD *)(v57 - 24);
                uint64_t v59 = *((void *)v57 - 1);
                v57 -= 24;
                uint64_t v111 = v59;
                long long v106 = v58;
                int v60 = &v57[8 * ((a2 - v19) >> 3)];
                BOOL v61 = v57;
                do
                {
                  unsigned int v62 = v61;
                  BOOL v61 = v60;
                  long long v63 = *(_OWORD *)v60;
                  *((void *)v62 + 2) = *((void *)v60 + 2);
                  *(_OWORD *)unsigned int v62 = v63;
                  unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * ((v37 - v60) >> 3);
                  BOOL v65 = __OFSUB__(v48, v64);
                  uint64_t v67 = v48 - v64;
                  char v66 = (v67 < 0) ^ v65;
                  int v60 = &v19[24 * v67];
                  if (v66) {
                    int v60 = &v61[8 * ((a2 - v19) >> 3)];
                  }
                }
                while (v60 != v57);
                *((void *)v61 + 2) = v111;
                *(_OWORD *)BOOL v61 = v106;
              }
              while (v57 != v19);
              a2 = &v19[24 * v18];
            }
          }
        }
        goto LABEL_68;
      }
      goto LABEL_52;
    }
    v19 = a2;
    a2 += 24 * v18;
LABEL_68:
    a4 = -(v28 + v11);
    if (v18 + v28 >= a5 - v28 - v11)
    {
      uint64_t v74 = v16;
      uint64_t v75 = v28;
      uint64_t v76 = -(v28 + v11);
      v72 = a6;
      uint64_t v73 = a7;
      sub_1CCEA0270(a2, v37, a3, v76);
      result = v74;
      v37 = v19;
      a5 = v18;
      a4 = v75;
      a3 = a2;
    }
    else
    {
      uint64_t v68 = v16;
      v69 = v19;
      uint64_t v70 = a3;
      uint64_t v71 = a5;
      v72 = a6;
      uint64_t v73 = a7;
      sub_1CCEA0270(v68, v69, a2, v28);
      a5 = v71;
      a3 = v70;
      result = a2;
    }
    a2 = v37;
    a6 = v72;
    a7 = v73;
    if (!a5) {
      return result;
    }
  }
  if (a4 > a5)
  {
    if (a2 == a3) {
      return result;
    }
    unint64_t v77 = 0;
    do
    {
      v78 = &a6[v77 / 8];
      long long v79 = *(_OWORD *)&a2[v77];
      v78[2] = *(void *)&a2[v77 + 16];
      *(_OWORD *)v78 = v79;
      v77 += 24;
    }
    while (&a2[v77] != a3);
    if (!v77) {
      return result;
    }
    v80 = &a6[v77 / 8];
    for (i = a3 - 24; ; i -= 24)
    {
      if (a2 == result)
      {
        if (v80 != a6)
        {
          uint64_t v97 = 0;
          do
          {
            v98 = &i[v97 * 8];
            long long v99 = *(_OWORD *)&v80[v97 - 3];
            *((void *)v98 + 2) = v80[v97 - 1];
            *(_OWORD *)v98 = v99;
            v97 -= 3;
          }
          while (&v80[v97] != a6);
        }
        return result;
      }
      v82 = a2 - 24;
      unint64_t v83 = *((void *)a2 - 3);
      unint64_t v84 = *(v80 - 3);
      if (v84 >= v83)
      {
        if (v84 > v83) {
          goto LABEL_87;
        }
        unint64_t v86 = *(v80 - 1);
        if (((v86 >> 2) & 1) != (*(a2 - 8) & 4) >> 2)
        {
          v85 = a2 - 24;
          if ((v86 & 4) == 0) {
            goto LABEL_88;
          }
LABEL_87:
          v82 = (char *)(v80 - 3);
          v85 = a2;
          v80 -= 3;
          goto LABEL_88;
        }
        v85 = a2 - 24;
        if (*(v80 - 2) <= *((void *)a2 - 2)) {
          goto LABEL_87;
        }
      }
      else
      {
        v85 = a2 - 24;
      }
LABEL_88:
      long long v87 = *(_OWORD *)v82;
      *((void *)i + 2) = *((void *)v82 + 2);
      *(_OWORD *)i = v87;
      a2 = v85;
      if (v80 == a6) {
        return result;
      }
    }
  }
  if (result == a2) {
    return result;
  }
  unint64_t v88 = 0;
  do
  {
    v89 = &a6[v88 / 8];
    long long v90 = *(_OWORD *)&result[v88];
    v89[2] = *(void *)&result[v88 + 16];
    *(_OWORD *)v89 = v90;
    v88 += 24;
  }
  while (&result[v88] != a2);
  if (!v88) {
    return result;
  }
  v91 = a6;
  while (a2 != a3)
  {
    if (*(void *)a2 >= *v91)
    {
      if (*(void *)a2 > *v91) {
        goto LABEL_103;
      }
      unint64_t v93 = *((void *)a2 + 2);
      if (((v93 >> 2) & 1) == (v91[2] & 4) >> 2)
      {
        if (*((void *)a2 + 1) <= v91[1])
        {
LABEL_103:
          long long v94 = *(_OWORD *)v91;
          *((void *)result + 2) = v91[2];
          *(_OWORD *)result = v94;
          v91 += 3;
          goto LABEL_104;
        }
      }
      else if ((v93 & 4) != 0)
      {
        goto LABEL_103;
      }
    }
    long long v92 = *(_OWORD *)a2;
    *((void *)result + 2) = *((void *)a2 + 2);
    *(_OWORD *)result = v92;
    a2 += 24;
LABEL_104:
    result += 24;
    if (&a6[v88 / 8] == v91) {
      return result;
    }
  }

  return (char *)memmove(result, v91, (char *)a6 - (char *)v91 + v88);
}

uint64_t sub_1CCEA09E0(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_1CCEA0A14(llvm::DataLayout *a1, llvm::Type *a2)
{
  do
  {
    uint64_t v4 = (uint64_t)a2;
    if ((*((_DWORD *)a2 + 2) & 0xFE) == 0x12) {
      break;
    }
    unsigned int v5 = *((_DWORD *)a2 + 2);
    BOOL v6 = v5 > 0x15;
    int v7 = (1 << v5) & 0x20AC7F;
    if (!v6 && v7 != 0) {
      break;
    }
    uint64_t v9 = sub_1CB83544C((uint64_t)a1, (uint64_t)a2);
    char Alignment = llvm::DataLayout::getAlignment(a1, (llvm::Type *)v4, 1);
    unint64_t v11 = sub_1CB83544C((uint64_t)a1, v4);
    int v12 = *(unsigned __int8 *)(v4 + 8);
    if (v12 == 16)
    {
      StructLayout = llvm::DataLayout::getStructLayout(a1, (llvm::StructType *)v4);
      int v15 = *((_DWORD *)StructLayout + 3);
      unint64_t v16 = v15 & 0x7FFFFFFF;
      if ((v15 & 0x7FFFFFFF) != 0)
      {
        uint64_t v17 = (char *)StructLayout + 16;
        do
        {
          unint64_t v18 = v16 >> 1;
          v19 = &v17[8 * (v16 >> 1)];
          uint64_t v21 = *(void *)v19;
          unint64_t v20 = v19 + 8;
          v16 += ~(v16 >> 1);
          if (v21) {
            unint64_t v16 = v18;
          }
          else {
            uint64_t v17 = v20;
          }
        }
        while (v16);
      }
      else
      {
        uint64_t v17 = (char *)StructLayout + 16;
      }
      unint64_t v13 = (uint64_t *)(*(void *)(v4 + 16) + ((v17 - ((char *)StructLayout + 16) - 8) & 0x7FFFFFFF8));
    }
    else
    {
      if (v12 != 17) {
        return v4;
      }
      unint64_t v13 = (uint64_t *)(v4 + 24);
    }
    unint64_t v22 = ((1 << Alignment) + ((unint64_t)(v9 + 7) >> 3) - 1) & -(1 << Alignment);
    a2 = (llvm::Type *)*v13;
    unint64_t v23 = (unint64_t)(sub_1CB83544C((uint64_t)a1, *v13) + 7) >> 3;
    char v24 = llvm::DataLayout::getAlignment(a1, a2, 1);
    if (v22 > (((1 << v24) + v23 - 1) & -(1 << v24))) {
      break;
    }
  }
  while (v11 <= sub_1CB83544C((uint64_t)a1, (uint64_t)a2));
  return v4;
}

uint64_t sub_1CCEA0BBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == a3) {
    return 1;
  }
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  if (*(unsigned char *)(a2 + 8) == 13 && *(unsigned char *)(a3 + 8) == 13) {
    return 0;
  }
  uint64_t v6 = sub_1CB83544C(a1, a3);
  if (v6 != sub_1CB83544C(a1, v4)) {
    return 0;
  }
  unsigned int v7 = *(_DWORD *)(v3 + 8);
  if ((v7 & 0xFE) == 0x12
    || (uint64_t result = 0, *(_DWORD *)(v3 + 8) <= 0x15u) && ((1 << v7) & 0x20AC7F) != 0)
  {
    if ((*(_DWORD *)(v4 + 8) & 0xFE) == 0x12)
    {
      uint64_t v4 = **(void **)(v4 + 16);
      goto LABEL_13;
    }
    uint64_t result = 0;
    unsigned int v9 = *(_DWORD *)(v4 + 8);
    if (v9 <= 0x15 && ((1 << v9) & 0x20AC7F) != 0)
    {
LABEL_13:
      if ((v7 & 0xFE) == 0x12)
      {
        unint64_t v10 = *(uint64_t **)(v3 + 16);
        uint64_t v3 = *v10;
        unsigned int v7 = *(_DWORD *)(*v10 + 8);
      }
      unsigned int v11 = *(_DWORD *)(v4 + 8);
      if (v7 == 15)
      {
        int v12 = *(_DWORD *)(v4 + 8);
        if (v12 == 15)
        {
          if ((*(_DWORD *)(v4 + 8) & 0xFE) == 0x12) {
            unsigned int v11 = *(_DWORD *)(**(void **)(v4 + 16) + 8);
          }
          unsigned int v13 = v11 >> 8;
          if ((v7 & 0xFE) == 0x12) {
            unsigned int v7 = *(_DWORD *)(**(void **)(v3 + 16) + 8);
          }
          if (v13 == v7 >> 8) {
            return 1;
          }
          int v15 = *(__int32 **)(a1 + 384);
          size_t v16 = *(unsigned int *)(a1 + 392);
          uint64_t v17 = wmemchr(v15, v11 >> 8, v16);
          if (v17) {
            unint64_t v18 = v17;
          }
          else {
            unint64_t v18 = &v15[v16];
          }
          if (v16 == v18 - v15)
          {
            unsigned int v19 = v7 >> 8;
            unint64_t v20 = *(__int32 **)(a1 + 384);
            size_t v21 = *(unsigned int *)(a1 + 392);
            unint64_t v22 = wmemchr(v20, v7 >> 8, v21);
            unint64_t v23 = v22 ? v22 : &v20[v21];
            if (v21 == v23 - v20)
            {
              uint64_t v24 = *(void *)(a1 + 232);
              if (v11 < 0x100) {
                goto LABEL_48;
              }
              uint64_t v25 = *(unsigned int *)(a1 + 240);
              uint64_t v26 = *(void *)(a1 + 232);
              if (v25)
              {
                uint64_t v26 = *(void *)(a1 + 232);
                unint64_t v27 = *(unsigned int *)(a1 + 240);
                do
                {
                  unint64_t v28 = v27 >> 1;
                  uint64_t v29 = v26 + 16 * (v27 >> 1);
                  unsigned int v30 = *(_DWORD *)(v29 + 8);
                  uint64_t v31 = v29 + 16;
                  v27 += ~(v27 >> 1);
                  if (v30 < v13) {
                    uint64_t v26 = v31;
                  }
                  else {
                    unint64_t v27 = v28;
                  }
                }
                while (v27);
              }
              if (v26 == v24 + 16 * v25 || *(_DWORD *)(v26 + 8) != v13) {
LABEL_48:
              }
                uint64_t v26 = *(void *)(a1 + 232);
              unint64_t v32 = ((unint64_t)*(unsigned int *)(v26 + 4) + 7) >> 3;
              if (v7 < 0x100) {
                goto LABEL_58;
              }
              uint64_t v33 = *(unsigned int *)(a1 + 240);
              uint64_t v34 = *(void *)(a1 + 232);
              if (v33)
              {
                uint64_t v34 = *(void *)(a1 + 232);
                unint64_t v35 = *(unsigned int *)(a1 + 240);
                do
                {
                  unint64_t v36 = v35 >> 1;
                  uint64_t v37 = v34 + 16 * (v35 >> 1);
                  unsigned int v38 = *(_DWORD *)(v37 + 8);
                  uint64_t v39 = v37 + 16;
                  v35 += ~(v35 >> 1);
                  if (v38 < v19) {
                    uint64_t v34 = v39;
                  }
                  else {
                    unint64_t v35 = v36;
                  }
                }
                while (v35);
              }
              if (v34 == v24 + 16 * v33 || *(_DWORD *)(v34 + 8) != v19) {
LABEL_58:
              }
                uint64_t v34 = *(void *)(a1 + 232);
              return v32 == (((unint64_t)*(unsigned int *)(v34 + 4) + 7) >> 3);
            }
          }
          return 0;
        }
      }
      else
      {
        if (*(_DWORD *)(v4 + 8) == 21) {
          return 0;
        }
        if (*(_DWORD *)(v4 + 8) != 15) {
          return v7 != 21;
        }
        int v12 = *(_DWORD *)(v4 + 8);
      }
      if (v12 == 13) {
        return !sub_1CBFB72C8(a1, v3);
      }
      if (!sub_1CBFB72C8(a1, v4)) {
        return *(unsigned char *)(v3 + 8) == 13;
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1CCEA0EEC(unint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  uint64_t v10 = sub_1CB83544C(a4, a3);
  unint64_t v11 = a1[1] - a2;
  if (v11 > (unint64_t)(v10 + 7) >> 3) {
    return 0;
  }
  unint64_t v13 = (unint64_t)(v10 + 7) >> 3;
  unint64_t v14 = *a1;
  unint64_t v15 = a1[2] & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = *(void *)(v15 + 24);
  int v17 = *(unsigned __int8 *)(v16 + 16);
  if (v16 && v17 == 60)
  {
    if (*(_WORD *)(v16 + 18)) {
      return 0;
    }
    if (v13 < (unint64_t)(sub_1CB83544C(a4, *(void *)v16) + 7) >> 3 || *a1 < a2) {
      return 0;
    }
    uint64_t v19 = *(void *)v16;
    unsigned int v20 = *(_DWORD *)(*(void *)v16 + 8);
    if (v11 == v13 && (*(_DWORD *)(*(void *)v16 + 8) & 0xFE) != 0x12 && v14 == a2)
    {
      *a5 = 1;
      unsigned int v20 = *(_DWORD *)(v19 + 8);
    }
    if (v20 == 13)
    {
      unint64_t v22 = v20 >> 8;
      uint64_t v23 = a4;
      uint64_t v24 = v19;
      return ((sub_1CB83544C(v23, v24) + 7) & 0xFFFFFFFFFFFFFFF8) <= v22;
    }
    uint64_t result = 0;
    if (v14 == a2 && v11 == v13)
    {
      uint64_t result = sub_1CCEA0BBC(a4, a3, v19);
      if (result) {
        return 1;
      }
    }
  }
  else if (v16 && v17 == 61)
  {
    if (*(_WORD *)(v16 + 18)) {
      return 0;
    }
    uint64_t v25 = **(void **)(v16 - 64);
    if (v13 < (unint64_t)(sub_1CB83544C(a4, v25) + 7) >> 3 || *a1 < a2) {
      return 0;
    }
    unsigned int v27 = *(_DWORD *)(v25 + 8);
    if (v11 == v13 && (*(_DWORD *)(v25 + 8) & 0xFE) != 0x12 && v14 == a2)
    {
      *a5 = 1;
      unsigned int v27 = *(_DWORD *)(v25 + 8);
    }
    if (v27 == 13)
    {
      unint64_t v22 = v27 >> 8;
      uint64_t v23 = a4;
      uint64_t v24 = v25;
      return ((sub_1CB83544C(v23, v24) + 7) & 0xFFFFFFFFFFFFFFF8) <= v22;
    }
    uint64_t result = 0;
    if (v14 == a2 && v11 == v13) {
      return (sub_1CCEA0BBC(a4, v25, a3) & 1) != 0;
    }
  }
  else
  {
    if (sub_1CBFB3AB0(*(void *)(v15 + 24)))
    {
      uint64_t v29 = v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF);
      uint64_t v30 = *(void *)(v29 + 96);
      uint64_t v31 = *(unsigned int *)(v30 + 32);
      if (v31 > 0x40)
      {
        int v34 = 0;
        int64_t v35 = (unint64_t)(v31 + 63) >> 6;
        do
        {
          if (v35-- < 1) {
            break;
          }
          unint64_t v37 = *(void *)(*(void *)(v30 + 24) + 8 * v35);
          v34 += __clz(v37);
        }
        while (!v37);
        uint64_t result = 0;
        int v38 = v31 | 0xFFFFFFC0;
        if ((v31 & 0x3F) == 0) {
          int v38 = 0;
        }
        if (v34 + v38 != v31) {
          return result;
        }
      }
      else if (*(void *)(v30 + 24))
      {
        return 0;
      }
      return *(unsigned __int8 *)(*(void *)(v29 + 64) + 16) <= 0x14u && (a1[2] & 4) != 0;
    }
    uint64_t v32 = *(void *)(v15 + 24);
    if (*(unsigned char *)(v32 + 16) != 84) {
      return 0;
    }
    uint64_t v33 = *(void *)(v32 - 32);
    if (!v33
      || *(unsigned char *)(v33 + 16)
      || *(void *)(v33 + 24) != *(void *)(v32 + 72)
      || (*(unsigned char *)(v33 + 33) & 0x20) == 0)
    {
      return 0;
    }
    if (llvm::Instruction::isLifetimeStartOrEnd(*(llvm::Instruction **)(v15 + 24))) {
      return 1;
    }
    if (sub_1CBF698E4(v32)) {
      return 1;
    }
    uint64_t result = sub_1CC27D470(v32);
    if (result) {
      return 1;
    }
  }
  return result;
}

uint64_t *sub_1CCEA11D4(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  unsigned int v9 = result;
  while (2)
  {
    uint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unsigned int v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          uint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v39 = *(a2 - 1);
                uint64_t v40 = *v10;
                if (*(_DWORD *)(v39 + 32) < *(_DWORD *)(*v10 + 32))
                {
                  uint64_t *v10 = v39;
                  *(a2 - 1) = v40;
                }
                break;
              case 3:
                uint64_t result = sub_1CCEA1900(v10, v10 + 1, a2 - 1);
                break;
              case 4:
                uint64_t result = sub_1CCEA1B94(v10, v10 + 1, v10 + 2, a2 - 1);
                break;
              case 5:
                uint64_t v41 = v10 + 1;
                uint64_t v42 = v10 + 2;
                v43 = v10 + 3;
                uint64_t result = sub_1CCEA1B94(v10, v10 + 1, v10 + 2, v10 + 3);
                uint64_t v44 = *(a2 - 1);
                uint64_t v45 = v10[3];
                if (*(_DWORD *)(v44 + 32) < *(_DWORD *)(v45 + 32))
                {
                  uint64_t *v43 = v44;
                  *(a2 - 1) = v45;
                  uint64_t v46 = *v43;
                  uint64_t v47 = *v42;
                  unsigned int v48 = *(_DWORD *)(*v43 + 32);
                  if (v48 < *(_DWORD *)(*v42 + 32))
                  {
                    *uint64_t v42 = v46;
                    uint64_t *v43 = v47;
                    uint64_t v49 = *v41;
                    if (v48 < *(_DWORD *)(*v41 + 32))
                    {
                      v10[1] = v46;
                      v10[2] = v49;
                      uint64_t v50 = *v10;
                      if (v48 < *(_DWORD *)(*v10 + 32))
                      {
                        uint64_t *v10 = v46;
                        v10[1] = v50;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            uint64_t v51 = v10 + 1;
            BOOL v53 = v10 == a2 || v51 == a2;
            if (a4)
            {
              if (!v53)
              {
                uint64_t v54 = 8;
                BOOL v55 = v10;
                do
                {
                  uint64_t v57 = *v55;
                  uint64_t v56 = v55[1];
                  BOOL v55 = v51;
                  unsigned int v58 = *(_DWORD *)(v56 + 32);
                  if (v58 < *(_DWORD *)(v57 + 32))
                  {
                    uint64_t v59 = v54;
                    do
                    {
                      *(uint64_t *)((char *)v10 + v59) = v57;
                      uint64_t v60 = v59 - 8;
                      if (v59 == 8)
                      {
                        BOOL v61 = v10;
                        goto LABEL_85;
                      }
                      uint64_t v57 = *(uint64_t *)((char *)v10 + v59 - 16);
                      v59 -= 8;
                    }
                    while (v58 < *(_DWORD *)(v57 + 32));
                    BOOL v61 = (uint64_t *)((char *)v10 + v60);
LABEL_85:
                    *BOOL v61 = v56;
                  }
                  uint64_t v51 = v55 + 1;
                  v54 += 8;
                }
                while (v55 + 1 != a2);
              }
            }
            else if (!v53)
            {
              do
              {
                uint64_t v91 = *v9;
                uint64_t v90 = v9[1];
                unsigned int v9 = v51;
                unsigned int v92 = *(_DWORD *)(v90 + 32);
                if (v92 < *(_DWORD *)(v91 + 32))
                {
                  do
                  {
                    uint64_t *v51 = v91;
                    uint64_t v91 = *(v51 - 2);
                    --v51;
                  }
                  while (v92 < *(_DWORD *)(v91 + 32));
                  uint64_t *v51 = v90;
                }
                uint64_t v51 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v62 = (unint64_t)(v12 - 2) >> 1;
              int64_t v63 = v62;
              do
              {
                int64_t v64 = v63;
                if (v62 >= v63)
                {
                  uint64_t v65 = (2 * v63) | 1;
                  char v66 = &v10[v65];
                  uint64_t v67 = *v66;
                  if (2 * v64 + 2 < v12 && *(_DWORD *)(v67 + 32) < *(_DWORD *)(v66[1] + 32))
                  {
                    uint64_t v67 = v66[1];
                    ++v66;
                    uint64_t v65 = 2 * v64 + 2;
                  }
                  uint64_t result = &v10[v64];
                  uint64_t v68 = *result;
                  unsigned int v69 = *(_DWORD *)(*result + 32);
                  if (*(_DWORD *)(v67 + 32) >= v69)
                  {
                    do
                    {
                      uint64_t v70 = v66;
                      *uint64_t result = v67;
                      if (v62 < v65) {
                        break;
                      }
                      uint64_t v71 = (2 * v65) | 1;
                      char v66 = &v10[v71];
                      uint64_t v72 = 2 * v65 + 2;
                      uint64_t v67 = *v66;
                      if (v72 < v12 && *(_DWORD *)(v67 + 32) < *(_DWORD *)(v66[1] + 32))
                      {
                        uint64_t v67 = v66[1];
                        ++v66;
                        uint64_t v71 = v72;
                      }
                      uint64_t result = v70;
                      uint64_t v65 = v71;
                    }
                    while (*(_DWORD *)(v67 + 32) >= v69);
                    *uint64_t v70 = v68;
                  }
                }
                int64_t v63 = v64 - 1;
              }
              while (v64);
              do
              {
                uint64_t v73 = 0;
                uint64_t v74 = *v10;
                uint64_t v75 = v10;
                do
                {
                  uint64_t v76 = &v75[v73];
                  uint64_t v79 = v76[1];
                  unint64_t v77 = v76 + 1;
                  uint64_t v78 = v79;
                  uint64_t v80 = (2 * v73) | 1;
                  uint64_t v81 = 2 * v73 + 2;
                  if (v81 < v12)
                  {
                    uint64_t result = (uint64_t *)*(unsigned int *)(v78 + 32);
                    if (result < *(_DWORD *)(v77[1] + 32))
                    {
                      uint64_t v78 = v77[1];
                      ++v77;
                      uint64_t v80 = v81;
                    }
                  }
                  *uint64_t v75 = v78;
                  uint64_t v75 = v77;
                  uint64_t v73 = v80;
                }
                while (v80 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                if (v77 == --a2)
                {
                  *unint64_t v77 = v74;
                }
                else
                {
                  *unint64_t v77 = *a2;
                  *a2 = v74;
                  uint64_t v82 = (char *)v77 - (char *)v10 + 8;
                  if (v82 >= 9)
                  {
                    unint64_t v83 = (((unint64_t)v82 >> 3) - 2) >> 1;
                    unint64_t v84 = &v10[v83];
                    uint64_t v85 = *v84;
                    uint64_t v86 = *v77;
                    unsigned int v87 = *(_DWORD *)(*v77 + 32);
                    if (*(_DWORD *)(*v84 + 32) < v87)
                    {
                      do
                      {
                        unint64_t v88 = v84;
                        *unint64_t v77 = v85;
                        if (!v83) {
                          break;
                        }
                        unint64_t v83 = (v83 - 1) >> 1;
                        unint64_t v84 = &v10[v83];
                        uint64_t v85 = *v84;
                        unint64_t v77 = v88;
                      }
                      while (*(_DWORD *)(*v84 + 32) < v87);
                      *unint64_t v88 = v86;
                    }
                  }
                }
              }
              while (v12-- > 2);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          unint64_t v14 = &v10[(unint64_t)v12 >> 1];
          if ((unint64_t)v11 >= 0x401)
          {
            sub_1CCEA1900(v9, &v9[(unint64_t)v12 >> 1], a2 - 1);
            sub_1CCEA1900(v9 + 1, v14 - 1, a2 - 2);
            sub_1CCEA1900(v9 + 2, &v9[v13 + 1], a2 - 3);
            uint64_t result = sub_1CCEA1900(v14 - 1, v14, &v9[v13 + 1]);
            uint64_t v15 = *v9;
            *unsigned int v9 = *v14;
            *unint64_t v14 = v15;
          }
          else
          {
            uint64_t result = sub_1CCEA1900(&v9[(unint64_t)v12 >> 1], v9, a2 - 1);
          }
          --a3;
          uint64_t v16 = *v9;
          if (a4) {
            break;
          }
          unsigned int v17 = *(_DWORD *)(v16 + 32);
          if (*(_DWORD *)(*(v9 - 1) + 32) < v17) {
            goto LABEL_13;
          }
          if (v17 >= *(_DWORD *)(*(a2 - 1) + 32))
          {
            uint64_t v31 = v9 + 1;
            do
            {
              uint64_t v10 = v31;
              if (v31 >= a2) {
                break;
              }
              ++v31;
            }
            while (v17 >= *(_DWORD *)(*v10 + 32));
          }
          else
          {
            uint64_t v10 = v9;
            do
            {
              uint64_t v30 = v10[1];
              ++v10;
            }
            while (v17 >= *(_DWORD *)(v30 + 32));
          }
          uint64_t v32 = a2;
          if (v10 < a2)
          {
            uint64_t v32 = a2;
            do
              uint64_t v33 = *--v32;
            while (v17 < *(_DWORD *)(v33 + 32));
          }
          if (v10 < v32)
          {
            uint64_t v34 = *v10;
            uint64_t v35 = *v32;
            do
            {
              uint64_t *v10 = v35;
              *uint64_t v32 = v34;
              do
              {
                uint64_t v36 = v10[1];
                ++v10;
                uint64_t v34 = v36;
              }
              while (v17 >= *(_DWORD *)(v36 + 32));
              do
              {
                uint64_t v37 = *--v32;
                uint64_t v35 = v37;
              }
              while (v17 < *(_DWORD *)(v37 + 32));
            }
            while (v10 < v32);
          }
          int v38 = v10 - 1;
          BOOL v4 = v10 - 1 >= v9;
          BOOL v5 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            *unsigned int v9 = *v38;
          }
          a4 = 0;
          uint64_t *v38 = v16;
        }
        unsigned int v17 = *(_DWORD *)(v16 + 32);
LABEL_13:
        uint64_t v18 = 0;
        do
          uint64_t v19 = v9[++v18];
        while (*(_DWORD *)(v19 + 32) < v17);
        unsigned int v20 = &v9[v18];
        size_t v21 = a2;
        if (v18 == 1)
        {
          size_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            uint64_t v23 = *--v21;
          }
          while (*(_DWORD *)(v23 + 32) >= v17);
        }
        else
        {
          do
            uint64_t v22 = *--v21;
          while (*(_DWORD *)(v22 + 32) >= v17);
        }
        if (v20 >= v21)
        {
          uint64_t v10 = &v9[v18];
        }
        else
        {
          uint64_t v24 = *v21;
          uint64_t v10 = &v9[v18];
          uint64_t v25 = v21;
          do
          {
            uint64_t *v10 = v24;
            uint64_t *v25 = v19;
            do
            {
              uint64_t v26 = v10[1];
              ++v10;
              uint64_t v19 = v26;
            }
            while (*(_DWORD *)(v26 + 32) < v17);
            do
            {
              uint64_t v27 = *--v25;
              uint64_t v24 = v27;
            }
            while (*(_DWORD *)(v27 + 32) >= v17);
          }
          while (v10 < v25);
        }
        unint64_t v28 = v10 - 1;
        if (v10 - 1 != v9) {
          *unsigned int v9 = *v28;
        }
        *unint64_t v28 = v16;
        if (v20 >= v21) {
          break;
        }
LABEL_34:
        uint64_t result = (uint64_t *)sub_1CCEA11D4(v9, v10 - 1, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v29 = sub_1CCEA1988(v9, v10 - 1);
      uint64_t result = (uint64_t *)sub_1CCEA1988(v10, a2);
      if (result) {
        break;
      }
      if (!v29) {
        goto LABEL_34;
      }
    }
    a2 = v10 - 1;
    if (!v29) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_1CCEA1900(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *result;
  unsigned int v5 = *(_DWORD *)(*a2 + 32);
  unsigned int v6 = *(_DWORD *)(*result + 32);
  uint64_t v7 = *a3;
  unsigned int v8 = *(_DWORD *)(*a3 + 32);
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      uint64_t v9 = *result;
      if (*(_DWORD *)(*a2 + 32) < *(_DWORD *)(*result + 32))
      {
        *uint64_t result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *uint64_t result = v3;
      *a2 = v4;
      if (*(_DWORD *)(*a3 + 32) >= v6) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *uint64_t result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_1CCEA1988(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (*(_DWORD *)(v6 + 32) < *(_DWORD *)(*a1 + 32))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1CCEA1900(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1CCEA1B94(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      uint64_t v18 = a1 + 1;
      uint64_t v19 = a1 + 2;
      unsigned int v20 = a1 + 3;
      sub_1CCEA1B94(a1, a1 + 1, a1 + 2, a1 + 3);
      uint64_t v21 = *(a2 - 1);
      uint64_t v22 = a1[3];
      if (*(_DWORD *)(v21 + 32) < *(_DWORD *)(v22 + 32))
      {
        uint64_t *v20 = v21;
        *(a2 - 1) = v22;
        uint64_t v23 = *v20;
        uint64_t v24 = *v19;
        unsigned int v25 = *(_DWORD *)(*v20 + 32);
        if (v25 < *(_DWORD *)(*v19 + 32))
        {
          uint64_t *v19 = v23;
          uint64_t *v20 = v24;
          uint64_t v26 = *v18;
          if (v25 < *(_DWORD *)(*v18 + 32))
          {
            a1[1] = v23;
            a1[2] = v26;
            uint64_t v27 = *a1;
            if (v25 < *(_DWORD *)(*a1 + 32))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      unsigned int v8 = a1 + 2;
      sub_1CCEA1900(a1, a1 + 1, a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    uint64_t v13 = *v8;
    unsigned int v14 = *(_DWORD *)(*v9 + 32);
    if (v14 < *(_DWORD *)(*v8 + 32))
    {
      uint64_t v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        uint64_t v16 = v15 - 8;
        if (v15 == 8) {
          break;
        }
        uint64_t v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(_DWORD *)(v13 + 32))
        {
          unsigned int v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      unsigned int v17 = a1;
LABEL_13:
      uint64_t *v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    unsigned int v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t *sub_1CCEA1B94(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = sub_1CCEA1900(a1, a2, a3);
  uint64_t v9 = *a3;
  if (*(_DWORD *)(*a4 + 32) < *(_DWORD *)(*a3 + 32))
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = *a2;
    if (*(_DWORD *)(*a3 + 32) < *(_DWORD *)(*a2 + 32))
    {
      *a2 = *a3;
      *a3 = v10;
      uint64_t v11 = *a1;
      if (*(_DWORD *)(*a2 + 32) < *(_DWORD *)(*a1 + 32))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t sub_1CCEA1C2C(uint64_t *a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5 = *a1;
  if (*a2 >= (unint64_t)*a1) {
    unint64_t v6 = *a2 - *a1;
  }
  else {
    unint64_t v6 = 0;
  }
  unint64_t v7 = v6 / a4;
  if (v6 / a4 * a4 != v6) {
    return 0;
  }
  unint64_t v9 = *(unsigned int *)(a3 + 32);
  if (v7 >= v9) {
    return 0;
  }
  int v10 = a4;
  uint64_t result = 0;
  unint64_t v14 = a2[1];
  if (a1[1] < v14) {
    unint64_t v14 = a1[1];
  }
  unint64_t v15 = v14 - v5;
  unint64_t v16 = v15 / a4;
  if (v15 / a4 <= v9 && v16 * a4 == v15)
  {
    int v18 = v16 - v7;
    uint64_t v19 = *(void *)(a3 + 24);
    if (v16 - v7 != 1)
    {
      llvm::FixedVectorType::get(*(llvm::FixedVectorType **)(a3 + 24), (llvm::Type *)(v16 - v7));
      uint64_t v19 = v20;
    }
    uint64_t v21 = llvm::IntegerType::get(*(llvm::IntegerType **)a3, (llvm::LLVMContext *)(8 * v18 * v10));
    unint64_t v22 = a2[2] & 0xFFFFFFFFFFFFFFF8;
    uint64_t v23 = *(void *)(v22 + 24);
    int v24 = sub_1CBFB3AB0(v23);
    if (v23 && v24)
    {
      uint64_t v25 = *(void *)(v23 - 32 * (*(_DWORD *)(v23 + 20) & 0x7FFFFFF) + 96);
      uint64_t v26 = *(unsigned int *)(v25 + 32);
      if (v26 <= 0x40)
      {
        if (!*(void *)(v25 + 24)) {
          return (a2[2] & 4) != 0;
        }
        return 0;
      }
      int v30 = 0;
      int64_t v31 = (unint64_t)(v26 + 63) >> 6;
      do
      {
        if (v31-- < 1) {
          break;
        }
        unint64_t v33 = *(void *)(*(void *)(v25 + 24) + 8 * v31);
        v30 += __clz(v33);
      }
      while (!v33);
      uint64_t result = 0;
      int v34 = v26 | 0xFFFFFFC0;
      if ((v26 & 0x3F) == 0) {
        int v34 = 0;
      }
      if (v30 + v34 == v26) {
        return (a2[2] & 4) != 0;
      }
    }
    else
    {
      uint64_t v27 = *(void *)(v22 + 24);
      int v28 = *(unsigned __int8 *)(v27 + 16);
      if (v28 == 60)
      {
        if ((*(_WORD *)(v27 + 18) & 1) == 0)
        {
          uint64_t v35 = *(void *)v27;
          if (*(unsigned char *)(*(void *)v27 + 8) != 16)
          {
            if ((unint64_t)*a1 > *a2 || (unint64_t)a1[1] < a2[1]) {
              uint64_t v35 = v21;
            }
            if (sub_1CCEA0BBC(a5, v19, v35)) {
              return 1;
            }
          }
        }
        return 0;
      }
      if (v28 != 61)
      {
        if (v28 == 84)
        {
          uint64_t v29 = *(void *)(v27 - 32);
          if (v29)
          {
            if (!*(unsigned char *)(v29 + 16)
              && *(void *)(v29 + 24) == *(void *)(v27 + 72)
              && (*(unsigned char *)(v29 + 33) & 0x20) != 0
              && (llvm::Instruction::isLifetimeStartOrEnd(*(llvm::Instruction **)(v22 + 24))
               || sub_1CBF698E4(v27)
               || sub_1CC27D470(v27)))
            {
              return 1;
            }
          }
        }
        return 0;
      }
      if (*(_WORD *)(v27 + 18)) {
        return 0;
      }
      uint64_t v36 = **(void **)(v27 - 64);
      if (*(unsigned char *)(v36 + 8) == 16) {
        return 0;
      }
      if ((unint64_t)*a1 > *a2 || (unint64_t)a1[1] < a2[1]) {
        uint64_t v36 = v21;
      }
      uint64_t result = sub_1CCEA0BBC(a5, v36, v19);
      if (result) {
        return 1;
      }
    }
  }
  return result;
}

void sub_1CCEA1EB4(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CCEA1F08(uint64_t a1, llvm::Value *this, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  unsigned int v7 = *((unsigned __int8 *)a3 + 32);
  if (v7 > 1)
  {
    uint64_t v9 = a3[1];
    if (*((unsigned char *)a3 + 33) == 1)
    {
      int v10 = (uint64_t *)*a3;
    }
    else
    {
      LOBYTE(v7) = 2;
      int v10 = a3;
    }
    *(void *)&long long v28 = a1 + 8;
    *(void *)&long long v29 = v10;
    *((void *)&v29 + 1) = v9;
    LOBYTE(v30) = 4;
    BYTE1(v30) = v7;
    if (!a4) {
      goto LABEL_10;
    }
  }
  else
  {
    long long v8 = *((_OWORD *)a3 + 1);
    long long v28 = *(_OWORD *)a3;
    long long v29 = v8;
    uint64_t v30 = a3[4];
    if (!a4) {
      goto LABEL_10;
    }
  }
  *((void *)this + 5) = a4;
  *(_WORD *)(a4 + 18) &= ~0x8000u;
  if ((*((unsigned char *)this + 23) & 0x10) != 0)
  {
    uint64_t v12 = *(void *)(a4 + 56);
    if (v12)
    {
      uint64_t v13 = *(llvm::ValueSymbolTable **)(v12 + 104);
      if (v13) {
        llvm::ValueSymbolTable::reinsertValue(v13, this);
      }
    }
  }
  uint64_t v11 = *a5;
  *((void *)this + 3) = *a5;
  *((void *)this + 4) = a5;
  *(void *)(v11 + 8) = (char *)this + 24;
  *a5 = (uint64_t)this + 24;
LABEL_10:
  llvm::Value::setNameImpl(this, (const char **)&v28);
  if (this && !*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_31;
    }
    uint64_t v14 = ***(void ***)this;
    uint64_t v15 = *(void *)(v14 + 152);
    uint64_t v16 = *(unsigned int *)(v14 + 168);
    if (v16)
    {
      LODWORD(v17) = (v16 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v18 = v15 + 16 * v17;
      uint64_t v19 = *(llvm::Value **)v18;
      if (*(llvm::Value **)v18 == this)
      {
LABEL_24:
        unint64_t v22 = *(void **)(v18 + 8);
        unint64_t v25 = *v22;
        uint64_t v23 = v22 + 2;
        unint64_t v24 = v25;
        if (v25 >= 5 && *(_DWORD *)v23 == *(_DWORD *)"llvm." && v23[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v27 = llvm::Function::lookupIntrinsicID(v23, v24);
LABEL_32:
          *((_DWORD *)this + 9) = v27;
          return;
        }
LABEL_31:
        int v27 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_32;
      }
      int v20 = 1;
      while (v19 != (llvm::Value *)-4096)
      {
        int v21 = v17 + v20++;
        uint64_t v17 = v21 & (v16 - 1);
        uint64_t v19 = *(llvm::Value **)(v15 + 16 * v17);
        if (v19 == this)
        {
          uint64_t v18 = v15 + 16 * v17;
          goto LABEL_24;
        }
      }
    }
    uint64_t v18 = v15 + 16 * v16;
    goto LABEL_24;
  }
}

unsigned __int8 *sub_1CCEA20C0(uint64_t *a1, uint64_t *a2, llvm::Value *a3)
{
  uint64_t v3 = *a1;
  unsigned int v4 = *((_DWORD *)a3 + 2);
  if ((v4 & 0xFE) == 0x12) {
    unsigned int v4 = *(_DWORD *)(**((void **)a3 + 2) + 8);
  }
  uint64_t v5 = a1[14];
  unsigned int v7 = (llvm::CastInst *)a1[4];
  uint64_t v6 = a1[5];
  if (v4 < 0x100) {
    goto LABEL_12;
  }
  unsigned int v8 = v4 >> 8;
  uint64_t v9 = *(unsigned int *)(v3 + 240);
  uint64_t v10 = *(void *)(v3 + 232);
  if (v9)
  {
    uint64_t v10 = *(void *)(v3 + 232);
    unint64_t v11 = *(unsigned int *)(v3 + 240);
    do
    {
      unint64_t v12 = v11 >> 1;
      uint64_t v13 = v10 + 16 * (v11 >> 1);
      unsigned int v14 = *(_DWORD *)(v13 + 8);
      uint64_t v15 = v13 + 16;
      v11 += ~(v11 >> 1);
      if (v14 < v8) {
        uint64_t v10 = v15;
      }
      else {
        unint64_t v11 = v12;
      }
    }
    while (v11);
  }
  if (v10 == *(void *)(v3 + 232) + 16 * v9 || *(_DWORD *)(v10 + 8) != v8) {
LABEL_12:
  }
    uint64_t v10 = *(void *)(v3 + 232);
  uint64_t v16 = v5 - v6;
  unsigned int v17 = *(_DWORD *)(v10 + 12);
  unsigned int v24 = v17;
  if (v17 > 0x40) {
    operator new[]();
  }
  unint64_t v18 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v17;
  if (!v17) {
    unint64_t v18 = 0;
  }
  unint64_t v23 = v18 & v16;
  __int16 v22 = 257;
  uint64_t v19 = sub_1CCE92898(a2, v3, v7, (llvm::LLVMContext *)&v23, a3, (uint64_t)v21);
  if (v24 >= 0x41 && v23) {
    MEMORY[0x1D25D9CB0](v23, 0x1000C8000313F17);
  }
  return v19;
}

unsigned __int8 *sub_1CCEA2284(uint64_t a1, unsigned int a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = (unsigned __int8 *)a4;
  uint64_t v6 = *(void *)a4;
  if (*(void *)a4 != a5)
  {
    unsigned int v9 = *(_DWORD *)(v6 + 8);
    int v10 = v9 & 0xFE;
    char v11 = v9;
    if (v10 == 18) {
      char v11 = *(unsigned char *)(**(void **)(v6 + 16) + 8);
    }
    if (v11 != 13) {
      goto LABEL_25;
    }
    unsigned int v12 = *(_DWORD *)(a5 + 8);
    if ((v12 & 0xFE) == 0x12) {
      unsigned int v12 = *(_DWORD *)(**(void **)(a5 + 16) + 8);
    }
    if (v12 == 15)
    {
      if (v12 < 0x100) {
        goto LABEL_17;
      }
      unsigned int v13 = v12 >> 8;
      uint64_t v14 = a1;
      if (a2)
      {
        uint64_t v14 = a1;
        unint64_t v15 = a2;
        do
        {
          unint64_t v16 = v15 >> 1;
          uint64_t v17 = v14 + 16 * (v15 >> 1);
          unsigned int v18 = *(_DWORD *)(v17 + 8);
          uint64_t v19 = v17 + 16;
          v15 += ~(v15 >> 1);
          if (v18 < v13) {
            uint64_t v14 = v19;
          }
          else {
            unint64_t v15 = v16;
          }
        }
        while (v15);
      }
      if (v14 == a1 + 16 * a2 || *(_DWORD *)(v14 + 8) != v13) {
LABEL_17:
      }
        uint64_t v14 = a1;
      int v20 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)a5, (llvm::LLVMContext *)*(unsigned int *)(v14 + 4));
      uint64_t v21 = (uint64_t)v20;
      if ((*(_DWORD *)(a5 + 8) & 0xFE) == 0x12)
      {
        unint64_t v84 = (llvm::Type *)*(unsigned int *)(a5 + 32);
        if (*(_DWORD *)(a5 + 8) == 19) {
          llvm::ScalableVectorType::get(v20, v84);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v20, v84);
        }
        uint64_t v21 = v85;
      }
      __int16 v105 = 257;
      if (*(void *)v5 != v21)
      {
        if (v5[16] <= 0x14u)
        {
          uint64_t v5 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t))(*(void *)a3[9] + 224))(a3[9], 49, v5, v21);
          if (v5) {
            BOOL v50 = v5[16] >= 0x1Cu;
          }
          else {
            BOOL v50 = 0;
          }
          if (v50)
          {
            (*(void (**)(uint64_t, unsigned __int8 *, unsigned char *, uint64_t, uint64_t))(*(void *)a3[10] + 16))(a3[10], v5, v104, a3[6], a3[7]);
            uint64_t v88 = *((unsigned int *)a3 + 2);
            if (v88)
            {
              uint64_t v89 = *a3;
              uint64_t v90 = *a3 + 16 * v88;
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v5, *(_DWORD *)v89, *(llvm::MDNode **)(v89 + 8));
                v89 += 16;
              }
              while (v89 != v90);
            }
          }
        }
        else
        {
          __int16 v107 = 257;
          uint64_t v5 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v5, v21, v106, 0);
          (*(void (**)(uint64_t, unsigned __int8 *, unsigned char *, uint64_t, uint64_t))(*(void *)a3[10] + 16))(a3[10], v5, v104, a3[6], a3[7]);
          uint64_t v22 = *((unsigned int *)a3 + 2);
          if (v22)
          {
            uint64_t v23 = *a3;
            uint64_t v24 = *a3 + 16 * v22;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v5, *(_DWORD *)v23, *(llvm::MDNode **)(v23 + 8));
              v23 += 16;
            }
            while (v23 != v24);
          }
        }
      }
      __int16 v103 = 257;
      if (*(void *)v5 != a5)
      {
        if (v5[16] <= 0x14u)
        {
          uint64_t v5 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t))(*(void *)a3[9] + 224))(a3[9], 48, v5, a5);
          if (v5) {
            BOOL v54 = v5[16] >= 0x1Cu;
          }
          else {
            BOOL v54 = 0;
          }
          if (v54)
          {
            (*(void (**)(uint64_t, unsigned __int8 *, unsigned char *, uint64_t, uint64_t))(*(void *)a3[10] + 16))(a3[10], v5, v102, a3[6], a3[7]);
            uint64_t v55 = *((unsigned int *)a3 + 2);
            if (v55)
            {
              uint64_t v56 = *a3;
              uint64_t v57 = v56 + 16 * v55;
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v5, *(_DWORD *)v56, *(llvm::MDNode **)(v56 + 8));
                v56 += 16;
              }
              while (v56 != v57);
            }
          }
        }
        else
        {
          __int16 v107 = 257;
          uint64_t v5 = (unsigned __int8 *)llvm::CastInst::Create(48, (uint64_t)v5, a5, v106, 0);
          (*(void (**)(uint64_t, unsigned __int8 *, unsigned char *, uint64_t, uint64_t))(*(void *)a3[10] + 16))(a3[10], v5, v102, a3[6], a3[7]);
          uint64_t v51 = *((unsigned int *)a3 + 2);
          if (v51)
          {
            uint64_t v52 = *a3;
            uint64_t v53 = v52 + 16 * v51;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v5, *(_DWORD *)v52, *(llvm::MDNode **)(v52 + 8));
              v52 += 16;
            }
            while (v52 != v53);
          }
        }
      }
    }
    else
    {
LABEL_25:
      int v25 = *(_DWORD *)(v6 + 8);
      if (v10 == 18) {
        LOBYTE(v25) = *(unsigned char *)(**(void **)(v6 + 16) + 8);
      }
      if (v25 == 15
        && ((*(_DWORD *)(a5 + 8) & 0xFE) != 0x12
          ? (int v26 = *(_DWORD *)(a5 + 8))
          : (int v26 = *(unsigned __int8 *)(**(void **)(a5 + 16) + 8)),
            v26 == 13))
      {
        if (v10 == 18) {
          unsigned int v9 = *(_DWORD *)(**(void **)(v6 + 16) + 8);
        }
        if (v9 < 0x100) {
          goto LABEL_43;
        }
        unsigned int v27 = v9 >> 8;
        uint64_t v28 = a1;
        if (a2)
        {
          uint64_t v28 = a1;
          unint64_t v29 = a2;
          do
          {
            unint64_t v30 = v29 >> 1;
            uint64_t v31 = v28 + 16 * (v29 >> 1);
            unsigned int v32 = *(_DWORD *)(v31 + 8);
            uint64_t v33 = v31 + 16;
            v29 += ~(v29 >> 1);
            if (v32 < v27) {
              uint64_t v28 = v33;
            }
            else {
              unint64_t v29 = v30;
            }
          }
          while (v29);
        }
        if (v28 == a1 + 16 * a2 || *(_DWORD *)(v28 + 8) != v27) {
LABEL_43:
        }
          uint64_t v28 = a1;
        int v34 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v6, (llvm::LLVMContext *)*(unsigned int *)(v28 + 4));
        uint64_t v35 = (uint64_t)v34;
        if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
        {
          uint64_t v86 = (llvm::Type *)*(unsigned int *)(v6 + 32);
          if (*(_DWORD *)(v6 + 8) == 19) {
            llvm::ScalableVectorType::get(v34, v86);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v34, v86);
          }
          uint64_t v35 = v87;
        }
        __int16 v105 = 257;
        if (*(void *)v5 != v35)
        {
          if (v5[16] <= 0x14u)
          {
            uint64_t v5 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t))(*(void *)a3[9] + 224))(a3[9], 47, v5, v35);
            if (v5) {
              BOOL v58 = v5[16] >= 0x1Cu;
            }
            else {
              BOOL v58 = 0;
            }
            if (v58)
            {
              (*(void (**)(uint64_t, unsigned __int8 *, unsigned char *, uint64_t, uint64_t))(*(void *)a3[10] + 16))(a3[10], v5, v104, a3[6], a3[7]);
              uint64_t v91 = *((unsigned int *)a3 + 2);
              if (v91)
              {
                uint64_t v92 = *a3;
                uint64_t v93 = *a3 + 16 * v91;
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v5, *(_DWORD *)v92, *(llvm::MDNode **)(v92 + 8));
                  v92 += 16;
                }
                while (v92 != v93);
              }
            }
          }
          else
          {
            __int16 v107 = 257;
            uint64_t v5 = (unsigned __int8 *)llvm::CastInst::Create(47, (uint64_t)v5, v35, v106, 0);
            (*(void (**)(uint64_t, unsigned __int8 *, unsigned char *, uint64_t, uint64_t))(*(void *)a3[10] + 16))(a3[10], v5, v104, a3[6], a3[7]);
            uint64_t v36 = *((unsigned int *)a3 + 2);
            if (v36)
            {
              uint64_t v37 = *a3;
              uint64_t v38 = *a3 + 16 * v36;
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v5, *(_DWORD *)v37, *(llvm::MDNode **)(v37 + 8));
                v37 += 16;
              }
              while (v37 != v38);
            }
          }
        }
        __int16 v103 = 257;
        if (*(void *)v5 != a5)
        {
          if (v5[16] <= 0x14u)
          {
            uint64_t v5 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t))(*(void *)a3[9] + 224))(a3[9], 49, v5, a5);
            if (v5) {
              BOOL v62 = v5[16] >= 0x1Cu;
            }
            else {
              BOOL v62 = 0;
            }
            if (v62)
            {
              (*(void (**)(uint64_t, unsigned __int8 *, unsigned char *, uint64_t, uint64_t))(*(void *)a3[10] + 16))(a3[10], v5, v102, a3[6], a3[7]);
              uint64_t v63 = *((unsigned int *)a3 + 2);
              if (v63)
              {
                uint64_t v64 = *a3;
                uint64_t v65 = v64 + 16 * v63;
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v5, *(_DWORD *)v64, *(llvm::MDNode **)(v64 + 8));
                  v64 += 16;
                }
                while (v64 != v65);
              }
            }
          }
          else
          {
            __int16 v107 = 257;
            uint64_t v5 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v5, a5, v106, 0);
            (*(void (**)(uint64_t, unsigned __int8 *, unsigned char *, uint64_t, uint64_t))(*(void *)a3[10] + 16))(a3[10], v5, v102, a3[6], a3[7]);
            uint64_t v59 = *((unsigned int *)a3 + 2);
            if (v59)
            {
              uint64_t v60 = *a3;
              uint64_t v61 = v60 + 16 * v59;
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v5, *(_DWORD *)v60, *(llvm::MDNode **)(v60 + 8));
                v60 += 16;
              }
              while (v60 != v61);
            }
          }
        }
      }
      else
      {
        int v39 = *(_DWORD *)(v6 + 8);
        if (v10 == 18) {
          LOBYTE(v39) = *(unsigned char *)(**(void **)(v6 + 16) + 8);
        }
        if (v39 != 15) {
          goto LABEL_62;
        }
        int v40 = *(_DWORD *)(a5 + 8);
        char v41 = v40;
        if ((v40 & 0xFE) == 0x12) {
          char v41 = *(unsigned char *)(**(void **)(a5 + 16) + 8);
        }
        if (v41 != 15) {
          goto LABEL_62;
        }
        unsigned int v42 = *(_DWORD *)(v6 + 8);
        if (v10 == 18) {
          unsigned int v42 = *(_DWORD *)(**(void **)(v6 + 16) + 8);
        }
        if ((v40 & 0xFE) == 0x12) {
          int v40 = *(_DWORD *)(**(void **)(a5 + 16) + 8);
        }
        if ((v40 ^ v42) >= 0x100)
        {
          if (v10 == 18) {
            unsigned int v9 = *(_DWORD *)(**(void **)(v6 + 16) + 8);
          }
          if (v9 < 0x100) {
            goto LABEL_125;
          }
          unsigned int v66 = v9 >> 8;
          uint64_t v67 = a1;
          if (a2)
          {
            uint64_t v67 = a1;
            unint64_t v68 = a2;
            do
            {
              unint64_t v69 = v68 >> 1;
              uint64_t v70 = v67 + 16 * (v68 >> 1);
              unsigned int v71 = *(_DWORD *)(v70 + 8);
              uint64_t v72 = v70 + 16;
              v68 += ~(v68 >> 1);
              if (v71 < v66) {
                uint64_t v67 = v72;
              }
              else {
                unint64_t v68 = v69;
              }
            }
            while (v68);
          }
          if (v67 == a1 + 16 * a2 || *(_DWORD *)(v67 + 8) != v66) {
LABEL_125:
          }
            uint64_t v67 = a1;
          uint64_t v73 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v6, (llvm::LLVMContext *)*(unsigned int *)(v67 + 4));
          uint64_t v74 = (uint64_t)v73;
          if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
          {
            long long v94 = (llvm::Type *)*(unsigned int *)(v6 + 32);
            if (*(_DWORD *)(v6 + 8) == 19) {
              llvm::ScalableVectorType::get(v73, v94);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v73, v94);
            }
            uint64_t v74 = v95;
          }
          __int16 v105 = 257;
          if (*(void *)v5 != v74)
          {
            if (v5[16] <= 0x14u)
            {
              uint64_t v5 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t))(*(void *)a3[9] + 224))(a3[9], 47, v5, v74);
              if (v5) {
                BOOL v78 = v5[16] >= 0x1Cu;
              }
              else {
                BOOL v78 = 0;
              }
              if (v78)
              {
                (*(void (**)(uint64_t, unsigned __int8 *, unsigned char *, uint64_t, uint64_t))(*(void *)a3[10] + 16))(a3[10], v5, v104, a3[6], a3[7]);
                uint64_t v96 = *((unsigned int *)a3 + 2);
                if (v96)
                {
                  uint64_t v97 = *a3;
                  uint64_t v98 = *a3 + 16 * v96;
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v5, *(_DWORD *)v97, *(llvm::MDNode **)(v97 + 8));
                    v97 += 16;
                  }
                  while (v97 != v98);
                }
              }
            }
            else
            {
              __int16 v107 = 257;
              uint64_t v5 = (unsigned __int8 *)llvm::CastInst::Create(47, (uint64_t)v5, v74, v106, 0);
              (*(void (**)(uint64_t, unsigned __int8 *, unsigned char *, uint64_t, uint64_t))(*(void *)a3[10] + 16))(a3[10], v5, v104, a3[6], a3[7]);
              uint64_t v75 = *((unsigned int *)a3 + 2);
              if (v75)
              {
                uint64_t v76 = *a3;
                uint64_t v77 = *a3 + 16 * v75;
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v5, *(_DWORD *)v76, *(llvm::MDNode **)(v76 + 8));
                  v76 += 16;
                }
                while (v76 != v77);
              }
            }
          }
          __int16 v103 = 257;
          if (*(void *)v5 != a5)
          {
            if (v5[16] <= 0x14u)
            {
              uint64_t v5 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t))(*(void *)a3[9] + 224))(a3[9], 48, v5, a5);
              if (v5) {
                BOOL v82 = v5[16] >= 0x1Cu;
              }
              else {
                BOOL v82 = 0;
              }
              if (v82)
              {
                (*(void (**)(uint64_t, unsigned __int8 *, unsigned char *, uint64_t, uint64_t))(*(void *)a3[10] + 16))(a3[10], v5, v102, a3[6], a3[7]);
                uint64_t v99 = *((unsigned int *)a3 + 2);
                if (v99)
                {
                  uint64_t v100 = *a3;
                  uint64_t v101 = v100 + 16 * v99;
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v5, *(_DWORD *)v100, *(llvm::MDNode **)(v100 + 8));
                    v100 += 16;
                  }
                  while (v100 != v101);
                }
              }
            }
            else
            {
              __int16 v107 = 257;
              uint64_t v5 = (unsigned __int8 *)llvm::CastInst::Create(48, (uint64_t)v5, a5, v106, 0);
              (*(void (**)(uint64_t, unsigned __int8 *, unsigned char *, uint64_t, uint64_t))(*(void *)a3[10] + 16))(a3[10], v5, v102, a3[6], a3[7]);
              uint64_t v79 = *((unsigned int *)a3 + 2);
              if (v79)
              {
                uint64_t v80 = *a3;
                uint64_t v81 = v80 + 16 * v79;
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v5, *(_DWORD *)v80, *(llvm::MDNode **)(v80 + 8));
                  v80 += 16;
                }
                while (v80 != v81);
              }
            }
          }
        }
        else
        {
LABEL_62:
          __int16 v105 = 257;
          if (*(unsigned __int8 *)(a4 + 16) <= 0x14u)
          {
            uint64_t v5 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a3[9]
                                                                                                  + 224))(a3[9], 49, a4, a5);
            if (v5) {
              BOOL v46 = v5[16] >= 0x1Cu;
            }
            else {
              BOOL v46 = 0;
            }
            if (v46)
            {
              (*(void (**)(uint64_t, unsigned __int8 *, unsigned char *, uint64_t, uint64_t))(*(void *)a3[10] + 16))(a3[10], v5, v104, a3[6], a3[7]);
              uint64_t v47 = *((unsigned int *)a3 + 2);
              if (v47)
              {
                uint64_t v48 = *a3;
                uint64_t v49 = v48 + 16 * v47;
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v5, *(_DWORD *)v48, *(llvm::MDNode **)(v48 + 8));
                  v48 += 16;
                }
                while (v48 != v49);
              }
            }
          }
          else
          {
            __int16 v107 = 257;
            uint64_t v5 = (unsigned __int8 *)llvm::CastInst::Create(49, a4, a5, v106, 0);
            (*(void (**)(uint64_t, unsigned __int8 *, unsigned char *, uint64_t, uint64_t))(*(void *)a3[10] + 16))(a3[10], v5, v104, a3[6], a3[7]);
            uint64_t v43 = *((unsigned int *)a3 + 2);
            if (v43)
            {
              uint64_t v44 = *a3;
              uint64_t v45 = v44 + 16 * v43;
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v5, *(_DWORD *)v44, *(llvm::MDNode **)(v44 + 8));
                v44 += 16;
              }
              while (v44 != v45);
            }
          }
        }
      }
    }
  }
  return v5;
}

unsigned __int8 *sub_1CCEA2F70(unsigned char *a1, uint64_t a2, llvm::ConstantInt ***a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  unsigned int v8 = (unsigned __int8 *)a4;
  unsigned int v12 = *a3;
  uint64_t v13 = *(void *)a4;
  if (*(llvm::ConstantInt ***)a4 == *a3) {
    goto LABEL_20;
  }
  int v14 = *(unsigned __int8 *)(a6 + 32);
  if (v14 == 1)
  {
    uint64_t v56 = ".ext";
    __int16 v15 = 259;
    goto LABEL_6;
  }
  if (!*(unsigned char *)(a6 + 32))
  {
    __int16 v15 = 256;
LABEL_6:
    __int16 v59 = v15;
    goto LABEL_11;
  }
  uint64_t v16 = *(void *)(a6 + 8);
  if (*(unsigned char *)(a6 + 33) == 1)
  {
    uint64_t v17 = *(const char **)a6;
  }
  else
  {
    LOBYTE(v14) = 2;
    uint64_t v17 = (const char *)a6;
  }
  uint64_t v56 = v17;
  uint64_t v57 = v16;
  BOOL v58 = ".ext";
  LOBYTE(v59) = v14;
  HIBYTE(v59) = 3;
LABEL_11:
  if (*(unsigned __int8 *)(a4 + 16) <= 0x14u)
  {
    unsigned int v8 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, uint64_t, llvm::ConstantInt **))(**(void **)(a2 + 72) + 224))(*(void *)(a2 + 72), 39, a4, v12);
    if (v8) {
      BOOL v21 = v8[16] >= 0x1Cu;
    }
    else {
      BOOL v21 = 0;
    }
    if (v21)
    {
      (*(void (**)(void, unsigned __int8 *, const char **, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), v8, &v56, *(void *)(a2 + 48), *(void *)(a2 + 56));
      uint64_t v49 = *(unsigned int *)(a2 + 8);
      if (v49)
      {
        uint64_t v50 = *(void *)a2;
        uint64_t v51 = *(void *)a2 + 16 * v49;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v8, *(_DWORD *)v50, *(llvm::MDNode **)(v50 + 8));
          v50 += 16;
        }
        while (v50 != v51);
      }
    }
  }
  else
  {
    __int16 v63 = 257;
    unsigned int v8 = (unsigned __int8 *)llvm::CastInst::Create(39, a4, (uint64_t)v12, (const char **)&__src, 0);
    (*(void (**)(void, unsigned __int8 *, const char **, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), v8, &v56, *(void *)(a2 + 48), *(void *)(a2 + 56));
    uint64_t v18 = *(unsigned int *)(a2 + 8);
    if (v18)
    {
      uint64_t v19 = *(void *)a2;
      uint64_t v20 = *(void *)a2 + 16 * v18;
      do
      {
        llvm::Instruction::setMetadata((llvm::Instruction *)v8, *(_DWORD *)v19, *(llvm::MDNode **)(v19 + 8));
        v19 += 16;
      }
      while (v19 != v20);
    }
  }
LABEL_20:
  if (*a1)
  {
    unint64_t v22 = (unint64_t)(sub_1CB83544C((uint64_t)a1, (uint64_t)v12) + 7) >> 3;
    a5 = v22 - (a5 + ((unint64_t)(sub_1CB83544C((uint64_t)a1, v13) + 7) >> 3));
  }
  unint64_t v23 = 8 * a5;
  if (v23)
  {
    int v24 = *(unsigned __int8 *)(a6 + 32);
    if (v24 == 1)
    {
      __src = ".shift";
      __int16 v25 = 259;
    }
    else
    {
      if (*(unsigned char *)(a6 + 32))
      {
        uint64_t v26 = *(void *)(a6 + 8);
        if (*(unsigned char *)(a6 + 33) == 1)
        {
          unsigned int v27 = *(char **)a6;
        }
        else
        {
          LOBYTE(v24) = 2;
          unsigned int v27 = (char *)a6;
        }
        __src = v27;
        uint64_t v61 = v26;
        BOOL v62 = ".shift";
        LOBYTE(v63) = v24;
        HIBYTE(v63) = 3;
        goto LABEL_34;
      }
      __int16 v25 = 256;
    }
    __int16 v63 = v25;
LABEL_34:
    uint64_t v28 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v8, v23, 0);
    unsigned int v8 = (unsigned __int8 *)sub_1CC242524(a2, (uint64_t)v8, (uint64_t)v28, (uint64_t)&__src, 0, 0);
    goto LABEL_35;
  }
  if (*(_DWORD *)(v13 + 8) >> 8 >= *((_DWORD *)v12 + 2) >> 8) {
    return v8;
  }
LABEL_35:
  llvm::IntegerType::getMask(v13, (llvm::APInt *)&v52);
  unint64_t v30 = *((unsigned int *)v12 + 2);
  unint64_t v31 = v30 >> 8;
  if (v30 >> 8 > 0x40)
  {
    if (v53 != v31) {
      operator new[]();
    }
    sub_1CD0463BC((uint64_t)&__src, (uint64_t)&v52);
    LODWORD(v31) = v61;
  }
  else
  {
    LODWORD(v61) = *((_DWORD *)v12 + 2) >> 8;
    if (v30 <= 0xFF) {
      unint64_t v32 = 0;
    }
    else {
      unint64_t v32 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v30);
    }
    __src = (void *)(v32 & v52);
  }
  int v55 = v31;
  if (v31 > 0x40) {
    operator new[]();
  }
  if (v31 == v23) {
    uint64_t v33 = 0;
  }
  else {
    uint64_t v33 = (void)__src << (v23 & 0xF8);
  }
  unint64_t v34 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v31;
  if (v31) {
    unint64_t v35 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v31;
  }
  else {
    unint64_t v35 = 0;
  }
  unint64_t v36 = ~(v35 & v33);
  if (!v31) {
    unint64_t v34 = 0;
  }
  unint64_t v54 = v34 & v36;
  LODWORD(v57) = v31;
  uint64_t v56 = (const char *)(v34 & v36);
  int v55 = 0;
  if (v61 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  if (v53 >= 0x41 && v52) {
    MEMORY[0x1D25D9CB0](v52, 0x1000C8000313F17);
  }
  int v37 = *(unsigned __int8 *)(a6 + 32);
  if (v37 == 1)
  {
    __src = ".mask";
    __int16 v38 = 259;
    goto LABEL_61;
  }
  if (!*(unsigned char *)(a6 + 32))
  {
    __int16 v38 = 256;
LABEL_61:
    __int16 v63 = v38;
    goto LABEL_66;
  }
  uint64_t v39 = *(void *)(a6 + 8);
  if (*(unsigned char *)(a6 + 33) == 1)
  {
    int v40 = *(char **)a6;
  }
  else
  {
    LOBYTE(v37) = 2;
    int v40 = (char *)a6;
  }
  __src = v40;
  uint64_t v61 = v39;
  BOOL v62 = ".mask";
  LOBYTE(v63) = v37;
  HIBYTE(v63) = 3;
LABEL_66:
  char v41 = *a3;
  Splat = llvm::ConstantInt::get(**a3, (llvm::LLVMContext *)&v56, v29);
  if ((v41[1] & 0xFE) == 0x12) {
    Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v41 + 8) | ((unint64_t)(*((_DWORD *)v41 + 2) == 19) << 32)), (uint64_t)Splat);
  }
  uint64_t v43 = sub_1CBF52474(a2, a3, (uint64_t)Splat, (uint64_t)&__src);
  int v44 = *(unsigned __int8 *)(a6 + 32);
  if (v44 == 1)
  {
    __src = ".insert";
    __int16 v45 = 259;
  }
  else
  {
    if (*(unsigned char *)(a6 + 32))
    {
      uint64_t v46 = *(void *)(a6 + 8);
      if (*(unsigned char *)(a6 + 33) == 1)
      {
        uint64_t v47 = *(char **)a6;
      }
      else
      {
        LOBYTE(v44) = 2;
        uint64_t v47 = (char *)a6;
      }
      __src = v47;
      uint64_t v61 = v46;
      BOOL v62 = ".insert";
      LOBYTE(v63) = v44;
      HIBYTE(v63) = 3;
      goto LABEL_77;
    }
    __int16 v45 = 256;
  }
  __int16 v63 = v45;
LABEL_77:
  unsigned int v8 = (unsigned __int8 *)sub_1CB844AF4(a2, v43, (uint64_t)v8, (uint64_t)&__src);
  if (v57 >= 0x41 && v56) {
    MEMORY[0x1D25D9CB0](v56, 0x1000C8000313F17);
  }
  return v8;
}

void sub_1CCEA35C4(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 8) && llvm::wouldInstructionBeTriviallyDead(a2, 0))
  {
    unsigned int v4 = *(unsigned int **)(a1 + 16);
    uint64_t v28 = 4;
    unint64_t v29 = 0;
    unint64_t v30 = (int32x2_t ****)a2;
    if (a2 != -8192 && a2 != -4096 && a2) {
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v28);
    }
    uint64_t v5 = v4[50];
    unint64_t v6 = *((void *)v4 + 24);
    unsigned int v7 = &v28;
    if (v5 >= v4[51])
    {
      int v24 = (unint64_t *)(v4 + 48);
      unint64_t v25 = v5 + 1;
      BOOL v26 = v6 + 24 * v5 > (unint64_t)&v28;
      if (v6 <= (unint64_t)&v28 && v26)
      {
        unsigned int v27 = (char *)&v28 - v6;
        sub_1CC0BD844(v4 + 48, v25);
        unint64_t v6 = *v24;
        unsigned int v7 = (uint64_t *)&v27[*v24];
      }
      else
      {
        sub_1CC0BD844(v4 + 48, v25);
        unint64_t v6 = *v24;
        unsigned int v7 = &v28;
      }
    }
    unsigned int v8 = v4[50];
    unsigned int v9 = (unint64_t *)(v6 + 24 * v8);
    *unsigned int v9 = 4;
    v9[1] = 0;
    uint64_t v10 = v7[2];
    v9[2] = v10;
    if (v10 != -8192 && v10 != -4096)
    {
      if (v10)
      {
        unint64_t v11 = *v7 & 0xFFFFFFFFFFFFFFF8;
        v9[1] = *(void *)v11;
        *(void *)unint64_t v11 = v9;
        *unsigned int v9 = v11 | 4;
        unsigned int v12 = (unint64_t *)v9[1];
        if (v12) {
          *unsigned int v12 = *v12 & 7 | (unint64_t)(v9 + 1);
        }
      }
    }
    v4[50] = v8 + 1;
    if (v30 != (int32x2_t ****)-8192 && v30 != (int32x2_t ****)-4096 && v30)
    {
      unint64_t v13 = v28 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v28 & 0xFFFFFFFFFFFFFFF8) = v29;
      if (v29)
      {
        *unint64_t v29 = *v29 & 7 | v13;
      }
      else
      {
        int v14 = v30;
        __int16 v15 = ***v30;
        unint64_t v16 = (unint64_t)v15[303];
        if (v16 <= v13)
        {
          uint64_t v17 = v15[305].u32[0];
          if (v16 + 16 * v17 > v13)
          {
            unsigned int v18 = v17 - 1;
            LODWORD(v19) = v18 & ((v30 >> 4) ^ (v30 >> 9));
            uint64_t v20 = (int32x2_t *****)(v16 + 16 * v19);
            BOOL v21 = *v20;
            if (v30 == *v20)
            {
LABEL_25:
              uint64_t *v20 = (int32x2_t ****)-8192;
              v15[304] = vadd_s32(v15[304], (int32x2_t)0x1FFFFFFFFLL);
              int v14 = v30;
            }
            else
            {
              int v22 = 1;
              while (v21 != (int32x2_t ****)-4096)
              {
                int v23 = v19 + v22++;
                uint64_t v19 = v23 & v18;
                BOOL v21 = *(int32x2_t *****)(v16 + 16 * v19);
                if (v30 == v21)
                {
                  uint64_t v20 = (int32x2_t *****)(v16 + 16 * v19);
                  goto LABEL_25;
                }
              }
            }
            *((unsigned char *)v14 + 17) &= ~1u;
          }
        }
      }
    }
  }
}

llvm::Instruction *sub_1CCEA3800(uint64_t a1, unsigned __int8 *a2, const llvm::APInt *a3, int a4, uint64_t a5)
{
  uint64_t v5 = a2;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (a4 - a3 == *(_DWORD *)(*(void *)a2 + 32)) {
    return (llvm::Instruction *)v5;
  }
  if (a4 - a3 == 1)
  {
    uint64_t v8 = **(void **)(a1 + 64);
    unsigned int v9 = *(llvm::ConstantInt **)(v8 + 1960);
    unsigned int v10 = *(_DWORD *)(v8 + 1968);
    LODWORD(v30) = v10 >> 8;
    if (v10 >> 8 > 0x40) {
      operator new[]();
    }
    unint64_t v11 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v10) + 63);
    if (v10 <= 0xFF) {
      LODWORD(v11) = 0;
    }
    unint64_t v29 = (void *)(v11 & a3);
    unsigned int v12 = (unsigned __int8 *)llvm::ConstantInt::get(v9, (llvm::LLVMContext *)&v29, a3);
    if (v30 >= 0x41 && v29)
    {
      BOOL v26 = v12;
      MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
      unsigned int v12 = v26;
    }
    int v13 = *(unsigned __int8 *)(a5 + 32);
    if (v13 == 1)
    {
      unint64_t v29 = ".extract";
      __int16 v14 = 259;
    }
    else
    {
      if (*(unsigned char *)(a5 + 32))
      {
        uint64_t v20 = *(void *)(a5 + 8);
        if (*(unsigned char *)(a5 + 33) == 1)
        {
          BOOL v21 = *(void **)a5;
        }
        else
        {
          LOBYTE(v13) = 2;
          BOOL v21 = (void *)a5;
        }
        unint64_t v29 = v21;
        uint64_t v30 = v20;
        v31[0] = ".extract";
        LOBYTE(v32) = v13;
        HIBYTE(v32) = 3;
        return sub_1CB8445F4(a1, v5, v12, (uint64_t)&v29);
      }
      __int16 v14 = 256;
    }
    __int16 v32 = v14;
    return sub_1CB8445F4(a1, v5, v12, (uint64_t)&v29);
  }
  unint64_t v29 = v31;
  uint64_t v30 = 0x800000000;
  sub_1CCA47BAC((uint64_t)&v29, (int)a3, a4);
  unint64_t v16 = v29;
  uint64_t v17 = (llvm::Type *)v30;
  int v18 = *(unsigned __int8 *)(a5 + 32);
  if (v18 == 1)
  {
    v27[0] = ".extract";
    __int16 v19 = 259;
    goto LABEL_21;
  }
  if (!*(unsigned char *)(a5 + 32))
  {
    __int16 v19 = 256;
LABEL_21:
    __int16 v28 = v19;
    goto LABEL_26;
  }
  uint64_t v22 = *(void *)(a5 + 8);
  if (*(unsigned char *)(a5 + 33) == 1)
  {
    int v23 = *(void **)a5;
  }
  else
  {
    LOBYTE(v18) = 2;
    int v23 = (void *)a5;
  }
  v27[0] = v23;
  v27[1] = v22;
  v27[2] = ".extract";
  LOBYTE(v28) = v18;
  HIBYTE(v28) = 3;
LABEL_26:
  int v24 = llvm::PoisonValue::get(*(llvm::PoisonValue **)v5, v15);
  uint64_t v5 = (unsigned __int8 *)sub_1CB935A74(a1, (uint64_t)v5, (uint64_t)v24, v16, v17, (uint64_t)v27);
  if (v29 != v31) {
    free(v29);
  }
  return (llvm::Instruction *)v5;
}

llvm::Instruction *sub_1CCEA3AC8(unsigned char *a1, uint64_t a2, uint64_t *a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  unsigned int v9 = (llvm::Instruction *)a3;
  uint64_t v11 = *a3;
  if (*a1)
  {
    unint64_t v13 = (unint64_t)(sub_1CB83544C((uint64_t)a1, *a3) + 7) >> 3;
    a5 = v13 - (a5 + ((unint64_t)(sub_1CB83544C((uint64_t)a1, a4) + 7) >> 3));
  }
  if (8 * a5)
  {
    int v14 = *(unsigned __int8 *)(a6 + 32);
    if (v14 == 1)
    {
      v33[0] = ".shift";
      __int16 v15 = 259;
    }
    else
    {
      if (*(unsigned char *)(a6 + 32))
      {
        unint64_t v16 = *(const char **)(a6 + 8);
        if (*(unsigned char *)(a6 + 33) == 1)
        {
          uint64_t v17 = *(const char **)a6;
        }
        else
        {
          LOBYTE(v14) = 2;
          uint64_t v17 = (const char *)a6;
        }
        v33[0] = v17;
        v33[1] = v16;
        v33[2] = ".shift";
        LOBYTE(v34) = v14;
        HIBYTE(v34) = 3;
        goto LABEL_13;
      }
      __int16 v15 = 256;
    }
    __int16 v34 = v15;
LABEL_13:
    int v18 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v9, 8 * a5, 0);
    unsigned int v9 = sub_1CC2429AC(a2, (uint64_t)v9, (uint64_t)v18, (uint64_t)v33, 0);
  }
  if (v11 == a4) {
    return v9;
  }
  int v19 = *(unsigned __int8 *)(a6 + 32);
  if (v19 == 1)
  {
    v31[0] = ".trunc";
    __int16 v20 = 259;
    goto LABEL_19;
  }
  if (!*(unsigned char *)(a6 + 32))
  {
    __int16 v20 = 256;
LABEL_19:
    __int16 v32 = v20;
    goto LABEL_24;
  }
  uint64_t v21 = *(void *)(a6 + 8);
  if (*(unsigned char *)(a6 + 33) == 1)
  {
    uint64_t v22 = *(const char **)a6;
  }
  else
  {
    LOBYTE(v19) = 2;
    uint64_t v22 = (const char *)a6;
  }
  v31[0] = v22;
  v31[1] = v21;
  void v31[2] = ".trunc";
  LOBYTE(v32) = v19;
  HIBYTE(v32) = 3;
LABEL_24:
  if (*(void *)v9 != a4)
  {
    if (*((unsigned __int8 *)v9 + 16) <= 0x14u)
    {
      unsigned int v9 = (llvm::Instruction *)(*(uint64_t (**)(void, uint64_t, llvm::Instruction *, uint64_t))(**(void **)(a2 + 72) + 224))(*(void *)(a2 + 72), 38, v9, a4);
      if (v9) {
        BOOL v26 = *((unsigned __int8 *)v9 + 16) >= 0x1Cu;
      }
      else {
        BOOL v26 = 0;
      }
      if (v26)
      {
        (*(void (**)(void, llvm::Instruction *, void *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), v9, v31, *(void *)(a2 + 48), *(void *)(a2 + 56));
        uint64_t v28 = *(unsigned int *)(a2 + 8);
        if (v28)
        {
          uint64_t v29 = *(void *)a2;
          uint64_t v30 = v29 + 16 * v28;
          do
          {
            llvm::Instruction::setMetadata(v9, *(_DWORD *)v29, *(llvm::MDNode **)(v29 + 8));
            v29 += 16;
          }
          while (v29 != v30);
        }
      }
    }
    else
    {
      __int16 v34 = 257;
      unsigned int v9 = llvm::CastInst::Create(38, (uint64_t)v9, a4, v33, 0);
      (*(void (**)(void, llvm::Instruction *, void *, void, void))(**(void **)(a2 + 80) + 16))(*(void *)(a2 + 80), v9, v31, *(void *)(a2 + 48), *(void *)(a2 + 56));
      uint64_t v23 = *(unsigned int *)(a2 + 8);
      if (v23)
      {
        uint64_t v24 = *(void *)a2;
        uint64_t v25 = v24 + 16 * v23;
        do
        {
          llvm::Instruction::setMetadata(v9, *(_DWORD *)v24, *(llvm::MDNode **)(v24 + 8));
          v24 += 16;
        }
        while (v24 != v25);
      }
    }
  }
  return v9;
}

llvm::Instruction *sub_1CCEA3DA0(llvm::IRBuilderBase *a1, unsigned __int8 *a2, const llvm::APInt *a3, unsigned int a4, uint64_t a5)
{
  Select = (unsigned __int8 *)a3;
  v66[4] = *MEMORY[0x1E4F143B8];
  if (*(void *)a3) {
    BOOL v10 = (*(_DWORD *)(*(void *)a3 + 8) & 0xFE) == 18;
  }
  else {
    BOOL v10 = 0;
  }
  if (!v10)
  {
    uint64_t v11 = **((void **)a1 + 8);
    unsigned int v12 = *(llvm::ConstantInt **)(v11 + 1960);
    unint64_t v13 = *(unsigned int *)(v11 + 1968);
    LODWORD(v61) = v13 >> 8;
    if (v13 >> 8 > 0x40) {
      operator new[]();
    }
    if (v13 <= 0xFF) {
      LODWORD(v14) = 0;
    }
    else {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v13) + 63);
    }
    uint64_t v60 = (void *)(v14 & a4);
    __int16 v15 = (unsigned __int8 *)llvm::ConstantInt::get(v12, (llvm::LLVMContext *)&v60, a3);
    if (v61 >= 0x41 && v60) {
      MEMORY[0x1D25D9CB0](v60, 0x1000C8000313F17);
    }
    int v16 = *(unsigned __int8 *)(a5 + 32);
    if (v16 == 1)
    {
      uint64_t v60 = ".insert";
      __int16 v17 = 259;
    }
    else
    {
      if (*(unsigned char *)(a5 + 32))
      {
        uint64_t v27 = *(void *)(a5 + 8);
        if (*(unsigned char *)(a5 + 33) == 1)
        {
          uint64_t v28 = *(void **)a5;
        }
        else
        {
          LOBYTE(v16) = 2;
          uint64_t v28 = (void *)a5;
        }
        uint64_t v60 = v28;
        uint64_t v61 = v27;
        v62[0] = ".insert";
        LOBYTE(v63) = v16;
        HIBYTE(v63) = 3;
        return sub_1CB84478C((uint64_t)a1, a2, Select, v15, (uint64_t)&v60);
      }
      __int16 v17 = 256;
    }
    __int16 v63 = v17;
    return sub_1CB84478C((uint64_t)a1, a2, Select, v15, (uint64_t)&v60);
  }
  uint64_t v18 = *(void *)a2;
  int v19 = *(_DWORD *)(*(void *)a3 + 32);
  unsigned int v20 = *(_DWORD *)(*(void *)a2 + 32);
  if (v19 != v20)
  {
    uint64_t v64 = v66;
    uint64_t v65 = 0x800000000;
    if (v20 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unsigned int v21 = v19 + a4;
    if (v20)
    {
      unsigned int v22 = 0;
      do
      {
        if (v22 < a4 || v22 >= v21)
        {
          unint64_t v24 = v65;
          unint64_t v25 = HIDWORD(v65);
          int v23 = -1;
        }
        else
        {
          int v23 = v22 - a4;
          unint64_t v24 = v65;
          unint64_t v25 = HIDWORD(v65);
        }
        if (v24 >= v25) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v64[v24] = v23;
        unsigned int v26 = v65 + 1;
        LODWORD(v65) = v65 + 1;
        ++v22;
      }
      while (v22 != *(_DWORD *)(v18 + 32));
    }
    else
    {
      unsigned int v26 = v65;
    }
    uint64_t v29 = (llvm::Type *)v26;
    int v30 = *(unsigned __int8 *)(a5 + 32);
    if (v30 == 1)
    {
      uint64_t v60 = ".expand";
      __int16 v31 = 259;
    }
    else
    {
      if (*(unsigned char *)(a5 + 32))
      {
        uint64_t v32 = *(void *)(a5 + 8);
        if (*(unsigned char *)(a5 + 33) == 1)
        {
          uint64_t v33 = *(void **)a5;
        }
        else
        {
          LOBYTE(v30) = 2;
          uint64_t v33 = (void *)a5;
        }
        uint64_t v60 = v33;
        uint64_t v61 = v32;
        v62[0] = ".expand";
        LOBYTE(v63) = v30;
        HIBYTE(v63) = 3;
LABEL_43:
        __int16 v34 = llvm::PoisonValue::get(*(llvm::PoisonValue **)Select, (llvm::Type *)a2);
        unint64_t v35 = sub_1CB935A74((uint64_t)a1, (uint64_t)Select, (uint64_t)v34, v64, v29, (uint64_t)&v60);
        uint64_t v60 = v62;
        uint64_t v61 = 0x800000000;
        unint64_t v36 = (const llvm::APInt *)*(unsigned int *)(v18 + 32);
        if (v36 >= 9) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v36)
        {
          unint64_t v54 = v35;
          unsigned int v37 = 0;
          do
          {
            BOOL v39 = v37 >= a4 && v37 < v21;
            uint64_t v40 = **((void **)a1 + 8);
            char v41 = *(llvm::ConstantInt **)(v40 + 1888);
            unint64_t v42 = *(unsigned int *)(v40 + 1896);
            LODWORD(v57) = v42 >> 8;
            if (v42 >> 8 > 0x40) {
              operator new[]();
            }
            if (v42 <= 0xFF) {
              unint64_t v43 = 0;
            }
            else {
              unint64_t v43 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v42) + 63);
            }
            uint64_t v56 = (const char *)(v43 & v39);
            int v44 = llvm::ConstantInt::get(v41, (llvm::LLVMContext *)&v56, v36);
            if (v57 >= 0x41 && v56) {
              MEMORY[0x1D25D9CB0](v56, 0x1000C8000313F17);
            }
            if (v61 >= (unint64_t)HIDWORD(v61)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v60 + v61) = v44;
            unint64_t v45 = (v61 + 1);
            LODWORD(v61) = v61 + 1;
            ++v37;
          }
          while (v37 != *(_DWORD *)(v18 + 32));
          unint64_t v35 = v54;
        }
        else
        {
          unint64_t v45 = v61;
        }
        uint64_t v46 = (llvm::FixedVectorType ***)v60;
        Impl = llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)v60, (llvm::Type *)v45);
        if (!Impl)
        {
          llvm::FixedVectorType::get(**v46, (llvm::Type *)v45);
          Impl = (llvm::Value *)sub_1CC56A4DC(**v48 + 1288, (uint64_t)v48, v46, v45);
        }
        int v49 = *(unsigned __int8 *)(a5 + 32);
        if (v49 == 1)
        {
          uint64_t v56 = "blend";
          __int16 v50 = 259;
        }
        else
        {
          if (*(unsigned char *)(a5 + 32))
          {
            uint64_t v51 = *(void *)(a5 + 8);
            if (*(unsigned char *)(a5 + 33) == 1)
            {
              uint64_t v52 = *(const char **)a5;
            }
            else
            {
              LOBYTE(v49) = 2;
              uint64_t v52 = (const char *)a5;
            }
            uint64_t v56 = v52;
            uint64_t v57 = v51;
            BOOL v58 = "blend";
            LOBYTE(v59) = v49;
            HIBYTE(v59) = 3;
            goto LABEL_77;
          }
          __int16 v50 = 256;
        }
        __int16 v59 = v50;
LABEL_77:
        Select = (unsigned __int8 *)llvm::IRBuilderBase::CreateSelect(a1, Impl, v35, (llvm::Value *)a2, (const llvm::Twine *)&v56, 0);
        if (v60 != v62) {
          free(v60);
        }
        if (v64 != (_DWORD *)v66) {
          free(v64);
        }
        return (llvm::Instruction *)Select;
      }
      __int16 v31 = 256;
    }
    __int16 v63 = v31;
    goto LABEL_43;
  }
  return (llvm::Instruction *)Select;
}

void sub_1CCEA4388(void *a1, uint64_t a2)
{
  v35[4] = *MEMORY[0x1E4F143B8];
  uint64_t v27 = (char *)v31;
  uint64_t v28 = (char *)v31;
  int v30 = 0;
  uint64_t v32 = v35;
  unsigned int v34 = 4;
  uint64_t v29 = 0x100000004;
  v31[0] = a2;
  v35[0] = a2;
  unsigned int v3 = 1;
  do
  {
    uint64_t v4 = *((void *)v32 + --v3);
    unsigned int v33 = v3;
    int v5 = *(unsigned __int8 *)(v4 + 16);
    if ((!v4 || v5 != 60) && (!v4 || v5 != 61))
    {
      uint64_t v10 = *(void *)(v4 + 8);
      if (!v10) {
        continue;
      }
      while (1)
      {
        uint64_t v11 = *(void *)(v10 + 24);
        unsigned int v12 = v28;
        uint64_t v13 = HIDWORD(v29);
        if (v28 == v27)
        {
          if (HIDWORD(v29))
          {
            unint64_t v14 = 0;
            uint64_t v15 = 8 * HIDWORD(v29);
            int v16 = v28;
            while (*(void *)v16 != v11)
            {
              if (*(void *)v16 == -2) {
                unint64_t v14 = v16;
              }
              v16 += 8;
              v15 -= 8;
              if (!v15)
              {
                if (!v14) {
                  goto LABEL_20;
                }
                *(void *)unint64_t v14 = v11;
                --v30;
                goto LABEL_44;
              }
            }
            goto LABEL_46;
          }
LABEL_20:
          unsigned int v17 = v29;
          if (HIDWORD(v29) < v29)
          {
            ++HIDWORD(v29);
            *(void *)&v28[8 * v13] = v11;
            goto LABEL_44;
          }
        }
        else
        {
          unsigned int v17 = v29;
        }
        if (3 * v17 <= 4 * (HIDWORD(v29) - v30)) {
          break;
        }
        if (v17 - HIDWORD(v29) < v17 >> 3) {
          goto LABEL_53;
        }
LABEL_25:
        unsigned int v18 = v17 - 1;
        unsigned int v19 = (v17 - 1) & ((v11 >> 4) ^ (v11 >> 9));
        unsigned int v20 = &v12[8 * v19];
        uint64_t v21 = *(void *)v20;
        if (*(void *)v20 != -1)
        {
          unsigned int v22 = 0;
          int v23 = 1;
          while (v21 != v11)
          {
            if (v22) {
              BOOL v24 = 0;
            }
            else {
              BOOL v24 = v21 == -2;
            }
            if (v24) {
              unsigned int v22 = v20;
            }
            unsigned int v25 = v19 + v23++;
            unsigned int v19 = v25 & v18;
            unsigned int v20 = &v12[8 * (v25 & v18)];
            uint64_t v21 = *(void *)v20;
            if (*(void *)v20 == -1) {
              goto LABEL_37;
            }
          }
          goto LABEL_46;
        }
        unsigned int v22 = 0;
LABEL_37:
        if (v22) {
          unsigned int v26 = v22;
        }
        else {
          unsigned int v26 = v20;
        }
        if (*(void *)v26 == v11) {
          goto LABEL_46;
        }
        if (*(void *)v26 == -2) {
          --v30;
        }
        else {
          ++HIDWORD(v29);
        }
        *(void *)unsigned int v26 = v11;
LABEL_44:
        if (v33 >= (unint64_t)v34) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v32 + v33++) = v11;
LABEL_46:
        uint64_t v10 = *(void *)(v10 + 8);
        if (!v10)
        {
          unsigned int v3 = v33;
          goto LABEL_9;
        }
      }
      if (v17 >= 0x40) {
        v17 *= 2;
      }
      else {
        unsigned int v17 = 128;
      }
LABEL_53:
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v27, v17);
      unsigned int v17 = v29;
      unsigned int v12 = v28;
      goto LABEL_25;
    }
    unint64_t v6 = *(unsigned __int16 *)(v4 + 18);
    unsigned int v7 = __clz(1 << (v6 >> 1)) ^ 0x3F;
    uint64_t v8 = (1 << *(_WORD *)(a1[4] + 18)) | (a1[14] - a1[5]);
    unsigned int v9 = (63 - __clz(v8 & -v8));
    if (v9 < v7) {
      LOWORD(v7) = v9;
    }
    *(_WORD *)(v4 + 18) = v6 & 0xFF81 | (2 * v7);
LABEL_9:
    ;
  }
  while (v3);
  if (v32 != v35) {
    free(v32);
  }
  if (v28 != v27) {
    free(v28);
  }
}

uint64_t sub_1CCEA469C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 8;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      unsigned int v7 = 0;
      uint64_t result = 0;
      goto LABEL_5;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unsigned int v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      unsigned int v7 = (void *)(v3 + 8 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_5;
      }
    }
    uint64_t result = 0;
    if (v10) {
      unsigned int v7 = v10;
    }
  }
LABEL_5:
  *a3 = v7;
  return result;
}

uint64_t sub_1CCEA4748(uint64_t a1, int32x2_t ****a2)
{
  int v4 = *(unsigned int **)(a1 + 16);
  uint64_t v44 = 4;
  unint64_t v45 = 0;
  uint64_t v46 = a2;
  if (a2 != (int32x2_t ****)-8192 && a2 != (int32x2_t ****)-4096 && a2) {
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v44);
  }
  uint64_t v5 = v4[50];
  unint64_t v6 = *((void *)v4 + 24);
  unsigned int v7 = &v44;
  if (v5 >= v4[51])
  {
    uint64_t v40 = (unint64_t *)(v4 + 48);
    unint64_t v41 = v5 + 1;
    BOOL v42 = v6 + 24 * v5 > (unint64_t)&v44;
    if (v6 <= (unint64_t)&v44 && v42)
    {
      unint64_t v43 = (char *)&v44 - v6;
      sub_1CC0BD844(v4 + 48, v41);
      unint64_t v6 = *v40;
      unsigned int v7 = (uint64_t *)&v43[*v40];
    }
    else
    {
      sub_1CC0BD844(v4 + 48, v41);
      unint64_t v6 = *v40;
      unsigned int v7 = &v44;
    }
  }
  unsigned int v8 = v4[50];
  unsigned int v9 = (unint64_t *)(v6 + 24 * v8);
  *unsigned int v9 = 4;
  v9[1] = 0;
  uint64_t v10 = v7[2];
  v9[2] = v10;
  if (v10 != -8192 && v10 != -4096 && v10 != 0)
  {
    unint64_t v12 = *v7 & 0xFFFFFFFFFFFFFFF8;
    v9[1] = *(void *)v12;
    *(void *)unint64_t v12 = v9;
    *unsigned int v9 = v12 | 4;
    unsigned int v13 = (unint64_t *)v9[1];
    if (v13) {
      unint64_t *v13 = *v13 & 7 | (unint64_t)(v9 + 1);
    }
  }
  v4[50] = v8 + 1;
  if (v46 != (int32x2_t ****)-8192 && v46 != (int32x2_t ****)-4096 && v46)
  {
    unint64_t v14 = v44 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v44 & 0xFFFFFFFFFFFFFFF8) = v45;
    if (v45)
    {
      unint64_t *v45 = *v45 & 7 | v14;
    }
    else
    {
      uint64_t v15 = v46;
      int v16 = ***v46;
      unint64_t v17 = (unint64_t)v16[303];
      if (v17 <= v14)
      {
        uint64_t v18 = v16[305].u32[0];
        if (v17 + 16 * v18 > v14)
        {
          unsigned int v19 = v18 - 1;
          LODWORD(v20) = v19 & ((v46 >> 4) ^ (v46 >> 9));
          uint64_t v21 = (int32x2_t *****)(v17 + 16 * v20);
          unsigned int v22 = *v21;
          if (v46 == *v21)
          {
LABEL_24:
            *uint64_t v21 = (int32x2_t ****)-8192;
            v16[304] = vadd_s32(v16[304], (int32x2_t)0x1FFFFFFFFLL);
            uint64_t v15 = v46;
          }
          else
          {
            int v23 = 1;
            while (v22 != (int32x2_t ****)-4096)
            {
              int v24 = v20 + v23++;
              uint64_t v20 = v24 & v19;
              unsigned int v22 = *(int32x2_t *****)(v17 + 16 * v20);
              if (v46 == v22)
              {
                uint64_t v21 = (int32x2_t *****)(v17 + 16 * v20);
                goto LABEL_24;
              }
            }
          }
          *((unsigned char *)v15 + 17) &= ~1u;
        }
      }
    }
  }
  if (sub_1CBF698E4((uint64_t)a2)) {
    return llvm::Value::dropDroppableUsesIn(*(void *)(a1 + 152), (llvm::User *)a2);
  }
  uint64_t result = sub_1CC27D470((uint64_t)a2);
  if (result) {
    return llvm::Value::dropDroppableUsesIn(*(void *)(a1 + 152), (llvm::User *)a2);
  }
  uint64_t v27 = *(void *)(a1 + 112);
  if (v27 == *(void *)(a1 + 40))
  {
    uint64_t v28 = *(void *)(a1 + 120);
    if (v28 == *(void *)(a1 + 48))
    {
      uint64_t v29 = (uint64_t)*a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
      uint64_t v30 = v28 - v27;
      __int16 v31 = *(llvm::ConstantInt **)v29;
      unsigned int v32 = *(_DWORD *)(v29 + 8);
      LODWORD(v45) = v32 >> 8;
      if (v32 >> 8 > 0x40) {
        operator new[]();
      }
      if (v32 <= 0xFF) {
        unint64_t v33 = 0;
      }
      else {
        unint64_t v33 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v32) + 63);
      }
      uint64_t v44 = v33 & v30;
      unsigned int v34 = (llvm::ConstantInt *)llvm::ConstantInt::get(v31, (llvm::LLVMContext *)&v44, v26);
      if (v45 >= 0x41 && v44) {
        MEMORY[0x1D25D9CB0](v44, 0x1000C8000313F17);
      }
      uint64_t v35 = **(void **)(a1 + 152);
      unsigned int v36 = *(_DWORD *)(v35 + 8);
      if ((v36 & 0xFE) == 0x12) {
        unsigned int v36 = *(_DWORD *)(**(void **)(v35 + 16) + 8);
      }
      unsigned int v37 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(**(void **)(a1 + 240) + 1912), (llvm::Type *)(v36 >> 8));
      __int16 v38 = sub_1CCEA20C0((uint64_t *)a1, (uint64_t *)(a1 + 176), v37);
      BOOL v39 = (llvm::IRBuilderBase *)(a1 + 176);
      if (*((_DWORD *)*(a2 - 4) + 9) == 168) {
        return llvm::IRBuilderBase::CreateLifetimeStart(v39, (llvm::Value *)v38, v34);
      }
      else {
        return llvm::IRBuilderBase::CreateLifetimeEnd(v39, (llvm::Value *)v38, v34);
      }
    }
  }
  return result;
}

uint64_t sub_1CCEA4B20(uint64_t a1, llvm::Instruction *this)
{
  uint64_t v234 = *MEMORY[0x1E4F143B8];
  llvm::Instruction::getAAMetadata((uint64_t ***)this, &v226);
  int v4 = *((_DWORD *)this + 5);
  if ((v4 & 0x40000000) != 0) {
    uint64_t v5 = (char *)*((void *)this - 1);
  }
  else {
    uint64_t v5 = (char *)this - 32 * (v4 & 0x7FFFFFF);
  }
  unint64_t v6 = *(char **)(a1 + 144);
  uint64_t v7 = *(void *)(a1 + 32);
  unint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = (1 << *(_WORD *)(v7 + 18)) | (*(void *)(a1 + 112) - v8);
  unsigned __int8 v10 = 63 - __clz(v9 & -v9);
  if (!*(unsigned char *)(a1 + 136))
  {
    v165 = sub_1CCEA20C0((uint64_t *)a1, (uint64_t *)(a1 + 176), **(llvm::Value ***)(a1 + 152));
    uint64_t v166 = *((_DWORD *)this + 5) & 0x7FFFFFF;
    v167 = (char *)this - 32 * v166;
    if (v5 == v6)
    {
      uint64_t v173 = -v166;
      if (*(void *)v167)
      {
        v174 = (char *)this + 32 * v173;
        v176 = (void *)*((void *)v174 + 2);
        v175 = v174 + 16;
        void *v176 = *(v175 - 1);
        uint64_t v177 = *(v175 - 1);
        if (v177) {
          *(void *)(v177 + 16) = *v175;
        }
      }
      *(void *)v167 = v165;
      if (v165)
      {
        uint64_t v180 = *((void *)v165 + 1);
        v178 = v165 + 8;
        uint64_t v179 = v180;
        v181 = (char *)this + 32 * v173;
        *((void *)v181 + 1) = v180;
        if (v180) {
          *(void *)(v179 + 16) = v181 + 8;
        }
        *((void *)v181 + 2) = v178;
        void *v178 = v167;
      }
      sub_1CC52DDDC((uint64_t)this, v10 | 0x100);
    }
    else
    {
      v168 = (unsigned __int8 **)(v167 + 32);
      if (*((void *)v167 + 4))
      {
        **((void **)v167 + 6) = *((void *)v167 + 5);
        uint64_t v169 = *((void *)v167 + 5);
        if (v169) {
          *(void *)(v169 + 16) = *((void *)v167 + 6);
        }
      }
      *v168 = v165;
      if (v165)
      {
        uint64_t v172 = *((void *)v165 + 1);
        v170 = (unsigned __int8 ***)(v165 + 8);
        uint64_t v171 = v172;
        *((void *)v167 + 5) = v172;
        if (v172) {
          *(void *)(v171 + 16) = v167 + 40;
        }
        *((void *)v167 + 6) = v170;
        *v170 = v168;
      }
      sub_1CC52DE74((uint64_t)this, v10 | 0x100);
    }
    sub_1CCEA35C4(a1, *(void *)(a1 + 152));
    return 0;
  }
  if (*(void *)(a1 + 72)
    || *(void *)(a1 + 64)
    || *(void *)(a1 + 96) <= v8
    && *(void *)(a1 + 104) >= *(void *)(a1 + 48)
    && (uint64_t v11 = *(void *)(a1 + 128),
        uint64_t v12 = sub_1CB83544C(*(void *)a1, *(void *)(v7 + 64)),
        uint64_t v7 = *(void *)(a1 + 32),
        v11 == (unint64_t)(v12 + 7) >> 3)
    && ((int v13 = *(_DWORD *)(*(void *)(v7 + 64) + 8), (v13 & 0xFE) == 0x12)
     || *(_DWORD *)(*(void *)(v7 + 64) + 8) < 0x16u && ((0x20AC7Fu >> v13) & 1) != 0))
  {
    int v16 = 0;
  }
  else
  {
    if (*(void *)(a1 + 24) == v7)
    {
      uint64_t v14 = *(void *)(a1 + 120);
      if (v14 != *(void *)(a1 + 104))
      {
        v185 = llvm::ConstantInt::get(*((llvm::ConstantInt ***)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[8], v14 - *(void *)(a1 + 112), 0);
        LLVMSetArgOperand_0((uint64_t)this, 2u, (uint64_t)v185);
      }
      return 0;
    }
    int v16 = 1;
  }
  unint64_t v17 = *(unsigned int **)(a1 + 16);
  unint64_t v230 = 4;
  v231 = 0;
  v232 = (const char *)this;
  if (this != (llvm::Instruction *)-8192 && this != (llvm::Instruction *)-4096 && this) {
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v230);
  }
  uint64_t v18 = v17[50];
  unint64_t v19 = *((void *)v17 + 24);
  uint64_t v20 = &v230;
  if (v18 >= v17[51])
  {
    v182 = (unint64_t *)(v17 + 48);
    unint64_t v183 = v18 + 1;
    BOOL v184 = v19 + 24 * v18 > (unint64_t)&v230;
    if (v19 <= (unint64_t)&v230 && v184)
    {
      v211 = (char *)&v230 - v19;
      sub_1CC0BD844(v17 + 48, v183);
      unint64_t v19 = *v182;
      uint64_t v20 = (unint64_t *)&v211[*v182];
    }
    else
    {
      sub_1CC0BD844(v17 + 48, v183);
      unint64_t v19 = *v182;
      uint64_t v20 = &v230;
    }
  }
  unsigned int v21 = v17[50];
  unsigned int v22 = (unint64_t *)(v19 + 24 * v21);
  *unsigned int v22 = 4;
  v22[1] = 0;
  unint64_t v23 = v20[2];
  v22[2] = v23;
  if (v23 != -8192 && v23 != -4096)
  {
    if (v23)
    {
      unint64_t v24 = *v20 & 0xFFFFFFFFFFFFFFF8;
      v22[1] = *(void *)v24;
      *(void *)unint64_t v24 = v22;
      *unsigned int v22 = v24 | 4;
      unsigned int v25 = (unint64_t *)v22[1];
      if (v25) {
        unint64_t *v25 = *v25 & 7 | (unint64_t)(v22 + 1);
      }
    }
  }
  v17[50] = v21 + 1;
  if (v232 != (const char *)-8192 && v232 != (const char *)-4096 && v232)
  {
    unint64_t v26 = v230 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v230 & 0xFFFFFFFFFFFFFFF8) = v231;
    if (v231)
    {
      unint64_t *v231 = *v231 & 7 | v26;
    }
    else
    {
      uint64_t v27 = v232;
      uint64_t v28 = ***(int32x2_t ****)v232;
      unint64_t v29 = (unint64_t)v28[303];
      if (v29 <= v26)
      {
        uint64_t v30 = v28[305].u32[0];
        if (v29 + 16 * v30 > v26)
        {
          unsigned int v31 = v30 - 1;
          LODWORD(v32) = v31 & ((v232 >> 4) ^ (v232 >> 9));
          unint64_t v33 = (const char **)(v29 + 16 * v32);
          unsigned int v34 = *v33;
          if (v232 == *v33)
          {
LABEL_39:
            void *v33 = (const char *)-8192;
            v28[304] = vadd_s32(v28[304], (int32x2_t)0x1FFFFFFFFLL);
            uint64_t v27 = v232;
          }
          else
          {
            int v35 = 1;
            while (v34 != (const char *)-4096)
            {
              int v36 = v32 + v35++;
              uint64_t v32 = v36 & v31;
              unsigned int v34 = *(const char **)(v29 + 16 * v32);
              if (v232 == v34)
              {
                unint64_t v33 = (const char **)(v29 + 16 * v32);
                goto LABEL_39;
              }
            }
          }
          *((unsigned char *)v27 + 17) &= ~1u;
        }
      }
    }
  }
  unsigned int v37 = (llvm::CastInst *)*((void *)this + 4 * (v5 == v6) + -4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
  unint64_t v230 = 0;
  uint64_t v38 = llvm::Value::stripInBoundsOffsets((uint64_t)v37, (void (*)(uint64_t, uint64_t))nullsub_608, (uint64_t)v218);
  if (*(unsigned char *)(v38 + 16) == 59) {
    BOOL v39 = (const char *)v38;
  }
  else {
    BOOL v39 = 0;
  }
  unint64_t v230 = (unint64_t)v39;
  if (v39) {
    sub_1CCE93F38(*(void *)(a1 + 16) + 24, (uint64_t *)&v230);
  }
  uint64_t v40 = *(llvm::Value **)v37;
  unsigned int v41 = *(_DWORD *)(*(void *)v37 + 8);
  if ((v41 & 0xFE) == 0x12) {
    unsigned int v41 = *(_DWORD *)(**((void **)v40 + 2) + 8);
  }
  BOOL v42 = (llvm::Type *)(v41 >> 8);
  if (v41 < 0x100) {
    goto LABEL_58;
  }
  uint64_t v43 = *(unsigned int *)(*(void *)a1 + 240);
  uint64_t v44 = *(void *)(*(void *)a1 + 232);
  if (v43)
  {
    uint64_t v44 = *(void *)(*(void *)a1 + 232);
    unint64_t v45 = *(unsigned int *)(*(void *)a1 + 240);
    do
    {
      unint64_t v46 = v45 >> 1;
      uint64_t v47 = v44 + 16 * (v45 >> 1);
      unsigned int v48 = *(_DWORD *)(v47 + 8);
      uint64_t v49 = v47 + 16;
      v45 += ~(v45 >> 1);
      if (v48 < v42) {
        uint64_t v44 = v49;
      }
      else {
        unint64_t v45 = v46;
      }
    }
    while (v45);
  }
  if (v44 == *(void *)(*(void *)a1 + 232) + 16 * v43 || *(_DWORD *)(v44 + 8) != v42) {
LABEL_58:
  }
    uint64_t v44 = *(void *)(*(void *)a1 + 232);
  unsigned int v50 = *(_DWORD *)(v44 + 12);
  uint64_t v51 = *(void *)(a1 + 112) - *(void *)(a1 + 96);
  unsigned int v225 = v50;
  if (v50 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&__src);
  }
  if (v50) {
    unint64_t v52 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v50;
  }
  else {
    unint64_t v52 = 0;
  }
  __src = (void *)(v52 & v51);
  uint64_t v53 = *((void *)this + 8);
  v217 = v6;
  unsigned __int8 v214 = v10;
  if (v5 == v6)
  {
    if (v53)
    {
      if (*(_DWORD *)(v53 + 8) >= 4u)
      {
        unint64_t v54 = *(llvm::AttributeSetNode **)(v53 + 64);
        if (v54)
        {
LABEL_66:
          __int16 Alignment = llvm::AttributeSetNode::getAlignment(v54);
          char v56 = Alignment;
          int v57 = HIBYTE(Alignment);
          goto LABEL_71;
        }
      }
    }
  }
  else if (v53)
  {
    if (*(_DWORD *)(v53 + 8) >= 3u)
    {
      unint64_t v54 = *(llvm::AttributeSetNode **)(v53 + 56);
      if (v54) {
        goto LABEL_66;
      }
    }
  }
  int v57 = 0;
  char v56 = 0;
LABEL_71:
  llvm::APInt::zextOrTrunc((uint64_t *)&__src, 0x40u, (uint64_t)&v230);
  if (v231 >= 0x41) {
    BOOL v58 = (unint64_t *)v230;
  }
  else {
    BOOL v58 = &v230;
  }
  unint64_t v59 = *v58;
  uint64_t v60 = 1 << v56;
  if (!v57) {
    uint64_t v60 = 1;
  }
  char v61 = __clz((v59 | v60) & -(uint64_t)(v59 | v60));
  if (v231 >= 0x41 && v230) {
    MEMORY[0x1D25D9CB0]();
  }
  unsigned __int8 v62 = 63 - v61;
  if (v16)
  {
    uint64_t v130 = *(void *)a1;
    unsigned int v223 = v225;
    if (v225 > 0x40) {
      operator new[]();
    }
    v222 = __src;
    if ((*((unsigned char *)v37 + 23) & 0x10) == 0)
    {
      v141 = 0;
      v140 = &byte_1CFBCE98E;
LABEL_198:
      __int16 v233 = 773;
      unint64_t v230 = (unint64_t)v140;
      v231 = v141;
      v232 = ".";
      v143 = sub_1CCE92898((uint64_t *)(a1 + 176), v130, v37, (llvm::LLVMContext *)&v222, v40, (uint64_t)&v230);
      if (v223 >= 0x41 && v222) {
        MEMORY[0x1D25D9CB0](v222, 0x1000C8000313F17);
      }
      v144 = sub_1CCEA20C0((uint64_t *)a1, (uint64_t *)(a1 + 176), **(llvm::Value ***)(a1 + 152));
      v145 = llvm::ConstantInt::get(*((llvm::ConstantInt ***)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[8], *(void *)(a1 + 120) - *(void *)(a1 + 112), 0);
      if (v5 == v217) {
        unsigned __int8 v146 = 63 - v61;
      }
      else {
        unsigned __int8 v146 = v10;
      }
      if (v5 == v217) {
        unsigned __int8 v147 = v10;
      }
      else {
        unsigned __int8 v147 = 63 - v61;
      }
      if (v5 == v217) {
        v148 = (llvm::Value *)v144;
      }
      else {
        v148 = (llvm::Value *)v143;
      }
      if (v5 != v217) {
        v143 = v144;
      }
      __int16 v149 = v147 | 0x100;
      __int16 v150 = v146 | 0x100;
      uint64_t v151 = ((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[12];
      v152 = (llvm::APInt *)(v151 + 24);
      unsigned int v153 = *(_DWORD *)(v151 + 32);
      if (v153 > 0x40) {
        BOOL v154 = llvm::APInt::countLeadingZerosSlowCase(v152) == v153;
      }
      else {
        BOOL v154 = *(void *)v152 == 0;
      }
      int v155 = v154;
      MemTransferInst = llvm::IRBuilderBase::CreateMemTransferInst(a1 + 176, 194, v148, v149, (llvm::Value *)v143, v150, v145, v155 ^ 1u, 0, 0, 0, 0);
      v158 = v226;
      v160 = v228;
      v159 = v229;
      if (v226 || v227 || v228 || v229)
      {
        if (v227)
        {
          v161 = llvm::AAMDNodes::shiftTBAAStruct(v227, (llvm::MDNode *)(*(void *)(a1 + 112) - *(void *)(a1 + 96)), v156);
          v160 = v228;
          v159 = v229;
        }
        else
        {
          v161 = 0;
        }
        if (v158 || MemTransferInst[6] || (*((unsigned char *)MemTransferInst + 23) & 0x20) != 0) {
          llvm::Value::setMetadata(MemTransferInst, 1, v158);
        }
        if (v161 || MemTransferInst[6] || (*((unsigned char *)MemTransferInst + 23) & 0x20) != 0) {
          llvm::Value::setMetadata(MemTransferInst, 5, v161);
        }
        if (v160 || MemTransferInst[6] || (*((unsigned char *)MemTransferInst + 23) & 0x20) != 0) {
          llvm::Value::setMetadata(MemTransferInst, 7, v160);
        }
        if (v159 || MemTransferInst[6] || (*((unsigned char *)MemTransferInst + 23) & 0x20) != 0) {
          llvm::Value::setMetadata(MemTransferInst, 8, v159);
        }
      }
      uint64_t v15 = 0;
      goto LABEL_178;
    }
    uint64_t v131 = ***(void ***)v37;
    uint64_t v132 = *(void *)(v131 + 152);
    uint64_t v133 = *(unsigned int *)(v131 + 168);
    if (v133)
    {
      LODWORD(v134) = (v133 - 1) & ((v37 >> 4) ^ (v37 >> 9));
      v135 = (llvm::CastInst **)(v132 + 16 * v134);
      v136 = *v135;
      if (*v135 == v37)
      {
LABEL_197:
        v139 = v135[1];
        v142 = *(unint64_t **)v139;
        v140 = (char *)v139 + 16;
        v141 = v142;
        goto LABEL_198;
      }
      int v137 = 1;
      while (v136 != (llvm::CastInst *)-4096)
      {
        int v138 = v134 + v137++;
        uint64_t v134 = v138 & (v133 - 1);
        v136 = *(llvm::CastInst **)(v132 + 16 * v134);
        if (v136 == v37)
        {
          v135 = (llvm::CastInst **)(v132 + 16 * v134);
          goto LABEL_197;
        }
      }
    }
    v135 = (llvm::CastInst **)(v132 + 16 * v133);
    goto LABEL_197;
  }
  uint64_t v63 = *(void *)(a1 + 40);
  uint64_t v64 = *(void *)(a1 + 112);
  uint64_t v65 = *(void *)(a1 + 120);
  BOOL v66 = v64 == v63 && v65 == *(void *)(a1 + 48);
  uint64_t v67 = *(void *)(a1 + 72);
  if (v67)
  {
    unint64_t v164 = *(void *)(a1 + 88);
    unint64_t v212 = (v64 - v63) / v164;
    unint64_t v68 = (v65 - v63) / v164;
  }
  else
  {
    unint64_t v212 = 0;
    LODWORD(v68) = 0;
  }
  unint64_t v69 = *(llvm::IntegerType ***)(a1 + 64);
  if (v69)
  {
    uint64_t v70 = llvm::IntegerType::get(*v69, (llvm::LLVMContext *)(8 * (v65 - v64)));
    uint64_t v67 = *(void *)(a1 + 72);
  }
  else
  {
    uint64_t v70 = 0;
  }
  if (v67) {
    char v71 = v66;
  }
  else {
    char v71 = 1;
  }
  v216 = v5;
  if (v71)
  {
    if (*(void *)(a1 + 64)) {
      int v72 = v66;
    }
    else {
      int v72 = 1;
    }
    uint64_t v73 = (llvm::PointerType *)v70;
    if (v72 == 1) {
      uint64_t v73 = *(llvm::PointerType **)(a1 + 56);
    }
  }
  else
  {
    v186 = (llvm::Type *)(v68 - v212);
    uint64_t v73 = *(llvm::PointerType **)(v67 + 24);
    if (v186 != 1)
    {
      llvm::FixedVectorType::get(*(llvm::FixedVectorType **)(v67 + 24), v186);
      uint64_t v73 = v187;
    }
  }
  uint64_t v74 = (llvm::Value *)llvm::PointerType::get(v73, v42);
  uint64_t v75 = *(void *)a1;
  unsigned int v221 = v225;
  v213 = (uint64_t *)(a1 + 176);
  if (v225 > 0x40) {
    operator new[]();
  }
  v220 = __src;
  if ((*((unsigned char *)v37 + 23) & 0x10) == 0)
  {
    uint64_t v86 = 0;
    uint64_t v85 = &byte_1CFBCE98E;
    goto LABEL_102;
  }
  uint64_t v76 = ***(void ***)v37;
  uint64_t v77 = *(void *)(v76 + 152);
  uint64_t v78 = *(unsigned int *)(v76 + 168);
  if (!v78) {
    goto LABEL_236;
  }
  LODWORD(v79) = (v78 - 1) & ((v37 >> 4) ^ (v37 >> 9));
  uint64_t v80 = (llvm::CastInst **)(v77 + 16 * v79);
  uint64_t v81 = *v80;
  if (*v80 != v37)
  {
    int v82 = 1;
    while (v81 != (llvm::CastInst *)-4096)
    {
      int v83 = v79 + v82++;
      uint64_t v79 = v83 & (v78 - 1);
      uint64_t v81 = *(llvm::CastInst **)(v77 + 16 * v79);
      if (v81 == v37)
      {
        uint64_t v80 = (llvm::CastInst **)(v77 + 16 * v79);
        goto LABEL_101;
      }
    }
LABEL_236:
    uint64_t v80 = (llvm::CastInst **)(v77 + 16 * v78);
  }
LABEL_101:
  unint64_t v84 = v80[1];
  uint64_t v87 = *(unint64_t **)v84;
  uint64_t v85 = (char *)v84 + 16;
  uint64_t v86 = v87;
LABEL_102:
  __int16 v233 = 773;
  unint64_t v230 = (unint64_t)v85;
  v231 = v86;
  v232 = ".";
  uint64_t v88 = sub_1CCE92898((uint64_t *)(a1 + 176), v75, v37, (llvm::LLVMContext *)&v220, v74, (uint64_t)&v230);
  if (v221 >= 0x41 && v220) {
    MEMORY[0x1D25D9CB0](v220, 0x1000C8000313F17);
  }
  uint64_t v89 = *(void *)(a1 + 32);
  if (v216 == v217)
  {
    __int16 v90 = v214 | 0x100;
    uint64_t v91 = *(unsigned __int8 **)(a1 + 32);
    char v92 = v62;
    goto LABEL_105;
  }
  __int16 v90 = v62 | 0x100;
  if (*(void *)(a1 + 72)) {
    char v128 = v66;
  }
  else {
    char v128 = 1;
  }
  if ((v128 & 1) == 0)
  {
    v201 = *(llvm::Type **)(v89 + 64);
    __int16 v202 = *(_WORD *)(v89 + 18) & 0x3F | 0x100;
    unint64_t v230 = (unint64_t)"load";
    __int16 v233 = 259;
    v203 = (unsigned __int8 *)sub_1CC241384(v213, v201, v89, v202, 0, (uint64_t)&v230);
    unint64_t v230 = (unint64_t)"vec";
    __int16 v233 = 259;
    v204 = sub_1CCEA3800((uint64_t)v213, v203, (const llvm::APInt *)v212, v68, (uint64_t)&v230);
LABEL_298:
    uint64_t v100 = v204;
    goto LABEL_148;
  }
  if (*(void *)(a1 + 64)) {
    char v129 = v66;
  }
  else {
    char v129 = 1;
  }
  if ((v129 & 1) == 0)
  {
    v205 = *(llvm::Type **)(v89 + 64);
    __int16 v206 = *(_WORD *)(v89 + 18) & 0x3F | 0x100;
    unint64_t v230 = (unint64_t)"load";
    __int16 v233 = 259;
    v207 = sub_1CC241384(v213, v205, v89, v206, 0, (uint64_t)&v230);
    v208 = (uint64_t *)sub_1CCEA2284(*(void *)(*(void *)a1 + 232), *(_DWORD *)(*(void *)a1 + 240), v213, (uint64_t)v207, *(void *)(a1 + 64));
    unint64_t v209 = *(void *)(a1 + 112) - *(void *)(a1 + 40);
    v210 = *(unsigned char **)a1;
    unint64_t v230 = (unint64_t)"extract";
    __int16 v233 = 259;
    v204 = sub_1CCEA3AC8(v210, (uint64_t)v213, v208, v70, v209, (uint64_t)&v230);
    goto LABEL_298;
  }
  uint64_t v91 = v88;
  uint64_t v88 = *(unsigned __int8 **)(a1 + 32);
  char v92 = v214;
LABEL_105:
  uint64_t v93 = ((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[12];
  long long v94 = (llvm::APInt *)(v93 + 24);
  unsigned int v95 = *(_DWORD *)(v93 + 32);
  v215 = v91;
  if (v95 > 0x40) {
    BOOL v96 = llvm::APInt::countLeadingZerosSlowCase(v94) == v95;
  }
  else {
    BOOL v96 = *(void *)v94 == 0;
  }
  __int16 v97 = v96;
  __int16 v98 = v97 ^ 1;
  v218[0] = "copyload";
  __int16 v219 = 259;
  uint64_t v99 = operator new(0x60uLL);
  v99[13] = v99[13] & 0x38000000 | 1;
  uint64_t v100 = (llvm::Instruction *)(v99 + 8);
  *(void *)uint64_t v99 = 0;
  *((void *)v99 + 1) = 0;
  *((void *)v99 + 2) = 0;
  *((void *)v99 + 3) = v99 + 8;
  __int16 v233 = 257;
  llvm::LoadInst::LoadInst((llvm::Value *)(v99 + 8), (uint64_t)v73, (uint64_t)v88, (const char **)&v230, v98, v92, 0);
  (*(void (**)(void, _DWORD *, void *, void, void))(**(void **)(a1 + 256) + 16))(*(void *)(a1 + 256), v99 + 8, v218, *(void *)(a1 + 224), *(void *)(a1 + 232));
  uint64_t v101 = *(unsigned int *)(a1 + 184);
  if (v101)
  {
    uint64_t v162 = *(void *)(a1 + 176);
    uint64_t v163 = v162 + 16 * v101;
    do
    {
      llvm::Instruction::setMetadata(v100, *(_DWORD *)v162, *(llvm::MDNode **)(v162 + 8));
      v162 += 16;
    }
    while (v162 != v163);
  }
  unint64_t v230 = 0x190000000ALL;
  llvm::Instruction::copyMetadata((uint64_t)v100, (uint64_t)this, (int *)&v230, 2);
  __int16 v103 = v226;
  __int16 v105 = v228;
  long long v104 = v229;
  if (v226) {
    BOOL v106 = 0;
  }
  else {
    BOOL v106 = v227 == 0;
  }
  if (!v106 || v228 != 0 || v229 != 0)
  {
    if (v227)
    {
      uint64_t v109 = llvm::AAMDNodes::shiftTBAAStruct(v227, (llvm::MDNode *)(*(void *)(a1 + 112) - *(void *)(a1 + 96)), v102);
      __int16 v105 = v228;
      long long v104 = v229;
    }
    else
    {
      uint64_t v109 = 0;
    }
    if (v103 || *((void *)v99 + 10) || (*((unsigned char *)v99 + 55) & 0x20) != 0) {
      llvm::Value::setMetadata((uint64_t ***)v100, 1, v103);
    }
    if (v109 || *((void *)v99 + 10) || (*((unsigned char *)v99 + 55) & 0x20) != 0) {
      llvm::Value::setMetadata((uint64_t ***)v100, 5, v109);
    }
    if (v105 || *((void *)v99 + 10) || (*((unsigned char *)v99 + 55) & 0x20) != 0) {
      llvm::Value::setMetadata((uint64_t ***)v100, 7, v105);
    }
    if (v104 || *((void *)v99 + 10) || (*((unsigned char *)v99 + 55) & 0x20) != 0) {
      llvm::Value::setMetadata((uint64_t ***)v100, 8, v104);
    }
  }
  if (*(void *)(a1 + 72)) {
    char v110 = v66;
  }
  else {
    char v110 = 1;
  }
  if ((v110 & 1) == 0 && v216 == v217)
  {
    uint64_t v188 = *(void *)(a1 + 32);
    v189 = *(llvm::Type **)(v188 + 64);
    __int16 v190 = *(_WORD *)(v188 + 18) & 0x3F | 0x100;
    unint64_t v230 = (unint64_t)"oldload";
    __int16 v233 = 259;
    v191 = (unsigned __int8 *)sub_1CC241384(v213, v189, v188, v190, 0, (uint64_t)&v230);
    unint64_t v230 = (unint64_t)"vec";
    __int16 v233 = 259;
    v192 = sub_1CCEA3DA0((llvm::IRBuilderBase *)v213, v191, v100, v212, (uint64_t)&v230);
  }
  else
  {
    if (*(void *)(a1 + 64)) {
      char v111 = v66;
    }
    else {
      char v111 = 1;
    }
    if ((v111 & 1) != 0 || v216 != v217) {
      goto LABEL_147;
    }
    uint64_t v193 = *(void *)(a1 + 32);
    v194 = *(llvm::Type **)(v193 + 64);
    __int16 v195 = *(_WORD *)(v193 + 18) & 0x3F | 0x100;
    unint64_t v230 = (unint64_t)"oldload";
    __int16 v233 = 259;
    v196 = sub_1CC241384(v213, v194, v193, v195, 0, (uint64_t)&v230);
    v197 = sub_1CCEA2284(*(void *)(*(void *)a1 + 232), *(_DWORD *)(*(void *)a1 + 240), v213, (uint64_t)v196, *(void *)(a1 + 64));
    unint64_t v198 = *(void *)(a1 + 112) - *(void *)(a1 + 40);
    v199 = *(unsigned char **)a1;
    unint64_t v230 = (unint64_t)"insert";
    __int16 v233 = 259;
    v200 = sub_1CCEA2F70(v199, (uint64_t)v213, (llvm::ConstantInt ***)v197, (uint64_t)v100, v198, (uint64_t)&v230);
    v192 = (llvm::Instruction *)sub_1CCEA2284(*(void *)(*(void *)a1 + 232), *(_DWORD *)(*(void *)a1 + 240), v213, (uint64_t)v200, *(void *)(a1 + 56));
  }
  uint64_t v100 = v192;
LABEL_147:
  uint64_t v88 = v215;
LABEL_148:
  uint64_t v112 = ((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[12];
  v113 = (llvm::APInt *)(v112 + 24);
  unsigned int v114 = *(_DWORD *)(v112 + 32);
  if (v114 > 0x40) {
    BOOL v115 = llvm::APInt::countLeadingZerosSlowCase(v113) == v114;
  }
  else {
    BOOL v115 = *(void *)v113 == 0;
  }
  __int16 v116 = v115;
  v117 = sub_1CC27BF8C(v213, (uint64_t)v100, (uint64_t)v88, v90, v116 ^ 1u);
  unint64_t v230 = 0x190000000ALL;
  llvm::Instruction::copyMetadata((uint64_t)v117, (uint64_t)this, (int *)&v230, 2);
  v119 = v226;
  v121 = v228;
  v120 = v229;
  if (v226 || v227 || v228 || v229)
  {
    if (v227)
    {
      v122 = llvm::AAMDNodes::shiftTBAAStruct(v227, (llvm::MDNode *)(*(void *)(a1 + 112) - *(void *)(a1 + 96)), v118);
      v121 = v228;
      v120 = v229;
    }
    else
    {
      v122 = 0;
    }
    if (v119 || *((void *)v117 + 6) || (*((unsigned char *)v117 + 23) & 0x20) != 0) {
      llvm::Value::setMetadata((uint64_t ***)v117, 1, v119);
    }
    if (v122 || *((void *)v117 + 6) || (*((unsigned char *)v117 + 23) & 0x20) != 0) {
      llvm::Value::setMetadata((uint64_t ***)v117, 5, v122);
    }
    if (v121 || *((void *)v117 + 6) || (*((unsigned char *)v117 + 23) & 0x20) != 0) {
      llvm::Value::setMetadata((uint64_t ***)v117, 7, v121);
    }
    if (v120 || *((void *)v117 + 6) || (*((unsigned char *)v117 + 23) & 0x20) != 0) {
      llvm::Value::setMetadata((uint64_t ***)v117, 8, v120);
    }
  }
  uint64_t v123 = ((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[12];
  v124 = (llvm::APInt *)(v123 + 24);
  unsigned int v125 = *(_DWORD *)(v123 + 32);
  if (v125 > 0x40) {
    BOOL v126 = llvm::APInt::countLeadingZerosSlowCase(v124) == v125;
  }
  else {
    BOOL v126 = *(void *)v124 == 0;
  }
  uint64_t v15 = v126;
LABEL_178:
  if (v225 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  return v15;
}

llvm::Instruction *sub_1CCEA5D40(uint64_t a1, llvm::IntegerType ***a2, int a3)
{
  uint64_t v3 = (uint64_t)a2;
  if (a3 != 1)
  {
    uint64_t v7 = (llvm::Constant *)llvm::IntegerType::get(**a2, (llvm::LLVMContext *)(8 * a3));
    uint64_t v8 = a1 + 176;
    v22[0] = "zext";
    __int16 v23 = 259;
    uint64_t v9 = (unsigned __int8 *)v3;
    if (*(llvm::Constant **)v3 != v7)
    {
      if (*(unsigned __int8 *)(v3 + 16) <= 0x14u)
      {
        uint64_t v9 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, uint64_t, llvm::Constant *))(**(void **)(a1 + 248) + 224))(*(void *)(a1 + 248), 39, v3, v7);
        if (v9) {
          BOOL v19 = v9[16] >= 0x1Cu;
        }
        else {
          BOOL v19 = 0;
        }
        if (v19) {
          uint64_t v9 = (unsigned __int8 *)sub_1CB844E0C((uint64_t *)(a1 + 176), (llvm::Instruction *)v9, (uint64_t)v22);
        }
      }
      else
      {
        __int16 v25 = 257;
        uint64_t v9 = (unsigned __int8 *)llvm::CastInst::Create(39, v3, (uint64_t)v7, v24, 0);
        (*(void (**)(void, unsigned __int8 *, void *, void, void))(**(void **)(a1 + 256) + 16))(*(void *)(a1 + 256), v9, v22, *(void *)(a1 + 224), *(void *)(a1 + 232));
        uint64_t v10 = *(unsigned int *)(a1 + 184);
        if (v10)
        {
          uint64_t v20 = *(void *)(a1 + 176);
          uint64_t v21 = v20 + 16 * v10;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v9, *(_DWORD *)v20, *(llvm::MDNode **)(v20 + 8));
            v20 += 16;
          }
          while (v20 != v21);
        }
      }
    }
    AllOnesValue = (llvm::ConstantExpr *)llvm::Constant::getAllOnesValue(v7, v5, v6);
    uint64_t v14 = (llvm::detail::IEEEFloat *)llvm::Constant::getAllOnesValue(*(llvm::Constant **)v3, v12, v13);
    uint64_t v15 = sub_1CC56C0C0((llvm *)0x27, v14, v7, 0);
    UDiv = llvm::ConstantExpr::getUDiv(AllOnesValue, v15, 0, v16);
    v24[0] = "isplat";
    __int16 v25 = 259;
    return sub_1CC09A1EC(v8, (uint64_t)v9, (uint64_t)UDiv, (uint64_t)v24, 0, 0);
  }
  return (llvm::Instruction *)v3;
}

uint64_t sub_1CCEA5F28(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 8;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
LABEL_17:
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 8 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_17;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

void sub_1CCEA5FCC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    int v4 = (llvm::SmallPtrSetImplBase *)(a1 + 80);
    while (1)
    {
      uint64_t v5 = *(void *)(v2 + 24);
      uint64_t v6 = *(void *)(a1 + 88);
      uint64_t v7 = *(unsigned int *)(a1 + 100);
      if (v6 == *(void *)(a1 + 80))
      {
        if (v7)
        {
          uint64_t v8 = 0;
          uint64_t v9 = 8 * v7;
          int v10 = *(void **)(a1 + 88);
          while (*v10 != v5)
          {
            if (*v10 == -2) {
              uint64_t v8 = v10;
            }
            ++v10;
            v9 -= 8;
            if (!v9)
            {
              if (!v8) {
                goto LABEL_11;
              }
              *uint64_t v8 = v5;
              --*(_DWORD *)(a1 + 104);
              goto LABEL_35;
            }
          }
          goto LABEL_37;
        }
LABEL_11:
        unsigned int v11 = *(_DWORD *)(a1 + 96);
        if (v7 < v11)
        {
          *(_DWORD *)(a1 + 100) = v7 + 1;
          *(void *)(v6 + 8 * v7) = v5;
          goto LABEL_35;
        }
      }
      else
      {
        unsigned int v11 = *(_DWORD *)(a1 + 96);
      }
      if (3 * v11 <= 4 * ((int)v7 - *(_DWORD *)(a1 + 104))) {
        break;
      }
      if (v11 - v7 < v11 >> 3) {
        goto LABEL_44;
      }
LABEL_16:
      unsigned int v12 = v11 - 1;
      unsigned int v13 = (v11 - 1) & ((v5 >> 4) ^ (v5 >> 9));
      uint64_t v14 = (void *)(v6 + 8 * v13);
      uint64_t v15 = *v14;
      if (*v14 != -1)
      {
        int v16 = 0;
        int v17 = 1;
        while (v15 != v5)
        {
          if (v16) {
            BOOL v18 = 0;
          }
          else {
            BOOL v18 = v15 == -2;
          }
          if (v18) {
            int v16 = v14;
          }
          unsigned int v19 = v13 + v17++;
          unsigned int v13 = v19 & v12;
          uint64_t v14 = (void *)(v6 + 8 * (v19 & v12));
          uint64_t v15 = *v14;
          if (*v14 == -1) {
            goto LABEL_28;
          }
        }
        goto LABEL_37;
      }
      int v16 = 0;
LABEL_28:
      if (v16) {
        uint64_t v20 = v16;
      }
      else {
        uint64_t v20 = v14;
      }
      if (*v20 == v5) {
        goto LABEL_37;
      }
      if (*v20 == -2) {
        --*(_DWORD *)(a1 + 104);
      }
      else {
        ++*(_DWORD *)(a1 + 100);
      }
      void *v20 = v5;
LABEL_35:
      unint64_t v21 = *(unsigned int *)(a1 + 8);
      if (v21 >= *(unsigned int *)(a1 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a1 + 8 * v21) = v2;
      ++*(_DWORD *)(a1 + 8);
LABEL_37:
      uint64_t v2 = *(void *)(v2 + 8);
      if (!v2) {
        return;
      }
    }
    if (v11 >= 0x40) {
      v11 *= 2;
    }
    else {
      unsigned int v11 = 128;
    }
LABEL_44:
    llvm::SmallPtrSetImplBase::Grow(v4, v11);
    unsigned int v11 = *(_DWORD *)(a1 + 96);
    uint64_t v6 = *(void *)(a1 + 88);
    goto LABEL_16;
  }
}

llvm::Instruction *sub_1CCEA61C0(llvm::Instruction *result, uint64_t a2, const llvm::APInt *a3, uint64_t a4)
{
  uint64_t v7 = result;
  if ((*(_DWORD *)(a2 + 8) & 0xFE) != 0x12)
  {
    unsigned int v8 = *(_DWORD *)(a2 + 8);
    if (v8 > 0x15) {
      return result;
    }
    if (((1 << v8) & 0x20AC7F) == 0)
    {
      if (v8 != 16)
      {
        if (v8 != 17) {
          return result;
        }
        int v57 = (const char *)*(unsigned int *)(a2 + 32);
        if (!*(_DWORD *)(a2 + 32)) {
          return result;
        }
        BOOL v58 = 0;
        unsigned int v59 = *((_DWORD *)result + 4);
        while (1)
        {
          if (v59 >= *((_DWORD *)v7 + 5)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*((void *)v7 + 1) + 4 * v59) = v58;
          ++*((_DWORD *)v7 + 4);
          uint64_t v60 = **(void **)(*(void *)v7 + 64);
          char v61 = *(llvm::ConstantInt **)(v60 + 1960);
          unint64_t v62 = *(unsigned int *)(v60 + 1968);
          LODWORD(v97) = v62 >> 8;
          if (v62 >> 8 > 0x40) {
            operator new[]();
          }
          if (v62 <= 0xFF) {
            unint64_t v63 = 0;
          }
          else {
            unint64_t v63 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v62) + 63);
          }
          BOOL v96 = (const char *)(v63 & (unint64_t)v58);
          uint64_t v64 = llvm::ConstantInt::get(v61, (llvm::LLVMContext *)&v96, a3);
          if (v97 >= 0x41 && v96) {
            MEMORY[0x1D25D9CB0](v96, 0x1000C8000313F17);
          }
          unint64_t v65 = *((unsigned int *)v7 + 12);
          if (v65 >= *((unsigned int *)v7 + 13)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*((void *)v7 + 5) + 8 * v65) = v64;
          ++*((_DWORD *)v7 + 12);
          uint64_t v66 = *(void *)(a2 + 24);
          int v67 = *(unsigned __int8 *)(a4 + 32);
          if (v67 == 1) {
            break;
          }
          if (*(unsigned char *)(a4 + 32))
          {
            char v71 = *(const char **)a4;
            int v72 = *(const char **)(a4 + 8);
            char v68 = 2;
            if (*(unsigned char *)(a4 + 33) != 1)
            {
              LOBYTE(v67) = 2;
              char v71 = (const char *)a4;
            }
            char v92 = v71;
            uint64_t v93 = v72;
            long long v94 = ".";
            LOBYTE(v95) = v67;
            HIBYTE(v95) = 3;
            uint64_t v70 = (const char *)&v92;
            goto LABEL_88;
          }
          char v68 = 0;
          __int16 v95 = 256;
          char v69 = 1;
LABEL_89:
          LOBYTE(v99) = v68;
          HIBYTE(v99) = v69;
          uint64_t result = (llvm::Instruction *)sub_1CCEA61C0(v7, v66, a3, &v96);
          --*((_DWORD *)v7 + 12);
          unsigned int v59 = *((_DWORD *)v7 + 4) - 1;
          *((_DWORD *)v7 + 4) = v59;
          if (v57 == ++v58) {
            return result;
          }
        }
        char v92 = ".";
        __int16 v95 = 259;
        char v68 = 3;
        uint64_t v70 = ".";
        char v71 = v93;
LABEL_88:
        BOOL v96 = v70;
        __int16 v97 = v71;
        char v69 = 8;
        __int16 v98 = v58;
        goto LABEL_89;
      }
      uint64_t v75 = (const char *)*(unsigned int *)(a2 + 12);
      if (!v75) {
        return result;
      }
      uint64_t v76 = 0;
      unsigned int v77 = *((_DWORD *)result + 4);
      while (1)
      {
        if (v77 >= *((_DWORD *)v7 + 5)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*((void *)v7 + 1) + 4 * v77) = v76;
        ++*((_DWORD *)v7 + 4);
        uint64_t v78 = **(void **)(*(void *)v7 + 64);
        uint64_t v79 = *(llvm::ConstantInt **)(v78 + 1960);
        unint64_t v80 = *(unsigned int *)(v78 + 1968);
        LODWORD(v97) = v80 >> 8;
        if (v80 >> 8 > 0x40) {
          operator new[]();
        }
        if (v80 <= 0xFF) {
          unint64_t v81 = 0;
        }
        else {
          unint64_t v81 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v80) + 63);
        }
        BOOL v96 = (const char *)(v81 & (unint64_t)v76);
        int v82 = llvm::ConstantInt::get(v79, (llvm::LLVMContext *)&v96, a3);
        if (v97 >= 0x41 && v96) {
          MEMORY[0x1D25D9CB0](v96, 0x1000C8000313F17);
        }
        unint64_t v83 = *((unsigned int *)v7 + 12);
        if (v83 >= *((unsigned int *)v7 + 13)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*((void *)v7 + 5) + 8 * v83) = v82;
        ++*((_DWORD *)v7 + 12);
        uint64_t v84 = *(void *)(*(void *)(a2 + 16) + 8 * (void)v76);
        int v85 = *(unsigned __int8 *)(a4 + 32);
        if (v85 == 1) {
          break;
        }
        if (*(unsigned char *)(a4 + 32))
        {
          uint64_t v89 = *(const char **)a4;
          __int16 v90 = *(const char **)(a4 + 8);
          char v86 = 2;
          if (*(unsigned char *)(a4 + 33) != 1)
          {
            LOBYTE(v85) = 2;
            uint64_t v89 = (const char *)a4;
          }
          char v92 = v89;
          uint64_t v93 = v90;
          long long v94 = ".";
          LOBYTE(v95) = v85;
          HIBYTE(v95) = 3;
          uint64_t v88 = (const char *)&v92;
          goto LABEL_118;
        }
        char v86 = 0;
        __int16 v95 = 256;
        char v87 = 1;
LABEL_119:
        LOBYTE(v99) = v86;
        HIBYTE(v99) = v87;
        uint64_t result = (llvm::Instruction *)sub_1CCEA61C0(v7, v84, a3, &v96);
        --*((_DWORD *)v7 + 12);
        unsigned int v77 = *((_DWORD *)v7 + 4) - 1;
        *((_DWORD *)v7 + 4) = v77;
        if (v75 == ++v76) {
          return result;
        }
      }
      char v92 = ".";
      __int16 v95 = 259;
      char v86 = 3;
      uint64_t v88 = ".";
      uint64_t v89 = v93;
LABEL_118:
      BOOL v96 = v88;
      __int16 v97 = v89;
      char v87 = 8;
      __int16 v98 = v76;
      goto LABEL_119;
    }
  }
  uint64_t v9 = (1 << *((unsigned char *)result + 104)) | llvm::DataLayout::getIndexedOffsetInType(*((llvm::DataLayout **)result + 14), *((void *)result + 12), *((const llvm::Value ***)result + 5), *((unsigned int *)result + 12));
  char v10 = __clz(v9 & -v9);
  unsigned int v11 = *(uint64_t **)v7;
  unsigned int v13 = (uint64_t *)*((void *)v7 + 11);
  uint64_t v12 = *((void *)v7 + 12);
  uint64_t v14 = (uint64_t *)*((void *)v7 + 5);
  uint64_t v15 = *((unsigned int *)v7 + 12);
  int v16 = *(unsigned __int8 *)(a4 + 32);
  if (v16 == 1)
  {
    BOOL v96 = ".gep";
    __int16 v17 = 259;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(a4 + 32))
  {
    __int16 v17 = 256;
LABEL_8:
    __int16 v99 = v17;
    goto LABEL_13;
  }
  BOOL v18 = *(const char **)(a4 + 8);
  if (*(unsigned char *)(a4 + 33) == 1)
  {
    unsigned int v19 = *(const char **)a4;
  }
  else
  {
    LOBYTE(v16) = 2;
    unsigned int v19 = (const char *)a4;
  }
  BOOL v96 = v19;
  __int16 v97 = v18;
  __int16 v98 = ".gep";
  LOBYTE(v99) = v16;
  HIBYTE(v99) = 3;
LABEL_13:
  uint64_t v20 = sub_1CC57EEA0(v11, v12, v13, v14, v15, (uint64_t)&v96);
  unint64_t v21 = *(uint64_t **)v7;
  int v22 = *(unsigned __int8 *)(a4 + 32);
  if (v22 == 1)
  {
    char v92 = ".load";
    __int16 v23 = 259;
    goto LABEL_17;
  }
  if (!*(unsigned char *)(a4 + 32))
  {
    __int16 v23 = 256;
LABEL_17:
    __int16 v95 = v23;
    goto LABEL_22;
  }
  unint64_t v24 = *(const char **)(a4 + 8);
  if (*(unsigned char *)(a4 + 33) == 1)
  {
    __int16 v25 = *(const char **)a4;
  }
  else
  {
    LOBYTE(v22) = 2;
    __int16 v25 = (const char *)a4;
  }
  char v92 = v25;
  uint64_t v93 = v24;
  long long v94 = ".load";
  LOBYTE(v95) = v22;
  HIBYTE(v95) = 3;
LABEL_22:
  char v26 = 63 - v10;
  uint64_t v27 = operator new(0x60uLL);
  v27[13] = v27[13] & 0x38000000 | 1;
  uint64_t v28 = (llvm::Instruction *)(v27 + 8);
  *(void *)uint64_t v27 = 0;
  *((void *)v27 + 1) = 0;
  *((void *)v27 + 2) = 0;
  *((void *)v27 + 3) = v27 + 8;
  __int16 v99 = 257;
  llvm::LoadInst::LoadInst((llvm::Value *)(v27 + 8), a2, v20, &v96, 0, v26, 0);
  (*(void (**)(uint64_t, _DWORD *, const char **, uint64_t, uint64_t))(*(void *)v21[10] + 16))(v21[10], v27 + 8, &v92, v21[6], v21[7]);
  uint64_t v30 = *((unsigned int *)v21 + 2);
  if (v30)
  {
    uint64_t v73 = *v21;
    uint64_t v74 = *v21 + 16 * v30;
    do
    {
      llvm::Instruction::setMetadata(v28, *(_DWORD *)v73, *(llvm::MDNode **)(v73 + 8));
      v73 += 16;
    }
    while (v73 != v74);
  }
  uint64_t v31 = *((void *)v7 + 14);
  uint64_t v32 = **((void **)v7 + 11);
  unsigned int v33 = *(_DWORD *)(v32 + 8);
  if ((v33 & 0xFE) == 0x12) {
    unsigned int v33 = *(_DWORD *)(**(void **)(v32 + 16) + 8);
  }
  uint64_t v34 = *(void *)(v31 + 232);
  if (v33 < 0x100) {
    goto LABEL_34;
  }
  unsigned int v35 = v33 >> 8;
  unint64_t v36 = *(unsigned int *)(v31 + 240);
  uint64_t v37 = *(void *)(v31 + 232);
  if (v36)
  {
    uint64_t v37 = v34;
    unint64_t v38 = v36;
    do
    {
      unint64_t v39 = v38 >> 1;
      uint64_t v40 = v37 + 16 * (v38 >> 1);
      unsigned int v41 = *(_DWORD *)(v40 + 8);
      uint64_t v42 = v40 + 16;
      v38 += ~(v38 >> 1);
      if (v41 < v35) {
        uint64_t v37 = v42;
      }
      else {
        unint64_t v38 = v39;
      }
    }
    while (v38);
  }
  if (v37 == v34 + 16 * v36 || *(_DWORD *)(v37 + 8) != v35) {
LABEL_34:
  }
    uint64_t v37 = v34;
  LODWORD(v93) = *(_DWORD *)(v37 + 12);
  if (v93 > 0x40) {
    operator new[]();
  }
  char v92 = 0;
  if ((*((void *)v7 + 15) || *((void *)v7 + 16) || *((void *)v7 + 17) || *((void *)v7 + 18))
    && llvm::GEPOperator::accumulateConstantOffset(*((void *)v7 + 12), *((llvm::Constant ***)v7 + 5), *((unsigned int *)v7 + 12), *((llvm::DataLayout **)v7 + 14), (llvm::APInt *)&v92, 0, v29))
  {
    unint64_t v45 = (llvm::MDNode *)*((void *)v7 + 15);
    uint64_t v44 = (llvm::AAMDNodes *)*((void *)v7 + 16);
    if (v44)
    {
      uint64_t v91 = (llvm::MDNode **)&v92;
      if (v93 >= 0x41) {
        uint64_t v91 = (llvm::MDNode **)v92;
      }
      unint64_t v46 = llvm::AAMDNodes::shiftTBAAStruct(v44, *v91, v43);
    }
    else
    {
      unint64_t v46 = 0;
    }
    unsigned int v48 = (llvm::MDNode *)*((void *)v7 + 17);
    uint64_t v47 = (llvm::MDNode *)*((void *)v7 + 18);
    if (v45 || *((void *)v27 + 10) || (*((unsigned char *)v27 + 55) & 0x20) != 0) {
      llvm::Value::setMetadata((uint64_t ***)v28, 1, v45);
    }
    if (v46 || *((void *)v27 + 10) || (*((unsigned char *)v27 + 55) & 0x20) != 0) {
      llvm::Value::setMetadata((uint64_t ***)v28, 5, v46);
    }
    if (v48 || *((void *)v27 + 10) || (*((unsigned char *)v27 + 55) & 0x20) != 0) {
      llvm::Value::setMetadata((uint64_t ***)v28, 7, v48);
    }
    if (v47 || *((void *)v27 + 10) || (*((unsigned char *)v27 + 55) & 0x20) != 0) {
      llvm::Value::setMetadata((uint64_t ***)v28, 8, v47);
    }
  }
  uint64_t v49 = *(void *)a3;
  uint64_t v50 = *(void *)v7;
  uint64_t v51 = (void *)*((void *)v7 + 1);
  uint64_t v52 = *((unsigned int *)v7 + 4);
  int v53 = *(unsigned __int8 *)(a4 + 32);
  if (v53 == 1)
  {
    BOOL v96 = ".insert";
    __int16 v54 = 259;
  }
  else
  {
    if (*(unsigned char *)(a4 + 32))
    {
      int v55 = *(const char **)(a4 + 8);
      if (*(unsigned char *)(a4 + 33) == 1)
      {
        char v56 = *(const char **)a4;
      }
      else
      {
        LOBYTE(v53) = 2;
        char v56 = (const char *)a4;
      }
      BOOL v96 = v56;
      __int16 v97 = v55;
      __int16 v98 = ".insert";
      LOBYTE(v99) = v53;
      HIBYTE(v99) = 3;
      goto LABEL_66;
    }
    __int16 v54 = 256;
  }
  __int16 v99 = v54;
LABEL_66:
  uint64_t result = sub_1CC2411F8(v50, v49, (uint64_t)v28, v51, v52, (uint64_t)&v96);
  *(void *)a3 = result;
  if (v93 >= 0x41)
  {
    uint64_t result = (llvm::Instruction *)v92;
    if (v92) {
      return (llvm::Instruction *)MEMORY[0x1D25D9CB0](v92, 0x1000C8000313F17);
    }
  }
  return result;
}

void sub_1CCEA6B78(uint64_t a1, uint64_t a2, const llvm::APInt *a3, uint64_t a4)
{
  if ((*(_DWORD *)(a2 + 8) & 0xFE) != 0x12)
  {
    unsigned int v7 = *(_DWORD *)(a2 + 8);
    if (v7 > 0x15) {
      return;
    }
    if (((1 << v7) & 0x20AC7F) == 0)
    {
      if (v7 != 16)
      {
        if (v7 != 17) {
          return;
        }
        uint64_t v51 = (const char *)*(unsigned int *)(a2 + 32);
        if (!*(_DWORD *)(a2 + 32)) {
          return;
        }
        uint64_t v52 = 0;
        unsigned int v53 = *(_DWORD *)(a1 + 16);
        while (1)
        {
          if (v53 >= *(_DWORD *)(a1 + 20)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)(a1 + 8) + 4 * v53) = v52;
          ++*(_DWORD *)(a1 + 16);
          uint64_t v54 = **(void **)(*(void *)a1 + 64);
          int v55 = *(llvm::ConstantInt **)(v54 + 1960);
          unint64_t v56 = *(unsigned int *)(v54 + 1968);
          LODWORD(v89) = v56 >> 8;
          if (v56 >> 8 > 0x40) {
            operator new[]();
          }
          if (v56 <= 0xFF) {
            unint64_t v57 = 0;
          }
          else {
            unint64_t v57 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v56) + 63);
          }
          uint64_t v88 = (const char *)(v57 & (unint64_t)v52);
          BOOL v58 = llvm::ConstantInt::get(v55, (llvm::LLVMContext *)&v88, a3);
          if (v89 >= 0x41 && v88) {
            MEMORY[0x1D25D9CB0](v88, 0x1000C8000313F17);
          }
          unint64_t v59 = *(unsigned int *)(a1 + 48);
          if (v59 >= *(unsigned int *)(a1 + 52)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(a1 + 40) + 8 * v59) = v58;
          ++*(_DWORD *)(a1 + 48);
          uint64_t v60 = *(void *)(a2 + 24);
          int v61 = *(unsigned __int8 *)(a4 + 32);
          if (v61 == 1) {
            break;
          }
          if (*(unsigned char *)(a4 + 32))
          {
            unint64_t v65 = *(const char **)a4;
            uint64_t v66 = *(const char **)(a4 + 8);
            char v62 = 2;
            if (*(unsigned char *)(a4 + 33) != 1)
            {
              LOBYTE(v61) = 2;
              unint64_t v65 = (const char *)a4;
            }
            uint64_t v84 = v65;
            int v85 = v66;
            char v86 = ".";
            LOBYTE(v87) = v61;
            HIBYTE(v87) = 3;
            uint64_t v64 = &v84;
            goto LABEL_78;
          }
          char v62 = 0;
          __int16 v87 = 256;
          char v63 = 1;
LABEL_79:
          LOBYTE(v91) = v62;
          HIBYTE(v91) = v63;
          sub_1CCEA6B78(a1, v60, a3, &v88);
          --*(_DWORD *)(a1 + 48);
          unsigned int v53 = *(_DWORD *)(a1 + 16) - 1;
          *(_DWORD *)(a1 + 16) = v53;
          if (v51 == ++v52) {
            return;
          }
        }
        uint64_t v84 = ".";
        __int16 v87 = 259;
        char v62 = 3;
        uint64_t v64 = (const char **)".";
        unint64_t v65 = v85;
LABEL_78:
        uint64_t v88 = (const char *)v64;
        uint64_t v89 = v65;
        char v63 = 8;
        __int16 v90 = v52;
        goto LABEL_79;
      }
      int v67 = (const char *)*(unsigned int *)(a2 + 12);
      if (!v67) {
        return;
      }
      char v68 = 0;
      unsigned int v69 = *(_DWORD *)(a1 + 16);
      while (1)
      {
        if (v69 >= *(_DWORD *)(a1 + 20)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)(a1 + 8) + 4 * v69) = v68;
        ++*(_DWORD *)(a1 + 16);
        uint64_t v70 = **(void **)(*(void *)a1 + 64);
        char v71 = *(llvm::ConstantInt **)(v70 + 1960);
        unint64_t v72 = *(unsigned int *)(v70 + 1968);
        LODWORD(v89) = v72 >> 8;
        if (v72 >> 8 > 0x40) {
          operator new[]();
        }
        if (v72 <= 0xFF) {
          unint64_t v73 = 0;
        }
        else {
          unint64_t v73 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v72) + 63);
        }
        uint64_t v88 = (const char *)(v73 & (unint64_t)v68);
        uint64_t v74 = llvm::ConstantInt::get(v71, (llvm::LLVMContext *)&v88, a3);
        if (v89 >= 0x41 && v88) {
          MEMORY[0x1D25D9CB0](v88, 0x1000C8000313F17);
        }
        unint64_t v75 = *(unsigned int *)(a1 + 48);
        if (v75 >= *(unsigned int *)(a1 + 52)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(a1 + 40) + 8 * v75) = v74;
        ++*(_DWORD *)(a1 + 48);
        uint64_t v76 = *(void *)(*(void *)(a2 + 16) + 8 * (void)v68);
        int v77 = *(unsigned __int8 *)(a4 + 32);
        if (v77 == 1) {
          break;
        }
        if (*(unsigned char *)(a4 + 32))
        {
          unint64_t v81 = *(const char **)a4;
          int v82 = *(const char **)(a4 + 8);
          char v78 = 2;
          if (*(unsigned char *)(a4 + 33) != 1)
          {
            LOBYTE(v77) = 2;
            unint64_t v81 = (const char *)a4;
          }
          uint64_t v84 = v81;
          int v85 = v82;
          char v86 = ".";
          LOBYTE(v87) = v77;
          HIBYTE(v87) = 3;
          unint64_t v80 = &v84;
          goto LABEL_105;
        }
        char v78 = 0;
        __int16 v87 = 256;
        char v79 = 1;
LABEL_106:
        LOBYTE(v91) = v78;
        HIBYTE(v91) = v79;
        sub_1CCEA6B78(a1, v76, a3, &v88);
        --*(_DWORD *)(a1 + 48);
        unsigned int v69 = *(_DWORD *)(a1 + 16) - 1;
        *(_DWORD *)(a1 + 16) = v69;
        if (v67 == ++v68) {
          return;
        }
      }
      uint64_t v84 = ".";
      __int16 v87 = 259;
      char v78 = 3;
      unint64_t v80 = (const char **)".";
      unint64_t v81 = v85;
LABEL_105:
      uint64_t v88 = (const char *)v80;
      uint64_t v89 = v81;
      char v79 = 8;
      __int16 v90 = v68;
      goto LABEL_106;
    }
  }
  uint64_t v8 = (1 << *(unsigned char *)(a1 + 104)) | llvm::DataLayout::getIndexedOffsetInType(*(llvm::DataLayout **)(a1 + 112), *(void *)(a1 + 96), *(const llvm::Value ***)(a1 + 40), *(unsigned int *)(a1 + 48));
  unsigned __int8 v9 = 63 - __clz(v8 & -v8);
  char v10 = *(uint64_t **)a3;
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = *(unsigned int **)(a1 + 8);
  uint64_t v13 = *(unsigned int *)(a1 + 16);
  int v14 = *(unsigned __int8 *)(a4 + 32);
  if (v14 == 1)
  {
    uint64_t v88 = ".extract";
    __int16 v15 = 259;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(a4 + 32))
  {
    __int16 v15 = 256;
LABEL_8:
    __int16 v91 = v15;
    goto LABEL_13;
  }
  int v16 = *(const char **)(a4 + 8);
  if (*(unsigned char *)(a4 + 33) == 1)
  {
    __int16 v17 = *(const char **)a4;
  }
  else
  {
    LOBYTE(v14) = 2;
    __int16 v17 = (const char *)a4;
  }
  uint64_t v88 = v17;
  uint64_t v89 = v16;
  __int16 v90 = ".extract";
  LOBYTE(v91) = v14;
  HIBYTE(v91) = 3;
LABEL_13:
  __int16 v18 = v9;
  unsigned int v19 = sub_1CC2415A4(v11, v10, v12, v13, (uint64_t)&v88);
  uint64_t v20 = *(uint64_t **)a1;
  int v22 = *(uint64_t **)(a1 + 88);
  uint64_t v21 = *(void *)(a1 + 96);
  __int16 v23 = *(uint64_t **)(a1 + 40);
  uint64_t v24 = *(unsigned int *)(a1 + 48);
  int v25 = *(unsigned __int8 *)(a4 + 32);
  if (v25 == 1)
  {
    uint64_t v88 = ".gep";
    __int16 v26 = 259;
  }
  else
  {
    if (*(unsigned char *)(a4 + 32))
    {
      uint64_t v27 = *(const char **)(a4 + 8);
      if (*(unsigned char *)(a4 + 33) == 1)
      {
        uint64_t v28 = *(const char **)a4;
      }
      else
      {
        LOBYTE(v25) = 2;
        uint64_t v28 = (const char *)a4;
      }
      uint64_t v88 = v28;
      uint64_t v89 = v27;
      __int16 v90 = ".gep";
      LOBYTE(v91) = v25;
      HIBYTE(v91) = 3;
      goto LABEL_22;
    }
    __int16 v26 = 256;
  }
  __int16 v91 = v26;
LABEL_22:
  uint64_t v29 = sub_1CC57EEA0(v20, v21, v22, v23, v24, (uint64_t)&v88);
  uint64_t v31 = sub_1CC27BF8C(*(uint64_t **)a1, (uint64_t)v19, v29, v18 | 0x100u, 0);
  uint64_t v32 = *(void *)(a1 + 112);
  uint64_t v33 = **(void **)(a1 + 88);
  unsigned int v34 = *(_DWORD *)(v33 + 8);
  if ((v34 & 0xFE) == 0x12) {
    unsigned int v34 = *(_DWORD *)(**(void **)(v33 + 16) + 8);
  }
  uint64_t v35 = *(void *)(v32 + 232);
  if (v34 < 0x100) {
    goto LABEL_33;
  }
  unsigned int v36 = v34 >> 8;
  unint64_t v37 = *(unsigned int *)(v32 + 240);
  uint64_t v38 = *(void *)(v32 + 232);
  if (v37)
  {
    uint64_t v38 = v35;
    unint64_t v39 = v37;
    do
    {
      unint64_t v40 = v39 >> 1;
      uint64_t v41 = v38 + 16 * (v39 >> 1);
      unsigned int v42 = *(_DWORD *)(v41 + 8);
      uint64_t v43 = v41 + 16;
      v39 += ~(v39 >> 1);
      if (v42 < v36) {
        uint64_t v38 = v43;
      }
      else {
        unint64_t v39 = v40;
      }
    }
    while (v39);
  }
  if (v38 == v35 + 16 * v37 || *(_DWORD *)(v38 + 8) != v36) {
LABEL_33:
  }
    uint64_t v38 = v35;
  LODWORD(v89) = *(_DWORD *)(v38 + 12);
  if (v89 > 0x40) {
    operator new[]();
  }
  uint64_t v88 = 0;
  if ((*(void *)(a1 + 120) || *(void *)(a1 + 128) || *(void *)(a1 + 136) || *(void *)(a1 + 144))
    && llvm::GEPOperator::accumulateConstantOffset(*(void *)(a1 + 96), *(llvm::Constant ***)(a1 + 40), *(unsigned int *)(a1 + 48), *(llvm::DataLayout **)(a1 + 112), (llvm::APInt *)&v88, 0, v30))
  {
    unint64_t v46 = *(llvm::MDNode **)(a1 + 120);
    unint64_t v45 = *(llvm::AAMDNodes **)(a1 + 128);
    if (v45)
    {
      unint64_t v83 = (llvm::MDNode **)&v88;
      if (v89 >= 0x41) {
        unint64_t v83 = (llvm::MDNode **)v88;
      }
      uint64_t v47 = llvm::AAMDNodes::shiftTBAAStruct(v45, *v83, v44);
    }
    else
    {
      uint64_t v47 = 0;
    }
    uint64_t v49 = *(llvm::MDNode **)(a1 + 136);
    unsigned int v48 = *(llvm::MDNode **)(a1 + 144);
    if (v46 || *((void *)v31 + 6) || (*((unsigned char *)v31 + 23) & 0x20) != 0) {
      llvm::Value::setMetadata((uint64_t ***)v31, 1, v46);
    }
    if (v47 || *((void *)v31 + 6) || (*((unsigned char *)v31 + 23) & 0x20) != 0) {
      llvm::Value::setMetadata((uint64_t ***)v31, 5, v47);
    }
    if (v49 || *((void *)v31 + 6) || (*((unsigned char *)v31 + 23) & 0x20) != 0) {
      llvm::Value::setMetadata((uint64_t ***)v31, 7, v49);
    }
    if (v48 || *((void *)v31 + 6) || (*((unsigned char *)v31 + 23) & 0x20) != 0) {
      llvm::Value::setMetadata((uint64_t ***)v31, 8, v48);
    }
  }
  if (v89 >= 0x41)
  {
    if (v88) {
      MEMORY[0x1D25D9CB0](v88, 0x1000C8000313F17);
    }
  }
}

const char *sub_1CCEA742C()
{
  return "SROA";
}

BOOL sub_1CCEA743C(int32x2_t *a1, llvm::LLVMContextImpl ****a2)
{
  if (llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, a2)) {
    return 0;
  }
  int v4 = (uint64_t *)a1[1];
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_5:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v5 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_5;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  uint64_t v8 = (llvm::DominatorTree *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::DominatorTreeWrapperPass::ID)+ 32);
  unsigned __int8 v9 = (uint64_t *)a1[1];
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  if (v10 == v11)
  {
    uint64_t v12 = 0;
  }
  else
  {
    while (*(char **)v10 != llvm::AssumptionCacheTracker::ID)
    {
      uint64_t v12 = 0;
      v10 += 16;
      if (v10 == v11) {
        goto LABEL_10;
      }
    }
    uint64_t v12 = *(void *)(v10 + 8);
  }
LABEL_10:
  uint64_t v13 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(uint64_t, char *))(*(void *)v12 + 96))(v12, llvm::AssumptionCacheTracker::ID);
  AssumptionCache = (llvm::AssumptionCache *)llvm::AssumptionCacheTracker::getAssumptionCache(v13, (llvm::Function *)a2);
  llvm::SROAPass::runImpl(a1 + 4, (int32x2_t **)a2, v8, AssumptionCache, (uint64_t)&v29);
  if (v35 == v36)
  {
    __int16 v15 = v29;
    if (v30 == v29)
    {
      unsigned int v16 = v32;
      __int16 v17 = (void **)&v30[8 * v32];
      if (v32)
      {
        uint64_t v18 = 0;
        while (*(_UNKNOWN **)&v30[v18] != &llvm::PreservedAnalyses::AllAnalysesKey)
        {
          v18 += 8;
          if (8 * v32 == v18) {
            goto LABEL_16;
          }
        }
        __int16 v17 = (void **)&v30[v18];
      }
LABEL_16:
      __int16 v15 = v30;
      goto LABEL_17;
    }
    unsigned int v22 = v31 - 1;
    unsigned int v23 = (v31 - 1) & ((&llvm::PreservedAnalyses::AllAnalysesKey >> 4) ^ (&llvm::PreservedAnalyses::AllAnalysesKey >> 9));
    __int16 v17 = (void **)&v30[8 * v23];
    uint64_t v24 = *v17;
    if (*v17 == (void *)-1)
    {
      int v25 = 0;
LABEL_39:
      if (v25) {
        __int16 v17 = v25;
      }
      if (*v17 != &llvm::PreservedAnalyses::AllAnalysesKey)
      {
        unsigned int v16 = v32;
        __int16 v17 = (void **)&v30[8 * v31];
LABEL_17:
        if (v30 == v15) {
          unsigned int v19 = v16;
        }
        else {
          unsigned int v19 = v31;
        }
        BOOL v20 = v17 == (void **)&v30[8 * v19];
        goto LABEL_21;
      }
    }
    else
    {
      int v25 = 0;
      int v26 = 1;
      while (v24 != &llvm::PreservedAnalyses::AllAnalysesKey)
      {
        if (v25) {
          BOOL v27 = 0;
        }
        else {
          BOOL v27 = v24 == (void *)-2;
        }
        if (v27) {
          int v25 = v17;
        }
        unsigned int v28 = v23 + v26++;
        unsigned int v23 = v28 & v22;
        __int16 v17 = (void **)&v30[8 * (v28 & v22)];
        uint64_t v24 = *v17;
        if (*v17 == (void *)-1) {
          goto LABEL_39;
        }
      }
    }
    unsigned int v16 = v32;
    goto LABEL_17;
  }
  BOOL v20 = 1;
LABEL_21:
  if (v34 != v33) {
    free(v34);
  }
  if (v30 != v29) {
    free(v30);
  }
  return v20;
}

void sub_1CCEA76BC(uint64_t *a1, uint64_t a2, uint64_t a3, llvm::APInt *this, unint64_t a5, char a6)
{
  uint64_t v10 = 0;
  if (*(unsigned char *)(a2 + 8) == 13 && (a6 & 1) == 0)
  {
    uint64_t v12 = *a1;
    uint64_t v13 = sub_1CB83544C(*a1, a2);
    int v15 = v14;
    unint64_t v16 = (sub_1CB83544C(v12, a2) + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v15 == (v17 == 1) && v13 == v16) {
      uint64_t v10 = 4;
    }
    else {
      uint64_t v10 = 0;
    }
  }
  if (!a5) {
    goto LABEL_19;
  }
  unint64_t v19 = a1[45];
  unsigned int v20 = *((_DWORD *)this + 2);
  if (v20 >= 0x41 && v20 - llvm::APInt::countLeadingZerosSlowCase(this) > 0x40) {
    goto LABEL_19;
  }
  uint64_t v21 = *(llvm::APInt **)this;
  if (v20 < 0x41) {
    uint64_t v21 = this;
  }
  unint64_t v22 = *(void *)v21;
  if (v19 > v22)
  {
    if (v19 - v22 >= a5) {
      unint64_t v23 = v22 + a5;
    }
    else {
      unint64_t v23 = v19;
    }
    uint64_t v24 = a1[46] + 16;
    uint64_t v25 = a1[41];
    v26.n128_u64[0] = v22;
    v26.n128_u64[1] = v23;
    unint64_t v27 = v25 & 0xFFFFFFFFFFFFFFFBLL | v10;
    sub_1CBC0D590(v24, &v26);
  }
  else
  {
LABEL_19:
    sub_1CCEA78F0((uint64_t)a1, a3);
  }
}

void sub_1CCEA7804(void *a1, uint64_t a2, llvm::APInt *this, unint64_t a4, int a5)
{
  if (!a4) {
    goto LABEL_14;
  }
  unint64_t v5 = a1[45];
  unsigned int v6 = *((_DWORD *)this + 2);
  if (v6 >= 0x41)
  {
    uint64_t v21 = a1;
    int v20 = a5;
    unint64_t v18 = a4;
    uint64_t v19 = a2;
    int v17 = this;
    unint64_t v22 = a1[45];
    unsigned int v16 = *((_DWORD *)this + 2);
    int v13 = llvm::APInt::countLeadingZerosSlowCase(this);
    unsigned int v6 = v16;
    this = v17;
    a4 = v18;
    a2 = v19;
    a5 = v20;
    int v14 = v13;
    a1 = v21;
    unsigned int v15 = v16 - v14;
    unint64_t v5 = v22;
    if (v15 > 0x40) {
      goto LABEL_14;
    }
  }
  uint64_t v7 = v6 >= 0x41 ? *(llvm::APInt **)this : this;
  unint64_t v8 = *(void *)v7;
  if (v5 > v8)
  {
    if (v5 - v8 >= a4) {
      unint64_t v9 = v8 + a4;
    }
    else {
      unint64_t v9 = v5;
    }
    uint64_t v10 = a1[46] + 16;
    uint64_t v11 = a1[41];
    v23.n128_u64[0] = v8;
    v23.n128_u64[1] = v9;
    uint64_t v12 = 4;
    if (!a5) {
      uint64_t v12 = 0;
    }
    unint64_t v24 = v11 & 0xFFFFFFFFFFFFFFFBLL | v12;
    sub_1CBC0D590(v10, &v23);
  }
  else
  {
LABEL_14:
    sub_1CCEA78F0((uint64_t)a1, a2);
  }
}

void sub_1CCEA78F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 528);
  uint64_t v5 = *(unsigned int *)(a1 + 540);
  if (v4 == *(void *)(a1 + 520))
  {
    if (v5)
    {
      unsigned int v6 = 0;
      uint64_t v7 = 8 * v5;
      unint64_t v8 = *(void **)(a1 + 528);
      while (*v8 != a2)
      {
        if (*v8 == -2) {
          unsigned int v6 = v8;
        }
        ++v8;
        v7 -= 8;
        if (!v7)
        {
          if (!v6) {
            goto LABEL_9;
          }
          void *v6 = a2;
          --*(_DWORD *)(a1 + 544);
          goto LABEL_11;
        }
      }
      return;
    }
LABEL_9:
    unsigned int v9 = *(_DWORD *)(a1 + 536);
    if (v5 < v9)
    {
      *(_DWORD *)(a1 + 540) = v5 + 1;
      *(void *)(v4 + 8 * v5) = a2;
LABEL_11:
      uint64_t v10 = *(void *)(a1 + 368);
      unsigned int v11 = *(_DWORD *)(v10 + 232);
      if (v11 >= *(_DWORD *)(v10 + 236)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v10 + 224) + 8 * v11) = a2;
      ++*(_DWORD *)(v10 + 232);
      return;
    }
  }
  else
  {
    unsigned int v9 = *(_DWORD *)(a1 + 536);
  }
  if (3 * v9 <= 4 * ((int)v5 - *(_DWORD *)(a1 + 544)))
  {
    if (v9 >= 0x40) {
      v9 *= 2;
    }
    else {
      unsigned int v9 = 128;
    }
  }
  else if (v9 - v5 >= v9 >> 3)
  {
    goto LABEL_17;
  }
  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 520), v9);
  unsigned int v9 = *(_DWORD *)(a1 + 536);
  uint64_t v4 = *(void *)(a1 + 528);
LABEL_17:
  unsigned int v12 = v9 - 1;
  unsigned int v13 = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  int v14 = (void *)(v4 + 8 * v13);
  uint64_t v15 = *v14;
  if (*v14 != -1)
  {
    unsigned int v16 = 0;
    int v17 = 1;
    while (v15 != a2)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v15 == -2;
      }
      if (v18) {
        unsigned int v16 = v14;
      }
      unsigned int v19 = v13 + v17++;
      unsigned int v13 = v19 & v12;
      int v14 = (void *)(v4 + 8 * (v19 & v12));
      uint64_t v15 = *v14;
      if (*v14 == -1) {
        goto LABEL_29;
      }
    }
    return;
  }
  unsigned int v16 = 0;
LABEL_29:
  if (v16) {
    int v20 = v16;
  }
  else {
    int v20 = v14;
  }
  if (*v20 != a2)
  {
    if (*v20 == -2) {
      --*(_DWORD *)(a1 + 544);
    }
    else {
      ++*(_DWORD *)(a1 + 540);
    }
    void *v20 = a2;
    goto LABEL_11;
  }
}

void sub_1CCEA7AB4(llvm::detail::PtrUseVisitorBase *this, uint64_t a2)
{
  v98[8] = *MEMORY[0x1E4F143B8];
  if (*(void *)(a2 + 8))
  {
    if (*(unsigned char *)(a2 + 16) == 83)
    {
      uint64_t v4 = *(void *)(a2 + 40);
      uint64_t v5 = v4 + 40;
      for (uint64_t i = *(void *)(v4 + 48); ; uint64_t i = *(void *)(i + 8))
      {
        if (i == v5) {
          goto LABEL_130;
        }
        uint64_t v7 = i - 24;
        if (!i) {
          uint64_t v7 = 0;
        }
        if (*(unsigned char *)(v7 + 16) != 83) {
          break;
        }
      }
      unsigned int v11 = *(unsigned __int8 *)(i - 8) - 38;
      BOOL v12 = v11 > 0x38;
      uint64_t v13 = (1 << v11) & 0x100060000000001;
      if (!v12 && v13 != 0) {
        uint64_t i = *(void *)(i + 8);
      }
      if (v5 == i) {
        goto LABEL_130;
      }
      int v15 = *(_DWORD *)(a2 + 20);
      if ((v15 & 0x40000000) != 0)
      {
        unsigned int v16 = *(llvm::UndefValue ***)(a2 - 8);
        unsigned int v17 = v15 & 0x7FFFFFF;
      }
      else
      {
        unsigned int v17 = v15 & 0x7FFFFFF;
        unsigned int v16 = (llvm::UndefValue **)(a2 - 32 * (v15 & 0x7FFFFFF));
      }
      uint64_t v10 = *v16;
      unsigned int v18 = v17 - 1;
      if (v17 != 1)
      {
        unsigned int v19 = (char *)(a2 - 32 * v17);
        uint64_t v20 = 32;
        do
        {
          if ((v15 & 0x40000000) != 0) {
            uint64_t v21 = *(llvm::Instruction **)(*(void *)(a2 - 8) + v20);
          }
          else {
            uint64_t v21 = *(llvm::Instruction **)&v19[v20];
          }
          if (v21 != v10 && v21 != (llvm::Instruction *)a2)
          {
            if (v10 != (llvm::UndefValue *)a2) {
              goto LABEL_57;
            }
            unint64_t v22 = v19;
            if ((v15 & 0x40000000) != 0) {
              unint64_t v22 = *(char **)(a2 - 8);
            }
            uint64_t v10 = *(llvm::UndefValue **)&v22[v20];
          }
          v20 += 32;
          --v18;
        }
        while (v18);
      }
      if (v10 == (llvm::UndefValue *)a2) {
        uint64_t v10 = llvm::UndefValue::get(*(llvm::UndefValue **)a2, (llvm::Type *)a2);
      }
    }
    else
    {
      uint64_t v8 = *(void *)(a2 - 96);
      if (v8) {
        BOOL v9 = *(unsigned char *)(v8 + 16) == 16;
      }
      else {
        BOOL v9 = 0;
      }
      if (v9)
      {
        uint64_t v23 = *(unsigned int *)(v8 + 32);
        if (v23 > 0x40)
        {
          int v25 = 0;
          int64_t v26 = (unint64_t)(v23 + 63) >> 6;
          do
          {
            BOOL v12 = v26-- < 1;
            if (v12) {
              break;
            }
            unint64_t v27 = *(void *)(*(void *)(v8 + 24) + 8 * v26);
            v25 += __clz(v27);
          }
          while (!v27);
          int v28 = v23 | 0xFFFFFFC0;
          if ((v23 & 0x3F) == 0) {
            int v28 = 0;
          }
          BOOL v24 = v25 + v28 == v23;
        }
        else
        {
          BOOL v24 = *(void *)(v8 + 24) == 0;
        }
        int v29 = v24;
        BOOL v9 = v29 == 0;
        uint64_t v30 = 32;
        if (!v9) {
          uint64_t v30 = 64;
        }
        uint64_t v10 = *(llvm::UndefValue **)(a2 - 96 + v30);
      }
      else
      {
        uint64_t v10 = *(llvm::UndefValue **)(a2 - 64);
        if (v10 != *(llvm::UndefValue **)(a2 - 32)) {
          goto LABEL_57;
        }
      }
    }
    if (v10)
    {
      unsigned int v31 = (llvm::UndefValue **)*((void *)this + 41);
      if (v10 == *v31)
      {
        llvm::detail::PtrUseVisitorBase::enqueueUsers(this, (llvm::Instruction *)a2);
      }
      else
      {
        uint64_t v32 = *((void *)this + 46);
        unsigned int v33 = *(_DWORD *)(v32 + 392);
        if (v33 >= *(_DWORD *)(v32 + 396)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v32 + 384) + 8 * v33) = v31;
        ++*(_DWORD *)(v32 + 392);
      }
      return;
    }
LABEL_57:
    if (*((unsigned char *)this + 336))
    {
      unsigned int v34 = (_DWORD *)((char *)this + 448);
      v97.n128_u64[0] = 0;
      char v35 = sub_1CCEA8310((uint64_t)this + 448, a2, &v97);
      int v36 = (uint64_t *)v97.n128_u64[0];
      if (v35)
      {
        unint64_t v39 = (unint64_t *)(v97.n128_u64[0] + 8);
        if (*(void *)(v97.n128_u64[0] + 8)) {
          goto LABEL_139;
        }
LABEL_66:
        uint64_t v40 = **((void **)this + 41);
        char v92 = v96;
        uint64_t v93 = v96;
        int v95 = 0;
        v97.n128_u64[0] = (unint64_t)v98;
        v97.n128_u32[3] = 4;
        uint64_t v94 = 0x100000004;
        v96[0] = a2;
        uint64_t v41 = *(void *)(*(void *)(*(void *)(a2 + 40) + 56) + 40) + 272;
        v98[0] = v40;
        v98[1] = a2;
        *unint64_t v39 = 0;
        unsigned __int32 v42 = 1;
        while (1)
        {
          uint64_t v43 = (void *)v97.n128_u64[0];
          unint64_t v44 = v97.n128_u64[0] + 16 * v42;
          unint64_t v45 = *(uint64_t **)(v44 - 16);
          uint64_t v46 = *(void *)(v44 - 8);
          v97.n128_u32[2] = v42 - 1;
          int v47 = *(unsigned __int8 *)(v46 + 16);
          if (v46)
          {
            unsigned int v48 = (uint64_t *)v46;
            if (v47 == 60)
            {
LABEL_72:
              uint64_t v49 = sub_1CB83544C(v41, *v48);
              if (*v39 <= (unint64_t)(v49 + 7) >> 3) {
                unint64_t v50 = (unint64_t)(v49 + 7) >> 3;
              }
              else {
                unint64_t v50 = *v39;
              }
              *unint64_t v39 = v50;
              goto LABEL_76;
            }
          }
          if (v46 && v47 == 61)
          {
            unsigned int v48 = *(uint64_t **)(v46 - 64);
            if (v48 == v45) {
              goto LABEL_131;
            }
            goto LABEL_72;
          }
          if (v46 && v47 == 62)
          {
            if ((llvm::GetElementPtrInst::hasAllZeroIndices((llvm::GetElementPtrInst *)v46) & 1) == 0) {
              goto LABEL_131;
            }
          }
          else
          {
            unsigned int v51 = v47 - 77;
            BOOL v12 = v51 > 8;
            int v52 = (1 << v51) & 0x143;
            if (v12 || v52 == 0)
            {
LABEL_131:
              if (v43 != v98) {
                free(v43);
              }
              if (v93 != v92) {
                free(v93);
              }
              if (v46)
              {
                unint64_t v72 = *((void *)this + 1) & 3 | v46;
                goto LABEL_137;
              }
LABEL_139:
              unint64_t v73 = (unint64_t *)((char *)this + 344);
              unint64_t v74 = *((void *)this + 45);
              uint64_t v75 = *((unsigned int *)this + 88);
              uint64_t v76 = (unint64_t *)((char *)this + 344);
              if (v75 >= 0x41)
              {
                int v77 = 0;
                int64_t v78 = (unint64_t)(v75 + 63) >> 6;
                do
                {
                  BOOL v12 = v78-- < 1;
                  if (v12) {
                    break;
                  }
                  unint64_t v79 = *(void *)(*v73 + 8 * v78);
                  v77 += __clz(v79);
                }
                while (!v79);
                int v80 = v75 | 0xFFFFFFC0;
                if ((v75 & 0x3F) == 0) {
                  int v80 = 0;
                }
                if ((v75 - v77 - v80) > 0x40)
                {
LABEL_156:
                  uint64_t v85 = *((void *)this + 46);
                  uint64_t v86 = *((void *)this + 41);
                  unsigned int v87 = *(_DWORD *)(v85 + 392);
                  if (v87 >= *(_DWORD *)(v85 + 396)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *(void *)(*(void *)(v85 + 384) + 8 * v87) = v86;
                  ++*(_DWORD *)(v85 + 392);
                  return;
                }
                uint64_t v76 = (unint64_t *)*v73;
              }
              if (*v76 < v74)
              {
                unint64_t v81 = *v39;
                if (!*v39) {
                  goto LABEL_175;
                }
                if (v75 >= 0x41)
                {
                  int v88 = 0;
                  int64_t v89 = (unint64_t)(v75 + 63) >> 6;
                  do
                  {
                    BOOL v12 = v89-- < 1;
                    if (v12) {
                      break;
                    }
                    unint64_t v90 = *(void *)(*v73 + 8 * v89);
                    v88 += __clz(v90);
                  }
                  while (!v90);
                  int v91 = v75 | 0xFFFFFFC0;
                  if ((v75 & 0x3F) == 0) {
                    int v91 = 0;
                  }
                  if ((v75 - v88 - v91) > 0x40) {
                    goto LABEL_175;
                  }
                }
                if (v75 >= 0x41) {
                  unint64_t v73 = (unint64_t *)*v73;
                }
                unint64_t v82 = *v73;
                if (v74 > v82)
                {
                  if (v74 - v82 >= v81) {
                    unint64_t v74 = v82 + v81;
                  }
                  uint64_t v83 = *((void *)this + 46) + 16;
                  uint64_t v84 = *((void *)this + 41);
                  v97.n128_u64[0] = v82;
                  v97.n128_u64[1] = v74;
                  v98[0] = v84 & 0xFFFFFFFFFFFFFFFBLL;
                  sub_1CBC0D590(v83, &v97);
                }
                else
                {
LABEL_175:
                  sub_1CCEA78F0((uint64_t)this, a2);
                }
                return;
              }
              goto LABEL_156;
            }
          }
          uint64_t v54 = *(void *)(v46 + 8);
          if (v54) {
            break;
          }
LABEL_76:
          unsigned __int32 v42 = v97.n128_u32[2];
          if (!v97.n128_u32[2])
          {
            uint64_t v46 = 0;
            uint64_t v43 = (void *)v97.n128_u64[0];
            goto LABEL_131;
          }
        }
        while (1)
        {
          uint64_t v55 = *(void *)(v54 + 24);
          unint64_t v56 = (char *)v93;
          uint64_t v57 = HIDWORD(v94);
          if (v93 == v92)
          {
            if (HIDWORD(v94))
            {
              BOOL v58 = 0;
              uint64_t v59 = 8 * HIDWORD(v94);
              uint64_t v60 = v93;
              while (*v60 != v55)
              {
                if (*v60 == -2) {
                  BOOL v58 = v60;
                }
                ++v60;
                v59 -= 8;
                if (!v59)
                {
                  if (!v58) {
                    goto LABEL_95;
                  }
                  *BOOL v58 = v55;
                  --v95;
                  goto LABEL_119;
                }
              }
              goto LABEL_121;
            }
LABEL_95:
            unsigned int v61 = v94;
            if (HIDWORD(v94) < v94)
            {
              ++HIDWORD(v94);
              v93[v57] = v55;
              goto LABEL_119;
            }
          }
          else
          {
            unsigned int v61 = v94;
          }
          if (3 * v61 <= 4 * (HIDWORD(v94) - v95)) {
            break;
          }
          if (v61 - HIDWORD(v94) < v61 >> 3) {
            goto LABEL_128;
          }
LABEL_100:
          unsigned int v62 = v61 - 1;
          unsigned int v63 = (v61 - 1) & ((v55 >> 4) ^ (v55 >> 9));
          uint64_t v64 = &v56[8 * v63];
          uint64_t v65 = *(void *)v64;
          if (*(void *)v64 != -1)
          {
            uint64_t v66 = 0;
            int v67 = 1;
            while (v65 != v55)
            {
              if (v66) {
                BOOL v68 = 0;
              }
              else {
                BOOL v68 = v65 == -2;
              }
              if (v68) {
                uint64_t v66 = v64;
              }
              unsigned int v69 = v63 + v67++;
              unsigned int v63 = v69 & v62;
              uint64_t v64 = &v56[8 * (v69 & v62)];
              uint64_t v65 = *(void *)v64;
              if (*(void *)v64 == -1) {
                goto LABEL_112;
              }
            }
            goto LABEL_121;
          }
          uint64_t v66 = 0;
LABEL_112:
          if (v66) {
            uint64_t v70 = v66;
          }
          else {
            uint64_t v70 = v64;
          }
          if (*(void *)v70 == v55) {
            goto LABEL_121;
          }
          if (*(void *)v70 == -2) {
            --v95;
          }
          else {
            ++HIDWORD(v94);
          }
          *(void *)uint64_t v70 = v55;
LABEL_119:
          if (v97.n128_u32[2] >= (unint64_t)v97.n128_u32[3]) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          char v71 = (void *)(v97.n128_u64[0] + 16 * v97.n128_u32[2]);
          *char v71 = v46;
          v71[1] = v55;
          ++v97.n128_u32[2];
LABEL_121:
          uint64_t v54 = *(void *)(v54 + 8);
          if (!v54) {
            goto LABEL_76;
          }
        }
        if (v61 >= 0x40) {
          v61 *= 2;
        }
        else {
          unsigned int v61 = 128;
        }
LABEL_128:
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v92, v61);
        unsigned int v61 = v94;
        unint64_t v56 = (char *)v93;
        goto LABEL_100;
      }
      int v37 = *v34 >> 1;
      if (*v34) {
        unsigned int v38 = 4;
      }
      else {
        unsigned int v38 = *((_DWORD *)this + 116);
      }
      if (4 * v37 + 4 >= 3 * v38)
      {
        v38 *= 2;
      }
      else if (v38 + ~v37 - *((_DWORD *)this + 113) > v38 >> 3)
      {
LABEL_63:
        *v34 += 2;
        if (*v36 != -4096) {
          --*((_DWORD *)this + 113);
        }
        *int v36 = a2;
        v36[1] = 0;
        unint64_t v39 = (unint64_t *)(v36 + 1);
        goto LABEL_66;
      }
      sub_1CCEA83BC((uint64_t)this + 448, v38);
      v97.n128_u64[0] = 0;
      sub_1CCEA8310((uint64_t)this + 448, a2, &v97);
      int v36 = (uint64_t *)v97.n128_u64[0];
      goto LABEL_63;
    }
LABEL_130:
    unint64_t v72 = *((void *)this + 1) & 3 | a2;
LABEL_137:
    *((void *)this + 1) = v72 | 4;
    return;
  }

  sub_1CCEA78F0((uint64_t)this, a2);
}

uint64_t sub_1CCEA8310(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    BOOL v9 = 0;
    int v10 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        BOOL v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_8;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

uint64_t sub_1CCEA83BC(uint64_t a1, unsigned int a2)
{
  v14[8] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    unsigned int v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CCEA8548(a1, v11, &v11[2 * v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  uint64_t v7 = v14;
  do
  {
    uint64_t v8 = *(void *)(a1 + v6 + 8);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t *v7 = v8;
      v7[1] = *(void *)(a1 + v6 + 16);
      v7 += 2;
    }
    v6 += 16;
  }
  while (v6 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CCEA8548(a1, v14, v7);
}

uint64_t sub_1CCEA8548(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 72);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[2 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    uint64_t v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v13 = 0;
      uint64_t result = sub_1CCEA8310((uint64_t)v5, v10, &v13);
      unsigned int v11 = v13;
      uint64_t v12 = a2[1];
      uint64_t *v13 = *a2;
      v11[1] = v12;
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

void sub_1CCEA8604(uint64_t a1, unint64_t a2)
{
  if (sub_1CBF698E4(a2) || sub_1CC27D470(a2))
  {
    uint64_t v17 = *(void *)(a1 + 368);
    uint64_t v18 = *(void *)(a1 + 328);
    unsigned int v19 = *(_DWORD *)(v17 + 312);
    if (v19 >= *(_DWORD *)(v17 + 316)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v17 + 304) + 8 * v19) = v18;
    ++*(_DWORD *)(v17 + 312);
  }
  else
  {
    if (!*(unsigned char *)(a1 + 336))
    {
      *(void *)(a1 + 8) = *(void *)(a1 + 8) & 3 | a2 | 4;
      return;
    }
    if (llvm::Instruction::isLifetimeStartOrEnd((llvm::Instruction *)a2))
    {
      uint64_t v4 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      unint64_t v5 = *(void *)(a1 + 360);
      int v6 = (llvm::APInt *)(a1 + 344);
      unsigned int v7 = *(_DWORD *)(a1 + 352);
      uint64_t v8 = (uint64_t *)(a1 + 344);
      if (v7 >= 0x41)
      {
        uint64_t v26 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        unint64_t v29 = *(void *)(a1 + 360);
        unsigned int v20 = *(_DWORD *)(a1 + 352);
        int v21 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(a1 + 344));
        unsigned int v7 = v20;
        if (v20 - v21 > 0x40)
        {
          uint64_t v9 = -1;
          unint64_t v5 = v29;
          int v6 = (llvm::APInt *)(a1 + 344);
          uint64_t v4 = v26;
LABEL_7:
          unint64_t v10 = v5 - v9;
          unsigned int v11 = (llvm::APInt *)(v4 + 24);
          unsigned int v12 = *(_DWORD *)(v4 + 32);
          if (v12 >= 0x41)
          {
            uint64_t v23 = (llvm::APInt **)v11;
            unint64_t v24 = v10;
            unsigned int v27 = v7;
            unint64_t v30 = v5;
            uint64_t v32 = v6;
            if (v12 - llvm::APInt::countLeadingZerosSlowCase(v11) > 0x40)
            {
              unint64_t v13 = -1;
              unint64_t v5 = v30;
              int v6 = v32;
              unsigned int v7 = v27;
              unint64_t v10 = v24;
              goto LABEL_9;
            }
            unint64_t v10 = v24;
            unsigned int v11 = *v23;
            unint64_t v5 = v30;
            int v6 = v32;
            unsigned int v7 = v27;
          }
          unint64_t v13 = *(void *)v11;
LABEL_9:
          if (v13 >= v10) {
            unint64_t v13 = v10;
          }
          if (!v13) {
            goto LABEL_32;
          }
          if (v7 >= 0x41)
          {
            unint64_t v31 = v5;
            unsigned int v33 = v6;
            unsigned int v28 = v7;
            unint64_t v25 = v13;
            int v22 = llvm::APInt::countLeadingZerosSlowCase(v6);
            unint64_t v13 = v25;
            unsigned int v7 = v28;
            unint64_t v5 = v31;
            int v6 = v33;
            if (v28 - v22 > 0x40) {
              goto LABEL_32;
            }
          }
          if (v7 >= 0x41) {
            int v6 = *(llvm::APInt **)v6;
          }
          unint64_t v14 = *(void *)v6;
          if (v5 > v14)
          {
            if (v5 - v14 >= v13) {
              unint64_t v5 = v14 + v13;
            }
            uint64_t v15 = *(void *)(a1 + 368) + 16;
            uint64_t v16 = *(void *)(a1 + 328);
            v34.n128_u64[0] = v14;
            v34.n128_u64[1] = v5;
            uint64_t v35 = v16 | 4;
            sub_1CBC0D590(v15, &v34);
          }
          else
          {
LABEL_32:
            sub_1CCEA78F0(a1, a2);
          }
          return;
        }
        unint64_t v5 = v29;
        int v6 = (llvm::APInt *)(a1 + 344);
        uint64_t v8 = *(uint64_t **)(a1 + 344);
        uint64_t v4 = v26;
      }
      uint64_t v9 = *v8;
      goto LABEL_7;
    }
    if (llvm::Instruction::isLaunderOrStripInvariantGroup((llvm::Instruction *)a2))
    {
      llvm::detail::PtrUseVisitorBase::enqueueUsers((llvm::detail::PtrUseVisitorBase *)a1, (llvm::Instruction *)a2);
    }
    else if ((*(_DWORD *)(*(void *)(a2 - 32) + 36) - 167) >= 2)
    {
      *(int8x16_t *)(a1 + 8) = vorrq_s8(vandq_s8(*(int8x16_t *)(a1 + 8), (int8x16_t)vdupq_n_s64(3uLL)), vorrq_s8((int8x16_t)vdupq_n_s64(a2), (int8x16_t)vdupq_n_s64(4uLL)));
    }
  }
}

void sub_1CCEA88C0(void *a1, uint64_t a2)
{
  uint64_t v4 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
  if (*(unsigned char *)(*(void *)(v4 + 64) + 16) == 16) {
    uint64_t v5 = *(void *)(v4 + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  if (!v5) {
    goto LABEL_14;
  }
  int v6 = (void *)(v5 + 24);
  uint64_t v7 = *(unsigned int *)(v5 + 32);
  if (v7 >= 0x41)
  {
    int v8 = 0;
    int64_t v9 = (unint64_t)(v7 + 63) >> 6;
    do
    {
      BOOL v10 = v9-- < 1;
      if (v10) {
        break;
      }
      unint64_t v11 = *(void *)(*v6 + 8 * v9);
      v8 += __clz(v11);
    }
    while (!v11);
    int v12 = v7 | 0xFFFFFFC0;
    if ((v7 & 0x3F) == 0) {
      int v12 = 0;
    }
    if ((v7 - v8 - v12) > 0x40) {
      goto LABEL_14;
    }
    int v6 = (void *)*v6;
  }
  if (!*v6)
  {
LABEL_107:
    sub_1CCEA78F0((uint64_t)a1, a2);
    return;
  }
LABEL_14:
  uint64_t v13 = a1[66];
  uint64_t v14 = a1[65];
  if (v13 == v14)
  {
    uint64_t v15 = *((unsigned int *)a1 + 135);
    uint64_t v16 = (void *)(v13 + 8 * v15);
    if (v15)
    {
      uint64_t v17 = 0;
      uint64_t v18 = 8 * v15;
      while (*(void *)(v13 + v17) != a2)
      {
        v17 += 8;
        if (v18 == v17) {
          goto LABEL_32;
        }
      }
      uint64_t v16 = (void *)(v13 + v17);
    }
LABEL_32:
    uint64_t v14 = a1[66];
  }
  else
  {
    uint64_t v19 = *((unsigned int *)a1 + 134);
    int v20 = v19 - 1;
    unsigned int v21 = (v19 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v16 = (void *)(v13 + 8 * v21);
    uint64_t v22 = *v16;
    if (*v16 == -1)
    {
      uint64_t v23 = 0;
LABEL_53:
      if (v23) {
        uint64_t v16 = v23;
      }
      if (*v16 != a2) {
        uint64_t v16 = (void *)(v13 + 8 * v19);
      }
    }
    else
    {
      uint64_t v23 = 0;
      int v24 = 1;
      while (v22 != a2)
      {
        if (v23) {
          BOOL v25 = 0;
        }
        else {
          BOOL v25 = v22 == -2;
        }
        if (v25) {
          uint64_t v23 = v16;
        }
        unsigned int v26 = v21 + v24++;
        unsigned int v21 = v26 & v20;
        uint64_t v16 = (void *)(v13 + 8 * (v26 & v20));
        uint64_t v22 = *v16;
        if (*v16 == -1) {
          goto LABEL_53;
        }
      }
    }
  }
  BOOL v25 = v13 == v14;
  uint64_t v27 = 536;
  if (v25) {
    uint64_t v27 = 540;
  }
  if (v16 != (void *)(v13 + 8 * *(unsigned int *)((char *)a1 + v27))) {
    return;
  }
  if (!*((unsigned char *)a1 + 336)) {
    goto LABEL_51;
  }
  uint64_t v28 = *(void *)(v4 + 96);
  uint64_t v29 = *(unsigned int *)(v28 + 32);
  if (v29 <= 0x40)
  {
    if (!*(void *)(v28 + 24)) {
      goto LABEL_48;
    }
LABEL_46:
    int v34 = *(_DWORD *)(**(void **)v4 + 8) >> 8;
    if (v34 == *(_DWORD *)(*a1 + 4) && v34 == *(_DWORD *)(**(void **)(v4 + 32) + 8) >> 8) {
      goto LABEL_48;
    }
LABEL_51:
    a1[1] = a1[1] & 3 | a2 | 4;
    return;
  }
  int v30 = 0;
  int64_t v31 = (unint64_t)(v29 + 63) >> 6;
  do
  {
    BOOL v10 = v31-- < 1;
    if (v10) {
      break;
    }
    unint64_t v32 = *(void *)(*(void *)(v28 + 24) + 8 * v31);
    v30 += __clz(v32);
  }
  while (!v32);
  int v33 = v29 | 0xFFFFFFC0;
  if ((v29 & 0x3F) == 0) {
    int v33 = 0;
  }
  if (v30 + v33 != v29) {
    goto LABEL_46;
  }
LABEL_48:
  uint64_t v35 = (unint64_t **)(a1 + 43);
  unint64_t v36 = a1[45];
  uint64_t v37 = *((unsigned int *)a1 + 88);
  if (v37 >= 0x41)
  {
    int v39 = 0;
    int64_t v40 = (unint64_t)(v37 + 63) >> 6;
    uint64_t v41 = v40;
    do
    {
      BOOL v10 = v41-- < 1;
      if (v10) {
        break;
      }
      unint64_t v42 = (*v35)[v41];
      v39 += __clz(v42);
    }
    while (!v42);
    int v43 = v37 | 0xFFFFFFC0;
    if ((v37 & 0x3F) == 0) {
      int v43 = 0;
    }
    if ((v37 - v39 - v43) >= 0x41) {
      goto LABEL_93;
    }
    unint64_t v38 = **v35;
    if (v38 >= v36) {
      goto LABEL_93;
    }
    int v44 = 0;
    do
    {
      BOOL v10 = v40-- < 1;
      if (v10) {
        break;
      }
      unint64_t v45 = (*v35)[v40];
      v44 += __clz(v45);
    }
    while (!v45);
    if ((v37 - (v43 + v44)) > 0x40) {
      unint64_t v38 = -1;
    }
  }
  else
  {
    unint64_t v38 = (unint64_t)*v35;
    if ((unint64_t)*v35 >= v36)
    {
LABEL_93:
      uint64_t v58 = sub_1CD4C4EE8((uint64_t)(a1 + 47), a2);
      if (a1[47])
      {
        uint64_t v59 = a1 + 48;
        uint64_t v60 = 4;
      }
      else
      {
        uint64_t v59 = (void *)a1[48];
        uint64_t v60 = *((unsigned int *)a1 + 98);
      }
      if (&v59[2 * v60] != (void *)v58)
      {
        uint64_t v65 = *(void *)(a1[46] + 16) + 24 * *(unsigned int *)(v58 + 8);
        *(void *)(v65 + 16) &= 7uLL;
      }
      goto LABEL_107;
    }
  }
  if (v5)
  {
    uint64_t v46 = (unint64_t *)(v5 + 24);
    uint64_t v47 = *(unsigned int *)(v5 + 32);
    if (v47 >= 0x41)
    {
      int v48 = 0;
      int64_t v49 = (unint64_t)(v47 + 63) >> 6;
      do
      {
        BOOL v10 = v49-- < 1;
        if (v10) {
          break;
        }
        unint64_t v50 = *(void *)(*v46 + 8 * v49);
        v48 += __clz(v50);
      }
      while (!v50);
      int v51 = v47 | 0xFFFFFFC0;
      if ((v47 & 0x3F) == 0) {
        int v51 = 0;
      }
      if ((v47 - v48 - v51) > 0x40)
      {
        unint64_t v52 = -1;
        goto LABEL_81;
      }
      uint64_t v46 = (unint64_t *)*v46;
    }
    unint64_t v52 = *v46;
  }
  else
  {
    unint64_t v52 = v36 - v38;
  }
LABEL_81:
  uint64_t v53 = *(void *)a1[41];
  if (v53 != *(void *)v4 || v53 != *(void *)(v4 + 32))
  {
    int v54 = *(_DWORD *)(a1[46] + 24);
    uint64_t v74 = a2;
    int v75 = v54;
    uint64_t v76 = 0;
    int v55 = sub_1CBFC6508((uint64_t)(a1 + 47), &v74, &v76);
    if ((v55 & 1) == 0)
    {
      unint64_t v56 = sub_1CCEA8EB0((_DWORD *)a1 + 94, (uint64_t)&v74, &v74, v76);
      *unint64_t v56 = v74;
      *((_DWORD *)v56 + 2) = v75;
LABEL_85:
      if (v5) {
        int v57 = v55 ^ 1;
      }
      else {
        int v57 = 0;
      }
      sub_1CCEA7804(a1, a2, (llvm::APInt *)(a1 + 43), v52, v57);
      return;
    }
    unsigned int v66 = *((_DWORD *)v76 + 2);
    uint64_t v67 = *(void *)(a1[46] + 16);
    uint64_t v68 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 96);
    uint64_t v69 = *(unsigned int *)(v68 + 32);
    if (v69 > 0x40)
    {
      int v70 = 0;
      int64_t v71 = (unint64_t)(v69 + 63) >> 6;
      do
      {
        BOOL v10 = v71-- < 1;
        if (v10) {
          break;
        }
        unint64_t v72 = *(void *)(*(void *)(v68 + 24) + 8 * v71);
        v70 += __clz(v72);
      }
      while (!v72);
      int v73 = v69 | 0xFFFFFFC0;
      if ((v69 & 0x3F) == 0) {
        int v73 = 0;
      }
      if (v70 + v73 == v69)
      {
LABEL_119:
        if (*(void *)(v67 + 24 * v66) == v38)
        {
          *(void *)(v67 + 24 * v66 + 16) &= 7uLL;
          sub_1CCEA78F0((uint64_t)a1, a2);
          return;
        }
      }
    }
    else if (!*(void *)(v68 + 24))
    {
      goto LABEL_119;
    }
    *(void *)(v67 + 24 * v66 + 16) &= ~4uLL;
    goto LABEL_85;
  }
  if (v29 > 0x40)
  {
    int v61 = 0;
    int64_t v62 = (unint64_t)(v29 + 63) >> 6;
    do
    {
      BOOL v10 = v62-- < 1;
      if (v10) {
        break;
      }
      unint64_t v63 = *(void *)(*(void *)(v28 + 24) + 8 * v62);
      v61 += __clz(v63);
    }
    while (!v63);
    int v64 = v29 | 0xFFFFFFC0;
    if ((v29 & 0x3F) == 0) {
      int v64 = 0;
    }
    if (v61 + v64 == v29) {
      goto LABEL_107;
    }
  }
  else if (!*(void *)(v28 + 24))
  {
    goto LABEL_107;
  }

  sub_1CCEA7804(a1, a2, (llvm::APInt *)(a1 + 43), v52, 0);
}

void *sub_1CCEA8EB0(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *a1 >> 1;
  if (*a1) {
    unsigned int v7 = 4;
  }
  else {
    unsigned int v7 = a1[4];
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_5;
  }
  sub_1CCEA8F74((uint64_t)a1, v7);
  int64_t v9 = 0;
  sub_1CBFC6508((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096) {
    --a1[1];
  }
  return a4;
}

uint64_t sub_1CCEA8F74(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CCEA9100(a1, v11, v11 + 16 * v12);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  unsigned int v7 = v14;
  do
  {
    uint64_t v8 = *(void *)(a1 + v6 + 8);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(void *)unsigned int v7 = v8;
      *((_DWORD *)v7 + 2) = *(_DWORD *)(a1 + v6 + 16);
      v7 += 16;
    }
    v6 += 16;
  }
  while (v6 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CCEA9100(a1, (uint64_t)v14, (uint64_t)v7);
}

uint64_t sub_1CCEA9100(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 72);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[2 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      uint64_t result = sub_1CBFC6508((uint64_t)v5, (void *)a2, &v11);
      BOOL v10 = v11;
      *uint64_t v11 = *(void *)a2;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

__n128 sub_1CCEA91C8(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 < 2) {
    return result;
  }
  uint64_t v6 = a1;
  if (a3 == 2)
  {
    uint64_t v7 = a2 - 24;
    unint64_t v8 = *((void *)a2 - 3);
    if (v8 >= *(void *)a1)
    {
      if (v8 > *(void *)a1) {
        return result;
      }
      unint64_t v24 = *((void *)a2 - 1);
      if (((v24 >> 2) & 1) == (*(unsigned char *)(a1 + 16) & 4) >> 2)
      {
        if (*((void *)a2 - 2) <= *(void *)(a1 + 8)) {
          return result;
        }
      }
      else if ((v24 & 4) != 0)
      {
        return result;
      }
    }
    uint64_t v9 = *(void *)(a1 + 16);
    __n128 result = *(__n128 *)a1;
    uint64_t v11 = *((void *)a2 - 1);
    *(_OWORD *)a1 = *(_OWORD *)v7;
    *(void *)(a1 + 16) = v11;
    *(__n128 *)uint64_t v7 = result;
    *((void *)a2 - 1) = v9;
    return result;
  }
  if ((uint64_t)a3 > 128)
  {
    unsigned int v26 = (__n128 *)a4;
    unint64_t v27 = a3 >> 1;
    uint64_t v28 = (unint64_t *)(a1 + 24 * (a3 >> 1));
    unint64_t v29 = a3 >> 1;
    if ((uint64_t)a3 > a5)
    {
      sub_1CCEA91C8(a1, v28, v29, a4, a5);
      sub_1CCEA91C8(v6 + 24 * (a3 >> 1), a2, a3 - (a3 >> 1), v26, a5);
      sub_1CCEA0270((char *)v6, (char *)(v6 + 24 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), v26, a5);
      return result;
    }
    sub_1CCEA9578(a1, v28, v29, a4);
    uint64_t v30 = (uint64_t)v26 + 24 * v27;
    sub_1CCEA9578(v6 + 24 * (a3 >> 1), (unint64_t *)a2, a3 - (a3 >> 1), v30);
    int64_t v31 = (__n128 *)((char *)v26 + 24 * a3);
    unint64_t v32 = (__n128 *)v30;
    while (1)
    {
      if (v32 == v31)
      {
        if (v26 != (__n128 *)v30)
        {
          unint64_t v34 = 0;
          do
          {
            uint64_t v35 = (__n128 *)(v6 + v34);
            __n128 result = *(__n128 *)((char *)v26 + v34);
            v35[1].n128_u64[0] = v26[1].n128_u64[v34 / 8];
            *uint64_t v35 = result;
            v34 += 24;
          }
          while ((__n128 *)((char *)v26 + v34) != (__n128 *)v30);
        }
        return result;
      }
      if (v32->n128_u64[0] >= v26->n128_u64[0])
      {
        if (v32->n128_u64[0] > v26->n128_u64[0]) {
          goto LABEL_44;
        }
        unint64_t v33 = v32[1].n128_u64[0];
        if (((v33 >> 2) & 1) == (v26[1].n128_u8[0] & 4) >> 2)
        {
          if (v32->n128_u64[1] <= v26->n128_u64[1])
          {
LABEL_44:
            __n128 result = *v26;
            *(void *)(v6 + 16) = v26[1].n128_u64[0];
            *(__n128 *)uint64_t v6 = result;
            unsigned int v26 = (__n128 *)((char *)v26 + 24);
            goto LABEL_45;
          }
        }
        else if ((v33 & 4) != 0)
        {
          goto LABEL_44;
        }
      }
      __n128 result = *v32;
      *(void *)(v6 + 16) = v32[1].n128_u64[0];
      *(__n128 *)uint64_t v6 = result;
      unint64_t v32 = (__n128 *)((char *)v32 + 24);
LABEL_45:
      v6 += 24;
      if (v26 == (__n128 *)v30)
      {
        if (v32 != v31)
        {
          unint64_t v36 = 0;
          do
          {
            uint64_t v37 = (__n128 *)(v6 + v36);
            __n128 result = *(__n128 *)((char *)v32 + v36);
            v37[1].n128_u64[0] = v32[1].n128_u64[v36 / 8];
            __n128 *v37 = result;
            v36 += 24;
          }
          while ((__n128 *)((char *)v32 + v36) != v31);
        }
        return result;
      }
    }
  }
  if ((char *)a1 == a2) {
    return result;
  }
  uint64_t v13 = a1 + 24;
  if ((char *)(a1 + 24) == a2) {
    return result;
  }
  uint64_t v14 = 0;
  uint64_t v15 = a1;
  do
  {
    uint64_t v16 = v15;
    uint64_t v15 = v13;
    unint64_t v17 = *(void *)(v16 + 24);
    if (v17 >= *(void *)v16)
    {
      if (v17 > *(void *)v16) {
        goto LABEL_29;
      }
      unint64_t v18 = *(void *)(v16 + 40);
      if (((v18 >> 2) & 1) == (*(unsigned char *)(v16 + 16) & 4) >> 2)
      {
        if (*(void *)(v16 + 32) <= *(void *)(v16 + 8)) {
          goto LABEL_29;
        }
      }
      else if ((v18 & 4) != 0)
      {
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v18 = *(void *)(v16 + 40);
    }
    unint64_t v19 = *(void *)(v16 + 32);
    __n128 result = *(__n128 *)v16;
    *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
    *(void *)(v15 + 16) = *(void *)(v16 + 16);
    int v20 = (void *)a1;
    if (v16 == a1) {
      goto LABEL_28;
    }
    uint64_t v21 = v14;
    while (1)
    {
      uint64_t v22 = (__n128 *)(a1 + v21);
      uint64_t v23 = (__n128 *)(a1 + v21 - 24);
      if (v17 >= v23->n128_u64[0])
      {
        if (v17 > v23->n128_u64[0]) {
          break;
        }
        if (((v18 >> 2) & 1) != (*(unsigned char *)(a1 + v21 - 8) & 4) >> 2)
        {
          if ((v18 & 4) != 0)
          {
            int v20 = (void *)(a1 + v21);
            goto LABEL_28;
          }
          goto LABEL_19;
        }
        if (v19 <= *(void *)(a1 + v21 - 16)) {
          break;
        }
      }
LABEL_19:
      v16 -= 24;
      __n128 result = *v23;
      *uint64_t v22 = *v23;
      v22[1].n128_u64[0] = *(void *)(a1 + v21 - 8);
      v21 -= 24;
      if (!v21)
      {
        int v20 = (void *)a1;
        goto LABEL_28;
      }
    }
    int v20 = (void *)v16;
LABEL_28:
    void *v20 = v17;
    v20[1] = v19;
    v20[2] = v18;
LABEL_29:
    uint64_t v13 = v15 + 24;
    v14 += 24;
  }
  while ((char *)(v15 + 24) != a2);
  return result;
}

uint64_t sub_1CCEA9578(uint64_t result, unint64_t *a2, unint64_t a3, uint64_t a4)
{
  if (!a3) {
    return result;
  }
  uint64_t v4 = a4;
  uint64_t v7 = (unint64_t *)result;
  if (a3 == 2)
  {
    uint64_t v9 = (long long *)(a2 - 3);
    unint64_t v10 = *(a2 - 3);
    if (v10 < *(void *)result)
    {
LABEL_6:
      long long v11 = *v9;
      *(void *)(a4 + 16) = *(a2 - 1);
      *(_OWORD *)a4 = v11;
      long long v12 = *(_OWORD *)result;
      uint64_t v13 = *(void *)(result + 16);
LABEL_57:
      *(void *)(a4 + 40) = v13;
      *(_OWORD *)(a4 + 24) = v12;
      return result;
    }
    if (v10 <= *(void *)result)
    {
      unint64_t v30 = *(a2 - 1);
      if (((v30 >> 2) & 1) == (*(unsigned char *)(result + 16) & 4) >> 2)
      {
        if (*(a2 - 2) > *(void *)(result + 8)) {
          goto LABEL_6;
        }
      }
      else if ((v30 & 4) == 0)
      {
        goto LABEL_6;
      }
    }
    long long v42 = *(_OWORD *)result;
    *(void *)(a4 + 16) = *(void *)(result + 16);
    *(_OWORD *)a4 = v42;
    long long v12 = *v9;
    uint64_t v13 = *(a2 - 1);
    goto LABEL_57;
  }
  if (a3 == 1)
  {
    long long v8 = *(_OWORD *)result;
    *(void *)(a4 + 16) = *(void *)(result + 16);
    *(_OWORD *)a4 = v8;
    return result;
  }
  if ((uint64_t)a3 > 8)
  {
    int64_t v31 = (unint64_t *)(result + 24 * (a3 >> 1));
    sub_1CCEA91C8(result, v31, a3 >> 1, a4, a3 >> 1);
    __n128 result = sub_1CCEA91C8(&v7[3 * (a3 >> 1)], a2, a3 - (a3 >> 1), v4 + 24 * (a3 >> 1), a3 - (a3 >> 1));
    unint64_t v32 = &v7[3 * (a3 >> 1)];
    while (1)
    {
      if (v32 == a2)
      {
        if (v7 != v31)
        {
          uint64_t v36 = 0;
          do
          {
            uint64_t v37 = v4 + v36 * 8;
            long long v38 = *(_OWORD *)&v7[v36];
            *(void *)(v37 + 16) = v7[v36 + 2];
            *(_OWORD *)uint64_t v37 = v38;
            v36 += 3;
          }
          while (&v7[v36] != v31);
        }
        return result;
      }
      if (*v32 >= *v7)
      {
        if (*v32 > *v7) {
          goto LABEL_39;
        }
        unint64_t v35 = v32[2];
        if (((v35 >> 2) & 1) == (v7[2] & 4) >> 2)
        {
          if (v32[1] <= v7[1])
          {
LABEL_39:
            long long v34 = *(_OWORD *)v7;
            *(void *)(v4 + 16) = v7[2];
            *(_OWORD *)uint64_t v4 = v34;
            v7 += 3;
            goto LABEL_40;
          }
        }
        else if ((v35 & 4) != 0)
        {
          goto LABEL_39;
        }
      }
      long long v33 = *(_OWORD *)v32;
      *(void *)(v4 + 16) = v32[2];
      *(_OWORD *)uint64_t v4 = v33;
      v32 += 3;
LABEL_40:
      v4 += 24;
      if (v7 == v31)
      {
        if (v32 != a2)
        {
          uint64_t v39 = 0;
          do
          {
            uint64_t v40 = v4 + v39 * 8;
            long long v41 = *(_OWORD *)&v32[v39];
            *(void *)(v40 + 16) = v32[v39 + 2];
            *(_OWORD *)uint64_t v40 = v41;
            v39 += 3;
          }
          while (&v32[v39] != a2);
        }
        return result;
      }
    }
  }
  if ((unint64_t *)result != a2)
  {
    long long v14 = *(_OWORD *)result;
    *(void *)(a4 + 16) = *(void *)(result + 16);
    *(_OWORD *)a4 = v14;
    uint64_t v15 = (unint64_t *)(result + 24);
    if ((unint64_t *)(result + 24) != a2)
    {
      uint64_t v16 = 0;
      unint64_t v17 = (void *)a4;
      do
      {
        unint64_t v18 = v7;
        unint64_t v19 = v17;
        uint64_t v7 = v15;
        unint64_t v20 = *v17;
        v17 += 3;
        unint64_t v21 = v18[3];
        BOOL v22 = v21 > v20;
        if (v21 < v20)
        {
LABEL_12:
          *(_OWORD *)unint64_t v17 = *(_OWORD *)v19;
          v17[2] = v19[2];
          uint64_t v23 = (void *)a4;
          if (v19 == (void *)a4) {
            goto LABEL_28;
          }
          uint64_t v24 = v16;
          while (1)
          {
            uint64_t v25 = a4 + v24;
            unint64_t v26 = *(void *)(a4 + v24 - 24);
            if (*v7 >= v26)
            {
              if (*v7 > v26) {
                goto LABEL_26;
              }
              unint64_t v27 = v18[5];
              __n128 result = *(unsigned char *)(a4 + v24 - 8) & 4;
              if (((v27 >> 2) & 1) == result >> 2)
              {
                if (v18[4] <= *(void *)(a4 + v24 - 16))
                {
LABEL_26:
                  uint64_t v23 = v19;
                  goto LABEL_28;
                }
              }
              else if ((v27 & 4) != 0)
              {
                uint64_t v23 = (void *)(a4 + v24);
                goto LABEL_28;
              }
            }
            v19 -= 3;
            *(_OWORD *)uint64_t v25 = *(_OWORD *)(a4 + v24 - 24);
            *(void *)(v25 + 16) = *(void *)(a4 + v24 - 8);
            v24 -= 24;
            if (!v24)
            {
              uint64_t v23 = (void *)a4;
              goto LABEL_28;
            }
          }
        }
        uint64_t v23 = v17;
        if (v22) {
          goto LABEL_28;
        }
        unint64_t v28 = v18[5];
        if (((v28 >> 2) & 1) == (v19[2] & 4) >> 2)
        {
          uint64_t v23 = v17;
          if (v18[4] > v19[1]) {
            goto LABEL_12;
          }
        }
        else
        {
          uint64_t v23 = v17;
          if ((v28 & 4) == 0) {
            goto LABEL_12;
          }
        }
LABEL_28:
        long long v29 = *(_OWORD *)v7;
        v23[2] = v7[2];
        *(_OWORD *)uint64_t v23 = v29;
        uint64_t v15 = v7 + 3;
        v16 += 24;
      }
      while (v7 + 3 != a2);
    }
  }
  return result;
}

uint64_t sub_1CCEA98F4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 8;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v3 + 40 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    unint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        unint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 40 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_7;
      }
    }
    uint64_t result = 0;
    if (v10) {
      uint64_t v7 = v10;
    }
  }
LABEL_7:
  *a3 = v7;
  return result;
}

void *sub_1CCEA99A4(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  unint64_t v21 = a3;
  int v5 = *(_DWORD *)a1;
  int v6 = *(_DWORD *)a1 >> 1;
  int v7 = *(_DWORD *)a1 & 1;
  if (v7) {
    unsigned int v8 = 8;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v6 + 4 >= 3 * v8)
  {
    v8 *= 2;
  }
  else if (v8 + ~v6 - *(_DWORD *)(a1 + 4) > v8 >> 3)
  {
    goto LABEL_6;
  }
  if (v8 >= 9)
  {
    unint64_t v10 = (v8 - 1) | ((unint64_t)(v8 - 1) >> 1);
    unint64_t v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
    int v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
    if ((v12 + 1) > 0x40) {
      unsigned int v8 = v12 + 1;
    }
    else {
      unsigned int v8 = 64;
    }
  }
  if (v7)
  {
    uint64_t v15 = 0;
    uint64_t v16 = v22;
    do
    {
      uint64_t v17 = a1 + v15;
      uint64_t v18 = *(void *)(a1 + v15 + 8);
      if ((v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        void *v16 = v18;
        v16[1] = *(void *)(v17 + 16);
        v16[2] = 0;
        v16[3] = 0;
        v16[4] = 0;
        *((_OWORD *)v16 + 1) = *(_OWORD *)(v17 + 24);
        v16[4] = *(void *)(v17 + 40);
        v16 += 5;
        *(void *)(v17 + 24) = 0;
        *(void *)(v17 + 32) = 0;
        *(void *)(v17 + 40) = 0;
      }
      v15 += 40;
    }
    while (v15 != 320);
    if (v8 > 8)
    {
      *(_DWORD *)a1 &= ~1u;
      uint64_t v19 = v8;
      *(void *)(a1 + 8) = operator new(40 * v8, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v19;
    }
    sub_1CCEA9BD4(a1, (uint64_t)v22, (uint64_t)v16);
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 8);
    unsigned int v14 = *(_DWORD *)(a1 + 16);
    if (v8 > 8)
    {
      uint64_t v20 = v8;
      *(void *)(a1 + 8) = operator new(40 * v8, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v20;
    }
    else
    {
      *(_DWORD *)a1 = v5 | 1;
    }
    sub_1CCEA9BD4(a1, v13, v13 + 40 * v14);
    MEMORY[0x1D25D9CD0](v13, 8);
  }
  sub_1CCEA98F4(a1, *a2, &v21);
  int v5 = *(_DWORD *)a1;
  a3 = v21;
  int v7 = *(_DWORD *)a1 & 1;
LABEL_6:
  *(_DWORD *)a1 = (v5 & 0xFFFFFFFE | v7) + 2;
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  return a3;
}

void sub_1CCEA9BD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)a1;
  *(void *)a1 = *(_DWORD *)a1 & 1;
  if (v6)
  {
    unsigned int v8 = (void *)(a1 + 8);
    uint64_t v9 = (void *)(a1 + 328);
  }
  else
  {
    unsigned int v7 = *(_DWORD *)(a1 + 16);
    if (!v7) {
      goto LABEL_11;
    }
    unsigned int v8 = *(void **)(a1 + 8);
    uint64_t v9 = &v8[5 * v7];
  }
  do
  {
    *unsigned int v8 = -4096;
    v8 += 5;
  }
  while (v8 != v9);
LABEL_11:
  while (a2 != a3)
  {
    uint64_t v10 = *(void *)a2;
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v13 = 0;
      sub_1CCEA98F4(a1, v10, &v13);
      unint64_t v11 = v13;
      void *v13 = *(void *)a2;
      v11[1] = *(void *)(a2 + 8);
      v11[2] = 0;
      v11[3] = 0;
      v11[4] = 0;
      *((_OWORD *)v11 + 1) = *(_OWORD *)(a2 + 16);
      v11[4] = *(void *)(a2 + 32);
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 16) = 0;
      *(_DWORD *)a1 += 2;
      int v12 = *(void **)(a2 + 16);
      if (v12)
      {
        *(void *)(a2 + 24) = v12;
        operator delete(v12);
      }
    }
    a2 += 40;
  }
}

uint64_t sub_1CCEA9CC8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 64);
  int v5 = (void *)*a1;
  uint64_t v7 = *(void *)*a1;
  uint64_t v6 = *(void *)(*a1 + 8);
  if (v6 == v7)
  {
    uint64_t v8 = *((unsigned int *)v5 + 5);
    uint64_t v9 = (void *)(v6 + 8 * v8);
    if (v8)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 8 * v8;
      while (*(void *)(v6 + v10) != v4)
      {
        v10 += 8;
        if (v11 == v10) {
          goto LABEL_19;
        }
      }
      uint64_t v9 = (void *)(v6 + v10);
    }
LABEL_19:
    uint64_t v7 = *(void *)(*a1 + 8);
  }
  else
  {
    uint64_t v12 = *((unsigned int *)v5 + 4);
    int v13 = v12 - 1;
    unsigned int v14 = (v12 - 1) & ((v4 >> 4) ^ (v4 >> 9));
    uint64_t v9 = (void *)(v6 + 8 * v14);
    uint64_t v15 = *v9;
    if (*v9 == -1)
    {
      uint64_t v16 = 0;
LABEL_43:
      if (v16) {
        uint64_t v9 = v16;
      }
      if (*v9 != v4) {
        uint64_t v9 = (void *)(v6 + 8 * v12);
      }
    }
    else
    {
      uint64_t v16 = 0;
      int v17 = 1;
      while (v15 != v4)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v15 == -2;
        }
        if (v18) {
          uint64_t v16 = v9;
        }
        unsigned int v19 = v14 + v17++;
        unsigned int v14 = v19 & v13;
        uint64_t v9 = (void *)(v6 + 8 * (v19 & v13));
        uint64_t v15 = *v9;
        if (*v9 == -1) {
          goto LABEL_43;
        }
      }
    }
  }
  BOOL v18 = v6 == v7;
  uint64_t v20 = 16;
  if (v18) {
    uint64_t v20 = 20;
  }
  if (v9 != (void *)(v6 + 8 * *(unsigned int *)((char *)v5 + v20))) {
    return 1;
  }
  uint64_t v22 = sub_1CCE9265C(a1[1], *(void *)(a2 - 64));
  uint64_t v23 = a1[1];
  uint64_t v24 = v23 + 8;
  if (*(unsigned char *)v23)
  {
    unsigned int v25 = 8;
  }
  else
  {
    uint64_t v24 = *(void *)(v23 + 8);
    unsigned int v25 = *(_DWORD *)(v23 + 16);
  }
  if (v24 + 40 * v25 == v22) {
    return 0;
  }
  uint64_t v46 = a2;
  unint64_t v26 = sub_1CCE9282C(v23, &v46);
  unint64_t v27 = *(const void **)(v22 + 16);
  size_t v28 = *(void *)(v22 + 24) - (void)v27;
  long long v29 = (const void *)v26[1];
  if (v28 != v26[2] - (void)v29 || (uint64_t result = memcmp(v27, v29, v28), result))
  {
    unint64_t v30 = (void *)*a1;
    uint64_t v31 = v30[1];
    uint64_t v32 = *((unsigned int *)v30 + 5);
    if (v31 == *v30)
    {
      if (v32)
      {
        long long v33 = 0;
        uint64_t v34 = 8 * v32;
        unint64_t v35 = (void *)v30[1];
        while (*v35 != v4)
        {
          if (*v35 == -2) {
            long long v33 = v35;
          }
          ++v35;
          v34 -= 8;
          if (!v34)
          {
            if (!v33) {
              goto LABEL_39;
            }
            void *v33 = v4;
            --*((_DWORD *)v30 + 6);
            return 1;
          }
        }
        return 1;
      }
LABEL_39:
      unsigned int v36 = *((_DWORD *)v30 + 4);
      if (v32 < v36)
      {
        *((_DWORD *)v30 + 5) = v32 + 1;
        *(void *)(v31 + 8 * v32) = v4;
        return 1;
      }
    }
    else
    {
      unsigned int v36 = *((_DWORD *)v30 + 4);
    }
    if (3 * v36 <= 4 * ((int)v32 - *((_DWORD *)v30 + 6)))
    {
      if (v36 >= 0x40) {
        v36 *= 2;
      }
      else {
        unsigned int v36 = 128;
      }
    }
    else if (v36 - v32 >= v36 >> 3)
    {
      goto LABEL_50;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v30, v36);
    unsigned int v36 = *((_DWORD *)v30 + 4);
    uint64_t v31 = v30[1];
LABEL_50:
    unsigned int v37 = v36 - 1;
    unsigned int v38 = (v36 - 1) & ((v4 >> 4) ^ (v4 >> 9));
    uint64_t v39 = (void *)(v31 + 8 * v38);
    uint64_t v40 = *v39;
    if (*v39 == -1)
    {
      long long v41 = 0;
LABEL_62:
      if (v41) {
        unint64_t v45 = v41;
      }
      else {
        unint64_t v45 = v39;
      }
      if (*v45 != v4)
      {
        if (*v45 == -2) {
          --*((_DWORD *)v30 + 6);
        }
        else {
          ++*((_DWORD *)v30 + 5);
        }
        void *v45 = v4;
      }
    }
    else
    {
      long long v41 = 0;
      int v42 = 1;
      while (v40 != v4)
      {
        if (v41) {
          BOOL v43 = 0;
        }
        else {
          BOOL v43 = v40 == -2;
        }
        if (v43) {
          long long v41 = v39;
        }
        unsigned int v44 = v38 + v42++;
        unsigned int v38 = v44 & v37;
        uint64_t v39 = (void *)(v31 + 8 * (v44 & v37));
        uint64_t v40 = *v39;
        if (*v39 == -1) {
          goto LABEL_62;
        }
      }
    }
    return 1;
  }
  return result;
}

BOOL sub_1CCEA9FCC(uint64_t *a1, int32x2_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  if (v3 == *a1)
  {
    uint64_t v5 = *((unsigned int *)a1 + 5);
    uint64_t v6 = (void *)(v3 + 8 * v5);
    if (v5)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 8 * v5;
      while (*(void *)(v3 + v7) != a3)
      {
        v7 += 8;
        if (v8 == v7) {
          goto LABEL_19;
        }
      }
      uint64_t v6 = (void *)(v3 + v7);
    }
LABEL_19:
    uint64_t v4 = a1[1];
  }
  else
  {
    uint64_t v9 = *((unsigned int *)a1 + 4);
    int v10 = v9 - 1;
    unsigned int v11 = (v9 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    uint64_t v6 = (void *)(v3 + 8 * v11);
    uint64_t v12 = *v6;
    if (*v6 == -1)
    {
      int v13 = 0;
LABEL_32:
      if (v13) {
        uint64_t v6 = v13;
      }
      if (*v6 != a3) {
        uint64_t v6 = (void *)(v3 + 8 * v9);
      }
    }
    else
    {
      int v13 = 0;
      int v14 = 1;
      while (v12 != a3)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v12 == -2;
        }
        if (v15) {
          int v13 = v6;
        }
        unsigned int v16 = v11 + v14++;
        unsigned int v11 = v16 & v10;
        uint64_t v6 = (void *)(v3 + 8 * (v16 & v10));
        uint64_t v12 = *v6;
        if (*v6 == -1) {
          goto LABEL_32;
        }
      }
    }
  }
  BOOL v15 = v3 == v4;
  uint64_t v17 = 16;
  if (v15) {
    uint64_t v17 = 20;
  }
  BOOL v18 = (void *)(v3 + 8 * *(unsigned int *)((char *)a1 + v17));
  if (v6 != v18)
  {
    __int32 v19 = a2[2].i32[0];
    if (v19)
    {
      int32x2_t v20 = *a2;
      __int32 v21 = v19 - 1;
      LODWORD(v22) = (v19 - 1) & ((a3 >> 4) ^ (a3 >> 9));
      uint64_t v23 = (uint64_t *)(*(void *)a2 + 8 * v22);
      uint64_t v24 = *v23;
      if (*v23 == a3)
      {
LABEL_29:
        *uint64_t v23 = -8192;
        a2[1] = vadd_s32(a2[1], (int32x2_t)0x1FFFFFFFFLL);
      }
      else
      {
        int v25 = 1;
        while (v24 != -4096)
        {
          int v26 = v22 + v25++;
          uint64_t v22 = v26 & v21;
          uint64_t v24 = *(void *)(*(void *)&v20 + 8 * v22);
          if (v24 == a3)
          {
            uint64_t v23 = (uint64_t *)(*(void *)&v20 + 8 * v22);
            goto LABEL_29;
          }
        }
      }
    }
  }
  return v6 != v18;
}

uint64_t sub_1CCEAA130()
{
  char v2 = 0;
  uint64_t v3 = &v2;
  int v1 = 1;
  sub_1CD4D2D28((uint64_t)&unk_1EBCF7D18, "sroa-strict-inbounds", &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCF7D18, &dword_1CB82C000);
}

void LLVMAddLoopSimplifyCFGPass(llvm *a1)
{
}

void LLVMAddAggressiveDCEPass(llvm *a1)
{
}

void LLVMAddDCEPass(llvm *a1)
{
}

void LLVMAddBitTrackingDCEPass(llvm *a1)
{
}

void LLVMAddAlignmentFromAssumptionsPass(llvm *a1)
{
}

void LLVMAddCFGSimplificationPass()
{
}

void LLVMAddDeadStoreEliminationPass(llvm *a1)
{
}

void LLVMAddScalarizerPass(llvm *a1)
{
}

void LLVMAddGVNPass()
{
}

void LLVMAddNewGVNPass(llvm *a1)
{
}

void LLVMAddMergedLoadStoreMotionPass()
{
}

void LLVMAddIndVarSimplifyPass(llvm *a1)
{
}

void LLVMAddInstructionSimplifyPass(llvm *a1)
{
}

void LLVMAddJumpThreadingPass()
{
}

void LLVMAddLoopSinkPass(llvm *a1)
{
}

void LLVMAddLICMPass(llvm *a1)
{
}

void LLVMAddLoopDeletionPass(llvm *a1)
{
}

void LLVMAddLoopFlattenPass(llvm *a1)
{
}

void LLVMAddLoopIdiomPass(llvm *a1)
{
}

void LLVMAddLoopRotatePass()
{
}

void LLVMAddLoopRerollPass(llvm *a1)
{
}

void LLVMAddLoopUnrollPass()
{
  llvm::createLoopUnrollPass((llvm *)2, 0, 0, -1, -1, -1, -1, -1, -1, v0);
}

void LLVMAddLoopUnrollAndJamPass()
{
}

void LLVMAddLoopUnswitchPass()
{
}

void LLVMAddLowerAtomicPass(llvm *a1)
{
}

void LLVMAddMemCpyOptPass(llvm *a1)
{
}

void LLVMAddPartiallyInlineLibCallsPass(llvm *a1)
{
}

void LLVMAddReassociatePass(llvm *a1)
{
}

void LLVMAddSCCPPass(llvm *a1)
{
}

void LLVMAddScalarReplAggregatesPass(llvm *a1)
{
}

void LLVMAddScalarReplAggregatesPassSSA(llvm *a1)
{
}

void LLVMAddScalarReplAggregatesPassWithThreshold(llvm *a1)
{
}

void LLVMAddTailCallEliminationPass(llvm *a1)
{
}

void LLVMAddDemoteMemoryToRegisterPass(llvm *a1)
{
}

void LLVMAddVerifierPass()
{
}

void LLVMAddCorrelatedValuePropagationPass(llvm *a1)
{
}

void LLVMAddEarlyCSEPass()
{
}

void LLVMAddEarlyCSEMemSSAPass()
{
}

void LLVMAddGVNHoistLegacyPass(llvm *a1)
{
}

void LLVMAddTypeBasedAliasAnalysisPass(llvm *a1)
{
}

void LLVMAddScopedNoAliasAAPass(llvm *a1)
{
}

void LLVMAddBasicAliasAnalysisPass(llvm *a1)
{
}

void LLVMAddLowerConstantIntrinsicsPass(llvm *a1)
{
}

void LLVMAddLowerExpectIntrinsicPass(llvm *a1)
{
}

void LLVMAddUnifyFunctionExitNodesPass(llvm *a1)
{
}

void sub_1CCEAB320(uint64_t a1)
{
}

uint64_t sub_1CCEAB3C0(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCF7DE8;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F2640B90;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF7DF0, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CCEAB320;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCF7DF0, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

uint64_t sub_1CCEAB470(unint64_t a1, uint64_t a2)
{
  v89[1] = *MEMORY[0x1E4F143B8];
  if (a2) {
    uint64_t v4 = a2 - 24;
  }
  else {
    uint64_t v4 = 0;
  }
  __p = 0;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  sub_1CD7823A8((uint64_t)&__p, v4);
  uint64_t v7 = (char *)__p;
  uint64_t v6 = v65;
  while (v6 != v7)
  {
    uint64_t v8 = *((void *)v6 - 1);
    v6 -= 8;
    uint64_t v9 = v8 + 40;
    uint64_t v10 = *(void *)(v8 + 48);
    while (v10 != v9)
    {
      if (v10) {
        unsigned int v11 = (uint64_t **)(v10 - 24);
      }
      else {
        unsigned int v11 = 0;
      }
      int v12 = sub_1CCEABDDC(a1, v11);
      uint64_t v10 = *(void *)(v10 + 8);
      if (v12)
      {
        if (*((unsigned char *)*v11 + 8) == 7) {
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
      }
    }
  }
  uint64_t v13 = *(unsigned int *)(a1 + 32);
  if (v13)
  {
    uint64_t v16 = *(void *)(a1 + 24);
    uint64_t v17 = v16 + 16 * v13;
    BOOL v18 = (unsigned int *)(a1 + 296);
    uint64_t v63 = v17;
    while (1)
    {
      __int32 v19 = *(llvm::Value **)v16;
      int v73 = v19;
      if (!*((void *)v19 + 1)) {
        goto LABEL_71;
      }
      int32x2_t v20 = *(llvm::Value ****)(v16 + 8);
      __int32 v21 = (llvm::Value *)llvm::PoisonValue::get(*(llvm::PoisonValue **)v19, v5);
      uint64_t v22 = v73;
      uint64_t v23 = *(uint64_t **)v73;
      if (*(void *)v73 && (*(_DWORD *)(*(void *)v73 + 8) & 0xFE) == 18) {
        break;
      }
      __int32 v21 = **v20;
      if (v73 != v21) {
        goto LABEL_70;
      }
LABEL_77:
      v16 += 16;
      if (v16 == v17) {
        goto LABEL_94;
      }
    }
    uint64_t v25 = 0;
    uint64_t v26 = *((void *)v73 + 5);
    uint64_t v27 = *((unsigned int *)v23 + 8);
    uint64_t v28 = *v23;
    v74[0] = &v75;
    v74[1] = (void *)0x200000000;
    uint64_t v79 = v28;
    int v80 = &v88;
    unint64_t v81 = v89;
    uint64_t v82 = 0;
    int v83 = 0;
    __int16 v84 = 512;
    char v85 = 7;
    uint64_t v77 = 0;
    int64_t v78 = 0;
    uint64_t v86 = 0;
    uint64_t v87 = 0;
    int v88 = &unk_1F2616E88;
    v89[0] = &unk_1F2617008;
    uint64_t v77 = *((void *)v73 + 5);
    int64_t v78 = (char *)v73 + 24;
    long long v29 = (unsigned __int8 *)*((void *)v73 + 6);
    v67[0] = v29;
    if (v29)
    {
      llvm::MetadataTracking::track((uint64_t)v67, v29, 2);
      uint64_t v25 = v67[0];
    }
    sub_1CB8461A4((uint64_t)v74, 0, v25);
    if (v67[0])
    {
      int v59 = *(unsigned __int8 *)v67[0];
      if ((v59 - 4) > 0x1E)
      {
        if ((v59 - 3) >= 0xFFFFFFFE) {
          uint64_t v62 = v67[0];
        }
        else {
          uint64_t v62 = 0;
        }
        if ((v59 - 3) < 0xFFFFFFFE)
        {
          if (v59 == 3) {
            *(void *)(v67[0] + 8) = 0;
          }
          goto LABEL_31;
        }
        unint64_t v61 = v62 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v67[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v67[0] + 12)) {
          goto LABEL_31;
        }
        uint64_t v60 = *(void *)(v67[0] + 16);
        if ((v60 & 4) == 0) {
          goto LABEL_31;
        }
        unint64_t v61 = v60 & 0xFFFFFFFFFFFFFFF8;
        if (!v61) {
          goto LABEL_31;
        }
      }
      uint64_t v69 = v67;
      sub_1CC5FA668(v61 + 16, &v69);
    }
LABEL_31:
    if (*((unsigned char *)v73 + 16) == 83)
    {
      uint64_t v31 = v26 + 40;
      for (uint64_t i = *(void *)(v26 + 48); i != v31; uint64_t i = *(void *)(i + 8))
      {
        uint64_t v33 = i - 24;
        if (!i) {
          uint64_t v33 = 0;
        }
        if (*(unsigned char *)(v33 + 16) != 83)
        {
          unsigned int v34 = *(unsigned __int8 *)(i - 8) - 38;
          BOOL v35 = v34 > 0x38;
          uint64_t v36 = (1 << v34) & 0x100060000000001;
          if (v35 || v36 == 0) {
            uint64_t v31 = i;
          }
          else {
            uint64_t v31 = *(void *)(i + 8);
          }
          break;
        }
      }
      sub_1CBF5385C((uint64_t)v74, v26, v31);
    }
    if (!v27)
    {
LABEL_67:
      llvm::Value::takeName((int32x2_t ****)v21, v73);
      if (v74[0] != &v75) {
        free(v74[0]);
      }
      uint64_t v22 = v73;
      uint64_t v17 = v63;
      BOOL v18 = (unsigned int *)(a1 + 296);
LABEL_70:
      llvm::Value::doRAUW(v22, v21, (llvm::Value *)1);
LABEL_71:
      unsigned int v56 = *(_DWORD *)(a1 + 304);
      if (v56 >= *(_DWORD *)(a1 + 308))
      {
        sub_1CC9E6F68(v18, (uint64_t *)&v73);
      }
      else
      {
        int v57 = v73;
        uint64_t v58 = (llvm::ValueHandleBase *)(*(void *)v18 + 24 * v56);
        *(void *)uint64_t v58 = 6;
        *((void *)v58 + 1) = 0;
        *((void *)v58 + 2) = v57;
        if (v57 != (llvm::Value *)-8192 && v57 != (llvm::Value *)-4096 && v57)
        {
          llvm::ValueHandleBase::AddToUseList(v58);
          unsigned int v56 = *(_DWORD *)(a1 + 304);
        }
        *(_DWORD *)(a1 + 304) = v56 + 1;
      }
      goto LABEL_77;
    }
    uint64_t v38 = 0;
    while (1)
    {
      uint64_t v39 = (unsigned __int8 *)(*v20)[v38];
      uint64_t v40 = *(llvm::ConstantInt **)(*(void *)v79 + 1960);
      unsigned int v41 = *(_DWORD *)(*(void *)v79 + 1968);
      unsigned int v70 = v41 >> 8;
      if (v41 >> 8 > 0x40) {
        operator new[]();
      }
      if (v41 <= 0xFF) {
        unint64_t v42 = 0;
      }
      else {
        unint64_t v42 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v41) + 63);
      }
      uint64_t v69 = (void *)(v42 & v38);
      BOOL v43 = (unsigned __int8 *)llvm::ConstantInt::get(v40, (llvm::LLVMContext *)&v69, v30);
      if (v70 >= 0x41 && v69) {
        MEMORY[0x1D25D9CB0](v69, 0x1000C8000313F17);
      }
      if ((*((unsigned char *)v73 + 23) & 0x10) == 0)
      {
        uint64_t v53 = 0;
        int v54 = &byte_1CFBCE98E;
        goto LABEL_61;
      }
      uint64_t v44 = ***(void ***)v73;
      uint64_t v45 = *(void *)(v44 + 152);
      uint64_t v46 = *(unsigned int *)(v44 + 168);
      if (!v46) {
        goto LABEL_59;
      }
      LODWORD(v47) = (v46 - 1) & ((v73 >> 4) ^ (v73 >> 9));
      uint64_t v48 = v45 + 16 * v47;
      int64_t v49 = *(llvm::Value **)v48;
      if (*(llvm::Value **)v48 != v73) {
        break;
      }
LABEL_60:
      unint64_t v52 = *(void **)(v48 + 8);
      uint64_t v55 = *v52;
      int v54 = (char *)(v52 + 2);
      uint64_t v53 = v55;
LABEL_61:
      __int16 v68 = 773;
      v67[0] = v54;
      v67[1] = v53;
      v67[2] = ".upto";
      unint64_t v2 = v2 & 0xFFFFFFFF00000000 | v38;
      uint64_t v69 = v67;
      unint64_t v71 = v2;
      __int16 v72 = 2050;
      __int32 v21 = sub_1CB84478C((uint64_t)v74, (unsigned __int8 *)v21, v39, v43, (uint64_t)&v69);
      if (++v38 == v27) {
        goto LABEL_67;
      }
    }
    int v50 = 1;
    while (v49 != (llvm::Value *)-4096)
    {
      int v51 = v47 + v50++;
      uint64_t v47 = v51 & (v46 - 1);
      int64_t v49 = *(llvm::Value **)(v45 + 16 * v47);
      if (v49 == v73)
      {
        uint64_t v48 = v45 + 16 * v47;
        goto LABEL_60;
      }
    }
LABEL_59:
    uint64_t v48 = v45 + 16 * v46;
    goto LABEL_60;
  }
  if (*(void *)(a1 + 16))
  {
LABEL_94:
    *(_DWORD *)(a1 + 32) = 0;
    sub_1CD46392C(*(void **)(a1 + 8));
    *(void *)a1 = a1 + 8;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v76 = 0;
    llvm::RecursivelyDeleteTriviallyDeadInstructionsPermissive((unsigned int *)(a1 + 296), 0, 0, (uint64_t)v74);
    if (v76 == v74)
    {
      (*((void (**)(void **))v74[0] + 4))(v74);
    }
    else if (v76)
    {
      (*((void (**)(void))*v76 + 5))();
    }
    uint64_t v14 = 1;
  }
  else
  {
    uint64_t v14 = 0;
  }
  if (__p)
  {
    uint64_t v65 = (char *)__p;
    operator delete(__p);
  }
  return v14;
}

uint64_t sub_1CCEABB30(uint64_t a1)
{
  sub_1CD651528((char **)(a1 + 296));
  unint64_t v2 = *(void **)(a1 + 24);
  if (v2 != (void *)(a1 + 40)) {
    free(v2);
  }
  sub_1CD46392C(*(void **)(a1 + 8));
  return a1;
}

void sub_1CCEABB78()
{
}

void sub_1CCEABBB8(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CCEABBF0(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);

  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
}

uint64_t sub_1CCEABC40(llvm::FunctionPass *a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (llvm::FunctionPass::skipFunction(a1, (llvm::LLVMContextImpl ****)a2)) {
    return 0;
  }
  int MDKindID = llvm::LLVMContext::getMDKindID(**(uint64_t ***)(a2 + 40), "llvm.mem.parallel_loop_access", 0x1DuLL);
  uint64_t v7 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  if (v8 == v9)
  {
LABEL_7:
    uint64_t v10 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v8 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v8 += 16;
      if (v8 == v9) {
        goto LABEL_7;
      }
    }
    uint64_t v10 = *(void *)(v8 + 8);
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v10 + 96))(v10, &llvm::DominatorTreeWrapperPass::ID);
  int v12 = v13;
  v13[0] = 0;
  v13[1] = 0;
  uint64_t v14 = v16;
  uint64_t v15 = 0x1000000000;
  v17[0] = (char *)v18;
  v17[1] = (char *)0x2000000000;
  v18[192] = MDKindID;
  uint64_t v19 = v11 + 32;
  BOOL v20 = byte_1EBCF7E78 != 0;
  BOOL v21 = byte_1EBCF7F38 != 0;
  uint64_t v4 = sub_1CCEAB470((unint64_t)&v12, *(void *)(a2 + 80));
  sub_1CD651528(v17);
  if (v14 != v16) {
    free(v14);
  }
  sub_1CD46392C(v13[0]);
  return v4;
}

uint64_t sub_1CCEABDDC(unint64_t a1, uint64_t **a2)
{
  v588[9] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = (uint64_t ***)a2;
  unint64_t v3 = a1;
  unint64_t v4 = 0;
  switch(*((unsigned char *)a2 + 16))
  {
    case '(':
      uint64_t v6 = *a2;
      if (*a2) {
        BOOL v7 = ((*a2)[1] & 0xFE) == 18;
      }
      else {
        BOOL v7 = 0;
      }
      if (!v7) {
        return 0;
      }
      uint64_t v8 = 0;
      unint64_t v9 = *((unsigned int *)v6 + 8);
      uint64_t v10 = (uint64_t *)*v6;
      v553 = v555;
      uint64_t v554 = 0x200000000;
      v559 = v10;
      v560 = &v568;
      v561 = v569;
      uint64_t v562 = 0;
      int v563 = 0;
      __int16 v564 = 512;
      char v565 = 7;
      uint64_t v566 = 0;
      uint64_t v567 = 0;
      v568 = &unk_1F2616E88;
      v569[0] = &unk_1F2617008;
      uint64_t v11 = (char *)a2[6];
      v557 = v2[5];
      v558 = v2 + 3;
      v583 = (void **)v11;
      if (v11)
      {
        llvm::MetadataTracking::track((uint64_t)&v583, (unsigned __int8 *)v11, 2);
        uint64_t v8 = (const char *)v583;
      }
      sub_1CB8461A4((uint64_t)&v553, 0, (uint64_t)v8);
      if (!v583) {
        goto LABEL_16;
      }
      int v471 = *(unsigned __int8 *)v583;
      if ((v471 - 4) > 0x1E)
      {
        if ((v471 - 3) >= 0xFFFFFFFE) {
          v495 = (const char *)v583;
        }
        else {
          v495 = 0;
        }
        if ((v471 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v473 = (unint64_t)(v495 + 8);
LABEL_671:
          v570[0] = (uint64_t)&v583;
          sub_1CC5FA668(v473 + 16, v570);
          goto LABEL_16;
        }
        if (v471 == 3) {
          v583[1] = 0;
        }
      }
      else if ((*((unsigned char *)v583 + 1) & 0x7F) == 2 || *((_DWORD *)v583 + 3))
      {
        unint64_t v472 = (unint64_t)v583[2];
        if ((v472 & 4) != 0)
        {
          unint64_t v473 = v472 & 0xFFFFFFFFFFFFFFF8;
          if (v473) {
            goto LABEL_671;
          }
        }
      }
LABEL_16:
      int v12 = *((_DWORD *)v2 + 5);
      if ((v12 & 0x40000000) != 0) {
        uint64_t v13 = (unint64_t *)*(v2 - 1);
      }
      else {
        uint64_t v13 = (unint64_t *)&v2[-4 * (v12 & 0x7FFFFFF)];
      }
      sub_1CCEB1784((uint64_t)v570, (uint64_t **)v3, (uint64_t)v2, *v13, 0);
      v583 = (void **)v585;
      uint64_t v584 = 0x800000000;
      sub_1CD42769C((uint64_t)&v583, v9);
      if (v9)
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          v271 = sub_1CCEB1928((uint64_t)v570, i);
          if ((*((unsigned char *)v2 + 23) & 0x10) != 0)
          {
            uint64_t v272 = ***v2;
            uint64_t v273 = *(void *)(v272 + 152);
            uint64_t v274 = *(unsigned int *)(v272 + 168);
            if (v274)
            {
              LODWORD(v275) = (v274 - 1) & ((v2 >> 4) ^ (v2 >> 9));
              v276 = (uint64_t ****)(v273 + 16 * v275);
              v277 = *v276;
              if (*v276 != v2)
              {
                int v278 = 1;
                do
                {
                  if (v277 == (uint64_t ***)-4096) {
                    goto LABEL_348;
                  }
                  int v279 = v275 + v278++;
                  uint64_t v275 = v279 & (v274 - 1);
                  v277 = *(uint64_t ****)(v273 + 16 * v275);
                }
                while (v277 != v2);
                v276 = (uint64_t ****)(v273 + 16 * v275);
              }
            }
            else
            {
LABEL_348:
              v276 = (uint64_t ****)(v273 + 16 * v274);
            }
            v280 = v276[1];
            uint64_t v283 = (uint64_t)*v280;
            v282 = (char *)(v280 + 2);
            uint64_t v281 = v283;
          }
          else
          {
            uint64_t v281 = 0;
            v282 = &byte_1CFBCE98E;
          }
          __int16 v546 = 773;
          v543 = v282;
          uint64_t v544 = v281;
          v545[0] = ".i";
          v547[0] = &v543;
          *(void *)&long long v548 = i;
          LOWORD(v549) = 2050;
          v284 = sub_1CD5C2B18((uint64_t)&v553, *((unsigned __int8 *)v2 + 16) - 28, (uint64_t)v271, (uint64_t)v547, 0);
          v583[i] = v284;
        }
      }
      sub_1CCEB1F88(v3, (uint64_t *)v2, (uint64_t *)&v583);
      if (v583 != v585) {
        free(v583);
      }
      if (v573 != v575) {
        free(v573);
      }
      uint64_t v47 = v553;
      if (v553 == v555) {
        return 1;
      }
      goto LABEL_358;
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
    case '/':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case ':':
      return sub_1CCEB244C((uint64_t **)a1, (uint64_t *)a2);
    case '<':
      if (!*(unsigned char *)(a1 + 1097)) {
        return 0;
      }
      unint64_t v14 = *((unsigned __int16 *)a2 + 9);
      if ((v14 & 0x381) != 0) {
        return 0;
      }
      sub_1CCEB282C((uint64_t)&v543, (uint64_t)*a2, (v14 >> 1) & 0x3F, *(void *)(a2[5][7] + 40) + 272);
      unint64_t v4 = (_BYTE)v546 != 0;
      if (!(_BYTE)v546) {
        return v4;
      }
      uint64_t v15 = 0;
      v522 = v543;
      unint64_t v526 = *((unsigned int *)v543 + 8);
      uint64_t v16 = **v2;
      v553 = v555;
      uint64_t v554 = 0x200000000;
      v559 = v16;
      v560 = &v568;
      v561 = v569;
      uint64_t v562 = 0;
      int v563 = 0;
      __int16 v564 = 512;
      char v565 = 7;
      uint64_t v566 = 0;
      uint64_t v567 = 0;
      v568 = &unk_1F2616E88;
      v569[0] = &unk_1F2617008;
      uint64_t v17 = (char *)v2[6];
      BOOL v18 = (uint64_t *)v2;
      v557 = v2[5];
      v558 = v2 + 3;
      v583 = (void **)v17;
      if (v17)
      {
        llvm::MetadataTracking::track((uint64_t)&v583, (unsigned __int8 *)v17, 2);
        uint64_t v15 = (const char *)v583;
      }
      sub_1CB8461A4((uint64_t)&v553, 0, (uint64_t)v15);
      if (!v583) {
        goto LABEL_24;
      }
      int v503 = *(unsigned __int8 *)v583;
      if ((v503 - 4) > 0x1E)
      {
        if ((v503 - 3) >= 0xFFFFFFFE) {
          v509 = (const char *)v583;
        }
        else {
          v509 = 0;
        }
        if ((v503 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v505 = (unint64_t)(v509 + 8);
LABEL_747:
          v570[0] = (uint64_t)&v583;
          sub_1CC5FA668(v505 + 16, v570);
          goto LABEL_24;
        }
        if (v503 == 3) {
          v583[1] = 0;
        }
      }
      else if ((*((unsigned char *)v583 + 1) & 0x7F) == 2 || *((_DWORD *)v583 + 3))
      {
        unint64_t v504 = (unint64_t)v583[2];
        if ((v504 & 4) != 0)
        {
          unint64_t v505 = v504 & 0xFFFFFFFFFFFFFFF8;
          if (v505) {
            goto LABEL_747;
          }
        }
      }
LABEL_24:
      uint64_t v516 = v3;
      sub_1CCEB1784((uint64_t)v570, (uint64_t **)v3, (uint64_t)v2, (unint64_t)*(v2 - 4), (uint64_t)*v2);
      v583 = (void **)v585;
      uint64_t v584 = 0x800000000;
      sub_1CD42769C((uint64_t)&v583, v526);
      if (v526)
      {
        uint64_t v19 = 0;
        uint64_t v20 = 1 << SLOBYTE(v545[0]);
        unsigned int v21 = (v2 >> 4) ^ (v2 >> 9);
        uint64_t v22 = v545[1];
        while (1)
        {
          uint64_t v23 = v522[3];
          uint64_t v24 = sub_1CCEB1928((uint64_t)v570, v19);
          if ((*((unsigned char *)v18 + 23) & 0x10) == 0)
          {
            BOOL v35 = 0;
            unsigned int v34 = &byte_1CFBCE98E;
            goto LABEL_35;
          }
          uint64_t v25 = **(void **)*v18;
          uint64_t v26 = *(void *)(v25 + 152);
          uint64_t v27 = *(unsigned int *)(v25 + 168);
          if (!v27) {
            goto LABEL_33;
          }
          LODWORD(v28) = (v27 - 1) & v21;
          long long v29 = (uint64_t **)(v26 + 16 * v28);
          unint64_t v30 = *v29;
          if (*v29 != v18) {
            break;
          }
LABEL_34:
          uint64_t v33 = v29[1];
          uint64_t v36 = *v33;
          unsigned int v34 = (char *)(v33 + 2);
          BOOL v35 = (uint64_t **)v36;
LABEL_35:
          __int16 v537 = 773;
          v534 = v34;
          v535 = v35;
          v536 = ".i";
          v538 = (char *)&v534;
          v540 = v19;
          __int16 v542 = 2050;
          unsigned int v37 = operator new(0x60uLL);
          v37[13] = v37[13] & 0x38000000 | 1;
          uint64_t v38 = (llvm::Instruction *)(v37 + 8);
          *(void *)unsigned int v37 = 0;
          *((void *)v37 + 1) = 0;
          *((void *)v37 + 2) = 0;
          *((void *)v37 + 3) = v37 + 8;
          LOWORD(v549) = 257;
          llvm::LoadInst::LoadInst((llvm::Value *)(v37 + 8), v23, (uint64_t)v24, (const char **)v547, 0, 63 - __clz((((void)v19 * v22) | v20) & -(((void)v19 * v22) | v20)), 0);
          (*(void (**)(void *, llvm::Instruction *, char **, uint64_t **, void ***))(*v561 + 16))(v561, v38, &v538, v557, v558);
          if (v554)
          {
            uint64_t v39 = (llvm::MDNode **)v553;
            uint64_t v40 = (llvm::MDNode **)((char *)v553 + 16 * v554);
            do
            {
              llvm::Instruction::setMetadata(v38, *(_DWORD *)v39, v39[1]);
              v39 += 2;
            }
            while (v39 != v40);
          }
          v583[(void)v19++] = v38;
          if (v19 == (const char *)v526) {
            goto LABEL_595;
          }
        }
        int v31 = 1;
        while (v30 != (uint64_t *)-4096)
        {
          int v32 = v28 + v31++;
          uint64_t v28 = v32 & (v27 - 1);
          unint64_t v30 = *(uint64_t **)(v26 + 16 * v28);
          if (v30 == v18)
          {
            long long v29 = (uint64_t **)(v26 + 16 * v28);
            goto LABEL_34;
          }
        }
LABEL_33:
        long long v29 = (uint64_t **)(v26 + 16 * v27);
        goto LABEL_34;
      }
LABEL_595:
      sub_1CCEB1F88(v516, v18, (uint64_t *)&v583);
      if (v583 != v585) {
        free(v583);
      }
      if (v573 != v575) {
        free(v573);
      }
      v229 = v553;
      goto LABEL_607;
    case '=':
      if (!*(unsigned char *)(a1 + 1097)) {
        return 0;
      }
      unint64_t v49 = *((unsigned __int16 *)a2 + 9);
      if ((v49 & 0x381) != 0) {
        return 0;
      }
      int v50 = *(a2 - 8);
      sub_1CCEB282C((uint64_t)&v538, *v50, (v49 >> 1) & 0x3F, *(void *)(a2[5][7] + 40) + 272);
      unint64_t v4 = (_BYTE)v542 != 0;
      if (!(_BYTE)v542) {
        return v4;
      }
      int v51 = 0;
      unint64_t v52 = *((unsigned int *)v538 + 8);
      uint64_t v53 = **v2;
      v553 = v555;
      uint64_t v554 = 0x200000000;
      v559 = v53;
      v560 = &v568;
      v561 = v569;
      uint64_t v562 = 0;
      int v563 = 0;
      __int16 v564 = 512;
      char v565 = 7;
      uint64_t v566 = 0;
      uint64_t v567 = 0;
      v568 = &unk_1F2616E88;
      v569[0] = &unk_1F2617008;
      int v54 = (char *)v2[6];
      v557 = v2[5];
      v558 = v2 + 3;
      v583 = (void **)v54;
      if (v54)
      {
        llvm::MetadataTracking::track((uint64_t)&v583, (unsigned __int8 *)v54, 2);
        int v51 = (const char *)v583;
      }
      sub_1CB8461A4((uint64_t)&v553, 0, (uint64_t)v51);
      if (!v583) {
        goto LABEL_63;
      }
      int v506 = *(unsigned __int8 *)v583;
      if ((v506 - 4) > 0x1E)
      {
        if ((v506 - 3) >= 0xFFFFFFFE) {
          v510 = (const char *)v583;
        }
        else {
          v510 = 0;
        }
        if ((v506 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v508 = (unint64_t)(v510 + 8);
LABEL_753:
          v570[0] = (uint64_t)&v583;
          sub_1CC5FA668(v508 + 16, v570);
          goto LABEL_63;
        }
        if (v506 == 3) {
          v583[1] = 0;
        }
      }
      else if ((*((unsigned char *)v583 + 1) & 0x7F) == 2 || *((_DWORD *)v583 + 3))
      {
        unint64_t v507 = (unint64_t)v583[2];
        if ((v507 & 4) != 0)
        {
          unint64_t v508 = v507 & 0xFFFFFFFFFFFFFFF8;
          if (v508) {
            goto LABEL_753;
          }
        }
      }
LABEL_63:
      sub_1CCEB1784((uint64_t)v570, (uint64_t **)v3, (uint64_t)v2, (unint64_t)*(v2 - 4), *v50);
      uint64_t v517 = v3;
      sub_1CCEB1784((uint64_t)&v583, (uint64_t **)v3, (uint64_t)v2, (unint64_t)v50, 0);
      v547[0] = &v548;
      v547[1] = (void *)0x800000000;
      sub_1CD42769C((uint64_t)v547, v52);
      if (v52)
      {
        uint64_t v55 = 0;
        uint64_t v56 = v541;
        uint64_t v57 = 1 << (char)v540;
        do
        {
          uint64_t v58 = sub_1CCEB1928((uint64_t)&v583, v55);
          int v59 = sub_1CCEB1928((uint64_t)v570, v55);
          uint64_t v60 = (char *)operator new(0x80uLL);
          *((_DWORD *)v60 + 21) = *((_DWORD *)v60 + 21) & 0x38000000 | 2;
          *(void *)uint64_t v60 = 0;
          *((void *)v60 + 2) = 0;
          *((void *)v60 + 1) = 0;
          *((void *)v60 + 5) = 0;
          *((void *)v60 + 6) = 0;
          *((void *)v60 + 4) = 0;
          unint64_t v61 = (const llvm::APInt **)(v60 + 32);
          *((void *)v60 + 8) = ***(void ***)v58 + 1576;
          uint64_t v62 = (llvm::Instruction *)(v60 + 64);
          *((void *)v60 + 3) = v60 + 64;
          *((void *)v60 + 7) = v60 + 64;
          *((void *)v60 + 9) = 0;
          v60[80] = 61;
          v60[81] = 0;
          *((_WORD *)v60 + 41) = 0;
          *((_DWORD *)v60 + 21) = 2;
          *(_OWORD *)(v60 + 88) = 0u;
          *(_OWORD *)(v60 + 104) = 0u;
          *((_DWORD *)v60 + 30) = 0;
          *(void *)uint64_t v60 = v58;
          uint64_t v65 = *((void *)v58 + 1);
          int v64 = (void *)((char *)v58 + 8);
          uint64_t v63 = v65;
          *((void *)v60 + 1) = v65;
          if (v65) {
            *(void *)(v63 + 16) = v60 + 8;
          }
          *((void *)v60 + 2) = v64;
          *int v64 = v60;
          if (*((void *)v60 + 4))
          {
            **((void **)v60 + 6) = *((void *)v60 + 5);
            uint64_t v72 = *((void *)v60 + 5);
            if (v72) {
              *(void *)(v72 + 16) = *((void *)v60 + 6);
            }
          }
          uint64_t v66 = v2;
          *unint64_t v61 = v59;
          if (v59)
          {
            uint64_t v69 = *((void *)v59 + 1);
            __int16 v68 = (const llvm::APInt ***)((char *)v59 + 8);
            uint64_t v67 = v69;
            *((void *)v60 + 5) = v69;
            if (v69) {
              *(void *)(v67 + 16) = v60 + 40;
            }
            *((void *)v60 + 6) = v68;
            *__int16 v68 = v61;
          }
          *((_WORD *)v60 + 41) = (126 - 2 * __clz(((v55 * v56) | v57) & -((v55 * v56) | v57))) & 0x7E;
          v60[124] = 1;
          __int16 v546 = 257;
          (*(void (**)(void *, llvm::Instruction *, void **, uint64_t **, void ***))(*v561 + 16))(v561, v62, &v543, v557, v558);
          if (v554)
          {
            unsigned int v70 = (llvm::MDNode **)v553;
            unint64_t v71 = (llvm::MDNode **)((char *)v553 + 16 * v554);
            do
            {
              llvm::Instruction::setMetadata(v62, *(_DWORD *)v70, v70[1]);
              v70 += 2;
            }
            while (v70 != v71);
          }
          *((void *)v547[0] + v55++) = v62;
          unint64_t v2 = v66;
        }
        while (v55 != v52);
      }
      sub_1CCEB21A4(v517, (uint64_t)v2, (uint64_t)v547);
      if (v547[0] != &v548) {
        free(v547[0]);
      }
      if (v587 != v588) {
        free(v587);
      }
      if (v573 != v575) {
        free(v573);
      }
      v229 = v553;
LABEL_607:
      if (v229 != v555) {
        goto LABEL_608;
      }
      return v4;
    case '>':
      uint64_t v173 = (uint64_t)*a2;
      if (*a2) {
        BOOL v174 = ((*a2)[1] & 0xFE) == 18;
      }
      else {
        BOOL v174 = 0;
      }
      if (!v174) {
        return 0;
      }
      v175 = 0;
      uint64_t v176 = *(void *)v173;
      v570[0] = (uint64_t)v571;
      v570[1] = 0x200000000;
      v575[1] = v176;
      v575[2] = &v581;
      v575[3] = &v582;
      v575[4] = 0;
      int v576 = 0;
      __int16 v577 = 512;
      char v578 = 7;
      uint64_t v580 = 0;
      uint64_t v579 = 0;
      v581 = &unk_1F2616E88;
      v582 = &unk_1F2617008;
      v178 = a2[5];
      uint64_t v177 = (char *)a2[6];
      v574 = v178;
      v575[0] = v2 + 3;
      v583 = (void **)v177;
      if (v177)
      {
        llvm::MetadataTracking::track((uint64_t)&v583, (unsigned __int8 *)v177, 2);
        v175 = (const char *)v583;
      }
      sub_1CB8461A4((uint64_t)v570, 0, (uint64_t)v175);
      if (!v583) {
        goto LABEL_217;
      }
      int v489 = *(unsigned __int8 *)v583;
      if ((v489 - 4) > 0x1E)
      {
        if ((v489 - 3) >= 0xFFFFFFFE) {
          v501 = (const char *)v583;
        }
        else {
          v501 = 0;
        }
        if ((v489 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v491 = (unint64_t)(v501 + 8);
LABEL_707:
          v553 = &v583;
          sub_1CC5FA668(v491 + 16, &v553);
          goto LABEL_217;
        }
        if (v489 == 3) {
          v583[1] = 0;
        }
      }
      else if ((*((unsigned char *)v583 + 1) & 0x7F) == 2 || *((_DWORD *)v583 + 3))
      {
        unint64_t v490 = (unint64_t)v583[2];
        if ((v490 & 4) != 0)
        {
          unint64_t v491 = v490 & 0xFFFFFFFFFFFFFFF8;
          if (v491) {
            goto LABEL_707;
          }
        }
      }
LABEL_217:
      unint64_t v179 = *(unsigned int *)(v173 + 32);
      uint64_t v180 = *((_DWORD *)v2 + 5) & 0x7FFFFFF;
      unint64_t v515 = (v180 - 1);
      VectorSplat = (unsigned __int8 *)v2[-4 * v180];
      if ((*(_DWORD *)(*(void *)VectorSplat + 8) & 0xFE) != 0x12)
      {
        v555[8] = 257;
        VectorSplat = (unsigned __int8 *)llvm::IRBuilderBase::CreateVectorSplat((uint64_t)v570, (llvm::Type *)v179, VectorSplat, (uint64_t)&v553);
      }
      sub_1CCEB1784((uint64_t)&v583, (uint64_t **)v3, (uint64_t)v2, (unint64_t)VectorSplat, 0);
      v553 = v555;
      uint64_t v554 = 0x800000000;
      sub_1CCEB2910((char **)&v553, v515);
      unint64_t v182 = v515 << 7;
      if (v515)
      {
        v524 = (llvm::Type *)v179;
        uint64_t v183 = 0;
        BOOL v184 = v2 + 4;
        do
        {
          v185 = (unsigned __int8 *)v184[-4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF)];
          if ((*(_DWORD *)(*(void *)v185 + 8) & 0xFE) != 0x12)
          {
            LOWORD(v549) = 257;
            v185 = (unsigned __int8 *)llvm::IRBuilderBase::CreateVectorSplat((uint64_t)v570, v524, v185, (uint64_t)v547);
          }
          sub_1CCEB1784((uint64_t)v547, (uint64_t **)v3, (uint64_t)v2, (unint64_t)v185, 0);
          v186 = (char *)v553;
          v187 = (char *)v553 + v183;
          long long v188 = *(_OWORD *)v547;
          long long v189 = v548;
          *((void *)v187 + 4) = v549;
          *(_OWORD *)v187 = v188;
          *((_OWORD *)v187 + 1) = v189;
          __int16 v190 = (void **)(v187 + 40);
          v191 = v550;
          if (v187 + 40 != (char *)&v550)
          {
            if (v550 == v552)
            {
              unint64_t v192 = v3;
              int v193 = v551;
              v194 = &v186[v183];
              uint64_t v195 = *(unsigned int *)&v186[v183 + 48];
              if (v195 >= v551)
              {
                if (v551) {
                  memmove(*v190, v552, 8 * v551);
                }
              }
              else
              {
                if (*((_DWORD *)v194 + 13) < v551)
                {
                  *((_DWORD *)v194 + 12) = 0;
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                if (v195) {
                  memmove(*v190, v552, 8 * v195);
                }
                else {
                  uint64_t v195 = 0;
                }
                if (v195 != v551) {
                  memcpy((char *)*v190 + 8 * v195, (char *)v550 + 8 * v195, 8 * v551 - 8 * v195);
                }
              }
              *((_DWORD *)v194 + 12) = v193;
              unint64_t v3 = v192;
              unint64_t v182 = v515 << 7;
            }
            else
            {
              v196 = &v186[v183];
              if (&v186[v183 + 56] != *v190)
              {
                free(*v190);
                v191 = v550;
              }
              *__int16 v190 = v191;
              *((void *)v196 + 6) = v551;
              v550 = v552;
              HIDWORD(v551) = 0;
            }
            LODWORD(v551) = 0;
            v191 = v550;
          }
          *((_DWORD *)v187 + 30) = v552[16];
          if (v191 != v552) {
            free(v191);
          }
          v183 += 128;
          v184 += 4;
        }
        while (v182 != v183);
        unint64_t v179 = (unint64_t)v524;
      }
      v547[0] = &v548;
      v547[1] = (void *)0x800000000;
      sub_1CD42769C((uint64_t)v547, v179);
      if (!v179)
      {
LABEL_490:
        sub_1CCEB1F88(v3, (uint64_t *)v2, (uint64_t *)v547);
        if (v547[0] != &v548) {
          free(v547[0]);
        }
        v396 = (char *)v553;
        if (v554)
        {
          unint64_t v397 = (unint64_t)v554 << 7;
          do
          {
            v398 = *(char **)&v396[v397 - 88];
            if (&v396[v397 - 72] != v398) {
              free(v398);
            }
            v397 -= 128;
          }
          while (v397);
          v396 = (char *)v553;
        }
        if (v396 != (char *)v555) {
          free(v396);
        }
        if (v587 != v588) {
          free(v587);
        }
        uint64_t v47 = (void *)v570[0];
        uint64_t v48 = v571;
        goto LABEL_593;
      }
      v376 = 0;
      while (1)
      {
        v543 = v545;
        uint64_t v544 = 0x800000000;
        sub_1CD42769C((uint64_t)&v543, v515);
        if (v515)
        {
          uint64_t v377 = 0;
          uint64_t v378 = 0;
          do
          {
            v379 = sub_1CCEB1928((uint64_t)v553 + v378, v376);
            *(void *)((char *)v543 + v377) = v379;
            v378 += 128;
            v377 += 8;
          }
          while (v515 << 7 != v378);
        }
        uint64_t v380 = (uint64_t)v2[8];
        v381 = (uint64_t *)sub_1CCEB1928((uint64_t)&v583, v376);
        if ((*((unsigned char *)v2 + 23) & 0x10) != 0) {
          break;
        }
        v391 = 0;
        v392 = &byte_1CFBCE98E;
LABEL_481:
        __int16 v537 = 773;
        v534 = v392;
        v535 = v391;
        v536 = ".i";
        v538 = (char *)&v534;
        v540 = v376;
        __int16 v542 = 2050;
        uint64_t v394 = sub_1CC27CEC0(v570, v380, v381, (uint64_t *)v543, v544, (uint64_t)&v538);
        *((void *)v547[0] + (void)v376) = v394;
        if ((*((unsigned char *)v2 + 17) & 2) != 0)
        {
          uint64_t v395 = *((void *)v547[0] + (void)v376);
          if (v395)
          {
            if (*(unsigned char *)(v395 + 16) == 62) {
              *(unsigned char *)(v395 + 17) |= 2u;
            }
          }
        }
        if (v543 != v545) {
          free(v543);
        }
        if (++v376 == (const char *)v179) {
          goto LABEL_490;
        }
      }
      uint64_t v382 = ***v2;
      uint64_t v383 = *(void *)(v382 + 152);
      uint64_t v384 = *(unsigned int *)(v382 + 168);
      if (!v384) {
        goto LABEL_479;
      }
      LODWORD(v385) = (v384 - 1) & ((v2 >> 4) ^ (v2 >> 9));
      v386 = (uint64_t ****)(v383 + 16 * v385);
      v387 = *v386;
      if (*v386 != v2)
      {
        int v388 = 1;
        while (v387 != (uint64_t ***)-4096)
        {
          int v389 = v385 + v388++;
          uint64_t v385 = v389 & (v384 - 1);
          v387 = *(uint64_t ****)(v383 + 16 * v385);
          if (v387 == v2)
          {
            v386 = (uint64_t ****)(v383 + 16 * v385);
            goto LABEL_480;
          }
        }
LABEL_479:
        v386 = (uint64_t ****)(v383 + 16 * v384);
      }
LABEL_480:
      v390 = v386[1];
      v393 = *v390;
      v392 = (char *)(v390 + 2);
      v391 = v393;
      goto LABEL_481;
    case 'B':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'N':
      return sub_1CCEB2BA0((uint64_t **)a1, (uint64_t *)a2);
    case 'M':
      if (((*a2)[1] & 0xFE) == 0x12) {
        uint64_t v73 = (uint64_t)*a2;
      }
      else {
        uint64_t v73 = 0;
      }
      if ((*(_DWORD *)(**(a2 - 4) + 8) & 0xFE) == 0x12) {
        uint64_t v74 = **(a2 - 4);
      }
      else {
        uint64_t v74 = 0;
      }
      if (v73) {
        BOOL v75 = v74 == 0;
      }
      else {
        BOOL v75 = 1;
      }
      if (v75) {
        return 0;
      }
      uint64_t v76 = 0;
      unint64_t v77 = *(unsigned int *)(v73 + 32);
      unsigned int v78 = *(_DWORD *)(v74 + 32);
      uint64_t v79 = (uint64_t *)**a2;
      v553 = v555;
      uint64_t v554 = 0x200000000;
      v559 = v79;
      v560 = &v568;
      v561 = v569;
      uint64_t v562 = 0;
      int v563 = 0;
      __int16 v564 = 512;
      char v565 = 7;
      uint64_t v566 = 0;
      uint64_t v567 = 0;
      v568 = &unk_1F2616E88;
      v569[0] = &unk_1F2617008;
      int v80 = (char *)a2[6];
      v557 = v2[5];
      v558 = v2 + 3;
      v583 = (void **)v80;
      if (v80)
      {
        llvm::MetadataTracking::track((uint64_t)&v583, (unsigned __int8 *)v80, 2);
        uint64_t v76 = (const char *)v583;
      }
      sub_1CB8461A4((uint64_t)&v553, 0, (uint64_t)v76);
      unint64_t v512 = v77;
      uint64_t v513 = v73;
      if (!v583) {
        goto LABEL_93;
      }
      unint64_t v4 = (unint64_t)v2;
      int v474 = *(unsigned __int8 *)v583;
      if ((v474 - 4) > 0x1E)
      {
        if ((v474 - 3) >= 0xFFFFFFFE) {
          v496 = (const char *)v583;
        }
        else {
          v496 = 0;
        }
        if ((v474 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v476 = (unint64_t)(v496 + 8);
LABEL_677:
          v570[0] = (uint64_t)&v583;
          sub_1CC5FA668(v476 + 16, v570);
          goto LABEL_93;
        }
        if (v474 == 3) {
          v583[1] = 0;
        }
      }
      else if ((*((unsigned char *)v583 + 1) & 0x7F) == 2 || *((_DWORD *)v583 + 3))
      {
        unint64_t v475 = (unint64_t)v583[2];
        if ((v475 & 4) != 0)
        {
          unint64_t v476 = v475 & 0xFFFFFFFFFFFFFFF8;
          if (v476) {
            goto LABEL_677;
          }
        }
      }
LABEL_93:
      sub_1CCEB1784((uint64_t)v570, (uint64_t **)v3, (uint64_t)v2, (unint64_t)*(v2 - 4), 0);
      v547[0] = &v548;
      v547[1] = (void *)0x800000000;
      sub_1CD42769C((uint64_t)v547, v77);
      uint64_t v518 = v3;
      if (v77 == v78)
      {
        if (!v77) {
          goto LABEL_588;
        }
        uint64_t v81 = 0;
        while (1)
        {
          uint64_t v82 = sub_1CCEB1928((uint64_t)v570, v81);
          int v83 = (unsigned __int8 *)v82;
          if ((*((unsigned char *)v2 + 23) & 0x10) == 0)
          {
            uint64_t v93 = 0;
            uint64_t v94 = &byte_1CFBCE98E;
            goto LABEL_105;
          }
          uint64_t v84 = ***v2;
          uint64_t v85 = *(void *)(v84 + 152);
          uint64_t v86 = *(unsigned int *)(v84 + 168);
          if (!v86) {
            goto LABEL_103;
          }
          LODWORD(v87) = (v86 - 1) & ((v2 >> 4) ^ (v2 >> 9));
          int v88 = (uint64_t ****)(v85 + 16 * v87);
          int64_t v89 = *v88;
          if (*v88 != v2) {
            break;
          }
LABEL_104:
          char v92 = v88[1];
          int v95 = *v92;
          uint64_t v94 = (char *)(v92 + 2);
          uint64_t v93 = v95;
LABEL_105:
          uint64_t v96 = *(void *)(v513 + 24);
          __int16 v542 = 773;
          v538 = v94;
          v539 = v93;
          v540 = ".i";
          v543 = &v538;
          v545[0] = v81;
          __int16 v546 = 2050;
          if (*(void *)v82 != v96)
          {
            if (*((unsigned __int8 *)v82 + 16) <= 0x14u)
            {
              int v83 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, const llvm::APInt *, uint64_t))*v560
                                        + 28))(v560, 49, v82, v96);
              if (v83) {
                BOOL v98 = v83[16] >= 0x1Cu;
              }
              else {
                BOOL v98 = 0;
              }
              if (v98)
              {
                (*(void (**)(void *, unsigned __int8 *, void **, uint64_t **, void ***))(*v561 + 16))(v561, v83, &v543, v557, v558);
                if (v554)
                {
                  __int16 v99 = (llvm::MDNode **)v553;
                  v528 = (llvm::MDNode **)((char *)v553 + 16 * v554);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v83, *(_DWORD *)v99, v99[1]);
                    v99 += 2;
                  }
                  while (v99 != v528);
                }
              }
            }
            else
            {
              __int16 v586 = 257;
              int v83 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v82, v96, (const char **)&v583, 0);
              (*(void (**)(void *, unsigned __int8 *, void **, uint64_t **, void ***))(*v561 + 16))(v561, v83, &v543, v557, v558);
              if (v554)
              {
                __n128 v97 = (llvm::MDNode **)v553;
                v527 = (llvm::MDNode **)((char *)v553 + 16 * v554);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v83, *(_DWORD *)v97, v97[1]);
                  v97 += 2;
                }
                while (v97 != v527);
              }
            }
          }
          *((void *)v547[0] + v81++) = v83;
          if (v81 == v77) {
            goto LABEL_588;
          }
        }
        int v90 = 1;
        while (v89 != (uint64_t ***)-4096)
        {
          int v91 = v87 + v90++;
          uint64_t v87 = v91 & (v86 - 1);
          int64_t v89 = *(uint64_t ****)(v85 + 16 * v87);
          if (v89 == v2)
          {
            int v88 = (uint64_t ****)(v85 + 16 * v87);
            goto LABEL_104;
          }
        }
LABEL_103:
        int v88 = (uint64_t ****)(v85 + 16 * v86);
        goto LABEL_104;
      }
      if (v77 > v78)
      {
        v285 = *(llvm::FixedVectorType **)(v73 + 24);
        unsigned int v286 = v77 / v78;
        llvm::FixedVectorType::get(v285, (llvm::Type *)(v77 / v78));
        uint64_t v288 = v287;
        unsigned int v289 = 0;
        int v290 = 0;
        if (v286 <= 1) {
          int v291 = 1;
        }
        else {
          int v291 = v286;
        }
        while (1)
        {
          v292 = (unsigned __int8 *)sub_1CCEB1928((uint64_t)v570, v289);
          if (v292)
          {
            do
            {
              if (v292[16] != 77) {
                break;
              }
              int v293 = *((_DWORD *)v292 + 5);
              v294 = (v293 & 0x40000000) != 0
                   ? (unsigned __int8 **)*((void *)v292 - 1)
                   : (unsigned __int8 **)&v292[-32 * (v293 & 0x7FFFFFF)];
              v292 = *v294;
            }
            while (*v294);
          }
          if ((v292[23] & 0x10) == 0)
          {
            uint64_t v304 = 0;
            v305 = &byte_1CFBCE98E;
            goto LABEL_378;
          }
          uint64_t v295 = ***(void ***)v292;
          uint64_t v296 = *(void *)(v295 + 152);
          uint64_t v297 = *(unsigned int *)(v295 + 168);
          if (!v297) {
            goto LABEL_376;
          }
          LODWORD(v298) = (v297 - 1) & ((v292 >> 4) ^ (v292 >> 9));
          v299 = (unsigned __int8 **)(v296 + 16 * v298);
          v300 = *v299;
          if (*v299 != v292) {
            break;
          }
LABEL_377:
          v303 = v299[1];
          uint64_t v306 = *(void *)v303;
          v305 = (char *)(v303 + 16);
          uint64_t v304 = v306;
LABEL_378:
          __int16 v546 = 773;
          v543 = v305;
          uint64_t v544 = v304;
          v545[0] = ".cast";
          if (*(void *)v292 != v288)
          {
            if (v292[16] <= 0x14u)
            {
              v292 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v560
                                         + 28))(v560, 49, v292, v288);
              if (v292) {
                BOOL v308 = v292[16] >= 0x1Cu;
              }
              else {
                BOOL v308 = 0;
              }
              if (v308)
              {
                (*(void (**)(void *, unsigned __int8 *, void **, uint64_t **, void ***))(*v561 + 16))(v561, v292, &v543, v557, v558);
                if (v554)
                {
                  v311 = (llvm::MDNode **)v553;
                  v531 = (llvm::MDNode **)((char *)v553 + 16 * v554);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v292, *(_DWORD *)v311, v311[1]);
                    v311 += 2;
                  }
                  while (v311 != v531);
                }
              }
            }
            else
            {
              __int16 v586 = 257;
              v292 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v292, v288, (const char **)&v583, 0);
              (*(void (**)(void *, unsigned __int8 *, void **, uint64_t **, void ***))(*v561 + 16))(v561, v292, &v543, v557, v558);
              if (v554)
              {
                v307 = (llvm::MDNode **)v553;
                v530 = (llvm::MDNode **)((char *)v553 + 16 * v554);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v292, *(_DWORD *)v307, v307[1]);
                  v307 += 2;
                }
                while (v307 != v530);
              }
            }
          }
          sub_1CCEB1784((uint64_t)&v583, (uint64_t **)v3, (uint64_t)v2, (unint64_t)v292, 0);
          for (unsigned int j = 0; j != v291; ++j)
          {
            v310 = sub_1CCEB1928((uint64_t)&v583, j);
            *((void *)v547[0] + v290 + j) = v310;
          }
          if (v587 != v588) {
            free(v587);
          }
          v290 += j;
          if (++v289 == v78) {
            goto LABEL_588;
          }
        }
        int v301 = 1;
        while (v300 != (unsigned __int8 *)-4096)
        {
          int v302 = v298 + v301++;
          uint64_t v298 = v302 & (v297 - 1);
          v300 = *(unsigned __int8 **)(v296 + 16 * v298);
          if (v300 == v292)
          {
            v299 = (unsigned __int8 **)(v296 + 16 * v298);
            goto LABEL_377;
          }
        }
LABEL_376:
        v299 = (unsigned __int8 **)(v296 + 16 * v297);
        goto LABEL_377;
      }
      v420 = (llvm::Type *)(v78 / v77);
      llvm::FixedVectorType::get(*(llvm::FixedVectorType **)(v74 + 24), v420);
      v511 = v422;
      if (!v77) {
        goto LABEL_588;
      }
      uint64_t v423 = 0;
      unsigned int v424 = 0;
      if (v420 <= 1) {
        uint64_t v425 = 1;
      }
      else {
        uint64_t v425 = v420;
      }
      uint64_t v525 = v425;
      unsigned int v532 = (v2 >> 4) ^ (v2 >> 9);
LABEL_539:
      v426 = (unsigned __int8 *)llvm::PoisonValue::get(v511, v421);
      uint64_t v427 = 0;
      while (1)
      {
        v429 = (unsigned __int8 *)sub_1CCEB1928((uint64_t)v570, v424);
        v430 = *(llvm::ConstantInt **)(*v559 + 1960);
        unsigned int v431 = *(_DWORD *)(*v559 + 1968);
        LODWORD(v584) = v431 >> 8;
        if (v431 >> 8 > 0x40) {
          operator new[]();
        }
        if (v431 <= 0xFF) {
          unint64_t v432 = 0;
        }
        else {
          unint64_t v432 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v431) + 63);
        }
        v583 = (void **)(v432 & v427);
        v433 = (unsigned __int8 *)llvm::ConstantInt::get(v430, (llvm::LLVMContext *)&v583, v428);
        if (v584 >= 0x41 && v583)
        {
          v447 = v2;
          v448 = v433;
          MEMORY[0x1D25D9CB0](v583, 0x1000C8000313F17);
          v433 = v448;
          unint64_t v2 = v447;
        }
        if ((*((unsigned char *)v2 + 23) & 0x10) == 0)
        {
          v443 = 0;
          v444 = &byte_1CFBCE98E;
          goto LABEL_554;
        }
        uint64_t v434 = ***v2;
        uint64_t v435 = *(void *)(v434 + 152);
        uint64_t v436 = *(unsigned int *)(v434 + 168);
        if (!v436) {
          goto LABEL_552;
        }
        LODWORD(v437) = (v436 - 1) & v532;
        v438 = (uint64_t ****)(v435 + 16 * v437);
        v439 = *v438;
        if (*v438 != v2) {
          break;
        }
LABEL_553:
        v442 = v438[1];
        v445 = *v442;
        v444 = (char *)(v442 + 2);
        v443 = v445;
LABEL_554:
        ++v424;
        __int16 v537 = 773;
        v534 = v444;
        v535 = v443;
        v536 = ".i";
        unint64_t v4 = v4 & 0xFFFFFFFF00000000 | v423;
        v538 = (char *)&v534;
        v540 = (const char *)v4;
        __int16 v542 = 2050;
        v543 = &v538;
        v545[0] = ".upto";
        __int16 v546 = 770;
        unint64_t v3 = v427 | v3 & 0xFFFFFFFF00000000;
        v583 = &v543;
        v585[0] = v3;
        __int16 v586 = 2050;
        v446 = sub_1CB84478C((uint64_t)&v553, v426, v429, v433, (uint64_t)&v583);
        v426 = (unsigned __int8 *)v446;
        if (++v427 == v525)
        {
          unint64_t v449 = v512;
          uint64_t v450 = *(void *)(v513 + 24);
          if ((*((unsigned char *)v2 + 23) & 0x10) != 0)
          {
            uint64_t v451 = ***v2;
            uint64_t v452 = *(void *)(v451 + 152);
            uint64_t v453 = *(unsigned int *)(v451 + 168);
            if (!v453) {
              goto LABEL_567;
            }
            LODWORD(v454) = (v453 - 1) & v532;
            v455 = (uint64_t ****)(v452 + 16 * v454);
            v456 = *v455;
            if (*v455 != v2)
            {
              int v457 = 1;
              while (v456 != (uint64_t ***)-4096)
              {
                int v458 = v454 + v457++;
                uint64_t v454 = v458 & (v453 - 1);
                v456 = *(uint64_t ****)(v452 + 16 * v454);
                if (v456 == v2)
                {
                  v455 = (uint64_t ****)(v452 + 16 * v454);
                  goto LABEL_568;
                }
              }
LABEL_567:
              v455 = (uint64_t ****)(v452 + 16 * v453);
            }
LABEL_568:
            v459 = v455[1];
            v462 = *v459;
            v461 = (char *)(v459 + 2);
            v460 = v462;
          }
          else
          {
            v460 = 0;
            v461 = &byte_1CFBCE98E;
          }
          __int16 v542 = 773;
          v538 = v461;
          v539 = v460;
          v540 = ".i";
          v543 = &v538;
          v545[0] = v423;
          __int16 v546 = 2050;
          if (*(void *)v446 != v450)
          {
            if (*((unsigned __int8 *)v446 + 16) <= 0x14u)
            {
              v426 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v560
                                         + 28))(v560, 49, v446, v450);
              if (v426) {
                BOOL v464 = v426[16] >= 0x1Cu;
              }
              else {
                BOOL v464 = 0;
              }
              if (v464)
              {
                v467 = v2;
                (*(void (**)(void *, unsigned __int8 *, void **, uint64_t **, void ***))(*v561 + 16))(v561, v426, &v543, v557, v558);
                if (v554)
                {
                  v468 = (llvm::MDNode **)v553;
                  v469 = (llvm::MDNode **)((char *)v553 + 16 * v554);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v426, *(_DWORD *)v468, v468[1]);
                    v468 += 2;
                  }
                  while (v468 != v469);
                }
                unint64_t v2 = v467;
                unint64_t v449 = v512;
              }
            }
            else
            {
              v463 = v2;
              __int16 v586 = 257;
              v426 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v446, v450, (const char **)&v583, 0);
              (*(void (**)(void *, unsigned __int8 *, void **, uint64_t **, void ***))(*v561 + 16))(v561, v426, &v543, v557, v558);
              if (v554)
              {
                v465 = (llvm::MDNode **)v553;
                v466 = (llvm::MDNode **)((char *)v553 + 16 * v554);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v426, *(_DWORD *)v465, v465[1]);
                  v465 += 2;
                }
                while (v465 != v466);
              }
              unint64_t v2 = v463;
            }
          }
          *((void *)v547[0] + v423++) = v426;
          if (v423 == v449)
          {
LABEL_588:
            sub_1CCEB1F88(v518, (uint64_t *)v2, (uint64_t *)v547);
            if (v547[0] != &v548) {
              free(v547[0]);
            }
            if (v573 != v575) {
              free(v573);
            }
            uint64_t v47 = v553;
            uint64_t v48 = v555;
            goto LABEL_593;
          }
          goto LABEL_539;
        }
      }
      int v440 = 1;
      while (v439 != (uint64_t ***)-4096)
      {
        int v441 = v437 + v440++;
        uint64_t v437 = v441 & (v436 - 1);
        v439 = *(uint64_t ****)(v435 + 16 * v437);
        if (v439 == v2)
        {
          v438 = (uint64_t ****)(v435 + 16 * v437);
          goto LABEL_553;
        }
      }
LABEL_552:
      v438 = (uint64_t ****)(v435 + 16 * v436);
      goto LABEL_553;
    case 'Q':
      uint64_t v197 = (uint64_t)*a2;
      if (*a2) {
        BOOL v198 = ((*a2)[1] & 0xFE) == 18;
      }
      else {
        BOOL v198 = 0;
      }
      if (!v198) {
        return 0;
      }
      v264 = 0;
      unint64_t v265 = *(unsigned int *)(v197 + 32);
      v266 = *(uint64_t **)v197;
      v553 = v555;
      uint64_t v554 = 0x200000000;
      v559 = v266;
      v560 = &v568;
      v561 = v569;
      uint64_t v562 = 0;
      int v563 = 0;
      __int16 v564 = 512;
      char v565 = 7;
      uint64_t v566 = 0;
      uint64_t v567 = 0;
      v568 = &unk_1F2616E88;
      v569[0] = &unk_1F2617008;
      v267 = (char *)a2[6];
      v557 = v2[5];
      v558 = v2 + 3;
      v583 = (void **)v267;
      if (v267)
      {
        llvm::MetadataTracking::track((uint64_t)&v583, (unsigned __int8 *)v267, 2);
        v264 = (const char *)v583;
      }
      sub_1CB8461A4((uint64_t)&v553, 0, (uint64_t)v264);
      if (!v583) {
        goto LABEL_336;
      }
      int v492 = *(unsigned __int8 *)v583;
      if ((v492 - 4) > 0x1E)
      {
        if ((v492 - 3) >= 0xFFFFFFFE) {
          v502 = (const char *)v583;
        }
        else {
          v502 = 0;
        }
        if ((v492 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v494 = (unint64_t)(v502 + 8);
LABEL_713:
          v570[0] = (uint64_t)&v583;
          sub_1CC5FA668(v494 + 16, v570);
          goto LABEL_336;
        }
        if (v492 == 3) {
          v583[1] = 0;
        }
      }
      else if ((*((unsigned char *)v583 + 1) & 0x7F) == 2 || *((_DWORD *)v583 + 3))
      {
        unint64_t v493 = (unint64_t)v583[2];
        if ((v493 & 4) != 0)
        {
          unint64_t v494 = v493 & 0xFFFFFFFFFFFFFFF8;
          if (v494) {
            goto LABEL_713;
          }
        }
      }
LABEL_336:
      int v268 = *((_DWORD *)v2 + 5);
      if ((v268 & 0x40000000) != 0) {
        v269 = (unint64_t *)*(v2 - 1);
      }
      else {
        v269 = (unint64_t *)&v2[-4 * (v268 & 0x7FFFFFF)];
      }
      sub_1CCEB1784((uint64_t)v570, (uint64_t **)v3, (uint64_t)v2, *v269, 0);
      int v399 = *((_DWORD *)v2 + 5);
      if ((v399 & 0x40000000) != 0) {
        v400 = (uint64_t ***)*(v2 - 1);
      }
      else {
        v400 = &v2[-4 * (v399 & 0x7FFFFFF)];
      }
      uint64_t v521 = v3;
      sub_1CCEB1784((uint64_t)&v583, (uint64_t **)v3, (uint64_t)v2, (unint64_t)v400[4], 0);
      v547[0] = &v548;
      v547[1] = (void *)0x800000000;
      sub_1CD42769C((uint64_t)v547, v265);
      if (!v265) {
        goto LABEL_521;
      }
      uint64_t v401 = 0;
      while (1)
      {
        v402 = sub_1CCEB1928((uint64_t)v570, v401);
        v403 = sub_1CCEB1928((uint64_t)&v583, v401);
        if ((*((unsigned char *)v2 + 23) & 0x10) == 0)
        {
          v413 = 0;
          v414 = &byte_1CFBCE98E;
          goto LABEL_518;
        }
        uint64_t v404 = ***v2;
        uint64_t v405 = *(void *)(v404 + 152);
        uint64_t v406 = *(unsigned int *)(v404 + 168);
        if (!v406) {
          goto LABEL_516;
        }
        LODWORD(v407) = (v406 - 1) & ((v2 >> 4) ^ (v2 >> 9));
        v408 = (uint64_t ****)(v405 + 16 * v407);
        v409 = *v408;
        if (*v408 != v2) {
          break;
        }
LABEL_517:
        v412 = v408[1];
        v415 = *v412;
        v414 = (char *)(v412 + 2);
        v413 = v415;
LABEL_518:
        __int16 v542 = 773;
        v538 = v414;
        v539 = v413;
        v540 = ".i";
        v543 = &v538;
        v545[0] = v401;
        __int16 v546 = 2050;
        v416 = sub_1CB845F20((uint64_t)&v553, *((_WORD *)v2 + 9) & 0x3F, v402, (uint64_t)v403, (uint64_t)&v543);
        *((void *)v547[0] + v401++) = v416;
        if (v401 == v265) {
          goto LABEL_521;
        }
      }
      int v410 = 1;
      while (v409 != (uint64_t ***)-4096)
      {
        int v411 = v407 + v410++;
        uint64_t v407 = v411 & (v406 - 1);
        v409 = *(uint64_t ****)(v405 + 16 * v407);
        if (v409 == v2)
        {
          v408 = (uint64_t ****)(v405 + 16 * v407);
          goto LABEL_517;
        }
      }
LABEL_516:
      v408 = (uint64_t ****)(v405 + 16 * v406);
      goto LABEL_517;
    case 'R':
      uint64_t v100 = (uint64_t)*a2;
      if (*a2) {
        BOOL v101 = ((*a2)[1] & 0xFE) == 18;
      }
      else {
        BOOL v101 = 0;
      }
      if (!v101) {
        return 0;
      }
      v102 = 0;
      unint64_t v103 = *(unsigned int *)(v100 + 32);
      long long v104 = *(uint64_t **)v100;
      v553 = v555;
      uint64_t v554 = 0x200000000;
      v559 = v104;
      v560 = &v568;
      v561 = v569;
      uint64_t v562 = 0;
      int v563 = 0;
      __int16 v564 = 512;
      char v565 = 7;
      uint64_t v566 = 0;
      uint64_t v567 = 0;
      v568 = &unk_1F2616E88;
      v569[0] = &unk_1F2617008;
      __int16 v105 = (char *)a2[6];
      v557 = v2[5];
      v558 = v2 + 3;
      v583 = (void **)v105;
      if (v105)
      {
        llvm::MetadataTracking::track((uint64_t)&v583, (unsigned __int8 *)v105, 2);
        v102 = (const char *)v583;
      }
      sub_1CB8461A4((uint64_t)&v553, 0, (uint64_t)v102);
      if (!v583) {
        goto LABEL_130;
      }
      int v477 = *(unsigned __int8 *)v583;
      if ((v477 - 4) > 0x1E)
      {
        if ((v477 - 3) >= 0xFFFFFFFE) {
          v497 = (const char *)v583;
        }
        else {
          v497 = 0;
        }
        if ((v477 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v479 = (unint64_t)(v497 + 8);
LABEL_683:
          v570[0] = (uint64_t)&v583;
          sub_1CC5FA668(v479 + 16, v570);
          goto LABEL_130;
        }
        if (v477 == 3) {
          v583[1] = 0;
        }
      }
      else if ((*((unsigned char *)v583 + 1) & 0x7F) == 2 || *((_DWORD *)v583 + 3))
      {
        unint64_t v478 = (unint64_t)v583[2];
        if ((v478 & 4) != 0)
        {
          unint64_t v479 = v478 & 0xFFFFFFFFFFFFFFF8;
          if (v479) {
            goto LABEL_683;
          }
        }
      }
LABEL_130:
      int v106 = *((_DWORD *)v2 + 5);
      if ((v106 & 0x40000000) != 0) {
        __int16 v107 = (unint64_t *)*(v2 - 1);
      }
      else {
        __int16 v107 = (unint64_t *)&v2[-4 * (v106 & 0x7FFFFFF)];
      }
      sub_1CCEB1784((uint64_t)v570, (uint64_t **)v3, (uint64_t)v2, *v107, 0);
      int v312 = *((_DWORD *)v2 + 5);
      if ((v312 & 0x40000000) != 0) {
        v313 = (uint64_t ***)*(v2 - 1);
      }
      else {
        v313 = &v2[-4 * (v312 & 0x7FFFFFF)];
      }
      uint64_t v521 = v3;
      sub_1CCEB1784((uint64_t)&v583, (uint64_t **)v3, (uint64_t)v2, (unint64_t)v313[4], 0);
      v547[0] = &v548;
      v547[1] = (void *)0x800000000;
      sub_1CD42769C((uint64_t)v547, v103);
      if (v103)
      {
        uint64_t v314 = 0;
        while (1)
        {
          v315 = sub_1CCEB1928((uint64_t)v570, v314);
          v316 = sub_1CCEB1928((uint64_t)&v583, v314);
          if ((*((unsigned char *)v2 + 23) & 0x10) == 0)
          {
            v326 = 0;
            v327 = &byte_1CFBCE98E;
            goto LABEL_414;
          }
          uint64_t v317 = ***v2;
          uint64_t v318 = *(void *)(v317 + 152);
          uint64_t v319 = *(unsigned int *)(v317 + 168);
          if (!v319) {
            goto LABEL_412;
          }
          LODWORD(v320) = (v319 - 1) & ((v2 >> 4) ^ (v2 >> 9));
          v321 = (uint64_t ****)(v318 + 16 * v320);
          v322 = *v321;
          if (*v321 != v2) {
            break;
          }
LABEL_413:
          v325 = v321[1];
          v328 = *v325;
          v327 = (char *)(v325 + 2);
          v326 = v328;
LABEL_414:
          __int16 v542 = 773;
          v538 = v327;
          v539 = v326;
          v540 = ".i";
          v543 = &v538;
          v545[0] = v314;
          __int16 v546 = 2050;
          FCmpHelper = llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)&v553, *((_WORD *)v2 + 9) & 0x3F, (uint64_t)v315, (uint64_t)v316, (uint64_t)&v543, 0, 0);
          *((void *)v547[0] + v314++) = FCmpHelper;
          if (v314 == v103) {
            goto LABEL_521;
          }
        }
        int v323 = 1;
        while (v322 != (uint64_t ***)-4096)
        {
          int v324 = v320 + v323++;
          uint64_t v320 = v324 & (v319 - 1);
          v322 = *(uint64_t ****)(v318 + 16 * v320);
          if (v322 == v2)
          {
            v321 = (uint64_t ****)(v318 + 16 * v320);
            goto LABEL_413;
          }
        }
LABEL_412:
        v321 = (uint64_t ****)(v318 + 16 * v319);
        goto LABEL_413;
      }
LABEL_521:
      sub_1CCEB1F88(v521, (uint64_t *)v2, (uint64_t *)v547);
      v346 = v547[0];
      if (v547[0] != &v548) {
        goto LABEL_522;
      }
      goto LABEL_523;
    case 'S':
      uint64_t v142 = (uint64_t)*a2;
      if (*a2) {
        BOOL v143 = ((*a2)[1] & 0xFE) == 18;
      }
      else {
        BOOL v143 = 0;
      }
      if (!v143) {
        return 0;
      }
      v144 = 0;
      unint64_t v145 = *(unsigned int *)(v142 + 32);
      unsigned __int8 v146 = *(uint64_t **)v142;
      v553 = v555;
      uint64_t v554 = 0x200000000;
      v559 = v146;
      v560 = &v568;
      v561 = v569;
      uint64_t v562 = 0;
      int v563 = 0;
      __int16 v564 = 512;
      char v565 = 7;
      uint64_t v566 = 0;
      uint64_t v567 = 0;
      v568 = &unk_1F2616E88;
      v569[0] = &unk_1F2617008;
      unsigned __int8 v147 = (char *)a2[6];
      v557 = v2[5];
      v558 = v2 + 3;
      v583 = (void **)v147;
      if (v147)
      {
        llvm::MetadataTracking::track((uint64_t)&v583, (unsigned __int8 *)v147, 2);
        v144 = (const char *)v583;
      }
      v519 = (uint64_t **)v3;
      sub_1CB8461A4((uint64_t)&v553, 0, (uint64_t)v144);
      unint64_t v514 = v145;
      if (!v583) {
        goto LABEL_178;
      }
      int v483 = *(unsigned __int8 *)v583;
      if ((v483 - 4) > 0x1E)
      {
        if ((v483 - 3) >= 0xFFFFFFFE) {
          v499 = (const char *)v583;
        }
        else {
          v499 = 0;
        }
        if ((v483 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v485 = (unint64_t)(v499 + 8);
LABEL_695:
          v570[0] = (uint64_t)&v583;
          sub_1CC5FA668(v485 + 16, v570);
          goto LABEL_178;
        }
        if (v483 == 3) {
          v583[1] = 0;
        }
      }
      else if ((*((unsigned char *)v583 + 1) & 0x7F) == 2 || *((_DWORD *)v583 + 3))
      {
        unint64_t v484 = (unint64_t)v583[2];
        if ((v484 & 4) != 0)
        {
          unint64_t v485 = v484 & 0xFFFFFFFFFFFFFFF8;
          if (v485) {
            goto LABEL_695;
          }
        }
      }
LABEL_178:
      v583 = (void **)v585;
      uint64_t v584 = 0x800000000;
      sub_1CD42769C((uint64_t)&v583, v145);
      uint64_t v523 = *((_DWORD *)v2 + 5) & 0x7FFFFFF;
      if (v145)
      {
        uint64_t v148 = 0;
        while (1)
        {
          if ((*((unsigned char *)v2 + 23) & 0x10) == 0)
          {
            v158 = 0;
            v159 = &byte_1CFBCE98E;
            goto LABEL_189;
          }
          uint64_t v149 = ***v2;
          uint64_t v150 = *(void *)(v149 + 152);
          uint64_t v151 = *(unsigned int *)(v149 + 168);
          if (!v151) {
            goto LABEL_187;
          }
          LODWORD(v152) = (v151 - 1) & ((v2 >> 4) ^ (v2 >> 9));
          unsigned int v153 = (uint64_t ****)(v150 + 16 * v152);
          BOOL v154 = *v153;
          if (*v153 != v2) {
            break;
          }
LABEL_188:
          v157 = v153[1];
          v160 = *v157;
          v159 = (char *)(v157 + 2);
          v158 = v160;
LABEL_189:
          uint64_t v161 = *(void *)(v142 + 24);
          LOWORD(v549) = 773;
          v547[0] = v159;
          v547[1] = v158;
          *(void *)&long long v548 = ".i";
          v570[0] = (uint64_t)v547;
          v571[0] = v148;
          __int16 v572 = 2050;
          uint64_t v162 = sub_1CB93113C((uint64_t)&v553, v161, v523, (uint64_t)v570);
          v583[v148++] = v162;
          if (v148 == v145) {
            goto LABEL_283;
          }
        }
        int v155 = 1;
        while (v154 != (uint64_t ***)-4096)
        {
          int v156 = v152 + v155++;
          uint64_t v152 = v156 & (v151 - 1);
          BOOL v154 = *(uint64_t ****)(v150 + 16 * v152);
          if (v154 == v2)
          {
            unsigned int v153 = (uint64_t ****)(v150 + 16 * v152);
            goto LABEL_188;
          }
        }
LABEL_187:
        unsigned int v153 = (uint64_t ****)(v150 + 16 * v151);
        goto LABEL_188;
      }
LABEL_283:
      unint64_t v230 = (uint64_t **)v3;
      if (v523)
      {
        uint64_t v231 = 0;
        v533 = v2;
        do
        {
          int v232 = *((_DWORD *)v2 + 5);
          if ((v232 & 0x40000000) != 0) {
            __int16 v233 = (uint64_t ***)*(v2 - 1);
          }
          else {
            __int16 v233 = &v2[-4 * (v232 & 0x7FFFFFF)];
          }
          sub_1CCEB1784((uint64_t)v570, v230, (uint64_t)v2, (unint64_t)v233[4 * v231], 0);
          int v234 = *((_DWORD *)v2 + 5);
          if ((v234 & 0x40000000) != 0) {
            v235 = (uint64_t ***)*(v2 - 1);
          }
          else {
            v235 = &v2[-4 * (v234 & 0x7FFFFFF)];
          }
          if (v145)
          {
            uint64_t v236 = 0;
            v237 = (&v235[4 * *((unsigned int *)v2 + 15)])[v231];
            uint64_t v529 = v231;
            do
            {
              v238 = v583[v236];
              v239 = sub_1CCEB1928((uint64_t)v570, v236);
              int v240 = v238[5];
              uint64_t v241 = v240 & 0x7FFFFFF;
              if ((v240 & 0x7FFFFFF) == v238[15])
              {
                unsigned int v254 = v241 + (v241 >> 1);
                if (v254 <= 2) {
                  uint64_t v255 = 2;
                }
                else {
                  uint64_t v255 = v254;
                }
                v238[15] = v255;
                if ((v240 & 0x40000000) != 0) {
                  v256 = (uint64_t *)*((void *)v238 - 1);
                }
                else {
                  v256 = (uint64_t *)&v238[-8 * v241];
                }
                v257 = operator new(40 * v255);
                *((void *)v238 - 1) = v257;
                v258 = v257;
                do
                {
                  void *v258 = 0;
                  v258[1] = 0;
                  v258[2] = 0;
                  v258[3] = v238;
                  v258 += 4;
                }
                while (v258 != &v257[4 * v255]);
                int v259 = v238[5];
                if ((v259 & 0x40000000) != 0) {
                  uint64_t v260 = (uint64_t)v257;
                }
                else {
                  uint64_t v260 = (uint64_t)&v238[-8 * (v259 & 0x7FFFFFF)];
                }
                sub_1CC5E4108((uint64_t)v547, v256, &v256[4 * v241], v260);
                if (v241)
                {
                  memmove((void *)(v260 + 32 * v255), &v256[4 * v241], 8 * v241);
                  uint64_t v261 = 4 * v241;
                  do
                  {
                    v262 = &v256[v261];
                    if (v256[v261 - 4])
                    {
                      *(void *)*(v262 - 2) = *(v262 - 3);
                      uint64_t v263 = *(v262 - 3);
                      if (v263) {
                        *(void *)(v263 + 16) = *(v262 - 2);
                      }
                    }
                    v261 -= 4;
                  }
                  while (v261 * 8);
                }
                operator delete(v256);
                int v240 = v238[5];
                uint64_t v231 = v529;
                unint64_t v2 = v533;
                unint64_t v145 = v514;
              }
              uint64_t v242 = (v240 + 1) & 0x7FFFFFF;
              v238[5] = v240 & 0xF8000000 | (v240 + 1) & 0x7FFFFFF;
              if ((v240 & 0x40000000) != 0) {
                v243 = (char *)*((void *)v238 - 1);
              }
              else {
                v243 = (char *)&v238[-8 * v242];
              }
              uint64_t v244 = (v242 - 1);
              v245 = &v243[32 * v244];
              if (*(void *)v245)
              {
                **((void **)v245 + 2) = *((void *)v245 + 1);
                uint64_t v253 = *((void *)v245 + 1);
                if (v253) {
                  *(void *)(v253 + 16) = *((void *)v245 + 2);
                }
              }
              *(void *)v245 = v239;
              if (v239)
              {
                uint64_t v248 = *((void *)v239 + 1);
                v247 = (char **)((char *)v239 + 8);
                uint64_t v246 = v248;
                v249 = &v243[32 * v244];
                *((void *)v249 + 1) = v248;
                if (v248) {
                  *(void *)(v246 + 16) = v249 + 8;
                }
                *((void *)v249 + 2) = v247;
                *v247 = v245;
              }
              int v250 = v238[5];
              uint64_t v251 = v250 & 0x7FFFFFF;
              if ((v250 & 0x40000000) != 0) {
                v252 = (char *)*((void *)v238 - 1);
              }
              else {
                v252 = (char *)&v238[-8 * v251];
              }
              *(void *)&v252[32 * v238[15] + 8 * (v251 - 1)] = v237;
              ++v236;
            }
            while (v236 != v145);
          }
          if (v573 != v575) {
            free(v573);
          }
          ++v231;
          unint64_t v230 = v519;
        }
        while (v231 != v523);
      }
      sub_1CCEB1F88((uint64_t)v230, (uint64_t *)v2, (uint64_t *)&v583);
      if (v583 != v585) {
        free(v583);
      }
      uint64_t v47 = v553;
      uint64_t v48 = v555;
      goto LABEL_593;
    case 'T':
      return sub_1CCEB3054((uint64_t **)a1, (uint64_t *)a2);
    case 'U':
      uint64_t v118 = (uint64_t)*a2;
      if (*a2) {
        BOOL v119 = ((*a2)[1] & 0xFE) == 18;
      }
      else {
        BOOL v119 = 0;
      }
      if (!v119) {
        return 0;
      }
      v120 = 0;
      unint64_t v121 = *(unsigned int *)(v118 + 32);
      v122 = *(uint64_t **)v118;
      v553 = v555;
      uint64_t v554 = 0x200000000;
      v559 = v122;
      v560 = &v568;
      v561 = v569;
      uint64_t v562 = 0;
      int v563 = 0;
      __int16 v564 = 512;
      char v565 = 7;
      uint64_t v566 = 0;
      uint64_t v567 = 0;
      v568 = &unk_1F2616E88;
      v569[0] = &unk_1F2617008;
      uint64_t v123 = (char *)a2[6];
      v557 = v2[5];
      v558 = v2 + 3;
      v583 = (void **)v123;
      if (v123)
      {
        llvm::MetadataTracking::track((uint64_t)&v583, (unsigned __int8 *)v123, 2);
        v120 = (const char *)v583;
      }
      sub_1CB8461A4((uint64_t)&v553, 0, (uint64_t)v120);
      if (!v583) {
        goto LABEL_155;
      }
      int v480 = *(unsigned __int8 *)v583;
      if ((v480 - 4) > 0x1E)
      {
        if ((v480 - 3) >= 0xFFFFFFFE) {
          v498 = (const char *)v583;
        }
        else {
          v498 = 0;
        }
        if ((v480 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v482 = (unint64_t)(v498 + 8);
LABEL_689:
          v570[0] = (uint64_t)&v583;
          sub_1CC5FA668(v482 + 16, v570);
          goto LABEL_155;
        }
        if (v480 == 3) {
          v583[1] = 0;
        }
      }
      else if ((*((unsigned char *)v583 + 1) & 0x7F) == 2 || *((_DWORD *)v583 + 3))
      {
        unint64_t v481 = (unint64_t)v583[2];
        if ((v481 & 4) != 0)
        {
          unint64_t v482 = v481 & 0xFFFFFFFFFFFFFFF8;
          if (v482) {
            goto LABEL_689;
          }
        }
      }
LABEL_155:
      sub_1CCEB1784((uint64_t)v570, (uint64_t **)v3, (uint64_t)v2, (unint64_t)*(v2 - 8), 0);
      sub_1CCEB1784((uint64_t)&v583, (uint64_t **)v3, (uint64_t)v2, (unint64_t)*(v2 - 4), 0);
      v543 = v545;
      uint64_t v544 = 0x800000000;
      sub_1CD42769C((uint64_t)&v543, v121);
      v124 = (llvm::Value *)*(v2 - 12);
      if ((*(_DWORD *)(*(void *)v124 + 8) & 0xFE) == 0x12)
      {
        sub_1CCEB1784((uint64_t)v547, (uint64_t **)v3, (uint64_t)v2, (unint64_t)v124, 0);
        if (v121)
        {
          unsigned int v125 = 0;
          while (1)
          {
            BOOL v126 = sub_1CCEB1928((uint64_t)v547, v125);
            v127 = sub_1CCEB1928((uint64_t)v570, v125);
            char v128 = sub_1CCEB1928((uint64_t)&v583, v125);
            if ((*((unsigned char *)v2 + 23) & 0x10) == 0)
            {
              int v138 = 0;
              v139 = &byte_1CFBCE98E;
              goto LABEL_167;
            }
            uint64_t v129 = ***v2;
            uint64_t v130 = *(void *)(v129 + 152);
            uint64_t v131 = *(unsigned int *)(v129 + 168);
            if (!v131) {
              goto LABEL_165;
            }
            LODWORD(v132) = (v131 - 1) & ((v2 >> 4) ^ (v2 >> 9));
            uint64_t v133 = (uint64_t ****)(v130 + 16 * v132);
            uint64_t v134 = *v133;
            if (*v133 != v2) {
              break;
            }
LABEL_166:
            int v137 = v133[1];
            v140 = *v137;
            v139 = (char *)(v137 + 2);
            int v138 = v140;
LABEL_167:
            __int16 v537 = 773;
            v534 = v139;
            v535 = v138;
            v536 = ".i";
            v538 = (char *)&v534;
            v540 = v125;
            __int16 v542 = 2050;
            Select = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v553, v126, v127, v128, (const llvm::Twine *)&v538, 0);
            *((void *)v543 + (void)v125++) = Select;
            if (v125 == (const char *)v121) {
              goto LABEL_431;
            }
          }
          int v135 = 1;
          while (v134 != (uint64_t ***)-4096)
          {
            int v136 = v132 + v135++;
            uint64_t v132 = v136 & (v131 - 1);
            uint64_t v134 = *(uint64_t ****)(v130 + 16 * v132);
            if (v134 == v2)
            {
              uint64_t v133 = (uint64_t ****)(v130 + 16 * v132);
              goto LABEL_166;
            }
          }
LABEL_165:
          uint64_t v133 = (uint64_t ****)(v130 + 16 * v131);
          goto LABEL_166;
        }
LABEL_431:
        if (v550 != v552) {
          free(v550);
        }
        goto LABEL_433;
      }
      if (v121)
      {
        uint64_t v330 = 0;
        while (1)
        {
          v331 = sub_1CCEB1928((uint64_t)v570, v330);
          v332 = sub_1CCEB1928((uint64_t)&v583, v330);
          if ((*((unsigned char *)v2 + 23) & 0x10) == 0)
          {
            v342 = 0;
            v343 = &byte_1CFBCE98E;
            goto LABEL_428;
          }
          uint64_t v333 = ***v2;
          uint64_t v334 = *(void *)(v333 + 152);
          uint64_t v335 = *(unsigned int *)(v333 + 168);
          if (!v335) {
            goto LABEL_426;
          }
          LODWORD(v336) = (v335 - 1) & ((v2 >> 4) ^ (v2 >> 9));
          v337 = (uint64_t ****)(v334 + 16 * v336);
          v338 = *v337;
          if (*v337 != v2) {
            break;
          }
LABEL_427:
          v341 = v337[1];
          v344 = *v341;
          v343 = (char *)(v341 + 2);
          v342 = v344;
LABEL_428:
          __int16 v542 = 773;
          v538 = v343;
          v539 = v342;
          v540 = ".i";
          v547[0] = &v538;
          *(void *)&long long v548 = v330;
          LOWORD(v549) = 2050;
          v345 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v553, v124, v331, v332, (const llvm::Twine *)v547, 0);
          *((void *)v543 + v330++) = v345;
          if (v330 == v121) {
            goto LABEL_433;
          }
        }
        int v339 = 1;
        while (v338 != (uint64_t ***)-4096)
        {
          int v340 = v336 + v339++;
          uint64_t v336 = v340 & (v335 - 1);
          v338 = *(uint64_t ****)(v334 + 16 * v336);
          if (v338 == v2)
          {
            v337 = (uint64_t ****)(v334 + 16 * v336);
            goto LABEL_427;
          }
        }
LABEL_426:
        v337 = (uint64_t ****)(v334 + 16 * v335);
        goto LABEL_427;
      }
LABEL_433:
      sub_1CCEB1F88(v3, (uint64_t *)v2, (uint64_t *)&v543);
      v346 = v543;
      if (v543 != v545) {
LABEL_522:
      }
        free(v346);
LABEL_523:
      if (v587 != v588) {
        free(v587);
      }
      if (v573 != v575) {
        free(v573);
      }
      uint64_t v47 = v553;
      uint64_t v48 = v555;
LABEL_593:
      if (v47 != v48) {
LABEL_358:
      }
        free(v47);
      return 1;
    case 'Y':
      uint64_t v108 = **(a2 - 8);
      if (v108) {
        BOOL v109 = (*(_DWORD *)(v108 + 8) & 0xFE) == 18;
      }
      else {
        BOOL v109 = 0;
      }
      if (!v109) {
        return 0;
      }
      char v110 = 0;
      uint64_t v111 = *(unsigned int *)(v108 + 32);
      uint64_t v112 = (uint64_t *)**a2;
      v553 = v555;
      uint64_t v554 = 0x200000000;
      v559 = v112;
      v560 = &v568;
      v561 = v569;
      uint64_t v562 = 0;
      int v563 = 0;
      __int16 v564 = 512;
      char v565 = 7;
      uint64_t v566 = 0;
      uint64_t v567 = 0;
      v568 = &unk_1F2616E88;
      v569[0] = &unk_1F2617008;
      v113 = (char *)a2[6];
      v557 = v2[5];
      v558 = v2 + 3;
      v583 = (void **)v113;
      if (v113)
      {
        llvm::MetadataTracking::track((uint64_t)&v583, (unsigned __int8 *)v113, 2);
        char v110 = (const char *)v583;
      }
      sub_1CB8461A4((uint64_t)&v553, 0, (uint64_t)v110);
      if (!v583) {
        goto LABEL_140;
      }
      int v417 = *(unsigned __int8 *)v583;
      if ((v417 - 4) > 0x1E)
      {
        if ((v417 - 3) >= 0xFFFFFFFE) {
          v470 = (const char *)v583;
        }
        else {
          v470 = 0;
        }
        if ((v417 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v419 = (unint64_t)(v470 + 8);
LABEL_615:
          v570[0] = (uint64_t)&v583;
          sub_1CC5FA668(v419 + 16, v570);
          goto LABEL_140;
        }
        if (v417 == 3) {
          v583[1] = 0;
        }
      }
      else if ((*((unsigned char *)v583 + 1) & 0x7F) == 2 || *((_DWORD *)v583 + 3))
      {
        unint64_t v418 = (unint64_t)v583[2];
        if ((v418 & 4) != 0)
        {
          unint64_t v419 = v418 & 0xFFFFFFFFFFFFFFF8;
          if (v419) {
            goto LABEL_615;
          }
        }
      }
LABEL_140:
      sub_1CCEB1784((uint64_t)v570, (uint64_t **)v3, (uint64_t)v2, (unint64_t)*(v2 - 8), 0);
      BOOL v115 = (uint64_t ***)*(v2 - 4);
      if (v115 && *((unsigned char *)v115 + 16) == 16)
      {
        __int16 v116 = (unsigned int *)(v115 + 3);
        if (*((_DWORD *)v115 + 8) >= 0x41u) {
          __int16 v116 = *(unsigned int **)v116;
        }
        v117 = sub_1CCEB1928((uint64_t)v570, *v116);
        v583 = (void **)v585;
        v585[0] = v117;
        uint64_t v584 = 0x800000001;
        sub_1CCEB1F88(v3, (uint64_t *)v2, (uint64_t *)&v583);
        if (v583 != v585) {
          free(v583);
        }
        unint64_t v4 = 1;
        goto LABEL_279;
      }
      if (!*(unsigned char *)(v3 + 1096))
      {
        unint64_t v4 = 0;
        goto LABEL_279;
      }
      v199 = llvm::UndefValue::get(*(llvm::UndefValue **)(v108 + 24), v114);
      uint64_t v200 = v111;
      if (!v111)
      {
LABEL_275:
        v583 = (void **)v585;
        v585[0] = v199;
        uint64_t v584 = 0x800000001;
        sub_1CCEB1F88(v3, (uint64_t *)v2, (uint64_t *)&v583);
        if (v583 != v585) {
          free(v583);
        }
        unint64_t v4 = 1;
LABEL_279:
        if (v573 != v575) {
          free(v573);
        }
        v229 = v553;
        if (v553 == v555) {
          return v4;
        }
        goto LABEL_608;
      }
      unint64_t v201 = 0;
      while (1)
      {
        __int16 v202 = llvm::ConstantInt::get((llvm::ConstantInt *)*v115, v201, 0);
        if ((*((unsigned char *)v115 + 23) & 0x10) != 0) {
          break;
        }
        unint64_t v212 = 0;
        v213 = &byte_1CFBCE98E;
LABEL_262:
        LOWORD(v549) = 773;
        v547[0] = v213;
        v547[1] = v212;
        *(void *)&long long v548 = ".is.";
        v583 = v547;
        v585[0] = v201;
        __int16 v586 = 2050;
        v215 = sub_1CB845F20((uint64_t)&v553, 32, v115, (uint64_t)v202, (uint64_t)&v583);
        v216 = sub_1CCEB1928((uint64_t)v570, v201);
        if ((*((unsigned char *)v2 + 23) & 0x10) == 0)
        {
          v226 = 0;
          v227 = &byte_1CFBCE98E;
          goto LABEL_271;
        }
        uint64_t v217 = ***v2;
        uint64_t v218 = *(void *)(v217 + 152);
        uint64_t v219 = *(unsigned int *)(v217 + 168);
        if (!v219) {
          goto LABEL_269;
        }
        LODWORD(v220) = (v219 - 1) & ((v2 >> 4) ^ (v2 >> 9));
        unsigned int v221 = (uint64_t ****)(v218 + 16 * v220);
        v222 = *v221;
        if (*v221 != v2)
        {
          int v223 = 1;
          while (v222 != (uint64_t ***)-4096)
          {
            int v224 = v220 + v223++;
            uint64_t v220 = v224 & (v219 - 1);
            v222 = *(uint64_t ****)(v218 + 16 * v220);
            if (v222 == v2)
            {
              unsigned int v221 = (uint64_t ****)(v218 + 16 * v220);
              goto LABEL_270;
            }
          }
LABEL_269:
          unsigned int v221 = (uint64_t ****)(v218 + 16 * v219);
        }
LABEL_270:
        unsigned int v225 = v221[1];
        v228 = *v225;
        v227 = (char *)(v225 + 2);
        v226 = v228;
LABEL_271:
        LOWORD(v549) = 773;
        v547[0] = v227;
        v547[1] = v226;
        *(void *)&long long v548 = ".upto";
        v583 = v547;
        v585[0] = v201;
        __int16 v586 = 2050;
        v199 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v553, v215, v216, v199, (const llvm::Twine *)&v583, 0);
        if (++v201 == v200) {
          goto LABEL_275;
        }
      }
      uint64_t v203 = ***v115;
      uint64_t v204 = *(void *)(v203 + 152);
      uint64_t v205 = *(unsigned int *)(v203 + 168);
      if (!v205) {
        goto LABEL_260;
      }
      LODWORD(v206) = (v205 - 1) & ((v115 >> 4) ^ (v115 >> 9));
      v207 = (uint64_t ****)(v204 + 16 * v206);
      v208 = *v207;
      if (*v207 != v115)
      {
        int v209 = 1;
        while (v208 != (uint64_t ***)-4096)
        {
          int v210 = v206 + v209++;
          uint64_t v206 = v210 & (v205 - 1);
          v208 = *(uint64_t ****)(v204 + 16 * v206);
          if (v208 == v115)
          {
            v207 = (uint64_t ****)(v204 + 16 * v206);
            goto LABEL_261;
          }
        }
LABEL_260:
        v207 = (uint64_t ****)(v204 + 16 * v205);
      }
LABEL_261:
      v211 = v207[1];
      unsigned __int8 v214 = *v211;
      v213 = (char *)(v211 + 2);
      unint64_t v212 = v214;
      goto LABEL_262;
    case 'Z':
      uint64_t v163 = (uint64_t)*a2;
      if (!*a2) {
        return 0;
      }
      unint64_t v164 = 0;
      unint64_t v165 = *(unsigned int *)(v163 + 32);
      uint64_t v166 = *(uint64_t **)v163;
      v553 = v555;
      uint64_t v554 = 0x200000000;
      v559 = v166;
      v560 = &v568;
      v561 = v569;
      uint64_t v562 = 0;
      int v563 = 0;
      __int16 v564 = 512;
      char v565 = 7;
      uint64_t v566 = 0;
      uint64_t v567 = 0;
      v568 = &unk_1F2616E88;
      v569[0] = &unk_1F2617008;
      v167 = (char *)a2[6];
      v557 = v2[5];
      v558 = v2 + 3;
      v583 = (void **)v167;
      if (v167)
      {
        llvm::MetadataTracking::track((uint64_t)&v583, (unsigned __int8 *)v167, 2);
        unint64_t v164 = (const char *)v583;
      }
      sub_1CB8461A4((uint64_t)&v553, 0, (uint64_t)v164);
      if (!v583) {
        goto LABEL_199;
      }
      int v486 = *(unsigned __int8 *)v583;
      if ((v486 - 4) > 0x1E)
      {
        if ((v486 - 3) >= 0xFFFFFFFE) {
          v500 = (const char *)v583;
        }
        else {
          v500 = 0;
        }
        if ((v486 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v488 = (unint64_t)(v500 + 8);
LABEL_701:
          v570[0] = (uint64_t)&v583;
          sub_1CC5FA668(v488 + 16, v570);
          goto LABEL_199;
        }
        if (v486 == 3) {
          v583[1] = 0;
        }
      }
      else if ((*((unsigned char *)v583 + 1) & 0x7F) == 2 || *((_DWORD *)v583 + 3))
      {
        unint64_t v487 = (unint64_t)v583[2];
        if ((v487 & 4) != 0)
        {
          unint64_t v488 = v487 & 0xFFFFFFFFFFFFFFF8;
          if (v488) {
            goto LABEL_701;
          }
        }
      }
LABEL_199:
      sub_1CCEB1784((uint64_t)v570, (uint64_t **)v3, (uint64_t)v2, (unint64_t)*(v2 - 12), 0);
      v168 = (llvm::Value *)*(v2 - 8);
      uint64_t v169 = (uint64_t ***)*(v2 - 4);
      v583 = (void **)v585;
      uint64_t v584 = 0x800000000;
      sub_1CD42769C((uint64_t)&v583, v165);
      if (*((unsigned char *)v169 + 16) == 16 && v169)
      {
        uint64_t v520 = v3;
        if (v165)
        {
          for (k = 0; k != (uint64_t *)v165; k = (uint64_t *)((char *)k + 1))
          {
            uint64_t v171 = (uint64_t **)(v169 + 3);
            if (*((_DWORD *)v169 + 8) >= 0x41u) {
              uint64_t v171 = v169[3];
            }
            uint64_t v172 = v168;
            if (k != *v171) {
              uint64_t v172 = sub_1CCEB1928((uint64_t)v570, k);
            }
            v583[(void)k] = v172;
          }
        }
        goto LABEL_460;
      }
      if (!*(unsigned char *)(v3 + 1096))
      {
        unint64_t v4 = 0;
LABEL_461:
        if (v583 != v585) {
          free(v583);
        }
        if (v573 != v575) {
          free(v573);
        }
        v229 = v553;
        if (v553 == v555) {
          return v4;
        }
LABEL_608:
        free(v229);
        return v4;
      }
      uint64_t v520 = v3;
      if (!v165)
      {
LABEL_460:
        sub_1CCEB1F88(v520, (uint64_t *)v2, (uint64_t *)&v583);
        unint64_t v4 = 1;
        goto LABEL_461;
      }
      unint64_t v347 = 0;
      break;
    case '[':
      uint64_t v41 = (uint64_t)*a2;
      if (!*a2) {
        return 0;
      }
      unint64_t v42 = *(unsigned int *)(v41 + 32);
      sub_1CCEB1784((uint64_t)&v553, (uint64_t **)a1, (uint64_t)a2, (unint64_t)*(a2 - 8), 0);
      sub_1CCEB1784((uint64_t)v570, (uint64_t **)v3, (uint64_t)v2, (unint64_t)*(v2 - 4), 0);
      v583 = (void **)v585;
      uint64_t v584 = 0x800000000;
      sub_1CD42769C((uint64_t)&v583, v42);
      if (v42)
      {
        for (uint64_t m = 0; m != v42; ++m)
        {
          uint64_t v44 = (llvm::Type *)*((unsigned int *)v2[8] + m);
          if ((v44 & 0x80000000) != 0)
          {
            uint64_t v46 = llvm::UndefValue::get(*(llvm::UndefValue **)(v41 + 24), v44);
          }
          else
          {
            if (v44 >= v568)
            {
              uint64_t v45 = (void **)v570;
              LODWORD(v44) = v44 - v568;
            }
            else
            {
              uint64_t v45 = &v553;
            }
            uint64_t v46 = sub_1CCEB1928((uint64_t)v45, v44);
          }
          v583[m] = v46;
        }
      }
      sub_1CCEB1F88(v3, (uint64_t *)v2, (uint64_t *)&v583);
      if (v583 != v585) {
        free(v583);
      }
      if (v573 != v575) {
        free(v573);
      }
      uint64_t v47 = v556;
      uint64_t v48 = &v558;
      goto LABEL_593;
    default:
      return v4;
  }
  while (1)
  {
    v348 = llvm::ConstantInt::get((llvm::ConstantInt *)*v169, v347, 0);
    if ((*((unsigned char *)v169 + 23) & 0x10) != 0) {
      break;
    }
    uint64_t v358 = 0;
    v359 = &byte_1CFBCE98E;
LABEL_447:
    __int16 v546 = 773;
    v543 = v359;
    uint64_t v544 = v358;
    v545[0] = ".is.";
    v547[0] = &v543;
    *(void *)&long long v548 = v347;
    LOWORD(v549) = 2050;
    v361 = sub_1CB845F20((uint64_t)&v553, 32, v169, (uint64_t)v348, (uint64_t)v547);
    v362 = sub_1CCEB1928((uint64_t)v570, v347);
    if ((*((unsigned char *)v2 + 23) & 0x10) == 0)
    {
      uint64_t v372 = 0;
      v373 = &byte_1CFBCE98E;
      goto LABEL_456;
    }
    uint64_t v363 = ***v2;
    uint64_t v364 = *(void *)(v363 + 152);
    uint64_t v365 = *(unsigned int *)(v363 + 168);
    if (!v365) {
      goto LABEL_454;
    }
    LODWORD(v366) = (v365 - 1) & ((v2 >> 4) ^ (v2 >> 9));
    v367 = (uint64_t ****)(v364 + 16 * v366);
    v368 = *v367;
    if (*v367 != v2)
    {
      int v369 = 1;
      while (v368 != (uint64_t ***)-4096)
      {
        int v370 = v366 + v369++;
        uint64_t v366 = v370 & (v365 - 1);
        v368 = *(uint64_t ****)(v364 + 16 * v366);
        if (v368 == v2)
        {
          v367 = (uint64_t ****)(v364 + 16 * v366);
          goto LABEL_455;
        }
      }
LABEL_454:
      v367 = (uint64_t ****)(v364 + 16 * v365);
    }
LABEL_455:
    v371 = v367[1];
    uint64_t v374 = (uint64_t)*v371;
    v373 = (char *)(v371 + 2);
    uint64_t v372 = v374;
LABEL_456:
    __int16 v546 = 773;
    v543 = v373;
    uint64_t v544 = v372;
    v545[0] = ".i";
    v547[0] = &v543;
    *(void *)&long long v548 = v347;
    LOWORD(v549) = 2050;
    v375 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v553, v361, v168, v362, (const llvm::Twine *)v547, 0);
    v583[v347++] = v375;
    if (v347 == v165) {
      goto LABEL_460;
    }
  }
  uint64_t v349 = ***v169;
  uint64_t v350 = *(void *)(v349 + 152);
  uint64_t v351 = *(unsigned int *)(v349 + 168);
  if (v351)
  {
    LODWORD(v352) = (v351 - 1) & ((v169 >> 4) ^ (v169 >> 9));
    v353 = (uint64_t ****)(v350 + 16 * v352);
    v354 = *v353;
    if (*v353 == v169)
    {
LABEL_446:
      v357 = v353[1];
      uint64_t v360 = (uint64_t)*v357;
      v359 = (char *)(v357 + 2);
      uint64_t v358 = v360;
      goto LABEL_447;
    }
    int v355 = 1;
    while (v354 != (uint64_t ***)-4096)
    {
      int v356 = v352 + v355++;
      uint64_t v352 = v356 & (v351 - 1);
      v354 = *(uint64_t ****)(v350 + 16 * v352);
      if (v354 == v169)
      {
        v353 = (uint64_t ****)(v350 + 16 * v352);
        goto LABEL_446;
      }
    }
  }
  v353 = (uint64_t ****)(v350 + 16 * v351);
  goto LABEL_446;
}

void sub_1CCEAF904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = v4;
  v257[24] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = v107;
  unint64_t v103 = v107;
  uint64_t v11 = *(unsigned char **)(v9 + 8);
  if (v11 == *(unsigned char **)v9)
  {
    long long v104 = v107;
    int v12 = v11;
  }
  else
  {
    uint64_t v92 = *(unsigned int *)(v9 + 16);
    uint64_t v10 = malloc_type_malloc(8 * v92, 0x4065EBACuLL);
    if (!v10 && (v92 || (uint64_t v10 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
LABEL_397:
    }
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    long long v104 = v10;
    int v12 = *(unsigned char **)v9;
    uint64_t v11 = *(unsigned char **)(v9 + 8);
  }
  unsigned int v14 = *(_DWORD *)(v9 + 16);
  unsigned int v13 = *(_DWORD *)(v9 + 20);
  LODWORD(v105) = v14;
  if (v11 == v12) {
    unsigned int v15 = v13;
  }
  else {
    unsigned int v15 = v14;
  }
  if (v15)
  {
    memmove(v10, v11, 8 * v15);
    unsigned int v13 = *(_DWORD *)(v9 + 20);
  }
  int v16 = *(_DWORD *)(v9 + 24);
  HIDWORD(v105) = v13;
  int v106 = v16;
  uint64_t v108 = v110;
  uint64_t v109 = 0x800000000;
  unsigned int v17 = *(_DWORD *)(v9 + 104);
  if (v17 && &v103 != (unsigned char **)v9)
  {
    if (v17 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v110, *(const void **)(v9 + 96), 24 * *(unsigned int *)(v9 + 104));
    LODWORD(v109) = v17;
  }
  BOOL v18 = v99;
  int v95 = v99;
  uint64_t v19 = *(unsigned char **)(v8 + 8);
  if (v19 == *(unsigned char **)v8)
  {
    uint64_t v96 = v99;
    uint64_t v20 = v19;
  }
  else
  {
    uint64_t v93 = *(unsigned int *)(v8 + 16);
    BOOL v18 = malloc_type_malloc(8 * v93, 0x4065EBACuLL);
    if (!v18)
    {
      if (v93) {
        goto LABEL_397;
      }
      BOOL v18 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v18) {
        goto LABEL_397;
      }
    }
    uint64_t v96 = v18;
    uint64_t v20 = *(unsigned char **)v8;
    uint64_t v19 = *(unsigned char **)(v8 + 8);
  }
  unsigned int v22 = *(_DWORD *)(v8 + 16);
  unsigned int v21 = *(_DWORD *)(v8 + 20);
  LODWORD(v97) = v22;
  if (v19 == v20) {
    unsigned int v23 = v21;
  }
  else {
    unsigned int v23 = v22;
  }
  if (v23)
  {
    memmove(v18, v19, 8 * v23);
    unsigned int v21 = *(_DWORD *)(v8 + 20);
  }
  int v24 = *(_DWORD *)(v8 + 24);
  HIDWORD(v97) = v21;
  int v98 = v24;
  uint64_t v100 = v102;
  uint64_t v101 = 0x800000000;
  unsigned int v25 = *(_DWORD *)(v8 + 104);
  if (v25 && &v95 != (unsigned char **)v8)
  {
    if (v25 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v102, *(const void **)(v8 + 96), 24 * *(unsigned int *)(v8 + 104));
    LODWORD(v101) = v25;
  }
  char v128 = v132;
  if (v104 == v103)
  {
    __src = v132;
    unsigned int v26 = HIDWORD(v105);
    if (HIDWORD(v105)) {
      memmove(v132, v104, 8 * HIDWORD(v105));
    }
  }
  else
  {
    __src = v104;
    long long v104 = v103;
    unsigned int v26 = HIDWORD(v105);
  }
  unint64_t v130 = __PAIR64__(v26, v105);
  int v131 = v106;
  uint64_t v105 = 8;
  int v106 = 0;
  uint64_t v133 = v135;
  uint64_t v134 = 0x800000000;
  int v27 = v109;
  if (v109)
  {
    if (v108 == v110)
    {
      if (v109 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v135, v110, 24 * v109);
      LODWORD(v134) = v27;
    }
    else
    {
      uint64_t v133 = v108;
      uint64_t v134 = v109;
      uint64_t v108 = v110;
      HIDWORD(v109) = 0;
    }
    LODWORD(v109) = 0;
  }
  v120 = v124;
  if (v96 == v95)
  {
    unint64_t v121 = v124;
    unsigned int v28 = HIDWORD(v97);
    if (HIDWORD(v97)) {
      memmove(v124, v96, 8 * HIDWORD(v97));
    }
  }
  else
  {
    unint64_t v121 = v96;
    uint64_t v96 = v95;
    unsigned int v28 = HIDWORD(v97);
  }
  unint64_t v122 = __PAIR64__(v28, v97);
  int v123 = v98;
  uint64_t v97 = 8;
  int v98 = 0;
  unsigned int v125 = v127;
  uint64_t v126 = 0x800000000;
  int v29 = v101;
  if (v101)
  {
    if (v100 == v102)
    {
      if (v101 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v127, v102, 24 * v101);
      LODWORD(v126) = v29;
    }
    else
    {
      unsigned int v125 = v100;
      uint64_t v126 = v101;
      uint64_t v100 = v102;
      HIDWORD(v101) = 0;
    }
    LODWORD(v101) = 0;
  }
  v144 = v148;
  if (__src == v128)
  {
    unint64_t v145 = v148;
    unsigned int v30 = HIDWORD(v130);
    if (HIDWORD(v130)) {
      memmove(v148, __src, 8 * HIDWORD(v130));
    }
  }
  else
  {
    unint64_t v145 = __src;
    __src = v128;
    unsigned int v30 = HIDWORD(v130);
  }
  unint64_t v146 = __PAIR64__(v30, v130);
  int v147 = v131;
  unint64_t v130 = 8;
  int v131 = 0;
  uint64_t v149 = v151;
  uint64_t v150 = 0x800000000;
  int v31 = v134;
  if (v134)
  {
    if (v133 == v135)
    {
      if (v134 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v151, v135, 24 * v134);
      LODWORD(v150) = v31;
    }
    else
    {
      uint64_t v149 = v133;
      uint64_t v150 = v134;
      uint64_t v133 = v135;
      HIDWORD(v134) = 0;
    }
    LODWORD(v134) = 0;
  }
  int v136 = v140;
  if (v121 == v120)
  {
    int v137 = v140;
    unsigned int v32 = HIDWORD(v122);
    if (HIDWORD(v122)) {
      memmove(v140, v121, 8 * HIDWORD(v122));
    }
  }
  else
  {
    int v137 = v121;
    unint64_t v121 = v120;
    unsigned int v32 = HIDWORD(v122);
  }
  unint64_t v138 = __PAIR64__(v32, v122);
  int v139 = v123;
  unint64_t v122 = 8;
  int v123 = 0;
  v141 = v143;
  uint64_t v142 = 0x800000000;
  int v33 = v126;
  if (v126)
  {
    if (v125 == v127)
    {
      if (v126 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v143, v127, 24 * v126);
      LODWORD(v142) = v33;
    }
    else
    {
      v141 = v125;
      uint64_t v142 = v126;
      unsigned int v125 = v127;
      HIDWORD(v126) = 0;
    }
    LODWORD(v126) = 0;
  }
  unsigned int v34 = v214;
  int v210 = v214;
  BOOL v35 = v145;
  if (v145 == v144)
  {
    v211 = v214;
    uint64_t v36 = v145;
  }
  else
  {
    int v94 = v146;
    unsigned int v34 = malloc_type_malloc(8 * v146, 0x4065EBACuLL);
    if (!v34)
    {
      if (v94) {
        goto LABEL_397;
      }
      unsigned int v34 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v34) {
        goto LABEL_397;
      }
    }
    v211 = v34;
    uint64_t v36 = v144;
    BOOL v35 = v145;
  }
  int v37 = HIDWORD(v146);
  LODWORD(v212) = v146;
  if (v35 == v36) {
    unsigned int v38 = HIDWORD(v146);
  }
  else {
    unsigned int v38 = v146;
  }
  if (v38)
  {
    memmove(v34, v35, 8 * v38);
    int v37 = HIDWORD(v146);
  }
  int v39 = v150;
  HIDWORD(v212) = v37;
  int v213 = v147;
  v215 = v217;
  uint64_t v216 = 0x800000000;
  if (v150)
  {
    if (v150 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v217, v149, 24 * v150);
    LODWORD(v216) = v39;
  }
  __int16 v202 = v206;
  if (v137 == v136)
  {
    uint64_t v203 = v206;
    unsigned int v40 = HIDWORD(v138);
    if (HIDWORD(v138)) {
      memmove(v206, v137, 8 * HIDWORD(v138));
    }
  }
  else
  {
    uint64_t v203 = v137;
    int v137 = v136;
    unsigned int v40 = HIDWORD(v138);
  }
  unint64_t v204 = __PAIR64__(v40, v138);
  int v205 = v139;
  unint64_t v138 = 8;
  int v139 = 0;
  v207 = v209;
  uint64_t v208 = 0x800000000;
  int v41 = v142;
  if (v142)
  {
    if (v141 == v143)
    {
      if (v142 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v209, v143, 24 * v142);
      LODWORD(v208) = v41;
    }
    else
    {
      v207 = v141;
      uint64_t v208 = v142;
      v141 = v143;
      HIDWORD(v142) = 0;
    }
    LODWORD(v142) = 0;
  }
  uint64_t v111 = v116;
  if (v211 == v210)
  {
    uint64_t v112 = v116;
    int v42 = HIDWORD(v212);
    if (HIDWORD(v212)) {
      memmove(v116, v211, 8 * HIDWORD(v212));
    }
  }
  else
  {
    uint64_t v112 = v211;
    v211 = v210;
    int v42 = HIDWORD(v212);
  }
  int v113 = v212;
  int v114 = v42;
  int v115 = v213;
  uint64_t v212 = 8;
  int v213 = 0;
  v117 = v119;
  uint64_t v118 = 0x800000000;
  int v43 = v216;
  if (v216)
  {
    if (v215 == v217)
    {
      if (v216 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v119, v217, 24 * v216);
      LODWORD(v118) = v43;
    }
    else
    {
      v117 = v215;
      uint64_t v118 = v216;
      v215 = v217;
      HIDWORD(v216) = 0;
    }
    LODWORD(v216) = 0;
  }
  sub_1CCEB143C((uint64_t)&v193, (uint64_t)&v111);
  uint64_t v242 = v246;
  if (v203 == v202)
  {
    v243 = v246;
    unsigned int v44 = HIDWORD(v204);
    if (HIDWORD(v204)) {
      memmove(v246, v203, 8 * HIDWORD(v204));
    }
  }
  else
  {
    v243 = v203;
    uint64_t v203 = v202;
    unsigned int v44 = HIDWORD(v204);
  }
  unint64_t v244 = __PAIR64__(v44, v204);
  int v245 = v205;
  unint64_t v204 = 8;
  int v205 = 0;
  v247 = v249;
  uint64_t v248 = 0x800000000;
  int v45 = v208;
  if (v208)
  {
    if (v207 == v209)
    {
      if (v208 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v249, v209, 24 * v208);
      LODWORD(v248) = v45;
    }
    else
    {
      v247 = v207;
      uint64_t v248 = v208;
      v207 = v209;
      HIDWORD(v208) = 0;
    }
    LODWORD(v208) = 0;
  }
  sub_1CCEB143C((uint64_t)&v250, (uint64_t)&v242);
  uint64_t v218 = v222;
  if (v194 == v193)
  {
    uint64_t v219 = v222;
    unsigned int v46 = HIDWORD(v195);
    if (HIDWORD(v195)) {
      memmove(v222, v194, 8 * HIDWORD(v195));
    }
  }
  else
  {
    uint64_t v219 = v194;
    v194 = v193;
    unsigned int v46 = HIDWORD(v195);
  }
  unint64_t v220 = __PAIR64__(v46, v195);
  int v221 = v196;
  unint64_t v195 = 8;
  int v196 = 0;
  int v223 = v225;
  uint64_t v224 = 0x800000000;
  int v47 = v199;
  if (v199)
  {
    if (v198 == v200)
    {
      if (v199 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v225, v198, 24 * v199);
      LODWORD(v224) = v47;
    }
    else
    {
      int v223 = v198;
      uint64_t v224 = v199;
      BOOL v198 = v200;
      HIDWORD(v199) = 0;
    }
    LODWORD(v199) = 0;
  }
  v226 = v230;
  if (v251 == v250)
  {
    v227 = v230;
    unsigned int v48 = HIDWORD(v252);
    if (HIDWORD(v252)) {
      memmove(v230, v251, 8 * HIDWORD(v252));
    }
  }
  else
  {
    v227 = v251;
    uint64_t v251 = v250;
    unsigned int v48 = HIDWORD(v252);
  }
  unint64_t v228 = __PAIR64__(v48, v252);
  int v229 = v253;
  unint64_t v252 = 8;
  int v253 = 0;
  uint64_t v231 = v233;
  uint64_t v232 = 0x800000000;
  int v49 = v256;
  if (v256)
  {
    if (v255 == v257)
    {
      if (v256 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v233, v255, 24 * v256);
      LODWORD(v232) = v49;
    }
    else
    {
      uint64_t v231 = v255;
      uint64_t v232 = v256;
      uint64_t v255 = v257;
      HIDWORD(v256) = 0;
    }
    LODWORD(v256) = 0;
  }
  if (v255 != v257) {
    free(v255);
  }
  if (v251 != v250) {
    free(v251);
  }
  if (v247 != v249) {
    free(v247);
  }
  if (v243 != v242) {
    free(v243);
  }
  if (v198 != v200) {
    free(v198);
  }
  if (v194 != v193) {
    free(v194);
  }
  if (v117 != v119) {
    free(v117);
  }
  if (v112 != v111) {
    free(v112);
  }
  if (v207 != v209) {
    free(v207);
  }
  if (v203 != v202) {
    free(v203);
  }
  if (v215 != v217) {
    free(v215);
  }
  if (v211 != v210) {
    free(v211);
  }
  v185 = v189;
  if (v219 == v218)
  {
    v186 = v189;
    unsigned int v50 = HIDWORD(v220);
    if (HIDWORD(v220)) {
      memmove(v189, v219, 8 * HIDWORD(v220));
    }
  }
  else
  {
    v186 = v219;
    uint64_t v219 = v218;
    unsigned int v50 = HIDWORD(v220);
  }
  unint64_t v187 = __PAIR64__(v50, v220);
  int v188 = v221;
  unint64_t v220 = 8;
  int v221 = 0;
  __int16 v190 = v192;
  uint64_t v191 = 0x800000000;
  int v51 = v224;
  if (v224)
  {
    if (v223 == v225)
    {
      if (v224 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v192, v225, 24 * v224);
      LODWORD(v191) = v51;
    }
    else
    {
      __int16 v190 = v223;
      uint64_t v191 = v224;
      int v223 = v225;
      HIDWORD(v224) = 0;
    }
    LODWORD(v224) = 0;
  }
  uint64_t v176 = v181;
  if (v227 == v226)
  {
    uint64_t v177 = v181;
    int v52 = HIDWORD(v228);
    if (HIDWORD(v228)) {
      memmove(v181, v227, 8 * HIDWORD(v228));
    }
  }
  else
  {
    uint64_t v177 = v227;
    v227 = v226;
    int v52 = HIDWORD(v228);
  }
  int v178 = v228;
  int v179 = v52;
  int v180 = v229;
  unint64_t v228 = 8;
  int v229 = 0;
  unint64_t v182 = v184;
  uint64_t v183 = 0x800000000;
  unsigned int v53 = v232;
  if (v232)
  {
    if (v231 == v233)
    {
      if (v232 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v184, v233, 24 * v232);
      LODWORD(v183) = v53;
    }
    else
    {
      unint64_t v182 = v231;
      uint64_t v183 = v232;
      uint64_t v231 = v233;
      HIDWORD(v232) = 0;
    }
    LODWORD(v232) = 0;
  }
  while (1)
  {
    uint64_t v54 = v191;
    uint64_t v55 = v190;
    if (v191 != v53) {
      goto LABEL_156;
    }
    if (!v53) {
      break;
    }
    uint64_t v56 = v182;
    uint64_t v57 = v190;
    while (*(void *)v57 == *(void *)v56 && v57[4] == v56[4])
    {
      v57 += 6;
      v56 += 6;
      if (v57 == (_DWORD *)((char *)v190 + 24 * v191)) {
        goto LABEL_176;
      }
    }
LABEL_156:
    int v59 = (char *)v190 + 24 * v191;
    unint64_t v61 = v6[1];
    unint64_t v60 = (unint64_t)v6[2];
    if ((unint64_t)v61 >= v60)
    {
      uint64_t v63 = *v6;
      uint64_t v64 = (v61 - *v6) >> 3;
      unint64_t v65 = v64 + 1;
      if ((unint64_t)(v64 + 1) >> 61) {
        abort();
      }
      uint64_t v66 = v60 - (void)v63;
      if (v66 >> 2 > v65) {
        unint64_t v65 = v66 >> 2;
      }
      if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v67 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v67 = v65;
      }
      if (v67)
      {
        if (v67 >> 61) {
          sub_1CB833614();
        }
        __int16 v68 = (char *)operator new(8 * v67);
      }
      else
      {
        __int16 v68 = 0;
      }
      uint64_t v69 = &v68[8 * v64];
      *(void *)uint64_t v69 = *((void *)v59 - 3);
      uint64_t v62 = v69 + 8;
      if (v61 != v63)
      {
        do
        {
          uint64_t v70 = *((void *)v61 - 1);
          v61 -= 8;
          *((void *)v69 - 1) = v70;
          v69 -= 8;
        }
        while (v61 != v63);
        unint64_t v61 = *v6;
      }
      uint64_t *v6 = v69;
      v6[1] = v62;
      v6[2] = &v68[8 * v67];
      if (v61)
      {
        operator delete(v61);
        LODWORD(v54) = v191;
      }
    }
    else
    {
      *(void *)unint64_t v61 = *((void *)v59 - 3);
      uint64_t v62 = v61 + 8;
    }
    v6[1] = v62;
    LODWORD(v191) = v54 - 1;
    if (v54 != 1) {
      sub_1CC08D090((llvm::SmallPtrSetImplBase *)&v185);
    }
    unsigned int v53 = v183;
  }
LABEL_176:
  int v193 = v197;
  if (v186 == v185)
  {
    v194 = v197;
    unsigned int v71 = HIDWORD(v187);
    if (HIDWORD(v187)) {
      memmove(v197, v186, 8 * HIDWORD(v187));
    }
  }
  else
  {
    v194 = v186;
    v186 = v185;
    unsigned int v71 = HIDWORD(v187);
  }
  unint64_t v195 = __PAIR64__(v71, v187);
  int v196 = v188;
  unint64_t v187 = 8;
  int v188 = 0;
  BOOL v198 = v200;
  unint64_t v199 = 0x800000000;
  if (v53)
  {
    if (v55 == v192)
    {
      if (v53 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v200, v192, 24 * v54);
      LODWORD(v199) = v53;
    }
    else
    {
      BOOL v198 = v55;
      unint64_t v199 = __PAIR64__(HIDWORD(v191), v53);
      __int16 v190 = v192;
      HIDWORD(v191) = 0;
    }
    LODWORD(v191) = 0;
  }
  unint64_t v201 = v6;
  if (v182 != v184) {
    free(v182);
  }
  if (v177 != v176) {
    free(v177);
  }
  if (v190 != v192) {
    free(v190);
  }
  if (v186 != v185) {
    free(v186);
  }
  v160 = v164;
  if (v145 == v144)
  {
    uint64_t v161 = v164;
    unsigned int v72 = HIDWORD(v146);
    if (HIDWORD(v146)) {
      memmove(v164, v145, 8 * HIDWORD(v146));
    }
  }
  else
  {
    uint64_t v161 = v145;
    unint64_t v145 = v144;
    unsigned int v72 = HIDWORD(v146);
  }
  unint64_t v162 = __PAIR64__(v72, v146);
  int v163 = v147;
  unint64_t v146 = 8;
  int v147 = 0;
  unint64_t v165 = v167;
  uint64_t v166 = 0x800000000;
  int v73 = v150;
  if (v150)
  {
    if (v149 == v151)
    {
      if (v150 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v167, v151, 24 * v150);
      LODWORD(v166) = v73;
    }
    else
    {
      unint64_t v165 = v149;
      uint64_t v166 = v150;
      uint64_t v149 = v151;
      HIDWORD(v150) = 0;
    }
    LODWORD(v150) = 0;
  }
  uint64_t v152 = v156;
  if (v194 == v193)
  {
    unsigned int v153 = v156;
    unsigned int v74 = HIDWORD(v195);
    if (HIDWORD(v195)) {
      memmove(v156, v194, 8 * HIDWORD(v195));
    }
  }
  else
  {
    unsigned int v153 = v194;
    v194 = v193;
    unsigned int v74 = HIDWORD(v195);
  }
  unint64_t v154 = __PAIR64__(v74, v195);
  int v155 = v196;
  unint64_t v195 = 8;
  int v196 = 0;
  v157 = v159;
  uint64_t v158 = 0x800000000;
  int v75 = v199;
  if (v199)
  {
    if (v198 == v200)
    {
      if (v199 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v159, v200, 24 * v199);
      LODWORD(v158) = v75;
    }
    else
    {
      v157 = v198;
      uint64_t v158 = v199;
      BOOL v198 = v200;
      HIDWORD(v199) = 0;
    }
    LODWORD(v199) = 0;
  }
  uint64_t v242 = v246;
  if (v161 == v160)
  {
    v243 = v246;
    unsigned int v76 = HIDWORD(v162);
    if (HIDWORD(v162)) {
      memmove(v246, v161, 8 * HIDWORD(v162));
    }
  }
  else
  {
    v243 = v161;
    uint64_t v161 = v160;
    unsigned int v76 = HIDWORD(v162);
  }
  unint64_t v244 = __PAIR64__(v76, v162);
  int v245 = v163;
  unint64_t v162 = 8;
  int v163 = 0;
  v247 = v249;
  uint64_t v248 = 0x800000000;
  int v77 = v166;
  if (v166)
  {
    if (v165 == v167)
    {
      if (v166 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v249, v167, 24 * v166);
      LODWORD(v248) = v77;
    }
    else
    {
      v247 = v165;
      uint64_t v248 = v166;
      unint64_t v165 = v167;
      HIDWORD(v166) = 0;
    }
    LODWORD(v166) = 0;
  }
  int v234 = v238;
  if (v153 == v152)
  {
    v235 = v238;
    unsigned int v78 = HIDWORD(v154);
    if (HIDWORD(v154)) {
      memmove(v238, v153, 8 * HIDWORD(v154));
    }
  }
  else
  {
    v235 = v153;
    unsigned int v153 = v152;
    unsigned int v78 = HIDWORD(v154);
  }
  unint64_t v236 = __PAIR64__(v78, v154);
  int v237 = v155;
  unint64_t v154 = 8;
  int v155 = 0;
  v239 = v241;
  uint64_t v240 = 0x800000000;
  int v79 = v158;
  if (v158)
  {
    if (v157 == v159)
    {
      if (v158 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v241, v159, 24 * v158);
      LODWORD(v240) = v79;
    }
    else
    {
      v239 = v157;
      uint64_t v240 = v158;
      v157 = v159;
      HIDWORD(v158) = 0;
    }
    LODWORD(v158) = 0;
  }
  uint64_t v111 = v116;
  if (v243 == v242)
  {
    uint64_t v112 = v116;
    int v80 = HIDWORD(v244);
    if (HIDWORD(v244)) {
      memmove(v116, v243, 8 * HIDWORD(v244));
    }
  }
  else
  {
    uint64_t v112 = v243;
    v243 = v242;
    int v80 = HIDWORD(v244);
  }
  int v113 = v244;
  int v114 = v80;
  int v115 = v245;
  unint64_t v244 = 8;
  int v245 = 0;
  v117 = v119;
  uint64_t v118 = 0x800000000;
  int v81 = v248;
  if (v248)
  {
    if (v247 == v249)
    {
      if (v248 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v119, v249, 24 * v248);
      LODWORD(v118) = v81;
    }
    else
    {
      v117 = v247;
      uint64_t v118 = v248;
      v247 = v249;
      HIDWORD(v248) = 0;
    }
    LODWORD(v248) = 0;
  }
  uint64_t v82 = v254;
  int v250 = v254;
  int v83 = v235;
  if (v235 == v234)
  {
    uint64_t v251 = v254;
    unsigned int v84 = HIDWORD(v236);
    if (HIDWORD(v236)) {
      memmove(v254, v235, 8 * HIDWORD(v236));
    }
    int v83 = v254;
  }
  else
  {
    uint64_t v251 = v235;
    v235 = v234;
    unsigned int v84 = HIDWORD(v236);
  }
  unint64_t v252 = __PAIR64__(v84, v236);
  int v253 = v237;
  unint64_t v236 = 8;
  int v237 = 0;
  uint64_t v255 = v257;
  uint64_t v256 = 0x800000000;
  uint64_t v85 = v240;
  if (v240)
  {
    if (v239 == v241)
    {
      if (v240 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v257, v241, 24 * v240);
      LODWORD(v256) = v85;
      int v83 = v251;
      uint64_t v82 = v250;
    }
    else
    {
      uint64_t v255 = v239;
      uint64_t v256 = v240;
      v239 = v241;
      HIDWORD(v240) = 0;
    }
    LODWORD(v240) = 0;
  }
  v168 = v172;
  if (v83 == v82)
  {
    uint64_t v169 = v172;
    unsigned int v86 = HIDWORD(v252);
    if (HIDWORD(v252)) {
      memmove(v172, v82, 8 * HIDWORD(v252));
    }
  }
  else
  {
    uint64_t v169 = v83;
    uint64_t v251 = v82;
    unsigned int v86 = HIDWORD(v252);
  }
  unint64_t v170 = __PAIR64__(v86, v252);
  int v171 = v253;
  unint64_t v252 = 8;
  int v253 = 0;
  uint64_t v173 = v175;
  unint64_t v174 = 0x800000000;
  uint64_t v87 = v255;
  if (v85)
  {
    if (v255 == v257)
    {
      if (v85 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v175, v257, 24 * v85);
      LODWORD(v174) = v85;
      uint64_t v87 = v255;
    }
    else
    {
      uint64_t v173 = v255;
      unint64_t v174 = __PAIR64__(HIDWORD(v256), v85);
      uint64_t v255 = v257;
      HIDWORD(v256) = 0;
      uint64_t v87 = v257;
    }
    LODWORD(v256) = 0;
  }
  if (v87 != v257) {
    free(v87);
  }
  if (v251 != v250) {
    free(v251);
  }
  if (v117 != v119) {
    free(v117);
  }
  if (v112 != v111) {
    free(v112);
  }
  if (v239 != v241) {
    free(v239);
  }
  if (v235 != v234) {
    free(v235);
  }
  if (v247 != v249) {
    free(v247);
  }
  if (v243 != v242) {
    free(v243);
  }
  int v88 = v201;
  uint64_t v111 = v116;
  if (v169 == v168)
  {
    uint64_t v112 = v116;
    int v89 = HIDWORD(v170);
    if (HIDWORD(v170)) {
      memmove(v116, v169, 8 * HIDWORD(v170));
    }
  }
  else
  {
    uint64_t v112 = v169;
    uint64_t v169 = v168;
    int v89 = HIDWORD(v170);
  }
  int v113 = v170;
  int v114 = v89;
  int v115 = v171;
  unint64_t v170 = 8;
  int v171 = 0;
  v117 = v119;
  uint64_t v118 = 0x800000000;
  int v90 = v174;
  int v91 = v173;
  if (v174)
  {
    if (v173 == v175)
    {
      if (v174 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v119, v175, 24 * v174);
      LODWORD(v118) = v90;
      int v91 = v173;
    }
    else
    {
      v117 = v173;
      uint64_t v118 = v174;
      uint64_t v173 = v175;
      HIDWORD(v174) = 0;
      int v91 = v175;
    }
    LODWORD(v174) = 0;
  }
  v119[24] = v88;
  if (v91 != v175) {
    free(v91);
  }
  if (v169 != v168) {
    free(v169);
  }
  if (v157 != v159) {
    free(v157);
  }
  if (v153 != v152) {
    free(v153);
  }
  if (v165 != v167) {
    free(v165);
  }
  if (v161 != v160) {
    free(v161);
  }
  if (v198 != v200) {
    free(v198);
  }
  if (v194 != v193) {
    free(v194);
  }
  sub_1CD481E4C((void **)&v218);
  if (v141 != v143) {
    free(v141);
  }
  if (v137 != v136) {
    free(v137);
  }
  if (v149 != v151) {
    free(v149);
  }
  if (v145 != v144) {
    free(v145);
  }
  if (v125 != v127) {
    free(v125);
  }
  if (v121 != v120) {
    free(v121);
  }
  if (v133 != v135) {
    free(v133);
  }
  if (__src != v128) {
    free(__src);
  }
  if (v117 != v119) {
    free(v117);
  }
  if (v112 != v111) {
    free(v112);
  }
  if (v100 != v102) {
    free(v100);
  }
  if (v96 != v95) {
    free(v96);
  }
  if (v108 != v110) {
    free(v108);
  }
  if (v104 != v103) {
    free(v104);
  }
}

void sub_1CCEB143C(uint64_t a1, uint64_t a2)
{
  v27[24] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = v24;
  uint64_t v20 = v24;
  uint64_t v5 = *(unsigned char **)(a2 + 8);
  if (v5 == *(unsigned char **)a2)
  {
    unsigned int v21 = v24;
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v19 = *(unsigned int *)(a2 + 16);
    uint64_t v4 = malloc_type_malloc(8 * v19, 0x4065EBACuLL);
    if (!v4 && (v19 || (uint64_t v4 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    unsigned int v21 = v4;
    uint64_t v6 = *(unsigned char **)a2;
    uint64_t v5 = *(unsigned char **)(a2 + 8);
  }
  unsigned int v8 = *(_DWORD *)(a2 + 16);
  unsigned int v7 = *(_DWORD *)(a2 + 20);
  LODWORD(v22) = v8;
  if (v5 == v6) {
    unsigned int v9 = v7;
  }
  else {
    unsigned int v9 = v8;
  }
  if (v9)
  {
    memmove(v4, v5, 8 * v9);
    unsigned int v7 = *(_DWORD *)(a2 + 20);
  }
  int v10 = *(_DWORD *)(a2 + 24);
  HIDWORD(v22) = v7;
  int v23 = v10;
  unsigned int v25 = v27;
  uint64_t v26 = 0x800000000;
  unsigned int v11 = *(_DWORD *)(a2 + 104);
  if (v11)
  {
    if (&v20 == (unsigned char **)a2)
    {
      unsigned int v11 = 0;
    }
    else
    {
      if (v11 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v27, *(const void **)(a2 + 96), 24 * *(unsigned int *)(a2 + 104));
      LODWORD(v26) = v11;
    }
  }
  int v12 = (void *)(a1 + 32);
  *(void *)a1 = a1 + 32;
  unsigned int v14 = v20;
  unsigned int v13 = v21;
  if (v21 == v20)
  {
    *(void *)(a1 + 8) = v12;
    int v15 = HIDWORD(v22);
    if (HIDWORD(v22)) {
      memmove(v12, v13, 8 * HIDWORD(v22));
    }
  }
  else
  {
    *(void *)(a1 + 8) = v21;
    unsigned int v21 = v14;
    int v15 = HIDWORD(v22);
  }
  int v16 = v23;
  *(_DWORD *)(a1 + 16) = v22;
  *(_DWORD *)(a1 + 20) = v15;
  *(_DWORD *)(a1 + 24) = v16;
  uint64_t v22 = 8;
  *(void *)(a1 + 96) = a1 + 112;
  int v23 = 0;
  *(void *)(a1 + 104) = 0x800000000;
  unsigned int v17 = v25;
  if (v11 && &v20 != (unsigned char **)a1)
  {
    if (v25 == v27)
    {
      memcpy((void *)(a1 + 112), v27, 24 * v11);
      *(_DWORD *)(a1 + 104) = v11;
      unsigned int v17 = v25;
    }
    else
    {
      *(void *)(a1 + 96) = v25;
      int v18 = HIDWORD(v26);
      *(_DWORD *)(a1 + 104) = v11;
      *(_DWORD *)(a1 + 108) = v18;
      unsigned int v25 = v27;
      HIDWORD(v26) = 0;
      unsigned int v17 = v27;
    }
    LODWORD(v26) = 0;
  }
  if (v17 != v27) {
    free(v17);
  }
  if (v21 != v20) {
    free(v21);
  }
}

llvm::SmallPtrSetImplBase *sub_1CCEB16CC(llvm::SmallPtrSetImplBase *this, uint64_t a2)
{
  *((void *)this + 4) = a2;
  *(void *)this = (char *)this + 32;
  *((void *)this + 1) = (char *)this + 32;
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 12) = (char *)this + 112;
  *((_DWORD *)this + 27) = 8;
  *((void *)this + 2) = 0x100000008;
  uint64_t v3 = *(void *)(a2 + 40);
  if (v3 == a2 + 40 || v3 == 0)
  {
    if (v3 == a2 + 40)
    {
      uint64_t v5 = 0;
      goto LABEL_8;
    }
    uint64_t v5 = v3 - 24;
    if (!v3) {
      uint64_t v5 = 0;
    }
    uint64_t v6 = (unsigned __int8 *)(v5 + 16);
  }
  else
  {
    uint64_t v5 = v3 - 24;
    uint64_t v6 = (unsigned __int8 *)(v3 - 8);
  }
  if (*v6 - 29 >= 0xB) {
    uint64_t v5 = 0;
  }
LABEL_8:
  *((void *)this + 14) = a2;
  *((void *)this + 15) = v5;
  *((void *)this + 16) = 0;
  *((_DWORD *)this + 26) = 1;
  sub_1CC08D090(this);
  return this;
}

uint64_t sub_1CCEB1784(uint64_t a1, uint64_t **a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5 = a5;
  unint64_t v6 = a4;
  uint64_t v7 = a1;
  int v16 = (uint64_t *)a4;
  unsigned int v8 = *(unsigned __int8 *)(a4 + 16);
  if (a4 && v8 == 21)
  {
    uint64_t v13 = *(void *)(*(void *)(a4 + 24) + 80);
    if (v13) {
      uint64_t v14 = v13 - 24;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = *(void *)(v14 + 48);
    unsigned int v11 = sub_1CD7824CC(a2, a4, &v16) + 5;
    a1 = v7;
    uint64_t v9 = v14;
    uint64_t v10 = v15;
    a4 = v6;
    a5 = v5;
  }
  else
  {
    if (a4 && v8 >= 0x1C) {
      llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry();
    }
    uint64_t v9 = *(void *)(a3 + 40);
    uint64_t v10 = a3 + 24;
    unsigned int v11 = 0;
  }

  return sub_1CCEB2118(a1, v9, v10, (uint64_t *)a4, a5, (uint64_t)v11);
}

const llvm::APInt *sub_1CCEB1928(uint64_t a1, unsigned int a2)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 32)) {
    unint64_t v2 = *(const llvm::APInt ****)(a1 + 32);
  }
  else {
    unint64_t v2 = (const llvm::APInt ***)(a1 + 40);
  }
  uint64_t v3 = (*v2)[a2];
  if (v3) {
    return v3;
  }
  uint64_t v6 = a2;
  sub_1CBF537B4((uint64_t)&v80, *(uint64_t ***)a1, *(void *)(a1 + 8), 0, 0, 0);
  uint64_t v8 = *(void *)(a1 + 24);
  if (!v8)
  {
    uint64_t v20 = *(unsigned __int8 **)(a1 + 16);
    if (v20 && v20[16] == 90)
    {
      while (1)
      {
        uint64_t v21 = *((void *)v20 - 4);
        if (!v21 || *(unsigned char *)(v21 + 16) != 16) {
          break;
        }
        int v23 = (void *)(v21 + 24);
        if (*(_DWORD *)(v21 + 32) >= 0x41u) {
          int v23 = (void *)*v23;
        }
        int v24 = (void *)*v23;
        uint64_t v25 = *v23;
        uint64_t v26 = (unsigned __int8 *)*((void *)v20 - 12);
        *(void *)(a1 + 16) = v26;
        if (v24 == a2)
        {
          (*v2)[v25] = (const llvm::APInt *)*((void *)v20 - 8);
          uint64_t v6 = v25;
          goto LABEL_73;
        }
        if (!(*v2)[v25])
        {
          (*v2)[v25] = (const llvm::APInt *)*((void *)v20 - 8);
          uint64_t v26 = *(unsigned __int8 **)(a1 + 16);
        }
        if (v26)
        {
          uint64_t v20 = v26;
          if (v26[16] == 90) {
            continue;
          }
        }
        goto LABEL_31;
      }
    }
    uint64_t v26 = v20;
LABEL_31:
    int v27 = *(llvm::ConstantInt **)(*(void *)v85 + 1960);
    unsigned int v28 = *(_DWORD *)(*(void *)v85 + 1968);
    unsigned int v77 = v28 >> 8;
    if (v28 >> 8 > 0x40) {
      operator new[]();
    }
    unint64_t v29 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v28) + 63);
    if (v28 <= 0xFF) {
      unint64_t v29 = 0;
    }
    unsigned int v76 = (const char *)(v29 & v6);
    unsigned int v30 = (unsigned __int8 *)llvm::ConstantInt::get(v27, (llvm::LLVMContext *)&v76, v7);
    if (v77 >= 0x41 && v76) {
      MEMORY[0x1D25D9CB0](v76, 0x1000C8000313F17);
    }
    int v31 = *(uint64_t ****)(a1 + 16);
    if ((*((unsigned char *)v31 + 23) & 0x10) == 0)
    {
      unint64_t v60 = 0;
      int v59 = &byte_1CFBCE98E;
      goto LABEL_57;
    }
    uint64_t v32 = ***v31;
    uint64_t v33 = *(void *)(v32 + 152);
    uint64_t v34 = *(unsigned int *)(v32 + 168);
    if (v34)
    {
      LODWORD(v35) = (v34 - 1) & ((v31 >> 4) ^ (v31 >> 9));
      uint64_t v36 = (uint64_t ****)(v33 + 16 * v35);
      int v37 = *v36;
      if (*v36 == v31)
      {
LABEL_56:
        uint64_t v58 = v36[1];
        unint64_t v61 = *v58;
        int v59 = (char *)(v58 + 2);
        unint64_t v60 = v61;
LABEL_57:
        __int16 v75 = 773;
        unsigned int v72 = v59;
        int v73 = v60;
        unsigned int v74 = ".i";
        unsigned int v76 = (const char *)&v72;
        uint64_t v78 = v6;
        __int16 v79 = 2050;
        uint64_t v57 = sub_1CB8445F4((uint64_t)&v80, v26, v30, (uint64_t)&v76);
        goto LABEL_58;
      }
      int v38 = 1;
      while (v37 != (uint64_t ***)-4096)
      {
        int v39 = v35 + v38++;
        uint64_t v35 = v39 & (v34 - 1);
        int v37 = *(uint64_t ****)(v33 + 16 * v35);
        if (v37 == v31)
        {
          uint64_t v36 = (uint64_t ****)(v33 + 16 * v35);
          goto LABEL_56;
        }
      }
    }
    uint64_t v36 = (uint64_t ****)(v33 + 16 * v34);
    goto LABEL_56;
  }
  uint64_t v9 = *(llvm::PointerType **)(v8 + 24);
  if (**v2)
  {
    if (a2) {
      goto LABEL_8;
    }
    goto LABEL_72;
  }
  uint64_t v40 = **(void **)(a1 + 16);
  unsigned int v41 = *(_DWORD *)(v40 + 8);
  if ((v41 & 0xFE) == 0x12) {
    unsigned int v41 = *(_DWORD *)(**(void **)(v40 + 16) + 8);
  }
  unint64_t v42 = llvm::PointerType::get(v9, (llvm::Type *)(v41 >> 8));
  int v43 = *(unsigned __int8 **)(a1 + 16);
  unsigned int v44 = *(uint64_t ***)v43;
  if ((v43[23] & 0x10) != 0)
  {
    uint64_t v45 = **v44;
    uint64_t v46 = *(void *)(v45 + 152);
    uint64_t v47 = *(unsigned int *)(v45 + 168);
    if (v47)
    {
      LODWORD(v48) = (v47 - 1) & ((v43 >> 4) ^ (v43 >> 9));
      int v49 = (unsigned __int8 **)(v46 + 16 * v48);
      unsigned int v50 = *v49;
      if (*v49 == v43)
      {
LABEL_60:
        uint64_t v62 = v49[1];
        unint64_t v65 = *(uint64_t ***)v62;
        uint64_t v63 = (char *)(v62 + 16);
        uint64_t v64 = v65;
        goto LABEL_61;
      }
      int v51 = 1;
      while (v50 != (unsigned __int8 *)-4096)
      {
        int v52 = v48 + v51++;
        uint64_t v48 = v52 & (v47 - 1);
        unsigned int v50 = *(unsigned __int8 **)(v46 + 16 * v48);
        if (v50 == v43)
        {
          int v49 = (unsigned __int8 **)(v46 + 16 * v48);
          goto LABEL_60;
        }
      }
    }
    int v49 = (unsigned __int8 **)(v46 + 16 * v47);
    goto LABEL_60;
  }
  uint64_t v64 = 0;
  uint64_t v63 = &byte_1CFBCE98E;
LABEL_61:
  __int16 v75 = 773;
  unsigned int v72 = v63;
  int v73 = v64;
  unsigned int v74 = ".i0";
  if (v44 != (uint64_t **)v42)
  {
    if (v43[16] <= 0x14u)
    {
      int v43 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, unint64_t))(*(void *)v86 + 224))(v86, 49, v43, v42);
      if (v43) {
        BOOL v68 = v43[16] >= 0x1Cu;
      }
      else {
        BOOL v68 = 0;
      }
      if (v68)
      {
        (*(void (**)(uint64_t, unsigned __int8 *, char **, uint64_t, uint64_t))(*(void *)v87 + 16))(v87, v43, &v72, v83, v84);
        if (v81)
        {
          uint64_t v70 = (llvm::MDNode **)v80;
          unsigned int v71 = (llvm::MDNode **)((char *)v80 + 16 * v81);
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v43, *(_DWORD *)v70, v70[1]);
            v70 += 2;
          }
          while (v70 != v71);
        }
      }
    }
    else
    {
      __int16 v79 = 257;
      int v43 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v43, v42, &v76, 0);
      (*(void (**)(uint64_t, unsigned __int8 *, char **, uint64_t, uint64_t))(*(void *)v87 + 16))(v87, v43, &v72, v83, v84);
      if (v81)
      {
        uint64_t v66 = (llvm::MDNode **)v80;
        unint64_t v67 = (llvm::MDNode **)((char *)v80 + 16 * v81);
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v43, *(_DWORD *)v66, v66[1]);
          v66 += 2;
        }
        while (v66 != v67);
      }
    }
  }
  **unint64_t v2 = (const llvm::APInt *)v43;
  if (a2)
  {
LABEL_8:
    uint64_t v10 = **v2;
    unsigned int v11 = *(uint64_t ****)(a1 + 16);
    if ((*((unsigned char *)v11 + 23) & 0x10) == 0)
    {
      uint64_t v55 = 0;
      uint64_t v54 = &byte_1CFBCE98E;
      goto LABEL_53;
    }
    uint64_t v12 = ***v11;
    uint64_t v13 = *(void *)(v12 + 152);
    uint64_t v14 = *(unsigned int *)(v12 + 168);
    if (v14)
    {
      LODWORD(v15) = (v14 - 1) & ((v11 >> 4) ^ (v11 >> 9));
      int v16 = (uint64_t ****)(v13 + 16 * v15);
      unsigned int v17 = *v16;
      if (*v16 == v11)
      {
LABEL_52:
        unsigned int v53 = v16[1];
        uint64_t v56 = *v53;
        uint64_t v54 = (char *)(v53 + 2);
        uint64_t v55 = v56;
LABEL_53:
        __int16 v75 = 773;
        unsigned int v72 = v54;
        int v73 = v55;
        unsigned int v74 = ".i";
        unsigned int v76 = (const char *)&v72;
        uint64_t v78 = v6;
        __int16 v79 = 2050;
        uint64_t v57 = sub_1CB930CF4((uint64_t *)&v80, (uint64_t)v9, v10, a2, (uint64_t)&v76);
LABEL_58:
        (*v2)[v6] = v57;
        goto LABEL_73;
      }
      int v18 = 1;
      while (v17 != (uint64_t ***)-4096)
      {
        int v19 = v15 + v18++;
        uint64_t v15 = v19 & (v14 - 1);
        unsigned int v17 = *(uint64_t ****)(v13 + 16 * v15);
        if (v17 == v11)
        {
          int v16 = (uint64_t ****)(v13 + 16 * v15);
          goto LABEL_52;
        }
      }
    }
    int v16 = (uint64_t ****)(v13 + 16 * v14);
    goto LABEL_52;
  }
LABEL_72:
  uint64_t v6 = 0;
LABEL_73:
  uint64_t v3 = (*v2)[v6];
  if (v80 != &v82) {
    free(v80);
  }
  return v3;
}

uint64_t sub_1CCEB1F88(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  sub_1CCEB21A4(a1, (uint64_t)a2, (uint64_t)a3);
  uint64_t v20 = a2;
  uint64_t v6 = sub_1CD7824CC((uint64_t **)a1, (unint64_t)a2, &v20);
  uint64_t v7 = (uint64_t *)(v6 + 5);
  uint64_t v8 = *((unsigned int *)v6 + 12);
  if (v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 8 * v8;
    do
    {
      unsigned int v11 = *(llvm::Value **)(*v7 + v9);
      if (v11)
      {
        uint64_t v12 = *a3;
        if (v11 != *(llvm::Value **)(*a3 + v9))
        {
          uint64_t v20 = *(uint64_t **)(*v7 + v9);
          uint64_t v13 = *(void *)(v12 + v9);
          if (*(unsigned __int8 *)(v13 + 16) >= 0x1Cu)
          {
            llvm::Value::takeName((int32x2_t ****)v13, v11);
            unsigned int v11 = (llvm::Value *)v20;
            uint64_t v13 = *(void *)(*a3 + v9);
          }
          llvm::Value::doRAUW(v11, (llvm::Value *)v13, (llvm::Value *)1);
          unsigned int v14 = *(_DWORD *)(a1 + 304);
          if (v14 >= *(_DWORD *)(a1 + 308))
          {
            sub_1CC9E6F68((unsigned int *)(a1 + 296), (uint64_t *)&v20);
          }
          else
          {
            uint64_t v15 = v20;
            int v16 = (llvm::ValueHandleBase *)(*(void *)(a1 + 296) + 24 * v14);
            *(void *)int v16 = 6;
            *((void *)v16 + 1) = 0;
            *((void *)v16 + 2) = v15;
            if (v15 != (uint64_t *)-8192 && v15 != (uint64_t *)-4096 && v15)
            {
              llvm::ValueHandleBase::AddToUseList(v16);
              unsigned int v14 = *(_DWORD *)(a1 + 304);
            }
            *(_DWORD *)(a1 + 304) = v14 + 1;
          }
        }
      }
      v9 += 8;
    }
    while (v10 != v9);
  }
  uint64_t result = sub_1CBB08064((uint64_t)v7, (uint64_t)a3);
  unsigned int v18 = *(_DWORD *)(a1 + 32);
  if (v18 >= *(_DWORD *)(a1 + 36)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v19 = (uint64_t **)(*(void *)(a1 + 24) + 16 * v18);
  unsigned char *v19 = a2;
  v19[1] = v7;
  ++*(_DWORD *)(a1 + 32);
  return result;
}

uint64_t sub_1CCEB2118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  *(void *)(a1 + 40) = a1 + 56;
  *(void *)(a1 + 48) = 0x800000000;
  uint64_t v7 = *a4;
  if (*(unsigned char *)(*a4 + 8) == 15) {
    uint64_t v7 = a5;
  }
  uint64_t v8 = *(unsigned int *)(v7 + 32);
  *(_DWORD *)(a1 + 120) = v8;
  if (a6)
  {
    if (!*(_DWORD *)(a6 + 8) && v8) {
      goto LABEL_10;
    }
  }
  else if (v8)
  {
    a6 = a1 + 40;
LABEL_10:
    sub_1CC2FCB18(a6, v8, 0);
  }
  return a1;
}

void sub_1CCEB21A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v32[8] = *MEMORY[0x1E4F143B8];
  unsigned int v30 = v32;
  uint64_t v31 = 0x400000000;
  llvm::Value::getAllMetadata((unsigned char *)a2, (uint64_t)&v30);
  uint64_t v6 = *(unsigned int *)(a3 + 8);
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      uint64_t v8 = *(void *)(*(void *)a3 + 8 * i);
      if (v8) {
        BOOL v9 = *(unsigned __int8 *)(v8 + 16) >= 0x1Cu;
      }
      else {
        BOOL v9 = 0;
      }
      if (!v9) {
        continue;
      }
      if (v31)
      {
        uint64_t v10 = 16 * v31;
        unsigned int v11 = (llvm::MDNode **)((char *)v30 + 8);
        do
        {
          unsigned int v12 = *((_DWORD *)v11 - 2);
          BOOL v13 = v12 > 8 || ((1 << v12) & 0x1EA) == 0;
          if (!v13 || (v12 != 25 ? (BOOL v14 = *(_DWORD *)(a1 + 1080) == v12) : (BOOL v14 = 1), v14)) {
            llvm::Instruction::setMetadata((llvm::Instruction *)v8, v12, *v11);
          }
          v11 += 2;
          v10 -= 16;
        }
        while (v10);
      }
      llvm::Instruction::copyIRFlags(v8, a2, 1);
      uint64_t v15 = *(unsigned __int8 **)(a2 + 48);
      if (!v15) {
        continue;
      }
      uint64_t v17 = *(void *)(v8 + 48);
      int v16 = (unsigned __int8 **)(v8 + 48);
      if (v17) {
        continue;
      }
      unsigned int v28 = *(unsigned __int8 **)(a2 + 48);
      llvm::MetadataTracking::track((uint64_t)&v28, v15, 2);
      if (&v28 != v16)
      {
        unsigned int v18 = *v16;
        if (!*v16) {
          goto LABEL_26;
        }
        int v20 = *v18;
        if ((v20 - 4) > 0x1E)
        {
          if ((v20 - 3) >= 0xFFFFFFFE) {
            int v23 = *v16;
          }
          else {
            int v23 = 0;
          }
          if ((v20 - 3) < 0xFFFFFFFE)
          {
            if (v20 == 3) {
              *((void *)v18 + 1) = 0;
            }
            goto LABEL_26;
          }
          unint64_t v22 = (unint64_t)(v23 + 8);
LABEL_41:
          unint64_t v29 = v16;
          sub_1CC5FA668(v22 + 16, &v29);
        }
        else if ((v18[1] & 0x7F) == 2 || *((_DWORD *)v18 + 3))
        {
          uint64_t v21 = *((void *)v18 + 2);
          if ((v21 & 4) != 0)
          {
            unint64_t v22 = v21 & 0xFFFFFFFFFFFFFFF8;
            if (v22) {
              goto LABEL_41;
            }
          }
        }
LABEL_26:
        int v19 = v28;
        llvm::ValueHandleBase *v16 = v28;
        if (v19)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v28, v19, (uint64_t)v16);
          unsigned int v28 = 0;
        }
        continue;
      }
      if (v28)
      {
        int v24 = *v28;
        if ((v24 - 4) > 0x1E)
        {
          if ((v24 - 3) >= 0xFFFFFFFE) {
            int v27 = v28;
          }
          else {
            int v27 = 0;
          }
          if ((v24 - 3) < 0xFFFFFFFE)
          {
            if (v24 == 3) {
              *((void *)v28 + 1) = 0;
            }
            continue;
          }
          unint64_t v26 = (unint64_t)(v27 + 8);
        }
        else
        {
          if ((v28[1] & 0x7F) != 2 && !*((_DWORD *)v28 + 3)) {
            continue;
          }
          uint64_t v25 = *((void *)v28 + 2);
          if ((v25 & 4) == 0) {
            continue;
          }
          unint64_t v26 = v25 & 0xFFFFFFFFFFFFFFF8;
          if (!v26) {
            continue;
          }
        }
        unint64_t v29 = &v28;
        sub_1CC5FA668(v26 + 16, &v29);
      }
    }
  }
  if (v30 != v32) {
    free(v30);
  }
}

BOOL sub_1CCEB244C(uint64_t **a1, uint64_t *a2)
{
  v56[1] = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)(*a2 + 8) & 0xFE) == 0x12) {
    uint64_t v2 = *a2;
  }
  else {
    uint64_t v2 = 0;
  }
  if (!v2) {
    return v2 != 0;
  }
  uint64_t v6 = 0;
  unint64_t v7 = *(unsigned int *)(v2 + 32);
  uint64_t v8 = *(void *)*a2;
  v48[0] = v49;
  v48[1] = (void *)0x200000000;
  v49[6] = v8;
  v49[7] = &v55;
  v49[8] = v56;
  v49[9] = 0;
  int v50 = 0;
  __int16 v51 = 512;
  char v52 = 7;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = &unk_1F2616E88;
  v56[0] = &unk_1F2617008;
  BOOL v9 = a2 + 3;
  uint64_t v11 = a2[5];
  uint64_t v10 = (unsigned __int8 *)a2[6];
  v49[4] = v11;
  v49[5] = v9;
  v42[0] = v10;
  if (v10)
  {
    llvm::MetadataTracking::track((uint64_t)v42, v10, 2);
    uint64_t v6 = v42[0];
  }
  sub_1CB8461A4((uint64_t)v48, 0, v6);
  if (v42[0])
  {
    int v32 = *(unsigned __int8 *)v42[0];
    if ((v32 - 4) > 0x1E)
    {
      if ((v32 - 3) >= 0xFFFFFFFE) {
        uint64_t v35 = v42[0];
      }
      else {
        uint64_t v35 = 0;
      }
      if ((v32 - 3) < 0xFFFFFFFE)
      {
        if (v32 == 3) {
          *(void *)(v42[0] + 8) = 0;
        }
        goto LABEL_9;
      }
      unint64_t v34 = v35 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v42[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v42[0] + 12)) {
        goto LABEL_9;
      }
      uint64_t v33 = *(void *)(v42[0] + 16);
      if ((v33 & 4) == 0) {
        goto LABEL_9;
      }
      unint64_t v34 = v33 & 0xFFFFFFFFFFFFFFF8;
      if (!v34) {
        goto LABEL_9;
      }
    }
    v45[0] = v42;
    sub_1CC5FA668(v34 + 16, v45);
  }
LABEL_9:
  int v12 = *((_DWORD *)a2 + 5);
  if ((v12 & 0x40000000) != 0) {
    BOOL v13 = (unint64_t *)*(a2 - 1);
  }
  else {
    BOOL v13 = (unint64_t *)&a2[-4 * (v12 & 0x7FFFFFF)];
  }
  sub_1CCEB1784((uint64_t)v45, a1, (uint64_t)a2, *v13, 0);
  int v14 = *((_DWORD *)a2 + 5);
  if ((v14 & 0x40000000) != 0) {
    uint64_t v15 = (uint64_t *)*(a2 - 1);
  }
  else {
    uint64_t v15 = &a2[-4 * (v14 & 0x7FFFFFF)];
  }
  sub_1CCEB1784((uint64_t)v42, a1, (uint64_t)a2, v15[4], 0);
  v40[0] = v41;
  v40[1] = (void *)0x800000000;
  sub_1CD42769C((uint64_t)v40, v7);
  if (v7)
  {
    uint64_t v16 = 0;
    while (1)
    {
      uint64_t v17 = sub_1CCEB1928((uint64_t)v45, v16);
      unsigned int v18 = sub_1CCEB1928((uint64_t)v42, v16);
      if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
      {
        uint64_t v28 = 0;
        unint64_t v29 = &byte_1CFBCE98E;
        goto LABEL_26;
      }
      uint64_t v19 = **(void **)*a2;
      uint64_t v20 = *(void *)(v19 + 152);
      uint64_t v21 = *(unsigned int *)(v19 + 168);
      if (!v21) {
        goto LABEL_24;
      }
      LODWORD(v22) = (v21 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      int v23 = (uint64_t **)(v20 + 16 * v22);
      int v24 = *v23;
      if (*v23 != a2) {
        break;
      }
LABEL_25:
      int v27 = v23[1];
      uint64_t v30 = *v27;
      unint64_t v29 = (char *)(v27 + 2);
      uint64_t v28 = v30;
LABEL_26:
      __int16 v37 = 773;
      v36[0] = v29;
      v36[1] = v28;
      v36[2] = ".i";
      v38[0] = v36;
      v38[2] = v16;
      __int16 v39 = 2050;
      uint64_t v31 = sub_1CB844E98((uint64_t)v48, *((unsigned __int8 *)a2 + 16) - 28, (uint64_t)v17, (uint64_t)v18, (uint64_t)v38, 0);
      *((void *)v40[0] + v16++) = v31;
      if (v16 == v7) {
        goto LABEL_29;
      }
    }
    int v25 = 1;
    while (v24 != (uint64_t *)-4096)
    {
      int v26 = v22 + v25++;
      uint64_t v22 = v26 & (v21 - 1);
      int v24 = *(uint64_t **)(v20 + 16 * v22);
      if (v24 == a2)
      {
        int v23 = (uint64_t **)(v20 + 16 * v22);
        goto LABEL_25;
      }
    }
LABEL_24:
    int v23 = (uint64_t **)(v20 + 16 * v21);
    goto LABEL_25;
  }
LABEL_29:
  sub_1CCEB1F88((uint64_t)a1, a2, (uint64_t *)v40);
  if (v40[0] != v41) {
    free(v40[0]);
  }
  if (v43 != &v44) {
    free(v43);
  }
  if (v46 != &v47) {
    free(v46);
  }
  if (v48[0] != v49) {
    free(v48[0]);
  }
  return v2 != 0;
}

uint64_t sub_1CCEB282C(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4 = result;
  if (a2
    && (*(_DWORD *)(a2 + 8) & 0xFE) == 0x12
    && ((uint64_t v8 = *(void *)(a2 + 24),
         uint64_t v9 = sub_1CB83544C(a4, v8),
         int v11 = v10,
         uint64_t result = sub_1CB83544C(a4, v8),
         v9 == ((result + 7) & 0xFFFFFFFFFFFFFFF8))
      ? (BOOL v13 = v11 == (v12 == 1))
      : (BOOL v13 = 0),
        v13))
  {
    uint64_t result = sub_1CB83544C(a4, v8);
    unint64_t v16 = (unint64_t)(result + 7) >> 3;
    if (v15 == 1) {
    *(void *)uint64_t v4 = a2;
    }
    *(void *)(v4 + 8) = v8;
    *(unsigned char *)(v4 + 16) = a3;
    char v14 = 1;
    *(void *)(v4 + 24) = v16;
  }
  else
  {
    char v14 = 0;
    *(unsigned char *)uint64_t v4 = 0;
  }
  *(unsigned char *)(v4 + 32) = v14;
  return result;
}

void sub_1CCEB2910(char **a1, unint64_t a2)
{
  unint64_t v2 = *((unsigned int *)a1 + 2);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      unint64_t v7 = *((unsigned int *)a1 + 3);
      if (v7 >= a2)
      {
        int v11 = *a1;
      }
      else
      {
        if (HIDWORD(a2)) {
          sub_1CD0A88F0(a2);
        }
        if (v7 == -1) {
          sub_1CD0A89A8(0xFFFFFFFFuLL);
        }
        unint64_t v8 = (2 * v7) | 1;
        if (v8 <= a2) {
          unint64_t v8 = a2;
        }
        if (v8 >= 0xFFFFFFFF) {
          uint64_t v9 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v9 = v8;
        }
        int v10 = (char *)malloc_type_malloc(v9 << 7, 0x4065EBACuLL);
        if (!v10) {
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        }
        int v11 = v10;
        int v12 = *a1;
        uint64_t v13 = *((unsigned int *)a1 + 2);
        if (v13)
        {
          uint64_t v14 = 0;
          uint64_t v15 = v13 << 7;
          do
          {
            unint64_t v16 = &v11[v14];
            uint64_t v17 = &v12[v14];
            long long v18 = *(_OWORD *)&v12[v14];
            long long v19 = *(_OWORD *)&v12[v14 + 16];
            *((void *)v16 + 4) = *(void *)&v12[v14 + 32];
            *(_OWORD *)unint64_t v16 = v18;
            *((_OWORD *)v16 + 1) = v19;
            uint64_t v20 = &v11[v14 + 56];
            *(void *)&v11[v14 + 40] = v20;
            *((void *)v16 + 6) = 0x800000000;
            unsigned int v21 = *(_DWORD *)&v12[v14 + 48];
            if (v21) {
              BOOL v22 = v17 == v16;
            }
            else {
              BOOL v22 = 1;
            }
            if (!v22)
            {
              int v23 = (char *)*((void *)v17 + 5);
              if (v17 + 56 == v23)
              {
                if (v21 >= 9) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                memcpy(v20, v23, 8 * *(unsigned int *)&v12[v14 + 48]);
                *((_DWORD *)v16 + 12) = v21;
              }
              else
              {
                *(void *)&v11[v14 + 40] = v23;
                int v24 = *(_DWORD *)&v12[v14 + 52];
                *((_DWORD *)v16 + 12) = v21;
                *((_DWORD *)v16 + 13) = v24;
                *((void *)v17 + 5) = v17 + 56;
                *(_DWORD *)&v12[v14 + 52] = 0;
              }
              *((_DWORD *)v17 + 12) = 0;
            }
            *((_DWORD *)v16 + 30) = *((_DWORD *)v17 + 30);
            v14 += 128;
          }
          while (v15 != v14);
          int v12 = *a1;
          uint64_t v25 = *((unsigned int *)a1 + 2);
          if (v25)
          {
            uint64_t v26 = v25 << 7;
            do
            {
              int v27 = *(char **)&v12[v26 - 88];
              if (&v12[v26 - 72] != v27) {
                free(v27);
              }
              v26 -= 128;
            }
            while (v26);
            int v12 = *a1;
          }
        }
        if (v12 != (char *)(a1 + 2)) {
          free(v12);
        }
        *a1 = v11;
        *((_DWORD *)a1 + 3) = v9;
        unint64_t v2 = *((unsigned int *)a1 + 2);
      }
      if (v2 != a2)
      {
        uint64_t v28 = &v11[128 * v2];
        do
        {
          *((_OWORD *)v28 + 2) = 0uLL;
          *((_OWORD *)v28 + 3) = 0uLL;
          *((_OWORD *)v28 + 6) = 0uLL;
          *((_OWORD *)v28 + 7) = 0uLL;
          *((_OWORD *)v28 + 4) = 0uLL;
          *((_OWORD *)v28 + 5) = 0uLL;
          *(_OWORD *)uint64_t v28 = 0uLL;
          *((_OWORD *)v28 + 1) = 0uLL;
          *((void *)v28 + 5) = v28 + 56;
          *((_DWORD *)v28 + 13) = 8;
          v28 += 128;
        }
        while (v28 != &v11[128 * a2]);
      }
    }
    else
    {
      uint64_t v5 = (void **)&(*a1)[128 * v2 - 88];
      unint64_t v6 = (a2 << 7) - (v2 << 7);
      do
      {
        if (v5 + 2 != *v5) {
          free(*v5);
        }
        v5 -= 16;
        v6 += 128;
      }
      while (v6);
    }
    *((_DWORD *)a1 + 2) = a2;
  }
}

BOOL sub_1CCEB2BA0(uint64_t **a1, uint64_t *a2)
{
  v64[1] = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)(*a2 + 8) & 0xFE) == 0x12) {
    uint64_t v2 = *a2;
  }
  else {
    uint64_t v2 = 0;
  }
  if (!v2) {
    return v2 != 0;
  }
  unint64_t v6 = 0;
  unint64_t v7 = *(unsigned int *)(v2 + 32);
  uint64_t v8 = *(void *)*a2;
  int v49 = (llvm::MDNode **)v51;
  uint64_t v50 = 0x200000000;
  uint64_t v54 = v8;
  uint64_t v55 = &v63;
  uint64_t v56 = v64;
  uint64_t v57 = 0;
  int v58 = 0;
  __int16 v59 = 512;
  char v60 = 7;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = &unk_1F2616E88;
  v64[0] = &unk_1F2617008;
  uint64_t v9 = a2 + 3;
  uint64_t v11 = a2[5];
  int v10 = (void *)a2[6];
  uint64_t v52 = v11;
  uint64_t v53 = v9;
  v44[0] = v10;
  if (v10)
  {
    llvm::MetadataTracking::track((uint64_t)v44, (unsigned __int8 *)v10, 2);
    unint64_t v6 = v44[0];
  }
  sub_1CB8461A4((uint64_t)&v49, 0, (uint64_t)v6);
  if (v44[0])
  {
    int v32 = *(unsigned __int8 *)v44[0];
    if ((v32 - 4) > 0x1E)
    {
      if ((v32 - 3) >= 0xFFFFFFFE) {
        uint64_t v35 = v44[0];
      }
      else {
        uint64_t v35 = 0;
      }
      if ((v32 - 3) < 0xFFFFFFFE)
      {
        if (v32 == 3) {
          *((void *)v44[0] + 1) = 0;
        }
        goto LABEL_9;
      }
      unint64_t v34 = (unint64_t)v35 + 8;
    }
    else
    {
      if ((*((unsigned char *)v44[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v44[0] + 3)) {
        goto LABEL_9;
      }
      uint64_t v33 = *((void *)v44[0] + 2);
      if ((v33 & 4) == 0) {
        goto LABEL_9;
      }
      unint64_t v34 = v33 & 0xFFFFFFFFFFFFFFF8;
      if (!v34) {
        goto LABEL_9;
      }
    }
    v46[0] = v44;
    sub_1CC5FA668(v34 + 16, v46);
  }
LABEL_9:
  sub_1CCEB1784((uint64_t)v46, a1, (uint64_t)a2, *(a2 - 4), 0);
  v44[0] = v45;
  v44[1] = (void *)0x800000000;
  sub_1CD42769C((uint64_t)v44, v7);
  if (v7)
  {
    uint64_t v12 = 0;
    while (1)
    {
      int v13 = *((unsigned __int8 *)a2 + 16);
      uint64_t v14 = sub_1CCEB1928((uint64_t)v46, v12);
      uint64_t v15 = (unsigned __int8 *)v14;
      if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
      {
        uint64_t v25 = 0;
        uint64_t v26 = &byte_1CFBCE98E;
        goto LABEL_20;
      }
      uint64_t v16 = **(void **)*a2;
      uint64_t v17 = *(void *)(v16 + 152);
      uint64_t v18 = *(unsigned int *)(v16 + 168);
      if (!v18) {
        goto LABEL_18;
      }
      LODWORD(v19) = (v18 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      uint64_t v20 = (uint64_t **)(v17 + 16 * v19);
      unsigned int v21 = *v20;
      if (*v20 != a2) {
        break;
      }
LABEL_19:
      int v24 = v20[1];
      uint64_t v27 = *v24;
      uint64_t v26 = (char *)(v24 + 2);
      uint64_t v25 = v27;
LABEL_20:
      uint64_t v28 = *(void *)(v2 + 24);
      __int16 v39 = 773;
      v38[0] = v26;
      v38[1] = v25;
      v38[2] = ".i";
      v40[0] = v38;
      v40[2] = v12;
      __int16 v41 = 2050;
      if (*(void *)v14 != v28)
      {
        if (*((unsigned __int8 *)v14 + 16) <= 0x14u)
        {
          uint64_t v15 = (unsigned __int8 *)(*((uint64_t (**)(void **, void, const llvm::APInt *, uint64_t))*v55 + 28))(v55, (v13 - 28), v14, v28);
          if (v15) {
            BOOL v30 = v15[16] >= 0x1Cu;
          }
          else {
            BOOL v30 = 0;
          }
          if (v30)
          {
            (*(void (**)(void *, unsigned __int8 *, void *, uint64_t, uint64_t *))(*v56 + 16))(v56, v15, v40, v52, v53);
            if (v50)
            {
              uint64_t v31 = v49;
              __int16 v37 = (char *)&v49[2 * v50];
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v15, *(_DWORD *)v31, v31[1]);
                v31 += 2;
              }
              while (v31 != (llvm::MDNode **)v37);
            }
          }
        }
        else
        {
          __int16 v43 = 257;
          uint64_t v15 = (unsigned __int8 *)llvm::CastInst::Create(v13 - 28, (uint64_t)v14, v28, &v42, 0);
          (*(void (**)(void *, unsigned __int8 *, void *, uint64_t, uint64_t *))(*v56 + 16))(v56, v15, v40, v52, v53);
          if (v50)
          {
            unint64_t v29 = v49;
            uint64_t v36 = (char *)&v49[2 * v50];
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v15, *(_DWORD *)v29, v29[1]);
              v29 += 2;
            }
            while (v29 != (llvm::MDNode **)v36);
          }
        }
      }
      *((void *)v44[0] + v12++) = v15;
      if (v12 == v7) {
        goto LABEL_37;
      }
    }
    int v22 = 1;
    while (v21 != (uint64_t *)-4096)
    {
      int v23 = v19 + v22++;
      uint64_t v19 = v23 & (v18 - 1);
      unsigned int v21 = *(uint64_t **)(v17 + 16 * v19);
      if (v21 == a2)
      {
        uint64_t v20 = (uint64_t **)(v17 + 16 * v19);
        goto LABEL_19;
      }
    }
LABEL_18:
    uint64_t v20 = (uint64_t **)(v17 + 16 * v18);
    goto LABEL_19;
  }
LABEL_37:
  sub_1CCEB1F88((uint64_t)a1, a2, (uint64_t *)v44);
  if (v44[0] != v45) {
    free(v44[0]);
  }
  if (v47 != &v48) {
    free(v47);
  }
  if (v49 != (llvm::MDNode **)v51) {
    free(v49);
  }
  return v2 != 0;
}

uint64_t sub_1CCEB3054(uint64_t **a1, uint64_t *a2)
{
  v125[8] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*a2) {
    BOOL v3 = (*(_DWORD *)(*a2 + 8) & 0xFE) == 18;
  }
  else {
    BOOL v3 = 0;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v5 = *(a2 - 4);
  if (!v5) {
    return 0;
  }
  if (*(unsigned char *)(v5 + 16)) {
    return 0;
  }
  if (*(void *)(v5 + 24) != a2[9]) {
    return 0;
  }
  unint64_t v6 = (llvm *)*(unsigned int *)(v5 + 36);
  if (!v6) {
    return 0;
  }
  uint64_t result = llvm::isTriviallyVectorizable((llvm *)*(unsigned int *)(v5 + 36));
  if (!result) {
    return result;
  }
  int v9 = *((unsigned __int8 *)a2 + 16);
  if (v9 == 84)
  {
    uint64_t v10 = 0;
  }
  else if (v9 == 39)
  {
    uint64_t v10 = (*((_DWORD *)a2 + 20) + 1);
  }
  else
  {
    uint64_t v10 = 2;
  }
  int v11 = *((_DWORD *)a2 + 5);
  if (v11 < 0 && (int v80 = &a2[-4 * (v11 & 0x7FFFFFF)], v81 = *(v80 - 1), (v81 & 0xFFFFFFFF0) != 0))
  {
    uint64_t v13 = -(uint64_t)(v11 & 0x7FFFFFF);
    uint64_t v12 = (*((_DWORD *)v80 - 3) - *(_DWORD *)((char *)v80 - v81));
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = -(uint64_t)(v11 & 0x7FFFFFF);
  }
  uint64_t v14 = *(unsigned int *)(v2 + 32);
  unint64_t v15 = (unint64_t)(-32 * v10 - 32 * v12 - 32 * v13 - 32) >> 5;
  unsigned int v91 = v15;
  unint64_t v16 = v15;
  unint64_t v122 = v125;
  int v124 = 8;
  size_t v17 = 8 * v15;
  if (v15 >= 9uLL)
  {
    unsigned int v123 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v15) {
    bzero(v125, v17);
  }
  size_t v85 = v17;
  uint64_t v90 = v14;
  unsigned int v123 = v91;
  v99[0] = 0;
  long long v100 = 0u;
  long long v103 = 0u;
  long long v104 = 0u;
  long long v101 = 0u;
  long long v102 = 0u;
  *(_OWORD *)uint64_t v97 = 0u;
  long long v98 = 0u;
  v99[1] = (char *)&v100 + 8;
  DWORD1(v100) = 8;
  uint64_t v118 = v120;
  unint64_t v92 = v16 << 7;
  uint64_t v119 = 0x800000000;
  if (v16 < 9)
  {
    if (v16)
    {
      int v28 = 0;
      unint64_t v29 = &v121;
      uint64_t v30 = -(uint64_t)v16;
      do
      {
        long long v31 = v98;
        *(_OWORD *)(v29 - 7) = *(_OWORD *)v97;
        *(_OWORD *)(v29 - 5) = v31;
        *(v29 - 3) = (uint64_t)v99[0];
        *(v29 - 2) = (uint64_t)v29;
        *(v29 - 1) = 0x800000000;
        if (v100)
        {
          sub_1CBB08064((uint64_t)(v29 - 2), (uint64_t)&v99[1]);
          int v28 = DWORD2(v104);
        }
        *((_DWORD *)v29 + 16) = v28;
        v29 += 16;
      }
      while (!__CFADD__(v30++, 1));
    }
  }
  else
  {
    uint64_t v18 = 17;
    if (v16 > 0x11) {
      uint64_t v18 = v16;
    }
    int v86 = v18;
    uint64_t v19 = (char *)malloc_type_malloc(v18 << 7, 0x4065EBACuLL);
    if (!v19) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    uint64_t v20 = v19;
    uint64_t v21 = 0;
    do
    {
      int v22 = (void **)&v20[v21];
      long long v23 = *(_OWORD *)v97;
      long long v24 = v98;
      void v22[4] = v99[0];
      *(_OWORD *)int v22 = v23;
      *((_OWORD *)v22 + 1) = v24;
      *(void *)&v20[v21 + 40] = &v20[v21 + 56];
      v22[6] = (void *)0x800000000;
      if (v100) {
        sub_1CBB08064((uint64_t)&v20[v21 + 40], (uint64_t)&v99[1]);
      }
      *((_DWORD *)v22 + 30) = DWORD2(v104);
      v21 += 128;
    }
    while (v92 != v21);
    uint64_t v25 = (char *)v118;
    if (v119)
    {
      unint64_t v26 = (unint64_t)v119 << 7;
      do
      {
        uint64_t v27 = *(char **)&v25[v26 - 88];
        if (&v25[v26 - 72] != v27) {
          free(v27);
        }
        v26 -= 128;
      }
      while (v26);
      uint64_t v25 = (char *)v118;
    }
    if (v25 != v120) {
      free(v25);
    }
    uint64_t v118 = v20;
    HIDWORD(v119) = v86;
  }
  LODWORD(v119) = v91;
  if (v99[1] != (char *)&v100 + 8) {
    free(v99[1]);
  }
  sub_1CCEB2910((char **)&v118, v16);
  int v114 = v117;
  unsigned int v116 = 3;
  if ((*(_DWORD *)(v2 + 8) & 0xFE) == 0x12) {
    uint64_t v2 = **(void **)(v2 + 16);
  }
  v117[0] = v2;
  unsigned int v115 = 1;
  if (v91)
  {
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = a2;
    do
    {
      unint64_t v36 = v35[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
      if ((*(_DWORD *)(*(void *)v36 + 8) & 0xFE) == 0x12)
      {
        sub_1CCEB1784((uint64_t)v97, a1, (uint64_t)a2, v36, 0);
        __int16 v37 = (char *)v118;
        int v38 = (void **)((char *)v118 + v34);
        long long v39 = *(_OWORD *)v97;
        long long v40 = v98;
        void v38[4] = v99[0];
        *(_OWORD *)int v38 = v39;
        *((_OWORD *)v38 + 1) = v40;
        __int16 v41 = v38 + 5;
        unint64_t v42 = (char *)v99[1];
        if (v38 + 5 != &v99[1])
        {
          if (v99[1] == (char *)&v100 + 8)
          {
            __int16 v43 = &v37[v34];
            uint64_t v44 = *(unsigned int *)&v37[v34 + 48];
            if (v44 >= v100)
            {
              uint64_t v82 = v38;
              int v47 = v100;
              if (v100) {
                memmove(*v41, (char *)&v100 + 8, 8 * v100);
              }
              *((_DWORD *)v43 + 12) = v47;
              int v38 = v82;
            }
            else
            {
              uint64_t v87 = &v37[v34];
              int v88 = v100;
              if (*((_DWORD *)v43 + 13) < v100)
              {
                *((_DWORD *)v43 + 12) = 0;
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v44)
              {
                uint64_t v83 = v38;
                uint64_t v48 = v38 + 5;
                memmove(*v41, (char *)&v100 + 8, 8 * v44);
                __int16 v41 = v48;
                int v38 = v83;
              }
              else
              {
                uint64_t v44 = 0;
              }
              uint64_t v45 = v38;
              if (v44 != v100) {
                memcpy((char *)*v41 + 8 * v44, (char *)v99[1] + 8 * v44, 8 * v100 - 8 * v44);
              }
              *((_DWORD *)v87 + 12) = v88;
              int v38 = v45;
            }
          }
          else
          {
            uint64_t v46 = &v37[v34];
            if (&v37[v34 + 56] != *v41)
            {
              uint64_t v84 = v38;
              int v89 = v38 + 5;
              free(*v41);
              __int16 v41 = v89;
              int v38 = v84;
              unint64_t v42 = (char *)v99[1];
            }
            *__int16 v41 = v42;
            *((void *)v46 + 6) = v100;
            v99[1] = (char *)&v100 + 8;
            DWORD1(v100) = 0;
          }
          LODWORD(v100) = 0;
          unint64_t v42 = (char *)v99[1];
        }
        *((_DWORD *)v38 + 30) = DWORD2(v104);
        if (v42 != (char *)&v100 + 8) {
          free(v42);
        }
      }
      else
      {
        v122[v33] = v36;
        if (v6 == 239 && v34 == 128)
        {
          if (v115 >= (unint64_t)v116) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v114 + v115++) = *(void *)v36;
        }
      }
      v34 += 128;
      ++v33;
      v35 += 4;
    }
    while (v92 != v34);
  }
  char v110 = v113;
  int v112 = 8;
  int v49 = v90;
  if (v90 >= 9)
  {
    int v111 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v90) {
    bzero(v113, 8 * v90);
  }
  int v111 = v90;
  int v106 = v109;
  unsigned int v108 = 8;
  if (v16 >= 9)
  {
    unsigned int v107 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v16) {
    bzero(v109, v85);
  }
  unsigned int v107 = v91;
  uint64_t Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(v5 + 40), (int)v6, (uint64_t)v114, v115);
  uint64_t v51 = 0;
  uint64_t v52 = *(void *)*a2;
  v97[0] = &v98;
  v97[1] = (void *)0x200000000;
  *(void *)&long long v101 = v52;
  *((void *)&v101 + 1) = (char *)&v104 + 8;
  *(void *)&long long v102 = &v105;
  *((void *)&v102 + 1) = 0;
  LODWORD(v103) = 0;
  WORD2(v103) = 512;
  BYTE6(v103) = 7;
  *((void *)&v103 + 1) = 0;
  *(void *)&long long v104 = 0;
  *((void *)&v104 + 1) = &unk_1F2616E88;
  uint64_t v105 = &unk_1F2617008;
  uint64_t v53 = (unsigned __int8 *)a2[6];
  *(void *)&long long v100 = a2[5];
  *((void *)&v100 + 1) = a2 + 3;
  v93[0] = v53;
  if (v53)
  {
    llvm::MetadataTracking::track((uint64_t)v93, v53, 2);
    uint64_t v51 = v93[0];
  }
  sub_1CB8461A4((uint64_t)v97, 0, v51);
  if (v93[0])
  {
    int v76 = *(unsigned __int8 *)v93[0];
    if ((v76 - 4) > 0x1E)
    {
      if ((v76 - 3) >= 0xFFFFFFFE) {
        uint64_t v79 = v93[0];
      }
      else {
        uint64_t v79 = 0;
      }
      if ((v76 - 3) < 0xFFFFFFFE)
      {
        int v49 = v90;
        if (v76 == 3) {
          *(void *)(v93[0] + 8) = 0;
        }
        goto LABEL_86;
      }
      unint64_t v78 = v79 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v93[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v93[0] + 12)) {
        goto LABEL_86;
      }
      uint64_t v77 = *(void *)(v93[0] + 16);
      if ((v77 & 4) == 0) {
        goto LABEL_86;
      }
      unint64_t v78 = v77 & 0xFFFFFFFFFFFFFFF8;
      if (!v78) {
        goto LABEL_86;
      }
    }
    v95[0] = v93;
    sub_1CC5FA668(v78 + 16, v95);
    int v49 = v90;
  }
LABEL_86:
  if (v49)
  {
    uint64_t v54 = 0;
    while (1)
    {
      unsigned int v107 = 0;
      if (v91)
      {
        uint64_t v55 = 0;
        unsigned int v56 = 0;
        uint64_t v57 = 0;
        do
        {
          if (llvm::hasVectorInstrinsicScalarOpd(v6, v57))
          {
            int v58 = (const llvm::APInt *)v122[v57];
          }
          else
          {
            int v58 = sub_1CCEB1928((uint64_t)v118 + v55, v54);
            unsigned int v56 = v107;
          }
          if (v56 >= v108) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v106 + v56) = v58;
          unsigned int v56 = ++v107;
          ++v57;
          v55 += 128;
        }
        while (v16 != v57);
      }
      else
      {
        unsigned int v56 = 0;
      }
      if (Declaration) {
        __int16 v59 = *(uint64_t ***)(Declaration + 24);
      }
      else {
        __int16 v59 = 0;
      }
      if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
      {
        uint64_t v69 = 0;
        uint64_t v70 = &byte_1CFBCE98E;
        goto LABEL_110;
      }
      uint64_t v60 = **(void **)*a2;
      uint64_t v61 = *(void *)(v60 + 152);
      uint64_t v62 = *(unsigned int *)(v60 + 168);
      if (!v62) {
        goto LABEL_108;
      }
      LODWORD(v63) = (v62 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      uint64_t v64 = (uint64_t **)(v61 + 16 * v63);
      unint64_t v65 = *v64;
      if (*v64 != a2) {
        break;
      }
LABEL_109:
      BOOL v68 = v64[1];
      uint64_t v71 = *v68;
      uint64_t v70 = (char *)(v68 + 2);
      uint64_t v69 = v71;
LABEL_110:
      __int16 v94 = 773;
      v93[0] = v70;
      v93[1] = v69;
      v93[2] = ".i";
      v95[0] = v93;
      v95[2] = v54;
      __int16 v96 = 2050;
      uint64_t v72 = sub_1CB845BAC((uint64_t *)v97, v59, (uint64_t **)Declaration, (uint64_t *)v106, v56, (uint64_t)v95, 0);
      *((void *)v110 + v54++) = v72;
      if (v54 == v90) {
        goto LABEL_113;
      }
    }
    int v66 = 1;
    while (v65 != (uint64_t *)-4096)
    {
      int v67 = v63 + v66++;
      uint64_t v63 = v67 & (v62 - 1);
      unint64_t v65 = *(uint64_t **)(v61 + 16 * v63);
      if (v65 == a2)
      {
        uint64_t v64 = (uint64_t **)(v61 + 16 * v63);
        goto LABEL_109;
      }
    }
LABEL_108:
    uint64_t v64 = (uint64_t **)(v61 + 16 * v62);
    goto LABEL_109;
  }
LABEL_113:
  sub_1CCEB1F88((uint64_t)a1, a2, (uint64_t *)&v110);
  if (v97[0] != &v98) {
    free(v97[0]);
  }
  if (v106 != v109) {
    free(v106);
  }
  if (v110 != v113) {
    free(v110);
  }
  if (v114 != v117) {
    free(v114);
  }
  int v73 = (char *)v118;
  if (v119)
  {
    unint64_t v74 = (unint64_t)v119 << 7;
    do
    {
      __int16 v75 = *(char **)&v73[v74 - 88];
      if (&v73[v74 - 72] != v75) {
        free(v75);
      }
      v74 -= 128;
    }
    while (v74);
    int v73 = (char *)v118;
  }
  if (v73 != v120) {
    free(v73);
  }
  if (v122 != v125) {
    free(v122);
  }
  return 1;
}

uint64_t sub_1CCEB3AEC()
{
  char v3 = 1;
  uint64_t v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Allow the scalarizer pass to scalarize insertelement/extractelement with variable index";
  v1.n128_u64[1] = 87;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCF7DF8, "scalarize-variable-insert-extract", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCF7DF8, &dword_1CB82C000);
  char v3 = 0;
  uint64_t v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Allow the scalarizer pass to scalarize loads and store";
  v1.n128_u64[1] = 54;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCF7EB8, "scalarize-load-store", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCF7EB8, &dword_1CB82C000);
}

void sub_1CCEB3BDC(uint64_t a1)
{
}

uint64_t sub_1CCEB3C84(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCF7F78;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F2640C30;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF7F80, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CCEB3BDC;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCF7F80, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

uint64_t sub_1CCEB3D34(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a3;
  v15[0] = 0;
  char v16 = 0;
  if (a3)
  {
    char v13 = 1;
    sub_1CD513098((uint64_t)v15, &v14, &v13);
  }
  LODWORD(v5) = 0;
  unint64_t v6 = (llvm::DataLayout *)(*(void *)(a1 + 40) + 272);
  do
  {
    int v7 = 0;
    uint64_t v8 = *(void *)(a1 + 80);
    do
    {
      if (v8 == a1 + 72) {
        break;
      }
      uint64_t v9 = *(void *)(v8 + 8);
      uint64_t v10 = v8 ? v8 - 24 : 0;
      char v13 = 0;
      int v11 = v16 ? v15 : 0;
      v7 |= sub_1CCEB4040(v10, &v13, a2, v6, (uint64_t)v11);
      uint64_t v8 = v9;
    }
    while (!v13);
    uint64_t v5 = (v7 | v5) & 1;
  }
  while ((v7 & 1) != 0);
  if (v16) {
    sub_1CC2930C0((uint64_t)v15);
  }
  return v5;
}

void sub_1CCEB3E5C()
{
}

void sub_1CCEB3E9C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CCEB3ED4()
{
  return "Scalarize Masked Memory Intrinsics";
}

void sub_1CCEB3EE4(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);

  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
}

uint64_t sub_1CCEB3F34(uint64_t a1, const Function *a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_4:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(char **)v5 != llvm::TargetTransformInfoWrapperPass::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  uint64_t v8 = (llvm::TargetTransformInfoWrapperPass *)(*(uint64_t (**)(uint64_t, char *))(*(void *)v7 + 96))(v7, llvm::TargetTransformInfoWrapperPass::ID);
  TTI = llvm::TargetTransformInfoWrapperPass::getTTI(v8, a2);
  uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24), &llvm::DominatorTreeWrapperPass::ID, 1);
  if (AnalysisPass) {
    uint64_t AnalysisPass = (*(uint64_t (**)(uint64_t, void *))(*(void *)AnalysisPass + 96))(AnalysisPass, &llvm::DominatorTreeWrapperPass::ID);
  }
  if (AnalysisPass) {
    uint64_t v11 = AnalysisPass + 32;
  }
  else {
    uint64_t v11 = 0;
  }

  return sub_1CCEB3D34((uint64_t)a2, TTI, v11);
}

uint64_t sub_1CCEB4040(uint64_t a1, unsigned char *a2, void *a3, llvm::DataLayout *a4, uint64_t a5)
{
  int v6 = 0;
  v612[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a1 + 40;
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = &v611;
  uint64_t v10 = v612;
  uint64_t v11 = &v600;
  uint64_t v12 = &v610;
  char v13 = &v601;
  uint64_t v14 = &v596;
  do
  {
    if (v8 == v7) {
      return v6 & 1;
    }
    uint64_t v15 = *(void *)(v8 + 8);
    uint64_t v16 = v8 - 24;
    if (!v8) {
      uint64_t v16 = 0;
    }
    int v17 = *(unsigned __int8 *)(v16 + 16);
    if (v17 == 84) {
      uint64_t v18 = (void **)v16;
    }
    else {
      uint64_t v18 = 0;
    }
    if (v8 && v17 == 84)
    {
      uint64_t v19 = (uint64_t)*(v18 - 4);
      if (!v19)
      {
LABEL_16:
        v6 |= v19;
        goto LABEL_17;
      }
      if (*(unsigned char *)(v19 + 16)
        || *(void **)(v19 + 24) != v18[9]
        || (*(unsigned char *)(v19 + 33) & 0x20) == 0
        || *(unsigned char *)(*(void *)v16 + 8) == 19)
      {
LABEL_15:
        LODWORD(v19) = 0;
        goto LABEL_16;
      }
      int v20 = *(_DWORD *)(v16 + 20);
      uint64_t v21 = v20 & 0x7FFFFFF;
      uint64_t v22 = v16 - 32 * v21;
      if (v20 < 0)
      {
        uint64_t v504 = *(void *)(v22 - 8);
        if ((v504 & 0xFFFFFFFF0) != 0) {
          uint64_t v23 = (*(_DWORD *)(v22 - 12) - *(_DWORD *)(v22 - v504));
        }
        else {
          uint64_t v23 = 0;
        }
      }
      else
      {
        uint64_t v23 = 0;
      }
      uint64_t v24 = v16 - 32;
      if (v22 != v24 - 32 * v23)
      {
        uint64_t v25 = 32 * v21 - 32 * v23 - 32;
        while (*(unsigned char *)(**(void **)v22 + 8) != 19)
        {
          v22 += 32;
          v25 -= 32;
          if (!v25) {
            goto LABEL_25;
          }
        }
        goto LABEL_15;
      }
LABEL_25:
      uint64_t v557 = (uint64_t)v11;
      uint64_t v532 = v7;
      v534 = a2;
      __b = v14;
      uint64_t v582 = a5;
      int v533 = v6;
      uint64_t v544 = a3;
      switch(*(_DWORD *)(*(void *)v24 + 36))
      {
        case 0xB6:
          v536 = v13;
          v538 = v12;
          v540 = v10;
          __int16 v542 = v9;
          if ((*(uint64_t (**)(void, void))(*(void *)*a3 + 392))(*a3, *v18[-4 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF)]))goto LABEL_68; {
          unint64_t v26 = 0;
          }
          uint64_t v27 = (unsigned __int8 **)&v18[-4 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF)];
          int v28 = (const llvm::APInt *)v27[4];
          uint64_t v562 = v27[8];
          uint64_t v567 = *v27;
          uint64_t v29 = *(void *)*v27;
          uint64_t v30 = (llvm::ConstantInt *)**v18;
          uint64_t v598 = v557;
          uint64_t v599 = 0x200000000;
          v603 = v30;
          v604 = v542;
          v605 = v540;
          uint64_t v606 = 0;
          int v607 = 0;
          __int16 v608 = 512;
          char v609 = 7;
          void *v536 = 0;
          v536[1] = 0;
          uint64_t *v538 = 0;
          v538[1] = 0;
          v611 = &unk_1F2616E88;
          v612[0] = &unk_1F2617008;
          v601 = v18[5];
          v602 = v18 + 3;
          long long v31 = (char *)v18[6];
          v589 = v31;
          if (v31)
          {
            llvm::MetadataTracking::track((uint64_t)&v589, (unsigned __int8 *)v31, 2);
            unint64_t v26 = v589;
          }
          sub_1CB8461A4((uint64_t)&v598, 0, (uint64_t)v26);
          if (!v589) {
            goto LABEL_30;
          }
          int v459 = *(unsigned __int8 *)v589;
          if ((v459 - 4) > 0x1E)
          {
            if ((v459 - 3) >= 0xFFFFFFFE) {
              unint64_t v485 = v589;
            }
            else {
              unint64_t v485 = 0;
            }
            if ((v459 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v461 = (unint64_t)(v485 + 8);
              goto LABEL_778;
            }
            if (v459 == 3) {
              *((void *)v589 + 1) = 0;
            }
          }
          else if ((v589[1] & 0x7F) == 2 || *((_DWORD *)v589 + 3))
          {
            uint64_t v460 = *((void *)v589 + 2);
            if ((v460 & 4) != 0)
            {
              unint64_t v461 = v460 & 0xFFFFFFFFFFFFFFF8;
              if (v461)
              {
LABEL_778:
                v593 = &v589;
                sub_1CC5FA668(v461 + 16, &v593);
              }
            }
          }
LABEL_30:
          int v32 = (unsigned __int8 *)v18[6];
          uint64_t v584 = (const char *)v32;
          if (v32)
          {
            llvm::MetadataTracking::track((uint64_t)&v584, v32, 2);
            uint64_t v33 = (uint64_t)v584;
          }
          else
          {
            uint64_t v33 = 0;
          }
          sub_1CB8461A4((uint64_t)&v598, 0, v33);
          if (!v584) {
            goto LABEL_267;
          }
          int v219 = *(unsigned __int8 *)v584;
          if ((v219 - 4) > 0x1E)
          {
            if ((v219 - 3) >= 0xFFFFFFFE) {
              v313 = v584;
            }
            else {
              v313 = 0;
            }
            if ((v219 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v314 = (unint64_t)(v313 + 8);
              goto LABEL_426;
            }
            if (v219 == 3) {
              *((void *)v584 + 1) = 0;
            }
          }
          else if ((v584[1] & 0x7F) == 2 || *((_DWORD *)v584 + 3))
          {
            uint64_t v501 = *((void *)v584 + 2);
            if ((v501 & 4) != 0)
            {
              unint64_t v314 = v501 & 0xFFFFFFFFFFFFFFF8;
              if (v314)
              {
LABEL_426:
                v593 = &v584;
                sub_1CC5FA668(v314 + 16, &v593);
              }
            }
          }
LABEL_267:
          v561 = *(llvm::UndefValue **)(v29 + 24);
          unint64_t v220 = (llvm::LLVMContext *)*(unsigned int *)(v29 + 32);
          __pd = v220;
          if (!sub_1CCEBCA64((llvm::Constant *)v562))
          {
            if (v220 == 1)
            {
              v555 = 0;
              uint64_t v253 = v545;
            }
            else
            {
              uint64_t v306 = llvm::IntegerType::get(v603, v220);
              v589 = "scalar_mask";
              __int16 v592 = 259;
              v555 = (llvm::Value *)v562;
              if (*(void *)v562 != v306)
              {
                if (v562[16] <= 0x14u)
                {
                  uint64_t v408 = (*((uint64_t (**)(void **, uint64_t))*v604 + 28))(v604, 49);
                  v555 = (llvm::Value *)v408;
                  if (v408)
                  {
                    if (*(unsigned __int8 *)(v408 + 16) >= 0x1Cu)
                    {
                      (*(void (**)(void *, uint64_t, const char **, void *, void **))(*v605 + 16))(v605, v408, &v589, v601, v602);
                      if (v599)
                      {
                        uint64_t v518 = v598;
                        uint64_t v519 = v598 + 16 * v599;
                        do
                        {
                          llvm::Instruction::setMetadata(v555, *(_DWORD *)v518, *(llvm::MDNode **)(v518 + 8));
                          v518 += 16;
                        }
                        while (v518 != v519);
                      }
                    }
                  }
                }
                else
                {
                  __int16 v597 = 257;
                  v555 = llvm::CastInst::Create(49, (uint64_t)v562, v306, (const char **)&v593, 0);
                  (*(void (**)(void *))(*v605 + 16))(v605);
                  if (v599)
                  {
                    uint64_t v494 = v598;
                    uint64_t v495 = v598 + 16 * v599;
                    do
                    {
                      llvm::Instruction::setMetadata(v555, *(_DWORD *)v494, *(llvm::MDNode **)(v494 + 8));
                      v494 += 16;
                    }
                    while (v494 != v495);
                  }
                }
              }
              uint64_t v253 = v545;
              if (!v220) {
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
              }
            }
            if (v220 == 1)
            {
              v593 = "Mask";
              unint64_t v596 = v253 & 0xFFFFFFFF00000000;
              __int16 v597 = 2051;
              v409 = *(llvm::ConstantInt **)(*(void *)v603 + 1984);
              unsigned int v410 = *(_DWORD *)(*(void *)v603 + 1992);
              unsigned int v590 = v410 >> 8;
              if (v410 >> 8 > 0x40) {
                operator new[]();
              }
              v589 = 0;
              int v411 = (unsigned __int8 *)llvm::ConstantInt::get(v409, (llvm::LLVMContext *)&v589, v221);
              if (v590 >= 0x41 && v589) {
                MEMORY[0x1D25D9CB0](v589, 0x1000C8000313F17);
              }
              v412 = sub_1CB8445F4((uint64_t)&v598, v562, v411, (uint64_t)&v593);
            }
            else
            {
              if (*(unsigned char *)a4) {
                char v413 = (_BYTE)v220 - 1;
              }
              else {
                char v413 = 0;
              }
              unsigned int v594 = v220;
              if (v220 >= 0x41) {
                operator new[]();
              }
              v593 = (void *)(1 << v413);
              v414 = llvm::ConstantInt::get(v603, (llvm::LLVMContext *)&v593, v221);
              if (v594 >= 0x41 && v593) {
                MEMORY[0x1D25D9CB0](v593, 0x1000C8000313F17);
              }
              __int16 v597 = 257;
              v415 = sub_1CBF52474((uint64_t)&v598, v555, (uint64_t)v414, (uint64_t)&v593);
              uint64_t v416 = llvm::IntegerType::get(v603, v220);
              unint64_t v418 = *(llvm::ConstantInt **)v416;
              unsigned int v419 = *(_DWORD *)(v416 + 8);
              unsigned int v590 = v419 >> 8;
              if (v419 >> 8 >= 0x41) {
                operator new[]();
              }
              v589 = 0;
              v420 = llvm::ConstantInt::get(v418, (llvm::LLVMContext *)&v589, v417);
              if (v590 >= 0x41 && v589) {
                MEMORY[0x1D25D9CB0](v589, 0x1000C8000313F17);
              }
              __int16 v592 = 257;
              v412 = sub_1CB845F20((uint64_t)&v598, 33, v415, (uint64_t)v420, (uint64_t)&v589);
            }
            sub_1CD1290BC((uint64_t)v412, (uint64_t)v18);
          }
          if (!v220) {
LABEL_316:
          }
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
          unint64_t v222 = 0;
          int v223 = 0;
          uint64_t v224 = (llvm::Constant *)v562;
          while (2)
          {
            AggregateElement = llvm::Constant::getAggregateElement(v224, (llvm::Type *)v222);
            unsigned int v227 = *((unsigned __int8 *)AggregateElement + 16);
            if (AggregateElement && v227 == 16)
            {
              uint64_t v228 = *((unsigned int *)AggregateElement + 8);
              if (v228 < 0x41)
              {
                if (AggregateElement[3]) {
                  break;
                }
LABEL_288:
                ++v222;
                uint64_t v224 = (llvm::Constant *)v562;
                if ((llvm::LLVMContext *)v222 == v220) {
                  goto LABEL_316;
                }
                continue;
              }
              int v248 = 0;
              int64_t v249 = (unint64_t)(v228 + 63) >> 6;
              do
              {
                BOOL v165 = v249-- < 1;
                if (v165) {
                  break;
                }
                unint64_t v250 = *(void *)(AggregateElement[3] + 8 * v249);
                v248 += __clz(v250);
              }
              while (!v250);
              int v251 = v228 | 0xFFFFFFC0;
              if ((v228 & 0x3F) == 0) {
                int v251 = 0;
              }
              unint64_t v220 = __pd;
              if (v248 + v251 == v228) {
                goto LABEL_288;
              }
            }
            else if (AggregateElement && v227 == 17)
            {
              if (sub_1CB844168((uint64_t)AggregateElement, 0.0)) {
                goto LABEL_288;
              }
            }
            else
            {
              BOOL v165 = v227 > 0x14;
              int v244 = (1 << v227) & 0x1C2000;
              if (!v165 && v244 != 0) {
                goto LABEL_288;
              }
            }
            break;
          }
          v593 = "Elt";
          unint64_t v596 = v523 & 0xFFFFFFFF00000000 | v222;
          __int16 v597 = 2051;
          int v229 = *(llvm::ConstantInt **)(*(void *)v603 + 1984);
          unsigned int v230 = *(_DWORD *)(*(void *)v603 + 1992);
          unsigned int v590 = v230 >> 8;
          unint64_t v523 = v596;
          if (v230 >> 8 > 0x40) {
            operator new[]();
          }
          if (v230 <= 0xFF) {
            unint64_t v231 = 0;
          }
          else {
            unint64_t v231 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v230) + 63);
          }
          v589 = (const char *)(v231 & v222);
          uint64_t v232 = (unsigned __int8 *)llvm::ConstantInt::get(v229, (llvm::LLVMContext *)&v589, v226);
          if (v590 >= 0x41 && v589) {
            MEMORY[0x1D25D9CB0](v589, 0x1000C8000313F17);
          }
          __int16 v233 = sub_1CB8445F4((uint64_t)&v598, v567, v232, (uint64_t)&v593);
          __int16 v597 = 257;
          int v234 = sub_1CB844364(&v598, (uint64_t)v561, v28, v223, (uint64_t)&v593);
          v235 = (char *)operator new(0x80uLL);
          *((_DWORD *)v235 + 21) = *((_DWORD *)v235 + 21) & 0x38000000 | 2;
          *(void *)v235 = 0;
          *((void *)v235 + 2) = 0;
          *((void *)v235 + 1) = 0;
          *((void *)v235 + 5) = 0;
          *((void *)v235 + 6) = 0;
          *((void *)v235 + 4) = 0;
          unint64_t v236 = (llvm::Instruction **)(v235 + 32);
          *((void *)v235 + 8) = ***(void ***)v233 + 1576;
          int v237 = (llvm::Instruction *)(v235 + 64);
          *((void *)v235 + 3) = v235 + 64;
          *((void *)v235 + 7) = v235 + 64;
          *((void *)v235 + 9) = 0;
          v235[80] = 61;
          v235[81] = 0;
          *((_WORD *)v235 + 41) = 0;
          *((_DWORD *)v235 + 21) = 2;
          *(_OWORD *)(v235 + 88) = 0u;
          *(_OWORD *)(v235 + 104) = 0u;
          *((_DWORD *)v235 + 30) = 0;
          *(void *)v235 = v233;
          uint64_t v240 = *((void *)v233 + 1);
          v239 = (void *)((char *)v233 + 8);
          uint64_t v238 = v240;
          *((void *)v235 + 1) = v240;
          if (v240) {
            *(void *)(v238 + 16) = v235 + 8;
          }
          *((void *)v235 + 2) = v239;
          void *v239 = v235;
          if (*((void *)v235 + 4))
          {
            **((void **)v235 + 6) = *((void *)v235 + 5);
            uint64_t v252 = *((void *)v235 + 5);
            if (v252) {
              *(void *)(v252 + 16) = *((void *)v235 + 6);
            }
          }
          *unint64_t v236 = v234;
          if (v234)
          {
            uint64_t v243 = *((void *)v234 + 1);
            uint64_t v242 = (llvm::Instruction ***)((char *)v234 + 8);
            uint64_t v241 = v243;
            *((void *)v235 + 5) = v243;
            if (v243) {
              *(void *)(v241 + 16) = v235 + 40;
            }
            *((void *)v235 + 6) = v242;
            *uint64_t v242 = v236;
          }
          *((_WORD *)v235 + 41) = 0;
          v235[124] = 1;
          __int16 v597 = 257;
          (*(void (**)(void *, llvm::Instruction *, void **, void *, void **))(*v605 + 16))(v605, v237, &v593, v601, v602);
          if (v599)
          {
            uint64_t v246 = v598;
            uint64_t v247 = v598 + 16 * v599;
            do
            {
              llvm::Instruction::setMetadata(v237, *(_DWORD *)v246, *(llvm::MDNode **)(v246 + 8));
              v246 += 16;
            }
            while (v246 != v247);
          }
          ++v223;
          unint64_t v220 = __pd;
          goto LABEL_288;
        case 0xB7:
          __int16 v537 = v13;
          v539 = v12;
          uint64_t v541 = v10;
          v543 = v9;
          if (((*(uint64_t (**)(void, void))(*(void *)*a3 + 400))(*a3, *v18) & 1) == 0)
          {
            uint64_t v109 = 0;
            char v110 = (llvm::Type **)&v18[-4 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF)];
            uint64_t v580 = *v110;
            int v111 = (unsigned __int8 *)v110[4];
            __pa = v110[8];
            int v112 = (unsigned int *)*v18;
            v560 = (llvm::UndefValue *)(*v18)[3];
            int v113 = (llvm::ConstantInt *)**v18;
            uint64_t v598 = v557;
            uint64_t v599 = 0x200000000;
            v603 = v113;
            v604 = v543;
            v605 = v541;
            uint64_t v606 = 0;
            int v607 = 0;
            __int16 v608 = 512;
            char v609 = 7;
            *__int16 v537 = 0;
            v537[1] = 0;
            uint64_t *v539 = 0;
            v539[1] = 0;
            v611 = &unk_1F2616E88;
            v612[0] = &unk_1F2617008;
            v601 = v18[5];
            v602 = v18 + 3;
            int v114 = (char *)v18[6];
            v589 = v114;
            if (v114)
            {
              llvm::MetadataTracking::track((uint64_t)&v589, (unsigned __int8 *)v114, 2);
              uint64_t v109 = v589;
            }
            sub_1CB8461A4((uint64_t)&v598, 0, (uint64_t)v109);
            if (v589)
            {
              int v462 = *(unsigned __int8 *)v589;
              if ((v462 - 4) > 0x1E)
              {
                if ((v462 - 3) >= 0xFFFFFFFE) {
                  int v486 = v589;
                }
                else {
                  int v486 = 0;
                }
                if ((v462 - 3) < 0xFFFFFFFE)
                {
                  if (v462 == 3) {
                    *((void *)v589 + 1) = 0;
                  }
                  goto LABEL_99;
                }
                unint64_t v464 = (unint64_t)(v486 + 8);
              }
              else
              {
                if ((v589[1] & 0x7F) != 2 && !*((_DWORD *)v589 + 3)) {
                  goto LABEL_99;
                }
                uint64_t v463 = *((void *)v589 + 2);
                if ((v463 & 4) == 0) {
                  goto LABEL_99;
                }
                unint64_t v464 = v463 & 0xFFFFFFFFFFFFFFF8;
                if (!v464) {
                  goto LABEL_99;
                }
              }
              v593 = &v589;
              sub_1CC5FA668(v464 + 16, &v593);
            }
LABEL_99:
            unsigned int v115 = (unsigned __int8 *)v18[6];
            v588 = v115;
            if (v115)
            {
              llvm::MetadataTracking::track((uint64_t)&v588, v115, 2);
              uint64_t v116 = (uint64_t)v588;
            }
            else
            {
              uint64_t v116 = 0;
            }
            sub_1CB8461A4((uint64_t)&v598, 0, v116);
            if (v588)
            {
              int v254 = *v588;
              if ((v254 - 4) > 0x1E)
              {
                if ((v254 - 3) >= 0xFFFFFFFE) {
                  v315 = v588;
                }
                else {
                  v315 = 0;
                }
                if ((v254 - 3) >= 0xFFFFFFFE)
                {
                  unint64_t v316 = (unint64_t)(v315 + 8);
                  goto LABEL_432;
                }
                if (v254 == 3) {
                  *((void *)v588 + 1) = 0;
                }
              }
              else if ((v588[1] & 0x7F) == 2 || *((_DWORD *)v588 + 3))
              {
                uint64_t v502 = *((void *)v588 + 2);
                if ((v502 & 4) != 0)
                {
                  unint64_t v316 = v502 & 0xFFFFFFFFFFFFFFF8;
                  if (v316)
                  {
LABEL_432:
                    v593 = &v588;
                    sub_1CC5FA668(v316 + 16, &v593);
                  }
                }
              }
            }
            unint64_t v255 = v112[8];
            v556 = (llvm::Instruction *)v111;
            __int16 v564 = (llvm::Constant *)v255;
            if (sub_1CCEBCA64((llvm::Constant *)v111))
            {
              v258 = (unsigned __int8 *)llvm::UndefValue::get((llvm::UndefValue *)v112, v256);
              v593 = __b;
              int v595 = 16;
              if (v255 >= 0x11)
              {
                unsigned int v594 = 0;
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (!v255)
              {
                v299 = 0;
                unsigned int v594 = 0;
                uint64_t v298 = __b;
LABEL_596:
                __int16 v592 = 257;
                uint64_t v407 = sub_1CB935A74((uint64_t)&v598, (uint64_t)v258, (uint64_t)__pa, v298, v299, (uint64_t)&v589);
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v18, v407, (llvm::Value *)1);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
              }
              memset(__b, 255, 4 * v255);
              unint64_t v259 = 0;
              int v260 = 0;
              unsigned int v594 = v255;
              while (2)
              {
                uint64_t v261 = llvm::Constant::getAggregateElement((llvm::Constant *)v111, (llvm::Type *)v259);
                unsigned int v263 = *((unsigned __int8 *)v261 + 16);
                if (v261 && v263 == 16)
                {
                  uint64_t v264 = *((unsigned int *)v261 + 8);
                  if (v264 < 0x41)
                  {
                    if (v261[3]) {
                      break;
                    }
LABEL_343:
                    v267 = (unsigned __int8 *)llvm::UndefValue::get(v560, v262);
                    *((_DWORD *)v593 + v259) = v255 + v259;
                    uint64_t v269 = v259;
LABEL_344:
                    v589 = "Res";
                    unint64_t v591 = v269 | v530 & 0xFFFFFFFF00000000;
                    __int16 v592 = 2051;
                    uint64_t v274 = *(llvm::ConstantInt **)(*(void *)v603 + 1984);
                    unsigned int v275 = *(_DWORD *)(*(void *)v603 + 1992);
                    unsigned int v585 = v275 >> 8;
                    unint64_t v530 = v591;
                    if (v275 >> 8 > 0x40) {
                      operator new[]();
                    }
                    if (v275 <= 0xFF) {
                      unint64_t v276 = 0;
                    }
                    else {
                      unint64_t v276 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v275) + 63);
                    }
                    uint64_t v584 = (const char *)(v276 & v259);
                    v277 = (unsigned __int8 *)llvm::ConstantInt::get(v274, (llvm::LLVMContext *)&v584, v268);
                    if (v585 >= 0x41 && v584) {
                      MEMORY[0x1D25D9CB0](v584, 0x1000C8000313F17);
                    }
                    v258 = (unsigned __int8 *)sub_1CB84478C((uint64_t)&v598, v258, v267, v277, (uint64_t)&v589);
                    ++v259;
                    int v111 = (unsigned __int8 *)v556;
                    if (v259 == v255)
                    {
                      uint64_t v298 = v593;
                      v299 = (llvm::Type *)v594;
                      goto LABEL_596;
                    }
                    continue;
                  }
                  int v278 = 0;
                  int64_t v279 = (unint64_t)(v264 + 63) >> 6;
                  do
                  {
                    BOOL v165 = v279-- < 1;
                    if (v165) {
                      break;
                    }
                    unint64_t v280 = *(void *)(v261[3] + 8 * v279);
                    v278 += __clz(v280);
                  }
                  while (!v280);
                  int v281 = v264 | 0xFFFFFFC0;
                  if ((v264 & 0x3F) == 0) {
                    int v281 = 0;
                  }
                  unint64_t v255 = (unint64_t)v564;
                  if (v278 + v281 == v264) {
                    goto LABEL_343;
                  }
                }
                else if (v261 && v263 == 17)
                {
                  if (sub_1CB844168((uint64_t)v261, 0.0)) {
                    goto LABEL_343;
                  }
                }
                else
                {
                  BOOL v165 = v263 > 0x14;
                  int v270 = (1 << v263) & 0x1C2000;
                  if (!v165 && v270 != 0) {
                    goto LABEL_343;
                  }
                }
                break;
              }
              __int16 v592 = 257;
              unint64_t v265 = sub_1CB844364(&v598, (uint64_t)v560, v580, v260, (uint64_t)&v589);
              uint64_t v584 = "Load";
              unint64_t v524 = v524 & 0xFFFFFFFF00000000 | v259;
              unint64_t v586 = v524;
              __int16 v587 = 2051;
              v266 = (char *)operator new(0x60uLL);
              *((_DWORD *)v266 + 13) = *((_DWORD *)v266 + 13) & 0x38000000 | 1;
              v267 = (unsigned __int8 *)(v266 + 32);
              *(void *)v266 = 0;
              *((void *)v266 + 1) = 0;
              *((void *)v266 + 2) = 0;
              *((void *)v266 + 3) = v266 + 32;
              __int16 v592 = 257;
              llvm::LoadInst::LoadInst((llvm::Value *)(v266 + 32), (uint64_t)v560, (uint64_t)v265, &v589, 0, 0, 0);
              (*(void (**)(void *, unsigned __int8 *, const char **, void *, void **))(*v605 + 16))(v605, v267, &v584, v601, v602);
              if (v599)
              {
                uint64_t v272 = v598;
                uint64_t v273 = v598 + 16 * v599;
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v267, *(_DWORD *)v272, *(llvm::MDNode **)(v272 + 8));
                  v272 += 16;
                }
                while (v272 != v273);
              }
              uint64_t v269 = v259;
              *((_DWORD *)v593 + v259) = v259;
              ++v260;
              unint64_t v255 = (unint64_t)v564;
              goto LABEL_344;
            }
            if (v255 == 1)
            {
              long long v548 = 0;
              uint64_t v282 = v546;
              goto LABEL_729;
            }
            uint64_t v307 = llvm::IntegerType::get(v603, (llvm::LLVMContext *)v255);
            v589 = "scalar_mask";
            __int16 v592 = 259;
            long long v548 = (llvm::Instruction *)v111;
            BOOL v308 = __pa;
            if (*(void *)v111 != v307)
            {
              if (v111[16] > 0x14u)
              {
                __int16 v597 = 257;
                long long v548 = llvm::CastInst::Create(49, (uint64_t)v111, v307, (const char **)&v593, 0);
                (*(void (**)(void *))(*v605 + 16))(v605);
                if (v599)
                {
                  uint64_t v309 = v598;
                  uint64_t v310 = v598 + 16 * v599;
                  do
                  {
                    llvm::Instruction::setMetadata(v548, *(_DWORD *)v309, *(llvm::MDNode **)(v309 + 8));
                    v309 += 16;
                  }
                  while (v309 != v310);
                }
                goto LABEL_628;
              }
              uint64_t v421 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v604 + 28))(v604, 49, v111, v307);
              long long v548 = (llvm::Instruction *)v421;
              if (!v421) {
                goto LABEL_628;
              }
              BOOL v308 = __pa;
              if (*(unsigned __int8 *)(v421 + 16) >= 0x1Cu)
              {
                (*(void (**)(void *, uint64_t, const char **, void *, void **))(*v605 + 16))(v605, v421, &v589, v601, v602);
                if (v599)
                {
                  uint64_t v520 = v598;
                  uint64_t v521 = v598 + 16 * v599;
                  do
                  {
                    llvm::Instruction::setMetadata(v548, *(_DWORD *)v520, *(llvm::MDNode **)(v520 + 8));
                    v520 += 16;
                  }
                  while (v520 != v521);
                }
LABEL_628:
                BOOL v308 = __pa;
              }
            }
            uint64_t v282 = v546;
            if (!v255)
            {
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v18, v308, (llvm::Value *)1);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
            }
LABEL_729:
            if (v255 == 1)
            {
              v593 = "Mask";
              unint64_t v596 = v282 & 0xFFFFFFFF00000000;
              __int16 v597 = 2051;
              v468 = *(llvm::ConstantInt **)(*(void *)v603 + 1984);
              unsigned int v469 = *(_DWORD *)(*(void *)v603 + 1992);
              unsigned int v590 = v469 >> 8;
              if (v469 >> 8 > 0x40) {
                operator new[]();
              }
              v589 = 0;
              v470 = (unsigned __int8 *)llvm::ConstantInt::get(v468, (llvm::LLVMContext *)&v589, v257);
              if (v590 >= 0x41 && v589) {
                MEMORY[0x1D25D9CB0](v589, 0x1000C8000313F17);
              }
              int v471 = sub_1CB8445F4((uint64_t)&v598, v111, v470, (uint64_t)&v593);
            }
            else
            {
              if (*(unsigned char *)a4) {
                char v472 = v255 - 1;
              }
              else {
                char v472 = 0;
              }
              unsigned int v594 = v255;
              if (v255 >= 0x41) {
                operator new[]();
              }
              v593 = (void *)(1 << v472);
              unint64_t v473 = llvm::ConstantInt::get(v603, (llvm::LLVMContext *)&v593, v257);
              if (v594 >= 0x41 && v593) {
                MEMORY[0x1D25D9CB0](v593, 0x1000C8000313F17);
              }
              __int16 v597 = 257;
              int v474 = sub_1CBF52474((uint64_t)&v598, v548, (uint64_t)v473, (uint64_t)&v593);
              uint64_t v475 = llvm::IntegerType::get(v603, (llvm::LLVMContext *)v255);
              int v477 = *(llvm::ConstantInt **)v475;
              unsigned int v478 = *(_DWORD *)(v475 + 8);
              unsigned int v590 = v478 >> 8;
              if (v478 >> 8 >= 0x41) {
                operator new[]();
              }
              v589 = 0;
              unint64_t v479 = llvm::ConstantInt::get(v477, (llvm::LLVMContext *)&v589, v476);
              if (v590 >= 0x41 && v589) {
                MEMORY[0x1D25D9CB0](v589, 0x1000C8000313F17);
              }
              __int16 v592 = 257;
              int v471 = sub_1CB845F20((uint64_t)&v598, 33, v474, (uint64_t)v479, (uint64_t)&v589);
            }
            sub_1CD1290BC((uint64_t)v471, (uint64_t)v18);
          }
          LODWORD(v19) = 0;
          int v6 = v533;
          a5 = v582;
          uint64_t v9 = v543;
          a3 = v544;
          a2 = v534;
          uint64_t v14 = __b;
          uint64_t v7 = v532;
          uint64_t v12 = v539;
          uint64_t v10 = v541;
          uint64_t v11 = (uint64_t *)v557;
          char v13 = v537;
          goto LABEL_16;
        case 0xB8:
          uint64_t v53 = v18[-4 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF) + 4];
          uint64_t v54 = v53 + 3;
          if (*((_DWORD *)v53 + 8) >= 0x41u) {
            uint64_t v54 = (unint64_t *)*v54;
          }
          v540 = v10;
          __int16 v542 = v9;
          uint64_t v55 = (uint64_t)*v18;
          unsigned int v56 = (llvm::Type *)*v18;
          if (((*v18)[1] & 0xFE) == 0x12) {
            unsigned int v56 = **(llvm::Type ***)(v55 + 16);
          }
          v536 = v13;
          v538 = v12;
          unint64_t v57 = *v54;
          unint64_t v58 = __clz(v57) ^ 0x13F;
          if (v57) {
            unint64_t v59 = v58;
          }
          else {
            unint64_t v59 = 0;
          }
          if (v59 <= 0xFF)
          {
            uint64_t v60 = a3;
            LOBYTE(v59) = llvm::DataLayout::getAlignment(a4, v56, 1);
            a3 = v60;
          }
          uint64_t v61 = v59;
          if ((*(unsigned int (**)(void, uint64_t, void))(*(void *)*a3 + 368))(*a3, v55, v59)&& !(*(unsigned int (**)(void, uint64_t, uint64_t))(*(void *)*v544 + 376))(*v544, v55, v61))
          {
            goto LABEL_68;
          }
          uint64_t v62 = 0;
          uint64_t v63 = (unsigned __int8 **)&v18[-4 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF)];
          uint64_t v64 = v63[4];
          v547 = v63[8];
          unint64_t v65 = (llvm::Instruction *)v63[12];
          v558 = (llvm::UndefValue *)(*v18)[3];
          int v563 = *v63;
          v531 = (unsigned int *)*v18;
          int v66 = (llvm::ConstantInt *)**v18;
          uint64_t v598 = v557;
          uint64_t v599 = 0x200000000;
          v603 = v66;
          v604 = v542;
          v605 = v540;
          uint64_t v606 = 0;
          int v607 = 0;
          __int16 v608 = 512;
          char v609 = 7;
          void *v536 = 0;
          v536[1] = 0;
          uint64_t *v538 = 0;
          v538[1] = 0;
          v611 = &unk_1F2616E88;
          v612[0] = &unk_1F2617008;
          v601 = v18[5];
          v602 = v18 + 3;
          int v67 = (char *)v18[6];
          v589 = v67;
          if (v67)
          {
            llvm::MetadataTracking::track((uint64_t)&v589, (unsigned __int8 *)v67, 2);
            uint64_t v62 = v589;
          }
          sub_1CB8461A4((uint64_t)&v598, 0, (uint64_t)v62);
          BOOL v68 = v65;
          if (!v589) {
            goto LABEL_62;
          }
          int v425 = *(unsigned __int8 *)v589;
          if ((v425 - 4) > 0x1E)
          {
            if ((v425 - 3) >= 0xFFFFFFFE) {
              unint64_t v481 = v589;
            }
            else {
              unint64_t v481 = 0;
            }
            if ((v425 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v427 = (unint64_t)(v481 + 8);
LABEL_763:
              v593 = &v589;
              sub_1CC5FA668(v427 + 16, &v593);
              goto LABEL_62;
            }
            if (v425 == 3) {
              *((void *)v589 + 1) = 0;
            }
          }
          else if ((v589[1] & 0x7F) == 2 || *((_DWORD *)v589 + 3))
          {
            uint64_t v426 = *((void *)v589 + 2);
            if ((v426 & 4) != 0)
            {
              unint64_t v427 = v426 & 0xFFFFFFFFFFFFFFF8;
              if (v427) {
                goto LABEL_763;
              }
            }
          }
LABEL_62:
          uint64_t v69 = (unint64_t *)(v64 + 24);
          if (*((_DWORD *)v64 + 8) >= 0x41u) {
            uint64_t v69 = (unint64_t *)*v69;
          }
          uint64_t v70 = (llvm::Instruction *)*v69;
          int v71 = __clz(*v69) ^ 0x3F | 0x100;
          v553 = v70;
          if (!v70) {
            LOBYTE(v71) = 0;
          }
          char v552 = v71;
          uint64_t v72 = (unsigned __int8 *)v18[6];
          uint64_t v584 = (const char *)v72;
          if (v72)
          {
            llvm::MetadataTracking::track((uint64_t)&v584, v72, 2);
            uint64_t v73 = (uint64_t)v584;
          }
          else
          {
            uint64_t v73 = 0;
          }
          sub_1CB8461A4((uint64_t)&v598, 0, v73);
          if (v584)
          {
            int v176 = *(unsigned __int8 *)v584;
            if ((v176 - 4) > 0x1E)
            {
              if ((v176 - 3) >= 0xFFFFFFFE) {
                uint64_t v304 = v584;
              }
              else {
                uint64_t v304 = 0;
              }
              if ((v176 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v305 = (unint64_t)(v304 + 8);
LABEL_404:
                v593 = &v584;
                sub_1CC5FA668(v305 + 16, &v593);
                goto LABEL_185;
              }
              if (v176 == 3) {
                *((void *)v584 + 1) = 0;
              }
            }
            else if ((v584[1] & 0x7F) == 2 || *((_DWORD *)v584 + 3))
            {
              uint64_t v499 = *((void *)v584 + 2);
              if ((v499 & 4) != 0)
              {
                unint64_t v305 = v499 & 0xFFFFFFFFFFFFFFF8;
                if (v305) {
                  goto LABEL_404;
                }
              }
            }
          }
LABEL_185:
          uint64_t v177 = (llvm::LLVMContext *)v531[8];
          v569 = v177;
          if (sub_1CCEBCA64((llvm::Constant *)v547))
          {
            if (!v177)
            {
LABEL_235:
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v18, v68, (llvm::Value *)1);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
            }
            unint64_t v179 = 0;
            while (1)
            {
              int v180 = llvm::Constant::getAggregateElement((llvm::Constant *)v547, (llvm::Type *)v179);
              unsigned int v182 = *((unsigned __int8 *)v180 + 16);
              if (v180 && v182 == 16)
              {
                uint64_t v183 = *((unsigned int *)v180 + 8);
                if (v183 >= 0x41)
                {
                  int v202 = 0;
                  int64_t v203 = (unint64_t)(v183 + 63) >> 6;
                  do
                  {
                    BOOL v165 = v203-- < 1;
                    if (v165) {
                      break;
                    }
                    unint64_t v204 = *(void *)(v180[3] + 8 * v203);
                    v202 += __clz(v204);
                  }
                  while (!v204);
                  int v205 = v183 | 0xFFFFFFC0;
                  if ((v183 & 0x3F) == 0) {
                    int v205 = 0;
                  }
                  uint64_t v177 = v569;
                  if (v202 + v205 == v183) {
                    goto LABEL_206;
                  }
LABEL_192:
                  v593 = "Ptr";
                  unint64_t v596 = v525 & 0xFFFFFFFF00000000 | v179;
                  __int16 v597 = 2051;
                  BOOL v184 = *(llvm::ConstantInt **)(*(void *)v603 + 1984);
                  unsigned int v185 = *(_DWORD *)(*(void *)v603 + 1992);
                  unsigned int v590 = v185 >> 8;
                  unint64_t v525 = v596;
                  v186 = (unsigned __int8 *)v68;
                  if (v185 >> 8 > 0x40) {
                    operator new[]();
                  }
                  if (v185 <= 0xFF) {
                    unint64_t v187 = 0;
                  }
                  else {
                    unint64_t v187 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v185) + 63);
                  }
                  v589 = (const char *)(v187 & v179);
                  int v188 = (unsigned __int8 *)llvm::ConstantInt::get(v184, (llvm::LLVMContext *)&v589, v181);
                  uint64_t v177 = v569;
                  if (v590 >= 0x41 && v589) {
                    MEMORY[0x1D25D9CB0](v589, 0x1000C8000313F17);
                  }
                  long long v189 = sub_1CB8445F4((uint64_t)&v598, v563, v188, (uint64_t)&v593);
                  v589 = "Load";
                  unint64_t v526 = v179 | v526 & 0xFFFFFFFF00000000;
                  unint64_t v591 = v526;
                  __int16 v592 = 2051;
                  char Alignment = v552;
                  if (!v553) {
                    char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v601[7] + 40) + 272), v558, 1);
                  }
                  uint64_t v191 = operator new(0x60uLL);
                  v191[13] = v191[13] & 0x38000000 | 1;
                  unint64_t v192 = (llvm::Instruction *)(v191 + 8);
                  *(void *)uint64_t v191 = 0;
                  *((void *)v191 + 1) = 0;
                  *((void *)v191 + 2) = 0;
                  *((void *)v191 + 3) = v191 + 8;
                  __int16 v597 = 257;
                  llvm::LoadInst::LoadInst((llvm::Value *)(v191 + 8), (uint64_t)v558, (uint64_t)v189, (const char **)&v593, 0, Alignment, 0);
                  (*(void (**)(void *, llvm::Instruction *, const char **, void *, void **))(*v605 + 16))(v605, v192, &v589, v601, v602);
                  if (v599)
                  {
                    uint64_t v200 = v598;
                    uint64_t v201 = v598 + 16 * v599;
                    do
                    {
                      llvm::Instruction::setMetadata(v192, *(_DWORD *)v200, *(llvm::MDNode **)(v200 + 8));
                      v200 += 16;
                    }
                    while (v200 != v201);
                  }
                  v593 = "Res";
                  unint64_t v596 = v179 | v527 & 0xFFFFFFFF00000000;
                  __int16 v597 = 2051;
                  v194 = *(llvm::ConstantInt **)(*(void *)v603 + 1984);
                  unsigned int v195 = *(_DWORD *)(*(void *)v603 + 1992);
                  unsigned int v590 = v195 >> 8;
                  unint64_t v527 = v596;
                  if (v195 >> 8 > 0x40) {
                    operator new[]();
                  }
                  if (v195 <= 0xFF) {
                    unint64_t v196 = 0;
                  }
                  else {
                    unint64_t v196 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v195) + 63);
                  }
                  v589 = (const char *)(v196 & v179);
                  uint64_t v197 = (unsigned __int8 *)llvm::ConstantInt::get(v194, (llvm::LLVMContext *)&v589, v193);
                  if (v590 >= 0x41 && v589) {
                    MEMORY[0x1D25D9CB0](v589, 0x1000C8000313F17);
                  }
                  BOOL v68 = sub_1CB84478C((uint64_t)&v598, v186, (unsigned __int8 *)v192, v197, (uint64_t)&v593);
                  goto LABEL_206;
                }
                if (v180[3]) {
                  goto LABEL_192;
                }
              }
              else if (v180 && v182 == 17)
              {
                if ((sub_1CB844168((uint64_t)v180, 0.0) & 1) == 0) {
                  goto LABEL_192;
                }
              }
              else
              {
                BOOL v165 = v182 > 0x14;
                int v198 = (1 << v182) & 0x1C2000;
                if (v165 || v198 == 0) {
                  goto LABEL_192;
                }
              }
LABEL_206:
              if ((llvm::LLVMContext *)++v179 == v177) {
                goto LABEL_235;
              }
            }
          }
          if (v177 == 1)
          {
            uint64_t v206 = 0;
            goto LABEL_468;
          }
          uint64_t v209 = llvm::IntegerType::get(v603, v177);
          v589 = "scalar_mask";
          __int16 v592 = 259;
          int v178 = (const llvm::APInt *)v547;
          uint64_t v206 = (llvm::Instruction *)v547;
          if (*(void *)v547 != v209)
          {
            if (v547[16] > 0x14u)
            {
              __int16 v597 = 257;
              uint64_t v206 = llvm::CastInst::Create(49, (uint64_t)v547, v209, (const char **)&v593, 0);
              (*(void (**)(void *, llvm::Instruction *, const char **, void *, void **))(*v605 + 16))(v605, v206, &v589, v601, v602);
              if (v599)
              {
                uint64_t v492 = v598;
                uint64_t v493 = v598 + 16 * v599;
                do
                {
                  llvm::Instruction::setMetadata(v206, *(_DWORD *)v492, *(llvm::MDNode **)(v492 + 8));
                  v492 += 16;
                }
                while (v492 != v493);
              }
              if (!v177) {
                goto LABEL_850;
              }
              goto LABEL_468;
            }
            uint64_t v332 = (*((uint64_t (**)(void **, uint64_t))*v604 + 28))(v604, 49);
            uint64_t v206 = (llvm::Instruction *)v332;
            if (v332 && *(unsigned __int8 *)(v332 + 16) >= 0x1Cu)
            {
              (*(void (**)(void *, uint64_t, const char **, void *, void **))(*v605 + 16))(v605, v332, &v589, v601, v602);
              if (v599)
              {
                uint64_t v512 = v598;
                uint64_t v513 = v598 + 16 * v599;
                do
                {
                  llvm::Instruction::setMetadata(v206, *(_DWORD *)v512, *(llvm::MDNode **)(v512 + 8));
                  v512 += 16;
                }
                while (v512 != v513);
              }
              BOOL v68 = v65;
              if (!v177)
              {
LABEL_850:
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v18, v68, (llvm::Value *)1);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
              }
LABEL_468:
              if (v177 == 1)
              {
                v593 = "Mask";
                unint64_t v596 = v550 & 0xFFFFFFFF00000000;
                __int16 v597 = 2051;
                uint64_t v333 = *(llvm::ConstantInt **)(*(void *)v603 + 1984);
                unsigned int v334 = *(_DWORD *)(*(void *)v603 + 1992);
                unsigned int v590 = v334 >> 8;
                if (v334 >> 8 > 0x40) {
                  operator new[]();
                }
                v589 = 0;
                uint64_t v335 = (unsigned __int8 *)llvm::ConstantInt::get(v333, (llvm::LLVMContext *)&v589, v178);
                if (v590 >= 0x41 && v589) {
                  MEMORY[0x1D25D9CB0](v589, 0x1000C8000313F17);
                }
                uint64_t v336 = sub_1CB8445F4((uint64_t)&v598, v547, v335, (uint64_t)&v593);
              }
              else
              {
                if (*(unsigned char *)a4) {
                  char v337 = (_BYTE)v177 - 1;
                }
                else {
                  char v337 = 0;
                }
                unsigned int v594 = v177;
                if (v177 >= 0x41) {
                  operator new[]();
                }
                v593 = (void *)(1 << v337);
                v338 = llvm::ConstantInt::get(v603, (llvm::LLVMContext *)&v593, v178);
                if (v594 >= 0x41 && v593) {
                  MEMORY[0x1D25D9CB0](v593, 0x1000C8000313F17);
                }
                __int16 v597 = 257;
                int v339 = sub_1CBF52474((uint64_t)&v598, v206, (uint64_t)v338, (uint64_t)&v593);
                uint64_t v340 = llvm::IntegerType::get(v603, v177);
                v342 = *(llvm::ConstantInt **)v340;
                unsigned int v343 = *(_DWORD *)(v340 + 8);
                unsigned int v590 = v343 >> 8;
                if (v343 >> 8 >= 0x41) {
                  operator new[]();
                }
                v589 = 0;
                v344 = llvm::ConstantInt::get(v342, (llvm::LLVMContext *)&v589, v341);
                if (v590 >= 0x41 && v589) {
                  MEMORY[0x1D25D9CB0](v589, 0x1000C8000313F17);
                }
                __int16 v592 = 257;
                uint64_t v336 = sub_1CB845F20((uint64_t)&v598, 33, v339, (uint64_t)v344, (uint64_t)&v589);
              }
              sub_1CD1290BC((uint64_t)v336, (uint64_t)v18);
            }
          }
          if (!v177) {
            goto LABEL_850;
          }
          goto LABEL_468;
        case 0xB9:
          unint64_t v74 = v18[-4 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF) + 4];
          __int16 v75 = v74 + 3;
          int v76 = v13;
          uint64_t v77 = v12;
          unint64_t v78 = v10;
          uint64_t v79 = v9;
          if (*((_DWORD *)v74 + 8) >= 0x41u) {
            __int16 v75 = (unint64_t *)*v75;
          }
          unint64_t v80 = *v75;
          unint64_t v81 = __clz(v80) ^ 0x3F;
          if (v80) {
            unint64_t v82 = v81;
          }
          else {
            unint64_t v82 = 0;
          }
          if (((*(uint64_t (**)(void, void, unint64_t))(*(void *)*a3 + 328))(*a3, *v18, v82) & 1) == 0)
          {
            __int16 v94 = (unsigned __int8 **)&v18[-4 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF)];
            int v95 = v94[4];
            __int16 v96 = (unint64_t *)(v95 + 24);
            if (*((_DWORD *)v95 + 8) >= 0x41u) {
              __int16 v96 = (unint64_t *)*v96;
            }
            uint64_t v97 = v79;
            long long v98 = 0;
            __int16 v99 = *v94;
            v559 = v94[8];
            long long v100 = v94[12];
            unint64_t v101 = *v96;
            char v102 = __clz(*v96) ^ 0x3F;
            if (v101) {
              char v103 = v102;
            }
            else {
              char v103 = 0;
            }
            __p = (llvm::Type *)(*v18)[3];
            uint64_t v554 = (llvm::Instruction *)*v18;
            long long v104 = (llvm::ConstantInt *)**v18;
            uint64_t v598 = v557;
            uint64_t v599 = 0x200000000;
            v603 = v104;
            v604 = v97;
            v605 = v78;
            uint64_t v606 = 0;
            int v607 = 0;
            __int16 v608 = 512;
            char v609 = 7;
            *int v76 = 0;
            v76[1] = 0;
            *uint64_t v77 = 0;
            v77[1] = 0;
            v611 = &unk_1F2616E88;
            v612[0] = &unk_1F2617008;
            v601 = v18[5];
            v602 = v18 + 3;
            uint64_t v105 = (char *)v18[6];
            v589 = v105;
            if (v105)
            {
              llvm::MetadataTracking::track((uint64_t)&v589, (unsigned __int8 *)v105, 2);
              long long v98 = v589;
            }
            sub_1CB8461A4((uint64_t)&v598, 0, (uint64_t)v98);
            int v106 = v559;
            if (v589)
            {
              int v456 = *(unsigned __int8 *)v589;
              if ((v456 - 4) > 0x1E)
              {
                if ((v456 - 3) >= 0xFFFFFFFE) {
                  unint64_t v484 = v589;
                }
                else {
                  unint64_t v484 = 0;
                }
                if ((v456 - 3) < 0xFFFFFFFE)
                {
                  if (v456 == 3) {
                    *((void *)v589 + 1) = 0;
                  }
                  goto LABEL_94;
                }
                unint64_t v458 = (unint64_t)(v484 + 8);
              }
              else
              {
                if ((v589[1] & 0x7F) != 2 && !*((_DWORD *)v589 + 3)) {
                  goto LABEL_94;
                }
                uint64_t v457 = *((void *)v589 + 2);
                if ((v457 & 4) == 0) {
                  goto LABEL_94;
                }
                unint64_t v458 = v457 & 0xFFFFFFFFFFFFFFF8;
                if (!v458) {
                  goto LABEL_94;
                }
              }
              v593 = &v589;
              sub_1CC5FA668(v458 + 16, &v593);
            }
LABEL_94:
            unsigned int v107 = (unsigned __int8 *)v18[6];
            uint64_t v584 = (const char *)v107;
            if (v107)
            {
              llvm::MetadataTracking::track((uint64_t)&v584, v107, 2);
              uint64_t v108 = (uint64_t)v584;
            }
            else
            {
              uint64_t v108 = 0;
            }
            sub_1CB8461A4((uint64_t)&v598, 0, v108);
            if (v584)
            {
              int v210 = *(unsigned __int8 *)v584;
              if ((v210 - 4) > 0x1E)
              {
                if ((v210 - 3) >= 0xFFFFFFFE) {
                  v311 = v584;
                }
                else {
                  v311 = 0;
                }
                if ((v210 - 3) >= 0xFFFFFFFE)
                {
                  unint64_t v312 = (unint64_t)(v311 + 8);
                  goto LABEL_420;
                }
                if (v210 == 3) {
                  *((void *)v584 + 1) = 0;
                }
              }
              else if ((v584[1] & 0x7F) == 2 || *((_DWORD *)v584 + 3))
              {
                uint64_t v500 = *((void *)v584 + 2);
                if ((v500 & 4) != 0)
                {
                  unint64_t v312 = v500 & 0xFFFFFFFFFFFFFFF8;
                  if (v312)
                  {
LABEL_420:
                    v593 = &v584;
                    sub_1CC5FA668(v312 + 16, &v593);
                  }
                }
              }
            }
            if (v559[16] <= 0x14u && llvm::Constant::isAllOnesValue((llvm::Constant *)v559))
            {
              __int16 v592 = 257;
              v211 = operator new(0x60uLL);
              v211[13] = v211[13] & 0x38000000 | 1;
              uint64_t v212 = (llvm::Instruction *)(v211 + 8);
              *(void *)v211 = 0;
              *((void *)v211 + 1) = 0;
              *((void *)v211 + 2) = 0;
              *((void *)v211 + 3) = v211 + 8;
              __int16 v597 = 257;
              llvm::LoadInst::LoadInst((llvm::Value *)(v211 + 8), (uint64_t)v554, (uint64_t)v99, (const char **)&v593, 0, v103, 0);
              (*(void (**)(void *, llvm::Instruction *, const char **, void *, void **))(*v605 + 16))(v605, v212, &v589, v601, v602);
              if (v599)
              {
                uint64_t v482 = v598;
                uint64_t v483 = v598 + 16 * v599;
                do
                {
                  llvm::Instruction::setMetadata(v212, *(_DWORD *)v482, *(llvm::MDNode **)(v482 + 8));
                  v482 += 16;
                }
                while (v482 != v483);
              }
              int v213 = (llvm::ValueAsMetadata *)v18;
              unsigned __int8 v214 = v212;
LABEL_532:
              llvm::Value::doRAUW(v213, v214, (llvm::Value *)1);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
            }
            unint64_t PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(__p);
            if (v215 == 1) {
            unsigned int v217 = *(_DWORD *)(*(void *)v99 + 8);
            }
            if ((v217 & 0xFE) == 0x12) {
              unsigned int v217 = *(_DWORD *)(**(void **)(*(void *)v99 + 16) + 8);
            }
            unint64_t v218 = llvm::PointerType::get(__p, (llvm::Type *)(v217 >> 8));
            __int16 v592 = 257;
            if (*(void *)v99 != v218)
            {
              if (v99[16] > 0x14u)
              {
                __int16 v597 = 257;
                __int16 v99 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v99, v218, (const char **)&v593, 0);
                (*(void (**)(void *, unsigned __int8 *, const char **, void *, void **))(*v605 + 16))(v605, v99, &v589, v601, v602);
                if (v599)
                {
                  uint64_t v488 = v598;
                  uint64_t v489 = v598 + 16 * v599;
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v99, *(_DWORD *)v488, *(llvm::MDNode **)(v488 + 8));
                    v488 += 16;
                  }
                  while (v488 != v489);
                }
                goto LABEL_261;
              }
              uint64_t v300 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v604 + 28))(v604, 49, v99, v218);
              __int16 v99 = (unsigned __int8 *)v300;
              if (v300 && *(unsigned __int8 *)(v300 + 16) >= 0x1Cu)
              {
                (*(void (**)(void *, uint64_t, const char **, void *, void **))(*v605 + 16))(v605, v300, &v589, v601, v602);
                if (v599)
                {
                  uint64_t v506 = v598;
                  uint64_t v507 = v598 + 16 * v599;
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v99, *(_DWORD *)v506, *(llvm::MDNode **)(v506 + 8));
                    v506 += 16;
                  }
                  while (v506 != v507);
                }
LABEL_261:
                int v106 = v559;
              }
            }
            char v345 = 63
                 - __clz(((1 << v103) | (PrimitiveSizeInBits >> 3)) & -(uint64_t)((1 << v103) | (PrimitiveSizeInBits >> 3)));
            v346 = (llvm::LLVMContext *)*((unsigned int *)v554 + 8);
            v570 = (llvm::Instruction *)v99;
            uint64_t v566 = v346;
            if (sub_1CCEBCA64((llvm::Constant *)v106))
            {
              if (!v346)
              {
LABEL_531:
                int v213 = (llvm::ValueAsMetadata *)v18;
                unsigned __int8 v214 = (llvm::Value *)v100;
                goto LABEL_532;
              }
              unint64_t v348 = 0;
              while (2)
              {
                uint64_t v349 = llvm::Constant::getAggregateElement((llvm::Constant *)v106, (llvm::Type *)v348);
                unsigned int v350 = *((unsigned __int8 *)v349 + 16);
                if (v349 && v350 == 16)
                {
                  uint64_t v351 = *((unsigned int *)v349 + 8);
                  if (v351 < 0x41)
                  {
                    if (v349[3]) {
                      break;
                    }
LABEL_505:
                    if ((llvm::LLVMContext *)++v348 == v346) {
                      goto LABEL_531;
                    }
                    continue;
                  }
                  int v364 = 0;
                  int64_t v365 = (unint64_t)(v351 + 63) >> 6;
                  do
                  {
                    BOOL v165 = v365-- < 1;
                    if (v165) {
                      break;
                    }
                    unint64_t v366 = *(void *)(v349[3] + 8 * v365);
                    v364 += __clz(v366);
                  }
                  while (!v366);
                  int v367 = v351 | 0xFFFFFFC0;
                  if ((v351 & 0x3F) == 0) {
                    int v367 = 0;
                  }
                  __int16 v99 = (unsigned __int8 *)v570;
                  int v106 = v559;
                  v346 = v566;
                  if (v364 + v367 == v351) {
                    goto LABEL_505;
                  }
                }
                else if (v349 && v350 == 17)
                {
                  if (sub_1CB844168((uint64_t)v349, 0.0)) {
                    goto LABEL_505;
                  }
                }
                else
                {
                  BOOL v165 = v350 > 0x14;
                  int v360 = (1 << v350) & 0x1C2000;
                  if (!v165 && v360 != 0) {
                    goto LABEL_505;
                  }
                }
                break;
              }
              __int16 v597 = 257;
              uint64_t v352 = sub_1CB844364(&v598, (uint64_t)__p, (const llvm::APInt *)v99, v348, (uint64_t)&v593);
              __int16 v592 = 257;
              v353 = operator new(0x60uLL);
              v353[13] = v353[13] & 0x38000000 | 1;
              v354 = (llvm::Instruction *)(v353 + 8);
              *(void *)v353 = 0;
              *((void *)v353 + 1) = 0;
              *((void *)v353 + 2) = 0;
              *((void *)v353 + 3) = v353 + 8;
              __int16 v597 = 257;
              llvm::LoadInst::LoadInst((llvm::Value *)(v353 + 8), (uint64_t)__p, (uint64_t)v352, (const char **)&v593, 0, v345, 0);
              (*(void (**)(void *, llvm::Instruction *, const char **, void *, void **))(*v605 + 16))(v605, v354, &v589, v601, v602);
              if (v599)
              {
                uint64_t v362 = v598;
                uint64_t v363 = v598 + 16 * v599;
                do
                {
                  llvm::Instruction::setMetadata(v354, *(_DWORD *)v362, *(llvm::MDNode **)(v362 + 8));
                  v362 += 16;
                }
                while (v362 != v363);
              }
              __int16 v597 = 257;
              int v356 = *(llvm::ConstantInt **)(*(void *)v603 + 1984);
              unsigned int v357 = *(_DWORD *)(*(void *)v603 + 1992);
              unsigned int v590 = v357 >> 8;
              if (v357 >> 8 > 0x40) {
                operator new[]();
              }
              if (v357 <= 0xFF) {
                unint64_t v358 = 0;
              }
              else {
                unint64_t v358 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v357) + 63);
              }
              v589 = (const char *)(v358 & v348);
              v359 = (unsigned __int8 *)llvm::ConstantInt::get(v356, (llvm::LLVMContext *)&v589, v355);
              __int16 v99 = (unsigned __int8 *)v570;
              if (v590 >= 0x41 && v589) {
                MEMORY[0x1D25D9CB0](v589, 0x1000C8000313F17);
              }
              long long v100 = (unsigned __int8 *)sub_1CB84478C((uint64_t)&v598, v100, (unsigned __int8 *)v354, v359, (uint64_t)&v593);
              int v106 = v559;
              v346 = v566;
              goto LABEL_505;
            }
            if (v346 == 1)
            {
              uint64_t v549 = 0;
              goto LABEL_654;
            }
            uint64_t v368 = llvm::IntegerType::get(v603, v346);
            v589 = "scalar_mask";
            __int16 v592 = 259;
            uint64_t v549 = (llvm::Instruction *)v106;
            if (*(void *)v106 == v368)
            {
LABEL_653:
              if (!v346) {
                goto LABEL_853;
              }
            }
            else
            {
              if (v106[16] > 0x14u)
              {
                __int16 v597 = 257;
                uint64_t v549 = llvm::CastInst::Create(49, (uint64_t)v106, v368, (const char **)&v593, 0);
                (*(void (**)(void *))(*v605 + 16))(v605);
                if (v599)
                {
                  uint64_t v369 = v598;
                  uint64_t v370 = v598 + 16 * v599;
                  do
                  {
                    llvm::Instruction::setMetadata(v549, *(_DWORD *)v369, *(llvm::MDNode **)(v369 + 8));
                    v369 += 16;
                  }
                  while (v369 != v370);
                }
                goto LABEL_653;
              }
              uint64_t v428 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v604 + 28))(v604, 49, v106, v368);
              uint64_t v549 = (llvm::Instruction *)v428;
              if (v428) {
                BOOL v429 = *(unsigned __int8 *)(v428 + 16) >= 0x1Cu;
              }
              else {
                BOOL v429 = 0;
              }
              if (!v429) {
                goto LABEL_653;
              }
              (*(void (**)(void *, uint64_t, const char **, void *, void **))(*v605 + 16))(v605, v428, &v589, v601, v602);
              if (v599)
              {
                uint64_t v514 = v598;
                uint64_t v515 = v598 + 16 * v599;
                do
                {
                  llvm::Instruction::setMetadata(v549, *(_DWORD *)v514, *(llvm::MDNode **)(v514 + 8));
                  v514 += 16;
                }
                while (v514 != v515);
              }
              if (!v346)
              {
LABEL_853:
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v18, (llvm::Value *)v100, (llvm::Value *)1);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
              }
            }
LABEL_654:
            if (v346 == 1)
            {
              __int16 v597 = 257;
              v430 = *(llvm::ConstantInt **)(*(void *)v603 + 1984);
              unsigned int v431 = *(_DWORD *)(*(void *)v603 + 1992);
              unsigned int v590 = v431 >> 8;
              if (v431 >> 8 > 0x40) {
                operator new[]();
              }
              v589 = 0;
              unint64_t v432 = (unsigned __int8 *)llvm::ConstantInt::get(v430, (llvm::LLVMContext *)&v589, v347);
              if (v590 >= 0x41 && v589) {
                MEMORY[0x1D25D9CB0](v589, 0x1000C8000313F17);
              }
              v433 = sub_1CB8445F4((uint64_t)&v598, v559, v432, (uint64_t)&v593);
            }
            else
            {
              if (*(unsigned char *)a4) {
                char v434 = (_BYTE)v346 - 1;
              }
              else {
                char v434 = 0;
              }
              unsigned int v594 = v346;
              if (v346 >= 0x41) {
                operator new[]();
              }
              v593 = (void *)(1 << v434);
              uint64_t v435 = llvm::ConstantInt::get(v603, (llvm::LLVMContext *)&v593, v347);
              if (v594 >= 0x41 && v593) {
                MEMORY[0x1D25D9CB0](v593, 0x1000C8000313F17);
              }
              __int16 v597 = 257;
              uint64_t v436 = sub_1CBF52474((uint64_t)&v598, v549, (uint64_t)v435, (uint64_t)&v593);
              uint64_t v437 = llvm::IntegerType::get(v603, v346);
              v439 = *(llvm::ConstantInt **)v437;
              unsigned int v440 = *(_DWORD *)(v437 + 8);
              unsigned int v590 = v440 >> 8;
              if (v440 >> 8 >= 0x41) {
                operator new[]();
              }
              v589 = 0;
              int v441 = llvm::ConstantInt::get(v439, (llvm::LLVMContext *)&v589, v438);
              if (v590 >= 0x41 && v589) {
                MEMORY[0x1D25D9CB0](v589, 0x1000C8000313F17);
              }
              __int16 v592 = 257;
              v433 = sub_1CB845F20((uint64_t)&v598, 33, v436, (uint64_t)v441, (uint64_t)&v589);
            }
            sub_1CD1290BC((uint64_t)v433, (uint64_t)v18);
          }
          LODWORD(v19) = 0;
          int v6 = v533;
          a5 = v582;
          a3 = v544;
          a2 = v534;
          uint64_t v14 = __b;
          uint64_t v7 = v532;
          uint64_t v9 = v79;
          uint64_t v10 = v78;
          uint64_t v11 = (uint64_t *)v557;
          uint64_t v12 = v77;
          char v13 = v76;
          goto LABEL_16;
        case 0xBA:
          uint64_t v34 = &v18[-4 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF)];
          uint64_t v35 = v34[8];
          unint64_t v36 = (unint64_t *)(v35 + 3);
          if (*((_DWORD *)v35 + 8) >= 0x41u) {
            unint64_t v36 = (unint64_t *)*v36;
          }
          v540 = v10;
          __int16 v542 = v9;
          uint64_t v37 = **v34;
          int v38 = (llvm::Type *)v37;
          if ((*(_DWORD *)(v37 + 8) & 0xFE) == 0x12) {
            int v38 = **(llvm::Type ***)(v37 + 16);
          }
          v536 = v13;
          v538 = v12;
          unint64_t v39 = *v36;
          unint64_t v40 = __clz(v39) ^ 0x13F;
          if (v39) {
            unint64_t v41 = v40;
          }
          else {
            unint64_t v41 = 0;
          }
          if (v41 <= 0xFF)
          {
            unint64_t v42 = a3;
            LOBYTE(v41) = llvm::DataLayout::getAlignment(a4, v38, 1);
            a3 = v42;
          }
          uint64_t v43 = v41;
          if (!(*(unsigned int (**)(void, uint64_t, void))(*(void *)*a3 + 360))(*a3, v37, v41)|| (*(unsigned int (**)(void, uint64_t, uint64_t))(*(void *)*v544 + 384))(*v544, v37, v43))
          {
            uint64_t v44 = 0;
            uint64_t v45 = (unsigned __int8 **)&v18[-4 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF)];
            __int16 v577 = v45[4];
            uint64_t v579 = *v45;
            uint64_t v46 = v45[8];
            v568 = v45[12];
            uint64_t v47 = *(void *)*v45;
            uint64_t v48 = (llvm::ConstantInt *)**v18;
            uint64_t v598 = v557;
            uint64_t v599 = 0x200000000;
            v603 = v48;
            v604 = v542;
            v605 = v540;
            uint64_t v606 = 0;
            int v607 = 0;
            __int16 v608 = 512;
            char v609 = 7;
            void *v536 = 0;
            v536[1] = 0;
            uint64_t *v538 = 0;
            v538[1] = 0;
            v611 = &unk_1F2616E88;
            v612[0] = &unk_1F2617008;
            v601 = v18[5];
            v602 = v18 + 3;
            int v49 = (char *)v18[6];
            v589 = v49;
            if (v49)
            {
              llvm::MetadataTracking::track((uint64_t)&v589, (unsigned __int8 *)v49, 2);
              uint64_t v44 = v589;
            }
            sub_1CB8461A4((uint64_t)&v598, 0, (uint64_t)v44);
            uint64_t v50 = (llvm::Constant *)v568;
            if (v589)
            {
              int v422 = *(unsigned __int8 *)v589;
              if ((v422 - 4) > 0x1E)
              {
                if ((v422 - 3) >= 0xFFFFFFFE) {
                  int v480 = v589;
                }
                else {
                  int v480 = 0;
                }
                if ((v422 - 3) < 0xFFFFFFFE)
                {
                  if (v422 == 3) {
                    *((void *)v589 + 1) = 0;
                  }
                  goto LABEL_46;
                }
                unint64_t v424 = (unint64_t)(v480 + 8);
              }
              else
              {
                if ((v589[1] & 0x7F) != 2 && !*((_DWORD *)v589 + 3)) {
                  goto LABEL_46;
                }
                uint64_t v423 = *((void *)v589 + 2);
                if ((v423 & 4) == 0) {
                  goto LABEL_46;
                }
                unint64_t v424 = v423 & 0xFFFFFFFFFFFFFFF8;
                if (!v424) {
                  goto LABEL_46;
                }
              }
              v593 = &v589;
              sub_1CC5FA668(v424 + 16, &v593);
            }
LABEL_46:
            uint64_t v51 = (unsigned __int8 *)v18[6];
            uint64_t v584 = (const char *)v51;
            if (v51)
            {
              llvm::MetadataTracking::track((uint64_t)&v584, v51, 2);
              uint64_t v52 = (uint64_t)v584;
            }
            else
            {
              uint64_t v52 = 0;
            }
            sub_1CB8461A4((uint64_t)&v598, 0, v52);
            if (v584)
            {
              int v133 = *(unsigned __int8 *)v584;
              if ((v133 - 4) > 0x1E)
              {
                if ((v133 - 3) >= 0xFFFFFFFE) {
                  int v302 = v584;
                }
                else {
                  int v302 = 0;
                }
                if ((v133 - 3) >= 0xFFFFFFFE)
                {
                  unint64_t v303 = (unint64_t)(v302 + 8);
                  goto LABEL_398;
                }
                if (v133 == 3) {
                  *((void *)v584 + 1) = 0;
                }
              }
              else if ((v584[1] & 0x7F) == 2 || *((_DWORD *)v584 + 3))
              {
                uint64_t v498 = *((void *)v584 + 2);
                if ((v498 & 4) != 0)
                {
                  unint64_t v303 = v498 & 0xFFFFFFFFFFFFFFF8;
                  if (v303)
                  {
LABEL_398:
                    v593 = &v584;
                    sub_1CC5FA668(v303 + 16, &v593);
                  }
                }
              }
            }
            uint64_t v134 = (unint64_t *)(v46 + 24);
            if (*((_DWORD *)v46 + 8) >= 0x41u) {
              uint64_t v134 = (unint64_t *)*v134;
            }
            unint64_t v135 = *v134;
            int v136 = __clz(*v134) ^ 0x3F | 0x100;
            if (!v135) {
              LOBYTE(v136) = 0;
            }
            char __pc = v136;
            int v137 = (llvm::LLVMContext *)*(unsigned int *)(v47 + 32);
            if (sub_1CCEBCA64((llvm::Constant *)v568))
            {
              if (!v137) {
LABEL_179:
              }
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
              unint64_t v139 = 0;
              while (2)
              {
                v140 = llvm::Constant::getAggregateElement(v50, (llvm::Type *)v139);
                unsigned int v142 = *((unsigned __int8 *)v140 + 16);
                if (v140 && v142 == 16)
                {
                  uint64_t v143 = *((unsigned int *)v140 + 8);
                  if (v143 < 0x41)
                  {
                    if (v140[3]) {
                      break;
                    }
LABEL_148:
                    if ((llvm::LLVMContext *)++v139 == v137) {
                      goto LABEL_179;
                    }
                    continue;
                  }
                  int v170 = 0;
                  int64_t v171 = (unint64_t)(v143 + 63) >> 6;
                  do
                  {
                    BOOL v165 = v171-- < 1;
                    if (v165) {
                      break;
                    }
                    unint64_t v172 = *(void *)(v140[3] + 8 * v171);
                    v170 += __clz(v172);
                  }
                  while (!v172);
                  int v173 = v143 | 0xFFFFFFC0;
                  if ((v143 & 0x3F) == 0) {
                    int v173 = 0;
                  }
                  uint64_t v50 = (llvm::Constant *)v568;
                  if (v170 + v173 == v143) {
                    goto LABEL_148;
                  }
                }
                else if (v140 && v142 == 17)
                {
                  if (sub_1CB844168((uint64_t)v140, 0.0)) {
                    goto LABEL_148;
                  }
                }
                else
                {
                  BOOL v165 = v142 > 0x14;
                  int v166 = (1 << v142) & 0x1C2000;
                  if (!v165 && v166 != 0) {
                    goto LABEL_148;
                  }
                }
                break;
              }
              v593 = "Elt";
              unint64_t v596 = v528 & 0xFFFFFFFF00000000 | v139;
              __int16 v597 = 2051;
              v144 = *(llvm::ConstantInt **)(*(void *)v603 + 1984);
              unsigned int v145 = *(_DWORD *)(*(void *)v603 + 1992);
              unsigned int v590 = v145 >> 8;
              unint64_t v528 = v596;
              if (v145 >> 8 > 0x40) {
                operator new[]();
              }
              if (v145 <= 0xFF) {
                unint64_t v146 = 0;
              }
              else {
                unint64_t v146 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v145) + 63);
              }
              v589 = (const char *)(v146 & v139);
              int v147 = (unsigned __int8 *)llvm::ConstantInt::get(v144, (llvm::LLVMContext *)&v589, v141);
              if (v590 >= 0x41 && v589) {
                MEMORY[0x1D25D9CB0](v589, 0x1000C8000313F17);
              }
              uint64_t v149 = sub_1CB8445F4((uint64_t)&v598, v579, v147, (uint64_t)&v593);
              v593 = "Ptr";
              unint64_t v596 = v139 | v529 & 0xFFFFFFFF00000000;
              __int16 v597 = 2051;
              uint64_t v150 = *(llvm::ConstantInt **)(*(void *)v603 + 1984);
              unsigned int v151 = *(_DWORD *)(*(void *)v603 + 1992);
              unsigned int v590 = v151 >> 8;
              unint64_t v529 = v596;
              if (v151 >> 8 > 0x40) {
                operator new[]();
              }
              if (v151 <= 0xFF) {
                unint64_t v152 = 0;
              }
              else {
                unint64_t v152 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v151) + 63);
              }
              v589 = (const char *)(v152 & v139);
              unsigned int v153 = (unsigned __int8 *)llvm::ConstantInt::get(v150, (llvm::LLVMContext *)&v589, v148);
              if (v590 >= 0x41 && v589) {
                MEMORY[0x1D25D9CB0](v589, 0x1000C8000313F17);
              }
              unint64_t v154 = sub_1CB8445F4((uint64_t)&v598, v577, v153, (uint64_t)&v593);
              char v155 = __pc;
              if (!v135) {
                char v155 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v601[7] + 40) + 272), *(llvm::Type **)v149, 1);
              }
              int v156 = (char *)operator new(0x80uLL);
              *((_DWORD *)v156 + 21) = *((_DWORD *)v156 + 21) & 0x38000000 | 2;
              *(void *)int v156 = 0;
              *((void *)v156 + 2) = 0;
              *((void *)v156 + 1) = 0;
              *((void *)v156 + 5) = 0;
              *((void *)v156 + 6) = 0;
              *((void *)v156 + 4) = 0;
              v157 = (llvm::Instruction **)(v156 + 32);
              *((void *)v156 + 8) = ***(void ***)v149 + 1576;
              uint64_t v158 = (llvm::Instruction *)(v156 + 64);
              *((void *)v156 + 3) = v156 + 64;
              *((void *)v156 + 7) = v156 + 64;
              *((void *)v156 + 9) = 0;
              v156[80] = 61;
              v156[81] = 0;
              *((_WORD *)v156 + 41) = 0;
              *((_DWORD *)v156 + 21) = 2;
              *(_OWORD *)(v156 + 88) = 0u;
              *(_OWORD *)(v156 + 104) = 0u;
              *((_DWORD *)v156 + 30) = 0;
              *(void *)int v156 = v149;
              uint64_t v161 = *((void *)v149 + 1);
              v160 = (void *)((char *)v149 + 8);
              uint64_t v159 = v161;
              *((void *)v156 + 1) = v161;
              if (v161) {
                *(void *)(v159 + 16) = v156 + 8;
              }
              *((void *)v156 + 2) = v160;
              void *v160 = v156;
              if (*((void *)v156 + 4))
              {
                **((void **)v156 + 6) = *((void *)v156 + 5);
                uint64_t v174 = *((void *)v156 + 5);
                if (v174) {
                  *(void *)(v174 + 16) = *((void *)v156 + 6);
                }
              }
              void *v157 = v154;
              if (v154)
              {
                uint64_t v164 = *((void *)v154 + 1);
                int v163 = (llvm::Instruction ***)((char *)v154 + 8);
                uint64_t v162 = v164;
                *((void *)v156 + 5) = v164;
                if (v164) {
                  *(void *)(v162 + 16) = v156 + 40;
                }
                *((void *)v156 + 6) = v163;
                *int v163 = v157;
              }
              *((_WORD *)v156 + 41) = 2 * (v155 & 0x3F);
              v156[124] = 1;
              __int16 v597 = 257;
              (*(void (**)(void *, llvm::Instruction *, void **, void *, void **))(*v605 + 16))(v605, v158, &v593, v601, v602);
              if (v599)
              {
                uint64_t v168 = v598;
                uint64_t v169 = v598 + 16 * v599;
                do
                {
                  llvm::Instruction::setMetadata(v158, *(_DWORD *)v168, *(llvm::MDNode **)(v168 + 8));
                  v168 += 16;
                }
                while (v168 != v169);
              }
              uint64_t v50 = (llvm::Constant *)v568;
              goto LABEL_148;
            }
            if (v137 == 1)
            {
              v175 = 0;
              goto LABEL_442;
            }
            uint64_t v207 = llvm::IntegerType::get(v603, v137);
            v589 = "scalar_mask";
            __int16 v592 = 259;
            v175 = (llvm::Constant *)v568;
            if (*(void *)v568 != v207)
            {
              if (v568[16] > 0x14u)
              {
                __int16 v597 = 257;
                uint64_t v208 = llvm::CastInst::Create(49, (uint64_t)v568, v207, (const char **)&v593, 0);
                (*(void (**)(void *))(*v605 + 16))(v605);
                if (v599)
                {
                  uint64_t v490 = v598;
                  uint64_t v491 = v598 + 16 * v599;
                  do
                  {
                    llvm::Instruction::setMetadata(v208, *(_DWORD *)v490, *(llvm::MDNode **)(v490 + 8));
                    v490 += 16;
                  }
                  while (v490 != v491);
                }
                goto LABEL_239;
              }
              uint64_t v319 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v604 + 28))(v604, 49, v568, v207);
              v175 = (llvm::Constant *)v319;
              if (v319 && *(unsigned __int8 *)(v319 + 16) >= 0x1Cu)
              {
                uint64_t v208 = (llvm::Instruction *)v319;
                (*(void (**)(void *))(*v605 + 16))(v605);
                if (v599)
                {
                  uint64_t v510 = v598;
                  uint64_t v511 = v598 + 16 * v599;
                  do
                  {
                    llvm::Instruction::setMetadata(v208, *(_DWORD *)v510, *(llvm::MDNode **)(v510 + 8));
                    v510 += 16;
                  }
                  while (v510 != v511);
                }
LABEL_239:
                v175 = v208;
              }
            }
            if (!v137) {
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
            }
LABEL_442:
            char v565 = v175;
            if (v137 == 1)
            {
              v593 = "Mask";
              unint64_t v596 = v551 & 0xFFFFFFFF00000000;
              __int16 v597 = 2051;
              uint64_t v320 = *(llvm::ConstantInt **)(*(void *)v603 + 1984);
              unsigned int v321 = *(_DWORD *)(*(void *)v603 + 1992);
              unsigned int v590 = v321 >> 8;
              if (v321 >> 8 > 0x40) {
                operator new[]();
              }
              v589 = 0;
              v322 = (unsigned __int8 *)llvm::ConstantInt::get(v320, (llvm::LLVMContext *)&v589, v138);
              if (v590 >= 0x41 && v589) {
                MEMORY[0x1D25D9CB0](v589, 0x1000C8000313F17);
              }
              int v323 = sub_1CB8445F4((uint64_t)&v598, v568, v322, (uint64_t)&v593);
            }
            else
            {
              if (*(unsigned char *)a4) {
                char v324 = (_BYTE)v137 - 1;
              }
              else {
                char v324 = 0;
              }
              unsigned int v594 = v137;
              if (v137 >= 0x41) {
                operator new[]();
              }
              v593 = (void *)(1 << v324);
              v325 = llvm::ConstantInt::get(v603, (llvm::LLVMContext *)&v593, v138);
              if (v594 >= 0x41 && v593) {
                MEMORY[0x1D25D9CB0](v593, 0x1000C8000313F17);
              }
              __int16 v597 = 257;
              v326 = sub_1CBF52474((uint64_t)&v598, v565, (uint64_t)v325, (uint64_t)&v593);
              uint64_t v327 = llvm::IntegerType::get(v603, v137);
              v329 = *(llvm::ConstantInt **)v327;
              unsigned int v330 = *(_DWORD *)(v327 + 8);
              unsigned int v590 = v330 >> 8;
              if (v330 >> 8 >= 0x41) {
                operator new[]();
              }
              v589 = 0;
              v331 = llvm::ConstantInt::get(v329, (llvm::LLVMContext *)&v589, v328);
              if (v590 >= 0x41 && v589) {
                MEMORY[0x1D25D9CB0](v589, 0x1000C8000313F17);
              }
              __int16 v592 = 257;
              int v323 = sub_1CB845F20((uint64_t)&v598, 33, v326, (uint64_t)v331, (uint64_t)&v589);
            }
            sub_1CD1290BC((uint64_t)v323, (uint64_t)v18);
          }
LABEL_68:
          LODWORD(v19) = 0;
          int v6 = v533;
          a5 = v582;
          uint64_t v9 = v542;
          a3 = v544;
          a2 = v534;
          uint64_t v7 = v532;
          uint64_t v12 = v538;
          uint64_t v10 = v540;
          uint64_t v11 = (uint64_t *)v557;
          char v13 = v536;
LABEL_85:
          uint64_t v14 = __b;
          goto LABEL_16;
        case 0xBB:
          uint64_t v83 = &v18[-4 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF)];
          uint64_t v84 = v83[8];
          size_t v85 = (unint64_t *)(v84 + 3);
          int v86 = v13;
          uint64_t v87 = v12;
          int v88 = v10;
          int v89 = v9;
          if (*((_DWORD *)v84 + 8) >= 0x41u) {
            size_t v85 = (unint64_t *)*v85;
          }
          uint64_t v90 = **v83;
          unint64_t v91 = *v85;
          unint64_t v92 = __clz(v91) ^ 0x3F;
          if (v91) {
            unint64_t v93 = v92;
          }
          else {
            unint64_t v93 = 0;
          }
          if (((*(uint64_t (**)(void, uint64_t, unint64_t))(*(void *)*a3 + 320))(*a3, v90, v93) & 1) == 0)
          {
            v117 = (uint64_t *)&v18[-4 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF)];
            uint64_t v118 = v117[8];
            uint64_t v119 = (unint64_t *)(v118 + 24);
            v120 = v87;
            uint64_t v121 = v86;
            if (*(_DWORD *)(v118 + 32) >= 0x41u) {
              uint64_t v119 = (unint64_t *)*v119;
            }
            unint64_t v122 = 0;
            unsigned int v123 = (uint64_t *)*v117;
            int v124 = (unsigned __int8 *)v117[4];
            __pb = (unsigned __int8 *)v117[12];
            uint64_t v578 = *v117;
            unint64_t v125 = *v119;
            __int16 v126 = __clz(*v119) ^ 0x3F;
            if (v125) {
              __int16 v127 = v126;
            }
            else {
              __int16 v127 = 0;
            }
            uint64_t v128 = *v123;
            v581 = *(llvm::Type **)(*v123 + 24);
            uint64_t v129 = (llvm::ConstantInt *)**v18;
            uint64_t v598 = v557;
            uint64_t v599 = 0x200000000;
            v603 = v129;
            v604 = v89;
            v605 = v88;
            uint64_t v606 = 0;
            int v607 = 0;
            __int16 v608 = 512;
            char v609 = 7;
            void *v121 = 0;
            v121[1] = 0;
            uint64_t *v120 = 0;
            v120[1] = 0;
            v611 = &unk_1F2616E88;
            v612[0] = &unk_1F2617008;
            v601 = v18[5];
            v602 = v18 + 3;
            unint64_t v130 = (char *)v18[6];
            v589 = v130;
            if (v130)
            {
              llvm::MetadataTracking::track((uint64_t)&v589, (unsigned __int8 *)v130, 2);
              unint64_t v122 = v589;
            }
            sub_1CB8461A4((uint64_t)&v598, 0, (uint64_t)v122);
            if (v589)
            {
              int v465 = *(unsigned __int8 *)v589;
              if ((v465 - 4) > 0x1E)
              {
                if ((v465 - 3) >= 0xFFFFFFFE) {
                  unint64_t v487 = v589;
                }
                else {
                  unint64_t v487 = 0;
                }
                if ((v465 - 3) < 0xFFFFFFFE)
                {
                  if (v465 == 3) {
                    *((void *)v589 + 1) = 0;
                  }
                  goto LABEL_109;
                }
                unint64_t v467 = (unint64_t)(v487 + 8);
              }
              else
              {
                if ((v589[1] & 0x7F) != 2 && !*((_DWORD *)v589 + 3)) {
                  goto LABEL_109;
                }
                uint64_t v466 = *((void *)v589 + 2);
                if ((v466 & 4) == 0) {
                  goto LABEL_109;
                }
                unint64_t v467 = v466 & 0xFFFFFFFFFFFFFFF8;
                if (!v467) {
                  goto LABEL_109;
                }
              }
              v593 = &v589;
              sub_1CC5FA668(v467 + 16, &v593);
            }
LABEL_109:
            int v131 = (unsigned __int8 *)v18[6];
            uint64_t v584 = (const char *)v131;
            if (v131)
            {
              llvm::MetadataTracking::track((uint64_t)&v584, v131, 2);
              uint64_t v132 = (uint64_t)v584;
            }
            else
            {
              uint64_t v132 = 0;
            }
            sub_1CB8461A4((uint64_t)&v598, 0, v132);
            if (v584)
            {
              int v283 = *(unsigned __int8 *)v584;
              if ((v283 - 4) > 0x1E)
              {
                if ((v283 - 3) >= 0xFFFFFFFE) {
                  uint64_t v317 = v584;
                }
                else {
                  uint64_t v317 = 0;
                }
                if ((v283 - 3) >= 0xFFFFFFFE)
                {
                  unint64_t v318 = (unint64_t)(v317 + 8);
                  goto LABEL_438;
                }
                if (v283 == 3) {
                  *((void *)v584 + 1) = 0;
                }
              }
              else if ((v584[1] & 0x7F) == 2 || *((_DWORD *)v584 + 3))
              {
                uint64_t v503 = *((void *)v584 + 2);
                if ((v503 & 4) != 0)
                {
                  unint64_t v318 = v503 & 0xFFFFFFFFFFFFFFF8;
                  if (v318)
                  {
LABEL_438:
                    v593 = &v584;
                    sub_1CC5FA668(v318 + 16, &v593);
                  }
                }
              }
            }
            if (__pb[16] <= 0x14u && llvm::Constant::isAllOnesValue((llvm::Constant *)__pb))
            {
              v284 = (char *)operator new(0x80uLL);
              *((_DWORD *)v284 + 21) = *((_DWORD *)v284 + 21) & 0x38000000 | 2;
              *(void *)v284 = 0;
              *((void *)v284 + 2) = 0;
              *((void *)v284 + 1) = 0;
              *((void *)v284 + 5) = 0;
              *((void *)v284 + 6) = 0;
              *((void *)v284 + 4) = 0;
              v285 = (unsigned __int8 **)(v284 + 32);
              *((void *)v284 + 8) = ***(void ***)v578 + 1576;
              unsigned int v286 = (llvm::Instruction *)(v284 + 64);
              *((void *)v284 + 3) = v284 + 64;
              *((void *)v284 + 7) = v284 + 64;
              *((void *)v284 + 9) = 0;
              v284[80] = 61;
              v284[81] = 0;
              *((_WORD *)v284 + 41) = 0;
              *((_DWORD *)v284 + 21) = 2;
              *(_OWORD *)(v284 + 88) = 0u;
              *(_OWORD *)(v284 + 104) = 0u;
              *((_DWORD *)v284 + 30) = 0;
              *(void *)v284 = v578;
              uint64_t v288 = (void *)(v578 + 8);
              uint64_t v287 = *(void *)(v578 + 8);
              *((void *)v284 + 1) = v287;
              if (v287) {
                *(void *)(v287 + 16) = v284 + 8;
              }
              *((void *)v284 + 2) = v288;
              *uint64_t v288 = v284;
              if (*((void *)v284 + 4))
              {
                **((void **)v284 + 6) = *((void *)v284 + 5);
                uint64_t v505 = *((void *)v284 + 5);
                if (v505) {
                  *(void *)(v505 + 16) = *((void *)v284 + 6);
                }
              }
              llvm::FixedVectorType *v285 = v124;
              if (v124)
              {
                uint64_t v291 = *((void *)v124 + 1);
                int v290 = (unsigned __int8 ***)(v124 + 8);
                uint64_t v289 = v291;
                *((void *)v284 + 5) = v291;
                if (v291) {
                  *(void *)(v289 + 16) = v284 + 40;
                }
                *((void *)v284 + 6) = v290;
                *int v290 = v285;
              }
              *((_WORD *)v284 + 41) = 2 * v127;
              v284[124] = 1;
              __int16 v597 = 257;
              (*(void (**)(void *, llvm::Instruction *, void **, void *, void **))(*v605 + 16))(v605, v286, &v593, v601, v602);
              if (v599)
              {
                uint64_t v496 = v598;
                uint64_t v497 = v598 + 16 * v599;
                do
                {
                  llvm::Instruction::setMetadata(v286, *(_DWORD *)v496, *(llvm::MDNode **)(v496 + 8));
                  v496 += 16;
                }
                while (v496 != v497);
              }
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
            }
            unint64_t v293 = llvm::Type::getPrimitiveSizeInBits(v581);
            if (v292 == 1) {
            unsigned int v294 = *(_DWORD *)(*(void *)v124 + 8);
            }
            if ((v294 & 0xFE) == 0x12) {
              unsigned int v294 = *(_DWORD *)(**(void **)(*(void *)v124 + 16) + 8);
            }
            unint64_t v295 = llvm::PointerType::get(v581, (llvm::Type *)(v294 >> 8));
            __int16 v592 = 257;
            if (*(void *)v124 != v295)
            {
              if (v124[16] <= 0x14u)
              {
                uint64_t v301 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v604 + 28))(v604, 49, v124, v295);
                int v124 = (unsigned __int8 *)v301;
                if (v301)
                {
                  if (*(unsigned __int8 *)(v301 + 16) >= 0x1Cu)
                  {
                    (*(void (**)(void *, uint64_t, const char **, void *, void **))(*v605 + 16))(v605, v301, &v589, v601, v602);
                    if (v599)
                    {
                      uint64_t v508 = v598;
                      uint64_t v509 = v598 + 16 * v599;
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v124, *(_DWORD *)v508, *(llvm::MDNode **)(v508 + 8));
                        v508 += 16;
                      }
                      while (v508 != v509);
                    }
                  }
                }
              }
              else
              {
                __int16 v597 = 257;
                int v124 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v124, v295, (const char **)&v593, 0);
                (*(void (**)(void *, unsigned __int8 *, const char **, void *, void **))(*v605 + 16))(v605, v124, &v589, v601, v602);
                if (v599)
                {
                  uint64_t v296 = v598;
                  uint64_t v297 = v598 + 16 * v599;
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v124, *(_DWORD *)v296, *(llvm::MDNode **)(v296 + 8));
                    v296 += 16;
                  }
                  while (v296 != v297);
                }
              }
            }
            char v371 = 63 - __clz(((1 << v127) | (v293 >> 3)) & -(uint64_t)((1 << v127) | (v293 >> 3)));
            uint64_t v372 = (llvm::LLVMContext *)*(unsigned int *)(v128 + 32);
            if (sub_1CCEBCA64((llvm::Constant *)__pb))
            {
              if (!v372) {
LABEL_588:
              }
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
              unint64_t v374 = 0;
              __int16 v375 = 2 * (v371 & 0x3F);
              while (2)
              {
                v376 = llvm::Constant::getAggregateElement((llvm::Constant *)__pb, (llvm::Type *)v374);
                unsigned int v378 = *((unsigned __int8 *)v376 + 16);
                if (v376 && v378 == 16)
                {
                  uint64_t v379 = *((unsigned int *)v376 + 8);
                  if (v379 < 0x41)
                  {
                    if (v376[3]) {
                      break;
                    }
LABEL_560:
                    if ((llvm::LLVMContext *)++v374 == v372) {
                      goto LABEL_588;
                    }
                    continue;
                  }
                  int v399 = 0;
                  int64_t v400 = (unint64_t)(v379 + 63) >> 6;
                  do
                  {
                    BOOL v165 = v400-- < 1;
                    if (v165) {
                      break;
                    }
                    unint64_t v401 = *(void *)(v376[3] + 8 * v400);
                    v399 += __clz(v401);
                  }
                  while (!v401);
                  int v402 = v379 | 0xFFFFFFC0;
                  if ((v379 & 0x3F) == 0) {
                    int v402 = 0;
                  }
                  if (v399 + v402 == v379) {
                    goto LABEL_560;
                  }
                }
                else if (v376 && v378 == 17)
                {
                  if (sub_1CB844168((uint64_t)v376, 0.0)) {
                    goto LABEL_560;
                  }
                }
                else
                {
                  BOOL v165 = v378 > 0x14;
                  int v395 = (1 << v378) & 0x1C2000;
                  if (!v165 && v395 != 0) {
                    goto LABEL_560;
                  }
                }
                break;
              }
              __int16 v597 = 257;
              uint64_t v380 = *(llvm::ConstantInt **)(*(void *)v603 + 1984);
              unsigned int v381 = *(_DWORD *)(*(void *)v603 + 1992);
              unsigned int v590 = v381 >> 8;
              if (v381 >> 8 > 0x40) {
                operator new[]();
              }
              if (v381 <= 0xFF) {
                unint64_t v382 = 0;
              }
              else {
                unint64_t v382 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v381) + 63);
              }
              v589 = (const char *)(v382 & v374);
              uint64_t v383 = (unsigned __int8 *)llvm::ConstantInt::get(v380, (llvm::LLVMContext *)&v589, v377);
              if (v590 >= 0x41 && v589) {
                MEMORY[0x1D25D9CB0](v589, 0x1000C8000313F17);
              }
              uint64_t v384 = sub_1CB8445F4((uint64_t)&v598, (unsigned __int8 *)v578, v383, (uint64_t)&v593);
              __int16 v597 = 257;
              uint64_t v385 = sub_1CB844364(&v598, (uint64_t)v581, (const llvm::APInt *)v124, v374, (uint64_t)&v593);
              v386 = (char *)operator new(0x80uLL);
              *((_DWORD *)v386 + 21) = *((_DWORD *)v386 + 21) & 0x38000000 | 2;
              *(void *)v386 = 0;
              *((void *)v386 + 2) = 0;
              *((void *)v386 + 1) = 0;
              *((void *)v386 + 5) = 0;
              *((void *)v386 + 6) = 0;
              *((void *)v386 + 4) = 0;
              v387 = (llvm::Instruction **)(v386 + 32);
              *((void *)v386 + 8) = ***(void ***)v384 + 1576;
              int v388 = (llvm::Instruction *)(v386 + 64);
              *((void *)v386 + 3) = v386 + 64;
              *((void *)v386 + 7) = v386 + 64;
              *((void *)v386 + 9) = 0;
              v386[80] = 61;
              v386[81] = 0;
              *((_WORD *)v386 + 41) = 0;
              *((_DWORD *)v386 + 21) = 2;
              *(_OWORD *)(v386 + 88) = 0u;
              *(_OWORD *)(v386 + 104) = 0u;
              *((_DWORD *)v386 + 30) = 0;
              *(void *)v386 = v384;
              uint64_t v391 = *((void *)v384 + 1);
              v390 = (void *)((char *)v384 + 8);
              uint64_t v389 = v391;
              *((void *)v386 + 1) = v391;
              if (v391) {
                *(void *)(v389 + 16) = v386 + 8;
              }
              *((void *)v386 + 2) = v390;
              void *v390 = v386;
              if (*((void *)v386 + 4))
              {
                **((void **)v386 + 6) = *((void *)v386 + 5);
                uint64_t v403 = *((void *)v386 + 5);
                if (v403) {
                  *(void *)(v403 + 16) = *((void *)v386 + 6);
                }
              }
              *v387 = v385;
              if (v385)
              {
                uint64_t v394 = *((void *)v385 + 1);
                v393 = (llvm::Instruction ***)((char *)v385 + 8);
                uint64_t v392 = v394;
                *((void *)v386 + 5) = v394;
                if (v394) {
                  *(void *)(v392 + 16) = v386 + 40;
                }
                *((void *)v386 + 6) = v393;
                *v393 = v387;
              }
              *((_WORD *)v386 + 41) = v375;
              v386[124] = 1;
              __int16 v597 = 257;
              (*(void (**)(void *, llvm::Instruction *, void **, void *, void **))(*v605 + 16))(v605, v388, &v593, v601, v602);
              if (v599)
              {
                uint64_t v397 = v598;
                uint64_t v398 = v598 + 16 * v599;
                do
                {
                  llvm::Instruction::setMetadata(v388, *(_DWORD *)v397, *(llvm::MDNode **)(v397 + 8));
                  v397 += 16;
                }
                while (v397 != v398);
              }
              goto LABEL_560;
            }
            if (v372 == 1)
            {
              v571 = 0;
              goto LABEL_681;
            }
            uint64_t v404 = llvm::IntegerType::get(v603, v372);
            v589 = "scalar_mask";
            __int16 v592 = 259;
            v571 = (llvm::Value *)__pb;
            if (*(void *)__pb == v404)
            {
LABEL_680:
              if (!v372) {
                goto LABEL_856;
              }
            }
            else
            {
              if (__pb[16] > 0x14u)
              {
                __int16 v597 = 257;
                v571 = llvm::CastInst::Create(49, (uint64_t)__pb, v404, (const char **)&v593, 0);
                (*(void (**)(void *))(*v605 + 16))(v605);
                if (v599)
                {
                  uint64_t v405 = v598;
                  uint64_t v406 = v598 + 16 * v599;
                  do
                  {
                    llvm::Instruction::setMetadata(v571, *(_DWORD *)v405, *(llvm::MDNode **)(v405 + 8));
                    v405 += 16;
                  }
                  while (v405 != v406);
                }
                goto LABEL_680;
              }
              uint64_t v442 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v604 + 28))(v604, 49, __pb, v404);
              v571 = (llvm::Value *)v442;
              if (v442) {
                BOOL v443 = *(unsigned __int8 *)(v442 + 16) >= 0x1Cu;
              }
              else {
                BOOL v443 = 0;
              }
              if (!v443) {
                goto LABEL_680;
              }
              (*(void (**)(void *, uint64_t, const char **, void *, void **))(*v605 + 16))(v605, v442, &v589, v601, v602);
              if (v599)
              {
                uint64_t v516 = v598;
                uint64_t v517 = v598 + 16 * v599;
                do
                {
                  llvm::Instruction::setMetadata(v571, *(_DWORD *)v516, *(llvm::MDNode **)(v516 + 8));
                  v516 += 16;
                }
                while (v516 != v517);
              }
              if (!v372) {
LABEL_856:
              }
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
            }
LABEL_681:
            if (v372 == 1)
            {
              __int16 v597 = 257;
              v444 = *(llvm::ConstantInt **)(*(void *)v603 + 1984);
              unsigned int v445 = *(_DWORD *)(*(void *)v603 + 1992);
              unsigned int v590 = v445 >> 8;
              if (v445 >> 8 > 0x40) {
                operator new[]();
              }
              v589 = 0;
              v446 = (unsigned __int8 *)llvm::ConstantInt::get(v444, (llvm::LLVMContext *)&v589, v373);
              if (v590 >= 0x41 && v589) {
                MEMORY[0x1D25D9CB0](v589, 0x1000C8000313F17);
              }
              v447 = sub_1CB8445F4((uint64_t)&v598, __pb, v446, (uint64_t)&v593);
            }
            else
            {
              if (*(unsigned char *)a4) {
                char v448 = (_BYTE)v372 - 1;
              }
              else {
                char v448 = 0;
              }
              unsigned int v594 = v372;
              if (v372 >= 0x41) {
                operator new[]();
              }
              v593 = (void *)(1 << v448);
              unint64_t v449 = llvm::ConstantInt::get(v603, (llvm::LLVMContext *)&v593, v373);
              if (v594 >= 0x41 && v593) {
                MEMORY[0x1D25D9CB0](v593, 0x1000C8000313F17);
              }
              __int16 v597 = 257;
              uint64_t v450 = sub_1CBF52474((uint64_t)&v598, v571, (uint64_t)v449, (uint64_t)&v593);
              uint64_t v451 = llvm::IntegerType::get(v603, v372);
              uint64_t v453 = *(llvm::ConstantInt **)v451;
              unsigned int v454 = *(_DWORD *)(v451 + 8);
              unsigned int v590 = v454 >> 8;
              if (v454 >> 8 >= 0x41) {
                operator new[]();
              }
              v589 = 0;
              v455 = llvm::ConstantInt::get(v453, (llvm::LLVMContext *)&v589, v452);
              if (v590 >= 0x41 && v589) {
                MEMORY[0x1D25D9CB0](v589, 0x1000C8000313F17);
              }
              __int16 v592 = 257;
              v447 = sub_1CB845F20((uint64_t)&v598, 33, v450, (uint64_t)v455, (uint64_t)&v589);
            }
            sub_1CD1290BC((uint64_t)v447, (uint64_t)v18);
          }
          LODWORD(v19) = 0;
          int v6 = v533;
          a5 = v582;
          a3 = v544;
          a2 = v534;
          uint64_t v7 = v532;
          uint64_t v9 = v89;
          uint64_t v10 = v88;
          uint64_t v11 = (uint64_t *)v557;
          uint64_t v12 = v87;
          char v13 = v86;
          goto LABEL_85;
        default:
          goto LABEL_15;
      }
    }
LABEL_17:
    uint64_t v8 = v15;
  }
  while (!*a2);
  LOBYTE(v6) = 1;
  return v6 & 1;
}

uint64_t sub_1CCEBCA64(llvm::Constant *this)
{
  uint64_t result = 0;
  if (this && *((unsigned __int8 *)this + 16) <= 0x14u)
  {
    int v3 = *(_DWORD *)(*(void *)this + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      while (1)
      {
        uint64_t result = (uint64_t)llvm::Constant::getAggregateElement(this, v4);
        if (!result) {
          break;
        }
        if (*(unsigned char *)(result + 16) != 16) {
          return 0;
        }
        uint64_t v4 = (llvm::Type *)(v4 + 1);
        if (v3 == v4) {
          return 1;
        }
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void sub_1CCEBCAE4(llvm *a1)
{
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeScalarEvolutionWrapperPassPass(a1, v2);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  operator new();
}

uint64_t sub_1CCEBCBA4(uint64_t a1, char a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCF7F88;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F2640CD0;
  *(unsigned char *)(a1 + 28) = a2;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF7F90, memory_order_acquire) != -1)
  {
    v6[0] = sub_1CCEBCAE4;
    v6[1] = &PassRegistry;
    uint64_t v5 = v6;
    std::__call_once(&qword_1EBCF7F90, &v5, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

uint64_t sub_1CCEBCC58(uint64_t a1, uint64_t a2)
{
  uint64_t v114 = *MEMORY[0x1E4F143B8];
  if (byte_1EBCF8018)
  {
    char v2 = 0;
    return v2 & 1;
  }
  *(void *)a1 = *(void *)(a2 + 40) + 272;
  uint64_t v78 = a2 + 72;
  if (*(void *)(a2 + 80) != a2 + 72) {
    llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry();
  }
  uint64_t v80 = a1 + 64;
  sub_1CD782990((_DWORD *)(a1 + 64));
  sub_1CD782990((_DWORD *)(a1 + 88));
  sub_1CD77A434(a1 + 8, &v101);
  uint64_t v4 = v90;
  int v86 = v90;
  uint64_t v5 = v102;
  if (v102 != v101)
  {
    LODWORD(v73) = v103;
    uint64_t v4 = malloc_type_malloc(8 * v103, 0x4065EBACuLL);
    if (!v4) {
      goto LABEL_146;
    }
    goto LABEL_143;
  }
  uint64_t v87 = v90;
  int v6 = v102;
  while (2)
  {
    unsigned int v7 = v104;
    LODWORD(v88) = v103;
    if (v5 == v6) {
      unsigned int v8 = v104;
    }
    else {
      unsigned int v8 = v103;
    }
    if (v8)
    {
      memmove(v4, v5, 8 * v8);
      unsigned int v7 = v104;
    }
    HIDWORD(v88) = v7;
    int v89 = v105;
    unint64_t v92 = 0;
    uint64_t v93 = 0;
    __p = 0;
    sub_1CBF340A8(&__p, v106, v107, 0xAAAAAAAAAAAAAAABLL * ((v107 - (unsigned char *)v106) >> 3));
    uint64_t v9 = v82;
    uint64_t v10 = __src;
    if (__src == v108)
    {
      unint64_t v81 = v82;
      uint64_t v11 = __src;
    }
    else
    {
      unsigned int v74 = v110;
      uint64_t v9 = malloc_type_malloc(8 * v110, 0x4065EBACuLL);
      if (!v9)
      {
        if (v74) {
          goto LABEL_151;
        }
        uint64_t v9 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v9) {
          goto LABEL_151;
        }
      }
      unint64_t v81 = v9;
      uint64_t v11 = v108;
      uint64_t v10 = __src;
    }
    if (v10 == v11) {
      unsigned int v12 = v111;
    }
    else {
      unsigned int v12 = v110;
    }
    if (v12) {
      memmove(v9, v10, 8 * v12);
    }
    uint64_t v84 = 0;
    uint64_t v85 = 0;
    uint64_t v83 = 0;
    sub_1CBF340A8(&v83, v112, v113, 0xAAAAAAAAAAAAAAABLL * ((v113 - (unsigned char *)v112) >> 3));
    char v2 = 0;
    while (1)
    {
      if (v92 - (unsigned char *)__p != v84 - v83) {
        goto LABEL_35;
      }
      if (__p == v92) {
        break;
      }
      char v13 = v83 + 8;
      uint64_t v14 = (char *)__p + 8;
      while (1)
      {
        uint64_t v15 = v14 - 8;
        if (*((void *)v14 - 1) != *((void *)v13 - 1)) {
          break;
        }
        int v16 = v13[8];
        if (v14[8]) {
          BOOL v17 = v16 == 0;
        }
        else {
          BOOL v17 = 1;
        }
        if (v17)
        {
          if ((v14[8] == 0) == (v16 != 0)) {
            break;
          }
        }
        else if (*(void *)v14 != *(void *)v13)
        {
          break;
        }
        v13 += 24;
        v14 += 24;
        if (v15 + 24 == v92) {
          goto LABEL_111;
        }
      }
LABEL_35:
      uint64_t v18 = **((void **)v92 - 3);
      uint64_t v19 = v18 + 40;
      uint64_t v20 = *(void *)(v18 + 48);
      if (v20 != v19)
      {
        do
        {
          uint64_t v21 = *(void *)(v20 + 8);
          if (v20) {
            uint64_t v22 = v20 - 24;
          }
          else {
            uint64_t v22 = 0;
          }
          if ((*(_DWORD *)(*(void *)v22 + 8) & 0xFD) != 0xD)
          {
LABEL_83:
            LOBYTE(v50) = 0;
            goto LABEL_84;
          }
          v100[0] = 0;
          __int16 v94 = 0;
          int v95 = v100;
          uint64_t v96 = (uint64_t)&v94;
          int v23 = *(unsigned __int8 *)(v22 + 16);
          if (v23 == 5)
          {
            if (*(_WORD *)(v22 + 18) == 13
              && sub_1CBC5BEAC((void **)&v95, *(void *)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF)))&& (sub_1CBC5BEAC((void **)&v96, *(void *)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF) + 32)) & 1) != 0)
            {
LABEL_49:
              if (*(void *)v100[0] != *(void *)v94) {
                goto LABEL_69;
              }
              uint64_t v24 = *(llvm::ScalarEvolution **)(a1 + 16);
              unint64_t Unknown = llvm::ScalarEvolution::getUnknown(v24, v100[0]);
              unint64_t v26 = llvm::ScalarEvolution::getUnknown(*(llvm::ScalarEvolution **)(a1 + 16), v94);
              int v95 = &v97;
              unint64_t v97 = Unknown;
              long long v98 = (void **)v26;
              uint64_t v96 = 0x200000002;
              uint64_t AddExpr = llvm::ScalarEvolution::getAddExpr((uint64_t)v24, (unint64_t **)&v95, 0, 0);
              if (v95 != &v97) {
                free(v95);
              }
              uint64_t v28 = a1;
              uint64_t v29 = AddExpr;
              uint64_t v30 = (const llvm::Instruction *)v22;
              uint64_t v31 = v80;
              goto LABEL_65;
            }
          }
          else if (v23 == 41 {
                 && sub_1CBC5BEAC((void **)&v95, *(void *)(v22 - 64))
          }
                 && sub_1CBC5BEAC((void **)&v96, *(void *)(v22 - 32)))
          {
            goto LABEL_49;
          }
          int v95 = v100;
          uint64_t v96 = (uint64_t)&v94;
          int v32 = *(unsigned __int8 *)(v22 + 16);
          if (v32 == 5)
          {
            if (*(_WORD *)(v22 + 18) != 15
              || !sub_1CBC5BEAC((void **)&v95, *(void *)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF)))|| (sub_1CBC5BEAC((void **)&v96, *(void *)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF) + 32)) & 1) == 0)
            {
              goto LABEL_69;
            }
          }
          else if (v32 != 43 {
                 || !sub_1CBC5BEAC((void **)&v95, *(void *)(v22 - 64))
          }
                 || !sub_1CBC5BEAC((void **)&v96, *(void *)(v22 - 32)))
          {
            goto LABEL_69;
          }
          if (*(void *)v100[0] == *(void *)v94)
          {
            uint64_t v33 = *(llvm::ScalarEvolution **)(a1 + 16);
            unint64_t v34 = llvm::ScalarEvolution::getUnknown(v33, v100[0]);
            unint64_t v35 = llvm::ScalarEvolution::getUnknown(*(llvm::ScalarEvolution **)(a1 + 16), v94);
            int v95 = &v97;
            unint64_t v97 = v34;
            long long v98 = (void **)v35;
            uint64_t v96 = 0x200000002;
            uint64_t v36 = llvm::ScalarEvolution::getAddExpr((uint64_t)v33, (unint64_t **)&v95, 0, 0);
            if (v95 != &v97) {
              free(v95);
            }
            uint64_t v28 = a1;
            uint64_t v31 = a1 + 88;
            uint64_t v29 = v36;
            uint64_t v30 = (const llvm::Instruction *)v22;
LABEL_65:
            uint64_t v37 = sub_1CCEC16D4(v28, v29, v30, v31);
            if (v37)
            {
              int v38 = v37;
              unint64_t v39 = operator new(0x60uLL);
              unint64_t v40 = (llvm::Value *)(v39 + 8);
              v39[13] = v39[13] & 0x38000000 | 1;
              *(void *)unint64_t v39 = 0;
              *((void *)v39 + 1) = 0;
              *((void *)v39 + 2) = 0;
              *((void *)v39 + 3) = v39 + 8;
              unint64_t v41 = *(llvm::Type **)v22;
              __int16 v99 = 257;
              unint64_t v42 = (int32x2_t ****)llvm::SExtInst::SExtInst((llvm::SExtInst *)(v39 + 8), v38, v41, (const char **)&v95, (llvm::Instruction *)v22);
              llvm::Value::takeName(v42, (llvm::Value *)v22);
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v22, v40, (llvm::Value *)1);
              long long v98 = 0;
              llvm::RecursivelyDeleteTriviallyDeadInstructions(v22, 0, 0, (uint64_t)&v95);
              if (v98 == &v95)
              {
                (*((void (**)(void **))v95 + 4))(&v95);
              }
              else if (v98)
              {
                (*((void (**)(void))*v98 + 5))();
              }
              LOBYTE(v50) = 1;
              goto LABEL_84;
            }
          }
LABEL_69:
          unsigned int v43 = *(unsigned __int8 *)(v22 + 16);
          HIDWORD(v45) = v43 - 41;
          LODWORD(v45) = v43 - 41;
          unsigned int v44 = v45 >> 1;
          int v46 = (1 << (v45 >> 1)) & 0x47;
          if (v44 > 6 || v46 == 0) {
            goto LABEL_83;
          }
          unsigned int v48 = v43 - 28;
          unsigned int v49 = v43 - 28;
          if (v43 <= 0x1B) {
            unsigned int v49 = *(unsigned __int16 *)(v22 + 18);
          }
          if (v49 != 13 || (*(unsigned char *)(v22 + 17) & 4) == 0) {
            goto LABEL_77;
          }
          int v51 = *(_DWORD *)(v22 + 20);
          if ((v51 & 0x40000000) != 0)
          {
            if (!**(void **)(v22 - 8)) {
              goto LABEL_77;
            }
            v100[0] = **(llvm::Value ***)(v22 - 8);
            uint64_t v52 = *(llvm::Value ***)(v22 - 8);
          }
          else
          {
            uint64_t v52 = (llvm::Value **)(v22 - 32 * (v51 & 0x7FFFFFF));
            if (!*v52) {
              goto LABEL_77;
            }
            v100[0] = *v52;
          }
          uint64_t v55 = v52[4];
          if (v55)
          {
            __int16 v94 = v55;
            int v56 = sub_1CC16BAFC(v22, 1, 0);
            LOBYTE(v50) = 0;
            if (v56)
            {
              unint64_t v57 = *(llvm::ScalarEvolution **)(a1 + 16);
              unint64_t v58 = llvm::ScalarEvolution::getUnknown(v57, v100[0]);
              unint64_t v59 = llvm::ScalarEvolution::getUnknown(*(llvm::ScalarEvolution **)(a1 + 16), v94);
              int v95 = &v97;
              unint64_t v97 = v58;
              long long v98 = (void **)v59;
              uint64_t v96 = 0x200000002;
              uint64_t v60 = (void *)llvm::ScalarEvolution::getAddExpr((uint64_t)v57, (unint64_t **)&v95, 0, 0);
              if (v95 != &v97) {
                free(v95);
              }
              int v95 = v60;
              uint64_t v61 = v80;
              goto LABEL_106;
            }
            goto LABEL_84;
          }
LABEL_77:
          LOBYTE(v50) = 0;
          if (v44 > 6 || ((1 << v44) & 0x47) == 0) {
            goto LABEL_84;
          }
          if (v43 <= 0x1B) {
            unsigned int v48 = *(unsigned __int16 *)(v22 + 18);
          }
          if (v48 != 15 || (*(unsigned char *)(v22 + 17) & 4) == 0) {
            goto LABEL_83;
          }
          int v53 = *(_DWORD *)(v22 + 20);
          if ((v53 & 0x40000000) != 0)
          {
            uint64_t v50 = **(llvm::Value ***)(v22 - 8);
            if (!v50) {
              goto LABEL_84;
            }
            v100[0] = **(llvm::Value ***)(v22 - 8);
            uint64_t v54 = *(llvm::Value ***)(v22 - 8);
          }
          else
          {
            uint64_t v54 = (llvm::Value **)(v22 - 32 * (v53 & 0x7FFFFFF));
            if (!*v54) {
              goto LABEL_83;
            }
            v100[0] = *v54;
          }
          uint64_t v50 = v54[4];
          if (v50)
          {
            __int16 v94 = v50;
            int v62 = sub_1CC16BAFC(v22, 1, 0);
            LOBYTE(v50) = 0;
            if (v62)
            {
              uint64_t v63 = *(llvm::ScalarEvolution **)(a1 + 16);
              unint64_t v64 = llvm::ScalarEvolution::getUnknown(v63, v100[0]);
              unint64_t v65 = llvm::ScalarEvolution::getUnknown(*(llvm::ScalarEvolution **)(a1 + 16), v94);
              int v95 = &v97;
              unint64_t v97 = v64;
              long long v98 = (void **)v65;
              uint64_t v96 = 0x200000002;
              int v66 = (void *)llvm::ScalarEvolution::getAddExpr((uint64_t)v63, (unint64_t **)&v95, 0, 0);
              if (v95 != &v97) {
                free(v95);
              }
              int v95 = v66;
              uint64_t v61 = a1 + 88;
LABEL_106:
              int v67 = sub_1CD782B70(v61, (uint64_t *)&v95);
              unint64_t v68 = *((unsigned int *)v67 + 4);
              if (v68 >= *((unsigned int *)v67 + 5)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              LOBYTE(v50) = 0;
              *(void *)(v67[1] + 8 * v68) = v22;
              ++*((_DWORD *)v67 + 4);
            }
          }
LABEL_84:
          v2 |= v50;
          uint64_t v20 = v21;
        }
        while (v21 != v19);
      }
      sub_1CD77B290((char *)&v86);
    }
LABEL_111:
    if (v83)
    {
      uint64_t v84 = v83;
      operator delete(v83);
    }
    if (v81 != v82) {
      free(v81);
    }
    if (__p)
    {
      unint64_t v92 = (char *)__p;
      operator delete(__p);
    }
    if (v87 != v86) {
      free(v87);
    }
    if (v112)
    {
      int v113 = v112;
      operator delete(v112);
    }
    if (__src != v108) {
      free(__src);
    }
    if (v106)
    {
      unsigned int v107 = v106;
      operator delete(v106);
    }
    if (v102 != v101) {
      free(v102);
    }
    if (byte_1EBCF80D8)
    {
      uint64_t v69 = *(void *)(a2 + 80);
LABEL_129:
      if (v69 != v78)
      {
        uint64_t v70 = v69 - 24;
        if (!v69) {
          uint64_t v70 = 0;
        }
        uint64_t v71 = v70 + 40;
        for (uint64_t i = *(void *)(v70 + 48); ; uint64_t i = *(void *)(i + 8))
        {
          if (i == v71)
          {
            uint64_t v69 = *(void *)(v69 + 8);
            goto LABEL_129;
          }
          uint64_t v73 = i ? (llvm::Value *)(i - 24) : 0;
          if (!*((void *)v73 + 1) && llvm::wouldInstructionBeTriviallyDead((uint64_t)v73, 0)) {
            break;
          }
        }
        int v86 = 0;
        uint64_t v87 = 0;
        uint64_t v88 = 0;
        sub_1CD490168((uint64_t)&v101, (uint64_t)&v86);
        __int16 v75 = sub_1CB8E509C((llvm::raw_ostream *)&v101, "Dead instruction detected!\n");
        int v76 = sub_1CD4B4340(v75, v73);
        sub_1CB8E509C(v76, "\n");
        __break(1u);
LABEL_146:
        if (v73 || (uint64_t v4 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0) {
LABEL_151:
        }
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
LABEL_143:
        uint64_t v87 = v4;
        int v6 = v101;
        uint64_t v5 = v102;
        continue;
      }
    }
    return v2 & 1;
  }
}

uint64_t sub_1CCEC016C(uint64_t a1)
{
  return a1;
}

void sub_1CCEC01B8()
{
}

void sub_1CCEC01FC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CCEC0234(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)llvm::ScalarEvolutionWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v3);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);

  sub_1CB843600(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
}

uint64_t sub_1CCEC02F8(llvm::FunctionPass *a1, uint64_t a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if ((llvm::FunctionPass::skipFunction(a1, (llvm::LLVMContextImpl ****)a2) & 1) == 0)
  {
    uint64_t v5 = (uint64_t *)*((void *)a1 + 1);
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    if (v6 == v7)
    {
LABEL_6:
      uint64_t v8 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v6 != &llvm::DominatorTreeWrapperPass::ID)
      {
        v6 += 16;
        if (v6 == v7) {
          goto LABEL_6;
        }
      }
      uint64_t v8 = *(void *)(v6 + 8);
    }
    (*(void (**)(uint64_t, void *))(*(void *)v8 + 96))(v8, &llvm::DominatorTreeWrapperPass::ID);
    uint64_t v9 = (uint64_t *)*((void *)a1 + 1);
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    if (v10 == v11)
    {
LABEL_11:
      uint64_t v12 = 0;
    }
    else
    {
      while (*(char **)v10 != llvm::ScalarEvolutionWrapperPass::ID)
      {
        v10 += 16;
        if (v10 == v11) {
          goto LABEL_11;
        }
      }
      uint64_t v12 = *(void *)(v10 + 8);
    }
    (*(void (**)(uint64_t, char *))(*(void *)v12 + 96))(v12, llvm::ScalarEvolutionWrapperPass::ID);
    char v13 = (uint64_t *)*((void *)a1 + 1);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    if (v14 == v15)
    {
LABEL_16:
      uint64_t v16 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v14 != &llvm::LoopInfoWrapperPass::ID)
      {
        v14 += 16;
        if (v14 == v15) {
          goto LABEL_16;
        }
      }
      uint64_t v16 = *(void *)(v14 + 8);
    }
    (*(void (**)(uint64_t, void *))(*(void *)v16 + 96))(v16, &llvm::LoopInfoWrapperPass::ID);
    BOOL v17 = (uint64_t *)*((void *)a1 + 1);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    if (v18 == v19)
    {
LABEL_21:
      uint64_t v20 = 0;
    }
    else
    {
      while (*(char **)v18 != llvm::TargetLibraryInfoWrapperPass::ID)
      {
        v18 += 16;
        if (v18 == v19) {
          goto LABEL_21;
        }
      }
      uint64_t v20 = *(void *)(v18 + 8);
    }
    uint64_t v21 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v20 + 96))(v20, llvm::TargetLibraryInfoWrapperPass::ID);
    uint64_t v22 = v21 + 32;
    if (!*(unsigned char *)(v21 + 232))
    {
      uint64_t v23 = *(void *)(a2 + 40) + 216;
      __int16 v27 = 260;
      v26[0] = v23;
      uint64_t v24 = v21 + 32;
      llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v26);
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      int v39 = 0;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      *(void *)&long long v25 = -1;
      *((void *)&v25 + 1) = -1;
      *(_OWORD *)__src = v25;
      long long v31 = v25;
      long long v32 = v25;
      long long v33 = v25;
      long long v34 = v25;
      long long v35 = v25;
      *(_OWORD *)uint64_t v36 = v25;
      *(void *)&v36[13] = -1;
      sub_1CC153974((uint64_t)__src, (int *)__p);
      sub_1CD4D04B8(v24, (uint64_t)__src);
      sub_1CD4CFA4C((uint64_t *)__src);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v22 = v24;
    }
    sub_1CC1569E8(__src, v22);
  }
  return 0;
}

uint64_t *sub_1CCEC0824(uint64_t a1, const Function *a2)
{
  int v3 = *(uint64_t **)(*(void *)a1 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(char **)v4 != llvm::TargetTransformInfoWrapperPass::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  uint64_t v7 = (llvm::TargetTransformInfoWrapperPass *)(*(uint64_t (**)(uint64_t, char *))(*(void *)v6 + 96))(v6, llvm::TargetTransformInfoWrapperPass::ID);

  return llvm::TargetTransformInfoWrapperPass::getTTI(v7, a2);
}

void sub_1CCEC08C4(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = (void **)a1;
  unint64_t v7 = *(unsigned int *)(*(void *)a3 + 8);
  unint64_t v8 = v7 >> 8;
  unsigned int v9 = *((unsigned __int8 *)a3 + 16);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(void *)a3 + 8) >> 8;
  unsigned int v10 = v7 >> 8;
  if (v9 - 21 <= 6)
  {
    if (v10 > 0x40) {
      operator new[]();
    }
    *(void *)a1 = 0;
    return;
  }
  int v11 = a6;
  if (v10 > 0x40) {
    operator new[]();
  }
  *(void *)a1 = 0;
  if (v9 == 16)
  {
    uint64_t v16 = (const void **)(a3 + 6);
    unsigned int v17 = a3[8];
    if (v17 <= 0x40)
    {
      uint64_t v18 = *v16;
      *(void *)a1 = *v16;
      *(_DWORD *)(a1 + 8) = v17;
      if (!v18) {
        return;
      }
      goto LABEL_80;
    }
    if (v16 != (const void **)a1)
    {
      llvm::APInt::reallocate(a1, a3[8]);
      uint64_t v27 = *((unsigned int *)v6 + 2);
      if (v27 <= 0x40)
      {
        void *v6 = (void *)*v16;
LABEL_79:
        if (!*v6) {
          return;
        }
        goto LABEL_80;
      }
      memcpy(*v6, *v16, ((unint64_t)(v27 + 63) >> 3) & 0x3FFFFFF8);
      LODWORD(v8) = *((_DWORD *)v6 + 2);
    }
    goto LABEL_71;
  }
  if (v9 >= 0x1C && v9 - 59 >= 0xFFFFFFEE)
  {
    if (v9 > 0x39 || ((1 << v9) & 0x2000A0000000000) == 0) {
      goto LABEL_71;
    }
    uint64_t v19 = *((void *)a3 - 8);
    uint64_t v20 = *((void *)a3 - 4);
    if (v9 == 57)
    {
      if (!llvm::haveNoCommonBitsSet(*((llvm **)a3 - 8), *((const llvm::Value **)a3 - 4), *(void ***)(a2 + 232), 0, (llvm::AssumptionCache *)a3, *(const llvm::Instruction **)(a2 + 240), (const llvm::DominatorTree *)1))goto LABEL_71; {
      unsigned int v9 = *((unsigned __int8 *)a3 + 16);
      }
    }
    if (v9 == 41 && v11 && (a5 & 1) == 0)
    {
      if (*(unsigned char *)(v19 + 16) == 16 && v19)
      {
        uint64_t v21 = (void *)(v19 + 24);
        unsigned int v22 = *(_DWORD *)(v19 + 32);
        unsigned int v23 = v22 - 1;
        if (v22 >= 0x41) {
          uint64_t v21 = (void *)(*v21 + 8 * (v23 >> 6));
        }
        if (((*v21 >> v23) & 1) == 0) {
          goto LABEL_43;
        }
      }
      if (*(unsigned char *)(v20 + 16) == 16 && v20)
      {
        uint64_t v24 = (void *)(v20 + 24);
        unsigned int v25 = *(_DWORD *)(v20 + 32);
        unsigned int v26 = v25 - 1;
        if (v25 >= 0x41) {
          uint64_t v24 = (void *)(*v24 + 8 * (v26 >> 6));
        }
        if (((*v24 >> v26) & 1) == 0) {
          goto LABEL_43;
        }
      }
    }
    else if ((v9 | 2) != 0x2B)
    {
      goto LABEL_43;
    }
    if (a4 && (*((unsigned char *)a3 + 17) & 4) == 0 || a5 && (*((unsigned char *)a3 + 17) & 2) == 0) {
      goto LABEL_71;
    }
LABEL_43:
    unint64_t v30 = *(unsigned int *)(a2 + 8);
    sub_1CCEC08C4(&__src, a2, *((void *)a3 - 8), a4, a5, 0);
    long long v31 = __src;
    if (v57 >= 0x41)
    {
      int v32 = 0;
      int64_t v33 = ((unint64_t)v57 + 63) >> 6;
      do
      {
        BOOL v34 = v33-- < 1;
        if (v34) {
          break;
        }
        unint64_t v35 = __src[v33];
        v32 += __clz(v35);
      }
      while (!v35);
      unsigned int v36 = v57 | 0xFFFFFFC0;
      if ((v57 & 0x3F) == 0) {
        unsigned int v36 = 0;
      }
      if (v57 - v32 - v36 > 0x40) {
        goto LABEL_52;
      }
      long long v31 = (void *)*__src;
    }
    if (!v31)
    {
      sub_1CD42769C(a2, v30);
      sub_1CCEC08C4(&v58, a2, *((void *)a3 - 4), a4, a5, 0);
      if (v57 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      p_src = (void *)v58;
      __src = (void *)v58;
      unsigned int v50 = v59;
      unsigned int v57 = v59;
      if (*((unsigned char *)a3 + 16) == 43)
      {
        if (v59 > 0x40) {
          operator new[]();
        }
        if (v59) {
          unint64_t v51 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v59;
        }
        else {
          unint64_t v51 = 0;
        }
        unint64_t v58 = v51 & ~v58;
        llvm::APInt::operator++((uint64_t)&v58);
        unsigned int v50 = v59;
        p_src = (void *)v58;
        unsigned int v59 = 0;
        if (v57 > 0x40 && __src)
        {
          MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
          __src = p_src;
          unsigned int v57 = v50;
          if (v59 >= 0x41 && v58)
          {
            MEMORY[0x1D25D9CB0](v58, 0x1000C8000313F17);
            unsigned int v50 = v57;
            p_src = __src;
          }
        }
        else
        {
          __src = (void *)v58;
          unsigned int v57 = v50;
        }
      }
      if (v50 >= 0x41)
      {
        int v52 = 0;
        int64_t v53 = ((unint64_t)v50 + 63) >> 6;
        do
        {
          BOOL v34 = v53-- < 1;
          if (v34) {
            break;
          }
          unint64_t v54 = p_src[v53];
          v52 += __clz(v54);
        }
        while (!v54);
        unsigned int v55 = v50 | 0xFFFFFFC0;
        if ((v50 & 0x3F) == 0) {
          unsigned int v55 = 0;
        }
        if (v50 - v52 - v55 > 0x40) {
          goto LABEL_52;
        }
      }
      else
      {
        p_src = &__src;
      }
      if (!*p_src) {
        sub_1CD42769C(a2, v30);
      }
    }
LABEL_52:
    void *v6 = __src;
    LODWORD(v8) = v57;
    *((_DWORD *)v6 + 2) = v57;
    goto LABEL_71;
  }
  if (v9 == 68)
  {
    unsigned int v39 = a3[5];
    if ((v39 & 0x40000000) != 0) {
      long long v40 = (unsigned int *)*((void *)a3 - 1);
    }
    else {
      long long v40 = &a3[-8 * (v39 & 0x7FFFFFF)];
    }
    sub_1CCEC08C4(&__src, a2, *(void *)v40, 1, a5, a6);
    llvm::APInt::sext((uint64_t)&__src, v7 >> 8, (uint64_t)&v58);
  }
  else
  {
    if (v9 == 67)
    {
      unsigned int v37 = a3[5];
      if ((v37 & 0x40000000) != 0) {
        uint64_t v38 = (unsigned int *)*((void *)a3 - 1);
      }
      else {
        uint64_t v38 = &a3[-8 * (v37 & 0x7FFFFFF)];
      }
      sub_1CCEC08C4(&__src, a2, *(void *)v38, 0, 1, 0);
      unint64_t v41 = (unint64_t)__src;
    }
    else
    {
      if (v9 != 66) {
        goto LABEL_71;
      }
      unsigned int v28 = a3[5];
      if ((v28 & 0x40000000) != 0) {
        char v29 = (unsigned int *)*((void *)a3 - 1);
      }
      else {
        char v29 = &a3[-8 * (v28 & 0x7FFFFFF)];
      }
      sub_1CCEC08C4(&__src, a2, *(void *)v29, a4, a5, a6);
      if (v57 >= 0x41) {
        long long v42 = __src;
      }
      else {
        long long v42 = (unint64_t *)&__src;
      }
      unint64_t v41 = *v42;
    }
    unsigned int v59 = v7 >> 8;
    if (v7 <= 0xFF) {
      unint64_t v43 = 0;
    }
    else {
      unint64_t v43 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v7);
    }
    unint64_t v58 = v43 & v41;
  }
  void *v6 = (void *)v58;
  LODWORD(v8) = v59;
  *((_DWORD *)v6 + 2) = v59;
  unsigned int v59 = 0;
  if (v57 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
LABEL_71:
  if (v8 < 0x41) {
    goto LABEL_79;
  }
  int v44 = 0;
  int64_t v45 = ((unint64_t)v8 + 63) >> 6;
  do
  {
    BOOL v34 = v45-- < 1;
    if (v34) {
      break;
    }
    unint64_t v46 = *((void *)*v6 + v45);
    v44 += __clz(v46);
  }
  while (!v46);
  int v47 = v8 | 0xFFFFFFC0;
  if ((v8 & 0x3F) == 0) {
    int v47 = 0;
  }
  if ((v8 - v44 - v47) <= 0x40)
  {
    uint64_t v6 = (void **)*v6;
    goto LABEL_79;
  }
LABEL_80:
  unsigned int v48 = *(_DWORD *)(a2 + 8);
  if (v48 >= *(_DWORD *)(a2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a2 + 8 * v48) = a3;
  ++*(_DWORD *)(a2 + 8);
}

llvm::Value *sub_1CCEC1164(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(llvm::ConstantExpr **)(*(void *)a1 + 8 * a2);
  if (a2)
  {
    uint64_t v5 = a2;
    unsigned int v6 = *((unsigned __int8 *)v4 + 16);
    if (v4) {
      BOOL v7 = v6 >= 0x1C;
    }
    else {
      BOOL v7 = 0;
    }
    if (!v7 || v6 - 79 < 0xFFFFFFF3)
    {
LABEL_23:
      uint64_t v15 = *((void *)v4 - 8);
      uint64_t v16 = a2 - 1;
      uint64_t v17 = *(void *)(v3 + 8 * v16);
      uint64_t v18 = sub_1CCEC158C(a1, *((llvm::ConstantExpr **)v4 + 4 * (v15 == v17) - 8));
      uint64_t v19 = sub_1CCEC1164(a1, v16);
      char v20 = *((unsigned char *)v4 + 16) - 28;
      if (v15 != v17)
      {
        if ((*((unsigned char *)v4 + 23) & 0x10) == 0)
        {
          uint64_t v39 = 0;
          uint64_t v38 = &byte_1CFBCE98E;
          goto LABEL_40;
        }
        uint64_t v21 = ***(void ***)v4;
        uint64_t v22 = *(void *)(v21 + 152);
        uint64_t v23 = *(unsigned int *)(v21 + 168);
        if (v23)
        {
          LODWORD(v24) = (v23 - 1) & ((v4 >> 4) ^ (v4 >> 9));
          unsigned int v25 = (llvm::ConstantExpr **)(v22 + 16 * v24);
          unsigned int v26 = *v25;
          if (*v25 == v4)
          {
LABEL_39:
            unsigned int v37 = v25[1];
            uint64_t v40 = *(void *)v37;
            uint64_t v38 = (char *)v37 + 16;
            uint64_t v39 = v40;
LABEL_40:
            __int16 v49 = 261;
            int v47 = v38;
            uint64_t v48 = v39;
            uint64_t v41 = *(void *)(a1 + 224);
            long long v42 = v18;
LABEL_44:
            uint64_t result = llvm::BinaryOperator::Create(v20, v42, v19, &v47, v41);
            goto LABEL_45;
          }
          int v27 = 1;
          while (v26 != (llvm::ConstantExpr *)-4096)
          {
            int v28 = v24 + v27++;
            uint64_t v24 = v28 & (v23 - 1);
            unsigned int v26 = *(llvm::ConstantExpr **)(v22 + 16 * v24);
            if (v26 == v4)
            {
              unsigned int v25 = (llvm::ConstantExpr **)(v22 + 16 * v24);
              goto LABEL_39;
            }
          }
        }
        unsigned int v25 = (llvm::ConstantExpr **)(v22 + 16 * v23);
        goto LABEL_39;
      }
      if ((*((unsigned char *)v4 + 23) & 0x10) == 0)
      {
        uint64_t v45 = 0;
        int v44 = &byte_1CFBCE98E;
        goto LABEL_43;
      }
      uint64_t v29 = ***(void ***)v4;
      uint64_t v30 = *(void *)(v29 + 152);
      uint64_t v31 = *(unsigned int *)(v29 + 168);
      if (v31)
      {
        LODWORD(v32) = (v31 - 1) & ((v4 >> 4) ^ (v4 >> 9));
        int64_t v33 = (llvm::ConstantExpr **)(v30 + 16 * v32);
        BOOL v34 = *v33;
        if (*v33 == v4)
        {
LABEL_42:
          unint64_t v43 = v33[1];
          uint64_t v46 = *(void *)v43;
          int v44 = (char *)v43 + 16;
          uint64_t v45 = v46;
LABEL_43:
          __int16 v49 = 261;
          int v47 = v44;
          uint64_t v48 = v45;
          uint64_t v41 = *(void *)(a1 + 224);
          long long v42 = (void *)v19;
          uint64_t v19 = (uint64_t)v18;
          goto LABEL_44;
        }
        int v35 = 1;
        while (v34 != (llvm::ConstantExpr *)-4096)
        {
          int v36 = v32 + v35++;
          uint64_t v32 = v36 & (v31 - 1);
          BOOL v34 = *(llvm::ConstantExpr **)(v30 + 16 * v32);
          if (v34 == v4)
          {
            int64_t v33 = (llvm::ConstantExpr **)(v30 + 16 * v32);
            goto LABEL_42;
          }
        }
      }
      int64_t v33 = (llvm::ConstantExpr **)(v30 + 16 * v31);
      goto LABEL_42;
    }
    unsigned int v9 = *(_DWORD *)(a1 + 88);
    while (1)
    {
      if (v9 >= *(_DWORD *)(a1 + 92)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a1 + 80) + 8 * v9) = v4;
      unsigned int v9 = *(_DWORD *)(a1 + 88) + 1;
      *(_DWORD *)(a1 + 88) = v9;
      *(void *)(*(void *)a1 + 8 * v5) = 0;
      uint64_t v3 = *(void *)a1;
      uint64_t v10 = (v5 - 1);
      uint64_t v4 = *(llvm::ConstantExpr **)(*(void *)a1 + 8 * v10);
      if (v5 == 1) {
        break;
      }
      unsigned int v11 = *((unsigned __int8 *)v4 + 16);
      --v5;
      if (v4) {
        BOOL v12 = v11 >= 0x1C;
      }
      else {
        BOOL v12 = 0;
      }
      if (!v12 || v11 - 79 < 0xFFFFFFF3)
      {
        a2 = v5;
        uint64_t v5 = v10;
        goto LABEL_23;
      }
    }
  }
  uint64_t result = sub_1CCEC158C(a1, v4);
  uint64_t v5 = 0;
LABEL_45:
  *(void *)(*(void *)a1 + 8 * v5) = result;
  return result;
}

llvm::Value *sub_1CCEC1414(uint64_t a1, llvm::Type *a2, const llvm::APFloat *a3)
{
  if (a2)
  {
    uint64_t v4 = *(unsigned char **)(*(void *)a1 + 8 * a2);
    uint64_t v5 = *((void *)v4 - 8);
    uint64_t v6 = *(void *)(*(void *)a1 + 8 * (a2 - 1));
    uint64_t v7 = sub_1CCEC1414(a1);
    uint64_t v8 = v7;
    unsigned int v9 = *(int32x2_t *****)&v4[32 * (v5 == v6) - 64];
    if (v7 && *(unsigned char *)(v7 + 16) == 16)
    {
      uint64_t v10 = *(unsigned int *)(v7 + 32);
      if (v10 > 0x40)
      {
        int v13 = 0;
        int64_t v14 = (unint64_t)(v10 + 63) >> 6;
        do
        {
          if (v14-- < 1) {
            break;
          }
          unint64_t v16 = *(void *)(*(void *)(v7 + 24) + 8 * v14);
          v13 += __clz(v16);
        }
        while (!v16);
        int v17 = v10 | 0xFFFFFFC0;
        if ((v10 & 0x3F) == 0) {
          int v17 = 0;
        }
        if (v13 + v17 == v10)
        {
LABEL_16:
          if (v4[16] != 43 || v5 != v6) {
            return (llvm::Value *)v9;
          }
        }
      }
      else if (!*(void *)(v7 + 24))
      {
        goto LABEL_16;
      }
    }
    if (v4[16] == 57) {
      char v19 = 13;
    }
    else {
      char v19 = v4[16] - 28;
    }
    __int16 v22 = 257;
    if (v5 == v6)
    {
      char v20 = (void *)v8;
      uint64_t v8 = (uint64_t)v9;
    }
    else
    {
      char v20 = v9;
    }
    unsigned int v9 = (int32x2_t ****)llvm::BinaryOperator::Create(v19, v20, v8, &v21, *(void *)(a1 + 224));
    llvm::Value::takeName(v9, (llvm::Value *)v4);
    return (llvm::Value *)v9;
  }
  unsigned int v11 = ***(llvm::Constant ****)a1;

  return llvm::Constant::getNullValue(v11, a2, a3);
}

llvm::ConstantExpr *sub_1CCEC158C(uint64_t a1, llvm::ConstantExpr *a2)
{
  char v2 = a2;
  uint64_t v3 = *(unsigned int *)(a1 + 88);
  if (!v3) {
    return a2;
  }
  uint64_t v5 = 8 * v3;
  uint64_t v6 = *(void *)(a1 + 80) - 8;
  do
  {
    uint64_t v7 = *(void *)(v6 + v5);
    if (v2 && *((unsigned __int8 *)v2 + 16) <= 0x14u)
    {
      Cast = llvm::ConstantExpr::getCast((llvm::ConstantExpr *)(*(unsigned __int8 *)(v7 + 16) - 28), v2, *(llvm::Constant ****)v7, 0);
    }
    else
    {
      unsigned int v9 = (llvm::ConstantExpr *)llvm::Instruction::clone((llvm::Instruction *)v7);
      Cast = v9;
      int v10 = *((_DWORD *)v9 + 5);
      if ((v10 & 0x40000000) != 0) {
        unsigned int v11 = (llvm::ConstantExpr **)*((void *)v9 - 1);
      }
      else {
        unsigned int v11 = (llvm::ConstantExpr **)((char *)v9 - 32 * (v10 & 0x7FFFFFF));
      }
      if (*v11)
      {
        *(void *)v11[2] = v11[1];
        BOOL v12 = v11[1];
        if (v12) {
          *((void *)v12 + 2) = v11[2];
        }
      }
      *unsigned int v11 = v2;
      uint64_t v15 = (llvm::ConstantExpr *)*((void *)v2 + 1);
      int64_t v14 = (llvm::ConstantExpr ***)((char *)v2 + 8);
      int v13 = v15;
      v11[1] = v15;
      if (v15) {
        *((void *)v13 + 2) = v11 + 1;
      }
      v11[2] = (llvm::ConstantExpr *)v14;
      *int64_t v14 = v11;
      uint64_t v16 = *(void *)(a1 + 224);
      uint64_t v17 = *(void *)(v16 + 40);
      *((void *)v9 + 5) = v17;
      *(_WORD *)(v17 + 18) &= ~0x8000u;
      if ((*((unsigned char *)v9 + 23) & 0x10) != 0)
      {
        uint64_t v20 = *(void *)(v17 + 56);
        if (v20)
        {
          uint64_t v21 = *(llvm::ValueSymbolTable **)(v20 + 104);
          if (v21) {
            llvm::ValueSymbolTable::reinsertValue(v21, Cast);
          }
        }
      }
      uint64_t v19 = *(void *)(v16 + 24);
      uint64_t v18 = (void *)(v16 + 24);
      *((void *)Cast + 3) = v19;
      *((void *)Cast + 4) = v18;
      *(void *)(v19 + 8) = (char *)Cast + 24;
      *uint64_t v18 = (char *)Cast + 24;
    }
    char v2 = Cast;
    v5 -= 8;
  }
  while (v5);
  return Cast;
}

const llvm::Value *sub_1CCEC16D4(uint64_t a1, uint64_t a2, const llvm::Instruction *a3, uint64_t a4)
{
  uint64_t v13 = 0;
  int v7 = sub_1CD5101D0(*(void *)a4, *(_DWORD *)(a4 + 16), a2, &v13);
  uint64_t v8 = 0;
  uint64_t v9 = v13;
  if (v7) {
    BOOL v10 = v13 == *(void *)a4 + 40 * *(unsigned int *)(a4 + 16);
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    unsigned int v11 = *(_DWORD *)(v13 + 16);
    if (v11)
    {
      while (1)
      {
        uint64_t v8 = *(const llvm::Value **)(*(void *)(v9 + 8) + 8 * v11 - 8);
        if (llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(a1 + 8), v8, a3)) {
          break;
        }
        unsigned int v11 = *(_DWORD *)(v9 + 16) - 1;
        *(_DWORD *)(v9 + 16) = v11;
        if (!v11) {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v8;
}

void sub_1CCEC1790()
{
}

uint64_t sub_1CCEC17BC()
{
  char v3 = 0;
  uint64_t v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Do not separate the constant offset from a GEP instruction";
  v2.n128_u64[1] = 58;
  int v1 = 1;
  sub_1CD782E70(&v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCF7F98, &dword_1CB82C000);
  char v3 = 0;
  uint64_t v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Verify this pass produces no dead code";
  v2.n128_u64[1] = 38;
  int v1 = 1;
  sub_1CD782FE8(&v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCF8058, &dword_1CB82C000);
}

void llvm::SimpleLoopUnswitchPass::run(uint64_t a1, llvm::Loop *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (llvm::Value *)**((void **)a2 + 4);
  if (v6 && (*((unsigned char *)v6 + 23) & 0x10) != 0)
  {
    Name = llvm::Value::getName(v6);
    if (v11 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    size_t v7 = v11;
    if (v11 >= 0x17)
    {
      uint64_t v12 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17) {
        uint64_t v12 = v11 | 7;
      }
      uint64_t v13 = v12 + 1;
      uint64_t v8 = operator new(v12 + 1);
      __dst[1] = v7;
      unint64_t v16 = v13 | 0x8000000000000000;
      __dst[0] = v8;
    }
    else
    {
      HIBYTE(v16) = v11;
      uint64_t v8 = __dst;
      if (!v11)
      {
LABEL_5:
        *((unsigned char *)v8 + v7) = 0;
        LOBYTE(v30) = 0;
        char v40 = 0;
        uint64_t v10 = *(void *)(a4 + 72);
        if (v10)
        {
          uint64_t v17 = *(void *)(a4 + 72);
          v18[0] = (char *)&v19;
          v18[1] = (char *)0x1000000000;
          uint64_t v20 = v24;
          uint64_t v21 = v24;
          unsigned int v25 = v27;
          uint64_t v26 = 0x800000000;
          v29[1] = 0;
          v29[0] = 0;
          int v28 = v29;
          uint64_t v30 = v10;
          uint64_t v31 = v33;
          uint64_t v32 = 0x1000000000;
          v33[48] = v35;
          v33[49] = v35;
          v33[50] = 8;
          int v34 = 0;
          uint64_t v22 = 8;
          int v23 = 0;
          int v36 = v38;
          uint64_t v37 = 0x800000000;
          v39[1] = 0;
          v39[0] = 0;
          v38[8] = v39;
          char v40 = 1;
          sub_1CD3C5048((uint64_t)&v28, 0);
          if (v25 != v27) {
            free(v25);
          }
          if (v21 != v20) {
            free(v21);
          }
          sub_1CC0BD0FC(v18);
        }
        sub_1CCEC1BF4(a2);
      }
    }
    uint64_t v9 = Name;
  }
  else
  {
    size_t v7 = 14;
    HIBYTE(v16) = 14;
    uint64_t v8 = __dst;
    uint64_t v9 = "<unnamed loop>";
  }
  memmove(v8, v9, v7);
  goto LABEL_5;
}

void sub_1CCEC1BF4(llvm::Loop *a1)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  llvm::Loop::isLoopSimplifyForm(a1);
}

void sub_1CCEC70A8(llvm *a1)
{
  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopPassPass(a1, v2);
  llvm::initializeMemorySSAWrapperPassPass(a1, v3);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  operator new();
}

uint64_t sub_1CCEC7170(uint64_t a1, char a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCF8118;
  *(_DWORD *)(a1 + 24) = 1;
  *(void *)a1 = &unk_1F2640DF0;
  *(unsigned char *)(a1 + 28) = a2;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF8120, memory_order_acquire) != -1)
  {
    v6[0] = sub_1CCEC70A8;
    v6[1] = &PassRegistry;
    uint64_t v5 = v6;
    std::__call_once(&qword_1EBCF8120, &v5, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

uint64_t sub_1CCEC7224(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 40) != result + 40)
  {
    for (uint64_t i = *(void *)(result + 48); ; uint64_t i = *(void *)(v3 + 32))
    {
      uint64_t v3 = i - 24;
      uint64_t v4 = i ? i - 24 : 0;
      if (!i || *(unsigned char *)(v4 + 16) != 83) {
        break;
      }
      uint64_t v5 = *(_DWORD *)(i - 4) & 0x7FFFFFF;
      if (v5)
      {
        uint64_t v6 = 32 * *(unsigned int *)(i + 36);
        do
        {
          int v7 = *(_DWORD *)(v3 + 20);
          if ((v7 & 0x40000000) != 0) {
            uint64_t v8 = *(void *)(v3 - 8);
          }
          else {
            uint64_t v8 = v3 - 32 * (v7 & 0x7FFFFFF);
          }
          *(void *)(v8 + v6) = a2;
          v6 += 8;
          --v5;
        }
        while (v5);
      }
    }
  }
  return result;
}

void sub_1CCEC729C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  if (*(void *)(a1 + 40) != a1 + 40)
  {
    uint64_t v5 = *(void *)(a1 + 48);
    uint64_t v6 = v5 - 24;
    uint64_t v7 = v5 ? v5 - 24 : 0;
    if (v5 && *(unsigned char *)(v7 + 16) == 83)
    {
      int v8 = a5;
      uint64_t v9 = a4;
      uint64_t v10 = a3;
      unint64_t v11 = a2;
      while (1)
      {
        uint64_t v12 = *(uint64_t ***)v6;
        if ((*(unsigned char *)(v6 + 23) & 0x10) != 0) {
          break;
        }
        uint64_t v22 = 0;
        int v23 = &byte_1CFBCE98E;
LABEL_17:
        __int16 v113 = 773;
        v112[0] = v23;
        v112[1] = v22;
        v112[2] = ".split";
        unsigned int v25 = operator new(0x48uLL);
        uint64_t v26 = v25;
        v25[1] = v12;
        int v27 = (llvm::Value *)(v25 + 1);
        void *v25 = 0;
        v25[2] = 0;
        v25[3] = 0x4000000000000053;
        *((_OWORD *)v25 + 2) = 0u;
        int v28 = (char *)(v25 + 4);
        *((_OWORD *)v25 + 3) = 0u;
        *((_DWORD *)v25 + 16) = 0;
        if (v11)
        {
          uint64_t v87 = v11[2];
          v25[6] = v87;
          *(_WORD *)(v87 + 18) &= ~0x8000u;
          if ((*((unsigned char *)v25 + 31) & 0x10) != 0)
          {
            uint64_t v97 = *(void *)(v87 + 56);
            if (v97)
            {
              long long v98 = *(llvm::ValueSymbolTable **)(v97 + 104);
              if (v98) {
                llvm::ValueSymbolTable::reinsertValue(v98, v27);
              }
            }
          }
          uint64_t v88 = *v11;
          uint64_t v26[4] = *v11;
          v26[5] = v11;
          *(void *)(v88 + 8) = v28;
          *unint64_t v11 = (uint64_t)v28;
        }
        *((_DWORD *)v26 + 17) = 2;
        llvm::Value::setNameImpl(v27, v112);
        if (*((unsigned char *)v26 + 24)) {
          goto LABEL_19;
        }
        if ((*((unsigned char *)v26 + 31) & 0x10) == 0)
        {
LABEL_118:
          int v104 = 0;
          *((_DWORD *)v26 + 10) &= ~0x2000u;
          goto LABEL_119;
        }
        uint64_t v89 = ***(void ***)v27;
        uint64_t v90 = *(void *)(v89 + 152);
        uint64_t v91 = *(unsigned int *)(v89 + 168);
        if (!v91) {
          goto LABEL_110;
        }
        LODWORD(v92) = (v91 - 1) & ((v27 >> 4) ^ (v27 >> 9));
        uint64_t v93 = (llvm::Value **)(v90 + 16 * v92);
        __int16 v94 = *v93;
        if (*v93 != v27)
        {
          int v95 = 1;
          while (v94 != (llvm::Value *)-4096)
          {
            int v96 = v92 + v95++;
            uint64_t v92 = v96 & (v91 - 1);
            __int16 v94 = *(llvm::Value **)(v90 + 16 * v92);
            if (v94 == v27)
            {
              uint64_t v93 = (llvm::Value **)(v90 + 16 * v92);
              goto LABEL_111;
            }
          }
LABEL_110:
          uint64_t v93 = (llvm::Value **)(v90 + 16 * v91);
        }
LABEL_111:
        __int16 v99 = v93[1];
        unint64_t v102 = *(void *)v99;
        long long v100 = (char *)v99 + 16;
        unint64_t v101 = v102;
        if (v102 < 5) {
          goto LABEL_118;
        }
        if (*(_DWORD *)v100 != *(_DWORD *)"llvm." || v100[4] != aLlvm_1[4]) {
          goto LABEL_118;
        }
        *((_DWORD *)v26 + 10) |= 0x2000u;
        int v104 = llvm::Function::lookupIntrinsicID(v100, v101);
LABEL_119:
        *((_DWORD *)v26 + 11) = v104;
LABEL_19:
        uint64_t v29 = *((unsigned int *)v26 + 17);
        uint64_t v30 = operator new(40 * v29);
        *uint64_t v26 = v30;
        if (v29)
        {
          uint64_t v31 = &v30[4 * v29];
          do
          {
            void *v30 = 0;
            v30[1] = 0;
            v30[2] = 0;
            v30[3] = v27;
            v30 += 4;
          }
          while (v30 != v31);
        }
        unsigned int v110 = v27;
        int v32 = *(_DWORD *)(v6 + 20);
        unint64_t v33 = v32 & 0x7FFFFFF;
        if ((v32 & 0x7FFFFFF) != 0)
        {
          do
          {
            unint64_t v48 = v33--;
            int v49 = *(_DWORD *)(v6 + 20);
            if ((v49 & 0x40000000) != 0) {
              uint64_t v50 = *(void *)(v6 - 8);
            }
            else {
              uint64_t v50 = v6 - 32 * (v49 & 0x7FFFFFF);
            }
            if (*(void *)(v50 + 32 * *(unsigned int *)(v6 + 60) + 8 * v33) == v10)
            {
              uint64_t v51 = *(void *)(v50 + 32 * v33);
              if (v8) {
                llvm::PHINode::removeIncomingValue((llvm::PHINode *)v6, v33, 1);
              }
              int v45 = *((_DWORD *)v26 + 7);
              uint64_t v52 = v45 & 0x7FFFFFF;
              if ((v45 & 0x7FFFFFF) == *((_DWORD *)v26 + 17))
              {
                unsigned int v35 = v52 + (v52 >> 1);
                if (v35 <= 2) {
                  uint64_t v36 = 2;
                }
                else {
                  uint64_t v36 = v35;
                }
                *((_DWORD *)v26 + 17) = v36;
                if ((v45 & 0x40000000) != 0) {
                  uint64_t v37 = (uint64_t *)*v26;
                }
                else {
                  uint64_t v37 = (uint64_t *)((char *)v110 - 32 * v52);
                }
                __p = v37;
                uint64_t v38 = operator new(40 * v36);
                *uint64_t v26 = v38;
                uint64_t v39 = v38;
                do
                {
                  *uint64_t v39 = 0;
                  v39[1] = 0;
                  void v39[2] = 0;
                  v39[3] = v110;
                  v39 += 4;
                }
                while (v39 != &v38[4 * v36]);
                int v40 = *((_DWORD *)v26 + 7);
                if ((v40 & 0x40000000) != 0) {
                  uint64_t v41 = (uint64_t)v38;
                }
                else {
                  uint64_t v41 = (uint64_t)v110 - 32 * (v40 & 0x7FFFFFF);
                }
                sub_1CC5E4108((uint64_t)v112, __p, &__p[4 * v52], v41);
                if (v52)
                {
                  memmove((void *)(v41 + 32 * v36), &__p[4 * v52], 8 * v52);
                  uint64_t v42 = 4 * v52;
                  do
                  {
                    unint64_t v43 = &__p[v42];
                    if (__p[v42 - 4])
                    {
                      *(void *)*(v43 - 2) = *(v43 - 3);
                      uint64_t v44 = *(v43 - 3);
                      if (v44) {
                        *(void *)(v44 + 16) = *(v43 - 2);
                      }
                    }
                    v42 -= 4;
                  }
                  while (v42 * 8);
                }
                operator delete(__p);
                int v45 = *((_DWORD *)v26 + 7);
                int v8 = a5;
                uint64_t v10 = a3;
                uint64_t v9 = a4;
                unint64_t v11 = a2;
              }
              uint64_t v53 = (v45 + 1) & 0x7FFFFFF;
              *((_DWORD *)v26 + 7) = v45 & 0xF8000000 | (v45 + 1) & 0x7FFFFFF;
              if ((v45 & 0x40000000) != 0) {
                uint64_t v46 = (char *)*v26;
              }
              else {
                uint64_t v46 = (char *)v110 - 32 * v53;
              }
              uint64_t v54 = (v53 - 1);
              unsigned int v55 = &v46[32 * v54];
              if (*(void *)v55)
              {
                **((void **)v55 + 2) = *((void *)v55 + 1);
                uint64_t v34 = *((void *)v55 + 1);
                if (v34) {
                  *(void *)(v34 + 16) = *((void *)v55 + 2);
                }
              }
              *(void *)unsigned int v55 = v51;
              if (v51)
              {
                uint64_t v58 = *(void *)(v51 + 8);
                unsigned int v57 = (char **)(v51 + 8);
                uint64_t v56 = v58;
                unsigned int v59 = &v46[32 * v54];
                *((void *)v59 + 1) = v58;
                if (v58) {
                  *(void *)(v56 + 16) = v59 + 8;
                }
                *((void *)v59 + 2) = v57;
                *unsigned int v57 = v55;
              }
              int v60 = *((_DWORD *)v26 + 7);
              uint64_t v61 = v60 & 0x7FFFFFF;
              if ((v60 & 0x40000000) != 0) {
                int v47 = (char *)*v26;
              }
              else {
                int v47 = (char *)v110 - 32 * v61;
              }
              *(void *)&v47[32 * *((unsigned int *)v26 + 17) + 8 * (v61 - 1)] = v9;
            }
          }
          while (v48 > 1);
        }
        int v62 = v110;
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v6, v110, (llvm::Value *)1);
        int v63 = *((_DWORD *)v26 + 7);
        uint64_t v64 = v63 & 0x7FFFFFF;
        if ((v63 & 0x7FFFFFF) == *((_DWORD *)v26 + 17))
        {
          unsigned int v77 = v64 + (v64 >> 1);
          if (v77 <= 2) {
            uint64_t v78 = 2;
          }
          else {
            uint64_t v78 = v77;
          }
          *((_DWORD *)v26 + 17) = v78;
          if ((v63 & 0x40000000) != 0) {
            uint64_t v79 = (uint64_t *)*v26;
          }
          else {
            uint64_t v79 = (uint64_t *)((char *)v110 - 32 * v64);
          }
          uint64_t v80 = operator new(40 * v78);
          *uint64_t v26 = v80;
          unint64_t v81 = v80;
          do
          {
            *unint64_t v81 = 0;
            v81[1] = 0;
            v81[2] = 0;
            v81[3] = v110;
            v81 += 4;
          }
          while (v81 != &v80[4 * v78]);
          int v82 = *((_DWORD *)v26 + 7);
          if ((v82 & 0x40000000) != 0) {
            uint64_t v83 = (uint64_t)v80;
          }
          else {
            uint64_t v83 = (uint64_t)v110 - 32 * (v82 & 0x7FFFFFF);
          }
          sub_1CC5E4108((uint64_t)v112, v79, &v79[4 * v64], v83);
          if (v64)
          {
            memmove((void *)(v83 + 32 * v78), &v79[4 * v64], 8 * v64);
            uint64_t v84 = 4 * v64;
            do
            {
              uint64_t v85 = &v79[v84];
              if (v79[v84 - 4])
              {
                *(void *)*(v85 - 2) = *(v85 - 3);
                uint64_t v86 = *(v85 - 3);
                if (v86) {
                  *(void *)(v86 + 16) = *(v85 - 2);
                }
              }
              v84 -= 4;
            }
            while (v84 * 8);
          }
          operator delete(v79);
          int v63 = *((_DWORD *)v26 + 7);
          uint64_t v10 = a3;
          uint64_t v9 = a4;
          unint64_t v11 = a2;
          int v62 = v110;
        }
        uint64_t v65 = (v63 + 1) & 0x7FFFFFF;
        *((_DWORD *)v26 + 7) = v63 & 0xF8000000 | (v63 + 1) & 0x7FFFFFF;
        if ((v63 & 0x40000000) != 0) {
          int v66 = (uint64_t *)*v26;
        }
        else {
          int v66 = (uint64_t *)((char *)v62 - 32 * v65);
        }
        uint64_t v67 = (v65 - 1);
        unint64_t v68 = &v66[4 * v67];
        if (*v68)
        {
          *(void *)v68[2] = v68[1];
          uint64_t v76 = v68[1];
          if (v76) {
            *(void *)(v76 + 16) = v68[2];
          }
        }
        *unint64_t v68 = v6;
        uint64_t v69 = (uint64_t **)(v6 + 8);
        uint64_t v70 = *(void *)(v6 + 8);
        v68[1] = v70;
        if (v70) {
          *(void *)(v70 + 16) = v68 + 1;
        }
        v66[4 * v67 + 2] = (uint64_t)v69;
        unint64_t *v69 = v68;
        int v71 = *((_DWORD *)v26 + 7);
        uint64_t v72 = v71 & 0x7FFFFFF;
        if ((v71 & 0x40000000) != 0) {
          uint64_t v73 = (uint64_t *)*v26;
        }
        else {
          uint64_t v73 = (uint64_t *)((char *)v62 - 32 * v72);
        }
        v73[4 * *((unsigned int *)v26 + 17) + (v72 - 1)] = a1;
        uint64_t v74 = *(void *)(v6 + 32);
        uint64_t v6 = v74 - 24;
        if (v74) {
          uint64_t v75 = v74 - 24;
        }
        else {
          uint64_t v75 = 0;
        }
        if (!v74 || *(unsigned char *)(v75 + 16) != 83) {
          return;
        }
      }
      uint64_t v13 = **v12;
      uint64_t v14 = *(void *)(v13 + 152);
      uint64_t v15 = *(unsigned int *)(v13 + 168);
      if (v15)
      {
        LODWORD(v16) = (v15 - 1) & ((v6 >> 4) ^ (v6 >> 9));
        uint64_t v17 = (uint64_t *)(v14 + 16 * v16);
        uint64_t v18 = *v17;
        if (*v17 == v6)
        {
LABEL_16:
          uint64_t v21 = (void *)v17[1];
          uint64_t v24 = (const char *)*v21;
          int v23 = (const char *)(v21 + 2);
          uint64_t v22 = v24;
          goto LABEL_17;
        }
        int v19 = 1;
        while (v18 != -4096)
        {
          int v20 = v16 + v19++;
          uint64_t v16 = v20 & (v15 - 1);
          uint64_t v18 = *(void *)(v14 + 16 * v16);
          if (v18 == v6)
          {
            uint64_t v17 = (uint64_t *)(v14 + 16 * v16);
            goto LABEL_16;
          }
        }
      }
      uint64_t v17 = (uint64_t *)(v14 + 16 * v15);
      goto LABEL_16;
    }
  }
}

void *sub_1CCEC798C(void *result)
{
  v3[4] = *MEMORY[0x1E4F143B8];
  if (*result)
  {
    uint64_t v1 = v3;
    uint64_t v2 = 0x400000000;
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlocks();
  }
  return result;
}

uint64_t sub_1CCEC8290@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W8>)
{
  uint64_t v4 = a3 + 40;
  uint64_t v5 = *(void *)(a3 + 48);
  if (v5 != a3 + 40)
  {
    do
    {
      uint64_t v8 = v5 ? v5 - 24 : 0;
      a4 = 1;
      if (!v5 || *(unsigned char *)(v8 + 16) != 83) {
        break;
      }
      uint64_t v9 = sub_1CBF73380(v8, a2);
      if (!llvm::Loop::isLoopInvariant(a1, v9))
      {
        a4 = 0;
        return a4 & 1;
      }
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while (v5 != v4);
  }
  return a4 & 1;
}

unint64_t *sub_1CCEC8320(unint64_t *result, uint64_t a2)
{
  unint64_t v2 = *result;
  if (*result > 7)
  {
    if ((v2 & 4) == 0) {
      operator new();
    }
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFF8;
    unsigned int v4 = *(_DWORD *)((v2 & 0xFFFFFFFFFFFFFFF8) + 8);
    if (v4 >= *(_DWORD *)(v3 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)v3 + 8 * v4) = a2;
    ++*(_DWORD *)(v3 + 8);
  }
  else
  {
    *uint64_t result = a2 & 0xFFFFFFFFFFFFFFFBLL;
  }
  return result;
}

void sub_1CCEC8434(unint64_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  void v40[4] = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  BOOL v6 = sub_1CCA16428((uint64_t)&v32, a3);
  BOOL v7 = sub_1CCA16538((uint64_t)&v32, a3);
  uint64_t v37 = v40;
  unsigned int v39 = 4;
  int v32 = (char *)v36;
  unint64_t v33 = (char *)v36;
  int v35 = 0;
  v40[0] = a3;
  uint64_t v34 = 0x100000008;
  v36[0] = a3;
  unsigned int v8 = 1;
  do
  {
    uint64_t v9 = *((void *)v37 + --v8);
    unsigned int v38 = v8;
    int v10 = *(_DWORD *)(v9 + 20);
    if ((v10 & 0x40000000) != 0)
    {
      uint64_t v12 = *(uint64_t **)(v9 - 8);
      uint64_t v11 = v10 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v11 = v10 & 0x7FFFFFF;
      uint64_t v12 = (uint64_t *)(v9 - 32 * v11);
    }
    uint64_t v13 = &v12[4 * v11];
    if (v11)
    {
      while (1)
      {
        uint64_t v14 = (unsigned __int8 *)*v12;
        if (*(unsigned __int8 *)(*v12 + 16) >= 0x15u)
        {
          if (llvm::Loop::isLoopInvariant(a2, *v12))
          {
            sub_1CCEC8320(a1, (uint64_t)v14);
          }
          else if (v14[16] >= 0x1Cu {
                 && (v6 && sub_1CCA16428((uint64_t)v31, v14) || v7 && sub_1CCA16538((uint64_t)v30, v14)))
          }
          {
            uint64_t v15 = v33;
            uint64_t v16 = HIDWORD(v34);
            if (v33 == v32)
            {
              if (HIDWORD(v34))
              {
                uint64_t v17 = 0;
                uint64_t v18 = 8 * HIDWORD(v34);
                int v19 = (unsigned __int8 **)v33;
                while (*v19 != v14)
                {
                  if (*v19 == (unsigned __int8 *)-2) {
                    uint64_t v17 = v19;
                  }
                  ++v19;
                  v18 -= 8;
                  if (!v18)
                  {
                    if (!v17) {
                      goto LABEL_22;
                    }
                    uint64_t *v17 = v14;
                    --v35;
                    goto LABEL_46;
                  }
                }
                goto LABEL_48;
              }
LABEL_22:
              unsigned int v20 = v34;
              if (HIDWORD(v34) < v34)
              {
                ++HIDWORD(v34);
                *(void *)&v33[8 * v16] = v14;
LABEL_46:
                if (v38 >= (unint64_t)v39) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v37 + v38++) = v14;
                goto LABEL_48;
              }
            }
            else
            {
              unsigned int v20 = v34;
            }
            if (3 * v20 <= 4 * (HIDWORD(v34) - v35))
            {
              if (v20 >= 0x40) {
                v20 *= 2;
              }
              else {
                unsigned int v20 = 128;
              }
            }
            else if (v20 - HIDWORD(v34) >= v20 >> 3)
            {
LABEL_27:
              unsigned int v21 = v20 - 1;
              unsigned int v22 = (v20 - 1) & ((v14 >> 4) ^ (v14 >> 9));
              int v23 = &v15[8 * v22];
              uint64_t v24 = *(unsigned __int8 **)v23;
              if (*(void *)v23 != -1)
              {
                unsigned int v25 = 0;
                int v26 = 1;
                while (v24 != v14)
                {
                  if (v25) {
                    BOOL v27 = 0;
                  }
                  else {
                    BOOL v27 = v24 == (unsigned __int8 *)-2;
                  }
                  if (v27) {
                    unsigned int v25 = (unsigned __int8 **)v23;
                  }
                  unsigned int v28 = v22 + v26++;
                  unsigned int v22 = v28 & v21;
                  int v23 = &v15[8 * (v28 & v21)];
                  uint64_t v24 = *(unsigned __int8 **)v23;
                  if (*(void *)v23 == -1) {
                    goto LABEL_39;
                  }
                }
                goto LABEL_48;
              }
              unsigned int v25 = 0;
LABEL_39:
              if (v25) {
                uint64_t v29 = v25;
              }
              else {
                uint64_t v29 = (unsigned __int8 **)v23;
              }
              if (*v29 == v14) {
                goto LABEL_48;
              }
              if (*v29 == (unsigned __int8 *)-2) {
                --v35;
              }
              else {
                ++HIDWORD(v34);
              }
              *uint64_t v29 = v14;
              goto LABEL_46;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v32, v20);
            unsigned int v20 = v34;
            uint64_t v15 = v33;
            goto LABEL_27;
          }
        }
LABEL_48:
        v12 += 4;
        if (v12 == v13)
        {
          unsigned int v8 = v38;
          break;
        }
      }
    }
  }
  while (v8);
  if (v33 != v32) {
    free(v33);
  }
  if (v37 != v40) {
    free(v37);
  }
}

void sub_1CCEC877C(uint64_t **a1, llvm::Instruction **a2, unint64_t a3, int a4, llvm::BasicBlock *a5, llvm::BasicBlock *a6, int a7)
{
  v54[1] = *MEMORY[0x1E4F143B8];
  uint64_t v13 = **a1;
  v46[0] = v47;
  v46[1] = (void *)0x200000000;
  v47[6] = v13;
  v47[7] = &v53;
  v47[8] = v54;
  v47[9] = 0;
  int v48 = 0;
  __int16 v49 = 512;
  char v50 = 7;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = &unk_1F2616E88;
  v54[0] = &unk_1F2617008;
  v47[4] = a1;
  v47[5] = a1 + 5;
  uint64_t v14 = *a2;
  if (a4)
  {
    if (a3 >= 2)
    {
      unsigned int v15 = 2;
      uint64_t v16 = 1;
      do
      {
        uint64_t v17 = (uint64_t)a2[v16];
        __int16 v45 = 257;
        uint64_t v14 = sub_1CB844AF4((uint64_t)v46, v14, v17, (uint64_t)v44);
        uint64_t v16 = v15;
        BOOL v18 = a3 > v15++;
      }
      while (v18);
    }
  }
  else if (a3 >= 2)
  {
    unsigned int v19 = 2;
    uint64_t v20 = 1;
    do
    {
      uint64_t v21 = (uint64_t)a2[v20];
      __int16 v45 = 257;
      uint64_t v14 = sub_1CBF52474((uint64_t)v46, v14, v21, (uint64_t)v44);
      uint64_t v20 = v19;
      BOOL v18 = a3 > v19++;
    }
    while (v18);
  }
  if (a7)
  {
    if ((*((unsigned char *)v14 + 23) & 0x10) == 0)
    {
      uint64_t v38 = 0;
      uint64_t v37 = &byte_1CFBCE98E;
      goto LABEL_30;
    }
    uint64_t v28 = ***(void ***)v14;
    uint64_t v29 = *(void *)(v28 + 152);
    uint64_t v30 = *(unsigned int *)(v28 + 168);
    if (v30)
    {
      LODWORD(v31) = (v30 - 1) & ((v14 >> 4) ^ (v14 >> 9));
      int v32 = (llvm::Instruction **)(v29 + 16 * v31);
      unint64_t v33 = *v32;
      if (*v32 == v14)
      {
LABEL_29:
        uint64_t v36 = v32[1];
        uint64_t v39 = *(void *)v36;
        uint64_t v37 = (char *)v36 + 16;
        uint64_t v38 = v39;
LABEL_30:
        __int16 v43 = 773;
        v42[0] = v37;
        v42[1] = v38;
        v42[2] = ".fr";
        int v40 = operator new(0x60uLL);
        v40[13] = v40[13] & 0x38000000 | 1;
        uint64_t v41 = (llvm::Instruction *)(v40 + 8);
        *(void *)int v40 = 0;
        *((void *)v40 + 1) = 0;
        *((void *)v40 + 2) = 0;
        *((void *)v40 + 3) = v40 + 8;
        __int16 v45 = 257;
        llvm::FreezeInst::FreezeInst((llvm::FreezeInst *)(v40 + 8), v14, v44, 0);
        uint64_t v14 = sub_1CB844E0C((uint64_t *)v46, v41, (uint64_t)v42);
        goto LABEL_10;
      }
      int v34 = 1;
      while (v33 != (llvm::Instruction *)-4096)
      {
        int v35 = v31 + v34++;
        uint64_t v31 = v35 & (v30 - 1);
        unint64_t v33 = *(llvm::Instruction **)(v29 + 16 * v31);
        if (v33 == v14)
        {
          int v32 = (llvm::Instruction **)(v29 + 16 * v31);
          goto LABEL_29;
        }
      }
    }
    int v32 = (llvm::Instruction **)(v29 + 16 * v30);
    goto LABEL_29;
  }
LABEL_10:
  if (a4) {
    unsigned int v22 = a5;
  }
  else {
    unsigned int v22 = a6;
  }
  int v23 = operator new(0xA0uLL);
  uint64_t v24 = 0;
  unsigned int v25 = (llvm::Instruction *)(v23 + 24);
  v23[29] = v23[29] & 0x38000000 | 3;
  do
  {
    int v26 = &v23[v24];
    *int v26 = 0;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = v25;
    v24 += 8;
  }
  while (v24 != 24);
  if (a4) {
    BOOL v27 = a6;
  }
  else {
    BOOL v27 = a5;
  }
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v23 + 24), v22, v27, v14, 0);
  __int16 v45 = 257;
  sub_1CB844E0C((uint64_t *)v46, v25, (uint64_t)v44);
  if (v46[0] != v47) {
    free(v46[0]);
  }
}

void sub_1CCEC8A9C(const llvm::Loop *a1, uint64_t a2, unsigned __int8 **a3, int a4, uint64_t a5, uint64_t a6, llvm::DominatorTree *a7, llvm::LoopInfo *a8, uint64_t a9, uint64_t a10, uint64_t a11, int32x2_t *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v16 = a2;
  v136[26] = *MEMORY[0x1E4F143B8];
  int v106 = *(llvm::BasicBlock **)(a2 + 40);
  int v17 = *(_DWORD *)(a6 + 8);
  int v103 = *(unsigned __int8 *)(a2 + 16);
  if (v103 == 30) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = a2;
  }
  if (v103 != 30)
  {
    int v22 = *(_DWORD *)(a2 + 20);
    if ((v22 & 0x40000000) != 0) {
      uint64_t v23 = *(void *)(a2 - 8);
    }
    else {
      uint64_t v23 = a2 - 32 * (v22 & 0x7FFFFFF);
    }
    unsigned int v21 = 0;
    unsigned int v25 = (llvm::BasicBlock **)(v23 + 32);
    goto LABEL_21;
  }
  unsigned int v19 = *(unsigned __int8 **)(a2 - 96);
  BOOL v20 = v19 == *a3 && v17 == 0;
  if (!v20)
  {
    if (sub_1CB90D2C0((uint64_t)&v119, v19))
    {
LABEL_14:
      unsigned int v21 = 0;
      uint64_t v16 = a2;
      goto LABEL_20;
    }
    if (sub_1CC262304((uint64_t)&v119, *(unsigned __int8 **)(a2 - 96)))
    {
      uint64_t v16 = a2;
      goto LABEL_19;
    }
    if (!v17) {
      goto LABEL_14;
    }
    unsigned __int8 v102 = llvm::Constant::isOneValue(*(llvm::Constant **)(a6 + 64));
    uint64_t v16 = a2;
    if ((v102 & 1) == 0)
    {
LABEL_19:
      unsigned int v21 = 1;
      goto LABEL_20;
    }
  }
  unsigned int v21 = 0;
LABEL_20:
  unsigned int v25 = (llvm::BasicBlock **)(v16 - 32 * (v21 ^ 1) - 32);
LABEL_21:
  unsigned int v111 = *v25;
  uint64_t v114 = 1;
  v115[0] = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v115[1] = v115[0];
  uint64_t v116 = &v118;
  uint64_t v117 = 0x400000000;
  uint64_t v109 = a7;
  if (v103 == 30)
  {
    int v26 = *(void **)(v16 - 32 * v21 - 32);
    uint64_t v119 = v26;
    unsigned int v27 = ((v26 >> 4) ^ (v26 >> 9)) & 3;
    uint64_t v28 = (void *)v115 + v27;
    uint64_t v29 = (void *)*v28;
    if (v26 != (void *)*v28)
    {
      uint64_t v30 = 0;
      int v31 = 1;
      while (v29 != (void *)-4096)
      {
        if (v30) {
          BOOL v32 = 0;
        }
        else {
          BOOL v32 = v29 == (void *)-8192;
        }
        if (v32) {
          uint64_t v30 = v28;
        }
        char v33 = v27 + v31++;
        unsigned int v27 = v33 & 3;
        uint64_t v28 = (void *)v115 + v27;
        uint64_t v29 = (void *)*v28;
        if (v26 == (void *)*v28) {
          goto LABEL_71;
        }
      }
      if (v30) {
        unsigned int v55 = v30;
      }
      else {
        unsigned int v55 = v28;
      }
      uint64_t v56 = sub_1CC875030((uint64_t)&v114, (uint64_t)&v119, &v119, v55);
      *uint64_t v56 = v119;
      if (v117 >= HIDWORD(v117)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v116 + v117) = v119;
      LODWORD(v117) = v117 + 1;
    }
LABEL_71:
    sub_1CBFCBAB0((uint64_t)v110, (uint64_t)a1);
    if (a13) {
      llvm::LoopBlocksDFS::perform((llvm::LoopBlocksDFS *)v110, a8);
    }
    uint64_t v57 = *(unsigned int *)(a5 + 8);
    uint64_t v58 = a1;
    if (v57)
    {
      int v60 = *((_DWORD *)a8 + 4);
      if (v60)
      {
        uint64_t v61 = *(void **)a5;
        uint64_t v62 = *(void *)a5 + 8 * v57;
        uint64_t v63 = *(void *)a8;
        unsigned int v64 = v60 - 1;
        uint64_t v58 = a1;
        while (1)
        {
          uint64_t v65 = ((*v61 >> 4) ^ (*v61 >> 9)) & v64;
          uint64_t v66 = *(void *)(v63 + 16 * v65);
          if (*v61 != v66) {
            break;
          }
LABEL_83:
          uint64_t v69 = *(const llvm::Loop **)(v63 + 16 * v65 + 8);
          if (!v69) {
            goto LABEL_91;
          }
          if (v69 != v58)
          {
            uint64_t v70 = v58;
            do
            {
              if (!v70) {
                goto LABEL_89;
              }
              uint64_t v70 = *(const llvm::Loop **)v70;
            }
            while (v70 != v69);
            uint64_t v58 = v69;
          }
LABEL_89:
          if (++v61 == (void *)v62) {
            goto LABEL_74;
          }
        }
        int v67 = 1;
        while (v66 != -4096)
        {
          int v68 = v65 + v67++;
          uint64_t v65 = v68 & v64;
          uint64_t v66 = *(void *)(v63 + 16 * v65);
          if (*v61 == v66) {
            goto LABEL_83;
          }
        }
      }
LABEL_91:
      unsigned int v59 = a1;
      if (a12) {
        goto LABEL_92;
      }
    }
    else
    {
LABEL_74:
      if (a12)
      {
        unsigned int v59 = a1;
        if (v58)
        {
          llvm::ScalarEvolution::forgetLoop(a12, v58);
          goto LABEL_94;
        }
        do
        {
LABEL_92:
          int v71 = v59;
          unsigned int v59 = *(const llvm::Loop **)v59;
        }
        while (v59);
        llvm::ScalarEvolution::forgetLoop(a12, v71);
      }
    }
LABEL_94:
    if (byte_1EBCF87A8)
    {
      uint64_t v121 = 0;
      LODWORD(v122) = 0;
      __b = 0;
      uint64_t v119 = &unk_1F2606238;
      LOBYTE(v123) = 0;
      uint64_t v126 = 0;
      LODWORD(v127) = 0;
      uint64_t v125 = 0;
      int v124 = &unk_1F26048A8;
      uint64_t v130 = 0;
      int v131 = 0;
      uint64_t v129 = 0;
      uint64_t v128 = &unk_1F26048D0;
      llvm::ICFLoopSafetyInfo::computeLoopSafetyInfo((int32x2_t *)&v119, a1);
      llvm::ICFLoopSafetyInfo::isGuaranteedToExecute((int32x2_t *)&v119, (const llvm::BasicBlock **)a2, v109, (const llvm::BasicBlock ***)a1);
      uint64_t v119 = &unk_1F2606238;
      uint64_t v128 = &unk_1F26048F8;
      MEMORY[0x1D25D9CD0](v129, 8);
      int v124 = &unk_1F26048F8;
      MEMORY[0x1D25D9CD0](v125, 8);
      uint64_t v119 = &unk_1F26065B0;
      sub_1CC0CADD4((uint64_t *)&__b);
    }
    uint64_t v113 = 1;
    for (uint64_t i = 8; i != 264; i += 16)
      *(uint64_t *)((char *)&v113 + i) = -4096;
    uint64_t v73 = (char *)v116;
    uint64_t v74 = (uint64_t *)&v111;
    uint64_t v132 = &v111;
    int v133 = v116;
    uint64_t v75 = (char *)v116 + 8 * v117;
    uint64_t v134 = &v112;
    unint64_t v135 = v75;
    while (1)
    {
      if (v74 == &v112 && v73 == v75 && v134 == &v112 && v135 == v75) {
        llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor();
      }
      uint64_t v77 = 0;
      do
      {
        uint64_t v78 = (llvm::BasicBlock **)(*(uint64_t (**)(void **))((char *)&off_1F2640D60 + v77))(&v132);
        v77 += 16;
      }
      while (!v78);
      uint64_t v79 = *v78;
      if (!llvm::BasicBlock::getUniquePredecessor(*v78))
      {
        uint64_t v94 = *((void *)v79 + 1);
        if (v94)
        {
          while (1)
          {
            uint64_t v95 = *(void *)(v94 + 24);
            unsigned int v96 = *(unsigned __int8 *)(v95 + 16);
            BOOL v97 = v95 && v96 >= 0x1C;
            if (v97 && v96 - 29 <= 0xA) {
              break;
            }
            uint64_t v94 = *(void *)(v94 + 8);
            if (!v94) {
              goto LABEL_108;
            }
          }
LABEL_151:
          if (v106 != *(llvm::BasicBlock **)(v95 + 40)) {
            llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
          }
          while (1)
          {
            uint64_t v94 = *(void *)(v94 + 8);
            if (!v94) {
              break;
            }
            uint64_t v95 = *(void *)(v94 + 24);
            unsigned int v99 = *(unsigned __int8 *)(v95 + 16);
            if (v95) {
              BOOL v100 = v99 >= 0x1C;
            }
            else {
              BOOL v100 = 0;
            }
            if (v100 && v99 - 29 < 0xB) {
              goto LABEL_151;
            }
          }
        }
      }
LABEL_108:
      uint64_t v119 = &v121;
      HIDWORD(__b) = 4;
      uint64_t v80 = *((unsigned int *)v109 + 10);
      if (!v80) {
        goto LABEL_116;
      }
      uint64_t v81 = *((void *)v109 + 3);
      LODWORD(v82) = (v80 - 1) & ((v79 >> 4) ^ (v79 >> 9));
      uint64_t v83 = (llvm::BasicBlock **)(v81 + 16 * v82);
      uint64_t v84 = *v83;
      if (v79 != *v83)
      {
        int v85 = 1;
        do
        {
          if (v84 == (llvm::BasicBlock *)-4096) {
            goto LABEL_116;
          }
          int v86 = v82 + v85++;
          uint64_t v82 = v86 & (v80 - 1);
          uint64_t v84 = *(llvm::BasicBlock **)(v81 + 16 * v82);
        }
        while (v79 != v84);
        uint64_t v83 = (llvm::BasicBlock **)(v81 + 16 * v82);
      }
      if (v83 == (llvm::BasicBlock **)(v81 + 16 * v80)) {
LABEL_116:
      }
        uint64_t v87 = 0;
      else {
        uint64_t v87 = v83[1];
      }
      uint64_t v121 = v87;
      unsigned int v88 = 1;
      do
      {
        uint64_t v89 = *((void *)v119 + v88 - 1);
        LODWORD(__b) = v88 - 1;
        v136[0] = *(void *)v89;
        sub_1CD644138(&v113, v136)[1] = v79;
        uint64_t v90 = *(unsigned int *)(v89 + 32);
        unsigned int v88 = __b;
        if (v90)
        {
          uint64_t v91 = *(void **)(v89 + 24);
          uint64_t v92 = 8 * v90;
          do
          {
            if (v88 >= HIDWORD(__b)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v119 + v88) = *v91;
            unsigned int v88 = __b + 1;
            LODWORD(__b) = __b + 1;
            ++v91;
            v92 -= 8;
          }
          while (v92);
        }
      }
      while (v88);
      if (v119 != &v121) {
        free(v119);
      }
      uint64_t v93 = 0;
      do
      {
        if ((*(uint64_t (**)(void **))((char *)&off_1F2640D80 + v93))(&v132)) {
          break;
        }
        BOOL v20 = v93 == 16;
        v93 += 16;
      }
      while (!v20);
      uint64_t v74 = (uint64_t *)v132;
      uint64_t v73 = (char *)v133;
    }
  }
  int v34 = (*(_DWORD *)(v16 + 20) >> 1) & 0x3FFFFFF;
  uint64_t v35 = (v34 - 1);
  if (v34 == 1) {
    goto LABEL_71;
  }
  uint64_t v36 = 0;
  while (1)
  {
    int v37 = *(_DWORD *)(v16 + 20);
    if ((v37 & 0x40000000) != 0) {
      uint64_t v38 = *(void *)(v16 - 8);
    }
    else {
      uint64_t v38 = v18 - 32 * (v37 & 0x7FFFFFF);
    }
    uint64_t v39 = (2 * v36 + 3);
    if (v36 == 4294967294) {
      uint64_t v39 = 1;
    }
    uint64_t v40 = 32 * v39;
    if (*(llvm::BasicBlock **)(v38 + v40) == v111) {
      goto LABEL_60;
    }
    if ((v37 & 0x40000000) != 0) {
      uint64_t v41 = *(void *)(v16 - 8);
    }
    else {
      uint64_t v41 = v18 - 32 * (v37 & 0x7FFFFFF);
    }
    uint64_t v42 = *(void **)(v41 + v40);
    uint64_t v119 = v42;
    if (v114)
    {
      int v43 = 4;
      uint64_t v44 = v115;
    }
    else
    {
      int v43 = DWORD2(v115[0]);
      if (!DWORD2(v115[0]))
      {
        uint64_t v53 = 0;
LABEL_58:
        uint64_t v54 = sub_1CC875030((uint64_t)&v114, (uint64_t)&v119, &v119, v53);
        *uint64_t v54 = v119;
        if (v117 >= (unint64_t)HIDWORD(v117)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v16 = a2;
        *((void *)v116 + v117) = v119;
        LODWORD(v117) = v117 + 1;
        goto LABEL_60;
      }
      uint64_t v44 = *(_OWORD **)&v115[0];
    }
    int v45 = v43 - 1;
    unsigned int v46 = v45 & ((v42 >> 4) ^ (v42 >> 9));
    int v47 = (void *)v44 + v46;
    int v48 = (void *)*v47;
    if (v42 != (void *)*v47)
    {
      __int16 v49 = 0;
      int v50 = 1;
      while (v48 != (void *)-4096)
      {
        if (v49) {
          BOOL v51 = 0;
        }
        else {
          BOOL v51 = v48 == (void *)-8192;
        }
        if (v51) {
          __int16 v49 = v47;
        }
        unsigned int v52 = v46 + v50++;
        unsigned int v46 = v52 & v45;
        int v47 = (void *)v44 + v46;
        int v48 = (void *)*v47;
        if (v42 == (void *)*v47) {
          goto LABEL_60;
        }
      }
      if (v49) {
        uint64_t v53 = v49;
      }
      else {
        uint64_t v53 = v47;
      }
      goto LABEL_58;
    }
LABEL_60:
    if (++v36 == v35) {
      goto LABEL_71;
    }
  }
}

unint64_t sub_1CCED4980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1CD783E8C(a2, *(void *)a1);
  if (*(_DWORD *)a2) {
    uint64_t v7 = a2 + 8;
  }
  else {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  unsigned int v8 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)a2) {
    unsigned int v8 = 4;
  }
  if (v7 + 24 * v8 == v6) {
    return 0;
  }
  uint64_t v11 = v6;
  uint64_t v12 = sub_1CD783EF0(a3, a1);
  if (*(_DWORD *)a3) {
    uint64_t v13 = a3 + 8;
  }
  else {
    uint64_t v13 = *(void *)(a3 + 8);
  }
  unsigned int v14 = *(_DWORD *)(a3 + 16);
  if (*(_DWORD *)a3) {
    unsigned int v14 = 4;
  }
  if (v13 + 24 * v14 != v12) {
    return *(void *)(v12 + 8);
  }
  uint64_t v15 = *(unsigned int *)(a1 + 32);
  unint64_t v9 = *(void *)(v11 + 8);
  unint64_t v16 = *(void *)(v11 + 16);
  if (v15)
  {
    int v17 = *(uint64_t **)(a1 + 24);
    uint64_t v18 = 8 * v15;
    do
    {
      uint64_t v19 = *v17++;
      uint64_t v20 = sub_1CCED4980(v19, a2, a3);
      uint64_t v22 = v16;
      if (__OFADD__(v9, v20)) {
        unint64_t v9 = ((uint64_t)(v9 + v20) >> 63) ^ 0x8000000000000000;
      }
      else {
        v9 += v20;
      }
      if (v21 == 1) {
        uint64_t v22 = 1;
      }
      unint64_t v16 = v22 | v16 & 0xFFFFFFFF00000000;
      v18 -= 8;
    }
    while (v18);
  }
  uint64_t v23 = a1;
  *(void *)&long long v24 = v9;
  *((void *)&v24 + 1) = v16;
  sub_1CD783F54((uint64_t)v25, a3, &v23, &v24);
  return v9;
}

BOOL sub_1CCED4AC8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[2];
  if (*a1 != v2) {
    *a1 = v1 + 8;
  }
  return v1 != v2;
}

BOOL sub_1CCED4AEC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 24);
  if (v1 != v2) {
    *(void *)(a1 + 8) = v1 + 8;
  }
  return v1 != v2;
}

void sub_1CCED4B10(void *a1)
{
  if (*((unsigned char *)a1 + 48))
  {
    sub_1CC009394((uint64_t)(a1 + 3));
    MEMORY[0x1D25D9CD0](a1[3], 8);
    *((unsigned char *)a1 + 48) = 0;
  }
  sub_1CC4D021C(a1);
  MEMORY[0x1D25D9CD0](*a1, 8);

  JUMPOUT(0x1D25D9CE0);
}

unint64_t sub_1CCED4B8C(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4)
{
  v68[32] = *MEMORY[0x1E4F143B8];
  v65[0] = a3;
  v65[1] = (uint64_t *)a4;
  *(void *)(a4 + 128) += 152;
  uint64_t v7 = *(void *)(a4 + 48);
  if (((v7 + 7) & 0xFFFFFFFFFFFFFFF8) - v7 + 152 > *(void *)(a4 + 56) - v7)
  {
    unsigned int v62 = *(_DWORD *)(a4 + 72) >> 7;
    if (v62 >= 0x1E) {
      LOBYTE(v62) = 30;
    }
    uint64_t v63 = 4096 << v62;
    unint64_t v8 = (unint64_t)operator new(4096 << v62, (std::align_val_t)8uLL);
    unsigned int v64 = *(_DWORD *)(a4 + 72);
    if (v64 >= *(_DWORD *)(a4 + 76)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a4 + 64) + 8 * v64) = v8;
    ++*(_DWORD *)(a4 + 72);
    *(void *)(a4 + 56) = v8 + v63;
  }
  else
  {
    unint64_t v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a4 + 48) = v8 + 152;
  *(void *)(v8 + 144) = 0;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)unint64_t v8 = 0u;
  *(void *)(v8 + 56) = v8 + 88;
  *(void *)(v8 + 64) = v8 + 88;
  *(_DWORD *)(v8 + 72) = 8;
  if (a2)
  {
    *(void *)unint64_t v8 = a2;
    int v10 = (unint64_t *)a2[2];
    unint64_t v9 = a2[3];
    if ((unint64_t)v10 < v9)
    {
      unint64_t *v10 = v8;
      uint64_t v11 = v10 + 1;
LABEL_32:
      a2[2] = v11;
      goto LABEL_40;
    }
    uint64_t v15 = (void *)a2[1];
    uint64_t v16 = v10 - v15;
    unint64_t v17 = v16 + 1;
    if (!((unint64_t)(v16 + 1) >> 61))
    {
      uint64_t v18 = v9 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (!v19)
      {
        uint64_t v20 = 0;
        goto LABEL_27;
      }
      if (!(v19 >> 61))
      {
        uint64_t v20 = (char *)operator new(8 * v19);
LABEL_27:
        unsigned int v27 = (unint64_t *)&v20[8 * v16];
        unint64_t *v27 = v8;
        uint64_t v11 = v27 + 1;
        if (v10 != v15)
        {
          do
          {
            unint64_t v28 = *--v10;
            *--unsigned int v27 = v28;
          }
          while (v10 != v15);
          int v10 = (unint64_t *)a2[1];
        }
        a2[1] = v27;
        a2[2] = v11;
        a2[3] = &v20[8 * v19];
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_32;
      }
LABEL_86:
      sub_1CB833614();
    }
LABEL_85:
    abort();
  }
  uint64_t v13 = *(unint64_t **)(a4 + 32);
  unint64_t v12 = *(void *)(a4 + 40);
  if ((unint64_t)v13 >= v12)
  {
    int v21 = *(void **)(a4 + 24);
    uint64_t v22 = v13 - v21;
    unint64_t v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 61) {
      goto LABEL_85;
    }
    uint64_t v24 = v12 - (void)v21;
    if (v24 >> 2 > v23) {
      unint64_t v23 = v24 >> 2;
    }
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v23;
    }
    if (v25)
    {
      if (v25 >> 61) {
        goto LABEL_86;
      }
      int v26 = (char *)operator new(8 * v25);
    }
    else
    {
      int v26 = 0;
    }
    uint64_t v29 = (unint64_t *)&v26[8 * v22];
    *uint64_t v29 = v8;
    unsigned int v14 = v29 + 1;
    if (v13 != v21)
    {
      do
      {
        unint64_t v30 = *--v13;
        *--uint64_t v29 = v30;
      }
      while (v13 != v21);
      uint64_t v13 = *(unint64_t **)(a4 + 24);
    }
    *(void *)(a4 + 24) = v29;
    *(void *)(a4 + 32) = v14;
    *(void *)(a4 + 40) = &v26[8 * v25];
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    unint64_t *v13 = v8;
    unsigned int v14 = v13 + 1;
  }
  *(void *)(a4 + 32) = v14;
LABEL_40:
  sub_1CCED5128(v65, a1, (void *)v8);
  uint64_t v31 = *(void *)(a1 + 8);
  uint64_t v32 = *(void *)(a1 + 16);
  if (v31 != v32)
  {
    unsigned int v33 = 0;
    uint64_t v66 = v68;
    uint64_t v67 = 0x1000000000;
    do
    {
      unint64_t v35 = *(void *)(v32 - 8);
      v32 -= 8;
      unint64_t v34 = v35;
      if (v33 >= HIDWORD(v67)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v36 = (unint64_t *)((char *)v66 + 16 * v33);
      *uint64_t v36 = v8;
      v36[1] = v34;
      unsigned int v33 = v67 + 1;
      LODWORD(v67) = v67 + 1;
    }
    while (v32 != v31);
    do
    {
      int v37 = (char *)v66 + 16 * v33;
      uint64_t v38 = (void *)*((void *)v37 - 2);
      uint64_t v39 = *((void *)v37 - 1);
      LODWORD(v67) = v33 - 1;
      *(void *)(a4 + 128) += 152;
      uint64_t v40 = *(void *)(a4 + 48);
      if (((v40 + 7) & 0xFFFFFFFFFFFFFFF8) - v40 + 152 > *(void *)(a4 + 56) - v40)
      {
        unsigned int v58 = *(_DWORD *)(a4 + 72) >> 7;
        if (v58 >= 0x1E) {
          LOBYTE(v58) = 30;
        }
        uint64_t v59 = 4096 << v58;
        unint64_t v41 = (unint64_t)operator new(4096 << v58, (std::align_val_t)8uLL);
        unint64_t v60 = *(unsigned int *)(a4 + 72);
        if (v60 >= *(unsigned int *)(a4 + 76)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(a4 + 64) + 8 * v60) = v41;
        ++*(_DWORD *)(a4 + 72);
        *(void *)(a4 + 56) = v41 + v59;
      }
      else
      {
        unint64_t v41 = (v40 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *(void *)(a4 + 48) = v41 + 152;
      *(_OWORD *)(v41 + 56) = 0u;
      *(_OWORD *)(v41 + 72) = 0u;
      *(_OWORD *)(v41 + 136) = 0u;
      *(_OWORD *)(v41 + 120) = 0u;
      *(_OWORD *)(v41 + 104) = 0u;
      *(_OWORD *)(v41 + 40) = 0u;
      *(_OWORD *)(v41 + 24) = 0u;
      *(_OWORD *)(v41 + 8) = 0u;
      *(_OWORD *)(v41 + 88) = 0u;
      *(void *)(v41 + 56) = v41 + 88;
      *(void *)(v41 + 64) = v41 + 88;
      *(_DWORD *)(v41 + 72) = 8;
      *(void *)unint64_t v41 = v38;
      int v43 = (unint64_t *)v38[2];
      unint64_t v42 = v38[3];
      if ((unint64_t)v43 >= v42)
      {
        int v45 = (void *)v38[1];
        uint64_t v46 = v43 - v45;
        unint64_t v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) >> 61) {
          goto LABEL_85;
        }
        uint64_t v48 = v42 - (void)v45;
        if (v48 >> 2 > v47) {
          unint64_t v47 = v48 >> 2;
        }
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v49 = v47;
        }
        if (v49)
        {
          if (v49 >> 61) {
            goto LABEL_86;
          }
          int v50 = (char *)operator new(8 * v49);
        }
        else
        {
          int v50 = 0;
        }
        BOOL v51 = (unint64_t *)&v50[8 * v46];
        unint64_t *v51 = v41;
        uint64_t v44 = v51 + 1;
        if (v43 != v45)
        {
          do
          {
            unint64_t v52 = *--v43;
            *--BOOL v51 = v52;
          }
          while (v43 != v45);
          int v43 = (unint64_t *)v38[1];
        }
        v38[1] = v51;
        v38[2] = v44;
        v38[3] = &v50[8 * v49];
        if (v43) {
          operator delete(v43);
        }
      }
      else
      {
        unint64_t *v43 = v41;
        uint64_t v44 = v43 + 1;
      }
      v38[2] = v44;
      sub_1CCED5128(v65, v39, (void *)v41);
      uint64_t v54 = *(void *)(v39 + 8);
      uint64_t v53 = *(void *)(v39 + 16);
      unsigned int v33 = v67;
      while (v53 != v54)
      {
        unint64_t v56 = *(void *)(v53 - 8);
        v53 -= 8;
        unint64_t v55 = v56;
        if (v33 >= HIDWORD(v67)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v57 = (unint64_t *)((char *)v66 + 16 * v33);
        *uint64_t v57 = v41;
        v57[1] = v55;
        unsigned int v33 = v67 + 1;
        LODWORD(v67) = v67 + 1;
      }
    }
    while (v33);
    if (v66 != v68) {
      free(v66);
    }
  }
  return v8;
}

void sub_1CCED5128(uint64_t **a1, uint64_t a2, void *a3)
{
  unint64_t v6 = ((*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
  uint64_t v7 = (unsigned char *)a3[4];
  if (v6 > (uint64_t)(a3[6] - (void)v7) >> 3)
  {
    unint64_t v8 = (unsigned char *)a3[5];
    unint64_t v9 = (char *)operator new(8 * v6);
    int v10 = &v9[(v8 - v7) & 0xFFFFFFFFFFFFFFF8];
    uint64_t v11 = v10;
    if (v8 != v7)
    {
      uint64_t v11 = &v9[(v8 - v7) & 0xFFFFFFFFFFFFFFF8];
      do
      {
        uint64_t v12 = *((void *)v8 - 1);
        v8 -= 8;
        *((void *)v11 - 1) = v12;
        v11 -= 8;
      }
      while (v8 != v7);
    }
    a3[4] = v11;
    a3[5] = v10;
    a3[6] = &v9[8 * v6];
    if (v7) {
      operator delete(v7);
    }
  }
  uint64_t v13 = *(uint64_t **)(a2 + 32);
  if (*(uint64_t **)(a2 + 40) != v13)
  {
    uint64_t v14 = *v13;
    uint64_t v15 = **a1;
    uint64_t v16 = *((unsigned int *)*a1 + 4);
    if (v16)
    {
      uint64_t v17 = (v16 - 1) & ((*v13 >> 4) ^ (v14 >> 9));
      uint64_t v18 = (void *)(v15 + (v17 << 6));
      uint64_t v19 = v18[3];
      if (v14 == v19) {
        goto LABEL_15;
      }
      int v20 = 1;
      while (v19 != -4096)
      {
        int v21 = v17 + v20++;
        uint64_t v17 = v21 & (v16 - 1);
        uint64_t v18 = (void *)(v15 + (v17 << 6));
        uint64_t v19 = v18[3];
        if (v14 == v19) {
          goto LABEL_15;
        }
      }
    }
    uint64_t v18 = (void *)(v15 + (v16 << 6));
LABEL_15:
    uint64_t v38 = 6;
    if (v18 == (void *)(v15 + (v16 << 6)))
    {
      uint64_t v22 = 0;
      unint64_t v23 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
    }
    else
    {
      uint64_t v22 = 0;
      unint64_t v23 = (int32x2_t ****)v18[7];
      uint64_t v39 = 0;
      uint64_t v40 = v23;
      if (v23 != (int32x2_t ****)-8192 && v23 != (int32x2_t ****)-4096 && v23 != 0)
      {
        unint64_t v25 = v18[5] & 0xFFFFFFFFFFFFFFF8;
        uint64_t v39 = *(unint64_t **)v25;
        *(void *)unint64_t v25 = &v38;
        uint64_t v38 = v25 | 6;
        uint64_t v22 = v39;
        if (v39) {
          *uint64_t v39 = *v39 & 7 | (unint64_t)&v39;
        }
        unint64_t v23 = v40;
      }
    }
    if (v23 != (int32x2_t ****)-8192 && v23 != (int32x2_t ****)-4096 && v23 != 0)
    {
      unint64_t v27 = v38 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v38 & 0xFFFFFFFFFFFFFFF8) = v22;
      if (v39)
      {
        *uint64_t v39 = *v39 & 7 | v27;
      }
      else
      {
        unint64_t v28 = v40;
        uint64_t v29 = ***v40;
        unint64_t v30 = (unint64_t)v29[303];
        if (v30 <= v27)
        {
          uint64_t v31 = v29[305].u32[0];
          if (v30 + 16 * v31 > v27)
          {
            unsigned int v32 = v31 - 1;
            LODWORD(v33) = v32 & ((v40 >> 4) ^ (v40 >> 9));
            unint64_t v34 = (int32x2_t *****)(v30 + 16 * v33);
            unint64_t v35 = *v34;
            if (v40 != *v34)
            {
              int v36 = 1;
              do
              {
                if (v35 == (int32x2_t ****)-4096) {
                  goto LABEL_41;
                }
                int v37 = v33 + v36++;
                uint64_t v33 = v37 & v32;
                unint64_t v35 = *(int32x2_t *****)(v30 + 16 * v33);
              }
              while (v40 != v35);
              unint64_t v34 = (int32x2_t *****)(v30 + 16 * v33);
            }
            llvm::ConstantExpr *v34 = (int32x2_t ****)-8192;
            v29[304] = vadd_s32(v29[304], (int32x2_t)0x1FFFFFFFFLL);
            unint64_t v28 = v40;
LABEL_41:
            *((unsigned char *)v28 + 17) &= ~1u;
          }
        }
      }
    }
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBlockEntry();
  }
}

int8x16_t sub_1CCED54D8(int8x16_t *a1, int8x16_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  while (2)
  {
    uint64_t v11 = a2;
    v346 = &a2[-1].i64[1];
    uint64_t v12 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v12;
          uint64_t v13 = (char *)v11 - (char *)v12;
          uint64_t v14 = ((char *)v11 - (char *)v12) >> 3;
          uint64_t v349 = a1;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v289 = a2[-1].i64[1];
                uint64_t v290 = a1->i64[0];
                uint64_t v291 = *a3;
                uint64_t v351 = 0;
                int v292 = sub_1CD46DBEC(v291, v289, &v351);
                unint64_t v293 = 0;
                if (v292) {
                  unint64_t v293 = *(void **)(v351 + 8);
                }
                unsigned int v294 = 0;
                do
                {
                  unint64_t v293 = (void *)*v293;
                  ++v294;
                }
                while (v293);
                uint64_t v295 = *a3;
                uint64_t v351 = 0;
                int v296 = sub_1CD46DBEC(v295, v290, &v351);
                uint64_t v297 = 0;
                if (v296) {
                  uint64_t v297 = *(void **)(v351 + 8);
                }
                unsigned int v298 = 0;
                do
                {
                  uint64_t v297 = (void *)*v297;
                  ++v298;
                }
                while (v297);
                if (v294 < v298)
                {
                  uint64_t v299 = a1->i64[0];
                  a1->i64[0] = a2[-1].i64[1];
                  a2[-1].i64[1] = v299;
                }
                break;
              case 3:
                sub_1CCED6758(a1->i64, &a1->i64[1], v346, a3);
                break;
              case 4:
                sub_1CCED6F18(a1->i64, &a1->i64[1], a1[1].i64, v346, a3);
                break;
              case 5:
                i64 = a1[1].i64;
                uint64_t v301 = &a1[1].i64[1];
                sub_1CCED6F18(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1], a3);
                uint64_t v302 = a2[-1].i64[1];
                uint64_t v303 = a1[1].i64[1];
                uint64_t v304 = *a3;
                uint64_t v351 = 0;
                int v305 = sub_1CD46DBEC(v304, v302, &v351);
                uint64_t v306 = 0;
                if (v305) {
                  uint64_t v306 = *(void **)(v351 + 8);
                }
                unsigned int v307 = 0;
                do
                {
                  uint64_t v306 = (void *)*v306;
                  ++v307;
                }
                while (v306);
                uint64_t v308 = *a3;
                uint64_t v351 = 0;
                int v309 = sub_1CD46DBEC(v308, v303, &v351);
                uint64_t v310 = 0;
                if (v309) {
                  uint64_t v310 = *(void **)(v351 + 8);
                }
                unsigned int v311 = 0;
                do
                {
                  uint64_t v310 = (void *)*v310;
                  ++v311;
                }
                while (v310);
                if (v307 < v311)
                {
                  uint64_t v312 = *v301;
                  *uint64_t v301 = a2[-1].i64[1];
                  a2[-1].i64[1] = v312;
                  uint64_t v313 = *v301;
                  uint64_t v314 = *i64;
                  uint64_t v315 = *a3;
                  uint64_t v351 = 0;
                  int v316 = sub_1CD46DBEC(v315, v313, &v351);
                  uint64_t v317 = 0;
                  if (v316) {
                    uint64_t v317 = *(void **)(v351 + 8);
                  }
                  unsigned int v318 = 0;
                  do
                  {
                    uint64_t v317 = (void *)*v317;
                    ++v318;
                  }
                  while (v317);
                  uint64_t v319 = *a3;
                  uint64_t v351 = 0;
                  int v320 = sub_1CD46DBEC(v319, v314, &v351);
                  unsigned int v321 = 0;
                  if (v320) {
                    unsigned int v321 = *(void **)(v351 + 8);
                  }
                  unsigned int v322 = 0;
                  do
                  {
                    unsigned int v321 = (void *)*v321;
                    ++v322;
                  }
                  while (v321);
                  if (v318 < v322)
                  {
                    uint64_t v323 = *i64;
                    uint64_t v324 = *v301;
                    uint64_t *i64 = *v301;
                    *uint64_t v301 = v323;
                    uint64_t v325 = a1->i64[1];
                    uint64_t v326 = *a3;
                    uint64_t v351 = 0;
                    int v327 = sub_1CD46DBEC(v326, v324, &v351);
                    v328 = 0;
                    if (v327) {
                      v328 = *(void **)(v351 + 8);
                    }
                    unsigned int v329 = 0;
                    do
                    {
                      v328 = (void *)*v328;
                      ++v329;
                    }
                    while (v328);
                    uint64_t v330 = *a3;
                    uint64_t v351 = 0;
                    int v331 = sub_1CD46DBEC(v330, v325, &v351);
                    uint64_t v332 = 0;
                    if (v331) {
                      uint64_t v332 = *(void **)(v351 + 8);
                    }
                    unsigned int v333 = 0;
                    do
                    {
                      uint64_t v332 = (void *)*v332;
                      ++v333;
                    }
                    while (v332);
                    if (v329 < v333)
                    {
                      uint64_t v335 = a1->i64[1];
                      uint64_t v334 = a1[1].i64[0];
                      uint64_t v336 = a1->i64[0];
                      a1->i64[1] = v334;
                      a1[1].i64[0] = v335;
                      uint64_t v337 = *a3;
                      uint64_t v351 = 0;
                      int v338 = sub_1CD46DBEC(v337, v334, &v351);
                      int v339 = 0;
                      if (v338) {
                        int v339 = *(void **)(v351 + 8);
                      }
                      unsigned int v340 = 0;
                      do
                      {
                        int v339 = (void *)*v339;
                        ++v340;
                      }
                      while (v339);
                      uint64_t v341 = *a3;
                      uint64_t v351 = 0;
                      int v342 = sub_1CD46DBEC(v341, v336, &v351);
                      unsigned int v343 = 0;
                      if (v342) {
                        unsigned int v343 = *(void **)(v351 + 8);
                      }
                      unsigned int v344 = 0;
                      do
                      {
                        unsigned int v343 = (void *)*v343;
                        ++v344;
                      }
                      while (v343);
                      if (v340 < v344)
                      {
                        int8x16_t result = vextq_s8(*a1, *a1, 8uLL);
                        *a1 = result;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 191)
          {
            uint64_t v143 = &a1->i64[1];
            BOOL v145 = a1 == v11 || v143 == (uint64_t *)v11;
            if (a5)
            {
              if (!v145)
              {
                unint64_t v146 = (uint64_t *)a1;
                do
                {
                  int v147 = v143;
                  uint64_t v149 = *v146;
                  uint64_t v148 = v146[1];
                  uint64_t v150 = *a3;
                  uint64_t v351 = 0;
                  int v151 = sub_1CD46DBEC(v150, v148, &v351);
                  unint64_t v152 = 0;
                  if (v151) {
                    unint64_t v152 = *(void **)(v351 + 8);
                  }
                  unsigned int v153 = 0;
                  do
                  {
                    unint64_t v152 = (void *)*v152;
                    ++v153;
                  }
                  while (v152);
                  uint64_t v154 = *a3;
                  uint64_t v351 = 0;
                  int v155 = sub_1CD46DBEC(v154, v149, &v351);
                  int v156 = 0;
                  if (v155) {
                    int v156 = *(void **)(v351 + 8);
                  }
                  unsigned int v157 = 0;
                  do
                  {
                    int v156 = (void *)*v156;
                    ++v157;
                  }
                  while (v156);
                  if (v153 < v157)
                  {
                    uint64_t v158 = *v147;
                    uint64_t v159 = v147;
                    while (1)
                    {
                      uint64_t *v159 = *v146;
                      if (v146 == (uint64_t *)a1) {
                        break;
                      }
                      uint64_t v159 = v146;
                      uint64_t v161 = *--v146;
                      uint64_t v160 = v161;
                      uint64_t v162 = *a3;
                      uint64_t v351 = 0;
                      int v163 = sub_1CD46DBEC(v162, v158, &v351);
                      uint64_t v164 = 0;
                      if (v163) {
                        uint64_t v164 = *(void **)(v351 + 8);
                      }
                      unsigned int v165 = 0;
                      do
                      {
                        uint64_t v164 = (void *)*v164;
                        ++v165;
                      }
                      while (v164);
                      uint64_t v166 = *a3;
                      uint64_t v351 = 0;
                      int v167 = sub_1CD46DBEC(v166, v160, &v351);
                      uint64_t v168 = 0;
                      if (v167) {
                        uint64_t v168 = *(void **)(v351 + 8);
                      }
                      unsigned int v169 = 0;
                      do
                      {
                        uint64_t v168 = (void *)*v168;
                        ++v169;
                      }
                      while (v168);
                      if (v165 >= v169) {
                        goto LABEL_185;
                      }
                    }
                    uint64_t v159 = (uint64_t *)a1;
LABEL_185:
                    uint64_t *v159 = v158;
                  }
                  uint64_t v143 = v147 + 1;
                  unint64_t v146 = v147;
                }
                while (v147 + 1 != (uint64_t *)a2);
              }
            }
            else if (!v145)
            {
              do
              {
                uint64_t v264 = v143;
                uint64_t v266 = a1->i64[0];
                uint64_t v265 = a1->i64[1];
                uint64_t v267 = *a3;
                uint64_t v351 = 0;
                int v268 = sub_1CD46DBEC(v267, v265, &v351);
                uint64_t v269 = 0;
                if (v268) {
                  uint64_t v269 = *(void **)(v351 + 8);
                }
                unsigned int v270 = 0;
                v271 = a2;
                do
                {
                  uint64_t v269 = (void *)*v269;
                  ++v270;
                }
                while (v269);
                uint64_t v272 = *a3;
                uint64_t v351 = 0;
                int v273 = sub_1CD46DBEC(v272, v266, &v351);
                uint64_t v274 = 0;
                if (v273) {
                  uint64_t v274 = *(void **)(v351 + 8);
                }
                unsigned int v275 = 0;
                do
                {
                  uint64_t v274 = (void *)*v274;
                  ++v275;
                }
                while (v274);
                if (v270 < v275)
                {
                  uint64_t v276 = *v264;
                  v277 = v264;
                  do
                  {
                    int v278 = v277;
                    v277 = (uint64_t *)a1;
                    *int v278 = a1->i64[0];
                    uint64_t v280 = a1[-1].i64[1];
                    a1 = (int8x16_t *)((char *)a1 - 8);
                    uint64_t v279 = v280;
                    uint64_t v281 = *a3;
                    uint64_t v351 = 0;
                    int v282 = sub_1CD46DBEC(v281, v276, &v351);
                    int v283 = 0;
                    if (v282) {
                      int v283 = *(void **)(v351 + 8);
                    }
                    unsigned int v284 = 0;
                    do
                    {
                      int v283 = (void *)*v283;
                      ++v284;
                    }
                    while (v283);
                    uint64_t v285 = *a3;
                    uint64_t v351 = 0;
                    int v286 = sub_1CD46DBEC(v285, v279, &v351);
                    uint64_t v287 = 0;
                    if (v286) {
                      uint64_t v287 = *(void **)(v351 + 8);
                    }
                    unsigned int v288 = 0;
                    do
                    {
                      uint64_t v287 = (void *)*v287;
                      ++v288;
                    }
                    while (v287);
                  }
                  while (v284 < v288);
                  uint64_t *v277 = v276;
                  v271 = a2;
                }
                uint64_t v143 = v264 + 1;
                a1 = (int8x16_t *)v264;
              }
              while (v264 + 1 != (uint64_t *)v271);
            }
            return result;
          }
          if (!a4)
          {
            if (a1 != v11)
            {
              int64_t v170 = (unint64_t)(v14 - 2) >> 1;
              int64_t v171 = v170;
              do
              {
                int64_t v172 = v171;
                if (v170 >= v171)
                {
                  uint64_t v173 = (2 * v171) | 1;
                  uint64_t v174 = &a1->i64[v173];
                  if (2 * v171 + 2 < v14)
                  {
                    uint64_t v175 = *v174;
                    int v176 = &a1->i64[v173];
                    uint64_t v178 = v174[1];
                    ++v174;
                    uint64_t v177 = v178;
                    uint64_t v179 = *a3;
                    uint64_t v351 = 0;
                    int v180 = sub_1CD46DBEC(v179, v175, &v351);
                    v181 = 0;
                    if (v180) {
                      v181 = *(void **)(v351 + 8);
                    }
                    unsigned int v182 = 0;
                    do
                    {
                      v181 = (void *)*v181;
                      ++v182;
                    }
                    while (v181);
                    uint64_t v183 = *a3;
                    uint64_t v351 = 0;
                    int v184 = sub_1CD46DBEC(v183, v177, &v351);
                    unsigned int v185 = 0;
                    if (v184) {
                      unsigned int v185 = *(void **)(v351 + 8);
                    }
                    unsigned int v186 = 0;
                    do
                    {
                      unsigned int v185 = (void *)*v185;
                      ++v186;
                    }
                    while (v185);
                    if (v182 < v186) {
                      uint64_t v173 = 2 * v172 + 2;
                    }
                    else {
                      uint64_t v174 = v176;
                    }
                    a1 = v349;
                  }
                  unint64_t v187 = &a1->i64[v172];
                  int v188 = v174;
                  uint64_t v189 = *v174;
                  uint64_t v190 = *v187;
                  uint64_t v191 = *a3;
                  uint64_t v351 = 0;
                  int v192 = sub_1CD46DBEC(v191, v189, &v351);
                  int v193 = 0;
                  if (v192) {
                    int v193 = *(void **)(v351 + 8);
                  }
                  unsigned int v194 = 0;
                  do
                  {
                    int v193 = (void *)*v193;
                    ++v194;
                  }
                  while (v193);
                  uint64_t v195 = *a3;
                  uint64_t v351 = 0;
                  int v196 = sub_1CD46DBEC(v195, v190, &v351);
                  uint64_t v197 = 0;
                  if (v196) {
                    uint64_t v197 = *(void **)(v351 + 8);
                  }
                  unsigned int v198 = 0;
                  do
                  {
                    uint64_t v197 = (void *)*v197;
                    ++v198;
                  }
                  while (v197);
                  if (v194 >= v198)
                  {
                    uint64_t v347 = *v187;
                    unint64_t v199 = v188;
                    do
                    {
                      uint64_t v200 = v199;
                      uint64_t *v187 = *v199;
                      if (v170 < v173) {
                        break;
                      }
                      uint64_t v201 = (2 * v173) | 1;
                      unint64_t v199 = &a1->i64[v201];
                      uint64_t v202 = 2 * v173 + 2;
                      if (v202 < v14)
                      {
                        uint64_t v203 = *v199;
                        char v345 = &a1->i64[v201];
                        uint64_t v205 = v199[1];
                        ++v199;
                        uint64_t v204 = v205;
                        uint64_t v206 = *a3;
                        uint64_t v351 = 0;
                        int v207 = sub_1CD46DBEC(v206, v203, &v351);
                        uint64_t v208 = 0;
                        if (v207) {
                          uint64_t v208 = *(void **)(v351 + 8);
                        }
                        unsigned int v209 = 0;
                        do
                        {
                          uint64_t v208 = (void *)*v208;
                          ++v209;
                        }
                        while (v208);
                        uint64_t v210 = *a3;
                        uint64_t v351 = 0;
                        int v211 = sub_1CD46DBEC(v210, v204, &v351);
                        uint64_t v212 = 0;
                        if (v211) {
                          uint64_t v212 = *(void **)(v351 + 8);
                        }
                        unsigned int v213 = 0;
                        do
                        {
                          uint64_t v212 = (void *)*v212;
                          ++v213;
                        }
                        while (v212);
                        if (v209 < v213)
                        {
                          uint64_t v173 = v202;
                        }
                        else
                        {
                          unint64_t v199 = v345;
                          uint64_t v173 = v201;
                        }
                        a1 = v349;
                      }
                      else
                      {
                        uint64_t v173 = (2 * v173) | 1;
                      }
                      uint64_t v214 = *v199;
                      uint64_t v215 = *a3;
                      uint64_t v351 = 0;
                      int v216 = sub_1CD46DBEC(v215, v214, &v351);
                      unsigned int v217 = 0;
                      if (v216) {
                        unsigned int v217 = *(void **)(v351 + 8);
                      }
                      unsigned int v218 = 0;
                      do
                      {
                        unsigned int v217 = (void *)*v217;
                        ++v218;
                      }
                      while (v217);
                      uint64_t v219 = *a3;
                      uint64_t v351 = 0;
                      int v220 = sub_1CD46DBEC(v219, v347, &v351);
                      int v221 = 0;
                      if (v220) {
                        int v221 = *(void **)(v351 + 8);
                      }
                      unsigned int v222 = 0;
                      do
                      {
                        int v221 = (void *)*v221;
                        ++v222;
                      }
                      while (v221);
                      unint64_t v187 = v200;
                    }
                    while (v218 >= v222);
                    uint64_t *v200 = v347;
                  }
                }
                int64_t v171 = v172 - 1;
              }
              while (v172);
              do
              {
                uint64_t v223 = 0;
                uint64_t v348 = a1->i64[0];
                uint64_t v224 = (uint64_t *)a1;
                do
                {
                  unsigned int v225 = &v224[v223 + 1];
                  uint64_t v226 = (2 * v223) | 1;
                  uint64_t v227 = 2 * v223 + 2;
                  if (v227 < v14)
                  {
                    uint64_t v228 = *v225;
                    uint64_t v229 = v224[v223 + 2];
                    uint64_t v230 = *a3;
                    uint64_t v351 = 0;
                    int v231 = sub_1CD46DBEC(v230, v228, &v351);
                    uint64_t v232 = 0;
                    if (v231) {
                      uint64_t v232 = *(void **)(v351 + 8);
                    }
                    unsigned int v233 = 0;
                    do
                    {
                      uint64_t v232 = (void *)*v232;
                      ++v233;
                    }
                    while (v232);
                    uint64_t v234 = *a3;
                    uint64_t v351 = 0;
                    int v235 = sub_1CD46DBEC(v234, v229, &v351);
                    unint64_t v236 = 0;
                    if (v235) {
                      unint64_t v236 = *(void **)(v351 + 8);
                    }
                    unsigned int v237 = 0;
                    do
                    {
                      unint64_t v236 = (void *)*v236;
                      ++v237;
                    }
                    while (v236);
                    if (v233 < v237)
                    {
                      ++v225;
                      uint64_t v226 = v227;
                    }
                    a1 = v349;
                  }
                  *uint64_t v224 = *v225;
                  uint64_t v224 = v225;
                  uint64_t v223 = v226;
                }
                while (v226 <= (uint64_t)((unint64_t)(v14 - 2) >> 1));
                uint64_t v238 = &a2[-1].i64[1];
                BOOL v6 = v225 == (uint64_t *)&a2[-1].u64[1];
                a2 = (int8x16_t *)((char *)a2 - 8);
                if (v6)
                {
                  *unsigned int v225 = v348;
                }
                else
                {
                  *unsigned int v225 = *v238;
                  uint64_t *v238 = v348;
                  uint64_t v239 = (char *)v225 - (char *)a1 + 8;
                  if (v239 >= 9)
                  {
                    unint64_t v240 = (((unint64_t)v239 >> 3) - 2) >> 1;
                    uint64_t v241 = &a1->i64[v240];
                    uint64_t v242 = *v241;
                    uint64_t v243 = *v225;
                    uint64_t v244 = *a3;
                    uint64_t v351 = 0;
                    int v245 = sub_1CD46DBEC(v244, v242, &v351);
                    uint64_t v246 = 0;
                    if (v245) {
                      uint64_t v246 = *(void **)(v351 + 8);
                    }
                    unsigned int v247 = 0;
                    do
                    {
                      uint64_t v246 = (void *)*v246;
                      ++v247;
                    }
                    while (v246);
                    uint64_t v248 = *a3;
                    uint64_t v351 = 0;
                    int v249 = sub_1CD46DBEC(v248, v243, &v351);
                    unint64_t v250 = 0;
                    if (v249) {
                      unint64_t v250 = *(void **)(v351 + 8);
                    }
                    unsigned int v251 = 0;
                    do
                    {
                      unint64_t v250 = (void *)*v250;
                      ++v251;
                    }
                    while (v250);
                    if (v247 < v251)
                    {
                      uint64_t v252 = *v225;
                      do
                      {
                        uint64_t v253 = v241;
                        *unsigned int v225 = *v241;
                        if (!v240) {
                          break;
                        }
                        unint64_t v240 = (v240 - 1) >> 1;
                        uint64_t v241 = &a1->i64[v240];
                        uint64_t v254 = *v241;
                        uint64_t v255 = *a3;
                        uint64_t v351 = 0;
                        int v256 = sub_1CD46DBEC(v255, v254, &v351);
                        v257 = 0;
                        if (v256) {
                          v257 = *(void **)(v351 + 8);
                        }
                        unsigned int v258 = 0;
                        do
                        {
                          v257 = (void *)*v257;
                          ++v258;
                        }
                        while (v257);
                        uint64_t v259 = *a3;
                        uint64_t v351 = 0;
                        int v260 = sub_1CD46DBEC(v259, v252, &v351);
                        uint64_t v261 = 0;
                        if (v260) {
                          uint64_t v261 = *(void **)(v351 + 8);
                        }
                        unsigned int v262 = 0;
                        do
                        {
                          uint64_t v261 = (void *)*v261;
                          ++v262;
                        }
                        while (v261);
                        unsigned int v225 = v253;
                      }
                      while (v258 < v262);
                      *uint64_t v253 = v252;
                    }
                  }
                }
              }
              while (v14-- > 2);
            }
            return result;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          uint64_t v16 = &a1->i64[(unint64_t)v14 >> 1];
          if ((unint64_t)v13 < 0x401)
          {
            sub_1CCED6758(v16, a1->i64, v346, a3);
          }
          else
          {
            sub_1CCED6758(a1->i64, v16, v346, a3);
            sub_1CCED6758(&a1->i64[1], v16 - 1, a2[-1].i64, a3);
            sub_1CCED6758(a1[1].i64, &a1->i64[v15 + 1], &a2[-2].i64[1], a3);
            sub_1CCED6758(v16 - 1, v16, &a1->i64[v15 + 1], a3);
            uint64_t v17 = a1->i64[0];
            a1->i64[0] = *v16;
            uint64_t *v16 = v17;
          }
          --a4;
          if (a5) {
            break;
          }
          uint64_t v71 = a1[-1].i64[1];
          uint64_t v72 = a1->i64[0];
          uint64_t v73 = *a3;
          uint64_t v351 = 0;
          int v74 = sub_1CD46DBEC(v73, v71, &v351);
          uint64_t v75 = 0;
          if (v74) {
            uint64_t v75 = *(void **)(v351 + 8);
          }
          unsigned int v76 = 0;
          do
          {
            uint64_t v75 = (void *)*v75;
            ++v76;
          }
          while (v75);
          uint64_t v77 = *a3;
          uint64_t v351 = 0;
          int v78 = sub_1CD46DBEC(v77, v72, &v351);
          uint64_t v79 = 0;
          if (v78) {
            uint64_t v79 = *(void **)(v351 + 8);
          }
          unsigned int v80 = 0;
          do
          {
            uint64_t v79 = (void *)*v79;
            ++v80;
          }
          while (v79);
          if (v76 < v80) {
            break;
          }
          uint64_t v81 = a1->i64[0];
          uint64_t v82 = *v346;
          uint64_t v83 = *a3;
          uint64_t v351 = 0;
          int v84 = sub_1CD46DBEC(v83, v81, &v351);
          int v85 = 0;
          if (v84) {
            int v85 = *(void **)(v351 + 8);
          }
          unsigned int v86 = 0;
          do
          {
            int v85 = (void *)*v85;
            ++v86;
          }
          while (v85);
          uint64_t v87 = *a3;
          uint64_t v351 = 0;
          int v88 = sub_1CD46DBEC(v87, v82, &v351);
          uint64_t v89 = 0;
          if (v88) {
            uint64_t v89 = *(void **)(v351 + 8);
          }
          unsigned int v90 = 0;
          do
          {
            uint64_t v89 = (void *)*v89;
            ++v90;
          }
          while (v89);
          uint64_t v12 = a1;
          if (v86 >= v90)
          {
            do
            {
              uint64_t v12 = (int8x16_t *)((char *)v12 + 8);
              if (v12 >= v11) {
                break;
              }
              uint64_t v134 = v12->i64[0];
              uint64_t v135 = *a3;
              uint64_t v351 = 0;
              int v136 = sub_1CD46DBEC(v135, v81, &v351);
              int v137 = 0;
              if (v136) {
                int v137 = *(void **)(v351 + 8);
              }
              unsigned int v138 = 0;
              do
              {
                int v137 = (void *)*v137;
                ++v138;
              }
              while (v137);
              uint64_t v139 = *a3;
              uint64_t v351 = 0;
              int v140 = sub_1CD46DBEC(v139, v134, &v351);
              v141 = 0;
              if (v140) {
                v141 = *(void **)(v351 + 8);
              }
              unsigned int v142 = 0;
              do
              {
                v141 = (void *)*v141;
                ++v142;
              }
              while (v141);
            }
            while (v138 >= v142);
          }
          else
          {
            uint64_t v12 = a1;
            do
            {
              uint64_t v92 = v12->i64[1];
              uint64_t v12 = (int8x16_t *)((char *)v12 + 8);
              uint64_t v91 = v92;
              uint64_t v93 = *a3;
              uint64_t v351 = 0;
              int v94 = sub_1CD46DBEC(v93, v81, &v351);
              uint64_t v95 = 0;
              if (v94) {
                uint64_t v95 = *(void **)(v351 + 8);
              }
              unsigned int v96 = 0;
              do
              {
                uint64_t v95 = (void *)*v95;
                ++v96;
              }
              while (v95);
              uint64_t v97 = *a3;
              uint64_t v351 = 0;
              int v98 = sub_1CD46DBEC(v97, v91, &v351);
              unsigned int v99 = 0;
              if (v98) {
                unsigned int v99 = *(void **)(v351 + 8);
              }
              unsigned int v100 = 0;
              do
              {
                unsigned int v99 = (void *)*v99;
                ++v100;
              }
              while (v99);
            }
            while (v96 >= v100);
          }
          unint64_t v101 = v11;
          if (v12 < v11)
          {
            unint64_t v101 = v11;
            do
            {
              uint64_t v103 = v101[-1].i64[1];
              unint64_t v101 = (int8x16_t *)((char *)v101 - 8);
              uint64_t v102 = v103;
              uint64_t v104 = *a3;
              uint64_t v351 = 0;
              int v105 = sub_1CD46DBEC(v104, v81, &v351);
              int v106 = 0;
              if (v105) {
                int v106 = *(void **)(v351 + 8);
              }
              unsigned int v107 = 0;
              do
              {
                int v106 = (void *)*v106;
                ++v107;
              }
              while (v106);
              uint64_t v108 = *a3;
              uint64_t v351 = 0;
              int v109 = sub_1CD46DBEC(v108, v102, &v351);
              unsigned int v110 = 0;
              if (v109) {
                unsigned int v110 = *(void **)(v351 + 8);
              }
              unsigned int v111 = 0;
              do
              {
                unsigned int v110 = (void *)*v110;
                ++v111;
              }
              while (v110);
            }
            while (v107 < v111);
          }
          while (v12 < v101)
          {
            uint64_t v112 = v12->i64[0];
            v12->i64[0] = v101->i64[0];
            v101->i64[0] = v112;
            do
            {
              uint64_t v114 = v12->i64[1];
              uint64_t v12 = (int8x16_t *)((char *)v12 + 8);
              uint64_t v113 = v114;
              uint64_t v115 = *a3;
              uint64_t v351 = 0;
              int v116 = sub_1CD46DBEC(v115, v81, &v351);
              uint64_t v117 = 0;
              if (v116) {
                uint64_t v117 = *(void **)(v351 + 8);
              }
              unsigned int v118 = 0;
              do
              {
                uint64_t v117 = (void *)*v117;
                ++v118;
              }
              while (v117);
              uint64_t v119 = *a3;
              uint64_t v351 = 0;
              int v120 = sub_1CD46DBEC(v119, v113, &v351);
              uint64_t v121 = 0;
              if (v120) {
                uint64_t v121 = *(void **)(v351 + 8);
              }
              unsigned int v122 = 0;
              do
              {
                uint64_t v121 = (void *)*v121;
                ++v122;
              }
              while (v121);
            }
            while (v118 >= v122);
            do
            {
              uint64_t v124 = v101[-1].i64[1];
              unint64_t v101 = (int8x16_t *)((char *)v101 - 8);
              uint64_t v123 = v124;
              uint64_t v125 = *a3;
              uint64_t v351 = 0;
              int v126 = sub_1CD46DBEC(v125, v81, &v351);
              uint64_t v127 = 0;
              if (v126) {
                uint64_t v127 = *(void **)(v351 + 8);
              }
              unsigned int v128 = 0;
              do
              {
                uint64_t v127 = (void *)*v127;
                ++v128;
              }
              while (v127);
              uint64_t v129 = *a3;
              uint64_t v351 = 0;
              int v130 = sub_1CD46DBEC(v129, v123, &v351);
              int v131 = 0;
              if (v130) {
                int v131 = *(void **)(v351 + 8);
              }
              unsigned int v132 = 0;
              do
              {
                int v131 = (void *)*v131;
                ++v132;
              }
              while (v131);
            }
            while (v128 < v132);
          }
          int v133 = &v12[-1].i64[1];
          BOOL v5 = &v12[-1].u64[1] >= (unint64_t *)a1;
          BOOL v6 = &v12[-1].u64[1] == (unint64_t *)a1;
          if (&v12[-1].u64[1] != (unint64_t *)a1) {
            a1->i64[0] = *v133;
          }
          a5 = 0;
          *int v133 = v81;
        }
        uint64_t v18 = a1->i64[0];
        uint64_t v19 = a1;
        do
        {
          int v20 = v19;
          uint64_t v21 = v19->i64[1];
          uint64_t v19 = (int8x16_t *)((char *)v19 + 8);
          uint64_t v22 = *a3;
          uint64_t v351 = 0;
          int v23 = sub_1CD46DBEC(v22, v21, &v351);
          uint64_t v24 = 0;
          if (v23) {
            uint64_t v24 = *(void **)(v351 + 8);
          }
          unsigned int v25 = 0;
          do
          {
            uint64_t v24 = (void *)*v24;
            ++v25;
          }
          while (v24);
          uint64_t v26 = *a3;
          uint64_t v351 = 0;
          int v27 = sub_1CD46DBEC(v26, v18, &v351);
          unint64_t v28 = 0;
          if (v27) {
            unint64_t v28 = *(void **)(v351 + 8);
          }
          unsigned int v29 = 0;
          do
          {
            unint64_t v28 = (void *)*v28;
            ++v29;
          }
          while (v28);
        }
        while (v25 < v29);
        if (v20 == a1)
        {
          uint64_t v11 = a2;
          do
          {
            if (v19 >= v11) {
              break;
            }
            uint64_t v62 = v11[-1].i64[1];
            uint64_t v11 = (int8x16_t *)((char *)v11 - 8);
            uint64_t v63 = *a3;
            uint64_t v351 = 0;
            int v64 = sub_1CD46DBEC(v63, v62, &v351);
            uint64_t v65 = 0;
            if (v64) {
              uint64_t v65 = *(void **)(v351 + 8);
            }
            unsigned int v66 = 0;
            do
            {
              uint64_t v65 = (void *)*v65;
              ++v66;
            }
            while (v65);
            uint64_t v67 = *a3;
            uint64_t v351 = 0;
            int v68 = sub_1CD46DBEC(v67, v18, &v351);
            uint64_t v69 = 0;
            if (v68) {
              uint64_t v69 = *(void **)(v351 + 8);
            }
            unsigned int v70 = 0;
            do
            {
              uint64_t v69 = (void *)*v69;
              ++v70;
            }
            while (v69);
          }
          while (v66 >= v70);
        }
        else
        {
          do
          {
            uint64_t v30 = v11[-1].i64[1];
            uint64_t v11 = (int8x16_t *)((char *)v11 - 8);
            uint64_t v31 = *a3;
            uint64_t v351 = 0;
            int v32 = sub_1CD46DBEC(v31, v30, &v351);
            uint64_t v33 = 0;
            if (v32) {
              uint64_t v33 = *(void **)(v351 + 8);
            }
            unsigned int v34 = 0;
            do
            {
              uint64_t v33 = (void *)*v33;
              ++v34;
            }
            while (v33);
            uint64_t v35 = *a3;
            uint64_t v351 = 0;
            int v36 = sub_1CD46DBEC(v35, v18, &v351);
            int v37 = 0;
            if (v36) {
              int v37 = *(void **)(v351 + 8);
            }
            unsigned int v38 = 0;
            do
            {
              int v37 = (void *)*v37;
              ++v38;
            }
            while (v37);
          }
          while (v34 >= v38);
        }
        uint64_t v12 = v19;
        if (v19 < v11)
        {
          uint64_t v39 = v11;
          do
          {
            uint64_t v40 = v12->i64[0];
            v12->i64[0] = v39->i64[0];
            v39->i64[0] = v40;
            do
            {
              uint64_t v41 = v12->i64[1];
              uint64_t v12 = (int8x16_t *)((char *)v12 + 8);
              uint64_t v42 = *a3;
              uint64_t v351 = 0;
              int v43 = sub_1CD46DBEC(v42, v41, &v351);
              uint64_t v44 = 0;
              if (v43) {
                uint64_t v44 = *(void **)(v351 + 8);
              }
              unsigned int v45 = 0;
              do
              {
                uint64_t v44 = (void *)*v44;
                ++v45;
              }
              while (v44);
              uint64_t v46 = *a3;
              uint64_t v351 = 0;
              int v47 = sub_1CD46DBEC(v46, v18, &v351);
              uint64_t v48 = 0;
              if (v47) {
                uint64_t v48 = *(void **)(v351 + 8);
              }
              unsigned int v49 = 0;
              do
              {
                uint64_t v48 = (void *)*v48;
                ++v49;
              }
              while (v48);
            }
            while (v45 < v49);
            do
            {
              uint64_t v50 = v39[-1].i64[1];
              uint64_t v39 = (int8x16_t *)((char *)v39 - 8);
              uint64_t v51 = *a3;
              uint64_t v351 = 0;
              int v52 = sub_1CD46DBEC(v51, v50, &v351);
              uint64_t v53 = 0;
              if (v52) {
                uint64_t v53 = *(void **)(v351 + 8);
              }
              unsigned int v54 = 0;
              do
              {
                uint64_t v53 = (void *)*v53;
                ++v54;
              }
              while (v53);
              uint64_t v55 = *a3;
              uint64_t v351 = 0;
              int v56 = sub_1CD46DBEC(v55, v18, &v351);
              uint64_t v57 = 0;
              if (v56) {
                uint64_t v57 = *(void **)(v351 + 8);
              }
              unsigned int v58 = 0;
              do
              {
                uint64_t v57 = (void *)*v57;
                ++v58;
              }
              while (v57);
            }
            while (v54 >= v58);
          }
          while (v12 < v39);
        }
        uint64_t v59 = &v12[-1].i64[1];
        if (&v12[-1].u64[1] != (unint64_t *)a1) {
          a1->i64[0] = *v59;
        }
        uint64_t *v59 = v18;
        BOOL v5 = v19 >= v11;
        uint64_t v11 = a2;
        if (v5) {
          break;
        }
LABEL_58:
        sub_1CCED54D8(a1, &v12[-1].u64[1], a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v60 = sub_1CCED6A28(a1, (int8x16_t *)((char *)v12 - 8), a3);
      if (sub_1CCED6A28(v12, a2, a3)) {
        break;
      }
      if (!v60) {
        goto LABEL_58;
      }
    }
    a2 = (int8x16_t *)((char *)v12 - 8);
    if (!v60) {
      continue;
    }
    return result;
  }
}

uint64_t sub_1CCED6758(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = *a2;
  uint64_t v9 = *a1;
  uint64_t v10 = *a4;
  uint64_t v55 = 0;
  int v11 = sub_1CD46DBEC(v10, v8, &v55);
  uint64_t v12 = 0;
  if (v11) {
    uint64_t v12 = *(void **)(v55 + 8);
  }
  unsigned int v13 = 0;
  do
  {
    uint64_t v12 = (void *)*v12;
    ++v13;
  }
  while (v12);
  uint64_t v14 = *a4;
  uint64_t v55 = 0;
  int v15 = sub_1CD46DBEC(v14, v9, &v55);
  uint64_t v16 = 0;
  if (v15) {
    uint64_t v16 = *(void **)(v55 + 8);
  }
  unsigned int v17 = 0;
  do
  {
    uint64_t v16 = (void *)*v16;
    ++v17;
  }
  while (v16);
  uint64_t v18 = *a3;
  uint64_t v19 = *a2;
  uint64_t v20 = *a4;
  if (v13 >= v17)
  {
    uint64_t v55 = 0;
    int v29 = sub_1CD46DBEC(v20, v18, &v55);
    uint64_t v30 = 0;
    if (v29) {
      uint64_t v30 = *(void **)(v55 + 8);
    }
    unsigned int v31 = 0;
    do
    {
      uint64_t v30 = (void *)*v30;
      ++v31;
    }
    while (v30);
    uint64_t v32 = *a4;
    uint64_t v55 = 0;
    uint64_t result = sub_1CD46DBEC(v32, v19, &v55);
    uint64_t v33 = 0;
    if (result) {
      uint64_t v33 = *(void **)(v55 + 8);
    }
    unsigned int v34 = 0;
    do
    {
      uint64_t v33 = (void *)*v33;
      ++v34;
    }
    while (v33);
    if (v31 < v34)
    {
      uint64_t v44 = *a2;
      *a2 = *a3;
      *a3 = v44;
      uint64_t v45 = *a2;
      uint64_t v46 = *a1;
      uint64_t v47 = *a4;
      uint64_t v55 = 0;
      int v48 = sub_1CD46DBEC(v47, v45, &v55);
      unsigned int v49 = 0;
      if (v48) {
        unsigned int v49 = *(void **)(v55 + 8);
      }
      unsigned int v50 = 0;
      do
      {
        unsigned int v49 = (void *)*v49;
        ++v50;
      }
      while (v49);
      uint64_t v51 = *a4;
      uint64_t v55 = 0;
      uint64_t result = sub_1CD46DBEC(v51, v46, &v55);
      int v52 = 0;
      if (result) {
        int v52 = *(void **)(v55 + 8);
      }
      unsigned int v53 = 0;
      do
      {
        int v52 = (void *)*v52;
        ++v53;
      }
      while (v52);
      if (v50 < v53)
      {
        uint64_t v54 = *a1;
        *a1 = *a2;
        *a2 = v54;
      }
    }
  }
  else
  {
    uint64_t v55 = 0;
    int v21 = sub_1CD46DBEC(v20, v18, &v55);
    uint64_t v22 = 0;
    if (v21) {
      uint64_t v22 = *(void **)(v55 + 8);
    }
    unsigned int v23 = 0;
    do
    {
      uint64_t v22 = (void *)*v22;
      ++v23;
    }
    while (v22);
    uint64_t v24 = *a4;
    uint64_t v55 = 0;
    uint64_t result = sub_1CD46DBEC(v24, v19, &v55);
    uint64_t v26 = 0;
    if (result) {
      uint64_t v26 = *(void **)(v55 + 8);
    }
    unsigned int v27 = 0;
    do
    {
      uint64_t v26 = (void *)*v26;
      ++v27;
    }
    while (v26);
    uint64_t v28 = *a1;
    if (v23 >= v27)
    {
      *a1 = *a2;
      *a2 = v28;
      uint64_t v35 = *a3;
      uint64_t v36 = *a4;
      uint64_t v55 = 0;
      int v37 = sub_1CD46DBEC(v36, v35, &v55);
      unsigned int v38 = 0;
      if (v37) {
        unsigned int v38 = *(void **)(v55 + 8);
      }
      unsigned int v39 = 0;
      do
      {
        unsigned int v38 = (void *)*v38;
        ++v39;
      }
      while (v38);
      uint64_t v40 = *a4;
      uint64_t v55 = 0;
      uint64_t result = sub_1CD46DBEC(v40, v28, &v55);
      uint64_t v41 = 0;
      if (result) {
        uint64_t v41 = *(void **)(v55 + 8);
      }
      unsigned int v42 = 0;
      do
      {
        uint64_t v41 = (void *)*v41;
        ++v42;
      }
      while (v41);
      if (v39 < v42)
      {
        uint64_t v43 = *a2;
        *a2 = *a3;
        *a3 = v43;
      }
    }
    else
    {
      *a1 = *a3;
      *a3 = v28;
    }
  }
  return result;
}

BOOL sub_1CCED6A28(int8x16_t *a1, int8x16_t *a2, uint64_t *a3)
{
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v33 = a2[-1].i64[1];
      uint64_t v34 = a1->i64[0];
      uint64_t v35 = *a3;
      uint64_t v89 = 0;
      int v36 = sub_1CD46DBEC(v35, v33, &v89);
      int v37 = 0;
      if (v36) {
        int v37 = *(void **)(v89 + 8);
      }
      unsigned int v38 = 0;
      do
      {
        int v37 = (void *)*v37;
        ++v38;
      }
      while (v37);
      uint64_t v39 = *a3;
      uint64_t v89 = 0;
      int v40 = sub_1CD46DBEC(v39, v34, &v89);
      uint64_t v41 = 0;
      if (v40) {
        uint64_t v41 = *(void **)(v89 + 8);
      }
      unsigned int v42 = 0;
      do
      {
        uint64_t v41 = (void *)*v41;
        ++v42;
      }
      while (v41);
      if (v38 < v42)
      {
        uint64_t v43 = a1->i64[0];
        a1->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v43;
      }
      return 1;
    case 3:
      sub_1CCED6758(a1->i64, &a1->i64[1], &a2[-1].i64[1], a3);
      return 1;
    case 4:
      sub_1CCED6F18(a1->i64, &a1->i64[1], a1[1].i64, &a2[-1].i64[1], a3);
      return 1;
    case 5:
      i64 = a1[1].i64;
      uint64_t v45 = &a1[1].i64[1];
      sub_1CCED6F18(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1], a3);
      uint64_t v46 = a2[-1].i64[1];
      uint64_t v47 = a1[1].i64[1];
      uint64_t v48 = *a3;
      uint64_t v89 = 0;
      int v49 = sub_1CD46DBEC(v48, v46, &v89);
      unsigned int v50 = 0;
      if (v49) {
        unsigned int v50 = *(void **)(v89 + 8);
      }
      unsigned int v51 = 0;
      do
      {
        unsigned int v50 = (void *)*v50;
        ++v51;
      }
      while (v50);
      uint64_t v52 = *a3;
      uint64_t v89 = 0;
      int v53 = sub_1CD46DBEC(v52, v47, &v89);
      uint64_t v54 = 0;
      if (v53) {
        uint64_t v54 = *(void **)(v89 + 8);
      }
      unsigned int v55 = 0;
      do
      {
        uint64_t v54 = (void *)*v54;
        ++v55;
      }
      while (v54);
      if (v51 < v55)
      {
        uint64_t v56 = *v45;
        uint64_t *v45 = a2[-1].i64[1];
        a2[-1].i64[1] = v56;
        uint64_t v57 = *v45;
        uint64_t v58 = *i64;
        uint64_t v59 = *a3;
        uint64_t v89 = 0;
        int v60 = sub_1CD46DBEC(v59, v57, &v89);
        uint64_t v61 = 0;
        if (v60) {
          uint64_t v61 = *(void **)(v89 + 8);
        }
        unsigned int v62 = 0;
        do
        {
          uint64_t v61 = (void *)*v61;
          ++v62;
        }
        while (v61);
        uint64_t v63 = *a3;
        uint64_t v89 = 0;
        int v64 = sub_1CD46DBEC(v63, v58, &v89);
        uint64_t v65 = 0;
        if (v64) {
          uint64_t v65 = *(void **)(v89 + 8);
        }
        unsigned int v66 = 0;
        do
        {
          uint64_t v65 = (void *)*v65;
          ++v66;
        }
        while (v65);
        if (v62 < v66)
        {
          uint64_t v67 = *i64;
          uint64_t v68 = *v45;
          uint64_t *i64 = *v45;
          uint64_t *v45 = v67;
          uint64_t v69 = a1->i64[1];
          uint64_t v70 = *a3;
          uint64_t v89 = 0;
          int v71 = sub_1CD46DBEC(v70, v68, &v89);
          uint64_t v72 = 0;
          if (v71) {
            uint64_t v72 = *(void **)(v89 + 8);
          }
          unsigned int v73 = 0;
          do
          {
            uint64_t v72 = (void *)*v72;
            ++v73;
          }
          while (v72);
          uint64_t v74 = *a3;
          uint64_t v89 = 0;
          int v75 = sub_1CD46DBEC(v74, v69, &v89);
          unsigned int v76 = 0;
          if (v75) {
            unsigned int v76 = *(void **)(v89 + 8);
          }
          unsigned int v77 = 0;
          do
          {
            unsigned int v76 = (void *)*v76;
            ++v77;
          }
          while (v76);
          if (v73 < v77)
          {
            uint64_t v79 = a1->i64[1];
            uint64_t v78 = a1[1].i64[0];
            uint64_t v80 = a1->i64[0];
            a1->i64[1] = v78;
            a1[1].i64[0] = v79;
            uint64_t v81 = *a3;
            uint64_t v89 = 0;
            int v82 = sub_1CD46DBEC(v81, v78, &v89);
            uint64_t v83 = 0;
            if (v82) {
              uint64_t v83 = *(void **)(v89 + 8);
            }
            unsigned int v84 = 0;
            do
            {
              uint64_t v83 = (void *)*v83;
              ++v84;
            }
            while (v83);
            uint64_t v85 = *a3;
            uint64_t v89 = 0;
            int v86 = sub_1CD46DBEC(v85, v80, &v89);
            uint64_t v87 = 0;
            if (v86) {
              uint64_t v87 = *(void **)(v89 + 8);
            }
            unsigned int v88 = 0;
            do
            {
              uint64_t v87 = (void *)*v87;
              ++v88;
            }
            while (v87);
            if (v84 < v88) {
              *a1 = vextq_s8(*a1, *a1, 8uLL);
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v8 = a1[1].i64;
      sub_1CCED6758(a1->i64, &a1->i64[1], a1[1].i64, a3);
      uint64_t v9 = &a1[1].i64[1];
      if (&a1[1].u64[1] == (unint64_t *)a2) {
        return 1;
      }
      int v10 = 0;
      break;
  }
  while (1)
  {
    uint64_t v11 = *v9;
    uint64_t v12 = *v8;
    uint64_t v13 = *a3;
    uint64_t v89 = 0;
    int v14 = sub_1CD46DBEC(v13, v11, &v89);
    int v15 = 0;
    if (v14) {
      int v15 = *(void **)(v89 + 8);
    }
    unsigned int v16 = 0;
    do
    {
      int v15 = (void *)*v15;
      ++v16;
    }
    while (v15);
    uint64_t v17 = *a3;
    uint64_t v89 = 0;
    int v18 = sub_1CD46DBEC(v17, v12, &v89);
    uint64_t v19 = 0;
    if (v18) {
      uint64_t v19 = *(void **)(v89 + 8);
    }
    unsigned int v20 = 0;
    do
    {
      uint64_t v19 = (void *)*v19;
      ++v20;
    }
    while (v19);
    if (v16 < v20)
    {
      uint64_t v21 = *v9;
      uint64_t v22 = v9;
      while (1)
      {
        *uint64_t v22 = *v8;
        if (v8 == (uint64_t *)a1) {
          break;
        }
        uint64_t v22 = v8;
        uint64_t v24 = *--v8;
        uint64_t v23 = v24;
        uint64_t v25 = *a3;
        uint64_t v89 = 0;
        int v26 = sub_1CD46DBEC(v25, v21, &v89);
        unsigned int v27 = 0;
        if (v26) {
          unsigned int v27 = *(void **)(v89 + 8);
        }
        unsigned int v28 = 0;
        do
        {
          unsigned int v27 = (void *)*v27;
          ++v28;
        }
        while (v27);
        uint64_t v29 = *a3;
        uint64_t v89 = 0;
        int v30 = sub_1CD46DBEC(v29, v23, &v89);
        unsigned int v31 = 0;
        if (v30) {
          unsigned int v31 = *(void **)(v89 + 8);
        }
        unsigned int v32 = 0;
        do
        {
          unsigned int v31 = (void *)*v31;
          ++v32;
        }
        while (v31);
        if (v28 >= v32) {
          goto LABEL_27;
        }
      }
      uint64_t v22 = (uint64_t *)a1;
LABEL_27:
      *uint64_t v22 = v21;
      if (++v10 == 8) {
        return v9 + 1 == (uint64_t *)a2;
      }
    }
    uint64_t v8 = v9;
    BOOL result = 1;
    if (++v9 == (uint64_t *)a2) {
      return result;
    }
  }
}

uint64_t sub_1CCED6F18(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  sub_1CCED6758(a1, a2, a3, a5);
  uint64_t v10 = *a4;
  uint64_t v11 = *a3;
  uint64_t v12 = *a5;
  uint64_t v41 = 0;
  int v13 = sub_1CD46DBEC(v12, v10, &v41);
  int v14 = 0;
  if (v13) {
    int v14 = *(void **)(v41 + 8);
  }
  unsigned int v15 = 0;
  do
  {
    int v14 = (void *)*v14;
    ++v15;
  }
  while (v14);
  uint64_t v16 = *a5;
  uint64_t v41 = 0;
  uint64_t result = sub_1CD46DBEC(v16, v11, &v41);
  int v18 = 0;
  if (result) {
    int v18 = *(void **)(v41 + 8);
  }
  unsigned int v19 = 0;
  do
  {
    int v18 = (void *)*v18;
    ++v19;
  }
  while (v18);
  if (v15 < v19)
  {
    uint64_t v20 = *a3;
    *a3 = *a4;
    *a4 = v20;
    uint64_t v21 = *a3;
    uint64_t v22 = *a2;
    uint64_t v23 = *a5;
    uint64_t v41 = 0;
    int v24 = sub_1CD46DBEC(v23, v21, &v41);
    uint64_t v25 = 0;
    if (v24) {
      uint64_t v25 = *(void **)(v41 + 8);
    }
    unsigned int v26 = 0;
    do
    {
      uint64_t v25 = (void *)*v25;
      ++v26;
    }
    while (v25);
    uint64_t v27 = *a5;
    uint64_t v41 = 0;
    uint64_t result = sub_1CD46DBEC(v27, v22, &v41);
    unsigned int v28 = 0;
    if (result) {
      unsigned int v28 = *(void **)(v41 + 8);
    }
    unsigned int v29 = 0;
    do
    {
      unsigned int v28 = (void *)*v28;
      ++v29;
    }
    while (v28);
    if (v26 < v29)
    {
      uint64_t v30 = *a2;
      *a2 = *a3;
      *a3 = v30;
      uint64_t v31 = *a2;
      uint64_t v32 = *a1;
      uint64_t v33 = *a5;
      uint64_t v41 = 0;
      int v34 = sub_1CD46DBEC(v33, v31, &v41);
      uint64_t v35 = 0;
      if (v34) {
        uint64_t v35 = *(void **)(v41 + 8);
      }
      unsigned int v36 = 0;
      do
      {
        uint64_t v35 = (void *)*v35;
        ++v36;
      }
      while (v35);
      uint64_t v37 = *a5;
      uint64_t v41 = 0;
      uint64_t result = sub_1CD46DBEC(v37, v32, &v41);
      unsigned int v38 = 0;
      if (result) {
        unsigned int v38 = *(void **)(v41 + 8);
      }
      unsigned int v39 = 0;
      do
      {
        unsigned int v38 = (void *)*v38;
        ++v39;
      }
      while (v38);
      if (v36 < v39)
      {
        uint64_t v40 = *a1;
        *a1 = *a2;
        *a2 = v40;
      }
    }
  }
  return result;
}

BOOL sub_1CCED7100(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[3];
  if (*a1 != v2) {
    *a1 = v1 + 8;
  }
  return v1 != v2;
}

BOOL sub_1CCED7124(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v1 != v2) {
    *(void *)(a1 + 8) = v1 + 8;
  }
  return v1 != v2;
}

BOOL sub_1CCED7148(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 40);
  if (v1 != v2) {
    *(void *)(a1 + 16) = v1 + 8;
  }
  return v1 != v2;
}

uint64_t sub_1CCED716C(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = a2[1];
  unsigned int v4 = *((_DWORD *)a2 + 4);
  LODWORD(v5) = *((_DWORD *)a2 + 5);
  if (v3 == *a2) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = v4;
  }
  if (v5)
  {
    uint64_t v6 = 8 * v5;
    uint64_t v7 = (unint64_t *)a2[1];
    while (*v7 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v7;
      v6 -= 8;
      if (!v6) {
        goto LABEL_45;
      }
    }
  }
  else
  {
    uint64_t v7 = (unint64_t *)a2[1];
  }
  uint64_t v8 = (unint64_t *)(v3 + 8 * v5);
  if (v7 != v8)
  {
    int v9 = *(_DWORD *)(result + 80);
    int v10 = *(_DWORD *)(result + 72) - 1;
    unint64_t v11 = *v7;
LABEL_12:
    uint64_t v13 = *(void *)(v2 + 56);
    uint64_t v12 = *(void *)(v2 + 64);
    if (v12 == v13)
    {
      uint64_t result = *(unsigned int *)(v2 + 76);
      int v14 = (void *)(v12 + 8 * result);
      if (result)
      {
        uint64_t v15 = 0;
        while (*(void *)(v12 + v15) != v11)
        {
          v15 += 8;
          if (8 * result == v15) {
            goto LABEL_31;
          }
        }
        int v14 = (void *)(v12 + v15);
      }
LABEL_31:
      uint64_t v13 = *(void *)(v2 + 64);
    }
    else
    {
      unsigned int v16 = v10 & ((v11 >> 4) ^ (v11 >> 9));
      int v14 = (void *)(v12 + 8 * v16);
      uint64_t v17 = *v14;
      if (*v14 == -1)
      {
        int v18 = 0;
LABEL_41:
        if (v18) {
          int v14 = v18;
        }
        uint64_t result = *(unsigned int *)(v2 + 76);
        if (*v14 != v11) {
          int v14 = (void *)(v12 + 8 * *(unsigned int *)(v2 + 72));
        }
      }
      else
      {
        int v18 = 0;
        int v19 = 1;
        while (v17 != v11)
        {
          if (v18) {
            BOOL v20 = 0;
          }
          else {
            BOOL v20 = v17 == -2;
          }
          if (v20) {
            int v18 = v14;
          }
          unsigned int v21 = v16 + v19++;
          unsigned int v16 = v21 & v10;
          int v14 = (void *)(v12 + 8 * (v21 & v10));
          uint64_t v17 = *v14;
          if (*v14 == -1) {
            goto LABEL_41;
          }
        }
        uint64_t result = *(unsigned int *)(v2 + 76);
      }
    }
    unsigned int v22 = *(_DWORD *)(v2 + 72);
    if (v12 == v13) {
      unsigned int v22 = result;
    }
    if (v14 != (void *)(v12 + 8 * v22))
    {
      *int v14 = -2;
      *(_DWORD *)(v2 + 80) = ++v9;
    }
    uint64_t v23 = v7 + 1;
    while (v23 != v8)
    {
      unint64_t v24 = *v23++;
      unint64_t v11 = v24;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v7 = v23 - 1;
        goto LABEL_12;
      }
    }
  }
LABEL_45:
  unsigned int v26 = *(uint64_t **)(v2 + 32);
  uint64_t v25 = *(uint64_t **)(v2 + 40);
  if (v26 != v25)
  {
    uint64_t v28 = *a2;
    uint64_t v27 = a2[1];
    unsigned int v29 = v4 - 1;
    uint64_t v30 = *((unsigned int *)a2 + 5);
    if (v27 == *a2) {
      unsigned int v31 = *((_DWORD *)a2 + 5);
    }
    else {
      unsigned int v31 = *((_DWORD *)a2 + 4);
    }
    uint64_t v32 = (void *)(v27 + 8 * v31);
    uint64_t result = -2;
    uint64_t v33 = a2[1];
    while (1)
    {
      uint64_t v34 = *v26;
      if (v33 == v28)
      {
        if (v30)
        {
          uint64_t v35 = 0;
          while (*(void *)(v28 + v35) != v34)
          {
            v35 += 8;
            if (8 * v30 == v35)
            {
              unsigned int v36 = *((_DWORD *)a2 + 5);
              goto LABEL_70;
            }
          }
          uint64_t v45 = (void *)(v28 + v35);
          unsigned int v36 = *((_DWORD *)a2 + 5);
          uint64_t v33 = *a2;
        }
        else
        {
          unsigned int v36 = 0;
LABEL_70:
          uint64_t v33 = *a2;
          uint64_t v45 = (void *)(v28 + 8 * v30);
        }
      }
      else
      {
        unsigned int v37 = ((v34 >> 4) ^ (v34 >> 9)) & v29;
        unsigned int v38 = (void *)(v27 + 8 * v37);
        uint64_t v39 = *v38;
        if (*v38 == -1)
        {
          uint64_t v40 = 0;
LABEL_72:
          if (v40) {
            unsigned int v38 = v40;
          }
          uint64_t v44 = *v38;
        }
        else
        {
          uint64_t v40 = 0;
          int v41 = 1;
          while (v39 != v34)
          {
            if (v40) {
              BOOL v42 = 0;
            }
            else {
              BOOL v42 = v39 == -2;
            }
            if (v42) {
              uint64_t v40 = v38;
            }
            unsigned int v43 = v37 + v41++;
            unsigned int v37 = v43 & v29;
            unsigned int v38 = (void *)(v27 + 8 * (v43 & v29));
            uint64_t v39 = *v38;
            if (*v38 == -1) {
              goto LABEL_72;
            }
          }
          uint64_t v44 = *v26;
        }
        uint64_t v45 = v44 == v34 ? v38 : v32;
        unsigned int v36 = *((_DWORD *)a2 + 5);
        uint64_t v33 = a2[1];
      }
      if (v33 != v28) {
        unsigned int v36 = *((_DWORD *)a2 + 4);
      }
      uint64_t v46 = (void *)(v33 + 8 * v36);
      uint64_t v47 = v26 + 1;
      if (v45 != v46) {
        break;
      }
      ++v26;
      if (v47 == v25) {
        return result;
      }
    }
    if (v47 != v25)
    {
      int v48 = *((_DWORD *)a2 + 4) - 1;
      do
      {
        uint64_t v49 = *v47;
        uint64_t v51 = *a2;
        uint64_t v50 = a2[1];
        if (v50 == *a2)
        {
          uint64_t v52 = *((unsigned int *)a2 + 5);
          int v53 = (uint64_t *)(v50 + 8 * v52);
          if (v52)
          {
            uint64_t v54 = 0;
            while (1)
            {
              uint64_t result = *(void *)(v50 + v54);
              if (result == v49) {
                break;
              }
              v54 += 8;
              if (8 * v52 == v54) {
                goto LABEL_105;
              }
            }
            int v53 = (uint64_t *)(v50 + v54);
          }
LABEL_105:
          uint64_t v51 = a2[1];
        }
        else
        {
          unsigned int v55 = ((v49 >> 4) ^ (v49 >> 9)) & v48;
          int v53 = (uint64_t *)(v50 + 8 * v55);
          uint64_t result = *v53;
          if (*v53 == -1)
          {
            uint64_t v56 = 0;
LABEL_114:
            if (v56) {
              int v53 = v56;
            }
            LODWORD(v52) = *((_DWORD *)a2 + 5);
            if (*v53 != v49) {
              int v53 = (uint64_t *)(v50 + 8 * *((unsigned int *)a2 + 4));
            }
          }
          else
          {
            uint64_t v56 = 0;
            int v57 = 1;
            while (result != v49)
            {
              if (v56) {
                BOOL v58 = 0;
              }
              else {
                BOOL v58 = result == -2;
              }
              if (v58) {
                uint64_t v56 = v53;
              }
              unsigned int v59 = v55 + v57++;
              unsigned int v55 = v59 & v48;
              int v53 = (uint64_t *)(v50 + 8 * (v59 & v48));
              uint64_t result = *v53;
              if (*v53 == -1) {
                goto LABEL_114;
              }
            }
            LODWORD(v52) = *((_DWORD *)a2 + 5);
          }
        }
        if (v50 == v51) {
          unsigned int v60 = v52;
        }
        else {
          unsigned int v60 = *((_DWORD *)a2 + 4);
        }
        if (v53 == (uint64_t *)(v50 + 8 * v60)) {
          *v26++ = v49;
        }
        ++v47;
      }
      while (v47 != v25);
      uint64_t v25 = *(uint64_t **)(v2 + 40);
    }
    if (v26 != v25) {
      *(void *)(v2 + 40) = v26;
    }
  }
  return result;
}

uint64_t *sub_1CCED756C(int8x16_t *a1, unint64_t *a2, uint64_t **a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  if (a4 == 3)
  {
    uint64_t v12 = &a1->i8[8];
    uint64_t v11 = a1->i64[1];
    uint64_t v13 = *a3;
    uint64_t v15 = **a3;
    uint64_t v14 = (*a3)[1];
    if (v14 == v15)
    {
      uint64_t v16 = *((unsigned int *)v13 + 5);
      uint64_t v17 = (void *)(v14 + 8 * v16);
      if (v16)
      {
        uint64_t v18 = 0;
        uint64_t v19 = 8 * v16;
        while (*(void *)(v14 + v18) != v11)
        {
          v18 += 8;
          if (v19 == v18) {
            goto LABEL_139;
          }
        }
        uint64_t v17 = (void *)(v14 + v18);
      }
LABEL_139:
      uint64_t v15 = (*a3)[1];
    }
    else
    {
      uint64_t v68 = *((unsigned int *)v13 + 4);
      int v69 = v68 - 1;
      unsigned int v70 = (v68 - 1) & ((v11 >> 4) ^ (v11 >> 9));
      uint64_t v17 = (void *)(v14 + 8 * v70);
      uint64_t v71 = *v17;
      if (*v17 == -1)
      {
        uint64_t v72 = 0;
LABEL_149:
        if (v72) {
          uint64_t v17 = v72;
        }
        if (*v17 != v11) {
          uint64_t v17 = (void *)(v14 + 8 * v68);
        }
      }
      else
      {
        uint64_t v72 = 0;
        int v73 = 1;
        while (v71 != v11)
        {
          if (v72) {
            BOOL v74 = 0;
          }
          else {
            BOOL v74 = v71 == -2;
          }
          if (v74) {
            uint64_t v72 = v17;
          }
          unsigned int v75 = v70 + v73++;
          unsigned int v70 = v75 & v69;
          uint64_t v17 = (void *)(v14 + 8 * (v75 & v69));
          uint64_t v71 = *v17;
          if (*v17 == -1) {
            goto LABEL_149;
          }
        }
      }
    }
    BOOL v44 = v14 == v15;
    uint64_t v100 = 16;
    if (v44) {
      uint64_t v100 = 20;
    }
    if (v17 == (void *)(v14 + 8 * *(unsigned int *)((char *)v13 + v100)))
    {
      a1->i64[1] = *a2;
      *a2 = v11;
      *a1 = vextq_s8(*a1, *a1, 8uLL);
      return (uint64_t *)v12;
    }
    uint64_t v101 = a1->i64[0];
    a1->i64[0] = v11;
    a1->i64[1] = v101;
    a1->i64[1] = *a2;
    *a2 = v101;
    return (uint64_t *)a2;
  }
  if (a4 == 2)
  {
    uint64_t v10 = a1->i64[0];
    a1->i64[0] = *a2;
    *a2 = v10;
    return (uint64_t *)a2;
  }
  if (a6 < a4)
  {
    if (a4 >= 0) {
      uint64_t v22 = a4;
    }
    else {
      uint64_t v22 = a4 + 1;
    }
    uint64_t v23 = v22 >> 1;
    unint64_t v24 = &a1->i64[v22 >> 1];
    uint64_t v25 = *a3;
    uint64_t v27 = (void *)**a3;
    unsigned int v26 = (void *)(*a3)[1];
    uint64_t v28 = (unsigned int *)*a3 + 5;
    unsigned int v29 = (unsigned int *)(*a3 + 2);
    uint64_t v30 = (int8x16_t *)v24;
    for (uint64_t i = v23; ; --i)
    {
      uint64_t v33 = v30[-1].i64[1];
      uint64_t v30 = (int8x16_t *)((char *)v30 - 8);
      uint64_t v32 = v33;
      if (v26 == v27)
      {
        uint64_t v34 = *v28;
        uint64_t v35 = &v26[v34];
        if (v34)
        {
          unint64_t v36 = 0;
          uint64_t v37 = 8 * v34;
          while (v26[v36 / 8] != v32)
          {
            v36 += 8;
            if (v37 == v36) {
              goto LABEL_33;
            }
          }
          uint64_t v35 = &v26[v36 / 8];
        }
LABEL_33:
        uint64_t v46 = (void *)(*a3)[1];
      }
      else
      {
        uint64_t v38 = *v29;
        int v39 = v38 - 1;
        unsigned int v40 = (v38 - 1) & ((v32 >> 4) ^ (v32 >> 9));
        uint64_t v35 = &v26[v40];
        uint64_t v41 = *v35;
        if (*v35 == -1)
        {
          BOOL v42 = 0;
LABEL_35:
          if (v42) {
            uint64_t v35 = v42;
          }
          if (*v35 != v32) {
            uint64_t v35 = &v26[v38];
          }
        }
        else
        {
          BOOL v42 = 0;
          int v43 = 1;
          while (v41 != v32)
          {
            if (v42) {
              BOOL v44 = 0;
            }
            else {
              BOOL v44 = v41 == -2;
            }
            if (v44) {
              BOOL v42 = v35;
            }
            unsigned int v45 = v40 + v43++;
            unsigned int v40 = v45 & v39;
            uint64_t v35 = &v26[v45 & v39];
            uint64_t v41 = *v35;
            if (*v35 == -1) {
              goto LABEL_35;
            }
          }
        }
        uint64_t v46 = (void *)**a3;
      }
      if (v26 == v46) {
        uint64_t v47 = (unsigned int *)*a3 + 5;
      }
      else {
        uint64_t v47 = (unsigned int *)(*a3 + 2);
      }
      if (v35 != &v26[*v47])
      {
        unsigned int v76 = (uint64_t *)sub_1CCED756C(a1, v30, a3, i, a5, a6);
        uint64_t v25 = *a3;
        uint64_t v27 = (void *)**a3;
        unsigned int v26 = (void *)(*a3)[1];
        goto LABEL_95;
      }
      if (v30 == a1) {
        break;
      }
    }
    unsigned int v76 = (uint64_t *)a1;
LABEL_95:
    uint64_t v12 = (char *)(a2 + 1);
    uint64_t v77 = a4 - v23;
    uint64_t v78 = (unsigned int *)v25 + 5;
    uint64_t v79 = (unsigned int *)(v25 + 2);
    uint64_t v80 = v24;
    while (1)
    {
      uint64_t v81 = *v80;
      if (v26 == v27)
      {
        uint64_t v82 = *v78;
        uint64_t v83 = &v27[v82];
        if (v82)
        {
          uint64_t v84 = 8 * v82;
          uint64_t v85 = v27;
          while (*v85 != v81)
          {
            ++v85;
            v84 -= 8;
            if (!v84) {
              goto LABEL_101;
            }
          }
          int v86 = v78;
        }
        else
        {
LABEL_101:
          int v86 = v78;
          uint64_t v85 = v83;
        }
      }
      else
      {
        uint64_t v87 = *v79;
        int v88 = v87 - 1;
        unsigned int v89 = (v87 - 1) & ((v81 >> 4) ^ (v81 >> 9));
        uint64_t v85 = &v26[v89];
        uint64_t v90 = *v85;
        if (*v85 == -1)
        {
          uint64_t v91 = 0;
LABEL_115:
          if (v91) {
            uint64_t v85 = v91;
          }
          if (*v85 != v81) {
            uint64_t v85 = &v26[v87];
          }
        }
        else
        {
          uint64_t v91 = 0;
          int v92 = 1;
          while (v90 != v81)
          {
            if (v91) {
              BOOL v93 = 0;
            }
            else {
              BOOL v93 = v90 == -2;
            }
            if (v93) {
              uint64_t v91 = v85;
            }
            unsigned int v94 = v89 + v92++;
            unsigned int v89 = v94 & v88;
            uint64_t v85 = &v26[v94 & v88];
            uint64_t v90 = *v85;
            if (*v85 == -1) {
              goto LABEL_115;
            }
          }
        }
        int v86 = v79;
      }
      if (v85 == &v26[*v86]) {
        break;
      }
      if (++v80 == (uint64_t *)a2) {
        goto LABEL_124;
      }
      --v77;
    }
    uint64_t v12 = (char *)sub_1CCED756C(v80, a2, a3, v77, a5, a6);
LABEL_124:
    if (v76 != v24)
    {
      if (v24 == (uint64_t *)v12)
      {
        return v76;
      }
      else if (v76 + 1 == v24)
      {
        uint64_t v103 = *v76;
        memmove(v76, v24, v12 - (char *)v24);
        uint64_t v12 = (char *)v76 + v12 - (char *)v24;
        *(void *)uint64_t v12 = v103;
      }
      else if (v24 + 1 == (uint64_t *)v12)
      {
        uint64_t v104 = v12 - 8;
        uint64_t v105 = *((void *)v12 - 1);
        uint64_t v12 = (char *)(v76 + 1);
        if (v104 != (char *)v76) {
          memmove(v76 + 1, v76, v104 - (char *)v76);
        }
        *unsigned int v76 = v105;
      }
      else
      {
        uint64_t v95 = v24 - v76;
        if (v95 == (v12 - (char *)v24) >> 3)
        {
          unsigned int v96 = v76 + 1;
          uint64_t v97 = (uint64_t)&a1->i64[v23 + 1];
          do
          {
            uint64_t v98 = *(v96 - 1);
            *(v96 - 1) = *(void *)(v97 - 8);
            *(void *)(v97 - 8) = v98;
            if (v96 == v24) {
              break;
            }
            ++v96;
            BOOL v44 = v97 == (void)v12;
            v97 += 8;
          }
          while (!v44);
          return v24;
        }
        else
        {
          uint64_t v106 = (v12 - (char *)v24) >> 3;
          uint64_t v107 = v24 - v76;
          do
          {
            uint64_t v108 = v107;
            uint64_t v107 = v106;
            uint64_t v106 = v108 % v106;
          }
          while (v106);
          if (v107)
          {
            int v109 = &v76[v107];
            do
            {
              uint64_t v111 = *--v109;
              uint64_t v110 = v111;
              uint64_t v112 = &v109[v95];
              uint64_t v113 = v109;
              do
              {
                uint64_t v114 = v112;
                uint64_t *v113 = *v112;
                uint64_t v115 = &v112[v95];
                BOOL v116 = __OFSUB__(v95, (v12 - (char *)v112) >> 3);
                uint64_t v118 = v95 - ((v12 - (char *)v112) >> 3);
                char v117 = (v118 < 0) ^ v116;
                uint64_t v112 = &v76[v118];
                if (v117) {
                  uint64_t v112 = v115;
                }
                uint64_t v113 = v114;
              }
              while (v112 != v109);
              *uint64_t v114 = v110;
            }
            while (v109 != v76);
          }
          return &v76[(v12 - (char *)v24) >> 3];
        }
      }
    }
    return (uint64_t *)v12;
  }
  int v48 = &a1->i64[1];
  *a5 = a1->i64[0];
  uint64_t v49 = a5 + 1;
  if (&a1->u64[1] == a2)
  {
    a1->i64[0] = *a2;
    uint64_t v12 = (char *)a2;
LABEL_135:
    uint64_t v99 = 0;
    do
    {
      *(void *)&v12[v99 * 8] = a5[v99];
      ++v99;
    }
    while (&a5[v99] < v49);
    return (uint64_t *)v12;
  }
  uint64_t v50 = (uint64_t *)a1;
  do
  {
    uint64_t v51 = *v48;
    uint64_t v52 = *a3;
    uint64_t v54 = **a3;
    uint64_t v53 = (*a3)[1];
    if (v53 == v54)
    {
      uint64_t v55 = *((unsigned int *)v52 + 5);
      uint64_t v56 = (void *)(v53 + 8 * v55);
      if (v55)
      {
        uint64_t v57 = 0;
        uint64_t v58 = 8 * v55;
        while (*(void *)(v53 + v57) != v51)
        {
          v57 += 8;
          if (v58 == v57) {
            goto LABEL_66;
          }
        }
        uint64_t v56 = (void *)(v53 + v57);
      }
LABEL_66:
      uint64_t v54 = (*a3)[1];
    }
    else
    {
      uint64_t v59 = *((unsigned int *)v52 + 4);
      int v60 = v59 - 1;
      unsigned int v61 = (v59 - 1) & ((v51 >> 4) ^ (v51 >> 9));
      uint64_t v56 = (void *)(v53 + 8 * v61);
      uint64_t v62 = *v56;
      if (*v56 == -1)
      {
        uint64_t v63 = 0;
LABEL_76:
        if (v63) {
          uint64_t v56 = v63;
        }
        if (*v56 != v51) {
          uint64_t v56 = (void *)(v53 + 8 * v59);
        }
      }
      else
      {
        uint64_t v63 = 0;
        int v64 = 1;
        while (v62 != v51)
        {
          if (v63) {
            BOOL v65 = 0;
          }
          else {
            BOOL v65 = v62 == -2;
          }
          if (v65) {
            uint64_t v63 = v56;
          }
          unsigned int v66 = v61 + v64++;
          unsigned int v61 = v66 & v60;
          uint64_t v56 = (void *)(v53 + 8 * (v66 & v60));
          uint64_t v62 = *v56;
          if (*v56 == -1) {
            goto LABEL_76;
          }
        }
      }
    }
    if (v53 == v54) {
      uint64_t v67 = 20;
    }
    else {
      uint64_t v67 = 16;
    }
    if (v56 == (void *)(v53 + 8 * *(unsigned int *)((char *)v52 + v67))) {
      *v49++ = v51;
    }
    else {
      *v50++ = v51;
    }
    ++v48;
  }
  while (v48 != (uint64_t *)a2);
  uint64_t *v50 = *a2;
  uint64_t v12 = (char *)(v50 + 1);
  if (v49 > a5) {
    goto LABEL_135;
  }
  return (uint64_t *)v12;
}

uint64_t sub_1CCED7C2C(uint64_t result, uint64_t *a2, uint64_t **a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  if (a4 < 2) {
    return result;
  }
  uint64_t v8 = (void *)result;
  if (a4 != 2)
  {
    if ((uint64_t)a4 <= 128)
    {
      if ((uint64_t *)result == a2) {
        return result;
      }
      uint64_t v21 = result + 8;
      if ((uint64_t *)(result + 8) == a2) {
        return result;
      }
      uint64_t v22 = (void *)result;
      while (1)
      {
        uint64_t v23 = v22;
        uint64_t v22 = (void *)v21;
        int v24 = *((_DWORD *)*a3 + 4);
        if (!v24) {
          goto LABEL_58;
        }
        uint64_t v25 = v23[1];
        uint64_t v26 = **a3;
        unsigned int v27 = (v25 >> 4) ^ (v25 >> 9);
        unsigned int v28 = v24 - 1;
        uint64_t v29 = (v24 - 1) & v27;
        uint64_t v30 = *(void *)(v26 + 16 * v29);
        if (v30 != v25) {
          break;
        }
LABEL_22:
        uint64_t v33 = *(void **)(v26 + 16 * v29 + 8);
        if (!v33) {
          goto LABEL_26;
        }
        unsigned int v34 = 0;
        do
        {
          uint64_t v33 = (void *)*v33;
          ++v34;
        }
        while (v33);
LABEL_27:
        uint64_t v35 = *v23;
        uint64_t v36 = ((*v23 >> 4) ^ (*v23 >> 9)) & v28;
        uint64_t v37 = *(void *)(v26 + 16 * v36);
        if (*v23 != v37)
        {
          uint64_t result = 1;
          do
          {
            if (v37 == -4096) {
              goto LABEL_58;
            }
            int v38 = v36 + result;
            uint64_t result = (result + 1);
            uint64_t v36 = v38 & v28;
            uint64_t v37 = *(void *)(v26 + 16 * v36);
          }
          while (v35 != v37);
        }
        int v39 = *(void **)(v26 + 16 * v36 + 8);
        if (v39)
        {
          unsigned int v40 = 0;
          do
          {
            int v39 = (void *)*v39;
            ++v40;
          }
          while (v39);
          if (v34 < v40)
          {
            uint64_t v41 = v22;
            while (1)
            {
              *uint64_t v41 = v35;
              if (v23 == v8)
              {
                uint64_t v41 = v8;
                goto LABEL_57;
              }
              uint64_t v41 = v23;
              BOOL v42 = *a3;
              int v43 = *((_DWORD *)*a3 + 4);
              if (!v43) {
                goto LABEL_57;
              }
              uint64_t v44 = *v42;
              unsigned int v45 = v43 - 1;
              uint64_t v46 = (v43 - 1) & v27;
              uint64_t v47 = *(void *)(*v42 + 16 * v46);
              if (v47 != v25) {
                break;
              }
LABEL_42:
              uint64_t v50 = *(void **)(v44 + 16 * v46 + 8);
              if (!v50) {
                goto LABEL_46;
              }
              unsigned int v51 = 0;
              do
              {
                uint64_t v50 = (void *)*v50;
                ++v51;
              }
              while (v50);
LABEL_47:
              uint64_t v23 = v41 - 1;
              uint64_t v35 = *(v41 - 1);
              uint64_t v52 = ((v35 >> 4) ^ (v35 >> 9)) & v45;
              uint64_t result = *(void *)(v44 + 16 * v52);
              if (v35 != result)
              {
                int v53 = 1;
                while (result != -4096)
                {
                  int v54 = v52 + v53++;
                  uint64_t v52 = v54 & v45;
                  uint64_t result = *(void *)(v44 + 16 * v52);
                  if (v35 == result) {
                    goto LABEL_51;
                  }
                }
LABEL_57:
                *uint64_t v41 = v25;
                goto LABEL_58;
              }
LABEL_51:
              uint64_t v55 = *(void **)(v44 + 16 * v52 + 8);
              if (v55)
              {
                unsigned int v56 = 0;
                do
                {
                  uint64_t v55 = (void *)*v55;
                  ++v56;
                }
                while (v55);
                if (v51 < v56) {
                  continue;
                }
              }
              goto LABEL_57;
            }
            int v48 = 1;
            while (v47 != -4096)
            {
              int v49 = v46 + v48++;
              uint64_t v46 = v49 & v45;
              uint64_t v47 = *(void *)(v44 + 16 * v46);
              if (v47 == v25) {
                goto LABEL_42;
              }
            }
LABEL_46:
            unsigned int v51 = 0;
            goto LABEL_47;
          }
        }
LABEL_58:
        uint64_t v21 = (uint64_t)(v22 + 1);
        if (v22 + 1 == a2) {
          return result;
        }
      }
      int v31 = 1;
      while (v30 != -4096)
      {
        int v32 = v29 + v31++;
        uint64_t v29 = v32 & v28;
        uint64_t v30 = *(void *)(v26 + 16 * v29);
        if (v30 == v25) {
          goto LABEL_22;
        }
      }
LABEL_26:
      unsigned int v34 = 0;
      goto LABEL_27;
    }
    int v64 = a5;
    unint64_t v65 = a4 >> 1;
    unsigned int v66 = (uint64_t *)(result + 8 * (a4 >> 1));
    unint64_t v67 = a4 >> 1;
    if ((uint64_t)a4 > a6)
    {
      sub_1CCED7C2C(result, v66, a3, v67, a5, a6);
      sub_1CCED7C2C(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v64, a6);
      return sub_1CCED8728((uint64_t)v8, &v8[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), v64, a6);
    }
    sub_1CCED81CC((uint64_t *)result, v66, a3, v67, a5);
    uint64_t v68 = &v64[v65];
    uint64_t result = (uint64_t)sub_1CCED81CC(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v68);
    int v69 = &v64[a4];
    unsigned int v70 = v68;
    while (1)
    {
      if (v70 == v69)
      {
        if (v64 != v68)
        {
          uint64_t v89 = 0;
          do
          {
            v8[v89] = v64[v89];
            ++v89;
          }
          while (&v64[v89] != v68);
        }
        return result;
      }
      uint64_t v71 = *v64;
      int v72 = *((_DWORD *)*a3 + 4);
      if (!v72) {
        goto LABEL_95;
      }
      uint64_t v73 = *v70;
      uint64_t v74 = **a3;
      unsigned int v75 = v72 - 1;
      uint64_t v76 = v75 & ((*v70 >> 4) ^ (*v70 >> 9));
      uint64_t v77 = *(void *)(v74 + 16 * v76);
      if (v77 != *v70) {
        break;
      }
LABEL_81:
      uint64_t v80 = *(void **)(v74 + 16 * v76 + 8);
      if (!v80) {
        goto LABEL_85;
      }
      unsigned int v81 = 0;
      do
      {
        uint64_t v80 = (void *)*v80;
        ++v81;
      }
      while (v80);
LABEL_86:
      uint64_t v82 = ((v71 >> 4) ^ (v71 >> 9)) & v75;
      uint64_t v83 = *(void *)(v74 + 16 * v82);
      if (v71 != v83)
      {
        int v84 = 1;
        while (v83 != -4096)
        {
          int v85 = v82 + v84++;
          uint64_t v82 = v85 & v75;
          uint64_t v83 = *(void *)(v74 + 16 * v82);
          if (v71 == v83) {
            goto LABEL_90;
          }
        }
LABEL_95:
        *uint64_t v8 = v71;
        ++v64;
        goto LABEL_96;
      }
LABEL_90:
      int v86 = *(void **)(v74 + 16 * v82 + 8);
      if (!v86) {
        goto LABEL_95;
      }
      unsigned int v87 = 0;
      do
      {
        int v86 = (void *)*v86;
        ++v87;
      }
      while (v86);
      if (v81 >= v87) {
        goto LABEL_95;
      }
      *uint64_t v8 = v73;
      ++v70;
LABEL_96:
      ++v8;
      if (v64 == v68)
      {
        if (v70 != v69)
        {
          uint64_t v88 = 0;
          do
          {
            v8[v88] = v70[v88];
            ++v88;
          }
          while (&v70[v88] != v69);
        }
        return result;
      }
    }
    int v78 = 1;
    while (v77 != -4096)
    {
      int v79 = v76 + v78++;
      uint64_t v76 = v79 & v75;
      uint64_t v77 = *(void *)(v74 + 16 * v76);
      if (v77 == v73) {
        goto LABEL_81;
      }
    }
LABEL_85:
    unsigned int v81 = 0;
    goto LABEL_86;
  }
  int v9 = *((_DWORD *)*a3 + 4);
  if (!v9) {
    return result;
  }
  uint64_t v10 = *(a2 - 1);
  uint64_t v11 = *(void *)result;
  uint64_t v12 = **a3;
  unsigned int v13 = v9 - 1;
  uint64_t v14 = v13 & ((v10 >> 4) ^ (v10 >> 9));
  uint64_t v15 = *(void *)(v12 + 16 * v14);
  if (v15 != v10)
  {
    int v16 = 1;
    while (v15 != -4096)
    {
      int v17 = v14 + v16++;
      uint64_t v14 = v17 & v13;
      uint64_t v15 = *(void *)(v12 + 16 * v14);
      if (v15 == v10) {
        goto LABEL_9;
      }
    }
    goto LABEL_60;
  }
LABEL_9:
  uint64_t v18 = *(void **)(v12 + 16 * v14 + 8);
  if (!v18)
  {
LABEL_60:
    unsigned int v19 = 0;
    goto LABEL_61;
  }
  unsigned int v19 = 0;
  do
  {
    uint64_t v18 = (void *)*v18;
    ++v19;
  }
  while (v18);
LABEL_61:
  uint64_t v57 = ((v11 >> 4) ^ (v11 >> 9)) & v13;
  uint64_t v58 = *(void *)(v12 + 16 * v57);
  if (v11 == v58)
  {
LABEL_65:
    unsigned int v61 = *(void **)(v12 + 16 * v57 + 8);
    if (v61)
    {
      unsigned int v62 = 0;
      do
      {
        unsigned int v61 = (void *)*v61;
        ++v62;
      }
      while (v61);
      if (v19 < v62)
      {
        *(void *)uint64_t result = v10;
        *(a2 - 1) = v11;
      }
    }
  }
  else
  {
    int v59 = 1;
    while (v58 != -4096)
    {
      int v60 = v57 + v59++;
      uint64_t v57 = v60 & v13;
      uint64_t v58 = *(void *)(v12 + 16 * v57);
      if (v11 == v58) {
        goto LABEL_65;
      }
    }
  }
  return result;
}

uint64_t *sub_1CCED81CC(uint64_t *result, uint64_t *a2, uint64_t **a3, unint64_t a4, uint64_t *a5)
{
  if (!a4) {
    return result;
  }
  uint64_t v5 = a5;
  uint64_t v7 = result;
  if (a4 == 1)
  {
LABEL_72:
    uint64_t *v5 = *v7;
    return result;
  }
  if (a4 == 2)
  {
    uint64_t v11 = a2 - 1;
    uint64_t v10 = *(a2 - 1);
    uint64_t v12 = *result;
    int v13 = *((_DWORD *)*a3 + 4);
    if (!v13)
    {
LABEL_71:
      *a5 = v12;
      uint64_t v5 = a5 + 1;
      uint64_t v7 = v11;
      goto LABEL_72;
    }
    uint64_t v14 = **a3;
    unsigned int v15 = v13 - 1;
    uint64_t v16 = v15 & ((v10 >> 4) ^ (v10 >> 9));
    uint64_t v17 = *(void *)(v14 + 16 * v16);
    if (v17 == v10)
    {
LABEL_9:
      BOOL v20 = *(void **)(v14 + 16 * v16 + 8);
      if (v20)
      {
        unsigned int v21 = 0;
        do
        {
          BOOL v20 = (void *)*v20;
          ++v21;
        }
        while (v20);
LABEL_62:
        uint64_t v61 = ((v12 >> 4) ^ (v12 >> 9)) & v15;
        uint64_t v62 = *(void *)(v14 + 16 * v61);
        if (v12 == v62)
        {
LABEL_66:
          unint64_t v65 = *(void **)(v14 + 16 * v61 + 8);
          if (v65)
          {
            unsigned int v66 = 0;
            do
            {
              unint64_t v65 = (void *)*v65;
              ++v66;
            }
            while (v65);
            if (v21 < v66)
            {
              uint64_t v12 = *(a2 - 1);
              uint64_t v11 = result;
            }
          }
        }
        else
        {
          int v63 = 1;
          while (v62 != -4096)
          {
            int v64 = v61 + v63++;
            uint64_t v61 = v64 & v15;
            uint64_t v62 = *(void *)(v14 + 16 * v61);
            if (v12 == v62) {
              goto LABEL_66;
            }
          }
        }
        goto LABEL_71;
      }
    }
    else
    {
      int v18 = 1;
      while (v17 != -4096)
      {
        int v19 = v16 + v18++;
        uint64_t v16 = v19 & v15;
        uint64_t v17 = *(void *)(v14 + 16 * v16);
        if (v17 == v10) {
          goto LABEL_9;
        }
      }
    }
    unsigned int v21 = 0;
    goto LABEL_62;
  }
  if ((uint64_t)a4 > 8)
  {
    unint64_t v67 = &result[a4 >> 1];
    sub_1CCED7C2C(result, v67, a3, a4 >> 1, a5, a4 >> 1);
    uint64_t result = (uint64_t *)sub_1CCED7C2C(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
    uint64_t v68 = &v7[a4 >> 1];
    while (1)
    {
      if (v68 == a2)
      {
        if (v7 != v67)
        {
          uint64_t v87 = 0;
          do
          {
            v5[v87] = v7[v87];
            ++v87;
          }
          while (&v7[v87] != v67);
        }
        return result;
      }
      uint64_t v69 = *v7;
      int v70 = *((_DWORD *)*a3 + 4);
      if (!v70) {
        goto LABEL_95;
      }
      uint64_t v71 = *v68;
      uint64_t v72 = **a3;
      unsigned int v73 = v70 - 1;
      uint64_t v74 = v73 & ((*v68 >> 4) ^ (*v68 >> 9));
      uint64_t v75 = *(void *)(v72 + 16 * v74);
      if (v75 != *v68) {
        break;
      }
LABEL_81:
      int v78 = *(void **)(v72 + 16 * v74 + 8);
      if (!v78) {
        goto LABEL_85;
      }
      unsigned int v79 = 0;
      do
      {
        int v78 = (void *)*v78;
        ++v79;
      }
      while (v78);
LABEL_86:
      uint64_t v80 = ((v69 >> 4) ^ (v69 >> 9)) & v73;
      uint64_t v81 = *(void *)(v72 + 16 * v80);
      if (v69 != v81)
      {
        int v82 = 1;
        while (v81 != -4096)
        {
          int v83 = v80 + v82++;
          uint64_t v80 = v83 & v73;
          uint64_t v81 = *(void *)(v72 + 16 * v80);
          if (v69 == v81) {
            goto LABEL_90;
          }
        }
LABEL_95:
        uint64_t *v5 = v69;
        ++v7;
        goto LABEL_96;
      }
LABEL_90:
      int v84 = *(void **)(v72 + 16 * v80 + 8);
      if (!v84) {
        goto LABEL_95;
      }
      unsigned int v85 = 0;
      do
      {
        int v84 = (void *)*v84;
        ++v85;
      }
      while (v84);
      if (v79 >= v85) {
        goto LABEL_95;
      }
      uint64_t *v5 = v71;
      ++v68;
LABEL_96:
      ++v5;
      if (v7 == v67)
      {
        if (v68 != a2)
        {
          uint64_t v86 = 0;
          do
          {
            v5[v86] = v68[v86];
            ++v86;
          }
          while (&v68[v86] != a2);
        }
        return result;
      }
    }
    int v76 = 1;
    while (v75 != -4096)
    {
      int v77 = v74 + v76++;
      uint64_t v74 = v77 & v73;
      uint64_t v75 = *(void *)(v72 + 16 * v74);
      if (v75 == v71) {
        goto LABEL_81;
      }
    }
LABEL_85:
    unsigned int v79 = 0;
    goto LABEL_86;
  }
  if (result == a2) {
    return result;
  }
  uint64_t v22 = result + 1;
  *a5 = *result;
  if (result + 1 == a2) {
    return result;
  }
  uint64_t v23 = a5;
  int v24 = a5;
  do
  {
    uint64_t v26 = *v24++;
    uint64_t v25 = v26;
    uint64_t v27 = *v22;
    int v28 = *((_DWORD *)*a3 + 4);
    if (!v28) {
      goto LABEL_56;
    }
    uint64_t v29 = **a3;
    unsigned int v30 = v28 - 1;
    uint64_t v31 = v30 & ((v27 >> 4) ^ (v27 >> 9));
    uint64_t v32 = *(void *)(v29 + 16 * v31);
    if (v32 == v27)
    {
LABEL_22:
      uint64_t v35 = *(void **)(v29 + 16 * v31 + 8);
      if (v35)
      {
        unsigned int v36 = 0;
        do
        {
          uint64_t v35 = (void *)*v35;
          ++v36;
        }
        while (v35);
        goto LABEL_27;
      }
    }
    else
    {
      int v33 = 1;
      while (v32 != -4096)
      {
        int v34 = v31 + v33++;
        uint64_t v31 = v34 & v30;
        uint64_t v32 = *(void *)(v29 + 16 * v31);
        if (v32 == v27) {
          goto LABEL_22;
        }
      }
    }
    unsigned int v36 = 0;
LABEL_27:
    uint64_t v37 = ((v25 >> 4) ^ (v25 >> 9)) & v30;
    uint64_t v38 = *(void *)(v29 + 16 * v37);
    if (v25 != v38)
    {
      int v39 = 1;
      while (v38 != -4096)
      {
        int v40 = v37 + v39++;
        uint64_t v37 = v40 & v30;
        uint64_t v38 = *(void *)(v29 + 16 * v37);
        if (v25 == v38) {
          goto LABEL_31;
        }
      }
LABEL_56:
      *int v24 = v27;
      goto LABEL_57;
    }
LABEL_31:
    uint64_t v41 = *(void **)(v29 + 16 * v37 + 8);
    if (!v41) {
      goto LABEL_56;
    }
    unsigned int v42 = 0;
    do
    {
      uint64_t v41 = (void *)*v41;
      ++v42;
    }
    while (v41);
    if (v36 >= v42) {
      goto LABEL_56;
    }
    v23[1] = v25;
    int v43 = a5;
    if (v23 == a5) {
      goto LABEL_60;
    }
    while (1)
    {
      int v44 = *((_DWORD *)*a3 + 4);
      if (!v44) {
        break;
      }
      uint64_t v45 = **a3;
      unsigned int v46 = v44 - 1;
      uint64_t v47 = v46 & ((*v22 >> 4) ^ (*v22 >> 9));
      uint64_t v48 = *(void *)(v45 + 16 * v47);
      if (v48 != *v22)
      {
        int v49 = 1;
        while (v48 != -4096)
        {
          int v50 = v47 + v49++;
          uint64_t v47 = v50 & v46;
          uint64_t v48 = *(void *)(v45 + 16 * v47);
          if (v48 == *v22) {
            goto LABEL_41;
          }
        }
LABEL_45:
        unsigned int v52 = 0;
        goto LABEL_46;
      }
LABEL_41:
      unsigned int v51 = *(void **)(v45 + 16 * v47 + 8);
      if (!v51) {
        goto LABEL_45;
      }
      unsigned int v52 = 0;
      do
      {
        unsigned int v51 = (void *)*v51;
        ++v52;
      }
      while (v51);
LABEL_46:
      int v53 = v23 - 1;
      uint64_t v54 = *(v23 - 1);
      uint64_t v55 = ((v54 >> 4) ^ (v54 >> 9)) & v46;
      uint64_t v56 = *(void *)(v45 + 16 * v55);
      if (v54 != v56)
      {
        int v57 = 1;
        while (v56 != -4096)
        {
          int v58 = v55 + v57++;
          uint64_t v55 = v58 & v46;
          uint64_t v56 = *(void *)(v45 + 16 * v55);
          if (v54 == v56) {
            goto LABEL_50;
          }
        }
        break;
      }
LABEL_50:
      int v59 = *(void **)(v45 + 16 * v55 + 8);
      if (!v59) {
        break;
      }
      unsigned int v60 = 0;
      do
      {
        int v59 = (void *)*v59;
        ++v60;
      }
      while (v59);
      if (v52 >= v60) {
        break;
      }
      *v23-- = v54;
      if (v53 == a5)
      {
        int v43 = a5;
        goto LABEL_60;
      }
    }
    int v43 = v23;
LABEL_60:
    uint64_t *v43 = *v22;
LABEL_57:
    ++v22;
    uint64_t v23 = v24;
  }
  while (v22 != a2);
  return result;
}

uint64_t sub_1CCED8728(uint64_t result, void *a2, void *a3, uint64_t **a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  if (!a6) {
    return result;
  }
  uint64_t v9 = a6;
  int v13 = (void *)result;
  while (a5 > a8 && v9 > a8)
  {
    if (!a5) {
      return result;
    }
    uint64_t v14 = *a2;
    uint64_t v15 = **a4;
    int v16 = *((_DWORD *)*a4 + 4);
    unsigned int v17 = v16 - 1;
    int v18 = (uint64_t *)(v15 + 16 * ((v16 - 1) & ((*a2 >> 4) ^ (*a2 >> 9))));
    while (1)
    {
      if (!v16) {
        goto LABEL_25;
      }
      uint64_t v19 = *v18;
      uint64_t v20 = v17 & ((*a2 >> 4) ^ (*a2 >> 9));
      if (*v18 != v14)
      {
        int v21 = 1;
        LODWORD(v20) = v17 & ((*a2 >> 4) ^ (*a2 >> 9));
        while (v19 != -4096)
        {
          int v22 = v20 + v21++;
          uint64_t v20 = v22 & v17;
          uint64_t v19 = *(void *)(v15 + 16 * v20);
          if (v19 == v14) {
            goto LABEL_12;
          }
        }
LABEL_16:
        unsigned int v24 = 0;
        goto LABEL_17;
      }
LABEL_12:
      uint64_t v23 = *(void **)(v15 + 16 * v20 + 8);
      if (!v23) {
        goto LABEL_16;
      }
      unsigned int v24 = 0;
      do
      {
        uint64_t v23 = (void *)*v23;
        ++v24;
      }
      while (v23);
LABEL_17:
      uint64_t v25 = *v13;
      uint64_t v26 = ((*v13 >> 4) ^ (*v13 >> 9)) & v17;
      uint64_t v27 = *(void *)(v15 + 16 * v26);
      if (*v13 != v27)
      {
        uint64_t result = 1;
        while (v27 != -4096)
        {
          int v28 = v26 + result;
          uint64_t result = (result + 1);
          uint64_t v26 = v28 & v17;
          uint64_t v27 = *(void *)(v15 + 16 * v26);
          if (v25 == v27) {
            goto LABEL_21;
          }
        }
        goto LABEL_25;
      }
LABEL_21:
      uint64_t v29 = *(void **)(v15 + 16 * v26 + 8);
      if (v29)
      {
        unsigned int v30 = 0;
        do
        {
          uint64_t v29 = (void *)*v29;
          ++v30;
        }
        while (v29);
        if (v24 < v30) {
          break;
        }
      }
LABEL_25:
      ++v13;
      if (!--a5) {
        return result;
      }
    }
    if (a5 >= v9)
    {
      if (a5 == 1)
      {
        void *v13 = v14;
        *a2 = v25;
        return result;
      }
      if (a5 >= 0) {
        uint64_t v53 = a5;
      }
      else {
        uint64_t v53 = a5 + 1;
      }
      uint64_t v52 = v53 >> 1;
      int v34 = &v13[v53 >> 1];
      int v33 = a3;
      if (a3 == a2)
      {
LABEL_84:
        uint64_t v32 = v33 - a2;
        goto LABEL_85;
      }
      unint64_t v54 = a3 - a2;
      uint64_t v55 = *v34;
      int v33 = a2;
      while (2)
      {
        unint64_t v56 = v54 >> 1;
        int v57 = &v33[v54 >> 1];
        uint64_t v58 = ((*v57 >> 4) ^ (*v57 >> 9)) & v17;
        uint64_t v59 = *(void *)(v15 + 16 * v58);
        if (v59 == *v57)
        {
LABEL_66:
          uint64_t v62 = *(void **)(v15 + 16 * v58 + 8);
          if (!v62) {
            goto LABEL_70;
          }
          unsigned int v63 = 0;
          do
          {
            uint64_t v62 = (void *)*v62;
            ++v63;
          }
          while (v62);
        }
        else
        {
          int v60 = 1;
          while (v59 != -4096)
          {
            int v61 = v58 + v60++;
            uint64_t v58 = v61 & v17;
            uint64_t v59 = *(void *)(v15 + 16 * v58);
            if (v59 == *v57) {
              goto LABEL_66;
            }
          }
LABEL_70:
          unsigned int v63 = 0;
        }
        uint64_t v64 = ((*v34 >> 4) ^ (*v34 >> 9)) & v17;
        if (v55 == *(void *)(v15 + 16 * v64))
        {
LABEL_75:
          uint64_t v68 = *(void **)(v15 + 16 * v64 + 8);
          if (!v68) {
            goto LABEL_79;
          }
          unsigned int v69 = 0;
          do
          {
            uint64_t v68 = (void *)*v68;
            ++v69;
          }
          while (v68);
        }
        else
        {
          int v65 = 1;
          uint64_t v66 = *(void *)(v15 + 16 * (((*v34 >> 4) ^ (*v34 >> 9)) & v17));
          LODWORD(v64) = ((*v34 >> 4) ^ (*v34 >> 9)) & v17;
          while (v66 != -4096)
          {
            int v67 = v64 + v65++;
            uint64_t v64 = v67 & v17;
            uint64_t v66 = *(void *)(v15 + 16 * v64);
            if (v55 == v66) {
              goto LABEL_75;
            }
          }
LABEL_79:
          unsigned int v69 = 0;
        }
        int v70 = v57 + 1;
        v54 += ~v56;
        if (v63 < v69) {
          int v33 = v70;
        }
        else {
          unint64_t v54 = v56;
        }
        if (!v54) {
          goto LABEL_84;
        }
        continue;
      }
    }
    if (v9 >= 0) {
      uint64_t v31 = v9;
    }
    else {
      uint64_t v31 = v9 + 1;
    }
    uint64_t v32 = v31 >> 1;
    int v33 = &a2[v31 >> 1];
    int v34 = a2;
    if (a2 != v13)
    {
      unint64_t v35 = a2 - v13;
      uint64_t v36 = *v33;
      int v34 = v13;
      while (1)
      {
        uint64_t v37 = ((*v33 >> 4) ^ (*v33 >> 9)) & v17;
        if (*(void *)(v15 + 16 * v37) != v36) {
          break;
        }
LABEL_37:
        uint64_t v41 = *(void **)(v15 + 16 * v37 + 8);
        if (!v41) {
          goto LABEL_41;
        }
        unsigned int v42 = 0;
        do
        {
          uint64_t v41 = (void *)*v41;
          ++v42;
        }
        while (v41);
LABEL_42:
        unint64_t v43 = v35 >> 1;
        int v44 = &v34[v35 >> 1];
        uint64_t v45 = ((*v44 >> 4) ^ (*v44 >> 9)) & v17;
        uint64_t v46 = *(void *)(v15 + 16 * v45);
        if (*v44 != v46)
        {
          int v47 = 1;
          while (v46 != -4096)
          {
            int v48 = v45 + v47++;
            uint64_t v45 = v48 & v17;
            uint64_t v46 = *(void *)(v15 + 16 * v45);
            if (*v44 == v46) {
              goto LABEL_46;
            }
          }
LABEL_50:
          unsigned int v50 = 0;
          goto LABEL_51;
        }
LABEL_46:
        int v49 = *(void **)(v15 + 16 * v45 + 8);
        if (!v49) {
          goto LABEL_50;
        }
        unsigned int v50 = 0;
        do
        {
          int v49 = (void *)*v49;
          ++v50;
        }
        while (v49);
LABEL_51:
        unsigned int v51 = v44 + 1;
        v35 += ~v43;
        if (v42 < v50) {
          unint64_t v35 = v43;
        }
        else {
          int v34 = v51;
        }
        if (!v35) {
          goto LABEL_55;
        }
      }
      int v38 = 1;
      uint64_t v39 = *(void *)(v15 + 16 * (((*v33 >> 4) ^ (*v33 >> 9)) & v17));
      LODWORD(v37) = ((*v33 >> 4) ^ (*v33 >> 9)) & v17;
      while (v39 != -4096)
      {
        int v40 = v37 + v38++;
        uint64_t v37 = v40 & v17;
        uint64_t v39 = *(void *)(v15 + 16 * v37);
        if (v39 == v36) {
          goto LABEL_37;
        }
      }
LABEL_41:
      unsigned int v42 = 0;
      goto LABEL_42;
    }
LABEL_55:
    uint64_t v52 = v34 - v13;
LABEL_85:
    uint64_t v71 = v33;
    if (v34 != a2)
    {
      uint64_t v71 = v34;
      if (a2 != v33)
      {
        unsigned int v128 = a7;
        if (v34 + 1 == a2)
        {
          uint64_t v124 = *v34;
          int v126 = a3;
          int64_t v74 = (char *)v33 - (char *)a2;
          uint64_t v75 = a4;
          memmove(v34, a2, (char *)v33 - (char *)a2);
          a4 = v75;
          a3 = v126;
          a7 = v128;
          uint64_t v71 = (void *)((char *)v34 + v74);
          *uint64_t v71 = v124;
        }
        else
        {
          if (a2 + 1 == v33)
          {
            uint64_t v76 = *(v33 - 1);
            uint64_t v71 = v34 + 1;
            if (v33 - 1 != v34)
            {
              uint64_t v125 = *(v33 - 1);
              uint64_t v127 = a4;
              memmove(v34 + 1, v34, (char *)(v33 - 1) - (char *)v34);
              uint64_t v76 = v125;
              a4 = v127;
            }
            void *v34 = v76;
          }
          else
          {
            uint64_t v72 = a4;
            unsigned int v73 = sub_1CC057214(v34, a2, v33);
            a4 = v72;
            uint64_t v71 = v73;
          }
          a7 = v128;
        }
      }
    }
    a5 -= v52;
    v9 -= v32;
    if (v52 + v32 >= a5 + v9)
    {
      int v82 = v33;
      int v83 = a3;
      int v84 = a4;
      unsigned int v85 = a7;
      uint64_t result = sub_1CCED8728(v71, v82, v83, a4, a5, v9);
      a4 = v84;
      a7 = v85;
      int v33 = v34;
      uint64_t v9 = v32;
      a5 = v52;
      a3 = v71;
    }
    else
    {
      int v77 = v13;
      int v78 = a4;
      unsigned int v79 = a4;
      uint64_t v80 = v52;
      uint64_t v81 = a7;
      uint64_t result = sub_1CCED8728(v77, v34, v71, v78, v80, v32);
      a4 = v79;
      a7 = v81;
      int v13 = v71;
    }
    a2 = v33;
    if (!v9) {
      return result;
    }
  }
  if (a5 > v9)
  {
    if (a2 == a3) {
      return result;
    }
    uint64_t v86 = 0;
    do
    {
      a7[v86] = a2[v86];
      ++v86;
    }
    while (&a2[v86] != a3);
    if (!(v86 * 8)) {
      return result;
    }
    uint64_t v87 = &a7[v86];
    while (2)
    {
      if (a2 == v13)
      {
        if (v87 != a7)
        {
          uint64_t v123 = 0;
          do
          {
            a3[v123 - 1] = v87[v123 - 1];
            --v123;
          }
          while (&v87[v123] != a7);
        }
        return result;
      }
      uint64_t v88 = *(v87 - 1);
      int v89 = *((_DWORD *)*a4 + 4);
      if (v89)
      {
        uint64_t v90 = **a4;
        unsigned int v91 = v89 - 1;
        uint64_t v92 = v91 & ((v88 >> 4) ^ (v88 >> 9));
        uint64_t v93 = *(void *)(v90 + 16 * v92);
        if (v93 == v88)
        {
LABEL_112:
          unsigned int v96 = *(void **)(v90 + 16 * v92 + 8);
          if (!v96) {
            goto LABEL_116;
          }
          unsigned int v97 = 0;
          do
          {
            unsigned int v96 = (void *)*v96;
            ++v97;
          }
          while (v96);
        }
        else
        {
          int v94 = 1;
          while (v93 != -4096)
          {
            int v95 = v92 + v94++;
            uint64_t v92 = v95 & v91;
            uint64_t v93 = *(void *)(v90 + 16 * v92);
            if (v93 == v88) {
              goto LABEL_112;
            }
          }
LABEL_116:
          unsigned int v97 = 0;
        }
        uint64_t v98 = a2 - 1;
        uint64_t v99 = *(a2 - 1);
        uint64_t v100 = ((v99 >> 4) ^ (v99 >> 9)) & v91;
        uint64_t v101 = *(void *)(v90 + 16 * v100);
        if (v99 != v101)
        {
          uint64_t result = 1;
          while (v101 != -4096)
          {
            int v102 = v100 + result;
            uint64_t result = (result + 1);
            uint64_t v100 = v102 & v91;
            uint64_t v101 = *(void *)(v90 + 16 * v100);
            if (v99 == v101) {
              goto LABEL_121;
            }
          }
          goto LABEL_125;
        }
LABEL_121:
        uint64_t v103 = *(void **)(v90 + 16 * v100 + 8);
        if (!v103) {
          goto LABEL_125;
        }
        unsigned int v104 = 0;
        do
        {
          uint64_t v103 = (void *)*v103;
          ++v104;
        }
        while (v103);
        if (v97 >= v104) {
          goto LABEL_125;
        }
      }
      else
      {
LABEL_125:
        uint64_t v99 = *(v87 - 1);
        uint64_t v98 = a2;
        --v87;
      }
      *--a3 = v99;
      a2 = v98;
      if (v87 == a7) {
        return result;
      }
      continue;
    }
  }
  if (v13 == a2) {
    return result;
  }
  uint64_t v105 = 0;
  do
  {
    a7[v105] = v13[v105];
    ++v105;
  }
  while (&v13[v105] != a2);
  if (!(v105 * 8)) {
    return result;
  }
  uint64_t v106 = a7;
  while (2)
  {
    if (a2 != a3)
    {
      uint64_t v107 = *v106;
      int v108 = *((_DWORD *)*a4 + 4);
      if (!v108) {
        goto LABEL_153;
      }
      uint64_t v109 = *a2;
      uint64_t v110 = **a4;
      unsigned int v111 = v108 - 1;
      uint64_t v112 = v111 & ((*a2 >> 4) ^ (*a2 >> 9));
      uint64_t v113 = *(void *)(v110 + 16 * v112);
      if (v113 == *a2)
      {
LABEL_139:
        BOOL v116 = *(void **)(v110 + 16 * v112 + 8);
        if (!v116) {
          goto LABEL_143;
        }
        unsigned int v117 = 0;
        do
        {
          BOOL v116 = (void *)*v116;
          ++v117;
        }
        while (v116);
      }
      else
      {
        int v114 = 1;
        while (v113 != -4096)
        {
          int v115 = v112 + v114++;
          uint64_t v112 = v115 & v111;
          uint64_t v113 = *(void *)(v110 + 16 * v112);
          if (v113 == v109) {
            goto LABEL_139;
          }
        }
LABEL_143:
        unsigned int v117 = 0;
      }
      uint64_t v118 = ((v107 >> 4) ^ (v107 >> 9)) & v111;
      uint64_t v119 = *(void *)(v110 + 16 * v118);
      if (v107 == v119)
      {
LABEL_148:
        uint64_t v121 = *(void **)(v110 + 16 * v118 + 8);
        if (!v121) {
          goto LABEL_153;
        }
        unsigned int v122 = 0;
        do
        {
          uint64_t v121 = (void *)*v121;
          ++v122;
        }
        while (v121);
        if (v117 >= v122) {
          goto LABEL_153;
        }
        void *v13 = v109;
        ++a2;
      }
      else
      {
        uint64_t result = 1;
        while (v119 != -4096)
        {
          int v120 = v118 + result;
          uint64_t result = (result + 1);
          uint64_t v118 = v120 & v111;
          uint64_t v119 = *(void *)(v110 + 16 * v118);
          if (v107 == v119) {
            goto LABEL_148;
          }
        }
LABEL_153:
        void *v13 = v107;
        ++v106;
      }
      ++v13;
      if (&a7[v105] == v106) {
        return result;
      }
      continue;
    }
    break;
  }

  return (uint64_t)memmove(v13, v106, (char *)a7 - (char *)v106 + v105 * 8);
}

uint64_t *sub_1CCED8F80(int8x16_t *a1, unint64_t *a2, uint64_t **a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  if (a4 == 3)
  {
    uint64_t v12 = &a1->i8[8];
    uint64_t v11 = a1->i64[1];
    int v13 = *a3;
    uint64_t v14 = **(void **)(v11 + 32);
    uint64_t v16 = **a3;
    uint64_t v15 = (*a3)[1];
    if (v15 == v16)
    {
      uint64_t v17 = *((unsigned int *)v13 + 5);
      int v18 = (void *)(v15 + 8 * v17);
      if (v17)
      {
        uint64_t v19 = 0;
        uint64_t v20 = 8 * v17;
        while (*(void *)(v15 + v19) != v14)
        {
          v19 += 8;
          if (v20 == v19) {
            goto LABEL_139;
          }
        }
        int v18 = (void *)(v15 + v19);
      }
LABEL_139:
      uint64_t v16 = (*a3)[1];
    }
    else
    {
      uint64_t v70 = *((unsigned int *)v13 + 4);
      int v71 = v70 - 1;
      unsigned int v72 = (v70 - 1) & ((v14 >> 4) ^ (v14 >> 9));
      int v18 = (void *)(v15 + 8 * v72);
      uint64_t v73 = *v18;
      if (*v18 == -1)
      {
        int64_t v74 = 0;
LABEL_149:
        if (v74) {
          int v18 = v74;
        }
        if (*v18 != v14) {
          int v18 = (void *)(v15 + 8 * v70);
        }
      }
      else
      {
        int64_t v74 = 0;
        int v75 = 1;
        while (v73 != v14)
        {
          if (v74) {
            BOOL v76 = 0;
          }
          else {
            BOOL v76 = v73 == -2;
          }
          if (v76) {
            int64_t v74 = v18;
          }
          unsigned int v77 = v72 + v75++;
          unsigned int v72 = v77 & v71;
          int v18 = (void *)(v15 + 8 * (v77 & v71));
          uint64_t v73 = *v18;
          if (*v18 == -1) {
            goto LABEL_149;
          }
        }
      }
    }
    BOOL v45 = v15 == v16;
    uint64_t v102 = 16;
    if (v45) {
      uint64_t v102 = 20;
    }
    if (v18 == (void *)(v15 + 8 * *(unsigned int *)((char *)v13 + v102)))
    {
      a1->i64[1] = *a2;
      *a2 = v11;
      *a1 = vextq_s8(*a1, *a1, 8uLL);
      return (uint64_t *)v12;
    }
    uint64_t v103 = a1->i64[0];
    a1->i64[0] = v11;
    a1->i64[1] = v103;
    a1->i64[1] = *a2;
    *a2 = v103;
    return (uint64_t *)a2;
  }
  if (a4 == 2)
  {
    uint64_t v10 = a1->i64[0];
    a1->i64[0] = *a2;
    *a2 = v10;
    return (uint64_t *)a2;
  }
  if (a6 < a4)
  {
    if (a4 >= 0) {
      uint64_t v23 = a4;
    }
    else {
      uint64_t v23 = a4 + 1;
    }
    uint64_t v24 = v23 >> 1;
    uint64_t v25 = &a1->i64[v23 >> 1];
    uint64_t v26 = *a3;
    int v28 = (void *)**a3;
    uint64_t v27 = (void *)(*a3)[1];
    uint64_t v29 = (unsigned int *)*a3 + 5;
    unsigned int v30 = (unsigned int *)(*a3 + 2);
    uint64_t v31 = (int8x16_t *)v25;
    for (uint64_t i = v24; ; --i)
    {
      uint64_t v33 = v31[-1].i64[1];
      uint64_t v31 = (int8x16_t *)((char *)v31 - 8);
      uint64_t v34 = **(void **)(v33 + 32);
      if (v27 == v28)
      {
        uint64_t v35 = *v29;
        uint64_t v36 = &v27[v35];
        if (v35)
        {
          unint64_t v37 = 0;
          uint64_t v38 = 8 * v35;
          while (v27[v37 / 8] != v34)
          {
            v37 += 8;
            if (v38 == v37) {
              goto LABEL_33;
            }
          }
          uint64_t v36 = &v27[v37 / 8];
        }
LABEL_33:
        int v47 = (void *)(*a3)[1];
      }
      else
      {
        uint64_t v39 = *v30;
        int v40 = v39 - 1;
        unsigned int v41 = (v39 - 1) & ((v34 >> 4) ^ (v34 >> 9));
        uint64_t v36 = &v27[v41];
        uint64_t v42 = *v36;
        if (*v36 == -1)
        {
          unint64_t v43 = 0;
LABEL_35:
          if (v43) {
            uint64_t v36 = v43;
          }
          if (*v36 != v34) {
            uint64_t v36 = &v27[v39];
          }
        }
        else
        {
          unint64_t v43 = 0;
          int v44 = 1;
          while (v42 != v34)
          {
            if (v43) {
              BOOL v45 = 0;
            }
            else {
              BOOL v45 = v42 == -2;
            }
            if (v45) {
              unint64_t v43 = v36;
            }
            unsigned int v46 = v41 + v44++;
            unsigned int v41 = v46 & v40;
            uint64_t v36 = &v27[v46 & v40];
            uint64_t v42 = *v36;
            if (*v36 == -1) {
              goto LABEL_35;
            }
          }
        }
        int v47 = (void *)**a3;
      }
      if (v27 == v47) {
        int v48 = (unsigned int *)*a3 + 5;
      }
      else {
        int v48 = (unsigned int *)(*a3 + 2);
      }
      if (v36 != &v27[*v48])
      {
        int v78 = (uint64_t *)sub_1CCED8F80(a1, v31, a3, i, a5, a6);
        uint64_t v26 = *a3;
        int v28 = (void *)**a3;
        uint64_t v27 = (void *)(*a3)[1];
        goto LABEL_95;
      }
      if (v31 == a1) {
        break;
      }
    }
    int v78 = (uint64_t *)a1;
LABEL_95:
    uint64_t v12 = (char *)(a2 + 1);
    uint64_t v79 = a4 - v24;
    uint64_t v80 = (unsigned int *)v26 + 5;
    uint64_t v81 = (unsigned int *)(v26 + 2);
    int v82 = v25;
    while (1)
    {
      uint64_t v83 = **(void **)(*v82 + 32);
      if (v27 == v28)
      {
        uint64_t v84 = *v80;
        unsigned int v85 = &v28[v84];
        if (v84)
        {
          uint64_t v86 = 8 * v84;
          uint64_t v87 = v28;
          while (*v87 != v83)
          {
            ++v87;
            v86 -= 8;
            if (!v86) {
              goto LABEL_101;
            }
          }
          uint64_t v88 = v80;
        }
        else
        {
LABEL_101:
          uint64_t v88 = v80;
          uint64_t v87 = v85;
        }
      }
      else
      {
        uint64_t v89 = *v81;
        int v90 = v89 - 1;
        unsigned int v91 = (v89 - 1) & ((v83 >> 4) ^ (v83 >> 9));
        uint64_t v87 = &v27[v91];
        uint64_t v92 = *v87;
        if (*v87 == -1)
        {
          uint64_t v93 = 0;
LABEL_115:
          if (v93) {
            uint64_t v87 = v93;
          }
          if (*v87 != v83) {
            uint64_t v87 = &v27[v89];
          }
        }
        else
        {
          uint64_t v93 = 0;
          int v94 = 1;
          while (v92 != v83)
          {
            if (v93) {
              BOOL v95 = 0;
            }
            else {
              BOOL v95 = v92 == -2;
            }
            if (v95) {
              uint64_t v93 = v87;
            }
            unsigned int v96 = v91 + v94++;
            unsigned int v91 = v96 & v90;
            uint64_t v87 = &v27[v96 & v90];
            uint64_t v92 = *v87;
            if (*v87 == -1) {
              goto LABEL_115;
            }
          }
        }
        uint64_t v88 = v81;
      }
      if (v87 == &v27[*v88]) {
        break;
      }
      if (++v82 == (uint64_t *)a2) {
        goto LABEL_124;
      }
      --v79;
    }
    uint64_t v12 = (char *)sub_1CCED8F80(v82, a2, a3, v79, a5, a6);
LABEL_124:
    if (v78 != v25)
    {
      if (v25 == (uint64_t *)v12)
      {
        return v78;
      }
      else if (v78 + 1 == v25)
      {
        uint64_t v105 = *v78;
        memmove(v78, v25, v12 - (char *)v25);
        uint64_t v12 = (char *)v78 + v12 - (char *)v25;
        *(void *)uint64_t v12 = v105;
      }
      else if (v25 + 1 == (uint64_t *)v12)
      {
        uint64_t v106 = v12 - 8;
        uint64_t v107 = *((void *)v12 - 1);
        uint64_t v12 = (char *)(v78 + 1);
        if (v106 != (char *)v78) {
          memmove(v78 + 1, v78, v106 - (char *)v78);
        }
        uint64_t *v78 = v107;
      }
      else
      {
        uint64_t v97 = v25 - v78;
        if (v97 == (v12 - (char *)v25) >> 3)
        {
          uint64_t v98 = v78 + 1;
          uint64_t v99 = (uint64_t)&a1->i64[v24 + 1];
          do
          {
            uint64_t v100 = *(v98 - 1);
            *(v98 - 1) = *(void *)(v99 - 8);
            *(void *)(v99 - 8) = v100;
            if (v98 == v25) {
              break;
            }
            ++v98;
            BOOL v45 = v99 == (void)v12;
            v99 += 8;
          }
          while (!v45);
          return v25;
        }
        else
        {
          uint64_t v108 = (v12 - (char *)v25) >> 3;
          uint64_t v109 = v25 - v78;
          do
          {
            uint64_t v110 = v109;
            uint64_t v109 = v108;
            uint64_t v108 = v110 % v108;
          }
          while (v108);
          if (v109)
          {
            unsigned int v111 = &v78[v109];
            do
            {
              uint64_t v113 = *--v111;
              uint64_t v112 = v113;
              int v114 = &v111[v97];
              int v115 = v111;
              do
              {
                BOOL v116 = v114;
                *int v115 = *v114;
                unsigned int v117 = &v114[v97];
                BOOL v118 = __OFSUB__(v97, (v12 - (char *)v114) >> 3);
                uint64_t v120 = v97 - ((v12 - (char *)v114) >> 3);
                char v119 = (v120 < 0) ^ v118;
                int v114 = &v78[v120];
                if (v119) {
                  int v114 = v117;
                }
                int v115 = v116;
              }
              while (v114 != v111);
              *BOOL v116 = v112;
            }
            while (v111 != v78);
          }
          return &v78[(v12 - (char *)v25) >> 3];
        }
      }
    }
    return (uint64_t *)v12;
  }
  int v49 = &a1->i64[1];
  *a5 = a1->i64[0];
  unsigned int v50 = a5 + 1;
  if (&a1->u64[1] == a2)
  {
    a1->i64[0] = *a2;
    uint64_t v12 = (char *)a2;
LABEL_135:
    uint64_t v101 = 0;
    do
    {
      *(void *)&v12[v101 * 8] = a5[v101];
      ++v101;
    }
    while (&a5[v101] < v50);
    return (uint64_t *)v12;
  }
  unsigned int v51 = (uint64_t *)a1;
  do
  {
    uint64_t v52 = *v49;
    uint64_t v53 = *a3;
    uint64_t v54 = **(void **)(*v49 + 32);
    uint64_t v56 = **a3;
    uint64_t v55 = (*a3)[1];
    if (v55 == v56)
    {
      uint64_t v57 = *((unsigned int *)v53 + 5);
      uint64_t v58 = (void *)(v55 + 8 * v57);
      if (v57)
      {
        uint64_t v59 = 0;
        uint64_t v60 = 8 * v57;
        while (*(void *)(v55 + v59) != v54)
        {
          v59 += 8;
          if (v60 == v59) {
            goto LABEL_66;
          }
        }
        uint64_t v58 = (void *)(v55 + v59);
      }
LABEL_66:
      uint64_t v56 = (*a3)[1];
    }
    else
    {
      uint64_t v61 = *((unsigned int *)v53 + 4);
      int v62 = v61 - 1;
      unsigned int v63 = (v61 - 1) & ((v54 >> 4) ^ (v54 >> 9));
      uint64_t v58 = (void *)(v55 + 8 * v63);
      uint64_t v64 = *v58;
      if (*v58 == -1)
      {
        int v65 = 0;
LABEL_76:
        if (v65) {
          uint64_t v58 = v65;
        }
        if (*v58 != v54) {
          uint64_t v58 = (void *)(v55 + 8 * v61);
        }
      }
      else
      {
        int v65 = 0;
        int v66 = 1;
        while (v64 != v54)
        {
          if (v65) {
            BOOL v67 = 0;
          }
          else {
            BOOL v67 = v64 == -2;
          }
          if (v67) {
            int v65 = v58;
          }
          unsigned int v68 = v63 + v66++;
          unsigned int v63 = v68 & v62;
          uint64_t v58 = (void *)(v55 + 8 * (v68 & v62));
          uint64_t v64 = *v58;
          if (*v58 == -1) {
            goto LABEL_76;
          }
        }
      }
    }
    if (v55 == v56) {
      uint64_t v69 = 20;
    }
    else {
      uint64_t v69 = 16;
    }
    if (v58 == (void *)(v55 + 8 * *(unsigned int *)((char *)v53 + v69))) {
      *v50++ = v52;
    }
    else {
      *v51++ = v52;
    }
    ++v49;
  }
  while (v49 != (uint64_t *)a2);
  uint64_t *v51 = *a2;
  uint64_t v12 = (char *)(v51 + 1);
  if (v50 > a5) {
    goto LABEL_135;
  }
  return (uint64_t *)v12;
}

BOOL sub_1CCED9660(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[2];
  if (*a1 != v2) {
    *a1 = v1 + 8;
  }
  return v1 != v2;
}

BOOL sub_1CCED9684(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 24);
  if (v1 != v2) {
    *(void *)(a1 + 8) = v1 + 8;
  }
  return v1 != v2;
}

void sub_1CCED96A8()
{
}

void sub_1CCED96EC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CCED9724(uint64_t a1, llvm *a2)
{
  sub_1CB843600((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1CB843600((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  sub_1CB843600((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
  sub_1CB843600((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::MemorySSAWrapperPass::ID);

  llvm::getLoopAnalysisUsage(a2, v3);
}

uint64_t sub_1CCED97A4(llvm::LoopPass *a1, llvm::Loop *a2)
{
  if ((llvm::LoopPass::skipLoop(a1, a2) & 1) == 0)
  {
    unsigned int v4 = (uint64_t *)*((void *)a1 + 1);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1];
    if (v5 == v6)
    {
LABEL_6:
      uint64_t v7 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v5 != &llvm::DominatorTreeWrapperPass::ID)
      {
        v5 += 16;
        if (v5 == v6) {
          goto LABEL_6;
        }
      }
      uint64_t v7 = *(void *)(v5 + 8);
    }
    uint64_t v8 = *(llvm::Function **)(**((void **)a2 + 4) + 56);
    (*(void (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::DominatorTreeWrapperPass::ID);
    uint64_t v9 = (uint64_t *)*((void *)a1 + 1);
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    if (v10 == v11)
    {
LABEL_11:
      uint64_t v12 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v10 != &llvm::LoopInfoWrapperPass::ID)
      {
        v10 += 16;
        if (v10 == v11) {
          goto LABEL_11;
        }
      }
      uint64_t v12 = *(void *)(v10 + 8);
    }
    (*(void (**)(uint64_t, void *))(*(void *)v12 + 96))(v12, &llvm::LoopInfoWrapperPass::ID);
    int v13 = (uint64_t *)*((void *)a1 + 1);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    if (v14 == v15)
    {
LABEL_16:
      uint64_t v16 = 0;
    }
    else
    {
      while (*(char **)v14 != llvm::AssumptionCacheTracker::ID)
      {
        v14 += 16;
        if (v14 == v15) {
          goto LABEL_16;
        }
      }
      uint64_t v16 = *(void *)(v14 + 8);
    }
    uint64_t v17 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(uint64_t, char *))(*(void *)v16 + 96))(v16, llvm::AssumptionCacheTracker::ID);
    llvm::AssumptionCacheTracker::getAssumptionCache(v17, v8);
    int v18 = (uint64_t *)*((void *)a1 + 1);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    if (v19 == v20)
    {
LABEL_21:
      uint64_t v21 = 0;
    }
    else
    {
      while (*(char **)v19 != llvm::AAResultsWrapperPass::ID)
      {
        v19 += 16;
        if (v19 == v20) {
          goto LABEL_21;
        }
      }
      uint64_t v21 = *(void *)(v19 + 8);
    }
    (*(void (**)(uint64_t, char *))(*(void *)v21 + 96))(v21, llvm::AAResultsWrapperPass::ID);
    int v22 = (uint64_t *)*((void *)a1 + 1);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    if (v23 == v24)
    {
LABEL_26:
      uint64_t v25 = 0;
    }
    else
    {
      while (*(char **)v23 != llvm::TargetTransformInfoWrapperPass::ID)
      {
        v23 += 16;
        if (v23 == v24) {
          goto LABEL_26;
        }
      }
      uint64_t v25 = *(void *)(v23 + 8);
    }
    uint64_t v26 = (llvm::TargetTransformInfoWrapperPass *)(*(uint64_t (**)(uint64_t, char *))(*(void *)v25 + 96))(v25, llvm::TargetTransformInfoWrapperPass::ID);
    llvm::TargetTransformInfoWrapperPass::getTTI(v26, (const Function *)v8);
    uint64_t v27 = (uint64_t *)*((void *)a1 + 1);
    uint64_t v28 = *v27;
    uint64_t v29 = v27[1];
    if (v28 == v29)
    {
LABEL_31:
      uint64_t v30 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v28 != &llvm::MemorySSAWrapperPass::ID)
      {
        v28 += 16;
        if (v28 == v29) {
          goto LABEL_31;
        }
      }
      uint64_t v30 = *(void *)(v28 + 8);
    }
    (*(uint64_t (**)(uint64_t, void *))(*(void *)v30 + 96))(v30, &llvm::MemorySSAWrapperPass::ID);
    uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((void *)a1 + 1) + 24), llvm::ScalarEvolutionWrapperPass::ID, 1);
    if (AnalysisPass) {
      (*(uint64_t (**)(uint64_t, char *))(*(void *)AnalysisPass + 96))(AnalysisPass, llvm::ScalarEvolutionWrapperPass::ID);
    }
    sub_1CCEC1BF4(a2);
  }
  return 0;
}

void sub_1CCED9C44(llvm::Loop ***a1, char a2, char a3, llvm::Loop **a4, uint64_t a5)
{
  if (a5)
  {
    uint64_t v9 = 8 * a5;
    do
    {
      uint64_t v10 = *a4++;
      llvm::LPPassManager::addLoop((llvm::LPPassManager *)a1[1], v10);
      v9 -= 8;
    }
    while (v9);
  }
  if (a2)
  {
    if ((a3 & 1) == 0)
    {
      int v13 = (llvm::LPPassManager *)a1[1];
      uint64_t v14 = **a1;
      llvm::LPPassManager::addLoop(v13, v14);
    }
  }
  else
  {
    uint64_t v11 = (llvm::LPPassManager *)a1[1];
    uint64_t v12 = **a1;
    llvm::LPPassManager::markLoopAsDeleted(v11, v12);
  }
}

void **sub_1CCED9CFC(llvm::LPPassManager **a1, llvm::Loop *a2)
{
  return llvm::LPPassManager::markLoopAsDeleted(*a1, a2);
}

BOOL sub_1CCED9D04(uint64_t *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  v12[2] = *MEMORY[0x1E4F143B8];
  if (!a5)
  {
    if (a2) {
      goto LABEL_3;
    }
LABEL_6:
    llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::clear();
  }
  sub_1CD76ED48(a1[1], a4, a5);
  if (!a2) {
    goto LABEL_6;
  }
LABEL_3:
  if (a3)
  {
    uint64_t v8 = ****(uint64_t *****)(*a1 + 32);
    v12[0] = llvm::MDString::get(v8, "llvm.loop.unswitch.partial.disable", 0x22uLL);
    llvm::MDTuple::getImpl((uint64_t)v8, v12, 1, 0, 1);
    llvm::Loop::getLoopID((llvm::Loop *)*a1);
  }
  uint64_t v9 = a1[1];
  *(unsigned char *)(v9 + 24) = 1;
  uint64_t v10 = *(void *)v9;

  return sub_1CD76DF3C(v10, (uint64_t *)(v9 + 16));
}

void sub_1CCED9EAC()
{
}

uint64_t sub_1CCED9EEC()
{
  LOBYTE(v2) = 0;
  uint64_t v5 = &v2;
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Forcibly enables non-trivial loop unswitching rather than following the configurati"
                                     "on passed into the pass.";
  v3.n128_u64[1] = 107;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCF8128, "enable-nontrivial-unswitch", (unsigned char **)&v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCF8128, &dword_1CB82C000);
  int v4 = 50;
  uint64_t v5 = &v4;
  int v1 = 1;
  int v2 = 1;
  v3.n128_u64[0] = (unint64_t)"The cost threshold for unswitching a loop.";
  v3.n128_u64[1] = 42;
  sub_1CD784418(&v5, &v2, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &qword_1EBCF81E8, &dword_1CB82C000);
  LOBYTE(v2) = 1;
  uint64_t v5 = &v2;
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Enable unswitch cost multiplier that prohibits exponential explosion in nontrivial unswitch.";
  v3.n128_u64[1] = 92;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCF82A8, "enable-unswitch-cost-multiplier", (unsigned char **)&v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCF82A8, &dword_1CB82C000);
  int v4 = 2;
  uint64_t v5 = &v4;
  int v2 = 1;
  v3.n128_u64[0] = (unint64_t)"Toplevel siblings divisor for cost multiplier.";
  v3.n128_u64[1] = 46;
  sub_1CD7845B0(&v5, &v2, &v3);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &qword_1EBCF8368, &dword_1CB82C000);
  int v4 = 8;
  uint64_t v5 = &v4;
  int v2 = 1;
  v3.n128_u64[0] = (unint64_t)"Number of unswitch candidates that are ignored when calculating cost multiplier.";
  v3.n128_u64[1] = 80;
  sub_1CD784728(&v5, &v2, &v3);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &qword_1EBCF8428, &dword_1CB82C000);
  LOBYTE(v2) = 1;
  uint64_t v5 = &v2;
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"If enabled, simple loop unswitching will also consider llvm.experimental.guard intr"
                                     "insics as unswitch candidates.";
  v3.n128_u64[1] = 113;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCF84E8, "simple-loop-unswitch-guards", (unsigned char **)&v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCF84E8, &dword_1CB82C000);
  LOBYTE(v2) = 0;
  uint64_t v5 = &v2;
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"If enabled, drop make.implicit metadata in unswitched implicit null checks to save "
                                     "time analyzing if we can keep it.";
  v3.n128_u64[1] = 116;
  sub_1CD7848A0((char **)&v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCF85A8, &dword_1CB82C000);
  v3.n128_u64[0] = (unint64_t)"Max number of memory uses to explore during partial unswitching analysis";
  v3.n128_u64[1] = 72;
  int v4 = 100;
  uint64_t v5 = &v4;
  int v2 = 1;
  sub_1CD50BCD4((uint64_t)&unk_1EBCF8668, "simple-loop-unswitch-memoryssa-threshold", &v3, &v5, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCF8668, &dword_1CB82C000);
  LOBYTE(v2) = 0;
  uint64_t v5 = &v2;
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"If enabled, the freeze instruction will be added to condition of loop unswitch to p"
                                     "revent miscompilation.";
  v3.n128_u64[1] = 105;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCF8728, "freeze-loop-unswitch-cond", (unsigned char **)&v5, &v4, &v3);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCF8728, &dword_1CB82C000);
}

llvm::SimplifyCFGPass *llvm::SimplifyCFGPass::SimplifyCFGPass(llvm::SimplifyCFGPass *this)
{
  *(_DWORD *)this = 1;
  *(void *)((char *)this + 4) = 0x101000001000000;
  *((void *)this + 2) = 0;
  sub_1CCEDA240((uint64_t)this);
  return this;
}

{
  *(_DWORD *)this = 1;
  *(void *)((char *)this + 4) = 0x101000001000000;
  *((void *)this + 2) = 0;
  sub_1CCEDA240((uint64_t)this);
  return this;
}

uint64_t sub_1CCEDA240(uint64_t result)
{
  if (word_1EBD0BA00) {
    *(_DWORD *)uint64_t result = dword_1EBD0BA78;
  }
  if (word_1EBD0BD00) {
    *(unsigned char *)(result + 4) = byte_1EBD0BD78;
  }
  if (word_1EBD0BB80) {
    *(unsigned char *)(result + 5) = byte_1EBD0BBF8;
  }
  if (word_1EBD0BC40) {
    *(unsigned char *)(result + 6) = byte_1EBD0BCB8;
  }
  if (word_1EBD0BAC0) {
    *(unsigned char *)(result + 7) = byte_1EBD0BB38;
  }
  if (word_1EBD0BDC0) {
    *(unsigned char *)(result + 8) = byte_1EBD0BE38;
  }
  if (word_1EBD0BE80) {
    *(unsigned char *)(result + 9) = byte_1EBD0BEF8;
  }
  return result;
}

uint64_t llvm::SimplifyCFGPass::SimplifyCFGPass(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  sub_1CCEDA240(a1);
  return a1;
}

{
  long long v3;

  long long v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  sub_1CCEDA240(a1);
  return a1;
}

void llvm::SimplifyCFGPass::run()
{
}

uint64_t sub_1CCEDA4D0(llvm *a1, uint64_t a2, uint64_t a3, llvm::MemorySSAUpdater *a4, llvm::MemorySSAUpdater *a5)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  v68[0] = v69;
  v68[1] = 0x1000000000;
  v69[32] = 0;
  v69[33] = 0;
  v69[34] = a3;
  v69[35] = 0;
  char v70 = 0;
  int v71 = v75;
  unsigned int v72 = v75;
  uint64_t v73 = 8;
  int v74 = 0;
  if (a3) {
    uint64_t v5 = (llvm::Function *)v68;
  }
  else {
    uint64_t v5 = 0;
  }
  memset(&v75[64], 0, 24);
  __int16 v76 = 0;
  char v53 = llvm::removeUnreachableBlocks(a1, v5, 0, a4, a5);
  v77[0] = 1;
  for (uint64_t i = 1; i != 5; ++i)
    LODWORD(v77[i]) = -1;
  int v78 = v80;
  uint64_t v79 = 0x400000000;
  uint64_t v7 = (void *)*((void *)a1 + 10);
  uint64_t v54 = v5;
  if (v7 == (void *)((char *)a1 + 72))
  {
    unsigned int v41 = 0;
    char v60 = 0;
    uint64_t v64 = 0;
    int v65 = 0;
    uint64_t v66 = 0;
    goto LABEL_95;
  }
  do
  {
    if (v7) {
      uint64_t v8 = (llvm::BasicBlock *)(v7 - 3);
    }
    else {
      uint64_t v8 = 0;
    }
    if (a3 && llvm::DomTreeUpdater::isBBPendingDeletion((llvm::DomTreeUpdater *)v68, v8)) {
      goto LABEL_16;
    }
    uint64_t v9 = (void *)*((void *)v8 + 5);
    if (v9 == (void *)((char *)v8 + 40))
    {
LABEL_55:
      uint64_t v10 = 0;
    }
    else
    {
      uint64_t v10 = (llvm::Instruction *)(v9 - 3);
      if (v9) {
        uint64_t v11 = v9 - 3;
      }
      else {
        uint64_t v11 = 0;
      }
      if (*((unsigned char *)v11 + 16) == 30) {
        goto LABEL_16;
      }
      switch(*((unsigned char *)v11 + 16))
      {
        case 0x1D:
        case 0x22:
        case 0x23:
          goto LABEL_19;
        case 0x1E:
          __break(1u);
          goto LABEL_115;
        case 0x1F:
          int v19 = (*((_DWORD *)v11 + 5) >> 1) & 0x3FFFFFF;
          break;
        case 0x20:
        case 0x26:
          int v19 = (*((_DWORD *)v11 + 5) & 0x7FFFFFF) - 1;
          break;
        case 0x21:
        case 0x25:
          goto LABEL_16;
        case 0x24:
          int v19 = *((_WORD *)v11 + 9) & 1;
          break;
        case 0x27:
          int v19 = *((_DWORD *)v11 + 20) + 1;
          break;
        default:
          goto LABEL_55;
      }
      if (v19) {
        goto LABEL_16;
      }
    }
LABEL_19:
    int v12 = *((unsigned __int8 *)v10 + 16);
    if (v12 != 34 && v12 != 29) {
      goto LABEL_16;
    }
    if (llvm::BasicBlock::getTerminatingMustTailCall(v8)) {
      goto LABEL_16;
    }
    PrevNonDebugInstruction = llvm::Instruction::getPrevNonDebugInstruction(v10, 0);
    if (PrevNonDebugInstruction)
    {
      if (*((unsigned char *)PrevNonDebugInstruction + 16) == 84)
      {
        uint64_t v15 = *(PrevNonDebugInstruction - 4);
        if (v15)
        {
          if (!*(unsigned char *)(v15 + 16)
            && *(void *)(v15 + 24) == PrevNonDebugInstruction[9]
            && *(_DWORD *)(v15 + 36) == 119)
          {
            goto LABEL_16;
          }
        }
      }
    }
    int v16 = *((_DWORD *)v10 + 5);
    if ((v16 & 0x40000000) != 0)
    {
      int v18 = (void *)*((void *)v10 - 1);
      uint64_t v17 = v16 & 0x7FFFFFF;
      if (!v17)
      {
LABEL_43:
        unsigned int v21 = *((unsigned __int8 *)v10 + 16) - 28;
        uint64_t v67 = v21;
        sub_1CCEDBC08((uint64_t)v77, &v67, (_DWORD *)&v67 + 1, (uint64_t)&v64);
        int v22 = v64;
        if ((_BYTE)v66)
        {
          uint64_t v81 = v83;
          uint64_t v82 = 0x200000000;
          LODWORD(v84) = v21;
          unsigned int v85 = v87;
          uint64_t v86 = 0x200000000;
          if (v79 >= HIDWORD(v79))
          {
            if (v78 > &v84 || (char *)v78 + 40 * v79 <= (char *)&v84) {
              sub_1CD785074();
            }
            sub_1CD785074();
          }
          uint64_t v23 = (char *)v78 + 40 * v79;
          *(_DWORD *)uint64_t v23 = v84;
          uint64_t v24 = v23 + 24;
          *((void *)v23 + 2) = 0x200000000;
          *((void *)v23 + 1) = v23 + 24;
          uint64_t v25 = v23 + 8;
          int v26 = v86;
          if (v86 && v25 != (char *)&v85)
          {
            __p = v22;
            uint64_t v30 = v85;
            if (v85 == v87)
            {
              if (v86 >= 3)
              {
                *((_DWORD *)v25 + 2) = 0;
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              memcpy(*(void **)v25, v85, 8 * v86);
              *((_DWORD *)v25 + 2) = v26;
            }
            else
            {
              if (v24 != v25 + 16)
              {
                free(v24);
                uint64_t v30 = v85;
                int v26 = v86;
              }
              *(void *)uint64_t v25 = v30;
              *((_DWORD *)v25 + 2) = v26;
              *((_DWORD *)v25 + 3) = HIDWORD(v86);
              unsigned int v85 = v87;
              HIDWORD(v86) = 0;
            }
            LODWORD(v86) = 0;
            int v22 = __p;
          }
          LODWORD(v79) = v79 + 1;
          if (v85 != v87)
          {
            uint64_t v31 = v22;
            free(v85);
            int v22 = v31;
          }
          if (v81 != v83)
          {
            uint64_t v32 = v22;
            free(v81);
            int v22 = v32;
          }
          unsigned int v27 = v79 - 1;
          *((_DWORD *)v22 + 1) = v79 - 1;
        }
        else
        {
          unsigned int v27 = *((_DWORD *)v64 + 1);
        }
        uint64_t v28 = (char *)v78 + 40 * v27;
        uint64_t v5 = (llvm::Function *)(v28 + 8);
        uint64_t v29 = *((unsigned int *)v28 + 4);
        if (v29 >= *((_DWORD *)v28 + 5)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)v5 + 8 * v29) = v8;
        *((_DWORD *)v28 + 4) = v29 + 1;
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v17 = v16 & 0x7FFFFFF;
      int v18 = (void *)((char *)v10 - 32 * v17);
      if (!v17) {
        goto LABEL_43;
      }
    }
    uint64_t v20 = 32 * v17;
    while (*(unsigned char *)(*(void *)*v18 + 8) != 12)
    {
      v18 += 4;
      v20 -= 32;
      if (!v20) {
        goto LABEL_43;
      }
    }
LABEL_16:
    uint64_t v7 = (void *)v7[1];
  }
  while (v7 != (void *)((char *)a1 + 72));
  uint64_t v33 = v78;
  uint64_t v64 = 0;
  int v65 = 0;
  uint64_t v66 = 0;
  if (v79)
  {
    char v60 = 0;
    uint64_t v58 = (char *)v78 + 40 * v79;
    do
    {
      uint64_t v34 = v33[1];
      uint64_t v59 = v33;
      uint64_t v35 = *((unsigned int *)v33 + 4);
      uint64_t v81 = v83;
      uint64_t v82 = 0x100000000;
      unsigned int v61 = v35;
      if (v35 >= 2)
      {
        if (a3) {
          sub_1CC292E4C((uint64_t)&v64, v35 + (((char *)v65 - (unsigned char *)v64) >> 4));
        }
        uint64_t v36 = *(void *)(*(void *)v34 + 40);
        if (v36 == *(void *)v34 + 40)
        {
          uint64_t v37 = 0;
        }
        else
        {
          if (v36) {
            uint64_t v38 = v36 - 24;
          }
          else {
            uint64_t v38 = 0;
          }
          if (*(unsigned __int8 *)(v38 + 16) - 29 >= 0xB) {
            uint64_t v37 = 0;
          }
          else {
            uint64_t v37 = v38;
          }
        }
        OpcodeName = llvm::Instruction::getOpcodeName((llvm::Instruction *)(*(unsigned __int8 *)(v37 + 16)
                                                                          - 28));
        if (*OpcodeName)
        {
          uint64_t v84 = "common.";
          uint64_t v86 = (uint64_t)OpcodeName;
          char v40 = 3;
        }
        else
        {
          uint64_t v84 = "common.";
          char v40 = 1;
        }
        v87[8] = 3;
        v87[9] = v40;
        operator new();
      }
      if (v81 != v83) {
        free(v81);
      }
      v60 |= v61 > 1;
      uint64_t v33 = v59 + 5;
    }
    while (v59 + 5 != (void *)v58);
    unsigned int v41 = (unint64_t *)v64;
  }
  else
  {
    unsigned int v41 = 0;
    char v60 = 0;
  }
LABEL_95:
  if (a3)
  {
    llvm::DomTreeUpdater::applyUpdates((uint64_t)v68, v41, ((char *)v65 - (char *)v41) >> 4);
    unsigned int v41 = (unint64_t *)v64;
  }
  if (v41)
  {
    int v65 = v41;
    operator delete(v41);
  }
  uint64_t v5 = (llvm::Function *)v78;
  uint64_t v42 = a1;
  if (v79)
  {
    uint64_t v43 = 40 * v79;
    do
    {
      int v44 = *(char **)((char *)v5 + v43 - 32);
      if ((char *)v5 + v43 - 16 != v44)
      {
        free(v44);
        uint64_t v42 = a1;
      }
      v43 -= 40;
    }
    while (v43);
    uint64_t v5 = (llvm::Function *)v78;
  }
  if (v5 != (llvm::Function *)v80)
  {
LABEL_115:
    free(v5);
    uint64_t v42 = a1;
  }
  if ((v77[0] & 1) == 0)
  {
    MEMORY[0x1D25D9CD0](v77[1], 4);
    uint64_t v42 = a1;
  }
  char v47 = v60 | v53 | sub_1CCEDB7AC((uint64_t)v42, a2, v54, (uint64_t)a4);
  if ((v47 & 1) != 0 && llvm::removeUnreachableBlocks(v42, v54, 0, v45, v46))
  {
    do
    {
      do
      {
        char v48 = sub_1CCEDB7AC((uint64_t)v42, a2, v54, (uint64_t)a4);
        char v51 = llvm::removeUnreachableBlocks(v42, v54, 0, v49, v50);
      }
      while ((v48 & 1) != 0);
    }
    while ((v51 & 1) != 0);
  }
  sub_1CC2930C0((uint64_t)v68);
  return v47 & 1;
}

void sub_1CCEDB5D8(uint64_t a1)
{
}

uint64_t sub_1CCEDB688(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCF87E8;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F2640EA0;
  uint64_t v4 = a1 + 32;
  long long v5 = *a2;
  *(void *)(a1 + 48) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 32) = v5;
  uint64_t v6 = *(void *)(a3 + 24);
  if (v6)
  {
    if (v6 == a3)
    {
      *(void *)(a1 + 80) = a1 + 56;
      a1 = (*(uint64_t (**)(void))(**(void **)(a3 + 24) + 24))(*(void *)(a3 + 24));
    }
    else
    {
      *(void *)(a1 + 80) = v6;
      *(void *)(a3 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 80) = 0;
  }
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF87F0, memory_order_acquire) != -1)
  {
    v10[0] = sub_1CCEDB5D8;
    v10[1] = &PassRegistry;
    uint64_t v9 = v10;
    std::__call_once(&qword_1EBCF87F0, &v9, (void (__cdecl *)(void *))sub_1CB848390);
  }
  sub_1CCEDA240(v4);
  return v3;
}

uint64_t sub_1CCEDB7AC(uint64_t a1, uint64_t a2, llvm::DomTreeUpdater *a3, uint64_t a4)
{
  v63[64] = *MEMORY[0x1E4F143B8];
  unsigned int v61 = v63;
  uint64_t v62 = 0x2000000000;
  llvm::FindFunctionBackedges(a1, (uint64_t)&v61);
  uint64_t v8 = (unint64_t *)v56;
  uint64_t v52 = (unint64_t *)v56;
  char v53 = (unint64_t *)v56;
  uint64_t v54 = 16;
  int v55 = 0;
  uint64_t v9 = v62;
  if (v62)
  {
    unsigned int v10 = 0;
    uint64_t v11 = 0;
    unsigned int v12 = 16;
    int v13 = (unint64_t *)v56;
    while (1)
    {
      unint64_t v14 = *((void *)v61 + 2 * v11 + 1);
      if (v13 != v8) {
        break;
      }
      if (v10)
      {
        uint64_t v15 = 0;
        uint64_t v16 = 8 * v10;
        uint64_t v17 = v8;
        while (*v17 != v14)
        {
          if (*v17 == -2) {
            uint64_t v15 = v17;
          }
          ++v17;
          v16 -= 8;
          if (!v16)
          {
            if (!v15) {
              goto LABEL_11;
            }
            *uint64_t v15 = v14;
            --v55;
            goto LABEL_34;
          }
        }
        goto LABEL_34;
      }
LABEL_11:
      if (v12 <= v10) {
        break;
      }
      HIDWORD(v54) = v10 + 1;
      v8[v10] = v14;
LABEL_34:
      uint64_t v8 = v52;
      int v13 = v53;
      unsigned int v12 = v54;
      unsigned int v10 = HIDWORD(v54);
      if (++v11 == v9) {
        goto LABEL_43;
      }
    }
    if (3 * v12 <= 4 * (v10 - v55))
    {
      if (v12 >= 0x40) {
        v12 *= 2;
      }
      else {
        unsigned int v12 = 128;
      }
    }
    else if (v12 - v10 >= v12 >> 3)
    {
      goto LABEL_15;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v52, v12);
    unsigned int v12 = v54;
    int v13 = v53;
LABEL_15:
    unsigned int v18 = v12 - 1;
    unsigned int v19 = (v12 - 1) & ((v14 >> 4) ^ (v14 >> 9));
    uint64_t v20 = &v13[v19];
    unint64_t v21 = *v20;
    if (*v20 == -1)
    {
      int v22 = 0;
LABEL_27:
      if (v22) {
        int v26 = v22;
      }
      else {
        int v26 = v20;
      }
      if (*v26 != v14)
      {
        if (*v26 == -2) {
          --v55;
        }
        else {
          ++HIDWORD(v54);
        }
        *int v26 = v14;
      }
    }
    else
    {
      int v22 = 0;
      int v23 = 1;
      while (v21 != v14)
      {
        if (v22) {
          BOOL v24 = 0;
        }
        else {
          BOOL v24 = v21 == -2;
        }
        if (v24) {
          int v22 = v20;
        }
        unsigned int v25 = v19 + v23++;
        unsigned int v19 = v25 & v18;
        uint64_t v20 = &v13[v25 & v18];
        unint64_t v21 = *v20;
        if (*v20 == -1) {
          goto LABEL_27;
        }
      }
    }
    goto LABEL_34;
  }
  unsigned int v10 = 0;
  unsigned int v12 = 16;
  int v13 = (unint64_t *)v56;
LABEL_43:
  if (v13 == v8) {
    uint64_t v27 = v10;
  }
  else {
    uint64_t v27 = v12;
  }
  uint64_t v28 = v13;
  if (v27)
  {
    uint64_t v29 = 8 * v27;
    uint64_t v28 = v13;
    while (*v28 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v28;
      v29 -= 8;
      if (!v29)
      {
        int v30 = 0;
        int v31 = 0;
        uint64_t v58 = v60;
        HIDWORD(v59) = 16;
        goto LABEL_70;
      }
    }
  }
  uint64_t v32 = &v13[v27];
  uint64_t v33 = v60;
  uint64_t v58 = v60;
  uint64_t v59 = 0x1000000000;
  if (v28 == v32)
  {
    int v30 = 0;
    int v31 = 0;
  }
  else
  {
    unint64_t v34 = 0;
    uint64_t v35 = v28;
LABEL_54:
    int v30 = v34 + 1;
    uint64_t v36 = v35 + 1;
    while (v36 != v32)
    {
      unint64_t v37 = *v36++;
      if (v37 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v35 = v36 - 1;
        ++v34;
        goto LABEL_54;
      }
    }
    if (v34 >= 0x10)
    {
      sub_1CC0BD844((unsigned int *)&v58, v34 + 1);
      int v38 = v59;
      uint64_t v33 = v58;
    }
    else
    {
      int v38 = 0;
    }
    uint64_t v39 = (llvm::ValueHandleBase *)&v33[24 * v38];
    unint64_t v40 = *v28;
LABEL_61:
    *(void *)uint64_t v39 = 4;
    *((void *)v39 + 1) = 0;
    *((void *)v39 + 2) = v40;
    if (v40 != -8192 && v40 != -4096 && v40) {
      llvm::ValueHandleBase::AddToUseList(v39);
    }
    unsigned int v41 = v28 + 1;
    while (v41 != v32)
    {
      unint64_t v42 = *v41++;
      unint64_t v40 = v42;
      if (v42 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v39 = (llvm::ValueHandleBase *)((char *)v39 + 24);
        uint64_t v28 = v41 - 1;
        goto LABEL_61;
      }
    }
    int v31 = v59;
  }
LABEL_70:
  char v43 = 0;
  LODWORD(v59) = v31 + v30;
  uint64_t v44 = a1 + 72;
  do
  {
    uint64_t v45 = *(void *)(a1 + 80);
    if (v45 == v44) {
      break;
    }
    char v46 = 0;
    do
    {
      char v47 = (llvm *)(v45 - 24);
      BOOL v24 = v45 == 0;
      uint64_t v45 = *(void *)(v45 + 8);
      if (v24) {
        char v48 = 0;
      }
      else {
        char v48 = v47;
      }
      if (a3 && v45 != v44)
      {
        while (1)
        {
          int v49 = v45 ? (llvm::BasicBlock *)(v45 - 24) : 0;
          if (!llvm::DomTreeUpdater::isBBPendingDeletion(a3, v49)) {
            break;
          }
          uint64_t v45 = *(void *)(v45 + 8);
          if (v45 == v44)
          {
            uint64_t v45 = a1 + 72;
            break;
          }
        }
      }
      uint64_t v50 = *(void *)(*((void *)v48 + 7) + 40) + 272;
      v57[0] = a2;
      v57[1] = a3;
      v57[2] = v50;
      v57[3] = v58;
      v57[4] = v59;
      v57[5] = a4;
      if (sub_1CD20F9BC((uint64_t)v57, v48)) {
        char v46 = 1;
      }
    }
    while (v45 != v44);
    char v43 = (v46 | v43) & 1;
  }
  while ((v46 & 1) != 0);
  sub_1CC0BD0FC(&v58);
  if (v53 != v52) {
    free(v53);
  }
  if (v61 != v63) {
    free(v61);
  }
  return v43 & 1;
}

_DWORD *sub_1CCEDBC08@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v16 = 0;
  uint64_t result = (_DWORD *)sub_1CCEDBCD0(a1, a2, &v16);
  uint64_t v9 = v16;
  if (result)
  {
    uint64_t v14 = a1 + 8;
    if (*(unsigned char *)a1)
    {
      uint64_t v15 = 4;
    }
    else
    {
      uint64_t v14 = *(void *)(a1 + 8);
      uint64_t v15 = *(unsigned int *)(a1 + 16);
    }
    char v13 = 0;
    uint64_t v12 = v14 + 8 * v15;
  }
  else
  {
    uint64_t result = sub_1CCEDBD80((_DWORD *)a1, (uint64_t)a2, a2, v16);
    uint64_t v9 = result;
    *uint64_t result = *a2;
    result[1] = *a3;
    uint64_t v10 = a1 + 8;
    if (*(unsigned char *)a1)
    {
      uint64_t v11 = 4;
    }
    else
    {
      uint64_t v10 = *(void *)(a1 + 8);
      uint64_t v11 = *(unsigned int *)(a1 + 16);
    }
    uint64_t v12 = v10 + 8 * v11;
    char v13 = 1;
  }
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v12;
  *(unsigned char *)(a4 + 16) = v13;
  return result;
}

uint64_t sub_1CCEDBCD0(uint64_t a1, _DWORD *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (37 * *a2) & (v4 - 1);
  uint64_t v7 = (_DWORD *)(v3 + 8 * v6);
  int v8 = *v7;
  if (*a2 == *v7)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    uint64_t result = 1;
    while (v8 != -1)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -2;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (_DWORD *)(v3 + 8 * (v13 & v5));
      int v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_8;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

_DWORD *sub_1CCEDBD80(_DWORD *a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v4 = *a1 >> 1;
  if (*a1) {
    unsigned int v5 = 4;
  }
  else {
    unsigned int v5 = a1[4];
  }
  if (4 * v4 + 4 >= 3 * v5)
  {
    v5 *= 2;
  }
  else if (v5 + ~v4 - a1[1] > v5 >> 3)
  {
    goto LABEL_5;
  }
  uint64_t v8 = (uint64_t)a1;
  sub_1CD784E28((uint64_t)a1, v5);
  uint64_t v9 = 0;
  sub_1CCEDBCD0(v8, a3, &v9);
  a1 = (_DWORD *)v8;
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -1) {
    --a1[1];
  }
  return a4;
}

void sub_1CCEDBE40()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1CCEDBF3C(llvm::Pass *this)
{
  *(void *)this = &unk_1F2640EA0;
  int v2 = (char *)this + 56;
  uint64_t v3 = (char *)*((void *)this + 10);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CCEDBFF0(llvm::Pass *this)
{
  *(void *)this = &unk_1F2640EA0;
  int v2 = (char *)this + 56;
  uint64_t v3 = (char *)*((void *)this + 10);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CCEDC0B8(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  if (byte_1EBD0CD18) {
    sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  }
  sub_1CB843600(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  if (byte_1EBD0CD18) {
    sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  }

  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
}

uint64_t sub_1CCEDC15C(uint64_t a1, uint64_t a2)
{
  if (llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, (llvm::LLVMContextImpl ****)a2)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 80);
  if (v4)
  {
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v4 + 48))(v4, a2)) {
      return 0;
    }
  }
  unsigned int v5 = *(uint64_t **)(a1 + 8);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (v6 == v7)
  {
LABEL_7:
    uint64_t v8 = 0;
  }
  else
  {
    while (*(char **)v6 != llvm::AssumptionCacheTracker::ID)
    {
      v6 += 16;
      if (v6 == v7) {
        goto LABEL_7;
      }
    }
    uint64_t v8 = *(void *)(v6 + 8);
  }
  int v10 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(uint64_t, char *))(*(void *)v8 + 96))(v8, llvm::AssumptionCacheTracker::ID);
  *(void *)(a1 + 48) = llvm::AssumptionCacheTracker::getAssumptionCache(v10, (llvm::Function *)a2);
  if (byte_1EBD0CD18)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    if (v12 == v13)
    {
LABEL_14:
      uint64_t v14 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v12 != &llvm::DominatorTreeWrapperPass::ID)
      {
        v12 += 16;
        if (v12 == v13) {
          goto LABEL_14;
        }
      }
      uint64_t v14 = *(void *)(v12 + 8);
    }
    uint64_t v15 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v14 + 96))(v14, &llvm::DominatorTreeWrapperPass::ID)
        + 32;
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(void *)(a2 + 112);
  if (v16) {
    BOOL v17 = (*(unsigned char *)(v16 + 17) & 2) == 0;
  }
  else {
    BOOL v17 = 1;
  }
  *(unsigned char *)(a1 + 42) = v17;
  *(unsigned char *)(a1 + 43) = v17;
  unsigned int v18 = *(uint64_t **)(a1 + 8);
  uint64_t v19 = *v18;
  uint64_t v20 = v18[1];
  if (v19 == v20)
  {
LABEL_24:
    uint64_t v21 = 0;
  }
  else
  {
    while (*(char **)v19 != llvm::TargetTransformInfoWrapperPass::ID)
    {
      v19 += 16;
      if (v19 == v20) {
        goto LABEL_24;
      }
    }
    uint64_t v21 = *(void *)(v19 + 8);
  }
  int v22 = (llvm::TargetTransformInfoWrapperPass *)(*(uint64_t (**)(uint64_t, char *))(*(void *)v21 + 96))(v21, llvm::TargetTransformInfoWrapperPass::ID);
  TTI = llvm::TargetTransformInfoWrapperPass::getTTI(v22, (const Function *)a2);

  return sub_1CCEDA4D0((llvm *)a2, (uint64_t)TTI, v15, (llvm::MemorySSAUpdater *)(a1 + 32), v24);
}

uint64_t sub_1CCEDC388()
{
  int v4 = 1;
  int v1 = 1;
  v2.n128_u64[0] = (unint64_t)"Control the number of bonus instructions (default = 1)";
  v2.n128_u64[1] = 54;
  uint64_t v3 = &v1;
  sub_1CD45A86C((uint64_t)&unk_1EBD0B9F8, "bonus-inst-threshold", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBD0B9F8, &dword_1CB82C000);
  int v4 = 1;
  LOBYTE(v1) = 1;
  v2.n128_u64[0] = (unint64_t)"Preserve canonical loop structure (default = true)";
  v2.n128_u64[1] = 50;
  uint64_t v3 = &v1;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBD0BAB8, "keep-loops", &v4, (unsigned char **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBD0BAB8, &dword_1CB82C000);
  int v4 = 1;
  LOBYTE(v1) = 0;
  v2.n128_u64[0] = (unint64_t)"Convert switches into an integer range comparison (default = false)";
  v2.n128_u64[1] = 67;
  uint64_t v3 = &v1;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBD0BB78, "switch-range-to-icmp", &v4, (unsigned char **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBD0BB78, &dword_1CB82C000);
  int v4 = 1;
  LOBYTE(v1) = 0;
  v2.n128_u64[0] = (unint64_t)"Convert switches to lookup tables (default = false)";
  v2.n128_u64[1] = 51;
  uint64_t v3 = &v1;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBD0BC38, "switch-to-lookup", &v4, (unsigned char **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBD0BC38, &dword_1CB82C000);
  int v4 = 1;
  LOBYTE(v1) = 0;
  v2.n128_u64[0] = (unint64_t)"Forward switch condition to phi ops (default = false)";
  v2.n128_u64[1] = 53;
  uint64_t v3 = &v1;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBD0BCF8, "forward-switch-cond", &v4, (unsigned char **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBD0BCF8, &dword_1CB82C000);
  int v4 = 1;
  LOBYTE(v1) = 0;
  v2.n128_u64[0] = (unint64_t)"hoist common instructions (default = false)";
  v2.n128_u64[1] = 43;
  uint64_t v3 = &v1;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBD0BDB8, "hoist-common-insts", &v4, (unsigned char **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBD0BDB8, &dword_1CB82C000);
  int v4 = 1;
  LOBYTE(v1) = 0;
  v2.n128_u64[0] = (unint64_t)"Sink common instructions (default = false)";
  v2.n128_u64[1] = 42;
  uint64_t v3 = &v1;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBD0BE78, "sink-common-insts", &v4, (unsigned char **)&v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBD0BE78, &dword_1CB82C000);
}

uint64_t sub_1CCEDC618(uint64_t a1)
{
  for (uint64_t i = *(void *)(a1 + 80); i != a1 + 72; uint64_t i = *(void *)(i + 8))
  {
    if (i) {
      uint64_t v2 = i - 24;
    }
    else {
      uint64_t v2 = 0;
    }
    uint64_t v3 = *(void *)(v2 + 40);
    if (v3 == v2 + 40)
    {
      uint64_t v4 = 0;
    }
    else
    {
      if (v3) {
        uint64_t v4 = v3 - 24;
      }
      else {
        uint64_t v4 = 0;
      }
      if (*(unsigned __int8 *)(v4 + 16) - 29 >= 0xB) {
        uint64_t v4 = 0;
      }
    }
    if (*(unsigned char *)(v4 + 16) != 30)
    {
      switch(*(unsigned char *)(v4 + 16))
      {
        case 0x1E:
          __break(1u);
          JUMPOUT(0x1CCEDD3E8);
        case 0x1F:
          unsigned int v5 = (*(_DWORD *)(v4 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_18;
        case 0x20:
        case 0x26:
          unsigned int v5 = (*(_DWORD *)(v4 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_18;
        case 0x21:
          goto LABEL_15;
        case 0x27:
          unsigned int v5 = *(_DWORD *)(v4 + 80) + 1;
LABEL_18:
          if (v5 < 2) {
            continue;
          }
          goto LABEL_15;
        default:
          continue;
      }
    }
    if ((*(_DWORD *)(v4 + 20) & 0x7FFFFFF) == 3) {
LABEL_15:
    }
      llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry();
  }
  return 0;
}

void sub_1CCEDD414(llvm *a1)
{
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeAAResultsWrapperPassPass(a1, v2);
  operator new();
}

uint64_t sub_1CCEDD4C4(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCF87F9;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F2640F40;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF8800, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CCEDD414;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCF8800, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CCEDD574()
{
}

void sub_1CCEDD5B4(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CCEDD5EC(llvm::PassRegistry *a1, uint64_t a2)
{
  uint64_t v3 = a2 + 112;
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
  sub_1CB843600(a2, a2, (uint64_t)llvm::AAResultsWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
  sub_1CB843600(a2, v3, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);

  sub_1CB843600(a2, v3, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
}

uint64_t sub_1CCEDD6BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_4:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v5 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  (*(void (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::DominatorTreeWrapperPass::ID);
  uint64_t v8 = *(uint64_t **)(a1 + 8);
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  if (v9 == v10)
  {
LABEL_9:
    uint64_t v11 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v9 != &llvm::LoopInfoWrapperPass::ID)
    {
      v9 += 16;
      if (v9 == v10) {
        goto LABEL_9;
      }
    }
    uint64_t v11 = *(void *)(v9 + 8);
  }
  (*(void (**)(uint64_t, void *))(*(void *)v11 + 96))(v11, &llvm::LoopInfoWrapperPass::ID);
  uint64_t v12 = *(uint64_t **)(a1 + 8);
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  if (v13 == v14)
  {
LABEL_14:
    uint64_t v15 = 0;
  }
  else
  {
    while (*(char **)v13 != llvm::AAResultsWrapperPass::ID)
    {
      v13 += 16;
      if (v13 == v14) {
        goto LABEL_14;
      }
    }
    uint64_t v15 = *(void *)(v13 + 8);
  }
  (*(void (**)(uint64_t, char *))(*(void *)v15 + 96))(v15, llvm::AAResultsWrapperPass::ID);

  return sub_1CCEDC618(a2);
}

void sub_1CCEDD850(uint64_t a1)
{
}

uint64_t llvm::SpeculativeExecutionPass::runImpl(llvm::SpeculativeExecutionPass *this, llvm::Function *a2, llvm::TargetTransformInfo *a3)
{
  if (*(unsigned char *)this && !(*(unsigned int (**)(void))(**(void **)a3 + 88))()
    || (*((void *)this + 1) = a3, v6 = (char *)a2 + 72, uint64_t v7 = *((void *)a2 + 10), (char *)v7 == v6))
  {
    LOBYTE(v8) = 0;
  }
  else
  {
    int v8 = 0;
    do
    {
      if (v7) {
        uint64_t v9 = (llvm::BasicBlock *)(v7 - 24);
      }
      else {
        uint64_t v9 = 0;
      }
      v8 |= llvm::SpeculativeExecutionPass::runOnBasicBlock(this, v9);
      uint64_t v7 = *(void *)(v7 + 8);
    }
    while ((char *)v7 != v6);
  }
  return v8 & 1;
}

uint64_t llvm::SpeculativeExecutionPass::runOnBasicBlock(llvm::SpeculativeExecutionPass *this, llvm::BasicBlock *a2)
{
  uint64_t v2 = (llvm::BasicBlock *)*((void *)a2 + 5);
  if (v2 == (llvm::BasicBlock *)((char *)a2 + 40)) {
    return 0;
  }
  uint64_t v3 = (char *)v2 - 24;
  if (!v2) {
    uint64_t v3 = 0;
  }
  unsigned int v4 = v3[16] - 40;
  if (v4 < 0xFFFFFFF5) {
    uint64_t v3 = 0;
  }
  if (!v2) {
    return 0;
  }
  BOOL v5 = v3[16] == 30 && v4 >= 0xFFFFFFF5;
  if (!v5 || (*((_DWORD *)v3 + 5) & 0x7FFFFFF) != 3) {
    return 0;
  }
  uint64_t v7 = (llvm::BasicBlock *)*((void *)v3 - 4);
  int v8 = (llvm::BasicBlock *)*((void *)v3 - 8);
  BOOL v9 = v7 == a2 || v8 == a2;
  if (v9 || v7 == v8) {
    return 0;
  }
  if (!llvm::BasicBlock::getSinglePredecessor(*((llvm::BasicBlock **)v3 - 4))
    || (llvm::BasicBlock *)llvm::BasicBlock::getSingleSuccessor(v7) != v8)
  {
    if (llvm::BasicBlock::getSinglePredecessor(v8)
      && (llvm::BasicBlock *)llvm::BasicBlock::getSingleSuccessor(v8) == v7)
    {
      uint64_t v7 = v8;
      goto LABEL_39;
    }
    if (!llvm::BasicBlock::getSinglePredecessor(v7)) {
      return 0;
    }
    if (!llvm::BasicBlock::getSinglePredecessor(v8)) {
      return 0;
    }
    if (!llvm::BasicBlock::getSingleSuccessor(v8)) {
      return 0;
    }
    if ((llvm::BasicBlock *)llvm::BasicBlock::getSingleSuccessor(v8) == a2) {
      return 0;
    }
    uint64_t SingleSuccessor = llvm::BasicBlock::getSingleSuccessor(v8);
    if (SingleSuccessor != llvm::BasicBlock::getSingleSuccessor(v7)) {
      return 0;
    }
    uint64_t v14 = 2;
    uint64_t v15 = (void *)((char *)v8 + 40);
    do
    {
      uint64_t v15 = (void *)v15[1];
      --v14;
    }
    while (v15 != (void *)((char *)v8 + 40));
    if (v14)
    {
      uint64_t v16 = 2;
      BOOL v17 = (void *)((char *)v7 + 40);
      do
      {
        BOOL v17 = (void *)v17[1];
        --v16;
      }
      while (v17 != (void *)((char *)v7 + 40));
      uint64_t v7 = v8;
      if (v16) {
        return 0;
      }
    }
  }
LABEL_39:

  return llvm::SpeculativeExecutionPass::considerHoistingFromTo(this, v7, a2);
}

uint64_t llvm::SpeculativeExecutionPass::considerHoistingFromTo(llvm::SpeculativeExecutionPass *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  v108[4] = *MEMORY[0x1E4F143B8];
  uint64_t v101 = v105;
  uint64_t v102 = v105;
  uint64_t v103 = 8;
  int v104 = 0;
  uint64_t v3 = (char *)a2 + 40;
  unsigned int v4 = (char *)*((void *)a2 + 6);
  if (v4 != (char *)a2 + 40)
  {
    unsigned int v6 = 0;
    int64_t v7 = 0;
    while (1)
    {
      if (v4) {
        uint64_t v8 = (uint64_t)(v4 - 24);
      }
      else {
        uint64_t v8 = 0;
      }
      BOOL v9 = (void *)*((void *)this + 1);
      unsigned int v10 = *(unsigned __int8 *)(v8 + 16);
      if (v4 && v10 > 0x1B)
      {
        unsigned int v11 = v10 - 28;
      }
      else
      {
        uint64_t v12 = 0;
        if (!v4) {
          goto LABEL_159;
        }
        int v13 = 1;
        if (v10 != 5) {
          goto LABEL_26;
        }
        unsigned int v11 = *(unsigned __int16 *)(v8 + 18);
      }
      unsigned int v14 = v11 - 12;
      BOOL v15 = v14 > 0x37;
      uint64_t v16 = (1 << v14) & 0xBE367FFC47F27FLL;
      if (v15 || v16 == 0)
      {
        uint64_t v12 = 0;
LABEL_159:
        int v13 = 1;
        goto LABEL_26;
      }
      int v18 = *(_DWORD *)(v8 + 20);
      if ((v18 & 0x40000000) != 0)
      {
        uint64_t v20 = *(uint64_t **)(v8 - 8);
        unint64_t v19 = v18 & 0x7FFFFFF;
      }
      else
      {
        unint64_t v19 = v18 & 0x7FFFFFF;
        uint64_t v20 = (uint64_t *)(v8 - 32 * v19);
      }
      uint64_t v106 = v108;
      uint64_t v107 = 0x400000000;
      if (v19 >= 5) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v19)
      {
        uint64_t v21 = 32 * v19;
        int v22 = v108;
        do
        {
          uint64_t v23 = *v20;
          v20 += 4;
          *v22++ = v23;
          v21 -= 32;
        }
        while (v21);
        BOOL v24 = v106;
      }
      else
      {
        BOOL v24 = v108;
      }
      LODWORD(v107) = v19;
      uint64_t v12 = (*(uint64_t (**)(void, uint64_t, void *))(*(void *)*v9 + 72))(*v9, v8, v24);
      int v13 = v25;
      if (v106 != v108) {
        free(v106);
      }
LABEL_26:
      if (!v13 && llvm::isSafeToSpeculativelyExecute(v8, 0, 0, 0))
      {
        if (sub_1CC5817B4(v8) && v4)
        {
          llvm::DbgVariableIntrinsic::location_ops(v8, &v106);
          unint64_t v26 = (unint64_t)v106;
          if (v106 == (void *)v107) {
            goto LABEL_152;
          }
          int v27 = v103 - 1;
          while (1)
          {
            uint64_t v28 = (unint64_t *)(v26 & 0xFFFFFFFFFFFFFFF8);
            unint64_t v29 = v26 & 0xFFFFFFFFFFFFFFF8;
            if ((v26 & 4) != 0) {
              unint64_t v29 = *v28;
            }
            uint64_t v30 = *(void *)(v29 + 128);
            if (!v30 || *(unsigned __int8 *)(v30 + 16) < 0x1Cu) {
              break;
            }
            if (v102 == v101)
            {
              if (HIDWORD(v103))
              {
                uint64_t v31 = 0;
                while (*(void *)&v102[v31] != v30)
                {
                  v31 += 8;
                  if (8 * HIDWORD(v103) == v31)
                  {
                    int v32 = HIDWORD(v103);
                    goto LABEL_56;
                  }
                }
                unsigned int v41 = &v102[v31];
                int v32 = HIDWORD(v103);
                unint64_t v42 = v102;
              }
              else
              {
                int v32 = 0;
LABEL_56:
                unint64_t v42 = v102;
                unsigned int v41 = &v102[8 * HIDWORD(v103)];
              }
            }
            else
            {
              unsigned int v33 = v27 & ((v30 >> 4) ^ (v30 >> 9));
              unint64_t v34 = &v102[8 * v33];
              uint64_t v35 = *(void *)v34;
              if (*(void *)v34 == -1)
              {
                uint64_t v36 = 0;
LABEL_58:
                if (v36) {
                  unint64_t v34 = v36;
                }
                uint64_t v40 = *(void *)v34;
              }
              else
              {
                uint64_t v36 = 0;
                int v37 = 1;
                while (v35 != v30)
                {
                  if (v36) {
                    BOOL v38 = 0;
                  }
                  else {
                    BOOL v38 = v35 == -2;
                  }
                  if (v38) {
                    uint64_t v36 = v34;
                  }
                  unsigned int v39 = v33 + v37++;
                  unsigned int v33 = v39 & v27;
                  unint64_t v34 = &v102[8 * (v39 & v27)];
                  uint64_t v35 = *(void *)v34;
                  if (*(void *)v34 == -1) {
                    goto LABEL_58;
                  }
                }
                uint64_t v40 = v30;
              }
              unsigned int v41 = v40 == v30 ? v34 : &v102[8 * v103];
              int v32 = HIDWORD(v103);
              unint64_t v42 = v101;
            }
            if (v102 != v42) {
              int v32 = v103;
            }
            if (v41 != &v102[8 * v32]) {
              break;
            }
            uint64_t v43 = (unint64_t)(v28 + 1) | 4;
            uint64_t v44 = v28 + 17;
            if ((v26 & 4) != 0) {
              unint64_t v26 = v43;
            }
            else {
              unint64_t v26 = (unint64_t)v44;
            }
            if (v26 == v107) {
              goto LABEL_152;
            }
          }
        }
        else if (!sub_1CC58180C(v8))
        {
          int v60 = *(_DWORD *)(v8 + 20);
          if ((v60 & 0x40000000) != 0)
          {
            uint64_t v62 = *(void *)(v8 - 8);
            uint64_t v61 = v60 & 0x7FFFFFF;
            if (!v61)
            {
LABEL_152:
              if (__OFADD__(v7, v12)) {
                int64_t v7 = ((v7 + v12) >> 63) ^ 0x8000000000000000;
              }
              else {
                v7 += v12;
              }
              if (v7 > dword_1EBCF8898)
              {
LABEL_166:
                uint64_t v79 = 0;
                goto LABEL_214;
              }
              goto LABEL_156;
            }
          }
          else
          {
            uint64_t v61 = v60 & 0x7FFFFFF;
            uint64_t v62 = v8 - 32 * v61;
            if (!v61) {
              goto LABEL_152;
            }
          }
          uint64_t v63 = v62 + 32 * v61;
          int v64 = v103 - 1;
          while (1)
          {
            uint64_t v65 = *(void *)v62;
            if (*(void *)v62 && *(unsigned __int8 *)(*(void *)v62 + 16) >= 0x1Cu)
            {
              if (v102 == v101)
              {
                if (HIDWORD(v103))
                {
                  uint64_t v67 = 0;
                  while (*(void *)&v102[v67] != v65)
                  {
                    v67 += 8;
                    if (8 * HIDWORD(v103) == v67)
                    {
                      int v68 = HIDWORD(v103);
                      goto LABEL_139;
                    }
                  }
                  unsigned int v77 = &v102[v67];
                  int v68 = HIDWORD(v103);
                  int v78 = v102;
                }
                else
                {
                  int v68 = 0;
LABEL_139:
                  int v78 = v102;
                  unsigned int v77 = &v102[8 * HIDWORD(v103)];
                }
              }
              else
              {
                unsigned int v69 = v64 & ((v65 >> 4) ^ (v65 >> 9));
                char v70 = &v102[8 * v69];
                uint64_t v71 = *(void *)v70;
                if (*(void *)v70 == -1)
                {
                  unsigned int v72 = 0;
LABEL_141:
                  if (v72) {
                    char v70 = v72;
                  }
                  uint64_t v76 = *(void *)v70;
                }
                else
                {
                  unsigned int v72 = 0;
                  int v73 = 1;
                  while (v71 != v65)
                  {
                    if (v72) {
                      BOOL v74 = 0;
                    }
                    else {
                      BOOL v74 = v71 == -2;
                    }
                    if (v74) {
                      unsigned int v72 = v70;
                    }
                    unsigned int v75 = v69 + v73++;
                    unsigned int v69 = v75 & v64;
                    char v70 = &v102[8 * (v75 & v64)];
                    uint64_t v71 = *(void *)v70;
                    if (*(void *)v70 == -1) {
                      goto LABEL_141;
                    }
                  }
                  uint64_t v76 = *(void *)v62;
                }
                unsigned int v77 = v76 == v65 ? v70 : &v102[8 * v103];
                int v68 = HIDWORD(v103);
                int v78 = v101;
              }
              if (v102 != v78) {
                int v68 = v103;
              }
              if (v77 != &v102[8 * v68]) {
                break;
              }
            }
            v62 += 32;
            if (v62 == v63) {
              goto LABEL_152;
            }
          }
        }
      }
      v6 += !sub_1CBF63B28(v8);
      if (v6 > dword_1EBCF8958) {
        goto LABEL_166;
      }
      uint64_t v45 = v102;
      uint64_t v46 = HIDWORD(v103);
      if (v102 != v101)
      {
        unsigned int v50 = v103;
LABEL_86:
        if (3 * v50 <= 4 * (HIDWORD(v103) - v104))
        {
          if (v50 >= 0x40) {
            v50 *= 2;
          }
          else {
            unsigned int v50 = 128;
          }
        }
        else if (v50 - HIDWORD(v103) >= v50 >> 3)
        {
          goto LABEL_88;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v101, v50);
        unsigned int v50 = v103;
        uint64_t v45 = v102;
LABEL_88:
        unsigned int v51 = v50 - 1;
        unsigned int v52 = (v50 - 1) & ((v8 >> 4) ^ (v8 >> 9));
        char v53 = &v45[8 * v52];
        uint64_t v54 = *(void *)v53;
        if (*(void *)v53 == -1)
        {
          int v55 = 0;
LABEL_100:
          if (v55) {
            uint64_t v59 = v55;
          }
          else {
            uint64_t v59 = (uint64_t *)v53;
          }
          if (*v59 != v8)
          {
            if (*v59 == -2) {
              --v104;
            }
            else {
              ++HIDWORD(v103);
            }
            uint64_t *v59 = v8;
          }
        }
        else
        {
          int v55 = 0;
          int v56 = 1;
          while (v54 != v8)
          {
            if (v55) {
              BOOL v57 = 0;
            }
            else {
              BOOL v57 = v54 == -2;
            }
            if (v57) {
              int v55 = (uint64_t *)v53;
            }
            unsigned int v58 = v52 + v56++;
            unsigned int v52 = v58 & v51;
            char v53 = &v45[8 * (v58 & v51)];
            uint64_t v54 = *(void *)v53;
            if (*(void *)v53 == -1) {
              goto LABEL_100;
            }
          }
        }
        goto LABEL_156;
      }
      if (HIDWORD(v103))
      {
        char v47 = 0;
        uint64_t v48 = 8 * HIDWORD(v103);
        int v49 = (uint64_t *)v102;
        while (*v49 != v8)
        {
          if (*v49 == -2) {
            char v47 = v49;
          }
          ++v49;
          v48 -= 8;
          if (!v48)
          {
            if (!v47) {
              goto LABEL_83;
            }
            *char v47 = v8;
            --v104;
            goto LABEL_156;
          }
        }
        goto LABEL_156;
      }
LABEL_83:
      unsigned int v50 = v103;
      if (HIDWORD(v103) >= v103) {
        goto LABEL_86;
      }
      ++HIDWORD(v103);
      *(void *)&v102[8 * v46] = v8;
LABEL_156:
      unsigned int v4 = (char *)*((void *)v4 + 1);
      if (v4 == v3)
      {
        uint64_t v80 = *((void *)a2 + 6);
        if ((char *)v80 != v3)
        {
          uint64_t v81 = (void *)((char *)a3 + 40);
          do
          {
            if (v80) {
              uint64_t v82 = (llvm::Instruction *)(v80 - 24);
            }
            else {
              uint64_t v82 = 0;
            }
            uint64_t v83 = v101;
            if (v102 == v101)
            {
              int v84 = HIDWORD(v103);
              unsigned int v85 = &v102[8 * HIDWORD(v103)];
              if (HIDWORD(v103))
              {
                uint64_t v86 = 0;
                while (*(llvm::Instruction **)&v102[v86] != v82)
                {
                  v86 += 8;
                  if (8 * HIDWORD(v103) == v86) {
                    goto LABEL_191;
                  }
                }
                unsigned int v85 = &v102[v86];
              }
LABEL_191:
              uint64_t v83 = v102;
            }
            else
            {
              int v87 = v103 - 1;
              unsigned int v88 = (v103 - 1) & ((v82 >> 4) ^ (v82 >> 9));
              unsigned int v85 = &v102[8 * v88];
              uint64_t v89 = *(llvm::Instruction **)v85;
              if (*(void *)v85 == -1)
              {
                int v90 = 0;
LABEL_208:
                if (v90) {
                  unsigned int v85 = v90;
                }
                int v84 = HIDWORD(v103);
                if (*(llvm::Instruction **)v85 != v82) {
                  unsigned int v85 = &v102[8 * v103];
                }
              }
              else
              {
                int v90 = 0;
                int v91 = 1;
                while (v89 != v82)
                {
                  if (v90) {
                    BOOL v92 = 0;
                  }
                  else {
                    BOOL v92 = v89 == (llvm::Instruction *)-2;
                  }
                  if (v92) {
                    int v90 = v85;
                  }
                  unsigned int v93 = v88 + v91++;
                  unsigned int v88 = v93 & v87;
                  unsigned int v85 = &v102[8 * (v93 & v87)];
                  uint64_t v89 = *(llvm::Instruction **)v85;
                  if (*(void *)v85 == -1) {
                    goto LABEL_208;
                  }
                }
                int v84 = HIDWORD(v103);
              }
            }
            uint64_t v80 = *(void *)(v80 + 8);
            if (v102 == v83) {
              int v94 = v84;
            }
            else {
              int v94 = v103;
            }
            if (v85 == &v102[8 * v94])
            {
              BOOL v95 = (void *)*v81;
              if ((void *)*v81 == v81)
              {
                uint64_t v97 = 0;
              }
              else
              {
                if (v95) {
                  unsigned int v96 = (unsigned __int8 *)(v95 - 3);
                }
                else {
                  unsigned int v96 = 0;
                }
                if (v96[16] - 29 >= 0xB) {
                  uint64_t v97 = 0;
                }
                else {
                  uint64_t v97 = (llvm::Instruction *)v96;
                }
              }
              llvm::Instruction::moveBefore(v82, v97);
            }
          }
          while ((char *)v80 != v3);
        }
        break;
      }
    }
  }
  uint64_t v79 = 1;
LABEL_214:
  if (v102 != v101) {
    free(v102);
  }
  return v79;
}

uint64_t llvm::SpeculativeExecutionPass::SpeculativeExecutionPass(uint64_t this, char a2)
{
  if (byte_1EBD0BFB8) {
    a2 = 1;
  }
  *(unsigned char *)this = a2;
  *(void *)(this + 8) = 0;
  return this;
}

{
  if (byte_1EBD0BFB8) {
    a2 = 1;
  }
  *(unsigned char *)this = a2;
  *(void *)(this + 8) = 0;
  return this;
}

void llvm::SpeculativeExecutionPass::run()
{
}

void sub_1CCEDE450()
{
}

void sub_1CCEDE4C4(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CCEDE4FC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 28)) {
    return "Speculatively execute instructions if target has divergent branches";
  }
  else {
    return "Speculatively execute instructions";
  }
}

void sub_1CCEDE528(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v3);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
}

uint64_t sub_1CCEDE5A4(void *a1, llvm::LLVMContextImpl ****a2)
{
  if (llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, a2)) {
    return 0;
  }
  BOOL v5 = (uint64_t *)a1[1];
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (v6 == v7)
  {
LABEL_6:
    uint64_t v8 = 0;
  }
  else
  {
    while (*(char **)v6 != llvm::TargetTransformInfoWrapperPass::ID)
    {
      v6 += 16;
      if (v6 == v7) {
        goto LABEL_6;
      }
    }
    uint64_t v8 = *(void *)(v6 + 8);
  }
  BOOL v9 = (llvm::TargetTransformInfoWrapperPass *)(*(uint64_t (**)(uint64_t, char *))(*(void *)v8 + 96))(v8, llvm::TargetTransformInfoWrapperPass::ID);
  TTI = llvm::TargetTransformInfoWrapperPass::getTTI(v9, (const Function *)a2);

  return llvm::SpeculativeExecutionPass::runImpl((llvm::SpeculativeExecutionPass *)(a1 + 4), (llvm::Function *)a2, (llvm::TargetTransformInfo *)TTI);
}

uint64_t sub_1CCEDE66C()
{
  int v3 = 7;
  unsigned int v4 = &v3;
  int v1 = 1;
  v2.n128_u64[0] = (unint64_t)"Speculative execution is not applied to basic blocks where the cost of the instruct"
                                     "ions to speculatively execute exceeds this limit.";
  v2.n128_u64[1] = 132;
  sub_1CBF7A9F8((uint64_t)&unk_1EBCF8818, "spec-exec-max-speculation-cost", &v4, &v1, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCF8818, &dword_1CB82C000);
  int v3 = 5;
  unsigned int v4 = &v3;
  int v1 = 1;
  v2.n128_u64[0] = (unint64_t)"Speculative execution is not applied to basic blocks where the number of instructio"
                                     "ns that would not be speculatively executed exceeds this limit.";
  v2.n128_u64[1] = 146;
  sub_1CBF7A9F8((uint64_t)&unk_1EBCF88D8, "spec-exec-max-not-hoisted", &v4, &v1, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCF88D8, &dword_1CB82C000);
  LOBYTE(v1) = 0;
  unsigned int v4 = &v1;
  int v3 = 1;
  v2.n128_u64[0] = (unint64_t)"Speculative execution is applied only to targets with divergent branches, even if t"
                                     "he pass was configured to apply only to all targets.";
  v2.n128_u64[1] = 135;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBD0BF38, "spec-exec-only-if-divergent-target", (unsigned char **)&v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBD0BF38, &dword_1CB82C000);
}

void sub_1CCEDE7C4(llvm *a1)
{
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeScalarEvolutionWrapperPassPass(a1, v2);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  operator new();
}

uint64_t sub_1CCEDE874(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCF8998;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F2641080;
  *(void *)(a1 + 32) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF89A0, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CCEDE7C4;
    v5[1] = &PassRegistry;
    unsigned int v4 = v5;
    std::__call_once(&qword_1EBCF89A0, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

BOOL sub_1CCEDE928(uint64_t a1)
{
  uint64_t v1 = a1;
  v283[4] = *MEMORY[0x1E4F143B8];
  sub_1CD77A434(a1 + 8, &v260);
  __n128 v2 = (llvm::LLVMContext *)v256;
  p_src = (llvm::LLVMContext *)v256;
  int v3 = (const void *)v261;
  uint64_t v232 = (uint64_t *)v1;
  if ((void *)v261 == v260)
  {
    uint64_t v252 = (llvm::LLVMContext *)v256;
    unsigned int v4 = (void *)v261;
  }
  else
  {
    unsigned int v226 = v262;
    __n128 v2 = (llvm::LLVMContext *)malloc_type_malloc(8 * v262, 0x4065EBACuLL);
    if (!v2)
    {
      if (v226) {
        goto LABEL_412;
      }
      __n128 v2 = (llvm::LLVMContext *)malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v2) {
        goto LABEL_412;
      }
    }
    uint64_t v252 = v2;
    unsigned int v4 = v260;
    int v3 = (const void *)v261;
  }
  unsigned int v5 = v263;
  unsigned int v253 = v262;
  if (v3 == v4) {
    unsigned int v6 = v263;
  }
  else {
    unsigned int v6 = v262;
  }
  if (v6)
  {
    memmove(v2, v3, 8 * v6);
    unsigned int v5 = v263;
  }
  unsigned int v254 = v5;
  LODWORD(v255) = v264;
  unsigned int v258 = 0;
  uint64_t v259 = 0;
  __p = 0;
  sub_1CBF340A8(&__p, v271, v272, 0xAAAAAAAAAAAAAAABLL * ((v272 - (unsigned char *)v271) >> 3));
  uint64_t v7 = v239;
  __src = v239;
  uint64_t v8 = v275;
  if (v275 != v274)
  {
    unsigned int v227 = v276;
    uint64_t v7 = malloc_type_malloc(8 * v276, 0x4065EBACuLL);
    if (v7 || !v227 && (uint64_t v7 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      *(void *)int v235 = v7;
      BOOL v9 = v274;
      uint64_t v8 = v275;
      goto LABEL_10;
    }
LABEL_412:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  *(void *)int v235 = v239;
  BOOL v9 = v275;
LABEL_10:
  unsigned int v10 = v277;
  unsigned int v236 = v276;
  if (v8 == v9) {
    unsigned int v11 = v277;
  }
  else {
    unsigned int v11 = v276;
  }
  if (v11)
  {
    memmove(v7, v8, 8 * v11);
    unsigned int v10 = v277;
  }
  unsigned int v237 = v10;
  int v238 = v278;
  uint64_t v241 = 0;
  uint64_t v242 = 0;
  unint64_t v240 = 0;
  sub_1CBF340A8(&v240, v279, v280, 0xAAAAAAAAAAAAAAABLL * ((v280 - (unsigned char *)v279) >> 3));
  int v13 = (llvm::LLVMContext *)v283;
  while (1)
  {
    if (v258 - (unsigned char *)__p != v241 - v240) {
      goto LABEL_30;
    }
    if (__p == v258) {
      break;
    }
    unsigned int v14 = v240 + 8;
    BOOL v15 = (char *)__p + 8;
    while (1)
    {
      uint64_t v16 = v15 - 8;
      if (*((void *)v15 - 1) != *((void *)v14 - 1)) {
        break;
      }
      int v17 = v14[8];
      if (v15[8]) {
        BOOL v18 = v17 == 0;
      }
      else {
        BOOL v18 = 1;
      }
      if (v18)
      {
        if ((v15[8] == 0) == (v17 != 0)) {
          break;
        }
      }
      else if (*(void *)v15 != *(void *)v14)
      {
        break;
      }
      v14 += 24;
      v15 += 24;
      if (v16 + 24 == v258) {
        goto LABEL_137;
      }
    }
LABEL_30:
    uint64_t v19 = **((void **)v258 - 3);
    uint64_t v20 = *(void *)(v19 + 48);
    uint64_t v228 = v13;
    uint64_t v229 = v19 + 40;
    while (v20 != v229)
    {
      if (v20) {
        uint64_t v21 = v20 - 24;
      }
      else {
        uint64_t v21 = 0;
      }
      int v22 = *(unsigned __int8 *)(v21 + 16);
      if (v22 == 62)
      {
        if ((*(_DWORD *)(*(void *)v21 + 8) & 0xFE) != 0x12)
        {
          uint64_t v281 = v13;
          uint64_t v282 = 0x400000000;
          int v27 = *(_DWORD *)(v21 + 20);
          uint64_t v28 = (unint64_t *)(v21 - 32 * (v27 & 0x7FFFFFF) + 32);
          if (v28 == (unint64_t *)v21)
          {
            int v40 = 62;
LABEL_68:
            BOOL v45 = v40 != 62 || v20 == 0;
            uint64_t v46 = 64;
            if (v45) {
              uint64_t v46 = 24;
            }
            uint64_t v47 = *(void *)(v21 + v46);
            if ((v27 & 0x40000000) != 0)
            {
              uint64_t v49 = *(void *)(v21 - 8);
              LODWORD(v48) = v27 & 0x7FFFFFF;
            }
            else
            {
              uint64_t v48 = v27 & 0x7FFFFFF;
              uint64_t v49 = v21 - 32 * v48;
            }
            unsigned int v247 = (const char *)(v49 + 32);
            uint64_t v248 = v47 | 4;
            if (v48 != 1)
            {
              uint64_t v50 = 1;
              int v231 = v48;
              do
              {
                if ((v248 & 4) != 0)
                {
                  uint64_t v51 = v50 - 1;
                  uint64_t v52 = *((void *)v281 + v50 - 1);
                  uint64_t v53 = v52;
                  while (2)
                  {
                    switch(*(_WORD *)(v53 + 24))
                    {
                      case 1:
                      case 2:
                      case 3:
                      case 0xD:
                        int v55 = (llvm::Type **)(v53 + 40);
                        goto LABEL_91;
                      case 4:
                        int v55 = (llvm::Type **)(v53 + 48);
                        goto LABEL_91;
                      case 5:
                      case 7:
                      case 8:
                      case 9:
                      case 0xA:
                      case 0xB:
                      case 0xC:
                        uint64_t v54 = *(uint64_t **)(v53 + 32);
                        goto LABEL_86;
                      case 6:
                        uint64_t v54 = (uint64_t *)(v53 + 40);
LABEL_86:
                        uint64_t v53 = *v54;
                        continue;
                      case 0xE:
                        int v55 = *(llvm::Type ***)(v53 - 8);
                        goto LABEL_91;
                      default:
                        int v55 = *(llvm::Type ***)(v53 + 32);
LABEL_91:
                        unint64_t Constant = llvm::ScalarEvolution::getConstant(*(llvm::ScalarEvolution **)(v1 + 16), *v55, 0, 0);
                        *((void *)v281 + v51) = Constant;
                        GEPExpr = (const llvm::APInt *)llvm::ScalarEvolution::getGEPExpr(*(void *)(v1 + 16), v21, (uint64_t)&v281);
                        uint64_t v57 = *(void *)(v21 - 32 * (*(_DWORD *)(v21 + 20) & 0x7FFFFFF) + 32 * v50);
                        unsigned int v58 = *(llvm::DataLayout **)v1;
                        uint64_t v59 = (llvm::Type *)(v248 & 0xFFFFFFFFFFFFFFF8);
                        if ((v248 & 4) == 0 || !v59)
                        {
                          AggregateElement = *(llvm::Constant **)v247;
                          if (*(void *)v247) {
                            BOOL v61 = *(unsigned char *)(*(void *)v247 + 16) == 16;
                          }
                          else {
                            BOOL v61 = 0;
                          }
                          if (!v61) {
                            AggregateElement = (llvm::Constant *)llvm::Constant::getAggregateElement(AggregateElement, 0);
                          }
                          int v64 = (unsigned int *)*((void *)AggregateElement + 3);
                          uint64_t v62 = (unsigned int *)((char *)AggregateElement + 24);
                          uint64_t v63 = v64;
                          if (v62[2] < 0x41) {
                            uint64_t v63 = v62;
                          }
                          uint64_t v59 = *(llvm::Type **)(*((void *)v59 + 2) + 8 * *v63);
                        }
                        uint64_t v65 = sub_1CB83544C((uint64_t)v58, (uint64_t)v59);
                        BOOL v67 = v66 == 1;
                        char Alignment = llvm::DataLayout::getAlignment(v58, v59, 1);
                        if (v67)
                        {
                          char v93 = Alignment;
                          char Alignment = v93;
                        }
                        uint64_t v1 = (uint64_t)v232;
                        uint64_t v70 = *v232;
                        uint64_t v71 = **(void **)(v21 - 32 * (*(_DWORD *)(v21 + 20) & 0x7FFFFFF));
                        unsigned int v72 = *(_DWORD *)(v71 + 8);
                        if ((v72 & 0xFE) == 0x12) {
                          unsigned int v72 = *(_DWORD *)(**(void **)(v71 + 16) + 8);
                        }
                        uint64_t v73 = *(void *)(v70 + 232);
                        if (v72 < 0x100) {
                          goto LABEL_114;
                        }
                        unsigned int v74 = v72 >> 8;
                        unint64_t v75 = *(unsigned int *)(v70 + 240);
                        uint64_t v76 = *(void *)(v70 + 232);
                        if (v75)
                        {
                          uint64_t v76 = v73;
                          unint64_t v77 = v75;
                          do
                          {
                            unint64_t v78 = v77 >> 1;
                            uint64_t v79 = v76 + 16 * (v77 >> 1);
                            unsigned int v80 = *(_DWORD *)(v79 + 8);
                            uint64_t v81 = v79 + 16;
                            v77 += ~(v77 >> 1);
                            if (v80 < v74) {
                              uint64_t v76 = v81;
                            }
                            else {
                              unint64_t v77 = v78;
                            }
                          }
                          while (v77);
                        }
                        if (v76 == v73 + 16 * v75 || *(_DWORD *)(v76 + 8) != v74) {
LABEL_114:
                        }
                          uint64_t v76 = v73;
                        unint64_t v82 = ((1 << Alignment) + ((unint64_t)(v65 + 7) >> 3) - 1) & -(1 << Alignment);
                        if (*(_DWORD *)(*(void *)v57 + 8) >> 8 <= *(_DWORD *)(v76 + 4)) {
                          sub_1CCEE1A44(v232, v57, GEPExpr, v82, v21);
                        }
                        __dst = 0;
                        p_dst = &__dst;
                        if (sub_1CBC5BEAC(&p_dst, v57))
                        {
                          uint64_t v83 = **(void **)(v21 - 32 * (*(_DWORD *)(v21 + 20) & 0x7FFFFFF));
                          unsigned int v84 = *(_DWORD *)(v83 + 8);
                          LODWORD(v48) = v231;
                          if ((v84 & 0xFE) == 0x12) {
                            unsigned int v84 = *(_DWORD *)(**(void **)(v83 + 16) + 8);
                          }
                          if (v84 < 0x100) {
                            goto LABEL_129;
                          }
                          unsigned int v85 = v84 >> 8;
                          uint64_t v86 = *(unsigned int *)(*v232 + 240);
                          uint64_t v87 = *(void *)(*v232 + 232);
                          if (v86)
                          {
                            uint64_t v87 = *(void *)(*v232 + 232);
                            unint64_t v88 = *(unsigned int *)(*v232 + 240);
                            do
                            {
                              unint64_t v89 = v88 >> 1;
                              uint64_t v90 = v87 + 16 * (v88 >> 1);
                              unsigned int v91 = *(_DWORD *)(v90 + 8);
                              uint64_t v92 = v90 + 16;
                              v88 += ~(v88 >> 1);
                              if (v91 < v85) {
                                uint64_t v87 = v92;
                              }
                              else {
                                unint64_t v88 = v89;
                              }
                            }
                            while (v88);
                          }
                          if (v87 == *(void *)(*v232 + 232) + 16 * v86 || *(_DWORD *)(v87 + 8) != v85) {
LABEL_129:
                          }
                            uint64_t v87 = *(void *)(*v232 + 232);
                          if (*(_DWORD *)(*(void *)__dst + 8) >> 8 <= *(_DWORD *)(v87 + 4)) {
                            sub_1CCEE1A44(v232, (uint64_t)__dst, GEPExpr, v82, v21);
                          }
                        }
                        else
                        {
                          LODWORD(v48) = v231;
                        }
                        *((void *)v281 + v51) = v52;
                        break;
                    }
                    break;
                  }
                }
                ++v50;
                sub_1CB8460E4((uint64_t)&v247);
              }
              while (v48 != v50);
            }
            int v13 = v228;
            if (v281 != v228) {
              free(v281);
            }
            goto LABEL_79;
          }
          unsigned int v29 = 0;
          while (2)
          {
            uint64_t v30 = *(void *)(v1 + 16);
            unint64_t v31 = *v28;
            uint64_t v32 = *(void *)(v30 + 104);
            unsigned int v33 = *(_DWORD *)(v30 + 120);
            if (v33)
            {
              unsigned int v34 = ((v31 >> 4) ^ (v31 >> 9)) & (v33 - 1);
              uint64_t v35 = v32 + 48 * v34;
              uint64_t v36 = *(void *)(v35 + 24);
              if (v36 != v31)
              {
                int v37 = 1;
                while (v36 != -4096)
                {
                  unsigned int v38 = v34 + v37++;
                  unsigned int v34 = v38 & (v33 - 1);
                  uint64_t v35 = v32 + 48 * v34;
                  uint64_t v36 = *(void *)(v35 + 24);
                  if (v36 == v31) {
                    goto LABEL_54;
                  }
                }
                goto LABEL_53;
              }
            }
            else
            {
LABEL_53:
              uint64_t v35 = v32 + 48 * v33;
            }
LABEL_54:
            if (v35 == v32 + 48 * v33 || (uint64_t SCEVIter = *(void *)(v35 + 40)) == 0)
            {
              uint64_t SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v30, v31);
              unsigned int v29 = v282;
            }
            if (v29 >= HIDWORD(v282)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v281 + v29) = SCEVIter;
            unsigned int v29 = v282 + 1;
            LODWORD(v282) = v282 + 1;
            v28 += 4;
            if (v28 == (unint64_t *)v21)
            {
              int v40 = *(unsigned __int8 *)(v21 + 16);
              int v27 = *(_DWORD *)(v21 + 20);
              goto LABEL_68;
            }
            continue;
          }
        }
      }
      else if (v22 == 45)
      {
        if (*(unsigned char *)(*(void *)v21 + 8) == 13)
        {
          int v25 = *(_DWORD *)(v21 + 20);
          unint64_t v26 = (v25 & 0x40000000) != 0
              ? *(unint64_t **)(v21 - 8)
              : (unint64_t *)(v21 - 32 * (v25 & 0x7FFFFFF));
          unsigned int v41 = (const llvm::APInt *)*v26;
          unint64_t v42 = (const llvm::APInt *)v26[4];
          sub_1CCEE1660(v1, *v26, v42, (llvm::ConstantInt ***)v21);
          if (v41 != v42) {
            sub_1CCEE1660(v1, (unint64_t)v42, v41, (llvm::ConstantInt ***)v21);
          }
        }
      }
      else if (v22 == 41 && *(unsigned char *)(*(void *)v21 + 8) == 13)
      {
        int v23 = *(_DWORD *)(v21 + 20);
        BOOL v24 = (v23 & 0x40000000) != 0 ? *(llvm::Value ***)(v21 - 8) : (llvm::Value **)(v21 - 32 * (v23 & 0x7FFFFFF));
        uint64_t v43 = *v24;
        uint64_t v44 = v24[4];
        sub_1CCEE0AF0((void *)v1, *v24, (uint64_t)v44, (llvm::ConstantInt ***)v21);
        if (v43 != v44) {
          sub_1CCEE0AF0((void *)v1, v44, (uint64_t)v43, (llvm::ConstantInt ***)v21);
        }
      }
LABEL_79:
      uint64_t v20 = *(void *)(v20 + 8);
    }
    sub_1CD77B290((char *)&p_src);
  }
LABEL_137:
  if (v240)
  {
    uint64_t v241 = v240;
    operator delete(v240);
  }
  if (*(void **)v235 != __src) {
    free(*(void **)v235);
  }
  if (__p)
  {
    unsigned int v258 = (char *)__p;
    operator delete(__p);
  }
  if (v252 != p_src) {
    free(v252);
  }
  if (v279)
  {
    uint64_t v280 = v279;
    operator delete(v279);
  }
  if (v275 != v274) {
    free(v275);
  }
  if (v271)
  {
    uint64_t v272 = v271;
    operator delete(v271);
  }
  if ((void *)v261 != v260) {
    free((void *)v261);
  }
  uint64_t v94 = *(void *)(v1 + 48);
  if (v94)
  {
    while (1)
    {
      BOOL v95 = *(uint64_t **)(v1 + 32);
      uint64_t v96 = v95[7];
      if (v96)
      {
        uint64_t v97 = v95[6];
        if (*(void *)(v97 + 40)) {
          break;
        }
      }
      uint64_t v1 = (uint64_t)v232;
      uint64_t v198 = *v95;
      *(void *)(v198 + 8) = v95[1];
      *(void *)v95[1] = v198;
      v232[6] = v94 - 1;
      operator delete(v95);
      uint64_t v94 = v232[6];
      if (!v94) {
        goto LABEL_385;
      }
    }
    uint64_t v98 = 0;
    uint64_t v99 = **(void ***)v97;
    int v260 = &v262;
    uint64_t v261 = 0x200000000;
    uint64_t v267 = v99;
    int v268 = &v274;
    uint64_t v269 = &v275;
    uint64_t v270 = 0;
    LODWORD(v271) = 0;
    WORD2(v271) = 512;
    BYTE6(v271) = 7;
    uint64_t v265 = 0;
    uint64_t v266 = 0;
    uint64_t v272 = 0;
    uint64_t v273 = 0;
    uint64_t v274 = &unk_1F2616E88;
    unsigned int v275 = &unk_1F2617008;
    uint64_t v265 = *(void *)(v97 + 40);
    uint64_t v266 = v97 + 24;
    uint64_t v100 = *(void **)(v97 + 48);
    __src = v100;
    if (v100)
    {
      llvm::MetadataTracking::track((uint64_t)&__src, (unsigned __int8 *)v100, 2);
      uint64_t v98 = __src;
    }
    sub_1CB8461A4((uint64_t)&v260, 0, (uint64_t)v98);
    if (__src)
    {
      int v155 = *(unsigned __int8 *)__src;
      if ((v155 - 4) > 0x1E)
      {
        if ((v155 - 3) >= 0xFFFFFFFE) {
          uint64_t v158 = __src;
        }
        else {
          uint64_t v158 = 0;
        }
        if ((v155 - 3) < 0xFFFFFFFE)
        {
          if (v155 == 3) {
            *((void *)__src + 1) = 0;
          }
          goto LABEL_159;
        }
        unint64_t v157 = (unint64_t)v158 + 8;
      }
      else
      {
        if ((*((unsigned char *)__src + 1) & 0x7F) != 2 && !*((_DWORD *)__src + 3)) {
          goto LABEL_159;
        }
        uint64_t v156 = *((void *)__src + 2);
        if ((v156 & 4) == 0) {
          goto LABEL_159;
        }
        unint64_t v157 = v156 & 0xFFFFFFFFFFFFFFF8;
        if (!v157) {
          goto LABEL_159;
        }
      }
      p_src = (llvm::LLVMContext *)&__src;
      sub_1CC5FA668(v157 + 16, &p_src);
    }
LABEL_159:
    uint64_t v101 = (llvm::DataLayout *)*v232;
    uint64_t v102 = v95[4];
    unint64_t v103 = *(unsigned int *)(v102 + 32);
    LODWORD(v282) = v103;
    if (v103 > 0x40) {
      operator new[]();
    }
    uint64_t v281 = *(llvm::LLVMContext **)(v102 + 24);
    uint64_t v104 = *(void *)(v96 + 16);
    unsigned int v105 = *(_DWORD *)(v104 + 32);
    LODWORD(v248) = v105;
    if (v105 > 0x40) {
      operator new[]();
    }
    unsigned int v247 = *(const char **)(v104 + 24);
    if (v103 >= v105)
    {
      if (v103 > v105)
      {
        llvm::APInt::sext((uint64_t)&v247, v103, (uint64_t)&p_src);
        if (v248 >= 0x41 && v247) {
          MEMORY[0x1D25D9CB0](v247, 0x1000C8000313F17);
        }
        unsigned int v247 = (const char *)p_src;
        LODWORD(v248) = v252;
        unint64_t v103 = v282;
      }
    }
    else
    {
      llvm::APInt::sext((uint64_t)&v281, v105, (uint64_t)&p_src);
      if (v282 >= 0x41 && v281) {
        MEMORY[0x1D25D9CB0](v281, 0x1000C8000313F17);
      }
      uint64_t v281 = p_src;
      unint64_t v103 = v252;
      LODWORD(v282) = v252;
    }
    if (v103 >= 0x41) {
      operator new[]();
    }
    unint64_t v106 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v103;
    if (!v103) {
      unint64_t v106 = 0;
    }
    uint64_t v107 = v106 & (v281 - (llvm::LLVMContext *)v247);
    unsigned int v246 = v103;
    __dst = (void *)(v106 & (v281 - (llvm::LLVMContext *)v247));
    if (*(_DWORD *)v96 != 3)
    {
      int v123 = 0;
      goto LABEL_215;
    }
    uint64_t v108 = *(llvm::Type **)(*(void *)(v96 + 32) + 72);
    uint64_t v109 = sub_1CB83544C((uint64_t)v101, (uint64_t)v108);
    BOOL v111 = v110 == 1;
    char v114 = llvm::DataLayout::getAlignment(v101, v108, 1);
    if (v111) {
    LODWORD(v252) = v103;
    }
    unint64_t v115 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v103;
    if (!v103) {
      unint64_t v115 = 0;
    }
    p_src = (llvm::LLVMContext *)(v115 & ((1 << v114) + ((unint64_t)(v109 + 7) >> 3) - 1) & -(1 << v114));
    v235[0] = 1;
    __src = 0;
    unsigned int v244 = 1;
    p_dst = 0;
    llvm::APInt::sdivrem((llvm::APInt *)&__dst, (const llvm::APInt *)&p_src, (const llvm::APInt *)&__src, (llvm::APInt *)&p_dst, v113);
    unsigned int v116 = v244;
    unsigned int v117 = p_dst;
    if (v244 < 0x41)
    {
LABEL_194:
      if (v117)
      {
        int v123 = 1;
      }
      else if (v246 > 0x40 || v235[0] > 0x40)
      {
        llvm::APInt::reallocate((uint64_t)&__dst, v235[0]);
        if (v246 <= 0x40) {
          __dst = __src;
        }
        else {
          memcpy(__dst, __src, (((unint64_t)v246 + 63) >> 3) & 0x3FFFFFF8);
        }
        int v123 = 0;
        unsigned int v116 = v244;
      }
      else
      {
        int v123 = 0;
        __dst = __src;
        unsigned int v246 = v235[0];
      }
      if (v116 < 0x41) {
        goto LABEL_208;
      }
      unsigned int v117 = p_dst;
      if (!p_dst) {
        goto LABEL_208;
      }
    }
    else
    {
      int v118 = 0;
      int64_t v119 = ((unint64_t)v244 + 63) >> 6;
      do
      {
        BOOL v120 = v119-- < 1;
        if (v120) {
          break;
        }
        unint64_t v121 = p_dst[v119];
        v118 += __clz(v121);
      }
      while (!v121);
      unsigned int v122 = v244 | 0xFFFFFFC0;
      if ((v244 & 0x3F) == 0) {
        unsigned int v122 = 0;
      }
      if (v244 - v118 - v122 <= 0x40)
      {
        unsigned int v117 = (void *)*p_dst;
        goto LABEL_194;
      }
      int v123 = 1;
      if (!p_dst)
      {
LABEL_208:
        if (v235[0] >= 0x41 && __src) {
          MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
        }
        if (v252 >= 0x41 && p_src) {
          MEMORY[0x1D25D9CB0](p_src, 0x1000C8000313F17);
        }
        unint64_t v103 = v246;
        uint64_t v107 = (uint64_t)__dst;
LABEL_215:
        if (v103 < 0x41)
        {
          uint64_t v124 = &__dst;
          goto LABEL_223;
        }
        int v125 = 0;
        int64_t v126 = ((unint64_t)v103 + 63) >> 6;
        do
        {
          BOOL v120 = v126-- < 1;
          if (v120) {
            break;
          }
          unint64_t v127 = *(void *)(v107 + 8 * v126);
          v125 += __clz(v127);
        }
        while (!v127);
        unsigned int v128 = v103 | 0xFFFFFFC0;
        if ((v103 & 0x3F) == 0) {
          unsigned int v128 = 0;
        }
        unsigned int v129 = v103 - v125 - v128;
        uint64_t v124 = (void **)v107;
        if (v129 > 0x40) {
          goto LABEL_229;
        }
LABEL_223:
        if (*v124 == (void *)1)
        {
          uint64_t v130 = v95[5];
LABEL_289:
          if (v246 >= 0x41 && __dst) {
            MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
          }
          if (v248 >= 0x41 && v247) {
            MEMORY[0x1D25D9CB0](v247, 0x1000C8000313F17);
          }
          if (v282 >= 0x41 && v281) {
            MEMORY[0x1D25D9CB0](v281, 0x1000C8000313F17);
          }
          if ((*((_DWORD *)v95 + 4) - 1) > 1)
          {
            uint64_t v174 = *(void *)v95[6];
            unsigned int v175 = *(_DWORD *)(v174 + 8);
            if ((v175 & 0xFE) == 0x12) {
              unsigned int v175 = *(_DWORD *)(**(void **)(v174 + 16) + 8);
            }
            if (v175 < 0x100) {
              goto LABEL_315;
            }
            unsigned int v176 = v175 >> 8;
            uint64_t v177 = *(unsigned int *)(*v232 + 240);
            uint64_t v178 = *(void *)(*v232 + 232);
            if (v177)
            {
              uint64_t v178 = *(void *)(*v232 + 232);
              unint64_t v179 = *(unsigned int *)(*v232 + 240);
              do
              {
                unint64_t v180 = v179 >> 1;
                uint64_t v181 = v178 + 16 * (v179 >> 1);
                unsigned int v182 = *(_DWORD *)(v181 + 8);
                uint64_t v183 = v181 + 16;
                v179 += ~(v179 >> 1);
                if (v182 < v176) {
                  uint64_t v178 = v183;
                }
                else {
                  unint64_t v179 = v180;
                }
              }
              while (v179);
            }
            if (v178 == *(void *)(*v232 + 232) + 16 * v177 || *(_DWORD *)(v178 + 8) != v176) {
LABEL_315:
            }
              uint64_t v178 = *(void *)(*v232 + 232);
            int v184 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v174, (llvm::LLVMContext *)*(unsigned int *)(v178 + 4));
            uint64_t v185 = (uint64_t)v184;
            if ((*(_DWORD *)(v174 + 8) & 0xFE) == 0x12)
            {
              uint64_t v210 = (llvm::Type *)*(unsigned int *)(v174 + 32);
              if (*(_DWORD *)(v174 + 8) == 19) {
                llvm::ScalableVectorType::get(v184, v210);
              }
              else {
                llvm::FixedVectorType::get((llvm::FixedVectorType *)v184, v210);
              }
              uint64_t v185 = v211;
            }
            char v186 = *(unsigned char *)(v95[6] + 17);
            if (v123)
            {
              uint64_t v187 = **(void **)(v96 + 32);
              unsigned int v188 = *(_DWORD *)(v187 + 8);
              if ((v188 & 0xFE) == 0x12) {
                unsigned int v188 = *(_DWORD *)(**(void **)(v187 + 16) + 8);
              }
              unint64_t v189 = llvm::PointerType::get((llvm::PointerType *)(**(void **)v187 + 1912), (llvm::Type *)(v188 >> 8));
              uint64_t v190 = *(unsigned __int8 **)(v96 + 32);
              v239[0] = 257;
              if (*(void *)v190 != v189)
              {
                if (v190[16] <= 0x14u)
                {
                  uint64_t v190 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v268
                                             + 28))(v268, 49, v190, v189);
                  if (v190) {
                    BOOL v199 = v190[16] >= 0x1Cu;
                  }
                  else {
                    BOOL v199 = 0;
                  }
                  if (v199)
                  {
                    (*((void (**)(void **, unsigned __int8 *, void **, uint64_t, uint64_t))*v269 + 2))(v269, v190, &__src, v265, v266);
                    if (v261)
                    {
                      uint64_t v212 = (llvm::MDNode **)v260;
                      unsigned int v213 = (llvm::MDNode **)((char *)v260 + 16 * v261);
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v190, *(_DWORD *)v212, v212[1]);
                        v212 += 2;
                      }
                      while (v212 != v213);
                    }
                  }
                }
                else
                {
                  v256[0] = 257;
                  uint64_t v190 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v190, v189, (const char **)&p_src, 0);
                  (*((void (**)(void **, unsigned __int8 *, void **, uint64_t, uint64_t))*v269 + 2))(v269, v190, &__src, v265, v266);
                  if (v261)
                  {
                    uint64_t v208 = (llvm::MDNode **)v260;
                    unsigned int v209 = (llvm::MDNode **)((char *)v260 + 16 * v261);
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v190, *(_DWORD *)v208, v208[1]);
                      v208 += 2;
                    }
                    while (v208 != v209);
                  }
                }
              }
              uint64_t v200 = *v267 + 1912;
              v256[0] = 257;
              if ((v186 & 2) != 0) {
                uint64_t v201 = sub_1CC278130((uint64_t *)&v260, v200, (uint64_t *)v190, (const char *)v130, (uint64_t)&p_src);
              }
              else {
                uint64_t v201 = sub_1CB930F7C((uint64_t *)&v260, v200, (uint64_t *)v190, (const char *)v130, (uint64_t)&p_src);
              }
              int v196 = (unsigned __int8 *)v201;
              uint64_t v202 = *(void *)v95[6];
              v239[0] = 257;
              if (*(void *)v201 != v202)
              {
                if (*((unsigned __int8 *)v201 + 16) <= 0x14u)
                {
                  int v196 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v268
                                             + 28))(v268, 49, v201, v202);
                  if (v196) {
                    BOOL v205 = v196[16] >= 0x1Cu;
                  }
                  else {
                    BOOL v205 = 0;
                  }
                  if (v205)
                  {
                    (*((void (**)(void **, unsigned __int8 *, void **, uint64_t, uint64_t))*v269 + 2))(v269, v196, &__src, v265, v266);
                    if (v261)
                    {
                      uint64_t v206 = (llvm::MDNode **)v260;
                      int v207 = (llvm::MDNode **)((char *)v260 + 16 * v261);
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v196, *(_DWORD *)v206, v206[1]);
                        v206 += 2;
                      }
                      while (v206 != v207);
                    }
                  }
                }
                else
                {
                  v256[0] = 257;
                  int v196 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v201, v202, (const char **)&p_src, 0);
                  (*((void (**)(void **, unsigned __int8 *, void **, uint64_t, uint64_t))*v269 + 2))(v269, v196, &__src, v265, v266);
                  if (v261)
                  {
                    uint64_t v203 = (llvm::MDNode **)v260;
                    uint64_t v204 = (llvm::MDNode **)((char *)v260 + 16 * v261);
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v196, *(_DWORD *)v203, v203[1]);
                      v203 += 2;
                    }
                    while (v203 != v204);
                  }
                }
              }
              goto LABEL_334;
            }
            v256[0] = 257;
            uint64_t v191 = sub_1CB845504((uint64_t)&v260, (unsigned __int8 *)v130, v185, (uint64_t)&p_src);
            int v192 = *(uint64_t **)(v96 + 32);
            uint64_t v193 = v192[9];
            v256[0] = 257;
            if ((v186 & 2) != 0) {
              unsigned int v194 = sub_1CC278130((uint64_t *)&v260, v193, v192, (const char *)v191, (uint64_t)&p_src);
            }
            else {
              unsigned int v194 = sub_1CB930F7C((uint64_t *)&v260, v193, v192, (const char *)v191, (uint64_t)&p_src);
            }
          }
          else
          {
            __src = 0;
            uint64_t v252 = (llvm::LLVMContext *)&__src;
            int v172 = *(unsigned __int8 *)(v130 + 16);
            if (v172 != 5)
            {
              if (v172 != 43) {
                goto LABEL_332;
              }
              if (!sub_1CBF535C4((uint64_t)&p_src, *(llvm::Constant **)(v130 - 64))) {
                goto LABEL_332;
              }
              uint64_t v173 = *(void *)(v130 - 32);
              if (!v173) {
                goto LABEL_332;
              }
LABEL_329:
              *(void *)uint64_t v252 = v173;
              uint64_t v195 = *(void *)(v96 + 32);
              v256[0] = 257;
              int v196 = (unsigned __int8 *)sub_1CB84494C((uint64_t)&v260, v195, (uint64_t)__src, (uint64_t)&p_src, 0, 0);
              uint64_t v255 = 0;
              llvm::RecursivelyDeleteTriviallyDeadInstructions(v130, 0, 0, (uint64_t)&p_src);
              if (v255 == (const char **)&p_src)
              {
                (*((void (**)(llvm::LLVMContext **))p_src + 4))(&p_src);
              }
              else if (v255)
              {
                (*((void (**)(void))*v255 + 5))();
              }
LABEL_334:
              llvm::Value::takeName((int32x2_t ****)v196, (llvm::Value *)v95[6]);
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v95[6], (llvm::Value *)v196, (llvm::Value *)1);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
            }
            if (*(_WORD *)(v130 + 18) == 15)
            {
              if (sub_1CC03F414((uint64_t)&p_src, *(llvm::Constant **)(v130 - 32 * (*(_DWORD *)(v130 + 20) & 0x7FFFFFF))))
              {
                uint64_t v173 = *(void *)(v130 - 32 * (*(_DWORD *)(v130 + 20) & 0x7FFFFFF) + 32);
                if (v173) {
                  goto LABEL_329;
                }
              }
            }
LABEL_332:
            uint64_t v197 = *(void **)(v96 + 32);
            v256[0] = 257;
            unsigned int v194 = sub_1CB844A3C((uint64_t)&v260, v197, v130, (uint64_t)&p_src, 0, 0);
          }
          int v196 = (unsigned __int8 *)v194;
          goto LABEL_334;
        }
        if (v103)
        {
          if (v103 <= 0x40)
          {
            if (0xFFFFFFFFFFFFFFFFLL >> -(char)v103 == v107) {
              goto LABEL_228;
            }
LABEL_230:
            uint64_t v133 = llvm::IntegerType::get(***(llvm::IntegerType ****)(v96 + 32), (llvm::LLVMContext *)v103);
            uint64_t v134 = (unsigned __int8 *)v95[5];
            v256[0] = 257;
            int v136 = sub_1CB845504((uint64_t)&v260, v134, v133, (uint64_t)&p_src);
            if (v246 > 0x40)
            {
              int v139 = 0;
              int64_t v140 = ((unint64_t)v246 + 63) >> 6;
              v141 = (int8x8_t *)__dst;
              int64_t v142 = v140;
              do
              {
                int8x8_t v143 = *v141++;
                uint8x8_t v144 = (uint8x8_t)vcnt_s8(v143);
                v144.i16[0] = vaddlv_u8(v144);
                v139 += v144.i32[0];
                --v142;
              }
              while (v142);
              if (v139 != 1) {
                goto LABEL_247;
              }
              int v145 = 0;
              do
              {
                BOOL v120 = v140-- < 1;
                if (v120) {
                  break;
                }
                unint64_t v146 = *((void *)__dst + v140);
                v145 += __clz(v146);
              }
              while (!v146);
              unsigned int v147 = v246 | 0xFFFFFFC0;
              if ((v246 & 0x3F) == 0) {
                unsigned int v147 = 0;
              }
              int v138 = v145 + v147;
LABEL_242:
              uint64_t v148 = *(llvm::ConstantInt **)v133;
              unsigned int v149 = *(_DWORD *)(v133 + 8);
              LODWORD(v252) = v149 >> 8;
              if (v149 >> 8 > 0x40) {
                operator new[]();
              }
              if (v149 <= 0xFF) {
                LODWORD(v150) = 0;
              }
              else {
                unint64_t v150 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v149) + 63);
              }
              p_src = (llvm::LLVMContext *)(v150 & (v246 + ~v138));
              int v151 = llvm::ConstantInt::get(v148, (llvm::LLVMContext *)&p_src, v135);
              if (v252 >= 0x41 && p_src) {
                MEMORY[0x1D25D9CB0](p_src, 0x1000C8000313F17);
              }
              v256[0] = 257;
              unint64_t v152 = sub_1CC242524((uint64_t)&v260, (uint64_t)v136, (uint64_t)v151, (uint64_t)&p_src, 0, 0);
            }
            else
            {
              uint8x8_t v137 = (uint8x8_t)vcnt_s8((int8x8_t)__dst);
              v137.i16[0] = vaddlv_u8(v137);
              if (v137.u32[0] == 1)
              {
                int v138 = v246 + __clz((unint64_t)__dst) - 64;
                goto LABEL_242;
              }
LABEL_247:
              if (!sub_1CCA4D700((llvm::APInt *)&__dst))
              {
                Splat = llvm::ConstantInt::get(*(llvm::ConstantInt **)v133, (llvm::LLVMContext *)&__dst, v153);
                if ((*(_DWORD *)(v133 + 8) & 0xFE) == 0x12) {
                  Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v133 + 32) | ((unint64_t)(*(_DWORD *)(v133 + 8) == 19) << 32)), (uint64_t)Splat);
                }
                v256[0] = 257;
                unint64_t v152 = sub_1CC09A1EC((uint64_t)&v260, (uint64_t)v136, (uint64_t)Splat, (uint64_t)&p_src, 0, 0);
                goto LABEL_288;
              }
              unsigned int v244 = v246;
              if (v246 > 0x40) {
                operator new[]();
              }
              unint64_t v159 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v246;
              if (!v246) {
                unint64_t v159 = 0;
              }
              p_dst = (void *)(v159 & ~(unint64_t)__dst);
              llvm::APInt::operator++((uint64_t)&p_dst);
              uint64_t v161 = v244;
              unsigned int v244 = 0;
              if (v161 > 0x40)
              {
                int v163 = 0;
                int64_t v164 = (unint64_t)(v161 + 63) >> 6;
                do
                {
                  BOOL v120 = v164-- < 1;
                  if (v120) {
                    break;
                  }
                  unint64_t v165 = p_dst[v164];
                  v163 += __clz(v165);
                }
                while (!v165);
                int v166 = v161 | 0xFFFFFFC0;
                if ((v161 & 0x3F) == 0) {
                  int v166 = 0;
                }
                int v162 = v163 + v166;
              }
              else
              {
                int v162 = v161 + __clz((unint64_t)p_dst) - 64;
              }
              uint64_t v167 = (v161 + ~v162);
              uint64_t v168 = *(llvm::ConstantInt **)v133;
              unsigned int v169 = *(_DWORD *)(v133 + 8);
              LODWORD(v252) = v169 >> 8;
              uint64_t v230 = p_dst;
              if (v169 >> 8 > 0x40) {
                operator new[]();
              }
              if (v169 <= 0xFF) {
                unint64_t v170 = 0;
              }
              else {
                unint64_t v170 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v169) + 63);
              }
              p_src = (llvm::LLVMContext *)(v170 & v167);
              int64_t v171 = llvm::ConstantInt::get(v168, (llvm::LLVMContext *)&p_src, v160);
              if (v252 >= 0x41 && p_src) {
                MEMORY[0x1D25D9CB0](p_src, 0x1000C8000313F17);
              }
              if (v161 >= 0x41 && v230) {
                MEMORY[0x1D25D9CB0](v230, 0x1000C8000313F17);
              }
              if (v244 >= 0x41 && p_dst) {
                MEMORY[0x1D25D9CB0](p_dst, 0x1000C8000313F17);
              }
              v256[0] = 257;
              int v131 = sub_1CC242524((uint64_t)&v260, (uint64_t)v136, (uint64_t)v171, (uint64_t)&p_src, 0, 0);
              v239[0] = 257;
              p_p_src = &__src;
LABEL_287:
              unint64_t v152 = sub_1CD5A6358((uint64_t)&v260, v131, (uint64_t)p_p_src, 0, 0);
            }
LABEL_288:
            uint64_t v130 = (uint64_t)v152;
            goto LABEL_289;
          }
LABEL_229:
          if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__dst) != v103) {
            goto LABEL_230;
          }
        }
LABEL_228:
        int v131 = (llvm::Instruction *)v95[5];
        v256[0] = 257;
        p_p_src = (void **)&p_src;
        goto LABEL_287;
      }
    }
    MEMORY[0x1D25D9CB0](v117, 0x1000C8000313F17);
    goto LABEL_208;
  }
LABEL_385:
  uint64_t v214 = *(uint64_t **)(v1 + 56);
  uint64_t v215 = *(uint64_t **)(v1 + 64);
  if (v214 == v215)
  {
    uint64_t v224 = *(uint64_t **)(v1 + 56);
  }
  else
  {
    do
    {
      uint64_t v216 = *v214;
      uint64_t v217 = *(_DWORD *)(*v214 + 20) & 0x7FFFFFF;
      if (v217)
      {
        uint64_t v218 = 0;
        uint64_t v219 = 32 * v217;
        do
        {
          int v220 = *(_DWORD *)(v216 + 20);
          if ((v220 & 0x40000000) != 0) {
            uint64_t v221 = *(void *)(v216 - 8);
          }
          else {
            uint64_t v221 = v216 - 32 * (v220 & 0x7FFFFFF);
          }
          uint64_t v222 = *(void *)(v221 + v218);
          if (v222)
          {
            **(void **)(v221 + v218 + 16) = *(void *)(v221 + v218 + 8);
            uint64_t v223 = *(void *)(v221 + v218 + 8);
            if (v223) {
              *(void *)(v223 + 16) = *(void *)(v221 + v218 + 16);
            }
          }
          *(void *)(v221 + v218) = 0;
          unint64_t v250 = 0;
          llvm::RecursivelyDeleteTriviallyDeadInstructions(v222, 0, 0, (uint64_t)v249);
          if (v250 == v249)
          {
            (*(void (**)(void *))(v249[0] + 32))(v249);
          }
          else if (v250)
          {
            (*(void (**)(void))(*v250 + 40))();
          }
          v218 += 32;
        }
        while (v219 != v218);
      }
      llvm::Value::deleteValue((void (**)(void))v216, v12);
      ++v214;
    }
    while (v214 != v215);
    uint64_t v224 = *(uint64_t **)(v1 + 56);
    uint64_t v214 = *(uint64_t **)(v1 + 64);
  }
  BOOL result = v224 != v214;
  *(void *)(v1 + 64) = v224;
  return result;
}

void *sub_1CCEE0748(void *a1)
{
  __n128 v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  if (a1[6])
  {
    uint64_t v4 = a1[4];
    int v3 = (uint64_t *)a1[5];
    uint64_t v5 = *v3;
    *(void *)(v5 + 8) = *(void *)(v4 + 8);
    **(void **)(v4 + 8) = v5;
    a1[6] = 0;
    if (v3 != a1 + 4)
    {
      do
      {
        unsigned int v6 = (uint64_t *)v3[1];
        operator delete(v3);
        int v3 = v6;
      }
      while (v6 != a1 + 4);
    }
  }
  return a1;
}

void sub_1CCEE07C8()
{
}

void sub_1CCEE0808(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CCEE0840(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = a2 + 272;
  return 0;
}

void sub_1CCEE0850(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)llvm::ScalarEvolutionWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v3);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
}

BOOL sub_1CCEE08E0(llvm::FunctionPass *a1, llvm::LLVMContextImpl ****a2)
{
  if (llvm::FunctionPass::skipFunction(a1, a2)) {
    return 0;
  }
  uint64_t v5 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (v6 == v7)
  {
LABEL_6:
    uint64_t v8 = 0;
  }
  else
  {
    while (*(char **)v6 != llvm::TargetTransformInfoWrapperPass::ID)
    {
      v6 += 16;
      if (v6 == v7) {
        goto LABEL_6;
      }
    }
    uint64_t v8 = *(void *)(v6 + 8);
  }
  BOOL v9 = (llvm::TargetTransformInfoWrapperPass *)(*(uint64_t (**)(uint64_t, char *))(*(void *)v8 + 96))(v8, llvm::TargetTransformInfoWrapperPass::ID);
  TTI = llvm::TargetTransformInfoWrapperPass::getTTI(v9, (const Function *)a2);
  unsigned int v11 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  if (v12 == v13)
  {
LABEL_11:
    uint64_t v14 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v12 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v12 += 16;
      if (v12 == v13) {
        goto LABEL_11;
      }
    }
    uint64_t v14 = *(void *)(v12 + 8);
  }
  uint64_t v15 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v14 + 96))(v14, &llvm::DominatorTreeWrapperPass::ID)
      + 32;
  uint64_t v16 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v17 = *v16;
  uint64_t v18 = v16[1];
  if (v17 == v18)
  {
LABEL_16:
    uint64_t v19 = 0;
  }
  else
  {
    while (*(char **)v17 != llvm::ScalarEvolutionWrapperPass::ID)
    {
      v17 += 16;
      if (v17 == v18) {
        goto LABEL_16;
      }
    }
    uint64_t v19 = *(void *)(v17 + 8);
  }
  uint64_t v20 = *(void *)((*(uint64_t (**)(uint64_t, char *))(*(void *)v19 + 96))(v19, llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  v26[0] = *((void *)a1 + 4);
  v26[1] = v15;
  v26[2] = v20;
  v26[3] = TTI;
  uint64_t v27 = (uint64_t)&v27;
  uint64_t v28 = &v27;
  *(_OWORD *)__p = 0u;
  long long v30 = 0u;
  BOOL v4 = sub_1CCEDE928((uint64_t)v26);
  if (__p[1])
  {
    *(void **)&long long v30 = __p[1];
    operator delete(__p[1]);
  }
  if (__p[0])
  {
    uint64_t v22 = v27;
    uint64_t v21 = v28;
    uint64_t v23 = *v28;
    *(void *)(v23 + 8) = *(void *)(v27 + 8);
    **(void **)(v22 + 8) = v23;
    __p[0] = 0;
    if (v21 != &v27)
    {
      do
      {
        BOOL v24 = (uint64_t *)v21[1];
        operator delete(v21);
        uint64_t v21 = v24;
      }
      while (v24 != &v27);
    }
  }
  return v4;
}

_DWORD *sub_1CCEE0AF0(void *a1, llvm::Value *a2, uint64_t a3, llvm::ConstantInt ***a4)
{
  int v8 = *(unsigned __int8 *)(a3 + 16);
  switch(v8)
  {
    case 5:
      int v13 = *(unsigned __int16 *)(a3 + 18);
      if (v13 != 25)
      {
        if (v13 == 17)
        {
          uint64_t v14 = (uint64_t *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
          uint64_t v9 = *v14;
          if (*v14)
          {
            uint64_t v10 = v14[4];
            if (v10 && *(unsigned char *)(v10 + 16) == 16) {
              goto LABEL_20;
            }
          }
        }
        goto LABEL_31;
      }
      BOOL v24 = (uint64_t *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
      uint64_t v11 = *v24;
      if (!*v24) {
        goto LABEL_31;
      }
      uint64_t v12 = v24[4];
      if (!v12 || *(unsigned char *)(v12 + 16) != 16) {
        goto LABEL_31;
      }
      break;
    case 53:
      uint64_t v11 = *(void *)(a3 - 64);
      if (!v11 || (uint64_t v12 = *(void *)(a3 - 32)) == 0 || *(unsigned char *)(v12 + 16) != 16)
      {
LABEL_31:
        unint64_t v26 = **a4;
        unsigned int v27 = *((_DWORD *)*a4 + 2);
        unsigned int v66 = v27 >> 8;
        if (v27 >> 8 > 0x40) {
          operator new[]();
        }
        if (v27 <= 0xFF) {
          LOBYTE(v28) = 0;
        }
        else {
          unint64_t v28 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v27) + 63);
        }
        unint64_t v65 = v28 & 1;
        unsigned int v29 = llvm::ConstantInt::get(v26, (llvm::LLVMContext *)&v65, (const llvm::APInt *)a3);
        if (v66 >= 0x41 && v65) {
          MEMORY[0x1D25D9CB0](v65, 0x1000C8000313F17);
        }
        uint64_t v30 = a1[2];
        uint64_t v31 = *(void *)(v30 + 104);
        unsigned int v32 = *(_DWORD *)(v30 + 120);
        if (v32)
        {
          unsigned int v33 = v32 - 1;
          unsigned int v34 = (v32 - 1) & ((a2 >> 4) ^ (a2 >> 9));
          uint64_t v35 = v31 + 48 * v34;
          uint64_t v36 = *(llvm::Value **)(v35 + 24);
          if (v36 == a2) {
            goto LABEL_43;
          }
          int v37 = 1;
          while (v36 != (llvm::Value *)-4096)
          {
            unsigned int v38 = v34 + v37++;
            unsigned int v34 = v38 & v33;
            uint64_t v35 = v31 + 48 * (v38 & v33);
            uint64_t v36 = *(llvm::Value **)(v35 + 24);
            if (v36 == a2) {
              goto LABEL_43;
            }
          }
        }
        uint64_t v35 = v31 + 48 * v32;
LABEL_43:
        if (v35 == v31 + 48 * v32 || (uint64_t SCEVIter = *(void *)(v35 + 40)) == 0) {
          uint64_t SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v30, (unint64_t)a2);
        }
        int v40 = a1;
        uint64_t v41 = (uint64_t)v29;
        uint64_t v42 = a3;
LABEL_47:
        return sub_1CCEE10F0(v40, 1, SCEVIter, v41, v42, (uint64_t)a4);
      }
      break;
    case 45:
      uint64_t v9 = *(void *)(a3 - 64);
      if (!v9) {
        goto LABEL_31;
      }
      uint64_t v10 = *(void *)(a3 - 32);
      if (!v10 || *(unsigned char *)(v10 + 16) != 16) {
        goto LABEL_31;
      }
LABEL_20:
      uint64_t v16 = a1[2];
      uint64_t v17 = *(void *)(v16 + 104);
      unsigned int v18 = *(_DWORD *)(v16 + 120);
      if (v18)
      {
        unsigned int v19 = (v18 - 1) & ((a2 >> 4) ^ (a2 >> 9));
        uint64_t v20 = v17 + 48 * v19;
        uint64_t v21 = *(llvm::Value **)(v20 + 24);
        if (v21 == a2) {
          goto LABEL_74;
        }
        int v22 = 1;
        while (v21 != (llvm::Value *)-4096)
        {
          unsigned int v23 = v19 + v22++;
          unsigned int v19 = v23 & (v18 - 1);
          uint64_t v20 = v17 + 48 * v19;
          uint64_t v21 = *(llvm::Value **)(v20 + 24);
          if (v21 == a2) {
            goto LABEL_74;
          }
        }
      }
      uint64_t v20 = v17 + 48 * v18;
LABEL_74:
      if (v20 == v17 + 48 * v18 || (uint64_t SCEVIter = *(void *)(v20 + 40)) == 0) {
        uint64_t SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v16, (unint64_t)a2);
      }
      int v40 = a1;
      uint64_t v41 = v10;
      uint64_t v42 = v9;
      goto LABEL_47;
    default:
      goto LABEL_31;
  }
  unint64_t v44 = *(unsigned int *)(v12 + 32);
  if (v44 > 0x40) {
    operator new[]();
  }
  unint64_t v45 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v44;
  uint64_t v48 = *(llvm::ConstantInt ***)v12;
  uint64_t v46 = (unint64_t *)(v12 + 24);
  uint64_t v47 = v48;
  if (!v44) {
    LOBYTE(v45) = 0;
  }
  uint64_t v49 = *v47;
  unsigned int v66 = v44;
  unint64_t v65 = v45 & 1;
  unint64_t v50 = *v46;
  int v51 = v44;
  if (v50 <= v44) {
    int v51 = v50;
  }
  unint64_t v52 = v65 << v51;
  if (v44 == v51) {
    unint64_t v52 = 0;
  }
  if (v44) {
    unint64_t v53 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v44;
  }
  else {
    unint64_t v53 = 0;
  }
  unint64_t v65 = v53 & v52;
  uint64_t v54 = llvm::ConstantInt::get(v49, (llvm::LLVMContext *)&v65, (const llvm::APInt *)a3);
  if (v66 >= 0x41 && v65) {
    MEMORY[0x1D25D9CB0](v65, 0x1000C8000313F17);
  }
  uint64_t v55 = a1[2];
  uint64_t v56 = *(void *)(v55 + 104);
  unsigned int v57 = *(_DWORD *)(v55 + 120);
  if (v57)
  {
    unsigned int v58 = v57 - 1;
    unsigned int v59 = (v57 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v60 = v56 + 48 * v59;
    BOOL v61 = *(llvm::Value **)(v60 + 24);
    if (v61 == a2) {
      goto LABEL_69;
    }
    int v62 = 1;
    while (v61 != (llvm::Value *)-4096)
    {
      unsigned int v63 = v59 + v62++;
      unsigned int v59 = v63 & v58;
      uint64_t v60 = v56 + 48 * (v63 & v58);
      BOOL v61 = *(llvm::Value **)(v60 + 24);
      if (v61 == a2) {
        goto LABEL_69;
      }
    }
  }
  uint64_t v60 = v56 + 48 * v57;
LABEL_69:
  if (v60 == v56 + 48 * v57 || (uint64_t v64 = *(void *)(v60 + 40)) == 0) {
    uint64_t v64 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v55, (unint64_t)a2);
  }
  return sub_1CCEE10F0(a1, 1, v64, (uint64_t)v54, v11, (uint64_t)a4);
}

_DWORD *sub_1CCEE10F0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v59[4] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = (void *)a1[3];
  if (a2 == 1)
  {
    unsigned int v21 = *(_DWORD *)(a4 + 32);
    if (v21 <= 0x40)
    {
      uint64_t v22 = a3;
      while (2)
      {
        switch(*(_WORD *)(v22 + 24))
        {
          case 1:
          case 2:
          case 3:
          case 0xD:
            unsigned int v32 = (void *)(v22 + 40);
            goto LABEL_36;
          case 4:
            unsigned int v32 = (void *)(v22 + 48);
            goto LABEL_36;
          case 5:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
            unsigned int v23 = *(uint64_t **)(v22 + 32);
            goto LABEL_20;
          case 6:
            unsigned int v23 = (uint64_t *)(v22 + 40);
LABEL_20:
            uint64_t v22 = *v23;
            continue;
          case 0xE:
            unsigned int v32 = *(void **)(v22 - 8);
            goto LABEL_36;
          default:
            unsigned int v32 = *(void **)(v22 + 32);
LABEL_36:
            int v25 = (llvm::APInt *)(a4 + 24);
            if ((*(uint64_t (**)(void, void, void, void, uint64_t, uint64_t, uint64_t, void))(*(void *)*v12 + 264))(*v12, *v32, 0, 0, 1, (uint64_t)(*(void *)(a4 + 24) << -(char)v21) >> -(char)v21, 0xFFFFFFFFLL, 0))goto LABEL_86; {
            unsigned int v26 = *(_DWORD *)(a4 + 32);
            }
            if (v26 > 0x40) {
              goto LABEL_42;
            }
            if (!v26 || *(void *)v25 == 1 || *(void *)v25 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v26) {
              goto LABEL_86;
            }
            goto LABEL_49;
        }
      }
    }
    int v25 = (llvm::APInt *)(a4 + 24);
    unsigned int v26 = *(_DWORD *)(a4 + 32);
LABEL_42:
    int v33 = 0;
    int64_t v34 = ((unint64_t)v26 + 63) >> 6;
    do
    {
      BOOL v29 = v34-- < 1;
      if (v29) {
        break;
      }
      unint64_t v35 = *(void *)(*(void *)v25 + 8 * v34);
      v33 += __clz(v35);
    }
    while (!v35);
    unsigned int v36 = v26 | 0xFFFFFFC0;
    if ((v26 & 0x3F) == 0) {
      unsigned int v36 = 0;
    }
    if (v33 + v36 != v26 - 1 && llvm::APInt::countTrailingOnesSlowCase(v25) != v26) {
      goto LABEL_49;
    }
    goto LABEL_86;
  }
  if (a2 != 2)
  {
    if (a2 != 3) {
      goto LABEL_49;
    }
    int v13 = (char *)(a6 - 32 * (*(_DWORD *)(a6 + 20) & 0x7FFFFFF) + 32);
    unsigned int v57 = v59;
    uint64_t v58 = 0x400000000;
    sub_1CD77B118((uint64_t)&v57, v13, (char *)a6);
    uint64_t v14 = (*(uint64_t (**)(void, void, void, void *, void, uint64_t))(*(void *)*v12 + 24))(*v12, *(void *)(a6 + 64), *(void *)(a6 - 32 * (*(_DWORD *)(a6 + 20) & 0x7FFFFFF)), v57, v58, 3);
    int v16 = v15;
    if (v57 != v59) {
      free(v57);
    }
    BOOL v17 = v16 >= 0;
    if (v16)
    {
      BOOL v18 = v16 < 1;
    }
    else
    {
      BOOL v17 = v14 >= 0;
      BOOL v18 = v14 < 1;
    }
    if (v17 && v18) {
      goto LABEL_86;
    }
    unsigned int v19 = (llvm::APInt *)(a4 + 24);
    uint64_t v20 = *(unsigned int *)(a4 + 32);
    if (v20 > 0x40)
    {
      int v41 = 0;
      int64_t v42 = (unint64_t)(v20 + 63) >> 6;
      do
      {
        BOOL v29 = v42-- < 1;
        if (v29) {
          break;
        }
        unint64_t v43 = *(void *)(*(void *)v19 + 8 * v42);
        v41 += __clz(v43);
      }
      while (!v43);
      int v44 = v20 | 0xFFFFFFC0;
      if ((v20 & 0x3F) == 0) {
        int v44 = 0;
      }
      if (v41 + v44 != v20 - 1 && llvm::APInt::countTrailingOnesSlowCase(v19) != v20) {
        goto LABEL_49;
      }
    }
    else if (v20 && *(void *)v19 != 1 && *(void *)v19 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v20)
    {
      goto LABEL_49;
    }
    uint64_t v45 = a6 - 32 * (*(_DWORD *)(a6 + 20) & 0x7FFFFFF) + 32;
    if (v45 == a6) {
      goto LABEL_86;
    }
    unsigned int v46 = 0;
    while (1)
    {
      uint64_t v47 = *(void *)v45;
      if (*(void *)v45) {
        BOOL v48 = *(unsigned char *)(*(void *)v45 + 16) == 16;
      }
      else {
        BOOL v48 = 0;
      }
      if (!v48) {
        goto LABEL_75;
      }
      uint64_t v49 = *(unsigned int *)(v47 + 32);
      if (v49 > 0x40) {
        break;
      }
      if (*(void *)(v47 + 24)) {
        goto LABEL_75;
      }
LABEL_76:
      v45 += 32;
      if (v45 == a6)
      {
        if (v46 < 2) {
          goto LABEL_86;
        }
LABEL_49:
        int v37 = a1 + 4;
        if (a1 + 4 != (void *)a1[5])
        {
          unsigned int v38 = 0;
          do
          {
            unsigned int v39 = *(void **)(*v37 + 48);
            if (v39 != (void *)a6 && *v39 == *(void *)a6) {
              llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
            }
            int v37 = (void *)*v37;
            if (v37 == (void *)a1[5]) {
              break;
            }
          }
          while (v38++ < 0x31);
        }
        goto LABEL_86;
      }
    }
    int v50 = 0;
    int64_t v51 = (unint64_t)(v49 + 63) >> 6;
    do
    {
      BOOL v29 = v51-- < 1;
      if (v29) {
        break;
      }
      unint64_t v52 = *(void *)(*(void *)(v47 + 24) + 8 * v51);
      v50 += __clz(v52);
    }
    while (!v52);
    int v53 = v49 | 0xFFFFFFC0;
    if ((v49 & 0x3F) == 0) {
      int v53 = 0;
    }
    if (v50 + v53 == v49) {
      goto LABEL_76;
    }
LABEL_75:
    ++v46;
    goto LABEL_76;
  }
  uint64_t v24 = *(unsigned int *)(a4 + 32);
  if (v24 <= 0x40)
  {
    if (!*(void *)(a4 + 24)) {
      goto LABEL_86;
    }
    goto LABEL_49;
  }
  int v27 = 0;
  int64_t v28 = (unint64_t)(v24 + 63) >> 6;
  do
  {
    BOOL v29 = v28-- < 1;
    if (v29) {
      break;
    }
    unint64_t v30 = *(void *)(*(void *)(a4 + 24) + 8 * v28);
    v27 += __clz(v30);
  }
  while (!v30);
  int v31 = v24 | 0xFFFFFFC0;
  if ((v24 & 0x3F) == 0) {
    int v31 = 0;
  }
  if (v27 + v31 != v24) {
    goto LABEL_49;
  }
LABEL_86:
  BOOL result = operator new(0x40uLL);
  result[4] = a2;
  *((void *)result + 3) = a3;
  *((void *)result + 4) = a4;
  *((void *)result + 5) = a5;
  *((void *)result + 6) = a6;
  *((void *)result + 7) = 0;
  uint64_t v56 = a1[4];
  uint64_t v55 = a1 + 4;
  *(void *)BOOL result = v56;
  *((void *)result + 1) = v55;
  *(void *)(v56 + 8) = result;
  void *v55 = result;
  ++v55[2];
  return result;
}

_DWORD *sub_1CCEE1660(uint64_t a1, unint64_t a2, const llvm::APInt *a3, llvm::ConstantInt ***a4)
{
  int v8 = *(unsigned __int8 *)(a2 + 16);
  if (v8 == 5)
  {
    int v12 = *(unsigned __int16 *)(a2 + 18);
    if (v12 != 29)
    {
      if (v12 == 13)
      {
        unint64_t v13 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
        uint64_t v9 = *(llvm **)v13;
        if (*(void *)v13)
        {
          uint64_t v10 = *(llvm **)(v13 + 32);
          if (v10) {
            BOOL v14 = *((unsigned char *)v10 + 16) == 16;
          }
          else {
            BOOL v14 = 0;
          }
          if (v14) {
            goto LABEL_7;
          }
          goto LABEL_15;
        }
      }
LABEL_43:
      unint64_t v35 = **a4;
      unsigned int v36 = *((_DWORD *)*a4 + 2);
      unsigned int v47 = v36 >> 8;
      if (v36 >> 8 >= 0x41) {
        operator new[]();
      }
      uint64_t v46 = 0;
      uint64_t v9 = (llvm *)llvm::ConstantInt::get(v35, (llvm::LLVMContext *)&v46, a3);
      if (v47 >= 0x41 && v46) {
        MEMORY[0x1D25D9CB0](v46, 0x1000C8000313F17);
      }
      uint64_t v15 = *(void *)(a1 + 16);
      uint64_t v37 = *(void *)(v15 + 104);
      unsigned int v38 = *(_DWORD *)(v15 + 120);
      if (v38)
      {
        unsigned int v39 = v38 - 1;
        unsigned int v40 = (v38 - 1) & ((a2 >> 4) ^ (a2 >> 9));
        uint64_t v41 = v37 + 48 * v40;
        uint64_t v42 = *(void *)(v41 + 24);
        if (v42 == a2) {
          goto LABEL_52;
        }
        int v43 = 1;
        while (v42 != -4096)
        {
          unsigned int v44 = v40 + v43++;
          unsigned int v40 = v44 & v39;
          uint64_t v41 = v37 + 48 * (v44 & v39);
          uint64_t v42 = *(void *)(v41 + 24);
          if (v42 == a2) {
            goto LABEL_52;
          }
        }
      }
      uint64_t v41 = v37 + 48 * v38;
LABEL_52:
      if (v41 != v37 + 48 * v38)
      {
        uint64_t SCEVIter = *(void *)(v41 + 40);
        if (SCEVIter) {
          goto LABEL_59;
        }
      }
      unint64_t v11 = a2;
      goto LABEL_55;
    }
    unint64_t v26 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
    uint64_t v9 = *(llvm **)v26;
    if (!*(void *)v26) {
      goto LABEL_43;
    }
    unsigned int v23 = *(llvm **)(v26 + 32);
    if (v23) {
      BOOL v27 = *((unsigned char *)v23 + 16) == 16;
    }
    else {
      BOOL v27 = 0;
    }
    if (v27) {
      goto LABEL_25;
    }
    goto LABEL_35;
  }
  if (v8 == 57)
  {
    uint64_t v9 = *(llvm **)(a2 - 64);
    if (!v9) {
      goto LABEL_43;
    }
    unsigned int v23 = *(llvm **)(a2 - 32);
    if (v23 && *((unsigned char *)v23 + 16) == 16)
    {
LABEL_25:
      uint64_t v24 = v9;
      uint64_t v9 = v23;
      goto LABEL_36;
    }
LABEL_35:
    uint64_t v24 = v23;
    if (*((unsigned char *)v9 + 16) != 16) {
      goto LABEL_43;
    }
LABEL_36:
    if (!llvm::haveNoCommonBitsSet(v24, v9, *(void ***)a1, 0, 0, 0, (const llvm::DominatorTree *)1)) {
      goto LABEL_43;
    }
    uint64_t v15 = *(void *)(a1 + 16);
    uint64_t v28 = *(void *)(v15 + 104);
    unsigned int v29 = *(_DWORD *)(v15 + 120);
    if (v29)
    {
      unsigned int v30 = (v29 - 1) & ((v24 >> 4) ^ (v24 >> 9));
      uint64_t v31 = v28 + 48 * v30;
      unsigned int v32 = *(llvm **)(v31 + 24);
      if (v32 == v24) {
        goto LABEL_57;
      }
      int v33 = 1;
      while (v32 != (llvm *)-4096)
      {
        unsigned int v34 = v30 + v33++;
        unsigned int v30 = v34 & (v29 - 1);
        uint64_t v31 = v28 + 48 * v30;
        unsigned int v32 = *(llvm **)(v31 + 24);
        if (v32 == v24) {
          goto LABEL_57;
        }
      }
    }
    uint64_t v31 = v28 + 48 * v29;
LABEL_57:
    if (v31 != v28 + 48 * v29)
    {
      uint64_t SCEVIter = *(void *)(v31 + 40);
      if (SCEVIter) {
        goto LABEL_59;
      }
    }
    unint64_t v11 = (unint64_t)v24;
LABEL_55:
    uint64_t SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v15, v11);
    goto LABEL_59;
  }
  if (v8 != 41) {
    goto LABEL_43;
  }
  uint64_t v9 = *(llvm **)(a2 - 64);
  if (!v9) {
    goto LABEL_43;
  }
  uint64_t v10 = *(llvm **)(a2 - 32);
  if (v10 && *((unsigned char *)v10 + 16) == 16)
  {
LABEL_7:
    unint64_t v11 = (unint64_t)v9;
    uint64_t v9 = v10;
    goto LABEL_16;
  }
LABEL_15:
  unint64_t v11 = (unint64_t)v10;
  if (*((unsigned char *)v9 + 16) != 16) {
    goto LABEL_43;
  }
LABEL_16:
  uint64_t v15 = *(void *)(a1 + 16);
  uint64_t v16 = *(void *)(v15 + 104);
  unsigned int v17 = *(_DWORD *)(v15 + 120);
  if (!v17)
  {
LABEL_26:
    uint64_t v19 = v16 + 48 * v17;
    goto LABEL_27;
  }
  unsigned int v18 = (v17 - 1) & ((v11 >> 4) ^ (v11 >> 9));
  uint64_t v19 = v16 + 48 * v18;
  uint64_t v20 = *(void *)(v19 + 24);
  if (v20 != v11)
  {
    int v21 = 1;
    while (v20 != -4096)
    {
      unsigned int v22 = v18 + v21++;
      unsigned int v18 = v22 & (v17 - 1);
      uint64_t v19 = v16 + 48 * v18;
      uint64_t v20 = *(void *)(v19 + 24);
      if (v20 == v11) {
        goto LABEL_27;
      }
    }
    goto LABEL_26;
  }
LABEL_27:
  if (v19 == v16 + 48 * v17) {
    goto LABEL_55;
  }
  uint64_t SCEVIter = *(void *)(v19 + 40);
  if (!SCEVIter) {
    goto LABEL_55;
  }
LABEL_59:

  return sub_1CCEE10F0((void *)a1, 2, SCEVIter, (uint64_t)v9, (uint64_t)a3, (uint64_t)a4);
}

_DWORD *sub_1CCEE1A44(uint64_t *a1, uint64_t a2, const llvm::APInt *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = **(llvm::ConstantInt ***)a2;
  unsigned int v11 = *(_DWORD *)(*(void *)a2 + 8);
  unsigned int v42 = v11 >> 8;
  if (v11 >> 8 > 0x40) {
    operator new[]();
  }
  if (v11 <= 0xFF) {
    LOBYTE(v12) = 0;
  }
  else {
    unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v11) + 63);
  }
  unint64_t v41 = v12 & 1;
  unint64_t v13 = llvm::ConstantInt::get(v10, (llvm::LLVMContext *)&v41, a3);
  if (v42 >= 0x41 && v41) {
    MEMORY[0x1D25D9CB0](v41, 0x1000C8000313F17);
  }
  BOOL result = sub_1CCEE1F08(a1, (uint64_t)a3, (uint64_t)v13, a2, a4, a5);
  unsigned int v16 = *(unsigned __int8 *)(a2 + 16);
  unsigned int v17 = v16 - 28;
  if (v16 < 0x1C)
  {
    if (v16 != 5) {
      return result;
    }
    unsigned int v17 = *(unsigned __int16 *)(a2 + 18);
    HIDWORD(v21) = v17 - 13;
    LODWORD(v21) = v17 - 13;
    unsigned int v20 = v21 >> 1;
    if (v20 > 6 || ((1 << v20) & 0x47) == 0)
    {
LABEL_28:
      if (v20 > 6 || ((1 << v20) & 0x47) == 0) {
        return result;
      }
      goto LABEL_30;
    }
  }
  else
  {
    HIDWORD(v19) = v16 - 41;
    LODWORD(v19) = v16 - 41;
    unsigned int v18 = v19 >> 1;
    if (v18 > 6 || ((1 << v18) & 0x47) == 0) {
      goto LABEL_24;
    }
  }
  if (v17 == 17 && (*(unsigned char *)(a2 + 17) & 4) != 0)
  {
    int v22 = *(_DWORD *)(a2 + 20);
    unsigned int v23 = (v22 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v22 & 0x7FFFFFF));
    if (*v23)
    {
      uint64_t v15 = (const llvm::APInt *)v23[4];
      if (v15)
      {
        if (*((unsigned char *)v15 + 16) == 16) {
          return sub_1CCEE1F08(a1, (uint64_t)a3, (uint64_t)v15, *v23, a4, a5);
        }
      }
    }
  }
  if (v16 < 0x1C)
  {
    unsigned int v17 = *(unsigned __int16 *)(a2 + 18);
    HIDWORD(v25) = v17 - 13;
    LODWORD(v25) = v17 - 13;
    unsigned int v20 = v25 >> 1;
    goto LABEL_28;
  }
  HIDWORD(v24) = v16 - 41;
  LODWORD(v24) = v16 - 41;
  unsigned int v18 = v24 >> 1;
LABEL_24:
  if (v18 > 6 || ((1 << v18) & 0x47) == 0) {
    return result;
  }
  unsigned int v17 = v16 - 28;
LABEL_30:
  if (v17 == 25 && (*(unsigned char *)(a2 + 17) & 4) != 0)
  {
    int v26 = *(_DWORD *)(a2 + 20);
    BOOL v27 = (v26 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v26 & 0x7FFFFFF));
    uint64_t v28 = *v27;
    if (*v27)
    {
      uint64_t v29 = v27[4];
      if (v29)
      {
        if (*(unsigned char *)(v29 + 16) == 16)
        {
          unint64_t v30 = *(unsigned int *)(v29 + 32);
          if (v30 > 0x40) {
            operator new[]();
          }
          unint64_t v31 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v30;
          unsigned int v34 = *(llvm::ConstantInt ***)v29;
          unsigned int v32 = (unint64_t *)(v29 + 24);
          int v33 = v34;
          if (!v30) {
            LOBYTE(v31) = 0;
          }
          unint64_t v35 = *v33;
          unsigned int v42 = v30;
          unint64_t v41 = v31 & 1;
          unint64_t v36 = *v32;
          int v37 = v30;
          if (v36 <= v30) {
            int v37 = v36;
          }
          unint64_t v38 = v41 << v37;
          if (v30 == v37) {
            unint64_t v38 = 0;
          }
          unint64_t v39 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v30;
          if (!v30) {
            unint64_t v39 = 0;
          }
          unint64_t v41 = v39 & v38;
          unsigned int v40 = llvm::ConstantInt::get(v35, (llvm::LLVMContext *)&v41, v15);
          if (v42 >= 0x41)
          {
            if (v41) {
              MEMORY[0x1D25D9CB0](v41, 0x1000C8000313F17);
            }
          }
          return sub_1CCEE1F08(a1, (uint64_t)a3, (uint64_t)v40, v28, a4, a5);
        }
      }
    }
  }
  return result;
}

_DWORD *sub_1CCEE1F08(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *a1;
  uint64_t v13 = *(void *)a6;
  unsigned int v14 = *(_DWORD *)(*(void *)a6 + 8);
  if ((v14 & 0xFE) == 0x12) {
    unsigned int v14 = *(_DWORD *)(**(void **)(v13 + 16) + 8);
  }
  uint64_t v15 = *(void *)(v12 + 232);
  if (v14 < 0x100) {
    goto LABEL_12;
  }
  unsigned int v16 = v14 >> 8;
  unint64_t v17 = *(unsigned int *)(v12 + 240);
  uint64_t v18 = *(void *)(v12 + 232);
  if (v17)
  {
    uint64_t v18 = v15;
    unint64_t v19 = v17;
    do
    {
      unint64_t v20 = v19 >> 1;
      uint64_t v21 = v18 + 16 * (v19 >> 1);
      unsigned int v22 = *(_DWORD *)(v21 + 8);
      uint64_t v23 = v21 + 16;
      v19 += ~(v19 >> 1);
      if (v22 < v16) {
        uint64_t v18 = v23;
      }
      else {
        unint64_t v19 = v20;
      }
    }
    while (v19);
  }
  if (v18 == v15 + 16 * v17 || *(_DWORD *)(v18 + 8) != v16) {
LABEL_12:
  }
    uint64_t v18 = v15;
  unint64_t v24 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v13, (llvm::LLVMContext *)*(unsigned int *)(v18 + 4));
  if ((*(_DWORD *)(v13 + 8) & 0xFE) == 0x12)
  {
    uint64_t v29 = (llvm::Type *)*(unsigned int *)(v13 + 32);
    if (*(_DWORD *)(v13 + 8) == 19) {
      llvm::ScalableVectorType::get(v24, v29);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v24, v29);
    }
  }
  unsigned int v25 = *(_DWORD *)(a3 + 32);
  if (v25 > 0x40) {
    uint64_t v26 = **(void **)(a3 + 24);
  }
  else {
    uint64_t v26 = (uint64_t)(*(void *)(a3 + 24) << -(char)v25) >> -(char)v25;
  }
  BOOL v27 = llvm::ConstantInt::get((llvm::ConstantInt *)v24, v26 * a5, (const llvm::APInt *)1);

  return sub_1CCEE10F0(a1, 3, a2, (uint64_t)v27, a4, a6);
}

void sub_1CCEE2080(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::initializeLegacyDivergenceAnalysisPass(a1, a2);
  llvm::initializeLowerSwitchLegacyPassPass(a1, v3);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeRegionInfoPassPass(a1, v4);
  operator new();
}

uint64_t sub_1CCEE2138(uint64_t a1, char a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCF89A8;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1F2641120;
  *(unsigned char *)(a1 + 28) = a2;
  if (word_1EBCF89C0) {
    *(unsigned char *)(a1 + 28) = byte_1EBCF8A38;
  }
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF89B0, memory_order_acquire) != -1)
  {
    v6[0] = sub_1CCEE2080;
    v6[1] = &PassRegistry;
    uint64_t v5 = v6;
    std::__call_once(&qword_1EBCF89B0, &v5, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CCEE2200(uint64_t a1, char **a2)
{
  uint64_t v5 = a2[1];
  unint64_t v4 = (unint64_t)a2[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = *a2;
    uint64_t v8 = (v5 - *a2) >> 3;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      abort();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 61) {
        sub_1CB833614();
      }
      uint64_t v12 = (char *)operator new(8 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v13 = &v12[8 * v8];
    *(void *)uint64_t v13 = a1;
    uint64_t v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        uint64_t v14 = *((void *)v5 - 1);
        v5 -= 8;
        *((void *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      uint64_t v5 = *a2;
    }
    *a2 = v13;
    a2[1] = v6;
    a2[2] = &v12[8 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v5 = a1;
    uint64_t v6 = v5 + 8;
  }
  a2[1] = v6;
  unsigned int v16 = *(uint64_t **)(a1 + 40);
  uint64_t v15 = *(uint64_t **)(a1 + 48);
  while (v16 != v15)
  {
    uint64_t v17 = *v16++;
    sub_1CCEE2200(v17, a2);
  }
}

llvm::UndefValue *sub_1CCEE2308(uint64_t a1, llvm::Type *a2, const llvm::APInt *a3)
{
  unint64_t v4 = **(uint64_t ***)((unint64_t)a2 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = *v4;
  *(void *)a1 = *v4 + 1888;
  uint64_t v6 = *(void **)(v5 + 1560);
  if (!v6)
  {
    unint64_t v11 = *(llvm::ConstantInt **)(v5 + 1888);
    unsigned int v12 = *(_DWORD *)(v5 + 1896);
    unsigned int v17 = v12 >> 8;
    if (v12 >> 8 > 0x40) {
      operator new[]();
    }
    unint64_t v13 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v12) + 63);
    if (v12 <= 0xFF) {
      LOBYTE(v13) = 0;
    }
    unint64_t v16 = v13 & 1;
    uint64_t v6 = llvm::ConstantInt::get(v11, (llvm::LLVMContext *)&v16, a3);
    if (v17 >= 0x41 && v16)
    {
      uint64_t v15 = v6;
      MEMORY[0x1D25D9CB0](v16, 0x1000C8000313F17);
      uint64_t v6 = v15;
    }
    *(void *)(v5 + 1560) = v6;
    uint64_t v5 = *v4;
  }
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void **)(v5 + 1568);
  if (!v7)
  {
    unint64_t v9 = *(llvm::ConstantInt **)(v5 + 1888);
    unsigned int v10 = *(_DWORD *)(v5 + 1896);
    unsigned int v17 = v10 >> 8;
    if (v10 >> 8 > 0x40) {
      operator new[]();
    }
    unint64_t v16 = 0;
    uint64_t v7 = llvm::ConstantInt::get(v9, (llvm::LLVMContext *)&v16, a3);
    if (v17 >= 0x41 && v16)
    {
      uint64_t v14 = v7;
      MEMORY[0x1D25D9CB0](v16, 0x1000C8000313F17);
      uint64_t v7 = v14;
    }
    *(void *)(v5 + 1568) = v7;
  }
  *(void *)(a1 + 16) = v7;
  BOOL result = llvm::UndefValue::get(*(llvm::UndefValue **)a1, a2);
  *(void *)(a1 + 24) = result;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t sub_1CCEE254C(void *a1, void *a2, uint64_t a3)
{
  if (a2[4])
  {
    a1[7] = a3;
    a1[4] = *(void *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 56);
    a1[5] = a2;
    llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::getNode();
  }
  return 0;
}

uint64_t sub_1CCEE4E44(uint64_t a1)
{
  __n128 v2 = *(void **)(a1 + 672);
  if (v2 != (void *)(a1 + 688)) {
    free(v2);
  }
  sub_1CC6D8C2C(a1 + 648);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 648), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 624), 8);
  int v3 = *(void **)(a1 + 544);
  if (v3 != (void *)(a1 + 560)) {
    free(v3);
  }
  sub_1CC6D8C2C(a1 + 520);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 520), 8);
  sub_1CD719F1C(a1 + 472);
  sub_1CD786610((uint64_t *)(a1 + 448));
  sub_1CC0BDE04((char **)(a1 + 240));
  unint64_t v4 = *(void **)(a1 + 152);
  if (v4 != *(void **)(a1 + 144)) {
    free(v4);
  }
  uint64_t v5 = *(void **)(a1 + 64);
  if (v5 != (void *)(a1 + 80)) {
    free(v5);
  }
  return a1;
}

void sub_1CCEE4F00()
{
}

void sub_1CCEE4F44(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CCEE4F7C()
{
  return "Structurize control flow";
}

void sub_1CCEE4F8C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 28)) {
    sub_1CB843600(a2, a2, (uint64_t)&llvm::LegacyDivergenceAnalysis::ID);
  }
  sub_1CB843600(a2, a2, (uint64_t)&unk_1EA61F34D);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);

  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
}

uint64_t sub_1CCEE5010(uint64_t a1, uint64_t a2, const llvm::APInt *a3)
{
  void v38[9] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = 0;
  unint64_t v19 = v21;
  uint64_t v20 = 0x800000000;
  v21[8] = v23;
  v21[9] = v23;
  v21[10] = 8;
  int v22 = 0;
  v23[8] = v24;
  v23[9] = 0x800000000;
  v24[12] = 0u;
  int v25 = 0;
  long long v26 = 0u;
  int v27 = 0;
  long long v28 = 0u;
  memset(v29, 0, sizeof(v29));
  unint64_t v30 = v32;
  uint64_t v31 = 0x800000000;
  int v33 = 0;
  v32[4] = 0u;
  long long v34 = 0u;
  int v35 = 0;
  unint64_t v36 = v38;
  uint64_t v37 = 0x800000000;
  sub_1CCEE2308((uint64_t)v17, *(llvm::Type **)a2, a3);
  if (*(unsigned char *)(a1 + 28))
  {
    uint64_t v5 = *(uint64_t **)(a1 + 8);
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    if (v6 == v7)
    {
LABEL_5:
      uint64_t v8 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v6 != &llvm::LegacyDivergenceAnalysis::ID)
      {
        v6 += 16;
        if (v6 == v7) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = *(void *)(v6 + 8);
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v8 + 96))(v8, &llvm::LegacyDivergenceAnalysis::ID);
    if (*(void *)(a2 + 32))
    {
      uint64_t v18 = v9;
      llvm::LLVMContext::getMDKindID(**(uint64_t ***)(*(void *)a2 & 0xFFFFFFFFFFFFFFF8), "structurizecfg.uniform", 0x16uLL);
      llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::elements();
    }
  }
  unsigned int v10 = *(uint64_t **)(a1 + 8);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  if (v11 == v12)
  {
LABEL_11:
    uint64_t v13 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v11 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v11 += 16;
      if (v11 == v12) {
        goto LABEL_11;
      }
    }
    uint64_t v13 = *(void *)(v11 + 8);
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v13 + 96))(v13, &llvm::DominatorTreeWrapperPass::ID);
  uint64_t v15 = sub_1CCEE254C(v17, (void *)a2, v14 + 32);
  sub_1CCEE4E44((uint64_t)v17);
  return v15;
}

void sub_1CCEE5DB8(uint64_t *a1, int a2)
{
  __n128 v2 = a1 + 84;
  uint64_t v3 = 68;
  if (a2) {
    uint64_t v3 = 84;
  }
  uint64_t v4 = 2;
  if (a2) {
    uint64_t v4 = 1;
  }
  uint64_t v5 = a1[v4];
  if (!a2) {
    __n128 v2 = a1 + 68;
  }
  memset(v117, 0, sizeof(v117));
  uint64_t v6 = *((unsigned int *)v2 + 2);
  if (!v6) {
    goto LABEL_163;
  }
  int v7 = a2;
  uint64_t v8 = a1;
  uint64_t v9 = a1[v3];
  uint64_t v112 = v9 + 8 * v6;
  uint64_t v107 = (uint64_t)(a1 + 81);
  uint64_t v108 = (uint64_t)(a1 + 65);
  uint64_t v109 = v5;
  do
  {
    uint64_t v10 = *(void *)v9;
    uint64_t v11 = *(llvm::BasicBlock **)(*(void *)v9 + 40);
    uint64_t v12 = *(void *)(*(void *)v9 - 32);
    uint64_t v13 = *(void *)(*(void *)v9 - 64);
    uint64_t v115 = v13;
    uint64_t v116 = v12;
    llvm::SSAUpdater::Initialize((uint64_t)v117, *v8, "", 0);
    uint64_t v14 = *(void *)(v8[4] + 80);
    if (v14) {
      uint64_t v15 = v14 - 24;
    }
    else {
      uint64_t v15 = 0;
    }
    int v118 = (llvm::BasicBlock *)v15;
    unint64_t v16 = *(void **)&v117[0];
    int v17 = *(_DWORD *)(*(void *)&v117[0] + 16);
    if (v17)
    {
      int v18 = v17 - 1;
      unsigned int v19 = (v17 - 1) & ((v15 >> 4) ^ (v15 >> 9));
      uint64_t v20 = (uint64_t *)(**(void **)&v117[0] + 16 * v19);
      uint64_t v21 = *v20;
      if (*v20 == v15)
      {
        v20[1] = v5;
        if (v7) {
          uint64_t v27 = v13;
        }
        else {
          uint64_t v27 = (uint64_t)v11;
        }
        int v118 = (llvm::BasicBlock *)v27;
        goto LABEL_31;
      }
      int v22 = 0;
      int v23 = 1;
      while (v21 != -4096)
      {
        if (v22) {
          BOOL v24 = 0;
        }
        else {
          BOOL v24 = v21 == -8192;
        }
        if (v24) {
          int v22 = v20;
        }
        unsigned int v25 = v19 + v23++;
        unsigned int v19 = v25 & v18;
        uint64_t v20 = (uint64_t *)(**(void **)&v117[0] + 16 * (v25 & v18));
        uint64_t v21 = *v20;
        if (*v20 == v15) {
          goto LABEL_27;
        }
      }
      if (v22) {
        long long v26 = v22;
      }
      else {
        long long v26 = v20;
      }
    }
    else
    {
      long long v26 = 0;
    }
    uint64_t v20 = sub_1CC0A3E2C(*(uint64_t *)&v117[0], (uint64_t)&v118, (uint64_t *)&v118, v26);
    uint64_t *v20 = (uint64_t)v118;
    v20[1] = 0;
    unint64_t v16 = *(void **)&v117[0];
    int v17 = *(_DWORD *)(*(void *)&v117[0] + 16);
LABEL_27:
    v20[1] = v5;
    if (v7) {
      uint64_t v27 = v13;
    }
    else {
      uint64_t v27 = (uint64_t)v11;
    }
    int v118 = (llvm::BasicBlock *)v27;
    if (!v17)
    {
      unint64_t v36 = 0;
LABEL_44:
      unint64_t v30 = sub_1CC0A3E2C((uint64_t)v16, (uint64_t)&v118, (uint64_t *)&v118, v36);
      uint64_t *v30 = (uint64_t)v118;
      v30[1] = 0;
      goto LABEL_45;
    }
LABEL_31:
    int v28 = v17 - 1;
    unsigned int v29 = v28 & ((v27 >> 4) ^ (v27 >> 9));
    unint64_t v30 = (uint64_t *)(*v16 + 16 * v29);
    uint64_t v31 = *v30;
    if (*v30 != v27)
    {
      unsigned int v32 = 0;
      int v33 = 1;
      while (v31 != -4096)
      {
        if (v32) {
          BOOL v34 = 0;
        }
        else {
          BOOL v34 = v31 == -8192;
        }
        if (v34) {
          unsigned int v32 = v30;
        }
        unsigned int v35 = v29 + v33++;
        unsigned int v29 = v35 & v28;
        unint64_t v30 = (uint64_t *)(*v16 + 16 * (v35 & v28));
        uint64_t v31 = *v30;
        if (*v30 == v27) {
          goto LABEL_45;
        }
      }
      if (v32) {
        unint64_t v36 = v32;
      }
      else {
        unint64_t v36 = v30;
      }
      goto LABEL_44;
    }
LABEL_45:
    v30[1] = v5;
    uint64_t v113 = v10;
    if (v7)
    {
      uint64_t v37 = &v115;
      uint64_t v38 = v107;
    }
    else
    {
      uint64_t v37 = &v116;
      uint64_t v38 = v108;
    }
    unint64_t v39 = sub_1CD748FA4(v38, v37);
    uint64_t v40 = v8[7];
    uint64_t v41 = v39[1];
    uint64_t v42 = *((unsigned int *)v39 + 6);
    int v43 = (void *)(v41 + 16 * v42);
    uint64_t v114 = v9;
    if (*((_DWORD *)v39 + 4))
    {
      if (*((_DWORD *)v39 + 6))
      {
        uint64_t v44 = 16 * v42;
        uint64_t v45 = (void *)v39[1];
        while ((*v45 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v45 += 2;
          v44 -= 16;
          if (!v44) {
            goto LABEL_53;
          }
        }
      }
      else
      {
        uint64_t v45 = (void *)v39[1];
      }
    }
    else
    {
LABEL_53:
      uint64_t v45 = (void *)(v41 + 16 * v42);
    }
    uint64_t v46 = (void *)(v41 + 16 * v42);
    uint64_t v47 = (uint64_t)v11;
    if (v45 == v46)
    {
LABEL_131:
      int v118 = (llvm::BasicBlock *)v47;
      int v91 = *(_DWORD *)(*(void *)&v117[0] + 16);
      if (v91)
      {
        int v92 = v91 - 1;
        unsigned int v93 = (v91 - 1) & ((v47 >> 4) ^ (v47 >> 9));
        uint64_t v94 = (uint64_t *)(**(void **)&v117[0] + 16 * v93);
        uint64_t v95 = *v94;
        if (*v94 != v47)
        {
          uint64_t v96 = 0;
          int v97 = 1;
          while (v95 != -4096)
          {
            if (v96) {
              BOOL v98 = 0;
            }
            else {
              BOOL v98 = v95 == -8192;
            }
            if (v98) {
              uint64_t v96 = v94;
            }
            unsigned int v99 = v93 + v97++;
            unsigned int v93 = v99 & v92;
            uint64_t v94 = (uint64_t *)(**(void **)&v117[0] + 16 * (v99 & v92));
            uint64_t v95 = *v94;
            if (*v94 == v47) {
              goto LABEL_146;
            }
          }
          if (v96) {
            uint64_t v100 = v96;
          }
          else {
            uint64_t v100 = v94;
          }
LABEL_145:
          uint64_t v94 = sub_1CC0A3E2C(*(uint64_t *)&v117[0], (uint64_t)&v118, (uint64_t *)&v118, v100);
          *uint64_t v94 = (uint64_t)v118;
          v94[1] = 0;
        }
LABEL_146:
        v94[1] = v5;
        goto LABEL_147;
      }
      uint64_t v100 = 0;
      goto LABEL_145;
    }
    int v48 = 0;
    uint64_t v47 = (uint64_t)v11;
    while (1)
    {
      int v50 = (llvm::BasicBlock *)*v45;
      uint64_t v49 = v45[1];
      if ((llvm::BasicBlock *)*v45 == v11) {
        break;
      }
      int v118 = (llvm::BasicBlock *)*v45;
      int v51 = *(_DWORD *)(*(void *)&v117[0] + 16);
      unsigned int v52 = v50 >> 4;
      if (v51)
      {
        int v53 = v51 - 1;
        unsigned int v54 = (v51 - 1) & (v52 ^ (v50 >> 9));
        uint64_t v55 = (uint64_t *)(**(void **)&v117[0] + 16 * v54);
        uint64_t v56 = *v55;
        if ((llvm::BasicBlock *)*v55 == v50) {
          goto LABEL_73;
        }
        unsigned int v57 = 0;
        int v58 = 1;
        while (v56 != -4096)
        {
          if (v57) {
            BOOL v59 = 0;
          }
          else {
            BOOL v59 = v56 == -8192;
          }
          if (v59) {
            unsigned int v57 = v55;
          }
          unsigned int v60 = v54 + v58++;
          unsigned int v54 = v60 & v53;
          uint64_t v55 = (uint64_t *)(**(void **)&v117[0] + 16 * (v60 & v53));
          uint64_t v56 = *v55;
          if ((llvm::BasicBlock *)*v55 == v50) {
            goto LABEL_73;
          }
        }
        if (v57) {
          BOOL v61 = v57;
        }
        else {
          BOOL v61 = v55;
        }
      }
      else
      {
        BOOL v61 = 0;
      }
      uint64_t v55 = sub_1CC0A3E2C(*(uint64_t *)&v117[0], (uint64_t)&v118, (uint64_t *)&v118, v61);
      uint64_t *v55 = (uint64_t)v118;
      v55[1] = 0;
LABEL_73:
      v55[1] = v49;
      if (v47)
      {
        uint64_t v62 = *(void *)(*(void *)(v47 + 56) + 80);
        if (v62) {
          uint64_t v63 = v62 - 24;
        }
        else {
          uint64_t v63 = 0;
        }
        if (v63 != v47 && v63 != (void)v50)
        {
          uint64_t v65 = *(void *)(v40 + 24);
          uint64_t v66 = *(unsigned int *)(v40 + 40);
          if (!v66) {
            goto LABEL_89;
          }
          LODWORD(v67) = (v66 - 1) & ((v47 >> 4) ^ (v47 >> 9));
          int v68 = (llvm::BasicBlock **)(v65 + 16 * v67);
          unsigned int v69 = *v68;
          if (*v68 != (llvm::BasicBlock *)v47)
          {
            int v70 = 1;
            while (v69 != (llvm::BasicBlock *)-4096)
            {
              int v71 = v67 + v70++;
              uint64_t v67 = v71 & (v66 - 1);
              unsigned int v69 = *(llvm::BasicBlock **)(v65 + 16 * v67);
              if (v69 == (llvm::BasicBlock *)v47)
              {
                int v68 = (llvm::BasicBlock **)(v65 + 16 * v67);
                goto LABEL_90;
              }
            }
LABEL_89:
            int v68 = (llvm::BasicBlock **)(v65 + 16 * v66);
          }
LABEL_90:
          unsigned int v72 = (llvm::BasicBlock **)(v65 + 16 * v66);
          if (v68 == v72)
          {
            uint64_t v73 = 0;
            if (!v66) {
              goto LABEL_121;
            }
LABEL_92:
            unsigned int v74 = v66 - 1;
            LODWORD(v66) = (v66 - 1) & (v52 ^ (v50 >> 9));
            unint64_t v75 = (llvm::BasicBlock **)(v65 + 16 * v66);
            uint64_t v76 = *v75;
            if (*v75 != v50)
            {
              int v77 = 1;
              while (v76 != (llvm::BasicBlock *)-4096)
              {
                int v78 = v66 + v77++;
                uint64_t v66 = v78 & v74;
                uint64_t v76 = *(llvm::BasicBlock **)(v65 + 16 * v66);
                if (v76 == v50)
                {
                  unint64_t v75 = (llvm::BasicBlock **)(v65 + 16 * v66);
                  goto LABEL_97;
                }
              }
              goto LABEL_121;
            }
LABEL_97:
            if (v75 == v72) {
              goto LABEL_121;
            }
            uint64_t v79 = v75[1];
          }
          else
          {
            uint64_t v73 = (unsigned int *)v68[1];
            if (v66) {
              goto LABEL_92;
            }
LABEL_121:
            uint64_t v79 = 0;
          }
          if (v73 == (unsigned int *)v79)
          {
            uint64_t v79 = (llvm::BasicBlock *)v73;
          }
          else
          {
            do
            {
              unsigned int v80 = v73[4];
              unsigned int v81 = *((_DWORD *)v79 + 4);
              BOOL v82 = v80 >= v81;
              if (v80 >= v81) {
                uint64_t v83 = (llvm::BasicBlock *)v73;
              }
              else {
                uint64_t v83 = v79;
              }
              if (!v82) {
                uint64_t v79 = (llvm::BasicBlock *)v73;
              }
              uint64_t v73 = (unsigned int *)*((void *)v83 + 1);
            }
            while (v73 != (unsigned int *)v79);
          }
          uint64_t v63 = *(void *)v79;
        }
        if (v63 == v47) {
          int v84 = v48;
        }
        else {
          int v84 = 0;
        }
        int v48 = v84 | (v63 == (void)v50);
        uint64_t v47 = v63;
        goto LABEL_113;
      }
      int v48 = 1;
      uint64_t v47 = (uint64_t)v50;
LABEL_113:
      unsigned int v85 = v45 + 2;
      uint64_t v45 = v43;
      if (v85 != v43)
      {
        uint64_t v45 = v85;
        while ((*v45 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v45 += 2;
          if (v45 == v43)
          {
            uint64_t v45 = v43;
            break;
          }
        }
      }
      if (v45 == v46) {
        goto LABEL_129;
      }
    }
    if (v49)
    {
      uint64_t v86 = v114;
      if (*(void *)(v113 - 96))
      {
        **(void **)(v113 - 80) = *(void *)(v113 - 88);
        uint64_t v87 = *(void *)(v113 - 88);
        if (v87) {
          *(void *)(v87 + 16) = *(void *)(v113 - 80);
        }
      }
      *(void *)(v113 - 96) = v49;
      uint64_t v90 = *(void *)(v49 + 8);
      unint64_t v89 = (void *)(v49 + 8);
      uint64_t v88 = v90;
      *(void *)(v113 - 88) = v90;
      uint64_t v5 = v109;
      uint64_t v8 = a1;
      if (v90) {
        *(void *)(v88 + 16) = v113 - 88;
      }
      *(void *)(v113 - 80) = v89;
      void *v89 = v113 - 96;
      int v7 = a2;
      goto LABEL_154;
    }
LABEL_129:
    BOOL v24 = v48 == 0;
    int v7 = a2;
    uint64_t v5 = v109;
    uint64_t v8 = a1;
    if (v24) {
      goto LABEL_131;
    }
LABEL_147:
    ValueInMiddleOfBlock = llvm::SSAUpdater::GetValueInMiddleOfBlock((llvm::UndefValue **)v117, v11);
    uint64_t v102 = (llvm::UndefValue **)(v113 - 96);
    if (*(void *)(v113 - 96))
    {
      **(void **)(v113 - 80) = *(void *)(v113 - 88);
      uint64_t v103 = *(void *)(v113 - 88);
      if (v103) {
        *(void *)(v103 + 16) = *(void *)(v113 - 80);
      }
    }
    char *v102 = ValueInMiddleOfBlock;
    uint64_t v86 = v114;
    if (ValueInMiddleOfBlock)
    {
      uint64_t v106 = *((void *)ValueInMiddleOfBlock + 1);
      uint64_t v104 = (llvm::UndefValue ***)((char *)ValueInMiddleOfBlock + 8);
      uint64_t v105 = v106;
      *(void *)(v113 - 88) = v106;
      if (v106) {
        *(void *)(v105 + 16) = v113 - 88;
      }
      *(void *)(v113 - 80) = v104;
      *uint64_t v104 = v102;
    }
LABEL_154:
    uint64_t v9 = v86 + 8;
  }
  while (v9 != v112);
LABEL_163:
  llvm::SSAUpdater::~SSAUpdater((void **)v117);
}

void sub_1CCEE6448(int *a1, uint64_t a2, uint64_t a3)
{
  *(void *)&long long v36 = a2;
  *((void *)&v36 + 1) = a3;
  int v6 = *a1 + 1;
  *a1 = v6;
  *((_DWORD *)sub_1CD57E864((uint64_t)(a1 + 2), (uint64_t *)&v36) + 4) = v6;
  uint64_t v8 = (_OWORD *)*((void *)a1 + 5);
  unint64_t v7 = *((void *)a1 + 6);
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = (_OWORD *)*((void *)a1 + 4);
    uint64_t v11 = v8 - v10;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60) {
      goto LABEL_36;
    }
    uint64_t v13 = v7 - (void)v10;
    if (v13 >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 60) {
        goto LABEL_37;
      }
      uint64_t v15 = (char *)operator new(16 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    unint64_t v16 = &v15[16 * v11];
    *(_OWORD *)unint64_t v16 = v36;
    uint64_t v9 = v16 + 16;
    if (v8 != v10)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *(v8 - 1);
        v16 -= 16;
        --v8;
      }
      while (v8 != v10);
      uint64_t v8 = (_OWORD *)*((void *)a1 + 4);
    }
    *((void *)a1 + 4) = v16;
    *((void *)a1 + 5) = v9;
    *((void *)a1 + 6) = &v15[16 * v14];
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *uint64_t v8 = v36;
    uint64_t v9 = v8 + 1;
  }
  *((void *)a1 + 5) = v9;
  sub_1CCEE698C((uint64_t)v37, (unint64_t *)&v36);
  long long v33 = v37[2];
  long long v34 = v37[3];
  uint64_t v35 = v38;
  long long v31 = v37[0];
  long long v32 = v37[1];
  int v17 = *a1;
  unsigned int v19 = (char *)*((void *)a1 + 11);
  unint64_t v18 = *((void *)a1 + 12);
  if ((unint64_t)v19 < v18)
  {
    *(void *)unsigned int v19 = a2;
    *((void *)v19 + 1) = a3;
    *((_OWORD *)v19 + 3) = v33;
    *((_OWORD *)v19 + 4) = v34;
    *((void *)v19 + 10) = v35;
    *((_OWORD *)v19 + 1) = v31;
    *((_OWORD *)v19 + 2) = v32;
    uint64_t v20 = v19 + 96;
    *((_DWORD *)v19 + 22) = v17;
    goto LABEL_35;
  }
  uint64_t v21 = (unsigned char *)*((void *)a1 + 10);
  unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v21) >> 5) + 1;
  if (v22 > 0x2AAAAAAAAAAAAAALL) {
LABEL_36:
  }
    abort();
  unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (void)v21) >> 5);
  if (2 * v23 > v22) {
    unint64_t v22 = 2 * v23;
  }
  if (v23 >= 0x155555555555555) {
    unint64_t v24 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v24 = v22;
  }
  if (!v24)
  {
    unsigned int v25 = 0;
    goto LABEL_30;
  }
  if (v24 > 0x2AAAAAAAAAAAAAALL) {
LABEL_37:
  }
    sub_1CB833614();
  unsigned int v25 = (char *)operator new(96 * v24);
LABEL_30:
  long long v26 = &v25[32 * ((v19 - v21) >> 5)];
  *(void *)long long v26 = a2;
  *((void *)v26 + 1) = a3;
  *((_OWORD *)v26 + 3) = v33;
  *((_OWORD *)v26 + 4) = v34;
  *((void *)v26 + 10) = v35;
  *((_OWORD *)v26 + 1) = v31;
  *((_OWORD *)v26 + 2) = v32;
  *((_DWORD *)v26 + 22) = v17;
  uint64_t v20 = v26 + 96;
  if (v19 != v21)
  {
    do
    {
      long long v27 = *((_OWORD *)v19 - 5);
      *((_OWORD *)v26 - 6) = *((_OWORD *)v19 - 6);
      *((_OWORD *)v26 - 5) = v27;
      long long v28 = *((_OWORD *)v19 - 4);
      long long v29 = *((_OWORD *)v19 - 3);
      long long v30 = *((_OWORD *)v19 - 1);
      *((_OWORD *)v26 - 2) = *((_OWORD *)v19 - 2);
      *((_OWORD *)v26 - 1) = v30;
      *((_OWORD *)v26 - 4) = v28;
      *((_OWORD *)v26 - 3) = v29;
      v26 -= 96;
      v19 -= 96;
    }
    while (v19 != v21);
    unsigned int v19 = (char *)*((void *)a1 + 10);
  }
  *((void *)a1 + 10) = v26;
  *((void *)a1 + 11) = v20;
  *((void *)a1 + 12) = &v25[96 * v24];
  if (v19) {
    operator delete(v19);
  }
LABEL_35:
  *((void *)a1 + 11) = v20;
}

void *sub_1CCEE66D0(void *result)
{
  result[8] = result[7];
  uint64_t v1 = result[11];
  if (result[10] != v1)
  {
    __n128 v2 = result;
    uint64_t v3 = (uint64_t)(result + 1);
    while (1)
    {
      sub_1CCEE698C((uint64_t)v26, (unint64_t *)(v1 - 96));
      uint64_t v4 = *(void *)(v1 - 80);
      if ((v4 & 6) != 0)
      {
        if (((v4 ^ v28) & 6) != 0)
        {
LABEL_5:
          uint64_t v5 = v2[11];
          uint64_t v6 = v5 - 80;
          v26[0] = *(_OWORD *)(v5 - 80);
          long long v8 = *(_OWORD *)(v5 - 48);
          long long v7 = *(_OWORD *)(v5 - 32);
          long long v9 = *(_OWORD *)(v5 - 64);
          uint64_t v27 = *(void *)(v5 - 16);
          v26[2] = v8;
          v26[3] = v7;
          v26[1] = v9;
          sub_1CD4BA460((unint64_t *)(v5 - 80));
          sub_1CCEE6BBC(v6);
          sub_1CD4BA2AC((uint64_t)v26);
        }
      }
      else if (*(_DWORD *)(v1 - 64) != v29)
      {
        goto LABEL_5;
      }
      uint64_t v11 = v2[10];
      uint64_t v10 = v2[11];
      v26[0] = *(_OWORD *)(v10 - 96);
      unsigned int v12 = *(_DWORD *)(v10 - 8);
      v2[11] = v10 - 96;
      if (v11 != v10 - 96 && *(_DWORD *)(v10 - 104) > v12) {
        *(_DWORD *)(v10 - 104) = v12;
      }
      BOOL result = sub_1CD57E864(v3, (uint64_t *)v26);
      if (v12 == *((_DWORD *)result + 4)) {
        break;
      }
      uint64_t v1 = v2[11];
      if (v2[10] == v1) {
        return result;
      }
    }
    uint64_t v13 = (uint64_t *)v2[8];
    do
    {
      unint64_t v14 = (_OWORD *)(v2[5] - 16);
      unint64_t v15 = v2[9];
      if ((unint64_t)v13 >= v15)
      {
        int v17 = (uint64_t *)v2[7];
        uint64_t v18 = ((char *)v13 - (char *)v17) >> 4;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 60) {
          abort();
        }
        uint64_t v20 = v15 - (void)v17;
        if (v20 >> 3 > v19) {
          unint64_t v19 = v20 >> 3;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21)
        {
          if (v21 >> 60) {
            sub_1CB833614();
          }
          unint64_t v22 = (char *)operator new(16 * v21);
        }
        else
        {
          unint64_t v22 = 0;
        }
        unint64_t v23 = &v22[16 * v18];
        *(_OWORD *)unint64_t v23 = *v14;
        unint64_t v24 = v23;
        if (v13 != v17)
        {
          do
          {
            *((_OWORD *)v24 - 1) = *((_OWORD *)v13 - 1);
            v24 -= 16;
            v13 -= 2;
          }
          while (v13 != v17);
          uint64_t v13 = (uint64_t *)v2[7];
        }
        unint64_t v16 = (uint64_t *)(v23 + 16);
        v2[7] = v24;
        v2[8] = v23 + 16;
        v2[9] = &v22[16 * v21];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *(_OWORD *)uint64_t v13 = *v14;
        unint64_t v16 = v13 + 2;
      }
      v2[8] = v16;
      v2[5] -= 16;
      BOOL result = sub_1CD57E864(v3, v16 - 2);
      *((_DWORD *)result + 4) = -1;
      uint64_t v13 = (uint64_t *)v2[8];
    }
    while (*(v13 - 2) != *(void *)&v26[0] || *(v13 - 1) != *((void *)&v26[0] + 1));
  }
  return result;
}

double sub_1CCEE698C(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = a2[1];
  sub_1CD4BA334((uint64_t)&v23, *a2);
  unint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  uint64_t v7 = *(void *)*a2;
  uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFFF8) + 40);
  if (v8 == (v7 & 0xFFFFFFFFFFFFFFF8) + 40)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = v8 - 24;
    if (v8) {
      uint64_t v12 = v8 - 24;
    }
    else {
      uint64_t v12 = 0;
    }
    int v13 = *(unsigned __int8 *)(v12 + 16);
    int v14 = v13 - 29;
    if (v13 != 30)
    {
      unsigned int v22 = 0;
      switch(v14)
      {
        case 0:
        case 5:
        case 6:
          goto LABEL_10;
        case 1:
          __break(1u);
          goto LABEL_19;
        case 2:
          unsigned int v22 = (*(_DWORD *)(v12 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_10;
        case 3:
        case 9:
          unsigned int v22 = (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_10;
        case 4:
          unsigned int v22 = 2;
          goto LABEL_10;
        case 7:
LABEL_19:
          unsigned int v22 = *(_WORD *)(v12 + 18) & 1;
          goto LABEL_10;
        case 8:
          unsigned int v22 = 1;
          goto LABEL_10;
        case 10:
          unsigned int v22 = *(_DWORD *)(v12 + 80) + 1;
          goto LABEL_10;
        default:
          goto LABEL_12;
      }
    }
    if ((*(_DWORD *)(v12 + 20) & 0x7FFFFFF) == 3) {
      unsigned int v22 = 2;
    }
    else {
      unsigned int v22 = 1;
    }
LABEL_10:
    uint64_t v10 = v22;
    uint64_t v9 = v11;
  }
LABEL_12:
  unint64_t v15 = v5 & 0xFFFFFFFFFFFFFFF9 | v7 & 4;
  long long v30 = v23;
  if (v4) {
    unint64_t v16 = sub_1CCEE6B88;
  }
  else {
    unint64_t v16 = sub_1CCEE6BB4;
  }
  *(void *)&long long v31 = v24;
  *((void *)&v31 + 1) = v6;
  *(void *)&long long v32 = v5 & 0xFFFFFFFFFFFFFFF9 | v7 & 4;
  *((void *)&v32 + 1) = v9;
  *(void *)&long long v33 = v10;
  *((void *)&v33 + 1) = v6;
  long long v34 = v16;
  sub_1CCEE6BBC((uint64_t)&v30);
  *(void *)&long long v25 = v15;
  *((void *)&v25 + 1) = v9;
  *(void *)&long long v26 = v10;
  *((void *)&v26 + 1) = v6;
  *(void *)&long long v27 = v15;
  *((void *)&v27 + 1) = v9;
  *(void *)&long long v28 = v10;
  *((void *)&v28 + 1) = v6;
  int v29 = v16;
  sub_1CCEE6BBC((uint64_t)&v25);
  long long v17 = v33;
  *(_OWORD *)(a1 + 32) = v32;
  *(_OWORD *)(a1 + 48) = v17;
  long long v18 = v31;
  *(_OWORD *)a1 = v30;
  *(_OWORD *)(a1 + 16) = v18;
  long long v19 = v25;
  *(_OWORD *)(a1 + 88) = v26;
  double result = *(double *)&v27;
  long long v21 = v28;
  *(_OWORD *)(a1 + 104) = v27;
  *(_OWORD *)(a1 + 120) = v21;
  *(void *)(a1 + 64) = v34;
  *(void *)(a1 + 136) = v29;
  *(_OWORD *)(a1 + 72) = v19;
  return result;
}

uint64_t sub_1CCEE6B88(uint64_t *a1)
{
  return sub_1CD426E14(a1[1], *a1, &v2);
}

uint64_t sub_1CCEE6BB4()
{
  return 1;
}

uint64_t sub_1CCEE6BBC(uint64_t result)
{
  if ((*(void *)result & 6) == 0)
  {
    if (*(_DWORD *)(result + 16) == *(_DWORD *)(result + 48)) {
      return result;
    }
LABEL_5:
    sub_1CD4BA2AC(result);
  }
  if (((*(_DWORD *)(result + 32) ^ *(void *)result) & 6) != 0) {
    goto LABEL_5;
  }
  return result;
}

uint64_t sub_1CCEE6C40(uint64_t a1, char a2)
{
  unint64_t v4 = *(uint64_t **)(*(void *)(a1 + 64) + 8 * *(unsigned int *)(a1 + 72) - 8);
  unint64_t v5 = (char *)(*v4 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v6 = (uint64_t *)(a1 + 624);
  v41[0] = v5;
  uint64_t v43 = 0;
  if (sub_1CD3C8538((uint64_t *)(a1 + 624), v41, &v43))
  {
    if ((sub_1CCEE78C4(a1, *v4) & 1) == 0) {
      unint64_t v5 = (char *)sub_1CCEE79F4(a1, 1);
    }
    v41[0] = (const char *)(*v4 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v8 = sub_1CC025000(v6, v41)[1];
    sub_1CCEE73C8(a1, 0);
    while (1)
    {
      uint64_t v10 = *(void *)(a1 + 144);
      uint64_t v9 = *(void *)(a1 + 152);
      if (v9 == v10)
      {
        uint64_t v11 = *(unsigned int *)(a1 + 164);
        uint64_t v12 = (void *)(v9 + 8 * v11);
        if (v11)
        {
          uint64_t v13 = 0;
          uint64_t v14 = 8 * v11;
          while (*(void *)(v9 + v13) != v8)
          {
            v13 += 8;
            if (v14 == v13) {
              goto LABEL_24;
            }
          }
          uint64_t v12 = (void *)(v9 + v13);
        }
LABEL_24:
        uint64_t v10 = *(void *)(a1 + 152);
      }
      else
      {
        uint64_t v15 = *(unsigned int *)(a1 + 160);
        int v16 = v15 - 1;
        unsigned int v17 = (v15 - 1) & ((v8 >> 4) ^ (v8 >> 9));
        uint64_t v12 = (void *)(v9 + 8 * v17);
        uint64_t v18 = *v12;
        if (*v12 == -1)
        {
          long long v19 = 0;
LABEL_31:
          if (v19) {
            uint64_t v12 = v19;
          }
          if (*v12 != v8) {
            uint64_t v12 = (void *)(v9 + 8 * v15);
          }
        }
        else
        {
          long long v19 = 0;
          int v20 = 1;
          while (v18 != v8)
          {
            if (v19) {
              BOOL v21 = 0;
            }
            else {
              BOOL v21 = v18 == -2;
            }
            if (v21) {
              long long v19 = v12;
            }
            unsigned int v22 = v17 + v20++;
            unsigned int v17 = v22 & v16;
            uint64_t v12 = (void *)(v9 + 8 * (v22 & v16));
            uint64_t v18 = *v12;
            if (*v12 == -1) {
              goto LABEL_31;
            }
          }
        }
      }
      if (v9 == v10) {
        long long v23 = (unsigned int *)(a1 + 164);
      }
      else {
        long long v23 = (unsigned int *)(a1 + 160);
      }
      if (v12 != (void *)(v9 + 8 * *v23))
      {
        uint64_t v24 = *(void **)(*((void *)v5 + 7) + 80);
        if (v24) {
          long long v25 = (char *)(v24 - 3);
        }
        else {
          long long v25 = 0;
        }
        if (v5 != v25)
        {
          unint64_t v26 = sub_1CCEE79F4(a1, 0);
          sub_1CCEE7AE8(a1, v26, a2);
        }
        v41[0] = "entry.orig";
        __int16 v42 = 259;
        llvm::Value::setNameImpl((llvm::Value *)v5, v41);
        if (!v5[16])
        {
          if ((v5[23] & 0x10) == 0) {
            goto LABEL_57;
          }
          uint64_t v27 = ***(void ***)v5;
          uint64_t v28 = *(void *)(v27 + 152);
          uint64_t v29 = *(unsigned int *)(v27 + 168);
          if (v29)
          {
            LODWORD(v30) = (v29 - 1) & ((v5 >> 4) ^ (v5 >> 9));
            long long v31 = (char **)(v28 + 16 * v30);
            long long v32 = *v31;
            if (*v31 != v5)
            {
              int v33 = 1;
              do
              {
                if (v32 == (char *)-4096) {
                  goto LABEL_49;
                }
                int v34 = v30 + v33++;
                uint64_t v30 = v34 & (v29 - 1);
                long long v32 = *(char **)(v28 + 16 * v30);
              }
              while (v32 != v5);
              long long v31 = (char **)(v28 + 16 * v30);
            }
          }
          else
          {
LABEL_49:
            long long v31 = (char **)(v28 + 16 * v29);
          }
          uint64_t v35 = v31[1];
          unint64_t v38 = *(void *)v35;
          long long v36 = v35 + 16;
          unint64_t v37 = v38;
          if (v38 >= 5 && (*(_DWORD *)v36 == *(_DWORD *)"llvm." ? (BOOL v39 = v36[4] == aLlvm_1[4]) : (BOOL v39 = 0), v39))
          {
            *((_DWORD *)v5 + 8) |= 0x2000u;
            int v40 = llvm::Function::lookupIntrinsicID(v36, v37);
          }
          else
          {
LABEL_57:
            int v40 = 0;
            *((_DWORD *)v5 + 8) &= ~0x2000u;
          }
          *((_DWORD *)v5 + 9) = v40;
        }
        v41[0] = "entry";
        __int16 v42 = 259;
        operator new();
      }
      sub_1CCEE6C40(a1, 0, v8);
    }
  }
  return sub_1CCEE73C8(a1, a2);
}

uint64_t sub_1CCEE70AC(uint64_t result, uint64_t *a2, llvm::BasicBlock *a3, int a4)
{
  uint64_t v6 = result;
  uint64_t v7 = *a2;
  if ((*a2 & 4) != 0)
  {
    for (uint64_t i = *(void *)(a2[4] + 8); i; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v11 = *(void *)(i + 24);
      unsigned int v12 = *(unsigned __int8 *)(v11 + 16);
      if (v11) {
        BOOL v13 = v12 >= 0x1C;
      }
      else {
        BOOL v13 = 0;
      }
      if (v13 && v12 - 29 < 0xB)
      {
        do
        {
          uint64_t i = *(void *)(i + 8);
          if (!i) {
            break;
          }
          uint64_t v15 = *(void *)(i + 24);
          unsigned int v16 = *(unsigned __int8 *)(v15 + 16);
          BOOL v17 = v15 && v16 >= 0x1C;
        }
        while (!v17 || v16 - 29 > 0xA);
        llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains();
      }
    }
    a2[4] = (uint64_t)a3;
  }
  else
  {
    uint64_t v8 = (llvm::BasicBlock *)(v7 & 0xFFFFFFFFFFFFFFF8);
    sub_1CCEE7E04(result, v7 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v9 = operator new(0x60uLL);
    v9[13] = v9[13] & 0x38000000 | 1;
    *(void *)uint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = 0;
    *((void *)v9 + 3) = v9 + 8;
    llvm::BranchInst::BranchInst((llvm::BranchInst *)(v9 + 8), a3, v8);
    double result = sub_1CCEE7B74(v6, v8, (uint64_t)a3);
    if (a4)
    {
      llvm::DominatorTreeBase<llvm::BasicBlock,false>::changeImmediateDominator();
    }
  }
  return result;
}

uint64_t sub_1CCEE73C8(uint64_t a1, char a2)
{
  uint64_t v5 = *(void *)(a1 + 144);
  uint64_t v4 = a1 + 144;
  uint64_t v6 = *(unsigned int *)(v4 - 72);
  uint64_t v7 = *(uint64_t **)(*(void *)(v4 - 80) + 8 * v6 - 8);
  *(_DWORD *)(v4 - 72) = v6 - 1;
  unint64_t v8 = *v7 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(v4 + 8);
  uint64_t v11 = (_DWORD *)(v4 + 20);
  uint64_t v10 = *(unsigned int *)(v4 + 20);
  if (v9 != v5)
  {
    unsigned int v15 = *(_DWORD *)(a1 + 160);
    goto LABEL_12;
  }
  if (!v10)
  {
LABEL_9:
    unsigned int v15 = *(_DWORD *)(a1 + 160);
    if (v10 < v15)
    {
      *uint64_t v11 = v10 + 1;
      *(void *)(v9 + 8 * v10) = v8;
      goto LABEL_33;
    }
LABEL_12:
    if (3 * v15 <= 4 * ((int)v10 - *(_DWORD *)(a1 + 168)))
    {
      if (v15 >= 0x40) {
        v15 *= 2;
      }
      else {
        unsigned int v15 = 128;
      }
    }
    else if (v15 - v10 >= v15 >> 3)
    {
      goto LABEL_14;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v4, v15);
    unsigned int v15 = *(_DWORD *)(a1 + 160);
    uint64_t v9 = *(void *)(a1 + 152);
LABEL_14:
    unsigned int v16 = v15 - 1;
    unsigned int v17 = (v15 - 1) & ((v8 >> 4) ^ (v8 >> 9));
    uint64_t v18 = (unint64_t *)(v9 + 8 * v17);
    unint64_t v19 = *v18;
    if (*v18 == -1)
    {
      int v20 = 0;
LABEL_26:
      if (v20) {
        uint64_t v24 = v20;
      }
      else {
        uint64_t v24 = v18;
      }
      if (*v24 != v8)
      {
        if (*v24 == -2) {
          --*(_DWORD *)(a1 + 168);
        }
        else {
          ++*v11;
        }
        *uint64_t v24 = v8;
      }
    }
    else
    {
      int v20 = 0;
      int v21 = 1;
      while (v19 != v8)
      {
        if (v20) {
          BOOL v22 = 0;
        }
        else {
          BOOL v22 = v19 == -2;
        }
        if (v22) {
          int v20 = v18;
        }
        unsigned int v23 = v17 + v21++;
        unsigned int v17 = v23 & v16;
        uint64_t v18 = (unint64_t *)(v9 + 8 * (v23 & v16));
        unint64_t v19 = *v18;
        if (*v18 == -1) {
          goto LABEL_26;
        }
      }
    }
    goto LABEL_33;
  }
  unsigned int v12 = 0;
  uint64_t v13 = 8 * v10;
  uint64_t v14 = *(unint64_t **)(v4 + 8);
  while (*v14 != v8)
  {
    if (*v14 == -2) {
      unsigned int v12 = v14;
    }
    ++v14;
    v13 -= 8;
    if (!v13)
    {
      if (!v12) {
        goto LABEL_9;
      }
      *unsigned int v12 = v8;
      --*(_DWORD *)(a1 + 168);
      break;
    }
  }
LABEL_33:
  uint64_t result = sub_1CCEE78C4(a1, *v7);
  if (!result)
  {
    unint64_t v27 = sub_1CCEE79F4(a1, 0);
    sub_1CCEE7AE8(a1, v27, a2);
  }
  unint64_t v26 = *(uint64_t **)(a1 + 752);
  if (v26) {
    uint64_t result = sub_1CCEE70AC(a1, v26, (llvm::BasicBlock *)(*v7 & 0xFFFFFFFFFFFFFFF8), 1);
  }
  *(void *)(a1 + 752) = v7;
  return result;
}

uint64_t sub_1CCEE78C4(uint64_t a1, uint64_t a2)
{
  unint64_t v10 = a2 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v3 = sub_1CD748FA4(a1 + 520, (uint64_t *)&v10);
  if (*(void *)(a1 + 752))
  {
    uint64_t v4 = v3[1];
    uint64_t v5 = *((unsigned int *)v3 + 6);
    if (*((_DWORD *)v3 + 4))
    {
      if (v5)
      {
        uint64_t v6 = 16 * v5;
        uint64_t v7 = (void *)v3[1];
        while ((*v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v7 += 2;
          v6 -= 16;
          if (!v6) {
            goto LABEL_7;
          }
        }
      }
      else
      {
        uint64_t v7 = (void *)v3[1];
      }
    }
    else
    {
LABEL_7:
      uint64_t v7 = (void *)(v4 + 16 * v5);
    }
    if (v7 != (void *)(v4 + 16 * v5) && v7[1] == *(void *)(a1 + 8)) {
      llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
    }
    char v8 = 0;
  }
  else
  {
    char v8 = 1;
  }
  return v8 & 1;
}

unint64_t sub_1CCEE79F4(uint64_t a1, int a2)
{
  uint64_t v2 = **(void **)(a1 + 752);
  unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFF8;
  if ((v2 & 4) != 0) {
    goto LABEL_16;
  }
  sub_1CCEE7E04(a1, v2 & 0xFFFFFFFFFFFFFFF8);
  if (a2)
  {
    unint64_t v5 = v3 + 40;
    for (uint64_t i = *(void *)(v3 + 48); ; uint64_t i = *(void *)(i + 8))
    {
      if (i == v5) {
        return v3;
      }
      uint64_t v7 = i - 24;
      if (!i) {
        uint64_t v7 = 0;
      }
      if (*(unsigned char *)(v7 + 16) != 83) {
        break;
      }
    }
    unsigned int v8 = *(unsigned __int8 *)(i - 8) - 38;
    BOOL v9 = v8 > 0x38;
    uint64_t v10 = (1 << v8) & 0x100060000000001;
    if (!v9 && v10 != 0) {
      uint64_t i = *(void *)(i + 8);
    }
    if (v5 != i) {
LABEL_16:
    }
      sub_1CCEE8000();
  }
  return v3;
}

void sub_1CCEE7AE8(uint64_t a1, uint64_t a2, char a3)
{
  if (!*(_DWORD *)(a1 + 72) && (a3 & 1) != 0) {
    llvm::DominatorTreeBase<llvm::BasicBlock,false>::changeImmediateDominator();
  }

  sub_1CCEE8000();
}

uint64_t sub_1CCEE7B74(uint64_t a1, llvm::Type *a2, uint64_t a3)
{
  uint64_t v37 = a3;
  if (*(void *)(a3 + 40) != a3 + 40)
  {
    uint64_t v4 = *(void *)(a3 + 48);
    uint64_t v5 = v4 - 24;
    uint64_t v6 = v4 ? v4 - 24 : 0;
    if (v4 && *(unsigned char *)(v6 + 16) == 83)
    {
      do
      {
        uint64_t v7 = llvm::UndefValue::get(*(llvm::UndefValue **)v5, a2);
        int v8 = *(_DWORD *)(v5 + 20);
        uint64_t v9 = v8 & 0x7FFFFFF;
        if ((v8 & 0x7FFFFFF) == *(_DWORD *)(v5 + 60))
        {
          unsigned int v24 = v9 + (v9 >> 1);
          if (v24 <= 2) {
            uint64_t v25 = 2;
          }
          else {
            uint64_t v25 = v24;
          }
          *(_DWORD *)(v5 + 60) = v25;
          if ((v8 & 0x40000000) != 0) {
            unint64_t v26 = *(uint64_t **)(v5 - 8);
          }
          else {
            unint64_t v26 = (uint64_t *)(v5 - 32 * v9);
          }
          unint64_t v27 = operator new(40 * v25);
          *(void *)(v5 - 8) = v27;
          uint64_t v28 = v27;
          do
          {
            *uint64_t v28 = 0;
            v28[1] = 0;
            v28[2] = 0;
            v28[3] = v5;
            v28 += 4;
          }
          while (v28 != &v27[4 * v25]);
          int v29 = *(_DWORD *)(v5 + 20);
          if ((v29 & 0x40000000) != 0) {
            uint64_t v30 = (uint64_t)v27;
          }
          else {
            uint64_t v30 = v5 - 32 * (v29 & 0x7FFFFFF);
          }
          sub_1CC5E4108((uint64_t)&v38, v26, &v26[4 * v9], v30);
          if (v9)
          {
            memmove((void *)(v30 + 32 * v25), &v26[4 * v9], 8 * v9);
            uint64_t v31 = 4 * v9;
            do
            {
              long long v32 = &v26[v31];
              if (v26[v31 - 4])
              {
                *(void *)*(v32 - 2) = *(v32 - 3);
                uint64_t v33 = *(v32 - 3);
                if (v33) {
                  *(void *)(v33 + 16) = *(v32 - 2);
                }
              }
              v31 -= 4;
            }
            while (v31 * 8);
          }
          operator delete(v26);
          int v8 = *(_DWORD *)(v5 + 20);
        }
        uint64_t v10 = (v8 + 1) & 0x7FFFFFF;
        *(_DWORD *)(v5 + 20) = v8 & 0xF8000000 | (v8 + 1) & 0x7FFFFFF;
        if ((v8 & 0x40000000) != 0) {
          uint64_t v11 = *(void *)(v5 - 8);
        }
        else {
          uint64_t v11 = v5 - 32 * v10;
        }
        uint64_t v12 = (v10 - 1);
        uint64_t v13 = v11 + 32 * v12;
        if (*(void *)v13)
        {
          **(void **)(v13 + 16) = *(void *)(v13 + 8);
          uint64_t v23 = *(void *)(v13 + 8);
          if (v23) {
            *(void *)(v23 + 16) = *(void *)(v13 + 16);
          }
        }
        *(void *)uint64_t v13 = v7;
        if (v7)
        {
          uint64_t v16 = *((void *)v7 + 1);
          unsigned int v15 = (void *)((char *)v7 + 8);
          uint64_t v14 = v16;
          uint64_t v17 = v11 + 32 * v12;
          *(void *)(v17 + 8) = v16;
          if (v16) {
            *(void *)(v14 + 16) = v17 + 8;
          }
          *(void *)(v17 + 16) = v15;
          *unsigned int v15 = v13;
        }
        int v18 = *(_DWORD *)(v5 + 20);
        uint64_t v19 = v18 & 0x7FFFFFF;
        if ((v18 & 0x40000000) != 0) {
          uint64_t v20 = *(void *)(v5 - 8);
        }
        else {
          uint64_t v20 = v5 - 32 * v19;
        }
        *(void *)(v20 + 32 * *(unsigned int *)(v5 + 60) + 8 * (v19 - 1)) = a2;
        uint64_t v21 = *(void *)(v5 + 32);
        uint64_t v5 = v21 - 24;
        if (v21) {
          uint64_t v22 = v21 - 24;
        }
        else {
          uint64_t v22 = 0;
        }
      }
      while (v21 && *(unsigned char *)(v22 + 16) == 83);
    }
  }
  uint64_t result = sub_1CD786128(a1 + 472, &v37);
  unsigned int v35 = *(_DWORD *)(result + 8);
  if (v35 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)result + 8 * v35) = a2;
  ++*(_DWORD *)(result + 8);
  return result;
}

uint64_t sub_1CCEE7E04(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  if (v2 != a2 + 40)
  {
    if (v2) {
      uint64_t v3 = v2 - 24;
    }
    else {
      uint64_t v3 = 0;
    }
    uint64_t v5 = result;
    if (*(unsigned char *)(v3 + 16) != 30)
    {
      int v17 = 2;
      switch(*(unsigned char *)(v3 + 16))
      {
        case 0x1D:
        case 0x22:
        case 0x23:
          goto LABEL_12;
        case 0x1E:
          __break(1u);
          goto LABEL_27;
        case 0x1F:
          int v17 = (*(_DWORD *)(v3 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_24;
        case 0x20:
        case 0x26:
          int v17 = (*(_DWORD *)(v3 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_24;
        case 0x21:
          goto LABEL_10;
        case 0x24:
LABEL_27:
          int v17 = *(_WORD *)(v3 + 18) & 1;
          goto LABEL_24;
        case 0x25:
          int v17 = 1;
          goto LABEL_10;
        case 0x27:
          int v17 = *(_DWORD *)(v3 + 80) + 1;
LABEL_24:
          if (!v17) {
            goto LABEL_12;
          }
          goto LABEL_10;
        default:
          return result;
      }
    }
    if ((*(_DWORD *)(v3 + 20) & 0x7FFFFFF) == 3) {
      int v17 = 2;
    }
    else {
      int v17 = 1;
    }
LABEL_10:
    for (unsigned int i = 0; i != v17; ++i)
    {
      uint64_t Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v3, i);
      sub_1CCEE815C((unsigned int *)v5, a2, Successor);
    }
LABEL_12:
    int v8 = *(int32x2_t **)(v5 + 48);
    if (v8)
    {
      __int32 v9 = v8[7].i32[0];
      if (v9)
      {
        int32x2_t v10 = v8[5];
        __int32 v11 = v9 - 1;
        LODWORD(v12) = (v9 - 1) & ((v3 >> 4) ^ (v3 >> 9));
        uint64_t v13 = (uint64_t *)(*(void *)&v10 + 8 * v12);
        uint64_t v14 = *v13;
        if (v3 != *v13)
        {
          int v15 = 1;
          do
          {
            if (v14 == -4096) {
              goto LABEL_20;
            }
            int v16 = v12 + v15++;
            uint64_t v12 = v16 & v11;
            uint64_t v14 = *(void *)(*(void *)&v10 + 8 * v12);
          }
          while (v3 != v14);
          uint64_t v13 = (uint64_t *)(*(void *)&v10 + 8 * v12);
        }
        uint64_t *v13 = -8192;
        v8[6] = vadd_s32(v8[6], (int32x2_t)0x1FFFFFFFFLL);
      }
    }
LABEL_20:
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  return result;
}

void sub_1CCEE8000()
{
  uint64_t v0 = "Flow";
  __int16 v1 = 259;
  operator new();
}

void sub_1CCEE815C(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v52 = a3;
  uint64_t v6 = sub_1CD785CEC((uint64_t)(a1 + 112), &v52);
  if (*(void *)(a3 + 40) != a3 + 40)
  {
    uint64_t v7 = *(void *)(a3 + 48);
    uint64_t v8 = v7 - 24;
    uint64_t v9 = v7 ? v7 - 24 : 0;
    if (v7 && *(unsigned char *)(v9 + 16) == 83)
    {
      uint64_t v10 = (uint64_t)(v6 + 1);
      __int32 v11 = (unint64_t *)(a1 + 60);
      while (1)
      {
        int v12 = *(_DWORD *)(v8 + 20);
        unsigned int v13 = v12 & 0x7FFFFFF;
        if ((v12 & 0x7FFFFFF) != 0) {
          break;
        }
LABEL_57:
        uint64_t v47 = *(void *)(v8 + 32);
        uint64_t v8 = v47 - 24;
        if (v47) {
          uint64_t v48 = v47 - 24;
        }
        else {
          uint64_t v48 = 0;
        }
        if (!v47 || *(unsigned char *)(v48 + 16) != 83) {
          return;
        }
      }
      char v14 = 0;
      while (1)
      {
        unsigned int v15 = 0;
        uint64_t v16 = *(unsigned int *)(v8 + 60);
        while (1)
        {
          uint64_t v17 = v8 - 32 * v13;
          if ((v12 & 0x40000000) != 0) {
            uint64_t v17 = *(void *)(v8 - 8);
          }
          if (*(void *)(v17 + 32 * v16 + 8 * v15) == a2) {
            break;
          }
          if (v13 == ++v15) {
            goto LABEL_57;
          }
        }
        if (v15 == -1) {
          goto LABEL_57;
        }
        uint64_t v18 = 0;
        uint64_t v19 = 32 * v16;
        while (1)
        {
          uint64_t v20 = v8 - 32 * v13;
          if ((v12 & 0x40000000) != 0) {
            uint64_t v20 = *(void *)(v8 - 8);
          }
          if (*(void *)(v20 + v19 + 8 * v18) == a2) {
            break;
          }
          if (v13 == ++v18)
          {
            LODWORD(v18) = -1;
            break;
          }
        }
        uint64_t v21 = llvm::PHINode::removeIncomingValue((llvm::PHINode *)v8, v18, 0);
        uint64_t v49 = v8;
        uint64_t v22 = sub_1CD785BD0(v10, &v49);
        unint64_t v23 = *(unsigned int *)(v22 + 8);
        if (v23 >= *(unsigned int *)(v22 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unsigned int v24 = (void *)(*(void *)v22 + 16 * v23);
        *unsigned int v24 = a2;
        v24[1] = v21;
        ++*(_DWORD *)(v22 + 8);
        if ((v14 & 1) == 0) {
          break;
        }
LABEL_25:
        int v12 = *(_DWORD *)(v8 + 20);
        char v14 = 1;
        unsigned int v13 = v12 & 0x7FFFFFF;
        if ((v12 & 0x7FFFFFF) == 0) {
          goto LABEL_57;
        }
      }
      uint64_t v49 = 4;
      int v50 = 0;
      int v51 = (int32x2_t ****)v8;
      if (v8 != -8192 && v8 != -4096 && v8) {
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v49);
      }
      uint64_t v25 = a1[62];
      unint64_t v26 = *((void *)a1 + 30);
      if (v25 >= a1[63])
      {
        unint64_t v44 = v25 + 1;
        BOOL v45 = v26 + 24 * v25 > (unint64_t)&v49;
        if (v26 <= (unint64_t)&v49 && v45)
        {
          uint64_t v46 = (char *)&v49 - v26;
          sub_1CC0BD844(a1 + 60, v44);
          unint64_t v26 = *v11;
          unint64_t v27 = (uint64_t *)&v46[*v11];
          goto LABEL_33;
        }
        sub_1CC0BD844(a1 + 60, v44);
        unint64_t v26 = *v11;
      }
      unint64_t v27 = &v49;
LABEL_33:
      unsigned int v28 = a1[62];
      int v29 = (unint64_t *)(v26 + 24 * v28);
      *int v29 = 4;
      v29[1] = 0;
      uint64_t v30 = v27[2];
      void v29[2] = v30;
      if (v30 != -8192 && v30 != -4096)
      {
        if (v30)
        {
          unint64_t v31 = *v27 & 0xFFFFFFFFFFFFFFF8;
          v29[1] = *(void *)v31;
          *(void *)unint64_t v31 = v29;
          *int v29 = v31 | 4;
          long long v32 = (unint64_t *)v29[1];
          if (v32) {
            *long long v32 = *v32 & 7 | (unint64_t)(v29 + 1);
          }
        }
      }
      a1[62] = v28 + 1;
      if (v51 != (int32x2_t ****)-8192 && v51 != (int32x2_t ****)-4096 && v51)
      {
        unint64_t v33 = v49 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v49 & 0xFFFFFFFFFFFFFFF8) = v50;
        if (v50)
        {
          unint64_t *v50 = *v50 & 7 | v33;
        }
        else
        {
          int v34 = v51;
          unsigned int v35 = ***v51;
          unint64_t v36 = (unint64_t)v35[303];
          if (v36 <= v33)
          {
            uint64_t v37 = v35[305].u32[0];
            if (v36 + 16 * v37 > v33)
            {
              unsigned int v38 = v37 - 1;
              LODWORD(v39) = v38 & ((v51 >> 4) ^ (v51 >> 9));
              int v40 = (int32x2_t *****)(v36 + 16 * v39);
              uint64_t v41 = *v40;
              if (v51 == *v40)
              {
LABEL_49:
                *int v40 = (int32x2_t ****)-8192;
                v35[304] = vadd_s32(v35[304], (int32x2_t)0x1FFFFFFFFLL);
                int v34 = v51;
              }
              else
              {
                int v42 = 1;
                while (v41 != (int32x2_t ****)-4096)
                {
                  int v43 = v39 + v42++;
                  uint64_t v39 = v43 & v38;
                  uint64_t v41 = *(int32x2_t *****)(v36 + 16 * v39);
                  if (v51 == v41)
                  {
                    int v40 = (int32x2_t *****)(v36 + 16 * v39);
                    goto LABEL_49;
                  }
                }
              }
              *((unsigned char *)v34 + 17) &= ~1u;
            }
          }
        }
      }
      goto LABEL_25;
    }
  }
}

void sub_1CCEE8500(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v5 = (void *)a1[1];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v5 - *a1) >> 3);
    if ((unint64_t)(v7 + 1) > 0x492492492492492) {
      abort();
    }
    unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4 - *a1) >> 3);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= v7 + 1) {
      uint64_t v9 = v7 + 1;
    }
    if (v8 >= 0x249249249249249) {
      unint64_t v10 = 0x492492492492492;
    }
    else {
      unint64_t v10 = v9;
    }
    uint64_t v21 = a1 + 2;
    if (v10 > 0x492492492492492) {
      sub_1CB833614();
    }
    uint64_t v11 = 56 * v10;
    int v12 = (char *)operator new(56 * v10);
    unsigned int v13 = &v12[56 * v7];
    __p = v12;
    uint64_t v18 = v13;
    uint64_t v20 = &v12[v11];
    *(void *)unsigned int v13 = *(void *)a2;
    *((void *)v13 + 1) = v13 + 24;
    *((void *)v13 + 2) = 0x200000000;
    if (*(_DWORD *)(a2 + 16)) {
      sub_1CD4BAB44((uint64_t)(v13 + 8), a2 + 8);
    }
    uint64_t v19 = v13 + 56;
    sub_1CD786050(a1, &__p);
    uint64_t v6 = (void *)a1[1];
    char v14 = v18;
    for (unsigned int i = v19; i != v14; i -= 56)
    {
      uint64_t v16 = (char *)*((void *)i - 6);
      if (i - 32 != v16) {
        free(v16);
      }
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else
  {
    void *v5 = *(void *)a2;
    v5[1] = v5 + 3;
    void v5[2] = 0x200000000;
    if (*(_DWORD *)(a2 + 16)) {
      sub_1CD4BAB44((uint64_t)(v5 + 1), a2 + 8);
    }
    uint64_t v6 = v5 + 7;
  }
  a1[1] = (uint64_t)v6;
}

void *sub_1CCEE86A8(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1CBAEE424(a1, v7);
      uint64_t v17 = 0;
      sub_1CB834D78((uint64_t *)a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    uint64_t v8 = *a4;
    goto LABEL_5;
  }
  sub_1CBAEE424(a1, 2 * v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (void *)(*(void *)a1 + 16 * v11);
  uint64_t v12 = *a4;
  if (*a3 != *a4)
  {
    unsigned int v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        unsigned int v13 = a4;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a4 = (void *)(*(void *)a1 + 16 * v11);
      uint64_t v12 = *a4;
      if (v8 == *a4) {
        goto LABEL_5;
      }
    }
    if (v13) {
      a4 = v13;
    }
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void sub_1CCEE87DC(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[2];
  unint64_t v5 = a1[1];
  if (v5 >= v4)
  {
    uint64_t v11 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v5 - *a1) >> 3);
    if ((unint64_t)(v11 + 1) > 0x2E8BA2E8BA2E8BALL) {
      abort();
    }
    unint64_t v12 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v4 - *a1) >> 3);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= v11 + 1) {
      uint64_t v13 = v11 + 1;
    }
    if (v12 >= 0x1745D1745D1745DLL) {
      unint64_t v14 = 0x2E8BA2E8BA2E8BALL;
    }
    else {
      unint64_t v14 = v13;
    }
    int v29 = a1 + 2;
    if (v14 > 0x2E8BA2E8BA2E8BALL) {
      sub_1CB833614();
    }
    uint64_t v15 = 88 * v14;
    unsigned int v16 = (char *)operator new(88 * v14);
    uint64_t v17 = &v16[88 * v11];
    __p = v16;
    unint64_t v26 = v17;
    unsigned int v28 = &v16[v15];
    *(void *)uint64_t v17 = *(void *)a2;
    *((void *)v17 + 1) = v17 + 24;
    uint64_t v18 = v17 + 8;
    *((void *)v17 + 2) = 0x800000000;
    unsigned int v19 = *(_DWORD *)(a2 + 16);
    if (v19 && v18 != (void *)(a2 + 8))
    {
      uint64_t v20 = *(const void **)(a2 + 8);
      if (v20 == (const void *)(a2 + 24))
      {
        if (v19 >= 9)
        {
          *((_DWORD *)v17 + 4) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(v17 + 24, v20, 8 * *(unsigned int *)(a2 + 16));
        *((_DWORD *)v17 + 4) = v19;
      }
      else
      {
        *uint64_t v18 = v20;
        int v24 = *(_DWORD *)(a2 + 20);
        *((_DWORD *)v17 + 4) = v19;
        *((_DWORD *)v17 + 5) = v24;
        *(void *)(a2 + 8) = a2 + 24;
        *(_DWORD *)(a2 + 20) = 0;
      }
      *(_DWORD *)(a2 + 16) = 0;
    }
    unint64_t v27 = v17 + 88;
    sub_1CD78624C(a1, &__p);
    uint64_t v10 = a1[1];
    uint64_t v21 = v26;
    for (unsigned int i = v27; i != v21; i -= 88)
    {
      unint64_t v23 = (char *)*((void *)i - 10);
      if (i - 64 != v23) {
        free(v23);
      }
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else
  {
    *(void *)unint64_t v5 = *(void *)a2;
    *(void *)(v5 + 8) = v5 + 24;
    *(void *)(v5 + 16) = 0x800000000;
    unsigned int v6 = *(_DWORD *)(a2 + 16);
    if (v6) {
      BOOL v7 = v5 == a2;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      uint64_t v8 = *(void *)(a2 + 8);
      uint64_t v9 = (const void *)(a2 + 24);
      if (v8 == a2 + 24)
      {
        if (v6 >= 9) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy((void *)(v5 + 24), v9, 8 * *(unsigned int *)(a2 + 16));
        *(_DWORD *)(v5 + 16) = v6;
      }
      else
      {
        *(void *)(v5 + 8) = v8;
        *(_DWORD *)(v5 + 16) = v6;
        *(_DWORD *)(v5 + 20) = *(_DWORD *)(a2 + 20);
        *(void *)(a2 + 8) = v9;
        *(_DWORD *)(a2 + 20) = 0;
      }
      *(_DWORD *)(a2 + 16) = 0;
    }
    uint64_t v10 = v5 + 88;
  }
  a1[1] = v10;
}

BOOL sub_1CCEE8A90(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[4];
  if (*a1 != v2)
  {
    uint64_t v3 = (void *)a1[1];
    for (unsigned int i = (void *)(v1 + 32); ; i += 4)
    {
      *a1 = (uint64_t)i;
      if (i == v3 || (*i | 0x1000) != 0xFFFFFFFFFFFFF000) {
        break;
      }
    }
  }
  return v1 != v2;
}

BOOL sub_1CCEE8AD8(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = a1[6];
  if (v1 != v2)
  {
    uint64_t v3 = (void *)a1[3];
    for (unsigned int i = (void *)(v1 + 32); ; i += 4)
    {
      a1[2] = i;
      if (i == v3 || (*i | 0x1000) != 0xFFFFFFFFFFFFF000) {
        break;
      }
    }
  }
  return v1 != v2;
}

uint64_t sub_1CCEE8B20()
{
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Force whether the StructurizeCFG pass skips uniform regions";
  v3.n128_u64[1] = 59;
  char v1 = 0;
  uint64_t v2 = &v1;
  sub_1CD786680(&v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCF89B8, &dword_1CB82C000);
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Allow relaxed uniform region checks";
  v3.n128_u64[1] = 35;
  char v1 = 1;
  uint64_t v2 = &v1;
  sub_1CD423628((llvm::cl::Option *)&unk_1EBCF8A78, "structurizecfg-relaxed-uniform-regions", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCF8A78, &dword_1CB82C000);
}

void sub_1CCEE8C04(llvm *a1)
{
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeOptimizationRemarkEmitterWrapperPassPass(a1, v2);
  operator new();
}

uint64_t sub_1CCEE8CAC(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCF8B38;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F2641210;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF8B40, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CCEE8C04;
    v5[1] = &PassRegistry;
    int v4 = v5;
    std::__call_once(&qword_1EBCF8B40, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void llvm::TailCallElimPass::run()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  llvm::AnalysisManager<llvm::Function>::getResultImpl();
}

uint64_t sub_1CCEE8F44(llvm::Function *this, void *a2, uint64_t a3, uint64_t ***a4, llvm::DomTreeUpdater *a5)
{
  v260[34] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *((void *)this + 14);
  if (!v9) {
    goto LABEL_25;
  }
  if (!*(_DWORD *)(v9 + 8)) {
    goto LABEL_25;
  }
  uint64_t v10 = *(void *)(v9 + 40);
  if (!v10) {
    goto LABEL_25;
  }
  int v11 = *(_DWORD *)(v10 + 40);
  if (!v11) {
    goto LABEL_25;
  }
  uint64_t v12 = *(void *)(v10 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCBE588))
  {
    unint64_t v208 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v208 = 0xFF51AFD7ED558CCDLL;
    }
    qword_1EBCBE580 = v208;
    __cxa_guard_release(&qword_1EBCBE588);
  }
  uint64_t v13 = __ROR8__(qword_1EBCBE580 ^ 0xAE2F6180382EB467, 30);
  unint64_t v14 = 0x9DDFEA08EB382D69
      * ((qword_1EBCBE580 + 0x1ED4D83DFEF8CF66) ^ ((0x9DDFEA08EB382D69
                                                    * ((v13 - 0x58DDE70BBE0D1868) ^ (qword_1EBCBE580
                                                                                     + 0x1ED4D83DFEF8CF66))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v13 - 0x58DDE70BBE0D1868) ^ (qword_1EBCBE580 + 0x1ED4D83DFEF8CF66))));
  unsigned int v15 = -348639895 * ((v14 >> 47) ^ v14);
  for (int i = 1; ; ++i)
  {
    unsigned int v17 = v15 & (v11 - 1);
    uint64_t v18 = (uint64_t *)(v12 + 24 * v17);
    uint64_t v19 = *v18;
    if (*v18 == -1)
    {
      if ("disable-tail-calls" == (char *)-1) {
        goto LABEL_23;
      }
      goto LABEL_9;
    }
    if (v19 != -2) {
      break;
    }
    if ("disable-tail-calls" == (char *)-2) {
      goto LABEL_23;
    }
LABEL_9:
    if (v19 == -1) {
      goto LABEL_25;
    }
    unsigned int v15 = i + v17;
  }
  if (v18[1] != 18) {
    goto LABEL_9;
  }
  BOOL v20 = *(void *)v19 == 0x2D656C6261736964 && *(void *)(v19 + 8) == 0x6C61632D6C696174;
  if (!v20 || *(_WORD *)(v19 + 16) != 29548) {
    goto LABEL_9;
  }
LABEL_23:
  uint64_t v22 = v18[2];
  if (v22 && *(_DWORD *)(v22 + 16) == 4 && *(_DWORD *)(v22 + *(unsigned int *)(v22 + 12) + 25) == *(_DWORD *)"true")
  {
    char v26 = 0;
    return v26 & 1;
  }
LABEL_25:
  uint64_t v210 = a3;
  if (llvm::Function::callsFunctionThatReturnsTwice(this))
  {
    char v26 = 0;
    goto LABEL_258;
  }
  uint64_t v224 = v228;
  unsigned int v225 = v228;
  uint64_t v226 = 32;
  LODWORD(v227) = 0;
  uint64_t v239 = v243;
  unint64_t v240 = v243;
  uint64_t v241 = 32;
  int v242 = 0;
  if ((*((unsigned char *)this + 18) & 1) == 0)
  {
    uint64_t v27 = *((void *)this + 11);
    goto LABEL_29;
  }
  llvm::Function::BuildLazyArguments(this);
  uint64_t v27 = *((void *)this + 11);
  if (*((_WORD *)this + 9))
  {
    llvm::Function::BuildLazyArguments(this);
    uint64_t v28 = *((void *)this + 11);
  }
  else
  {
LABEL_29:
    uint64_t v28 = v27;
  }
  uint64_t v29 = v28 + 40 * *((void *)this + 12);
  while (v27 != v29)
  {
    if (*(unsigned char *)(*(void *)v27 + 8) == 15)
    {
      uint64_t v30 = *(void *)(*(void *)(v27 + 24) + 112);
      if (v30)
      {
        unsigned int v31 = *(_DWORD *)(v27 + 32) + 2;
        if (v31 < *(_DWORD *)(v30 + 8))
        {
          uint64_t v32 = *(void *)(v30 + 8 * v31 + 40);
          if (v32)
          {
            if ((*(unsigned char *)(v32 + 20) & 0x20) != 0) {
              sub_1CCEEACB4((uint64_t)&v224, *(void *)(v27 + 8));
            }
          }
        }
      }
    }
    v27 += 40;
  }
  unsigned int v209 = a4;
  unint64_t v33 = (char *)this + 72;
  int v34 = (char *)*((void *)this + 10);
  if (v34 != (char *)this + 72)
  {
    do
    {
      unsigned int v35 = v34 - 24;
      if (!v34) {
        unsigned int v35 = 0;
      }
      unint64_t v36 = v35 + 40;
      for (unsigned int j = (void *)*((void *)v35 + 6); j != v36; unsigned int j = (void *)j[1])
      {
        if (j && *((unsigned char *)j - 8) == 59) {
          sub_1CCEEACB4((uint64_t)&v224, *(j - 2));
        }
      }
      int v34 = (char *)*((void *)v34 + 1);
    }
    while (v34 != v33);
    unint64_t v33 = (char *)*((void *)this + 10);
  }
  char v26 = 0;
  v212[0] = 0;
  v212[1] = 0;
  int v213 = 0;
  uint64_t v221 = v223;
  if (v33) {
    unsigned int v38 = v33 - 24;
  }
  else {
    unsigned int v38 = 0;
  }
  uint64_t v222 = 0x2000000000;
  uint64_t v218 = v220;
  uint64_t v219 = 0x2000000000;
  uint64_t v215 = v217;
  uint64_t v216 = 0x2000000000;
  int v39 = 1;
LABEL_54:
  while (2)
  {
    int v40 = v38 + 40;
    uint64_t v41 = (void *)*((void *)v38 + 6);
    while (2)
    {
      if (v41 != v40)
      {
        if (v41) {
          uint64_t v42 = (uint64_t)(v41 - 3);
        }
        else {
          uint64_t v42 = 0;
        }
        int v43 = v239;
        if (v240 == v239)
        {
          unsigned int v44 = HIDWORD(v241);
          BOOL v45 = (char *)v240 + 8 * HIDWORD(v241);
          if (HIDWORD(v241))
          {
            uint64_t v46 = 0;
            while (*(void *)((char *)v240 + v46) != v42)
            {
              v46 += 8;
              if (8 * HIDWORD(v241) == v46) {
                goto LABEL_78;
              }
            }
            BOOL v45 = (char *)v240 + v46;
          }
LABEL_78:
          int v43 = v240;
        }
        else
        {
          int v47 = v241 - 1;
          unsigned int v48 = (v241 - 1) & ((v42 >> 4) ^ (v42 >> 9));
          BOOL v45 = (char *)v240 + 8 * v48;
          uint64_t v49 = *(void *)v45;
          if (*(void *)v45 == -1)
          {
            int v50 = 0;
LABEL_121:
            if (v50) {
              BOOL v45 = v50;
            }
            unsigned int v44 = HIDWORD(v241);
            if (*(void *)v45 != v42) {
              BOOL v45 = (char *)v240 + 8 * v241;
            }
          }
          else
          {
            int v50 = 0;
            int v51 = 1;
            while (v49 != v42)
            {
              if (v50) {
                BOOL v52 = 0;
              }
              else {
                BOOL v52 = v49 == -2;
              }
              if (v52) {
                int v50 = v45;
              }
              unsigned int v53 = v48 + v51++;
              unsigned int v48 = v53 & v47;
              BOOL v45 = (char *)v240 + 8 * (v53 & v47);
              uint64_t v49 = *(void *)v45;
              if (*(void *)v45 == -1) {
                goto LABEL_121;
              }
            }
            unsigned int v44 = HIDWORD(v241);
          }
        }
        if (v240 == v43) {
          unsigned int v54 = v44;
        }
        else {
          unsigned int v54 = v241;
        }
        if (v45 != (char *)v240 + 8 * v54) {
          int v39 = 2;
        }
        int v55 = *(unsigned __int8 *)(v42 + 16);
        if (v55 == 84) {
          uint64_t v56 = v42;
        }
        else {
          uint64_t v56 = 0;
        }
        if (v41)
        {
          if (v55 == 84
            && (*(_WORD *)(v56 + 18) & 3u) - 1 >= 2
            && !sub_1CBF63B28(v42)
            && !sub_1CC27D470(v42)
            && (~*(unsigned __int16 *)(v56 + 18) & 3) != 0)
          {
            unsigned int v251 = (void *)0x700000006;
            if (!sub_1CC5CB59C(v56, (__int32 *)&v251, 2uLL))
            {
              uint64_t v57 = *(void *)(v56 + 64);
              if (!v57 || (*(unsigned char *)(v57 + 17) & 0x10) == 0)
              {
                LODWORD(v251) = 7;
                if (sub_1CC5CB59C(v56, (__int32 *)&v251, 1uLL))
                {
                  uint64_t v91 = *(void *)(v56 - 32);
                  if (!v91
                    || *(unsigned char *)(v91 + 16)
                    || *(void *)(v91 + 24) != *(void *)(v56 + 72)
                    || *(_DWORD *)(v91 + 36) != 7)
                  {
                    goto LABEL_113;
                  }
                }
                if (!llvm::CallBase::hasFnAttrOnCalledFunction(v56, 44)) {
                  goto LABEL_113;
                }
              }
              int v58 = *(unsigned __int8 *)(v56 + 16);
              if (v58 == 84)
              {
                uint64_t v59 = 0;
              }
              else if (v58 == 39)
              {
                uint64_t v59 = (*(_DWORD *)(v56 + 80) + 1);
              }
              else
              {
                uint64_t v59 = 2;
              }
              int v60 = *(_DWORD *)(v56 + 20);
              uint64_t v61 = v60 & 0x7FFFFFF;
              uint64_t v62 = v56 - 32 * v61;
              if (v60 < 0 && (uint64_t v92 = *(void *)(v62 - 8), (v92 & 0xFFFFFFFF0) != 0)) {
                uint64_t v63 = (*(_DWORD *)(v62 - 12) - *(_DWORD *)(v62 - v92));
              }
              else {
                uint64_t v63 = 0;
              }
              if (v62 == v56 - 32 * v59 - 32 * v63 - 32)
              {
LABEL_126:
                uint64_t v75 = *(void *)***v209;
                if (*(void *)(v75 + 128)
                  || ((*(uint64_t (**)(void))(**(void **)(v75 + 72) + 48))(*(void *)(v75 + 72)) & 1) != 0)
                {
                  llvm::OptimizationRemark::OptimizationRemark((uint64_t)&v251, (uint64_t)"tailcallelim", (uint64_t)"tailcall-readnone", 17, v56);
                  v214[0] = "marked as tail call candidate (readnone)";
                  v214[1] = 40;
                  sub_1CC59ADEC((uint64_t *)&v258, (uint64_t)v214);
                  LODWORD(v244[1]) = v252;
                  BYTE4(v244[1]) = BYTE4(v252);
                  *(_OWORD *)&v244[2] = v253;
                  v244[4] = v254;
                  long long v245 = v255;
                  long long v246 = v256;
                  uint64_t v247 = v257;
                  v244[0] = &unk_1F2616800;
                  uint64_t v248 = v250;
                  uint64_t v249 = 0x400000000;
                  if (v259)
                  {
                    sub_1CD494D68((uint64_t)&v248, (uint64_t)&v258);
                    uint64_t v84 = v259;
                  }
                  else
                  {
                    uint64_t v84 = 0;
                  }
                  v250[32] = v260[32];
                  v250[33] = v260[33];
                  v244[0] = &unk_1F2616570;
                  unsigned int v251 = &unk_1F2616800;
                  unsigned int v85 = (char *)v258;
                  if (v84)
                  {
                    uint64_t v86 = v84 << 6;
                    do
                    {
                      uint64_t v87 = (void **)&v85[v86];
                      if (v85[v86 - 17] < 0) {
                        operator delete(*(v87 - 5));
                      }
                      if (*((char *)v87 - 41) < 0) {
                        operator delete(*(v87 - 8));
                      }
                      v86 -= 64;
                    }
                    while (v86);
                    unsigned int v85 = (char *)v258;
                  }
                  if (v85 != (char *)v260) {
                    free(v85);
                  }
                  llvm::OptimizationRemarkEmitter::emit(v209, (llvm::DiagnosticInfoOptimizationBase *)v244);
                  v244[0] = &unk_1F2616800;
                  uint64_t v88 = (char *)v248;
                  if (v249)
                  {
                    unint64_t v89 = (unint64_t)v249 << 6;
                    do
                    {
                      uint64_t v90 = (void **)&v88[v89];
                      if (v88[v89 - 17] < 0) {
                        operator delete(*(v90 - 5));
                      }
                      if (*((char *)v90 - 41) < 0) {
                        operator delete(*(v90 - 8));
                      }
                      v89 -= 64;
                    }
                    while (v89);
                    uint64_t v88 = (char *)v248;
                  }
                  if (v88 != (char *)v250) {
                    free(v88);
                  }
                }
                *(_WORD *)(v56 + 18) = *(_WORD *)(v56 + 18) & 0xFFFC | 1;
                char v26 = 1;
              }
              else
              {
                uint64_t v64 = 32 * v61 - 32 * v59 - 32 * v63 - 32;
                uint64_t v65 = v62 + 24;
                while (1)
                {
                  uint64_t v66 = *(void *)v65;
                  unsigned int v67 = *(unsigned __int8 *)(*(void *)v65 + 16);
                  if (v67 >= 0x15)
                  {
                    if (v67 != 21) {
                      break;
                    }
                    if (*(unsigned char *)(*(void *)v66 + 8) == 15)
                    {
                      uint64_t v68 = *(void *)(*(void *)(v66 + 24) + 112);
                      if (v68)
                      {
                        unsigned int v69 = *(_DWORD *)(v66 + 32) + 2;
                        if (v69 < *(_DWORD *)(v68 + 8))
                        {
                          uint64_t v70 = *(void *)(v68 + 8 * v69 + 40);
                          if (v70)
                          {
                            if ((*(unsigned char *)(v70 + 20) & 0x20) != 0) {
                              break;
                            }
                          }
                        }
                      }
                    }
                  }
                  v65 += 32;
                  v64 -= 32;
                  if (!v64) {
                    goto LABEL_126;
                  }
                }
LABEL_113:
                if (v39 == 1)
                {
                  int v71 = v224;
                  if (v225 == v224)
                  {
                    unsigned int v72 = HIDWORD(v226);
                    uint64_t v73 = (char *)v225 + 8 * HIDWORD(v226);
                    if (HIDWORD(v226))
                    {
                      uint64_t v74 = 0;
                      while (*(void *)((char *)v225 + v74) != v56)
                      {
                        v74 += 8;
                        if (8 * HIDWORD(v226) == v74) {
                          goto LABEL_142;
                        }
                      }
                      uint64_t v73 = (char *)v225 + v74;
                    }
LABEL_142:
                    int v71 = v225;
                  }
                  else
                  {
                    int v76 = v226 - 1;
                    unsigned int v77 = (v226 - 1) & ((v56 >> 4) ^ (v56 >> 9));
                    uint64_t v73 = (char *)v225 + 8 * v77;
                    uint64_t v78 = *(void *)v73;
                    if (*(void *)v73 == -1)
                    {
                      uint64_t v79 = 0;
LABEL_151:
                      if (v79) {
                        uint64_t v73 = v79;
                      }
                      unsigned int v72 = HIDWORD(v226);
                      if (*(void *)v73 != v56) {
                        uint64_t v73 = (char *)v225 + 8 * v226;
                      }
                    }
                    else
                    {
                      uint64_t v79 = 0;
                      int v80 = 1;
                      while (v78 != v56)
                      {
                        if (v79) {
                          BOOL v81 = 0;
                        }
                        else {
                          BOOL v81 = v78 == -2;
                        }
                        if (v81) {
                          uint64_t v79 = v73;
                        }
                        unsigned int v82 = v77 + v80++;
                        unsigned int v77 = v82 & v76;
                        uint64_t v73 = (char *)v225 + 8 * (v82 & v76);
                        uint64_t v78 = *(void *)v73;
                        if (*(void *)v73 == -1) {
                          goto LABEL_151;
                        }
                      }
                      unsigned int v72 = HIDWORD(v226);
                    }
                  }
                  if (v225 == v71) {
                    unsigned int v83 = v72;
                  }
                  else {
                    unsigned int v83 = v226;
                  }
                  if (v73 == (char *)v225 + 8 * v83)
                  {
                    if (v216 >= (unint64_t)HIDWORD(v216)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((void *)v215 + v216) = v56;
                    LODWORD(v216) = v216 + 1;
                  }
                }
              }
            }
          }
        }
        uint64_t v41 = (void *)v41[1];
        continue;
      }
      break;
    }
    unsigned int v93 = (void *)*v40;
    if ((void *)*v40 != v40)
    {
      if (v93) {
        uint64_t v94 = v93 - 3;
      }
      else {
        uint64_t v94 = 0;
      }
      if (*((unsigned char *)v94 + 16) != 30)
      {
        int v100 = 2;
        switch(*((unsigned char *)v94 + 16))
        {
          case 0x1E:
            __break(1u);
            JUMPOUT(0x1CCEEA88CLL);
          case 0x1F:
            int v100 = (*((_DWORD *)v94 + 5) >> 1) & 0x3FFFFFF;
            goto LABEL_220;
          case 0x20:
          case 0x26:
            int v100 = (*((_DWORD *)v94 + 5) & 0x7FFFFFF) - 1;
            goto LABEL_220;
          case 0x21:
            goto LABEL_199;
          case 0x24:
            int v100 = *((_WORD *)v94 + 9) & 1;
            goto LABEL_220;
          case 0x25:
            int v100 = 1;
            goto LABEL_199;
          case 0x27:
            int v100 = *((_DWORD *)v94 + 20) + 1;
LABEL_220:
            if (!v100) {
              goto LABEL_212;
            }
            goto LABEL_199;
          default:
            goto LABEL_212;
        }
      }
      if ((*((_DWORD *)v94 + 5) & 0x7FFFFFF) == 3) {
        int v100 = 2;
      }
      else {
        int v100 = 1;
      }
LABEL_199:
      for (unsigned int k = 0; k != v100; ++k)
      {
        uint64_t Successor = (void *)llvm::Instruction::getSuccessor((llvm::Instruction *)v94, k);
        unsigned int v251 = Successor;
        int v97 = sub_1CCEEB7F8((uint64_t)v212, (uint64_t *)&v251);
        if (*(_DWORD *)v97 < v39)
        {
          *(_DWORD *)int v97 = v39;
          if (v39 == 2)
          {
            uint64_t v98 = v219;
            if (v219 >= (unint64_t)HIDWORD(v219)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            unsigned int v99 = &v218;
          }
          else
          {
            uint64_t v98 = v222;
            if (v222 >= (unint64_t)HIDWORD(v222)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            unsigned int v99 = &v221;
          }
          *((void *)*v99 + v98) = Successor;
          ++*((_DWORD *)v99 + 2);
        }
      }
    }
LABEL_212:
    if (v219)
    {
      unsigned int v38 = (char *)*((void *)v218 + v219 - 1);
      LODWORD(v219) = v219 - 1;
      int v39 = 2;
      if (!v38) {
        goto LABEL_226;
      }
      continue;
    }
    break;
  }
  while (v222)
  {
    unsigned int v38 = (char *)*((void *)v221 + v222 - 1);
    LODWORD(v222) = v222 - 1;
    unsigned int v251 = v38;
    if (*(_DWORD *)sub_1CCEEB7F8((uint64_t)v212, (uint64_t *)&v251) == 1)
    {
      int v39 = 1;
      if (v38) {
        goto LABEL_54;
      }
      break;
    }
  }
LABEL_226:
  uint64_t v101 = (char *)v215;
  if (!v216) {
    goto LABEL_248;
  }
  uint64_t v102 = (char *)v215 + 8 * v216;
  while (2)
  {
    uint64_t v103 = *(void *)v101;
    uint64_t v104 = *(void **)(*(void *)v101 + 40);
    unsigned int v251 = v104;
    if (!v213)
    {
      uint64_t v112 = 0;
      goto LABEL_240;
    }
    unsigned int v105 = ((v104 >> 4) ^ (v104 >> 9)) & (v213 - 1);
    uint64_t v106 = (void *)(v212[0] + 16 * v105);
    uint64_t v107 = (void *)*v106;
    if (v104 != (void *)*v106)
    {
      uint64_t v108 = 0;
      int v109 = 1;
      while (v107 != (void *)-4096)
      {
        if (v108) {
          BOOL v110 = 0;
        }
        else {
          BOOL v110 = v107 == (void *)-8192;
        }
        if (v110) {
          uint64_t v108 = v106;
        }
        unsigned int v111 = v105 + v109++;
        unsigned int v105 = v111 & (v213 - 1);
        uint64_t v106 = (void *)(v212[0] + 16 * v105);
        uint64_t v107 = (void *)*v106;
        if (v104 == (void *)*v106) {
          goto LABEL_241;
        }
      }
      if (v108) {
        uint64_t v112 = v108;
      }
      else {
        uint64_t v112 = v106;
      }
LABEL_240:
      uint64_t v106 = sub_1CC82EE94((uint64_t)v212, (uint64_t *)&v251, v112);
      *uint64_t v106 = v104;
      *((_DWORD *)v106 + 2) = 0;
    }
LABEL_241:
    if (*((_DWORD *)v106 + 2) != 2)
    {
      *(_WORD *)(v103 + 18) = *(_WORD *)(v103 + 18) & 0xFFFC | 1;
      char v26 = 1;
    }
    v101 += 8;
    if (v101 != v102) {
      continue;
    }
    break;
  }
  uint64_t v101 = (char *)v215;
LABEL_248:
  a4 = v209;
  if (v101 != v217) {
    free(v101);
  }
  if (v218 != v220) {
    free(v218);
  }
  if (v221 != v223) {
    free(v221);
  }
  MEMORY[0x1D25D9CD0](v212[0], 8);
  if (v240 != v239) {
    free(v240);
  }
  if (v225 != v224) {
    free(v225);
  }
LABEL_258:
  if (*(_DWORD *)(*((void *)this + 3) + 8) <= 0xFFu)
  {
    uint64_t v113 = (char *)this + 72;
    uint64_t v114 = (char *)*((void *)this + 10);
    if (v114 == (char *)this + 72) {
      goto LABEL_286;
    }
    uint64_t v115 = v114 - 24;
    if (!v114) {
      uint64_t v115 = 0;
    }
    uint64_t v116 = v115 + 40;
    unsigned int v117 = (void *)*((void *)v115 + 6);
    uint64_t v118 = *((void *)this + 10);
    if (v117 == v116)
    {
      uint64_t v118 = *((void *)this + 10);
      while (1)
      {
        uint64_t v118 = *(void *)(v118 + 8);
        if ((char *)v118 == v113) {
          break;
        }
        uint64_t v119 = v118 - 24;
        if (!v118) {
          uint64_t v119 = 0;
        }
        BOOL v120 = (void *)(v119 + 40);
        unsigned int v117 = *(void **)(v119 + 48);
        if (v117 != v120) {
          goto LABEL_268;
        }
      }
LABEL_286:
      uint64_t v224 = (llvm::DomTreeUpdater **)this;
      unsigned int v225 = a2;
      uint64_t v226 = v210;
      unsigned int v227 = a4;
      v228[0] = a5;
      v228[1] = 0;
      uint64_t v229 = v231;
      uint64_t v230 = 0x800000000;
      uint64_t v233 = 0;
      uint64_t v232 = 0;
      uint64_t v234 = v236;
      uint64_t v235 = 0x800000000;
      int v238 = 0;
      uint64_t v237 = 0;
      if (v114 == v113) {
        goto LABEL_335;
      }
      while (2)
      {
        if (v114) {
          unsigned int v128 = (llvm::BasicBlock *)(v114 - 24);
        }
        else {
          unsigned int v128 = 0;
        }
        unsigned int v129 = (void *)*((void *)v128 + 5);
        if (v129 == (void *)((char *)v128 + 40))
        {
          int v133 = MEMORY[0x10];
          goto LABEL_311;
        }
        uint64_t v130 = v129 - 3;
        if (!v129) {
          uint64_t v130 = 0;
        }
        unsigned int v131 = *((unsigned __int8 *)v130 + 16) - 40;
        if (v131 >= 0xFFFFFFF5) {
          unsigned int v132 = v130;
        }
        else {
          unsigned int v132 = 0;
        }
        int v133 = *((unsigned __int8 *)v132 + 16);
        if (!v129 || (v133 == 30 ? (BOOL v134 = v131 >= 0xFFFFFFF5) : (BOOL v134 = 0), !v134))
        {
LABEL_311:
          if (v133 == 29)
          {
            int v139 = (llvm::Instruction *)sub_1CCEEB864((uint64_t)&v224, (uint64_t)v128);
            if (v139) {
              LOBYTE(v139) = sub_1CCEEBB50((unsigned int *)&v224, v139);
            }
            goto LABEL_315;
          }
LABEL_314:
          LOBYTE(v139) = 0;
          goto LABEL_315;
        }
        if ((*((_DWORD *)v132 + 5) & 0x7FFFFFF) == 3) {
          goto LABEL_314;
        }
        uint64_t v135 = (llvm::BasicBlock *)*(v132 - 4);
        FirstNonPHIOrDbg = llvm::BasicBlock::getFirstNonPHIOrDbg(v135, 1);
        if (!FirstNonPHIOrDbg || FirstNonPHIOrDbg[16] != 29) {
          goto LABEL_314;
        }
        int v138 = (llvm *)FirstNonPHIOrDbg;
        int v139 = (llvm::Instruction *)sub_1CCEEB864((uint64_t)&v224, (uint64_t)v128);
        if (v139) {
          llvm::FoldReturnIntoUncondBranch(v138, v135, v128, v228[0], v23);
        }
LABEL_315:
        v26 |= v139;
        uint64_t v114 = (char *)*((void *)v114 + 1);
        if (v114 != v113) {
          continue;
        }
        break;
      }
      if (v230)
      {
        int64_t v140 = (char *)v229;
        v141 = (char *)v229 + 8 * v230;
        do
        {
          int64_t v142 = *(_DWORD **)v140;
          v244[0] = (char *)v224[5] + 272;
          memset(&v244[1], 0, 32);
          LOWORD(v245) = 257;
          int v143 = v142[5];
          if ((v143 & 0x40000000) != 0)
          {
            int v145 = (uint64_t *)*((void *)v142 - 1);
            unint64_t v144 = v143 & 0x7FFFFFF;
          }
          else
          {
            unint64_t v144 = v143 & 0x7FFFFFF;
            int v145 = (uint64_t *)&v142[-8 * v144];
          }
          unsigned int v251 = &v253;
          uint64_t v252 = 0x800000000;
          if (v144 >= 9) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v144)
          {
            uint64_t v146 = 32 * v144;
            unsigned int v147 = &v253;
            do
            {
              uint64_t v148 = *v145;
              v145 += 4;
              *(void *)unsigned int v147 = v148;
              unsigned int v147 = (long long *)((char *)v147 + 8);
              v146 -= 32;
            }
            while (v146);
            unsigned int v149 = (long long *)v251;
          }
          else
          {
            unsigned int v149 = &v253;
          }
          LODWORD(v252) = v144;
          unint64_t v150 = llvm::SimplifyInstructionWithOperands((llvm *)v142, (uint64_t)v149, v144, (uint64_t)v244, v23, v24, v25);
          if (v251 == &v253)
          {
            if (v150) {
              goto LABEL_328;
            }
          }
          else
          {
            free(v251);
            if (v150)
            {
LABEL_328:
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v142, v150, (llvm::Value *)1);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
            }
          }
          v140 += 8;
        }
        while (v140 != v141);
      }
LABEL_335:
      if (!v232)
      {
LABEL_412:
        if (v234 != v236) {
          free(v234);
        }
        if (v229 != v231) {
          free(v229);
        }
        return v26 & 1;
      }
      if (v235)
      {
        int v151 = v224 + 9;
        unint64_t v152 = v224[10];
        if (v152 != (llvm::DomTreeUpdater *)(v224 + 9))
        {
          do
          {
            if (v152) {
              unsigned int v153 = (char *)v152 - 24;
            }
            else {
              unsigned int v153 = 0;
            }
            uint64_t v154 = (char *)*((void *)v153 + 5);
            if (v154 != v153 + 40)
            {
              uint64_t v155 = v154 ? (uint64_t)(v154 - 24) : 0;
              unsigned int v156 = *(unsigned __int8 *)(v155 + 16) - 40;
              uint64_t v157 = v156 >= 0xFFFFFFF5 ? v155 : 0;
              if (v154)
              {
                if (*(unsigned char *)(v157 + 16) == 29 && v156 >= 0xFFFFFFF5)
                {
                  uint64_t v159 = *(void *)(v157 - 32 * (*(_DWORD *)(v157 + 20) & 0x7FFFFFF));
                  unsigned int v251 = "current.ret.tr";
                  LOWORD(v254) = 259;
                  uint64_t v160 = sub_1CC199EFC(v233, v232, v159, (const char **)&v251, v157, 0);
                  if (v235 >= (unint64_t)HIDWORD(v235)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v234 + v235) = v160;
                  LODWORD(v235) = v235 + 1;
                  LLVMSetArgOperand_0(v157, 0, (uint64_t)v160);
                }
              }
            }
            unint64_t v152 = (llvm::DomTreeUpdater *)*((void *)v152 + 1);
          }
          while (v152 != (llvm::DomTreeUpdater *)v151);
        }
        if (v237 && v235)
        {
          uint64_t v161 = v238;
          int v162 = (uint64_t *)v234;
          int v163 = (char *)v234 + 8 * v235;
          while (1)
          {
            uint64_t v164 = *v162;
            unint64_t v165 = (uint64_t ***)llvm::Instruction::clone(v161);
            unsigned int v251 = "accumulator.ret.tr";
            LOWORD(v254) = 259;
            llvm::Value::setNameImpl((llvm::Value *)v165, (const char **)&v251);
            if (v165)
            {
              if (!*((unsigned char *)v165 + 16)) {
                break;
              }
            }
LABEL_363:
            int v166 = *((_DWORD *)v161 + 5);
            if ((v166 & 0x40000000) != 0) {
              uint64_t v167 = (uint64_t *)*((void *)v161 - 1);
            }
            else {
              uint64_t v167 = (uint64_t *)((char *)v161 - 32 * (v166 & 0x7FFFFFF));
            }
            uint64_t v168 = *v167;
            uint64_t v169 = *(void *)(v164 - 32);
            int v170 = *((_DWORD *)v165 + 5);
            if ((v170 & 0x40000000) != 0) {
              int64_t v171 = (uint64_t ***)*(v165 - 1);
            }
            else {
              int64_t v171 = &v165[-4 * (v170 & 0x7FFFFFF)];
            }
            BOOL v172 = v168 == v237;
            uint64_t v173 = &v171[4 * v172];
            if (*v173)
            {
              *v173[2] = (uint64_t *)v173[1];
              uint64_t v174 = v173[1];
              if (v174) {
                v174[2] = (uint64_t *)v173[2];
              }
            }
            *uint64_t v173 = (uint64_t **)v169;
            if (v169)
            {
              uint64_t v177 = *(uint64_t ***)(v169 + 8);
              unsigned int v175 = (uint64_t **)(v169 + 8);
              unsigned int v176 = v177;
              uint64_t v178 = &v171[4 * v172];
              v178[1] = v177;
              if (v177) {
                v176[2] = (uint64_t *)(v178 + 1);
              }
              v178[2] = v175;
              llvm::Constant *v175 = (uint64_t *)v173;
            }
            uint64_t v179 = *(void *)(v164 + 40);
            v165[5] = (uint64_t **)v179;
            *(_WORD *)(v179 + 18) &= ~0x8000u;
            if ((*((unsigned char *)v165 + 23) & 0x10) != 0)
            {
              uint64_t v185 = *(void *)(v179 + 56);
              if (v185)
              {
                char v186 = *(llvm::ValueSymbolTable **)(v185 + 104);
                if (v186) {
                  llvm::ValueSymbolTable::reinsertValue(v186, (llvm::Value *)v165);
                }
              }
            }
            uint64_t v180 = *(void *)(v164 + 24);
            v165[3] = (uint64_t **)v180;
            v165[4] = (uint64_t **)(v164 + 24);
            *(void *)(v180 + 8) = v165 + 3;
            *(void *)(v164 + 24) = v165 + 3;
            if (*(void *)(v164 - 32))
            {
              **(void **)(v164 - 16) = *(void *)(v164 - 24);
              uint64_t v181 = *(void *)(v164 - 24);
              if (v181) {
                *(void *)(v181 + 16) = *(void *)(v164 - 16);
              }
            }
            *(void *)(v164 - 32) = v165;
            int v184 = v165[1];
            uint64_t v183 = v165 + 1;
            unsigned int v182 = v184;
            *(void *)(v164 - 24) = v184;
            if (v184) {
              v182[2] = (uint64_t *)(v164 - 24);
            }
            *(void *)(v164 - 16) = v183;
            *uint64_t v183 = v164 - 32;
            if (++v162 == (uint64_t *)v163) {
              goto LABEL_412;
            }
          }
          if ((*((unsigned char *)v165 + 23) & 0x10) == 0) {
            goto LABEL_401;
          }
          uint64_t v187 = ***v165;
          uint64_t v188 = *(void *)(v187 + 152);
          uint64_t v189 = *(unsigned int *)(v187 + 168);
          if (v189)
          {
            LODWORD(v190) = (v189 - 1) & ((v165 >> 4) ^ (v165 >> 9));
            uint64_t v191 = (uint64_t ****)(v188 + 16 * v190);
            int v192 = *v191;
            if (*v191 == v165)
            {
LABEL_394:
              uint64_t v195 = v191[1];
              unint64_t v198 = (unint64_t)*v195;
              int v196 = v195 + 2;
              unint64_t v197 = v198;
              if (v198 >= 5 && *(_DWORD *)v196 == *(_DWORD *)"llvm." && v196[4] == aLlvm_1[4])
              {
                *((_DWORD *)v165 + 8) |= 0x2000u;
                int v200 = llvm::Function::lookupIntrinsicID(v196, v197);
LABEL_402:
                *((_DWORD *)v165 + 9) = v200;
                goto LABEL_363;
              }
LABEL_401:
              int v200 = 0;
              *((_DWORD *)v165 + 8) &= ~0x2000u;
              goto LABEL_402;
            }
            int v193 = 1;
            while (v192 != (uint64_t ***)-4096)
            {
              int v194 = v190 + v193++;
              uint64_t v190 = v194 & (v189 - 1);
              int v192 = *(uint64_t ****)(v188 + 16 * v190);
              if (v192 == v165)
              {
                uint64_t v191 = (uint64_t ****)(v188 + 16 * v190);
                goto LABEL_394;
              }
            }
          }
          uint64_t v191 = (uint64_t ****)(v188 + 16 * v189);
          goto LABEL_394;
        }
        goto LABEL_412;
      }
      int v201 = *((_DWORD *)v232 + 5);
      if ((v201 & 0x40000000) != 0)
      {
        uint64_t v203 = (uint64_t *)*(v232 - 1);
        uint64_t v202 = v201 & 0x7FFFFFF;
        if (!v202) {
          goto LABEL_411;
        }
      }
      else
      {
        uint64_t v202 = v201 & 0x7FFFFFF;
        uint64_t v203 = &v232[-4 * v202];
        if (!v202) {
          goto LABEL_411;
        }
      }
      uint64_t v204 = 32 * v202;
      BOOL v205 = (void **)(v203 + 2);
      do
      {
        if (*(v205 - 2))
        {
          *llvm::Type *v205 = *(v205 - 1);
          uint64_t v206 = (uint64_t)*(v205 - 1);
          if (v206) {
            *(void *)(v206 + 16) = *v205;
          }
        }
        *(v205 - 2) = 0;
        v205 += 4;
        v204 -= 32;
      }
      while (v204);
LABEL_411:
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
    while (1)
    {
LABEL_268:
      unint64_t v121 = v117 - 3;
      if (!v117) {
        unint64_t v121 = 0;
      }
      if (*((unsigned char *)v121 + 16) == 59)
      {
        if (*(unsigned char *)(*(v121 - 4) + 16) != 16) {
          break;
        }
        uint64_t v122 = v121[5];
        uint64_t v123 = *(void *)(*(void *)(v122 + 56) + 80);
        uint64_t v124 = v123 ? v123 - 24 : 0;
        if (v122 != v124 || (*((_WORD *)v121 + 9) & 0x40) != 0) {
          break;
        }
      }
      unsigned int v117 = (void *)v117[1];
      uint64_t v125 = v118 - 24;
      if (!v118) {
        uint64_t v125 = 0;
      }
      int64_t v126 = (void *)(v125 + 40);
      while (v117 == v126)
      {
        uint64_t v118 = *(void *)(v118 + 8);
        if ((char *)v118 == v113) {
          goto LABEL_286;
        }
        uint64_t v127 = v118 - 24;
        if (!v118) {
          uint64_t v127 = 0;
        }
        int64_t v126 = (void *)(v127 + 40);
        unsigned int v117 = *(void **)(v127 + 48);
      }
      if ((char *)v118 == v113) {
        goto LABEL_286;
      }
    }
  }
  return v26 & 1;
}

void sub_1CCEEA8B8()
{
}

void sub_1CCEEA8F8(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CCEEA930(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)llvm::AAResultsWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::OptimizationRemarkEmitterWrapperPass::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);

  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);
}

uint64_t sub_1CCEEA9D4(llvm::FunctionPass *a1, llvm::LLVMContextImpl ****a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (llvm::FunctionPass::skipFunction(a1, a2)) {
    return 0;
  }
  unint64_t v5 = (uint64_t *)*((void *)a1 + 1);
  unsigned int v6 = (llvm::PMDataManager *)v5[3];
  uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(v6, &llvm::DominatorTreeWrapperPass::ID, 1);
  if (AnalysisPass)
  {
    uint64_t AnalysisPass = (*(uint64_t (**)(uint64_t, void *))(*(void *)AnalysisPass + 96))(AnalysisPass, &llvm::DominatorTreeWrapperPass::ID);
    unint64_t v5 = (uint64_t *)*((void *)a1 + 1);
    unsigned int v6 = (llvm::PMDataManager *)v5[3];
  }
  if (AnalysisPass) {
    uint64_t v8 = AnalysisPass + 32;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = llvm::PMDataManager::findAnalysisPass(v6, &llvm::PostDominatorTreeWrapperPass::ID, 1);
  if (v9)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v9 + 96))(v9, &llvm::PostDominatorTreeWrapperPass::ID);
    unint64_t v5 = (uint64_t *)*((void *)a1 + 1);
  }
  uint64_t v10 = v9 + 32;
  if (!v9) {
    uint64_t v10 = 0;
  }
  v27[0] = v28;
  v27[1] = 0x1000000000;
  v28[32] = 0;
  v28[33] = 0;
  v28[34] = v8;
  v28[35] = v10;
  char v29 = 0;
  uint64_t v30 = v34;
  unsigned int v31 = v34;
  uint64_t v32 = 8;
  int v33 = 0;
  memset(&v34[64], 0, 24);
  __int16 v35 = 0;
  uint64_t v11 = *v5;
  uint64_t v12 = v5[1];
  if (*v5 == v12)
  {
LABEL_15:
    uint64_t v13 = 0;
  }
  else
  {
    while (*(char **)v11 != llvm::TargetTransformInfoWrapperPass::ID)
    {
      v11 += 16;
      if (v11 == v12) {
        goto LABEL_15;
      }
    }
    uint64_t v13 = *(void *)(v11 + 8);
  }
  unint64_t v14 = (llvm::TargetTransformInfoWrapperPass *)(*(uint64_t (**)(uint64_t, char *))(*(void *)v13 + 96))(v13, llvm::TargetTransformInfoWrapperPass::ID);
  TTI = llvm::TargetTransformInfoWrapperPass::getTTI(v14, (const Function *)a2);
  unsigned int v16 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v17 = *v16;
  uint64_t v18 = v16[1];
  if (v17 == v18)
  {
LABEL_20:
    uint64_t v19 = 0;
  }
  else
  {
    while (*(char **)v17 != llvm::AAResultsWrapperPass::ID)
    {
      v17 += 16;
      if (v17 == v18) {
        goto LABEL_20;
      }
    }
    uint64_t v19 = *(void *)(v17 + 8);
  }
  uint64_t v20 = *(void *)((*(uint64_t (**)(uint64_t, char *))(*(void *)v19 + 96))(v19, llvm::AAResultsWrapperPass::ID)+ 32);
  uint64_t v21 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v22 = *v21;
  uint64_t v23 = v21[1];
  if (v22 == v23)
  {
LABEL_25:
    uint64_t v24 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v22 != &llvm::OptimizationRemarkEmitterWrapperPass::ID)
    {
      v22 += 16;
      if (v22 == v23) {
        goto LABEL_25;
      }
    }
    uint64_t v24 = *(void *)(v22 + 8);
  }
  uint64_t v25 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v24 + 96))(v24, &llvm::OptimizationRemarkEmitterWrapperPass::ID);
  uint64_t v4 = sub_1CCEE8F44((llvm::Function *)a2, TTI, v20, *(uint64_t ****)(v25 + 32), (llvm::DomTreeUpdater *)v27);
  sub_1CC2930C0((uint64_t)v27);
  return v4;
}

void sub_1CCEEACB4(uint64_t a1, uint64_t a2)
{
  v122[32] = *MEMORY[0x1E4F143B8];
  BOOL v120 = v122;
  uint64_t v121 = 0x2000000000;
  uint64_t v115 = v119;
  uint64_t v116 = v119;
  uint64_t v117 = 32;
  int v118 = 0;
  if (!a2) {
    goto LABEL_279;
  }
  uint64_t v2 = a2;
  for (unsigned int i = 0; ; unsigned int i = HIDWORD(v117))
  {
    unint64_t v5 = v116;
    if (v116 == v115)
    {
      if (i)
      {
        unsigned int v6 = 0;
        uint64_t v7 = 8 * i;
        uint64_t v8 = v116;
        while (*(void *)v8 != v2)
        {
          if (*(void *)v8 == -2) {
            unsigned int v6 = v8;
          }
          v8 += 8;
          v7 -= 8;
          if (!v7)
          {
            if (!v6) {
              goto LABEL_11;
            }
            *(void *)unsigned int v6 = v2;
            --v118;
            goto LABEL_35;
          }
        }
        goto LABEL_37;
      }
LABEL_11:
      unsigned int v9 = v117;
      if (i < v117)
      {
        HIDWORD(v117) = i + 1;
        *(void *)&v116[8 * i] = v2;
LABEL_35:
        if (v121 >= (unint64_t)HIDWORD(v121)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v120 + v121) = v2;
        LODWORD(v121) = v121 + 1;
        goto LABEL_37;
      }
    }
    else
    {
      unsigned int v9 = v117;
    }
    if (3 * v9 <= 4 * (i - v118))
    {
      if (v9 >= 0x40) {
        v9 *= 2;
      }
      else {
        unsigned int v9 = 128;
      }
    }
    else if (v9 - i >= v9 >> 3)
    {
      goto LABEL_16;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v115, v9);
    unsigned int v9 = v117;
    unint64_t v5 = v116;
LABEL_16:
    unsigned int v10 = v9 - 1;
    unsigned int v11 = (v9 - 1) & ((v2 >> 4) ^ (v2 >> 9));
    uint64_t v12 = &v5[8 * v11];
    uint64_t v13 = *(void *)v12;
    if (*(void *)v12 == -1)
    {
      unint64_t v14 = 0;
LABEL_28:
      if (v14) {
        uint64_t v18 = v14;
      }
      else {
        uint64_t v18 = v12;
      }
      if (*(void *)v18 != v2)
      {
        if (*(void *)v18 == -2) {
          --v118;
        }
        else {
          ++HIDWORD(v117);
        }
        *(void *)uint64_t v18 = v2;
        goto LABEL_35;
      }
    }
    else
    {
      unint64_t v14 = 0;
      int v15 = 1;
      while (v13 != v2)
      {
        if (v14) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v13 == -2;
        }
        if (v16) {
          unint64_t v14 = v12;
        }
        unsigned int v17 = v11 + v15++;
        unsigned int v11 = v17 & v10;
        uint64_t v12 = &v5[8 * (v17 & v10)];
        uint64_t v13 = *(void *)v12;
        if (*(void *)v12 == -1) {
          goto LABEL_28;
        }
      }
    }
LABEL_37:
    uint64_t v2 = *(void *)(v2 + 8);
    if (!v2) {
      break;
    }
  }
  unsigned int v19 = v121;
  if (v121)
  {
    while (1)
    {
      unint64_t v20 = *((void *)v120 + --v19);
      LODWORD(v121) = v19;
      uint64_t v21 = *(void *)(v20 + 24);
      int v22 = *(unsigned __int8 *)(v21 + 16);
      if ((v22 - 61) <= 0x18)
      {
        if (((1 << (v22 - 61)) & 0x1430002) != 0) {
          goto LABEL_49;
        }
        if (v22 == 61)
        {
          int v46 = *(_DWORD *)(v21 + 20);
          if ((v46 & 0x40000000) != 0) {
            uint64_t v47 = *(void *)(v21 - 8);
          }
          else {
            uint64_t v47 = v21 - 32 * (v46 & 0x7FFFFFF);
          }
          if (((v20 - v47) & 0x1FFFFFFFE0) != 0) {
            goto LABEL_183;
          }
          uint64_t v48 = *(void *)(a1 + 296);
          uint64_t v49 = *(unsigned int *)(a1 + 308);
          if (v48 == *(void *)(a1 + 288))
          {
            if (v49)
            {
              int v50 = 0;
              uint64_t v51 = 8 * v49;
              BOOL v52 = *(uint64_t **)(a1 + 296);
              while (*v52 != v21)
              {
                if (*v52 == -2) {
                  int v50 = v52;
                }
                ++v52;
                v51 -= 8;
                if (!v51)
                {
                  if (!v50) {
                    goto LABEL_118;
                  }
                  uint64_t *v50 = v21;
                  --*(_DWORD *)(a1 + 312);
                  goto LABEL_183;
                }
              }
              goto LABEL_183;
            }
LABEL_118:
            unsigned int v53 = *(_DWORD *)(a1 + 304);
            if (v49 < v53)
            {
              *(_DWORD *)(a1 + 308) = v49 + 1;
              *(void *)(v48 + 8 * v49) = v21;
              goto LABEL_183;
            }
          }
          else
          {
            unsigned int v53 = *(_DWORD *)(a1 + 304);
          }
          if (3 * v53 <= 4 * ((int)v49 - *(_DWORD *)(a1 + 312)))
          {
            if (v53 >= 0x40) {
              v53 *= 2;
            }
            else {
              unsigned int v53 = 128;
            }
          }
          else if (v53 - v49 >= v53 >> 3)
          {
            goto LABEL_189;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 288), v53);
          unsigned int v53 = *(_DWORD *)(a1 + 304);
          uint64_t v48 = *(void *)(a1 + 296);
LABEL_189:
          unsigned int v84 = v53 - 1;
          unsigned int v85 = (v53 - 1) & ((v21 >> 4) ^ (v21 >> 9));
          uint64_t v86 = (uint64_t *)(v48 + 8 * v85);
          uint64_t v87 = *v86;
          if (*v86 == -1)
          {
            uint64_t v88 = 0;
LABEL_202:
            if (v88) {
              uint64_t v92 = v88;
            }
            else {
              uint64_t v92 = v86;
            }
            if (*v92 != v21)
            {
              if (*v92 == -2) {
                --*(_DWORD *)(a1 + 312);
              }
              else {
                ++*(_DWORD *)(a1 + 308);
              }
              *uint64_t v92 = v21;
            }
          }
          else
          {
            uint64_t v88 = 0;
            int v89 = 1;
            while (v87 != v21)
            {
              if (v88) {
                BOOL v90 = 0;
              }
              else {
                BOOL v90 = v87 == -2;
              }
              if (v90) {
                uint64_t v88 = v86;
              }
              unsigned int v91 = v85 + v89++;
              unsigned int v85 = v91 & v84;
              uint64_t v86 = (uint64_t *)(v48 + 8 * (v91 & v84));
              uint64_t v87 = *v86;
              if (*v86 == -1) {
                goto LABEL_202;
              }
            }
          }
          goto LABEL_183;
        }
        if (v22 == 84) {
          goto LABEL_95;
        }
      }
      if (v22 != 60) {
        break;
      }
LABEL_184:
      if (!v19) {
        goto LABEL_279;
      }
    }
    if (v22 == 33)
    {
LABEL_95:
      int v38 = *(_DWORD *)(v21 + 20);
      uint64_t v39 = -(uint64_t)(v38 & 0x7FFFFFF);
      unint64_t v40 = v21 - 32 * (v38 & 0x7FFFFFF);
      if (v40 <= v20)
      {
        uint64_t v41 = v22 == 84 ? 0 : 2;
        if (v38 < 0 && (uint64_t v105 = *(void *)(v40 - 8), (v105 & 0xFFFFFFFF0) != 0)) {
          uint64_t v42 = (*(_DWORD *)(v40 - 12) - *(_DWORD *)(v40 - v105));
        }
        else {
          uint64_t v42 = 0;
        }
        if (v21 - 32 * v41 - 32 * v42 - 32 > v20)
        {
          if (llvm::CallBase::paramHasAttr(*(void *)(v20 + 24), (v20 - v40) >> 5, 69))
          {
LABEL_183:
            unsigned int v19 = v121;
            goto LABEL_184;
          }
          uint64_t v39 = -(uint64_t)(*(_DWORD *)(v21 + 20) & 0x7FFFFFF);
        }
      }
      unint64_t v43 = v21 + 32 * v39;
      if (v43 > v20
        || ((int v44 = *(unsigned __int8 *)(v21 + 16), v44 == 84)
          ? (uint64_t v45 = 0)
          : v44 != 39
          ? (uint64_t v45 = 2)
          : (uint64_t v45 = (*(_DWORD *)(v21 + 80) + 1)),
            v21 - 32 * v45 - 32 <= v20))
      {
        char v68 = 0;
      }
      else
      {
        char v68 = sub_1CBF5BC2C(v21, (v20 - v43) >> 5, 22);
      }
      uint64_t v69 = *(void *)(a1 + 8);
      uint64_t v70 = *(unsigned int *)(a1 + 20);
      if (v69 == *(void *)a1)
      {
        if (v70)
        {
          int v71 = 0;
          uint64_t v72 = 8 * v70;
          uint64_t v73 = *(uint64_t **)(a1 + 8);
          do
          {
            if (*v73 == v21) {
              goto LABEL_182;
            }
            if (*v73 == -2) {
              int v71 = v73;
            }
            ++v73;
            v72 -= 8;
          }
          while (v72);
          if (v71)
          {
            *int v71 = v21;
            --*(_DWORD *)(a1 + 24);
            if ((v68 & 1) == 0) {
              goto LABEL_210;
            }
            goto LABEL_183;
          }
        }
        unsigned int v74 = *(_DWORD *)(a1 + 16);
        if (v70 < v74)
        {
          *(_DWORD *)(a1 + 20) = v70 + 1;
          *(void *)(v69 + 8 * v70) = v21;
          if ((v68 & 1) == 0) {
            goto LABEL_210;
          }
          goto LABEL_183;
        }
      }
      else
      {
        unsigned int v74 = *(_DWORD *)(a1 + 16);
      }
      if (3 * v74 <= 4 * ((int)v70 - *(_DWORD *)(a1 + 24)))
      {
        if (v74 >= 0x40) {
          v74 *= 2;
        }
        else {
          unsigned int v74 = 128;
        }
      }
      else if (v74 - v70 >= v74 >> 3)
      {
        goto LABEL_163;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a1, v74);
      unsigned int v74 = *(_DWORD *)(a1 + 16);
      uint64_t v69 = *(void *)(a1 + 8);
LABEL_163:
      unsigned int v75 = v74 - 1;
      unsigned int v76 = (v74 - 1) & ((v21 >> 4) ^ (v21 >> 9));
      unsigned int v77 = (uint64_t *)(v69 + 8 * v76);
      uint64_t v78 = *v77;
      if (*v77 == -1)
      {
        uint64_t v79 = 0;
LABEL_175:
        if (v79) {
          unsigned int v83 = v79;
        }
        else {
          unsigned int v83 = v77;
        }
        if (*v83 != v21)
        {
          if (*v83 == -2) {
            --*(_DWORD *)(a1 + 24);
          }
          else {
            ++*(_DWORD *)(a1 + 20);
          }
          *unsigned int v83 = v21;
        }
      }
      else
      {
        uint64_t v79 = 0;
        int v80 = 1;
        while (v78 != v21)
        {
          if (v79) {
            BOOL v81 = 0;
          }
          else {
            BOOL v81 = v78 == -2;
          }
          if (v81) {
            uint64_t v79 = v77;
          }
          unsigned int v82 = v76 + v80++;
          unsigned int v76 = v82 & v75;
          unsigned int v77 = (uint64_t *)(v69 + 8 * (v82 & v75));
          uint64_t v78 = *v77;
          if (*v77 == -1) {
            goto LABEL_175;
          }
        }
      }
LABEL_182:
      if (v68) {
        goto LABEL_183;
      }
LABEL_210:
      uint64_t v93 = *(void *)(v21 + 64);
      if (v93 && (*(unsigned char *)(v93 + 17) & 0x30) != 0) {
        goto LABEL_49;
      }
      int v94 = *(_DWORD *)(v21 + 20);
      if (v94 < 0
        && (uint64_t v106 = v21 - 32 * (v94 & 0x7FFFFFF), v109 = *(void *)(v106 - 8), v107 = v106 - 8, (v108 = v109) != 0))
      {
        uint64_t v110 = -v108;
        while (1)
        {
          unsigned int v111 = *(_DWORD *)(*(void *)(v107 + v110) + 8);
          BOOL v112 = v111 > 7;
          int v113 = (1 << v111) & 0x83;
          if (v112 || v113 == 0) {
            break;
          }
          v110 += 16;
          if (!v110) {
            goto LABEL_213;
          }
        }
      }
      else
      {
LABEL_213:
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(v21, 45) & 1) != 0
          || (llvm::CallBase::hasFnAttrOnCalledFunction(v21, 44) & 1) != 0)
        {
          goto LABEL_49;
        }
      }
      uint64_t v54 = *(void *)(a1 + 296);
      uint64_t v55 = *(unsigned int *)(a1 + 308);
      if (v54 != *(void *)(a1 + 288))
      {
        unsigned int v97 = *(_DWORD *)(a1 + 304);
        goto LABEL_226;
      }
      if (!v55) {
        goto LABEL_223;
      }
      uint64_t v56 = 0;
      uint64_t v95 = 8 * v55;
      uint64_t v96 = *(uint64_t **)(a1 + 296);
      do
      {
        if (*v96 == v21) {
          goto LABEL_49;
        }
        if (*v96 == -2) {
          uint64_t v56 = v96;
        }
        ++v96;
        v95 -= 8;
      }
      while (v95);
      if (!v56)
      {
LABEL_223:
        unsigned int v97 = *(_DWORD *)(a1 + 304);
        if (v55 < v97) {
          goto LABEL_224;
        }
LABEL_226:
        if (3 * v97 <= 4 * ((int)v55 - *(_DWORD *)(a1 + 312)))
        {
          if (v97 >= 0x40) {
            v97 *= 2;
          }
          else {
            unsigned int v97 = 128;
          }
        }
        else if (v97 - v55 >= v97 >> 3)
        {
          goto LABEL_228;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 288), v97);
        unsigned int v97 = *(_DWORD *)(a1 + 304);
        uint64_t v54 = *(void *)(a1 + 296);
LABEL_228:
        unsigned int v98 = v97 - 1;
        unsigned int v99 = (v97 - 1) & ((v21 >> 4) ^ (v21 >> 9));
        uint64_t v62 = (uint64_t *)(v54 + 8 * v99);
        uint64_t v100 = *v62;
        if (*v62 != -1)
        {
          uint64_t v64 = 0;
          int v101 = 1;
          do
          {
            if (v100 == v21) {
              goto LABEL_49;
            }
            if (v64) {
              BOOL v102 = 0;
            }
            else {
              BOOL v102 = v100 == -2;
            }
            if (v102) {
              uint64_t v64 = v62;
            }
            unsigned int v103 = v99 + v101++;
            unsigned int v99 = v103 & v98;
            uint64_t v62 = (uint64_t *)(v54 + 8 * (v103 & v98));
            uint64_t v100 = *v62;
          }
          while (*v62 != -1);
LABEL_240:
          if (v64) {
            uint64_t v104 = v64;
          }
          else {
            uint64_t v104 = v62;
          }
          if (*v104 != v21)
          {
            if (*v104 == -2) {
              --*(_DWORD *)(a1 + 312);
            }
            else {
              ++*(_DWORD *)(a1 + 308);
            }
            *uint64_t v104 = v21;
          }
          while (1)
          {
LABEL_49:
            uint64_t v21 = *(void *)(v21 + 8);
            if (!v21) {
              goto LABEL_183;
            }
            uint64_t v23 = v116;
            uint64_t v24 = HIDWORD(v117);
            if (v116 == v115)
            {
              if (HIDWORD(v117))
              {
                uint64_t v25 = 0;
                uint64_t v26 = 8 * HIDWORD(v117);
                uint64_t v27 = (uint64_t *)v116;
                while (*v27 != v21)
                {
                  if (*v27 == -2) {
                    uint64_t v25 = v27;
                  }
                  ++v27;
                  v26 -= 8;
                  if (!v26)
                  {
                    if (!v25) {
                      goto LABEL_58;
                    }
                    uint64_t *v25 = v21;
                    --v118;
                    goto LABEL_82;
                  }
                }
                continue;
              }
LABEL_58:
              unsigned int v28 = v117;
              if (HIDWORD(v117) < v117)
              {
                ++HIDWORD(v117);
                *(void *)&v116[8 * v24] = v21;
LABEL_82:
                if (v121 >= (unint64_t)HIDWORD(v121)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v120 + v121) = v21;
                LODWORD(v121) = v121 + 1;
                continue;
              }
            }
            else
            {
              unsigned int v28 = v117;
            }
            if (3 * v28 <= 4 * (HIDWORD(v117) - v118)) {
              break;
            }
            if (v28 - HIDWORD(v117) < v28 >> 3) {
              goto LABEL_89;
            }
LABEL_63:
            unsigned int v29 = v28 - 1;
            unsigned int v30 = (v28 - 1) & ((v21 >> 4) ^ (v21 >> 9));
            unsigned int v31 = &v23[8 * v30];
            uint64_t v32 = *(void *)v31;
            if (*(void *)v31 == -1)
            {
              int v33 = 0;
LABEL_75:
              if (v33) {
                uint64_t v37 = v33;
              }
              else {
                uint64_t v37 = (uint64_t *)v31;
              }
              if (*v37 != v21)
              {
                if (*v37 == -2) {
                  --v118;
                }
                else {
                  ++HIDWORD(v117);
                }
                uint64_t *v37 = v21;
                goto LABEL_82;
              }
            }
            else
            {
              int v33 = 0;
              int v34 = 1;
              while (v32 != v21)
              {
                if (v33) {
                  BOOL v35 = 0;
                }
                else {
                  BOOL v35 = v32 == -2;
                }
                if (v35) {
                  int v33 = (uint64_t *)v31;
                }
                unsigned int v36 = v30 + v34++;
                unsigned int v30 = v36 & v29;
                unsigned int v31 = &v23[8 * (v36 & v29)];
                uint64_t v32 = *(void *)v31;
                if (*(void *)v31 == -1) {
                  goto LABEL_75;
                }
              }
            }
          }
          if (v28 >= 0x40) {
            v28 *= 2;
          }
          else {
            unsigned int v28 = 128;
          }
LABEL_89:
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v115, v28);
          unsigned int v28 = v117;
          uint64_t v23 = v116;
          goto LABEL_63;
        }
LABEL_239:
        uint64_t v64 = 0;
        goto LABEL_240;
      }
LABEL_247:
      *uint64_t v56 = v21;
      --*(_DWORD *)(a1 + 312);
      goto LABEL_49;
    }
    uint64_t v54 = *(void *)(a1 + 296);
    uint64_t v55 = *(unsigned int *)(a1 + 308);
    if (v54 == *(void *)(a1 + 288))
    {
      if (v55)
      {
        uint64_t v56 = 0;
        uint64_t v57 = 8 * v55;
        int v58 = *(uint64_t **)(a1 + 296);
        do
        {
          if (*v58 == v21) {
            goto LABEL_49;
          }
          if (*v58 == -2) {
            uint64_t v56 = v58;
          }
          ++v58;
          v57 -= 8;
        }
        while (v57);
        if (v56) {
          goto LABEL_247;
        }
      }
      unsigned int v59 = *(_DWORD *)(a1 + 304);
      if (v55 < v59)
      {
LABEL_224:
        *(_DWORD *)(a1 + 308) = v55 + 1;
        *(void *)(v54 + 8 * v55) = v21;
        goto LABEL_49;
      }
    }
    else
    {
      unsigned int v59 = *(_DWORD *)(a1 + 304);
    }
    if (3 * v59 <= 4 * ((int)v55 - *(_DWORD *)(a1 + 312)))
    {
      if (v59 >= 0x40) {
        v59 *= 2;
      }
      else {
        unsigned int v59 = 128;
      }
    }
    else if (v59 - v55 >= v59 >> 3)
    {
      goto LABEL_133;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 288), v59);
    unsigned int v59 = *(_DWORD *)(a1 + 304);
    uint64_t v54 = *(void *)(a1 + 296);
LABEL_133:
    unsigned int v60 = v59 - 1;
    unsigned int v61 = (v59 - 1) & ((v21 >> 4) ^ (v21 >> 9));
    uint64_t v62 = (uint64_t *)(v54 + 8 * v61);
    uint64_t v63 = *v62;
    if (*v62 != -1)
    {
      uint64_t v64 = 0;
      int v65 = 1;
      do
      {
        if (v63 == v21) {
          goto LABEL_49;
        }
        if (v64) {
          BOOL v66 = 0;
        }
        else {
          BOOL v66 = v63 == -2;
        }
        if (v66) {
          uint64_t v64 = v62;
        }
        unsigned int v67 = v61 + v65++;
        unsigned int v61 = v67 & v60;
        uint64_t v62 = (uint64_t *)(v54 + 8 * (v67 & v60));
        uint64_t v63 = *v62;
      }
      while (*v62 != -1);
      goto LABEL_240;
    }
    goto LABEL_239;
  }
LABEL_279:
  if (v116 != v115) {
    free(v116);
  }
  if (v120 != v122) {
    free(v120);
  }
}

void *sub_1CCEEB7F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CBB0BF40(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  unint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    unint64_t v5 = sub_1CC82EE94(a1, a2, v7);
    void *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5 + 1;
}

void *sub_1CCEEB864(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 40);
  if (v4 == a2 + 40)
  {
    uint64_t v6 = 0;
  }
  else
  {
    if (v4) {
      uint64_t v5 = v4 - 24;
    }
    else {
      uint64_t v5 = 0;
    }
    if (*(unsigned __int8 *)(v5 + 16) - 29 >= 0xB) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = v5;
    }
  }
  uint64_t v7 = *(void **)(a2 + 48);
  if (v7) {
    uint64_t v8 = (uint64_t)(v7 - 3);
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8 == v6) {
    return 0;
  }
  unsigned int v9 = (void *)(v6 + 24);
  if (!v6) {
    unsigned int v9 = 0;
  }
  while (1)
  {
    unsigned int v10 = v9 - 3;
    uint64_t v11 = v9 ? (uint64_t)(v9 - 3) : 0;
    int v12 = *(unsigned __int8 *)(v11 + 16);
    uint64_t v13 = v12 == 84 ? v11 : 0;
    if (v9 && v12 == 84)
    {
      uint64_t v14 = *(void *)(v13 - 32);
      if (!v14 || *(unsigned char *)(v14 + 16) || *(void *)(v14 + 24) != *(void *)(v13 + 72)) {
        uint64_t v14 = 0;
      }
      if (v14 == *(void *)a1) {
        break;
      }
    }
    if (v9 == v7) {
      return 0;
    }
    unsigned int v9 = (void *)*v9;
  }
  if ((*(_WORD *)(v13 + 18) & 3u) - 1 > 1) {
    return 0;
  }
  uint64_t v15 = *(void *)(v14 + 80);
  if (v15) {
    uint64_t v16 = v15 - 24;
  }
  else {
    uint64_t v16 = 0;
  }
  if (v16 == a2)
  {
    if (sub_1CBF63B28(v8))
    {
      uint64_t v17 = v8 + 24;
      do
      {
        uint64_t v17 = *(void *)(v17 + 8);
        if (v17) {
          uint64_t v8 = v17 - 24;
        }
        else {
          uint64_t v8 = 0;
        }
      }
      while (sub_1CBF63B28(v8));
    }
    if (v8 != v13) {
      return (void *)v13;
    }
    unsigned int v10 = (void *)v11;
    uint64_t v18 = *(void *)(a2 + 48);
    do
    {
      uint64_t v18 = *(void *)(v18 + 8);
      if (v18) {
        uint64_t v19 = v18 - 24;
      }
      else {
        uint64_t v19 = 0;
      }
    }
    while (sub_1CBF63B28(v19));
    if (v19 == v6)
    {
      uint64_t v21 = *(void *)(v13 - 32);
      if (v21
        && !*(unsigned char *)(v21 + 16)
        && *(void *)(v21 + 24) == *(void *)(v13 + 72)
        && ((*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 176))(**(void **)(a1 + 8)) & 1) == 0)
      {
        int v22 = *(_DWORD *)(v13 + 20);
        uint64_t v23 = v22 & 0x7FFFFFF;
        uint64_t v24 = (void *)(v13 - 32 * v23);
        int v25 = *(unsigned __int8 *)(v13 + 16);
        if (v25 == 84)
        {
          uint64_t v26 = 0;
        }
        else if (v25 == 39)
        {
          uint64_t v26 = (*(_DWORD *)(v13 + 80) + 1);
        }
        else
        {
          uint64_t v26 = 2;
        }
        if (v22 < 0 && (uint64_t v35 = *(v24 - 1), (v35 & 0xFFFFFFFF0) != 0)) {
          uint64_t v27 = (*((_DWORD *)v24 - 3) - *(_DWORD *)((char *)v24 - v35));
        }
        else {
          uint64_t v27 = 0;
        }
        uint64_t v28 = v13 - 32 * v26 - 32 * v27 - 32;
        unsigned int v29 = *(llvm::Function **)a1;
        if (*(_WORD *)(*(void *)a1 + 18))
        {
          llvm::Function::BuildLazyArguments(*(llvm::Function **)a1);
          unsigned int v31 = *(llvm::Function **)a1;
          uint64_t v30 = *((void *)v29 + 11);
          if (*((_WORD *)v31 + 9)) {
            llvm::Function::BuildLazyArguments(v31);
          }
          unsigned int v29 = v31;
        }
        else
        {
          uint64_t v30 = *((void *)v29 + 11);
        }
        uint64_t v32 = *((void *)v29 + 11) + 40 * *((void *)v29 + 12);
        if (v24 != (void *)v28 && v30 != v32)
        {
          uint64_t v33 = 32 * v23 - 32 * v26 - 32 * v27 - 64;
          do
          {
            if (v30 != *v24) {
              break;
            }
            v24 += 4;
            v30 += 40;
            if (!v33) {
              break;
            }
            v33 -= 32;
          }
          while (v30 != v32);
        }
        if (v30 == v32 && v24 == (void *)v28) {
          return 0;
        }
        else {
          return (void *)v13;
        }
      }
    }
    else
    {
      return (void *)v13;
    }
  }
  return v10;
}

uint64_t sub_1CCEEBB50(unsigned int *a1, llvm::Instruction *a2)
{
  uint64_t v2 = a1;
  v502[30] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)a2 + 5);
  uint64_t v4 = *(void *)(v3 + 40);
  if (v4 == v3 + 40)
  {
    uint64_t v6 = 0;
  }
  else
  {
    if (v4) {
      uint64_t v5 = v4 - 24;
    }
    else {
      uint64_t v5 = 0;
    }
    if (*(unsigned __int8 *)(v5 + 16) - 29 >= 0xB) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = v5;
    }
  }
  uint64_t v7 = *((void *)a2 + 4);
  BOOL v8 = v7 == 0;
  if (v7) {
    uint64_t v9 = v7 - 24;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v472 = v6;
  if (v9 == v6)
  {
    uint64_t v470 = 0;
LABEL_65:
    int v25 = *(uint64_t **)(v6 + 40);
    uint64_t v26 = (uint64_t ***)*((void *)v2 + 3);
    uint64_t v27 = *(void *)***v26;
    uint64_t v28 = (uint64_t)a2;
    int v471 = v25;
    if (*(void *)(v27 + 128)
      || (*(unsigned int (**)(void))(**(void **)(v27 + 72) + 48))(*(void *)(v27 + 72)))
    {
      llvm::OptimizationRemark::OptimizationRemark((uint64_t)&v487, (uint64_t)"tailcallelim", (uint64_t)"tailcall-recursion", 18, (uint64_t)a2);
      int v477 = "transforming tail recursion into loop";
      uint64_t v478 = 37;
      sub_1CC59ADEC((uint64_t *)&v494, (uint64_t)&v477);
      LODWORD(v478) = v488;
      BYTE4(v478) = BYTE4(v488);
      long long v479 = v489;
      uint64_t v480 = v490;
      int v477 = (const char *)&unk_1F2616800;
      long long v481 = v491;
      long long v482 = v492;
      uint64_t v483 = v493;
      unint64_t v484 = v486;
      uint64_t v485 = 0x400000000;
      unsigned int v367 = v495;
      if (v495)
      {
        sub_1CD494D68((uint64_t)&v484, (uint64_t)&v494);
        unsigned int v367 = v495;
      }
      v486[32] = v502[28];
      v486[33] = v502[29];
      int v477 = (const char *)&unk_1F2616570;
      unint64_t v487 = &unk_1F2616800;
      uint64_t v368 = (char *)v494;
      if (v367)
      {
        unint64_t v369 = (unint64_t)v367 << 6;
        do
        {
          uint64_t v370 = (void **)&v368[v369];
          if (v368[v369 - 17] < 0) {
            operator delete(*(v370 - 5));
          }
          if (*((char *)v370 - 41) < 0) {
            operator delete(*(v370 - 8));
          }
          v369 -= 64;
        }
        while (v369);
        uint64_t v368 = (char *)v494;
      }
      if (v368 != (char *)&v496) {
        free(v368);
      }
      llvm::OptimizationRemarkEmitter::emit(v26, (llvm::DiagnosticInfoOptimizationBase *)&v477);
      int v477 = (const char *)&unk_1F2616800;
      uint64_t v384 = (char *)v484;
      uint64_t v28 = (uint64_t)a2;
      if (v485)
      {
        unint64_t v385 = (unint64_t)v485 << 6;
        do
        {
          v386 = (void **)&v384[v385];
          if (v384[v385 - 17] < 0) {
            operator delete(*(v386 - 5));
          }
          if (*((char *)v386 - 41) < 0) {
            operator delete(*(v386 - 8));
          }
          v385 -= 64;
        }
        while (v385);
        uint64_t v384 = (char *)v484;
      }
      if (v384 != (char *)v486) {
        free(v384);
      }
      uint64_t v2 = a1;
    }
    if (!*((void *)v2 + 5))
    {
      uint64_t v371 = *(void *)(*(void *)v2 + 80);
      if (v371) {
        uint64_t v372 = v371 - 24;
      }
      else {
        uint64_t v372 = 0;
      }
      *((void *)v2 + 5) = v372;
      LOWORD(v490) = 257;
      operator new();
    }
    int v29 = *(unsigned __int8 *)(v28 + 16);
    if (v29 == 84)
    {
      uint64_t v30 = 0;
    }
    else if (v29 == 39)
    {
      uint64_t v2 = a1;
      uint64_t v28 = (uint64_t)a2;
      uint64_t v30 = (*((_DWORD *)a2 + 20) + 1);
    }
    else
    {
      uint64_t v30 = 2;
      uint64_t v2 = a1;
      uint64_t v28 = (uint64_t)a2;
    }
    uint64_t v469 = v28 + 24;
    int v31 = *(_DWORD *)(v28 + 20);
    if (v31 < 0 && (uint64_t v461 = v28 - 32 * (v31 & 0x7FFFFFF), v462 = *(void *)(v461 - 8), (v462 & 0xFFFFFFFF0) != 0))
    {
      uint64_t v33 = -(uint64_t)(v31 & 0x7FFFFFF);
      uint64_t v32 = (*(_DWORD *)(v461 - 12) - *(_DWORD *)(v461 - v462));
    }
    else
    {
      uint64_t v32 = 0;
      uint64_t v33 = -(uint64_t)(v31 & 0x7FFFFFF);
    }
    unint64_t v34 = -32 * v30 - 32 * v32 - 32 * v33 - 32;
    if ((v34 & 0x1FFFFFFFE0) != 0)
    {
      uint64_t v35 = 0;
      unsigned int v36 = &v489;
      uint64_t v37 = (v34 >> 5);
      while (!llvm::CallBase::paramHasAttr(v28, v35, 69))
      {
LABEL_75:
        if (++v35 == v37)
        {
          int v29 = *(unsigned __int8 *)(v28 + 16);
          int v25 = v471;
          goto LABEL_137;
        }
      }
      int v38 = (llvm::PointerType *)sub_1CD49471C(v28, v35);
      uint64_t v39 = *(void *)(*(void *)v2 + 40);
      uint64_t v40 = *(void *)(v28 + 64);
      if (v40)
      {
        if ((v35 + 2) < *(_DWORD *)(v40 + 8))
        {
          uint64_t v41 = *(llvm::AttributeSetNode **)(v40 + 8 * (v35 + 2) + 40);
          if (v41)
          {
            __int16 Alignment = llvm::AttributeSetNode::getAlignment(v41);
            int v43 = Alignment;
            LODWORD(v40) = HIBYTE(Alignment);
            goto LABEL_83;
          }
        }
        LODWORD(v40) = 0;
      }
      int v43 = 0;
LABEL_83:
      unsigned int v44 = v43 | (v40 << 8);
      uint64_t v45 = operator new(0x68uLL);
      int v46 = v45;
      uint64_t v47 = (llvm::Value *)(v45 + 8);
      v45[13] = v45[13] & 0x38000000 | 1;
      *(void *)uint64_t v45 = 0;
      *((void *)v45 + 1) = 0;
      *((void *)v45 + 2) = 0;
      *((void *)v45 + 3) = v45 + 8;
      if (v44 <= 0x100) {
        unsigned __int8 v48 = 0;
      }
      else {
        unsigned __int8 v48 = v44;
      }
      uint64_t v49 = (llvm::Type *)*(unsigned int *)(v39 + 276);
      int v50 = (uint64_t ***)*((void *)a2 + 4 * v35 + -4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
      if ((*((unsigned char *)v50 + 23) & 0x10) != 0)
      {
        uint64_t v51 = ***v50;
        uint64_t v52 = *(void *)(v51 + 152);
        uint64_t v53 = *(unsigned int *)(v51 + 168);
        if (v53)
        {
          LODWORD(v54) = (v53 - 1) & ((v50 >> 4) ^ (v50 >> 9));
          uint64_t v55 = (uint64_t ****)(v52 + 16 * v54);
          uint64_t v56 = *v55;
          if (*v55 != v50)
          {
            int v57 = 1;
            do
            {
              if (v56 == (uint64_t ***)-4096) {
                goto LABEL_93;
              }
              int v58 = v54 + v57++;
              uint64_t v54 = v58 & (v53 - 1);
              uint64_t v56 = *(uint64_t ****)(v52 + 16 * v54);
            }
            while (v56 != v50);
            uint64_t v55 = (uint64_t ****)(v52 + 16 * v54);
          }
        }
        else
        {
LABEL_93:
          uint64_t v55 = (uint64_t ****)(v52 + 16 * v53);
        }
        unsigned int v59 = v55[1];
        uint64_t v62 = (uint64_t)*v59;
        unsigned int v61 = (char *)(v59 + 2);
        uint64_t v60 = v62;
      }
      else
      {
        uint64_t v60 = 0;
        unsigned int v61 = &byte_1CFBCE98E;
      }
      LOWORD(v490) = 261;
      unint64_t v487 = v61;
      uint64_t v488 = v60;
      uint64_t v63 = *(void *)(*(void *)v2 + 80);
      if (v63) {
        uint64_t v64 = v63 - 24;
      }
      else {
        uint64_t v64 = 0;
      }
      uint64_t v65 = *(void *)(v64 + 48);
      if (v65) {
        uint64_t v66 = v65 - 24;
      }
      else {
        uint64_t v66 = 0;
      }
      unsigned __int8 v466 = v48;
      llvm::AllocaInst::AllocaInst((unint64_t *)v45 + 4, v38, v49, 0, v48, (const char **)&v487, v66);
      uint64_t v67 = 0;
      uint64_t v68 = **(void **)a2;
      unint64_t v487 = v36;
      uint64_t v488 = 0x200000000;
      *((void *)&v492 + 1) = v68;
      uint64_t v493 = &v501;
      uint64_t v494 = v502;
      uint64_t v495 = 0;
      int v496 = 0;
      __int16 v497 = 512;
      char v498 = 7;
      uint64_t v499 = 0;
      uint64_t v500 = 0;
      uint64_t v501 = &unk_1F2616E88;
      v502[0] = &unk_1F2617008;
      uint64_t v69 = (unsigned __int8 *)*((void *)a2 + 6);
      *((void *)&v491 + 1) = *((void *)a2 + 5);
      *(void *)&long long v492 = v469;
      unint64_t v476 = v69;
      if (v69)
      {
        llvm::MetadataTracking::track((uint64_t)&v476, v69, 2);
        uint64_t v67 = (uint64_t)v476;
      }
      sub_1CB8461A4((uint64_t)&v487, 0, v67);
      if (!v476) {
        goto LABEL_104;
      }
      int v89 = *v476;
      if ((v89 - 4) > 0x1E)
      {
        if ((v89 - 3) >= 0xFFFFFFFE) {
          uint64_t v92 = v476;
        }
        else {
          uint64_t v92 = 0;
        }
        if ((v89 - 3) < 0xFFFFFFFE)
        {
          if (v89 == 3) {
            *((void *)v476 + 1) = 0;
          }
          goto LABEL_104;
        }
        unint64_t v91 = (unint64_t)(v92 + 8);
      }
      else
      {
        if ((v476[1] & 0x7F) != 2 && !*((_DWORD *)v476 + 3)) {
          goto LABEL_104;
        }
        uint64_t v90 = *((void *)v476 + 2);
        if ((v90 & 4) == 0) {
          goto LABEL_104;
        }
        unint64_t v91 = v90 & 0xFFFFFFFFFFFFFFF8;
        if (!v91) {
          goto LABEL_104;
        }
      }
      int v477 = (const char *)&v476;
      sub_1CC5FA668(v91 + 16, &v477);
LABEL_104:
      uint64_t v70 = v36;
      int v71 = (llvm::DataLayout *)(v39 + 272);
      uint64_t v72 = sub_1CB83544C(v39 + 272, (uint64_t)v38);
      BOOL v74 = v73 == 1;
      char v77 = llvm::DataLayout::getAlignment(v71, v38, 1);
      if (v74) {
      unint64_t v78 = ((1 << v77) + ((unint64_t)(v72 + 7) >> 3) - 1) & -(1 << v77);
      }
      uint64_t v79 = *(llvm::ConstantInt **)(**((void **)&v492 + 1) + 1984);
      unsigned int v80 = *(_DWORD *)(**((void **)&v492 + 1) + 1992);
      LODWORD(v478) = v80 >> 8;
      if (v80 >> 8 > 0x40) {
        operator new[]();
      }
      if (v80 <= 0xFF) {
        unint64_t v81 = 0;
      }
      else {
        unint64_t v81 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v80) + 63);
      }
      unsigned int v36 = v70;
      int v477 = (const char *)(v81 & v78);
      uint64_t v2 = a1;
      unsigned int v82 = llvm::ConstantInt::get(v79, (llvm::LLVMContext *)&v477, v76);
      if (v478 >= 0x41 && v477) {
        MEMORY[0x1D25D9CB0](v477, 0x1000C8000313F17);
      }
      llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v487, 194, v47, v466 | 0x100, *((llvm::Value **)a2 + 4 * v35 + -4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)), v466 | 0x100, v82, 0, 0, 0, 0, 0);
      unsigned int v83 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
      unsigned int v84 = &v83[32 * v35];
      if (*(void *)v84)
      {
        **((void **)v84 + 2) = *((void *)v84 + 1);
        uint64_t v85 = *((void *)v84 + 1);
        if (v85) {
          *(void *)(v85 + 16) = *((void *)v84 + 2);
        }
      }
      *(void *)unsigned int v84 = v47;
      uint64_t v88 = *((void *)v46 + 5);
      uint64_t v87 = (char **)(v46 + 10);
      uint64_t v86 = v88;
      *((void *)v84 + 1) = v88;
      if (v88) {
        *(void *)(v86 + 16) = v84 + 8;
      }
      *(void *)&v83[32 * v35 + 16] = v87;
      *uint64_t v87 = v84;
      if (v487 != v70) {
        free(v487);
      }
      uint64_t v28 = (uint64_t)a2;
      goto LABEL_75;
    }
LABEL_137:
    if (v29 == 84)
    {
      uint64_t v93 = 0;
    }
    else
    {
      if (v29 == 39)
      {
        uint64_t v2 = a1;
        uint64_t v28 = (uint64_t)a2;
        uint64_t v93 = (*((_DWORD *)a2 + 20) + 1);
      }
      else
      {
        uint64_t v93 = 2;
        uint64_t v2 = a1;
        uint64_t v28 = (uint64_t)a2;
      }
      int v25 = v471;
    }
    int v94 = *(_DWORD *)(v28 + 20);
    if (v94 < 0 && (v463 = v28 - 32 * (v94 & 0x7FFFFFF), uint64_t v464 = *(void *)(v463 - 8), (v464 & 0xFFFFFFFF0) != 0))
    {
      uint64_t v96 = -(uint64_t)(v94 & 0x7FFFFFF);
      uint64_t v95 = (*(_DWORD *)(v463 - 12) - *(_DWORD *)(v463 - v464));
    }
    else
    {
      uint64_t v95 = 0;
      uint64_t v96 = -(uint64_t)(v94 & 0x7FFFFFF);
    }
    unint64_t v97 = -32 * v93 - 32 * v95 - 32 * v96 - 32;
    if ((v97 & 0x1FFFFFFFE0) != 0)
    {
      uint64_t v98 = 0;
      unint64_t v99 = (v97 >> 5);
      unint64_t v467 = (void *)v99;
      while (!llvm::CallBase::paramHasAttr(v28, v98, 69))
      {
        uint64_t v100 = *(void *)(*((void *)v2 + 6) + 8 * v98);
        uint64_t v101 = *(void *)(v28 - 32 * (*(_DWORD *)(v28 + 20) & 0x7FFFFFF) + 32 * v98);
        int v102 = *(_DWORD *)(v100 + 20);
        uint64_t v103 = v102 & 0x7FFFFFF;
        uint64_t v104 = (_DWORD *)(v100 + 60);
        if ((v102 & 0x7FFFFFF) == *(_DWORD *)(v100 + 60))
        {
          unsigned int v117 = v103 + (v103 >> 1);
          if (v117 <= 2) {
            uint64_t v118 = 2;
          }
          else {
            uint64_t v118 = v117;
          }
          *uint64_t v104 = v118;
          if ((v102 & 0x40000000) != 0) {
            uint64_t v119 = *(uint64_t **)(v100 - 8);
          }
          else {
            uint64_t v119 = (uint64_t *)(v100 - 32 * v103);
          }
          BOOL v120 = operator new(40 * v118);
          *(void *)(v100 - 8) = v120;
          uint64_t v121 = v120;
          do
          {
            void *v121 = 0;
            v121[1] = 0;
            v121[2] = 0;
            v121[3] = v100;
            v121 += 4;
          }
          while (v121 != &v120[4 * v118]);
          int v122 = *(_DWORD *)(v100 + 20);
          if ((v122 & 0x40000000) != 0) {
            uint64_t v123 = (uint64_t)v120;
          }
          else {
            uint64_t v123 = v100 - 32 * (v122 & 0x7FFFFFF);
          }
          sub_1CC5E4108((uint64_t)&v487, v119, &v119[4 * v103], v123);
          if (v103)
          {
            memmove((void *)(v123 + 32 * v118), &v119[4 * v103], 8 * v103);
            uint64_t v124 = 4 * v103;
            do
            {
              uint64_t v125 = &v119[v124];
              if (v119[v124 - 4])
              {
                *(void *)*(v125 - 2) = *(v125 - 3);
                uint64_t v126 = *(v125 - 3);
                if (v126) {
                  *(void *)(v126 + 16) = *(v125 - 2);
                }
              }
              v124 -= 4;
            }
            while (v124 * 8);
          }
          operator delete(v119);
          int v102 = *(_DWORD *)(v100 + 20);
          uint64_t v2 = a1;
          uint64_t v28 = (uint64_t)a2;
          int v25 = v471;
          unint64_t v99 = (unint64_t)v467;
        }
        uint64_t v105 = (v102 + 1) & 0x7FFFFFF;
        *(_DWORD *)(v100 + 20) = v102 & 0xF8000000 | (v102 + 1) & 0x7FFFFFF;
        if ((v102 & 0x40000000) != 0) {
          uint64_t v106 = *(void *)(v100 - 8);
        }
        else {
          uint64_t v106 = v100 - 32 * v105;
        }
        uint64_t v107 = (v105 - 1);
        uint64_t v108 = v106 + 32 * v107;
        if (*(void *)v108)
        {
          **(void **)(v108 + 16) = *(void *)(v108 + 8);
          uint64_t v116 = *(void *)(v108 + 8);
          if (v116) {
            *(void *)(v116 + 16) = *(void *)(v108 + 16);
          }
        }
        *(void *)uint64_t v108 = v101;
        if (v101)
        {
          uint64_t v111 = *(void *)(v101 + 8);
          uint64_t v110 = (void *)(v101 + 8);
          uint64_t v109 = v111;
          uint64_t v112 = v106 + 32 * v107;
          *(void *)(v112 + 8) = v111;
          if (v111) {
            *(void *)(v109 + 16) = v112 + 8;
          }
          *(void *)(v112 + 16) = v110;
          *uint64_t v110 = v108;
        }
        int v113 = *(_DWORD *)(v100 + 20);
        uint64_t v114 = v113 & 0x7FFFFFF;
        if ((v113 & 0x40000000) != 0) {
          uint64_t v115 = *(void *)(v100 - 8);
        }
        else {
          uint64_t v115 = v100 - 32 * v114;
        }
LABEL_154:
        *(void *)(v115 + 32 * *v104 + 8 * (v114 - 1)) = v25;
        if (++v98 == v99) {
          goto LABEL_251;
        }
      }
      uint64_t v127 = sub_1CD49471C(v28, v98);
      uint64_t v128 = v28;
      unsigned int v129 = (llvm::Type *)v127;
      uint64_t v130 = *(void *)(*(void *)v2 + 40);
      uint64_t v131 = *(void *)(v128 + 64);
      if (v131
        && (v98 + 2) < *(_DWORD *)(v131 + 8)
        && (unsigned int v132 = *(llvm::AttributeSetNode **)(v131 + 8 * (v98 + 2) + 40)) != 0)
      {
        __int16 v133 = llvm::AttributeSetNode::getAlignment(v132);
        int v134 = v133;
        int v135 = HIBYTE(v133);
      }
      else
      {
        int v135 = 0;
        int v134 = 0;
      }
      uint64_t v136 = 0;
      uint64_t v137 = **(void **)a2;
      unint64_t v487 = &v489;
      uint64_t v488 = 0x200000000;
      *((void *)&v492 + 1) = v137;
      uint64_t v493 = &v501;
      uint64_t v494 = v502;
      uint64_t v495 = 0;
      int v496 = 0;
      __int16 v497 = 512;
      char v498 = 7;
      uint64_t v499 = 0;
      uint64_t v500 = 0;
      uint64_t v501 = &unk_1F2616E88;
      v502[0] = &unk_1F2617008;
      int v138 = (unsigned __int8 *)*((void *)a2 + 6);
      *((void *)&v491 + 1) = *((void *)a2 + 5);
      *(void *)&long long v492 = v469;
      unint64_t v476 = v138;
      if (v138)
      {
        llvm::MetadataTracking::track((uint64_t)&v476, v138, 2);
        uint64_t v136 = (uint64_t)v476;
      }
      sub_1CB8461A4((uint64_t)&v487, 0, v136);
      if (v476)
      {
        int v179 = *v476;
        if ((v179 - 4) > 0x1E)
        {
          if ((v179 - 3) >= 0xFFFFFFFE) {
            unsigned int v182 = v476;
          }
          else {
            unsigned int v182 = 0;
          }
          if ((v179 - 3) < 0xFFFFFFFE)
          {
            if (v179 == 3) {
              *((void *)v476 + 1) = 0;
            }
            goto LABEL_183;
          }
          unint64_t v181 = (unint64_t)(v182 + 8);
        }
        else
        {
          if ((v476[1] & 0x7F) != 2 && !*((_DWORD *)v476 + 3)) {
            goto LABEL_183;
          }
          uint64_t v180 = *((void *)v476 + 2);
          if ((v180 & 4) == 0) {
            goto LABEL_183;
          }
          unint64_t v181 = v180 & 0xFFFFFFFFFFFFFFF8;
          if (!v181) {
            goto LABEL_183;
          }
        }
        int v477 = (const char *)&v476;
        sub_1CC5FA668(v181 + 16, &v477);
      }
LABEL_183:
      int v139 = (llvm::DataLayout *)(v130 + 272);
      uint64_t v140 = sub_1CB83544C(v130 + 272, (uint64_t)v129);
      BOOL v142 = v141 == 1;
      char v145 = llvm::DataLayout::getAlignment(v139, v129, 1);
      if (v142) {
      unint64_t v146 = ((1 << v145) + ((unint64_t)(v140 + 7) >> 3) - 1) & -(1 << v145);
      }
      unsigned int v147 = *(llvm::ConstantInt **)(**((void **)&v492 + 1) + 1984);
      unsigned int v148 = *(_DWORD *)(**((void **)&v492 + 1) + 1992);
      LODWORD(v478) = v148 >> 8;
      if (v148 >> 8 > 0x40) {
        operator new[]();
      }
      if (v148 <= 0xFF) {
        unint64_t v149 = 0;
      }
      else {
        unint64_t v149 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v148) + 63);
      }
      int v477 = (const char *)(v149 & v146);
      unint64_t v150 = llvm::ConstantInt::get(v147, (llvm::LLVMContext *)&v477, v144);
      uint64_t v2 = a1;
      if (v478 >= 0x41 && v477) {
        MEMORY[0x1D25D9CB0](v477, 0x1000C8000313F17);
      }
      int v151 = *(llvm::Function **)a1;
      if (*(_WORD *)(*(void *)a1 + 18)) {
        llvm::Function::BuildLazyArguments(*(llvm::Function **)a1);
      }
      unsigned int v152 = v134 | (v135 << 8);
      if (v152 <= 0x100) {
        LOBYTE(v152) = 0;
      }
      llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v487, 194, (llvm::Value *)(*((void *)v151 + 11) + 40 * v98), v152 | 0x100, *((llvm::Value **)a2 + 4 * v98 + -4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)), v152 | 0x100, v150, 0, 0, 0, 0, 0);
      if (v487 != &v489) {
        free(v487);
      }
      uint64_t v153 = *(void *)(*((void *)a1 + 6) + 8 * v98);
      uint64_t v154 = *(llvm::Function **)a1;
      unint64_t v99 = (unint64_t)v467;
      if (*(_WORD *)(*(void *)a1 + 18)) {
        llvm::Function::BuildLazyArguments(*(llvm::Function **)a1);
      }
      uint64_t v155 = *((void *)v154 + 11);
      uint64_t v104 = (_DWORD *)(v153 + 60);
      int v156 = *(_DWORD *)(v153 + 20);
      uint64_t v157 = v156 & 0x7FFFFFF;
      if ((v156 & 0x7FFFFFF) == *(_DWORD *)(v153 + 60))
      {
        unsigned int v169 = v157 + (v157 >> 1);
        if (v169 <= 2) {
          uint64_t v170 = 2;
        }
        else {
          uint64_t v170 = v169;
        }
        *uint64_t v104 = v170;
        if ((v156 & 0x40000000) != 0) {
          int64_t v171 = *(uint64_t **)(v153 - 8);
        }
        else {
          int64_t v171 = (uint64_t *)(v153 - 32 * v157);
        }
        __p = v171;
        BOOL v172 = operator new(40 * v170);
        *(void *)(v153 - 8) = v172;
        uint64_t v173 = v172;
        do
        {
          *uint64_t v173 = 0;
          v173[1] = 0;
          v173[2] = 0;
          v173[3] = v153;
          v173 += 4;
        }
        while (v173 != &v172[4 * v170]);
        int v174 = *(_DWORD *)(v153 + 20);
        if ((v174 & 0x40000000) != 0) {
          uint64_t v175 = (uint64_t)v172;
        }
        else {
          uint64_t v175 = v153 - 32 * (v174 & 0x7FFFFFF);
        }
        sub_1CC5E4108((uint64_t)&v487, __p, &__p[4 * v157], v175);
        if (v157)
        {
          memmove((void *)(v175 + 32 * v170), &__p[4 * v157], 8 * v157);
          uint64_t v176 = 4 * v157;
          do
          {
            uint64_t v177 = &__p[v176];
            if (__p[v176 - 4])
            {
              *(void *)*(v177 - 2) = *(v177 - 3);
              uint64_t v178 = *(v177 - 3);
              if (v178) {
                *(void *)(v178 + 16) = *(v177 - 2);
              }
            }
            v176 -= 4;
          }
          while (v176 * 8);
        }
        operator delete(__p);
        int v156 = *(_DWORD *)(v153 + 20);
        uint64_t v2 = a1;
        uint64_t v28 = (uint64_t)a2;
        unint64_t v99 = (unint64_t)v467;
      }
      else
      {
        uint64_t v28 = (uint64_t)a2;
      }
      uint64_t v158 = (v156 + 1) & 0x7FFFFFF;
      *(_DWORD *)(v153 + 20) = v156 & 0xF8000000 | (v156 + 1) & 0x7FFFFFF;
      if ((v156 & 0x40000000) != 0) {
        uint64_t v159 = *(void *)(v153 - 8);
      }
      else {
        uint64_t v159 = v153 - 32 * v158;
      }
      uint64_t v160 = (v158 - 1);
      uint64_t v161 = v159 + 32 * v160;
      if (*(void *)v161)
      {
        **(void **)(v161 + 16) = *(void *)(v161 + 8);
        uint64_t v168 = *(void *)(v161 + 8);
        if (v168) {
          *(void *)(v168 + 16) = *(void *)(v161 + 16);
        }
      }
      uint64_t v162 = v155 + 40 * v98;
      *(void *)uint64_t v161 = v162;
      if (v155)
      {
        uint64_t v165 = *(void *)(v162 + 8);
        int v163 = (void *)(v162 + 8);
        uint64_t v164 = v165;
        uint64_t v166 = v159 + 32 * v160;
        *(void *)(v166 + 8) = v165;
        if (v165) {
          *(void *)(v164 + 16) = v166 + 8;
        }
        *(void *)(v166 + 16) = v163;
        *int v163 = v161;
      }
      int v167 = *(_DWORD *)(v153 + 20);
      uint64_t v114 = v167 & 0x7FFFFFF;
      if ((v167 & 0x40000000) != 0) {
        uint64_t v115 = *(void *)(v153 - 8);
      }
      else {
        uint64_t v115 = v153 - 32 * v114;
      }
      goto LABEL_154;
    }
LABEL_251:
    uint64_t v183 = v470;
    if (v470)
    {
      *((void *)v2 + 29) = v470;
      uint64_t v184 = *((void *)v2 + 5);
      uint64_t v185 = *(void *)(v184 + 8);
      if (v185)
      {
        while (1)
        {
          uint64_t v186 = *(void *)(v185 + 24);
          unsigned int v187 = *(unsigned __int8 *)(v186 + 16);
          BOOL v188 = v186 && v187 >= 0x1C;
          if (v188 && v187 - 29 < 0xB) {
            break;
          }
          uint64_t v185 = *(void *)(v185 + 8);
          if (!v185) {
            goto LABEL_262;
          }
        }
        int v191 = 0;
        uint64_t v192 = **(void **)(*(void *)(*(void *)v2 + 24) + 16);
        uint64_t v193 = v185;
LABEL_263:
        ++v191;
        while (1)
        {
          uint64_t v193 = *(void *)(v193 + 8);
          if (!v193) {
            break;
          }
          uint64_t v194 = *(void *)(v193 + 24);
          unsigned int v195 = *(unsigned __int8 *)(v194 + 16);
          if (v194) {
            BOOL v196 = v195 >= 0x1C;
          }
          else {
            BOOL v196 = 0;
          }
          if (v196 && v195 - 29 < 0xB) {
            goto LABEL_263;
          }
        }
        char v190 = 0;
      }
      else
      {
LABEL_262:
        uint64_t v185 = 0;
        int v191 = 0;
        uint64_t v192 = **(void **)(*(void *)(*(void *)v2 + 24) + 16);
        char v190 = 1;
      }
      int v198 = v191 + 1;
      unint64_t v487 = "accumulator.tr";
      LOWORD(v490) = 259;
      BOOL v199 = *(uint64_t **)(v184 + 48);
      int v200 = operator new(0x48uLL);
      int v201 = v200;
      v200[1] = v192;
      uint64_t v202 = (llvm::Value *)(v200 + 1);
      void *v200 = 0;
      v200[2] = 0;
      v200[3] = 0x4000000000000053;
      *((_OWORD *)v200 + 2) = 0u;
      uint64_t v203 = (char *)(v200 + 4);
      *((_OWORD *)v200 + 3) = 0u;
      *((_DWORD *)v200 + 16) = 0;
      if (v199)
      {
        uint64_t v435 = v199[2];
        v200[6] = v435;
        *(_WORD *)(v435 + 18) &= ~0x8000u;
        if ((*((unsigned char *)v200 + 31) & 0x10) != 0)
        {
          uint64_t v453 = *(void *)(v435 + 56);
          if (v453)
          {
            unsigned int v454 = *(llvm::ValueSymbolTable **)(v453 + 104);
            if (v454) {
              llvm::ValueSymbolTable::reinsertValue(v454, v202);
            }
          }
        }
        uint64_t v436 = *v199;
        v201[4] = *v199;
        v201[5] = v199;
        *(void *)(v436 + 8) = v203;
        uint64_t *v199 = (uint64_t)v203;
      }
      *((_DWORD *)v201 + 17) = v198;
      llvm::Value::setNameImpl(v202, (const char **)&v487);
      uint64_t v2 = a1;
      if (!*((unsigned char *)v201 + 24))
      {
        if ((*((unsigned char *)v201 + 31) & 0x10) == 0) {
          goto LABEL_606;
        }
        uint64_t v437 = ***(void ***)v202;
        uint64_t v438 = *(void *)(v437 + 152);
        uint64_t v439 = *(unsigned int *)(v437 + 168);
        if (v439)
        {
          LODWORD(v440) = (v439 - 1) & ((v202 >> 4) ^ (v202 >> 9));
          int v441 = (llvm::Value **)(v438 + 16 * v440);
          uint64_t v442 = *v441;
          if (*v441 != v202)
          {
            int v443 = 1;
            do
            {
              if (v442 == (llvm::Value *)-4096) {
                goto LABEL_598;
              }
              int v444 = v440 + v443++;
              uint64_t v440 = v444 & (v439 - 1);
              uint64_t v442 = *(llvm::Value **)(v438 + 16 * v440);
            }
            while (v442 != v202);
            int v441 = (llvm::Value **)(v438 + 16 * v440);
          }
        }
        else
        {
LABEL_598:
          int v441 = (llvm::Value **)(v438 + 16 * v439);
        }
        v455 = v441[1];
        unint64_t v458 = *(void *)v455;
        int v456 = (char *)v455 + 16;
        unint64_t v457 = v458;
        if (v458 >= 5 && (*(_DWORD *)v456 == *(_DWORD *)"llvm." ? (BOOL v459 = v456[4] == aLlvm_1[4]) : (BOOL v459 = 0), v459))
        {
          *((_DWORD *)v201 + 10) |= 0x2000u;
          int v460 = llvm::Function::lookupIntrinsicID(v456, v457);
        }
        else
        {
LABEL_606:
          int v460 = 0;
          *((_DWORD *)v201 + 10) &= ~0x2000u;
        }
        *((_DWORD *)v201 + 11) = v460;
      }
      uint64_t v204 = *((unsigned int *)v201 + 17);
      BOOL v205 = operator new(40 * v204);
      void *v201 = v205;
      if (v204)
      {
        uint64_t v206 = &v205[4 * v204];
        do
        {
          void *v205 = 0;
          v205[1] = 0;
          v205[2] = 0;
          v205[3] = v202;
          v205 += 4;
        }
        while (v205 != v206);
      }
      *((void *)a1 + 28) = v202;
      if ((v190 & 1) == 0)
      {
        uint64_t v209 = *(void *)(v185 + 24);
LABEL_283:
        uint64_t v210 = *(void *)(v209 + 40);
        uint64_t v211 = *(void *)(*(void *)v2 + 80);
        if (v211) {
          uint64_t v212 = v211 - 24;
        }
        else {
          uint64_t v212 = 0;
        }
        if (v210 == v212)
        {
          BinOpIdentity = llvm::ConstantExpr::getBinOpIdentity((llvm::ConstantExpr *)(*(unsigned __int8 *)(v470 + 16) - 28), *(llvm::ConstantFP **)v470, 0, 0);
          uint64_t v226 = *((void *)v2 + 28);
          int v227 = *(_DWORD *)(v226 + 20);
          uint64_t v228 = v227 & 0x7FFFFFF;
          uint64_t v216 = (_DWORD *)(v226 + 60);
          if ((v227 & 0x7FFFFFF) == *(_DWORD *)(v226 + 60))
          {
            unsigned int v253 = v228 + (v228 >> 1);
            if (v253 <= 2) {
              uint64_t v254 = 2;
            }
            else {
              uint64_t v254 = v253;
            }
            _DWORD *v216 = v254;
            if ((v227 & 0x40000000) != 0) {
              long long v255 = *(uint64_t **)(v226 - 8);
            }
            else {
              long long v255 = (uint64_t *)(v226 - 32 * v228);
            }
            v468 = v255;
            long long v256 = operator new(40 * v254);
            *(void *)(v226 - 8) = v256;
            uint64_t v257 = v256;
            do
            {
              void *v257 = 0;
              v257[1] = 0;
              v257[2] = 0;
              v257[3] = v226;
              v257 += 4;
            }
            while (v257 != &v256[4 * v254]);
            int v258 = *(_DWORD *)(v226 + 20);
            if ((v258 & 0x40000000) != 0) {
              uint64_t v259 = (uint64_t)v256;
            }
            else {
              uint64_t v259 = v226 - 32 * (v258 & 0x7FFFFFF);
            }
            sub_1CC5E4108((uint64_t)&v487, v468, &v468[4 * v228], v259);
            if (v228)
            {
              memmove((void *)(v259 + 32 * v254), &v468[4 * v228], 8 * v228);
              uint64_t v260 = 4 * v228;
              do
              {
                uint64_t v261 = &v468[v260];
                if (v468[v260 - 4])
                {
                  *(void *)*(v261 - 2) = *(v261 - 3);
                  uint64_t v262 = *(v261 - 3);
                  if (v262) {
                    *(void *)(v262 + 16) = *(v261 - 2);
                  }
                }
                v260 -= 4;
              }
              while (v260 * 8);
            }
            operator delete(v468);
            int v227 = *(_DWORD *)(v226 + 20);
            uint64_t v2 = a1;
          }
          uint64_t v229 = (v227 + 1) & 0x7FFFFFF;
          *(_DWORD *)(v226 + 20) = v227 & 0xF8000000 | (v227 + 1) & 0x7FFFFFF;
          if ((v227 & 0x40000000) != 0) {
            uint64_t v230 = *(void *)(v226 - 8);
          }
          else {
            uint64_t v230 = v226 - 32 * v229;
          }
          uint64_t v231 = (v229 - 1);
          uint64_t v232 = v230 + 32 * v231;
          if (*(void *)v232)
          {
            **(void **)(v232 + 16) = *(void *)(v232 + 8);
            uint64_t v252 = *(void *)(v232 + 8);
            if (v252) {
              *(void *)(v252 + 16) = *(void *)(v232 + 16);
            }
          }
          *(void *)uint64_t v232 = BinOpIdentity;
          if (BinOpIdentity)
          {
            uint64_t v235 = *((void *)BinOpIdentity + 1);
            uint64_t v234 = (void *)((char *)BinOpIdentity + 8);
            uint64_t v233 = v235;
            uint64_t v236 = v230 + 32 * v231;
            *(void *)(v236 + 8) = v235;
            if (v235) {
              *(void *)(v233 + 16) = v236 + 8;
            }
            *(void *)(v236 + 16) = v234;
            *uint64_t v234 = v232;
          }
          int v237 = *(_DWORD *)(v226 + 20);
          uint64_t v223 = v237 & 0x7FFFFFF;
          if ((v237 & 0x40000000) != 0) {
            uint64_t v224 = *(void *)(v226 - 8);
          }
          else {
            uint64_t v224 = v226 - 32 * v223;
          }
        }
        else
        {
          uint64_t v213 = *((void *)v2 + 28);
          int v214 = *(_DWORD *)(v213 + 20);
          uint64_t v215 = v214 & 0x7FFFFFF;
          uint64_t v216 = (_DWORD *)(v213 + 60);
          if ((v214 & 0x7FFFFFF) == *(_DWORD *)(v213 + 60))
          {
            unsigned int v242 = v215 + (v215 >> 1);
            if (v242 <= 2) {
              uint64_t v243 = 2;
            }
            else {
              uint64_t v243 = v242;
            }
            _DWORD *v216 = v243;
            if ((v214 & 0x40000000) != 0) {
              unsigned int v244 = *(uint64_t **)(v213 - 8);
            }
            else {
              unsigned int v244 = (uint64_t *)(v213 - 32 * v215);
            }
            long long v245 = operator new(40 * v243);
            *(void *)(v213 - 8) = v245;
            long long v246 = v245;
            do
            {
              *long long v246 = 0;
              v246[1] = 0;
              v246[2] = 0;
              v246[3] = v213;
              v246 += 4;
            }
            while (v246 != &v245[4 * v243]);
            int v247 = *(_DWORD *)(v213 + 20);
            if ((v247 & 0x40000000) != 0) {
              uint64_t v248 = (uint64_t)v245;
            }
            else {
              uint64_t v248 = v213 - 32 * (v247 & 0x7FFFFFF);
            }
            sub_1CC5E4108((uint64_t)&v487, v244, &v244[4 * v215], v248);
            if (v215)
            {
              memmove((void *)(v248 + 32 * v243), &v244[4 * v215], 8 * v215);
              uint64_t v249 = 4 * v215;
              do
              {
                unint64_t v250 = &v244[v249];
                if (v244[v249 - 4])
                {
                  *(void *)*(v250 - 2) = *(v250 - 3);
                  uint64_t v251 = *(v250 - 3);
                  if (v251) {
                    *(void *)(v251 + 16) = *(v250 - 2);
                  }
                }
                v249 -= 4;
              }
              while (v249 * 8);
            }
            operator delete(v244);
            int v214 = *(_DWORD *)(v213 + 20);
            uint64_t v2 = a1;
          }
          uint64_t v217 = (v214 + 1) & 0x7FFFFFF;
          *(_DWORD *)(v213 + 20) = v214 & 0xF8000000 | (v214 + 1) & 0x7FFFFFF;
          if ((v214 & 0x40000000) != 0) {
            uint64_t v218 = *(void *)(v213 - 8);
          }
          else {
            uint64_t v218 = v213 - 32 * v217;
          }
          uint64_t v219 = (v217 - 1);
          uint64_t v220 = v218 + 32 * v219;
          if (*(void *)v220)
          {
            **(void **)(v220 + 16) = *(void *)(v220 + 8);
            uint64_t v241 = *(void *)(v220 + 8);
            if (v241) {
              *(void *)(v241 + 16) = *(void *)(v220 + 16);
            }
          }
          *(void *)uint64_t v220 = v213;
          uint64_t v221 = *(void *)(v213 + 8);
          *(void *)(v220 + 8) = v221;
          if (v221) {
            *(void *)(v221 + 16) = v220 + 8;
          }
          *(void *)(v218 + 32 * v219 + 16) = v213 + 8;
          *(void *)(v213 + 8) = v220;
          int v222 = *(_DWORD *)(v213 + 20);
          uint64_t v223 = v222 & 0x7FFFFFF;
          if ((v222 & 0x40000000) != 0) {
            uint64_t v224 = *(void *)(v213 - 8);
          }
          else {
            uint64_t v224 = v213 - 32 * v223;
          }
        }
        *(void *)(v224 + 32 * *v216 + 8 * (v223 - 1)) = v210;
        uint64_t v183 = v470;
        while (1)
        {
          uint64_t v185 = *(void *)(v185 + 8);
          if (!v185) {
            break;
          }
          uint64_t v209 = *(void *)(v185 + 24);
          unsigned int v238 = *(unsigned __int8 *)(v209 + 16);
          if (v209) {
            BOOL v239 = v238 >= 0x1C;
          }
          else {
            BOOL v239 = 0;
          }
          if (v239 && v238 - 29 < 0xB) {
            goto LABEL_283;
          }
        }
      }
      int v207 = *(_DWORD *)(v183 + 20);
      if ((v207 & 0x40000000) != 0) {
        unint64_t v208 = *(llvm::Instruction ***)(v183 - 8);
      }
      else {
        unint64_t v208 = (llvm::Instruction **)(v183 - 32 * (v207 & 0x7FFFFFF));
      }
      uint64_t v28 = (uint64_t)a2;
      BOOL v263 = *v208 != a2;
      int v264 = (llvm::Instruction ***)*((void *)v2 + 28);
      uint64_t v265 = &v208[4 * v263];
      if (*v265)
      {
        *(void *)v265[2] = v265[1];
        uint64_t v266 = v265[1];
        if (v266) {
          *((void *)v266 + 2) = v265[2];
        }
      }
      *uint64_t v265 = (llvm::Instruction *)v264;
      if (v264)
      {
        uint64_t v269 = (llvm::Instruction *)v264[1];
        uint64_t v267 = v264 + 1;
        int v268 = v269;
        uint64_t v270 = &v208[4 * v263];
        v270[1] = v269;
        if (v269) {
          *((void *)v268 + 2) = v270 + 1;
        }
        v270[2] = (llvm::Instruction *)v267;
        void *v267 = v265;
      }
    }
    uint64_t v271 = *((void *)v2 + 16);
    if (!v271)
    {
LABEL_427:
      uint64_t v350 = *((void *)v2 + 5);
      uint64_t v351 = (char *)operator new(0x60uLL);
      uint64_t v352 = v351;
      *((_DWORD *)v351 + 13) = *((_DWORD *)v351 + 13) & 0x38000000 | 1;
      *((void *)v351 + 1) = 0;
      *((void *)v351 + 2) = 0;
      *(void *)uint64_t v351 = 0;
      *((void *)v351 + 4) = ***(void ***)v350 + 1576;
      v353 = (llvm::Value *)(v351 + 32);
      *((void *)v351 + 3) = v351 + 32;
      *((void *)v351 + 5) = 0;
      v351[48] = 30;
      v351[49] = 0;
      *((_WORD *)v351 + 25) = 0;
      *((_DWORD *)v351 + 13) = 1;
      *(_OWORD *)(v351 + 56) = 0u;
      v354 = v351 + 56;
      *(_OWORD *)(v351 + 72) = 0u;
      *((_DWORD *)v351 + 22) = 0;
      if (v472)
      {
        uint64_t v389 = *(void *)(v472 + 40);
        v390 = (uint64_t *)(v472 + 24);
        *((void *)v351 + 9) = v389;
        *(_WORD *)(v389 + 18) &= ~0x8000u;
        if ((v351[55] & 0x10) != 0
          && (uint64_t v448 = *(void *)(v389 + 56)) != 0
          && (unint64_t v449 = *(llvm::ValueSymbolTable **)(v448 + 104)) != 0)
        {
          llvm::ValueSymbolTable::reinsertValue(v449, v353);
          uint64_t v450 = *(void *)v352;
          uint64_t v451 = *v390;
          *((void *)v352 + 7) = *v390;
          *((void *)v352 + 8) = v390;
          *(void *)(v451 + 8) = v354;
          uint64_t *v390 = (uint64_t)v354;
          if (v450)
          {
            **((void **)v352 + 2) = *((void *)v352 + 1);
            uint64_t v452 = *((void *)v352 + 1);
            if (v452) {
              *(void *)(v452 + 16) = *((void *)v352 + 2);
            }
          }
        }
        else
        {
          uint64_t v391 = *v390;
          *((void *)v352 + 7) = *v390;
          *((void *)v352 + 8) = v390;
          *(void *)(v391 + 8) = v354;
          uint64_t *v390 = (uint64_t)v354;
        }
      }
      *(void *)uint64_t v352 = v350;
      uint64_t v357 = *(void *)(v350 + 8);
      int v356 = (void *)(v350 + 8);
      uint64_t v355 = v357;
      *((void *)v352 + 1) = v357;
      if (v357) {
        *(void *)(v355 + 16) = v352 + 8;
      }
      *((void *)v352 + 2) = v356;
      *int v356 = v352;
      unint64_t v358 = *(unsigned __int8 **)(v28 + 48);
      uint64_t v475 = v358;
      if (v358) {
        llvm::MetadataTracking::track((uint64_t)&v475, v358, 2);
      }
      v361 = (unsigned __int8 *)*((void *)v352 + 10);
      int v360 = (unsigned __int8 **)(v352 + 80);
      v359 = v361;
      if (!v361)
      {
LABEL_433:
        uint64_t v362 = v475;
        *int v360 = v475;
        if (v362)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v475, v362, (uint64_t)v360);
          uint64_t v475 = 0;
        }
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      }
      int v364 = *v359;
      if ((v364 - 4) > 0x1E)
      {
        if ((v364 - 3) >= 0xFFFFFFFE) {
          char v434 = v359;
        }
        else {
          char v434 = 0;
        }
        if ((v364 - 3) < 0xFFFFFFFE)
        {
          if (v364 == 3) {
            *((void *)v359 + 1) = 0;
          }
          goto LABEL_433;
        }
        unint64_t v366 = (unint64_t)(v434 + 8);
      }
      else
      {
        if ((v359[1] & 0x7F) != 2 && !*((_DWORD *)v359 + 3)) {
          goto LABEL_433;
        }
        uint64_t v365 = *((void *)v359 + 2);
        if ((v365 & 4) == 0) {
          goto LABEL_433;
        }
        unint64_t v366 = v365 & 0xFFFFFFFFFFFFFFF8;
        if (!v366) {
          goto LABEL_433;
        }
      }
      unint64_t v487 = v360;
      sub_1CC5FA668(v366 + 16, &v487);
      goto LABEL_433;
    }
    uint64_t v272 = *(_DWORD *)(v472 + 20) & 0x7FFFFFF;
    if (v272)
    {
      if (v183) {
        goto LABEL_373;
      }
      uint64_t v273 = *(void *)(v472 - 32 * v272);
      if (v273 == v28) {
        goto LABEL_373;
      }
    }
    else
    {
      if (v183)
      {
LABEL_373:
        int v274 = *(_DWORD *)(v271 + 20);
        uint64_t v275 = v274 & 0x7FFFFFF;
        if ((v274 & 0x7FFFFFF) == *(_DWORD *)(v271 + 60))
        {
          unsigned int v392 = v275 + (v275 >> 1);
          if (v392 <= 2) {
            uint64_t v393 = 2;
          }
          else {
            uint64_t v393 = v392;
          }
          *(_DWORD *)(v271 + 60) = v393;
          if ((v274 & 0x40000000) != 0) {
            uint64_t v394 = *(uint64_t **)(v271 - 8);
          }
          else {
            uint64_t v394 = (uint64_t *)(v271 - 32 * v275);
          }
          int v395 = operator new(40 * v393);
          *(void *)(v271 - 8) = v395;
          v396 = v395;
          do
          {
            void *v396 = 0;
            v396[1] = 0;
            v396[2] = 0;
            v396[3] = v271;
            v396 += 4;
          }
          while (v396 != &v395[4 * v393]);
          int v397 = *(_DWORD *)(v271 + 20);
          if ((v397 & 0x40000000) != 0) {
            uint64_t v398 = (uint64_t)v395;
          }
          else {
            uint64_t v398 = v271 - 32 * (v397 & 0x7FFFFFF);
          }
          sub_1CC5E4108((uint64_t)&v487, v394, &v394[4 * v275], v398);
          if (v275)
          {
            memmove((void *)(v398 + 32 * v393), &v394[4 * v275], 8 * v275);
            uint64_t v399 = 4 * v275;
            do
            {
              int64_t v400 = &v394[v399];
              if (v394[v399 - 4])
              {
                *(void *)*(v400 - 2) = *(v400 - 3);
                uint64_t v401 = *(v400 - 3);
                if (v401) {
                  *(void *)(v401 + 16) = *(v400 - 2);
                }
              }
              v399 -= 4;
            }
            while (v399 * 8);
          }
          operator delete(v394);
          int v274 = *(_DWORD *)(v271 + 20);
          uint64_t v2 = a1;
          uint64_t v28 = (uint64_t)a2;
        }
        uint64_t v276 = (v274 + 1) & 0x7FFFFFF;
        *(_DWORD *)(v271 + 20) = v274 & 0xF8000000 | (v274 + 1) & 0x7FFFFFF;
        uint64_t v277 = (v276 - 1);
        if ((v274 & 0x40000000) != 0) {
          uint64_t v278 = *(void *)(v271 - 8);
        }
        else {
          uint64_t v278 = v271 - 32 * v276;
        }
        uint64_t v279 = v278 + 32 * v277;
        uint64_t v280 = v279;
        if (*(void *)v279)
        {
          **(void **)(v279 + 16) = *(void *)(v279 + 8);
          uint64_t v387 = *(void *)(v279 + 8);
          if (v387) {
            *(void *)(v387 + 16) = *(void *)(v279 + 16);
          }
        }
        *(void *)uint64_t v279 = v271;
        uint64_t v281 = *(void *)(v271 + 8);
        *(void *)(v279 + 8) = v281;
        uint64_t v282 = v279 + 8;
        if (v281) {
          *(void *)(v281 + 16) = v282;
        }
        *(void *)(v278 + 32 * v277 + 16) = v271 + 8;
        *(void *)(v271 + 8) = v280;
        int v283 = *(_DWORD *)(v271 + 20);
        uint64_t v284 = v283 & 0x7FFFFFF;
        if ((v283 & 0x40000000) != 0) {
          uint64_t v285 = *(void *)(v271 - 8);
        }
        else {
          uint64_t v285 = v271 - 32 * v284;
        }
        *(void *)(v285 + 32 * *(unsigned int *)(v271 + 60) + 8 * (v284 - 1)) = v471;
        uint64_t v286 = *((void *)v2 + 17);
        int v287 = *(_DWORD *)(v286 + 20);
        uint64_t v288 = v287 & 0x7FFFFFF;
        uint64_t v289 = (_DWORD *)(v286 + 60);
        if ((v287 & 0x7FFFFFF) == *(_DWORD *)(v286 + 60))
        {
          unsigned int v402 = v288 + (v288 >> 1);
          if (v402 <= 2) {
            uint64_t v403 = 2;
          }
          else {
            uint64_t v403 = v402;
          }
          *uint64_t v289 = v403;
          if ((v287 & 0x40000000) != 0) {
            uint64_t v404 = *(uint64_t **)(v286 - 8);
          }
          else {
            uint64_t v404 = (uint64_t *)(v286 - 32 * v288);
          }
          uint64_t v405 = operator new(40 * v403);
          *(void *)(v286 - 8) = v405;
          uint64_t v406 = v405;
          do
          {
            *uint64_t v406 = 0;
            v406[1] = 0;
            v406[2] = 0;
            v406[3] = v286;
            v406 += 4;
          }
          while (v406 != &v405[4 * v403]);
          int v407 = *(_DWORD *)(v286 + 20);
          if ((v407 & 0x40000000) != 0) {
            uint64_t v408 = (uint64_t)v405;
          }
          else {
            uint64_t v408 = v286 - 32 * (v407 & 0x7FFFFFF);
          }
          sub_1CC5E4108((uint64_t)&v487, v404, &v404[4 * v288], v408);
          if (v288)
          {
            memmove((void *)(v408 + 32 * v403), &v404[4 * v288], 8 * v288);
            uint64_t v409 = 4 * v288;
            do
            {
              unsigned int v410 = &v404[v409];
              if (v404[v409 - 4])
              {
                *(void *)*(v410 - 2) = *(v410 - 3);
                uint64_t v411 = *(v410 - 3);
                if (v411) {
                  *(void *)(v411 + 16) = *(v410 - 2);
                }
              }
              v409 -= 4;
            }
            while (v409 * 8);
          }
          operator delete(v404);
          int v287 = *(_DWORD *)(v286 + 20);
          uint64_t v2 = a1;
          uint64_t v28 = (uint64_t)a2;
        }
        uint64_t v290 = (v287 + 1) & 0x7FFFFFF;
        *(_DWORD *)(v286 + 20) = v287 & 0xF8000000 | (v287 + 1) & 0x7FFFFFF;
        uint64_t v291 = (v290 - 1);
        if ((v287 & 0x40000000) != 0) {
          uint64_t v292 = *(void *)(v286 - 8);
        }
        else {
          uint64_t v292 = v286 - 32 * v290;
        }
        uint64_t v293 = v292 + 32 * v291;
        uint64_t v294 = v293;
        if (*(void *)v293)
        {
          **(void **)(v293 + 16) = *(void *)(v293 + 8);
          uint64_t v388 = *(void *)(v293 + 8);
          if (v388) {
            *(void *)(v388 + 16) = *(void *)(v293 + 16);
          }
        }
        *(void *)uint64_t v293 = v286;
        uint64_t v295 = *(void *)(v286 + 8);
        *(void *)(v293 + 8) = v295;
        uint64_t v296 = v293 + 8;
        if (v295) {
          *(void *)(v295 + 16) = v296;
        }
        *(void *)(v292 + 32 * v291 + 16) = v286 + 8;
        *(void *)(v286 + 8) = v294;
        int v297 = *(_DWORD *)(v286 + 20);
        uint64_t v298 = v297 & 0x7FFFFFF;
        if ((v297 & 0x40000000) != 0) {
          uint64_t v299 = *(uint64_t ***)(v286 - 8);
        }
        else {
          uint64_t v299 = (uint64_t **)(v286 - 32 * v298);
        }
LABEL_414:
        (&v299[4 * *v289])[(v298 - 1)] = v471;
        uint64_t v334 = *((void *)v2 + 28);
        if (v334)
        {
          if (v183) {
            uint64_t v335 = v183;
          }
          else {
            uint64_t v335 = *((void *)v2 + 28);
          }
          int v336 = *(_DWORD *)(v334 + 20);
          uint64_t v337 = v336 & 0x7FFFFFF;
          if ((v336 & 0x7FFFFFF) == *(_DWORD *)(v334 + 60))
          {
            unsigned int v374 = v337 + (v337 >> 1);
            if (v374 <= 2) {
              uint64_t v375 = 2;
            }
            else {
              uint64_t v375 = v374;
            }
            *(_DWORD *)(v334 + 60) = v375;
            if ((v336 & 0x40000000) != 0) {
              v376 = *(uint64_t **)(v334 - 8);
            }
            else {
              v376 = (uint64_t *)(v334 - 32 * v337);
            }
            uint64_t v377 = operator new(40 * v375);
            *(void *)(v334 - 8) = v377;
            unsigned int v378 = v377;
            do
            {
              *unsigned int v378 = 0;
              v378[1] = 0;
              v378[2] = 0;
              v378[3] = v334;
              v378 += 4;
            }
            while (v378 != &v377[4 * v375]);
            int v379 = *(_DWORD *)(v334 + 20);
            if ((v379 & 0x40000000) != 0) {
              uint64_t v380 = (uint64_t)v377;
            }
            else {
              uint64_t v380 = v334 - 32 * (v379 & 0x7FFFFFF);
            }
            sub_1CC5E4108((uint64_t)&v487, v376, &v376[4 * v337], v380);
            if (v337)
            {
              memmove((void *)(v380 + 32 * v375), &v376[4 * v337], 8 * v337);
              uint64_t v381 = 4 * v337;
              do
              {
                unint64_t v382 = &v376[v381];
                if (v376[v381 - 4])
                {
                  *(void *)*(v382 - 2) = *(v382 - 3);
                  uint64_t v383 = *(v382 - 3);
                  if (v383) {
                    *(void *)(v383 + 16) = *(v382 - 2);
                  }
                }
                v381 -= 4;
              }
              while (v381 * 8);
            }
            operator delete(v376);
            int v336 = *(_DWORD *)(v334 + 20);
            uint64_t v2 = a1;
            uint64_t v28 = (uint64_t)a2;
          }
          uint64_t v338 = (v336 + 1) & 0x7FFFFFF;
          *(_DWORD *)(v334 + 20) = v336 & 0xF8000000 | (v336 + 1) & 0x7FFFFFF;
          uint64_t v339 = (v338 - 1);
          if ((v336 & 0x40000000) != 0) {
            uint64_t v340 = *(void *)(v334 - 8);
          }
          else {
            uint64_t v340 = v334 - 32 * v338;
          }
          uint64_t v341 = v340 + 32 * v339;
          uint64_t v342 = v341;
          if (*(void *)v341)
          {
            **(void **)(v341 + 16) = *(void *)(v341 + 8);
            uint64_t v373 = *(void *)(v341 + 8);
            if (v373) {
              *(void *)(v373 + 16) = *(void *)(v341 + 16);
            }
          }
          *(void *)uint64_t v341 = v335;
          uint64_t v345 = *(void *)(v335 + 8);
          unsigned int v344 = (void *)(v335 + 8);
          uint64_t v343 = v345;
          *(void *)(v341 + 8) = v345;
          uint64_t v346 = v341 + 8;
          if (v345) {
            *(void *)(v343 + 16) = v346;
          }
          *(void *)(v340 + 32 * v339 + 16) = v344;
          void *v344 = v342;
          int v347 = *(_DWORD *)(v334 + 20);
          uint64_t v348 = v347 & 0x7FFFFFF;
          if ((v347 & 0x40000000) != 0) {
            uint64_t v349 = *(void *)(v334 - 8);
          }
          else {
            uint64_t v349 = v334 - 32 * v348;
          }
          *(void *)(v349 + 32 * *(unsigned int *)(v334 + 60) + 8 * (v348 - 1)) = v471;
        }
        goto LABEL_427;
      }
      uint64_t v273 = 0;
    }
    uint64_t v300 = *((void *)v2 + 17);
    unint64_t v487 = "current.ret.tr";
    LOWORD(v490) = 259;
    uint64_t v302 = sub_1CC199EFC(v300, (uint64_t *)v271, v273, (const char **)&v487, v472, 0);
    unsigned int v303 = v2[38];
    if (v303 >= v2[39]) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*((void *)v2 + 18) + 8 * v303) = v302;
    ++v2[38];
    uint64_t v304 = *((void *)v2 + 16);
    int v305 = *(_DWORD *)(v304 + 20);
    uint64_t v306 = v305 & 0x7FFFFFF;
    if ((v305 & 0x7FFFFFF) == *(_DWORD *)(v304 + 60))
    {
      unsigned int v414 = v306 + (v306 >> 1);
      if (v414 <= 2) {
        uint64_t v415 = 2;
      }
      else {
        uint64_t v415 = v414;
      }
      *(_DWORD *)(v304 + 60) = v415;
      if ((v305 & 0x40000000) != 0) {
        uint64_t v416 = *(uint64_t **)(v304 - 8);
      }
      else {
        uint64_t v416 = (uint64_t *)(v304 - 32 * v306);
      }
      int v417 = operator new(40 * v415);
      *(void *)(v304 - 8) = v417;
      unint64_t v418 = v417;
      do
      {
        *unint64_t v418 = 0;
        v418[1] = 0;
        v418[2] = 0;
        v418[3] = v304;
        v418 += 4;
      }
      while (v418 != &v417[4 * v415]);
      int v419 = *(_DWORD *)(v304 + 20);
      if ((v419 & 0x40000000) != 0) {
        uint64_t v420 = (uint64_t)v417;
      }
      else {
        uint64_t v420 = v304 - 32 * (v419 & 0x7FFFFFF);
      }
      sub_1CC5E4108((uint64_t)&v487, v416, &v416[4 * v306], v420);
      if (v306)
      {
        memmove((void *)(v420 + 32 * v415), &v416[4 * v306], 8 * v306);
        uint64_t v421 = 4 * v306;
        do
        {
          int v422 = &v416[v421];
          if (v416[v421 - 4])
          {
            *(void *)*(v422 - 2) = *(v422 - 3);
            uint64_t v423 = *(v422 - 3);
            if (v423) {
              *(void *)(v423 + 16) = *(v422 - 2);
            }
          }
          v421 -= 4;
        }
        while (v421 * 8);
      }
      operator delete(v416);
      int v305 = *(_DWORD *)(v304 + 20);
      uint64_t v2 = a1;
      uint64_t v28 = (uint64_t)a2;
    }
    uint64_t v307 = (v305 + 1) & 0x7FFFFFF;
    *(_DWORD *)(v304 + 20) = v305 & 0xF8000000 | (v305 + 1) & 0x7FFFFFF;
    uint64_t v308 = (v307 - 1);
    if ((v305 & 0x40000000) != 0) {
      uint64_t v309 = *(void *)(v304 - 8);
    }
    else {
      uint64_t v309 = v304 - 32 * v307;
    }
    uint64_t v310 = v309 + 32 * v308;
    if (*(void *)v310)
    {
      **(void **)(v310 + 16) = *(void *)(v310 + 8);
      uint64_t v412 = *(void *)(v310 + 8);
      if (v412) {
        *(void *)(v412 + 16) = *(void *)(v310 + 16);
      }
    }
    *(void *)uint64_t v310 = v302;
    if (v302)
    {
      uint64_t v313 = *((void *)v302 + 1);
      uint64_t v312 = (void *)((char *)v302 + 8);
      uint64_t v311 = v313;
      uint64_t v314 = v309 + 32 * v308;
      *(void *)(v314 + 8) = v313;
      if (v313) {
        *(void *)(v311 + 16) = v314 + 8;
      }
      *(void *)(v314 + 16) = v312;
      *uint64_t v312 = v310;
    }
    int v315 = *(_DWORD *)(v304 + 20);
    uint64_t v316 = v315 & 0x7FFFFFF;
    if ((v315 & 0x40000000) != 0) {
      uint64_t v317 = *(void *)(v304 - 8);
    }
    else {
      uint64_t v317 = v304 - 32 * v316;
    }
    *(void *)(v317 + 32 * *(unsigned int *)(v304 + 60) + 8 * (v316 - 1)) = v471;
    unsigned int v318 = (uint64_t ***)*((void *)v2 + 17);
    uint64_t v319 = *v318;
    int v320 = **v318;
    uint64_t v321 = *v320;
    Splat = *(uint64_t **)(*v320 + 1560);
    if (!Splat)
    {
      unsigned int v445 = *(llvm::ConstantInt **)(v321 + 1888);
      unsigned int v446 = *(_DWORD *)(v321 + 1896);
      LODWORD(v488) = v446 >> 8;
      if (v446 >> 8 > 0x40) {
        operator new[]();
      }
      if (v446 <= 0xFF) {
        char v447 = 0;
      }
      else {
        char v447 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v446) + 63);
      }
      unint64_t v487 = (void *)(v447 & 1);
      Splat = llvm::ConstantInt::get(v445, (llvm::LLVMContext *)&v487, v301);
      if (v488 >= 0x41 && v487) {
        MEMORY[0x1D25D9CB0](v487, 0x1000C8000313F17);
      }
      *(void *)(v321 + 1560) = Splat;
    }
    if ((v319[1] & 0xFE) == 0x12) {
      Splat = (uint64_t *)llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v319 + 8) | ((unint64_t)(*((_DWORD *)v319 + 2) == 19) << 32)), (uint64_t)Splat);
    }
    uint64_t v289 = (_DWORD *)v318 + 15;
    int v323 = *((_DWORD *)v318 + 5);
    uint64_t v324 = v323 & 0x7FFFFFF;
    if ((v323 & 0x7FFFFFF) == *((_DWORD *)v318 + 15))
    {
      unsigned int v424 = v324 + (v324 >> 1);
      if (v424 <= 2) {
        uint64_t v425 = 2;
      }
      else {
        uint64_t v425 = v424;
      }
      *uint64_t v289 = v425;
      if ((v323 & 0x40000000) != 0) {
        uint64_t v426 = (uint64_t *)*(v318 - 1);
      }
      else {
        uint64_t v426 = (uint64_t *)&v318[-4 * v324];
      }
      unint64_t v427 = (uint64_t *)operator new(40 * v425);
      *(v318 - 1) = (uint64_t **)v427;
      uint64_t v428 = v427;
      do
      {
        uint64_t *v428 = 0;
        v428[1] = 0;
        v428[2] = 0;
        v428[3] = (uint64_t)v318;
        v428 += 4;
      }
      while (v428 != &v427[4 * v425]);
      int v429 = *((_DWORD *)v318 + 5);
      if ((v429 & 0x40000000) != 0) {
        uint64_t v430 = (uint64_t)v427;
      }
      else {
        uint64_t v430 = (uint64_t)&v318[-4 * (v429 & 0x7FFFFFF)];
      }
      sub_1CC5E4108((uint64_t)&v487, v426, &v426[4 * v324], v430);
      if (v324)
      {
        memmove((void *)(v430 + 32 * v425), &v426[4 * v324], 8 * v324);
        uint64_t v431 = 4 * v324;
        do
        {
          unint64_t v432 = &v426[v431];
          if (v426[v431 - 4])
          {
            *(void *)*(v432 - 2) = *(v432 - 3);
            uint64_t v433 = *(v432 - 3);
            if (v433) {
              *(void *)(v433 + 16) = *(v432 - 2);
            }
          }
          v431 -= 4;
        }
        while (v431 * 8);
      }
      operator delete(v426);
      int v323 = *((_DWORD *)v318 + 5);
      uint64_t v2 = a1;
      uint64_t v28 = (uint64_t)a2;
    }
    uint64_t v325 = (v323 + 1) & 0x7FFFFFF;
    *((_DWORD *)v318 + 5) = v323 & 0xF8000000 | (v323 + 1) & 0x7FFFFFF;
    uint64_t v326 = (v325 - 1);
    uint64_t v183 = v470;
    if ((v323 & 0x40000000) != 0) {
      int v327 = *(v318 - 1);
    }
    else {
      int v327 = (uint64_t **)&v318[-4 * v325];
    }
    v328 = &v327[4 * v326];
    if (*v328)
    {
      *v328[2] = (uint64_t)v328[1];
      char v413 = v328[1];
      if (v413) {
        v413[2] = (uint64_t)v328[2];
      }
    }
    void *v328 = Splat;
    if (Splat)
    {
      int v331 = (uint64_t *)Splat[1];
      uint64_t v330 = Splat + 1;
      unsigned int v329 = v331;
      uint64_t v332 = &v327[4 * v326];
      v332[1] = v331;
      if (v331) {
        v329[2] = (uint64_t)(v332 + 1);
      }
      v332[2] = v330;
      *uint64_t v330 = (uint64_t)v328;
    }
    int v333 = *((_DWORD *)v318 + 5);
    uint64_t v298 = v333 & 0x7FFFFFF;
    if ((v333 & 0x40000000) != 0) {
      uint64_t v299 = *(v318 - 1);
    }
    else {
      uint64_t v299 = (uint64_t **)&v318[-4 * v298];
    }
    goto LABEL_414;
  }
  uint64_t v470 = 0;
  while (1)
  {
    unsigned int v10 = (llvm::AAResults *)*((void *)v2 + 2);
    if (sub_1CBF63B28(v9)) {
      goto LABEL_15;
    }
    if (*(unsigned char *)(v9 + 16) == 84)
    {
      uint64_t v11 = *(void *)(v9 - 32);
      if (v11)
      {
        if (!*(unsigned char *)(v11 + 16)
          && *(void *)(v11 + 24) == *(void *)(v9 + 72)
          && (*(unsigned char *)(v11 + 33) & 0x20) != 0
          && *(_DWORD *)(*(void *)(v7 - 56) + 36) == 167
          && llvm::findAllocaForValue(*(llvm **)(v7 - 32 * (*(_DWORD *)(v7 - 4) & 0x7FFFFFF) + 8), 0))
        {
          goto LABEL_15;
        }
      }
    }
    if (llvm::Instruction::mayHaveSideEffects((llvm::Instruction *)v9)) {
      goto LABEL_47;
    }
    if (!v8 && *(unsigned char *)(v9 + 16) == 60 && llvm::Instruction::mayHaveSideEffects(a2)) {
      break;
    }
LABEL_35:
    int v17 = *(_DWORD *)(v9 + 20);
    if ((v17 & 0x40000000) != 0)
    {
      uint64_t v19 = *(llvm::Instruction ***)(v9 - 8);
      uint64_t v18 = v17 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v18 = v17 & 0x7FFFFFF;
      uint64_t v19 = (llvm::Instruction **)(v9 - 32 * v18);
    }
    if (v18)
    {
      uint64_t v20 = 32 * v18;
      uint64_t v21 = v19;
      while (*v21 != a2)
      {
        v21 += 4;
        v20 -= 32;
        if (!v20)
        {
          uint64_t v21 = &v19[4 * v18];
          break;
        }
      }
    }
    else
    {
      uint64_t v21 = v19;
    }
    if (v18 != ((char *)v21 - (char *)v19) >> 5) {
      goto LABEL_47;
    }
LABEL_15:
    uint64_t v7 = *(void *)(v7 + 8);
    BOOL v8 = v7 == 0;
    if (v7) {
      uint64_t v9 = v7 - 24;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v6 = v472;
    if (v9 == v472) {
      goto LABEL_65;
    }
  }
  uint64_t v12 = *(void *)(*(void *)(*(void *)(v9 + 40) + 56) + 40) + 272;
  uint64_t v13 = *(void **)(v9 - 32);
  uint64_t v14 = sub_1CB83544C(v12, *(void *)v9);
  if (v15 == 1) {
    unint64_t v16 = -2;
  }
  else {
    unint64_t v16 = (unint64_t)(v14 + 7) >> 3;
  }
  llvm::Instruction::getAAMetadata((uint64_t ***)v9, &v489);
  unint64_t v487 = v13;
  uint64_t v488 = v16;
  if ((llvm::AAResults::getModRefInfo(v10, a2, (const llvm::MemoryLocation *)&v487) & 2) == 0)
  {
    uint64_t v2 = a1;
    if (!llvm::isSafeToLoadUnconditionally(*(llvm::Value **)(v9 - 32), *(void *)v9, ((unint64_t)*(unsigned __int16 *)(v9 + 18) >> 1) & 0x3F, v12, (uint64_t *)v9, 0, 0))goto LABEL_47; {
    goto LABEL_35;
    }
  }
  uint64_t v2 = a1;
LABEL_47:
  if (*((void *)v2 + 28)) {
    return 0;
  }
  switch(*(unsigned char *)(v9 + 16))
  {
    case ')':
    case '-':
      goto LABEL_50;
    case '*':
    case '.':
      if ((~*(unsigned __int8 *)(v9 + 17) & 0x12) == 0) {
        goto LABEL_50;
      }
      return 0;
    case '+':
    case ',':
      return 0;
    default:
      if (*(unsigned __int8 *)(v9 + 16) - 56 >= 3) {
        return 0;
      }
LABEL_50:
      if (!llvm::Instruction::isCommutative((llvm::Instruction *)v9)) {
        return 0;
      }
      int v22 = *(_DWORD *)(v9 + 20);
      if ((v22 & 0x40000000) != 0) {
        uint64_t v23 = *(llvm::Instruction ***)(v9 - 8);
      }
      else {
        uint64_t v23 = (llvm::Instruction **)(v9 - 32 * (v22 & 0x7FFFFFF));
      }
      if (*v23 == a2)
      {
        if (v23[4] == a2) {
          return 0;
        }
      }
      else if (v23[4] != a2)
      {
        return 0;
      }
      uint64_t v24 = *(void *)(v9 + 8);
      if (v24)
      {
        if (!*(void *)(v24 + 8))
        {
          uint64_t v470 = v9;
          if (*(unsigned char *)(*(void *)(v24 + 24) + 16) == 29) {
            goto LABEL_15;
          }
        }
      }
      return 0;
  }
}

void sub_1CCEEF1A0(uint64_t a1)
{
}

uint64_t sub_1CCEEF248(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCF8C08;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F26412B0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF8C10, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CCEEF1A0;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCF8C10, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void llvm::TLSVariableHoistPass::collectTLSCandidates(llvm::TLSVariableHoistPass *this, llvm::Function *a2)
{
  uint64_t v2 = *((void *)a2 + 5);
  uint64_t v3 = v2 + 8;
  uint64_t v4 = *(void *)(v2 + 16);
  if (v4 != v3)
  {
    while (1)
    {
      uint64_t v6 = v4 - 56;
      if (!v4) {
        uint64_t v6 = 0;
      }
      if ((*(unsigned char *)(v6 + 33) & 0x1C) != 0) {
        break;
      }
      uint64_t v4 = *(void *)(v4 + 8);
      if (v4 == v3) {
        return;
      }
    }
    sub_1CD786B90((uint64_t)this + 16);
    if (*((llvm::Function **)a2 + 10) != (llvm::Function *)((char *)a2 + 72)) {
      llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry();
    }
  }
}

void llvm::TLSVariableHoistPass::getNearestLoopDomInst(llvm::TLSVariableHoistPass *this, llvm::BasicBlock *a2, llvm::Loop **a3)
{
  do
    a3 = (llvm::Loop **)*a3;
  while (a3);
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor();
}

uint64_t llvm::TLSVariableHoistPass::tryReplaceTLSCandidates(llvm::TLSVariableHoistPass *this, llvm::Function *a2)
{
  uint64_t v2 = (llvm::GlobalVariable **)*((void *)this + 5);
  uint64_t v3 = (llvm::GlobalVariable **)*((void *)this + 6);
  if (v2 == v3)
  {
    LOBYTE(v6) = 0;
  }
  else
  {
    int v6 = 0;
    do
    {
      uint64_t v7 = *v2;
      v2 += 19;
      v6 |= llvm::TLSVariableHoistPass::tryReplaceTLSCandidate((uint64_t **)this, a2, v7);
    }
    while (v2 != v3);
  }
  return v6 & 1;
}

void sub_1CCEEF70C()
{
}

void sub_1CCEEF748(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F26412B0;
  sub_1CD719F64((uint64_t)a1 + 48);

  llvm::Pass::~Pass(a1);
}

void sub_1CCEEF79C(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F26412B0;
  sub_1CD719F64((uint64_t)a1 + 48);
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CCEEF804()
{
  return "TLS Variable Hoist";
}

void sub_1CCEEF814(llvm::PassRegistry *a1, uint64_t a2)
{
  v4[0] = &unk_1F2617E40;
  v4[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v4);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);

  sub_1CB843600(a2, a2, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
}

uint64_t sub_1CCEEF8A0(uint64_t **a1, llvm::LLVMContextImpl ****a2)
{
  if (llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, a2)) {
    return 0;
  }
  uint64_t v5 = a1[1];
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (v6 == v7)
  {
LABEL_6:
    uint64_t v8 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v6 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v6 += 16;
      if (v6 == v7) {
        goto LABEL_6;
      }
    }
    uint64_t v8 = *(void *)(v6 + 8);
  }
  uint64_t v9 = (llvm::DominatorTree *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v8 + 96))(v8, &llvm::DominatorTreeWrapperPass::ID)+ 32);
  unsigned int v10 = a1[1];
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  if (v11 == v12)
  {
LABEL_11:
    uint64_t v13 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v11 != &llvm::LoopInfoWrapperPass::ID)
    {
      v11 += 16;
      if (v11 == v12) {
        goto LABEL_11;
      }
    }
    uint64_t v13 = *(void *)(v11 + 8);
  }
  uint64_t v14 = (llvm::LoopInfo *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v13 + 96))(v13, &llvm::LoopInfoWrapperPass::ID)+ 32);

  return llvm::TLSVariableHoistPass::runImpl(a1 + 4, (llvm::Function *)a2, v9, v14);
}

void sub_1CCEEF9E0(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v5 = (void *)a1[1];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = 0x86BCA1AF286BCA1BLL * (((uint64_t)v5 - *a1) >> 3);
    if (v7 + 1 > 0x1AF286BCA1AF286) {
      abort();
    }
    unint64_t v8 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v4 - *a1) >> 3);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= v7 + 1) {
      uint64_t v9 = v7 + 1;
    }
    if (v8 >= 0xD79435E50D7943) {
      unint64_t v10 = 0x1AF286BCA1AF286;
    }
    else {
      unint64_t v10 = v9;
    }
    uint64_t v21 = a1 + 2;
    if (v10 > 0x1AF286BCA1AF286) {
      sub_1CB833614();
    }
    uint64_t v11 = 152 * v10;
    uint64_t v12 = (char *)operator new(152 * v10);
    uint64_t v13 = &v12[152 * v7];
    __p = v12;
    uint64_t v18 = v13;
    uint64_t v20 = &v12[v11];
    *(void *)uint64_t v13 = *(void *)a2;
    *((void *)v13 + 1) = v13 + 24;
    *((void *)v13 + 2) = 0x800000000;
    if (*(_DWORD *)(a2 + 16)) {
      sub_1CD727100((uint64_t)(v13 + 8), a2 + 8);
    }
    uint64_t v19 = v13 + 152;
    sub_1CD7870B4(a1, &__p);
    uint64_t v6 = (void *)a1[1];
    uint64_t v14 = v18;
    for (unsigned int i = v19; i != v14; i -= 152)
    {
      unint64_t v16 = (char *)*((void *)i - 18);
      if (i - 128 != v16) {
        free(v16);
      }
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else
  {
    void *v5 = *(void *)a2;
    v5[1] = v5 + 3;
    void v5[2] = 0x800000000;
    if (*(_DWORD *)(a2 + 16)) {
      sub_1CD727100((uint64_t)(v5 + 1), a2 + 8);
    }
    uint64_t v6 = v5 + 19;
  }
  a1[1] = (uint64_t)v6;
}

uint64_t sub_1CCEEFB8C()
{
  char v3 = 0;
  unint64_t v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"hoist the TLS loads in PIC model to eliminate redundant TLS address calculation.";
  v1.n128_u64[1] = 80;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCF8B48, "tls-load-hoist", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCF8B48, &dword_1CB82C000);
}

void sub_1CCEEFC18()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::getLoopsInPreorder();
}

void sub_1CCEF0460(llvm *a1)
{
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeOptimizationRemarkEmitterWrapperPassPass(a1, v2);
  operator new();
}

uint64_t sub_1CCEF0508(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCF8C18;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F2641350;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF8C20, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CCEF0460;
    v5[1] = &PassRegistry;
    unint64_t v4 = v5;
    std::__call_once(&qword_1EBCF8C20, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CCEF05B8()
{
}

void sub_1CCEF05F8(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CCEF0630(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
}

uint64_t sub_1CCEF067C(llvm::FunctionPass *a1, llvm::LLVMContextImpl ****a2)
{
  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) == 0)
  {
    char v3 = (uint64_t *)*((void *)a1 + 1);
    uint64_t v4 = *v3;
    uint64_t v5 = v3[1];
    if (v4 == v5)
    {
LABEL_5:
      uint64_t v6 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v4 != &llvm::OptimizationRemarkEmitterWrapperPass::ID)
      {
        v4 += 16;
        if (v4 == v5) {
          goto LABEL_5;
        }
      }
      uint64_t v6 = *(void *)(v4 + 8);
    }
    (*(void (**)(uint64_t, void *))(*(void *)v6 + 96))(v6, &llvm::OptimizationRemarkEmitterWrapperPass::ID);
    unint64_t v7 = (uint64_t *)*((void *)a1 + 1);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    if (v8 == v9)
    {
LABEL_10:
      uint64_t v10 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v8 != &llvm::LoopInfoWrapperPass::ID)
      {
        v8 += 16;
        if (v8 == v9) {
          goto LABEL_10;
        }
      }
      uint64_t v10 = *(void *)(v8 + 8);
    }
    (*(void (**)(uint64_t, void *))(*(void *)v10 + 96))(v10, &llvm::LoopInfoWrapperPass::ID);
    sub_1CCEEFC18();
  }
  return 0;
}

uint64_t sub_1CCEF0788(uint64_t result, uint64_t a2)
{
  if (*(_WORD *)(a2 + 24) != 281)
  {
    uint64_t v3 = result;
    v8[0] = a2;
    sub_1CD7874E4(result + 592, v8);
    int v4 = *(_DWORD *)(v3 + 48);
    uint64_t v6 = a2;
    int v7 = v4;
    uint64_t result = sub_1CD5092D4((uint64_t)v8, v3 + 568, &v6, &v7);
    if (v9)
    {
      unsigned int v5 = *(_DWORD *)(v3 + 48);
      if (v5 >= *(_DWORD *)(v3 + 52)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v3 + 40) + 8 * v5) = a2;
      ++*(_DWORD *)(v3 + 48);
    }
  }
  return result;
}

uint64_t sub_1CCEF083C(uint64_t *a1, uint64_t a2, uint64_t *a3, int a4, int a5)
{
  uint64_t v10 = *a1;
  uint64_t v16 = *(void *)(v10 + 656);
  uint64_t v17 = v10;
  *(void *)(v10 + 656) = &v15;
  int v15 = &unk_1F26413F0;
  uint64_t v18 = a1;
  sub_1CD8020C0(v10, a2, a3);
  if (a4 && a5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = &a3[2 * v11];
      if (*v12)
      {
        sub_1CCEF0788((uint64_t)a1, *v12);
        for (uint64_t i = *(void *)(*v12 + 48); i; uint64_t i = *(void *)(i + 32))
          sub_1CCEF0788((uint64_t)a1, *(void *)(i + 16));
      }
      ++v11;
    }
    while (v11 != a4);
  }
  if (!*(void *)(a2 + 48)) {
    sub_1CCEF1420(a1, a2);
  }
  *(void *)(v17 + 656) = v16;
  return a2;
}

BOOL sub_1CCEF0930(uint64_t *a1, uint64_t a2)
{
  v21[16] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = a2;
  uint64_t v2 = *(void *)(a2 + 48);
  if (!v2)
  {
    v18[0] = 1;
    uint64_t v5 = 1;
    int64x2_t v6 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *(int64x2_t *)&v18[v5] = v6;
      v5 += 2;
    }
    while (v5 != 17);
    uint64_t v19 = v21;
    uint64_t v20 = 0x1000000000;
    sub_1CD6A0E6C((uint64_t)v18, &v17);
    unsigned int v7 = v20;
    do
    {
      uint64_t v8 = (char *)v19 + 8 * v7;
      uint64_t v9 = *((void *)v8 - 1);
      sub_1CCEF1754(v18, (void *)v8 - 1);
      unsigned int v7 = v20 - 1;
      LODWORD(v20) = v20 - 1;
      uint64_t v17 = v9;
      if (v9)
      {
        if (*(void *)(v9 + 48))
        {
          sub_1CCEF0788((uint64_t)a1, v9);
        }
        else
        {
          uint64_t v10 = *(unsigned __int16 *)(v9 + 56);
          if (*(_WORD *)(v9 + 56))
          {
            uint64_t v11 = *(uint64_t **)(v9 + 32);
            uint64_t v12 = 40 * v10;
            do
            {
              uint64_t v13 = *v11;
              v11 += 5;
              uint64_t v16 = v13;
              sub_1CD6A0E6C((uint64_t)v18, &v16);
              v12 -= 40;
            }
            while (v12);
            uint64_t v9 = v17;
          }
          sub_1CCEF1528((uint64_t)a1, v9);
          uint64_t v14 = *a1;
          uint64_t v15 = v17;
          sub_1CCFCBF2C(*a1, v17);
          sub_1CD7EA4EC(v14, v15);
        }
        unsigned int v7 = v20;
      }
    }
    while (v7);
    if (v19 != v21) {
      free(v19);
    }
    if ((v18[0] & 1) == 0) {
      MEMORY[0x1D25D9CD0](v18[1], 8);
    }
  }
  return v2 == 0;
}

void sub_1CCEF0AD0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v9 = *(void *)(v4 + 656);
  uint64_t v10 = v4;
  *(void *)(v4 + 656) = &v8;
  uint64_t v8 = &unk_1F26413F0;
  uint64_t v11 = a1;
  sub_1CD800DA0(v4, a2[2], a2[3], a2[4], a2[5]);
  uint64_t v5 = a2[4];
  for (uint64_t i = *(void *)(v5 + 48); i; uint64_t i = *(void *)(i + 32))
    sub_1CCEF0788((uint64_t)a1, *(void *)(i + 16));
  sub_1CCEF0788((uint64_t)a1, v5);
  uint64_t v7 = a2[2];
  if (!*(void *)(v7 + 48)) {
    sub_1CCEF1420(a1, v7);
  }
  *(void *)(v10 + 656) = v9;
}

void sub_1CCEF0B90(uint64_t a1, int a2, uint64_t a3, unsigned int a4)
{
  v118[16] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v87 = (uint64_t *)a1;
  uint64_t v88 = v7;
  uint64_t v89 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 40) + 16) + 128))(*(void *)(*(void *)(a1 + 40) + 16));
  int v90 = 0;
  unsigned int v91 = a4;
  __int16 v92 = 0;
  BOOL v93 = 0;
  uint64_t v8 = v98;
  uint64_t v96 = v98;
  uint64_t v97 = 0x4000000000;
  long long v99 = 0u;
  int v100 = 0;
  v101[0] = 1;
  uint64_t v9 = 75;
  int64x2_t v10 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&(&v87)[v9] = v10;
    v9 += 2;
  }
  while (v9 != 107);
  uint64_t v11 = v104;
  int v102 = v104;
  uint64_t v103 = 0x2000000000;
  uint64_t v12 = (llvm::SmallPtrSetImplBase *)&v105;
  uint64_t v105 = v109;
  uint64_t v106 = v109;
  uint64_t v107 = 32;
  int v108 = 0;
  long long v110 = 0u;
  int v111 = 0;
  uint64_t v112 = a3;
  char v13 = sub_1CD7EAF54((uint64_t)v87);
  char v14 = 0;
  char v94 = v13;
  if (v89) {
    char v14 = (*(uint64_t (**)(uint64_t, void))(*(void *)v89 + 96))(v89, v91);
  }
  char v95 = v14;
  unsigned int v113 = 0;
  for (uint64_t i = 13; i != 191; ++i)
  {
    LOBYTE(v114) = i - 12;
    if ((i - 12) >= 2u)
    {
      if (*(void *)(v88 + 8 * i))
      {
        unint64_t v16 = sub_1CB87E200((unsigned __int8 *)&v114);
        if (v16 >= v113) {
          unsigned int v113 = sub_1CB87E200((unsigned __int8 *)&v114);
        }
      }
    }
  }
  int v90 = a2;
  LOBYTE(v92) = a2 > 2;
  HIBYTE(v92) = a2 > 1;
  BOOL v93 = a2 > 0;
  uint64_t v17 = v87;
  uint64_t v84 = v87[82];
  uint64_t v85 = (uint64_t)v87;
  v87[82] = (uint64_t)&v83;
  unsigned int v83 = &unk_1F2641428;
  uint64_t v86 = (uint64_t *)&v87;
  uint64_t v18 = v17 + 26;
  uint64_t v19 = (uint64_t *)v17[27];
  if (v19 != v17 + 26)
  {
    do
    {
      if (v19) {
        uint64_t v20 = (uint64_t)(v19 - 1);
      }
      else {
        uint64_t v20 = 0;
      }
      sub_1CCEF0788((uint64_t)&v87, v20);
      uint64_t v19 = (uint64_t *)v19[1];
    }
    while (v19 != v18);
    uint64_t v17 = v87;
  }
  sub_1CD7875EC((uint64_t)v80, v17[24], v17[25]);
  int64x2_t v75 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
LABEL_18:
  unsigned int v21 = v103;
  while (v21)
  {
    uint64_t v22 = *((void *)v102 + v21 - 1);
    sub_1CCEF1700(v101, v22);
    unsigned int v21 = v103 - 1;
    LODWORD(v103) = v103 - 1;
    if (!*(void *)(v22 + 48))
    {
      sub_1CCEF0930((uint64_t *)&v87, v22);
      goto LABEL_18;
    }
  }
  unsigned int v23 = v97;
  while (v23)
  {
    uint64_t v24 = *((void *)v96 + --v23);
    LODWORD(v97) = v23;
    if (v24)
    {
      if (v100)
      {
        LODWORD(v25) = (v100 - 1) & ((v24 >> 4) ^ (v24 >> 9));
        uint64_t v26 = (uint64_t *)(v99 + 16 * v25);
        uint64_t v27 = *v26;
        if (v24 == *v26)
        {
LABEL_27:
          *uint64_t v26 = -8192;
          *((int32x2_t *)&v99 + 1) = vadd_s32(*(int32x2_t *)((char *)&v99 + 8), (int32x2_t)0x1FFFFFFFFLL);
        }
        else
        {
          int v68 = 1;
          while (v27 != -4096)
          {
            int v69 = v25 + v68++;
            uint64_t v25 = v69 & (v100 - 1);
            uint64_t v27 = *(void *)(v99 + 16 * v25);
            if (v24 == v27)
            {
              uint64_t v26 = (uint64_t *)(v99 + 16 * v25);
              goto LABEL_27;
            }
          }
        }
      }
      if (!sub_1CCEF0930((uint64_t *)&v87, v24))
      {
        uint64_t v28 = v87;
        uint64_t v77 = v87[82];
        uint64_t v78 = (uint64_t)v87;
        v87[82] = (uint64_t)&v76;
        unsigned int v76 = &unk_1F26413F0;
        uint64_t v79 = (uint64_t *)&v87;
        if ((_BYTE)v92)
        {
          uint64_t v72 = v12;
          int v73 = v11;
          BOOL v74 = v8;
          uint64_t v114 = 1;
          for (uint64_t j = 8; j != 136; j += 16)
            *(int64x2_t *)((char *)&v114 + j) = v75;
          uint64_t v116 = v118;
          uint64_t v117 = 0x1000000000;
          BOOL v63 = sub_1CD78EAE8(v28, v24, (uint64_t)&v114);
          uint64_t v64 = (uint64_t *)v116;
          uint64_t v65 = (uint64_t *)((char *)v116 + 8 * v117);
          if (v117)
          {
            do
            {
              uint64_t v66 = *v64;
              for (uint64_t k = *(void *)(*v64 + 48); k; uint64_t k = *(void *)(k + 32))
                sub_1CCEF0788((uint64_t)&v87, *(void *)(k + 16));
              sub_1CCEF0788((uint64_t)&v87, v66);
              ++v64;
            }
            while (v64 != v65);
            uint64_t v64 = (uint64_t *)v116;
          }
          if (v64 != v118) {
            free(v64);
          }
          uint64_t v11 = v73;
          uint64_t v8 = v74;
          uint64_t v12 = v72;
          if ((v114 & 1) == 0) {
            MEMORY[0x1D25D9CD0](v115, 8);
          }
          if (!v63)
          {
LABEL_106:
            *(void *)(v78 + 656) = v77;
            goto LABEL_18;
          }
        }
        int v29 = (char *)v106;
        uint64_t v30 = HIDWORD(v107);
        if (v106 == v105)
        {
          if (HIDWORD(v107))
          {
            int v31 = 0;
            uint64_t v32 = 8 * HIDWORD(v107);
            uint64_t v33 = (uint64_t *)v106;
            while (*v33 != v24)
            {
              if (*v33 == -2) {
                int v31 = v33;
              }
              ++v33;
              v32 -= 8;
              if (!v32)
              {
                if (!v31) {
                  goto LABEL_38;
                }
                *int v31 = v24;
                --v108;
                goto LABEL_62;
              }
            }
            goto LABEL_62;
          }
LABEL_38:
          unsigned int v34 = v107;
          if (HIDWORD(v107) < v107)
          {
            ++HIDWORD(v107);
            *((void *)v106 + v30) = v24;
LABEL_62:
            if (*(_WORD *)(v24 + 56))
            {
              unsigned int v44 = *(uint64_t **)(v24 + 32);
              uint64_t v45 = &v44[5 * *(unsigned __int16 *)(v24 + 56)];
              do
              {
                uint64_t v46 = *v44;
                uint64_t v47 = v105;
                if (v106 == v105)
                {
                  unsigned int v48 = HIDWORD(v107);
                  uint64_t v49 = (char *)v106 + 8 * HIDWORD(v107);
                  if (HIDWORD(v107))
                  {
                    uint64_t v50 = 0;
                    while (*(void *)((char *)v106 + v50) != v46)
                    {
                      v50 += 8;
                      if (8 * HIDWORD(v107) == v50) {
                        goto LABEL_83;
                      }
                    }
                    uint64_t v49 = (char *)v106 + v50;
                  }
LABEL_83:
                  uint64_t v47 = v106;
                }
                else
                {
                  int v51 = v107 - 1;
                  unsigned int v52 = (v107 - 1) & ((v46 >> 4) ^ (v46 >> 9));
                  uint64_t v49 = (char *)v106 + 8 * v52;
                  uint64_t v53 = *(void *)v49;
                  if (*(void *)v49 == -1)
                  {
                    uint64_t v54 = 0;
LABEL_92:
                    if (v54) {
                      uint64_t v49 = v54;
                    }
                    unsigned int v48 = HIDWORD(v107);
                    if (*(void *)v49 != v46) {
                      uint64_t v49 = (char *)v106 + 8 * v107;
                    }
                  }
                  else
                  {
                    uint64_t v54 = 0;
                    int v55 = 1;
                    while (v53 != v46)
                    {
                      if (v54) {
                        BOOL v56 = 0;
                      }
                      else {
                        BOOL v56 = v53 == -2;
                      }
                      if (v56) {
                        uint64_t v54 = v49;
                      }
                      unsigned int v57 = v52 + v55++;
                      unsigned int v52 = v57 & v51;
                      uint64_t v49 = (char *)v106 + 8 * (v57 & v51);
                      uint64_t v53 = *(void *)v49;
                      if (*(void *)v49 == -1) {
                        goto LABEL_92;
                      }
                    }
                    unsigned int v48 = HIDWORD(v107);
                  }
                }
                if (v106 == v47) {
                  unsigned int v58 = v48;
                }
                else {
                  unsigned int v58 = v107;
                }
                if (v49 == (char *)v106 + 8 * v58) {
                  sub_1CCEF0788((uint64_t)&v87, v46);
                }
                v44 += 5;
              }
              while (v44 != v45);
            }
            uint64_t v59 = sub_1CCEF17A8(&v87, v24);
            uint64_t v114 = v59;
            uint64_t v115 = v60;
            if (v59 && v24 != v59)
            {
              if (*(unsigned __int16 *)(v24 + 58) == *(unsigned __int16 *)(v59 + 58)) {
                sub_1CCFCC50C((uint64_t)v87, v24, v59);
              }
              else {
                sub_1CD8020C0((uint64_t)v87, v24, &v114);
              }
              if (*(_WORD *)(v114 + 24) != 1)
              {
                sub_1CCEF0788((uint64_t)&v87, v114);
                for (uint64_t m = *(void *)(v114 + 48); m; uint64_t m = *(void *)(m + 32))
                  sub_1CCEF0788((uint64_t)&v87, *(void *)(m + 16));
              }
              sub_1CCEF0930((uint64_t *)&v87, v24);
            }
            goto LABEL_106;
          }
        }
        else
        {
          unsigned int v34 = v107;
        }
        if (3 * v34 <= 4 * (HIDWORD(v107) - v108))
        {
          if (v34 >= 0x40) {
            v34 *= 2;
          }
          else {
            unsigned int v34 = 128;
          }
        }
        else if (v34 - HIDWORD(v107) >= v34 >> 3)
        {
          goto LABEL_43;
        }
        llvm::SmallPtrSetImplBase::Grow(v12, v34);
        unsigned int v34 = v107;
        int v29 = (char *)v106;
LABEL_43:
        unsigned int v35 = v34 - 1;
        unsigned int v36 = (v34 - 1) & ((v24 >> 4) ^ (v24 >> 9));
        uint64_t v37 = &v29[8 * v36];
        uint64_t v38 = *(void *)v37;
        if (*(void *)v37 == -1)
        {
          uint64_t v39 = 0;
LABEL_55:
          if (v39) {
            int v43 = v39;
          }
          else {
            int v43 = (uint64_t *)v37;
          }
          if (*v43 != v24)
          {
            if (*v43 == -2) {
              --v108;
            }
            else {
              ++HIDWORD(v107);
            }
            uint64_t *v43 = v24;
          }
        }
        else
        {
          uint64_t v39 = 0;
          int v40 = 1;
          while (v38 != v24)
          {
            if (v39) {
              BOOL v41 = 0;
            }
            else {
              BOOL v41 = v38 == -2;
            }
            if (v41) {
              uint64_t v39 = (uint64_t *)v37;
            }
            unsigned int v42 = v36 + v40++;
            unsigned int v36 = v42 & v35;
            uint64_t v37 = &v29[8 * (v42 & v35)];
            uint64_t v38 = *(void *)v37;
            if (*(void *)v37 == -1) {
              goto LABEL_55;
            }
          }
        }
        goto LABEL_62;
      }
      goto LABEL_18;
    }
  }
  uint64_t v70 = (uint64_t)v87;
  int v71 = v82;
  v87[24] = v81;
  *(_DWORD *)(v70 + 200) = v71;
  sub_1CD7EA154((void *)v70);
  sub_1CD802D60((uint64_t)v80);
  *(void *)(v85 + 656) = v84;
  MEMORY[0x1D25D9CD0](v110, 8);
  if (v106 != v105) {
    free(v106);
  }
  if (v102 != v11) {
    free(v102);
  }
  if ((v101[0] & 1) == 0) {
    MEMORY[0x1D25D9CD0](v101[1], 8);
  }
  MEMORY[0x1D25D9CD0](v99, 8);
  if (v96 != v8) {
    free(v96);
  }
}

int32x2_t sub_1CCEF1420(uint64_t *a1, uint64_t a2)
{
  sub_1CCEF1528((uint64_t)a1, a2);
  if (*(_WORD *)(a2 + 56))
  {
    uint64_t v4 = *(uint64_t **)(a2 + 32);
    uint64_t v5 = 40 * *(unsigned __int16 *)(a2 + 56);
    do
    {
      uint64_t v6 = *v4;
      uint64_t v7 = *(void *)(*v4 + 48);
      if (v7 && !*(void *)(v7 + 32) || *(unsigned __int16 *)(v6 + 58) >= 2u) {
        sub_1CCEF0788((uint64_t)a1, v6);
      }
      v4 += 5;
      v5 -= 40;
    }
    while (v5);
  }
  uint64_t v8 = *a1;
  sub_1CCFCBF2C(v8, a2);

  return sub_1CD7EA4EC(v8, a2);
}

void *sub_1CCEF14C0(void *result)
{
  *uint64_t result = &unk_1F26420B8;
  *(void *)(result[2] + 656) = result[1];
  return result;
}

void sub_1CCEF14E8(void *a1)
{
  *a1 = &unk_1F26420B8;
  *(void *)(a1[2] + 656) = a1[1];
  JUMPOUT(0x1D25D9CE0);
}

int32x2_t sub_1CCEF1520(uint64_t a1, uint64_t a2)
{
  return sub_1CCEF1528(*(void *)(a1 + 24), a2);
}

int32x2_t sub_1CCEF1528(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v21 = a2;
  uint64_t v4 = *(void *)(a1 + 1136);
  uint64_t v5 = *(void *)(a1 + 1128);
  if (v4 == v5)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 1148);
    uint64_t v7 = (void *)(v4 + 8 * v6);
    if (v6)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 8 * v6;
      while (*(void *)(v4 + v8) != a2)
      {
        v8 += 8;
        if (v9 == v8) {
          goto LABEL_19;
        }
      }
      uint64_t v7 = (void *)(v4 + v8);
    }
LABEL_19:
    uint64_t v5 = *(void *)(a1 + 1136);
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a1 + 1144);
    int v11 = v10 - 1;
    unsigned int v12 = (v10 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v7 = (void *)(v4 + 8 * v12);
    uint64_t v13 = *v7;
    if (*v7 == -1)
    {
      char v14 = 0;
LABEL_31:
      if (v14) {
        uint64_t v7 = v14;
      }
      if (*v7 != a2) {
        uint64_t v7 = (void *)(v4 + 8 * v10);
      }
    }
    else
    {
      char v14 = 0;
      int v15 = 1;
      while (v13 != a2)
      {
        if (v14) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v13 == -2;
        }
        if (v16) {
          char v14 = v7;
        }
        unsigned int v17 = v12 + v15++;
        unsigned int v12 = v17 & v11;
        uint64_t v7 = (void *)(v4 + 8 * (v17 & v11));
        uint64_t v13 = *v7;
        if (*v7 == -1) {
          goto LABEL_31;
        }
      }
    }
  }
  BOOL v16 = v4 == v5;
  uint64_t v18 = 1144;
  if (v16) {
    uint64_t v18 = 1148;
  }
  if (v7 != (void *)(v4 + 8 * *(unsigned int *)(a1 + v18)))
  {
    void *v7 = -2;
    ++*(_DWORD *)(a1 + 1152);
    uint64_t v2 = v21;
  }
  sub_1CD78756C(a1 + 592, &v21);
  uint64_t v22 = 0;
  if (sub_1CD45B528(*(void *)(a1 + 1416), *(_DWORD *)(a1 + 1432), v2, &v22))
  {
    *(void *)uint64_t v22 = -8192;
    *(int32x2_t *)(a1 + 1424) = vadd_s32(*(int32x2_t *)(a1 + 1424), (int32x2_t)0x1FFFFFFFFLL);
  }
  uint64_t v22 = 0;
  if (sub_1CD40EA84(*(void *)(a1 + 568), *(_DWORD *)(a1 + 584), v2, &v22))
  {
    uint64_t v20 = (void *)v22;
    if (v22 != *(void *)(a1 + 568) + 16 * *(unsigned int *)(a1 + 584))
    {
      *(void *)(*(void *)(a1 + 40) + 8 * *(unsigned int *)(v22 + 8)) = 0;
      void *v20 = -8192;
      int32x2_t result = vadd_s32(*(int32x2_t *)(a1 + 576), (int32x2_t)0x1FFFFFFFFLL);
      *(int32x2_t *)(a1 + 576) = result;
    }
  }
  return result;
}

uint64_t sub_1CCEF1700(_DWORD *a1, uint64_t a2)
{
  uint64_t v5 = 0;
  uint64_t result = sub_1CD77FD5C((uint64_t)a1, a2, &v5);
  if (result)
  {
    void *v5 = -8192;
    int v4 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v4;
  }
  return result;
}

uint64_t sub_1CCEF1754(_DWORD *a1, void *a2)
{
  uint64_t v5 = 0;
  uint64_t result = sub_1CD6A1074((uint64_t)a1, a2, &v5);
  if (result)
  {
    void *v5 = -8192;
    int v4 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v4;
  }
  return result;
}

#error "1CCEF17A8: too big function (funcsize=0)"

void *sub_1CCF28BD8(void *result)
{
  *uint64_t result = &unk_1F26420B8;
  *(void *)(result[2] + 656) = result[1];
  return result;
}

void sub_1CCF28C00(void *a1)
{
  *a1 = &unk_1F26420B8;
  *(void *)(a1[2] + 656) = a1[1];
  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CCF28C38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v4 = a2;
  return sub_1CD7874E4(v2 + 592, &v4);
}

uint64_t *sub_1CCF28C68(uint64_t *a1, uint64_t a2)
{
  uint64_t v565 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(long long **)(a2 + 32);
  long long v5 = *v4;
  long long v541 = *(long long *)((char *)v4 + 40);
  long long v542 = v5;
  uint64_t v6 = v541;
  uint64_t v7 = *(void *)(v541 + 40) + 16 * DWORD2(v541);
  uint64_t v8 = *(llvm **)v7;
  uint64_t v9 = *(void *)(v7 + 8);
  v539 = *(llvm **)v7;
  uint64_t v540 = v9;
  if ((void)v5 == (void)v541 && DWORD2(v542) == DWORD2(v541)) {
    return (uint64_t *)v6;
  }
  uint64_t v10 = *a1;
  int v11 = *(void **)(a2 + 64);
  __dst[0] = v11;
  if (v11)
  {
    llvm::MetadataTracking::track((uint64_t)__dst, (unsigned __int8 *)v11, 2);
    uint64_t v8 = v539;
    uint64_t v9 = v540;
  }
  LODWORD(__dst[1]) = *(_DWORD *)(a2 + 60);
  *(void *)&long long __src = v542;
  DWORD2(__src) = DWORD2(v542);
  uint64_t v550 = (uint64_t *)v541;
  LODWORD(v551) = DWORD2(v541);
  uint64_t v6 = (uint64_t)sub_1CCFDBB80(v10, (const char *)0xAB, (const llvm::APInt *)__dst, v8, v9, (uint64_t *)&__src, 2);
  if (__dst[0])
  {
    int v12 = *(unsigned __int8 *)__dst[0];
    if ((v12 - 4) > 0x1E)
    {
      if ((v12 - 3) >= 0xFFFFFFFE) {
        char v14 = __dst[0];
      }
      else {
        char v14 = 0;
      }
      if ((v12 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v15 = (unint64_t)v14 + 8;
LABEL_17:
        *(void *)&long long __src = __dst;
        sub_1CC5FA668(v15 + 16, &__src);
        goto LABEL_10;
      }
      if (v12 == 3) {
        *((void *)__dst[0] + 1) = 0;
      }
    }
    else if ((*((unsigned char *)__dst[0] + 1) & 0x7F) == 2 || *((_DWORD *)__dst[0] + 3))
    {
      uint64_t v70 = *((void *)__dst[0] + 2);
      if ((v70 & 4) != 0)
      {
        unint64_t v15 = v70 & 0xFFFFFFFFFFFFFFF8;
        if (v15) {
          goto LABEL_17;
        }
      }
    }
  }
LABEL_10:
  if (v6) {
    return (uint64_t *)v6;
  }
  if (sub_1CD7F590C(*a1, v542) && !sub_1CD7F590C(*a1, v541))
  {
    uint64_t v33 = *a1;
    unsigned int v34 = *(unsigned __int8 **)(a2 + 64);
    *(void *)&long long __src = v34;
    if (v34) {
      llvm::MetadataTracking::track((uint64_t)&__src, v34, 2);
    }
    DWORD2(__src) = *(_DWORD *)(a2 + 60);
    uint64_t v35 = *(void *)(v33 + 832);
    if (v35) {
      LOWORD(v35) = *(_WORD *)(v35 + 8);
    }
    unsigned int v36 = sub_1CCFDED5C(v33, 171, (const llvm::APInt *)&__src, v539, v540, v541, *((uint64_t *)&v541 + 1), v20, v542, *((uint64_t *)&v542 + 1), v35);
    goto LABEL_54;
  }
  if ((_BYTE)v539)
  {
    if (v539 - 15 >= 0x9C) {
      goto LABEL_38;
    }
  }
  else if ((*(_DWORD *)(v540 + 8) & 0xFE) != 0x12)
  {
    goto LABEL_38;
  }
  uint64_t v21 = *(unsigned __int8 **)(a2 + 64);
  *(void *)&long long __src = v21;
  if (v21) {
    llvm::MetadataTracking::track((uint64_t)&__src, v21, 2);
  }
  DWORD2(__src) = *(_DWORD *)(a2 + 60);
  uint64_t v6 = (uint64_t)sub_1CCF3FF7C(a1, a2, (const llvm::APInt *)&__src, v16, v17, v18, v19, v20);
  if ((void)__src)
  {
    int v23 = *(unsigned __int8 *)__src;
    if ((v23 - 4) > 0x1E)
    {
      if ((v23 - 3) >= 0xFFFFFFFE) {
        uint64_t v31 = __src;
      }
      else {
        uint64_t v31 = 0;
      }
      if ((v23 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v32 = v31 + 8;
LABEL_45:
        __dst[0] = &__src;
        sub_1CC5FA668(v32 + 16, __dst);
        goto LABEL_31;
      }
      if (v23 == 3) {
        *(void *)(__src + 8) = 0;
      }
    }
    else if ((*(unsigned char *)(__src + 1) & 0x7F) == 2 || *(_DWORD *)(__src + 12))
    {
      uint64_t v97 = *(void *)(__src + 16);
      if ((v97 & 4) != 0)
      {
        unint64_t v32 = v97 & 0xFFFFFFFFFFFFFFF8;
        if (v32) {
          goto LABEL_45;
        }
      }
    }
  }
LABEL_31:
  if (v6) {
    return (uint64_t *)v6;
  }
  if (sub_1CCFCBB88(v541, 0, v22))
  {
    uint64_t v41 = *a1;
    DWORD2(__src) = sub_1CD7878C0((unsigned int *)&v541, v24, v25);
    if (DWORD2(__src) > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&__src);
    }
    *(void *)&long long __src = 0;
    unsigned int v42 = *(void **)(a2 + 64);
    __dst[0] = v42;
    if (v42) {
      llvm::MetadataTracking::track((uint64_t)__dst, (unsigned __int8 *)v42, 2);
    }
    LODWORD(__dst[1]) = *(_DWORD *)(a2 + 60);
    int v43 = (uint64_t *)(*(void *)(v541 + 40) + 16 * DWORD2(v541));
    uint64_t v6 = sub_1CD7EBB14(v41, (llvm::LLVMContext *)&__src, (const llvm::APInt *)__dst, *v43, v43[1], 0, 0);
    if (!__dst[0]) {
      goto LABEL_68;
    }
    int v44 = *(unsigned __int8 *)__dst[0];
    if ((v44 - 4) > 0x1E)
    {
      if ((v44 - 3) >= 0xFFFFFFFE) {
        int v51 = __dst[0];
      }
      else {
        int v51 = 0;
      }
      if ((v44 - 3) < 0xFFFFFFFE)
      {
        if (v44 == 3) {
          *((void *)__dst[0] + 1) = 0;
        }
        goto LABEL_68;
      }
      unint64_t v52 = (unint64_t)v51 + 8;
    }
    else if ((*((unsigned char *)__dst[0] + 1) & 0x7F) != 2 && !*((_DWORD *)__dst[0] + 3) {
           || (uint64_t v150 = *((void *)__dst[0] + 2), (v150 & 4) == 0)
    }
           || (unint64_t v52 = v150 & 0xFFFFFFFFFFFFFFF8) == 0)
    {
LABEL_68:
      if (DWORD2(__src) >= 0x41 && (void)__src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      return (uint64_t *)v6;
    }
    *(void *)&long long v562 = __dst;
    sub_1CC5FA668(v52 + 16, &v562);
    goto LABEL_68;
  }
  uint64_t v6 = v542;
  if (sub_1CCFCB8EC(v541, 0, v25)) {
    return (uint64_t *)v6;
  }
  int v26 = *(unsigned __int16 *)(v542 + 24);
  uint64_t v27 = sub_1CCFD8CD8(v541, DWORD2(v541), 1, 1);
  if ((void)v542)
  {
    if (v26 == 308 && (*(_WORD *)(v542 + 26) & 0xC00) == 0x400)
    {
      uint64_t v28 = *(void *)(v542 + 48);
      if (v28)
      {
        uint64_t v53 = v27;
        int v54 = 1;
        do
        {
          if (*(_DWORD *)(v28 + 8) == DWORD2(v542))
          {
            if (!v54) {
              goto LABEL_38;
            }
            --v54;
          }
          uint64_t v28 = *(void *)(v28 + 32);
        }
        while (v28);
        if (!v54)
        {
          if (v27)
          {
            uint64_t v55 = *(void *)(v541 + 48);
            if (v55)
            {
              int v56 = 1;
              do
              {
                if (*(_DWORD *)(v55 + 8) == DWORD2(v541))
                {
                  if (!v56) {
                    goto LABEL_38;
                  }
                  --v56;
                }
                uint64_t v55 = *(void *)(v55 + 32);
              }
              while (v55);
              if (!v56)
              {
                long long v57 = *(_OWORD *)(v542 + 80);
                long long __src = v57;
                if ((_BYTE)v539
                  && v57 != 0
                  && *(unsigned __int16 *)(a1[1] + 358 * v539 + 2 * v57 + 73672) <= 0xFFFu)
                {
                  LOBYTE(__dst[0]) = sub_1CB8C2FBC((unsigned __int8 *)&__src);
                  __dst[0] = (void *)LOBYTE(__dst[0]);
                  __dst[1] = 0;
                  int v61 = sub_1CD3E12F4((unsigned __int8 *)__dst, v59, v60);
                  if (sub_1CC10A920((llvm::APInt *)(*(void *)(v53 + 80) + 24), v61))
                  {
                    uint64_t v62 = *a1;
                    BOOL v63 = *(void **)(a2 + 64);
                    __dst[0] = v63;
                    if (v63) {
                      llvm::MetadataTracking::track((uint64_t)__dst, (unsigned __int8 *)v63, 2);
                    }
                    LODWORD(__dst[1]) = *(_DWORD *)(a2 + 60);
                    uint64_t v64 = *(uint64_t **)(v542 + 32);
                    uint64_t v6 = (uint64_t)sub_1CD7FDDF4(v62, (uint64_t)v539, v540, (uint64_t)__dst, *v64, v64[1], v64[5], v64[6], v64[10], v64[11], v64[15], v64[16], v64[20], v64[21], __src, *((uint64_t *)&__src + 1), *(void *)(v542 + 96), (*(unsigned __int16 *)(v542 + 26) >> 7) & 7, 3,
                                    0);
                    uint64_t v37 = __dst[0];
                    if (!__dst[0]) {
                      return (uint64_t *)v6;
                    }
                    int v38 = *(unsigned __int8 *)__dst[0];
                    if ((v38 - 4) > 0x1E)
                    {
                      if ((v38 - 3) >= 0xFFFFFFFE) {
                        BOOL v142 = __dst[0];
                      }
                      else {
                        BOOL v142 = 0;
                      }
                      if ((v38 - 3) < 0xFFFFFFFE)
                      {
LABEL_294:
                        if (v38 == 3) {
                          v37[1] = 0;
                        }
                        return (uint64_t *)v6;
                      }
                      unint64_t v66 = (unint64_t)v142 + 8;
                    }
                    else
                    {
                      if ((*((unsigned char *)__dst[0] + 1) & 0x7F) != 2 && !*((_DWORD *)__dst[0] + 3)) {
                        return (uint64_t *)v6;
                      }
                      uint64_t v65 = *((void *)__dst[0] + 2);
                      if ((v65 & 4) == 0) {
                        return (uint64_t *)v6;
                      }
                      unint64_t v66 = v65 & 0xFFFFFFFFFFFFFFF8;
                      if (!v66) {
                        return (uint64_t *)v6;
                      }
                    }
                    *(void *)&long long v562 = __dst;
                    uint64_t v49 = v66 + 16;
                    uint64_t v50 = (void **)&v562;
                    goto LABEL_80;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_38:
  if (sub_1CD802954(v541)) {
    return (uint64_t *)v542;
  }
  unsigned int v45 = sub_1CD3E12F4((unsigned __int8 *)&v539, v29, v30);
  uint64_t v46 = sub_1CCFD8CD8(v541, DWORD2(v541), 0, 0);
  if (!v46) {
    goto LABEL_72;
  }
  uint64_t v73 = *a1;
  DWORD2(__src) = v45;
  if (v45 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&__src);
  }
  unint64_t v74 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v45;
  if (!v45) {
    unint64_t v74 = 0;
  }
  *(void *)&long long __src = v74;
  BOOL v75 = sub_1CD7F11AC(v73, a2, 0, (uint64_t)&__src, 0);
  if (DWORD2(__src) >= 0x41 && (void)__src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  if (!v75)
  {
LABEL_72:
    uint64_t v47 = sub_1CCF40F64((llvm::APFloatBase **)a1, a2);
    if (v47) {
      return v47;
    }
    uint64_t v67 = *(unsigned __int8 **)(a2 + 64);
    *(void *)&long long __src = v67;
    if (v67) {
      llvm::MetadataTracking::track((uint64_t)&__src, v67, 2);
    }
    DWORD2(__src) = *(_DWORD *)(a2 + 60);
    uint64_t v6 = (uint64_t)sub_1CCF414C8(a1, (const char *)0xAB, (const llvm::APInt *)&__src, v542, *((unint64_t *)&v542 + 1), v541, *((unint64_t *)&v541 + 1), *(_WORD *)(a2 + 72));
    if (!(void)__src) {
      goto LABEL_124;
    }
    int v69 = *(unsigned __int8 *)__src;
    if ((v69 - 4) > 0x1E)
    {
      if ((v69 - 3) >= 0xFFFFFFFE) {
        uint64_t v71 = __src;
      }
      else {
        uint64_t v71 = 0;
      }
      if ((v69 - 3) < 0xFFFFFFFE)
      {
        if (v69 == 3) {
          *(void *)(__src + 8) = 0;
        }
        goto LABEL_124;
      }
      unint64_t v72 = v71 + 8;
    }
    else
    {
      if ((*(unsigned char *)(__src + 1) & 0x7F) != 2 && !*(_DWORD *)(__src + 12)) {
        goto LABEL_124;
      }
      uint64_t v367 = *(void *)(__src + 16);
      if ((v367 & 4) == 0) {
        goto LABEL_124;
      }
      unint64_t v72 = v367 & 0xFFFFFFFFFFFFFFF8;
      if (!v72) {
        goto LABEL_124;
      }
    }
    __dst[0] = &__src;
    sub_1CC5FA668(v72 + 16, __dst);
LABEL_124:
    if (v6) {
      return (uint64_t *)v6;
    }
    if ((_BYTE)v539)
    {
      if (v539 - 15 >= 0x9C) {
        goto LABEL_162;
      }
    }
    else if ((*(_DWORD *)(v540 + 8) & 0xFE) != 0x12)
    {
      goto LABEL_162;
    }
    uint64_t v78 = *(void *)(a2 + 32);
    uint64_t v79 = *(uint64_t **)(a2 + 40);
    uint64_t v80 = v79[1];
    uint64_t v532 = *v79;
    uint64_t v81 = *(void *)v78;
    uint64_t v82 = *(void *)(v78 + 8);
    uint64_t v83 = *(void *)(v78 + 40);
    if (*(_WORD *)(v83 + 24) == 216)
    {
      do
      {
        uint64_t v84 = *(unsigned int **)(v83 + 32);
        uint64_t v83 = *(void *)v84;
      }
      while (*(_WORD *)(*(void *)v84 + 24) == 216);
      uint64_t v85 = v84[2];
    }
    else
    {
      uint64_t v85 = *(unsigned int *)(v78 + 48);
    }
    uint64_t v86 = *(unsigned __int8 **)(a2 + 64);
    *(void *)&long long v544 = v86;
    if (v86) {
      llvm::MetadataTracking::track((uint64_t)&v544, v86, 2);
    }
    DWORD2(v544) = *(_DWORD *)(a2 + 60);
    if (*((unsigned char *)a1 + 33) || *(_WORD *)(v83 + 24) != 146)
    {
LABEL_156:
      uint64_t v6 = 0;
LABEL_157:
      if ((void)v544)
      {
        int v87 = *(unsigned __int8 *)v544;
        if ((v87 - 4) > 0x1E)
        {
          if ((v87 - 3) >= 0xFFFFFFFE) {
            uint64_t v95 = v544;
          }
          else {
            uint64_t v95 = 0;
          }
          if ((v87 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v96 = v95 + 8;
LABEL_176:
            *(void *)&long long __src = &v544;
            sub_1CC5FA668(v96 + 16, &__src);
            goto LABEL_161;
          }
          if (v87 == 3) {
            *(void *)(v544 + 8) = 0;
          }
        }
        else if ((*(unsigned char *)(v544 + 1) & 0x7F) == 2 || *(_DWORD *)(v544 + 12))
        {
          uint64_t v464 = *(void *)(v544 + 16);
          if ((v464 & 4) != 0)
          {
            unint64_t v96 = v464 & 0xFFFFFFFFFFFFFFF8;
            if (v96) {
              goto LABEL_176;
            }
          }
        }
      }
LABEL_161:
      if (v6) {
        return (uint64_t *)v6;
      }
LABEL_162:
      uint64_t v88 = sub_1CCF47574((void *)*a1, (unsigned int *)a1[1], v542, *((unint64_t *)&v542 + 1), v541, *((unint64_t *)&v541 + 1), a2);
      if (v88) {
        return v88;
      }
      if (*(_WORD *)(v542 + 24) == 172)
      {
        uint64_t v91 = *(void *)(v542 + 32);
        uint64_t v92 = *(void *)(v91 + 40);
        uint64_t v93 = *(void *)(v91 + 48);
        v560[0] = &unk_1F2641538;
        v561 = v560;
        int v94 = sub_1CD7E9BD4(v92, v93, v541, DWORD2(v541), (uint64_t)v560, 0, 0);
        if (v561 == v560)
        {
          (*(void (**)(void *))(v560[0] + 32))(v560);
          if (v94) {
            return (uint64_t *)v541;
          }
        }
        else if (v561)
        {
          (*(void (**)(void *))(*v561 + 40))(v561);
          if (v94) {
            return (uint64_t *)v541;
          }
        }
        else if (v94)
        {
          return (uint64_t *)v541;
        }
      }
      uint64_t v98 = v542;
      if (!v46 || *(_WORD *)(v542 + 24) != 200)
      {
        if (*(_WORD *)(v98 + 24) != 148) {
          goto LABEL_184;
        }
LABEL_183:
        uint64_t v106 = sub_1CD3E3904((unsigned int *)&v542);
        if (v104 == 1) {
        uint64_t v107 = sub_1CD7878C0(*(unsigned int **)(v542 + 32), (uint64_t)v104, v105);
        }
        uint64_t v98 = v542;
        if (v106 == v107 && (int v108 = *(_DWORD **)(v542 + 32), *(_WORD *)(*(void *)v108 + 24) == 253) && !v108[2])
        {
          if (*(_WORD *)(v542 + 24) != 253) {
            uint64_t v98 = *(void *)v108;
          }
        }
        else
        {
LABEL_184:
          int v99 = *(unsigned __int16 *)(v98 + 24);
          if (v99 != 253) {
            goto LABEL_410;
          }
          if (DWORD2(v542)) {
            goto LABEL_411;
          }
        }
        LODWORD(__dst[1]) = 1;
        __dst[0] = 0;
        uint64_t v100 = v541;
        int v101 = *(unsigned __int16 *)(v541 + 24);
        if (v101 != 11)
        {
          if (v101 == 146)
          {
            DWORD2(__src) = 1;
            *(void *)&long long __src = 0;
            DWORD2(v562) = 1;
            *(void *)&long long v562 = 0;
            LODWORD(v543) = 0;
            BOOL v536 = 0;
            if (sub_1CCFCB0B8(v541, (unint64_t *)&__src, (unint64_t *)&v562, (unsigned int *)&v543, &v536, 0, 0))
            {
              if (DWORD2(__src) > 0x40)
              {
                uint64_t v158 = (void *)__src;
                uint64_t v159 = (uint64_t *)v562;
                unint64_t v160 = ((unint64_t)DWORD2(__src) + 63) >> 6;
                do
                {
                  uint64_t v161 = *v159++;
                  *v158++ |= v161;
                  --v160;
                }
                while (v160);
              }
              else
              {
                *(void *)&long long __src = __src | v562;
              }
              long long v544 = *(_OWORD *)*(void *)(v100 + 40);
              unsigned int v162 = sub_1CD3E12F4((unsigned __int8 *)&v544, v89, v90);
              unsigned int i = v543;
              if (v543 < v162)
              {
                llvm::APInt::zextOrTrunc((uint64_t *)&__src, v162, (uint64_t)&v544);
                if (DWORD2(__src) >= 0x41 && (void)__src) {
                  MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                }
                *(void *)&long long __src = v544;
                DWORD2(__src) = DWORD2(v544);
                for (unsigned int i = v543; i < v162; LODWORD(v543) = i)
                {
                  DWORD2(v544) = DWORD2(__src);
                  if (DWORD2(__src) > 0x40) {
                    operator new[]();
                  }
                  uint64_t v164 = (void)__src << i;
                  if (DWORD2(__src) == i) {
                    uint64_t v164 = 0;
                  }
                  if (DWORD2(__src)) {
                    unint64_t v165 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(__src);
                  }
                  else {
                    unint64_t v165 = 0;
                  }
                  *(void *)&long long v544 = v165 & v164;
                  *(void *)&long long __src = __src | v165 & v164;
                  if (DWORD2(v544) >= 0x41 && (v165 & v164) != 0) {
                    MEMORY[0x1D25D9CB0]();
                  }
                  unsigned int i = 2 * v543;
                }
              }
              if (!(i % v162))
              {
                DWORD2(v544) = v162;
                if (v162 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v544);
                }
                unint64_t v167 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v162;
                if (!v162) {
                  unint64_t v167 = 0;
                }
                *(void *)&long long v544 = v167;
                if (LODWORD(__dst[1]) >= 0x41 && __dst[0]) {
                  MEMORY[0x1D25D9CB0](__dst[0], 0x1000C8000313F17);
                }
                __dst[0] = (void *)v544;
                LODWORD(__dst[1]) = DWORD2(v544);
                if (v543 >= v162)
                {
                  int v168 = 0;
                  if (v543 / v162 <= 1) {
                    unsigned int v169 = 1;
                  }
                  else {
                    unsigned int v169 = v543 / v162;
                  }
                  do
                  {
                    llvm::APInt::extractBits((uint64_t)&__src, v162, v168 * v162, (uint64_t)&v544);
                    if (LODWORD(__dst[1]) > 0x40)
                    {
                      uint64_t v170 = __dst[0];
                      int64_t v171 = (uint64_t *)v544;
                      unint64_t v172 = ((unint64_t)LODWORD(__dst[1]) + 63) >> 6;
                      do
                      {
                        uint64_t v173 = *v171++;
                        *v170++ &= v173;
                        --v172;
                      }
                      while (v172);
                    }
                    else
                    {
                      __dst[0] = (void *)((unint64_t)__dst[0] & v544);
                    }
                    if (DWORD2(v544) >= 0x41 && (void)v544) {
                      MEMORY[0x1D25D9CB0](v544, 0x1000C8000313F17);
                    }
                    ++v168;
                  }
                  while (v168 != v169);
                }
              }
            }
            if (DWORD2(v562) >= 0x41 && (void)v562) {
              MEMORY[0x1D25D9CB0](v562, 0x1000C8000313F17);
            }
            if (DWORD2(__src) >= 0x41 && (void)__src) {
              MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
            }
LABEL_376:
            uint64_t v174 = *(void *)(v98 + 80);
            if (**(unsigned char **)(v98 + 40)) {
              BOOL v175 = v174 == 0;
            }
            else {
              BOOL v175 = 1;
            }
            BOOL v176 = !v175
                && *(unsigned __int16 *)(a1[1] + 358 * **(unsigned __int8 **)(v98 + 40) + 2 * v174 + 73672) < 0x1000u;
            uint64_t v177 = *(void *)(v98 + 88);
            *(void *)&long long v562 = *(void *)(v98 + 80);
            *((void *)&v562 + 1) = v177;
            unsigned int v178 = sub_1CD3E12F4((unsigned __int8 *)&v562, v89, v90);
            llvm::APInt::zextOrTrunc((uint64_t *)__dst, v178, (uint64_t)&__src);
            if (LODWORD(__dst[1]) >= 0x41 && __dst[0]) {
              MEMORY[0x1D25D9CB0](__dst[0], 0x1000C8000313F17);
            }
            uint64_t v179 = __src;
            __dst[0] = (void *)__src;
            int v180 = DWORD2(__src);
            LODWORD(__dst[1]) = DWORD2(__src);
            int v181 = (*(unsigned __int16 *)(v98 + 26) >> 10) & 3;
            if (!v181 || v181 == 3 || v181 == 1 && v176)
            {
              if (!DWORD2(__src)) {
                goto LABEL_396;
              }
              if (DWORD2(__src) <= 0x40)
              {
                if ((void)__src != 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(__src))
                {
LABEL_409:
                  uint64_t v98 = v542;
                  int v99 = *(unsigned __int16 *)(v542 + 24);
LABEL_410:
                  if (v99 == 310)
                  {
                    long long v562 = *(_OWORD *)(v98 + 80);
                    char v230 = sub_1CD3DD468((unsigned __int8 *)&v562, v89, v90);
                    uint64_t v231 = *(void *)(v98 + 48);
                    if (v231)
                    {
                      int v232 = 1;
                      do
                      {
                        if (!*(_DWORD *)(v231 + 8))
                        {
                          if (!v232) {
                            goto LABEL_411;
                          }
                          --v232;
                        }
                        uint64_t v231 = *(void *)(v231 + 32);
                      }
                      while (v231);
                      if (!v232 && (v230 - 3) <= 2u)
                      {
                        uint64_t v233 = qword_1CFB2D410[(char)(v230 - 3)];
                        DWORD2(__src) = 1;
                        *(void *)&long long __src = 0;
                        if (sub_1CD7E967C(v541, (unint64_t *)&__src, v90))
                        {
                          if (DWORD2(__src) >= 0x41)
                          {
                            int v491 = 0;
                            int64_t v492 = ((unint64_t)DWORD2(__src) + 63) >> 6;
                            do
                            {
                              BOOL v128 = v492-- < 1;
                              if (v128) {
                                break;
                              }
                              unint64_t v493 = *(void *)(__src + 8 * v492);
                              v491 += __clz(v493);
                            }
                            while (!v493);
                            unsigned int v494 = DWORD2(__src) | 0xFFFFFFC0;
                            if ((BYTE8(__src) & 0x3F) == 0) {
                              unsigned int v494 = 0;
                            }
                            uint64_t v234 = DWORD2(__src) - v491 - v494 > 0x40 ? -1 : *(void *)__src;
                          }
                          else
                          {
                            uint64_t v234 = __src;
                          }
                          BOOL v235 = v234 == v233;
                        }
                        else
                        {
                          BOOL v235 = 0;
                        }
                        if (DWORD2(__src) >= 0x41 && (void)__src) {
                          MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                        }
                        if (v235
                          && (*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)a1[1] + 1312))(a1[1], v98, 0))
                        {
                          uint64_t v343 = *(uint64_t **)(v98 + 32);
                          uint64_t v344 = *v343;
                          DWORD2(__src) = *((_DWORD *)v343 + 2);
                          *(void *)&long long __src = v344;
                          uint64_t v550 = (uint64_t *)v343[5];
                          LODWORD(v551) = *((_DWORD *)v343 + 12);
                          LODWORD(v553) = *((_DWORD *)v343 + 22);
                          char v552 = (uint64_t *)v343[10];
                          uint64_t v345 = *(void *)(v98 + 32);
                          int v555 = *(_DWORD *)(v345 + 128);
                          uint64_t v554 = *(void *)(v345 + 120);
                          uint64_t v346 = *(void *)(v98 + 32);
                          int v557 = *(_DWORD *)(v346 + 168);
                          uint64_t v556 = *(void *)(v346 + 160);
                          uint64_t v347 = *(void *)(v98 + 32);
                          int v559 = *(_DWORD *)(v347 + 208);
                          uint64_t v558 = *(void *)(v347 + 200);
                          uint64_t v348 = *a1;
                          uint64_t v349 = sub_1CD7F95FC(*a1, (uint64_t)v539, v540, 1, 0);
                          uint64_t v351 = v350;
                          long long v352 = v562;
                          v353 = *(void **)(a2 + 64);
                          __dst[0] = v353;
                          if (v353) {
                            llvm::MetadataTracking::track((uint64_t)__dst, (unsigned __int8 *)v353, 2);
                          }
                          LODWORD(__dst[1]) = *(_DWORD *)(a2 + 60);
                          v354 = sub_1CD7FE8CC(v348, v349, v351, v352, *((uint64_t *)&v352 + 1), (uint64_t)__dst, (uint64_t *)&__src, 6, *(void *)(v98 + 96), (*(unsigned __int16 *)(v98 + 26) >> 7) & 7, 3);
                          int v356 = v355;
                          if (!__dst[0]) {
                            goto LABEL_658;
                          }
                          int v357 = *(unsigned __int8 *)__dst[0];
                          if ((v357 - 4) > 0x1E)
                          {
                            if ((v357 - 3) >= 0xFFFFFFFE) {
                              long long v489 = __dst[0];
                            }
                            else {
                              long long v489 = 0;
                            }
                            if ((v357 - 3) < 0xFFFFFFFE)
                            {
                              if (v357 == 3) {
                                *((void *)__dst[0] + 1) = 0;
                              }
                              goto LABEL_658;
                            }
                            unint64_t v490 = (unint64_t)v489 + 8;
                          }
                          else
                          {
                            if ((*((unsigned char *)__dst[0] + 1) & 0x7F) != 2 && !*((_DWORD *)__dst[0] + 3)) {
                              goto LABEL_658;
                            }
                            uint64_t v508 = *((void *)__dst[0] + 2);
                            if ((v508 & 4) == 0) {
                              goto LABEL_658;
                            }
                            unint64_t v490 = v508 & 0xFFFFFFFFFFFFFFF8;
                            if (!v490) {
                              goto LABEL_658;
                            }
                          }
                          *(void *)&long long v544 = __dst;
                          sub_1CC5FA668(v490 + 16, &v544);
LABEL_658:
                          __dst[0] = v354;
                          __dst[1] = v356;
                          sub_1CCEF083C(a1, a2, (uint64_t *)__dst, 1, 1);
                          sub_1CCEF0788((uint64_t)a1, (uint64_t)v354);
                          return (uint64_t *)a2;
                        }
                      }
                    }
                  }
LABEL_411:
                  if ((_BYTE)v539) {
                    BOOL v196 = v539 - 15 < 0x9C;
                  }
                  else {
                    BOOL v196 = (*(_DWORD *)(v540 + 8) & 0xFE) == 18;
                  }
                  if (v46)
                  {
                    if (!v196)
                    {
                      int v197 = *(unsigned __int16 *)(v542 + 24);
                      if (v197 == 253 || v197 == 200 && *(_WORD *)(**(void **)(v542 + 32) + 24) == 253)
                      {
                        int v198 = sub_1CCF4787C(a1, a2, v90);
                        if (v198)
                        {
                          uint64_t v200 = (uint64_t)v198;
                          int v201 = v199;
                          uint64_t v202 = v542;
                          if (*(_WORD *)(v542 + 24) == 200) {
                            uint64_t v202 = **(void **)(v542 + 32);
                          }
                          sub_1CCEF0788((uint64_t)a1, a2);
                          sub_1CD800DA0(*a1, v202, 0, v200, v201);
                          return (uint64_t *)a2;
                        }
                      }
                    }
                  }
                  if (!*((unsigned char *)a1 + 34)
                    || ((uint64_t v203 = *(void **)(a2 + 32),
                         uint64_t v204 = v203[5],
                         int v205 = *(unsigned __int16 *)(v204 + 24),
                         v205 != 35)
                      ? (BOOL v206 = v205 == 11)
                      : (BOOL v206 = 1),
                        !v206))
                  {
LABEL_543:
                    uint64_t v47 = sub_1CCF48580((uint64_t)a1, v542, DWORD2(v542), v541, DWORD2(v541), a2);
                    if (v47) {
                      return v47;
                    }
                    uint64_t v287 = v542;
                    uint64_t v288 = v541;
                    if (*(unsigned __int16 *)(v542 + 24) == *(unsigned __int16 *)(v541 + 24))
                    {
                      uint64_t v47 = sub_1CCF49714((uint64_t)a1, a2, v282, v541, v283, v284, v285, v286);
                      if (v47) {
                        return v47;
                      }
                      uint64_t v287 = v542;
                      uint64_t v288 = v541;
                    }
                    uint64_t v47 = sub_1CCF4A26C(a2, v287, SDWORD2(v542), v288, SDWORD2(v541), *a1, v285, v286);
                    if (v47) {
                      return v47;
                    }
                    uint64_t v88 = sub_1CCF4A26C(a2, v541, SDWORD2(v541), v542, SDWORD2(v542), *a1, v289, v290);
                    if (v88) {
                      return v88;
                    }
                    if (v46)
                    {
                      uint64_t v291 = *(void *)(v46 + 80);
                      uint64_t v292 = *(unsigned int *)(v291 + 32);
                      if (v292 > 0x40)
                      {
                        int v293 = 0;
                        int64_t v294 = (unint64_t)(v292 + 63) >> 6;
                        do
                        {
                          BOOL v128 = v294-- < 1;
                          if (v128) {
                            break;
                          }
                          unint64_t v295 = *(void *)(*(void *)(v291 + 24) + 8 * v294);
                          v293 += __clz(v295);
                        }
                        while (!v295);
                        int v296 = v292 | 0xFFFFFFC0;
                        if ((v292 & 0x3F) == 0) {
                          int v296 = 0;
                        }
                        if (v293 + v296 != v292 - 1) {
                          goto LABEL_560;
                        }
                      }
                      else if (*(void *)(v291 + 24) != 1)
                      {
                        goto LABEL_560;
                      }
                      if (*(_WORD *)(v542 + 24) == 57
                        && sub_1CD7FF12C(**(void **)(v542 + 32), *(void *)(*(void *)(v542 + 32) + 8), 0))
                      {
                        uint64_t v6 = *(void *)(*(void *)(v542 + 32) + 40);
                        int v370 = *(unsigned __int16 *)(v6 + 24);
                        if (v370 == 199)
                        {
                          if (sub_1CD7878C0(*(unsigned int **)(v6 + 32), v368, v369) == (llvm::Type *)1) {
                            return (uint64_t *)v6;
                          }
                          int v370 = *(unsigned __int16 *)(v6 + 24);
                        }
                        if (v370 == 198 && sub_1CD7878C0(*(unsigned int **)(v6 + 32), v368, v369) == (llvm::Type *)1)
                        {
                          uint64_t v371 = (llvm::APFloatBase *)*a1;
                          uint64_t v372 = *(unsigned __int8 **)(a2 + 64);
                          *(void *)&long long __src = v372;
                          if (v372) {
                            llvm::MetadataTracking::track((uint64_t)&__src, v372, 2);
                          }
                          DWORD2(__src) = *(_DWORD *)(a2 + 60);
                          uint64_t v373 = v539;
                          uint64_t v374 = v540;
                          uint64_t v375 = *(uint64_t **)(v6 + 32);
                          goto LABEL_788;
                        }
                      }
                    }
LABEL_560:
                    if (sub_1CCF41798((uint64_t)a1, a2, 0)) {
                      return (uint64_t *)a2;
                    }
                    uint64_t v299 = v542;
                    if (*(_WORD *)(v542 + 24) == 253 && (*(_WORD *)(v542 + 26) & 0x380) == 0)
                    {
                      int v300 = *(_WORD *)(v542 + 26) & 0xC00;
                      if (v300 != 2048)
                      {
                        if (v300 != 1024) {
                          goto LABEL_587;
                        }
LABEL_805:
                        *(_OWORD *)__dst = *(_OWORD *)(v542 + 80);
                        unsigned int v465 = sub_1CD7878C0((unsigned int *)&v541, v297, v298);
                        unsigned int v468 = sub_1CD3E12F4((unsigned __int8 *)__dst, v466, v467);
                        DWORD2(v562) = v465;
                        if (v465 > 0x40) {
                          llvm::APInt::initSlowCase((llvm::APInt *)&v562);
                        }
                        *(void *)&long long v562 = 0;
                        if (v468 != v465)
                        {
                          if (v468 > 0x3F) {
                            llvm::APInt::setBitsSlowCase(&v562, v468, v465);
                          }
                          else {
                            *(void *)&long long v562 = v562 | (0xFFFFFFFFFFFFFFFFLL >> (v468
                          }
                                                                              - v465) << v468);
                        }
                        if (!sub_1CD7F11AC(*a1, v541, *((BOOL *)&v541 + 1), (uint64_t)&v562, 0)
                          || (*((unsigned char *)a1 + 33)
                           || (*(_WORD *)(*(void *)(v299 + 96) + 36) & 0xF00) != 0
                           || (*(unsigned char *)(v299 + 26) & 8) != 0)
                          && (!(_BYTE)v539
                           || !LOBYTE(__dst[0])
                           || *(unsigned __int16 *)(a1[1]
                                                  + 358 * v539
                                                  + 2 * LOBYTE(__dst[0])
                                                  + 73672) > 0xFFFu))
                        {
                          if (DWORD2(v562) >= 0x41 && (void)v562) {
                            MEMORY[0x1D25D9CB0](v562, 0x1000C8000313F17);
                          }
                          goto LABEL_587;
                        }
                        uint64_t v495 = *a1;
                        uint64_t v496 = v542;
                        __int16 v497 = *(unsigned __int8 **)(v542 + 64);
                        *(void *)&long long __src = v497;
                        if (v497) {
                          llvm::MetadataTracking::track((uint64_t)&__src, v497, 2);
                        }
                        DWORD2(__src) = *(_DWORD *)(v496 + 60);
                        char v498 = sub_1CD7FAFD4(v495, 3, (uint64_t)&__src, (uint64_t)v539, v540, **(void **)(v299 + 32), *(void *)(*(void *)(v299 + 32) + 8), v469, *(void *)(*(void *)(v299 + 32) + 40), *(void *)(*(void *)(v299 + 32) + 48), (uint64_t)__dst[0], (uint64_t)__dst[1], *(void *)(v299 + 96));
                        int v500 = v499;
                        if (!(void)__src) {
                          goto LABEL_874;
                        }
                        int v501 = *(unsigned __int8 *)__src;
                        if ((v501 - 4) > 0x1E)
                        {
                          if ((v501 - 3) >= 0xFFFFFFFE) {
                            uint64_t v503 = __src;
                          }
                          else {
                            uint64_t v503 = 0;
                          }
                          if ((v501 - 3) < 0xFFFFFFFE)
                          {
                            if (v501 == 3) {
                              *(void *)(__src + 8) = 0;
                            }
                            goto LABEL_874;
                          }
                          unint64_t v504 = v503 + 8;
                        }
                        else
                        {
                          if ((*(unsigned char *)(__src + 1) & 0x7F) != 2 && !*(_DWORD *)(__src + 12)) {
                            goto LABEL_874;
                          }
                          uint64_t v513 = *(void *)(__src + 16);
                          if ((v513 & 4) == 0) {
                            goto LABEL_874;
                          }
                          unint64_t v504 = v513 & 0xFFFFFFFFFFFFFFF8;
                          if (!v504) {
                            goto LABEL_874;
                          }
                        }
                        *(void *)&long long v544 = &__src;
                        sub_1CC5FA668(v504 + 16, &v544);
LABEL_874:
                        sub_1CCEF0788((uint64_t)a1, a2);
                        uint64_t v364 = v542;
                        *(void *)&long long __src = v498;
                        DWORD2(__src) = v500;
                        uint64_t v550 = v498;
                        LODWORD(v551) = 1;
                        uint64_t v365 = a1;
                        int v366 = 2;
                        goto LABEL_671;
                      }
                      uint64_t v304 = *(void *)(v542 + 48);
                      if (v304)
                      {
                        int v305 = 1;
                        do
                        {
                          if (*(_DWORD *)(v304 + 8) == DWORD2(v542))
                          {
                            if (!v305) {
                              goto LABEL_587;
                            }
                            --v305;
                          }
                          uint64_t v304 = *(void *)(v304 + 32);
                        }
                        while (v304);
                        if (!v305) {
                          goto LABEL_805;
                        }
                      }
                    }
LABEL_587:
                    if (!v46) {
                      goto LABEL_599;
                    }
                    uint64_t v306 = *(void *)(v46 + 80);
                    uint64_t v307 = (void *)(v306 + 24);
                    uint64_t v308 = *(unsigned int *)(v306 + 32);
                    if (v308 >= 0x41)
                    {
                      int v309 = 0;
                      int64_t v310 = (unint64_t)(v308 + 63) >> 6;
                      do
                      {
                        BOOL v128 = v310-- < 1;
                        if (v128) {
                          break;
                        }
                        unint64_t v311 = *(void *)(*v307 + 8 * v310);
                        v309 += __clz(v311);
                      }
                      while (!v311);
                      int v312 = v308 | 0xFFFFFFC0;
                      if ((v308 & 0x3F) == 0) {
                        int v312 = 0;
                      }
                      if ((v308 - v309 - v312) > 0x40) {
                        goto LABEL_599;
                      }
                      uint64_t v307 = (void *)*v307;
                    }
                    if (*v307 == 0xFFFFLL && *(_WORD *)(v542 + 24) == 172)
                    {
                      uint64_t v47 = sub_1CCF4A520((uint64_t)a1, v542, **(void **)(v542 + 32), *(void *)(*(void *)(v542 + 32) + 8), *(void *)(*(void *)(v542 + 32) + 40), *(void *)(*(void *)(v542 + 32) + 48), 0);
                      if (v47) {
                        return v47;
                      }
                    }
LABEL_599:
                    uint64_t v313 = *(uint64_t **)(a2 + 32);
                    uint64_t v314 = *v313;
                    uint64_t v315 = v313[1];
                    uint64_t v316 = v313[5];
                    int v317 = *((_DWORD *)v313 + 12);
                    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[1] + 328))(a1[1], *v313, v315))goto LABEL_618; {
                    uint64_t v318 = *(void *)(v316 + 48);
                    }
                    if (!v318) {
                      goto LABEL_609;
                    }
                    int v319 = 1;
                    do
                    {
                      if (*(_DWORD *)(v318 + 8) == v317)
                      {
                        if (!v319) {
                          goto LABEL_609;
                        }
                        --v319;
                      }
                      uint64_t v318 = *(void *)(v318 + 32);
                    }
                    while (v318);
                    if (v319) {
                      goto LABEL_609;
                    }
                    uint64_t v320 = *(unsigned __int16 *)(v316 + 24);
                    if (v320 == 175)
                    {
                      int v470 = 177;
                    }
                    else
                    {
                      if (v320 != 177)
                      {
LABEL_609:
                        uint64_t v321 = *(void *)(v314 + 48);
                        if (!v321) {
                          goto LABEL_618;
                        }
                        int v322 = 1;
                        do
                        {
                          if (*(_DWORD *)(v321 + 8) == v315)
                          {
                            if (!v322) {
                              goto LABEL_618;
                            }
                            --v322;
                          }
                          uint64_t v321 = *(void *)(v321 + 32);
                        }
                        while (v321);
                        if (v322) {
                          goto LABEL_618;
                        }
                        uint64_t v320 = *(unsigned __int16 *)(v314 + 24);
                        if (v320 == 175)
                        {
                          int v473 = 177;
                        }
                        else
                        {
                          if (v320 != 177) {
                            goto LABEL_618;
                          }
                          int v473 = 175;
                        }
                        unsigned int v535 = v473;
                        uint64_t v471 = *(void *)(v314 + 32);
                        if (!sub_1CD802954(*(void *)v471)) {
                          goto LABEL_618;
                        }
                        LODWORD(v315) = v317;
                        uint64_t v314 = v316;
LABEL_827:
                        uint64_t v474 = *(void *)(v471 + 40);
                        uint64_t v475 = *(unsigned int *)(v471 + 48);
                        uint64_t v476 = v315;
                        int v477 = *(unsigned __int8 **)(a2 + 64);
                        *(void *)&long long __src = v477;
                        if (v477) {
                          llvm::MetadataTracking::track((uint64_t)&__src, v477, 2);
                        }
                        DWORD2(__src) = *(_DWORD *)(a2 + 60);
                        uint64_t v478 = *(void *)(a2 + 40);
                        long long v479 = *(llvm **)v478;
                        uint64_t v480 = *(void *)(v478 + 8);
                        uint64_t v481 = *(void *)(*a1 + 832);
                        if (v481) {
                          LOWORD(v481) = *(_WORD *)(v481 + 8);
                        }
                        uint64_t v483 = sub_1CCFDED5C(*a1, v535, (const llvm::APInt *)&__src, v479, v480, v314, v476, v472, v474, v475, v481);
                        uint64_t v485 = *(void *)(*a1 + 832);
                        if (v485) {
                          LOWORD(v485) = *(_WORD *)(v485 + 8);
                        }
                        uint64_t v6 = (uint64_t)sub_1CCFDED5C(*a1, v320, (const llvm::APInt *)&__src, v479, v480, (uint64_t)v483, v482, v484, v474, v475, v485);
                        if ((void)__src)
                        {
                          int v486 = *(unsigned __int8 *)__src;
                          if ((v486 - 4) > 0x1E)
                          {
                            if ((v486 - 3) >= 0xFFFFFFFE) {
                              uint64_t v487 = __src;
                            }
                            else {
                              uint64_t v487 = 0;
                            }
                            if ((v486 - 3) >= 0xFFFFFFFE)
                            {
                              unint64_t v488 = v487 + 8;
LABEL_844:
                              __dst[0] = &__src;
                              sub_1CC5FA668(v488 + 16, __dst);
                              goto LABEL_837;
                            }
                            if (v486 == 3) {
                              *(void *)(__src + 8) = 0;
                            }
                          }
                          else if ((*(unsigned char *)(__src + 1) & 0x7F) == 2 || *(_DWORD *)(__src + 12))
                          {
                            uint64_t v507 = *(void *)(__src + 16);
                            if ((v507 & 4) != 0)
                            {
                              unint64_t v488 = v507 & 0xFFFFFFFFFFFFFFF8;
                              if (v488) {
                                goto LABEL_844;
                              }
                            }
                          }
                        }
LABEL_837:
                        if (v6) {
                          return (uint64_t *)v6;
                        }
LABEL_618:
                        uint64_t v323 = *a1;
                        long long v324 = *(_OWORD *)*(void *)(a2 + 40);
                        long long __src = v324;
                        if (!(_BYTE)v324) {
                          goto LABEL_620;
                        }
                        uint64_t v325 = *(void *)(v323 + 24);
                        if (!*(void *)(v325 + 8 * v324 + 96)) {
                          goto LABEL_620;
                        }
                        v376 = *(uint64_t **)(a2 + 32);
                        uint64_t v377 = *v376;
                        unint64_t v378 = v376[1];
                        if (*(_WORD *)(*v376 + 24) == 200)
                        {
                          uint64_t v379 = *(void *)(v377 + 32);
                          uint64_t v377 = *(void *)v379;
                          unint64_t v378 = v378 & 0xFFFFFFFF00000000 | *(unsigned int *)(v379 + 8);
                        }
                        uint64_t v380 = v376[5];
                        if (!sub_1CD802AAC(v377, v378, 0)) {
                          goto LABEL_620;
                        }
                        uint64_t v381 = *(void *)(v377 + 48);
                        if (!v381) {
                          goto LABEL_620;
                        }
                        int v382 = 1;
                        do
                        {
                          if (*(_DWORD *)(v381 + 8) == v378)
                          {
                            if (!v382) {
                              goto LABEL_620;
                            }
                            --v382;
                          }
                          uint64_t v381 = *(void *)(v381 + 32);
                        }
                        while (v381);
                        if (v382 || !sub_1CD8029CC(v380)) {
                          goto LABEL_620;
                        }
                        uint64_t v383 = *(_DWORD **)(v377 + 32);
                        uint64_t v384 = *(void *)v383;
                        int v385 = *(unsigned __int16 *)(*(void *)v383 + 24);
                        if (v385 == 201)
                        {
                          uint64_t v383 = *(_DWORD **)(v384 + 32);
                          uint64_t v384 = *(void *)v383;
                          int v385 = *(unsigned __int16 *)(*(void *)v383 + 24);
                        }
                        if (v385 != 177) {
                          goto LABEL_620;
                        }
                        uint64_t v386 = *(void *)(v384 + 48);
                        if (!v386) {
                          goto LABEL_620;
                        }
                        int v387 = v383[2];
                        int v388 = 1;
                        do
                        {
                          if (*(_DWORD *)(v386 + 8) == v387)
                          {
                            if (!v388) {
                              goto LABEL_620;
                            }
                            --v388;
                          }
                          uint64_t v386 = *(void *)(v386 + 32);
                        }
                        while (v386);
                        if (v388) {
                          goto LABEL_620;
                        }
                        uint64_t v389 = *(void *)(*(void *)(v384 + 32) + 40);
                        int v390 = *(unsigned __int16 *)(v389 + 24);
                        if (v390 != 35 && v390 != 11) {
                          goto LABEL_620;
                        }
                        uint64_t v392 = *(void *)(v389 + 80);
                        unsigned int v394 = sub_1CB87E200((unsigned __int8 *)&__src);
                        if (v393 == 1) {
                        int v395 = (void *)(v392 + 24);
                        }
                        uint64_t v396 = *(unsigned int *)(v392 + 32);
                        int v397 = (void *)(v392 + 24);
                        if (v396 >= 0x41)
                        {
                          int v398 = 0;
                          int64_t v399 = (unint64_t)(v396 + 63) >> 6;
                          do
                          {
                            BOOL v128 = v399-- < 1;
                            if (v128) {
                              break;
                            }
                            unint64_t v400 = *(void *)(*v395 + 8 * v399);
                            v398 += __clz(v400);
                          }
                          while (!v400);
                          int v401 = v396 | 0xFFFFFFC0;
                          if ((v396 & 0x3F) == 0) {
                            int v401 = 0;
                          }
                          if ((v396 - v398 - v401) > 0x40) {
                            goto LABEL_620;
                          }
                          int v397 = (void *)*v395;
                        }
                        if (*v397 < (unint64_t)v394
                          && (*(unsigned int (**)(uint64_t, void, void, void, void))(*(void *)v325 + 320))(v325, **(void **)(v384 + 32), *(void *)(*(void *)(v384 + 32) + 8), *(void *)(*(void *)(v384 + 32) + 40), *(void *)(*(void *)(v384 + 32) + 48)))
                        {
                          unsigned int v402 = *(void **)(a2 + 64);
                          __dst[0] = v402;
                          if (v402) {
                            llvm::MetadataTracking::track((uint64_t)__dst, (unsigned __int8 *)v402, 2);
                          }
                          LODWORD(__dst[1]) = *(_DWORD *)(a2 + 60);
                          uint64_t v403 = sub_1CD7EB80C(v323, **(void **)(v384 + 32), *(void *)(*(void *)(v384 + 32) + 8), (uint64_t)__dst, __src, *((uint64_t *)&__src + 1));
                          uint64_t v405 = v404;
                          uint64_t v406 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t, void, void, void))(*(void *)v325 + 400))(v325, *(void *)(**(void **)(v323 + 40) + 40) + 272, *(void *)(v323 + 56), __src, *((void *)&__src + 1));
                          uint64_t v534 = v407;
                          if (*(_DWORD *)(v392 + 32) >= 0x41u) {
                            int v395 = (void *)*v395;
                          }
                          uint64_t v408 = (void *)*v395;
                          DWORD2(v562) = v394;
                          if (v394 > 0x40) {
                            llvm::APInt::initSlowCase((llvm::APInt *)&v562);
                          }
                          *(void *)&long long v562 = 1 << (char)v408;
                          uint64_t v410 = sub_1CD7EBB14(v323, (llvm::LLVMContext *)&v562, (const llvm::APInt *)__dst, __src, *((uint64_t *)&__src + 1), 0, 0);
                          uint64_t v412 = v411;
                          if (DWORD2(v562) >= 0x41 && (void)v562) {
                            MEMORY[0x1D25D9CB0](v562, 0x1000C8000313F17);
                          }
                          uint64_t v413 = *(void *)(v323 + 832);
                          if (v413) {
                            LOWORD(v413) = *(_WORD *)(v413 + 8);
                          }
                          unsigned int v414 = sub_1CCFDED5C(v323, 171, (const llvm::APInt *)__dst, (llvm *)__src, *((uint64_t *)&__src + 1), v403, v405, v409, v410, v412, v413);
                          uint64_t v416 = v415;
                          int v417 = sub_1CD7EBF14(v323, 0, (const llvm::APInt *)__dst, (llvm *)__src, *((uint64_t *)&__src + 1), 0, 0);
                          int v419 = sub_1CD3DC614((void *)v323, (const llvm::APInt *)__dst, v406, v534, (uint64_t)v414, v416, (uint64_t)v417, v418, 0x11u, 0, 0, 0, 0);
                          uint64_t v6 = sub_1CD7EB80C(v323, (uint64_t)v419, v420, (uint64_t)__dst, __src, *((uint64_t *)&__src + 1));
                          if (__dst[0])
                          {
                            int v421 = *(unsigned __int8 *)__dst[0];
                            if ((v421 - 4) > 0x1E)
                            {
                              if ((v421 - 3) >= 0xFFFFFFFE) {
                                uint64_t v511 = __dst[0];
                              }
                              else {
                                uint64_t v511 = 0;
                              }
                              if ((v421 - 3) >= 0xFFFFFFFE)
                              {
                                unint64_t v512 = (unint64_t)v511 + 8;
LABEL_915:
                                *(void *)&long long v562 = __dst;
                                sub_1CC5FA668(v512 + 16, &v562);
                                goto LABEL_738;
                              }
                              if (v421 == 3) {
                                *((void *)__dst[0] + 1) = 0;
                              }
                            }
                            else if ((*((unsigned char *)__dst[0] + 1) & 0x7F) == 2 || *((_DWORD *)__dst[0] + 3))
                            {
                              uint64_t v515 = *((void *)__dst[0] + 2);
                              if ((v515 & 4) != 0)
                              {
                                unint64_t v512 = v515 & 0xFFFFFFFFFFFFFFF8;
                                if (v512) {
                                  goto LABEL_915;
                                }
                              }
                            }
                          }
LABEL_738:
                          if (v6) {
                            return (uint64_t *)v6;
                          }
                        }
LABEL_620:
                        if (*(_WORD *)(v542 + 24) != 198
                          || ((v326 = *(unsigned __int16 *)(v541 + 24), v326 != 35) ? (BOOL v327 = v326 == 11) : (BOOL v327 = 1),
                              !v327
                           || ((v328 = (llvm::APInt *)(*(void *)(v541 + 80) + 24),
                                long long __src = *(_OWORD *)(*(void *)(**(void **)(v542 + 32) + 40)
                                                  + 16 * *(unsigned int *)(*(void *)(v542 + 32) + 8)),
                                !(_BYTE)__src)
                             ? (int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&__src))
                             : (int ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&__src)),
                               !sub_1CC10A920(v328, ExtendedSizeInBits))))
                        {
                          if (!sub_1CCF41ED0(a1[1], 0x55u, v539, v540, *((unsigned __int8 *)a1 + 33)))return 0; {
                          uint64_t v332 = *a1;
                          }
                          int v333 = *(uint64_t **)(a2 + 32);
                          uint64_t v334 = *v333;
                          int v335 = *((_DWORD *)v333 + 2);
                          uint64_t v336 = v333[5];
                          uint64_t v337 = *((unsigned int *)v333 + 12);
                          long long __src = *(_OWORD *)(*(void *)(v336 + 40) + 16 * v337);
                          int v338 = *(unsigned __int16 *)(v334 + 24);
                          if (v338 == 176)
                          {
                            int v338 = *(unsigned __int16 *)(v336 + 24);
                            int v339 = v337;
                            uint64_t v340 = v336;
                          }
                          else
                          {
                            int v339 = v335;
                            uint64_t v340 = v334;
                            int v335 = v337;
                            uint64_t v334 = v336;
                          }
                          if (v338 != 173 && v338 != 56) {
                            return 0;
                          }
                          if (*(_WORD *)(v334 + 24) != 176) {
                            return 0;
                          }
                          uint64_t v341 = *(void *)(v340 + 48);
                          if (!v341) {
                            return 0;
                          }
                          int v342 = 1;
                          do
                          {
                            if (*(_DWORD *)(v341 + 8) == v339)
                            {
                              if (!v342) {
                                return 0;
                              }
                              --v342;
                            }
                            uint64_t v341 = *(void *)(v341 + 32);
                          }
                          while (v341);
                          if (v342) {
                            return 0;
                          }
                          uint64_t v424 = *(void *)(v334 + 48);
                          if (!v424) {
                            return 0;
                          }
                          int v425 = 1;
                          do
                          {
                            if (*(_DWORD *)(v424 + 8) == v335)
                            {
                              if (!v425) {
                                return 0;
                              }
                              --v425;
                            }
                            uint64_t v424 = *(void *)(v424 + 32);
                          }
                          while (v424);
                          if (v425) {
                            return 0;
                          }
                          uint64_t v426 = *(void *)(v340 + 32);
                          uint64_t v427 = *(void *)(v334 + 32);
                          if (*(void *)v426 != *(void *)v427) {
                            return 0;
                          }
                          if (*(_DWORD *)(v426 + 8) != *(_DWORD *)(v427 + 8)) {
                            return 0;
                          }
                          unsigned int v428 = sub_1CD3E12F4((unsigned __int8 *)&__src, v330, v331);
                          uint64_t v429 = sub_1CCFD8CD8(*(void *)(*(void *)(v340 + 32) + 40), *(void *)(*(void *)(v340 + 32) + 48), 1, 0);
                          uint64_t v430 = sub_1CCFD8CD8(*(void *)(*(void *)(v334 + 32) + 40), *(void *)(*(void *)(v334 + 32) + 48), 1, 0);
                          if (!v429) {
                            return 0;
                          }
                          uint64_t v431 = v430;
                          uint64_t v432 = *(void *)(v429 + 80);
                          uint64_t v433 = (unint64_t **)(v432 + 24);
                          unsigned int v434 = *(_DWORD *)(v432 + 32);
                          if (v434 > 0x40)
                          {
                            if ((((*v433)[(v434 - 1) >> 6] >> (v434 - 1)) & 1) == 0) {
                              return 0;
                            }
                            BOOL v435 = llvm::APInt::countTrailingZerosSlowCase(v433) == v434 - 1;
                          }
                          else
                          {
                            BOOL v435 = *v433 == (unint64_t *)(1 << (v434 - 1));
                          }
                          if (v435 && v431 != 0)
                          {
                            uint64_t v438 = *(void *)(v431 + 80);
                            uint64_t v439 = (void *)(v438 + 24);
                            uint64_t v440 = *(unsigned int *)(v438 + 32);
                            if (v440 >= 0x41)
                            {
                              int v441 = 0;
                              int64_t v442 = (unint64_t)(v440 + 63) >> 6;
                              do
                              {
                                BOOL v128 = v442-- < 1;
                                if (v128) {
                                  break;
                                }
                                unint64_t v443 = *(void *)(*v439 + 8 * v442);
                                v441 += __clz(v443);
                              }
                              while (!v443);
                              int v444 = v440 | 0xFFFFFFC0;
                              if ((v440 & 0x3F) == 0) {
                                int v444 = 0;
                              }
                              if ((v440 - v441 - v444) > 0x40) {
                                return 0;
                              }
                              uint64_t v439 = (void *)*v439;
                            }
                            if (*v439 == v428 - 1)
                            {
                              unsigned int v445 = *(void **)(a2 + 64);
                              __dst[0] = v445;
                              if (v445)
                              {
                                llvm::MetadataTracking::track((uint64_t)__dst, (unsigned __int8 *)v445, 2);
                                uint64_t v432 = *(void *)(v429 + 80);
                              }
                              LODWORD(__dst[1]) = *(_DWORD *)(a2 + 60);
                              uint64_t v446 = sub_1CD7EBB14(v332, (llvm::LLVMContext *)(v432 + 24), (const llvm::APInt *)__dst, __src, *((uint64_t *)&__src + 1), 0, 0);
                              unint64_t v449 = *(uint64_t **)(v340 + 32);
                              uint64_t v450 = *v449;
                              uint64_t v451 = v449[1];
                              uint64_t v452 = *(void *)(v332 + 832);
                              if (v452) {
                                LOWORD(v452) = *(_WORD *)(v452 + 8);
                              }
                              uint64_t v6 = (uint64_t)sub_1CCFDED5C(v332, 85, (const llvm::APInt *)__dst, (llvm *)__src, *((uint64_t *)&__src + 1), v450, v451, v448, v446, v447, v452);
                              if (__dst[0])
                              {
                                int v453 = *(unsigned __int8 *)__dst[0];
                                if ((v453 - 4) > 0x1E)
                                {
                                  if ((v453 - 3) >= 0xFFFFFFFE) {
                                    uint64_t v509 = __dst[0];
                                  }
                                  else {
                                    uint64_t v509 = 0;
                                  }
                                  if ((v453 - 3) >= 0xFFFFFFFE)
                                  {
                                    unint64_t v510 = (unint64_t)v509 + 8;
LABEL_907:
                                    *(void *)&long long v562 = __dst;
                                    sub_1CC5FA668(v510 + 16, &v562);
                                    goto LABEL_782;
                                  }
                                  if (v453 == 3) {
                                    *((void *)__dst[0] + 1) = 0;
                                  }
                                }
                                else if ((*((unsigned char *)__dst[0] + 1) & 0x7F) == 2 || *((_DWORD *)__dst[0] + 3))
                                {
                                  uint64_t v514 = *((void *)__dst[0] + 2);
                                  if ((v514 & 4) != 0)
                                  {
                                    unint64_t v510 = v514 & 0xFFFFFFFFFFFFFFF8;
                                    if (v510) {
                                      goto LABEL_907;
                                    }
                                  }
                                }
                              }
LABEL_782:
                              if (v6) {
                                return (uint64_t *)v6;
                              }
                            }
                          }
                          return 0;
                        }
                        uint64_t v371 = (llvm::APFloatBase *)*a1;
                        unsigned int v454 = *(unsigned __int8 **)(a2 + 64);
                        *(void *)&long long __src = v454;
                        if (v454) {
                          llvm::MetadataTracking::track((uint64_t)&__src, v454, 2);
                        }
                        DWORD2(__src) = *(_DWORD *)(a2 + 60);
                        uint64_t v373 = v539;
                        uint64_t v374 = v540;
                        uint64_t v375 = *(uint64_t **)(v542 + 32);
LABEL_788:
                        uint64_t v455 = *v375;
                        int v456 = (void *)v375[1];
                        uint64_t v457 = *((void *)v371 + 104);
                        if (v457) {
                          __int16 v458 = *(_WORD *)(v457 + 8);
                        }
                        else {
                          __int16 v458 = 0;
                        }
                        unsigned int v36 = sub_1CD7F3564(v371, (const char *)0xC7, (uint64_t)&__src, v373, v374, v455, v456, v458);
                        goto LABEL_54;
                      }
                      int v470 = 175;
                    }
                    unsigned int v535 = v470;
                    uint64_t v471 = *(void *)(v316 + 32);
                    if (sub_1CD802954(*(void *)v471)) {
                      goto LABEL_827;
                    }
                    goto LABEL_609;
                  }
                  uint64_t v207 = *(void *)(v204 + 80);
                  unint64_t v208 = (void *)(v207 + 24);
                  uint64_t v209 = *(unsigned int *)(v207 + 32);
                  if (v209 > 0x40)
                  {
                    int v459 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)(v207 + 24));
                    if (!v459) {
                      goto LABEL_543;
                    }
                    int v460 = 0;
                    int64_t v461 = (unint64_t)(v209 + 63) >> 6;
                    do
                    {
                      BOOL v128 = v461-- < 1;
                      if (v128) {
                        break;
                      }
                      unint64_t v462 = *(void *)(*v208 + 8 * v461);
                      v460 += __clz(v462);
                    }
                    while (!v462);
                    int v463 = v209 | 0xFFFFFFC0;
                    if ((v209 & 0x3F) == 0) {
                      int v463 = 0;
                    }
                    if (v463 + v459 + v460 != v209) {
                      goto LABEL_543;
                    }
                  }
                  else
                  {
                    if (*v208) {
                      BOOL v210 = ((*v208 + 1) & *v208) == 0;
                    }
                    else {
                      BOOL v210 = 0;
                    }
                    if (!v210) {
                      goto LABEL_543;
                    }
                  }
                  if (*(_WORD *)(*v203 + 24) == 253) {
                    goto LABEL_543;
                  }
                  *(void *)&long long __src = &v550;
                  *((void *)&__src + 1) = 0x800000000;
                  __dst[0] = v548;
                  __dst[1] = v548;
                  uint64_t v546 = 2;
                  int v547 = 0;
                  *(void *)&long long v543 = 0;
                  int v211 = sub_1CCF4B174((uint64_t)a1, a2, (uint64_t)&__src, (uint64_t)__dst, v204, (uint64_t *)&v543);
                  if (DWORD2(__src)) {
                    int v213 = v211;
                  }
                  else {
                    int v213 = 0;
                  }
                  int v528 = v213;
                  if (v213 != 1) {
                    goto LABEL_538;
                  }
                  uint64_t v214 = *(void *)(a2 + 32);
                  uint64_t v531 = *(void *)(v214 + 48);
                  uint64_t v533 = *(void *)(v214 + 40);
                  uint64_t v215 = v543;
                  if (!(void)v543)
                  {
LABEL_451:
                    if (__dst[1] == __dst[0]) {
                      uint64_t v226 = (uint64_t *)((char *)&v546 + 4);
                    }
                    else {
                      uint64_t v226 = &v546;
                    }
                    uint64_t v227 = *(unsigned int *)v226;
                    if (v227)
                    {
                      uint64_t v228 = 8 * v227;
                      uint64_t v229 = (uint64_t *)__dst[1];
                      while ((unint64_t)*v229 >= 0xFFFFFFFFFFFFFFFELL)
                      {
                        ++v229;
                        v228 -= 8;
                        if (!v228) {
                          goto LABEL_512;
                        }
                      }
                    }
                    else
                    {
                      uint64_t v229 = (uint64_t *)__dst[1];
                    }
                    uint64_t v236 = (unint64_t *)((char *)__dst[1] + 8 * v227);
                    if (v229 == (uint64_t *)v236) {
                      goto LABEL_512;
                    }
                    uint64_t v237 = *v229;
LABEL_474:
                    unsigned int v238 = *(uint64_t **)(v237 + 32);
                    uint64_t v239 = *v238;
                    uint64_t v240 = v238[1];
                    uint64_t v242 = v238[5];
                    unint64_t v241 = v238[6];
                    int v243 = *(unsigned __int16 *)(v239 + 24);
                    BOOL v244 = v243 == 35 || v243 == 11;
                    int v245 = v241;
                    if (v244) {
                      uint64_t v246 = v239;
                    }
                    else {
                      uint64_t v246 = v242;
                    }
                    if (v244) {
                      unint64_t v241 = v241 & 0xFFFFFFFF00000000 | v240;
                    }
                    uint64_t v525 = v241;
                    if (v244) {
                      int v247 = (llvm::LLVMContext *)v242;
                    }
                    else {
                      int v247 = (llvm::LLVMContext *)v239;
                    }
                    uint64_t v520 = v247;
                    if (v244) {
                      int v248 = v245;
                    }
                    else {
                      int v248 = v240;
                    }
                    int v517 = v248;
                    uint64_t v249 = *a1;
                    unint64_t v250 = *(unsigned __int8 **)(v246 + 64);
                    *(void *)&long long v562 = v250;
                    if (v250) {
                      llvm::MetadataTracking::track((uint64_t)&v562, v250, 2);
                    }
                    DWORD2(v562) = *(_DWORD *)(v246 + 60);
                    uint64_t v251 = *(void *)(v246 + 40) + 16 * v525;
                    uint64_t v252 = *(llvm **)v251;
                    uint64_t v253 = *(void *)(v251 + 8);
                    uint64_t v254 = *(void *)(v249 + 832);
                    if (v254) {
                      LOWORD(v254) = *(_WORD *)(v254 + 8);
                    }
                    long long v255 = sub_1CCFDED5C(v249, 171, (const llvm::APInt *)&v562, v252, v253, v246, v525, v212, v533, v531, v254);
                    int v257 = v256;
                    if ((void)v562)
                    {
                      int v258 = *(unsigned __int8 *)v562;
                      if ((v258 - 4) > 0x1E)
                      {
                        if ((v258 - 3) >= 0xFFFFFFFE) {
                          uint64_t v261 = v562;
                        }
                        else {
                          uint64_t v261 = 0;
                        }
                        if ((v258 - 3) >= 0xFFFFFFFE)
                        {
                          unint64_t v262 = v261 + 8;
LABEL_506:
                          *(void *)&long long v544 = &v562;
                          sub_1CC5FA668(v262 + 16, &v544);
                          goto LABEL_497;
                        }
                        if (v258 == 3) {
                          *(void *)(v562 + 8) = 0;
                        }
                      }
                      else if ((*(unsigned char *)(v562 + 1) & 0x7F) == 2 || *(_DWORD *)(v562 + 12))
                      {
                        uint64_t v263 = *(void *)(v562 + 16);
                        if ((v263 & 4) != 0)
                        {
                          unint64_t v262 = v263 & 0xFFFFFFFFFFFFFFF8;
                          if (v262) {
                            goto LABEL_506;
                          }
                        }
                      }
                    }
LABEL_497:
                    sub_1CD800168(*a1, v237, (uint64_t)v520, v517, (uint64_t)v255, v257);
                    uint64_t v259 = (unint64_t *)(v229 + 1);
                    while (v259 != v236)
                    {
                      unint64_t v260 = *v259++;
                      uint64_t v237 = v260;
                      if (v260 <= 0xFFFFFFFFFFFFFFFDLL)
                      {
                        uint64_t v229 = (uint64_t *)(v259 - 1);
                        goto LABEL_474;
                      }
                    }
LABEL_512:
                    if (DWORD2(__src))
                    {
                      int v264 = (uint64_t *)__src;
                      for (uint64_t j = 8 * DWORD2(__src); j; j -= 8)
                      {
                        uint64_t v266 = *v264;
                        uint64_t v267 = *a1;
                        int v268 = *(unsigned __int8 **)(*v264 + 64);
                        *(void *)&long long v562 = v268;
                        if (v268) {
                          llvm::MetadataTracking::track((uint64_t)&v562, v268, 2);
                        }
                        DWORD2(v562) = *(_DWORD *)(v266 + 60);
                        uint64_t v269 = *(void *)(v266 + 40);
                        uint64_t v270 = *(llvm **)v269;
                        uint64_t v271 = *(void *)(v269 + 8);
                        uint64_t v272 = *(void *)(v267 + 832);
                        if (v272) {
                          LOWORD(v272) = *(_WORD *)(v272 + 8);
                        }
                        uint64_t v273 = sub_1CCFDED5C(v267, 171, (const llvm::APInt *)&v562, v270, v271, v266, 0, v212, v533, v531, v272);
                        int v275 = v274;
                        if (!(void)v562) {
                          goto LABEL_522;
                        }
                        int v276 = *(unsigned __int8 *)v562;
                        if ((v276 - 4) > 0x1E)
                        {
                          if ((v276 - 3) >= 0xFFFFFFFE) {
                            uint64_t v279 = v562;
                          }
                          else {
                            uint64_t v279 = 0;
                          }
                          if ((v276 - 3) < 0xFFFFFFFE)
                          {
                            if (v276 == 3) {
                              *(void *)(v562 + 8) = 0;
                            }
                            goto LABEL_522;
                          }
                          unint64_t v280 = v279 + 8;
                        }
                        else
                        {
                          if ((*(unsigned char *)(v562 + 1) & 0x7F) != 2 && !*(_DWORD *)(v562 + 12)) {
                            goto LABEL_522;
                          }
                          uint64_t v281 = *(void *)(v562 + 16);
                          if ((v281 & 4) == 0) {
                            goto LABEL_522;
                          }
                          unint64_t v280 = v281 & 0xFFFFFFFFFFFFFFF8;
                          if (!v280) {
                            goto LABEL_522;
                          }
                        }
                        *(void *)&long long v544 = &v562;
                        sub_1CC5FA668(v280 + 16, &v544);
LABEL_522:
                        sub_1CD800DA0(*a1, v266, 0, (uint64_t)v273, v275);
                        if (*((_WORD *)v273 + 12) == 171) {
                          uint64_t v273 = sub_1CD800168(*a1, (uint64_t)v273, v266, 0, v533, v531);
                        }
                        *(void *)&long long v562 = sub_1CCF4787C(a1, (uint64_t)v273, v277);
                        DWORD2(v562) = v278;
                        uint64_t v563 = v562;
                        int v564 = 1;
                        sub_1CCEF083C(a1, v266, (uint64_t *)&v562, 2, 1);
                        ++v264;
                      }
                    }
                    sub_1CCFCC50C(*a1, a2, **(void **)(a2 + 32));
LABEL_538:
                    if (__dst[1] != __dst[0]) {
                      free(__dst[1]);
                    }
                    if ((uint64_t **)__src != &v550) {
                      free((void *)__src);
                    }
                    if (v528) {
                      return (uint64_t *)a2;
                    }
                    goto LABEL_543;
                  }
                  uint64_t v216 = *a1;
                  uint64_t v217 = *(unsigned __int8 **)(v543 + 64);
                  *(void *)&long long v562 = v217;
                  if (v217) {
                    llvm::MetadataTracking::track((uint64_t)&v562, v217, 2);
                  }
                  DWORD2(v562) = *(_DWORD *)(v215 + 60);
                  uint64_t v218 = *(void *)(v215 + 40);
                  uint64_t v219 = *(llvm **)v218;
                  uint64_t v220 = *(void *)(v218 + 8);
                  uint64_t v221 = *(void *)(v216 + 832);
                  if (v221) {
                    LOWORD(v221) = *(_WORD *)(v221 + 8);
                  }
                  int v222 = sub_1CCFDED5C(v216, 171, (const llvm::APInt *)&v562, v219, v220, v215, 0, v212, v533, v531, v221);
                  int v224 = v223;
                  if ((void)v562)
                  {
                    int v225 = *(unsigned __int8 *)v562;
                    if ((v225 - 4) > 0x1E)
                    {
                      if ((v225 - 3) >= 0xFFFFFFFE) {
                        uint64_t v301 = v562;
                      }
                      else {
                        uint64_t v301 = 0;
                      }
                      if ((v225 - 3) < 0xFFFFFFFE)
                      {
                        if (v225 == 3) {
                          *(void *)(v562 + 8) = 0;
                        }
                        goto LABEL_449;
                      }
                      unint64_t v302 = v301 + 8;
                      goto LABEL_572;
                    }
                    if ((*(unsigned char *)(v562 + 1) & 0x7F) == 2 || *(_DWORD *)(v562 + 12))
                    {
                      uint64_t v502 = *(void *)(v562 + 16);
                      if ((v502 & 4) != 0)
                      {
                        unint64_t v302 = v502 & 0xFFFFFFFFFFFFFFF8;
                        if (v302)
                        {
LABEL_572:
                          *(void *)&long long v544 = &v562;
                          sub_1CC5FA668(v302 + 16, &v544);
                        }
                      }
                    }
                  }
LABEL_449:
                  sub_1CD800DA0(*a1, v215, 0, (uint64_t)v222, v224);
                  if (*((_WORD *)v222 + 12) == 171) {
                    sub_1CD800168(*a1, (uint64_t)v222, v215, 0, v533, v531);
                  }
                  goto LABEL_451;
                }
LABEL_396:
                uint64_t v182 = *((void *)&v542 + 1);
                if ((void)v542 == v98) {
                  uint64_t v182 = 0;
                }
                *(void *)&long long __src = v542;
                *((void *)&__src + 1) = v182;
                sub_1CCEF083C(a1, a2, (uint64_t *)&__src, 1, 1);
                unsigned int v183 = *(unsigned __int16 *)(v98 + 26);
                if ((v183 & 0xC00) != 0x400)
                {
LABEL_575:
                  if (LODWORD(__dst[1]) < 0x41) {
                    return (uint64_t *)a2;
                  }
                  unsigned int v303 = __dst[0];
                  if (!__dst[0]) {
                    return (uint64_t *)a2;
                  }
LABEL_577:
                  MEMORY[0x1D25D9CB0](v303, 0x1000C8000313F17);
                  return (uint64_t *)a2;
                }
                uint64_t v184 = *a1;
                int v185 = (v183 >> 7) & 7;
                uint64_t v186 = *(uint64_t **)(v98 + 40);
                uint64_t v187 = *v186;
                uint64_t v188 = v186[1];
                uint64_t v189 = *(unsigned __int8 **)(v98 + 64);
                *(void *)&long long __src = v189;
                if (v189) {
                  llvm::MetadataTracking::track((uint64_t)&__src, v189, 2);
                }
                DWORD2(__src) = *(_DWORD *)(v98 + 60);
                char v190 = *(uint64_t **)(v98 + 32);
                int v191 = sub_1CD7FA7CC(v184, v185, 3, v187, v188, (uint64_t)&__src, *v190, v190[1], v190[5], v190[6], v190[10], v190[11], *(void *)(v98 + 80), *(void *)(v98 + 88), *(void *)(v98 + 96));
                if ((void)__src)
                {
                  int v192 = *(unsigned __int8 *)__src;
                  if ((v192 - 4) > 0x1E)
                  {
                    if ((v192 - 3) >= 0xFFFFFFFE) {
                      uint64_t v358 = __src;
                    }
                    else {
                      uint64_t v358 = 0;
                    }
                    if ((v192 - 3) < 0xFFFFFFFE)
                    {
                      if (v192 == 3) {
                        *(void *)(__src + 8) = 0;
                      }
                      goto LABEL_405;
                    }
                    unint64_t v359 = v358 + 8;
                  }
                  else
                  {
                    if ((*(unsigned char *)(__src + 1) & 0x7F) != 2 && !*(_DWORD *)(__src + 12)) {
                      goto LABEL_405;
                    }
                    uint64_t v505 = *(void *)(__src + 16);
                    if ((v505 & 4) == 0) {
                      goto LABEL_405;
                    }
                    unint64_t v359 = v505 & 0xFFFFFFFFFFFFFFF8;
                    if (!v359) {
                      goto LABEL_405;
                    }
                  }
                  *(void *)&long long v562 = &__src;
                  sub_1CC5FA668(v359 + 16, &v562);
                }
LABEL_405:
                if (*(_WORD *)(v98 + 58) == 3)
                {
                  long long __src = (unint64_t)v191;
                  uint64_t v550 = v191;
                  uint64_t v551 = 1;
                  char v552 = v191;
                  uint64_t v553 = 2;
                  uint64_t v193 = a1;
                  uint64_t v194 = v98;
                  int v195 = 3;
                }
                else
                {
                  *(void *)&long long __src = v191;
                  DWORD2(__src) = 0;
                  uint64_t v550 = v191;
                  LODWORD(v551) = 1;
                  uint64_t v193 = a1;
                  uint64_t v194 = v98;
                  int v195 = 2;
                }
                sub_1CCEF083C(v193, v194, (uint64_t *)&__src, v195, 1);
                goto LABEL_575;
              }
              if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)__dst) == v180) {
                goto LABEL_396;
              }
            }
            else if (DWORD2(__src) < 0x41)
            {
              goto LABEL_409;
            }
            if (v179) {
              MEMORY[0x1D25D9CB0](v179, 0x1000C8000313F17);
            }
            goto LABEL_409;
          }
          if (v101 != 35) {
            goto LABEL_376;
          }
        }
        uint64_t v102 = *(void *)(v541 + 80);
        uint64_t v103 = (const void **)(v102 + 24);
        uint64_t v89 = *(unsigned int *)(v102 + 32);
        if (v89 > 0x40)
        {
          if (__dst != (void **)v103)
          {
            llvm::APInt::reallocate((uint64_t)__dst, v89);
            if (LODWORD(__dst[1]) <= 0x40) {
              __dst[0] = (void *)*v103;
            }
            else {
              memcpy(__dst[0], *v103, (((unint64_t)LODWORD(__dst[1]) + 63) >> 3) & 0x3FFFFFF8);
            }
          }
        }
        else
        {
          __dst[0] = (void *)*v103;
          LODWORD(__dst[1]) = v89;
        }
        goto LABEL_376;
      }
      *(_OWORD *)__dst = *(_OWORD *)*(void *)(v542 + 32);
      uint64_t v143 = *(void *)(v46 + 80);
      unsigned int v144 = *(_DWORD *)(v143 + 32);
      unsigned int v538 = v144;
      if (v144 > 0x40) {
        operator new[]();
      }
      if (v144) {
        unint64_t v145 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v144;
      }
      else {
        unint64_t v145 = 0;
      }
      unint64_t v537 = v145 & ~*(void *)(v143 + 24);
      DWORD2(v562) = v144;
      *(void *)&long long v562 = v537;
      unsigned int v538 = 0;
      unsigned int v146 = sub_1CD7878C0((unsigned int *)__dst, v89, v90);
      if (v146 > 0x40)
      {
        if (DWORD2(v562) != v146) {
          operator new[]();
        }
        sub_1CD0463BC((uint64_t)&__src, (uint64_t)&v562);
      }
      else
      {
        if (DWORD2(v562) >= 0x41) {
          unsigned int v147 = (uint64_t *)v562;
        }
        else {
          unsigned int v147 = (uint64_t *)&v562;
        }
        uint64_t v148 = *v147;
        DWORD2(__src) = v146;
        if (v146) {
          unint64_t v149 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v146;
        }
        else {
          unint64_t v149 = 0;
        }
        *(void *)&long long __src = v149 & v148;
      }
      if (DWORD2(v562) >= 0x41 && (void)v562) {
        MEMORY[0x1D25D9CB0](v562, 0x1000C8000313F17);
      }
      *(void *)&long long v562 = __src;
      DWORD2(v562) = DWORD2(__src);
      if (!sub_1CD7F11AC(*a1, (uint64_t)__dst[0], (BOOL)__dst[1], (uint64_t)&v562, 0))
      {
        if (DWORD2(v562) >= 0x41 && (void)v562) {
          MEMORY[0x1D25D9CB0](v562, 0x1000C8000313F17);
        }
        uint64_t v98 = v542;
        goto LABEL_183;
      }
      int v151 = (llvm::APFloatBase *)*a1;
      unsigned int v152 = *(unsigned __int8 **)(a2 + 64);
      *(void *)&long long __src = v152;
      if (v152) {
        llvm::MetadataTracking::track((uint64_t)&__src, v152, 2);
      }
      DWORD2(__src) = *(_DWORD *)(a2 + 60);
      uint64_t v153 = *(void *)(v542 + 40) + 16 * DWORD2(v542);
      uint64_t v154 = *(llvm **)v153;
      uint64_t v155 = *(void *)(v153 + 8);
      uint64_t v156 = *((void *)v151 + 104);
      if (v156) {
        __int16 v157 = *(_WORD *)(v156 + 8);
      }
      else {
        __int16 v157 = 0;
      }
      int v360 = sub_1CD7F3564(v151, (const char *)0xC7, (uint64_t)&__src, v154, v155, (uint64_t)__dst[0], __dst[1], v157);
      uint64_t v362 = v361;
      if ((void)__src)
      {
        int v363 = *(unsigned __int8 *)__src;
        if ((v363 - 4) > 0x1E)
        {
          if ((v363 - 3) >= 0xFFFFFFFE) {
            uint64_t v422 = __src;
          }
          else {
            uint64_t v422 = 0;
          }
          if ((v363 - 3) < 0xFFFFFFFE)
          {
            if (v363 == 3) {
              *(void *)(__src + 8) = 0;
            }
            goto LABEL_670;
          }
          unint64_t v423 = v422 + 8;
        }
        else
        {
          if ((*(unsigned char *)(__src + 1) & 0x7F) != 2 && !*(_DWORD *)(__src + 12)) {
            goto LABEL_670;
          }
          uint64_t v506 = *(void *)(__src + 16);
          if ((v506 & 4) == 0) {
            goto LABEL_670;
          }
          unint64_t v423 = v506 & 0xFFFFFFFFFFFFFFF8;
          if (!v423) {
            goto LABEL_670;
          }
        }
        *(void *)&long long v544 = &__src;
        sub_1CC5FA668(v423 + 16, &v544);
      }
LABEL_670:
      *(void *)&long long __src = v360;
      *((void *)&__src + 1) = v362;
      sub_1CCEF083C(a1, a2, (uint64_t *)&__src, 1, 1);
      uint64_t v364 = v542;
      *(void *)&long long __src = v360;
      *((void *)&__src + 1) = v362;
      uint64_t v365 = a1;
      int v366 = 1;
LABEL_671:
      sub_1CCEF083C(v365, v364, (uint64_t *)&__src, v366, 1);
      if (DWORD2(v562) < 0x41) {
        return (uint64_t *)a2;
      }
      unsigned int v303 = (void *)v562;
      if (!(void)v562) {
        return (uint64_t *)a2;
      }
      goto LABEL_577;
    }
    long long v543 = *(_OWORD *)(*(void *)(v83 + 40) + 16 * v85);
    int v516 = *(unsigned __int16 *)(v83 + 56);
    if (((unint64_t)sub_1CD3E12F4((unsigned __int8 *)&v543, (uint64_t)v86, v68) & 7) != 0)
    {
      LODWORD(v111) = 1;
    }
    else
    {
      unint64_t v111 = (unint64_t)sub_1CD3E12F4((unsigned __int8 *)&v543, v109, v110) >> 3;
      if ((int)v111 < 1) {
        goto LABEL_156;
      }
    }
    uint64_t v529 = (v111 + 1);
    unint64_t v530 = 1;
    while (1)
    {
      if ((unint64_t)sub_1CD3E12F4((unsigned __int8 *)&v543, v109, v110) % v530) {
        goto LABEL_208;
      }
      uint64_t v112 = sub_1CD3E12F4((unsigned __int8 *)&v543, v109, v110);
      *(void *)&long long __src = &v550;
      *((void *)&__src + 1) = 0x800000000;
      uint64_t v518 = (llvm::LLVMContext *)((unint64_t)v112 / v530);
      unsigned int v526 = v530 * v516;
      if (v530 * v516)
      {
        unsigned int v113 = 0;
        while (1)
        {
          uint64_t v114 = *(void *)(*(void *)(v83 + 32) + 40 * (v113 / v530));
          int v115 = *(unsigned __int16 *)(v114 + 24);
          if (v115 != 51) {
            break;
          }
          if (DWORD2(__src) >= (unint64_t)HIDWORD(__src)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(__src + 4 * DWORD2(__src)) = v113 + v526;
          ++DWORD2(__src);
LABEL_248:
          if (++v113 == v526) {
            goto LABEL_265;
          }
        }
        LODWORD(__dst[1]) = 1;
        __dst[0] = 0;
        if (v115 > 34)
        {
          if (v115 == 35) {
            goto LABEL_227;
          }
          if (v115 != 36) {
            goto LABEL_279;
          }
LABEL_221:
          uint64_t v116 = *(void *)(v114 + 80);
          uint64_t v118 = *(void **)(v116 + 32);
          uint64_t v117 = (llvm::detail::DoubleAPFloat *)(v116 + 32);
          if (v118 == &unk_1CFB2E344) {
            llvm::detail::DoubleAPFloat::bitcastToAPInt(v117, (llvm::APInt *)&v562);
          }
          else {
            llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v117, (uint64_t)&v562);
          }
          if (LODWORD(__dst[1]) >= 0x41 && __dst[0]) {
            MEMORY[0x1D25D9CB0](__dst[0], 0x1000C8000313F17);
          }
          __dst[0] = (void *)v562;
          LODWORD(__dst[1]) = DWORD2(v562);
        }
        else
        {
          if (v115 != 11)
          {
            if (v115 != 12) {
              goto LABEL_279;
            }
            goto LABEL_221;
          }
LABEL_227:
          uint64_t v119 = *(void *)(v114 + 80);
          uint64_t v521 = (const void **)(v119 + 24);
          unsigned int v120 = *(_DWORD *)(v119 + 32);
          if (v120 > 0x40)
          {
            if (__dst != (void **)v521)
            {
              llvm::APInt::reallocate((uint64_t)__dst, v120);
              if (LODWORD(__dst[1]) <= 0x40) {
                __dst[0] = (void *)*v521;
              }
              else {
                memcpy(__dst[0], *v521, (((unint64_t)LODWORD(__dst[1]) + 63) >> 3) & 0x3FFFFFF8);
              }
            }
          }
          else
          {
            __dst[0] = (void *)*v521;
            LODWORD(__dst[1]) = v120;
          }
        }
        unsigned int v121 = v113 % v530;
        if (*(unsigned char *)(*(void *)(**(void **)(*a1 + 40) + 40) + 272)) {
          unsigned int v121 = ~v121 + v530;
        }
        llvm::APInt::extractBits((uint64_t)__dst, v518, v121 * v518, (uint64_t)&v562);
        if (LODWORD(__dst[1]) >= 0x41 && __dst[0]) {
          MEMORY[0x1D25D9CB0](__dst[0], 0x1000C8000313F17);
        }
        v522 = (void **)v562;
        __dst[0] = (void *)v562;
        unsigned int v122 = DWORD2(v562);
        LODWORD(__dst[1]) = DWORD2(v562);
        if (!DWORD2(v562)) {
          goto LABEL_240;
        }
        if (DWORD2(v562) > 0x40)
        {
          if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)__dst) == v122) {
            goto LABEL_240;
          }
          int v126 = 0;
          int64_t v127 = ((unint64_t)v122 + 63) >> 6;
          do
          {
            BOOL v128 = v127-- < 1;
            if (v128) {
              break;
            }
            unint64_t v129 = (unint64_t)v522[v127];
            v126 += __clz(v129);
          }
          while (!v129);
          unsigned int v130 = v122 | 0xFFFFFFC0;
          if ((v122 & 0x3F) == 0) {
            unsigned int v130 = 0;
          }
          if (v122 - v126 - v130 > 0x40)
          {
            if (v522) {
              MEMORY[0x1D25D9CB0](v522, 0x1000C8000313F17);
            }
LABEL_279:
            uint64_t v6 = 0;
            goto LABEL_280;
          }
LABEL_256:
          if (!*v522)
          {
            unsigned int v125 = v113 + v526;
            unint64_t v123 = DWORD2(__src);
            unint64_t v124 = HIDWORD(__src);
            goto LABEL_241;
          }
          int v523 = 0;
        }
        else
        {
          if ((void)v562 != 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v562))
          {
            v522 = __dst;
            goto LABEL_256;
          }
LABEL_240:
          unint64_t v123 = DWORD2(__src);
          unint64_t v124 = HIDWORD(__src);
          unsigned int v125 = v113;
LABEL_241:
          if (v123 >= v124) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(__src + 4 * v123) = v125;
          ++DWORD2(__src);
          int v523 = 1;
          unsigned int v122 = __dst[1];
        }
        if (v122 >= 0x41 && __dst[0])
        {
          MEMORY[0x1D25D9CB0](__dst[0], 0x1000C8000313F17);
          if ((v523 & 1) == 0) {
            goto LABEL_279;
          }
        }
        else if (!v523)
        {
          goto LABEL_279;
        }
        goto LABEL_248;
      }
LABEL_265:
      if ((int)v518 <= 31)
      {
        switch(v518)
        {
          case 1:
            uint64_t v131 = 0;
            uint64_t v132 = 2;
            break;
          case 0x10:
            uint64_t v131 = 0;
            uint64_t v132 = 4;
            break;
          case 8:
            uint64_t v131 = 0;
            uint64_t v132 = 3;
            break;
          default:
            goto LABEL_287;
        }
      }
      else
      {
        switch(v518)
        {
          case 0x20:
            uint64_t v131 = 0;
            uint64_t v132 = 5;
            break;
          case 0x40:
            uint64_t v131 = 0;
            uint64_t v132 = 6;
            break;
          case 0x80:
            uint64_t v131 = 0;
            uint64_t v132 = 7;
            break;
          default:
LABEL_287:
            uint64_t v131 = llvm::IntegerType::get(*(llvm::IntegerType **)(*a1 + 56), v518);
            uint64_t v132 = 0;
            break;
        }
      }
      __int16 v133 = (llvm *)sub_1CB8E5DAC(*(llvm::LLVMContext **)(*a1 + 56), v132, v131, v526, 0);
      uint64_t v135 = v134;
      if (!(*(unsigned int (**)(void))(*(void *)a1[1] + 504))()) {
        goto LABEL_279;
      }
      uint64_t v136 = sub_1CD7EBF14(*a1, 0, (const llvm::APInt *)&v544, v133, v135, 0, 0);
      unsigned int v519 = v137;
      uint64_t v524 = (uint64_t)v136;
      uint64_t v527 = *a1;
      uint64_t v138 = sub_1CD7EF724(*a1, (uint64_t)v133, v135, v81, v82);
      uint64_t v140 = sub_1CCFCDA78(v527, v133, v135, (uint64_t)&v544, v138, v139, v524, v519, (void *)__src, DWORD2(__src));
      uint64_t v6 = sub_1CD7EF724(v527, v532, v80, (uint64_t)v140, v141);
LABEL_280:
      if ((uint64_t **)__src != &v550) {
        free((void *)__src);
      }
      if (v6) {
        goto LABEL_157;
      }
LABEL_208:
      if (++v530 == v529) {
        goto LABEL_156;
      }
    }
  }
  uint64_t v76 = *a1;
  uint64_t v77 = *(unsigned __int8 **)(a2 + 64);
  *(void *)&long long __src = v77;
  if (v77) {
    llvm::MetadataTracking::track((uint64_t)&__src, v77, 2);
  }
  DWORD2(__src) = *(_DWORD *)(a2 + 60);
  unsigned int v36 = sub_1CD7EBF14(v76, 0, (const llvm::APInt *)&__src, v539, v540, 0, 0);
LABEL_54:
  uint64_t v6 = (uint64_t)v36;
  uint64_t v37 = (void *)__src;
  if (!(void)__src) {
    return (uint64_t *)v6;
  }
  int v38 = *(unsigned __int8 *)__src;
  if ((v38 - 4) > 0x1E)
  {
    if ((v38 - 3) >= 0xFFFFFFFE) {
      uint64_t v48 = __src;
    }
    else {
      uint64_t v48 = 0;
    }
    if ((v38 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v40 = v48 + 8;
LABEL_79:
      __dst[0] = &__src;
      uint64_t v49 = v40 + 16;
      uint64_t v50 = __dst;
LABEL_80:
      sub_1CC5FA668(v49, v50);
      return (uint64_t *)v6;
    }
    goto LABEL_294;
  }
  if ((*(unsigned char *)(__src + 1) & 0x7F) == 2 || *(_DWORD *)(__src + 12))
  {
    uint64_t v39 = *(void *)(__src + 16);
    if ((v39 & 4) != 0)
    {
      unint64_t v40 = v39 & 0xFFFFFFFFFFFFFFF8;
      if (v40) {
        goto LABEL_79;
      }
    }
  }
  return (uint64_t *)v6;
}

uint64_t *sub_1CCF2C168(uint64_t *a1, uint64_t a2)
{
  uint64_t v391 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(uint64_t **)(a2 + 32);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  int v7 = v6;
  uint64_t v8 = v4[5];
  unint64_t v9 = v4[6];
  long long v386 = *(_OWORD *)(*(void *)(*v4 + 40) + 16 * v6);
  uint64_t v10 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v384 = v10;
  if (v10) {
    llvm::MetadataTracking::track((uint64_t)&v384, v10, 2);
  }
  int v385 = *(_DWORD *)(a2 + 60);
  int v11 = *(unsigned __int16 *)(v8 + 24);
  if (*(_WORD *)(v5 + 24) == 51)
  {
    int v12 = (uint64_t *)v5;
    if (v11 != 51) {
      goto LABEL_10;
    }
    uint64_t v13 = sub_1CD7EBF14(*a1, 0, (const llvm::APInt *)&v384, (llvm *)v386, *((uint64_t *)&v386 + 1), 0, 0);
    goto LABEL_9;
  }
  if (v11 == 51)
  {
    int v12 = (uint64_t *)v8;
    goto LABEL_10;
  }
  uint64_t v14 = *a1;
  unint64_t v387 = v5;
  LODWORD(v388) = v6;
  uint64_t v389 = v8;
  int v390 = v9;
  uint64_t v13 = sub_1CCFDBB80(v14, (const char *)0xAD, (const llvm::APInt *)&v384, (llvm *)v386, *((uint64_t *)&v386 + 1), (uint64_t *)&v387, 2);
  if (v13) {
    goto LABEL_9;
  }
  unint64_t v19 = v6;
  if (sub_1CD7F590C(*a1, v5) && !sub_1CD7F590C(*a1, v8))
  {
    uint64_t v27 = *(void *)(*a1 + 832);
    if (v27) {
      LOWORD(v27) = *(_WORD *)(v27 + 8);
    }
    uint64_t v13 = sub_1CCFDED5C(*a1, 173, (const llvm::APInt *)&v384, (llvm *)v386, *((uint64_t *)&v386 + 1), v8, v9, v24, v5, v6, v27);
    goto LABEL_9;
  }
  if ((_BYTE)v386)
  {
    if (v386 - 15 >= 0x9C) {
      goto LABEL_31;
    }
  }
  else if ((*(_DWORD *)(*((void *)&v386 + 1) + 8) & 0xFE) != 0x12)
  {
    goto LABEL_31;
  }
  uint64_t v13 = sub_1CCF3FF7C(a1, a2, (const llvm::APInt *)&v384, v20, v21, v22, v23, v24);
  if (v13) {
    goto LABEL_9;
  }
  if (sub_1CCFCBB88(v8, 0, v25))
  {
LABEL_30:
    int v12 = (uint64_t *)v5;
    goto LABEL_10;
  }
LABEL_31:
  if (sub_1CD7F2D2C(v8)) {
    goto LABEL_30;
  }
  uint64_t v13 = sub_1CCF40F64((llvm::APFloatBase **)a1, a2);
  if (v13) {
    goto LABEL_9;
  }
  int v26 = sub_1CCF414C8(a1, (const char *)0xAD, (const llvm::APInt *)&v384, v5, v6, v8, v9, *(_WORD *)(a2 + 72));
  if (v26)
  {
    int v12 = v26;
    goto LABEL_10;
  }
  if (!*((unsigned char *)a1 + 33)
    || ((uint64_t v28 = (void *)a1[1], v386 == 1) || (_BYTE)v386 && v28[v386 + 12])
    && !*((unsigned char *)v28 + 390 * v386 + 3918))
  {
    int v29 = *(unsigned __int16 *)(v8 + 24);
    if (v29 == 35 || v29 == 11)
    {
      uint64_t v30 = *(void *)(v8 + 80);
      uint64_t v31 = (unint64_t **)(v30 + 24);
      unsigned int v32 = *(_DWORD *)(v30 + 32);
      if (v32 > 0x40)
      {
        if ((((*v31)[(v32 - 1) >> 6] >> (v32 - 1)) & 1) == 0
          || llvm::APInt::countTrailingZerosSlowCase(v31) != v32 - 1)
        {
          goto LABEL_49;
        }
      }
      else if (*v31 != (unint64_t *)(1 << (v32 - 1)))
      {
        goto LABEL_49;
      }
      int v12 = sub_1CCF3E734((uint64_t)a1, a2);
      if (v12) {
        goto LABEL_10;
      }
    }
  }
LABEL_49:
  unsigned int v374 = *(unsigned __int16 *)(v5 + 24);
  uint64_t v382 = 0;
  LODWORD(v383) = 0;
  uint64_t v380 = 0;
  LODWORD(v381) = 0;
  uint64_t v378 = 0;
  int v379 = 0;
  if (!sub_1CD80E98C((unsigned int *)a1[1], v8, v9)
    || !sub_1CCF4C9B0((uint64_t)a1, v5, v6, (uint64_t)&v382, (uint64_t)&v380, (uint64_t)&v378, 1)
    || (uint64_t v33 = v382,
        unsigned int v34 = (uint64_t *)(*(void *)(v382 + 40) + 16 * v383),
        uint64_t v35 = *v34,
        unsigned int __s2 = sub_1CD7E9F74(*(_DWORD *)(v378 + 76), *v34, v34[1]),
        *((unsigned char *)a1 + 33))
    && ((*(_DWORD *)(a1[1] + 92 * __s2 + 4 * (v35 >> 3) + 171588) >> (4 * (v35 & 7))) & 0xF) != 0)
  {
    if (!sub_1CD8029CC(v8)) {
      goto LABEL_88;
    }
    if (v374 != 199) {
      goto LABEL_88;
    }
    uint64_t v45 = *(void *)(v5 + 48);
    if (!v45) {
      goto LABEL_88;
    }
    int v46 = 1;
    do
    {
      if (*(_DWORD *)(v45 + 8) == v6)
      {
        if (!v46) {
          goto LABEL_88;
        }
        --v46;
      }
      uint64_t v45 = *(void *)(v45 + 32);
    }
    while (v45);
    if (v46
      || !sub_1CCF4C9B0((uint64_t)a1, **(void **)(v5 + 32), *(void *)(*(void *)(v5 + 32) + 8), (uint64_t)&v382, (uint64_t)&v380, (uint64_t)&v378, 0))
    {
      goto LABEL_88;
    }
    uint64_t v47 = *(uint64_t **)(v5 + 32);
    uint64_t v49 = *v47;
    uint64_t v48 = v47[1];
    uint64_t v50 = *(unsigned __int8 **)(v5 + 64);
    unint64_t v387 = (unint64_t)v50;
    if (v50) {
      llvm::MetadataTracking::track((uint64_t)&v387, v50, 2);
    }
    LODWORD(v388) = *(_DWORD *)(v5 + 60);
    uint64_t v51 = *a1;
    uint64_t v52 = *(void *)(v49 + 40) + 16 * v48;
    uint64_t v53 = *(llvm **)v52;
    uint64_t v54 = *(void *)(v52 + 8);
    uint64_t v55 = sub_1CD7EBF14(*a1, 1, (const llvm::APInt *)&v387, *(llvm **)v52, v54, 0, 0);
    uint64_t v58 = *(void *)(v51 + 832);
    if (v58) {
      LOWORD(v58) = *(_WORD *)(v58 + 8);
    }
    uint64_t v59 = sub_1CCFDED5C(v51, 173, (const llvm::APInt *)&v387, v53, v54, v49, v48, v57, (uint64_t)v55, v56, v58);
    int v61 = (void *)(v48 & 0xFFFFFFFF00000000 | v60);
    sub_1CCEF0788((uint64_t)a1, (uint64_t)v59);
    uint64_t v62 = *(void *)(*a1 + 832);
    if (v62) {
      __int16 v63 = *(_WORD *)(v62 + 8);
    }
    else {
      __int16 v63 = 0;
    }
    uint64_t v114 = sub_1CD7F3564((llvm::APFloatBase *)*a1, (const char *)0xC7, (uint64_t)&v384, (llvm *)v386, *((uint64_t *)&v386 + 1), (uint64_t)v59, v61, v63);
LABEL_296:
    int v12 = v114;
    if (!v387) {
      goto LABEL_10;
    }
    int v172 = *(unsigned __int8 *)v387;
    if ((v172 - 4) > 0x1E)
    {
      if ((v172 - 3) >= 0xFFFFFFFE) {
        unint64_t v175 = v387;
      }
      else {
        unint64_t v175 = 0;
      }
      if ((v172 - 3) < 0xFFFFFFFE)
      {
        if (v172 == 3) {
          *(void *)(v387 + 8) = 0;
        }
        goto LABEL_10;
      }
      unint64_t v174 = v175 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v387 + 1) & 0x7F) != 2 && !*(_DWORD *)(v387 + 12)) {
        goto LABEL_10;
      }
      uint64_t v173 = *(void *)(v387 + 16);
      if ((v173 & 4) == 0) {
        goto LABEL_10;
      }
      unint64_t v174 = v173 & 0xFFFFFFFFFFFFFFF8;
      if (!v174) {
        goto LABEL_10;
      }
    }
    v376 = &v387;
    sub_1CC5FA668(v174 + 16, &v376);
    goto LABEL_10;
  }
  if (v374 - 138 >= 2)
  {
    if (v374 == 192)
    {
      uint64_t v112 = (void *)*a1;
      unsigned int v113 = *(unsigned __int8 **)(v5 + 64);
      unint64_t v387 = (unint64_t)v113;
      if (v113) {
        llvm::MetadataTracking::track((uint64_t)&v387, v113, 2);
      }
      LODWORD(v388) = *(_DWORD *)(v5 + 60);
      uint64_t v114 = sub_1CD3D6058(v112, (const llvm::APInt *)&v387, v33, v383, v380, v381, *(void *)(*(void *)(v5 + 32) + 80), *(void *)(*(void *)(v5 + 32) + 88), *(void *)(*(void *)(v5 + 32) + 120), *(void *)(*(void *)(v5 + 32) + 128), HIDWORD(*(void *)(*(void *)(v5 + 32) + 128)), __s2);
    }
    else
    {
      __int16 v133 = (void *)*a1;
      uint64_t v134 = *(unsigned __int8 **)(v5 + 64);
      unint64_t v387 = (unint64_t)v134;
      if (v134) {
        llvm::MetadataTracking::track((uint64_t)&v387, v134, 2);
      }
      LODWORD(v388) = *(_DWORD *)(v5 + 60);
      uint64_t v114 = sub_1CD3DC614(v133, (const llvm::APInt *)&v387, (llvm *)v386, *((uint64_t *)&v386 + 1), v33, v383, v380, v381, __s2, 0, 0, 0, 0);
    }
    goto LABEL_296;
  }
  uint64_t v36 = *(void *)(v5 + 48);
  if (v36)
  {
    int v37 = 1;
    do
    {
      if (*(_DWORD *)(v36 + 8) == v6)
      {
        if (!v37) {
          goto LABEL_88;
        }
        --v37;
      }
      uint64_t v36 = *(void *)(v36 + 32);
    }
    while (v36);
    if (!v37)
    {
      int v38 = (void *)*a1;
      uint64_t v39 = *(unsigned __int8 **)(v5 + 64);
      unint64_t v387 = (unint64_t)v39;
      if (v39) {
        llvm::MetadataTracking::track((uint64_t)&v387, v39, 2);
      }
      LODWORD(v388) = *(_DWORD *)(v5 + 60);
      unint64_t v40 = sub_1CD3DC614(v38, (const llvm::APInt *)&v387, (llvm *)v386, *((uint64_t *)&v386 + 1), v33, v383, v380, v381, __s2, **(void **)(v5 + 32), *(void *)(*(void *)(v5 + 32) + 8), HIDWORD(*(void *)(*(void *)(v5 + 32) + 8)), v374 == 139);
      uint64_t v42 = v41;
      if (!v387) {
        goto LABEL_67;
      }
      int v43 = *(unsigned __int8 *)v387;
      if ((v43 - 4) > 0x1E)
      {
        if ((v43 - 3) >= 0xFFFFFFFE) {
          unint64_t v194 = v387;
        }
        else {
          unint64_t v194 = 0;
        }
        if ((v43 - 3) < 0xFFFFFFFE)
        {
          if (v43 == 3) {
            *(void *)(v387 + 8) = 0;
          }
          goto LABEL_67;
        }
        unint64_t v195 = v194 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v387 + 1) & 0x7F) != 2 && !*(_DWORD *)(v387 + 12)) {
          goto LABEL_67;
        }
        uint64_t v272 = *(void *)(v387 + 16);
        if ((v272 & 4) == 0) {
          goto LABEL_67;
        }
        unint64_t v195 = v272 & 0xFFFFFFFFFFFFFFF8;
        if (!v195) {
          goto LABEL_67;
        }
      }
      v376 = &v387;
      sub_1CC5FA668(v195 + 16, &v376);
LABEL_67:
      unint64_t v387 = (unint64_t)v40;
      uint64_t v388 = v42;
      sub_1CCEF083C(a1, a2, (uint64_t *)&v387, 1, 1);
      sub_1CD800DA0(*a1, v5, 1, (uint64_t)v40, 1);
      sub_1CCEF0930(a1, v5);
LABEL_68:
      int v12 = (uint64_t *)a2;
      goto LABEL_10;
    }
  }
LABEL_88:
  if (sub_1CD8029CC(v8) && v386 == 2)
  {
    uint64_t v64 = *(void *)(v5 + 48);
    if (v64)
    {
      int v65 = 1;
      do
      {
        if (*(_DWORD *)(v64 + 8) == v6)
        {
          if (!v65) {
            goto LABEL_122;
          }
          --v65;
        }
        uint64_t v64 = *(void *)(v64 + 32);
      }
      while (v64);
      if (!v65 && v374 - 171 <= 1)
      {
        unint64_t v66 = *(uint64_t **)(v5 + 32);
        uint64_t v67 = *v66;
        uint64_t __s2a = v66[1];
        uint64_t v69 = v66[5];
        uint64_t v68 = v66[6];
        if (sub_1CCF50ECC((uint64_t)a1, v69, v68) || sub_1CCF50ECC((uint64_t)a1, v67, __s2a))
        {
LABEL_100:
          if (v374 == 171) {
            uint64_t v71 = 172;
          }
          else {
            uint64_t v71 = 171;
          }
          uint64_t v72 = *a1;
          uint64_t v73 = *(unsigned __int8 **)(v67 + 64);
          unint64_t v387 = (unint64_t)v73;
          if (v73) {
            llvm::MetadataTracking::track((uint64_t)&v387, v73, 2);
          }
          LODWORD(v388) = *(_DWORD *)(v67 + 60);
          uint64_t v74 = *(void *)(v72 + 832);
          if (v74) {
            LOWORD(v74) = *(_WORD *)(v74 + 8);
          }
          uint64_t v76 = sub_1CCFDED5C(v72, 173, (const llvm::APInt *)&v387, (llvm *)v386, *((uint64_t *)&v386 + 1), v67, __s2a, v70, v8, v9, v74);
          unsigned int v78 = v77;
          if (v387)
          {
            int v79 = *(unsigned __int8 *)v387;
            if ((v79 - 4) > 0x1E)
            {
              if ((v79 - 3) >= 0xFFFFFFFE) {
                unint64_t v105 = v387;
              }
              else {
                unint64_t v105 = 0;
              }
              if ((v79 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v106 = v105 + 8;
LABEL_155:
                v376 = &v387;
                sub_1CC5FA668(v106 + 16, &v376);
                goto LABEL_111;
              }
              if (v79 == 3) {
                *(void *)(v387 + 8) = 0;
              }
            }
            else if ((*(unsigned char *)(v387 + 1) & 0x7F) == 2 || *(_DWORD *)(v387 + 12))
            {
              uint64_t v252 = *(void *)(v387 + 16);
              if ((v252 & 4) != 0)
              {
                unint64_t v106 = v252 & 0xFFFFFFFFFFFFFFF8;
                if (v106) {
                  goto LABEL_155;
                }
              }
            }
          }
LABEL_111:
          uint64_t v80 = *a1;
          uint64_t v81 = *(unsigned __int8 **)(v69 + 64);
          unint64_t v387 = (unint64_t)v81;
          if (v81) {
            llvm::MetadataTracking::track((uint64_t)&v387, v81, 2);
          }
          __s2b = (void *)(__s2a & 0xFFFFFFFF00000000 | v78);
          LODWORD(v388) = *(_DWORD *)(v69 + 60);
          uint64_t v82 = *(void *)(v80 + 832);
          if (v82) {
            LOWORD(v82) = *(_WORD *)(v82 + 8);
          }
          uint64_t v83 = sub_1CCFDED5C(v80, 173, (const llvm::APInt *)&v387, (llvm *)v386, *((uint64_t *)&v386 + 1), v69, v68, v75, v8, v9, v82);
          unint64_t v85 = v68 & 0xFFFFFFFF00000000 | v84;
          if (!v387) {
            goto LABEL_119;
          }
          int v86 = *(unsigned __int8 *)v387;
          if ((v86 - 4) > 0x1E)
          {
            if ((v86 - 3) >= 0xFFFFFFFE) {
              unint64_t v107 = v387;
            }
            else {
              unint64_t v107 = 0;
            }
            if ((v86 - 3) < 0xFFFFFFFE)
            {
              if (v86 == 3) {
                *(void *)(v387 + 8) = 0;
              }
              goto LABEL_119;
            }
            unint64_t v108 = v107 + 8;
          }
          else
          {
            if ((*(unsigned char *)(v387 + 1) & 0x7F) != 2 && !*(_DWORD *)(v387 + 12)) {
              goto LABEL_119;
            }
            uint64_t v253 = *(void *)(v387 + 16);
            if ((v253 & 4) == 0) {
              goto LABEL_119;
            }
            unint64_t v108 = v253 & 0xFFFFFFFFFFFFFFF8;
            if (!v108) {
              goto LABEL_119;
            }
          }
          v376 = &v387;
          sub_1CC5FA668(v108 + 16, &v376);
LABEL_119:
          sub_1CCEF0788((uint64_t)a1, (uint64_t)v76);
          sub_1CCEF0788((uint64_t)a1, (uint64_t)v83);
          uint64_t v88 = *(void *)(*a1 + 832);
          if (v88) {
            LOWORD(v88) = *(_WORD *)(v88 + 8);
          }
          uint64_t v13 = sub_1CCFDED5C(*a1, v71, (const llvm::APInt *)&v384, (llvm *)v386, *((uint64_t *)&v386 + 1), (uint64_t)v76, (uint64_t)__s2b, v87, (uint64_t)v83, v85, v88);
          goto LABEL_9;
        }
      }
    }
  }
LABEL_122:
  if (sub_1CD802954(v8))
  {
    uint64_t v94 = *(void *)(v5 + 48);
    if (v94)
    {
      int v95 = 1;
      do
      {
        if (*(_DWORD *)(v94 + 8) == v7)
        {
          if (!v95) {
            goto LABEL_137;
          }
          --v95;
        }
        uint64_t v94 = *(void *)(v94 + 32);
      }
      while (v94);
      if (!v95 && v374 - 171 <= 1)
      {
        unint64_t v96 = *(uint64_t **)(v5 + 32);
        uint64_t v67 = *v96;
        uint64_t __s2a = v96[1];
        uint64_t v69 = v96[5];
        uint64_t v68 = v96[6];
        int v97 = *(unsigned __int16 *)(v69 + 24);
        if (v97 == 11 || v97 == 35) {
          goto LABEL_100;
        }
        int v98 = *(unsigned __int16 *)(v67 + 24);
        if (v98 == 35 || v98 == 11) {
          goto LABEL_100;
        }
      }
    }
LABEL_137:
    int v100 = *(unsigned __int16 *)(v5 + 24);
    if (v100 == 56)
    {
      if (sub_1CD802C68(*(void *)(*(void *)(v5 + 32) + 40), *(void *)(*(void *)(v5 + 32) + 48), 0))
      {
        uint64_t v185 = *a1;
        long long v186 = v386;
        uint64_t v188 = sub_1CD7EBF14(v185, 0, (const llvm::APInt *)&v384, (llvm *)v386, *((uint64_t *)&v386 + 1), 0, 0);
        char v190 = *(uint64_t **)(v5 + 32);
        uint64_t v191 = *v190;
        uint64_t v192 = v190[1];
        uint64_t v193 = *(void *)(v185 + 832);
        if (v193) {
          LOWORD(v193) = *(_WORD *)(v193 + 8);
        }
        uint64_t v13 = sub_1CCFDED5C(v185, 57, (const llvm::APInt *)&v384, (llvm *)v186, *((uint64_t *)&v186 + 1), (uint64_t)v188, v187, v189, v191, v192, v193);
        goto LABEL_9;
      }
    }
    else if (v100 == 57)
    {
      BOOL v176 = *(uint64_t **)(v5 + 32);
      if (sub_1CD7F2D2C(*v176))
      {
        uint64_t v177 = *a1;
        long long v178 = v386;
        uint64_t v179 = v176[5];
        uint64_t v180 = v176[6];
        uint64_t v181 = sub_1CD787918(v177, (const llvm::APInt *)&v384, v386, *((uint64_t *)&v386 + 1), 0, 0);
        uint64_t v184 = *(void *)(v177 + 832);
        if (v184) {
          LOWORD(v184) = *(_WORD *)(v184 + 8);
        }
        uint64_t v13 = sub_1CCFDED5C(v177, 56, (const llvm::APInt *)&v384, (llvm *)v178, *((uint64_t *)&v178 + 1), v179, v180, v183, v181, v182, v184);
        goto LABEL_9;
      }
    }
  }
  if (v374 == 171)
  {
    uint64_t v101 = *(void *)(v5 + 48);
    if (!v101) {
      goto LABEL_149;
    }
    int v102 = 1;
    do
    {
      if (*(_DWORD *)(v101 + 8) == v7)
      {
        if (!v102) {
          goto LABEL_149;
        }
        --v102;
      }
      uint64_t v101 = *(void *)(v101 + 32);
    }
    while (v101);
    if (v102 || (uint64_t v103 = *(void *)(v5 + 32), *(void *)(v103 + 40) != v8) || *(_DWORD *)(v103 + 48) != v9)
    {
LABEL_149:
      BOOL v104 = 0;
      goto LABEL_171;
    }
    uint64_t v223 = *(void *)v103;
    uint64_t v224 = *(void *)(v103 + 8);
    uint64_t v225 = *a1;
    uint64_t v226 = *(unsigned __int8 **)(*(void *)v103 + 64);
    unint64_t v387 = (unint64_t)v226;
    if (v226) {
      llvm::MetadataTracking::track((uint64_t)&v387, v226, 2);
    }
    LODWORD(v388) = *(_DWORD *)(v223 + 60);
    uint64_t v227 = sub_1CD7EBB8C(v225, (const llvm::APInt *)&v387, v223, v224, (llvm *)v386, *((uint64_t *)&v386 + 1));
    uint64_t v229 = v228;
    if (v387)
    {
      int v230 = *(unsigned __int8 *)v387;
      if ((v230 - 4) > 0x1E)
      {
        if ((v230 - 3) >= 0xFFFFFFFE) {
          unint64_t v250 = v387;
        }
        else {
          unint64_t v250 = 0;
        }
        if ((v230 - 3) < 0xFFFFFFFE)
        {
          if (v230 == 3) {
            *(void *)(v387 + 8) = 0;
          }
          goto LABEL_360;
        }
        unint64_t v251 = v250 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v387 + 1) & 0x7F) != 2 && !*(_DWORD *)(v387 + 12)) {
          goto LABEL_360;
        }
        uint64_t v310 = *(void *)(v387 + 16);
        if ((v310 & 4) == 0) {
          goto LABEL_360;
        }
        unint64_t v251 = v310 & 0xFFFFFFFFFFFFFFF8;
        if (!v251) {
          goto LABEL_360;
        }
      }
      v376 = &v387;
      sub_1CC5FA668(v251 + 16, &v376);
    }
LABEL_360:
    sub_1CCEF0788((uint64_t)a1, (uint64_t)v227);
    uint64_t v232 = *(void *)(*a1 + 832);
    if (v232) {
      LOWORD(v232) = *(_WORD *)(v232 + 8);
    }
    uint64_t v13 = sub_1CCFDED5C(*a1, 171, (const llvm::APInt *)&v384, (llvm *)v386, *((uint64_t *)&v386 + 1), (uint64_t)v227, v229, v231, v8, v9, v232);
    goto LABEL_9;
  }
  BOOL v104 = v374 == 175;
  if (v374 == 177 || v374 == 175)
  {
    uint64_t v109 = *(void *)(v5 + 48);
    if (v109)
    {
      int v110 = 1;
      do
      {
        if (*(_DWORD *)(v109 + 8) == v7)
        {
          if (!v110) {
            goto LABEL_171;
          }
          --v110;
        }
        uint64_t v109 = *(void *)(v109 + 32);
      }
      while (v109);
      if (!v110)
      {
        uint64_t v205 = sub_1CCFD8CD8(v8, v9, 0, 0);
        uint64_t v206 = sub_1CCFD8CD8(*(void *)(*(void *)(v5 + 32) + 40), *(void *)(*(void *)(v5 + 32) + 48), 0, 0);
        unsigned int v209 = sub_1CD3E12F4((unsigned __int8 *)&v386, v207, v208);
        if (v205)
        {
          if (v206)
          {
            uint64_t v210 = *(void *)(v206 + 80);
            int v211 = (void *)(v210 + 24);
            uint64_t v212 = *(unsigned int *)(v210 + 32);
            if (v212 < 0x41) {
              goto LABEL_340;
            }
            int v213 = 0;
            int64_t v214 = (unint64_t)(v212 + 63) >> 6;
            do
            {
              BOOL v215 = v214-- < 1;
              if (v215) {
                break;
              }
              unint64_t v216 = *(void *)(*v211 + 8 * v214);
              v213 += __clz(v216);
            }
            while (!v216);
            int v217 = v212 | 0xFFFFFFC0;
            if ((v212 & 0x3F) == 0) {
              int v217 = 0;
            }
            if ((v212 - v213 - v217) <= 0x40)
            {
              int v211 = (void *)*v211;
LABEL_340:
              uint64_t v218 = (void *)*v211;
              if (*v211 >= (unint64_t)v209) {
                goto LABEL_171;
              }
              LODWORD(v388) = v209;
              if (v209 > 0x40) {
                llvm::APInt::initSlowCase((llvm::APInt *)&v387);
              }
              if (v209) {
                unint64_t v219 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v209;
              }
              else {
                unint64_t v219 = 0;
              }
              unint64_t v387 = v219;
              unsigned int v377 = v388;
              if (v374 == 175)
              {
                if (v388 > 0x40) {
                  operator new[]();
                }
                uint64_t v220 = v387 << (char)v218;
                if (v388 == v218) {
                  uint64_t v220 = 0;
                }
                if (v388) {
                  unint64_t v221 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v388;
                }
                else {
                  unint64_t v221 = 0;
                }
                unint64_t v222 = v221 & v220;
              }
              else
              {
                if (v388 > 0x40) {
                  operator new[]();
                }
                if (v388 == v218)
                {
                  __s2e = 0;
                  v376 = 0;
                  if (v218 < 0x41)
                  {
LABEL_379:
                    uint64_t v241 = *(void *)(v205 + 80);
                    uint64_t v242 = *(unsigned int *)(v241 + 32);
                    if (v242 > 0x40)
                    {
                      if (memcmp(*(const void **)(v241 + 24), __s2e, ((unint64_t)(v242 + 63) >> 3) & 0x3FFFFFF8)) {
                        goto LABEL_381;
                      }
                    }
                    else if (*(unint64_t **)(v241 + 24) != __s2e)
                    {
LABEL_381:
                      if (v377 >= 0x41 && __s2e) {
                        MEMORY[0x1D25D9CB0](__s2e, 0x1000C8000313F17);
                      }
                      goto LABEL_171;
                    }
                    BOOL v244 = sub_1CD7EBB8C(*a1, (const llvm::APInt *)&v384, **(void **)(v5 + 32), *(void *)(*(void *)(v5 + 32) + 8), (llvm *)v386, *((uint64_t *)&v386 + 1));
                    uint64_t v246 = *(void *)(v5 + 32);
                    uint64_t v247 = *(void *)(v246 + 40);
                    uint64_t v248 = *(void *)(v246 + 48);
                    uint64_t v249 = *(void *)(*a1 + 832);
                    if (v249) {
                      LOWORD(v249) = *(_WORD *)(v249 + 8);
                    }
                    int v12 = sub_1CCFDED5C(*a1, v374, (const llvm::APInt *)&v384, (llvm *)v386, *((uint64_t *)&v386 + 1), (uint64_t)v244, v243, v245, v247, v248, v249);
                    if (v377 >= 0x41 && __s2e) {
                      MEMORY[0x1D25D9CB0](__s2e, 0x1000C8000313F17);
                    }
                    goto LABEL_10;
                  }
                  if (v387) {
                    MEMORY[0x1D25D9CB0](v387, 0x1000C8000313F17);
                  }
LABEL_378:
                  __s2e = v376;
                  goto LABEL_379;
                }
                unint64_t v222 = v387 >> (char)v218;
              }
              v376 = (unint64_t *)v222;
              goto LABEL_378;
            }
          }
        }
      }
    }
  }
LABEL_171:
  if (!(_BYTE)v386) {
    goto LABEL_206;
  }
  unint64_t v111 = (void *)a1[1];
  if (v386 != 1 && !v111[v386 + 12]) {
    goto LABEL_206;
  }
  if ((*((unsigned __int8 *)v111 + 390 * v386 + 4036) | 4) != 4) {
    goto LABEL_206;
  }
  uint64_t v115 = v374 == 56 ? v5 : v8;
  uint64_t v116 = v374 == 176 ? v5 : v8;
  int v117 = v374 == 176 ? v7 : v9;
  if (*(_WORD *)(v115 + 24) != 56 || *(_WORD *)(v116 + 24) != 176) {
    goto LABEL_206;
  }
  uint64_t v118 = *(uint64_t **)(v115 + 32);
  uint64_t v119 = *v118;
  int v120 = *((_DWORD *)v118 + 2);
  uint64_t v121 = v118[5];
  int v122 = *((_DWORD *)v118 + 12);
  unint64_t v123 = *(uint64_t **)(v116 + 32);
  uint64_t v125 = *v123;
  unint64_t v124 = (void *)v123[1];
  BOOL v126 = v119 == v116 && v120 == v117;
  BOOL v127 = v126 && v121 == v125;
  BOOL v128 = v127 && v122 == v124;
  if (!v128 && (v121 != v116 || v122 != v117 || v119 != v125 || v120 != v124)) {
    goto LABEL_206;
  }
  uint64_t v129 = sub_1CCFD8CD8(v123[5], v123[6], 0, 0);
  if (!v129) {
    goto LABEL_206;
  }
  uint64_t v367 = *(void *)(v129 + 80);
  __s2d = (llvm::Type *)(v367 + 24);
  uint64_t v233 = sub_1CD3E12F4((unsigned __int8 *)&v386, v130, v89);
  uint64_t v234 = *(unsigned int *)(v367 + 32);
  if (v234 >= 0x41)
  {
    int v235 = 0;
    int64_t v236 = (unint64_t)(v234 + 63) >> 6;
    do
    {
      BOOL v215 = v236-- < 1;
      if (v215) {
        break;
      }
      unint64_t v237 = *(void *)(*(void *)__s2d + 8 * v236);
      v235 += __clz(v237);
    }
    while (!v237);
    int v238 = v234 | 0xFFFFFFC0;
    if ((v234 & 0x3F) == 0) {
      int v238 = 0;
    }
    if ((v234 - v235 - v238) > 0x40) {
      goto LABEL_206;
    }
    __s2d = *(llvm::Type **)__s2d;
  }
  if (*(llvm::Type **)__s2d == (llvm::Type *)((char *)v233 - 1))
  {
    uint64_t v239 = *(void *)(*a1 + 832);
    if (v239) {
      __int16 v240 = *(_WORD *)(v239 + 8);
    }
    else {
      __int16 v240 = 0;
    }
    uint64_t v13 = sub_1CD7F3564((llvm::APFloatBase *)*a1, (const char *)0xAE, (uint64_t)&v384, (llvm *)v386, *((uint64_t *)&v386 + 1), v125, v124, v240);
    goto LABEL_9;
  }
LABEL_206:
  uint64_t v131 = a1[1];
  uint64_t v132 = (llvm *)v386;
  if (v5 == v8 && v7 == v9)
  {
    uint64_t v13 = sub_1CCF42E60((const llvm::APInt *)&v384, v131, (llvm *)v386, *((uint64_t *)&v386 + 1), *a1, *((unsigned __int8 *)a1 + 33));
    goto LABEL_9;
  }
  if ((_BYTE)v386 && (v386 == 1 || *(void *)(v131 + 8 * v386 + 96)))
  {
    char v135 = !v104;
    if ((*(unsigned char *)(v131 + 390 * v386 + 4040) & 0xFB) != 0) {
      char v135 = 1;
    }
    if ((v135 & 1) == 0 && sub_1CD802954(v8) && sub_1CD8029CC(**(void **)(v5 + 32)))
    {
      uint64_t v196 = *a1;
      uint64_t v197 = *((void *)&v386 + 1);
      int v199 = sub_1CD7EBF14(v196, -2, (const llvm::APInt *)&v384, v132, *((uint64_t *)&v386 + 1), 0, 0);
      uint64_t v201 = *(void *)(v5 + 32);
      uint64_t v202 = *(void *)(v201 + 40);
      uint64_t v203 = *(void *)(v201 + 48);
      uint64_t v204 = *(void *)(v196 + 832);
      if (v204) {
        LOWORD(v204) = *(_WORD *)(v204 + 8);
      }
      uint64_t v13 = sub_1CCFDED5C(v196, 178, (const llvm::APInt *)&v384, v132, v197, (uint64_t)v199, v198, v200, v202, v203, v204);
      goto LABEL_9;
    }
  }
  if (v374 == *(unsigned __int16 *)(v8 + 24)
    && (uint64_t v13 = sub_1CCF49714((uint64_t)a1, a2, v89, v90, v91, v92, v93, v70)) != 0
    || (uint64_t v13 = sub_1CCF4A26C(a2, v5, v19, v8, v9, *a1, v93, v70)) != 0
    || (uint64_t v13 = sub_1CCF4A26C(a2, v8, v9, v5, v19, *a1, v136, v137)) != 0)
  {
LABEL_9:
    int v12 = v13;
    goto LABEL_10;
  }
  if (sub_1CD802C68(*(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48), 0)) {
    goto LABEL_292;
  }
  unsigned int v139 = *(uint64_t **)(a2 + 32);
  uint64_t v138 = *(void *)(a2 + 40);
  int v366 = *(llvm **)v138;
  __s2c = *(void **)(v138 + 8);
  uint64_t v141 = *v139;
  uint64_t v140 = v139[1];
  uint64_t v142 = v139[5];
  uint64_t v143 = v139[6];
  if (*(_WORD *)(*v139 + 24) != 171) {
    goto LABEL_260;
  }
  uint64_t v375 = v139[6];
  uint64_t v144 = *(void *)(v141 + 48);
  if (!v144) {
    goto LABEL_244;
  }
  int v145 = 1;
  do
  {
    if (*(_DWORD *)(v144 + 8) == v140)
    {
      if (!v145) {
        goto LABEL_244;
      }
      --v145;
    }
    uint64_t v144 = *(void *)(v144 + 32);
  }
  while (v144);
  if (v145) {
    goto LABEL_244;
  }
  unsigned int v146 = *(_DWORD **)(v141 + 32);
  uint64_t v147 = *(void *)v146;
  if (*(_WORD *)(*(void *)v146 + 24) != 173) {
    goto LABEL_244;
  }
  uint64_t v148 = *(void *)(v147 + 48);
  if (!v148) {
    goto LABEL_244;
  }
  int v149 = v146[2];
  int v150 = 1;
  do
  {
    if (*(_DWORD *)(v148 + 8) == v149)
    {
      if (!v150) {
        goto LABEL_244;
      }
      --v150;
    }
    uint64_t v148 = *(void *)(v148 + 32);
  }
  while (v148);
  if (v150) {
    goto LABEL_244;
  }
  uint64_t v254 = *(void *)(v147 + 32);
  uint64_t v359 = *(void *)v254;
  unsigned int v354 = *(_DWORD *)(v254 + 8);
  uint64_t v345 = *(void *)(v254 + 48);
  uint64_t v349 = *(void *)(v254 + 40);
  if (sub_1CD802C68(v349, v345, 0)) {
    goto LABEL_244;
  }
  unsigned int v255 = v354;
  BOOL v256 = v359 == v142 && v354 == v143;
  if (v256) {
    unsigned int v255 = v345;
  }
  unsigned int v355 = v255;
  uint64_t v257 = v256 ? v349 : v359;
  uint64_t v360 = v257;
  int v258 = v143;
  if (v256)
  {
    uint64_t v259 = v142;
  }
  else
  {
    int v258 = v345;
    uint64_t v259 = v349;
  }
  if (v259 == v142 && v143 == v258)
  {
    uint64_t v261 = *(void *)(v141 + 32);
    uint64_t v262 = v261 + 40;
    uint64_t v263 = (unsigned int *)(v261 + 48);
  }
  else
  {
LABEL_244:
    if (*(_WORD *)(v141 + 24) != 171) {
      goto LABEL_260;
    }
    uint64_t v151 = *(void *)(v141 + 48);
    if (!v151) {
      goto LABEL_260;
    }
    int v152 = 1;
    do
    {
      if (*(_DWORD *)(v151 + 8) == v140)
      {
        if (!v152) {
          goto LABEL_260;
        }
        --v152;
      }
      uint64_t v151 = *(void *)(v151 + 32);
    }
    while (v151);
    if (v152) {
      goto LABEL_260;
    }
    uint64_t v153 = *(void *)(v141 + 32);
    uint64_t v154 = *(void *)(v153 + 40);
    if (*(_WORD *)(v154 + 24) != 173) {
      goto LABEL_260;
    }
    uint64_t v155 = *(void *)(v154 + 48);
    if (!v155) {
      goto LABEL_260;
    }
    int v156 = *(_DWORD *)(v153 + 48);
    int v157 = 1;
    do
    {
      if (*(_DWORD *)(v155 + 8) == v156)
      {
        if (!v157) {
          goto LABEL_260;
        }
        --v157;
      }
      uint64_t v155 = *(void *)(v155 + 32);
    }
    while (v155);
    if (v157) {
      goto LABEL_260;
    }
    uint64_t v273 = *(void *)(v154 + 32);
    uint64_t v362 = *(void *)v273;
    unsigned int v357 = *(_DWORD *)(v273 + 8);
    uint64_t v347 = *(void *)(v273 + 48);
    uint64_t v351 = *(void *)(v273 + 40);
    if (sub_1CD802C68(v351, v347, 0)) {
      goto LABEL_260;
    }
    unsigned int v274 = v357;
    BOOL v275 = v362 == v142 && v357 == v143;
    if (v275) {
      unsigned int v274 = v347;
    }
    unsigned int v355 = v274;
    uint64_t v276 = v275 ? v351 : v362;
    uint64_t v360 = v276;
    int v277 = v143;
    if (v275)
    {
      uint64_t v278 = v142;
    }
    else
    {
      int v277 = v347;
      uint64_t v278 = v351;
    }
    if (v278 != v142 || v143 != v277)
    {
LABEL_260:
      if (*(_WORD *)(v142 + 24) != 171) {
        goto LABEL_292;
      }
      uint64_t v375 = v140;
      uint64_t v158 = *(void *)(v142 + 48);
      if (!v158) {
        goto LABEL_276;
      }
      int v159 = 1;
      do
      {
        if (*(_DWORD *)(v158 + 8) == v143)
        {
          if (!v159) {
            goto LABEL_276;
          }
          --v159;
        }
        uint64_t v158 = *(void *)(v158 + 32);
      }
      while (v158);
      if (v159) {
        goto LABEL_276;
      }
      unint64_t v160 = *(_DWORD **)(v142 + 32);
      uint64_t v161 = *(void *)v160;
      if (*(_WORD *)(*(void *)v160 + 24) != 173) {
        goto LABEL_276;
      }
      uint64_t v162 = *(void *)(v161 + 48);
      if (!v162) {
        goto LABEL_276;
      }
      int v163 = v160[2];
      int v164 = 1;
      do
      {
        if (*(_DWORD *)(v162 + 8) == v163)
        {
          if (!v164) {
            goto LABEL_276;
          }
          --v164;
        }
        uint64_t v162 = *(void *)(v162 + 32);
      }
      while (v162);
      if (v164) {
        goto LABEL_276;
      }
      uint64_t v264 = *(void *)(v161 + 32);
      uint64_t v361 = *(void *)v264;
      unsigned int v356 = *(_DWORD *)(v264 + 8);
      uint64_t v346 = *(void *)(v264 + 48);
      uint64_t v350 = *(void *)(v264 + 40);
      if (sub_1CD802C68(v350, v346, 0)) {
        goto LABEL_276;
      }
      unsigned int v265 = v356;
      BOOL v266 = v361 == v141 && v356 == v140;
      if (v266) {
        unsigned int v265 = v346;
      }
      unsigned int v355 = v265;
      uint64_t v267 = v266 ? v350 : v361;
      uint64_t v360 = v267;
      int v268 = v140;
      if (v266)
      {
        uint64_t v269 = v141;
      }
      else
      {
        int v268 = v346;
        uint64_t v269 = v350;
      }
      if (v269 == v141 && v140 == v268)
      {
        uint64_t v271 = *(void *)(v142 + 32);
        uint64_t v262 = v271 + 40;
        uint64_t v263 = (unsigned int *)(v271 + 48);
      }
      else
      {
LABEL_276:
        if (*(_WORD *)(v142 + 24) != 171) {
          goto LABEL_292;
        }
        uint64_t v165 = *(void *)(v142 + 48);
        if (!v165) {
          goto LABEL_292;
        }
        int v166 = 1;
        do
        {
          if (*(_DWORD *)(v165 + 8) == v143)
          {
            if (!v166) {
              goto LABEL_292;
            }
            --v166;
          }
          uint64_t v165 = *(void *)(v165 + 32);
        }
        while (v165);
        if (v166) {
          goto LABEL_292;
        }
        uint64_t v167 = *(void *)(v142 + 32);
        uint64_t v168 = *(void *)(v167 + 40);
        if (*(_WORD *)(v168 + 24) != 173) {
          goto LABEL_292;
        }
        uint64_t v169 = *(void *)(v168 + 48);
        if (!v169) {
          goto LABEL_292;
        }
        int v170 = *(_DWORD *)(v167 + 48);
        int v171 = 1;
        do
        {
          if (*(_DWORD *)(v169 + 8) == v170)
          {
            if (!v171) {
              goto LABEL_292;
            }
            --v171;
          }
          uint64_t v169 = *(void *)(v169 + 32);
        }
        while (v169);
        if (v171) {
          goto LABEL_292;
        }
        uint64_t v280 = *(void *)(v168 + 32);
        uint64_t v363 = *(void *)v280;
        int v281 = *(_DWORD *)(v280 + 8);
        uint64_t v348 = *(void *)(v280 + 48);
        uint64_t v352 = *(void *)(v280 + 40);
        if (sub_1CD802C68(v352, v348, 0)) {
          goto LABEL_292;
        }
        BOOL v282 = v363 == v141 && v281 == v140;
        unsigned int v283 = v282 ? v348 : v281;
        unsigned int v355 = v283;
        uint64_t v284 = v282 ? v352 : v363;
        uint64_t v360 = v284;
        int v285 = v140;
        if (v282)
        {
          uint64_t v286 = v141;
        }
        else
        {
          int v285 = v348;
          uint64_t v286 = v352;
        }
        if (v286 != v141 || v140 != v285) {
          goto LABEL_292;
        }
        uint64_t v262 = *(void *)(v142 + 32);
        uint64_t v263 = (unsigned int *)(v262 + 8);
      }
      uint64_t v142 = v141;
      goto LABEL_493;
    }
    uint64_t v262 = *(void *)(v141 + 32);
    uint64_t v263 = (unsigned int *)(v262 + 8);
  }
LABEL_493:
  uint64_t v288 = *(void *)v262;
  int v289 = *(unsigned __int16 *)(*(void *)v262 + 24);
  if (v289 != 11 && v289 != 35)
  {
    uint64_t v290 = *v263;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[1] + 312))(a1[1], v288, v290))
    {
      uint64_t v291 = *(unsigned __int8 **)(a2 + 64);
      unint64_t v387 = (unint64_t)v291;
      if (v291) {
        llvm::MetadataTracking::track((uint64_t)&v387, v291, 2);
      }
      LODWORD(v388) = *(_DWORD *)(a2 + 60);
      if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[1] + 312))(a1[1], v142, v375) & 1) != 0
        || (sub_1CD802AAC(v288, v290, 0) & 1) != 0)
      {
        if (((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1[1] + 312))(a1[1], v360, v355) & 1) != 0
          || !sub_1CD802AAC(v288, v290, 0))
        {
          uint64_t v311 = *(void *)(*a1 + 832);
          if (v311) {
            LOWORD(v311) = *(_WORD *)(v311 + 8);
          }
          int v312 = sub_1CCFDED5C(*a1, 171, (const llvm::APInt *)&v387, v366, (uint64_t)__s2c, v360, v355, v292, v288, v290, v311);
          uint64_t v358 = v313;
          uint64_t v364 = v312;
          uint64_t v314 = sub_1CD7EBB8C(*a1, (const llvm::APInt *)&v387, v288, v290, v366, (uint64_t)__s2c);
          uint64_t v317 = *(void *)(*a1 + 832);
          if (v317) {
            LOWORD(v317) = *(_WORD *)(v317 + 8);
          }
          uint64_t v318 = sub_1CCFDED5C(*a1, 171, (const llvm::APInt *)&v387, v366, (uint64_t)__s2c, v142, v375, v316, (uint64_t)v314, v315, v317);
          uint64_t v320 = *(void *)(*a1 + 832);
          if (v320) {
            LOWORD(v320) = *(_WORD *)(v320 + 8);
          }
          uint64_t v343 = v319;
          __int16 v344 = v320;
          uint64_t v342 = (uint64_t)v318;
          uint64_t v308 = *a1;
          uint64_t v309 = 172;
        }
        else
        {
          int v293 = *(uint64_t **)(v288 + 32);
          uint64_t v294 = *v293;
          uint64_t v353 = v293[1];
          uint64_t v295 = *(void *)(*a1 + 832);
          if (v295) {
            LOWORD(v295) = *(_WORD *)(v295 + 8);
          }
          int v296 = sub_1CCFDED5C(*a1, 172, (const llvm::APInt *)&v387, v366, (uint64_t)__s2c, v360, v355, v292, v294, v353, v295);
          uint64_t v358 = v297;
          uint64_t v364 = v296;
          BOOL v298 = sub_1CD7EBB8C(*a1, (const llvm::APInt *)&v387, v142, v375, v366, (uint64_t)__s2c);
          uint64_t v301 = *(void *)(*a1 + 832);
          if (v301) {
            LOWORD(v301) = *(_WORD *)(v301 + 8);
          }
          unint64_t v302 = sub_1CCFDED5C(*a1, 171, (const llvm::APInt *)&v387, v366, (uint64_t)__s2c, v294, v353, v300, (uint64_t)v298, v299, v301);
          uint64_t v304 = sub_1CD7EBB8C(*a1, (const llvm::APInt *)&v387, (uint64_t)v302, v303, v366, (uint64_t)__s2c);
          uint64_t v307 = *(void *)(*a1 + 832);
          if (v307) {
            LOWORD(v307) = *(_WORD *)(v307 + 8);
          }
          uint64_t v343 = v305;
          __int16 v344 = v307;
          uint64_t v342 = (uint64_t)v304;
          uint64_t v308 = *a1;
          uint64_t v309 = 171;
        }
        uint64_t v321 = v366;
        uint64_t v322 = (uint64_t)__s2c;
        uint64_t v324 = v358;
        uint64_t v323 = (uint64_t)v364;
      }
      else
      {
        int v326 = sub_1CD7EBB8C(*a1, (const llvm::APInt *)&v387, v360, v355, v366, (uint64_t)__s2c);
        uint64_t v328 = *(void *)(*a1 + 832);
        if (v328) {
          LOWORD(v328) = *(_WORD *)(v328 + 8);
        }
        unsigned int v329 = sub_1CCFDED5C(*a1, 171, (const llvm::APInt *)&v387, v366, (uint64_t)__s2c, (uint64_t)v326, v325, v327, v288, v290, v328);
        uint64_t v332 = sub_1CD7EBB8C(*a1, (const llvm::APInt *)&v387, (uint64_t)v329, v330, v366, (uint64_t)__s2c);
        uint64_t v365 = v333;
        uint64_t v334 = *(void *)(*a1 + 832);
        if (v334) {
          LOWORD(v334) = *(_WORD *)(v334 + 8);
        }
        int v335 = sub_1CCFDED5C(*a1, 172, (const llvm::APInt *)&v387, v366, (uint64_t)__s2c, v288, v290, v331, v142, v375, v334);
        uint64_t v337 = *(void *)(*a1 + 832);
        if (v337) {
          LOWORD(v337) = *(_WORD *)(v337 + 8);
        }
        uint64_t v343 = v336;
        __int16 v344 = v337;
        uint64_t v342 = (uint64_t)v335;
        uint64_t v308 = *a1;
        uint64_t v309 = 171;
        uint64_t v321 = v366;
        uint64_t v322 = (uint64_t)__s2c;
        uint64_t v323 = (uint64_t)v332;
        uint64_t v324 = v365;
      }
      int v12 = sub_1CCFDED5C(v308, v309, (const llvm::APInt *)&v387, v321, v322, v323, v324, v306, v342, v343, v344);
      if (v387)
      {
        int v338 = *(unsigned __int8 *)v387;
        if ((v338 - 4) > 0x1E)
        {
          if ((v338 - 3) >= 0xFFFFFFFE) {
            unint64_t v339 = v387;
          }
          else {
            unint64_t v339 = 0;
          }
          if ((v338 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v340 = v339 + 8;
LABEL_542:
            v376 = &v387;
            sub_1CC5FA668(v340 + 16, &v376);
            goto LABEL_535;
          }
          if (v338 == 3) {
            *(void *)(v387 + 8) = 0;
          }
        }
        else if ((*(unsigned char *)(v387 + 1) & 0x7F) == 2 || *(_DWORD *)(v387 + 12))
        {
          uint64_t v341 = *(void *)(v387 + 16);
          if ((v341 & 4) != 0)
          {
            unint64_t v340 = v341 & 0xFFFFFFFFFFFFFFF8;
            if (v340) {
              goto LABEL_542;
            }
          }
        }
      }
LABEL_535:
      if (v12) {
        goto LABEL_10;
      }
    }
  }
LABEL_292:
  if (sub_1CCF41798((uint64_t)a1, a2, 0)) {
    goto LABEL_68;
  }
  int v12 = sub_1CCF47574((void *)*a1, (unsigned int *)a1[1], v5, v19, v8, v9, a2);
LABEL_10:
  if (v384)
  {
    int v15 = *v384;
    if ((v15 - 4) > 0x1E)
    {
      if ((v15 - 3) >= 0xFFFFFFFE) {
        uint64_t v17 = v384;
      }
      else {
        uint64_t v17 = 0;
      }
      if ((v15 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v18 = (unint64_t)(v17 + 8);
LABEL_20:
        unint64_t v387 = (unint64_t)&v384;
        sub_1CC5FA668(v18 + 16, &v387);
        return v12;
      }
      if (v15 == 3) {
        *((void *)v384 + 1) = 0;
      }
    }
    else if ((v384[1] & 0x7F) == 2 || *((_DWORD *)v384 + 3))
    {
      uint64_t v44 = *((void *)v384 + 2);
      if ((v44 & 4) != 0)
      {
        unint64_t v18 = v44 & 0xFFFFFFFFFFFFFFF8;
        if (v18) {
          goto LABEL_20;
        }
      }
    }
  }
  return v12;
}

uint64_t sub_1CCF2DDE8(uint64_t a1, uint64_t a2)
{
  uint64_t v433 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(uint64_t **)(a2 + 32);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  uint64_t v8 = v4[5];
  uint64_t v7 = v4[6];
  if ((*(_WORD *)(*(void *)(a2 + 96) + 36) & 0xF00) != 0 || (*(unsigned char *)(a2 + 26) & 8) != 0) {
    goto LABEL_34;
  }
  uint64_t v9 = *(void *)(a2 + 40);
  if (*(unsigned char *)(v9 + 16) == 1)
  {
    uint64_t v10 = *(void *)(a2 + 48);
    if (v10)
    {
      while (*(_DWORD *)(v10 + 8))
      {
        uint64_t v10 = *(void *)(v10 + 32);
        if (!v10) {
          goto LABEL_7;
        }
      }
      goto LABEL_27;
    }
LABEL_7:
    uint64_t v11 = *(void *)a1;
    v427[1] = *(void **)(*(void *)a1 + 656);
    *(void *)&v428[0] = v11;
    *(void *)(v11 + 656) = v427;
    v427[0] = &unk_1F26413F0;
    *((void *)&v428[0] + 1) = a1;
    sub_1CD800DA0(v11, a2, 1, v5, v6);
    for (uint64_t i = *(void *)(v5 + 48); i; uint64_t i = *(void *)(i + 32))
      sub_1CCEF0788(a1, *(void *)(i + 16));
    if (*(void *)(a2 + 48))
    {
LABEL_127:
      *(void **)(*(void *)&v428[0] + 656) = v427[1];
      return a2;
    }
LABEL_126:
    sub_1CCEF1420((uint64_t *)a1, a2);
    goto LABEL_127;
  }
  if (!byte_1EBCF8EE8)
  {
    uint64_t v14 = *(void *)(a2 + 48);
    if (v14)
    {
      uint64_t v16 = *(void *)(a2 + 48);
      do
      {
        if (!*(_DWORD *)(v16 + 8)) {
          goto LABEL_27;
        }
        uint64_t v16 = *(void *)(v16 + 32);
      }
      while (v16);
LABEL_25:
      while (v14)
      {
        if (*(_DWORD *)(v14 + 8) == 1) {
          goto LABEL_27;
        }
        uint64_t v14 = *(void *)(v14 + 32);
      }
    }
    int v47 = 0;
    goto LABEL_92;
  }
  uint64_t v13 = v4[10];
  uint64_t v14 = *(void *)(a2 + 48);
  if (*(_WORD *)(v13 + 24) == 35)
  {
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 48);
      while (*(_DWORD *)(v15 + 8))
      {
        uint64_t v15 = *(void *)(v15 + 32);
        if (!v15) {
          goto LABEL_17;
        }
      }
      goto LABEL_27;
    }
LABEL_17:
    if ((*(unsigned char *)(v13 + 26) & 8) != 0) {
      goto LABEL_25;
    }
    goto LABEL_70;
  }
  if (!v14)
  {
LABEL_70:
    int v47 = 1;
LABEL_92:
    uint64_t v74 = sub_1CD3DD4D8(*(void *)a1, *(llvm **)v9, *(void *)(v9 + 8));
    int v76 = v75;
    uint64_t v77 = *(void *)(a2 + 48);
    if (!v77) {
      goto LABEL_124;
    }
    while (*(_DWORD *)(v77 + 8) != 1)
    {
      uint64_t v77 = *(void *)(v77 + 32);
      if (!v77) {
        goto LABEL_124;
      }
    }
    if (v47)
    {
      unsigned int v78 = sub_1CCF5D1D4((uint64_t *)a1, a2, v68, v69, v70, v71, v72, v73);
      int v80 = v79;
      for (uint64_t j = *(void *)(a2 + 48); j; uint64_t j = *(void *)(j + 32))
        sub_1CCEF0788(a1, *(void *)(j + 16));
    }
    else
    {
LABEL_124:
      unsigned int v78 = sub_1CD3DD4D8(*(void *)a1, *(llvm **)(*(void *)(a2 + 40) + 16), *(void *)(*(void *)(a2 + 40) + 24));
      int v80 = v92;
    }
    uint64_t v93 = *(void *)a1;
    v427[1] = *(void **)(*(void *)a1 + 656);
    *(void *)&v428[0] = v93;
    *(void *)(v93 + 656) = v427;
    v427[0] = &unk_1F26413F0;
    *((void *)&v428[0] + 1) = a1;
    sub_1CD800DA0(v93, a2, 0, (uint64_t)v74, v76);
    sub_1CD800DA0(*(void *)a1, a2, 1, (uint64_t)v78, v80);
    sub_1CD800DA0(*(void *)a1, a2, 2, v5, v6);
    goto LABEL_126;
  }
  while (*(_DWORD *)(v14 + 8))
  {
    uint64_t v14 = *(void *)(v14 + 32);
    if (!v14) {
      goto LABEL_70;
    }
  }
LABEL_27:
  if (!*(_DWORD *)(a1 + 28)) {
    goto LABEL_51;
  }
  if (v5
    && *(_WORD *)(v5 + 24) == 254
    && (*(_WORD *)(*(void *)(v5 + 96) + 36) & 0xF00) == 0
    && (*(unsigned char *)(v5 + 26) & 8) == 0)
  {
    uint64_t v410 = v7;
    uint64_t v17 = v8;
    long long v420 = *(_OWORD *)*(void *)(a2 + 40);
    uint64_t v18 = *(void *)(a2 + 88);
    uint64_t v418 = *(llvm **)(a2 + 80);
    uint64_t v419 = v18;
    uint64_t v19 = *(void *)(v5 + 88);
    uint64_t v416 = *(void *)(v5 + 80);
    uint64_t v417 = v19;
    long long v415 = *(_OWORD *)(*(void *)(*(void *)(*(void *)(v5 + 32) + 40) + 40)
                     + 16 * *(unsigned int *)(*(void *)(v5 + 32) + 48));
    if ((_BYTE)v418) {
      int v20 = v418 - 120 < 0x33;
    }
    else {
      int v20 = *(unsigned __int8 *)(v18 + 8) == 19;
    }
    if ((_BYTE)v416) {
      int v86 = v416 - 120 < 0x33;
    }
    else {
      int v86 = *(unsigned __int8 *)(v19 + 8) == 19;
    }
    if (v20 != v86) {
      goto LABEL_535;
    }
    uint64_t v87 = *(void *)a1;
    if (v20)
    {
      if (*(unsigned char *)(*(void *)(**(void **)(v87 + 40) + 40) + 272)) {
        goto LABEL_535;
      }
    }
    sub_1CCFE3E9C(a2, v87, (uint64_t)v427);
    sub_1CCFE3E9C(v5, *(void *)a1, (uint64_t)&v425);
    uint64_t v414 = 0;
    if (!sub_1CCFE3CB0((uint64_t *)&v425, (uint64_t *)v427, *(void *)a1, &v414)) {
      goto LABEL_535;
    }
    if (*(unsigned char *)(*(void *)(**(void **)(*(void *)a1 + 40) + 40) + 272))
    {
      unint64_t v88 = sub_1CB896FB8((unsigned __int8 *)&v416);
      unint64_t v89 = sub_1CB896FB8((unsigned __int8 *)&v418);
      uint64_t v414 = ((uint64_t)(8 * (v88 - v89)) >> 3) - v414;
    }
    if ((_BYTE)v418) {
      uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v418);
    }
    else {
      uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v418);
    }
    uint64_t v129 = ExtendedSizeInBits;
    int v130 = v91;
    if ((_BYTE)v416) {
      unint64_t v131 = sub_1CB87E200((unsigned __int8 *)&v416);
    }
    else {
      unint64_t v131 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v416);
    }
    unsigned int v137 = v131;
    if (v20)
    {
      if (v414 || v129 != v131 || v130 != v132) {
        goto LABEL_535;
      }
    }
    else
    {
      if (v414 < 0 || v129 + 8 * v414 > v131) {
        goto LABEL_535;
      }
      if (v414)
      {
LABEL_232:
        if (*(_WORD *)(*(void *)(*(void *)(a2 + 32) + 40) + 24) == 51 || v414) {
          goto LABEL_535;
        }
        uint64_t v138 = *(void *)(v5 + 32);
        uint64_t v139 = *(void *)(v138 + 40);
        uint64_t v140 = *(unsigned int *)(v138 + 48);
        uint64_t v141 = (uint64_t *)(*(void *)(v139 + 40) + 16 * v140);
        uint64_t v142 = *v141;
        uint64_t v143 = v141[1];
        *(void *)&long long v421 = v142;
        *((void *)&v421 + 1) = v143;
        uint64_t v144 = *(llvm **)(v5 + 80);
        uint64_t v145 = *(void *)(v5 + 88);
        uint64_t v422 = (long long *)v144;
        uint64_t v423 = v145;
        uint64_t v407 = v140;
        if (v142 == v144 && ((_BYTE)v142 || v143 == v145)) {
          goto LABEL_379;
        }
        if (!*(unsigned char *)(a1 + 34) || (_BYTE)v144 && *(void *)(*(void *)(a1 + 8) + 8 * v144 + 96)) {
          goto LABEL_533;
        }
        if ((_BYTE)v142)
        {
          if ((v142 + 104) >= 0x13u
            && (v142 - 8) >= 7u
            && (v142 - 75) >= 0x2Du)
          {
            *(void *)&long long v429 = v142;
            *((void *)&v429 + 1) = v143;
            goto LABEL_347;
          }
        }
        else
        {
          if ((*(_DWORD *)(v143 + 8) & 0xFE) == 0x12) {
            unsigned int v153 = *(unsigned __int8 *)(**(void **)(v143 + 16) + 8);
          }
          else {
            unsigned int v153 = *(_DWORD *)(v143 + 8);
          }
          if (v153 >= 7)
          {
            *(void *)&long long v429 = v142;
            *((void *)&v429 + 1) = v143;
            goto LABEL_350;
          }
        }
        if ((_BYTE)v144
          && (((_BYTE)v144 + 104) < 0x13u
           || ((_BYTE)v144 - 8) < 7u
           || ((_BYTE)v144 - 75) <= 0x2Cu))
        {
          uint64_t v197 = *(void *)(a1 + 8);
          if (*(void *)(v197 + 8 * v144 + 96))
          {
            if (!*(unsigned char *)(v197 + 390 * v144 + 4098))
            {
              uint64_t v321 = *(void *)a1;
              uint64_t v322 = *(unsigned __int8 **)(v5 + 64);
              *(void *)&long long v429 = v322;
              if (v322)
              {
                llvm::MetadataTracking::track((uint64_t)&v429, v322, 2);
                uint64_t v144 = (llvm *)v422;
                uint64_t v145 = v423;
              }
              DWORD2(v429) = *(_DWORD *)(v5 + 60);
              uint64_t v323 = *(void *)(v321 + 832);
              if (v323) {
                __int16 v227 = *(_WORD *)(v323 + 8);
              }
              else {
                __int16 v227 = 0;
              }
              uint64_t v317 = (llvm::APFloatBase *)v321;
              uint64_t v318 = 236;
LABEL_652:
              uint64_t v139 = (uint64_t)sub_1CD7F3564(v317, (const char *)v318, (uint64_t)&v429, v144, v145, v139, (void *)v407, v227);
              uint64_t v407 = v330;
              if (!(void)v429) {
                goto LABEL_379;
              }
              int v331 = *(unsigned __int8 *)v429;
              if ((v331 - 4) > 0x1E)
              {
                if ((v331 - 3) >= 0xFFFFFFFE) {
                  uint64_t v334 = v429;
                }
                else {
                  uint64_t v334 = 0;
                }
                if ((v331 - 3) < 0xFFFFFFFE)
                {
                  if (v331 == 3) {
                    *(void *)(v429 + 8) = 0;
                  }
                  goto LABEL_379;
                }
                unint64_t v333 = v334 + 8;
              }
              else
              {
                if ((*(unsigned char *)(v429 + 1) & 0x7F) != 2 && !*(_DWORD *)(v429 + 12)) {
                  goto LABEL_379;
                }
                uint64_t v332 = *(void *)(v429 + 16);
                if ((v332 & 4) == 0) {
                  goto LABEL_379;
                }
                unint64_t v333 = v332 & 0xFFFFFFFFFFFFFFF8;
                if (!v333) {
                  goto LABEL_379;
                }
              }
              uint64_t v424 = &v429;
              sub_1CC5FA668(v333 + 16, &v424);
              goto LABEL_379;
            }
          }
        }
        *(void *)&long long v429 = v142;
        *((void *)&v429 + 1) = v143;
        if ((_BYTE)v142)
        {
LABEL_347:
          if ((v142 - 15) < 0x9Cu)
          {
LABEL_348:
            unint64_t v198 = sub_1CC4A0738((llvm::EVT *)&v429);
            uint64_t v144 = (llvm *)v422;
            uint64_t v145 = v423;
            goto LABEL_352;
          }
LABEL_351:
          unint64_t v198 = 0;
LABEL_352:
          *(void *)&long long v429 = v144;
          *((void *)&v429 + 1) = v145;
          if ((_BYTE)v144)
          {
            if (v144 - 15 < 0x9C)
            {
LABEL_354:
              unint64_t v199 = sub_1CC4A0738((llvm::EVT *)&v429);
              goto LABEL_357;
            }
          }
          else if ((*(_DWORD *)(v145 + 8) & 0xFE) == 0x12)
          {
            goto LABEL_354;
          }
          unint64_t v199 = 0;
LABEL_357:
          if (v198 != v199) {
            goto LABEL_370;
          }
          if ((_BYTE)v421)
          {
            if (v421 - 120 >= 0x20
              && v421 - 2 >= 6
              && v421 - 15 >= 0x3C)
            {
              goto LABEL_370;
            }
          }
          else
          {
            if ((*(_DWORD *)(*((void *)&v421 + 1) + 8) & 0xFE) == 0x12) {
              int v200 = *(unsigned __int8 *)(**(void **)(*((void *)&v421 + 1) + 16) + 8);
            }
            else {
              int v200 = *(_DWORD *)(*((void *)&v421 + 1) + 8);
            }
            if (v200 != 13) {
              goto LABEL_372;
            }
          }
          if ((_BYTE)v422)
          {
            if (v422 - 120 >= 0x20
              && v422 - 2 >= 6
              && v422 - 15 >= 0x3C)
            {
              goto LABEL_370;
            }
            goto LABEL_418;
          }
          if ((*(_DWORD *)(v423 + 8) & 0xFE) == 0x12) {
            int v223 = *(unsigned __int8 *)(**(void **)(v423 + 16) + 8);
          }
          else {
            int v223 = *(_DWORD *)(v423 + 8);
          }
          if (v223 == 13)
          {
LABEL_418:
            uint64_t v224 = *(void *)a1;
            uint64_t v225 = *(unsigned __int8 **)(v5 + 64);
            *(void *)&long long v429 = v225;
            if (v225) {
              llvm::MetadataTracking::track((uint64_t)&v429, v225, 2);
            }
            DWORD2(v429) = *(_DWORD *)(v5 + 60);
            uint64_t v144 = (llvm *)v422;
            uint64_t v145 = v423;
            uint64_t v226 = *(void *)(v224 + 832);
            if (v226) {
              __int16 v227 = *(_WORD *)(v226 + 8);
            }
            else {
              __int16 v227 = 0;
            }
            uint64_t v317 = (llvm::APFloatBase *)v224;
            uint64_t v318 = 201;
            goto LABEL_652;
          }
LABEL_370:
          if ((_BYTE)v421)
          {
            uint64_t v201 = sub_1CB87E200((unsigned __int8 *)&v421);
LABEL_373:
            uint64_t v203 = v201;
            int v204 = v202;
            if ((_BYTE)v422) {
              uint64_t v205 = sub_1CB87E200((unsigned __int8 *)&v422);
            }
            else {
              uint64_t v205 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v422);
            }
            if (v203 != v205 || v204 != v206) {
              goto LABEL_533;
            }
            uint64_t v139 = sub_1CD7EF724(*(void *)a1, (uint64_t)v422, v423, v139, v407);
            uint64_t v407 = v207;
LABEL_379:
            BOOL v208 = v418;
            if (*(unsigned char *)(a1 + 34)
              && (!(_BYTE)v418 || !*(void *)(*(void *)(a1 + 8) + 8 * v418 + 96)))
            {
              goto LABEL_533;
            }
            if (v416 == v418)
            {
              if ((_BYTE)v418) {
                goto LABEL_385;
              }
              uint64_t v209 = v417;
              if (v417 == v419) {
                goto LABEL_385;
              }
            }
            else
            {
              if ((_BYTE)v416)
              {
                if (v416 - 15 < 0x9C) {
                  goto LABEL_533;
                }
                char v216 = 0;
LABEL_399:
                if ((_BYTE)v418)
                {
                  if (v418 - 15 < 0x9C) {
                    goto LABEL_533;
                  }
                }
                else if ((*(_DWORD *)(v419 + 8) & 0xFE) == 0x12)
                {
                  goto LABEL_533;
                }
                if (v216)
                {
                  if ((*(_DWORD *)(v417 + 8) & 0xFE) == 0x12) {
                    int v228 = *(unsigned __int8 *)(**(void **)(v417 + 16) + 8);
                  }
                  else {
                    int v228 = *(_DWORD *)(v417 + 8);
                  }
                  if (v228 != 13) {
                    goto LABEL_533;
                  }
                }
                else if (v416 - 2 >= 6)
                {
                  goto LABEL_533;
                }
                if ((_BYTE)v418)
                {
                  if (v418 - 2 >= 6) {
                    goto LABEL_533;
                  }
                }
                else
                {
                  if ((*(_DWORD *)(v419 + 8) & 0xFE) == 0x12) {
                    int v258 = *(unsigned __int8 *)(**(void **)(v419 + 16) + 8);
                  }
                  else {
                    int v258 = *(_DWORD *)(v419 + 8);
                  }
                  if (v258 != 13) {
                    goto LABEL_533;
                  }
                }
                int v326 = *(llvm::APFloatBase **)a1;
                uint64_t v327 = *(unsigned __int8 **)(a2 + 64);
                *(void *)&long long v429 = v327;
                if (v327)
                {
                  llvm::MetadataTracking::track((uint64_t)&v429, v327, 2);
                  BOOL v208 = v418;
                }
                DWORD2(v429) = *(_DWORD *)(a2 + 60);
                uint64_t v328 = *((void *)v326 + 104);
                if (v328) {
                  __int16 v329 = *(_WORD *)(v328 + 8);
                }
                else {
                  __int16 v329 = 0;
                }
                uint64_t v139 = (uint64_t)sub_1CD7F3564(v326, (const char *)0xC9, (uint64_t)&v429, v208, v419, v139, (void *)v407, v329);
                uint64_t v407 = v335;
                if (!(void)v429) {
                  goto LABEL_385;
                }
                int v336 = *(unsigned __int8 *)v429;
                if ((v336 - 4) > 0x1E)
                {
                  if ((v336 - 3) >= 0xFFFFFFFE) {
                    uint64_t v349 = v429;
                  }
                  else {
                    uint64_t v349 = 0;
                  }
                  if ((v336 - 3) < 0xFFFFFFFE)
                  {
                    if (v336 == 3) {
                      *(void *)(v429 + 8) = 0;
                    }
                    goto LABEL_385;
                  }
                  unint64_t v338 = v349 + 8;
                }
                else
                {
                  if ((*(unsigned char *)(v429 + 1) & 0x7F) != 2 && !*(_DWORD *)(v429 + 12)) {
                    goto LABEL_385;
                  }
                  uint64_t v337 = *(void *)(v429 + 16);
                  if ((v337 & 4) == 0) {
                    goto LABEL_385;
                  }
                  unint64_t v338 = v337 & 0xFFFFFFFFFFFFFFF8;
                  if (!v338) {
                    goto LABEL_385;
                  }
                }
                *(void *)&long long v421 = &v429;
                sub_1CC5FA668(v338 + 16, &v421);
LABEL_385:
                int v210 = *(unsigned __int8 *)(a2 + 80);
                uint64_t v211 = *(void *)(a2 + 88);
                uint64_t v212 = *(void *)(a2 + 40);
                int64_t v214 = *(llvm **)v212;
                uint64_t v213 = *(void *)(v212 + 8);
                int v215 = *(void *)v212;
                if (v215 == v210 && (v215 || v213 == v211))
                {
LABEL_705:
                  if ((*(_WORD *)(a2 + 26) & 0x380) != 0)
                  {
                    if (byte_1EBCF8EE8)
                    {
                      uint64_t v354 = *(void *)(*(void *)(a2 + 32) + 80);
                      if (*(_WORD *)(v354 + 24) != 35 || (*(unsigned char *)(v354 + 26) & 8) == 0)
                      {
                        unint64_t v221 = sub_1CCF5D1D4((uint64_t *)a1, a2, v133, (uint64_t)v208, v145, v134, v135, v136);
                        *(void *)&long long v429 = v139;
                        DWORD2(v429) = v407;
                        goto LABEL_710;
                      }
                    }
                    goto LABEL_535;
                  }
                  *(void *)&long long v429 = v139;
                  DWORD2(v429) = v407;
                  goto LABEL_712;
                }
                if (*(unsigned char *)(a2 + 80))
                {
                  if ((v210 - 120) >= 0x20
                    && (v210 - 2) >= 6
                    && (v210 - 15) >= 0x3C)
                  {
                    goto LABEL_533;
                  }
                }
                else
                {
                  if ((*(_DWORD *)(v211 + 8) & 0xFE) == 0x12) {
                    int v233 = *(unsigned __int8 *)(**(void **)(v211 + 16) + 8);
                  }
                  else {
                    int v233 = *(_DWORD *)(v211 + 8);
                  }
                  if (v233 != 13) {
                    goto LABEL_533;
                  }
                }
                if (v215)
                {
                  if ((v215 - 120) < 0x20
                    || (v215 - 2) < 6
                    || (v215 - 15) < 0x3C)
                  {
                    goto LABEL_528;
                  }
                }
                else
                {
                  if ((*(_DWORD *)(v213 + 8) & 0xFE) == 0x12) {
                    int v256 = *(unsigned __int8 *)(**(void **)(v213 + 16) + 8);
                  }
                  else {
                    int v256 = *(_DWORD *)(v213 + 8);
                  }
                  if (v256 == 13)
                  {
LABEL_528:
                    switch((*(unsigned __int16 *)(a2 + 26) >> 10) & 3)
                    {
                      case 1:
                        uint64_t v339 = *(void *)a1;
                        unint64_t v340 = *(unsigned __int8 **)(a2 + 64);
                        *(void *)&long long v429 = v340;
                        if (v340) {
                          llvm::MetadataTracking::track((uint64_t)&v429, v340, 2);
                        }
                        DWORD2(v429) = *(_DWORD *)(a2 + 60);
                        uint64_t v341 = *(void *)(v339 + 832);
                        if (v341) {
                          __int16 v342 = *(_WORD *)(v341 + 8);
                        }
                        else {
                          __int16 v342 = 0;
                        }
                        uint64_t v350 = (llvm::APFloatBase *)v339;
                        uint64_t v351 = 200;
                        goto LABEL_701;
                      case 2:
                        uint64_t v343 = *(void *)a1;
                        __int16 v344 = *(unsigned __int8 **)(a2 + 64);
                        *(void *)&long long v429 = v344;
                        if (v344) {
                          llvm::MetadataTracking::track((uint64_t)&v429, v344, 2);
                        }
                        DWORD2(v429) = *(_DWORD *)(a2 + 60);
                        uint64_t v345 = *(void *)(v343 + 832);
                        if (v345) {
                          __int16 v342 = *(_WORD *)(v345 + 8);
                        }
                        else {
                          __int16 v342 = 0;
                        }
                        uint64_t v350 = (llvm::APFloatBase *)v343;
                        uint64_t v351 = 198;
                        goto LABEL_701;
                      case 3:
                        uint64_t v346 = *(void *)a1;
                        uint64_t v347 = *(unsigned __int8 **)(a2 + 64);
                        *(void *)&long long v429 = v347;
                        if (v347) {
                          llvm::MetadataTracking::track((uint64_t)&v429, v347, 2);
                        }
                        DWORD2(v429) = *(_DWORD *)(a2 + 60);
                        uint64_t v348 = *(void *)(v346 + 832);
                        if (v348) {
                          __int16 v342 = *(_WORD *)(v348 + 8);
                        }
                        else {
                          __int16 v342 = 0;
                        }
                        uint64_t v350 = (llvm::APFloatBase *)v346;
                        uint64_t v351 = 199;
LABEL_701:
                        uint64_t v139 = (uint64_t)sub_1CD7F3564(v350, (const char *)v351, (uint64_t)&v429, v214, v213, v139, (void *)v407, v342);
                        LODWORD(v407) = v352;
                        if (!(void)v429) {
                          goto LABEL_705;
                        }
                        int v353 = *(unsigned __int8 *)v429;
                        if ((v353 - 4) > 0x1E)
                        {
                          if ((v353 - 3) >= 0xFFFFFFFE) {
                            uint64_t v358 = v429;
                          }
                          else {
                            uint64_t v358 = 0;
                          }
                          if ((v353 - 3) >= 0xFFFFFFFE)
                          {
                            unint64_t v359 = v358 + 8;
LABEL_720:
                            *(void *)&long long v421 = &v429;
                            sub_1CC5FA668(v359 + 16, &v421);
                            goto LABEL_705;
                          }
                          if (v353 == 3) {
                            *(void *)(v429 + 8) = 0;
                          }
                        }
                        else if ((*(unsigned char *)(v429 + 1) & 0x7F) == 2 || *(_DWORD *)(v429 + 12))
                        {
                          uint64_t v389 = *(void *)(v429 + 16);
                          if ((v389 & 4) != 0)
                          {
                            unint64_t v359 = v389 & 0xFFFFFFFFFFFFFFF8;
                            if (v359) {
                              goto LABEL_720;
                            }
                          }
                        }
                        break;
                      default:
                        uint64_t v139 = sub_1CD7EF724(*(void *)a1, (uint64_t)v214, v213, v139, v407);
                        LODWORD(v407) = v257;
                        goto LABEL_705;
                    }
                    goto LABEL_705;
                  }
                }
LABEL_533:
                if (!*(void *)(v139 + 48)) {
                  sub_1CCEF1420((uint64_t *)a1, v139);
                }
                goto LABEL_535;
              }
              uint64_t v209 = v417;
            }
            if ((*(_DWORD *)(v209 + 8) & 0xFE) == 0x12) {
              goto LABEL_533;
            }
            char v216 = 1;
            goto LABEL_399;
          }
LABEL_372:
          uint64_t v201 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v421);
          goto LABEL_373;
        }
LABEL_350:
        if ((*(_DWORD *)(v143 + 8) & 0xFE) == 0x12) {
          goto LABEL_348;
        }
        goto LABEL_351;
      }
    }
    if (v420 != v415
      || !(_BYTE)v420 && *((void *)&v420 + 1) != *((void *)&v415 + 1)
      || v416 != v418
      || !(_BYTE)v416 && v417 != v419)
    {
      goto LABEL_232;
    }
    if ((_BYTE)v420) {
      uint64_t v154 = sub_1CB87E200((unsigned __int8 *)&v420);
    }
    else {
      uint64_t v154 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v420);
    }
    if (v154 == v129 && v155 == v130)
    {
      uint64_t v217 = *(void *)(v5 + 32);
      uint64_t v219 = *(void *)(v217 + 40);
      uint64_t v218 = *(void *)(v217 + 48);
      if ((*(_WORD *)(a2 + 26) & 0x380) != 0)
      {
        if (byte_1EBCF8EE8)
        {
          uint64_t v220 = *(void *)(*(void *)(a2 + 32) + 80);
          if (*(_WORD *)(v220 + 24) != 35 || (*(unsigned char *)(v220 + 26) & 8) == 0)
          {
            unint64_t v221 = sub_1CCF5D1D4((uint64_t *)a1, a2, v133, v156, v157, v134, v135, v136);
            *(void *)&long long v429 = v219;
            DWORD2(v429) = v218;
LABEL_710:
            *(void *)&long long v430 = v221;
            DWORD2(v430) = v222;
            uint64_t v431 = v5;
            int v432 = v6;
            unsigned int v355 = (uint64_t *)a1;
            uint64_t v356 = a2;
            int v357 = 3;
            goto LABEL_713;
          }
        }
LABEL_535:
        uint64_t v8 = v17;
        uint64_t v7 = v410;
        goto LABEL_34;
      }
      *(void *)&long long v429 = *(void *)(v217 + 40);
      DWORD2(v429) = v218;
LABEL_712:
      *(void *)&long long v430 = v5;
      DWORD2(v430) = v6;
      unsigned int v355 = (uint64_t *)a1;
      uint64_t v356 = a2;
      int v357 = 2;
LABEL_713:
      uint64_t result = sub_1CCEF083C(v355, v356, (uint64_t *)&v429, v357, 1);
      uint64_t v8 = v17;
      uint64_t v7 = v410;
      if (result) {
        return result;
      }
      goto LABEL_34;
    }
    if ((_BYTE)v415)
    {
      if (v415 - 120 >= 0x20
        && v415 - 2 >= 6
        && v415 - 15 >= 0x3C)
      {
        goto LABEL_232;
      }
    }
    else
    {
      if ((*(_DWORD *)(*((void *)&v415 + 1) + 8) & 0xFE) == 0x12) {
        int v229 = *(unsigned __int8 *)(**(void **)(*((void *)&v415 + 1) + 16) + 8);
      }
      else {
        int v229 = *(_DWORD *)(*((void *)&v415 + 1) + 8);
      }
      if (v229 != 13) {
        goto LABEL_232;
      }
    }
    if ((_BYTE)v418)
    {
      if (v418 - 120 >= 0x20
        && v418 - 2 >= 6
        && v418 - 15 >= 0x3C)
      {
        goto LABEL_232;
      }
    }
    else
    {
      if ((*(_DWORD *)(v419 + 8) & 0xFE) == 0x12) {
        int v234 = *(unsigned __int8 *)(**(void **)(v419 + 16) + 8);
      }
      else {
        int v234 = *(_DWORD *)(v419 + 8);
      }
      if (v234 != 13) {
        goto LABEL_232;
      }
    }
    if ((_BYTE)v415)
    {
      if (v415 - 15 < 0x9C) {
        goto LABEL_232;
      }
    }
    else if ((*(_DWORD *)(*((void *)&v415 + 1) + 8) & 0xFE) == 0x12)
    {
      goto LABEL_232;
    }
    if ((_BYTE)v418)
    {
      if (v418 - 15 < 0x9C) {
        goto LABEL_232;
      }
    }
    else if ((*(_DWORD *)(v419 + 8) & 0xFE) == 0x12)
    {
      goto LABEL_232;
    }
    if ((*(_WORD *)(a2 + 26) & 0xC00) == 0x800) {
      goto LABEL_232;
    }
    uint64_t v319 = *(void *)a1;
    if ((_BYTE)v415) {
      unsigned int v320 = sub_1CB87E200((unsigned __int8 *)&v415);
    }
    else {
      unsigned int v320 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v415);
    }
    DWORD2(v429) = v320;
    if (v320 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v429);
    }
    *(void *)&long long v429 = 0;
    if (v137)
    {
      if (v137 > 0x40)
      {
        llvm::APInt::setBitsSlowCase(&v429, 0, v137);
      }
      else
      {
        unint64_t v360 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v137;
        if (DWORD2(v429) > 0x40) {
          *(void *)v429 |= v360;
        }
        else {
          *(void *)&long long v429 = v429 | v360;
        }
      }
    }
    uint64_t v361 = *(unsigned __int8 **)(v5 + 64);
    *(void *)&long long v421 = v361;
    if (v361) {
      llvm::MetadataTracking::track((uint64_t)&v421, v361, 2);
    }
    DWORD2(v421) = *(_DWORD *)(v5 + 60);
    uint64_t v363 = sub_1CD7EBB14(v319, (llvm::LLVMContext *)&v429, (const llvm::APInt *)&v421, v415, *((uint64_t *)&v415 + 1), 0, 0);
    uint64_t v365 = v364;
    if ((void)v421)
    {
      int v366 = *(unsigned __int8 *)v421;
      if ((v366 - 4) > 0x1E)
      {
        if ((v366 - 3) >= 0xFFFFFFFE) {
          uint64_t v384 = v421;
        }
        else {
          uint64_t v384 = 0;
        }
        if ((v366 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v385 = v384 + 8;
LABEL_759:
          uint64_t v422 = &v421;
          sub_1CC5FA668(v385 + 16, &v422);
          goto LABEL_735;
        }
        if (v366 == 3) {
          *(void *)(v421 + 8) = 0;
        }
      }
      else if ((*(unsigned char *)(v421 + 1) & 0x7F) == 2 || *(_DWORD *)(v421 + 12))
      {
        uint64_t v390 = *(void *)(v421 + 16);
        if ((v390 & 4) != 0)
        {
          unint64_t v385 = v390 & 0xFFFFFFFFFFFFFFF8;
          if (v385) {
            goto LABEL_759;
          }
        }
      }
    }
LABEL_735:
    if (DWORD2(v429) >= 0x41 && (void)v429) {
      MEMORY[0x1D25D9CB0](v429, 0x1000C8000313F17);
    }
    uint64_t v367 = *(void *)a1;
    uint64_t v368 = *(unsigned __int8 **)(a2 + 64);
    *(void *)&long long v429 = v368;
    if (v368) {
      llvm::MetadataTracking::track((uint64_t)&v429, v368, 2);
    }
    DWORD2(v429) = *(_DWORD *)(a2 + 60);
    uint64_t v369 = *(void *)(v5 + 32);
    uint64_t v370 = *(void *)(v369 + 40);
    uint64_t v371 = *(void *)(v369 + 48);
    uint64_t v372 = *(void *)(v367 + 832);
    if (v372) {
      LOWORD(v372) = *(_WORD *)(v372 + 8);
    }
    int v379 = sub_1CCFDED5C(v367, 171, (const llvm::APInt *)&v429, (llvm *)v420, *((uint64_t *)&v420 + 1), v370, v371, v362, v363, v365, v372);
    int v381 = v380;
    if (!(void)v429) {
      goto LABEL_746;
    }
    int v382 = *(unsigned __int8 *)v429;
    if ((v382 - 4) > 0x1E)
    {
      if ((v382 - 3) >= 0xFFFFFFFE) {
        uint64_t v386 = v429;
      }
      else {
        uint64_t v386 = 0;
      }
      if ((v382 - 3) < 0xFFFFFFFE)
      {
        if (v382 == 3) {
          *(void *)(v429 + 8) = 0;
        }
        goto LABEL_746;
      }
      unint64_t v387 = v386 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v429 + 1) & 0x7F) != 2 && !*(_DWORD *)(v429 + 12)) {
        goto LABEL_746;
      }
      uint64_t v391 = *(void *)(v429 + 16);
      if ((v391 & 4) == 0) {
        goto LABEL_746;
      }
      unint64_t v387 = v391 & 0xFFFFFFFFFFFFFFF8;
      if (!v387) {
        goto LABEL_746;
      }
    }
    *(void *)&long long v421 = &v429;
    sub_1CC5FA668(v387 + 16, &v421);
LABEL_746:
    if ((*(_WORD *)(a2 + 26) & 0x380) != 0)
    {
      if (byte_1EBCF8EE8)
      {
        uint64_t v383 = *(void *)(*(void *)(a2 + 32) + 80);
        if (*(_WORD *)(v383 + 24) != 35 || (*(unsigned char *)(v383 + 26) & 8) == 0)
        {
          unint64_t v221 = sub_1CCF5D1D4((uint64_t *)a1, a2, v373, v374, v375, v376, v377, v378);
          *(void *)&long long v429 = v379;
          DWORD2(v429) = v381;
          goto LABEL_710;
        }
      }
      goto LABEL_535;
    }
    *(void *)&long long v429 = v379;
    DWORD2(v429) = v381;
    goto LABEL_712;
  }
LABEL_34:
  if (*(_DWORD *)(a1 + 28))
  {
    if ((*(_WORD *)(a2 + 26) & 0x380) == 0 && (*(_WORD *)(*(void *)(a2 + 96) + 36) & 0xF00) == 0)
    {
      unsigned __int16 v21 = sub_1CD803F50(*(void *)a1, v8);
      if (v21 >= 0x100u)
      {
        uint64_t v23 = *(void *)(a2 + 96);
        uint64_t v24 = *(void *)(v23 + 8);
        __int16 v25 = v21;
        if (v21 > (63
                                                                  - __clz(((1 << *(unsigned char *)(v23 + 34)) | v24) & -((1 << *(unsigned char *)(v23 + 34)) | v24)))
          && (v24 & ~(-1 << v21)) == 0)
        {
          uint64_t v27 = *(void *)a1;
          int v28 = (*(unsigned __int16 *)(a2 + 26) >> 10) & 3;
          int v29 = *(unsigned __int8 **)(a2 + 64);
          *(void *)&long long v425 = v29;
          if (v29)
          {
            llvm::MetadataTracking::track((uint64_t)&v425, v29, 2);
            uint64_t v23 = *(void *)(a2 + 96);
          }
          DWORD2(v425) = *(_DWORD *)(a2 + 60);
          uint64_t v30 = *(uint64_t **)(a2 + 40);
          uint64_t v31 = *v30;
          uint64_t v32 = v30[1];
          uint64_t v413 = *(void *)(v23 + 16);
          long long v412 = *(_OWORD *)v23;
          uint64_t v33 = *(void *)(a2 + 80);
          uint64_t v34 = *(void *)(a2 + 88);
          __int16 v35 = *(_WORD *)(v23 + 32);
          long long v36 = *(_OWORD *)(v23 + 56);
          *(_OWORD *)uint64_t v427 = *(_OWORD *)(v23 + 40);
          v428[0] = v36;
          sub_1CD7FAEE8(v27, v28, (uint64_t)&v425, v31, v32, v5, v6, v22, v8, v7, &v412, v33, v34, v25 | 0x100, 0, v35, (long long *)v427);
          if ((void)v425)
          {
            int v37 = *(unsigned __int8 *)v425;
            if ((v37 - 4) <= 0x1E)
            {
              if ((*(unsigned char *)(v425 + 1) & 0x7F) != 2 && !*(_DWORD *)(v425 + 12)) {
                goto LABEL_51;
              }
              uint64_t v38 = *(void *)(v425 + 16);
              if ((v38 & 4) == 0) {
                goto LABEL_51;
              }
              unint64_t v39 = v38 & 0xFFFFFFFFFFFFFFF8;
              if (!v39) {
                goto LABEL_51;
              }
LABEL_250:
              v427[0] = &v425;
              sub_1CC5FA668(v39 + 16, v427);
              goto LABEL_51;
            }
            if ((v37 - 3) >= 0xFFFFFFFE) {
              uint64_t v146 = v425;
            }
            else {
              uint64_t v146 = 0;
            }
            if ((v37 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v39 = v146 + 8;
              goto LABEL_250;
            }
            if (v37 == 3) {
              *(void *)(v425 + 8) = 0;
            }
          }
        }
      }
    }
  }
LABEL_51:
  if ((*(_WORD *)(a2 + 26) & 0x380) == 0)
  {
    uint64_t v42 = sub_1CCF5D414(a1, a2, (uint64_t *)v5, v6);
    int v43 = v40;
    if ((uint64_t *)v5 != v42 || v6 != v40)
    {
      unsigned int v48 = v7;
      uint64_t v49 = v8;
      int v50 = (*(unsigned __int16 *)(a2 + 26) >> 10) & 3;
      uint64_t v51 = *(void *)a1;
      if (v50)
      {
        uint64_t v58 = *(void **)(a2 + 64);
        v427[0] = v58;
        if (v58) {
          llvm::MetadataTracking::track((uint64_t)v427, (unsigned __int8 *)v58, 2);
        }
        LODWORD(v427[1]) = *(_DWORD *)(a2 + 60);
        uint64_t v56 = sub_1CD7FAFD4(v51, v50, (uint64_t)v427, **(void **)(a2 + 40), *(void *)(*(void *)(a2 + 40) + 8), (uint64_t)v42, v43, v41, v49, v48, *(void *)(a2 + 80), *(void *)(a2 + 88), *(void *)(a2 + 96));
      }
      else
      {
        uint64_t v52 = *(uint64_t **)(a2 + 40);
        uint64_t v54 = *v52;
        uint64_t v53 = v52[1];
        uint64_t v55 = *(void **)(a2 + 64);
        v427[0] = v55;
        if (v55)
        {
          uint64_t v411 = v53;
          llvm::MetadataTracking::track((uint64_t)v427, (unsigned __int8 *)v55, 2);
          uint64_t v53 = v411;
        }
        LODWORD(v427[1]) = *(_DWORD *)(a2 + 60);
        uint64_t v56 = sub_1CD7FAE3C(v51, v54, v53, (uint64_t)v427, (uint64_t)v42, v43, v49, v48, *(void *)(a2 + 96));
      }
      uint64_t v59 = v56;
      if (v427[0])
      {
        int v60 = *(unsigned __int8 *)v427[0];
        if ((v60 - 4) > 0x1E)
        {
          if ((v60 - 3) >= 0xFFFFFFFE) {
            uint64_t v82 = v427[0];
          }
          else {
            uint64_t v82 = 0;
          }
          if ((v60 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v83 = (unint64_t)v82 + 8;
LABEL_105:
            *(void *)&long long v425 = v427;
            sub_1CC5FA668(v83 + 16, &v425);
            goto LABEL_82;
          }
          if (v60 == 3) {
            *((void *)v427[0] + 1) = 0;
          }
        }
        else if ((*((unsigned char *)v427[0] + 1) & 0x7F) == 2 || *((_DWORD *)v427[0] + 3))
        {
          uint64_t v254 = *((void *)v427[0] + 2);
          if ((v254 & 4) != 0)
          {
            unint64_t v83 = v254 & 0xFFFFFFFFFFFFFFF8;
            if (v83) {
              goto LABEL_105;
            }
          }
        }
      }
LABEL_82:
      uint64_t v61 = *(void *)a1;
      uint64_t v62 = *(void **)(a2 + 64);
      v427[0] = v62;
      if (v62) {
        llvm::MetadataTracking::track((uint64_t)v427, (unsigned __int8 *)v62, 2);
      }
      LODWORD(v427[1]) = *(_DWORD *)(a2 + 60);
      uint64_t v63 = *(void *)(v61 + 832);
      if (v63) {
        LOWORD(v63) = *(_WORD *)(v63 + 8);
      }
      uint64_t v64 = sub_1CCFDED5C(v61, 2, (const llvm::APInt *)v427, (llvm *)1, 0, v5, v6, v57, (uint64_t)v59, 1, v63);
      int v66 = v65;
      if (!v427[0]) {
        goto LABEL_90;
      }
      int v67 = *(unsigned __int8 *)v427[0];
      if ((v67 - 4) > 0x1E)
      {
        if ((v67 - 3) >= 0xFFFFFFFE) {
          unsigned int v84 = v427[0];
        }
        else {
          unsigned int v84 = 0;
        }
        if ((v67 - 3) < 0xFFFFFFFE)
        {
          if (v67 == 3) {
            *((void *)v427[0] + 1) = 0;
          }
          goto LABEL_90;
        }
        unint64_t v85 = (unint64_t)v84 + 8;
      }
      else
      {
        if ((*((unsigned char *)v427[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v427[0] + 3)) {
          goto LABEL_90;
        }
        uint64_t v255 = *((void *)v427[0] + 2);
        if ((v255 & 4) == 0) {
          goto LABEL_90;
        }
        unint64_t v85 = v255 & 0xFFFFFFFFFFFFFFF8;
        if (!v85) {
          goto LABEL_90;
        }
      }
      *(void *)&long long v425 = v427;
      sub_1CC5FA668(v85 + 16, &v425);
LABEL_90:
      v427[0] = v59;
      LODWORD(v427[1]) = 0;
      *(void *)&v428[0] = v64;
      DWORD2(v428[0]) = v66;
      return sub_1CCEF083C((uint64_t *)a1, a2, (uint64_t *)v427, 2, 1);
    }
  }
  if ((sub_1CCF5D9D0((uint64_t *)a1, a2) & 1) != 0 || sub_1CCF5E6B4((uint64_t *)a1, a2)) {
    return a2;
  }
  if (*(int *)(a1 + 24) < 3
    || (*(_WORD *)(*(void *)(a2 + 96) + 36) & 0xF00) != 0
    || (*(unsigned char *)(a2 + 26) & 8) != 0
    || *(_WORD *)(a2 + 24) != 253
    || (*(_WORD *)(a2 + 26) & 0xF80) != 0)
  {
    return 0;
  }
  uint64_t v45 = *(unsigned __int8 **)(a2 + 40);
  int v46 = *v45;
  if (*v45)
  {
    if ((v46 - 2) >= 6 && (v46 - 15) >= 0x3C) {
      return 0;
    }
  }
  else
  {
    uint64_t v94 = *((void *)v45 + 1);
    int v95 = *(_DWORD *)(v94 + 8);
    if ((*(_DWORD *)(v94 + 8) & 0xFE) == 0x12) {
      int v95 = *(unsigned __int8 *)(**(void **)(v94 + 16) + 8);
    }
    uint64_t result = 0;
    if (v95 != 13 || *(_DWORD *)(v94 + 8) == 19) {
      return result;
    }
  }
  unsigned int v97 = sub_1CD40C020(a2, 0);
  if (v96 == 1) {
  DWORD2(v420) = v97;
  }
  if (v97 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v420);
  }
  *(void *)&long long v420 = 0;
  v427[0] = v428;
  v427[1] = (void *)0x400000000;
  uint64_t v98 = *(void *)(a2 + 48);
  if (!v98)
  {
LABEL_448:
    int v112 = 0;
    goto LABEL_449;
  }
  unsigned int v99 = DWORD2(v420);
  unint64_t v100 = ((unint64_t)DWORD2(v420) + 63) >> 6;
  do
  {
    if (*(_DWORD *)(v98 + 8)) {
      goto LABEL_190;
    }
    uint64_t v101 = *(void *)(v98 + 16);
    int v102 = *(unsigned __int16 *)(v101 + 24);
    if (v102 == 177)
    {
      uint64_t v103 = *(void *)(v101 + 48);
      if (!v103 || *(void *)(v103 + 32)) {
        goto LABEL_448;
      }
      uint64_t v104 = *(void *)(*(void *)(v101 + 32) + 40);
      int v105 = *(unsigned __int16 *)(v104 + 24);
      if (v105 != 35 && v105 != 11) {
        goto LABEL_448;
      }
      uint64_t v107 = *(void *)(v104 + 80);
      unint64_t v108 = (void *)(v107 + 24);
      if (*(_DWORD *)(v107 + 32) >= 0x41u) {
        unint64_t v108 = (void *)*v108;
      }
      int v109 = *(_DWORD *)v108;
      uint64_t v101 = *(void *)(v103 + 16);
      int v102 = *(unsigned __int16 *)(v101 + 24);
    }
    else
    {
      int v109 = 0;
    }
    if (v102 != 201) {
      goto LABEL_448;
    }
    unsigned int v111 = sub_1CD40C020(v101, 0);
    if (v110 == 1) {
    if (v111 < 8)
    }
      goto LABEL_448;
    int v112 = 0;
    if ((v111 & (v111 - 1)) != 0 || (v109 & 7) != 0) {
      goto LABEL_449;
    }
    uint64_t v113 = *(void *)a1;
    *(void *)&long long v425 = v101;
    *((void *)&v425 + 1) = a2;
    LODWORD(v426[0]) = v109;
    *((void *)&v426[0] + 1) = v113;
    sub_1CCF5F618((llvm::APInt *)&v429, (uint64_t)&v425);
    if (DWORD2(v429) >= 0x41) {
      operator new[]();
    }
    uint64_t v114 = (void *)v420;
    if (((unint64_t)v420 & (unint64_t)v429) != 0) {
      goto LABEL_185;
    }
    if (v99 > 0x40)
    {
      uint64_t v115 = (uint64_t *)v429;
      unint64_t v116 = v100;
      do
      {
        uint64_t v117 = *v115++;
        *v114++ |= v117;
        --v116;
      }
      while (v116);
    }
    else
    {
      *(void *)&long long v420 = v420 | v429;
    }
    BOOL v118 = !*((void *)&v425 + 1) || (void)v425 == 0;
    if (v118
      || !*((void *)&v426[0] + 1)
      || *(_WORD *)(*(void *)(*(void *)(*((void *)&v425 + 1) + 32) + 80) + 24) != 51)
    {
      goto LABEL_185;
    }
    uint64_t v119 = *(void *)(*((void *)&v426[0] + 1) + 24);
    int v120 = *(llvm::IntegerType **)(*((void *)&v426[0] + 1) + 56);
    uint64_t v121 = (llvm::LLVMContext *)(8 * sub_1CCF5F8FC((uint64_t)&v425));
    if ((int)v121 > 63)
    {
      if (v121 == 64)
      {
        uint64_t v122 = 6;
      }
      else
      {
        if (v121 != 128)
        {
LABEL_203:
          llvm::IntegerType::get(v120, v121);
LABEL_185:
          int v112 = 0;
          goto LABEL_186;
        }
        uint64_t v122 = 7;
      }
    }
    else
    {
      switch(v121)
      {
        case 0x20:
          uint64_t v122 = 5;
          break;
        case 0x10:
          uint64_t v122 = 4;
          break;
        case 8:
          uint64_t v122 = 3;
          break;
        default:
          goto LABEL_203;
      }
    }
    if (!*(void *)(v119 + 8 * v122 + 96) || *(unsigned char *)(v119 + 390 * v122 + 4115)) {
      goto LABEL_185;
    }
    int v112 = 0;
    uint64_t v123 = *(void *)(*(void *)(*(void *)(*(void *)(*((void *)&v425 + 1) + 32) + 40) + 40)
                     + 16 * *(unsigned int *)(*(void *)(*((void *)&v425 + 1) + 32) + 48));
    if ((_BYTE)v123)
    {
      uint64_t v124 = v123;
      if (v123 != 174)
      {
        unint64_t v125 = sub_1CCF5F864((uint64_t)&v425);
        if (!(*(unsigned int (**)(uint64_t, unint64_t))(*(void *)v119 + 1088))(v119, v125)
          || v124 != 1 && !*(void *)(v119 + 8 * v124 + 96)
          || *(unsigned char *)(v119 + 390 * v124 + 3918))
        {
          goto LABEL_185;
        }
        uint64_t v126 = **(unsigned __int8 **)(v425 + 40);
        if (v126 == v122) {
          goto LABEL_199;
        }
        if (!**(unsigned char **)(v425 + 40)) {
          goto LABEL_185;
        }
        if (v126 == 1 || (int v112 = 0, **(unsigned char **)(v425 + 40)) && *(void *)(v119 + 8 * v126 + 96))
        {
          if (*(unsigned char *)(v119 + 390 * **(unsigned __int8 **)(v425 + 40) + 4061)) {
            goto LABEL_185;
          }
LABEL_199:
          if (LODWORD(v427[1]) >= HIDWORD(v427[1]))
          {
            if (v427[0] > &v425 || (char *)v427[0] + 32 * LODWORD(v427[1]) <= (char *)&v425) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          BOOL v127 = (char *)v427[0] + 32 * LODWORD(v427[1]);
          long long v128 = v426[0];
          _OWORD *v127 = v425;
          v127[1] = v128;
          ++LODWORD(v427[1]);
          int v112 = 1;
        }
      }
    }
LABEL_186:
    if (DWORD2(v429) >= 0x41 && (void)v429) {
      MEMORY[0x1D25D9CB0](v429, 0x1000C8000313F17);
    }
    if (!v112) {
      goto LABEL_449;
    }
LABEL_190:
    uint64_t v98 = *(void *)(v98 + 32);
  }
  while (v98);
  if (byte_1EBCF8E28)
  {
    if (LODWORD(v427[1]) > 1) {
      goto LABEL_255;
    }
    goto LABEL_448;
  }
  if (LODWORD(v427[1]) != 2) {
    goto LABEL_448;
  }
  int v394 = *(unsigned __int8 *)(a1 + 35);
  if (!sub_1CCF5F99C((llvm::APInt *)&v420)) {
    goto LABEL_448;
  }
  uint64_t v158 = 0;
  int v408 = 0;
  int v393 = 0;
  int v405 = 0;
  int v403 = 0;
  char v159 = 1;
  do
  {
    char v401 = v159;
    unint64_t v160 = v427[0];
    uint64_t v161 = (char *)v427[0] + 32 * v158;
    uint64_t v162 = *(uint64_t **)(*v161 + 40);
    uint64_t v163 = *v162;
    uint64_t v164 = v162[1];
    uint64_t v165 = v161 + 3;
    int v166 = *(llvm::IntegerType **)(v161[3] + 56);
    uint64_t v167 = (llvm::LLVMContext *)(8 * sub_1CCF5F8FC((uint64_t)v161));
    if ((int)v167 > 63)
    {
      if (v167 == 64)
      {
        uint64_t v168 = 0;
        int v169 = 6;
        goto LABEL_276;
      }
      if (v167 == 128)
      {
        uint64_t v168 = 0;
        int v169 = 7;
        goto LABEL_276;
      }
    }
    else
    {
      switch(v167)
      {
        case 0x20:
          uint64_t v168 = 0;
          int v169 = 5;
          goto LABEL_276;
        case 0x10:
          uint64_t v168 = 0;
          int v169 = 4;
          goto LABEL_276;
        case 8:
          uint64_t v168 = 0;
          int v169 = 3;
          goto LABEL_276;
      }
    }
    uint64_t v168 = llvm::IntegerType::get(v166, v167);
    int v169 = 0;
LABEL_276:
    if (v163 == v169 && (!(_BYTE)v163 ? (BOOL v170 = v164 == v168) : (BOOL v170 = 1), v170)) {
      int v399 = 0;
    }
    else {
      int v399 = (*(uint64_t (**)(void))(**(void **)(*v165 + 24) + 1192))(*(void *)(*v165 + 24)) ^ 1;
    }
    int v171 = (void *)(*(void *)(**(void **)(*v161 + 32) + 40)
                    + 16 * *(unsigned int *)(*(void *)(*v161 + 32) + 8));
    int v172 = (*(uint64_t (**)(void, void, void, void, void))(**(void **)(*v165 + 24) + 1160))(*(void *)(*v165 + 24), *v171, v171[1], **(void **)(*v161 + 40), *(void *)(*(void *)(*v161 + 40) + 8));
    int v173 = v408;
    if (v160[8 * v158 + 4]) {
      int v173 = v408 + 1;
    }
    int v408 = v173;
    if (*v161)
    {
      uint64_t v174 = *(void *)(*v161 + 48);
      if (v174)
      {
        if (!*(void *)(v174 + 32))
        {
          uint64_t v175 = *(void *)(v174 + 16);
          if (*(_WORD *)(v175 + 24) == 216)
          {
            uint64_t v397 = **(void **)(v175 + 40);
            uint64_t v395 = *(void *)(*v165 + 24);
            uint64_t v396 = (*(uint64_t (**)(uint64_t))(*(void *)v395 + 424))(v395);
            uint64_t v176 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v395 + 424))(v395, *(unsigned __int8 *)(*(void *)(**(void **)(v175 + 32) + 40)+ 16 * *(unsigned int *)(*(void *)(v175 + 32) + 8)), (*(unsigned __int8 *)(**(void **)(v175 + 32) + 26) >> 2) & 1);
            if (v176 != v396)
            {
              uint64_t v177 = v176;
              if (v397 == 1 || v397 && *(void *)(v395 + 8 * v397 + 96))
              {
                uint64_t v392 = (unsigned char *)(v395 + 390 * v397 + 4115);
                if (!*v392)
                {
                  uint64_t v178 = *(void *)(*(void *)(*v165 + 40) + 16);
                  uint64_t v179 = (*(uint64_t (**)(uint64_t))(*(void *)v178 + 176))(v178);
                  if (v179)
                  {
                    if (!v396 || v177 == 0) {
                      goto LABEL_303;
                    }
                    uint64_t v189 = *(void *)(v179 + 240);
                    unint64_t v190 = (unint64_t)(*(void *)(v179 + 248) - v189) >> 3;
                    if (!v190) {
                      goto LABEL_303;
                    }
                    unsigned int v191 = 0;
                    uint64_t v192 = *(_DWORD **)(v396 + 8);
                    uint64_t v193 = *(_DWORD **)(v177 + 8);
                    while (1)
                    {
                      unsigned int v194 = *v192 & *v193;
                      if (v194) {
                        break;
                      }
                      ++v192;
                      ++v193;
                      v191 += 32;
                      if (v191 >= v190) {
                        goto LABEL_303;
                      }
                    }
                    if (!*(void *)(v189 + 8 * (__clz(__rbit32(v194)) + v191)))
                    {
LABEL_303:
                      LOBYTE(v425) = 0;
                      sub_1CCF5FC64((uint64_t)v161);
                      if ((*(unsigned int (**)(uint64_t))(*(void *)v395 + 664))(v395)) {
                        BOOL v181 = v425 == 0;
                      }
                      else {
                        BOOL v181 = 1;
                      }
                      if (v181 || v397 != 1 && !*(void *)(v395 + 8 * v397 + 96) || *v392) {
                        goto LABEL_295;
                      }
                      uint64_t v182 = *(uint64_t **)(*v161 + 40);
                      uint64_t v184 = *v182;
                      uint64_t v183 = v182[1];
                      uint64_t v185 = *(llvm::IntegerType **)(*v165 + 56);
                      long long v186 = (llvm::LLVMContext *)(8 * sub_1CCF5F8FC((uint64_t)v161));
                      if ((int)v186 > 63)
                      {
                        if (v186 == 64)
                        {
                          uint64_t v187 = 0;
                          int v188 = 6;
                          goto LABEL_329;
                        }
                        if (v186 != 128) {
                          goto LABEL_337;
                        }
                        uint64_t v187 = 0;
                        int v188 = 7;
LABEL_329:
                        int v195 = 1;
                      }
                      else
                      {
                        switch(v186)
                        {
                          case 0x20:
                            uint64_t v187 = 0;
                            int v188 = 5;
                            goto LABEL_329;
                          case 0x10:
                            uint64_t v187 = 0;
                            int v188 = 4;
                            goto LABEL_329;
                          case 8:
                            uint64_t v187 = 0;
                            int v188 = 3;
                            goto LABEL_329;
                        }
LABEL_337:
                        uint64_t v187 = llvm::IntegerType::get(v185, v186);
                        int v195 = 0;
                        int v188 = 0;
                      }
                      if (v188 == v184)
                      {
                        if (v187 == v183) {
                          int v196 = 1;
                        }
                        else {
                          int v196 = v195;
                        }
                        v393 += v196;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_295:
    char v159 = 0;
    v403 += v399;
    v405 += v172 ^ 1;
    uint64_t v158 = 1;
  }
  while ((v401 & 1) != 0);
  uint64_t v230 = LODWORD(v427[1]);
  if (LODWORD(v427[1]) >= 2)
  {
    sub_1CCF5FCDC((long long *)v427[0], (long long *)v427[0] + 2 * LODWORD(v427[1]), 126 - 2 * __clz(LODWORD(v427[1])), 1);
    uint64_t v235 = 0;
    uint64_t v236 = 0;
    uint64_t v400 = *(void *)(*((void *)v427[0] + 3) + 24);
    unsigned int v398 = 2;
    while (1)
    {
      unint64_t v237 = v427[0];
      unsigned int v402 = (char *)v427[0] + 32 * v235;
      if (v236) {
        break;
      }
LABEL_511:
      ++v235;
      uint64_t v236 = (uint64_t)v402;
      if (v235 == v230) {
        goto LABEL_443;
      }
    }
    int v238 = *(llvm::IntegerType **)(*(void *)(v236 + 24) + 56);
    uint64_t v239 = (llvm::LLVMContext *)(8 * sub_1CCF5F8FC(v236));
    if ((int)v239 > 63)
    {
      if (v239 == 64)
      {
        uint64_t v240 = 0;
        uint64_t v241 = 6;
        goto LABEL_482;
      }
      if (v239 == 128)
      {
        uint64_t v240 = 0;
        uint64_t v241 = 7;
        goto LABEL_482;
      }
    }
    else
    {
      switch(v239)
      {
        case 0x20:
          uint64_t v240 = 0;
          uint64_t v241 = 5;
          goto LABEL_482;
        case 0x10:
          uint64_t v240 = 0;
          uint64_t v241 = 4;
          goto LABEL_482;
        case 8:
          uint64_t v240 = 0;
          uint64_t v241 = 3;
          goto LABEL_482;
      }
    }
    uint64_t v240 = llvm::IntegerType::get(v238, v239);
    uint64_t v241 = 0;
LABEL_482:
    uint64_t v242 = *(llvm::IntegerType **)(v237[4 * v235 + 3] + 56);
    uint64_t v243 = (llvm::LLVMContext *)(8 * sub_1CCF5F8FC((uint64_t)v402));
    if ((int)v243 > 63)
    {
      if (v243 == 64)
      {
        uint64_t v244 = 0;
        char v245 = 0;
        int v246 = 6;
        goto LABEL_491;
      }
      if (v243 == 128)
      {
        uint64_t v244 = 0;
        char v245 = 0;
        int v246 = 7;
        goto LABEL_491;
      }
    }
    else
    {
      switch(v243)
      {
        case 0x20:
          uint64_t v244 = 0;
          char v245 = 0;
          int v246 = 5;
LABEL_491:
          if (v244 == v240) {
            char v245 = 0;
          }
          if (v246 == v241 && (v245 & 1) == 0)
          {
            LOBYTE(v421) = 0;
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, long long *))(*(void *)v400 + 1240))(v400, v241, v240, &v421))
            {
              unsigned __int8 v247 = sub_1CCF5FC64(v236);
              if (v421 <= v247)
              {
                sub_1CCF5F618((llvm::APInt *)&v425, v236);
                sub_1CCF5F618((llvm::APInt *)&v429, (uint64_t)v402);
                if (DWORD2(v425) > 0x40)
                {
                  uint64_t v248 = (void *)v425;
                  uint64_t v249 = (uint64_t *)v429;
                  unint64_t v250 = ((unint64_t)DWORD2(v425) + 63) >> 6;
                  do
                  {
                    uint64_t v251 = *v249++;
                    *v248++ |= v251;
                    --v250;
                  }
                  while (v250);
                }
                else
                {
                  *(void *)&long long v425 = v425 | v429;
                }
                if (DWORD2(v429) >= 0x41 && (void)v429) {
                  MEMORY[0x1D25D9CB0](v429, 0x1000C8000313F17);
                }
                int v252 = sub_1CCF5F99C((llvm::APInt *)&v425);
                if (DWORD2(v425) >= 0x41 && (void)v425) {
                  MEMORY[0x1D25D9CB0](v425, 0x1000C8000313F17);
                }
                v398 -= v252;
                uint64_t v253 = v402;
                if (v252) {
                  uint64_t v253 = 0;
                }
                unsigned int v402 = v253;
              }
            }
            else
            {
              unsigned int v402 = 0;
            }
          }
          goto LABEL_511;
        case 0x10:
          uint64_t v244 = 0;
          char v245 = 0;
          int v246 = 4;
          goto LABEL_491;
        case 8:
          uint64_t v244 = 0;
          char v245 = 0;
          int v246 = 3;
          goto LABEL_491;
      }
    }
    uint64_t v244 = llvm::IntegerType::get(v242, v243);
    int v246 = 0;
    char v245 = 1;
    goto LABEL_491;
  }
  unsigned int v398 = 2;
LABEL_443:
  unsigned int v231 = v393 + 1;
  if (v394 || (BOOL v232 = v398 >= v231, v398 == v231)) {
    BOOL v232 = v398 + v403 >= v408 + v405 + v231;
  }
  if (v232) {
    goto LABEL_448;
  }
LABEL_255:
  *(void *)&long long v425 = v426;
  *((void *)&v425 + 1) = 0x800000000;
  unsigned int v147 = v427[1];
  if (LODWORD(v427[1]))
  {
    uint64_t v259 = (uint64_t *)v427[0];
    for (uint64_t k = 32 * LODWORD(v427[1]); k; k -= 32)
    {
      uint64_t v261 = *(void *)(v259[1] + 32);
      unint64_t v262 = *(void *)(v261 + 48);
      uint64_t v409 = *(uint64_t **)(v261 + 40);
      unint64_t v406 = sub_1CCF5F864((uint64_t)v259);
      if (!v406) {
        goto LABEL_551;
      }
      uint64_t v263 = v409[5] + 16 * v262;
      uint64_t v264 = *(llvm **)v263;
      uint64_t v265 = *(void *)(v263 + 8);
      uint64_t v266 = v259[1];
      uint64_t v267 = *(unsigned __int8 **)(v266 + 64);
      *(void *)&long long v429 = v267;
      if (v267) {
        llvm::MetadataTracking::track((uint64_t)&v429, v267, 2);
      }
      DWORD2(v429) = *(_DWORD *)(v266 + 60);
      uint64_t v268 = v259[3];
      uint64_t v269 = sub_1CD7EBF14(v268, v406, (const llvm::APInt *)&v429, v264, v265, 0, 0);
      uint64_t v272 = *(void *)(v268 + 832);
      if (v272) {
        LOWORD(v272) = *(_WORD *)(v272 + 8);
      }
      uint64_t v409 = sub_1CCFDED5C(v268, 56, (const llvm::APInt *)&v429, v264, v265, (uint64_t)v409, v262, v271, (uint64_t)v269, v270, v272);
      unsigned int v274 = v273;
      if ((void)v429)
      {
        int v275 = *(unsigned __int8 *)v429;
        if ((v275 - 4) > 0x1E)
        {
          if ((v275 - 3) >= 0xFFFFFFFE) {
            uint64_t v279 = v429;
          }
          else {
            uint64_t v279 = 0;
          }
          if ((v275 - 3) < 0xFFFFFFFE)
          {
            if (v275 == 3) {
              *(void *)(v429 + 8) = 0;
            }
            goto LABEL_550;
          }
          unint64_t v280 = v279 + 8;
        }
        else
        {
          if ((*(unsigned char *)(v429 + 1) & 0x7F) != 2 && !*(_DWORD *)(v429 + 12)) {
            goto LABEL_550;
          }
          uint64_t v312 = *(void *)(v429 + 16);
          if ((v312 & 4) == 0) {
            goto LABEL_550;
          }
          unint64_t v280 = v312 & 0xFFFFFFFFFFFFFFF8;
          if (!v280) {
            goto LABEL_550;
          }
        }
        *(void *)&long long v421 = &v429;
        sub_1CC5FA668(v280 + 16, &v421);
      }
LABEL_550:
      unint64_t v262 = v262 & 0xFFFFFFFF00000000 | v274;
LABEL_551:
      uint64_t v276 = *(llvm::IntegerType **)(v259[3] + 56);
      int v277 = (llvm::LLVMContext *)(8 * sub_1CCF5F8FC((uint64_t)v259));
      if ((int)v277 > 63)
      {
        if (v277 == 64)
        {
          uint64_t v404 = 0;
          uint64_t v278 = 6;
          goto LABEL_566;
        }
        if (v277 == 128)
        {
          uint64_t v404 = 0;
          uint64_t v278 = 7;
          goto LABEL_566;
        }
      }
      else
      {
        switch(v277)
        {
          case 0x20:
            uint64_t v404 = 0;
            uint64_t v278 = 5;
            goto LABEL_566;
          case 0x10:
            uint64_t v404 = 0;
            uint64_t v278 = 4;
            goto LABEL_566;
          case 8:
            uint64_t v404 = 0;
            uint64_t v278 = 3;
            goto LABEL_566;
        }
      }
      uint64_t v404 = llvm::IntegerType::get(v276, v277);
      uint64_t v278 = 0;
LABEL_566:
      uint64_t v281 = v259[3];
      uint64_t v282 = v259[1];
      unsigned int v283 = *(unsigned __int8 **)(v282 + 64);
      uint64_t v422 = (long long *)v283;
      uint64_t v284 = v282;
      if (v283)
      {
        llvm::MetadataTracking::track((uint64_t)&v422, v283, 2);
        uint64_t v284 = v259[1];
      }
      LODWORD(v423) = *(_DWORD *)(v282 + 60);
      int v285 = *(uint64_t **)(v284 + 32);
      uint64_t v287 = *v285;
      uint64_t v286 = v285[1];
      sub_1CB8F0264(*(uint64_t **)(v284 + 96), v406, (uint64_t)&v421);
      unsigned __int8 v288 = sub_1CCF5FC64((uint64_t)v259);
      __int16 v289 = *(_WORD *)(*(void *)(v259[1] + 96) + 32);
      long long v429 = 0u;
      long long v430 = 0u;
      uint64_t v290 = sub_1CD7F00F8(v281, v278, v404, (uint64_t)&v422, v287, v286, (uint64_t)v409, v262, &v421, v288 | 0x100u, (v288 | 0x100uLL) >> 32, v289, &v429, 0);
      unint64_t v292 = v291;
      if (v422)
      {
        int v293 = *(unsigned __int8 *)v422;
        if ((v293 - 4) > 0x1E)
        {
          if ((v293 - 3) >= 0xFFFFFFFE) {
            uint64_t v308 = (uint64_t)v422;
          }
          else {
            uint64_t v308 = 0;
          }
          if ((v293 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v309 = v308 + 8;
LABEL_598:
            *(void *)&long long v429 = &v422;
            sub_1CC5FA668(v309 + 16, &v429);
            goto LABEL_572;
          }
          if (v293 == 3) {
            *((void *)v422 + 1) = 0;
          }
        }
        else if ((*((unsigned char *)v422 + 1) & 0x7F) == 2 || *((_DWORD *)v422 + 3))
        {
          uint64_t v311 = *((void *)v422 + 2);
          if ((v311 & 4) != 0)
          {
            unint64_t v309 = v311 & 0xFFFFFFFFFFFFFFF8;
            if (v309) {
              goto LABEL_598;
            }
          }
        }
      }
LABEL_572:
      uint64_t v294 = *(void *)(*v259 + 40);
      uint64_t v295 = *(llvm **)v294;
      uint64_t v296 = *(void *)(v294 + 8);
      if (v278 == *(void *)v294 && (v278 || v404 == v296))
      {
        unsigned int v302 = v292;
      }
      else
      {
        uint64_t v297 = (llvm::APFloatBase *)v259[3];
        BOOL v298 = (unsigned __int8 *)v290[8];
        *(void *)&long long v429 = v298;
        if (v298) {
          llvm::MetadataTracking::track((uint64_t)&v429, v298, 2);
        }
        DWORD2(v429) = *((_DWORD *)v290 + 15);
        uint64_t v299 = *((void *)v297 + 104);
        if (v299) {
          __int16 v300 = *(_WORD *)(v299 + 8);
        }
        else {
          __int16 v300 = 0;
        }
        uint64_t v290 = sub_1CD7F3564(v297, (const char *)0xC7, (uint64_t)&v429, v295, v296, (uint64_t)v290, (void *)v292, v300);
        unsigned int v302 = v301;
        if (!(void)v429) {
          goto LABEL_588;
        }
        int v303 = *(unsigned __int8 *)v429;
        if ((v303 - 4) > 0x1E)
        {
          if ((v303 - 3) >= 0xFFFFFFFE) {
            uint64_t v310 = v429;
          }
          else {
            uint64_t v310 = 0;
          }
          if ((v303 - 3) < 0xFFFFFFFE)
          {
            if (v303 == 3) {
              *(void *)(v429 + 8) = 0;
            }
            goto LABEL_588;
          }
          unint64_t v305 = v310 + 8;
        }
        else
        {
          if ((*(unsigned char *)(v429 + 1) & 0x7F) != 2 && !*(_DWORD *)(v429 + 12)) {
            goto LABEL_588;
          }
          uint64_t v304 = *(void *)(v429 + 16);
          if ((v304 & 4) == 0) {
            goto LABEL_588;
          }
          unint64_t v305 = v304 & 0xFFFFFFFFFFFFFFF8;
          if (!v305) {
            goto LABEL_588;
          }
        }
        uint64_t v422 = &v429;
        sub_1CC5FA668(v305 + 16, &v422);
      }
LABEL_588:
      uint64_t v306 = *v259;
      *(void *)&long long v429 = v290;
      *((void *)&v429 + 1) = v292 & 0xFFFFFFFF00000000 | v302;
      sub_1CCEF083C((uint64_t *)a1, v306, (uint64_t *)&v429, 1, 1);
      if (*((_WORD *)v290 + 12) != 253) {
        uint64_t v290 = *(uint64_t **)v290[4];
      }
      if (DWORD2(v425) >= (unint64_t)HIDWORD(v425)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v307 = (uint64_t **)(v425 + 16 * DWORD2(v425));
      *uint64_t v307 = v290;
      v307[1] = (uint64_t *)1;
      unsigned int v147 = ++DWORD2(v425);
      v259 += 4;
    }
  }
  uint64_t v148 = *(void **)a1;
  int v149 = *(unsigned __int8 **)(a2 + 64);
  *(void *)&long long v429 = v149;
  if (v149)
  {
    llvm::MetadataTracking::track((uint64_t)&v429, v149, 2);
    unsigned int v147 = DWORD2(v425);
  }
  DWORD2(v429) = *(_DWORD *)(a2 + 60);
  uint64_t v150 = v147;
  uint64_t v151 = v148[104];
  if (v151) {
    uint64_t v152 = *(unsigned __int16 *)(v151 + 8);
  }
  else {
    uint64_t v152 = 0;
  }
  uint64_t v313 = sub_1CD7FF4E8(v148, (const char *)2, (const llvm::APInt *)&v429, (llvm *)1, 0, (uint64_t *)v425, v150, v152);
  int v315 = v314;
  if ((void)v429)
  {
    int v316 = *(unsigned __int8 *)v429;
    if ((v316 - 4) > 0x1E)
    {
      if ((v316 - 3) >= 0xFFFFFFFE) {
        uint64_t v324 = v429;
      }
      else {
        uint64_t v324 = 0;
      }
      if ((v316 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v325 = v324 + 8;
        goto LABEL_644;
      }
      if (v316 == 3) {
        *(void *)(v429 + 8) = 0;
      }
    }
    else if ((*(unsigned char *)(v429 + 1) & 0x7F) == 2 || *(_DWORD *)(v429 + 12))
    {
      uint64_t v388 = *(void *)(v429 + 16);
      if ((v388 & 4) != 0)
      {
        unint64_t v325 = v388 & 0xFFFFFFFFFFFFFFF8;
        if (v325)
        {
LABEL_644:
          *(void *)&long long v421 = &v429;
          sub_1CC5FA668(v325 + 16, &v421);
        }
      }
    }
  }
  sub_1CD800DA0(*(void *)a1, a2, 1, (uint64_t)v313, v315);
  sub_1CCEF0788(a1, (uint64_t)v313);
  if ((_OWORD *)v425 != v426) {
    free((void *)v425);
  }
  int v112 = 1;
LABEL_449:
  if (v427[0] != v428) {
    free(v427[0]);
  }
  if (DWORD2(v420) >= 0x41 && (void)v420) {
    MEMORY[0x1D25D9CB0](v420, 0x1000C8000313F17);
  }
  if (v112) {
    return a2;
  }
  else {
    return 0;
  }
}

uint64_t sub_1CCF309D4(unsigned __int8 *a1, uint64_t a2, BOOL a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  v1106[15] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(long long **)(a2 + 32);
  long long v6 = *v5;
  long long v1061 = *(long long *)((char *)v5 + 40);
  long long v1062 = v6;
  uint64_t v8 = *((void *)v5 + 10);
  uint64_t v7 = *((void *)v5 + 11);
  uint64_t v9 = v1061;
  int v10 = *(unsigned __int16 *)(v1061 + 24);
  if (v10 == 216)
  {
    __int16 v11 = *(_WORD *)(a2 + 26);
    if ((v11 & 0x780) != 0) {
      goto LABEL_21;
    }
    if (a1[33] || *(_WORD *)(*(void *)(a2 + 96) + 36) & 0xF00 | v11 & 8)
    {
      if (!*(void *)(*(void *)(**(void **)(v1061 + 32) + 40)
                                       + 16 * *(unsigned int *)(*(void *)(v1061 + 32) + 8)))
        goto LABEL_21;
      uint64_t v12 = *((void *)a1 + 1);
      if (*(void *)(*(void *)(**(void **)(v1061 + 32) + 40)
                                      + 16 * *(unsigned int *)(*(void *)(v1061 + 32) + 8)) != 1)
      {
        BOOL v13 = !*(void *)(*(void *)(**(void **)(v1061 + 32) + 40)
                                          + 16 * *(unsigned int *)(*(void *)(v1061 + 32) + 8))
           || *(void *)(v12
                        + 8
                        * *(void *)(*(void *)(**(void **)(v1061 + 32) + 40)
                                                     + 16 * *(unsigned int *)(*(void *)(v1061 + 32) + 8))
                        + 96) == 0;
        if (v13) {
          goto LABEL_21;
        }
      }
      if (*(unsigned char *)(v12
                    + 390
                    * *(void *)(*(void *)(**(void **)(v1061 + 32) + 40)
                                                 + 16 * *(unsigned int *)(*(void *)(v1061 + 32) + 8))
                    + 4116))
        goto LABEL_21;
    }
    else
    {
      uint64_t v12 = *((void *)a1 + 1);
    }
    uint64_t v14 = (void *)(*(void *)(v1061 + 40) + 16 * DWORD2(v1061));
    if ((*(uint64_t (**)(uint64_t, void, void))(*(void *)v12 + 184))(v12, *v14, v14[1]))
    {
      uint64_t v15 = *(void *)v4;
      uint64_t v16 = *(void **)(v3 + 64);
      __dst[0] = v16;
      if (v16)
      {
        llvm::MetadataTracking::track((uint64_t)__dst, (unsigned __int8 *)v16, 2);
        uint64_t v9 = v1061;
      }
      LODWORD(__dst[1]) = *(_DWORD *)(v3 + 60);
      uint64_t v17 = sub_1CD7FB2A8(v15, v1062, SDWORD2(v1062), (uint64_t)__dst, **(void **)(v9 + 32), *(void *)(*(void *)(v9 + 32) + 8), v8, v7, *(void *)(v3 + 96));
      goto LABEL_117;
    }
    int v10 = *(unsigned __int16 *)(v1061 + 24);
  }
  if (v10 == 51 && (*(_WORD *)(v3 + 26) & 0x380) == 0) {
    return v1062;
  }
LABEL_21:
  if (!*((_DWORD *)v4 + 7)) {
    goto LABEL_29;
  }
  if ((*(_WORD *)(v3 + 26) & 0x380) != 0) {
    goto LABEL_29;
  }
  if ((*(_WORD *)(*(void *)(v3 + 96) + 36) & 0xF00) != 0) {
    goto LABEL_29;
  }
  unsigned __int16 v18 = sub_1CD803F50(*(void *)v4, v8);
  if (v18 < 0x100u) {
    goto LABEL_29;
  }
  uint64_t v19 = *(long long **)(v3 + 96);
  uint64_t v20 = *((void *)v19 + 1);
  uint64_t v21 = v18;
  if (v18 <= (63
                                                             - __clz(((1 << *((unsigned char *)v19 + 34)) | v20) & -((1 << *((unsigned char *)v19 + 34)) | v20)))
    || (v20 & ~(-1 << v18)) != 0)
  {
    goto LABEL_29;
  }
  uint64_t v524 = *(void *)v4;
  uint64_t v525 = *(unsigned __int8 **)(v3 + 64);
  *(void *)&long long v1104 = v525;
  if (v525)
  {
    llvm::MetadataTracking::track((uint64_t)&v1104, v525, 2);
    uint64_t v9 = v1061;
    uint64_t v19 = *(long long **)(v3 + 96);
  }
  DWORD2(v1104) = *(_DWORD *)(v3 + 60);
  uint64_t v1060 = *((void *)v19 + 2);
  long long v1059 = *v19;
  uint64_t v526 = *(void *)(v3 + 80);
  uint64_t v527 = *(void *)(v3 + 88);
  __int16 v528 = *((_WORD *)v19 + 16);
  long long v529 = *(long long *)((char *)v19 + 56);
  *(_OWORD *)__dst = *(long long *)((char *)v19 + 40);
  long long v1084 = v529;
  sub_1CD7FB71C(v524, v1062, SDWORD2(v1062), (uint64_t)&v1104, v9, DWORD2(v1061), v8, v7, (uint64_t)&v1059, v526, v527, v21, SHIDWORD(v21), v528, (long long *)__dst);
  if (!(void)v1104) {
    goto LABEL_29;
  }
  int v530 = *(unsigned __int8 *)v1104;
  if ((v530 - 4) > 0x1E)
  {
    if ((v530 - 3) >= 0xFFFFFFFE) {
      uint64_t v567 = v1104;
    }
    else {
      uint64_t v567 = 0;
    }
    if ((v530 - 3) < 0xFFFFFFFE)
    {
      if (v530 == 3) {
        *(void *)(v1104 + 8) = 0;
      }
      goto LABEL_29;
    }
    unint64_t v568 = v567 + 8;
  }
  else
  {
    if ((*(unsigned char *)(v1104 + 1) & 0x7F) != 2 && !*(_DWORD *)(v1104 + 12)) {
      goto LABEL_29;
    }
    uint64_t v798 = *(void *)(v1104 + 16);
    if ((v798 & 4) == 0) {
      goto LABEL_29;
    }
    unint64_t v568 = v798 & 0xFFFFFFFFFFFFFFF8;
    if (!v568) {
      goto LABEL_29;
    }
  }
  __dst[0] = &v1104;
  sub_1CC5FA668(v568 + 16, __dst);
LABEL_29:
  uint64_t v1058 = (uint64_t)v4;
  if (*(_WORD *)(v3 + 24) == 254)
  {
    int v23 = *(unsigned __int16 *)(v3 + 26);
    if ((v23 & 0x780) == 0)
    {
      uint64_t v39 = *(void *)(v3 + 32);
      uint64_t v40 = *(void *)(v39 + 40);
      if (v40)
      {
        if (*(_WORD *)(v40 + 24) == 253)
        {
          int v41 = *(unsigned __int16 *)(v40 + 26);
          if ((v41 & 0xF80) == 0)
          {
            uint64_t v42 = *(void *)(v40 + 48);
            if (v42)
            {
              uint64_t v43 = *(void *)(v39 + 48);
              int v44 = 1;
              do
              {
                if (*(_DWORD *)(v42 + 8) == v43)
                {
                  if (!v44) {
                    goto LABEL_31;
                  }
                  --v44;
                }
                uint64_t v42 = *(void *)(v42 + 32);
              }
              while (v42);
              if (!v44)
              {
                uint64_t v45 = *(void **)(v40 + 80);
                uint64_t v46 = *(void *)(v40 + 88);
                v1078[0] = v45;
                v1078[1] = (void *)v46;
                if ((_BYTE)v45)
                {
                  BOOL v47 = ((_BYTE)v45 + 104) >= 0x13u && ((_BYTE)v45 - 8) >= 7u;
                  if (v47 && ((_BYTE)v45 - 75) >= 0x2Du) {
                    goto LABEL_31;
                  }
                }
                else
                {
                  if ((*(_DWORD *)(v46 + 8) & 0xFE) == 0x12) {
                    unsigned int v519 = *(unsigned __int8 *)(**(void **)(v46 + 16) + 8);
                  }
                  else {
                    unsigned int v519 = *(_DWORD *)(v46 + 8);
                  }
                  if (v519 > 6) {
                    goto LABEL_31;
                  }
                }
                if (*(unsigned __int8 *)(v3 + 80) != v45) {
                  goto LABEL_31;
                }
                BOOL v531 = v46 != *(void *)(v3 + 88) && v45 == 0;
                if (v531
                  || ((v41 | v23) & 0x10) != 0
                  || *(_DWORD *)(*(void *)(v40 + 96) + 16)
                  || *(_DWORD *)(*(void *)(v3 + 96) + 16))
                {
                  goto LABEL_31;
                }
                uint64_t v532 = v8;
                uint64_t v533 = v3;
                uint64_t v534 = (_BYTE)v45
                     ? (llvm::LLVMContext *)sub_1CB87E200((unsigned __int8 *)v1078)
                     : llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v1078);
                if (a2 == 1) {
                  goto LABEL_31;
                }
                LOBYTE(v1067) = 0;
                LOBYTE(v1065) = 0;
                if ((int)v534 <= 31)
                {
                  switch(v534)
                  {
                    case 1:
                      uint64_t v614 = 2;
                      goto LABEL_1254;
                    case 0x10:
                      uint64_t v614 = 4;
                      goto LABEL_1254;
                    case 8:
                      uint64_t v614 = 3;
                      goto LABEL_1254;
                  }
                }
                else
                {
                  switch(v534)
                  {
                    case 0x20:
                      uint64_t v614 = 5;
LABEL_1254:
                      uint64_t v748 = *((void *)v4 + 1);
                      if (!*(void *)(v748 + 8 * v614 + 96)
                        || *(unsigned char *)(v748 + 390 * v614 + 4115)
                        || *(unsigned char *)(v748 + 390 * v614 + 4116)
                        || !(*(unsigned int (**)(uint64_t, uint64_t, void *, void *))(*(void *)v748 + 1752))(v748, 253, v1078[0], v1078[1])|| !(*(unsigned int (**)(void, uint64_t, void *, void *))(**((void **)v4 + 1)+ 1752))(*((void *)v4 + 1), 254, v1078[0], v1078[1])|| !llvm::TargetLoweringBase::allowsMemoryAccess(*((void *)v4 + 1), *(void *)(*(void *)v4 + 56), *(void *)(**(void **)(*(void *)v4 + 40) + 40) + 272, v614, 0, *(void *)(v40 + 96), (uint64_t)&v1067)|| !llvm::TargetLoweringBase::allowsMemoryAccess(
                                            *((void *)v4 + 1),
                                            *(void *)(*(void *)v4 + 56),
                                            *(void *)(**(void **)(*(void *)v4 + 40) + 40) + 272,
                                            v614,
                                            0,
                                            *(void *)(v3 + 96),
                                            (uint64_t)&v1065)
                        || !(_BYTE)v1067
                        || !(_BYTE)v1065)
                      {
                        goto LABEL_31;
                      }
                      uint64_t v766 = *(void *)v4;
                      v767 = *(void **)(v40 + 64);
                      v1102[0] = v767;
                      if (v767) {
                        llvm::MetadataTracking::track((uint64_t)v1102, (unsigned __int8 *)v767, 2);
                      }
                      LODWORD(v1102[1]) = *(_DWORD *)(v40 + 60);
                      v768 = *(uint64_t **)(v40 + 32);
                      uint64_t v769 = *v768;
                      uint64_t v770 = v768[1];
                      uint64_t v771 = v768[5];
                      uint64_t v772 = v768[6];
                      uint64_t v773 = *(void *)(v40 + 96);
                      uint64_t v1105 = *(void *)(v773 + 16);
                      long long v1104 = *(_OWORD *)v773;
                      uint64_t v774 = (1 << *(unsigned char *)(v773 + 34)) | *(void *)(v773 + 8);
                      *(_OWORD *)__dst = 0u;
                      long long v1084 = 0u;
                      uint64_t v960 = (63 - __clz(v774 & -v774)) | 0x100;
                      v775 = sub_1CD7F00F8(v766, v614, 0, (uint64_t)v1102, v769, v770, v771, v772, &v1104, v960, SHIDWORD(v960), 0, (long long *)__dst, 0);
                      unsigned int v777 = v776;
                      if (v1102[0])
                      {
                        int v778 = *(unsigned __int8 *)v1102[0];
                        if ((v778 - 4) > 0x1E)
                        {
                          if ((v778 - 3) >= 0xFFFFFFFE) {
                            v855 = v1102[0];
                          }
                          else {
                            v855 = 0;
                          }
                          if ((v778 - 3) >= 0xFFFFFFFE)
                          {
                            unint64_t v856 = (unint64_t)v855 + 8;
LABEL_1507:
                            __dst[0] = v1102;
                            sub_1CC5FA668(v856 + 16, __dst);
                            goto LABEL_1324;
                          }
                          if (v778 == 3) {
                            *((void *)v1102[0] + 1) = 0;
                          }
                        }
                        else if ((*((unsigned char *)v1102[0] + 1) & 0x7F) == 2 || *((_DWORD *)v1102[0] + 3))
                        {
                          uint64_t v953 = *((void *)v1102[0] + 2);
                          if ((v953 & 4) != 0)
                          {
                            unint64_t v856 = v953 & 0xFFFFFFFFFFFFFFF8;
                            if (v856) {
                              goto LABEL_1507;
                            }
                          }
                        }
                      }
LABEL_1324:
                      uint64_t v779 = *(void *)v4;
                      v780 = *(uint64_t **)(v533 + 32);
                      uint64_t v781 = *v780;
                      uint64_t v782 = v780[1];
                      v783 = *(void **)(v533 + 64);
                      v1102[0] = v783;
                      if (v783)
                      {
                        llvm::MetadataTracking::track((uint64_t)v1102, (unsigned __int8 *)v783, 2);
                        v780 = *(uint64_t **)(v533 + 32);
                      }
                      LODWORD(v1102[1]) = *(_DWORD *)(v533 + 60);
                      uint64_t v784 = v780[10];
                      uint64_t v785 = v780[11];
                      v786 = *(void ***)(v533 + 96);
                      v1095[0] = v786[2];
                      long long v1094 = *(_OWORD *)v786;
                      uint64_t v787 = (1 << *((unsigned char *)v786 + 34)) | (unint64_t)v786[1];
                      *(_OWORD *)__dst = 0u;
                      long long v1084 = 0u;
                      uint64_t v961 = (63 - __clz(v787 & -v787));
                      uint64_t v32 = (uint64_t)sub_1CD7FB188(v779, v781, v782, (uint64_t)v1102, (uint64_t)v775, v777, v784, v785, (uint64_t)&v1094, v961, SHIDWORD(v961), 0, (long long *)__dst);
                      if (v1102[0])
                      {
                        int v788 = *(unsigned __int8 *)v1102[0];
                        if ((v788 - 4) > 0x1E)
                        {
                          if ((v788 - 3) >= 0xFFFFFFFE) {
                            v853 = v1102[0];
                          }
                          else {
                            v853 = 0;
                          }
                          if ((v788 - 3) >= 0xFFFFFFFE)
                          {
                            unint64_t v854 = (unint64_t)v853 + 8;
LABEL_1501:
                            __dst[0] = v1102;
                            sub_1CC5FA668(v854 + 16, __dst);
                            goto LABEL_1330;
                          }
                          if (v788 == 3) {
                            *((void *)v1102[0] + 1) = 0;
                          }
                        }
                        else if ((*((unsigned char *)v1102[0] + 1) & 0x7F) == 2 || *((_DWORD *)v1102[0] + 3))
                        {
                          uint64_t v952 = *((void *)v1102[0] + 2);
                          if ((v952 & 4) != 0)
                          {
                            unint64_t v854 = v952 & 0xFFFFFFFFFFFFFFF8;
                            if (v854) {
                              goto LABEL_1501;
                            }
                          }
                        }
                      }
LABEL_1330:
                      uint64_t v4 = (unsigned __int8 *)v1058;
                      sub_1CCEF0788(v1058, (uint64_t)v775);
                      sub_1CCEF0788(v1058, v32);
                      uint64_t v789 = *(void *)v1058;
                      __dst[1] = *(void **)(*(void *)v1058 + 656);
                      *(void *)&long long v1084 = v789;
                      *(void *)(v789 + 656) = __dst;
                      __dst[0] = &unk_1F26413F0;
                      *((void *)&v1084 + 1) = v1058;
                      sub_1CD800DA0(v789, v40, 1, (uint64_t)v775, 1);
                      *(void **)(v1084 + 656) = __dst[1];
                      uint64_t v3 = v533;
                      uint64_t v8 = v532;
                      if (v32) {
                        return v32;
                      }
                      goto LABEL_31;
                    case 0x40:
                      uint64_t v614 = 6;
                      goto LABEL_1254;
                    case 0x80:
                      uint64_t v614 = 7;
                      goto LABEL_1254;
                  }
                }
                llvm::IntegerType::get(*(llvm::IntegerType **)(*(void *)v4 + 56), v534);
              }
            }
          }
        }
      }
    }
  }
LABEL_31:
  if (v4[33]) {
    goto LABEL_32;
  }
  if (!*((_DWORD *)v4 + 7)) {
    goto LABEL_32;
  }
  int v31 = *(unsigned __int8 *)(v3 + 80);
  if ((v31 - 3) > 2
    || (*(_WORD *)(*(void *)(v3 + 96) + 36) & 0xF00) != 0
    || (*(unsigned char *)(v3 + 26) & 8) != 0
    || (*(_WORD *)(v3 + 26) & 0x380) != 0)
  {
    goto LABEL_32;
  }
  uint64_t v32 = 0;
  uint64_t v33 = v3;
  uint64_t v34 = **(void **)(v3 + 32);
  __dst[0] = &v1084;
  uint64_t v988 = v33;
  *(void *)&long long v1084 = v33;
  __dst[1] = (void *)0x800000001;
  if (v34 && *(_WORD *)(v34 + 24) == 254)
  {
    int v1018 = v7;
    LODWORD(v35) = 1;
    do
    {
      if (*(unsigned __int8 *)(v34 + 80) != v31
        || (*(_WORD *)(*(void *)(v34 + 96) + 36) & 0xF00) != 0
        || (*(unsigned char *)(v34 + 26) & 8) != 0
        || (*(_WORD *)(v34 + 26) & 0x380) != 0)
      {
        goto LABEL_900;
      }
      if (v35 >= HIDWORD(__dst[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)__dst[0] + v35) = v34;
      unsigned int v36 = __dst[1];
      unint64_t v35 = ++LODWORD(__dst[1]);
      uint64_t v37 = *(void *)(v34 + 32);
      uint64_t v34 = *(void *)v37;
      int v38 = *(_DWORD *)(v37 + 8);
    }
    while (*(void *)v37 && *(_WORD *)(v34 + 24) == 254);
    if (v35 < 2)
    {
LABEL_900:
      uint64_t v32 = 0;
      goto LABEL_901;
    }
    __srcd = (void *)v8;
    v1002 = *(llvm::IntegerType **)(*(void *)v1058 + 56);
    long long v1104 = *(_OWORD *)(v33 + 80);
    unsigned int v1007 = sub_1CD3E12F4((unsigned __int8 *)&v1104, a2, a3);
    unsigned int v1010 = v35 * v1007;
    if ((int)(v35 * v1007) <= 31)
    {
      if (v1010 == 1)
      {
        uint64_t v32 = 0;
      }
      else
      {
        if (v1010 == 16)
        {
          uint64_t v613 = 4;
LABEL_1180:
          long long v1067 = (unint64_t)v613;
          *(void *)&long long v1065 = 0;
          DWORD2(v1065) = 0;
          *(void *)&long long v1104 = &v1105;
          *((void *)&v1104 + 1) = 0x800000000;
          sub_1CD614194((uint64_t)&v1104, v35, 0x7FFFFFFFFFFFFFFFLL);
          LOBYTE(v1094) = 0;
          char v1098 = 0;
          if (LODWORD(__dst[1]))
          {
            uint64_t v700 = 0;
            v701 = (uint64_t *)__dst[0];
            uint64_t v702 = 8 * LODWORD(__dst[1]);
            uint64_t v1052 = 0x7FFFFFFFFFFFFFFFLL;
            while (1)
            {
              uint64_t v703 = *v701;
              uint64_t v704 = *(void *)(*(void *)(*v701 + 32) + 40);
              if (*(_WORD *)(v704 + 24) != 201) {
                goto LABEL_1310;
              }
              uint64_t v1014 = v702;
              *(void *)v1016 = v701;
              long long v1063 = *(_OWORD *)*(void *)(v704 + 32);
              if ((*(_WORD *)(v1063 + 24) & 0xFFFE) == 0xB0
                && ((v705 = *(uint64_t **)(v1063 + 32),
                     uint64_t v706 = v705[5],
                     int v707 = *(unsigned __int16 *)(v706 + 24),
                     v707 != 35)
                  ? (BOOL v708 = v707 == 11)
                  : (BOOL v708 = 1),
                    v708))
              {
                uint64_t v709 = *(void *)(v706 + 80);
                v710 = (unint64_t *)(v709 + 24);
                if (*(_DWORD *)(v709 + 32) >= 0x41u) {
                  v710 = (unint64_t *)*v710;
                }
                unint64_t v711 = *v710;
                unint64_t v1055 = v711 / v1007;
                if (v711 % v1007) {
                  goto LABEL_1310;
                }
                uint64_t v712 = *v705;
                DWORD2(v1063) = *((_DWORD *)v705 + 2);
                *(void *)&long long v1063 = v712;
              }
              else
              {
                unint64_t v1055 = 0;
              }
              if ((void)v1065)
              {
                unsigned int v713 = DWORD2(v1065);
                uint64_t v714 = v1065;
                uint64_t v1012 = sub_1CCF60A1C(v1065);
                int v716 = v715;
                long long v717 = v1063;
                if (v1012 != sub_1CCF60A1C(v1063) || v716 != v718) {
                  goto LABEL_1310;
                }
                v719 = (unsigned __int8 *)(*(void *)(v714 + 40) + 16 * v713);
                int v720 = *v719;
                if (v720 != v1067
                  || ((uint64_t v721 = *((void *)v719 + 1), !v720) ? (v722 = v721 == *((void *)&v1067 + 1)) : (v722 = 1),
                      !v722))
                {
                  v723 = (unsigned __int8 *)(*(void *)(v717 + 40) + 16 * DWORD2(v717));
                  if (*v723 == v1067
                    && ((_BYTE)v1067 || *((void *)v723 + 1) == *((void *)&v1067 + 1))
                    || (v724 = sub_1CD7878C0((unsigned int *)&v1063, v718, a3),
                        v724 > sub_1CD7878C0((unsigned int *)&v1065, v725, v726)))
                  {
                    *(void *)&long long v1065 = v1063;
                    DWORD2(v1065) = DWORD2(v1063);
                  }
                  v727 = sub_1CD7878C0((unsigned int *)&v1065, v718, a3);
                  if (v727 < sub_1CD3E12F4((unsigned __int8 *)&v1067, v728, v729)) {
                    goto LABEL_1310;
                  }
                }
              }
              else
              {
                *(void *)&long long v1065 = v1063;
                DWORD2(v1065) = DWORD2(v1063);
              }
              sub_1CCFE3E9C(v703, *(void *)v1058, (uint64_t)v1078);
              *(void *)&long long v1077 = 0;
              if (v1098)
              {
                int v730 = sub_1CCFE3CB0((uint64_t *)&v1094, (uint64_t *)v1078, *(void *)v1058, &v1077);
                unint64_t v731 = v1055;
                if (!v730) {
                  goto LABEL_1310;
                }
                uint64_t v732 = v1077;
              }
              else
              {
                uint64_t v732 = 0;
                long long v1094 = *(_OWORD *)v1078;
                *(_OWORD *)v1095 = v1079;
                long long v1096 = v1080;
                uint64_t v1097 = v1081;
                char v1098 = 1;
                unint64_t v731 = v1055;
              }
              uint64_t v733 = v1052;
              BOOL v734 = v732 < v1052;
              if (v732 < v1052) {
                uint64_t v733 = v732;
              }
              uint64_t v1052 = v733;
              if (v734) {
                uint64_t v700 = v703;
              }
              if (v731 >= v35 || *(void *)(v1104 + 8 * v731) != 0x7FFFFFFFFFFFFFFFLL) {
                goto LABEL_1310;
              }
              *(void *)(v1104 + 8 * v731) = v732;
              v701 = (uint64_t *)(*(void *)v1016 + 8);
              uint64_t v702 = v1014 - 8;
              if (v1014 == 8) {
                goto LABEL_1243;
              }
            }
          }
          uint64_t v700 = 0;
          uint64_t v1052 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_1243:
          uint64_t v741 = *(void *)(v1058 + 8);
          v742 = (unsigned char *)(*(void *)(**(void **)(*(void *)v1058 + 40) + 40) + 272);
          LOBYTE(v1077) = 0;
          if (!llvm::TargetLoweringBase::allowsMemoryAccess(v741, (uint64_t)v1002, (uint64_t)v742, v1067, *((uint64_t *)&v1067 + 1), *(void *)(v700 + 96), (uint64_t)&v1077))
          {
            uint64_t v32 = 0;
            goto LABEL_1311;
          }
          uint64_t v32 = 0;
          if (!(_BYTE)v1077) {
            goto LABEL_1311;
          }
          unsigned int v743 = *v742;
          unsigned int v744 = v1007 >> 3;
          unsigned int v745 = 0;
          if (*v742)
          {
            unsigned int v746 = v36;
            unint64_t v747 = v35;
            while (*(void *)(v1104 + 8 * v746) == v1052 + v745)
            {
              v745 += v744;
              --v746;
              if (!--v747) {
                goto LABEL_1281;
              }
            }
LABEL_1282:
            if (v1007 == 8)
            {
              uint64_t v756 = 0;
              if (*v742)
              {
                while (*(void *)(v1104 + 8 * v756) == v1052 + v756)
                {
                  if (v35 == ++v756) {
                    goto LABEL_1286;
                  }
                }
              }
              else
              {
                while (*(void *)(v1104 + 8 * v36) == v1052 + v756)
                {
                  ++v756;
                  --v36;
                  if (v35 == v756)
                  {
LABEL_1286:
                    int v755 = 0;
                    int v757 = 1;
                    goto LABEL_1295;
                  }
                }
              }
            }
            if (v35 == 2)
            {
              if (*v742)
              {
                LOBYTE(v755) = 0;
                uint64_t v758 = 0;
                while (*(void *)(v1104 + 8 * v758) == v1052 + v758 * (v1007 >> 3))
                {
                  char v759 = v755;
                  int v755 = 1;
                  uint64_t v758 = 1;
                  if (v759) {
                    goto LABEL_1294;
                  }
                }
              }
              else
              {
                v764 = (uint64_t *)(v1104 + 8);
                while (1)
                {
                  uint64_t v765 = *v764--;
                  if (v765 != v1052 + v743) {
                    break;
                  }
                  v743 += v744;
                  if (!--v35)
                  {
                    int v757 = 0;
                    int v755 = 1;
                    goto LABEL_1295;
                  }
                }
              }
            }
LABEL_1310:
            uint64_t v32 = 0;
            goto LABEL_1311;
          }
          unint64_t v752 = v35;
          v753 = (uint64_t *)v1104;
          do
          {
            uint64_t v754 = *v753++;
            if (v754 != v1052 + v745) {
              goto LABEL_1282;
            }
            v745 += v744;
            --v752;
          }
          while (v752);
LABEL_1281:
          int v755 = 0;
LABEL_1294:
          int v757 = 0;
LABEL_1295:
          v760 = *(unsigned __int8 **)(v988 + 64);
          *(void *)&long long v1063 = v760;
          if (v760) {
            llvm::MetadataTracking::track((uint64_t)&v1063, v760, 2);
          }
          DWORD2(v1063) = *(_DWORD *)(v988 + 60);
          v761 = (uint64_t *)v1065;
          v762 = (unsigned __int8 *)(*(void *)(v1065 + 40) + 16 * DWORD2(v1065));
          if (v1067 == *v762)
          {
            if ((_BYTE)v1067) {
              goto LABEL_1354;
            }
            uint64_t v763 = *((void *)&v1067 + 1);
            if (*((void *)&v1067 + 1) == *((void *)v762 + 1)) {
              goto LABEL_1354;
            }
          }
          else
          {
            uint64_t v763 = *((void *)&v1067 + 1);
          }
          uint64_t v796 = *(void *)(*(void *)v1058 + 832);
          if (v796) {
            __int16 v797 = *(_WORD *)(v796 + 8);
          }
          else {
            __int16 v797 = 0;
          }
          v761 = sub_1CD7F3564(*(llvm::APFloatBase **)v1058, (const char *)0xC9, (uint64_t)&v1063, (llvm *)v1067, v763, v1065, *((void **)&v1065 + 1), v797);
          *(void *)&long long v1065 = v761;
          DWORD2(v1065) = v799;
LABEL_1354:
          if (v757)
          {
            uint64_t v800 = *(void *)(*(void *)v1058 + 832);
            if (v800) {
              __int16 v801 = *(_WORD *)(v800 + 8);
            }
            else {
              __int16 v801 = 0;
            }
            v806 = sub_1CD7F3564(*(llvm::APFloatBase **)v1058, (const char *)0xB6, (uint64_t)&v1063, (llvm *)v1067, *((uint64_t *)&v1067 + 1), (uint64_t)v761, *((void **)&v1065 + 1), v801);
          }
          else
          {
            if (!v755) {
              goto LABEL_1364;
            }
            v802 = sub_1CD7EBF14(*(void *)v1058, v1010 >> 1, (const llvm::APInt *)&v1063, (llvm *)v1067, *((uint64_t *)&v1067 + 1), 0, 0);
            uint64_t v805 = *(void *)(*(void *)v1058 + 832);
            if (v805) {
              LOWORD(v805) = *(_WORD *)(v805 + 8);
            }
            v806 = sub_1CCFDED5C(*(void *)v1058, 179, (const llvm::APInt *)&v1063, (llvm *)v1067, *((uint64_t *)&v1067 + 1), v1065, *((uint64_t *)&v1065 + 1), v804, (uint64_t)v802, v803, v805);
          }
          v761 = v806;
          *(void *)&long long v1065 = v806;
          DWORD2(v1065) = v807;
LABEL_1364:
          uint64_t v808 = *(void *)v1058;
          uint64_t v809 = *(void *)(v700 + 32);
          uint64_t v810 = *(void *)(v809 + 80);
          uint64_t v811 = *(void *)(v809 + 88);
          uint64_t v812 = *(void *)(v700 + 96);
          *(_OWORD *)v1102 = *(_OWORD *)v812;
          v1103[0] = *(void *)(v812 + 16);
          uint64_t v813 = (1 << *(unsigned char *)(v812 + 34)) | *(void *)(v812 + 8);
          *(_OWORD *)v1078 = 0u;
          long long v1079 = 0u;
          uint64_t v962 = (63 - __clz(v813 & -v813));
          uint64_t v32 = (uint64_t)sub_1CD7FB188(v808, v34, v38, (uint64_t)&v1063, (uint64_t)v761, DWORD2(v1065), v810, v811, (uint64_t)v1102, v962, SHIDWORD(v962), 0, (long long *)v1078);
          sub_1CCFCC50C(*(void *)v1058, v988, v32);
          if (!(void)v1063) {
            goto LABEL_1311;
          }
          int v814 = *(unsigned __int8 *)v1063;
          if ((v814 - 4) > 0x1E)
          {
            if ((v814 - 3) >= 0xFFFFFFFE) {
              uint64_t v817 = v1063;
            }
            else {
              uint64_t v817 = 0;
            }
            if ((v814 - 3) < 0xFFFFFFFE)
            {
              if (v814 == 3) {
                *(void *)(v1063 + 8) = 0;
              }
              goto LABEL_1311;
            }
            unint64_t v816 = v817 + 8;
          }
          else if ((*(unsigned char *)(v1063 + 1) & 0x7F) != 2 && !*(_DWORD *)(v1063 + 12) {
                 || (uint64_t v815 = *(void *)(v1063 + 16), (v815 & 4) == 0)
          }
                 || (unint64_t v816 = v815 & 0xFFFFFFFFFFFFFFF8) == 0)
          {
LABEL_1311:
            if ((uint64_t *)v1104 != &v1105) {
              free((void *)v1104);
            }
            goto LABEL_1313;
          }
          v1078[0] = &v1063;
          sub_1CC5FA668(v816 + 16, v1078);
          goto LABEL_1311;
        }
        uint64_t v32 = 0;
        if (v1010 != 8) {
          goto LABEL_1304;
        }
      }
    }
    else
    {
      if (v1010 == 32)
      {
        uint64_t v613 = 5;
        goto LABEL_1180;
      }
      if (v1010 == 64)
      {
        uint64_t v613 = 6;
        goto LABEL_1180;
      }
      uint64_t v32 = 0;
      if (v1010 != 128)
      {
LABEL_1304:
        llvm::IntegerType::get(v1002, (llvm::LLVMContext *)v1010);
        uint64_t v32 = 0;
      }
    }
LABEL_1313:
    LODWORD(v7) = v1018;
    uint64_t v8 = (uint64_t)__srcd;
  }
LABEL_901:
  if (__dst[0] != &v1084) {
    free(__dst[0]);
  }
  uint64_t v3 = v988;
  uint64_t v4 = (unsigned __int8 *)v1058;
  if (v32) {
    return v32;
  }
LABEL_32:
  __int16 v24 = *(_WORD *)(v3 + 26);
  if ((v24 & 0x380) != 0) {
    goto LABEL_37;
  }
  if (!*((_DWORD *)v4 + 7)) {
    goto LABEL_36;
  }
  sub_1CCFE3E9C(v3, *(void *)v4, (uint64_t)&v1063);
  if (!(void)v1063 || *(_WORD *)(v1063 + 24) == 51) {
    goto LABEL_36;
  }
  v1102[0] = v1103;
  v1102[1] = (void *)0x800000000;
  int v60 = (char *)&v1096 + 8;
  long long v1094 = 0uLL;
  v1095[0] = 0;
  v1095[1] = (char *)&v1096 + 8;
  *(void *)&long long v1096 = 0x400000000;
  uint64_t v61 = (llvm::IntervalMapImpl::Path *)v1101;
  v1099 = v1101;
  uint64_t v1100 = 0;
  v1101[0] = 0;
  v1101[1] = 1;
  uint64_t v1092 = 0;
  v1093 = &v1094;
  *(_OWORD *)__dst = 0u;
  long long v1084 = 0u;
  long long v1085 = 0u;
  long long v1086 = 0u;
  long long v1087 = 0u;
  long long v1088 = 0u;
  long long v1089 = 0u;
  long long v1090 = 0u;
  uint64_t v1091 = 0;
  sub_1CCFE3E9C(v3, *(void *)v4, (uint64_t)&v1067);
  if (!(void)v1067) {
    goto LABEL_104;
  }
  if (*(_WORD *)(v1067 + 24) == 51) {
    goto LABEL_104;
  }
  long long v1104 = *(_OWORD *)(v3 + 80);
  if (sub_1CD585444((llvm::EVT *)&v1104)) {
    goto LABEL_104;
  }
  uint64_t v492 = *(void *)(v3 + 88);
  if (!*(void *)(v3 + 80))
  {
    if (*(unsigned char *)(v492 + 8) != 19)
    {
      int v1020 = v7;
      *(void *)&long long v1104 = *(void *)(v3 + 80);
      *((void *)&v1104 + 1) = v492;
      uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1104);
      goto LABEL_912;
    }
LABEL_104:
    char v1047 = 0;
    goto LABEL_105;
  }
  if (*(void *)(v3 + 80) - 120 < 0x33) {
    goto LABEL_104;
  }
  int v1020 = v7;
  *(void *)&long long v1104 = *(void *)(v3 + 80);
  *((void *)&v1104 + 1) = v492;
  uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v1104);
LABEL_912:
  uint64_t v536 = ExtendedSizeInBits;
  uint64_t v991 = v3;
  if (v494 == 1) {
  sub_1CCF60A4C((uint64_t)__dst, 0, (unint64_t)(v536 + 7) >> 3);
  }
  uint64_t v537 = v3;
  do
  {
    uint64_t v538 = **(void **)(v537 + 32);
    if (!v538 || *(_WORD *)(v538 + 24) != 254) {
      break;
    }
    if (*(unsigned char *)(v538 + 80))
    {
      if (*(unsigned __int8 *)(v538 + 80) - 120 < 0x33) {
        goto LABEL_1066;
      }
    }
    else if (*(unsigned char *)(*(void *)(v538 + 88) + 8) == 19)
    {
LABEL_1066:
      char v1047 = 0;
      LODWORD(v7) = v1020;
      goto LABEL_105;
    }
    uint64_t v539 = *(void *)(v538 + 48);
    if (!v539) {
      break;
    }
    if (*(void *)(v539 + 32)) {
      break;
    }
    if ((*(_WORD *)(*(void *)(v538 + 96) + 36) & 0xF00) != 0) {
      break;
    }
    if ((*(unsigned char *)(v538 + 26) & 8) != 0) {
      break;
    }
    if ((*(_WORD *)(v538 + 26) & 0x380) != 0) {
      break;
    }
    sub_1CCFE3E9C(v538, *(void *)v4, (uint64_t)&v1065);
    *(void *)&long long v1077 = 0;
    if ((sub_1CCFE3CB0((uint64_t *)&v1067, (uint64_t *)&v1065, *(void *)v4, &v1077) & 1) == 0) {
      break;
    }
    uint64_t v540 = v60;
    long long v1104 = *(_OWORD *)(v538 + 80);
    if ((_BYTE)v1104) {
      uint64_t v541 = sub_1CB87E200((unsigned __int8 *)&v1104);
    }
    else {
      uint64_t v541 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1104);
    }
    uint64_t v543 = v541;
    if (v542 == 1) {
    unint64_t v544 = (unint64_t)(v543 + 7) >> 3;
    }
    sub_1CCF60D48((uint64_t)&v1104, (uint64_t)__dst, v1077);
    v1078[0] = __dst;
    v1078[1] = (char *)&v1079 + 8;
    *(void *)&long long v1079 = 0x400000000;
    sub_1CCF61D7C(v1078, HIDWORD(v1092));
    if (v1105
      && (uint64_t v545 = *((void *)&v1104 + 1),
          *(_DWORD *)(*((void *)&v1104 + 1) + 12) < *(_DWORD *)(*((void *)&v1104 + 1) + 8)))
    {
      uint64_t v546 = *((void *)&v1104 + 1) + 16 * v1105;
      int v547 = (char *)v1078[1];
      long long v548 = (char *)v1078[1] + 16 * v1079;
      if (*(_DWORD *)(v546 - 4) == *((_DWORD *)v548 - 1) && *(void *)(v546 - 16) == *((void *)v548 - 2)) {
        goto LABEL_944;
      }
    }
    else
    {
      int v547 = (char *)v1078[1];
      if (!v1079 || *((_DWORD *)v1078[1] + 3) >= *((_DWORD *)v1078[1] + 2))
      {
LABEL_944:
        if (v547 != (char *)&v1079 + 8) {
          free(v547);
        }
        goto LABEL_946;
      }
      uint64_t v545 = *((void *)&v1104 + 1);
    }
    int64_t v549 = *(void *)(*(void *)(v545 + 16 * v1105 - 16)
                     + 16 * *(unsigned int *)(v545 + 16 * v1105 - 4));
    uint64_t v550 = v1077;
    if (v547 != (char *)&v1079 + 8) {
      free(v547);
    }
    if (v549 < (uint64_t)(v550 + v544)) {
      goto LABEL_977;
    }
LABEL_946:
    uint64_t v551 = v61;
    v1078[0] = __dst;
    v1078[1] = (char *)&v1079 + 8;
    *(void *)&long long v1079 = 0x400000000;
    sub_1CCF61D7C(v1078, 0);
    unsigned int v552 = *((_DWORD *)v1078[0] + 34);
    if (v552)
    {
      unsigned int v553 = v1079;
      unsigned int v554 = v1079 - 1;
      while (v554 < v552)
      {
        uint64_t v555 = *(void *)(*((void *)v1078[1] + 2 * v554) + 8 * *((unsigned int *)v1078[1] + 4 * v554 + 3));
        if (v553 >= DWORD1(v1079)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v556 = (unint64_t *)((char *)v1078[1] + 16 * v553);
        unint64_t *v556 = v555 & 0xFFFFFFFFFFFFFFC0;
        v556[1] = (v555 & 0x3F) + 1;
        unsigned int v554 = v1079;
        unsigned int v553 = v1079 + 1;
        LODWORD(v1079) = v1079 + 1;
      }
    }
    if (v1105)
    {
      uint64_t v557 = *((void *)&v1104 + 1);
      int v558 = v1079;
      if (*(_DWORD *)(*((void *)&v1104 + 1) + 12) < *(_DWORD *)(*((void *)&v1104 + 1) + 8))
      {
        uint64_t v559 = *((void *)&v1104 + 1) + 16 * v1105;
        int v560 = *(_DWORD *)(v559 - 4);
        v561 = (char *)v1078[1];
        long long v562 = (char *)v1078[1] + 16 * v1079;
        if (v560 == *((_DWORD *)v562 - 1))
        {
          uint64_t v61 = v551;
          if (*(void *)(v559 - 16) == *((void *)v562 - 2)) {
            goto LABEL_962;
          }
        }
        else
        {
          uint64_t v61 = v551;
        }
        goto LABEL_965;
      }
    }
    else
    {
      int v558 = v1079;
    }
    v561 = (char *)v1078[1];
    if (!v558)
    {
      uint64_t v61 = v551;
LABEL_962:
      if (v561 != (char *)&v1079 + 8) {
        free(v561);
      }
LABEL_975:
      sub_1CCF60A4C((uint64_t)__dst, v1077, v1077 + v544);
      if (LODWORD(v1102[1]) >= (unint64_t)HIDWORD(v1102[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v4 = (unsigned __int8 *)v1058;
      int v60 = v540;
      int v566 = 0;
      *((void *)v1102[0] + LODWORD(v1102[1])) = v538;
      ++LODWORD(v1102[1]);
      uint64_t v537 = v538;
      goto LABEL_978;
    }
    uint64_t v61 = v551;
    if (*((_DWORD *)v1078[1] + 3) >= *((_DWORD *)v1078[1] + 2)) {
      goto LABEL_962;
    }
    uint64_t v557 = *((void *)&v1104 + 1);
    int v560 = *(_DWORD *)(*((void *)&v1104 + 1) + 16 * v1105 - 4);
LABEL_965:
    if (v560)
    {
      if (v1105 && *(_DWORD *)(v557 + 12) < *(_DWORD *)(v557 + 8) || (unsigned int v563 = *(_DWORD *)(v1104 + 136)) == 0)
      {
        *(_DWORD *)(v557 + 16 * v1105 - 4) = v560 - 1;
        goto LABEL_972;
      }
    }
    else
    {
      unsigned int v563 = *(_DWORD *)(v1104 + 136);
    }
    llvm::IntervalMapImpl::Path::moveLeft((llvm::IntervalMapImpl::Path *)((char *)&v1104 + 8), v563);
    uint64_t v557 = *((void *)&v1104 + 1);
    v561 = (char *)v1078[1];
LABEL_972:
    uint64_t v564 = *(void *)(*(void *)(v557 + 16 * v1105 - 16)
                     + 16 * *(unsigned int *)(v557 + 16 * v1105 - 4)
                     + 8);
    uint64_t v565 = v1077;
    if (v561 != (char *)&v1079 + 8) {
      free(v561);
    }
    if (v564 > v565) {
      goto LABEL_975;
    }
LABEL_977:
    int v566 = 3;
    uint64_t v4 = (unsigned __int8 *)v1058;
    int v60 = v540;
LABEL_978:
    if (*((void **)&v1104 + 1) != v1106) {
      free(*((void **)&v1104 + 1));
    }
  }
  while (!v566);
  if (!LODWORD(v1102[1]))
  {
    char v1047 = 0;
    LODWORD(v7) = v1020;
    goto LABEL_105;
  }
  v1028 = v61;
  v617 = v60;
  uint64_t v618 = v537;
  uint64_t v619 = *(void *)(v537 + 32);
  v620 = *(uint64_t **)v619;
  v621 = *(void **)(v619 + 8);
  *(void *)&long long v1104 = &v1105;
  *((void *)&v1104 + 1) = 0x800000000;
  unsigned int v622 = LODWORD(v1102[1]) - 1;
  do
  {
    uint64_t v623 = *((void *)v1102[0] + v622);
    v624 = sub_1CCF5D414(v1058, v623, v620, (uint64_t)v621);
    uint64_t v625 = *(void *)v1058;
    v626 = *(void **)(v623 + 32);
    uint64_t v627 = v626[5];
    uint64_t v628 = v626[6];
    uint64_t v629 = v626[10];
    uint64_t v630 = v626[11];
    uint64_t v632 = v626[15];
    uint64_t v631 = v626[16];
    v1078[0] = v624;
    LODWORD(v1078[1]) = v633;
    *(void *)&long long v1079 = v627;
    DWORD2(v1079) = v628;
    *(void *)&long long v1080 = v629;
    DWORD2(v1080) = v630;
    uint64_t v1081 = v632;
    int v1082 = v631;
    v634 = sub_1CD800398(v625, v623, (uint64_t *)v1078, 4);
    if (DWORD2(v1104) >= (unint64_t)HIDWORD(v1104)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v635 = (uint64_t **)(v1104 + 16 * DWORD2(v1104));
    *v635 = v634;
    v635[1] = 0;
    ++DWORD2(v1104);
    uint64_t v636 = v622;
    *((void *)v1102[0] + v622--) = v634;
  }
  while (v636);
  v637 = sub_1CCF5D414(v1058, v991, v620, (uint64_t)v621);
  int v1050 = v638;
  uint64_t v639 = *(void *)v1058;
  if ((*(_WORD *)(v991 + 26) & 0x400) != 0)
  {
    v665 = *(void **)(v991 + 64);
    v1078[0] = v665;
    if (v665) {
      llvm::MetadataTracking::track((uint64_t)v1078, (unsigned __int8 *)v665, 2);
    }
    LODWORD(v1078[1]) = *(_DWORD *)(v991 + 60);
    v641 = sub_1CD7FB840(v639, (uint64_t)v637, v1050, (uint64_t)v1078, *(void *)(*(void *)(v991 + 32) + 40), *(void *)(*(void *)(v991 + 32) + 48), *(void *)(*(void *)(v991 + 32) + 80), *(void *)(*(void *)(v991 + 32) + 88), *(void *)(v991 + 80), *(void *)(v991 + 88), *(void *)(v991 + 96));
  }
  else
  {
    v640 = *(void **)(v991 + 64);
    v1078[0] = v640;
    if (v640) {
      llvm::MetadataTracking::track((uint64_t)v1078, (unsigned __int8 *)v640, 2);
    }
    LODWORD(v1078[1]) = *(_DWORD *)(v991 + 60);
    v641 = sub_1CD7FB2A8(v639, (uint64_t)v637, v1050, (uint64_t)v1078, *(void *)(*(void *)(v991 + 32) + 40), *(void *)(*(void *)(v991 + 32) + 48), *(void *)(*(void *)(v991 + 32) + 80), *(void *)(*(void *)(v991 + 32) + 88), *(void *)(v991 + 96));
  }
  v666 = v641;
  unsigned int v667 = v642;
  if (v1078[0])
  {
    int v668 = *(unsigned __int8 *)v1078[0];
    if ((v668 - 4) > 0x1E)
    {
      if ((v668 - 3) >= 0xFFFFFFFE) {
        v735 = v1078[0];
      }
      else {
        v735 = 0;
      }
      if ((v668 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v736 = (unint64_t)v735 + 8;
        goto LABEL_1227;
      }
      if (v668 == 3) {
        *((void *)v1078[0] + 1) = 0;
      }
    }
    else if ((*((unsigned char *)v1078[0] + 1) & 0x7F) == 2 || *((_DWORD *)v1078[0] + 3))
    {
      uint64_t v842 = *((void *)v1078[0] + 2);
      if ((v842 & 4) != 0)
      {
        unint64_t v736 = v842 & 0xFFFFFFFFFFFFFFF8;
        if (v736)
        {
LABEL_1227:
          *(void *)&long long v1065 = v1078;
          sub_1CC5FA668(v736 + 16, &v1065);
        }
      }
    }
  }
  if (DWORD2(v1104) >= HIDWORD(v1104)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  v669 = (uint64_t **)(v1104 + 16 * DWORD2(v1104));
  *v669 = v666;
  v669[1] = (uint64_t *)v667;
  BOOL v30 = __CFADD__(DWORD2(v1104), 1);
  uint64_t v670 = ++DWORD2(v1104);
  if (v30)
  {
LABEL_1140:
    v1078[0] = v620;
    v1078[1] = v621;
    sub_1CD78821C((unsigned int *)&v1104, v1104, (uint64_t *)v1078);
  }
  else
  {
    uint64_t v671 = 16 * v670;
    uint64_t v672 = v1104;
    while (1)
    {
      uint64_t v673 = *(void *)(*(void *)v672 + 32);
      if (*(uint64_t **)v673 == v620 && *(_DWORD *)(v673 + 8) == v621) {
        break;
      }
      v672 += 16;
      v671 -= 16;
      if (!v671) {
        goto LABEL_1140;
      }
    }
  }
  v674 = *(void **)v1058;
  v675 = *(void **)(v618 + 64);
  v1078[0] = v675;
  if (v675) {
    llvm::MetadataTracking::track((uint64_t)v1078, (unsigned __int8 *)v675, 2);
  }
  LODWORD(v1078[1]) = *(_DWORD *)(v618 + 60);
  v676 = sub_1CD8049E8(v674, (const llvm::APInt *)v1078, (uint64_t)&v1104);
  v678 = v677;
  if (v1078[0])
  {
    int v679 = *(unsigned __int8 *)v1078[0];
    if ((v679 - 4) > 0x1E)
    {
      if ((v679 - 3) >= 0xFFFFFFFE) {
        v698 = v1078[0];
      }
      else {
        v698 = 0;
      }
      if ((v679 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v699 = (unint64_t)v698 + 8;
        goto LABEL_1177;
      }
      if (v679 == 3) {
        *((void *)v1078[0] + 1) = 0;
      }
    }
    else if ((*((unsigned char *)v1078[0] + 1) & 0x7F) == 2 || *((_DWORD *)v1078[0] + 3))
    {
      uint64_t v837 = *((void *)v1078[0] + 2);
      if ((v837 & 4) != 0)
      {
        unint64_t v699 = v837 & 0xFFFFFFFFFFFFFFF8;
        if (v699)
        {
LABEL_1177:
          *(void *)&long long v1065 = v1078;
          sub_1CC5FA668(v699 + 16, &v1065);
        }
      }
    }
  }
  v1078[0] = v676;
  v1078[1] = v678;
  sub_1CCEF083C((uint64_t *)v1058, v991, (uint64_t *)v1078, 1, 1);
  sub_1CCEF0788(v1058, (uint64_t)v676);
  if (*((_WORD *)v676 + 28))
  {
    v680 = (uint64_t *)v676[4];
    uint64_t v681 = 40 * *((unsigned __int16 *)v676 + 28);
    do
    {
      uint64_t v682 = *v680;
      v680 += 5;
      sub_1CCEF0788(v1058, v682);
      v681 -= 40;
    }
    while (v681);
  }
  sub_1CCEF0788(v1058, v618);
  if ((uint64_t *)v1104 != &v1105) {
    free((void *)v1104);
  }
  char v1047 = 1;
  uint64_t v3 = v991;
  uint64_t v4 = (unsigned __int8 *)v1058;
  int v60 = v617;
  LODWORD(v7) = v1020;
  uint64_t v61 = v1028;
LABEL_105:
  int v62 = v1092;
  if (v1092)
  {
    *(void *)&long long v1104 = &v1105;
    *((void *)&v1104 + 1) = 0x400000000;
    v1078[0] = &v1079;
    v1078[1] = (void *)0x400000000;
    LODWORD(v63) = HIDWORD(v1092);
    size_t __n = (size_t)v60;
    if (HIDWORD(v1092))
    {
      LODWORD(v63) = 0;
      unsigned int v64 = 0;
      do
      {
        if (v63 >= HIDWORD(v1104)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(v1104 + 8 * v63) = __dst[v64 + 1];
        LODWORD(v63) = ++DWORD2(v1104);
        ++v64;
      }
      while (v64 != HIDWORD(v1092));
      int v62 = v1092;
    }
    int v86 = v62 - 1;
    if (v62 != 1)
    {
      v1022 = v61;
      do
      {
        uint64_t v87 = DWORD2(v1104);
        if (DWORD2(v1104))
        {
          uint64_t v88 = 0;
          uint64_t v89 = v1104;
          unsigned int v90 = v1078[1];
          do
          {
            uint64_t v91 = 0;
            uint64_t v92 = 8 * (*(void *)(v89 + 8 * v88) & 0x3FLL) + 8;
            do
            {
              if (v90 >= HIDWORD(v1078[1])) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v1078[0] + v90) = *(void *)((*(void *)(v1104 + 8 * v88) & 0xFFFFFFFFFFFFFFC0) + v91);
              unsigned int v90 = ++LODWORD(v1078[1]);
              v91 += 8;
            }
            while (v92 != v91);
            uint64_t v89 = v1104;
            uint64_t v93 = (void *)(*(void *)(v1104 + 8 * v88) & 0xFFFFFFFFFFFFFFC0);
            uint64_t v94 = v1093;
            *uint64_t v93 = *(void *)v1093;
            *(void *)uint64_t v94 = v93;
            ++v88;
          }
          while (v88 != v87);
        }
        DWORD2(v1104) = 0;
        sub_1CC2E99B4(&v1104, v1078);
        --v86;
      }
      while (v86);
      LODWORD(v63) = DWORD2(v1104);
      uint64_t v4 = (unsigned __int8 *)v1058;
      int v60 = (char *)__n;
      uint64_t v61 = v1022;
    }
    if (v63)
    {
      int v95 = (uint64_t *)v1104;
      unint64_t v96 = (unint64_t *)v1093;
      unint64_t v97 = *(void *)v1093;
      uint64_t v63 = v63;
      do
      {
        uint64_t v98 = *v95++;
        unint64_t v99 = v98 & 0xFFFFFFFFFFFFFFC0;
        *(void *)(v98 & 0xFFFFFFFFFFFFFFC0) = v97;
        unint64_t v97 = v98 & 0xFFFFFFFFFFFFFFC0;
        --v63;
      }
      while (v63);
      *unint64_t v96 = v99;
    }
    if (v1078[0] != &v1079) {
      free(v1078[0]);
    }
    if ((uint64_t *)v1104 != &v1105) {
      free((void *)v1104);
    }
  }
  *(void *)&long long v1094 = 0;
  if (v1096)
  {
    unint64_t v100 = (uint64_t *)v1095[1];
    uint64_t v101 = 8 * v1096;
    do
    {
      uint64_t v102 = *v100++;
      MEMORY[0x1D25D9CD0](v102, 8);
      v101 -= 8;
    }
    while (v101);
  }
  uint64_t v103 = (llvm::IntervalMapImpl::Path *)v1099;
  if (v1100)
  {
    uint64_t v615 = 16 * v1100;
    do
    {
      uint64_t v616 = *(void *)v103;
      uint64_t v103 = (llvm::IntervalMapImpl::Path *)((char *)v103 + 16);
      MEMORY[0x1D25D9CD0](v616, 8);
      v615 -= 16;
    }
    while (v615);
    uint64_t v103 = (llvm::IntervalMapImpl::Path *)v1099;
    uint64_t v4 = (unsigned __int8 *)v1058;
  }
  if (v103 != v61) {
    free(v103);
  }
  if (v1095[1] != v60) {
    free(v1095[1]);
  }
  if (v1102[0] != v1103) {
    free(v1102[0]);
  }
  if (v1047) {
    return v3;
  }
  int v105 = sub_1CCF5D414((uint64_t)v4, v3, **(uint64_t ***)(v3 + 32), *(void *)(*(void *)(v3 + 32) + 8));
  int v106 = v104;
  uint64_t v107 = *(void *)(v3 + 32);
  if (*(uint64_t **)v107 != v105 || *(_DWORD *)(v107 + 8) != v104)
  {
    unint64_t v108 = *(unsigned __int8 **)(v3 + 64);
    *(void *)&long long v1104 = v108;
    if (v108)
    {
      llvm::MetadataTracking::track((uint64_t)&v1104, v108, 2);
      uint64_t v107 = *(void *)(v3 + 32);
    }
    DWORD2(v1104) = *(_DWORD *)(v3 + 60);
    uint64_t v109 = *(void *)v4;
    uint64_t v110 = *(void *)(v107 + 40);
    uint64_t v111 = *(void *)(v107 + 48);
    uint64_t v112 = *(void *)(v107 + 80);
    uint64_t v113 = *(void *)(v107 + 88);
    if ((*(unsigned char *)(v3 + 27) & 4) != 0) {
      uint64_t v114 = sub_1CD7FB840(v109, (uint64_t)v105, v106, (uint64_t)&v1104, v110, v111, v112, v113, *(void *)(v3 + 80), *(void *)(v3 + 88), *(void *)(v3 + 96));
    }
    else {
      uint64_t v114 = sub_1CD7FB2A8(v109, (uint64_t)v105, v106, (uint64_t)&v1104, v110, v111, v112, v113, *(void *)(v3 + 96));
    }
    uint64_t v117 = *(uint64_t **)(v3 + 32);
    uint64_t v118 = *v117;
    uint64_t v119 = v117[1];
    uint64_t v120 = *(void *)(*(void *)v4 + 832);
    if (v120) {
      LOWORD(v120) = *(_WORD *)(v120 + 8);
    }
    uint64_t v121 = sub_1CCFDED5C(*(void *)v4, 2, (const llvm::APInt *)&v1104, (llvm *)1, 0, v118, v119, v116, (uint64_t)v114, v115, v120);
    uint64_t v123 = v122;
    sub_1CCEF0788((uint64_t)v4, (uint64_t)v121);
    __dst[0] = v121;
    __dst[1] = v123;
    sub_1CCEF083C((uint64_t *)v4, v3, (uint64_t *)__dst, 1, 0);
    if (!(void)v1104) {
      return v3;
    }
    int v124 = *(unsigned __int8 *)v1104;
    if ((v124 - 4) > 0x1E)
    {
      if ((v124 - 3) >= 0xFFFFFFFE) {
        uint64_t v489 = v1104;
      }
      else {
        uint64_t v489 = 0;
      }
      if ((v124 - 3) < 0xFFFFFFFE)
      {
        if (v124 == 3) {
          *(void *)(v1104 + 8) = 0;
        }
        return v3;
      }
      unint64_t v490 = v489 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v1104 + 1) & 0x7F) != 2 && !*(_DWORD *)(v1104 + 12)) {
        return v3;
      }
      uint64_t v749 = *(void *)(v1104 + 16);
      if ((v749 & 4) == 0) {
        return v3;
      }
      unint64_t v490 = v749 & 0xFFFFFFFFFFFFFFF8;
      if (!v490) {
        return v3;
      }
    }
    __dst[0] = &v1104;
    sub_1CC5FA668(v490 + 16, __dst);
    return v3;
  }
LABEL_36:
  uint64_t v25 = *(void *)(v3 + 32);
  int v26 = *(_DWORD *)(v25 + 8);
  *(void *)&long long v1062 = *(void *)v25;
  DWORD2(v1062) = v26;
  __int16 v24 = *(_WORD *)(v3 + 26);
LABEL_37:
  uint64_t v27 = v1061;
  if ((v24 & 0x780) != 0x400) {
    goto LABEL_198;
  }
  int v28 = (unsigned __int8 *)(*(void *)(v1061 + 40) + 16 * DWORD2(v1061));
  int v29 = *v28;
  if (!*v28)
  {
    uint64_t v48 = *((void *)v28 + 1);
    if ((*(_DWORD *)(v48 + 8) & 0xFE) == 0x12) {
      int v49 = *(unsigned __int8 *)(**(void **)(v48 + 16) + 8);
    }
    else {
      int v49 = *(_DWORD *)(v48 + 8);
    }
    if (v49 != 13) {
      goto LABEL_198;
    }
LABEL_84:
    int v50 = *(unsigned __int16 *)(v1061 + 24);
    BOOL v51 = v50 == 35 || v50 == 11;
    if (v51 && (*(unsigned char *)(v1061 + 26) & 8) != 0) {
      goto LABEL_198;
    }
    if ((v50 - 198) <= 2)
    {
      uint64_t v52 = *(unsigned int **)(v1061 + 32);
      uint64_t v53 = *(void *)v52;
      uint64_t v54 = (unsigned __int8 *)(*(void *)(*(void *)v52 + 40) + 16 * v52[2]);
      int v55 = *v54;
      uint64_t v56 = *(unsigned __int8 *)(v3 + 80);
      if (v55 == v56)
      {
        uint64_t v57 = *((void *)v54 + 1);
        if (v55 || v57 == *(void *)(v3 + 88))
        {
          uint64_t v59 = *((void *)v4 + 1);
          if (v55 == 1)
          {
            if (!*(unsigned char *)(v3 + 80)) {
              goto LABEL_122;
            }
          }
          else if (!v55 || !*(unsigned char *)(v3 + 80) || !*(void *)(v59 + 8 * v56 + 96))
          {
            goto LABEL_122;
          }
          if ((*(unsigned __int8 *)(v59 + 390 * *(unsigned __int8 *)(v3 + 80) + 4116) | 4) == 4)
          {
            uint64_t v65 = *(void *)v4;
            long long v66 = v1062;
            int v67 = *(void **)(v3 + 64);
            __dst[0] = v67;
            if (v67)
            {
              llvm::MetadataTracking::track((uint64_t)__dst, (unsigned __int8 *)v67, 2);
              uint64_t v52 = *(unsigned int **)(v1061 + 32);
              uint64_t v53 = *(void *)v52;
            }
            LODWORD(__dst[1]) = *(_DWORD *)(v3 + 60);
            uint64_t v17 = sub_1CD7FB2A8(v65, v66, SDWORD2(v66), (uint64_t)__dst, v53, *((void *)v52 + 1), v8, v7, *(void *)(v3 + 96));
LABEL_117:
            uint64_t v32 = (uint64_t)v17;
            if (!__dst[0]) {
              return v32;
            }
            int v68 = *(unsigned __int8 *)__dst[0];
            if ((v68 - 4) > 0x1E)
            {
              if ((v68 - 3) >= 0xFFFFFFFE) {
                unsigned int v84 = __dst[0];
              }
              else {
                unsigned int v84 = 0;
              }
              if ((v68 - 3) < 0xFFFFFFFE)
              {
                if (v68 == 3) {
                  *((void *)__dst[0] + 1) = 0;
                }
                return v32;
              }
              unint64_t v85 = (unint64_t)v84 + 8;
            }
            else
            {
              if ((*((unsigned char *)__dst[0] + 1) & 0x7F) != 2 && !*((_DWORD *)__dst[0] + 3)) {
                return v32;
              }
              uint64_t v697 = *((void *)__dst[0] + 2);
              if ((v697 & 4) == 0) {
                return v32;
              }
              unint64_t v85 = v697 & 0xFFFFFFFFFFFFFFF8;
              if (!v85) {
                return v32;
              }
            }
            *(void *)&long long v1104 = __dst;
            sub_1CC5FA668(v85 + 16, &v1104);
            return v32;
          }
        }
      }
    }
LABEL_122:
    unsigned int v69 = sub_1CD7878C0((unsigned int *)&v1061, v1061, a3);
    long long v1104 = *(_OWORD *)(v3 + 80);
    unsigned int v72 = sub_1CD3E12F4((unsigned __int8 *)&v1104, v70, v71);
    LODWORD(__dst[1]) = v69;
    if (v69 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)__dst);
    }
    __dst[0] = 0;
    if (v72)
    {
      if (v72 > 0x40)
      {
        llvm::APInt::setBitsSlowCase(__dst, 0, v72);
      }
      else
      {
        unint64_t v73 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v72;
        if (LODWORD(__dst[1]) > 0x40) {
          *(void *)__dst[0] |= v73;
        }
        else {
          __dst[0] = (void *)((unint64_t)__dst[0] | v73);
        }
      }
    }
    sub_1CCEF0788((uint64_t)v4, v1061);
    uint64_t v74 = sub_1CD7F0CA0(*(void *)v4, v1061, *((const llvm::APInt **)&v1061 + 1), (uint64_t)__dst);
    if (v74)
    {
      uint64_t v76 = (uint64_t)v74;
      unsigned int v77 = v75;
      uint64_t v78 = *(void *)v4;
      long long v79 = v1062;
      int v80 = *(unsigned __int8 **)(v3 + 64);
      *(void *)&long long v1104 = v80;
      if (v80) {
        llvm::MetadataTracking::track((uint64_t)&v1104, v80, 2);
      }
      DWORD2(v1104) = *(_DWORD *)(v3 + 60);
      uint64_t v32 = (uint64_t)sub_1CD7FB840(v78, v79, SDWORD2(v79), (uint64_t)&v1104, v76, v77, v8, v7, *(void *)(v3 + 80), *(void *)(v3 + 88), *(void *)(v3 + 96));
      if (!(void)v1104) {
        goto LABEL_849;
      }
      int v81 = *(unsigned __int8 *)v1104;
      if ((v81 - 4) > 0x1E)
      {
        if ((v81 - 3) >= 0xFFFFFFFE) {
          uint64_t v491 = v1104;
        }
        else {
          uint64_t v491 = 0;
        }
        if ((v81 - 3) < 0xFFFFFFFE)
        {
          if (v81 == 3) {
            *(void *)(v1104 + 8) = 0;
          }
          goto LABEL_849;
        }
        unint64_t v83 = v491 + 8;
        goto LABEL_804;
      }
      if ((*(unsigned char *)(v1104 + 1) & 0x7F) == 2 || *(_DWORD *)(v1104 + 12))
      {
        uint64_t v82 = *(void *)(v1104 + 16);
        if ((v82 & 4) != 0)
        {
          unint64_t v83 = v82 & 0xFFFFFFFFFFFFFFF8;
          if (v83)
          {
LABEL_804:
            *(void *)&long long v1094 = &v1104;
            sub_1CC5FA668(v83 + 16, &v1094);
          }
        }
      }
    }
    else
    {
      if (!sub_1CCF42B2C((uint64_t)v4, v1061, *((uint64_t *)&v1061 + 1), (uint64_t)__dst))
      {
        if (LODWORD(__dst[1]) >= 0x41 && __dst[0]) {
          MEMORY[0x1D25D9CB0](__dst[0], 0x1000C8000313F17);
        }
        uint64_t v27 = v1061;
        goto LABEL_198;
      }
      if (*(_WORD *)(v3 + 24)) {
        sub_1CCEF0788((uint64_t)v4, v3);
      }
      uint64_t v32 = v3;
    }
LABEL_849:
    if (LODWORD(__dst[1]) >= 0x41 && __dst[0]) {
      MEMORY[0x1D25D9CB0](__dst[0], 0x1000C8000313F17);
    }
    return v32;
  }
  BOOL v30 = (v29 - 120) >= 0x20 && (v29 - 2) >= 6;
  if (!v30 || (v29 - 15) < 0x3C) {
    goto LABEL_84;
  }
LABEL_198:
  if (v27)
  {
    if (*(_WORD *)(v27 + 24) == 253)
    {
      uint64_t v125 = *(void *)(v27 + 32);
      if (*(void *)(v125 + 40) == v8
        && *(_DWORD *)(v125 + 48) == v7
        && *(unsigned __int8 *)(v3 + 80) == *(unsigned __int8 *)(v27 + 80)
        && (*(unsigned char *)(v3 + 80) || *(void *)(v3 + 88) == *(void *)(v27 + 88)))
      {
        __int16 v126 = *(_WORD *)(v3 + 26);
        if ((v126 & 0x380) == 0)
        {
          uint64_t v127 = *(void *)(v3 + 96);
          if (!(*(_WORD *)(v127 + 36) & 0xF00 | v126 & 8)
            && *(_DWORD *)(*(void *)(v27 + 96) + 16) == *(_DWORD *)(v127 + 16)
            && sub_1CCFE2580((uint64_t *)&v1062, v27, 1u, 2))
          {
            return v1062;
          }
        }
      }
    }
  }
  uint64_t v32 = v1062;
  if ((void)v1062)
  {
    if (*(_WORD *)(v1062 + 24) == 254)
    {
      __int16 v128 = *(_WORD *)(v3 + 26);
      if ((v128 & 0x380) == 0)
      {
        uint64_t v129 = *(void *)(v3 + 96);
        if (!(*(_WORD *)(v129 + 36) & 0xF00 | v128 & 8))
        {
          __int16 v130 = *(_WORD *)(v1062 + 26);
          if ((v130 & 0x380) == 0)
          {
            uint64_t v131 = *(void *)(v1062 + 96);
            if (!(*(_WORD *)(v131 + 36) & 0xF00 | v130 & 8))
            {
              if (*((_DWORD *)v4 + 7))
              {
                uint64_t v479 = *(void *)(v1062 + 32);
                uint64_t v480 = *(void *)(v479 + 80);
                if (v480 == v8
                  && *(_DWORD *)(v479 + 88) == v7
                  && *(void *)(v479 + 40) == (void)v1061
                  && *(_DWORD *)(v479 + 48) == DWORD2(v1061)
                  && *(unsigned __int8 *)(v3 + 80) == *(unsigned __int8 *)(v1062 + 80)
                  && (*(unsigned char *)(v3 + 80) || *(void *)(v3 + 88) == *(void *)(v1062 + 88))
                  && *(_DWORD *)(v129 + 16) == *(_DWORD *)(v131 + 16))
                {
                  return v32;
                }
                uint64_t v481 = *(void *)(v1062 + 48);
                if (v481)
                {
                  if (!*(void *)(v481 + 32) && *(_WORD *)(v480 + 24) != 51)
                  {
                    if (*(unsigned char *)(v3 + 80))
                    {
                      if (*(unsigned __int8 *)(v3 + 80) - 120 >= 0x33)
                      {
LABEL_992:
                        if (*(unsigned char *)(v1062 + 80))
                        {
                          if (*(unsigned __int8 *)(v1062 + 80) - 120 >= 0x33) {
                            goto LABEL_1013;
                          }
                        }
                        else if (*(unsigned char *)(*(void *)(v1062 + 88) + 8) != 19)
                        {
LABEL_1013:
                          if (*(_DWORD *)(v129 + 16) == *(_DWORD *)(v131 + 16))
                          {
                            sub_1CCFE3E9C(v3, *(void *)v4, (uint64_t)__dst);
                            sub_1CCFE3E9C(v32, *(void *)v4, (uint64_t)&v1104);
                            uint64_t v580 = v3;
                            long long v1094 = *(_OWORD *)(v3 + 80);
                            if ((_BYTE)v1094) {
                              unsigned int v581 = sub_1CB87E200((unsigned __int8 *)&v1094);
                            }
                            else {
                              unsigned int v581 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1094);
                            }
                            unsigned int v643 = v581;
                            long long v1094 = *(_OWORD *)(v32 + 80);
                            if ((_BYTE)v1094) {
                              unsigned int v644 = sub_1CB87E200((unsigned __int8 *)&v1094);
                            }
                            else {
                              unsigned int v644 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1094);
                            }
                            unsigned int v645 = v644;
                            uint64_t v646 = *(void *)v1058;
                            *(void *)&long long v1094 = 0;
                            if (sub_1CCFE3CB0((uint64_t *)__dst, (uint64_t *)&v1104, v646, &v1094)
                              && (v1094 & 0x8000000000000000) == 0
                              && v645 + 8 * (uint64_t)v1094 <= v643)
                            {
                              long long v1094 = *(_OWORD *)*(void *)(v32 + 32);
                              sub_1CCEF083C((uint64_t *)v1058, v32, (uint64_t *)&v1094, 1, 1);
                              return 0;
                            }
                            uint64_t v3 = v580;
                            uint64_t v4 = (unsigned __int8 *)v1058;
                          }
                        }
                      }
                    }
                    else if (*(unsigned char *)(*(void *)(v3 + 88) + 8) != 19)
                    {
                      goto LABEL_992;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  int v132 = *(unsigned __int16 *)(v1061 + 24);
  if (v132 == 212 || v132 == 201)
  {
    uint64_t v133 = *(void *)(v1061 + 48);
    if (v133)
    {
      if (!*(void *)(v133 + 32) && (*(_WORD *)(v3 + 26) & 0x380) == 0)
      {
        uint64_t v134 = (void *)(*(void *)(**(void **)(v1061 + 32) + 40)
                        + 16 * *(unsigned int *)(*(void *)(v1061 + 32) + 8));
        if ((*(unsigned int (**)(void, void, void, void, void, void))(**((void **)v4 + 1)
                                                                                            + 544))(*((void *)v4 + 1), *v134, v134[1], *(void *)(v3 + 80), *(void *)(v3 + 88), v4[33]))
        {
          uint64_t v135 = *(void *)v4;
          long long v136 = v1062;
          unsigned int v137 = *(void **)(v3 + 64);
          __dst[0] = v137;
          if (v137) {
            llvm::MetadataTracking::track((uint64_t)__dst, (unsigned __int8 *)v137, 2);
          }
          LODWORD(__dst[1]) = *(_DWORD *)(v3 + 60);
          uint64_t v17 = sub_1CD7FB840(v135, v136, SDWORD2(v136), (uint64_t)__dst, **(void **)(v1061 + 32), *(void *)(*(void *)(v1061 + 32) + 8), v8, v7, *(void *)(v3 + 80), *(void *)(v3 + 88), *(void *)(v3 + 96));
          goto LABEL_117;
        }
      }
    }
  }
  if (!v4[34]
    || (*(unsigned int (**)(void, void, void))(**((void **)v4 + 1) + 200))(*((void *)v4 + 1), *(void *)(v3 + 80), *(void *)(v3 + 88)))
  {
    uint64_t v138 = (llvm::IntegerType *)&v1105;
    uint64_t v139 = &unk_1EBCF8000;
    while (1)
    {
      if (*((_DWORD *)v4 + 7)) {
        BOOL v140 = v139[4008] == 0;
      }
      else {
        BOOL v140 = 1;
      }
      if (v140) {
        goto LABEL_737;
      }
      long long v141 = *(_OWORD *)(v3 + 80);
      long long v1070 = v141;
      if (!(_BYTE)v141 || (v141 - 120) < 0x33u) {
        goto LABEL_737;
      }
      uint64_t v143 = sub_1CB87E200((unsigned __int8 *)&v1070);
      if (v142 == 1) {
      if (2 * v143 > (unint64_t)*((unsigned int *)v4 + 362))
      }
        goto LABEL_737;
      uint64_t v32 = sub_1CB896FB8((unsigned __int8 *)&v1070);
      if (v144 == 1) {
      if ((_BYTE)v1070)
      }
        uint64_t v145 = sub_1CB87E200((unsigned __int8 *)&v1070);
      else {
        uint64_t v145 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1070);
      }
      uint64_t v147 = v145;
      if (v146 == 1) {
      if (8 * v32 != v147)
      }
        goto LABEL_737;
      for (uint64_t i = *(void *)(*(void *)(v3 + 32) + 40); ; uint64_t i = **(void **)(i + 32))
      {
        int v149 = *(unsigned __int16 *)(i + 24);
        if (v149 != 216) {
          break;
        }
      }
      if (*(unsigned __int16 *)(i + 24) > 0x96u) {
        break;
      }
      if ((v149 - 11) >= 2)
      {
        if (v149 != 148) {
          goto LABEL_737;
        }
LABEL_256:
        int v150 = 0;
        int v151 = 2;
        goto LABEL_257;
      }
      int v150 = 0;
      int v151 = 1;
LABEL_257:
      int v1019 = v151;
LABEL_258:
      *(void *)&long long v1104 = v138;
      *((void *)&v1104 + 1) = 0x800000000;
      size_t v1069 = 0;
      *(void *)&long long v1077 = v3;
      sub_1CCFE3E9C(v3, *(void *)v4, (uint64_t)&v1094);
      if ((void)v1094 && *(_WORD *)(v1094 + 24) != 51)
      {
        uint64_t v152 = v139;
        unsigned int v153 = v138;
        uint64_t v154 = v1077;
        uint64_t v155 = *(void *)(v1077 + 32);
        uint64_t v157 = *(void *)(v155 + 40);
        for (unint64_t j = *(void *)(v155 + 48); ; unint64_t j = j & 0xFFFFFFFF00000000 | *(unsigned int *)(v159 + 8))
        {
          int v158 = *(unsigned __int16 *)(v157 + 24);
          if (v158 != 216) {
            break;
          }
          uint64_t v159 = *(void *)(v157 + 32);
          uint64_t v157 = *(void *)v159;
        }
        *(void *)&long long v1067 = v157;
        *((void *)&v1067 + 1) = j;
        if (v158 <= 150)
        {
          if ((v158 - 11) < 2)
          {
            int v160 = 0;
            int v161 = 1;
            goto LABEL_273;
          }
          if (v158 == 148)
          {
LABEL_271:
            int v160 = 0;
            int v161 = 2;
            goto LABEL_273;
          }
LABEL_269:
          int v160 = 0;
          int v161 = 0;
          goto LABEL_273;
        }
        if (v158 != 253)
        {
          if (v158 == 151) {
            goto LABEL_271;
          }
          goto LABEL_269;
        }
        int v161 = 3;
        int v160 = 1;
LABEL_273:
        LODWORD(v1071) = v161;
        long long v1065 = *(_OWORD *)(v1077 + 80);
        v1078[0] = 0;
        LODWORD(v1078[1]) = 0;
        *(void *)&long long v1079 = 0;
        DWORD2(v1079) = 0;
        LOBYTE(v1080) = 0;
        BYTE8(v1080) = 0;
        LOBYTE(v1081) = 0;
        LOBYTE(v1063) = 0;
        *((void *)&v1063 + 1) = 0;
        if (v160)
        {
          sub_1CCFE3E9C(v157, *(void *)v4, (uint64_t)__dst);
          *(_OWORD *)v1078 = *(_OWORD *)__dst;
          long long v1079 = v1084;
          long long v1080 = v1085;
          LOBYTE(v1081) = v1086;
          uint64_t v162 = *(void *)(v157 + 88);
          *(void *)&long long v1063 = *(void *)(v157 + 80);
          *((void *)&v1063 + 1) = v162;
          if (v1065 == v1063 && ((_BYTE)v1065 || *((void *)&v1065 + 1) == v162))
          {
            uint64_t v163 = *(void *)(v157 + 48);
            if (v163)
            {
              int v164 = 1;
              do
              {
                if (!*(_DWORD *)(v163 + 8))
                {
                  if (!v164) {
                    goto LABEL_309;
                  }
                  --v164;
                }
                uint64_t v163 = *(void *)(v163 + 32);
              }
              while (v163);
              if (!v164
                && (*(_WORD *)(*(void *)(v157 + 96) + 36) & 0xF00) == 0
                && (*(unsigned char *)(v157 + 26) & 8) == 0
                && (*(_WORD *)(v157 + 26) & 0x380) == 0)
              {
                uint64_t v154 = v1077;
                goto LABEL_288;
              }
            }
          }
        }
        else
        {
LABEL_288:
          __dst[0] = &v1077;
          __dst[1] = &v1065;
          *(void *)&long long v1084 = &v1071;
          *((void *)&v1084 + 1) = v4;
          *(void *)&long long v1085 = &v1063;
          *((void *)&v1085 + 1) = &v1067;
          *(void *)&long long v1086 = v1078;
          *((void *)&v1086 + 1) = &v1094;
          v1074 = v4;
          v1102[0] = __dst;
          v1102[1] = &v1074;
          v1103[0] = &v1069;
          v1103[1] = &v1104;
          size_t v165 = **(void **)(v154 + 32);
          size_t v1069 = v165;
          if (v165 && *(_WORD *)(v165 + 24) == 253)
          {
            size_t v1069 = **(void **)(v165 + 32);
            uint64_t v166 = *(void *)(v1069 + 48);
            if (v166)
            {
              unsigned int v167 = 0;
              do
              {
                uint64_t v168 = *(void *)(v166 + 16);
                unint64_t v169 = 0xCCCCCCCCCCCCCCCDLL * ((v166 - *(void *)(v168 + 32)) >> 3);
                if (!v169 && *(_WORD *)(v168 + 24) == 253)
                {
                  uint64_t v170 = *(void *)(v168 + 48);
                  if (v170)
                  {
                    do
                    {
                      sub_1CCF62A28((uint64_t)v1102, v170);
                      uint64_t v170 = *(void *)(v170 + 32);
                    }
                    while (v170);
                    uint64_t v168 = *(void *)(v166 + 16);
                    unint64_t v169 = 0xCCCCCCCCCCCCCCCDLL * ((v166 - *(void *)(v168 + 32)) >> 3);
                  }
                }
                if (!v169 && *(_WORD *)(v168 + 24) == 254) {
                  sub_1CCF62A28((uint64_t)v1102, v166);
                }
                uint64_t v166 = *(void *)(v166 + 32);
                if (!v166) {
                  break;
                }
                BOOL v30 = v167++ >= 0x3FF;
              }
              while (!v30);
            }
          }
          else
          {
            uint64_t v171 = *(void *)(v165 + 48);
            if (v171)
            {
              unsigned int v172 = 0;
              do
              {
                sub_1CCF62A28((uint64_t)v1102, v171);
                uint64_t v171 = *(void *)(v171 + 32);
                if (!v171) {
                  break;
                }
                BOOL v30 = v172++ >= 0x3FF;
              }
              while (!v30);
            }
          }
        }
LABEL_309:
        uint64_t v138 = v153;
        uint64_t v139 = v152;
      }
      if (DWORD2(v1104) < 2
        || ((sub_1CCF62DD0(v1104, (void *)(v1104 + 16 * DWORD2(v1104)), 126 - 2 * __clz(DWORD2(v1104)), 1),
             (uint64_t v175 = *(void *)(**(void **)(*(void *)v4 + 40) + 112)) == 0)
          ? (int v1048 = 0)
          : (int v1048 = (*(unsigned __int8 *)(v175 + 15) >> 2) & 1),
            !v150 ? (int v176 = 0) : (int v176 = (*(unsigned __int8 *)(i + 26) >> 4) & 1),
            LODWORD(v177) = DWORD2(v1104),
            DWORD2(v1104) < 2))
      {
        LOBYTE(v178) = 0;
        goto LABEL_732;
      }
      int v1013 = v176;
      int v178 = 0;
      int v1015 = v1048 ^ 1;
      int v1011 = (*(unsigned __int8 *)(v3 + 26) >> 1) & 8;
      do
      {
        uint64_t v179 = (char *)v1104;
        LODWORD(v180) = v177;
        while (1)
        {
          unint64_t v181 = 0;
          uint64_t v182 = v180 <= 1uLL ? 1 : v180;
          uint64_t v183 = 16 * v182 - 16;
          do
          {
            if (v183 == v181) {
              goto LABEL_732;
            }
            uint64_t v184 = *(void *)&v179[v181 + 8] + v32;
            uint64_t v185 = *(void *)&v179[v181 + 24];
            v181 += 16;
          }
          while (v184 != v185);
          if (v181 != 16)
          {
            size_t v186 = 16 * v180 - v181 + 16;
            uint64_t v187 = v179;
            if (16 * v180 + 16 != v181)
            {
              memmove(v179, &v179[v181 - 16], v186);
              uint64_t v187 = (char *)v1104;
            }
            unint64_t v180 = (unint64_t)(&v179[v186] - v187) >> 4;
            DWORD2(v1104) = v180;
            uint64_t v179 = v187;
          }
          uint64_t v188 = 0;
          uint64_t v189 = 0;
          uint64_t v190 = v180 <= 1 ? 1 : v180;
          uint64_t v191 = 24;
          while (v190 - 1 != v189)
          {
            uint64_t v192 = *(void *)&v179[v191] - *((void *)v179 + 1);
            ++v189;
            v191 += 16;
            v188 += v32;
            if (v188 != v192)
            {
              LODWORD(v190) = v189;
              break;
            }
          }
          if (v190 > 1) {
            break;
          }
          uint64_t v193 = 16 * v180 - 16;
          unsigned int v194 = v179;
          if (v180 != 1)
          {
            memmove(v179, v179 + 16, 16 * v180 - 16);
            unsigned int v194 = (char *)v1104;
          }
          unint64_t v180 = (unint64_t)(&v179[v193] - v194) >> 4;
          DWORD2(v1104) = v180;
          uint64_t v179 = v194;
        }
        int v984 = v178;
        if (v1019 == 3)
        {
          unsigned int v222 = v190;
          long long v1077 = v1070;
          uint64_t v1005 = v1069;
          v1008 = *(llvm::IntegerType **)(*(void *)v4 + 56);
          uint64_t v223 = *(void *)(**(void **)(*(void *)v4 + 40) + 40);
          unint64_t __srca = sub_1CB896FB8((unsigned __int8 *)&v1077);
          if (v224 == 1) {
          if ((_BYTE)v1077)
          }
          {
            if (v1077 - 15 >= 0x9C) {
              goto LABEL_381;
            }
LABEL_723:
            uint64_t v225 = v139;
            uint64_t v226 = v138;
            int v975 = sub_1CD3DB440((llvm::EVT *)&v1077, v224);
          }
          else
          {
            if ((*(_DWORD *)(*((void *)&v1077 + 1) + 8) & 0xFE) == 0x12) {
              goto LABEL_723;
            }
LABEL_381:
            uint64_t v225 = v139;
            uint64_t v226 = v138;
            int v975 = 1;
          }
          uint64_t v227 = 0;
          __dst[0] = &v1084;
          uint64_t v969 = v223 + 272;
          __dst[1] = (void *)0x800000000;
          *(void *)&long long v1094 = 0;
          DWORD2(v1094) = 0;
          v1095[0] = 0;
          LODWORD(v1095[1]) = 0;
          LOBYTE(v1096) = 0;
          BYTE8(v1096) = 0;
          LOBYTE(v1097) = 0;
          while (1)
          {
            for (uint64_t k = *(void *)(*(void *)(*(void *)(v1104 + 16 * v227) + 32) + 40);
                  *(_WORD *)(k + 24) == 216;
            sub_1CCFE3E9C(k, *(void *)v4, (uint64_t)v1078);
            v1102[0] = 0;
            if ((void)v1094)
            {
              if (!sub_1CCFE3CB0((uint64_t *)&v1094, (uint64_t *)v1078, *(void *)v4, v1102))
              {
                LODWORD(v230) = __dst[1];
LABEL_511:
                uint64_t v138 = v226;
                uint64_t v139 = v225;
                int v292 = v984;
                if (v230 < 2)
                {
                  int v992 = 0;
                  goto LABEL_715;
                }
                unsigned int v293 = v222;
                int v992 = 0;
                unsigned int v1004 = 16 * __srca - 16;
                uint64_t v976 = v1004 >> 4;
                int v970 = 8 * __srca;
                uint64_t v990 = v3;
                v1001 = v226;
                while (2)
                {
                  unsigned int __nc = v293;
                  int v294 = 0;
                  v1076[0] = 0;
                  if (v230 == 2)
                  {
                    if ((*(unsigned int (**)(void, void, void, char *))(**((void **)v4 + 1) + 1240))(*((void *)v4 + 1), v1077, *((void *)&v1077 + 1), v1076))
                    {
                      uint64_t v295 = v1104;
                      uint64_t v296 = (1 << *(unsigned char *)(*(void *)(*(void *)v295 + 96) + 34)) | *(void *)(*(void *)(*(void *)v295 + 96) + 8);
                      if (v1076[0] <= (63 - __clz(v296 & -v296)))
                      {
                        uint64_t v451 = v139;
                        uint64_t v452 = 16 * DWORD2(v1104) - 32;
                        if (DWORD2(v1104) != 2) {
                          memmove((void *)v1104, (const void *)(v1104 + 32), 16 * DWORD2(v1104) - 32);
                        }
                        DWORD2(v1104) = (unint64_t)(v295 + v452 - v1104) >> 4;
                        int v453 = __dst[0];
                        uint64_t v454 = 16 * LODWORD(__dst[1]) - 32;
                        if (LODWORD(__dst[1]) != 2) {
                          memmove(__dst[0], (char *)__dst[0] + 32, 16 * LODWORD(__dst[1]) - 32);
                        }
                        LODWORD(__dst[1]) = ((unint64_t)v453 + v454 - (unint64_t)__dst[0]) >> 4;
                        uint64_t v139 = v451;
                        int v292 = v984;
                        goto LABEL_715;
                      }
                    }
                    uint64_t v297 = *((void *)__dst[0] + 1);
                    uint64_t v298 = *((void *)__dst[0] + 3);
                    if (v1004 <= 0x7F && ((0x8Bu >> v976) & 1) != 0)
                    {
                      uint64_t v299 = 0;
                      uint64_t v300 = qword_1CFB2D428[v976];
                    }
                    else
                    {
                      uint64_t v299 = llvm::IntegerType::get(v1008, (llvm::LLVMContext *)(16 * __srca));
                      LOBYTE(v300) = 0;
                    }
                    if (v297 - v298 == __srca
                      && ((sub_1CCF41ED0(*((void *)v4 + 1), 0xB2u, v300, v299, v4[33]) & 1) != 0
                       || sub_1CCF41ED0(*((void *)v4 + 1), 0xB3u, v300, v299, v4[33])))
                    {
                      unsigned int v301 = __dst[0];
                      long long v302 = *(_OWORD *)__dst[0];
                      *(_OWORD *)__dst[0] = *((_OWORD *)__dst[0] + 1);
                      v301[1] = v302;
                      int v294 = 1;
                    }
                    else
                    {
                      int v294 = 0;
                    }
                  }
                  uint64_t v303 = *(void *)v1104;
                  uint64_t v304 = *(void *)(*(void *)v1104 + 96);
                  char v305 = *(unsigned char *)(v304 + 34);
                  uint64_t v306 = *(void *)(v304 + 8);
                  uint64_t v307 = (char *)__dst[0];
                  uint64_t v308 = *(void *)__dst[0];
                  if (LODWORD(__dst[1]) < 2
                    || (unint64_t v309 = *(uint64_t **)(v308 + 32),
                        uint64_t v310 = *v309,
                        uint64_t v311 = *((void *)__dst[0] + 2),
                        uint64_t v312 = *(void *)(v311 + 32),
                        *(void *)v312 != *v309)
                    || (int v313 = *((_DWORD *)v309 + 2), *(_DWORD *)(v312 + 8) != v313))
                  {
                    LOBYTE(v316) = 0;
                    unsigned int v322 = 1;
                    unsigned int v321 = 1;
                    char v320 = 1;
                    int v344 = 1;
                    goto LABEL_598;
                  }
                  uint64_t v314 = 0;
                  uint64_t v315 = 0;
                  uint64_t v998 = 0;
                  int v316 = 0;
                  unsigned int v971 = *(_DWORD *)(v304 + 16);
                  uint64_t v317 = *((void *)__dst[0] + 1);
                  uint64_t v318 = 1;
                  unsigned int v995 = 2 * v975;
                  unsigned int v986 = 16 * __srca;
                  int v319 = 1;
                  char v320 = 1;
                  unsigned int v321 = 1;
                  unsigned int v322 = 1;
                  uint64_t v978 = *(void *)v1104;
                  int v1025 = v294;
                  uint64_t v974 = v310;
                  int v973 = v313;
                  uint64_t v972 = v317;
LABEL_529:
                  v314 += __srca;
                  if (v314 != *(void *)&v307[v315 + 24] - v317)
                  {
                    int v344 = v319;
                    goto LABEL_598;
                  }
                  int v981 = v316;
                  uint64_t v977 = v318;
                  int v323 = v294;
                  if (v320) {
                    int v983 = (*(unsigned __int8 *)(v311 + 26) >> 5) & 1;
                  }
                  else {
                    LOBYTE(v983) = 0;
                  }
                  unint64_t v324 = sub_1CD3DD468((unsigned __int8 *)&v1077, v318, v174);
                  v1074 = (unsigned __int8 *)sub_1CB8E5DAC(v1008, v324, v325, v995, 0);
                  uint64_t v1075 = v326;
                  if ((_BYTE)v1074) {
                    uint64_t v327 = sub_1CB87E200((unsigned __int8 *)&v1074);
                  }
                  else {
                    uint64_t v327 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1074);
                  }
                  unint64_t v329 = v327;
                  int v294 = v323;
                  char v320 = v983;
                  if (v328 == 1)
                  {
                    char v320 = v983;
                    int v294 = v323;
                  }
                  LOBYTE(v316) = v981;
                  if (v329 > *(unsigned int *)(v1058 + 1448))
                  {
                    int v344 = v998 + 1;
                    uint64_t v303 = v978;
                    goto LABEL_598;
                  }
                  LOBYTE(v1071) = 0;
                  char v1073 = 0;
                  if (v294)
                  {
                    unsigned int v330 = (llvm::LLVMContext *)v986;
                  }
                  else
                  {
                    unsigned int v330 = (llvm::LLVMContext *)v986;
                    if ((_BYTE)v1074)
                    {
                      uint64_t v331 = *(void *)(v1058 + 8);
                      if (*(void *)(v331 + 8 * v1074 + 96))
                      {
                        if ((*(unsigned int (**)(uint64_t, void))(*(void *)v331 + 208))(v331, v971))
                        {
                          if (llvm::TargetLoweringBase::allowsMemoryAccess(*(void *)(v1058 + 8), (uint64_t)v1008, v969, (uint64_t)v1074, v1075, *(void *)(v978 + 96), (uint64_t)&v1071))
                          {
                            if ((_BYTE)v1071)
                            {
                              unsigned __int8 v342 = llvm::TargetLoweringBase::allowsMemoryAccess(*(void *)(v1058 + 8), (uint64_t)v1008, v969, (uint64_t)v1074, v1075, *(void *)(v308 + 96), (uint64_t)&v1073);
                              if ((v342 & (v1073 != 0)) != 0) {
                                unsigned int v321 = v998 + 2;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  if ((int)v330 > 63)
                  {
                    if (v330 == 64)
                    {
                      uint64_t v332 = 6;
                      goto LABEL_553;
                    }
                    if (v330 != 128) {
                      goto LABEL_578;
                    }
                    uint64_t v332 = 7;
LABEL_553:
                    v1074 = (unsigned __int8 *)v332;
                    uint64_t v1075 = 0;
                    unint64_t v333 = *(void *)(v1058 + 8);
                    if (*(void *)(v333 + 8 * v332 + 96))
                    {
                      int v334 = (*(uint64_t (**)(unint64_t, void, uint64_t, void, void))(*(void *)v333 + 208))(v333, v971, v332, 0, *(void *)(*(void *)v1058 + 40));
                      unint64_t v333 = *(void *)(v1058 + 8);
                      uint64_t v332 = (uint64_t)v1074;
                      uint64_t v335 = v1075;
                      if (v334)
                      {
                        uint64_t v303 = v978;
                        int v336 = llvm::TargetLoweringBase::allowsMemoryAccess(v333, (uint64_t)v1008, v969, (uint64_t)v1074, v1075, *(void *)(v978 + 96), (uint64_t)&v1071);
                        unint64_t v333 = *(void *)(v1058 + 8);
                        uint64_t v332 = (uint64_t)v1074;
                        uint64_t v335 = v1075;
                        if (!v336 || !(_BYTE)v1071)
                        {
                          uint64_t v337 = v1008;
                          goto LABEL_561;
                        }
                        if (llvm::TargetLoweringBase::allowsMemoryAccess(v333, (uint64_t)v1008, v969, (uint64_t)v1074, v1075, *(void *)(v308 + 96), (uint64_t)&v1073)&& v1073)
                        {
                          int v316 = 0;
                          unsigned int v322 = v998 + 2;
                          goto LABEL_582;
                        }
                        unint64_t v333 = *(void *)(v1058 + 8);
                        uint64_t v332 = (uint64_t)v1074;
                        uint64_t v335 = v1075;
                      }
                    }
                    else
                    {
                      uint64_t v335 = 0;
                    }
                    uint64_t v337 = v1008;
                    goto LABEL_560;
                  }
                  switch(v330)
                  {
                    case 0x20:
                      uint64_t v332 = 5;
                      goto LABEL_553;
                    case 0x10:
                      uint64_t v332 = 4;
                      goto LABEL_553;
                    case 8:
                      uint64_t v332 = 3;
                      goto LABEL_553;
                  }
LABEL_578:
                  uint64_t v343 = llvm::IntegerType::get(v1008, v330);
                  uint64_t v337 = v1008;
                  uint64_t v335 = v343;
                  uint64_t v332 = 0;
                  v1074 = 0;
                  uint64_t v1075 = v343;
                  unint64_t v333 = *(void *)(v1058 + 8);
LABEL_560:
                  uint64_t v303 = v978;
LABEL_561:
                  llvm::TargetLoweringBase::getTypeConversion(v333, v337, v332, v335, (uint64_t)v1078);
                  if (LOBYTE(v1078[0]) == 1)
                  {
                    llvm::TargetLoweringBase::getTypeConversion(*(void *)(v1058 + 8), v337, (BOOL)v1074, v1075, (uint64_t)v1078);
                    char v174 = (char)v1078[1];
                    if (!LOBYTE(v1078[1])) {
                      goto LABEL_586;
                    }
                    uint64_t v338 = *(void *)(v1058 + 8);
                    int v294 = v1025;
                    int v316 = v981;
                    char v320 = v983;
                    if (*(void *)(v338 + 8 * LOBYTE(v1078[1]) + 96))
                    {
                      uint64_t v303 = v978;
                      if ((_BYTE)v1074
                        && !*(unsigned char *)(v338 + 179 * LOBYTE(v1078[1]) + v1074 + 137754))
                      {
                        unsigned int v339 = LOBYTE(v1078[1]);
                        if (!(*(unsigned int (**)(uint64_t, void))(*(void *)v338 + 208))(v338, v971)) {
                          break;
                        }
                        uint64_t v340 = v977;
                        if (!(_BYTE)v1074
                          || (uint64_t v341 = *(void *)(v1058 + 8),
                              *(unsigned __int16 *)(v341 + 358 * v339 + 2 * v1074 + 73672) > 0xFu))
                        {
                          int v294 = v1025;
                          int v316 = v981;
                          char v320 = v983;
LABEL_590:
                          if (v998 + 2 >= (unint64_t)LODWORD(__dst[1]))
                          {
                            int v344 = v998 + 1;
LABEL_598:
                            unsigned __int8 v347 = 63 - __clz(((1 << v305) | v306) & -((1 << v305) | v306));
                            if (v321 > v322) {
                              int v348 = v1048 ^ 1;
                            }
                            else {
                              int v348 = 0;
                            }
                            if (v321 <= v322) {
                              unsigned int v349 = v322;
                            }
                            else {
                              unsigned int v349 = v321;
                            }
                            if (v344 + 1 < __nc) {
                              unsigned int v350 = v344 + 1;
                            }
                            else {
                              unsigned int v350 = __nc;
                            }
                            if (v350 >= v349) {
                              uint64_t v351 = v349;
                            }
                            else {
                              uint64_t v351 = v350;
                            }
                            uint64_t v352 = (1 << *(unsigned char *)(*(void *)(v308 + 96) + 34)) | *(void *)(*(void *)(v308 + 96)
                                                                                                  + 8);
                            unsigned __int8 v353 = 63 - __clz(v352 & -v352);
                            if (v351 <= 1)
                            {
                              unsigned int v354 = __dst[1];
                              uint64_t v355 = v1104;
                              uint64_t v4 = (unsigned __int8 *)v1058;
                              if (LODWORD(__dst[1]) < 2)
                              {
                                uint64_t v358 = 1;
                                LODWORD(v351) = 1;
                                uint64_t v3 = v990;
                              }
                              else
                              {
                                uint64_t v356 = (char *)__dst[0] + 16;
                                uint64_t v357 = v1104 + 16;
                                uint64_t v358 = 1;
                                uint64_t v3 = v990;
                                while (1)
                                {
                                  uint64_t v359 = (1 << *(unsigned char *)(*(void *)(*(void *)v356 + 96) + 34)) | *(void *)(*(void *)(*(void *)v356 + 96) + 8);
                                  if ((63 - __clz(v359 & -v359)) > v353) {
                                    break;
                                  }
                                  uint64_t v360 = (1 << *(unsigned char *)(*(void *)(*(void *)v357 + 96) + 34)) | *(void *)(*(void *)(*(void *)v357 + 96) + 8);
                                  if ((63 - __clz(v360 & -v360)) > v347) {
                                    break;
                                  }
                                  ++v358;
                                  v356 += 16;
                                  v357 += 16;
                                  if (LODWORD(__dst[1]) == v358)
                                  {
                                    LODWORD(v351) = __dst[1];
                                    uint64_t v358 = (LODWORD(__dst[1]) - 2) + 2;
                                    goto LABEL_626;
                                  }
                                }
                                LODWORD(v351) = v358;
                              }
LABEL_626:
                              uint64_t v368 = 16 * DWORD2(v1104) - 16 * v358;
                              int v292 = v984;
                              unsigned int v365 = __nc;
                              if (DWORD2(v1104) == v351)
                              {
                                uint64_t v369 = v1104;
                              }
                              else
                              {
                                memmove((void *)v1104, (const void *)(v1104 + 16 * v358), 16 * DWORD2(v1104) - 16 * v358);
                                uint64_t v369 = v1104;
                                unsigned int v354 = __dst[1];
                              }
                              DWORD2(v1104) = (unint64_t)(v355 + v368 - v369) >> 4;
                              uint64_t v370 = __dst[0];
                              int v173 = (char *)__dst[0] + 16 * v358;
                              uint64_t v371 = 16 * v354 - 16 * v358;
                              if (v354 != v351) {
                                memmove(__dst[0], v173, 16 * v354 - 16 * v358);
                              }
                              uint64_t v230 = (void *)(((unint64_t)v370 + v371 - (unint64_t)__dst[0]) >> 4);
                              LODWORD(__dst[1]) = v230;
LABEL_632:
                              uint64_t v138 = v1001;
                              uint64_t v139 = (unsigned char *)&unk_1EBCF8000;
LABEL_633:
                              unsigned int v293 = v365 - v351;
                              if (v293 < 2 || v230 <= 1)
                              {
LABEL_715:
                                if (__dst[0] != &v1084) {
                                  free(__dst[0]);
                                }
                                LODWORD(v177) = DWORD2(v1104);
                                goto LABEL_718;
                              }
                              continue;
                            }
                            char v361 = v320;
                            int v1026 = v294;
                            uint64_t v4 = (unsigned __int8 *)v1058;
                            if (!sub_1CCF638A8(v1058, (uint64_t **)&v1104, v351, v1005))
                            {
                              uint64_t v363 = v1104;
                              uint64_t v364 = 16 * DWORD2(v1104) - 16 * v351;
                              if (DWORD2(v1104) != v351) {
                                memmove((void *)v1104, (const void *)(v1104 + 16 * v351), 16 * DWORD2(v1104) - 16 * v351);
                              }
                              uint64_t v3 = v990;
                              int v292 = v984;
                              unsigned int v365 = __nc;
                              DWORD2(v1104) = (unint64_t)(v363 + v364 - v1104) >> 4;
                              int v366 = __dst[0];
                              int v173 = (char *)__dst[0] + 16 * v351;
                              uint64_t v367 = 16 * LODWORD(__dst[1]) - 16 * v351;
                              if (LODWORD(__dst[1]) != v351) {
                                memmove(__dst[0], v173, 16 * LODWORD(__dst[1]) - 16 * v351);
                              }
                              uint64_t v230 = (void *)(((unint64_t)v366 + v367 - (unint64_t)__dst[0]) >> 4);
                              LODWORD(__dst[1]) = v230;
                              goto LABEL_632;
                            }
                            uint64_t v979 = v303;
                            if (v348)
                            {
                              unint64_t v372 = sub_1CD3DD468((unsigned __int8 *)&v1077, v362, v174);
                              v996 = (llvm *)sub_1CB8E5DAC(v1008, v372, v373, (int)v351 * v975, 0);
                              uint64_t v999 = v374;
                              goto LABEL_649;
                            }
                            uint64_t v375 = (llvm::LLVMContext *)(v351 * v970);
                            if ((int)v375 > 63)
                            {
                              if (v375 == 64)
                              {
                                uint64_t v376 = 6;
                                goto LABEL_648;
                              }
                              if (v375 != 128) {
                                goto LABEL_707;
                              }
                              uint64_t v999 = 0;
                              uint64_t v448 = 7;
LABEL_703:
                              v996 = (llvm *)v448;
                            }
                            else
                            {
                              switch(v375)
                              {
                                case 0x20:
                                  uint64_t v376 = 5;
                                  goto LABEL_648;
                                case 0x10:
                                  uint64_t v376 = 4;
LABEL_648:
                                  v996 = (llvm *)v376;
                                  uint64_t v999 = 0;
LABEL_649:
                                  uint64_t v377 = *(void *)__dst[0];
                                  uint64_t v378 = *(unsigned __int8 **)(*(void *)__dst[0] + 64);
                                  v1074 = v378;
                                  if (v378) {
                                    llvm::MetadataTracking::track((uint64_t)&v1074, v378, 2);
                                  }
                                  LODWORD(v1075) = *(_DWORD *)(v377 + 60);
                                  uint64_t v379 = *(void *)v1104;
                                  int v380 = *(unsigned __int8 **)(*(void *)v1104 + 64);
                                  v1071 = v380;
                                  if (v380) {
                                    llvm::MetadataTracking::track((uint64_t)&v1071, v380, 2);
                                  }
                                  int v1072 = *(_DWORD *)(v379 + 60);
                                  int v381 = sub_1CCF64D08((void **)v4, (uint64_t **)&v1104, v351);
                                  int v987 = v382;
                                  uint64_t v993 = (uint64_t)v381;
                                  sub_1CCEF0788((uint64_t)v4, (uint64_t)v381);
                                  if (v361) {
                                    __int16 v383 = 16;
                                  }
                                  else {
                                    __int16 v383 = 0;
                                  }
                                  if (v1013) {
                                    __int16 v384 = v383 | 8;
                                  }
                                  else {
                                    __int16 v384 = v383;
                                  }
                                  unint64_t v385 = v968 & 0xFFFFFFFF00000000;
                                  if (v348 & 1 | ((v316 & 1) == 0))
                                  {
                                    uint64_t v386 = *(void *)v4;
                                    unint64_t v387 = *(uint64_t **)(v308 + 32);
                                    uint64_t v388 = *v387;
                                    uint64_t v389 = v387[1];
                                    uint64_t v390 = v387[5];
                                    uint64_t v391 = v387[6];
                                    uint64_t v392 = *(void *)(v308 + 96);
                                    *(_OWORD *)v1102 = *(_OWORD *)v392;
                                    v1103[0] = *(void *)(v392 + 16);
                                    *(_OWORD *)v1078 = 0u;
                                    long long v1079 = 0u;
                                    unint64_t v965 = v965 & 0xFFFFFFFFFFFF0000 | v353 | 0x100;
                                    int v393 = sub_1CD7F00F8(v386, (uint64_t)v996, v999, (uint64_t)&v1074, v388, v389, v390, v391, (long long *)v1102, v965, SHIDWORD(v965), v384, (long long *)v1078, 0);
                                    unsigned int v395 = v394;
                                    uint64_t v396 = v393;
                                    uint64_t v968 = v394 | v385;
                                    unint64_t v397 = v967;
                                    if (v1026)
                                    {
                                      unsigned int v398 = sub_1CD7EC970(*(void *)v4, 8 * (__srca & 0xFFFFFFF), (uint64_t)v996, v999, (const llvm::APInt *)&v1074, 1);
                                      uint64_t v401 = *(void *)(*(void *)v4 + 832);
                                      if (v401) {
                                        LOWORD(v401) = *(_WORD *)(v401 + 8);
                                      }
                                      uint64_t v396 = sub_1CCFDED5C(*(void *)v4, 178, (const llvm::APInt *)&v1074, v996, v999, (uint64_t)v393, v968, v400, (uint64_t)v398, v399, v401);
                                      unsigned int v395 = v402 | v385;
                                    }
                                    uint64_t v403 = *(void *)v4;
                                    uint64_t v404 = (uint64_t)v396;
                                    int v405 = (uint64_t *)sub_1CD3E3954(v979);
                                    uint64_t v406 = *v405;
                                    uint64_t v407 = v405[1];
                                    int v408 = *(long long **)(v979 + 96);
                                    long long v1067 = *v408;
                                    uint64_t v1068 = *((void *)v408 + 2);
                                    *(_OWORD *)v1078 = 0u;
                                    long long v1079 = 0u;
                                    uint64_t v410 = sub_1CD7FB188(v403, v993, v987, (uint64_t)&v1071, v404, v395, v406, v407, (uint64_t)&v1067, v347, 0, v1011, (long long *)v1078);
                                  }
                                  else
                                  {
                                    llvm::TargetLoweringBase::getTypeConversion(*((void *)v4 + 1), *(llvm::LLVMContext **)(*(void *)v4 + 56), (BOOL)v996, v999, (uint64_t)v1078);
                                    uint64_t v411 = v1078[1];
                                    uint64_t v412 = v1079;
                                    uint64_t v413 = *(void *)v4;
                                    uint64_t v414 = *(uint64_t **)(v308 + 32);
                                    uint64_t v415 = *v414;
                                    uint64_t v416 = v414[1];
                                    uint64_t v418 = v414[5];
                                    uint64_t v417 = v414[6];
                                    uint64_t v419 = *(void *)(v308 + 96);
                                    long long v1065 = *(_OWORD *)v419;
                                    uint64_t v1066 = *(void *)(v419 + 16);
                                    *(_OWORD *)v1078 = 0u;
                                    long long v1079 = 0u;
                                    unint64_t v966 = v966 & 0xFFFFFFFFFFFF0000 | v353 | 0x100;
                                    int v393 = sub_1CD7FAEE8(v413, 1, (uint64_t)&v1074, (uint64_t)v411, v412, v415, v416, v420, v418, v417, &v1065, (uint64_t)v996, v999, v966, SHIDWORD(v966), v384, (long long *)v1078);
                                    unint64_t v422 = v421 | v385;
                                    uint64_t v423 = *(void *)v4;
                                    uint64_t v424 = (uint64_t *)sub_1CD3E3954(v979);
                                    uint64_t v425 = *v424;
                                    uint64_t v426 = v424[1];
                                    uint64_t v427 = *(long long **)(v979 + 96);
                                    long long v1063 = *v427;
                                    uint64_t v1064 = *((void *)v427 + 2);
                                    uint64_t v428 = (1 << *((unsigned char *)v427 + 34)) | *((void *)v427 + 1);
                                    LOWORD(v427) = *((_WORD *)v427 + 16);
                                    *(_OWORD *)v1078 = 0u;
                                    long long v1079 = 0u;
                                    uint64_t v964 = (63 - __clz(v428 & -v428));
                                    uint64_t v968 = v422;
                                    uint64_t v410 = sub_1CD7FB71C(v423, v993, v987, (uint64_t)&v1071, (uint64_t)v393, v422, v425, v426, (uint64_t)&v1063, (uint64_t)v996, v999, v964, SHIDWORD(v964), (__int16)v427, (long long *)v1078);
                                    unint64_t v397 = v967;
                                  }
                                  uint64_t v429 = 0;
                                  unint64_t v430 = v397 & 0xFFFFFFFF00000000;
                                  uint64_t v431 = v409;
                                  uint64_t v432 = v351;
                                  do
                                  {
                                    sub_1CD800DA0(*(void *)v4, *(void *)((char *)__dst[0] + v429), 1, (uint64_t)v393, 1);
                                    v429 += 16;
                                    --v432;
                                  }
                                  while (v432);
                                  uint64_t v433 = 0;
                                  unsigned int v434 = (void *)(v431 | v430);
                                  uint64_t v435 = v351;
                                  do
                                  {
                                    uint64_t v436 = *(void *)(v1104 + v433);
                                    uint64_t v437 = *(void *)(*(void *)(v436 + 32) + 40);
                                    v1078[0] = v410;
                                    v1078[1] = v434;
                                    sub_1CCEF083C((uint64_t *)v4, v436, (uint64_t *)v1078, 1, 1);
                                    if (!*(void *)(v437 + 48)) {
                                      sub_1CCEF0930((uint64_t *)v4, v437);
                                    }
                                    v433 += 16;
                                    --v435;
                                  }
                                  while (v435);
                                  uint64_t v438 = v1104;
                                  uint64_t v439 = 16 * DWORD2(v1104) - 16 * v351;
                                  if (DWORD2(v1104) != v351) {
                                    memmove((void *)v1104, (const void *)(v1104 + 16 * v351), 16 * DWORD2(v1104) - 16 * v351);
                                  }
                                  uint64_t v3 = v990;
                                  int v292 = v984;
                                  unsigned int v365 = __nc;
                                  DWORD2(v1104) = (unint64_t)(v438 + v439 - v1104) >> 4;
                                  uint64_t v440 = __dst[0];
                                  int v173 = (char *)__dst[0] + 16 * v351;
                                  uint64_t v441 = 16 * LODWORD(__dst[1]) - 16 * v351;
                                  unint64_t v967 = (unint64_t)v434;
                                  if (LODWORD(__dst[1]) != v351) {
                                    memmove(__dst[0], v173, 16 * LODWORD(__dst[1]) - 16 * v351);
                                  }
                                  LODWORD(__dst[1]) = ((unint64_t)v440 + v441 - (unint64_t)__dst[0]) >> 4;
                                  uint64_t v138 = v1001;
                                  uint64_t v139 = (unsigned char *)&unk_1EBCF8000;
                                  if (v1071)
                                  {
                                    int v442 = *v1071;
                                    if ((v442 - 4) > 0x1E)
                                    {
                                      if ((v442 - 3) >= 0xFFFFFFFE) {
                                        int v444 = v1071;
                                      }
                                      else {
                                        int v444 = 0;
                                      }
                                      if ((v442 - 3) >= 0xFFFFFFFE)
                                      {
                                        unint64_t v445 = (unint64_t)(v444 + 8);
                                        goto LABEL_690;
                                      }
                                      if (v442 == 3) {
                                        *((void *)v1071 + 1) = 0;
                                      }
                                    }
                                    else if ((v1071[1] & 0x7F) == 2 || *((_DWORD *)v1071 + 3))
                                    {
                                      uint64_t v449 = *((void *)v1071 + 2);
                                      if ((v449 & 4) != 0)
                                      {
                                        unint64_t v445 = v449 & 0xFFFFFFFFFFFFFFF8;
                                        if (v445)
                                        {
LABEL_690:
                                          v1078[0] = &v1071;
                                          sub_1CC5FA668(v445 + 16, v1078);
                                        }
                                      }
                                    }
                                  }
                                  if (v1074)
                                  {
                                    int v443 = *v1074;
                                    if ((v443 - 4) > 0x1E)
                                    {
                                      if ((v443 - 3) >= 0xFFFFFFFE) {
                                        uint64_t v446 = v1074;
                                      }
                                      else {
                                        uint64_t v446 = 0;
                                      }
                                      if ((v443 - 3) >= 0xFFFFFFFE)
                                      {
                                        unint64_t v447 = (unint64_t)(v446 + 8);
                                        goto LABEL_696;
                                      }
                                      if (v443 == 3) {
                                        *((void *)v1074 + 1) = 0;
                                      }
                                    }
                                    else if ((v1074[1] & 0x7F) == 2 || *((_DWORD *)v1074 + 3))
                                    {
                                      uint64_t v450 = *((void *)v1074 + 2);
                                      if ((v450 & 4) != 0)
                                      {
                                        unint64_t v447 = v450 & 0xFFFFFFFFFFFFFFF8;
                                        if (v447)
                                        {
LABEL_696:
                                          v1078[0] = &v1074;
                                          sub_1CC5FA668(v447 + 16, v1078);
                                        }
                                      }
                                    }
                                  }
                                  int v992 = 1;
                                  LODWORD(v230) = __dst[1];
                                  goto LABEL_633;
                                case 8:
                                  uint64_t v999 = 0;
                                  uint64_t v448 = 3;
                                  goto LABEL_703;
                              }
LABEL_707:
                              v996 = 0;
                              uint64_t v999 = llvm::IntegerType::get(v1008, v375);
                            }
                            uint64_t v4 = (unsigned __int8 *)v1058;
                            goto LABEL_649;
                          }
                          int v344 = v340;
                          uint64_t v307 = (char *)__dst[0];
                          uint64_t v311 = *(void *)((char *)__dst[0] + v315 + 32);
                          uint64_t v345 = *(void *)(v311 + 32);
                          if (*(void *)v345 != v974) {
                            goto LABEL_598;
                          }
                          int v319 = v998 + 1;
                          v315 += 16;
                          v986 += v970;
                          char v174 = v995 + v975;
                          v995 += v975;
                          uint64_t v318 = v340 + 1;
                          ++v998;
                          BOOL v13 = *(_DWORD *)(v345 + 8) == v973;
                          uint64_t v317 = v972;
                          if (!v13) {
                            goto LABEL_598;
                          }
                          goto LABEL_529;
                        }
                        if (!llvm::TargetLoweringBase::allowsMemoryAccess(v341, (uint64_t)v1008, v969, (uint64_t)v1074, v1075, *(void *)(v978 + 96), (uint64_t)&v1071)|| !(_BYTE)v1071)
                        {
LABEL_586:
                          uint64_t v303 = v978;
                          break;
                        }
                        unsigned __int8 v346 = llvm::TargetLoweringBase::allowsMemoryAccess(*(void *)(v1058 + 8), (uint64_t)v1008, v969, (uint64_t)v1074, v1075, *(void *)(v308 + 96), (uint64_t)&v1073);
                        if ((v346 & (v1073 != 0)) != 0) {
                          unsigned int v322 = v998 + 2;
                        }
                        int v316 = v346 & (v1073 != 0) | v981;
LABEL_582:
                        uint64_t v303 = v978;
                        int v294 = v1025;
LABEL_588:
                        char v320 = v983;
                      }
                    }
                    else
                    {
                      uint64_t v303 = v978;
                    }
                    uint64_t v340 = v977;
                    goto LABEL_590;
                  }
                  break;
                }
                int v294 = v1025;
                int v316 = v981;
                goto LABEL_588;
              }
              int v229 = v1102[0];
            }
            else
            {
              int v229 = 0;
              long long v1094 = *(_OWORD *)v1078;
              *(_OWORD *)v1095 = v1079;
              long long v1096 = v1080;
              LOBYTE(v1097) = v1081;
            }
            if (LODWORD(__dst[1]) >= (unint64_t)HIDWORD(__dst[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v230 = (char *)__dst[0] + 16 * LODWORD(__dst[1]);
            *uint64_t v230 = k;
            v230[1] = v229;
            LODWORD(v230) = ++LODWORD(__dst[1]);
            if (++v227 == v222) {
              goto LABEL_511;
            }
          }
        }
        uint64_t v989 = v3;
        v1000 = v138;
        if (v1019 == 2)
        {
          size_t __na = v1069;
          *(_OWORD *)__dst = v1070;
          long long __src = *(void **)(*(void *)v4 + 56);
          uint64_t v195 = *(void *)(**(void **)(*(void *)v4 + 40) + 40);
          if ((_BYTE)v1070)
          {
            if (v1070 - 15 >= 0x9C) {
              goto LABEL_345;
            }
LABEL_721:
            int v196 = sub_1CD3DB440((llvm::EVT *)__dst, v173);
            uint64_t v179 = (char *)v1104;
          }
          else
          {
            if ((*(_DWORD *)(*((void *)&v1070 + 1) + 8) & 0xFE) == 0x12) {
              goto LABEL_721;
            }
LABEL_345:
            int v196 = 1;
          }
          int v992 = 0;
          v1023 = (llvm::IntervalMapImpl::Path *)(v195 + 272);
          while (2)
          {
            unsigned int v197 = v190;
            int v198 = 0;
            uint64_t v199 = v197;
            uint64_t v200 = *(void *)v179;
            uint64_t v201 = *(void *)(*(void *)v179 + 96);
            uint64_t v202 = *(unsigned int *)(v201 + 16);
            LODWORD(v203) = 1;
            uint64_t v204 = (1 << *(unsigned char *)(v201 + 34)) | *(void *)(v201 + 8);
            uint64_t v205 = 1 << (63 - __clz(v204 & -v204));
            unsigned int v206 = v196;
            do
            {
              unsigned int v207 = *(llvm::LLVMContext **)(*(void *)v1058 + 56);
              unint64_t v208 = sub_1CD3DD468((unsigned __int8 *)__dst, (uint64_t)v173, v174);
              *(void *)&long long v1094 = sub_1CB8E5DAC(v207, v208, v209, v206, 0);
              *((void *)&v1094 + 1) = v210;
              LOBYTE(v1078[0]) = 0;
              if ((_BYTE)v1094) {
                uint64_t v211 = sub_1CB87E200((unsigned __int8 *)&v1094);
              }
              else {
                uint64_t v211 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1094);
              }
              unint64_t v212 = v211;
              if (v173 == 1) {
              if (v212 > *(unsigned int *)(v1058 + 1448))
              }
                break;
              ++v198;
              char v174 = v1094;
              if ((_BYTE)v1094)
              {
                uint64_t v213 = *(void *)(v1058 + 8);
                if (*(void *)(v213 + 8 * v1094 + 96))
                {
                  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v213 + 208))(v213, v202))
                  {
                    unsigned __int8 v214 = llvm::TargetLoweringBase::allowsMemoryAccess(*(void *)(v1058 + 8), (uint64_t)__src, (uint64_t)v1023, v1094, *((uint64_t *)&v1094 + 1), *(void *)(v200 + 96), (uint64_t)v1078);
                    if ((v214 & (LOBYTE(v1078[0]) != 0)) != 0) {
                      LODWORD(v203) = v198;
                    }
                  }
                }
              }
              v206 += v196;
            }
            while (v199 != v198);
            if (v203 > 1)
            {
              if (sub_1CCF638A8(v1058, (uint64_t **)&v1104, v203, __na))
              {
                int v220 = sub_1CCF63CDC((uint64_t *)v1058, (uint64_t **)&v1104, (llvm *)__dst[0], (uint64_t)__dst[1], v203, 0, 1, 0);
                char v216 = (char *)v1104;
                int v173 = (char *)(v1104 + 16 * v203);
                size_t v221 = 16 * DWORD2(v1104) - 16 * v203;
                uint64_t v138 = v1000;
                uint64_t v139 = (unsigned char *)&unk_1EBCF8000;
                v992 |= v220;
                if (DWORD2(v1104) == v203) {
                  goto LABEL_372;
                }
              }
              else
              {
                char v216 = (char *)v1104;
                int v173 = (char *)(v1104 + 16 * v203);
                size_t v221 = 16 * DWORD2(v1104) - 16 * v203;
                uint64_t v138 = v1000;
                uint64_t v139 = (unsigned char *)&unk_1EBCF8000;
                if (DWORD2(v1104) == v203) {
                  goto LABEL_372;
                }
              }
            }
            else
            {
              unint64_t v215 = v205;
              char v216 = (char *)v1104;
              uint64_t v217 = 16;
              uint64_t v203 = 1;
              uint64_t v138 = v1000;
              uint64_t v139 = (unsigned char *)&unk_1EBCF8000;
              while (1)
              {
                uint64_t v218 = (1 << *(unsigned char *)(*(void *)(*(void *)(v1104 + v217) + 96) + 34)) | *(void *)(*(void *)(*(void *)(v1104 + v217) + 96) + 8);
                if (!(v215 >> (63 - __clz(v218 & -v218)))) {
                  break;
                }
                ++v203;
                v217 += 16;
                if (v199 == v203)
                {
                  uint64_t v219 = v199;
                  LODWORD(v203) = v199;
                  goto LABEL_371;
                }
              }
              uint64_t v219 = v203;
LABEL_371:
              int v173 = (char *)(v1104 + 16 * v219);
              size_t v221 = 16 * DWORD2(v1104) - 16 * v219;
              if (DWORD2(v1104) == v203)
              {
LABEL_372:
                uint64_t v179 = v216;
LABEL_373:
                unint64_t v177 = (unint64_t)(&v216[v221] - v179) >> 4;
                DWORD2(v1104) = v177;
                LODWORD(v190) = v199 - v203;
                if ((v199 - v203) <= 1)
                {
                  uint64_t v3 = v989;
                  uint64_t v4 = (unsigned __int8 *)v1058;
                  goto LABEL_509;
                }
                continue;
              }
            }
            break;
          }
          memmove(v216, v173, v221);
          uint64_t v179 = (char *)v1104;
          goto LABEL_373;
        }
        uint64_t v982 = v1069;
        long long v1094 = v1070;
        unsigned int v231 = *(llvm::IntegerType **)(*(void *)v4 + 56);
        uint64_t v232 = *(void *)(**(void **)(*(void *)v4 + 40) + 40);
        int v234 = sub_1CB896FB8((unsigned __int8 *)&v1094);
        if (v233 == 1) {
        if ((_BYTE)v1094)
        }
        {
          if (v1094 - 15 < 0x9C) {
            goto LABEL_725;
          }
        }
        else if ((*(_DWORD *)(*((void *)&v1094 + 1) + 8) & 0xFE) == 0x12)
        {
LABEL_725:
          int v985 = sub_1CD3DB440((llvm::EVT *)&v1094, v233);
          goto LABEL_399;
        }
        int v985 = 1;
LABEL_399:
        int v992 = 0;
        uint64_t v980 = v232 + 272;
        int __srcb = 8 * v234;
        uint64_t v235 = (unsigned char *)v1104;
        do
        {
          uint64_t v236 = 0;
          char v1003 = 0;
          int v237 = 0;
          uint64_t v997 = *(void *)v235;
          uint64_t v238 = *(void *)(*(void *)v235 + 96);
          unsigned int v1024 = *(_DWORD *)(v238 + 16);
          uint64_t v239 = (1 << *(unsigned char *)(v238 + 34)) | *(void *)(v238 + 8);
          unsigned int v1009 = 1;
          uint64_t v994 = 1 << (63 - __clz(v239 & -v239));
          size_t __nb = v190;
          unsigned int v1006 = 1;
          unsigned int v240 = v190;
          do
          {
            int v241 = 0;
            uint64_t v242 = *(void *)(*(void *)(v1104 + 16 * v236) + 32);
            uint64_t v243 = *(void *)(v242 + 40);
            uint64_t v244 = *(unsigned int *)(v242 + 48);
            unsigned int v245 = *(unsigned __int16 *)(v243 + 24);
            if (v245 > 0x22)
            {
              if (v245 != 36)
              {
                if (v245 != 35) {
                  goto LABEL_426;
                }
LABEL_407:
                uint64_t v246 = *(void *)(v243 + 80);
                uint64_t v247 = *(unsigned int *)(v246 + 32);
                if (v247 <= 0x40)
                {
                  uint64_t v248 = *(void *)(v246 + 24);
                  goto LABEL_416;
                }
                int v253 = 0;
                int64_t v254 = (unint64_t)(v247 + 63) >> 6;
                do
                {
                  BOOL v734 = v254-- < 1;
                  if (v734) {
                    break;
                  }
                  unint64_t v255 = *(void *)(*(void *)(v246 + 24) + 8 * v254);
                  v253 += __clz(v255);
                }
                while (!v255);
                goto LABEL_420;
              }
            }
            else
            {
              if (v245 == 11) {
                goto LABEL_407;
              }
              if (v245 != 12) {
                goto LABEL_426;
              }
            }
            uint64_t v249 = *(void *)(v243 + 80);
            unsigned int v250 = *(unsigned __int8 *)(v249 + 16);
            if (v249) {
              BOOL v251 = v250 == 16;
            }
            else {
              BOOL v251 = 0;
            }
            if (v251)
            {
              uint64_t v247 = *(unsigned int *)(v249 + 32);
              if (v247 <= 0x40)
              {
                uint64_t v248 = *(void *)(v249 + 24);
LABEL_416:
                BOOL v252 = v248 == 0;
LABEL_423:
                int v241 = v252;
                goto LABEL_426;
              }
              int v253 = 0;
              int64_t v281 = (unint64_t)(v247 + 63) >> 6;
              do
              {
                BOOL v734 = v281-- < 1;
                if (v734) {
                  break;
                }
                unint64_t v282 = *(void *)(*(void *)(v249 + 24) + 8 * v281);
                v253 += __clz(v282);
              }
              while (!v282);
LABEL_420:
              int v256 = v247 | 0xFFFFFFC0;
              if ((v247 & 0x3F) == 0) {
                int v256 = 0;
              }
              BOOL v252 = v253 + v256 == v247;
              goto LABEL_423;
            }
            if (v249 && v250 == 17) {
              int v241 = sub_1CB844168(v249, 0.0);
            }
            else {
              int v241 = v250 <= 0x14 && (0x1C2000u >> v250) & 1;
            }
LABEL_426:
            if (((v190 == v240) & v241 & v237) != 0) {
              LODWORD(v190) = v236;
            }
            int v257 = (llvm::LLVMContext *)(__srcb * ++v236);
            if ((int)v257 > 63)
            {
              if (v257 == 64)
              {
                uint64_t v258 = 6;
                goto LABEL_443;
              }
              if (v257 == 128)
              {
                uint64_t v258 = 7;
                goto LABEL_443;
              }
            }
            else
            {
              switch(v257)
              {
                case 0x20:
                  uint64_t v258 = 5;
LABEL_443:
                  v1078[0] = (void *)v258;
                  v1078[1] = 0;
                  LOBYTE(v1102[0]) = 0;
                  uint64_t v260 = sub_1CB87E200((unsigned __int8 *)v1078);
                  goto LABEL_444;
                case 0x10:
                  uint64_t v258 = 4;
                  goto LABEL_443;
                case 8:
                  uint64_t v258 = 3;
                  goto LABEL_443;
              }
            }
            unint64_t v280 = (void *)llvm::IntegerType::get(v231, v257);
            v1078[0] = 0;
            v1078[1] = v280;
            LOBYTE(v1102[0]) = 0;
            uint64_t v260 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v1078);
LABEL_444:
            unint64_t v262 = v260;
            if (v261 == 1) {
            if (v262 > *(unsigned int *)(v1058 + 1448))
            }
              break;
            uint64_t v263 = v1078[0];
            unint64_t v264 = *(void *)(v1058 + 8);
            if (LOBYTE(v1078[0]))
            {
              if (*(void *)(v264 + 8 * LOBYTE(v1078[0]) + 96))
              {
                int v265 = (*(uint64_t (**)(unint64_t, void, void *, void *, void))(*(void *)v264 + 208))(v264, v1024, v1078[0], v1078[1], *(void *)(*(void *)v1058 + 40));
                unint64_t v264 = *(void *)(v1058 + 8);
                uint64_t v263 = v1078[0];
                if (v265)
                {
                  if (llvm::TargetLoweringBase::allowsMemoryAccess(v264, (uint64_t)v231, v980, (uint64_t)v1078[0], (uint64_t)v1078[1], *(void *)(v997 + 96), (uint64_t)v1102)&& LOBYTE(v1102[0]))
                  {
                    char v1003 = 0;
                    unsigned int v269 = v236;
LABEL_463:
                    unsigned int v1009 = v269;
                    goto LABEL_464;
                  }
                  unint64_t v264 = *(void *)(v1058 + 8);
                  uint64_t v263 = v1078[0];
                }
              }
            }
            llvm::TargetLoweringBase::getTypeConversion(v264, v231, (BOOL)v263, (uint64_t)v1078[1], (uint64_t)__dst);
            if (LOBYTE(__dst[0]) == 1)
            {
              llvm::TargetLoweringBase::getTypeConversion(*(void *)(v1058 + 8), v231, *(void *)(*(void *)(v243 + 40) + 16 * v244), *(void *)(*(void *)(v243 + 40) + 16 * v244 + 8), (uint64_t)__dst);
              char v174 = (char)__dst[1];
              if (LOBYTE(__dst[1]))
              {
                uint64_t v267 = *(void *)(v1058 + 8);
                if (*(void *)(v267 + 8 * LOBYTE(__dst[1]) + 96))
                {
                  if (LOBYTE(v1078[0])
                    && !*(unsigned char *)(v267 + 179 * LOBYTE(__dst[1]) + LOBYTE(v1078[0]) + 137754)
                    && (*(unsigned int (**)(uint64_t, void))(*(void *)v267 + 208))(v267, v1024))
                  {
                    unsigned __int8 v268 = llvm::TargetLoweringBase::allowsMemoryAccess(*(void *)(v1058 + 8), (uint64_t)v231, v980, (uint64_t)v1078[0], (uint64_t)v1078[1], *(void *)(v997 + 96), (uint64_t)v1102);
                    v1003 |= v268 & (LOBYTE(v1102[0]) != 0);
                    if ((v268 & (LOBYTE(v1102[0]) != 0)) != 0) {
                      unsigned int v269 = v236;
                    }
                    else {
                      unsigned int v269 = v1009;
                    }
                    goto LABEL_463;
                  }
                }
              }
            }
LABEL_464:
            v237 |= v241 ^ 1;
            if (v237)
            {
              if (((*(unsigned int (**)(void, void, void, uint64_t, void))(**(void **)(v1058 + 8)
                                                                                            + 192))(*(void *)(v1058 + 8), v1094, *((void *)&v1094 + 1), v236, v1024) & v1015 & 1) != 0)goto LABEL_470;
            }
            else if ((v1048 & 1) == 0)
            {
LABEL_470:
              unint64_t v270 = sub_1CD3DD468((unsigned __int8 *)&v1094, v266, v174);
              unint64_t v272 = sub_1CB8E5DAC(v231, v270, v271, v985 * (int)v236, 0);
              uint64_t v274 = v272;
              if ((_BYTE)v272)
              {
                uint64_t v275 = v272;
                uint64_t v276 = *(void *)(v1058 + 8);
                if (*(void *)(v276 + 8 * v274 + 96))
                {
                  if ((_BYTE)v1094)
                  {
                    if (*(void *)(v276 + 8 * v1094 + 96))
                    {
                      uint64_t v277 = v273;
                      if ((*(unsigned int (**)(uint64_t, void, uint64_t, uint64_t, void))(*(void *)v276 + 208))(v276, v1024, v275, v273, *(void *)(*(void *)v1058 + 40)))
                      {
                        unsigned __int8 v278 = llvm::TargetLoweringBase::allowsMemoryAccess(*(void *)(v1058 + 8), (uint64_t)v231, v980, v275, v277, *(void *)(v997 + 96), (uint64_t)v1102);
                        unsigned int v279 = v1006;
                        if ((v278 & (LOBYTE(v1102[0]) != 0)) != 0) {
                          unsigned int v279 = v236;
                        }
                        unsigned int v1006 = v279;
                      }
                    }
                  }
                }
              }
            }
          }
          while (v236 != __nb);
          BOOL v283 = v1006 > v1009;
          char v284 = v283 & v1015;
          if ((v283 & v1015) != 0) {
            LODWORD(v285) = v1006;
          }
          else {
            LODWORD(v285) = v1009;
          }
          if (v285 > 1)
          {
            uint64_t v4 = (unsigned __int8 *)v1058;
            if (sub_1CCF638A8(v1058, (uint64_t **)&v1104, v285, v982)) {
              v992 |= sub_1CCF63CDC((uint64_t *)v1058, (uint64_t **)&v1104, (llvm *)v1094, *((uint64_t *)&v1094 + 1), v285, 1, v284 & 1, v1003 & (v284 ^ 1) & 1);
            }
            uint64_t v287 = (unsigned char *)v1104;
            int v173 = (char *)(v1104 + 16 * v285);
            size_t v291 = 16 * DWORD2(v1104) - 16 * v285;
            unsigned int v286 = v240;
            if (DWORD2(v1104) != v285) {
              goto LABEL_506;
            }
LABEL_502:
            uint64_t v235 = v287;
            goto LABEL_507;
          }
          if (v240 >= v190) {
            uint64_t v285 = v190;
          }
          else {
            uint64_t v285 = v240;
          }
          unsigned int v286 = v240;
          uint64_t v287 = (unsigned char *)v1104;
          uint64_t v4 = (unsigned __int8 *)v1058;
          if (v285 < 2)
          {
            LODWORD(v285) = 1;
          }
          else
          {
            uint64_t v288 = v1104 + 16;
            uint64_t v289 = 1;
            while (1)
            {
              uint64_t v290 = (1 << *(unsigned char *)(*(void *)(*(void *)v288 + 96) + 34)) | *(void *)(*(void *)(*(void *)v288 + 96)
                                                                                                 + 8);
              if (!((unint64_t)v994 >> (63 - __clz(v290 & -v290)))) {
                break;
              }
              ++v289;
              v288 += 16;
              if (v285 == v289) {
                goto LABEL_505;
              }
            }
            LODWORD(v285) = v289;
          }
LABEL_505:
          int v173 = (char *)(v1104 + 16 * v285);
          size_t v291 = 16 * DWORD2(v1104) - 16 * v285;
          if (DWORD2(v1104) == v285) {
            goto LABEL_502;
          }
LABEL_506:
          memmove(v287, v173, v291);
          uint64_t v235 = (unsigned char *)v1104;
LABEL_507:
          unint64_t v177 = (unint64_t)(&v287[v291] - v235) >> 4;
          DWORD2(v1104) = v177;
          LODWORD(v190) = v286 - v285;
        }
        while (v190 > 1);
        uint64_t v3 = v989;
        uint64_t v138 = v1000;
        uint64_t v139 = (unsigned char *)&unk_1EBCF8000;
LABEL_509:
        int v292 = v984;
LABEL_718:
        int v178 = v292 | v992;
      }
      while (v177 > 1);
LABEL_732:
      if ((llvm::IntegerType *)v1104 != v138) {
        free((void *)v1104);
      }
      if ((v178 & 1) == 0) {
        goto LABEL_737;
      }
      if (*(_WORD *)(v3 + 24) != 254) {
        return v3;
      }
    }
    if (v149 == 253)
    {
      int v1019 = 3;
      int v150 = 1;
      goto LABEL_258;
    }
    if (v149 != 151) {
      goto LABEL_737;
    }
    goto LABEL_256;
  }
LABEL_737:
  if ((sub_1CCF5D9D0((uint64_t *)v4, v3) & 1) != 0 || sub_1CCF5E6B4((uint64_t *)v4, v3)) {
    return v3;
  }
  int v456 = *(uint64_t **)(v3 + 32);
  uint64_t v457 = v456[5];
  int v458 = *(unsigned __int16 *)(v457 + 24);
  BOOL v459 = v458 == 36 || v458 == 12;
  if (v459 && v458 != 36 && *(_WORD *)(v3 + 24) == 254 && (*(_WORD *)(v3 + 26) & 0x780) == 0)
  {
    unint64_t v462 = *(void **)(v3 + 64);
    v1078[0] = v462;
    if (v462)
    {
      llvm::MetadataTracking::track((uint64_t)v1078, (unsigned __int8 *)v462, 2);
      int v456 = *(uint64_t **)(v3 + 32);
    }
    uint64_t v463 = v3;
    LODWORD(v1078[1]) = *(_DWORD *)(v3 + 60);
    uint64_t v464 = *v456;
    uint64_t v465 = v456[1];
    uint64_t v467 = v456[10];
    uint64_t v466 = v456[11];
    uint64_t v32 = 0;
    switch(**(unsigned char **)(v457 + 40))
    {
      case 0xA:
        if (v4[34] && !*(void *)(*((void *)v4 + 1) + 136)
          || v4[33]
          || (*(_WORD *)(*(void *)(v463 + 96) + 36) & 0xF00) != 0
          || (*(unsigned char *)(v463 + 26) & 8) != 0)
        {
          uint64_t v468 = *((void *)v4 + 1);
          if (!*(void *)(v468 + 136) || (*(unsigned __int8 *)(v468 + 6066) | 4) != 4) {
            goto LABEL_863;
          }
        }
        uint64_t v469 = *(void *)v4;
        uint64_t v470 = *(void *)(v457 + 80);
        uint64_t v472 = *(void **)(v470 + 32);
        uint64_t v471 = (llvm::detail::DoubleAPFloat *)(v470 + 32);
        if (v472 == &unk_1CFB2E344) {
          llvm::detail::DoubleAPFloat::bitcastToAPInt(v471, (llvm::APInt *)__dst);
        }
        else {
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v471, (uint64_t)__dst);
        }
        int v473 = __dst;
        if (LODWORD(__dst[1]) >= 0x41) {
          int v473 = (void **)__dst[0];
        }
        uint64_t v474 = *(unsigned int *)v473;
        uint64_t v475 = *(void **)(v457 + 64);
        v1102[0] = v475;
        if (v475) {
          llvm::MetadataTracking::track((uint64_t)v1102, (unsigned __int8 *)v475, 2);
        }
        LODWORD(v1102[1]) = *(_DWORD *)(v457 + 60);
        uint64_t v476 = v469;
        uint64_t v477 = v474;
        uint64_t v478 = 5;
        goto LABEL_1002;
      case 0xB:
        uint64_t v520 = *((void *)v4 + 1);
        if (!*(void *)(v520 + 144)
          || (v4[33] || (*(_WORD *)(*(void *)(v463 + 96) + 36) & 0xF00) != 0 || (*(unsigned char *)(v463 + 26) & 8) != 0)
          && (*(unsigned __int8 *)(v520 + 6456) | 4) != 4)
        {
          if ((*(_WORD *)(*(void *)(v463 + 96) + 36) & 0xF00) != 0
            || (*(unsigned char *)(v463 + 26) & 8) != 0
            || !*(void *)(v520 + 136)
            || (*(unsigned __int8 *)(v520 + 6066) | 4) != 4)
          {
LABEL_863:
            uint64_t v32 = 0;
            goto LABEL_864;
          }
          uint64_t v647 = *(void *)(v457 + 80);
          v649 = *(void **)(v647 + 32);
          v648 = (llvm::detail::DoubleAPFloat *)(v647 + 32);
          if (v649 == &unk_1CFB2E344) {
            llvm::detail::DoubleAPFloat::bitcastToAPInt(v648, (llvm::APInt *)__dst);
          }
          else {
            llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v648, (uint64_t)__dst);
          }
          if (LODWORD(__dst[1]) >= 0x41) {
            v650 = (void **)__dst[0];
          }
          else {
            v650 = __dst;
          }
          unint64_t v651 = (unint64_t)*v650;
          if (LODWORD(__dst[1]) >= 0x41 && __dst[0]) {
            MEMORY[0x1D25D9CB0]();
          }
          uint64_t v652 = *(void *)v1058;
          v653 = *(void **)(v457 + 64);
          __dst[0] = v653;
          if (v653) {
            llvm::MetadataTracking::track((uint64_t)__dst, (unsigned __int8 *)v653, 2);
          }
          LODWORD(__dst[1]) = *(_DWORD *)(v457 + 60);
          v654 = sub_1CD7EBF14(v652, v651, (const llvm::APInt *)__dst, (llvm *)5, 0, 0, 0);
          unsigned int v656 = v655;
          if (__dst[0])
          {
            int v657 = *(unsigned __int8 *)__dst[0];
            if ((v657 - 4) > 0x1E)
            {
              if ((v657 - 3) >= 0xFFFFFFFE) {
                v737 = __dst[0];
              }
              else {
                v737 = 0;
              }
              if ((v657 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v738 = (unint64_t)v737 + 8;
LABEL_1233:
                v1102[0] = __dst;
                sub_1CC5FA668(v738 + 16, v1102);
                goto LABEL_1119;
              }
              if (v657 == 3) {
                *((void *)__dst[0] + 1) = 0;
              }
            }
            else if ((*((unsigned char *)__dst[0] + 1) & 0x7F) == 2 || *((_DWORD *)__dst[0] + 3))
            {
              uint64_t v843 = *((void *)__dst[0] + 2);
              if ((v843 & 4) != 0)
              {
                unint64_t v738 = v843 & 0xFFFFFFFFFFFFFFF8;
                if (v738) {
                  goto LABEL_1233;
                }
              }
            }
          }
LABEL_1119:
          uint64_t v658 = *(void *)v1058;
          uint64_t v659 = HIDWORD(v651);
          v660 = *(void **)(v457 + 64);
          __dst[0] = v660;
          if (v660) {
            llvm::MetadataTracking::track((uint64_t)__dst, (unsigned __int8 *)v660, 2);
          }
          LODWORD(__dst[1]) = *(_DWORD *)(v457 + 60);
          v1051 = sub_1CD7EBF14(v658, v659, (const llvm::APInt *)__dst, (llvm *)5, 0, 0, 0);
          unsigned int v1054 = v661;
          if (!__dst[0]) {
            goto LABEL_1125;
          }
          int v662 = *(unsigned __int8 *)__dst[0];
          if ((v662 - 4) > 0x1E)
          {
            if ((v662 - 3) >= 0xFFFFFFFE) {
              v739 = __dst[0];
            }
            else {
              v739 = 0;
            }
            if ((v662 - 3) < 0xFFFFFFFE)
            {
              if (v662 == 3) {
                *((void *)__dst[0] + 1) = 0;
              }
              goto LABEL_1125;
            }
            unint64_t v740 = (unint64_t)v739 + 8;
          }
          else
          {
            if ((*((unsigned char *)__dst[0] + 1) & 0x7F) != 2 && !*((_DWORD *)__dst[0] + 3)) {
              goto LABEL_1125;
            }
            uint64_t v844 = *((void *)__dst[0] + 2);
            if ((v844 & 4) == 0) {
              goto LABEL_1125;
            }
            unint64_t v740 = v844 & 0xFFFFFFFFFFFFFFF8;
            if (!v740) {
              goto LABEL_1125;
            }
          }
          v1102[0] = __dst;
          sub_1CC5FA668(v740 + 16, v1102);
LABEL_1125:
          uint64_t v663 = *(void *)v1058;
          if (*(unsigned char *)(*(void *)(**(void **)(*(void *)v1058 + 40) + 40) + 272))
          {
            uint64_t v664 = (uint64_t)v1051;
            unsigned int v683 = v1054;
            v1051 = v654;
            unsigned int v1054 = v656;
            unsigned int v656 = v683;
          }
          else
          {
            uint64_t v664 = (uint64_t)v654;
          }
          uint64_t v684 = *(void *)(v463 + 96);
          __int16 v685 = *(_WORD *)(v684 + 32);
          long long v686 = *(_OWORD *)(v684 + 56);
          *(_OWORD *)__dst = *(_OWORD *)(v684 + 40);
          long long v1084 = v686;
          long long v1104 = *(_OWORD *)v684;
          uint64_t v1105 = *(void *)(v684 + 16);
          v687 = sub_1CD7FB188(v663, v464, v465, (uint64_t)v1078, v664, v656, v467, v466, (uint64_t)&v1104, *(unsigned char *)(v684 + 34), 0, v685, (long long *)__dst);
          __srce = v688;
          size_t __nd = (size_t)v687;
          v689 = sub_1CD7F6604(*(void *)v1058, v467, v466, 4, 0, (const llvm::APInt *)v1078, 0);
          unsigned int v691 = v690;
          uint64_t v692 = *(void *)v1058;
          sub_1CB8F0264(*(uint64_t **)(v463 + 96), 4, (uint64_t)&v1094);
          uint64_t v959 = *(unsigned __int8 *)(*(void *)(v463 + 96) + 34);
          v693 = sub_1CD7FB188(v692, v464, v465, (uint64_t)v1078, (uint64_t)v1051, v1054, (uint64_t)v689, v691, (uint64_t)&v1094, v959, SHIDWORD(v959), v685, (long long *)__dst);
          uint64_t v696 = *(void *)(*(void *)v1058 + 832);
          if (v696) {
            LOWORD(v696) = *(_WORD *)(v696 + 8);
          }
          uint64_t v32 = (uint64_t)sub_1CCFDED5C(*(void *)v1058, 2, (const llvm::APInt *)v1078, (llvm *)1, 0, __nd, (uint64_t)__srce, v695, (uint64_t)v693, v694, v696);
          uint64_t v4 = (unsigned __int8 *)v1058;
LABEL_864:
          uint64_t v3 = v463;
          if (v1078[0])
          {
            int v521 = *(unsigned __int8 *)v1078[0];
            if ((v521 - 4) > 0x1E)
            {
              if ((v521 - 3) >= 0xFFFFFFFE) {
                v522 = v1078[0];
              }
              else {
                v522 = 0;
              }
              if ((v521 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v523 = (unint64_t)v522 + 8;
LABEL_875:
                __dst[0] = v1078;
                sub_1CC5FA668(v523 + 16, __dst);
                goto LABEL_868;
              }
              if (v521 == 3) {
                *((void *)v1078[0] + 1) = 0;
              }
            }
            else if ((*((unsigned char *)v1078[0] + 1) & 0x7F) == 2 || *((_DWORD *)v1078[0] + 3))
            {
              uint64_t v751 = *((void *)v1078[0] + 2);
              if ((v751 & 4) != 0)
              {
                unint64_t v523 = v751 & 0xFFFFFFFFFFFFFFF8;
                if (v523) {
                  goto LABEL_875;
                }
              }
            }
          }
LABEL_868:
          if (v32) {
            return v32;
          }
          break;
        }
        uint64_t v569 = *(void *)v4;
        uint64_t v570 = *(void *)(v457 + 80);
        __int16 v572 = *(void **)(v570 + 32);
        v571 = (llvm::detail::DoubleAPFloat *)(v570 + 32);
        if (v572 == &unk_1CFB2E344) {
          llvm::detail::DoubleAPFloat::bitcastToAPInt(v571, (llvm::APInt *)__dst);
        }
        else {
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v571, (uint64_t)__dst);
        }
        v573 = __dst;
        if (LODWORD(__dst[1]) >= 0x41) {
          v573 = (void **)__dst[0];
        }
        v574 = *v573;
        v575 = *(void **)(v457 + 64);
        v1102[0] = v575;
        if (v575) {
          llvm::MetadataTracking::track((uint64_t)v1102, (unsigned __int8 *)v575, 2);
        }
        LODWORD(v1102[1]) = *(_DWORD *)(v457 + 60);
        uint64_t v476 = v569;
        uint64_t v477 = (uint64_t)v574;
        uint64_t v478 = 6;
LABEL_1002:
        int v576 = sub_1CD7EBF14(v476, v477, (const llvm::APInt *)v1102, (llvm *)v478, 0, 0, 0);
        unsigned int v578 = v577;
        if (!v1102[0]) {
          goto LABEL_1006;
        }
        int v579 = *(unsigned __int8 *)v1102[0];
        if ((v579 - 4) > 0x1E)
        {
          if ((v579 - 3) >= 0xFFFFFFFE) {
            v611 = v1102[0];
          }
          else {
            v611 = 0;
          }
          if ((v579 - 3) < 0xFFFFFFFE)
          {
            if (v579 == 3) {
              *((void *)v1102[0] + 1) = 0;
            }
            goto LABEL_1006;
          }
          unint64_t v612 = (unint64_t)v611 + 8;
        }
        else
        {
          if ((*((unsigned char *)v1102[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v1102[0] + 3)) {
            goto LABEL_1006;
          }
          uint64_t v818 = *((void *)v1102[0] + 2);
          if ((v818 & 4) == 0) {
            goto LABEL_1006;
          }
          unint64_t v612 = v818 & 0xFFFFFFFFFFFFFFF8;
          if (!v612) {
            goto LABEL_1006;
          }
        }
        *(void *)&long long v1067 = v1102;
        sub_1CC5FA668(v612 + 16, &v1067);
LABEL_1006:
        if (LODWORD(__dst[1]) >= 0x41 && __dst[0]) {
          MEMORY[0x1D25D9CB0](__dst[0], 0x1000C8000313F17);
        }
        uint64_t v4 = (unsigned __int8 *)v1058;
        uint64_t v32 = (uint64_t)sub_1CD7FB2A8(*(void *)v1058, v464, v465, (uint64_t)v1078, (uint64_t)v576, v578, v467, v466, *(void *)(v463 + 96));
        goto LABEL_864;
      default:
        goto LABEL_864;
    }
  }
  if (!*((_DWORD *)v4 + 7) || (*(_WORD *)(*(void *)(v3 + 96) + 36) & 0xF00) != 0 || (*(unsigned char *)(v3 + 26) & 8) != 0) {
    goto LABEL_825;
  }
  *(_OWORD *)v1078 = *(_OWORD *)(*(void *)(v3 + 32) + 40);
  int v460 = *(void **)(v3 + 64);
  v1102[0] = v460;
  if (v460) {
    llvm::MetadataTracking::track((uint64_t)v1102, (unsigned __int8 *)v460, 2);
  }
  LODWORD(v1102[1]) = *(_DWORD *)(v3 + 60);
  int64_t v461 = (unsigned __int8 *)(*((void *)v1078[0] + 5) + 16 * LODWORD(v1078[1]));
  if (*v461)
  {
    if (*v461 - 2 >= 6) {
      goto LABEL_819;
    }
  }
  else if (*(unsigned char *)(*((void *)v461 + 1) + 8) != 13)
  {
    goto LABEL_819;
  }
  if (*((_WORD *)v1078[0] + 12) != 172) {
    goto LABEL_819;
  }
  uint64_t v482 = (uint64_t *)*((void *)v1078[0] + 4);
  uint64_t v483 = *v482;
  unsigned int v484 = *((_DWORD *)v482 + 2);
  uint64_t v485 = v482[5];
  unsigned int v486 = *((_DWORD *)v482 + 12);
  if (*(_WORD *)(*v482 + 24) != 175)
  {
    int v487 = *((_DWORD *)v482 + 12);
    uint64_t v488 = v485;
    if (*(_WORD *)(v485 + 24) == 175) {
      goto LABEL_812;
    }
LABEL_819:
    uint64_t v32 = 0;
    goto LABEL_820;
  }
  int v487 = *((_DWORD *)v482 + 2);
  uint64_t v488 = v483;
  unsigned int v484 = v486;
  uint64_t v483 = v485;
LABEL_812:
  uint64_t v495 = *(void *)(v488 + 48);
  if (!v495) {
    goto LABEL_819;
  }
  uint64_t v496 = v484;
  __int16 v497 = *(uint64_t **)(v488 + 32);
  uint64_t v498 = *v497;
  uint64_t v499 = *((unsigned int *)v497 + 2);
  int v500 = 1;
  do
  {
    if (*(_DWORD *)(v495 + 8) == v487)
    {
      if (!v500) {
        goto LABEL_819;
      }
      --v500;
    }
    uint64_t v495 = *(void *)(v495 + 32);
  }
  while (v495);
  if (v500) {
    goto LABEL_819;
  }
  uint64_t v592 = v3;
  unsigned int v594 = sub_1CD3E3904((unsigned int *)v1078);
  if (v593 == 1) {
  uint64_t v595 = *(void *)(*(void *)(v488 + 32) + 40);
  }
  int v596 = *(unsigned __int16 *)(v595 + 24);
  if (v596 != 35 && v596 != 11) {
    goto LABEL_1274;
  }
  uint64_t v598 = *(void *)(v595 + 80);
  uint64_t v599 = (void *)(v598 + 24);
  uint64_t v600 = *(unsigned int *)(v598 + 32);
  if (v600 >= 0x41)
  {
    int v601 = 0;
    int64_t v602 = (unint64_t)(v600 + 63) >> 6;
    do
    {
      BOOL v734 = v602-- < 1;
      if (v734) {
        break;
      }
      unint64_t v603 = *(void *)(*v599 + 8 * v602);
      v601 += __clz(v603);
    }
    while (!v603);
    int v604 = v600 | 0xFFFFFFC0;
    if ((v600 & 0x3F) == 0) {
      int v604 = 0;
    }
    if ((v600 - v601 - v604) > 0x40) {
      goto LABEL_1274;
    }
    uint64_t v599 = (void *)*v599;
  }
  unint64_t v605 = ((unint64_t)v594 >> 1);
  if (*v599 != v605) {
    goto LABEL_1274;
  }
  if (*(_WORD *)(v483 + 24) != 199) {
    goto LABEL_1274;
  }
  uint64_t v606 = *(void *)(v483 + 48);
  if (!v606) {
    goto LABEL_1274;
  }
  unint64_t v607 = (unint64_t)v594 >> 1;
  int v608 = 1;
  do
  {
    if (*(_DWORD *)(v606 + 8) == v496)
    {
      if (!v608) {
        goto LABEL_1274;
      }
      --v608;
    }
    uint64_t v606 = *(void *)(v606 + 32);
  }
  while (v606);
  if (v608) {
    goto LABEL_1274;
  }
  char v609 = *(unsigned int **)(v483 + 32);
  uint64_t v610 = (unsigned __int8 *)(*(void *)(*(void *)v609 + 40) + 16 * v609[2]);
  if (*v610)
  {
    if (*v610 - 2 >= 6) {
      goto LABEL_1274;
    }
  }
  else if (*(unsigned char *)(*((void *)v610 + 1) + 8) != 13)
  {
    goto LABEL_1274;
  }
  v791 = sub_1CD3E3904(v609);
  if (v790 == 1) {
  if ((unint64_t)v791 > v605)
  }
    goto LABEL_1274;
  if (*(_WORD *)(v498 + 24) != 199) {
    goto LABEL_1274;
  }
  uint64_t v792 = *(void *)(v498 + 48);
  if (!v792) {
    goto LABEL_1274;
  }
  int v793 = 1;
  do
  {
    if (*(_DWORD *)(v792 + 8) == v499)
    {
      if (!v793) {
        goto LABEL_1274;
      }
      --v793;
    }
    uint64_t v792 = *(void *)(v792 + 32);
  }
  while (v792);
  if (v793) {
    goto LABEL_1274;
  }
  v794 = *(unsigned int **)(v498 + 32);
  v795 = (unsigned __int8 *)(*(void *)(*(void *)v794 + 40) + 16 * v794[2]);
  if (!*v795)
  {
    if (*(unsigned char *)(*((void *)v795 + 1) + 8) == 13) {
      goto LABEL_1449;
    }
LABEL_1274:
    uint64_t v32 = 0;
    uint64_t v3 = v592;
    goto LABEL_820;
  }
  if (*v795 - 2 >= 6) {
    goto LABEL_1274;
  }
LABEL_1449:
  v839 = sub_1CD3E3904(v794);
  if (v838 == 1) {
  if ((unint64_t)v839 > v605)
  }
    goto LABEL_1274;
  v840 = *(unsigned int **)(v483 + 32);
  v841 = (uint64_t *)(*(_WORD *)(*(void *)v840 + 24) == 216
                   ? *(void *)(*(void *)v840 + 40) + 16 * v840[2]
                   : *(void *)(v483 + 40) + 16 * v496);
  uint64_t v857 = *v841;
  uint64_t v858 = v841[1];
  v859 = *(unsigned int **)(v498 + 32);
  v860 = (void *)(*(_WORD *)(*(void *)v859 + 24) == 216
                  ? *(void *)(*(void *)v859 + 40) + 16 * v859[2]
                  : *(void *)(v498 + 40) + 16 * v499);
  if (!(*(unsigned int (**)(void, uint64_t, uint64_t, void, void))(**(void **)(v1058 + 8) + 272))(*(void *)(v1058 + 8), v857, v858, *v860, v860[1]))goto LABEL_1274; {
  uint64_t v861 = *(void *)(v592 + 96);
  }
  __int16 v1056 = *(_WORD *)(v861 + 32);
  long long v862 = *(_OWORD *)(v861 + 56);
  *(_OWORD *)__dst = *(_OWORD *)(v861 + 40);
  long long v1084 = v862;
  if ((int)v607 <= 31)
  {
    switch(v607)
    {
      case 1:
        uint64_t v863 = 0;
        uint64_t v864 = 2;
        goto LABEL_1630;
      case 0x10:
        uint64_t v863 = 0;
        uint64_t v864 = 4;
        goto LABEL_1630;
      case 8:
        uint64_t v863 = 0;
        uint64_t v864 = 3;
        goto LABEL_1630;
    }
LABEL_1643:
    uint64_t v863 = llvm::IntegerType::get(*(llvm::IntegerType **)(*(void *)v1058 + 56), (llvm::LLVMContext *)((unint64_t)v594 >> 1));
    uint64_t v864 = 0;
    goto LABEL_1630;
  }
  if (v607 != 32)
  {
    if (v607 == 64)
    {
      uint64_t v863 = 0;
      uint64_t v864 = 6;
      goto LABEL_1630;
    }
    if (v607 == 128)
    {
      uint64_t v863 = 0;
      uint64_t v864 = 7;
      goto LABEL_1630;
    }
    goto LABEL_1643;
  }
  uint64_t v863 = 0;
  uint64_t v864 = 5;
LABEL_1630:
  v923 = *(uint64_t **)(v483 + 32);
  uint64_t v924 = *v923;
  v925 = (void *)v923[1];
  uint64_t v926 = *(void *)(*(void *)v1058 + 832);
  if (v926) {
    __int16 v927 = *(_WORD *)(v926 + 8);
  }
  else {
    __int16 v927 = 0;
  }
  v928 = sub_1CD7F3564(*(llvm::APFloatBase **)v1058, (const char *)0xC7, (uint64_t)v1102, (llvm *)v864, v863, v924, v925, v927);
  unsigned int v930 = v929;
  v931 = *(uint64_t **)(v498 + 32);
  uint64_t v932 = *v931;
  v933 = (void *)v931[1];
  uint64_t v934 = *(void *)(*(void *)v1058 + 832);
  if (v934) {
    __int16 v935 = *(_WORD *)(v934 + 8);
  }
  else {
    __int16 v935 = 0;
  }
  v936 = sub_1CD7F3564(*(llvm::APFloatBase **)v1058, (const char *)0xC7, (uint64_t)v1102, (llvm *)v864, v863, v932, v933, v935);
  unsigned int __ng = v937;
  uint64_t v1053 = (uint64_t)v936;
  uint64_t v3 = v592;
  v938 = *(uint64_t **)(v592 + 32);
  uint64_t v939 = *v938;
  uint64_t v940 = v938[1];
  uint64_t v942 = v938[10];
  uint64_t v941 = v938[11];
  uint64_t v943 = *(void *)v1058;
  uint64_t v944 = *(void *)(v3 + 96);
  long long v1104 = *(_OWORD *)v944;
  uint64_t v1105 = *(void *)(v944 + 16);
  v945 = sub_1CD7FB188(v943, v939, v940, (uint64_t)v1102, (uint64_t)v928, v930, v942, v941, (uint64_t)&v1104, *(unsigned char *)(v944 + 34), 0, v1056, (long long *)__dst);
  int v947 = v946;
  uint64_t v948 = ((unint64_t)v594 >> 4) & 0x1FFFFFFF;
  v949 = sub_1CD7F6604(*(void *)v1058, v942, v941, v948, 0, (const llvm::APInt *)v1102, 0);
  LODWORD(v941) = v950;
  uint64_t v951 = *(void *)v1058;
  sub_1CB8F0264(*(uint64_t **)(v3 + 96), v948, (uint64_t)&v1094);
  uint64_t v963 = *(unsigned __int8 *)(*(void *)(v3 + 96) + 34);
  uint64_t v32 = (uint64_t)sub_1CD7FB188(v951, (uint64_t)v945, v947, (uint64_t)v1102, v1053, __ng, (uint64_t)v949, v941, (uint64_t)&v1094, v963, SHIDWORD(v963), v1056, (long long *)__dst);
LABEL_820:
  if (!v1102[0]) {
    goto LABEL_824;
  }
  int v501 = *(unsigned __int8 *)v1102[0];
  if ((v501 - 4) > 0x1E)
  {
    if ((v501 - 3) >= 0xFFFFFFFE) {
      int v517 = v1102[0];
    }
    else {
      int v517 = 0;
    }
    if ((v501 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v518 = (unint64_t)v517 + 8;
LABEL_846:
      __dst[0] = v1102;
      sub_1CC5FA668(v518 + 16, __dst);
      goto LABEL_824;
    }
    if (v501 == 3) {
      *((void *)v1102[0] + 1) = 0;
    }
  }
  else if ((*((unsigned char *)v1102[0] + 1) & 0x7F) == 2 || *((_DWORD *)v1102[0] + 3))
  {
    uint64_t v750 = *((void *)v1102[0] + 2);
    if ((v750 & 4) != 0)
    {
      unint64_t v518 = v750 & 0xFFFFFFFFFFFFFFF8;
      if (v518) {
        goto LABEL_846;
      }
    }
  }
LABEL_824:
  if (v32) {
    return v32;
  }
LABEL_825:
  if ((*(_WORD *)(*(void *)(v3 + 96) + 36) & 0xF00) != 0
    || (*(unsigned char *)(v3 + 26) & 8) != 0
    || (*(_WORD *)(v3 + 26) & 0x400) != 0)
  {
    return 0;
  }
  uint64_t v502 = v3;
  uint64_t v503 = *(uint64_t **)(v3 + 32);
  uint64_t v504 = *v503;
  uint64_t v505 = v503[1];
  uint64_t v507 = v503[5];
  uint64_t v506 = v503[6];
  uint64_t v508 = v503[10];
  uint64_t v509 = v503[11];
  unint64_t v510 = (uint64_t *)(*(void *)(v507 + 40) + 16 * v506);
  uint64_t v512 = *v510;
  uint64_t v511 = v510[1];
  int v513 = *v510;
  if (v513)
  {
    if ((v513 - 15) < 0x9C) {
      return 0;
    }
  }
  else if ((*(_DWORD *)(v511 + 8) & 0xFE) == 0x12)
  {
    return 0;
  }
  uint64_t v514 = *(unsigned __int16 *)(v507 + 24);
  if ((v514 - 174) < 0xFFFFFFFD) {
    return 0;
  }
  uint64_t v515 = *(void *)(v507 + 48);
  if (!v515) {
    return 0;
  }
  int v516 = 1;
  do
  {
    if (*(_DWORD *)(v515 + 8) == v506)
    {
      if (!v516) {
        return 0;
      }
      --v516;
    }
    uint64_t v515 = *(void *)(v515 + 32);
  }
  while (v515);
  if (v516) {
    return 0;
  }
  if (v514 == 172 && byte_1EBCF92A8)
  {
    uint64_t v535 = sub_1CCF65200(**(void **)(v507 + 32), *(void *)(*(void *)(v507 + 32) + 8), v508, v509, v504);
    if (v535)
    {
      uint64_t v32 = (uint64_t)sub_1CCF65488(v535, HIDWORD(v535), *(uint64_t **)(*(void *)(v507 + 32) + 40), *(void **)(*(void *)(v507 + 32) + 48), v502, v1058);
      if (v32) {
        return v32;
      }
    }
    uint64_t v582 = sub_1CCF65200(*(void *)(*(void *)(v507 + 32) + 40), *(void *)(*(void *)(v507 + 32) + 48), v508, v509, v504);
    if (v582)
    {
      uint64_t v32 = (uint64_t)sub_1CCF65488(v582, HIDWORD(v582), **(uint64_t ***)(v507 + 32), *(void **)(*(void *)(v507 + 32) + 8), v502, v1058);
      if (v32) {
        return v32;
      }
    }
  }
  if (!byte_1EBCF91E8) {
    return 0;
  }
  v583 = *(void **)(v507 + 32);
  uint64_t v584 = v583 + 5;
  if (*(_WORD *)(v583[5] + 24) != 11) {
    return 0;
  }
  uint64_t v585 = *v583;
  if (!*v583) {
    return 0;
  }
  if (*(_WORD *)(v585 + 24) != 253) {
    return 0;
  }
  if ((*(_WORD *)(v585 + 26) & 0xF80) != 0) {
    return 0;
  }
  uint64_t v586 = *(void *)(v585 + 48);
  if (!v586) {
    return 0;
  }
  uint64_t v587 = v583[1];
  int v588 = 1;
  do
  {
    if (*(_DWORD *)(v586 + 8) == v587)
    {
      if (!v588) {
        return 0;
      }
      --v588;
    }
    uint64_t v586 = *(void *)(v586 + 32);
  }
  while (v586);
  if (v588) {
    return 0;
  }
  if (v504 != v585) {
    return 0;
  }
  if (v505 != 1) {
    return 0;
  }
  uint64_t v1049 = v504;
  uint64_t v589 = *(void *)(v504 + 32);
  if (*(void *)(v589 + 40) != v508
    || *(_DWORD *)(v589 + 48) != v509
    || *(_DWORD *)(*(void *)(v504 + 96) + 16) != *(_DWORD *)(*(void *)(v502 + 96) + 16))
  {
    return 0;
  }
  *(_OWORD *)v1078 = *v584;
  unsigned int v1027 = sub_1CD3E3904((unsigned int *)v1078);
  if (v590 == 1) {
  uint64_t v591 = *((void *)v1078[0] + 10);
  }
  LODWORD(v1102[1]) = *(_DWORD *)(v591 + 32);
  uint64_t v1021 = LODWORD(v1102[1]);
  if (LODWORD(v1102[1]) > 0x40) {
    operator new[]();
  }
  unint64_t __srcc = *(void *)(v591 + 24);
  v1102[0] = *(void **)(v591 + 24);
  if (v514 == 171)
  {
    LODWORD(__dst[1]) = v1027;
    if (v1027 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)__dst);
    }
    unint64_t v819 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1027;
    if (!v1027) {
      unint64_t v819 = 0;
    }
    __dst[0] = (void *)v819;
    __srcc ^= v819;
    v1102[0] = (void *)__srcc;
    if (LODWORD(__dst[1]) >= 0x41 && v819 != 0) {
      MEMORY[0x1D25D9CB0]();
    }
  }
  if (v1021 >= 0x41)
  {
    int v823 = 0;
    int64_t v824 = (unint64_t)(v1021 + 63) >> 6;
    do
    {
      BOOL v734 = v824-- < 1;
      if (v734) {
        break;
      }
      unint64_t v825 = *(void *)(__srcc + 8 * v824);
      v823 += __clz(v825);
    }
    while (!v825);
    int v826 = v1021 | 0xFFFFFFC0;
    if ((v1021 & 0x3F) == 0) {
      int v826 = 0;
    }
    int v822 = v823 + v826;
    if ((v1021 - (v823 + v826)) < 0x41 && !*(void *)__srcc)
    {
      uint64_t v32 = 0;
      int v827 = 1;
LABEL_1442:
      MEMORY[0x1D25D9CB0](__srcc, 0x1000C8000313F17);
      goto LABEL_1443;
    }
    if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v1102) == v1021)
    {
      uint64_t v32 = 0;
      int v827 = 1;
      goto LABEL_1439;
    }
    unsigned int v1017 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v1102);
    goto LABEL_1410;
  }
  if (!v1021 || !__srcc || 0xFFFFFFFFFFFFFFFFLL >> -(char)v1021 == __srcc) {
    return 0;
  }
  unsigned int v821 = __clz(__rbit64(__srcc));
  if (v1021 < v821) {
    unsigned int v821 = v1021;
  }
  unsigned int v1017 = v821;
  int v822 = v1021 + __clz(__srcc) - 64;
LABEL_1410:
  for (unint64_t m = v1027 - v1017 + ~v822; ; unint64_t m = __ne)
  {
    unint64_t v829 = m | (m >> 1) | ((m | (m >> 1)) >> 2);
    unint64_t v830 = v829 | (v829 >> 4) | ((v829 | (v829 >> 4)) >> 8);
    unint64_t v831 = v830 | (v830 >> 16);
    unsigned int __ne = v831 + 1;
    if ((int)v831 <= 30)
    {
      switch(v831)
      {
        case 0:
          uint64_t v832 = 0;
          uint64_t v833 = 2;
          goto LABEL_1422;
        case 0xF:
          uint64_t v832 = 0;
          uint64_t v833 = 4;
          goto LABEL_1422;
        case 7:
          uint64_t v832 = 0;
          uint64_t v833 = 3;
          goto LABEL_1422;
      }
    }
    else
    {
      switch(v831)
      {
        case 0x1F:
          uint64_t v832 = 0;
          uint64_t v833 = 5;
          goto LABEL_1422;
        case 0x3F:
          uint64_t v832 = 0;
          uint64_t v833 = 6;
          goto LABEL_1422;
        case 0x7F:
          uint64_t v832 = 0;
          uint64_t v833 = 7;
          goto LABEL_1422;
      }
    }
    uint64_t v832 = llvm::IntegerType::get(*(llvm::IntegerType **)(*(void *)v1058 + 56), (llvm::LLVMContext *)__ne);
    uint64_t v833 = 0;
LABEL_1422:
    *(void *)&long long v1067 = v833;
    *((void *)&v1067 + 1) = v832;
    if (__ne >= v1027)
    {
      uint64_t v32 = 0;
      int v827 = 1;
      goto LABEL_1437;
    }
    unint64_t v835 = sub_1CB896FB8((unsigned __int8 *)&v1067);
    if (v834 == 1) {
    if (8 * v835 == __ne)
    }
    {
      if ((_BYTE)v1067)
      {
        uint64_t v836 = *(void *)(v1058 + 8);
        if ((v1067 == 1 || *(void *)(v836 + 8 * v1067 + 96))
          && (v514 > 0x185 || (*(unsigned char *)(v836 + 390 * v1067 + v514 + 3862) & 0xFB) == 0)
          && ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v836 + 1384))(v836, v512, v511) & 1) != 0)
        {
          break;
        }
      }
    }
  }
  if (v1017 % __ne) {
    unsigned int v1017 = (v1017 + __ne - 1) / __ne * __ne - __ne;
  }
  if (v1017 + __ne >= v1027) {
    unsigned int v845 = v1027;
  }
  else {
    unsigned int v845 = v1017 + __ne;
  }
  DWORD2(v1065) = v1027;
  if (v1027 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v1065);
  }
  *(void *)&long long v1065 = 0;
  if (v1017 != v845)
  {
    if (v1017 > 0x3F || v845 > 0x40)
    {
      llvm::APInt::setBitsSlowCase(&v1065, v1017, v845);
    }
    else
    {
      unint64_t v846 = 0xFFFFFFFFFFFFFFFFLL >> (v1017 - v845) << v1017;
      if (DWORD2(v1065) > 0x40) {
        *(void *)v1065 |= v846;
      }
      else {
        *(void *)&long long v1065 = v1065 | v846;
      }
    }
  }
  if (v1021 >= 0x41) {
    operator new[]();
  }
  if ((__srcc & ~(void)v1065) != 0)
  {
    int v827 = 0;
  }
  else
  {
    unsigned int v847 = v1021;
    LODWORD(__dst[1]) = v1021;
    if (v1021 == v1017)
    {
      __dst[0] = 0;
      unsigned int v847 = v1017;
    }
    else
    {
      __dst[0] = (void *)(__srcc >> v1017);
    }
    if (__ne > 0x40)
    {
      if (v847 != __ne) {
        operator new[]();
      }
      sub_1CD0463BC((uint64_t)&v1063, (uint64_t)__dst);
    }
    else
    {
      if (v847 >= 0x41) {
        v848 = (void **)__dst[0];
      }
      else {
        v848 = __dst;
      }
      unint64_t v849 = (unint64_t)*v848;
      DWORD2(v1063) = __ne;
      if (__ne) {
        unint64_t v850 = 0xFFFFFFFFFFFFFFFFLL >> -(char)__ne;
      }
      else {
        unint64_t v850 = 0;
      }
      *(void *)&long long v1063 = v850 & v849;
    }
    if (LODWORD(__dst[1]) >= 0x41 && __dst[0]) {
      MEMORY[0x1D25D9CB0](__dst[0], 0x1000C8000313F17);
    }
    if (v514 == 171)
    {
      LODWORD(__dst[1]) = __ne;
      if (__ne > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)__dst);
      }
      if (__ne) {
        v851 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)__ne);
      }
      else {
        v851 = 0;
      }
      __dst[0] = v851;
      if (DWORD2(v1063) > 0x40)
      {
        uint64_t v865 = 0;
        uint64_t v866 = v1063;
        v852 = (char *)__dst[0];
        unint64_t v867 = (((unint64_t)DWORD2(v1063) + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          *(void *)(v866 + v865) ^= *(void *)&v852[v865];
          v865 += 8;
        }
        while (v867 != v865);
      }
      else
      {
        v852 = (char *)__dst[0];
        *(void *)&long long v1063 = v1063 ^ (__int128)__dst[0];
      }
      if (LODWORD(__dst[1]) >= 0x41 && v852 != 0) {
        MEMORY[0x1D25D9CB0]();
      }
    }
    uint64_t v870 = *(void *)v1058;
    uint64_t v869 = *(void *)(v1058 + 8);
    if (*(unsigned char *)(*(void *)(**(void **)(*(void *)v1058 + 40) + 40) + 272)) {
      uint64_t v871 = ((v1027 - __ne + 7) >> 3) - (unint64_t)(v1017 >> 3);
    }
    else {
      uint64_t v871 = v1017 >> 3;
    }
    LOBYTE(v1074) = 0;
    uint64_t v872 = (1 << *(unsigned char *)(*(void *)(v1049 + 96) + 34)) | *(void *)(*(void *)(v1049 + 96) + 8);
    uint64_t v873 = (1 << (63 - __clz(v872 & -v872))) | v871;
    uint64_t v874 = (63 - __clz(v873 & -v873));
    if ((*(unsigned int (**)(uint64_t, void))(*(void *)v869 + 664))(v869, *(void *)(v870 + 56))) {
      BOOL v875 = v1074 == 0;
    }
    else {
      BOOL v875 = 1;
    }
    if (v875)
    {
      uint64_t v32 = 0;
    }
    else
    {
      uint64_t v876 = *(void *)v1058;
      v877 = *(void **)(v1049 + 64);
      __dst[0] = v877;
      if (v877) {
        llvm::MetadataTracking::track((uint64_t)__dst, (unsigned __int8 *)v877, 2);
      }
      LODWORD(__dst[1]) = *(_DWORD *)(v1049 + 60);
      __nf = sub_1CD7F6604(v876, v508, v509, v871, 0, (const llvm::APInt *)__dst, 0);
      uint64_t v1057 = v878;
      if (__dst[0])
      {
        int v879 = *(unsigned __int8 *)__dst[0];
        if ((v879 - 4) > 0x1E)
        {
          if ((v879 - 3) >= 0xFFFFFFFE) {
            v915 = __dst[0];
          }
          else {
            v915 = 0;
          }
          if ((v879 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v916 = (unint64_t)v915 + 8;
            goto LABEL_1590;
          }
          if (v879 == 3) {
            *((void *)__dst[0] + 1) = 0;
          }
        }
        else if ((*((unsigned char *)__dst[0] + 1) & 0x7F) == 2 || *((_DWORD *)__dst[0] + 3))
        {
          uint64_t v955 = *((void *)__dst[0] + 2);
          if ((v955 & 4) != 0)
          {
            unint64_t v916 = v955 & 0xFFFFFFFFFFFFFFF8;
            if (v916)
            {
LABEL_1590:
              *(void *)&long long v1104 = __dst;
              sub_1CC5FA668(v916 + 16, &v1104);
            }
          }
        }
      }
      v1029 = (llvm::IntervalMapImpl::Path *)v1067;
      __srcf = *(void **)v1058;
      uint64_t v880 = *((void *)&v1067 + 1);
      v881 = *(unsigned __int8 **)(v1049 + 64);
      *(void *)&long long v1094 = v881;
      if (v881) {
        llvm::MetadataTracking::track((uint64_t)&v1094, v881, 2);
      }
      DWORD2(v1094) = *(_DWORD *)(v1049 + 60);
      v882 = *(uint64_t **)(v1049 + 32);
      uint64_t v884 = *v882;
      uint64_t v883 = v882[1];
      sub_1CB8F0264(*(uint64_t **)(v1049 + 96), v871, (uint64_t)&v1104);
      uint64_t v885 = *(void *)(v1049 + 96);
      __int16 v886 = *(_WORD *)(v885 + 32);
      long long v887 = *(_OWORD *)(v885 + 56);
      *(_OWORD *)__dst = *(_OWORD *)(v885 + 40);
      long long v1084 = v887;
      v888 = sub_1CD7F00F8((uint64_t)__srcf, (uint64_t)v1029, v880, (uint64_t)&v1094, v884, v883, (uint64_t)__nf, v1057, &v1104, (unsigned __int16)v874 | 0x100u, (v874 | 0x100uLL) >> 32, v886, (long long *)__dst, 0);
      v1030 = v889;
      __srcg = v888;
      if ((void)v1094)
      {
        int v890 = *(unsigned __int8 *)v1094;
        if ((v890 - 4) > 0x1E)
        {
          if ((v890 - 3) >= 0xFFFFFFFE) {
            uint64_t v917 = v1094;
          }
          else {
            uint64_t v917 = 0;
          }
          if ((v890 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v918 = v917 + 8;
            goto LABEL_1596;
          }
          if (v890 == 3) {
            *(void *)(v1094 + 8) = 0;
          }
        }
        else if ((*(unsigned char *)(v1094 + 1) & 0x7F) == 2 || *(_DWORD *)(v1094 + 12))
        {
          uint64_t v956 = *(void *)(v1094 + 16);
          if ((v956 & 4) != 0)
          {
            unint64_t v918 = v956 & 0xFFFFFFFFFFFFFFF8;
            if (v918)
            {
LABEL_1596:
              __dst[0] = &v1094;
              sub_1CC5FA668(v918 + 16, __dst);
            }
          }
        }
      }
      uint64_t v891 = *(void *)v1058;
      v892 = *(void **)(v507 + 64);
      __dst[0] = v892;
      if (v892)
      {
        llvm::MetadataTracking::track((uint64_t)__dst, (unsigned __int8 *)v892, 2);
        uint64_t v896 = *(void *)v1058;
        v899 = *(unsigned __int8 **)(v507 + 64);
        int v893 = *(_DWORD *)(v507 + 60);
        LODWORD(__dst[1]) = v893;
        uint64_t v895 = *((void *)&v1067 + 1);
        v898 = (llvm *)v1067;
        *(void *)&long long v1094 = v899;
        if (v899)
        {
          llvm::MetadataTracking::track((uint64_t)&v1094, v899, 2);
          int v893 = *(_DWORD *)(v507 + 60);
        }
        uint64_t v897 = *((void *)&v1067 + 1);
        uint64_t v894 = v1067;
      }
      else
      {
        int v893 = *(_DWORD *)(v507 + 60);
        LODWORD(__dst[1]) = v893;
        uint64_t v895 = *((void *)&v1067 + 1);
        uint64_t v894 = v1067;
        *(void *)&long long v1094 = 0;
        uint64_t v896 = v891;
        uint64_t v897 = *((void *)&v1067 + 1);
        v898 = (llvm *)v1067;
      }
      DWORD2(v1094) = v893;
      uint64_t v900 = sub_1CD7EBB14(v896, (llvm::LLVMContext *)&v1063, (const llvm::APInt *)&v1094, v894, v897, 0, 0);
      uint64_t v903 = *(void *)(v891 + 832);
      if (v903) {
        LOWORD(v903) = *(_WORD *)(v903 + 8);
      }
      v904 = sub_1CCFDED5C(v891, v514, (const llvm::APInt *)__dst, v898, v895, (uint64_t)__srcg, (uint64_t)v1030, v902, v900, v901, v903);
      unsigned int v906 = v905;
      if ((void)v1094)
      {
        int v907 = *(unsigned __int8 *)v1094;
        if ((v907 - 4) > 0x1E)
        {
          if ((v907 - 3) >= 0xFFFFFFFE) {
            uint64_t v919 = v1094;
          }
          else {
            uint64_t v919 = 0;
          }
          if ((v907 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v920 = v919 + 8;
            goto LABEL_1602;
          }
          if (v907 == 3) {
            *(void *)(v1094 + 8) = 0;
          }
        }
        else if ((*(unsigned char *)(v1094 + 1) & 0x7F) == 2 || *(_DWORD *)(v1094 + 12))
        {
          uint64_t v957 = *(void *)(v1094 + 16);
          if ((v957 & 4) != 0)
          {
            unint64_t v920 = v957 & 0xFFFFFFFFFFFFFFF8;
            if (v920)
            {
LABEL_1602:
              *(void *)&long long v1077 = &v1094;
              sub_1CC5FA668(v920 + 16, &v1077);
            }
          }
        }
      }
      if (__dst[0])
      {
        int v908 = *(unsigned __int8 *)__dst[0];
        if ((v908 - 4) > 0x1E)
        {
          if ((v908 - 3) >= 0xFFFFFFFE) {
            v921 = __dst[0];
          }
          else {
            v921 = 0;
          }
          if ((v908 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v922 = (unint64_t)v921 + 8;
            goto LABEL_1608;
          }
          if (v908 == 3) {
            *((void *)__dst[0] + 1) = 0;
          }
        }
        else if ((*((unsigned char *)__dst[0] + 1) & 0x7F) == 2 || *((_DWORD *)__dst[0] + 3))
        {
          uint64_t v958 = *((void *)__dst[0] + 2);
          if ((v958 & 4) != 0)
          {
            unint64_t v922 = v958 & 0xFFFFFFFFFFFFFFF8;
            if (v922)
            {
LABEL_1608:
              *(void *)&long long v1094 = __dst;
              sub_1CC5FA668(v922 + 16, &v1094);
            }
          }
        }
      }
      uint64_t v909 = *(void *)v1058;
      v910 = *(unsigned __int8 **)(v502 + 64);
      *(void *)&long long v1077 = v910;
      if (v910) {
        llvm::MetadataTracking::track((uint64_t)&v1077, v910, 2);
      }
      DWORD2(v1077) = *(_DWORD *)(v502 + 60);
      sub_1CB8F0264(*(uint64_t **)(v502 + 96), v871, (uint64_t)&v1094);
      *(_OWORD *)__dst = 0u;
      long long v1084 = 0u;
      uint64_t v32 = (uint64_t)sub_1CD7FB188(v909, v1049, v505, (uint64_t)&v1077, (uint64_t)v904, v906, (uint64_t)__nf, v1057, (uint64_t)&v1094, v874, SHIDWORD(v874), 0, (long long *)__dst);
      if ((void)v1077)
      {
        int v911 = *(unsigned __int8 *)v1077;
        if ((v911 - 4) > 0x1E)
        {
          if ((v911 - 3) >= 0xFFFFFFFE) {
            uint64_t v913 = v1077;
          }
          else {
            uint64_t v913 = 0;
          }
          if ((v911 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v914 = v913 + 8;
            goto LABEL_1584;
          }
          if (v911 == 3) {
            *(void *)(v1077 + 8) = 0;
          }
        }
        else if ((*(unsigned char *)(v1077 + 1) & 0x7F) == 2 || *(_DWORD *)(v1077 + 12))
        {
          uint64_t v954 = *(void *)(v1077 + 16);
          if ((v954 & 4) != 0)
          {
            unint64_t v914 = v954 & 0xFFFFFFFFFFFFFFF8;
            if (v914)
            {
LABEL_1584:
              __dst[0] = &v1077;
              sub_1CC5FA668(v914 + 16, __dst);
            }
          }
        }
      }
      sub_1CCEF0788(v1058, (uint64_t)__nf);
      sub_1CCEF0788(v1058, (uint64_t)__srcg);
      sub_1CCEF0788(v1058, (uint64_t)v904);
      uint64_t v912 = *(void *)v1058;
      __dst[1] = *(void **)(*(void *)v1058 + 656);
      *(void *)&long long v1084 = v912;
      *(void *)(v912 + 656) = __dst;
      __dst[0] = &unk_1F26413F0;
      *((void *)&v1084 + 1) = v1058;
      sub_1CD800DA0(v912, v1049, 1, (uint64_t)__srcg, 1);
      *(void **)(v1084 + 656) = __dst[1];
    }
    if (DWORD2(v1063) >= 0x41 && (void)v1063) {
      MEMORY[0x1D25D9CB0](v1063, 0x1000C8000313F17);
    }
    int v827 = 1;
  }
  if (DWORD2(v1065) >= 0x41 && (void)v1065) {
    MEMORY[0x1D25D9CB0](v1065, 0x1000C8000313F17);
  }
  LODWORD(v1021) = v1102[1];
LABEL_1437:
  if (v1021 >= 0x41)
  {
    unint64_t __srcc = (unint64_t)v1102[0];
LABEL_1439:
    if (__srcc) {
      goto LABEL_1442;
    }
  }
LABEL_1443:
  if (!v827) {
    return 0;
  }
  return v32;
}

uint64_t *sub_1CCF377CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = (uint64_t *)a1;
  v583[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a2 + 40);
  long long v6 = *(llvm **)v4;
  uint64_t v5 = *(void *)(v4 + 8);
  if (!*(_WORD *)(a2 + 56))
  {
LABEL_6:
    uint64_t v564 = v5;
    if (!*(unsigned char *)(a1 + 33))
    {
      uint64_t v102 = sub_1CD7EE8F8(a2, 0);
      if (v102)
      {
        uint64_t v103 = v102;
        uint64_t v104 = a2;
        if (*(_WORD *)(v102 + 24) == 216)
        {
          do
          {
            int v105 = *(_DWORD **)(v103 + 32);
            uint64_t v103 = *(void *)v105;
          }
          while (*(_WORD *)(*(void *)v105 + 24) == 216);
          unsigned int v106 = v105[2];
        }
        else
        {
          unsigned int v106 = a2;
        }
        uint64_t v148 = *(void *)(v103 + 40) + 16 * v106;
        int v150 = *(void **)v148;
        int v149 = *(_DWORD **)(v148 + 8);
        v574[0] = v150;
        v574[1] = v149;
        if ((_BYTE)v150)
        {
          if (v150 - 15 >= 0x9C) {
            goto LABEL_7;
          }
        }
        else if ((v149[2] & 0xFE) != 0x12)
        {
          goto LABEL_7;
        }
        int v155 = *(unsigned __int16 *)(v2 + 56);
        unsigned int v157 = sub_1CD3DB440((llvm::EVT *)v574, (const char *)a2) * v155;
        int v158 = *(llvm::LLVMContext **)(*v3 + 56);
        if (LOBYTE(v574[0]))
        {
          LOBYTE(EVT) = sub_1CB8C2FBC((unsigned __int8 *)v574);
          unint64_t v160 = 0;
          uint64_t v161 = 0;
        }
        else
        {
          unint64_t EVT = llvm::EVT::getEVT(*((llvm::EVT **)v574[1] + 3), 0, v156);
          uint64_t v161 = v266;
          unint64_t v160 = EVT & 0xFFFFFFFFFFFFFF00;
        }
        unint64_t v267 = sub_1CB8E5DAC(v158, v160 | EVT, v161, v157, 0);
        unsigned __int8 v268 = (llvm *)v267;
        uint64_t v269 = a2;
        if (!*((unsigned char *)v3 + 34) || (_BYTE)v267 && *(void *)(v3[1] + 8 * v267 + 96))
        {
          unint64_t v270 = *(unsigned __int16 *)(v2 + 56);
          v580[0] = v581;
          v580[1] = (void *)0x800000000;
          sub_1CD3E535C((uint64_t *)v580, v270, v103, v104 & 0xFFFFFFFF00000000 | v106);
          uint64_t v271 = (void *)*v3;
          unint64_t v272 = *(void **)(v2 + 64);
          v572[0] = v272;
          if (v272) {
            llvm::MetadataTracking::track((uint64_t)v572, (unsigned __int8 *)v272, 2);
          }
          LODWORD(v572[1]) = *(_DWORD *)(v2 + 60);
          uint64_t v273 = v271[104];
          if (v273) {
            uint64_t v274 = *(unsigned __int16 *)(v273 + 8);
          }
          else {
            uint64_t v274 = 0;
          }
          uint64_t v504 = sub_1CD7FF4E8(v271, (const char *)0x95, (const llvm::APInt *)v572, v268, v269, (uint64_t *)v580[0], LODWORD(v580[1]), v274);
          uint64_t v506 = v505;
          if (!v572[0]) {
            goto LABEL_657;
          }
          int v507 = *(unsigned __int8 *)v572[0];
          if ((v507 - 4) > 0x1E)
          {
            if ((v507 - 3) >= 0xFFFFFFFE) {
              uint64_t v511 = v572[0];
            }
            else {
              uint64_t v511 = 0;
            }
            if ((v507 - 3) < 0xFFFFFFFE)
            {
              if (v507 == 3) {
                *((void *)v572[0] + 1) = 0;
              }
              goto LABEL_657;
            }
            unint64_t v512 = (unint64_t)v511 + 8;
          }
          else
          {
            if ((*((unsigned char *)v572[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v572[0] + 3)) {
              goto LABEL_657;
            }
            uint64_t v541 = *((void *)v572[0] + 2);
            if ((v541 & 4) == 0) {
              goto LABEL_657;
            }
            unint64_t v512 = v541 & 0xFFFFFFFFFFFFFFF8;
            if (!v512) {
              goto LABEL_657;
            }
          }
          *(void *)&long long __src = v572;
          sub_1CC5FA668(v512 + 16, &__src);
LABEL_657:
          uint64_t v9 = sub_1CD7EF724(*v3, (uint64_t)v6, v564, (uint64_t)v504, v506);
          if (v580[0] != v581) {
            free(v580[0]);
          }
          return (uint64_t *)v9;
        }
      }
    }
LABEL_7:
    if (!*((unsigned char *)v3 + 34))
    {
      unint64_t v10 = *(unsigned __int16 *)(v2 + 56);
      if (v10 >= 2)
      {
        __int16 v11 = *(uint64_t **)(v2 + 32);
        uint64_t v12 = *v11;
        if (*(_WORD *)(*v11 + 24) == 148
          && ((v13 = *(void *)(*(void *)(v12 + 32) + 40), int v14 = *(unsigned __int16 *)(v13 + 24), v14 != 35)
            ? (BOOL v15 = v14 == 11)
            : (BOOL v15 = 1),
              v15))
        {
          uint64_t v16 = *(void *)(v13 + 80);
          uint64_t v17 = (void *)(v16 + 24);
          if (*(_DWORD *)(v16 + 32) >= 0x41u) {
            uint64_t v17 = (void *)*v17;
          }
          unsigned __int16 v18 = (void *)*v17;
        }
        else
        {
          LODWORD(v18) = -1;
        }
        int v19 = (int)v18;
        do
        {
          uint64_t v21 = *v11;
          v11 += 5;
          uint64_t v20 = v21;
          if (*(_WORD *)(v21 + 24) != 148) {
            goto LABEL_34;
          }
          uint64_t v22 = *(void *)(v12 + 32);
          uint64_t v23 = *(void *)(v20 + 32);
          uint64_t v9 = *(void *)v22;
          if (*(void *)v22 != *(void *)v23) {
            goto LABEL_34;
          }
          uint64_t v24 = *(unsigned int *)(v22 + 8);
          if (v24 != *(_DWORD *)(v23 + 8)) {
            goto LABEL_34;
          }
          uint64_t v25 = *(void *)(v23 + 40);
          int v26 = *(unsigned __int16 *)(v25 + 24);
          if (v26 != 35 && v26 != 11) {
            goto LABEL_34;
          }
          uint64_t v28 = *(void *)(v25 + 80);
          int v29 = (void *)(v28 + 24);
          if (*(_DWORD *)(v28 + 32) >= 0x41u) {
            int v29 = (void *)*v29;
          }
          if (*v29 != v19) {
            goto LABEL_34;
          }
          ++v19;
          --v10;
        }
        while (v10);
        if (v18)
        {
          if (v18 == -1) {
            goto LABEL_34;
          }
          uint64_t v172 = *(void *)(v2 + 40);
          int v173 = *(void **)v172;
        }
        else
        {
          uint64_t v170 = (unsigned __int8 *)(*(void *)(v9 + 40) + 16 * v24);
          int v171 = *v170;
          uint64_t v172 = *(void *)(v2 + 40);
          int v173 = *(void **)v172;
          if (v171 == *(void *)v172)
          {
            uint64_t v174 = *((void *)v170 + 1);
            if (v171 || v174 == *(void *)(v172 + 8)) {
              return (uint64_t *)v9;
            }
          }
        }
        uint64_t v249 = *(void **)(v172 + 8);
        v580[0] = v173;
        v580[1] = v249;
        if (!(v18 % sub_1CD3DB440((llvm::EVT *)v580, (const char *)a2)))
        {
          uint64_t v251 = *v3;
          BOOL v252 = *(void **)(v2 + 64);
          v580[0] = v252;
          if (v252) {
            llvm::MetadataTracking::track((uint64_t)v580, (unsigned __int8 *)v252, 2);
          }
          LODWORD(v580[1]) = *(_DWORD *)(v2 + 60);
          uint64_t v253 = *(void *)(v2 + 40);
          int64_t v254 = *(llvm **)v253;
          uint64_t v255 = *(void *)(v253 + 8);
          int v256 = *(uint64_t **)(v12 + 32);
          uint64_t v257 = *v256;
          uint64_t v258 = v256[1];
          uint64_t v259 = v256[5];
          uint64_t v260 = v256[6];
          uint64_t v261 = *(void *)(v251 + 832);
          if (v261) {
            LOWORD(v261) = *(_WORD *)(v261 + 8);
          }
          unint64_t v262 = sub_1CCFDED5C(v251, 151, (const llvm::APInt *)v580, v254, v255, v257, v258, v250, v259, v260, v261);
          goto LABEL_367;
        }
      }
    }
LABEL_34:
    uint64_t v565 = v6;
    if (*((unsigned char *)v3 + 33)) {
      goto LABEL_45;
    }
    BOOL v30 = *(uint64_t **)(v2 + 32);
    *(_OWORD *)uint64_t v580 = *(_OWORD *)*(void *)(v2 + 40);
    uint64_t v31 = *v30;
    char v32 = *(unsigned __int16 *)(*v30 + 24) == 199;
    if (*(unsigned __int16 *)(*v30 + 24) - 199 > 1) {
      goto LABEL_45;
    }
    uint64_t v33 = **(void **)(v31 + 32);
    if (*(_WORD *)(v33 + 24) != 148) {
      goto LABEL_45;
    }
    uint64_t v34 = *(void *)(*(void *)(v33 + 32) + 40);
    int v35 = *(unsigned __int16 *)(v34 + 24);
    if (v35 != 35 && v35 != 11) {
      goto LABEL_45;
    }
    uint64_t v37 = *(void *)(v34 + 80);
    int v38 = (unint64_t *)(v37 + 24);
    if (*(_DWORD *)(v37 + 32) >= 0x41u) {
      int v38 = (unint64_t *)*v38;
    }
    unint64_t v39 = *v38;
    if ((*v38 & 0x8000000000000000) != 0) {
      goto LABEL_45;
    }
    if (v39 % sub_1CD3DB440((llvm::EVT *)v580, (const char *)a2)) {
      goto LABEL_45;
    }
    unsigned int v203 = *(unsigned __int16 *)(v2 + 56);
    uint64_t v204 = *(uint64_t **)(**(void **)(v31 + 32) + 32);
    uint64_t v206 = *v204;
    uint64_t v205 = v204[1];
    *(_OWORD *)v574 = *(_OWORD *)(*(void *)(*v204 + 40) + 16 * v205);
    unint64_t v207 = sub_1CD3DD468((unsigned __int8 *)v574, v202, v5);
    unint64_t v209 = sub_1CB8E5DAC(*(llvm::LLVMContext **)(*v3 + 56), v207, v208, v203, 0);
    uint64_t v211 = (llvm *)v209;
    uint64_t v213 = v212;
    if (*((unsigned char *)v3 + 34))
    {
      if (!(_BYTE)v209 || !*(void *)(v3[1] + 8 * v209 + 96)) {
        goto LABEL_45;
      }
    }
    if (v203 != 1)
    {
      unsigned int v214 = 1;
      do
      {
        uint64_t v215 = *(void *)(*(void *)(v2 + 32) + 40 * v214);
        int v216 = *(unsigned __int16 *)(v215 + 24);
        unsigned int v217 = v216 - 199;
        BOOL v218 = v216 == 199;
        if (v217 > 1) {
          goto LABEL_314;
        }
        uint64_t v219 = **(void **)(v215 + 32);
        if (*(_WORD *)(v219 + 24) != 148) {
          goto LABEL_314;
        }
        uint64_t v220 = *(void *)(**(void **)(v31 + 32) + 32);
        uint64_t v221 = *(void *)(v219 + 32);
        if (*(void *)v220 != *(void *)v221 || *(_DWORD *)(v220 + 8) != *(_DWORD *)(v221 + 8)) {
          goto LABEL_314;
        }
        uint64_t v222 = *(void *)(v221 + 40);
        int v223 = *(unsigned __int16 *)(v222 + 24);
        if (v223 == 35 || v223 == 11)
        {
          uint64_t v225 = *(void *)(v222 + 80);
          uint64_t v226 = (uint64_t *)(v225 + 24);
          if (*(_DWORD *)(v225 + 32) >= 0x41u) {
            uint64_t v226 = (uint64_t *)*v226;
          }
          uint64_t v227 = *v226;
        }
        else
        {
LABEL_314:
          uint64_t v227 = -1;
        }
        if (v39 + v214 != v227) {
          goto LABEL_45;
        }
        v32 |= v218;
      }
      while (v203 != ++v214);
    }
    int v228 = *(void **)(v2 + 64);
    v574[0] = v228;
    if (v228) {
      llvm::MetadataTracking::track((uint64_t)v574, (unsigned __int8 *)v228, 2);
    }
    LODWORD(v574[1]) = *(_DWORD *)(v2 + 60);
    uint64_t v229 = *(void *)(**(void **)(v31 + 32) + 32);
    uint64_t v230 = *(void *)(v229 + 40);
    uint64_t v231 = *(void *)(v229 + 48);
    uint64_t v232 = *(void **)(*v3 + 832);
    if (v232) {
      LOWORD(v232) = *((_WORD *)v232 + 4);
    }
    int v233 = sub_1CCFDED5C(*v3, 151, (const llvm::APInt *)v574, v211, v213, v206, v205, v210, v230, v231, (__int16)v232);
    uint64_t v235 = (void *)(v205 & 0xFFFFFFFF00000000 | v234);
    uint64_t v236 = (llvm::APFloatBase *)*v3;
    if (v32) {
      uint64_t v237 = 199;
    }
    else {
      uint64_t v237 = 200;
    }
    uint64_t v238 = *((void *)v236 + 104);
    if (v238) {
      __int16 v239 = *(_WORD *)(v238 + 8);
    }
    else {
      __int16 v239 = 0;
    }
    uint64_t v9 = (uint64_t)sub_1CD7F3564(v236, (const char *)v237, (uint64_t)v574, (llvm *)v580[0], (uint64_t)v580[1], (uint64_t)v233, v235, v239);
    if (v574[0])
    {
      int v516 = *(unsigned __int8 *)v574[0];
      if ((v516 - 4) > 0x1E)
      {
        if ((v516 - 3) >= 0xFFFFFFFE) {
          unint64_t v518 = v574[0];
        }
        else {
          unint64_t v518 = 0;
        }
        if ((v516 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v519 = (unint64_t)v518 + 8;
LABEL_689:
          v572[0] = v574;
          sub_1CC5FA668(v519 + 16, v572);
          goto LABEL_679;
        }
        if (v516 == 3) {
          *((void *)v574[0] + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v574[0] + 1) & 0x7F) == 2 || *((_DWORD *)v574[0] + 3))
      {
        uint64_t v542 = *((void *)v574[0] + 2);
        if ((v542 & 4) != 0)
        {
          unint64_t v519 = v542 & 0xFFFFFFFFFFFFFFF8;
          if (v519) {
            goto LABEL_689;
          }
        }
      }
    }
LABEL_679:
    if (v9) {
      return (uint64_t *)v9;
    }
LABEL_45:
    if ((*((_DWORD *)v3 + 6) - 1) > 1) {
      goto LABEL_46;
    }
    uint64_t v107 = *(unsigned __int16 *)(v2 + 56);
    unint64_t v108 = *(void **)(v2 + 64);
    v574[0] = v108;
    if (v108) {
      llvm::MetadataTracking::track((uint64_t)v574, (unsigned __int8 *)v108, 2);
    }
    LODWORD(v574[1]) = *(_DWORD *)(v2 + 60);
    *(_OWORD *)__int16 v572 = *(_OWORD *)*(void *)(v2 + 40);
    char v109 = 1;
    LOBYTE(__src) = 1;
    *((void *)&__src + 1) = 0;
    if (v107)
    {
      uint64_t v110 = 0;
      uint64_t v111 = *(void *)(v2 + 32);
      int v112 = 1;
      unsigned __int8 v113 = __src;
      do
      {
        int v114 = *(unsigned __int16 *)(*(void *)v111 + 24);
        if (v114 != 51)
        {
          if ((v114 - 199) > 1) {
            goto LABEL_225;
          }
          unsigned int v115 = (uint64_t *)(*(void *)(**(void **)(*(void *)v111 + 32) + 40)
                           + 16 * *(unsigned int *)(*(void *)(*(void *)v111 + 32) + 8));
          uint64_t v117 = *v115;
          uint64_t v116 = v115[1];
          int v118 = *v115;
          if (v112 == 1)
          {
            *(void *)&long long __src = v117;
            *((void *)&__src + 1) = v116;
            unsigned __int8 v113 = v117;
            uint64_t v110 = v116;
          }
          else if (v118 != v113 || (!v118 ? (BOOL v119 = v116 == v110) : (BOOL v119 = 1), !v119))
          {
LABEL_225:
            LOBYTE(__src) = 1;
            *((void *)&__src + 1) = 0;
            break;
          }
          v109 &= v114 == 200;
          int v112 = v118;
        }
        v111 += 40;
        --v107;
      }
      while (v107);
    }
    int v151 = (void *)sub_1CD3DD468((unsigned __int8 *)v572, (uint64_t)v108, v5);
    __b = v151;
    uint64_t v578 = v152;
    if (__src == 1) {
      goto LABEL_271;
    }
    if ((_BYTE)v151) {
      unsigned int ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&__b);
    }
    else {
      unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&__b);
    }
    unsigned int v176 = ExtendedSizeInBits;
    if (v154 == 1) {
    uint8x8_t v177 = (uint8x8_t)vcnt_s8((int8x8_t)v176);
    }
    v177.i16[0] = vaddlv_u8(v177);
    if (v177.i32[0] != 1) {
      goto LABEL_271;
    }
    if ((_BYTE)__src) {
      unsigned int v178 = sub_1CB87E200((unsigned __int8 *)&__src);
    }
    else {
      unsigned int v178 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&__src);
    }
    unsigned int v193 = v178;
    if (v179 == 1) {
    uint8x8_t v194 = (uint8x8_t)vcnt_s8((int8x8_t)v193);
    }
    v194.i16[0] = vaddlv_u8(v194);
    if (v194.i32[0] != 1 || (v109 & 1) == 0 && (sub_1CD7F2104((void **)*v3, v2, 0, 1) & 1) != 0)
    {
LABEL_271:
      uint64_t v9 = 0;
      goto LABEL_272;
    }
    int v263 = *(unsigned __int8 *)(*(void *)(**(void **)(*v3 + 40) + 40) + 272);
    if ((_BYTE)__b) {
      uint64_t v264 = sub_1CB87E200((unsigned __int8 *)&__b);
    }
    else {
      uint64_t v264 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&__b);
    }
    unint64_t v473 = v264;
    if (v265 == 1) {
    if ((_BYTE)__src)
    }
      uint64_t v474 = sub_1CB87E200((unsigned __int8 *)&__src);
    else {
      uint64_t v474 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&__src);
    }
    unint64_t v476 = v474;
    if (v475 == 1) {
    uint64_t v477 = *v3;
    }
    unint64_t v478 = v473 / v476;
    if (v109) {
      uint64_t v479 = sub_1CD3DD4D8(v477, (llvm *)__src, *((uint64_t *)&__src + 1));
    }
    else {
      uint64_t v479 = sub_1CD7EBF14(v477, 0, (const llvm::APInt *)v574, (llvm *)__src, *((uint64_t *)&__src + 1), 0, 0);
    }
    uint64_t v481 = (uint64_t)v479;
    uint64_t v482 = (uint64_t)v480;
    unint64_t v483 = sub_1CD3DB440((llvm::EVT *)v572, v480) * v478;
    v580[0] = v581;
    v580[1] = (void *)0x800000000;
    sub_1CD3E535C((uint64_t *)v580, v483, v481, v482);
    if (*(_WORD *)(v2 + 56))
    {
      uint64_t v484 = 0;
      uint64_t v485 = 0;
      if (v263) {
        int v486 = v478 - 1;
      }
      else {
        int v486 = 0;
      }
      uint64_t v487 = 40 * *(unsigned __int16 *)(v2 + 56);
      do
      {
        uint64_t v488 = *(void *)(*(void *)(v2 + 32) + v484);
        if (*(_WORD *)(v488 + 24) == 51)
        {
          unint64_t v490 = sub_1CD3DD4D8(*v3, (llvm *)__src, *((uint64_t *)&__src + 1));
        }
        else
        {
          uint64_t v489 = *(void *)(v488 + 32);
          unint64_t v490 = *(uint64_t **)v489;
          int v491 = *(_DWORD *)(v489 + 8);
        }
        uint64_t v492 = (char *)v580[0] + 16 * (v486 + v485 * v478);
        *(void *)uint64_t v492 = v490;
        *((_DWORD *)v492 + 2) = v491;
        ++v485;
        v484 += 40;
      }
      while (v487 != v484);
    }
    unint64_t v493 = (llvm *)sub_1CB8E5DAC(*(llvm::LLVMContext **)(*v3 + 56), __src, *((uint64_t *)&__src + 1), v483, 0);
    if (*((unsigned char *)v3 + 34))
    {
      uint64_t v495 = v493;
      if (!(_BYTE)v493) {
        goto LABEL_647;
      }
      uint64_t v496 = (void **)v3[1];
      if (!v496[v493 + 12]) {
        goto LABEL_647;
      }
    }
    else
    {
      uint64_t v496 = (void **)v3[1];
      uint64_t v495 = v493;
    }
    if ((_BYTE)v493
      && (v493 == 1 || (v495 ? (BOOL v503 = v496[v495 + 12] == 0) : (BOOL v503 = 1), !v503))
      && !*((unsigned char *)v496 + 390 * v495 + 4008)
      || LOBYTE(v572[0]) != 1 && (!LOBYTE(v572[0]) || !v496[LOBYTE(v572[0]) + 12])
      || *((unsigned char *)v496 + 390 * LOBYTE(v572[0]) + 4008))
    {
      uint64_t v509 = *(void **)(*v3 + 832);
      if (v509) {
        uint64_t v510 = *((unsigned __int16 *)v509 + 4);
      }
      else {
        uint64_t v510 = 0;
      }
      int v513 = sub_1CD7FF4E8((void *)*v3, (const char *)0x92, (const llvm::APInt *)v574, v493, v494, (uint64_t *)v580[0], LODWORD(v580[1]), v510);
      uint64_t v515 = v514;
      sub_1CCEF0788((uint64_t)v3, (uint64_t)v513);
      uint64_t v9 = sub_1CD7EF724(*v3, (uint64_t)v572[0], (uint64_t)v572[1], (uint64_t)v513, v515);
LABEL_648:
      if (v580[0] != v581) {
        free(v580[0]);
      }
LABEL_272:
      if (!v574[0]) {
        goto LABEL_276;
      }
      int v195 = *(unsigned __int8 *)v574[0];
      if ((v195 - 4) > 0x1E)
      {
        if ((v195 - 3) >= 0xFFFFFFFE) {
          int v196 = v574[0];
        }
        else {
          int v196 = 0;
        }
        if ((v195 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v197 = (unint64_t)v196 + 8;
LABEL_283:
          v580[0] = v574;
          sub_1CC5FA668(v197 + 16, v580);
          goto LABEL_276;
        }
        if (v195 == 3) {
          *((void *)v574[0] + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v574[0] + 1) & 0x7F) == 2 || *((_DWORD *)v574[0] + 3))
      {
        uint64_t v517 = *((void *)v574[0] + 2);
        if ((v517 & 4) != 0)
        {
          unint64_t v197 = v517 & 0xFFFFFFFFFFFFFFF8;
          if (v197) {
            goto LABEL_283;
          }
        }
      }
LABEL_276:
      if (v9) {
        return (uint64_t *)v9;
      }
LABEL_46:
      if (*(unsigned char *)(*(void *)(**(void **)(*v3 + 40) + 40) + 272)) {
        goto LABEL_47;
      }
      uint64_t v120 = *(void **)(v2 + 64);
      v580[0] = v120;
      if (v120) {
        llvm::MetadataTracking::track((uint64_t)v580, (unsigned __int8 *)v120, 2);
      }
      LODWORD(v580[1]) = *(_DWORD *)(v2 + 60);
      *(_OWORD *)v574 = *(_OWORD *)*(void *)(v2 + 40);
      v572[0] = (void *)sub_1CD3DD468((unsigned __int8 *)v574, (uint64_t)v120, v5);
      v572[1] = v121;
      if (LOBYTE(v572[0])) {
        uint64_t v122 = sub_1CB87E200((unsigned __int8 *)v572);
      }
      else {
        uint64_t v122 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v572);
      }
      int8x8_t v124 = (int8x8_t)v122;
      if (v123 == 1) {
      uint8x8_t v125 = (uint8x8_t)vcnt_s8(v124);
      }
      v125.i16[0] = vaddlv_u8(v125);
      if (v125.u32[0] == 1)
      {
        uint64_t v126 = 0;
        uint64_t v127 = 0;
        uint64_t v128 = 0;
        uint64_t v129 = 0;
        do
        {
          uint64_t v130 = *(void *)(*(void *)(v2 + 32) + v127);
          int v131 = *(unsigned __int16 *)(v130 + 24);
          if (v131 == 216)
          {
            uint64_t v130 = **(void **)(v130 + 32);
            int v131 = *(unsigned __int16 *)(v130 + 24);
          }
          if (v131 != 51)
          {
            if (v131 != 201) {
              goto LABEL_214;
            }
            int v132 = *(unsigned int **)(v130 + 32);
            uint64_t v133 = *(void *)v132;
            int v134 = *(unsigned __int16 *)(*(void *)v132 + 24);
            if (v134 == 216)
            {
              int v132 = *(unsigned int **)(v133 + 32);
              uint64_t v133 = *(void *)v132;
              int v134 = *(unsigned __int16 *)(*(void *)v132 + 24);
            }
            if (v134 == 177)
            {
              uint64_t v135 = *(uint64_t **)(v133 + 32);
              uint64_t v136 = *v135;
              unsigned int v137 = v135;
              if (*(_WORD *)(*v135 + 24) == 216)
              {
                unsigned int v137 = *(uint64_t **)(v136 + 32);
                uint64_t v136 = *v137;
              }
              uint64_t v138 = *((unsigned int *)v137 + 2);
              if (v129)
              {
                if (v129 != v136 || v128 != v138) {
                  goto LABEL_214;
                }
              }
              else
              {
                uint64_t v129 = v136;
                uint64_t v128 = v138;
              }
              uint64_t v140 = v135[5];
              int v141 = *(unsigned __int16 *)(v140 + 24);
              if (v141 != 35 && v141 != 11) {
                goto LABEL_214;
              }
              uint64_t v143 = *(void *)(v140 + 80);
              uint64_t v144 = (void *)(v143 + 24);
              if (*(_DWORD *)(v143 + 32) >= 0x41u) {
                uint64_t v144 = (void *)*v144;
              }
              if (v126 != *v144) {
                goto LABEL_214;
              }
            }
            else
            {
              if (v127) {
                goto LABEL_214;
              }
              uint64_t v128 = v132[2];
              uint64_t v129 = v133;
            }
          }
          v127 += 40;
          v126 += *(void *)&v124;
        }
        while (40 * *(unsigned __int16 *)(v2 + 56) != v127);
        long long __src = *(_OWORD *)(*(void *)(v129 + 40) + 16 * v128);
        if ((_BYTE)__src) {
          uint64_t v145 = sub_1CB87E200((unsigned __int8 *)&__src);
        }
        else {
          uint64_t v145 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&__src);
        }
        uint64_t v198 = v145;
        int v199 = v146;
        if (LOBYTE(v574[0])) {
          uint64_t v200 = sub_1CB87E200((unsigned __int8 *)v574);
        }
        else {
          uint64_t v200 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v574);
        }
        uint64_t v9 = 0;
        if (v198 == v200 && v199 == v201) {
          uint64_t v9 = sub_1CD7EF724(*v3, (uint64_t)v574[0], (uint64_t)v574[1], v129, v128);
        }
      }
      else
      {
LABEL_214:
        uint64_t v9 = 0;
      }
      if (v580[0])
      {
        int v147 = *(unsigned __int8 *)v580[0];
        if ((v147 - 4) > 0x1E)
        {
          if ((v147 - 3) >= 0xFFFFFFFE) {
            uint64_t v191 = v580[0];
          }
          else {
            uint64_t v191 = 0;
          }
          if ((v147 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v192 = (unint64_t)v191 + 8;
LABEL_265:
            v574[0] = v580;
            sub_1CC5FA668(v192 + 16, v574);
            goto LABEL_219;
          }
          if (v147 == 3) {
            *((void *)v580[0] + 1) = 0;
          }
        }
        else if ((*((unsigned char *)v580[0] + 1) & 0x7F) == 2 || *((_DWORD *)v580[0] + 3))
        {
          uint64_t v520 = *((void *)v580[0] + 2);
          if ((v520 & 4) != 0)
          {
            unint64_t v192 = v520 & 0xFFFFFFFFFFFFFFF8;
            if (v192) {
              goto LABEL_265;
            }
          }
        }
      }
LABEL_219:
      if (v9) {
        return (uint64_t *)v9;
      }
LABEL_47:
      uint64_t v40 = *(unsigned __int8 **)(v2 + 64);
      uint64_t v567 = v40;
      if (v40) {
        llvm::MetadataTracking::track((uint64_t)&v567, v40, 2);
      }
      int v568 = *(_DWORD *)(v2 + 60);
      int v41 = *(long long **)(v2 + 40);
      long long v42 = *v41;
      long long v566 = *v41;
      if (*((unsigned char *)v3 + 34) && (!(_BYTE)v42 || !*(void *)(v3[1] + 8 * v42 + 96))) {
        goto LABEL_77;
      }
      uint64_t v43 = *(unsigned __int16 *)(v2 + 56);
      if (!*(_WORD *)(v2 + 56)) {
        goto LABEL_72;
      }
      uint64_t v44 = 0;
      uint64_t v45 = *v3;
      uint64_t v46 = *(void *)(v2 + 32);
      unsigned int v47 = -1;
      uint64_t v48 = v46;
      do
      {
        if (*(_WORD *)(*(void *)v48 + 24) != 51)
        {
          if (v47 != -1) {
            goto LABEL_72;
          }
          unsigned int v47 = v44;
        }
        ++v44;
        v48 += 40;
      }
      while (v43 != v44);
      if (v47 == -1) {
        goto LABEL_72;
      }
      *(_OWORD *)v574 = *v41;
      *(_OWORD *)__int16 v572 = *(_OWORD *)(v46 + 40 * v47);
      if (*((_WORD *)v572[0] + 12) != 199) {
        goto LABEL_72;
      }
      uint64_t v49 = *((void *)v572[0] + 6);
      if (!v49) {
        goto LABEL_72;
      }
      int v50 = 1;
      do
      {
        if (*(_DWORD *)(v49 + 8) == LODWORD(v572[1]))
        {
          if (!v50) {
            goto LABEL_72;
          }
          --v50;
        }
        uint64_t v49 = *(void *)(v49 + 32);
      }
      while (v49);
      if (v50) {
        goto LABEL_72;
      }
      uint64_t v51 = **((void **)v572[0] + 4);
      if (*(_WORD *)(v51 + 24) != 148) {
        goto LABEL_72;
      }
      int v52 = *(unsigned __int16 *)(*(void *)(*(void *)(v51 + 32) + 40) + 24);
      if (v52 != 35 && v52 != 11) {
        goto LABEL_72;
      }
      uint64_t v277 = sub_1CD3E3904((unsigned int *)v572);
      if (v275 == 1) {
      if (v277 != sub_1CD3E12F4((unsigned __int8 *)v574, (uint64_t)v275, v276))
      }
        goto LABEL_72;
      long long __src = *(_OWORD *)*((void *)v572[0] + 4);
      unsigned int v279 = sub_1CD3E3904((unsigned int *)v572);
      if (v278 == 1) {
      unsigned int v281 = sub_1CD3E3904((unsigned int *)&__src);
      }
      if (v280 == 1) {
      int v282 = v279 / v281;
      }
      if (v279 % v281
        || ((BOOL v283 = sub_1CD3E3904(*(unsigned int **)(__src + 32)), v285 = v284, !LOBYTE(v574[0]))
          ? (uint64_t v286 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v574))
          : (uint64_t v286 = sub_1CB87E200((unsigned __int8 *)v574)),
            v283 != (llvm::Type *)v286 || v285 != v287))
      {
LABEL_72:
        if (!*((unsigned char *)v3 + 33)) {
          goto LABEL_78;
        }
        if (!(_BYTE)v566)
        {
          uint64_t v9 = 0;
          goto LABEL_138;
        }
        uint64_t v54 = (void **)v3[1];
        if (v566 == 1 || (uint64_t v9 = 0, v54[v566 + 12]))
        {
          if (*((unsigned char *)v54 + 390 * v566 + 4015))
          {
LABEL_77:
            uint64_t v9 = 0;
            goto LABEL_138;
          }
LABEL_78:
          uint64_t v55 = *(unsigned __int16 *)(v2 + 56);
          __b = v579;
          HIDWORD(v578) = 8;
          if (v55 >= 9)
          {
            LODWORD(v578) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v55) {
            memset(v579, 255, 4 * v55);
          }
          uint64_t v56 = v579;
          LODWORD(v578) = v55;
          v580[0] = v581;
          v581[1] = 0;
          v581[0] = 0;
          v580[1] = (void *)0x800000001;
          if (!v55)
          {
            uint64_t v9 = 0;
            goto LABEL_134;
          }
          uint64_t v57 = 0;
          uint64_t v58 = 0;
          do
          {
            uint64_t v59 = (uint64_t *)(*(void *)(v2 + 32) + 40 * v57);
            uint64_t v60 = *v59;
            int v61 = *(unsigned __int16 *)(*v59 + 24);
            if (v61 != 51)
            {
              if (sub_1CD7F2D2C(*v59) || sub_1CD8028FC(v60))
              {
                LODWORD(v62) = 0;
                uint64_t v58 = 1;
              }
              else
              {
                if (v61 != 148) {
                  goto LABEL_131;
                }
                unsigned int v64 = *(void **)(v60 + 32);
                uint64_t v65 = v64[5];
                int v66 = *(unsigned __int16 *)(v65 + 24);
                if (v66 != 35 && v66 != 11) {
                  goto LABEL_131;
                }
                uint64_t v68 = v58;
                uint64_t v69 = *v64;
                uint64_t v70 = v64[1];
                uint64_t v71 = *(void *)(*v64 + 40) + 16 * v70;
                unsigned int v72 = *(void **)v71;
                if (*(void *)v71)
                {
                  if (*(void *)v71 - 120 < 0x33) {
                    goto LABEL_131;
                  }
                  unint64_t v73 = *(unsigned char **)(v71 + 8);
                }
                else
                {
                  unint64_t v73 = *(unsigned char **)(v71 + 8);
                  if (v73[8] == 19) {
                    goto LABEL_131;
                  }
                }
                uint64_t v74 = *(void *)(v65 + 80);
                unsigned int v75 = (void *)(v74 + 24);
                v574[0] = v72;
                v574[1] = v73;
                unsigned int v76 = sub_1CD3DB440((llvm::EVT *)v574, v63);
                uint64_t v78 = *(unsigned int *)(v74 + 32);
                if (v78 >= 0x41)
                {
                  int v79 = 0;
                  int64_t v80 = (unint64_t)(v78 + 63) >> 6;
                  do
                  {
                    BOOL v81 = v80-- < 1;
                    if (v81) {
                      break;
                    }
                    unint64_t v82 = *(void *)(*v75 + 8 * v80);
                    v79 += __clz(v82);
                  }
                  while (!v82);
                  int v83 = v78 | 0xFFFFFFC0;
                  if ((v78 & 0x3F) == 0) {
                    int v83 = 0;
                  }
                  if ((v78 - v79 - v83) > 0x40) {
                    goto LABEL_131;
                  }
                  unsigned int v75 = (void *)*v75;
                }
                if (*v75 >= (unint64_t)v76) {
                  goto LABEL_131;
                }
                if ((_BYTE)v566)
                {
                  char v85 = sub_1CB8C2FBC((unsigned __int8 *)&v566);
                  uint64_t v86 = 0;
                }
                else
                {
                  char v85 = llvm::EVT::getEVT(*(llvm::EVT **)(*((void *)&v566 + 1) + 24), 0, v77);
                  uint64_t v86 = v87;
                }
                uint64_t v88 = *(void *)(v69 + 40) + 16 * v70;
                unsigned int v90 = *(void **)v88;
                uint64_t v89 = *(llvm::EVT ***)(v88 + 8);
                v574[0] = v90;
                v574[1] = v89;
                if ((_BYTE)v90)
                {
                  char v91 = sub_1CB8C2FBC((unsigned __int8 *)v574);
                  uint64_t v92 = 0;
                }
                else
                {
                  char v91 = llvm::EVT::getEVT(v89[3], 0, v84);
                }
                if (v85 != v91 || !v85 && v86 != v92) {
                  goto LABEL_131;
                }
                int v93 = (int)v580[1];
                uint64_t v94 = (char *)v580[0];
                if (LODWORD(v580[1]))
                {
                  uint64_t v95 = 16 * LODWORD(v580[1]);
                  uint64_t v94 = (char *)v580[0];
                  while (*(void *)v94 != v69 || *((_DWORD *)v94 + 2) != v70)
                  {
                    v94 += 16;
                    v95 -= 16;
                    if (!v95)
                    {
                      uint64_t v94 = (char *)v580[0] + 16 * LODWORD(v580[1]);
                      break;
                    }
                  }
                }
                uint64_t v96 = v94 - (char *)v580[0];
                if (LODWORD(v580[1]) == v96 >> 4 || (unint64_t v62 = (unint64_t)v96 >> 4, v62 == -1))
                {
                  if (LODWORD(v580[1]) >= HIDWORD(v580[1])) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  unint64_t v97 = (char *)v580[0] + 16 * LODWORD(v580[1]);
                  *unint64_t v97 = v69;
                  v97[1] = v70;
                  ++LODWORD(v580[1]);
                  LODWORD(v62) = v93;
                }
                uint64_t v58 = v68;
              }
              uint64_t v56 = __b;
              *((_DWORD *)__b + v57) = v62;
            }
            ++v57;
          }
          while (v57 != v55);
          if (LODWORD(v580[1]) < 2)
          {
LABEL_131:
            uint64_t v9 = 0;
LABEL_134:
            if (v580[0] != v581) {
              free(v580[0]);
            }
            if (__b != v579) {
              free(__b);
            }
            goto LABEL_138;
          }
          char v553 = v58;
          if (LODWORD(v580[1]) == 2)
          {
            unint64_t v180 = v3;
            uint64_t v181 = *((void *)v580[0] + 2);
            uint64_t v182 = *((void *)v580[0] + 3);
            *(_OWORD *)__int16 v572 = *(_OWORD *)(*(void *)(v181 + 40) + 16 * v182);
            v574[0] = v575;
            HIDWORD(v574[1]) = 8;
            bzero(v575, 4 * v55);
            uint64_t v183 = v575;
            uint64_t v184 = 0;
            uint64_t v185 = 0;
            unsigned int v186 = 0;
            LODWORD(v574[1]) = v55;
            do
            {
              if (*(int *)&v56[4 * v185] >= 1)
              {
                uint64_t v187 = *(void *)(*(void *)(*(void *)(*(void *)(*(void *)(v2 + 32) + v184) + 32) + 40)
                                 + 80);
                uint64_t v188 = (void *)(v187 + 24);
                if (*(_DWORD *)(v187 + 32) >= 0x41u) {
                  uint64_t v188 = (void *)*v188;
                }
                unsigned int v189 = *(_DWORD *)v188;
                v575[v185] = v189;
                if (v186 <= v189) {
                  unsigned int v186 = v189;
                }
              }
              ++v185;
              v184 += 40;
            }
            while (v55 != v185);
            if (v186)
            {
              unint64_t v240 = (v186 - 1) | (((unint64_t)v186 - 1) >> 1);
              unint64_t v241 = v240 | (v240 >> 2) | ((v240 | (v240 >> 2)) >> 4);
              uint64_t v190 = (v241 | (v241 >> 8) | ((v241 | (v241 >> 8)) >> 16)) + 1;
            }
            else
            {
              LODWORD(v190) = 0;
            }
            char __len = 0;
            if (LOBYTE(v572[0])
              && v190 >= 3
              && v186 < v190
              && 2 * (int)v55 < v190)
            {
              uint64_t v242 = v2;
              uint64_t v243 = v190 >> 1;
              uint64_t v244 = *(llvm::LLVMContext **)(*v180 + 56);
              unsigned __int8 v245 = sub_1CB8C2FBC((unsigned __int8 *)v572);
              char __len = 0;
              *(void *)&long long __src = sub_1CB8E5DAC(v244, v245, 0, v243, 0);
              *((void *)&__src + 1) = v246;
              if ((_BYTE)__src)
              {
                if (*(void *)(v180[1] + 8 * __src + 96)
                  && (unsigned int v247 = sub_1CD3DB440((llvm::EVT *)&__src, v246) + v243,
                      v247 <= sub_1CD3DB440((llvm::EVT *)v572, v248)))
                {
                  uint64_t v291 = *v180;
                  long long v292 = __src;
                  uint64_t v293 = sub_1CD7EC9F4(*v180, v243, (uint64_t)&v567, 0);
                  uint64_t v296 = *(void *)(v291 + 832);
                  if (v296) {
                    LOWORD(v296) = *(_WORD *)(v296 + 8);
                  }
                  uint64_t v559 = sub_1CCFDED5C(v291, 151, (const llvm::APInt *)&v567, (llvm *)v292, *((uint64_t *)&v292 + 1), v181, v182, v295, v293, v294, v296);
                  uint64_t v297 = *v180;
                  __lena = (llvm *)__src;
                  uint64_t v557 = v298;
                  uint64_t v550 = *((void *)&__src + 1);
                  uint64_t v299 = sub_1CD7EC9F4(*v180, 0, (uint64_t)&v567, 0);
                  __int16 v302 = 0;
                  uint64_t v303 = *(void *)(v297 + 832);
                  if (v303) {
                    __int16 v302 = *(_WORD *)(v303 + 8);
                  }
                  char v305 = sub_1CCFDED5C(v297, 151, (const llvm::APInt *)&v567, __lena, v550, v181, v182, v301, v299, v300, v302);
                  unsigned int v306 = LODWORD(v580[1]) - 1;
                  LODWORD(v580[1]) = v306;
                  if (v306 >= HIDWORD(v580[1])) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  uint64_t v307 = (uint64_t **)((char *)v580[0] + 16 * v306);
                  *uint64_t v307 = v305;
                  v307[1] = v304;
                  unsigned int v308 = LODWORD(v580[1]) + 1;
                  LODWORD(v580[1]) = v308;
                  if (v308 >= HIDWORD(v580[1])) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  unint64_t v309 = (uint64_t **)((char *)v580[0] + 16 * v308);
                  *unint64_t v309 = v559;
                  v309[1] = v557;
                  ++LODWORD(v580[1]);
                  uint64_t v310 = (int *)__b;
                  uint64_t v311 = v574[0];
                  uint64_t v312 = v55;
                  do
                  {
                    if (*v310 >= 1)
                    {
                      if (*v311 < v243) {
                        int v313 = 1;
                      }
                      else {
                        int v313 = 2;
                      }
                      int *v310 = v313;
                    }
                    ++v311;
                    ++v310;
                    --v312;
                  }
                  while (v312);
                  char __len = 1;
                }
                else
                {
                  char __len = 0;
                }
              }
              uint64_t v183 = v574[0];
              uint64_t v2 = v242;
            }
            if (v183 != v575) {
              free(v183);
            }
            v574[0] = v575;
            v574[1] = (void *)0x800000000;
            uint64_t v3 = v180;
            if (!LODWORD(v580[1]))
            {
              uint64_t v314 = (const char *)&v576;
              unint64_t v315 = -1;
              int v316 = (char *)v575;
              goto LABEL_398;
            }
          }
          else
          {
            char __len = 0;
            v574[0] = v575;
            v574[1] = (void *)0x800000000;
          }
          sub_1CD629BB0((uint64_t)v574, (uint64_t)v580);
          unint64_t v315 = LODWORD(v574[1]) - 1;
          uint64_t v314 = (char *)v574[0] + 16;
          int v316 = (char *)v574[0] + 16 * LODWORD(v574[1]);
          if (LODWORD(v574[1]) >= 0x82)
          {
            uint64_t v317 = v2;
            uint64_t v318 = v3;
            int v319 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
            unint64_t v320 = LODWORD(v574[1]) - 1;
            while (1)
            {
              unsigned int v321 = (unsigned int *)operator new(16 * v320, v319);
              if (v321) {
                break;
              }
              BOOL v81 = v320 > 1;
              v320 >>= 1;
              if (!v81)
              {
                uint64_t v3 = v318;
                goto LABEL_398;
              }
            }
            uint64_t v469 = v321;
            sub_1CCF661BC(v314, v316, v315, v321, v320);
            operator delete(v469);
            uint64_t v3 = v318;
            uint64_t v2 = v317;
            goto LABEL_399;
          }
LABEL_398:
          sub_1CCF661BC(v314, v316, v315, 0, 0);
LABEL_399:
          char v322 = v553;
          if (v578)
          {
            int v323 = (char *)__b;
            unint64_t v324 = (char *)__b + 4 * v578;
            uint64_t v325 = (char *)v580[0];
            uint64_t v326 = (char *)v574[0];
            do
            {
              uint64_t v327 = *(unsigned int *)v323;
              if ((int)v327 >= 1)
              {
                if (LODWORD(v574[1]))
                {
                  uint64_t v328 = &v325[16 * v327];
                  uint64_t v331 = *(void *)v328;
                  unint64_t v329 = v328 + 8;
                  uint64_t v330 = v331;
                  uint64_t v332 = 16 * LODWORD(v574[1]);
                  unint64_t v333 = v326;
                  while (*(void *)v333 != v330 || *((_DWORD *)v333 + 2) != *v329)
                  {
                    v333 += 16;
                    v332 -= 16;
                    if (!v332)
                    {
                      unint64_t v333 = &v326[16 * LODWORD(v574[1])];
                      break;
                    }
                  }
                }
                else
                {
                  unint64_t v333 = v326;
                }
                uint64_t v334 = v333 - v326;
                if (LODWORD(v574[1]) == v334 >> 4) {
                  int v335 = -1;
                }
                else {
                  int v335 = (unint64_t)v334 >> 4;
                }
                *(_DWORD *)int v323 = v335;
              }
              v323 += 4;
            }
            while (v323 != v324);
          }
          sub_1CD727100((uint64_t)v580, (uint64_t)v574);
          v572[0] = v573;
          v572[1] = (void *)0x400000000;
          if (LODWORD(v580[1]) < 2)
          {
            unsigned int v336 = 0;
            goto LABEL_523;
          }
          uint64_t v337 = 0;
          unint64_t v544 = (unint64_t)LODWORD(v580[1]) >> 1;
          long long v562 = v3;
          while (1)
          {
            uint64_t v338 = v2;
            unint64_t v339 = 2 * v337 + 2;
            if (v339 >= LODWORD(v580[1]))
            {
              uint64_t v341 = 0;
              unsigned __int8 v342 = 0;
            }
            else
            {
              uint64_t v340 = (uint64_t **)((char *)v580[0] + 16 * v339);
              unsigned __int8 v342 = *v340;
              uint64_t v341 = (uint64_t)v340[1];
            }
            uint64_t v343 = (2 * v337) | 1;
            int v344 = (uint64_t **)((char *)v580[0] + 16 * v343);
            unsigned __int8 v346 = *v344;
            uint64_t v345 = (uint64_t)v344[1];
            unsigned __int8 v347 = (int *)__b;
            uint64_t v348 = sub_1CD7EC9F4(*v562, 0, (uint64_t)&v567, 0);
            uint64_t v546 = (uint64_t)v349;
            uint64_t v547 = v348;
            long long v571 = *(_OWORD *)*(void *)(v338 + 40);
            int64_t v549 = v346;
            long long v570 = *(_OWORD *)(v346[5] + 16 * v345);
            unsigned int v350 = v342;
            if (v342) {
              long long v351 = *(_OWORD *)(v342[5] + 16 * v341);
            }
            else {
              long long v351 = v570;
            }
            long long v569 = v351;
            unsigned int v560 = sub_1CD3DB440((llvm::EVT *)&v571, v349);
            if (__len) {
              int v353 = 0;
            }
            else {
              int v353 = sub_1CD3DB440((llvm::EVT *)&v570, v352);
            }
            uint64_t v551 = v345;
            if ((_BYTE)v571) {
              uint64_t v354 = sub_1CB87E200((unsigned __int8 *)&v571);
            }
            else {
              uint64_t v354 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v571);
            }
            unint64_t v355 = v354;
            uint64_t v548 = v341;
            if ((_BYTE)v570) {
              uint64_t v356 = sub_1CB87E200((unsigned __int8 *)&v570);
            }
            else {
              uint64_t v356 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v570);
            }
            unint64_t v357 = v356;
            if ((_BYTE)v569) {
              uint64_t v358 = sub_1CB87E200((unsigned __int8 *)&v569);
            }
            else {
              uint64_t v358 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v569);
            }
            if (v570 == v571
              && (*((void *)&v570 + 1) != *((void *)&v571 + 1) ? (BOOL v359 = v570 == 0) : (BOOL v359 = 0),
                  !v359
               && v569 == v570
               && ((_BYTE)v570 || *((void *)&v569 + 1) == *((void *)&v571 + 1))))
            {
              uint64_t v545 = v337;
              unsigned int v378 = v560;
              unsigned int v375 = v548;
            }
            else
            {
              if (v355 % v357) {
                BOOL v360 = 0;
              }
              else {
                BOOL v360 = v570 == v569;
              }
              if (v360 && ((_BYTE)v570 || *((void *)&v570 + 1) == *((void *)&v569 + 1)))
              {
                uint64_t v399 = sub_1CD3DD4D8(*v562, (llvm *)v570, *((uint64_t *)&v570 + 1));
                *(void *)&long long __src = v583;
                *((void *)&__src + 1) = 0x200000000;
                sub_1CD3E535C((uint64_t *)&__src, (v355 / v357), (uint64_t)v399, v400);
                uint64_t v401 = __src;
                int v402 = v548;
                *(void *)long long __src = v549;
                *(_DWORD *)(v401 + 8) = v551;
                if (!v350) {
                  unsigned int v350 = sub_1CD3DD4D8(*v562, (llvm *)v570, *((uint64_t *)&v570 + 1));
                }
                uint64_t v403 = __src;
                *(void *)(__src + 16) = v350;
                *(_DWORD *)(v403 + 24) = v402;
                uint64_t v404 = *(void *)(*v562 + 832);
                if (v404) {
                  uint64_t v405 = *(unsigned __int16 *)(v404 + 8);
                }
                else {
                  uint64_t v405 = 0;
                }
                uint64_t v545 = v337;
                int64_t v549 = sub_1CD7FF4E8((void *)*v562, (const char *)0x95, (const llvm::APInt *)&v567, (llvm *)v571, *((uint64_t *)&v571 + 1), (uint64_t *)v403, DWORD2(__src), v405);
                int v417 = v416;
                if ((void *)__src != v583) {
                  free((void *)__src);
                }
                unsigned int v350 = 0;
                LODWORD(v551) = v417;
                unsigned int v375 = 0;
LABEL_475:
                unsigned int v378 = v560;
                goto LABEL_479;
              }
              if (v357 != 2 * v355)
              {
                if (v355 != 2 * v358 || v357 != v355) {
                  goto LABEL_522;
                }
                uint64_t v363 = sub_1CD3DD4D8(*v562, (llvm *)v569, *((uint64_t *)&v569 + 1));
                *(void *)&long long __src = v583;
                *((void *)&__src + 1) = 0x200000000;
                sub_1CD3E535C((uint64_t *)&__src, 2uLL, (uint64_t)v363, v364);
                uint64_t v365 = __src;
                *(void *)long long __src = v350;
                *(_DWORD *)(v365 + 8) = v548;
                uint64_t v366 = *(void *)(*v562 + 832);
                if (v366) {
                  uint64_t v367 = *(unsigned __int16 *)(v366 + 8);
                }
                else {
                  uint64_t v367 = 0;
                }
                uint64_t v545 = v337;
                unsigned int v350 = sub_1CD7FF4E8((void *)*v562, (const char *)0x95, (const llvm::APInt *)&v567, (llvm *)v571, *((uint64_t *)&v571 + 1), (uint64_t *)__src, DWORD2(__src), v367);
                unsigned int v377 = v376;
                if ((void *)__src != v583) {
                  free((void *)__src);
                }
                unsigned int v375 = v377;
                goto LABEL_475;
              }
              if (!(*(unsigned int (**)(uint64_t))(*(void *)v562[1] + 1408))(v562[1])) {
                goto LABEL_522;
              }
              if (v350)
              {
                if (*((unsigned char *)v562 + 33))
                {
                  char v361 = (void *)v562[1];
                  int v362 = v570;
                  if (v570 != 1 && (!(_BYTE)v570 || !v361[v570 + 12])
                    || *((unsigned char *)v361 + 390 * v570 + 4015))
                  {
LABEL_522:
                    uint64_t v9 = 0;
                    uint64_t v3 = v562;
                    uint64_t v2 = v338;
                    goto LABEL_584;
                  }
                }
                else
                {
                  int v362 = v570;
                }
                if (v362 == v569 && (v362 || *((void *)&v570 + 1) == *((void *)&v569 + 1)))
                {
                  uint64_t v545 = v337;
                  unsigned int v375 = v548;
                }
                else
                {
                  if (!(_BYTE)v569 || !*(void *)(v562[1] + 8 * v569 + 96)) {
                    goto LABEL_522;
                  }
                  uint64_t v368 = (void *)*v562;
                  long long v369 = v570;
                  uint64_t v371 = sub_1CD3DD4D8(*v562, (llvm *)v570, *((uint64_t *)&v570 + 1));
                  uint64_t v373 = v368[104];
                  if (v373) {
                    LOWORD(v373) = *(_WORD *)(v373 + 8);
                  }
                  uint64_t v545 = v337;
                  unsigned int v350 = sub_1CD7F5D38(v368, (const char *)0x96, (const llvm::APInt *)&v567, (llvm *)v369, *((uint64_t *)&v369 + 1), (uint64_t)v371, v370, v372, (uint64_t)v350, v548, v547, v546, SHIDWORD(v546), v373);
                  unsigned int v375 = v374;
                }
                unsigned int v378 = 2 * v560;
              }
              else
              {
                uint64_t v406 = *v562;
                long long v407 = v571;
                uint64_t v408 = sub_1CD7EC9F4(*v562, v560, (uint64_t)&v567, 0);
                uint64_t v411 = *(void *)(v406 + 832);
                if (v411) {
                  LOWORD(v411) = *(_WORD *)(v411 + 8);
                }
                unsigned int v350 = sub_1CCFDED5C(v406, 151, (const llvm::APInt *)&v567, (llvm *)v407, *((uint64_t *)&v407 + 1), (uint64_t)v549, v551, v410, v408, v409, v411);
                uint64_t v414 = *(void *)(*v562 + 832);
                uint64_t v545 = v337;
                if (v414) {
                  LOWORD(v414) = *(_WORD *)(v414 + 8);
                }
                unsigned int v375 = v412;
                int64_t v549 = sub_1CCFDED5C(*v562, 151, (const llvm::APInt *)&v567, (llvm *)v571, *((uint64_t *)&v571 + 1), (uint64_t)v549, v551, v413, v547, v546, v414);
                LODWORD(v551) = v415;
                unsigned int v378 = v560;
                int v353 = v560;
              }
            }
LABEL_479:
            *(void *)&long long __src = v583;
            HIDWORD(__src) = 8;
            if (v378 >= 9)
            {
              DWORD2(__src) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v378) {
              memset(v583, 255, 4 * v378);
            }
            DWORD2(__src) = v378;
            if (v560)
            {
              uint64_t v379 = 0;
              int v380 = (_DWORD *)__src;
              while (1)
              {
                int v382 = *v347++;
                uint64_t v381 = v382;
                if (v382 >= 1)
                {
                  uint64_t v383 = *(void *)(*(void *)(*(void *)(*(void *)(*(void *)(v338 + 32) + v379) + 32) + 40)
                                   + 80);
                  __int16 v384 = (void *)(v383 + 24);
                  if (*(_DWORD *)(v383 + 32) >= 0x41u) {
                    __int16 v384 = (void *)*v384;
                  }
                  int v385 = *(_DWORD *)v384;
                  if (v343 == v381) {
                    goto LABEL_490;
                  }
                  if (v339 == v381) {
                    break;
                  }
                }
LABEL_491:
                v379 += 40;
                ++v380;
                if (40 * v560 == v379) {
                  goto LABEL_492;
                }
              }
              v385 += v353;
LABEL_490:
              *int v380 = v385;
              goto LABEL_491;
            }
LABEL_492:
            uint64_t v386 = v549[5] + 16 * v551;
            unint64_t v387 = *(llvm **)v386;
            uint64_t v388 = *(void *)(v386 + 8);
            *(void *)&long long v570 = *(void *)v386;
            *((void *)&v570 + 1) = v388;
            if (v350)
            {
              unsigned int v389 = v375;
              uint64_t v3 = v562;
            }
            else
            {
              uint64_t v3 = v562;
              unsigned int v350 = sub_1CD3DD4D8(*v562, v387, v388);
              unsigned int v389 = v398;
              uint64_t v388 = *((void *)&v570 + 1);
              unint64_t v387 = (llvm *)v570;
            }
            uint64_t v2 = v338;
            uint64_t v392 = sub_1CCFCDA78(*v3, v387, v388, (uint64_t)&v567, (uint64_t)v549, v551, (uint64_t)v350, v389, (void *)__src, DWORD2(__src));
            unint64_t v393 = v390;
            if (v378 <= v560)
            {
              uint64_t v395 = v545;
            }
            else
            {
              unsigned int v394 = *(void **)(*v3 + 832);
              uint64_t v395 = v545;
              if (v394) {
                LOWORD(v394) = *((_WORD *)v394 + 4);
              }
              uint64_t v392 = sub_1CCFDED5C(*v3, 151, (const llvm::APInt *)&v567, (llvm *)v571, *((uint64_t *)&v571 + 1), (uint64_t)v392, v390, v391, v547, v546, (__int16)v394);
              unint64_t v393 = v393 & 0xFFFFFFFF00000000 | v396;
            }
            if ((void *)__src != v583) {
              free((void *)__src);
            }
            if (!v392)
            {
              uint64_t v9 = 0;
              goto LABEL_584;
            }
            if (LODWORD(v572[1]) >= (unint64_t)HIDWORD(v572[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            unint64_t v397 = (uint64_t **)((char *)v572[0] + 16 * LODWORD(v572[1]));
            *unint64_t v397 = v392;
            v397[1] = (uint64_t *)v393;
            unsigned int v336 = ++LODWORD(v572[1]);
            uint64_t v337 = v395 + 1;
            if (v337 == v544)
            {
              char v322 = v553;
LABEL_523:
              if ((v322 & 1) == 0)
              {
LABEL_524:
                if (v336 != 1)
                {
                  if (v578)
                  {
                    uint64_t v418 = (int *)__b;
                    uint64_t v419 = 4 * v578;
                    do
                    {
                      int v420 = *v418;
                      if (*v418)
                      {
                        if (v420 >= 1) {
                          --v420;
                        }
                        int v421 = v420 >> 1;
                      }
                      else
                      {
                        int v421 = LODWORD(v572[1]) - 1;
                      }
                      *v418++ = v421;
                      v419 -= 4;
                    }
                    while (v419);
                    unsigned int v336 = v572[1];
                  }
                  if (v336)
                  {
                    uint64_t v498 = sub_1CD3DD4D8(*v3, (llvm *)v566, *((uint64_t *)&v566 + 1));
                    if (LODWORD(v572[1]) >= HIDWORD(v572[1])) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    uint64_t v499 = (uint64_t **)((char *)v572[0] + 16 * LODWORD(v572[1]));
                    const char *v499 = v498;
                    v499[1] = v497;
                    unsigned int v336 = ++LODWORD(v572[1]);
                  }
                  if (v336 >= 2)
                  {
                    unsigned int v563 = v3;
                    uint64_t v558 = v2;
                    do
                    {
                      if (v336)
                      {
                        unsigned int v465 = v336;
                        uint64_t v466 = sub_1CD3DD4D8(*v3, (llvm *)v566, *((uint64_t *)&v566 + 1));
                        uint64_t v467 = (char *)v572[0] + 16 * v465;
                        *(void *)uint64_t v467 = v466;
                        *((_DWORD *)v467 + 2) = v468;
                        unsigned int v336 = v465 + 1;
                      }
                      if (v336 < 2) {
                        break;
                      }
                      uint64_t v422 = 0;
                      unsigned int v552 = v336;
                      LODWORD(v423) = v336 >> 1;
                      unsigned int v554 = v336 >> 1;
                      if (v336 >> 1 <= 1) {
                        uint64_t v423 = 1;
                      }
                      else {
                        uint64_t v423 = v423;
                      }
                      uint64_t v561 = v423;
                      do
                      {
                        *(void *)&long long __src = v583;
                        HIDWORD(__src) = 8;
                        memset(v583, 255, 4 * v55);
                        DWORD2(__src) = v55;
                        uint64_t v425 = (char *)v572[0];
                        uint64_t v426 = (char *)v572[0] + (v422 << 33 >> 28);
                        uint64_t v428 = (void *)*v426;
                        uint64_t v427 = v426[1];
                        if (*(_WORD *)(*v426 + 24) != 153) {
                          goto LABEL_554;
                        }
                        uint64_t v429 = v428[6];
                        if (v429)
                        {
                          while (*(_DWORD *)(v429 + 8) != v427)
                          {
                            uint64_t v429 = *(void *)(v429 + 32);
                            if (!v429) {
                              goto LABEL_548;
                            }
                          }
LABEL_554:
                          int v438 = 0;
                          uint64_t v439 = 0;
                          goto LABEL_555;
                        }
LABEL_548:
                        uint64_t v430 = v428[4];
                        if (*(_WORD *)(*(void *)(v430 + 40) + 24) != 51) {
                          goto LABEL_554;
                        }
                        uint64_t v431 = (unsigned __int8 *)(*(void *)(*(void *)v430 + 40)
                                                 + 16 * *(unsigned int *)(v430 + 8));
                        int v432 = *v431;
                        uint64_t v433 = (long long *)v428[5];
                        unsigned int v434 = (unsigned __int8 *)&v433[v427];
                        if (v432 != *v434) {
                          goto LABEL_554;
                        }
                        uint64_t v435 = *((void *)v434 + 1);
                        uint64_t v436 = *((void *)v431 + 1);
                        if (!v432 && v436 != v435) {
                          goto LABEL_554;
                        }
                        long long v571 = *v433;
                        uint64_t v439 = v428[10];
                        sub_1CD3DB440((llvm::EVT *)&v571, v424);
                        uint64_t v463 = v428[4];
                        uint64_t v428 = *(void **)v463;
                        LODWORD(v427) = *(_DWORD *)(v463 + 8);
                        int v438 = 1;
                        uint64_t v425 = (char *)v572[0];
LABEL_555:
                        uint64_t v440 = (2 * v422) | 1;
                        uint64_t v441 = &v425[16 * (int)v440];
                        int v442 = *(void **)v441;
                        uint64_t v443 = *((void *)v441 + 1);
                        if (*(_WORD *)(*(void *)v441 + 24) == 153)
                        {
                          uint64_t v444 = v442[6];
                          if (v444)
                          {
                            while (*(_DWORD *)(v444 + 8) != v443)
                            {
                              uint64_t v444 = *(void *)(v444 + 32);
                              if (!v444) {
                                goto LABEL_559;
                              }
                            }
                          }
                          else
                          {
LABEL_559:
                            uint64_t v445 = v442[4];
                            if (*(_WORD *)(*(void *)(v445 + 40) + 24) == 51)
                            {
                              uint64_t v446 = (unsigned __int8 *)(*(void *)(*(void *)v445 + 40)
                                                       + 16 * *(unsigned int *)(v445 + 8));
                              int v447 = *v446;
                              uint64_t v448 = (long long *)v442[5];
                              uint64_t v449 = (unsigned __int8 *)&v448[v443];
                              if (v447 == *v449)
                              {
                                uint64_t v450 = *((void *)v449 + 1);
                                uint64_t v451 = *((void *)v446 + 1);
                                if (v447 || v451 == v450)
                                {
                                  long long v571 = *v448;
                                  uint64_t v454 = v442[10];
                                  sub_1CD3DB440((llvm::EVT *)&v571, v424);
                                  uint64_t v464 = v442[4];
                                  int v442 = *(void **)v464;
                                  LODWORD(v443) = *(_DWORD *)(v464 + 8);
                                  int v453 = 1;
                                  goto LABEL_566;
                                }
                              }
                            }
                          }
                        }
                        int v453 = 0;
                        uint64_t v454 = 0;
LABEL_566:
                        uint64_t v455 = 0;
                        int v456 = (_DWORD *)__src;
                        uint64_t v457 = __b;
                        do
                        {
                          uint64_t v458 = v457[v455];
                          if (2 * v422 == v458)
                          {
                            v456[v455] = v455;
                            if (v438)
                            {
                              int v459 = *(_DWORD *)(v439 + 4 * v455);
LABEL_573:
                              v456[v455] = v459;
                            }
                          }
                          else
                          {
                            if (v440 != v458) {
                              goto LABEL_575;
                            }
                            v456[v455] = v55 + v455;
                            if (v453)
                            {
                              int v459 = *(_DWORD *)(v454 + 4 * v455) + v55;
                              goto LABEL_573;
                            }
                          }
                          v457[v455] = v422;
LABEL_575:
                          ++v455;
                        }
                        while (v55 != v455);
                        uint64_t v3 = v563;
                        int v460 = sub_1CCFCDA78(*v563, (llvm *)v566, *((uint64_t *)&v566 + 1), (uint64_t)&v567, (uint64_t)v428, v427, (uint64_t)v442, v443, v456, DWORD2(__src));
                        int64_t v461 = (char *)v572[0] + 16 * v422;
                        *(void *)int64_t v461 = v460;
                        *((_DWORD *)v461 + 2) = v462;
                        if ((void *)__src != v583) {
                          free((void *)__src);
                        }
                        ++v422;
                        uint64_t v2 = v558;
                      }
                      while (v422 != v561);
                      unsigned int v336 = v554;
                    }
                    while (v552 > 3);
                  }
                }
                uint64_t v9 = *(void *)v572[0];
LABEL_584:
                if (v572[0] != v573) {
                  free(v572[0]);
                }
                if (v574[0] != v575) {
                  free(v574[0]);
                }
                goto LABEL_134;
              }
              if ((_BYTE)v566)
              {
                uint64_t v470 = *((void *)&v566 + 1);
                if (v566 - 120 < 0x20
                  || v566 - 2 < 6
                  || v566 - 15 < 0x3C)
                {
                  goto LABEL_631;
                }
              }
              else
              {
                uint64_t v470 = *((void *)&v566 + 1);
                if ((*(_DWORD *)(*((void *)&v566 + 1) + 8) & 0xFE) == 0x12) {
                  int v471 = *(unsigned __int8 *)(**(void **)(*((void *)&v566 + 1) + 16) + 8);
                }
                else {
                  int v471 = *(_DWORD *)(*((void *)&v566 + 1) + 8);
                }
                if (v471 == 13)
                {
LABEL_631:
                  int v500 = sub_1CD7EBF14(*v3, 0, (const llvm::APInt *)&v567, (llvm *)v566, v470, 0, 0);
                  goto LABEL_632;
                }
              }
              int v500 = sub_1CD7ECDC4(*v3, (uint64_t)&v567, v566, v470, 0, 0.0);
LABEL_632:
              if (LODWORD(v572[1]) >= HIDWORD(v572[1])) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              uint64_t v502 = (uint64_t **)((char *)v572[0] + 16 * LODWORD(v572[1]));
              const char *v502 = v500;
              v502[1] = v501;
              unsigned int v336 = ++LODWORD(v572[1]);
              goto LABEL_524;
            }
          }
        }
LABEL_138:
        if (v567)
        {
          int v98 = *v567;
          if ((v98 - 4) > 0x1E)
          {
            if ((v98 - 3) >= 0xFFFFFFFE) {
              unint64_t v100 = v567;
            }
            else {
              unint64_t v100 = 0;
            }
            if ((v98 - 3) < 0xFFFFFFFE)
            {
              if (v98 == 3) {
                *((void *)v567 + 1) = 0;
              }
              goto LABEL_142;
            }
            unint64_t v101 = (unint64_t)(v100 + 8);
          }
          else
          {
            if ((v567[1] & 0x7F) != 2 && !*((_DWORD *)v567 + 3)) {
              goto LABEL_142;
            }
            uint64_t v508 = *((void *)v567 + 2);
            if ((v508 & 4) == 0) {
              goto LABEL_142;
            }
            unint64_t v101 = v508 & 0xFFFFFFFFFFFFFFF8;
            if (!v101) {
              goto LABEL_142;
            }
          }
          v580[0] = &v567;
          sub_1CC5FA668(v101 + 16, v580);
        }
LABEL_142:
        if (v9) {
          return (uint64_t *)v9;
        }
        if (!(_BYTE)v565) {
          return 0;
        }
        if (*(unsigned char *)(v3[1] + 390 * v565 + 4018) == 2) {
          return 0;
        }
        uint64_t v162 = sub_1CD7EE8F8(v2, 0);
        if (!v162) {
          return 0;
        }
        uint64_t v164 = v162;
        size_t v165 = v163;
        uint64_t v166 = (llvm::APFloatBase *)*v3;
        unsigned int v167 = *(void **)(v2 + 64);
        v580[0] = v167;
        if (v167) {
          llvm::MetadataTracking::track((uint64_t)v580, (unsigned __int8 *)v167, 2);
        }
        LODWORD(v580[1]) = *(_DWORD *)(v2 + 60);
        uint64_t v168 = *((void *)v166 + 104);
        if (v168) {
          __int16 v169 = *(_WORD *)(v168 + 8);
        }
        else {
          __int16 v169 = 0;
        }
        unint64_t v262 = sub_1CD7F3564(v166, (const char *)0x9C, (uint64_t)v580, v565, v564, v164, v165, v169);
LABEL_367:
        uint64_t v9 = (uint64_t)v262;
        if (!v580[0]) {
          return (uint64_t *)v9;
        }
        int v288 = *(unsigned __int8 *)v580[0];
        if ((v288 - 4) > 0x1E)
        {
          if ((v288 - 3) >= 0xFFFFFFFE) {
            uint64_t v472 = v580[0];
          }
          else {
            uint64_t v472 = 0;
          }
          if ((v288 - 3) < 0xFFFFFFFE)
          {
            if (v288 == 3) {
              *((void *)v580[0] + 1) = 0;
            }
            return (uint64_t *)v9;
          }
          unint64_t v290 = (unint64_t)v472 + 8;
        }
        else
        {
          if ((*((unsigned char *)v580[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v580[0] + 3)) {
            return (uint64_t *)v9;
          }
          uint64_t v289 = *((void *)v580[0] + 2);
          if ((v289 & 4) == 0) {
            return (uint64_t *)v9;
          }
          unint64_t v290 = v289 & 0xFFFFFFFFFFFFFFF8;
          if (!v290) {
            return (uint64_t *)v9;
          }
        }
        v574[0] = v580;
        sub_1CC5FA668(v290 + 16, v574);
        return (uint64_t *)v9;
      }
      uint64_t v521 = (v282 * v43);
      uint64_t v522 = (int)v521;
      v580[0] = v581;
      HIDWORD(v580[1]) = 32;
      if (v521 >= 0x21)
      {
        LODWORD(v580[1]) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v281 > v279)
      {
        LODWORD(v580[1]) = v521;
      }
      else
      {
        unint64_t v523 = v581;
        do
        {
          *v523++ = -1;
          --v522;
        }
        while (v522);
        LODWORD(v580[1]) = v521;
        if (v281 <= v279)
        {
          uint64_t v524 = 0;
          uint64_t v525 = v580[0];
          uint64_t v526 = __src;
          do
          {
            if ((int)v524 / v282 == v47)
            {
              int v527 = v521;
              if (!((int)v524 % v282))
              {
                uint64_t v528 = *(void *)(*(void *)(*(void *)(v526 + 32) + 40) + 80);
                long long v529 = (void *)(v528 + 24);
                if (*(_DWORD *)(v528 + 32) >= 0x41u) {
                  long long v529 = (void *)*v529;
                }
                int v527 = *(_DWORD *)v529;
              }
              v525[v524] = v527;
            }
            ++v524;
          }
          while (v521 != v524);
        }
      }
      int v530 = *(void **)(v2 + 64);
      __b = v530;
      if (v530) {
        llvm::MetadataTracking::track((uint64_t)&__b, (unsigned __int8 *)v530, 2);
      }
      LODWORD(v578) = *(_DWORD *)(v2 + 60);
      uint64_t v531 = *(void *)(**(void **)(__src + 32) + 40) + 16 * *(unsigned int *)(*(void *)(__src + 32) + 8);
      uint64_t v532 = *(llvm **)v531;
      uint64_t v533 = *(void *)(v531 + 8);
      uint64_t v534 = sub_1CD7EBF14(v45, 0, (const llvm::APInt *)&__b, *(llvm **)v531, v533, 0, 0);
      uint64_t v536 = sub_1CD80E678(*(void *)(v45 + 24), v532, v533, (uint64_t)&__b, **(void **)(__src + 32), *(void *)(*(void *)(__src + 32) + 8), (uint64_t)v534, v535, v580[0], LODWORD(v580[1]), v45);
      if (v536) {
        uint64_t v9 = sub_1CD7EF724(v45, (uint64_t)v574[0], (uint64_t)v574[1], (uint64_t)v536, v537);
      }
      else {
        uint64_t v9 = 0;
      }
      if (__b)
      {
        int v538 = *(unsigned __int8 *)__b;
        if ((v538 - 4) > 0x1E)
        {
          if ((v538 - 3) >= 0xFFFFFFFE) {
            uint64_t v539 = __b;
          }
          else {
            uint64_t v539 = 0;
          }
          if ((v538 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v540 = (unint64_t)v539 + 8;
LABEL_734:
            *(void *)&long long v571 = &__b;
            sub_1CC5FA668(v540 + 16, &v571);
            goto LABEL_725;
          }
          if (v538 == 3) {
            *((void *)__b + 1) = 0;
          }
        }
        else if ((*((unsigned char *)__b + 1) & 0x7F) == 2 || *((_DWORD *)__b + 3))
        {
          uint64_t v543 = *((void *)__b + 2);
          if ((v543 & 4) != 0)
          {
            unint64_t v540 = v543 & 0xFFFFFFFFFFFFFFF8;
            if (v540) {
              goto LABEL_734;
            }
          }
        }
      }
LABEL_725:
      if (v580[0] != v581) {
        free(v580[0]);
      }
      if (v9) {
        goto LABEL_138;
      }
      goto LABEL_72;
    }
LABEL_647:
    uint64_t v9 = 0;
    goto LABEL_648;
  }
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = 40 * *(unsigned __int16 *)(a2 + 56);
  do
  {
    if (*(_WORD *)(*(void *)v7 + 24) != 51) {
      goto LABEL_6;
    }
    v7 += 40;
    v8 -= 40;
  }
  while (v8);
  return sub_1CD3DD4D8(*(void *)a1, v6, v5);
}

uint64_t *sub_1CCF3A2F4(uint64_t *a1, void *a2)
{
  v781[16] = *MEMORY[0x1E4F143B8];
  uint64_t v770 = a2;
  long long v769 = *(_OWORD *)a2[5];
  signed int v4 = sub_1CD3DB440((llvm::EVT *)&v769, (const char *)a2);
  unsigned int v768 = v4;
  long long v6 = (uint64_t *)a2[4];
  uint64_t v7 = *v6;
  unint64_t v8 = v6[1];
  uint64_t v10 = v6[5];
  uint64_t v9 = v6[6];
  if (*(_WORD *)(*v6 + 24) == 51)
  {
    if (*(_WORD *)(v10 + 24) == 51) {
      return sub_1CD3DD4D8(*a1, (llvm *)v769, *((uint64_t *)&v769 + 1));
    }
    BOOL v11 = v7 == v10 && v9 == v8;
    if (!v11)
    {
      uint64_t v12 = *a1;
      return sub_1CD7EE9FC(v12, (uint64_t)a2);
    }
LABEL_41:
    uint64_t v34 = *a1;
    long long v35 = v769;
    unsigned int v36 = (unsigned __int8 *)a2[8];
    *(void *)&long long v780 = v36;
    uint64_t v37 = *((void *)&v769 + 1);
    int v38 = (llvm *)v769;
    uint64_t v39 = v34;
    if (v36)
    {
      llvm::MetadataTracking::track((uint64_t)&v780, v36, 2);
      uint64_t v39 = *a1;
      uint64_t v37 = *((void *)&v769 + 1);
      int v38 = (llvm *)v769;
    }
    DWORD2(v780) = *((_DWORD *)a2 + 15);
    uint64_t v40 = sub_1CD3DD4D8(v39, v38, v37);
    unsigned int v42 = v41;
    *(_OWORD *)__b = *(_OWORD *)a2[5];
    uint64_t v43 = (_DWORD *)a2[10];
    unsigned int v44 = sub_1CD3DB440((llvm::EVT *)__b, v41);
    llvm::createUnaryMask(v43, v44, v768, (uint64_t)__b);
    uint64_t v14 = (uint64_t)sub_1CCFCDA78(v34, (llvm *)v35, *((uint64_t *)&v35 + 1), (uint64_t)&v780, v7, v8, (uint64_t)v40, v42, __b[0], LODWORD(__b[1]));
    uint64_t v45 = __b[0];
    if (__b[0] != v777) {
LABEL_44:
    }
      free(v45);
LABEL_45:
    if (!(void)v780) {
      return (uint64_t *)v14;
    }
    int v46 = *(unsigned __int8 *)v780;
    if ((v46 - 4) > 0x1E)
    {
      if ((v46 - 3) >= 0xFFFFFFFE) {
        uint64_t v76 = v780;
      }
      else {
        uint64_t v76 = 0;
      }
      if ((v46 - 3) < 0xFFFFFFFE)
      {
        if (v46 == 3) {
          *(void *)(v780 + 8) = 0;
        }
        return (uint64_t *)v14;
      }
      unint64_t v48 = v76 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v780 + 1) & 0x7F) != 2 && !*(_DWORD *)(v780 + 12)) {
        return (uint64_t *)v14;
      }
      uint64_t v47 = *(void *)(v780 + 16);
      if ((v47 & 4) == 0) {
        return (uint64_t *)v14;
      }
      unint64_t v48 = v47 & 0xFFFFFFFFFFFFFFF8;
      if (!v48) {
        return (uint64_t *)v14;
      }
    }
    __b[0] = &v780;
    sub_1CC5FA668(v48 + 16, __b);
    return (uint64_t *)v14;
  }
  if (v7 == v10 && v9 == v8) {
    goto LABEL_41;
  }
  if (*(_WORD *)(v10 + 24) == 51)
  {
    __b[0] = v777;
    __b[1] = (void *)0x800000000;
    if (v4)
    {
      unsigned int v16 = 0;
      char v17 = 0;
      unsigned int v18 = 0;
      do
      {
        signed int v19 = *(_DWORD *)(a2[10] + 4 * v18);
        if (v19 >= v4) {
          int v20 = -1;
        }
        else {
          int v20 = *(_DWORD *)(a2[10] + 4 * v18);
        }
        if (v16 >= HIDWORD(__b[1])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v17 |= v19 >= v4;
        *((_DWORD *)__b[0] + v16) = v20;
        unsigned int v16 = ++LODWORD(__b[1]);
        ++v18;
        signed int v4 = v768;
      }
      while (v18 != v768);
      if (v17)
      {
        uint64_t v21 = *a1;
        long long v22 = v769;
        uint64_t v23 = v770;
        uint64_t v24 = (unsigned __int8 *)v770[8];
        *(void *)&long long v780 = v24;
        if (v24)
        {
          int v25 = v9;
          llvm::MetadataTracking::track((uint64_t)&v780, v24, 2);
          LODWORD(v9) = v25;
          unsigned int v16 = __b[1];
        }
        DWORD2(v780) = *((_DWORD *)v23 + 15);
        int v26 = sub_1CCFCDA78(v21, (llvm *)v22, *((uint64_t *)&v22 + 1), (uint64_t)&v780, v7, v8, v10, v9, __b[0], v16);
        goto LABEL_28;
      }
      if (__b[0] != v777)
      {
        uint64_t v49 = v9;
        free(__b[0]);
        uint64_t v9 = v49;
      }
    }
  }
  uint64_t v760 = (uint64_t)a1;
  uint64_t v752 = v9;
  uint64_t v754 = (void *)*a1;
  *(_OWORD *)__b = *(_OWORD *)a2[5];
  int v50 = (char *)a2[10];
  unsigned int v52 = sub_1CD3DB440((llvm::EVT *)__b, v5);
  uint64_t v53 = v52;
  __b[0] = v777;
  __b[1] = (void *)0x1000000000;
  if (v52 >= 0x11) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v54 = 0;
  if (v52)
  {
    memcpy(v777, v50, 4 * v52);
    int v54 = (int)__b[1];
  }
  int v55 = v54 + v52;
  LODWORD(__b[1]) = v54 + v52;
  uint64_t v56 = a2[4];
  size_t v57 = *(void *)v56;
  uint64_t v58 = *(unsigned int *)(v56 + 8);
  size_t v59 = *(void *)(v56 + 40);
  unint64_t v60 = *(void *)(v56 + 48);
  if (!v53) {
    goto LABEL_67;
  }
  uint64_t v61 = 0;
  int v62 = -1;
  do
  {
    int v63 = *(_DWORD *)&v50[4 * v61];
    if (v63 < 0 || v63 >= (int)v53)
    {
      if (v53 + v61 != v63) {
        goto LABEL_67;
      }
    }
    else
    {
      if (v62 != -1) {
        goto LABEL_67;
      }
      int v62 = v61;
    }
    ++v61;
  }
  while (v53 != v61);
  if (v62 == -1)
  {
LABEL_67:
    if (!v55) {
      goto LABEL_103;
    }
    uint64_t v64 = 0;
    int v50 = (char *)__b[0];
    do
    {
      int v65 = *(_DWORD *)&v50[v64];
      if ((v65 & 0x80000000) == 0)
      {
        if (v65 >= v55) {
          int v66 = -v55;
        }
        else {
          int v66 = v55;
        }
        *(_DWORD *)&v50[v64] = v66 + v65;
      }
      v64 += 4;
    }
    while (4 * v55 != v64);
    if (!LODWORD(__b[1])) {
      goto LABEL_103;
    }
    uint64_t v67 = 0;
    int v62 = -1;
    do
    {
      int v68 = *(_DWORD *)&v50[4 * v67];
      if (v68 < 0 || v68 >= SLODWORD(__b[1]))
      {
        if (LODWORD(__b[1]) + v67 != v68) {
          goto LABEL_103;
        }
      }
      else
      {
        if (v62 != -1) {
          goto LABEL_103;
        }
        int v62 = v67;
      }
      ++v67;
    }
    while (LODWORD(__b[1]) != v67);
    if (v62 == -1) {
      goto LABEL_103;
    }
    size_t v69 = v59;
    uint64_t v51 = (const char *)v60;
    unint64_t v60 = v60 & 0xFFFFFFFF00000000 | v58;
    size_t v59 = v57;
    size_t v57 = v69;
    LODWORD(v58) = v51;
  }
  if (*(_WORD *)(v57 + 24) != 147
    || ((uint64_t v70 = *(void *)(*(void *)(v57 + 32) + 80), v71 = *(unsigned __int16 *)(v70 + 24), v71 != 35)
      ? (BOOL v72 = v71 == 11)
      : (BOOL v72 = 1),
        !v72
     || ((v73 = *(void *)(v70 + 80), unsigned int v74 = *(_DWORD *)(v73 + 32), v74 > 0x40)
       ? (uint64_t v75 = **(void **)(v73 + 24))
       : (uint64_t v75 = (uint64_t)(*(void *)(v73 + 24) << -(char)v74) >> -(char)v74),
         v75 != *(_DWORD *)&v50[4 * v62])))
  {
LABEL_103:
    uint64_t v14 = 0;
    goto LABEL_104;
  }
  size_t __na = v59;
  unsigned int v745 = v58;
  uint64_t v134 = v62;
  uint64_t v135 = (unsigned __int8 *)a2[8];
  *(void *)&long long v780 = v135;
  if (v135) {
    llvm::MetadataTracking::track((uint64_t)&v780, v135, 2);
  }
  DWORD2(v780) = *((_DWORD *)a2 + 15);
  uint64_t v136 = sub_1CD7EC9F4((uint64_t)v754, v134, (uint64_t)&v780, 0);
  uint64_t v139 = v138;
  unsigned int v140 = v745;
  if ((void)v780)
  {
    int v141 = *(unsigned __int8 *)v780;
    if ((v141 - 4) > 0x1E)
    {
      uint64_t v737 = v136;
      if ((v141 - 3) >= 0xFFFFFFFE) {
        uint64_t v228 = v780;
      }
      else {
        uint64_t v228 = 0;
      }
      if ((v141 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v229 = v228 + 8;
LABEL_302:
        v774[0] = &v780;
        sub_1CC5FA668(v229 + 16, v774);
        unsigned int v140 = v745;
        uint64_t v136 = v737;
        goto LABEL_194;
      }
      unsigned int v140 = v745;
      if (v141 == 3) {
        *(void *)(v780 + 8) = 0;
      }
    }
    else if ((*(unsigned char *)(v780 + 1) & 0x7F) == 2 || *(_DWORD *)(v780 + 12))
    {
      uint64_t v583 = *(void *)(v780 + 16);
      if ((v583 & 4) != 0)
      {
        unint64_t v229 = v583 & 0xFFFFFFFFFFFFFFF8;
        if (v229)
        {
          uint64_t v737 = v136;
          goto LABEL_302;
        }
      }
    }
  }
LABEL_194:
  uint64_t v142 = (unsigned __int8 *)a2[8];
  *(void *)&long long v780 = v142;
  if (v142)
  {
    uint64_t v143 = v136;
    llvm::MetadataTracking::track((uint64_t)&v780, v142, 2);
    uint64_t v136 = v143;
    unsigned int v140 = v745;
  }
  DWORD2(v780) = *((_DWORD *)a2 + 15);
  uint64_t v144 = *(void *)(v57 + 32);
  uint64_t v145 = *(void *)(v57 + 40) + 16 * v140;
  int v146 = *(llvm **)v145;
  uint64_t v147 = *(void *)(v145 + 8);
  uint64_t v148 = *(void *)(v144 + 40);
  uint64_t v149 = *(void *)(v144 + 48);
  uint64_t v150 = v754[104];
  if (v150) {
    LOWORD(v150) = *(_WORD *)(v150 + 8);
  }
  uint64_t v14 = (uint64_t)sub_1CD7F5D38(v754, (const char *)0x93, (const llvm::APInt *)&v780, v146, v147, __na, v60, v137, v148, v149, v136, v139, SHIDWORD(v139), v150);
  if ((void)v780)
  {
    int v151 = *(unsigned __int8 *)v780;
    if ((v151 - 4) > 0x1E)
    {
      if ((v151 - 3) >= 0xFFFFFFFE) {
        uint64_t v230 = v780;
      }
      else {
        uint64_t v230 = 0;
      }
      if ((v151 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v153 = v230 + 8;
LABEL_308:
        v774[0] = &v780;
        sub_1CC5FA668(v153 + 16, v774);
        goto LABEL_104;
      }
      if (v151 == 3) {
        *(void *)(v780 + 8) = 0;
      }
    }
    else if ((*(unsigned char *)(v780 + 1) & 0x7F) == 2 || *(_DWORD *)(v780 + 12))
    {
      uint64_t v152 = *(void *)(v780 + 16);
      if ((v152 & 4) != 0)
      {
        unint64_t v153 = v152 & 0xFFFFFFFFFFFFFFF8;
        if (v153) {
          goto LABEL_308;
        }
      }
    }
  }
LABEL_104:
  if (__b[0] != v777) {
    free(__b[0]);
  }
  if (v14) {
    return (uint64_t *)v14;
  }
  uint64_t v78 = (uint64_t *)a2[4];
  if (*(_WORD *)(v78[5] + 24) == 51)
  {
    uint64_t v79 = *v78;
    if (*v78)
    {
      if (*(_WORD *)(v79 + 24) == 153)
      {
        uint64_t v80 = *(void *)v760;
        if (sub_1CD804960(*(void *)(v79 + 80), **(const char ***)(v79 + 40), *(void *)(*(void *)(v79 + 40) + 8)))
        {
          *(_OWORD *)__b = *(_OWORD *)a2[5];
          BOOL v81 = (int *)a2[10];
          unsigned int v82 = sub_1CD3DB440((llvm::EVT *)__b, v51);
          *(_OWORD *)__b = *(_OWORD *)*(void *)(v79 + 40);
          int v83 = *(_DWORD **)(v79 + 80);
          sub_1CD3DB440((llvm::EVT *)__b, v84);
          if (!v82)
          {
LABEL_118:
            uint64_t v14 = *(void *)a2[4];
            if (v14) {
              return (uint64_t *)v14;
            }
            goto LABEL_119;
          }
          char v85 = v83;
          uint64_t v86 = v81;
          uint64_t v87 = v83;
          uint64_t v88 = v82;
          while (1)
          {
            uint64_t v90 = *v86++;
            uint64_t v89 = v90;
            if (v90 != -1 && *v87 == -1 && v83[v89] != -1) {
              break;
            }
            ++v87;
            if (!--v88) {
              goto LABEL_118;
            }
          }
          unsigned int v231 = 0;
          __b[0] = v777;
          __b[1] = (void *)0x2000000000;
          uint64_t v232 = 4 * v82;
          do
          {
            uint64_t v233 = *v81;
            if (v233 == -1) {
              int v234 = -1;
            }
            else {
              int v234 = v85[v233];
            }
            if (v231 >= HIDWORD(__b[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_DWORD *)__b[0] + v231) = v234;
            unsigned int v231 = ++LODWORD(__b[1]);
            ++v81;
            v232 -= 4;
          }
          while (v232);
          uint64_t v235 = *(void *)(v79 + 40);
          uint64_t v236 = *(llvm **)v235;
          uint64_t v237 = *(void *)(v235 + 8);
          uint64_t v238 = *(unsigned __int8 **)(v79 + 64);
          *(void *)&long long v780 = v238;
          if (v238)
          {
            llvm::MetadataTracking::track((uint64_t)&v780, v238, 2);
            unsigned int v231 = __b[1];
          }
          DWORD2(v780) = *(_DWORD *)(v79 + 60);
          uint64_t v14 = (uint64_t)sub_1CCFCDA78(v80, v236, v237, (uint64_t)&v780, **(void **)(v79 + 32), *(void *)(*(void *)(v79 + 32) + 8), *(void *)(*(void *)(v79 + 32) + 40), *(void *)(*(void *)(v79 + 32) + 48), __b[0], v231);
          if (!(void)v780) {
            goto LABEL_323;
          }
          int v239 = *(unsigned __int8 *)v780;
          if ((v239 - 4) > 0x1E)
          {
            if ((v239 - 3) >= 0xFFFFFFFE) {
              uint64_t v284 = v780;
            }
            else {
              uint64_t v284 = 0;
            }
            if ((v239 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v285 = v284 + 8;
LABEL_399:
              v774[0] = &v780;
              sub_1CC5FA668(v285 + 16, v774);
              goto LABEL_323;
            }
            if (v239 == 3) {
              *(void *)(v780 + 8) = 0;
            }
          }
          else if ((*(unsigned char *)(v780 + 1) & 0x7F) == 2 || *(_DWORD *)(v780 + 12))
          {
            uint64_t v652 = *(void *)(v780 + 16);
            if ((v652 & 4) != 0)
            {
              unint64_t v285 = v652 & 0xFFFFFFFFFFFFFFF8;
              if (v285) {
                goto LABEL_399;
              }
            }
          }
LABEL_323:
          if (__b[0] != v777) {
            free(__b[0]);
          }
          if (v14) {
            return (uint64_t *)v14;
          }
        }
      }
    }
  }
LABEL_119:
  char v91 = (uint64_t *)a2[4];
  if (*(_WORD *)(v91[5] + 24) == 51)
  {
    uint64_t v92 = *v91;
    if (*v91)
    {
      if (*(_WORD *)(v92 + 24) == 153 && *(_WORD *)(*(void *)(*(void *)(v92 + 32) + 40) + 24) == 51)
      {
        uint64_t v755 = *(void *)v760;
        *(_OWORD *)__b = *(_OWORD *)a2[5];
        uint64_t v93 = a2[10];
        unsigned int v94 = sub_1CD3DB440((llvm::EVT *)__b, v51);
        *(_OWORD *)__b = *(_OWORD *)*(void *)(v92 + 40);
        uint64_t v95 = *(void *)(v92 + 80);
        sub_1CD3DB440((llvm::EVT *)__b, v96);
        __b[0] = v777;
        HIDWORD(__b[1]) = 32;
        if (v94 >= 0x21)
        {
          LODWORD(__b[1]) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v94)
        {
          memset(v777, 255, 4 * v94);
          uint64_t v97 = 0;
          LODWORD(__b[1]) = v94;
          int v98 = -1;
          do
          {
            uint64_t v99 = *(int *)(v93 + 4 * v97);
            if (v99 != -1)
            {
              int v100 = *(_DWORD *)(v95 + 4 * v99);
              if (v100 != -1)
              {
                if (v98 != -1 && v98 != v100) {
                  goto LABEL_264;
                }
                v777[v97] = v100;
                int v98 = v100;
              }
            }
            ++v97;
          }
          while (v94 != v97);
          unsigned int v101 = __b[1];
        }
        else
        {
          unsigned int v101 = 0;
          LODWORD(__b[1]) = 0;
        }
        uint64_t v208 = (llvm **)a2[5];
        unint64_t v209 = *v208;
        uint64_t v210 = (uint64_t)v208[1];
        if (!(*(unsigned int (**)(void, _DWORD *, void, llvm *, uint64_t))(**(void **)(v755 + 24)
                                                                                        + 488))(*(void *)(v755 + 24), v777, v101, *v208, v210))
        {
LABEL_264:
          uint64_t v14 = 0;
          goto LABEL_265;
        }
        uint64_t v211 = (unsigned __int8 *)a2[8];
        *(void *)&long long v780 = v211;
        if (v211) {
          llvm::MetadataTracking::track((uint64_t)&v780, v211, 2);
        }
        DWORD2(v780) = *((_DWORD *)a2 + 15);
        uint64_t v14 = (uint64_t)sub_1CCFCDA78(v755, v209, v210, (uint64_t)&v780, **(void **)(v92 + 32), *(void *)(*(void *)(v92 + 32) + 8), *(void *)(*(void *)(v92 + 32) + 40), *(void *)(*(void *)(v92 + 32) + 48), __b[0], LODWORD(__b[1]));
        if ((void)v780)
        {
          int v212 = *(unsigned __int8 *)v780;
          if ((v212 - 4) > 0x1E)
          {
            if ((v212 - 3) >= 0xFFFFFFFE) {
              uint64_t v267 = v780;
            }
            else {
              uint64_t v267 = 0;
            }
            if ((v212 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v214 = v267 + 8;
LABEL_359:
              v774[0] = &v780;
              sub_1CC5FA668(v214 + 16, v774);
              goto LABEL_265;
            }
            if (v212 == 3) {
              *(void *)(v780 + 8) = 0;
            }
          }
          else if ((*(unsigned char *)(v780 + 1) & 0x7F) == 2 || *(_DWORD *)(v780 + 12))
          {
            uint64_t v213 = *(void *)(v780 + 16);
            if ((v213 & 4) != 0)
            {
              unint64_t v214 = v213 & 0xFFFFFFFFFFFFFFF8;
              if (v214) {
                goto LABEL_359;
              }
            }
          }
        }
LABEL_265:
        if (__b[0] != v777) {
          free(__b[0]);
        }
        if (v14) {
          return (uint64_t *)v14;
        }
      }
    }
  }
  if (sub_1CD804960(a2[10], *(const char **)a2[5], *(void *)(a2[5] + 8)))
  {
    *(_OWORD *)__b = *(_OWORD *)a2[5];
    unsigned int v187 = sub_1CD3DB440((llvm::EVT *)__b, v102);
    if (v187)
    {
      unsigned int v189 = (signed int *)a2[10];
      uint64_t v190 = v187;
      while (1)
      {
        signed int v192 = *v189++;
        signed int v191 = v192;
        if ((v192 & 0x80000000) == 0) {
          break;
        }
        if (!--v190) {
          goto LABEL_232;
        }
      }
    }
    else
    {
LABEL_232:
      signed int v191 = 0;
    }
    if (v191 < (int)v768)
    {
      *(_OWORD *)__b = *(_OWORD *)a2[5];
      unsigned int v193 = sub_1CD3DB440((llvm::EVT *)__b, v188);
      if (v193)
      {
        int v195 = (unsigned int *)a2[10];
        uint64_t v196 = v193;
        while (1)
        {
          unsigned int v198 = *v195++;
          uint64_t v197 = v198;
          if ((v198 & 0x80000000) == 0) {
            break;
          }
          if (!--v196) {
            goto LABEL_238;
          }
        }
      }
      else
      {
LABEL_238:
        uint64_t v197 = 0;
      }
      uint64_t v199 = *(void *)(v7 + 48);
      if (v199)
      {
        int v200 = 1;
        do
        {
          if (*(_DWORD *)(v199 + 8) == v8)
          {
            if (!v200) {
              goto LABEL_249;
            }
            --v200;
          }
          uint64_t v199 = *(void *)(v199 + 32);
        }
        while (v199);
        if (!v200
          && (*(unsigned int (**)(void, void, void, uint64_t))(**(void **)(v760 + 8) + 1424))(*(void *)(v760 + 8), v769, *((void *)&v769 + 1), v197)&& (*(unsigned int (**)(void, void))(**(void **)(v760 + 8) + 1136))(*(void *)(v760 + 8), *(unsigned __int16 *)(v7 + 24))&& *(_WORD *)(v7 + 58) == 1)
        {
          uint64_t v556 = *(uint64_t **)(v7 + 32);
          uint64_t v557 = *v556;
          uint64_t v558 = v556[1];
          uint64_t v559 = v556[5];
          uint64_t v560 = v556[6];
          uint64_t v561 = v770;
          long long v562 = (unsigned __int8 *)v770[8];
          *(void *)&long long v780 = v562;
          if (v562) {
            llvm::MetadataTracking::track((uint64_t)&v780, v562, 2);
          }
          DWORD2(v780) = *((_DWORD *)v561 + 15);
          unsigned int v563 = (llvm *)sub_1CD3DD468((unsigned __int8 *)&v769, (uint64_t)v562, v201);
          uint64_t v565 = v564;
          uint64_t v568 = sub_1CD7EC9F4(*(void *)v760, v197, (uint64_t)&v780, 0);
          uint64_t v569 = v566;
          uint64_t v570 = *(void *)(*(void *)v760 + 832);
          if (v570) {
            LOWORD(v570) = *(_WORD *)(v570 + 8);
          }
          __int16 v572 = sub_1CCFDED5C(*(void *)v760, 148, (const llvm::APInt *)&v780, v563, v565, v557, v558, v567, v568, v566, v570);
          uint64_t v574 = v573;
          uint64_t v575 = *(void *)(*(void *)v760 + 832);
          if (v575) {
            LOWORD(v575) = *(_WORD *)(v575 + 8);
          }
          uint64_t v576 = sub_1CCFDED5C(*(void *)v760, 148, (const llvm::APInt *)&v780, v563, v565, v559, v560, v571, v568, v569, v575);
          uint64_t v580 = sub_1CCFDED5C(*(void *)v760, *(unsigned __int16 *)(v7 + 24), (const llvm::APInt *)&v780, v563, v565, (uint64_t)v572, v574, v578, (uint64_t)v576, v577, *(_WORD *)(v7 + 72));
          uint64_t v581 = *(void *)(*(void *)v760 + 832);
          if (v581) {
            __int16 v582 = *(_WORD *)(v581 + 8);
          }
          else {
            __int16 v582 = 0;
          }
          uint64_t v586 = sub_1CD7F3564(*(llvm::APFloatBase **)v760, (const char *)0x9B, (uint64_t)&v780, (llvm *)v769, *((uint64_t *)&v769 + 1), (uint64_t)v580, v579, v582);
          unsigned int v588 = v587;
          unsigned int v589 = sub_1CD3DB440((llvm::EVT *)&v769, v587);
          unsigned int v590 = v589;
          __b[0] = v777;
          HIDWORD(__b[1]) = 16;
          if (v589 >= 0x11)
          {
            LODWORD(__b[1]) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v589) {
            bzero(v777, 4 * v589);
          }
          LODWORD(__b[1]) = v590;
          uint64_t v591 = *(void *)v760;
          long long v592 = v769;
          v593 = sub_1CD3DD4D8(*(void *)v760, (llvm *)v769, *((uint64_t *)&v769 + 1));
          uint64_t v14 = (uint64_t)sub_1CCFCDA78(v591, (llvm *)v592, *((uint64_t *)&v592 + 1), (uint64_t)&v780, (uint64_t)v586, v588, (uint64_t)v593, v594, __b[0], LODWORD(__b[1]));
          uint64_t v45 = __b[0];
          if (__b[0] != v777) {
            goto LABEL_44;
          }
          goto LABEL_45;
        }
      }
LABEL_249:
      int v202 = *(unsigned __int16 *)(v7 + 24);
      uint64_t v203 = v7;
      if (v202 == 216)
      {
        uint64_t v204 = *(unsigned int **)(v7 + 32);
        uint64_t v203 = *(void *)v204;
        uint64_t v205 = *(void *)(*(void *)v204 + 40) + 16 * v204[2];
        uint64_t v206 = *(void **)v205;
        if (*(void *)v205)
        {
          if (*(void *)v205 - 15 > 0x9B) {
            goto LABEL_134;
          }
          unint64_t v207 = *(_DWORD **)(v205 + 8);
        }
        else
        {
          unint64_t v207 = *(_DWORD **)(v205 + 8);
          if ((v207[2] & 0xFE) != 0x12) {
            goto LABEL_134;
          }
        }
        __b[0] = v206;
        __b[1] = v207;
        if (sub_1CD3DB440((llvm::EVT *)__b, v194) != v768) {
          uint64_t v203 = v7;
        }
        int v202 = *(unsigned __int16 *)(v203 + 24);
      }
      if (v202 == 146)
      {
        if (!v768) {
          return (uint64_t *)v7;
        }
        uint64_t v455 = *(void *)(v203 + 32);
        int v456 = (_DWORD *)(v455 + 8);
        uint64_t v457 = v768;
        while (1)
        {
          uint64_t v458 = *((void *)v456 - 1);
          if (*(_WORD *)(v458 + 24) != 51) {
            break;
          }
          v456 += 10;
          if (!--v457) {
            return (uint64_t *)v7;
          }
        }
        int v459 = *v456;
        int v460 = (_DWORD *)(v455 + 8);
        uint64_t v461 = v768;
        while (*((void *)v460 - 1) == v458 && *v460 == v459)
        {
          v460 += 10;
          if (!--v461) {
            return (uint64_t *)v7;
          }
        }
        int v468 = (uint64_t *)(v455 + 40 * v197);
        uint64_t v469 = *v468;
        uint64_t v470 = v468[1];
        __b[0] = v777;
        __b[1] = (void *)0x800000000;
        sub_1CD3E535C((uint64_t *)__b, v768, v469, v470);
        int v471 = *(void **)v760;
        uint64_t v472 = *(void *)(v203 + 40);
        unint64_t v473 = *(llvm **)v472;
        uint64_t v474 = *(void *)(v472 + 8);
        uint64_t v475 = v770;
        unint64_t v476 = (unsigned __int8 *)v770[8];
        *(void *)&long long v780 = v476;
        if (v476) {
          llvm::MetadataTracking::track((uint64_t)&v780, v476, 2);
        }
        DWORD2(v780) = *((_DWORD *)v475 + 15);
        uint64_t v477 = v471[104];
        if (v477) {
          uint64_t v478 = *(unsigned __int16 *)(v477 + 8);
        }
        else {
          uint64_t v478 = 0;
        }
        uint64_t v14 = (uint64_t)sub_1CD7FF4E8(v471, (const char *)0x92, (const llvm::APInt *)&v780, v473, v474, (uint64_t *)__b[0], LODWORD(__b[1]), v478);
        uint64_t v553 = v552;
        if ((void)v780)
        {
          int v554 = *(unsigned __int8 *)v780;
          if ((v554 - 4) > 0x1E)
          {
            if ((v554 - 3) >= 0xFFFFFFFE) {
              uint64_t v584 = v780;
            }
            else {
              uint64_t v584 = 0;
            }
            if ((v554 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v585 = v584 + 8;
LABEL_882:
              v774[0] = &v780;
              sub_1CC5FA668(v585 + 16, v774);
              goto LABEL_848;
            }
            if (v554 == 3) {
              *(void *)(v780 + 8) = 0;
            }
          }
          else if ((*(unsigned char *)(v780 + 1) & 0x7F) == 2 || *(_DWORD *)(v780 + 12))
          {
            uint64_t v723 = *(void *)(v780 + 16);
            if ((v723 & 4) != 0)
            {
              unint64_t v585 = v723 & 0xFFFFFFFFFFFFFFF8;
              if (v585) {
                goto LABEL_882;
              }
            }
          }
        }
LABEL_848:
        uint64_t v555 = *(unsigned __int8 **)(v203 + 40);
        if (*v555 != v769 || !*v555 && *((void *)v555 + 1) != *((void *)&v769 + 1)) {
          uint64_t v14 = sub_1CD7EF724(*(void *)v760, v769, *((uint64_t *)&v769 + 1), v14, v553);
        }
        int v29 = __b[0];
        if (__b[0] != v777) {
          goto LABEL_33;
        }
        return (uint64_t *)v14;
      }
    }
  }
LABEL_134:
  if (sub_1CCF5B034(v760, (uint64_t)v770, 0)) {
    return v770;
  }
  uint64_t v104 = (uint64_t *)a2[4];
  uint64_t v105 = *v104;
  if (*v104 && *(_WORD *)(v105 + 24) == 153 && *(_WORD *)(v104[5] + 24) == 51)
  {
    *(_OWORD *)__b = *(_OWORD *)a2[5];
    unint64_t v240 = (int *)a2[10];
    unsigned int v241 = sub_1CD3DB440((llvm::EVT *)__b, v103);
    *(_OWORD *)__b = *(_OWORD *)*(void *)(v105 + 40);
    uint64_t v242 = *(_DWORD **)(v105 + 80);
    sub_1CD3DB440((llvm::EVT *)__b, v243);
    if (v241)
    {
      uint64_t v244 = v241;
      unsigned __int8 v245 = v242;
      while (1)
      {
        uint64_t v247 = *v240++;
        uint64_t v246 = v247;
        if (v247 != -1 && v242[v246] != *v245) {
          break;
        }
        ++v245;
        if (!--v244) {
          goto LABEL_332;
        }
      }
    }
    else
    {
LABEL_332:
      uint64_t v14 = *(void *)a2[4];
      if (v14) {
        return (uint64_t *)v14;
      }
    }
  }
  uint64_t v107 = *(void *)v760;
  uint64_t v106 = *(void *)(v760 + 8);
  int v108 = *(unsigned __int8 *)(v760 + 33);
  char v109 = (void *)a2[5];
  uint64_t v110 = v109[1];
  *(void *)&long long v780 = *v109;
  *((void *)&v780 + 1) = v110;
  if ((_BYTE)v780)
  {
    BOOL v111 = v780 - 120 < 0x20;
    if (v780 - 15 < 0x3C) {
      BOOL v111 = 1;
    }
    BOOL v112 = v780 - 2 < 6 || v111;
  }
  else
  {
    if ((*(_DWORD *)(v110 + 8) & 0xFE) == 0x12) {
      int v113 = *(unsigned __int8 *)(**(void **)(v110 + 16) + 8);
    }
    else {
      int v113 = *(_DWORD *)(v110 + 8);
    }
    BOOL v112 = v113 == 13;
  }
  if (*(unsigned char *)(*(void *)(**(void **)(v107 + 40) + 40) + 272)) {
    BOOL v114 = 1;
  }
  else {
    BOOL v114 = !v112;
  }
  if (!v114)
  {
    uint64_t v757 = v106;
    int v748 = v108;
    unsigned int v215 = sub_1CD3DB440((llvm::EVT *)&v780, v103);
    unsigned int __n = sub_1CD3E12F4((unsigned __int8 *)&v780, v216, v217);
    *(_OWORD *)__b = *(_OWORD *)a2[5];
    uint64_t v218 = a2[10];
    sub_1CD3DB440((llvm::EVT *)__b, v219);
    if (v215 >= 3)
    {
      uint64_t v220 = (uint64_t *)a2[4];
      uint64_t v732 = (void *)v220[1];
      uint64_t v736 = *v220;
      unsigned int v221 = 2;
      while (((v221 - 1) & v215) != 0)
      {
LABEL_272:
        v221 *= 2;
        if (v221 >= v215) {
          goto LABEL_153;
        }
      }
      for (uint64_t i = 0; i != v215; ++i)
      {
        int v223 = *(_DWORD *)(v218 + 4 * i);
        if ((v223 & 0x80000000) == 0 && (((v221 - 1) & i) != 0 || v223 != i / v221)) {
          goto LABEL_272;
        }
      }
      uint64_t v224 = (llvm::LLVMContext *)(v221 * __n);
      if ((int)v224 > 63)
      {
        if (v224 == 64)
        {
          uint64_t v225 = 0;
          uint64_t v226 = 6;
          goto LABEL_288;
        }
        if (v224 == 128)
        {
          uint64_t v225 = 0;
          uint64_t v226 = 7;
          goto LABEL_288;
        }
      }
      else
      {
        switch(v224)
        {
          case 0x20:
            uint64_t v225 = 0;
            uint64_t v226 = 5;
LABEL_288:
            unint64_t v227 = sub_1CB8E5DAC(*(llvm::LLVMContext **)(v107 + 56), v226, v225, v215 / v221, 0);
            if (!(_BYTE)v227
              || !*(void *)(v757 + 8 * v227 + 96)
              || v748 && (*(unsigned __int8 *)(v757 + 390 * v227 + 4067) | 4) != 4)
            {
              goto LABEL_272;
            }
            uint64_t v446 = (uint64_t)v103;
            int v447 = (llvm *)v227;
            long long v448 = v780;
            uint64_t v449 = (void *)a2[8];
            __b[0] = v449;
            if (v449) {
              llvm::MetadataTracking::track((uint64_t)__b, (unsigned __int8 *)v449, 2);
            }
            LODWORD(__b[1]) = *((_DWORD *)a2 + 15);
            uint64_t v450 = *(void *)(v107 + 832);
            if (v450) {
              __int16 v451 = *(_WORD *)(v450 + 8);
            }
            else {
              __int16 v451 = 0;
            }
            int v462 = sub_1CD7F3564((llvm::APFloatBase *)v107, (const char *)0xCD, (uint64_t)__b, v447, v446, v736, v732, v451);
            uint64_t v14 = sub_1CD7EF724(v107, v448, *((uint64_t *)&v448 + 1), (uint64_t)v462, v463);
            if (!__b[0]) {
              goto LABEL_682;
            }
            int v464 = *(unsigned __int8 *)__b[0];
            if ((v464 - 4) > 0x1E)
            {
              if ((v464 - 3) >= 0xFFFFFFFE) {
                uint64_t v479 = __b[0];
              }
              else {
                uint64_t v479 = 0;
              }
              if ((v464 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v480 = (unint64_t)v479 + 8;
LABEL_709:
                v774[0] = __b;
                sub_1CC5FA668(v480 + 16, v774);
                goto LABEL_682;
              }
              if (v464 == 3) {
                *((void *)__b[0] + 1) = 0;
              }
            }
            else if ((*((unsigned char *)__b[0] + 1) & 0x7F) == 2 || *((_DWORD *)__b[0] + 3))
            {
              uint64_t v705 = *((void *)__b[0] + 2);
              if ((v705 & 4) != 0)
              {
                unint64_t v480 = v705 & 0xFFFFFFFFFFFFFFF8;
                if (v480) {
                  goto LABEL_709;
                }
              }
            }
LABEL_682:
            if (v14) {
              return (uint64_t *)v14;
            }
            goto LABEL_153;
          case 0x10:
            uint64_t v225 = 0;
            uint64_t v226 = 4;
            goto LABEL_288;
          case 8:
            uint64_t v225 = 0;
            uint64_t v226 = 3;
            goto LABEL_288;
        }
      }
      uint64_t v225 = llvm::IntegerType::get(*(llvm::IntegerType **)(v107 + 56), v224);
      uint64_t v226 = 0;
      goto LABEL_288;
    }
  }
LABEL_153:
  uint64_t v115 = *(void *)v760;
  uint64_t v116 = (void *)a2[5];
  uint64_t v117 = v116[1];
  *(void *)&long long v780 = *v116;
  *((void *)&v780 + 1) = v117;
  if ((_BYTE)v780)
  {
    BOOL v118 = v780 - 120 < 0x20;
    if (v780 - 15 < 0x3C) {
      BOOL v118 = 1;
    }
    BOOL v119 = v780 - 2 < 6 || v118;
  }
  else
  {
    if ((*(_DWORD *)(v117 + 8) & 0xFE) == 0x12) {
      int v120 = *(unsigned __int8 *)(**(void **)(v117 + 16) + 8);
    }
    else {
      int v120 = *(_DWORD *)(v117 + 8);
    }
    BOOL v119 = v120 == 13;
  }
  if (!*(unsigned char *)(*(void *)(**(void **)(v115 + 40) + 40) + 272) && v119)
  {
    uint64_t v121 = (uint64_t *)a2[4];
    uint64_t v122 = *v121;
    for (unint64_t j = v121[1]; ; unint64_t j = j & 0xFFFFFFFF00000000 | *((unsigned int *)v125 + 2))
    {
      int v124 = *(unsigned __int16 *)(v122 + 24);
      if (v124 != 216) {
        break;
      }
      uint8x8_t v125 = *(uint64_t **)(v122 + 32);
      uint64_t v122 = *v125;
    }
    v774[0] = (void *)v122;
    v774[1] = (void *)j;
    if ((v124 - 208) > 0xFFFFFFFC)
    {
      *(_OWORD *)uint64_t v772 = *(_OWORD *)*(void *)(v122 + 32);
      *(_OWORD *)__b = *(_OWORD *)v116;
      uint64_t v248 = (int *)a2[10];
      sub_1CD3DB440((llvm::EVT *)__b, v103);
      unsigned int v250 = sub_1CD3DB440((llvm::EVT *)&v780, v249);
      unsigned int v253 = sub_1CD3E12F4((unsigned __int8 *)&v780, v251, v252);
      unsigned int v256 = sub_1CD7878C0((unsigned int *)v772, v254, v255);
      unsigned int v259 = sub_1CD7878C0((unsigned int *)v774, v257, v258);
      int v260 = v259 / v256;
      if (!(v259 % v256) && v253 == v256)
      {
        if (v250)
        {
          int v262 = 0;
          uint64_t v263 = v250;
          while (1)
          {
            int v265 = *v248++;
            int v264 = v265;
            if ((v265 & 0x80000000) == 0 && (v260 * v262 >= v250 || v260 * v262 != v264)) {
              break;
            }
            ++v262;
            if (!--v263) {
              goto LABEL_348;
            }
          }
        }
        else
        {
LABEL_348:
          uint64_t v13 = sub_1CD7EF724(v115, v780, *((uint64_t *)&v780 + 1), *(uint64_t *)v772, *(uint64_t *)&v772[2]);
          if (v13) {
            return (uint64_t *)v13;
          }
        }
      }
    }
  }
  uint64_t v126 = v760;
  if (*(_WORD *)(v7 + 24) != 149) {
    goto LABEL_406;
  }
  int v127 = *(unsigned __int16 *)(v10 + 24);
  if (*(int *)(v760 + 24) > 1)
  {
LABEL_172:
    if (v127 != 51) {
      goto LABEL_406;
    }
    if (*(_WORD *)(v7 + 56) != 2) {
      goto LABEL_406;
    }
    uint64_t v128 = *(void *)(v7 + 32);
    if (*(void *)v128 != *(void *)(v128 + 40) || *(_DWORD *)(v128 + 8) != *(_DWORD *)(v128 + 48)) {
      goto LABEL_406;
    }
    unsigned int v129 = v768;
    if ((v768 & 0x80000000) == 0) {
      int v130 = v768;
    }
    else {
      int v130 = v768 + 1;
    }
    __b[0] = v777;
    __b[1] = (void *)0x800000000;
    if (v768)
    {
      unsigned int v129 = 0;
      for (unsigned int k = 0; k != v768; ++k)
      {
        int v132 = *(_DWORD *)(a2[10] + 4 * k);
        if (v132 >= v130 >> 1) {
          int v133 = v130 >> 1;
        }
        else {
          int v133 = 0;
        }
        if (v129 >= HIDWORD(__b[1])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)__b[0] + v129) = v132 - v133;
        unsigned int v129 = ++LODWORD(__b[1]);
      }
      unsigned __int8 v268 = __b[0];
    }
    else
    {
      unsigned __int8 v268 = v777;
    }
    if (((*(uint64_t (**)(void, _DWORD *, void, void, void))(**(void **)(v760 + 8) + 488))(*(void *)(v760 + 8), v268, v129, v769, *((void *)&v769 + 1)) & 1) == 0)
    {
      if (__b[0] != v777) {
        free(__b[0]);
      }
      uint64_t v126 = v760;
      goto LABEL_406;
    }
    uint64_t v395 = *(void *)(**(void **)(v7 + 32) + 40) + 16 * *(unsigned int *)(*(void *)(v7 + 32) + 8);
    unint64_t v397 = sub_1CD3DD4D8(*(void *)v760, *(llvm **)v395, *(void *)(v395 + 8));
    uint64_t v399 = v398;
    uint64_t v400 = *(void *)v760;
    uint64_t v401 = v770;
    int v402 = (unsigned __int8 *)v770[8];
    *(void *)&long long v780 = v402;
    if (v402) {
      llvm::MetadataTracking::track((uint64_t)&v780, v402, 2);
    }
    DWORD2(v780) = *((_DWORD *)v401 + 15);
    uint64_t v403 = *(uint64_t **)(v7 + 32);
    uint64_t v404 = *v403;
    uint64_t v405 = v403[1];
    uint64_t v406 = *(void *)(v400 + 832);
    if (v406) {
      LOWORD(v406) = *(_WORD *)(v406 + 8);
    }
    long long v407 = sub_1CCFDED5C(v400, 149, (const llvm::APInt *)&v780, (llvm *)v769, *((uint64_t *)&v769 + 1), v404, v405, v396, (uint64_t)v397, v399, v406);
    unsigned int v409 = v408;
    if ((void)v780)
    {
      int v410 = *(unsigned __int8 *)v780;
      if ((v410 - 4) > 0x1E)
      {
        if ((v410 - 3) >= 0xFFFFFFFE) {
          uint64_t v465 = v780;
        }
        else {
          uint64_t v465 = 0;
        }
        if ((v410 - 3) < 0xFFFFFFFE)
        {
          if (v410 == 3) {
            *(void *)(v780 + 8) = 0;
          }
          goto LABEL_594;
        }
        unint64_t v466 = v465 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v780 + 1) & 0x7F) != 2 && !*(_DWORD *)(v780 + 12)) {
          goto LABEL_594;
        }
        uint64_t v669 = *(void *)(v780 + 16);
        if ((v669 & 4) == 0) {
          goto LABEL_594;
        }
        unint64_t v466 = v669 & 0xFFFFFFFFFFFFFFF8;
        if (!v466) {
          goto LABEL_594;
        }
      }
      v774[0] = &v780;
      sub_1CC5FA668(v466 + 16, v774);
    }
LABEL_594:
    uint64_t v411 = *(void *)v760;
    long long v412 = v769;
    uint64_t v413 = v770;
    uint64_t v414 = (unsigned __int8 *)v770[8];
    *(void *)&long long v780 = v414;
    if (v414) {
      llvm::MetadataTracking::track((uint64_t)&v780, v414, 2);
    }
    DWORD2(v780) = *((_DWORD *)v413 + 15);
    int v26 = sub_1CCFCDA78(v411, (llvm *)v412, *((uint64_t *)&v412 + 1), (uint64_t)&v780, (uint64_t)v407, v409, v10, v752, __b[0], LODWORD(__b[1]));
LABEL_28:
    uint64_t v14 = (uint64_t)v26;
    uint64_t v27 = v780;
    if (!(void)v780) {
      goto LABEL_32;
    }
    int v28 = *(unsigned __int8 *)v780;
    if ((v28 - 4) > 0x1E)
    {
      if ((v28 - 3) >= 0xFFFFFFFE) {
        uint64_t v30 = v780;
      }
      else {
        uint64_t v30 = 0;
      }
      if ((v28 - 3) < 0xFFFFFFFE) {
        goto LABEL_582;
      }
      unint64_t v31 = v30 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v780 + 1) & 0x7F) != 2 && !*(_DWORD *)(v780 + 12)) {
        goto LABEL_32;
      }
      uint64_t v283 = *(void *)(v780 + 16);
      if ((v283 & 4) == 0) {
        goto LABEL_32;
      }
      unint64_t v31 = v283 & 0xFFFFFFFFFFFFFFF8;
      if (!v31) {
        goto LABEL_32;
      }
    }
    v774[0] = &v780;
    uint64_t v32 = v31 + 16;
    uint64_t v33 = v774;
    goto LABEL_40;
  }
  if (v127 == 149)
  {
    uint64_t v154 = (unsigned __int8 *)(*(void *)(**(void **)(v7 + 32) + 40)
                             + 16 * *(unsigned int *)(*(void *)(v7 + 32) + 8));
    int v155 = *v154;
    BOOL v156 = (unsigned __int8 *)(*(void *)(**(void **)(v10 + 32) + 40)
                             + 16 * *(unsigned int *)(*(void *)(v10 + 32) + 8));
    if (v155 != *v156) {
      goto LABEL_406;
    }
    uint64_t v157 = *((void *)v156 + 1);
    uint64_t v158 = *((void *)v154 + 1);
    if (!v155 && v158 != v157) {
      goto LABEL_406;
    }
  }
  else if (v127 != 51)
  {
    goto LABEL_172;
  }
  unint64_t v756 = v8;
  unint64_t v160 = v770;
  BOOL v729 = *(void **)v760;
  long long v780 = *(_OWORD *)v770[5];
  unsigned int v161 = sub_1CD3DB440((llvm::EVT *)&v780, v103);
  uint64_t v162 = (uint64_t *)v160[4];
  uint64_t v163 = *v162;
  uint64_t v746 = v162[1];
  uint64_t v164 = v162[6];
  uint64_t v731 = v162[5];
  *(_OWORD *)__b = *(_OWORD *)v160[5];
  uint64_t v728 = v160;
  long long __src = (char *)v160[10];
  sub_1CD3DB440((llvm::EVT *)__b, v166);
  __b[0] = v777;
  __b[1] = (void *)0x400000000;
  uint64_t v167 = v163;
  *(_OWORD *)uint64_t v774 = *(_OWORD *)(*(void *)(**(void **)(v163 + 32) + 40)
                              + 16 * *(unsigned int *)(*(void *)(v163 + 32) + 8));
  unsigned int v169 = sub_1CD3DB440((llvm::EVT *)v774, v168);
  unsigned int v170 = v169;
  if (v161 != 2 * v169 || *(_WORD *)(v731 + 24) != 51) {
    goto LABEL_360;
  }
  uint64_t v171 = v169;
  if (!v169)
  {
LABEL_217:
    uint64_t v174 = (llvm *)v774[0];
    uint64_t v175 = v774[1];
    unsigned int v176 = (unsigned __int8 *)v728[8];
    *(void *)uint64_t v772 = v176;
    if (v176) {
      llvm::MetadataTracking::track((uint64_t)v772, v176, 2);
    }
    v772[2] = *((_DWORD *)v728 + 15);
    uint8x8_t v177 = sub_1CCFCDA78((uint64_t)v729, v174, (uint64_t)v175, (uint64_t)v772, **(void **)(v167 + 32), *(void *)(*(void *)(v167 + 32) + 8), *(void *)(*(void *)(v167 + 32) + 40), *(void *)(*(void *)(v167 + 32) + 48), __src, v171);
    unint64_t v747 = v746 & 0xFFFFFFFF00000000 | v178;
    if (!*(void *)v772) {
      goto LABEL_223;
    }
    int v179 = **(unsigned char **)v772;
    if ((v179 - 4) > 0x1E)
    {
      if ((v179 - 3) >= 0xFFFFFFFE) {
        uint64_t v481 = *(void *)v772;
      }
      else {
        uint64_t v481 = 0;
      }
      if ((v179 - 3) < 0xFFFFFFFE)
      {
        if (v179 == 3) {
          *(void *)(*(void *)v772 + 8) = 0;
        }
        goto LABEL_223;
      }
      unint64_t v482 = v481 + 8;
    }
    else
    {
      if ((*(unsigned char *)(*(void *)v772 + 1) & 0x7F) != 2 && !*(_DWORD *)(*(void *)v772 + 12)) {
        goto LABEL_223;
      }
      uint64_t v706 = *(void *)(*(void *)v772 + 16);
      if ((v706 & 4) == 0) {
        goto LABEL_223;
      }
      unint64_t v482 = v706 & 0xFFFFFFFFFFFFFFF8;
      if (!v482) {
        goto LABEL_223;
      }
    }
    *(void *)&long long v771 = v772;
    sub_1CC5FA668(v482 + 16, &v771);
LABEL_223:
    uint64_t v181 = sub_1CD3DD4D8((uint64_t)v729, (llvm *)v774[0], (uint64_t)v774[1]);
    unint64_t v183 = v164 & 0xFFFFFFFF00000000 | v182;
    uint64_t v184 = (unsigned __int8 *)v728[8];
    *(void *)uint64_t v772 = v184;
    if (v184) {
      llvm::MetadataTracking::track((uint64_t)v772, v184, 2);
    }
    v772[2] = *((_DWORD *)v728 + 15);
    uint64_t v185 = v729[104];
    if (v185) {
      LOWORD(v185) = *(_WORD *)(v185 + 8);
    }
    unsigned int v186 = sub_1CCFDED5C((uint64_t)v729, 149, (const llvm::APInt *)v772, (llvm *)v780, *((uint64_t *)&v780 + 1), (uint64_t)v177, v747, v180, (uint64_t)v181, v183, v185);
    goto LABEL_656;
  }
  uint64_t v172 = 4 * v169;
  int v173 = &__src[v172];
  while (*(_DWORD *)v173 == -1)
  {
    v173 += 4;
    v172 -= 4;
    if (!v172) {
      goto LABEL_217;
    }
  }
LABEL_360:
  if (v169 <= v161)
  {
    unsigned int v749 = 0;
    int v269 = 0;
    size_t __nb = 4 * v169;
    int v730 = v161 / v169;
    do
    {
      if (v170)
      {
        unint64_t v270 = &__src[4 * v170 * v269];
        size_t v271 = __nb;
        while (*(_DWORD *)v270 == -1)
        {
          v270 += 4;
          v271 -= 4;
          if (!v271) {
            goto LABEL_366;
          }
        }
        uint64_t v274 = 0;
        unsigned int v275 = -1;
        do
        {
          int v276 = *(_DWORD *)&__src[4 * v749 + 4 * v274];
          if (v276 != -1)
          {
            if (v274 != v276 % (int)v170) {
              goto LABEL_386;
            }
            int v277 = v276 / v170;
            if ((v275 & 0x80000000) != 0)
            {
              unsigned int v275 = v277;
            }
            else
            {
              BOOL v11 = v277 == v275;
              unsigned int v275 = v277;
              if (!v11)
              {
LABEL_386:
                uint64_t v14 = 0;
                goto LABEL_387;
              }
            }
          }
          ++v274;
        }
        while (v170 != v274);
        int v278 = *(unsigned __int16 *)(v167 + 56);
        BOOL v279 = __OFSUB__(v275, v278);
        int v280 = v275 - v278;
        if (v280 < 0 != v279) {
          unsigned int v281 = (uint64_t **)(*(void *)(v167 + 32) + 40 * v275);
        }
        else {
          unsigned int v281 = (uint64_t **)(*(void *)(v731 + 32) + 40 * v280);
        }
        unint64_t v272 = *v281;
        uint64_t v273 = (const char *)v281[1];
      }
      else
      {
LABEL_366:
        unint64_t v272 = sub_1CD3DD4D8((uint64_t)v729, (llvm *)v774[0], (uint64_t)v774[1]);
        uint64_t v273 = v103;
      }
      if (LODWORD(__b[1]) >= (unint64_t)HIDWORD(__b[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v282 = (uint64_t **)((char *)__b[0] + 16 * LODWORD(__b[1]));
      char *v282 = v272;
      v282[1] = (uint64_t *)v273;
      ++LODWORD(__b[1]);
      ++v269;
      v749 += v170;
    }
    while (v730 != v269);
  }
  uint64_t v433 = (unsigned __int8 *)v728[8];
  *(void *)uint64_t v772 = v433;
  if (v433) {
    llvm::MetadataTracking::track((uint64_t)v772, v433, 2);
  }
  v772[2] = *((_DWORD *)v728 + 15);
  uint64_t v434 = v729[104];
  if (v434) {
    uint64_t v435 = *(unsigned __int16 *)(v434 + 8);
  }
  else {
    uint64_t v435 = 0;
  }
  unsigned int v186 = sub_1CD7FF4E8(v729, (const char *)0x95, (const llvm::APInt *)v772, (llvm *)v780, *((uint64_t *)&v780 + 1), (uint64_t *)__b[0], LODWORD(__b[1]), v435);
LABEL_656:
  uint64_t v14 = (uint64_t)v186;
  if (!*(void *)v772) {
    goto LABEL_387;
  }
  int v452 = **(unsigned char **)v772;
  if ((v452 - 4) > 0x1E)
  {
    if ((v452 - 3) >= 0xFFFFFFFE) {
      uint64_t v467 = *(void *)v772;
    }
    else {
      uint64_t v467 = 0;
    }
    if ((v452 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v454 = v467 + 8;
LABEL_695:
      *(void *)&long long v771 = v772;
      sub_1CC5FA668(v454 + 16, &v771);
      goto LABEL_387;
    }
    if (v452 == 3) {
      *(void *)(*(void *)v772 + 8) = 0;
    }
  }
  else if ((*(unsigned char *)(*(void *)v772 + 1) & 0x7F) == 2 || *(_DWORD *)(*(void *)v772 + 12))
  {
    uint64_t v453 = *(void *)(*(void *)v772 + 16);
    if ((v453 & 4) != 0)
    {
      unint64_t v454 = v453 & 0xFFFFFFFFFFFFFFF8;
      if (v454) {
        goto LABEL_695;
      }
    }
  }
LABEL_387:
  if (__b[0] != v777) {
    free(__b[0]);
  }
  unint64_t v8 = v756;
  if (v14) {
    return (uint64_t *)v14;
  }
  uint64_t v126 = v760;
  if (*(_WORD *)(v7 + 24) == 149)
  {
    int v127 = *(unsigned __int16 *)(v10 + 24);
    goto LABEL_172;
  }
LABEL_406:
  int v286 = *(_DWORD *)(v126 + 24);
  if (v286 < 2)
  {
    uint64_t v287 = v769;
    if (!(_BYTE)v769) {
      goto LABEL_432;
    }
    uint64_t v288 = *(void *)(v760 + 8);
    if (!*(void *)(v288 + 8 * v769 + 96)
      || (*(unsigned __int8 *)(v288 + 390 * v769 + 4012) | 4) != 4)
    {
LABEL_431:
      if (!*(void *)(*(void *)(v760 + 8) + 8 * v287 + 96)) {
        goto LABEL_432;
      }
      unint64_t v758 = v8;
      size_t __nc = *(void *)(v760 + 8);
      uint64_t v750 = *(void **)v760;
      *(_OWORD *)uint64_t v772 = *(_OWORD *)a2[5];
      int v305 = sub_1CD3DB440((llvm::EVT *)v772, v103);
      uint64_t v307 = (uint64_t *)a2[4];
      uint64_t v308 = *v307;
      uint64_t v309 = *(void *)(*v307 + 48);
      if (!v309 || *(void *)(v309 + 32))
      {
LABEL_460:
        unint64_t v8 = v758;
        goto LABEL_432;
      }
      int v310 = v305;
      uint64_t v738 = v307[5];
      if (*(_WORD *)(v738 + 24) == 51) {
        goto LABEL_720;
      }
      uint64_t v311 = *(void *)(v738 + 48);
      if (!v311 || *(void *)(v311 + 32)) {
        goto LABEL_460;
      }
      uint64_t v312 = v307[6];
      if (*(_WORD *)(v308 + 24) == 146)
      {
        if (sub_1CCF40DA4(v308, v307[1], 0)) {
          int v313 = 1;
        }
        else {
          int v313 = sub_1CD7E99AC(v308);
        }
      }
      else
      {
        int v313 = 0;
      }
      if (*(_WORD *)(v738 + 24) == 146)
      {
        if (sub_1CCF40DA4(v738, v312, 0))
        {
          int v432 = 1;
          goto LABEL_718;
        }
        int v432 = sub_1CD7E99AC(v738);
        if (!v313) {
          goto LABEL_718;
        }
      }
      else
      {
        int v432 = 0;
        if (!v313) {
          goto LABEL_718;
        }
      }
      if ((v432 & 1) == 0)
      {
        if ((sub_1CCFCBB88(v308, 1, v306) & 1) == 0) {
          goto LABEL_460;
        }
        goto LABEL_720;
      }
LABEL_718:
      if (((v313 | v432 ^ 1) & 1) == 0 && !sub_1CCFCBB88(v738, 1, v306)) {
        goto LABEL_460;
      }
LABEL_720:
      if (*(_WORD *)(v308 + 24) == 146) {
        uint64_t v483 = v308;
      }
      else {
        uint64_t v483 = 0;
      }
      if (*(_WORD *)(v738 + 24) == 146) {
        uint64_t v484 = v738;
      }
      else {
        uint64_t v484 = 0;
      }
      if (v483) {
        BOOL v485 = v484 == 0;
      }
      else {
        BOOL v485 = 1;
      }
      if (!v485 && (uint64_t v486 = sub_1CD7EE8F8(v483, 0)) != 0)
      {
        int v487 = (int)v103;
        BOOL v489 = v486 == sub_1CD7EE8F8(v484, 0) && v487 == v103;
        BOOL v735 = v489;
      }
      else
      {
        BOOL v735 = 0;
      }
      *(void *)&long long v780 = v781;
      *((void *)&v780 + 1) = 0x800000000;
      __b[0] = v777;
      __b[1] = (void *)0x1000000000;
      v779[1] = 0;
      v779[0] = 0;
      int v778 = v779;
      *(_OWORD *)uint64_t v774 = *(_OWORD *)a2[5];
      unint64_t v490 = (int *)a2[10];
      unsigned int v491 = sub_1CD3DB440((llvm::EVT *)v774, v103);
      if (v491)
      {
        for (uint64_t m = 4 * v491; m; m -= 4)
        {
          int v499 = *v490;
          int v500 = (llvm *)sub_1CD3DD468((unsigned __int8 *)v772, v492, v493);
          uint64_t v502 = sub_1CD3DD4D8((uint64_t)v750, v500, v501);
          v774[0] = v502;
          v774[1] = (void *)v492;
          if (v499 < 0)
          {
            uint64_t v508 = v502;
          }
          else
          {
            if (v499 >= v310) {
              int v503 = v310;
            }
            else {
              int v503 = 0;
            }
            uint64_t v504 = v738;
            if (v499 < v310) {
              uint64_t v504 = v308;
            }
            int v505 = *(unsigned __int16 *)(v504 + 24);
            if (v505 == 155)
            {
              uint64_t v509 = *(void *)(v504 + 32);
              uint64_t v508 = *(uint64_t **)v509;
              uint64_t v492 = *(unsigned int *)(v509 + 8);
              if (v499 != v503) {
                uint64_t v508 = sub_1CD3DD4D8((uint64_t)v750, *(llvm **)(v508[5] + 16 * v492), *(void *)(v508[5] + 16 * v492 + 8));
              }
              v774[0] = v508;
              LODWORD(v774[1]) = v492;
            }
            else
            {
              if (v505 != 146) {
                goto LABEL_842;
              }
              uint64_t v506 = *(void *)(v504 + 32) + 40 * (v499 - v503);
              int v507 = *(_DWORD *)(v506 + 8);
              uint64_t v508 = *(uint64_t **)v506;
              v774[0] = *(void **)v506;
              LODWORD(v774[1]) = v507;
            }
          }
          if (*((_WORD *)v508 + 12) != 51)
          {
            int v510 = *((unsigned __int16 *)v508 + 12);
            if (v510 != 11 && v510 != 35 && !v735 && v510 != 12 && v510 != 36)
            {
              if ((sub_1CD788B34((uint64_t *)__b, (uint64_t *)v774) & 0x100000000) == 0)
              {
LABEL_842:
                uint64_t v14 = 0;
                goto LABEL_858;
              }
              uint64_t v508 = (uint64_t *)v774[0];
            }
          }
          uint64_t v511 = (uint64_t *)v774[1];
          if (DWORD2(v780) >= (unint64_t)HIDWORD(v780)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          unint64_t v512 = (uint64_t **)(v780 + 16 * DWORD2(v780));
          *unint64_t v512 = v508;
          v512[1] = v511;
          ++DWORD2(v780);
          ++v490;
        }
      }
      *(void *)&long long v771 = sub_1CD3DD468((unsigned __int8 *)v772, v492, v493);
      *((void *)&v771 + 1) = v494;
      int v496 = v771;
      if ((_BYTE)v771)
      {
        if (v771 - 120 >= 0x20
          && v771 - 2 >= 6
          && v771 - 15 >= 0x3C)
        {
LABEL_775:
          unsigned __int8 v513 = sub_1CD3DD468((unsigned __int8 *)v772, v494, v495);
          if (v771 == v513 && ((_BYTE)v771 || *((void *)&v771 + 1) == v514) || !DWORD2(v780))
          {
LABEL_779:
            uint64_t v515 = *(llvm **)v772;
            uint64_t v516 = *(void *)&v772[2];
            uint64_t v517 = (void *)a2[8];
            v774[0] = v517;
            if (v517) {
              llvm::MetadataTracking::track((uint64_t)v774, (unsigned __int8 *)v517, 2);
            }
            LODWORD(v774[1]) = *((_DWORD *)a2 + 15);
            uint64_t v518 = v750[104];
            if (v518) {
              uint64_t v519 = *(unsigned __int16 *)(v518 + 8);
            }
            else {
              uint64_t v519 = 0;
            }
            uint64_t v14 = (uint64_t)sub_1CD7FF4E8(v750, (const char *)0x92, (const llvm::APInt *)v774, v515, v516, (uint64_t *)v780, DWORD2(v780), v519);
            if (!v774[0]) {
              goto LABEL_858;
            }
            int v520 = *(unsigned __int8 *)v774[0];
            if ((v520 - 4) > 0x1E)
            {
              if ((v520 - 3) >= 0xFFFFFFFE) {
                uint64_t v551 = v774[0];
              }
              else {
                uint64_t v551 = 0;
              }
              if ((v520 - 3) < 0xFFFFFFFE)
              {
                if (v520 == 3) {
                  *((void *)v774[0] + 1) = 0;
                }
                goto LABEL_858;
              }
              unint64_t v522 = (unint64_t)v551 + 8;
            }
            else
            {
              if ((*((unsigned char *)v774[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v774[0] + 3)) {
                goto LABEL_858;
              }
              uint64_t v521 = *((void *)v774[0] + 2);
              if ((v521 & 4) == 0) {
                goto LABEL_858;
              }
              unint64_t v522 = v521 & 0xFFFFFFFFFFFFFFF8;
              if (!v522) {
                goto LABEL_858;
              }
            }
            *(void *)uint64_t v766 = v774;
            sub_1CC5FA668(v522 + 16, v766);
LABEL_858:
            sub_1CB833A08((uint64_t)&v778, v779[0]);
            if (__b[0] != v777) {
              free(__b[0]);
            }
            if ((void *)v780 != v781) {
              free((void *)v780);
            }
            unint64_t v8 = v758;
            if (v14) {
              return (uint64_t *)v14;
            }
            goto LABEL_432;
          }
          uint64_t v523 = 16 * DWORD2(v780);
          uint64_t v524 = (_DWORD *)(v780 + 8);
          while (1)
          {
            uint64_t v525 = *((void *)v524 - 1);
            if (*(_WORD *)(v525 + 24) == 51)
            {
              *((void *)v524 - 1) = sub_1CD3DD4D8((uint64_t)v750, (llvm *)v771, *((uint64_t *)&v771 + 1));
              _DWORD *v524 = v526;
            }
            else
            {
              int v527 = (void *)(*(void *)(v525 + 40) + 16 * *v524);
              int v528 = (*(uint64_t (**)(size_t, void, void, void, void))(*(void *)__nc + 1192))(__nc, *v527, v527[1], v771, *((void *)&v771 + 1));
              uint64_t v529 = *((void *)v524 - 1);
              uint64_t v530 = *(void *)v524;
              if (v528)
              {
                uint64_t v531 = (void *)a2[8];
                v774[0] = v531;
                if (v531) {
                  llvm::MetadataTracking::track((uint64_t)v774, (unsigned __int8 *)v531, 2);
                }
                LODWORD(v774[1]) = *((_DWORD *)a2 + 15);
                uint64_t v532 = sub_1CD7EB80C((uint64_t)v750, v529, v530, (uint64_t)v774, v771, *((uint64_t *)&v771 + 1));
              }
              else
              {
                uint64_t v534 = (void *)a2[8];
                v774[0] = v534;
                if (v534) {
                  llvm::MetadataTracking::track((uint64_t)v774, (unsigned __int8 *)v534, 2);
                }
                LODWORD(v774[1]) = *((_DWORD *)a2 + 15);
                uint64_t v532 = sub_1CD7EB744((uint64_t)v750, v529, v530, (uint64_t)v774, v771, *((uint64_t *)&v771 + 1));
              }
              *((void *)v524 - 1) = v532;
              _DWORD *v524 = v533;
              if (!v774[0]) {
                goto LABEL_805;
              }
              int v535 = *(unsigned __int8 *)v774[0];
              if ((v535 - 4) > 0x1E)
              {
                if ((v535 - 3) >= 0xFFFFFFFE) {
                  uint64_t v536 = v774[0];
                }
                else {
                  uint64_t v536 = 0;
                }
                if ((v535 - 3) < 0xFFFFFFFE)
                {
                  if (v535 == 3) {
                    *((void *)v774[0] + 1) = 0;
                  }
                  goto LABEL_805;
                }
                unint64_t v537 = (unint64_t)v536 + 8;
              }
              else
              {
                if ((*((unsigned char *)v774[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v774[0] + 3)) {
                  goto LABEL_805;
                }
                uint64_t v538 = *((void *)v774[0] + 2);
                if ((v538 & 4) == 0) {
                  goto LABEL_805;
                }
                unint64_t v537 = v538 & 0xFFFFFFFFFFFFFFF8;
                if (!v537) {
                  goto LABEL_805;
                }
              }
              *(void *)uint64_t v766 = v774;
              sub_1CC5FA668(v537 + 16, v766);
            }
LABEL_805:
            v524 += 4;
            v523 -= 16;
            if (!v523) {
              goto LABEL_779;
            }
          }
        }
      }
      else
      {
        if ((*(_DWORD *)(v494 + 8) & 0xFE) == 0x12) {
          int v497 = *(unsigned __int8 *)(**(void **)(v494 + 16) + 8);
        }
        else {
          int v497 = *(_DWORD *)(v494 + 8);
        }
        if (v497 != 13) {
          goto LABEL_775;
        }
      }
      if (!DWORD2(v780)) {
        goto LABEL_775;
      }
      uint64_t v539 = 16 * DWORD2(v780);
      unint64_t v540 = (unsigned int *)(v780 + 8);
      while (1)
      {
        uint64_t v541 = *(void *)(*((void *)v540 - 1) + 40) + 16 * *v540;
        uint64_t v543 = *(void **)v541;
        uint64_t v542 = *(void **)(v541 + 8);
        if (v496 != *(void *)v541) {
          break;
        }
        unint64_t v544 = &v771;
        if (!v496 && (void *)v494 != v542)
        {
          v774[0] = v543;
          v774[1] = v542;
          goto LABEL_823;
        }
LABEL_833:
        uint64_t v494 = *((void *)v544 + 1);
        *(void *)&long long v771 = *(void *)v544;
        *((void *)&v771 + 1) = v494;
        int v496 = v771;
        v540 += 4;
        v539 -= 16;
        if (!v539) {
          goto LABEL_775;
        }
      }
      v774[0] = *(void **)v541;
      v774[1] = v542;
      if (v496) {
        uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v771);
      }
      else {
LABEL_823:
      }
        uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v771);
      unint64_t v547 = ExtendedSizeInBits;
      int v548 = v546;
      if ((_BYTE)v543) {
        unint64_t v549 = sub_1CB87E200((unsigned __int8 *)v774);
      }
      else {
        unint64_t v549 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v774);
      }
      if (v548 == 1 && v550 != 1 || v547 >= v549) {
        unint64_t v544 = &v771;
      }
      else {
        unint64_t v544 = (long long *)(*(void *)(*((void *)v540 - 1) + 40) + 16 * *v540);
      }
      goto LABEL_833;
    }
    *(void *)&long long v780 = v760;
    *((void *)&v780 + 1) = &v768;
    v781[0] = &v770;
    v781[1] = &v769;
    *(_OWORD *)__b = *(_OWORD *)a2[5];
    uint64_t v289 = (_DWORD *)a2[10];
    uint64_t v290 = sub_1CD3DB440((llvm::EVT *)__b, v103);
    if (*(_WORD *)(v10 + 24) == 149)
    {
      uint64_t v13 = (uint64_t)sub_1CCF66FFC((uint64_t)&v780, (const char *)v7, v8, v10, v752, v289, v290);
      if (v13) {
        return (uint64_t *)v13;
      }
    }
    if (*(_WORD *)(v7 + 24) == 149)
    {
      __b[0] = v777;
      __b[1] = (void *)0xC00000000;
      if (v290 >= 0xD) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v291 = 0;
      long long v292 = v777;
      if (v290)
      {
        memcpy(v777, v289, 4 * v290);
        int v291 = (int)__b[1];
        long long v292 = (int *)__b[0];
      }
      unsigned int v293 = v291 + v290;
      LODWORD(__b[1]) = v291 + v290;
      if (v291 + v290)
      {
        uint64_t v294 = v292;
        uint64_t v295 = (v291 + v290);
        do
        {
          int v296 = *v294;
          if ((*v294 & 0x80000000) == 0)
          {
            if (v296 >= (int)v293) {
              int v297 = -v293;
            }
            else {
              int v297 = v291 + v290;
            }
            *uint64_t v294 = v297 + v296;
          }
          ++v294;
          --v295;
        }
        while (v295);
        unsigned int v293 = __b[1];
      }
      uint64_t v14 = (uint64_t)sub_1CCF66FFC((uint64_t)&v780, (const char *)v10, v752, v7, v8, v292, v293);
      if (__b[0] != v777) {
        free(__b[0]);
      }
      if (v14) {
        return (uint64_t *)v14;
      }
    }
    int v286 = *(_DWORD *)(v760 + 24);
  }
  if (v286 <= 2)
  {
    uint64_t v287 = v769;
    if ((_BYTE)v769) {
      goto LABEL_431;
    }
  }
LABEL_432:
  uint64_t v298 = v760;
  if (*(_WORD *)(v7 + 24) == 216)
  {
    uint64_t v299 = *(void *)(v7 + 48);
    if (v299)
    {
      int v300 = 1;
      do
      {
        if (*(_DWORD *)(v299 + 8) == v8)
        {
          if (!v300) {
            goto LABEL_444;
          }
          --v300;
        }
        uint64_t v299 = *(void *)(v299 + 32);
      }
      while (v299);
      if (!v300 && *(_WORD *)(v10 + 24) == 51)
      {
        int v301 = *(_DWORD *)(v760 + 24);
        if (v301 >= 2) {
          goto LABEL_445;
        }
        uint64_t v298 = v760;
        if ((_BYTE)v769)
        {
          if (*(void *)(*(void *)(v760 + 8) + 8 * v769 + 96))
          {
            uint64_t v417 = sub_1CD802A30(v7, v8);
            if (*(_WORD *)(v417 + 24) == 153)
            {
              uint64_t v419 = (void *)v417;
              uint64_t v420 = *(void *)(v417 + 48);
              if (v420)
              {
                int v421 = v8;
                int v422 = 1;
                uint64_t v298 = v760;
                do
                {
                  if (*(_DWORD *)(v420 + 8) == v103)
                  {
                    LODWORD(v8) = v421;
                    if (!v422) {
                      goto LABEL_444;
                    }
                    --v422;
                  }
                  uint64_t v420 = *(void *)(v420 + 32);
                }
                while (v420);
                uint64_t v298 = v760;
                LODWORD(v8) = v421;
                if (!v422)
                {
                  *(void *)uint64_t v772 = sub_1CD3DD468((unsigned __int8 *)&v769, (uint64_t)v103, v418);
                  *(void *)&v772[2] = v423;
                  long long v771 = *(_OWORD *)v419[5];
                  uint64_t v425 = (void *)sub_1CD3DD468((unsigned __int8 *)&v771, v423, v424);
                  char v428 = (char)v425;
                  *(void *)uint64_t v766 = v425;
                  *(void *)v767 = v426;
                  if (LOBYTE(v772[0]) == v425)
                  {
                    uint64_t v429 = &v771;
                    if (LOBYTE(v772[0]) || *(void **)&v772[2] == v426) {
                      goto LABEL_900;
                    }
                    __b[0] = v425;
                    __b[1] = v426;
                  }
                  else
                  {
                    __b[0] = v425;
                    __b[1] = v426;
                    if (LOBYTE(v772[0]))
                    {
                      uint64_t v430 = sub_1CB87E200((unsigned __int8 *)v772);
LABEL_894:
                      unint64_t v595 = v430;
                      int v596 = v431;
                      if (v428) {
                        unint64_t v597 = sub_1CB87E200((unsigned __int8 *)__b);
                      }
                      else {
                        unint64_t v597 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)__b);
                      }
                      if (v596 == 1 && v426 != 1)
                      {
                        uint64_t v429 = &v771;
                      }
                      else
                      {
                        uint64_t v429 = &v771;
                        if (v595 < v597) {
                          uint64_t v429 = &v769;
                        }
                      }
LABEL_900:
                      *(_OWORD *)uint64_t v765 = *v429;
                      *(void *)uint64_t v763 = sub_1CD3DD468((unsigned __int8 *)v765, (uint64_t)v426, v427);
                      *(void *)v764 = v103;
                      if (!LOBYTE(v765[0]) || !*(void *)(*(void *)(v760 + 8) + 8 * LOBYTE(v765[0]) + 96)) {
                        goto LABEL_1011;
                      }
                      if (LOBYTE(v766[0])) {
                        uint64_t v598 = sub_1CB87E200((unsigned __int8 *)v766);
                      }
                      else {
                        uint64_t v598 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v766);
                      }
                      unint64_t v653 = v598;
                      if (v599 == 1) {
                      if (LOBYTE(v763[0]))
                      }
                        uint64_t v654 = sub_1CB87E200((unsigned __int8 *)v763);
                      else {
                        uint64_t v654 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v763);
                      }
                      unint64_t v655 = v654;
                      if (v103 == 1) {
                      if (v653 % v655)
                      }
                        goto LABEL_1011;
                      if (LOBYTE(v772[0])) {
                        uint64_t v656 = sub_1CB87E200((unsigned __int8 *)v772);
                      }
                      else {
                        uint64_t v656 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v772);
                      }
                      unint64_t v660 = v656;
                      if (v657 == 1) {
                      if (LOBYTE(v763[0]))
                      }
                        uint64_t v661 = sub_1CB87E200((unsigned __int8 *)v763);
                      else {
                        uint64_t v661 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v763);
                      }
                      unint64_t v662 = v661;
                      if (v103 == 1) {
                      if (v660 % v662)
                      }
                        goto LABEL_1011;
                      if (LOBYTE(v766[0])) {
                        uint64_t v667 = sub_1CB87E200((unsigned __int8 *)v766);
                      }
                      else {
                        uint64_t v667 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v766);
                      }
                      unint64_t v670 = v667;
                      if (v668 == 1) {
                      if (LOBYTE(v763[0]))
                      }
                        uint64_t v671 = sub_1CB87E200((unsigned __int8 *)v763);
                      else {
                        uint64_t v671 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v763);
                      }
                      unint64_t v673 = v671;
                      if (v672 == 1) {
                      if (LOBYTE(v772[0]))
                      }
                        uint64_t v674 = sub_1CB87E200((unsigned __int8 *)v772);
                      else {
                        uint64_t v674 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v772);
                      }
                      unint64_t v676 = v674;
                      if (v675 == 1) {
                      uint64_t v677 = v670 / v673;
                      }
                      if (LOBYTE(v763[0])) {
                        uint64_t v678 = sub_1CB87E200((unsigned __int8 *)v763);
                      }
                      else {
                        uint64_t v678 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v763);
                      }
                      unint64_t v680 = v678;
                      if (v679 == 1) {
                      __b[0] = v777;
                      }
                      __b[1] = (void *)0x800000000;
                      *(void *)&long long v780 = v781;
                      *((void *)&v780 + 1) = 0x800000000;
                      *(_OWORD *)uint64_t v774 = *(_OWORD *)v419[5];
                      uint64_t v681 = v676 / v680;
                      uint64_t v682 = (int *)v419[10];
                      unsigned int v683 = sub_1CD3DB440((llvm::EVT *)v774, v679);
                      llvm::narrowShuffleMaskElts(v677, v682, v683, (uint64_t)__b);
                      *(_OWORD *)uint64_t v774 = *(_OWORD *)a2[5];
                      uint64_t v684 = (int *)a2[10];
                      unsigned int v686 = sub_1CD3DB440((llvm::EVT *)v774, v685);
                      llvm::narrowShuffleMaskElts(v681, v684, v686, (uint64_t)&v780);
                      v774[0] = v775;
                      v774[1] = (void *)0x800000000;
                      if (DWORD2(v780))
                      {
                        unsigned int v687 = 0;
                        v688 = (unsigned int *)v780;
                        uint64_t v689 = 4 * DWORD2(v780);
                        do
                        {
                          uint64_t v690 = *v688;
                          if ((v690 & 0x80000000) != 0) {
                            int v691 = -1;
                          }
                          else {
                            int v691 = *((_DWORD *)__b[0] + v690);
                          }
                          if (v687 >= HIDWORD(v774[1])) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *((_DWORD *)v774[0] + v687) = v691;
                          unsigned int v687 = ++LODWORD(v774[1]);
                          ++v688;
                          v689 -= 4;
                        }
                        while (v689);
                        uint64_t v692 = v774[0];
                      }
                      else
                      {
                        unsigned int v687 = 0;
                        uint64_t v692 = v775;
                      }
                      v693 = (uint64_t *)v419[4];
                      uint64_t v694 = *v693;
                      uint64_t v695 = v693[1];
                      uint64_t v696 = v693[5];
                      unint64_t v697 = v693[6];
                      if (((*(uint64_t (**)(void, unsigned char *, void, uint64_t, uint64_t))(**(void **)(v760 + 8)
                                                                                                 + 488))(*(void *)(v760 + 8), v692, v687, v765[0], v765[1]) & 1) != 0)
                      {
                        uint64_t v707 = v694;
                      }
                      else
                      {
                        v698 = v774[0];
                        int v699 = (int)v774[1];
                        if (LODWORD(v774[1]))
                        {
                          int v700 = -LODWORD(v774[1]);
                          v701 = (int *)v774[0];
                          uint64_t v702 = LODWORD(v774[1]);
                          do
                          {
                            int v703 = *v701;
                            if ((*v701 & 0x80000000) == 0)
                            {
                              if (v703 >= v699) {
                                int v704 = v700;
                              }
                              else {
                                int v704 = v699;
                              }
                              int *v701 = v704 + v703;
                            }
                            ++v701;
                            --v702;
                          }
                          while (v702);
                          int v699 = (int)v774[1];
                        }
                        if (!(*(unsigned int (**)(void, void *, void, uint64_t, uint64_t))(**(void **)(v760 + 8) + 488))(*(void *)(v760 + 8), v698, v699, v765[0], v765[1]))
                        {
                          if (v774[0] != v775) {
                            free(v774[0]);
                          }
                          if ((void *)v780 != v781) {
                            free((void *)v780);
                          }
                          if (__b[0] != v777) {
                            free(__b[0]);
                          }
LABEL_1011:
                          uint64_t v298 = v760;
                          LODWORD(v8) = v421;
                          goto LABEL_444;
                        }
                        unint64_t v708 = v695 & 0xFFFFFFFF00000000 | v697;
                        unint64_t v697 = v697 & 0xFFFFFFFF00000000 | v695;
                        uint64_t v695 = v708;
                        uint64_t v707 = v696;
                        uint64_t v696 = v694;
                      }
                      uint64_t v753 = sub_1CD7EF724(*(void *)v760, v765[0], v765[1], v707, v695);
                      unsigned int v710 = v709;
                      uint64_t v711 = sub_1CD7EF724(*(void *)v760, v765[0], v765[1], v696, v697);
                      unsigned int v713 = v712;
                      uint64_t v714 = *(void *)v760;
                      long long v715 = v769;
                      int v716 = (llvm *)v765[0];
                      uint64_t v717 = v765[1];
                      uint64_t v718 = v770;
                      v719 = (unsigned __int8 *)v770[8];
                      v761 = (void **)v719;
                      if (v719) {
                        llvm::MetadataTracking::track((uint64_t)&v761, v719, 2);
                      }
                      int v762 = *((_DWORD *)v718 + 15);
                      int v720 = sub_1CCFCDA78(v714, v716, v717, (uint64_t)&v761, v753, v710, v711, v713, v774[0], LODWORD(v774[1]));
                      uint64_t v14 = sub_1CD7EF724(v714, v715, *((uint64_t *)&v715 + 1), (uint64_t)v720, v721);
                      if (v761)
                      {
                        int v722 = *(unsigned __int8 *)v761;
                        if ((v722 - 4) > 0x1E)
                        {
                          if ((v722 - 3) >= 0xFFFFFFFE) {
                            v724 = v761;
                          }
                          else {
                            v724 = 0;
                          }
                          if ((v722 - 3) < 0xFFFFFFFE)
                          {
                            if (v722 == 3) {
                              v761[1] = 0;
                            }
                            goto LABEL_1086;
                          }
                          unint64_t v725 = (unint64_t)(v724 + 1);
                        }
                        else
                        {
                          if ((*((unsigned char *)v761 + 1) & 0x7F) != 2 && !*((_DWORD *)v761 + 3)) {
                            goto LABEL_1086;
                          }
                          unint64_t v727 = (unint64_t)v761[2];
                          if ((v727 & 4) == 0) {
                            goto LABEL_1086;
                          }
                          unint64_t v725 = v727 & 0xFFFFFFFFFFFFFFF8;
                          if (!v725) {
                            goto LABEL_1086;
                          }
                        }
                        uint64_t v773 = &v761;
                        sub_1CC5FA668(v725 + 16, &v773);
                      }
LABEL_1086:
                      if (v774[0] != v775) {
                        free(v774[0]);
                      }
                      if ((void *)v780 != v781) {
                        free((void *)v780);
                      }
                      int v29 = __b[0];
LABEL_549:
                      if (v29 != v777) {
                        goto LABEL_33;
                      }
                      return (uint64_t *)v14;
                    }
                  }
                  uint64_t v430 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v772);
                  goto LABEL_894;
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_444:
  int v301 = *(_DWORD *)(v298 + 24);
LABEL_445:
  LODWORD(v771) = v768;
  *((void *)&v771 + 1) = &v769;
  if (v301 > 2 || !(_BYTE)v769 || !*(void *)(*(void *)(v760 + 8) + 8 * v769 + 96)) {
    goto LABEL_908;
  }
  if (*(_WORD *)(v10 + 24) == 153)
  {
    if (*(_WORD *)(v7 + 24) == 153)
    {
      if (sub_1CD804960(*(void *)(v7 + 80), **(const char ***)(v7 + 40), *(void *)(*(void *)(v7 + 40) + 8))
        && !sub_1CD804960(*(void *)(v10 + 80), **(const char ***)(v10 + 40), *(void *)(*(void *)(v10 + 40) + 8)))
      {
LABEL_457:
        uint64_t v12 = *(void *)v760;
        return sub_1CD7EE9FC(v12, (uint64_t)a2);
      }
    }
    else
    {
      uint64_t v302 = *(void *)(v10 + 32);
      if (*(_DWORD *)(v302 + 8) == v8 && v7 == *(void *)v302) {
        goto LABEL_457;
      }
      uint64_t v304 = *(void *)(v302 + 40);
      if (*(_WORD *)(v304 + 24) == 51 || v7 == v304 && *(_DWORD *)(v302 + 48) == v8) {
        goto LABEL_457;
      }
    }
  }
  char v314 = 0;
  uint64_t v315 = 0;
  while (1)
  {
    char v316 = v314;
    uint64_t v317 = v770[4];
    uint64_t v318 = *(void *)(v317 + 40 * v315);
    if (*(_WORD *)(v318 + 24) == 153)
    {
      uint64_t v319 = *(void *)(v318 + 48);
      if (v319) {
        break;
      }
    }
LABEL_476:
    char v314 = 1;
    uint64_t v315 = 1;
    if (v316)
    {
      uint64_t v322 = *(unsigned __int16 *)(v7 + 24);
      if (!(*(unsigned int (**)(void, uint64_t))(**(void **)(v760 + 8) + 1136))(*(void *)(v760 + 8), v322))goto LABEL_908; {
      uint64_t v323 = *(void *)(v7 + 48);
      }
      if (!v323) {
        goto LABEL_908;
      }
      do
      {
        if (*(void **)(v323 + 16) != v770) {
          goto LABEL_908;
        }
        uint64_t v323 = *(void *)(v323 + 32);
      }
      while (v323);
      int v324 = *(unsigned __int16 *)(v10 + 24);
      if (v324 == 51)
      {
        uint64_t v325 = v10;
        uint64_t v326 = v10;
        LODWORD(v327) = v752;
      }
      else
      {
        if (v322 != v324) {
          goto LABEL_908;
        }
        uint64_t v392 = *(void *)(v10 + 48);
        if (!v392) {
          goto LABEL_908;
        }
        do
        {
          if (*(void **)(v392 + 16) != v770) {
            goto LABEL_908;
          }
          uint64_t v392 = *(void *)(v392 + 32);
        }
        while (v392);
        unint64_t v393 = *(uint64_t **)(v10 + 32);
        uint64_t v326 = *v393;
        uint64_t v327 = v393[1];
        uint64_t v325 = v393[5];
        uint64_t v752 = v393[6];
      }
      uint64_t v328 = *(void *)(v7 + 32);
      uint64_t v329 = *(void *)v328;
      unsigned int v330 = *(_DWORD *)(v328 + 8);
      uint64_t v331 = (unsigned __int8 *)(*(void *)(*(void *)v328 + 40) + 16 * v330);
      int v332 = *v331;
      if (v332 != v769) {
        goto LABEL_908;
      }
      uint64_t v333 = *((void *)v331 + 1);
      if (!v332 && v333 != *((void *)&v769 + 1)) {
        goto LABEL_908;
      }
      int v335 = (unsigned __int8 *)(*(void *)(v326 + 40) + 16 * v327);
      if (*v335 != v332) {
        goto LABEL_908;
      }
      uint64_t v336 = *((void *)v335 + 1);
      if (!v332 && v336 != *((void *)&v769 + 1)) {
        goto LABEL_908;
      }
      uint64_t v759 = *(void *)(v328 + 40);
      uint64_t v751 = *(unsigned int *)(v328 + 48);
      uint64_t v338 = (unsigned __int8 *)(*(void *)(v759 + 40) + 16 * v751);
      if (*v338 != v332) {
        goto LABEL_908;
      }
      uint64_t v339 = *((void *)v338 + 1);
      BOOL v340 = v332 || v339 == *((void *)&v769 + 1);
      if (!v340
        || (uint64_t v341 = (unsigned __int8 *)(*(void *)(v325 + 40) + 16 * v752), *v341 != v332)
        || ((v342 = *((void *)v341 + 1), !v332) ? (BOOL v343 = v342 == *((void *)&v769 + 1)) : (BOOL v343 = 1),
            !v343
         || (int v344 = *(unsigned __int16 *)(v329 + 24), v344 != 153)
         && *(_WORD *)(v326 + 24) != 153
         && *(_WORD *)(v759 + 24) != 153
         && *(_WORD *)(v325 + 24) != 153))
      {
LABEL_908:
        uint64_t v600 = (void *)a2[4];
        uint64_t v601 = *v600;
        if (*(_WORD *)(*v600 + 24) != 149) {
          return 0;
        }
        if (*(_WORD *)(v601 + 56) != 2) {
          return 0;
        }
        uint64_t v602 = v600[5];
        if (*(_WORD *)(v602 + 24) != 149
          || *(_WORD *)(v602 + 56) != 2
          || *(_WORD *)(*(void *)(*(void *)(v601 + 32) + 40) + 24) != 51
          || *(_WORD *)(*(void *)(*(void *)(v602 + 32) + 40) + 24) != 51)
        {
          return 0;
        }
        unint64_t v603 = *(void **)v760;
        *(_OWORD *)__b = *(_OWORD *)a2[5];
        uint64_t v604 = a2[10];
        sub_1CD3DB440((llvm::EVT *)__b, v103);
        *(_OWORD *)uint64_t v774 = *(_OWORD *)a2[5];
        unsigned int v606 = sub_1CD3DB440((llvm::EVT *)v774, v605);
        uint64_t v609 = v606;
        unint64_t v610 = v606 >> 1;
        __b[0] = v777;
        HIDWORD(__b[1]) = 16;
        if (v606 > 0x21)
        {
          LODWORD(__b[1]) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v606 < 2)
        {
          LODWORD(__b[1]) = v606 >> 1;
          *(void *)&long long v780 = v781;
          *((void *)&v780 + 1) = v610 | 0x1000000000;
          v611 = v777;
          if (!v606) {
            goto LABEL_929;
          }
        }
        else
        {
          memset(v777, 255, 4 * v610);
          LODWORD(__b[1]) = v610;
          *(void *)&long long v780 = v781;
          HIDWORD(v780) = 16;
          memset(v781, 255, 4 * v610);
          v611 = v777;
          DWORD2(v780) = v610;
        }
        unint64_t v612 = 0;
        do
        {
          int v613 = *(_DWORD *)(v604 + 4 * v612);
          if (v613 != -1 && v613 % v609 < v610)
          {
            if (v613 >= (int)v609) {
              int v614 = v610;
            }
            else {
              int v614 = 0;
            }
            int v615 = v613 - v614;
            uint64_t v616 = (_DWORD *)v781 + (v612 - v610);
            if (v612 < v610) {
              uint64_t v616 = v611;
            }
            *uint64_t v616 = v615;
          }
          ++v612;
          ++v611;
        }
        while (v609 != v612);
LABEL_929:
        uint64_t v617 = v603[3];
        uint64_t v618 = (llvm::LLVMContext *)v603[7];
        unint64_t v619 = sub_1CD3DD468((unsigned __int8 *)v774, v607, v608);
        v621 = (llvm *)sub_1CB8E5DAC(v618, v619, v620, v610, 0);
        uint64_t v623 = v622;
        if (((*(uint64_t (**)(uint64_t, void *, void, llvm *, uint64_t))(*(void *)v617 + 488))(v617, __b[0], LODWORD(__b[1]), v621, v622) & 1) != 0&& (*(unsigned int (**)(uint64_t, void, void, llvm *, uint64_t))(*(void *)v617 + 488))(v617, v780, DWORD2(v780), v621, v623))
        {
          v624 = *(uint64_t **)(v601 + 32);
          uint64_t v625 = *v624;
          uint64_t v626 = v624[1];
          uint64_t v627 = *(uint64_t **)(v602 + 32);
          uint64_t v628 = *v627;
          uint64_t v629 = v627[1];
          uint64_t v630 = (unsigned __int8 *)a2[8];
          *(void *)uint64_t v772 = v630;
          if (v630) {
            llvm::MetadataTracking::track((uint64_t)v772, v630, 2);
          }
          v772[2] = *((_DWORD *)a2 + 15);
          uint64_t v631 = sub_1CCFCDA78((uint64_t)v603, v621, v623, (uint64_t)v772, v625, v626, v628, v629, __b[0], LODWORD(__b[1]));
          uint64_t v633 = v632;
          v634 = sub_1CCFCDA78((uint64_t)v603, v621, v623, (uint64_t)v772, v625, v626, v628, v629, (void *)v780, DWORD2(v780));
          uint64_t v637 = v603[104];
          if (v637) {
            LOWORD(v637) = *(_WORD *)(v637 + 8);
          }
          uint64_t v14 = (uint64_t)sub_1CCFDED5C((uint64_t)v603, 149, (const llvm::APInt *)v772, (llvm *)v774[0], (uint64_t)v774[1], (uint64_t)v631, v633, v636, (uint64_t)v634, v635, v637);
          if (!*(void *)v772) {
            goto LABEL_943;
          }
          int v638 = **(unsigned char **)v772;
          if ((v638 - 4) > 0x1E)
          {
            if ((v638 - 3) >= 0xFFFFFFFE) {
              uint64_t v641 = *(void *)v772;
            }
            else {
              uint64_t v641 = 0;
            }
            if ((v638 - 3) < 0xFFFFFFFE)
            {
              if (v638 == 3) {
                *(void *)(*(void *)v772 + 8) = 0;
              }
              goto LABEL_943;
            }
            unint64_t v640 = v641 + 8;
          }
          else
          {
            if ((*(unsigned char *)(*(void *)v772 + 1) & 0x7F) != 2 && !*(_DWORD *)(*(void *)v772 + 12)) {
              goto LABEL_943;
            }
            uint64_t v639 = *(void *)(*(void *)v772 + 16);
            if ((v639 & 4) == 0) {
              goto LABEL_943;
            }
            unint64_t v640 = v639 & 0xFFFFFFFFFFFFFFF8;
            if (!v640) {
              goto LABEL_943;
            }
          }
          *(void *)uint64_t v766 = v772;
          sub_1CC5FA668(v640 + 16, v766);
        }
        else
        {
          uint64_t v14 = 0;
        }
LABEL_943:
        if ((void *)v780 != v781) {
          free((void *)v780);
        }
        if (__b[0] != v777) {
          free(__b[0]);
        }
        return (uint64_t *)v14;
      }
      *(void *)uint64_t v772 = 0;
      v772[2] = 0;
      *(void *)uint64_t v766 = 0;
      v767[0] = 0;
      __b[0] = v777;
      __b[1] = (void *)0x400000000;
      if (v344 != 153 || (uint64_t v345 = *(void *)(v329 + 48)) == 0)
      {
LABEL_513:
        if (v326)
        {
          if (*(_WORD *)(v326 + 24) == 153)
          {
            uint64_t v346 = *(void *)(v326 + 48);
            if (v346)
            {
              while (*(void *)(v346 + 16) == v10)
              {
                uint64_t v346 = *(void *)(v346 + 32);
                if (!v346)
                {
                  if (!sub_1CCF6741C((uint64_t)&v771, 1, (uint64_t)a2, v326, v329, v330, *(void *)(v760 + 8), (uint64_t *)v772, (uint64_t *)v766, (uint64_t *)__b))break; {
                  long long v780 = *(_OWORD *)*(void *)(v326 + 40);
                  }
                  unsigned int v642 = *(_DWORD **)(v326 + 80);
                  unsigned int v643 = sub_1CD3DB440((llvm::EVT *)&v780, v103);
                  if (v643)
                  {
                    uint64_t v644 = 4 * v643;
                    while ((*v642 & 0x80000000) == 0)
                    {
                      ++v642;
                      v644 -= 4;
                      if (!v644) {
                        goto LABEL_965;
                      }
                    }
                    goto LABEL_969;
                  }
LABEL_965:
                  if (!LODWORD(__b[1])) {
                    goto LABEL_969;
                  }
                  unsigned int v645 = __b[0];
                  uint64_t v646 = 4 * LODWORD(__b[1]);
                  while ((*v645 & 0x80000000) == 0)
                  {
                    ++v645;
                    v646 -= 4;
                    if (!v646) {
                      goto LABEL_969;
                    }
                  }
                  break;
                }
              }
            }
          }
        }
        long long v780 = *(_OWORD *)a2[5];
        unsigned __int8 v347 = (unsigned char *)a2[10];
        sub_1CD3DB440((llvm::EVT *)&v780, v103);
        long long v780 = *(_OWORD *)a2[5];
        size_t __ne = a2[10];
        unsigned int v349 = sub_1CD3DB440((llvm::EVT *)&v780, v348);
        int v350 = 0;
        LODWORD(__b[1]) = 0;
        uint64_t v733 = (unsigned char *)(__ne + 4 * v349);
        size_t __nd = v733 - v347;
        if ((v733 - v347) >> 2 > (unint64_t)HIDWORD(__b[1])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v347 != v733)
        {
          memcpy(__b[0], v347, __nd);
          int v350 = (int)__b[1];
        }
        int v734 = 0;
        LODWORD(__b[1]) = v350 + (__nd >> 2);
        *(void *)uint64_t v772 = v329;
        v772[2] = v330;
        *(void *)uint64_t v766 = v326;
        v767[0] = v327;
LABEL_520:
        v765[0] = 0;
        LODWORD(v765[1]) = 0;
        *(void *)uint64_t v763 = 0;
        v764[0] = 0;
        *(void *)&long long v780 = v781;
        *((void *)&v780 + 1) = 0x400000000;
        if (v759)
        {
          if (*(_WORD *)(v759 + 24) == 153)
          {
            uint64_t v351 = *(void *)(v759 + 48);
            if (v351)
            {
              while (*(void *)(v351 + 16) == v7)
              {
                uint64_t v351 = *(void *)(v351 + 32);
                if (!v351)
                {
                  if (!sub_1CCF6741C((uint64_t)&v771, 0, (uint64_t)a2, v759, v325, v752, *(void *)(v760 + 8), v765, (uint64_t *)v763, (uint64_t *)&v780))break; {
                  *(_OWORD *)uint64_t v774 = *(_OWORD *)*(void *)(v759 + 40);
                  }
                  uint64_t v441 = *(_DWORD **)(v759 + 80);
                  unsigned int v442 = sub_1CD3DB440((llvm::EVT *)v774, v103);
                  if (v442)
                  {
                    uint64_t v443 = 4 * v442;
                    while ((*v441 & 0x80000000) == 0)
                    {
                      ++v441;
                      v443 -= 4;
                      if (!v443) {
                        goto LABEL_643;
                      }
                    }
                    goto LABEL_530;
                  }
LABEL_643:
                  if (!DWORD2(v780)) {
                    goto LABEL_530;
                  }
                  uint64_t v444 = (_DWORD *)v780;
                  uint64_t v445 = 4 * DWORD2(v780);
                  while ((*v444 & 0x80000000) == 0)
                  {
                    ++v444;
                    v445 -= 4;
                    if (!v445) {
                      goto LABEL_530;
                    }
                  }
                  break;
                }
              }
            }
          }
        }
        if (v325)
        {
          if (*(_WORD *)(v325 + 24) == 153)
          {
            uint64_t v352 = *(void *)(v325 + 48);
            if (v352)
            {
              while (*(void *)(v352 + 16) == v10)
              {
                uint64_t v352 = *(void *)(v352 + 32);
                if (!v352)
                {
                  if (!sub_1CCF6741C((uint64_t)&v771, 1, (uint64_t)a2, v325, v759, v751, *(void *)(v760 + 8), v765, (uint64_t *)v763, (uint64_t *)&v780))break; {
                  *(_OWORD *)uint64_t v774 = *(_OWORD *)*(void *)(v325 + 40);
                  }
                  uint64_t v647 = *(_DWORD **)(v325 + 80);
                  unsigned int v648 = sub_1CD3DB440((llvm::EVT *)v774, v103);
                  if (v648)
                  {
                    uint64_t v649 = 4 * v648;
                    while ((*v647 & 0x80000000) == 0)
                    {
                      ++v647;
                      v649 -= 4;
                      if (!v649) {
                        goto LABEL_977;
                      }
                    }
                    goto LABEL_530;
                  }
LABEL_977:
                  if (!DWORD2(v780)) {
                    goto LABEL_530;
                  }
                  v650 = (_DWORD *)v780;
                  uint64_t v651 = 4 * DWORD2(v780);
                  while ((*v650 & 0x80000000) == 0)
                  {
                    ++v650;
                    v651 -= 4;
                    if (!v651) {
                      goto LABEL_530;
                    }
                  }
                  break;
                }
              }
            }
          }
        }
        *(_OWORD *)uint64_t v774 = *(_OWORD *)a2[5];
        int v353 = (unsigned char *)a2[10];
        sub_1CD3DB440((llvm::EVT *)v774, v103);
        *(_OWORD *)uint64_t v774 = *(_OWORD *)a2[5];
        uint64_t v354 = a2[10];
        unsigned int v356 = sub_1CD3DB440((llvm::EVT *)v774, v355);
        int v357 = 0;
        uint64_t v358 = (unsigned char *)(v354 + 4 * v356);
        DWORD2(v780) = 0;
        if ((v358 - v353) >> 2 > (unint64_t)HIDWORD(v780)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v353 != v358)
        {
          memcpy((void *)v780, v353, v358 - v353);
          int v357 = DWORD2(v780);
        }
        DWORD2(v780) = v357 + ((unint64_t)(v358 - v353) >> 2);
        v765[0] = v759;
        LODWORD(v765[1]) = v751;
        *(void *)uint64_t v763 = v325;
        v764[0] = v752;
        if (v734)
        {
LABEL_530:
          BOOL v359 = v770;
          BOOL v360 = (void *)v770[8];
          v774[0] = v360;
          if (v360) {
            llvm::MetadataTracking::track((uint64_t)v774, (unsigned __int8 *)v360, 2);
          }
          LODWORD(v774[1]) = *((_DWORD *)v359 + 15);
          uint64_t v361 = *(void *)v760;
          long long v362 = v769;
          uint64_t v363 = *(uint64_t **)v772;
          if (*(void *)v772)
          {
            unsigned int v364 = v772[2];
          }
          else
          {
            uint64_t v363 = sub_1CD3DD4D8(v361, (llvm *)v769, *((uint64_t *)&v769 + 1));
            unsigned int v364 = v663;
          }
          uint64_t v365 = *(uint64_t **)v766;
          if (*(void *)v766)
          {
            unsigned int v366 = v767[0];
          }
          else
          {
            uint64_t v365 = sub_1CD3DD4D8(*(void *)v760, (llvm *)v769, *((uint64_t *)&v769 + 1));
            unsigned int v366 = v664;
          }
          uint64_t v367 = sub_1CCFCDA78(v361, (llvm *)v362, *((uint64_t *)&v362 + 1), (uint64_t)v774, (uint64_t)v363, v364, (uint64_t)v365, v366, __b[0], LODWORD(__b[1]));
          uint64_t v369 = v368;
          uint64_t v370 = *(void *)v760;
          long long v371 = v769;
          uint64_t v372 = (uint64_t *)v765[0];
          if (v765[0])
          {
            unsigned int v373 = v765[1];
          }
          else
          {
            uint64_t v372 = sub_1CD3DD4D8(v370, (llvm *)v769, *((uint64_t *)&v769 + 1));
            unsigned int v373 = v665;
          }
          unsigned int v374 = *(uint64_t **)v763;
          if (*(void *)v763)
          {
            unsigned int v375 = v764[0];
          }
          else
          {
            unsigned int v374 = sub_1CD3DD4D8(*(void *)v760, (llvm *)v769, *((uint64_t *)&v769 + 1));
            unsigned int v375 = v666;
          }
          unsigned int v376 = sub_1CCFCDA78(v370, (llvm *)v371, *((uint64_t *)&v371 + 1), (uint64_t)v774, (uint64_t)v372, v373, (uint64_t)v374, v375, (void *)v780, DWORD2(v780));
          uint64_t v379 = *(void *)(*(void *)v760 + 832);
          if (v379) {
            LOWORD(v379) = *(_WORD *)(v379 + 8);
          }
          uint64_t v14 = (uint64_t)sub_1CCFDED5C(*(void *)v760, v322, (const llvm::APInt *)v774, (llvm *)v769, *((uint64_t *)&v769 + 1), (uint64_t)v367, v369, v378, (uint64_t)v376, v377, v379);
          if (!v774[0]) {
            goto LABEL_546;
          }
          int v380 = *(unsigned __int8 *)v774[0];
          if ((v380 - 4) > 0x1E)
          {
            if ((v380 - 3) >= 0xFFFFFFFE) {
              uint64_t v658 = v774[0];
            }
            else {
              uint64_t v658 = 0;
            }
            if ((v380 - 3) < 0xFFFFFFFE)
            {
              if (v380 == 3) {
                *((void *)v774[0] + 1) = 0;
              }
              goto LABEL_546;
            }
            unint64_t v659 = (unint64_t)v658 + 8;
          }
          else
          {
            if ((*((unsigned char *)v774[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v774[0] + 3)) {
              goto LABEL_546;
            }
            uint64_t v726 = *((void *)v774[0] + 2);
            if ((v726 & 4) == 0) {
              goto LABEL_546;
            }
            unint64_t v659 = v726 & 0xFFFFFFFFFFFFFFF8;
            if (!v659) {
              goto LABEL_546;
            }
          }
          v761 = v774;
          sub_1CC5FA668(v659 + 16, &v761);
LABEL_546:
          if ((void *)v780 != v781) {
            free((void *)v780);
          }
          int v29 = __b[0];
          goto LABEL_549;
        }
        if ((void *)v780 != v781) {
          free((void *)v780);
        }
        if (__b[0] != v777) {
          free(__b[0]);
        }
        goto LABEL_908;
      }
      do
      {
        if (*(void *)(v345 + 16) != v7) {
          goto LABEL_513;
        }
        uint64_t v345 = *(void *)(v345 + 32);
      }
      while (v345);
      if (!sub_1CCF6741C((uint64_t)&v771, 0, (uint64_t)a2, v329, v326, v327, *(void *)(v760 + 8), (uint64_t *)v772, (uint64_t *)v766, (uint64_t *)__b))goto LABEL_513; {
      long long v780 = *(_OWORD *)*(void *)(v329 + 40);
      }
      uint64_t v436 = *(_DWORD **)(v329 + 80);
      unsigned int v437 = sub_1CD3DB440((llvm::EVT *)&v780, v103);
      if (v437)
      {
        uint64_t v438 = 4 * v437;
        while ((*v436 & 0x80000000) == 0)
        {
          ++v436;
          v438 -= 4;
          if (!v438) {
            goto LABEL_631;
          }
        }
      }
      else
      {
LABEL_631:
        if (LODWORD(__b[1]))
        {
          uint64_t v439 = __b[0];
          uint64_t v440 = 4 * LODWORD(__b[1]);
          while ((*v439 & 0x80000000) == 0)
          {
            ++v439;
            v440 -= 4;
            if (!v440) {
              goto LABEL_969;
            }
          }
          goto LABEL_513;
        }
      }
LABEL_969:
      int v734 = 1;
      goto LABEL_520;
    }
  }
  do
  {
    if (*(void **)(v319 + 16) != v770) {
      goto LABEL_476;
    }
    uint64_t v319 = *(void *)(v319 + 32);
  }
  while (v319);
  *(void *)&long long v780 = 0;
  DWORD2(v780) = 0;
  v774[0] = 0;
  LODWORD(v774[1]) = 0;
  __b[0] = v777;
  __b[1] = (void *)0x400000000;
  int v320 = sub_1CCF6741C((uint64_t)&v771, v316 & 1, (uint64_t)a2, v318, *(void *)(v317 + 40 * (v315 ^ 1)), *(void *)(v317 + 40 * (v315 ^ 1) + 8), *(void *)(v760 + 8), (uint64_t *)&v780, (uint64_t *)v774, (uint64_t *)__b);
  unsigned int v321 = __b[0];
  if (!v320)
  {
    if (__b[0] != v777) {
      free(__b[0]);
    }
    goto LABEL_476;
  }
  if (!LODWORD(__b[1]))
  {
LABEL_555:
    uint64_t v14 = (uint64_t)sub_1CD3DD4D8(*(void *)v760, (llvm *)v769, *((uint64_t *)&v769 + 1));
    goto LABEL_32;
  }
  uint64_t v381 = 4 * LODWORD(__b[1]);
  while ((*v321 & 0x80000000) != 0)
  {
    ++v321;
    v381 -= 4;
    if (!v381) {
      goto LABEL_555;
    }
  }
  uint64_t v382 = *(void *)v760;
  long long v383 = v769;
  __int16 v384 = v770;
  int v385 = (unsigned __int8 *)v770[8];
  *(void *)uint64_t v772 = v385;
  if (v385) {
    llvm::MetadataTracking::track((uint64_t)v772, v385, 2);
  }
  v772[2] = *((_DWORD *)v384 + 15);
  uint64_t v386 = (uint64_t *)v780;
  if ((void)v780)
  {
    unsigned int v387 = DWORD2(v780);
  }
  else
  {
    uint64_t v386 = sub_1CD3DD4D8(*(void *)v760, (llvm *)v769, *((uint64_t *)&v769 + 1));
    unsigned int v387 = v415;
  }
  uint64_t v388 = (uint64_t *)v774[0];
  if (v774[0])
  {
    unsigned int v389 = v774[1];
  }
  else
  {
    uint64_t v388 = sub_1CD3DD4D8(*(void *)v760, (llvm *)v769, *((uint64_t *)&v769 + 1));
    unsigned int v389 = v416;
  }
  uint64_t v14 = (uint64_t)sub_1CCFCDA78(v382, (llvm *)v383, *((uint64_t *)&v383 + 1), (uint64_t)v772, (uint64_t)v386, v387, (uint64_t)v388, v389, __b[0], LODWORD(__b[1]));
  uint64_t v27 = *(void *)v772;
  if (*(void *)v772)
  {
    int v28 = **(unsigned char **)v772;
    if ((v28 - 4) <= 0x1E)
    {
      if ((*(unsigned char *)(*(void *)v772 + 1) & 0x7F) == 2 || *(_DWORD *)(*(void *)v772 + 12))
      {
        uint64_t v390 = *(void *)(*(void *)v772 + 16);
        if ((v390 & 4) != 0)
        {
          unint64_t v391 = v390 & 0xFFFFFFFFFFFFFFF8;
          if (v391)
          {
LABEL_581:
            *(void *)uint64_t v766 = v772;
            uint64_t v32 = v391 + 16;
            uint64_t v33 = v766;
LABEL_40:
            sub_1CC5FA668(v32, v33);
          }
        }
      }
      goto LABEL_32;
    }
    if ((v28 - 3) >= 0xFFFFFFFE) {
      uint64_t v394 = *(void *)v772;
    }
    else {
      uint64_t v394 = 0;
    }
    if ((v28 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v391 = v394 + 8;
      goto LABEL_581;
    }
LABEL_582:
    if (v28 == 3) {
      *(void *)(v27 + 8) = 0;
    }
  }
LABEL_32:
  int v29 = __b[0];
  if (__b[0] != v777) {
LABEL_33:
  }
    free(v29);
  return (uint64_t *)v14;
}

uint64_t sub_1CCF3E2FC(uint64_t a1)
{
  int v1 = *(unsigned __int16 *)(a1 + 56);
  if (!*(_WORD *)(a1 + 56)) {
    return 0;
  }
  uint64_t v2 = *(unsigned int **)(a1 + 32);
  uint64_t result = *(void *)v2;
  if (*(unsigned char *)(*(void *)(*(void *)v2 + 40) + 16 * v2[2]) == 1) {
    return result;
  }
  uint64_t v4 = (v1 - 1);
  uint64_t result = *(void *)&v2[10 * v4];
  if (*(unsigned char *)(*(void *)(result + 40) + 16 * v2[10 * v4 + 2]) == 1) {
    return result;
  }
  if (v4 < 2) {
    return 0;
  }
  uint64_t v5 = v2 + 12;
  uint64_t v6 = v4 - 1;
  while (1)
  {
    uint64_t result = *((void *)v5 - 1);
    if (*(unsigned char *)(*(void *)(result + 40) + 16 * *v5) == 1) {
      break;
    }
    v5 += 10;
    if (!--v6) {
      return 0;
    }
  }
  return result;
}

void sub_1CCF3E3A0(uint64_t **a1, int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7 = *a1;
  uint64_t v9 = **a1;
  uint64_t v8 = (*a1)[1];
  if (v8 == v9)
  {
    uint64_t v10 = *((unsigned int *)v7 + 5);
    BOOL v11 = (void *)(v8 + 8 * v10);
    if (v10)
    {
      uint64_t v12 = 0;
      uint64_t v13 = 8 * v10;
      while (*(void *)(v8 + v12) != a3)
      {
        v12 += 8;
        if (v13 == v12) {
          goto LABEL_19;
        }
      }
      BOOL v11 = (void *)(v8 + v12);
    }
LABEL_19:
    uint64_t v9 = (*a1)[1];
  }
  else
  {
    uint64_t v14 = *((unsigned int *)v7 + 4);
    int v15 = v14 - 1;
    unsigned int v16 = (v14 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    BOOL v11 = (void *)(v8 + 8 * v16);
    uint64_t v17 = *v11;
    if (*v11 == -1)
    {
      unsigned int v18 = 0;
LABEL_72:
      if (v18) {
        BOOL v11 = v18;
      }
      if (*v11 != a3) {
        BOOL v11 = (void *)(v8 + 8 * v14);
      }
    }
    else
    {
      unsigned int v18 = 0;
      int v19 = 1;
      while (v17 != a3)
      {
        if (v18) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v17 == -2;
        }
        if (v20) {
          unsigned int v18 = v11;
        }
        unsigned int v21 = v16 + v19++;
        unsigned int v16 = v21 & v15;
        BOOL v11 = (void *)(v8 + 8 * (v21 & v15));
        uint64_t v17 = *v11;
        if (*v11 == -1) {
          goto LABEL_72;
        }
      }
    }
  }
  BOOL v20 = v8 == v9;
  uint64_t v22 = 16;
  if (v20) {
    uint64_t v22 = 20;
  }
  if (v11 != (void *)(v8 + 8 * *(unsigned int *)((char *)v7 + v22)))
  {
    uint64_t v23 = a1[2];
    *(unsigned char *)a1[1] = 1;
    *(unsigned char *)uint64_t v23 = 1;
    uint64_t v24 = a1[3];
    uint64_t v25 = *((unsigned int *)v24 + 2);
    if (v25)
    {
      uint64_t v26 = 0;
      uint64_t v27 = (void *)*v24;
      while (*v27 != a3)
      {
        ++v26;
        v27 += 2;
        if (v25 == v26)
        {
          uint64_t v26 = v25;
          goto LABEL_30;
        }
      }
      LODWORD(v25) = v26;
    }
    else
    {
      uint64_t v26 = 0;
    }
LABEL_30:
    int v28 = a1[4];
    unsigned int v29 = *((_DWORD *)v28 + 2);
    if (v29 > a2 + 1)
    {
      unsigned int v30 = ~a2 + v29;
      unint64_t v31 = (unsigned int *)(*v28 + 16 * (a2 + 1) + 8);
      do
      {
        if (*v31 == v25) {
          *unint64_t v31 = a4;
        }
        v31 += 4;
        --v30;
      }
      while (v30);
    }
    uint64_t v32 = a1[6];
    uint64_t v33 = *a1[5];
    *(_DWORD *)(v33 + 4 * a4) += *(_DWORD *)(v33 + 4 * v26);
    *(_DWORD *)(v33 + 4 * v26) = 0;
    --*(_DWORD *)v32;
  }
  uint64_t v34 = a1[7];
  uint64_t v35 = v34[1];
  uint64_t v36 = *((unsigned int *)v34 + 5);
  if (v35 == *v34)
  {
    if (v36)
    {
      uint64_t v37 = 0;
      uint64_t v38 = 8 * v36;
      uint64_t v39 = (void *)v34[1];
      while (*v39 != a3)
      {
        if (*v39 == -2) {
          uint64_t v37 = v39;
        }
        ++v39;
        v38 -= 8;
        if (!v38)
        {
          if (!v37) {
            goto LABEL_44;
          }
          void *v37 = a3;
          --*((_DWORD *)v34 + 6);
          goto LABEL_68;
        }
      }
      return;
    }
LABEL_44:
    unsigned int v40 = *((_DWORD *)v34 + 4);
    if (v36 < v40)
    {
      *((_DWORD *)v34 + 5) = v36 + 1;
      *(void *)(v35 + 8 * v36) = a3;
LABEL_68:
      uint64_t v51 = a1 + 4;
      int v50 = a1[4];
      ++*(_DWORD *)(*v51[1] + 4 * a4);
      unsigned int v52 = *((_DWORD *)v50 + 2);
      if (v52 >= *((_DWORD *)v50 + 3)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v53 = (void *)(*v50 + 16 * v52);
      void *v53 = a3;
      v53[1] = a4;
      ++*((_DWORD *)v50 + 2);
      return;
    }
  }
  else
  {
    unsigned int v40 = *((_DWORD *)v34 + 4);
  }
  if (3 * v40 <= 4 * ((int)v36 - *((_DWORD *)v34 + 6)))
  {
    if (v40 >= 0x40) {
      v40 *= 2;
    }
    else {
      unsigned int v40 = 128;
    }
  }
  else if (v40 - v36 >= v40 >> 3)
  {
    goto LABEL_49;
  }
  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a1[7], v40);
  unsigned int v40 = *((_DWORD *)v34 + 4);
  uint64_t v35 = v34[1];
LABEL_49:
  unsigned int v41 = v40 - 1;
  unsigned int v42 = (v40 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  uint64_t v43 = (void *)(v35 + 8 * v42);
  uint64_t v44 = *v43;
  if (*v43 != -1)
  {
    uint64_t v45 = 0;
    int v46 = 1;
    while (v44 != a3)
    {
      if (v45) {
        BOOL v47 = 0;
      }
      else {
        BOOL v47 = v44 == -2;
      }
      if (v47) {
        uint64_t v45 = v43;
      }
      unsigned int v48 = v42 + v46++;
      unsigned int v42 = v48 & v41;
      uint64_t v43 = (void *)(v35 + 8 * (v48 & v41));
      uint64_t v44 = *v43;
      if (*v43 == -1) {
        goto LABEL_61;
      }
    }
    return;
  }
  uint64_t v45 = 0;
LABEL_61:
  if (v45) {
    uint64_t v49 = v45;
  }
  else {
    uint64_t v49 = v43;
  }
  if (*v49 != a3)
  {
    if (*v49 == -2) {
      --*((_DWORD *)v34 + 6);
    }
    else {
      ++*((_DWORD *)v34 + 5);
    }
    *uint64_t v49 = a3;
    goto LABEL_68;
  }
}

uint64_t *sub_1CCF3E734(uint64_t a1, uint64_t a2)
{
  uint64_t v209 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(uint64_t **)(a2 + 32);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  uint64_t v7 = v4[5];
  unint64_t v8 = v4[6];
  long long v201 = *(_OWORD *)(*(void *)(*v4 + 40) + 16 * v6);
  uint64_t v9 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v199 = v9;
  if (v9) {
    llvm::MetadataTracking::track((uint64_t)&v199, v9, 2);
  }
  int v200 = *(_DWORD *)(a2 + 60);
  if (*(_WORD *)(v5 + 24) == 51) {
    goto LABEL_4;
  }
  if (*(_WORD *)(v7 + 24) == 51)
  {
    uint64_t v10 = (uint64_t *)v7;
    goto LABEL_9;
  }
  uint64_t v11 = *(void *)a1;
  *(void *)&long long v206 = v5;
  DWORD2(v206) = v6;
  unint64_t v207 = (long long *)v7;
  LODWORD(v208) = v8;
  uint64_t v12 = sub_1CCFDBB80(v11, (const char *)0x38, (const llvm::APInt *)&v199, (llvm *)v201, *((uint64_t *)&v201 + 1), (uint64_t *)&v206, 2);
  if (v12) {
    goto LABEL_8;
  }
  if (sub_1CD7F590C(*(void *)a1, v5) && !sub_1CD7F590C(*(void *)a1, v7))
  {
    uint64_t v28 = *(void *)a1;
    uint64_t v30 = *((void *)&v201 + 1);
    unsigned int v29 = (llvm *)v201;
    uint64_t v31 = *(void *)(*(void *)a1 + 832);
    if (v31) {
      LOWORD(v31) = *(_WORD *)(v31 + 8);
    }
    uint64_t v190 = v6;
    __int16 v191 = v31;
    uint64_t v189 = v5;
    uint64_t v32 = 56;
LABEL_38:
    uint64_t v33 = (uint64_t *)v7;
    uint64_t v34 = v8;
LABEL_65:
    uint64_t v12 = sub_1CCFDED5C(v28, v32, (const llvm::APInt *)&v199, v29, v30, (uint64_t)v33, v34, v21, v189, v190, v191);
    goto LABEL_8;
  }
  if ((_BYTE)v201)
  {
    if (v201 - 15 >= 0x9C) {
      goto LABEL_29;
    }
  }
  else if ((*(_DWORD *)(*((void *)&v201 + 1) + 8) & 0xFE) != 0x12)
  {
    goto LABEL_29;
  }
  uint64_t v12 = sub_1CCF3FF7C((uint64_t *)a1, a2, (const llvm::APInt *)&v199, v17, v18, v19, v20, v21);
  if (v12)
  {
LABEL_8:
    uint64_t v10 = v12;
    goto LABEL_9;
  }
  if (sub_1CCFCBB88(v7, 0, v22))
  {
LABEL_4:
    uint64_t v10 = (uint64_t *)v5;
    goto LABEL_9;
  }
LABEL_29:
  if (sub_1CD7F2D2C(v7)) {
    goto LABEL_4;
  }
  if (sub_1CCF40DA4(v7, v8, 1))
  {
    int v23 = *(unsigned __int16 *)(v5 + 24);
    if (v23 == 57)
    {
      if (sub_1CCF40DA4(*(void *)(*(void *)(v5 + 32) + 40), *(void *)(*(void *)(v5 + 32) + 48), 1))
      {
        uint64_t v24 = *(void *)a1;
        *(void *)&long long v206 = v7;
        DWORD2(v206) = v8;
        uint64_t v25 = *(void *)(v5 + 32);
        unint64_t v207 = *(long long **)(v25 + 40);
        LODWORD(v208) = *(_DWORD *)(v25 + 48);
        uint64_t v26 = sub_1CCFDBB80(v24, (const char *)0x39, (const llvm::APInt *)&v199, (llvm *)v201, *((uint64_t *)&v201 + 1), (uint64_t *)&v206, 2);
LABEL_61:
        uint64_t v30 = *((void *)&v201 + 1);
        unsigned int v29 = (llvm *)v201;
        uint64_t v48 = *(void *)(v5 + 32);
        uint64_t v33 = *(uint64_t **)v48;
        uint64_t v34 = *(void *)(v48 + 8);
        uint64_t v49 = *(void *)(*(void *)a1 + 832);
        if (v49) {
          LOWORD(v49) = *(_WORD *)(v49 + 8);
        }
        uint64_t v190 = v27;
        __int16 v191 = v49;
        uint64_t v189 = (uint64_t)v26;
        uint64_t v28 = *(void *)a1;
LABEL_64:
        uint64_t v32 = 56;
        goto LABEL_65;
      }
      int v23 = *(unsigned __int16 *)(v5 + 24);
      if (v23 == 57)
      {
        if (sub_1CCF40DA4(**(void **)(v5 + 32), *(void *)(*(void *)(v5 + 32) + 8), 1))
        {
          uint64_t v35 = *(void *)a1;
          *(void *)&long long v206 = v7;
          DWORD2(v206) = v8;
          uint64_t v36 = *(void *)(v5 + 32);
          int v37 = *(_DWORD *)(v36 + 8);
          unint64_t v207 = *(long long **)v36;
          LODWORD(v208) = v37;
          uint64_t v33 = sub_1CCFDBB80(v35, (const char *)0x38, (const llvm::APInt *)&v199, (llvm *)v201, *((uint64_t *)&v201 + 1), (uint64_t *)&v206, 2);
          uint64_t v34 = v38;
          uint64_t v28 = *(void *)a1;
          uint64_t v30 = *((void *)&v201 + 1);
          unsigned int v29 = (llvm *)v201;
          uint64_t v39 = *(void *)(v5 + 32);
          uint64_t v40 = *(void *)(v39 + 40);
          uint64_t v41 = *(void *)(v39 + 48);
LABEL_42:
          uint64_t v42 = *(void *)(v28 + 832);
          if (v42) {
            LOWORD(v42) = *(_WORD *)(v42 + 8);
          }
          uint64_t v190 = v41;
          __int16 v191 = v42;
          uint64_t v189 = v40;
LABEL_45:
          uint64_t v32 = 57;
          goto LABEL_65;
        }
        int v23 = *(unsigned __int16 *)(v5 + 24);
      }
    }
    if (v23 == 198)
    {
      uint64_t v44 = *(void *)(v5 + 48);
      if (v44)
      {
        int v45 = 1;
        do
        {
          if (*(_DWORD *)(v44 + 8) == v6)
          {
            if (!v45) {
              goto LABEL_58;
            }
            --v45;
          }
          uint64_t v44 = *(void *)(v44 + 32);
        }
        while (v44);
        if (!v45 && sub_1CD802BA8(v7, v8, 0))
        {
          long long v206 = *(_OWORD *)*(void *)(v5 + 32);
          if (!*(unsigned char *)(a1 + 33)
            || *(void *)(*(void *)(v206 + 40) + 16 * DWORD2(v206))
            && ((uint64_t v82 = *(void *)(a1 + 8),
                 uint64_t v83 = *(void *)(*(void *)(v206 + 40) + 16 * DWORD2(v206)),
                 v83 == 1)
             || *(void *)(v82 + 8 * v83 + 96))
            && !*(unsigned char *)(v82
                         + 390 * *(void *)(*(void *)(v206 + 40) + 16 * DWORD2(v206))
                         + 4035)
            && (_BYTE)v201
            && (v201 == 1 || *(void *)(v82 + 8 * v201 + 96))
            && !*(unsigned char *)(v82 + 390 * v201 + 4061))
          {
            if (sub_1CD7878C0((unsigned int *)&v206, v80, v81) == (llvm::Type *)1)
            {
              uint64_t v84 = *(void *)(v206 + 40) + 16 * DWORD2(v206);
              uint64_t v86 = sub_1CD7EBB8C(*(void *)a1, (const llvm::APInt *)&v199, v206, *((uint64_t *)&v206 + 1), *(llvm **)v84, *(void *)(v84 + 8));
              uint64_t v87 = *(void *)(*(void *)a1 + 832);
              if (v87) {
                __int16 v88 = *(_WORD *)(v87 + 8);
              }
              else {
                __int16 v88 = 0;
              }
              uint64_t v12 = sub_1CD7F3564(*(llvm::APFloatBase **)a1, (const char *)0xC7, (uint64_t)&v199, (llvm *)v201, *((uint64_t *)&v201 + 1), (uint64_t)v86, v85, v88);
              goto LABEL_8;
            }
          }
        }
      }
    }
LABEL_58:
    if (sub_1CCF40E94(v5, v6, *(void *)a1))
    {
      if (sub_1CCF40DA4(*(void *)(*(void *)(v5 + 32) + 40), *(void *)(*(void *)(v5 + 32) + 48), 1))
      {
        uint64_t v46 = *(void *)a1;
        *(void *)&long long v206 = v7;
        DWORD2(v206) = v8;
        uint64_t v47 = *(void *)(v5 + 32);
        unint64_t v207 = *(long long **)(v47 + 40);
        LODWORD(v208) = *(_DWORD *)(v47 + 48);
        uint64_t v26 = sub_1CCFDBB80(v46, (const char *)0x38, (const llvm::APInt *)&v199, (llvm *)v201, *((uint64_t *)&v201 + 1), (uint64_t *)&v206, 2);
        if (v26) {
          goto LABEL_61;
        }
      }
    }
  }
  int v50 = sub_1CCF40F64((llvm::APFloatBase **)a1, a2);
  if (v50)
  {
    uint64_t v10 = v50;
    goto LABEL_9;
  }
  if (*(_WORD *)(v5 + 24) == 56)
  {
    uint64_t v51 = *(void *)(v5 + 48);
    if (!v51) {
      goto LABEL_76;
    }
    int v52 = 1;
    uint64_t v53 = *(void *)(v5 + 48);
    do
    {
      if (*(_DWORD *)(v53 + 8) == v6)
      {
        if (!v52) {
          goto LABEL_76;
        }
        --v52;
      }
      uint64_t v53 = *(void *)(v53 + 32);
    }
    while (v53);
    if (v52)
    {
LABEL_76:
      uint64_t v54 = *(void *)(*(void *)(v5 + 32) + 40);
      int v55 = *(unsigned __int16 *)(v54 + 24);
      if (v55 != 35 && v55 != 11) {
        uint64_t v54 = 0;
      }
      int v57 = *(unsigned __int16 *)(v7 + 24);
      if ((v57 == 35 || v57 == 11) && v54 != 0)
      {
        uint64_t v60 = *(void *)(v54 + 80);
        unsigned int v61 = *(_DWORD *)(v60 + 32);
        if (v61 <= 0x40)
        {
          uint64_t v62 = *(void *)(v7 + 80);
          if (*(_DWORD *)(v62 + 32) <= 0x40u)
          {
            unint64_t v63 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v61;
            if (!v61) {
              unint64_t v63 = 0;
            }
            if (v51)
            {
              uint64_t v194 = (uint64_t)((v63 & (*(void *)(v62 + 24) + *(void *)(v60 + 24))) << -(char)v61) >> -(char)v61;
              do
              {
                uint64_t v64 = *(void *)(v51 + 16);
                BOOL v65 = sub_1CD3ED460(v64);
                if (v64 && v65)
                {
                  uint64_t v208 = 0;
                  long long v206 = 0uLL;
                  LOBYTE(v207) = 1;
                  unsigned int v67 = *(_DWORD *)(v62 + 32);
                  uint64_t v68 = v67 > 0x40
                      ? **(void **)(v62 + 24)
                      : (uint64_t)(*(void *)(v62 + 24) << -(char)v67) >> -(char)v67;
                  *((void *)&v206 + 1) = v68;
                  long long v202 = *(_OWORD *)(v64 + 80);
                  unsigned int v69 = *(_DWORD *)(*(void *)(v64 + 96) + 16);
                  llvm::EVT::getTypeForEVT((llvm::EVT *)&v202, *(llvm::LLVMContext **)(*(void *)a1 + 56));
                  uint64_t v196 = v70;
                  if ((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 1064))())
                  {
                    *((void *)&v206 + 1) = v194;
                    if (!(*(unsigned int (**)(void, uint64_t, long long *, uint64_t, void, void))(**(void **)(a1 + 8) + 1064))(*(void *)(a1 + 8), *(void *)(**(void **)(*(void *)a1 + 40) + 40) + 272, &v206, v196, v69, 0))goto LABEL_107; {
                  }
                    }
                }
                uint64_t v51 = *(void *)(v51 + 32);
              }
              while (v51);
            }
          }
        }
      }
    }
  }
  uint64_t v12 = sub_1CCF414C8((uint64_t *)a1, (const char *)0x38, (const llvm::APInt *)&v199, v5, v6, v7, v8, *(_WORD *)(a2 + 72));
  if (v12) {
    goto LABEL_8;
  }
  *(void *)&long long v206 = a1;
  *((void *)&v206 + 1) = &v199;
  unint64_t v207 = &v201;
  uint64_t v12 = sub_1CCF41660((uint64_t)&v206, v5, v6, v7, v8);
  if (v12) {
    goto LABEL_8;
  }
  uint64_t v10 = sub_1CCF41660((uint64_t)&v206, v7, v8, v5, v6);
  if (v10) {
    goto LABEL_9;
  }
LABEL_107:
  if (*(_WORD *)(v5 + 24) == 57
    && sub_1CD7FF12C(**(void **)(v5 + 32), *(void *)(*(void *)(v5 + 32) + 8), 0))
  {
    uint64_t v28 = *(void *)a1;
    uint64_t v30 = *((void *)&v201 + 1);
    unsigned int v29 = (llvm *)v201;
    uint64_t v91 = *(void *)(v5 + 32);
    uint64_t v92 = *(void *)(v91 + 40);
    uint64_t v93 = *(void *)(v91 + 48);
    uint64_t v94 = *(void *)(*(void *)a1 + 832);
    if (v94) {
      LOWORD(v94) = *(_WORD *)(v94 + 8);
    }
    uint64_t v190 = v93;
    __int16 v191 = v94;
    uint64_t v189 = v92;
    uint64_t v32 = 57;
    goto LABEL_38;
  }
  uint64_t v71 = *(unsigned __int16 *)(v7 + 24);
  if (v71 != 57) {
    goto LABEL_109;
  }
  if (sub_1CD7FF12C(**(void **)(v7 + 32), *(void *)(*(void *)(v7 + 32) + 8), 0))
  {
    uint64_t v95 = *(void *)(v7 + 32);
    uint64_t v96 = *(void *)(v95 + 40);
    uint64_t v97 = *(void *)(v95 + 48);
    uint64_t v98 = *(void *)(*(void *)a1 + 832);
    if (v98) {
      LOWORD(v98) = *(_WORD *)(v98 + 8);
    }
    uint64_t v12 = sub_1CCFDED5C(*(void *)a1, 57, (const llvm::APInt *)&v199, (llvm *)v201, *((uint64_t *)&v201 + 1), v5, v6, v21, v96, v97, v98);
    goto LABEL_8;
  }
  uint64_t v71 = *(unsigned __int16 *)(v7 + 24);
  if (v71 != 57)
  {
LABEL_109:
    int v72 = 0;
    int v73 = *(unsigned __int16 *)(v5 + 24);
    if (v73 != 57)
    {
      int v76 = 1;
      goto LABEL_157;
    }
    goto LABEL_110;
  }
  uint64_t v77 = *(void *)(v7 + 32);
  uint64_t v78 = *(void *)(v77 + 40);
  if (v5 == v78 && *(_DWORD *)(v77 + 48) == v6)
  {
    uint64_t v10 = *(uint64_t **)v77;
    goto LABEL_9;
  }
  int v73 = *(unsigned __int16 *)(v5 + 24);
  uint64_t v71 = 57;
  if (v73 == 57)
  {
    int v72 = 1;
LABEL_110:
    uint64_t v74 = *(void *)(v5 + 32);
    uint64_t v75 = *(void *)(v74 + 40);
    if (v7 == v75 && *(_DWORD *)(v74 + 48) == v8)
    {
      uint64_t v10 = *(uint64_t **)v74;
      goto LABEL_9;
    }
    if (!v72)
    {
      int v76 = 1;
      int v73 = 57;
      int v72 = 1;
      goto LABEL_157;
    }
    uint64_t v77 = *(void *)(v7 + 32);
    uint64_t v33 = *(uint64_t **)v74;
    uint64_t v78 = *(void *)(v77 + 40);
    if (*(void *)v74 == v78 && *(_DWORD *)(v74 + 8) == *(_DWORD *)(v77 + 48))
    {
      uint64_t v28 = *(void *)a1;
      uint64_t v30 = *((void *)&v201 + 1);
      unsigned int v29 = (llvm *)v201;
      uint64_t v33 = *(uint64_t **)v77;
      uint64_t v34 = *(void *)(v77 + 8);
      uint64_t v79 = *(void *)(*(void *)a1 + 832);
      if (v79) {
        LOWORD(v79) = *(_WORD *)(v79 + 8);
      }
      uint64_t v190 = *(void *)(v74 + 48);
      __int16 v191 = v79;
      uint64_t v189 = *(void *)(v74 + 40);
      goto LABEL_45;
    }
    if (v75 == *(void *)v77 && *(_DWORD *)(v74 + 48) == *(_DWORD *)(v77 + 8))
    {
      uint64_t v28 = *(void *)a1;
      uint64_t v30 = *((void *)&v201 + 1);
      unsigned int v29 = (llvm *)v201;
      uint64_t v34 = *(void *)(v74 + 8);
      uint64_t v89 = *(void *)(v77 + 48);
LABEL_153:
      uint64_t v99 = *(void *)(v28 + 832);
      if (v99) {
        LOWORD(v99) = *(_WORD *)(v99 + 8);
      }
      uint64_t v190 = v89;
      __int16 v191 = v99;
      uint64_t v189 = v78;
      goto LABEL_45;
    }
    int v72 = 1;
    int v73 = 57;
    goto LABEL_138;
  }
  int v72 = 0;
LABEL_138:
  if (*(_WORD *)(v78 + 24) == 56)
  {
    uint64_t v90 = *(uint64_t **)(v78 + 32);
    uint64_t v78 = *v90;
    if (v5 == *v90 && *((_DWORD *)v90 + 2) == v6)
    {
      uint64_t v28 = *(void *)a1;
      uint64_t v30 = *((void *)&v201 + 1);
      unsigned int v29 = (llvm *)v201;
      uint64_t v33 = *(uint64_t **)v77;
      uint64_t v34 = *(void *)(v77 + 8);
      uint64_t v40 = v90[5];
      uint64_t v41 = v90[6];
      goto LABEL_42;
    }
    if (v5 == v90[5] && *((_DWORD *)v90 + 12) == v6)
    {
      uint64_t v28 = *(void *)a1;
      uint64_t v30 = *((void *)&v201 + 1);
      unsigned int v29 = (llvm *)v201;
      uint64_t v33 = *(uint64_t **)v77;
      uint64_t v34 = *(void *)(v77 + 8);
      uint64_t v89 = v90[1];
      goto LABEL_153;
    }
  }
  int v76 = 0;
LABEL_157:
  if ((v71 & 0xFFFE) == 0x38)
  {
    int v100 = *(uint64_t **)(v7 + 32);
    if (*(_WORD *)(*v100 + 24) == 57)
    {
      uint64_t v101 = *(void *)(*v100 + 32);
      if (v5 == *(void *)(v101 + 40) && *(_DWORD *)(v101 + 48) == v6)
      {
        uint64_t v102 = *(void *)(*(void *)a1 + 832);
        if (v102) {
          LOWORD(v102) = *(_WORD *)(v102 + 8);
        }
        uint64_t v12 = sub_1CCFDED5C(*(void *)a1, v71, (const llvm::APInt *)&v199, (llvm *)v201, *((uint64_t *)&v201 + 1), *(void *)v101, *(void *)(v101 + 8), v21, v100[5], v100[6], v102);
        goto LABEL_8;
      }
    }
  }
  if (((v76 | v72 ^ 1) & 1) == 0)
  {
    int v108 = *(uint64_t **)(v5 + 32);
    uint64_t v110 = *v108;
    uint64_t v109 = v108[1];
    uint64_t v195 = v108[6];
    uint64_t v197 = v108[5];
    BOOL v111 = *(uint64_t **)(v7 + 32);
    uint64_t v112 = v111[1];
    uint64_t v198 = *v111;
    uint64_t v192 = v111[6];
    uint64_t v193 = v111[5];
    if ((sub_1CCF40DA4(v110, v109, 0) & 1) == 0 && (sub_1CCF40DA4(v198, v112, 0) & 1) == 0)
    {
      int v73 = *(unsigned __int16 *)(v5 + 24);
      goto LABEL_165;
    }
    uint64_t v114 = *(void *)a1;
    long long v115 = v201;
    uint64_t v116 = *(unsigned __int8 **)(v5 + 64);
    *(void *)&long long v206 = v116;
    uint64_t v117 = *((void *)&v201 + 1);
    BOOL v118 = (llvm *)v201;
    if (v116)
    {
      llvm::MetadataTracking::track((uint64_t)&v206, v116, 2);
      uint64_t v117 = *((void *)&v201 + 1);
      BOOL v118 = (llvm *)v201;
    }
    DWORD2(v206) = *(_DWORD *)(v5 + 60);
    uint64_t v119 = *(void *)(v114 + 832);
    if (v119) {
      LOWORD(v119) = *(_WORD *)(v119 + 8);
    }
    uint64_t v121 = sub_1CCFDED5C(v114, 56, (const llvm::APInt *)&v206, v118, v117, v110, v109, v113, v198, v112, v119);
    uint64_t v123 = v122;
    uint64_t v124 = *(void *)a1;
    uint8x8_t v125 = *(unsigned __int8 **)(v7 + 64);
    *(void *)&long long v202 = v125;
    if (v125) {
      llvm::MetadataTracking::track((uint64_t)&v202, v125, 2);
    }
    DWORD2(v202) = *(_DWORD *)(v7 + 60);
    uint64_t v126 = *(void *)(v124 + 832);
    if (v126) {
      LOWORD(v126) = *(_WORD *)(v126 + 8);
    }
    int v127 = sub_1CCFDED5C(v124, 56, (const llvm::APInt *)&v202, (llvm *)v201, *((uint64_t *)&v201 + 1), v197, v195, v120, v193, v192, v126);
    uint64_t v130 = *(void *)(v114 + 832);
    if (v130) {
      LOWORD(v130) = *(_WORD *)(v130 + 8);
    }
    uint64_t v10 = sub_1CCFDED5C(v114, 57, (const llvm::APInt *)&v199, (llvm *)v115, *((uint64_t *)&v115 + 1), (uint64_t)v121, v123, v129, (uint64_t)v127, v128, v130);
    if ((void)v202)
    {
      int v131 = *(unsigned __int8 *)v202;
      if ((v131 - 4) > 0x1E)
      {
        if ((v131 - 3) >= 0xFFFFFFFE) {
          uint64_t v135 = v202;
        }
        else {
          uint64_t v135 = 0;
        }
        if ((v131 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v136 = v135 + 8;
LABEL_199:
          uint64_t v203 = &v202;
          sub_1CC5FA668(v136 + 16, &v203);
          goto LABEL_186;
        }
        if (v131 == 3) {
          *(void *)(v202 + 8) = 0;
        }
      }
      else if ((*(unsigned char *)(v202 + 1) & 0x7F) == 2 || *(_DWORD *)(v202 + 12))
      {
        uint64_t v188 = *(void *)(v202 + 16);
        if ((v188 & 4) != 0)
        {
          unint64_t v136 = v188 & 0xFFFFFFFFFFFFFFF8;
          if (v136) {
            goto LABEL_199;
          }
        }
      }
    }
LABEL_186:
    if (!(void)v206) {
      goto LABEL_9;
    }
    int v132 = *(unsigned __int8 *)v206;
    if ((v132 - 4) > 0x1E)
    {
      if ((v132 - 3) >= 0xFFFFFFFE) {
        uint64_t v137 = v206;
      }
      else {
        uint64_t v137 = 0;
      }
      if ((v132 - 3) < 0xFFFFFFFE)
      {
        if (v132 == 3) {
          *(void *)(v206 + 8) = 0;
        }
        goto LABEL_9;
      }
      unint64_t v134 = v137 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v206 + 1) & 0x7F) != 2 && !*(_DWORD *)(v206 + 12)) {
        goto LABEL_9;
      }
      uint64_t v133 = *(void *)(v206 + 16);
      if ((v133 & 4) == 0) {
        goto LABEL_9;
      }
      unint64_t v134 = v133 & 0xFFFFFFFFFFFFFFF8;
      if (!v134) {
        goto LABEL_9;
      }
    }
    *(void *)&long long v202 = &v206;
    sub_1CC5FA668(v134 + 16, &v202);
    goto LABEL_9;
  }
LABEL_165:
  if (v73 == 170
    && sub_1CCF41ED0(*(void *)(a1 + 8), 0x55u, v201, *((uint64_t *)&v201 + 1), *(unsigned __int8 *)(a1 + 33)))
  {
    uint64_t v103 = *(void *)(v5 + 32);
    uint64_t v104 = *(void *)(v103 + 40);
    uint64_t v105 = *(void *)(v103 + 48);
    v204[0] = &unk_1F2641460;
    uint64_t v205 = v204;
    int v107 = sub_1CD7E9BD4(v104, v105, v7, v8, (uint64_t)v204, 1, 0);
    if (v205 == v204)
    {
      (*(void (**)(void *))(v204[0] + 32))(v204);
    }
    else if (v205)
    {
      (*(void (**)(void))(*v205 + 40))();
    }
    if (v107)
    {
      uint64_t v138 = *(uint64_t **)(v5 + 32);
      uint64_t v139 = *v138;
      uint64_t v140 = v138[1];
      uint64_t v141 = v138[5];
      uint64_t v142 = v138[6];
      uint64_t v143 = *(void *)(*(void *)a1 + 832);
      if (v143) {
        LOWORD(v143) = *(_WORD *)(v143 + 8);
      }
      uint64_t v12 = sub_1CCFDED5C(*(void *)a1, 85, (const llvm::APInt *)&v199, (llvm *)v201, *((uint64_t *)&v201 + 1), v139, v140, v106, v141, v142, v143);
      goto LABEL_8;
    }
  }
  if (sub_1CCF41798(a1, a2, 0))
  {
    uint64_t v10 = (uint64_t *)a2;
    goto LABEL_9;
  }
  if ((sub_1CD802BA8(v7, v8, 0) & 1) == 0)
  {
    int v144 = *(unsigned __int16 *)(v5 + 24);
    goto LABEL_219;
  }
  if (sub_1CD802AAC(v5, v6, 0))
  {
    uint64_t v173 = *(void *)a1;
    long long v174 = v201;
    unsigned int v176 = sub_1CD7EBF14(v173, 0, (const llvm::APInt *)&v199, (llvm *)v201, *((uint64_t *)&v201 + 1), 0, 0);
    unsigned int v178 = *(uint64_t **)(v5 + 32);
    uint64_t v179 = *v178;
    uint64_t v180 = v178[1];
    uint64_t v181 = *(void *)(v173 + 832);
    if (v181) {
      LOWORD(v181) = *(_WORD *)(v181 + 8);
    }
    uint64_t v12 = sub_1CCFDED5C(v173, 57, (const llvm::APInt *)&v199, (llvm *)v174, *((uint64_t *)&v174 + 1), (uint64_t)v176, v175, v177, v179, v180, v181);
    goto LABEL_8;
  }
  if (*(_WORD *)(v5 + 24) == 56)
  {
    int v182 = sub_1CD802AAC(**(void **)(v5 + 32), *(void *)(*(void *)(v5 + 32) + 8), 0);
    unint64_t v183 = *(void **)(v5 + 32);
    if (v182)
    {
      uint64_t v184 = (uint64_t **)(v183 + 5);
      uint64_t v185 = (unsigned int *)(v183 + 6);
    }
    else
    {
      if (!sub_1CD802AAC(v183[5], v183[6], 0)) {
        goto LABEL_238;
      }
      uint64_t v184 = *(uint64_t ***)(v5 + 32);
      uint64_t v185 = (unsigned int *)(v184 + 1);
      unint64_t v183 = v184 + 5;
    }
    uint64_t v186 = *v183;
    if (v186)
    {
      uint64_t v33 = *v184;
      uint64_t v34 = *v185;
      uint64_t v28 = *(void *)a1;
      uint64_t v30 = *((void *)&v201 + 1);
      unsigned int v29 = (llvm *)v201;
      unsigned int v187 = *(uint64_t **)(v186 + 32);
      uint64_t v40 = *v187;
      uint64_t v41 = v187[1];
      goto LABEL_42;
    }
  }
LABEL_238:
  char v147 = (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 8) + 360))(*(void *)(a1 + 8), v201, *((void *)&v201 + 1));
  int v144 = *(unsigned __int16 *)(v5 + 24);
  if ((v147 & 1) == 0 && v144 == 56)
  {
    uint64_t v148 = *(void *)(v5 + 48);
    if (v148)
    {
      int v149 = 1;
      do
      {
        if (*(_DWORD *)(v148 + 8) == v6)
        {
          if (!v149) {
            goto LABEL_227;
          }
          --v149;
        }
        uint64_t v148 = *(void *)(v148 + 32);
      }
      while (v148);
      if (!v149)
      {
        uint64_t v150 = *(void *)a1;
        long long v151 = v201;
        uint64_t v152 = *(uint64_t **)(v5 + 32);
        uint64_t v153 = *v152;
        uint64_t v154 = v152[1];
        uint64_t v155 = sub_1CD787918(*(void *)a1, (const llvm::APInt *)&v199, v201, *((uint64_t *)&v201 + 1), 0, 0);
        uint64_t v158 = *(void *)(v150 + 832);
        if (v158) {
          LOWORD(v158) = *(_WORD *)(v158 + 8);
        }
        uint64_t v159 = sub_1CCFDED5C(v150, 173, (const llvm::APInt *)&v199, (llvm *)v151, *((uint64_t *)&v151 + 1), v153, v154, v157, v155, v156, v158);
        uint64_t v30 = *((void *)&v201 + 1);
        unsigned int v29 = (llvm *)v201;
        uint64_t v161 = *(void *)(v5 + 32);
        uint64_t v33 = *(uint64_t **)(v161 + 40);
        uint64_t v34 = *(void *)(v161 + 48);
        uint64_t v162 = *(void *)(*(void *)a1 + 832);
        if (v162) {
          LOWORD(v162) = *(_WORD *)(v162 + 8);
        }
        uint64_t v190 = v160;
        __int16 v191 = v162;
        uint64_t v189 = (uint64_t)v159;
        uint64_t v28 = *(void *)a1;
        goto LABEL_45;
      }
    }
    goto LABEL_227;
  }
LABEL_219:
  if (v144 == 57)
  {
    uint64_t v145 = *(void *)(v5 + 48);
    if (v145)
    {
      int v146 = 1;
      do
      {
        if (*(_DWORD *)(v145 + 8) == v6)
        {
          if (!v146) {
            goto LABEL_227;
          }
          --v146;
        }
        uint64_t v145 = *(void *)(v145 + 32);
      }
      while (v145);
      if (!v146 && sub_1CD802C68(v7, v8, 0))
      {
        uint64_t v164 = *(void *)(v5 + 32);
        uint64_t v165 = *(void *)(v164 + 40);
        uint64_t v166 = *(void *)(v164 + 48);
        uint64_t v167 = *(void *)(*(void *)a1 + 832);
        if (v167) {
          LOWORD(v167) = *(_WORD *)(v167 + 8);
        }
        uint64_t v33 = sub_1CCFDED5C(*(void *)a1, 173, (const llvm::APInt *)&v199, (llvm *)v201, *((uint64_t *)&v201 + 1), v165, v166, v163, v7, v8, v167);
        uint64_t v34 = v168;
        uint64_t v28 = *(void *)a1;
        uint64_t v30 = *((void *)&v201 + 1);
        unsigned int v29 = (llvm *)v201;
        unsigned int v169 = *(uint64_t **)(v5 + 32);
        uint64_t v170 = *v169;
        uint64_t v171 = v169[1];
        uint64_t v172 = *(void *)(*(void *)a1 + 832);
        if (v172) {
          LOWORD(v172) = *(_WORD *)(v172 + 8);
        }
        uint64_t v190 = v171;
        __int16 v191 = v172;
        uint64_t v189 = v170;
        goto LABEL_64;
      }
    }
  }
LABEL_227:
  uint64_t v12 = sub_1CCF41844((uint64_t *)a1, v5, v6, v7, v8, a2);
  if (v12) {
    goto LABEL_8;
  }
  uint64_t v10 = sub_1CCF41844((uint64_t *)a1, v7, v8, v5, v6, a2);
LABEL_9:
  if (v199)
  {
    int v13 = *v199;
    if ((v13 - 4) > 0x1E)
    {
      if ((v13 - 3) >= 0xFFFFFFFE) {
        int v15 = v199;
      }
      else {
        int v15 = 0;
      }
      if ((v13 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v16 = (unint64_t)(v15 + 8);
LABEL_19:
        *(void *)&long long v206 = &v199;
        sub_1CC5FA668(v16 + 16, &v206);
        return v10;
      }
      if (v13 == 3) {
        *((void *)v199 + 1) = 0;
      }
    }
    else if ((v199[1] & 0x7F) == 2 || *((_DWORD *)v199 + 3))
    {
      uint64_t v43 = *((void *)v199 + 2);
      if ((v43 & 4) != 0)
      {
        unint64_t v16 = v43 & 0xFFFFFFFFFFFFFFF8;
        if (v16) {
          goto LABEL_19;
        }
      }
    }
  }
  return v10;
}

uint64_t *sub_1CCF3F838(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int16 *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = v3 + 40;
  uint64_t v5 = 40;
  if (v2 == 56) {
    uint64_t v6 = 40;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v2 == 56) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v7 = *(void *)(v3 + v6);
  int v8 = *(unsigned __int16 *)(v7 + 24);
  if (v8 != 35 && v8 != 11) {
    return 0;
  }
  uint64_t v10 = *(void *)(v3 + v5);
  if (*(_WORD *)(v10 + 24) != 199) {
    return 0;
  }
  uint64_t v11 = *(unsigned int **)(v10 + 32);
  uint64_t v12 = *(void *)v11;
  if (*(_WORD *)(*(void *)v11 + 24) != 193) {
    return 0;
  }
  if (*(unsigned char *)(*(void *)(v12 + 40) + 16 * v11[2]) != 2) {
    return 0;
  }
  int v13 = *(uint64_t **)(v12 + 32);
  if (*(_DWORD *)(v13[10] + 76) != 17) {
    return 0;
  }
  uint64_t v18 = *(unsigned int *)(v4 + 8);
  if (!sub_1CD7F2D2C(v13[5])
    || *(_WORD *)(*v13 + 24) != 171
    || !sub_1CD8029CC(*(void *)(*(void *)(*v13 + 32) + 40)))
  {
    return 0;
  }
  uint64_t v19 = v13;
  uint64_t v20 = *(void *)(v7 + 40) + 16 * v18;
  uint64_t v21 = *(llvm **)v20;
  uint64_t v22 = *(void *)(v20 + 8);
  int v23 = *(unsigned __int8 **)(a1 + 64);
  uint64_t v48 = v23;
  if (v23)
  {
    llvm::MetadataTracking::track((uint64_t)&v48, v23, 2);
    uint64_t v19 = *(uint64_t **)(v12 + 32);
  }
  int v49 = *(_DWORD *)(a1 + 60);
  uint64_t v24 = sub_1CD7EB80C(a2, *v19, v19[1], (uint64_t)&v48, (uint64_t)v21, v22);
  uint64_t v26 = v25;
  if (v2 == 56)
  {
    uint64_t v27 = *(void *)(v7 + 80);
    unsigned int v45 = *(_DWORD *)(v27 + 32);
    if (v45 > 0x40) {
      operator new[]();
    }
    uint64_t v44 = *(unsigned __int8 ***)(v27 + 24);
    llvm::APInt::operator+=((uint64_t)&v44, 1uLL);
    unsigned int v47 = v45;
    uint64_t v46 = v44;
    unsigned int v45 = 0;
    uint64_t v29 = sub_1CD7EBB14(a2, (llvm::LLVMContext *)&v46, (const llvm::APInt *)&v48, (uint64_t)v21, v22, 0, 0);
    uint64_t v32 = v29;
    uint64_t v33 = v30;
    if (v47 >= 0x41 && v46) {
      MEMORY[0x1D25D9CB0](v46, 0x1000C8000313F17);
    }
    if (v45 >= 0x41 && v44) {
      MEMORY[0x1D25D9CB0](v44, 0x1000C8000313F17);
    }
    uint64_t v34 = 57;
  }
  else
  {
    uint64_t v28 = *(void *)(v7 + 80);
    unsigned int v43 = *(_DWORD *)(v28 + 32);
    if (v43 > 0x40) {
      operator new[]();
    }
    uint64_t v42 = *(unsigned __int8 ***)(v28 + 24);
    llvm::APInt::operator-=((uint64_t)&v42, 1uLL);
    unsigned int v47 = v43;
    uint64_t v46 = v42;
    unsigned int v43 = 0;
    uint64_t v35 = sub_1CD7EBB14(a2, (llvm::LLVMContext *)&v46, (const llvm::APInt *)&v48, (uint64_t)v21, v22, 0, 0);
    uint64_t v32 = v35;
    uint64_t v33 = v36;
    if (v47 >= 0x41 && v46) {
      MEMORY[0x1D25D9CB0](v46, 0x1000C8000313F17);
    }
    if (v43 >= 0x41 && v42) {
      MEMORY[0x1D25D9CB0](v42, 0x1000C8000313F17);
    }
    uint64_t v34 = 56;
  }
  uint64_t v37 = *(void *)(a2 + 832);
  if (v37) {
    LOWORD(v37) = *(_WORD *)(v37 + 8);
  }
  uint64_t v14 = sub_1CCFDED5C(a2, v34, (const llvm::APInt *)&v48, v21, v22, v32, v33, v31, v24, v26, v37);
  if (v48)
  {
    int v38 = *v48;
    if ((v38 - 4) > 0x1E)
    {
      if ((v38 - 3) >= 0xFFFFFFFE) {
        uint64_t v41 = v48;
      }
      else {
        uint64_t v41 = 0;
      }
      if ((v38 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v40 = (unint64_t)(v41 + 8);
LABEL_58:
        uint64_t v46 = &v48;
        sub_1CC5FA668(v40 + 16, &v46);
        return v14;
      }
      if (v38 == 3) {
        *((void *)v48 + 1) = 0;
      }
    }
    else if ((v48[1] & 0x7F) == 2 || *((_DWORD *)v48 + 3))
    {
      uint64_t v39 = *((void *)v48 + 2);
      if ((v39 & 4) != 0)
      {
        unint64_t v40 = v39 & 0xFFFFFFFFFFFFFFF8;
        if (v40) {
          goto LABEL_58;
        }
      }
    }
  }
  return v14;
}

uint64_t *sub_1CCF3FC38(uint64_t a1, uint64_t a2)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  int v4 = *(unsigned __int16 *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = v5 + 40;
  uint64_t v7 = 40;
  if (v4 == 56) {
    uint64_t v8 = 40;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v4 == 56) {
    uint64_t v9 = v5 + 40;
  }
  else {
    uint64_t v9 = *(void *)(a1 + 32);
  }
  if (v4 == 56)
  {
    uint64_t v7 = 0;
    uint64_t v6 = *(void *)(a1 + 32);
  }
  uint64_t v10 = *(void *)(v5 + v8);
  uint64_t v11 = *(void *)(v9 + 8);
  uint64_t v12 = *(void *)(v5 + v7);
  uint64_t v13 = *(unsigned int *)(v6 + 8);
  if (!sub_1CD7F590C(a2, v10)) {
    return 0;
  }
  if (*(_WORD *)(v12 + 24) != 177) {
    return 0;
  }
  uint64_t v14 = *(uint64_t **)(v12 + 32);
  uint64_t v15 = *v14;
  uint64_t v16 = *(void *)(*v14 + 48);
  if (!v16) {
    return 0;
  }
  uint64_t v17 = v14[1];
  int v18 = 1;
  do
  {
    if (*(_DWORD *)(v16 + 8) == v17)
    {
      if (!v18) {
        return 0;
      }
      --v18;
    }
    uint64_t v16 = *(void *)(v16 + 32);
  }
  while (v16);
  if (v18) {
    return 0;
  }
  if (!sub_1CD802AAC(v15, v17, 0)) {
    return 0;
  }
  uint64_t v21 = *(void *)(v12 + 32);
  long long v59 = *(_OWORD *)(*(void *)(v12 + 40) + 16 * v13);
  uint64_t v22 = *(void *)(v21 + 40);
  uint64_t v23 = *(void *)(v21 + 48);
  uint64_t v24 = sub_1CCFD8CD8(v22, v23, 0, 0);
  if (!v24) {
    return 0;
  }
  uint64_t v27 = *(void *)(v24 + 80);
  uint64_t v28 = (llvm::Type *)(v27 + 24);
  uint64_t v29 = sub_1CD3E12F4((unsigned __int8 *)&v59, v25, v26);
  uint64_t v31 = *(unsigned int *)(v27 + 32);
  if (v31 >= 0x41)
  {
    int v32 = 0;
    int64_t v33 = (unint64_t)(v31 + 63) >> 6;
    do
    {
      if (v33-- < 1) {
        break;
      }
      unint64_t v35 = *(void *)(*(void *)v28 + 8 * v33);
      v32 += __clz(v35);
    }
    while (!v35);
    int v36 = v31 | 0xFFFFFFC0;
    if ((v31 & 0x3F) == 0) {
      int v36 = 0;
    }
    if ((v31 - v32 - v36) > 0x40) {
      return 0;
    }
    uint64_t v28 = *(llvm::Type **)v28;
  }
  if (*(llvm::Type **)v28 != (llvm::Type *)((char *)v29 - 1)) {
    return 0;
  }
  uint64_t v37 = *(unsigned __int8 **)(a1 + 64);
  int v57 = v37;
  if (v37) {
    llvm::MetadataTracking::track((uint64_t)&v57, v37, 2);
  }
  int v58 = *(_DWORD *)(a1 + 60);
  if (v4 == 56) {
    uint64_t v38 = 176;
  }
  else {
    uint64_t v38 = 177;
  }
  uint64_t v39 = *(uint64_t **)(v15 + 32);
  uint64_t v40 = *v39;
  uint64_t v41 = v39[1];
  uint64_t v42 = *(void *)(a2 + 832);
  if (v42) {
    LOWORD(v42) = *(_WORD *)(v42 + 8);
  }
  unsigned int v43 = sub_1CCFDED5C(a2, v38, (const llvm::APInt *)&v57, (llvm *)v59, *((uint64_t *)&v59 + 1), v40, v41, v30, v22, v23, v42);
  uint64_t v45 = v44;
  long long v46 = v59;
  if (v4 == 56) {
    uint64_t v47 = 56;
  }
  else {
    uint64_t v47 = 57;
  }
  uint64_t v60 = (unsigned __int8 **)v10;
  int v61 = v11;
  uint64_t v62 = sub_1CD7EBF14(a2, 1, (const llvm::APInt *)&v57, (llvm *)v59, *((uint64_t *)&v59 + 1), 0, 0);
  uint64_t v63 = v48;
  int v49 = sub_1CCFDBB80(a2, (const char *)v47, (const llvm::APInt *)&v57, (llvm *)v46, *((uint64_t *)&v46 + 1), (uint64_t *)&v60, 2);
  if (v49)
  {
    uint64_t v52 = *(void *)(a2 + 832);
    if (v52) {
      LOWORD(v52) = *(_WORD *)(v52 + 8);
    }
    uint64_t v19 = sub_1CCFDED5C(a2, 56, (const llvm::APInt *)&v57, (llvm *)v59, *((uint64_t *)&v59 + 1), (uint64_t)v43, v45, v51, (uint64_t)v49, v50, v52);
  }
  else
  {
    uint64_t v19 = 0;
  }
  if (v57)
  {
    int v53 = *v57;
    if ((v53 - 4) > 0x1E)
    {
      if ((v53 - 3) >= 0xFFFFFFFE) {
        uint64_t v56 = v57;
      }
      else {
        uint64_t v56 = 0;
      }
      if ((v53 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v55 = (unint64_t)(v56 + 8);
LABEL_58:
        uint64_t v60 = &v57;
        sub_1CC5FA668(v55 + 16, &v60);
        return v19;
      }
      if (v53 == 3) {
        *((void *)v57 + 1) = 0;
      }
    }
    else if ((v57[1] & 0x7F) == 2 || *((_DWORD *)v57 + 3))
    {
      uint64_t v54 = *((void *)v57 + 2);
      if ((v54 & 4) != 0)
      {
        unint64_t v55 = v54 & 0xFFFFFFFFFFFFFFF8;
        if (v55) {
          goto LABEL_58;
        }
      }
    }
  }
  return v19;
}

uint64_t *sub_1CCF3FF7C(uint64_t *a1, uint64_t a2, const llvm::APInt *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v231[16] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *(uint64_t **)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v12 = *(void *)(v10 + 8);
  int v223 = *(llvm **)v10;
  uint64_t v13 = *v11;
  uint64_t v14 = v11[1];
  uint64_t v15 = v11[5];
  uint64_t v16 = v11[6];
  uint64_t v17 = *(unsigned __int16 *)(a2 + 24);
  if ((v17 - 59) <= 7 && ((1 << (v17 - 59)) & 0xCF) != 0) {
    goto LABEL_5;
  }
  __int16 v221 = *(_WORD *)(a2 + 72);
  if (*(_WORD *)(v13 + 24) == 153) {
    uint64_t v77 = (void *)*v11;
  }
  else {
    uint64_t v77 = 0;
  }
  if (*(_WORD *)(v15 + 24) == 153) {
    uint64_t v78 = (void *)v11[5];
  }
  else {
    uint64_t v78 = 0;
  }
  if (v77) {
    BOOL v79 = v78 == 0;
  }
  else {
    BOOL v79 = 1;
  }
  if (!v79)
  {
    *(_OWORD *)uint64_t v230 = *(_OWORD *)v77[5];
    unint64_t v214 = (const void *)v77[10];
    unsigned int __s2b = sub_1CD3DB440((llvm::EVT *)v230, (const char *)a2);
    *(_OWORD *)uint64_t v230 = *(_OWORD *)v78[5];
    uint64_t v210 = (const void *)v78[10];
    int v145 = sub_1CD3DB440((llvm::EVT *)v230, v144);
    if (__s2b == v145 && !memcmp(v214, v210, 4 * __s2b))
    {
      char v147 = *(uint64_t **)(v13 + 32);
      if (*(_WORD *)(v147[5] + 24) == 51)
      {
        uint64_t v148 = *(uint64_t **)(v15 + 32);
        if (*(_WORD *)(v148[5] + 24) == 51)
        {
          uint64_t v149 = *(void *)(v13 + 48);
          if (v149)
          {
            int v150 = 1;
            do
            {
              if (*(_DWORD *)(v149 + 8) == v14)
              {
                if (!v150) {
                  goto LABEL_166;
                }
                --v150;
              }
              uint64_t v149 = *(void *)(v149 + 32);
            }
            while (v149);
            if (!v150) {
              goto LABEL_175;
            }
          }
LABEL_166:
          uint64_t v151 = *(void *)(v15 + 48);
          if (v151)
          {
            int v152 = 1;
            do
            {
              if (*(_DWORD *)(v151 + 8) == v16)
              {
                if (!v152) {
                  goto LABEL_173;
                }
                --v152;
              }
              uint64_t v151 = *(void *)(v151 + 32);
            }
            while (v151);
            if (!v152)
            {
LABEL_175:
              uint64_t v153 = v12;
              uint64_t v154 = (uint64_t)a3;
              uint64_t v155 = sub_1CCFDED5C(*a1, v17, a3, v223, v153, *v147, v147[1], v146, *v148, v148[1], v221);
              unsigned int v157 = v156;
              uint64_t v158 = *(void *)(v13 + 32);
              uint64_t v159 = *(uint64_t **)(v158 + 40);
              uint64_t v15 = *(void *)(v158 + 48);
              uint64_t v160 = *a1;
              *(_OWORD *)uint64_t v230 = *(_OWORD *)v77[5];
              long long __src = (void *)v77[10];
              uint64_t v206 = sub_1CD3DB440((llvm::EVT *)v230, v156);
              uint64_t v161 = v160;
              uint64_t v162 = v223;
              uint64_t v163 = v153;
              return sub_1CCFCDA78(v161, v162, v163, v154, (uint64_t)v155, v157, (uint64_t)v159, v15, __src, v206);
            }
          }
LABEL_173:
          if (v13 == v15 && v14 == v16) {
            goto LABEL_175;
          }
        }
      }
    }
  }
  uint64_t v80 = sub_1CCFD8CD8(v15, v16, 0, 0);
  if (v77)
  {
    if (v80)
    {
      *(_OWORD *)uint64_t v230 = *(_OWORD *)v77[5];
      __s2d = (char *)v77[10];
      unsigned int v164 = sub_1CD3DB440((llvm::EVT *)v230, v81);
      if (v164)
      {
        if (v164 == 1 || !memcmp(__s2d + 4, __s2d, 4 * v164 - 4))
        {
          uint64_t v166 = v77[6];
          if (v166)
          {
            if (!*(void *)(v166 + 32))
            {
              uint64_t v167 = (uint64_t *)v77[4];
              if (*(_WORD *)(v167[5] + 24) == 51 && *(_WORD *)(*v167 + 24) != 147)
              {
                uint64_t v168 = v12;
                uint64_t v154 = (uint64_t)a3;
                uint64_t v155 = sub_1CCFDED5C(*a1, v17, a3, v223, v168, *v167, v167[1], v165, v15, v16, v221);
                unsigned int v157 = v169;
                uint64_t v170 = *a1;
                uint64_t v159 = sub_1CD3DD4D8(v170, v223, v168);
                LODWORD(v15) = v171;
                *(_OWORD *)uint64_t v230 = *(_OWORD *)v77[5];
                long long __src = (void *)v77[10];
                uint64_t v206 = sub_1CD3DB440((llvm::EVT *)v230, v171);
                uint64_t v161 = v170;
                uint64_t v162 = v223;
                uint64_t v163 = v168;
                return sub_1CCFCDA78(v161, v162, v163, v154, (uint64_t)v155, v157, (uint64_t)v159, v15, __src, v206);
              }
            }
          }
        }
      }
    }
  }
  if (sub_1CCFD8CD8(v13, v14, 0, 0))
  {
    if (v78)
    {
      *(_OWORD *)uint64_t v230 = *(_OWORD *)v78[5];
      uint64_t v83 = v78[10];
      unsigned int v84 = sub_1CD3DB440((llvm::EVT *)v230, v82);
      if (v84)
      {
        if (v84 == 1 || !memcmp((const void *)(v83 + 4), (const void *)v83, 4 * v84 - 4))
        {
          uint64_t v85 = v78[6];
          if (v85)
          {
            if (!*(void *)(v85 + 32))
            {
              uint64_t v86 = (uint64_t *)v78[4];
              if (*(_WORD *)(v86[5] + 24) == 51 && *(_WORD *)(*v86 + 24) != 147)
              {
                uint64_t v87 = sub_1CCFDED5C(*a1, v17, a3, v223, v12, v13, v14, a8, *v86, v86[1], v221);
                unsigned int v89 = v88;
                uint64_t v90 = *a1;
                uint64_t v91 = sub_1CD3DD4D8(v90, v223, v12);
                unsigned int v93 = v92;
                *(_OWORD *)uint64_t v230 = *(_OWORD *)v78[5];
                uint64_t v94 = (void *)v78[10];
                uint64_t v205 = sub_1CD3DB440((llvm::EVT *)v230, v92);
                return sub_1CCFCDA78(v90, v223, v12, (uint64_t)a3, (uint64_t)v87, v89, (uint64_t)v91, v93, v94, v205);
              }
            }
          }
        }
      }
    }
  }
LABEL_5:
  uint64_t v220 = v12;
  int v19 = *(unsigned __int16 *)(v13 + 24);
  if (v19 != 149)
  {
    if (v19 != 150) {
      goto LABEL_118;
    }
    uint64_t v20 = *(void *)(v13 + 32);
    if (*(_WORD *)(*(void *)v20 + 24) != 51) {
      goto LABEL_118;
    }
    if (*(_WORD *)(v15 + 24) != 150) {
      goto LABEL_118;
    }
    uint64_t v21 = *(void *)(v15 + 32);
    if (*(_WORD *)(*(void *)v21 + 24) != 51) {
      goto LABEL_118;
    }
    uint64_t v22 = *(void *)(v20 + 80);
    if (v22 != *(void *)(v21 + 80) || *(_DWORD *)(v20 + 88) != *(_DWORD *)(v21 + 88)) {
      goto LABEL_118;
    }
    uint64_t v23 = *(void *)(v13 + 48);
    if (!v23) {
      goto LABEL_19;
    }
    int v24 = 1;
    do
    {
      if (*(_DWORD *)(v23 + 8) == v14)
      {
        if (!v24) {
          goto LABEL_19;
        }
        --v24;
      }
      uint64_t v23 = *(void *)(v23 + 32);
    }
    while (v23);
    if (v24)
    {
LABEL_19:
      uint64_t v25 = *(void *)(v15 + 48);
      if (!v25) {
        goto LABEL_118;
      }
      int v26 = 1;
      do
      {
        if (*(_DWORD *)(v25 + 8) == v16)
        {
          if (!v26) {
            goto LABEL_118;
          }
          --v26;
        }
        uint64_t v25 = *(void *)(v25 + 32);
      }
      while (v25);
      if (v26) {
        goto LABEL_118;
      }
    }
    uint64_t v28 = *(void *)(v20 + 40);
    uint64_t v27 = *(void *)(v20 + 48);
    uint64_t v29 = *(void *)(v21 + 40);
    uint64_t v30 = *(void *)(v21 + 48);
    uint64_t v31 = *(void *)(v28 + 40) + 16 * v27;
    int v32 = *(llvm **)v31;
    int64_t v33 = (unsigned __int8 *)(*(void *)(v29 + 40) + 16 * v30);
    int v34 = *(void *)v31;
    if (v34 != *v33) {
      goto LABEL_118;
    }
    uint64_t v35 = *((void *)v33 + 1);
    if (!*(void *)v31 && *(void *)(v31 + 8) != v35) {
      goto LABEL_118;
    }
    unsigned int __s2 = *(void **)(v20 + 88);
    uint64_t v37 = (void *)a1[1];
    uint64_t v38 = *(void *)v31;
    if (!*((unsigned char *)a1 + 33))
    {
      if (!*(void *)v31 || v34 != 1 && !v37[v38 + 12]) {
        goto LABEL_118;
      }
      if (v17 <= 0x185)
      {
        unsigned int v39 = *((unsigned __int8 *)v37 + 390 * *(void *)v31 + v17 + 3862);
        if (v39 >= 2 && v39 != 4) {
          goto LABEL_118;
        }
      }
      goto LABEL_42;
    }
    if (!*(void *)v31) {
      goto LABEL_118;
    }
    if (v34 == 1)
    {
      if (v17 >= 0x186) {
        goto LABEL_118;
      }
    }
    else if (!v37[v38 + 12] || v17 > 0x185 || !*(void *)v31)
    {
      goto LABEL_118;
    }
    if (!*((unsigned char *)v37 + 390 * *(void *)v31 + v17 + 3862))
    {
LABEL_42:
      uint64_t v209 = v27;
      uint64_t v211 = *(void *)(v31 + 8);
      uint64_t v41 = *a1;
      uint64_t v42 = sub_1CD3DD4D8(*a1, v223, v12);
      uint64_t v207 = v43;
      uint64_t v208 = (uint64_t)v42;
      uint64_t v44 = sub_1CD3DD4D8(*a1, v223, v12);
      uint64_t v47 = *(void *)(v41 + 832);
      if (v47) {
        LOWORD(v47) = *(_WORD *)(v47 + 8);
      }
      int v49 = sub_1CCFDED5C(v41, v17, a3, v223, v12, v208, v207, v46, (uint64_t)v44, v45, v47);
      uint64_t v51 = v50;
      uint64_t v52 = *(void *)(*a1 + 832);
      if (v52) {
        LOWORD(v52) = *(_WORD *)(v52 + 8);
      }
      int v53 = sub_1CCFDED5C(*a1, v17, a3, v32, v211, v28, v209, v48, v29, v30, v52);
      uint64_t v56 = *(void *)(*a1 + 832);
      if (v56) {
        LOWORD(v56) = *(_WORD *)(v56 + 8);
      }
      return sub_1CD7F5D38((void *)*a1, (const char *)0x96, a3, v223, v12, (uint64_t)v49, v51, v55, (uint64_t)v53, v54, v22, (int)__s2, SHIDWORD(__s2), v56);
    }
LABEL_118:
    uint64_t v97 = *a1;
    uint64_t v98 = *(uint64_t **)(a2 + 32);
    uint64_t v99 = *(void *)(a2 + 40);
    uint64_t v101 = *v98;
    uint64_t v100 = v98[1];
    uint64_t v102 = v98[5];
    uint64_t v103 = v98[6];
    unsigned int v222 = *(unsigned __int16 *)(a2 + 24);
    uint64_t v104 = *(void *)(v99 + 8);
    uint64_t v228 = *(llvm **)v99;
    uint64_t v229 = v104;
    if ((_BYTE)v228)
    {
      unsigned __int8 v105 = sub_1CB8C2FBC((unsigned __int8 *)&v228);
      unint64_t v106 = 0;
      uint64_t v224 = 0;
    }
    else
    {
      unint64_t EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v104 + 24), 0, (BOOL)a3);
      uint64_t v224 = v108;
      unint64_t v106 = EVT & 0xFFFFFFFFFFFFFF00;
      unsigned __int8 v105 = EVT;
    }
    uint64_t v109 = *(void *)(v97 + 24);
    uint64_t v227 = 0;
    uint64_t v110 = sub_1CD7F2258((void **)v97, v101, v100, (int *)&v227 + 1);
    uint64_t v112 = v111;
    uint64_t v113 = sub_1CD7F2258((void **)v97, v102, v103, (int *)&v227);
    if (v110) {
      BOOL v116 = v113 == 0;
    }
    else {
      BOOL v116 = 1;
    }
    if (v116 || HIDWORD(v227) != v227) {
      return 0;
    }
    uint64_t v117 = (uint64_t)v113;
    __s2c = v114;
    uint64_t v118 = v110[5] + 16 * v112;
    uint64_t v120 = *(void **)v118;
    uint64_t v119 = *(llvm::EVT ***)(v118 + 8);
    v230[0] = v120;
    v230[1] = v119;
    if ((_BYTE)v120)
    {
      unsigned __int8 v121 = sub_1CB8C2FBC((unsigned __int8 *)v230);
      uint64_t v123 = 0;
    }
    else
    {
      unsigned __int8 v121 = llvm::EVT::getEVT(v119[3], 0, v115);
    }
    if (v105 != v121 || !v105 && v123 != v224) {
      return 0;
    }
    uint8x8_t v125 = (uint64_t *)(*(void *)(v117 + 40) + 16 * __s2c);
    uint64_t v127 = *v125;
    uint64_t v126 = v125[1];
    v226[0] = v127;
    v226[1] = v126;
    if ((_BYTE)v127)
    {
      unsigned __int8 v128 = sub_1CB8C2FBC((unsigned __int8 *)v226);
      uint64_t v129 = 0;
    }
    else
    {
      unsigned __int8 v128 = llvm::EVT::getEVT(*(llvm::EVT **)(v126 + 24), 0, v122);
    }
    BOOL v130 = v105 || v129 == v224;
    BOOL v131 = !v130;
    if (v105 != v128
      || v131
      || !(*(unsigned int (**)(uint64_t, llvm *, uint64_t, void))(*(void *)v109 + 1424))(v109, v228, v229, HIDWORD(v227))|| !v105|| v105 != 1 && !*(void *)(v109 + 8 * v105 + 96)|| v222 < 0x186 && (*(unsigned char *)(v109 + 390 * v105 + v222 + 3862) & 0xFB) != 0)
    {
      return 0;
    }
    int v132 = (llvm *)(v106 | v105);
    uint64_t v133 = sub_1CD7EC9F4(v97, SHIDWORD(v227), (uint64_t)a3, 0);
    uint64_t v136 = v134;
    uint64_t v137 = *(void *)(v97 + 832);
    if (v137) {
      LOWORD(v137) = *(_WORD *)(v137 + 8);
    }
    uint64_t v138 = v133;
    uint64_t v139 = sub_1CCFDED5C(v97, 148, a3, v132, v224, (uint64_t)v110, v112, v135, v133, v134, v137);
    uint64_t v141 = *(void *)(v97 + 832);
    uint64_t v213 = v142;
    uint64_t v143 = (uint64_t)v139;
    if (v141) {
      LOWORD(v141) = *(_WORD *)(v141 + 8);
    }
    uint64_t v180 = sub_1CCFDED5C(v97, 148, a3, v132, v224, v117, (uint64_t)__s2c, v140, v138, v136, v141);
    uint64_t v184 = sub_1CCFDED5C(v97, v222, a3, v132, v224, v143, v213, v182, (uint64_t)v180, v181, *(_WORD *)(a2 + 72));
    uint64_t v185 = (uint64_t)v183;
    if (*(_WORD *)(v101 + 24) != 146 || *(_WORD *)(v102 + 24) != 146 || !*(_WORD *)(v101 + 56)) {
      goto LABEL_214;
    }
    uint64_t v186 = 0;
    unsigned int v187 = *(uint64_t **)(v101 + 32);
    uint64_t v188 = 40 * *(unsigned __int16 *)(v101 + 56);
    do
    {
      uint64_t v189 = *v187;
      v187 += 5;
      if (*(_WORD *)(v189 + 24) != 51) {
        ++v186;
      }
      v188 -= 40;
    }
    while (v188);
    if (v186 != 1 || !*(_WORD *)(v102 + 56)) {
      goto LABEL_214;
    }
    uint64_t v190 = 0;
    __int16 v191 = *(uint64_t **)(v102 + 32);
    uint64_t v192 = 40 * *(unsigned __int16 *)(v102 + 56);
    do
    {
      uint64_t v193 = *v191;
      v191 += 5;
      if (*(_WORD *)(v193 + 24) != 51) {
        ++v190;
      }
      v192 -= 40;
    }
    while (v192);
    if (v190 == 1)
    {
      unint64_t v194 = sub_1CD3DB440((llvm::EVT *)&v228, v183);
      uint64_t v195 = sub_1CD3DD4D8(v97, v132, v224);
      v230[0] = v231;
      v230[1] = (void *)0x800000000;
      sub_1CD3E535C((uint64_t *)v230, v194, (uint64_t)v195, v196);
      uint64_t v197 = (char *)v230[0] + 16 * SHIDWORD(v227);
      *(void *)uint64_t v197 = v184;
      *((_DWORD *)v197 + 2) = v185;
      uint64_t v198 = *(void *)(v97 + 832);
      if (v198) {
        uint64_t v199 = *(unsigned __int16 *)(v198 + 8);
      }
      else {
        uint64_t v199 = 0;
      }
      int v58 = sub_1CD7FF4E8((void *)v97, (const char *)0x92, a3, v228, v229, (uint64_t *)v230[0], LODWORD(v230[1]), v199);
      uint64_t v203 = v230[0];
      if (v230[0] == v231) {
        goto LABEL_219;
      }
    }
    else
    {
LABEL_214:
      unsigned int v200 = sub_1CD3DB440((llvm::EVT *)&v228, v183);
      v230[0] = v231;
      v230[1] = (void *)0x800000000;
      sub_1CD3E535C((uint64_t *)v230, v200, (uint64_t)v184, v185);
      uint64_t v201 = *(void *)(v97 + 832);
      if (v201) {
        uint64_t v202 = *(unsigned __int16 *)(v201 + 8);
      }
      else {
        uint64_t v202 = 0;
      }
      int v58 = sub_1CD7FF4E8((void *)v97, (const char *)0x92, a3, v228, v229, (uint64_t *)v230[0], LODWORD(v230[1]), v202);
      uint64_t v203 = v230[0];
      if (v230[0] == v231)
      {
LABEL_219:
        if (v58) {
          return v58;
        }
        return 0;
      }
    }
    free(v203);
    goto LABEL_219;
  }
  uint64_t __s2a = *(unsigned int **)(v13 + 32);
  uint64_t v59 = *(unsigned __int16 *)(v13 + 56);
  if (v59 != 1)
  {
    uint64_t v75 = (uint64_t *)(__s2a + 10);
    uint64_t v76 = 40 * *(unsigned __int16 *)(v13 + 56) - 40;
    while (*(_WORD *)(*v75 + 24) == 51 || sub_1CD7E9940(*v75))
    {
      v75 += 5;
      v76 -= 40;
      if (!v76) {
        goto LABEL_51;
      }
    }
    goto LABEL_118;
  }
LABEL_51:
  if (*(_WORD *)(v15 + 24) != 149) {
    goto LABEL_118;
  }
  int v212 = *(unsigned int **)(v15 + 32);
  if (*(_WORD *)(v15 + 56) != 1)
  {
    uint64_t v95 = (uint64_t *)(v212 + 10);
    uint64_t v96 = 40 * *(unsigned __int16 *)(v15 + 56) - 40;
    while (*(_WORD *)(*v95 + 24) == 51 || sub_1CD7E9940(*v95))
    {
      v95 += 5;
      v96 -= 40;
      if (!v96) {
        goto LABEL_53;
      }
    }
    goto LABEL_118;
  }
LABEL_53:
  uint64_t v60 = *(void *)(v13 + 48);
  if (!v60) {
    goto LABEL_60;
  }
  int v61 = 1;
  do
  {
    if (*(_DWORD *)(v60 + 8) == v14)
    {
      if (!v61) {
        goto LABEL_60;
      }
      --v61;
    }
    uint64_t v60 = *(void *)(v60 + 32);
  }
  while (v60);
  if (v61)
  {
LABEL_60:
    uint64_t v62 = *(void *)(v15 + 48);
    if (!v62) {
      goto LABEL_118;
    }
    int v63 = 1;
    do
    {
      if (*(_DWORD *)(v62 + 8) == v16)
      {
        if (!v63) {
          goto LABEL_118;
        }
        --v63;
      }
      uint64_t v62 = *(void *)(v62 + 32);
    }
    while (v62);
    if (v63) {
      goto LABEL_118;
    }
  }
  uint64_t v64 = *(void *)(*(void *)__s2a + 40) + 16 * __s2a[2];
  BOOL v65 = *(llvm **)v64;
  int v66 = (unsigned __int8 *)(*(void *)(*(void *)v212 + 40) + 16 * v212[2]);
  int v67 = *(void *)v64;
  if (v67 != *v66) {
    goto LABEL_118;
  }
  uint64_t v68 = *(void *)(v64 + 8);
  if (!*(void *)v64 && v68 != *((void *)v66 + 1)) {
    goto LABEL_118;
  }
  if (!*(void *)v64) {
    goto LABEL_118;
  }
  uint64_t v70 = (void *)a1[1];
  if (v67 != 1 && !v70[v65 + 12]) {
    goto LABEL_118;
  }
  if (v17 <= 0x185)
  {
    unsigned int v71 = *((unsigned __int8 *)v70 + 390 * v65 + v17 + 3862);
    if (v71 >= 2 && v71 != 4) {
      goto LABEL_118;
    }
  }
  v230[0] = v231;
  v230[1] = (void *)0x400000000;
  if (v59)
  {
    uint64_t v172 = 0;
    uint64_t v173 = 40 * v59;
    do
    {
      uint64_t v174 = *(void *)(*a1 + 832);
      if (v174) {
        LOWORD(v174) = *(_WORD *)(v174 + 8);
      }
      unsigned int v176 = sub_1CCFDED5C(*a1, v17, a3, v65, v68, *(void *)(*(void *)(v13 + 32) + v172), *(void *)(*(void *)(v13 + 32) + v172 + 8), a8, *(void *)(*(void *)(v15 + 32) + v172), *(void *)(*(void *)(v15 + 32) + v172 + 8), v174);
      if (LODWORD(v230[1]) >= (unint64_t)HIDWORD(v230[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v177 = (uint64_t **)((char *)v230[0] + 16 * LODWORD(v230[1]));
      *uint64_t v177 = v176;
      v177[1] = v175;
      uint64_t v73 = ++LODWORD(v230[1]);
      v172 += 40;
    }
    while (v173 != v172);
    uint64_t v74 = (uint64_t *)v230[0];
  }
  else
  {
    uint64_t v73 = 0;
    uint64_t v74 = v231;
  }
  uint64_t v178 = *(void *)(*a1 + 832);
  if (v178) {
    uint64_t v179 = *(unsigned __int16 *)(v178 + 8);
  }
  else {
    uint64_t v179 = 0;
  }
  int v58 = sub_1CD7FF4E8((void *)*a1, (const char *)0x95, a3, v223, v220, v74, v73, v179);
  if (v230[0] != v231) {
    free(v230[0]);
  }
  return v58;
}

uint64_t sub_1CCF40DA4(uint64_t a1, uint64_t a2, BOOL a3)
{
  BOOL v3 = a3;
  uint64_t v4 = 0;
  v12[0] = a1;
  v12[1] = a2;
  unsigned int v5 = *(unsigned __int16 *)(a1 + 24);
  if (v5 <= 0x22)
  {
    if (v5 != 11) {
      return v4;
    }
    goto LABEL_16;
  }
  if (v5 == 35)
  {
LABEL_16:
    LODWORD(v4) = !a3;
    if ((*(unsigned char *)(a1 + 26) & 8) != 0) {
      return v4;
    }
    else {
      return 1;
    }
  }
  if (v5 == 146 || v5 == 156)
  {
    unsigned int v6 = sub_1CD7878C0((unsigned int *)v12, a2, a3);
    if (*(_WORD *)(v12[0] + 56))
    {
      uint64_t v7 = *(uint64_t **)(v12[0] + 32);
      uint64_t v8 = 40 * *(unsigned __int16 *)(v12[0] + 56);
      while (1)
      {
        uint64_t v9 = *v7;
        int v10 = *(unsigned __int16 *)(*v7 + 24);
        if (v10 != 11)
        {
          if (v10 == 51) {
            goto LABEL_13;
          }
          if (v10 != 35) {
            return 0;
          }
        }
        if (*(_DWORD *)(*(void *)(v9 + 80) + 32) != v6 || (*(unsigned char *)(v9 + 26) & 8) != 0 && v3) {
          return 0;
        }
LABEL_13:
        v7 += 5;
        uint64_t v4 = 1;
        v8 -= 40;
        if (!v8) {
          return v4;
        }
      }
    }
    return 1;
  }
  return v4;
}

uint64_t sub_1CCF40E94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(unsigned __int16 *)(a1 + 24);
  if (v3 == 173)
  {
    uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 40);
    int v12 = *(unsigned __int16 *)(v11 + 24);
    if (v12 != 35 && v12 != 11) {
      return 0;
    }
    uint64_t v14 = *(void *)(v11 + 80);
    uint64_t v15 = (unint64_t **)(v14 + 24);
    unsigned int v16 = *(_DWORD *)(v14 + 32);
    if (v16 > 0x40)
    {
      if ((((*v15)[(v16 - 1) >> 6] >> (v16 - 1)) & 1) == 0) {
        return 0;
      }
      return llvm::APInt::countTrailingZerosSlowCase(v15) == v16 - 1;
    }
    else
    {
      return *v15 == (unint64_t *)(1 << (v16 - 1));
    }
  }
  if (v3 != 172) {
    return 0;
  }
  uint64_t v4 = *(uint64_t **)(a1 + 32);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[5];
  uint64_t v7 = v4[6];
  uint64_t v9 = v4[1];

  return sub_1CD7F31F0(a3, v5, v9, v6, v7);
}

uint64_t *sub_1CCF40F64(llvm::APFloatBase **a1, uint64_t a2)
{
  uint64_t v4 = *((void *)*a1 + 3);
  uint64_t v5 = *(unsigned __int16 *)(a2 + 24);
  uint64_t v6 = *(llvm ***)(a2 + 40);
  uint64_t v7 = *v6;
  uint64_t v8 = (uint64_t)v6[1];
  if ((*(unsigned int (**)(uint64_t, uint64_t, llvm *, uint64_t))(*(void *)v4 + 1392))(v4, v5, *v6, v8))
  {
    uint64_t v9 = sub_1CCF41F7C(a2, *a1, 0);
    if (v9) {
      return v9;
    }
    if ((*(unsigned int (**)(uint64_t, void))(*(void *)v4 + 1128))(v4, *(unsigned __int16 *)(a2 + 24)))
    {
      uint64_t v9 = sub_1CCF41F7C(a2, *a1, 1);
      if (v9) {
        return v9;
      }
    }
  }
  uint64_t v11 = *(uint64_t **)(a2 + 32);
  uint64_t v12 = *v11;
  if (*(_WORD *)(*v11 + 24) != 190) {
    goto LABEL_14;
  }
  uint64_t v13 = *(void *)(v12 + 48);
  if (!v13) {
    goto LABEL_14;
  }
  uint64_t v14 = v11[1];
  int v15 = 1;
  do
  {
    if (*(_DWORD *)(v13 + 8) == v14)
    {
      if (!v15) {
        goto LABEL_14;
      }
      --v15;
    }
    uint64_t v13 = *(void *)(v13 + 32);
  }
  while (v13);
  if (!v15)
  {
    LODWORD(v10) = 1;
    char v16 = 1;
  }
  else
  {
LABEL_14:
    int v10 = 0;
    uint64_t v12 = v11[5];
    if (*(_WORD *)(v12 + 24) != 190) {
      return v10;
    }
    char v16 = 0;
    LODWORD(v14) = *((_DWORD *)v11 + 12);
  }
  uint64_t v17 = *(void *)(v12 + 48);
  if (!v17) {
    return 0;
  }
  int v18 = 1;
  do
  {
    if (*(_DWORD *)(v17 + 8) == v14)
    {
      if (!v18) {
        return 0;
      }
      --v18;
    }
    uint64_t v17 = *(void *)(v17 + 32);
  }
  while (v17);
  if (v18) {
    return 0;
  }
  uint64_t v20 = *(void *)(v12 + 32);
  uint64_t v21 = *(void *)(v20 + 40);
  uint64_t v22 = *(void *)(v20 + 48);
  if ((sub_1CCF40DA4(v21, v22, 1) & 1) == 0 && !sub_1CD7F5A54((uint64_t)*a1, v21)) {
    return 0;
  }
  uint64_t v58 = v22;
  uint64_t v59 = v21;
  uint64_t v23 = *(void *)(v12 + 32);
  uint64_t v24 = *(void *)(v23 + 80);
  uint64_t v25 = *(void *)(v23 + 88);
  if ((sub_1CCF40DA4(v24, v25, 1) & 1) == 0 && !sub_1CD7F5A54((uint64_t)*a1, v24)) {
    return 0;
  }
  uint64_t v55 = v25;
  uint64_t v56 = v24;
  uint64_t v26 = v58;
  if ((v5 - 171) > 1
    || (sub_1CD7FF12C(v59, v58, 0) & 1) == 0 && !sub_1CD802C68(v59, v58, 0))
  {
    uint64_t v30 = (uint64_t *)(*(void *)(a2 + 32) + 40 * v10);
    uint64_t v31 = *v30;
    uint64_t v32 = v30[1];
LABEL_38:
    if ((sub_1CCF40DA4(v31, v32, 1) & 1) != 0 || sub_1CD7F5A54((uint64_t)*a1, v31))
    {
      uint64_t v57 = v31;
      char v54 = 0;
      uint64_t v29 = v32;
      uint64_t v33 = v59;
      goto LABEL_44;
    }
    return 0;
  }
  if (!sub_1CD7FF12C(v24, v55, 0))
  {
    char v34 = sub_1CD802C68(v24, v55, 0);
    uint64_t v35 = (uint64_t *)(*(void *)(a2 + 32) + 40 * v10);
    uint64_t v29 = v35[1];
    uint64_t v57 = *v35;
    if (v34) {
      goto LABEL_43;
    }
    uint64_t v32 = v35[1];
    uint64_t v31 = *v35;
    uint64_t v26 = v58;
    goto LABEL_38;
  }
  uint64_t v28 = (uint64_t *)(*(void *)(a2 + 32) + 40 * v10);
  uint64_t v29 = v28[1];
  uint64_t v57 = *v28;
LABEL_43:
  char v54 = 1;
  uint64_t v26 = v58;
  uint64_t v33 = v59;
LABEL_44:
  int v36 = *(unsigned __int8 **)(v12 + 64);
  uint64_t v60 = v36;
  if (v36) {
    llvm::MetadataTracking::track((uint64_t)&v60, v36, 2);
  }
  int v61 = *(_DWORD *)(v12 + 60);
  uint64_t v37 = *a1;
  uint64_t v38 = *((void *)*a1 + 104);
  if (v16)
  {
    if (v38) {
      LOWORD(v38) = *(_WORD *)(v38 + 8);
    }
    unsigned int v39 = sub_1CCFDED5C((uint64_t)v37, v5, (const llvm::APInt *)&v60, v7, v8, v33, v26, v27, v57, v29, v38);
  }
  else
  {
    if (v38) {
      LOWORD(v38) = *(_WORD *)(v38 + 8);
    }
    unsigned int v39 = sub_1CCFDED5C((uint64_t)v37, v5, (const llvm::APInt *)&v60, v7, v8, v57, v29, v27, v33, v26, v38);
  }
  uint64_t v42 = (uint64_t)v39;
  uint64_t v43 = v40;
  if ((v54 & 1) == 0
    && *((_WORD *)v39 + 12) != 51
    && (sub_1CCF40DA4((uint64_t)v39, v40, 1) & 1) == 0
    && !sub_1CD7F5A54((uint64_t)*a1, v42))
  {
    goto LABEL_71;
  }
  uint64_t v44 = *a1;
  uint64_t v45 = *((void *)*a1 + 104);
  if (v16)
  {
    if (v45) {
      LOWORD(v45) = *(_WORD *)(v45 + 8);
    }
    uint64_t v46 = sub_1CCFDED5C((uint64_t)v44, v5, (const llvm::APInt *)&v60, v7, v8, v56, v55, v41, v57, v29, v45);
  }
  else
  {
    if (v45) {
      LOWORD(v45) = *(_WORD *)(v45 + 8);
    }
    uint64_t v46 = sub_1CCFDED5C((uint64_t)v44, v5, (const llvm::APInt *)&v60, v7, v8, v57, v29, v41, v56, v55, v45);
  }
  uint64_t v48 = (uint64_t)v46;
  uint64_t v49 = v47;
  if ((v54 & 1) != 0
    || *((_WORD *)v46 + 12) == 51
    || (sub_1CCF40DA4((uint64_t)v46, v47, 1) & 1) != 0
    || sub_1CD7F5A54((uint64_t)*a1, v48))
  {
    int v10 = sub_1CD3E1260(*a1, (const llvm::APInt *)&v60, v7, v8, **(void **)(v12 + 32), *(void *)(*(void *)(v12 + 32) + 8), v42, v43, v48, v49, SHIDWORD(v49));
    *((_WORD *)v10 + 36) = *(_WORD *)(a2 + 72);
  }
  else
  {
LABEL_71:
    int v10 = 0;
  }
  if (v60)
  {
    int v50 = *v60;
    if ((v50 - 4) > 0x1E)
    {
      if ((v50 - 3) >= 0xFFFFFFFE) {
        int v53 = v60;
      }
      else {
        int v53 = 0;
      }
      if ((v50 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v52 = (unint64_t)(v53 + 8);
LABEL_84:
        uint64_t v62 = &v60;
        sub_1CC5FA668(v52 + 16, &v62);
        return v10;
      }
      if (v50 == 3) {
        *((void *)v60 + 1) = 0;
      }
    }
    else if ((v60[1] & 0x7F) == 2 || *((_DWORD *)v60 + 3))
    {
      uint64_t v51 = *((void *)v60 + 2);
      if ((v51 & 4) != 0)
      {
        unint64_t v52 = v51 & 0xFFFFFFFFFFFFFFF8;
        if (v52) {
          goto LABEL_84;
        }
      }
    }
  }
  return v10;
}

uint64_t *sub_1CCF414C8(uint64_t *a1, const char *a2, const llvm::APInt *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, __int16 a8)
{
  uint64_t v15 = *(void *)(a4 + 40) + 16 * a5;
  char v16 = *(unsigned char *)v15;
  if (*(unsigned char *)v15)
  {
    BOOL v17 = (v16 + 104) >= 0x13u && (v16 - 8) >= 7u;
    if (!v17 || (v16 - 75) < 0x2Du) {
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v18 = *(void *)(v15 + 8);
    if ((*(_DWORD *)(v18 + 8) & 0xFE) == 0x12) {
      unsigned int v19 = *(unsigned __int8 *)(**(void **)(v18 + 16) + 8);
    }
    else {
      unsigned int v19 = *(_DWORD *)(v18 + 8);
    }
    if (v19 < 7) {
      goto LABEL_25;
    }
  }
  uint64_t v20 = *(void *)(a6 + 40) + 16 * a7;
  char v21 = *(unsigned char *)v20;
  if (*(unsigned char *)v20)
  {
    BOOL v22 = (v21 + 104) >= 0x13u && (v21 - 8) >= 7u;
    if (v22 && (v21 - 75) >= 0x2Du) {
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v23 = *(void *)(v20 + 8);
    if ((*(_DWORD *)(v23 + 8) & 0xFE) == 0x12) {
      unsigned int v24 = *(unsigned __int8 *)(**(void **)(v23 + 16) + 8);
    }
    else {
      unsigned int v24 = *(_DWORD *)(v23 + 8);
    }
    if (v24 > 6) {
      goto LABEL_26;
    }
  }
LABEL_25:
  if ((~a8 & 0x440) != 0) {
    return 0;
  }
LABEL_26:
  uint64_t result = sub_1CCF4257C(a1, a2, a3, a4, a5, a6, a7);
  if (!result) {
    return sub_1CCF4257C(a1, a2, a3, a6, a7, a4, a5);
  }
  return result;
}

uint64_t *sub_1CCF41660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = a3;
  int v10 = *(uint64_t **)a1;
  if (!sub_1CCF40E94(a2, a3, **(void **)a1)) {
    return 0;
  }
  uint64_t v11 = *(void *)(a2 + 48);
  if (!v11) {
    return 0;
  }
  int v12 = 1;
  do
  {
    if (*(_DWORD *)(v11 + 8) == v7)
    {
      if (!v12) {
        return 0;
      }
      --v12;
    }
    uint64_t v11 = *(void *)(v11 + 32);
  }
  while (v11);
  if (v12
    || !sub_1CCF40DA4(*(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48), 1))
  {
    return 0;
  }
  uint64_t v14 = *v10;
  char v16 = *(const llvm::APInt **)(a1 + 8);
  uint64_t v15 = *(void *)(a1 + 16);
  BOOL v17 = *(llvm **)v15;
  uint64_t v18 = *(void *)(v15 + 8);
  unsigned int v19 = *(uint64_t **)(a2 + 32);
  uint64_t v20 = *v19;
  uint64_t v21 = v19[1];
  uint64_t v22 = *(void *)(v14 + 832);
  if (v22) {
    LOWORD(v22) = *(_WORD *)(v22 + 8);
  }
  unsigned int v24 = sub_1CCFDED5C(v14, 56, v16, v17, v18, a4, a5, v13, v20, v21, v22);
  uint64_t v26 = *(void *)(a2 + 32);
  uint64_t v27 = *(void *)(v26 + 40);
  uint64_t v28 = *(void *)(v26 + 48);
  uint64_t v29 = *(void *)(v14 + 832);
  if (v29) {
    LOWORD(v29) = *(_WORD *)(v29 + 8);
  }
  return sub_1CCFDED5C(v14, 56, v16, v17, v18, (uint64_t)v24, v23, v25, v27, v28, v29);
}

uint64_t sub_1CCF41798(uint64_t a1, uint64_t a2, BOOL a3)
{
  uint64_t v10 = a2;
  BOOL v11 = a3;
  unsigned int v4 = sub_1CD7878C0((unsigned int *)&v10, a2, a3);
  unsigned int v9 = v4;
  if (v4 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v8);
  }
  unint64_t v5 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v4;
  if (!v4) {
    unint64_t v5 = 0;
  }
  unint64_t v8 = v5;
  uint64_t v6 = sub_1CCF42B2C(a1, v10, v11, (uint64_t)&v8);
  if (v9 >= 0x41 && v8) {
    MEMORY[0x1D25D9CB0](v8, 0x1000C8000313F17);
  }
  return v6;
}

uint64_t *sub_1CCF41844(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v12 = *(void *)(a2 + 40) + 16 * a3;
  uint64_t v14 = *(llvm **)v12;
  uint64_t v13 = *(void *)(v12 + 8);
  uint64_t v15 = *(unsigned __int8 **)(a6 + 64);
  uint64_t v119 = v15;
  if (v15) {
    llvm::MetadataTracking::track((uint64_t)&v119, v15, 2);
  }
  int v120 = *(_DWORD *)(a6 + 60);
  if (*(_WORD *)(a4 + 24) == 175)
  {
    uint64_t v16 = **(void **)(a4 + 32);
    if (*(_WORD *)(v16 + 24) == 57)
    {
      if (sub_1CD7FF12C(**(void **)(v16 + 32), *(void *)(*(void *)(v16 + 32) + 8), 0))
      {
        uint64_t v42 = *a1;
        uint64_t v43 = *(void **)(a4 + 32);
        uint64_t v44 = *(void *)(*v43 + 32);
        uint64_t v45 = *(void *)(v44 + 40);
        uint64_t v46 = *(void *)(v44 + 48);
        uint64_t v47 = v43[5];
        uint64_t v48 = v43[6];
        uint64_t v49 = *(void *)(v42 + 832);
        if (v49) {
          LOWORD(v49) = *(_WORD *)(v49 + 8);
        }
        int v50 = sub_1CCFDED5C(v42, 175, (const llvm::APInt *)&v119, v14, v13, v45, v46, v41, v47, v48, v49);
        uint64_t v52 = *(void *)(v42 + 832);
        if (v52) {
          LOWORD(v52) = *(_WORD *)(v52 + 8);
        }
        uint64_t v117 = v51;
        __int16 v118 = v52;
        uint64_t v116 = (uint64_t)v50;
        uint64_t v35 = v42;
LABEL_88:
        uint64_t v40 = 57;
        int v63 = v14;
        uint64_t v64 = v13;
        uint64_t v31 = (uint64_t *)a2;
        uint64_t v34 = a3;
        goto LABEL_89;
      }
    }
  }
  BOOL v17 = sub_1CCF42C2C(1, a2, a3, a4, a5, *a1, (const llvm::APInt *)&v119);
  if (v17)
  {
LABEL_6:
    uint64_t v18 = v17;
    goto LABEL_66;
  }
  if (((*(uint64_t (**)(uint64_t, llvm *, uint64_t))(*(void *)a1[1] + 360))(a1[1], v14, v13) & 1) == 0
    && *(_WORD *)(a2 + 24) == 56)
  {
    uint64_t v21 = *(void *)(a2 + 48);
    if (v21)
    {
      int v22 = 1;
      do
      {
        if (*(_DWORD *)(v21 + 8) == a3)
        {
          if (!v22) {
            goto LABEL_16;
          }
          --v22;
        }
        uint64_t v21 = *(void *)(v21 + 32);
      }
      while (v21);
      if (!v22
        && sub_1CD802BA8(*(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48), 0))
      {
        uint64_t v103 = *a1;
        uint64_t v104 = *(uint64_t **)(a2 + 32);
        uint64_t v105 = *v104;
        uint64_t v106 = v104[1];
        uint64_t v107 = sub_1CD787918(*a1, (const llvm::APInt *)&v119, (BOOL)v14, v13, 0, 0);
        uint64_t v110 = *(void *)(v103 + 832);
        if (v110) {
          LOWORD(v110) = *(_WORD *)(v110 + 8);
        }
        uint64_t v111 = sub_1CCFDED5C(v103, 173, (const llvm::APInt *)&v119, v14, v13, v105, v106, v109, v107, v108, v110);
        goto LABEL_100;
      }
    }
  }
LABEL_16:
  int v23 = *(unsigned __int16 *)(a2 + 24);
  if (v23 == 57)
  {
    uint64_t v24 = *(void *)(a2 + 48);
    if (!v24) {
      goto LABEL_45;
    }
    int v25 = 1;
    do
    {
      if (*(_DWORD *)(v24 + 8) == a3)
      {
        if (!v25) {
          goto LABEL_45;
        }
        --v25;
      }
      uint64_t v24 = *(void *)(v24 + 32);
    }
    while (v24);
    if (v25) {
      goto LABEL_45;
    }
    if (sub_1CCF40DA4(*(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48), 1))
    {
      uint64_t v27 = *(uint64_t **)(a2 + 32);
      uint64_t v28 = *v27;
      uint64_t v29 = v27[1];
      uint64_t v30 = *(void *)(*a1 + 832);
      if (v30) {
        LOWORD(v30) = *(_WORD *)(v30 + 8);
      }
      uint64_t v31 = sub_1CCFDED5C(*a1, 56, (const llvm::APInt *)&v119, v14, v13, v28, v29, v26, a4, a5, v30);
      uint64_t v34 = v33;
      uint64_t v35 = *a1;
      uint64_t v36 = *(void *)(a2 + 32);
      uint64_t v37 = *(void *)(v36 + 40);
      uint64_t v38 = *(void *)(v36 + 48);
      uint64_t v39 = *(void *)(*a1 + 832);
      if (v39) {
        LOWORD(v39) = *(_WORD *)(v39 + 8);
      }
      uint64_t v117 = v38;
      __int16 v118 = v39;
      uint64_t v116 = v37;
      uint64_t v40 = 57;
LABEL_42:
      int v63 = v14;
      uint64_t v64 = v13;
LABEL_89:
      BOOL v17 = sub_1CCFDED5C(v35, v40, (const llvm::APInt *)&v119, v63, v64, (uint64_t)v31, v34, v32, v116, v117, v118);
      goto LABEL_6;
    }
    if (sub_1CCF40DA4(**(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), 1))
    {
      uint64_t v54 = *(void *)(a2 + 32);
      uint64_t v55 = *(void *)(v54 + 40);
      uint64_t v56 = *(void *)(v54 + 48);
      uint64_t v57 = *(void *)(*a1 + 832);
      if (v57) {
        LOWORD(v57) = *(_WORD *)(v57 + 8);
      }
      uint64_t v31 = sub_1CCFDED5C(*a1, 57, (const llvm::APInt *)&v119, v14, v13, a4, a5, v53, v55, v56, v57);
      uint64_t v34 = v58;
      uint64_t v35 = *a1;
      uint64_t v59 = *(uint64_t **)(a2 + 32);
      uint64_t v60 = *v59;
      uint64_t v61 = v59[1];
      uint64_t v62 = *(void *)(*a1 + 832);
      if (v62) {
        LOWORD(v62) = *(_WORD *)(v62 + 8);
      }
      uint64_t v117 = v61;
      __int16 v118 = v62;
      uint64_t v116 = v60;
      uint64_t v40 = 56;
      goto LABEL_42;
    }
    int v23 = *(unsigned __int16 *)(a2 + 24);
  }
  if (v23 == 198
    && sub_1CD7878C0(*(unsigned int **)(a2 + 32), v19, v20) == (llvm::Type *)1
    && sub_1CD7879C8((unsigned int *)a1[1], (char)v14, v13) == 1)
  {
    uint64_t v78 = *(uint64_t **)(a2 + 32);
    uint64_t v79 = *v78;
    uint64_t v80 = (void *)v78[1];
    uint64_t v81 = *(void *)(*a1 + 832);
    if (v81) {
      __int16 v82 = *(_WORD *)(v81 + 8);
    }
    else {
      __int16 v82 = 0;
    }
    uint64_t v111 = sub_1CD7F3564((llvm::APFloatBase *)*a1, (const char *)0xC7, (uint64_t)&v119, v14, v13, v79, v80, v82);
LABEL_100:
    uint64_t v115 = *(void *)(*a1 + 832);
    if (v115) {
      LOWORD(v115) = *(_WORD *)(v115 + 8);
    }
    BOOL v17 = sub_1CCFDED5C(*a1, 57, (const llvm::APInt *)&v119, v14, v13, a4, a5, v113, (uint64_t)v111, v112, v115);
    goto LABEL_6;
  }
LABEL_45:
  int v65 = *(unsigned __int16 *)(a4 + 24);
  if (v65 == 204)
  {
    unsigned int v69 = *(uint64_t **)(a4 + 32);
    if (*(unsigned char *)(v69[5] + 80) == 2)
    {
      uint64_t v83 = *a1;
      uint64_t v84 = *v69;
      uint64_t v85 = v69[1];
      uint64_t v86 = sub_1CD7EBF14(*a1, 1, (const llvm::APInt *)&v119, v14, v13, 0, 0);
      uint64_t v89 = *(void *)(v83 + 832);
      if (v89) {
        LOWORD(v89) = *(_WORD *)(v89 + 8);
      }
      uint64_t v90 = sub_1CCFDED5C(v83, 171, (const llvm::APInt *)&v119, v14, v13, v84, v85, v88, (uint64_t)v86, v87, v89);
      uint64_t v92 = *(void *)(*a1 + 832);
      if (v92) {
        LOWORD(v92) = *(_WORD *)(v92 + 8);
      }
      uint64_t v117 = v91;
      __int16 v118 = v92;
      uint64_t v116 = (uint64_t)v90;
      uint64_t v35 = *a1;
      goto LABEL_88;
    }
  }
  else if (v65 == 72)
  {
    int v66 = *(uint64_t **)(a4 + 32);
    if (sub_1CD7F2D2C(v66[5]) && a5 == 0)
    {
      BOOL v17 = sub_1CD7FFB94((void *)*a1, (const char *)0x48, (const llvm::APInt *)&v119, *(void *)(a4 + 40), *(unsigned __int16 *)(a4 + 58), a2, a3, v67, *v66, v66[1], v66[10], v66[11]);
      goto LABEL_6;
    }
  }
  if ((_BYTE)v14)
  {
    uint64_t v70 = (unsigned int *)a1[1];
    if (v14 == 1
      || (*(void *)&v70[2 * v14 + 24] ? (BOOL v71 = v14 == 0) : (BOOL v71 = 1), !v71))
    {
      if ((*((unsigned __int8 *)v70 + 390 * v14 + 3934) | 4) == 4)
      {
        uint64_t v72 = sub_1CCF42D20(v70, a4, a5);
        if (v72)
        {
          uint64_t v93 = v72;
          int v94 = v73;
          uint64_t v95 = (void *)*a1;
          uint64_t v96 = (uint64_t *)(*(void *)(v72 + 40) + 16 * v73);
          uint64_t v97 = sub_1CD7F95FC(*a1, (uint64_t)v14, v13, *v96, v96[1]);
          uint64_t v99 = v98;
          uint64_t v100 = sub_1CD7EBF14(*a1, 0, (const llvm::APInt *)&v119, v14, v13, 0, 0);
          BOOL v17 = sub_1CD7FFB94(v95, (const char *)0x48, (const llvm::APInt *)&v119, v97, v99, a2, a3, v102, (uint64_t)v100, v101, v93, v94);
          goto LABEL_6;
        }
      }
    }
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v18 = (uint64_t *)v14;
  }
LABEL_66:
  if (v119)
  {
    int v74 = *v119;
    if ((v74 - 4) > 0x1E)
    {
      if ((v74 - 3) >= 0xFFFFFFFE) {
        uint64_t v76 = v119;
      }
      else {
        uint64_t v76 = 0;
      }
      if ((v74 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v77 = (unint64_t)(v76 + 8);
LABEL_76:
        unsigned __int8 v121 = &v119;
        sub_1CC5FA668(v77 + 16, &v121);
        return v18;
      }
      if (v74 == 3) {
        *((void *)v119 + 1) = 0;
      }
    }
    else if ((v119[1] & 0x7F) == 2 || *((_DWORD *)v119 + 3))
    {
      uint64_t v114 = *((void *)v119 + 2);
      if ((v114 & 4) != 0)
      {
        unint64_t v77 = v114 & 0xFFFFFFFFFFFFFFF8;
        if (v77) {
          goto LABEL_76;
        }
      }
    }
  }
  return v18;
}

uint64_t sub_1CCF41ED0(uint64_t a1, unsigned int a2, unsigned __int8 a3, uint64_t a4, int a5)
{
  uint64_t v5 = a3;
  if (a5)
  {
    if (!a3) {
      return v5;
    }
    if (a3 == 1)
    {
      if (a2 > 0x185) {
        return 0;
      }
    }
    else
    {
      uint64_t v5 = *(void *)(a1 + 8 * a3 + 96);
      if (!v5) {
        return v5;
      }
      uint64_t v5 = 0;
      if (a2 > 0x185) {
        return v5;
      }
    }
    return *(unsigned char *)(a1 + 390 * a3 + a2 + 3862) == 0;
  }
  if (a3)
  {
    if (a3 == 1 || (uint64_t v5 = *(void *)(a1 + 8 * a3 + 96)) != 0)
    {
      if (a2 > 0x185) {
        return 1;
      }
      return (*(unsigned char *)(a1 + 390 * a3 + a2 + 3862) & 0xFB) == 0;
    }
  }
  return v5;
}

uint64_t *sub_1CCF41F7C(uint64_t a1, llvm::APFloatBase *a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)v3;
  unint64_t v4 = *(void *)(v3 + 8);
  uint64_t v6 = *(void *)(v3 + 40);
  uint64_t v7 = *(unsigned int *)(v3 + 48);
  if (a3) {
    unint64_t v8 = (void *)(v4 & 0xFFFFFFFF00000000 | v7);
  }
  else {
    unint64_t v8 = (void *)v4;
  }
  if (a3) {
    uint64_t v9 = v6;
  }
  else {
    uint64_t v9 = v5;
  }
  if (a3)
  {
    uint64_t v10 = v5;
  }
  else
  {
    LODWORD(v4) = v7;
    uint64_t v10 = v6;
  }
  uint64_t v11 = *(void *)(v10 + 48);
  if (!v11) {
    return 0;
  }
  int v14 = 1;
  do
  {
    if (*(_DWORD *)(v11 + 8) == v4)
    {
      if (!v14) {
        return 0;
      }
      --v14;
    }
    uint64_t v11 = *(void *)(v11 + 32);
  }
  while (v11);
  if (v14 || *(_WORD *)(v10 + 24) != 191) {
    return 0;
  }
  uint64_t v15 = *(unsigned __int16 *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = *(void *)(v16 + 8);
  uint64_t v18 = *(uint64_t **)(v10 + 32);
  uint64_t v57 = *v18;
  uint64_t v58 = *(llvm **)v16;
  uint64_t v56 = v18[1];
  uint64_t v20 = v18[5];
  uint64_t v19 = v18[6];
  uint64_t v22 = v18[10];
  uint64_t v21 = v18[11];
  if (!sub_1CCF4237C(*(unsigned __int16 *)(a1 + 24), v20, v19))
  {
    if (!sub_1CCF4237C(v15, v22, v21)) {
      return 0;
    }
    uint64_t v37 = sub_1CD7EFAB4(a2, v9, v8);
    uint64_t v39 = v38;
    uint64_t v40 = *(unsigned __int8 **)(a1 + 64);
    uint64_t v59 = v40;
    if (v40) {
      llvm::MetadataTracking::track((uint64_t)&v59, v40, 2);
    }
    int v60 = *(_DWORD *)(a1 + 60);
    uint64_t v41 = sub_1CCFDED5C((uint64_t)a2, v15, (const llvm::APInt *)&v59, v58, v17, (uint64_t)v37, v39, v36, v20, v19, *(_WORD *)(a1 + 72));
    uint64_t v43 = v42;
    if (!v59) {
      goto LABEL_37;
    }
    int v44 = *v59;
    if ((v44 - 4) > 0x1E)
    {
      if ((v44 - 3) >= 0xFFFFFFFE) {
        uint64_t v52 = v59;
      }
      else {
        uint64_t v52 = 0;
      }
      if ((v44 - 3) < 0xFFFFFFFE)
      {
        if (v44 == 3) {
          *((void *)v59 + 1) = 0;
        }
        goto LABEL_37;
      }
      unint64_t v53 = (unint64_t)(v52 + 8);
    }
    else
    {
      if ((v59[1] & 0x7F) != 2 && !*((_DWORD *)v59 + 3)) {
        goto LABEL_37;
      }
      uint64_t v55 = *((void *)v59 + 2);
      if ((v55 & 4) == 0) {
        goto LABEL_37;
      }
      unint64_t v53 = v55 & 0xFFFFFFFFFFFFFFF8;
      if (!v53) {
        goto LABEL_37;
      }
    }
    uint64_t v61 = &v59;
    sub_1CC5FA668(v53 + 16, &v61);
LABEL_37:
    uint64_t v45 = *(unsigned __int8 **)(a1 + 64);
    uint64_t v59 = v45;
    if (v45) {
      llvm::MetadataTracking::track((uint64_t)&v59, v45, 2);
    }
    int v60 = *(_DWORD *)(a1 + 60);
    uint64_t v35 = sub_1CD3E1260(a2, (const llvm::APInt *)&v59, v58, v17, v57, v56, (uint64_t)v41, v43, (uint64_t)v37, v39, SHIDWORD(v39));
    goto LABEL_40;
  }
  uint64_t v26 = sub_1CD7EFAB4(a2, v9, v8);
  uint64_t v28 = v27;
  uint64_t v29 = *(unsigned __int8 **)(a1 + 64);
  uint64_t v59 = v29;
  if (v29) {
    llvm::MetadataTracking::track((uint64_t)&v59, v29, 2);
  }
  int v60 = *(_DWORD *)(a1 + 60);
  uint64_t v30 = sub_1CCFDED5C((uint64_t)a2, v15, (const llvm::APInt *)&v59, v58, v17, (uint64_t)v26, v28, v25, v22, v21, *(_WORD *)(a1 + 72));
  uint64_t v32 = v31;
  if (v59)
  {
    int v33 = *v59;
    if ((v33 - 4) > 0x1E)
    {
      if ((v33 - 3) >= 0xFFFFFFFE) {
        int v50 = v59;
      }
      else {
        int v50 = 0;
      }
      if ((v33 - 3) < 0xFFFFFFFE)
      {
        if (v33 == 3) {
          *((void *)v59 + 1) = 0;
        }
        goto LABEL_28;
      }
      unint64_t v51 = (unint64_t)(v50 + 8);
    }
    else
    {
      if ((v59[1] & 0x7F) != 2 && !*((_DWORD *)v59 + 3)) {
        goto LABEL_28;
      }
      uint64_t v54 = *((void *)v59 + 2);
      if ((v54 & 4) == 0) {
        goto LABEL_28;
      }
      unint64_t v51 = v54 & 0xFFFFFFFFFFFFFFF8;
      if (!v51) {
        goto LABEL_28;
      }
    }
    uint64_t v61 = &v59;
    sub_1CC5FA668(v51 + 16, &v61);
  }
LABEL_28:
  uint64_t v34 = *(unsigned __int8 **)(a1 + 64);
  uint64_t v59 = v34;
  if (v34) {
    llvm::MetadataTracking::track((uint64_t)&v59, v34, 2);
  }
  int v60 = *(_DWORD *)(a1 + 60);
  uint64_t v35 = sub_1CD3E1260(a2, (const llvm::APInt *)&v59, v58, v17, v57, v56, (uint64_t)v26, v28, (uint64_t)v30, v32, SHIDWORD(v32));
LABEL_40:
  int v23 = v35;
  if (!v59) {
    return v23;
  }
  int v46 = *v59;
  if ((v46 - 4) > 0x1E)
  {
    if ((v46 - 3) >= 0xFFFFFFFE) {
      uint64_t v49 = v59;
    }
    else {
      uint64_t v49 = 0;
    }
    if ((v46 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v48 = (unint64_t)(v49 + 8);
LABEL_52:
      uint64_t v61 = &v59;
      sub_1CC5FA668(v48 + 16, &v61);
      return v23;
    }
    if (v46 == 3) {
      *((void *)v59 + 1) = 0;
    }
  }
  else if ((v59[1] & 0x7F) == 2 || *((_DWORD *)v59 + 3))
  {
    uint64_t v47 = *((void *)v59 + 2);
    if ((v47 & 4) != 0)
    {
      unint64_t v48 = v47 & 0xFFFFFFFFFFFFFFF8;
      if (v48) {
        goto LABEL_52;
      }
    }
  }
  return v23;
}

uint64_t sub_1CCF4237C(int a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = a3;
  uint64_t v6 = sub_1CCFDEC10(a2, a3, 0);
  if (!v6) {
    goto LABEL_7;
  }
  if ((a1 - 98) >= 2)
  {
    if (a1 == 97)
    {
      uint64_t v14 = *(void *)(v6 + 80);
      if (*(_UNKNOWN **)(v14 + 32) == &unk_1CFB2E344) {
        char v15 = *(unsigned char *)(*(void *)(v14 + 40) + 28);
      }
      else {
        char v15 = *(unsigned char *)(v14 + 52);
      }
      if ((v15 & 7) == 3) {
        return (v15 & 8) == 0;
      }
      return 0;
    }
    if (a1 == 96)
    {
      uint64_t v7 = *(void *)(v6 + 80);
      if (*(_UNKNOWN **)(v7 + 32) == &unk_1CFB2E344) {
        unsigned int v8 = *(unsigned __int8 *)(*(void *)(v7 + 40) + 28);
      }
      else {
        unsigned int v8 = *(unsigned __int8 *)(v7 + 52);
      }
      if ((v8 & 7) == 3) {
        return (v8 >> 3) & 1;
      }
      return 0;
    }
LABEL_7:
    uint64_t result = sub_1CCFD8CD8(a2, v3, 0, 0);
    if (!result) {
      return result;
    }
    if ((a1 - 175) < 3 || (a1 - 56) < 2)
    {
      uint64_t v10 = *(void *)(result + 80);
      uint64_t v11 = *(unsigned int *)(v10 + 32);
      if (v11 > 0x40)
      {
        int v16 = 0;
        int64_t v17 = (unint64_t)(v11 + 63) >> 6;
        do
        {
          BOOL v18 = v17-- < 1;
          if (v18) {
            break;
          }
          unint64_t v19 = *(void *)(*(void *)(v10 + 24) + 8 * v17);
          v16 += __clz(v19);
        }
        while (!v19);
        int v20 = v11 | 0xFFFFFFC0;
        if ((v11 & 0x3F) == 0) {
          int v20 = 0;
        }
        return v16 + v20 == v11;
      }
      else
      {
        return *(void *)(v10 + 24) == 0;
      }
    }
    if (a1 == 58)
    {
      uint64_t v21 = *(void *)(result + 80);
      uint64_t v22 = *(unsigned int *)(v21 + 32);
      if (v22 > 0x40)
      {
        int v23 = 0;
        int64_t v24 = (unint64_t)(v22 + 63) >> 6;
        do
        {
          BOOL v18 = v24-- < 1;
          if (v18) {
            break;
          }
          unint64_t v25 = *(void *)(*(void *)(v21 + 24) + 8 * v24);
          v23 += __clz(v25);
        }
        while (!v25);
        int v26 = v22 | 0xFFFFFFC0;
        if ((v22 & 0x3F) == 0) {
          int v26 = 0;
        }
        return v23 + v26 == v22 - 1;
      }
      else
      {
        return *(void *)(v21 + 24) == 1;
      }
    }
    return 0;
  }
  uint64_t v13 = *(void *)(v6 + 80) + 24;

  return sub_1CB8BE1E4(v13, 1.0);
}

uint64_t *sub_1CCF4257C(uint64_t *a1, const char *a2, const llvm::APInt *a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int16 *)(a4 + 24) != a2) {
    return 0;
  }
  int v16 = *(uint64_t **)(a4 + 32);
  uint64_t v17 = *(void *)(a4 + 40) + 16 * a5;
  uint64_t v7 = *v16;
  BOOL v18 = (unsigned __int8 *)v16[5];
  uint64_t v19 = *a1;
  uint64_t v20 = (uint64_t)v18;
  uint64_t v52 = v16[1];
  uint64_t v53 = v16[6];
  if (*((_WORD *)v18 + 12) == 216)
  {
    uint64_t v20 = v16[5];
    unint64_t v21 = v16[6];
    do
    {
      uint64_t v22 = *(unsigned int **)(v20 + 32);
      uint64_t v20 = *(void *)v22;
      unint64_t v21 = v21 & 0xFFFFFFFF00000000 | v22[2];
    }
    while (*(_WORD *)(*(void *)v22 + 24) == 216);
  }
  uint64_t v54 = v18;
  int64_t v24 = *(llvm **)v17;
  uint64_t v23 = *(void *)(v17 + 8);
  if (!sub_1CD7F590C(v19, v20)) {
    goto LABEL_8;
  }
  uint64_t v51 = v23;
  uint64_t v25 = a6;
  if (*(_WORD *)(a6 + 24) == 216)
  {
    uint64_t v25 = a6;
    unint64_t v26 = a7;
    do
    {
      uint64_t v27 = *(unsigned int **)(v25 + 32);
      uint64_t v25 = *(void *)v27;
      unint64_t v26 = v26 & 0xFFFFFFFF00000000 | v27[2];
    }
    while (*(_WORD *)(*(void *)v27 + 24) == 216);
  }
  if (sub_1CD7F590C(*a1, v25))
  {
    uint64_t v28 = *a1;
    uint64_t v56 = v54;
    int v57 = v53;
    uint64_t v58 = a6;
    int v59 = a7;
    uint64_t v29 = sub_1CCFDBB80(v28, a2, a3, v24, v23, (uint64_t *)&v56, 2);
    if (!v29) {
      return 0;
    }
    uint64_t v32 = *(void *)(*a1 + 832);
    if (v32) {
      LOWORD(v32) = *(_WORD *)(v32 + 8);
    }
    return sub_1CCFDED5C(*a1, (uint64_t)a2, a3, v24, v23, v7, v52, v31, (uint64_t)v29, v30, v32);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))(*(void *)a1[1] + 1512))(a1[1], *a1, a4, a5, a6, a7))
  {
    uint64_t v35 = *a1;
    uint64_t v36 = *(unsigned __int8 **)(a4 + 64);
    uint64_t v56 = v36;
    if (v36) {
      llvm::MetadataTracking::track((uint64_t)&v56, v36, 2);
    }
    int v57 = *(_DWORD *)(a4 + 60);
    uint64_t v37 = *(void *)(v35 + 832);
    if (v37) {
      LOWORD(v37) = *(_WORD *)(v37 + 8);
    }
    uint64_t v50 = a7;
    uint64_t v38 = v24;
    uint64_t v39 = v51;
    uint64_t v41 = sub_1CCFDED5C(v35, (uint64_t)a2, (const llvm::APInt *)&v56, v24, v51, v7, v52, v34, a6, v50, v37);
    uint64_t v43 = v42;
    uint64_t v44 = (uint64_t)v54;
    if (!v56) {
      goto LABEL_38;
    }
    int v45 = *v56;
    if ((v45 - 4) > 0x1E)
    {
      if ((v45 - 3) >= 0xFFFFFFFE) {
        uint64_t v47 = v56;
      }
      else {
        uint64_t v47 = 0;
      }
      if ((v45 - 3) < 0xFFFFFFFE)
      {
        if (v45 == 3) {
          *((void *)v56 + 1) = 0;
        }
        goto LABEL_38;
      }
      unint64_t v48 = (unint64_t)(v47 + 8);
    }
    else
    {
      if ((v56[1] & 0x7F) != 2 && !*((_DWORD *)v56 + 3)) {
        goto LABEL_38;
      }
      uint64_t v49 = *((void *)v56 + 2);
      if ((v49 & 4) == 0) {
        goto LABEL_38;
      }
      unint64_t v48 = v49 & 0xFFFFFFFFFFFFFFF8;
      if (!v48) {
        goto LABEL_38;
      }
    }
    uint64_t v55 = &v56;
    sub_1CC5FA668(v48 + 16, &v55);
    uint64_t v38 = v24;
    uint64_t v39 = v51;
    uint64_t v44 = (uint64_t)v54;
LABEL_38:
    uint64_t v46 = *(void *)(*a1 + 832);
    if (v46) {
      LOWORD(v46) = *(_WORD *)(v46 + 8);
    }
    return sub_1CCFDED5C(*a1, (uint64_t)a2, a3, v38, v39, (uint64_t)v41, v43, v40, v44, v53, v46);
  }
LABEL_8:
  if ((a2 - 171) > 1)
  {
    if (a2 != 173) {
      return 0;
    }
    if (v7 == a6 && a7 == v52) {
      return (uint64_t *)v54;
    }
    if (v54 != (unsigned __int8 *)a6) {
      return 0;
    }
    goto LABEL_19;
  }
  if (v7 == a6 && a7 == v52) {
    return (uint64_t *)a4;
  }
  if (v54 == (unsigned __int8 *)a6)
  {
    uint64_t v7 = a4;
LABEL_19:
    if (a7 == v53) {
      return (uint64_t *)v7;
    }
  }
  return 0;
}

void sub_1CCF42948()
{
}

void *sub_1CCF4295C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F2641460;
  return result;
}

void sub_1CCF42994(uint64_t a1, void *a2)
{
  *a2 = &unk_1F2641460;
}

uint64_t sub_1CCF429BC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  if (!(*a2 | *a3)) {
    return 1;
  }
  if (v3) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  uint64_t v8 = *(void *)(v3 + 80);
  uint64_t v9 = *(void *)(v4 + 80);
  unsigned int v10 = *(_DWORD *)(v9 + 32);
  unsigned int v17 = v10;
  if (v10 > 0x40) {
    operator new[]();
  }
  if (v10) {
    unint64_t v11 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v10;
  }
  else {
    unint64_t v11 = 0;
  }
  unsigned int __s2 = (void *)(v11 & ~*(void *)(v9 + 24));
  llvm::APInt::operator++((uint64_t)&__s2);
  unsigned int v12 = v17;
  uint64_t v13 = __s2;
  unsigned int v17 = 0;
  uint64_t v14 = *(unsigned int *)(v8 + 32);
  if (v14 > 0x40) {
    BOOL v15 = memcmp(*(const void **)(v8 + 24), __s2, ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8) == 0;
  }
  else {
    BOOL v15 = *(void *)(v8 + 24) == (void)__s2;
  }
  uint64_t v6 = v15;
  if (v12 >= 0x41)
  {
    if (v13)
    {
      MEMORY[0x1D25D9CB0](v13, 0x1000C8000313F17);
      if (v17 >= 0x41)
      {
        if (__s2) {
          MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
        }
      }
    }
  }
  return v6;
}

uint64_t sub_1CCF42B2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v6 = *(unsigned char *)(a1 + 34);
  uint64_t v8 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v15 = v8;
  LOBYTE(v8) = *(unsigned char *)(a1 + 33);
  char v16 = v6;
  char v17 = v8;
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  int v21 = 0;
  unsigned int v12 = 1;
  unint64_t v11 = 0;
  unsigned int v14 = 1;
  uint64_t v13 = 0;
  uint64_t v9 = sub_1CD80E454(v7, a2, a3, a4, &v11, &v15, 0, 0);
  if (v9)
  {
    sub_1CCEF0788(a1, a2);
    sub_1CCEF0AD0((uint64_t *)a1, &v15);
  }
  if (v14 >= 0x41 && v13) {
    MEMORY[0x1D25D9CB0](v13, 0x1000C8000313F17);
  }
  if (v12 >= 0x41 && v11) {
    MEMORY[0x1D25D9CB0](v11, 0x1000C8000313F17);
  }
  return v9;
}

uint64_t *sub_1CCF42C2C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const llvm::APInt *a7)
{
  if (*(_WORD *)(a4 + 24) != 171) {
    return 0;
  }
  if (!sub_1CD802BA8(*(void *)(*(void *)(a4 + 32) + 40), *(void *)(*(void *)(a4 + 32) + 48), 0))return 0; {
  long long v23 = *(_OWORD *)(*(void *)(a2 + 40) + 16 * a3);
  }
  unsigned int v14 = sub_1CD7F2D8C(a6, **(void **)(a4 + 32), *(void *)(*(void *)(a4 + 32) + 8), 0);
  if (sub_1CD3E12F4((unsigned __int8 *)&v23, v15, v16) != (llvm::Type *)v14) {
    return 0;
  }
  if (a1) {
    uint64_t v18 = 57;
  }
  else {
    uint64_t v18 = 56;
  }
  int v19 = *(uint64_t **)(a4 + 32);
  uint64_t v20 = *v19;
  uint64_t v21 = v19[1];
  uint64_t v22 = *(void *)(a6 + 832);
  if (v22) {
    LOWORD(v22) = *(_WORD *)(v22 + 8);
  }
  return sub_1CCFDED5C(a6, v18, a7, (llvm *)v23, *((uint64_t *)&v23 + 1), a2, a3, v17, v20, v21, v22);
}

uint64_t sub_1CCF42D20(unsigned int *a1, uint64_t a2, unint64_t a3)
{
  for (char i = 0; ; char i = 1)
  {
    while (1)
    {
      uint64_t v7 = *(unsigned __int16 *)(a2 + 24);
      if (v7 != 199 && v7 != 201) {
        break;
      }
      uint64_t v8 = *(uint64_t **)(a2 + 32);
      a2 = *v8;
      a3 = a3 & 0xFFFFFFFF00000000 | *((unsigned int *)v8 + 2);
    }
    if (v7 != 171) {
      break;
    }
    uint64_t v9 = *(uint64_t **)(a2 + 32);
    if (!sub_1CD8029CC(v9[5])) {
      break;
    }
    a2 = *v9;
    a3 = a3 & 0xFFFFFFFF00000000 | *((unsigned int *)v9 + 2);
  }
  if (a3 != 1) {
    return 0;
  }
  BOOL v10 = (v7 - 72) > 7 || ((1 << (v7 - 72)) & 0xA3) == 0;
  if (v10) {
    return 0;
  }
  unint64_t v11 = *(void **)(a2 + 40);
  uint64_t v12 = *v11;
  if (!*v11) {
    return 0;
  }
  if (v12 != 1 && !*(void *)&a1[2 * v12 + 24]) {
    return 0;
  }
  char v13 = *((unsigned char *)a1 + 390 * *v11 + v7 + 3862);
  BOOL v10 = (v13 & 0xFB) == 0;
  char v14 = i | ((v13 & 0xFB) != 0);
  if (v10) {
    uint64_t result = a2;
  }
  else {
    uint64_t result = 0;
  }
  if ((v14 & 1) == 0)
  {
    if (sub_1CD7879C8(a1, v11[2], v11[3]) == 1) {
      return a2;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1CCF42E60(const llvm::APInt *a1, uint64_t a2, llvm *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t result = (uint64_t *)a3;
  if ((_BYTE)a3)
  {
    if (a3 - 15 >= 0x9C) {
      return sub_1CD7EBF14(a5, 0, a1, a3, a4, 0, 0);
    }
  }
  else if ((*(_DWORD *)(a4 + 8) & 0xFE) != 0x12)
  {
    return sub_1CD7EBF14(a5, 0, a1, a3, a4, 0, 0);
  }
  if (!a6) {
    return sub_1CD7EBF14(a5, 0, a1, a3, a4, 0, 0);
  }
  if ((_BYTE)a3)
  {
    if (a3 == 1 || (uint64_t result = 0, (_BYTE)a3) && *(void *)(a2 + 8 * a3 + 96))
    {
      if (*(unsigned char *)(a2 + 390 * a3 + 4008)) {
        return 0;
      }
      return sub_1CD7EBF14(a5, 0, a1, a3, a4, 0, 0);
    }
  }
  return result;
}

uint64_t *sub_1CCF42F18(uint64_t a1, llvm *a2, uint64_t a3, uint64_t a4)
{
  if (*(_WORD *)(a4 + 24) != 57) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 33))
  {
LABEL_7:
    BOOL v10 = *(uint64_t **)(a4 + 32);
    uint64_t v9 = *(llvm ***)(a4 + 40);
    uint64_t v12 = *v9;
    uint64_t v11 = (uint64_t)v9[1];
    uint64_t v14 = *v10;
    uint64_t v13 = v10[1];
    uint64_t v15 = v10[5];
    uint64_t v16 = v10[6];
    if (*(_WORD *)(*v10 + 24) == 170)
    {
      uint64_t v17 = *(void *)(v14 + 48);
      if (v17)
      {
        int v18 = 1;
        do
        {
          if (*(_DWORD *)(v17 + 8) == v13)
          {
            if (!v18) {
              goto LABEL_15;
            }
            --v18;
          }
          uint64_t v17 = *(void *)(v17 + 32);
        }
        while (v17);
        if (!v18)
        {
          uint64_t v49 = *(uint64_t **)(v14 + 32);
          uint64_t v50 = *v49;
          uint64_t v34 = v49[1];
          uint64_t v33 = v49[5];
          uint64_t v51 = v49[6];
          if (*v49 == v15 && v34 == v16)
          {
            int v57 = *(llvm::APFloatBase **)a1;
            uint64_t v58 = *(unsigned __int8 **)(a4 + 64);
            uint64_t v78 = v58;
            if (v58)
            {
              uint64_t v59 = v51;
              uint64_t v60 = v33;
              llvm::MetadataTracking::track((uint64_t)&v78, v58, 2);
              uint64_t v33 = v60;
              uint64_t v51 = v59;
            }
            int v79 = *(_DWORD *)(a4 + 60);
            unint64_t v77 = v57;
            uint64_t v29 = a2;
            uint64_t v30 = a3;
            uint64_t v31 = v12;
            uint64_t v32 = v11;
            uint64_t v34 = v51;
            goto LABEL_66;
          }
          if (v33 == v15 && v51 == v16)
          {
            uint64_t v54 = *(llvm::APFloatBase **)a1;
            uint64_t v55 = *(unsigned __int8 **)(a4 + 64);
            uint64_t v78 = v55;
            if (v55)
            {
              uint64_t v56 = v34;
              llvm::MetadataTracking::track((uint64_t)&v78, v55, 2);
              uint64_t v34 = v56;
            }
            int v79 = *(_DWORD *)(a4 + 60);
            unint64_t v77 = v54;
            uint64_t v29 = a2;
            uint64_t v30 = a3;
            uint64_t v31 = v12;
            uint64_t v32 = v11;
            uint64_t v33 = v50;
            goto LABEL_66;
          }
        }
      }
    }
LABEL_15:
    int v19 = *(unsigned __int16 *)(v15 + 24);
    if (v19 != 201)
    {
      if (v19 != 169) {
        return 0;
      }
      uint64_t v20 = *(void *)(v15 + 48);
      if (!v20) {
        return 0;
      }
      int v21 = 1;
      do
      {
        if (*(_DWORD *)(v20 + 8) == v16)
        {
          if (!v21) {
            return 0;
          }
          --v21;
        }
        uint64_t v20 = *(void *)(v20 + 32);
      }
      while (v20);
      if (v21) {
        return 0;
      }
      uint64_t v22 = *(uint64_t **)(v15 + 32);
      uint64_t v15 = *v22;
      uint64_t v16 = v22[1];
      uint64_t v24 = v22[5];
      uint64_t v23 = v22[6];
      if (*v22 == v14 && v16 == v13)
      {
        uint64_t v62 = *(llvm::APFloatBase **)a1;
        int v63 = *(unsigned __int8 **)(a4 + 64);
        uint64_t v78 = v63;
        if (v63)
        {
          uint64_t v64 = v23;
          llvm::MetadataTracking::track((uint64_t)&v78, v63, 2);
          uint64_t v23 = v64;
        }
        int v79 = *(_DWORD *)(a4 + 60);
        unint64_t v77 = v62;
        uint64_t v29 = a2;
        uint64_t v30 = a3;
        uint64_t v31 = v12;
        uint64_t v32 = v11;
        uint64_t v33 = v14;
        uint64_t v34 = v13;
        uint64_t v61 = v24;
        goto LABEL_70;
      }
      if (v24 != v14 || v23 != v13) {
        return 0;
      }
      uint64_t v27 = *(llvm::APFloatBase **)a1;
      uint64_t v28 = *(unsigned __int8 **)(a4 + 64);
      uint64_t v78 = v28;
      if (v28) {
        llvm::MetadataTracking::track((uint64_t)&v78, v28, 2);
      }
      int v79 = *(_DWORD *)(a4 + 60);
      unint64_t v77 = v27;
      uint64_t v29 = a2;
      uint64_t v30 = a3;
      uint64_t v31 = v12;
      uint64_t v32 = v11;
      uint64_t v33 = v14;
      uint64_t v34 = v13;
LABEL_66:
      uint64_t v61 = v15;
      uint64_t v23 = v16;
LABEL_70:
      int v65 = sub_1CCF433CC(v29, v30, v31, v32, v33, v34, v61, v23, v77, (const llvm::APInt *)&v78);
      goto LABEL_71;
    }
    uint64_t v35 = *(_DWORD **)(v15 + 32);
    uint64_t v36 = *(void *)v35;
    if (*(_WORD *)(*(void *)v35 + 24) != 169) {
      return 0;
    }
    uint64_t v37 = *(void *)(v36 + 48);
    if (!v37) {
      return 0;
    }
    int v38 = v35[2];
    int v39 = 1;
    do
    {
      if (*(_DWORD *)(v37 + 8) == v38)
      {
        if (!v39) {
          return 0;
        }
        --v39;
      }
      uint64_t v37 = *(void *)(v37 + 32);
    }
    while (v37);
    if (v39) {
      return 0;
    }
    uint64_t v40 = *(uint64_t **)(v36 + 32);
    uint64_t v41 = *v40;
    uint64_t v42 = v40[1];
    uint64_t v15 = v40[5];
    uint64_t v16 = v40[6];
    if (*(_WORD *)(*v40 + 24) == 199)
    {
      uint64_t v43 = *(void *)(v41 + 32);
      if (*(void *)v43 == v14 && *(_DWORD *)(v43 + 8) == v13)
      {
        uint64_t v44 = (llvm **)(*(void *)(v41 + 40) + 16 * v42);
        int v45 = *v44;
        uint64_t v46 = (uint64_t)v44[1];
        uint64_t v47 = *(llvm::APFloatBase **)a1;
        unint64_t v48 = *(unsigned __int8 **)(a4 + 64);
        uint64_t v78 = v48;
        if (v48) {
          llvm::MetadataTracking::track((uint64_t)&v78, v48, 2);
        }
        int v79 = *(_DWORD *)(a4 + 60);
        unint64_t v77 = v47;
        uint64_t v29 = a2;
        uint64_t v30 = a3;
        uint64_t v31 = v45;
        uint64_t v32 = v46;
        uint64_t v33 = v41;
        uint64_t v34 = v42;
        goto LABEL_66;
      }
    }
    if (*(_WORD *)(v15 + 24) == 199)
    {
      uint64_t v69 = *(void *)(v15 + 32);
      if (*(void *)v69 == v14 && *(_DWORD *)(v69 + 8) == v13)
      {
        uint64_t v70 = *(void *)(v41 + 40) + 16 * v42;
        BOOL v71 = *(llvm **)v70;
        uint64_t v72 = *(void *)(v70 + 8);
        unsigned int v73 = *(llvm::APFloatBase **)a1;
        int v74 = *(unsigned __int8 **)(a4 + 64);
        uint64_t v78 = v74;
        if (v74) {
          llvm::MetadataTracking::track((uint64_t)&v78, v74, 2);
        }
        int v79 = *(_DWORD *)(a4 + 60);
        int v65 = sub_1CCF433CC(a2, a3, v71, v72, v15, v16, v41, v42, v73, (const llvm::APInt *)&v78);
LABEL_71:
        uint64_t v8 = v65;
        if (v78)
        {
          int v66 = *v78;
          if ((v66 - 4) > 0x1E)
          {
            if ((v66 - 3) >= 0xFFFFFFFE) {
              uint64_t v76 = v78;
            }
            else {
              uint64_t v76 = 0;
            }
            if ((v66 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v68 = (unint64_t)(v76 + 8);
LABEL_91:
              uint64_t v80 = &v78;
              sub_1CC5FA668(v68 + 16, &v80);
              return v8;
            }
            if (v66 == 3) {
              *((void *)v78 + 1) = 0;
            }
          }
          else if ((v78[1] & 0x7F) == 2 || *((_DWORD *)v78 + 3))
          {
            uint64_t v67 = *((void *)v78 + 2);
            if ((v67 & 4) != 0)
            {
              unint64_t v68 = v67 & 0xFFFFFFFFFFFFFFF8;
              if (v68) {
                goto LABEL_91;
              }
            }
          }
        }
        return v8;
      }
    }
    return 0;
  }
  if (!(_BYTE)a2) {
    return (uint64_t *)a2;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if (a2 == 1 || (uint64_t v8 = 0, *(void *)(v7 + 8 * a2 + 96)))
  {
    if (*(unsigned char *)(v7 + 390 * a2 + 3947)) {
      return 0;
    }
    goto LABEL_7;
  }
  return v8;
}

uint64_t *sub_1CCF433CC(llvm *a1, uint64_t a2, llvm *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, llvm::APFloatBase *a9, const llvm::APInt *a10)
{
  uint64_t v53 = a1;
  uint64_t v54 = a2;
  uint64_t v51 = a3;
  uint64_t v52 = a4;
  if (a1 == a3 && ((_BYTE)a1 || a2 == a4))
  {
    uint64_t v14 = *((void *)a9 + 104);
    if (v14) {
      LOWORD(v14) = *(_WORD *)(v14 + 8);
    }
    return sub_1CCFDED5C((uint64_t)a9, 85, a10, a1, a2, a5, a6, a8, a7, a8, v14);
  }
  else
  {
    unsigned int v17 = sub_1CD3E12F4((unsigned __int8 *)&v51, a2, (BOOL)a3);
    unsigned int v20 = sub_1CD3E12F4((unsigned __int8 *)&v53, v18, v19);
    unsigned int v50 = v17;
    if (v17 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v49);
    }
    uint64_t v49 = 0;
    if (v17 != v20)
    {
      if (v20 > 0x3F) {
        llvm::APInt::setBitsSlowCase(&v49, v20, v17);
      }
      else {
        v49 |= 0xFFFFFFFFFFFFFFFFLL >> (v20 - v17) << v20;
      }
    }
    if (sub_1CD7F11AC((uint64_t)a9, a5, a6, (uint64_t)&v49, 0))
    {
      unsigned int v23 = sub_1CD3E12F4((unsigned __int8 *)&v51, v21, v22);
      unsigned int v26 = sub_1CD3E12F4((unsigned __int8 *)&v53, v24, v25);
      unsigned int v48 = v23;
      if (v23 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v47);
      }
      unint64_t v47 = 0;
      if (v26)
      {
        if (v26 > 0x40)
        {
          llvm::APInt::setBitsSlowCase(&v47, 0, v26);
        }
        else
        {
          unint64_t v27 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v26;
          if (v48 > 0x40) {
            *(void *)v47 |= v27;
          }
          else {
            v47 |= v27;
          }
        }
      }
      uint64_t v29 = sub_1CD7EBB14((uint64_t)a9, (llvm::LLVMContext *)&v47, a10, (uint64_t)v51, v52, 0, 0);
      uint64_t v31 = v30;
      if (v48 >= 0x41 && v47) {
        MEMORY[0x1D25D9CB0](v47, 0x1000C8000313F17);
      }
      unint64_t v32 = a8 & 0xFFFFFFFF00000000;
      uint64_t v33 = *((void *)a9 + 104);
      if (v33) {
        LOWORD(v33) = *(_WORD *)(v33 + 8);
      }
      uint64_t v35 = sub_1CCFDED5C((uint64_t)a9, 169, a10, v51, v52, a7, a8, v28, v29, v31, v33);
      uint64_t v36 = *((void *)a9 + 104);
      if (v36) {
        __int16 v37 = *(_WORD *)(v36 + 8);
      }
      else {
        __int16 v37 = 0;
      }
      int v38 = sub_1CD7F3564(a9, (const char *)0xC9, (uint64_t)a10, v53, v54, (uint64_t)v35, (void *)(v34 | v32), v37);
      unsigned int v40 = v39;
      uint64_t v41 = *((void *)a9 + 104);
      if (v41) {
        __int16 v42 = *(_WORD *)(v41 + 8);
      }
      else {
        __int16 v42 = 0;
      }
      uint64_t v44 = sub_1CD7F3564(a9, (const char *)0xC9, (uint64_t)a10, v53, v54, a5, (void *)a6, v42);
      uint64_t v46 = *((void *)a9 + 104);
      if (v46) {
        LOWORD(v46) = *(_WORD *)(v46 + 8);
      }
      uint64_t v15 = sub_1CCFDED5C((uint64_t)a9, 85, a10, v53, v54, (uint64_t)v44, v43 | a6 & 0xFFFFFFFF00000000, v45, (uint64_t)v38, v40 | v32, v46);
    }
    else
    {
      uint64_t v15 = 0;
    }
    if (v50 >= 0x41 && v49) {
      MEMORY[0x1D25D9CB0](v49, 0x1000C8000313F17);
    }
  }
  return v15;
}

uint64_t *sub_1CCF43738(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v12 = *(void *)(a2 + 40) + 16 * a3;
  uint64_t v14 = *(llvm **)v12;
  uint64_t v13 = *(void *)(v12 + 8);
  uint64_t v15 = *(void *)v12;
  if (*(void *)v12)
  {
    if ((v15 - 15) < 0x9C) {
      return 0;
    }
  }
  else if ((*(_DWORD *)(v13 + 8) & 0xFE) == 0x12)
  {
    return 0;
  }
  if (*(_WORD *)(a4 + 24) != 72) {
    goto LABEL_6;
  }
  BOOL v22 = *(uint64_t **)(a4 + 32);
  if (!sub_1CD7F2D2C(v22[5])) {
    goto LABEL_6;
  }
  uint64_t v23 = *v22;
  uint64_t v24 = v22[1];
  uint64_t v25 = *a1;
  unsigned int v26 = *(unsigned __int8 **)(a6 + 64);
  uint64_t v64 = v26;
  BOOL v60 = v24;
  if (v26)
  {
    uint64_t v58 = v25;
    uint64_t v27 = v23;
    llvm::MetadataTracking::track((uint64_t)&v64, v26, 2);
    uint64_t v25 = v58;
    LODWORD(v24) = v60;
    uint64_t v23 = v27;
  }
  int v65 = *(_DWORD *)(a6 + 60);
  uint64_t v59 = v23;
  uint64_t v28 = *(void *)(v23 + 40) + 16 * v24;
  uint64_t v30 = sub_1CD7EBF14(v25, 1, (const llvm::APInt *)&v64, *(llvm **)v28, *(void *)(v28 + 8), 0, 0);
  BOOL v31 = v29;
  if (v64)
  {
    int v32 = *v64;
    if ((v32 - 4) > 0x1E)
    {
      if ((v32 - 3) >= 0xFFFFFFFE) {
        uint64_t v53 = v64;
      }
      else {
        uint64_t v53 = 0;
      }
      if ((v32 - 3) >= 0xFFFFFFFE)
      {
        BOOL v57 = v29;
        unint64_t v54 = (unint64_t)(v53 + 8);
LABEL_66:
        uint64_t v62 = (unsigned __int8 *)&v64;
        sub_1CC5FA668(v54 + 16, &v62);
        BOOL v31 = v57;
        goto LABEL_26;
      }
      if (v32 == 3) {
        *((void *)v64 + 1) = 0;
      }
    }
    else if ((v64[1] & 0x7F) == 2 || *((_DWORD *)v64 + 3))
    {
      uint64_t v56 = *((void *)v64 + 2);
      if ((v56 & 4) != 0)
      {
        unint64_t v54 = v56 & 0xFFFFFFFFFFFFFFF8;
        if (v54)
        {
          BOOL v57 = v29;
          goto LABEL_66;
        }
      }
    }
  }
LABEL_26:
  if (!sub_1CD7F28F4(*a1, v59, v60, (uint64_t)v30, v31))
  {
    unsigned int v34 = (void *)*a1;
    uint64_t v35 = *(unsigned __int8 **)(a6 + 64);
    uint64_t v64 = v35;
    if (v35) {
      llvm::MetadataTracking::track((uint64_t)&v64, v35, 2);
    }
    int v65 = *(_DWORD *)(a6 + 60);
    unsigned int v17 = sub_1CD7FFB94(v34, (const char *)0x48, (const llvm::APInt *)&v64, *(void *)(a6 + 40), *(unsigned __int16 *)(a6 + 58), a2, a3, v33, v59, v60, *(void *)(*(void *)(a4 + 32) + 80), *(void *)(*(void *)(a4 + 32) + 88));
    goto LABEL_38;
  }
LABEL_6:
  if (!v15) {
    return (uint64_t *)v15;
  }
  uint64_t v16 = (unsigned int *)a1[1];
  if (v15 == 1)
  {
    if (!(_BYTE)v14) {
      return 0;
    }
  }
  else
  {
    if ((_BYTE)v14) {
      BOOL v18 = *(void *)&v16[2 * v14 + 24] == 0;
    }
    else {
      BOOL v18 = 1;
    }
    if (v18) {
      return 0;
    }
  }
  if ((*((unsigned __int8 *)v16 + 390 * v14 + 3934) | 4) != 4) {
    return 0;
  }
  uint64_t v19 = sub_1CCF42D20(v16, a4, a5);
  if (!v19) {
    return 0;
  }
  uint64_t v36 = v19;
  int v37 = v20;
  uint64_t v38 = *a1;
  unsigned int v39 = *(unsigned __int8 **)(a6 + 64);
  uint64_t v64 = v39;
  uint64_t v61 = (void *)v38;
  if (v39)
  {
    llvm::MetadataTracking::track((uint64_t)&v64, v39, 2);
    uint64_t v38 = *a1;
    unsigned int v39 = *(unsigned __int8 **)(a6 + 64);
  }
  int v40 = *(_DWORD *)(a6 + 60);
  int v65 = v40;
  uint64_t v41 = *(void *)(a6 + 40);
  uint64_t v42 = *(unsigned __int16 *)(a6 + 58);
  uint64_t v62 = v39;
  if (v39)
  {
    llvm::MetadataTracking::track((uint64_t)&v62, v39, 2);
    int v40 = *(_DWORD *)(a6 + 60);
  }
  int v63 = v40;
  unsigned int v43 = sub_1CD7EBF14(v38, 0, (const llvm::APInt *)&v62, v14, v13, 0, 0);
  unsigned int v17 = sub_1CD7FFB94(v61, (const char *)0x48, (const llvm::APInt *)&v64, v41, v42, a2, a3, v45, (uint64_t)v43, v44, v36, v37);
  if (v62)
  {
    int v46 = *v62;
    if ((v46 - 4) <= 0x1E)
    {
      if ((v62[1] & 0x7F) != 2 && !*((_DWORD *)v62 + 3)) {
        goto LABEL_38;
      }
      uint64_t v55 = *((void *)v62 + 2);
      if ((v55 & 4) == 0) {
        goto LABEL_38;
      }
      unint64_t v52 = v55 & 0xFFFFFFFFFFFFFFF8;
      if (!v52) {
        goto LABEL_38;
      }
LABEL_56:
      int v66 = &v62;
      sub_1CC5FA668(v52 + 16, &v66);
      goto LABEL_38;
    }
    if ((v46 - 3) >= 0xFFFFFFFE) {
      uint64_t v51 = v62;
    }
    else {
      uint64_t v51 = 0;
    }
    if ((v46 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v52 = (unint64_t)(v51 + 8);
      goto LABEL_56;
    }
    if (v46 == 3) {
      *((void *)v62 + 1) = 0;
    }
  }
LABEL_38:
  if (!v64) {
    return v17;
  }
  int v47 = *v64;
  if ((v47 - 4) > 0x1E)
  {
    if ((v47 - 3) >= 0xFFFFFFFE) {
      unsigned int v50 = v64;
    }
    else {
      unsigned int v50 = 0;
    }
    if ((v47 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v49 = (unint64_t)(v50 + 8);
LABEL_50:
      uint64_t v62 = (unsigned __int8 *)&v64;
      sub_1CC5FA668(v49 + 16, &v62);
      return v17;
    }
    if (v47 == 3) {
      *((void *)v64 + 1) = 0;
    }
  }
  else if ((v64[1] & 0x7F) == 2 || *((_DWORD *)v64 + 3))
  {
    uint64_t v48 = *((void *)v64 + 2);
    if ((v48 & 4) != 0)
    {
      unint64_t v49 = v48 & 0xFFFFFFFFFFFFFFF8;
      if (v49) {
        goto LABEL_50;
      }
    }
  }
  return v17;
}

uint64_t *sub_1CCF43B6C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  if (!sub_1CD802AAC(a2, a3, 0) || (uint64_t v16 = sub_1CCF43F00(a6, a7, *a1, (unsigned int *)a1[1], 1)) == 0)
  {
    int v19 = *(unsigned __int16 *)(a2 + 24);
    if (v19 == 77)
    {
      if (a3 || a2 == a6 && a7 == 1) {
        goto LABEL_21;
      }
    }
    else if (v19 != 56)
    {
      goto LABEL_21;
    }
    if (sub_1CD7F2D2C(a4))
    {
      uint64_t v21 = *(void *)(a8 + 48);
      if (v21)
      {
        while (*(_DWORD *)(v21 + 8) != 1)
        {
          uint64_t v21 = *(void *)(v21 + 32);
          if (!v21) {
            goto LABEL_9;
          }
        }
        goto LABEL_21;
      }
LABEL_9:
      BOOL v22 = (void *)*a1;
      uint64_t v23 = *(unsigned __int8 **)(a8 + 64);
      uint64_t v51 = v23;
      if (v23) {
        llvm::MetadataTracking::track((uint64_t)&v51, v23, 2);
      }
      int v52 = *(_DWORD *)(a8 + 60);
      uint64_t v24 = (uint64_t)sub_1CD7FFB94(v22, (const char *)0x48, (const llvm::APInt *)&v51, *(void *)(a8 + 40), *(unsigned __int16 *)(a8 + 58), **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), v20, *(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48), a6, a7);
      uint64_t v25 = (uint64_t)v51;
      if (v51)
      {
        int v26 = *v51;
        if ((v26 - 4) <= 0x1E)
        {
          if ((v51[1] & 0x7F) != 2 && !*((_DWORD *)v51 + 3)) {
            return (uint64_t *)v24;
          }
          uint64_t v27 = *((void *)v51 + 2);
          if ((v27 & 4) == 0) {
            return (uint64_t *)v24;
          }
          unint64_t v28 = v27 & 0xFFFFFFFFFFFFFFF8;
          if (!v28) {
            return (uint64_t *)v24;
          }
          goto LABEL_48;
        }
        if ((v26 - 3) >= 0xFFFFFFFE) {
          uint64_t v48 = (uint64_t)v51;
        }
        else {
          uint64_t v48 = 0;
        }
        if ((v26 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v28 = v48 + 8;
LABEL_48:
          unint64_t v49 = (unsigned __int8 *)&v51;
          uint64_t v46 = v28 + 16;
          int v47 = (uint64_t *)&v49;
          goto LABEL_42;
        }
        goto LABEL_49;
      }
      return (uint64_t *)v24;
    }
LABEL_21:
    uint64_t v29 = sub_1CCF42D20((unsigned int *)a1[1], a4, a5);
    if (v29
      && ((uint64_t v31 = v29, v32 = v30, (v33 = sub_1CCF44224((void **)a1, *a1, a2, a3, v29, v30, a6, a7, a8)) != 0)
       || (uint64_t v33 = sub_1CCF44224((void **)a1, *a1, a2, a3, a6, a7, v31, v32, a8)) != 0))
    {
      return v33;
    }
    else
    {
      return 0;
    }
  }
  uint64_t v35 = (uint64_t)v16;
  int v36 = v17;
  int v37 = *(unsigned __int8 **)(a8 + 64);
  unint64_t v49 = v37;
  if (v37) {
    llvm::MetadataTracking::track((uint64_t)&v49, v37, 2);
  }
  int v50 = *(_DWORD *)(a8 + 60);
  uint64_t v38 = sub_1CD7FFB94((void *)*a1, (const char *)0x49, (const llvm::APInt *)&v49, *(void *)(a8 + 40), *(unsigned __int16 *)(a8 + 58), a4, a5, v18, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), v35, v36);
  int v40 = v39;
  uint64_t v41 = sub_1CD7EBC20(*a1, (const llvm::APInt *)&v49, (uint64_t)v38, 1, *(llvm **)(v38[5] + 16), *(void *)(v38[5] + 24));
  uint64_t v51 = (unsigned __int8 *)v38;
  int v52 = v40;
  uint64_t v53 = v41;
  int v54 = v42;
  uint64_t v24 = sub_1CCEF083C(a1, a8, (uint64_t *)&v51, 2, 1);
  uint64_t v25 = (uint64_t)v49;
  if (v49)
  {
    int v26 = *v49;
    if ((v26 - 4) > 0x1E)
    {
      if ((v26 - 3) >= 0xFFFFFFFE) {
        uint64_t v45 = v49;
      }
      else {
        uint64_t v45 = 0;
      }
      if ((v26 - 3) < 0xFFFFFFFE)
      {
LABEL_49:
        if (v26 == 3) {
          *(void *)(v25 + 8) = 0;
        }
        return (uint64_t *)v24;
      }
      unint64_t v44 = (unint64_t)(v45 + 8);
    }
    else
    {
      if ((v49[1] & 0x7F) != 2 && !*((_DWORD *)v49 + 3)) {
        return (uint64_t *)v24;
      }
      uint64_t v43 = *((void *)v49 + 2);
      if ((v43 & 4) == 0) {
        return (uint64_t *)v24;
      }
      unint64_t v44 = v43 & 0xFFFFFFFFFFFFFFF8;
      if (!v44) {
        return (uint64_t *)v24;
      }
    }
    uint64_t v51 = (unsigned __int8 *)&v49;
    uint64_t v46 = v44 + 16;
    int v47 = (uint64_t *)&v51;
LABEL_42:
    sub_1CC5FA668(v46, v47);
  }
  return (uint64_t *)v24;
}

uint64_t *sub_1CCF43F00(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, int a5)
{
  int v10 = *(unsigned __int16 *)(a1 + 24);
  if (!a5)
  {
    if (v10 != 173) {
      return 0;
    }
LABEL_18:
    uint64_t v18 = sub_1CCFD8CD8(*(void *)(*(void *)(a1 + 32) + 40), *(void *)(*(void *)(a1 + 32) + 48), 0, 0);
    if (!v18) {
      return 0;
    }
    uint64_t v20 = v18;
    uint64_t v21 = (void *)(*(void *)(a1 + 40) + 16 * a2);
    int v22 = sub_1CD7879C8(a4, *v21, v21[1]);
    if (v22)
    {
      if (v22 == 2)
      {
        uint64_t v26 = *(void *)(v20 + 80);
        unsigned int v27 = *(_DWORD *)(v26 + 32);
        if (!v27) {
          return **(uint64_t ***)(a1 + 32);
        }
        unint64_t v28 = (llvm::APInt *)(v26 + 24);
        if (v27 > 0x40)
        {
          if (llvm::APInt::countTrailingOnesSlowCase(v28) != v27) {
            goto LABEL_52;
          }
          return **(uint64_t ***)(a1 + 32);
        }
        if (*(void *)v28 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v27) {
          return **(uint64_t ***)(a1 + 32);
        }
      }
      else
      {
        if (v22 != 1) {
          goto LABEL_52;
        }
        uint64_t v23 = *(void *)(v20 + 80);
        uint64_t v24 = *(unsigned int *)(v23 + 32);
        if (v24 <= 0x40)
        {
          if (*(void *)(v23 + 24) != 1) {
            goto LABEL_52;
          }
          return **(uint64_t ***)(a1 + 32);
        }
        int v30 = 0;
        int64_t v31 = (unint64_t)(v24 + 63) >> 6;
        do
        {
          if (v31-- < 1) {
            break;
          }
          unint64_t v33 = *(void *)(*(void *)(v23 + 24) + 8 * v31);
          v30 += __clz(v33);
        }
        while (!v33);
        int v34 = v24 | 0xFFFFFFC0;
        if ((v24 & 0x3F) == 0) {
          int v34 = 0;
        }
        if (v30 + v34 == v24 - 1) {
          return **(uint64_t ***)(a1 + 32);
        }
      }
    }
    else
    {
      uint64_t v25 = *(void *)(v20 + 80);
      if (*(_DWORD *)(v25 + 32) >= 0x41u) {
        operator new[]();
      }
      if (*(unsigned char *)(v25 + 24)) {
        return **(uint64_t ***)(a1 + 32);
      }
    }
LABEL_52:
    if (a5) {
      goto LABEL_8;
    }
    return 0;
  }
  if (v10 == 173) {
    goto LABEL_18;
  }
  if (v10 != 35 && v10 != 11) {
    return 0;
  }
LABEL_8:
  uint64_t v12 = *(unsigned __int8 **)(a1 + 64);
  uint64_t v35 = v12;
  if (v12) {
    llvm::MetadataTracking::track((uint64_t)&v35, v12, 2);
  }
  int v36 = *(_DWORD *)(a1 + 60);
  uint64_t v13 = *(void *)(a1 + 40) + 16 * a2;
  uint64_t v14 = sub_1CD7EBC20(a3, (const llvm::APInt *)&v35, a1, a2, *(llvm **)v13, *(void *)(v13 + 8));
  if (v35)
  {
    int v15 = *v35;
    if ((v15 - 4) > 0x1E)
    {
      if ((v15 - 3) >= 0xFFFFFFFE) {
        uint64_t v29 = v35;
      }
      else {
        uint64_t v29 = 0;
      }
      if ((v15 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v17 = (unint64_t)(v29 + 8);
LABEL_39:
        int v37 = &v35;
        sub_1CC5FA668(v17 + 16, &v37);
        return v14;
      }
      if (v15 == 3) {
        *((void *)v35 + 1) = 0;
      }
    }
    else if ((v35[1] & 0x7F) == 2 || *((_DWORD *)v35 + 3))
    {
      uint64_t v16 = *((void *)v35 + 2);
      if ((v16 & 4) != 0)
      {
        unint64_t v17 = v16 & 0xFFFFFFFFFFFFFFF8;
        if (v17) {
          goto LABEL_39;
        }
      }
    }
  }
  return v14;
}

uint64_t *sub_1CCF44224(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  v44[0] = a3;
  v44[1] = a4;
  v43[0] = a5;
  v43[1] = a6;
  if (a8 != 1) {
    return 0;
  }
  uint64_t result = 0;
  if (a6 == 1)
  {
    if (*(_WORD *)(a7 + 24) != 77) {
      return 0;
    }
    int v14 = *(unsigned __int16 *)(a5 + 24);
    if (v14 != 77)
    {
      if (v14 != 72) {
        return 0;
      }
      uint64_t v25 = *(void *)(a5 + 32);
      if (!sub_1CD7F2D2C(*(void *)(v25 + 40))) {
        return 0;
      }
      uint64_t v41 = *(uint64_t **)(v25 + 80);
      int v42 = *(_DWORD *)(v25 + 88);
      goto LABEL_19;
    }
    if (!sub_1CD8029CC(*(void *)(*(void *)(a5 + 32) + 40))) {
      return 0;
    }
    int v15 = (llvm *)(*(uint64_t (**)(void *, uint64_t, void, void, void))(*a1[1] + 400))(a1[1], *(void *)(*(void *)(*a1)[5] + 40) + 272, (*a1)[7], *(void *)(*(void *)(a5 + 40) + 16), *(void *)(*(void *)(a5 + 40) + 24));
    uint64_t v17 = v16;
    uint64_t v18 = *(void *)(*(void *)(a5 + 32) + 40);
    int v19 = *(uint64_t **)(v18 + 64);
    uint64_t v35 = v19;
    if (v19) {
      llvm::MetadataTracking::track((uint64_t)&v35, (unsigned __int8 *)v19, 2);
    }
    LODWORD(v36) = *(_DWORD *)(v18 + 60);
    uint64_t v41 = sub_1CD7EBF14(a2, 1, (const llvm::APInt *)&v35, v15, v17, 0, 0);
    int v42 = v23;
    if (v35)
    {
      int v24 = *(unsigned __int8 *)v35;
      if ((v24 - 4) > 0x1E)
      {
        if ((v24 - 3) >= 0xFFFFFFFE) {
          int v32 = v35;
        }
        else {
          int v32 = 0;
        }
        if ((v24 - 3) < 0xFFFFFFFE)
        {
          if (v24 == 3) {
            v35[1] = 0;
          }
          goto LABEL_16;
        }
        unint64_t v33 = (unint64_t)(v32 + 1);
      }
      else
      {
        if ((*((unsigned char *)v35 + 1) & 0x7F) != 2 && !*((_DWORD *)v35 + 3)) {
          goto LABEL_16;
        }
        uint64_t v34 = v35[2];
        if ((v34 & 4) == 0) {
          goto LABEL_16;
        }
        unint64_t v33 = v34 & 0xFFFFFFFFFFFFFFF8;
        if (!v33) {
          goto LABEL_16;
        }
      }
      uint64_t v45 = &v35;
      sub_1CC5FA668(v33 + 16, &v45);
    }
LABEL_16:
    uint64_t v25 = *(void *)(a5 + 32);
LABEL_19:
    uint64_t v35 = &a9;
    uint64_t v36 = a2;
    int v37 = v43;
    uint64_t v38 = &v41;
    int v39 = a1;
    int v40 = v44;
    if (*(void *)v25 == a7 && !*(_DWORD *)(v25 + 8))
    {
      int64_t v31 = *(uint64_t **)(a7 + 32);
      uint64_t v27 = *v31;
      uint64_t v28 = v31[1];
      uint64_t v30 = v31[5];
      uint64_t v29 = v31[6];
      return sub_1CCF444BC(&v35, v27, v28, v30, v29, v20, v21, v22);
    }
    uint64_t v26 = *(uint64_t **)(a7 + 32);
    uint64_t v27 = *v26;
    if (*v26 == a5 && !*((_DWORD *)v26 + 2))
    {
      uint64_t v28 = *(void *)(v25 + 8);
      uint64_t v30 = v26[5];
      uint64_t v29 = v26[6];
      uint64_t v27 = *(void *)v25;
      return sub_1CCF444BC(&v35, v27, v28, v30, v29, v20, v21, v22);
    }
    if (v26[5] == a5 && !*((_DWORD *)v26 + 12))
    {
      uint64_t v28 = v26[1];
      uint64_t v29 = *(void *)(v25 + 8);
      uint64_t v30 = *(void *)v25;
      return sub_1CCF444BC(&v35, v27, v28, v30, v29, v20, v21, v22);
    }
    return 0;
  }
  return result;
}

uint64_t *sub_1CCF444BC(uint64_t **a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = **a1;
  int v14 = *(unsigned __int8 **)(v13 + 64);
  unint64_t v33 = v14;
  if (v14) {
    llvm::MetadataTracking::track((uint64_t)&v33, v14, 2);
  }
  int v34 = *(_DWORD *)(v13 + 60);
  int v15 = sub_1CD7FFB94(a1[1], (const char *)0x48, (const llvm::APInt *)&v33, *(void *)(*a1[2] + 40), *(unsigned __int16 *)(*a1[2] + 58), a2, a3, a8, a4, a5, *a1[3], a1[3][1]);
  sub_1CCEF0788((uint64_t)a1[4], (uint64_t)v15);
  uint64_t v16 = a1[1];
  uint64_t v17 = **a1;
  uint64_t v18 = *(void *)(v17 + 40);
  uint64_t v19 = *(unsigned __int16 *)(v17 + 58);
  uint64_t v20 = a1[5];
  uint64_t v21 = *v20;
  uint64_t v22 = v20[1];
  uint64_t v23 = *(void *)(*v20 + 40) + 16 * v22;
  int v24 = sub_1CD7EBF14((uint64_t)v16, 0, (const llvm::APInt *)&v33, *(llvm **)v23, *(void *)(v23 + 8), 0, 0);
  uint64_t v27 = sub_1CD7FFB94(v16, (const char *)0x48, (const llvm::APInt *)&v33, v18, v19, v21, v22, v26, (uint64_t)v24, v25, (uint64_t)v15, 1);
  if (v33)
  {
    int v28 = *v33;
    if ((v28 - 4) > 0x1E)
    {
      if ((v28 - 3) >= 0xFFFFFFFE) {
        uint64_t v30 = v33;
      }
      else {
        uint64_t v30 = 0;
      }
      if ((v28 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v31 = (unint64_t)(v30 + 8);
LABEL_13:
        uint64_t v35 = &v33;
        sub_1CC5FA668(v31 + 16, &v35);
        return v27;
      }
      if (v28 == 3) {
        *((void *)v33 + 1) = 0;
      }
    }
    else if ((v33[1] & 0x7F) == 2 || *((_DWORD *)v33 + 3))
    {
      uint64_t v32 = *((void *)v33 + 2);
      if ((v32 & 4) != 0)
      {
        unint64_t v31 = v32 & 0xFFFFFFFFFFFFFFF8;
        if (v31) {
          goto LABEL_13;
        }
      }
    }
  }
  return v27;
}

uint64_t *sub_1CCF44668(uint64_t *a1, uint64_t a2, void *a3, const llvm::APInt *a4)
{
  uint64_t v6 = *(void *)(a2 + 40) + 16 * a3;
  uint64_t v7 = *(llvm **)v6;
  uint64_t v8 = *(void *)(v6 + 8);
  uint64_t v23 = *(llvm **)v6;
  uint64_t v24 = v8;
  uint64_t v9 = (llvm::APFloatBase *)*a1;
  uint64_t v10 = *((void *)v9 + 104);
  if (v10) {
    __int16 v11 = *(_WORD *)(v10 + 8);
  }
  else {
    __int16 v11 = 0;
  }
  uint64_t v12 = sub_1CD7F3564(v9, (const char *)0xB8, (uint64_t)a4, v7, v8, a2, a3, v11);
  uint64_t v14 = v13;
  uint64_t v15 = *a1;
  uint64_t v17 = sub_1CD3E12F4((unsigned __int8 *)&v23, v13, v16);
  uint64_t v19 = sub_1CD7EBF14(v15, (uint64_t)v17 - 1, a4, v23, v24, 0, 0);
  uint64_t v21 = *(void *)(*a1 + 832);
  if (v21) {
    LOWORD(v21) = *(_WORD *)(v21 + 8);
  }
  return sub_1CCFDED5C(*a1, 57, a4, v23, v24, (uint64_t)v19, v18, v20, (uint64_t)v12, v14, v21);
}

void sub_1CCF44744()
{
}

void *sub_1CCF44758(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F26414A8;
  result[1] = v3;
  return result;
}

uint64_t sub_1CCF447A0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F26414A8;
  a2[1] = v2;
  return result;
}

BOOL sub_1CCF447CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = *(void *)(v2 + 80);
    uint64_t v4 = *(unsigned int *)(v3 + 32);
    if (v4 > 0x40)
    {
      int v7 = 0;
      int64_t v8 = (unint64_t)(v4 + 63) >> 6;
      do
      {
        BOOL v9 = v8-- < 1;
        if (v9) {
          break;
        }
        unint64_t v10 = *(void *)(*(void *)(v3 + 24) + 8 * v8);
        v7 += __clz(v10);
      }
      while (!v10);
      int v11 = v4 | 0xFFFFFFC0;
      if ((v4 & 0x3F) == 0) {
        int v11 = 0;
      }
      if (v7 + v11 != v4) {
        goto LABEL_4;
      }
    }
    else if (*(void *)(v3 + 24))
    {
LABEL_4:
      BOOL v5 = *(unint64_t **)(a1 + 8);
      unint64_t v6 = *v5;
      if (*v5) {
        v6 >>= 58;
      }
      else {
        LODWORD(v6) = *(_DWORD *)(v6 + 64);
      }
      sub_1CBA7B5AC(v5, (v6 + 1), 0);
      uint64_t v15 = *(void *)(v2 + 80);
      uint64_t v16 = *(unsigned int *)(v15 + 32);
      if (v16 > 0x40)
      {
        int v18 = 0;
        int64_t v19 = (unint64_t)(v16 + 63) >> 6;
        do
        {
          BOOL v9 = v19-- < 1;
          if (v9) {
            break;
          }
          unint64_t v20 = *(void *)(*(void *)(v15 + 24) + 8 * v19);
          v18 += __clz(v20);
        }
        while (!v20);
        int v21 = v16 | 0xFFFFFFC0;
        if ((v16 & 0x3F) == 0) {
          int v21 = 0;
        }
        return v18 + v21 == v16 - 1;
      }
      else
      {
        return *(void *)(v15 + 24) == 1;
      }
    }
  }
  uint64_t v12 = *(unint64_t **)(a1 + 8);
  unint64_t v13 = *v12;
  if (*v12) {
    v13 >>= 58;
  }
  else {
    LODWORD(v13) = *(_DWORD *)(v13 + 64);
  }
  uint64_t v14 = 1;
  sub_1CBA7B5AC(v12, (v13 + 1), 1);
  return v14;
}

uint64_t sub_1CCF448FC(uint64_t a1, uint64_t a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(uint64_t **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *v4;
  uint64_t v7 = v4[1];
  uint64_t v9 = v4[5];
  uint64_t v8 = v4[6];
  int v11 = *(llvm **)v5;
  uint64_t v10 = *(void *)(v5 + 8);
  int v42 = *(llvm **)v5;
  uint64_t v43 = v10;
  uint64_t v12 = *(unsigned __int8 **)(a1 + 64);
  int v40 = v12;
  if (v12) {
    llvm::MetadataTracking::track((uint64_t)&v40, v12, 2);
  }
  int v41 = *(_DWORD *)(a1 + 60);
  int v13 = *(unsigned __int16 *)(a1 + 24);
  uint64_t v14 = sub_1CCFD8CD8(v9, v8, 0, 0);
  unint64_t v44 = (unsigned __int8 **)v6;
  int v45 = v7;
  uint64_t v46 = v9;
  int v47 = v8;
  if (sub_1CD7F4B84(a2, v13, (uint64_t)&v44))
  {
    int v34 = sub_1CD3DD4D8(a2, v11, v10);
LABEL_35:
    uint64_t v6 = (uint64_t)v34;
    goto LABEL_36;
  }
  if (*(_WORD *)(v6 + 24) == 51) {
    goto LABEL_31;
  }
  uint64_t v15 = sub_1CCFD8CD8(v6, v7, 0, 0);
  if (v15)
  {
    uint64_t v18 = *(void *)(v15 + 80);
    uint64_t v19 = *(unsigned int *)(v18 + 32);
    if (v19 > 0x40)
    {
      int v20 = 0;
      int64_t v21 = (unint64_t)(v19 + 63) >> 6;
      do
      {
        BOOL v22 = v21-- < 1;
        if (v22) {
          break;
        }
        unint64_t v23 = *(void *)(*(void *)(v18 + 24) + 8 * v21);
        v20 += __clz(v23);
      }
      while (!v23);
      int v24 = v19 | 0xFFFFFFC0;
      if ((v19 & 0x3F) == 0) {
        int v24 = 0;
      }
      if (v20 + v24 == v19) {
        goto LABEL_36;
      }
    }
    else if (!*(void *)(v18 + 24))
    {
      goto LABEL_36;
    }
  }
  unsigned int v25 = v13 - 59;
  if (v6 == v9 && v7 == v8)
  {
    BOOL v33 = v25 < 2;
    uint64_t v32 = a2;
    goto LABEL_34;
  }
  if (v14)
  {
    uint64_t v26 = *(void *)(v14 + 80);
    uint64_t v27 = *(unsigned int *)(v26 + 32);
    if (v27 <= 0x40)
    {
      if (*(void *)(v26 + 24) != 1) {
        goto LABEL_20;
      }
LABEL_30:
      if (v25 < 2) {
        goto LABEL_36;
      }
      goto LABEL_31;
    }
    int v28 = 0;
    int64_t v29 = (unint64_t)(v27 + 63) >> 6;
    do
    {
      BOOL v22 = v29-- < 1;
      if (v22) {
        break;
      }
      unint64_t v30 = *(void *)(*(void *)(v26 + 24) + 8 * v29);
      v28 += __clz(v30);
    }
    while (!v30);
    int v31 = v27 | 0xFFFFFFC0;
    if ((v27 & 0x3F) == 0) {
      int v31 = 0;
    }
    if (v28 + v31 == v27 - 1) {
      goto LABEL_30;
    }
  }
LABEL_20:
  if (sub_1CD3DD468((unsigned __int8 *)&v42, v16, v17) != 2)
  {
    uint64_t v6 = 0;
    goto LABEL_36;
  }
  if (v25 >= 2)
  {
    int v11 = v42;
    uint64_t v10 = v43;
LABEL_31:
    uint64_t v32 = a2;
    BOOL v33 = 0;
LABEL_34:
    int v34 = sub_1CD7EBF14(v32, v33, (const llvm::APInt *)&v40, v11, v10, 0, 0);
    goto LABEL_35;
  }
LABEL_36:
  if (v40)
  {
    int v35 = *v40;
    if ((v35 - 4) > 0x1E)
    {
      if ((v35 - 3) >= 0xFFFFFFFE) {
        int v37 = v40;
      }
      else {
        int v37 = 0;
      }
      if ((v35 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v38 = (unint64_t)(v37 + 8);
LABEL_46:
        unint64_t v44 = &v40;
        sub_1CC5FA668(v38 + 16, &v44);
        return v6;
      }
      if (v35 == 3) {
        *((void *)v40 + 1) = 0;
      }
    }
    else if ((v40[1] & 0x7F) == 2 || *((_DWORD *)v40 + 3))
    {
      uint64_t v39 = *((void *)v40 + 2);
      if ((v39 & 4) != 0)
      {
        unint64_t v38 = v39 & 0xFFFFFFFFFFFFFFF8;
        if (v38) {
          goto LABEL_46;
        }
      }
    }
  }
  return v6;
}

uint64_t *sub_1CCF44BF0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  v142[8] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(unsigned __int8 **)(a6 + 64);
  uint64_t v138 = v12;
  if (v12) {
    llvm::MetadataTracking::track((uint64_t)&v138, v12, 2);
  }
  int v139 = *(_DWORD *)(a6 + 60);
  uint64_t v13 = *(void *)(a6 + 40);
  uint64_t v14 = *(void *)(v13 + 8);
  uint64_t v136 = *(llvm **)v13;
  uint64_t v137 = v14;
  uint64_t v15 = (llvm *)(*(uint64_t (**)(void))(*(void *)a1[1] + 400))();
  uint64_t v17 = v16;
  unsigned int v19 = sub_1CD3E12F4((unsigned __int8 *)&v136, v16, v18);
  if ((*(_WORD *)(a6 + 72) & 8) != 0 || (unsigned int v20 = v19, !sub_1CCF45884(a4, (uint64_t)a5)))
  {
    uint64_t v25 = *(void *)(**(void **)(*a1 + 40) + 112);
    if (!sub_1CCF40DA4(a4, (uint64_t)a5, 0)) {
      goto LABEL_42;
    }
    if ((*(uint64_t (**)(uint64_t, void, void, uint64_t))(*(void *)a1[1] + 144))(a1[1], **(void **)(a6 + 40), *(void *)(*(void *)(a6 + 40) + 8), v25))goto LABEL_42; {
    uint64_t v26 = *a1;
    }
    uint64_t v27 = *(void *)(**(void **)(*a1 + 40) + 112);
    if (v27)
    {
      if (*(char *)(v27 + 13) < 0) {
        goto LABEL_42;
      }
    }
    uint64_t v140 = v142;
    uint64_t v141 = 0x800000000;
    int v28 = sub_1CD014128((uint64_t *)a1[1], a6, v26, *((unsigned __int8 *)a1 + 33), (uint64_t)&v140);
    int64_t v29 = (uint64_t *)v140;
    if (v28 && v141)
    {
      uint64_t v30 = 8 * v141;
      do
      {
        uint64_t v31 = *v29++;
        sub_1CCEF0788((uint64_t)a1, v31);
        v30 -= 8;
      }
      while (v30);
      int64_t v29 = (uint64_t *)v140;
    }
    if (v29 != v142) {
      free(v29);
    }
    if (!v28) {
      goto LABEL_42;
    }
    goto LABEL_43;
  }
  unsigned int v132 = v20;
  uint64_t v135 = a2;
  uint64_t v21 = sub_1CCFD8CD8(*(void *)(*(void *)(a6 + 32) + 40), *(void *)(*(void *)(a6 + 32) + 48), 0, 0);
  if (v21)
  {
    uint64_t v22 = *(void *)(v21 + 80);
    unint64_t v23 = (void *)(v22 + 24);
    uint64_t v24 = *(unsigned int *)(v22 + 32);
    if (v24 > 0x40)
    {
      int v32 = 0;
      int64_t v33 = (unint64_t)(v24 + 63) >> 6;
      do
      {
        if (v33-- < 1) {
          break;
        }
        unint64_t v35 = *(void *)(*v23 + 8 * v33);
        v32 += __clz(v35);
      }
      while (!v35);
      int v36 = v24 | 0xFFFFFFC0;
      if ((v24 & 0x3F) == 0) {
        int v36 = 0;
      }
      if (v32 + v36 == v24) {
        goto LABEL_32;
      }
    }
    else if (!*v23)
    {
      goto LABEL_32;
    }
    uint64_t v140 = v142;
    uint64_t v141 = 0x800000000;
    int v28 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1[1] + 2088))(a1[1], a6);
    int v37 = (uint64_t *)v140;
    if (v28 && v141)
    {
      uint64_t v129 = a3;
      uint64_t v38 = a4;
      uint64_t v39 = a5;
      uint64_t v40 = v17;
      int v41 = v15;
      uint64_t v42 = 8 * v141;
      do
      {
        uint64_t v43 = *v37++;
        sub_1CCEF0788((uint64_t)a1, v43);
        v42 -= 8;
      }
      while (v42);
      int v37 = (uint64_t *)v140;
      uint64_t v15 = v41;
      uint64_t v17 = v40;
      a5 = v39;
      a4 = v38;
      a3 = v129;
    }
    if (v37 != v142) {
      free(v37);
    }
    if (v28) {
      goto LABEL_43;
    }
  }
LABEL_32:
  unint64_t v44 = (uint64_t *)(*(void *)(v135 + 40) + 16 * a3);
  ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy((uint64_t *)a1[1], *v44, v44[1], *(void *)(**(void **)(*a1 + 40) + 40) + 272, *((unsigned __int8 *)a1 + 34));
  uint64_t v47 = v46;
  uint64_t v48 = sub_1CD7EBF14(*a1, v20, (const llvm::APInt *)&v138, ShiftAmountTy, v46, 0, 0);
  uint64_t v49 = *(void *)(*a1 + 832);
  uint64_t v126 = v50;
  uint64_t v130 = (uint64_t)v48;
  if (v49) {
    __int16 v51 = *(_WORD *)(v49 + 8);
  }
  else {
    __int16 v51 = 0;
  }
  int v52 = sub_1CD7F3564((llvm::APFloatBase *)*a1, (const char *)0xB7, (uint64_t)&v138, v136, v137, a4, a5, v51);
  uint64_t v54 = v53;
  uint64_t v56 = sub_1CD7EB80C(*a1, (uint64_t)v52, v53, (uint64_t)&v138, (uint64_t)ShiftAmountTy, v47);
  unint64_t v58 = v54 & 0xFFFFFFFF00000000 | v57;
  uint64_t v59 = *(void *)(*a1 + 832);
  if (v59) {
    LOWORD(v59) = *(_WORD *)(v59 + 8);
  }
  BOOL v60 = sub_1CCFDED5C(*a1, 57, (const llvm::APInt *)&v138, ShiftAmountTy, v47, v130, v126, v55, v56, v58, v59);
  uint64_t v124 = ShiftAmountTy;
  uint64_t v127 = v47;
  uint64_t v61 = (uint64_t)v60;
  uint64_t v63 = v62;
  if (!sub_1CCF40DA4((uint64_t)v60, v62, 0))
  {
LABEL_42:
    int v28 = 0;
    goto LABEL_43;
  }
  uint64_t v123 = v58;
  uint64_t v131 = a3;
  uint64_t v68 = *a1;
  uint64_t v69 = v132 - 1;
  uint64_t v70 = v136;
  uint64_t v133 = v137;
  BOOL v71 = sub_1CD7EBF14(*a1, v69, (const llvm::APInt *)&v138, v124, v127, 0, 0);
  uint64_t v74 = *(void *)(v68 + 832);
  if (v74) {
    LOWORD(v74) = *(_WORD *)(v74 + 8);
  }
  uint64_t v75 = sub_1CCFDED5C(v68, 176, (const llvm::APInt *)&v138, v70, v133, v135, v131, v73, (uint64_t)v71, v72, v74);
  uint64_t v77 = v76;
  sub_1CCEF0788((uint64_t)a1, (uint64_t)v75);
  uint64_t v79 = *(void *)(*a1 + 832);
  if (v79) {
    LOWORD(v79) = *(_WORD *)(v79 + 8);
  }
  uint64_t v80 = sub_1CCFDED5C(*a1, 177, (const llvm::APInt *)&v138, v136, v137, (uint64_t)v75, v77, v78, v61, v63, v79);
  uint64_t v82 = v81;
  sub_1CCEF0788((uint64_t)a1, (uint64_t)v80);
  uint64_t v84 = *(void *)(*a1 + 832);
  if (v84) {
    LOWORD(v84) = *(_WORD *)(v84 + 8);
  }
  uint64_t v85 = sub_1CCFDED5C(*a1, 56, (const llvm::APInt *)&v138, v136, v137, v135, v131, v83, (uint64_t)v80, v82, v84);
  uint64_t v87 = v86;
  sub_1CCEF0788((uint64_t)a1, (uint64_t)v85);
  uint64_t v89 = *(void *)(*a1 + 832);
  if (v89) {
    LOWORD(v89) = *(_WORD *)(v89 + 8);
  }
  uint8x8_t v125 = sub_1CCFDED5C(*a1, 176, (const llvm::APInt *)&v138, v136, v137, (uint64_t)v85, v87, v88, v56, v123, v89);
  uint64_t v128 = v90;
  sub_1CCEF0788((uint64_t)a1, (uint64_t)v125);
  uint64_t v91 = sub_1CD7EBF14(*a1, 1, (const llvm::APInt *)&v138, v136, v137, 0, 0);
  uint64_t v93 = v92;
  uint64_t v94 = sub_1CD787918(*a1, (const llvm::APInt *)&v138, (BOOL)v136, v137, 0, 0);
  uint64_t v96 = v95;
  uint64_t v97 = sub_1CD3DC614((void *)*a1, (const llvm::APInt *)&v138, v15, v17, a4, (uint64_t)a5, (uint64_t)v91, v93, 0x11u, 0, 0, 0, 0);
  uint64_t v99 = v98;
  uint64_t v100 = sub_1CD3DC614((void *)*a1, (const llvm::APInt *)&v138, v15, v17, a4, (uint64_t)a5, v94, v96, 0x11u, 0, 0, 0, 0);
  __int16 v103 = 0;
  uint64_t v104 = *(void *)(*a1 + 832);
  if (v104) {
    __int16 v103 = *(_WORD *)(v104 + 8);
  }
  uint64_t v105 = v15;
  uint64_t v134 = v17;
  uint64_t v106 = sub_1CCFDED5C(*a1, 172, (const llvm::APInt *)&v138, v15, v17, (uint64_t)v97, v99, v102, (uint64_t)v100, v101, v103);
  uint64_t v108 = sub_1CD3E1260((void *)*a1, (const llvm::APInt *)&v138, v136, v137, (uint64_t)v106, v107, v135, v131, (uint64_t)v125, v128, SHIDWORD(v128));
  unint64_t v110 = v128 & 0xFFFFFFFF00000000 | v109;
  uint64_t v113 = sub_1CD7EBF14(*a1, 0, (const llvm::APInt *)&v138, v136, v137, 0, 0);
  uint64_t v114 = v111;
  __int16 v115 = 0;
  uint64_t v116 = *(void *)(*a1 + 832);
  if (v116) {
    __int16 v115 = *(_WORD *)(v116 + 8);
  }
  uint64_t v117 = sub_1CCFDED5C(*a1, 57, (const llvm::APInt *)&v138, v136, v137, (uint64_t)v113, v111, v112, (uint64_t)v108, v110, v115);
  uint64_t v119 = v118;
  int v120 = sub_1CD3DC614((void *)*a1, (const llvm::APInt *)&v138, v105, v134, a4, (uint64_t)a5, (uint64_t)v113, v114, 0x14u, 0, 0, 0, 0);
  int v28 = sub_1CD3E1260((void *)*a1, (const llvm::APInt *)&v138, v136, v137, (uint64_t)v120, v121, (uint64_t)v117, v119, (uint64_t)v108, v110, SHIDWORD(v110));
LABEL_43:
  if (v138)
  {
    int v64 = *v138;
    if ((v64 - 4) > 0x1E)
    {
      if ((v64 - 3) >= 0xFFFFFFFE) {
        int v66 = v138;
      }
      else {
        int v66 = 0;
      }
      if ((v64 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v67 = (unint64_t)(v66 + 8);
LABEL_53:
        uint64_t v140 = &v138;
        sub_1CC5FA668(v67 + 16, &v140);
        return v28;
      }
      if (v64 == 3) {
        *((void *)v138 + 1) = 0;
      }
    }
    else if ((v138[1] & 0x7F) == 2 || *((_DWORD *)v138 + 3))
    {
      uint64_t v122 = *((void *)v138 + 2);
      if ((v122 & 4) != 0)
      {
        unint64_t v67 = v122 & 0xFFFFFFFFFFFFFFF8;
        if (v67) {
          goto LABEL_53;
        }
      }
    }
  }
  return v28;
}

uint64_t *sub_1CCF45424(uint64_t *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 48)) {
    return 0;
  }
  uint64_t v4 = *(unsigned __int16 *)(a2 + 24);
  BOOL v5 = v4 == 59 || v4 == 61;
  int v6 = v5;
  if (v5) {
    uint64_t v7 = 65;
  }
  else {
    uint64_t v7 = 66;
  }
  uint64_t v8 = *(uint64_t **)(a2 + 40);
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  int v11 = *v8;
  if (*v8)
  {
    if ((v11 - 2) >= 6) {
      return 0;
    }
  }
  else if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12 || *(_DWORD *)(v10 + 8) != 13)
  {
    return 0;
  }
  uint64_t v13 = *v8;
  if (!(_BYTE)v9) {
    return 0;
  }
  uint64_t v14 = a1[1];
  uint64_t v15 = *(void *)(v14 + 8 * v13 + 96);
  if (!v15 && *(unsigned char *)(v14 + 390 * v13 + v7 + 3862) != 4) {
    return 0;
  }
  if (!v11) {
    return 0;
  }
  BOOL v16 = v11 != 1 && v15 == 0;
  if (v16 || (*(unsigned char *)(v14 + 390 * v13 + v7 + 3862) & 0xFB) != 0)
  {
    switch(v11)
    {
      case 3:
        BOOL v17 = v6 == 0;
        uint64_t v18 = 51;
        uint64_t v19 = 45;
        break;
      case 4:
        BOOL v17 = v6 == 0;
        uint64_t v18 = 52;
        uint64_t v19 = 46;
        break;
      case 5:
        BOOL v17 = v6 == 0;
        uint64_t v18 = 53;
        uint64_t v19 = 47;
        break;
      case 6:
        BOOL v17 = v6 == 0;
        uint64_t v18 = 54;
        uint64_t v19 = 48;
        break;
      case 7:
        BOOL v17 = v6 == 0;
        uint64_t v18 = 55;
        uint64_t v19 = 49;
        break;
      default:
        return 0;
    }
    if (!v17) {
      uint64_t v18 = v19;
    }
    if (!*(void *)(v14 + 8 * v18 + 174048)) {
      return 0;
    }
  }
  BOOL v21 = v11 == 1 || v15 != 0;
  if ((v4 - 59) > 1)
  {
    if (v6) {
      unsigned int v22 = 59;
    }
    else {
      unsigned int v22 = 60;
    }
    if (v21)
    {
      uint64_t v23 = v14 + 390 * v13 + v22;
LABEL_54:
      if ((*(unsigned char *)(v23 + 3862) & 0xFB) == 0) {
        return 0;
      }
    }
  }
  else
  {
    if (v6) {
      unsigned int v22 = 61;
    }
    else {
      unsigned int v22 = 62;
    }
    if (v21)
    {
      uint64_t v23 = v14 + 390 * v13 + v4;
      goto LABEL_54;
    }
  }
  uint64_t v24 = *(uint64_t **)(a2 + 32);
  uint64_t v25 = *v24;
  uint64_t v26 = *(void *)(*v24 + 48);
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = v24[5];
    uint64_t v30 = v24[6];
    uint64_t v31 = v24[1];
    while (1)
    {
      uint64_t v32 = *(void *)(v26 + 16);
      if (v32 == a2) {
        goto LABEL_82;
      }
      int v33 = *(unsigned __int16 *)(v32 + 24);
      if (!*(_WORD *)(v32 + 24) || !*(void *)(v32 + 48)) {
        goto LABEL_82;
      }
      BOOL v34 = v33 == v4 || v22 == v33;
      if (!v34 && v7 != v33) {
        goto LABEL_82;
      }
      uint64_t v36 = *(void *)(v32 + 32);
      if (*(void *)v36 != v25
        || *(_DWORD *)(v36 + 8) != v31
        || *(void *)(v36 + 40) != v29
        || *(_DWORD *)(v36 + 48) != v30)
      {
        goto LABEL_82;
      }
      if (v27)
      {
        uint64_t v37 = v28;
        goto LABEL_76;
      }
      if (v22 == v33) {
        break;
      }
      uint64_t v37 = 0;
      uint64_t result = 0;
      uint64_t v27 = *(uint64_t **)(v26 + 16);
      if (v7 == v33) {
        goto LABEL_76;
      }
LABEL_83:
      uint64_t v26 = *(void *)(v26 + 32);
      uint64_t v27 = result;
      if (!v26) {
        return result;
      }
    }
    uint64_t v62 = v31;
    uint64_t v64 = v29;
    uint64_t v56 = v30;
    uint64_t v58 = v25;
    unsigned int v60 = v22;
    uint64_t v43 = sub_1CD7F95FC(*a1, v9, v10, v9, v10);
    uint64_t v45 = v44;
    uint64_t v46 = (void *)*a1;
    uint64_t v47 = *(unsigned __int8 **)(a2 + 64);
    int v65 = v47;
    if (v47)
    {
      uint64_t v53 = v45;
      uint64_t v54 = v46;
      llvm::MetadataTracking::track((uint64_t)&v65, v47, 2);
      uint64_t v45 = v53;
      uint64_t v46 = v54;
    }
    LODWORD(v66) = *(_DWORD *)(a2 + 60);
    uint64_t v27 = sub_1CD7FFB18(v46, (const char *)v7, (const llvm::APInt *)&v65, v43, v45, v58, v62, v42, v64, v56);
    if (v65)
    {
      int v49 = *v65;
      if ((v49 - 4) > 0x1E)
      {
        unsigned int v55 = v48;
        if ((v49 - 3) >= 0xFFFFFFFE) {
          uint64_t v50 = v65;
        }
        else {
          uint64_t v50 = 0;
        }
        if ((v49 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v51 = (unint64_t)(v50 + 8);
          goto LABEL_97;
        }
        if (v49 == 3) {
          *((void *)v65 + 1) = 0;
        }
      }
      else if ((v65[1] & 0x7F) == 2 || *((_DWORD *)v65 + 3))
      {
        uint64_t v52 = *((void *)v65 + 2);
        if ((v52 & 4) != 0)
        {
          unint64_t v51 = v52 & 0xFFFFFFFFFFFFFFF8;
          if (v51)
          {
            unsigned int v55 = v48;
LABEL_97:
            unint64_t v67 = &v65;
            sub_1CC5FA668(v51 + 16, &v67);
            unsigned int v48 = v55;
          }
        }
      }
    }
    uint64_t v37 = v48;
    unsigned int v22 = v60;
    uint64_t v30 = v56;
    uint64_t v25 = v58;
    uint64_t v31 = v62;
    uint64_t v29 = v64;
LABEL_76:
    if ((v33 - 59) > 1)
    {
      if ((v33 - 61) > 1)
      {
        uint64_t v28 = v37;
        goto LABEL_82;
      }
      int v65 = (unsigned __int8 *)v27;
      uint64_t v66 = 1;
    }
    else
    {
      int v65 = (unsigned __int8 *)v27;
      uint64_t v66 = v37;
    }
    uint64_t v39 = v32;
    unsigned int v59 = v22;
    uint64_t v40 = v25;
    uint64_t v61 = v31;
    uint64_t v63 = v29;
    uint64_t v41 = v30;
    uint64_t v57 = v37;
    sub_1CCEF083C(a1, v39, (uint64_t *)&v65, 1, 1);
    uint64_t v31 = v61;
    uint64_t v29 = v63;
    uint64_t v30 = v41;
    uint64_t v25 = v40;
    unsigned int v22 = v59;
    uint64_t v28 = v57;
LABEL_82:
    uint64_t result = v27;
    goto LABEL_83;
  }
  return 0;
}

uint64_t sub_1CCF45884(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1F26414F0;
  BOOL v5 = v4;
  uint64_t v2 = sub_1CD7E9A18(a1, a2, (uint64_t)v4, 0);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1CCF45970()
{
}

void *sub_1CCF45984()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F26414F0;
  return result;
}

void sub_1CCF459BC(uint64_t a1, void *a2)
{
  *a2 = &unk_1F26414F0;
}

BOOL sub_1CCF459E4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(*a2 + 80);
  uint64_t v4 = (llvm::APInt *)(v3 + 24);
  uint64_t v5 = *(unsigned int *)(v3 + 32);
  if (v5 > 0x40)
  {
    int v8 = 0;
    unint64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v9;
    do
    {
      if (v10-- < 1) {
        break;
      }
      unint64_t v12 = *(void *)(*(void *)v4 + 8 * v10);
      v8 += __clz(v12);
    }
    while (!v12);
    int8x8_t v6 = 0;
    int v13 = v5 | 0xFFFFFFC0;
    if ((v5 & 0x3F) == 0) {
      int v13 = 0;
    }
    if (v8 + v13 == v5) {
      return (BOOL)v6;
    }
    if ((*(unsigned char *)(v2 + 26) & 8) == 0)
    {
      v6.i32[0] = 0;
      uint64_t v14 = *(int8x8_t **)v4;
      do
      {
        int8x8_t v15 = *v14++;
        uint8x8_t v16 = (uint8x8_t)vcnt_s8(v15);
        v16.i16[0] = vaddlv_u8(v16);
        int8x8_t v6 = (int8x8_t)(v6.i32[0] + v16.i32[0]);
        --v9;
      }
      while (v9);
      if (v6.i32[0] == 1) {
        return (BOOL)v6;
      }
      return sub_1CCA4D700(v4);
    }
    return 0;
  }
  int8x8_t v6 = *(int8x8_t *)v4;
  if (*(void *)v4)
  {
    if ((*(unsigned char *)(v2 + 26) & 8) == 0)
    {
      uint8x8_t v7 = (uint8x8_t)vcnt_s8(v6);
      v7.i16[0] = vaddlv_u8(v7);
      int8x8_t v6 = (int8x8_t)v7.u32[0];
      if (v7.u32[0] == 1) {
        return (BOOL)v6;
      }
      return sub_1CCA4D700(v4);
    }
    return 0;
  }
  return (BOOL)v6;
}

uint64_t *sub_1CCF45AB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  v61[8] = *MEMORY[0x1E4F143B8];
  unint64_t v12 = *(unsigned __int8 **)(a6 + 64);
  uint64_t v57 = v12;
  if (v12) {
    llvm::MetadataTracking::track((uint64_t)&v57, v12, 2);
  }
  int v58 = *(_DWORD *)(a6 + 60);
  uint64_t v13 = *(void *)(a6 + 40);
  uint64_t v14 = *(llvm **)v13;
  uint64_t v15 = *(void *)(v13 + 8);
  if (sub_1CCF40DA4(a4, (uint64_t)a5, 1) && sub_1CCFD8838(*(void *)a1, a4, (BOOL)a5))
  {
    uint64_t v30 = sub_1CCF44668((uint64_t *)a1, a4, a5, (const llvm::APInt *)&v57);
    uint64_t v32 = v31;
    sub_1CCEF0788(a1, (uint64_t)v30);
    int v33 = (uint64_t *)(*(void *)(a2 + 40) + 16 * a3);
    unint64_t ShiftAmountTy = llvm::TargetLoweringBase::getShiftAmountTy(*(uint64_t **)(a1 + 8), *v33, v33[1], *(void *)(**(void **)(*(void *)a1 + 40) + 40) + 272, *(unsigned __int8 *)(a1 + 34));
    uint64_t v36 = sub_1CD7EB80C(*(void *)a1, (uint64_t)v30, v32, (uint64_t)&v57, ShiftAmountTy, v35);
  }
  else
  {
    if (*(_WORD *)(a4 + 24) != 175
      || (uint8x8_t v16 = *(uint64_t **)(a4 + 32),
          uint64_t v17 = *v16,
          uint64_t v18 = (void *)v16[1],
          !sub_1CCF40DA4(*v16, (uint64_t)v18, 1))
      || !sub_1CCFD8838(*(void *)a1, v17, (BOOL)v18))
    {
      uint64_t v19 = *(void *)(**(void **)(*(void *)a1 + 40) + 112);
      if (!sub_1CCF40DA4(a4, (uint64_t)a5, 0)) {
        goto LABEL_20;
      }
      if ((*(uint64_t (**)(void, void, void, uint64_t))(**(void **)(a1 + 8) + 144))(*(void *)(a1 + 8), **(void **)(a6 + 40), *(void *)(*(void *)(a6 + 40) + 8), v19))goto LABEL_20; {
      uint64_t v20 = *(void *)a1;
      }
      uint64_t v21 = *(void *)(**(void **)(*(void *)a1 + 40) + 112);
      if (v21)
      {
        if (*(char *)(v21 + 13) < 0) {
          goto LABEL_20;
        }
      }
      unsigned int v59 = v61;
      uint64_t v60 = 0x800000000;
      unsigned int v22 = sub_1CD014F10(*(uint64_t **)(a1 + 8), a6, v20, *(unsigned char *)(a1 + 33), (uint64_t)&v59);
      uint64_t v23 = (uint64_t *)v59;
      if (v22 && v60)
      {
        uint64_t v24 = 8 * v60;
        do
        {
          uint64_t v25 = *v23++;
          sub_1CCEF0788(a1, v25);
          v24 -= 8;
        }
        while (v24);
        uint64_t v23 = (uint64_t *)v59;
      }
      if (v23 != v61) {
        free(v23);
      }
      if (!v22) {
LABEL_20:
      }
        unsigned int v22 = 0;
      goto LABEL_21;
    }
    uint64_t v38 = sub_1CCF44668((uint64_t *)a1, v17, v18, (const llvm::APInt *)&v57);
    uint64_t v40 = v39;
    sub_1CCEF0788(a1, (uint64_t)v38);
    uint64_t v41 = (uint64_t *)(*(void *)(*(void *)(*(void *)(a4 + 32) + 40) + 40)
                    + 16 * *(unsigned int *)(*(void *)(a4 + 32) + 48));
    uint64_t v42 = (llvm *)*v41;
    uint64_t v43 = v41[1];
    uint64_t v44 = sub_1CD7EB80C(*(void *)a1, (uint64_t)v38, v40, (uint64_t)&v57, *v41, v43);
    uint64_t v46 = v45;
    sub_1CCEF0788(a1, v44);
    uint64_t v48 = *(void *)(a4 + 32);
    uint64_t v49 = *(void *)(v48 + 40);
    uint64_t v50 = *(void *)(v48 + 48);
    uint64_t v51 = *(void *)(*(void *)a1 + 832);
    if (v51) {
      LOWORD(v51) = *(_WORD *)(v51 + 8);
    }
    uint64_t v36 = (uint64_t)sub_1CCFDED5C(*(void *)a1, 56, (const llvm::APInt *)&v57, v42, v43, v49, v50, v47, v44, v46, v51);
  }
  uint64_t v52 = v36;
  uint64_t v53 = v37;
  sub_1CCEF0788(a1, v36);
  uint64_t v55 = *(void *)(*(void *)a1 + 832);
  if (v55) {
    LOWORD(v55) = *(_WORD *)(v55 + 8);
  }
  unsigned int v22 = sub_1CCFDED5C(*(void *)a1, 177, (const llvm::APInt *)&v57, v14, v15, a2, a3, v54, v52, v53, v55);
LABEL_21:
  if (v57)
  {
    int v26 = *v57;
    if ((v26 - 4) > 0x1E)
    {
      if ((v26 - 3) >= 0xFFFFFFFE) {
        uint64_t v28 = v57;
      }
      else {
        uint64_t v28 = 0;
      }
      if ((v26 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v29 = (unint64_t)(v28 + 8);
LABEL_31:
        unsigned int v59 = &v57;
        sub_1CC5FA668(v29 + 16, &v59);
        return v22;
      }
      if (v26 == 3) {
        *((void *)v57 + 1) = 0;
      }
    }
    else if ((v57[1] & 0x7F) == 2 || *((_DWORD *)v57 + 3))
    {
      uint64_t v56 = *((void *)v57 + 2);
      if ((v56 & 4) != 0)
      {
        unint64_t v29 = v56 & 0xFFFFFFFFFFFFFFF8;
        if (v29) {
          goto LABEL_31;
        }
      }
    }
  }
  return v22;
}

uint64_t *sub_1CCF45EB4(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *(void *)(a2 + 48);
  if (v11)
  {
    uint64_t v12 = *(void *)(a2 + 48);
    while (*(_DWORD *)(v12 + 8) != 1)
    {
      uint64_t v12 = *(void *)(v12 + 32);
      if (!v12) {
        goto LABEL_5;
      }
    }
    while (*(_DWORD *)(v11 + 8))
    {
      uint64_t v11 = *(void *)(v11 + 32);
      if (!v11)
      {
        if (!*(unsigned char *)(a1 + 33)) {
          goto LABEL_49;
        }
        int v16 = 1;
        goto LABEL_26;
      }
    }
    return 0;
  }
LABEL_5:
  if (!*(unsigned char *)(a1 + 33)
    || (uint64_t v13 = *(void *)(a2 + 40), *(void *)v13)
    && ((uint64_t v14 = *(void *)(a1 + 8), v15 = *(void *)v13, v15 == 1)
     || (*(void *)v13 ? (BOOL v17 = *(void *)(v14 + 8 * v15 + 96) == 0) : (BOOL v17 = 1), !v17))
    && (*(unsigned __int8 *)(v14 + 390 * *(void *)v13 + 3920) | 4) == 4)
  {
    uint64_t v18 = *(void *)a1;
    uint64_t v19 = *(unsigned __int8 **)(a2 + 64);
    uint64_t v72 = v19;
    if (v19) {
      llvm::MetadataTracking::track((uint64_t)&v72, v19, 2);
    }
    unsigned int v73 = *(_DWORD *)(a2 + 60);
    uint64_t v20 = *(uint64_t **)(a2 + 32);
    uint64_t v21 = *(void *)(a2 + 40);
    unsigned int v22 = *(llvm **)v21;
    uint64_t v23 = *(void *)(v21 + 8);
    uint64_t v24 = *(unsigned __int16 *)(a2 + 56);
    uint64_t v25 = (llvm::APFloatBase *)v18;
    uint64_t v26 = 58;
    goto LABEL_52;
  }
  if (v11)
  {
    while (*(_DWORD *)(v11 + 8))
    {
      uint64_t v11 = *(void *)(v11 + 32);
      if (!v11) {
        goto LABEL_25;
      }
    }
    uint64_t v51 = *(llvm::APFloatBase **)a1;
    uint64_t v52 = *(unsigned __int8 **)(a2 + 64);
    uint64_t v72 = v52;
    if (v52)
    {
      llvm::MetadataTracking::track((uint64_t)&v72, v52, 2);
      uint64_t v13 = *(void *)(a2 + 40);
    }
    unsigned int v73 = *(_DWORD *)(a2 + 60);
    uint64_t v53 = sub_1CD7FF26C(v51, (const char *)0x3A, (const llvm::APInt *)&v72, *(llvm **)v13, *(void *)(v13 + 8), *(uint64_t **)(a2 + 32), *(unsigned __int16 *)(a2 + 56), a8);
    if (v72)
    {
      int v54 = *v72;
      if ((v54 - 4) > 0x1E)
      {
        if ((v54 - 3) >= 0xFFFFFFFE) {
          uint64_t v64 = v72;
        }
        else {
          uint64_t v64 = 0;
        }
        if ((v54 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v65 = (unint64_t)(v64 + 8);
LABEL_90:
          BOOL v71 = &v72;
          sub_1CC5FA668(v65 + 16, &v71);
          goto LABEL_64;
        }
        if (v54 == 3) {
          *((void *)v72 + 1) = 0;
        }
      }
      else if ((v72[1] & 0x7F) == 2 || *((_DWORD *)v72 + 3))
      {
        uint64_t v69 = *((void *)v72 + 2);
        if ((v69 & 4) != 0)
        {
          unint64_t v65 = v69 & 0xFFFFFFFFFFFFFFF8;
          if (v65) {
            goto LABEL_90;
          }
        }
      }
    }
LABEL_64:
    sub_1CCEF0788(a1, (uint64_t)v53);
    uint64_t v55 = sub_1CCEF17A8(a1, v53);
    unsigned int v57 = v56;
    uint64_t v41 = 0;
    if (v55)
    {
      int v58 = (uint64_t *)v55;
      uint64_t result = 0;
      if (v58 == v53) {
        return result;
      }
      if (!*(unsigned char *)(a1 + 33)) {
        goto LABEL_83;
      }
      uint64_t v59 = *(void *)(v58[5] + 16 * v57);
      uint64_t v41 = v59;
      if ((_BYTE)v59)
      {
        uint64_t v60 = *(void *)(a1 + 8);
        uint64_t v61 = *((unsigned __int16 *)v58 + 12);
        if (v41 != 1 && !*(void *)(v60 + 8 * v41 + 96)
          || v61 <= 0x185 && (*(unsigned char *)(v60 + 390 * v41 + v61 + 3862) & 0xFB) != 0)
        {
          return 0;
        }
LABEL_83:
        uint64_t v72 = (unsigned __int8 *)v58;
        unsigned int v73 = v57;
        uint64_t v74 = v58;
        unsigned int v75 = v57;
        return (uint64_t *)sub_1CCEF083C((uint64_t *)a1, a2, (uint64_t *)&v72, 2, 1);
      }
    }
    return (uint64_t *)v41;
  }
LABEL_25:
  int v16 = 0;
LABEL_26:
  uint64_t v27 = *(void *)(a2 + 40);
  uint64_t v28 = *(llvm **)(v27 + 16);
  if ((_BYTE)v28)
  {
    uint64_t v29 = *(void *)(a1 + 8);
    if ((*(void *)(v27 + 16) == 1 || *(void *)(v29 + 8 * v28 + 96))
      && (*(unsigned char *)(v29 + 390 * v28 + a3 + 3862) & 0xFB) == 0)
    {
LABEL_49:
      uint64_t v44 = *(void *)a1;
      uint64_t v45 = *(unsigned __int8 **)(a2 + 64);
      uint64_t v72 = v45;
      if (v45) {
        llvm::MetadataTracking::track((uint64_t)&v72, v45, 2);
      }
      unsigned int v73 = *(_DWORD *)(a2 + 60);
      uint64_t v20 = *(uint64_t **)(a2 + 32);
      uint64_t v46 = *(void *)(a2 + 40);
      unsigned int v22 = *(llvm **)(v46 + 16);
      uint64_t v23 = *(void *)(v46 + 24);
      uint64_t v24 = *(unsigned __int16 *)(a2 + 56);
      uint64_t v25 = (llvm::APFloatBase *)v44;
      uint64_t v26 = (uint64_t)a3;
LABEL_52:
      uint64_t v47 = sub_1CD7FF26C(v25, (const char *)v26, (const llvm::APInt *)&v72, v22, v23, v20, v24, a8);
      unsigned int v49 = v48;
      if (v72)
      {
        int v50 = *v72;
        if ((v50 - 4) > 0x1E)
        {
          if ((v50 - 3) >= 0xFFFFFFFE) {
            uint64_t v62 = v72;
          }
          else {
            uint64_t v62 = 0;
          }
          if ((v50 - 3) < 0xFFFFFFFE)
          {
            if (v50 == 3) {
              *((void *)v72 + 1) = 0;
            }
            goto LABEL_56;
          }
          unint64_t v63 = (unint64_t)(v62 + 8);
        }
        else
        {
          if ((v72[1] & 0x7F) != 2 && !*((_DWORD *)v72 + 3)) {
            goto LABEL_56;
          }
          uint64_t v68 = *((void *)v72 + 2);
          if ((v68 & 4) == 0) {
            goto LABEL_56;
          }
          unint64_t v63 = v68 & 0xFFFFFFFFFFFFFFF8;
          if (!v63) {
            goto LABEL_56;
          }
        }
        BOOL v71 = &v72;
        sub_1CC5FA668(v63 + 16, &v71);
      }
LABEL_56:
      uint64_t v72 = (unsigned __int8 *)v47;
      unsigned int v73 = v49;
      uint64_t v74 = v47;
      unsigned int v75 = v49;
      return (uint64_t *)sub_1CCEF083C((uint64_t *)a1, a2, (uint64_t *)&v72, 2, 1);
    }
  }
  if (!v16) {
    return 0;
  }
  uint64_t v30 = *(llvm::APFloatBase **)a1;
  uint64_t v31 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v72 = v31;
  if (v31)
  {
    llvm::MetadataTracking::track((uint64_t)&v72, v31, 2);
    uint64_t v27 = *(void *)(a2 + 40);
    uint64_t v28 = *(llvm **)(v27 + 16);
  }
  unsigned int v73 = *(_DWORD *)(a2 + 60);
  uint64_t v32 = sub_1CD7FF26C(v30, a3, (const llvm::APInt *)&v72, v28, *(void *)(v27 + 24), *(uint64_t **)(a2 + 32), *(unsigned __int16 *)(a2 + 56), a8);
  int v34 = v33;
  if (v72)
  {
    int v35 = *v72;
    if ((v35 - 4) > 0x1E)
    {
      if ((v35 - 3) >= 0xFFFFFFFE) {
        uint64_t v66 = v72;
      }
      else {
        uint64_t v66 = 0;
      }
      if ((v35 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v67 = (unint64_t)(v66 + 8);
LABEL_96:
        BOOL v71 = &v72;
        sub_1CC5FA668(v67 + 16, &v71);
        goto LABEL_37;
      }
      if (v35 == 3) {
        *((void *)v72 + 1) = 0;
      }
    }
    else if ((v72[1] & 0x7F) == 2 || *((_DWORD *)v72 + 3))
    {
      uint64_t v70 = *((void *)v72 + 2);
      if ((v70 & 4) != 0)
      {
        unint64_t v67 = v70 & 0xFFFFFFFFFFFFFFF8;
        if (v67) {
          goto LABEL_96;
        }
      }
    }
  }
LABEL_37:
  sub_1CCEF0788(a1, (uint64_t)v32);
  uint64_t result = (uint64_t *)sub_1CCEF17A8(a1, v32);
  if (result)
  {
    unsigned int v38 = v37;
    if (result != v32 || v37 != v34)
    {
      if (!*(unsigned char *)(a1 + 33)) {
        goto LABEL_48;
      }
      uint64_t v40 = *(void *)(result[5] + 16 * v37);
      uint64_t v41 = v40;
      if (!(_BYTE)v40) {
        return (uint64_t *)v41;
      }
      uint64_t v42 = *(void *)(a1 + 8);
      uint64_t v43 = *((unsigned __int16 *)result + 12);
      if ((v41 == 1 || *(void *)(v42 + 8 * v41 + 96))
        && (v43 > 0x185 || (*(unsigned char *)(v42 + 390 * v41 + v43 + 3862) & 0xFB) == 0))
      {
LABEL_48:
        uint64_t v72 = (unsigned __int8 *)result;
        unsigned int v73 = v38;
        uint64_t v74 = result;
        unsigned int v75 = v38;
        return (uint64_t *)sub_1CCEF083C((uint64_t *)a1, a2, (uint64_t *)&v72, 2, 1);
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_1CCF46444(uint64_t a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, int a9, uint64_t a10)
{
  uint64_t v12 = a3;
  int v14 = sub_1CCF473B8(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (!v14) {
    return 0;
  }
  int v15 = v14;
  int v16 = *(unsigned __int16 *)(a1 + 24);
  if ((v16 - 167) < 2)
  {
    uint64_t v28 = *(void *)(a1 + 32);
    uint64_t v19 = *(void *)v28;
    int v20 = *(_DWORD *)(v28 + 8);
    uint64_t v21 = *(void *)(v28 + 40);
    if (v16 == 167) {
      int v29 = 20;
    }
    else {
      int v29 = 18;
    }
    unsigned int v22 = *(_DWORD *)(v28 + 48);
    int v24 = *(_DWORD *)(v28 + 8);
    uint64_t v23 = *(void *)v28;
    unsigned int v26 = v22;
    uint64_t v25 = *(void *)(v28 + 40);
  }
  else
  {
    if ((v16 - 190) >= 2)
    {
      if (v16 != 192) {
        return 0;
      }
      uint64_t v30 = *(void *)(a1 + 32);
      uint64_t v19 = *(void *)v30;
      int v20 = *(_DWORD *)(v30 + 8);
      uint64_t v21 = *(void *)(v30 + 40);
      unsigned int v22 = *(_DWORD *)(v30 + 48);
      uint64_t v23 = *(void *)(v30 + 80);
      int v24 = *(_DWORD *)(v30 + 88);
      uint64_t v25 = *(void *)(v30 + 120);
      unsigned int v26 = *(_DWORD *)(v30 + 128);
      uint64_t v27 = *(void *)(v30 + 160);
    }
    else
    {
      uint64_t v17 = *(void *)(a1 + 32);
      if (*(_WORD *)(*(void *)v17 + 24) != 193) {
        return 0;
      }
      uint64_t v18 = *(void *)(*(void *)v17 + 32);
      uint64_t v19 = *(void *)v18;
      int v20 = *(_DWORD *)(v18 + 8);
      uint64_t v21 = *(void *)(v18 + 40);
      unsigned int v22 = *(_DWORD *)(v18 + 48);
      uint64_t v23 = *(void *)(v17 + 40);
      int v24 = *(_DWORD *)(v17 + 48);
      uint64_t v25 = *(void *)(v17 + 80);
      unsigned int v26 = *(_DWORD *)(v17 + 88);
      uint64_t v27 = *(void *)(v18 + 80);
    }
    int v29 = *(_DWORD *)(v27 + 76);
  }
  int v31 = sub_1CCF473B8(v19, v20, v21, v22, v23, v24, v25, v26, v29);
  if (v31) {
    BOOL v32 = v15 == v31;
  }
  else {
    BOOL v32 = 1;
  }
  if (v32) {
    return 0;
  }
  uint64_t v33 = v15 == 167 ? v12 : v21;
  unsigned int v34 = v15 == 167 ? a4 : v22;
  if (v15 == 167)
  {
    uint64_t v12 = v21;
    unsigned int v35 = v22;
  }
  else
  {
    unsigned int v35 = a4;
  }
  uint64_t v36 = sub_1CCFD8CD8(v33, v34, 0, 0);
  uint64_t v37 = sub_1CCFD8CD8(v12, v35, 0, 0);
  if (!v36 || v37 == 0) {
    return 0;
  }
  uint64_t v39 = *(unsigned __int8 **)(v36 + 40);
  int v40 = *v39;
  uint64_t v41 = *(unsigned __int8 **)(v37 + 40);
  if (v40 != *v41) {
    return 0;
  }
  uint64_t v42 = *((void *)v41 + 1);
  uint64_t v43 = *((void *)v39 + 1);
  if (!v40 && v43 != v42) {
    return 0;
  }
  uint64_t v45 = *(void *)(v36 + 80);
  uint64_t v46 = *(void *)(v37 + 80);
  LODWORD(v111) = *(_DWORD *)(v45 + 32);
  if (v111 > 0x40) {
    operator new[]();
  }
  uint64_t v47 = *(void **)(v45 + 24);
  unsigned int v48 = (void *)(v46 + 24);
  unint64_t v110 = v47;
  llvm::APInt::operator+=((uint64_t)&v110, 1uLL);
  LODWORD(v113) = v111;
  unsigned int __s2 = v110;
  LODWORD(v111) = 0;
  unsigned int v49 = *(_DWORD *)(v46 + 32);
  unsigned int v109 = v49;
  if (v49 > 0x40) {
    operator new[]();
  }
  unint64_t v50 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v49;
  if (!v49) {
    unint64_t v50 = 0;
  }
  __s1 = (void *)(v50 & ~*v48);
  llvm::APInt::operator++((uint64_t)&__s1);
  uint64_t v51 = v109;
  uint64_t v52 = __s1;
  unsigned int v109 = 0;
  if (v51 > 0x40)
  {
    unint64_t v54 = (unint64_t)__s2;
    if (memcmp(__s1, __s2, ((unint64_t)(v51 + 63) >> 3) & 0x3FFFFFF8))
    {
      if (v52)
      {
        MEMORY[0x1D25D9CB0](v52, 0x1000C8000313F17);
        if (v109 >= 0x41)
        {
          if (__s1) {
            MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
          }
        }
      }
      goto LABEL_68;
    }
    uint64_t v53 = (int8x8_t *)v54;
  }
  else
  {
    uint64_t v53 = (int8x8_t *)__s2;
    unint64_t v54 = (unint64_t)__s1;
    if (__s1 != __s2) {
      goto LABEL_68;
    }
  }
  if (v113 > 0x40)
  {
    int v56 = 0;
    unint64_t v57 = ((unint64_t)v113 + 63) >> 6;
    do
    {
      int8x8_t v58 = *v53++;
      uint8x8_t v59 = (uint8x8_t)vcnt_s8(v58);
      v59.i16[0] = vaddlv_u8(v59);
      v56 += v59.i32[0];
      --v57;
    }
    while (v57);
    BOOL v55 = v56 == 1;
  }
  else
  {
    if (!v54) {
      goto LABEL_61;
    }
    BOOL v55 = (v54 & (v54 - 1)) == 0;
  }
  LODWORD(v54) = v55;
LABEL_61:
  if (v51 >= 0x41)
  {
    if (v52)
    {
      MEMORY[0x1D25D9CB0](v52, 0x1000C8000313F17);
      if (v109 >= 0x41)
      {
        if (__s1) {
          MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
        }
      }
    }
  }
  if (v54)
  {
    int v60 = 0;
    uint64_t v61 = sub_1CBAB77A4((unsigned int *)&__s2) + 1;
    goto LABEL_78;
  }
LABEL_68:
  uint64_t v62 = *(unsigned int *)(v46 + 32);
  if (v62 >= 0x41)
  {
    int v63 = 0;
    int64_t v64 = (unint64_t)(v62 + 63) >> 6;
    do
    {
      if (v64-- < 1) {
        break;
      }
      unint64_t v66 = *(void *)(*v48 + 8 * v64);
      v63 += __clz(v66);
    }
    while (!v66);
    int v67 = v62 | 0xFFFFFFC0;
    if ((v62 & 0x3F) == 0) {
      int v67 = 0;
    }
    if ((v62 - v63 - v67) > 0x40) {
      goto LABEL_77;
    }
    unsigned int v48 = (void *)*v48;
  }
  if (*v48)
  {
LABEL_77:
    uint64_t v61 = 0;
    int v60 = 0;
    uint64_t v23 = 0;
    goto LABEL_78;
  }
  if (v113 > 0x40)
  {
    uint64_t v75 = 0;
    int v76 = 0;
    do
    {
      uint8x8_t v77 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)__s2 + v75));
      v77.i16[0] = vaddlv_u8(v77);
      v76 += v77.i32[0];
      v75 += 8;
    }
    while (((((unint64_t)v113 + 63) >> 3) & 0x3FFFFFF8) != v75);
    if (v76 != 1)
    {
      uint64_t v61 = 0;
      int v60 = 0;
      uint64_t v23 = 0;
LABEL_82:
      MEMORY[0x1D25D9CB0]();
      goto LABEL_83;
    }
    goto LABEL_96;
  }
  if (!__s2) {
    return 0;
  }
  if (((unint64_t)__s2 & ((unint64_t)__s2 - 1)) != 0) {
    goto LABEL_77;
  }
LABEL_96:
  uint64_t v61 = sub_1CBAB77A4((unsigned int *)&__s2);
  int v60 = 1;
LABEL_78:
  if (v113 >= 0x41 && __s2 != 0) {
    goto LABEL_82;
  }
LABEL_83:
  if (!v23) {
    return v23;
  }
  if (*(_WORD *)(v23 + 24) != 208) {
    return 0;
  }
  uint64_t v69 = *(void *)(**(void **)(v23 + 32) + 40) + 16 * *(unsigned int *)(*(void *)(v23 + 32) + 8);
  uint64_t v70 = *(void **)v69;
  uint64_t v71 = *(void *)(v69 + 8);
  unsigned int __s2 = v70;
  uint64_t v113 = v71;
  int v72 = v70;
  if ((int)v61 <= 31)
  {
    switch(v61)
    {
      case 1:
        uint64_t v73 = 0;
        unint64_t v74 = 2;
        goto LABEL_106;
      case 0x10:
        uint64_t v73 = 0;
        unint64_t v74 = 4;
        goto LABEL_106;
      case 8:
        uint64_t v73 = 0;
        unint64_t v74 = 3;
        goto LABEL_106;
    }
  }
  else
  {
    switch(v61)
    {
      case 0x20:
        uint64_t v73 = 0;
        unint64_t v74 = 5;
        goto LABEL_106;
      case 0x40:
        uint64_t v73 = 0;
        unint64_t v74 = 6;
        goto LABEL_106;
      case 0x80:
        uint64_t v73 = 0;
        unint64_t v74 = 7;
        goto LABEL_106;
    }
  }
  uint64_t v104 = (llvm::LLVMContext *)v61;
  uint64_t v105 = v70;
  uint64_t v106 = v71;
  uint64_t v107 = llvm::IntegerType::get(*(llvm::IntegerType **)(a10 + 56), v104);
  uint64_t v71 = v106;
  uint64_t v70 = v105;
  uint64_t v73 = v107;
  unint64_t v74 = 0;
LABEL_106:
  unint64_t v110 = (void *)v74;
  uint64_t v111 = v73;
  if (v72)
  {
    if ((v72 - 15) >= 0x9C) {
      goto LABEL_109;
    }
    goto LABEL_108;
  }
  if ((*(_DWORD *)(v71 + 8) & 0xFE) == 0x12)
  {
LABEL_108:
    uint64_t v78 = *(llvm::LLVMContext **)(a10 + 56);
    uint64_t v79 = (llvm::Type *)sub_1CC4A0738((llvm::EVT *)&__s2);
    unint64_t v74 = sub_1CB882C1C(v78, v74, v73, v79);
    uint64_t v73 = v80;
    unint64_t v110 = (void *)v74;
    uint64_t v111 = v80;
    uint64_t v70 = __s2;
    uint64_t v71 = v113;
  }
LABEL_109:
  if (v60) {
    uint64_t v81 = 211;
  }
  else {
    uint64_t v81 = 210;
  }
  if (!(*(unsigned int (**)(void, uint64_t, void *, uint64_t, unint64_t, uint64_t))(**(void **)(a10 + 24) + 1472))(*(void *)(a10 + 24), v81, v70, v71, v74, v73))return 0; {
  uint64_t v84 = *(void **)(v23 + 64);
  }
  __s1 = v84;
  if (v84) {
    llvm::MetadataTracking::track((uint64_t)&__s1, (unsigned __int8 *)v84, 2);
  }
  unsigned int v109 = *(_DWORD *)(v23 + 60);
  uint64_t v85 = *(uint64_t **)(v23 + 32);
  uint64_t v86 = *v85;
  uint64_t v87 = v85[1];
  unint64_t v88 = sub_1CD3DD468((unsigned __int8 *)&v110, (uint64_t)v84, v82);
  uint64_t v90 = sub_1CD7EDE1C(a10, v88, v89);
  uint64_t v93 = *(void *)(a10 + 832);
  if (v93) {
    LOWORD(v93) = *(_WORD *)(v93 + 8);
  }
  uint64_t v95 = sub_1CCFDED5C(a10, v81, (const llvm::APInt *)&__s1, (llvm *)v74, v73, v86, v87, v92, v90, v91, v93);
  uint64_t v96 = *(uint64_t **)(a5 + 40);
  uint64_t v97 = *v96;
  uint64_t v98 = v96[1];
  if (v60) {
    uint64_t v99 = sub_1CD7EB80C(a10, (uint64_t)v95, v94, (uint64_t)&__s1, v97, v98);
  }
  else {
    uint64_t v99 = sub_1CD7EB744(a10, (uint64_t)v95, v94, (uint64_t)&__s1, v97, v98);
  }
  uint64_t v23 = v99;
  if (__s1)
  {
    int v100 = *(unsigned __int8 *)__s1;
    if ((v100 - 4) > 0x1E)
    {
      if ((v100 - 3) >= 0xFFFFFFFE) {
        __int16 v103 = __s1;
      }
      else {
        __int16 v103 = 0;
      }
      if ((v100 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v102 = (unint64_t)v103 + 8;
LABEL_136:
        p_s1 = &__s1;
        sub_1CC5FA668(v102 + 16, &p_s1);
        return v23;
      }
      if (v100 == 3) {
        *((void *)__s1 + 1) = 0;
      }
    }
    else if ((*((unsigned char *)__s1 + 1) & 0x7F) == 2 || *((_DWORD *)__s1 + 3))
    {
      uint64_t v101 = *((void *)__s1 + 2);
      if ((v101 & 4) != 0)
      {
        unint64_t v102 = v101 & 0xFFFFFFFFFFFFFFF8;
        if (v102) {
          goto LABEL_136;
        }
      }
    }
  }
  return v23;
}

uint64_t sub_1CCF46C30(uint64_t a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, int a9, uint64_t a10)
{
  if (a1 != a5 || a2 != a6)
  {
    if (*(_WORD *)(a5 + 24) != 201) {
      return 0;
    }
    uint64_t v18 = *(void *)(a5 + 32);
    if (*(void *)v18 != a1 || *(_DWORD *)(v18 + 8) != a2) {
      return 0;
    }
  }
  if (a9 != 12) {
    return 0;
  }
  uint64_t v13 = 0;
  if (*(_WORD *)(a1 + 24) != 209) {
    return v13;
  }
  uint64_t v14 = sub_1CCFD8CD8(a3, a4, 0, 0);
  uint64_t v15 = sub_1CCFD8CD8(a7, a8, 0, 0);
  if (!v14) {
    return 0;
  }
  uint64_t v13 = 0;
  if (!v15) {
    return v13;
  }
  uint64_t v16 = *(void *)(v14 + 80);
  uint64_t v17 = *(void *)(v15 + 80);
  unsigned int v77 = *(_DWORD *)(v16 + 32);
  if (v77 > 0x40) {
    operator new[]();
  }
  int v76 = *(int8x8_t **)(v16 + 24);
  llvm::APInt::operator+=((uint64_t)&v76, 1uLL);
  uint64_t v19 = v77;
  int8x8_t v20 = (int8x8_t)v76;
  unsigned int v77 = 0;
  if (v19 > 0x40)
  {
    int v22 = 0;
    unint64_t v23 = (unint64_t)(v19 + 63) >> 6;
    int v24 = v76;
    do
    {
      int8x8_t v25 = *v24++;
      uint8x8_t v26 = (uint8x8_t)vcnt_s8(v25);
      v26.i16[0] = vaddlv_u8(v26);
      v22 += v26.i32[0];
      --v23;
    }
    while (v23);
    if (v22 != 1)
    {
      char v29 = 1;
LABEL_35:
      if (v20) {
        MEMORY[0x1D25D9CB0](*(void *)&v20, 0x1000C8000313F17);
      }
      goto LABEL_37;
    }
  }
  else
  {
    uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v76);
    v21.i16[0] = vaddlv_u8(v21);
    if (v21.u32[0] != 1) {
      return 0;
    }
  }
  unsigned int v27 = *(_DWORD *)(v16 + 32);
  unsigned int v28 = *(_DWORD *)(v17 + 32);
  if (v27 >= v28)
  {
    uint64_t v30 = (void *)(v17 + 24);
    if (v28 < v27)
    {
      if (v27 > 0x40) {
        operator new[]();
      }
      int v31 = (const void *)(*v30 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v27));
    }
    else
    {
      if (v28 > 0x40) {
        operator new[]();
      }
      int v31 = (const void *)*v30;
    }
    uint64_t v32 = *(unsigned int *)(v16 + 32);
    if (v32 > 0x40) {
      BOOL v33 = memcmp(*(const void **)(v16 + 24), v31, ((unint64_t)(v32 + 63) >> 3) & 0x3FFFFFF8) == 0;
    }
    else {
      BOOL v33 = *(void *)(v16 + 24) == (void)v31;
    }
    char v34 = v33;
    char v29 = v34 ^ 1;
  }
  else
  {
    char v29 = 1;
  }
  if (v19 >= 0x41) {
    goto LABEL_35;
  }
LABEL_37:
  if (v77 >= 0x41 && v76) {
    MEMORY[0x1D25D9CB0](v76, 0x1000C8000313F17);
  }
  if (v29) {
    return 0;
  }
  unsigned int v73 = *(_DWORD *)(v16 + 32);
  if (v73 > 0x40) {
    operator new[]();
  }
  uint64_t v72 = *(void *)(v16 + 24);
  llvm::APInt::operator+=((uint64_t)&v72, 1uLL);
  LODWORD(v75) = v73;
  uint64_t v74 = v72;
  unsigned int v73 = 0;
  unsigned int v35 = (llvm::LLVMContext *)sub_1CBAB77A4((unsigned int *)&v74);
  if (v75 >= 0x41 && v74) {
    MEMORY[0x1D25D9CB0](v74, 0x1000C8000313F17);
  }
  if (v73 >= 0x41 && v72) {
    MEMORY[0x1D25D9CB0](v72, 0x1000C8000313F17);
  }
  uint64_t v36 = (uint64_t *)(*(void *)(**(void **)(a1 + 32) + 40) + 16 * *(unsigned int *)(*(void *)(a1 + 32) + 8));
  uint64_t v37 = *v36;
  uint64_t v38 = v36[1];
  uint64_t v74 = *v36;
  uint64_t v75 = v38;
  if ((int)v35 <= 31)
  {
    switch(v35)
    {
      case 1:
        uint64_t v39 = 0;
        unint64_t v40 = 2;
        goto LABEL_63;
      case 0x10:
        uint64_t v39 = 0;
        unint64_t v40 = 4;
        goto LABEL_63;
      case 8:
        uint64_t v39 = 0;
        unint64_t v40 = 3;
        goto LABEL_63;
    }
  }
  else
  {
    switch(v35)
    {
      case 0x20:
        uint64_t v39 = 0;
        unint64_t v40 = 5;
        goto LABEL_63;
      case 0x40:
        uint64_t v39 = 0;
        unint64_t v40 = 6;
        goto LABEL_63;
      case 0x80:
        uint64_t v39 = 0;
        unint64_t v40 = 7;
        goto LABEL_63;
    }
  }
  uint64_t v39 = llvm::IntegerType::get(*(llvm::IntegerType **)(a10 + 56), v35);
  unint64_t v40 = 0;
LABEL_63:
  unint64_t v70 = v40;
  uint64_t v71 = v39;
  if ((_BYTE)v37)
  {
    if (v37 - 15 >= 0x9C) {
      goto LABEL_66;
    }
    goto LABEL_65;
  }
  if ((*(_DWORD *)(v38 + 8) & 0xFE) == 0x12)
  {
LABEL_65:
    uint64_t v41 = *(llvm::LLVMContext **)(a10 + 56);
    uint64_t v42 = (llvm::Type *)sub_1CC4A0738((llvm::EVT *)&v74);
    unint64_t v40 = sub_1CB882C1C(v41, v40, v39, v42);
    uint64_t v39 = v43;
    unint64_t v70 = v40;
    uint64_t v71 = v43;
    uint64_t v37 = v74;
    uint64_t v38 = v75;
  }
LABEL_66:
  if (!(*(unsigned int (**)(void, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(**(void **)(a10 + 24) + 1472))(*(void *)(a10 + 24), 211, v37, v38, v40, v39))return 0; {
  uint64_t v46 = *(unsigned __int8 **)(a1 + 64);
  }
  uint64_t v68 = v46;
  if (v46) {
    llvm::MetadataTracking::track((uint64_t)&v68, v46, 2);
  }
  int v69 = *(_DWORD *)(a1 + 60);
  uint64_t v47 = *(uint64_t **)(a1 + 32);
  uint64_t v48 = *v47;
  uint64_t v49 = v47[1];
  unint64_t v50 = sub_1CD3DD468((unsigned __int8 *)&v70, (uint64_t)v46, v44);
  uint64_t v52 = sub_1CD7EDE1C(a10, v50, v51);
  uint64_t v55 = *(void *)(a10 + 832);
  if (v55) {
    LOWORD(v55) = *(_WORD *)(v55 + 8);
  }
  int v56 = sub_1CCFDED5C(a10, 211, (const llvm::APInt *)&v68, (llvm *)v40, v39, v48, v49, v54, v52, v53, v55);
  uint64_t v58 = v57;
  if (v68)
  {
    int v59 = *v68;
    if ((v59 - 4) > 0x1E)
    {
      if ((v59 - 3) >= 0xFFFFFFFE) {
        unint64_t v65 = v68;
      }
      else {
        unint64_t v65 = 0;
      }
      if ((v59 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v66 = (unint64_t)(v65 + 8);
LABEL_101:
        uint64_t v78 = &v68;
        sub_1CC5FA668(v66 + 16, &v78);
        goto LABEL_79;
      }
      if (v59 == 3) {
        *((void *)v68 + 1) = 0;
      }
    }
    else if ((v68[1] & 0x7F) == 2 || *((_DWORD *)v68 + 3))
    {
      uint64_t v67 = *((void *)v68 + 2);
      if ((v67 & 4) != 0)
      {
        unint64_t v66 = v67 & 0xFFFFFFFFFFFFFFF8;
        if (v66) {
          goto LABEL_101;
        }
      }
    }
  }
LABEL_79:
  int v60 = *(unsigned __int8 **)(a1 + 64);
  uint64_t v68 = v60;
  if (v60) {
    llvm::MetadataTracking::track((uint64_t)&v68, v60, 2);
  }
  int v69 = *(_DWORD *)(a1 + 60);
  uint64_t v13 = sub_1CD7EB80C(a10, (uint64_t)v56, v58, (uint64_t)&v68, *(void *)(*(void *)(a7 + 40) + 16 * a8), *(void *)(*(void *)(a7 + 40) + 16 * a8 + 8));
  if (v68)
  {
    int v61 = *v68;
    if ((v61 - 4) > 0x1E)
    {
      if ((v61 - 3) >= 0xFFFFFFFE) {
        int64_t v64 = v68;
      }
      else {
        int64_t v64 = 0;
      }
      if ((v61 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v63 = (unint64_t)(v64 + 8);
LABEL_93:
        uint64_t v78 = &v68;
        sub_1CC5FA668(v63 + 16, &v78);
        return v13;
      }
      if (v61 == 3) {
        *((void *)v68 + 1) = 0;
      }
    }
    else if ((v68[1] & 0x7F) == 2 || *((_DWORD *)v68 + 3))
    {
      uint64_t v62 = *((void *)v68 + 2);
      if ((v62 & 4) != 0)
      {
        unint64_t v63 = v62 & 0xFFFFFFFFFFFFFFF8;
        if (v63) {
          goto LABEL_93;
        }
      }
    }
  }
  return v13;
}

uint64_t sub_1CCF473B8(uint64_t a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, int a9)
{
  if (a1 != a5 || a2 != a6)
  {
    if (*(_WORD *)(a5 + 24) != 201) {
      return 0;
    }
    uint64_t v18 = *(void *)(a5 + 32);
    if (*(void *)v18 != a1 || *(_DWORD *)(v18 + 8) != a2) {
      return 0;
    }
  }
  uint64_t v11 = sub_1CCFD8CD8(a3, a4, 0, 0);
  uint64_t v12 = sub_1CCFD8CD8(a7, a8, 0, 0);
  uint64_t result = 0;
  if (v11 && v12)
  {
    uint64_t v14 = *(void *)(v11 + 80);
    uint64_t v15 = *(void *)(v12 + 80);
    unsigned int v16 = *(_DWORD *)(v14 + 32);
    unsigned int v17 = *(_DWORD *)(v15 + 32);
    if (v16 < v17) {
      return 0;
    }
    if (v17 < v16)
    {
      llvm::APInt::sext(v15 + 24, v16, (uint64_t)&__s2);
    }
    else
    {
      unsigned int v25 = *(_DWORD *)(v15 + 32);
      if (v17 > 0x40) {
        operator new[]();
      }
      unsigned int __s2 = *(void **)(v15 + 24);
    }
    uint64_t v19 = *(unsigned int *)(v14 + 32);
    int8x8_t v20 = __s2;
    if (v19 > 0x40) {
      BOOL v21 = memcmp(*(const void **)(v14 + 24), __s2, ((unint64_t)(v19 + 63) >> 3) & 0x3FFFFFF8) == 0;
    }
    else {
      BOOL v21 = *(void *)(v14 + 24) == (void)__s2;
    }
    int v22 = v21;
    if (v25 >= 0x41 && v20) {
      MEMORY[0x1D25D9CB0](v20, 0x1000C8000313F17);
    }
    if (!v22) {
      return 0;
    }
    if (a9 == 18) {
      unsigned int v23 = 168;
    }
    else {
      unsigned int v23 = 0;
    }
    if (a9 == 20) {
      return 167;
    }
    else {
      return v23;
    }
  }
  return result;
}

uint64_t *sub_1CCF47574(void *a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  uint64_t v12 = sub_1CCF42D20(a2, a3, a4);
  if (!v12) {
    return 0;
  }
  uint64_t v13 = v12;
  uint64_t v14 = sub_1CCF42D20(a2, a5, a6);
  if (!v14) {
    return 0;
  }
  uint64_t v16 = v14;
  uint64_t v17 = 0;
  int v18 = *(unsigned __int16 *)(v13 + 24);
  if (v18 != *(unsigned __int16 *)(v14 + 24)) {
    return (uint64_t *)v17;
  }
  uint64_t v19 = 0;
  if ((v18 & 0xFFFFFFFD) != 0x4D) {
    return v19;
  }
  if (*(_WORD *)(v13 + 56))
  {
    int8x8_t v20 = *(void **)(v13 + 32);
    uint64_t v21 = 40 * *(unsigned __int16 *)(v13 + 56);
    while (*v20 != v14)
    {
      v20 += 5;
      v21 -= 40;
      if (!v21) {
        goto LABEL_11;
      }
    }
    uint64_t v16 = v13;
    uint64_t v13 = v14;
  }
LABEL_11:
  uint64_t v22 = *(void *)(v16 + 32);
  if (*(void *)v22 == v13 && !*(_DWORD *)(v22 + 8))
  {
    BOOL v23 = 1;
  }
  else
  {
    if (*(void *)(v22 + 40) != v13 || *(_DWORD *)(v22 + 48)) {
      return 0;
    }
    BOOL v23 = *(void *)v22 == v13 && *(_DWORD *)(v22 + 8) == 0;
    if (v18 == 79 && !v23) {
      return 0;
    }
  }
  int v24 = (const char *)(v18 == 77 ? 72 : 73);
  uint64_t v17 = **(void **)(v13 + 40);
  if (!**(void **)(v13 + 40)) {
    return (uint64_t *)v17;
  }
  uint64_t v25 = *(void *)(v22 + 40 * v23);
  if (v17 != 1 && !*(void *)&a2[2 * v17 + 24]) {
    return 0;
  }
  if ((*((unsigned char *)a2 + 390 * **(void **)(v13 + 40) + v24 + 3862) & 0xFB) != 0) {
    return 0;
  }
  if (*(_WORD *)(v25 + 24) != 199) {
    return 0;
  }
  uint64_t v26 = *(void *)(v25 + 32);
  uint64_t v27 = *(void *)v26;
  uint64_t v28 = *(unsigned int *)(v26 + 8);
  if (*(unsigned char *)(*(void *)(v27 + 40) + 16 * v28) != 2) {
    return 0;
  }
  int v29 = v28;
  uint64_t v30 = *(unsigned __int8 **)(a7 + 64);
  uint64_t v36 = v30;
  if (v30) {
    llvm::MetadataTracking::track((uint64_t)&v36, v30, 2);
  }
  int v37 = *(_DWORD *)(a7 + 60);
  uint64_t v19 = sub_1CD7FFB94(a1, v24, (const llvm::APInt *)&v36, *(void *)(v16 + 40), *(unsigned __int16 *)(v16 + 58), **(void **)(v13 + 32), *(void *)(*(void *)(v13 + 32) + 8), v15, *(void *)(*(void *)(v13 + 32) + 40), *(void *)(*(void *)(v13 + 32) + 48), v27, v29);
  sub_1CD800DA0((uint64_t)a1, v16, 0, (uint64_t)v19, 0);
  if (*(_WORD *)(a7 + 24) == 171) {
    uint64_t v19 = sub_1CD7EBF14((uint64_t)a1, 0, (const llvm::APInt *)&v36, (llvm *)2, 0, 0, 0);
  }
  if (v36)
  {
    int v31 = *v36;
    if ((v31 - 4) > 0x1E)
    {
      if ((v31 - 3) >= 0xFFFFFFFE) {
        unsigned int v35 = v36;
      }
      else {
        unsigned int v35 = 0;
      }
      if ((v31 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v33 = (unint64_t)(v35 + 8);
LABEL_49:
        uint64_t v38 = &v36;
        sub_1CC5FA668(v33 + 16, &v38);
        return v19;
      }
      if (v31 == 3) {
        *((void *)v36 + 1) = 0;
      }
    }
    else if ((v36[1] & 0x7F) == 2 || *((_DWORD *)v36 + 3))
    {
      uint64_t v32 = *((void *)v36 + 2);
      if ((v32 & 4) != 0)
      {
        unint64_t v33 = v32 & 0xFFFFFFFFFFFFFFF8;
        if (v33) {
          goto LABEL_49;
        }
      }
    }
  }
  return v19;
}

uint64_t *sub_1CCF4787C(uint64_t *a1, uint64_t a2, BOOL a3)
{
  int v5 = *(unsigned __int16 *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint8x8_t v7 = *(void **)(a2 + 40);
  uint64_t v8 = *(void *)v6;
  unsigned int v9 = *(_DWORD *)(v6 + 8);
  uint64_t v10 = v7[1];
  *(void *)&long long v173 = *v7;
  uint64_t v11 = v173;
  *((void *)&v173 + 1) = v10;
  long long v172 = v173;
  int v12 = v173;
  if ((_BYTE)v173)
  {
    if (v173 - 15 < 0x9C) {
      return 0;
    }
  }
  else if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12)
  {
    return 0;
  }
  unsigned int v171 = 0;
  if (v5 == 204)
  {
    int v13 = 0;
    long long v172 = *(_OWORD *)(*(void *)(v6 + 40) + 80);
    uint64_t v14 = 2;
    goto LABEL_7;
  }
  if ((v5 & 0xFFFE) != 0xB0)
  {
    if (v5 != 171)
    {
      uint64_t v14 = 0;
      goto LABEL_88;
    }
    uint64_t v66 = *(void *)(v6 + 40);
    int v67 = *(unsigned __int16 *)(v66 + 24);
    if (v67 != 35 && v67 != 11) {
      return 0;
    }
    uint64_t v69 = *(void *)(v66 + 80);
    unint64_t v70 = (int8x8_t **)(v69 + 24);
    LODWORD(v166) = 0;
    uint64_t v71 = *(unsigned int *)(v69 + 32);
    if (v71 > 0x40)
    {
      uint64_t v125 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)(v69 + 24));
      if (v125)
      {
        uint64_t v73 = v125;
        int v141 = 0;
        int64_t v142 = (unint64_t)(v71 + 63) >> 6;
        do
        {
          BOOL v143 = v142-- < 1;
          if (v143) {
            break;
          }
          unint64_t v144 = (unint64_t)(*v70)[v142];
          v141 += __clz(v144);
        }
        while (!v144);
        int v13 = 0;
        int v145 = v71 | 0xFFFFFFC0;
        if ((v71 & 0x3F) == 0) {
          int v145 = 0;
        }
        if (v145 + v125 + v141 == v71) {
          goto LABEL_84;
        }
      }
    }
    else
    {
      if (*v70) {
        BOOL v72 = (((unint64_t)*v70 + 1) & (unint64_t)*v70) == 0;
      }
      else {
        BOOL v72 = 0;
      }
      if (v72)
      {
        int v13 = 0;
        uint64_t v73 = __clz(__rbit64(~(unint64_t)*v70));
        goto LABEL_84;
      }
    }
    if (!sub_1CD787D94(v70, &v171, &v166)) {
      return 0;
    }
    int v13 = 1;
    uint64_t v73 = v166;
LABEL_84:
    if ((int)v73 <= 31)
    {
      switch(v73)
      {
        case 1:
          uint64_t v74 = 0;
          uint64_t v75 = 2;
          goto LABEL_115;
        case 0x10:
          uint64_t v74 = 0;
          uint64_t v75 = 4;
          goto LABEL_115;
        case 8:
          uint64_t v74 = 0;
          uint64_t v75 = 3;
          goto LABEL_115;
      }
    }
    else
    {
      switch(v73)
      {
        case 0x20:
          uint64_t v74 = 0;
          uint64_t v75 = 5;
LABEL_115:
          *(void *)&long long v172 = v75;
          *((void *)&v172 + 1) = v74;
          uint64_t v14 = 3;
          goto LABEL_7;
        case 0x40:
          uint64_t v74 = 0;
          uint64_t v75 = 6;
          goto LABEL_115;
        case 0x80:
          uint64_t v74 = 0;
          uint64_t v75 = 7;
          goto LABEL_115;
      }
    }
    int v103 = v13;
    uint64_t v74 = llvm::IntegerType::get(*(llvm::IntegerType **)(*a1 + 56), (llvm::LLVMContext *)v73);
    int v13 = v103;
    uint64_t v75 = 0;
    goto LABEL_115;
  }
  if (*(_WORD *)(v8 + 24) == 253) {
    uint64_t v30 = v8;
  }
  else {
    uint64_t v30 = 0;
  }
  uint64_t v31 = *(void *)(v6 + 40);
  int v32 = *(unsigned __int16 *)(v31 + 24);
  BOOL v33 = v32 == 35 || v32 == 11;
  if (!v33 || !v30) {
    return 0;
  }
  uint64_t v34 = *(void *)(v31 + 80);
  unsigned int v35 = (void *)(v34 + 24);
  if (*(_DWORD *)(v34 + 32) >= 0x41u) {
    unsigned int v35 = (void *)*v35;
  }
  uint64_t v36 = (void *)*v35;
  unsigned int v171 = *v35;
  long long v166 = *(_OWORD *)(v30 + 80);
  int v37 = sub_1CD3E12F4((unsigned __int8 *)&v166, a2, a3);
  if ((unint64_t)v37 <= v36) {
    return 0;
  }
  uint64_t v38 = 2;
  if (v5 == 177) {
    uint64_t v14 = 3;
  }
  else {
    uint64_t v14 = 2;
  }
  uint64_t v39 = (llvm::LLVMContext *)(v37 - v36);
  if ((int)v39 <= 31)
  {
    switch(v39)
    {
      case 1:
        uint64_t v40 = 0;
        goto LABEL_149;
      case 0x10:
        uint64_t v40 = 0;
        uint64_t v38 = 4;
        goto LABEL_149;
      case 8:
        uint64_t v40 = 0;
        uint64_t v38 = 3;
        goto LABEL_149;
    }
LABEL_175:
    uint64_t v126 = v14;
    uint64_t v40 = llvm::IntegerType::get(*(llvm::IntegerType **)(*a1 + 56), v39);
    uint64_t v14 = v126;
    uint64_t v38 = 0;
    goto LABEL_149;
  }
  if (v39 != 32)
  {
    if (v39 == 64)
    {
      uint64_t v40 = 0;
      uint64_t v38 = 6;
      goto LABEL_149;
    }
    if (v39 == 128)
    {
      uint64_t v40 = 0;
      uint64_t v38 = 7;
      goto LABEL_149;
    }
    goto LABEL_175;
  }
  uint64_t v40 = 0;
  uint64_t v38 = 5;
LABEL_149:
  *(void *)&long long v172 = v38;
  *((void *)&v172 + 1) = v40;
  unsigned int v105 = *(unsigned __int16 *)(v30 + 26);
  if ((v105 & 0x800) != 0 && v14 != ((v105 >> 10) & 3)) {
    return 0;
  }
LABEL_88:
  int v13 = 0;
  unsigned int v16 = 0;
  uint64_t v15 = (void *)a2;
  if (v5 == 177) {
    goto LABEL_9;
  }
LABEL_7:
  if (*(_WORD *)(v8 + 24) == 177)
  {
    uint64_t v15 = (void *)v8;
    unsigned int v16 = v9;
LABEL_9:
    uint64_t v17 = v15[6];
    if (!v17) {
      return 0;
    }
    int v18 = 1;
    do
    {
      if (*(_DWORD *)(v17 + 8) == v16)
      {
        if (!v18) {
          return 0;
        }
        --v18;
      }
      uint64_t v17 = *(void *)(v17 + 32);
    }
    while (v17);
    if (v18) {
      return 0;
    }
    uint64_t v19 = (void *)v15[4];
    uint64_t v20 = *(_WORD *)(*v19 + 24) == 253 ? *v19 : 0;
    uint64_t v21 = v19[5];
    int v22 = *(unsigned __int16 *)(v21 + 24);
    BOOL v23 = v22 == 35 || v22 == 11;
    if (!v23 || !v20) {
      return 0;
    }
    uint64_t v24 = *(void *)(v21 + 80);
    uint64_t v25 = (void *)(v24 + 24);
    if (*(_DWORD *)(v24 + 32) >= 0x41u) {
      uint64_t v25 = (void *)*v25;
    }
    unsigned int v161 = v14;
    int v159 = v13;
    uint64_t v26 = (void *)*v25;
    unsigned int v171 = *v25;
    long long v166 = *(_OWORD *)(v20 + 80);
    if ((_BYTE)v166) {
      unint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v166);
    }
    else {
      unint64_t ExtendedSizeInBits = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v166);
    }
    if (v28 == 1)
    {
      unint64_t v158 = ExtendedSizeInBits;
      unint64_t ExtendedSizeInBits = v158;
    }
    if (ExtendedSizeInBits <= v26 || (*(_WORD *)(v20 + 26) & 0xC00) == 0x800) {
      return 0;
    }
    int v98 = ExtendedSizeInBits;
    unint64_t v76 = ExtendedSizeInBits - v26;
    if ((unint64_t)sub_1CD3E12F4((unsigned __int8 *)&v172, (uint64_t)v28, v29) <= v76)
    {
      int v13 = v159;
      uint64_t v14 = v161;
LABEL_181:
      uint64_t v127 = v15[6];
      uint64_t v128 = *(void *)(v127 + 16);
      int v129 = 1;
      do
      {
        if (*(_DWORD *)(v127 + 8) == v16)
        {
          if (!v129) {
            goto LABEL_198;
          }
          --v129;
        }
        uint64_t v127 = *(void *)(v127 + 32);
      }
      while (v127);
      if (v129
        || *(_WORD *)(v128 + 24) != 171
        || ((uint64_t v130 = *(void *)(*(void *)(v128 + 32) + 40), v131 = *(unsigned __int16 *)(v130 + 24), v131 != 35)
          ? (BOOL v132 = v131 == 11)
          : (BOOL v132 = 1),
            !v132))
      {
LABEL_198:
        uint64_t v137 = v15[4];
        uint64_t v8 = *(void *)v137;
        unsigned int v9 = *(_DWORD *)(v137 + 8);
        if (!v26) {
          goto LABEL_49;
        }
LABEL_60:
        unsigned int v43 = 0;
        goto LABEL_61;
      }
      unsigned int v163 = v14;
      uint64_t v133 = *(void *)(v130 + 80);
      uint64_t v134 = (llvm::APInt *)(v133 + 24);
      uint64_t v135 = *(unsigned int *)(v133 + 32);
      if (v135 > 0x40)
      {
        int v149 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)(v133 + 24));
        int v13 = v159;
        uint64_t v14 = v163;
        if (!v149) {
          goto LABEL_198;
        }
        int v150 = 0;
        int64_t v151 = (unint64_t)(v135 + 63) >> 6;
        do
        {
          BOOL v143 = v151-- < 1;
          if (v143) {
            break;
          }
          unint64_t v152 = *(void *)(*(void *)v134 + 8 * v151);
          v150 += __clz(v152);
        }
        while (!v152);
        int v153 = v135 | 0xFFFFFFC0;
        if ((v135 & 0x3F) == 0) {
          int v153 = 0;
        }
        int v13 = v159;
        uint64_t v14 = v163;
        if (v153 + v149 + v150 != v135) {
          goto LABEL_198;
        }
        uint64_t v138 = (llvm::LLVMContext *)llvm::APInt::countTrailingOnesSlowCase(v134);
      }
      else
      {
        if (*(void *)v134) {
          BOOL v136 = ((*(void *)v134 + 1) & *(void *)v134) == 0;
        }
        else {
          BOOL v136 = 0;
        }
        int v13 = v159;
        uint64_t v14 = v14;
        if (!v136) {
          goto LABEL_198;
        }
        uint64_t v138 = (llvm::LLVMContext *)__clz(__rbit64(~*(void *)v134));
      }
      if ((int)v138 <= 31)
      {
        switch(v138)
        {
          case 1:
            uint64_t v139 = 0;
            uint64_t v140 = 2;
            goto LABEL_222;
          case 0x10:
            uint64_t v139 = 0;
            uint64_t v140 = 4;
            goto LABEL_222;
          case 8:
            uint64_t v139 = 0;
            uint64_t v140 = 3;
            goto LABEL_222;
        }
      }
      else
      {
        switch(v138)
        {
          case 0x20:
            uint64_t v139 = 0;
            uint64_t v140 = 5;
            goto LABEL_222;
          case 0x40:
            uint64_t v139 = 0;
            uint64_t v140 = 6;
            goto LABEL_222;
          case 0x80:
            uint64_t v139 = 0;
            uint64_t v140 = 7;
            goto LABEL_222;
        }
      }
      uint64_t v139 = llvm::IntegerType::get(*(llvm::IntegerType **)(*a1 + 56), v138);
      uint64_t v140 = 0;
LABEL_222:
      *(void *)&long long v166 = v140;
      *((void *)&v166 + 1) = v139;
      uint64_t v146 = sub_1CD3E12F4((unsigned __int8 *)&v172, (uint64_t)v138, v99);
      if (v146 > sub_1CD3E12F4((unsigned __int8 *)&v166, v147, v148)
        && *(unsigned char *)(v15[5] + 16 * v16)
        && (_BYTE)v166
        && ((*(unsigned __int16 *)(a1[1]
                                 + 358 * *(unsigned __int8 *)(v15[5] + 16 * v16)
                                 + 2 * v166
                                 + 73672) >> (4 * v163)) & 0xF) == 0)
      {
        long long v172 = v166;
      }
      int v13 = v159;
      uint64_t v14 = v163;
      goto LABEL_198;
    }
    if (v161 != 2)
    {
      int v100 = (llvm::LLVMContext *)(v98 - v26);
      if ((int)v100 <= 31)
      {
        switch(v100)
        {
          case 1:
            uint64_t v101 = 0;
            uint64_t v102 = 2;
            goto LABEL_180;
          case 0x10:
            uint64_t v101 = 0;
            uint64_t v102 = 4;
            goto LABEL_180;
          case 8:
            uint64_t v101 = 0;
            uint64_t v102 = 3;
            goto LABEL_180;
        }
      }
      else
      {
        switch(v100)
        {
          case 0x20:
            uint64_t v101 = 0;
            uint64_t v102 = 5;
LABEL_180:
            *(void *)&long long v172 = v102;
            *((void *)&v172 + 1) = v101;
            uint64_t v14 = 3;
            int v13 = v159;
            goto LABEL_181;
          case 0x40:
            uint64_t v101 = 0;
            uint64_t v102 = 6;
            goto LABEL_180;
          case 0x80:
            uint64_t v101 = 0;
            uint64_t v102 = 7;
            goto LABEL_180;
        }
      }
      uint64_t v101 = llvm::IntegerType::get(*(llvm::IntegerType **)(*a1 + 56), v100);
      uint64_t v102 = 0;
      goto LABEL_180;
    }
    return 0;
  }
  LODWORD(v26) = v171;
  if (v171) {
    goto LABEL_60;
  }
LABEL_49:
  if (*(_WORD *)(v8 + 24) != 175) {
    goto LABEL_60;
  }
  uint64_t v41 = *(void *)(v8 + 48);
  if (!v41) {
    goto LABEL_60;
  }
  int v42 = 1;
  do
  {
    if (*(_DWORD *)(v41 + 8) == v9)
    {
      if (!v42) {
        goto LABEL_60;
      }
      --v42;
    }
    uint64_t v41 = *(void *)(v41 + 32);
  }
  while (v41);
  unsigned int v43 = 0;
  if (!v42 && v172 == v12)
  {
    if (!v12 && *((void *)&v172 + 1) != v10) {
      goto LABEL_60;
    }
    uint64_t v79 = v14;
    int v80 = v13;
    uint64_t v81 = (void *)(*(void *)(v8 + 40) + 16 * v9);
    if (!(*(unsigned int (**)(uint64_t, void, void, uint64_t, uint64_t))(*(void *)a1[1] + 1384))(a1[1], *v81, v81[1], v11, v10))
    {
      unsigned int v43 = 0;
      int v13 = v80;
      uint64_t v14 = v79;
      goto LABEL_61;
    }
    BOOL v82 = *(uint64_t **)(v8 + 32);
    uint64_t v83 = v82[5];
    int v84 = *(unsigned __int16 *)(v83 + 24);
    BOOL v85 = v84 == 35 || v84 == 11;
    int v13 = v80;
    uint64_t v14 = v79;
    if (!v85) {
      goto LABEL_60;
    }
    uint64_t v86 = *(void *)(v83 + 80);
    uint64_t v87 = (void *)(v86 + 24);
    if (*(_DWORD *)(v86 + 32) >= 0x41u) {
      uint64_t v87 = (void *)*v87;
    }
    unsigned int v43 = *(_DWORD *)v87;
    uint64_t v8 = *v82;
  }
LABEL_61:
  if (*(_WORD *)(v8 + 24) != 253) {
    return 0;
  }
  if ((*(_WORD *)(*(void *)(v8 + 96) + 36) & 0xF00) != 0) {
    return 0;
  }
  if ((*(unsigned char *)(v8 + 26) & 8) != 0) {
    return 0;
  }
  int v44 = v13;
  int v45 = v14;
  if (!sub_1CCF4AD00((uint64_t)a1, v8, v14, (unsigned __int8 *)&v172, v26)) {
    return 0;
  }
  int v162 = v45;
  uint64_t v46 = v171;
  unsigned int v47 = v171;
  if (*(unsigned char *)(*(void *)(**(void **)(*a1 + 40) + 40) + 272))
  {
    long long v166 = *(_OWORD *)(v8 + 80);
    int v48 = 8 * sub_1CB896FB8((unsigned __int8 *)&v166);
    unsigned int v47 = v48 - (v46 + 8 * sub_1CB896FB8((unsigned __int8 *)&v172));
  }
  uint64_t v154 = v46;
  uint64_t v49 = v47 >> 3;
  uint64_t v50 = (1 << *(unsigned char *)(*(void *)(v8 + 96) + 34)) | *(void *)(*(void *)(v8 + 96) + 8);
  uint64_t v51 = (1 << (63 - __clz(v50 & -v50))) | v49;
  char v52 = __clz(v51 & -v51);
  uint64_t v53 = *(unsigned __int8 **)(v8 + 64);
  unsigned int v169 = v53;
  if (v53) {
    llvm::MetadataTracking::track((uint64_t)&v169, v53, 2);
  }
  unsigned __int8 v155 = 63 - v52;
  int v170 = *(_DWORD *)(v8 + 60);
  uint64_t v54 = sub_1CD7F6604(*a1, *(void *)(*(void *)(v8 + 32) + 40), *(void *)(*(void *)(v8 + 32) + 48), v49, 0, (const llvm::APInt *)&v169, 3);
  uint64_t v160 = v55;
  sub_1CCEF0788((uint64_t)a1, (uint64_t)v54);
  uint64_t v56 = *((void *)&v173 + 1);
  uint64_t v156 = v173;
  uint64_t v157 = *a1;
  uint64_t v57 = *(uint64_t **)(v8 + 32);
  uint64_t v59 = *v57;
  uint64_t v58 = v57[1];
  int v60 = *(uint64_t **)(v8 + 96);
  if (v162)
  {
    sub_1CB8F0264(v60, v49, (uint64_t)&v165);
    uint64_t v88 = *(void *)(v8 + 96);
    __int16 v89 = *(_WORD *)(v88 + 32);
    long long v90 = *(_OWORD *)(v88 + 56);
    long long v166 = *(_OWORD *)(v88 + 40);
    long long v167 = v90;
    int64_t v64 = sub_1CD7FAEE8(v157, v162, (uint64_t)&v169, v156, v56, v59, v58, v91, (uint64_t)v54, v160, &v165, v172, *((uint64_t *)&v172 + 1), v155 | 0x100u, (v155 | 0x100uLL) >> 32, v89, &v166);
  }
  else
  {
    sub_1CB8F0264(v60, v49, (uint64_t)&v168);
    uint64_t v61 = *(void *)(v8 + 96);
    __int16 v62 = *(_WORD *)(v61 + 32);
    long long v63 = *(_OWORD *)(v61 + 56);
    long long v166 = *(_OWORD *)(v61 + 40);
    long long v167 = v63;
    int64_t v64 = sub_1CD7F00F8(v157, v156, v56, (uint64_t)&v169, v59, v58, (uint64_t)v54, v160, &v168, v155 | 0x100u, (v155 | 0x100uLL) >> 32, v62, &v166, 0);
  }
  unsigned int v77 = v64;
  unsigned int v92 = v65;
  uint64_t v93 = *a1;
  *((void *)&v166 + 1) = *(void *)(*a1 + 656);
  *(void *)&long long v167 = v93;
  *(void *)(v93 + 656) = &v166;
  *(void *)&long long v166 = &unk_1F26413F0;
  *((void *)&v167 + 1) = a1;
  sub_1CD800DA0(v93, v8, 1, (uint64_t)v77, 1);
  uint64_t v94 = v92;
  if (!v43)
  {
    if (!v44) {
      goto LABEL_123;
    }
    goto LABEL_163;
  }
  *(void *)&long long v164 = llvm::TargetLoweringBase::getShiftAmountTy((uint64_t *)a1[1], *(void *)(v77[5] + 16 * v92), *(void *)(v77[5] + 16 * v92 + 8), *(void *)(**(void **)(*a1 + 40) + 40) + 272, *((unsigned __int8 *)a1 + 34));
  *((void *)&v164 + 1) = v106;
  unsigned int v108 = sub_1CD3E12F4((unsigned __int8 *)&v164, v106, v107);
  if ((v108 & 0xFFFFFFC0) == 0 && 0xFFFFFFFFFFFFFFFFLL >> -(char)v108 < v43) {
    long long v164 = v173;
  }
  uint64_t v111 = sub_1CD3E12F4((unsigned __int8 *)&v173, v109, v110);
  uint64_t v112 = *a1;
  long long v113 = v173;
  if ((unint64_t)v111 <= v43)
  {
    uint64_t v118 = sub_1CD7EBF14(*a1, 0, (const llvm::APInt *)&v169, (llvm *)v173, *((uint64_t *)&v173 + 1), 0, 0);
  }
  else
  {
    uint64_t v114 = sub_1CD7EBF14(*a1, v43, (const llvm::APInt *)&v169, (llvm *)v164, *((uint64_t *)&v164 + 1), 0, 0);
    uint64_t v117 = *(void *)(v112 + 832);
    if (v117) {
      LOWORD(v117) = *(_WORD *)(v117 + 8);
    }
    uint64_t v118 = sub_1CCFDED5C(v112, 175, (const llvm::APInt *)&v169, (llvm *)v113, *((uint64_t *)&v113 + 1), (uint64_t)v77, v94, v116, (uint64_t)v114, v115, v117);
  }
  unsigned int v77 = v118;
  uint64_t v94 = v119;
  if (v44)
  {
LABEL_163:
    int v120 = sub_1CD7EBF14(*a1, v154, (const llvm::APInt *)&v169, (llvm *)v173, *((uint64_t *)&v173 + 1), 0, 0);
    uint64_t v123 = *(void *)(*a1 + 832);
    if (v123) {
      LOWORD(v123) = *(_WORD *)(v123 + 8);
    }
    unsigned int v77 = sub_1CCFDED5C(*a1, 175, (const llvm::APInt *)&v169, (llvm *)v173, *((uint64_t *)&v173 + 1), (uint64_t)v77, v94, v122, (uint64_t)v120, v121, v123);
    sub_1CD800DA0(*a1, a2, 0, (uint64_t)v77, v124);
  }
LABEL_123:
  *(void *)(v167 + 656) = *((void *)&v166 + 1);
  if (!v169) {
    return v77;
  }
  int v95 = *v169;
  if ((v95 - 4) > 0x1E)
  {
    if ((v95 - 3) >= 0xFFFFFFFE) {
      uint64_t v104 = v169;
    }
    else {
      uint64_t v104 = 0;
    }
    if ((v95 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v97 = (unint64_t)(v104 + 8);
LABEL_146:
      *(void *)&long long v166 = &v169;
      sub_1CC5FA668(v97 + 16, &v166);
      return v77;
    }
    if (v95 == 3) {
      *((void *)v169 + 1) = 0;
    }
  }
  else if ((v169[1] & 0x7F) == 2 || *((_DWORD *)v169 + 3))
  {
    uint64_t v96 = *((void *)v169 + 2);
    if ((v96 & 4) != 0)
    {
      unint64_t v97 = v96 & 0xFFFFFFFFFFFFFFF8;
      if (v97) {
        goto LABEL_146;
      }
    }
  }
  return v77;
}

uint64_t *sub_1CCF48580(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  uint64_t v6 = (uint64_t *)a6;
  long long v166 = *(_OWORD *)(*(void *)(a4 + 40) + 16 * a5);
  int v12 = *(unsigned __int8 **)(a6 + 64);
  long long v164 = v12;
  if (v12) {
    llvm::MetadataTracking::track((uint64_t)&v164, v12, 2);
  }
  int v165 = *((_DWORD *)v6 + 15);
  if (*(_WORD *)(a2 + 24) == 51 || *(_WORD *)(a4 + 24) == 51)
  {
    uint64_t v6 = sub_1CD7EBF14(*(void *)a1, 0, (const llvm::APInt *)&v164, (llvm *)v166, *((uint64_t *)&v166 + 1), 0, 0);
    goto LABEL_28;
  }
  int v13 = sub_1CCF4BA74((void **)a1, 1, a2, a3, a4, a5, (const llvm::APInt *)&v164);
  if (v13)
  {
    uint64_t v6 = v13;
    goto LABEL_28;
  }
  int v14 = *(unsigned __int16 *)(a2 + 24);
  if (v14 == 56)
  {
    if (*(_WORD *)(a4 + 24) != 177) {
      goto LABEL_27;
    }
    if ((_BYTE)v166) {
      uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v166);
    }
    else {
      uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v166);
    }
    unint64_t v17 = ExtendedSizeInBits;
    if (v16 == 1) {
    if (v17 > 0x40)
    }
      goto LABEL_18;
    uint64_t v18 = *(void *)(a2 + 48);
    if (!v18) {
      goto LABEL_18;
    }
    if (*(void *)(v18 + 32)) {
      goto LABEL_18;
    }
    uint64_t v32 = *(void *)(*(void *)(a2 + 32) + 40);
    int v33 = *(unsigned __int16 *)(v32 + 24);
    if (v33 != 35 && v33 != 11) {
      goto LABEL_18;
    }
    uint64_t v34 = *(void *)(*(void *)(a4 + 32) + 40);
    int v35 = *(unsigned __int16 *)(v34 + 24);
    if (v35 != 35 && v35 != 11) {
      goto LABEL_18;
    }
    uint64_t v36 = *(void *)(v32 + 80);
    unsigned int v37 = *(_DWORD *)(v36 + 32);
    unsigned int v163 = v37;
    if (v37 > 0x40) {
      operator new[]();
    }
    unint64_t v155 = *(void *)(v36 + 24);
    int v162 = (uint64_t **)v155;
    uint64_t v49 = *(void *)(v34 + 80);
    if (*(_DWORD *)(v49 + 32) > 0x40u) {
      operator new[]();
    }
    unint64_t v50 = *(void *)(v49 + 24);
    if ((v155 >> (v37 - 1))) {
      int v51 = v37 ? __clz(~(v155 << -(char)v37)) : 0;
    }
    else {
      int v51 = v37 + __clz(v155) - 64;
    }
    if (v37 - v51 + 1 > 0x40) {
      goto LABEL_18;
    }
    if ((_BYTE)v166) {
      uint64_t v52 = sub_1CB87E200((unsigned __int8 *)&v166);
    }
    else {
      uint64_t v52 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v166);
    }
    unint64_t v54 = v52;
    if (v53 == 1) {
    if (v50 >= v54
    }
      || ((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 1088))(*(void *)(a1 + 8), (uint64_t)(v155 << -(char)v37) >> -(char)v37) & 1) != 0)
    {
      goto LABEL_18;
    }
    int v153 = v50;
    if ((_BYTE)v166) {
      unsigned int v55 = sub_1CB87E200((unsigned __int8 *)&v166);
    }
    else {
      unsigned int v55 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v166);
    }
    unsigned int v72 = v55;
    if (v56 == 1) {
    unsigned int v161 = v72;
    }
    if (v72 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v160);
    }
    unint64_t v160 = 0;
    if (v153)
    {
      unsigned int v73 = v72 - v153;
      if (v72 - v153 > 0x3F) {
        llvm::APInt::setBitsSlowCase(&v160, v73, v72);
      }
      else {
        v160 |= 0xFFFFFFFFFFFFFFFFLL >> -(char)v153 << v73;
      }
    }
    if (!sub_1CD7F11AC(*(void *)a1, *(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48), (uint64_t)&v160, 0)|| (int v162 = (uint64_t **)(v155 | v160), !(*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 8) + 1088))(*(void *)(a1 + 8), (uint64_t)((v155 | v160) << -(char)v37) >> -(char)v37)))
    {
      if (v161 >= 0x41 && v160) {
        MEMORY[0x1D25D9CB0](v160, 0x1000C8000313F17);
      }
LABEL_18:
      int v14 = *(unsigned __int16 *)(a2 + 24);
      goto LABEL_19;
    }
    uint64_t v121 = *(unsigned __int8 **)(a2 + 64);
    unint64_t v158 = v121;
    if (v121) {
      llvm::MetadataTracking::track((uint64_t)&v158, v121, 2);
    }
    int v159 = *(_DWORD *)(a2 + 60);
    uint64_t v122 = *(void *)a1;
    long long v123 = v166;
    int v124 = *(uint64_t **)(a2 + 32);
    uint64_t v126 = *v124;
    uint64_t v125 = v124[1];
    uint64_t v127 = sub_1CD7EBB14(*(void *)a1, (llvm::LLVMContext *)&v162, (const llvm::APInt *)&v164, v166, *((uint64_t *)&v166 + 1), 0, 0);
    uint64_t v130 = *(void *)(v122 + 832);
    if (v130) {
      LOWORD(v130) = *(_WORD *)(v130 + 8);
    }
    long long v167 = sub_1CCFDED5C(v122, 56, (const llvm::APInt *)&v158, (llvm *)v123, *((uint64_t *)&v123 + 1), v126, v125, v129, v127, v128, v130);
    uint64_t v168 = v131;
    sub_1CCEF083C((uint64_t *)a1, a2, (uint64_t *)&v167, 1, 1);
    if (v158)
    {
      int v132 = *v158;
      if ((v132 - 4) > 0x1E)
      {
        if ((v132 - 3) >= 0xFFFFFFFE) {
          BOOL v143 = v158;
        }
        else {
          BOOL v143 = 0;
        }
        if ((v132 - 3) < 0xFFFFFFFE)
        {
          if (v132 == 3) {
            *((void *)v158 + 1) = 0;
          }
          goto LABEL_213;
        }
        unint64_t v144 = (unint64_t)(v143 + 8);
      }
      else
      {
        if ((v158[1] & 0x7F) != 2 && !*((_DWORD *)v158 + 3)) {
          goto LABEL_213;
        }
        uint64_t v150 = *((void *)v158 + 2);
        if ((v150 & 4) == 0) {
          goto LABEL_213;
        }
        unint64_t v144 = v150 & 0xFFFFFFFFFFFFFFF8;
        if (!v144) {
          goto LABEL_213;
        }
      }
      long long v167 = (uint64_t *)&v158;
      sub_1CC5FA668(v144 + 16, &v167);
    }
LABEL_213:
    if (v161 >= 0x41 && v160) {
      MEMORY[0x1D25D9CB0](v160, 0x1000C8000313F17);
    }
    if (v163 >= 0x41 && v162) {
      MEMORY[0x1D25D9CB0](v162, 0x1000C8000313F17);
    }
    goto LABEL_28;
  }
LABEL_19:
  if (v14 != 177) {
    goto LABEL_27;
  }
  uint64_t v19 = *(void *)(a2 + 48);
  if (!v19) {
    goto LABEL_27;
  }
  int v20 = 1;
  do
  {
    if (*(_DWORD *)(v19 + 8) == a3)
    {
      if (!v20) {
        goto LABEL_27;
      }
      --v20;
    }
    uint64_t v19 = *(void *)(v19 + 32);
  }
  while (v19);
  if (v20) {
    goto LABEL_27;
  }
  int v25 = *(unsigned __int16 *)(a4 + 24);
  if (v25 != 35 && v25 != 11) {
    goto LABEL_27;
  }
  uint64_t v27 = *(void *)(*(void *)(a2 + 32) + 40);
  int v28 = *(unsigned __int16 *)(v27 + 24);
  if (v28 != 35 && v28 != 11) {
    goto LABEL_27;
  }
  if ((_BYTE)v166) {
    unsigned int v30 = sub_1CB87E200((unsigned __int8 *)&v166);
  }
  else {
    unsigned int v30 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v166);
  }
  unsigned int v38 = v30;
  if (v31 == 1) {
  uint64_t v39 = *(void *)(a4 + 80);
  }
  uint64_t v40 = *(void *)(v27 + 80);
  uint64_t v41 = (void *)(v40 + 24);
  if (*(_DWORD *)(v40 + 32) >= 0x41u) {
    uint64_t v41 = (void *)*v41;
  }
  int v42 = (void *)*v41;
  if (!*v41) {
    goto LABEL_27;
  }
  unsigned int v43 = (unint64_t *)(v39 + 24);
  unsigned int v44 = *(_DWORD *)(v39 + 32);
  if (v44 > 0x40) {
    int v45 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)(v39 + 24));
  }
  else {
    int v45 = __clz(__rbit64(~*v43));
  }
  unsigned int v46 = v38 >> 1;
  if (v38 >> 1 <= 0x1F)
  {
    switch(v46)
    {
      case 1u:
        uint64_t v47 = 0;
        uint64_t v48 = 2;
        goto LABEL_96;
      case 0x10u:
        uint64_t v47 = 0;
        uint64_t v48 = 4;
        goto LABEL_96;
      case 8u:
        uint64_t v47 = 0;
        uint64_t v48 = 3;
        goto LABEL_96;
    }
  }
  else
  {
    switch(v46)
    {
      case 0x20u:
        uint64_t v47 = 0;
        uint64_t v48 = 5;
        goto LABEL_96;
      case 0x40u:
        uint64_t v47 = 0;
        uint64_t v48 = 6;
        goto LABEL_96;
      case 0x80u:
        uint64_t v47 = 0;
        uint64_t v48 = 7;
        goto LABEL_96;
    }
  }
  uint64_t v47 = llvm::IntegerType::get(*(llvm::IntegerType **)(*(void *)a1 + 56), (llvm::LLVMContext *)(v38 >> 1));
  uint64_t v48 = 0;
  unsigned int v44 = *(_DWORD *)(v39 + 32);
LABEL_96:
  if (v44 <= 0x40)
  {
    BOOL v58 = ((*v43 + 1) & *v43) == 0 && *v43 != 0;
    goto LABEL_103;
  }
  uint64_t v157 = v47;
  int v115 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)(v39 + 24));
  if (!v115)
  {
LABEL_27:
    uint64_t v6 = 0;
    goto LABEL_28;
  }
  int v116 = 0;
  int64_t v117 = ((unint64_t)v44 + 63) >> 6;
  do
  {
    BOOL v59 = v117-- < 1;
    if (v59) {
      break;
    }
    unint64_t v118 = *(void *)(*v43 + 8 * v117);
    v116 += __clz(v118);
  }
  while (!v118);
  unsigned int v119 = v44 | 0xFFFFFFC0;
  if ((v44 & 0x3F) == 0) {
    unsigned int v119 = 0;
  }
  BOOL v58 = v119 + v115 + v116 == v44;
  uint64_t v47 = v157;
LABEL_103:
  BOOL v59 = !v58 || v45 + (int)v42 > v46;
  if (v59) {
    goto LABEL_27;
  }
  uint64_t v60 = v47;
  if (!(*(unsigned int (**)(void, void, void, uint64_t))(**(void **)(a1 + 8) + 1384))(*(void *)(a1 + 8), v166, *((void *)&v166 + 1), v48)|| !(*(unsigned int (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 1744))(*(void *)(a1 + 8), 171, v48, v60)|| !(*(unsigned int (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 1744))(*(void *)(a1 + 8), 177, v48, v60)|| !(*(unsigned int (**)(void, void, void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 1160))(*(void *)(a1 + 8), v166, *((void *)&v166 + 1), v48,
          v60)
    || !(*(unsigned int (**)(void, uint64_t, uint64_t, void, void))(**(void **)(a1 + 8) + 1192))(*(void *)(a1 + 8), v48, v60, v166, *((void *)&v166 + 1)))
  {
    goto LABEL_27;
  }
  uint64_t v61 = v60;
  unint64_t ShiftAmountTy = llvm::TargetLoweringBase::getShiftAmountTy(*(uint64_t **)(a1 + 8), v48, v60, *(void *)(**(void **)(*(void *)a1 + 40) + 40) + 272, 1);
  uint64_t v151 = v63;
  unint64_t v152 = (llvm *)ShiftAmountTy;
  int64_t v64 = *(llvm::APFloatBase **)a1;
  unsigned int v65 = *(unsigned __int8 **)(a2 + 64);
  long long v167 = (uint64_t *)v65;
  if (v65) {
    llvm::MetadataTracking::track((uint64_t)&v167, v65, 2);
  }
  LODWORD(v168) = *(_DWORD *)(a2 + 60);
  uint64_t v66 = *(uint64_t **)(a2 + 32);
  uint64_t v67 = *v66;
  uint64_t v68 = (void *)v66[1];
  uint64_t v69 = *((void *)v64 + 104);
  if (v69) {
    __int16 v70 = *(_WORD *)(v69 + 8);
  }
  else {
    __int16 v70 = 0;
  }
  uint64_t v74 = sub_1CD7F3564(v64, (const char *)0xC9, (uint64_t)&v167, (llvm *)v48, v61, v67, v68, v70);
  uint64_t v154 = v75;
  uint64_t v156 = (uint64_t)v74;
  if (v167)
  {
    int v76 = *(unsigned __int8 *)v167;
    if ((v76 - 4) > 0x1E)
    {
      if ((v76 - 3) >= 0xFFFFFFFE) {
        uint64_t v133 = (uint64_t)v167;
      }
      else {
        uint64_t v133 = 0;
      }
      if ((v76 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v134 = v133 + 8;
LABEL_224:
        int v162 = &v167;
        sub_1CC5FA668(v134 + 16, &v162);
        goto LABEL_143;
      }
      if (v76 == 3) {
        v167[1] = 0;
      }
    }
    else if ((*((unsigned char *)v167 + 1) & 0x7F) == 2 || *((_DWORD *)v167 + 3))
    {
      uint64_t v145 = v167[2];
      if ((v145 & 4) != 0)
      {
        unint64_t v134 = v145 & 0xFFFFFFFFFFFFFFF8;
        if (v134) {
          goto LABEL_224;
        }
      }
    }
  }
LABEL_143:
  uint64_t v77 = *(void *)a1;
  unsigned int v78 = *(_DWORD *)(v39 + 32);
  if (v38 > 0x81)
  {
    if (v78 != v46) {
      operator new[]();
    }
    sub_1CD0463BC((uint64_t)&v167, v39 + 24);
  }
  else
  {
    if (v78 >= 0x41) {
      unsigned int v43 = (unint64_t *)*v43;
    }
    unint64_t v79 = *v43;
    LODWORD(v168) = v38 >> 1;
    if (v38 <= 1) {
      unint64_t v80 = 0;
    }
    else {
      unint64_t v80 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v46;
    }
    long long v167 = (uint64_t *)(v80 & v79);
  }
  uint64_t v81 = *(unsigned __int8 **)(a2 + 64);
  int v162 = (uint64_t **)v81;
  if (v81) {
    llvm::MetadataTracking::track((uint64_t)&v162, v81, 2);
  }
  unsigned int v163 = *(_DWORD *)(a2 + 60);
  uint64_t v82 = sub_1CD7EBB14(v77, (llvm::LLVMContext *)&v167, (const llvm::APInt *)&v162, v48, v61, 0, 0);
  uint64_t v84 = v83;
  if (v162)
  {
    int v85 = *(unsigned __int8 *)v162;
    if ((v85 - 4) > 0x1E)
    {
      if ((v85 - 3) >= 0xFFFFFFFE) {
        uint64_t v135 = v162;
      }
      else {
        uint64_t v135 = 0;
      }
      if ((v85 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v136 = (unint64_t)(v135 + 1);
LABEL_230:
        unint64_t v160 = (unint64_t)&v162;
        sub_1CC5FA668(v136 + 16, &v160);
        goto LABEL_155;
      }
      if (v85 == 3) {
        v162[1] = 0;
      }
    }
    else if ((*((unsigned char *)v162 + 1) & 0x7F) == 2 || *((_DWORD *)v162 + 3))
    {
      unint64_t v146 = (unint64_t)v162[2];
      if ((v146 & 4) != 0)
      {
        unint64_t v136 = v146 & 0xFFFFFFFFFFFFFFF8;
        if (v136) {
          goto LABEL_230;
        }
      }
    }
  }
LABEL_155:
  if (v168 >= 0x41 && v167) {
    MEMORY[0x1D25D9CB0](v167, 0x1000C8000313F17);
  }
  uint64_t v86 = *(void *)a1;
  uint64_t v87 = *(unsigned __int8 **)(a2 + 64);
  long long v167 = (uint64_t *)v87;
  if (v87) {
    llvm::MetadataTracking::track((uint64_t)&v167, v87, 2);
  }
  LODWORD(v168) = *(_DWORD *)(a2 + 60);
  __int16 v89 = sub_1CD7EBF14(v86, v42, (const llvm::APInt *)&v167, v152, v151, 0, 0);
  uint64_t v91 = v90;
  if (v167)
  {
    int v92 = *(unsigned __int8 *)v167;
    if ((v92 - 4) > 0x1E)
    {
      if ((v92 - 3) >= 0xFFFFFFFE) {
        uint64_t v137 = (uint64_t)v167;
      }
      else {
        uint64_t v137 = 0;
      }
      if ((v92 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v138 = v137 + 8;
LABEL_236:
        int v162 = &v167;
        sub_1CC5FA668(v138 + 16, &v162);
        goto LABEL_164;
      }
      if (v92 == 3) {
        v167[1] = 0;
      }
    }
    else if ((*((unsigned char *)v167 + 1) & 0x7F) == 2 || *((_DWORD *)v167 + 3))
    {
      uint64_t v147 = v167[2];
      if ((v147 & 4) != 0)
      {
        unint64_t v138 = v147 & 0xFFFFFFFFFFFFFFF8;
        if (v138) {
          goto LABEL_236;
        }
      }
    }
  }
LABEL_164:
  uint64_t v93 = *(void *)a1;
  uint64_t v94 = *(unsigned __int8 **)(a2 + 64);
  long long v167 = (uint64_t *)v94;
  if (v94) {
    llvm::MetadataTracking::track((uint64_t)&v167, v94, 2);
  }
  LODWORD(v168) = *(_DWORD *)(a2 + 60);
  uint64_t v95 = *(void *)(v93 + 832);
  if (v95) {
    LOWORD(v95) = *(_WORD *)(v95 + 8);
  }
  unint64_t v97 = sub_1CCFDED5C(v93, 177, (const llvm::APInt *)&v167, (llvm *)v48, v61, v156, v154, v88, (uint64_t)v89, v91, v95);
  uint64_t v99 = v98;
  if (v167)
  {
    int v100 = *(unsigned __int8 *)v167;
    if ((v100 - 4) > 0x1E)
    {
      if ((v100 - 3) >= 0xFFFFFFFE) {
        uint64_t v139 = (uint64_t)v167;
      }
      else {
        uint64_t v139 = 0;
      }
      if ((v100 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v140 = v139 + 8;
LABEL_242:
        int v162 = &v167;
        sub_1CC5FA668(v140 + 16, &v162);
        goto LABEL_172;
      }
      if (v100 == 3) {
        v167[1] = 0;
      }
    }
    else if ((*((unsigned char *)v167 + 1) & 0x7F) == 2 || *((_DWORD *)v167 + 3))
    {
      uint64_t v148 = v167[2];
      if ((v148 & 4) != 0)
      {
        unint64_t v140 = v148 & 0xFFFFFFFFFFFFFFF8;
        if (v140) {
          goto LABEL_242;
        }
      }
    }
  }
LABEL_172:
  uint64_t v101 = *(void *)a1;
  uint64_t v102 = *(unsigned __int8 **)(a2 + 64);
  long long v167 = (uint64_t *)v102;
  if (v102) {
    llvm::MetadataTracking::track((uint64_t)&v167, v102, 2);
  }
  LODWORD(v168) = *(_DWORD *)(a2 + 60);
  uint64_t v103 = *(void *)(v101 + 832);
  if (v103) {
    LOWORD(v103) = *(_WORD *)(v103 + 8);
  }
  uint64_t v104 = sub_1CCFDED5C(v101, 171, (const llvm::APInt *)&v167, (llvm *)v48, v61, (uint64_t)v97, v99, v96, v82, v84, v103);
  uint64_t v106 = v105;
  if (v167)
  {
    int v107 = *(unsigned __int8 *)v167;
    if ((v107 - 4) > 0x1E)
    {
      if ((v107 - 3) >= 0xFFFFFFFE) {
        uint64_t v141 = (uint64_t)v167;
      }
      else {
        uint64_t v141 = 0;
      }
      if ((v107 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v142 = v141 + 8;
LABEL_248:
        int v162 = &v167;
        sub_1CC5FA668(v142 + 16, &v162);
        goto LABEL_180;
      }
      if (v107 == 3) {
        v167[1] = 0;
      }
    }
    else if ((*((unsigned char *)v167 + 1) & 0x7F) == 2 || *((_DWORD *)v167 + 3))
    {
      uint64_t v149 = v167[2];
      if ((v149 & 4) != 0)
      {
        unint64_t v142 = v149 & 0xFFFFFFFFFFFFFFF8;
        if (v142) {
          goto LABEL_248;
        }
      }
    }
  }
LABEL_180:
  unsigned int v108 = *(llvm::APFloatBase **)a1;
  uint64_t v109 = *(unsigned __int8 **)(a2 + 64);
  long long v167 = (uint64_t *)v109;
  if (v109) {
    llvm::MetadataTracking::track((uint64_t)&v167, v109, 2);
  }
  LODWORD(v168) = *(_DWORD *)(a2 + 60);
  uint64_t v110 = *((void *)v108 + 104);
  if (v110) {
    __int16 v111 = *(_WORD *)(v110 + 8);
  }
  else {
    __int16 v111 = 0;
  }
  uint64_t v6 = sub_1CD7F3564(v108, (const char *)0xC7, (uint64_t)&v167, (llvm *)v166, *((uint64_t *)&v166 + 1), (uint64_t)v104, v106, v111);
  if (v167)
  {
    int v112 = *(unsigned __int8 *)v167;
    if ((v112 - 4) > 0x1E)
    {
      if ((v112 - 3) >= 0xFFFFFFFE) {
        uint64_t v120 = (uint64_t)v167;
      }
      else {
        uint64_t v120 = 0;
      }
      if ((v112 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v114 = v120 + 8;
LABEL_204:
        int v162 = &v167;
        sub_1CC5FA668(v114 + 16, &v162);
        goto LABEL_28;
      }
      if (v112 == 3) {
        v167[1] = 0;
      }
    }
    else if ((*((unsigned char *)v167 + 1) & 0x7F) == 2 || *((_DWORD *)v167 + 3))
    {
      uint64_t v113 = v167[2];
      if ((v113 & 4) != 0)
      {
        unint64_t v114 = v113 & 0xFFFFFFFFFFFFFFF8;
        if (v114) {
          goto LABEL_204;
        }
      }
    }
  }
LABEL_28:
  if (v164)
  {
    int v21 = *v164;
    if ((v21 - 4) > 0x1E)
    {
      if ((v21 - 3) >= 0xFFFFFFFE) {
        BOOL v23 = v164;
      }
      else {
        BOOL v23 = 0;
      }
      if ((v21 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v24 = (unint64_t)(v23 + 8);
LABEL_38:
        long long v167 = (uint64_t *)&v164;
        sub_1CC5FA668(v24 + 16, &v167);
        return v6;
      }
      if (v21 == 3) {
        *((void *)v164 + 1) = 0;
      }
    }
    else if ((v164[1] & 0x7F) == 2 || *((_DWORD *)v164 + 3))
    {
      uint64_t v71 = *((void *)v164 + 2);
      if ((v71 & 4) != 0)
      {
        unint64_t v24 = v71 & 0xFFFFFFFFFFFFFFF8;
        if (v24) {
          goto LABEL_38;
        }
      }
    }
  }
  return v6;
}

uint64_t *sub_1CCF49714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(uint64_t **)(a2 + 32);
  uint64_t v9 = *v8;
  if (!*(_WORD *)(*v8 + 56)) {
    return 0;
  }
  uint64_t v11 = *((unsigned int *)v8 + 2);
  int v12 = (void *)v8[5];
  int v13 = *((_DWORD *)v8 + 12);
  int v14 = *(uint64_t **)(v9 + 32);
  uint64_t v15 = *(void *)(v9 + 40) + 16 * v11;
  uint64_t v16 = *(void *)(v15 + 8);
  uint64_t v135 = *(unsigned __int16 *)(a2 + 24);
  unint64_t v136 = *(llvm **)v15;
  uint64_t v17 = *(unsigned __int16 *)(v9 + 24);
  uint64_t v18 = *v14;
  uint64_t v19 = (uint64_t *)v12[4];
  uint64_t v20 = v19[1];
  uint64_t v139 = *v19;
  uint64_t v134 = v14[1];
  uint64_t v21 = *(void *)(*v14 + 40) + 16 * v134;
  int v22 = *(llvm **)v21;
  uint64_t v137 = *(void *)(v21 + 8);
  uint64_t v138 = v20;
  BOOL v23 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v141 = v23;
  if (v23) {
    llvm::MetadataTracking::track((uint64_t)&v141, v23, 2);
  }
  int v142 = *(_DWORD *)(a2 + 60);
  if ((v17 - 198) <= 2)
  {
    uint64_t v24 = *(void *)(v9 + 48);
    if (!v24) {
      goto LABEL_12;
    }
    int v25 = 1;
    do
    {
      if (*(_DWORD *)(v24 + 8) == v11)
      {
        if (!v25) {
          goto LABEL_12;
        }
        --v25;
      }
      uint64_t v24 = *(void *)(v24 + 32);
    }
    while (v24);
    if (v25)
    {
LABEL_12:
      uint64_t v26 = v12[6];
      if (!v26) {
        goto LABEL_138;
      }
      int v27 = 1;
      do
      {
        if (*(_DWORD *)(v26 + 8) == v13)
        {
          if (!v27) {
            goto LABEL_138;
          }
          --v27;
        }
        uint64_t v26 = *(void *)(v26 + 32);
      }
      while (v26);
      if (v27) {
        goto LABEL_138;
      }
    }
    int v28 = (unsigned __int8 *)(*(void *)(v139 + 40) + 16 * v138);
    if (v22 == *v28 && ((_BYTE)v22 || v137 == *((void *)v28 + 1)))
    {
      BOOL v29 = v136;
      if ((_BYTE)v136)
      {
        uint64_t v30 = a1;
        if (v136 - 15 < 0x9C)
        {
LABEL_130:
          if ((_BYTE)v22)
          {
            uint64_t v86 = *(void *)(v30 + 8);
            if (v22 != 1 && !*(void *)(v86 + 8 * v22 + 96)
              || v135 <= 0x185
              && (*(unsigned char *)(v86 + 390 * v22 + v135 + 3862) & 0xFB) != 0)
            {
              goto LABEL_138;
            }
            goto LABEL_135;
          }
          goto LABEL_174;
        }
      }
      else
      {
        uint64_t v30 = a1;
        if ((*(_DWORD *)(v16 + 8) & 0xFE) == 0x12) {
          goto LABEL_130;
        }
      }
      if (!*(unsigned char *)(v30 + 33))
      {
LABEL_135:
        if (v17 == 200
          && *(unsigned char *)(v30 + 34)
          && !(*(unsigned int (**)(void, uint64_t, llvm *, uint64_t))(**(void **)(v30 + 8) + 1744))(*(void *)(v30 + 8), v135, v22, v137))
        {
          goto LABEL_138;
        }
        uint64_t v91 = *(void *)(*(void *)v30 + 832);
        if (v91) {
          LOWORD(v91) = *(_WORD *)(v91 + 8);
        }
        int v92 = sub_1CCFDED5C(*(void *)v30, v135, (const llvm::APInt *)&v141, v22, v137, v18, v134, a8, v139, v138, v91);
        goto LABEL_167;
      }
      goto LABEL_130;
    }
LABEL_138:
    uint64_t v31 = 0;
    goto LABEL_139;
  }
  if ((int)v17 <= 174)
  {
    if (v17 == 153)
    {
      if (*(int *)(a1 + 24) > 2) {
        goto LABEL_138;
      }
      uint64_t v58 = *(void *)(v9 + 48);
      if (!v58) {
        goto LABEL_138;
      }
      if (*(void *)(v58 + 32)) {
        goto LABEL_138;
      }
      uint64_t v59 = v12[6];
      if (!v59) {
        goto LABEL_138;
      }
      if (*(void *)(v59 + 32)) {
        goto LABEL_138;
      }
      long long v143 = *(_OWORD *)*(void *)(v9 + 40);
      uint64_t v60 = *(const void **)(v9 + 80);
      unsigned int v61 = sub_1CD3DB440((llvm::EVT *)&v143, (const char *)v23);
      long long v143 = *(_OWORD *)v12[5];
      __int16 v62 = (const void *)v12[10];
      if (v61 != sub_1CD3DB440((llvm::EVT *)&v143, v63)) {
        goto LABEL_138;
      }
      uint64_t v64 = v16;
      if (memcmp(v60, v62, 4 * v61)) {
        goto LABEL_138;
      }
      uint64_t v66 = *(uint64_t **)(v9 + 32);
      uint64_t v67 = v66[5];
      uint64_t v68 = v66[6];
      if (v135 == 173)
      {
        uint64_t v69 = (uint64_t *)v66[5];
        if (*(_WORD *)(v67 + 24) != 51)
        {
          uint64_t v69 = sub_1CCF42E60((const llvm::APInt *)&v141, *(void *)(a1 + 8), v136, v16, *(void *)a1, *(unsigned __int8 *)(a1 + 33));
          LODWORD(v68) = v70;
          uint64_t v66 = *(uint64_t **)(v9 + 32);
          uint64_t v67 = v66[5];
        }
      }
      else
      {
        uint64_t v69 = (uint64_t *)v66[5];
      }
      unsigned int v105 = (uint64_t *)v12[4];
      if (v67 == v105[5] && *((_DWORD *)v66 + 12) == *((_DWORD *)v105 + 12) && v69)
      {
        uint64_t v121 = *v66;
        uint64_t v122 = v66[1];
        uint64_t v123 = *v105;
        uint64_t v124 = v105[1];
        uint64_t v125 = *(void *)(*(void *)a1 + 832);
        if (v125) {
          LOWORD(v125) = *(_WORD *)(v125 + 8);
        }
        uint64_t v126 = sub_1CCFDED5C(*(void *)a1, v135, (const llvm::APInt *)&v141, v136, v16, v121, v122, v65, v123, v124, v125);
        unsigned int v128 = v127;
        uint64_t v129 = *(void *)a1;
        long long v143 = *(_OWORD *)*(void *)(v9 + 40);
        uint64_t v130 = *(void **)(v9 + 80);
        uint64_t v132 = sub_1CD3DB440((llvm::EVT *)&v143, v127);
        uint64_t v48 = sub_1CCFCDA78(v129, v136, v16, (uint64_t)&v141, (uint64_t)v126, v128, (uint64_t)v69, v68, v130, v132);
        goto LABEL_173;
      }
      uint64_t v106 = *v66;
      unsigned int v107 = *((_DWORD *)v66 + 2);
      if (v135 == 173)
      {
        unsigned int v108 = (uint64_t *)*v66;
        if (*(_WORD *)(v106 + 24) != 51)
        {
          unsigned int v108 = sub_1CCF42E60((const llvm::APInt *)&v141, *(void *)(a1 + 8), v136, v16, *(void *)a1, *(unsigned __int8 *)(a1 + 33));
          unsigned int v107 = v109;
          uint64_t v66 = *(uint64_t **)(v9 + 32);
          unsigned int v105 = (uint64_t *)v12[4];
          uint64_t v106 = *v66;
        }
      }
      else
      {
        unsigned int v108 = (uint64_t *)*v66;
      }
      if (v106 != *v105) {
        goto LABEL_138;
      }
      if (*((_DWORD *)v66 + 2) == *((_DWORD *)v105 + 2))
      {
        uint64_t v31 = 0;
        if (v108)
        {
          unsigned int v110 = v107;
          uint64_t v111 = v66[5];
          uint64_t v112 = v66[6];
          uint64_t v113 = v105[5];
          uint64_t v114 = v105[6];
          uint64_t v115 = *(void *)(*(void *)a1 + 832);
          if (v115) {
            LOWORD(v115) = *(_WORD *)(v115 + 8);
          }
          int v116 = sub_1CCFDED5C(*(void *)a1, v135, (const llvm::APInt *)&v141, v136, v64, v111, v112, v65, v113, v114, v115);
          unsigned int v118 = v117;
          uint64_t v119 = *(void *)a1;
          long long v143 = *(_OWORD *)*(void *)(v9 + 40);
          long long __src = *(void **)(v9 + 80);
          uint64_t v131 = sub_1CD3DB440((llvm::EVT *)&v143, v117);
          uint64_t v48 = sub_1CCFCDA78(v119, v136, v64, (uint64_t)&v141, (uint64_t)v108, v110, (uint64_t)v116, v118, __src, v131);
          goto LABEL_173;
        }
      }
      else
      {
        uint64_t v31 = 0;
      }
      goto LABEL_139;
    }
    if (v17 != 155)
    {
      uint64_t v32 = v16;
      uint64_t v31 = 0;
      if (v17 != 171) {
        goto LABEL_139;
      }
      goto LABEL_33;
    }
LABEL_79:
    uint64_t v30 = a1;
    if (*(int *)(a1 + 24) > 1) {
      goto LABEL_138;
    }
    if ((_BYTE)v22)
    {
      BOOL v56 = v22 - 120 >= 0x20 && v22 - 2 >= 6;
      BOOL v29 = v136;
      uint64_t v57 = v137;
      if (v56 && v22 - 15 >= 0x3C) {
        goto LABEL_138;
      }
    }
    else
    {
      BOOL v29 = v136;
      uint64_t v57 = v137;
      if ((*(_DWORD *)(v137 + 8) & 0xFE) == 0x12) {
        int v82 = *(unsigned __int8 *)(**(void **)(v137 + 16) + 8);
      }
      else {
        int v82 = *(_DWORD *)(v137 + 8);
      }
      if (v82 != 13) {
        goto LABEL_138;
      }
    }
    uint64_t v83 = (unsigned __int8 *)(*(void *)(v139 + 40) + 16 * v138);
    if (v22 != *v83) {
      goto LABEL_138;
    }
    uint64_t v84 = *((void *)v83 + 1);
    if (!(_BYTE)v22 && v57 != v84) {
      goto LABEL_138;
    }
    if ((_BYTE)v29)
    {
      if (v29 - 15 >= 0x9C) {
        goto LABEL_164;
      }
    }
    else if ((*(_DWORD *)(v16 + 8) & 0xFE) != 0x12)
    {
      goto LABEL_164;
    }
    if (!(_BYTE)v29) {
      goto LABEL_164;
    }
    uint64_t v94 = *(void *)(a1 + 8);
    if (!*(void *)(v94 + 8 * v29 + 96)) {
      goto LABEL_164;
    }
    if ((_BYTE)v22)
    {
      if (v22 - 15 < 0x9C) {
        goto LABEL_164;
      }
LABEL_162:
      if (!(_BYTE)v22 || !*(void *)(v94 + 8 * v22 + 96)) {
        goto LABEL_138;
      }
      goto LABEL_164;
    }
    if ((*(_DWORD *)(v57 + 8) & 0xFE) != 0x12) {
      goto LABEL_162;
    }
LABEL_164:
    uint64_t v95 = *(void *)(*(void *)a1 + 832);
    if (v95) {
      LOWORD(v95) = *(_WORD *)(v95 + 8);
    }
    int v92 = sub_1CCFDED5C(*(void *)a1, v135, (const llvm::APInt *)&v141, v22, v57, v18, v134, a8, v139, v138, v95);
LABEL_167:
    int v76 = v92;
    unsigned int v78 = v93;
    unint64_t v79 = *(llvm::APFloatBase **)v30;
    uint64_t v96 = *(void *)(*(void *)v30 + 832);
    if (v96) {
      __int16 v81 = *(_WORD *)(v96 + 8);
    }
    else {
      __int16 v81 = 0;
    }
    uint64_t v97 = v17;
    uint64_t v98 = v29;
LABEL_171:
    uint64_t v99 = v16;
LABEL_172:
    uint64_t v48 = sub_1CD7F3564(v79, (const char *)v97, (uint64_t)&v141, v98, v99, (uint64_t)v76, v78, v81);
LABEL_173:
    uint64_t v31 = v48;
    goto LABEL_139;
  }
  if ((int)v17 <= 181)
  {
    uint64_t v32 = v16;
    uint64_t v31 = 0;
    if ((v17 - 175) >= 3) {
      goto LABEL_139;
    }
LABEL_33:
    uint64_t v33 = *(void *)(v9 + 32);
    uint64_t v34 = v12[4];
    if (*(void *)(v33 + 40) != *(void *)(v34 + 40)) {
      goto LABEL_138;
    }
    if (*(_DWORD *)(v33 + 48) != *(_DWORD *)(v34 + 48)) {
      goto LABEL_138;
    }
    uint64_t v35 = *(void *)(v9 + 48);
    if (!v35) {
      goto LABEL_138;
    }
    int v36 = 1;
    uint64_t v37 = v32;
    do
    {
      if (*(_DWORD *)(v35 + 8) == v11)
      {
        if (!v36) {
          goto LABEL_138;
        }
        --v36;
      }
      uint64_t v35 = *(void *)(v35 + 32);
    }
    while (v35);
    if (v36) {
      goto LABEL_138;
    }
    uint64_t v38 = v12[6];
    if (!v38) {
      goto LABEL_138;
    }
    int v39 = 1;
    do
    {
      if (*(_DWORD *)(v38 + 8) == v13)
      {
        if (!v39) {
          goto LABEL_138;
        }
        --v39;
      }
      uint64_t v38 = *(void *)(v38 + 32);
    }
    while (v38);
    if (v39) {
      goto LABEL_138;
    }
    uint64_t v40 = *(void *)(*(void *)a1 + 832);
    if (v40) {
      LOWORD(v40) = *(_WORD *)(v40 + 8);
    }
    int v42 = sub_1CCFDED5C(*(void *)a1, v135, (const llvm::APInt *)&v141, v22, v137, v18, v134, a8, v139, v138, v40);
    uint64_t v44 = *(void *)(v9 + 32);
    uint64_t v45 = *(void *)(v44 + 40);
    uint64_t v46 = *(void *)(v44 + 48);
    uint64_t v47 = *(void *)(*(void *)a1 + 832);
    if (v47) {
      LOWORD(v47) = *(_WORD *)(v47 + 8);
    }
    uint64_t v48 = sub_1CCFDED5C(*(void *)a1, v17, (const llvm::APInt *)&v141, v136, v37, (uint64_t)v42, v41, v43, v45, v46, v47);
    goto LABEL_173;
  }
  if (v17 == 182)
  {
    uint64_t v71 = *(void *)(v9 + 48);
    if (!v71) {
      goto LABEL_138;
    }
    int v72 = 1;
    do
    {
      if (*(_DWORD *)(v71 + 8) == v11)
      {
        if (!v72) {
          goto LABEL_138;
        }
        --v72;
      }
      uint64_t v71 = *(void *)(v71 + 32);
    }
    while (v71);
    if (v72) {
      goto LABEL_138;
    }
    uint64_t v73 = v12[6];
    if (!v73) {
      goto LABEL_138;
    }
    int v74 = 1;
    do
    {
      if (*(_DWORD *)(v73 + 8) == v13)
      {
        if (!v74) {
          goto LABEL_138;
        }
        --v74;
      }
      uint64_t v73 = *(void *)(v73 + 32);
    }
    while (v73);
    if (v74) {
      goto LABEL_138;
    }
    uint64_t v75 = *(void *)(*(void *)a1 + 832);
    if (v75) {
      LOWORD(v75) = *(_WORD *)(v75 + 8);
    }
    int v76 = sub_1CCFDED5C(*(void *)a1, v135, (const llvm::APInt *)&v141, v22, v137, v18, v134, a8, v139, v138, v75);
    unsigned int v78 = v77;
    unint64_t v79 = *(llvm::APFloatBase **)a1;
    uint64_t v80 = *(void *)(*(void *)a1 + 832);
    if (v80) {
      __int16 v81 = *(_WORD *)(v80 + 8);
    }
    else {
      __int16 v81 = 0;
    }
    uint64_t v97 = 182;
    uint64_t v98 = v136;
    goto LABEL_171;
  }
  if (v17 == 216) {
    goto LABEL_79;
  }
  uint64_t v133 = v16;
  uint64_t v31 = 0;
  if (v17 != 201) {
    goto LABEL_139;
  }
  uint64_t v49 = *(void *)(v9 + 48);
  if (!v49) {
    goto LABEL_64;
  }
  int v50 = 1;
  do
  {
    if (*(_DWORD *)(v49 + 8) == v11)
    {
      if (!v50) {
        goto LABEL_64;
      }
      --v50;
    }
    uint64_t v49 = *(void *)(v49 + 32);
  }
  while (v49);
  if (v50)
  {
LABEL_64:
    uint64_t v51 = v12[6];
    if (!v51) {
      goto LABEL_138;
    }
    int v52 = 1;
    do
    {
      if (*(_DWORD *)(v51 + 8) == v13)
      {
        if (!v52) {
          goto LABEL_138;
        }
        --v52;
      }
      uint64_t v51 = *(void *)(v51 + 32);
    }
    while (v51);
    if (v52) {
      goto LABEL_138;
    }
  }
  uint64_t v53 = (unsigned __int8 *)(*(void *)(v139 + 40) + 16 * v138);
  if (v22 != *v53 || !(_BYTE)v22 && v137 != *((void *)v53 + 1)) {
    goto LABEL_138;
  }
  unint64_t v54 = (uint64_t *)a1;
  uint64_t v55 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(a1 + 33))
  {
LABEL_178:
    if ((*(unsigned int (**)(uint64_t, llvm *, uint64_t, llvm *, uint64_t))(*(void *)v55 + 1192))(v55, v136, v133, v22, v137)&& ((*(uint64_t (**)(uint64_t, llvm *, uint64_t, llvm *, uint64_t))(*(void *)v54[1] + 1160))(v54[1], v22, v137, v136, v133) & 1) != 0|| !(_BYTE)v22|| !*(void *)(v54[1] + 8 * v22 + 96))
    {
      goto LABEL_138;
    }
    uint64_t v101 = *(void *)(*v54 + 832);
    if (v101) {
      LOWORD(v101) = *(_WORD *)(v101 + 8);
    }
    int v76 = sub_1CCFDED5C(*v54, v135, (const llvm::APInt *)&v141, v22, v137, v18, v134, v100, v139, v138, v101);
    unsigned int v78 = v102;
    unint64_t v79 = *(llvm::APFloatBase **)a1;
    uint64_t v103 = *(void *)(*(void *)a1 + 832);
    if (v103) {
      __int16 v81 = *(_WORD *)(v103 + 8);
    }
    else {
      __int16 v81 = 0;
    }
    uint64_t v97 = 201;
    uint64_t v98 = v136;
    uint64_t v99 = v133;
    goto LABEL_172;
  }
  if (!(_BYTE)v22)
  {
LABEL_174:
    uint64_t v31 = 0;
    goto LABEL_139;
  }
  if (v22 == 1)
  {
    if (v135 > 0x185) {
      goto LABEL_138;
    }
    goto LABEL_177;
  }
  if (!*(void *)(v55 + 8 * v22 + 96)) {
    goto LABEL_138;
  }
  uint64_t v31 = 0;
  if (v135 < 0x186)
  {
LABEL_177:
    unint64_t v54 = (uint64_t *)a1;
    if (*(unsigned char *)(v55 + 390 * v22 + v135 + 3862)) {
      goto LABEL_138;
    }
    goto LABEL_178;
  }
LABEL_139:
  if (v141)
  {
    int v87 = *v141;
    if ((v87 - 4) > 0x1E)
    {
      if ((v87 - 3) >= 0xFFFFFFFE) {
        __int16 v89 = v141;
      }
      else {
        __int16 v89 = 0;
      }
      if ((v87 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v90 = (unint64_t)(v89 + 8);
LABEL_149:
        *(void *)&long long v143 = &v141;
        sub_1CC5FA668(v90 + 16, &v143);
        return v31;
      }
      if (v87 == 3) {
        *((void *)v141 + 1) = 0;
      }
    }
    else if ((v141[1] & 0x7F) == 2 || *((_DWORD *)v141 + 3))
    {
      uint64_t v104 = *((void *)v141 + 2);
      if ((v104 & 4) != 0)
      {
        unint64_t v90 = v104 & 0xFFFFFFFFFFFFFFF8;
        if (v90) {
          goto LABEL_149;
        }
      }
    }
  }
  return v31;
}

uint64_t *sub_1CCF4A26C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a2 + 48);
  if (!v8) {
    return 0;
  }
  uint64_t v11 = *(unsigned __int16 *)(a1 + 24);
  int v12 = 1;
  do
  {
    if (*(_DWORD *)(v8 + 8) == a3)
    {
      if (!v12) {
        return 0;
      }
      --v12;
    }
    uint64_t v8 = *(void *)(v8 + 32);
  }
  while (v8);
  if (v12) {
    return 0;
  }
  uint64_t v15 = *(void *)(a4 + 48);
  if (!v15) {
    return 0;
  }
  int v16 = 1;
  do
  {
    if (*(_DWORD *)(v15 + 8) == a5)
    {
      if (!v16) {
        return 0;
      }
      --v16;
    }
    uint64_t v15 = *(void *)(v15 + 32);
  }
  while (v15);
  if (v16) {
    return 0;
  }
  uint64_t v17 = *(unsigned __int16 *)(a4 + 24);
  if (*(unsigned __int16 *)(a2 + 24) != v11 || (v17 - 175) > 2) {
    return 0;
  }
  uint64_t v19 = *(uint64_t **)(a4 + 32);
  uint64_t v20 = *v19;
  uint64_t v21 = v19[1];
  uint64_t v23 = v19[5];
  uint64_t v22 = v19[6];
  uint64_t v24 = *(void *)(a2 + 32);
  uint64_t v25 = *(void *)v24;
  if (*(unsigned __int16 *)(*(void *)v24 + 24) == v17)
  {
    uint64_t v26 = *(void *)(v25 + 32);
    if (*(void *)(v26 + 40) == v23 && *(_DWORD *)(v26 + 48) == v22)
    {
      uint64_t v27 = *(void *)(v24 + 40);
      v24 += 40;
      uint64_t v25 = v27;
      goto LABEL_28;
    }
  }
  uint64_t v28 = *(void *)(v24 + 40);
  if (*(unsigned __int16 *)(v28 + 24) != v17) {
    return 0;
  }
  uint64_t v26 = *(void *)(v28 + 32);
  if (*(void *)(v26 + 40) != v23 || *(_DWORD *)(v26 + 48) != v22) {
    return 0;
  }
LABEL_28:
  uint64_t v49 = *(unsigned int *)(v24 + 8);
  uint64_t v29 = *(void *)v26;
  uint64_t v30 = *(unsigned int *)(v26 + 8);
  uint64_t v31 = *(void *)(a1 + 40);
  uint64_t v47 = *(llvm **)v31;
  uint64_t v48 = *(void *)(v31 + 8);
  uint64_t v32 = *(unsigned __int8 **)(a1 + 64);
  int v50 = v32;
  if (v32)
  {
    uint64_t v46 = v20;
    llvm::MetadataTracking::track((uint64_t)&v50, v32, 2);
    uint64_t v20 = v46;
  }
  int v51 = *(_DWORD *)(a1 + 60);
  uint64_t v33 = *(void *)(a6 + 832);
  if (v33) {
    LOWORD(v33) = *(_WORD *)(v33 + 8);
  }
  uint64_t v35 = sub_1CCFDED5C(a6, v11, (const llvm::APInt *)&v50, v47, v48, v29, v30, a8, v20, v21, v33);
  uint64_t v37 = *(void *)(a6 + 832);
  if (v37) {
    LOWORD(v37) = *(_WORD *)(v37 + 8);
  }
  int v39 = sub_1CCFDED5C(a6, v17, (const llvm::APInt *)&v50, v47, v48, (uint64_t)v35, v34, v36, v23, v22, v37);
  uint64_t v41 = *(void *)(a6 + 832);
  if (v41) {
    LOWORD(v41) = *(_WORD *)(v41 + 8);
  }
  int v13 = sub_1CCFDED5C(a6, v11, (const llvm::APInt *)&v50, v47, v48, (uint64_t)v39, v38, v40, v25, v49, v41);
  if (v50)
  {
    int v42 = *v50;
    if ((v42 - 4) > 0x1E)
    {
      if ((v42 - 3) >= 0xFFFFFFFE) {
        uint64_t v45 = v50;
      }
      else {
        uint64_t v45 = 0;
      }
      if ((v42 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v44 = (unint64_t)(v45 + 8);
LABEL_48:
        int v52 = &v50;
        sub_1CC5FA668(v44 + 16, &v52);
        return v13;
      }
      if (v42 == 3) {
        *((void *)v50 + 1) = 0;
      }
    }
    else if ((v50[1] & 0x7F) == 2 || *((_DWORD *)v50 + 3))
    {
      uint64_t v43 = *((void *)v50 + 2);
      if ((v43 & 4) != 0)
      {
        unint64_t v44 = v43 & 0xFFFFFFFFFFFFFFF8;
        if (v44) {
          goto LABEL_48;
        }
      }
    }
  }
  return v13;
}

uint64_t *sub_1CCF4A520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  if (!*(unsigned char *)(a1 + 33)) {
    return 0;
  }
  long long v7 = *(_OWORD *)*(void *)(a2 + 40);
  long long v100 = v7;
  if (v7 - 4 > 2) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  BOOL v9 = !(_BYTE)v7 || *(void *)(v8 + 8 * v7 + 96) == 0;
  if (v9 || (*(unsigned __int8 *)(v8 + 390 * v7 + 4044) | 4) != 4) {
    return 0;
  }
  if (*(_WORD *)(a3 + 24) == 171)
  {
    int v10 = *(unsigned __int16 *)(**(void **)(a3 + 32) + 24);
    BOOL v11 = v10 == 177;
    if (v10 == 177) {
      uint64_t v12 = a3;
    }
    else {
      uint64_t v12 = a5;
    }
    if (v11) {
      a3 = a5;
    }
    a5 = v12;
  }
  if (*(_WORD *)(a5 + 24) == 171)
  {
    int v13 = *(unsigned __int16 *)(**(void **)(a5 + 32) + 24);
    BOOL v14 = v13 == 175;
    if (v13 == 175) {
      uint64_t v15 = a3;
    }
    else {
      uint64_t v15 = a5;
    }
    if (v14) {
      a3 = a5;
    }
    a5 = v15;
  }
  int v16 = *(unsigned __int16 *)(a3 + 24);
  if (v16 == 171)
  {
    uint64_t v17 = *(void *)(a3 + 48);
    if (!v17 || *(void *)(v17 + 32)) {
      return 0;
    }
    uint64_t v18 = *(uint64_t **)(a3 + 32);
    uint64_t v19 = v18[5];
    int v20 = *(unsigned __int16 *)(v19 + 24);
    if (v20 != 35 && v20 != 11) {
      return 0;
    }
    uint64_t v22 = *(void *)(v19 + 80);
    uint64_t v23 = *(_DWORD *)(v22 + 32) > 0x40u ? **(void **)(v22 + 24) : *(void *)(v22 + 24);
    if (v23 != 65280 && v23 != 0xFFFF) {
      return 0;
    }
    a3 = *v18;
  }
  int v24 = *(unsigned __int16 *)(a5 + 24);
  if (v24 == 171)
  {
    uint64_t v25 = *(void *)(a5 + 48);
    if (!v25 || *(void *)(v25 + 32)) {
      return 0;
    }
    uint64_t v26 = *(uint64_t **)(a5 + 32);
    uint64_t v27 = v26[5];
    int v28 = *(unsigned __int16 *)(v27 + 24);
    if (v28 != 35 && v28 != 11) {
      return 0;
    }
    uint64_t v30 = *(void *)(v27 + 80);
    uint64_t v31 = (void *)(v30 + 24);
    if (*(_DWORD *)(v30 + 32) >= 0x41u) {
      uint64_t v31 = (void *)*v31;
    }
    if (*v31 != 255) {
      return 0;
    }
    a5 = *v26;
  }
  int v32 = *(unsigned __int16 *)(a3 + 24);
  if (v32 == 177)
  {
    int v33 = *(unsigned __int16 *)(a5 + 24);
    if (v33 == 175) {
      uint64_t v34 = a3;
    }
    else {
      uint64_t v34 = a5;
    }
    if (v33 == 175) {
      a3 = a5;
    }
    int v32 = *(unsigned __int16 *)(a3 + 24);
    a5 = v34;
  }
  if (v32 != 175) {
    return 0;
  }
  if (*(_WORD *)(a5 + 24) != 177) {
    return 0;
  }
  uint64_t v35 = *(void *)(a3 + 48);
  if (!v35) {
    return 0;
  }
  if (*(void *)(v35 + 32)) {
    return 0;
  }
  uint64_t v37 = *(void *)(a5 + 48);
  if (!v37 || *(void *)(v37 + 32)) {
    return 0;
  }
  uint64_t v38 = *(uint64_t **)(a3 + 32);
  uint64_t v39 = v38[5];
  int v40 = *(unsigned __int16 *)(v39 + 24);
  if (v40 != 35 && v40 != 11) {
    uint64_t v39 = 0;
  }
  uint64_t v41 = *(uint64_t **)(a5 + 32);
  uint64_t v42 = v41[5];
  int v43 = *(unsigned __int16 *)(v42 + 24);
  if (v43 != 35 && v43 != 11) {
    return 0;
  }
  if (!v39) {
    return 0;
  }
  uint64_t v44 = *(void *)(v39 + 80);
  uint64_t v45 = (void *)(v44 + 24);
  if (*(_DWORD *)(v44 + 32) >= 0x41u) {
    uint64_t v45 = (void *)*v45;
  }
  if (*v45 != 8) {
    return 0;
  }
  uint64_t v49 = *(void *)(v42 + 80);
  int v50 = (void *)(v49 + 24);
  if (*(_DWORD *)(v49 + 32) >= 0x41u) {
    int v50 = (void *)*v50;
  }
  if (*v50 != 8) {
    return 0;
  }
  uint64_t v52 = *v38;
  unint64_t v51 = v38[1];
  if (v16 == 171) {
    goto LABEL_76;
  }
  if (*(_WORD *)(v52 + 24) == 171)
  {
    uint64_t v54 = *(void *)(v52 + 48);
    if (!v54) {
      return 0;
    }
    if (*(void *)(v54 + 32)) {
      return 0;
    }
    uint64_t v55 = *(void *)(v52 + 32);
    uint64_t v56 = *(void *)(v55 + 40);
    int v57 = *(unsigned __int16 *)(v56 + 24);
    if (v57 != 35 && v57 != 11) {
      return 0;
    }
    uint64_t v58 = *(void *)(v56 + 80);
    uint64_t v59 = (void *)(v58 + 24);
    if (*(_DWORD *)(v58 + 32) >= 0x41u) {
      uint64_t v59 = (void *)*v59;
    }
    if (*v59 != 255) {
      return 0;
    }
    uint64_t v52 = *(void *)v55;
    unint64_t v51 = v51 & 0xFFFFFFFF00000000 | *(unsigned int *)(v55 + 8);
LABEL_76:
    int v53 = 1;
    goto LABEL_87;
  }
  int v53 = 0;
LABEL_87:
  uint64_t v60 = *v41;
  unint64_t v61 = v41[1];
  if (v24 != 171)
  {
    if (*(_WORD *)(v60 + 24) != 171)
    {
      char v62 = 0;
      goto LABEL_97;
    }
    uint64_t v63 = *(void *)(v60 + 48);
    if (v63)
    {
      if (!*(void *)(v63 + 32))
      {
        uint64_t v64 = *(uint64_t **)(v60 + 32);
        uint64_t v65 = v64[5];
        int v66 = *(unsigned __int16 *)(v65 + 24);
        if (v66 == 35 || v66 == 11)
        {
          uint64_t v67 = *(void *)(v65 + 80);
          uint64_t v68 = *(_DWORD *)(v67 + 32) > 0x40u ? **(void **)(v67 + 24) : *(void *)(v67 + 24);
          if (v68 == 65280 || v68 == 0xFFFF)
          {
            uint64_t v60 = *v64;
            unint64_t v61 = v61 & 0xFFFFFFFF00000000 | *((unsigned int *)v64 + 2);
            goto LABEL_88;
          }
        }
      }
    }
    return 0;
  }
LABEL_88:
  char v62 = 1;
LABEL_97:
  uint64_t result = 0;
  if (v52 == v60 && v51 == v61)
  {
    unsigned int v70 = sub_1CB87E200((unsigned __int8 *)&v100);
    if (v69 == 1)
    {
      if (!a7) {
        goto LABEL_104;
      }
    }
    else if (!a7)
    {
      goto LABEL_104;
    }
    if (v70 < 0x11) {
      goto LABEL_104;
    }
    if (v53)
    {
      if (v62) {
        goto LABEL_104;
      }
      uint64_t v79 = *(void *)a1;
      unsigned int v99 = v70;
      if (v70 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v98);
      }
      uint64_t v98 = (unsigned __int8 *)(0xFFFFFFFFFFFFFFFFLL >> (80 - v70) << 16);
      BOOL v80 = sub_1CD7F11AC(v79, v52, v61, (uint64_t)&v98, 0);
      if (v99 >= 0x41 && v98) {
        MEMORY[0x1D25D9CB0](v98, 0x1000C8000313F17);
      }
      if (v80)
      {
LABEL_104:
        uint64_t v71 = *(llvm::APFloatBase **)a1;
        int v72 = *(unsigned __int8 **)(a2 + 64);
        uint64_t v98 = v72;
        if (v72) {
          llvm::MetadataTracking::track((uint64_t)&v98, v72, 2);
        }
        unsigned int v99 = *(_DWORD *)(a2 + 60);
        uint64_t v73 = *((void *)v71 + 104);
        if (v73) {
          __int16 v74 = *(_WORD *)(v73 + 8);
        }
        else {
          __int16 v74 = 0;
        }
        uint64_t v75 = sub_1CD7F3564(v71, (const char *)0xB6, (uint64_t)&v98, (llvm *)v100, *((uint64_t *)&v100 + 1), v52, (void *)v51, v74);
        uint64_t v77 = v76;
        if (v98)
        {
          int v78 = *v98;
          if ((v78 - 4) <= 0x1E)
          {
            if ((v98[1] & 0x7F) != 2 && !*((_DWORD *)v98 + 3)) {
              goto LABEL_117;
            }
            uint64_t v97 = *((void *)v98 + 2);
            if ((v97 & 4) == 0) {
              goto LABEL_117;
            }
            unint64_t v82 = v97 & 0xFFFFFFFFFFFFFFF8;
            if (!v82) {
              goto LABEL_117;
            }
            goto LABEL_130;
          }
          if ((v78 - 3) >= 0xFFFFFFFE) {
            __int16 v81 = v98;
          }
          else {
            __int16 v81 = 0;
          }
          if ((v78 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v82 = (unint64_t)(v81 + 8);
LABEL_130:
            uint64_t v101 = &v98;
            sub_1CC5FA668(v82 + 16, &v101);
            goto LABEL_117;
          }
          if (v78 == 3) {
            *((void *)v98 + 1) = 0;
          }
        }
LABEL_117:
        if (v70 < 0x11) {
          return v75;
        }
        uint64_t v83 = *(unsigned __int8 **)(a2 + 64);
        uint64_t v98 = v83;
        if (v83) {
          llvm::MetadataTracking::track((uint64_t)&v98, v83, 2);
        }
        unsigned int v99 = *(_DWORD *)(a2 + 60);
        long long v84 = v100;
        uint64_t v85 = v70 - 16;
        uint64_t v86 = *(void *)a1;
        unint64_t ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(*(uint64_t **)(a1 + 8), v100, *((uint64_t *)&v100 + 1), *(void *)(**(void **)(*(void *)a1 + 40) + 40) + 272, *(unsigned __int8 *)(a1 + 34));
        __int16 v89 = sub_1CD7EBF14(v86, v85, (const llvm::APInt *)&v98, ShiftAmountTy, v88, 0, 0);
        uint64_t v92 = *(void *)(v86 + 832);
        if (v92) {
          LOWORD(v92) = *(_WORD *)(v92 + 8);
        }
        uint64_t v75 = sub_1CCFDED5C(v86, 177, (const llvm::APInt *)&v98, (llvm *)v84, *((uint64_t *)&v84 + 1), (uint64_t)v75, v77, v91, (uint64_t)v89, v90, v92);
        if (!v98) {
          return v75;
        }
        int v93 = *v98;
        if ((v93 - 4) > 0x1E)
        {
          if ((v93 - 3) >= 0xFFFFFFFE) {
            uint64_t v96 = v98;
          }
          else {
            uint64_t v96 = 0;
          }
          if ((v93 - 3) < 0xFFFFFFFE)
          {
            if (v93 == 3) {
              *((void *)v98 + 1) = 0;
            }
            return v75;
          }
          unint64_t v95 = (unint64_t)(v96 + 8);
        }
        else
        {
          if ((v98[1] & 0x7F) != 2 && !*((_DWORD *)v98 + 3)) {
            return v75;
          }
          uint64_t v94 = *((void *)v98 + 2);
          if ((v94 & 4) == 0) {
            return v75;
          }
          unint64_t v95 = v94 & 0xFFFFFFFFFFFFFFF8;
          if (!v95) {
            return v75;
          }
        }
        uint64_t v101 = &v98;
        sub_1CC5FA668(v95 + 16, &v101);
        return v75;
      }
    }
    return 0;
  }
  return result;
}

void sub_1CCF4AC24()
{
}

void *sub_1CCF4AC38()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F2641538;
  return result;
}

void sub_1CCF4AC70(uint64_t a1, void *a2)
{
  *a2 = &unk_1F2641538;
}

BOOL sub_1CCF4AC98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)a3 + 80);
  uint64_t v4 = *(void *)(*(void *)a2 + 80);
  uint64_t v5 = *(unsigned int *)(v3 + 32);
  if (v5 <= 0x40) {
    return (*(void *)(v3 + 24) & ~*(void *)(v4 + 24)) == 0;
  }
  long long v7 = *(uint64_t **)(v3 + 24);
  uint64_t v8 = *(uint64_t **)(v4 + 24);
  unint64_t v9 = ((unint64_t)(v5 + 63) >> 6) - 1;
  do
  {
    uint64_t v11 = *v7++;
    uint64_t v10 = v11;
    uint64_t v12 = *v8++;
    uint64_t v13 = v10 & ~v12;
    BOOL result = v13 == 0;
    BOOL v15 = v9-- != 0;
  }
  while (!v13 && v15);
  return result;
}

uint64_t sub_1CCF4AD00(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unsigned int a5)
{
  uint64_t result = 0;
  if (!a2) {
    return result;
  }
  if ((a5 & 7) != 0) {
    return result;
  }
  uint64_t result = sub_1CC277B80(a4);
  if (!result) {
    return result;
  }
  if ((*(_WORD *)(*(void *)(a2 + 96) + 36) & 0xF00) != 0 || (*(unsigned char *)(a2 + 26) & 8) != 0) {
    return 0;
  }
  uint64_t v11 = *(void *)(a2 + 88);
  v44[0] = *(void *)(a2 + 80);
  v44[1] = v11;
  int v12 = LOBYTE(v44[0]) ? LOBYTE(v44[0]) - 120 < 0x33 : *(unsigned char *)(v11 + 8) == 19;
  int v13 = *a4 ? *a4 - 120 < 0x33 : *(unsigned char *)(*((void *)a4 + 1) + 8) == 19;
  if (v12 != v13) {
    return 0;
  }
  uint64_t v15 = *(void *)a4;
  uint64_t v14 = *((void *)a4 + 1);
  if (LOBYTE(v44[0]) != *(void *)a4)
  {
    *(void *)&long long v45 = *(void *)a4;
    *((void *)&v45 + 1) = v14;
    if (LOBYTE(v44[0]))
    {
      uint64_t v16 = sub_1CB87E200((unsigned __int8 *)v44);
LABEL_20:
      unint64_t v18 = v16;
      int v19 = v17;
      if ((_BYTE)v15) {
        unint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v45);
      }
      else {
        unint64_t ExtendedSizeInBits = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v45);
      }
      if ((v19 != 1 || v21 == 1) && v18 < ExtendedSizeInBits) {
        return 0;
      }
      goto LABEL_27;
    }
LABEL_17:
    uint64_t v16 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v44);
    goto LABEL_20;
  }
  if (!LOBYTE(v44[0]) && v11 != v14)
  {
    *(void *)&long long v45 = *(void *)a4;
    *((void *)&v45 + 1) = v14;
    goto LABEL_17;
  }
LABEL_27:
  if (!a5
    || (uint64_t v22 = *(void *)(a2 + 96),
        uint64_t v23 = (1 << *(unsigned char *)(v22 + 34)) | *(void *)(v22 + 8),
        uint64_t v24 = (1 << (63 - __clz(v23 & -v23))) | (a5 >> 3),
        uint64_t result = (*(uint64_t (**)(void, void, uint64_t, void, void, void, void, void, void))(**(void **)(a1 + 8) + 664))(*(void *)(a1 + 8), *(void *)(*(void *)a1 + 56), *(void *)(**(void **)(*(void *)a1 + 40) + 40) + 272, *(void *)a4, *((void *)a4 + 1), *(unsigned int *)(v22 + 16), (63 - __clz(v24 & -v24)), *(unsigned __int16 *)(v22 + 32), 0), result))
  {
    uint64_t v25 = (unsigned int *)sub_1CD3E3954(a2);
    uint64_t result = 0;
    int v26 = *(unsigned __int8 *)(*(void *)(*(void *)v25 + 40) + 16 * v25[2]);
    if (v26)
    {
      if (v26 != 174)
      {
        if (*(_WORD *)(a2 + 24) == 253)
        {
          uint64_t v27 = *(void *)(a2 + 48);
          if (!v27) {
            return 0;
          }
          int v28 = 1;
          do
          {
            if (!*(_DWORD *)(v27 + 8))
            {
              if (!v28) {
                return 0;
              }
              --v28;
            }
            uint64_t v27 = *(void *)(v27 + 32);
          }
          while (v27);
          if (v28) {
            return 0;
          }
          if (*(unsigned char *)(a1 + 33))
          {
            uint64_t v29 = *a4;
            BOOL v30 = !**(unsigned char **)(a2 + 40) || v29 == 0;
            if (v30
              || ((*(unsigned __int16 *)(*(void *)(a1 + 8) + 358 * **(unsigned __int8 **)(a2 + 40) + 2 * v29 + 73672) >> (4 * a3)) & 0xF) != 0)
            {
              return 0;
            }
          }
          if (*(unsigned __int16 *)(a2 + 58) > 2u) {
            return 0;
          }
          if ((*(_WORD *)(a2 + 26) & 0xC00) != 0)
          {
            long long v45 = *(_OWORD *)(a2 + 80);
            if ((_BYTE)v45) {
              uint64_t v31 = sub_1CB87E200((unsigned __int8 *)&v45);
            }
            else {
              uint64_t v31 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v45);
            }
            unint64_t v40 = v31;
            if (v32 == 1) {
            uint64_t v41 = *a4 ? (llvm::Type *)sub_1CB87E200(a4) : llvm::EVT::getExtendedSizeInBits((llvm::EVT *)a4);
            }
            int v43 = v41;
            if (v42 == 1) {
            if (v40 < (unint64_t)v43 + a5)
            }
              return 0;
          }
          if (((*(uint64_t (**)(void, uint64_t, uint64_t, void, void))(**(void **)(a1 + 8) + 624))(*(void *)(a1 + 8), a2, a3, *(void *)a4, *((void *)a4 + 1)) & 1) == 0)return 0; {
        }
          }
        else
        {
          long long v45 = *(_OWORD *)(a2 + 80);
          if ((_BYTE)v45) {
            uint64_t v33 = sub_1CB87E200((unsigned __int8 *)&v45);
          }
          else {
            uint64_t v33 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v45);
          }
          unint64_t v35 = v33;
          if (v34 == 1) {
          if (*a4)
          }
            uint64_t v36 = sub_1CB87E200(a4);
          else {
            uint64_t v36 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)a4);
          }
          uint64_t v38 = v36;
          if (v37 == 1) {
          if (v35 < v38 + (unint64_t)a5)
          }
            return 0;
          if (*(unsigned char *)(a1 + 33))
          {
            if (!*(unsigned char *)(*(void *)(*(void *)(*(void *)(a2 + 32) + 40) + 40)
                           + 16 * *(unsigned int *)(*(void *)(a2 + 32) + 48)))
              return 0;
            uint64_t v39 = *(void *)(a1 + 8);
            if (!*(void *)(v39
                            + 8
                            * *(unsigned __int8 *)(*(void *)(*(void *)(*(void *)(a2 + 32) + 40) + 40)
                                                 + 16 * *(unsigned int *)(*(void *)(a2 + 32) + 48))
                            + 96)
              || !*a4
              || *(unsigned char *)(v39
                          + 179
                          * *(unsigned __int8 *)(*(void *)(*(void *)(*(void *)(a2 + 32) + 40) + 40)
                                               + 16 * *(unsigned int *)(*(void *)(a2 + 32) + 48))
                          + *a4
                          + 137754))
            {
              return 0;
            }
          }
        }
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_1CCF4B174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  if (!*(_WORD *)(a2 + 56)) {
    return 1;
  }
  int v12 = *(unsigned int **)(a2 + 32);
  int v13 = &v12[10 * *(unsigned __int16 *)(a2 + 56)];
  unsigned int v65 = (a2 >> 4) ^ (a2 >> 9);
  int v66 = v13;
  while (1)
  {
    uint64_t v14 = *(void *)v12;
    uint64_t v15 = v12[2];
    uint64_t v16 = *(void **)(*(void *)v12 + 40);
    int v17 = (unsigned __int8 *)&v16[2 * v15];
    if (*v17)
    {
      if (*v17 - 15 < 0x9C) {
        return 0;
      }
    }
    else if ((*(_DWORD *)(*((void *)v17 + 1) + 8) & 0xFE) == 0x12)
    {
      return 0;
    }
    int v18 = *(unsigned __int16 *)(v14 + 24);
    if (v18 == 35 || v18 == 11)
    {
      if ((*(_WORD *)(a2 + 24) & 0xFFFE) != 0xAC) {
        goto LABEL_104;
      }
      uint64_t v20 = *(void *)(a5 + 80);
      if (*(_DWORD *)(v20 + 32) >= 0x41u) {
        operator new[]();
      }
      if ((*(void *)(*(void *)(v14 + 80) + 24) & ~*(void *)(v20 + 24)) == 0) {
        goto LABEL_104;
      }
      uint64_t v24 = *(void *)(a4 + 8);
      uint64_t v25 = *(unsigned int *)(a4 + 20);
      if (v24 != *(void *)a4)
      {
        unsigned int v29 = *(_DWORD *)(a4 + 16);
LABEL_53:
        if (3 * v29 <= 4 * ((int)v25 - *(_DWORD *)(a4 + 24)))
        {
          if (v29 >= 0x40) {
            v29 *= 2;
          }
          else {
            unsigned int v29 = 128;
          }
        }
        else if (v29 - v25 >= v29 >> 3)
        {
          goto LABEL_55;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a4, v29);
        int v13 = v66;
        unsigned int v29 = *(_DWORD *)(a4 + 16);
        uint64_t v24 = *(void *)(a4 + 8);
LABEL_55:
        unsigned int v36 = v29 - 1;
        unsigned int v37 = (v29 - 1) & v65;
        uint64_t v38 = (void *)(v24 + 8 * v37);
        uint64_t v39 = *v38;
        if (*v38 == -1)
        {
          unint64_t v40 = 0;
LABEL_74:
          if (v40) {
            int v50 = v40;
          }
          else {
            int v50 = v38;
          }
          if (*v50 != a2)
          {
            if (*v50 == -2) {
              --*(_DWORD *)(a4 + 24);
            }
            else {
              ++*(_DWORD *)(a4 + 20);
            }
            void *v50 = a2;
          }
        }
        else
        {
          unint64_t v40 = 0;
          int v41 = 1;
          while (v39 != a2)
          {
            if (v40) {
              BOOL v42 = 0;
            }
            else {
              BOOL v42 = v39 == -2;
            }
            if (v42) {
              unint64_t v40 = v38;
            }
            unsigned int v43 = v37 + v41++;
            unsigned int v37 = v43 & v36;
            uint64_t v38 = (void *)(v24 + 8 * (v43 & v36));
            uint64_t v39 = *v38;
            if (*v38 == -1) {
              goto LABEL_74;
            }
          }
        }
        goto LABEL_104;
      }
      if (v25)
      {
        int v26 = 0;
        uint64_t v27 = 8 * v25;
        int v28 = *(void **)(a4 + 8);
        while (*v28 != a2)
        {
          if (*v28 == -2) {
            int v26 = v28;
          }
          ++v28;
          v27 -= 8;
          if (!v27)
          {
            if (!v26) {
              goto LABEL_36;
            }
            *int v26 = a2;
            --*(_DWORD *)(a4 + 24);
            goto LABEL_104;
          }
        }
        goto LABEL_104;
      }
LABEL_36:
      unsigned int v29 = *(_DWORD *)(a4 + 16);
      if (v25 >= v29) {
        goto LABEL_53;
      }
      *(_DWORD *)(a4 + 20) = v25 + 1;
      *(void *)(v24 + 8 * v25) = a2;
      goto LABEL_104;
    }
    uint64_t v21 = *(void *)(v14 + 48);
    if (!v21) {
      return 0;
    }
    int v22 = 1;
    do
    {
      if (*(_DWORD *)(v21 + 8) == v15)
      {
        if (!v22) {
          return 0;
        }
        --v22;
      }
      uint64_t v21 = *(void *)(v21 + 32);
    }
    while (v21);
    if (v22) {
      return 0;
    }
    if (*(unsigned __int16 *)(v14 + 24) <= 0xC6u) {
      break;
    }
    if (v18 == 199) {
      goto LABEL_67;
    }
    if (v18 != 253) {
      goto LABEL_97;
    }
    LOBYTE(v67) = 0;
    uint64_t v68 = 0;
    if (!sub_1CCF4B7B8(a1, *(void *)(a5 + 80), v14, *v16, v16[1], &v67)
      || !sub_1CCF4AD00(a1, v14, 3, (unsigned __int8 *)&v67, 0))
    {
      return 0;
    }
    int v13 = v66;
    if ((~*(unsigned __int16 *)(v14 + 26) & 0xC00) != 0
      || ((v30 = *(void *)(v14 + 80), uint64_t v31 = *(void *)(v14 + 88), v67 != v30)
       || !(_BYTE)v67 && v68 != v31)
      && (BOOL v32 = sub_1CD787E7C((unsigned __int8 *)&v67, v30, v31), v13 = v66, !v32))
    {
      if ((uint64_t v33 = *(void *)(v14 + 80), v34 = *(void *)(v14 + 88), v67 == v33)
        && ((_BYTE)v67 || v68 == v34)
        || (BOOL v63 = sub_1CD787F08((unsigned __int8 *)&v67, v33, v34), v13 = v66, v63))
      {
        unint64_t v35 = *(unsigned int *)(a3 + 8);
        if (v35 >= *(unsigned int *)(a3 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)a3 + 8 * v35) = v14;
        ++*(_DWORD *)(a3 + 8);
      }
    }
LABEL_104:
    v12 += 10;
    if (v12 == v13) {
      return 1;
    }
  }
  if ((v18 - 171) < 3)
  {
    char v23 = sub_1CCF4B174(a1, *(void *)v12, a3, a4, a5, a6);
    int v13 = v66;
    if ((v23 & 1) == 0) {
      return 0;
    }
    goto LABEL_104;
  }
  if (v18 != 4) {
    goto LABEL_97;
  }
LABEL_67:
  uint64_t v44 = *(void *)(a5 + 80);
  long long v45 = (llvm::APInt *)(v44 + 24);
  if (*(_DWORD *)(v44 + 32) > 0x40u)
  {
    uint64_t v47 = llvm::APInt::countTrailingOnesSlowCase(v45);
    int v13 = v66;
    uint64_t v46 = (llvm::LLVMContext *)v47;
  }
  else
  {
    uint64_t v46 = (llvm::LLVMContext *)__clz(__rbit64(~*(void *)v45));
  }
  if ((int)v46 <= 31)
  {
    switch(v46)
    {
      case 1:
        uint64_t v48 = 0;
        uint64_t v49 = 2;
        goto LABEL_90;
      case 0x10:
        uint64_t v48 = 0;
        uint64_t v49 = 4;
        goto LABEL_90;
      case 8:
        uint64_t v48 = 0;
        uint64_t v49 = 3;
        goto LABEL_90;
    }
  }
  else
  {
    switch(v46)
    {
      case 0x20:
        uint64_t v48 = 0;
        uint64_t v49 = 5;
        goto LABEL_90;
      case 0x40:
        uint64_t v48 = 0;
        uint64_t v49 = 6;
        goto LABEL_90;
      case 0x80:
        uint64_t v48 = 0;
        uint64_t v49 = 7;
        goto LABEL_90;
    }
  }
  uint64_t v48 = llvm::IntegerType::get(*(llvm::IntegerType **)(*(void *)a1 + 56), v46);
  int v13 = v66;
  uint64_t v49 = 0;
  int v18 = *(unsigned __int16 *)(v14 + 24);
LABEL_90:
  uint64_t v67 = v49;
  uint64_t v68 = v48;
  uint64_t v51 = *(void *)(v14 + 32);
  if (v18 == 4)
  {
    uint64_t v52 = *(void *)(v51 + 40);
    int v53 = (uint64_t *)(v52 + 80);
    uint64_t v54 = (uint64_t *)(v52 + 88);
  }
  else
  {
    int v53 = (uint64_t *)(*(void *)(*(void *)v51 + 40) + 16 * *(unsigned int *)(v51 + 8));
    uint64_t v54 = v53 + 1;
  }
  uint64_t v55 = *v54;
  if (v49 == *v53 && (v49 || v48 == v55)) {
    goto LABEL_104;
  }
  BOOL v56 = sub_1CD787E7C((unsigned __int8 *)&v67, *v53, v55);
  int v13 = v66;
  if (v56) {
    goto LABEL_104;
  }
LABEL_97:
  if (*a6) {
    return 0;
  }
  *a6 = v14;
  unint64_t v57 = *(unsigned __int16 *)(v14 + 58);
  if (v57 < 2) {
    goto LABEL_104;
  }
  int v58 = 0;
  uint64_t v59 = *(unsigned __int8 **)(v14 + 40);
  while (2)
  {
    int v61 = *v59;
    v59 += 16;
    int v60 = v61;
    if (v61 == 172)
    {
LABEL_103:
      if (!--v57) {
        goto LABEL_104;
      }
      continue;
    }
    break;
  }
  BOOL v62 = v60 != 1;
  if ((v62 & v58) != 1)
  {
    v58 |= v62;
    goto LABEL_103;
  }
  uint64_t result = 0;
  *a6 = 0;
  return result;
}

uint64_t sub_1CCF4B7B8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v10 = (void *)(a2 + 24);
  uint64_t v11 = *(unsigned int *)(a2 + 32);
  if (v11 > 0x40)
  {
    uint64_t result = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)(a2 + 24));
    if (!result) {
      return result;
    }
    int v13 = (llvm::LLVMContext *)result;
    int v22 = 0;
    int64_t v23 = (unint64_t)(v11 + 63) >> 6;
    do
    {
      if (v23-- < 1) {
        break;
      }
      unint64_t v25 = *(void *)(*v10 + 8 * v23);
      v22 += __clz(v25);
    }
    while (!v25);
    uint64_t result = 0;
    int v26 = v11 | 0xFFFFFFC0;
    if ((v11 & 0x3F) == 0) {
      int v26 = 0;
    }
    if (v26 + v13 + v22 != v11) {
      return result;
    }
  }
  else
  {
    if (*v10) {
      BOOL v12 = ((*v10 + 1) & *v10) == 0;
    }
    else {
      BOOL v12 = 0;
    }
    if (!v12) {
      return 0;
    }
    int v13 = (llvm::LLVMContext *)__clz(__rbit64(~*v10));
  }
  if ((int)v13 <= 31)
  {
    switch(v13)
    {
      case 1:
        uint64_t v14 = 0;
        char v15 = 0;
        uint64_t v16 = 2;
        goto LABEL_19;
      case 0x10:
        uint64_t v14 = 0;
        char v15 = 0;
        uint64_t v16 = 4;
        goto LABEL_19;
      case 8:
        uint64_t v14 = 0;
        char v15 = 0;
        uint64_t v16 = 3;
        goto LABEL_19;
    }
  }
  else
  {
    switch(v13)
    {
      case 0x20:
        uint64_t v14 = 0;
        char v15 = 0;
        uint64_t v16 = 5;
        goto LABEL_19;
      case 0x40:
        uint64_t v14 = 0;
        char v15 = 0;
        uint64_t v16 = 6;
        goto LABEL_19;
      case 0x80:
        uint64_t v14 = 0;
        char v15 = 0;
        uint64_t v16 = 7;
        goto LABEL_19;
    }
  }
  uint64_t v14 = llvm::IntegerType::get(*(llvm::IntegerType **)(*(void *)a1 + 56), v13);
  uint64_t v16 = 0;
  char v15 = 1;
LABEL_19:
  *a6 = v16;
  a6[1] = v14;
  uint64_t v18 = *(void *)(a3 + 80);
  uint64_t v17 = *(void *)(a3 + 88);
  v27[0] = v18;
  v27[1] = v17;
  if (v16 == v18 && (v16 || v14 == v17))
  {
    if (!*(unsigned char *)(a1 + 33)) {
      return 1;
    }
    if (!a4) {
      char v15 = 1;
    }
    if ((v15 & 1) == 0 && *(unsigned __int16 *)(*(void *)(a1 + 8) + 358 * a4 + 2 * v16 + 73672) < 0x1000u) {
      return 1;
    }
  }
  if ((*(_WORD *)(*(void *)(a3 + 96) + 36) & 0xF00) != 0 || (*(unsigned char *)(a3 + 26) & 8) != 0) {
    return 0;
  }
  if (v16 != v18 || (uint64_t result = 0, !v16) && v17 != v14)
  {
    uint64_t result = sub_1CC277C0C((unsigned __int8 *)v27, v16, v14);
    if (result)
    {
      uint64_t result = sub_1CC277B80((unsigned __int8 *)a6);
      if (result)
      {
        if (!*(unsigned char *)(a1 + 33))
        {
          uint64_t v21 = *(void *)(a1 + 8);
          uint64_t v20 = *a6;
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v21 + 624))(v21, a3, 3, v20, a6[1]);
        }
        uint64_t result = 0;
        if (a4)
        {
          uint64_t v20 = *a6;
          if (*a6)
          {
            uint64_t v21 = *(void *)(a1 + 8);
            if (*(unsigned __int16 *)(v21 + 358 * a4 + 2 * *a6 + 73672) > 0xFFFu) {
              return 0;
            }
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v21 + 624))(v21, a3, 3, v20, a6[1]);
          }
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1CCF4BA74(void **a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned int a6, const llvm::APInt *a7)
{
  uint64_t v198 = 0;
  LODWORD(v199) = 0;
  uint64_t v196 = 0;
  LODWORD(v197) = 0;
  *(void *)&long long v195 = 0;
  DWORD2(v195) = 0;
  uint64_t v193 = 0;
  LODWORD(v194) = 0;
  uint64_t v191 = 0;
  int v192 = 0;
  uint64_t v189 = 0;
  int v190 = 0;
  if (!sub_1CCF4C9B0((uint64_t)a1, a3, a4, (uint64_t)&v198, (uint64_t)&v196, (uint64_t)&v191, 0)
    || !sub_1CCF4C9B0((uint64_t)a1, a5, a6, (uint64_t)&v195, (uint64_t)&v193, (uint64_t)&v189, 0))
  {
    return 0;
  }
  long long v188 = *(_OWORD *)(*(void *)(a3 + 40) + 16 * a4);
  uint64_t v16 = v198;
  uint64_t v17 = v199;
  uint64_t v18 = *(void *)(v198 + 40) + 16 * v199;
  uint64_t v19 = *(void *)(v18 + 8);
  uint64_t v186 = *(llvm **)v18;
  uint64_t v187 = v19;
  if (*((unsigned char *)a1 + 33) || sub_1CD3DD468((unsigned __int8 *)&v188, v14, v15) != 2)
  {
    unsigned __int8 v20 = (*(uint64_t (**)(void *, uint64_t, void))(*a1[1] + 400))(a1[1], *(void *)(*(void *)(*a1)[5] + 40) + 272, (*a1)[7]);
    if (v188 != v20 || !(_BYTE)v188 && *((void *)&v188 + 1) != v21) {
      return 0;
    }
  }
  uint64_t v22 = v195;
  int v23 = DWORD2(v195);
  uint64_t v24 = (unsigned __int8 *)(*(void *)(v195 + 40) + 16 * DWORD2(v195));
  if (v186 != *v24 || !(_BYTE)v186 && v187 != *((void *)v24 + 1)) {
    return 0;
  }
  unsigned int v26 = *(_DWORD *)(v191 + 76);
  unsigned int v27 = *(_DWORD *)(v189 + 76);
  if ((_BYTE)v186)
  {
    BOOL v28 = 1;
    if (v186 - 2 >= 6 && v186 - 15 >= 0x3C) {
      BOOL v28 = v186 - 120 < 0x20;
    }
  }
  else
  {
    if ((*(_DWORD *)(v187 + 8) & 0xFE) == 0x12) {
      int v29 = *(unsigned __int8 *)(**(void **)(v187 + 16) + 8);
    }
    else {
      int v29 = *(_DWORD *)(v187 + 8);
    }
    BOOL v28 = v29 == 13;
  }
  uint64_t v30 = v196;
  uint64_t v31 = v193;
  int v32 = v197;
  uint64_t v33 = v194;
  if (v196 == v193 && v197 == v194 && v26 == v27 && v28)
  {
    BOOL v162 = v28;
    unsigned int v166 = v194;
    int v169 = v197;
    unsigned int v172 = *(_DWORD *)(v189 + 76);
    uint64_t v175 = v193;
    uint64_t v178 = v195;
    uint64_t v160 = v197;
    unsigned int v181 = *(_DWORD *)(v191 + 76);
    uint64_t v184 = v196;
    int v159 = sub_1CD7FF12C(v196, v197, 0);
    int v41 = sub_1CD802C68(v184, v160, 0);
    unsigned int v26 = v181;
    if (v181 == 17) {
      unsigned __int8 v43 = a2;
    }
    else {
      unsigned __int8 v43 = 0;
    }
    if (v181 == 18) {
      int v44 = a2;
    }
    else {
      int v44 = 0;
    }
    if (v181 == 22) {
      int v45 = a2 ^ 1;
    }
    else {
      int v45 = 0;
    }
    if (v181 == 20) {
      int v46 = a2 ^ 1;
    }
    else {
      int v46 = 0;
    }
    if ((v43 & v159 & 1) != 0 || (v44 & v41 & 1) != 0 || (v45 & v159 & 1) != 0 || (v46 & v159) != 0)
    {
      uint64_t v89 = (uint64_t)*a1;
      uint64_t v90 = *(unsigned __int8 **)(a3 + 64);
      *(void *)&long long v200 = v90;
      if (v90) {
        llvm::MetadataTracking::track((uint64_t)&v200, v90, 2);
      }
      DWORD2(v200) = *(_DWORD *)(a3 + 60);
      uint64_t v91 = *(void *)(v89 + 832);
      if (v91) {
        LOWORD(v91) = *(_WORD *)(v91 + 8);
      }
      int v53 = sub_1CCFDED5C(v89, 172, (const llvm::APInt *)&v200, v186, v187, v16, v199, v42, v178, *((uint64_t *)&v195 + 1), v91);
    }
    else
    {
      if (v181 == 20) {
        int v47 = a2;
      }
      else {
        int v47 = 0;
      }
      char v48 = v43 & v41;
      if (v181 == 18) {
        int v49 = a2 ^ 1;
      }
      else {
        int v49 = 0;
      }
      uint64_t v30 = v184;
      uint64_t v31 = v175;
      uint64_t v22 = v178;
      int v32 = v169;
      unsigned int v27 = v172;
      uint64_t v33 = v166;
      BOOL v28 = v162;
      if ((v48 & 1) == 0 && (v47 & v159 & 1) == 0 && (v45 & v41 & 1) == 0 && (v49 & v41) == 0) {
        goto LABEL_25;
      }
      uint64_t v50 = (uint64_t)*a1;
      uint64_t v51 = *(unsigned __int8 **)(a3 + 64);
      *(void *)&long long v200 = v51;
      if (v51) {
        llvm::MetadataTracking::track((uint64_t)&v200, v51, 2);
      }
      DWORD2(v200) = *(_DWORD *)(a3 + 60);
      uint64_t v52 = *(void *)(v50 + 832);
      if (v52) {
        LOWORD(v52) = *(_WORD *)(v52 + 8);
      }
      int v53 = sub_1CCFDED5C(v50, 171, (const llvm::APInt *)&v200, v186, v187, v16, v199, v42, v178, *((uint64_t *)&v195 + 1), v52);
    }
    uint64_t v92 = (uint64_t)v53;
    uint64_t v93 = v54;
    if ((void)v200)
    {
      int v94 = *(unsigned __int8 *)v200;
      if ((v94 - 4) > 0x1E)
      {
        if ((v94 - 3) >= 0xFFFFFFFE) {
          uint64_t v97 = v200;
        }
        else {
          uint64_t v97 = 0;
        }
        if ((v94 - 3) < 0xFFFFFFFE)
        {
          if (v94 == 3) {
            *(void *)(v200 + 8) = 0;
          }
          goto LABEL_139;
        }
        unint64_t v98 = v97 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v200 + 1) & 0x7F) != 2 && !*(_DWORD *)(v200 + 12)) {
          goto LABEL_139;
        }
        uint64_t v155 = *(void *)(v200 + 16);
        if ((v155 & 4) == 0) {
          goto LABEL_139;
        }
        unint64_t v98 = v155 & 0xFFFFFFFFFFFFFFF8;
        if (!v98) {
          goto LABEL_139;
        }
      }
      v201[0] = &v200;
      sub_1CC5FA668(v98 + 16, v201);
    }
LABEL_139:
    sub_1CCEF0788((uint64_t)a1, v92);
    return sub_1CD3DC614(*a1, a7, (llvm *)v188, *((uint64_t *)&v188 + 1), v92, v93, v184, v160, v181, 0, 0, 0, 0);
  }
LABEL_25:
  if (a2 && v16 == v22 && v17 == v23 && v26 == v27)
  {
    unsigned int v182 = v26;
    uint64_t v185 = v30;
    uint64_t v176 = v31;
    uint64_t v179 = v22;
    int v170 = v32;
    unsigned int v173 = v27;
    int v167 = v33;
    BOOL v164 = v28;
    uint64_t v67 = sub_1CD3E12F4((unsigned __int8 *)&v186, v33, v32);
    BOOL v28 = v164;
    LODWORD(v33) = v167;
    int v32 = v170;
    unsigned int v27 = v173;
    uint64_t v31 = v176;
    uint64_t v22 = v179;
    uint64_t v30 = v185;
    unsigned int v26 = v182;
    BOOL v68 = (unint64_t)v67 > 1 && v164;
    if (v68 && v182 == 22)
    {
      BOOL v69 = sub_1CD7F2D2C(v185);
      uint64_t v70 = v185;
      if (v69)
      {
        BOOL v71 = sub_1CD802954(v176);
        uint64_t v70 = v185;
        if (v71) {
          goto LABEL_111;
        }
      }
      BOOL v95 = sub_1CD802954(v70);
      BOOL v28 = v164;
      LODWORD(v33) = v167;
      int v32 = v170;
      unsigned int v27 = v173;
      uint64_t v31 = v176;
      uint64_t v22 = v179;
      uint64_t v30 = v185;
      unsigned int v26 = v182;
      if (v95)
      {
        BOOL v96 = sub_1CD7F2D2C(v176);
        BOOL v28 = v164;
        LODWORD(v33) = v167;
        int v32 = v170;
        unsigned int v27 = v173;
        uint64_t v31 = v176;
        uint64_t v22 = v179;
        uint64_t v30 = v185;
        unsigned int v26 = v182;
        if (v96)
        {
LABEL_111:
          int v72 = sub_1CD7EBF14((uint64_t)*a1, 1, a7, v186, v187, 0, 0);
          uint64_t v74 = v73;
          uint64_t v76 = sub_1CD7EBF14((uint64_t)*a1, 2, a7, v186, v187, 0, 0);
          uint64_t v78 = v77;
          uint64_t v79 = (uint64_t)*a1;
          BOOL v80 = *(unsigned __int8 **)(a3 + 64);
          *(void *)&long long v200 = v80;
          if (v80) {
            llvm::MetadataTracking::track((uint64_t)&v200, v80, 2);
          }
          DWORD2(v200) = *(_DWORD *)(a3 + 60);
          uint64_t v81 = *(void *)(v79 + 832);
          if (v81) {
            LOWORD(v81) = *(_WORD *)(v81 + 8);
          }
          unint64_t v82 = sub_1CCFDED5C(v79, 56, (const llvm::APInt *)&v200, v186, v187, v16, v199, v75, (uint64_t)v72, v74, v81);
          uint64_t v84 = v83;
          if (!(void)v200) {
            goto LABEL_119;
          }
          int v85 = *(unsigned __int8 *)v200;
          if ((v85 - 4) > 0x1E)
          {
            if ((v85 - 3) >= 0xFFFFFFFE) {
              uint64_t v126 = v200;
            }
            else {
              uint64_t v126 = 0;
            }
            if ((v85 - 3) < 0xFFFFFFFE)
            {
              if (v85 == 3) {
                *(void *)(v200 + 8) = 0;
              }
              goto LABEL_119;
            }
            unint64_t v127 = v126 + 8;
          }
          else
          {
            if ((*(unsigned char *)(v200 + 1) & 0x7F) != 2 && !*(_DWORD *)(v200 + 12)) {
              goto LABEL_119;
            }
            uint64_t v158 = *(void *)(v200 + 16);
            if ((v158 & 4) == 0) {
              goto LABEL_119;
            }
            unint64_t v127 = v158 & 0xFFFFFFFFFFFFFFF8;
            if (!v127) {
              goto LABEL_119;
            }
          }
          v201[0] = &v200;
          sub_1CC5FA668(v127 + 16, v201);
LABEL_119:
          sub_1CCEF0788((uint64_t)a1, (uint64_t)v82);
          return sub_1CD3DC614(*a1, a7, (llvm *)v188, *((uint64_t *)&v188 + 1), (uint64_t)v82, v84, (uint64_t)v76, v78, 0xBu, 0, 0, 0, 0);
        }
      }
    }
  }
  if (!v28) {
    goto LABEL_39;
  }
  int v165 = v33;
  int v168 = v32;
  uint64_t v174 = v31;
  unsigned int v171 = v27;
  unsigned int v180 = v26;
  uint64_t v183 = v30;
  uint64_t v177 = v22;
  int v34 = (*(uint64_t (**)(void *, llvm *, uint64_t))(*a1[1] + 288))(a1[1], v186, v187);
  LODWORD(v33) = v165;
  int v32 = v168;
  unsigned int v27 = v171;
  uint64_t v31 = v174;
  uint64_t v22 = v177;
  uint64_t v30 = v183;
  unsigned int v26 = v180;
  if (!v34) {
    goto LABEL_39;
  }
  if (v180 != v171) {
    goto LABEL_39;
  }
  uint64_t v36 = *(void *)(a3 + 48);
  if (!v36) {
    goto LABEL_39;
  }
  int v37 = 1;
  do
  {
    if (*(_DWORD *)(v36 + 8) == a4)
    {
      if (!v37) {
        goto LABEL_39;
      }
      --v37;
    }
    uint64_t v36 = *(void *)(v36 + 32);
  }
  while (v36);
  if (v37) {
    goto LABEL_39;
  }
  uint64_t v55 = *(void *)(a5 + 48);
  if (!v55) {
    goto LABEL_39;
  }
  int v56 = 1;
  do
  {
    if (*(_DWORD *)(v55 + 8) == a6)
    {
      if (!v56) {
        goto LABEL_39;
      }
      --v56;
    }
    uint64_t v55 = *(void *)(v55 + 32);
  }
  while (v55);
  if (v56) {
    goto LABEL_39;
  }
  if (a2 && v180 == 17 || !a2 && v180 == 22)
  {
    uint64_t v99 = (uint64_t)*a1;
    long long v100 = *(unsigned __int8 **)(a3 + 64);
    *(void *)&long long v200 = v100;
    if (v100) {
      llvm::MetadataTracking::track((uint64_t)&v200, v100, 2);
    }
    DWORD2(v200) = *(_DWORD *)(a3 + 60);
    uint64_t v101 = *(void *)(v99 + 832);
    if (v101) {
      LOWORD(v101) = *(_WORD *)(v101 + 8);
    }
    uint64_t v103 = sub_1CCFDED5C(v99, 173, (const llvm::APInt *)&v200, v186, v187, v16, v199, v35, v183, v197, v101);
    uint64_t v105 = v104;
    if ((void)v200)
    {
      int v106 = *(unsigned __int8 *)v200;
      if ((v106 - 4) > 0x1E)
      {
        if ((v106 - 3) >= 0xFFFFFFFE) {
          uint64_t v122 = v200;
        }
        else {
          uint64_t v122 = 0;
        }
        if ((v106 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v123 = v122 + 8;
LABEL_179:
          v201[0] = &v200;
          sub_1CC5FA668(v123 + 16, v201);
          goto LABEL_158;
        }
        if (v106 == 3) {
          *(void *)(v200 + 8) = 0;
        }
      }
      else if ((*(unsigned char *)(v200 + 1) & 0x7F) == 2 || *(_DWORD *)(v200 + 12))
      {
        uint64_t v156 = *(void *)(v200 + 16);
        if ((v156 & 4) != 0)
        {
          unint64_t v123 = v156 & 0xFFFFFFFFFFFFFFF8;
          if (v123) {
            goto LABEL_179;
          }
        }
      }
    }
LABEL_158:
    uint64_t v107 = (uint64_t)*a1;
    unsigned int v108 = *(unsigned __int8 **)(a5 + 64);
    *(void *)&long long v200 = v108;
    if (v108) {
      llvm::MetadataTracking::track((uint64_t)&v200, v108, 2);
    }
    DWORD2(v200) = *(_DWORD *)(a5 + 60);
    uint64_t v109 = *(void *)(v107 + 832);
    if (v109) {
      LOWORD(v109) = *(_WORD *)(v109 + 8);
    }
    uint64_t v111 = sub_1CCFDED5C(v107, 173, (const llvm::APInt *)&v200, v186, v187, v177, *((uint64_t *)&v195 + 1), v102, v174, v194, v109);
    uint64_t v113 = v112;
    if (!(void)v200) {
      goto LABEL_166;
    }
    int v114 = *(unsigned __int8 *)v200;
    if ((v114 - 4) > 0x1E)
    {
      if ((v114 - 3) >= 0xFFFFFFFE) {
        uint64_t v124 = v200;
      }
      else {
        uint64_t v124 = 0;
      }
      if ((v114 - 3) < 0xFFFFFFFE)
      {
        if (v114 == 3) {
          *(void *)(v200 + 8) = 0;
        }
        goto LABEL_166;
      }
      unint64_t v125 = v124 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v200 + 1) & 0x7F) != 2 && !*(_DWORD *)(v200 + 12)) {
        goto LABEL_166;
      }
      uint64_t v157 = *(void *)(v200 + 16);
      if ((v157 & 4) == 0) {
        goto LABEL_166;
      }
      unint64_t v125 = v157 & 0xFFFFFFFFFFFFFFF8;
      if (!v125) {
        goto LABEL_166;
      }
    }
    v201[0] = &v200;
    sub_1CC5FA668(v125 + 16, v201);
LABEL_166:
    uint64_t v115 = (*a1)[104];
    if (v115) {
      LOWORD(v115) = *(_WORD *)(v115 + 8);
    }
    int v116 = sub_1CCFDED5C((uint64_t)*a1, 172, a7, v186, v187, (uint64_t)v103, v105, v110, (uint64_t)v111, v113, v115);
    goto LABEL_169;
  }
  BOOL v57 = v180 == 22;
  if (!a2) {
    BOOL v57 = v180 == 17;
  }
  if (v57)
  {
    uint64_t v58 = v197;
    uint64_t v59 = sub_1CCFD8CD8(v183, v197, 0, 0);
    uint64_t v60 = v194;
    uint64_t v61 = sub_1CCFD8CD8(v174, v194, 0, 0);
    LODWORD(v33) = v165;
    int v32 = v168;
    unsigned int v27 = v171;
    uint64_t v31 = v174;
    uint64_t v22 = v177;
    uint64_t v30 = v183;
    unsigned int v26 = v180;
    if (v16 == v177
      && v17 == v23
      && v59
      && v61
      && (*(unsigned char *)(v59 + 26) & 8) == 0
      && (*(unsigned char *)(v61 + 26) & 8) == 0)
    {
      uint64_t v63 = *(void *)(v59 + 80);
      uint64_t v64 = (void *)(v63 + 24);
      unsigned int v163 = (void *)(*(void *)(v61 + 80) + 24);
      uint64_t v65 = *(unsigned int *)(v63 + 32);
      if (v65 > 0x40)
      {
        unint64_t v128 = ((unint64_t)(v65 + 63) >> 3) & 0x3FFFFFF8;
        while (v128)
        {
          unint64_t v129 = *(void *)(*v64 - 8 + v128);
          unint64_t v130 = *(void *)(*v163 - 8 + v128);
          v128 -= 8;
          if (v129 != v130)
          {
            if (v129 <= v130) {
              goto LABEL_103;
            }
            goto LABEL_173;
          }
        }
      }
      else
      {
        if (*v64 < *v163)
        {
LABEL_103:
          uint64_t v66 = *(void *)(v61 + 80) + 24;
          unsigned int v163 = v64;
          goto LABEL_204;
        }
        if (*v64 > *v163)
        {
LABEL_173:
          uint64_t v66 = (uint64_t)v64;
          goto LABEL_204;
        }
      }
      uint64_t v66 = *(void *)(v61 + 80) + 24;
LABEL_204:
      unsigned int v161 = *(_DWORD *)(v66 + 8);
      if (v161 >= 0x41) {
        operator new[]();
      }
      unint64_t v131 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v161;
      if (!v161) {
        unint64_t v131 = 0;
      }
      uint8x8_t v132 = (uint8x8_t)vcnt_s8((int8x8_t)(v131 & (*(void *)v66 - *v163)));
      v132.i16[0] = vaddlv_u8(v132);
      unsigned int v26 = v180;
      uint64_t v30 = v183;
      uint64_t v31 = v174;
      uint64_t v22 = v177;
      int v32 = v168;
      unsigned int v27 = v171;
      LODWORD(v33) = v165;
      if (v132.u32[0] == 1)
      {
        uint64_t v133 = (*a1)[104];
        if (v133) {
          LOWORD(v133) = *(_WORD *)(v133 + 8);
        }
        uint64_t v135 = sub_1CCFDED5C((uint64_t)*a1, 170, a7, v186, v187, v183, v58, v62, v174, v60, v133);
        uint64_t v137 = v136;
        uint64_t v138 = (*a1)[104];
        if (v138) {
          LOWORD(v138) = *(_WORD *)(v138 + 8);
        }
        uint64_t v141 = sub_1CCFDED5C((uint64_t)*a1, 169, a7, v186, v187, v183, v58, v134, v174, v60, v138);
        uint64_t v142 = v139;
        uint64_t v143 = (*a1)[104];
        if (v143) {
          LOWORD(v143) = *(_WORD *)(v143 + 8);
        }
        uint64_t v145 = sub_1CCFDED5C((uint64_t)*a1, 57, a7, v186, v187, v16, v199, v140, (uint64_t)v141, v139, v143);
        uint64_t v147 = v146;
        uint64_t v148 = (*a1)[104];
        if (v148) {
          LOWORD(v148) = *(_WORD *)(v148 + 8);
        }
        uint64_t v149 = sub_1CCFDED5C((uint64_t)*a1, 57, a7, v186, v187, (uint64_t)v135, v137, v144, (uint64_t)v141, v142, v148);
        uint64_t v151 = sub_1CD7EBB8C((uint64_t)*a1, a7, (uint64_t)v149, v150, v186, v187);
        uint64_t v154 = (*a1)[104];
        if (v154) {
          LOWORD(v154) = *(_WORD *)(v154 + 8);
        }
        int v116 = sub_1CCFDED5C((uint64_t)*a1, 171, a7, v186, v187, (uint64_t)v145, v147, v153, (uint64_t)v151, v152, v154);
LABEL_169:
        uint64_t v118 = (uint64_t)v116;
        uint64_t v119 = v117;
        uint64_t v120 = sub_1CD7EBF14((uint64_t)*a1, 0, a7, v186, v187, 0, 0);
        return sub_1CD3DC614(*a1, a7, (llvm *)v188, *((uint64_t *)&v188 + 1), v118, v119, (uint64_t)v120, v121, v180, 0, 0, 0, 0);
      }
    }
  }
LABEL_39:
  if (v16 == v31 && v17 == v33 && v30 == v22 && v32 == v23)
  {
    unsigned int v27 = (v27 >> 1) & 2 | v27 & 0xFFFFFFF9 | (4 * ((v27 >> 1) & 1));
    long long v200 = v195;
    int v23 = v194;
    DWORD2(v195) = v194;
    uint64_t v22 = v193;
    *(void *)&long long v195 = v193;
    uint64_t v193 = v200;
    LODWORD(v194) = DWORD2(v200);
  }
  if (v16 != v22) {
    return 0;
  }
  uint64_t result = 0;
  if (v17 != v23) {
    return result;
  }
  if (v30 != v193) {
    return 0;
  }
  uint64_t result = 0;
  if (v32 == v194)
  {
    uint64_t v38 = v30;
    unsigned __int8 v39 = v186;
    if (a2) {
      unsigned int v40 = sub_1CD7EA0A0(v26, v27, v186, v187);
    }
    else {
      unsigned int v40 = sub_1CD7E9FEC(v26, v27, v186, v187);
    }
    unsigned int v86 = v40;
    if (v40 == 24) {
      return 0;
    }
    if (!*((unsigned char *)a1 + 33)) {
      return sub_1CD3DC614(*a1, a7, (llvm *)v188, *((uint64_t *)&v188 + 1), v16, v199, v38, v197, v86, 0, 0, 0, 0);
    }
    int v87 = a1[1];
    uint64_t v88 = *(void *)(*(void *)(v16 + 40) + 16 * v17);
    if (((*((_DWORD *)v87 + 23 * v40 + (v88 >> 3) + 42897) >> (4 * (v88 & 7))) & 0xF) != 0) {
      return 0;
    }
    if (!v39) {
      return 0;
    }
    if (v39 == 1 || (uint64_t result = 0, v87[v39 + 12]))
    {
      if (!*((unsigned char *)v87 + 390 * v39 + 4055)) {
        return sub_1CD3DC614(*a1, a7, (llvm *)v188, *((uint64_t *)&v188 + 1), v16, v199, v38, v197, v86, 0, 0, 0, 0);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1CCF4C9B0(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v11 = *(unsigned __int16 *)(a2 + 24);
  if (v11 == 193)
  {
    int v13 = (uint64_t *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 32);
    unsigned int v14 = 2;
    unsigned int v15 = 1;
LABEL_13:
    uint64_t v19 = v13;
    goto LABEL_14;
  }
  if ((v11 & 0xFFFE) == 0x8A && a7 != 0)
  {
    int v13 = (uint64_t *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 32) + 40;
    unsigned int v14 = 3;
    unsigned int v15 = 2;
    goto LABEL_13;
  }
  if (v11 != 192) {
    return 0;
  }
  uint64_t v19 = (uint64_t *)(a2 + 32);
  uint64_t result = sub_1CD80E98C(*(unsigned int **)(a1 + 8), *(void *)(*(void *)(a2 + 32) + 80), *(void *)(*(void *)(a2 + 32) + 88));
  if (result)
  {
    uint64_t result = sub_1CD80EB68(*(unsigned int **)(a1 + 8), *(void *)(*v19 + 120));
    if (result)
    {
      uint64_t v21 = (void *)(*(void *)(a2 + 40) + 16 * a3);
      uint64_t result = sub_1CD7879C8(*(unsigned int **)(a1 + 8), *v21, v21[1]);
      if (result)
      {
        uint64_t v12 = *v19;
        unsigned int v14 = 4;
        unsigned int v15 = 1;
LABEL_14:
        uint64_t v22 = *(void *)v12;
        *(_DWORD *)(a4 + 8) = *(_DWORD *)(v12 + 8);
        *(void *)a4 = v22;
        uint64_t v23 = *v19 + 40 * v15;
        uint64_t v24 = *(void *)v23;
        *(_DWORD *)(a5 + 8) = *(_DWORD *)(v23 + 8);
        *(void *)a5 = v24;
        uint64_t v25 = *v19 + 40 * v14;
        uint64_t v26 = *(void *)v25;
        *(_DWORD *)(a6 + 8) = *(_DWORD *)(v25 + 8);
        *(void *)a6 = v26;
        return 1;
      }
    }
  }
  return result;
}

uint64_t *sub_1CCF4CAE8(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  uint64_t v12 = *(void *)(a4 + 40) + 16 * a5;
  unsigned int v14 = *(llvm **)v12;
  uint64_t v13 = *(void *)(v12 + 8);
  unsigned int v15 = *(unsigned __int8 **)(a6 + 64);
  uint64_t v103 = v15;
  if (v15) {
    llvm::MetadataTracking::track((uint64_t)&v103, v15, 2);
  }
  int v104 = *(_DWORD *)(a6 + 60);
  if (!*(unsigned char *)(a1 + 33) && (*(_WORD *)(a2 + 24) == 51 || *(_WORD *)(a4 + 24) == 51))
  {
    uint64_t v16 = sub_1CD787918(*(void *)a1, (const llvm::APInt *)&v103, (BOOL)v14, v13, 0, 0);
    goto LABEL_7;
  }
  uint64_t v16 = (uint64_t)sub_1CCF4BA74((void **)a1, 0, a2, a3, a4, a5, (const llvm::APInt *)&v103);
  if (v16)
  {
LABEL_7:
    uint64_t v18 = (uint64_t *)v16;
    goto LABEL_33;
  }
  if (*(_WORD *)(a2 + 24) != 171 || *(_WORD *)(a4 + 24) != 171) {
    goto LABEL_32;
  }
  uint64_t v19 = *(void *)(a2 + 48);
  if (!v19 || *(void *)(v19 + 32))
  {
    uint64_t v20 = *(void *)(a4 + 48);
    if (!v20 || *(void *)(v20 + 32)) {
      goto LABEL_26;
    }
  }
  uint64_t v21 = *(uint64_t **)(a2 + 32);
  uint64_t v22 = v21[5];
  int v23 = *(unsigned __int16 *)(v22 + 24);
  BOOL v24 = v23 == 35 || v23 == 11;
  if (!v24 || (*(unsigned char *)(v22 + 26) & 8) != 0) {
    goto LABEL_26;
  }
  uint64_t v25 = *(void *)(*(void *)(a4 + 32) + 40);
  int v26 = *(unsigned __int16 *)(v25 + 24);
  BOOL v27 = v26 == 35 || v26 == 11;
  if (!v27 || (*(unsigned char *)(v25 + 26) & 8) != 0) {
    goto LABEL_26;
  }
  uint64_t v54 = *(void *)(v22 + 80);
  uint64_t v55 = *(void *)(v25 + 80);
  uint64_t v56 = *(void *)a1;
  uint64_t v57 = *v21;
  uint64_t v58 = v21[1];
  unsigned int v59 = *(_DWORD *)(v54 + 32);
  unsigned int v100 = v59;
  uint64_t v96 = v54;
  if (v59 > 0x40) {
    operator new[]();
  }
  unint64_t v60 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v59;
  if (!v59) {
    unint64_t v60 = 0;
  }
  unint64_t v99 = v60 & ~*(void *)(v54 + 24);
  unsigned int v100 = 0;
  uint64_t v61 = (unsigned __int8 *)(*(void *)(v55 + 24) & v99);
  unsigned int v102 = v59;
  uint64_t v101 = v61;
  BOOL v62 = sub_1CD7F11AC(v56, v57, v58, (uint64_t)&v101, 0);
  BOOL v63 = 0;
  if (v62)
  {
    uint64_t v65 = *(void *)a1;
    uint64_t v66 = *(uint64_t **)(a4 + 32);
    uint64_t v67 = *v66;
    uint64_t v68 = v66[1];
    unsigned int v69 = *(_DWORD *)(v55 + 32);
    if (v69 > 0x40) {
      operator new[]();
    }
    unint64_t v70 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v69;
    if (!v69) {
      unint64_t v70 = 0;
    }
    unsigned int v86 = (unsigned __int8 **)(*(void *)(v96 + 24) & v70 & ~*(void *)(v55 + 24));
    unsigned int v98 = *(_DWORD *)(v55 + 32);
    uint64_t v97 = v86;
    BOOL v91 = sub_1CD7F11AC(v65, v67, v68, (uint64_t)&v97, 0);
    BOOL v63 = v91;
    if (v98 >= 0x41 && v97) {
      MEMORY[0x1D25D9CB0](v97, 0x1000C8000313F17);
    }
  }
  if (v102 >= 0x41 && v101) {
    MEMORY[0x1D25D9CB0](v101, 0x1000C8000313F17);
  }
  if (!v63)
  {
    if (*(_WORD *)(a2 + 24) != 171 || *(_WORD *)(a4 + 24) != 171)
    {
LABEL_32:
      uint64_t v18 = 0;
      goto LABEL_33;
    }
LABEL_26:
    uint64_t v28 = *(void *)(a2 + 32);
    uint64_t v29 = *(void *)(a4 + 32);
    if (*(void *)v28 != *(void *)v29 || *(_DWORD *)(v28 + 8) != *(_DWORD *)(v29 + 8)) {
      goto LABEL_32;
    }
    uint64_t v30 = *(void *)(a2 + 48);
    if (!v30 || *(void *)(v30 + 32))
    {
      uint64_t v31 = *(void *)(a4 + 48);
      if (!v31 || *(void *)(v31 + 32)) {
        goto LABEL_32;
      }
    }
    uint64_t v36 = *(void *)a1;
    int v37 = *(unsigned __int8 **)(a2 + 64);
    uint64_t v101 = v37;
    if (v37)
    {
      llvm::MetadataTracking::track((uint64_t)&v101, v37, 2);
      uint64_t v28 = *(void *)(a2 + 32);
      uint64_t v29 = *(void *)(a4 + 32);
    }
    unsigned int v102 = *(_DWORD *)(a2 + 60);
    uint64_t v38 = *(void *)(v28 + 40);
    uint64_t v39 = *(void *)(v28 + 48);
    uint64_t v40 = *(void *)(v29 + 40);
    uint64_t v41 = *(void *)(v29 + 48);
    uint64_t v42 = *(void *)(v36 + 832);
    if (v42) {
      LOWORD(v42) = *(_WORD *)(v42 + 8);
    }
    int v44 = sub_1CCFDED5C(v36, 172, (const llvm::APInt *)&v101, v14, v13, v38, v39, v17, v40, v41, v42);
    uint64_t v46 = v45;
    if (v101)
    {
      int v47 = *v101;
      if ((v47 - 4) > 0x1E)
      {
        if ((v47 - 3) >= 0xFFFFFFFE) {
          uint64_t v52 = v101;
        }
        else {
          uint64_t v52 = 0;
        }
        if ((v47 - 3) < 0xFFFFFFFE)
        {
          if (v47 == 3) {
            *((void *)v101 + 1) = 0;
          }
          goto LABEL_55;
        }
        unint64_t v53 = (unint64_t)(v52 + 8);
      }
      else
      {
        if ((v101[1] & 0x7F) != 2 && !*((_DWORD *)v101 + 3)) {
          goto LABEL_55;
        }
        uint64_t v94 = *((void *)v101 + 2);
        if ((v94 & 4) == 0) {
          goto LABEL_55;
        }
        unint64_t v53 = v94 & 0xFFFFFFFFFFFFFFF8;
        if (!v53) {
          goto LABEL_55;
        }
      }
      uint64_t v97 = &v101;
      sub_1CC5FA668(v53 + 16, &v97);
    }
LABEL_55:
    char v48 = *(uint64_t **)(a2 + 32);
    uint64_t v49 = *v48;
    uint64_t v50 = v48[1];
    uint64_t v51 = *(void *)(*(void *)a1 + 832);
    if (v51) {
      LOWORD(v51) = *(_WORD *)(v51 + 8);
    }
    uint64_t v16 = (uint64_t)sub_1CCFDED5C(*(void *)a1, 171, (const llvm::APInt *)&v103, v14, v13, v49, v50, v43, (uint64_t)v44, v46, v51);
    goto LABEL_7;
  }
  uint64_t v71 = *(void *)a1;
  int v72 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v101 = v72;
  if (v72) {
    llvm::MetadataTracking::track((uint64_t)&v101, v72, 2);
  }
  unsigned int v102 = *(_DWORD *)(a2 + 60);
  uint64_t v73 = *(uint64_t **)(a2 + 32);
  uint64_t v74 = *v73;
  uint64_t v75 = v73[1];
  uint64_t v76 = *(uint64_t **)(a4 + 32);
  uint64_t v77 = *v76;
  uint64_t v78 = v76[1];
  uint64_t v79 = *(void *)(v71 + 832);
  if (v79) {
    LOWORD(v79) = *(_WORD *)(v79 + 8);
  }
  BOOL v80 = sub_1CCFDED5C(v71, 172, (const llvm::APInt *)&v101, v14, v13, v74, v75, v17, v77, v78, v79);
  uint64_t v82 = v81;
  if (v101)
  {
    int v83 = *v101;
    if ((v83 - 4) > 0x1E)
    {
      if ((v83 - 3) >= 0xFFFFFFFE) {
        uint64_t v92 = v101;
      }
      else {
        uint64_t v92 = 0;
      }
      if ((v83 - 3) < 0xFFFFFFFE)
      {
        if (v83 == 3) {
          *((void *)v101 + 1) = 0;
        }
        goto LABEL_94;
      }
      unint64_t v93 = (unint64_t)(v92 + 8);
    }
    else
    {
      if ((v101[1] & 0x7F) != 2 && !*((_DWORD *)v101 + 3)) {
        goto LABEL_94;
      }
      uint64_t v95 = *((void *)v101 + 2);
      if ((v95 & 4) == 0) {
        goto LABEL_94;
      }
      unint64_t v93 = v95 & 0xFFFFFFFFFFFFFFF8;
      if (!v93) {
        goto LABEL_94;
      }
    }
    uint64_t v97 = &v101;
    sub_1CC5FA668(v93 + 16, &v97);
  }
LABEL_94:
  uint64_t v84 = *(void *)a1;
  if (*(_DWORD *)(v96 + 32) > 0x40u) {
    operator new[]();
  }
  int v85 = (unsigned __int8 *)(*(void *)(v55 + 24) | *(void *)(v96 + 24));
  unsigned int v102 = *(_DWORD *)(v96 + 32);
  uint64_t v101 = v85;
  uint64_t v87 = sub_1CD7EBB14(v84, (llvm::LLVMContext *)&v101, (const llvm::APInt *)&v103, (uint64_t)v14, v13, 0, 0);
  uint64_t v90 = *(void *)(v84 + 832);
  if (v90) {
    LOWORD(v90) = *(_WORD *)(v90 + 8);
  }
  uint64_t v18 = sub_1CCFDED5C(v84, 171, (const llvm::APInt *)&v103, v14, v13, (uint64_t)v80, v82, v89, v87, v88, v90);
  if (v102 >= 0x41 && v101) {
    MEMORY[0x1D25D9CB0](v101, 0x1000C8000313F17);
  }
LABEL_33:
  if (v103)
  {
    int v32 = *v103;
    if ((v32 - 4) > 0x1E)
    {
      if ((v32 - 3) >= 0xFFFFFFFE) {
        int v34 = v103;
      }
      else {
        int v34 = 0;
      }
      if ((v32 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v35 = (unint64_t)(v34 + 8);
LABEL_43:
        uint64_t v101 = (unsigned __int8 *)&v103;
        sub_1CC5FA668(v35 + 16, &v101);
        return v18;
      }
      if (v32 == 3) {
        *((void *)v103 + 1) = 0;
      }
    }
    else if ((v103[1] & 0x7F) == 2 || *((_DWORD *)v103 + 3))
    {
      uint64_t v64 = *((void *)v103 + 2);
      if ((v64 & 4) != 0)
      {
        unint64_t v35 = v64 & 0xFFFFFFFFFFFFFFF8;
        if (v35) {
          goto LABEL_43;
        }
      }
    }
  }
  return v18;
}

uint64_t *sub_1CCF4D2D8(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = (uint64_t *)a2;
  if (*(_WORD *)(a2 + 24) != 171)
  {
LABEL_2:
    unsigned int v14 = sub_1CCF4A26C(a6, (uint64_t)v12, a3, a4, a5, a1, a7, a8);
    if (v14) {
      return v14;
    }
    int v15 = *((unsigned __int16 *)v12 + 12);
    if (v15 == 181)
    {
      if (*(_WORD *)(a4 + 24) == 177)
      {
        uint64_t v16 = v12[4];
        uint64_t v17 = *(void *)(a4 + 32);
        if (*(void *)(v16 + 40) == *(void *)v17)
        {
          int v18 = *(_DWORD *)(v16 + 48);
          goto LABEL_12;
        }
      }
    }
    else if (v15 == 180 && *(_WORD *)(a4 + 24) == 175)
    {
      uint64_t v16 = v12[4];
      uint64_t v17 = *(void *)(a4 + 32);
      if (*(void *)v16 == *(void *)v17)
      {
        int v18 = *(_DWORD *)(v16 + 8);
LABEL_12:
        if (v18 != *(_DWORD *)(v17 + 8)) {
          return 0;
        }
        uint64_t v19 = *(void *)(v16 + 80);
        if (*(_WORD *)(v19 + 24) == 199)
        {
          uint64_t v20 = *(uint64_t **)(v19 + 32);
          uint64_t v22 = *v20;
          uint64_t v21 = v20 + 1;
          uint64_t v19 = v22;
        }
        else
        {
          uint64_t v21 = (void *)(v16 + 88);
        }
        uint64_t v36 = *(void *)(v17 + 40);
        if (*(_WORD *)(v36 + 24) == 199)
        {
          int v37 = *(void **)(v36 + 32);
          uint64_t v39 = *v37;
          uint64_t v38 = v37 + 1;
          uint64_t v36 = v39;
        }
        else
        {
          uint64_t v38 = (_DWORD *)(v17 + 48);
        }
        if (v19 != v36 || *v21 != *v38) {
          return 0;
        }
        return v12;
      }
    }
    return 0;
  }
  uint64_t v23 = *(void *)(a2 + 40) + 16 * a3;
  uint64_t v25 = *(llvm **)v23;
  uint64_t v24 = *(void *)(v23 + 8);
  int v26 = sub_1CD802AAC(*(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48), 0);
  BOOL v27 = (uint64_t *)v12[4];
  if (v26 && (uint64_t v28 = *(void *)(v27[5] + 32), *(void *)v28 == a4) && *(_DWORD *)(v28 + 8) == a5)
  {
    uint64_t v29 = *(unsigned __int8 **)(a6 + 64);
    uint64_t v45 = v29;
    if (v29)
    {
      llvm::MetadataTracking::track((uint64_t)&v45, v29, 2);
      BOOL v27 = (uint64_t *)v12[4];
    }
    int v46 = *(_DWORD *)(a6 + 60);
    uint64_t v30 = *v27;
    uint64_t v31 = v27[1];
  }
  else
  {
    if (!sub_1CD802AAC(*v27, v27[1], 0)) {
      goto LABEL_2;
    }
    uint64_t v41 = (void *)v12[4];
    uint64_t v42 = *(void *)(*v41 + 32);
    if (*(void *)v42 != a4 || *(_DWORD *)(v42 + 8) != a5) {
      goto LABEL_2;
    }
    uint64_t v43 = *(unsigned __int8 **)(a6 + 64);
    uint64_t v45 = v43;
    if (v43)
    {
      llvm::MetadataTracking::track((uint64_t)&v45, v43, 2);
      uint64_t v41 = (void *)v12[4];
    }
    int v46 = *(_DWORD *)(a6 + 60);
    uint64_t v30 = v41[5];
    uint64_t v31 = v41[6];
  }
  uint64_t v32 = *(void *)(a1 + 832);
  if (v32) {
    LOWORD(v32) = *(_WORD *)(v32 + 8);
  }
  uint64_t v12 = sub_1CCFDED5C(a1, 172, (const llvm::APInt *)&v45, v25, v24, v30, v31, a8, a4, a5, v32);
  if (v45)
  {
    int v33 = *v45;
    if ((v33 - 4) > 0x1E)
    {
      if ((v33 - 3) >= 0xFFFFFFFE) {
        int v44 = v45;
      }
      else {
        int v44 = 0;
      }
      if ((v33 - 3) < 0xFFFFFFFE)
      {
        if (v33 == 3) {
          *((void *)v45 + 1) = 0;
        }
        return v12;
      }
      unint64_t v35 = (unint64_t)(v44 + 8);
    }
    else
    {
      if ((v45[1] & 0x7F) != 2 && !*((_DWORD *)v45 + 3)) {
        return v12;
      }
      uint64_t v34 = *((void *)v45 + 2);
      if ((v34 & 4) == 0) {
        return v12;
      }
      unint64_t v35 = v34 & 0xFFFFFFFFFFFFFFF8;
      if (!v35) {
        return v12;
      }
    }
    int v47 = &v45;
    sub_1CC5FA668(v35 + 16, &v47);
  }
  return v12;
}

uint64_t *sub_1CCF4D5BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const llvm::APInt *a6)
{
  uint64_t v8 = a3;
  uint64_t v9 = a2;
  uint64_t v232 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *(void *)(a2 + 40) + 16 * a3;
  uint64_t v12 = *(llvm **)v11;
  uint64_t v13 = *(void *)(v11 + 8);
  int v223 = v12;
  uint64_t v224 = v13;
  int v14 = sub_1CCF41ED0(*(void *)(a1 + 8), 0xB2u, v12, v13, *(unsigned __int8 *)(a1 + 33));
  int v15 = sub_1CCF41ED0(*(void *)(a1 + 8), 0xB3u, v12, v13, *(unsigned __int8 *)(a1 + 33));
  int v218 = sub_1CCF41ED0(*(void *)(a1 + 8), 0xB4u, v12, v13, *(unsigned __int8 *)(a1 + 33));
  int v16 = sub_1CCF41ED0(*(void *)(a1 + 8), 0xB5u, v12, v13, *(unsigned __int8 *)(a1 + 33));
  if ((_BYTE)v12)
  {
    if (v12 - 2 >= 6) {
      goto LABEL_13;
    }
  }
  else if (*(unsigned char *)(v13 + 8) != 13)
  {
    goto LABEL_13;
  }
  llvm::TargetLoweringBase::getTypeConversion(*(void *)(a1 + 8), *(llvm::LLVMContext **)(*(void *)a1 + 56), (BOOL)v12, v13, (uint64_t)v225);
  if (LOBYTE(v225[0]) == 1)
  {
    if ((_BYTE)v223)
    {
      uint64_t v17 = *(void *)(a1 + 8) + 390 * v223;
      if (*(unsigned char *)(v17 + 4040) == 4) {
        int v14 = 1;
      }
      int v18 = *(unsigned __int8 *)(v17 + 4041);
    }
    else
    {
      int v18 = 2;
    }
    if (v18 == 4) {
      int v15 = 1;
    }
  }
LABEL_13:
  if (*(unsigned char *)(a1 + 33)) {
    int v19 = v14;
  }
  else {
    int v19 = 1;
  }
  if ((v19 | v15 | v218 | v16) != 1) {
    return 0;
  }
  int v211 = v8;
  if (*(_WORD *)(v9 + 24) != 201
    || *(_WORD *)(a4 + 24) != 201
    || (uint64_t v20 = (unsigned __int8 *)(*(void *)(**(void **)(v9 + 32) + 40)
                                + 16 * *(unsigned int *)(*(void *)(v9 + 32) + 8)),
        int v21 = *v20,
        uint64_t v22 = (unsigned __int8 *)(*(void *)(**(void **)(a4 + 32) + 40)
                                + 16 * *(unsigned int *)(*(void *)(a4 + 32) + 8)),
        v21 != *v22)
    || ((uint64_t v23 = *((void *)v22 + 1), v24 = *((void *)v20 + 1), !v21) ? (v25 = v24 == v23) : (v25 = 1),
        !v25 || (uint64_t v26 = sub_1CCF4D5BC(a1)) == 0))
  {
    *(void *)&long long v222 = 0;
    DWORD2(v222) = 0;
    uint64_t v29 = sub_1CCF4FF10(*(void *)a1, v9, v8, (uint64_t)&v222);
    int v30 = *(unsigned __int16 *)(v29 + 24);
    int v214 = v16;
    if (v30 == 177 || v30 == 175)
    {
      uint64_t v31 = v28;
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v31 = 0;
    }
    unsigned int v215 = a6;
    uint64_t v220 = 0;
    LODWORD(v221) = 0;
    uint64_t v33 = sub_1CCF4FF10(*(void *)a1, a4, a5, (uint64_t)&v220);
    int v34 = *(unsigned __int16 *)(v33 + 24);
    if (v34 == 177 || v34 == 175)
    {
      uint64_t v35 = v32;
      if (!v29) {
        goto LABEL_38;
      }
    }
    else
    {
      uint64_t v33 = 0;
      uint64_t v35 = 0;
      uint64_t result = 0;
      if (!v29) {
        return result;
      }
    }
    int v37 = sub_1CCF4ECE8(*(void *)a1, v29, v31, a4, a5, (uint64_t)&v220, v215);
    if (v37)
    {
      uint64_t v33 = (uint64_t)v37;
      uint64_t v35 = v38;
    }
    if (!v33) {
      return 0;
    }
LABEL_38:
    uint64_t v39 = sub_1CCF4ECE8(*(void *)a1, v33, v35, v9, v8, (uint64_t)&v222, v215);
    if (v39) {
      uint64_t v29 = (uint64_t)v39;
    }
    if (!v29) {
      return 0;
    }
    int v42 = *(unsigned __int16 *)(v33 + 24);
    if (*(unsigned __int16 *)(v29 + 24) == v42) {
      return 0;
    }
    if (v42 == 175)
    {
      uint64_t v43 = a4;
      LODWORD(v8) = a5;
      v225[0] = v222;
      DWORD2(v222) = v221;
      *(void *)&long long v222 = v220;
      uint64_t v220 = *(void *)&v225[0];
      uint64_t v44 = v29;
      LODWORD(v221) = DWORD2(v225[0]);
      uint64_t v29 = v33;
      a4 = v9;
      LODWORD(a5) = v211;
      uint64_t v9 = v43;
    }
    else
    {
      uint64_t v44 = v33;
    }
    unsigned int v45 = sub_1CD3E12F4((unsigned __int8 *)&v223, v40, v41);
    int v46 = *(uint64_t **)(v29 + 32);
    uint64_t v47 = *v46;
    uint64_t v48 = v46[1];
    uint64_t v50 = v46[5];
    uint64_t v49 = v46[6];
    uint64_t v51 = *(uint64_t **)(v44 + 32);
    uint64_t v52 = *v51;
    uint64_t v53 = v51[1];
    uint64_t v55 = v51[5];
    uint64_t v54 = v51[6];
    BOOL v56 = v47 == *v51 && v48 == v53;
    int v57 = v56;
    int v58 = v218;
    if (v56) {
      int v58 = 1;
    }
    if ((v58 | v214))
    {
      uint64_t v209 = v53;
      uint64_t v210 = v48;
      uint64_t v59 = v52;
      uint64_t v60 = v47;
      uint64_t v226 = (void (**)(void **))&unk_1F26415C8;
      unsigned int v227 = v45;
      uint64_t v228 = (void **)&v226;
      uint64_t v212 = v50;
      uint64_t v217 = v49;
      uint64_t v61 = v54;
      int v63 = sub_1CD7E9BD4(v50, v49, v55, v54, (uint64_t)&v226, 0, 0);
      if (v228 == (void **)&v226)
      {
        v226[4]((void **)&v226);
      }
      else if (v228)
      {
        (*((void (**)(void **))*v228 + 5))(v228);
      }
      if (v63)
      {
        if (v57 && ((v14 | v15) == 1 || ((v218 | v214) & 1) == 0))
        {
          if (*(unsigned char *)(a1 + 33)) {
            int v108 = v14;
          }
          else {
            int v108 = 1;
          }
          uint64_t v109 = *(void *)a1;
          BOOL v110 = v108 == 0;
          if (v108) {
            uint64_t v111 = 178;
          }
          else {
            uint64_t v111 = 179;
          }
          if (v108) {
            uint64_t v112 = v212;
          }
          else {
            uint64_t v112 = v55;
          }
          uint64_t v113 = v217;
          if (v110) {
            uint64_t v113 = v61;
          }
          uint64_t v114 = *(void *)(v109 + 832);
          if (v114) {
            LOWORD(v114) = *(_WORD *)(v114 + 8);
          }
          uint64_t v84 = v215;
          uint64_t result = sub_1CCFDED5C(v109, v111, v215, v223, v224, v47, v210, v62, v112, v113, v114);
        }
        else
        {
          int v77 = v218;
          if (!*(unsigned char *)(a1 + 33)) {
            int v77 = 1;
          }
          uint64_t v78 = *(void **)a1;
          BOOL v79 = v77 == 0;
          if (v77) {
            uint64_t v80 = 180;
          }
          else {
            uint64_t v80 = 181;
          }
          if (v77) {
            uint64_t v81 = v212;
          }
          else {
            uint64_t v81 = v55;
          }
          uint64_t v82 = v217;
          if (v79) {
            uint64_t v82 = v61;
          }
          uint64_t v83 = v78[104];
          if (v83) {
            LOWORD(v83) = *(_WORD *)(v83 + 8);
          }
          uint64_t v84 = v215;
          uint64_t result = sub_1CD7F5D38(v78, (const char *)v80, v215, v223, v224, v47, v210, v62, v59, v209, v81, v82, SHIDWORD(v82), v83);
        }
        uint64_t v115 = v222;
        uint64_t v116 = v220;
        if ((unint64_t)v222 | v220)
        {
          uint64_t v117 = v85;
          uint64_t v118 = (uint64_t)result;
          uint64_t v219 = sub_1CD787918(*(void *)a1, v84, (BOOL)v223, v224, 0, 0);
          uint64_t v121 = v119;
          if (v115)
          {
            uint64_t v122 = *(void *)(*(void *)a1 + 832);
            if (v122) {
              LOWORD(v122) = *(_WORD *)(v122 + 8);
            }
            unint64_t v123 = sub_1CCFDED5C(*(void *)a1, 177, v215, v223, v224, v219, v119, v120, v55, v61, v122);
            uint64_t v126 = *(void *)a1;
            unint64_t v127 = v223;
            uint64_t v128 = v224;
            uint64_t v129 = *(void *)(*(void *)a1 + 832);
            if (v129) {
              LOWORD(v129) = *(_WORD *)(v129 + 8);
            }
            unint64_t v130 = sub_1CCFDED5C(v126, 172, v215, v223, v224, v115, *((uint64_t *)&v222 + 1), v125, (uint64_t)v123, v124, v129);
            uint64_t v133 = *(void *)(v126 + 832);
            if (v133) {
              LOWORD(v133) = *(_WORD *)(v133 + 8);
            }
            uint64_t v198 = (uint64_t)v130;
            uint64_t v134 = v126;
            uint64_t v84 = v215;
            uint64_t v135 = sub_1CCFDED5C(v134, 171, v215, v127, v128, v219, v121, v132, v198, v131, v133);
            unint64_t v137 = v121 & 0xFFFFFFFF00000000 | v136;
          }
          else
          {
            uint64_t v135 = (uint64_t *)v219;
            unint64_t v137 = v119;
          }
          if (v116)
          {
            uint64_t v158 = *(void *)(*(void *)a1 + 832);
            if (v158) {
              LOWORD(v158) = *(_WORD *)(v158 + 8);
            }
            int v159 = sub_1CCFDED5C(*(void *)a1, 175, v215, v223, v224, v219, v121, v120, v212, v217, v158);
            uint64_t v162 = *(void *)a1;
            unsigned int v163 = v223;
            uint64_t v164 = v224;
            uint64_t v165 = *(void *)(*(void *)a1 + 832);
            if (v165) {
              LOWORD(v165) = *(_WORD *)(v165 + 8);
            }
            unsigned int v166 = sub_1CCFDED5C(v162, 172, v215, v223, v224, v116, v221, v161, (uint64_t)v159, v160, v165);
            uint64_t v169 = *(void *)(v162 + 832);
            if (v169) {
              LOWORD(v169) = *(_WORD *)(v169 + 8);
            }
            uint64_t v84 = v215;
            uint64_t v135 = sub_1CCFDED5C(v162, 171, v215, v163, v164, (uint64_t)v135, v137, v168, (uint64_t)v166, v167, v169);
            unint64_t v137 = v137 & 0xFFFFFFFF00000000 | v170;
          }
          uint64_t v171 = *(void *)(*(void *)a1 + 832);
          if (v171) {
            LOWORD(v171) = *(_WORD *)(v171 + 8);
          }
          return sub_1CCFDED5C(*(void *)a1, 171, v84, v223, v224, v118, v117, v120, (uint64_t)v135, v137, v171);
        }
        return result;
      }
      uint64_t v86 = v212;
      if ((v14 | v15 | v218 | v214) == 1 && !((unint64_t)v222 | v220))
      {
        if (*(unsigned __int16 *)(v212 + 24) - 198 > 3)
        {
          uint64_t v90 = v55;
          uint64_t v93 = v55;
          unint64_t v94 = v61;
          uint64_t v88 = v212;
          uint64_t v92 = v217;
        }
        else if (*(unsigned __int16 *)(v55 + 24) - 198 > 3)
        {
          uint64_t v90 = v55;
          uint64_t v93 = v55;
          unint64_t v94 = v61;
          uint64_t v88 = v212;
          uint64_t v92 = v217;
        }
        else
        {
          uint64_t v87 = *(void *)(v212 + 32);
          uint64_t v88 = *(void *)v87;
          unint64_t v89 = v217 & 0xFFFFFFFF00000000 | *(unsigned int *)(v87 + 8);
          uint64_t v90 = v55;
          uint64_t v91 = *(void *)(v55 + 32);
          uint64_t v92 = v89;
          uint64_t v93 = *(void *)v91;
          unint64_t v94 = v61 & 0xFFFFFFFF00000000 | *(unsigned int *)(v91 + 8);
        }
        uint64_t v139 = v60;
        BOOL v140 = v210;
        if ((v14 | v15) & v57)
        {
          uint64_t v141 = v215;
          uint64_t v142 = v90;
          uint64_t v143 = v90;
          uint64_t v144 = v88;
          unint64_t v207 = v94;
          uint64_t v208 = v93;
          uint64_t result = sub_1CCF4F784((uint64_t *)a1, v60, v210, v212, v217, v143, v61, v62, v88, v92, v93, v94, v14, 0xB2u, 0xB3u, v215);
          if (result) {
            return result;
          }
          char v202 = v15;
          uint64_t v201 = v144;
          uint64_t v203 = v144;
          uint64_t v146 = v59;
          uint64_t v147 = v59;
          uint64_t v148 = v209;
          uint64_t v90 = v142;
          uint64_t result = sub_1CCF4F784((uint64_t *)a1, v147, v209, v142, v61, v212, v217, v145, v208, v207, v201, v92, v202, 0xB3u, 0xB2u, v215);
          uint64_t v149 = v146;
          uint64_t v139 = v60;
          BOOL v140 = v210;
          uint64_t v86 = v212;
          uint64_t v88 = v203;
          unint64_t v94 = v207;
          uint64_t v93 = v208;
          if (result) {
            return result;
          }
        }
        else
        {
          uint64_t v141 = v215;
          uint64_t v149 = v59;
          uint64_t v148 = v209;
        }
        uint64_t v204 = v139;
        uint64_t v205 = v149;
        uint64_t v206 = v61;
        uint64_t v199 = v90;
        uint64_t v200 = v61;
        uint64_t v150 = v90;
        uint64_t v151 = v148;
        uint64_t v152 = v148;
        uint64_t v153 = v86;
        uint64_t v154 = v88;
        uint64_t v155 = v93;
        int v156 = v94;
        uint64_t result = sub_1CCF4F878((uint64_t *)a1, v139, v140, v149, v152, v86, v217, v62, v199, v200, v88, v92, v93, v94, v218, 0xB4u, 0xB5u, v141);
        if (!result) {
          return sub_1CCF4F878((uint64_t *)a1, v204, v210, v205, v151, v150, v206, v157, v153, v217, v155, v156, v154, v92, v214, 0xB5u, 0xB4u, v141);
        }
        return result;
      }
      return 0;
    }
    if (!(_BYTE)v223) {
      return 0;
    }
    if (!*(void *)(*(void *)(a1 + 8) + 8 * v223 + 96)) {
      return 0;
    }
    uint64_t v64 = *(void *)(v9 + 48);
    if (!v64) {
      return 0;
    }
    unsigned int v65 = v48;
    int v66 = 1;
    do
    {
      if (*(_DWORD *)(v64 + 8) == v8)
      {
        if (!v66) {
          return 0;
        }
        --v66;
      }
      uint64_t v64 = *(void *)(v64 + 32);
    }
    while (v64);
    if (v66) {
      return 0;
    }
    uint64_t v67 = *(void *)(a4 + 48);
    if (!v67) {
      return 0;
    }
    int v68 = 1;
    do
    {
      if (*(_DWORD *)(v67 + 8) == a5)
      {
        if (!v68) {
          return 0;
        }
        --v68;
      }
      uint64_t v67 = *(void *)(v67 + 32);
    }
    while (v67);
    if (v68) {
      return 0;
    }
    unsigned int v69 = v53;
    uint64_t v70 = v52;
    uint64_t v229 = (void (**)(void **))&unk_1F26415C8;
    unsigned int v230 = v45;
    unsigned int v231 = (void **)&v229;
    uint64_t v213 = v50;
    uint64_t v71 = v49;
    uint64_t v72 = v55;
    uint64_t v73 = v55;
    uint64_t v74 = v54;
    int v76 = sub_1CD7E9BD4(v50, v49, v73, v54, (uint64_t)&v229, 0, 0);
    if (v231 == (void **)&v229)
    {
      v229[4]((void **)&v229);
      if ((v76 & 1) == 0) {
        return 0;
      }
    }
    else if (v231)
    {
      (*((void (**)(void **))*v231 + 5))(v231);
      if ((v76 & 1) == 0) {
        return 0;
      }
    }
    else if (!v76)
    {
      return 0;
    }
    uint64_t v172 = *(void *)(v47 + 48);
    if (v172)
    {
      int v173 = 1;
      do
      {
        if (*(_DWORD *)(v172 + 8) == v65)
        {
          if (!v173) {
            goto LABEL_191;
          }
          --v173;
        }
        uint64_t v172 = *(void *)(v172 + 32);
      }
      while (v172);
      if (!v173 && *(_WORD *)(v47 + 24) == 172)
      {
        uint64_t v174 = *(void *)(v47 + 32);
        uint64_t v175 = *(void *)v174;
        if (*(void *)v174 == v70 && *(_DWORD *)(v174 + 8) == v69)
        {
          uint64_t v176 = *(void *)(v174 + 40);
          v174 += 40;
          uint64_t v175 = v176;
LABEL_186:
          uint64_t v177 = *(unsigned int *)(v174 + 8);
          uint64_t v178 = *(void *)(*(void *)a1 + 832);
          if (v178) {
            LOWORD(v178) = *(_WORD *)(v178 + 8);
          }
          unsigned int v180 = sub_1CCFDED5C(*(void *)a1, 178, v215, v223, v224, v70, v69, v75, v213, v71, v178);
          uint64_t v182 = v181;
          uint64_t v183 = *(void *)(*(void *)a1 + 832);
          if (v183) {
            LOWORD(v183) = *(_WORD *)(v183 + 8);
          }
          uint64_t v184 = sub_1CCFDED5C(*(void *)a1, 175, v215, v223, v224, v175, v177, v179, v213, v71, v183);
          goto LABEL_209;
        }
        if (*(void *)(v174 + 40) == v70 && *(_DWORD *)(v174 + 48) == v69) {
          goto LABEL_186;
        }
      }
    }
LABEL_191:
    uint64_t v187 = *(void *)(v70 + 48);
    if (!v187) {
      return 0;
    }
    int v188 = 1;
    do
    {
      if (*(_DWORD *)(v187 + 8) == v69)
      {
        if (!v188) {
          return 0;
        }
        --v188;
      }
      uint64_t v187 = *(void *)(v187 + 32);
    }
    while (v187);
    if (v188 || *(_WORD *)(v70 + 24) != 172) {
      return 0;
    }
    uint64_t v189 = *(void *)(v70 + 32);
    uint64_t v190 = *(void *)v189;
    if (*(void *)v189 == v47 && *(_DWORD *)(v189 + 8) == v65)
    {
      uint64_t v191 = *(void *)(v189 + 40);
      v189 += 40;
      uint64_t v190 = v191;
    }
    else if (*(void *)(v189 + 40) != v47 || *(_DWORD *)(v189 + 48) != v65)
    {
      return 0;
    }
    uint64_t v192 = *(unsigned int *)(v189 + 8);
    uint64_t v193 = *(void *)(*(void *)a1 + 832);
    if (v193) {
      LOWORD(v193) = *(_WORD *)(v193 + 8);
    }
    unsigned int v180 = sub_1CCFDED5C(*(void *)a1, 178, v215, v223, v224, v47, v65, v75, v213, v71, v193);
    uint64_t v182 = v195;
    uint64_t v196 = *(void *)(*(void *)a1 + 832);
    if (v196) {
      LOWORD(v196) = *(_WORD *)(v196 + 8);
    }
    uint64_t v184 = sub_1CCFDED5C(*(void *)a1, 177, v215, v223, v224, v190, v192, v194, v72, v74, v196);
LABEL_209:
    uint64_t v197 = *(void *)(*(void *)a1 + 832);
    if (v197) {
      LOWORD(v197) = *(_WORD *)(v197 + 8);
    }
    return sub_1CCFDED5C(*(void *)a1, 172, v215, v223, v224, (uint64_t)v180, v182, v186, (uint64_t)v184, v185, v197);
  }
  uint64_t v95 = v26;
  uint64_t v96 = v27;
  uint64_t v97 = *(llvm::APFloatBase **)a1;
  unsigned int v98 = *(unsigned __int8 **)(v9 + 64);
  *(void *)&v225[0] = v98;
  if (v98) {
    llvm::MetadataTracking::track((uint64_t)v225, v98, 2);
  }
  DWORD2(v225[0]) = *(_DWORD *)(v9 + 60);
  uint64_t v99 = *(void *)(v9 + 40) + 16 * v8;
  unsigned int v100 = *(llvm **)v99;
  uint64_t v101 = *(void *)(v99 + 8);
  uint64_t v102 = *((void *)v97 + 104);
  if (v102) {
    __int16 v103 = *(_WORD *)(v102 + 8);
  }
  else {
    __int16 v103 = 0;
  }
  uint64_t result = sub_1CD7F3564(v97, (const char *)0xC9, (uint64_t)v225, v100, v101, v95, v96, v103);
  if (*(void *)&v225[0])
  {
    int v104 = **(unsigned char **)&v225[0];
    if ((v104 - 4) > 0x1E)
    {
      if ((v104 - 3) >= 0xFFFFFFFE) {
        uint64_t v138 = *(void *)&v225[0];
      }
      else {
        uint64_t v138 = 0;
      }
      if ((v104 - 3) < 0xFFFFFFFE)
      {
        if (v104 == 3) {
          *(void *)(*(void *)&v225[0] + 8) = 0;
        }
        return result;
      }
      uint64_t v107 = result;
      unint64_t v106 = v138 + 8;
    }
    else
    {
      if ((*(unsigned char *)(*(void *)&v225[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(*(void *)&v225[0] + 12)) {
        return result;
      }
      uint64_t v105 = *(void *)(*(void *)&v225[0] + 16);
      if ((v105 & 4) == 0) {
        return result;
      }
      unint64_t v106 = v105 & 0xFFFFFFFFFFFFFFF8;
      if (!v106) {
        return result;
      }
      uint64_t v107 = result;
    }
    *(void *)&long long v222 = v225;
    sub_1CC5FA668(v106 + 16, &v222);
    return v107;
  }
  return result;
}

uint64_t *sub_1CCF4E3A8(uint64_t a1, llvm::APFloatBase *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, llvm *a9, uint64_t a10, llvm *a11, uint64_t a12)
{
  uint64_t v13 = a9;
  if (!(_BYTE)a9) {
    return (uint64_t *)v13;
  }
  if (a9 != 1 && !*(void *)(a1 + 8 * a9 + 96)) {
    return 0;
  }
  if ((*(unsigned __int8 *)(a1 + 390 * a9 + 4041) | 4) != 4) {
    return 0;
  }
  if (*(_WORD *)(a4 + 24) != 171) {
    return 0;
  }
  if (*(_WORD *)(a6 + 24) != 171) {
    return 0;
  }
  uint64_t v17 = *(void *)(a4 + 48);
  if (!v17) {
    return 0;
  }
  if (*(void *)(v17 + 32)) {
    return 0;
  }
  uint64_t v19 = *(void *)(a6 + 48);
  if (!v19 || *(void *)(v19 + 32)) {
    return 0;
  }
  uint64_t v20 = sub_1CCFD8CD8(*(void *)(*(void *)(a4 + 32) + 40), *(void *)(*(void *)(a4 + 32) + 48), 0, 0);
  uint64_t v21 = sub_1CCFD8CD8(*(void *)(*(void *)(a6 + 32) + 40), *(void *)(*(void *)(a6 + 32) + 48), 0, 0);
  uint64_t v13 = 0;
  if (!v20) {
    return (uint64_t *)v13;
  }
  uint64_t v18 = 0;
  if (!v21) {
    return (uint64_t *)v18;
  }
  uint64_t v22 = *(void *)(v20 + 80);
  uint64_t v23 = (void *)(v22 + 24);
  uint64_t v24 = *(unsigned int *)(v22 + 32);
  if (v24 >= 0x41)
  {
    int v25 = 0;
    int64_t v26 = (unint64_t)(v24 + 63) >> 6;
    do
    {
      BOOL v27 = v26-- < 1;
      if (v27) {
        break;
      }
      unint64_t v28 = *(void *)(*v23 + 8 * v26);
      v25 += __clz(v28);
    }
    while (!v28);
    int v29 = v24 | 0xFFFFFFC0;
    if ((v24 & 0x3F) == 0) {
      int v29 = 0;
    }
    if ((v24 - v25 - v29) > 0x40) {
      return 0;
    }
    uint64_t v23 = (void *)*v23;
  }
  if (*v23 == 4278255360)
  {
    uint64_t v30 = *(void *)(v21 + 80);
    uint64_t v31 = (void *)(v30 + 24);
    uint64_t v32 = *(unsigned int *)(v30 + 32);
    if (v32 >= 0x41)
    {
      int v33 = 0;
      int64_t v34 = (unint64_t)(v32 + 63) >> 6;
      do
      {
        BOOL v27 = v34-- < 1;
        if (v27) {
          break;
        }
        unint64_t v35 = *(void *)(*v31 + 8 * v34);
        v33 += __clz(v35);
      }
      while (!v35);
      int v36 = v32 | 0xFFFFFFC0;
      if ((v32 & 0x3F) == 0) {
        int v36 = 0;
      }
      if ((v32 - v33 - v36) > 0x40) {
        return 0;
      }
      uint64_t v31 = (void *)*v31;
    }
    if (*v31 == 16711935)
    {
      uint64_t v37 = **(void **)(a4 + 32);
      if (*(_WORD *)(v37 + 24) == 175)
      {
        uint64_t v38 = **(void **)(a6 + 32);
        if (*(_WORD *)(v38 + 24) == 177)
        {
          uint64_t v39 = sub_1CCFD8CD8(*(void *)(*(void *)(v37 + 32) + 40), *(void *)(*(void *)(v37 + 32) + 48), 0, 0);
          uint64_t v40 = sub_1CCFD8CD8(*(void *)(*(void *)(v38 + 32) + 40), *(void *)(*(void *)(v38 + 32) + 48), 0, 0);
          if (v39 && v40 != 0)
          {
            uint64_t v42 = *(void *)(v39 + 80);
            uint64_t v43 = (void *)(v42 + 24);
            uint64_t v44 = *(unsigned int *)(v42 + 32);
            if (v44 >= 0x41)
            {
              int v45 = 0;
              int64_t v46 = (unint64_t)(v44 + 63) >> 6;
              do
              {
                BOOL v27 = v46-- < 1;
                if (v27) {
                  break;
                }
                unint64_t v47 = *(void *)(*v43 + 8 * v46);
                v45 += __clz(v47);
              }
              while (!v47);
              int v48 = v44 | 0xFFFFFFC0;
              if ((v44 & 0x3F) == 0) {
                int v48 = 0;
              }
              if ((v44 - v45 - v48) > 0x40) {
                return 0;
              }
              uint64_t v43 = (void *)*v43;
            }
            if (*v43 == 8)
            {
              uint64_t v49 = *(void *)(v40 + 80);
              uint64_t v50 = (void *)(v49 + 24);
              uint64_t v51 = *(unsigned int *)(v49 + 32);
              if (v51 < 0x41)
              {
LABEL_55:
                if (*v50 == 8)
                {
                  BOOL v56 = *(uint64_t **)(v37 + 32);
                  uint64_t v57 = *(void *)(v38 + 32);
                  uint64_t v58 = *v56;
                  if (*v56 == *(void *)v57 && *((_DWORD *)v56 + 2) == *(_DWORD *)(v57 + 8))
                  {
                    uint64_t v59 = *(unsigned __int8 **)(a3 + 64);
                    int v76 = v59;
                    if (v59)
                    {
                      llvm::MetadataTracking::track((uint64_t)&v76, v59, 2);
                      BOOL v56 = *(uint64_t **)(v37 + 32);
                      uint64_t v58 = *v56;
                    }
                    int v77 = *(_DWORD *)(a3 + 60);
                    uint64_t v60 = (void *)v56[1];
                    uint64_t v61 = *((void *)a2 + 104);
                    if (v61) {
                      __int16 v62 = *(_WORD *)(v61 + 8);
                    }
                    else {
                      __int16 v62 = 0;
                    }
                    uint64_t v64 = sub_1CD7F3564(a2, (const char *)0xB6, (uint64_t)&v76, a9, a10, v58, v60, v62);
                    uint64_t v66 = v65;
                    uint64_t v67 = sub_1CD7EBF14((uint64_t)a2, 16, (const llvm::APInt *)&v76, a11, a12, 0, 0);
                    uint64_t v70 = *((void *)a2 + 104);
                    if (v70) {
                      LOWORD(v70) = *(_WORD *)(v70 + 8);
                    }
                    uint64_t v71 = sub_1CCFDED5C((uint64_t)a2, 179, (const llvm::APInt *)&v76, a9, a10, (uint64_t)v64, v66, v69, (uint64_t)v67, v68, v70);
                    if (!v76) {
                      return v71;
                    }
                    int v72 = *v76;
                    if ((v72 - 4) > 0x1E)
                    {
                      if ((v72 - 3) >= 0xFFFFFFFE) {
                        uint64_t v73 = v76;
                      }
                      else {
                        uint64_t v73 = 0;
                      }
                      if ((v72 - 3) < 0xFFFFFFFE)
                      {
                        if (v72 == 3) {
                          *((void *)v76 + 1) = 0;
                        }
                        return v71;
                      }
                      unint64_t v74 = (unint64_t)(v73 + 8);
                    }
                    else
                    {
                      if ((v76[1] & 0x7F) != 2 && !*((_DWORD *)v76 + 3)) {
                        return v71;
                      }
                      uint64_t v75 = *((void *)v76 + 2);
                      if ((v75 & 4) == 0) {
                        return v71;
                      }
                      unint64_t v74 = v75 & 0xFFFFFFFFFFFFFFF8;
                      if (!v74) {
                        return v71;
                      }
                    }
                    uint64_t v78 = &v76;
                    sub_1CC5FA668(v74 + 16, &v78);
                    return v71;
                  }
                }
                return 0;
              }
              int v52 = 0;
              int64_t v53 = (unint64_t)(v51 + 63) >> 6;
              do
              {
                BOOL v27 = v53-- < 1;
                if (v27) {
                  break;
                }
                unint64_t v54 = *(void *)(*v50 + 8 * v53);
                v52 += __clz(v54);
              }
              while (!v54);
              int v55 = v51 | 0xFFFFFFC0;
              if ((v51 & 0x3F) == 0) {
                int v55 = 0;
              }
              if ((v51 - v52 - v55) <= 0x40)
              {
                uint64_t v50 = (void *)*v50;
                goto LABEL_55;
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1CCF4E848(uint64_t a1, uint64_t a2, void *a3)
{
  int v5 = *(unsigned __int16 *)(a1 + 24);
  if (v5 != 177)
  {
    if (v5 == 172)
    {
      uint64_t result = sub_1CCF4E984(**(void **)(a1 + 32), *(void *)(*(void *)(a1 + 32) + 8), (uint64_t)a3);
      if (result)
      {
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = *(void *)(v7 + 40);
        uint64_t v9 = *(void *)(v7 + 48);
        return sub_1CCF4E984(v8, v9, (uint64_t)a3);
      }
      return result;
    }
    return 0;
  }
  uint64_t v10 = *(uint64_t **)(a1 + 32);
  if (*(_WORD *)(*v10 + 24) != 182) {
    return 0;
  }
  uint64_t result = sub_1CCFD8CD8(v10[5], v10[6], 0, 0);
  if (!result) {
    return result;
  }
  uint64_t v11 = *(void *)(result + 80);
  uint64_t v12 = (void *)(v11 + 24);
  uint64_t v13 = *(unsigned int *)(v11 + 32);
  if (v13 < 0x41)
  {
LABEL_17:
    if (*v12 == 16)
    {
      uint64_t v19 = **(void **)(**(void **)(a1 + 32) + 32);
      *a3 = v19;
      a3[1] = v19;
      return 1;
    }
    return 0;
  }
  int v14 = 0;
  int64_t v15 = (unint64_t)(v13 + 63) >> 6;
  do
  {
    if (v15-- < 1) {
      break;
    }
    unint64_t v17 = *(void *)(*v12 + 8 * v15);
    v14 += __clz(v17);
  }
  while (!v17);
  uint64_t result = 0;
  int v18 = v13 | 0xFFFFFFC0;
  if ((v13 & 0x3F) == 0) {
    int v18 = 0;
  }
  if ((v13 - v14 - v18) <= 0x40)
  {
    uint64_t v12 = (void *)*v12;
    goto LABEL_17;
  }
  return result;
}

uint64_t sub_1CCF4E984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 48);
  if (!v3 || *(void *)(v3 + 32)) {
    return 0;
  }
  int v5 = *(unsigned __int16 *)(a1 + 24);
  if ((v5 - 171) > 6 || ((1 << (v5 + 85)) & 0x51) == 0) {
    return 0;
  }
  uint64_t v7 = *(void **)(a1 + 32);
  uint64_t v8 = *v7;
  int v9 = *(unsigned __int16 *)(*v7 + 24);
  if ((v9 - 171) > 6 || ((1 << (v9 + 85)) & 0x51) == 0) {
    return 0;
  }
  if (v5 == 171)
  {
    uint64_t v11 = v7[5];
    int v12 = *(unsigned __int16 *)(v11 + 24);
    if (v12 != 11 && v12 != 35) {
      return 0;
    }
  }
  else
  {
    if (v9 != 171) {
      return 0;
    }
    uint64_t v11 = *(void *)(*(void *)(v8 + 32) + 40);
    int v13 = *(unsigned __int16 *)(v11 + 24);
    if (v13 != 35 && v13 != 11) {
      return 0;
    }
  }
  uint64_t v15 = *(void *)(v11 + 80);
  int v16 = (uint64_t *)(v15 + 24);
  if (*(_DWORD *)(v15 + 32) >= 0x41u) {
    int v16 = (uint64_t *)*v16;
  }
  uint64_t result = 0;
  uint64_t v17 = *v16;
  if (v17 <= 65534)
  {
    if (v17 == 255)
    {
      uint64_t v21 = 0;
      int v20 = 1;
      int v18 = 1;
      int v22 = 0;
      int v23 = 1;
      int v19 = 1;
    }
    else
    {
      if (v17 != 65280) {
        return result;
      }
      int v20 = 0;
      int v19 = 0;
      LODWORD(result) = 0;
      int v18 = 1;
      int v22 = 1;
      int v23 = 1;
      uint64_t v21 = 1;
    }
  }
  else
  {
    switch(v17)
    {
      case 65535:
        int v20 = 0;
        BOOL v25 = v5 == 171 && v9 == 175;
        uint64_t v21 = 1;
        int v18 = 1;
        int v22 = 1;
        int v23 = 1;
        int v19 = 0;
        uint64_t result = 0;
        if (v5 != 177 && !v25) {
          return result;
        }
        break;
      case 16711680:
        int v23 = 0;
        int v19 = 0;
        int v20 = 1;
        uint64_t v21 = 2;
        int v18 = 1;
        int v22 = 1;
        LODWORD(result) = 1;
        break;
      case 4278190080:
        int v18 = 0;
        int v19 = 0;
        LODWORD(result) = 0;
        int v20 = 1;
        uint64_t v21 = 3;
        int v22 = 1;
        int v23 = 1;
        break;
      default:
        return result;
    }
  }
  if (v5 == 171)
  {
    if ((v19 | result) == 1)
    {
      if (v9 == 177)
      {
LABEL_51:
        uint64_t v26 = *(void *)(*(void *)(v8 + 32) + 40);
        int v27 = *(unsigned __int16 *)(v26 + 24);
        if (v27 != 35 && v27 != 11) {
          return 0;
        }
        goto LABEL_59;
      }
    }
    else if (v9 == 175)
    {
      goto LABEL_51;
    }
    return 0;
  }
  if (v5 == 175)
  {
    if (v22 & v23) {
      return 0;
    }
  }
  else if (v20 & v18)
  {
    return 0;
  }
  uint64_t v26 = v7[5];
  int v29 = *(unsigned __int16 *)(v26 + 24);
  if (v29 != 35 && v29 != 11) {
    return 0;
  }
LABEL_59:
  uint64_t v30 = *(void *)(v26 + 80);
  uint64_t v31 = (void *)(v30 + 24);
  if (*(_DWORD *)(v30 + 32) >= 0x41u) {
    uint64_t v31 = (void *)*v31;
  }
  if (*v31 != 8 || *(void *)(a3 + 8 * v21)) {
    return 0;
  }
  *(void *)(a3 + 8 * v21) = **(void **)(v8 + 32);
  return 1;
}

void sub_1CCF4EBF8()
{
}

void *sub_1CCF4EC0C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F2641580;
  return result;
}

void sub_1CCF4EC44(uint64_t a1, void *a2)
{
  *a2 = &unk_1F2641580;
}

uint64_t sub_1CCF4EC6C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if (*(void *)a2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return 1;
  }
  uint64_t v6 = *(void *)(*(void *)a2 + 80);
  uint64_t v7 = *(void *)(v3 + 80);
  uint64_t v8 = *(unsigned int *)(v6 + 32);
  if (v8 <= 0x40) {
    return (*(void *)(v7 + 24) & *(void *)(v6 + 24)) != 0;
  }
  int v9 = *(uint64_t **)(v6 + 24);
  uint64_t v10 = *(uint64_t **)(v7 + 24);
  unint64_t v11 = ((unint64_t)(v8 + 63) >> 6) - 1;
  do
  {
    uint64_t v13 = *v9++;
    uint64_t v12 = v13;
    uint64_t v14 = *v10++;
    uint64_t v15 = v14 & v12;
    uint64_t result = v15 != 0;
    if (v15) {
      BOOL v16 = 1;
    }
    else {
      BOOL v16 = v11 == 0;
    }
    --v11;
  }
  while (!v16);
  return result;
}

uint64_t *sub_1CCF4ECE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const llvm::APInt *a7)
{
  uint64_t v10 = sub_1CCF4FF10(a1, a4, a5, a6);
  unsigned int v12 = v11;
  uint64_t v13 = *(uint64_t **)(a2 + 32);
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  *(_OWORD *)uint64_t v139 = *(_OWORD *)(*(void *)(*v13 + 40) + 16 * v15);
  uint64_t v16 = sub_1CCFD8CD8(v13[5], v13[6], 0, 0);
  uint64_t v19 = v16;
  int v20 = *(unsigned __int16 *)(a2 + 24);
  if (v20 != 177 || v16 == 0)
  {
LABEL_15:
    if (v20 == 175)
    {
      int v28 = *(unsigned __int16 *)(v10 + 24);
      BOOL v29 = v28 == 60;
      if (v28 == 177 || v28 == 60) {
        int v31 = 177;
      }
      else {
        int v31 = 0;
      }
      if (v28 != 177 && v28 != 60) {
        return 0;
      }
    }
    else
    {
      if (v20 != 177) {
        return 0;
      }
      int v28 = *(unsigned __int16 *)(v10 + 24);
      BOOL v29 = v28 == 58;
      BOOL v30 = v28 == 175 || v28 == 58;
      int v31 = v30 ? 175 : 0;
      if (v28 != 58 && v28 != 175) {
        return 0;
      }
    }
    if (*(unsigned __int16 *)(v14 + 24) == v28)
    {
      uint64_t v33 = *(void *)(v14 + 32);
      uint64_t v34 = *(void *)(v10 + 32);
      if (*(void *)v33 == *(void *)v34 && *(_DWORD *)(v33 + 8) == *(_DWORD *)(v34 + 8))
      {
        unint64_t v35 = (unsigned __int8 *)(*(void *)(v10 + 40) + 16 * v12);
        if (LOBYTE(v139[0]) == *v35 && (LOBYTE(v139[0]) || v139[1] == *((void *)v35 + 1)))
        {
          uint64_t v124 = sub_1CCFD8CD8(*(void *)(v33 + 40), *(void *)(v33 + 48), 0, 0);
          uint64_t v36 = sub_1CCFD8CD8(*(void *)(*(void *)(v10 + 32) + 40), *(void *)(*(void *)(v10 + 32) + 48), 0, 0);
          if (v19)
          {
            uint64_t v39 = *(void *)(v19 + 80);
            uint64_t v40 = *(unsigned int *)(v39 + 32);
            unsigned int v123 = v31;
            if (v40 > 0x40)
            {
              int v58 = 0;
              int64_t v59 = (unint64_t)(v40 + 63) >> 6;
              uint64_t v42 = v124;
              do
              {
                BOOL v49 = v59-- < 1;
                if (v49) {
                  break;
                }
                unint64_t v60 = *(void *)(*(void *)(v39 + 24) + 8 * v59);
                v58 += __clz(v60);
              }
              while (!v60);
              int v61 = v40 | 0xFFFFFFC0;
              if ((v40 & 0x3F) == 0) {
                int v61 = 0;
              }
              BOOL v41 = v58 + v61 == v40;
            }
            else
            {
              BOOL v41 = *(void *)(v39 + 24) == 0;
              uint64_t v42 = v124;
            }
            if (v41) {
              return 0;
            }
            uint64_t v122 = a7;
            uint64_t v57 = 0;
            if (!v42) {
              return v57;
            }
            uint64_t v62 = *(void *)(v42 + 80);
            uint64_t v63 = *(unsigned int *)(v62 + 32);
            if (v63 > 0x40)
            {
              int v65 = 0;
              int64_t v66 = (unint64_t)(v63 + 63) >> 6;
              do
              {
                BOOL v49 = v66-- < 1;
                if (v49) {
                  break;
                }
                unint64_t v67 = *(void *)(*(void *)(v62 + 24) + 8 * v66);
                v65 += __clz(v67);
              }
              while (!v67);
              int v68 = v63 | 0xFFFFFFC0;
              if ((v63 & 0x3F) == 0) {
                int v68 = 0;
              }
              BOOL v64 = v65 + v68 == v63;
            }
            else
            {
              BOOL v64 = *(void *)(v62 + 24) == 0;
            }
            if (v64) {
              return 0;
            }
            uint64_t v57 = 0;
            if (!v36) {
              return v57;
            }
            uint64_t v70 = *(void *)(v36 + 80);
            uint64_t v71 = *(unsigned int *)(v70 + 32);
            if (v71 > 0x40)
            {
              int v72 = 0;
              int64_t v73 = (unint64_t)(v71 + 63) >> 6;
              do
              {
                BOOL v49 = v73-- < 1;
                if (v49) {
                  break;
                }
                unint64_t v74 = *(void *)(*(void *)(v70 + 24) + 8 * v73);
                v72 += __clz(v74);
              }
              while (!v74);
              int v75 = v71 | 0xFFFFFFC0;
              if ((v71 & 0x3F) == 0) {
                int v75 = 0;
              }
              if (v72 + v75 == v71) {
                return 0;
              }
            }
            else if (!*(void *)(v70 + 24))
            {
              return 0;
            }
            uint64_t v77 = v36;
            unsigned int v78 = sub_1CD3E12F4((unsigned __int8 *)v139, v37, v38);
            uint64_t v79 = *(void *)(v19 + 80);
            uint64_t v80 = *(unsigned int *)(v79 + 32);
            if (v80 >= 0x41)
            {
              int v82 = 0;
              int64_t v83 = (unint64_t)(v80 + 63) >> 6;
              do
              {
                BOOL v49 = v83-- < 1;
                if (v49) {
                  break;
                }
                unint64_t v84 = *(void *)(*(void *)(v79 + 24) + 8 * v83);
                v82 += __clz(v84);
              }
              while (!v84);
              int v85 = v80 | 0xFFFFFFC0;
              if ((v80 & 0x3F) == 0) {
                int v85 = 0;
              }
              if ((v80 - v82 - v85) <= 0x40 && **(void **)(v79 + 24) <= (unint64_t)v78)
              {
                unsigned int v136 = *(_DWORD *)(v79 + 32);
                operator new[]();
              }
              return 0;
            }
            unint64_t v81 = *(void *)(v79 + 24);
            if (v81 <= v78)
            {
              unsigned int v136 = *(_DWORD *)(v79 + 32);
              unint64_t v135 = v81;
              sub_1CD787F94((uint64_t)&v137, v78, (uint64_t)&v135);
              if (v136 >= 0x41 && v135) {
                MEMORY[0x1D25D9CB0](v135, 0x1000C8000313F17);
              }
              uint64_t v86 = *(void *)(v77 + 80);
              unsigned int v134 = *(_DWORD *)(v86 + 32);
              if (v134 > 0x40) {
                operator new[]();
              }
              uint64_t v133 = *(uint64_t **)(v86 + 24);
              uint64_t v87 = *(void *)(v124 + 80);
              unsigned int v132 = *(_DWORD *)(v87 + 32);
              if (v132 > 0x40) {
                operator new[]();
              }
              __s1 = *(void **)(v87 + 24);
              sub_1CCF4FF84((uint64_t)&v133, (uint64_t)&__s1, 0);
              if (!v29)
              {
                llvm::APInt::zextOrTrunc((uint64_t *)&v137, v134, (uint64_t)&v129);
                if (v130 > 0x40)
                {
                  llvm::APInt::flipAllBitsSlowCase((uint64_t)&v129);
                }
                else
                {
                  if (v130) {
                    unint64_t v99 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v130;
                  }
                  else {
                    unint64_t v99 = 0;
                  }
                  uint64_t v129 = v99 & ~v129;
                }
                llvm::APInt::operator++((uint64_t)&v129);
                unsigned int v100 = v130;
                if (v130 >= 0x41)
                {
                  uint64_t v114 = 0;
                  uint64_t v115 = (unint64_t *)v129;
                  uint64_t v116 = v133;
                  unint64_t v117 = ((unint64_t)v130 + 63) >> 6;
                  unint64_t v118 = v117;
                  do
                  {
                    uint64_t v119 = *v116++;
                    unint64_t v120 = v119 + *v115;
                    BOOL v121 = v120 + 1 <= *v115;
                    if (v114)
                    {
                      ++v120;
                      uint64_t v114 = v121;
                    }
                    else
                    {
                      uint64_t v114 = v120 < *v115;
                    }
                    *v115++ = v120;
                    --v118;
                  }
                  while (v118);
                  *(void *)(v129 + 8 * (v117 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v100;
                  unsigned int v100 = v130;
                  __int16 v103 = (void *)v129;
                }
                else
                {
                  unint64_t v101 = (unint64_t)v133 + v129;
                  if (v130) {
                    unint64_t v102 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v130;
                  }
                  else {
                    unint64_t v102 = 0;
                  }
                  __int16 v103 = (void *)(v102 & v101);
                  uint64_t v129 = v102 & v101;
                }
                unsigned int v130 = 0;
                if (v132 > 0x40) {
                  BOOL v104 = memcmp(__s1, v103, (((unint64_t)v132 + 63) >> 3) & 0x3FFFFFF8) == 0;
                }
                else {
                  BOOL v104 = __s1 == v103;
                }
                int v105 = v104;
                if (v100 >= 0x41)
                {
                  if (v103)
                  {
                    MEMORY[0x1D25D9CB0](v103, 0x1000C8000313F17);
                    if (v130 >= 0x41)
                    {
                      if (v129) {
                        MEMORY[0x1D25D9CB0](v129, 0x1000C8000313F17);
                      }
                    }
                  }
                }
                if (!v105) {
                  goto LABEL_152;
                }
LABEL_172:
                unint64_t v106 = (uint64_t *)(*(void *)(*(void *)(*(void *)(a2 + 32) + 40) + 40)
                                 + 16 * *(unsigned int *)(*(void *)(a2 + 32) + 48));
                uint64_t v107 = *(void *)(v10 + 40) + 16 * v12;
                int v108 = *(llvm **)v107;
                uint64_t v109 = *(void *)(v107 + 8);
                uint64_t v110 = sub_1CD7EBB14(a1, (llvm::LLVMContext *)&v137, v122, *v106, v106[1], 0, 0);
                uint64_t v113 = *(void *)(a1 + 832);
                if (v113) {
                  LOWORD(v113) = *(_WORD *)(v113 + 8);
                }
                uint64_t v57 = sub_1CCFDED5C(a1, v123, v122, v108, v109, v14, v15, v112, v110, v111, v113);
                goto LABEL_153;
              }
              unint64_t v89 = (uint64_t *)&v137;
              if (v138 >= 0x41) {
                unint64_t v89 = v137;
              }
              uint64_t v90 = *v89;
              unsigned int v130 = v134;
              if (v134 > 0x40) {
                llvm::APInt::initSlowCase((llvm::APInt *)&v129);
              }
              uint64_t v129 = 1 << v90;
              unsigned int v128 = 1;
              unint64_t v127 = 0;
              unsigned int v126 = 1;
              uint64_t v125 = 0;
              llvm::APInt::udivrem((llvm::APInt *)&v133, (const llvm::APInt *)&v129, (const llvm::APInt *)&v127, (llvm::APInt *)&v125, v88);
              unsigned int v91 = v126;
              uint64_t v92 = v125;
              uint64_t v93 = v125;
              if (v126 >= 0x41)
              {
                int v94 = 0;
                int64_t v95 = ((unint64_t)v126 + 63) >> 6;
                do
                {
                  BOOL v49 = v95-- < 1;
                  if (v49) {
                    break;
                  }
                  unint64_t v96 = v125[v95];
                  v94 += __clz(v96);
                }
                while (!v96);
                unsigned int v97 = v126 | 0xFFFFFFC0;
                if ((v126 & 0x3F) == 0) {
                  unsigned int v97 = 0;
                }
                if (v126 - v94 - v97 > 0x40) {
                  goto LABEL_124;
                }
                uint64_t v93 = (void *)*v125;
              }
              if (!v93)
              {
                unsigned int v98 = v128;
                if (v128 <= 0x40)
                {
                  if (v127 != __s1) {
                    goto LABEL_123;
                  }
                  goto LABEL_163;
                }
                if (!memcmp(v127, __s1, (((unint64_t)v128 + 63) >> 3) & 0x3FFFFFF8))
                {
LABEL_163:
                  if (v91 >= 0x41 && v92)
                  {
                    MEMORY[0x1D25D9CB0](v92, 0x1000C8000313F17);
                    unsigned int v98 = v128;
                  }
                  if (v98 >= 0x41 && v127) {
                    MEMORY[0x1D25D9CB0](v127, 0x1000C8000313F17);
                  }
                  if (v130 >= 0x41 && v129) {
                    MEMORY[0x1D25D9CB0](v129, 0x1000C8000313F17);
                  }
                  goto LABEL_172;
                }
              }
LABEL_123:
              if (v91 < 0x41)
              {
LABEL_126:
                if (v128 >= 0x41 && v127) {
                  MEMORY[0x1D25D9CB0](v127, 0x1000C8000313F17);
                }
                if (v130 >= 0x41 && v129) {
                  MEMORY[0x1D25D9CB0](v129, 0x1000C8000313F17);
                }
LABEL_152:
                uint64_t v57 = 0;
LABEL_153:
                if (v132 >= 0x41 && __s1) {
                  MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
                }
                if (v134 >= 0x41 && v133) {
                  MEMORY[0x1D25D9CB0](v133, 0x1000C8000313F17);
                }
                if (v138 >= 0x41 && v137) {
                  MEMORY[0x1D25D9CB0](v137, 0x1000C8000313F17);
                }
                return v57;
              }
LABEL_124:
              if (v92) {
                MEMORY[0x1D25D9CB0](v92, 0x1000C8000313F17);
              }
              goto LABEL_126;
            }
          }
        }
      }
    }
    return 0;
  }
  if (*(_WORD *)(v10 + 24) != 56) {
    goto LABEL_14;
  }
  int v22 = *(uint64_t **)(v10 + 32);
  uint64_t v23 = *v22;
  if (*v22 != v22[5]) {
    goto LABEL_14;
  }
  int v24 = *((_DWORD *)v22 + 2);
  int v25 = *((_DWORD *)v22 + 12);
  BOOL v26 = v24 == v15 && v23 == v14;
  if (!v26 || v24 != v25) {
    goto LABEL_14;
  }
  uint64_t v43 = *(void *)(v16 + 80);
  uint64_t v44 = (llvm::Type *)(v43 + 24);
  int v45 = sub_1CD3E12F4((unsigned __int8 *)v139, v17, v18);
  uint64_t v46 = *(unsigned int *)(v43 + 32);
  if (v46 >= 0x41)
  {
    int v47 = 0;
    int64_t v48 = (unint64_t)(v46 + 63) >> 6;
    do
    {
      BOOL v49 = v48-- < 1;
      if (v49) {
        break;
      }
      unint64_t v50 = *(void *)(*(void *)v44 + 8 * v48);
      v47 += __clz(v50);
    }
    while (!v50);
    int v51 = v46 | 0xFFFFFFC0;
    if ((v46 & 0x3F) == 0) {
      int v51 = 0;
    }
    if ((v46 - v47 - v51) > 0x40) {
      goto LABEL_14;
    }
    uint64_t v44 = *(llvm::Type **)v44;
  }
  if (*(llvm::Type **)v44 != (llvm::Type *)((char *)v45 - 1))
  {
LABEL_14:
    int v20 = *(unsigned __int16 *)(a2 + 24);
    goto LABEL_15;
  }
  long long v52 = *(_OWORD *)v139;
  int64_t v53 = sub_1CD7EC970(a1, 1, v139[0], v139[1], a7, 1);
  uint64_t v56 = *(void *)(a1 + 832);
  if (v56) {
    LOWORD(v56) = *(_WORD *)(v56 + 8);
  }
  return sub_1CCFDED5C(a1, 175, a7, (llvm *)v52, *((uint64_t *)&v52 + 1), v14, v15, v55, (uint64_t)v53, v54, v56);
}

uint64_t *sub_1CCF4F784(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, char a13, unsigned int a14, unsigned int a15, const llvm::APInt *a16)
{
  long long v32 = *(_OWORD *)(*(void *)(a2 + 40) + 16 * a3);
  unsigned int v22 = sub_1CD3E12F4((unsigned __int8 *)&v32, a2, a3);
  if (!sub_1CCF5042C(a9, a10, a11, v23, a12, v22, *a1, 1)) {
    return 0;
  }
  uint64_t v25 = *a1;
  if (a13) {
    uint64_t v26 = a14;
  }
  else {
    uint64_t v26 = a15;
  }
  if (a13) {
    uint64_t v27 = a4;
  }
  else {
    uint64_t v27 = a6;
  }
  uint64_t v28 = a7;
  if (a13) {
    uint64_t v28 = a5;
  }
  uint64_t v29 = *(void *)(v25 + 832);
  if (v29) {
    LOWORD(v29) = *(_WORD *)(v29 + 8);
  }
  return sub_1CCFDED5C(v25, v26, a16, (llvm *)v32, *((uint64_t *)&v32 + 1), a2, a3, v24, v27, v28, v29);
}

uint64_t *sub_1CCF4F878(uint64_t *a1, uint64_t a2, BOOL a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, uint64_t a14, char a15, unsigned int a16, unsigned int a17, const llvm::APInt *a18)
{
  long long v104 = *(_OWORD *)(*(void *)(a2 + 40) + 16 * a3);
  unsigned int v23 = sub_1CD3E12F4((unsigned __int8 *)&v104, a2, a3);
  BOOL v26 = a2 == a4 && a3 == a5;
  unsigned int v27 = v23;
  if (sub_1CCF5042C(a11, a12, a13, v24, a14, v23, *a1, v26))
  {
    BOOL v30 = (void *)*a1;
    if (a15) {
      uint64_t v31 = a16;
    }
    else {
      uint64_t v31 = a17;
    }
    uint64_t v33 = *((void *)&v104 + 1);
    long long v32 = (llvm *)v104;
    uint64_t v34 = a6;
    if (!a15) {
      uint64_t v34 = a9;
    }
    uint64_t v35 = a7;
    if (!a15) {
      uint64_t v35 = a10;
    }
    uint64_t v36 = v30[104];
    if (v36) {
      LOWORD(v36) = *(_WORD *)(v36 + 8);
    }
    uint64_t v37 = a18;
    uint64_t v38 = a2;
    uint64_t v100 = v35;
    __int16 v101 = v36;
    uint64_t v99 = v34;
    uint64_t v97 = a4;
    uint64_t v98 = a5;
LABEL_18:
    uint64_t v39 = a3;
    return sub_1CD7F5D38(v30, (const char *)v31, v37, v32, v33, v38, v39, v28, v97, v98, v99, v100, SHIDWORD(v100), v101);
  }
  if (a16 != 180 || !v27) {
    return 0;
  }
  v29.i32[0] = v27;
  uint8x8_t v41 = (uint8x8_t)vcnt_s8(v29);
  v41.i16[0] = vaddlv_u8(v41);
  uint64_t result = 0;
  if (v41.i32[0] > 1u) {
    return result;
  }
  if (*(_WORD *)(a4 + 24) == 177)
  {
    uint64_t v42 = sub_1CCFD8CD8(*(void *)(*(void *)(a4 + 32) + 40), *(void *)(*(void *)(a4 + 32) + 48), 0, 0);
    if (v42)
    {
      uint64_t v43 = *(void *)(v42 + 80);
      uint64_t v44 = (void *)(v43 + 24);
      uint64_t v45 = *(unsigned int *)(v43 + 32);
      if (v45 >= 0x41)
      {
        int v46 = 0;
        int64_t v47 = (unint64_t)(v45 + 63) >> 6;
        do
        {
          BOOL v48 = v47-- < 1;
          if (v48) {
            break;
          }
          unint64_t v49 = *(void *)(*v44 + 8 * v47);
          v46 += __clz(v49);
        }
        while (!v49);
        int v50 = v45 | 0xFFFFFFC0;
        if ((v45 & 0x3F) == 0) {
          int v50 = 0;
        }
        if ((v45 - v46 - v50) > 0x40) {
          goto LABEL_54;
        }
        uint64_t v44 = (void *)*v44;
      }
      if (*v44 != 1) {
        goto LABEL_54;
      }
      if (*(_WORD *)(a13 + 24) != 173) {
        goto LABEL_54;
      }
      uint64_t v51 = sub_1CCFD8CD8(*(void *)(*(void *)(a13 + 32) + 40), *(void *)(*(void *)(a13 + 32) + 48), 0, 0);
      if (!v51) {
        goto LABEL_54;
      }
      uint64_t v52 = *(void *)(v51 + 80);
      int64_t v53 = (void *)(v52 + 24);
      uint64_t v54 = *(unsigned int *)(v52 + 32);
      if (v54 >= 0x41)
      {
        int v55 = 0;
        int64_t v56 = (unint64_t)(v54 + 63) >> 6;
        do
        {
          BOOL v48 = v56-- < 1;
          if (v48) {
            break;
          }
          unint64_t v57 = *(void *)(*v53 + 8 * v56);
          v55 += __clz(v57);
        }
        while (!v57);
        int v58 = v54 | 0xFFFFFFC0;
        if ((v54 & 0x3F) == 0) {
          int v58 = 0;
        }
        if ((v54 - v55 - v58) > 0x40) {
          goto LABEL_54;
        }
        int64_t v53 = (void *)*v53;
      }
      if (*v53 == v27 - 1)
      {
        uint64_t v59 = *(void *)(a13 + 32);
        if (*(void *)v59 == a11 && *(_DWORD *)(v59 + 8) == a12)
        {
          long long v32 = (llvm *)v104;
          if ((_BYTE)v104)
          {
            uint64_t v60 = a1[1];
            if ((v104 == 1 || *(void *)(v60 + 8 * v104 + 96))
              && (*(unsigned __int8 *)(v60 + 390 * v104 + 4042) | 4) == 4)
            {
              BOOL v30 = (void *)*a1;
              uint64_t v33 = *((void *)&v104 + 1);
              int v61 = *(uint64_t **)(a4 + 32);
              uint64_t v62 = *v61;
              uint64_t v63 = v61[1];
              uint64_t v64 = *(void *)(*a1 + 832);
              if (v64) {
                LOWORD(v64) = *(_WORD *)(v64 + 8);
              }
              uint64_t v37 = a18;
              uint64_t v38 = a2;
              uint64_t v100 = a7;
              __int16 v101 = v64;
              uint64_t v98 = v63;
              uint64_t v99 = a6;
              uint64_t v97 = v62;
              uint64_t v31 = 180;
              goto LABEL_18;
            }
          }
        }
      }
    }
  }
LABEL_54:
  int v65 = *(unsigned __int16 *)(a2 + 24);
  if (v65 != 175) {
    goto LABEL_86;
  }
  uint64_t v66 = sub_1CCFD8CD8(*(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48), 0, 0);
  if (v66)
  {
    uint64_t v67 = *(void *)(v66 + 80);
    int v68 = (void *)(v67 + 24);
    uint64_t v69 = *(unsigned int *)(v67 + 32);
    if (v69 >= 0x41)
    {
      int v70 = 0;
      int64_t v71 = (unint64_t)(v69 + 63) >> 6;
      do
      {
        BOOL v48 = v71-- < 1;
        if (v48) {
          break;
        }
        unint64_t v72 = *(void *)(*v68 + 8 * v71);
        v70 += __clz(v72);
      }
      while (!v72);
      int v73 = v69 | 0xFFFFFFC0;
      if ((v69 & 0x3F) == 0) {
        int v73 = 0;
      }
      if ((v69 - v70 - v73) > 0x40) {
        goto LABEL_85;
      }
      int v68 = (void *)*v68;
    }
    if (*v68 == 1 && *(_WORD *)(a11 + 24) == 173)
    {
      uint64_t v74 = sub_1CCFD8CD8(*(void *)(*(void *)(a11 + 32) + 40), *(void *)(*(void *)(a11 + 32) + 48), 0, 0);
      if (v74)
      {
        uint64_t v75 = *(void *)(v74 + 80);
        int v76 = (void *)(v75 + 24);
        uint64_t v77 = *(unsigned int *)(v75 + 32);
        if (v77 < 0x41) {
          goto LABEL_75;
        }
        int v78 = 0;
        int64_t v79 = (unint64_t)(v77 + 63) >> 6;
        do
        {
          BOOL v48 = v79-- < 1;
          if (v48) {
            break;
          }
          unint64_t v80 = *(void *)(*v76 + 8 * v79);
          v78 += __clz(v80);
        }
        while (!v80);
        int v81 = v77 | 0xFFFFFFC0;
        if ((v77 & 0x3F) == 0) {
          int v81 = 0;
        }
        if ((v77 - v78 - v81) <= 0x40)
        {
          int v76 = (void *)*v76;
LABEL_75:
          if (*v76 == v27 - 1)
          {
            uint64_t v82 = *(void *)(a11 + 32);
            if (*(void *)v82 == a13 && *(_DWORD *)(v82 + 8) == a14)
            {
              long long v32 = (llvm *)v104;
              if ((_BYTE)v104)
              {
                uint64_t v83 = a1[1];
                if ((v104 == 1 || *(void *)(v83 + 8 * v104 + 96))
                  && (*(unsigned __int8 *)(v83 + 390 * v104 + 4043) | 4) == 4)
                {
                  BOOL v30 = (void *)*a1;
                  uint64_t v33 = *((void *)&v104 + 1);
                  unint64_t v84 = *(uint64_t **)(a2 + 32);
                  uint64_t v38 = *v84;
                  uint64_t v39 = v84[1];
                  uint64_t v85 = *(void *)(*a1 + 832);
                  if (v85) {
                    LOWORD(v85) = *(_WORD *)(v85 + 8);
                  }
LABEL_111:
                  uint64_t v37 = a18;
                  uint64_t v100 = a10;
                  __int16 v101 = v85;
                  uint64_t v98 = a5;
                  uint64_t v99 = a9;
                  uint64_t v97 = a4;
                  uint64_t v31 = 181;
                  return sub_1CD7F5D38(v30, (const char *)v31, v37, v32, v33, v38, v39, v28, v97, v98, v99, v100, SHIDWORD(v100), v101);
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_85:
  int v65 = *(unsigned __int16 *)(a2 + 24);
LABEL_86:
  if (v65 != 56) {
    return 0;
  }
  uint64_t v86 = *(void *)(a2 + 32);
  if (*(void *)v86 != *(void *)(v86 + 40)
    || *(_DWORD *)(v86 + 8) != *(_DWORD *)(v86 + 48)
    || *(_WORD *)(a11 + 24) != 173)
  {
    return 0;
  }
  uint64_t result = (uint64_t *)sub_1CCFD8CD8(*(void *)(*(void *)(a11 + 32) + 40), *(void *)(*(void *)(a11 + 32) + 48), 0, 0);
  if (!result) {
    return result;
  }
  uint64_t v87 = result[10];
  uint64_t v88 = (void *)(v87 + 24);
  uint64_t v89 = *(unsigned int *)(v87 + 32);
  if (v89 >= 0x41)
  {
    int v90 = 0;
    int64_t v91 = (unint64_t)(v89 + 63) >> 6;
    do
    {
      BOOL v48 = v91-- < 1;
      if (v48) {
        break;
      }
      unint64_t v92 = *(void *)(*v88 + 8 * v91);
      v90 += __clz(v92);
    }
    while (!v92);
    int v93 = v89 | 0xFFFFFFC0;
    if ((v89 & 0x3F) == 0) {
      int v93 = 0;
    }
    if ((v89 - v90 - v93) > 0x40) {
      return 0;
    }
    uint64_t v88 = (void *)*v88;
  }
  if (*v88 != v27 - 1) {
    return 0;
  }
  uint64_t v94 = *(void *)(a11 + 32);
  if (*(void *)v94 != a13 || *(_DWORD *)(v94 + 8) != a14) {
    return 0;
  }
  long long v32 = (llvm *)v104;
  if (!(_BYTE)v104) {
    return (uint64_t *)v104;
  }
  uint64_t v95 = a1[1];
  if (v104 == 1 || (uint64_t result = 0, *(void *)(v95 + 8 * v104 + 96)))
  {
    if ((*(unsigned __int8 *)(v95 + 390 * v104 + 4043) | 4) == 4)
    {
      BOOL v30 = (void *)*a1;
      uint64_t v33 = *((void *)&v104 + 1);
      unint64_t v96 = *(uint64_t **)(a2 + 32);
      uint64_t v38 = *v96;
      uint64_t v39 = v96[1];
      uint64_t v85 = *(void *)(*a1 + 832);
      if (v85) {
        LOWORD(v85) = *(_WORD *)(v85 + 8);
      }
      goto LABEL_111;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1CCF4FF10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2;
  if (*(_WORD *)(a2 + 24) == 171 && sub_1CD7F590C(a1, *(void *)(*(void *)(a2 + 32) + 40)))
  {
    uint64_t v7 = *(void *)(v4 + 32);
    uint64_t v8 = *(void *)(v7 + 40);
    *(_DWORD *)(a4 + 8) = *(_DWORD *)(v7 + 48);
    *(void *)a4 = v8;
    return **(void **)(v4 + 32);
  }
  return v4;
}

uint64_t sub_1CCF4FF84(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v4 = result;
  unsigned int v5 = *(_DWORD *)(result + 8);
  unsigned int v6 = *(_DWORD *)(a2 + 8);
  if (v5 > v6) {
    unsigned int v6 = *(_DWORD *)(result + 8);
  }
  unsigned int v7 = v6 + a3;
  if (v5 < v6 + a3)
  {
    if (v7 > 0x40) {
      operator new[]();
    }
    unint64_t v8 = *(void *)result & (0xFFFFFFFFFFFFFFFFLL >> -(char)v7);
    unsigned int v5 = v6 + a3;
    if (*(_DWORD *)(result + 8) >= 0x41u)
    {
      uint64_t result = *(void *)result;
      if (*(void *)v4) {
        uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
      }
    }
  }
  else
  {
    if (v5 > 0x40) {
      operator new[]();
    }
    unint64_t v8 = *(void *)result;
  }
  *(void *)uint64_t v4 = v8;
  *(_DWORD *)(v4 + 8) = v5;
  unsigned int v9 = *(_DWORD *)(a2 + 8);
  if (v9 < v7)
  {
    if (v7 > 0x40) {
      operator new[]();
    }
    unint64_t v10 = *(void *)a2 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v7);
    if (*(_DWORD *)(a2 + 8) >= 0x41u)
    {
      uint64_t result = *(void *)a2;
      if (*(void *)a2) {
        uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
      }
    }
    unsigned int v9 = v7;
  }
  else
  {
    if (v9 > 0x40) {
      operator new[]();
    }
    unint64_t v10 = *(void *)a2;
  }
  *(void *)a2 = v10;
  *(_DWORD *)(a2 + 8) = v9;
  return result;
}

void sub_1CCF50208()
{
}

_DWORD *sub_1CCF5021C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F26415C8;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1CCF50268(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F26415C8;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL sub_1CCF50298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)a2 + 80);
  unsigned int v4 = *(_DWORD *)(v3 + 32);
  if (v4 >= 0x41) {
    operator new[]();
  }
  unint64_t v5 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v4;
  if (!v4) {
    unint64_t v5 = 0;
  }
  return (v5 & (*(void *)(*(void *)(*(void *)a3 + 80) + 24) + *(void *)(v3 + 24))) == *(unsigned int *)(a1 + 8);
}

BOOL sub_1CCF5042C(uint64_t a1, int a2, uint64_t a3, int8x8_t a4, uint64_t a5, unsigned int a6, uint64_t a7, int a8)
{
  uint64_t v10 = a3;
  if (!a8
    || ((a4.i32[0] = a6, uint8x8_t v13 = (uint8x8_t)vcnt_s8(a4), v13.i16[0] = vaddlv_u8(v13), *(_WORD *)(a3 + 24) == 171)
      ? (BOOL v14 = v13.i32[0] == 1)
      : (BOOL v14 = 0),
        !v14
     || (uint64_t v15 = sub_1CCFD8CD8(*(void *)(*(void *)(a3 + 32) + 40), *(void *)(*(void *)(a3 + 32) + 48), 0, 0)) == 0))
  {
    unsigned int v16 = 0;
    goto LABEL_9;
  }
  uint64_t v32 = v15;
  sub_1CD7F121C(a7, **(void **)(v10 + 32), *(void *)(*(void *)(v10 + 32) + 8), 0, (uint64_t)&__dst);
  unsigned int v16 = __clz(a6) ^ 0x1F;
  uint64_t v33 = *(void *)(v32 + 80);
  uint64_t v34 = *(unsigned int *)(v33 + 32);
  if (v34 > 0x40)
  {
    int v36 = 0;
    int64_t v37 = (unint64_t)(v34 + 63) >> 6;
    do
    {
      BOOL v38 = v37-- < 1;
      if (v38) {
        break;
      }
      unint64_t v39 = *(void *)(*(void *)(v33 + 24) + 8 * v37);
      v36 += __clz(v39);
    }
    while (!v39);
    int v40 = v34 | 0xFFFFFFC0;
    if ((v34 & 0x3F) == 0) {
      int v40 = 0;
    }
    if ((int)v34 - v36 - v40 <= v16) {
      operator new[]();
    }
  }
  else
  {
    unint64_t v35 = *(void *)(v33 + 24);
    if (64 - __clz(v35) <= v16 && v16 <= __clz(__rbit64(~((unint64_t)__dst | v35))))
    {
      uint64_t v10 = **(void **)(v10 + 32);
      goto LABEL_56;
    }
  }
  unsigned int v16 = 0;
LABEL_56:
  if (v59 >= 0x41 && v58) {
    MEMORY[0x1D25D9CB0](v58, 0x1000C8000313F17);
  }
  if (v57 >= 0x41 && __dst) {
    MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
  }
LABEL_9:
  if (*(_WORD *)(v10 + 24) != 57) {
    return 0;
  }
  uint64_t v17 = sub_1CCFD8CD8(**(void **)(v10 + 32), *(void *)(*(void *)(v10 + 32) + 8), 0, 0);
  if (!v17) {
    return v17;
  }
  uint64_t v18 = *(void *)(v10 + 32);
  uint64_t v19 = *(void *)(v18 + 40);
  int v20 = *(_DWORD *)(v18 + 48);
  if (v16)
  {
    if (*(_WORD *)(a1 + 24) == 171)
    {
      uint64_t v21 = sub_1CCFD8CD8(*(void *)(*(void *)(a1 + 32) + 40), *(void *)(*(void *)(a1 + 32) + 48), 0, 0);
      if (v21)
      {
        uint64_t v41 = v21;
        sub_1CD7F121C(a7, **(void **)(a1 + 32), *(void *)(*(void *)(a1 + 32) + 8), 0, (uint64_t)&__dst);
        uint64_t v42 = *(void *)(v41 + 80);
        uint64_t v43 = *(unsigned int *)(v42 + 32);
        if (v43 > 0x40)
        {
          int v45 = 0;
          int64_t v46 = (unint64_t)(v43 + 63) >> 6;
          do
          {
            BOOL v38 = v46-- < 1;
            if (v38) {
              break;
            }
            unint64_t v47 = *(void *)(*(void *)(v42 + 24) + 8 * v46);
            v45 += __clz(v47);
          }
          while (!v47);
          int v48 = v43 | 0xFFFFFFC0;
          if ((v43 & 0x3F) == 0) {
            int v48 = 0;
          }
          if ((int)v43 - v45 - v48 <= v16) {
            operator new[]();
          }
        }
        else
        {
          unint64_t v44 = *(void *)(v42 + 24);
          if (64 - __clz(v44) <= v16
            && v16 <= __clz(__rbit64(~((unint64_t)__dst | v44))))
          {
            unint64_t v49 = *(uint64_t **)(a1 + 32);
            a1 = *v49;
            a2 = *((_DWORD *)v49 + 2);
          }
        }
        if (v59 >= 0x41 && v58) {
          MEMORY[0x1D25D9CB0](v58, 0x1000C8000313F17);
        }
        if (v57 >= 0x41 && __dst) {
          MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
        }
      }
    }
  }
  unsigned int v57 = 1;
  __dst = 0;
  if (a1 != v19 || v20 != a2)
  {
    if (*(_WORD *)(v19 + 24) != 201
      || (uint64_t v23 = *(void *)(v19 + 32), a1 != *(void *)v23)
      || *(_DWORD *)(v23 + 8) != a2)
    {
      if (*(_WORD *)(a1 + 24) == 56)
      {
        uint64_t v27 = *(void *)(a1 + 32);
        if (*(void *)v27 == v19 && *(_DWORD *)(v27 + 8) == v20)
        {
          uint64_t v28 = sub_1CCFD8CD8(*(void *)(v27 + 40), *(void *)(v27 + 48), 0, 0);
          if (v28)
          {
            uint64_t v29 = *(void *)(v28 + 80);
            unsigned int v25 = *(_DWORD *)(v29 + 32);
            if (v25 >= 0x41) {
              operator new[]();
            }
            unint64_t v30 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v25;
            if (!v25) {
              unint64_t v30 = 0;
            }
            unint64_t v26 = v30 & (*(void *)(*(void *)(v17 + 80) + 24) + *(void *)(v29 + 24));
            goto LABEL_23;
          }
        }
      }
      return 0;
    }
  }
  uint64_t v24 = *(void *)(v17 + 80);
  unsigned int v25 = *(_DWORD *)(v24 + 32);
  if (v25 > 0x40)
  {
    llvm::APInt::reallocate((uint64_t)&__dst, *(_DWORD *)(v24 + 32));
    unsigned int v25 = v57;
    if (v57 <= 0x40)
    {
      unint64_t v26 = *(void *)(v24 + 24);
      __dst = (void *)v26;
      if (!v16) {
        goto LABEL_73;
      }
    }
    else
    {
      unint64_t v26 = (unint64_t)__dst;
      memcpy(__dst, *(const void **)(v24 + 24), (((unint64_t)v57 + 63) >> 3) & 0x3FFFFFF8);
      if (!v16) {
        goto LABEL_73;
      }
    }
    goto LABEL_37;
  }
  unint64_t v26 = *(void *)(v24 + 24);
LABEL_23:
  __dst = (void *)v26;
  unsigned int v57 = v25;
  if (!v16)
  {
LABEL_73:
    if (v25 >= 0x41)
    {
      int v51 = 0;
      int64_t v52 = ((unint64_t)v25 + 63) >> 6;
      do
      {
        BOOL v38 = v52-- < 1;
        if (v38) {
          break;
        }
        unint64_t v53 = *(void *)(v26 + 8 * v52);
        v51 += __clz(v53);
      }
      while (!v53);
      uint64_t v17 = 0;
      unsigned int v54 = v25 | 0xFFFFFFC0;
      if ((v25 & 0x3F) == 0) {
        unsigned int v54 = 0;
      }
      unsigned int v55 = v25 - v51 - v54;
      p_dst = (void **)v26;
      if (v55 > 0x40) {
        goto LABEL_82;
      }
    }
    else
    {
      p_dst = &__dst;
    }
    uint64_t v17 = *p_dst == (void *)a6;
LABEL_82:
    if (v25 >= 0x41 && v26) {
      MEMORY[0x1D25D9CB0](v26, 0x1000C8000313F17);
    }
    return v17;
  }
LABEL_37:
  if (v25 > 0x40) {
    operator new[]();
  }
  return v26 << -(char)v16 == 0;
}

uint64_t sub_1CCF50BD8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, char a6)
{
  uint64_t v6 = result;
  v36[0] = a2;
  v36[1] = a3;
  if (a5 == 10) {
    goto LABEL_10;
  }
  if ((a6 & 1) == 0)
  {
    uint64_t v9 = *(void *)(a2 + 48);
    if (!v9) {
      goto LABEL_10;
    }
    int v10 = 1;
    do
    {
      if (*(_DWORD *)(v9 + 8) == a3)
      {
        if (!v10) {
          goto LABEL_10;
        }
        --v10;
      }
      uint64_t v9 = *(void *)(v9 + 32);
    }
    while (v9);
    if (v10) {
      goto LABEL_10;
    }
  }
  uint64_t result = (uint64_t)sub_1CD3E3904((unsigned int *)v36);
  if (v11 == 1)
  {
    uint64_t v31 = result;
    uint64_t result = v31;
  }
  if ((result & 7) != 0) {
    goto LABEL_10;
  }
  unsigned int v13 = *(unsigned __int16 *)(v36[0] + 24);
  if (v13 > 0xB5)
  {
    if (v13 != 182)
    {
      if (v13 == 253)
      {
        if ((*(_WORD *)(*(void *)(v36[0] + 96) + 36) & 0xF00) == 0
          && (*(unsigned char *)(v36[0] + 26) & 8) == 0
          && (*(_WORD *)(v36[0] + 26) & 0x380) == 0)
        {
          uint64_t v30 = v36[0];
          long long v34 = *(_OWORD *)(v36[0] + 80);
          uint64_t result = (_BYTE)v34
                 ? sub_1CB87E200((unsigned __int8 *)&v34)
                 : (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v34);
          unsigned int v29 = result;
          if (v14 == 1) {
          if ((v29 & 7) == 0)
          }
          {
            if (v29 >> 3 > (unint64_t)a4)
            {
              *(void *)uint64_t v6 = v30;
              *(void *)(v6 + 8) = a4;
              goto LABEL_31;
            }
            if ((~*(unsigned __int16 *)(v30 + 26) & 0xC00) == 0)
            {
LABEL_30:
              *(void *)uint64_t v6 = 0;
              *(void *)(v6 + 8) = 0;
LABEL_31:
              *(unsigned char *)(v6 + 16) = 1;
              return result;
            }
          }
        }
LABEL_10:
        *(unsigned char *)uint64_t v6 = 0;
        *(unsigned char *)(v6 + 16) = 0;
        return result;
      }
      if (v13 - 198 >= 3) {
        goto LABEL_10;
      }
      long long v34 = *(_OWORD *)*(void *)(v36[0] + 32);
      uint64_t result = (uint64_t)sub_1CD7878C0((unsigned int *)&v34, (uint64_t)v11, v12);
      if ((result & 7) != 0) {
        goto LABEL_10;
      }
      if (result >> 3 <= (unint64_t)a4)
      {
        if (*(_WORD *)(v36[0] + 24) == 199) {
          goto LABEL_30;
        }
        goto LABEL_10;
      }
      uint64_t v25 = *((void *)&v34 + 1);
      uint64_t v24 = v34;
      uint64_t v27 = (a5 + 1);
      uint64_t v28 = v6;
      uint64_t v26 = a4;
      return sub_1CCF50BD8(v28, v24, v25, v26, v27, 0);
    }
    uint64_t v23 = *(uint64_t **)(v36[0] + 32);
    uint64_t v24 = *v23;
    uint64_t v25 = v23[1];
    uint64_t v26 = ~a4 + (result >> 3);
LABEL_38:
    uint64_t v27 = (a5 + 1);
    uint64_t v28 = v6;
    return sub_1CCF50BD8(v28, v24, v25, v26, v27, 0);
  }
  if (v13 != 172)
  {
    if (v13 != 175) {
      goto LABEL_10;
    }
    uint64_t v15 = *(uint64_t **)(v36[0] + 32);
    uint64_t v16 = v15[5];
    int v17 = *(unsigned __int16 *)(v16 + 24);
    if (v17 != 11 && v17 != 35) {
      goto LABEL_10;
    }
    uint64_t v18 = *(void *)(v16 + 80);
    uint64_t v19 = (unint64_t *)(v18 + 24);
    if (*(_DWORD *)(v18 + 32) >= 0x41u) {
      uint64_t v19 = (unint64_t *)*v19;
    }
    unint64_t v20 = *v19;
    if ((v20 & 7) != 0) {
      goto LABEL_10;
    }
    if (a4 < v20 >> 3) {
      goto LABEL_30;
    }
    uint64_t v24 = *v15;
    uint64_t v25 = v15[1];
    uint64_t v26 = a4 - (v20 >> 3);
    goto LABEL_38;
  }
  uint64_t v21 = (a5 + 1);
  uint64_t result = sub_1CCF50BD8(&v34, **(void **)(v36[0] + 32), *(void *)(*(void *)(v36[0] + 32) + 8), a4, v21, 0);
  if (!(_BYTE)v35) {
    goto LABEL_10;
  }
  uint64_t result = sub_1CCF50BD8(&v32, *(void *)(*(void *)(v36[0] + 32) + 40), *(void *)(*(void *)(v36[0] + 32) + 48), a4, v21, 0);
  if (!(_BYTE)v33) {
    goto LABEL_10;
  }
  if ((void)v34)
  {
    if ((void)v32) {
      goto LABEL_10;
    }
    *(_OWORD *)uint64_t v6 = v34;
    uint64_t v22 = v35;
  }
  else
  {
    *(_OWORD *)uint64_t v6 = v32;
    uint64_t v22 = v33;
  }
  *(void *)(v6 + 16) = v22;
  return result;
}

BOOL sub_1CCF50ECC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  BOOL result = 0;
  if (sub_1CCF4C9B0(a1, a2, a3, (uint64_t)v8, (uint64_t)v7, (uint64_t)&v6, 0))
  {
    uint64_t v4 = *(void *)(a2 + 48);
    if (v4)
    {
      if (!*(void *)(v4 + 32)) {
        return 1;
      }
    }
  }
  return result;
}

uint64_t *sub_1CCF50F28(llvm::APFloatBase **a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  if (!v2) {
    return 0;
  }
  if (*(void *)(v2 + 32)) {
    return 0;
  }
  uint64_t v6 = *(_DWORD **)(a2 + 32);
  uint64_t v7 = *(void *)(*(void *)v6 + 48);
  if (!v7) {
    return 0;
  }
  uint64_t v9 = *(void *)(a2 + 40);
  int v10 = *(llvm **)v9;
  uint64_t v11 = *(void *)(v9 + 8);
  int v12 = v6[2];
  int v13 = 1;
  do
  {
    if (*(_DWORD *)(v7 + 8) == v12)
    {
      if (!v13) {
        return 0;
      }
      --v13;
    }
    uint64_t v7 = *(void *)(v7 + 32);
  }
  while (v7);
  if (v13) {
    return 0;
  }
  if (!(*(unsigned int (**)(llvm::APFloatBase *, uint64_t, llvm *, uint64_t))(*(void *)a1[1] + 1744))(a1[1], 171, v10, v11))return 0; {
  uint64_t v14 = *(void *)(**(void **)(a2 + 32) + 32);
  }
  uint64_t v15 = *(void *)(v14 + 40);
  uint64_t v16 = *(void **)(v14 + 48);
  if (!sub_1CCF40DA4(v15, (uint64_t)v16, 1)) {
    return 0;
  }
  int v17 = *(unsigned __int8 **)(a2 + 64);
  int64_t v37 = v17;
  if (v17) {
    llvm::MetadataTracking::track((uint64_t)&v37, v17, 2);
  }
  int v38 = *(_DWORD *)(a2 + 60);
  uint64_t v18 = *(uint64_t **)(**(void **)(a2 + 32) + 32);
  uint64_t v19 = *v18;
  unint64_t v20 = (void *)v18[1];
  uint64_t v21 = *((void *)*a1 + 104);
  if (v21) {
    __int16 v22 = *(_WORD *)(v21 + 8);
  }
  else {
    __int16 v22 = 0;
  }
  uint64_t v23 = sub_1CD7F3564(*a1, (const char *)0xC9, (uint64_t)&v37, v10, v11, v19, v20, v22);
  uint64_t v25 = v24;
  uint64_t v26 = *((void *)*a1 + 104);
  if (v26) {
    __int16 v27 = *(_WORD *)(v26 + 8);
  }
  else {
    __int16 v27 = 0;
  }
  uint64_t v28 = sub_1CD7F3564(*a1, (const char *)0xC9, (uint64_t)&v37, v10, v11, v15, v16, v27);
  uint64_t v30 = v29;
  sub_1CCEF0788((uint64_t)a1, (uint64_t)v23);
  sub_1CCEF0788((uint64_t)a1, (uint64_t)v28);
  uint64_t v32 = *((void *)*a1 + 104);
  if (v32) {
    LOWORD(v32) = *(_WORD *)(v32 + 8);
  }
  uint64_t v3 = sub_1CCFDED5C((uint64_t)*a1, 171, (const llvm::APInt *)&v37, v10, v11, (uint64_t)v23, v25, v31, (uint64_t)v28, v30, v32);
  if (v37)
  {
    int v33 = *v37;
    if ((v33 - 4) > 0x1E)
    {
      if ((v33 - 3) >= 0xFFFFFFFE) {
        int v36 = v37;
      }
      else {
        int v36 = 0;
      }
      if ((v33 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v35 = (unint64_t)(v36 + 8);
LABEL_36:
        unint64_t v39 = &v37;
        sub_1CC5FA668(v35 + 16, &v39);
        return v3;
      }
      if (v33 == 3) {
        *((void *)v37 + 1) = 0;
      }
    }
    else if ((v37[1] & 0x7F) == 2 || *((_DWORD *)v37 + 3))
    {
      uint64_t v34 = *((void *)v37 + 2);
      if ((v34 & 4) != 0)
      {
        unint64_t v35 = v34 & 0xFFFFFFFFFFFFFFF8;
        if (v35) {
          goto LABEL_36;
        }
      }
    }
  }
  return v3;
}

uint64_t *sub_1CCF511A4(uint64_t *a1, uint64_t a2)
{
  if (sub_1CD802AAC(**(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), 0)) {
    return 0;
  }
  uint64_t v4 = *(_DWORD **)(a2 + 32);
  uint64_t v5 = *(void *)v4;
  uint64_t v6 = *(void *)(*(void *)v4 + 48);
  if (!v6) {
    return 0;
  }
  int v7 = v4[2];
  int v8 = 1;
  do
  {
    if (*(_DWORD *)(v6 + 8) == v7)
    {
      if (!v8) {
        return 0;
      }
      --v8;
    }
    uint64_t v6 = *(void *)(v6 + 32);
  }
  while (v6);
  if (v8
    || !(*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)a1[1] + 1736))(a1[1], a2, *((unsigned int *)a1 + 6)))
  {
    return 0;
  }
  if (!*((unsigned char *)a1 + 34))
  {
    uint64_t v18 = *(uint64_t **)(a2 + 32);
    uint64_t v19 = *v18;
    uint64_t v20 = *(void *)(*v18 + 48);
    if (v20)
    {
      uint64_t v21 = *a1;
      int v22 = 1;
      do
      {
        if (*(_DWORD *)(v20 + 8) == *((_DWORD *)v18 + 2))
        {
          if (!v22) {
            goto LABEL_11;
          }
          --v22;
        }
        uint64_t v20 = *(void *)(v20 + 32);
      }
      while (v20);
      if (!v22)
      {
        uint64_t v23 = *(unsigned __int16 *)(v19 + 24);
        if ((v23 - 174) >= 0xFFFFFFFD)
        {
          unsigned int v102 = *(unsigned __int16 *)(a2 + 24);
          uint64_t v24 = v18[5];
          uint64_t v25 = v18[6];
          uint64_t v26 = (void *)(*(void *)(sub_1CCFD8CD8(v24, v25, 0, 0) + 80) + 24);
          uint64_t v100 = (unsigned __int8 *)&v102;
          __int16 v101 = v26;
          uint64_t v98 = 0;
          LODWORD(v99) = 0;
          uint64_t v97 = 0;
          BOOL v27 = sub_1CCF529E8((uint64_t)&v100, **(void **)(v19 + 32), *(void *)(*(void *)(v19 + 32) + 8), (uint64_t)&v98, &v97);
          uint64_t v28 = *(void *)(v19 + 32);
          if (v27)
          {
            uint64_t v29 = v28 + 40;
          }
          else
          {
            if (!sub_1CCF529E8((uint64_t)&v100, *(void *)(v28 + 40), *(void *)(v28 + 48), (uint64_t)&v98, &v97)) {
              goto LABEL_11;
            }
            uint64_t v29 = *(void *)(v19 + 32);
          }
          uint64_t v90 = *(unsigned int *)(v29 + 8);
          uint64_t v91 = *(void *)v29;
          int v61 = *(unsigned __int8 **)(a2 + 64);
          uint64_t v95 = v61;
          if (v61) {
            llvm::MetadataTracking::track((uint64_t)&v95, v61, 2);
          }
          int v96 = *(_DWORD *)(a2 + 60);
          uint64_t v62 = *(void *)(a2 + 40);
          unint64_t v92 = *(llvm **)v62;
          uint64_t v89 = *(void *)(v62 + 8);
          uint64_t v63 = (uint64_t *)(*(void *)(*(void *)(*(void *)(a2 + 32) + 40) + 40)
                          + 16 * *(unsigned int *)(*(void *)(a2 + 32) + 48));
          uint64_t v64 = *v63;
          uint64_t v65 = v63[1];
          unsigned int v66 = *(_DWORD *)(v97 + 8);
          if (v66 >= 0x41) {
            operator new[]();
          }
          uint64_t v67 = *v26 + *(void *)v97;
          unint64_t v68 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v66;
          if (!v66) {
            unint64_t v68 = 0;
          }
          unsigned int v94 = *(_DWORD *)(v97 + 8);
          int v93 = (unsigned __int8 **)(v68 & v67);
          uint64_t v69 = sub_1CD7EBB14(v21, (llvm::LLVMContext *)&v93, (const llvm::APInt *)&v95, v64, v65, 0, 0);
          if (v94 >= 0x41 && v93)
          {
            uint64_t v72 = v69;
            uint64_t v73 = v70;
            MEMORY[0x1D25D9CB0](v93, 0x1000C8000313F17);
            uint64_t v70 = v73;
            uint64_t v69 = v72;
          }
          uint64_t v74 = *(void *)(v21 + 832);
          if (v74) {
            LOWORD(v74) = *(_WORD *)(v74 + 8);
          }
          uint64_t v75 = sub_1CCFDED5C(v21, v102, (const llvm::APInt *)&v95, v92, v89, (uint64_t)v98, v99, v71, v69, v70, v74);
          uint64_t v77 = *(void *)(v21 + 832);
          uint64_t v79 = v78;
          uint64_t v80 = (uint64_t)v75;
          if (v77) {
            LOWORD(v77) = *(_WORD *)(v77 + 8);
          }
          int v81 = sub_1CCFDED5C(v21, v102, (const llvm::APInt *)&v95, v92, v89, v91, v90, v76, v24, v25, v77);
          uint64_t v84 = *(void *)(v21 + 832);
          if (v84) {
            LOWORD(v84) = *(_WORD *)(v84 + 8);
          }
          unsigned int v55 = sub_1CCFDED5C(v21, v23, (const llvm::APInt *)&v95, v92, v89, v80, v79, v83, (uint64_t)v81, v82, v84);
          if (!v95) {
            goto LABEL_91;
          }
          int v85 = *v95;
          if ((v85 - 4) > 0x1E)
          {
            if ((v85 - 3) >= 0xFFFFFFFE) {
              uint64_t v86 = v95;
            }
            else {
              uint64_t v86 = 0;
            }
            if ((v85 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v87 = (unint64_t)(v86 + 8);
LABEL_98:
              int v93 = &v95;
              sub_1CC5FA668(v87 + 16, &v93);
              goto LABEL_91;
            }
            if (v85 == 3) {
              *((void *)v95 + 1) = 0;
            }
          }
          else if ((v95[1] & 0x7F) == 2 || *((_DWORD *)v95 + 3))
          {
            uint64_t v88 = *((void *)v95 + 2);
            if ((v88 & 4) != 0)
            {
              unint64_t v87 = v88 & 0xFFFFFFFFFFFFFFF8;
              if (v87) {
                goto LABEL_98;
              }
            }
          }
LABEL_91:
          if (v55) {
            return v55;
          }
        }
      }
    }
  }
LABEL_11:
  int v10 = *(unsigned __int16 *)(v5 + 24);
  if ((v10 - 171) >= 3 && (v10 != 56 || *(_WORD *)(a2 + 24) != 175)) {
    return 0;
  }
  uint64_t v11 = *(void **)(v5 + 32);
  uint64_t v12 = v11[5];
  int v13 = *(unsigned __int16 *)(v12 + 24);
  BOOL v14 = v13 == 35 || v13 == 11;
  if (!v14 || (*(unsigned char *)(v12 + 26) & 8) != 0) {
    return 0;
  }
  int v15 = *(unsigned __int16 *)(*v11 + 24);
  if ((v15 - 175) > 2
    || ((int v16 = *(unsigned __int16 *)(*(void *)(*(void *)(*v11 + 32) + 40) + 24), v16 != 35)
      ? (BOOL v17 = v16 == 11)
      : (BOOL v17 = 1),
        !v17))
  {
    if (v15 != 50 && v15 != 190) {
      return 0;
    }
    goto LABEL_43;
  }
  if (v15 == 190 || v15 == 50)
  {
LABEL_43:
    uint64_t v30 = *(void *)(a2 + 48);
    if (!v30 || *(void *)(v30 + 32)) {
      goto LABEL_45;
    }
    return 0;
  }
LABEL_45:
  uint64_t v31 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v100 = v31;
  if (v31)
  {
    llvm::MetadataTracking::track((uint64_t)&v100, v31, 2);
    uint64_t v11 = *(void **)(v5 + 32);
    uint64_t v12 = v11[5];
  }
  LODWORD(v101) = *(_DWORD *)(a2 + 60);
  uint64_t v33 = *(void *)(a2 + 32);
  uint64_t v32 = *(void *)(a2 + 40);
  uint64_t v34 = *(llvm **)v32;
  uint64_t v35 = *(void *)(v32 + 8);
  uint64_t v36 = v11[6];
  uint64_t v37 = *(void *)(v33 + 40);
  uint64_t v38 = *(void *)(v33 + 48);
  uint64_t v39 = *(void *)(*a1 + 832);
  if (v39) {
    LOWORD(v39) = *(_WORD *)(v39 + 8);
  }
  uint64_t v41 = sub_1CCFDED5C(*a1, *(unsigned __int16 *)(a2 + 24), (const llvm::APInt *)&v100, v34, v35, v12, v36, v9, v37, v38, v39);
  uint64_t v43 = v42;
  unint64_t v44 = *(uint64_t **)(v5 + 32);
  uint64_t v45 = *v44;
  uint64_t v46 = v44[1];
  uint64_t v47 = *(void *)(a2 + 32);
  uint64_t v48 = *(void *)(v47 + 40);
  uint64_t v49 = *(void *)(v47 + 48);
  uint64_t v50 = *(void *)(*a1 + 832);
  if (v50) {
    LOWORD(v50) = *(_WORD *)(v50 + 8);
  }
  int64_t v52 = sub_1CCFDED5C(*a1, *(unsigned __int16 *)(a2 + 24), (const llvm::APInt *)&v100, v34, v35, v45, v46, v40, v48, v49, v50);
  uint64_t v54 = *(void *)(*a1 + 832);
  if (v54) {
    LOWORD(v54) = *(_WORD *)(v54 + 8);
  }
  unsigned int v55 = sub_1CCFDED5C(*a1, *(unsigned __int16 *)(v5 + 24), (const llvm::APInt *)&v100, v34, v35, (uint64_t)v52, v51, v53, (uint64_t)v41, v43, v54);
  if (v100)
  {
    int v56 = *v100;
    if ((v56 - 4) > 0x1E)
    {
      if ((v56 - 3) >= 0xFFFFFFFE) {
        uint64_t v60 = v100;
      }
      else {
        uint64_t v60 = 0;
      }
      if ((v56 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v58 = (unint64_t)(v60 + 8);
LABEL_67:
        uint64_t v98 = &v100;
        sub_1CC5FA668(v58 + 16, &v98);
        return v55;
      }
      if (v56 == 3) {
        *((void *)v100 + 1) = 0;
      }
    }
    else if ((v100[1] & 0x7F) == 2 || *((_DWORD *)v100 + 3))
    {
      uint64_t v57 = *((void *)v100 + 2);
      if ((v57 & 4) != 0)
      {
        unint64_t v58 = v57 & 0xFFFFFFFFFFFFFFF8;
        if (v58) {
          goto LABEL_67;
        }
      }
    }
  }
  return v55;
}

void sub_1CCF51844()
{
}

_DWORD *sub_1CCF51858(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  *(void *)BOOL result = &unk_1F2641610;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1CCF518A4(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F2641610;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL sub_1CCF518D4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = *(void *)(*(void *)a2 + 80);
  unsigned int v16 = *(_DWORD *)(v5 + 32);
  if (v16 > 0x40) {
    operator new[]();
  }
  long long __src = *(void **)(v5 + 24);
  uint64_t v6 = *(void *)(v4 + 80);
  unsigned int v14 = *(_DWORD *)(v6 + 32);
  if (v14 > 0x40) {
    operator new[]();
  }
  uint64_t v13 = *(void *)(v6 + 24);
  sub_1CCF4FF84((uint64_t)&__src, (uint64_t)&v13, 1);
  unsigned int v7 = v16;
  if (v16 >= 0x41) {
    operator new[]();
  }
  int v8 = __src;
  unint64_t v9 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v16;
  if (!v16) {
    unint64_t v9 = 0;
  }
  BOOL v10 = (v9 & ((unint64_t)__src + v13)) >= *(unsigned int *)(a1 + 8);
  if (v14 >= 0x41 && v13 != 0) {
    MEMORY[0x1D25D9CB0](v13, 0x1000C8000313F17);
  }
  if (v7 >= 0x41 && v8) {
    MEMORY[0x1D25D9CB0](v8, 0x1000C8000313F17);
  }
  return v10;
}

void sub_1CCF51B6C()
{
}

_DWORD *sub_1CCF51B80(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  *(void *)BOOL result = &unk_1F2641658;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1CCF51BCC(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F2641658;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL sub_1CCF51BFC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = *(void *)(*(void *)a2 + 80);
  unsigned int v16 = *(_DWORD *)(v5 + 32);
  if (v16 > 0x40) {
    operator new[]();
  }
  long long __src = *(void **)(v5 + 24);
  uint64_t v6 = *(void *)(v4 + 80);
  unsigned int v14 = *(_DWORD *)(v6 + 32);
  if (v14 > 0x40) {
    operator new[]();
  }
  uint64_t v13 = *(void *)(v6 + 24);
  sub_1CCF4FF84((uint64_t)&__src, (uint64_t)&v13, 1);
  unsigned int v7 = v16;
  if (v16 >= 0x41) {
    operator new[]();
  }
  int v8 = __src;
  unint64_t v9 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v16;
  if (!v16) {
    unint64_t v9 = 0;
  }
  BOOL v10 = (v9 & ((unint64_t)__src + v13)) < *(unsigned int *)(a1 + 8);
  if (v14 >= 0x41 && v13 != 0) {
    MEMORY[0x1D25D9CB0](v13, 0x1000C8000313F17);
  }
  if (v7 >= 0x41 && v8) {
    MEMORY[0x1D25D9CB0](v8, 0x1000C8000313F17);
  }
  return v10;
}

void sub_1CCF51E90()
{
}

__n128 sub_1CCF51EA4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F26416A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CCF51EF0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F26416A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1CCF51F20(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = *(void *)(*(void *)a2 + 80);
  unsigned int v20 = *(_DWORD *)(v5 + 32);
  if (v20 > 0x40) {
    operator new[]();
  }
  long long __src = *(void **)(v5 + 24);
  uint64_t v6 = *(void *)(v4 + 80);
  unsigned int v18 = *(_DWORD *)(v6 + 32);
  if (v18 > 0x40) {
    operator new[]();
  }
  BOOL v17 = *(void **)(v6 + 24);
  unsigned int v7 = &v17;
  sub_1CCF4FF84((uint64_t)&__src, (uint64_t)&v17, 1);
  unint64_t v8 = *(unsigned int *)(a1 + 8);
  if (v18 >= 0x41)
  {
    int v9 = 0;
    int64_t v10 = ((unint64_t)v18 + 63) >> 6;
    do
    {
      if (v10-- < 1) {
        break;
      }
      unint64_t v12 = v17[v10];
      v9 += __clz(v12);
    }
    while (!v12);
    unsigned int v13 = v18 | 0xFFFFFFC0;
    if ((v18 & 0x3F) == 0) {
      unsigned int v13 = 0;
    }
    unsigned int v7 = v17;
    if (v18 - v9 - v13 > 0x40) {
      goto LABEL_15;
    }
  }
  if (*v7 >= v8 - *(void *)(a1 + 16))
  {
LABEL_15:
    if (v20 >= 0x41) {
      operator new[]();
    }
    unint64_t v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v20;
    if (!v20) {
      unint64_t v15 = 0;
    }
    BOOL v14 = (v15 & ((unint64_t)v17 + (void)__src)) >= v8;
  }
  else
  {
    BOOL v14 = 0;
  }
  if (v18 >= 0x41 && v17) {
    MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
  }
  if (v20 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  return v14;
}

void sub_1CCF52228()
{
}

__n128 sub_1CCF5223C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F26416E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CCF52288(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F26416E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1CCF522B8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = *(void *)(*(void *)a2 + 80);
  unsigned int v20 = *(_DWORD *)(v5 + 32);
  if (v20 > 0x40) {
    operator new[]();
  }
  long long __src = *(void **)(v5 + 24);
  uint64_t v6 = *(void *)(v4 + 80);
  unsigned int v18 = *(_DWORD *)(v6 + 32);
  if (v18 > 0x40) {
    operator new[]();
  }
  BOOL v17 = *(void **)(v6 + 24);
  unsigned int v7 = &v17;
  sub_1CCF4FF84((uint64_t)&__src, (uint64_t)&v17, 1);
  unint64_t v8 = *(unsigned int *)(a1 + 8);
  if (v18 >= 0x41)
  {
    int v9 = 0;
    int64_t v10 = ((unint64_t)v18 + 63) >> 6;
    do
    {
      if (v10-- < 1) {
        break;
      }
      unint64_t v12 = v17[v10];
      v9 += __clz(v12);
    }
    while (!v12);
    unsigned int v13 = v18 | 0xFFFFFFC0;
    if ((v18 & 0x3F) == 0) {
      unsigned int v13 = 0;
    }
    unsigned int v7 = v17;
    if (v18 - v9 - v13 > 0x40) {
      goto LABEL_15;
    }
  }
  if (*v7 >= v8 - *(void *)(a1 + 16))
  {
LABEL_15:
    if (v20 >= 0x41) {
      operator new[]();
    }
    unint64_t v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v20;
    if (!v20) {
      unint64_t v15 = 0;
    }
    BOOL v14 = (v15 & ((unint64_t)v17 + (void)__src)) < v8;
  }
  else
  {
    BOOL v14 = 0;
  }
  if (v18 >= 0x41 && v17) {
    MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
  }
  if (v20 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  return v14;
}

void sub_1CCF525BC()
{
}

__n128 sub_1CCF525D0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F2641730;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CCF5261C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F2641730;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CCF5264C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = (unsigned __int8 *)(a1 + 8);
  uint64_t v4 = *a3;
  uint64_t v5 = *(void *)(*(void *)a2 + 80);
  unsigned int v23 = *(_DWORD *)(v5 + 32);
  if (v23 > 0x40) {
    operator new[]();
  }
  __s1 = *(void **)(v5 + 24);
  uint64_t v6 = *(void *)(v4 + 80);
  unsigned int v21 = *(_DWORD *)(v6 + 32);
  if (v21 > 0x40) {
    operator new[]();
  }
  unsigned int __s2 = *(void **)(v6 + 24);
  sub_1CCF4FF84((uint64_t)&__s1, (uint64_t)&__s2, 0);
  int v9 = sub_1CD3E12F4(v3, v7, v8);
  unsigned int v10 = v23;
  if (v23 < 0x41)
  {
    uint64_t v11 = __s1;
    if (__s1 < v9)
    {
      BOOL v12 = __s1 == __s2;
      goto LABEL_17;
    }
LABEL_20:
    uint64_t v18 = 0;
    goto LABEL_21;
  }
  int v13 = 0;
  int64_t v14 = ((unint64_t)v23 + 63) >> 6;
  uint64_t v11 = __s1;
  do
  {
    if (v14-- < 1) {
      break;
    }
    unint64_t v16 = *((void *)__s1 + v14);
    v13 += __clz(v16);
  }
  while (!v16);
  unsigned int v17 = v23 | 0xFFFFFFC0;
  if ((v23 & 0x3F) == 0) {
    unsigned int v17 = 0;
  }
  if (v23 - v13 - v17 >= 0x41 || *(void *)__s1 >= (unint64_t)v9) {
    goto LABEL_20;
  }
  BOOL v12 = memcmp(__s1, __s2, (((unint64_t)v23 + 63) >> 3) & 0x3FFFFFF8) == 0;
LABEL_17:
  uint64_t v18 = v12;
LABEL_21:
  if (v21 >= 0x41 && __s2) {
    MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
  }
  if (v10 >= 0x41 && v11) {
    MEMORY[0x1D25D9CB0](v11, 0x1000C8000313F17);
  }
  return v18;
}

void sub_1CCF52838()
{
}

_DWORD *sub_1CCF5284C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F2641778;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1CCF52898(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F2641778;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL sub_1CCF528C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)a2 + 80);
  uint64_t v4 = (unint64_t *)(v3 + 24);
  uint64_t v5 = *(void *)(*(void *)a3 + 80);
  unint64_t v6 = *(unsigned int *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(v3 + 32);
  BOOL v8 = (unint64_t *)(v3 + 24);
  if (v7 >= 0x41)
  {
    int v9 = 0;
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    do
    {
      BOOL v11 = v10-- < 1;
      if (v11) {
        break;
      }
      unint64_t v12 = *(void *)(*v4 + 8 * v10);
      v9 += __clz(v12);
    }
    while (!v12);
    BOOL result = 0;
    int v14 = v7 | 0xFFFFFFC0;
    if ((v7 & 0x3F) == 0) {
      int v14 = 0;
    }
    if ((v7 - v9 - v14) > 0x40) {
      return result;
    }
    BOOL v8 = (unint64_t *)*v4;
  }
  if (*v8 >= v6) {
    return 0;
  }
  unint64_t v15 = (unint64_t *)(v5 + 24);
  uint64_t v16 = *(unsigned int *)(v5 + 32);
  unsigned int v17 = v15;
  if (v16 < 0x41)
  {
LABEL_18:
    if (*v17 < v6)
    {
      if (v7 >= 0x41) {
        uint64_t v4 = (unint64_t *)*v4;
      }
      int v22 = (unint64_t *)*v4;
      if (v16 >= 0x41) {
        unint64_t v15 = (unint64_t *)*v15;
      }
      return (unint64_t)v22 <= *v15;
    }
    return 0;
  }
  int v18 = 0;
  int64_t v19 = (unint64_t)(v16 + 63) >> 6;
  do
  {
    BOOL v11 = v19-- < 1;
    if (v11) {
      break;
    }
    unint64_t v20 = *(void *)(*v15 + 8 * v19);
    v18 += __clz(v20);
  }
  while (!v20);
  BOOL result = 0;
  int v21 = v16 | 0xFFFFFFC0;
  if ((v16 & 0x3F) == 0) {
    int v21 = 0;
  }
  if ((v16 - v18 - v21) <= 0x40)
  {
    unsigned int v17 = (unint64_t *)*v15;
    goto LABEL_18;
  }
  return result;
}

BOOL sub_1CCF529E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  v24[0] = a2;
  v24[1] = a3;
  if (**(_DWORD **)a1 != *(unsigned __int16 *)(a2 + 24)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 48);
  if (!v6) {
    return 0;
  }
  int v10 = 1;
  do
  {
    if (*(_DWORD *)(v6 + 8) == a3)
    {
      if (!v10) {
        return 0;
      }
      --v10;
    }
    uint64_t v6 = *(void *)(v6 + 32);
  }
  while (v6);
  if (v10) {
    return 0;
  }
  uint64_t v11 = sub_1CCFD8CD8(*(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48), 0, 0);
  if (!v11) {
    return 0;
  }
  int v14 = *(uint64_t **)(a2 + 32);
  uint64_t v15 = *v14;
  *(_DWORD *)(a4 + 8) = *((_DWORD *)v14 + 2);
  *(void *)a4 = v15;
  uint64_t v16 = *(void *)(v11 + 80);
  unsigned int v17 = (void *)(v16 + 24);
  *a5 = v16 + 24;
  unsigned int v18 = *(_DWORD *)(v16 + 32);
  uint64_t v19 = *(void *)(a1 + 8);
  if (v18 != *(_DWORD *)(v19 + 8)) {
    return 0;
  }
  if (v18 >= 0x41) {
    operator new[]();
  }
  uint64_t v22 = *(void *)v19 + *v17;
  unint64_t v23 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v18;
  if (!v18) {
    unint64_t v23 = 0;
  }
  return (v23 & v22) < (unint64_t)sub_1CD7878C0((unsigned int *)v24, v12, v13);
}

uint64_t sub_1CCF52C14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_1CCFD8CD8(*(void *)(*(void *)(a1 + 32) + 40), *(void *)(*(void *)(a1 + 32) + 48), 0, 0);
  if (!v7) {
    return 0;
  }
  BOOL v8 = *(unsigned __int8 **)(a1 + 64);
  uint64_t v64 = v8;
  if (v8) {
    llvm::MetadataTracking::track((uint64_t)&v64, v8, 2);
  }
  int v65 = *(_DWORD *)(a1 + 60);
  uint64_t v9 = **(void **)(a1 + 32);
  if (*(_WORD *)(v9 + 24) != 58) {
    goto LABEL_6;
  }
  int v10 = *(uint64_t **)(v9 + 32);
  uint64_t v11 = *v10;
  int v12 = *(unsigned __int16 *)(*v10 + 24);
  if ((v12 & 0xFFFE) != 0xC6) {
    goto LABEL_6;
  }
  uint64_t v61 = *((unsigned int *)v10 + 2);
  uint64_t v19 = v10[5];
  uint64_t v20 = v10[6];
  long long v63 = *(_OWORD *)(*(void *)(**(void **)(v11 + 32) + 40) + 16 * *(unsigned int *)(*(void *)(v11 + 32) + 8));
  unsigned int v21 = sub_1CD3E12F4((unsigned __int8 *)&v63, (uint64_t)v8, v6);
  uint64_t v22 = sub_1CCFD8CD8(v19, v20, 0, 0);
  if (v22)
  {
    uint64_t v25 = *(void *)(v22 + 80);
    uint64_t v26 = (unint64_t *)(v25 + 24);
    uint64_t v27 = *(unsigned int *)(v25 + 32);
    if (v12 == 198)
    {
      unsigned int v28 = v27 - 1;
      if (v27 > 0x40)
      {
        if ((*(void *)(*v26 + 8 * (v28 >> 6)) >> v28))
        {
          int v30 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)(v25 + 24));
        }
        else
        {
          int v57 = 0;
          int64_t v58 = (unint64_t)(v27 + 63) >> 6;
          do
          {
            BOOL v39 = v58-- < 1;
            if (v39) {
              break;
            }
            unint64_t v59 = *(void *)(*v26 + 8 * v58);
            v57 += __clz(v59);
          }
          while (!v59);
          int v60 = v27 | 0xFFFFFFC0;
          if ((v27 & 0x3F) == 0) {
            int v60 = 0;
          }
          int v30 = v57 + v60;
        }
      }
      else
      {
        unint64_t v29 = *v26;
        if ((*v26 >> v28))
        {
          if (v27) {
            int v30 = __clz(~(v29 << -(char)v27));
          }
          else {
            int v30 = 0;
          }
        }
        else
        {
          int v30 = v27 + __clz(v29) - 64;
        }
      }
      unsigned int v31 = v27 - v30 + 1;
    }
    else
    {
      if (v27 > 0x40)
      {
        int v37 = 0;
        int64_t v38 = (unint64_t)(v27 + 63) >> 6;
        do
        {
          BOOL v39 = v38-- < 1;
          if (v39) {
            break;
          }
          unint64_t v40 = *(void *)(*v26 + 8 * v38);
          v37 += __clz(v40);
        }
        while (!v40);
        int v41 = v27 | 0xFFFFFFC0;
        if ((v27 & 0x3F) == 0) {
          int v41 = 0;
        }
        int v36 = v37 + v41;
      }
      else
      {
        int v36 = v27 + __clz(*v26) - 64;
      }
      unsigned int v31 = v27 - v36;
    }
    if (v31 > v21) {
      goto LABEL_6;
    }
    unsigned int v42 = sub_1CD3E12F4((unsigned __int8 *)&v63, v23, v24);
    unsigned int v43 = *(_DWORD *)(v25 + 32);
    if (v42 > 0x40)
    {
      if (v43 != v42) {
        operator new[]();
      }
      sub_1CD0463BC((uint64_t)&v62, v25 + 24);
    }
    else
    {
      if (v43 >= 0x41) {
        uint64_t v26 = (unint64_t *)*v26;
      }
      unint64_t v44 = *v26;
      DWORD2(v62) = v42;
      unint64_t v45 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v42;
      if (!v42) {
        unint64_t v45 = 0;
      }
      *(void *)&long long v62 = v45 & v44;
    }
    uint64_t v33 = sub_1CD7EBB14(a2, (llvm::LLVMContext *)&v62, (const llvm::APInt *)&v64, v63, *((uint64_t *)&v63 + 1), 0, 0);
    uint64_t v34 = v23;
    if (DWORD2(v62) >= 0x41 && (void)v62) {
      MEMORY[0x1D25D9CB0](v62, 0x1000C8000313F17);
    }
  }
  else if (*(unsigned __int16 *)(v11 + 24) != *(unsigned __int16 *)(v19 + 24) {
         || (uint64_t v32 = *(unsigned int **)(v19 + 32),
  }
             uint64_t v33 = *(void *)v32,
             uint64_t v34 = v32[2],
             uint64_t v35 = (unsigned __int8 *)(*(void *)(*(void *)v32 + 40) + 16 * v34),
             v63 != *v35)
         || !(_BYTE)v63 && *((void *)&v63 + 1) != *((void *)v35 + 1))
  {
LABEL_6:
    uint64_t v13 = 0;
    goto LABEL_7;
  }
  long long v62 = *(_OWORD *)(*(void *)(v11 + 40) + 16 * v61);
  if (sub_1CD3E12F4((unsigned __int8 *)&v62, v23, v24) != (llvm::Type *)(2 * v21)) {
    goto LABEL_6;
  }
  uint64_t v47 = *(void *)(v7 + 80);
  uint64_t v48 = (void *)(v47 + 24);
  if (*(_DWORD *)(v47 + 32) >= 0x41u) {
    uint64_t v48 = (void *)*v48;
  }
  if (*(_DWORD *)v48 != v21) {
    goto LABEL_6;
  }
  uint64_t v49 = v12 == 198 ? 160 : 159;
  if (!(_BYTE)v63
    || v63 != 1 && !*(void *)(a3 + 8 * v63 + 96)
    || (*(unsigned char *)(a3 + 390 * v63 + v49 + 3862) & 0xFB) != 0)
  {
    goto LABEL_6;
  }
  uint64_t v50 = *(uint64_t **)(v11 + 32);
  uint64_t v51 = *v50;
  uint64_t v52 = v50[1];
  uint64_t v53 = *(void *)(a2 + 832);
  if (v53) {
    LOWORD(v53) = *(_WORD *)(v53 + 8);
  }
  unsigned int v55 = sub_1CCFDED5C(a2, v49, (const llvm::APInt *)&v64, (llvm *)v63, *((uint64_t *)&v63 + 1), v51, v52, v46, v33, v34, v53);
  if (*(_WORD *)(a1 + 24) == 176) {
    uint64_t v56 = sub_1CD7EB744(a2, (uint64_t)v55, v54, (uint64_t)&v64, v62, *((uint64_t *)&v62 + 1));
  }
  else {
    uint64_t v56 = sub_1CD7EB80C(a2, (uint64_t)v55, v54, (uint64_t)&v64, v62, *((uint64_t *)&v62 + 1));
  }
  uint64_t v13 = v56;
LABEL_7:
  if (v64)
  {
    int v14 = *v64;
    if ((v14 - 4) > 0x1E)
    {
      if ((v14 - 3) >= 0xFFFFFFFE) {
        unsigned int v18 = v64;
      }
      else {
        unsigned int v18 = 0;
      }
      if ((v14 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v16 = (unint64_t)(v18 + 8);
LABEL_21:
        *(void *)&long long v63 = &v64;
        sub_1CC5FA668(v16 + 16, &v63);
        return v13;
      }
      if (v14 == 3) {
        *((void *)v64 + 1) = 0;
      }
    }
    else if ((v64[1] & 0x7F) == 2 || *((_DWORD *)v64 + 3))
    {
      uint64_t v15 = *((void *)v64 + 2);
      if ((v15 & 4) != 0)
      {
        unint64_t v16 = v15 & 0xFFFFFFFFFFFFFFF8;
        if (v16) {
          goto LABEL_21;
        }
      }
    }
  }
  return v13;
}

void sub_1CCF53138()
{
}

__n128 sub_1CCF5314C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F26417C0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_1CCF531A8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F26417C0;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CCF531E8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = *(uint64_t **)(a1 + 24);
  uint64_t v6 = *(void *)(*(void *)a2 + 80);
  unsigned int v24 = *(_DWORD *)(v6 + 32);
  if (v24 > 0x40) {
    operator new[]();
  }
  long long __src = *(void **)(v6 + 24);
  uint64_t v7 = *(void *)(v4 + 80);
  unsigned int v22 = *(_DWORD *)(v7 + 32);
  if (v22 > 0x40) {
    operator new[]();
  }
  uint64_t v21 = *(void *)(v7 + 24);
  sub_1CCF4FF84((uint64_t)&__src, (uint64_t)&v21, 1);
  unsigned int v8 = v24;
  if (v24 >= 0x41) {
    operator new[]();
  }
  uint64_t v9 = __src;
  uint64_t v10 = v21;
  unint64_t v11 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v24;
  if (!v24) {
    unint64_t v11 = 0;
  }
  unint64_t v12 = v11 & ((unint64_t)__src + v21);
  unsigned int v13 = **(_DWORD **)(a1 + 8);
  unint64_t v14 = v12;
  if (v12 >= v13) {
    LODWORD(v12) = v13 - 1;
  }
  uint64_t v15 = *(void *)(a1 + 16);
  unsigned int v17 = sub_1CD7EBF14(*v5, v12, *(const llvm::APInt **)(a1 + 32), **(llvm ***)(a1 + 40), *(void *)(*(void *)(a1 + 40) + 8), 0, 0);
  unsigned int v18 = *(_DWORD *)(v15 + 8);
  if (v18 >= *(_DWORD *)(v15 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v19 = (uint64_t **)(*(void *)v15 + 16 * v18);
  unint64_t *v19 = v17;
  v19[1] = v16;
  ++*(_DWORD *)(v15 + 8);
  if (v8 >= 0x41 && v14) {
    MEMORY[0x1D25D9CB0](v14, 0x1000C8000313F17);
  }
  if (v22 >= 0x41 && v10) {
    MEMORY[0x1D25D9CB0](v10, 0x1000C8000313F17);
  }
  if (v8 >= 0x41 && v9) {
    MEMORY[0x1D25D9CB0](v9, 0x1000C8000313F17);
  }
  return 1;
}

void sub_1CCF53500()
{
}

_DWORD *sub_1CCF53514(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F2641808;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1CCF53560(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F2641808;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL sub_1CCF53590(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = *(void *)(*(void *)a2 + 80);
  unsigned int v16 = *(_DWORD *)(v5 + 32);
  if (v16 > 0x40) {
    operator new[]();
  }
  long long __src = *(void **)(v5 + 24);
  uint64_t v6 = *(void *)(v4 + 80);
  unsigned int v14 = *(_DWORD *)(v6 + 32);
  if (v14 > 0x40) {
    operator new[]();
  }
  uint64_t v13 = *(void *)(v6 + 24);
  sub_1CCF4FF84((uint64_t)&__src, (uint64_t)&v13, 1);
  unsigned int v7 = v16;
  if (v16 >= 0x41) {
    operator new[]();
  }
  unsigned int v8 = __src;
  unint64_t v9 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v16;
  if (!v16) {
    unint64_t v9 = 0;
  }
  BOOL v10 = (v9 & ((unint64_t)__src + v13)) >= *(unsigned int *)(a1 + 8);
  if (v14 >= 0x41 && v13 != 0) {
    MEMORY[0x1D25D9CB0](v13, 0x1000C8000313F17);
  }
  if (v7 >= 0x41 && v8) {
    MEMORY[0x1D25D9CB0](v8, 0x1000C8000313F17);
  }
  return v10;
}

void sub_1CCF53828()
{
}

_DWORD *sub_1CCF5383C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F2641850;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1CCF53888(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F2641850;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL sub_1CCF538B8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = *(void *)(*(void *)a2 + 80);
  unsigned int v16 = *(_DWORD *)(v5 + 32);
  if (v16 > 0x40) {
    operator new[]();
  }
  long long __src = *(void **)(v5 + 24);
  uint64_t v6 = *(void *)(v4 + 80);
  unsigned int v14 = *(_DWORD *)(v6 + 32);
  if (v14 > 0x40) {
    operator new[]();
  }
  uint64_t v13 = *(void *)(v6 + 24);
  sub_1CCF4FF84((uint64_t)&__src, (uint64_t)&v13, 1);
  unsigned int v7 = v16;
  if (v16 >= 0x41) {
    operator new[]();
  }
  unsigned int v8 = __src;
  unint64_t v9 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v16;
  if (!v16) {
    unint64_t v9 = 0;
  }
  BOOL v10 = (v9 & ((unint64_t)__src + v13)) < *(unsigned int *)(a1 + 8);
  if (v14 >= 0x41 && v13 != 0) {
    MEMORY[0x1D25D9CB0](v13, 0x1000C8000313F17);
  }
  if (v7 >= 0x41 && v8) {
    MEMORY[0x1D25D9CB0](v8, 0x1000C8000313F17);
  }
  return v10;
}

void sub_1CCF53B4C()
{
}

__n128 sub_1CCF53B60(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F2641898;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CCF53BAC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F2641898;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CCF53BDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)a2 + 80);
  long long v3 = (void *)(v2 + 24);
  uint64_t v4 = *(unsigned int *)(v2 + 32);
  if (v4 >= 0x41)
  {
    int v5 = 0;
    int64_t v6 = (unint64_t)(v4 + 63) >> 6;
    do
    {
      if (v6-- < 1) {
        break;
      }
      unint64_t v8 = *(void *)(*v3 + 8 * v6);
      v5 += __clz(v8);
    }
    while (!v8);
    int v9 = v4 | 0xFFFFFFC0;
    if ((v4 & 0x3F) == 0) {
      int v9 = 0;
    }
    if ((v4 - v5 - v9) > 0x40)
    {
      BOOL v10 = 1;
      goto LABEL_11;
    }
    long long v3 = (void *)*v3;
  }
  BOOL v10 = *v3 >= (unint64_t)*(unsigned int *)(a1 + 8);
LABEL_11:
  **(unsigned char **)(a1 + 16) |= v10;
  return 1;
}

uint64_t *sub_1CCF53C6C(uint64_t a1, uint64_t a2, BOOL a3)
{
  long long v3 = *(uint64_t **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v6 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v7 = v3[5];
  uint64_t v8 = v3[6];
  uint64_t v9 = v3[10];
  uint64_t v10 = v3[11];
  uint64_t v11 = *(void *)(v4 + 8);
  int v57 = *(llvm **)v4;
  uint64_t v58 = v11;
  unint64_t v12 = (unsigned __int8 *)(*(void *)(v6 + 40) + 16 * v5);
  if (v57 != *v12) {
    return 0;
  }
  uint64_t v13 = *((void *)v12 + 1);
  BOOL v14 = (_BYTE)v57 || v11 == v13;
  if (!v14 || sub_1CD3E12F4((unsigned __int8 *)&v57, a2, a3) != (llvm::Type *)1) {
    return 0;
  }
  BOOL v20 = v6 == v7 && v5 == v8;
  if (v20 || (int v28 = sub_1CD802BA8(v7, v8, 1)) != 0)
  {
    uint64_t v21 = *(unsigned __int8 **)(a1 + 64);
    unsigned int v55 = v21;
    if (v21) {
      llvm::MetadataTracking::track((uint64_t)&v55, v21, 2);
    }
    int v56 = *(_DWORD *)(a1 + 60);
    uint64_t v22 = *(void *)(a2 + 832);
    if (v22) {
      LOWORD(v22) = *(_WORD *)(v22 + 8);
    }
    uint64_t v23 = sub_1CCFDED5C(a2, 172, (const llvm::APInt *)&v55, v57, v58, v6, v5, v19, v9, v10, v22);
  }
  else
  {
    if ((v6 != v9 || v5 != v10) && !sub_1CD7FF12C(v9, v10, 1))
    {
      if (sub_1CD802BA8(v9, v10, 1))
      {
        uint64_t v33 = *(unsigned __int8 **)(a1 + 64);
        unsigned int v55 = v33;
        if (v33) {
          llvm::MetadataTracking::track((uint64_t)&v55, v33, 2);
        }
        int v56 = *(_DWORD *)(a1 + 60);
        uint64_t v35 = sub_1CD7EBB8C(a2, (const llvm::APInt *)&v55, v6, v5, v57, v58);
        uint64_t v37 = v36;
        if (!v55) {
          goto LABEL_53;
        }
        int v38 = *v55;
        if ((v38 - 4) > 0x1E)
        {
          if ((v38 - 3) >= 0xFFFFFFFE) {
            uint64_t v49 = v55;
          }
          else {
            uint64_t v49 = 0;
          }
          if ((v38 - 3) < 0xFFFFFFFE)
          {
            if (v38 == 3) {
              *((void *)v55 + 1) = 0;
            }
            goto LABEL_53;
          }
          unint64_t v50 = (unint64_t)(v49 + 8);
        }
        else
        {
          if ((v55[1] & 0x7F) != 2 && !*((_DWORD *)v55 + 3)) {
            goto LABEL_53;
          }
          uint64_t v53 = *((void *)v55 + 2);
          if ((v53 & 4) == 0) {
            goto LABEL_53;
          }
          unint64_t v50 = v53 & 0xFFFFFFFFFFFFFFF8;
          if (!v50) {
            goto LABEL_53;
          }
        }
        unint64_t v59 = &v55;
        sub_1CC5FA668(v50 + 16, &v59);
LABEL_53:
        BOOL v39 = *(unsigned __int8 **)(a1 + 64);
        unsigned int v55 = v39;
        if (v39) {
          llvm::MetadataTracking::track((uint64_t)&v55, v39, 2);
        }
        int v56 = *(_DWORD *)(a1 + 60);
        uint64_t v40 = *(void *)(a2 + 832);
        if (v40) {
          LOWORD(v40) = *(_WORD *)(v40 + 8);
        }
        uint64_t v23 = sub_1CCFDED5C(a2, 172, (const llvm::APInt *)&v55, v57, v58, (uint64_t)v35, v37, v34, v7, v8, v40);
        goto LABEL_19;
      }
      if (sub_1CD7FF12C(v7, v8, 1))
      {
        int v41 = *(unsigned __int8 **)(a1 + 64);
        unsigned int v55 = v41;
        if (v41) {
          llvm::MetadataTracking::track((uint64_t)&v55, v41, 2);
        }
        int v56 = *(_DWORD *)(a1 + 60);
        unsigned int v43 = sub_1CD7EBB8C(a2, (const llvm::APInt *)&v55, v6, v5, v57, v58);
        uint64_t v45 = v44;
        if (!v55) {
          goto LABEL_65;
        }
        int v46 = *v55;
        if ((v46 - 4) > 0x1E)
        {
          if ((v46 - 3) >= 0xFFFFFFFE) {
            uint64_t v51 = v55;
          }
          else {
            uint64_t v51 = 0;
          }
          if ((v46 - 3) < 0xFFFFFFFE)
          {
            if (v46 == 3) {
              *((void *)v55 + 1) = 0;
            }
            goto LABEL_65;
          }
          unint64_t v52 = (unint64_t)(v51 + 8);
        }
        else
        {
          if ((v55[1] & 0x7F) != 2 && !*((_DWORD *)v55 + 3)) {
            goto LABEL_65;
          }
          uint64_t v54 = *((void *)v55 + 2);
          if ((v54 & 4) == 0) {
            goto LABEL_65;
          }
          unint64_t v52 = v54 & 0xFFFFFFFFFFFFFFF8;
          if (!v52) {
            goto LABEL_65;
          }
        }
        unint64_t v59 = &v55;
        sub_1CC5FA668(v52 + 16, &v59);
LABEL_65:
        uint64_t v47 = *(unsigned __int8 **)(a1 + 64);
        unsigned int v55 = v47;
        if (v47) {
          llvm::MetadataTracking::track((uint64_t)&v55, v47, 2);
        }
        int v56 = *(_DWORD *)(a1 + 60);
        uint64_t v48 = *(void *)(a2 + 832);
        if (v48) {
          LOWORD(v48) = *(_WORD *)(v48 + 8);
        }
        uint64_t v23 = sub_1CCFDED5C(a2, 171, (const llvm::APInt *)&v55, v57, v58, (uint64_t)v43, v45, v42, v9, v10, v48);
        goto LABEL_19;
      }
      return 0;
    }
    int v30 = *(unsigned __int8 **)(a1 + 64);
    unsigned int v55 = v30;
    if (v30) {
      llvm::MetadataTracking::track((uint64_t)&v55, v30, 2);
    }
    int v56 = *(_DWORD *)(a1 + 60);
    uint64_t v31 = *(void *)(a2 + 832);
    if (v31) {
      LOWORD(v31) = *(_WORD *)(v31 + 8);
    }
    uint64_t v23 = sub_1CCFDED5C(a2, 171, (const llvm::APInt *)&v55, v57, v58, v6, v5, v19, v7, v8, v31);
  }
LABEL_19:
  uint64_t v15 = v23;
  if (v55)
  {
    int v24 = *v55;
    if ((v24 - 4) > 0x1E)
    {
      if ((v24 - 3) >= 0xFFFFFFFE) {
        uint64_t v27 = v55;
      }
      else {
        uint64_t v27 = 0;
      }
      if ((v24 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v26 = (unint64_t)(v27 + 8);
LABEL_31:
        unint64_t v59 = &v55;
        sub_1CC5FA668(v26 + 16, &v59);
        return v15;
      }
      if (v24 == 3) {
        *((void *)v55 + 1) = 0;
      }
    }
    else if ((v55[1] & 0x7F) == 2 || *((_DWORD *)v55 + 3))
    {
      uint64_t v25 = *((void *)v55 + 2);
      if ((v25 & 4) != 0)
      {
        unint64_t v26 = v25 & 0xFFFFFFFFFFFFFFF8;
        if (v26) {
          goto LABEL_31;
        }
      }
    }
  }
  return v15;
}

uint64_t sub_1CCF540B8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  int v8 = a4;
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = sub_1CCFDEC10(a3, a4, 0);
  if (v12)
  {
    uint64_t v13 = *(void *)(v12 + 80);
    uint64_t v14 = *(_UNKNOWN **)(v13 + 32) == &unk_1CFB2E344 ? *(void *)(v13 + 40) : v13 + 24;
    if ((*(unsigned char *)(v14 + 28) & 7) == 1 && *(_WORD *)(a5 + 24) == 224)
    {
      uint64_t v15 = *(uint64_t **)(a2 + 32);
      if (*(_WORD *)(a2 + 24) == 192)
      {
        unsigned int v16 = v15 + 20;
      }
      else
      {
        uint64_t v17 = *v15;
        if (*(_WORD *)(v17 + 24) != 193) {
          goto LABEL_23;
        }
        uint64_t v15 = *(uint64_t **)(v17 + 32);
        unsigned int v16 = v15 + 10;
      }
      unsigned int v18 = *(_DWORD *)(*v16 + 76);
      uint64_t v19 = *v15;
      int v20 = *((_DWORD *)v15 + 2);
      uint64_t v21 = sub_1CCFDEC10(v15[5], v15[6], 0);
      if (v21)
      {
        uint64_t v22 = *(void *)(v21 + 80);
        uint64_t v23 = *(_UNKNOWN **)(v22 + 32) == &unk_1CFB2E344 ? *(void *)(v22 + 40) : v22 + 24;
        if ((*(unsigned char *)(v23 + 28) & 7) == 3)
        {
          uint64_t v24 = *(void *)(a5 + 32);
          if (*(void *)v24 == v19 && *(_DWORD *)(v24 + 8) == v20 && v18 <= 0x14 && ((1 << v18) & 0x101010) != 0)
          {
            unint64_t v117 = (void *)a5;
            unint64_t v118 = a6;
            uint64_t v26 = 1;
            sub_1CCEF083C(a1, a2, (uint64_t *)&v117, 1, 1);
            return v26;
          }
        }
      }
    }
  }
LABEL_23:
  uint64_t v27 = (unsigned __int8 *)(*(void *)(**(void **)(a2 + 32) + 40)
                          + 16 * *(unsigned int *)(*(void *)(a2 + 32) + 8));
  if (*v27)
  {
    if (*v27 - 15 < 0x9C) {
      return 0;
    }
  }
  else if ((*(_DWORD *)(*((void *)v27 + 1) + 8) & 0xFE) == 0x12)
  {
    return 0;
  }
  int v28 = *(unsigned __int16 *)(a3 + 24);
  if (v28 != *(unsigned __int16 *)(a5 + 24)) {
    return 0;
  }
  uint64_t v29 = *(void *)(a3 + 48);
  if (!v29) {
    return 0;
  }
  int v30 = 1;
  do
  {
    if (*(_DWORD *)(v29 + 8) == v8)
    {
      if (!v30) {
        return 0;
      }
      --v30;
    }
    uint64_t v29 = *(void *)(v29 + 32);
  }
  while (v29);
  if (v30) {
    return 0;
  }
  uint64_t v32 = *(void *)(a5 + 48);
  if (!v32) {
    return 0;
  }
  int v33 = 1;
  do
  {
    if (*(_DWORD *)(v32 + 8) == a6)
    {
      if (!v33) {
        return 0;
      }
      --v33;
    }
    uint64_t v32 = *(void *)(v32 + 32);
  }
  while (v32);
  uint64_t v26 = 0;
  if (v28 == 253 && !v33)
  {
    uint64_t v34 = *(void *)(a3 + 32);
    uint64_t v35 = *(void *)(a5 + 32);
    if (*(void *)v34 != *(void *)v35) {
      return 0;
    }
    if (*(_DWORD *)(v34 + 8) != *(_DWORD *)(v35 + 8)) {
      return 0;
    }
    uint64_t v36 = *(void *)(a3 + 96);
    if ((*(_WORD *)(v36 + 36) & 0xF00) != 0) {
      return 0;
    }
    if ((*(unsigned char *)(a3 + 26) & 8) != 0) {
      return 0;
    }
    uint64_t v37 = *(void *)(a5 + 96);
    if ((*(_WORD *)(v37 + 36) & 0xF00) != 0) {
      return 0;
    }
    if ((*(unsigned char *)(a5 + 26) & 8) != 0) {
      return 0;
    }
    unsigned int v38 = *(unsigned __int16 *)(a3 + 26);
    if ((v38 & 0x380) != 0) {
      return 0;
    }
    unsigned int v39 = *(unsigned __int16 *)(a5 + 26);
    if ((v39 & 0x380) != 0
      || *(unsigned __int8 *)(a3 + 80) != *(unsigned __int8 *)(a5 + 80)
      || !*(unsigned char *)(a3 + 80) && *(void *)(a3 + 88) != *(void *)(a5 + 88))
    {
      return 0;
    }
    int v40 = (v39 >> 10) & 3;
    if (v40 != 1)
    {
      int v41 = (v38 >> 10) & 3;
      if (v41 != 1 && v41 != v40) {
        return 0;
      }
    }
    if (*(_DWORD *)(v36 + 16)) {
      return 0;
    }
    if (*(_DWORD *)(v37 + 16)) {
      return 0;
    }
    uint64_t v42 = *(void *)(v34 + 40);
    if (*(_WORD *)(v42 + 24) == 39) {
      return 0;
    }
    if (*(_WORD *)(*(void *)(v35 + 40) + 24) == 39) {
      return 0;
    }
    uint64_t v43 = *(void *)(*(void *)(v42 + 40) + 16 * *(unsigned int *)(v34 + 48));
    if (!(_BYTE)v43) {
      return 0;
    }
    uint64_t v44 = a1[1];
    uint64_t v45 = *(unsigned __int16 *)(a2 + 24);
    if (v43 != 1 && !*(void *)(v44 + 8 * v43 + 96)) {
      return 0;
    }
    if (v45 <= 0x185 && (*(unsigned char *)(v44 + 390 * v43 + v45 + 3862) & 0xFB) != 0
      || (sub_1CD8031D4(a5, a3) & 1) != 0
      || (sub_1CD8031D4(a3, a5) & 1) != 0)
    {
      return 0;
    }
    unint64_t v117 = v121;
    unint64_t v118 = v121;
    int v120 = 0;
    uint64_t v122 = v124;
    uint64_t v119 = 0x100000020;
    v121[0] = a2;
    v124[0] = a3;
    v124[1] = a5;
    uint64_t v123 = 0x1000000002;
    uint64_t v26 = 0;
    if (sub_1CCF551A8(a3, (llvm::SmallPtrSetImplBase *)&v117, (unsigned int *)&v122, 0, 0)) {
      goto LABEL_128;
    }
    uint64_t v26 = 0;
    if (sub_1CCF551A8(a5, (llvm::SmallPtrSetImplBase *)&v117, (unsigned int *)&v122, 0, 0)) {
      goto LABEL_128;
    }
    uint64_t v47 = *(uint64_t **)(a2 + 32);
    uint64_t v48 = *v47;
    if (*(_WORD *)(a2 + 24) == 190)
    {
      if (v123 >= HIDWORD(v123)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v122 + v123) = v48;
      LODWORD(v123) = v123 + 1;
      uint64_t v49 = *(void *)(a3 + 48);
      if (v49)
      {
        while (*(_DWORD *)(v49 + 8) != 1)
        {
          uint64_t v49 = *(void *)(v49 + 32);
          if (!v49) {
            goto LABEL_85;
          }
        }
        uint64_t v26 = 0;
        if (sub_1CCF551A8(a3, (llvm::SmallPtrSetImplBase *)&v117, (unsigned int *)&v122, 0, 0)) {
          goto LABEL_128;
        }
      }
LABEL_85:
      uint64_t v53 = *(void *)(a5 + 48);
      if (!v53) {
        goto LABEL_90;
      }
      while (*(_DWORD *)(v53 + 8) != 1)
      {
        uint64_t v53 = *(void *)(v53 + 32);
        if (!v53) {
          goto LABEL_90;
        }
      }
      uint64_t v26 = 0;
      if ((sub_1CCF551A8(a5, (llvm::SmallPtrSetImplBase *)&v117, (unsigned int *)&v122, 0, 0) & 1) == 0)
      {
LABEL_90:
        uint64_t v54 = (void *)*a1;
        unsigned int v55 = *(unsigned __int8 **)(a2 + 64);
        *(void *)&long long v125 = v55;
        if (v55) {
          llvm::MetadataTracking::track((uint64_t)&v125, v55, 2);
        }
        DWORD2(v125) = *(_DWORD *)(a2 + 60);
        uint64_t v56 = *(void *)(a3 + 32);
        uint64_t v57 = *(void *)(v56 + 40);
        uint64_t v58 = *(void *)(v57 + 40) + 16 * *(unsigned int *)(v56 + 48);
        unint64_t v59 = sub_1CD3E1260(v54, (const llvm::APInt *)&v125, *(llvm **)v58, *(void *)(v58 + 8), **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), v57, *(void *)(v56 + 48), *(void *)(*(void *)(a5 + 32) + 40), *(void *)(*(void *)(a5 + 32) + 48), HIDWORD(*(void *)(*(void *)(a5 + 32) + 48)));
        goto LABEL_102;
      }
    }
    else
    {
      uint64_t v50 = v47[5];
      if (v123 >= HIDWORD(v123)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v122 + v123) = v48;
      unsigned int v51 = v123 + 1;
      LODWORD(v123) = v51;
      if (v51 >= HIDWORD(v123)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v122 + v51) = v50;
      LODWORD(v123) = v123 + 1;
      uint64_t v52 = *(void *)(a3 + 48);
      if (v52)
      {
        while (*(_DWORD *)(v52 + 8) != 1)
        {
          uint64_t v52 = *(void *)(v52 + 32);
          if (!v52) {
            goto LABEL_94;
          }
        }
        uint64_t v26 = 0;
        if (sub_1CCF551A8(a3, (llvm::SmallPtrSetImplBase *)&v117, (unsigned int *)&v122, 0, 0)) {
          goto LABEL_128;
        }
      }
LABEL_94:
      uint64_t v62 = *(void *)(a5 + 48);
      if (!v62) {
        goto LABEL_99;
      }
      while (*(_DWORD *)(v62 + 8) != 1)
      {
        uint64_t v62 = *(void *)(v62 + 32);
        if (!v62) {
          goto LABEL_99;
        }
      }
      uint64_t v26 = 0;
      if ((sub_1CCF551A8(a5, (llvm::SmallPtrSetImplBase *)&v117, (unsigned int *)&v122, 0, 0) & 1) == 0)
      {
LABEL_99:
        long long v63 = (void *)*a1;
        uint64_t v64 = *(unsigned __int8 **)(a2 + 64);
        *(void *)&long long v125 = v64;
        if (v64) {
          llvm::MetadataTracking::track((uint64_t)&v125, v64, 2);
        }
        DWORD2(v125) = *(_DWORD *)(a2 + 60);
        uint64_t v65 = *(void *)(a3 + 32);
        uint64_t v66 = *(void *)(v65 + 40);
        uint64_t v67 = *(void *)(v66 + 40) + 16 * *(unsigned int *)(v65 + 48);
        unint64_t v68 = *(llvm **)v67;
        uint64_t v69 = *(void *)(v67 + 8);
        uint64_t v70 = *(uint64_t **)(a2 + 32);
        unint64_t v59 = sub_1CD7F6564(v63, (const char *)0xC0, (const llvm::APInt *)&v125, v68, v69, *v70, v70[1], v46, v70[5], v70[6], v66, *(void *)(v65 + 48), *(void *)(*(void *)(a5 + 32) + 40), *(void *)(*(void *)(a5 + 32) + 48), v70[20], v70[21]);
LABEL_102:
        uint64_t v110 = (uint64_t)v59;
        unsigned int v71 = v60;
        if (!(void)v125) {
          goto LABEL_106;
        }
        int v72 = *(unsigned __int8 *)v125;
        if ((v72 - 4) > 0x1E)
        {
          if ((v72 - 3) >= 0xFFFFFFFE) {
            uint64_t v105 = v125;
          }
          else {
            uint64_t v105 = 0;
          }
          if ((v72 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v106 = v105 + 8;
LABEL_143:
            uint64_t v115 = &v125;
            sub_1CC5FA668(v106 + 16, &v115);
            goto LABEL_106;
          }
          if (v72 == 3) {
            *(void *)(v125 + 8) = 0;
          }
        }
        else if ((*(unsigned char *)(v125 + 1) & 0x7F) == 2 || *(_DWORD *)(v125 + 12))
        {
          uint64_t v108 = *(void *)(v125 + 16);
          if ((v108 & 4) != 0)
          {
            unint64_t v106 = v108 & 0xFFFFFFFFFFFFFFF8;
            if (v106) {
              goto LABEL_143;
            }
          }
        }
LABEL_106:
        uint64_t v73 = *(void *)(a3 + 96);
        uint64_t v74 = (1 << *(unsigned char *)(v73 + 34)) | *(void *)(v73 + 8);
        unsigned __int8 v75 = 63 - __clz(v74 & -v74);
        uint64_t v76 = (1 << *(unsigned char *)(*(void *)(a5 + 96) + 34)) | *(void *)(*(void *)(a5 + 96) + 8);
        unsigned int v77 = (63 - __clz(v76 & -v76));
        if (v77 >= v75) {
          uint64_t v78 = v75;
        }
        else {
          uint64_t v78 = v77;
        }
        __int16 v79 = *(_WORD *)(v73 + 32);
        if ((*(unsigned char *)(a5 + 26) & 0x40) == 0) {
          v79 &= 0x1DFu;
        }
        if ((*(unsigned char *)(a5 + 26) & 0x20) != 0) {
          __int16 v80 = v79;
        }
        else {
          __int16 v80 = v79 & 0x1EF;
        }
        int v81 = (*(unsigned __int16 *)(a3 + 26) >> 10) & 3;
        uint64_t v82 = *a1;
        if (v81 == 1)
        {
          int v81 = (*(unsigned __int16 *)(a5 + 26) >> 10) & 3;
        }
        else if (!v81)
        {
          uint64_t v83 = *(uint64_t **)(a2 + 40);
          uint64_t v84 = v83[1];
          uint64_t v109 = *v83;
          int v85 = *(unsigned __int8 **)(a2 + 64);
          uint64_t v115 = (long long *)v85;
          if (v85) {
            llvm::MetadataTracking::track((uint64_t)&v115, v85, 2);
          }
          int v116 = *(_DWORD *)(a2 + 60);
          uint64_t v86 = *(uint64_t **)(a3 + 32);
          uint64_t v87 = *v86;
          uint64_t v88 = v86[1];
          uint64_t v113 = 0;
          v114[0] = 0;
          *(void *)((char *)v114 + 5) = 0;
          long long v125 = 0u;
          long long v126 = 0u;
          uint64_t v89 = sub_1CD7F00F8(v82, v109, v84, (uint64_t)&v115, v87, v88, v110, v71, (long long *)&v113, (unsigned __int16)v78 | 0x100u, (v78 | 0x100uLL) >> 32, v80, &v125, 0);
          goto LABEL_123;
        }
        uint64_t v91 = *(unsigned __int8 **)(a2 + 64);
        uint64_t v115 = (long long *)v91;
        if (v91) {
          llvm::MetadataTracking::track((uint64_t)&v115, v91, 2);
        }
        int v116 = *(_DWORD *)(a2 + 60);
        unint64_t v92 = *(uint64_t **)(a2 + 40);
        uint64_t v93 = *v92;
        uint64_t v94 = v92[1];
        uint64_t v95 = *(uint64_t **)(a3 + 32);
        uint64_t v96 = *v95;
        uint64_t v97 = v95[1];
        uint64_t v111 = 0;
        v112[0] = 0;
        *(void *)((char *)v112 + 5) = 0;
        uint64_t v98 = *(void *)(a3 + 80);
        uint64_t v99 = *(void *)(a3 + 88);
        long long v125 = 0u;
        long long v126 = 0u;
        uint64_t v89 = sub_1CD7FAEE8(v82, v81, (uint64_t)&v115, v93, v94, v96, v97, v61, v110, v71, (long long *)&v111, v98, v99, (unsigned __int16)v78 | 0x100u, (v78 | 0x100uLL) >> 32, v80, &v125);
LABEL_123:
        uint64_t v100 = v89;
        unsigned int v101 = v90;
        if (v115)
        {
          int v102 = *(unsigned __int8 *)v115;
          if ((v102 - 4) > 0x1E)
          {
            if ((v102 - 3) >= 0xFFFFFFFE) {
              __int16 v103 = v115;
            }
            else {
              __int16 v103 = 0;
            }
            if ((v102 - 3) < 0xFFFFFFFE)
            {
              if (v102 == 3) {
                *((void *)v115 + 1) = 0;
              }
              goto LABEL_127;
            }
            unint64_t v104 = (unint64_t)v103 + 8;
          }
          else
          {
            if ((*((unsigned char *)v115 + 1) & 0x7F) != 2 && !*((_DWORD *)v115 + 3)) {
              goto LABEL_127;
            }
            uint64_t v107 = *((void *)v115 + 2);
            if ((v107 & 4) == 0) {
              goto LABEL_127;
            }
            unint64_t v104 = v107 & 0xFFFFFFFFFFFFFFF8;
            if (!v104) {
              goto LABEL_127;
            }
          }
          *(void *)&long long v125 = &v115;
          sub_1CC5FA668(v104 + 16, &v125);
        }
LABEL_127:
        *(void *)&long long v125 = v100;
        *((void *)&v125 + 1) = v101;
        uint64_t v26 = 1;
        sub_1CCEF083C(a1, a2, (uint64_t *)&v125, 1, 1);
        *(void *)&long long v125 = v100;
        DWORD2(v125) = 0;
        *(void *)&long long v126 = v100;
        DWORD2(v126) = 1;
        sub_1CCEF083C(a1, a3, (uint64_t *)&v125, 2, 1);
        *(void *)&long long v125 = v100;
        DWORD2(v125) = 0;
        *(void *)&long long v126 = v100;
        DWORD2(v126) = 1;
        sub_1CCEF083C(a1, a5, (uint64_t *)&v125, 2, 1);
      }
    }
LABEL_128:
    if (v122 != v124) {
      free(v122);
    }
    if (v118 != v117) {
      free(v118);
    }
  }
  return v26;
}

uint64_t sub_1CCF54AF4(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((*((_WORD *)*a1 + 510) & 0x10) == 0) {
    return 0;
  }
  uint64_t v11 = (uint64_t *)(*(void *)(a2 + 40) + 16 * a3);
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  if (*v11)
  {
    BOOL v14 = (v12 + 104) >= 0x13u && (v12 - 8) >= 7u;
    if (v14 && (v12 - 75) >= 0x2Du) {
      return 0;
    }
  }
  else
  {
    if ((*(_DWORD *)(v13 + 8) & 0xFE) == 0x12) {
      unsigned int v15 = *(unsigned __int8 *)(**(void **)(v13 + 16) + 8);
    }
    else {
      unsigned int v15 = *(_DWORD *)(v13 + 8);
    }
    if (v15 > 6) {
      return 0;
    }
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a6 + 1008))(a6)
    || !sub_1CCFDB4C8(a1, a2, a3, 0, 0))
  {
    return 0;
  }

  return sub_1CCFDB4C8(a1, a4, a5, 0, 0);
}

uint64_t *sub_1CCF54C3C(const llvm::APInt *a1, llvm *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, int a12, int a13, unsigned int a14, unint64_t a15, uint64_t a16)
{
  BOOL v23 = a4 == a9 && a5 == a10;
  if (!v23 || a6 != a11 || a7 != a12)
  {
    if (a4 != a11 || a5 != a12) {
      return 0;
    }
    if (a6 != a9 || a7 != a10) {
      return 0;
    }
  }
  llvm::TargetLoweringBase::getTypeConversion(a15, *(llvm::LLVMContext **)(a16 + 56), (BOOL)a2, a3, (uint64_t)v33);
  if (a14 > 0x15) {
    return 0;
  }
  if (((1 << a14) & 0xC0C0C) != 0)
  {
    if (v23) {
      uint64_t v30 = 249;
    }
    else {
      uint64_t v30 = 248;
    }
    if (!(_BYTE)a2
      || a2 != 1 && !*(void *)(a15 + 8 * a2 + 96)
      || (*(unsigned char *)(a15 + 390 * a2 + v30 + 3862) & 0xFB) != 0)
    {
      if (v23) {
        uint64_t v30 = 247;
      }
      else {
        uint64_t v30 = 246;
      }
      if (!v34) {
        return (uint64_t *)v34;
      }
LABEL_50:
      if (v34 != 1 && !*(void *)(a15 + 8 * v34 + 96)
        || (*(unsigned char *)(a15 + 390 * v34 + v30 + 3862) & 0xFB) != 0)
      {
        return 0;
      }
    }
  }
  else
  {
    __n128 result = 0;
    if (((1 << a14) & 0x303030) == 0) {
      return result;
    }
    if (v23) {
      uint64_t v30 = 248;
    }
    else {
      uint64_t v30 = 249;
    }
    if (!(_BYTE)a2
      || a2 != 1 && !*(void *)(a15 + 8 * a2 + 96)
      || (*(unsigned char *)(a15 + 390 * a2 + v30 + 3862) & 0xFB) != 0)
    {
      if (v23) {
        uint64_t v30 = 246;
      }
      else {
        uint64_t v30 = 247;
      }
      if (!v34) {
        return (uint64_t *)v34;
      }
      goto LABEL_50;
    }
  }
  uint64_t v31 = *(void *)(a16 + 832);
  if (v31) {
    LOWORD(v31) = *(_WORD *)(v31 + 8);
  }
  return sub_1CCFDED5C(a16, v30, a1, a2, a3, a4, a5, v28, a6, a7, v31);
}

uint64_t *sub_1CCF54E60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 32);
  uint64_t v5 = *v4;
  int v6 = *((_DWORD *)v4 + 2);
  uint64_t v7 = v4[5];
  uint64_t v8 = v4[6];
  uint64_t v10 = v4[10];
  uint64_t v9 = v4[11];
  if (!sub_1CCF40DA4(v7, v8, 0)) {
    return 0;
  }
  if (!sub_1CCF40DA4(v10, v9, 0)) {
    return 0;
  }
  if (*(_WORD *)(v5 + 24) != 193) {
    return 0;
  }
  uint64_t v11 = *(void *)(v5 + 48);
  if (!v11) {
    return 0;
  }
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = *(llvm **)v12;
  uint64_t v14 = *(void *)(v12 + 8);
  int v15 = 1;
  do
  {
    if (*(_DWORD *)(v11 + 8) == v6)
    {
      if (!v15) {
        return 0;
      }
      --v15;
    }
    uint64_t v11 = *(void *)(v11 + 32);
  }
  while (v11);
  if (v15) {
    return 0;
  }
  unsigned int v16 = *(uint64_t **)(v5 + 32);
  uint64_t v17 = (unsigned __int8 *)(*(void *)(*v16 + 40) + 16 * *((unsigned int *)v16 + 2));
  if (v13 != *v17 || !(_BYTE)v13 && v14 != *((void *)v17 + 1)) {
    return 0;
  }
  long long v52 = *(_OWORD *)v16;
  uint64_t v18 = v16[5];
  uint64_t v19 = v16[6];
  int v20 = *(_DWORD *)(v16[10] + 76);
  if (v20 != 20)
  {
    if (v20 == 18 && sub_1CD802C68(v18, v19, 0) && sub_1CD802C68(v10, v9, 0))
    {
      uint64_t v36 = *(unsigned __int8 **)(a1 + 64);
      uint64_t v50 = v36;
      if (v36) {
        llvm::MetadataTracking::track((uint64_t)&v50, v36, 2);
      }
      int v51 = *(_DWORD *)(a1 + 60);
      uint64_t v37 = sub_1CD7878C0((unsigned int *)&v52, (uint64_t)v36, v35);
      unsigned int v38 = sub_1CD7EBF14(a2, (uint64_t)v37 - 1, (const llvm::APInt *)&v50, v13, v14, 0, 0);
      uint64_t v41 = *(void *)(a2 + 832);
      if (v41) {
        LOWORD(v41) = *(_WORD *)(v41 + 8);
      }
      uint64_t v43 = sub_1CCFDED5C(a2, 176, (const llvm::APInt *)&v50, v13, v14, v52, *((uint64_t *)&v52 + 1), v40, (uint64_t)v38, v39, v41);
      uint64_t v45 = *(void *)(a2 + 832);
      if (v45) {
        LOWORD(v45) = *(_WORD *)(v45 + 8);
      }
      unsigned __int8 v34 = sub_1CCFDED5C(a2, 172, (const llvm::APInt *)&v50, v13, v14, (uint64_t)v43, v42, v44, v7, v8, v45);
      goto LABEL_36;
    }
    return 0;
  }
  if (!sub_1CD7FF12C(v18, v19, 0) || !sub_1CD7FF12C(v10, v9, 0)) {
    return 0;
  }
  uint64_t v24 = *(unsigned __int8 **)(a1 + 64);
  uint64_t v50 = v24;
  if (v24) {
    llvm::MetadataTracking::track((uint64_t)&v50, v24, 2);
  }
  int v51 = *(_DWORD *)(a1 + 60);
  uint64_t v25 = sub_1CD7878C0((unsigned int *)&v52, (uint64_t)v24, v23);
  uint64_t v26 = sub_1CD7EBF14(a2, (uint64_t)v25 - 1, (const llvm::APInt *)&v50, v13, v14, 0, 0);
  uint64_t v29 = *(void *)(a2 + 832);
  if (v29) {
    LOWORD(v29) = *(_WORD *)(v29 + 8);
  }
  uint64_t v31 = sub_1CCFDED5C(a2, 176, (const llvm::APInt *)&v50, v13, v14, v52, *((uint64_t *)&v52 + 1), v28, (uint64_t)v26, v27, v29);
  uint64_t v33 = *(void *)(a2 + 832);
  if (v33) {
    LOWORD(v33) = *(_WORD *)(v33 + 8);
  }
  unsigned __int8 v34 = sub_1CCFDED5C(a2, 171, (const llvm::APInt *)&v50, v13, v14, (uint64_t)v31, v30, v32, v7, v8, v33);
LABEL_36:
  uint64_t v21 = v34;
  if (v50)
  {
    int v46 = *v50;
    if ((v46 - 4) > 0x1E)
    {
      if ((v46 - 3) >= 0xFFFFFFFE) {
        uint64_t v49 = v50;
      }
      else {
        uint64_t v49 = 0;
      }
      if ((v46 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v48 = (unint64_t)(v49 + 8);
LABEL_48:
        uint64_t v53 = &v50;
        sub_1CC5FA668(v48 + 16, &v53);
        return v21;
      }
      if (v46 == 3) {
        *((void *)v50 + 1) = 0;
      }
    }
    else if ((v50[1] & 0x7F) == 2 || *((_DWORD *)v50 + 3))
    {
      uint64_t v47 = *((void *)v50 + 2);
      if ((v47 & 4) != 0)
      {
        unint64_t v48 = v47 & 0xFFFFFFFFFFFFFFF8;
        if (v48) {
          goto LABEL_48;
        }
      }
    }
  }
  return v21;
}

uint64_t sub_1CCF551A8(uint64_t a1, llvm::SmallPtrSetImplBase *this, unsigned int *a3, unsigned int a4, int a5)
{
  v57[8] = *MEMORY[0x1E4F143B8];
  unsigned int v56 = 0;
  uint64_t v10 = *(void *)this;
  uint64_t v9 = *((void *)this + 1);
  if (v9 == *(void *)this)
  {
    uint64_t v11 = *((unsigned int *)this + 5);
    uint64_t v12 = (void *)(v9 + 8 * v11);
    if (v11)
    {
      uint64_t v13 = 0;
      while (*(void *)(v9 + v13) != a1)
      {
        v13 += 8;
        if (8 * v11 == v13) {
          goto LABEL_19;
        }
      }
      uint64_t v12 = (void *)(v9 + v13);
    }
LABEL_19:
    uint64_t v10 = *((void *)this + 1);
  }
  else
  {
    uint64_t v14 = *((unsigned int *)this + 4);
    int v15 = v14 - 1;
    unsigned int v16 = (v14 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    uint64_t v12 = (void *)(v9 + 8 * v16);
    uint64_t v17 = *v12;
    if (*v12 == -1)
    {
      uint64_t v18 = 0;
LABEL_21:
      if (v18) {
        uint64_t v12 = v18;
      }
      if (*v12 != a1)
      {
        LODWORD(v11) = *((_DWORD *)this + 5);
        uint64_t v12 = (void *)(v9 + 8 * v14);
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v18 = 0;
      int v19 = 1;
      while (v17 != a1)
      {
        if (v18) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v17 == -2;
        }
        if (v20) {
          uint64_t v18 = v12;
        }
        unsigned int v21 = v16 + v19++;
        unsigned int v16 = v21 & v15;
        uint64_t v12 = (void *)(v9 + 8 * (v21 & v15));
        uint64_t v17 = *v12;
        if (*v12 == -1) {
          goto LABEL_21;
        }
      }
    }
    LODWORD(v11) = *((_DWORD *)this + 5);
  }
LABEL_26:
  if (v9 == v10) {
    unsigned int v22 = v11;
  }
  else {
    unsigned int v22 = *((_DWORD *)this + 4);
  }
  if (v12 != (void *)(v9 + 8 * v22)) {
    return 1;
  }
  int v25 = *(_DWORD *)(a1 + 28);
  if (v25 >= -1) {
    int v26 = *(_DWORD *)(a1 + 28);
  }
  else {
    int v26 = ~v25;
  }
  unsigned int v27 = a3[2];
  if (!v27)
  {
    uint64_t v28 = 0;
    uint64_t v23 = 0;
    goto LABEL_110;
  }
  int v55 = a5;
  while (2)
  {
    while (2)
    {
      uint64_t v29 = *(void *)(*(void *)a3 + 8 * v27-- - 8);
      a3[2] = v27;
      if (a5 && v26 >= 1)
      {
        int v30 = *(_DWORD *)(v29 + 28);
        BOOL v31 = *(_WORD *)(v29 + 24) == 2 || v30 < 1;
        if (!v31 && v30 < v26)
        {
          if (v56 >= 8uLL) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v57[v56++] = v29;
          unsigned int v27 = a3[2];
          goto LABEL_104;
        }
      }
      unsigned int v33 = *(unsigned __int16 *)(v29 + 56);
      if (!*(_WORD *)(v29 + 56)) {
        goto LABEL_97;
      }
      char v34 = 0;
      BOOL v35 = *(uint64_t **)(v29 + 32);
      uint64_t v36 = &v35[5 * v33];
      do
      {
        uint64_t v37 = *v35;
        uint64_t v38 = *((void *)this + 1);
        uint64_t v39 = *((unsigned int *)this + 5);
        if (v38 == *(void *)this)
        {
          if (v39)
          {
            uint64_t v40 = 0;
            uint64_t v41 = 8 * v39;
            uint64_t v42 = (void *)*((void *)this + 1);
            while (*v42 != v37)
            {
              if (*v42 == -2) {
                uint64_t v40 = v42;
              }
              ++v42;
              v41 -= 8;
              if (!v41)
              {
                if (!v40) {
                  goto LABEL_60;
                }
                *uint64_t v40 = v37;
                --*((_DWORD *)this + 6);
                goto LABEL_84;
              }
            }
            goto LABEL_86;
          }
LABEL_60:
          unsigned int v43 = *((_DWORD *)this + 4);
          if (v39 < v43)
          {
            *((_DWORD *)this + 5) = v39 + 1;
            *(void *)(v38 + 8 * v39) = v37;
LABEL_84:
            unint64_t v53 = a3[2];
            if (v53 >= a3[3]) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)a3 + 8 * v53) = v37;
            ++a3[2];
            goto LABEL_86;
          }
        }
        else
        {
          unsigned int v43 = *((_DWORD *)this + 4);
        }
        if (3 * v43 <= 4 * ((int)v39 - *((_DWORD *)this + 6)))
        {
          if (v43 >= 0x40) {
            v43 *= 2;
          }
          else {
            unsigned int v43 = 128;
          }
        }
        else if (v43 - v39 >= v43 >> 3)
        {
          goto LABEL_65;
        }
        llvm::SmallPtrSetImplBase::Grow(this, v43);
        a5 = v55;
        unsigned int v43 = *((_DWORD *)this + 4);
        uint64_t v38 = *((void *)this + 1);
LABEL_65:
        unsigned int v44 = v43 - 1;
        unsigned int v45 = (v43 - 1) & ((v37 >> 4) ^ (v37 >> 9));
        int v46 = (void *)(v38 + 8 * v45);
        uint64_t v47 = *v46;
        if (*v46 == -1)
        {
          unint64_t v48 = 0;
LABEL_77:
          if (v48) {
            long long v52 = v48;
          }
          else {
            long long v52 = v46;
          }
          if (*v52 != v37)
          {
            if (*v52 == -2) {
              --*((_DWORD *)this + 6);
            }
            else {
              ++*((_DWORD *)this + 5);
            }
            *long long v52 = v37;
            goto LABEL_84;
          }
        }
        else
        {
          unint64_t v48 = 0;
          int v49 = 1;
          while (v47 != v37)
          {
            if (v48) {
              BOOL v50 = 0;
            }
            else {
              BOOL v50 = v47 == -2;
            }
            if (v50) {
              unint64_t v48 = v46;
            }
            unsigned int v51 = v45 + v49++;
            unsigned int v45 = v51 & v44;
            int v46 = (void *)(v38 + 8 * (v51 & v44));
            uint64_t v47 = *v46;
            if (*v46 == -1) {
              goto LABEL_77;
            }
          }
        }
LABEL_86:
        v34 |= v37 == a1;
        v35 += 5;
      }
      while (v35 != v36);
      if (v34)
      {
        uint64_t v23 = 1;
        goto LABEL_109;
      }
      unsigned int v27 = a3[2];
LABEL_97:
      if (!a4)
      {
LABEL_104:
        if (!v27) {
          goto LABEL_107;
        }
        continue;
      }
      break;
    }
    if (*((_DWORD *)this + 5) - *((_DWORD *)this + 6) < a4 && v27 != 0) {
      continue;
    }
    break;
  }
LABEL_107:
  uint64_t v23 = 0;
LABEL_109:
  uint64_t v28 = v56;
LABEL_110:
  sub_1CD47792C(a3, v57, &v57[v28]);
  if (a4 && *((_DWORD *)this + 5) - *((_DWORD *)this + 6) >= a4) {
    return 1;
  }
  return v23;
}

uint64_t *sub_1CCF55640(uint64_t *a1, const llvm::APInt *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int a11, unsigned __int8 a12)
{
  uint64_t v13 = a7;
  uint64_t v15 = a9;
  uint64_t v14 = a10;
  v444[2] = *MEMORY[0x1E4F143B8];
  BOOL v16 = a7 == a9 && a8 == a10;
  if (!v16)
  {
    BOOL v20 = a1;
    unsigned int v21 = (llvm **)(*(void *)(a3 + 40) + 16 * a4);
    unsigned int v22 = *v21;
    uint64_t v23 = (uint64_t)v21[1];
    unsigned int v437 = *v21;
    uint64_t v438 = v23;
    int v25 = (llvm *)(*(uint64_t (**)(void))(*(void *)a1[1] + 400))();
    long long v436 = *(_OWORD *)(*(void *)(v13 + 40) + 16 * a8);
    int v26 = *(unsigned __int16 *)(a5 + 24);
    if (v26 == 35 || v26 == 11) {
      uint64_t v427 = a5;
    }
    else {
      uint64_t v427 = 0;
    }
    int v27 = *(unsigned __int16 *)(v13 + 24);
    if (v27 == 35 || v27 == 11) {
      uint64_t v28 = v13;
    }
    else {
      uint64_t v28 = 0;
    }
    uint64_t v430 = v28;
    int v29 = *(unsigned __int16 *)(a9 + 24);
    if (v29 == 35 || v29 == 11) {
      uint64_t v428 = a9;
    }
    else {
      uint64_t v428 = 0;
    }
    uint64_t v425 = v24;
    uint64_t v426 = v25;
    uint64_t v432 = a3;
    int v30 = sub_1CD7F07C8((void *)*v20, v25, v24, a3, a4, a5, a6, a11, a2);
    if (v30)
    {
      BOOL v31 = v30;
      sub_1CCEF0788((uint64_t)v20, (uint64_t)v30);
      int v32 = *((unsigned __int16 *)v31 + 12);
      if (v32 == 35 || v32 == 11)
      {
        uint64_t v34 = v31[10];
        uint64_t v35 = *(unsigned int *)(v34 + 32);
        if (v35 > 0x40)
        {
          int v37 = 0;
          int64_t v38 = (unint64_t)(v35 + 63) >> 6;
          do
          {
            BOOL v39 = v38-- < 1;
            if (v39) {
              break;
            }
            unint64_t v40 = *(void *)(*(void *)(v34 + 24) + 8 * v38);
            v37 += __clz(v40);
          }
          while (!v40);
          int v41 = v35 | 0xFFFFFFC0;
          if ((v35 & 0x3F) == 0) {
            int v41 = 0;
          }
          BOOL v36 = v37 + v41 == v35;
        }
        else
        {
          BOOL v36 = *(void *)(v34 + 24) == 0;
        }
        if (v36) {
          return (uint64_t *)a9;
        }
        else {
          return (uint64_t *)v13;
        }
      }
    }
    uint64_t v424 = a8;
    unsigned int v45 = (void *)(*(void *)(v432 + 40) + 16 * a4);
    uint64_t v417 = a2;
    if (!(*(unsigned int (**)(uint64_t, void, void))(*(void *)v20[1] + 112))(v20[1], *v45, v45[1])) {
      goto LABEL_71;
    }
    int v46 = *(unsigned __int16 *)(v13 + 24);
    if (v46 == 36 || v46 == 12) {
      uint64_t v47 = v13;
    }
    else {
      uint64_t v47 = 0;
    }
    int v48 = *(unsigned __int16 *)(a9 + 24);
    if (v48 != 36 && v48 != 12) {
      goto LABEL_71;
    }
    if (!v47) {
      goto LABEL_71;
    }
    if (!*(unsigned char *)(*(void *)(v13 + 40) + 16 * a8)) {
      goto LABEL_71;
    }
    int v49 = (void *)v20[1];
    if (!v49[*(unsigned __int8 *)(*(void *)(v13 + 40) + 16 * a8) + 12]
      || !*((unsigned char *)v49 + 390 * *(unsigned __int8 *)(*(void *)(v13 + 40) + 16 * a8) + 3874)
      || ((*(uint64_t (**)(void *, uint64_t, void, void, void))(*v49 + 480))(v49, *(void *)(v47 + 80) + 24, **(void **)(v47 + 40), *(void *)(*(void *)(v47 + 40) + 8), *((unsigned __int8 *)v20 + 35)) & 1) != 0|| ((*(uint64_t (**)(uint64_t, uint64_t, void, void, void))(*(void *)v20[1] + 480))(v20[1], *(void *)(a9 + 80) + 24, **(void **)(a9 + 40), *(void *)(*(void *)(a9 + 40) + 8), *((unsigned __int8 *)v20 + 35)) & 1) != 0)
    {
      goto LABEL_71;
    }
    uint64_t v50 = *(void *)(v47 + 48);
    if (!v50 || *(void *)(v50 + 32))
    {
      uint64_t v51 = *(void *)(a9 + 48);
      if (!v51 || *(void *)(v51 + 32)) {
        goto LABEL_71;
      }
    }
    uint64_t v414 = a5;
    uint64_t v52 = *(void *)(v47 + 80);
    v444[0] = *(void *)(a9 + 80);
    v444[1] = v52;
    unint64_t v53 = *(llvm::Type **)v444[0];
    uint64_t v54 = (llvm::DataLayout *)(*(void *)(**(void **)(*v20 + 40) + 40) + 272);
    int v55 = llvm::ArrayType::get(*(llvm::ArrayType **)v444[0], (llvm::Type *)2);
    BOOL v418 = (llvm::Type **)llvm::ConstantArray::get(v55, (llvm::Type *)v444, 2);
    uint64_t v409 = *v20;
    unsigned __int8 v406 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v20[1] + 32))(v20[1], *(void *)(**(void **)(*v20 + 40) + 40) + 272, 0);
    unsigned __int8 Alignment = llvm::DataLayout::getAlignment(v54, v53, 0);
    long long v407 = sub_1CD7ED6C4(v409, v418, (llvm *)v406, 0, Alignment | 0x100u, 0, 0, 0);
    uint64_t v410 = v57;
    uint64_t v404 = *((unsigned __int8 *)v407 + 92);
    uint64_t v58 = sub_1CD7EB364(*v20, 0, a2, 0);
    uint64_t v402 = v59;
    uint64_t v403 = (uint64_t)v58;
    unsigned int v60 = *(llvm::Type **)v444[0];
    unint64_t v61 = (unint64_t)(sub_1CB83544C((uint64_t)v54, *(void *)v444[0]) + 7) >> 3;
    LOBYTE(v418) = v62 == 1;
    char v63 = llvm::DataLayout::getAlignment(v54, v60, 1);
    unint64_t v65 = (1 << v63) + 0xFFFFFFFFLL + v61;
    uint64_t v66 = -(1 << v63);
    if (v418) {
    uint64_t v419 = v20;
    }
    uint64_t v67 = *v20;
    uint64_t v68 = v66 & v65;
    uint64_t v69 = *(unsigned __int8 **)(a9 + 64);
    *(void *)&v439[0] = v69;
    if (v69) {
      llvm::MetadataTracking::track((uint64_t)v439, v69, 2);
    }
    DWORD2(v439[0]) = *(_DWORD *)(a9 + 60);
    uint64_t v70 = sub_1CD7EB364(v67, v68, (const llvm::APInt *)v439, 0);
    uint64_t v401 = v71;
    if (*(void *)&v439[0])
    {
      int v72 = **(unsigned char **)&v439[0];
      if ((v72 - 4) > 0x1E)
      {
        if ((v72 - 3) >= 0xFFFFFFFE) {
          uint64_t v285 = *(void *)&v439[0];
        }
        else {
          uint64_t v285 = 0;
        }
        if ((v72 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v286 = v285 + 8;
LABEL_326:
          uint64_t v443 = v439;
          sub_1CC5FA668(v286 + 16, &v443);
          goto LABEL_64;
        }
        if (v72 == 3) {
          *(void *)(*(void *)&v439[0] + 8) = 0;
        }
      }
      else if ((*(unsigned char *)(*(void *)&v439[0] + 1) & 0x7F) == 2 || *(_DWORD *)(*(void *)&v439[0] + 12))
      {
        uint64_t v393 = *(void *)(*(void *)&v439[0] + 16);
        if ((v393 & 4) != 0)
        {
          unint64_t v286 = v393 & 0xFFFFFFFFFFFFFFF8;
          if (v286) {
            goto LABEL_326;
          }
        }
      }
    }
LABEL_64:
    uint64_t v73 = (void *)*v419;
    uint64_t v74 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t, void, void, void))(*(void *)v419[1] + 400))(v419[1], *(void *)(**(void **)(*v419 + 40) + 40) + 272, *(void *)(*v419 + 56), *(void *)(*(void *)(v432 + 40) + 16 * a4), *(void *)(*(void *)(v432 + 40) + 16 * a4 + 8));
    uint64_t v399 = v75;
    uint64_t v76 = sub_1CD7EE368(v73, a11);
    uint64_t v79 = v73[104];
    if (v79) {
      LOWORD(v79) = *(_WORD *)(v79 + 8);
    }
    __int16 v80 = sub_1CD7F5D38(v73, (const char *)0xC1, v417, v74, v399, v432, (uint64_t)a4, v78, v414, a6, v76, v77, SHIDWORD(v77), v79);
    uint64_t v400 = v81;
    sub_1CCEF0788((uint64_t)v419, (uint64_t)v80);
    uint64_t v82 = *(void *)(v403 + 40) + 16 * v402;
    uint64_t v83 = sub_1CD3E1260((void *)*v419, v417, *(llvm **)v82, *(void *)(v82 + 8), (uint64_t)v80, v400, (uint64_t)v70, v401, v403, v402, SHIDWORD(v402));
    uint64_t v85 = v84;
    sub_1CCEF0788((uint64_t)v419, (uint64_t)v83);
    uint64_t v87 = v407[5] + 16 * v410;
    uint64_t v88 = *(llvm **)v87;
    uint64_t v89 = *(void *)(v87 + 8);
    uint64_t v90 = *(void *)(*v419 + 832);
    if (v90) {
      LOWORD(v90) = *(_WORD *)(v90 + 8);
    }
    uint64_t v91 = sub_1CCFDED5C(*v419, 56, v417, v88, v89, (uint64_t)v407, v410, v86, (uint64_t)v83, v85, v90);
    unint64_t v93 = v410 & 0xFFFFFFFF00000000 | v92;
    BOOL v20 = v419;
    sub_1CCEF0788((uint64_t)v419, (uint64_t)v91);
    uint64_t v94 = *v419;
    uint64_t v95 = *(uint64_t **)(v47 + 40);
    uint64_t v96 = *v95;
    uint64_t v408 = *v419 + 112;
    uint64_t v411 = v95[1];
    uint64_t ConstantPool = llvm::PseudoSourceValueManager::getConstantPool(*(llvm::PseudoSourceValueManager **)(*(void *)(*v419 + 40) + 432));
    int v98 = 0;
    *(void *)&long long v440 = ConstantPool | 4;
    *((void *)&v440 + 1) = 0;
    char v442 = 0;
    if (ConstantPool) {
      int v98 = *(_DWORD *)(ConstantPool + 12);
    }
    int v441 = v98;
    memset(v439, 0, sizeof(v439));
    uint64_t v99 = (uint64_t)sub_1CD7F00F8(v94, v96, v411, (uint64_t)v417, v408, 0, (uint64_t)v91, v93, &v440, (unsigned __int16)v404 | 0x100u, (v404 | 0x100uLL) >> 32, 0, v439, 0);
    uint64_t v14 = a10;
    a5 = v414;
    uint64_t v15 = a9;
    if (v99) {
      return (uint64_t *)v99;
    }
LABEL_71:
    uint64_t v100 = (uint64_t *)(*(void *)(v432 + 40) + 16 * a4);
    uint64_t v102 = *v100;
    uint64_t v101 = v100[1];
    *(void *)&v439[0] = *v100;
    *((void *)&v439[0] + 1) = v101;
    uint64_t v103 = *(void *)(v13 + 40) + 16 * a8;
    uint64_t v420 = *(llvm **)v103;
    uint64_t v415 = *(void *)(v103 + 8);
    BOOL v104 = sub_1CD7F2D2C(v15);
    unsigned int v106 = a11;
    if (!v104
      || (v102 != v420 || !(_BYTE)v102 && v101 != v415)
      && (v138 = sub_1CD787E7C((unsigned __int8 *)v439, (uint64_t)v420, v415), unsigned int v106 = a11, !v138))
    {
LABEL_79:
      if (v106 == 17 && *(_WORD *)(v432 + 24) == 171)
      {
        uint64_t v107 = *(unsigned __int8 **)(v432 + 40);
        if (*v107 == v436 && (*v107 || *((void *)v107 + 1) == *((void *)&v436 + 1)))
        {
          BOOL v217 = sub_1CD7F2D2C(a5);
          unsigned int v106 = a11;
          if (v217)
          {
            BOOL v218 = sub_1CD7F2D2C(v13);
            unsigned int v106 = a11;
            if (v218)
            {
              uint64_t v219 = *(uint64_t **)(v432 + 32);
              uint64_t v413 = v219[1];
              uint64_t v416 = *v219;
              uint64_t v220 = v219[5];
              int v221 = *(unsigned __int16 *)(v220 + 24);
              if (v221 == 35 || v221 == 11)
              {
                uint64_t v405 = v14;
                int v421 = v20;
                uint64_t v423 = *(int8x8_t **)(v220 + 80);
                uint64_t v222 = v423[4].u32[0];
                if (v222 > 0x40)
                {
                  __int32 v224 = 0;
                  unint64_t v330 = (unint64_t)(v222 + 63) >> 6;
                  uint64_t v331 = (int8x8_t *)v423[3];
                  do
                  {
                    int8x8_t v332 = *v331++;
                    uint8x8_t v333 = (uint8x8_t)vcnt_s8(v332);
                    v333.i16[0] = vaddlv_u8(v333);
                    v224 += v333.i32[0];
                    --v330;
                  }
                  while (v330);
                }
                else
                {
                  uint8x8_t v223 = (uint8x8_t)vcnt_s8(v423[3]);
                  v223.i16[0] = vaddlv_u8(v223);
                  __int32 v224 = v223.i32[0];
                }
                unsigned int v106 = a11;
                uint64_t v15 = a9;
                if (v224 == 1)
                {
                  uint64_t v334 = (v222 - 1);
                  char v335 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v20[1] + 1456))(v20[1], v436, *((void *)&v436 + 1));
                  unsigned int v106 = a11;
                  if ((v335 & 1) == 0)
                  {
                    uint64_t v336 = *v20;
                    uint64_t v337 = v423[4].u32[0];
                    if (v337 > 0x40)
                    {
                      int v343 = 0;
                      int64_t v344 = (unint64_t)(v337 + 63) >> 6;
                      do
                      {
                        BOOL v39 = v344-- < 1;
                        if (v39) {
                          break;
                        }
                        unint64_t v345 = *(void *)(*(void *)&v423[3] + 8 * v344);
                        v343 += __clz(v345);
                      }
                      while (!v345);
                      if ((v337 & 0x3F) != 0) {
                        int v346 = v337 | 0xFFFFFFC0;
                      }
                      else {
                        int v346 = 0;
                      }
                      unsigned int v338 = v343 + v346;
                    }
                    else
                    {
                      unsigned int v338 = v337 + __clz(*(void *)&v423[3]) - 64;
                    }
                    uint64_t v347 = v338;
                    uint64_t v348 = *(unsigned __int8 **)(v416 + 64);
                    *(void *)&v439[0] = v348;
                    uint64_t v349 = v336;
                    if (v348)
                    {
                      llvm::MetadataTracking::track((uint64_t)v439, v348, 2);
                      uint64_t v349 = *v421;
                    }
                    DWORD2(v439[0]) = *(_DWORD *)(v416 + 60);
                    int v350 = (uint64_t *)(*(void *)(v416 + 40) + 16 * v413);
                    unint64_t ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy((uint64_t *)v421[1], *v350, v350[1], *(void *)(**(void **)(v349 + 40) + 40) + 272, *((unsigned __int8 *)v421 + 34));
                    uint64_t v354 = sub_1CD7EBF14(v336, v347, (const llvm::APInt *)v439, ShiftAmountTy, v352, 0, 0);
                    uint64_t v356 = v355;
                    if (*(void *)&v439[0])
                    {
                      int v357 = **(unsigned char **)&v439[0];
                      if ((v357 - 4) > 0x1E)
                      {
                        if ((v357 - 3) >= 0xFFFFFFFE) {
                          uint64_t v389 = *(void *)&v439[0];
                        }
                        else {
                          uint64_t v389 = 0;
                        }
                        if ((v357 - 3) >= 0xFFFFFFFE)
                        {
                          unint64_t v390 = v389 + 8;
LABEL_469:
                          *(void *)&long long v440 = v439;
                          sub_1CC5FA668(v390 + 16, &v440);
                          goto LABEL_427;
                        }
                        if (v357 == 3) {
                          *(void *)(*(void *)&v439[0] + 8) = 0;
                        }
                      }
                      else if ((*(unsigned char *)(*(void *)&v439[0] + 1) & 0x7F) == 2 {
                             || *(_DWORD *)(*(void *)&v439[0] + 12))
                      }
                      {
                        uint64_t v397 = *(void *)(*(void *)&v439[0] + 16);
                        if ((v397 & 4) != 0)
                        {
                          unint64_t v390 = v397 & 0xFFFFFFFFFFFFFFF8;
                          if (v390) {
                            goto LABEL_469;
                          }
                        }
                      }
                    }
LABEL_427:
                    uint64_t v358 = *v421;
                    BOOL v359 = *(unsigned __int8 **)(v432 + 64);
                    *(void *)&v439[0] = v359;
                    if (v359) {
                      llvm::MetadataTracking::track((uint64_t)v439, v359, 2);
                    }
                    DWORD2(v439[0]) = *(_DWORD *)(v432 + 60);
                    uint64_t v360 = *(void *)(v358 + 832);
                    if (v360) {
                      LOWORD(v360) = *(_WORD *)(v360 + 8);
                    }
                    uint64_t v361 = sub_1CCFDED5C(v358, 175, (const llvm::APInt *)v439, (llvm *)v436, *((uint64_t *)&v436 + 1), v416, v413, v353, (uint64_t)v354, v356, v360);
                    uint64_t v363 = v362;
                    if (*(void *)&v439[0])
                    {
                      int v364 = **(unsigned char **)&v439[0];
                      if ((v364 - 4) > 0x1E)
                      {
                        if ((v364 - 3) >= 0xFFFFFFFE) {
                          uint64_t v391 = *(void *)&v439[0];
                        }
                        else {
                          uint64_t v391 = 0;
                        }
                        if ((v364 - 3) >= 0xFFFFFFFE)
                        {
                          unint64_t v392 = v391 + 8;
LABEL_475:
                          *(void *)&long long v440 = v439;
                          sub_1CC5FA668(v392 + 16, &v440);
                          goto LABEL_435;
                        }
                        if (v364 == 3) {
                          *(void *)(*(void *)&v439[0] + 8) = 0;
                        }
                      }
                      else if ((*(unsigned char *)(*(void *)&v439[0] + 1) & 0x7F) == 2 {
                             || *(_DWORD *)(*(void *)&v439[0] + 12))
                      }
                      {
                        uint64_t v398 = *(void *)(*(void *)&v439[0] + 16);
                        if ((v398 & 4) != 0)
                        {
                          unint64_t v392 = v398 & 0xFFFFFFFFFFFFFFF8;
                          if (v392) {
                            goto LABEL_475;
                          }
                        }
                      }
                    }
LABEL_435:
                    uint64_t v365 = *v421;
                    unsigned int v366 = (unsigned __int8 *)v361[8];
                    *(void *)&v439[0] = v366;
                    uint64_t v367 = v365;
                    if (v366)
                    {
                      llvm::MetadataTracking::track((uint64_t)v439, v366, 2);
                      uint64_t v367 = *v421;
                    }
                    DWORD2(v439[0]) = *((_DWORD *)v361 + 15);
                    uint64_t v368 = (uint64_t *)(v361[5] + 16 * v363);
                    uint64_t v369 = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy((uint64_t *)v421[1], *v368, v368[1], *(void *)(**(void **)(v367 + 40) + 40) + 272, *((unsigned __int8 *)v421 + 34));
                    uint64_t v372 = sub_1CD7EBF14(v365, v334, (const llvm::APInt *)v439, v369, v370, 0, 0);
                    uint64_t v374 = v373;
                    if (*(void *)&v439[0])
                    {
                      int v375 = **(unsigned char **)&v439[0];
                      if ((v375 - 4) > 0x1E)
                      {
                        if ((v375 - 3) >= 0xFFFFFFFE) {
                          uint64_t v385 = *(void *)&v439[0];
                        }
                        else {
                          uint64_t v385 = 0;
                        }
                        if ((v375 - 3) >= 0xFFFFFFFE)
                        {
                          unint64_t v386 = v385 + 8;
LABEL_457:
                          *(void *)&long long v440 = v439;
                          sub_1CC5FA668(v386 + 16, &v440);
                          goto LABEL_441;
                        }
                        if (v375 == 3) {
                          *(void *)(*(void *)&v439[0] + 8) = 0;
                        }
                      }
                      else if ((*(unsigned char *)(*(void *)&v439[0] + 1) & 0x7F) == 2 {
                             || *(_DWORD *)(*(void *)&v439[0] + 12))
                      }
                      {
                        uint64_t v395 = *(void *)(*(void *)&v439[0] + 16);
                        if ((v395 & 4) != 0)
                        {
                          unint64_t v386 = v395 & 0xFFFFFFFFFFFFFFF8;
                          if (v386) {
                            goto LABEL_457;
                          }
                        }
                      }
                    }
LABEL_441:
                    uint64_t v376 = *v421;
                    uint64_t v377 = *(unsigned __int8 **)(v432 + 64);
                    *(void *)&v439[0] = v377;
                    if (v377) {
                      llvm::MetadataTracking::track((uint64_t)v439, v377, 2);
                    }
                    DWORD2(v439[0]) = *(_DWORD *)(v432 + 60);
                    uint64_t v378 = *(void *)(v376 + 832);
                    if (v378) {
                      LOWORD(v378) = *(_WORD *)(v378 + 8);
                    }
                    int v380 = sub_1CCFDED5C(v376, 176, (const llvm::APInt *)v439, (llvm *)v436, *((uint64_t *)&v436 + 1), (uint64_t)v361, v363, v371, (uint64_t)v372, v374, v378);
                    uint64_t v382 = v381;
                    if (!*(void *)&v439[0]) {
                      goto LABEL_449;
                    }
                    int v383 = **(unsigned char **)&v439[0];
                    if ((v383 - 4) > 0x1E)
                    {
                      if ((v383 - 3) >= 0xFFFFFFFE) {
                        uint64_t v387 = *(void *)&v439[0];
                      }
                      else {
                        uint64_t v387 = 0;
                      }
                      if ((v383 - 3) < 0xFFFFFFFE)
                      {
                        if (v383 == 3) {
                          *(void *)(*(void *)&v439[0] + 8) = 0;
                        }
                        goto LABEL_449;
                      }
                      unint64_t v388 = v387 + 8;
                    }
                    else
                    {
                      if ((*(unsigned char *)(*(void *)&v439[0] + 1) & 0x7F) != 2
                        && !*(_DWORD *)(*(void *)&v439[0] + 12))
                      {
                        goto LABEL_449;
                      }
                      uint64_t v396 = *(void *)(*(void *)&v439[0] + 16);
                      if ((v396 & 4) == 0) {
                        goto LABEL_449;
                      }
                      unint64_t v388 = v396 & 0xFFFFFFFFFFFFFFF8;
                      if (!v388) {
                        goto LABEL_449;
                      }
                    }
                    *(void *)&long long v440 = v439;
                    sub_1CC5FA668(v388 + 16, &v440);
LABEL_449:
                    uint64_t v384 = *(void *)(*v421 + 832);
                    if (v384) {
                      LOWORD(v384) = *(_WORD *)(v384 + 8);
                    }
                    return sub_1CCFDED5C(*v421, 171, v417, (llvm *)v436, *((uint64_t *)&v436 + 1), (uint64_t)v380, v382, v379, a9, v405, v384);
                  }
                }
              }
            }
          }
        }
      }
LABEL_84:
      uint64_t v108 = v430;
      if (v430)
      {
        if (sub_1CD7F2D2C(v15))
        {
          uint64_t v110 = v428;
          uint64_t v108 = v430;
          uint64_t v127 = *(void *)(v430 + 80);
          uint64_t v128 = *(unsigned int *)(v127 + 32);
          unsigned int v106 = a11;
          if (v128 > 0x40)
          {
            int v200 = 0;
            unint64_t v201 = (unint64_t)(v128 + 63) >> 6;
            char v202 = *(int8x8_t **)(v127 + 24);
            do
            {
              int8x8_t v203 = *v202++;
              uint8x8_t v204 = (uint8x8_t)vcnt_s8(v203);
              v204.i16[0] = vaddlv_u8(v204);
              v200 += v204.i32[0];
              --v201;
            }
            while (v201);
            BOOL v109 = v200 == 1;
          }
          else
          {
            uint64_t v129 = *(void *)(v127 + 24);
            if (v129) {
              BOOL v109 = (v129 & (v129 - 1)) == 0;
            }
            else {
              BOOL v109 = 0;
            }
          }
        }
        else
        {
          BOOL v109 = 0;
          uint64_t v110 = v428;
          uint64_t v108 = v430;
          unsigned int v106 = a11;
        }
      }
      else
      {
        BOOL v109 = 0;
        uint64_t v110 = v428;
      }
      if (v110)
      {
        if (sub_1CD7F2D2C(v13))
        {
          uint64_t v110 = v428;
          uint64_t v108 = v430;
          uint64_t v130 = *(void *)(v428 + 80);
          uint64_t v131 = *(unsigned int *)(v130 + 32);
          unsigned int v106 = a11;
          if (v131 > 0x40)
          {
            int v205 = 0;
            unint64_t v206 = (unint64_t)(v131 + 63) >> 6;
            unint64_t v207 = *(int8x8_t **)(v130 + 24);
            do
            {
              int8x8_t v208 = *v207++;
              uint8x8_t v209 = (uint8x8_t)vcnt_s8(v208);
              v209.i16[0] = vaddlv_u8(v209);
              v205 += v209.i32[0];
              --v206;
            }
            while (v206);
            BOOL v111 = v205 == 1;
          }
          else
          {
            uint64_t v132 = *(void *)(v130 + 24);
            if (v132) {
              BOOL v111 = (v132 & (v132 - 1)) == 0;
            }
            else {
              BOOL v111 = 0;
            }
          }
        }
        else
        {
          BOOL v111 = 0;
          uint64_t v110 = v428;
          uint64_t v108 = v430;
          unsigned int v106 = a11;
        }
      }
      else
      {
        BOOL v111 = 0;
      }
      int v112 = a12;
      if (v109 || v111)
      {
        int v133 = sub_1CD7879C8((unsigned int *)v20[1], (char)v22, v23);
        uint64_t v110 = v428;
        uint64_t v108 = v430;
        unsigned int v106 = a11;
        BOOL v16 = v133 == 1;
        int v112 = a12;
        if (v16)
        {
          if (!*((unsigned char *)v20 + 33)
            || (_BYTE)v22
            && ((unsigned int v134 = (void *)v20[1], v22 == 1) || v134[v22 + 12])
            && !*((unsigned char *)v134 + 390 * v22 + 4055))
          {
            if (v111)
            {
              uint64_t v135 = v428;
              unsigned int v106 = sub_1CD7E9F74(a11, v22, v23);
              if (!a12) {
                goto LABEL_294;
              }
            }
            else
            {
              uint64_t v135 = v430;
              if (!a12) {
                goto LABEL_294;
              }
            }
            uint64_t v136 = *(void *)(v135 + 80);
            uint64_t v137 = *(unsigned int *)(v136 + 32);
            if (v137 > 0x40)
            {
              int v213 = 0;
              int64_t v214 = (unint64_t)(v137 + 63) >> 6;
              do
              {
                BOOL v39 = v214-- < 1;
                if (v39) {
                  break;
                }
                unint64_t v215 = *(void *)(*(void *)(v136 + 24) + 8 * v214);
                v213 += __clz(v215);
              }
              while (!v215);
              int v216 = v137 | 0xFFFFFFC0;
              if ((v137 & 0x3F) == 0) {
                int v216 = 0;
              }
              if (v213 + v216 == v137 - 1) {
                return 0;
              }
            }
            else if (*(void *)(v136 + 24) == 1)
            {
              return 0;
            }
LABEL_294:
            unsigned int v258 = v106;
            unsigned int v259 = (void *)*v20;
            if (!*((unsigned char *)v20 + 34))
            {
              int v260 = *(unsigned __int8 **)(v432 + 64);
              *(void *)&v439[0] = v260;
              if (v260) {
                llvm::MetadataTracking::track((uint64_t)v439, v260, 2);
              }
              DWORD2(v439[0]) = *(_DWORD *)(v432 + 60);
              uint64_t v261 = sub_1CD3DC614(v259, (const llvm::APInt *)v439, (llvm *)2, 0, v432, (uint64_t)a4, a5, a6, v258, 0, 0, 0, 0);
              uint64_t v263 = v262;
              if (!*(void *)&v439[0]) {
                goto LABEL_356;
              }
              int v264 = **(unsigned char **)&v439[0];
              if ((v264 - 4) > 0x1E)
              {
                if ((v264 - 3) >= 0xFFFFFFFE) {
                  uint64_t v295 = *(void *)&v439[0];
                }
                else {
                  uint64_t v295 = 0;
                }
                if ((v264 - 3) < 0xFFFFFFFE)
                {
                  if (v264 == 3) {
                    *(void *)(*(void *)&v439[0] + 8) = 0;
                  }
                  goto LABEL_356;
                }
                unint64_t v266 = v295 + 8;
              }
              else
              {
                if ((*(unsigned char *)(*(void *)&v439[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(*(void *)&v439[0] + 12)) {
                  goto LABEL_356;
                }
                uint64_t v265 = *(void *)(*(void *)&v439[0] + 16);
                if ((v265 & 4) == 0) {
                  goto LABEL_356;
                }
                unint64_t v266 = v265 & 0xFFFFFFFFFFFFFFF8;
                if (!v266) {
                  goto LABEL_356;
                }
              }
              *(void *)&long long v440 = v439;
              sub_1CC5FA668(v266 + 16, &v440);
LABEL_356:
              int v297 = (llvm::APFloatBase *)*v20;
              uint64_t v298 = *(unsigned __int8 **)(v13 + 64);
              *(void *)&v439[0] = v298;
              if (v298) {
                llvm::MetadataTracking::track((uint64_t)v439, v298, 2);
              }
              DWORD2(v439[0]) = *(_DWORD *)(v13 + 60);
              uint64_t v299 = *((void *)v297 + 104);
              if (v299) {
                __int16 v300 = *(_WORD *)(v299 + 8);
              }
              else {
                __int16 v300 = 0;
              }
              uint64_t v283 = sub_1CD7F3564(v297, (const char *)0xC7, (uint64_t)v439, (llvm *)v436, *((uint64_t *)&v436 + 1), (uint64_t)v261, (void *)v263, v300);
              goto LABEL_362;
            }
            uint64_t v261 = sub_1CD3DC614(v259, v417, v426, v425, v432, (uint64_t)a4, a5, a6, v106, 0, 0, 0, 0);
            uint64_t v263 = v267;
            unsigned __int8 v268 = (uint64_t *)(v261[5] + 16 * v267);
            uint64_t v270 = *v268;
            uint64_t v269 = v268[1];
            if (v436 == v270)
            {
              if ((_BYTE)v436 || *((void *)&v436 + 1) == v269) {
                goto LABEL_356;
              }
              *(void *)&v439[0] = v270;
              *((void *)&v439[0] + 1) = v269;
            }
            else
            {
              *(void *)&v439[0] = v270;
              *((void *)&v439[0] + 1) = v269;
              if ((_BYTE)v436)
              {
                uint64_t v271 = sub_1CB87E200((unsigned __int8 *)&v436);
LABEL_313:
                unint64_t v277 = v271;
                int v278 = v272;
                if ((_BYTE)v270) {
                  unint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)v439);
                }
                else {
                  unint64_t ExtendedSizeInBits = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v439);
                }
                if ((v278 != 1 || v280 == 1) && v277 < ExtendedSizeInBits)
                {
                  uint64_t v281 = *v20;
                  int v282 = *(unsigned __int8 **)(v13 + 64);
                  *(void *)&v439[0] = v282;
                  if (v282) {
                    llvm::MetadataTracking::track((uint64_t)v439, v282, 2);
                  }
                  DWORD2(v439[0]) = *(_DWORD *)(v13 + 60);
                  uint64_t v283 = sub_1CD7EB9C8(v281, (uint64_t)v261, v263, (const llvm::APInt *)v439, v436, *((uint64_t *)&v436 + 1));
LABEL_362:
                  unsigned int v43 = v283;
                  unsigned int v301 = v284;
                  if (!*(void *)&v439[0]) {
                    goto LABEL_366;
                  }
                  int v302 = **(unsigned char **)&v439[0];
                  if ((v302 - 4) > 0x1E)
                  {
                    if ((v302 - 3) >= 0xFFFFFFFE) {
                      uint64_t v328 = *(void *)&v439[0];
                    }
                    else {
                      uint64_t v328 = 0;
                    }
                    if ((v302 - 3) >= 0xFFFFFFFE)
                    {
                      unint64_t v329 = v328 + 8;
LABEL_392:
                      *(void *)&long long v440 = v439;
                      sub_1CC5FA668(v329 + 16, &v440);
                      goto LABEL_366;
                    }
                    if (v302 == 3) {
                      *(void *)(*(void *)&v439[0] + 8) = 0;
                    }
                  }
                  else if ((*(unsigned char *)(*(void *)&v439[0] + 1) & 0x7F) == 2 {
                         || *(_DWORD *)(*(void *)&v439[0] + 12))
                  }
                  {
                    uint64_t v394 = *(void *)(*(void *)&v439[0] + 16);
                    if ((v394 & 4) != 0)
                    {
                      unint64_t v329 = v394 & 0xFFFFFFFFFFFFFFF8;
                      if (v329) {
                        goto LABEL_392;
                      }
                    }
                  }
LABEL_366:
                  uint64_t v303 = v301;
                  sub_1CCEF0788((uint64_t)v20, (uint64_t)v261);
                  sub_1CCEF0788((uint64_t)v20, (uint64_t)v43);
                  uint64_t v304 = *(void *)(v135 + 80);
                  uint64_t v305 = *(unsigned int *)(v304 + 32);
                  if (v305 > 0x40)
                  {
                    int v308 = 0;
                    int64_t v309 = (unint64_t)(v305 + 63) >> 6;
                    do
                    {
                      BOOL v39 = v309-- < 1;
                      if (v39) {
                        break;
                      }
                      unint64_t v310 = *(void *)(*(void *)(v304 + 24) + 8 * v309);
                      v308 += __clz(v310);
                    }
                    while (!v310);
                    int v311 = v305 | 0xFFFFFFC0;
                    if ((v305 & 0x3F) == 0) {
                      int v311 = 0;
                    }
                    int v307 = v308 + v311;
                    if (v307 == v305 - 1) {
                      return v43;
                    }
                  }
                  else
                  {
                    unint64_t v306 = *(void *)(v304 + 24);
                    if (v306 == 1) {
                      return v43;
                    }
                    int v307 = v305 + __clz(v306) - 64;
                  }
                  uint64_t v312 = (v305 + ~v307);
                  if (((*(uint64_t (**)(uint64_t, void, void, uint64_t))(*(void *)v20[1] + 1456))(v20[1], v436, *((void *)&v436 + 1), v312) & 1) == 0)
                  {
                    uint64_t v313 = *v20;
                    uint64_t v314 = *(void *)(v13 + 40) + 16 * v424;
                    uint64_t v315 = *(llvm **)v314;
                    uint64_t v316 = *(void *)(v314 + 8);
                    uint64_t v317 = (unsigned __int8 *)v43[8];
                    *(void *)&v439[0] = v317;
                    uint64_t v318 = v313;
                    if (v317)
                    {
                      llvm::MetadataTracking::track((uint64_t)v439, v317, 2);
                      uint64_t v318 = *v20;
                    }
                    DWORD2(v439[0]) = *((_DWORD *)v43 + 15);
                    uint64_t v319 = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy((uint64_t *)v20[1], *(void *)(v43[5] + 16 * v303), *(void *)(v43[5] + 16 * v303 + 8), *(void *)(**(void **)(v318 + 40) + 40) + 272, *((unsigned __int8 *)v20 + 34));
                    unsigned int v321 = sub_1CD7EBF14(v313, v312, (const llvm::APInt *)v439, v319, v320, 0, 0);
                    uint64_t v324 = *(void *)(v313 + 832);
                    if (v324) {
                      LOWORD(v324) = *(_WORD *)(v324 + 8);
                    }
                    unsigned int v43 = sub_1CCFDED5C(v313, 175, v417, v315, v316, (uint64_t)v43, v303, v323, (uint64_t)v321, v322, v324);
                    if (!*(void *)&v439[0]) {
                      return v43;
                    }
                    int v325 = **(unsigned char **)&v439[0];
                    if ((v325 - 4) > 0x1E)
                    {
                      if ((v325 - 3) >= 0xFFFFFFFE) {
                        uint64_t v342 = *(void *)&v439[0];
                      }
                      else {
                        uint64_t v342 = 0;
                      }
                      if ((v325 - 3) < 0xFFFFFFFE)
                      {
                        if (v325 == 3) {
                          *(void *)(*(void *)&v439[0] + 8) = 0;
                        }
                        return v43;
                      }
                      unint64_t v327 = v342 + 8;
                    }
                    else
                    {
                      if ((*(unsigned char *)(*(void *)&v439[0] + 1) & 0x7F) != 2
                        && !*(_DWORD *)(*(void *)&v439[0] + 12))
                      {
                        return v43;
                      }
                      uint64_t v326 = *(void *)(*(void *)&v439[0] + 16);
                      if ((v326 & 4) == 0) {
                        return v43;
                      }
                      unint64_t v327 = v326 & 0xFFFFFFFFFFFFFFF8;
                      if (!v327) {
                        return v43;
                      }
                    }
                    *(void *)&long long v440 = v439;
                    sub_1CC5FA668(v327 + 16, &v440);
                    return v43;
                  }
                  return 0;
                }
                goto LABEL_356;
              }
            }
            uint64_t v271 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v436);
            goto LABEL_313;
          }
        }
      }
      if (!v427)
      {
LABEL_201:
        uint64_t v176 = a5;
        uint64_t v177 = v15;
        uint64_t v178 = a5;
        int v179 = v106;
        uint64_t v99 = sub_1CCF46444(v432, (int)a4, v176, a6, v13, a8, v177, v14, v106, *v20);
        if (!v99) {
          return (uint64_t *)sub_1CCF46C30(v432, (int)a4, v178, a6, v13, a8, a9, v14, v179, *v20);
        }
        return (uint64_t *)v99;
      }
      uint64_t v113 = *(void *)(v427 + 80);
      uint64_t v114 = *(unsigned int *)(v113 + 32);
      if (v114 > 0x40)
      {
        int v115 = 0;
        int64_t v116 = (unint64_t)(v114 + 63) >> 6;
        do
        {
          BOOL v39 = v116-- < 1;
          if (v39) {
            break;
          }
          unint64_t v117 = *(void *)(*(void *)(v113 + 24) + 8 * v116);
          v115 += __clz(v117);
        }
        while (!v117);
        int v118 = v114 | 0xFFFFFFC0;
        if ((v114 & 0x3F) == 0) {
          int v118 = 0;
        }
        if (v115 + v118 != v114) {
          goto LABEL_166;
        }
      }
      else if (*(void *)(v113 + 24))
      {
        goto LABEL_166;
      }
      if (v106 != 22 && v106 != 17) {
        goto LABEL_166;
      }
      uint64_t v119 = v106 == 22 ? v15 : v13;
      uint64_t v120 = v106 == 22 ? v13 : v15;
      int v121 = *(unsigned __int16 *)(v119 + 24);
      if (v121 != 35 && v121 != 11) {
        goto LABEL_166;
      }
      int v123 = v112;
      uint64_t v124 = *(void *)(v119 + 80);
      if ((_BYTE)v436) {
        uint64_t v125 = sub_1CB87E200((unsigned __int8 *)&v436);
      }
      else {
        uint64_t v125 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v436);
      }
      uint64_t v139 = v125;
      int v112 = v123;
      if (v126 == 1)
      {
        int v112 = v123;
      }
      BOOL v140 = (void *)(v124 + 24);
      uint64_t v141 = *(unsigned int *)(v124 + 32);
      uint64_t v110 = v428;
      uint64_t v108 = v430;
      unsigned int v106 = a11;
      if (v141 < 0x41) {
        goto LABEL_149;
      }
      int v142 = 0;
      int64_t v143 = (unint64_t)(v141 + 63) >> 6;
      do
      {
        BOOL v39 = v143-- < 1;
        if (v39) {
          break;
        }
        unint64_t v144 = *(void *)(*v140 + 8 * v143);
        v142 += __clz(v144);
      }
      while (!v144);
      int v145 = v141 | 0xFFFFFFC0;
      if ((v141 & 0x3F) == 0) {
        int v145 = 0;
      }
      if ((v141 - v142 - v145) <= 0x40)
      {
        BOOL v140 = (void *)*v140;
LABEL_149:
        if (*v140 != v139) {
          goto LABEL_166;
        }
        switch(*(_WORD *)(v120 + 24))
        {
          case 0xB7:
          case 0xBC:
            uint64_t v146 = *(void *)(v120 + 32);
            if (*(void *)v146 == v432
              && *(_DWORD *)(v146 + 8) == a4
              && ((uint64_t v147 = (llvm *)v436, !*((unsigned char *)v20 + 33))
               || (_BYTE)v436
               && ((uint64_t v148 = (void *)v20[1], v436 == 1) || v148[v436 + 12])
               && !*((unsigned char *)v148 + 390 * v436 + 4045)))
            {
              uint64_t v273 = (llvm::APFloatBase *)*v20;
              uint64_t v274 = *((void *)&v436 + 1);
              uint64_t v287 = *(void *)(*v20 + 832);
              if (v287) {
                __int16 v276 = *(_WORD *)(v287 + 8);
              }
              else {
                __int16 v276 = 0;
              }
              uint64_t v294 = 183;
            }
            else
            {
              if (*(_WORD *)(v120 + 24) != 184) {
                break;
              }
LABEL_159:
              uint64_t v149 = *(void *)(v120 + 32);
              if (*(void *)v149 != v432 || *(_DWORD *)(v149 + 8) != a4) {
                break;
              }
              uint64_t v147 = (llvm *)v436;
              if (*((unsigned char *)v20 + 33))
              {
                if (!(_BYTE)v436) {
                  break;
                }
                uint64_t v150 = (void *)v20[1];
                if (v436 != 1 && !v150[v436 + 12]) {
                  break;
                }
                if (*((unsigned char *)v150 + 390 * v436 + 4046)) {
                  break;
                }
              }
              uint64_t v273 = (llvm::APFloatBase *)*v20;
              uint64_t v274 = *((void *)&v436 + 1);
              uint64_t v275 = *(void *)(*v20 + 832);
              if (v275) {
                __int16 v276 = *(_WORD *)(v275 + 8);
              }
              else {
                __int16 v276 = 0;
              }
              uint64_t v294 = 184;
            }
            return sub_1CD7F3564(v273, (const char *)v294, (uint64_t)v417, v147, v274, v432, a4, v276);
          case 0xB8:
          case 0xBD:
            goto LABEL_159;
          default:
            break;
        }
      }
LABEL_166:
      if (!v108 || v112 || !v110) {
        goto LABEL_201;
      }
      uint64_t v151 = *(void *)(v108 + 80);
      uint64_t v152 = *(void *)(v110 + 80);
      unsigned int v153 = *(_DWORD *)(v152 + 32);
      if (v153 > 0x40) {
        operator new[]();
      }
      unint64_t v154 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v153;
      if (!v153) {
        unint64_t v154 = 0;
      }
      uint64_t v155 = (const void *)(v154 & ~*(void *)(v152 + 24));
      uint64_t v156 = *(unsigned int *)(v151 + 32);
      uint64_t v157 = v417;
      if (v156 > 0x40)
      {
        int v162 = memcmp(*(const void **)(v151 + 24), v155, ((unint64_t)(v156 + 63) >> 3) & 0x3FFFFFF8);
        unsigned int v106 = a11;
        if (!v162)
        {
LABEL_176:
          uint64_t v158 = *(void *)(v427 + 80);
          int v159 = (llvm::APInt *)(v158 + 24);
          uint64_t v160 = *(unsigned int *)(v158 + 32);
          if (v160)
          {
            if (v160 > 0x40)
            {
              uint64_t v165 = (void *)(v158 + 24);
              int v166 = llvm::APInt::countTrailingOnesSlowCase(v159);
              uint64_t v167 = v165;
              uint64_t v157 = v417;
              unsigned int v106 = a11;
              if (a11 == 18 && v166 == v160) {
                goto LABEL_199;
              }
              int v168 = 0;
              int64_t v169 = (unint64_t)(v160 + 63) >> 6;
              do
              {
                BOOL v39 = v169-- < 1;
                if (v39) {
                  break;
                }
                unint64_t v170 = *(void *)(*v167 + 8 * v169);
                v168 += __clz(v170);
              }
              while (!v170);
              int v171 = v160 | 0xFFFFFFC0;
              if ((v160 & 0x3F) == 0) {
                int v171 = 0;
              }
              BOOL v164 = v168 + v171 == v160;
              goto LABEL_194;
            }
            uint64_t v161 = *(void *)v159;
            if (v106 == 18 && v161 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v160) {
              goto LABEL_199;
            }
          }
          else
          {
            if (v106 == 18) {
              goto LABEL_199;
            }
            uint64_t v161 = *(void *)v159;
          }
          BOOL v164 = v161 == 0;
LABEL_194:
          int v172 = v164;
          int v163 = 0;
          if (v106 != 20 || !v172)
          {
LABEL_200:
            if (v163)
            {
              uint64_t v180 = *v20;
              uint64_t v181 = v437;
              uint64_t v182 = v438;
              uint64_t v183 = sub_1CD3E12F4((unsigned __int8 *)&v437, v108, v105);
              uint64_t v184 = sub_1CD7EBF14(v180, (uint64_t)v183 - 1, v157, v437, v438, 0, 0);
              uint64_t v187 = *(void *)(v180 + 832);
              if (v187) {
                LOWORD(v187) = *(_WORD *)(v187 + 8);
              }
              int v188 = sub_1CCFDED5C(v180, 176, v157, v181, v182, v432, (uint64_t)a4, v186, (uint64_t)v184, v185, v187);
              uint64_t v189 = *v20;
              long long v190 = v436;
              uint64_t v435 = sub_1CD7EB744(*v20, (uint64_t)v188, v191, (uint64_t)v157, v436, *((uint64_t *)&v436 + 1));
              uint64_t v193 = v192;
              if (a11 == 20) {
                uint64_t v194 = v15;
              }
              else {
                uint64_t v194 = v13;
              }
              if (a11 == 20) {
                uint64_t v195 = v14;
              }
              else {
                uint64_t v195 = a8;
              }
              uint64_t v196 = sub_1CD7EB744(*v20, v194, v195, (uint64_t)v157, v436, *((uint64_t *)&v436 + 1));
              uint64_t v199 = *(void *)(v189 + 832);
              if (v199) {
                LOWORD(v199) = *(_WORD *)(v199 + 8);
              }
              return sub_1CCFDED5C(v189, 173, v417, (llvm *)v190, *((uint64_t *)&v190 + 1), v435, v193, v198, v196, v197, v199);
            }
            goto LABEL_201;
          }
LABEL_199:
          int v173 = (void *)v20[1];
          uint64_t v429 = *((void *)&v436 + 1);
          uint64_t v431 = v436;
          unsigned int v174 = sub_1CD3E12F4((unsigned __int8 *)&v437, v108, v105);
          int v175 = (*(uint64_t (**)(void *, uint64_t, uint64_t, void))(*v173 + 1456))(v173, v431, v429, v174 - 1);
          unsigned int v106 = a11;
          int v163 = v175 ^ 1;
          goto LABEL_200;
        }
      }
      else
      {
        unsigned int v106 = a11;
        if (*(const void **)(v151 + 24) == v155) {
          goto LABEL_176;
        }
      }
      int v163 = 0;
      goto LABEL_200;
    }
    if (v106 == 18)
    {
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v20[1] + 312))(v20[1], v13, a8))
      {
LABEL_77:
        unsigned int v106 = a11;
        goto LABEL_84;
      }
      if (sub_1CD802954(a5))
      {
LABEL_227:
        long long v412 = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy((uint64_t *)v20[1], *(void *)(*(void *)(v432 + 40) + 16 * a4), *(void *)(*(void *)(v432 + 40) + 16 * a4 + 8), *(void *)(**(void **)(*v20 + 40) + 40) + 272, *((unsigned __int8 *)v20 + 34));
        uint64_t v422 = v210;
        int v211 = *(unsigned __int16 *)(v13 + 24);
        if (v211 != 35 && v211 != 11) {
          goto LABEL_282;
        }
        uint64_t v212 = *(void *)(v13 + 80);
        DWORD2(v440) = *(_DWORD *)(v212 + 32);
        if (DWORD2(v440) > 0x40) {
          operator new[]();
        }
        *(void *)&long long v440 = *(void *)(v212 + 24);
        llvm::APInt::operator-=((uint64_t)&v440, 1uLL);
        uint64_t v225 = DWORD2(v440);
        uint64_t v226 = (void *)v440;
        DWORD2(v440) = 0;
        if (v225 < 0x41)
        {
          if ((*(void *)(v212 + 24) & (unint64_t)v440) != 0) {
            goto LABEL_282;
          }
LABEL_268:
          if (LOBYTE(v439[0])) {
            uint64_t v234 = sub_1CB87E200((unsigned __int8 *)v439);
          }
          else {
            uint64_t v234 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v439);
          }
          uint64_t v236 = v234;
          if (v235 == 1) {
          uint64_t v237 = *(void *)(v13 + 80);
          }
          uint64_t v238 = *(unsigned int *)(v237 + 32);
          if (v238 > 0x40)
          {
            int v240 = 0;
            int64_t v241 = (unint64_t)(v238 + 63) >> 6;
            do
            {
              BOOL v39 = v241-- < 1;
              if (v39) {
                break;
              }
              unint64_t v242 = *(void *)(*(void *)(v237 + 24) + 8 * v241);
              v240 += __clz(v242);
            }
            while (!v242);
            int v243 = v238 | 0xFFFFFFC0;
            if ((v238 & 0x3F) == 0) {
              int v243 = 0;
            }
            int v239 = v240 + v243;
          }
          else
          {
            int v239 = v238 + __clz(*(void *)(v237 + 24)) - 64;
          }
          unint64_t v244 = v236 + ~(unint64_t)(v238 + ~v239);
          if (((*(uint64_t (**)(uint64_t, void, void, unint64_t))(*(void *)v20[1] + 1456))(v20[1], *(void *)&v439[0], *((void *)&v439[0] + 1), v244) & 1) == 0)
          {
            uint64_t v288 = sub_1CD7EBF14(*v20, v244, v417, v412, v422, 0, 0);
            BOOL v252 = (llvm::APFloatBase **)v20;
            uint64_t v291 = *(void *)(*v20 + 832);
            if (v291) {
              LOWORD(v291) = *(_WORD *)(v291 + 8);
            }
            uint64_t v254 = sub_1CCFDED5C(*v20, 177, v417, *(llvm **)&v439[0], *((uint64_t *)&v439[0] + 1), v432, (uint64_t)a4, v290, (uint64_t)v288, v289, v291);
            unint64_t v256 = v292;
            sub_1CCEF0788((uint64_t)v252, (uint64_t)v254);
            if (LOBYTE(v439[0]) == v420)
            {
              if ((_BYTE)v420) {
                goto LABEL_335;
              }
LABEL_333:
              if (*((void *)&v439[0] + 1) == v415) {
                goto LABEL_335;
              }
            }
LABEL_334:
            if (sub_1CC277C0C((unsigned __int8 *)v439, (uint64_t)v420, v415))
            {
              uint64_t v339 = *((void *)*v252 + 104);
              if (v339) {
                __int16 v340 = *(_WORD *)(v339 + 8);
              }
              else {
                __int16 v340 = 0;
              }
              uint64_t v254 = sub_1CD7F3564(*v252, (const char *)0xC9, (uint64_t)v417, v420, v415, (uint64_t)v254, (void *)v256, v340);
              unint64_t v256 = v256 & 0xFFFFFFFF00000000 | v341;
              sub_1CCEF0788((uint64_t)v252, (uint64_t)v254);
            }
LABEL_335:
            if (a11 == 18)
            {
              uint64_t v254 = sub_1CD7EBB8C((uint64_t)*v252, v417, (uint64_t)v254, v256, v420, v415);
              unint64_t v256 = v256 & 0xFFFFFFFF00000000 | v296;
            }
            uint64_t v293 = *((void *)*v252 + 104);
            if (v293) {
              LOWORD(v293) = *(_WORD *)(v293 + 8);
            }
            uint64_t v99 = (uint64_t)sub_1CCFDED5C((uint64_t)*v252, 171, v417, v420, v415, (uint64_t)v254, v256, v257, v13, a8, v293);
            unsigned int v106 = a11;
            BOOL v20 = (uint64_t *)v252;
            uint64_t v15 = a9;
            if (v99) {
              return (uint64_t *)v99;
            }
            goto LABEL_84;
          }
LABEL_282:
          if (LOBYTE(v439[0])) {
            unsigned int v245 = sub_1CB87E200((unsigned __int8 *)v439);
          }
          else {
            unsigned int v245 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v439);
          }
          unsigned int v247 = v245;
          if (v246 == 1) {
          uint64_t v248 = v247 - 1;
          }
          if ((*(uint64_t (**)(uint64_t, void, void, uint64_t))(*(void *)v20[1] + 1456))(v20[1], *(void *)&v439[0], *((void *)&v439[0] + 1), v248))goto LABEL_77; {
          uint64_t v249 = sub_1CD7EBF14(*v20, v248, v417, v412, v422, 0, 0);
          }
          BOOL v252 = (llvm::APFloatBase **)v20;
          uint64_t v253 = *(void *)(*v20 + 832);
          if (v253) {
            LOWORD(v253) = *(_WORD *)(v253 + 8);
          }
          uint64_t v254 = sub_1CCFDED5C(*v20, 176, v417, *(llvm **)&v439[0], *((uint64_t *)&v439[0] + 1), v432, (uint64_t)a4, v251, (uint64_t)v249, v250, v253);
          unint64_t v256 = v255;
          sub_1CCEF0788((uint64_t)v252, (uint64_t)v254);
          if (LOBYTE(v439[0]) == v420)
          {
            if ((_BYTE)v420) {
              goto LABEL_335;
            }
            goto LABEL_333;
          }
          goto LABEL_334;
        }
        uint64_t v227 = 0;
        uint64_t v228 = *(void *)(v212 + 24);
        int64_t v229 = (unint64_t)(v225 + 63) >> 6;
        do
        {
          v226[v227] &= *(void *)(v228 + v227 * 8);
          ++v227;
        }
        while (v229 != v227);
        int v230 = 0;
        do
        {
          BOOL v39 = v229-- < 1;
          if (v39) {
            break;
          }
          unint64_t v231 = v226[v229];
          v230 += __clz(v231);
        }
        while (!v231);
        BOOL v232 = 0;
        int v233 = v225 | 0xFFFFFFC0;
        if ((v225 & 0x3F) == 0) {
          int v233 = 0;
        }
        if ((v225 - v230 - v233) < 0x41) {
          BOOL v232 = *v226 == 0;
        }
        if (v226)
        {
          MEMORY[0x1D25D9CB0](v226, 0x1000C8000313F17);
          if (DWORD2(v440) < 0x41 || !(void)v440)
          {
            if (!v232) {
              goto LABEL_282;
            }
            goto LABEL_268;
          }
          MEMORY[0x1D25D9CB0](v440, 0x1000C8000313F17);
        }
        if (!v232) {
          goto LABEL_282;
        }
        goto LABEL_268;
      }
      if (!sub_1CD7F2D2C(a5)) {
        goto LABEL_77;
      }
    }
    else
    {
      if (v106 != 20) {
        goto LABEL_79;
      }
      if (sub_1CD7F2D2C(a5)) {
        goto LABEL_227;
      }
      if (!sub_1CD8029CC(a5)) {
        goto LABEL_77;
      }
    }
    if (v432 != v13 || a4 != a8) {
      goto LABEL_77;
    }
    goto LABEL_227;
  }
  return (uint64_t *)v13;
}

void sub_1CCF57748()
{
}

void *sub_1CCF5775C()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F26418E0;
  return result;
}

void sub_1CCF57794(uint64_t a1, void *a2)
{
  *a2 = &unk_1F26418E0;
}

BOOL sub_1CCF577BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)a3 + 80);
  uint64_t v4 = *(void *)(*(void *)a2 + 80);
  unsigned int v5 = *(_DWORD *)(v4 + 32);
  if (v5 > 0x40) {
    operator new[]();
  }
  unint64_t v6 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
  if (!v5) {
    unint64_t v6 = 0;
  }
  uint64_t v7 = (const void *)(v6 & ~*(void *)(v4 + 24));
  uint64_t v8 = *(unsigned int *)(v3 + 32);
  if (v8 > 0x40) {
    return memcmp(*(const void **)(v3 + 24), v7, ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8) == 0;
  }
  else {
    return *(void *)(v3 + 24) == (void)v7;
  }
}

void sub_1CCF578D4()
{
}

void *sub_1CCF578E8()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F2641928;
  return result;
}

void sub_1CCF57920(uint64_t a1, void *a2)
{
  *a2 = &unk_1F2641928;
}

uint64_t sub_1CCF57948(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  if (!(*a2 | *a3)) {
    return 1;
  }
  if (v3) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  uint64_t v8 = *(void *)(v4 + 80);
  uint64_t v9 = *(void *)(v3 + 80);
  unsigned int v10 = *(_DWORD *)(v9 + 32);
  unsigned int v17 = v10;
  if (v10 > 0x40) {
    operator new[]();
  }
  if (v10) {
    unint64_t v11 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v10;
  }
  else {
    unint64_t v11 = 0;
  }
  BOOL v16 = (void *)(v11 & ~*(void *)(v9 + 24));
  llvm::APInt::operator++((uint64_t)&v16);
  unsigned int v19 = v17;
  unsigned int __s2 = v16;
  unsigned int v17 = 0;
  llvm::APInt::operator-=((uint64_t)&__s2, 1uLL);
  unsigned int v12 = v19;
  uint64_t v13 = __s2;
  unsigned int v19 = 0;
  uint64_t v14 = *(unsigned int *)(v8 + 32);
  if (v14 > 0x40) {
    BOOL v15 = memcmp(*(const void **)(v8 + 24), __s2, ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8) == 0;
  }
  else {
    BOOL v15 = *(void *)(v8 + 24) == (void)__s2;
  }
  uint64_t v6 = v15;
  if (v12 >= 0x41)
  {
    if (v13)
    {
      MEMORY[0x1D25D9CB0](v13, 0x1000C8000313F17);
      if (v19 >= 0x41)
      {
        if (__s2) {
          MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
        }
      }
    }
  }
  if (v17 >= 0x41 && v16) {
    MEMORY[0x1D25D9CB0](v16, 0x1000C8000313F17);
  }
  return v6;
}

uint64_t sub_1CCF57B00(int a1, uint64_t a2)
{
  uint64_t v4 = 0;
  HIDWORD(v5) = a1;
  LODWORD(v5) = a1 - 10;
  switch((v5 >> 1))
  {
    case 0u:
      uint64_t v6 = *(void *)(a2 + 80);
      LODWORD(v7) = *(_DWORD *)(v6 + 32);
      goto LABEL_3;
    case 1u:
      uint64_t v6 = *(void *)(a2 + 80);
      uint64_t v7 = *(unsigned int *)(v6 + 32);
      if (v7 > 0x40)
      {
        int v12 = 0;
        int64_t v13 = (unint64_t)(v7 + 63) >> 6;
        do
        {
          BOOL v14 = v13-- < 1;
          if (v14) {
            break;
          }
          unint64_t v15 = *(void *)(*(void *)(v6 + 24) + 8 * v13);
          v12 += __clz(v15);
        }
        while (!v15);
        int v16 = v7 | 0xFFFFFFC0;
        if ((v7 & 0x3F) == 0) {
          int v16 = 0;
        }
        if (v12 + v16 == v7) {
          goto LABEL_33;
        }
      }
      else if (!*(void *)(v6 + 24))
      {
        goto LABEL_33;
      }
      if (a1 == 10) {
        goto LABEL_3;
      }
      if (a1 == 18) {
        goto LABEL_8;
      }
      if (a1 != 20) {
        goto LABEL_35;
      }
LABEL_17:
      unint64_t v11 = (unint64_t **)(v6 + 24);
      if (v7 > 0x40)
      {
        if ((((*v11)[(v7 - 1) >> 6] >> (v7 - 1)) & 1) != 0
          && llvm::APInt::countTrailingZerosSlowCase(v11) == v7 - 1)
        {
          goto LABEL_33;
        }
      }
      else
      {
        uint64_t v4 = 1;
        if (*v11 == (unint64_t *)(1 << (v7 - 1))) {
          goto LABEL_36;
        }
      }
      if (a1 == 18) {
        goto LABEL_8;
      }
      if (a1 != 10) {
        goto LABEL_35;
      }
LABEL_3:
      if (!v7) {
        goto LABEL_33;
      }
      uint64_t v8 = (llvm::APInt *)(v6 + 24);
      if (v7 > 0x40)
      {
        if (llvm::APInt::countTrailingOnesSlowCase(v8) != v7) {
          goto LABEL_34;
        }
LABEL_33:
        uint64_t v4 = 1;
        goto LABEL_36;
      }
      if (*(void *)v8 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v7) {
        goto LABEL_33;
      }
LABEL_34:
      if (a1 == 18)
      {
LABEL_8:
        uint64_t v9 = (llvm::APInt *)(v6 + 24);
        if (v7 > 0x40)
        {
          if ((*(void *)(*(void *)v9 + 8 * ((v7 - 1) >> 6)) >> (v7 - 1))) {
            goto LABEL_35;
          }
          BOOL v10 = llvm::APInt::countTrailingOnesSlowCase(v9) == v7 - 1;
        }
        else
        {
          BOOL v10 = *(void *)v9 == ~(-1 << (v7 - 1));
        }
        uint64_t v4 = v10;
        goto LABEL_36;
      }
LABEL_35:
      uint64_t v4 = 0;
LABEL_36:
      HIDWORD(v17) = a1 - 11;
      LODWORD(v17) = a1 - 11;
      switch((v17 >> 1))
      {
        case 0u:
          uint64_t v18 = *(void *)(a2 + 80);
          unsigned int v19 = *(_DWORD *)(v18 + 32);
          goto LABEL_38;
        case 1u:
          uint64_t v18 = *(void *)(a2 + 80);
          unsigned int v19 = *(_DWORD *)(v18 + 32);
          if (!v19) {
            return 1;
          }
          BOOL v20 = (llvm::APInt *)(v18 + 24);
          if (v19 > 0x40)
          {
            if (llvm::APInt::countTrailingOnesSlowCase(v20) == v19) {
              return 1;
            }
          }
          else if (*(void *)v20 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v19)
          {
            return 1;
          }
          if (a1 == 11)
          {
LABEL_38:
            if (v19 > 0x40)
            {
              int v22 = 0;
              uint64_t v23 = *(unsigned int *)(v18 + 32);
              int64_t v24 = (unint64_t)(v23 + 63) >> 6;
              do
              {
                BOOL v14 = v24-- < 1;
                if (v14) {
                  break;
                }
                unint64_t v25 = *(void *)(*(void *)(v18 + 24) + 8 * v24);
                v22 += __clz(v25);
              }
              while (!v25);
              if ((v23 & 0x3F) != 0) {
                int v26 = v23 | 0xFFFFFFC0;
              }
              else {
                int v26 = 0;
              }
              if (v22 + v26 == v19) {
                return 1;
              }
            }
            else if (!*(void *)(v18 + 24))
            {
              return 1;
            }
            if (a1 != 19) {
              return v4;
            }
LABEL_60:
            int v27 = (unint64_t **)(v18 + 24);
            if (v19 > 0x40)
            {
              if ((((*v27)[(v19 - 1) >> 6] >> (v19 - 1)) & 1) == 0)
              {
                int v29 = 0;
                return v29 | v4;
              }
              BOOL v28 = llvm::APInt::countTrailingZerosSlowCase(v27) == v19 - 1;
            }
            else
            {
              BOOL v28 = *v27 == (unint64_t *)(1 << (v19 - 1));
            }
            int v29 = v28;
            return v29 | v4;
          }
          if (a1 == 19) {
            goto LABEL_60;
          }
          if (a1 != 21) {
            return v4;
          }
LABEL_47:
          unsigned int v21 = (llvm::APInt *)(v18 + 24);
          if (v19 > 0x40)
          {
            if (((*(void *)(*(void *)v21 + 8 * ((v19 - 1) >> 6)) >> (v19 - 1)) & 1) == 0
              && llvm::APInt::countTrailingOnesSlowCase(v21) == v19 - 1)
            {
              return 1;
            }
            goto LABEL_49;
          }
          if (*(void *)v21 != ~(-1 << (v19 - 1)))
          {
LABEL_49:
            if (a1 == 19) {
              goto LABEL_60;
            }
            if (a1 != 11) {
              return v4;
            }
            goto LABEL_38;
          }
          return 1;
        case 4u:
          uint64_t v18 = *(void *)(a2 + 80);
          unsigned int v19 = *(_DWORD *)(v18 + 32);
          goto LABEL_60;
        case 5u:
          uint64_t v18 = *(void *)(a2 + 80);
          unsigned int v19 = *(_DWORD *)(v18 + 32);
          goto LABEL_47;
        default:
          return v4;
      }
    case 4u:
      uint64_t v6 = *(void *)(a2 + 80);
      LODWORD(v7) = *(_DWORD *)(v6 + 32);
      goto LABEL_8;
    case 5u:
      uint64_t v6 = *(void *)(a2 + 80);
      LODWORD(v7) = *(_DWORD *)(v6 + 32);
      goto LABEL_17;
    default:
      goto LABEL_36;
  }
}

uint64_t *sub_1CCF57EF0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = (uint64_t *)a2;
  int v6 = *(unsigned __int16 *)(a2 + 24);
  if (v6 == 177)
  {
    uint64_t v8 = a2;
  }
  else
  {
    if (v6 != 201) {
      goto LABEL_38;
    }
    uint64_t v7 = *(unsigned int **)(a2 + 32);
    uint64_t v8 = *(void *)v7;
    uint64_t v9 = *(void *)(*(void *)v7 + 48);
    if (!v9) {
      goto LABEL_38;
    }
    uint64_t v10 = v7[2];
    int v11 = 1;
    do
    {
      if (*(_DWORD *)(v9 + 8) == v10)
      {
        if (!v11) {
          goto LABEL_38;
        }
        --v11;
      }
      uint64_t v9 = *(void *)(v9 + 32);
    }
    while (v9);
    if (v11 || *(_WORD *)(v8 + 24) != 177)
    {
LABEL_38:
      if (*((_WORD *)v4 + 12) != 173) {
        return 0;
      }
      sub_1CD7875EC((uint64_t)&v80, (uint64_t)v4, v3);
      while (1)
      {
        if (*((_WORD *)v4 + 12) != 173) {
          goto LABEL_72;
        }
        int v41 = sub_1CCF2C168((uint64_t *)a1, (uint64_t)v4);
        if (!v41) {
          break;
        }
        if (v4 == v41)
        {
          uint64_t v4 = v82;
          unint64_t v44 = v83;
          unint64_t v43 = v3 & 0xFFFFFFFF00000000;
        }
        else
        {
          unint64_t v43 = v42;
          unint64_t v44 = v3 & 0xFFFFFFFF00000000;
          uint64_t v4 = v41;
        }
        unint64_t v3 = v43 | v44;
      }
      if (*((_WORD *)v4 + 12) == 173)
      {
        unsigned int v45 = (uint64_t *)v4[4];
        uint64_t v46 = *v45;
        if (*(_WORD *)(*v45 + 24) == 193 || (uint64_t v47 = v45[5], *(_WORD *)(v47 + 24) == 193))
        {
          sub_1CD802D60((uint64_t)&v80);
          return 0;
        }
        unint64_t v48 = v45[1];
        unint64_t v49 = v45[6];
        if (!sub_1CD802AAC((uint64_t)v4, v3, 0)) {
          goto LABEL_63;
        }
        uint64_t v50 = *(void *)(v46 + 48);
        if (!v50) {
          goto LABEL_63;
        }
        int v51 = 1;
        do
        {
          if (*(_DWORD *)(v50 + 8) == v48)
          {
            if (!v51) {
              goto LABEL_63;
            }
            --v51;
          }
          uint64_t v50 = *(void *)(v50 + 32);
        }
        while (v50);
        if (!v51
          && *(_WORD *)(v46 + 24) == 173
          && (int v52 = v48, *(unsigned char *)(*(void *)(v46 + 40) + 16 * v48) == 2))
        {
          uint64_t v53 = *(void *)(v46 + 32);
          uint64_t v54 = *(void *)v53;
          unint64_t v48 = v48 & 0xFFFFFFFF00000000 | *(unsigned int *)(v53 + 8);
          uint64_t v47 = *(void *)(v53 + 40);
          unint64_t v49 = v49 & 0xFFFFFFFF00000000 | *(unsigned int *)(v53 + 48);
          unsigned int v55 = 17;
          uint64_t v4 = (uint64_t *)v46;
          LODWORD(v3) = v52;
        }
        else
        {
LABEL_63:
          unsigned int v55 = 22;
          uint64_t v54 = v46;
        }
        uint64_t v56 = v4[5] + 16 * v3;
        uint64_t v57 = *(llvm **)v56;
        uint64_t v58 = *(void *)(v56 + 8);
        if (*(unsigned char *)(a1 + 34))
        {
          uint64_t v57 = (llvm *)(*(uint64_t (**)(void, uint64_t, void, llvm *, uint64_t))(**(void **)(a1 + 8)
                                                                                            + 400))(*(void *)(a1 + 8), *(void *)(**(void **)(*(void *)a1 + 40) + 40) + 272, *(void *)(*(void *)a1 + 56), v57, v58);
          uint64_t v58 = v59;
        }
        unsigned int v60 = *(void **)a1;
        unint64_t v61 = (unsigned __int8 *)v4[8];
        uint64_t v78 = v61;
        if (v61) {
          llvm::MetadataTracking::track((uint64_t)&v78, v61, 2);
        }
        int v79 = *((_DWORD *)v4 + 15);
        uint64_t v4 = sub_1CD3DC614(v60, (const llvm::APInt *)&v78, v57, v58, v54, v48, v47, v49, v55, 0, 0, 0, 0);
        if (v78)
        {
          int v62 = *v78;
          if ((v62 - 4) > 0x1E)
          {
            if ((v62 - 3) >= 0xFFFFFFFE) {
              uint64_t v74 = v78;
            }
            else {
              uint64_t v74 = 0;
            }
            if ((v62 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v75 = (unint64_t)(v74 + 8);
LABEL_87:
              uint64_t v84 = &v78;
              sub_1CC5FA668(v75 + 16, &v84);
              goto LABEL_72;
            }
            if (v62 == 3) {
              *((void *)v78 + 1) = 0;
            }
          }
          else if ((v78[1] & 0x7F) == 2 || *((_DWORD *)v78 + 3))
          {
            uint64_t v77 = *((void *)v78 + 2);
            if ((v77 & 4) != 0)
            {
              unint64_t v75 = v77 & 0xFFFFFFFFFFFFFFF8;
              if (v75) {
                goto LABEL_87;
              }
            }
          }
        }
      }
LABEL_72:
      sub_1CD802D60((uint64_t)&v80);
      return v4;
    }
    unint64_t v3 = a3 & 0xFFFFFFFF00000000 | v10;
  }
  int v12 = *(uint64_t **)(v8 + 32);
  uint64_t v13 = *v12;
  if (*(_WORD *)(*v12 + 24) != 171) {
    goto LABEL_37;
  }
  uint64_t v14 = v12[5];
  if (*(_WORD *)(v14 + 24) != 11) {
    goto LABEL_37;
  }
  uint64_t v15 = *(void *)(*(void *)(v13 + 32) + 40);
  if (*(_WORD *)(v15 + 24) != 11) {
    goto LABEL_37;
  }
  uint64_t v16 = v12[1];
  uint64_t v17 = *(void *)(v15 + 80);
  uint64_t v18 = *(unsigned int *)(v17 + 32);
  if (v18 > 0x40)
  {
    int v22 = 0;
    int64_t v23 = (unint64_t)(v18 + 63) >> 6;
    int64_t v24 = *(int8x8_t **)(v17 + 24);
    unint64_t v25 = v24;
    int64_t v26 = v23;
    do
    {
      int8x8_t v27 = *v25++;
      uint8x8_t v28 = (uint8x8_t)vcnt_s8(v27);
      v28.i16[0] = vaddlv_u8(v28);
      v22 += v28.i32[0];
      --v26;
    }
    while (v26);
    if (v22 != 1) {
      goto LABEL_37;
    }
    int v29 = 0;
    do
    {
      BOOL v30 = v23-- < 1;
      if (v30) {
        break;
      }
      unint64_t v31 = (unint64_t)v24[v23];
      v29 += __clz(v31);
    }
    while (!v31);
    int v32 = v18 | 0xFFFFFFC0;
    if ((v18 & 0x3F) == 0) {
      int v32 = 0;
    }
    int v21 = v29 + v32;
  }
  else
  {
    unint64_t v19 = *(void *)(v17 + 24);
    uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
    v20.i16[0] = vaddlv_u8(v20);
    if (v20.u32[0] != 1) {
      goto LABEL_37;
    }
    int v21 = v18 + __clz(v19) - 64;
  }
  uint64_t v33 = *(void *)(v14 + 80);
  uint64_t v34 = (void *)(v33 + 24);
  uint64_t v35 = *(unsigned int *)(v33 + 32);
  if (v35 >= 0x41)
  {
    int v36 = 0;
    int64_t v37 = (unint64_t)(v35 + 63) >> 6;
    do
    {
      BOOL v30 = v37-- < 1;
      if (v30) {
        break;
      }
      unint64_t v38 = *(void *)(*v34 + 8 * v37);
      v36 += __clz(v38);
    }
    while (!v38);
    int v39 = v35 | 0xFFFFFFC0;
    if ((v35 & 0x3F) == 0) {
      int v39 = 0;
    }
    if ((v35 - v36 - v39) > 0x40) {
      goto LABEL_37;
    }
    uint64_t v34 = (void *)*v34;
  }
  if (*v34 != v18 + ~v21)
  {
LABEL_37:
    uint64_t v4 = (uint64_t *)v8;
    goto LABEL_38;
  }
  char v63 = *(unsigned __int8 **)(v8 + 64);
  __int16 v80 = v63;
  if (v63) {
    llvm::MetadataTracking::track((uint64_t)&v80, v63, 2);
  }
  int v81 = *(_DWORD *)(v8 + 60);
  uint64_t v64 = 16 * v16;
  unint64_t v65 = *(void **)a1;
  uint64_t v66 = (llvm *)(*(uint64_t (**)(void, uint64_t, void, void, void))(**(void **)(a1 + 8) + 400))(*(void *)(a1 + 8), *(void *)(**(void **)(*(void *)a1 + 40) + 40) + 272, *(void *)(*(void *)a1 + 56), *(void *)(*(void *)(v13 + 40) + v64), *(void *)(*(void *)(v13 + 40) + v64 + 8));
  uint64_t v68 = v67;
  uint64_t v69 = sub_1CD7EBF14(*(void *)a1, 0, (const llvm::APInt *)&v80, *(llvm **)(*(void *)(v13 + 40) + v64), *(void *)(*(void *)(v13 + 40) + v64 + 8), 0, 0);
  uint64_t v4 = sub_1CD3DC614(v65, (const llvm::APInt *)&v80, v66, v68, v13, v16, (uint64_t)v69, v70, 0x16u, 0, 0, 0, 0);
  if (v80)
  {
    int v71 = *v80;
    if ((v71 - 4) > 0x1E)
    {
      if ((v71 - 3) >= 0xFFFFFFFE) {
        uint64_t v76 = v80;
      }
      else {
        uint64_t v76 = 0;
      }
      if ((v71 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v73 = (unint64_t)(v76 + 8);
LABEL_93:
        uint64_t v78 = (unsigned __int8 *)&v80;
        sub_1CC5FA668(v73 + 16, &v78);
        return v4;
      }
      if (v71 == 3) {
        *((void *)v80 + 1) = 0;
      }
    }
    else if ((v80[1] & 0x7F) == 2 || *((_DWORD *)v80 + 3))
    {
      uint64_t v72 = *((void *)v80 + 2);
      if ((v72 & 4) != 0)
      {
        unint64_t v73 = v72 & 0xFFFFFFFFFFFFFFF8;
        if (v73) {
          goto LABEL_93;
        }
      }
    }
  }
  return v4;
}

uint64_t *sub_1CCF58500(uint64_t a1, uint64_t a2, llvm::APFloatBase *a3, int a4)
{
  v88[16] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(unsigned __int16 *)(a1 + 24);
  uint64_t v9 = *(uint64_t **)(a1 + 32);
  uint64_t v10 = *v9;
  int v11 = (void *)v9[1];
  long long v86 = *(_OWORD *)*(void *)(a1 + 40);
  int v12 = *(unsigned __int8 **)(a1 + 64);
  uint64_t v84 = v12;
  if (v12) {
    llvm::MetadataTracking::track((uint64_t)&v84, v12, 2);
  }
  int v85 = *(_DWORD *)(a1 + 60);
  int v13 = *(unsigned __int16 *)(v10 + 24);
  switch(v13)
  {
    case 11:
      goto LABEL_6;
    case 190:
      uint64_t v16 = *(uint64_t **)(v10 + 32);
      uint64_t v17 = v16[5];
      int v18 = *(unsigned __int16 *)(v17 + 24);
      if (v18 == 35 || v18 == 11)
      {
        uint64_t v20 = v16[10];
        int v21 = *(unsigned __int16 *)(v20 + 24);
        if (v21 == 35 || v21 == 11)
        {
          int64_t v23 = (void *)v16[6];
          unint64_t v75 = (void *)v16[11];
          uint64_t v25 = *((void *)&v86 + 1);
          int64_t v24 = (llvm *)v86;
          if (v8 == 199)
          {
            uint64_t v74 = (void *)v16[6];
            int64_t v26 = (void *)(*(void *)(v10 + 40) + 16 * v11);
            if ((*(uint64_t (**)(uint64_t, void, void, void, void))(*(void *)a2 + 1192))(a2, *v26, v26[1], v86, *((void *)&v86 + 1)))break; {
            uint64_t v25 = *((void *)&v86 + 1);
            }
            int64_t v24 = (llvm *)v86;
            uint64_t v16 = *(uint64_t **)(v10 + 32);
            int64_t v23 = v74;
          }
          if (v8 == 200) {
            uint64_t v8 = 198;
          }
          else {
            uint64_t v8 = v8;
          }
          uint64_t v36 = *v16;
          uint64_t v37 = v16[1];
          uint64_t v38 = *((void *)a3 + 104);
          if (v38) {
            __int16 v39 = *(_WORD *)(v38 + 8);
          }
          else {
            __int16 v39 = 0;
          }
          unint64_t v40 = sub_1CD7F3564(a3, (const char *)v8, (uint64_t)&v84, v24, v25, v17, v23, v39);
          uint64_t v42 = v41;
          uint64_t v43 = *((void *)a3 + 104);
          if (v43) {
            __int16 v44 = *(_WORD *)(v43 + 8);
          }
          else {
            __int16 v44 = 0;
          }
          unsigned int v45 = sub_1CD7F3564(a3, (const char *)v8, (uint64_t)&v84, (llvm *)v86, *((uint64_t *)&v86 + 1), v20, v75, v44);
          BOOL v30 = sub_1CD3E1260(a3, (const llvm::APInt *)&v84, v24, v25, v36, v37, (uint64_t)v40, v42, (uint64_t)v45, v46, v47);
          goto LABEL_25;
        }
      }
      break;
    case 35:
LABEL_6:
      uint64_t v14 = *((void *)a3 + 104);
      if (v14) {
        __int16 v15 = *(_WORD *)(v14 + 8);
      }
      else {
        __int16 v15 = 0;
      }
      BOOL v30 = sub_1CD7F3564(a3, (const char *)v8, (uint64_t)&v84, (llvm *)v86, *((uint64_t *)&v86 + 1), v10, v11, v15);
LABEL_25:
      unint64_t v31 = v30;
      goto LABEL_31;
  }
  int8x8_t v27 = (llvm *)sub_1CD3DD468((unsigned __int8 *)&v86, (uint64_t)v12, (BOOL)a3);
  char v28 = (char)v27;
  uint64_t v82 = v27;
  uint64_t v83 = v29;
  if ((_BYTE)v86)
  {
    if (v86 - 15 >= 0x9C) {
      goto LABEL_30;
    }
  }
  else if ((*(_DWORD *)(*((void *)&v86 + 1) + 8) & 0xFE) != 0x12)
  {
LABEL_30:
    unint64_t v31 = 0;
    goto LABEL_31;
  }
  if (a4 && (!(_BYTE)v27 || !*(void *)(a2 + 8 * v27 + 96)) || !sub_1CD7E9940(v10)) {
    goto LABEL_30;
  }
  if (v28) {
    unsigned int ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v82);
  }
  else {
    unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v82);
  }
  unsigned int v51 = ExtendedSizeInBits;
  if (v49 == 1) {
  *(_OWORD *)uint64_t v87 = *(_OWORD *)*(void *)(v10 + 40);
  }
  unsigned int v52 = sub_1CD3E12F4((unsigned __int8 *)v87, (uint64_t)v49, v50);
  v87[0] = v88;
  v87[1] = (void *)0x800000000;
  unsigned int v54 = sub_1CD3DB440((llvm::EVT *)&v86, v53);
  if (v54)
  {
    uint64_t v57 = 0;
    int v58 = v8 & 0xFFFFFFF7;
    uint64_t v59 = 40 * v54;
    do
    {
      uint64_t v60 = *(void *)(*(void *)(v10 + 32) + v57);
      if (*(_WORD *)(v60 + 24) == 51)
      {
        if (v58 == 199) {
          unint64_t v61 = sub_1CD7EBF14((uint64_t)a3, 0, (const llvm::APInt *)&v84, v82, v83, 0, 0);
        }
        else {
          unint64_t v61 = sub_1CD3DD4D8((uint64_t)a3, v82, v83);
        }
        if (LODWORD(v87[1]) >= (unint64_t)HIDWORD(v87[1])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v64 = (uint64_t **)((char *)v87[0] + 16 * LODWORD(v87[1]));
        *uint64_t v64 = v61;
        v64[1] = v62;
        ++LODWORD(v87[1]);
        goto LABEL_90;
      }
      char v63 = *(unsigned __int8 **)(v60 + 64);
      __int16 v80 = v63;
      if (v63) {
        llvm::MetadataTracking::track((uint64_t)&v80, v63, 2);
      }
      int v81 = *(_DWORD *)(v60 + 60);
      llvm::APInt::zextOrTrunc((uint64_t *)(*(void *)(v60 + 80) + 24), v52, (uint64_t)&__src);
      if (v58 == 198)
      {
        llvm::APInt::sext((uint64_t)&__src, v51, (uint64_t)&v76);
      }
      else if (v51 > 0x40)
      {
        if (v79 != v51) {
          operator new[]();
        }
        sub_1CD0463BC((uint64_t)&v76, (uint64_t)&__src);
      }
      else
      {
        unsigned int v77 = v51;
        unint64_t v65 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v51;
        if (!v51) {
          unint64_t v65 = 0;
        }
        unint64_t v76 = v65 & __src;
      }
      uint64_t v67 = sub_1CD7EBB14((uint64_t)a3, (llvm::LLVMContext *)&v76, (const llvm::APInt *)&v80, (uint64_t)v82, v83, 0, 0);
      if (LODWORD(v87[1]) >= (unint64_t)HIDWORD(v87[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v68 = (uint64_t *)((char *)v87[0] + 16 * LODWORD(v87[1]));
      *uint64_t v68 = v67;
      v68[1] = v66;
      ++LODWORD(v87[1]);
      if (v77 >= 0x41 && v76) {
        MEMORY[0x1D25D9CB0](v76, 0x1000C8000313F17);
      }
      if (v79 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      if (!v80) {
        goto LABEL_90;
      }
      int v69 = *v80;
      if ((v69 - 4) > 0x1E)
      {
        if ((v69 - 3) >= 0xFFFFFFFE) {
          uint64_t v70 = v80;
        }
        else {
          uint64_t v70 = 0;
        }
        if ((v69 - 3) < 0xFFFFFFFE)
        {
          if (v69 == 3) {
            *((void *)v80 + 1) = 0;
          }
          goto LABEL_90;
        }
        unint64_t v71 = (unint64_t)(v70 + 8);
      }
      else
      {
        if ((v80[1] & 0x7F) != 2 && !*((_DWORD *)v80 + 3)) {
          goto LABEL_90;
        }
        uint64_t v72 = *((void *)v80 + 2);
        if ((v72 & 4) == 0) {
          goto LABEL_90;
        }
        unint64_t v71 = v72 & 0xFFFFFFFFFFFFFFF8;
        if (!v71) {
          goto LABEL_90;
        }
      }
      unint64_t __src = (unint64_t)&v80;
      sub_1CC5FA668(v71 + 16, &__src);
LABEL_90:
      v57 += 40;
    }
    while (v59 != v57);
  }
  uint64_t v55 = *((void *)a3 + 104);
  if (v55) {
    uint64_t v56 = *(unsigned __int16 *)(v55 + 8);
  }
  else {
    uint64_t v56 = 0;
  }
  unint64_t v31 = sub_1CD7FF4E8(a3, (const char *)0x92, (const llvm::APInt *)&v84, (llvm *)v86, *((uint64_t *)&v86 + 1), (uint64_t *)v87[0], LODWORD(v87[1]), v56);
  if (v87[0] != v88) {
    free(v87[0]);
  }
LABEL_31:
  if (v84)
  {
    int v32 = *v84;
    if ((v32 - 4) > 0x1E)
    {
      if ((v32 - 3) >= 0xFFFFFFFE) {
        uint64_t v34 = v84;
      }
      else {
        uint64_t v34 = 0;
      }
      if ((v32 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v35 = (unint64_t)(v34 + 8);
LABEL_41:
        v87[0] = &v84;
        sub_1CC5FA668(v35 + 16, v87);
        return v31;
      }
      if (v32 == 3) {
        *((void *)v84 + 1) = 0;
      }
    }
    else if ((v84[1] & 0x7F) == 2 || *((_DWORD *)v84 + 3))
    {
      uint64_t v73 = *((void *)v84 + 2);
      if ((v73 & 4) != 0)
      {
        unint64_t v35 = v73 & 0xFFFFFFFFFFFFFFF8;
        if (v35) {
          goto LABEL_41;
        }
      }
    }
  }
  return v31;
}