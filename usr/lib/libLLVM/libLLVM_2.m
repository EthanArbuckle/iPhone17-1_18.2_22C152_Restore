void *sub_1CB904E74@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] <= 1uLL)
  {
    v4 &= *(void *)&v3 - 1;
  }
  else if (v4 >= *(void *)&v3)
  {
    v4 %= *(void *)&v3;
  }
  v6 = *(void **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_25;
  }
  v9 = v7[1];
  if (v5.u32[0] <= 1uLL)
  {
    v9 &= *(void *)&v3 - 1;
  }
  else if (v9 >= *(void *)&v3)
  {
    v9 %= *(void *)&v3;
  }
  if (v9 != v4)
  {
LABEL_25:
    if (!*a2) {
      goto LABEL_8;
    }
    v11 = *(void *)(*a2 + 8);
    if (v5.u32[0] <= 1uLL)
    {
      v11 &= *(void *)&v3 - 1;
    }
    else if (v11 >= *(void *)&v3)
    {
      v11 %= *(void *)&v3;
    }
    if (v11 != v4) {
LABEL_8:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  v8 = *a2;
  if (*a2)
  {
    v10 = *(void *)(v8 + 8);
    if (v5.u32[0] <= 1uLL)
    {
      v10 &= *(void *)&v3 - 1;
    }
    else if (v10 >= *(void *)&v3)
    {
      v10 %= *(void *)&v3;
    }
    if (v10 != v4)
    {
      *(void *)(*result + 8 * v10) = v7;
      v8 = *a2;
    }
  }
  *v7 = v8;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void *sub_1CB904FC4@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] <= 1uLL)
  {
    v4 &= *(void *)&v3 - 1;
  }
  else if (v4 >= *(void *)&v3)
  {
    v4 %= *(void *)&v3;
  }
  v6 = *(void **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_23;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] <= 1uLL)
  {
    v8 &= *(void *)&v3 - 1;
  }
  else if (v8 >= *(void *)&v3)
  {
    v8 %= *(void *)&v3;
  }
  if (v8 != v4)
  {
LABEL_23:
    if (!*a2) {
      goto LABEL_14;
    }
    unint64_t v11 = *(void *)(*a2 + 8);
    if (v5.u32[0] <= 1uLL)
    {
      v11 &= *(void *)&v3 - 1;
    }
    else if (v11 >= *(void *)&v3)
    {
      v11 %= *(void *)&v3;
    }
    if (v11 != v4) {
LABEL_14:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v9 = *a2;
  if (*a2)
  {
    unint64_t v10 = *(void *)(v9 + 8);
    if (v5.u32[0] <= 1uLL)
    {
      v10 &= *(void *)&v3 - 1;
    }
    else if (v10 >= *(void *)&v3)
    {
      v10 %= *(void *)&v3;
    }
    if (v10 != v4)
    {
      *(void *)(*result + 8 * v10) = v7;
      uint64_t v9 = *a2;
    }
  }
  void *v7 = v9;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1CB905108()
{
}

void sub_1CB90511C(uint64_t a1, uint64_t a2)
{
  v29[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a2 + 48);
  for (uint64_t i = *(void *)(a2 + 56); v2 != i; v2 += 272)
  {
    if ((*(unsigned char *)(*(void *)(*(void *)(v2 + 8) + 16) + 16) & 0x20) != 0)
    {
      v27 = v29;
      uint64_t v28 = 0x400000000;
      v24 = v26;
      uint64_t v25 = 0x400000000;
      uint64_t v4 = *(unsigned int *)(v2 + 120);
      if (v4)
      {
        unsigned int v5 = 0;
        v6 = *(uint64_t **)(v2 + 112);
        uint64_t v7 = 16 * v4;
        do
        {
          uint64_t v8 = *v6;
          if ((~*(_DWORD *)v6 & 6) == 0 && *(_DWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 192) != -1)
          {
            if (v5 >= HIDWORD(v28)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v27 + v5) = v8 & 0xFFFFFFFFFFFFFFF8;
            unsigned int v5 = v28 + 1;
            LODWORD(v28) = v28 + 1;
          }
          v6 += 2;
          v7 -= 16;
        }
        while (v7);
        if (v5)
        {
          uint64_t v9 = (uint64_t *)v27;
          uint64_t v10 = 8 * v5;
          do
          {
            uint64_t v11 = *v9++;
            sub_1CB905384(v11, v2);
            v10 -= 8;
          }
          while (v10);
        }
      }
      int v12 = *(_DWORD *)(v2 + 40);
      if (v12)
      {
        unsigned int v13 = v12 - 1;
        do
        {
          v14 = (uint64_t *)(*(void *)(v2 + 32) + 16 * v13);
          if ((~*(_DWORD *)v14 & 6) == 0)
          {
            llvm::SUnit::removePred(v2, *(void *)(v2 + 32) + 16 * v13);
            uint64_t v15 = *v14;
            if (v25 >= (unint64_t)HIDWORD(v25)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v24 + v25) = v15 & 0xFFFFFFFFFFFFFFF8;
            LODWORD(v25) = v25 + 1;
          }
        }
        while ((unint64_t)v13--);
      }
      if (v28)
      {
        v17 = (uint64_t *)v27;
        v18 = (uint64_t *)((char *)v27 + 8 * v28);
        do
        {
          if (v25)
          {
            uint64_t v19 = *v17;
            v20 = (uint64_t *)v24;
            uint64_t v21 = 8 * v25;
            do
            {
              uint64_t v22 = *v20++;
              v23[0] = v22 | 6;
              v23[1] = 0;
              llvm::SUnit::addPred(v19, v23, 1);
              v21 -= 8;
            }
            while (v21);
          }
          ++v17;
        }
        while (v17 != v18);
      }
      if (v24 != v26) {
        free(v24);
      }
      if (v27 != v29) {
        free(v27);
      }
    }
  }
}

void sub_1CB905384(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v13 = 0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2)
  {
    unsigned int v4 = 0;
    uint64_t v5 = 16 * v2;
    v6 = (uint64_t *)(*(void *)(a1 + 32) + 8);
    do
    {
      uint64_t v7 = *(v6 - 1);
      if ((~(_BYTE)v7 & 6) == 0 && (v7 & 0xFFFFFFFFFFFFFFF8) == a2)
      {
        uint64_t v9 = *v6;
        if (v4 >= 4) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v10 = &v14[v4];
        *uint64_t v10 = v7;
        v10[1] = v9;
        unsigned int v4 = ++v13;
      }
      v6 += 2;
      v5 -= 16;
    }
    while (v5);
    uint64_t v11 = v14;
    if (v4)
    {
      uint64_t v12 = 16 * v4;
      do
      {
        llvm::SUnit::removePred(a1, (uint64_t)v11++);
        v12 -= 16;
      }
      while (v12);
    }
  }
}

void sub_1CB9054D8()
{
}

void sub_1CB9054EC(uint64_t a1, uint64_t a2)
{
  v179[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a2 + 48);
  uint64_t v3 = *(void *)(a2 + 56);
  if (v2 != v3)
  {
    uint64_t v152 = *(void *)(a2 + 56);
    do
    {
      if (sub_1CB9046B0(**(_WORD **)(*(void *)(v2 + 8) + 16)))
      {
        v177 = v179;
        uint64_t v178 = 0x400000000;
        uint64_t v4 = *(unsigned int *)(v2 + 120);
        if (v4)
        {
          unsigned int v5 = 0;
          v6 = *(uint64_t **)(v2 + 112);
          uint64_t v7 = 16 * v4;
          do
          {
            uint64_t v8 = *v6;
            if ((~*(_DWORD *)v6 & 6) == 0)
            {
              unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFF8;
              if (*(_DWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 192) != -1)
              {
                uint64_t v10 = *(void *)(*(void *)(v9 + 8) + 16);
                if ((*(_WORD *)v10 & 0xFFFE) == 0x2EC4 || (*(unsigned char *)(v10 + 17) & 0x10) != 0)
                {
                  if (v5 >= HIDWORD(v178)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  v177[v5] = v9;
                  unsigned int v5 = v178 + 1;
                  LODWORD(v178) = v178 + 1;
                }
              }
            }
            v6 += 2;
            v7 -= 16;
          }
          while (v7);
          if (v5)
          {
            uint64_t v11 = v177;
            uint64_t v12 = 8 * v5;
            do
            {
              uint64_t v13 = *v11++;
              sub_1CB905384(v13, v2);
              v12 -= 8;
            }
            while (v12);
          }
        }
        v169 = v173;
        v170 = v173;
        uint64_t v171 = 4;
        int v172 = 0;
        uint64_t v14 = *(unsigned int *)(v2 + 120);
        if (v14)
        {
          unsigned int v15 = 0;
          v16 = *(_DWORD **)(v2 + 112);
          v17 = &v16[4 * v14];
          unsigned int v18 = 4;
          uint64_t v19 = (unint64_t *)v173;
          v20 = (unint64_t *)v173;
          while ((~*v16 & 6) != 0)
          {
LABEL_53:
            v16 += 4;
            if (v16 == v17) {
              goto LABEL_61;
            }
          }
          unint64_t v21 = *(void *)v16 & 0xFFFFFFFFFFFFFFF8;
          if (v19 == v20)
          {
            if (v15)
            {
              uint64_t v22 = 0;
              uint64_t v23 = 8 * v15;
              v24 = v20;
              while (*v24 != v21)
              {
                if (*v24 == -2) {
                  uint64_t v22 = v24;
                }
                ++v24;
                v23 -= 8;
                if (!v23)
                {
                  if (!v22) {
                    goto LABEL_29;
                  }
                  *uint64_t v22 = v21;
                  --v172;
                  goto LABEL_52;
                }
              }
              goto LABEL_52;
            }
LABEL_29:
            if (v18 > v15)
            {
              HIDWORD(v171) = v15 + 1;
              v20[v15] = v21;
LABEL_52:
              v20 = (unint64_t *)v169;
              uint64_t v19 = (unint64_t *)v170;
              unsigned int v15 = HIDWORD(v171);
              unsigned int v18 = v171;
              goto LABEL_53;
            }
          }
          if (3 * v18 <= 4 * (v15 - v172))
          {
            if (v18 >= 0x40) {
              v18 *= 2;
            }
            else {
              unsigned int v18 = 128;
            }
          }
          else if (v18 - v15 >= v18 >> 3)
          {
            goto LABEL_33;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v169, v18);
          unsigned int v18 = v171;
          uint64_t v19 = (unint64_t *)v170;
LABEL_33:
          unsigned int v25 = v18 - 1;
          unsigned int v26 = (v18 - 1) & ((v21 >> 4) ^ (v21 >> 9));
          v27 = &v19[v26];
          unint64_t v28 = *v27;
          if (*v27 == -1)
          {
            v29 = 0;
LABEL_45:
            if (v29) {
              v33 = v29;
            }
            else {
              v33 = v27;
            }
            if (*v33 != v21)
            {
              if (*v33 == -2) {
                --v172;
              }
              else {
                ++HIDWORD(v171);
              }
              unint64_t *v33 = v21;
            }
          }
          else
          {
            v29 = 0;
            int v30 = 1;
            while (v28 != v21)
            {
              if (v29) {
                BOOL v31 = 0;
              }
              else {
                BOOL v31 = v28 == -2;
              }
              if (v31) {
                v29 = v27;
              }
              unsigned int v32 = v26 + v30++;
              unsigned int v26 = v32 & v25;
              v27 = &v19[v32 & v25];
              unint64_t v28 = *v27;
              if (*v27 == -1) {
                goto LABEL_45;
              }
            }
          }
          goto LABEL_52;
        }
LABEL_61:
        v164 = v168;
        v165 = v168;
        uint64_t v166 = 4;
        int v167 = 0;
        unsigned int v34 = v178;
        if (v178)
        {
          unsigned int v35 = 4;
          while (1)
          {
            uint64_t v36 = v177[--v34];
            LODWORD(v178) = v34;
            uint64_t v37 = *(unsigned int *)(v36 + 120);
            if (!v37) {
              goto LABEL_138;
            }
            v38 = *(uint64_t **)(v36 + 112);
            v39 = &v38[2 * v37];
            do
            {
              uint64_t v40 = *v38;
              if ((~*(_DWORD *)v38 & 6) == 0)
              {
                unint64_t v41 = v40 & 0xFFFFFFFFFFFFFFF8;
                if (*(_DWORD *)((v40 & 0xFFFFFFFFFFFFFFF8) + 192) != -1)
                {
                  v42 = v169;
                  if (v170 == v169)
                  {
                    int v43 = HIDWORD(v171);
                    v44 = &v170[8 * HIDWORD(v171)];
                    if (HIDWORD(v171))
                    {
                      uint64_t v45 = 0;
                      while (*(void *)&v170[v45] != v41)
                      {
                        v45 += 8;
                        if (8 * HIDWORD(v171) == v45) {
                          goto LABEL_86;
                        }
                      }
                      v44 = &v170[v45];
                    }
LABEL_86:
                    v42 = v170;
                  }
                  else
                  {
                    int v46 = v171 - 1;
                    unsigned int v47 = (v171 - 1) & ((v41 >> 4) ^ (v41 >> 9));
                    v44 = &v170[8 * v47];
                    uint64_t v48 = *(void *)v44;
                    if (*(void *)v44 == -1)
                    {
                      v49 = 0;
LABEL_104:
                      if (v49) {
                        v44 = v49;
                      }
                      int v43 = HIDWORD(v171);
                      if (*(void *)v44 != v41) {
                        v44 = &v170[8 * v171];
                      }
                    }
                    else
                    {
                      v49 = 0;
                      int v50 = 1;
                      while (v48 != v41)
                      {
                        if (v49) {
                          BOOL v51 = 0;
                        }
                        else {
                          BOOL v51 = v48 == -2;
                        }
                        if (v51) {
                          v49 = v44;
                        }
                        unsigned int v52 = v47 + v50++;
                        unsigned int v47 = v52 & v46;
                        v44 = &v170[8 * (v52 & v46)];
                        uint64_t v48 = *(void *)v44;
                        if (*(void *)v44 == -1) {
                          goto LABEL_104;
                        }
                      }
                      int v43 = HIDWORD(v171);
                    }
                  }
                  int v53 = v170 == v42 ? v43 : v171;
                  if (v44 == &v170[8 * v53])
                  {
                    uint64_t v54 = *(void *)(*(void *)(v41 + 8) + 16);
                    if ((*(_WORD *)v54 & 0xFFFE) != 0x2EC4 && (*(unsigned char *)(v54 + 17) & 0x10) == 0)
                    {
                      v55 = v165;
                      uint64_t v56 = HIDWORD(v166);
                      if (v165 != v164) {
                        goto LABEL_109;
                      }
                      if (!HIDWORD(v166))
                      {
LABEL_101:
                        if (HIDWORD(v166) < v35)
                        {
                          ++HIDWORD(v166);
                          *(void *)&v165[8 * v56] = v41;
                          goto LABEL_130;
                        }
LABEL_109:
                        if (3 * v35 <= 4 * (HIDWORD(v166) - v167))
                        {
                          if (v35 >= 0x40) {
                            v35 *= 2;
                          }
                          else {
                            unsigned int v35 = 128;
                          }
                        }
                        else if (v35 - HIDWORD(v166) >= v35 >> 3)
                        {
                          goto LABEL_111;
                        }
                        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v164, v35);
                        unsigned int v35 = v166;
                        v55 = v165;
LABEL_111:
                        unsigned int v60 = v35 - 1;
                        unsigned int v61 = (v35 - 1) & ((v41 >> 4) ^ (v41 >> 9));
                        v62 = &v55[8 * v61];
                        unint64_t v63 = *(void *)v62;
                        if (*(void *)v62 == -1)
                        {
                          v64 = 0;
LABEL_123:
                          if (v64) {
                            v68 = v64;
                          }
                          else {
                            v68 = (unint64_t *)v62;
                          }
                          if (*v68 != v41)
                          {
                            if (*v68 == -2) {
                              --v167;
                            }
                            else {
                              ++HIDWORD(v166);
                            }
                            unint64_t *v68 = v41;
                          }
                        }
                        else
                        {
                          v64 = 0;
                          int v65 = 1;
                          while (v63 != v41)
                          {
                            if (v64) {
                              BOOL v66 = 0;
                            }
                            else {
                              BOOL v66 = v63 == -2;
                            }
                            if (v66) {
                              v64 = (unint64_t *)v62;
                            }
                            unsigned int v67 = v61 + v65++;
                            unsigned int v61 = v67 & v60;
                            v62 = &v55[8 * (v67 & v60)];
                            unint64_t v63 = *(void *)v62;
                            if (*(void *)v62 == -1) {
                              goto LABEL_123;
                            }
                          }
                        }
                        goto LABEL_130;
                      }
                      v57 = 0;
                      uint64_t v58 = 8 * HIDWORD(v166);
                      v59 = (unint64_t *)v165;
                      while (*v59 != v41)
                      {
                        if (*v59 == -2) {
                          v57 = v59;
                        }
                        ++v59;
                        v58 -= 8;
                        if (!v58)
                        {
                          if (!v57) {
                            goto LABEL_101;
                          }
                          unint64_t *v57 = v41;
                          --v167;
                          break;
                        }
                      }
                    }
                  }
                }
              }
LABEL_130:
              v38 += 2;
            }
            while (v38 != v39);
            unsigned int v34 = v178;
LABEL_138:
            if (!v34)
            {
              v70 = (uint64_t *)v164;
              v69 = (uint64_t *)v165;
              unsigned int v72 = v166;
              LODWORD(v71) = HIDWORD(v166);
              goto LABEL_141;
            }
          }
        }
        LODWORD(v71) = 0;
        unsigned int v72 = 4;
        v70 = (uint64_t *)v168;
        v69 = (uint64_t *)v168;
LABEL_141:
        if (v69 == v70) {
          uint64_t v71 = v71;
        }
        else {
          uint64_t v71 = v72;
        }
        v73 = v69;
        if (v71)
        {
          uint64_t v74 = 8 * v71;
          v73 = v69;
          while ((unint64_t)*v73 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v73;
            v74 -= 8;
            if (!v74) {
              goto LABEL_155;
            }
          }
        }
        v75 = &v69[v71];
        if (v73 != v75)
        {
          uint64_t v76 = *v73;
LABEL_151:
          v159 = (char *)(v2 | 6);
          v160 = 0;
          llvm::SUnit::addPred(v76, (uint64_t *)&v159, 1);
          v77 = (unint64_t *)(v73 + 1);
          while (v77 != (unint64_t *)v75)
          {
            unint64_t v78 = *v77++;
            uint64_t v76 = v78;
            if (v78 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v73 = (uint64_t *)(v77 - 1);
              goto LABEL_151;
            }
          }
        }
LABEL_155:
        v174 = (uint64_t *)v176;
        uint64_t v175 = 0x400000000;
        int v79 = *(_DWORD *)(v2 + 40);
        if (v79)
        {
          int v80 = 0;
          unsigned int v81 = v79 - 1;
          do
          {
            v82 = (uint64_t *)(*(void *)(v2 + 32) + 16 * v81);
            uint64_t v83 = *v82;
            if ((~*(_DWORD *)v82 & 6) == 0)
            {
              unint64_t v84 = v83 & 0xFFFFFFFFFFFFFFF8;
              if (*(_DWORD *)((v83 & 0xFFFFFFFFFFFFFFF8) + 192) != -1)
              {
                uint64_t v85 = *(void *)(*(void *)(v84 + 8) + 16);
                if ((*(_WORD *)v85 & 0xFFFE) == 0x2EC4 || (*(unsigned char *)(v85 + 17) & 0x10) != 0)
                {
                  llvm::SUnit::removePred(v2, (uint64_t)v82);
                  if (v175 >= (unint64_t)HIDWORD(v175)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  v174[v175] = v84;
                  int v80 = v175 + 1;
                  LODWORD(v175) = v175 + 1;
                }
              }
            }
          }
          while ((unint64_t)v81--);
          v87 = v174;
          if (v80)
          {
            v88 = &v174[v80];
            while (1)
            {
              uint64_t v89 = *v87;
              v159 = v163;
              v160 = v163;
              uint64_t v161 = 4;
              int v162 = 0;
              uint64_t v90 = *(unsigned int *)(v89 + 120);
              if (v90)
              {
                unsigned int v91 = 0;
                v92 = *(_DWORD **)(v89 + 112);
                v93 = &v92[4 * v90];
                unsigned int v94 = 4;
                v95 = (unint64_t *)v163;
                v96 = (unint64_t *)v163;
                while ((~*v92 & 6) != 0)
                {
LABEL_203:
                  v92 += 4;
                  if (v92 == v93) {
                    goto LABEL_211;
                  }
                }
                unint64_t v97 = *(void *)v92 & 0xFFFFFFFFFFFFFFF8;
                if (v96 == v95)
                {
                  if (v91)
                  {
                    v98 = 0;
                    uint64_t v99 = 8 * v91;
                    v100 = v95;
                    while (*v100 != v97)
                    {
                      if (*v100 == -2) {
                        v98 = v100;
                      }
                      ++v100;
                      v99 -= 8;
                      if (!v99)
                      {
                        if (!v98) {
                          goto LABEL_179;
                        }
                        unint64_t *v98 = v97;
                        --v162;
                        goto LABEL_202;
                      }
                    }
                    goto LABEL_202;
                  }
LABEL_179:
                  if (v94 > v91)
                  {
                    HIDWORD(v161) = v91 + 1;
                    v95[v91] = v97;
LABEL_202:
                    v95 = (unint64_t *)v159;
                    v96 = (unint64_t *)v160;
                    unsigned int v94 = v161;
                    unsigned int v91 = HIDWORD(v161);
                    goto LABEL_203;
                  }
                }
                if (3 * v94 <= 4 * (v91 - v162))
                {
                  if (v94 >= 0x40) {
                    v94 *= 2;
                  }
                  else {
                    unsigned int v94 = 128;
                  }
                }
                else if (v94 - v91 >= v94 >> 3)
                {
                  goto LABEL_183;
                }
                llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v159, v94);
                unsigned int v94 = v161;
                v96 = (unint64_t *)v160;
LABEL_183:
                unsigned int v101 = v94 - 1;
                unsigned int v102 = (v94 - 1) & ((v97 >> 4) ^ (v97 >> 9));
                v103 = &v96[v102];
                unint64_t v104 = *v103;
                if (*v103 == -1)
                {
                  v105 = 0;
LABEL_195:
                  if (v105) {
                    v109 = v105;
                  }
                  else {
                    v109 = v103;
                  }
                  if (*v109 != v97)
                  {
                    if (*v109 == -2) {
                      --v162;
                    }
                    else {
                      ++HIDWORD(v161);
                    }
                    unint64_t *v109 = v97;
                  }
                }
                else
                {
                  v105 = 0;
                  int v106 = 1;
                  while (v104 != v97)
                  {
                    if (v105) {
                      BOOL v107 = 0;
                    }
                    else {
                      BOOL v107 = v104 == -2;
                    }
                    if (v107) {
                      v105 = v103;
                    }
                    unsigned int v108 = v102 + v106++;
                    unsigned int v102 = v108 & v101;
                    v103 = &v96[v108 & v101];
                    unint64_t v104 = *v103;
                    if (*v103 == -1) {
                      goto LABEL_195;
                    }
                  }
                }
                goto LABEL_202;
              }
LABEL_211:
              v154 = (uint64_t *)v158;
              v155 = (uint64_t *)v158;
              uint64_t v156 = 4;
              int v157 = 0;
              uint64_t v110 = *(unsigned int *)(v2 + 120);
              if (v110) {
                break;
              }
              LODWORD(v143) = 0;
              unsigned int v144 = 4;
              v142 = (uint64_t *)v158;
              v141 = (uint64_t *)v158;
LABEL_284:
              if (v141 == v142) {
                uint64_t v143 = v143;
              }
              else {
                uint64_t v143 = v144;
              }
              v145 = v141;
              if (v143)
              {
                uint64_t v146 = 0;
                while ((unint64_t)v141[v146] >= 0xFFFFFFFFFFFFFFFELL)
                {
                  if (v143 == ++v146) {
                    goto LABEL_300;
                  }
                }
                v145 = &v141[v146];
              }
              v147 = &v141[v143];
              if (v145 != v147)
              {
                uint64_t v148 = v89 | 6;
                uint64_t v149 = *v145;
LABEL_295:
                v153[0] = v148;
                v153[1] = 0;
                llvm::SUnit::addPred(v149, v153, 1);
                v150 = (unint64_t *)(v145 + 1);
                while (v150 != (unint64_t *)v147)
                {
                  unint64_t v151 = *v150++;
                  uint64_t v149 = v151;
                  if (v151 <= 0xFFFFFFFFFFFFFFFDLL)
                  {
                    v145 = (uint64_t *)(v150 - 1);
                    goto LABEL_295;
                  }
                }
                v142 = v154;
                v141 = v155;
              }
LABEL_300:
              if (v141 != v142) {
                free(v141);
              }
              if (v160 != v159) {
                free(v160);
              }
              if (++v87 == v88)
              {
                v87 = v174;
                goto LABEL_306;
              }
            }
            v111 = *(_DWORD **)(v2 + 112);
            v112 = &v111[4 * v110];
            unsigned int v113 = 4;
            while (2)
            {
              if ((~*v111 & 6) != 0) {
                goto LABEL_275;
              }
              unint64_t v114 = *(void *)v111 & 0xFFFFFFFFFFFFFFF8;
              v115 = v159;
              if (v160 == v159)
              {
                int v116 = HIDWORD(v161);
                v117 = &v160[8 * HIDWORD(v161)];
                if (HIDWORD(v161))
                {
                  uint64_t v118 = 0;
                  while (*(void *)&v160[v118] != v114)
                  {
                    v118 += 8;
                    if (8 * HIDWORD(v161) == v118) {
                      goto LABEL_233;
                    }
                  }
                  v117 = &v160[v118];
                }
LABEL_233:
                v115 = v160;
              }
              else
              {
                int v119 = v161 - 1;
                unsigned int v120 = (v161 - 1) & ((v114 >> 4) ^ (v114 >> 9));
                v117 = &v160[8 * v120];
                uint64_t v121 = *(void *)v117;
                if (*(void *)v117 == -1)
                {
                  v122 = 0;
LABEL_262:
                  if (v122) {
                    v117 = v122;
                  }
                  int v116 = HIDWORD(v161);
                  if (*(void *)v117 != v114) {
                    v117 = &v160[8 * v161];
                  }
                }
                else
                {
                  v122 = 0;
                  int v123 = 1;
                  while (v121 != v114)
                  {
                    if (v122) {
                      BOOL v124 = 0;
                    }
                    else {
                      BOOL v124 = v121 == -2;
                    }
                    if (v124) {
                      v122 = v117;
                    }
                    unsigned int v125 = v120 + v123++;
                    unsigned int v120 = v125 & v119;
                    v117 = &v160[8 * (v125 & v119)];
                    uint64_t v121 = *(void *)v117;
                    if (*(void *)v117 == -1) {
                      goto LABEL_262;
                    }
                  }
                  int v116 = HIDWORD(v161);
                }
              }
              int v126 = v160 == v115 ? v116 : v161;
              if (v117 != &v160[8 * v126])
              {
LABEL_275:
                v111 += 4;
                if (v111 == v112)
                {
                  v142 = v154;
                  v141 = v155;
                  unsigned int v144 = v156;
                  LODWORD(v143) = HIDWORD(v156);
                  goto LABEL_284;
                }
                continue;
              }
              break;
            }
            v127 = v155;
            uint64_t v128 = HIDWORD(v156);
            if (v155 == v154)
            {
              if (HIDWORD(v156))
              {
                v129 = 0;
                uint64_t v130 = 8 * HIDWORD(v156);
                v131 = (unint64_t *)v155;
                while (*v131 != v114)
                {
                  if (*v131 == -2) {
                    v129 = v131;
                  }
                  ++v131;
                  v130 -= 8;
                  if (!v130)
                  {
                    if (!v129) {
                      goto LABEL_246;
                    }
                    unint64_t *v129 = v114;
                    --v157;
                    goto LABEL_275;
                  }
                }
                goto LABEL_275;
              }
LABEL_246:
              if (HIDWORD(v156) < v113)
              {
                ++HIDWORD(v156);
                v155[v128] = v114;
                goto LABEL_275;
              }
            }
            if (3 * v113 <= 4 * (HIDWORD(v156) - v157))
            {
              if (v113 >= 0x40) {
                v113 *= 2;
              }
              else {
                unsigned int v113 = 128;
              }
            }
            else if (v113 - HIDWORD(v156) >= v113 >> 3)
            {
              goto LABEL_250;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v154, v113);
            unsigned int v113 = v156;
            v127 = v155;
LABEL_250:
            unsigned int v132 = v113 - 1;
            unsigned int v133 = (v113 - 1) & ((v114 >> 4) ^ (v114 >> 9));
            v134 = (unint64_t *)&v127[v133];
            unint64_t v135 = *v134;
            if (*v134 == -1)
            {
              v136 = 0;
LABEL_268:
              if (v136) {
                v140 = v136;
              }
              else {
                v140 = v134;
              }
              if (*v140 != v114)
              {
                if (*v140 == -2) {
                  --v157;
                }
                else {
                  ++HIDWORD(v156);
                }
                unint64_t *v140 = v114;
              }
            }
            else
            {
              v136 = 0;
              int v137 = 1;
              while (v135 != v114)
              {
                if (v136) {
                  BOOL v138 = 0;
                }
                else {
                  BOOL v138 = v135 == -2;
                }
                if (v138) {
                  v136 = v134;
                }
                unsigned int v139 = v133 + v137++;
                unsigned int v133 = v139 & v132;
                v134 = (unint64_t *)&v127[v139 & v132];
                unint64_t v135 = *v134;
                if (*v134 == -1) {
                  goto LABEL_268;
                }
              }
            }
            goto LABEL_275;
          }
LABEL_306:
          if (v87 != (uint64_t *)v176) {
            free(v87);
          }
        }
        uint64_t v3 = v152;
        if (v165 != v164) {
          free(v165);
        }
        if (v170 != v169) {
          free(v170);
        }
        if (v177 != v179) {
          free(v177);
        }
      }
      v2 += 272;
    }
    while (v2 != v3);
  }
}

void sub_1CB9061C8()
{
}

void sub_1CB9061DC(uint64_t a1, void *a2)
{
  v21[8] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2[2];
  do
  {
    uint64_t v4 = a2[6];
    uint64_t v5 = a2[7];
    if (v4 == v5) {
      break;
    }
    char v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(v4 + 8);
      uint64_t v19 = v21;
      uint64_t v20 = 0x400000000;
      uint64_t v8 = *(unsigned int *)(v4 + 40);
      if (v8)
      {
        unint64_t v9 = *(void **)(v4 + 32);
        uint64_t v10 = 16 * v8;
        do
        {
          if ((~*(_DWORD *)v9 & 6) == 0)
          {
            unint64_t v11 = *v9 & 0xFFFFFFFFFFFFFFF8;
            if (*(_DWORD *)(v11 + 192) != -1)
            {
              uint64_t v12 = *(void *)(v11 + 8);
              if (**(_WORD **)(v7 + 16) == 13427 || **(_WORD **)(v12 + 16) == 13427)
              {
                if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3 + 1064))(v3, v7, v12))
                {
                  if (v20 >= (unint64_t)HIDWORD(v20)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((_OWORD *)v19 + v20) = *(_OWORD *)v9;
                  LODWORD(v20) = v20 + 1;
                }
              }
            }
          }
          v9 += 2;
          v10 -= 16;
        }
        while (v10);
        uint64_t v13 = (char *)v19;
        uint64_t v14 = (char *)v19 + 16 * v20;
        if (v20)
        {
          do
          {
            *(_OWORD *)unsigned int v18 = *(_OWORD *)v13;
            llvm::SUnit::removePred(v4, (uint64_t)v18);
            uint64_t v15 = *(unsigned int *)(v4 + 120);
            if (v15)
            {
              v16 = *(void **)(v4 + 112);
              uint64_t v17 = 16 * v15;
              do
              {
                if ((~*(_DWORD *)v16 & 6) == 0) {
                  llvm::SUnit::addPred(*v16 & 0xFFFFFFFFFFFFFFF8, v18, 1);
                }
                v16 += 2;
                v17 -= 16;
              }
              while (v17);
            }
            v13 += 16;
          }
          while (v13 != v14);
          char v6 = 1;
          uint64_t v13 = (char *)v19;
        }
        if (v13 != (char *)v21) {
          free(v13);
        }
      }
      v4 += 272;
    }
    while (v4 != v5);
  }
  while ((v6 & 1) != 0);
}

uint64_t sub_1CB906404()
{
  qword_1EBCBE910 = 0;
  *(void *)algn_1EBCBE918 = "agx1";
  qword_1EBCBE920 = 4;
  unk_1EBCBE928 = "Custom AGX1 scheduler.";
  qword_1EBCBE930 = 22;
  unk_1EBCBE938 = sub_1CD3F1018;
  sub_1CB835A84(&llvm::MachineSchedRegistry::Registry, &qword_1EBCBE910);

  return __cxa_atexit((void (*)(void *))sub_1CB835A50, &qword_1EBCBE910, &dword_1CB82C000);
}

uint64_t sub_1CB906494()
{
  return 0;
}

uint64_t sub_1CB9064A0()
{
  return 0;
}

void sub_1CB9064A8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 8) = 0;
}

void *sub_1CB9064B0(void *a1)
{
  *a1 = &unk_1F26440A0;
  uint64_t v2 = a1 + 20;
  uint64_t v3 = (void *)a1[23];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }

  return sub_1CB87DD48(a1);
}

uint64_t sub_1CB906564(uint64_t a1, uint64_t a2, uint64_t a3, const std::string::value_type *a4, std::string::size_type a5, const std::string::value_type *a6, std::string::size_type a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11)
{
  unsigned int v16 = a9;
  *(void *)a1 = &unk_1F25ED7E0;
  uint64_t v17 = *(const char **)(a8 + 136);
  char v18 = *(unsigned char *)(a8 + 159);
  int v19 = v18;
  if (v18 >= 0) {
    uint64_t v17 = (const char *)(a8 + 136);
  }
  uint64_t v20 = v18 & 0x7F;
  if (v19 < 0) {
    uint64_t v20 = *(void *)(a8 + 144);
  }
  if ((*(_DWORD *)(a3 + 24) & 0xFFFFFFFE) == 0x1C) {
    unint64_t v21 = "lm32";
  }
  else {
    unint64_t v21 = "lp64";
  }
  if (v20) {
    unint64_t v21 = v17;
  }
  if ((unint64_t)(v20 - 1) < 3 || *(_DWORD *)v21 == 875982956)
  {
    memset(&v40, 0, sizeof(v40));
    std::string::append(&v40, "e-m:o");
    BOOL v22 = 1;
    uint64_t v23 = "-p:64:64:64";
  }
  else
  {
    int v24 = *(_DWORD *)v21;
    memset(&v40, 0, sizeof(v40));
    std::string::append(&v40, "e-m:o");
    BOOL v22 = v24 != 842231148;
    if (v24 == 842231148) {
      uint64_t v23 = "-p:64:64:64-p3:32:64:64";
    }
    else {
      uint64_t v23 = "-p:64:64:64";
    }
  }
  unsigned int v25 = &v40;
  std::string::append(&v40, v23);
  if (*(_DWORD *)(a3 + 24) == 29)
  {
    v41[0] = "-p";
    uint64_t v42 = 5;
    __int16 v43 = 2307;
    llvm::Twine::str((llvm::Twine *)v41, &v44);
    if (v46 >= 0) {
      unsigned int v26 = (const std::string::value_type *)&v44;
    }
    else {
      unsigned int v26 = v44;
    }
    if (v46 >= 0) {
      std::string::size_type v27 = v46 & 0x7F;
    }
    else {
      std::string::size_type v27 = v45;
    }
    std::string::append(&v40, v26, v27);
    if (v46 < 0) {
      operator delete(v44);
    }
    std::string::append(&v40, ":32:64:64");
    v41[0] = "-p";
    uint64_t v42 = 75;
    __int16 v43 = 2307;
    llvm::Twine::str((llvm::Twine *)v41, &v44);
    if (v46 >= 0) {
      unint64_t v28 = (const std::string::value_type *)&v44;
    }
    else {
      unint64_t v28 = v44;
    }
    if (v46 >= 0) {
      std::string::size_type v29 = v46 & 0x7F;
    }
    else {
      std::string::size_type v29 = v45;
    }
    std::string::append(&v40, v28, v29);
    if (v46 < 0) {
      operator delete(v44);
    }
    std::string::append(&v40, ":32:64:64");
    unsigned int v25 = &v40;
    if (!v22)
    {
      v41[0] = "-p";
      uint64_t v42 = 7;
      __int16 v43 = 2307;
      llvm::Twine::str((llvm::Twine *)v41, &v44);
      if (v46 >= 0) {
        int v30 = (const std::string::value_type *)&v44;
      }
      else {
        int v30 = v44;
      }
      if (v46 >= 0) {
        std::string::size_type v31 = v46 & 0x7F;
      }
      else {
        std::string::size_type v31 = v45;
      }
      std::string::append(&v40, v30, v31);
      if (v46 < 0) {
        operator delete(v44);
      }
      std::string::append(&v40, ":32:64:64");
      unsigned int v25 = &v40;
    }
  }
  std::string::append(&v40, "-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32");
  if ((*(_DWORD *)(a3 + 24) & 0xFFFFFFFE) == 0x1C) {
    unsigned int v32 = "-S128";
  }
  else {
    unsigned int v32 = "-S64";
  }
  std::string::append(&v40, v32);
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    unint64_t size = *((unsigned char *)&v40.__r_.__value_.__s + 23) & 0x7F;
  }
  else
  {
    unint64_t size = v40.__r_.__value_.__l.__size_;
    unsigned int v25 = (std::string *)v40.__r_.__value_.__r.__words[0];
  }
  if ((a9 & 0xFF00000000) == 0) {
    unsigned int v16 = 0;
  }
  unsigned int v34 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, a10);
  llvm::LLVMTargetMachine::LLVMTargetMachine(a1, a2, v25, size, (long long *)a3, a4, a5, v35, a6, a7, (long long *)a8, __SPAIR64__(v34, v16), a11);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_1F25ED7E0;
  return a1;
}

uint64_t sub_1CB906918@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  char v6 = *((unsigned char *)a1 + 23);
  int v7 = v6;
  size_t v8 = v6 & 0x7F;
  if (v7 >= 0) {
    size_t v9 = v8;
  }
  else {
    size_t v9 = (size_t)a1[1];
  }
  char v10 = *((unsigned char *)a2 + 23);
  int v11 = v10;
  size_t v12 = v10 & 0x7F;
  if (v11 >= 0) {
    size_t v13 = v12;
  }
  else {
    size_t v13 = (size_t)a2[1];
  }
  uint64_t result = sub_1CB907098(a3, v13 + v9);
  if (*(char *)(result + 23) >= 0) {
    uint64_t v15 = (char *)result;
  }
  else {
    uint64_t v15 = *(char **)result;
  }
  if (v9)
  {
    if (*((char *)a1 + 23) >= 0) {
      unsigned int v16 = a1;
    }
    else {
      unsigned int v16 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v15, v16, v9);
  }
  if (v13)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v17 = a2;
    }
    else {
      uint64_t v17 = *a2;
    }
    uint64_t result = (uint64_t)memmove(&v15[v9], v17, v13);
  }
  v15[v9 + v13] = 0;
  return result;
}

void sub_1CB9069EC()
{
}

uint64_t sub_1CB906A8C()
{
  return 0;
}

uint64_t sub_1CB906A94()
{
  return 0;
}

uint64_t sub_1CB906AA0()
{
  return 1;
}

uint64_t sub_1CB906AA8(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  uint64_t v6 = *((void *)a2 + 6);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(void *)(a1 + 48) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
  int v7 = (_OWORD *)(a1 + 64);
  if (*((char *)a2 + 87) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v7, *((const void **)a2 + 8), *((void *)a2 + 9));
  }
  else
  {
    long long v8 = a2[4];
    *(void *)(a1 + 80) = *((void *)a2 + 10);
    _OWORD *v7 = v8;
  }
  long long v9 = *(long long *)((char *)a2 + 88);
  *(_OWORD *)(a1 + 104) = *(long long *)((char *)a2 + 104);
  *(_OWORD *)(a1 + 88) = v9;
  sub_1CB906B78(a1 + 120, (uint64_t *)a2 + 15);
  char v10 = (_OWORD *)(a1 + 280);
  if (*((char *)a2 + 303) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v10, *((const void **)a2 + 35), *((void *)a2 + 36));
  }
  else
  {
    long long v11 = *(long long *)((char *)a2 + 280);
    *(void *)(a1 + 296) = *((void *)a2 + 37);
    *char v10 = v11;
  }
  return a1;
}

uint64_t sub_1CB906B78(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v3;
  uint64_t v4 = a1 + 16;
  if (*((char *)a2 + 39) < 0)
  {
    uint64_t v14 = a2;
    sub_1CB8BDF7C(v4, (const void *)a2[2], a2[3]);
    a2 = v14;
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 1);
    *(void *)(v4 + 16) = a2[4];
    *(_OWORD *)uint64_t v4 = v5;
  }
  uint64_t v6 = (_OWORD *)(a1 + 40);
  if (*((char *)a2 + 63) < 0)
  {
    uint64_t v15 = a2;
    sub_1CB8BDF7C((uint64_t)v6, (const void *)a2[5], a2[6]);
    a2 = v15;
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 5);
    *(void *)(a1 + 56) = a2[7];
    _OWORD *v6 = v7;
  }
  long long v8 = (_OWORD *)(a1 + 64);
  if (*((char *)a2 + 87) < 0)
  {
    unsigned int v16 = a2;
    sub_1CB8BDF7C((uint64_t)v8, (const void *)a2[8], a2[9]);
    a2 = v16;
  }
  else
  {
    long long v9 = *((_OWORD *)a2 + 4);
    *(void *)(a1 + 80) = a2[10];
    *long long v8 = v9;
  }
  char v10 = (_OWORD *)(a1 + 88);
  if (*((char *)a2 + 111) < 0)
  {
    uint64_t v17 = a2;
    sub_1CB8BDF7C((uint64_t)v10, (const void *)a2[11], a2[12]);
    a2 = v17;
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 11);
    *(void *)(a1 + 104) = a2[13];
    *char v10 = v11;
  }
  long long v12 = *((_OWORD *)a2 + 7);
  *(void *)(a1 + 128) = a2[16];
  *(_OWORD *)(a1 + 112) = v12;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 136) = 0;
  sub_1CB906CCC((void *)(a1 + 136), a2[17], a2[18], 0xAAAAAAAAAAAAAAABLL * ((a2[18] - a2[17]) >> 3));
  return a1;
}

void *sub_1CB906CCC(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
      abort();
    }
    uint64_t v6 = result;
    uint64_t v7 = 3 * a4;
    uint64_t result = operator new(24 * a4);
    uint64_t v8 = (uint64_t)result;
    void *v6 = result;
    v6[1] = result;
    v6[2] = &result[v7];
    while (a2 != a3)
    {
      if (*(char *)(a2 + 23) < 0)
      {
        uint64_t result = sub_1CB8BDF7C(v8, *(const void **)a2, *(void *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
        *(void *)(v8 + 16) = *(void *)(a2 + 16);
      }
      a2 += 24;
      v8 += 24;
    }
    v6[1] = v8;
  }
  return result;
}

uint64_t sub_1CB906D7C(uint64_t a1)
{
  if (*(char *)(a1 + 303) < 0) {
    operator delete(*(void **)(a1 + 280));
  }
  uint64_t v4 = (void **)(a1 + 256);
  sub_1CB8338B8(&v4);
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*(void **)(a1 + 208));
  }
  if (*(char *)(a1 + 207) < 0) {
    operator delete(*(void **)(a1 + 184));
  }
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*(void **)(a1 + 160));
  }
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_1CB906E7C()
{
}

uint64_t sub_1CB906F34(uint64_t *__sz, uint64_t a2, char a3)
{
  __sz[10] += a2;
  uint64_t v5 = (1 << a3) - 1;
  uint64_t v6 = *__sz;
  uint64_t v7 = -(1 << a3);
  uint64_t v8 = ((v5 + *__sz) & v7) - *__sz;
  if (v8 + a2 > (unint64_t)(__sz[1] - *__sz))
  {
    if ((unint64_t)(v5 + a2) > 0x1000)
    {
      uint64_t v14 = v5 + a2;
      uint64_t v15 = operator new(v5 + a2, (std::align_val_t)8uLL);
      unsigned int v16 = *((_DWORD *)__sz + 18);
      if (v16 >= *((_DWORD *)__sz + 19)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v17 = (void *)(__sz[8] + 16 * v16);
      void *v17 = v15;
      v17[1] = v14;
      ++*((_DWORD *)__sz + 18);
      return ((unint64_t)v15 + v5) & v7;
    }
    else
    {
      unsigned int v10 = *((_DWORD *)__sz + 6) >> 7;
      if (v10 >= 0x1E) {
        LOBYTE(v10) = 30;
      }
      uint64_t v11 = 4096 << v10;
      long long v12 = (char *)operator new(4096 << v10, (std::align_val_t)8uLL);
      unsigned int v13 = *((_DWORD *)__sz + 6);
      if (v13 >= *((_DWORD *)__sz + 7)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(__sz[2] + 8 * v13) = v12;
      ++*((_DWORD *)__sz + 6);
      uint64_t result = (unint64_t)&v12[v5] & v7;
      *__sz = result + a2;
      __sz[1] = (uint64_t)&v12[v11];
    }
  }
  else
  {
    uint64_t result = v6 + v8;
    *__sz = v6 + v8 + a2;
  }
  return result;
}

uint64_t sub_1CB907098(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

void sub_1CB90711C()
{
}

uint64_t sub_1CB9071B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a4 + 8) > 0x40u) {
    operator new[]();
  }
  sub_1CB90D414((uint64_t)v9, a8);
  sub_1CB90D414((uint64_t)v11, (uint64_t)v9);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return 0;
}

uint64_t sub_1CB9073C8(llvm::DataLayout **a1, uint64_t a2, llvm::Value *this, llvm::Constant **a4, uint64_t a5)
{
  unsigned int v10 = llvm::Value::stripPointerCasts(this);
  if (*((unsigned __int8 *)v10 + 16) >= 4u) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v10;
  }
  long long v12 = *a1;
  unsigned int v13 = *(_DWORD *)(*(void *)this + 8);
  if ((v13 & 0xFE) == 0x12) {
    unsigned int v13 = *(_DWORD *)(**(void **)(*(void *)this + 16) + 8);
  }
  uint64_t v14 = *((void *)v12 + 29);
  if (v13 < 0x100) {
    goto LABEL_15;
  }
  unsigned int v15 = v13 >> 8;
  unint64_t v16 = *((unsigned int *)v12 + 60);
  uint64_t v17 = *((void *)v12 + 29);
  if (v16)
  {
    uint64_t v17 = v14;
    unint64_t v18 = v16;
    do
    {
      unint64_t v19 = v18 >> 1;
      uint64_t v20 = v17 + 16 * (v18 >> 1);
      unsigned int v21 = *(_DWORD *)(v20 + 8);
      uint64_t v22 = v20 + 16;
      v18 += ~(v18 >> 1);
      if (v21 < v15) {
        uint64_t v17 = v22;
      }
      else {
        unint64_t v18 = v19;
      }
    }
    while (v18);
  }
  if (v17 == v14 + 16 * v16 || *(_DWORD *)(v17 + 8) != v15) {
LABEL_15:
  }
    uint64_t v17 = v14;
  unsigned int v23 = *(_DWORD *)(v17 + 4);
  unsigned int v80 = v23;
  if (v23 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v79);
  }
  unint64_t v79 = 0;
  v77 = a4;
  uint64_t v78 = a2 | 4;
  if (!a5)
  {
    unsigned int v66 = v11 != 0;
    goto LABEL_99;
  }
  v73 = v11;
  uint64_t v74 = this;
  uint64_t v24 = 0;
  unsigned int v25 = &a4[a5];
  do
  {
    uint64_t v26 = v24;
    unint64_t v27 = v78 & 0xFFFFFFFFFFFFFFF8;
    if ((v78 & 4) == 0 || !v27)
    {
      AggregateElement = *v77;
      if (*v77) {
        BOOL v29 = *((unsigned char *)*v77 + 16) == 16;
      }
      else {
        BOOL v29 = 0;
      }
      if (!v29) {
        AggregateElement = (llvm::Constant *)llvm::Constant::getAggregateElement(AggregateElement, 0);
      }
      unsigned int v32 = (unsigned int *)*((void *)AggregateElement + 3);
      int v30 = (unsigned int *)((char *)AggregateElement + 24);
      std::string::size_type v31 = v32;
      if (v30[2] < 0x41) {
        std::string::size_type v31 = v30;
      }
      unint64_t v27 = *(void *)(*(void *)(v27 + 16) + 8 * *v31);
    }
    v33 = (unsigned int *)*a4;
    unsigned int v34 = *((unsigned __int8 *)*a4 + 16);
    if (*a4) {
      BOOL v35 = v34 == 16;
    }
    else {
      BOOL v35 = 0;
    }
    if (!v35)
    {
      if (v34 <= 0x14 && (*(_DWORD *)(*(void *)v33 + 8) & 0xFE) == 18)
      {
        SplatValue = (unsigned int *)llvm::Constant::getSplatValue(*a4, 0);
        if (!SplatValue)
        {
LABEL_79:
          v33 = 0;
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t v85 = 0;
        v82 = (void **)&v85;
        int v37 = sub_1CC189A5C((uint64_t)&v81, (uint64_t)v33);
        v33 = 0;
        if (!v37) {
          goto LABEL_38;
        }
        SplatValue = v85;
        if (!v85) {
          goto LABEL_79;
        }
      }
      if (*((unsigned char *)SplatValue + 16) == 16) {
        v33 = SplatValue;
      }
      else {
        v33 = 0;
      }
    }
LABEL_38:
    v38 = (llvm::Type *)(v78 & 0xFFFFFFFFFFFFFFF8);
    if ((v78 & 4) == 0 && v38)
    {
      v39 = v33 + 6;
      if (v33[8] >= 0x41) {
        v39 = *(unsigned int **)v39;
      }
      uint64_t v40 = *v39;
      StructLayout = llvm::DataLayout::getStructLayout(*a1, (llvm::StructType *)(v78 & 0xFFFFFFFFFFFFFFF8));
      llvm::APInt::operator+=((uint64_t)&v79, *((void *)StructLayout + v40 + 2));
LABEL_69:
      uint64_t v24 = v26;
      goto LABEL_70;
    }
    if (*(unsigned char *)(v27 + 8) == 19) {
      goto LABEL_98;
    }
    uint64_t v42 = *a1;
    if (!v38 || (v78 & 4) == 0)
    {
      __int16 v43 = *v77;
      if (*v77) {
        BOOL v44 = *((unsigned char *)*v77 + 16) == 16;
      }
      else {
        BOOL v44 = 0;
      }
      if (!v44) {
        __int16 v43 = (llvm::Constant *)llvm::Constant::getAggregateElement(v43, 0);
      }
      unsigned int v47 = (unsigned int *)*((void *)v43 + 3);
      std::string::size_type v45 = (unsigned int *)((char *)v43 + 24);
      char v46 = v47;
      if (v45[2] < 0x41) {
        char v46 = v45;
      }
      v38 = *(llvm::Type **)(*((void *)v38 + 2) + 8 * *v46);
    }
    unint64_t v48 = (unint64_t)(sub_1CB83544C((uint64_t)v42, (uint64_t)v38) + 7) >> 3;
    char Alignment = llvm::DataLayout::getAlignment(v42, v38, 1);
    uint64_t v24 = ((1 << Alignment) + v48 - 1) & -(1 << Alignment);
    if (v33)
    {
      llvm::APInt::sextOrTrunc((uint64_t)(v33 + 6), v23, (uint64_t)&v75);
      unsigned int v50 = v76;
      if (v76 <= 0x40)
      {
        v75 = (llvm::APInt *)((void)v75 * v24);
        if (v76) {
          goto LABEL_57;
        }
LABEL_87:
        unint64_t v51 = 0;
        goto LABEL_58;
      }
      llvm::APInt::tcMultiplyPart(v75, (unint64_t *)v75, (const unint64_t *)v24, 0, ((unint64_t)v76 + 63) >> 6, ((unint64_t)v76 + 63) >> 6, 0);
      unsigned int v50 = v76;
      if (!v76) {
        goto LABEL_87;
      }
LABEL_57:
      unint64_t v51 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v50;
      if (v50 >= 0x41) {
        unsigned int v52 = (llvm::APInt **)((char *)v75 + 8 * (((unint64_t)v50 + 63) >> 6) - 8);
      }
      else {
LABEL_58:
      }
        unsigned int v52 = &v75;
      *unsigned int v52 = (llvm::APInt *)((unint64_t)*v52 & v51);
      unsigned int v53 = v76;
      uint64_t v54 = v75;
      unsigned int v76 = 0;
      char v55 = v80;
      if (v80 >= 0x41)
      {
        uint64_t v58 = 0;
        v59 = (unint64_t *)v79;
        unint64_t v60 = ((unint64_t)v80 + 63) >> 6;
        unsigned int v61 = v75;
        unint64_t v62 = v60;
        do
        {
          uint64_t v63 = *(void *)v61;
          unsigned int v61 = (llvm::APInt *)((char *)v61 + 8);
          unint64_t v64 = v63 + *v59;
          BOOL v65 = v64 + 1 <= *v59;
          if (v58)
          {
            ++v64;
            uint64_t v58 = v65;
          }
          else
          {
            uint64_t v58 = v64 < *v59;
          }
          *v59++ = v64;
          --v62;
        }
        while (v62);
        *(void *)(v79 + 8 * (v60 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -v55;
      }
      else
      {
        if (v80) {
          unint64_t v56 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v80;
        }
        else {
          unint64_t v56 = 0;
        }
        unint64_t v79 = v56 & ((unint64_t)v75 + v79);
      }
      if (v53 >= 0x41 && v54) {
        MEMORY[0x1D25D9CB0](v54, 0x1000C8000313F17);
      }
      if (v76 >= 0x41 && v75) {
        MEMORY[0x1D25D9CB0](v75, 0x1000C8000313F17);
      }
      goto LABEL_69;
    }
    if (v26)
    {
LABEL_98:
      unsigned int v66 = 1;
      goto LABEL_99;
    }
LABEL_70:
    ++a4;
    sub_1CB90797C((uint64_t)&v77);
  }
  while (a4 != v25);
  if (v80 <= 0x3F)
  {
    uint64_t v68 = (uint64_t)(v79 << -(char)v80) >> -(char)v80;
    v69 = v73;
    unsigned int v67 = v74;
  }
  else
  {
    unsigned int v67 = v74;
    if (v80 == 64) {
      uint64_t v68 = v79;
    }
    else {
      uint64_t v68 = *(void *)v79;
    }
    v69 = v73;
  }
  uint64_t v70 = *(void *)v67;
  unsigned int v71 = *(_DWORD *)(*(void *)v67 + 8);
  if ((v71 & 0xFE) == 0x12) {
    unsigned int v71 = *(_DWORD *)(**(void **)(v70 + 16) + 8);
  }
  unsigned int v81 = v69;
  v82 = (void **)v68;
  BOOL v83 = v69 == 0;
  uint64_t v84 = v24;
  unsigned int v66 = (*(uint64_t (**)(llvm::DataLayout *, llvm::DataLayout *, llvm::Value **, unint64_t, void, void))(*(void *)a1[3] + 1064))(a1[3], *a1, &v81, v27, v71 >> 8, 0) ^ 1;
LABEL_99:
  if (v80 >= 0x41 && v79) {
    MEMORY[0x1D25D9CB0](v79, 0x1000C8000313F17);
  }
  return v66;
}

uint64_t sub_1CB90797C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  unint64_t v2 = v1 & 0xFFFFFFFFFFFFFFF8;
  if ((v1 & 4) == 0 || !v2)
  {
    AggregateElement = **(void ***)result;
    if (AggregateElement) {
      BOOL v4 = *((unsigned char *)AggregateElement + 16) == 16;
    }
    else {
      BOOL v4 = 0;
    }
    if (!v4)
    {
      unint64_t v13 = v2;
      uint64_t v14 = result;
      AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)AggregateElement, 0);
      unint64_t v2 = v13;
      uint64_t result = v14;
    }
    uint64_t v7 = (unsigned int *)AggregateElement[3];
    uint64_t v5 = (unsigned int *)(AggregateElement + 3);
    uint64_t v6 = v7;
    if (v5[2] >= 0x41) {
      uint64_t v5 = v6;
    }
    unint64_t v2 = *(void *)(*(void *)(v2 + 16) + 8 * *v5);
  }
  int v8 = *(unsigned __int8 *)(v2 + 8);
  if (v2) {
    BOOL v9 = v8 == 17;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9 || (v2 ? (BOOL v10 = (v8 & 0xFE) == 18) : (BOOL v10 = 0), v10))
  {
    uint64_t v12 = *(void *)(v2 + 24) | 4;
  }
  else
  {
    unint64_t v11 = v2 & 0xFFFFFFFFFFFFFFFBLL;
    if (v8 == 16) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
  }
  *(void *)result += 8;
  *(void *)(result + 8) = v12;
  return result;
}

uint64_t sub_1CB907A3C(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = ((*(_DWORD *)(a3 + 20) >> 1) & 0x3FFFFFFu) - 1;
  *a4 = 0;
  unsigned __int8 v13 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 528))(a2, *(void *)(*(void *)(a3 + 40) + 56));
  if (!v12) {
    return v12;
  }
  unsigned __int8 v14 = v13;
  if ((v13 & 1) == 0 && *(_DWORD *)(*(void *)(a1 + 232) + 12) < v12) {
    return v12;
  }
  int v15 = *(_DWORD *)(a3 + 20);
  unsigned int v76 = a4;
  if ((v15 & 0x40000000) != 0) {
    uint64_t v16 = *(void *)(a3 - 8);
  }
  else {
    uint64_t v16 = a3 - 32 * (v15 & 0x7FFFFFF);
  }
  uint64_t v17 = *(void *)(v16 + 64);
  unsigned int v18 = *(_DWORD *)(v17 + 32);
  unsigned int v87 = v18;
  uint64_t v77 = a5;
  uint64_t v78 = a6;
  if (v18 > 0x40) {
    operator new[]();
  }
  v86 = *(void **)(v17 + 24);
  unsigned int v85 = v18;
  __dst = v86;
  int v19 = (*(_DWORD *)(a3 + 20) >> 1) & 0x3FFFFFF;
  uint64_t v20 = (v19 - 1);
  if (v19 != 1)
  {
    for (uint64_t i = 0; i != v20; ++i)
    {
      int v22 = *(_DWORD *)(a3 + 20);
      if ((v22 & 0x40000000) != 0) {
        uint64_t v23 = *(void *)(a3 - 8);
      }
      else {
        uint64_t v23 = a3 - 32 * (v22 & 0x7FFFFFF);
      }
      uint64_t v24 = *(void *)(v23 + 32 * (2 * i + 2));
      unsigned int v25 = (void **)(v24 + 24);
      uint64_t v26 = *(unsigned int *)(v24 + 32);
      if (v26 > 0x40)
      {
        uint64_t v28 = *((void *)*v25 + ((v26 - 1) >> 6)) & (1 << (v26 - 1));
        unsigned int v29 = v87 - 1;
        if (v87 >= 0x41) {
          int v30 = (void **)((char *)v86 + 8 * (v29 >> 6));
        }
        else {
          int v30 = &v86;
        }
        if ((v28 != 0) == (((unint64_t)*v30 >> v29) & 1))
        {
          unint64_t v35 = ((unint64_t)(v26 + 63) >> 3) & 0x3FFFFFF8;
          while (v35)
          {
            unint64_t v36 = *(void *)((char *)*v25 + v35 - 8);
            unint64_t v37 = *(void *)((char *)v86 + v35 - 8);
            v35 -= 8;
            if (v36 != v37)
            {
              BOOL v31 = &v86 == v25;
              if (v36 > v37) {
                goto LABEL_34;
              }
              break;
            }
          }
        }
        else
        {
          BOOL v31 = &v86 == v25;
          if (v28) {
            goto LABEL_17;
          }
LABEL_34:
          if (!v31)
          {
LABEL_27:
            llvm::APInt::reallocate((uint64_t)&v86, v26);
            if (v87 <= 0x40) {
              v86 = *v25;
            }
            else {
              memcpy(v86, *v25, (((unint64_t)v87 + 63) >> 3) & 0x3FFFFFF8);
            }
          }
        }
      }
      else
      {
        if ((uint64_t)((void)*v25 << -(char)v26) >> -(char)v26 <= (uint64_t)((void)v86 << -(char)v26) >> -(char)v26) {
          goto LABEL_17;
        }
        if (v87 <= 0x40)
        {
          v86 = *v25;
          unsigned int v87 = v26;
          goto LABEL_17;
        }
        if (&v86 != v25) {
          goto LABEL_27;
        }
      }
LABEL_17:
      uint64_t v27 = *(unsigned int *)(v24 + 32);
      if (v27 > 0x40)
      {
        uint64_t v32 = *((void *)*v25 + ((v27 - 1) >> 6)) & (1 << (v27 - 1));
        unsigned int v33 = v85 - 1;
        if (v85 >= 0x41) {
          p_dst = (void **)((char *)__dst + 8 * (v33 >> 6));
        }
        else {
          p_dst = &__dst;
        }
        if ((v32 != 0) == (((unint64_t)*p_dst >> v33) & 1))
        {
          unint64_t v38 = ((unint64_t)(v27 + 63) >> 3) & 0x3FFFFFF8;
          while (v38)
          {
            unint64_t v39 = *(void *)((char *)*v25 + v38 - 8);
            unint64_t v40 = *(void *)((char *)__dst + v38 - 8);
            v38 -= 8;
            if (v39 != v40)
            {
              if (v39 > v40 || &__dst == v25) {
                goto LABEL_22;
              }
              goto LABEL_42;
            }
          }
          continue;
        }
        if (v32 && &__dst != v25)
        {
LABEL_42:
          llvm::APInt::reallocate((uint64_t)&__dst, v27);
          if (v85 <= 0x40) {
            __dst = *v25;
          }
          else {
            memcpy(__dst, *v25, (((unint64_t)v85 + 63) >> 3) & 0x3FFFFFF8);
          }
        }
      }
      else if ((uint64_t)((void)*v25 << -(char)v27) >> -(char)v27 < (uint64_t)((void)__dst << -(char)v27) >> -(char)v27)
      {
        if (v85 > 0x40)
        {
          if (&__dst != v25) {
            goto LABEL_42;
          }
        }
        else
        {
          __dst = *v25;
          unsigned int v85 = v27;
        }
      }
LABEL_22:
      ;
    }
  }
  if (v12 > *(_DWORD *)(*(void *)(a1 + 232) + 12))
  {
    if (v12 > 1) {
      unsigned __int8 v41 = v14;
    }
    else {
      unsigned __int8 v41 = 0;
    }
    uint64_t v42 = v77;
    if ((v41 & 1) == 0) {
      goto LABEL_136;
    }
LABEL_125:
    if (v12 >= (*(unsigned int (**)(uint64_t))(*(void *)a2 + 696))(a2))
    {
      if (v87 >= 0x41) {
        operator new[]();
      }
      unint64_t v68 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v87;
      if (!v87) {
        unint64_t v68 = 0;
      }
      int64_t v69 = v68 & ((unsigned char *)v86 - (unsigned char *)__dst);
      BOOL v70 = __CFADD__(v69, 1);
      uint64_t v71 = v69 + 1;
      if (v70) {
        uint64_t v72 = -1;
      }
      else {
        uint64_t v72 = v71;
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 536))(a2, a3, v12, v72, v42, a6))
      {
        *unsigned int v76 = v72;
        uint64_t v12 = 1;
      }
    }
    goto LABEL_136;
  }
  __int16 v43 = v83;
  unint64_t v79 = v83;
  unsigned int v80 = v83;
  uint64_t v81 = 4;
  int v82 = 0;
  int v44 = (*(_DWORD *)(a3 + 20) >> 1) & 0x3FFFFFF;
  uint64_t v45 = (v44 - 1);
  if (v44 != 1)
  {
    unsigned int v46 = 0;
    uint64_t v47 = 0;
    unsigned int v48 = 4;
    v49 = v83;
    while (1)
    {
      int v50 = *(_DWORD *)(a3 + 20);
      if ((v50 & 0x40000000) != 0) {
        uint64_t v51 = *(void *)(a3 - 8);
      }
      else {
        uint64_t v51 = a3 - 32 * (v50 & 0x7FFFFFF);
      }
      uint64_t v52 = (2 * v47 + 3);
      if (v47 == 4294967294) {
        uint64_t v52 = 1;
      }
      uint64_t v53 = *(void *)(v51 + 32 * v52);
      if (v49 != v43) {
        break;
      }
      if (v46)
      {
        uint64_t v54 = 0;
        uint64_t v55 = 8 * v46;
        unint64_t v56 = v43;
        while (*v56 != v53)
        {
          if (*v56 == -2) {
            uint64_t v54 = v56;
          }
          ++v56;
          v55 -= 8;
          if (!v55)
          {
            if (!v54) {
              goto LABEL_78;
            }
            *uint64_t v54 = v53;
            --v82;
            goto LABEL_101;
          }
        }
        goto LABEL_101;
      }
LABEL_78:
      if (v48 <= v46) {
        break;
      }
      HIDWORD(v81) = v46 + 1;
      *(void *)&v43[8 * v46] = v53;
LABEL_101:
      __int16 v43 = v79;
      v49 = v80;
      unsigned int v48 = v81;
      unsigned int v46 = HIDWORD(v81);
      if (++v47 == v45)
      {
        int v66 = HIDWORD(v81) - v82;
        goto LABEL_110;
      }
    }
    if (3 * v48 <= 4 * (v46 - v82))
    {
      if (v48 >= 0x40) {
        v48 *= 2;
      }
      else {
        unsigned int v48 = 128;
      }
    }
    else if (v48 - v46 >= v48 >> 3)
    {
      goto LABEL_82;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v79, v48);
    unsigned int v48 = v81;
    v49 = v80;
LABEL_82:
    unsigned int v57 = v48 - 1;
    unsigned int v58 = (v48 - 1) & ((v53 >> 4) ^ (v53 >> 9));
    v59 = &v49[8 * v58];
    uint64_t v60 = *v59;
    if (*v59 == -1)
    {
      unsigned int v61 = 0;
LABEL_94:
      if (v61) {
        BOOL v65 = v61;
      }
      else {
        BOOL v65 = v59;
      }
      if (*v65 != v53)
      {
        if (*v65 == -2) {
          --v82;
        }
        else {
          ++HIDWORD(v81);
        }
        *BOOL v65 = v53;
      }
    }
    else
    {
      unsigned int v61 = 0;
      int v62 = 1;
      while (v60 != v53)
      {
        if (v61) {
          BOOL v63 = 0;
        }
        else {
          BOOL v63 = v60 == -2;
        }
        if (v63) {
          unsigned int v61 = v59;
        }
        unsigned int v64 = v58 + v62++;
        unsigned int v58 = v64 & v57;
        v59 = &v49[8 * (v64 & v57)];
        uint64_t v60 = *v59;
        if (*v59 == -1) {
          goto LABEL_94;
        }
      }
    }
    goto LABEL_101;
  }
  int v66 = 0;
LABEL_110:
  if (sub_1CB908330(a2, &__dst, (uint64_t)&v86, a1))
  {
    uint64_t v42 = v77;
    a6 = v78;
    if (v12 < 3 || v66 != 1) {
      int v66 = v12 >= 5 && v66 == 2 || v12 > 5 && v66 == 3;
    }
  }
  else
  {
    int v66 = 0;
    uint64_t v42 = v77;
    a6 = v78;
  }
  if (v80 != v79) {
    free(v80);
  }
  if (v66) {
    uint64_t v67 = 1;
  }
  else {
    uint64_t v67 = v12;
  }
  if ((v66 | v14 ^ 1))
  {
    uint64_t v12 = v67;
  }
  else if (v12 >= 2)
  {
    goto LABEL_125;
  }
LABEL_136:
  if (v85 >= 0x41 && __dst) {
    MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
  }
  if (v87 >= 0x41 && v86) {
    MEMORY[0x1D25D9CB0](v86, 0x1000C8000313F17);
  }
  return v12;
}

BOOL sub_1CB908330(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4 = *(_DWORD *)(a3 + 8);
  if (v4 >= 0x41) {
    operator new[]();
  }
  if (v4) {
    unint64_t v5 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v4;
  }
  else {
    unint64_t v5 = 0;
  }
  unint64_t v6 = v5 & (*(void *)a3 - *a2);
  if (v6 == -1) {
    unint64_t v7 = -2;
  }
  else {
    unint64_t v7 = v6;
  }
  return v7 < *(unsigned int *)(*(void *)(a4 + 232) + 12);
}

uint64_t sub_1CB9084B0(uint64_t a1, llvm::ShuffleVectorInst *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v126[7] = *MEMORY[0x1E4F143B8];
  unsigned int v7 = *((unsigned __int8 *)this + 16);
  uint64_t v8 = v7 - 28;
  if (v7 < 0x1C) {
    goto LABEL_16;
  }
  if (v7 == 33 || v7 == 39) {
    goto LABEL_9;
  }
  if (v7 == 84)
  {
    uint64_t v9 = *((void *)this - 4);
    if (!v9
      || *(unsigned char *)(v9 + 16)
      || *(void *)(v9 + 24) != *((void *)this + 9)
      || (BOOL v10 = this, (*(unsigned char *)(v9 + 33) & 0x20) == 0))
    {
LABEL_9:
      uint64_t v11 = *((void *)this - 4);
      if (!v11 || *(unsigned char *)(v11 + 16) || *(void *)(v11 + 24) != *((void *)this + 9))
      {
        if (v7 == 84)
        {
          uint64_t v12 = 0;
        }
        else if (v7 == 39)
        {
          uint64_t v12 = (*((_DWORD *)this + 20) + 1);
        }
        else
        {
          uint64_t v12 = 2;
        }
        int v13 = 0;
        int v14 = *((_DWORD *)this + 5);
        uint64_t v15 = -(uint64_t)(v14 & 0x7FFFFFF);
        if (v14 < 0)
        {
          v111 = (char *)this - 32 * (v14 & 0x7FFFFFF);
          uint64_t v112 = *((void *)v111 - 1);
          if ((v112 & 0xFFFFFFFF0) != 0) {
            int v13 = *((_DWORD *)v111 - 3) - *(_DWORD *)&v111[-v112];
          }
          else {
            int v13 = 0;
          }
        }
        return ((-32 * v12 + 32 * (unint64_t)-v13 - 32 * v15 - 32) >> 5) + 1;
      }
      if (sub_1CB9091FC(a1, *((uint64_t ****)this - 4))) {
        return *(unsigned int *)(*(void *)(v11 + 24) + 12);
      }
      return 1;
    }
  }
  else
  {
LABEL_16:
    BOOL v10 = 0;
  }
  int v17 = *((_DWORD *)this + 5);
  uint64_t v18 = v17 & 0x7FFFFFF;
  if ((v17 & 0x7FFFFFF) == 1)
  {
    if ((v17 & 0x40000000) != 0) {
      int v19 = (llvm::Type *****)*((void *)this - 1);
    }
    else {
      int v19 = (llvm::Type *****)((char *)this - 32);
    }
    uint64_t v20 = **v19;
  }
  else
  {
    uint64_t v20 = 0;
  }
  uint64_t v21 = *(void *)this;
  if (v7 <= 0x1B)
  {
    if (v7 != 5) {
      return 1;
    }
    uint64_t v8 = *((unsigned __int16 *)this + 9);
  }
  if (v7 <= 0x1B) {
    int v22 = 0;
  }
  else {
    int v22 = this;
  }
  unint64_t v16 = 0;
  uint64_t v23 = a1 - 8;
  switch((int)v8)
  {
    case 1:
    case 2:
    case 3:
    case 55:
      if (a5) {
        BOOL v26 = v8 == 55;
      }
      else {
        BOOL v26 = 0;
      }
      return !v26;
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
      LODWORD(v118) = 0;
      LODWORD(v116) = 0;
      if ((v17 & 0x40000000) != 0) {
        uint64_t v27 = (uint64_t *)*((void *)this - 1);
      }
      else {
        uint64_t v27 = (uint64_t *)((char *)this - 32 * v18);
      }
      llvm::TargetTransformInfo::getOperandInfo(*v27, &v118);
      if (v8 != 12)
      {
        int v55 = *((_DWORD *)this + 5);
        if ((v55 & 0x40000000) != 0) {
          unint64_t v56 = (char *)*((void *)this - 1);
        }
        else {
          unint64_t v56 = (char *)this - 32 * (v55 & 0x7FFFFFF);
        }
        llvm::TargetTransformInfo::getOperandInfo(*((void *)v56 + 4), &v116);
      }
      int v59 = *((_DWORD *)this + 5);
      if ((v59 & 0x40000000) != 0)
      {
        unsigned int v61 = (uint64_t *)*((void *)this - 1);
        unint64_t v60 = v59 & 0x7FFFFFF;
      }
      else
      {
        unint64_t v60 = v59 & 0x7FFFFFF;
        unsigned int v61 = (uint64_t *)((char *)this - 32 * v60);
      }
      unsigned int v120 = &v122;
      uint64_t v121 = 0x200000000;
      if (v60 >= 3) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v60)
      {
        uint64_t v62 = 32 * v60;
        BOOL v63 = &v122;
        do
        {
          uint64_t v64 = *v61;
          v61 += 4;
          *v63++ = v64;
          v62 -= 32;
        }
        while (v62);
        BOOL v65 = (uint64_t *)v120;
      }
      else
      {
        BOOL v65 = &v122;
      }
      LODWORD(v121) = v60;
      unint64_t v16 = sub_1CD3F5A88(v23, v8, v21, a5, (uint64_t)v65, v60);
      uint64_t v51 = v120;
      if (v120 != &v122) {
        goto LABEL_115;
      }
      return v16;
    case 31:
      if (*(unsigned char *)(*((void *)this - 4) + 16) != 16) {
        return 1;
      }
      uint64_t v36 = *((void *)this + 5);
      uint64_t v37 = *(void *)(*(void *)(v36 + 56) + 80);
      uint64_t v38 = v37 ? v37 - 24 : 0;
      return v36 != v38 || (*((_WORD *)this + 9) & 0x40) != 0;
    case 32:
      if (a5 == 2)
      {
        uint64_t v42 = *((void *)this + 1);
        if (v42)
        {
          if (!*(void *)(v42 + 8) && (*(_DWORD *)(v21 + 8) & 0xFE) != 0x12)
          {
            uint64_t v43 = *(void *)(v42 + 24);
            if (v43)
            {
              if (*(unsigned char *)(v43 + 16) == 66) {
                uint64_t v21 = *(void *)v43;
              }
            }
          }
        }
      }
      uint64_t v44 = **((void **)this - 4);
      unsigned int v45 = *(_DWORD *)(v44 + 8);
      if ((v45 & 0xFE) == 0x12) {
        unsigned int v45 = *(_DWORD *)(**(void **)(v44 + 16) + 8);
      }
      if (a5) {
        return 1;
      }
      unint64_t v46 = ((unint64_t)*((unsigned __int16 *)this + 9) >> 1) & 0x3F | 0x100;
      uint64_t v47 = v45 >> 8;
      uint64_t v48 = a1 - 8;
      int v49 = 32;
      int v50 = (llvm::EVT *)v21;
      return sub_1CD3EE380(v48, v49, v50, v46, v47, 0);
    case 33:
      if ((v17 & 0x40000000) != 0) {
        unsigned __int8 v41 = (llvm::EVT ***)*((void *)this - 1);
      }
      else {
        unsigned __int8 v41 = (llvm::EVT ***)((char *)this - 32 * v18);
      }
      uint64_t v57 = **((void **)this - 4);
      unsigned int v58 = *(_DWORD *)(v57 + 8);
      if ((v58 & 0xFE) == 0x12) {
        unsigned int v58 = *(_DWORD *)(**(void **)(v57 + 16) + 8);
      }
      if (a5) {
        return 1;
      }
      int v50 = **v41;
      unint64_t v46 = ((unint64_t)*((unsigned __int16 *)this + 9) >> 1) & 0x3F | 0x100;
      uint64_t v47 = v58 >> 8;
      uint64_t v48 = a1 - 8;
      int v49 = 33;
      return sub_1CD3EE380(v48, v49, v50, v46, v47, 0);
    case 34:
      BOOL v26 = v7 == 62;
      uint64_t v52 = 24;
      if (v26) {
        uint64_t v52 = 64;
      }
      uint64_t v53 = *(void *)((char *)this + v52);
      if ((v17 & 0x40000000) != 0) {
        uint64_t v54 = (llvm::Value **)*((void *)this - 1);
      }
      else {
        uint64_t v54 = (llvm::Value **)((char *)this - 32 * v18);
      }
      return sub_1CB9073C8((llvm::DataLayout **)a1, v53, *v54, (llvm::Constant **)(a3 + 8), a4 - 1);
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
      unsigned int CastContextHint = llvm::TargetTransformInfo::getCastContextHint((uint64_t)v22);
      return sub_1CB90A01C(v23, v8, (llvm::Type ***)v21, v20, CastContextHint, a5, (uint64_t)v22);
    case 53:
    case 54:
      if ((v17 & 0x40000000) != 0) {
        BOOL v83 = (uint64_t **)*((void *)this - 1);
      }
      else {
        BOOL v83 = (uint64_t **)((char *)this - 32 * v18);
      }
      return sub_1CD3F5E3C(a1 - 8, v8, **v83, *(void *)this, a5);
    case 56:
      llvm::IntrinsicCostAttributes::IntrinsicCostAttributes((uint64_t)&v120, *(_DWORD *)(*((void *)this - 4) + 36), (uint64_t)v10, 0, 1);
      unint64_t v16 = sub_1CB909674(v23, (uint64_t)&v120, a5);
      if (v125 != v126) {
        free(v125);
      }
      uint64_t v51 = v123;
      if (v123 != &v124) {
LABEL_115:
      }
        free(v51);
      return v16;
    case 57:
      *(void *)v115 = 0;
      uint64_t v116 = 0;
      unsigned int v120 = &v116;
      uint64_t v121 = (uint64_t)v115;
      if ((sub_1CB90D004((void **)&v120, (uint64_t)this) & 1) != 0
        || (uint64_t v118 = (llvm::Type *)&v116, v119 = v115, (sub_1CB90D1A4((void **)&v118, (uint64_t)this) & 1) != 0))
      {
        LODWORD(v118) = 0;
        int v114 = 0;
        llvm::TargetTransformInfo::getOperandInfo(v116, &v118);
        llvm::TargetTransformInfo::getOperandInfo(*(uint64_t *)v115, &v114);
        unsigned int v120 = &v122;
        uint64_t v122 = v116;
        int v123 = *(uint64_t **)v115;
        uint64_t v121 = 0x200000002;
        if (sub_1CB90D2C0((uint64_t)v113, (unsigned __int8 *)this)) {
          uint64_t v84 = 29;
        }
        else {
          uint64_t v84 = 28;
        }
        unint64_t v16 = sub_1CD3F5A88(v23, v84, v21, a5, (uint64_t)v120, v121);
        if (v120 != &v122) {
          free(v120);
        }
      }
      else
      {
        int v86 = *((_DWORD *)this + 5);
        if ((v86 & 0x40000000) != 0) {
          unsigned int v87 = (uint64_t **)*((void *)this - 1);
        }
        else {
          unsigned int v87 = (uint64_t **)((char *)this - 32 * (v86 & 0x7FFFFFF));
        }
        return sub_1CD3F5E3C(v23, 57, *(void *)this, **v87, a5);
      }
      return v16;
    case 61:
      if (v7 != 89) {
        return 1;
      }
      if ((v17 & 0x40000000) != 0) {
        unint64_t v39 = (uint64_t **)*((void *)this - 1);
      }
      else {
        unint64_t v39 = (uint64_t **)((char *)this - 32 * v18);
      }
      uint64_t v74 = **v39;
      unint64_t v75 = *(void *)(a1 + 24);
      if ((*(_DWORD *)(v74 + 8) & 0xFE) == 0x12) {
        uint64_t v74 = **(void **)(v74 + 16);
      }
      unsigned int v76 = *(llvm::LLVMContext **)v74;
      unint64_t v77 = sub_1CB87DC14(*(void *)(a1 + 24), *(void *)a1, (llvm::EVT *)v74, 0);
      uint64_t v79 = v78;
      uint64_t v116 = 1;
      LODWORD(v117) = 0;
      while (2)
      {
        llvm::TargetLoweringBase::getTypeConversion(v75, v76, v77, v79, (uint64_t)&v120);
        if (!(_BYTE)v120) {
          return v116;
        }
        if (v120 == 10) {
          return 0;
        }
        if ((v120 & 0xFB) == 2)
        {
          uint64_t v118 = (llvm::Type *)2;
          LODWORD(v119) = 0;
          sub_1CB90C9D4((uint64_t)&v116, (uint64_t)&v118);
        }
        int v80 = v77;
        unint64_t v77 = v121;
        if (v80 != v121)
        {
          uint64_t v81 = v122;
LABEL_134:
          uint64_t v79 = v81;
          continue;
        }
        break;
      }
      if (!v80)
      {
        uint64_t v81 = v122;
        if (v79 != v122) {
          goto LABEL_134;
        }
      }
      return v116;
    case 62:
      if (v7 != 90) {
        return 1;
      }
      unint64_t v28 = *(void *)(a1 + 24);
      if ((*(_DWORD *)(v21 + 8) & 0xFE) == 0x12) {
        uint64_t v21 = **(void **)(v21 + 16);
      }
      unsigned int v29 = *(llvm::Type ***)v21;
      unint64_t v30 = sub_1CB87DC14(*(void *)(a1 + 24), *(void *)a1, (llvm::EVT *)v21, 0);
      uint64_t v32 = v31;
      uint64_t v116 = 1;
      LODWORD(v117) = 0;
      while (2)
      {
        llvm::TargetLoweringBase::getTypeConversion(v28, (llvm::LLVMContext *)v29, v30, v32, (uint64_t)&v120);
        if (!(_BYTE)v120) {
          return v116;
        }
        if (v120 == 10) {
          return 0;
        }
        if ((v120 & 0xFB) == 2)
        {
          uint64_t v118 = (llvm::Type *)2;
          LODWORD(v119) = 0;
          sub_1CB90C9D4((uint64_t)&v116, (uint64_t)&v118);
        }
        int v33 = v30;
        unint64_t v30 = v121;
        if (v33 == v121)
        {
          if (v33) {
            return v116;
          }
          uint64_t v34 = v122;
          if (v32 == v122) {
            return v116;
          }
        }
        else
        {
          uint64_t v34 = v122;
        }
        uint64_t v32 = v34;
        continue;
      }
    case 63:
      if (v7 != 91) {
        return 1;
      }
      if ((v17 & 0x40000000) != 0) {
        unint64_t v35 = (uint64_t **)*((void *)this - 1);
      }
      else {
        unint64_t v35 = (uint64_t **)((char *)this - 32 * v18);
      }
      uint64_t v66 = **v35;
      LODWORD(v118) = 0;
      LODWORD(v116) = 0;
      uint64_t v67 = (uint64_t *)*((void *)this - 8);
      uint64_t v68 = *v67;
      uint64_t v69 = *(unsigned int *)(*v67 + 32);
      uint64_t v70 = *((unsigned int *)this + 18);
      if (v69 != v70)
      {
        if (v69 >= v70 || (llvm::ShuffleVectorInst::isIdentityWithPadding(this) & 1) == 0)
        {
          if (*(unsigned char *)(v21 + 8) == 19) {
            goto LABEL_143;
          }
          int v82 = (int *)*((void *)this + 8);
          if (llvm::ShuffleVectorInst::isExtractSubvectorMask(v82, v70, v69, (int *)&v116))
          {
            uint64_t v72 = v23;
            uint64_t v73 = 5;
            uint64_t v95 = v66;
            v96 = v82;
            uint64_t v97 = v70;
            uint64_t v98 = v21;
            return sub_1CD3F6010(v72, v73, v95, v96, v97, v98);
          }
          if (*(unsigned char *)(v21 + 8) == 19
            || !llvm::ShuffleVectorInst::isInsertSubvectorMask(v82, v70, *(_DWORD *)(v68 + 32), &v118, (signed int *)&v116))
          {
LABEL_143:
            int v114 = 0;
            v115[0] = 0;
            if (llvm::ShuffleVectorInst::isReplicationMask(this, v115, &v114))
            {
              unsigned int v88 = *((_DWORD *)this + 18);
              LODWORD(v121) = v88;
              if (v88 > 0x40) {
                llvm::APInt::initSlowCase((llvm::APInt *)&v120);
              }
              unsigned int v120 = 0;
              if (v88)
              {
                uint64_t v89 = 0;
                uint64_t v90 = *((void *)this + 8);
                uint64_t v91 = v88;
                unsigned int v92 = v121;
                uint64_t v93 = 4 * v91;
                do
                {
                  if (*(_DWORD *)(v90 + 4 * v89) != -1)
                  {
                    uint64_t v94 = 1 << v89;
                    if (v92 > 0x40) {
                      *((void *)v120 + (v89 >> 6)) |= v94;
                    }
                    else {
                      unsigned int v120 = (void *)((unint64_t)v120 | v94);
                    }
                  }
                  ++v89;
                  v93 -= 4;
                }
                while (v93);
              }
              unint64_t v16 = sub_1CD3F60EC(v23, *(llvm::FixedVectorType **)(v66 + 24), v115[0], (llvm::Type *)v114, (llvm::APIntOps *)&v120);
              if (v121 >= 0x41 && v120) {
                MEMORY[0x1D25D9CB0](v120, 0x1000C8000313F17);
              }
            }
            else if (a5)
            {
              return 1;
            }
            else
            {
              return -1;
            }
            return v16;
          }
          uint64_t v99 = (int *)*((void *)this + 8);
          uint64_t v100 = *((unsigned int *)this + 18);
          unsigned int v101 = (llvm::FixedVectorType *)v21;
          if ((*(_DWORD *)(v21 + 8) & 0xFE) == 0x12) {
            unsigned int v101 = **(llvm::FixedVectorType ***)(v21 + 16);
          }
          llvm::FixedVectorType::get(v101, (llvm::Type *)v118);
          uint64_t v98 = v102;
          uint64_t v72 = v23;
          uint64_t v73 = 4;
          uint64_t v95 = v21;
          v96 = v99;
          uint64_t v97 = v100;
          return sub_1CD3F6010(v72, v73, v95, v96, v97, v98);
        }
        return 0;
      }
      uint64_t v71 = (int *)*((void *)this + 8);
      if (sub_1CC5D47FC(v71, *(unsigned int *)(*v67 + 32), *(_DWORD *)(*v67 + 32))) {
        return 0;
      }
      if (llvm::ShuffleVectorInst::isReverseMask(v71, v69))
      {
        uint64_t v72 = v23;
        uint64_t v73 = 1;
LABEL_203:
        uint64_t v95 = v21;
        v96 = v71;
        uint64_t v97 = v69;
        uint64_t v98 = 0;
        return sub_1CD3F6010(v72, v73, v95, v96, v97, v98);
      }
      if (llvm::ShuffleVectorInst::isSelectMask(v71, v69))
      {
        uint64_t v72 = v23;
        uint64_t v73 = 2;
        goto LABEL_203;
      }
      if (llvm::ShuffleVectorInst::isTransposeMask(v71, v69))
      {
        uint64_t v72 = v23;
        uint64_t v73 = 3;
        goto LABEL_203;
      }
      if (llvm::ShuffleVectorInst::isZeroEltSplatMask(v71, v69))
      {
        uint64_t v72 = v23;
        uint64_t v73 = 0;
        goto LABEL_203;
      }
      if (v69)
      {
        char v103 = 0;
        char v104 = 0;
        uint64_t v105 = 4 * v69;
        int v106 = v71;
        while (1)
        {
          int v107 = *v106;
          if (*v106 != -1)
          {
            v103 |= v107 < (int)v69;
            v104 |= v107 >= (int)v69;
            if (v103 & 1) != 0 && (v104) {
              break;
            }
          }
          ++v106;
          v105 -= 4;
          if (!v105)
          {
            if (v103) {
              goto LABEL_202;
            }
            goto LABEL_194;
          }
        }
      }
      else
      {
        char v104 = 0;
LABEL_194:
        if (v104)
        {
LABEL_202:
          uint64_t v72 = v23;
          uint64_t v73 = 7;
          goto LABEL_203;
        }
      }
      if (*(unsigned char *)(v21 + 8) == 19
        || (isInsertSubvectorMask = llvm::ShuffleVectorInst::isInsertSubvectorMask(v71, v69, v69, &v118, (signed int *)&v116), v69 = *((unsigned int *)this + 18), uint64_t v71 = (int *)*((void *)this + 8), !isInsertSubvectorMask))
      {
        uint64_t v72 = v23;
        uint64_t v73 = 6;
        goto LABEL_203;
      }
      v109 = (llvm::FixedVectorType *)v21;
      if ((*(_DWORD *)(v21 + 8) & 0xFE) == 0x12) {
        v109 = **(llvm::FixedVectorType ***)(v21 + 16);
      }
      llvm::FixedVectorType::get(v109, (llvm::Type *)v118);
      uint64_t v98 = v110;
      uint64_t v72 = v23;
      uint64_t v73 = 4;
      uint64_t v95 = v21;
      v96 = v71;
      uint64_t v97 = v69;
      return sub_1CD3F6010(v72, v73, v95, v96, v97, v98);
    case 64:
    case 67:
      return v16;
    default:
      return 1;
  }
}

uint64_t sub_1CB9091FC(uint64_t a1, uint64_t ***a2)
{
  if ((a2[4] & 0x2000) != 0) {
    return 0;
  }
  if ((a2[4] & 0xFu) - 7 >= 2 && (*((unsigned char *)a2 + 23) & 0x10) != 0)
  {
    uint64_t v3 = ***a2;
    uint64_t v4 = *(void *)(v3 + 152);
    uint64_t v5 = *(unsigned int *)(v3 + 168);
    if (v5)
    {
      LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      unsigned int v7 = (uint64_t ****)(v4 + 16 * v6);
      uint64_t v8 = *v7;
      if (*v7 != a2)
      {
        int v9 = 1;
        do
        {
          if (v8 == (uint64_t ***)-4096) {
            goto LABEL_13;
          }
          int v10 = v6 + v9++;
          uint64_t v6 = v10 & (v5 - 1);
          uint64_t v8 = *(uint64_t ****)(v4 + 16 * v6);
        }
        while (v8 != a2);
        unsigned int v7 = (uint64_t ****)(v4 + 16 * v6);
      }
    }
    else
    {
LABEL_13:
      unsigned int v7 = (uint64_t ****)(v4 + 16 * v5);
    }
    uint64_t v11 = v7[1];
    switch((unint64_t)*v11)
    {
      case 3uLL:
        if (*((_WORD *)v11 + 8) == 26995 && *((unsigned char *)v11 + 18) == 110) {
          return 0;
        }
        if (*((_WORD *)v11 + 8) == 28515 && *((unsigned char *)v11 + 18) == 115) {
          return 0;
        }
        if (*((_WORD *)v11 + 8) == 28528 && *((unsigned char *)v11 + 18) == 119) {
          return 0;
        }
        if (*((_WORD *)v11 + 8) == 26214 && *((unsigned char *)v11 + 18) == 115) {
          return 0;
        }
        int v16 = *((unsigned __int16 *)v11 + 8);
        int v17 = *((unsigned __int8 *)v11 + 18);
        BOOL v18 = v16 == 25185;
        goto LABEL_94;
      case 4uLL:
        if (*((_DWORD *)v11 + 4) == 1935827302
          || *((_DWORD *)v11 + 4) == 1852403046
          || *((_DWORD *)v11 + 4) == 2019650918
          || *((_DWORD *)v11 + 4) == 1718511987
          || *((_DWORD *)v11 + 4) == 1819175283
          || *((_DWORD *)v11 + 4) == 1718841187
          || *((_DWORD *)v11 + 4) == 1819504483
          || *((_DWORD *)v11 + 4) == 1953657203
          || *((_DWORD *)v11 + 4) == 1719103344
          || *((_DWORD *)v11 + 4) == 1819766640
          || *((_DWORD *)v11 + 4) == 846231653
          || *((_DWORD *)v11 + 4) == 1818846563
          || *((_DWORD *)v11 + 4) == 1819502182)
        {
          return 0;
        }
        BOOL v19 = *((_DWORD *)v11 + 4) == 1935827308;
        return !v19;
      case 5uLL:
        if (*((_DWORD *)v11 + 4) == 1935827302 && *((unsigned char *)v11 + 20) == 102) {
          return 0;
        }
        if (*((_DWORD *)v11 + 4) == 1935827302 && *((unsigned char *)v11 + 20) == 108) {
          return 0;
        }
        if (*((_DWORD *)v11 + 4) == 1852403046 && *((unsigned char *)v11 + 20) == 102) {
          return 0;
        }
        if (*((_DWORD *)v11 + 4) == 1852403046 && *((unsigned char *)v11 + 20) == 108) {
          return 0;
        }
        if (*((_DWORD *)v11 + 4) == 2019650918 && *((unsigned char *)v11 + 20) == 102) {
          return 0;
        }
        if (*((_DWORD *)v11 + 4) == 2019650918 && *((unsigned char *)v11 + 20) == 108) {
          return 0;
        }
        if (*((_DWORD *)v11 + 4) == 1953657203 && *((unsigned char *)v11 + 20) == 102) {
          return 0;
        }
        if (*((_DWORD *)v11 + 4) == 1953657203 && *((unsigned char *)v11 + 20) == 108) {
          return 0;
        }
        if (*((_DWORD *)v11 + 4) == 846231653 && *((unsigned char *)v11 + 20) == 108) {
          return 0;
        }
        if (*((_DWORD *)v11 + 4) == 846231653 && *((unsigned char *)v11 + 20) == 102) {
          return 0;
        }
        if (*((_DWORD *)v11 + 4) == 1869573222 && *((unsigned char *)v11 + 20) == 114) {
          return 0;
        }
        if (*((_DWORD *)v11 + 4) == 1853190002 && *((unsigned char *)v11 + 20) == 100) {
          return 0;
        }
        int v32 = *((_DWORD *)v11 + 4);
        int v17 = *((unsigned __int8 *)v11 + 20);
        BOOL v18 = v32 == 1650551916;
LABEL_94:
        BOOL v19 = v18 && v17 == 115;
        return !v19;
      case 6uLL:
        int v33 = *((_DWORD *)v11 + 4);
        int v34 = *((unsigned __int16 *)v11 + 10);
        BOOL v35 = v33 == 1869573222;
        int v36 = 26226;
        return !v35 || v34 != v36;
      case 8uLL:
        return v11[2] != (uint64_t **)0x6E67697379706F63;
      case 9uLL:
        if (v11[2] == (uint64_t **)0x6E67697379706F63 && *((unsigned char *)v11 + 24) == 102) {
          return 0;
        }
        unint64_t v39 = v11[2];
        int v34 = *((unsigned __int8 *)v11 + 24);
        BOOL v35 = v39 == (uint64_t **)0x6E67697379706F63;
        int v36 = 108;
        return !v35 || v34 != v36;
      default:
        return 1;
    }
  }
  return 1;
}

uint64_t sub_1CB909674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1 + 8;
  uint64_t v7 = sub_1CB90A9F8(a1 + 8, a2);
  BOOL v9 = v7 < 0;
  if (v8) {
    BOOL v9 = v8 < 0;
  }
  if (!v9)
  {
    BOOL v10 = v8 < 1;
    if (!v8) {
      BOOL v10 = v7 < 1;
    }
    if (v10) {
      return 0;
    }
  }
  int v12 = *(_DWORD *)(a2 + 16);
  if (v12 > 0x181) {
    return 1;
  }
  unsigned int v13 = *(_DWORD *)(a2 + 80);
  if (!v13) {
    return sub_1CB90AA94(a1, a2, a3);
  }
  int v14 = *(_DWORD **)(a2 + 8);
  int v15 = v14[2];
  if ((v14[2] & 0xFE) == 0x12) {
    unint64_t v16 = v14[8] | ((unint64_t)(v15 == 19) << 32);
  }
  else {
    unint64_t v16 = 1;
  }
  uint64_t v18 = *(void *)a2;
  int v19 = *(_DWORD *)(a2 + 120);
  if (v12 <= 185)
  {
    if (v12 <= 147)
    {
      switch(v12)
      {
        case 130:
          if (v15 == 19) {
            return sub_1CB90A9F8(v6, a2);
          }
          return 1;
        case 131:
          if (v15 == 19) {
            return sub_1CB90A9F8(v6, a2);
          }
          uint64_t v57 = ***(void ***)(a2 + 72);
          uint64_t v58 = a1;
          uint64_t v59 = 5;
          goto LABEL_115;
        case 132:
          int v55 = *(uint64_t ***)(a2 + 72);
          uint64_t v56 = *v55[1];
          if (*(unsigned char *)(v56 + 8) == 19) {
            return sub_1CB90A9F8(v6, a2);
          }
          uint64_t v57 = **v55;
          uint64_t v58 = a1;
          uint64_t v59 = 4;
          return sub_1CD3F6010(v58, v59, v57, 0, 0, v56);
        case 133:
          uint64_t v57 = ***(void ***)(a2 + 72);
          uint64_t v58 = a1;
          uint64_t v59 = 1;
          goto LABEL_115;
        case 134:
          uint64_t v57 = ***(void ***)(a2 + 72);
          uint64_t v58 = a1;
          uint64_t v59 = 8;
LABEL_115:
          uint64_t v56 = *(void *)(a2 + 8);
          return sub_1CD3F6010(v58, v59, v57, 0, 0, v56);
        default:
          if (v12 == 52)
          {
            if (v16 != 1) {
              goto LABEL_86;
            }
            char v38 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 224))(*(void *)(a1 + 32));
          }
          else
          {
            if (v12 != 54 || v16 != 1) {
              goto LABEL_86;
            }
            char v38 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 216))(*(void *)(a1 + 32));
          }
          unint64_t v61 = 0;
          unint64_t v11 = 1;
          if (v38) {
            return v11;
          }
          break;
      }
      goto LABEL_95;
    }
    if ((v12 - 148) >= 2)
    {
      if (v12 == 153)
      {
        unint64_t v42 = sub_1CB87DC14(*(void *)(a1 + 32), *(void *)(a1 + 8), *(llvm::EVT **)(a2 + 8), (llvm::Type *)1);
        uint64_t v44 = v43;
        unint64_t v45 = sub_1CB87DC14(*(void *)(a1 + 32), *(void *)(a1 + 8), **(llvm::EVT ***)(a2 + 24), (llvm::Type *)1);
        if ((*(uint64_t (**)(void, unint64_t, uint64_t, unint64_t, uint64_t))(**(void **)(a1 + 32) + 104))(*(void *)(a1 + 32), v42, v44, v45, v46))
        {
          BOOL v83 = **(uint64_t ****)(a2 + 24);
          uint64_t v84 = (llvm::Type *)v14[8];
          if (*((unsigned char *)v14 + 8) == 19) {
            llvm::ScalableVectorType::get(v83, v84);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v83, v84);
          }
          uint64_t v86 = v85;
          uint64_t v96 = 0;
          uint64_t v97 = (_DWORD *)v85;
          LODWORD(v98) = 300;
          uint64_t v99 = v101;
          uint64_t v102 = v104;
          uint64_t v103 = 0x400000000;
          int v105 = v19;
          long long v106 = xmmword_1CD96D880;
          uint64_t v100 = 0x400000000;
          unint64_t v87 = sub_1CB90AA94(a1, (uint64_t)&v96, a3);
          unint64_t v88 = sub_1CD3F5E3C(a1, 53, v86, (uint64_t)v14, a3);
          if (__OFADD__(v87, v88)) {
            unint64_t v11 = ((uint64_t)(v87 + v88) >> 63) ^ 0x8000000000000000;
          }
          else {
            unint64_t v11 = v87 + v88;
          }
          if (v102 != v104) {
            free(v102);
          }
          int v22 = v99;
          if (v99 != v101) {
            goto LABEL_23;
          }
        }
        else
        {
          unint64_t v47 = *(void *)(a1 + 32);
          uint64_t v48 = *(void *)(a1 + 8);
          int v49 = *(llvm::LLVMContext **)v14;
          unint64_t v50 = sub_1CB87DC14(v47, v48, (llvm::EVT *)v14, 0);
          uint64_t v52 = v51;
          uint64_t v94 = 1;
          LODWORD(v95) = 0;
          while (1)
          {
            llvm::TargetLoweringBase::getTypeConversion(v47, v49, v50, v52, (uint64_t)&v96);
            if (!(_BYTE)v96) {
              return v94;
            }
            if (v96 == 10) {
              break;
            }
            if ((v96 & 0xFB) == 2)
            {
              uint64_t __src = 2;
              LODWORD(v108) = 0;
              sub_1CB90C9D4((uint64_t)&v94, (uint64_t)&__src);
            }
            int v53 = v50;
            unint64_t v50 = (unint64_t)v97;
            if (v53 == v97)
            {
              if (v53) {
                return v94;
              }
              uint64_t v54 = v98;
              if (v52 == v98) {
                return v94;
              }
            }
            else
            {
              uint64_t v54 = v98;
            }
            uint64_t v52 = v54;
          }
          return 0;
        }
        return v11;
      }
      if (v12 == 184)
      {
        uint64_t v77 = *(void *)(a2 + 72);
        uint64_t v78 = *(void *)(v77 + 8);
        unsigned int v79 = *(unsigned __int8 *)(*(void *)(v77 + 16) + 16);
        int v80 = (unint64_t *)(v78 + 24);
        if (*(_DWORD *)(v78 + 32) >= 0x41u) {
          int v80 = (unint64_t *)*v80;
        }
        BOOL v66 = v79 > 0x14;
        unint64_t v81 = *v80;
        unint64_t v82 = __clz(v81) ^ 0x3F;
        if (v81) {
          unsigned __int8 v70 = v82;
        }
        else {
          unsigned __int8 v70 = 0;
        }
        uint64_t v71 = a1;
        int v72 = 32;
        uint64_t v69 = *(void *)(a2 + 8);
        return sub_1CD3F659C(v71, v72, v69, v70, v66, 1, a3);
      }
      goto LABEL_86;
    }
    if (v15 != 19)
    {
      uint64_t v23 = *(uint64_t **)(a2 + 72);
      uint64_t v24 = *v23;
      uint64_t v25 = v23[1];
      uint64_t v26 = v23[2];
      LODWORD(v96) = 0;
      LODWORD(__src) = 0;
      LODWORD(v94) = 0;
      llvm::TargetTransformInfo::getOperandInfo(v24, &v96);
      llvm::TargetTransformInfo::getOperandInfo(v25, &__src);
      int OperandInfo = llvm::TargetTransformInfo::getOperandInfo(v26, &v94);
      unint64_t v28 = sub_1CD3F5A88(a1, 29, (uint64_t)v14, a3, 0, 0);
      unint64_t v29 = sub_1CD3F5A88(a1, 15, (uint64_t)v14, a3, 0, 0);
      if (__OFADD__(v28, v29)) {
        unint64_t v30 = ((uint64_t)(v28 + v29) >> 63) ^ 0x8000000000000000;
      }
      else {
        unint64_t v30 = v28 + v29;
      }
      unint64_t v31 = sub_1CD3F5A88(a1, 25, (uint64_t)v14, a3, 0, 0);
      if (__OFADD__(v30, v31)) {
        unint64_t v32 = ((uint64_t)(v30 + v31) >> 63) ^ 0x8000000000000000;
      }
      else {
        unint64_t v32 = v30 + v31;
      }
      unint64_t v33 = sub_1CD3F5A88(a1, 26, (uint64_t)v14, a3, 0, 0);
      if (__OFADD__(v32, v33)) {
        unint64_t v11 = ((uint64_t)(v32 + v33) >> 63) ^ 0x8000000000000000;
      }
      else {
        unint64_t v11 = v32 + v33;
      }
      if ((OperandInfo - 4) <= 0xFFFFFFFD)
      {
        unint64_t v90 = sub_1CD3F5A88(a1, 22, (uint64_t)v14, a3, 0, 0);
        if (__OFADD__(v11, v90)) {
          unint64_t v11 = ((uint64_t)(v11 + v90) >> 63) ^ 0x8000000000000000;
        }
        else {
          v11 += v90;
        }
      }
      if (v24 != v25)
      {
        uint64_t v34 = **(void **)v14 + 1888;
        if ((v14[2] & 0xFE) == 0x12)
        {
          uint64_t v91 = (llvm::Type *)v14[8];
          unsigned int v92 = (uint64_t **)(**(void **)v14 + 1888);
          if (v14[2] == 19) {
            llvm::ScalableVectorType::get(v92, v91);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v92, v91);
          }
          uint64_t v34 = v93;
        }
        unint64_t v35 = sub_1CD3F5E3C(a1, 53, (uint64_t)v14, v34, a3);
        if (__OFADD__(v11, v35)) {
          unint64_t v36 = ((uint64_t)(v11 + v35) >> 63) ^ 0x8000000000000000;
        }
        else {
          unint64_t v36 = v11 + v35;
        }
        unint64_t v37 = sub_1CD3F5E3C(a1, 57, (uint64_t)v14, v34, a3);
        if (__OFADD__(v36, v37)) {
          return ((uint64_t)(v36 + v37) >> 63) ^ 0x8000000000000000;
        }
        else {
          return v36 + v37;
        }
      }
      return v11;
    }
    return sub_1CB90A9F8(v6, a2);
  }
  if ((v12 - 317) <= 0xC)
  {
    if (((1 << (v12 - 61)) & 0x1FDB) != 0)
    {
      uint64_t __src = ***(void ***)(a2 + 72);
      uint64_t v96 = v18;
      uint64_t v97 = v14;
      LODWORD(v98) = v12;
      uint64_t v99 = v101;
      uint64_t v100 = 0x400000000;
      uint64_t v102 = v104;
      uint64_t v103 = 0x400000000;
      int v105 = v19;
      long long v106 = xmmword_1CD91D2E0;
      uint64_t v20 = (char *)&v108;
    }
    else
    {
      unint64_t v39 = *(uint64_t ***)(a2 + 72);
      unsigned __int8 v41 = *v39;
      unint64_t v40 = v39[1];
      uint64_t __src = *v41;
      uint64_t v108 = *v40;
      uint64_t v96 = v18;
      uint64_t v97 = v14;
      LODWORD(v98) = v12;
      uint64_t v99 = v101;
      uint64_t v100 = 0x400000000;
      uint64_t v102 = v104;
      uint64_t v103 = 0x400000000;
      int v105 = v19;
      long long v106 = xmmword_1CD91D2E0;
      uint64_t v20 = (char *)&v109;
    }
    p_src = (char *)&__src;
    goto LABEL_20;
  }
  if (v12 == 194) {
    return 4;
  }
  if (v12 == 186)
  {
    uint64_t v62 = *(void *)(a2 + 72);
    uint64_t v63 = *(void *)(v62 + 16);
    unsigned int v64 = *(unsigned __int8 *)(*(void *)(v62 + 24) + 16);
    BOOL v65 = (unint64_t *)(v63 + 24);
    if (*(_DWORD *)(v63 + 32) >= 0x41u) {
      BOOL v65 = (unint64_t *)*v65;
    }
    BOOL v66 = v64 > 0x14;
    unint64_t v67 = *v65;
    unint64_t v68 = __clz(v67) ^ 0x3F;
    uint64_t v69 = **(void **)(a2 + 24);
    if (v67) {
      unsigned __int8 v70 = v68;
    }
    else {
      unsigned __int8 v70 = 0;
    }
    uint64_t v71 = a1;
    int v72 = 33;
    return sub_1CD3F659C(v71, v72, v69, v70, v66, 1, a3);
  }
LABEL_86:
  unint64_t v61 = 0;
  unint64_t v11 = 1;
  if (!HIDWORD(v16) && v16 >= 2)
  {
    if (v15 == 7)
    {
      unint64_t v11 = 0;
      unint64_t v73 = 0;
    }
    else
    {
      unint64_t v73 = sub_1CD3EE584(a1, *(void *)(a2 + 8), 1, 0);
      unint64_t v11 = v89 == 1;
      unsigned int v13 = *(_DWORD *)(a2 + 80);
    }
    unint64_t v74 = sub_1CB90C6E8(a1, *(void *)(a2 + 72), v13, *(void *)(a2 + 24));
    if (v75 == 1) {
      unint64_t v11 = 1;
    }
    if (__OFADD__(v73, v74)) {
      unint64_t v61 = ((uint64_t)(v73 + v74) >> 63) ^ 0x8000000000000000;
    }
    else {
      unint64_t v61 = v73 + v74;
    }
  }
LABEL_95:
  p_src = *(char **)(a2 + 24);
  uint64_t v76 = *(unsigned int *)(a2 + 32);
  uint64_t v96 = v18;
  uint64_t v97 = v14;
  LODWORD(v98) = v12;
  uint64_t v99 = v101;
  uint64_t v100 = 0x400000000;
  uint64_t v102 = v104;
  uint64_t v103 = 0x400000000;
  int v105 = v19;
  uint64_t v20 = &p_src[8 * v76];
  *(void *)&long long v106 = v61;
  *((void *)&v106 + 1) = v11;
LABEL_20:
  sub_1CC1587C8((uint64_t)&v99, (uint64_t)v101, p_src, v20);
  unint64_t v11 = sub_1CB90AA94(a1, (uint64_t)&v96, a3);
  if (v102 != v104) {
    free(v102);
  }
  int v22 = v99;
  if (v99 != v101) {
LABEL_23:
  }
    free(v22);
  return v11;
}

uint64_t sub_1CB90A01C(uint64_t a1, uint64_t a2, llvm::Type ***a3, llvm::Type ***a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  uint64_t v10 = (uint64_t)a4;
  unint64_t v11 = a3;
  int v14 = (uint64_t *)(a1 + 8);
  uint64_t v15 = sub_1CB90CBC0((uint64_t *)(a1 + 8), a2, a3, a4);
  BOOL v17 = v15 < 0;
  if (v16) {
    BOOL v17 = v16 < 0;
  }
  if (!v17)
  {
    BOOL v18 = v16 < 1;
    if (!v16) {
      BOOL v18 = v15 < 1;
    }
    if (v18) {
      return 0;
    }
  }
  unsigned int v100 = a5;
  unsigned int v96 = a6;
  unint64_t v20 = *(void *)(a1 + 32);
  uint64_t v101 = qword_1CD96D8B8[(int)a2 - 1];
  uint64_t v102 = a7;
  uint64_t v21 = *(llvm::LLVMContext **)v10;
  unint64_t v22 = sub_1CB87DC14(v20, *(void *)(a1 + 8), (llvm::EVT *)v10, 0);
  uint64_t v24 = v23;
  *(void *)&long long v103 = 1;
  DWORD2(v103) = 0;
  while (1)
  {
    int v25 = v22;
    llvm::TargetLoweringBase::getTypeConversion(v20, v21, v22, v24, (uint64_t)&v107);
    if (!(_BYTE)v107)
    {
LABEL_18:
      long long v27 = v103;
      goto LABEL_19;
    }
    if (v107 == 10) {
      break;
    }
    if ((v107 & 0xFB) == 2)
    {
      *(void *)&long long v105 = 2;
      DWORD2(v105) = 0;
      sub_1CB90C9D4((uint64_t)&v103, (uint64_t)&v105);
    }
    unint64_t v22 = *((void *)&v107 + 1);
    if (v25 == BYTE8(v107))
    {
      if (v25) {
        goto LABEL_18;
      }
      uint64_t v26 = v108;
      if (v24 == v108) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v26 = v108;
    }
    uint64_t v24 = v26;
  }
  if (!v25) {
    LOBYTE(v25) = 6;
  }
  long long v27 = xmmword_1CD96D880;
LABEL_19:
  long long v105 = v27;
  v106[0] = v25;
  unint64_t v28 = (llvm::LLVMContext *)*v11;
  unint64_t v29 = sub_1CB87DC14(v20, *v14, (llvm::EVT *)v11, 0);
  uint64_t v31 = v30;
  *(void *)&long long v109 = 1;
  DWORD2(v109) = 0;
  while (1)
  {
    int v32 = v29;
    llvm::TargetLoweringBase::getTypeConversion(v20, v28, v29, v31, (uint64_t)&v107);
    if (!(_BYTE)v107)
    {
LABEL_29:
      long long v34 = v109;
      goto LABEL_30;
    }
    if (v107 == 10) {
      break;
    }
    if ((v107 & 0xFB) == 2)
    {
      *(void *)&long long v103 = 2;
      DWORD2(v103) = 0;
      sub_1CB90C9D4((uint64_t)&v109, (uint64_t)&v103);
    }
    unint64_t v29 = *((void *)&v107 + 1);
    if (v32 == BYTE8(v107))
    {
      if (v32) {
        goto LABEL_29;
      }
      uint64_t v33 = v108;
      if (v31 == v108) {
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v33 = v108;
    }
    uint64_t v31 = v33;
  }
  if (!v32) {
    LOBYTE(v32) = 6;
  }
  long long v34 = xmmword_1CD96D880;
LABEL_30:
  long long v103 = v34;
  v104[0] = v32;
  uint64_t v99 = sub_1CB87E200(v106);
  int v36 = v35;
  uint64_t v37 = sub_1CB87E200(v104);
  int v97 = v39;
  uint64_t v98 = v37;
  unsigned int v40 = *(_DWORD *)(v10 + 8);
  unsigned int v41 = *((_DWORD *)v11 + 2);
  switch((int)a2)
  {
    case '&':
      char v42 = (*(uint64_t (**)(unint64_t, void, void, void, void))(*(void *)v20 + 1160))(v20, v106[0], 0, v104[0], 0);
      uint64_t result = 0;
      if ((v42 & 1) == 0) {
        goto LABEL_32;
      }
      return result;
    case '\'':
      char v45 = (*(uint64_t (**)(unint64_t, void, void, void, void))(*(void *)v20 + 1192))(v20, v106[0], 0, v104[0], 0);
      uint64_t result = 0;
      if ((v45 & 1) == 0) {
        goto LABEL_50;
      }
      return result;
    case '(':
LABEL_50:
      if (v102 && (sub_1CB90CE98(*(void *)(a1 + 32), v102, v38) & 1) != 0) {
        return 0;
      }
      if (v100 == 1)
      {
        unsigned __int8 EVT = llvm::EVT::getEVT((llvm::EVT *)v11, 0, v38);
        unsigned __int8 v48 = llvm::EVT::getEVT((llvm::EVT *)v10, 0, v47);
        BOOL v49 = (uint64_t)v103 < (uint64_t)v105;
        if (DWORD2(v103) != DWORD2(v105)) {
          BOOL v49 = SDWORD2(v103) < SDWORD2(v105);
        }
        if (!v49)
        {
          BOOL v50 = DWORD2(v103) == DWORD2(v105) ? (uint64_t)v105 >= (uint64_t)v103 : SDWORD2(v105) >= SDWORD2(v103);
          if (v50 && EVT && v48)
          {
            __int16 v51 = a2 == 39 ? -4096 : 3840;
            if (((unsigned __int16)v51 & *(_WORD *)(v20 + 358 * EVT + 2 * v48 + 73672)) == 0) {
              return 0;
            }
          }
        }
      }
      goto LABEL_69;
    case '.':
      if (v102 && (sub_1CB90CE98(*(void *)(a1 + 32), v102, v38) & 1) != 0) {
        return 0;
      }
      goto LABEL_69;
    case '1':
LABEL_32:
      BOOL v43 = (uint64_t)v105 < (uint64_t)v103;
      if (DWORD2(v105) != DWORD2(v103)) {
        BOOL v43 = SDWORD2(v105) < SDWORD2(v103);
      }
      if (!v43)
      {
        BOOL v44 = DWORD2(v105) == DWORD2(v103) ? (uint64_t)v103 < (uint64_t)v105 : SDWORD2(v103) < SDWORD2(v105);
        if (!v44 && ((v40 & 0xFD) == 13) == ((v41 & 0xFD) == 13) && v99 == v98 && v36 == v97) {
          return 0;
        }
      }
      goto LABEL_69;
    case '2':
      if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12) {
        unsigned int v40 = *(_DWORD *)(**(void **)(v10 + 16) + 8);
      }
      if ((v11[1] & 0xFE) == 0x12) {
        unsigned int v41 = *((_DWORD *)*v11[2] + 2);
      }
      if ((*(uint64_t (**)(unint64_t, void, void))(*(void *)v20 + 840))(v20, v40 >> 8, v41 >> 8))return 0; {
      goto LABEL_69;
      }
    default:
LABEL_69:
      int v52 = v36;
      int v53 = *(_DWORD *)(v10 + 8) & 0xFE;
      if (v53 == 18) {
        uint64_t v54 = v10;
      }
      else {
        uint64_t v54 = 0;
      }
      int v55 = v11[1] & 0xFE;
      if (v55 == 18) {
        uint64_t v56 = (uint64_t)v11;
      }
      else {
        uint64_t v56 = 0;
      }
      uint64_t result = v105;
      BOOL v57 = (uint64_t)v105 < (uint64_t)v103;
      if (DWORD2(v105) != DWORD2(v103)) {
        BOOL v57 = SDWORD2(v105) < SDWORD2(v103);
      }
      if (!v57)
      {
        BOOL v58 = SDWORD2(v103) >= SDWORD2(v105);
        if (DWORD2(v105) == DWORD2(v103)) {
          BOOL v58 = (uint64_t)v103 >= (uint64_t)v105;
        }
        if (v58
          && v104[0]
          && (v104[0] == 1 || *(void *)(v20 + 8 * v104[0] + 96))
          && *(unsigned __int8 *)(v20 + 390 * v104[0] + v101 + 3862) <= 1u)
        {
          return result;
        }
      }
      if (v53 == 18 || v55 == 18)
      {
        if (v53 == 18 && v55 == 18)
        {
          if (!v57)
          {
            BOOL v59 = SDWORD2(v103) >= SDWORD2(v105);
            if (DWORD2(v105) == DWORD2(v103)) {
              BOOL v59 = (uint64_t)v103 >= (uint64_t)v105;
            }
            if (v59 && v99 == v98 && v52 == v97)
            {
              if (a2 == 40)
              {
                uint64_t v95 = 2;
              }
              else
              {
                if (a2 == 39) {
                  return result;
                }
                if (!v104[0]
                  || !*(void *)(v20 + 8 * v104[0] + 96)
                  || *(unsigned char *)(v20 + 390 * v104[0] + v101 + 3862) == 2)
                {
                  goto LABEL_106;
                }
                uint64_t v95 = 1;
              }
              *(void *)&long long v109 = v95;
              DWORD2(v109) = 0;
              long long v107 = v105;
              sub_1CB90C9D4((uint64_t)&v107, (uint64_t)&v109);
              return v107;
            }
          }
LABEL_106:
          unint64_t v60 = *(llvm::LLVMContext **)v10;
          unint64_t v61 = sub_1CB87DC14(v20, *v14, (llvm::EVT *)v10, 0);
          llvm::TargetLoweringBase::getTypeConversion(v20, v60, v61, v62, (uint64_t)&v107);
          int v63 = v107;
          unsigned int v64 = (llvm::LLVMContext *)*v11;
          unint64_t v65 = sub_1CB87DC14(v20, *v14, (llvm::EVT *)v11, 0);
          llvm::TargetLoweringBase::getTypeConversion(v20, v64, v65, v66, (uint64_t)&v107);
          int v68 = v107;
          if (v63 == 6 || v107 == 6)
          {
            unsigned int v69 = *(_DWORD *)(v54 + 32);
            BOOL v70 = v69 && *(unsigned char *)(v54 + 8) == 19;
            BOOL v71 = v70;
            if (v69 > 1 || v71)
            {
              unsigned int v72 = *(_DWORD *)(v56 + 32);
              int v73 = *(unsigned __int8 *)(v56 + 8);
              BOOL v74 = v72 && v73 == 19;
              BOOL v75 = v74;
              if (v72 > 1 || v75)
              {
                unint64_t v81 = *(uint64_t ***)(v56 + 24);
                unint64_t v82 = (llvm::Type *)(v72 >> 1);
                if (v73 == 19) {
                  llvm::ScalableVectorType::get(v81, v82);
                }
                else {
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v81, v82);
                }
                uint64_t v84 = v83;
                uint64_t v85 = *(uint64_t ***)(v54 + 24);
                uint64_t v86 = (llvm::Type *)(*(_DWORD *)(v54 + 32) >> 1);
                if (*(unsigned char *)(v54 + 8) == 19) {
                  v88.n128_f64[0] = llvm::ScalableVectorType::get(v85, v86);
                }
                else {
                  v88.n128_f64[0] = llvm::FixedVectorType::get((llvm::FixedVectorType *)v85, v86);
                }
                BOOL v90 = v63 != 6 || v68 != 6;
                *(void *)&long long v109 = sub_1CB90A01C(a1, a2, v84, v87, v100, v96, v102, v88);
                *((void *)&v109 + 1) = v91;
                *(void *)&long long v107 = 2;
                DWORD2(v107) = 0;
                sub_1CB90C9D4((uint64_t)&v107, (uint64_t)&v109);
                BOOL v78 = __OFADD__(v90, (void)v107);
                uint64_t v79 = v90 + v107;
                unint64_t v80 = 0x7FFFFFFFFFFFFFFFLL;
                goto LABEL_132;
              }
            }
          }
          if (*(unsigned char *)(v56 + 8) == 19) {
            return 0;
          }
          uint64_t v92 = *(unsigned int *)(v56 + 32);
          if ((v11[1] & 0xFE) == 0x12) {
            unint64_t v11 = (llvm::Type ***)*v11[2];
          }
          if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12) {
            uint64_t v10 = **(void **)(v10 + 16);
          }
          *(void *)&long long v109 = sub_1CB90A01C(a1, a2, v11, v10, v100, v96, v102, v67);
          *((void *)&v109 + 1) = v93;
          unint64_t v94 = sub_1CD3EE584(a1, v56, 1, 1);
          *(void *)&long long v107 = v92;
          DWORD2(v107) = 0;
          sub_1CB90C9D4((uint64_t)&v107, (uint64_t)&v109);
          BOOL v78 = __OFADD__(v94, (void)v107);
          uint64_t v79 = v94 + v107;
LABEL_131:
          unint64_t v80 = (v79 >> 63) ^ 0x8000000000000000;
LABEL_132:
          if (v78) {
            return v80;
          }
          else {
            return v79;
          }
        }
        if (v53 == 18)
        {
          unint64_t v76 = sub_1CD3EE584(a1, v10, 0, 1);
          if (!v56) {
            goto LABEL_129;
          }
        }
        else
        {
          unint64_t v76 = 0;
          if (!v56)
          {
LABEL_129:
            unint64_t v77 = 0;
LABEL_130:
            BOOL v78 = __OFADD__(v76, v77);
            uint64_t v79 = v76 + v77;
            goto LABEL_131;
          }
        }
        unint64_t v77 = sub_1CD3EE584(a1, v56, 1, 0);
        goto LABEL_130;
      }
      if (!v104[0] || !*(void *)(v20 + 8 * v104[0] + 96)) {
        return 4;
      }
      if (*(unsigned char *)(v20 + 390 * v104[0] + v101 + 3862) == 2) {
        return 4;
      }
      return 1;
  }
}

uint64_t sub_1CB90A9F8(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  int v3 = *(_DWORD *)(a2 + 16);
  if (v3 <= 121)
  {
    BOOL v5 = v3 > 0x3A;
    uint64_t v6 = (1 << v3) & 0x701C00D203000B0;
    if (v5 || v6 == 0) {
      return 1;
    }
  }
  else
  {
    BOOL v4 = (v3 - 122) > 0x2E || ((1 << (v3 - 122)) & 0x7E0000000013) == 0;
    if (v4
      && ((v3 - 236) > 0x36 || ((1 << (v3 + 20)) & 0x40001000000301) == 0)
      && v3 != 316)
    {
      return 1;
    }
  }
  return result;
}

unint64_t sub_1CB90AA94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v269 = *MEMORY[0x1E4F143B8];
  int v4 = *(_DWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(unsigned int *)(a2 + 120);
  unint64_t v8 = *(void *)(a2 + 128);
  uint64_t v7 = *(void *)(a2 + 136);
  uint64_t v9 = *(unsigned int *)(a2 + 32);
  if (v9)
  {
    BOOL v10 = v4 == 319 || v4 == 322;
    unsigned int v11 = v10;
    uint64_t v12 = *(void *)(*(void *)(a2 + 24) + 8 * v11);
    if ((*(_DWORD *)(v12 + 8) & 0xFE) == 0x12) {
      unsigned int v13 = (llvm::FixedVectorType **)v12;
    }
    else {
      unsigned int v13 = 0;
    }
  }
  else
  {
    unsigned int v13 = 0;
  }
  unint64_t v14 = 0;
  if (a3 == 2) {
    int v15 = 1;
  }
  else {
    int v15 = 10;
  }
  v266 = &v268;
  uint64_t v267 = 0x200000000;
  if (v4 > 166)
  {
    if (v4 <= 191)
    {
      switch(v4)
      {
        case 167:
        case 168:
          goto LABEL_149;
        case 169:
        case 170:
        case 171:
        case 172:
        case 173:
        case 174:
          goto LABEL_201;
        case 175:
          int v16 = 230;
          goto LABEL_57;
        case 176:
          int v16 = 232;
          goto LABEL_57;
        case 177:
          int v16 = 231;
          goto LABEL_57;
        default:
          if (v4 == 185)
          {
            int v69 = a3;
            unsigned __int8 Alignment = llvm::DataLayout::getAlignment(*(llvm::DataLayout **)(a1 + 8), (llvm::Type *)v5, 1);
            uint64_t v71 = v3;
            int v72 = 32;
            uint64_t v73 = v5;
          }
          else
          {
            if (v4 != 187) {
              goto LABEL_201;
            }
            int v68 = **(llvm::Type ***)(a2 + 24);
            int v69 = a3;
            unsigned __int8 Alignment = llvm::DataLayout::getAlignment(*(llvm::DataLayout **)(a1 + 8), v68, 1);
            uint64_t v71 = v3;
            int v72 = 33;
            uint64_t v73 = (uint64_t)v68;
          }
          unint64_t v95 = sub_1CD3F659C(v71, v72, v73, Alignment, 1, 0, v69);
          break;
      }
    }
    else
    {
      int v16 = 224;
      switch(v4)
      {
        case 238:
          int v16 = 229;
          goto LABEL_57;
        case 239:
        case 240:
        case 241:
        case 242:
        case 243:
        case 245:
        case 246:
        case 247:
        case 248:
        case 249:
        case 250:
        case 251:
        case 252:
        case 253:
        case 254:
        case 255:
        case 256:
        case 257:
        case 261:
        case 264:
        case 265:
        case 266:
        case 267:
        case 268:
        case 269:
        case 270:
        case 271:
        case 277:
        case 279:
        case 281:
        case 282:
        case 285:
        case 286:
        case 287:
        case 288:
        case 289:
        case 290:
        case 291:
        case 292:
        case 293:
        case 294:
        case 295:
        case 297:
        case 298:
        case 299:
        case 302:
        case 303:
        case 304:
        case 308:
        case 310:
        case 313:
        case 314:
        case 315:
        case 316:
          goto LABEL_201;
        case 244:
        case 272:
          goto LABEL_149;
        case 258:
          int v16 = 237;
          goto LABEL_57;
        case 259:
          int v16 = 239;
          goto LABEL_57;
        case 260:
          int v16 = 240;
          goto LABEL_57;
        case 262:
        case 283:
          int v165 = v6;
          uint64_t v166 = (uint64_t **)(**(void **)v5 + 1888);
          unsigned int v234 = a3;
          uint64_t v167 = v7;
          if ((*(_DWORD *)(v5 + 8) & 0xFE) == 0x12)
          {
            v213 = (llvm::Type *)*(unsigned int *)(v5 + 32);
            if (*(_DWORD *)(v5 + 8) == 19) {
              llvm::ScalableVectorType::get(v166, v213);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v166, v213);
            }
            uint64_t v166 = v214;
          }
          *(void *)&long long v256 = v5;
          *((void *)&v256 + 1) = v166;
          uint64_t v169 = llvm::StructType::create(*(uint64_t **)v5, 0, 0);
          llvm::StructType::setBody(v169, (uint64_t)&v256, 2, 0);
          if (v4 == 262) {
            int v170 = 263;
          }
          else {
            int v170 = 284;
          }
          uint64_t __src = (void *)v5;
          uint64_t v242 = v5;
          *(void *)&long long v256 = 0;
          *((void *)&v256 + 1) = v169;
          LODWORD(v257) = v170;
          v258 = v260;
          uint64_t v259 = 0x400000000;
          v261 = v263;
          uint64_t v262 = 0x400000000;
          int v264 = v165;
          *(void *)&long long v265 = v8;
          *((void *)&v265 + 1) = v167;
          sub_1CC1587C8((uint64_t)&v258, (uint64_t)v260, (char *)&__src, (char *)&v243);
          uint64_t v171 = sub_1CB909674(a1, &v256, v234);
          unint64_t v172 = sub_1CD3F5E3C(a1, 53, v5, (uint64_t)v166, v234);
          if (__OFADD__(v171, v172)) {
            unint64_t v173 = ((uint64_t)(v171 + v172) >> 63) ^ 0x8000000000000000;
          }
          else {
            unint64_t v173 = v171 + v172;
          }
          v253 = (void *)sub_1CD3F5E3C(a1, 57, v5, (uint64_t)v166, v234);
          uint64_t v254 = v174;
          uint64_t __src = (void *)2;
          LODWORD(v242) = 0;
          sub_1CB90C9D4((uint64_t)&__src, (uint64_t)&v253);
          if (__OFADD__(v173, __src)) {
            unint64_t v14 = ((uint64_t)((uint64_t)__src + v173) >> 63) ^ 0x8000000000000000;
          }
          else {
            unint64_t v14 = (unint64_t)__src + v173;
          }
          if (v261 != v263) {
            free(v261);
          }
          BOOL v58 = v258;
          if (v258 == v260) {
            goto LABEL_149;
          }
          goto LABEL_148;
        case 263:
        case 284:
          unsigned int v144 = *(uint64_t **)(v5 + 16);
          int v145 = v4;
          uint64_t v146 = *v144;
          uint64_t v147 = v144[1];
          if (v145 == 263) {
            uint64_t v148 = 13;
          }
          else {
            uint64_t v148 = 15;
          }
          int v149 = a3;
          unint64_t v150 = sub_1CD3F5A88(a1, v148, v146, a3, 0, 0);
          uint64_t __src = (void *)sub_1CD3F5E3C(v3, 53, v146, v147, v149);
          uint64_t v242 = v151;
          *(void *)&long long v256 = 2;
          DWORD2(v256) = 0;
          sub_1CB90C9D4((uint64_t)&v256, (uint64_t)&__src);
          if (__OFADD__(v150, (void)v256)) {
            unint64_t v152 = ((uint64_t)(v150 + v256) >> 63) ^ 0x8000000000000000;
          }
          else {
            unint64_t v152 = v150 + v256;
          }
          unint64_t v153 = sub_1CD3F5A88(v3, 30, v147, v149, 0, 0);
          goto LABEL_339;
        case 273:
          int v16 = 226;
          goto LABEL_57;
        case 274:
        case 275:
        case 305:
        case 306:
          uint64_t v96 = **(void **)v5 + 1888;
          int v97 = a3;
          if ((*(_DWORD *)(v5 + 8) & 0xFE) == 0x12)
          {
            v206 = (llvm::Type *)*(unsigned int *)(v5 + 32);
            v207 = (uint64_t **)(**(void **)v5 + 1888);
            if (*(_DWORD *)(v5 + 8) == 19) {
              llvm::ScalableVectorType::get(v207, v206);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v207, v206);
            }
            uint64_t v96 = v208;
          }
          unint64_t v98 = sub_1CD3F5E3C(v3, 53, v5, v96, v97);
          uint64_t v99 = v3;
          uint64_t v100 = 57;
          uint64_t v101 = v5;
          goto LABEL_267;
        case 276:
        case 307:
          unsigned int v127 = a3;
          uint64_t v128 = (llvm::Type *)v5;
          if ((*(_DWORD *)(v5 + 8) & 0xFE) == 0x12) {
            uint64_t v128 = **(llvm::Type ***)(v5 + 16);
          }
          int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v128);
          uint64_t v130 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v5, (llvm::LLVMContext *)(2 * PrimitiveSizeInBits));
          v131 = (llvm::Type ***)v130;
          if ((*(_DWORD *)(v5 + 8) & 0xFE) == 0x12)
          {
            v209 = (llvm::Type *)*(unsigned int *)(v5 + 32);
            if (*(_DWORD *)(v5 + 8) == 19) {
              llvm::ScalableVectorType::get(v130, v209);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v130, v209);
            }
            v131 = v210;
          }
          if (v4 == 276) {
            uint64_t v132 = 40;
          }
          else {
            uint64_t v132 = 39;
          }
          uint64_t __src = (void *)sub_1CB90A01C(v3, v132, v131, (llvm::Type ***)v5, 0, v127, 0);
          uint64_t v242 = v133;
          *(void *)&long long v256 = 2;
          DWORD2(v256) = 0;
          sub_1CB90C9D4((uint64_t)&v256, (uint64_t)&__src);
          uint64_t v134 = v256;
          unint64_t v135 = sub_1CD3F5A88(v3, 17, (uint64_t)v131, v127, 0, 0);
          if (__OFADD__(v134, v135)) {
            unint64_t v136 = ((uint64_t)(v134 + v135) >> 63) ^ 0x8000000000000000;
          }
          else {
            unint64_t v136 = v134 + v135;
          }
          uint64_t __src = (void *)sub_1CB90A01C(v3, 38, (llvm::Type ***)v5, v131, 0, v127, 0);
          uint64_t v242 = v137;
          *(void *)&long long v256 = 2;
          DWORD2(v256) = 0;
          sub_1CB90C9D4((uint64_t)&v256, (uint64_t)&__src);
          if (__OFADD__(v136, (void)v256)) {
            unint64_t v138 = ((uint64_t)(v136 + v256) >> 63) ^ 0x8000000000000000;
          }
          else {
            unint64_t v138 = v136 + v256;
          }
          unint64_t v139 = sub_1CD3F5A88(v3, 26, v5, v127, 0, 0);
          if (__OFADD__(v138, v139)) {
            unint64_t v140 = ((uint64_t)(v138 + v139) >> 63) ^ 0x8000000000000000;
          }
          else {
            unint64_t v140 = v138 + v139;
          }
          unint64_t v141 = sub_1CD3F5A88(v3, 25, v5, v127, 0, 0);
          if (__OFADD__(v140, v141)) {
            unint64_t v142 = ((uint64_t)(v140 + v141) >> 63) ^ 0x8000000000000000;
          }
          else {
            unint64_t v142 = v140 + v141;
          }
          unint64_t v143 = sub_1CD3F5A88(v3, 29, v5, v127, 0, 0);
          BOOL v125 = __OFADD__(v142, v143);
          uint64_t v126 = v142 + v143;
          goto LABEL_347;
        case 278:
        case 309:
          int v175 = v4;
          unsigned int v176 = a3;
          v177 = *(uint64_t **)(v5 + 16);
          uint64_t v178 = *v177;
          v179 = (llvm::Type *)*v177;
          if ((*(_DWORD *)(*v177 + 8) & 0xFE) == 0x12) {
            v179 = **(llvm::Type ***)(v178 + 16);
          }
          uint64_t v237 = v177[1];
          int v180 = llvm::Type::getPrimitiveSizeInBits(v179);
          v181 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v178, (llvm::LLVMContext *)(2 * v180));
          v182 = (llvm::Type ***)v181;
          if ((*(_DWORD *)(v178 + 8) & 0xFE) == 0x12)
          {
            v215 = (llvm::Type *)*(unsigned int *)(v178 + 32);
            if (*(_DWORD *)(v178 + 8) == 19) {
              llvm::ScalableVectorType::get(v181, v215);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v181, v215);
            }
            v182 = v216;
          }
          if (v175 == 278) {
            uint64_t v183 = 40;
          }
          else {
            uint64_t v183 = 39;
          }
          uint64_t __src = (void *)sub_1CB90A01C(v3, v183, v182, (llvm::Type ***)v178, 0, v176, 0);
          uint64_t v242 = v184;
          *(void *)&long long v256 = 2;
          DWORD2(v256) = 0;
          sub_1CB90C9D4((uint64_t)&v256, (uint64_t)&__src);
          uint64_t v185 = v256;
          unint64_t v186 = sub_1CD3F5A88(v3, 17, (uint64_t)v182, v176, 0, 0);
          if (__OFADD__(v185, v186)) {
            unint64_t v187 = ((uint64_t)(v185 + v186) >> 63) ^ 0x8000000000000000;
          }
          else {
            unint64_t v187 = v185 + v186;
          }
          uint64_t __src = (void *)sub_1CB90A01C(v3, 38, (llvm::Type ***)v178, v182, 0, v176, 0);
          uint64_t v242 = v188;
          *(void *)&long long v256 = 2;
          DWORD2(v256) = 0;
          sub_1CB90C9D4((uint64_t)&v256, (uint64_t)&__src);
          if (__OFADD__(v187, (void)v256)) {
            unint64_t v189 = ((uint64_t)(v187 + v256) >> 63) ^ 0x8000000000000000;
          }
          else {
            unint64_t v189 = v187 + v256;
          }
          unint64_t v190 = sub_1CD3F5A88(v3, 26, (uint64_t)v182, v176, 0, 0);
          if (__OFADD__(v189, v190)) {
            unint64_t v152 = ((uint64_t)(v189 + v190) >> 63) ^ 0x8000000000000000;
          }
          else {
            unint64_t v152 = v189 + v190;
          }
          if (v175 == 278)
          {
            unint64_t v191 = sub_1CD3F5A88(v3, 27, v178, v176, 0, 0);
            if (__OFADD__(v152, v191)) {
              unint64_t v152 = ((uint64_t)(v152 + v191) >> 63) ^ 0x8000000000000000;
            }
            else {
              v152 += v191;
            }
          }
          unint64_t v153 = sub_1CD3F5E3C(v3, 53, v178, v237, v176);
LABEL_339:
          BOOL v125 = __OFADD__(v152, v153);
          uint64_t v126 = v152 + v153;
          goto LABEL_347;
        case 280:
          goto LABEL_57;
        case 296:
          int v16 = 236;
          goto LABEL_57;
        case 300:
        case 311:
          int v221 = v6;
          int v154 = v4;
          v155 = (uint64_t **)(**(void **)v5 + 1888);
          uint64_t v156 = v5;
          int v157 = *(_DWORD *)(v5 + 8);
          uint64_t v158 = v7;
          uint64_t v159 = a3;
          if ((v157 & 0xFE) == 0x12)
          {
            v211 = (llvm::Type *)*(unsigned int *)(v156 + 32);
            if (v157 == 19) {
              llvm::ScalableVectorType::get(v155, v211);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v155, v211);
            }
            v155 = v212;
          }
          *(void *)&long long v256 = v156;
          *((void *)&v256 + 1) = v155;
          uint64_t v161 = llvm::StructType::create(*(uint64_t **)v156, 0, 0);
          llvm::StructType::setBody(v161, (uint64_t)&v256, 2, 0);
          if (v154 == 300) {
            int v162 = 301;
          }
          else {
            int v162 = 312;
          }
          uint64_t __src = (void *)v156;
          uint64_t v242 = v156;
          *(void *)&long long v256 = 0;
          *((void *)&v256 + 1) = v161;
          LODWORD(v257) = v162;
          v258 = v260;
          uint64_t v259 = 0x400000000;
          v261 = v263;
          uint64_t v262 = 0x400000000;
          int v264 = v221;
          *(void *)&long long v265 = v8;
          *((void *)&v265 + 1) = v158;
          sub_1CC1587C8((uint64_t)&v258, (uint64_t)v260, (char *)&__src, (char *)&v243);
          uint64_t v163 = sub_1CB909674(a1, &v256, v159);
          unint64_t v164 = sub_1CD3F5E3C(a1, 57, v156, (uint64_t)v155, v159);
          if (__OFADD__(v163, v164)) {
            unint64_t v14 = ((uint64_t)(v163 + v164) >> 63) ^ 0x8000000000000000;
          }
          else {
            unint64_t v14 = v163 + v164;
          }
          if (v261 != v263) {
            free(v261);
          }
          BOOL v58 = v258;
          if (v258 == v260) {
            goto LABEL_149;
          }
          goto LABEL_148;
        case 301:
        case 312:
          unsigned int v120 = *(uint64_t **)(v5 + 16);
          int v121 = v4;
          uint64_t v122 = *v120;
          uint64_t v96 = v120[1];
          if (v121 == 301) {
            uint64_t v123 = 13;
          }
          else {
            uint64_t v123 = 15;
          }
          int v97 = a3;
          unint64_t v98 = sub_1CD3F5A88(a1, v123, v122, a3, 0, 0);
          uint64_t v99 = v3;
          uint64_t v100 = 53;
          uint64_t v101 = v122;
LABEL_267:
          unint64_t v124 = sub_1CD3F5E3C(v99, v100, v101, v96, v97);
          BOOL v125 = __OFADD__(v98, v124);
          uint64_t v126 = v98 + v124;
          goto LABEL_347;
        case 317:
          uint64_t v198 = 13;
          goto LABEL_358;
        case 318:
          uint64_t v198 = 28;
          goto LABEL_358;
        case 319:
          uint64_t v199 = v6 | 0x100000000;
          uint64_t v200 = 14;
          goto LABEL_356;
        case 320:
        case 321:
        case 325:
        case 326:
        case 327:
        case 328:
          int v93 = a3;
          unint64_t v94 = (uint64_t **)(*(void *)*v13 + 1888);
          if (v13 && (v13[1] & 0xFE) == 0x12)
          {
            v204 = (llvm::Type *)*((unsigned int *)v13 + 8);
            if (*((_DWORD *)v13 + 2) == 19) {
              llvm::ScalableVectorType::get(v94, v204);
            }
            else {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v94, v204);
            }
            unint64_t v94 = v205;
          }
          unint64_t v95 = sub_1CD3F6204(v3, v13, (uint64_t)v94, v93);
          break;
        case 322:
          uint64_t v199 = v6 | 0x100000000;
          uint64_t v200 = 18;
LABEL_356:
          unint64_t v95 = sub_1CD3F61E8(a1, v200, v13, v199, a3);
          break;
        case 323:
          uint64_t v198 = 17;
          goto LABEL_358;
        case 324:
          uint64_t v198 = 29;
          goto LABEL_358;
        case 329:
          uint64_t v198 = 30;
LABEL_358:
          unint64_t v95 = sub_1CD3F6878(a1, v198, v13, a3);
          break;
        default:
          switch(v4)
          {
            case 192:
              int v16 = 251;
              goto LABEL_57;
            case 193:
              int v16 = 247;
              goto LABEL_57;
            case 201:
              int v16 = 250;
              goto LABEL_57;
            case 202:
              int v16 = 246;
              goto LABEL_57;
            case 203:
              int v16 = 238;
              goto LABEL_57;
            default:
              goto LABEL_201;
          }
      }
    }
    unint64_t v14 = v95;
    goto LABEL_149;
  }
  if (v4 <= 74)
  {
    switch(v4)
    {
      case 5:
        goto LABEL_149;
      case 6:
      case 7:
      case 10:
      case 11:
      case 12:
      case 15:
      case 16:
      case 17:
      case 18:
        goto LABEL_201;
      case 8:
        int v16 = 186;
        goto LABEL_57;
      case 9:
        int v16 = 182;
        goto LABEL_57;
      case 13:
        int v16 = 145;
        goto LABEL_57;
      case 14:
        int v16 = 235;
        goto LABEL_57;
      case 19:
        int v16 = 143;
        goto LABEL_57;
      default:
        switch(v4)
        {
          case '3':
            int v16 = 227;
            goto LABEL_57;
          case '4':
            int v16 = 184;
            goto LABEL_57;
          case '5':
            int v15 = 4;
            int v16 = 185;
            goto LABEL_57;
          case '6':
            int v16 = 183;
            goto LABEL_57;
          default:
            if (v4 != 1) {
              goto LABEL_201;
            }
            uint64_t v192 = **(void **)v5 + 1888;
            int v193 = a3;
            if ((*(_DWORD *)(v5 + 8) & 0xFE) == 0x12)
            {
              v217 = (llvm::Type *)*(unsigned int *)(v5 + 32);
              v218 = (uint64_t **)(**(void **)v5 + 1888);
              if (*(_DWORD *)(v5 + 8) == 19) {
                llvm::ScalableVectorType::get(v218, v217);
              }
              else {
                llvm::FixedVectorType::get((llvm::FixedVectorType *)v218, v217);
              }
              uint64_t v192 = v219;
            }
            unint64_t v194 = sub_1CD3F5E3C(v3, 53, v5, v192, v193);
            unint64_t v195 = sub_1CD3F5E3C(v3, 57, v5, v192, v193);
            if (__OFADD__(v194, v195)) {
              unint64_t v196 = ((uint64_t)(v194 + v195) >> 63) ^ 0x8000000000000000;
            }
            else {
              unint64_t v196 = v194 + v195;
            }
            unint64_t v197 = sub_1CD3F5A88(v3, 15, v5, v193, 0, 0);
            BOOL v125 = __OFADD__(v196, v197);
            uint64_t v126 = v196 + v197;
LABEL_347:
            if (v125) {
              unint64_t v14 = (v126 >> 63) ^ 0x8000000000000000;
            }
            else {
              unint64_t v14 = v126;
            }
            break;
        }
        break;
    }
    goto LABEL_149;
  }
  if (v4 > 138)
  {
    switch(v4)
    {
      case 139:
        int v16 = 223;
        goto LABEL_57;
      case 140:
        int v16 = 241;
        goto LABEL_57;
      case 142:
      case 143:
        int v16 = 141;
        goto LABEL_57;
      default:
        goto LABEL_201;
    }
  }
  switch(v4)
  {
    case 'K':
      int v16 = 233;
LABEL_57:
      unsigned int v225 = v15;
      uint64_t v222 = v7;
      unint64_t v226 = v8;
      unsigned int v233 = a3;
      int v268 = v16;
      LODWORD(v267) = 1;
      unint64_t v17 = *(void *)(a1 + 32);
      BOOL v18 = *(llvm::LLVMContext **)v5;
      unint64_t v19 = sub_1CB87DC14(v17, *(void *)(a1 + 8), (llvm::EVT *)v5, 0);
      uint64_t v21 = v20;
      v253 = (void *)1;
      LODWORD(v254) = 0;
      int v220 = v6;
      while (1)
      {
        llvm::TargetLoweringBase::getTypeConversion(v17, v18, v19, v21, (uint64_t)&v256);
        if (!(_BYTE)v256)
        {
LABEL_67:
          uint64_t v24 = (uint64_t)v253;
          uint64_t v23 = v254;
          goto LABEL_68;
        }
        if (v256 == 10) {
          break;
        }
        if ((v256 & 0xFB) == 2)
        {
          uint64_t __src = (void *)2;
          LODWORD(v242) = 0;
          sub_1CB90C9D4((uint64_t)&v253, (uint64_t)&__src);
        }
        if (v19 == BYTE8(v256))
        {
          if ((_BYTE)v19) {
            goto LABEL_67;
          }
          uint64_t v22 = v257;
          if (v21 == v257) {
            goto LABEL_67;
          }
        }
        else
        {
          uint64_t v22 = v257;
        }
        uint64_t v21 = v22;
        unint64_t v19 = *((void *)&v256 + 1);
      }
      uint64_t v24 = 0;
      if (!(_BYTE)v19) {
        LOBYTE(v19) = 6;
      }
      uint64_t v23 = 1;
LABEL_68:
      v253 = v255;
      uint64_t v254 = 0x200000000;
      v250 = v252;
      uint64_t v251 = 0x200000000;
      if (!v267) {
        goto LABEL_127;
      }
      uint64_t v231 = v5;
      uint64_t v228 = v3;
      int v25 = v4;
      uint64_t v26 = (unsigned int *)v266;
      long long v27 = (uint64_t *)(v17 + 8 * v19 + 96);
      BOOL v28 = v24 > 1;
      if (v23) {
        BOOL v28 = (int)v23 > 0;
      }
      BOOL v236 = v28;
      BOOL v30 = (v19 - 8) >= 7u
         && (v19 - 75) >= 0x2Du
         && (v19 + 104) >= 0x13u;
      int v229 = v25;
      int v32 = !v30 && v25 == 139;
      uint64_t v33 = 4 * v267;
      while (!(_BYTE)v19)
      {
LABEL_106:
        ++v26;
        v33 -= 4;
        if (!v33)
        {
          BOOL v38 = v253;
          if (v254 >= 2)
          {
            int v39 = (char *)v253 + 16;
            uint64_t v40 = *(void *)v253;
            uint64_t v41 = 16 * v254 - 16;
            uint64_t v3 = v228;
            uint64_t v5 = v231;
            int v4 = v229;
            do
            {
              int v42 = *((_DWORD *)v39 + 2);
              int v43 = v38[2];
              BOOL v10 = v42 == v43;
              BOOL v44 = v42 < v43;
              if (v10) {
                BOOL v44 = *(void *)v39 < v40;
              }
              if (v44)
              {
                uint64_t v40 = *(void *)v39;
                BOOL v38 = v39;
              }
              v39 += 16;
              v41 -= 16;
            }
            while (v41);
          }
          else
          {
            uint64_t v3 = v228;
            uint64_t v5 = v231;
            int v4 = v229;
          }
          if (v38 != (_DWORD *)((char *)v253 + 16 * v254)) {
            goto LABEL_126;
          }
          BOOL v38 = v250;
          if (v251 >= 2)
          {
            char v45 = (char *)v250 + 16;
            uint64_t v46 = *(void *)v250;
            uint64_t v47 = 16 * v251 - 16;
            do
            {
              int v48 = *((_DWORD *)v45 + 2);
              int v49 = v38[2];
              BOOL v10 = v48 == v49;
              BOOL v50 = v48 < v49;
              if (v10) {
                BOOL v50 = *(void *)v45 < v46;
              }
              if (v50)
              {
                uint64_t v46 = *(void *)v45;
                BOOL v38 = v45;
              }
              v45 += 16;
              v47 -= 16;
            }
            while (v47);
          }
          if (v38 != (_DWORD *)((char *)v250 + 16 * v251))
          {
LABEL_126:
            unint64_t v14 = *(void *)v38;
            goto LABEL_145;
          }
LABEL_127:
          if (v4 == 90)
          {
            __int16 v51 = *(char **)(a2 + 24);
            uint64_t v52 = *(unsigned int *)(a2 + 32);
            *(void *)&long long v256 = 0;
            *((void *)&v256 + 1) = v5;
            LODWORD(v257) = 89;
            v258 = v260;
            uint64_t v259 = 0x400000000;
            v261 = v263;
            uint64_t v262 = 0x400000000;
            int v264 = 0;
            long long v265 = xmmword_1CD96D880;
            sub_1CC1587C8((uint64_t)&v258, (uint64_t)v260, v51, &v51[8 * v52]);
            int v53 = *(char **)(a2 + 24);
            uint64_t v54 = *(unsigned int *)(a2 + 32);
            uint64_t __src = 0;
            uint64_t v242 = v5;
            int v243 = 83;
            v244[0] = v245;
            v244[1] = (void *)0x400000000;
            v246 = v248;
            uint64_t v247 = 0x400000000;
            v248[8] = 0;
            long long v249 = xmmword_1CD96D880;
            sub_1CC1587C8((uint64_t)v244, (uint64_t)v245, v53, &v53[8 * v54]);
            uint64_t v55 = sub_1CB909674(v3, &v256, v233);
            uint64_t v56 = sub_1CB909674(v3, &__src, v233);
            if (__OFADD__(v55, v56)) {
              unint64_t v14 = ((v55 + v56) >> 63) ^ 0x8000000000000000;
            }
            else {
              unint64_t v14 = v55 + v56;
            }
            if (v246 != v248) {
              free(v246);
            }
            if (v244[0] != v245) {
              free(v244[0]);
            }
            if (v261 != v263) {
              free(v261);
            }
            BOOL v57 = v258;
            if (v258 == v260) {
              goto LABEL_145;
            }
          }
          else
          {
            if (v4 == 143)
            {
              unint64_t v83 = sub_1CD3F5A88(v3, 18, v5, v233, 0, 0);
              unint64_t v84 = sub_1CD3F5A88(v3, 14, v5, v233, 0, 0);
              if (__OFADD__(v83, v84)) {
                unint64_t v14 = ((uint64_t)(v83 + v84) >> 63) ^ 0x8000000000000000;
              }
              else {
                unint64_t v14 = v83 + v84;
              }
              goto LABEL_145;
            }
            if ((*(_DWORD *)(v5 + 8) & 0xFE) != 0x12)
            {
              unint64_t v14 = v225;
              goto LABEL_145;
            }
            if (*(_DWORD *)(v5 + 8) == 19)
            {
              unint64_t v14 = 0;
              goto LABEL_145;
            }
            uint64_t v60 = *(unsigned int *)(a2 + 32);
            if (v60)
            {
              uint64_t v61 = *(void *)(a2 + 24);
              uint64_t v62 = 8 * v60;
              while (*(unsigned char *)(*(void *)v61 + 8) != 19)
              {
                v61 += 8;
                v62 -= 8;
                if (!v62) {
                  goto LABEL_156;
                }
              }
              unint64_t v14 = 0;
LABEL_145:
              if (v250 != v252) {
                free(v250);
              }
              BOOL v58 = v253;
              if (v253 != v255) {
LABEL_148:
              }
                free(v58);
              goto LABEL_149;
            }
LABEL_156:
            if (v222)
            {
              unint64_t v226 = sub_1CD3EE584(v3, v5, 1, 0);
              LODWORD(v60) = *(_DWORD *)(a2 + 32);
            }
            unsigned int v63 = *(_DWORD *)(v5 + 32);
            uint64_t __src = &v243;
            uint64_t v242 = 0x400000000;
            if (v60)
            {
              uint64_t v64 = v5;
              uint64_t v65 = 0;
              LODWORD(v66) = 0;
              do
              {
                uint64_t v67 = *(void *)(*(void *)(a2 + 24) + v65);
                if ((*(_DWORD *)(v67 + 8) & 0xFE) == 0x12) {
                  uint64_t v67 = **(void **)(v67 + 16);
                }
                if (v66 >= HIDWORD(v242)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)__src + v66) = v67;
                uint64_t v66 = (v242 + 1);
                LODWORD(v242) = v242 + 1;
                v65 += 8;
              }
              while (8 * v60 != v65);
              uint64_t v5 = v64;
            }
            else
            {
              uint64_t v66 = 0;
            }
            if ((*(_DWORD *)(v5 + 8) & 0xFE) == 0x12) {
              uint64_t v5 = **(void **)(v5 + 16);
            }
            *(void *)&long long v256 = 0;
            *((void *)&v256 + 1) = v5;
            LODWORD(v257) = v4;
            v258 = v260;
            uint64_t v259 = 0x400000000;
            v261 = v263;
            uint64_t v262 = 0x400000000;
            int v264 = v220;
            long long v265 = xmmword_1CD96D880;
            sub_1CC1587C8((uint64_t)&v258, (uint64_t)v260, (char *)__src, (char *)__src + 8 * v66);
            v238[0] = sub_1CB909674(v3, &v256, v233);
            v238[1] = v74;
            uint64_t v75 = *(unsigned int *)(a2 + 32);
            if (v75)
            {
              uint64_t v76 = v3;
              uint64_t v77 = 0;
              uint64_t v78 = 8 * v75;
              do
              {
                uint64_t v79 = *(void *)(*(void *)(a2 + 24) + v77);
                if (v79) {
                  BOOL v80 = (*(_DWORD *)(v79 + 8) & 0xFE) == 18;
                }
                else {
                  BOOL v80 = 0;
                }
                if (v80)
                {
                  if (*(_DWORD *)(a2 + 136))
                  {
                    unint64_t v81 = sub_1CD3EE584(v76, *(void *)(*(void *)(a2 + 24) + v77), 0, 1);
                    unint64_t v82 = v226 + v81;
                    if (__OFADD__(v226, v81)) {
                      unint64_t v82 = ((uint64_t)(v226 + v81) >> 63) ^ 0x8000000000000000;
                    }
                    unint64_t v226 = v82;
                  }
                  if (v63 <= *(_DWORD *)(v79 + 32)) {
                    unsigned int v63 = *(_DWORD *)(v79 + 32);
                  }
                }
                v77 += 8;
              }
              while (v78 != v77);
            }
            uint64_t v239 = v63;
            LODWORD(v240) = 0;
            sub_1CB90C9D4((uint64_t)&v239, (uint64_t)v238);
            if (__OFADD__(v239, v226)) {
              unint64_t v14 = ((uint64_t)(v239 + v226) >> 63) ^ 0x8000000000000000;
            }
            else {
              unint64_t v14 = v239 + v226;
            }
            if (v261 != v263) {
              free(v261);
            }
            if (v258 != v260) {
              free(v258);
            }
            BOOL v57 = __src;
            if (__src == &v243) {
              goto LABEL_145;
            }
          }
          free(v57);
          goto LABEL_145;
        }
      }
      uint64_t v34 = *v26;
      if (v19 == 1)
      {
        if (v34 > 0x185)
        {
LABEL_100:
          uint64_t v35 = *v27;
          goto LABEL_101;
        }
      }
      else
      {
        uint64_t v35 = *v27;
        if (v34 > 0x185 || v35 == 0)
        {
LABEL_101:
          if (v35 && (v34 > 0x185 || *(unsigned char *)(v17 + 390 * v19 + v34 + 3862) != 2))
          {
            uint64_t __src = (void *)2;
            LODWORD(v242) = 0;
            *(void *)&long long v256 = v24;
            *((void *)&v256 + 1) = v23;
            sub_1CB90C9D4((uint64_t)&v256, (uint64_t)&__src);
            if (v251 >= (unint64_t)HIDWORD(v251)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_OWORD *)v250 + v251) = v256;
            LODWORD(v251) = v251 + 1;
          }
          goto LABEL_106;
        }
      }
      if (*(unsigned __int8 *)(v17 + 390 * v19 + v34 + 3862) <= 1u)
      {
        if (v32
          && ((*(uint64_t (**)(unint64_t, void, void))(*(void *)v17 + 1328))(v17, v19, 0) & 1) != 0)
        {
          unint64_t v14 = 0;
          goto LABEL_145;
        }
        if (v236) {
          uint64_t v37 = 2;
        }
        else {
          uint64_t v37 = 1;
        }
        uint64_t __src = (void *)v37;
        LODWORD(v242) = 0;
        *(void *)&long long v256 = v24;
        *((void *)&v256 + 1) = v23;
        sub_1CB90C9D4((uint64_t)&v256, (uint64_t)&__src);
        if (v254 >= (unint64_t)HIDWORD(v254)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_OWORD *)v253 + v254) = v256;
        LODWORD(v254) = v254 + 1;
        goto LABEL_106;
      }
      goto LABEL_100;
    case 'L':
      int v16 = 234;
      goto LABEL_57;
    case 'Z':
      int v16 = 106;
      goto LABEL_57;
  }
LABEL_201:
  int v85 = *(unsigned __int8 *)(v5 + 8);
  if (v85 == 19)
  {
    unint64_t v14 = 0;
    goto LABEL_149;
  }
  uint64_t v223 = v7;
  uint64_t v86 = a2;
  if (v9)
  {
    uint64_t v87 = *(void *)(a2 + 24);
    uint64_t v88 = 8 * v9;
    do
    {
      if (*(unsigned char *)(*(void *)v87 + 8) == 19)
      {
        unint64_t v14 = 0;
        goto LABEL_149;
      }
      v87 += 8;
      v88 -= 8;
    }
    while (v88);
  }
  if (v7) {
    unint64_t v89 = 0;
  }
  else {
    unint64_t v89 = v8;
  }
  uint64_t v224 = v7;
  if (v7) {
    uint64_t v90 = 0;
  }
  else {
    uint64_t v90 = v7;
  }
  unsigned int v91 = 1;
  if ((v85 & 0xFE) == 0x12 && v5)
  {
    uint64_t v92 = v7;
    if (v7)
    {
      uint64_t v201 = a3;
      unint64_t v202 = sub_1CD3EE584(a1, v5, 1, 0);
      uint64_t v92 = v223;
      a3 = v201;
      unint64_t v8 = v202;
      uint64_t v224 = v203;
      int v85 = *(_DWORD *)(v5 + 8);
    }
    if (*(_DWORD *)(v5 + 32) <= 1u) {
      unsigned int v91 = 1;
    }
    else {
      unsigned int v91 = *(_DWORD *)(v5 + 32);
    }
    unint64_t v227 = v8;
    if ((v85 & 0xFE) == 0x12) {
      uint64_t v5 = **(void **)(v5 + 16);
    }
  }
  else
  {
    unint64_t v227 = v89;
    uint64_t v224 = v90;
    uint64_t v92 = v7;
  }
  uint64_t __src = &v243;
  uint64_t v242 = 0x400000000;
  uint64_t v102 = *(unsigned int *)(a2 + 32);
  if (v102)
  {
    int v230 = v4;
    uint64_t v232 = v5;
    uint64_t v103 = 0;
    uint64_t v104 = 8 * v102;
    do
    {
      uint64_t v105 = *(void *)(*(void *)(v86 + 24) + v103);
      int v106 = *(_DWORD *)(v105 + 8);
      if (v105) {
        BOOL v107 = (*(_DWORD *)(v105 + 8) & 0xFE) == 18;
      }
      else {
        BOOL v107 = 0;
      }
      if (v107)
      {
        if (v92)
        {
          uint64_t v109 = *(void *)(*(void *)(v86 + 24) + v103);
          uint64_t v110 = v86;
          uint64_t v111 = v6;
          uint64_t v112 = a3;
          unint64_t v113 = sub_1CD3EE584(v3, v109, 0, 1);
          uint64_t v92 = v223;
          uint64_t v114 = v224;
          a3 = v112;
          uint64_t v6 = v111;
          uint64_t v86 = v110;
          if (v115 == 1) {
            uint64_t v114 = 1;
          }
          uint64_t v224 = v114;
          unint64_t v116 = v227 + v113;
          if (__OFADD__(v227, v113)) {
            unint64_t v116 = ((uint64_t)(v227 + v113) >> 63) ^ 0x8000000000000000;
          }
          unint64_t v227 = v116;
          int v106 = *(_DWORD *)(v105 + 8);
        }
        if (v91 <= *(_DWORD *)(v105 + 32)) {
          unsigned int v91 = *(_DWORD *)(v105 + 32);
        }
        if ((v106 & 0xFE) == 0x12) {
          uint64_t v105 = **(void **)(v105 + 16);
        }
      }
      if (v242 >= (unint64_t)HIDWORD(v242)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)__src + v242) = v105;
      uint64_t v108 = (v242 + 1);
      LODWORD(v242) = v242 + 1;
      v103 += 8;
    }
    while (v104 != v103);
    uint64_t v117 = a3;
    uint64_t v118 = (char *)__src;
    uint64_t v5 = v232;
    int v4 = v230;
  }
  else
  {
    uint64_t v117 = a3;
    uint64_t v108 = 0;
    uint64_t v118 = (char *)&v243;
  }
  if (v91 == 1)
  {
    unint64_t v14 = 1;
  }
  else
  {
    *(void *)&long long v256 = 0;
    *((void *)&v256 + 1) = v5;
    LODWORD(v257) = v4;
    v258 = v260;
    uint64_t v259 = 0x400000000;
    v261 = v263;
    uint64_t v262 = 0x400000000;
    int v264 = v6;
    long long v265 = xmmword_1CD96D880;
    sub_1CC1587C8((uint64_t)&v258, (uint64_t)v260, v118, &v118[8 * v108]);
    v250 = (void *)sub_1CB909674(v3, &v256, v117);
    uint64_t v251 = v119;
    v253 = (void *)v91;
    LODWORD(v254) = 0;
    sub_1CB90C9D4((uint64_t)&v253, (uint64_t)&v250);
    if (__OFADD__(v253, v227)) {
      unint64_t v14 = ((uint64_t)((uint64_t)v253 + v227) >> 63) ^ 0x8000000000000000;
    }
    else {
      unint64_t v14 = (unint64_t)v253 + v227;
    }
    if (v261 != v263) {
      free(v261);
    }
    if (v258 != v260) {
      free(v258);
    }
    uint64_t v118 = (char *)__src;
  }
  if (v118 != (char *)&v243)
  {
    BOOL v58 = v118;
    goto LABEL_148;
  }
LABEL_149:
  if (v266 != &v268) {
    free(v266);
  }
  return v14;
}

unint64_t sub_1CB90C6E8(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v31 = v35;
  int v32 = v35;
  uint64_t v33 = 4;
  int v34 = 0;
  uint64_t v4 = a3;
  if (!a3) {
    return 0;
  }
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  do
  {
    uint64_t v10 = *(void *)(a2 + 8 * v8);
    uint64_t v11 = *(void *)(a4 + 8 * v8);
    if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12) {
      unsigned int v12 = *(unsigned __int8 *)(**(void **)(v11 + 16) + 8);
    }
    else {
      unsigned int v12 = *(_DWORD *)(v11 + 8);
    }
    BOOL v13 = v12 < 7 || v12 == 13;
    if (!v13 && v12 != 15 || *(unsigned __int8 *)(v10 + 16) < 0x15u) {
      goto LABEL_48;
    }
    unint64_t v14 = v32;
    uint64_t v15 = HIDWORD(v33);
    if (v32 == v31)
    {
      if (HIDWORD(v33))
      {
        int v16 = 0;
        uint64_t v17 = 8 * HIDWORD(v33);
        BOOL v18 = v32;
        while (*(void *)v18 != v10)
        {
          if (*(void *)v18 == -2) {
            int v16 = v18;
          }
          v18 += 8;
          v17 -= 8;
          if (!v17)
          {
            if (!v16) {
              goto LABEL_20;
            }
            *(void *)int v16 = v10;
            --v34;
            if (v11) {
              goto LABEL_47;
            }
            goto LABEL_48;
          }
        }
        goto LABEL_48;
      }
LABEL_20:
      unsigned int v19 = v33;
      if (HIDWORD(v33) < v33)
      {
        ++HIDWORD(v33);
        *(void *)&v32[8 * v15] = v10;
        if (!v11) {
          goto LABEL_48;
        }
LABEL_47:
        if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12)
        {
          unint64_t v29 = sub_1CD3EE584(a1, v11, 0, 1);
          if (__OFADD__(v9, v29)) {
            unint64_t v9 = ((uint64_t)(v9 + v29) >> 63) ^ 0x8000000000000000;
          }
          else {
            v9 += v29;
          }
        }
        goto LABEL_48;
      }
    }
    else
    {
      unsigned int v19 = v33;
    }
    if (3 * v19 <= 4 * (HIDWORD(v33) - v34))
    {
      if (v19 >= 0x40) {
        v19 *= 2;
      }
      else {
        unsigned int v19 = 128;
      }
    }
    else if (v19 - HIDWORD(v33) >= v19 >> 3)
    {
      goto LABEL_26;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v31, v19);
    unsigned int v19 = v33;
    unint64_t v14 = v32;
LABEL_26:
    unsigned int v20 = v19 - 1;
    unsigned int v21 = (v19 - 1) & ((v10 >> 4) ^ (v10 >> 9));
    uint64_t v22 = &v14[8 * v21];
    uint64_t v23 = *(void *)v22;
    if (*(void *)v22 == -1)
    {
      uint64_t v24 = 0;
LABEL_40:
      if (v24) {
        BOOL v28 = v24;
      }
      else {
        BOOL v28 = v22;
      }
      if (*(void *)v28 != v10)
      {
        if (*(void *)v28 == -2) {
          --v34;
        }
        else {
          ++HIDWORD(v33);
        }
        *(void *)BOOL v28 = v10;
        if (v11) {
          goto LABEL_47;
        }
      }
    }
    else
    {
      uint64_t v24 = 0;
      int v25 = 1;
      while (v23 != v10)
      {
        if (v24) {
          BOOL v26 = 0;
        }
        else {
          BOOL v26 = v23 == -2;
        }
        if (v26) {
          uint64_t v24 = v22;
        }
        unsigned int v27 = v21 + v25++;
        unsigned int v21 = v27 & v20;
        uint64_t v22 = &v14[8 * (v27 & v20)];
        uint64_t v23 = *(void *)v22;
        if (*(void *)v22 == -1) {
          goto LABEL_40;
        }
      }
    }
LABEL_48:
    ++v8;
  }
  while (v8 != v4);
  if (v32 != v31) {
    free(v32);
  }
  return v9;
}

double sub_1CB90C994(_DWORD *a1)
{
  unint64_t v2 = (uint64_t **)(**(void **)a1 + 1888);
  if (a1 && (a1[2] & 0xFE) == 0x12)
  {
    uint64_t v3 = (llvm::Type *)a1[8];
    if (a1[2] == 19) {
      return llvm::ScalableVectorType::get(v2, v3);
    }
    else {
      return llvm::FixedVectorType::get((llvm::FixedVectorType *)v2, v3);
    }
  }
  return result;
}

uint64_t sub_1CB90C9D4(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 8) == 1) {
    *(_DWORD *)(result + 8) = 1;
  }
  uint64_t v2 = *(void *)result;
  uint64_t v3 = *(void *)a2;
  if (*(uint64_t *)result >= 0) {
    unint64_t v4 = *(void *)result;
  }
  else {
    unint64_t v4 = -v2;
  }
  if (v3 >= 0) {
    unint64_t v5 = *(void *)a2;
  }
  else {
    unint64_t v5 = -v3;
  }
  unint64_t v6 = v5 * v4;
  if ((v3 ^ v2) >= 0) {
    unint64_t v7 = v5 * v4;
  }
  else {
    unint64_t v7 = -(uint64_t)v6;
  }
  if (v2) {
    BOOL v8 = v3 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    unint64_t v6 = v7;
    goto LABEL_18;
  }
  if ((v3 ^ v2) < 0)
  {
    if (v4 <= 0x8000000000000000 / v5)
    {
      unint64_t v6 = -(uint64_t)(v5 * v4);
      goto LABEL_18;
    }
  }
  else if (v4 <= 0x7FFFFFFFFFFFFFFFLL / v5)
  {
    goto LABEL_18;
  }
  if (v2 < 1 || v3 <= 0) {
    unint64_t v6 = ((v3 & v2) >> 63) ^ 0x8000000000000000;
  }
  else {
    unint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
  }
LABEL_18:
  *(void *)double result = v6;
  return result;
}

uint64_t sub_1CB90CA80(uint64_t result, char *a2, char *a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 + ((a3 - a2) >> 5) > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2 != a3)
  {
    unint64_t v5 = (void *)(*(void *)result + 8 * v4);
    do
    {
      uint64_t v6 = *(void *)v3;
      v3 += 32;
      *v5++ = v6;
    }
    while (v3 != a3);
  }
  *(_DWORD *)(result + 8) = v4 + ((unint64_t)(a3 - a2) >> 5);
  return result;
}

uint64_t sub_1CB90CB08(uint64_t result, unint64_t a2, uint64_t a3)
{
  if (*(unsigned int *)(result + 12) < a2)
  {
    *(_DWORD *)(result + 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unint64_t v3 = *(unsigned int *)(result + 8);
  if (v3 >= a2) {
    unint64_t v4 = a2;
  }
  else {
    unint64_t v4 = *(unsigned int *)(result + 8);
  }
  if (v4)
  {
    BOOL v8 = *(void **)result;
    do
    {
      *v8++ = a3;
      --v4;
    }
    while (v4);
  }
  unint64_t v5 = v3 - a2;
  if (v3 < a2)
  {
    uint64_t v6 = (void *)(*(void *)result + 8 * v3);
    do
      *v6++ = a3;
    while (!__CFADD__(v5++, 1));
  }
  *(_DWORD *)(result + 8) = a2;
  return result;
}

BOOL sub_1CB90CBC0(uint64_t *a1, int a2, llvm::Type ***this, llvm::Type ***a4)
{
  unint64_t v4 = (llvm::Type *)a4;
  unint64_t v5 = (llvm::Type *)this;
  if (a2 <= 47)
  {
    if (a2 == 38)
    {
      unint64_t v39 = sub_1CB83544C(*a1, (uint64_t)this);
      if (v40 == 1) {
        return 1;
      }
      uint64_t v41 = *(char **)(*a1 + 32);
      size_t v42 = *(void *)(*a1 + 40);
      int v43 = &v41[v42];
      if (v39 <= 0xFF)
      {
        BOOL v44 = (char *)memchr(v41, (char)v39, v42);
        if (v44) {
          int v43 = v44;
        }
      }
      if (v43 - v41 == v42) {
        return 1;
      }
    }
    else
    {
      if (a2 != 47) {
        return 1;
      }
      if ((this[1] & 0xFE) == 0x12) {
        unint64_t v5 = *this[2];
      }
      unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v5);
      unsigned int v8 = PrimitiveSizeInBits;
      uint64_t v9 = *a1;
      uint64_t v10 = *(char **)(*a1 + 32);
      uint64_t v11 = *(void *)(v9 + 40);
      unsigned int v12 = &v10[v11];
      if (PrimitiveSizeInBits <= 0xFF)
      {
        BOOL v13 = (char *)memchr(v10, (char)PrimitiveSizeInBits, *(void *)(v9 + 40));
        if (v13) {
          unsigned int v12 = v13;
        }
      }
      if (v12 - v10 == v11) {
        return 1;
      }
      unsigned int v14 = *((_DWORD *)v4 + 2);
      if ((v14 & 0xFE) == 0x12) {
        unsigned int v14 = *(_DWORD *)(**((void **)v4 + 2) + 8);
      }
      if (v14 < 0x100) {
        goto LABEL_21;
      }
      unsigned int v15 = v14 >> 8;
      uint64_t v16 = *(unsigned int *)(v9 + 240);
      uint64_t v17 = *(void *)(v9 + 232);
      if (v16)
      {
        uint64_t v17 = *(void *)(v9 + 232);
        unint64_t v18 = *(unsigned int *)(v9 + 240);
        do
        {
          unint64_t v19 = v18 >> 1;
          uint64_t v20 = v17 + 16 * (v18 >> 1);
          unsigned int v21 = *(_DWORD *)(v20 + 8);
          uint64_t v22 = v20 + 16;
          v18 += ~(v18 >> 1);
          if (v21 < v15) {
            uint64_t v17 = v22;
          }
          else {
            unint64_t v18 = v19;
          }
        }
        while (v18);
      }
      if (v17 == *(void *)(v9 + 232) + 16 * v16 || *(_DWORD *)(v17 + 8) != v15) {
LABEL_21:
      }
        uint64_t v17 = *(void *)(v9 + 232);
      if (*(_DWORD *)(v17 + 4) > v8) {
        return 1;
      }
    }
    return 0;
  }
  if (a2 != 49)
  {
    if (a2 != 48) {
      return 1;
    }
    if ((a4[1] & 0xFE) == 0x12) {
      unint64_t v4 = *a4[2];
    }
    unsigned int v23 = llvm::Type::getPrimitiveSizeInBits(v4);
    unsigned int v24 = v23;
    uint64_t v25 = *a1;
    BOOL v26 = *(char **)(*a1 + 32);
    uint64_t v27 = *(void *)(v25 + 40);
    BOOL v28 = &v26[v27];
    if (v23 <= 0xFF)
    {
      unint64_t v29 = (char *)memchr(v26, (char)v23, *(void *)(v25 + 40));
      if (v29) {
        BOOL v28 = v29;
      }
    }
    if (v28 - v26 == v27) {
      return 1;
    }
    unsigned int v30 = *((_DWORD *)v5 + 2);
    if ((v30 & 0xFE) == 0x12) {
      unsigned int v30 = *(_DWORD *)(**((void **)v5 + 2) + 8);
    }
    if (v30 < 0x100) {
      goto LABEL_43;
    }
    unsigned int v31 = v30 >> 8;
    uint64_t v32 = *(unsigned int *)(v25 + 240);
    uint64_t v33 = *(void *)(v25 + 232);
    if (v32)
    {
      uint64_t v33 = *(void *)(v25 + 232);
      unint64_t v34 = *(unsigned int *)(v25 + 240);
      do
      {
        unint64_t v35 = v34 >> 1;
        uint64_t v36 = v33 + 16 * (v34 >> 1);
        unsigned int v37 = *(_DWORD *)(v36 + 8);
        uint64_t v38 = v36 + 16;
        v34 += ~(v34 >> 1);
        if (v37 < v31) {
          uint64_t v33 = v38;
        }
        else {
          unint64_t v34 = v35;
        }
      }
      while (v34);
    }
    if (v33 == *(void *)(v25 + 232) + 16 * v32 || *(_DWORD *)(v33 + 8) != v31) {
LABEL_43:
    }
      uint64_t v33 = *(void *)(v25 + 232);
    return *(_DWORD *)(v33 + 4) < v24;
  }
  return this != a4 && (*((unsigned char *)this + 8) != 15 || *((unsigned char *)a4 + 8) != 15);
}

uint64_t sub_1CB90CE98(uint64_t a1, uint64_t a2, BOOL a3)
{
  int v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 == 67)
  {
    int v16 = *(_DWORD *)(a2 + 20);
    if ((v16 & 0x40000000) != 0) {
      uint64_t v17 = *(void ***)(a2 - 8);
    }
    else {
      uint64_t v17 = (void **)(a2 - 32 * (v16 & 0x7FFFFFF));
    }
    if (((*(uint64_t (**)(uint64_t, void, void))(*(void *)a1 + 1184))(a1, **v17, *(void *)a2) & 1) == 0) {
      goto LABEL_6;
    }
    return 1;
  }
  if (v5 == 74)
  {
    unint64_t EVT = llvm::EVT::getEVT(*(llvm::EVT **)a2, 0, a3);
    uint64_t v9 = v8;
    int v10 = *(_DWORD *)(a2 + 20);
    uint64_t v11 = (v10 & 0x40000000) != 0 ? *(llvm::EVT ****)(a2 - 8) : (llvm::EVT ***)(a2 - 32 * (v10 & 0x7FFFFFF));
    unint64_t v12 = llvm::EVT::getEVT(**v11, 0, v6);
    if ((*(uint64_t (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))(*(void *)a1 + 1288))(a1, EVT, v9, v12, v13))return 1; {
  }
    }
LABEL_6:
  unsigned int v14 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 1496);

  return v14(a1, a2);
}

uint64_t sub_1CB90D004(void **a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a2 + 16);
    if (v4 >= 0x1C)
    {
      int v5 = *(_DWORD *)(*(void *)a2 + 8);
      if ((v5 & 0xFE) == 0x12) {
        int v5 = *(_DWORD *)(**(void **)(*(void *)a2 + 16) + 8);
      }
      if (v5 != 269) {
        return 0;
      }
      if (v4 != 85)
      {
        if (v4 == 56)
        {
          int v6 = *(_DWORD *)(a2 + 20);
          if ((v6 & 0x40000000) != 0) {
            unint64_t v7 = *(uint64_t **)(a2 - 8);
          }
          else {
            unint64_t v7 = (uint64_t *)(a2 - 32 * (v6 & 0x7FFFFFF));
          }
          uint64_t v14 = *v7;
          if (*v7)
          {
            uint64_t v15 = v7[4];
            **a1 = v14;
            if (v15)
            {
              *a1[1] = v15;
              return 1;
            }
          }
          return 0;
        }
        goto LABEL_15;
      }
      int v8 = 0;
      uint64_t v9 = *(void *)(a2 - 32);
      if (!v9) {
        return v8 & v5;
      }
      unsigned int v10 = *(unsigned __int8 *)(v9 + 16);
      if (v10 > 0x14) {
        return v8 & v5;
      }
      uint64_t v11 = *(void *)(a2 - 96);
      uint64_t v12 = *(void *)(a2 - 64);
      if (v10 == 16)
      {
        uint64_t v13 = *(unsigned int *)(v9 + 32);
        if (v13 >= 0x41)
        {
          int v16 = 0;
          int64_t v17 = (unint64_t)(v13 + 63) >> 6;
          do
          {
            if (v17-- < 1) {
              break;
            }
            unint64_t v19 = *(void *)(*(void *)(v9 + 24) + 8 * v17);
            v16 += __clz(v19);
          }
          while (!v19);
          int v20 = v13 | 0xFFFFFFC0;
          if ((v13 & 0x3F) == 0) {
            int v20 = 0;
          }
          int v5 = v16 + v20;
          if (v5 != v13) {
            goto LABEL_15;
          }
        }
        else if (*(void *)(v9 + 24))
        {
LABEL_15:
          int v8 = 0;
          return v8 & v5;
        }
      }
      else if (v10 == 17)
      {
        if ((sub_1CB844168(v9, 0.0) & 1) == 0) {
          goto LABEL_15;
        }
      }
      else if (v10 - 18 >= 3 && v10 != 13)
      {
        goto LABEL_15;
      }
      if (v11 && (**a1 = v11, v12))
      {
        *a1[1] = v12;
        int v8 = 1;
        int v5 = 1;
      }
      else
      {
        int v5 = 0;
        int v8 = 1;
      }
      return v8 & v5;
    }
  }
  return result;
}

uint64_t sub_1CB90D1A4(void **a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a2 + 16);
    if (v4 >= 0x1C)
    {
      int v5 = *(_DWORD *)(*(void *)a2 + 8);
      if ((v5 & 0xFE) == 0x12) {
        int v5 = *(_DWORD *)(**(void **)(*(void *)a2 + 16) + 8);
      }
      if (v5 != 269) {
        return 0;
      }
      if (v4 == 85)
      {
        int v8 = 0;
        uint64_t v9 = *(unsigned __int8 **)(a2 - 64);
        if (!v9 || v9[16] > 0x14u) {
          return v8 & v5;
        }
        uint64_t v10 = *(void *)(a2 - 96);
        uint64_t v11 = *(void *)(a2 - 32);
        if (llvm::Constant::isOneValue((llvm::Constant *)v9))
        {
          if (v10 && (**a1 = v10, v11))
          {
            *a1[1] = v11;
            int v8 = 1;
            int v5 = 1;
          }
          else
          {
            int v5 = 0;
            int v8 = 1;
          }
          return v8 & v5;
        }
      }
      else if (v4 == 57)
      {
        int v6 = *(_DWORD *)(a2 + 20);
        if ((v6 & 0x40000000) != 0) {
          unint64_t v7 = *(uint64_t **)(a2 - 8);
        }
        else {
          unint64_t v7 = (uint64_t *)(a2 - 32 * (v6 & 0x7FFFFFF));
        }
        uint64_t v12 = *v7;
        if (*v7)
        {
          uint64_t v13 = v7[4];
          **a1 = v12;
          if (v13)
          {
            *a1[1] = v13;
            return 1;
          }
        }
        return 0;
      }
      int v8 = 0;
      return v8 & v5;
    }
  }
  return result;
}

BOOL sub_1CB90D2C0(uint64_t a1, unsigned __int8 *a2)
{
  BOOL result = 0;
  if (a2)
  {
    unsigned int v3 = a2[16];
    if (v3 >= 0x1C)
    {
      int v4 = *(_DWORD *)(*(void *)a2 + 8);
      if ((v4 & 0xFE) == 0x12) {
        int v4 = *(_DWORD *)(**(void **)(*(void *)a2 + 16) + 8);
      }
      BOOL result = 0;
      if (v4 == 269)
      {
        if (v3 == 57) {
          return 1;
        }
        if (v3 == 85)
        {
          int v5 = (unsigned __int8 *)*((void *)a2 - 8);
          if (v5)
          {
            if (v5[16] <= 0x14u && (llvm::Constant::isOneValue((llvm::Constant *)v5) & 1) != 0) {
              return 1;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CB90D34C(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if (a3)
  {
    uint64_t v6 = 4 * a3;
    for (uint64_t i = a2; *i < 2 * (int)a3; ++i)
    {
      v6 -= 4;
      if (!v6)
      {
        if (a1 == 6)
        {
          if (llvm::ShuffleVectorInst::isSelectMask(a2, a3))
          {
            return 2;
          }
          else if (llvm::ShuffleVectorInst::isTransposeMask(a2, a3))
          {
            return 3;
          }
        }
        else if (a1 == 7)
        {
          if (llvm::ShuffleVectorInst::isReverseMask(a2, a3))
          {
            return 1;
          }
          else if (llvm::ShuffleVectorInst::isZeroEltSplatMask(a2, a3))
          {
            return 0;
          }
        }
        return v3;
      }
    }
  }
  return v3;
}

uint64_t sub_1CB90D414(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

BOOL sub_1CB90D4AC(uint64_t a1, _DWORD **a2, _DWORD **a3)
{
  unsigned int v3 = *a2[1];
  unsigned int v4 = *a3[1];
  if (v3 < v4) {
    return 1;
  }
  if (v4 < v3) {
    return 0;
  }
  unsigned int v5 = *a2[2];
  unsigned int v6 = *a3[2];
  if (v5 < v6) {
    return 1;
  }
  return v6 >= v5 && sub_1CB90D520((uint64_t)&v8, a2, a3);
}

BOOL sub_1CB90D520(uint64_t a1, _DWORD **a2, _DWORD **a3)
{
  unsigned int v3 = *a2[3];
  unsigned int v4 = *a3[3];
  if (v3 < v4) {
    return 1;
  }
  if (v4 < v3) {
    return 0;
  }
  unsigned int v5 = *a2[4];
  unsigned int v6 = *a3[4];
  if (v5 < v6) {
    return 1;
  }
  if (v6 < v5) {
    return 0;
  }
  unsigned int v7 = *a2[5];
  unsigned int v8 = *a3[5];
  if (v7 < v8) {
    return 1;
  }
  return v8 >= v7 && *a2[6] < *a3[6];
}

BOOL sub_1CB90D5AC(uint64_t a1, uint64_t a2, llvm::EVT *a3)
{
  uint64_t v4 = sub_1CB87DC14(a2, a1, a3, 0);
  return v4 && *(void *)(a2 + 8 * v4 + 96) && (*(unsigned char *)(a2 + 390 * v4 + 4086) & 0xFB) == 0;
}

uint64_t sub_1CB90D610(uint64_t result, unint64_t a2, uint64_t a3)
{
  if (*(unsigned int *)(result + 12) < a2)
  {
    *(_DWORD *)(result + 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unsigned int v3 = *(void **)result;
  unint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 >= a2) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = *(unsigned int *)(result + 8);
  }
  if (v5)
  {
    uint64_t v9 = *(void **)result;
    do
    {
      *v9++ = a3;
      --v5;
    }
    while (v5);
  }
  unint64_t v6 = v4 - a2;
  if (v4 < a2)
  {
    unsigned int v7 = &v3[v4];
    do
      *v7++ = a3;
    while (!__CFADD__(v6++, 1));
  }
  *(_DWORD *)(result + 8) = a2;
  return result;
}

BOOL sub_1CB90D6C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 112);
  unint64_t v4 = &unk_1EBCBE000;
  if (!v3) {
    goto LABEL_11;
  }
  if (*(_DWORD *)(v3 + 8))
  {
    uint64_t v3 = *(void *)(v3 + 40);
    if (!v3) {
      goto LABEL_11;
    }
    int v5 = *(_DWORD *)(v3 + 40);
    if (v5)
    {
      uint64_t v6 = *(void *)(v3 + 24);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
      {
        uint64_t v70 = a3;
        uint64_t v51 = a2;
        uint64_t v63 = v6;
        int v66 = v5;
        int v52 = __cxa_guard_acquire(&qword_1EBCBE588);
        int v5 = v66;
        uint64_t v6 = v63;
        unint64_t v4 = &unk_1EBCBE000;
        a2 = v51;
        a3 = v70;
        if (v52)
        {
          unint64_t v53 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override) {
            unint64_t v53 = 0xFF51AFD7ED558CCDLL;
          }
          qword_1EBCBE580 = v53;
          __cxa_guard_release(&qword_1EBCBE588);
          int v5 = v66;
          uint64_t v6 = v63;
          unint64_t v4 = (void *)&unk_1EBCBE000;
          a2 = v51;
          a3 = v70;
        }
      }
      unint64_t v7 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v4[176] ^ 0xBC30287DAC2F782DLL)) ^ ((0x9DDFEA08EB382D69
                                                                        * (v4[176] ^ 0xBC30287DAC2F782DLL)) >> 47) ^ 0xDF1D5C18CB5D1959);
      unsigned int v8 = (-348639895 * ((v7 >> 47) ^ v7)) ^ 0x74656772;
      int v9 = v5 - 1;
      for (int i = 1; ; ++i)
      {
        unsigned int v11 = v8 & v9;
        uint64_t v12 = (uint64_t *)(v6 + 24 * v11);
        uint64_t v13 = *v12;
        if (*v12 == -1)
        {
          if ("target-cpu" == (char *)-1) {
            goto LABEL_50;
          }
        }
        else if (v13 == -2)
        {
          if ("target-cpu" == (char *)-2) {
            goto LABEL_50;
          }
        }
        else if (v12[1] == 10 && *(void *)v13 == 0x632D746567726174 && *(_WORD *)(v13 + 8) == 30064)
        {
LABEL_50:
          uint64_t v3 = v12[2];
          goto LABEL_11;
        }
        if (v13 == -1) {
          break;
        }
        unsigned int v8 = i + v11;
      }
    }
  }
  uint64_t v3 = 0;
LABEL_11:
  uint64_t v14 = *(void *)(a3 + 112);
  if (!v14 || !*(_DWORD *)(v14 + 8) || (uint64_t v15 = *(void *)(v14 + 40)) == 0 || (v16 = *(_DWORD *)(v15 + 40)) == 0)
  {
LABEL_20:
    uint64_t v24 = 0;
    goto LABEL_21;
  }
  uint64_t v17 = *(void *)(v15 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    uint64_t v71 = a3;
    uint64_t v54 = a2;
    uint64_t v62 = v3;
    uint64_t v64 = v17;
    int v67 = v16;
    int v55 = __cxa_guard_acquire(&qword_1EBCBE588);
    int v16 = v67;
    uint64_t v3 = v62;
    uint64_t v17 = v64;
    unint64_t v4 = &unk_1EBCBE000;
    a2 = v54;
    a3 = v71;
    if (v55)
    {
      unint64_t v56 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v56 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v56;
      __cxa_guard_release(&qword_1EBCBE588);
      int v16 = v67;
      uint64_t v3 = v62;
      uint64_t v17 = v64;
      unint64_t v4 = (void *)&unk_1EBCBE000;
      a2 = v54;
      a3 = v71;
    }
  }
  unint64_t v18 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v4[176] ^ 0xBC30287DAC2F782DLL)) ^ ((0x9DDFEA08EB382D69
                                                                     * (v4[176] ^ 0xBC30287DAC2F782DLL)) >> 47) ^ 0xDF1D5C18CB5D1959);
  unsigned int v19 = (-348639895 * ((v18 >> 47) ^ v18)) ^ 0x74656772;
  for (int j = 1; ; ++j)
  {
    unsigned int v21 = v19 & (v16 - 1);
    uint64_t v22 = (uint64_t *)(v17 + 24 * v21);
    uint64_t v23 = *v22;
    if (*v22 == -1)
    {
      if ("target-cpu" == (char *)-1) {
        goto LABEL_58;
      }
      goto LABEL_19;
    }
    if (v23 != -2) {
      break;
    }
    if ("target-cpu" == (char *)-2) {
      goto LABEL_58;
    }
LABEL_19:
    if (v23 == -1) {
      goto LABEL_20;
    }
    unsigned int v19 = j + v21;
  }
  if (v22[1] != 10) {
    goto LABEL_19;
  }
  if (*(void *)v23 != 0x632D746567726174 || *(_WORD *)(v23 + 8) != 30064) {
    goto LABEL_19;
  }
LABEL_58:
  uint64_t v24 = v22[2];
LABEL_21:
  if (v24 != v3) {
    return 0;
  }
  uint64_t v25 = *(void *)(a2 + 112);
  if (v25)
  {
    if (!*(_DWORD *)(v25 + 8)) {
      goto LABEL_31;
    }
    uint64_t v25 = *(void *)(v25 + 40);
    if (v25)
    {
      int v26 = *(_DWORD *)(v25 + 40);
      if (v26)
      {
        uint64_t v27 = *(void *)(v25 + 24);
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
        {
          uint64_t v57 = a3;
          uint64_t v68 = v27;
          int v72 = v26;
          int v58 = __cxa_guard_acquire(&qword_1EBCBE588);
          int v26 = v72;
          uint64_t v27 = v68;
          unint64_t v4 = &unk_1EBCBE000;
          a3 = v57;
          if (v58)
          {
            unint64_t v59 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override) {
              unint64_t v59 = 0xFF51AFD7ED558CCDLL;
            }
            qword_1EBCBE580 = v59;
            __cxa_guard_release(&qword_1EBCBE588);
            int v26 = v72;
            uint64_t v27 = v68;
            unint64_t v4 = (void *)&unk_1EBCBE000;
            a3 = v57;
          }
        }
        unint64_t v28 = 0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69 * (v4[176] ^ 0xACC792AF839889B6)) ^ ((0x9DDFEA08EB382D69
                                                                           * (v4[176] ^ 0xACC792AF839889B6)) >> 47) ^ 0xCAEAE6CAE4EAE8C2);
        unsigned int v29 = (-348639895 * ((v28 >> 47) ^ v28)) ^ 0x74616566;
        int v30 = v26 - 1;
        for (int k = 1; ; ++k)
        {
          unsigned int v32 = v29 & v30;
          uint64_t v33 = v27 + 24 * v32;
          unint64_t v34 = *(void **)v33;
          if (*(void *)v33 == -1)
          {
            if ("target-features" == (char *)-1) {
              goto LABEL_66;
            }
          }
          else if (v34 == (void *)-2)
          {
            if ("target-features" == (char *)-2) {
              goto LABEL_66;
            }
          }
          else if (*(void *)(v33 + 8) == 15 {
                 && *v34 == 0x662D746567726174
          }
                 && *(void *)((char *)v34 + 7) == 0x7365727574616566)
          {
LABEL_66:
            uint64_t v25 = *(void *)(v33 + 16);
            goto LABEL_32;
          }
          if (v34 == (void *)-1) {
            break;
          }
          unsigned int v29 = k + v32;
        }
      }
LABEL_31:
      uint64_t v25 = 0;
    }
  }
LABEL_32:
  uint64_t v35 = *(void *)(a3 + 112);
  if (!v35 || !*(_DWORD *)(v35 + 8) || (uint64_t v36 = *(void *)(v35 + 40)) == 0 || (v37 = *(_DWORD *)(v36 + 40)) == 0)
  {
LABEL_41:
    uint64_t v45 = 0;
    return v25 == v45;
  }
  uint64_t v38 = *(void *)(v36 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    uint64_t v65 = v25;
    uint64_t v69 = v38;
    int v73 = v37;
    int v60 = __cxa_guard_acquire(&qword_1EBCBE588);
    int v37 = v73;
    uint64_t v25 = v65;
    uint64_t v38 = v69;
    unint64_t v4 = &unk_1EBCBE000;
    if (v60)
    {
      unint64_t v61 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v61 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v61;
      __cxa_guard_release(&qword_1EBCBE588);
      int v37 = v73;
      uint64_t v25 = v65;
      uint64_t v38 = v69;
      unint64_t v4 = (void *)&unk_1EBCBE000;
    }
  }
  unint64_t v39 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v4[176] ^ 0xACC792AF839889B6)) ^ ((0x9DDFEA08EB382D69
                                                                     * (v4[176] ^ 0xACC792AF839889B6)) >> 47) ^ 0xCAEAE6CAE4EAE8C2);
  unsigned int v40 = (-348639895 * ((v39 >> 47) ^ v39)) ^ 0x74616566;
  int v41 = 1;
  while (2)
  {
    unsigned int v42 = v40 & (v37 - 1);
    uint64_t v43 = v38 + 24 * v42;
    BOOL v44 = *(void **)v43;
    if (*(void *)v43 == -1)
    {
      if ("target-features" == (char *)-1) {
        break;
      }
      goto LABEL_40;
    }
    if (v44 == (void *)-2)
    {
      if ("target-features" == (char *)-2) {
        break;
      }
      goto LABEL_40;
    }
    if (*(void *)(v43 + 8) != 15
      || (*v44 == 0x662D746567726174 ? (BOOL v50 = *(void *)((char *)v44 + 7) == 0x7365727574616566) : (BOOL v50 = 0), !v50))
    {
LABEL_40:
      if (v44 == (void *)-1) {
        goto LABEL_41;
      }
      unsigned int v40 = v41 + v42;
      ++v41;
      continue;
    }
    break;
  }
  uint64_t v45 = *(void *)(v43 + 16);
  return v25 == v45;
}

void sub_1CB90DF84()
{
}

void *sub_1CB90DF98(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1F25EDE10;
  result[1] = v3;
  return result;
}

uint64_t sub_1CB90DFE0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25EDE10;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CB90E00C(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 8) + 314);
}

uint64_t sub_1CB90E018()
{
  *(void *)&long long v3 = "FMA contraction at IR level";
  *((void *)&v3 + 1) = 27;
  char v1 = 0;
  uint64_t v2 = &v1;
  sub_1CD3F48AC((uint64_t)&unk_1EBCBE940, "disable-agx1-fma-contraction", &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCBE940, &dword_1CB82C000);
  *(void *)&long long v3 = "Disable combining instructions in to wider tuples";
  *((void *)&v3 + 1) = 49;
  sub_1CD3F4B2C((llvm::cl::Option *)&unk_1EBCBEA00, "disable-agx1-combining", &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCBEA00, &dword_1CB82C000);
  *(void *)&long long v3 = "Enables balanced scheduler for AGX1.";
  *((void *)&v3 + 1) = 36;
  sub_1CD3F4B2C((llvm::cl::Option *)&unk_1EBCBEAC0, "enable-balanced-sched", &v3);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCBEAC0, &dword_1CB82C000);
}

void sub_1CB90E118(uint64_t a1)
{
  *(void *)a1 = &unk_1F25EDEC0;
  uint64_t v2 = *(void **)(a1 + 1344);
  if (v2 != (void *)(a1 + 1360)) {
    free(v2);
  }
  free(*(void **)(a1 + 1320));
  long long v3 = *(void **)(a1 + 1144);
  if (v3 != (void *)(a1 + 1160)) {
    free(v3);
  }
  free(*(void **)(a1 + 1120));
  unint64_t v4 = *(void **)(a1 + 944);
  if (v4 != (void *)(a1 + 960)) {
    free(v4);
  }
  for (uint64_t i = 936; i != 552; i -= 24)
  {
    uint64_t v6 = *(void *)(a1 + i);
    if ((v6 & 4) != 0)
    {
      unint64_t v7 = (void **)(v6 & 0xFFFFFFFFFFFFFFF8);
      if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        if (*v7 != v7 + 2) {
          free(*v7);
        }
        MEMORY[0x1D25D9CE0](v7, 0x1080C40ED926357);
      }
    }
  }
  *(void *)a1 = &unk_1F25EDF80;
  unsigned int v8 = *(void **)(a1 + 456);
  if (v8 != (void *)(a1 + 472)) {
    free(v8);
  }
  *(void *)a1 = &unk_1F260E110;
  int v9 = *(void **)(a1 + 176);
  if (v9 != (void *)(a1 + 192)) {
    free(v9);
  }
  uint64_t v10 = *(void **)(a1 + 104);
  if (v10 != (void *)(a1 + 120)) {
    free(v10);
  }
  unsigned int v11 = *(void **)(a1 + 32);
  if (v11 != (void *)(a1 + 48)) {
    free(v11);
  }

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1CB90E2A4(uint64_t a1)
{
  sub_1CB90E118(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CB90E2DC()
{
  return "AGX1 TOC optimizer pass";
}

uint64_t sub_1CB90E2EC(uint64_t a1, uint64_t a2)
{
  uint64_t v205 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 248) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
  *(void *)(a1 + 256) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
  *(void *)(a1 + 544) = *(void *)(a2 + 40);
  uint64_t v154 = a2;
  uint64_t v4 = (*(uint64_t (**)(void, void))(**(void **)(a2 + 8) + 16))(*(void *)(a2 + 8), *(void *)a2);
  unsigned int v5 = *(_DWORD *)(*(void *)(a1 + 248) + 44) + 0x2000;
  *(_DWORD *)(a1 + 1152) = 0;
  *(void *)(a1 + 1336) = 0xFFFFFFFFLL;
  int v180 = (uint64_t *)(a1 + 1144);
  sub_1CB90F4BC((void *)(a1 + 1144), v5);
  *(_DWORD *)(a1 + 952) = 0;
  *(void *)(a1 + 1136) = 0xFFFFFFFFLL;
  uint64_t v164 = a1 + 944;
  sub_1CB90F4BC((void *)(a1 + 944), v5);
  *(_DWORD *)(a1 + 552) = 0;
  uint64_t v166 = a1;
  if (*(unsigned char *)(v4 + 301))
  {
    int v6 = *(_DWORD *)(*(void *)(a1 + 248) + 44);
    uint64_t v7 = *(unsigned int *)(a1 + 1352);
    if ((*(_DWORD *)(a1 + 1408) & 0x3F) != 0)
    {
      uint64_t v153 = *(void *)(a1 + 1344) + 8 * v7;
      *(void *)(v153 - 8) &= ~(-1 << (*(_DWORD *)(a1 + 1408) & 0x3F));
    }
    unsigned int v8 = v7;
    int v9 = (void *)(a1 + 1344);
    *(_DWORD *)(a1 + 1408) = v6;
    unsigned int v10 = v6 + 63;
    if (v7 != (v6 + 63) >> 6)
    {
      uint64_t v11 = v10 >> 6;
      if (v7 > v11)
      {
        *(_DWORD *)(a1 + 1352) = v11;
        unsigned int v8 = v10 >> 6;
      }
      else
      {
        if (v11 > *(_DWORD *)(a1 + 1356)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v11 != v7) {
          bzero((void *)(*v9 + 8 * v7), 8 * (v11 - v7));
        }
        unsigned int v8 = v11;
        *(_DWORD *)(a1 + 1352) = v11;
        int v6 = *(_DWORD *)(a1 + 1408);
      }
    }
    int v12 = v6 & 0x3F;
    if (v12) {
      *(void *)(*v9 + 8 * v8 - 8) &= ~(-1 << v12);
    }
  }
  int v193 = (char *)&v195;
  uint64_t v194 = 0xA00000000;
  uint64_t v13 = *(void *)(a1 + 248);
  int v14 = *(_DWORD *)(v13 + 44);
  unint64_t v189 = v192;
  int v191 = 6;
  if ((v14 + 63) >= 0x1C0)
  {
    unsigned int v190 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if ((v14 + 63) >= 0x40) {
    bzero(v192, 8 * ((v14 + 63) >> 6));
  }
  unsigned int v190 = (v14 + 63) >> 6;
  v192[12] = v14;
  uint64_t v15 = a1;
  llvm::AGXTOCOptimizer::collectImplicitDefs(a1, v154, (uint64_t *)&v189, v13, (uint64_t *)&off_1E66A4410);
  llvm::AGXTOCOptimizer::collectOptimizableBlocks(v15, v154, &v193, (uint64_t)&v189, *(void *)(v15 + 248), *(void *)(v15 + 544));
  uint64_t v156 = *(void **)(v154 + 320);
  int v157 = *(void **)(v154 + 328);
  int v18 = *(_DWORD *)(*(void *)(a1 + 248) + 44);
  uint64_t v185 = v188;
  int v187 = 6;
  if ((v18 + 63) >= 0x1C0)
  {
    unsigned int v186 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if ((v18 + 63) >= 0x40) {
    bzero(v188, 8 * ((v18 + 63) >> 6));
  }
  unsigned int v19 = v157;
  uint64_t v20 = v154 + 320;
  unsigned int v186 = (v18 + 63) >> 6;
  v188[12] = v18;
  unsigned int v21 = v193;
  uint64_t v22 = &v193[80 * v194];
  int v181 = 0;
  if (!*(unsigned char *)(v4 + 285)) {
    goto LABEL_253;
  }
  if (v157 != (void *)v20)
  {
    signed int v167 = 0;
    v155 = &v193[80 * v194];
    while (1)
    {
      uint64_t v23 = v22;
      if (v21 != v22)
      {
        while (*(void **)v21 != v19)
        {
          v21 += 80;
          if (v21 == v22)
          {
            uint64_t v23 = v22;
            goto LABEL_29;
          }
        }
        uint64_t v23 = v21;
      }
LABEL_29:
      uint64_t v24 = (void **)(v23 + 8);
      uint64_t v158 = v23;
      if (v23 == v22) {
        uint64_t v24 = &v185;
      }
      int v165 = v24;
      int v25 = *(_DWORD *)(*(void *)(v15 + 248) + 44);
      uint64_t v200 = v203;
      int v202 = 6;
      if ((v25 + 8255) >= 0x1C0)
      {
        unsigned int v201 = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if ((v25 + 8255) >= 0x40) {
        bzero(v203, 8 * ((v25 + 8255) >> 6));
      }
      unsigned int v201 = (v25 + 8255) >> 6;
      int v204 = v25 + 0x2000;
      unint64_t v196 = v198;
      uint64_t v197 = 0x600000000;
      int v199 = 0;
      if (((*(unsigned __int16 *)(*(void *)v19[4] + 18) >> 4) & 0x3FFu) - 103 <= 1)
      {
        int v25 = *(_DWORD *)(*(void *)(v15 + 248) + 44);
        int v199 = v25;
        unsigned int v26 = v25 + 63;
        if ((v25 + 63) < 0x40)
        {
          unsigned int v28 = 0;
        }
        else
        {
          uint64_t v27 = v26 >> 6;
          if (v26 >= 0x1C0) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          bzero(v198, 8 * v27);
          unsigned int v28 = v27;
          LODWORD(v197) = v27;
        }
        if ((v25 & 0x3F) != 0) {
          v198[v28 - 1] &= ~(-1 << (v25 & 0x3F));
        }
        sub_1CB911170(v15, (uint64_t *)&v196, *(unsigned __int16 **)(*(void *)(v19[4] + 328) + 152), *(unsigned __int16 **)(*(void *)(v19[4] + 328) + 160), 1);
      }
      unsigned int v29 = v19 + 6;
      uint64_t v159 = v19;
      uint64_t v30 = v19[7];
      signed int v179 = v167;
      if ((void *)v30 != v19 + 6)
      {
        signed int v179 = v167;
        int v162 = v19 + 6;
        do
        {
          unsigned int v31 = *(unsigned __int16 **)(v30 + 16);
          int v32 = *v31;
          LODWORD(v16) = 1541;
          BOOL v33 = (v32 - 9) > 0x3C || ((1 << (v32 - 9)) & 0x1000000000000605) == 0;
          BOOL v34 = !v33 || v32 == 0;
          if (!v34 && (v31[4] & 0x10) == 0)
          {
            unint64_t v35 = *((unsigned __int8 *)v31 + 4);
            unint64_t v177 = *(unsigned int *)(v30 + 40);
            int v173 = (int)v22;
            if (v177 > v35)
            {
              while (1)
              {
                uint64_t v36 = *(void *)(v30 + 32);
                unint64_t v37 = v36 + 32 * v35;
                if (sub_1CB911228((unsigned int *)v37)) {
                  break;
                }
                unsigned int v50 = *(_DWORD *)v37;
                if ((*(_DWORD *)v37 & 0x20000FF) == 0)
                {
                  unint64_t v37 = *(unsigned int *)(v36 + 32 * v35 + 4);
                  if ((v37 | 2) != 2 && (v50 & 0x1000000) == 0)
                  {
                    unsigned int v51 = v160;
                    if ((v37 - 1) > 0x306 || ((byte_1CDD6D6C8[v37 >> 3] >> (v37 & 7)) & 1) == 0)
                    {
                      uint64_t v38 = v15;
                      uint64_t v39 = *(void *)(v15 + 248);
                      unsigned int v42 = *(_DWORD *)(v39 + 16);
                      if (v199)
                      {
                        unsigned int v52 = v37 - v42;
                        if (v37 >= v42)
                        {
                          LODWORD(v20) = 0;
                          unsigned __int16 v58 = 0;
                          unint64_t v56 = 0;
                          unsigned int v51 = (v52 >> 12) & 0xFFFFE;
                          int v161 = v52 & 0x1FFF;
                        }
                        else
                        {
                          unint64_t v53 = *(unsigned int *)(*(void *)(v39 + 8) + 24 * v37 + 16);
                          __int16 v54 = v53 & 0xF;
                          int v55 = (_WORD *)(*(void *)(v39 + 56) + ((v53 >> 3) & 0x1FFFFFFE));
                          __int16 v57 = *v55;
                          unint64_t v56 = v55 + 1;
                          unsigned __int16 v58 = v57 + v54 * v37;
                        }
                        BOOL v65 = v20 < v51 >> 1;
                        if (v37 < v42) {
                          BOOL v65 = v56 != 0;
                        }
                        unsigned int v160 = v51;
                        if (v65)
                        {
                          while (1)
                          {
                            if (v37 >= v42)
                            {
                              if ((v196[(v20 + v161 + *(_DWORD *)(v39 + 44)) >> 6] >> (v20 + v161 + *(unsigned char *)(v39 + 44))))
                              {
LABEL_109:
                                uint64_t v15 = v38;
                                goto LABEL_92;
                              }
                              LODWORD(v20) = v20 + 1;
                            }
                            else
                            {
                              if ((v196[v58 >> 6] >> v58)) {
                                goto LABEL_109;
                              }
                              int v66 = *v56++;
                              v58 += v66;
                              if (!v66) {
                                unint64_t v56 = 0;
                              }
                            }
                            BOOL v67 = v20 < v51 >> 1;
                            if (v37 < v42) {
                              BOOL v67 = v56 != 0;
                            }
                            if (!v67) {
                              goto LABEL_61;
                            }
                          }
                        }
                      }
                      goto LABEL_61;
                    }
                  }
                }
LABEL_92:
                if (++v35 >= v177) {
                  goto LABEL_110;
                }
              }
              uint64_t v38 = v15;
              uint64_t v39 = *(void *)(v15 + 248);
              if (*(_DWORD *)v37) {
                int v40 = (*(_DWORD *)v37 >> 8) & 0xFFF;
              }
              else {
                int v40 = 0;
              }
              if (v40 == 8) {
                int v41 = 0x4000;
              }
              else {
                int v41 = (v40 << 12) & 0xFFE000;
              }
              unsigned int v42 = *(_DWORD *)(v39 + 16);
              LODWORD(v37) = (v41 | *(_DWORD *)(v37 + 4)) + v42;
LABEL_61:
              int v175 = v20;
              unsigned int v43 = v37 - v42;
              if (v37 >= v42)
              {
                LODWORD(v19) = 0;
                unsigned __int16 v48 = 0;
                uint64_t v46 = 0;
                unsigned int v49 = (v43 >> 12) & 0xFFFFE;
                int v25 = v43 & 0x1FFF;
              }
              else
              {
                unint64_t v44 = *(unsigned int *)(*(void *)(v39 + 8) + 24 * v37 + 16);
                uint64_t v45 = (_WORD *)(*(void *)(v39 + 56) + ((v44 >> 3) & 0x1FFFFFFE));
                __int16 v47 = *v45;
                uint64_t v46 = v45 + 1;
                unsigned __int16 v48 = v47 + (v44 & 0xF) * v37;
                unsigned int v49 = v169;
              }
              BOOL v59 = v19 < v49 >> 1;
              if (v37 < v42) {
                BOOL v59 = v46 != 0;
              }
              unsigned int v169 = v49;
              if (v59)
              {
                unsigned int v60 = v49 >> 1;
                do
                {
                  if (v37 >= v42) {
                    unsigned int v61 = v19 + v25 + *(_DWORD *)(v39 + 44);
                  }
                  else {
                    unsigned int v61 = v48;
                  }
                  *(void *)&v200[8 * (v61 >> 6)] |= 1 << v61;
                  if (v37 >= v42) {
                    unsigned int v62 = v19 + v25 + *(_DWORD *)(v39 + 44);
                  }
                  else {
                    unsigned int v62 = v48;
                  }
                  unsigned int v182 = v62;
                  signed int v183 = v179;
                  char v184 = 0;
                  sub_1CB9112B4((uint64_t)v180, &v182);
                  if (v37 >= v42)
                  {
                    LODWORD(v19) = v19 + 1;
                  }
                  else
                  {
                    int v63 = *v46++;
                    v48 += v63;
                    if (!v63) {
                      uint64_t v46 = 0;
                    }
                  }
                  BOOL v64 = v19 < v60;
                  if (v37 < v42) {
                    BOOL v64 = v46 != 0;
                  }
                }
                while (v64);
                unint64_t v177 = *(unsigned int *)(v30 + 40);
                uint64_t v15 = v166;
                LODWORD(v20) = v175;
                LODWORD(v22) = v173;
              }
              else
              {
                uint64_t v15 = v38;
                LODWORD(v20) = v175;
              }
              goto LABEL_92;
            }
LABEL_110:
            int v171 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v15 + 256) + 768))(*(void *)(v15 + 256), v30);
            uint64_t v68 = *(_DWORD **)(v30 + 32);
            uint64_t v69 = *(void *)(v30 + 16);
            int v70 = *(unsigned __int8 *)(v69 + 4);
            if ((*(unsigned char *)(v69 + 8) & 2) == 0 || (int v98 = *(_DWORD *)(v30 + 40), v98 == v70))
            {
              int v71 = v70;
            }
            else
            {
              int v99 = v98 - 1;
              int v71 = v70;
              do
              {
                LODWORD(v16) = v68[8 * v70];
                LODWORD(v17) = 0x1000000;
                if ((v16 & 0x10000FF) != 0x1000000) {
                  break;
                }
                v71 += (v16 & 0x2000000) == 0;
                if (v99 == v70) {
                  break;
                }
                ++v70;
              }
              while ((v16 & 0x2000000) == 0);
            }
            if (v71)
            {
              int v72 = &v68[8 * v71];
              int v176 = v20;
              v168 = v72;
              do
              {
                if ((*v68 & 0x20000FF) == 0)
                {
                  unint64_t v73 = v68[1];
                  if ((v73 | 2) != 2
                    && (*v68 & 0x1000000) != 0
                    && ((v73 - 1) > 0x306 || ((byte_1CDD6D6C8[v73 >> 3] >> (v73 & 7)) & 1) == 0))
                  {
                    uint64_t v74 = *(void *)(v15 + 248);
                    unsigned int v75 = *(_DWORD *)(v74 + 16);
                    uint64_t v174 = v74;
                    if (v73 >= v75)
                    {
                      LODWORD(v22) = 0;
                      unsigned __int16 v178 = 0;
                      uint64_t v78 = 0;
                      unsigned int v80 = ((v73 - v75) >> 12) & 0xFFFFE;
                      int v172 = (v73 - v75) & 0x1FFF;
                    }
                    else
                    {
                      unint64_t v76 = *(unsigned int *)(*(void *)(v74 + 8) + 24 * v73 + 16);
                      uint64_t v77 = (_WORD *)(*(void *)(v74 + 56) + ((v76 >> 3) & 0x1FFFFFFE));
                      __int16 v79 = *v77;
                      uint64_t v78 = v77 + 1;
                      unsigned __int16 v178 = v79 + (v76 & 0xF) * v73;
                      unsigned int v80 = v163;
                    }
                    BOOL v81 = v22 < v80 >> 1;
                    if (v75 > v73) {
                      BOOL v81 = v78 != 0;
                    }
                    unsigned int v163 = v80;
                    if (v81)
                    {
                      unsigned int v170 = v80 >> 1;
                      do
                      {
                        if (v171)
                        {
                          if (v73 >= v75) {
                            unsigned int v82 = v22 + v172 + *(_DWORD *)(v174 + 44);
                          }
                          else {
                            unsigned int v82 = v178;
                          }
                          unsigned int v182 = v82;
                          signed int v183 = v179;
                          char v184 = 0;
                          sub_1CB9112B4((uint64_t)v180, &v182);
                        }
                        if (v73 >= v75) {
                          unsigned int v83 = v22 + v172 + *(_DWORD *)(v174 + 44);
                        }
                        else {
                          unsigned int v83 = v178;
                        }
                        if (v180 != sub_1CB911460(v180, v83) || v84 != 0xFFFFFFFFLL)
                        {
                          uint64_t v87 = sub_1CB911460(v180, v85);
                          unsigned int v89 = *(_DWORD *)(*v87 + 20 * v88 + 12);
                          if (*(_DWORD *)(*v180 + 20 * v89 + 4) >= v167)
                          {
                            if (v73 >= v75) {
                              unsigned int v90 = v22 + v172 + *(_DWORD *)(v174 + 44);
                            }
                            else {
                              unsigned int v90 = v178;
                            }
                            if ((*((void *)*v165 + (v90 >> 6)) >> v90))
                            {
                              if (v73 >= v75) {
                                unsigned int v91 = v22 + v172 + *(_DWORD *)(v174 + 44);
                              }
                              else {
                                unsigned int v91 = v178;
                              }
                              *(void *)&v200[8 * (v91 >> 6)] |= 1 << v91;
                              if (v73 >= v75) {
                                unsigned int v93 = v22 + v172 + *(_DWORD *)(v174 + 44);
                              }
                              else {
                                unsigned int v93 = v178;
                              }
                              unsigned int v182 = v93;
                              signed int v183 = v179;
                              char v184 = 0;
                              sub_1CB9112B4((uint64_t)v180, &v182);
                              if (v73 >= v75) {
                                unsigned int v94 = v22 + v172 + *(_DWORD *)(v174 + 44);
                              }
                              else {
                                unsigned int v94 = v178;
                              }
                              int v95 = *(_DWORD *)(*v180 + 20 * v89 + 4);
                              unsigned int v182 = v94;
                              signed int v183 = v95;
                              char v184 = 1;
                              uint64_t v92 = &v182;
                            }
                            else
                            {
                              uint64_t v92 = (unsigned int *)(*v180 + 20 * v89);
                            }
                            sub_1CB9112B4(v164, v92);
                          }
                        }
                        if (v73 >= v75)
                        {
                          LODWORD(v22) = v22 + 1;
                        }
                        else
                        {
                          int v96 = *v78++;
                          v178 += v96;
                          if (!v96) {
                            uint64_t v78 = 0;
                          }
                        }
                        BOOL v97 = v22 < v170;
                        if (v73 < v75) {
                          BOOL v97 = v78 != 0;
                        }
                      }
                      while (v97);
                    }
                    uint64_t v15 = v166;
                    LODWORD(v20) = v176;
                  }
                  int v72 = v168;
                }
                v68 += 8;
              }
              while (v68 != v72);
              ++v179;
              unsigned int v29 = v162;
              if (!v30)
              {
LABEL_173:
                while ((*(_WORD *)(v30 + 44) & 8) != 0)
                  uint64_t v30 = *(void *)(v30 + 8);
                goto LABEL_174;
              }
            }
            else
            {
              ++v179;
              unsigned int v29 = v162;
            }
          }
          if ((*(unsigned char *)v30 & 4) == 0) {
            goto LABEL_173;
          }
LABEL_174:
          uint64_t v30 = *(void *)(v30 + 8);
        }
        while ((void *)v30 != v29);
      }
      int v100 = -1;
      uint64_t v101 = v29;
      uint64_t v20 = v154 + 320;
      do
      {
        uint64_t v101 = (void *)v101[1];
        ++v100;
      }
      while (v101 != v29);
      uint64_t v22 = v155;
      if (v100)
      {
        unint64_t v102 = *v29 & 0xFFFFFFFFFFFFFFF8;
        if (!v102 || (*(unsigned char *)v102 & 4) == 0)
        {
          while ((*(_WORD *)(v102 + 44) & 4) != 0)
            unint64_t v102 = *(void *)v102 & 0xFFFFFFFFFFFFFFF8;
        }
        if ((*(unsigned char *)(*(void *)(v102 + 16) + 8) & 0x20) != 0) {
          break;
        }
      }
      if ((**(unsigned char **)(**(void **)(v15 + 544) + 360) & 4) != 0)
      {
        uint64_t v103 = (uint64_t *)v159[11];
        uint64_t v104 = (uint64_t *)v159[12];
        while (v103 != v104)
        {
          uint64_t v105 = *v103++;
          sub_1CB911170(v15, (uint64_t *)&v200, *(unsigned __int16 **)(v105 + 152), *(unsigned __int16 **)(v105 + 160), 0);
        }
        goto LABEL_217;
      }
LABEL_245:
      if (v196 != v198) {
        free(v196);
      }
      if (v200 != v203) {
        free(v200);
      }
      unsigned int v19 = (void *)v159[1];
      signed int v167 = v179;
      unsigned int v21 = v158;
      if (v19 == (void *)(v154 + 320))
      {
        unsigned int v21 = v193;
        unsigned int v19 = *(void **)(v154 + 328);
LABEL_253:
        int v181 = 0;
        while (v19 != (void *)v20)
        {
          while (1)
          {
            if (v21 == v22)
            {
              BOOL v150 = v19 != v157 && v19 != v156;
              goto LABEL_272;
            }
            if (*(void **)v21 == v19) {
              break;
            }
            v21 += 80;
          }
          BOOL v150 = v19 != v157 && v19 != v156;
          if (v21 != v22)
          {
            sub_1CB90F544(v15, *(void **)v21, (uint64_t *)v21 + 1, &v181, 1, v150);
            goto LABEL_273;
          }
LABEL_272:
          sub_1CB90F544(v15, v19, (uint64_t *)&v185, &v181, 0, v150);
          unsigned int v21 = v22;
LABEL_273:
          unsigned int v19 = (void *)v19[1];
        }
        goto LABEL_274;
      }
    }
    uint64_t v106 = *(unsigned int *)(v102 + 40);
    if (v106)
    {
      uint64_t v107 = *(void *)(v102 + 32);
      uint64_t v108 = v107 + 32 * v106;
      uint64_t v109 = v200;
      do
      {
        if (!*(unsigned char *)v107)
        {
          unsigned int v110 = *(_DWORD *)(v107 + 4);
          if (v110 != 2)
          {
            uint64_t v111 = *(void *)(v15 + 248);
            unsigned int v112 = *(_DWORD *)(v111 + 16);
            if (v110 >= v112)
            {
              unint64_t v116 = 0;
              unsigned __int16 v118 = 0;
              LODWORD(v16) = 0;
              LODWORD(v29) = ((v110 - v112) >> 12) & 0xFFFFE;
              LODWORD(v17) = (v110 - v112) & 0x1FFF;
            }
            else
            {
              unint64_t v113 = *(unsigned int *)(*(void *)(v111 + 8) + 24 * v110 + 16);
              __int16 v114 = v113 & 0xF;
              int v115 = (_WORD *)(*(void *)(v111 + 56) + ((v113 >> 3) & 0x1FFFFFFE));
              __int16 v117 = *v115;
              unint64_t v116 = v115 + 1;
              unsigned __int16 v118 = v117 + v114 * v110;
            }
            BOOL v119 = v16 < v29 >> 1;
            if (v112 > v110) {
              BOOL v119 = v116 != 0;
            }
            if (v119)
            {
              do
              {
                if (v110 >= v112) {
                  unsigned int v120 = v16 + v17 + *(_DWORD *)(v111 + 44);
                }
                else {
                  unsigned int v120 = v118;
                }
                v109[v120 >> 6] &= ~(1 << v120);
                if (v110 >= v112)
                {
                  LODWORD(v16) = v16 + 1;
                }
                else
                {
                  int v121 = *v116++;
                  v118 += v121;
                  if (!v121) {
                    unint64_t v116 = 0;
                  }
                }
                BOOL v122 = v16 < v29 >> 1;
                if (v110 < v112) {
                  BOOL v122 = v116 != 0;
                }
              }
              while (v122);
            }
          }
        }
        v107 += 32;
      }
      while (v107 != v108);
    }
LABEL_217:
    int v123 = v204;
    if (v204)
    {
      uint64_t v124 = 0;
      BOOL v125 = (uint64_t *)v200;
      uint64_t v16 = (v204 - 1) & 0xFFFFFFC0;
      while (1)
      {
        uint64_t v127 = *v125++;
        uint64_t v126 = v127;
        unint64_t v128 = v16 == v124 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v204 : -1;
        unint64_t v17 = v128 & v126;
        if (v17) {
          break;
        }
        v124 += 64;
        if (v16 + 64 == v124) {
          goto LABEL_245;
        }
      }
      signed int v129 = __clz(__rbit64(v17)) + v124;
      if ((v129 & 0x80000000) == 0)
      {
        do
        {
          if (v180 != sub_1CB911460(v180, v129) || v130 != 0xFFFFFFFFLL)
          {
            uint64_t v132 = sub_1CB911460(v180, v131);
            uint64_t v134 = (unsigned int *)(*v180 + 20 * *(unsigned int *)(*v132 + 20 * v133 + 12));
            if ((int)v134[1] >= v167)
            {
              sub_1CB9112B4(v164, v134);
              int v123 = v204;
            }
          }
          unsigned int v135 = v129 + 1;
          if (v129 + 1 == v123) {
            break;
          }
          unsigned int v136 = v135 >> 6;
          unsigned int v137 = v123 - 1;
          if (v135 >> 6 > (v123 - 1) >> 6) {
            break;
          }
          uint64_t v138 = 0;
          uint64_t v139 = v137 >> 6;
          int v140 = v135 & 0x3F;
          BOOL v33 = v140 == 0;
          uint64_t v16 = -1;
          unint64_t v141 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v140;
          unint64_t v142 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v137;
          if (!v33) {
            uint64_t v16 = ~v141;
          }
          int v143 = -64 * v136;
          uint64_t v144 = v139 - v136;
          unint64_t v17 = v144 + 1;
          int v145 = &v200[8 * v136];
          while (1)
          {
            uint64_t v146 = v138 ? -1 : v16;
            unint64_t v147 = v144 == v138 ? v142 : -1;
            unint64_t v148 = v146 & v147 & *(void *)&v145[8 * v138];
            if (v148) {
              break;
            }
            v143 -= 64;
            if (v17 == ++v138) {
              goto LABEL_245;
            }
          }
          signed int v129 = __clz(__rbit64(v148)) - v143;
        }
        while (v129 >= 0);
      }
    }
    goto LABEL_245;
  }
LABEL_274:
  *(_DWORD *)(v15 + 1408) = 0;
  *(_DWORD *)(v15 + 1352) = 0;
  if (v185 != v188) {
    free(v185);
  }
  if (v189 != v192) {
    free(v189);
  }
  sub_1CB913F50(&v193);
  return 0;
}

void *sub_1CB90F4BC(void *result, unsigned int a2)
{
  unsigned int v2 = *((_DWORD *)result + 46);
  if (v2 < a2 || v2 >> 2 > a2)
  {
    unsigned int v5 = result;
    free(*((void **)result + 22));
    BOOL result = malloc_type_calloc(a2, 2uLL, 0x6D9A4F0CuLL);
    if (!result && (a2 || (BOOL result = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v5[22] = result;
    *((_DWORD *)v5 + 46) = a2;
  }
  return result;
}

void sub_1CB90F544(uint64_t a1, void *a2, uint64_t *a3, int *a4, int a5, int a6)
{
  uint64_t v7 = a2;
  uint64_t v355 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a2[4];
  v324 = (unsigned char *)(*(uint64_t (**)(void, void))(**(void **)(v8 + 8) + 16))(*(void *)(v8 + 8), *(void *)v8);
  v308 = v7;
  uint64_t v10 = v7[7];
  v328 = v7 + 6;
  if ((void *)v10 == v7 + 6) {
    return;
  }
  v340 = (unsigned int *)(a1 + 552);
  int v325 = v324[301];
  uint64_t v11 = *(void *)(v8 + 40);
  v335 = *(void **)(*(void *)(v8 + 24) + 160);
  uint64_t v336 = v11;
  do
  {
    if (!v10 || (uint64_t v12 = v10, (*(unsigned char *)v10 & 4) == 0))
    {
      uint64_t v12 = v10;
      if ((*(_WORD *)(v10 + 44) & 8) != 0)
      {
        uint64_t v12 = v10;
        do
          uint64_t v12 = *(void *)(v12 + 8);
        while ((*(_WORD *)(v12 + 44) & 8) != 0);
      }
    }
    uint64_t v13 = *(void *)(v12 + 8);
    int v14 = *(unsigned __int16 **)(v10 + 16);
    int v15 = *v14;
    BOOL v17 = (v15 - 9) <= 0x3C && ((1 << (v15 - 9)) & 0x1000000000000605) != 0
       || v15 == 0;
    if (v17 || (v14[4] & 0x10) != 0) {
      goto LABEL_414;
    }
    uint64_t v18 = v9;
    uint64_t v19 = *((void *)v14 + 2);
    int v322 = *v14;
    int v323 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 256) + 768))(*(void *)(a1 + 256), v10);
    uint64_t v321 = v13;
    v312 = v14;
    if (!v325)
    {
      uint64_t v9 = v18;
      goto LABEL_31;
    }
    if ((v19 & 1) == 0)
    {
      uint64_t v20 = *(unsigned int *)(a1 + 1352);
      if (v20) {
        bzero(*(void **)(a1 + 1344), 8 * v20);
      }
    }
    uint64_t v9 = v18;
    if ((a6 | v323) == 1)
    {
      if (*((unsigned char *)v14 + 4))
      {
        unsigned int v21 = *(_DWORD **)(v10 + 32);
        if ((*v21 & 0x10000FF) == 0x1000000)
        {
          unint64_t v22 = v21[1];
          if (v22 - 1) <= 0x497E && ((byte_1CDD76C32[v22 >> 3] >> (v22 & 7)))
          {
            uint64_t v23 = *(void *)(a1 + 248);
            uint64_t v24 = *(void *)(v23 + 8);
            uint64_t v25 = *(void *)(v23 + 56);
            uint64_t v26 = *(unsigned int *)(v24 + 24 * v22 + 4);
            int v27 = *(unsigned __int16 *)(v25 + 2 * v26);
            unsigned int v317 = v6;
            if (*(_WORD *)(v25 + 2 * v26))
            {
              LOWORD(v27) = v27 + v22;
              unsigned int v28 = (_WORD *)(*(void *)(v23 + 88) + 2 * *(unsigned int *)(v24 + 24 * v22 + 12));
              unsigned int v29 = (unsigned __int16 *)(v25 + 2 * v26 + 2);
              uint64_t v30 = v29;
              unsigned int v31 = v28;
              unsigned __int16 v32 = v27;
              while (*v31 != 33)
              {
                int v33 = *v30++;
                v32 += v33;
                ++v31;
                if (!v33)
                {
                  unsigned int v34 = 0;
                  goto LABEL_318;
                }
              }
              unsigned int v34 = v32;
LABEL_318:
              LODWORD(v347) = v34;
              while (*v28 != 34)
              {
                int v202 = *v29++;
                LOWORD(v27) = v202 + v27;
                ++v28;
                if (!v202)
                {
                  int v27 = 0;
                  goto LABEL_323;
                }
              }
              int v27 = (unsigned __int16)v27;
            }
            else
            {
              unsigned int v34 = 0;
              LODWORD(v347) = 0;
            }
LABEL_323:
            uint64_t v203 = 0;
            HIDWORD(v347) = v27;
            __int16 v346 = 0;
            char v204 = 1;
            unsigned int v205 = *(_DWORD *)(v23 + 16);
            do
            {
              char v206 = v204;
              unsigned int v207 = *((_DWORD *)&v347 + v203);
              if (v207 >= v205)
              {
                uint64_t v8 = 0;
                unsigned __int16 v213 = 0;
                v211 = 0;
                unsigned int v214 = ((v207 - v205) >> 12) & 0xFFFFE;
                int v329 = (v207 - v205) & 0x1FFF;
              }
              else
              {
                unint64_t v208 = *(unsigned int *)(v24 + 24 * v207 + 16);
                __int16 v209 = v208 & 0xF;
                v210 = (_WORD *)(v25 + ((v208 >> 3) & 0x1FFFFFFE));
                __int16 v212 = *v210;
                v211 = v210 + 1;
                unsigned __int16 v213 = v212 + v209 * v207;
                unsigned int v214 = v314;
              }
              BOOL v215 = v8 < v214 >> 1;
              if (v205 > v207) {
                BOOL v215 = v211 != 0;
              }
              unsigned int v314 = v214;
              if (v215)
              {
                unsigned int v216 = v214 >> 1;
                uint64_t v217 = *(void *)(a1 + 1344);
                do
                {
                  if (v207 >= v205)
                  {
                    if ((*(void *)(v217 + 8 * ((v8 + v329 + *(_DWORD *)(v23 + 44)) >> 6)) >> (v8 + v329 + *(unsigned char *)(v23 + 44))))
                    {
LABEL_342:
                      *((unsigned char *)&v346 + v203) = 1;
                      break;
                    }
                    uint64_t v8 = (v8 + 1);
                  }
                  else
                  {
                    if ((*(void *)(v217 + 8 * (v213 >> 6)) >> v213)) {
                      goto LABEL_342;
                    }
                    int v218 = *v211++;
                    v213 += v218;
                    if (!v218) {
                      v211 = 0;
                    }
                  }
                  BOOL v219 = v8 < v216;
                  if (v207 < v205) {
                    BOOL v219 = v211 != 0;
                  }
                }
                while (v219);
              }
              char v204 = 0;
              uint64_t v203 = 1;
            }
            while ((v206 & 1) != 0);
            if ((_BYTE)v346)
            {
              uint64_t v9 = v18;
              if (HIBYTE(v346))
              {
                unsigned int v220 = v34 - v205;
                int v221 = v307;
                if (v34 >= v205)
                {
                  LODWORD(v7) = 0;
                  unsigned __int16 v226 = 0;
                  uint64_t v224 = 0;
                  LODWORD(v9) = (v220 >> 12) & 0xFFFFE;
                  int v221 = v220 & 0x1FFF;
                }
                else
                {
                  unint64_t v222 = *(unsigned int *)(v24 + 24 * v34 + 16);
                  uint64_t v223 = (_WORD *)(v25 + ((v222 >> 3) & 0x1FFFFFFE));
                  __int16 v225 = *v223;
                  uint64_t v224 = v223 + 1;
                  unsigned __int16 v226 = v225 + (v222 & 0xF) * v34;
                }
                BOOL v233 = v7 < v9 >> 1;
                if (v34 < v205) {
                  BOOL v233 = v224 != 0;
                }
                unsigned int v339 = v9;
                if (v233)
                {
                  unsigned int v234 = v9 >> 1;
                  do
                  {
                    if (v34 >= v205) {
                      unsigned int v235 = v7 + v221 + *(_DWORD *)(v23 + 44);
                    }
                    else {
                      unsigned int v235 = v226;
                    }
                    uint64_t v236 = v335[5];
                    unsigned __int16 v237 = *(_WORD *)(v236 + 4 * v235);
                    if (v237)
                    {
                      unsigned __int16 v238 = *(_WORD *)(v236 + 4 * v235 + 2);
                      do
                      {
                        unsigned __int16 v239 = v237;
                        unsigned __int16 v237 = v238;
                        uint64_t v240 = v335[6];
                        if (v240)
                        {
                          v241 = (unsigned __int16 *)(v240 + 2 * *(unsigned int *)(*v335 + 24 * v239 + 8));
                          do
                          {
                            uint64_t v242 = *(unsigned int **)(*(void *)(v11 + 272) + 8 * v239);
                            if (v242)
                            {
                              while (1)
                              {
                                unsigned int v243 = *v242;
                                if ((*v242 & 0x1000000) == 0) {
                                  break;
                                }
                                uint64_t v242 = (unsigned int *)*((void *)v242 + 3);
                                if (!v242) {
                                  goto LABEL_384;
                                }
                              }
LABEL_386:
                              *uint64_t v242 = v243 & 0xFBFFFFFF;
                              while (1)
                              {
                                uint64_t v242 = (unsigned int *)*((void *)v242 + 3);
                                if (!v242) {
                                  break;
                                }
                                unsigned int v243 = *v242;
                                if ((*v242 & 0x1000000) == 0) {
                                  goto LABEL_386;
                                }
                              }
                            }
LABEL_384:
                            int v244 = *v241++;
                            v239 += v244;
                          }
                          while (v244);
                        }
                        unsigned __int16 v238 = 0;
                      }
                      while (v237);
                    }
                    if (v34 >= v205)
                    {
                      LODWORD(v7) = v7 + 1;
                    }
                    else
                    {
                      int v245 = *v224++;
                      v226 += v245;
                      if (!v245) {
                        uint64_t v224 = 0;
                      }
                    }
                    BOOL v246 = v7 < v234;
                    if (v34 < v205) {
                      BOOL v246 = v224 != 0;
                    }
                  }
                  while (v246);
                }
                char v247 = v19;
                int v248 = (int)v7;
                uint64_t v19 = v8;
                long long v249 = v308;
                uint64_t v251 = (char *)v308[20];
                unint64_t v250 = v308[21];
                if ((unint64_t)v251 >= v250)
                {
                  v253 = (char *)v308[19];
                  uint64_t v254 = (v251 - v253) >> 4;
                  unint64_t v255 = v254 + 1;
                  if ((unint64_t)(v254 + 1) >> 60) {
                    abort();
                  }
                  int v256 = v221;
                  uint64_t v257 = v250 - (void)v253;
                  if (v257 >> 3 > v255) {
                    unint64_t v255 = v257 >> 3;
                  }
                  if ((unint64_t)v257 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v258 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v258 = v255;
                  }
                  if (v258)
                  {
                    if (v258 >> 60) {
                      sub_1CB833614();
                    }
                    uint64_t v259 = (char *)operator new(16 * v258);
                  }
                  else
                  {
                    uint64_t v259 = 0;
                  }
                  v276 = &v259[16 * v254];
                  *(_WORD *)v276 = v34;
                  *((void *)v276 + 1) = -1;
                  v277 = v276;
                  if (v251 == v253)
                  {
                    v278 = v308;
                  }
                  else
                  {
                    do
                    {
                      *((_OWORD *)v277 - 1) = *((_OWORD *)v251 - 1);
                      v277 -= 16;
                      v251 -= 16;
                    }
                    while (v251 != v253);
                    v278 = v308;
                    uint64_t v251 = (char *)v308[19];
                  }
                  v252 = v276 + 16;
                  v278[19] = v277;
                  v278[20] = v276 + 16;
                  v278[21] = &v259[16 * v258];
                  if (v251)
                  {
                    operator delete(v251);
                    long long v249 = v308;
                  }
                  else
                  {
                    long long v249 = v278;
                  }
                  int v221 = v256;
                }
                else
                {
                  *(_WORD *)uint64_t v251 = v34;
                  *((void *)v251 + 1) = -1;
                  v252 = v251 + 16;
                }
                v249[20] = v252;
                uint64_t v279 = *(void *)(*(void *)(a1 + 256) + 8);
                v280 = (llvm::MachineFunction *)v249[4];
                v281 = *(unsigned __int8 **)(v10 + 56);
                v343 = v281;
                if (v281) {
                  llvm::MetadataTracking::track((uint64_t)&v343, v281, 2);
                }
                v282 = llvm::MachineFunction::CreateMachineInstr(v280, v279 + 66288, &v343, 0);
                if (!v343) {
                  goto LABEL_435;
                }
                int v300 = *v343;
                if ((v300 - 4) > 0x1E)
                {
                  if ((v300 - 3) >= 0xFFFFFFFE) {
                    v303 = v343;
                  }
                  else {
                    v303 = 0;
                  }
                  if ((v300 - 3) < 0xFFFFFFFE)
                  {
                    if (v300 == 3) {
                      *((void *)v343 + 1) = 0;
                    }
                    goto LABEL_435;
                  }
                  unint64_t v302 = (unint64_t)(v303 + 8);
                }
                else
                {
                  if ((v343[1] & 0x7F) != 2 && !*((_DWORD *)v343 + 3)) {
                    goto LABEL_435;
                  }
                  uint64_t v301 = *((void *)v343 + 2);
                  if ((v301 & 4) == 0) {
                    goto LABEL_435;
                  }
                  unint64_t v302 = v301 & 0xFFFFFFFFFFFFFFF8;
                  if (!v302) {
                    goto LABEL_435;
                  }
                }
                *(void *)&long long v349 = &v343;
                sub_1CC5FA668(v302 + 16, &v349);
LABEL_435:
                uint64_t v283 = v308[5];
                *((void *)v282 + 3) = v283;
                uint64_t v284 = *(void *)(v283 + 32);
                uint64_t v285 = *((unsigned int *)v282 + 10);
                if (v285)
                {
                  uint64_t v288 = *((void *)v282 + 4);
                  uint64_t v289 = *(void *)(v284 + 40);
                  uint64_t v290 = 32 * v285;
                  do
                  {
                    if (!*(unsigned char *)v288)
                    {
                      uint64_t v291 = *(unsigned int *)(v288 + 4);
                      if ((int)v291 >= 0) {
                        v292 = (uint64_t *)(*(void *)(v289 + 272) + 8 * v291);
                      }
                      else {
                        v292 = (uint64_t *)(*(void *)(v289 + 24) + 16 * (v291 & 0x7FFFFFFF) + 8);
                      }
                      uint64_t v293 = *v292;
                      if (*v292)
                      {
                        uint64_t v294 = *(void *)(v293 + 16);
                        *(void *)(v293 + 16) = v288;
                        *(void *)(v288 + 16) = v294;
                        if (*(unsigned char *)(v288 + 3))
                        {
                          *(void *)(v288 + 24) = v293;
                        }
                        else
                        {
                          *(void *)(v288 + 24) = 0;
                          v292 = (uint64_t *)(v294 + 24);
                        }
                      }
                      else
                      {
                        *(void *)(v288 + 16) = v288;
                        *(void *)(v288 + 24) = 0;
                      }
                      uint64_t *v292 = v288;
                    }
                    v288 += 32;
                    v290 -= 32;
                  }
                  while (v290);
                }
                int v307 = v221;
                uint64_t v286 = *(void *)(v284 + 728);
                if (v286) {
                  (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v286 + 24))(v286, v282);
                }
                unint64_t v287 = *(void *)v10 & 0xFFFFFFFFFFFFFFF8;
                *(void *)v282 = v287 | *(void *)v282 & 7;
                *((void *)v282 + 1) = v10;
                *(void *)(v287 + 8) = v282;
                *(void *)uint64_t v10 = *(void *)v10 & 7 | (unint64_t)v282;
                *((void *)&v349 + 1) = 0;
                long long v350 = 0uLL;
                LODWORD(v349) = 0x1000000;
                DWORD1(v349) = v34;
                llvm::MachineInstr::addOperand(v282, v280, (const llvm::MachineOperand *)&v349);
                LODWORD(v349) = 1;
                *((void *)&v349 + 1) = 0;
                *(void *)&long long v350 = 0;
                llvm::MachineInstr::addOperand(v282, v280, (const llvm::MachineOperand *)&v349);
                *((void *)&v349 + 1) = 0;
                LODWORD(v349) = 0;
                DWORD1(v349) = v34;
                long long v350 = 0uLL;
                llvm::MachineInstr::addOperand(v282, v280, (const llvm::MachineOperand *)&v349);
                LODWORD(v349) = 1;
                *((void *)&v349 + 1) = 0;
                *(void *)&long long v350 = 0;
                llvm::MachineInstr::addOperand(v282, v280, (const llvm::MachineOperand *)&v349);
                *((void *)&v349 + 1) = 0;
                LODWORD(v349) = 0;
                DWORD1(v349) = v34;
                long long v350 = 0uLL;
                llvm::MachineInstr::addOperand(v282, v280, (const llvm::MachineOperand *)&v349);
                LODWORD(v349) = 1;
                *((void *)&v349 + 1) = 0;
                *(void *)&long long v350 = 0;
                llvm::MachineInstr::addOperand(v282, v280, (const llvm::MachineOperand *)&v349);
                *((void *)&v349 + 1) = 0;
                LODWORD(v349) = 0;
                DWORD1(v349) = v34;
                long long v350 = 0uLL;
                llvm::MachineInstr::addOperand(v282, v280, (const llvm::MachineOperand *)&v349);
                LODWORD(v349) = 1;
                *((void *)&v349 + 1) = 0;
                *(void *)&long long v350 = 0;
                llvm::MachineInstr::addOperand(v282, v280, (const llvm::MachineOperand *)&v349);
                long long v349 = 0u;
                long long v350 = 0u;
                llvm::MachineInstr::addOperand(v282, v280, (const llvm::MachineOperand *)&v349);
                LODWORD(v349) = 1;
                *((void *)&v349 + 1) = 0;
                *(void *)&long long v350 = 0;
                llvm::MachineInstr::addOperand(v282, v280, (const llvm::MachineOperand *)&v349);
                long long v349 = 0u;
                long long v350 = 0u;
                llvm::MachineInstr::addOperand(v282, v280, (const llvm::MachineOperand *)&v349);
                uint64_t v8 = v19;
                LODWORD(v7) = v248;
                uint64_t v9 = v339;
                LOBYTE(v19) = v247;
                int v15 = v322;
              }
            }
            else
            {
              uint64_t v9 = v18;
            }
            uint64_t v6 = v317;
            int v14 = v312;
          }
        }
      }
    }
LABEL_31:
    int v35 = v324[286];
    if (v324[286])
    {
      if ((v19 & 1) == 0)
      {
        int v35 = 0;
        if (v15 > 12691)
        {
          if ((v15 - 12692) <= 0x35 && ((1 << (v15 + 108)) & 0x3FF000000003FFLL) != 0) {
            goto LABEL_48;
          }
          int v37 = -12780;
        }
        else
        {
          if ((v15 - 12496) <= 0x35 && ((1 << (v15 + 48)) & 0x3FF000000003FFLL) != 0) {
            goto LABEL_48;
          }
          int v37 = -12584;
        }
        unsigned int v39 = v15 + v37;
        if (v39 > 0x35 || ((1 << v39) & 0x3FF000000003FFLL) == 0) {
          goto LABEL_49;
        }
      }
LABEL_48:
      int v35 = 1;
    }
LABEL_49:
    uint64_t v40 = v14[1];
    if ((v14[5] & 0x40) != 0)
    {
      if (v14[1])
      {
        uint64_t v41 = 0;
        unsigned int v42 = (char *)(*((void *)v14 + 5) + 2);
        while (1)
        {
          char v43 = *v42;
          v42 += 6;
          if ((v43 & 2) != 0) {
            break;
          }
          if (v40 == ++v41) {
            goto LABEL_54;
          }
        }
        LODWORD(v40) = v41;
      }
      else
      {
LABEL_54:
        LODWORD(v40) = -1;
      }
    }
    char v316 = v19;
    int v337 = (int)v7;
    unsigned int v338 = v8;
    uint64_t v44 = *((unsigned __int8 *)v14 + 4);
    if ((int)v44 + 1 >= v40) {
      int v35 = 0;
    }
    uint64_t v45 = v9;
    unsigned int v333 = v40;
    if (v35 == 1)
    {
      uint64_t v46 = v44 + 1;
      uint64_t v47 = v40;
      uint64_t v326 = v40;
      do
      {
        uint64_t v48 = *(void *)(v10 + 32);
        if (*(unsigned char *)(v48 + 32 * v46) == 1)
        {
          uint64_t v49 = v6;
          uint64_t v50 = v44;
          unsigned int v51 = (unsigned int *)(v48 + 32 * v44);
          BOOL v52 = sub_1CB911228(v51);
          BOOL v53 = v52;
          if (v52 || a5)
          {
            if (v52)
            {
              uint64_t v54 = a1;
              if (*v51) {
                int v55 = (*v51 >> 8) & 0xFFF;
              }
              else {
                int v55 = 0;
              }
              if (v55 == 8) {
                int v56 = 0x4000;
              }
              else {
                int v56 = (v55 << 12) & 0xFFE000;
              }
              unsigned int v57 = (v56 | *(_DWORD *)(v48 + 32 * v50 + 4)) + *(_DWORD *)(*(void *)(a1 + 248) + 16);
              uint64_t v6 = v49;
              goto LABEL_72;
            }
            unsigned int v59 = *v51;
            uint64_t v9 = v45;
            if (*v51)
            {
              uint64_t v8 = v338;
              uint64_t v6 = v49;
              goto LABEL_106;
            }
            unsigned int v57 = *(_DWORD *)(v48 + 32 * v50 + 4);
            if (!v57)
            {
              uint64_t v8 = v338;
LABEL_105:
              uint64_t v6 = v49;
              LODWORD(v40) = v333;
LABEL_106:
              uint64_t v47 = v326;
              goto LABEL_107;
            }
            uint64_t v318 = *(void *)(a1 + 248);
            if (sub_1CB9114D0(v57, *a3, v318))
            {
              uint64_t v8 = v338;
              uint64_t v9 = v45;
              goto LABEL_105;
            }
            if (v323)
            {
              uint64_t v47 = v326;
              if (llvm::MachineInstr::findRegisterDefOperandIdx(v10, v57, 0, 1, v318) != -1)
              {
                uint64_t v8 = v338;
                uint64_t v9 = v45;
                uint64_t v6 = v49;
                goto LABEL_81;
              }
              unsigned int v59 = *v51;
            }
            int v76 = (v59 >> 26) & ~HIBYTE(v59);
            uint64_t v54 = a1;
            uint64_t v6 = v49;
            uint64_t v47 = v326;
            if (v76)
            {
LABEL_73:
              if (v325) {
                char v58 = v53;
              }
              else {
                char v58 = 1;
              }
              if (v58)
              {
                uint64_t v8 = v338;
                LODWORD(v40) = v333;
              }
              else
              {
                unsigned int v60 = *(_DWORD *)(v48 + 32 * v50 + 4);
                uint64_t v61 = *(void *)(a1 + 248);
                unsigned int v62 = *(_DWORD *)(v61 + 16);
                unsigned int v63 = v311;
                if (v60 >= v62)
                {
                  uint64_t v6 = 0;
                  unsigned __int16 v69 = 0;
                  BOOL v67 = 0;
                  unsigned int v63 = ((v60 - v62) >> 12) & 0xFFFFE;
                  int v330 = (v60 - v62) & 0x1FFF;
                }
                else
                {
                  unint64_t v64 = *(unsigned int *)(*(void *)(v61 + 8) + 24 * v60 + 16);
                  __int16 v65 = v64 & 0xF;
                  int v66 = (_WORD *)(*(void *)(v61 + 56) + ((v64 >> 3) & 0x1FFFFFFE));
                  __int16 v68 = *v66;
                  BOOL v67 = v66 + 1;
                  unsigned __int16 v69 = v68 + v65 * v60;
                }
                uint64_t v8 = v338;
                BOOL v70 = v6 < v63 >> 1;
                if (v62 > v60) {
                  BOOL v70 = v67 != 0;
                }
                LODWORD(v40) = v333;
                unsigned int v311 = v63;
                if (v70)
                {
                  unsigned int v71 = v63 >> 1;
                  uint64_t v72 = *(void *)(a1 + 1344);
                  do
                  {
                    if (v60 >= v62) {
                      unsigned int v73 = v6 + v330 + *(_DWORD *)(v61 + 44);
                    }
                    else {
                      unsigned int v73 = v69;
                    }
                    *(void *)(v72 + 8 * (v73 >> 6)) &= ~(1 << v73);
                    if (v60 >= v62)
                    {
                      uint64_t v6 = (v6 + 1);
                    }
                    else
                    {
                      int v74 = *v67++;
                      v69 += v74;
                      if (!v74) {
                        BOOL v67 = 0;
                      }
                    }
                    BOOL v75 = v6 < v71;
                    if (v60 < v62) {
                      BOOL v75 = v67 != 0;
                    }
                  }
                  while (v75);
                }
              }
              *(void *)(v48 + 32 * v46 + 16) |= 0x10uLL;
              uint64_t v9 = v45;
              goto LABEL_107;
            }
LABEL_72:
            if (sub_1CB9115BC(v54, *a4, v57, 0)) {
              goto LABEL_73;
            }
            uint64_t v8 = v338;
            uint64_t v9 = v45;
LABEL_81:
            LODWORD(v40) = v333;
            goto LABEL_107;
          }
          uint64_t v8 = v338;
          uint64_t v9 = v45;
          uint64_t v6 = v49;
        }
LABEL_107:
        LODWORD(v44) = v46++;
      }
      while (v46 != v47);
    }
    if ((v322 - 12440) > 0x2C)
    {
      uint64_t v11 = v336;
      LODWORD(v7) = v337;
    }
    else
    {
      uint64_t v11 = v336;
      LODWORD(v7) = v337;
      if (((0x1C71C71C71C7uLL >> (v322 + 104)) & 1) != 0 && v40 >= 2 && a5)
      {
        uint64_t v77 = 0;
        int v78 = dword_1CD96DAD0[(__int16)(v322 - 12440)];
        unint64_t v79 = v333;
        unint64_t v80 = 1;
        unsigned int v319 = v6;
        while (1)
        {
          uint64_t v81 = *(void *)(v10 + 32);
          unsigned int v82 = *(_DWORD *)(v81 + 32 * v77);
          if ((_BYTE)v82)
          {
            uint64_t v11 = v336;
            goto LABEL_158;
          }
          uint64_t v83 = v81 + 32 * v77;
          unsigned int v86 = *(_DWORD *)(v83 + 4);
          unsigned int v85 = (unsigned int *)(v83 + 4);
          unsigned int v84 = v86;
          if (!v86 || *(unsigned char *)(v81 + 32 * v80) != 1)
          {
            uint64_t v11 = v336;
            uint64_t v8 = v338;
            goto LABEL_158;
          }
          --v78;
          uint64_t v87 = *(void *)(a1 + 248);
          if (sub_1CB9114D0(v84, *a3, v87))
          {
            uint64_t v11 = v336;
            uint64_t v8 = v338;
            uint64_t v9 = v45;
            goto LABEL_137;
          }
          uint64_t v9 = v45;
          if (((v82 >> 26) & ~HIBYTE(v82) & 1) == 0)
          {
            int v88 = sub_1CB9115BC(a1, *a4, v84, 0);
            uint64_t v9 = v45;
            if (!v88)
            {
              uint64_t v11 = v336;
LABEL_136:
              uint64_t v8 = v338;
LABEL_137:
              uint64_t v6 = v319;
              unint64_t v79 = v333;
              goto LABEL_158;
            }
          }
          uint64_t v11 = v336;
          if (v323)
          {
            int RegisterDefOperandIdx = llvm::MachineInstr::findRegisterDefOperandIdx(v10, v84, 0, 1, v87);
            uint64_t v9 = v45;
            if (RegisterDefOperandIdx != -1) {
              goto LABEL_136;
            }
          }
          if (v325)
          {
            unsigned int v90 = *v85;
            uint64_t v91 = *(void *)(a1 + 248);
            unsigned int v92 = *(_DWORD *)(v91 + 16);
            if (*v85 >= v92)
            {
              unsigned int v99 = 0;
              unsigned __int16 v98 = 0;
              int v96 = 0;
              unsigned int v100 = ((v90 - v92) >> 12) & 0xFFFFE;
              int v313 = (v90 - v92) & 0x1FFF;
            }
            else
            {
              unint64_t v93 = *(unsigned int *)(*(void *)(v91 + 8) + 24 * v90 + 16);
              __int16 v94 = v93 & 0xF;
              int v95 = (_WORD *)(*(void *)(v91 + 56) + ((v93 >> 3) & 0x1FFFFFFE));
              __int16 v97 = *v95;
              int v96 = v95 + 1;
              unsigned __int16 v98 = v97 + v94 * v90;
              unsigned int v99 = v332;
              unsigned int v100 = v309;
            }
            unsigned int v332 = v99;
            BOOL v101 = v99 < v100 >> 1;
            if (v92 > v90) {
              BOOL v101 = v96 != 0;
            }
            uint64_t v8 = v338;
            uint64_t v6 = v319;
            unsigned int v309 = v100;
            if (v101)
            {
              uint64_t v102 = *(void *)(a1 + 1344);
              unint64_t v79 = v333;
              do
              {
                if (v90 >= v92) {
                  unsigned int v103 = v332 + v313 + *(_DWORD *)(v91 + 44);
                }
                else {
                  unsigned int v103 = v98;
                }
                *(void *)(v102 + 8 * (v103 >> 6)) &= ~(1 << v103);
                if (v90 >= v92)
                {
                  unsigned int v105 = v332 + 1;
                }
                else
                {
                  int v104 = *v96++;
                  v98 += v104;
                  if (!v104) {
                    int v96 = 0;
                  }
                  unsigned int v105 = v332;
                }
                unsigned int v332 = v105;
                BOOL v106 = v105 < v100 >> 1;
                if (v90 < v92) {
                  BOOL v106 = v96 != 0;
                }
              }
              while (v106);
              uint64_t v9 = v45;
              goto LABEL_157;
            }
            uint64_t v9 = v45;
          }
          else
          {
            uint64_t v8 = v338;
            uint64_t v6 = v319;
          }
          unint64_t v79 = v333;
LABEL_157:
          *(void *)(v81 + 32 * v80 + 16) |= 0x10uLL;
LABEL_158:
          ++v80;
          LODWORD(v7) = v337;
          if (v80 < v79)
          {
            ++v77;
            if (v78) {
              continue;
            }
          }
          break;
        }
      }
    }
    if (!v324[285]) {
      goto LABEL_413;
    }
    if ((v316 & 1) == 0)
    {
      unsigned int *v340 = 0;
      goto LABEL_413;
    }
    uint64_t v107 = (_DWORD *)(a1 + 552);
    uint64_t v108 = *v340;
    unsigned int v109 = v333;
    unsigned int v320 = v6;
    if (!v108) {
      goto LABEL_185;
    }
    for (uint64_t i = 0; i != v108; ++i)
    {
      if (*(int *)(a1 + 24 * i + 568) <= 0)
      {
        uint64_t v111 = a1 + 24 * i;
        unint64_t v112 = *(void *)(v111 + 576);
        if ((v112 & 4) != 0)
        {
          unint64_t v115 = v112 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v113 = *(uint64_t **)v115;
          uint64_t v114 = *(void *)v115 + 8 * *(unsigned int *)(v115 + 8);
        }
        else
        {
          unint64_t v113 = (uint64_t *)(v111 + 576);
          uint64_t v114 = (uint64_t)&v113[v112 > 7];
        }
        while (v113 != (uint64_t *)v114)
        {
          uint64_t v116 = *v113++;
          *(void *)(v116 + 16) |= 0x20uLL;
        }
      }
    }
    uint64_t v107 = (_DWORD *)(a1 + 552);
    if (*v340)
    {
      unint64_t v117 = 0;
      char v118 = 0;
      unsigned int v119 = 0;
      int v120 = *a4;
      int v327 = ~*a4;
LABEL_176:
      int v121 = (unint64_t *)(a1 + 576 + 24 * v117);
      do
      {
        BOOL v122 = (unsigned int *)(v121 - 2);
        if (*((_DWORD *)v121 - 2))
        {
          uint64_t v123 = *(void *)v122;
          uint64_t v124 = a1 + 24 * v119;
          *(_DWORD *)(v124 + 568) = *((_DWORD *)v121 - 2);
          *(void *)(v124 + 560) = v123;
          sub_1CB91202C((unint64_t *)(v124 + 576), v121);
          --*(_DWORD *)(v124 + 568);
          ++v119;
        }
        else
        {
          unsigned int v125 = *v122;
          if ((sub_1CB9115BC(a1, v120, *v122, 0) & 1) == 0)
          {
            int v126 = sub_1CB911790((void *)a1, v120, v120, v125);
            if (v126 != -1)
            {
              int v127 = v126;
              uint64_t v128 = *(v121 - 2);
              uint64_t v129 = a1 + 552 + 24 * v119;
              *(_DWORD *)(v129 + 16) = *((_DWORD *)v121 - 2);
              *(void *)(v129 + 8) = v128;
              sub_1CB91202C((unint64_t *)(v129 + 24), v121);
              *(_DWORD *)(v129 + 16) = v127 + v327;
              ++v119;
              ++v117;
              char v118 = 1;
              unsigned int v109 = v333;
              if (v117 < *(unsigned int *)(a1 + 552)) {
                goto LABEL_176;
              }
              unsigned int *v340 = v119;
              goto LABEL_187;
            }
          }
        }
        ++v117;
        v121 += 3;
        unsigned int v109 = v333;
      }
      while (v117 < *v340);
      unsigned int *v340 = v119;
      if ((v118 & 1) == 0) {
        goto LABEL_191;
      }
LABEL_187:
      unint64_t v130 = 126 - 2 * __clz(v119);
      if (v119) {
        uint64_t v131 = v130;
      }
      else {
        uint64_t v131 = 0;
      }
      sub_1CB91226C(a1 + 560, a1 + 560 + 24 * v119, v131, 1);
    }
    else
    {
LABEL_185:
      *uint64_t v107 = 0;
    }
LABEL_191:
    long long v353 = 0u;
    long long v354 = 0u;
    long long v351 = 0u;
    long long v352 = 0u;
    long long v349 = 0u;
    long long v350 = 0u;
    int v348 = 0;
    uint64_t v347 = 0;
    if (*((unsigned char *)v312 + 4) && (uint64_t v132 = *(_DWORD **)(v10 + 32), (*v132 & 0x10000FF) == 0x1000000)) {
      unsigned int v334 = v132[1];
    }
    else {
      unsigned int v334 = 0;
    }
    if (v109 >= 3)
    {
      uint64_t v133 = v109 - 1;
      uint64_t v134 = 1;
      while (1)
      {
        uint64_t v135 = *(void *)(v10 + 32);
        unsigned int v136 = (unsigned int *)(v135 + 32 * v134);
        BOOL v137 = sub_1CB911228(v136);
        if (v137)
        {
          uint64_t v138 = a1;
          int v139 = *v136 ? (*v136 >> 8) & 0xFFF : 0;
          int v140 = v139 == 8 ? 0x4000 : (v139 << 12) & 0xFFE000;
          unint64_t v141 = (v140 | v136[1]) + *(_DWORD *)(*(void *)(a1 + 248) + 16);
        }
        else
        {
          unsigned int v146 = *v136;
          if ((*v136 & 0x20000FF) != 0) {
            goto LABEL_242;
          }
          unint64_t v141 = *(unsigned int *)(v135 + 32 * v134 + 4);
          if ((v141 | 2) == 2) {
            goto LABEL_242;
          }
          BOOL v147 = v334 && v141 == v334;
          BOOL v148 = v147;
          if ((v146 & 0x1000000) != 0 || v148) {
            goto LABEL_242;
          }
          if ((v141 - 1) > 0x497E)
          {
            uint64_t v138 = a1;
          }
          else
          {
            uint64_t v138 = a1;
            if ((byte_1CDD76C32[v141 >> 3] >> (v141 & 7)))
            {
              int v149 = *(void **)(a1 + 248);
              uint64_t v150 = v149[1];
              uint64_t v151 = v149[7];
              uint64_t v152 = *(unsigned int *)(v150 + 24 * v141 + 4);
              if (*(_WORD *)(v151 + 2 * v152))
              {
                unsigned __int16 v153 = *(_WORD *)(v151 + 2 * v152) + v141;
                uint64_t v154 = (_WORD *)(v149[11] + 2 * *(unsigned int *)(v150 + 24 * v141 + 12));
                v155 = (unsigned __int16 *)(v151 + 2 * v152 + 2);
                while (*v154 != 33)
                {
                  unint64_t v141 = 0;
                  int v156 = *v155++;
                  v153 += v156;
                  ++v154;
                  if (!v156) {
                    goto LABEL_205;
                  }
                }
                unint64_t v141 = v153;
              }
              else
              {
                unint64_t v141 = 0;
              }
            }
          }
        }
LABEL_205:
        int v142 = *a4;
        if ((sub_1CB9115BC(v138, *a4, v141, 0) & 1) == 0)
        {
          int v143 = sub_1CB911790((void *)a1, v142, v142, v141);
          if (v143 != -1) {
            break;
          }
        }
LABEL_242:
        if (++v134 == v133) {
          goto LABEL_248;
        }
      }
      int v144 = v143;
      if (v137)
      {
        uint64_t v145 = *v340;
        goto LABEL_232;
      }
      int v157 = sub_1CB911A80(v141, *(void *)(a1 + 248));
      uint64_t v145 = *(unsigned int *)(a1 + 552);
      if (v157 == v141)
      {
LABEL_232:
        if (!v145) {
          goto LABEL_239;
        }
        int v160 = 0;
        int v161 = (_DWORD *)(a1 + 564);
        while (*(v161 - 1) != v141)
        {
          if (*v161 == v141) {
            ++v160;
          }
          if (v160 == 2) {
            break;
          }
          v161 += 6;
          if (!--v145) {
            goto LABEL_239;
          }
        }
        uint64_t v162 = 2;
      }
      else
      {
        if (*(_DWORD *)(a1 + 552))
        {
          uint64_t v158 = (_DWORD *)(a1 + 564);
          uint64_t v159 = *(unsigned int *)(a1 + 552);
          while (*v158 != v157 || *(v158 - 1) == v157)
          {
            v158 += 6;
            if (!--v159) {
              goto LABEL_232;
            }
          }
          uint64_t v162 = 0;
          goto LABEL_241;
        }
LABEL_239:
        uint64_t v162 = 1;
      }
LABEL_241:
      uint64_t v163 = *((unsigned int *)&v347 + v162);
      *((_DWORD *)&v347 + v162) = v163 + 1;
      uint64_t v164 = (_DWORD *)&v349 + 8 * v162 + 2 * v163;
      _DWORD *v164 = v144;
      v164[1] = v134;
      goto LABEL_242;
    }
LABEL_248:
    unint64_t v165 = 0;
    uint64_t v9 = v45;
    do
    {
      unint64_t v166 = *((unsigned int *)&v347 + v165);
      if (v166 >= 2)
      {
        qsort(&v349 + 2 * v165, *((unsigned int *)&v347 + v165), 8uLL, (int (__cdecl *)(const void *, const void *))sub_1CD3F7E5C);
        uint64_t v9 = v45;
      }
      else
      {
        if (!v166)
        {
          char v177 = 0;
          goto LABEL_284;
        }
        unint64_t v166 = 1;
      }
      unint64_t v167 = 0;
      do
      {
        v168 = (_DWORD *)&v349 + 8 * v165 + 2 * v167;
        uint64_t v169 = v168[1];
        uint64_t v170 = *(void *)(v10 + 32);
        uint64_t v171 = v170 + 32 * (v169 + 1);
        if ((*(unsigned char *)(v171 + 16) & 0x10) != 0)
        {
          char v177 = 0;
        }
        else
        {
          int v172 = (unsigned int *)(v170 + 32 * v169);
          if (sub_1CB911228(v172))
          {
            if (*v172) {
              int v173 = (*v172 >> 8) & 0xFFF;
            }
            else {
              int v173 = 0;
            }
            if (v173 == 8) {
              int v174 = 0x4000;
            }
            else {
              int v174 = (v173 << 12) & 0xFFE000;
            }
            LODWORD(v175) = (v174 | *(_DWORD *)(v170 + 32 * v169 + 4)) + *(_DWORD *)(*(void *)(a1 + 248) + 16);
            unsigned int v176 = v175;
          }
          else
          {
            unint64_t v175 = *(unsigned int *)(v170 + 32 * v169 + 4);
            if ((v175 - 1) >= 0x497F)
            {
              unsigned __int16 v178 = *(void **)(a1 + 248);
            }
            else
            {
              unsigned __int16 v178 = *(void **)(a1 + 248);
              if ((byte_1CDD76C32[v175 >> 3] >> (v175 & 7)))
              {
                uint64_t v179 = v178[1];
                uint64_t v180 = v178[7];
                uint64_t v181 = *(unsigned int *)(v179 + 24 * v175 + 4);
                if (*(_WORD *)(v180 + 2 * v181))
                {
                  unsigned __int16 v182 = *(_WORD *)(v180 + 2 * v181) + v175;
                  signed int v183 = (_WORD *)(v178[11] + 2 * *(unsigned int *)(v179 + 24 * v175 + 12));
                  char v184 = (unsigned __int16 *)(v180 + 2 * v181 + 2);
                  while (*v183 != 33)
                  {
                    int v185 = *v184++;
                    v182 += v185;
                    ++v183;
                    if (!v185) {
                      goto LABEL_270;
                    }
                  }
                  unint64_t v175 = v182;
                }
                else
                {
LABEL_270:
                  unint64_t v175 = 0;
                }
              }
            }
            unsigned int v176 = sub_1CB911A80(v175, (uint64_t)v178);
          }
          int v186 = *v168 + ~*a4;
          v343 = (unsigned __int8 *)__PAIR64__(v176, v175);
          int v344 = v186;
          unint64_t v345 = v171 & 0xFFFFFFFFFFFFFFFBLL;
          char v177 = sub_1CB911B18(v340, (uint64_t *)&v343);
          if ((v345 & 4) != 0)
          {
            int v187 = (void **)(v345 & 0xFFFFFFFFFFFFFFF8);
            if ((v345 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if (*v187 != v187 + 2) {
                free(*v187);
              }
              MEMORY[0x1D25D9CE0](v187, 0x1080C40ED926357);
            }
          }
          uint64_t v9 = v45;
        }
        ++v167;
      }
      while (v167 < v166 && (v177 & 1) == 0);
LABEL_284:
      if (v165 > 1) {
        break;
      }
      ++v165;
    }
    while ((v177 & 1) == 0);
    LODWORD(v7) = v337;
    if (!v334)
    {
      uint64_t v11 = v336;
      uint64_t v8 = v338;
      goto LABEL_295;
    }
    uint64_t v11 = v336;
    uint64_t v8 = v338;
    uint64_t v6 = v320;
    if (v334 >> 7 <= 0x92 && ((byte_1CDD76C32[(unint64_t)v334 >> 3] >> (v334 & 7)) & 1) != 0)
    {
      uint64_t v188 = *(void **)(a1 + 248);
      uint64_t v189 = v188[1];
      uint64_t v190 = v188[7];
      uint64_t v191 = *(unsigned int *)(v189 + 24 * v334 + 4);
      if (*(_WORD *)(v190 + 2 * v191))
      {
        unsigned __int16 v192 = *(_WORD *)(v190 + 2 * v191) + v334;
        int v193 = (_WORD *)(v188[11] + 2 * *(unsigned int *)(v189 + 24 * v334 + 12));
        uint64_t v194 = (unsigned __int16 *)(v190 + 2 * v191 + 2);
        uint64_t v9 = v45;
        while (*v193 != 33)
        {
          unsigned int v334 = 0;
          int v195 = *v194++;
          v192 += v195;
          ++v193;
          if (!v195) {
            goto LABEL_297;
          }
        }
        unsigned int v334 = v192;
      }
      else
      {
        unsigned int v334 = 0;
        uint64_t v9 = v45;
      }
    }
LABEL_297:
    if (!v324[305])
    {
      if (!v10 || (uint64_t v196 = v10, (*(unsigned char *)v10 & 4) == 0))
      {
        uint64_t v196 = v10;
        if ((*(_WORD *)(v10 + 44) & 8) != 0)
        {
          uint64_t v196 = v10;
          do
            uint64_t v196 = *(void *)(v196 + 8);
          while ((*(_WORD *)(v196 + 44) & 8) != 0);
        }
      }
      for (uint64_t j = *(void *)(v196 + 8); ; uint64_t j = *(void *)(j + 8))
      {
        if ((void *)j == v328) {
          goto LABEL_412;
        }
        uint64_t v198 = *(unsigned __int16 **)(j + 16);
        int v199 = *v198;
        BOOL v200 = (v199 - 9) > 0x3C || ((1 << (v199 - 9)) & 0x1000000000000605) == 0;
        BOOL v201 = !v200 || v199 == 0;
        if (!v201 && (v198[4] & 0x10) == 0) {
          break;
        }
        if ((*(unsigned char *)j & 4) == 0)
        {
          while ((*(_WORD *)(j + 44) & 8) != 0)
            uint64_t j = *(void *)(j + 8);
        }
      }
      int v227 = *a4;
      if (sub_1CB9115BC(a1, *a4 + 1, v334, 1))
      {
        LODWORD(v7) = v337;
        uint64_t v8 = v338;
        uint64_t v9 = v45;
        goto LABEL_413;
      }
      uint64_t v9 = v45;
      if ((*(unsigned char *)j & 4) == 0)
      {
        while ((*(_WORD *)(j + 44) & 8) != 0)
          uint64_t j = *(void *)(j + 8);
      }
      uint64_t v228 = *(void *)(j + 8);
      if ((void *)v228 != v328)
      {
        LODWORD(v7) = v337;
        while (1)
        {
          int v229 = *(unsigned __int16 **)(v228 + 16);
          int v230 = *v229;
          BOOL v231 = (v230 - 9) > 0x3C || ((1 << (v230 - 9)) & 0x1000000000000605) == 0;
          BOOL v232 = !v231 || v230 == 0;
          if (!v232 && (v229[4] & 0x10) == 0) {
            break;
          }
          if ((*(unsigned char *)v228 & 4) == 0)
          {
            while ((*(_WORD *)(v228 + 44) & 8) != 0)
              uint64_t v228 = *(void *)(v228 + 8);
          }
          uint64_t v228 = *(void *)(v228 + 8);
          if ((void *)v228 == v328) {
            goto LABEL_367;
          }
        }
        if ((sub_1CB9115BC(a1, v227 + 2, v334, 1) & 1) == 0)
        {
          int v260 = sub_1CB911790((void *)a1, v227 + 2, v227, v334);
          if (v260 != -1)
          {
            int v261 = v260;
            unsigned int v262 = sub_1CB911A80(v334, *(void *)(a1 + 248));
            int v263 = v261 + ~*a4;
            uint64_t v264 = *(void *)(v10 + 32) + 32;
            v343 = (unsigned __int8 *)__PAIR64__(v262, v334);
            int v344 = v263;
            unint64_t v345 = v264 & 0xFFFFFFFFFFFFFFFBLL;
            int v265 = sub_1CB911B18(v340, (uint64_t *)&v343);
            uint64_t v6 = v320;
            if (!v325 || !v265) {
              goto LABEL_468;
            }
            uint64_t v266 = *(void *)(a1 + 248);
            unsigned int v267 = *(_DWORD *)(v266 + 16);
            unsigned int v268 = v334 - v267;
            uint64_t v9 = v45;
            if (v334 >= v267)
            {
              v270 = 0;
              int v272 = 0;
              unsigned int v273 = 0;
              unsigned int v274 = (v268 >> 12) & 0xFFFFE;
              int v275 = v268 & 0x1FFF;
            }
            else
            {
              uint64_t v269 = (unsigned __int16 *)(*(void *)(v266 + 56)
                                        + (((unint64_t)*(unsigned int *)(*(void *)(v266 + 8) + 24 * v334 + 16) >> 3) & 0x1FFFFFFE));
              int v271 = *v269;
              v270 = v269 + 1;
              int v272 = v271 + (*(_DWORD *)(*(void *)(v266 + 8) + 24 * v334 + 16) & 0xF) * v334;
              unsigned int v273 = v305;
              unsigned int v274 = v306;
              int v275 = v304;
            }
            BOOL v295 = v273 < v274 >> 1;
            if (v334 < v267) {
              BOOL v295 = v270 != 0;
            }
            unsigned int v306 = v274;
            int v304 = v275;
            if (v295)
            {
              uint64_t v296 = *(void *)(a1 + 1344);
              do
              {
                if (v334 >= v267)
                {
                  *(void *)(v296 + 8 * ((v273 + v275 + *(_DWORD *)(v266 + 44)) >> 6)) |= 1 << (v273 + v275 + *(unsigned char *)(v266 + 44));
                  ++v273;
                }
                else
                {
                  *(void *)(v296 + 8 * ((unsigned __int16)v272 >> 6)) |= 1 << v272;
                  int v297 = *v270++;
                  v272 += v297;
                  if (!v297) {
                    v270 = 0;
                  }
                }
                BOOL v298 = v273 < v274 >> 1;
                if (v334 < v267) {
                  BOOL v298 = v270 != 0;
                }
              }
              while (v298);
              unsigned int v305 = v273;
LABEL_468:
              uint64_t v9 = v45;
            }
            else
            {
              unsigned int v305 = v273;
            }
            if ((v345 & 4) != 0)
            {
              v299 = (void **)(v345 & 0xFFFFFFFFFFFFFFF8);
              if ((v345 & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                if (*v299 != v299 + 2) {
                  free(*v299);
                }
                MEMORY[0x1D25D9CE0](v299, 0x1080C40ED926357);
                uint64_t v9 = v45;
              }
            }
LABEL_367:
            uint64_t v8 = v338;
            goto LABEL_413;
          }
        }
        uint64_t v8 = v338;
        uint64_t v9 = v45;
LABEL_295:
        uint64_t v6 = v320;
        goto LABEL_413;
      }
      uint64_t v8 = v338;
LABEL_412:
      LODWORD(v7) = v337;
    }
LABEL_413:
    uint64_t v13 = v321;
    ++*a4;
LABEL_414:
    uint64_t v10 = v13;
  }
  while ((void *)v13 != v328);
}

uint64_t sub_1CB911170(uint64_t result, uint64_t *a2, unsigned __int16 *a3, unsigned __int16 *a4, int a5)
{
  if (a4 != a3)
  {
    uint64_t v5 = *(void *)(result + 248);
    if (v5) {
      uint64_t v6 = (uint64_t *)(v5 + 8);
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *v6;
    uint64_t v8 = v6[6];
    uint64_t v9 = v6[7];
    do
    {
      uint64_t v10 = v7 + 24 * *a3;
      unint64_t v11 = *(unsigned int *)(v10 + 16);
      uint64_t v12 = (v11 >> 3) & 0x1FFFFFFE;
      unsigned __int16 v13 = *(_WORD *)(v8 + v12) + (v11 & 0xF) * *a3;
      int v14 = (void *)(v9 + 8 * *(unsigned __int16 *)(v10 + 20));
      uint64_t v15 = *a2;
      uint64_t v16 = (unsigned __int16 *)(v8 + 2 + v12);
      do
      {
        if (!*v14 || (*((void *)a3 + 1) & *v14) != 0)
        {
          uint64_t v17 = 1 << v13;
          unsigned int v18 = v13 >> 6;
          if (a5) {
            uint64_t v19 = *(void *)(v15 + 8 * v18) | v17;
          }
          else {
            uint64_t v19 = *(void *)(v15 + 8 * v18) & ~v17;
          }
          *(void *)(v15 + 8 * v18) = v19;
        }
        ++v14;
        unsigned int v20 = *v16++;
        BOOL result = v20;
        v13 += v20;
      }
      while (v20);
      a3 += 8;
    }
    while (a3 != a4);
  }
  return result;
}

BOOL sub_1CB911228(unsigned int *a1)
{
  uint64_t v1 = 0;
  unsigned int v2 = *a1;
  if (*a1 == 7 && a1[4] == 64)
  {
    uint64_t v1 = 0;
    if ((uint64_t)(a1[1] | ((unint64_t)a1[6] << 32)) < 0x2000)
    {
      BOOL v3 = ((v2 >> 8) & 0xFFF) > 8 || ((1 << SBYTE1(v2)) & 0x114) == 0;
      if (!v3
        && ((v2 & 0xFFF00) != 0x400 || **(unsigned __int16 **)(*((void *)a1 + 1) + 16) - 945 >= 0x6A))
      {
        return 1;
      }
    }
  }
  return v1;
}

uint64_t *sub_1CB9112B4(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = *a2;
  BOOL result = sub_1CB911460((uint64_t *)a1, *a2);
  if (*(_DWORD *)(a1 + 196))
  {
    unsigned int v7 = *(_DWORD *)(a1 + 192);
    uint64_t v8 = *(void *)a1 + 20 * v7;
    int v9 = *(_DWORD *)(v8 + 16);
    unsigned int v10 = a2[2];
    *(void *)uint64_t v8 = *(void *)a2;
    *(_DWORD *)(v8 + 8) = v10;
    *(void *)(v8 + 12) = -1;
    LODWORD(v8) = *(_DWORD *)(a1 + 196) - 1;
    *(_DWORD *)(a1 + 192) = v9;
    *(_DWORD *)(a1 + 196) = v8;
  }
  else
  {
    unsigned int v11 = a2[2];
    *(void *)uint64_t v19 = *(void *)a2;
    *(_DWORD *)&v19[8] = v11;
    *(void *)&v19[12] = -1;
    unsigned int v12 = *(_DWORD *)(a1 + 8);
    unint64_t v13 = *(void *)a1;
    if (v12 >= *(_DWORD *)(a1 + 12))
    {
      BOOL v18 = v13 + 20 * v12 > (unint64_t)v19;
      if (v13 > (unint64_t)v19 || !v18) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v14 = v13 + 20 * *(unsigned int *)(a1 + 8);
    long long v15 = *(_OWORD *)v19;
    *(_DWORD *)(v14 + 16) = *(_DWORD *)&v19[16];
    *(_OWORD *)uint64_t v14 = v15;
    unsigned int v7 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v7 + 1;
  }
  if (result == (uint64_t *)a1 && v6 == 0xFFFFFFFFLL)
  {
    *(_WORD *)(*(void *)(a1 + 176) + 2 * v4) = v7;
    *(_DWORD *)(*(void *)a1 + 20 * v7 + 12) = v7;
  }
  else
  {
    unsigned int v16 = *(_DWORD *)(*result + 20 * v6 + 12);
    uint64_t v17 = *(void *)a1;
    *(_DWORD *)(*(void *)a1 + 20 * v16 + 16) = v7;
    *(_DWORD *)(v17 + 20 * v6 + 12) = v7;
    *(_DWORD *)(v17 + 20 * v7 + 12) = v16;
  }
  return result;
}

uint64_t *sub_1CB911460(uint64_t *result, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int16 *)(result[22] + 2 * a2);
  unsigned int v3 = *((_DWORD *)result + 2);
  if (v3 > v2)
  {
    uint64_t v4 = *result;
    do
    {
      if (*(_DWORD *)(v4 + 20 * v2) == a2)
      {
        unsigned int v5 = *(_DWORD *)(v4 + 20 * v2 + 12);
        if (v5 != -1 && *(_DWORD *)(v4 + 20 * v5 + 16) == -1) {
          break;
        }
      }
      v2 += 0x10000;
    }
    while (v2 < v3);
  }
  return result;
}

uint64_t sub_1CB9114D0(unsigned int a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(a3 + 16);
  unsigned int v4 = a1 - v3;
  if (a1 >= v3)
  {
    unsigned __int16 v12 = 0;
    int v9 = 0;
    unsigned int v5 = v4 >> 13;
    int v10 = v4 & 0x1FFF;
  }
  else
  {
    unsigned int v5 = 0;
    unint64_t v6 = *(unsigned int *)(*(void *)(a3 + 8) + 24 * a1 + 16);
    __int16 v7 = v6 & 0xF;
    uint64_t v8 = (unsigned __int16 *)(*(void *)(a3 + 56) + ((v6 >> 3) & 0x1FFFFFFE));
    int v11 = *v8;
    int v9 = v8 + 1;
    int v10 = v11;
    unsigned __int16 v12 = v11 + v7 * a1;
  }
  BOOL v13 = v5 != 0;
  if (a1 < v3) {
    BOOL v13 = v9 != 0;
  }
  if (!v13) {
    return 0;
  }
  unsigned int v14 = 0;
  while (a1 < v3)
  {
    if ((*(void *)(a2 + 8 * (v12 >> 6)) >> v12)) {
      return 1;
    }
    int v15 = *v9++;
    v12 += v15;
    if (!v15) {
      int v9 = 0;
    }
LABEL_15:
    BOOL v16 = v14 < v5;
    if (a1 < v3) {
      BOOL v16 = v9 != 0;
    }
    if (!v16) {
      return 0;
    }
  }
  if (((*(void *)(a2 + 8 * ((v14 + v10 + *(_DWORD *)(a3 + 44)) >> 6)) >> (v14
                                                                             + v10
                                                                             + *(unsigned char *)(a3 + 44))) & 1) == 0)
  {
    ++v14;
    goto LABEL_15;
  }
  return 1;
}

uint64_t sub_1CB9115BC(uint64_t a1, int a2, unsigned int a3, char a4)
{
  uint64_t v7 = *(void *)(a1 + 248);
  unsigned int v8 = *(_DWORD *)(v7 + 16);
  unsigned int v9 = a3 - v8;
  if (a3 >= v8)
  {
    uint64_t v14 = 0;
    unsigned __int16 v12 = 0;
    unsigned int v10 = v9 >> 13;
    int v35 = v9 & 0x1FFF;
  }
  else
  {
    unsigned int v10 = 0;
    int v11 = (unsigned __int16 *)(*(void *)(v7 + 56)
                             + (((unint64_t)*(unsigned int *)(*(void *)(v7 + 8) + 24 * a3 + 16) >> 3) & 0x1FFFFFFE));
    int v13 = *v11;
    unsigned __int16 v12 = v11 + 1;
    uint64_t v14 = v13 + (*(_DWORD *)(*(void *)(v7 + 8) + 24 * a3 + 16) & 0xF) * a3;
  }
  BOOL v15 = v10 != 0;
  if (a3 < v8) {
    BOOL v15 = v12 != 0;
  }
  if (v15)
  {
    unsigned int v34 = v10;
    uint64_t v16 = 0;
    uint64_t v17 = (uint64_t *)(a1 + 944);
    while (1)
    {
      if (a3 >= v8)
      {
        uint64_t v19 = v14;
        uint64_t v18 = v16;
        unsigned int v20 = v16 + v35 + *(_DWORD *)(v7 + 44);
      }
      else
      {
        uint64_t v18 = v16;
        uint64_t v19 = v14;
        unsigned int v20 = (unsigned __int16)v14;
      }
      unsigned int v21 = sub_1CB911460(v17, v20);
      BOOL v23 = v17 == v21 && v22 == -1;
      int v24 = v23;
      if (v23) {
        return v24 ^ 1u;
      }
      uint64_t v14 = v19;
      uint64_t v16 = v18;
      uint64_t v25 = v22;
      uint64_t v26 = *v21;
      while (1)
      {
        uint64_t v27 = v26 + 20 * v25;
        int v28 = *(_DWORD *)(v27 + 4);
        if (v28 > a2) {
          return 0;
        }
        if (a4)
        {
          if (v28 == a2) {
            break;
          }
          goto LABEL_27;
        }
        int v29 = *(unsigned __int8 *)(v27 + 8);
        if (v28 == a2 && v29 == 0) {
          break;
        }
LABEL_27:
        uint64_t v25 = *(unsigned int *)(v26 + 20 * v25 + 16);
        if (v17 == v21 && v25 == 0xFFFFFFFFLL) {
          return 0;
        }
      }
      if (a3 >= v8)
      {
        uint64_t v16 = (v18 + 1);
      }
      else
      {
        int v31 = *v12++;
        uint64_t v14 = (v31 + v19);
        if (!v31) {
          unsigned __int16 v12 = 0;
        }
      }
      BOOL v32 = v16 < v34;
      if (a3 < v8) {
        BOOL v32 = v12 != 0;
      }
      if (!v32) {
        return v24 ^ 1u;
      }
    }
  }
  return 1;
}

uint64_t sub_1CB911790(void *a1, int a2, int a3, unsigned int a4)
{
  unsigned int v4 = a4;
  uint64_t v7 = a1[31];
  unsigned int v8 = *(_DWORD *)(v7 + 16);
  unsigned int v9 = a4 - v8;
  if (a4 >= v8)
  {
    unsigned __int16 v47 = 0;
    int v13 = 0;
    unsigned int v10 = v9 >> 13;
    int v42 = v9 & 0x1FFF;
  }
  else
  {
    unsigned int v10 = 0;
    unint64_t v11 = *(unsigned int *)(*(void *)(v7 + 8) + 24 * a4 + 16);
    unsigned __int16 v12 = (__int16 *)(*(void *)(v7 + 56) + ((v11 >> 3) & 0x1FFFFFFE));
    __int16 v14 = *v12;
    int v13 = v12 + 1;
    unsigned __int16 v47 = v14 + (v11 & 0xF) * a4;
  }
  BOOL v15 = v10 != 0;
  if (a4 < v8) {
    BOOL v15 = v13 != 0;
  }
  if (!v15) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v43 = a1[31];
  unsigned int v16 = 0;
  uint64_t v17 = a1 + 118;
  uint64_t v18 = a1 + 143;
  unsigned int v44 = a2 + 1;
  LODWORD(v19) = 0x7FFFFFFF;
  unsigned int v40 = v10;
  unsigned int v46 = v8;
  while (1)
  {
    unsigned int v48 = v16;
    uint64_t v45 = v13;
    if (v4 >= v8) {
      unsigned int v20 = v16 + v42 + *(_DWORD *)(v43 + 44);
    }
    else {
      unsigned int v20 = v47;
    }
    unsigned int v21 = sub_1CB911460(v17, v20);
    uint64_t v23 = v22;
    if (v17 != v21 || v22 != 0xFFFFFFFFLL)
    {
      uint64_t v25 = v21;
      unint64_t v26 = v22;
      do
      {
        uint64_t v27 = *v25;
        uint64_t v28 = *v25 + 20 * v23;
        int v29 = *(_DWORD *)(v28 + 4);
        if (v29 <= a2)
        {
          unint64_t v30 = v26 & 0xFFFFFFFF00000000 | *(unsigned int *)(v27 + 20 * v23 + 16);
          if (v29 < a3) {
            sub_1CB913C18(v17, (uint64_t)v25, v26);
          }
          unint64_t v26 = v30;
        }
        else
        {
          if (!*(unsigned char *)(v28 + 8)) {
            goto LABEL_25;
          }
          unint64_t v26 = v26 & 0xFFFFFFFF00000000 | *(unsigned int *)(v27 + 20 * v23 + 16);
        }
        uint64_t v23 = v26;
      }
      while (v17 != v25 || v26 != 0xFFFFFFFFLL);
    }
    int v29 = 0x7FFFFFFF;
LABEL_25:
    unsigned int v31 = v4 >= v46 ? v48 + v42 + *(_DWORD *)(v43 + 44) : v47;
    int v33 = sub_1CB911460(v18, v31);
    unsigned int v34 = v32;
    uint64_t v35 = v32;
    if (v18 == v33 && v32 == 0xFFFFFFFFLL)
    {
LABEL_35:
      int v36 = 0x7FFFFFFF;
    }
    else
    {
      while (1)
      {
        int v36 = *(_DWORD *)(*v33 + 20 * v35 + 4);
        if (v36 > a2) {
          break;
        }
        uint64_t v35 = *(unsigned int *)(*v33 + 20 * v35 + 16);
        if (v36 < a3) {
          sub_1CB913C18(v18, (uint64_t)v33, v34);
        }
        unsigned int v34 = v35;
        if (v18 == v33 && v35 == -1) {
          goto LABEL_35;
        }
      }
    }
    unsigned int v4 = a4;
    unsigned int v8 = v46;
    int v13 = v45;
    unsigned int v16 = v48;
    unsigned int v37 = (int)v19 >= v36 ? v36 : v19;
    uint64_t v19 = v36 <= v29 ? v37 : v19;
    if (v19 == v44) {
      break;
    }
    if (a4 >= v46)
    {
      unsigned int v16 = v48 + 1;
    }
    else
    {
      int v13 = v45 + 1;
      v47 += *v45;
      if (!*v45) {
        int v13 = 0;
      }
    }
    BOOL v38 = v16 < v40;
    if (a4 < v46) {
      BOOL v38 = v13 != 0;
    }
    if (!v38) {
      goto LABEL_53;
    }
  }
  uint64_t v19 = v44;
LABEL_53:
  if (v19 == 0x7FFFFFFF) {
    return 0xFFFFFFFFLL;
  }
  return v19;
}

uint64_t sub_1CB911A80(uint64_t a1, uint64_t a2)
{
  if ((a1 - 1) > 0x806) {
    return a1;
  }
  if (((byte_1CDD6A15E[(unint64_t)a1 >> 3] >> (a1 & 7)) & 1) == 0) {
    return a1;
  }
  unsigned int v3 = (uint64_t *)(a2 + 8);
  uint64_t result = llvm::MCRegisterInfo::getMatchingSuperReg((uint64_t *)(a2 + 8), a1, 1, (uint64_t)&off_1E66AFC78);
  if (!result)
  {
    uint64_t result = llvm::MCRegisterInfo::getMatchingSuperReg(v3, a1, 2, (uint64_t)&off_1E66AFC78);
    if (!result) {
      return a1;
    }
  }
  return result;
}

uint64_t sub_1CB911B18(unsigned int *a1, uint64_t *a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    do
    {
      if (a1[v6 + 2] == *(_DWORD *)a2)
      {
        a1[v6 + 4] = *((_DWORD *)a2 + 2);
        uint64_t v19 = a2[2];
        unint64_t v20 = v19 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v21 = v19 & 0xFFFFFFFFFFFFFFF8;
        if ((v19 & 4) != 0) {
          unint64_t v21 = **(void **)v20;
        }
        unint64_t v22 = -v5;
        uint64_t v23 = *(void *)(v21 + 8);
        unint64_t v24 = *(void *)&a1[v6 + 6];
        unint64_t v25 = v24 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v26 = v24 & 0xFFFFFFFFFFFFFFF8;
        if ((v24 & 4) != 0) {
          unint64_t v26 = **(void **)v25;
        }
        if (v23 != *(void *)(v26 + 8))
        {
          if ((v19 & 4) != 0) {
            unint64_t v20 = **(void **)v20;
          }
          if (v24 <= 7)
          {
            *(void *)&a1[v6 + 6] = v20 & 0xFFFFFFFFFFFFFFFBLL;
          }
          else
          {
            if ((v24 & 4) == 0) {
              operator new();
            }
            unsigned int v27 = *(_DWORD *)(v25 + 8);
            if (v27 >= *(_DWORD *)(v25 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)v25 + 8 * v27) = v20;
            ++*(_DWORD *)(v25 + 8);
            LODWORD(v4) = *a1;
          }
        }
        if ((int)v4 - 1 > v22)
        {
          do
          {
            uint64_t v28 = &a1[v6];
            if ((int)a1[v6 + 4] <= (int)a1[v6 + 10]) {
              break;
            }
            uint64_t v30 = *((void *)v28 + 3);
            int v29 = v28 + 6;
            uint64_t v43 = (void *)*((void *)v29 - 2);
            LODWORD(v44) = *(v29 - 2);
            v45[0] = v30;
            *(void *)int v29 = 0;
            *((void *)v29 - 2) = *((void *)v29 + 1);
            *(v29 - 2) = v29[4];
            sub_1CB9138A0((uint64_t *)v29, (uint64_t *)v29 + 3);
            *((void *)v29 + 1) = v43;
            v29[4] = v44;
            sub_1CB9138A0((uint64_t *)v29 + 3, v45);
            if ((v45[0] & 4) != 0)
            {
              unsigned int v31 = (void **)(v45[0] & 0xFFFFFFFFFFFFFFF8);
              if ((v45[0] & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                if (*v31 != v31 + 2) {
                  free(*v31);
                }
                MEMORY[0x1D25D9CE0](v31, 0x1080C40ED926357);
              }
            }
            ++v22;
            v6 += 6;
          }
          while (v22 < *a1 - 1);
        }
        return 1;
      }
      v6 += 6;
      --v5;
    }
    while (6 * v4 != v6);
    uint64_t v7 = 0;
    int v8 = 0;
    unsigned int v9 = 0;
    uint64_t v43 = v45;
    uint64_t v44 = 0x800000000;
    unsigned __int16 v47 = 0;
    unint64_t v48 = 0;
    unsigned int v46 = &v47;
    unsigned int v10 = a1 + 3;
    while (*(v10 - 1) != *((_DWORD *)a2 + 1))
    {
      if (*v10 == *(_DWORD *)a2) {
        ++v8;
      }
      if (v8 == 2) {
        break;
      }
      unint64_t v11 = v10 + 6;
      sub_1CB913D18((uint64_t)&v43, v10);
      unint64_t v12 = v48;
      unsigned int v13 = v44;
      if (v48) {
        unint64_t v14 = v48;
      }
      else {
        unint64_t v14 = v44;
      }
      if (v14 == 7) {
        unsigned int v9 = v7;
      }
      ++v7;
      unsigned int v10 = v11;
      if (v4 == v7) {
        goto LABEL_18;
      }
    }
    goto LABEL_70;
  }
  unsigned int v13 = 0;
  unint64_t v12 = 0;
  unsigned int v9 = 0;
  uint64_t v43 = v45;
  uint64_t v44 = 0x800000000;
  unsigned __int16 v47 = 0;
  unint64_t v48 = 0;
  unsigned int v46 = &v47;
LABEL_18:
  if (v12) {
    unint64_t v15 = v12;
  }
  else {
    unint64_t v15 = v13;
  }
  if (v15 < 8)
  {
LABEL_22:
    unsigned int v9 = *a1;
    if (*a1) {
      goto LABEL_23;
    }
    goto LABEL_65;
  }
  if (v12)
  {
    int v33 = v47;
    if (v47)
    {
      unsigned int v34 = *((_DWORD *)a2 + 1);
      do
      {
        unsigned int v35 = *((_DWORD *)v33 + 7);
        if (v34 >= v35)
        {
          if (v35 >= v34) {
            goto LABEL_22;
          }
          ++v33;
        }
        int v33 = (void *)*v33;
      }
      while (v33);
    }
  }
  else if (v13)
  {
    int v36 = v43;
    uint64_t v37 = 4 * v13;
    while (*v36 != *((_DWORD *)a2 + 1))
    {
      ++v36;
      v37 -= 4;
      if (!v37) {
        goto LABEL_63;
      }
    }
    if (v37) {
      goto LABEL_22;
    }
  }
LABEL_63:
  if (*((_DWORD *)a2 + 2) < (signed int)a1[6 * v9 + 4])
  {
    *a1 = v9;
    if (v9)
    {
LABEL_23:
      uint64_t v16 = 0;
      uint64_t v17 = (int *)(a1 + 4);
      while (1)
      {
        int v18 = *v17;
        v17 += 6;
        if (*((_DWORD *)a2 + 2) < v18) {
          goto LABEL_66;
        }
        if (v9 == ++v16)
        {
          LODWORD(v16) = v9;
          goto LABEL_66;
        }
      }
    }
LABEL_65:
    LODWORD(v16) = 0;
LABEL_66:
    if (v9 > v16)
    {
      BOOL v38 = (uint64_t *)&a1[6 * v9 + 6];
      unsigned int v39 = (uint64_t *)&a1[6 * v9];
      do
      {
        *(v38 - 2) = *(v39 - 2);
        *((_DWORD *)v38 - 2) = *((_DWORD *)v39 - 2);
        sub_1CB9138A0(v38, v39);
        v38 -= 3;
        v39 -= 3;
        --v9;
      }
      while (v16 < v9);
    }
    uint64_t v40 = *a2;
    uint64_t v41 = &a1[6 * v16];
    v41[4] = *((_DWORD *)a2 + 2);
    *((void *)v41 + 1) = v40;
    sub_1CB91202C((unint64_t *)v41 + 3, (unint64_t *)a2 + 2);
    ++*a1;
LABEL_70:
    uint64_t v32 = 1;
    goto LABEL_71;
  }
  uint64_t v32 = 0;
LABEL_71:
  sub_1CB833A08((uint64_t)&v46, v47);
  if (v43 != v45) {
    free(v43);
  }
  return v32;
}

unint64_t *sub_1CB91202C(unint64_t *a1, unint64_t *a2)
{
  if (a1 == a2) {
    return a1;
  }
  unint64_t v3 = *a2;
  if (*a2 < 8) {
    goto LABEL_3;
  }
  unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFF8;
  if ((v3 & 4) != 0 && v4)
  {
    int v5 = *(_DWORD *)(v4 + 8);
    if (!v5)
    {
LABEL_3:
      if ((*a1 & 4) != 0)
      {
        unint64_t v7 = *a1 & 0xFFFFFFFFFFFFFFF8;
        if (v7) {
          *(_DWORD *)(v7 + 8) = 0;
        }
      }
      else
      {
        *a1 = 0;
      }
      return a1;
    }
    unint64_t v6 = *a1;
    if ((*a1 & 4) != 0) {
      goto LABEL_21;
    }
    goto LABEL_15;
  }
  unint64_t v6 = *a1;
  if ((*a1 & 4) == 0)
  {
    if ((v3 & 4) == 0)
    {
LABEL_17:
      *a1 = v4;
      return a1;
    }
    int v5 = *(_DWORD *)(v4 + 8);
LABEL_15:
    if (v5 != 1) {
      operator new();
    }
    unint64_t v4 = **(void **)v4 & 0xFFFFFFFFFFFFFFFBLL;
    goto LABEL_17;
  }
  if ((v3 & 4) != 0)
  {
LABEL_21:
    unint64_t v9 = v6 & 0xFFFFFFFFFFFFFFF8;
    if (v4 != (v6 & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v10 = *(unsigned int *)(v4 + 8);
      uint64_t v11 = *(unsigned int *)(v9 + 8);
      if (v11 >= v10)
      {
        if (v10) {
          memmove(*(void **)v9, *(const void **)v4, 8 * v10);
        }
      }
      else
      {
        if (*(_DWORD *)(v9 + 12) < v10)
        {
          *(_DWORD *)(v9 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v11) {
          memmove(*(void **)v9, *(const void **)v4, 8 * v11);
        }
        else {
          uint64_t v11 = 0;
        }
        uint64_t v12 = *(unsigned int *)(v4 + 8);
        if (v11 != v12) {
          memcpy((void *)(*(void *)v9 + 8 * v11), (const void *)(*(void *)v4 + 8 * v11), *(void *)v4 + 8 * v12 - (*(void *)v4 + 8 * v11));
        }
      }
      *(_DWORD *)(v9 + 8) = v10;
    }
    return a1;
  }
  unint64_t v8 = v6 & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 8) = 0;
  if (!*(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  **(void **)unint64_t v8 = v4;
  ++*(_DWORD *)(v8 + 8);
  return a1;
}

uint64_t sub_1CB91226C(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = result;
  while (2)
  {
    unsigned int v109 = (uint64_t *)(a2 - 24);
    unint64_t v9 = v8;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = v9;
        uint64_t v10 = a2 - v9;
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v9) >> 3);
        if (!(!v5 & v4))
        {
          switch(v11)
          {
            case 0uLL:
            case 1uLL:
              return result;
            case 2uLL:
              if (*(_DWORD *)(a2 - 16) < *(_DWORD *)(v8 + 8))
              {
                uint64_t v54 = *(void *)v8;
                int v119 = *(_DWORD *)(v8 + 8);
                uint64_t v118 = v54;
                uint64_t v120 = *(void *)(v8 + 16);
                *(void *)(v8 + 16) = 0;
                uint64_t v55 = *(void *)(a2 - 24);
                *(_DWORD *)(v8 + 8) = *(_DWORD *)(a2 - 16);
                *(void *)uint64_t v8 = v55;
                sub_1CB9138A0((uint64_t *)(v8 + 16), (uint64_t *)(a2 - 8));
                int v56 = v119;
                *(void *)(a2 - 24) = v118;
                *(_DWORD *)(a2 - 16) = v56;
                uint64_t result = (uint64_t)sub_1CB9138A0((uint64_t *)(a2 - 8), &v120);
                if ((v120 & 4) != 0)
                {
                  unsigned int v57 = (void **)(v120 & 0xFFFFFFFFFFFFFFF8);
                  if ((v120 & 0xFFFFFFFFFFFFFFF8) != 0)
                  {
                    if (*v57 != v57 + 2) {
                      free(*v57);
                    }
                    uint64_t result = MEMORY[0x1D25D9CE0](v57, 0x1080C40ED926357);
                  }
                }
              }
              break;
            case 3uLL:
              uint64_t result = (uint64_t)sub_1CB9132A0((uint64_t *)v8, (uint64_t *)(v8 + 24), v109);
              break;
            case 4uLL:
              uint64_t result = (uint64_t)sub_1CB9139B8(v8, v8 + 24, v8 + 48, v109);
              break;
            case 5uLL:
              uint64_t result = (uint64_t)sub_1CB912F8C(v8, v8 + 24, v8 + 48, v8 + 72, v109);
              break;
            default:
              JUMPOUT(0);
          }
          return result;
        }
        if (v10 <= 575)
        {
          if (a4)
          {
            if (v8 != a2)
            {
              char v58 = (void *)(v8 + 24);
              if (v8 + 24 != a2)
              {
                uint64_t v59 = 0;
                uint64_t v60 = v8;
                do
                {
                  uint64_t v61 = v58;
                  if (*(_DWORD *)(v60 + 32) < *(_DWORD *)(v60 + 8))
                  {
                    uint64_t v62 = *v58;
                    int v119 = *((_DWORD *)v61 + 2);
                    uint64_t v118 = v62;
                    uint64_t v120 = *(void *)(v60 + 40);
                    *(void *)(v60 + 40) = 0;
                    uint64_t v63 = v59;
                    while (1)
                    {
                      uint64_t v64 = v8 + v63;
                      *(void *)(v64 + 24) = *(void *)(v8 + v63);
                      *(_DWORD *)(v64 + 32) = *(_DWORD *)(v8 + v63 + 8);
                      __int16 v65 = (uint64_t *)(v8 + v63 + 16);
                      sub_1CB9138A0((uint64_t *)(v8 + v63 + 40), v65);
                      if (!v63) {
                        break;
                      }
                      v63 -= 24;
                      if (v119 >= *(_DWORD *)(v64 - 16))
                      {
                        uint64_t v66 = v8 + v63 + 24;
                        goto LABEL_96;
                      }
                    }
                    uint64_t v66 = v8;
LABEL_96:
                    uint64_t v67 = v118;
                    *(_DWORD *)(v66 + 8) = v119;
                    *(void *)uint64_t v66 = v67;
                    uint64_t result = (uint64_t)sub_1CB9138A0(v65, &v120);
                    if ((v120 & 4) != 0)
                    {
                      __int16 v68 = (void **)(v120 & 0xFFFFFFFFFFFFFFF8);
                      if ((v120 & 0xFFFFFFFFFFFFFFF8) != 0)
                      {
                        if (*v68 != v68 + 2) {
                          free(*v68);
                        }
                        uint64_t result = MEMORY[0x1D25D9CE0](v68, 0x1080C40ED926357);
                      }
                    }
                  }
                  char v58 = v61 + 3;
                  v59 += 24;
                  uint64_t v60 = (uint64_t)v61;
                }
                while (v61 + 3 != (void *)a2);
              }
            }
          }
          else if (v8 != a2)
          {
            BOOL v101 = (void *)(v8 + 24);
            if (v8 + 24 != a2)
            {
              uint64_t v102 = v8 + 16;
              do
              {
                unsigned int v103 = v101;
                if (*(_DWORD *)(v8 + 32) < *(_DWORD *)(v8 + 8))
                {
                  uint64_t v104 = *v101;
                  int v119 = *((_DWORD *)v103 + 2);
                  uint64_t v118 = v104;
                  uint64_t v120 = *(void *)(v8 + 40);
                  *(void *)(v8 + 40) = 0;
                  uint64_t v105 = v102;
                  do
                  {
                    *(void *)(v105 + 8) = *(void *)(v105 - 16);
                    *(_DWORD *)(v105 + 16) = *(_DWORD *)(v105 - 8);
                    sub_1CB9138A0((uint64_t *)(v105 + 24), (uint64_t *)v105);
                    int v106 = *(_DWORD *)(v105 - 32);
                    v105 -= 24;
                  }
                  while (v119 < v106);
                  uint64_t v107 = v118;
                  *(_DWORD *)(v105 + 16) = v119;
                  *(void *)(v105 + 8) = v107;
                  uint64_t result = (uint64_t)sub_1CB9138A0((uint64_t *)(v105 + 24), &v120);
                  if ((v120 & 4) != 0)
                  {
                    uint64_t v108 = (void **)(v120 & 0xFFFFFFFFFFFFFFF8);
                    if ((v120 & 0xFFFFFFFFFFFFFFF8) != 0)
                    {
                      if (*v108 != v108 + 2) {
                        free(*v108);
                      }
                      uint64_t result = MEMORY[0x1D25D9CE0](v108, 0x1080C40ED926357);
                    }
                  }
                }
                BOOL v101 = v103 + 3;
                v102 += 24;
                uint64_t v8 = (uint64_t)v103;
              }
              while (v103 + 3 != (void *)a2);
            }
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            int64_t v69 = (v11 - 2) >> 1;
            int64_t v70 = v69;
            do
            {
              int64_t v71 = v70;
              if (v69 >= v70)
              {
                uint64_t v72 = (2 * v70) | 1;
                uint64_t v73 = v8 + 24 * v72;
                if (2 * v71 + 2 < (uint64_t)v11)
                {
                  BOOL v74 = *(_DWORD *)(v8 + 24 * v72 + 8) < *(_DWORD *)(v73 + 32);
                  v73 += 24 * v74;
                  if (v74) {
                    uint64_t v72 = 2 * v71 + 2;
                  }
                }
                if (*(_DWORD *)(v73 + 8) >= *(_DWORD *)(v8 + 24 * v71 + 8))
                {
                  uint64_t v75 = v8 + 24 * v71;
                  uint64_t v76 = *(void *)v75;
                  int v119 = *(_DWORD *)(v75 + 8);
                  uint64_t v118 = v76;
                  uint64_t v120 = *(void *)(v75 + 16);
                  *(void *)(v75 + 16) = 0;
                  int v77 = v119;
                  do
                  {
                    uint64_t v78 = v73;
                    uint64_t v79 = *(void *)v73;
                    *(_DWORD *)(v75 + 8) = *(_DWORD *)(v78 + 8);
                    *(void *)uint64_t v75 = v79;
                    sub_1CB9138A0((uint64_t *)(v75 + 16), (uint64_t *)(v78 + 16));
                    if (v69 < v72) {
                      break;
                    }
                    uint64_t v80 = (2 * v72) | 1;
                    uint64_t v73 = v8 + 24 * v80;
                    if (2 * v72 + 2 < (uint64_t)v11)
                    {
                      BOOL v74 = *(_DWORD *)(v8 + 24 * v80 + 8) < *(_DWORD *)(v73 + 32);
                      v73 += 24 * v74;
                      if (v74) {
                        uint64_t v80 = 2 * v72 + 2;
                      }
                    }
                    uint64_t v75 = v78;
                    uint64_t v72 = v80;
                  }
                  while (*(_DWORD *)(v73 + 8) >= v77);
                  uint64_t v81 = v118;
                  *(_DWORD *)(v78 + 8) = v119;
                  *(void *)uint64_t v78 = v81;
                  sub_1CB9138A0((uint64_t *)(v78 + 16), &v120);
                  if ((v120 & 4) != 0)
                  {
                    unsigned int v82 = (void **)(v120 & 0xFFFFFFFFFFFFFFF8);
                    if ((v120 & 0xFFFFFFFFFFFFFFF8) != 0)
                    {
                      if (*v82 != v82 + 2) {
                        free(*v82);
                      }
                      MEMORY[0x1D25D9CE0](v82, 0x1080C40ED926357);
                    }
                  }
                }
              }
              int64_t v70 = v71 - 1;
            }
            while (v71);
            do
            {
              uint64_t v83 = 0;
              unint64_t v84 = a2;
              int v116 = *(_DWORD *)(v8 + 8);
              uint64_t v113 = *(void *)v8;
              uint64_t v117 = *(void *)(v8 + 16);
              *(void *)(v8 + 16) = 0;
              uint64_t v85 = v8;
              do
              {
                uint64_t v86 = v83 + 1;
                unint64_t v87 = v85 + 24 * (v83 + 1);
                uint64_t v88 = (2 * v83) | 1;
                uint64_t v89 = 2 * v83 + 2;
                if (v89 < (uint64_t)v11)
                {
                  BOOL v74 = *(_DWORD *)(v85 + 24 * v86 + 8) < *(_DWORD *)(v87 + 32);
                  v87 += 24 * v74;
                  if (v74) {
                    uint64_t v88 = v89;
                  }
                }
                uint64_t v90 = *(void *)v87;
                *(_DWORD *)(v85 + 8) = *(_DWORD *)(v87 + 8);
                *(void *)uint64_t v85 = v90;
                sub_1CB9138A0((uint64_t *)(v85 + 16), (uint64_t *)(v87 + 16));
                uint64_t v85 = v87;
                uint64_t v83 = v88;
              }
              while (v88 <= (uint64_t)((v11 - 2) >> 1));
              a2 -= 24;
              if (v87 == v84 - 24)
              {
                *(_DWORD *)(v87 + 8) = v116;
                *(void *)unint64_t v87 = v113;
                uint64_t result = (uint64_t)sub_1CB9138A0((uint64_t *)(v87 + 16), &v117);
              }
              else
              {
                uint64_t v91 = *(void *)a2;
                *(_DWORD *)(v87 + 8) = *(_DWORD *)(v84 - 16);
                *(void *)unint64_t v87 = v91;
                unsigned int v92 = (uint64_t *)(v84 - 8);
                sub_1CB9138A0((uint64_t *)(v87 + 16), v92);
                *(void *)a2 = v113;
                *(_DWORD *)(a2 + 8) = v116;
                uint64_t result = (uint64_t)sub_1CB9138A0(v92, &v117);
                uint64_t v93 = v87 - v8 + 24;
                if (v93 >= 25)
                {
                  unint64_t v94 = (v93 / 0x18uLL - 2) >> 1;
                  if (*(_DWORD *)(v8 + 24 * v94 + 8) < *(_DWORD *)(v87 + 8))
                  {
                    uint64_t v95 = *(void *)v87;
                    int v119 = *(_DWORD *)(v87 + 8);
                    uint64_t v118 = v95;
                    uint64_t v120 = *(void *)(v87 + 16);
                    *(void *)(v87 + 16) = 0;
                    do
                    {
                      unint64_t v96 = v87;
                      unint64_t v87 = v8 + 24 * v94;
                      uint64_t v97 = *(void *)v87;
                      *(_DWORD *)(v96 + 8) = *(_DWORD *)(v87 + 8);
                      *(void *)unint64_t v96 = v97;
                      sub_1CB9138A0((uint64_t *)(v96 + 16), (uint64_t *)(v87 + 16));
                      if (!v94) {
                        break;
                      }
                      unint64_t v94 = (v94 - 1) >> 1;
                    }
                    while (*(_DWORD *)(v8 + 24 * v94 + 8) < v119);
                    uint64_t v98 = v118;
                    *(_DWORD *)(v87 + 8) = v119;
                    *(void *)unint64_t v87 = v98;
                    uint64_t result = (uint64_t)sub_1CB9138A0((uint64_t *)(v87 + 16), &v120);
                    if ((v120 & 4) != 0)
                    {
                      unsigned int v99 = (void **)(v120 & 0xFFFFFFFFFFFFFFF8);
                      if ((v120 & 0xFFFFFFFFFFFFFFF8) != 0)
                      {
                        if (*v99 != v99 + 2) {
                          free(*v99);
                        }
                        uint64_t result = MEMORY[0x1D25D9CE0](v99, 0x1080C40ED926357);
                      }
                    }
                  }
                }
              }
              if ((v117 & 4) != 0)
              {
                unsigned int v100 = (void **)(v117 & 0xFFFFFFFFFFFFFFF8);
                if ((v117 & 0xFFFFFFFFFFFFFFF8) != 0)
                {
                  if (*v100 != v100 + 2) {
                    free(*v100);
                  }
                  uint64_t result = MEMORY[0x1D25D9CE0](v100, 0x1080C40ED926357);
                }
              }
              BOOL v74 = (uint64_t)v11-- <= 2;
            }
            while (!v74);
          }
          return result;
        }
        unint64_t v12 = v8 + 24 * (v11 >> 1);
        if ((unint64_t)v10 >= 0xC01)
        {
          sub_1CB9132A0((uint64_t *)v8, (uint64_t *)(v8 + 24 * (v11 >> 1)), v109);
          uint64_t v13 = 3 * (v11 >> 1);
          unint64_t v14 = (uint64_t *)(v8 + 24 * (v11 >> 1) - 24);
          sub_1CB9132A0((uint64_t *)(v8 + 24), v14, (uint64_t *)(a2 - 48));
          sub_1CB9132A0((uint64_t *)(v8 + 48), (uint64_t *)(v8 + 24 + 8 * v13), (uint64_t *)(a2 - 72));
          sub_1CB9132A0(v14, (uint64_t *)v12, (uint64_t *)(v8 + 24 + 8 * v13));
          uint64_t v15 = *(void *)v8;
          int v119 = *(_DWORD *)(v8 + 8);
          uint64_t v118 = v15;
          uint64_t v120 = *(void *)(v8 + 16);
          *(void *)(v8 + 16) = 0;
          LODWORD(v15) = *(_DWORD *)(v12 + 8);
          *(void *)uint64_t v8 = *(void *)v12;
          *(_DWORD *)(v8 + 8) = v15;
          sub_1CB9138A0((uint64_t *)(v8 + 16), (uint64_t *)(v8 + 16 + 8 * v13));
          int v16 = v119;
          *(void *)unint64_t v12 = v118;
          *(_DWORD *)(v12 + 8) = v16;
          sub_1CB9138A0((uint64_t *)(v8 + 16 + 8 * v13), &v120);
          if ((v120 & 4) != 0)
          {
            uint64_t v17 = (void **)(v120 & 0xFFFFFFFFFFFFFFF8);
            if ((v120 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if (*v17 != v17 + 2) {
                free(*v17);
              }
              MEMORY[0x1D25D9CE0](v17, 0x1080C40ED926357);
            }
          }
        }
        else
        {
          sub_1CB9132A0((uint64_t *)(v8 + 24 * (v11 >> 1)), (uint64_t *)v8, v109);
        }
        --a3;
        if ((a4 & 1) != 0 || *(_DWORD *)(v8 - 16) < *(_DWORD *)(v8 + 8)) {
          break;
        }
        int v115 = *(_DWORD *)(v8 + 8);
        uint64_t v112 = *(void *)v8;
        uint64_t v117 = *(void *)(v8 + 16);
        *(void *)(v8 + 16) = 0;
        if (v115 < *(_DWORD *)(a2 - 16))
        {
          uint64_t v38 = v8;
          do
          {
            unint64_t v9 = v38 + 24;
            int v39 = *(_DWORD *)(v38 + 32);
            v38 += 24;
          }
          while (v115 >= v39);
        }
        else
        {
          unint64_t v40 = v8 + 24;
          do
          {
            unint64_t v9 = v40;
            if (v40 >= a2) {
              break;
            }
            int v41 = *(_DWORD *)(v40 + 8);
            v40 += 24;
          }
          while (v115 >= v41);
        }
        unint64_t v42 = a2;
        if (v9 < a2)
        {
          unint64_t v43 = a2;
          do
          {
            unint64_t v42 = v43 - 24;
            int v44 = *(_DWORD *)(v43 - 16);
            v43 -= 24;
          }
          while (v115 < v44);
        }
        while (v9 < v42)
        {
          uint64_t v45 = *(void *)v9;
          int v119 = *(_DWORD *)(v9 + 8);
          uint64_t v118 = v45;
          uint64_t v120 = *(void *)(v9 + 16);
          *(void *)(v9 + 16) = 0;
          uint64_t v46 = *(void *)v42;
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(v42 + 8);
          *(void *)unint64_t v9 = v46;
          sub_1CB9138A0((uint64_t *)(v9 + 16), (uint64_t *)(v42 + 16));
          int v47 = v119;
          *(void *)unint64_t v42 = v118;
          *(_DWORD *)(v42 + 8) = v47;
          sub_1CB9138A0((uint64_t *)(v42 + 16), &v120);
          if ((v120 & 4) != 0)
          {
            unint64_t v48 = (void **)(v120 & 0xFFFFFFFFFFFFFFF8);
            if ((v120 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if (*v48 != v48 + 2) {
                free(*v48);
              }
              MEMORY[0x1D25D9CE0](v48, 0x1080C40ED926357);
            }
          }
          do
          {
            int v49 = *(_DWORD *)(v9 + 32);
            v9 += 24;
          }
          while (v115 >= v49);
          do
          {
            int v50 = *(_DWORD *)(v42 - 16);
            v42 -= 24;
          }
          while (v115 < v50);
        }
        unsigned int v51 = (uint64_t *)(v9 - 24);
        if (v9 - 24 != v8)
        {
          uint64_t v52 = *v51;
          *(_DWORD *)(v8 + 8) = *(_DWORD *)(v9 - 16);
          *(void *)uint64_t v8 = v52;
          sub_1CB9138A0((uint64_t *)(v8 + 16), (uint64_t *)(v9 - 8));
        }
        *(_DWORD *)(v9 - 16) = v115;
        *unsigned int v51 = v112;
        uint64_t result = (uint64_t)sub_1CB9138A0((uint64_t *)(v9 - 8), &v117);
        if ((v117 & 4) != 0)
        {
          BOOL v53 = (void **)(v117 & 0xFFFFFFFFFFFFFFF8);
          if ((v117 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            if (*v53 != v53 + 2) {
              free(*v53);
            }
            uint64_t result = MEMORY[0x1D25D9CE0](v53, 0x1080C40ED926357);
          }
        }
LABEL_44:
        a4 = 0;
      }
      uint64_t v18 = 0;
      int v19 = *(_DWORD *)(v8 + 8);
      int v114 = v19;
      uint64_t v111 = *(void *)v8;
      uint64_t v117 = *(void *)(v8 + 16);
      *(void *)(v8 + 16) = 0;
      do
      {
        int v20 = *(_DWORD *)(v8 + v18 + 32);
        v18 += 24;
      }
      while (v20 < v19);
      unint64_t v21 = v8 + v18;
      unint64_t v22 = a2;
      if (v18 == 24)
      {
        unint64_t v25 = a2;
        while (v21 < v25)
        {
          unint64_t v23 = v25 - 24;
          int v26 = *(_DWORD *)(v25 - 16);
          v25 -= 24;
          if (v26 < v19) {
            goto LABEL_25;
          }
        }
        unint64_t v23 = v25;
      }
      else
      {
        do
        {
          unint64_t v23 = v22 - 24;
          int v24 = *(_DWORD *)(v22 - 16);
          v22 -= 24;
        }
        while (v24 >= v19);
      }
LABEL_25:
      unint64_t v9 = v21;
      if (v21 < v23)
      {
        unint64_t v27 = v23;
        do
        {
          uint64_t v28 = *(void *)v9;
          int v119 = *(_DWORD *)(v9 + 8);
          uint64_t v118 = v28;
          uint64_t v120 = *(void *)(v9 + 16);
          *(void *)(v9 + 16) = 0;
          uint64_t v29 = *(void *)v27;
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(v27 + 8);
          *(void *)unint64_t v9 = v29;
          sub_1CB9138A0((uint64_t *)(v9 + 16), (uint64_t *)(v27 + 16));
          int v30 = v119;
          *(void *)unint64_t v27 = v118;
          *(_DWORD *)(v27 + 8) = v30;
          sub_1CB9138A0((uint64_t *)(v27 + 16), &v120);
          if ((v120 & 4) != 0)
          {
            unsigned int v31 = (void **)(v120 & 0xFFFFFFFFFFFFFFF8);
            if ((v120 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if (*v31 != v31 + 2) {
                free(*v31);
              }
              MEMORY[0x1D25D9CE0](v31, 0x1080C40ED926357);
            }
          }
          do
          {
            int v32 = *(_DWORD *)(v9 + 32);
            v9 += 24;
          }
          while (v32 < v114);
          do
          {
            int v33 = *(_DWORD *)(v27 - 16);
            v27 -= 24;
          }
          while (v33 >= v114);
        }
        while (v9 < v27);
      }
      unsigned int v34 = (uint64_t *)(v9 - 24);
      if (v9 - 24 != v8)
      {
        uint64_t v35 = *v34;
        *(_DWORD *)(v8 + 8) = *(_DWORD *)(v9 - 16);
        *(void *)uint64_t v8 = v35;
        sub_1CB9138A0((uint64_t *)(v8 + 16), (uint64_t *)(v9 - 8));
      }
      *(_DWORD *)(v9 - 16) = v114;
      *unsigned int v34 = v111;
      sub_1CB9138A0((uint64_t *)(v9 - 8), &v117);
      if ((v117 & 4) != 0)
      {
        int v36 = (void **)(v117 & 0xFFFFFFFFFFFFFFF8);
        if ((v117 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          if (*v36 != v36 + 2) {
            free(*v36);
          }
          MEMORY[0x1D25D9CE0](v36, 0x1080C40ED926357);
        }
      }
      if (v21 < v23)
      {
LABEL_43:
        uint64_t result = sub_1CB91226C(v8, v9 - 24, a3, a4 & 1);
        goto LABEL_44;
      }
      BOOL v37 = sub_1CB9135C0(v8, v9 - 24);
      uint64_t result = sub_1CB9135C0(v9, a2);
      if (result) {
        break;
      }
      if (!v37) {
        goto LABEL_43;
      }
    }
    a2 = v9 - 24;
    if (!v37) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_1CB912F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t result = sub_1CB9139B8(a1, a2, a3, (uint64_t *)a4);
  if (*((_DWORD *)a5 + 2) < *(_DWORD *)(a4 + 8))
  {
    uint64_t v19 = *(void *)a4;
    int v23 = *(_DWORD *)(a4 + 8);
    uint64_t v27 = *(void *)(a4 + 16);
    *(void *)(a4 + 16) = 0;
    uint64_t v11 = *a5;
    *(_DWORD *)(a4 + 8) = *((_DWORD *)a5 + 2);
    *(void *)a4 = v11;
    sub_1CB9138A0((uint64_t *)(a4 + 16), a5 + 2);
    *a5 = v19;
    *((_DWORD *)a5 + 2) = v23;
    uint64_t result = sub_1CB9138A0(a5 + 2, &v27);
    if ((v27 & 4) != 0)
    {
      unint64_t v12 = (void **)(v27 & 0xFFFFFFFFFFFFFFF8);
      if ((v27 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        if (*v12 != v12 + 2) {
          free(*v12);
        }
        uint64_t result = (uint64_t *)MEMORY[0x1D25D9CE0](v12, 0x1080C40ED926357);
      }
    }
    if (*(_DWORD *)(a4 + 8) < *(_DWORD *)(a3 + 8))
    {
      uint64_t v20 = *(void *)a3;
      int v24 = *(_DWORD *)(a3 + 8);
      uint64_t v27 = *(void *)(a3 + 16);
      *(void *)(a3 + 16) = 0;
      uint64_t v13 = *(void *)a4;
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
      *(void *)a3 = v13;
      sub_1CB9138A0((uint64_t *)(a3 + 16), (uint64_t *)(a4 + 16));
      *(void *)a4 = v20;
      *(_DWORD *)(a4 + 8) = v24;
      uint64_t result = sub_1CB9138A0((uint64_t *)(a4 + 16), &v27);
      if ((v27 & 4) != 0)
      {
        unint64_t v14 = (void **)(v27 & 0xFFFFFFFFFFFFFFF8);
        if ((v27 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          if (*v14 != v14 + 2) {
            free(*v14);
          }
          uint64_t result = (uint64_t *)MEMORY[0x1D25D9CE0](v14, 0x1080C40ED926357);
        }
      }
      if (*(_DWORD *)(a3 + 8) < *(_DWORD *)(a2 + 8))
      {
        uint64_t v21 = *(void *)a2;
        int v25 = *(_DWORD *)(a2 + 8);
        uint64_t v27 = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = 0;
        uint64_t v15 = *(void *)a3;
        *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
        *(void *)a2 = v15;
        sub_1CB9138A0((uint64_t *)(a2 + 16), (uint64_t *)(a3 + 16));
        *(void *)a3 = v21;
        *(_DWORD *)(a3 + 8) = v25;
        uint64_t result = sub_1CB9138A0((uint64_t *)(a3 + 16), &v27);
        if ((v27 & 4) != 0)
        {
          int v16 = (void **)(v27 & 0xFFFFFFFFFFFFFFF8);
          if ((v27 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            if (*v16 != v16 + 2) {
              free(*v16);
            }
            uint64_t result = (uint64_t *)MEMORY[0x1D25D9CE0](v16, 0x1080C40ED926357);
          }
        }
        if (*(_DWORD *)(a2 + 8) < *(_DWORD *)(a1 + 8))
        {
          uint64_t v22 = *(void *)a1;
          int v26 = *(_DWORD *)(a1 + 8);
          uint64_t v27 = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = 0;
          uint64_t v17 = *(void *)a2;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
          *(void *)a1 = v17;
          sub_1CB9138A0((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
          *(void *)a2 = v22;
          *(_DWORD *)(a2 + 8) = v26;
          uint64_t result = sub_1CB9138A0((uint64_t *)(a2 + 16), &v27);
          if ((v27 & 4) != 0)
          {
            uint64_t v18 = (void **)(v27 & 0xFFFFFFFFFFFFFFF8);
            if ((v27 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if (*v18 != v18 + 2) {
                free(*v18);
              }
              return (uint64_t *)MEMORY[0x1D25D9CE0](v18, 0x1080C40ED926357);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1CB9132A0(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  char v5 = result;
  int v6 = *((_DWORD *)a2 + 2);
  int v7 = *((_DWORD *)a3 + 2);
  if (v6 >= *((_DWORD *)result + 2))
  {
    if (v7 < v6)
    {
      uint64_t v19 = *a2;
      int v24 = *((_DWORD *)a2 + 2);
      uint64_t v28 = a2[2];
      a2[2] = 0;
      uint64_t v11 = *a3;
      *((_DWORD *)a2 + 2) = *((_DWORD *)a3 + 2);
      *a2 = v11;
      sub_1CB9138A0(a2 + 2, a3 + 2);
      *a3 = v19;
      *((_DWORD *)a3 + 2) = v24;
      uint64_t result = sub_1CB9138A0(a3 + 2, &v28);
      if ((v28 & 4) != 0)
      {
        unint64_t v12 = (void **)(v28 & 0xFFFFFFFFFFFFFFF8);
        if ((v28 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          if (*v12 != v12 + 2) {
            free(*v12);
          }
          uint64_t result = (uint64_t *)MEMORY[0x1D25D9CE0](v12, 0x1080C40ED926357);
        }
      }
      if (*((_DWORD *)a2 + 2) < *((_DWORD *)v5 + 2))
      {
        uint64_t v20 = *v5;
        int v25 = *((_DWORD *)v5 + 2);
        uint64_t v28 = v5[2];
        v5[2] = 0;
        uint64_t v13 = *a2;
        *((_DWORD *)v5 + 2) = *((_DWORD *)a2 + 2);
        *char v5 = v13;
        sub_1CB9138A0(v5 + 2, a2 + 2);
        *a2 = v20;
        *((_DWORD *)a2 + 2) = v25;
        uint64_t v10 = a2 + 2;
        goto LABEL_13;
      }
    }
  }
  else
  {
    uint64_t v8 = result + 2;
    if (v7 < v6)
    {
      uint64_t v18 = *v5;
      int v23 = *((_DWORD *)v5 + 2);
      uint64_t v28 = v5[2];
      v5[2] = 0;
      uint64_t v9 = *a3;
      *((_DWORD *)v5 + 2) = *((_DWORD *)a3 + 2);
      *char v5 = v9;
      sub_1CB9138A0(v8, a3 + 2);
      *a3 = v18;
      *((_DWORD *)a3 + 2) = v23;
      uint64_t v10 = a3 + 2;
LABEL_13:
      uint64_t result = sub_1CB9138A0(v10, &v28);
      if ((v28 & 4) != 0)
      {
        uint64_t v17 = (void **)(v28 & 0xFFFFFFFFFFFFFFF8);
        if ((v28 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          if (*v17 != v17 + 2) {
            free(*v17);
          }
          return (uint64_t *)MEMORY[0x1D25D9CE0](v17, 0x1080C40ED926357);
        }
      }
      return result;
    }
    uint64_t v21 = *v5;
    int v26 = *((_DWORD *)v5 + 2);
    uint64_t v28 = v5[2];
    v5[2] = 0;
    uint64_t v14 = *a2;
    *((_DWORD *)v5 + 2) = *((_DWORD *)a2 + 2);
    *char v5 = v14;
    sub_1CB9138A0(v8, a2 + 2);
    *a2 = v21;
    *((_DWORD *)a2 + 2) = v26;
    uint64_t result = sub_1CB9138A0(a2 + 2, &v28);
    if ((v28 & 4) != 0)
    {
      uint64_t v15 = (void **)(v28 & 0xFFFFFFFFFFFFFFF8);
      if ((v28 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        if (*v15 != v15 + 2) {
          free(*v15);
        }
        uint64_t result = (uint64_t *)MEMORY[0x1D25D9CE0](v15, 0x1080C40ED926357);
      }
    }
    if (*((_DWORD *)a3 + 2) < *((_DWORD *)a2 + 2))
    {
      uint64_t v22 = *a2;
      int v27 = *((_DWORD *)a2 + 2);
      uint64_t v28 = a2[2];
      a2[2] = 0;
      uint64_t v16 = *a3;
      *((_DWORD *)a2 + 2) = *((_DWORD *)a3 + 2);
      *a2 = v16;
      sub_1CB9138A0(a2 + 2, a3 + 2);
      *a3 = v22;
      *((_DWORD *)a3 + 2) = v27;
      uint64_t v10 = a3 + 2;
      goto LABEL_13;
    }
  }
  return result;
}

BOOL sub_1CB9135C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_DWORD *)(a2 - 16) < *(_DWORD *)(a1 + 8))
      {
        uint64_t v17 = *(void *)a1;
        int v19 = *(_DWORD *)(a1 + 8);
        uint64_t v21 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = 0;
        uint64_t v6 = *(void *)(a2 - 24);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 - 16);
        *(void *)a1 = v6;
        sub_1CB9138A0((uint64_t *)(a1 + 16), (uint64_t *)(a2 - 8));
        *(void *)(a2 - 24) = v17;
        *(_DWORD *)(a2 - 16) = v19;
        sub_1CB9138A0((uint64_t *)(a2 - 8), &v21);
        if ((v21 & 4) != 0)
        {
          int v7 = (void **)(v21 & 0xFFFFFFFFFFFFFFF8);
          if ((v21 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            if (*v7 != v7 + 2) {
              free(*v7);
            }
            MEMORY[0x1D25D9CE0](v7, 0x1080C40ED926357);
          }
        }
        return 1;
      }
      return result;
    case 3uLL:
      sub_1CB9132A0((uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_1CB9139B8(a1, a1 + 24, a1 + 48, (uint64_t *)(a2 - 24));
      return 1;
    case 5uLL:
      sub_1CB912F8C(a1, a1 + 24, a1 + 48, a1 + 72, (uint64_t *)(a2 - 24));
      return 1;
    default:
      uint64_t v8 = a1 + 48;
      sub_1CB9132A0((uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48));
      uint64_t v9 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    if (*(_DWORD *)(v9 + 8) < *(_DWORD *)(v8 + 8))
    {
      uint64_t v18 = *(void *)v9;
      int v20 = *(_DWORD *)(v9 + 8);
      uint64_t v21 = *(void *)(v9 + 16);
      *(void *)(v9 + 16) = 0;
      uint64_t v12 = v10;
      while (1)
      {
        uint64_t v13 = a1 + v12;
        *(void *)(v13 + 72) = *(void *)(a1 + v12 + 48);
        *(_DWORD *)(v13 + 80) = *(_DWORD *)(a1 + v12 + 56);
        uint64_t v14 = (uint64_t *)(a1 + v12 + 64);
        sub_1CB9138A0((uint64_t *)(a1 + v12 + 88), v14);
        if (v12 == -48) {
          break;
        }
        v12 -= 24;
        if (v20 >= *(_DWORD *)(v13 + 32))
        {
          uint64_t v15 = a1 + v12 + 72;
          goto LABEL_16;
        }
      }
      uint64_t v15 = a1;
LABEL_16:
      *(void *)uint64_t v15 = v18;
      *(_DWORD *)(v15 + 8) = v20;
      sub_1CB9138A0(v14, &v21);
      if ((v21 & 4) != 0)
      {
        uint64_t v16 = (void **)(v21 & 0xFFFFFFFFFFFFFFF8);
        if ((v21 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          if (*v16 != v16 + 2) {
            free(*v16);
          }
          MEMORY[0x1D25D9CE0](v16, 0x1080C40ED926357);
        }
      }
      if (++v11 == 8) {
        return v9 + 24 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 24;
    v9 += 24;
    if (v9 == a2) {
      return 1;
    }
  }
}

uint64_t *sub_1CB9138A0(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *a2;
    if ((unint64_t)*a2 >= 8)
    {
      unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFF8;
      if ((v4 & 4) == 0 || !v5 || *(_DWORD *)(v5 + 8))
      {
        uint64_t v6 = *a1;
        if ((*a1 & 4) != 0)
        {
          unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFF8;
          if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            if ((v4 & 4) == 0)
            {
              *(_DWORD *)(v7 + 8) = 0;
              if (!*(_DWORD *)(v7 + 12)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              **(void **)unint64_t v7 = v5;
              ++*(_DWORD *)(v7 + 8);
              goto LABEL_19;
            }
            if (*(void *)v7 != v7 + 16) {
              free(*(void **)v7);
            }
            MEMORY[0x1D25D9CE0](v7, 0x1080C40ED926357);
            uint64_t v4 = *a2;
          }
        }
        *a1 = v4;
LABEL_19:
        *a2 = 0;
        return a1;
      }
    }
    if ((*a1 & 4) != 0)
    {
      unint64_t v8 = *a1 & 0xFFFFFFFFFFFFFFF8;
      if (v8) {
        *(_DWORD *)(v8 + 8) = 0;
      }
    }
    else
    {
      *a1 = 0;
    }
  }
  return a1;
}

uint64_t *sub_1CB9139B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  BOOL result = sub_1CB9132A0((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  if (*((_DWORD *)a4 + 2) < *(_DWORD *)(a3 + 8))
  {
    uint64_t v15 = *(void *)a3;
    int v18 = *(_DWORD *)(a3 + 8);
    uint64_t v21 = *(void *)(a3 + 16);
    *(void *)(a3 + 16) = 0;
    uint64_t v9 = *a4;
    *(_DWORD *)(a3 + 8) = *((_DWORD *)a4 + 2);
    *(void *)a3 = v9;
    sub_1CB9138A0((uint64_t *)(a3 + 16), a4 + 2);
    *a4 = v15;
    *((_DWORD *)a4 + 2) = v18;
    BOOL result = sub_1CB9138A0(a4 + 2, &v21);
    if ((v21 & 4) != 0)
    {
      uint64_t v10 = (void **)(v21 & 0xFFFFFFFFFFFFFFF8);
      if ((v21 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        if (*v10 != v10 + 2) {
          free(*v10);
        }
        BOOL result = (uint64_t *)MEMORY[0x1D25D9CE0](v10, 0x1080C40ED926357);
      }
    }
    if (*(_DWORD *)(a3 + 8) < *(_DWORD *)(a2 + 8))
    {
      uint64_t v16 = *(void *)a2;
      int v19 = *(_DWORD *)(a2 + 8);
      uint64_t v21 = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = 0;
      uint64_t v11 = *(void *)a3;
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(void *)a2 = v11;
      sub_1CB9138A0((uint64_t *)(a2 + 16), (uint64_t *)(a3 + 16));
      *(void *)a3 = v16;
      *(_DWORD *)(a3 + 8) = v19;
      BOOL result = sub_1CB9138A0((uint64_t *)(a3 + 16), &v21);
      if ((v21 & 4) != 0)
      {
        uint64_t v12 = (void **)(v21 & 0xFFFFFFFFFFFFFFF8);
        if ((v21 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          if (*v12 != v12 + 2) {
            free(*v12);
          }
          BOOL result = (uint64_t *)MEMORY[0x1D25D9CE0](v12, 0x1080C40ED926357);
        }
      }
      if (*(_DWORD *)(a2 + 8) < *(_DWORD *)(a1 + 8))
      {
        uint64_t v17 = *(void *)a1;
        int v20 = *(_DWORD *)(a1 + 8);
        uint64_t v21 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = 0;
        uint64_t v13 = *(void *)a2;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(void *)a1 = v13;
        sub_1CB9138A0((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
        *(void *)a2 = v17;
        *(_DWORD *)(a2 + 8) = v20;
        BOOL result = sub_1CB9138A0((uint64_t *)(a2 + 16), &v21);
        if ((v21 & 4) != 0)
        {
          uint64_t v14 = (void **)(v21 & 0xFFFFFFFFFFFFFFF8);
          if ((v21 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            if (*v14 != v14 + 2) {
              free(*v14);
            }
            return (uint64_t *)MEMORY[0x1D25D9CE0](v14, 0x1080C40ED926357);
          }
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1CB913C18(uint64_t *result, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = result;
  uint64_t v6 = *result;
  unint64_t v7 = (unsigned int *)(*result + 20 * a3);
  unint64_t v8 = v7 + 3;
  unsigned int v9 = v7[3];
  if (a3 != (unint64_t)v9)
  {
    unsigned int v10 = *(_DWORD *)(v6 + 20 * a3 + 16);
    if (*(_DWORD *)(v6 + 20 * v9 + 16) == -1)
    {
      *(_WORD *)(result[22] + 2 * *v7) = v10;
      *(_DWORD *)(v6 + 20 * v10 + 12) = v9;
    }
    else if (v10 == -1)
    {
      BOOL result = sub_1CB911460(result, *v7);
      *(_DWORD *)(*result + 20 * v11 + 12) = v9;
      *(_DWORD *)(v6 + 20 * *v8 + 16) = -1;
    }
    else
    {
      *(_DWORD *)(v6 + 20 * v10 + 12) = v9;
      *(_DWORD *)(v6 + 20 * *v8 + 16) = v10;
    }
  }
  *unint64_t v8 = -1;
  int v12 = *((_DWORD *)v4 + 49);
  *(_DWORD *)(v6 + 20 * a3 + 16) = *((_DWORD *)v4 + 48);
  *((_DWORD *)v4 + 48) = a3;
  *((_DWORD *)v4 + 49) = v12 + 1;
  return result;
}

uint64_t sub_1CB913D18(uint64_t a1, unsigned int *a2)
{
  if (*(void *)(a1 + 64))
  {
    int v19 = (void *)(a1 + 56);
    uint64_t v18 = *(void *)(a1 + 56);
    unsigned int v20 = *a2;
    if (v18)
    {
      uint64_t result = 1;
      do
      {
        while (1)
        {
          uint64_t v21 = (void *)v18;
          unsigned int v22 = *(_DWORD *)(v18 + 28);
          if (v20 >= v22) {
            break;
          }
          uint64_t v18 = *v21;
          int v19 = v21;
          if (!*v21) {
            goto LABEL_33;
          }
        }
        if (v22 >= v20) {
          return result;
        }
        uint64_t v18 = v21[1];
      }
      while (v18);
      int v19 = v21 + 1;
    }
    else
    {
      uint64_t v21 = (void *)(a1 + 56);
    }
LABEL_33:
    int v23 = operator new(0x20uLL);
    v23[7] = v20;
    *(void *)int v23 = 0;
    *((void *)v23 + 1) = 0;
    *((void *)v23 + 2) = v21;
    *int v19 = v23;
    uint64_t v24 = **(void **)(a1 + 48);
    if (v24)
    {
      *(void *)(a1 + 48) = v24;
      int v23 = (_DWORD *)*v19;
    }
    sub_1CB8358B8(*(uint64_t **)(a1 + 56), (uint64_t *)v23);
    ++*(void *)(a1 + 64);
  }
  else
  {
    uint64_t v4 = *(unsigned int *)(a1 + 8);
    unsigned int v5 = *a2;
    if (v4)
    {
      uint64_t v7 = 4 * v4;
      unint64_t v8 = *(_DWORD **)a1;
      while (*v8 != v5)
      {
        ++v8;
        v7 -= 4;
        if (!v7) {
          goto LABEL_10;
        }
      }
      if (v7) {
        return 1;
      }
LABEL_10:
      if (v4 <= 7) {
        goto LABEL_3;
      }
      unsigned int v9 = (void **)(a1 + 48);
      do
      {
        uint64_t v10 = *(void *)a1 + 4 * v4;
        uint64_t v11 = *(void *)(a1 + 56);
        int v12 = (void *)(a1 + 56);
        uint64_t v13 = (void *)(a1 + 56);
        if (v11)
        {
          unsigned int v14 = *(_DWORD *)(v10 - 4);
          do
          {
            while (1)
            {
              uint64_t v13 = (void *)v11;
              unsigned int v15 = *(_DWORD *)(v11 + 28);
              if (v14 >= v15) {
                break;
              }
              uint64_t v11 = *v13;
              int v12 = v13;
              if (!*v13) {
                goto LABEL_19;
              }
            }
            if (v15 >= v14) {
              goto LABEL_22;
            }
            uint64_t v11 = v13[1];
          }
          while (v11);
          int v12 = v13 + 1;
        }
LABEL_19:
        uint64_t v16 = operator new(0x20uLL);
        v16[7] = *(_DWORD *)(v10 - 4);
        *(void *)uint64_t v16 = 0;
        *((void *)v16 + 1) = 0;
        *((void *)v16 + 2) = v13;
        *int v12 = v16;
        uint64_t v17 = (void *)**v9;
        if (v17)
        {
          *unsigned int v9 = v17;
          uint64_t v16 = (_DWORD *)*v12;
        }
        sub_1CB8358B8(*(uint64_t **)(a1 + 56), (uint64_t *)v16);
        ++*(void *)(a1 + 64);
        LODWORD(v4) = *(_DWORD *)(a1 + 8);
LABEL_22:
        LODWORD(v4) = v4 - 1;
        *(_DWORD *)(a1 + 8) = v4;
      }
      while (v4);
      sub_1CB84AEB8((uint64_t **)(a1 + 48), a2, a2);
    }
    else
    {
LABEL_3:
      if (v4 >= *(_DWORD *)(a1 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a1 + 4 * v4) = v5;
      ++*(_DWORD *)(a1 + 8);
    }
  }
  return 0x100000001;
}

char **sub_1CB913F50(char **a1)
{
  unsigned int v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 80 * v3;
    do
    {
      unsigned int v5 = *(char **)&v2[v4 - 72];
      if (&v2[v4 - 56] != v5)
      {
        uint64_t v7 = v4;
        unint64_t v8 = v2;
        free(v5);
        uint64_t v4 = v7;
        unsigned int v2 = v8;
      }
      v4 -= 80;
    }
    while (v4);
    unsigned int v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

void sub_1CB913FD8(uint64_t a1)
{
}

uint64_t sub_1CB914074(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCBEB80;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x600000001;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  *(void *)a1 = &unk_1F25EE040;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCBEB88, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CB913FD8;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCBEB88, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CB91416C()
{
}

void sub_1CB9141A8(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  uint64_t v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    uint64_t v4 = a1;
    free(v1);
    a1 = v4;
  }
  unsigned int v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    unsigned int v5 = a1;
    free(v2);
    a1 = v5;
  }
  uint64_t v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CB91425C(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  unsigned int v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CB914308()
{
  return "AGX1 WAR RDAR16355991 pass";
}

void sub_1CB914318(llvm::PassRegistry *a1, uint64_t a2)
{
  uint64_t v4 = a2 + 112;
  v6[0] = &unk_1F2617E40;
  v6[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v6);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LiveIntervals::ID);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

uint64_t sub_1CB9143E4(void *a1, uint64_t *a2)
{
  a1[31] = (*(uint64_t (**)(uint64_t))(*(void *)a2[2] + 104))(a2[2]);
  a1[32] = a2[5];
  a1[33] = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2[1] + 16))(a2[1], *a2);
  uint64_t v4 = (uint64_t *)a1[1];
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_4:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v5 != &llvm::SlotIndexes::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  a1[34] = (*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::SlotIndexes::ID);
  unint64_t v8 = (uint64_t *)a1[1];
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  if (v9 == v10)
  {
LABEL_9:
    uint64_t v11 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v9 != &llvm::LiveIntervals::ID)
    {
      v9 += 16;
      if (v9 == v10) {
        goto LABEL_9;
      }
    }
    uint64_t v11 = *(void *)(v9 + 8);
  }
  a1[35] = (*(uint64_t (**)(uint64_t, void *))(*(void *)v11 + 96))(v11, &llvm::LiveIntervals::ID);
  if (*(unsigned char *)(a1[33] + 291))
  {
    uint64_t v59 = *a2;
    if ((*(_WORD *)(*a2 + 18) & 0x3FF0) == 0x690)
    {
      uint64_t v12 = a2[43];
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 592))(v12, 103);
      if ((v13 || (uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 592))(v12, 104)) != 0)
        && (*(_WORD *)(v13 + 18) & 0x3FF0) == 0x670)
      {
        uint64_t v14 = *(void *)(v13 + 80);
        if (v14 != v13 + 72)
        {
          char v15 = 0;
          do
          {
            if (v14) {
              uint64_t v16 = v14 - 24;
            }
            else {
              uint64_t v16 = 0;
            }
            uint64_t v17 = v16 + 40;
            for (uint64_t i = *(void *)(v16 + 48); i != v17; uint64_t i = *(void *)(i + 8))
            {
              if (i) {
                uint64_t v19 = i - 24;
              }
              else {
                uint64_t v19 = 0;
              }
              if (*(unsigned char *)(v19 + 16) == 84)
              {
                uint64_t v20 = *(void *)(v19 - 32);
                if (v20)
                {
                  if (!*(unsigned char *)(v20 + 16)
                    && *(void *)(v20 + 24) == *(void *)(v19 + 72)
                    && (*(unsigned char *)(v20 + 33) & 0x20) != 0)
                  {
                    int v21 = *(_DWORD *)(*(void *)(i - 56) + 36);
                    if ((v21 - 1994) >= 2)
                    {
                      if (v21 == 1997)
                      {
                        uint64_t v22 = *(void *)(i - 24 - 32 * (*(_DWORD *)(i - 4) & 0x7FFFFFF) + 64);
                        int v23 = (void *)(v22 + 24);
                        if (*(_DWORD *)(v22 + 32) >= 0x41u) {
                          int v23 = (void *)*v23;
                        }
                        if (*v23 == 32) {
                          return 0;
                        }
                      }
                    }
                    else
                    {
                      char v15 = 1;
                    }
                  }
                }
              }
            }
            uint64_t v14 = *(void *)(v14 + 8);
          }
          while (v14 != v13 + 72);
          if (v15)
          {
            uint64_t v24 = a2 + 40;
            for (uint64_t j = (void *)a2[41]; j != v24; uint64_t j = (void *)j[1])
            {
              for (uint64_t k = j[7]; (void *)k != j + 6; uint64_t k = *(void *)(k + 8))
              {
                if (**(_WORD **)(k + 16) == 12149)
                {
                  int v27 = *(unsigned __int8 **)(k + 56);
                  __int16 v65 = v27;
                  if (v27) {
                    llvm::MetadataTracking::track((uint64_t)&v65, v27, 2);
                  }
                  uint64_t v28 = a1[33];
                  LODWORD(v67) = 0;
                  BOOL v61 = sub_1CD3CA314(v28, v59, "LoadCMode", &v67);
                  uint64_t v63 = v67;
                  uint64_t v29 = a1[33];
                  LODWORD(v67) = 0;
                  BOOL v60 = sub_1CD3CA314(v29, v59, "LoadSLCMode", &v67);
                  uint64_t v62 = v67;
                  uint64_t v30 = a1[32];
                  int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v30, "", 0);
                  unint64_t v64 = IncompleteVirtualRegister & 0x7FFFFFFF;
                  *(void *)(*(void *)(v30 + 24) + 16 * v64) = &off_1E66A4340;
                  uint64_t v32 = *(void *)(v30 + 8);
                  if (v32) {
                    (*(void (**)(uint64_t))(*(void *)v32 + 24))(v32);
                  }
                  uint64_t v33 = *(void *)(a1[31] + 8);
                  unsigned int v34 = (llvm::MachineFunction *)j[4];
                  uint64_t v66 = v65;
                  if (v65) {
                    llvm::MetadataTracking::track((uint64_t)&v66, v65, 2);
                  }
                  uint64_t v35 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v34, v33 + 564624, &v66, 0);
                  if (!v66)
                  {
LABEL_56:
                    uint64_t v36 = j[5];
                    *(void *)(v35 + 24) = v36;
                    uint64_t v37 = *(void *)(v36 + 32);
                    uint64_t v38 = *(unsigned int *)(v35 + 40);
                    if (v38)
                    {
                      uint64_t v47 = *(void *)(v35 + 32);
                      uint64_t v48 = *(void *)(v37 + 40);
                      uint64_t v49 = 32 * v38;
                      do
                      {
                        if (!*(unsigned char *)v47)
                        {
                          uint64_t v50 = *(unsigned int *)(v47 + 4);
                          if ((int)v50 >= 0) {
                            unsigned int v51 = (uint64_t *)(*(void *)(v48 + 272) + 8 * v50);
                          }
                          else {
                            unsigned int v51 = (uint64_t *)(*(void *)(v48 + 24) + 16 * (v50 & 0x7FFFFFFF) + 8);
                          }
                          uint64_t v52 = *v51;
                          if (*v51)
                          {
                            uint64_t v53 = *(void *)(v52 + 16);
                            *(void *)(v52 + 16) = v47;
                            *(void *)(v47 + 16) = v53;
                            if (*(unsigned char *)(v47 + 3))
                            {
                              *(void *)(v47 + 24) = v52;
                            }
                            else
                            {
                              *(void *)(v47 + 24) = 0;
                              unsigned int v51 = (uint64_t *)(v53 + 24);
                            }
                          }
                          else
                          {
                            *(void *)(v47 + 16) = v47;
                            *(void *)(v47 + 24) = 0;
                          }
                          *unsigned int v51 = v47;
                        }
                        v47 += 32;
                        v49 -= 32;
                      }
                      while (v49);
                    }
                    uint64_t v39 = *(void *)(v37 + 728);
                    if (v39) {
                      (*(void (**)(uint64_t, uint64_t))(*(void *)v39 + 24))(v39, v35);
                    }
                    unint64_t v40 = *(void *)k & 0xFFFFFFFFFFFFFFF8;
                    *(void *)uint64_t v35 = v40 | *(void *)v35 & 7;
                    *(void *)(v35 + 8) = k;
                    *(void *)(v40 + 8) = v35;
                    *(void *)uint64_t k = *(void *)k & 7 | v35;
                    *((void *)&v67 + 1) = 0;
                    long long v68 = 0uLL;
                    LODWORD(v67) = 0x1000000;
                    DWORD1(v67) = IncompleteVirtualRegister;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v34, (const llvm::MachineOperand *)&v67);
                    LODWORD(v67) = 1;
                    *((void *)&v67 + 1) = 0;
                    *(void *)&long long v68 = 0;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v34, (const llvm::MachineOperand *)&v67);
                    LODWORD(v67) = 1;
                    uint64_t v41 = v63;
                    if (!v61) {
                      uint64_t v41 = 0;
                    }
                    *((void *)&v67 + 1) = 0;
                    *(void *)&long long v68 = v41;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v34, (const llvm::MachineOperand *)&v67);
                    LODWORD(v67) = 1;
                    uint64_t v42 = v62;
                    if (!v60) {
                      uint64_t v42 = 1;
                    }
                    *((void *)&v67 + 1) = 0;
                    *(void *)&long long v68 = v42;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v34, (const llvm::MachineOperand *)&v67);
                    LODWORD(v67) = 1;
                    *((void *)&v67 + 1) = 0;
                    *(void *)&long long v68 = 0;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v34, (const llvm::MachineOperand *)&v67);
                    LODWORD(v67) = 1;
                    *((void *)&v67 + 1) = 0;
                    *(void *)&long long v68 = 0;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v34, (const llvm::MachineOperand *)&v67);
                    long long v67 = 0u;
                    long long v68 = 0u;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v34, (const llvm::MachineOperand *)&v67);
                    sub_1CB914C88(*(void *)(a1[35] + 288), v35, 0);
                    uint64_t v43 = a1[35];
                    unint64_t v44 = *(unsigned int *)(v43 + 416);
                    BOOL v45 = v64 >= v44;
                    unint64_t v46 = v64 - v44;
                    if (v45) {
                      sub_1CB9153B8(v43 + 408, v46 + 1, *(void *)(v43 + 424));
                    }
                    operator new();
                  }
                  int v54 = *v66;
                  if ((v54 - 4) > 0x1E)
                  {
                    if ((v54 - 3) >= 0xFFFFFFFE) {
                      unsigned int v57 = v66;
                    }
                    else {
                      unsigned int v57 = 0;
                    }
                    if ((v54 - 3) < 0xFFFFFFFE)
                    {
                      if (v54 == 3) {
                        *((void *)v66 + 1) = 0;
                      }
                      goto LABEL_56;
                    }
                    unint64_t v56 = (unint64_t)(v57 + 8);
                  }
                  else
                  {
                    if ((v66[1] & 0x7F) != 2 && !*((_DWORD *)v66 + 3)) {
                      goto LABEL_56;
                    }
                    uint64_t v55 = *((void *)v66 + 2);
                    if ((v55 & 4) == 0) {
                      goto LABEL_56;
                    }
                    unint64_t v56 = v55 & 0xFFFFFFFFFFFFFFF8;
                    if (!v56) {
                      goto LABEL_56;
                    }
                  }
                  *(void *)&long long v67 = &v66;
                  sub_1CC5FA668(v56 + 16, &v67);
                  goto LABEL_56;
                }
                if ((*(unsigned char *)k & 4) == 0)
                {
                  while ((*(_WORD *)(k + 44) & 8) != 0)
                    uint64_t k = *(void *)(k + 8);
                }
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

unint64_t sub_1CB914C88(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    unint64_t v16 = sub_1CB914F84(a1, a2) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v15 = *(void *)v16;
    goto LABEL_17;
  }
  uint64_t v5 = *(void *)(a2 + 24);
  unint64_t v6 = a2;
  while (v6 != *(void *)(v5 + 56))
  {
    unint64_t v6 = *(void *)v6 & 0xFFFFFFFFFFFFFFF8;
    if (!v6 || (*(unsigned char *)v6 & 4) == 0)
    {
      while ((*(_WORD *)(v6 + 44) & 4) != 0)
        unint64_t v6 = *(void *)v6 & 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v7 = *(void *)(a1 + 368);
    uint64_t v8 = *(unsigned int *)(a1 + 384);
    if (!v8) {
      goto LABEL_40;
    }
    LODWORD(v9) = ((v6 >> 4) ^ (v6 >> 9)) & (v8 - 1);
    uint64_t v10 = (uint64_t *)(v7 + 16 * v9);
    uint64_t v11 = *v10;
    if (v6 != *v10)
    {
      int v12 = 1;
      while (v11 != -4096)
      {
        int v13 = v9 + v12++;
        uint64_t v9 = v13 & (v8 - 1);
        uint64_t v11 = *(void *)(v7 + 16 * v9);
        if (v6 == v11)
        {
          uint64_t v10 = (uint64_t *)(v7 + 16 * v9);
          goto LABEL_9;
        }
      }
LABEL_40:
      uint64_t v10 = (uint64_t *)(v7 + 16 * v8);
    }
LABEL_9:
    if (v10 != (uint64_t *)(v7 + 16 * v8))
    {
      uint64_t v14 = v10 + 1;
      goto LABEL_16;
    }
  }
  uint64_t v14 = (void *)(*(void *)(a1 + 392) + 16 * *(unsigned int *)(v5 + 24));
LABEL_16:
  unint64_t v15 = *v14 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = *(void *)(v15 + 8);
LABEL_17:
  int v17 = *(_DWORD *)(v15 + 24);
  unsigned int v18 = ((*(_DWORD *)(v16 + 24) - v17) >> 1) & 0x7FFFFFFC;
  int v19 = v18 + v17;
  *(void *)(a1 + 328) += 32;
  uint64_t v20 = *(void *)(a1 + 248);
  if (((v20 + 7) & 0xFFFFFFFFFFFFFFF8) - v20 + 32 > *(void *)(a1 + 256) - v20)
  {
    unsigned int v39 = *(_DWORD *)(a1 + 272) >> 7;
    if (v39 >= 0x1E) {
      LOBYTE(v39) = 30;
    }
    uint64_t v40 = 4096 << v39;
    uint64_t v22 = operator new(4096 << v39, (std::align_val_t)8uLL);
    unsigned int v41 = *(_DWORD *)(a1 + 272);
    if (v41 >= *(_DWORD *)(a1 + 276)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 264) + 8 * v41) = v22;
    ++*(_DWORD *)(a1 + 272);
    *(void *)(a1 + 256) = (char *)v22 + v40;
    unint64_t v21 = (unint64_t)v22;
  }
  else
  {
    unint64_t v21 = (v20 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v22 = (void *)v21;
  }
  *(void *)(a1 + 248) = v22 + 4;
  *uint64_t v22 = 0;
  v22[1] = 0;
  v22[2] = a2;
  *((_DWORD *)v22 + 6) = v19;
  unint64_t v23 = *(void *)v16;
  *uint64_t v22 = *(void *)v16;
  v22[1] = v16;
  *(void *)(v23 + 8) = v22;
  *(void *)unint64_t v16 = v22;
  if (!v18)
  {
    unsigned int v36 = *(_DWORD *)(*v22 + 24);
    do
    {
      v36 += 8;
      *((_DWORD *)v22 + 6) = v36;
      uint64_t v22 = (void *)v22[1];
    }
    while (v22 != (void *)(a1 + 344) && *((_DWORD *)v22 + 6) <= v36);
  }
  unint64_t v24 = v21 & 0xFFFFFFFFFFFFFFF9;
  uint64_t v42 = a2;
  unint64_t v43 = v21 & 0xFFFFFFFFFFFFFFF9;
  int v25 = *(_DWORD *)(a1 + 384);
  if (!v25)
  {
    uint64_t v37 = 0;
LABEL_39:
    uint64_t v38 = sub_1CB9150E4(a1 + 368, (uint64_t)&v42, &v42, v37);
    void *v38 = v42;
    v38[1] = v43;
    return v24;
  }
  uint64_t v26 = *(void *)(a1 + 368);
  int v27 = v25 - 1;
  unsigned int v28 = v27 & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v29 = (void *)(v26 + 16 * v28);
  uint64_t v30 = *v29;
  if (*v29 != a2)
  {
    uint64_t v32 = 0;
    int v33 = 1;
    while (v30 != -4096)
    {
      if (v32) {
        BOOL v34 = 0;
      }
      else {
        BOOL v34 = v30 == -8192;
      }
      if (v34) {
        uint64_t v32 = v29;
      }
      unsigned int v35 = v28 + v33++;
      unsigned int v28 = v35 & v27;
      uint64_t v29 = (void *)(v26 + 16 * v28);
      uint64_t v30 = *v29;
      if (*v29 == a2) {
        return v24;
      }
    }
    if (v32) {
      uint64_t v37 = v32;
    }
    else {
      uint64_t v37 = v29;
    }
    goto LABEL_39;
  }
  return v24;
}

uint64_t sub_1CB914F84(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  while (1)
  {
    if (!a2 || (*(unsigned char *)a2 & 4) == 0)
    {
      while ((*(_WORD *)(a2 + 44) & 8) != 0)
        a2 = *(void *)(a2 + 8);
    }
    a2 = *(void *)(a2 + 8);
    if (a2 == v2 + 48) {
      break;
    }
    uint64_t v3 = *(void *)(a1 + 368);
    uint64_t v4 = *(unsigned int *)(a1 + 384);
    if (!v4) {
      goto LABEL_17;
    }
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    unint64_t v6 = (uint64_t *)(v3 + 16 * v5);
    uint64_t v7 = *v6;
    if (a2 != *v6)
    {
      int v8 = 1;
      while (v7 != -4096)
      {
        int v9 = v5 + v8++;
        uint64_t v5 = v9 & (v4 - 1);
        uint64_t v7 = *(void *)(v3 + 16 * v5);
        if (a2 == v7)
        {
          unint64_t v6 = (uint64_t *)(v3 + 16 * v5);
          goto LABEL_8;
        }
      }
LABEL_17:
      unint64_t v6 = (uint64_t *)(v3 + 16 * v4);
    }
LABEL_8:
    if (v6 != (uint64_t *)(v3 + 16 * v4))
    {
      uint64_t v10 = (uint64_t)(v6 + 1);
      return *(void *)v10;
    }
  }
  uint64_t v10 = *(void *)(a1 + 392) + 16 * *(unsigned int *)(v2 + 24) + 8;
  return *(void *)v10;
}

uint64_t sub_1CB915048(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    uint64_t v7 = (void *)(*a1 + 16 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          uint64_t v10 = v7;
        }
        unsigned int v13 = v6 + v11++;
        unsigned int v6 = v13 & v5;
        uint64_t v7 = (void *)(v4 + 16 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_4;
        }
      }
      uint64_t result = 0;
      if (v10) {
        uint64_t v7 = v10;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

void *sub_1CB9150E4(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1CB915218(a1, v7);
      int v17 = 0;
      sub_1CB915048((uint64_t *)a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    uint64_t v8 = *a4;
    goto LABEL_5;
  }
  sub_1CB915218(a1, 2 * v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (void *)(*(void *)a1 + 16 * v11);
  uint64_t v12 = *a4;
  if (*a3 != *a4)
  {
    unsigned int v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        unsigned int v13 = a4;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a4 = (void *)(*(void *)a1 + 16 * v11);
      uint64_t v12 = *a4;
      if (v8 == *a4) {
        goto LABEL_5;
      }
    }
    if (v13) {
      a4 = v13;
    }
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CB915218(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CB9152E4(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CB9152E4(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  *(void *)(result + 8) = 0;
  uint64_t v3 = *(unsigned int *)(result + 16);
  if (v3)
  {
    uint64_t v4 = *(void **)result;
    uint64_t v5 = 16 * v3;
    do
    {
      *uint64_t v4 = -4096;
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  if (a2 != a3)
  {
    int v6 = 0;
    int v7 = v3 - 1;
    do
    {
      uint64_t v8 = *a2;
      if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        unsigned int v9 = ((v8 >> 4) ^ (v8 >> 9)) & v7;
        uint64_t v10 = (void *)(*(void *)result + 16 * v9);
        uint64_t v11 = *v10;
        if (v8 != *v10)
        {
          unsigned int v13 = 0;
          int v14 = 1;
          while (v11 != -4096)
          {
            if (v13) {
              BOOL v15 = 0;
            }
            else {
              BOOL v15 = v11 == -8192;
            }
            if (v15) {
              unsigned int v13 = v10;
            }
            unsigned int v16 = v9 + v14++;
            unsigned int v9 = v16 & v7;
            uint64_t v10 = (void *)(*(void *)result + 16 * (v16 & v7));
            uint64_t v11 = *v10;
            if (v8 == *v10) {
              goto LABEL_8;
            }
          }
          if (v13) {
            uint64_t v10 = v13;
          }
        }
LABEL_8:
        uint64_t v12 = a2[1];
        *uint64_t v10 = v8;
        v10[1] = v12;
        *(_DWORD *)(result + 8) = ++v6;
      }
      a2 += 2;
    }
    while (a2 != a3);
  }
  return result;
}

uint64_t sub_1CB9153B8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(result + 8);
  if (v3 + a2 > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2)
  {
    uint64_t v4 = (void *)(*(void *)result + 8 * v3);
    uint64_t v5 = a2;
    do
    {
      *v4++ = a3;
      --v5;
    }
    while (v5);
  }
  *(_DWORD *)(result + 8) = v3 + a2;
  return result;
}

void sub_1CB915438()
{
}

void sub_1CB91544C(uint64_t a1, unint64_t *a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  unsigned int v35 = 0;
  if ((unint64_t *)(a3 + 48) == a2)
  {
    unint64_t v10 = *a2 & 0xFFFFFFFFFFFFFFF8;
    if (!v10 || (*(unsigned char *)v10 & 4) == 0)
    {
      while ((*(_WORD *)(v10 + 44) & 4) != 0)
        unint64_t v10 = *(void *)v10 & 0xFFFFFFFFFFFFFFF8;
    }
    unsigned int v9 = (unsigned __int8 **)(v10 + 56);
  }
  else
  {
    unsigned int v9 = (unsigned __int8 **)(a2 + 7);
  }
  if (v9 != &v35 && (uint64_t v11 = *v9, (v35 = v11) != 0))
  {
    llvm::MetadataTracking::track((uint64_t)&v35, v11, 2);
    uint64_t v12 = *(void *)(a5 + 8) + 644640;
    unsigned int v13 = *(llvm::MachineFunction **)(a3 + 32);
    uint64_t v37 = v35;
    if (v35) {
      llvm::MetadataTracking::track((uint64_t)&v37, v35, 2);
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a5 + 8) + 644640;
    unsigned int v13 = *(llvm::MachineFunction **)(a3 + 32);
    uint64_t v37 = 0;
  }
  int v14 = llvm::MachineFunction::CreateMachineInstr(v13, v12, &v37, 0);
  if (v37)
  {
    int v31 = *v37;
    if ((v31 - 4) > 0x1E)
    {
      if ((v31 - 3) >= 0xFFFFFFFE) {
        BOOL v34 = v37;
      }
      else {
        BOOL v34 = 0;
      }
      if ((v31 - 3) < 0xFFFFFFFE)
      {
        if (v31 == 3) {
          *((void *)v37 + 1) = 0;
        }
        goto LABEL_13;
      }
      unint64_t v33 = (unint64_t)(v34 + 8);
    }
    else
    {
      if ((v37[1] & 0x7F) != 2 && !*((_DWORD *)v37 + 3)) {
        goto LABEL_13;
      }
      uint64_t v32 = *((void *)v37 + 2);
      if ((v32 & 4) == 0) {
        goto LABEL_13;
      }
      unint64_t v33 = v32 & 0xFFFFFFFFFFFFFFF8;
      if (!v33) {
        goto LABEL_13;
      }
    }
    v36[0] = &v37;
    sub_1CC5FA668(v33 + 16, v36);
  }
LABEL_13:
  uint64_t v15 = *(void *)(a3 + 40);
  *((void *)v14 + 3) = v15;
  uint64_t v16 = *(void *)(v15 + 32);
  uint64_t v17 = *((unsigned int *)v14 + 10);
  if (v17)
  {
    uint64_t v23 = *((void *)v14 + 4);
    uint64_t v24 = *(void *)(v16 + 40);
    uint64_t v25 = 32 * v17;
    do
    {
      if (!*(unsigned char *)v23)
      {
        uint64_t v26 = *(unsigned int *)(v23 + 4);
        if ((int)v26 >= 0) {
          int v27 = (uint64_t *)(*(void *)(v24 + 272) + 8 * v26);
        }
        else {
          int v27 = (uint64_t *)(*(void *)(v24 + 24) + 16 * (v26 & 0x7FFFFFFF) + 8);
        }
        uint64_t v28 = *v27;
        if (*v27)
        {
          uint64_t v29 = *(void *)(v28 + 16);
          *(void *)(v28 + 16) = v23;
          *(void *)(v23 + 16) = v29;
          if (*(unsigned char *)(v23 + 3))
          {
            *(void *)(v23 + 24) = v28;
          }
          else
          {
            *(void *)(v23 + 24) = 0;
            int v27 = (uint64_t *)(v29 + 24);
          }
        }
        else
        {
          *(void *)(v23 + 16) = v23;
          *(void *)(v23 + 24) = 0;
        }
        uint64_t *v27 = v23;
      }
      v23 += 32;
      v25 -= 32;
    }
    while (v25);
  }
  uint64_t v18 = *(void *)(v16 + 728);
  if (v18) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v18 + 24))(v18, v14);
  }
  unint64_t v19 = *a2 & 0xFFFFFFFFFFFFFFF8;
  *(void *)int v14 = v19 | *(void *)v14 & 7;
  *((void *)v14 + 1) = a2;
  *(void *)(v19 + 8) = v14;
  *a2 = *a2 & 7 | (unint64_t)v14;
  LODWORD(v36[0]) = 1;
  v36[1] = 0;
  v36[2] = a4;
  llvm::MachineInstr::addOperand(v14, v13, (const llvm::MachineOperand *)v36);
  if (v35)
  {
    int v20 = *v35;
    if ((v20 - 4) > 0x1E)
    {
      if ((v20 - 3) >= 0xFFFFFFFE) {
        unint64_t v21 = v35;
      }
      else {
        unint64_t v21 = 0;
      }
      if ((v20 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v22 = (unint64_t)(v21 + 8);
LABEL_26:
        v36[0] = &v35;
        sub_1CC5FA668(v22 + 16, v36);
        return;
      }
      if (v20 == 3) {
        *((void *)v35 + 1) = 0;
      }
    }
    else if ((v35[1] & 0x7F) == 2 || *((_DWORD *)v35 + 3))
    {
      uint64_t v30 = *((void *)v35 + 2);
      if ((v30 & 4) != 0)
      {
        unint64_t v22 = v30 & 0xFFFFFFFFFFFFFFF8;
        if (v22) {
          goto LABEL_26;
        }
      }
    }
  }
}

BOOL sub_1CB91575C(uint64_t a1, uint64_t a2)
{
  int v2 = **(unsigned __int16 **)(a2 + 16);
  return (v2 - 3745) < 0x18 || sub_1CB9046B0(v2);
}

uint64_t sub_1CB91577C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(unsigned __int16 **)(a2 + 16);
  int v5 = *v4;
  BOOL v6 = sub_1CB9046B0(*v4);
  int v7 = **(unsigned __int16 **)(a3 + 16);
  if (v6 && (v7 & 0xFFFE) == 11972) {
    return 0;
  }
  if ((v5 - 11956) < 0x10) {
    goto LABEL_8;
  }
  if ((v7 - 3745) < 0x18) {
    return 0;
  }
  if ((v5 - 13374) >= 0x20)
  {
LABEL_8:
    if (sub_1CB9046B0(v7)) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_1CB91580C(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(*(void *)(a2 + 16) + 17) >> 2) & 1;
}

BOOL sub_1CB91581C(uint64_t a1, uint64_t a2)
{
  return (*(unsigned char *)(*(void *)(a2 + 16) + 16) & 1) == 0;
}

BOOL sub_1CB915830(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)((*(uint64_t (**)(void, void))(**(void **)(*(void *)(*(void *)(a2 + 24) + 32)
                                                                           + 8)
                                                             + 16))(*(void *)(*(void *)(*(void *)(a2 + 24) + 32) + 8), **(void **)(*(void *)(a2 + 24) + 32))+ 281))return 0;
  uint64_t v3 = *(unsigned __int16 **)(a2 + 16);
  int v4 = *v3;
  if ((v4 & 0xFFFC) == 0x2EB0) {
    return 0;
  }
  return (*((unsigned char *)v3 + 17) & 0xC0) != 0 || (v4 - 11851) < 0x10 || (v4 - 11956) < 0x10;
}

BOOL sub_1CB9158DC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)((*(uint64_t (**)(void, void))(**(void **)(*(void *)(*(void *)(a2 + 24) + 32)
                                                                           + 8)
                                                             + 16))(*(void *)(*(void *)(*(void *)(a2 + 24) + 32) + 8), **(void **)(*(void *)(a2 + 24) + 32))+ 281))return 0;
  int v5 = *(unsigned __int16 **)(a2 + 16);
  if ((*((unsigned char *)v5 + 17) & 0x80) == 0 || (*(unsigned char *)(*(void *)(a3 + 16) + 17) & 0xC0) == 0)
  {
    if (*v5 - 11956 <= 0xF)
    {
      int v6 = **(unsigned __int16 **)(a3 + 16);
      if ((v6 - 11851) < 0x10 || (v6 - 11956) < 0x10) {
        return 1;
      }
    }
    return 0;
  }
  if (!sub_1CD3D47BC(a2, &v11, &v15, &v13)
    || !sub_1CD3D47BC(a3, &v12, &v16, &v14)
    || v11 != v12
    || v13 + v15 > v16 && v14 + v16 > v15)
  {
    return 1;
  }
  if (!v11) {
    return 0;
  }
  if (*(void *)(*(void *)(a3 + 24) + 56) == a3) {
    return 1;
  }
  int v9 = 15;
  do
  {
    a3 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
    BOOL result = a3 != a2;
    if (a3 == a2 || *(_DWORD *)(a3 + 40) && (**(_DWORD **)(a3 + 32) & 0x10000FF) == 0x1000000) {
      break;
    }
  }
  while (*(void *)(*(void *)(a3 + 24) + 56) != a3 && v9-- != 0);
  return result;
}

uint64_t sub_1CB915AB4()
{
  return 0;
}

uint64_t sub_1CB915AC0()
{
  return 0;
}

uint64_t sub_1CB915AC8(uint64_t result, unint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v6 = result;
  unint64_t v7 = a2;
  if ((*(_WORD *)(a2 + 44) & 4) != 0)
  {
    unint64_t v7 = a2;
    do
      unint64_t v7 = *(void *)v7 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v7 + 44) & 4) != 0);
  }
  uint64_t v8 = *(void *)(a2 + 24) + 48;
  uint64_t v9 = *(void *)(v7 + 32);
  uint64_t v10 = *(unsigned int *)(v7 + 40);
  uint64_t v11 = v9 + 32 * v10;
  if (!v10)
  {
    unint64_t v23 = *(void *)(v7 + 8);
    if (v23 == v8)
    {
      unint64_t v7 = *(void *)(a2 + 24) + 48;
    }
    else
    {
      unint64_t v7 = *(void *)(a2 + 24) + 48;
      if ((*(_WORD *)(v23 + 44) & 4) != 0)
      {
        do
        {
          unint64_t v24 = v23;
          uint64_t v25 = *(unsigned int *)(v23 + 40);
          if (v25)
          {
            unint64_t v7 = v23;
            goto LABEL_39;
          }
          unint64_t v23 = *(void *)(v23 + 8);
        }
        while (v23 != v8 && (*(_WORD *)(v23 + 44) & 4) != 0);
        unint64_t v7 = *(void *)(a2 + 24) + 48;
LABEL_39:
        uint64_t v9 = *(void *)(v24 + 32);
        uint64_t v11 = v9 + 32 * v25;
      }
    }
  }
  if (v9 != v11)
  {
    while (1)
    {
      if (!*(_DWORD *)v9)
      {
        uint64_t v15 = *(unsigned int *)(v9 + 4);
        if (v15)
        {
          if (*(unsigned char *)(*(void *)(a3[27] + 16) + v15))
          {
            if ((*(_DWORD *)v9 & 0x2000000) == 0) {
              goto LABEL_17;
            }
            BOOL result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 80))(v6);
            if (result) {
              break;
            }
          }
        }
      }
LABEL_5:
      v9 += 32;
      if (v9 == v11)
      {
        unint64_t v12 = *(void *)(v7 + 8);
        if (v12 == v8) {
          return result;
        }
        uint64_t v9 = v11;
        unint64_t v7 = v8;
        if ((*(_WORD *)(v12 + 44) & 4) != 0)
        {
          while (1)
          {
            unint64_t v13 = v12;
            uint64_t v14 = *(unsigned int *)(v12 + 40);
            if (v14) {
              break;
            }
            unint64_t v12 = *(void *)(v12 + 8);
            if (v12 == v8 || (*(_WORD *)(v12 + 44) & 4) == 0)
            {
              unint64_t v7 = v8;
              goto LABEL_25;
            }
          }
          unint64_t v7 = v12;
LABEL_25:
          uint64_t v9 = *(void *)(v13 + 32);
          uint64_t v11 = v9 + 32 * v14;
        }
      }
      if (v9 == v11) {
        return result;
      }
    }
    LODWORD(v15) = *(_DWORD *)(v9 + 4);
LABEL_17:
    unint64_t v16 = *(unsigned int *)(a3[1] + 24 * v15 + 16);
    uint64_t v17 = (_WORD *)(a3[7] + ((v16 >> 3) & 0x1FFFFFFE));
    __int16 v19 = *v17;
    uint64_t v18 = v17 + 1;
    unsigned __int16 v20 = v19 + (v16 & 0xF) * v15;
    do
    {
      if (*(unsigned char *)(v9 + 3))
      {
        unint64_t v21 = *(unsigned int *)(a4 + 8);
        if (v21 >= *(unsigned int *)(a4 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)a4 + 4 * v21) = v20;
        ++*(_DWORD *)(a4 + 8);
      }
      int v22 = *v18++;
      v20 += v22;
    }
    while (v22);
    goto LABEL_5;
  }
  return result;
}

BOOL sub_1CB915D04(uint64_t a1, uint64_t a2)
{
  return (*(unsigned char *)(*(void *)(a2 + 16) + 16) & 0xC0) != 0;
}

uint64_t sub_1CB915D18(uint64_t a1, uint64_t a2, char *a3)
{
  BOOL v5 = 0;
  uint64_t v6 = *(unsigned __int16 **)(a2 + 16);
  uint64_t v7 = *((void *)v6 + 2);
  if ((v7 & 0x80) != 0) {
    char v8 = 3;
  }
  else {
    char v8 = 1;
  }
  *a3 = v8;
  BOOL v9 = (v7 & 0x2A000) != 0;
  if ((v7 & 0x4100) != 0) {
    BOOL v9 = 0;
  }
  BOOL v10 = (v7 & 0x10000) == 0 && v9;
  int v11 = **(unsigned __int16 **)(a2 + 16);
  BOOL v13 = (v11 - 11948) < 3 || v11 == 11951;
  if (*v6 - 13374 >= 0x20 && !v10 && (v11 & 0xFFFE) != 0x2EC4) {
    BOOL v5 = (v11 - 12440) >= 0x30 && (v11 - 12868) >= 4;
  }
  a3[1] = v5;
  a3[1] |= (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 56))(a1, a2) | v13;
  uint64_t result = sub_1CD3D2308(**(unsigned __int16 **)(a2 + 16), 3u);
  if (result == -1)
  {
    char v16 = 0;
  }
  else if (*(void *)(*(void *)(a2 + 32) + 32 * result + 16))
  {
    char v16 = 2;
  }
  else
  {
    char v16 = 1;
  }
  a3[2] = v16;
  a3[3] = (v7 & 0x20) != 0;
  unsigned int v17 = *v6;
  if (v17 - 13374 >= 0x20)
  {
    uint64_t result = sub_1CB9046B0(*v6);
    BOOL v19 = (v7 & 0x200) != 0 || v17 >> 2 == 3038;
    char v20 = v17 - 11956 < 0x10 || v19;
    if (v17 - 11851 >= 0x10) {
      char v21 = v20;
    }
    else {
      char v21 = 1;
    }
    if ((v7 & 0x8000) != 0) {
      char v22 = 1;
    }
    else {
      char v22 = v21;
    }
    if ((v7 & 0x4000) != 0) {
      char v18 = 1;
    }
    else {
      char v18 = v22;
    }
    if (result) {
      char v18 = 1;
    }
  }
  else
  {
    char v18 = 1;
  }
  a3[6] = v18;
  a3[4] = (v7 & 0x200) != 0;
  a3[5] = (v7 & 0x10100) != 0;
  return result;
}

uint64_t sub_1CB915F24()
{
  return 0;
}

uint64_t sub_1CB915F2C(uint64_t a1, void *a2)
{
  uint64_t v3 = a2 + 6;
  uint64_t v4 = a2[7];
  if ((void *)v4 != a2 + 6)
  {
    BOOL v5 = 0;
    unsigned int v6 = -1;
    while (1)
    {
      uint64_t v7 = v4;
      if (!v4 || (uint64_t v8 = v4, (*(unsigned char *)v4 & 4) == 0))
      {
        uint64_t v8 = v4;
        if ((*(_WORD *)(v4 + 44) & 8) != 0)
        {
          uint64_t v8 = v4;
          do
            uint64_t v8 = *(void *)(v8 + 8);
          while ((*(_WORD *)(v8 + 44) & 8) != 0);
        }
      }
      uint64_t v4 = *(void *)(v8 + 8);
      BOOL v9 = *(unsigned __int16 **)(v7 + 16);
      int v10 = *v9;
      if (v10 != 13430) {
        break;
      }
      if ((void *)v4 != v3)
      {
        int v11 = *(unsigned __int16 **)(v4 + 16);
        int v12 = *v11;
        BOOL v13 = (v12 - 9) > 0x3C || ((1 << (v12 - 9)) & 0x1000000000000605) == 0;
        BOOL v14 = !v13 || v12 == 0;
        if (!v14 && (v11[4] & 0x10) == 0 && (v11[8] & 1) == 0) {
          goto LABEL_53;
        }
      }
      if (v5 && v6 <= 7)
      {
        uint64_t v15 = *(void *)(*(void *)(v7 + 24) + 32);
        if (v15)
        {
          uint64_t v16 = *(void *)(v15 + 728);
          if (v16) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 32))(v16, v7);
          }
          uint64_t v17 = *(unsigned int *)(v7 + 40);
          if (v17)
          {
            uint64_t v18 = *(void *)(v7 + 32);
            uint64_t v19 = *(void *)(v15 + 40);
            uint64_t v20 = 32 * v17;
            do
            {
              if (!*(unsigned char *)v18)
              {
                uint64_t v21 = *(unsigned int *)(v18 + 4);
                if ((v21 & 0x80000000) != 0) {
                  char v22 = (uint64_t *)(*(void *)(v19 + 24) + 16 * (v21 & 0x7FFFFFFF) + 8);
                }
                else {
                  char v22 = (uint64_t *)(*(void *)(v19 + 272) + 8 * v21);
                }
                uint64_t v23 = *v22;
                uint64_t v25 = *(void *)(v18 + 16);
                uint64_t v24 = *(void *)(v18 + 24);
                if (v18 != *v22) {
                  char v22 = (uint64_t *)(v25 + 24);
                }
                *char v22 = v24;
                if (v24) {
                  uint64_t v26 = v24;
                }
                else {
                  uint64_t v26 = v23;
                }
                *(void *)(v26 + 16) = v25;
                *(void *)(v18 + 16) = 0;
                *(void *)(v18 + 24) = 0;
              }
              v18 += 32;
              v20 -= 32;
            }
            while (v20);
          }
        }
        uint64_t v29 = *(unint64_t **)(v7 + 8);
        unint64_t v30 = *(void *)v7 & 0xFFFFFFFFFFFFFFF8;
        unint64_t *v29 = v30 | *v29 & 7;
        *(void *)(v30 + 8) = v29;
        *(void *)v7 &= 7uLL;
        *(void *)(v7 + 8) = 0;
        uint64_t v31 = a2[5];
        *(void *)(v7 + 24) = v31;
        uint64_t v32 = *(void *)(v31 + 32);
        uint64_t v33 = *(unsigned int *)(v7 + 40);
        if (v33)
        {
          uint64_t v36 = *(void *)(v7 + 32);
          uint64_t v37 = *(void *)(v32 + 40);
          uint64_t v38 = 32 * v33;
          do
          {
            if (!*(unsigned char *)v36)
            {
              uint64_t v39 = *(unsigned int *)(v36 + 4);
              if ((int)v39 >= 0) {
                uint64_t v40 = (uint64_t *)(*(void *)(v37 + 272) + 8 * v39);
              }
              else {
                uint64_t v40 = (uint64_t *)(*(void *)(v37 + 24) + 16 * (v39 & 0x7FFFFFFF) + 8);
              }
              uint64_t v41 = *v40;
              if (*v40)
              {
                uint64_t v42 = *(void *)(v41 + 16);
                *(void *)(v41 + 16) = v36;
                *(void *)(v36 + 16) = v42;
                if (*(unsigned char *)(v36 + 3))
                {
                  *(void *)(v36 + 24) = v41;
                }
                else
                {
                  *(void *)(v36 + 24) = 0;
                  uint64_t v40 = (uint64_t *)(v42 + 24);
                }
              }
              else
              {
                *(void *)(v36 + 16) = v36;
                *(void *)(v36 + 24) = 0;
              }
              *uint64_t v40 = v36;
            }
            v36 += 32;
            v38 -= 32;
          }
          while (v38);
        }
        uint64_t v34 = *(void *)(v32 + 728);
        if (v34) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 24))(v34, v7);
        }
        unint64_t v35 = *v5 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v7 = v35 | *(void *)v7 & 7;
        *(void *)(v7 + 8) = v5;
        *(void *)(v35 + 8) = v7;
        *BOOL v5 = *v5 & 7 | v7;
LABEL_53:
        BOOL v5 = 0;
        goto LABEL_54;
      }
      unsigned int v6 = 0;
      BOOL v5 = (uint64_t *)v7;
LABEL_54:
      ++v6;
      if ((void *)v4 == v3) {
        goto LABEL_69;
      }
    }
    BOOL v28 = (v10 - 9) <= 0x3C && ((1 << (v10 - 9)) & 0x1000000000000605) != 0
       || v10 == 0;
    if (v28 || (v9[4] & 0x10) != 0 || (*((void *)v9 + 2) & 1) != 0) {
      goto LABEL_54;
    }
    goto LABEL_53;
  }
LABEL_69:
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(a2[4] + 8) + 16))(*(void *)(a2[4] + 8), *(void *)a2[4]);
  if (!*(unsigned char *)(result + 284))
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(a2[4] + 16) + 104))(*(void *)(a2[4] + 16));
    uint64_t v94 = result;
    uint64_t v44 = a2[7];
    if ((void *)v44 != v3)
    {
      BOOL v45 = 0;
      unint64_t v46 = 0;
      uint64_t v93 = a2 + 5;
      while (1)
      {
        uint64_t v47 = *(void *)(*(void *)(v44 + 16) + 16);
        if ((v47 & 0x20) == 0)
        {
          uint64_t v48 = v46;
          goto LABEL_90;
        }
        uint64_t v48 = (void *)v44;
        if (v46)
        {
          uint64_t result = llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)(*(void *)(v44 + 32) + 32), (const llvm::MachineOperand *)(v46[4] + 32));
          uint64_t v48 = (void *)v44;
          if ((result & 1) == 0) {
            break;
          }
        }
LABEL_90:
        if ((v47 & 0x100) != 0)
        {
          unint64_t v56 = (void *)v44;
          if (v45)
          {
            unint64_t v57 = *(void *)(v44 + 48);
            if (v57 < 8) {
              goto LABEL_144;
            }
            if ((v57 & 7) != 0)
            {
              if ((*(void *)(v44 + 48) & 7) != 3
                || (v57 & 0xFFFFFFFFFFFFFFF8) == 0
                || !*(_DWORD *)(v57 & 0xFFFFFFFFFFFFFFF8))
              {
                goto LABEL_144;
              }
            }
            else
            {
              v57 &= 0xFFFFFFFFFFFFFFF8;
              *(void *)(v44 + 48) = v57;
            }
            unint64_t v58 = v45[6];
            if (v58 < 8) {
              goto LABEL_144;
            }
            if ((v58 & 7) != 0)
            {
              if ((v45[6] & 7) != 3 || (v58 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(_DWORD *)(v58 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_144;
              }
            }
            else
            {
              v58 &= 0xFFFFFFFFFFFFFFF8;
              v45[6] = v58;
              unint64_t v57 = *(void *)(v44 + 48);
            }
            if ((v57 & 7) != 0)
            {
              BOOL v61 = *(uint64_t **)((v57 & 0xFFFFFFFFFFFFFFF8) + 8);
            }
            else
            {
              BOOL v61 = (uint64_t *)(v57 & 0xFFFFFFFFFFFFFFF8);
              *(void *)(v44 + 48) = v61;
              unint64_t v58 = v45[6];
            }
            if ((v58 & 7) != 0)
            {
              uint64_t v62 = *(void **)((v58 & 0xFFFFFFFFFFFFFFF8) + 8);
              if (!v61) {
                goto LABEL_144;
              }
            }
            else
            {
              uint64_t v62 = (void *)(v58 & 0xFFFFFFFFFFFFFFF8);
              v45[6] = v58 & 0xFFFFFFFFFFFFFFF8;
              if (!v61) {
                goto LABEL_144;
              }
            }
            if (v62)
            {
              uint64_t v63 = *v61;
              unint64_t v64 = (v63 & 4) != 0 ? 0 : (llvm *)(v63 & 0xFFFFFFFFFFFFFFF8);
              BOOL v65 = v64 && *v62 >= 8uLL;
              if (v65 && (*v62 & 4) == 0)
              {
                UnderlyingObject = llvm::getUnderlyingObject(v64, (const llvm::Value *)6);
                long long v68 = (*v62 & 4) != 0 ? 0 : (llvm *)(*v62 & 0xFFFFFFFFFFFFFFF8);
                uint64_t result = (uint64_t)llvm::getUnderlyingObject(v68, (const llvm::Value *)6);
                BOOL v69 = !UnderlyingObject || result == 0;
                BOOL v70 = !v69 && UnderlyingObject == (llvm *)result;
                unint64_t v56 = (void *)v44;
                if (v70) {
                  goto LABEL_157;
                }
              }
            }
LABEL_144:
            int64_t v71 = (unsigned __int8 *)v45[7];
            uint64_t v95 = v71;
            if (v71)
            {
              llvm::MetadataTracking::track((uint64_t)&v95, v71, 2);
              uint64_t v72 = v45[1];
              uint64_t v73 = *(void *)(v94 + 8) + 643488;
              BOOL v74 = (llvm::MachineFunction *)a2[4];
              unint64_t v96 = v95;
              if (v95) {
                llvm::MetadataTracking::track((uint64_t)&v96, v95, 2);
              }
            }
            else
            {
              uint64_t v72 = v45[1];
              uint64_t v73 = *(void *)(v94 + 8) + 643488;
              BOOL v74 = (llvm::MachineFunction *)a2[4];
              unint64_t v96 = 0;
            }
            uint64_t v75 = llvm::MachineFunction::CreateMachineInstr(v74, v73, &v96, 0);
            uint64_t v76 = (uint64_t)v75;
            if (v96)
            {
              uint64_t v83 = v75;
              int v84 = *v96;
              if ((v84 - 4) > 0x1E)
              {
                if ((v84 - 3) >= 0xFFFFFFFE) {
                  uint64_t v91 = v96;
                }
                else {
                  uint64_t v91 = 0;
                }
                if ((v84 - 3) < 0xFFFFFFFE)
                {
                  if (v84 == 3) {
                    *((void *)v96 + 1) = 0;
                  }
                  goto LABEL_149;
                }
                unint64_t v86 = (unint64_t)(v91 + 8);
              }
              else
              {
                if ((v96[1] & 0x7F) != 2 && !*((_DWORD *)v96 + 3)) {
                  goto LABEL_149;
                }
                uint64_t v85 = *((void *)v96 + 2);
                if ((v85 & 4) == 0) {
                  goto LABEL_149;
                }
                unint64_t v86 = v85 & 0xFFFFFFFFFFFFFFF8;
                if (!v86) {
                  goto LABEL_149;
                }
              }
              uint64_t v97 = &v96;
              sub_1CC5FA668(v86 + 16, &v97);
              uint64_t v76 = (uint64_t)v83;
            }
LABEL_149:
            if (v3 != (void *)v72 && (*(_WORD *)(v72 + 44) & 4) != 0) {
              *(_WORD *)(v76 + 44) |= 0xCu;
            }
            uint64_t result = sub_1CC31973C(v93, (uint64_t *)v72, v76);
            if (v95)
            {
              int v77 = *v95;
              if ((v77 - 4) > 0x1E)
              {
                if ((v77 - 3) >= 0xFFFFFFFE) {
                  uint64_t v79 = v95;
                }
                else {
                  uint64_t v79 = 0;
                }
                if ((v77 - 3) >= 0xFFFFFFFE)
                {
                  unint64_t v80 = (unint64_t)(v79 + 8);
                  goto LABEL_173;
                }
                if (v77 == 3) {
                  *((void *)v95 + 1) = 0;
                }
              }
              else if ((v95[1] & 0x7F) == 2 || *((_DWORD *)v95 + 3))
              {
                uint64_t v81 = *((void *)v95 + 2);
                if ((v81 & 4) != 0)
                {
                  unint64_t v80 = v81 & 0xFFFFFFFFFFFFFFF8;
                  if (v80)
                  {
LABEL_173:
                    uint64_t v97 = &v95;
                    uint64_t result = sub_1CC5FA668(v80 + 16, &v97);
                  }
                }
              }
            }
            unint64_t v56 = (void *)v44;
          }
        }
        else
        {
          unint64_t v56 = v45;
        }
LABEL_157:
        int v78 = **(unsigned __int16 **)(v44 + 16);
        if (v78 == 13430) {
          unint64_t v46 = 0;
        }
        else {
          unint64_t v46 = v48;
        }
        if (v78 == 13430) {
          BOOL v45 = 0;
        }
        else {
          BOOL v45 = v56;
        }
        if ((*(unsigned char *)v44 & 4) == 0)
        {
          while ((*(_WORD *)(v44 + 44) & 8) != 0)
            uint64_t v44 = *(void *)(v44 + 8);
        }
        uint64_t v44 = *(void *)(v44 + 8);
        if ((void *)v44 == v3) {
          return result;
        }
      }
      uint64_t v49 = (unsigned __int8 *)v46[7];
      uint64_t v95 = v49;
      if (v49)
      {
        llvm::MetadataTracking::track((uint64_t)&v95, v49, 2);
        uint64_t v50 = v46[1];
        uint64_t v51 = *(void *)(v94 + 8) + 643488;
        uint64_t v52 = (llvm::MachineFunction *)a2[4];
        unint64_t v96 = v95;
        if (v95) {
          llvm::MetadataTracking::track((uint64_t)&v96, v95, 2);
        }
      }
      else
      {
        uint64_t v50 = v46[1];
        uint64_t v51 = *(void *)(v94 + 8) + 643488;
        uint64_t v52 = (llvm::MachineFunction *)a2[4];
        unint64_t v96 = 0;
      }
      uint64_t v53 = llvm::MachineFunction::CreateMachineInstr(v52, v51, &v96, 0);
      uint64_t v54 = (uint64_t)v53;
      if (!v96)
      {
LABEL_82:
        if (v3 != (void *)v50 && (*(_WORD *)(v50 + 44) & 4) != 0) {
          *(_WORD *)(v54 + 44) |= 0xCu;
        }
        uint64_t result = sub_1CC31973C(v93, (uint64_t *)v50, v54);
        if (!v95) {
          goto LABEL_89;
        }
        int v55 = *v95;
        if ((v55 - 4) > 0x1E)
        {
          if ((v55 - 3) >= 0xFFFFFFFE) {
            uint64_t v59 = v95;
          }
          else {
            uint64_t v59 = 0;
          }
          if ((v55 - 3) < 0xFFFFFFFE)
          {
            if (v55 == 3) {
              *((void *)v95 + 1) = 0;
            }
            goto LABEL_89;
          }
          unint64_t v60 = (unint64_t)(v59 + 8);
        }
        else
        {
          if ((v95[1] & 0x7F) != 2 && !*((_DWORD *)v95 + 3)) {
            goto LABEL_89;
          }
          uint64_t v82 = *((void *)v95 + 2);
          if ((v82 & 4) == 0) {
            goto LABEL_89;
          }
          unint64_t v60 = v82 & 0xFFFFFFFFFFFFFFF8;
          if (!v60) {
            goto LABEL_89;
          }
        }
        uint64_t v97 = &v95;
        uint64_t result = sub_1CC5FA668(v60 + 16, &v97);
LABEL_89:
        uint64_t v48 = (void *)v44;
        goto LABEL_90;
      }
      unint64_t v87 = v53;
      int v88 = *v96;
      if ((v88 - 4) > 0x1E)
      {
        if ((v88 - 3) >= 0xFFFFFFFE) {
          unsigned int v92 = v96;
        }
        else {
          unsigned int v92 = 0;
        }
        if ((v88 - 3) < 0xFFFFFFFE)
        {
          if (v88 == 3) {
            *((void *)v96 + 1) = 0;
          }
          goto LABEL_82;
        }
        unint64_t v90 = (unint64_t)(v92 + 8);
      }
      else
      {
        if ((v96[1] & 0x7F) != 2 && !*((_DWORD *)v96 + 3)) {
          goto LABEL_82;
        }
        uint64_t v89 = *((void *)v96 + 2);
        if ((v89 & 4) == 0) {
          goto LABEL_82;
        }
        unint64_t v90 = v89 & 0xFFFFFFFFFFFFFFF8;
        if (!v90) {
          goto LABEL_82;
        }
      }
      uint64_t v97 = &v96;
      sub_1CC5FA668(v90 + 16, &v97);
      uint64_t v54 = (uint64_t)v87;
      goto LABEL_82;
    }
  }
  return result;
}

BOOL sub_1CB9167EC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a2[3] + 32) + 8) + 16))(*(void *)(*(void *)(a2[3] + 32) + 8), **(void **)(a2[3] + 32));
  unsigned int v6 = (unsigned __int16 *)a2[2];
  uint64_t v7 = *(unsigned __int16 **)(a3 + 16);
  if (*(unsigned char *)(v5 + 296)) {
    BOOL v8 = (*((void *)v6 + 2) & 0x200) == 0;
  }
  else {
    BOOL v8 = 1;
  }
  BOOL v9 = v8 || (*((void *)v7 + 2) & 0x20) == 0;
  if (v9 || *v7 - 1 <= 1 && (*(unsigned char *)(*(void *)(a3 + 32) + 48) & 0x10) != 0) {
    return 0;
  }
  __int16 v10 = *(_WORD *)(a3 + 44);
  uint64_t v11 = *((void *)v7 + 1);
  if ((v10 & 0xC) != 0 && (v10 & 4) == 0)
  {
    if ((v11 & 0x100000) != 0) {
      return 0;
    }
    BOOL result = 0;
    while ((*(_WORD *)(a3 + 44) & 8) != 0)
    {
      a3 = *(void *)(a3 + 8);
      if ((*(unsigned char *)(*(void *)(a3 + 16) + 10) & 0x10) != 0) {
        return result;
      }
    }
  }
  else if ((v11 & 0x100000) != 0)
  {
    return 0;
  }
  unsigned int v13 = sub_1CD3D2308(*v6, 3u);
  return v13 == -1 || *(void *)(a2[4] + 32 * v13 + 16) != 0;
}

BOOL sub_1CB916904(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a2[3] + 32) + 8) + 16))(*(void *)(*(void *)(a2[3] + 32) + 8), **(void **)(a2[3] + 32));
  BOOL result = 0;
  if (*(unsigned char *)(v5 + 281))
  {
    if (*(unsigned char *)(v5 + 295))
    {
      unsigned int v6 = (unsigned __int16 *)a2[2];
      if ((*((unsigned char *)v6 + 17) & 2) != 0)
      {
        uint64_t v7 = *(unsigned __int16 **)(a3 + 16);
        if ((*((void *)v7 + 2) & 0x200) != 0)
        {
          unsigned int v9 = sub_1CD3D2308(*v6, 3u);
          unsigned int v10 = v9;
          if (v9 == -1) {
            int v11 = 0;
          }
          else {
            int v11 = *(void *)(a2[4] + 32 * v9 + 16) ? 2 : 1;
          }
          unsigned int v12 = sub_1CD3D2308(*v7, 3u);
          if (v12 == -1) {
            int v13 = 0;
          }
          else {
            int v13 = *(void *)(*(void *)(a3 + 32) + 32 * v12 + 16) ? 2 : 1;
          }
          if (v11 == v13 || v10 != -1 && *(void *)(a2[4] + 32 * v10 + 16)) {
            return 1;
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_1CB916A34(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (a4 - 3) < 3;
}

uint64_t sub_1CB916A44()
{
  return 0;
}

BOOL sub_1CB916A4C(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)((*(uint64_t (**)(void, void))(**(void **)(*(void *)(*(void *)(a2 + 24) + 32)
                                                                            + 8)
                                                              + 16))(*(void *)(*(void *)(*(void *)(a2 + 24) + 32) + 8), **(void **)(*(void *)(a2 + 24) + 32))+ 280) == 0;
}

BOOL sub_1CB916A9C(uint64_t a1, uint64_t a2)
{
  return (**(_WORD **)(a2 + 16) & 0xFFFE) == 11972;
}

uint64_t sub_1CB916AB8()
{
  return 15;
}

uint64_t sub_1CB916AC0()
{
  return 0;
}

uint64_t sub_1CB916AC8()
{
  return 1;
}

BOOL sub_1CB916AD0(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = sub_1CD3D2308(**(unsigned __int16 **)(a2 + 16), 3u);
  return v3 != -1 && *(void *)(*(void *)(a2 + 32) + 32 * v3 + 16) != 0;
}

uint64_t sub_1CB916B28()
{
  return __cxa_atexit((void (*)(void *))nullsub_31, off_1EC7DF9C8, &dword_1CB82C000);
}

void sub_1CB916B4C()
{
}

uint64_t sub_1CB916BDC(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCBEB90;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x600000001;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  *(void *)a1 = &unk_1F25EE208;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCBEB98, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CB916B4C;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCBEB98, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CB916CD4()
{
}

void sub_1CB916D10(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  uint64_t v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    uint64_t v4 = a1;
    free(v1);
    a1 = v4;
  }
  int v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    uint64_t v5 = a1;
    free(v2);
    a1 = v5;
  }
  unsigned int v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    unsigned int v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CB916DC4(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  int v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  unsigned int v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CB916E70()
{
  return "AGX1 phase.end Alignment pass";
}

void sub_1CB916E80(llvm::PassRegistry *a1, uint64_t a2)
{
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

uint64_t sub_1CB916EF4(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 352) = 2;
  int v2 = (void **)(a2 + 320);
  uint64_t v3 = *(void *)(a2 + 320);
  if (v3 == a2 + 320) {
    return 0;
  }
  uint64_t v5 = *(void *)(a2 + 328);
  if (((void **)v5 == v2 || *(void ***)(v5 + 8) == v2) && v3 + 48 == (*(void *)(v3 + 48) & 0xFFFFFFFFFFFFFFF8)) {
    return 0;
  }
  if (!*(unsigned char *)((*(uint64_t (**)(void, void))(**(void **)(a2 + 8) + 16))(*(void *)(a2 + 8), *(void *)a2)+ 302))return 0; {
  int v6 = (*(unsigned __int16 *)(*(void *)a2 + 18) >> 4) & 0x3FF;
  }
  BOOL v7 = v6 == 102 || v6 == 106;
  if (v6 == 102 || v6 == 106 || (uint64_t v8 = *(void *)(a2 + 328), (void **)v8 == v2))
  {
    if (v7) {
      goto LABEL_23;
    }
    return 0;
  }
  do
  {
    uint64_t v9 = *(void *)(v8 + 56);
    if (v9 == v8 + 48)
    {
      BOOL v10 = v7;
    }
    else
    {
      do
      {
        BOOL v10 = (**(unsigned __int16 **)(v9 + 16) - 814 < 0x12) | v7;
        if (**(unsigned __int16 **)(v9 + 16) - 814 < 0x12 || v7) {
          break;
        }
        if ((*(unsigned char *)v9 & 4) == 0)
        {
          while ((*(_WORD *)(v9 + 44) & 8) != 0)
            uint64_t v9 = *(void *)(v9 + 8);
        }
        LODWORD(v7) = 0;
        uint64_t v9 = *(void *)(v9 + 8);
      }
      while (v9 != v8 + 48);
    }
    uint64_t v8 = *(void *)(v8 + 8);
    BOOL v7 = v10;
  }
  while ((void **)v8 != v2);
  if (!v10) {
    return 0;
  }
LABEL_23:
  int v11 = *v2;
  unsigned int v12 = *v2 + 6;
  unint64_t v13 = *v12 & 0xFFFFFFFFFFFFFFF8;
  if (!v13 || (*(unsigned char *)v13 & 4) == 0)
  {
    while ((*(_WORD *)(v13 + 44) & 4) != 0)
      unint64_t v13 = *(void *)v13 & 0xFFFFFFFFFFFFFFF8;
  }
  BOOL v14 = (const llvm::BasicBlock *)v11[2];
  uint64_t v15 = *(void *)(a2 + 312);
  if (v15)
  {
    *(void *)(a2 + 312) = *(void *)v15;
  }
  else
  {
    *(void *)(a2 + 208) += 232;
    uint64_t v16 = *(void *)(a2 + 128);
    if (((v16 + 7) & 0xFFFFFFFFFFFFFFF8) - v16 + 232 > *(void *)(a2 + 136) - v16)
    {
      unsigned int v37 = *(_DWORD *)(a2 + 152) >> 7;
      if (v37 >= 0x1E) {
        LOBYTE(v37) = 30;
      }
      uint64_t v38 = 4096 << v37;
      uint64_t v15 = (uint64_t)operator new(4096 << v37, (std::align_val_t)8uLL);
      unsigned int v39 = *(_DWORD *)(a2 + 152);
      if (v39 >= *(_DWORD *)(a2 + 156)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a2 + 144) + 8 * v39) = v15;
      ++*(_DWORD *)(a2 + 152);
      *(void *)(a2 + 128) = v15 + 232;
      *(void *)(a2 + 136) = v15 + v38;
    }
    else
    {
      uint64_t v15 = (v16 + 7) & 0xFFFFFFFFFFFFFFF8;
      *(void *)(a2 + 128) = v15 + 232;
    }
  }
  llvm::MachineBasicBlock::MachineBasicBlock((llvm::MachineBasicBlock *)v15, (llvm::MachineFunction *)a2, v14);
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)v2, v15);
  uint64_t v17 = *(void *)(a2 + 320);
  *(void *)uint64_t v15 = v17;
  *(void *)(v15 + 8) = v2;
  *(void *)(v17 + 8) = v15;
  *(void *)(a2 + 320) = v15;
  llvm::MachineBasicBlock::addSuccessor(v11, (void *)v15, -1);
  uint64_t v18 = *(void **)(**(void **)(a2 + 40) + 360);
  *v18 &= ~4uLL;
  *(unsigned char *)(a2 + 352) = 6;
  *(unsigned char *)(v15 + 176) = 6;
  sub_1CB9173F0(v15, (unint64_t *)(v15 + 48), (uint64_t)v11, (unint64_t *)v13);
  uint64_t v19 = *(void *)((*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16)) + 8)
      + 18960;
  uint64_t v20 = (llvm::MachineFunction *)v11[4];
  uint64_t v21 = *(unsigned __int8 **)(v13 + 56);
  unint64_t v46 = v21;
  if (v21) {
    llvm::MetadataTracking::track((uint64_t)&v46, v21, 2);
  }
  char v22 = llvm::MachineFunction::CreateMachineInstr(v20, v19, &v46, 0);
  if (!v46) {
    goto LABEL_34;
  }
  int v40 = *v46;
  if ((v40 - 4) > 0x1E)
  {
    if ((v40 - 3) >= 0xFFFFFFFE) {
      unint64_t v43 = v46;
    }
    else {
      unint64_t v43 = 0;
    }
    if ((v40 - 3) < 0xFFFFFFFE)
    {
      if (v40 == 3) {
        *((void *)v46 + 1) = 0;
      }
      goto LABEL_34;
    }
    unint64_t v42 = (unint64_t)(v43 + 8);
  }
  else
  {
    if ((v46[1] & 0x7F) != 2 && !*((_DWORD *)v46 + 3)) {
      goto LABEL_34;
    }
    uint64_t v41 = *((void *)v46 + 2);
    if ((v41 & 4) == 0) {
      goto LABEL_34;
    }
    unint64_t v42 = v41 & 0xFFFFFFFFFFFFFFF8;
    if (!v42) {
      goto LABEL_34;
    }
  }
  *(void *)&long long v44 = &v46;
  sub_1CC5FA668(v42 + 16, &v44);
LABEL_34:
  uint64_t v23 = v11[5];
  *((void *)v22 + 3) = v23;
  uint64_t v24 = *(void *)(v23 + 32);
  uint64_t v25 = *((unsigned int *)v22 + 10);
  if (v25)
  {
    uint64_t v30 = *((void *)v22 + 4);
    uint64_t v31 = *(void *)(v24 + 40);
    uint64_t v32 = 32 * v25;
    do
    {
      if (!*(unsigned char *)v30)
      {
        uint64_t v33 = *(unsigned int *)(v30 + 4);
        if ((int)v33 >= 0) {
          uint64_t v34 = (uint64_t *)(*(void *)(v31 + 272) + 8 * v33);
        }
        else {
          uint64_t v34 = (uint64_t *)(*(void *)(v31 + 24) + 16 * (v33 & 0x7FFFFFFF) + 8);
        }
        uint64_t v35 = *v34;
        if (*v34)
        {
          uint64_t v36 = *(void *)(v35 + 16);
          *(void *)(v35 + 16) = v30;
          *(void *)(v30 + 16) = v36;
          if (*(unsigned char *)(v30 + 3))
          {
            *(void *)(v30 + 24) = v35;
          }
          else
          {
            *(void *)(v30 + 24) = 0;
            uint64_t v34 = (uint64_t *)(v36 + 24);
          }
        }
        else
        {
          *(void *)(v30 + 16) = v30;
          *(void *)(v30 + 24) = 0;
        }
        *uint64_t v34 = v30;
      }
      v30 += 32;
      v32 -= 32;
    }
    while (v32);
  }
  uint64_t v26 = *(void *)(v24 + 728);
  if (v26) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v26 + 24))(v26, v22);
  }
  unint64_t v27 = *v12 & 0xFFFFFFFFFFFFFFF8;
  *(void *)char v22 = v27 | *(void *)v22 & 7;
  *((void *)v22 + 1) = v12;
  *(void *)(v27 + 8) = v22;
  *unsigned int v12 = *v12 & 7 | (unint64_t)v22;
  *((void *)&v44 + 1) = 0;
  *(void *)&long long v45 = v15;
  LODWORD(v44) = 4;
  llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v44);
  uint64_t v28 = 1;
  LODWORD(v44) = 1;
  *((void *)&v44 + 1) = 0;
  *(void *)&long long v45 = 0;
  llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v44);
  long long v44 = 0u;
  long long v45 = 0u;
  llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v44);
  return v28;
}

uint64_t sub_1CB9173F0(uint64_t result, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  if (a2 == a4) {
    return result;
  }
  if (!a4)
  {
    uint64_t v4 = 0;
LABEL_7:
    while ((*((_WORD *)v4 + 22) & 8) != 0)
      uint64_t v4 = (unint64_t *)v4[1];
    goto LABEL_8;
  }
  uint64_t v4 = a4;
  if ((*(unsigned char *)a4 & 4) == 0) {
    goto LABEL_7;
  }
LABEL_8:
  uint64_t v5 = (unint64_t *)v4[1];
  if (v5 != a4 && v5 != a2)
  {
    if (result != a3)
    {
      unint64_t v11 = *(void *)(result + 40);
      unsigned int v12 = a4;
      do
      {
        v12[3] = v11;
        unsigned int v12 = (unint64_t *)v12[1];
      }
      while (v12 != v5);
    }
    unint64_t v7 = *v5;
    unint64_t v8 = *v5 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v9 = *a4 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v9 + 8) = v5;
    *uint64_t v5 = v9 | v7 & 7;
    unint64_t v10 = *a2 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v8 + 8) = a2;
    *a4 = v10 | *a4 & 7;
    *(void *)(v10 + 8) = a4;
    *a2 = v7 & 0xFFFFFFFFFFFFFFF8 | *a2 & 7;
  }
  return result;
}

uint64_t sub_1CB9174A0(uint64_t a1, llvm::Module *a2)
{
  uint64_t v3 = sub_1CD2819C0(a1, a2);
  *(_DWORD *)(a1 + 1656) = 0;
  *(_DWORD *)(a1 + 1712) = 0;
  *(_OWORD *)(a1 + 1720) = 0u;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(_OWORD *)(a1 + 1747) = 0u;
  sub_1CC781B2C((void *)(a1 + 1496));
  *(_DWORD *)(a1 + 1576) = 0;
  sub_1CC7614E4((_DWORD *)(a1 + 1776));
  *(void *)(a1 + 1056) = 0;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  uint64_t v4 = *(unsigned int *)(a1 + 1072);
  if (v4) {
    bzero(*(void **)(a1 + 1064), 8 * v4);
  }
  *(void *)(a1 + 1144) = 0;
  uint64_t v5 = *(void *)(a1 + 264);
  *(_DWORD *)(v5 + 144) = 0;
  *(unsigned char *)(v5 + 148) = 0;
  return v3;
}

uint64_t sub_1CB917550(uint64_t a1, const llvm::GlobalValue *a2)
{
  uint64_t result = llvm::Value::getMetadata((uint64_t)a2, "agx.bind", 8uLL);
  if (!result) {
    goto LABEL_2;
  }
  uint64_t v5 = (void *)(result - 8 * *(unsigned int *)(result + 8));
  uint64_t v6 = v5[1];
  if (*(unsigned char *)(*(void *)(*(void *)(*v5 + 128) + 24) + 8) == 17)
  {
    if (*(unsigned char *)v6 != 1 || (uint64_t v7 = *(void *)(v6 + 128), *(unsigned char *)(v7 + 16) != 16))
    {
      unint64_t v8 = (void *)(v6 - 8 * *(unsigned int *)(v6 + 8));
      uint64_t v9 = *(void *)(*v8 + 128);
      unint64_t v10 = (void *)(v9 + 24);
      if (*(_DWORD *)(v9 + 32) >= 0x41u) {
        unint64_t v10 = (void *)*v10;
      }
      unint64_t v11 = (void *)*v10;
      uint64_t v12 = v8[1];
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v7 = *(void *)(v6 + 128);
  }
  unint64_t v13 = (void *)(v7 + 24);
  if (*(_DWORD *)(v7 + 32) >= 0x41u) {
    unint64_t v13 = (void *)*v13;
  }
  unint64_t v11 = (void *)*v13;
  uint64_t v12 = v5[2];
LABEL_14:
  uint64_t v14 = *(void *)(v12 + 128);
  uint64_t v15 = (void *)(v14 + 24);
  if (*(_DWORD *)(v14 + 32) >= 0x41u) {
    uint64_t v15 = (void *)*v15;
  }
  if (v11 == 114 || v11 == 18)
  {
    uint64_t v17 = (void *)*v15;
    uint64_t result = llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(a1 + 248), a2);
    *(_DWORD *)(result + 16) = v17;
    return result;
  }
LABEL_2:
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFFFFFF00) == 0x200)
  {
    return sub_1CD27B5E4(a1, a2);
  }
  return result;
}

uint64_t sub_1CB917698(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 272) + 16);
  uint64_t v3 = *(void *)(a1 + 248);
  uint64_t v4 = (unsigned __int16 *)(v3 + 496);
  char v5 = *(unsigned char *)(v3 + 519);
  BOOL v6 = v5 < 0;
  unint64_t v8 = *(unsigned __int16 **)(v3 + 496);
  uint64_t v7 = *(void *)(v3 + 504);
  if (v5 < 0) {
    uint64_t v4 = v8;
  }
  uint64_t v9 = v5 & 0x7F;
  if (!v6) {
    uint64_t v7 = v9;
  }
  if (v7 != 7)
  {
    if (v7 != 4)
    {
      if (v7 != 3)
      {
LABEL_28:
        uint64_t v17 = 0;
        goto LABEL_195;
      }
      if (*v4 == 12647 && *((unsigned char *)v4 + 2) == 48)
      {
        uint64_t v17 = 0x100000001;
      }
      else if (*v4 == 12647 && *((unsigned char *)v4 + 2) == 49)
      {
        uint64_t v17 = 0x100000003;
      }
      else if (*v4 == 12647 && *((unsigned char *)v4 + 2) == 50)
      {
        uint64_t v17 = 0x10000000ALL;
      }
      else if (*v4 == 12647 && *((unsigned char *)v4 + 2) == 51)
      {
        uint64_t v17 = 0x100000010;
      }
      else
      {
        int v14 = *v4;
        int v15 = *((unsigned __int8 *)v4 + 2);
        if (v14 != 12647 || v15 != 52) {
          goto LABEL_28;
        }
        uint64_t v17 = 0x100000015;
      }
      goto LABEL_195;
    }
    uint64_t v17 = 0x100000019;
    if (*(_DWORD *)v4 == 2016555367)
    {
      uint64_t v17 = 0x10000000FLL;
      goto LABEL_195;
    }
    BOOL v49 = *(_DWORD *)v4 == 1731473767;
LABEL_156:
    if (!v49) {
      uint64_t v17 = 0;
    }
    goto LABEL_195;
  }
  uint64_t v17 = 0x100000019;
  if (*(_DWORD *)v4 == 1882206567 && *(_DWORD *)((char *)v4 + 3) == 811740528)
  {
    uint64_t v17 = 0x100000002;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1831940455 && *(_DWORD *)((char *)v4 + 3) == 811674989)
  {
    uint64_t v17 = 0x100000004;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1831940455 && *(_DWORD *)((char *)v4 + 3) == 811740525)
  {
    uint64_t v17 = 0x100000005;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1882272103 && *(_DWORD *)((char *)v4 + 3) == 811674992)
  {
    uint64_t v17 = 0x100000006;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1882272103 && *(_DWORD *)((char *)v4 + 3) == 811740528)
  {
    uint64_t v17 = 0x100000007;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1731277159 && *(_DWORD *)((char *)v4 + 3) == 811674983)
  {
    uint64_t v17 = 0x100000008;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1731277159 && *(_DWORD *)((char *)v4 + 3) == 811740519)
  {
    uint64_t v17 = 0x100000009;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1832005991 && *(_DWORD *)((char *)v4 + 3) == 811674989)
  {
    uint64_t v17 = 0x10000000BLL;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1882337639 && *(_DWORD *)((char *)v4 + 3) == 811674992)
  {
    uint64_t v17 = 0x10000000CLL;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1882337639 && *(_DWORD *)((char *)v4 + 3) == 811740528)
  {
    uint64_t v17 = 0x10000000DLL;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1731342695 && *(_DWORD *)((char *)v4 + 3) == 811740519)
  {
    uint64_t v17 = 0x10000000ELL;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1882403175 && *(_DWORD *)((char *)v4 + 3) == 811674992)
  {
    uint64_t v17 = 0x100000011;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1882403175 && *(_DWORD *)((char *)v4 + 3) == 811740528)
  {
    uint64_t v17 = 0x100000012;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1731408231 && *(_DWORD *)((char *)v4 + 3) == 811674983)
  {
    uint64_t v17 = 0x100000013;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1731408231 && *(_DWORD *)((char *)v4 + 3) == 811740519)
  {
    uint64_t v17 = 0x100000014;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1932734823 && *(_DWORD *)((char *)v4 + 3) == 811674995)
  {
    uint64_t v17 = 0x100000020;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1932734823 && *(_DWORD *)((char *)v4 + 3) == 811740531)
  {
    uint64_t v17 = 0x100000021;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1664299367 && *(_DWORD *)((char *)v4 + 3) == 811674979)
  {
    uint64_t v17 = 0x100000022;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1664299367 && *(_DWORD *)((char *)v4 + 3) == 811740515)
  {
    uint64_t v17 = 0x100000023;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1681076583 && *(_DWORD *)((char *)v4 + 3) == 811674980)
  {
    uint64_t v17 = 0x100000024;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1681076583 && *(_DWORD *)((char *)v4 + 3) == 811740516)
  {
    uint64_t v17 = 0x100000025;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1882468711 && *(_DWORD *)((char *)v4 + 3) == 811674992)
  {
    uint64_t v17 = 0x100000016;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1882468711 && *(_DWORD *)((char *)v4 + 3) == 811740528)
  {
    uint64_t v17 = 0x100000017;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1731473767 && *(_DWORD *)((char *)v4 + 3) == 811674983)
  {
    uint64_t v17 = 0x100000018;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 != 1731473767 || *(_DWORD *)((char *)v4 + 3) != 811740519)
  {
    if (*(_DWORD *)v4 == 1932800359 && *(_DWORD *)((char *)v4 + 3) == 811674995)
    {
      uint64_t v17 = 0x10000001ALL;
      goto LABEL_195;
    }
    if (*(_DWORD *)v4 == 1932800359 && *(_DWORD *)((char *)v4 + 3) == 811740531)
    {
      uint64_t v17 = 0x10000001BLL;
      goto LABEL_195;
    }
    if (*(_DWORD *)v4 == 1664364903 && *(_DWORD *)((char *)v4 + 3) == 811674979)
    {
      uint64_t v17 = 0x10000001CLL;
      goto LABEL_195;
    }
    if (*(_DWORD *)v4 == 1664364903 && *(_DWORD *)((char *)v4 + 3) == 811740515)
    {
      uint64_t v17 = 0x10000001DLL;
      goto LABEL_195;
    }
    if (*(_DWORD *)v4 == 1681142119 && *(_DWORD *)((char *)v4 + 3) == 811674980)
    {
      uint64_t v17 = 0x10000001ELL;
      goto LABEL_195;
    }
    if (*(_DWORD *)v4 == 1681142119 && *(_DWORD *)((char *)v4 + 3) == 811740516)
    {
      uint64_t v17 = 0x10000001FLL;
      goto LABEL_195;
    }
    uint64_t v17 = 0x100000026;
    BOOL v49 = (*(_DWORD *)v4 ^ 0x70353167 | *(_DWORD *)((char *)v4 + 3) ^ 0x30622D70) == 0;
    goto LABEL_156;
  }
LABEL_195:
  if ((v17 & 0xFF00000000) != 0) {
    uint64_t v50 = v17;
  }
  else {
    uint64_t v50 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 88))(v2, v50);
}

void sub_1CB917C34(uint64_t a1, uint64_t a2)
{
  uint64_t v122 = *MEMORY[0x1E4F143B8];
  v102[0] = *(void *)(a1 + 264);
  v102[1] = a1;
  v118[0] = 0;
  v118[1] = 0;
  int v119 = v121;
  uint64_t v120 = 0x800000000;
  v121[128] = 0;
  int v4 = **(unsigned __int16 **)(a2 + 16);
  if ((v4 - 789) > 2) {
    goto LABEL_2;
  }
  uint64_t v17 = *(void **)(*(void *)(a2 + 24) + 32);
  if ((*(_WORD *)(*v17 + 18) & 0x3FF0) != 0x640) {
    goto LABEL_2;
  }
  uint64_t v18 = v17[2];
  char v19 = *(unsigned char *)(v18 + 79);
  int v20 = v19;
  uint64_t v21 = v19 & 0x7F;
  if (v20 < 0) {
    uint64_t v21 = *(void *)(v18 + 64);
  }
  if (v21 != 7) {
    goto LABEL_2;
  }
  uint64_t v24 = *(int **)(v18 + 56);
  char v22 = (int *)(v18 + 56);
  uint64_t v23 = v24;
  if (v20 < 0) {
    char v22 = v23;
  }
  int v25 = *v22;
  int v26 = *(int *)((char *)v22 + 3);
  if (v25 != 1882206567 || v26 != 811674992)
  {
LABEL_2:
    int v5 = *(_DWORD *)(a1 + 7864);
    if ((v4 & 0xFFFE) == 0x2D4)
    {
      int v9 = -1;
    }
    else
    {
      int v6 = sub_1CB920500(**(unsigned __int16 **)(a2 + 16));
      int v7 = ((v4 - 729) < 0xFFFFFFFE) & ~v6;
      if ((v4 - 727) >= 2) {
        int v8 = 0;
      }
      else {
        int v8 = -2;
      }
      if (v6) {
        int v8 = v7 - 1;
      }
      if ((((v4 - 729) < 0xFFFFFFFE) & ~v6) != 0) {
        int v9 = v7 - 1;
      }
      else {
        int v9 = v8;
      }
    }
    *(_DWORD *)(a1 + 7864) = (v9 + v5) & ~((v9 + v5) >> 31);
    unint64_t v10 = (llvm::APFloatBase *)(*(uint64_t (**)(void))(**(void **)(a1 + 272) + 96))(*(void *)(a1 + 272));
    if (!v10)
    {
LABEL_12:
      sub_1CBA661BC((uint64_t)v102, a2, (uint64_t)v118);
      (*(void (**)(void))(**(void **)(a1 + 272) + 1192))();
      int v11 = *(_DWORD *)(a1 + 7864);
      unsigned int v12 = **(unsigned __int16 **)(a2 + 16);
      uint64_t v13 = 7;
      if (v12 > 0x967)
      {
        if (v12 - 2408 > 0x11)
        {
LABEL_14:
          int v14 = sub_1CB920500(v12);
          goto LABEL_15;
        }
        int v15 = 1 << (v12 - 104);
        if ((v15 & 0x9C4E) != 0) {
          goto LABEL_28;
        }
        int v16 = 221616;
        goto LABEL_44;
      }
      if (**(unsigned __int16 **)(a2 + 16) <= 0x464u)
      {
        if (v12 == 938) {
          goto LABEL_47;
        }
        if (v12 - 936 >= 2)
        {
          if (v12 != 935) {
            goto LABEL_14;
          }
LABEL_29:
          int v14 = *(_DWORD *)(*(void *)(a2 + 32) + 32 * v13 + 16);
LABEL_15:
          *(_DWORD *)(a1 + 7864) = (v14 + v11) & ~((v14 + v11) >> 31);
          if (v119 != v121) {
            free(v119);
          }
          return;
        }
      }
      else
      {
        if (v12 - 2014 <= 8)
        {
          if (v12 != 2014)
          {
            if (((1 << (v12 + 34)) & 0x4E) == 0) {
              goto LABEL_29;
            }
            goto LABEL_28;
          }
LABEL_47:
          uint64_t v13 = 5;
          goto LABEL_29;
        }
        if (v12 - 1125 > 8) {
          goto LABEL_14;
        }
        int v15 = 1 << (v12 - 101);
        if ((v15 & 0xE4) == 0)
        {
          int v16 = 27;
LABEL_44:
          if ((v15 & v16) != 0) {
            goto LABEL_29;
          }
          goto LABEL_47;
        }
      }
LABEL_28:
      uint64_t v13 = 6;
      goto LABEL_29;
    }
    int v115 = v117;
    long long v116 = xmmword_1CD96DBD0;
    int v94 = 0;
    char v98 = 0;
    uint64_t v99 = 0;
    BOOL v101 = (void **)&v115;
    int v100 = 0;
    uint64_t v93 = &unk_1F2646FA8;
    uint64_t v95 = 0;
    uint64_t v96 = 0;
    uint64_t v97 = 0;
    uint64_t v28 = *(void *)(a2 + 16);
    if ((*(unsigned char *)(v28 + 9) & 0x20) == 0)
    {
      if (*(_WORD *)v28 == 4580 && (~**(_DWORD **)(a2 + 32) & 0x5000000) == 0)
      {
        if (*(_DWORD *)(a1 + 7864))
        {
          int v29 = 0;
          do
          {
            sub_1CB8E509C((llvm::raw_ostream *)&v93, "\t");
            ++v29;
          }
          while (v29 != *(_DWORD *)(a1 + 7864));
        }
        sub_1CB8E509C((llvm::raw_ostream *)&v93, "\t// no-op MFUNI for improved clausing\n");
        goto LABEL_145;
      }
      if ((sub_1CB834754(a2) & 1) == 0 && (*(unsigned char *)(*(void *)(a2 + 16) + 16) & 1) == 0)
      {
LABEL_145:
        if ((void)v116)
        {
          uint64_t v83 = *(llvm::MCStreamer **)(a1 + 272);
          uint64_t v85 = *v101;
          uint64_t v84 = (uint64_t)v101[1];
          LOWORD(v108) = 261;
          uint64_t v105 = v85;
          uint64_t v106 = v84;
          llvm::MCStreamer::emitRawText(v83, (const llvm::Twine *)&v105);
        }
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v93);
        if (v115 != v117) {
          free(v115);
        }
        goto LABEL_12;
      }
      uint64_t v91 = *(void *)(*(void *)(a1 + 280) + 344);
      uint64_t v105 = v107;
      uint64_t v106 = 0x400000000;
      unsigned int v109 = 0;
      uint64_t v110 = 0;
      uint64_t v108 = (uint64_t *)&v109;
      unsigned int NumExplicitOperands = llvm::MachineInstr::getNumExplicitOperands(a2);
      unsigned int v37 = 0;
      if (NumExplicitOperands < 2)
      {
LABEL_125:
        sub_1CB833A08((uint64_t)&v108, v37);
        if (v105 != v107) {
          free(v105);
        }
        goto LABEL_145;
      }
      uint64_t v38 = 1;
      while (1)
      {
        unsigned int v39 = (int *)(*(void *)(a2 + 32) + 32 * v38);
        if (*v39 == 7)
        {
          int64_t v40 = v39[1] | ((unint64_t)v39[6] << 32);
          if (v40 >= 0) {
            int64_t v41 = v39[1] | ((unint64_t)v39[6] << 32);
          }
          else {
            int64_t v41 = v40 + 1;
          }
          uint64_t v42 = v41 >> 1;
          unsigned int v43 = v39[1] - (v41 & 0xFFFFFFFE);
          unsigned int v44 = 16;
          int v45 = 1;
          switch((*v39 >> 8) & 0xFFF)
          {
            case 2u:
              int v45 = 0;
              unsigned int v44 = 32;
              break;
            case 3u:
              int v45 = 0;
              unsigned int v44 = 64;
              break;
            case 4u:
            case 6u:
              int v45 = 0;
              unsigned int v44 = 96;
              break;
            case 5u:
              int v45 = 0;
              unsigned int v44 = 192;
              break;
            case 7u:
              int v45 = 0;
              unsigned int v44 = 160;
              break;
            default:
              break;
          }
          unsigned int v92 = 0;
          int v46 = v39[1];
          int v47 = *v39;
          if ((_BYTE)v47) {
            int v48 = (v47 << 8) & 0xFFF0000;
          }
          else {
            int v48 = 0;
          }
          unsigned int v49 = v48 | v46;
          unsigned int v92 = v49;
          if (v110)
          {
            uint64_t v50 = (uint64_t)v109;
            if (v109)
            {
              do
              {
                unsigned int v51 = *(_DWORD *)(v50 + 28);
                if (v49 >= v51)
                {
                  if (v51 >= v49) {
                    goto LABEL_116;
                  }
                  v50 += 8;
                }
                uint64_t v50 = *(void *)v50;
              }
              while (v50);
            }
          }
          else if (v106)
          {
            unint64_t v56 = v105;
            uint64_t v57 = 4 * v106;
            while (*v56 != v49)
            {
              ++v56;
              v57 -= 4;
              if (!v57) {
                goto LABEL_85;
              }
            }
            if (v57) {
              goto LABEL_116;
            }
          }
LABEL_85:
          unint64_t v52 = (*(uint64_t (**)(uint64_t, int64_t))(*(void *)v91 + 384))(v91, v41 >> 1);
          if ((v52 & 0xFF00000000) != 0)
          {
            uint64_t v90 = v43;
            unsigned int v53 = WORD1(v52);
            if (!v43) {
              unsigned int v53 = v52;
            }
            if (v45) {
              unint64_t v54 = (unsigned __int16)v53;
            }
            else {
              unint64_t v54 = v53;
            }
            if (v45) {
              int v55 = llvm::APFloatBase::IEEEhalf((llvm::APFloatBase *)v52);
            }
            else {
              int v55 = llvm::APFloatBase::IEEEsingle((llvm::APFloatBase *)v52);
            }
            unint64_t v58 = v55;
            sub_1CB8F1EEC((uint64_t)&v103, v44, v54);
            uint64_t v59 = sub_1CB919070((llvm::detail::IEEEFloat *)&v112, v58, &v103);
            if (LODWORD(v104[0]) >= 0x41)
            {
              uint64_t v59 = v103;
              if (v103) {
                uint64_t v59 = (llvm::APFloatBase *)MEMORY[0x1D25D9CB0](v103, 0x1000C8000313F17);
              }
            }
            if (v45)
            {
              LOBYTE(v103) = 0;
              unint64_t v60 = llvm::APFloatBase::IEEEsingle(v59);
              llvm::APFloat::convert((uint64_t)&v111, v60, 0, &v103);
            }
            if (v106)
            {
              BOOL v61 = ", ";
            }
            else
            {
              BOOL v61 = ", ";
              if (!v110)
              {
                if (*(_DWORD *)(a1 + 7864))
                {
                  int v62 = 0;
                  do
                  {
                    sub_1CB8E509C((llvm::raw_ostream *)&v93, "\t");
                    ++v62;
                  }
                  while (v62 != *(_DWORD *)(a1 + 7864));
                }
                BOOL v61 = "\t// ";
              }
            }
            sub_1CB8E509C((llvm::raw_ostream *)&v93, v61);
            uint64_t v63 = sub_1CB8E509C((llvm::raw_ostream *)&v93, "u");
            sub_1CD098D14(v63, v42, 0, 0, 0);
            if (v45)
            {
              if (v90) {
                unint64_t v64 = "h";
              }
              else {
                unint64_t v64 = "l";
              }
              sub_1CB8E509C((llvm::raw_ostream *)&v93, v64);
            }
            BOOL v65 = sub_1CB8E509C((llvm::raw_ostream *)&v93, " = ");
            float v66 = llvm::APFloat::convertToFloat((llvm::APFloat *)&v111);
            long long v67 = llvm::raw_ostream::operator<<(v65, v66);
            long long v68 = sub_1CB8E509C(v67, " (");
            sub_1CD098D14(v68, v54, 0, 0, 0);
            sub_1CB8E509C(v68, ")");
            sub_1CB918828((uint64_t)&v105, &v92);
            sub_1CB87DEE4(&v112);
          }
        }
LABEL_116:
        if (++v38 >= (unint64_t)llvm::MachineInstr::getNumExplicitOperands(a2))
        {
          unsigned int v37 = v109;
          goto LABEL_125;
        }
      }
    }
    uint64_t v30 = 0;
    LOBYTE(v92) = 0;
    do
    {
      uint64_t v31 = (char *)&v111 + v30;
      *((_DWORD *)v31 + 2) = 1;
      *(void *)uint64_t v31 = 0;
      v30 += 16;
    }
    while (v30 != 32);
    uint64_t v32 = llvm::APFloatBase::IEEEsingle(v10);
    sub_1CB918F54((llvm::detail::IEEEFloat *)&v106, (uint64_t)v32, 0);
    uint64_t v33 = sub_1CB918F54((llvm::detail::IEEEFloat *)&v109, (uint64_t)v32, 0);
    int v34 = **(_WORD **)(a2 + 16) & 0xFFFE;
    switch(v34)
    {
      case 4066:
        BOOL v69 = (const llvm::APInt *)*(unsigned __int16 *)(*(void *)(a2 + 32) + 80);
        if (v112 >= 0x41)
        {
          uint64_t v33 = v111;
          if (v111) {
            uint64_t v33 = (llvm::APFloatBase *)MEMORY[0x1D25D9CB0](v111, 0x1000C8000313F17);
          }
        }
        uint64_t v111 = v69;
        LODWORD(v112) = 16;
        BOOL v70 = llvm::APFloatBase::IEEEhalf(v33);
        sub_1CB919070((llvm::detail::IEEEFloat *)v104, v70, &v111);
        sub_1CB9190C0(&v106, v104);
        sub_1CB87DEE4((uint64_t *)v104);
        llvm::APFloat::convert((uint64_t)&v105, v32, 0, &v92);
        break;
      case 4068:
        uint64_t v86 = *(void *)(*(void *)(a2 + 32) + 80);
        unint64_t v87 = (const llvm::APInt *)(unsigned __int16)v86;
        if (v112 >= 0x41)
        {
          uint64_t v33 = v111;
          if (v111)
          {
            uint64_t v33 = (llvm::APFloatBase *)MEMORY[0x1D25D9CB0](v111, 0x1000C8000313F17);
            uint64_t v86 = *(void *)(*(void *)(a2 + 32) + 80);
          }
        }
        uint64_t v111 = v87;
        LODWORD(v112) = 16;
        int v88 = (const llvm::APInt *)WORD1(v86);
        if (v114[0] >= 0x41u)
        {
          uint64_t v33 = v113;
          if (v113) {
            uint64_t v33 = (llvm::APFloatBase *)MEMORY[0x1D25D9CB0](v113, 0x1000C8000313F17);
          }
        }
        uint64_t v113 = v88;
        v114[0] = 16;
        uint64_t v89 = llvm::APFloatBase::IEEEhalf(v33);
        sub_1CB919070((llvm::detail::IEEEFloat *)v104, v89, &v111);
        sub_1CB9190C0(&v106, v104);
        sub_1CB87DEE4((uint64_t *)v104);
        llvm::APFloat::convert((uint64_t)&v105, v32, 0, &v92);
        sub_1CB919070((llvm::detail::IEEEFloat *)v104, v89, &v113);
        sub_1CB9190C0((uint64_t *)&v109, v104);
        sub_1CB87DEE4((uint64_t *)v104);
        llvm::APFloat::convert((uint64_t)&v108, v32, 0, &v92);
        char v71 = 1;
        goto LABEL_132;
      case 4070:
        uint64_t v35 = (const llvm::APInt *)*(unsigned int *)(*(void *)(a2 + 32) + 80);
        if (v112 >= 0x41 && v111) {
          MEMORY[0x1D25D9CB0](v111, 0x1000C8000313F17);
        }
        uint64_t v111 = v35;
        LODWORD(v112) = 32;
        sub_1CB919070((llvm::detail::IEEEFloat *)v104, v32, &v111);
        sub_1CB9190C0(&v106, v104);
        sub_1CB87DEE4((uint64_t *)v104);
        break;
      default:
LABEL_138:
        for (uint64_t i = 40; i != -24; i -= 32)
          sub_1CB87DEE4((uint64_t *)((char *)&v105 + i));
        for (uint64_t j = 0; j != -8; j -= 4)
        {
          if (v114[j] >= 0x41u)
          {
            uint64_t v82 = *(void *)&v114[j - 2];
            if (v82) {
              MEMORY[0x1D25D9CB0](v82, 0x1000C8000313F17);
            }
          }
        }
        goto LABEL_145;
    }
    char v71 = 0;
LABEL_132:
    if (*(_DWORD *)(a1 + 7864))
    {
      int v72 = 0;
      do
      {
        sub_1CB8E509C((llvm::raw_ostream *)&v93, "\t");
        ++v72;
      }
      while (v72 != *(_DWORD *)(a1 + 7864));
    }
    sub_1CB8E509C((llvm::raw_ostream *)&v93, "\t// ");
    float v73 = llvm::APFloat::convertToFloat((llvm::APFloat *)&v105);
    BOOL v74 = llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v93, v73);
    uint64_t v75 = sub_1CB8E509C(v74, " (");
    llvm::APInt::print((llvm::APInt *)&v111, v75, 1);
    sub_1CB8E509C(v75, ")");
    if (v71)
    {
      uint64_t v76 = sub_1CB8E509C((llvm::raw_ostream *)&v93, " , ");
      float v77 = llvm::APFloat::convertToFloat((llvm::APFloat *)&v108);
      int v78 = llvm::raw_ostream::operator<<(v76, v77);
      uint64_t v79 = sub_1CB8E509C(v78, " (");
      llvm::APInt::print((llvm::APInt *)&v113, v79, 1);
      sub_1CB8E509C(v79, ")");
    }
    sub_1CB8E509C((llvm::raw_ostream *)&v93, "\n");
    goto LABEL_138;
  }
}

uint64_t sub_1CB918828(uint64_t a1, unsigned int *a2)
{
  if (*(void *)(a1 + 48))
  {
    int v5 = (void *)(a1 + 40);
    uint64_t v4 = *(void *)(a1 + 40);
    unsigned int v6 = *a2;
    if (v4)
    {
      uint64_t result = 1;
      do
      {
        while (1)
        {
          int v8 = (void *)v4;
          unsigned int v9 = *(_DWORD *)(v4 + 28);
          if (v6 >= v9) {
            break;
          }
          uint64_t v4 = *v8;
          int v5 = v8;
          if (!*v8) {
            goto LABEL_19;
          }
        }
        if (v9 >= v6) {
          return result;
        }
        uint64_t v4 = v8[1];
      }
      while (v4);
      int v5 = v8 + 1;
    }
    else
    {
      int v8 = (void *)(a1 + 40);
    }
LABEL_19:
    int v14 = operator new(0x20uLL);
    v14[7] = v6;
    *(void *)int v14 = 0;
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = v8;
    *int v5 = v14;
    uint64_t v15 = **(void **)(a1 + 32);
    if (v15)
    {
      *(void *)(a1 + 32) = v15;
      int v14 = (_DWORD *)*v5;
    }
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a1 + 8);
    unsigned int v11 = *a2;
    if (!v10)
    {
LABEL_15:
      if (v10 >= *(_DWORD *)(a1 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a1 + 4 * v10) = v11;
      ++*(_DWORD *)(a1 + 8);
      return 0x100000001;
    }
    uint64_t v12 = 4 * v10;
    uint64_t v13 = *(_DWORD **)a1;
    while (*v13 != v11)
    {
      ++v13;
      v12 -= 4;
      if (!v12) {
        goto LABEL_14;
      }
    }
    if (v12) {
      return 1;
    }
LABEL_14:
    if (v10 <= 3) {
      goto LABEL_15;
    }
    int v16 = (void *)(a1 + 40);
    do
    {
      uint64_t v17 = *(void *)a1 + 4 * v10;
      uint64_t v18 = *(void *)(a1 + 40);
      char v19 = (void *)(a1 + 40);
      int v20 = (void *)(a1 + 40);
      if (v18)
      {
        unsigned int v21 = *(_DWORD *)(v17 - 4);
        do
        {
          while (1)
          {
            int v20 = (void *)v18;
            unsigned int v22 = *(_DWORD *)(v18 + 28);
            if (v21 >= v22) {
              break;
            }
            uint64_t v18 = *v20;
            char v19 = v20;
            if (!*v20) {
              goto LABEL_30;
            }
          }
          if (v22 >= v21) {
            goto LABEL_33;
          }
          uint64_t v18 = v20[1];
        }
        while (v18);
        char v19 = v20 + 1;
      }
LABEL_30:
      uint64_t v23 = operator new(0x20uLL);
      v23[7] = *(_DWORD *)(v17 - 4);
      *(void *)uint64_t v23 = 0;
      *((void *)v23 + 1) = 0;
      *((void *)v23 + 2) = v20;
      *char v19 = v23;
      uint64_t v24 = **(void **)(a1 + 32);
      if (v24)
      {
        *(void *)(a1 + 32) = v24;
        uint64_t v23 = (_DWORD *)*v19;
      }
      sub_1CB8358B8(*(uint64_t **)(a1 + 40), (uint64_t *)v23);
      ++*(void *)(a1 + 48);
      LODWORD(v10) = *(_DWORD *)(a1 + 8);
LABEL_33:
      LODWORD(v10) = v10 - 1;
      *(_DWORD *)(a1 + 8) = v10;
    }
    while (v10);
    int v25 = (_DWORD *)*v16;
    unsigned int v26 = *a2;
    unint64_t v27 = (void *)(a1 + 40);
    if (*v16)
    {
      do
      {
        while (1)
        {
          unint64_t v27 = v25;
          unsigned int v28 = v25[7];
          if (v26 >= v28) {
            break;
          }
          int v25 = (_DWORD *)*v27;
          int v16 = v27;
          if (!*v27) {
            goto LABEL_43;
          }
        }
        if (v28 >= v26) {
          return 0x100000001;
        }
        int v25 = (_DWORD *)v27[1];
      }
      while (v25);
      int v16 = v27 + 1;
    }
LABEL_43:
    int v14 = operator new(0x20uLL);
    v14[7] = v26;
    *(void *)int v14 = 0;
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = v27;
    void *v16 = v14;
    uint64_t v29 = **(void **)(a1 + 32);
    if (v29)
    {
      *(void *)(a1 + 32) = v29;
      int v14 = (_DWORD *)*v16;
    }
  }
  sub_1CB8358B8(*(uint64_t **)(a1 + 40), (uint64_t *)v14);
  ++*(void *)(a1 + 48);
  return 0x100000001;
}

uint64_t sub_1CB918ABC(uint64_t a1, llvm::MachineFunction *a2)
{
  *((unsigned char *)a2 + 352) = 6;
  int v4 = *(_WORD *)(*(void *)a2 + 18) & 0x3FF0;
  *(unsigned char *)(*(void *)(a1 + 264) + 148) = v4 == 1600;
  (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
  sub_1CD27DA04(a1);
  int v5 = (void **)*((void *)a2 + 43);
  uint64_t v6 = *(void *)(*((void *)a2 + 7) + 48);
  if (v4 == 1600)
  {
    ((void (*)(void, uint64_t, void, uint64_t, void, uint64_t, uint64_t))(*v5)[1])(*((void *)a2 + 43), 12, *(void *)(*((void *)a2 + 7) + 48), 1, 0, 1, 3);
  }
  else
  {
    unsigned int v7 = *(unsigned __int16 *)(*(void *)a2 + 18);
    int v8 = (v7 >> 4) & 0x3FF;
    if (v8 != 100 && (v8 - 109) >= 0xFFFFFFF7 && (v7 & 0x3FF0) != 0x640)
    {
      if (*(unsigned char *)(*((void *)a2 + 1) + 1687))
      {
        uint64_t v10 = *(llvm::Module **)(*(void *)a2 + 40);
        char v19 = "agx.stack_oob";
        __int16 v20 = 259;
        if (llvm::Module::getNamedMetadata(v10, &v19)) {
          v6 += 32;
        }
      }
    }
    ((void (*)(void **, uint64_t, void, uint64_t, void, uint64_t, uint64_t))(*v5)[1])(v5, 11, v6, 1, 0, 1, 3);
    (*(void (**)(void *, void, uint64_t))(*v5[1] + 96))(v5[1], *(void *)a2, v6);
    (*(void (**)(void *, void, void))(*v5[1] + 112))(v5[1], *(void *)a2, 0);
  }
  int v11 = (*(unsigned __int16 *)(*(void *)a2 + 18) >> 4) & 0x3FF;
  if (v11) {
    BOOL v12 = v11 == 8;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12 || v11 == 255)
  {
    uint64_t v16 = ((uint64_t (*)(void **, uint64_t))(*v5)[74])(v5, 100);
    uint64_t v17 = ((uint64_t (*)(void **))(*v5)[4])(v5);
    if (v16)
    {
      uint64_t v18 = *(void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v17 + 24))(v17, v16);
      if ((*(unsigned int (**)(void))(v18 + 360))()) {
        ((void (*)(void **, uint64_t, void, uint64_t, void, uint64_t, uint64_t))(*v5)[1])(v5, 12, v6, 1, 0, 1, 3);
      }
    }
  }
  uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24), &llvm::MachineLoopInfo::ID, 1);
  if (AnalysisPass) {
    int v14 = (const llvm::MachineLoopInfo *)(*(uint64_t (**)(uint64_t, void *))(*(void *)AnalysisPass + 96))(AnalysisPass, &llvm::MachineLoopInfo::ID);
  }
  else {
    int v14 = 0;
  }
  llvm::GPUMetadataEmitter::runOnMachineFunction((llvm::GPUMetadataEmitter *)(a1 + 1488), a2, v14, *(llvm::MCContext **)(a1 + 264), *(llvm::MCStreamer **)(a1 + 272));
  return 0;
}

uint64_t sub_1CB918E34(uint64_t a1, uint64_t a2, unsigned int a3, unsigned char *a4, uint64_t a5)
{
  if (a4 && *a4) {
    return 1;
  }
  uint64_t v9 = *(void *)(a1 + 7856);
  if (!v9)
  {
    BOOL v12 = *(void **)(a1 + 248);
    uint64_t v13 = v12[1];
    uint64_t v14 = v12[70];
    uint64_t v15 = v12[72];
    uint64_t v16 = v12[71];
    uint64_t v17 = *(void (**)(void))(v13 + 288);
    if (v17) {
      v17();
    }
    uint64_t v18 = *(uint64_t (**)(void *, void, uint64_t, uint64_t, uint64_t))(v13 + 136);
    if (!v18)
    {
      *(void *)(a1 + 7856) = 0;
      return 1;
    }
    uint64_t v9 = v18(v12 + 56, 0, v14, v15, v16);
    *(void *)(a1 + 7856) = v9;
    if (!v9) {
      return 1;
    }
  }
  uint64_t v10 = *(void *)(a2 + 32);
  if (!*(unsigned char *)(v10 + 32 * a3))
  {
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v9 + 40))(v9, a5, *(unsigned int *)(v10 + 32 * a3 + 4));
    return 0;
  }
  return 1;
}

uint64_t sub_1CB918F34(llvm::MCContext **a1, llvm::Module *a2)
{
  return llvm::GPUMetadataEmitter::emitEndOfAsmFile((llvm::GPUMetadataEmitter *)(a1 + 186), a2, a1[33], a1[34]);
}

const char *sub_1CB918F44()
{
  return "AGX2 Assembly Printer";
}

llvm::detail::IEEEFloat *sub_1CB918F54(llvm::detail::IEEEFloat *this, uint64_t a2, void *a3)
{
  if ((_UNKNOWN *)a2 == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(this, (uint64_t)&unk_1CFB2E344);
  }
  *(void *)this = a2;
  if ((*(_DWORD *)(a2 + 8) + 64) >= 0x80) {
    operator new[]();
  }
  *((unsigned char *)this + 20) = *((unsigned char *)this + 20) & 0xF0 | 2;
  int v4 = *(_DWORD *)(a2 + 8);
  int v5 = (void **)((char *)this + 8);
  if ((v4 - 64) < 0xFFFFFF80)
  {
    unsigned int v7 = *v5;
    void *v7 = 0;
    int v8 = a3;
    uint64_t v9 = a2;
    bzero(v7 + 1, 8 * (((v4 + 64) >> 6) - 2) + 8);
    a3 = v8;
    a2 = v9;
    int v5 = (void **)*((void *)this + 1);
  }
  else
  {
    *int v5 = 0;
  }
  *((_DWORD *)this + 4) = *(_DWORD *)(a2 + 8) - 1;
  *int v5 = a3;
  llvm::detail::IEEEFloat::normalize(this, 1, 0);
  return this;
}

llvm::detail::IEEEFloat *sub_1CB919070(llvm::detail::IEEEFloat *a1, void *a2, const llvm::APInt **a3)
{
  if (a2 == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(a1, &unk_1CFB2E344, a3);
  }
  else {
    llvm::detail::IEEEFloat::initFromAPInt(a1, a2, a3);
  }
  return a1;
}

uint64_t *sub_1CB9190C0(uint64_t *result, void **a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = *a2;
  if ((_UNKNOWN *)*result == &unk_1CFB2E344 || v3 == &unk_1CFB2E344)
  {
    int v8 = a2;
    uint64_t v10 = result;
    if ((_UNKNOWN *)v2 == &unk_1CFB2E344 && v3 == &unk_1CFB2E344)
    {
      if (result == (uint64_t *)a2) {
        return result;
      }
      sub_1CB845718(result + 1);
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v10, v8);
    }
    else
    {
      if (result == (uint64_t *)a2) {
        return result;
      }
      sub_1CB87DEE4(result);
      sub_1CB9191D4(v10, (uint64_t)v8);
    }
    return v10;
  }
  if ((*(_DWORD *)(v2 + 8) - 64) <= 0xFFFFFF7F)
  {
    uint64_t v7 = result[1];
    if (v7)
    {
      uint64_t v9 = a2;
      int v11 = result;
      MEMORY[0x1D25D9CB0](v7, 0x1000C8000313F17);
      a2 = v9;
      uint64_t result = v11;
      uint64_t v3 = *v9;
    }
  }
  *uint64_t result = (uint64_t)v3;
  result[1] = (uint64_t)a2[1];
  *((_DWORD *)result + 4) = *((_DWORD *)a2 + 4);
  char v5 = *((unsigned char *)result + 20) & 0xF8 | *((unsigned char *)a2 + 20) & 7;
  *((unsigned char *)result + 20) = v5;
  *((unsigned char *)result + 20) = v5 & 0xF7 | *((unsigned char *)a2 + 20) & 8;
  *a2 = &unk_1CFB2E394;
  return result;
}

void *sub_1CB9191D4(void *result, uint64_t a2)
{
  if (*(_UNKNOWN **)a2 == &unk_1CFB2E344) {
    return llvm::detail::DoubleAPFloat::DoubleAPFloat(result, (void *)a2);
  }
  *uint64_t result = &unk_1CFB2E394;
  *uint64_t result = *(void *)a2;
  result[1] = *(void *)(a2 + 8);
  *((_DWORD *)result + 4) = *(_DWORD *)(a2 + 16);
  char v2 = *((unsigned char *)result + 20) & 0xF8 | *(unsigned char *)(a2 + 20) & 7;
  *((unsigned char *)result + 20) = v2;
  *((unsigned char *)result + 20) = v2 & 0xF7 | *(unsigned char *)(a2 + 20) & 8;
  *(void *)a2 = &unk_1CFB2E394;
  return result;
}

void sub_1CB919250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1CB919268(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_1CB919270(uint64_t a1)
{
  return *(unsigned int *)(a1 + 160);
}

uint64_t sub_1CB919278(uint64_t a1)
{
  return *(unsigned int *)(a1 + 176);
}

uint64_t sub_1CB919280(uint64_t a1)
{
  return *(unsigned int *)(a1 + 180);
}

uint64_t sub_1CB919288()
{
  return 0;
}

uint64_t sub_1CB919290()
{
  return 0;
}

uint64_t sub_1CB919298(uint64_t a1)
{
  return *(unsigned int *)(a1 + 156);
}

uint64_t sub_1CB9192A0(uint64_t a1, void *a2)
{
  v60[10] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  int v4 = *(llvm::Module **)(*a2 + 40);
  unsigned int v53 = "tpp_functions";
  LOWORD(v57[0]) = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v4, (const char **)&v53);
  if (NamedMetadata && (v6 = *(uint64_t **)(NamedMetadata + 48), uint64_t v7 = *((unsigned int *)v6 + 2), v7))
  {
    uint64_t v8 = *v6;
    while (*(void *)(*(void *)(*(void *)v8 - 8 * *(unsigned int *)(*(void *)v8 + 8)) + 128) != v3)
    {
      v8 += 8;
      if (!--v7) {
        goto LABEL_6;
      }
    }
    unsigned int v53 = (char *)v57;
    unint64_t v54 = (char *)v57;
    int v56 = 0;
    uint64_t v19 = a2[41];
    uint64_t v55 = 0x100000010;
    v57[0] = v19;
    uint64_t v20 = *(void *)(*(void *)(v19 + 88) + 8 * (**(void **)(v19 + 88) == *(void *)(v19 + 8)));
    unint64_t v58 = v60;
    uint64_t v59 = 0xA00000000;
    sub_1CB91FBE0((uint64_t)&v58, 1uLL, v20);
    unsigned int v21 = v59;
    if (v59)
    {
      while (1)
      {
        uint64_t v22 = *((void *)v58 + v21 - 1);
        LODWORD(v59) = v21 - 1;
        uint64_t v23 = v54;
        uint64_t v24 = HIDWORD(v55);
        if (v54 != v53) {
          break;
        }
        if (HIDWORD(v55))
        {
          int v25 = 0;
          uint64_t v26 = 8 * HIDWORD(v55);
          unint64_t v27 = v54;
          while (*(void *)v27 != v22)
          {
            if (*(void *)v27 == -2) {
              int v25 = v27;
            }
            v27 += 8;
            v26 -= 8;
            if (!v26)
            {
              if (!v25) {
                goto LABEL_40;
              }
              *(void *)int v25 = v22;
              --v56;
              goto LABEL_64;
            }
          }
          goto LABEL_96;
        }
LABEL_40:
        unsigned int v28 = v55;
        if (HIDWORD(v55) >= v55) {
          goto LABEL_43;
        }
        ++HIDWORD(v55);
        *(void *)&v54[8 * v24] = v22;
LABEL_64:
        uint64_t v38 = v54;
        unsigned int v39 = v55;
        int v40 = HIDWORD(v55);
        if (v54 != v53) {
          goto LABEL_74;
        }
        if (HIDWORD(v55))
        {
          int64_t v41 = 0;
          uint64_t v42 = 8 * HIDWORD(v55);
          unsigned int v43 = v54;
          while (*(void *)v43 != v22)
          {
            if (*(void *)v43 == -2) {
              int64_t v41 = v43;
            }
            v43 += 8;
            v42 -= 8;
            if (!v42)
            {
              if (!v41) {
                goto LABEL_72;
              }
              *(void *)int64_t v41 = v22;
              --v56;
              goto LABEL_95;
            }
          }
          goto LABEL_95;
        }
LABEL_72:
        if (v55 <= HIDWORD(v55))
        {
LABEL_74:
          if (3 * (int)v55 <= (4 * (HIDWORD(v55) - v56)))
          {
            if (v55 >= 0x40) {
              unsigned int v39 = 2 * v55;
            }
            else {
              unsigned int v39 = 128;
            }
          }
          else if ((int)v55 - HIDWORD(v55) >= v55 >> 3)
          {
            goto LABEL_76;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v53, v39);
          unsigned int v39 = v55;
          uint64_t v38 = v54;
LABEL_76:
          unsigned int v44 = v39 - 1;
          unsigned int v45 = (v39 - 1) & ((v22 >> 4) ^ (v22 >> 9));
          int v46 = &v38[8 * v45];
          uint64_t v47 = *(void *)v46;
          if (*(void *)v46 == -1)
          {
            int v48 = 0;
LABEL_88:
            if (v48) {
              unint64_t v52 = v48;
            }
            else {
              unint64_t v52 = v46;
            }
            if (*(void *)v52 != v22)
            {
              if (*(void *)v52 == -2) {
                --v56;
              }
              else {
                ++HIDWORD(v55);
              }
              *(void *)unint64_t v52 = v22;
            }
          }
          else
          {
            int v48 = 0;
            int v49 = 1;
            while (v47 != v22)
            {
              if (v48) {
                BOOL v50 = 0;
              }
              else {
                BOOL v50 = v47 == -2;
              }
              if (v50) {
                int v48 = v46;
              }
              unsigned int v51 = v45 + v49++;
              unsigned int v45 = v51 & v44;
              int v46 = &v38[8 * (v51 & v44)];
              uint64_t v47 = *(void *)v46;
              if (*(void *)v46 == -1) {
                goto LABEL_88;
              }
            }
          }
          goto LABEL_95;
        }
        ++HIDWORD(v55);
        *(void *)&v54[8 * v40] = v22;
LABEL_95:
        sub_1CB91FB58((uint64_t)&v58, *(char **)(v22 + 88), *(char **)(v22 + 96));
LABEL_96:
        unsigned int v21 = v59;
        if (!v59) {
          goto LABEL_110;
        }
      }
      unsigned int v28 = v55;
LABEL_43:
      if (3 * v28 <= 4 * (HIDWORD(v55) - v56))
      {
        if (v28 >= 0x40) {
          v28 *= 2;
        }
        else {
          unsigned int v28 = 128;
        }
      }
      else if (v28 - HIDWORD(v55) >= v28 >> 3)
      {
LABEL_45:
        unsigned int v29 = v28 - 1;
        unsigned int v30 = (v28 - 1) & ((v22 >> 4) ^ (v22 >> 9));
        uint64_t v31 = &v23[8 * v30];
        uint64_t v32 = *(void *)v31;
        if (*(void *)v31 != -1)
        {
          uint64_t v33 = 0;
          int v34 = 1;
          while (v32 != v22)
          {
            if (v33) {
              BOOL v35 = 0;
            }
            else {
              BOOL v35 = v32 == -2;
            }
            if (v35) {
              uint64_t v33 = v31;
            }
            unsigned int v36 = v30 + v34++;
            unsigned int v30 = v36 & v29;
            uint64_t v31 = &v23[8 * (v36 & v29)];
            uint64_t v32 = *(void *)v31;
            if (*(void *)v31 == -1) {
              goto LABEL_57;
            }
          }
          goto LABEL_96;
        }
        uint64_t v33 = 0;
LABEL_57:
        if (v33) {
          unsigned int v37 = v33;
        }
        else {
          unsigned int v37 = v31;
        }
        if (*(void *)v37 == v22) {
          goto LABEL_96;
        }
        if (*(void *)v37 == -2) {
          --v56;
        }
        else {
          ++HIDWORD(v55);
        }
        *(void *)unsigned int v37 = v22;
        goto LABEL_64;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v53, v28);
      unsigned int v28 = v55;
      uint64_t v23 = v54;
      goto LABEL_45;
    }
LABEL_110:
    unsigned int v9 = sub_1CB91F3D4((uint64_t)a2, (uint64_t *)&v53);
    if (v58 != v60) {
      free(v58);
    }
    if (v54 != v53) {
      free(v54);
    }
  }
  else
  {
LABEL_6:
    unsigned int v9 = sub_1CB91F3D4((uint64_t)a2, 0);
  }
  uint64_t v10 = *(llvm::Module **)(v3 + 40);
  sub_1CD1157F4(v10, 1, (uint64_t)&v53);
  if ((_BYTE)v54)
  {
    unsigned int v11 = v53;
    sub_1CD1157F4(v10, 0, (uint64_t)&v53);
    unsigned int v12 = v53;
    if (!(_BYTE)v54) {
      unsigned int v12 = 0;
    }
    if (v11 < v12) {
      unsigned int v12 = v11;
    }
    if ((_BYTE)v54) {
      unsigned int v13 = v12;
    }
    else {
      unsigned int v13 = v11;
    }
    if (v13 >= 0x80) {
      unsigned int v13 = 128;
    }
    if (v9 <= v13) {
      unsigned int v9 = v13;
    }
  }
  if (v9 <= 1) {
    int v14 = 1;
  }
  else {
    int v14 = v9;
  }
  if (*(unsigned char *)(a2[2] + 323)) {
    int v15 = -8;
  }
  else {
    int v15 = -4;
  }
  if (*(unsigned char *)(a2[2] + 323)) {
    int v16 = 8;
  }
  else {
    int v16 = 4;
  }
  unsigned int v17 = (v14 + v16 - 1) & v15;
  if (v17 >= 0x80) {
    return 128;
  }
  else {
    return v17;
  }
}

uint64_t sub_1CB919798(uint64_t a1)
{
  return *(unsigned int *)(a1 + 256);
}

uint64_t sub_1CB9197A0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 260);
}

uint64_t sub_1CB9197A8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 264);
}

uint64_t sub_1CB9197B0()
{
  return 0;
}

uint64_t sub_1CB9197B8(uint64_t a1, void *a2)
{
  v56[10] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  int v4 = *(llvm::Module **)(*a2 + 40);
  int v49 = "tpp_functions";
  LOWORD(v53[0]) = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v4, (const char **)&v49);
  if (NamedMetadata && (v6 = *(uint64_t **)(NamedMetadata + 48), uint64_t v7 = *((unsigned int *)v6 + 2), v7))
  {
    uint64_t v8 = *v6;
    while (*(void *)(*(void *)(*(void *)v8 - 8 * *(unsigned int *)(*(void *)v8 + 8)) + 128) != v3)
    {
      v8 += 8;
      if (!--v7) {
        goto LABEL_6;
      }
    }
    int v49 = (char *)v53;
    BOOL v50 = (char *)v53;
    int v52 = 0;
    uint64_t v15 = a2[41];
    uint64_t v51 = 0x100000010;
    v53[0] = v15;
    uint64_t v16 = *(void *)(v15 + 8);
    unint64_t v54 = v56;
    uint64_t v55 = 0xA00000000;
    sub_1CB91FBE0((uint64_t)&v54, 1uLL, v16);
    unsigned int v17 = v55;
    if (v55)
    {
      while (1)
      {
        uint64_t v18 = v54[v17 - 1];
        LODWORD(v55) = v17 - 1;
        uint64_t v19 = v50;
        uint64_t v20 = HIDWORD(v51);
        if (v50 != v49) {
          break;
        }
        if (HIDWORD(v51))
        {
          unsigned int v21 = 0;
          uint64_t v22 = 8 * HIDWORD(v51);
          uint64_t v23 = v50;
          while (*(void *)v23 != v18)
          {
            if (*(void *)v23 == -2) {
              unsigned int v21 = v23;
            }
            v23 += 8;
            v22 -= 8;
            if (!v22)
            {
              if (!v21) {
                goto LABEL_28;
              }
              *(void *)unsigned int v21 = v18;
              --v52;
              goto LABEL_52;
            }
          }
          goto LABEL_84;
        }
LABEL_28:
        unsigned int v24 = v51;
        if (HIDWORD(v51) >= v51) {
          goto LABEL_31;
        }
        ++HIDWORD(v51);
        *(void *)&v50[8 * v20] = v18;
LABEL_52:
        int v34 = v50;
        unsigned int v35 = v51;
        int v36 = HIDWORD(v51);
        if (v50 != v49) {
          goto LABEL_62;
        }
        if (HIDWORD(v51))
        {
          unsigned int v37 = 0;
          uint64_t v38 = 8 * HIDWORD(v51);
          unsigned int v39 = v50;
          while (*(void *)v39 != v18)
          {
            if (*(void *)v39 == -2) {
              unsigned int v37 = v39;
            }
            v39 += 8;
            v38 -= 8;
            if (!v38)
            {
              if (!v37) {
                goto LABEL_60;
              }
              *(void *)unsigned int v37 = v18;
              --v52;
              goto LABEL_83;
            }
          }
          goto LABEL_83;
        }
LABEL_60:
        if (v51 <= HIDWORD(v51))
        {
LABEL_62:
          if (3 * (int)v51 <= (4 * (HIDWORD(v51) - v52)))
          {
            if (v51 >= 0x40) {
              unsigned int v35 = 2 * v51;
            }
            else {
              unsigned int v35 = 128;
            }
          }
          else if ((int)v51 - HIDWORD(v51) >= v51 >> 3)
          {
            goto LABEL_64;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v49, v35);
          unsigned int v35 = v51;
          int v34 = v50;
LABEL_64:
          unsigned int v40 = v35 - 1;
          unsigned int v41 = (v35 - 1) & ((v18 >> 4) ^ (v18 >> 9));
          uint64_t v42 = &v34[8 * v41];
          uint64_t v43 = *(void *)v42;
          if (*(void *)v42 == -1)
          {
            unsigned int v44 = 0;
LABEL_76:
            if (v44) {
              int v48 = v44;
            }
            else {
              int v48 = v42;
            }
            if (*(void *)v48 != v18)
            {
              if (*(void *)v48 == -2) {
                --v52;
              }
              else {
                ++HIDWORD(v51);
              }
              *(void *)int v48 = v18;
            }
          }
          else
          {
            unsigned int v44 = 0;
            int v45 = 1;
            while (v43 != v18)
            {
              if (v44) {
                BOOL v46 = 0;
              }
              else {
                BOOL v46 = v43 == -2;
              }
              if (v46) {
                unsigned int v44 = v42;
              }
              unsigned int v47 = v41 + v45++;
              unsigned int v41 = v47 & v40;
              uint64_t v42 = &v34[8 * (v47 & v40)];
              uint64_t v43 = *(void *)v42;
              if (*(void *)v42 == -1) {
                goto LABEL_76;
              }
            }
          }
          goto LABEL_83;
        }
        ++HIDWORD(v51);
        *(void *)&v50[8 * v36] = v18;
LABEL_83:
        sub_1CB91FB58((uint64_t)&v54, *(char **)(v18 + 88), *(char **)(v18 + 96));
LABEL_84:
        unsigned int v17 = v55;
        if (!v55) {
          goto LABEL_98;
        }
      }
      unsigned int v24 = v51;
LABEL_31:
      if (3 * v24 <= 4 * (HIDWORD(v51) - v52))
      {
        if (v24 >= 0x40) {
          v24 *= 2;
        }
        else {
          unsigned int v24 = 128;
        }
      }
      else if (v24 - HIDWORD(v51) >= v24 >> 3)
      {
LABEL_33:
        unsigned int v25 = v24 - 1;
        unsigned int v26 = (v24 - 1) & ((v18 >> 4) ^ (v18 >> 9));
        unint64_t v27 = &v19[8 * v26];
        uint64_t v28 = *(void *)v27;
        if (*(void *)v27 != -1)
        {
          unsigned int v29 = 0;
          int v30 = 1;
          while (v28 != v18)
          {
            if (v29) {
              BOOL v31 = 0;
            }
            else {
              BOOL v31 = v28 == -2;
            }
            if (v31) {
              unsigned int v29 = v27;
            }
            unsigned int v32 = v26 + v30++;
            unsigned int v26 = v32 & v25;
            unint64_t v27 = &v19[8 * (v32 & v25)];
            uint64_t v28 = *(void *)v27;
            if (*(void *)v27 == -1) {
              goto LABEL_45;
            }
          }
          goto LABEL_84;
        }
        unsigned int v29 = 0;
LABEL_45:
        if (v29) {
          uint64_t v33 = v29;
        }
        else {
          uint64_t v33 = v27;
        }
        if (*(void *)v33 == v18) {
          goto LABEL_84;
        }
        if (*(void *)v33 == -2) {
          --v52;
        }
        else {
          ++HIDWORD(v51);
        }
        *(void *)uint64_t v33 = v18;
        goto LABEL_52;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v49, v24);
      unsigned int v24 = v51;
      uint64_t v19 = v50;
      goto LABEL_33;
    }
LABEL_98:
    unsigned int v9 = sub_1CB91F3D4((uint64_t)a2, (uint64_t *)&v49);
    if (v54 != v56) {
      free(v54);
    }
    if (v50 != v49) {
      free(v50);
    }
  }
  else
  {
LABEL_6:
    unsigned int v9 = 0;
  }
  if (v9 <= 1) {
    int v10 = 1;
  }
  else {
    int v10 = v9;
  }
  if (*(unsigned char *)(a2[2] + 323)) {
    int v11 = -8;
  }
  else {
    int v11 = -4;
  }
  if (*(unsigned char *)(a2[2] + 323)) {
    int v12 = 8;
  }
  else {
    int v12 = 4;
  }
  unsigned int v13 = (v10 + v12 - 1) & v11;
  if (v13 >= 0x80) {
    return 128;
  }
  else {
    return v13;
  }
}

uint64_t sub_1CB919C24(uint64_t a1)
{
  return *(unsigned int *)(a1 + 232);
}

uint64_t sub_1CB919C2C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_1CB919C34(uint64_t a1)
{
  return *(unsigned int *)(a1 + 268);
}

uint64_t sub_1CB919C3C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_1CB919C44()
{
  return 0;
}

uint64_t sub_1CB919C4C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_1CB919C54()
{
  return 0;
}

uint64_t sub_1CB919C5C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1CB919C64(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_1CB919C6C()
{
  return 0;
}

uint64_t sub_1CB919C74()
{
  return 0;
}

uint64_t sub_1CB919C7C()
{
  return 0;
}

uint64_t sub_1CB919C84(uint64_t a1)
{
  return *(unsigned int *)(a1 + 212);
}

uint64_t sub_1CB919C8C(uint64_t a1, void *a2, unsigned int a3)
{
  unsigned int v5 = 106496;
  int v6 = *(unsigned __int8 *)((*(uint64_t (**)(void, void))(*(void *)a2[1] + 16))(a2[1], *a2) + 323);
  uint64_t v7 = (unsigned char *)(*(uint64_t (**)(void, void))(*(void *)a2[1] + 16))(a2[1], *a2);
  if (!v7[320] && !v7[321])
  {
    if (v7[322]) {
      unsigned int v5 = 106496;
    }
    else {
      unsigned int v5 = 98304;
    }
  }
  if (a3 <= 1) {
    int v8 = 1;
  }
  else {
    int v8 = a3;
  }
  unsigned int v9 = (v8 + 1) >> 1;
  if (v9 <= 1) {
    unsigned int v9 = 1;
  }
  if (v6) {
    unsigned int v10 = 8;
  }
  else {
    unsigned int v10 = 4;
  }
  unsigned int v11 = (v9 + v10 - 1) / v10 * v10;
  if (v11 >= 0x80) {
    unsigned int v11 = 128;
  }
  unsigned int v12 = v5 / (v11 << 6);
  if (v12 >= 0x60) {
    unsigned int v12 = 96;
  }
  return COERCE_UNSIGNED_INT(fminf((float)v12 / 96.0, 1.0)) | 0x100000000;
}

uint64_t sub_1CB919DAC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 216);
}

uint64_t sub_1CB919DB4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 128);
}

uint64_t sub_1CB919DBC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_1CB919DC4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 204);
}

uint64_t sub_1CB919DCC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 200);
}

uint64_t sub_1CB919DD4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 184);
}

uint64_t sub_1CB919DDC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 176);
}

uint64_t sub_1CB919DE4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 188);
}

uint64_t sub_1CB919DEC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 180);
}

uint64_t sub_1CB919DF4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 160);
}

uint64_t sub_1CB919DFC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 208);
}

uint64_t sub_1CB919E04(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 152) + *(_DWORD *)(a1 + 148));
}

uint64_t sub_1CB919E10(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_1CB919E18(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t sub_1CB919E20(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

uint64_t sub_1CB919E28(uint64_t a1)
{
  return *(unsigned int *)(a1 + 60);
}

uint64_t sub_1CB919E30(uint64_t a1)
{
  return *(unsigned int *)(a1 + 192);
}

uint64_t sub_1CB919E38(uint64_t a1)
{
  return *(unsigned int *)(a1 + 196);
}

uint64_t sub_1CB919E40(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_1CB919E48(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

uint64_t sub_1CB919E50(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_1CB919E58(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t sub_1CB919E60(uint64_t a1)
{
  return *(unsigned int *)(a1 + 68);
}

uint64_t sub_1CB919E68(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t sub_1CB919E70(uint64_t a1)
{
  return *(unsigned int *)(a1 + 76);
}

uint64_t sub_1CB919E78(uint64_t a1)
{
  return *(unsigned int *)(a1 + 80);
}

uint64_t sub_1CB919E80(uint64_t a1)
{
  return *(unsigned int *)(a1 + 84);
}

uint64_t sub_1CB919E88(uint64_t a1)
{
  return *(unsigned int *)(a1 + 88);
}

uint64_t sub_1CB919E90(uint64_t a1)
{
  return *(unsigned int *)(a1 + 92);
}

uint64_t sub_1CB919E98(uint64_t a1)
{
  return *(unsigned int *)(a1 + 96);
}

uint64_t sub_1CB919EA0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 100);
}

uint64_t sub_1CB919EA8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

uint64_t sub_1CB919EB0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 108);
}

uint64_t sub_1CB919EB8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 112);
}

uint64_t sub_1CB919EC0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 116);
}

uint64_t sub_1CB919EC8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 120);
}

uint64_t sub_1CB919ED0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 124);
}

uint64_t sub_1CB919ED8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 132);
}

uint64_t sub_1CB919EE0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 136);
}

uint64_t sub_1CB919EE8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 140);
}

uint64_t sub_1CB919EF0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 144);
}

uint64_t sub_1CB919EF8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 148);
}

uint64_t sub_1CB919F00(uint64_t a1)
{
  return *(unsigned int *)(a1 + 164);
}

uint64_t sub_1CB919F08(uint64_t a1)
{
  return *(unsigned int *)(a1 + 168);
}

uint64_t sub_1CB919F10(uint64_t a1)
{
  return *(unsigned int *)(a1 + 172);
}

uint64_t sub_1CB919F18(uint64_t a1)
{
  return *(unsigned int *)(a1 + 228);
}

uint64_t sub_1CB919F20(uint64_t a1)
{
  return *(unsigned int *)(a1 + 220);
}

uint64_t sub_1CB919F28(uint64_t a1)
{
  return *(unsigned int *)(a1 + 224);
}

uint64_t sub_1CB919F30(uint64_t a1)
{
  return *(unsigned int *)(a1 + 236);
}

uint64_t sub_1CB919F38(uint64_t a1)
{
  return *(unsigned int *)(a1 + 240);
}

uint64_t sub_1CB919F40(uint64_t a1)
{
  return *(unsigned int *)(a1 + 244);
}

uint64_t sub_1CB919F48(uint64_t a1)
{
  return *(unsigned int *)(a1 + 248);
}

uint64_t sub_1CB919F50()
{
  return 0;
}

uint64_t sub_1CB919F58(uint64_t result, uint64_t a2)
{
  for (uint64_t i = *(void *)(a2 + 328); i != a2 + 320; uint64_t i = *(void *)(i + 8))
  {
    for (uint64_t j = *(void *)(i + 56); j != i + 48; uint64_t j = *(void *)(j + 8))
    {
      if (**(unsigned __int16 **)(j + 16) - 4570 <= 7)
      {
        unint64_t v4 = *(unsigned int *)&asc_1CD96DC10[4 * *(int *)(*(void *)(j + 32) + 68) - 12];
        *(void *)(*(void *)(result + 272) + ((v4 >> 3) & 0x1FFFFFF8)) |= 1 << v4;
      }
      if ((*(unsigned char *)j & 4) == 0)
      {
        while ((*(_WORD *)(j + 44) & 8) != 0)
          uint64_t j = *(void *)(j + 8);
      }
    }
  }
  return result;
}

uint64_t sub_1CB919FFC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 0x800000000;
  unint64_t v3 = *(unsigned int *)(result + 336);
  if (v3)
  {
    unsigned int v4 = 0;
    for (unint64_t i = 0; i < v3; ++i)
    {
      if ((*(void *)(*(void *)(result + 272) + 8 * (i >> 6)) >> i))
      {
        if (v4 >= *(_DWORD *)(a2 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)a2 + 4 * v4) = i;
        unsigned int v4 = *(_DWORD *)(a2 + 8) + 1;
        *(_DWORD *)(a2 + 8) = v4;
        unint64_t v3 = *(unsigned int *)(result + 336);
      }
    }
  }
  return result;
}

void sub_1CB91A0B8(void *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v113 = *MEMORY[0x1E4F143B8];
  *a2 = (uint64_t)(a2 + 2);
  a2[1] = 0x600000000;
  *((_DWORD *)a2 + 16) = 0;
  *(_OWORD *)(a2 + 9) = 0u;
  int v100 = a2 + 9;
  *(_OWORD *)(a2 + 11) = 0u;
  uint64_t v99 = a2 + 11;
  *(_OWORD *)((char *)a2 + 99) = 0u;
  unint64_t v3 = (unsigned __int8 *)a1[2];
  v103[0] = v104;
  v104[0] = 0;
  v104[1] = 0;
  v103[1] = (void *)0x600000002;
  int v105 = 128;
  BOOL v101 = v3;
  uint64_t v95 = a1;
  if (v3[396])
  {
    unsigned int v4 = *(llvm::Module **)(*a1 + 40);
    uint64_t v5 = a1[43];
    uint64_t v106 = 1;
    for (uint64_t i = 8; i != 264; i += 16)
      *(uint64_t *)((char *)&v106 + i) = -4096;
    v110[0] = "agx.interpolations";
    __int16 v112 = 259;
    uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v4, v110);
    if (NamedMetadata)
    {
      uint64_t v8 = NamedMetadata;
      uint64_t v9 = *(unsigned int *)(*(void *)(NamedMetadata + 48) + 8);
      if (v9)
      {
        uint64_t v10 = 0;
        uint64_t v11 = 8 * v9;
        do
        {
          uint64_t v12 = *(void *)(**(void **)(v8 + 48) + v10);
          uint64_t v13 = *(unsigned int *)(v12 + 8);
          if (*(void *)(v12 - 8 * v13))
          {
            v110[0] = 0;
            v110[0] = *(const char **)(*(void *)(v12 - 8 * v13) + 128);
            sub_1CB91FE08((uint64_t)&v106, v110)[1] = v12;
          }
          v10 += 8;
        }
        while (v11 != v10);
      }
    }
    (*(void (**)(const char **__return_ptr, uint64_t, uint64_t))(*(void *)v5 + 128))(v110, v5, 9);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v5 + 136))(&v102, v5, 9);
    uint64_t v14 = v102;
    uint64_t v97 = v110[0];
    if (v110[0])
    {
      (*(void (**)(const char **__return_ptr))(*(void *)v110[0] + 16))(v110);
      uint64_t v15 = v110[0];
      if (v14)
      {
LABEL_12:
        uint64_t v16 = v14;
        (*(void (**)(const char **__return_ptr, uint64_t))(*(void *)v14 + 16))(v110, v14);
        unsigned int v17 = v110[0];
LABEL_13:
        while (((*(uint64_t (**)(const char *, const char *))(*(void *)v15 + 24))(v15, v17) & 1) == 0)
        {
          uint64_t v18 = *(void *)(*(uint64_t (**)(const char *))(*(void *)v15 + 32))(v15);
          LODWORD(v102) = 0;
          LODWORD(v102) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 400))(v5, v18);
          if (v106)
          {
            int v19 = 16;
            uint64_t v20 = &v107;
          }
          else
          {
            int v19 = v108;
            if (!v108) {
              goto LABEL_23;
            }
            uint64_t v20 = v107;
          }
          int v21 = v19 - 1;
          uint64_t v22 = (v19 - 1) & ((v18 >> 4) ^ (v18 >> 9));
          uint64_t v23 = v20[2 * v22];
          if (v18 != v23)
          {
            int v24 = 1;
            while (v23 != -4096)
            {
              int v25 = v22 + v24++;
              uint64_t v22 = v25 & v21;
              uint64_t v23 = v20[2 * v22];
              if (v18 == v23) {
                goto LABEL_20;
              }
            }
LABEL_23:
            uint64_t v26 = 0;
            goto LABEL_24;
          }
LABEL_20:
          uint64_t v26 = v20[2 * v22 + 1];
LABEL_24:
          v110[0] = (const char *)&unk_1F25EE888;
          v110[1] = (const char *)v103;
          v110[2] = (const char *)&v102;
          uint64_t v111 = v110;
          sub_1CB91FCAC(v26, (uint64_t)v110);
          if (v111 == v110)
          {
            (*((void (**)(const char **))v110[0] + 4))(v110);
          }
          else if (v111)
          {
            (*((void (**)(const char **))*v111 + 5))(v111);
          }
          (*(void (**)(const char *))(*(void *)v15 + 40))(v15);
        }
        if (v17) {
          (*(void (**)(const char *))(*(void *)v17 + 8))(v17);
        }
        (*(void (**)(const char *))(*(void *)v15 + 8))(v15);
        if (v16) {
          (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
        }
        if (v97) {
          (*(void (**)(const char *))(*(void *)v97 + 8))(v97);
        }
        if ((v106 & 1) == 0) {
          MEMORY[0x1D25D9CD0](v107, 8);
        }
        int v27 = v105;
        uint64_t v28 = *((unsigned int *)a2 + 2);
        if ((a2[8] & 0x3F) != 0) {
          *(void *)(*a2 + 8 * v28 - 8) &= ~(-1 << (a2[8] & 0x3F));
        }
        unsigned int v29 = v28;
        *((_DWORD *)a2 + 16) = v27;
        unsigned int v30 = v27 + 63;
        if (v28 != (v27 + 63) >> 6)
        {
          uint64_t v31 = v30 >> 6;
          if (v28 > v31)
          {
            *((_DWORD *)a2 + 2) = v31;
            unsigned int v29 = v30 >> 6;
          }
          else
          {
            if (v31 > *((_DWORD *)a2 + 3)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v31 != v28) {
              bzero((void *)(*a2 + 8 * v28), 8 * (v31 - v28));
            }
            unsigned int v29 = v31;
            *((_DWORD *)a2 + 2) = v31;
            int v27 = *((_DWORD *)a2 + 16);
          }
        }
        int v32 = v27 & 0x3F;
        a1 = v95;
        if (v32) {
          *(void *)(*a2 + 8 * v29 - 8) &= ~(-1 << v32);
        }
        goto LABEL_47;
      }
    }
    else
    {
      uint64_t v15 = 0;
      if (v102) {
        goto LABEL_12;
      }
    }
    uint64_t v16 = v14;
    unsigned int v17 = 0;
    goto LABEL_13;
  }
LABEL_47:
  uint64_t v33 = (void *)a1[41];
  uint64_t v96 = a1 + 40;
  if (v33 == a1 + 40) {
    goto LABEL_138;
  }
  char v34 = 0;
  do
  {
    unsigned int v35 = v33 + 6;
    char v98 = v33;
    for (uint64_t j = (void *)v33[7]; j != v35; uint64_t j = (void *)j[1])
    {
      unsigned int v37 = (unsigned __int16 *)j[2];
      int v38 = *v37;
      BOOL v39 = (v38 - 9) > 0x3C || ((1 << (v38 - 9)) & 0x1000000000000605) == 0;
      BOOL v40 = !v39 || v38 == 0;
      if (!v40 && (v37[4] & 0x10) == 0) {
        ++*((_DWORD *)a2 + 26);
      }
      if (v34) {
        goto LABEL_61;
      }
      char v34 = 0;
      if (v101[396] && (*((void *)v37 + 2) & 0x10) != 0 && (v38 - 3922) <= 0xFFFFFF9F)
      {
        unsigned int v41 = sub_1CBC7A3F8(v38, 0x24u);
        unsigned int v42 = sub_1CBC7A3F8(v38, 0x25u);
        uint64_t v43 = j[4];
        unint64_t v44 = *(unsigned int *)(v43 + 32 * v42 + 4);
        uint64_t v45 = 1 << v44;
        unint64_t v46 = v44 >> 6;
        unsigned int v47 = (uint64_t *)v103[0];
        if ((v45 & *((void *)v103[0] + v46)) == 0) {
          goto LABEL_72;
        }
        uint64_t v48 = *a2;
        *(void *)(*a2 + 8 * v46) |= v45;
        if (*(unsigned char *)(v43 + 32 * v41) == 7)
        {
          int v49 = sub_1CB91FC94(v38);
          if (v49)
          {
            unsigned int v50 = *(_DWORD *)(v43 + 32 * v41 + 4);
            uint64_t v51 = v103[0];
            uint64_t v52 = *a2;
            do
            {
              uint64_t v53 = v50 >> 6;
              if (((1 << v50) & v51[v53]) != 0) {
                *(void *)(v52 + 8 * v53) |= 1 << v50;
              }
              ++v50;
              --v49;
            }
            while (v49);
          }
LABEL_72:
          char v34 = 0;
          goto LABEL_73;
        }
        int v68 = v105;
        if (!v105) {
          goto LABEL_61;
        }
        uint64_t v69 = 0;
        uint64_t v70 = (v105 - 1) >> 6;
        uint64_t v71 = v70 << 6;
        int v72 = v47;
        while (1)
        {
          uint64_t v74 = *v72++;
          uint64_t v73 = v74;
          unint64_t v75 = v71 == v69 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v105 : -1;
          unint64_t v76 = v75 & v73;
          if (v76) {
            break;
          }
          v69 += 64;
          char v34 = 1;
          if (v71 + 64 == v69) {
            goto LABEL_73;
          }
        }
        uint64_t v77 = __clz(__rbit64(v76)) + v69;
        if ((v77 & 0x80000000) != 0)
        {
LABEL_61:
          char v34 = 1;
          goto LABEL_73;
        }
        do
        {
          char v34 = 1;
          *(void *)(v48 + 8 * (v77 >> 6)) |= 1 << v77;
          unsigned int v78 = v77 + 1;
          if (v78 == v68) {
            break;
          }
          unsigned int v79 = v78 >> 6;
          if (v78 >> 6 > v70) {
            goto LABEL_61;
          }
          uint64_t v80 = 0;
          int v81 = v78 & 0x3F;
          BOOL v39 = v81 == 0;
          uint64_t v82 = -1;
          unint64_t v83 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v81;
          if (!v39) {
            uint64_t v82 = ~v83;
          }
          int v84 = -64 * v79;
          uint64_t v85 = v70 - v79;
          uint64_t v86 = (char *)&v47[v79];
          while (1)
          {
            uint64_t v87 = v80 ? -1 : v82;
            unint64_t v88 = v85 == v80 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v68 : -1;
            unint64_t v89 = v87 & v88 & *(void *)&v86[8 * v80];
            if (v89) {
              break;
            }
            v84 -= 64;
            ++v80;
            char v34 = 1;
            if (v85 + 1 == v80) {
              goto LABEL_73;
            }
          }
          char v34 = 1;
          LODWORD(v77) = __clz(__rbit64(v89)) - v84;
        }
        while ((int)v77 >= 0);
      }
LABEL_73:
      unint64_t v54 = (unsigned __int16 *)j[2];
      int v55 = *v54;
      if ((v55 - 609) > 0x1F)
      {
        if ((v55 - 4581) > 0xB)
        {
          if ((v55 - 743) <= 0xD) {
            *((unsigned char *)a2 + 114) = 1;
          }
        }
        else
        {
          *((unsigned char *)a2 + 113) = 1;
        }
      }
      else
      {
        *((unsigned char *)a2 + 112) = 1;
      }
      uint64_t v56 = *((void *)v54 + 2);
      uint64_t v57 = v56 & 0x800200;
      if ((v56 & 0x800100) == 0x800100 || v57 == 8389120)
      {
        BOOL v60 = (v56 & 0x800100) == 8388864;
        BOOL v59 = v57 == 8389120;
        if ((*(unsigned char *)(j[4] + 32 * sub_1CBC7A3F8(v55, 0x16u) + 17) & 4) != 0)
        {
          BOOL v59 = 0;
          BOOL v60 = 0;
        }
      }
      else
      {
        BOOL v59 = 0;
        BOOL v60 = 0;
      }
      if ((v56 & 0xD00) == 0x500)
      {
        uint64_t v61 = j[6];
        if ((v61 & 7) != 0)
        {
          int v62 = *(uint64_t **)((v61 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else
        {
          int v62 = (uint64_t *)(v61 & 0xFFFFFFFFFFFFFFF8);
          j[6] = v62;
        }
        uint64_t v65 = *v62;
        if ((v65 & 4) != 0
          && *(_DWORD *)((v65 & 0xFFFFFFFFFFFFFFF8) + 8) >= 7u
          && !(*(unsigned int (**)(unint64_t))(*(void *)(v65 & 0xFFFFFFFFFFFFFFF8) + 48))(v65 & 0xFFFFFFFFFFFFFFF8))
        {
          goto LABEL_99;
        }
        BOOL v60 = 0;
LABEL_97:
        if (!v59) {
          goto LABEL_98;
        }
        goto LABEL_99;
      }
      if ((v56 & 0xE00) != 0x600) {
        goto LABEL_97;
      }
      uint64_t v63 = j[6];
      if ((v63 & 7) != 0)
      {
        unint64_t v64 = *(uint64_t **)((v63 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        unint64_t v64 = (uint64_t *)(v63 & 0xFFFFFFFFFFFFFFF8);
        j[6] = v64;
      }
      uint64_t v67 = *v64;
      if ((v67 & 4) == 0
        || *(_DWORD *)((v67 & 0xFFFFFFFFFFFFFFF8) + 8) < 7u
        || (*(unsigned int (**)(unint64_t))(*(void *)(v67 & 0xFFFFFFFFFFFFFFF8) + 48))(v67 & 0xFFFFFFFFFFFFFFF8))
      {
        BOOL v59 = 0;
LABEL_98:
        if (!v60) {
          continue;
        }
        goto LABEL_99;
      }
      BOOL v59 = 1;
LABEL_99:
      sub_1CB954E98((uint64_t)j, (uint64_t)&v106, v101[327]);
      if (!BYTE6(v107)) {
        sub_1CB955048((uint64_t)v110);
      }
      if (v59) {
        float v66 = v99;
      }
      else {
        float v66 = v100;
      }
      *float v66 = -1;
      v66[1] = -1;
    }
    uint64_t v33 = (void *)v98[1];
  }
  while (v33 != v96);
LABEL_138:
  unsigned int v90 = *(unsigned __int16 *)(*v95 + 18);
  int v91 = (v90 >> 4) & 0x3FF;
  if (v91 != 100 && (v91 - 109) >= 0xFFFFFFF7)
  {
    if (v101[381])
    {
      if ((v90 & 0x3FF0) != 0x640
        && *(unsigned char *)(v95[1] + 1687)
        && (uint64_t v93 = *(llvm::Module **)(*v95 + 40),
            uint64_t v106 = (uint64_t)"agx.stack_oob",
            __int16 v109 = 259,
            llvm::Module::getNamedMetadata(v93, (const char **)&v106)))
      {
        int v94 = 32;
      }
      else
      {
        int v94 = 0;
      }
    }
    else
    {
      int v94 = *(_DWORD *)(v95[7] + 48);
    }
    *((_DWORD *)a2 + 27) = v94;
  }
  if (v103[0] != v104) {
    free(v103[0]);
  }
}

uint64_t sub_1CB91B008(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  if (!v2)
  {
    uint64_t v2 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 8) + 216))(*(void *)(a2 + 8), a2 + 128, a2);
    *(void *)(a2 + 48) = v2;
  }
  return *(unsigned int *)(v2 + 440);
}

uint64_t sub_1CB91B070()
{
  return 0;
}

uint64_t sub_1CB91B078()
{
  return 0;
}

uint64_t sub_1CB91B080(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, uint64_t, void, uint64_t, uint64_t))
{
  uint64_t result = (**a3)(a3, 11, 0, 1, 4);
  unsigned int v5 = *(_DWORD *)(a1 + 244);
  if (v5 <= result) {
    unsigned int v5 = result;
  }
  *(_DWORD *)(a1 + 244) = v5;
  return result;
}

void sub_1CB91B0E8(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unsigned int v4 = a4;
  v525[9] = *MEMORY[0x1E4F143B8];
  if ((*(_WORD *)(*(void *)a1 + 18) & 0x3FF0) == 0x640)
  {
    uint64_t v6 = *(void *)(a1 + 328);
    if (v6 != a1 + 320)
    {
      int v7 = a4[56];
      do
      {
        for (uint64_t i = *(void *)(v6 + 56); i != v6 + 48; uint64_t i = *(void *)(i + 8))
        {
          uint64_t v9 = *(unsigned __int16 **)(i + 16);
          int v10 = *v9;
          BOOL v11 = (v10 - 9) > 0x3C || ((1 << (v10 - 9)) & 0x1000000000000605) == 0;
          BOOL v12 = !v11 || v10 == 0;
          if (!v12 && (v9[4] & 0x10) == 0) {
            a4[56] = ++v7;
          }
          if ((*(unsigned char *)i & 4) == 0)
          {
            while ((*(_WORD *)(i + 44) & 8) != 0)
              uint64_t i = *(void *)(i + 8);
          }
        }
        uint64_t v6 = *(void *)(v6 + 8);
      }
      while (v6 != a1 + 320);
    }
    a4[60] += (***(uint64_t (****)(void, uint64_t, void, uint64_t, uint64_t))(a1 + 344))(*(void *)(a1 + 344), 12, 0, 1, 3);
    return;
  }
  uint64_t v13 = *(unsigned __int8 **)(a1 + 16);
  uint64_t v14 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v13 + 104))(v13);
  uint64_t v15 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 176))(*(void *)(a1 + 16));
  int v16 = v13[318];
  long long v513 = unk_1CFB28E00;
  v511[1] = unk_1CFB28DE0;
  long long v512 = xmmword_1CFB28DF0;
  v511[0] = llvm::MCSchedModel::Default;
  long long v516 = unk_1CFB28DE0;
  long long v517 = xmmword_1CFB28DF0;
  long long v518 = unk_1CFB28E00;
  uint64_t v514 = 0;
  uint64_t v519 = 0;
  long long v515 = llvm::MCSchedModel::Default;
  long long v522 = 0u;
  long long v521 = 0u;
  long long v520 = 0u;
  v523 = v525;
  uint64_t v524 = 0x1000000000;
  v525[8] = 0;
  llvm::TargetSchedModel::init((llvm::TargetSchedModel *)v511, (const llvm::TargetSubtargetInfo *)v13);
  uint64_t v17 = *(void *)(v14 + 8);
  uint64_t v18 = 195600;
  if (!v16) {
    uint64_t v18 = 195696;
  }
  unsigned int v19 = *(unsigned __int16 *)(v17 + v18 + 6);
  unsigned int v20 = *(unsigned __int16 *)(v17 + 219750);
  unsigned int v21 = *(unsigned __int16 *)(v17 + 48 * sub_1CB952700(6, 385, v13) + 6);
  v471 = v13;
  unsigned int v22 = sub_1CB952700(20, 244, v13);
  uint64_t v23 = *(void *)(v522 + 136);
  uint64_t v463 = *(unsigned __int16 *)(v23 + 4 * *(unsigned __int16 *)(*((void *)&v512 + 1) + 24 * v19 + 10));
  uint64_t v451 = *(unsigned __int16 *)(v23 + 4 * *(unsigned __int16 *)(*((void *)&v512 + 1) + 24 * v20 + 10));
  uint64_t v470 = *(unsigned __int16 *)(v23 + 4 * *(unsigned __int16 *)(*((void *)&v512 + 1) + 24 * v21 + 10));
  uint64_t v459 = *(unsigned __int16 *)(v23
                             + 4
                             * *(unsigned __int16 *)(*((void *)&v512 + 1)
                                                   + 24 * *(unsigned __int16 *)(v17 + 48 * v22 + 6)
                                                   + 10));
  uint64_t v488 = 0;
  v487 = 0;
  uint64_t v485 = 0;
  v486 = &v487;
  v483 = &v484;
  v484 = 0;
  uint64_t v480 = 0;
  uint64_t v481 = 0;
  int v482 = 0;
  v479 = &unk_1F25FD3D0;
  uint64_t v445 = a1;
  uint64_t v437 = a1 + 320;
  v464 = v4;
  if (*(void *)(a1 + 328) != a1 + 320)
  {
    uint64_t v24 = *(void *)(a1 + 328);
    char v460 = 0;
    BOOL v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    v440 = v4 + 4;
    v441 = v4 + 5;
    v438 = v4 + 2;
    v439 = v4 + 3;
    v436 = v4 + 13;
    v444 = v4 + 12;
    v430 = v4 + 11;
    v431 = v4 + 14;
    v429 = v4 + 10;
    v434 = v4 + 7;
    v443 = v4 + 8;
    v458 = v4 + 1;
    unsigned int v29 = (uint64_t *)(v15 + 8);
    if (!v15) {
      unsigned int v29 = 0;
    }
    v455 = v29;
    v432 = v4 + 24;
    v433 = v4 + 23;
    v435 = v4 + 22;
    v448 = v4 + 36;
    v449 = v4 + 35;
    v446 = v4 + 21;
    v447 = v4 + 49;
    v457 = v4 + 48;
    char v30 = 1;
    int v462 = -1;
    int v461 = -1;
    uint64_t v31 = v15;
    uint64_t v452 = v15;
    uint64_t v32 = v463;
    while (1)
    {
      uint64_t v33 = *(void *)(a2 + 248);
      unsigned int v34 = v24 >> 4;
      int v35 = *(_DWORD *)(a2 + 264);
      uint64_t v450 = v24;
      if (!byte_1EBD07020) {
        goto LABEL_840;
      }
      if (v35)
      {
        uint64_t v36 = (v35 - 1) & (v34 ^ (v24 >> 9));
        uint64_t v37 = *(void *)(v33 + 16 * v36);
        if (v24 != v37)
        {
          int v38 = 1;
          while (v37 != -4096)
          {
            int v39 = v36 + v38++;
            uint64_t v36 = v39 & (v35 - 1);
            uint64_t v37 = *(void *)(v33 + 16 * v36);
            if (v24 == v37) {
              goto LABEL_33;
            }
          }
          goto LABEL_553;
        }
LABEL_33:
        if (*(void *)(v33 + 16 * v36 + 8))
        {
LABEL_840:
          if (v35)
          {
            unsigned int v40 = v35 - 1;
            uint64_t v41 = v40 & (v34 ^ (v24 >> 9));
            uint64_t v42 = *(void *)(v33 + 16 * v41);
            if (v24 == v42)
            {
LABEL_39:
              uint64_t v45 = *(void *)(v33 + 16 * v41 + 8);
              if (v45)
              {
                unint64_t v46 = *(uint64_t **)(v45 + 32);
                if (*v46 == v24)
                {
                  ++v4[62];
                  int v275 = *(uint64_t **)(v45 + 40);
                  if (v275 != v46)
                  {
                    int v276 = v4[63];
                    int v277 = v4[64];
                    do
                    {
                      uint64_t v278 = *v46;
                      uint64_t v279 = ((*v46 >> 4) ^ (*v46 >> 9)) & v40;
                      uint64_t v280 = *(void *)(v33 + 16 * v279);
                      if (*v46 == v280)
                      {
LABEL_562:
                        uint64_t v283 = *(void *)(v33 + 16 * v279 + 8);
                      }
                      else
                      {
                        int v281 = 1;
                        while (v280 != -4096)
                        {
                          int v282 = v279 + v281++;
                          uint64_t v279 = v282 & v40;
                          uint64_t v280 = *(void *)(v33 + 16 * v279);
                          if (v278 == v280) {
                            goto LABEL_562;
                          }
                        }
                        uint64_t v283 = 0;
                      }
                      if (v283 == v45)
                      {
                        uint64_t v284 = v278 + 48;
                        for (uint64_t j = *(void *)(v278 + 56); j != v284; uint64_t j = *(void *)(j + 8))
                        {
                          uint64_t v286 = *(unsigned __int16 **)(j + 16);
                          int v287 = *v286;
                          unsigned int v288 = v287 - 9;
                          BOOL v290 = (v287 - 9) <= 0x3C
                              && ((1 << (v287 - 9)) & 0x1000000000000605) != 0
                              || v287 == 0;
                          if (!v290 && (v286[4] & 0x10) == 0)
                          {
                            v4[63] = ++v276;
                            BOOL v54 = v288 > 0x3C;
                            uint64_t v291 = (1 << v288) & 0x1000000000000405;
                            BOOL v292 = v54 || v291 == 0;
                            BOOL v293 = !v292 || v287 == 0;
                            if (v293 || (v286[8] & 1) != 0) {
                              v4[64] = ++v277;
                            }
                          }
                          if ((*(unsigned char *)j & 4) == 0)
                          {
                            while ((*(_WORD *)(j + 44) & 8) != 0)
                              uint64_t j = *(void *)(j + 8);
                          }
                        }
                      }
                      ++v46;
                    }
                    while (v46 != v275);
                  }
                }
              }
            }
            else
            {
              int v43 = 1;
              while (v42 != -4096)
              {
                int v44 = v41 + v43++;
                uint64_t v41 = v44 & v40;
                uint64_t v42 = *(void *)(v33 + 16 * v41);
                if (v24 == v42) {
                  goto LABEL_39;
                }
              }
            }
          }
          uint64_t v47 = *(void *)(v24 + 56);
          uint64_t v465 = v24 + 48;
          if (v47 != v24 + 48) {
            break;
          }
        }
      }
LABEL_553:
      uint64_t v62 = v28;
      uint64_t v274 = v26;
      BOOL v60 = v25;
LABEL_554:
      uint64_t v24 = *(void *)(v450 + 8);
      BOOL v25 = v60;
      uint64_t v26 = v274;
      uint64_t v28 = v62;
      if (v24 == v437) {
        goto LABEL_591;
      }
    }
    int v48 = 0;
    while (1)
    {
      int v49 = *(unsigned __int16 **)(v47 + 16);
      int v50 = *v49;
      unsigned int v51 = v50 - 9;
      BOOL v53 = (v50 - 9) <= 0x3C && ((1 << (v50 - 9)) & 0x1000000000000605) != 0
         || v50 == 0;
      if (v53 || (v49[4] & 0x10) != 0)
      {
        BOOL v60 = v25;
        BOOL v61 = v26;
        uint64_t v62 = v28;
        uint64_t v63 = v27;
        goto LABEL_538;
      }
      BOOL v54 = v51 > 0x3C;
      uint64_t v55 = (1 << v51) & 0x1000000000000405;
      BOOL v56 = v54 || v55 == 0;
      BOOL v57 = !v56 || v50 == 0;
      BOOL v58 = v57 || v49[8] & 1;
      BOOL v468 = v58;
      BOOL v466 = 0;
      if (v50 > 2149) {
        break;
      }
      if (v50 != 1100)
      {
        if (v50 != 2114) {
          goto LABEL_67;
        }
LABEL_62:
        BOOL v59 = v471[338] != 0;
        goto LABEL_547;
      }
      if (!v471[338])
      {
        BOOL v466 = 0;
        goto LABEL_67;
      }
      BOOL v59 = *(unsigned __int8 *)(*(void *)(v47 + 32) + 64) == 7;
LABEL_547:
      BOOL v466 = v59;
LABEL_67:
      if (!(v30 & 1 | (v25 == v468))) {
        ++v4[30];
      }
      if (v460) {
        ++v4[28];
      }
      int v64 = sub_1CBD7904C(v50);
      uint64_t v65 = v458;
      BOOL v66 = v468;
      switch(v64)
      {
        case 2:
          uint64_t v65 = v438;
          break;
        case 3:
        case 5:
        case 7:
          __break(1u);
          JUMPOUT(0x1CB91F3B4);
        case 4:
          uint64_t v65 = v439;
          break;
        case 6:
          uint64_t v65 = v440;
          break;
        case 8:
          uint64_t v65 = v441;
          break;
        default:
          break;
      }
      ++*v65;
      if (v471[318])
      {
        if (v4[26] == -1) {
          v4[26] = 0;
        }
        v4[26] += sub_1CB9516AC((int *)&v480, v47, v31);
        BOOL v66 = v468;
      }
      if (v26)
      {
        uint64_t v63 = v27;
        if ((*(unsigned char *)(*(void *)(v47 + 16) + 16) & 8) == 0 || v471[318] && v481 == 1)
        {
          ++v4[29];
          uint64_t v63 = (v27 + 1);
        }
        if (!v66)
        {
LABEL_100:
          sub_1CB833A08((uint64_t)&v486, v487);
          uint64_t v488 = 0;
          v486 = &v487;
          v487 = 0;
          sub_1CB833A08((uint64_t)&v483, v484);
          v484 = 0;
          uint64_t v485 = 0;
          v483 = &v484;
          ++v4[34];
          int v72 = *(unsigned __int16 **)(v47 + 16);
          int v73 = *v72;
          if (v73 == 8277)
          {
            int v74 = v4[19] + v48;
            int v48 = 0;
            v4[19] = v74;
          }
          unsigned int v467 = 0;
          uint64_t v63 = (v63 + 1);
          if ((v72[8] & 4) != 0) {
            int v48 = 0;
          }
          if ((v28 - 1) <= 6)
          {
            unsigned int v467 = 0;
            v4[27] = v4[27] - v28 + 8;
          }
          goto LABEL_401;
        }
      }
      else
      {
        uint64_t v63 = v27;
        if (!v66) {
          goto LABEL_100;
        }
      }
      ++v4[6];
      uint64_t v67 = (_WORD *)(*((void *)&v512 + 1) + 24 * *(unsigned __int16 *)(*(void *)(v47 + 16) + 6));
      if ((v67[4] & 0x1FFF) == 0x1FFE)
      {
        do
          unsigned int v235 = (*(uint64_t (**)(void))(*(void *)v522 + 200))(v522);
        while ((*(_WORD *)(*((void *)&v512 + 1) + 24 * v235 + 8) & 0x1FFF) == 0x1FFE);
        uint64_t v67 = (_WORD *)(*((void *)&v512 + 1) + 24 * v235);
      }
      if (((~(unsigned __int16)v67[4] & 0x1FFF) != 0 || (++v4[61], (~(unsigned __int16)v67[4] & 0x1FFF) != 0))
        && v67[6])
      {
        int v68 = (unsigned __int16 *)(*(void *)(v522 + 136) + 4 * (unsigned __int16)v67[5]);
        uint64_t v69 = 4 * (unsigned __int16)v67[6];
        uint64_t v70 = 0xFFFFFFFFLL;
        do
        {
          if (v70 == 0xFFFFFFFFLL || v70 == v32) {
            uint64_t v70 = *v68;
          }
          v68 += 2;
          v69 -= 4;
        }
        while (v69);
      }
      else
      {
        uint64_t v70 = 0xFFFFFFFFLL;
      }
      if ((*(unsigned char *)(*(void *)(v47 + 16) + 17) & 0x20) == 0)
      {
        unint64_t v75 = v443;
        if (v70 != v32)
        {
          unint64_t v75 = v434;
          if (v70 != v451)
          {
            if (v70 == v470)
            {
              ++v4[9];
              unint64_t v75 = v429;
            }
            else
            {
              ++v4[9];
              unint64_t v75 = v431;
              if (v70 == v459) {
                unint64_t v75 = v430;
              }
            }
          }
        }
LABEL_128:
        ++*v75;
        goto LABEL_129;
      }
      ++v4[9];
      ++v4[14];
      unint64_t v76 = *(unsigned int *)(*(void *)(v47 + 32) + 4);
      uint64_t v77 = (*(uint64_t (**)(void))(**(void **)(v445 + 16) + 176))(*(void *)(v445 + 16));
      unsigned int v78 = 0;
      unsigned int v79 = *(uint64_t ***)(v77 + 248);
      unint64_t v80 = v76 >> 3;
      int v81 = *(uint64_t ***)(v77 + 240);
      do
      {
        if ((v76 - 0x40000000) >= 0xC0000001)
        {
          uint64_t v82 = **v81;
          if (v80 < *(unsigned __int16 *)(v82 + 22)
            && ((1 << (v76 & 7)) & *(unsigned __int8 *)(*(void *)(v82 + 8) + v80)) != 0
            && (!v78
             || *v81 != v78
             && ((*(_DWORD *)(v78[1] + ((*(unsigned __int16 *)(v82 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v82 + 24)) & 1) != 0))
          {
            unsigned int v78 = *v81;
          }
        }
        ++v81;
      }
      while (v81 != v79);
      int v83 = *(_DWORD *)(*(void *)(v77 + 264)
                      + 24
                      * (*(unsigned __int16 *)(*v78 + 24)
                       + *(_DWORD *)(v77 + 272) * (((unint64_t)v79 - *(void *)(v77 + 240)) >> 3))
                      + 4) >> 3;
      unint64_t v75 = v444;
      if (v83 == 2) {
        goto LABEL_128;
      }
      unint64_t v75 = v436;
      if (v83 == 4) {
        goto LABEL_128;
      }
LABEL_129:
      if ((~(unsigned __int16)v67[4] & 0x1FFF) != 0 && v67[8]) {
        int v84 = *(__int16 *)(*((void *)v471 + 18) + 4 * (unsigned __int16)v67[7]);
      }
      else {
        int v84 = 0;
      }
      v505 = v507;
      int v85 = v48 + 1;
      uint64_t v506 = 0x1000000000;
      v509 = 0;
      uint64_t v510 = 0;
      v508 = &v509;
      v499 = v501;
      uint64_t v500 = 0x1000000000;
      v503 = 0;
      uint64_t v504 = 0;
      v502 = &v503;
      v493 = v495;
      uint64_t v494 = 0x1000000000;
      v497 = 0;
      uint64_t v498 = 0;
      v496 = &v497;
      uint64_t v86 = 8;
      uint64_t v490 = 1;
      do
      {
        *(_DWORD *)((char *)&v490 + v86) = -1;
        v86 += 8;
      }
      while (v86 != 136);
      int v87 = v471[318];
      if (v471[318]) {
        BOOL v88 = 0;
      }
      else {
        BOOL v88 = v462 + 1 == v63;
      }
      if (v88 && v70 == v459)
      {
        uint64_t v63 = (v63 + 1);
        ++v4[23];
        ++v4[20];
      }
      int v456 = v85;
      unsigned int v467 = v28 + 1;
      int v453 = v84;
      if (v471[326] && v461 + 1 == v63 && v70 != v32 && v70 != v470 && v70 != v459)
      {
        uint64_t v63 = (v63 + 1);
        ++v4[24];
        ++v4[20];
      }
      v472 = v67;
      if (llvm::MachineInstr::getNumExplicitOperands(v47) != 1)
      {
        unsigned int v90 = 0;
        unint64_t v91 = 0;
        while (1)
        {
          uint64_t v92 = *(void *)(v47 + 32);
          uint64_t v93 = (int *)(v92 + 32 * v91);
          unint64_t v94 = v91 + 1;
          uint64_t v95 = (unsigned char *)(v92 + 32 * (v91 + 1));
          int v96 = *v93;
          if (!*v93 && v93[1] == 29 || !*v95 && *(_DWORD *)(v92 + 32 * v94 + 4) == 29)
          {
            v4[65] = 1;
            int v96 = *v93;
          }
          if (v96 != 1)
          {
            int v97 = *v95;
            if ((v96 & 0x10000FF) != 0x1000000 && v97 == 1) {
              break;
            }
          }
LABEL_246:
          int NumExplicitOperands = llvm::MachineInstr::getNumExplicitOperands(v47);
          unint64_t v91 = v94;
          if (v94 >= (NumExplicitOperands - 1))
          {
            int v87 = v471[318];
            uint64_t v32 = v463;
            goto LABEL_248;
          }
        }
        if ((_BYTE)v96 || (unsigned int v99 = *(_DWORD *)(v92 + 32 * v91 + 4)) == 0)
        {
          ++v90;
          goto LABEL_246;
        }
        v469 = (void *)(v92 + 32 * v94 + 16);
        uint64_t v100 = *v469 & 0x30;
        unint64_t v101 = *(unsigned int *)(*v455 + 24 * v99 + 16);
        uint64_t v102 = (_WORD *)(v455[6] + ((v101 >> 3) & 0x1FFFFFFE));
        unsigned __int16 v103 = *v102 + (v101 & 0xF) * v99;
        while (2)
        {
          unsigned int v104 = v103;
          LODWORD(v489) = v103;
          sub_1CB8F4B90((uint64_t)&v499, (unsigned int *)&v489);
          if (v100)
          {
            LODWORD(v489) = v104;
            sub_1CB8F4B90((uint64_t)&v505, (unsigned int *)&v489);
          }
          if ((~(unsigned __int16)v67[4] & 0x1FFF) != 0 && v67[10])
          {
            int v105 = (int *)(*((void *)v471 + 19) + 12 * (unsigned __int16)v67[9] + 8);
            uint64_t v106 = 12 * (unsigned __int16)v67[10];
            while (1)
            {
              unsigned int v107 = *(v105 - 2);
              if (v107 >= v90)
              {
                if (v107 > v90) {
                  goto LABEL_179;
                }
                if (!*(v105 - 1)) {
                  break;
                }
              }
              v105 += 3;
              v106 -= 12;
              if (!v106) {
                goto LABEL_179;
              }
            }
            int v108 = *v105;
          }
          else if (v70 == v470 && !v471[318])
          {
            int v108 = -(*(_DWORD *)v469 & 1);
          }
          else
          {
LABEL_179:
            int v108 = 0;
          }
          __int16 v109 = v487;
          if (v487)
          {
            uint64_t v110 = &v487;
            do
            {
              uint64_t v111 = v110;
              __int16 v112 = v109;
              unsigned int v113 = *((_DWORD *)v109 + 7);
              int v114 = (uint64_t **)(v109 + 1);
              if (v113 >= v104)
              {
                int v114 = (uint64_t **)v112;
                uint64_t v110 = (uint64_t **)v112;
              }
              __int16 v109 = *v114;
            }
            while (v109);
            if (v110 != &v487)
            {
              int v115 = v113 >= v104 ? v112 : (uint64_t *)v111;
              if (*((_DWORD *)v115 + 7) <= v104)
              {
                if (v113 >= v104) {
                  uint64_t v111 = (uint64_t **)v112;
                }
                uint64_t v116 = (*((_DWORD *)v111 + 8) - v108);
                if ((*(unsigned char *)v469 & 0x10) != 0)
                {
                  unsigned int v477 = v104;
                  unsigned int v478 = v116;
                  if (v490)
                  {
                    int v117 = 16;
                    uint64_t v118 = &v491;
                    goto LABEL_195;
                  }
                  int v117 = v492;
                  if (!v492)
                  {
                    int v127 = 0;
                    unsigned int v128 = 0;
                    goto LABEL_211;
                  }
                  uint64_t v118 = v491;
LABEL_195:
                  int v119 = v117 - 1;
                  unsigned int v120 = v119 & (37 * v104);
                  int v121 = (unsigned int *)&v118[v120];
                  unsigned int v122 = *v121;
                  if (*v121 != v104)
                  {
                    uint64_t v123 = 0;
                    int v124 = 1;
                    while (v122 != -1)
                    {
                      if (v123) {
                        BOOL v125 = 0;
                      }
                      else {
                        BOOL v125 = v122 == -2;
                      }
                      if (v125) {
                        uint64_t v123 = v121;
                      }
                      unsigned int v126 = v120 + v124++;
                      unsigned int v120 = v126 & v119;
                      int v121 = (unsigned int *)&v118[v120];
                      unsigned int v122 = *v121;
                      if (*v121 == v104) {
                        goto LABEL_216;
                      }
                    }
                    if (v123) {
                      int v127 = v123;
                    }
                    else {
                      int v127 = v121;
                    }
                    if (v490) {
                      unsigned int v128 = 16;
                    }
                    else {
                      unsigned int v128 = v492;
                    }
LABEL_211:
                    if (4 * (v490 >> 1) + 4 >= 3 * v128)
                    {
                      v128 *= 2;
                    }
                    else if (v128 + ~(v490 >> 1) - HIDWORD(v490) > v128 >> 3)
                    {
                      goto LABEL_213;
                    }
                    sub_1CD3FA074((uint64_t)&v490, v128);
                    v489 = 0;
                    sub_1CB91F718((uint64_t)&v490, &v477, &v489);
                    int v127 = v489;
LABEL_213:
                    LODWORD(v490) = v490 + 2;
                    if (*v127 != -1) {
                      --HIDWORD(v490);
                    }
                    unsigned int *v127 = v477;
                    v127[1] = v478;
                  }
                }
LABEL_216:
                if (v108)
                {
                  LODWORD(v489) = v104;
                  sub_1CB8F4B90((uint64_t)&v493, (unsigned int *)&v489);
                }
                int v129 = v116 - v63;
                if (v116 > v63)
                {
                  v464[20] += v129;
                  unint64_t v130 = v484;
                  if (v484)
                  {
                    uint64_t v131 = &v484;
                    do
                    {
                      uint64_t v132 = v131;
                      uint64_t v133 = v130;
                      unsigned int v134 = *((_DWORD *)v130 + 7);
                      uint64_t v135 = (uint64_t **)(v130 + 1);
                      if (v134 >= v104)
                      {
                        uint64_t v135 = (uint64_t **)v133;
                        uint64_t v131 = (uint64_t **)v133;
                      }
                      unint64_t v130 = *v135;
                    }
                    while (v130);
                    if (v131 != &v484)
                    {
                      unsigned int v136 = v134 >= v104 ? v133 : (uint64_t *)v132;
                      if (*((_DWORD *)v136 + 7) <= v104)
                      {
                        if (v134 >= v104) {
                          uint64_t v132 = (uint64_t **)v133;
                        }
                        uint64_t v137 = *((unsigned int *)v132 + 8);
                        uint64_t v138 = v446;
                        if (v137 == v463
                          || (uint64_t v138 = v435, v137 == v470)
                          || (uint64_t v138 = v433, v137 == v459)
                          || (uint64_t v138 = v432, v137 != v451))
                        {
                          *v138 += v129;
                        }
                      }
                    }
                  }
                  uint64_t v63 = v116;
                }
              }
            }
          }
          int v139 = (unsigned __int16)v102[1];
          ++v102;
          unsigned __int16 v103 = v139 + v104;
          uint64_t v67 = v472;
          if (!v139)
          {
            ++v90;
            unsigned int v4 = v464;
            goto LABEL_246;
          }
          continue;
        }
      }
LABEL_248:
      if (!v87 && (*(unsigned char *)(*(void *)(v47 + 16) + 20) & 4) != 0)
      {
        int v141 = v4[33];
        if (v141 == -1)
        {
          int v141 = 0;
          v4[33] = 0;
        }
        int v142 = v490;
        if (v490 > 1)
        {
          unsigned int v146 = &v493;
          uint64_t v145 = (void **)&v491;
          if ((v490 & 1) == 0)
          {
            uint64_t v145 = (void **)v491;
            if (!v492)
            {
              int v142 = 0;
              unsigned int v146 = (void **)v491;
              uint64_t v32 = v463;
              unsigned int v4 = v464;
              uint64_t v67 = v472;
              goto LABEL_256;
            }
            unsigned int v146 = (void **)&v491[v492];
            uint64_t v32 = v463;
            unsigned int v4 = v464;
            uint64_t v67 = v472;
          }
          int v142 = v490 & 1;
          while (*(_DWORD *)v145 >= 0xFFFFFFFE)
          {
            if (++v145 == v146)
            {
              uint64_t v145 = v146;
              break;
            }
          }
        }
        else
        {
          if (v490)
          {
            int v143 = &v491;
            uint64_t v144 = 16;
          }
          else
          {
            int v143 = v491;
            uint64_t v144 = v492;
          }
          uint64_t v145 = (void **)&v143[v144];
          unsigned int v146 = v145;
        }
LABEL_256:
        BOOL v147 = v142 == 0;
        BOOL v148 = &v491;
        if (v147) {
          BOOL v148 = v491;
        }
        unsigned int v149 = v492;
        if (!v147) {
          unsigned int v149 = 16;
        }
        uint64_t v150 = (void **)&v148[v149];
        if (v145 != v150)
        {
          uint64_t v151 = v498;
          uint64_t v152 = v497;
          unsigned __int16 v153 = v493;
          int v154 = v494;
          uint64_t v155 = 4 * v494;
          do
          {
            if (v63 == *((_DWORD *)v145 + 1))
            {
              unsigned int v156 = *(_DWORD *)v145;
              if (v151)
              {
                for (uint64_t k = v152; k; uint64_t k = (void *)*k)
                {
                  unsigned int v158 = *((_DWORD *)k + 7);
                  if (v158 <= v156)
                  {
                    if (v158 >= v156) {
                      goto LABEL_277;
                    }
                    ++k;
                  }
                }
              }
              else if (v154)
              {
                uint64_t v159 = v155;
                int v160 = v153;
                while (*v160 != v156)
                {
                  ++v160;
                  v159 -= 4;
                  if (!v159) {
                    goto LABEL_276;
                  }
                }
                if (v159) {
                  goto LABEL_277;
                }
              }
LABEL_276:
              v4[33] = ++v141;
            }
LABEL_277:
            int v161 = (unsigned int *)(v145 + 1);
            while (v161 != (unsigned int *)v146)
            {
              unsigned int v162 = *v161;
              v161 += 2;
              if (v162 <= 0xFFFFFFFD)
              {
                uint64_t v145 = (void **)(v161 - 2);
                goto LABEL_282;
              }
            }
            uint64_t v145 = v146;
LABEL_282:
            ;
          }
          while (v145 != v150);
        }
      }
      uint64_t v163 = *(_DWORD **)(v47 + 32);
      if ((*v163 & 0x10000FF) == 0x1000000)
      {
        unsigned int v164 = v163[1];
        uint64_t v165 = *v455;
        uint64_t v166 = v455[6];
        if (!v466)
        {
          unint64_t v167 = *(unsigned int *)(v165 + 24 * v164 + 16);
          v168 = (_WORD *)(v166 + ((v167 >> 3) & 0x1FFFFFFE));
          unsigned __int16 v169 = *v168 + (v167 & 0xF) * v164;
          unint64_t v170 = (unint64_t)(v63 + v453) << 32;
          do
          {
            uint64_t v171 = v169;
            if (v487)
            {
              int v172 = v487;
              int v173 = (uint64_t *)&v487;
              do
              {
                int v174 = v173;
                unint64_t v175 = v172;
                unsigned int v176 = *((_DWORD *)v172 + 7);
                char v177 = v172 + 1;
                if (v176 >= v171) {
                  int v173 = v172;
                }
                else {
                  ++v172;
                }
                int v172 = (uint64_t *)*v172;
              }
              while (v172);
              if (v173 != (uint64_t *)&v487)
              {
                if (v176 < v171) {
                  unint64_t v175 = v174;
                }
                if (*((_DWORD *)v175 + 7) <= v171)
                {
                  unsigned __int16 v178 = v174 + 1;
                  if (v176 >= v171) {
                    unsigned __int16 v178 = v177;
                  }
                  uint64_t v179 = (uint64_t *)*v178;
                  uint64_t v180 = v173;
                  if (*v178)
                  {
                    do
                    {
                      uint64_t v181 = (uint64_t **)v179;
                      uint64_t v179 = (uint64_t *)*v179;
                    }
                    while (v179);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v181 = (uint64_t **)v180[2];
                      BOOL v11 = *v181 == v180;
                      uint64_t v180 = (uint64_t *)v181;
                    }
                    while (!v11);
                  }
                  if (v486 == (uint64_t **)v173) {
                    v486 = v181;
                  }
                  --v488;
                  sub_1CB91F7C8(v487, v173);
                  operator delete(v173);
                }
              }
            }
            if (v484)
            {
              unsigned __int16 v182 = v484;
              signed int v183 = (uint64_t *)&v484;
              do
              {
                char v184 = v183;
                int v185 = v182;
                unsigned int v186 = *((_DWORD *)v182 + 7);
                int v187 = v182 + 1;
                if (v186 >= v171) {
                  signed int v183 = v182;
                }
                else {
                  ++v182;
                }
                unsigned __int16 v182 = (uint64_t *)*v182;
              }
              while (v182);
              if (v183 != (uint64_t *)&v484)
              {
                if (v186 < v171) {
                  int v185 = v184;
                }
                if (*((_DWORD *)v185 + 7) <= v171)
                {
                  uint64_t v188 = v184 + 1;
                  if (v186 >= v171) {
                    uint64_t v188 = v187;
                  }
                  uint64_t v189 = (uint64_t *)*v188;
                  uint64_t v190 = v183;
                  if (*v188)
                  {
                    do
                    {
                      uint64_t v191 = (uint64_t **)v189;
                      uint64_t v189 = (uint64_t *)*v189;
                    }
                    while (v189);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v191 = (uint64_t **)v190[2];
                      BOOL v11 = *v191 == v190;
                      uint64_t v190 = (uint64_t *)v191;
                    }
                    while (!v11);
                  }
                  if (v483 == (uint64_t **)v183) {
                    v483 = v191;
                  }
                  --v485;
                  sub_1CB91F7C8(v484, v183);
                  operator delete(v183);
                }
              }
            }
            uint64_t v192 = v63;
            int v193 = v487;
            uint64_t v194 = &v487;
LABEL_325:
            int v195 = v194;
            if (v193)
            {
              do
              {
                uint64_t v194 = (uint64_t **)v193;
                unsigned int v196 = *((_DWORD *)v193 + 7);
                if (v196 > v171)
                {
                  int v193 = *v194;
                  goto LABEL_325;
                }
                if (v196 >= v171) {
                  goto LABEL_335;
                }
                int v193 = v194[1];
              }
              while (v193);
              int v195 = v194 + 1;
            }
            uint64_t v197 = (uint64_t *)operator new(0x28uLL);
            *(uint64_t *)((char *)v197 + 28) = v170 | v171;
            *uint64_t v197 = 0;
            v197[1] = 0;
            v197[2] = (uint64_t)v194;
            *int v195 = v197;
            if (*v486)
            {
              v486 = (uint64_t **)*v486;
              uint64_t v197 = *v195;
            }
            sub_1CB8358B8(v487, v197);
            ++v488;
LABEL_335:
            uint64_t v198 = v484;
            int v199 = &v484;
LABEL_336:
            BOOL v200 = v199;
            if (v198)
            {
              do
              {
                int v199 = (uint64_t **)v198;
                unsigned int v201 = *((_DWORD *)v198 + 7);
                if (v201 > v171)
                {
                  uint64_t v198 = *v199;
                  goto LABEL_336;
                }
                if (v201 >= v171) {
                  goto LABEL_346;
                }
                uint64_t v198 = v199[1];
              }
              while (v198);
              BOOL v200 = v199 + 1;
            }
            int v202 = (uint64_t *)operator new(0x28uLL);
            *(uint64_t *)((char *)v202 + 28) = (v70 << 32) | v171;
            *int v202 = 0;
            v202[1] = 0;
            v202[2] = (uint64_t)v199;
            *BOOL v200 = v202;
            if (*v483)
            {
              v483 = (uint64_t **)*v483;
              int v202 = *v200;
            }
            sub_1CB8358B8(v484, v202);
            ++v485;
LABEL_346:
            int v203 = (unsigned __int16)v168[1];
            ++v168;
            unsigned __int16 v169 = v203 + v171;
            uint64_t v63 = v192;
          }
          while (v203);
          uint64_t v165 = *v455;
          uint64_t v166 = v455[6];
          uint64_t v32 = v463;
          unsigned int v4 = v464;
          uint64_t v67 = v472;
        }
        unint64_t v204 = *(unsigned int *)(v165 + 24 * v164 + 16);
        unsigned int v205 = (_WORD *)(v166 + ((v204 >> 3) & 0x1FFFFFFE));
        unsigned __int16 v206 = *v205 + (v204 & 0xF) * v164;
        BOOL v208 = v70 == v451 || v70 == v32;
        do
        {
          unsigned int v209 = v206;
          if (v504)
          {
            for (m = v503; m; m = (void *)*m)
            {
              unsigned int v211 = *((_DWORD *)m + 7);
              if (v211 <= v209)
              {
                if (v211 >= v209) {
                  goto LABEL_367;
                }
                ++m;
              }
            }
          }
          else if (v500)
          {
            __int16 v212 = v499;
            uint64_t v213 = 4 * v500;
            while (*v212 != v209)
            {
              ++v212;
              v213 -= 4;
              if (!v213) {
                goto LABEL_368;
              }
            }
            if (v213)
            {
LABEL_367:
              LODWORD(v489) = v209;
              sub_1CB8F4B90((uint64_t)&v505, (unsigned int *)&v489);
            }
          }
LABEL_368:
          if ((*(unsigned char *)(*(void *)(v47 + 32) + 48) & 0x20) == 0)
          {
            ++v4[31];
            if (v208) {
              ++v4[32];
            }
          }
          int v214 = (unsigned __int16)v205[1];
          ++v205;
          unsigned __int16 v206 = v214 + v209;
        }
        while (v214);
      }
      if (v510) {
        int v215 = v510;
      }
      else {
        int v215 = v506;
      }
      if (v504) {
        int v216 = v504;
      }
      else {
        int v216 = v500;
      }
      int v217 = v216 - v215;
      BOOL v219 = v70 == v32 || v70 == v470 || v70 == v459;
      v4[31] += v217;
      int v220 = v461;
      if (!v219) {
        int v220 = v63;
      }
      int v461 = v220;
      int v221 = v462;
      if (v70 == v459) {
        int v221 = v63;
      }
      int v462 = v221;
      if (v466)
      {
        uint64_t v31 = v452;
      }
      else
      {
        int v222 = v67[4] & 0x1FFF;
        uint64_t v31 = v452;
        if (v222 != 0x1FFF) {
          uint64_t v63 = (v63 + v222);
        }
      }
      if ((v490 & 1) == 0) {
        MEMORY[0x1D25D9CD0](v491, 4);
      }
      sub_1CB833A08((uint64_t)&v496, v497);
      if (v493 != v495) {
        free(v493);
      }
      sub_1CB833A08((uint64_t)&v502, v503);
      if (v499 != v501) {
        free(v499);
      }
      sub_1CB833A08((uint64_t)&v508, v509);
      if (v505 != v507) {
        free(v505);
      }
      int v72 = *(unsigned __int16 **)(v47 + 16);
      int v73 = *v72;
      int v48 = v456;
LABEL_401:
      if (v73 == 4826)
      {
        char v460 = 1;
        uint64_t v223 = v448;
        goto LABEL_405;
      }
      if (v73 == 8277)
      {
        uint64_t v223 = v449;
LABEL_405:
        ++*v223;
      }
      __int16 v224 = *(_WORD *)(v47 + 44);
      uint64_t v225 = *((void *)v72 + 1);
      if ((v224 & 0xC) == 0 || (v224 & 4) != 0)
      {
        if ((v225 & 0x400) == 0) {
          goto LABEL_414;
        }
LABEL_413:
        ++v4[37];
        goto LABEL_414;
      }
      uint64_t v226 = v47;
      if ((v225 & 0x400) != 0) {
        goto LABEL_413;
      }
      while ((*(_WORD *)(v226 + 44) & 8) != 0)
      {
        uint64_t v226 = *(void *)(v226 + 8);
        if ((*(unsigned char *)(*(void *)(v226 + 16) + 9) & 4) != 0) {
          goto LABEL_413;
        }
      }
LABEL_414:
      uint64_t v227 = *((void *)v72 + 2);
      if ((v227 & 2) != 0) {
        ++v4[38];
      }
      if ((v227 & 0x10) != 0)
      {
        ++v4[39];
        if ((*(unsigned char *)(*(void *)(v47 + 32) + 32 * sub_1CBC7A3F8(v73, 0x16u) + 16) & 8) != 0) {
          ++v4[40];
        }
      }
      if ((v227 & 0x4000000) != 0) {
        ++v4[41];
      }
      uint64_t v228 = v457;
      BOOL v60 = v468;
      uint64_t v62 = v467;
      if ((v227 & 0x2000C00) != 0x2000400)
      {
        if ((v227 & 0x2000C00) != 0x2000800) {
          goto LABEL_425;
        }
        uint64_t v228 = v447;
      }
      ++*v228;
LABEL_425:
      if ((v227 & 0xD00) == 0x500)
      {
        ++v4[42];
        unint64_t v229 = *(void *)(v47 + 48);
        if (v229 >= 8)
        {
          if ((v229 & 7) != 0)
          {
            if ((*(void *)(v47 + 48) & 7) != 3
              || (v229 & 0xFFFFFFFFFFFFFFF8) == 0
              || !*(_DWORD *)(v229 & 0xFFFFFFFFFFFFFFF8))
            {
              goto LABEL_472;
            }
          }
          else
          {
            v229 &= 0xFFFFFFFFFFFFFFF8;
            *(void *)(v47 + 48) = v229;
          }
          if ((v229 & 7) != 0)
          {
            int v230 = *(uint64_t **)((v229 & 0xFFFFFFFFFFFFFFF8) + 8);
            if (!v230) {
              goto LABEL_472;
            }
          }
          else
          {
            int v230 = (uint64_t *)(v229 & 0xFFFFFFFFFFFFFFF8);
            *(void *)(v47 + 48) = v230;
            if (!v230) {
              goto LABEL_472;
            }
          }
          uint64_t v231 = *v230;
          if ((v231 & 4) == 0)
          {
            unint64_t v232 = v231 & 0xFFFFFFFFFFFFFFF8;
            if (v232)
            {
              unsigned int v233 = *(unsigned __int8 *)(v232 + 16);
              if (v233 >= 0x1C)
              {
                while (v233 == 77)
                {
                  unint64_t v232 = *(void *)(v232 - 32);
                  unsigned int v233 = *(unsigned __int8 *)(v232 + 16);
                  if (v232) {
                    BOOL v234 = v233 >= 0x1C;
                  }
                  else {
                    BOOL v234 = 0;
                  }
                  if (!v234) {
                    goto LABEL_472;
                  }
                }
                if (v233 != 62) {
                  goto LABEL_460;
                }
                uint64_t v236 = *(_DWORD *)(v232 + 20) & 0x7FFFFFF;
                unsigned __int16 v237 = (unint64_t *)(v232 - 32 * v236);
                if (v236 == 1)
                {
LABEL_459:
                  unint64_t v232 = *v237;
                  unsigned int v233 = *(unsigned __int8 *)(v232 + 16);
                  if (v233 <= 0x1B) {
                    goto LABEL_472;
                  }
LABEL_460:
                  if (v233 == 60)
                  {
                    int v239 = *(_DWORD *)(*(void *)v232 + 8);
                    if (v239 == 15)
                    {
                      if ((v239 & 0xFE) == 0x12) {
                        int v239 = *(_DWORD *)(**(void **)(*(void *)v232 + 16) + 8);
                      }
                      uint64_t v240 = *(unsigned __int8 **)(v232 - 32);
                      int v241 = *(_DWORD *)(*(void *)v240 + 8);
                      if ((v241 & 0xFE) == 0x12) {
                        int v241 = *(_DWORD *)(**(void **)(*(void *)v240 + 16) + 8);
                      }
                      if (v240[16] <= 0x14u && (v239 & 0xFFFFFF00) == 0x200 && (v241 & 0xFFFFFF00) == 0x4000)
                      {
                        HIDWORD(v243) = *v72;
                        LODWORD(v243) = HIDWORD(v243) - 4102;
                        unsigned int v242 = v243 >> 1;
                        if (v242 <= 0x1D && ((0x33333333u >> v242) & 1) != 0)
                        {
                          int v244 = dword_1CD96DCE4[v242];
                          ++v4[16];
                          v4[18] += v244;
                        }
                      }
                    }
                  }
                  goto LABEL_472;
                }
                unsigned int v238 = 1;
                while (*(unsigned char *)(v237[4 * v238] + 16) == 16)
                {
                  if (v236 == ++v238) {
                    goto LABEL_459;
                  }
                }
              }
            }
          }
        }
      }
LABEL_472:
      uint64_t v245 = *((void *)v72 + 2);
      uint64_t v246 = v245 & 0xE00;
      if (v246 == 1536) {
        ++v4[43];
      }
      if ((v245 & 0xD00) == 0x900) {
        ++v4[44];
      }
      if (v246 == 2560) {
        ++v4[45];
      }
      if ((v245 & 0xD00) == 0xD00) {
        ++v4[46];
      }
      if (v246 == 3584) {
        ++v4[47];
      }
      int v247 = *v72;
      if (v247 == 4578)
      {
        int v248 = 4;
        uint64_t v32 = v463;
      }
      else
      {
        uint64_t v32 = v463;
        if (v247 != 4580) {
          goto LABEL_487;
        }
        int v248 = 2;
      }
      ++v4[15];
      v4[17] += v248;
LABEL_487:
      if ((v245 & 0x8000000) != 0) {
        ++v4[50];
      }
      ++*v4;
      long long v249 = v486;
      if (v486 == &v487)
      {
        char v30 = 0;
        BOOL v61 = v466;
      }
      else
      {
        do
        {
          unint64_t v250 = v249;
          uint64_t v251 = v249[1];
          v252 = v249;
          if (v251)
          {
            do
            {
              long long v249 = (uint64_t **)v251;
              uint64_t v251 = (uint64_t *)*v251;
            }
            while (v251);
          }
          else
          {
            do
            {
              long long v249 = (uint64_t **)v252[2];
              BOOL v11 = *v249 == (uint64_t *)v252;
              v252 = v249;
            }
            while (!v11);
          }
          if (*((_DWORD *)v250 + 8) + 1 <= v63)
          {
            unsigned int v253 = *((_DWORD *)v250 + 7);
            if (v487)
            {
              uint64_t v254 = v487;
              unint64_t v255 = (uint64_t *)&v487;
              do
              {
                int v256 = v255;
                uint64_t v257 = v254;
                unsigned int v258 = *((_DWORD *)v254 + 7);
                uint64_t v259 = v254 + 1;
                if (v258 >= v253) {
                  unint64_t v255 = v254;
                }
                else {
                  ++v254;
                }
                uint64_t v254 = (uint64_t *)*v254;
              }
              while (v254);
              if (v255 != (uint64_t *)&v487)
              {
                if (v258 < v253) {
                  uint64_t v257 = v256;
                }
                if (*((_DWORD *)v257 + 7) <= v253)
                {
                  int v260 = v256 + 1;
                  if (v258 >= v253) {
                    int v260 = v259;
                  }
                  int v261 = (uint64_t *)*v260;
                  unsigned int v262 = v255;
                  if (*v260)
                  {
                    do
                    {
                      int v263 = (uint64_t **)v261;
                      int v261 = (uint64_t *)*v261;
                    }
                    while (v261);
                  }
                  else
                  {
                    do
                    {
                      int v263 = (uint64_t **)v262[2];
                      BOOL v11 = *v263 == v262;
                      unsigned int v262 = (uint64_t *)v263;
                    }
                    while (!v11);
                  }
                  if (v486 == (uint64_t **)v255) {
                    v486 = v263;
                  }
                  --v488;
                  sub_1CB91F7C8(v487, v255);
                  operator delete(v255);
                }
              }
            }
            if (v484)
            {
              uint64_t v264 = v484;
              int v265 = (uint64_t *)&v484;
              do
              {
                uint64_t v266 = v265;
                unsigned int v267 = v264;
                unsigned int v268 = *((_DWORD *)v264 + 7);
                uint64_t v269 = v264 + 1;
                if (v268 >= v253) {
                  int v265 = v264;
                }
                else {
                  ++v264;
                }
                uint64_t v264 = (uint64_t *)*v264;
              }
              while (v264);
              if (v265 != (uint64_t *)&v484)
              {
                if (v268 < v253) {
                  unsigned int v267 = v266;
                }
                if (*((_DWORD *)v267 + 7) <= v253)
                {
                  v270 = v266 + 1;
                  if (v268 >= v253) {
                    v270 = v269;
                  }
                  int v271 = (uint64_t *)*v270;
                  int v272 = v265;
                  if (*v270)
                  {
                    do
                    {
                      unsigned int v273 = (uint64_t **)v271;
                      int v271 = (uint64_t *)*v271;
                    }
                    while (v271);
                  }
                  else
                  {
                    do
                    {
                      unsigned int v273 = (uint64_t **)v272[2];
                      BOOL v11 = *v273 == v272;
                      int v272 = (uint64_t *)v273;
                    }
                    while (!v11);
                  }
                  if (v483 == (uint64_t **)v265) {
                    v483 = v273;
                  }
                  --v485;
                  sub_1CB91F7C8(v484, v265);
                  operator delete(v265);
                }
              }
            }
          }
        }
        while (v249 != &v487);
        char v30 = 0;
        BOOL v60 = v468;
        BOOL v61 = v466;
        uint64_t v62 = v467;
        if (!v47)
        {
LABEL_541:
          while ((*(_WORD *)(v47 + 44) & 8) != 0)
            uint64_t v47 = *(void *)(v47 + 8);
          goto LABEL_542;
        }
      }
LABEL_538:
      if ((*(unsigned char *)v47 & 4) == 0) {
        goto LABEL_541;
      }
LABEL_542:
      uint64_t v27 = v63;
      uint64_t v47 = *(void *)(v47 + 8);
      BOOL v25 = v60;
      uint64_t v26 = v61;
      uint64_t v28 = v62;
      uint64_t v274 = v61;
      if (v47 == v465) {
        goto LABEL_554;
      }
    }
    if (v50 == 4578 || v50 == 4580)
    {
      BOOL v59 = 1;
      goto LABEL_547;
    }
    if (v50 != 2150) {
      goto LABEL_67;
    }
    goto LABEL_62;
  }
  LODWORD(v27) = 0;
LABEL_591:
  v4[25] += v27;
  unsigned int v294 = sub_1CB91F3D4(v445, 0);
  unsigned int v295 = v4[51];
  if (v295 <= v294) {
    unsigned int v295 = v294;
  }
  v4[51] = v295;
  if (((*(unsigned __int16 *)(*(void *)v445 + 18) >> 4) & 0x3FFu) - 100 < 9)
  {
    uint64_t v296 = *(void *)(v445 + 344);
    uint64_t v297 = (*(uint64_t (**)(uint64_t))(*(void *)v296 + 336))(v296);
    unsigned int v298 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v297 + 24))(v297, 4);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v296 + 128))(&v490, v296, 3);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v296 + 136))(&v505, v296, 3);
    uint64_t v299 = v490;
    int v300 = v505;
    if (v490)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v490 + 16))(&v490, v490);
      uint64_t v301 = v490;
      if (v300)
      {
LABEL_596:
        (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v300 + 16))(&v490, v300);
        uint64_t v302 = v490;
        goto LABEL_597;
      }
    }
    else
    {
      uint64_t v301 = 0;
      if (v505) {
        goto LABEL_596;
      }
    }
    uint64_t v302 = 0;
LABEL_597:
    unsigned int v303 = 0;
    while (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v301 + 24))(v301, v302) & 1) == 0)
    {
      v366 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v301 + 32))(v301);
      uint64_t v367 = *v366;
      int v368 = (*(uint64_t (**)(uint64_t, void))(*(void *)v296 + 400))(v296, *v366);
      uint64_t v370 = sub_1CB83544C(a3, *(void *)(v367 + 24));
      if (v369 == 1) {
      if ((v298 - 1 + ((unint64_t)(v370 + 7) >> 3)) / v298 + v368 > v303)
      }
        unsigned int v303 = (v298 - 1 + ((unint64_t)(v370 + 7) >> 3)) / v298 + v368;
      (*(void (**)(uint64_t))(*(void *)v301 + 40))(v301);
    }
    if (v302) {
      (*(void (**)(uint64_t))(*(void *)v302 + 8))(v302);
    }
    (*(void (**)(uint64_t))(*(void *)v301 + 8))(v301);
    if (v300) {
      (*(void (**)(void *))(*(void *)v300 + 8))(v300);
    }
    if (v299) {
      (*(void (**)(uint64_t))(*(void *)v299 + 8))(v299);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v296 + 128))(&v490, v296, 5);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v296 + 136))(&v505, v296, 5);
    uint64_t v304 = v490;
    unsigned int v305 = v505;
    if (v490)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v490 + 16))(&v490, v490);
      uint64_t v306 = v490;
      if (v305)
      {
LABEL_606:
        (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v305 + 16))(&v490, v305);
        uint64_t v307 = v490;
        goto LABEL_607;
      }
    }
    else
    {
      uint64_t v306 = 0;
      if (v505) {
        goto LABEL_606;
      }
    }
    uint64_t v307 = 0;
LABEL_607:
    while (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v306 + 24))(v306, v307) & 1) == 0)
    {
      v371 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v306 + 32))(v306);
      uint64_t v372 = *v371;
      if (((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v296 + 184))(v296, 15, *v371) & 1) == 0)
      {
        int v373 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v296 + 400))(v296, v372);
        uint64_t v375 = sub_1CB83544C(a3, *(void *)(v372 + 24));
        if (v374 == 1) {
        if ((v298 - 1 + ((unint64_t)(v375 + 7) >> 3)) / v298 + v373 > v303)
        }
          unsigned int v303 = (v298 - 1 + ((unint64_t)(v375 + 7) >> 3)) / v298 + v373;
      }
      (*(void (**)(uint64_t))(*(void *)v306 + 40))(v306);
    }
    if (v307) {
      (*(void (**)(uint64_t))(*(void *)v307 + 8))(v307);
    }
    (*(void (**)(uint64_t))(*(void *)v306 + 8))(v306);
    if (v305) {
      (*(void (**)(void *))(*(void *)v305 + 8))(v305);
    }
    if (v304) {
      (*(void (**)(uint64_t))(*(void *)v304 + 8))(v304);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v296 + 128))(&v490, v296, 4);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v296 + 136))(&v505, v296, 4);
    uint64_t v308 = v490;
    unsigned int v309 = v505;
    if (v490)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v490 + 16))(&v490, v490);
      uint64_t v310 = v490;
      if (v309)
      {
LABEL_616:
        (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v309 + 16))(&v490, v309);
        uint64_t v311 = v490;
        goto LABEL_617;
      }
    }
    else
    {
      uint64_t v310 = 0;
      if (v505) {
        goto LABEL_616;
      }
    }
    uint64_t v311 = 0;
LABEL_617:
    while (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v310 + 24))(v310, v311) & 1) == 0)
    {
      v376 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v310 + 32))(v310);
      uint64_t v377 = *v376;
      int v378 = (*(uint64_t (**)(uint64_t, void))(*(void *)v296 + 400))(v296, *v376);
      uint64_t v380 = sub_1CB83544C(a3, *(void *)(v377 + 24));
      if (v379 == 1) {
      if ((v298 - 1 + ((unint64_t)(v380 + 7) >> 3)) / v298 + v378 > v303)
      }
        unsigned int v303 = (v298 - 1 + ((unint64_t)(v380 + 7) >> 3)) / v298 + v378;
      (*(void (**)(uint64_t))(*(void *)v310 + 40))(v310);
    }
    if (v311) {
      (*(void (**)(uint64_t))(*(void *)v311 + 8))(v311);
    }
    (*(void (**)(uint64_t))(*(void *)v310 + 8))(v310);
    if (v309) {
      (*(void (**)(void *))(*(void *)v309 + 8))(v309);
    }
    if (v308) {
      (*(void (**)(uint64_t))(*(void *)v308 + 8))(v308);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v296 + 128))(&v490, v296, 6);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v296 + 136))(&v505, v296, 6);
    uint64_t v312 = v490;
    int v313 = v505;
    if (v490)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v490 + 16))(&v490, v490);
      uint64_t v314 = v490;
      if (v313)
      {
LABEL_626:
        (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v313 + 16))(&v490, v313);
        uint64_t v315 = v490;
        goto LABEL_627;
      }
    }
    else
    {
      uint64_t v314 = 0;
      if (v505) {
        goto LABEL_626;
      }
    }
    uint64_t v315 = 0;
LABEL_627:
    while (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v314 + 24))(v314, v315) & 1) == 0)
    {
      v381 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v314 + 32))(v314);
      uint64_t v382 = *v381;
      int v383 = (*(uint64_t (**)(uint64_t, void))(*(void *)v296 + 400))(v296, *v381);
      uint64_t v385 = sub_1CB83544C(a3, *(void *)(v382 + 24));
      if (v384 == 1) {
      if ((v298 - 1 + ((unint64_t)(v385 + 7) >> 3)) / v298 + v383 > v303)
      }
        unsigned int v303 = (v298 - 1 + ((unint64_t)(v385 + 7) >> 3)) / v298 + v383;
      (*(void (**)(uint64_t))(*(void *)v314 + 40))(v314);
    }
    if (v315) {
      (*(void (**)(uint64_t))(*(void *)v315 + 8))(v315);
    }
    (*(void (**)(uint64_t))(*(void *)v314 + 8))(v314);
    if (v313) {
      (*(void (**)(void *))(*(void *)v313 + 8))(v313);
    }
    if (v312) {
      (*(void (**)(uint64_t))(*(void *)v312 + 8))(v312);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v296 + 128))(&v490, v296, 7);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v296 + 136))(&v505, v296, 7);
    uint64_t v316 = v490;
    unsigned int v317 = v505;
    if (v490)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v490 + 16))(&v490, v490);
      uint64_t v318 = v490;
      if (v317)
      {
LABEL_636:
        (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v317 + 16))(&v490, v317);
        uint64_t v319 = v490;
        goto LABEL_637;
      }
    }
    else
    {
      uint64_t v318 = 0;
      if (v505) {
        goto LABEL_636;
      }
    }
    uint64_t v319 = 0;
LABEL_637:
    while (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v318 + 24))(v318, v319) & 1) == 0)
    {
      v386 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v318 + 32))(v318);
      uint64_t v387 = *v386;
      int v388 = (*(uint64_t (**)(uint64_t, void))(*(void *)v296 + 400))(v296, *v386);
      uint64_t v390 = sub_1CB83544C(a3, *(void *)(v387 + 24));
      if (v389 == 1) {
      if ((v298 - 1 + ((unint64_t)(v390 + 7) >> 3)) / v298 + v388 > v303)
      }
        unsigned int v303 = (v298 - 1 + ((unint64_t)(v390 + 7) >> 3)) / v298 + v388;
      (*(void (**)(uint64_t))(*(void *)v318 + 40))(v318);
    }
    if (v319) {
      (*(void (**)(uint64_t))(*(void *)v319 + 8))(v319);
    }
    (*(void (**)(uint64_t))(*(void *)v318 + 8))(v318);
    if (v317) {
      (*(void (**)(void *))(*(void *)v317 + 8))(v317);
    }
    if (v316) {
      (*(void (**)(uint64_t))(*(void *)v316 + 8))(v316);
    }
    if ((*(uint64_t (**)(uint64_t))(*(void *)v296 + 312))(v296))
    {
      unsigned int v320 = (*(uint64_t (**)(uint64_t))(*(void *)v296 + 392))(v296);
      if (v303 <= v320) {
        unsigned int v303 = v320;
      }
    }
    v464[52] = v303;
    uint64_t v321 = *(void *)(v445 + 344);
    uint64_t v322 = (*(uint64_t (**)(uint64_t))(*(void *)v321 + 336))(v321);
    unsigned int v323 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v322 + 24))(v322, 1);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v321 + 128))(&v490, v321, 1);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v321 + 136))(&v505, v321, 1);
    v324 = v505;
    uint64_t v473 = v490;
    if (v490)
    {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v490 + 16))(&v490);
      uint64_t v325 = v490;
      if (v324)
      {
LABEL_649:
        (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v324 + 16))(&v490, v324);
        uint64_t v326 = v490;
        goto LABEL_650;
      }
    }
    else
    {
      uint64_t v325 = 0;
      if (v505) {
        goto LABEL_649;
      }
    }
    uint64_t v326 = 0;
LABEL_650:
    unsigned int v327 = 0;
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v325 + 24))(v325, v326))
    {
      unsigned int v328 = -1;
    }
    else
    {
      unsigned int v328 = -1;
      do
      {
        v391 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v325 + 32))(v325);
        uint64_t v392 = *v391;
        unsigned int v393 = (*(uint64_t (**)(uint64_t, void))(*(void *)v321 + 400))(v321, *v391);
        uint64_t v395 = sub_1CB83544C(a3, *(void *)(v392 + 24));
        if (v394 == 1) {
        if (v328 >= v393)
        }
          unsigned int v328 = v393;
        if ((v323 - 1 + ((unint64_t)(v395 + 7) >> 3)) / v323 + v393 > v327) {
          unsigned int v327 = (v323 - 1 + ((unint64_t)(v395 + 7) >> 3)) / v323 + v393;
        }
        (*(void (**)(uint64_t))(*(void *)v325 + 40))(v325);
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v325 + 24))(v325, v326) & 1) == 0);
    }
    if (v326) {
      (*(void (**)(uint64_t))(*(void *)v326 + 8))(v326);
    }
    (*(void (**)(uint64_t))(*(void *)v325 + 8))(v325);
    if (v324) {
      (*(void (**)(void *))(*(void *)v324 + 8))(v324);
    }
    if (v473) {
      (*(void (**)(uint64_t))(*(void *)v473 + 8))(v473);
    }
    unsigned int v329 = v327 - v328;
    if (!v327) {
      unsigned int v329 = 0;
    }
    v464[54] = v329;
    uint64_t v330 = *(void *)(v445 + 344);
    uint64_t v331 = (*(uint64_t (**)(uint64_t))(*(void *)v330 + 336))(v330);
    unsigned int v332 = (*(uint64_t (**)(uint64_t, void))(*(void *)v331 + 24))(v331, 0);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, void))(*(void *)v330 + 128))(&v490, v330, 0);
    (*(void (**)(void **__return_ptr, uint64_t, void))(*(void *)v330 + 136))(&v505, v330, 0);
    unsigned int v333 = v505;
    uint64_t v474 = v490;
    if (v490)
    {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v490 + 16))(&v490);
      uint64_t v334 = v490;
      if (v333)
      {
LABEL_662:
        (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v333 + 16))(&v490, v333);
        uint64_t v335 = v490;
        goto LABEL_663;
      }
    }
    else
    {
      uint64_t v334 = 0;
      if (v505) {
        goto LABEL_662;
      }
    }
    uint64_t v335 = 0;
LABEL_663:
    unsigned int v336 = 0;
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v334 + 24))(v334, v335))
    {
      unsigned int v337 = -1;
    }
    else
    {
      unsigned int v337 = -1;
      do
      {
        v396 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v334 + 32))(v334);
        uint64_t v397 = *v396;
        unsigned int v398 = (*(uint64_t (**)(uint64_t, void))(*(void *)v330 + 400))(v330, *v396);
        uint64_t v400 = sub_1CB83544C(a3, *(void *)(v397 + 24));
        if (v399 == 1) {
        if (v337 >= v398)
        }
          unsigned int v337 = v398;
        if ((v332 - 1 + ((unint64_t)(v400 + 7) >> 3)) / v332 + v398 > v336) {
          unsigned int v336 = (v332 - 1 + ((unint64_t)(v400 + 7) >> 3)) / v332 + v398;
        }
        (*(void (**)(uint64_t))(*(void *)v334 + 40))(v334);
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v334 + 24))(v334, v335) & 1) == 0);
    }
    if (v335) {
      (*(void (**)(uint64_t))(*(void *)v335 + 8))(v335);
    }
    (*(void (**)(uint64_t))(*(void *)v334 + 8))(v334);
    if (v333) {
      (*(void (**)(void *))(*(void *)v333 + 8))(v333);
    }
    uint64_t v338 = v445;
    if (v474) {
      (*(void (**)(uint64_t))(*(void *)v474 + 8))(v474);
    }
    unsigned int v339 = v336 - v337;
    if (!v336) {
      unsigned int v339 = 0;
    }
    v340 = v464;
    v464[53] = v339;
    uint64_t v341 = *(void *)(v445 + 344);
    uint64_t v342 = sub_1CD1138B8(v341, 9, 0);
    uint64_t v343 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v341 + 176))(v341, 20);
    if (!v343)
    {
LABEL_674:
      uint64_t v344 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v341 + 176))(v341, 21);
      if (!v344) {
        goto LABEL_675;
      }
      if (v344 == 1)
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v341 + 128))(&v490, v341, 21);
        uint64_t v416 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)v490 + 32))(v490);
        uint64_t v417 = v490;
        uint64_t v490 = 0;
        if (v417) {
          (*(void (**)(uint64_t))(*(void *)v417 + 8))(v417);
        }
        if (v416)
        {
LABEL_785:
          int v418 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v341 + 400))(v341, v416);
          if (v342 <= v418 + 1) {
            uint64_t v342 = (v418 + 1);
          }
          else {
            uint64_t v342 = v342;
          }
        }
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v341 + 128))(&v490, v341, 21);
        uint64_t v416 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)v490 + 32))(v490);
        uint64_t v426 = v490;
        uint64_t v490 = 0;
        if (v426) {
          (*(void (**)(uint64_t))(*(void *)v426 + 8))(v426);
        }
        v340 = v464;
        uint64_t v338 = v445;
        if (v416) {
          goto LABEL_785;
        }
      }
LABEL_675:
      uint64_t v345 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v341 + 176))(v341, 22);
      if (!v345) {
        goto LABEL_676;
      }
      if (v345 == 1)
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v341 + 128))(&v490, v341, 22);
        uint64_t v419 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)v490 + 32))(v490);
        uint64_t v420 = v490;
        uint64_t v490 = 0;
        if (v420) {
          (*(void (**)(uint64_t))(*(void *)v420 + 8))(v420);
        }
        if (v419)
        {
LABEL_792:
          int v421 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v341 + 400))(v341, v419);
          if (v342 <= v421 + 1) {
            uint64_t v342 = (v421 + 1);
          }
          else {
            uint64_t v342 = v342;
          }
        }
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v341 + 128))(&v490, v341, 22);
        uint64_t v419 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)v490 + 32))(v490);
        uint64_t v427 = v490;
        uint64_t v490 = 0;
        if (v427) {
          (*(void (**)(uint64_t))(*(void *)v427 + 8))(v427);
        }
        v340 = v464;
        uint64_t v338 = v445;
        if (v419) {
          goto LABEL_792;
        }
      }
LABEL_676:
      uint64_t v346 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v341 + 176))(v341, 23);
      if (!v346) {
        goto LABEL_677;
      }
      if (v346 == 1)
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v341 + 128))(&v490, v341, 23);
        uint64_t v422 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)v490 + 32))(v490);
        uint64_t v423 = v490;
        uint64_t v490 = 0;
        if (v423) {
          (*(void (**)(uint64_t))(*(void *)v423 + 8))(v423);
        }
        if (v422)
        {
LABEL_799:
          int v424 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v341 + 400))(v341, v422);
          if (v342 <= v424 + 1) {
            uint64_t v342 = (v424 + 1);
          }
          else {
            uint64_t v342 = v342;
          }
        }
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v341 + 128))(&v490, v341, 23);
        uint64_t v422 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)v490 + 32))(v490);
        uint64_t v428 = v490;
        uint64_t v490 = 0;
        if (v428) {
          (*(void (**)(uint64_t))(*(void *)v428 + 8))(v428);
        }
        v340 = v464;
        uint64_t v338 = v445;
        if (v422) {
          goto LABEL_799;
        }
      }
LABEL_677:
      uint64_t v347 = sub_1CD1138B8(v341, 13, v342);
      v340[55] = sub_1CD1138B8(v341, 12, v347);
      uint64_t v348 = *(void *)(v338 + 344);
      uint64_t v349 = (*(uint64_t (**)(uint64_t))(*(void *)v348 + 336))(v348);
      unsigned int v350 = (*(uint64_t (**)(uint64_t, void))(*(void *)v349 + 24))(v349, 0);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, void))(*(void *)v348 + 128))(&v490, v348, 0);
      (*(void (**)(void **__return_ptr, uint64_t, void))(*(void *)v348 + 136))(&v505, v348, 0);
      long long v351 = v505;
      uint64_t v475 = v490;
      if (v490)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v490 + 16))(&v490);
        uint64_t v352 = v490;
        if (v351)
        {
LABEL_679:
          (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v351 + 16))(&v490, v351);
          uint64_t v353 = v490;
          goto LABEL_680;
        }
      }
      else
      {
        uint64_t v352 = 0;
        if (v505) {
          goto LABEL_679;
        }
      }
      uint64_t v353 = 0;
LABEL_680:
      unsigned int v354 = 0;
      if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v352 + 24))(v352, v353))
      {
        unsigned int v355 = -1;
      }
      else
      {
        unsigned int v355 = -1;
        do
        {
          v401 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v352 + 32))(v352);
          uint64_t v402 = *v401;
          unsigned int v403 = (*(uint64_t (**)(uint64_t, void))(*(void *)v348 + 400))(v348, *v401);
          if (v355 >= v403) {
            unsigned int v355 = v403;
          }
          int v404 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v348 + 400))(v348, v402);
          uint64_t v406 = sub_1CB83544C(a3, *(void *)(v402 + 24));
          if (v405 == 1) {
          if ((v350 - 1 + ((unint64_t)(v406 + 7) >> 3)) / v350 + v404 > v354)
          }
            unsigned int v354 = (v350 - 1 + ((unint64_t)(v406 + 7) >> 3)) / v350 + v404;
          (*(void (**)(uint64_t))(*(void *)v352 + 40))(v352);
        }
        while (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v352 + 24))(v352, v353) & 1) == 0);
      }
      if (v353) {
        (*(void (**)(uint64_t))(*(void *)v353 + 8))(v353);
      }
      (*(void (**)(uint64_t))(*(void *)v352 + 8))(v352);
      if (v351) {
        (*(void (**)(void *))(*(void *)v351 + 8))(v351);
      }
      if (v475) {
        (*(void (**)(uint64_t))(*(void *)v475 + 8))(v475);
      }
      int v356 = (v354 - v355) * v350;
      if (!v354) {
        int v356 = 0;
      }
      v464[57] = v356;
      uint64_t v357 = *(void *)(v445 + 344);
      uint64_t v358 = (*(uint64_t (**)(uint64_t))(*(void *)v357 + 336))(v357);
      unsigned int v359 = (*(uint64_t (**)(uint64_t, void))(*(void *)v358 + 24))(v358, 0);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, void))(*(void *)v357 + 128))(&v490, v357, 0);
      (*(void (**)(void **__return_ptr, uint64_t, void))(*(void *)v357 + 136))(&v505, v357, 0);
      v360 = v505;
      uint64_t v476 = v490;
      if (v490)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v490 + 16))(&v490);
        uint64_t v361 = v490;
        if (v360)
        {
LABEL_692:
          (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v360 + 16))(&v490, v360);
          uint64_t v362 = v490;
LABEL_693:
          unsigned int v363 = 0;
          if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v361 + 24))(v361, v362))
          {
            unsigned int v364 = -1;
          }
          else
          {
            unsigned int v364 = -1;
            do
            {
              v407 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v361 + 32))(v361);
              uint64_t v408 = *v407;
              unsigned int v409 = (*(uint64_t (**)(uint64_t, void))(*(void *)v357 + 400))(v357, *v407);
              if (v364 >= v409) {
                unsigned int v364 = v409;
              }
              int v410 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v357 + 400))(v357, v408);
              uint64_t v412 = sub_1CB83544C(a3, *(void *)(v408 + 24));
              if (v411 == 1) {
              if ((v359 - 1 + ((unint64_t)(v412 + 7) >> 3)) / v359 + v410 > v363)
              }
                unsigned int v363 = (v359 - 1 + ((unint64_t)(v412 + 7) >> 3)) / v359 + v410;
              (*(void (**)(uint64_t))(*(void *)v361 + 40))(v361);
            }
            while (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v361 + 24))(v361, v362) & 1) == 0);
          }
          if (v362) {
            (*(void (**)(uint64_t))(*(void *)v362 + 8))(v362);
          }
          (*(void (**)(uint64_t))(*(void *)v361 + 8))(v361);
          if (v360) {
            (*(void (**)(void *))(*(void *)v360 + 8))(v360);
          }
          if (v476) {
            (*(void (**)(uint64_t))(*(void *)v476 + 8))(v476);
          }
          int v365 = (v363 - v364) * v359;
          if (!v363) {
            int v365 = 0;
          }
          v464[58] = v365;
          goto LABEL_704;
        }
      }
      else
      {
        uint64_t v361 = 0;
        if (v505) {
          goto LABEL_692;
        }
      }
      uint64_t v362 = 0;
      goto LABEL_693;
    }
    if (v343 == 1)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v341 + 128))(&v490, v341, 20);
      uint64_t v413 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)v490 + 32))(v490);
      uint64_t v414 = v490;
      uint64_t v490 = 0;
      if (v414) {
        (*(void (**)(uint64_t))(*(void *)v414 + 8))(v414);
      }
      if (!v413) {
        goto LABEL_674;
      }
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v341 + 128))(&v490, v341, 20);
      uint64_t v413 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)v490 + 32))(v490);
      uint64_t v425 = v490;
      uint64_t v490 = 0;
      if (v425) {
        (*(void (**)(uint64_t))(*(void *)v425 + 8))(v425);
      }
      v340 = v464;
      uint64_t v338 = v445;
      if (!v413) {
        goto LABEL_674;
      }
    }
    int v415 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v341 + 400))(v341, v413);
    if (v342 <= v415 + 1) {
      uint64_t v342 = (v415 + 1);
    }
    else {
      uint64_t v342 = v342;
    }
    goto LABEL_674;
  }
LABEL_704:
  sub_1CB833A08((uint64_t)&v483, v484);
  sub_1CB833A08((uint64_t)&v486, v487);
  if (v523 != v525) {
    free(v523);
  }
}

uint64_t sub_1CB91F3D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 176))(*(void *)(a1 + 16));
  int v5 = *(_DWORD *)(v4 + 44);
  if ((v5 + 63) >= 0x1C0) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if ((v5 + 63) >= 0x40) {
    bzero(v43, 8 * ((v5 + 63) >> 6));
  }
  int v44 = v5;
  for (uint64_t i = *(void *)(a1 + 328); i != a1 + 320; uint64_t i = *(void *)(i + 8))
  {
    if (a2)
    {
      uint64_t v7 = *a2;
      uint64_t v8 = a2[1];
      if (v8 == *a2)
      {
        uint64_t v9 = *((unsigned int *)a2 + 5);
        int v10 = (void *)(v8 + 8 * v9);
        if (v9)
        {
          uint64_t v11 = 0;
          uint64_t v12 = 8 * v9;
          while (*(void *)(v8 + v11) != i)
          {
            v11 += 8;
            if (v12 == v11) {
              goto LABEL_25;
            }
          }
          int v10 = (void *)(v8 + v11);
        }
LABEL_25:
        uint64_t v7 = a2[1];
      }
      else
      {
        uint64_t v13 = *((unsigned int *)a2 + 4);
        int v14 = v13 - 1;
        unsigned int v15 = (v13 - 1) & ((i >> 4) ^ (i >> 9));
        int v10 = (void *)(v8 + 8 * v15);
        uint64_t v16 = *v10;
        if (*v10 == -1)
        {
          uint64_t v17 = 0;
LABEL_48:
          if (v17) {
            int v10 = v17;
          }
          if (*v10 != i) {
            int v10 = (void *)(v8 + 8 * v13);
          }
        }
        else
        {
          uint64_t v17 = 0;
          int v18 = 1;
          while (v16 != i)
          {
            if (v17) {
              BOOL v19 = 0;
            }
            else {
              BOOL v19 = v16 == -2;
            }
            if (v19) {
              uint64_t v17 = v10;
            }
            unsigned int v20 = v15 + v18++;
            unsigned int v15 = v20 & v14;
            int v10 = (void *)(v8 + 8 * (v20 & v14));
            uint64_t v16 = *v10;
            if (*v10 == -1) {
              goto LABEL_48;
            }
          }
        }
      }
      unsigned int v21 = v8 == v7 ? (unsigned int *)((char *)a2 + 20) : (unsigned int *)(a2 + 2);
      if (v10 == (void *)(v8 + 8 * *v21)) {
        continue;
      }
    }
    for (uint64_t j = *(void *)(i + 56); j != i + 48; uint64_t j = *(void *)(j + 8))
    {
      uint64_t v23 = *(unsigned int *)(j + 40);
      if (v23)
      {
        uint64_t v24 = *(void *)(j + 32);
        uint64_t v25 = v24 + 32 * v23;
        do
        {
          if (!*(unsigned char *)v24)
          {
            unsigned int v26 = *(_DWORD *)(v24 + 4);
            if (v26)
            {
              uint64_t v27 = (unsigned __int16 *)(*(void *)(v4 + 56)
                                       + (((unint64_t)*(unsigned int *)(*(void *)(v4 + 8) + 24 * v26 + 16) >> 3) & 0x1FFFFFFE));
              int v29 = *v27;
              uint64_t v28 = v27 + 1;
              int v30 = v29 + (*(_DWORD *)(*(void *)(v4 + 8) + 24 * v26 + 16) & 0xF) * v26;
              do
              {
                v43[(unsigned __int16)v30 >> 6] |= 1 << v30;
                int v31 = *v28++;
                v30 += v31;
              }
              while (v31);
            }
          }
          v24 += 32;
        }
        while (v24 != v25);
        if (!j) {
          goto LABEL_43;
        }
      }
      if ((*(unsigned char *)j & 4) == 0)
      {
LABEL_43:
        while ((*(_WORD *)(j + 44) & 8) != 0)
          uint64_t j = *(void *)(j + 8);
      }
    }
  }
  if (v4) {
    uint64_t v32 = (uint64_t *)(v4 + 8);
  }
  else {
    uint64_t v32 = 0;
  }
  uint64_t v33 = *v32;
  uint64_t v34 = v32[6];
  uint64_t v35 = 183;
  while (2)
  {
    unint64_t v36 = *(unsigned int *)(v33 + 24 * v35 + 16);
    uint64_t v37 = (v36 >> 3) & 0x1FFFFFFE;
    unsigned __int16 v38 = *(_WORD *)(v34 + v37) + (v36 & 0xF) * v35;
    int v39 = (unsigned __int16 *)(v34 + 2 + v37);
    do
    {
      if ((v43[v38 >> 6] >> v38)) {
        return (v35 - 55);
      }
      int v40 = *v39++;
      v38 += v40;
    }
    while (v40);
    if ((unint64_t)--v35 > 0x37) {
      continue;
    }
    break;
  }
  return 0;
}

uint64_t sub_1CB91F718(uint64_t a1, _DWORD *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 16;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (37 * *a2) & (v4 - 1);
  uint64_t v7 = (_DWORD *)(v3 + 8 * v6);
  int v8 = *v7;
  if (*a2 == *v7)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    uint64_t result = 1;
    while (v8 != -1)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -2;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (_DWORD *)(v3 + 8 * (v13 & v5));
      int v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_8;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

uint64_t *sub_1CB91F7C8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    int v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      uint64_t v3 = v4;
      int v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  unsigned int v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 == v3)
  {
    uint64_t *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint64_t v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      uint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *uint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    BOOL v12 = (uint64_t *)v7[2];
    if ((uint64_t *)*v12 != v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *((unsigned char *)v12 + 24) = 0;
      int v18 = (uint64_t *)v7[1];
      *BOOL v12 = (uint64_t)v18;
      if (v18) {
        v18[2] = (uint64_t)v12;
      }
      v7[2] = v12[2];
      BOOL v19 = (uint64_t **)v12[2];
      if (*v19 == v12)
      {
        *BOOL v19 = v7;
        int v18 = (uint64_t *)*v12;
      }
      else
      {
        v19[1] = v7;
      }
      v7[1] = (uint64_t)v12;
      v12[2] = (uint64_t)v7;
      if (result == v12) {
        uint64_t result = v7;
      }
      uint64_t v7 = v18;
    }
    unsigned int v20 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v20 + 24)) {
      goto LABEL_71;
    }
    unsigned int v21 = (uint64_t *)v7[1];
    if (v21 && !*((unsigned char *)v21 + 24))
    {
      if (v20 && !*((unsigned char *)v20 + 24))
      {
LABEL_71:
        unsigned int v21 = v7;
      }
      else
      {
        *((unsigned char *)v21 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v27 = *v21;
        v7[1] = *v21;
        if (v27) {
          *(void *)(v27 + 16) = v7;
        }
        v21[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v21;
        *unsigned int v21 = (uint64_t)v7;
        v7[2] = (uint64_t)v21;
        unsigned int v20 = v7;
      }
      uint64_t v24 = v21[2];
      *((unsigned char *)v21 + 24) = *(unsigned char *)(v24 + 24);
      *(unsigned char *)(v24 + 24) = 1;
      *((unsigned char *)v20 + 24) = 1;
      uint64_t v25 = *(uint64_t **)v24;
      uint64_t v28 = *(void *)(*(void *)v24 + 8);
      *(void *)uint64_t v24 = v28;
      if (v28) {
        *(void *)(v28 + 16) = v24;
      }
      v25[2] = *(void *)(v24 + 16);
      *(void *)(*(void *)(v24 + 16) + 8 * (**(void **)(v24 + 16) != v24)) = v25;
      v25[1] = v24;
      goto LABEL_75;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v22 = v17 == result;
    }
    else {
      BOOL v22 = 1;
    }
    if (v22) {
      goto LABEL_56;
    }
LABEL_52:
    uint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *((unsigned char *)v12 + 24) = 0;
    unsigned int v13 = (uint64_t *)v12[1];
    uint64_t v14 = *v13;
    v12[1] = *v13;
    if (v14) {
      *(void *)(v14 + 16) = v12;
    }
    v13[2] = v12[2];
    *(void *)(v12[2] + 8 * (*(void *)v12[2] != (void)v12)) = v13;
    *unsigned int v13 = (uint64_t)v12;
    v12[2] = (uint64_t)v13;
    if (result == (uint64_t *)*v7) {
      uint64_t result = v7;
    }
    uint64_t v7 = *(uint64_t **)(*v7 + 8);
  }
  unsigned int v15 = (void *)*v7;
  if (!*v7 || *((unsigned char *)v15 + 24))
  {
    uint64_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_62;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      uint64_t v17 = result;
LABEL_56:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_56;
    }
    goto LABEL_52;
  }
  uint64_t v16 = (uint64_t *)v7[1];
  if (v16 && !*((unsigned char *)v16 + 24))
  {
LABEL_62:
    unsigned int v15 = v7;
  }
  else
  {
    *((unsigned char *)v15 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v23 = v15[1];
    uint64_t *v7 = v23;
    if (v23) {
      *(void *)(v23 + 16) = v7;
    }
    v15[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    uint64_t v16 = v7;
  }
  uint64_t v24 = v15[2];
  *((unsigned char *)v15 + 24) = *(unsigned char *)(v24 + 24);
  *(unsigned char *)(v24 + 24) = 1;
  *((unsigned char *)v16 + 24) = 1;
  uint64_t v25 = *(uint64_t **)(v24 + 8);
  uint64_t v26 = *v25;
  *(void *)(v24 + 8) = *v25;
  if (v26) {
    *(void *)(v26 + 16) = v24;
  }
  v25[2] = *(void *)(v24 + 16);
  *(void *)(*(void *)(v24 + 16) + 8 * (**(void **)(v24 + 16) != v24)) = v25;
  *uint64_t v25 = v24;
LABEL_75:
  *(void *)(v24 + 16) = v25;
  return result;
}

uint64_t sub_1CB91FB58(uint64_t result, char *a2, char *a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 + ((a3 - a2) >> 3) > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2 != a3)
  {
    int v5 = (void *)(*(void *)result + 8 * v4);
    do
    {
      uint64_t v6 = *(void *)v3;
      v3 += 8;
      *v5++ = v6;
    }
    while (v3 != a3);
  }
  *(_DWORD *)(result + 8) = v4 + ((unint64_t)(a3 - a2) >> 3);
  return result;
}

uint64_t sub_1CB91FBE0(uint64_t result, unint64_t a2, uint64_t a3)
{
  if (*(unsigned int *)(result + 12) < a2)
  {
    *(_DWORD *)(result + 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unint64_t v3 = *(unsigned int *)(result + 8);
  if (v3 >= a2) {
    unint64_t v4 = a2;
  }
  else {
    unint64_t v4 = *(unsigned int *)(result + 8);
  }
  if (v4)
  {
    int v8 = *(void **)result;
    do
    {
      *v8++ = a3;
      --v4;
    }
    while (v4);
  }
  unint64_t v5 = v3 - a2;
  if (v3 < a2)
  {
    uint64_t v6 = (void *)(*(void *)result + 8 * v3);
    do
      *v6++ = a3;
    while (!__CFADD__(v5++, 1));
  }
  *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t sub_1CB91FC94(int a1)
{
  return dword_1CD96DD5C[a1 - 3826];
}

void sub_1CB91FCAC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (unsigned int *)(a1 + 8);
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = (void *)(a1 - 8 * v3);
  uint64_t v6 = v5[1];
  if (*(unsigned char *)v6 == 4)
  {
    if (v3 >= 2)
    {
      uint64_t v7 = v3 - 1;
      uint64_t v8 = a1 + 8;
      do
      {
        uint64_t v9 = *(void *)(v8 - 8 * *v4);
        uint64_t v10 = (void *)(v9 - 8 * *(unsigned int *)(v9 + 8));
        uint64_t v11 = *(void *)(*v10 + 128);
        BOOL v12 = (int *)(v11 + 24);
        if (*(_DWORD *)(v11 + 32) >= 0x41u) {
          BOOL v12 = *(int **)v12;
        }
        uint64_t v13 = *(void *)(v10[1] + 128);
        uint64_t v14 = (int *)(v13 + 24);
        if (*(_DWORD *)(v13 + 32) >= 0x41u) {
          uint64_t v14 = *(int **)v14;
        }
        uint64_t v15 = *(void *)(v10[2] + 128);
        uint64_t v16 = (int *)(v15 + 24);
        if (*(_DWORD *)(v15 + 32) >= 0x41u) {
          uint64_t v16 = *(int **)v16;
        }
        sub_1CB9203A0(a2, *v12, *v14, *v16);
        v8 += 8;
        --v7;
      }
      while (v7);
    }
  }
  else
  {
    uint64_t v17 = *(void *)(v6 + 128);
    int v18 = (void *)(v17 + 24);
    if (*(_DWORD *)(v17 + 32) >= 0x41u) {
      int v18 = (void *)*v18;
    }
    int v19 = *(_DWORD *)v18;
    uint64_t v20 = *(void *)(v5[2] + 128);
    unsigned int v21 = (void *)(v20 + 24);
    if (*(_DWORD *)(v20 + 32) >= 0x41u) {
      unsigned int v21 = (void *)*v21;
    }
    int v22 = *(_DWORD *)v21;
    uint64_t v23 = *(void *)(v5[3] + 128);
    uint64_t v24 = (void *)(v23 + 24);
    if (*(_DWORD *)(v23 + 32) >= 0x41u) {
      uint64_t v24 = (void *)*v24;
    }
    int v25 = *(_DWORD *)v24;
    sub_1CB9203A0(a2, v19, v22, v25);
  }
}

void *sub_1CB91FE08(uint64_t a1, void *a2)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 16;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v13 = 0;
LABEL_16:
      uint64_t v7 = sub_1CB91FF88(a1, (uint64_t)a2, a2, v13);
      void *v7 = *a2;
      v7[1] = 0;
      return v7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*a2 != *v7)
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v12 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        return v7;
      }
    }
    if (v9) {
      uint64_t v13 = v9;
    }
    else {
      uint64_t v13 = v7;
    }
    goto LABEL_16;
  }
  return v7;
}

uint64_t sub_1CB91FED8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 16;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_15;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_15;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_15:
  *a3 = v7;
  return result;
}

void *sub_1CB91FF88(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)a1;
  int v7 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v8 = 16;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1CB920100(a1, 2 * v8);
    uint64_t v11 = a1 + 8;
    int v6 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
    {
      int v12 = 16;
    }
    else
    {
      int v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        int v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      uint64_t v11 = *(void *)(a1 + 8);
    }
    int v9 = *(_DWORD *)a1 & 1;
    int v13 = v12 - 1;
    unsigned int v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
    a4 = (void *)(v11 + 16 * v14);
    uint64_t v15 = *a4;
    if (*a3 != *a4)
    {
      uint64_t v16 = 0;
      int v17 = 1;
      while (v15 != -4096)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v15 == -8192;
        }
        if (v18) {
          uint64_t v16 = a4;
        }
        unsigned int v19 = v14 + v17++;
        unsigned int v14 = v19 & v13;
        a4 = (void *)(v11 + 16 * v14);
        uint64_t v15 = *a4;
        if (*a3 == *a4) {
          goto LABEL_7;
        }
      }
      if (v16) {
        a4 = v16;
      }
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1CB920100(a1, v8);
      uint64_t v20 = 0;
      sub_1CB91FED8(a1, a3, &v20);
      a4 = v20;
      int v6 = *(_DWORD *)a1;
    }
    int v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  return a4;
}

int *sub_1CB920100(uint64_t a1, unsigned int a2)
{
  v14[32] = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x11)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 0x10)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CB920298((int *)a1, v11, &v11[2 * v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  int v7 = v14;
  do
  {
    uint64_t v8 = *(void *)(a1 + v6 + 8);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t *v7 = v8;
      v7[1] = *(void *)(a1 + v6 + 16);
      v7 += 2;
    }
    v6 += 16;
  }
  while (v6 != 256);
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CB920298((int *)a1, v14, v7);
}

int *sub_1CB920298(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if (v3)
  {
    uint64_t v6 = result + 66;
    int v5 = result + 2;
  }
  else
  {
    uint64_t v4 = result[4];
    if (!v4) {
      goto LABEL_5;
    }
    int v5 = (void *)*((void *)result + 1);
    uint64_t v6 = &v5[2 * v4];
  }
  do
  {
    *int v5 = -4096;
    v5 += 2;
  }
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    uint64_t v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (*(unsigned char *)result)
      {
        int v8 = 16;
        uint64_t v9 = result + 2;
      }
      else
      {
        uint64_t v9 = (int *)*((void *)result + 1);
        int v8 = result[4];
      }
      int v10 = v8 - 1;
      unsigned int v11 = (v8 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      uint64_t v12 = &v9[4 * v11];
      uint64_t v13 = *(void *)v12;
      if (v7 != *(void *)v12)
      {
        unsigned int v14 = 0;
        int v15 = 1;
        while (v13 != -4096)
        {
          if (v14) {
            BOOL v16 = 0;
          }
          else {
            BOOL v16 = v13 == -8192;
          }
          if (v16) {
            unsigned int v14 = v12;
          }
          unsigned int v17 = v11 + v15++;
          unsigned int v11 = v17 & v10;
          uint64_t v12 = &v9[4 * (v17 & v10)];
          uint64_t v13 = *(void *)v12;
          if (v7 == *(void *)v12) {
            goto LABEL_21;
          }
        }
        if (v14) {
          uint64_t v12 = v14;
        }
      }
LABEL_21:
      *(void *)uint64_t v12 = v7;
      *((void *)v12 + 1) = a2[1];
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

void sub_1CB9203A0(uint64_t a1, int a2, int a3, int a4)
{
  int v7 = a2;
  int v5 = a4;
  int v6 = a3;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, int *, int *, int *))(*(void *)v4 + 48))(v4, &v7, &v6, &v5);
  }
  else
  {
    sub_1CB920400();
    sub_1CB920400();
  }
}

void sub_1CB920400()
{
}

void sub_1CB92041C()
{
}

__n128 sub_1CB920430(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25EE888;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CB92047C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25EE888;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CB9204AC(uint64_t result, int *a2, uint64_t a3, int *a4)
{
  int v4 = *a2;
  int v5 = *a4;
  int v6 = *(unsigned int **)(result + 16);
  unsigned int v7 = *v6;
  *v6 += *a4;
  if (v4 == 1 && v5 != 0)
  {
    uint64_t v9 = **(void **)(result + 8);
    do
    {
      *(void *)(v9 + 8 * (v7 >> 6)) |= 1 << v7;
      ++v7;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1CB920500(int a1)
{
  uint64_t result = 0;
  if (a1 > 2371)
  {
    if ((a1 - 2372) > 0x11) {
      return result;
    }
    return 1;
  }
  if ((a1 - 1107) < 9 || (a1 - 1996) < 9 || (a1 - 927) < 4) {
    return 1;
  }
  return result;
}

uint64_t sub_1CB92054C(unsigned int *a1, unsigned __int8 *a2, unsigned __int8 *a3, _DWORD *a4, uint64_t a5)
{
  int v10 = *a3;
  unsigned int v11 = &unk_1CD96E05C;
  unint64_t v12 = 33;
  BOOL v13 = v10 == 6 || v10 == 11;
  if (!v13 && v10 != 95)
  {
    if (sub_1CB920640(a3))
    {
      unsigned int v11 = &unk_1CD96E05C;
      unint64_t v12 = 33;
    }
    else
    {
      int v14 = *a3;
      unsigned int v11 = &unk_1CD96E09E;
      unint64_t v12 = 30;
      if (v14 != 7 && v14 != 13)
      {
        uint64_t result = sub_1CD3FA514(a3);
        if (!result) {
          return result;
        }
        unsigned int v11 = &unk_1CD96E09E;
        unint64_t v12 = 30;
      }
    }
  }
  uint64_t result = sub_1CB839270(a5, (uint64_t)v11, v12);
  if (result)
  {
    sub_1CB839378(*(void *)(a5 + 24), *a1 | (unint64_t)(result << 32), (*a2 << 8) | (*a3 << 16) | (4 * (*a4 & 0x3F)));
    return 1;
  }
  return result;
}

BOOL sub_1CB920640(unsigned __int8 *a1)
{
  int v1 = *a1;
  BOOL result = 1;
  if (v1 != 49)
  {
    BOOL v3 = (v1 - 21) > 0x39 || ((1 << (v1 - 21)) & 0x200080000080101) == 0;
    if (v3)
    {
      unsigned int v4 = v1 - 88;
      BOOL v5 = v4 >= 0x16;
      BOOL v3 = v4 == 22;
      int v6 = (1 << v4) & 0x400081;
      BOOL v7 = !v3 && v5 || v6 == 0;
      return !v7;
    }
  }
  return result;
}

uint64_t sub_1CB9206A4(unsigned int *a1, unsigned __int8 *a2, unsigned __int8 *a3, _DWORD *a4, uint64_t a5)
{
  int v10 = *a3;
  unsigned int v11 = &unk_1CD96E0DA;
  unint64_t v12 = 33;
  BOOL v13 = v10 == 6 || v10 == 11;
  if (!v13 && v10 != 95)
  {
    if (sub_1CB920640(a3))
    {
      unsigned int v11 = &unk_1CD96E0DA;
      unint64_t v12 = 33;
    }
    else
    {
      int v14 = *a3;
      unsigned int v11 = &unk_1CD96E11C;
      unint64_t v12 = 30;
      if (v14 != 7 && v14 != 13)
      {
        uint64_t result = sub_1CD3FA514(a3);
        if (!result) {
          return result;
        }
        unsigned int v11 = &unk_1CD96E11C;
        unint64_t v12 = 30;
      }
    }
  }
  uint64_t result = sub_1CB839270(a5, (uint64_t)v11, v12);
  if (result)
  {
    sub_1CB839378(*(void *)(a5 + 24), *a1 | (unint64_t)(result << 32), (*a2 << 8) | (*a3 << 16) | (4 * (*a4 & 0x3F)));
    return 1;
  }
  return result;
}

unint64_t sub_1CB920798(unsigned int *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return 0;
  }
  LODWORD(v2) = 0;
  uint64_t v3 = 12 * v1;
  unsigned int v4 = (int *)(*(void *)a1 + 4);
  do
  {
    int v6 = *v4;
    v4 += 3;
    int v5 = v6;
    unsigned int v7 = v6 - 56;
    unsigned int v8 = v6 - 1692;
    if ((v6 - 313) >= 0x80) {
      int v9 = -736;
    }
    else {
      int v9 = -1248;
    }
    if (v8 >= 0x7F) {
      int v10 = v9;
    }
    else {
      int v10 = -6764;
    }
    if (v7 >= 0x80) {
      int v11 = v10;
    }
    else {
      int v11 = -220;
    }
    unsigned int v12 = v11 + 4 * v5;
    if (v2 <= v12) {
      uint64_t v2 = v12;
    }
    else {
      uint64_t v2 = v2;
    }
    v3 -= 12;
  }
  while (v3);
  return (unint64_t)(v2 + 15) >> 4;
}

uint64_t (*sub_1CB920814(int a1))(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, char a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v1 = sub_1CB920864;
  if (a1 <= 100) {
    return sub_1CB920A14;
  }
  if (a1 != 101 && a1 != 108) {
    return sub_1CB920DE0;
  }
  return (uint64_t (*)(unsigned int, unsigned __int8, unsigned __int8, char, char, uint64_t, uint64_t))v1;
}

BOOL sub_1CB920864(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  LOBYTE(v8) = a4;
  unsigned __int8 v9 = a3;
  unsigned __int8 v17 = a2;
  unsigned __int8 v16 = a3;
  int v14 = a4;
  unsigned int v15 = a1;
  if (a3 > 0x1Bu)
  {
    if (a3 > 0x4Bu)
    {
      if (a3 != 76)
      {
        if (a3 != 95) {
          return 1;
        }
        return !sub_1CB921CC4(&v15, &v17, &v16, &v14, a7);
      }
    }
    else if (a3 != 28)
    {
      if (a3 != 49) {
        return 1;
      }
      return !sub_1CB921CC4(&v15, &v17, &v16, &v14, a7);
    }
  }
  else
  {
    switch(a3)
    {
      case 2u:
        unsigned __int8 v16 = 4;
        if ((a5 & 2) != 0)
        {
          int v8 = 1;
        }
        else if (a5)
        {
          int v8 = 2;
        }
        else
        {
          int v8 = 3;
        }
        int v14 = v8;
        unsigned __int8 v9 = 4;
        break;
      case 4u:
      case 9u:
        break;
      case 5u:
      case 0xAu:
        goto LABEL_19;
      case 6u:
        return !sub_1CB921CC4(&v15, &v17, &v16, &v14, a7);
      default:
        return 1;
    }
    uint64_t v12 = sub_1CB839270(a7, (uint64_t)&unk_1CD96E158, 0x100uLL);
    if (v12) {
      goto LABEL_20;
    }
    if (v9 == 6) {
      return !sub_1CB921CC4(&v15, &v17, &v16, &v14, a7);
    }
    if (v9 != 5) {
      return 1;
    }
  }
LABEL_19:
  uint64_t v12 = sub_1CB839270(a7, (uint64_t)a89Abcdefghijkl, 0x80uLL);
  if (v12)
  {
LABEL_20:
    sub_1CB839378(*(void *)(a7 + 24), a1 | (unint64_t)(v12 << 32), (unsigned __int16)(a2 << 8) | (v9 << 16) | (4 * (v8 & 0x3F)));
    return 0;
  }
  if (v9 == 49 || v9 == 6) {
    return !sub_1CB921CC4(&v15, &v17, &v16, &v14, a7);
  }
  return 1;
}

uint64_t sub_1CB920A14(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, char a4, char a5, uint64_t a6, uint64_t a7)
{
  unsigned __int8 v28 = a3;
  if ((a3 & 0xFE) == 2)
  {
    unsigned __int8 v28 = 4;
    int v10 = 4;
    if ((a5 & 2) != 0) {
      char v11 = 1;
    }
    else {
      char v11 = a5 & 1 ^ 3;
    }
  }
  else
  {
    char v11 = a4;
    int v10 = a3;
    if (a3 > 0x1Bu || ((1 << a3) & 0x8000210) == 0) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = sub_1CB839270(a7, (uint64_t)&unk_1CD96E556, 0x48uLL);
  if (v12) {
    goto LABEL_26;
  }
LABEL_8:
  BOOL v13 = &unk_1CD96E62E;
  unint64_t v14 = 34;
  if (v10 > 77)
  {
    if ((v10 - 78) >= 2)
    {
      if (v10 == 95) {
        goto LABEL_25;
      }
      if (v10 != 97) {
        goto LABEL_31;
      }
    }
    goto LABEL_20;
  }
  uint64_t v15 = (v10 - 5);
  if (v15 <= 0x3C)
  {
    if (((1 << (v10 - 5)) & 0x1000501800000000) != 0) {
      goto LABEL_20;
    }
    if (((1 << (v10 - 5)) & 0x200800021) != 0) {
      goto LABEL_12;
    }
    if (v15 == 1)
    {
LABEL_25:
      uint64_t v12 = sub_1CB839270(a7, (uint64_t)v13, v14);
      int v10 = v28;
      if (!v12) {
        goto LABEL_31;
      }
LABEL_26:
      uint64_t v17 = a1 | (unint64_t)(v12 << 32);
      int v18 = (a2 << 8) | (v10 << 16) | (4 * (v11 & 0x3F));
LABEL_27:
      sub_1CB839378(*(void *)(a7 + 24), v17, v18);
      return 0;
    }
  }
  if (v10 != 76) {
    goto LABEL_31;
  }
LABEL_12:
  uint64_t v12 = sub_1CB839270(a7, (uint64_t)&unk_1CD96E5E6, 0x24uLL);
  if (v12) {
    goto LABEL_26;
  }
  if ((v10 - 6) > 0x3B) {
    goto LABEL_31;
  }
  if (((1 << (v10 - 6)) & 0x800280C00000000) == 0)
  {
    if (v10 != 6) {
      goto LABEL_31;
    }
    goto LABEL_21;
  }
LABEL_20:
  if (sub_1CB920640(&v28))
  {
LABEL_21:
    BOOL v13 = &unk_1CD96E62E;
    unint64_t v14 = 34;
    goto LABEL_25;
  }
  int v10 = v28;
  unsigned int v16 = v28 - 41;
  if (v16 <= 0x38 && ((1 << v16) & 0x100004001000401) != 0)
  {
    BOOL v13 = &unk_1CD96E672;
    unint64_t v14 = 30;
    goto LABEL_25;
  }
LABEL_31:
  uint64_t result = 1;
  if (v10 > 9)
  {
    char v24 = v10 - 38;
    if ((v10 - 38) <= 0x3B)
    {
      if (((1 << v24) & 0x4000000001) != 0) {
        goto LABEL_55;
      }
      if (((1 << v24) & 0x200000000000800) != 0)
      {
        uint64_t v20 = (*(_DWORD *)(a7 + 40) + 7) & 0xFFFFFFF8;
        *(_DWORD *)(a7 + 40) = v20 + 8;
        unsigned int v26 = *(unsigned __int8 *)(a7 + 44);
        if (v26 <= 3) {
          LOBYTE(v26) = 3;
        }
        *(unsigned char *)(a7 + 44) = v26;
        if (*(unsigned char *)(a7 + 5)) {
          goto LABEL_59;
        }
        uint64_t v22 = *(void *)(*(void *)(a7 + 8) + 56);
        if (*(unsigned __int8 *)(v22 + 60) > 2u) {
          goto LABEL_59;
        }
        char v23 = 3;
        goto LABEL_61;
      }
      if (((1 << v24) & 0x800000000002000) != 0)
      {
        uint64_t v20 = (*(_DWORD *)(a7 + 40) + 15) & 0xFFFFFFF0;
        *(_DWORD *)(a7 + 40) = v20 + 16;
        unsigned int v25 = *(unsigned __int8 *)(a7 + 44);
        if (v25 <= 4) {
          LOBYTE(v25) = 4;
        }
        *(unsigned char *)(a7 + 44) = v25;
        if (*(unsigned char *)(a7 + 5)) {
          goto LABEL_59;
        }
        uint64_t v22 = *(void *)(*(void *)(a7 + 8) + 56);
        if (*(unsigned __int8 *)(v22 + 60) > 3u) {
          goto LABEL_59;
        }
        char v23 = 4;
        goto LABEL_61;
      }
    }
    if (v10 != 10) {
      return result;
    }
LABEL_55:
    uint64_t v20 = (*(_DWORD *)(a7 + 40) + 3) & 0xFFFFFFFC;
    *(_DWORD *)(a7 + 40) = v20 + 4;
    unsigned int v27 = *(unsigned __int8 *)(a7 + 44);
    if (v27 <= 2) {
      LOBYTE(v27) = 2;
    }
    *(unsigned char *)(a7 + 44) = v27;
    if (*(unsigned char *)(a7 + 5)) {
      goto LABEL_59;
    }
    uint64_t v22 = *(void *)(*(void *)(a7 + 8) + 56);
    if (*(unsigned __int8 *)(v22 + 60) > 1u) {
      goto LABEL_59;
    }
    char v23 = 2;
    goto LABEL_61;
  }
  if ((v10 - 2) < 3)
  {
LABEL_35:
    uint64_t v20 = (*(_DWORD *)(a7 + 40) + 1) & 0xFFFFFFFE;
    *(_DWORD *)(a7 + 40) = v20 + 2;
    unsigned int v21 = *(unsigned __int8 *)(a7 + 44);
    if (v21 <= 1) {
      LOBYTE(v21) = 1;
    }
    *(unsigned char *)(a7 + 44) = v21;
    if (*(unsigned char *)(a7 + 5)) {
      goto LABEL_59;
    }
    uint64_t v22 = *(void *)(*(void *)(a7 + 8) + 56);
    if (*(unsigned char *)(v22 + 60)) {
      goto LABEL_59;
    }
    char v23 = 1;
LABEL_61:
    *(unsigned char *)(v22 + 60) = v23;
LABEL_59:
    uint64_t v17 = a1 | (unint64_t)(v20 << 32);
    int v18 = (a2 << 8) | (v10 << 16) | (4 * (v11 & 0x3F)) | 1;
    goto LABEL_27;
  }
  if (v10 == 5) {
    goto LABEL_55;
  }
  if (v10 == 9) {
    goto LABEL_35;
  }
  return result;
}

uint64_t sub_1CB920DE0(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, char a4, char a5, uint64_t a6, uint64_t a7)
{
  unsigned __int8 v28 = a3;
  if ((a3 & 0xFE) == 2)
  {
    unsigned __int8 v28 = 4;
    int v10 = 4;
    if ((a5 & 2) != 0) {
      char v11 = 1;
    }
    else {
      char v11 = a5 & 1 ^ 3;
    }
  }
  else
  {
    char v11 = a4;
    int v10 = a3;
    if (a3 > 0x1Bu || ((1 << a3) & 0x8000210) == 0) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = sub_1CB839270(a7, (uint64_t)&unk_1CD96E6AE, 0x48uLL);
  if (v12) {
    goto LABEL_26;
  }
LABEL_8:
  BOOL v13 = &unk_1CD96E786;
  unint64_t v14 = 34;
  if (v10 > 77)
  {
    if ((v10 - 78) >= 2)
    {
      if (v10 == 95) {
        goto LABEL_25;
      }
      if (v10 != 97) {
        goto LABEL_31;
      }
    }
    goto LABEL_20;
  }
  uint64_t v15 = (v10 - 5);
  if (v15 <= 0x3C)
  {
    if (((1 << (v10 - 5)) & 0x1000501800000000) != 0) {
      goto LABEL_20;
    }
    if (((1 << (v10 - 5)) & 0x200800021) != 0) {
      goto LABEL_12;
    }
    if (v15 == 1)
    {
LABEL_25:
      uint64_t v12 = sub_1CB839270(a7, (uint64_t)v13, v14);
      int v10 = v28;
      if (!v12) {
        goto LABEL_31;
      }
LABEL_26:
      uint64_t v17 = a1 | (unint64_t)(v12 << 32);
      int v18 = (a2 << 8) | (v10 << 16) | (4 * (v11 & 0x3F));
LABEL_27:
      sub_1CB839378(*(void *)(a7 + 24), v17, v18);
      return 0;
    }
  }
  if (v10 != 76) {
    goto LABEL_31;
  }
LABEL_12:
  uint64_t v12 = sub_1CB839270(a7, (uint64_t)&unk_1CD96E73E, 0x24uLL);
  if (v12) {
    goto LABEL_26;
  }
  if ((v10 - 6) > 0x3B) {
    goto LABEL_31;
  }
  if (((1 << (v10 - 6)) & 0x800280C00000000) == 0)
  {
    if (v10 != 6) {
      goto LABEL_31;
    }
    goto LABEL_21;
  }
LABEL_20:
  if (sub_1CB920640(&v28))
  {
LABEL_21:
    BOOL v13 = &unk_1CD96E786;
    unint64_t v14 = 34;
    goto LABEL_25;
  }
  int v10 = v28;
  unsigned int v16 = v28 - 41;
  if (v16 <= 0x38 && ((1 << v16) & 0x100004001000401) != 0)
  {
    BOOL v13 = &unk_1CD96E7CA;
    unint64_t v14 = 30;
    goto LABEL_25;
  }
LABEL_31:
  uint64_t result = 1;
  if (v10 > 9)
  {
    char v24 = v10 - 38;
    if ((v10 - 38) <= 0x3B)
    {
      if (((1 << v24) & 0x4000000001) != 0) {
        goto LABEL_55;
      }
      if (((1 << v24) & 0x200000000000800) != 0)
      {
        uint64_t v20 = (*(_DWORD *)(a7 + 40) + 7) & 0xFFFFFFF8;
        *(_DWORD *)(a7 + 40) = v20 + 8;
        unsigned int v26 = *(unsigned __int8 *)(a7 + 44);
        if (v26 <= 3) {
          LOBYTE(v26) = 3;
        }
        *(unsigned char *)(a7 + 44) = v26;
        if (*(unsigned char *)(a7 + 5)) {
          goto LABEL_59;
        }
        uint64_t v22 = *(void *)(*(void *)(a7 + 8) + 56);
        if (*(unsigned __int8 *)(v22 + 60) > 2u) {
          goto LABEL_59;
        }
        char v23 = 3;
        goto LABEL_61;
      }
      if (((1 << v24) & 0x800000000002000) != 0)
      {
        uint64_t v20 = (*(_DWORD *)(a7 + 40) + 15) & 0xFFFFFFF0;
        *(_DWORD *)(a7 + 40) = v20 + 16;
        unsigned int v25 = *(unsigned __int8 *)(a7 + 44);
        if (v25 <= 4) {
          LOBYTE(v25) = 4;
        }
        *(unsigned char *)(a7 + 44) = v25;
        if (*(unsigned char *)(a7 + 5)) {
          goto LABEL_59;
        }
        uint64_t v22 = *(void *)(*(void *)(a7 + 8) + 56);
        if (*(unsigned __int8 *)(v22 + 60) > 3u) {
          goto LABEL_59;
        }
        char v23 = 4;
        goto LABEL_61;
      }
    }
    if (v10 != 10) {
      return result;
    }
LABEL_55:
    uint64_t v20 = (*(_DWORD *)(a7 + 40) + 3) & 0xFFFFFFFC;
    *(_DWORD *)(a7 + 40) = v20 + 4;
    unsigned int v27 = *(unsigned __int8 *)(a7 + 44);
    if (v27 <= 2) {
      LOBYTE(v27) = 2;
    }
    *(unsigned char *)(a7 + 44) = v27;
    if (*(unsigned char *)(a7 + 5)) {
      goto LABEL_59;
    }
    uint64_t v22 = *(void *)(*(void *)(a7 + 8) + 56);
    if (*(unsigned __int8 *)(v22 + 60) > 1u) {
      goto LABEL_59;
    }
    char v23 = 2;
    goto LABEL_61;
  }
  if ((v10 - 2) < 3)
  {
LABEL_35:
    uint64_t v20 = (*(_DWORD *)(a7 + 40) + 1) & 0xFFFFFFFE;
    *(_DWORD *)(a7 + 40) = v20 + 2;
    unsigned int v21 = *(unsigned __int8 *)(a7 + 44);
    if (v21 <= 1) {
      LOBYTE(v21) = 1;
    }
    *(unsigned char *)(a7 + 44) = v21;
    if (*(unsigned char *)(a7 + 5)) {
      goto LABEL_59;
    }
    uint64_t v22 = *(void *)(*(void *)(a7 + 8) + 56);
    if (*(unsigned char *)(v22 + 60)) {
      goto LABEL_59;
    }
    char v23 = 1;
LABEL_61:
    *(unsigned char *)(v22 + 60) = v23;
LABEL_59:
    uint64_t v17 = a1 | (unint64_t)(v20 << 32);
    int v18 = (a2 << 8) | (v10 << 16) | (4 * (v11 & 0x3F)) | 1;
    goto LABEL_27;
  }
  if (v10 == 5) {
    goto LABEL_55;
  }
  if (v10 == 9) {
    goto LABEL_35;
  }
  return result;
}

uint64_t (*sub_1CB9211AC(int a1))(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v1 = sub_1CB921204;
  if (a1 <= 101) {
    return sub_1CB9213C4;
  }
  if (a1 == 102) {
    return (uint64_t (*)(unsigned int, unsigned __int8, unsigned __int8, int, char, uint64_t, uint64_t))sub_1CB921214;
  }
  if (a1 != 106) {
    return sub_1CB921844;
  }
  return (uint64_t (*)(unsigned int, unsigned __int8, unsigned __int8, int, char, uint64_t, uint64_t))v1;
}

BOOL sub_1CB921204(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, int a4, char a5, unsigned int a6, uint64_t a7)
{
  return sub_1CB921214(a1, a2, a3, a4, a5, a6, a7);
}

BOOL sub_1CB921214(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  LOBYTE(v8) = a4;
  unsigned __int8 v9 = a3;
  unsigned __int8 v17 = a2;
  unsigned __int8 v16 = a3;
  int v14 = a4;
  unsigned int v15 = a1;
  if (a3 > 0x1Bu)
  {
    if (a3 > 0x4Bu)
    {
      if (a3 != 76)
      {
        if (a3 != 95) {
          return 1;
        }
        return !sub_1CB921CC4(&v15, &v17, &v16, &v14, a7);
      }
    }
    else if (a3 != 28)
    {
      if (a3 != 49) {
        return 1;
      }
      return !sub_1CB921CC4(&v15, &v17, &v16, &v14, a7);
    }
  }
  else
  {
    switch(a3)
    {
      case 2u:
        unsigned __int8 v16 = 4;
        if ((a5 & 2) != 0)
        {
          int v8 = 1;
        }
        else if (a5)
        {
          int v8 = 2;
        }
        else
        {
          int v8 = 3;
        }
        int v14 = v8;
        unsigned __int8 v9 = 4;
        break;
      case 4u:
      case 9u:
        break;
      case 5u:
      case 0xAu:
        goto LABEL_19;
      case 6u:
        return !sub_1CB921CC4(&v15, &v17, &v16, &v14, a7);
      default:
        return 1;
    }
    uint64_t v12 = sub_1CB839270(a7, (uint64_t)&unk_1CD96E806, 0x100uLL);
    if (v12) {
      goto LABEL_20;
    }
    if (v9 == 6) {
      return !sub_1CB921CC4(&v15, &v17, &v16, &v14, a7);
    }
    if (v9 != 5) {
      return 1;
    }
  }
LABEL_19:
  uint64_t v12 = sub_1CB839270(a7, (uint64_t)&unk_1CD96EA06, 0x80uLL);
  if (v12)
  {
LABEL_20:
    sub_1CB839378(*(void *)(a7 + 24), a1 | (unint64_t)(v12 << 32), (unsigned __int16)(a2 << 8) | (v9 << 16) | (4 * (v8 & 0x3F)));
    return 0;
  }
  if (v9 == 49 || v9 == 6) {
    return !sub_1CB921CC4(&v15, &v17, &v16, &v14, a7);
  }
  return 1;
}

uint64_t sub_1CB9213C4(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  unsigned __int8 v27 = a2;
  unsigned __int8 v26 = a3;
  int v24 = a4;
  unsigned int v25 = a1;
  if ((a3 & 0xFE) == 2)
  {
    unsigned __int8 v26 = 4;
    if ((a5 & 2) != 0)
    {
      int v10 = 1;
    }
    else if (a5)
    {
      int v10 = 2;
    }
    else
    {
      int v10 = 3;
    }
    int v24 = v10;
    int v11 = 4;
    goto LABEL_17;
  }
  LOBYTE(v10) = a4;
  int v11 = a3;
  if (a3 <= 0x10u)
  {
    if (a3 != 4 && a3 != 9) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (a3 == 27)
  {
LABEL_17:
    uint64_t v12 = sub_1CB839270(a7, (uint64_t)&unk_1CD96EB06, 0x48uLL);
    if (v12) {
      goto LABEL_26;
    }
    goto LABEL_18;
  }
  if (a3 == 17)
  {
    unsigned __int8 v26 = 28;
    if ((a5 & 2) != 0)
    {
      int v10 = 1;
    }
    else if (a5)
    {
      int v10 = 2;
    }
    else
    {
      int v10 = 3;
    }
    int v24 = v10;
    int v11 = 28;
LABEL_25:
    uint64_t v12 = sub_1CB839270(a7, (uint64_t)&unk_1CD96EB96, 0x24uLL);
    if (!v12) {
      goto LABEL_30;
    }
LABEL_26:
    uint64_t v13 = a1 | (unint64_t)(v12 << 32);
    int v14 = (a2 << 8) | (v11 << 16) | (4 * (v10 & 0x3F));
LABEL_27:
    sub_1CB839378(*(void *)(a7 + 24), v13, v14);
    return 0;
  }
LABEL_18:
  if (v11 <= 0x1C && ((1 << v11) & 0x10000420) != 0 || v11 == 76) {
    goto LABEL_25;
  }
LABEL_30:
  if ((v11 - 6) <= 0x3A && ((1 << (v11 - 6)) & 0x400080400800021) != 0
    || (v11 - 78) <= 0x20 && ((1 << (v11 - 78)) & 0x100020001) != 0)
  {
    if (sub_1CB92054C(&v25, &v27, &v26, &v24, a7)) {
      return 0;
    }
    int v11 = v26;
  }
  if ((v11 - 13) <= 0x34 && ((1 << (v11 - 13)) & 0x10004010020001) != 0
    || (v11 - 79) <= 0x20 && ((1 << (v11 - 79)) & 0x100040001) != 0)
  {
    if (sub_1CB92054C(&v25, &v27, &v26, &v24, a7)) {
      return 0;
    }
    int v11 = v26;
  }
  uint64_t result = 1;
  if (v11 <= 94)
  {
    char v16 = v11 - 28;
    if ((v11 - 28) <= 0x33)
    {
      if (((1 << v16) & 0x4001000201002) != 0) {
        goto LABEL_64;
      }
      if (((1 << v16) & 0x8002000802004) != 0) {
        goto LABEL_59;
      }
      if (((1 << v16) & 0x1000000000401) != 0)
      {
LABEL_69:
        uint64_t v17 = (*(_DWORD *)(a7 + 40) + 3) & 0xFFFFFFFC;
        *(_DWORD *)(a7 + 40) = v17 + 4;
        unsigned int v23 = *(unsigned __int8 *)(a7 + 44);
        if (v23 <= 2) {
          LOBYTE(v23) = 2;
        }
        *(unsigned char *)(a7 + 44) = v23;
        if (*(unsigned char *)(a7 + 5)) {
          goto LABEL_68;
        }
        uint64_t v19 = *(void *)(*(void *)(a7 + 8) + 56);
        if (*(unsigned __int8 *)(v19 + 60) > 1u) {
          goto LABEL_68;
        }
        char v20 = 2;
        goto LABEL_75;
      }
    }
    switch(v11)
    {
      case 2:
      case 3:
      case 4:
      case 9:
        uint64_t v17 = (*(_DWORD *)(a7 + 40) + 1) & 0xFFFFFFFE;
        *(_DWORD *)(a7 + 40) = v17 + 2;
        unsigned int v18 = *(unsigned __int8 *)(a7 + 44);
        if (v18 <= 1) {
          LOBYTE(v18) = 1;
        }
        *(unsigned char *)(a7 + 44) = v18;
        if (*(unsigned char *)(a7 + 5)) {
          goto LABEL_68;
        }
        uint64_t v19 = *(void *)(*(void *)(a7 + 8) + 56);
        if (*(unsigned char *)(v19 + 60)) {
          goto LABEL_68;
        }
        char v20 = 1;
        goto LABEL_75;
      case 5:
      case 10:
        goto LABEL_69;
      case 6:
      case 11:
        goto LABEL_64;
      case 13:
        goto LABEL_59;
      default:
        return result;
    }
  }
  if (v11 > 109)
  {
    if (v11 != 110)
    {
      if (v11 != 111) {
        return result;
      }
      goto LABEL_59;
    }
LABEL_64:
    uint64_t v17 = (*(_DWORD *)(a7 + 40) + 7) & 0xFFFFFFF8;
    *(_DWORD *)(a7 + 40) = v17 + 8;
    unsigned int v22 = *(unsigned __int8 *)(a7 + 44);
    if (v22 <= 3) {
      LOBYTE(v22) = 3;
    }
    *(unsigned char *)(a7 + 44) = v22;
    if (*(unsigned char *)(a7 + 5)) {
      goto LABEL_68;
    }
    uint64_t v19 = *(void *)(*(void *)(a7 + 8) + 56);
    if (*(unsigned __int8 *)(v19 + 60) > 2u) {
      goto LABEL_68;
    }
    char v20 = 3;
    goto LABEL_75;
  }
  if (v11 == 95) {
    goto LABEL_64;
  }
  if (v11 == 97)
  {
LABEL_59:
    uint64_t v17 = (*(_DWORD *)(a7 + 40) + 15) & 0xFFFFFFF0;
    *(_DWORD *)(a7 + 40) = v17 + 16;
    unsigned int v21 = *(unsigned __int8 *)(a7 + 44);
    if (v21 <= 4) {
      LOBYTE(v21) = 4;
    }
    *(unsigned char *)(a7 + 44) = v21;
    if (*(unsigned char *)(a7 + 5)) {
      goto LABEL_68;
    }
    uint64_t v19 = *(void *)(*(void *)(a7 + 8) + 56);
    if (*(unsigned __int8 *)(v19 + 60) > 3u) {
      goto LABEL_68;
    }
    char v20 = 4;
LABEL_75:
    *(unsigned char *)(v19 + 60) = v20;
LABEL_68:
    uint64_t v13 = a1 | (unint64_t)(v17 << 32);
    int v14 = (a2 << 8) | (v11 << 16) | (4 * (v10 & 0x3F)) | 1;
    goto LABEL_27;
  }
  return result;
}

uint64_t sub_1CB921844(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  unsigned __int8 v27 = a2;
  unsigned __int8 v26 = a3;
  int v24 = a4;
  unsigned int v25 = a1;
  if ((a3 & 0xFE) == 2)
  {
    unsigned __int8 v26 = 4;
    if ((a5 & 2) != 0)
    {
      int v10 = 1;
    }
    else if (a5)
    {
      int v10 = 2;
    }
    else
    {
      int v10 = 3;
    }
    int v24 = v10;
    int v11 = 4;
    goto LABEL_17;
  }
  LOBYTE(v10) = a4;
  int v11 = a3;
  if (a3 <= 0x10u)
  {
    if (a3 != 4 && a3 != 9) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (a3 == 27)
  {
LABEL_17:
    uint64_t v12 = sub_1CB839270(a7, (uint64_t)&unk_1CD96EBDE, 0x48uLL);
    if (v12) {
      goto LABEL_26;
    }
    goto LABEL_18;
  }
  if (a3 == 17)
  {
    unsigned __int8 v26 = 28;
    if ((a5 & 2) != 0)
    {
      int v10 = 1;
    }
    else if (a5)
    {
      int v10 = 2;
    }
    else
    {
      int v10 = 3;
    }
    int v24 = v10;
    int v11 = 28;
LABEL_25:
    uint64_t v12 = sub_1CB839270(a7, (uint64_t)&unk_1CD96EC6E, 0x24uLL);
    if (!v12) {
      goto LABEL_30;
    }
LABEL_26:
    uint64_t v13 = a1 | (unint64_t)(v12 << 32);
    int v14 = (a2 << 8) | (v11 << 16) | (4 * (v10 & 0x3F));
LABEL_27:
    sub_1CB839378(*(void *)(a7 + 24), v13, v14);
    return 0;
  }
LABEL_18:
  if (v11 <= 0x1C && ((1 << v11) & 0x10000420) != 0 || v11 == 76) {
    goto LABEL_25;
  }
LABEL_30:
  if ((v11 - 6) <= 0x3A && ((1 << (v11 - 6)) & 0x400080400800021) != 0
    || (v11 - 78) <= 0x20 && ((1 << (v11 - 78)) & 0x100020001) != 0)
  {
    if (sub_1CB9206A4(&v25, &v27, &v26, &v24, a7)) {
      return 0;
    }
    int v11 = v26;
  }
  if ((v11 - 13) <= 0x34 && ((1 << (v11 - 13)) & 0x10004010020001) != 0
    || (v11 - 79) <= 0x20 && ((1 << (v11 - 79)) & 0x100040001) != 0)
  {
    if (sub_1CB9206A4(&v25, &v27, &v26, &v24, a7)) {
      return 0;
    }
    int v11 = v26;
  }
  uint64_t result = 1;
  if (v11 <= 94)
  {
    char v16 = v11 - 28;
    if ((v11 - 28) <= 0x33)
    {
      if (((1 << v16) & 0x4001000201002) != 0) {
        goto LABEL_64;
      }
      if (((1 << v16) & 0x8002000802004) != 0) {
        goto LABEL_59;
      }
      if (((1 << v16) & 0x1000000000401) != 0)
      {
LABEL_69:
        uint64_t v17 = (*(_DWORD *)(a7 + 40) + 3) & 0xFFFFFFFC;
        *(_DWORD *)(a7 + 40) = v17 + 4;
        unsigned int v23 = *(unsigned __int8 *)(a7 + 44);
        if (v23 <= 2) {
          LOBYTE(v23) = 2;
        }
        *(unsigned char *)(a7 + 44) = v23;
        if (*(unsigned char *)(a7 + 5)) {
          goto LABEL_68;
        }
        uint64_t v19 = *(void *)(*(void *)(a7 + 8) + 56);
        if (*(unsigned __int8 *)(v19 + 60) > 1u) {
          goto LABEL_68;
        }
        char v20 = 2;
        goto LABEL_75;
      }
    }
    switch(v11)
    {
      case 2:
      case 3:
      case 4:
      case 9:
        uint64_t v17 = (*(_DWORD *)(a7 + 40) + 1) & 0xFFFFFFFE;
        *(_DWORD *)(a7 + 40) = v17 + 2;
        unsigned int v18 = *(unsigned __int8 *)(a7 + 44);
        if (v18 <= 1) {
          LOBYTE(v18) = 1;
        }
        *(unsigned char *)(a7 + 44) = v18;
        if (*(unsigned char *)(a7 + 5)) {
          goto LABEL_68;
        }
        uint64_t v19 = *(void *)(*(void *)(a7 + 8) + 56);
        if (*(unsigned char *)(v19 + 60)) {
          goto LABEL_68;
        }
        char v20 = 1;
        goto LABEL_75;
      case 5:
      case 10:
        goto LABEL_69;
      case 6:
      case 11:
        goto LABEL_64;
      case 13:
        goto LABEL_59;
      default:
        return result;
    }
  }
  if (v11 > 109)
  {
    if (v11 != 110)
    {
      if (v11 != 111) {
        return result;
      }
      goto LABEL_59;
    }
LABEL_64:
    uint64_t v17 = (*(_DWORD *)(a7 + 40) + 7) & 0xFFFFFFF8;
    *(_DWORD *)(a7 + 40) = v17 + 8;
    unsigned int v22 = *(unsigned __int8 *)(a7 + 44);
    if (v22 <= 3) {
      LOBYTE(v22) = 3;
    }
    *(unsigned char *)(a7 + 44) = v22;
    if (*(unsigned char *)(a7 + 5)) {
      goto LABEL_68;
    }
    uint64_t v19 = *(void *)(*(void *)(a7 + 8) + 56);
    if (*(unsigned __int8 *)(v19 + 60) > 2u) {
      goto LABEL_68;
    }
    char v20 = 3;
    goto LABEL_75;
  }
  if (v11 == 95) {
    goto LABEL_64;
  }
  if (v11 == 97)
  {
LABEL_59:
    uint64_t v17 = (*(_DWORD *)(a7 + 40) + 15) & 0xFFFFFFF0;
    *(_DWORD *)(a7 + 40) = v17 + 16;
    unsigned int v21 = *(unsigned __int8 *)(a7 + 44);
    if (v21 <= 4) {
      LOBYTE(v21) = 4;
    }
    *(unsigned char *)(a7 + 44) = v21;
    if (*(unsigned char *)(a7 + 5)) {
      goto LABEL_68;
    }
    uint64_t v19 = *(void *)(*(void *)(a7 + 8) + 56);
    if (*(unsigned __int8 *)(v19 + 60) > 3u) {
      goto LABEL_68;
    }
    char v20 = 4;
LABEL_75:
    *(unsigned char *)(v19 + 60) = v20;
LABEL_68:
    uint64_t v13 = a1 | (unint64_t)(v17 << 32);
    int v14 = (a2 << 8) | (v11 << 16) | (4 * (v10 & 0x3F)) | 1;
    goto LABEL_27;
  }
  return result;
}

BOOL sub_1CB921CC4(unsigned int *a1, unsigned __int8 *a2, unsigned __int8 *a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v10 = sub_1CB839270(a5, (uint64_t)&unk_1CD96E458, 0x7FuLL);
  int v11 = v10;
  if (v10) {
    sub_1CB839378(*(void *)(a5 + 24), *a1 | (unint64_t)(v10 << 32), (*a2 << 8) | (*a3 << 16) | (4 * (*a4 & 0x3F)));
  }
  return v11 != 0;
}

void sub_1CB921D50(uint64_t a1, int *a2, uint64_t a3, llvm::DataLayout *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v52[8] = *MEMORY[0x1E4F143B8];
  int v8 = *(llvm::LLVMContext ***)a2;
  if (*(unsigned char *)(*(void *)a2 + 8) == 7) {
    return;
  }
  unsigned int v15 = *v8;
  int v50 = (llvm::EVT *)v52;
  uint64_t v51 = 0x400000000;
  uint64_t v47 = v49;
  uint64_t v48 = 0x400000000;
  llvm::ComputeValueVTs(a1, a4, (uint64_t)v8, (uint64_t)&v50, 0, (uint64_t)&v47, 0);
  if (v51 == 1)
  {
    char v16 = (unsigned char *)*((void *)a2 + 10);
    llvm::EVT::getTypeForEVT(v50, v15);
    *(void *)&long long v46 = v17;
    sub_1CB923CAC(a3, v16, (uint64_t *)&v46, a2 + 36, (uint64_t)(a2 + 2), (char *)a2 + 72);
LABEL_4:
    if (v47 != v49) {
      free(v47);
    }
    if (v50 != (llvm::EVT *)v52) {
      free(v50);
    }
    return;
  }
  int v38 = *(_DWORD *)(a3 + 8);
  int v40 = (*(uint64_t (**)(uint64_t, void, uint64_t, void, llvm::DataLayout *))(*(void *)a1 + 1912))(a1, *(void *)a2, a6, 0, a4);
  if (v51)
  {
    uint64_t v18 = 0;
    uint64_t v19 = v50;
    int v39 = (llvm::EVT *)((char *)v50 + 16 * v51);
    do
    {
      long long v46 = *(_OWORD *)v19;
      uint64_t v45 = 0;
      llvm::EVT::getTypeForEVT((llvm::EVT *)&v46, v15);
      uint64_t v45 = v20;
      if (*(void *)(a7 + 24))
      {
        uint64_t v42 = v19;
        uint64_t v43 = v18;
        unint64_t LLTForType = llvm::getLLTForType(v20, a4, v21);
        int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a5, "", 0);
        unint64_t v23 = IncompleteVirtualRegister & 0x7FFFFFFF;
        *(void *)(*(void *)(a5 + 24) + 16 * v23) = 4;
        unint64_t v24 = *(unsigned int *)(a5 + 432);
        if (v23 >= v24)
        {
          unint64_t v25 = v23 + 1;
          uint64_t v26 = *(void *)(a5 + 440);
          if (v23 >= *(unsigned int *)(a5 + 436)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v27 = *(_DWORD *)(a5 + 432);
          if (v25 != v24)
          {
            unsigned __int8 v28 = (void *)(*(void *)(a5 + 424) + 8 * *(unsigned int *)(a5 + 432));
            uint64_t v29 = ~v23 + v24;
            do
              *v28++ = v26;
            while (!__CFADD__(v29++, 1));
            int v27 = *(_DWORD *)(a5 + 432);
          }
          *(_DWORD *)(a5 + 432) = v27 + v25 - v24;
        }
        *(void *)(*(void *)(a5 + 424) + 8 * v23) = LLTForType;
        uint64_t v31 = *(void *)(a5 + 8);
        if (v31)
        {
          int v37 = IncompleteVirtualRegister;
          (*(void (**)(uint64_t))(*(void *)v31 + 24))(v31);
          int IncompleteVirtualRegister = v37;
        }
        uint64_t v19 = v42;
        uint64_t v18 = v43;
      }
      else
      {
        int IncompleteVirtualRegister = *(_DWORD *)(*((void *)a2 + 10) + 4 * v18);
      }
      int v44 = IncompleteVirtualRegister;
      sub_1CB923CAC(a3, &v44, (uint64_t *)&v45, a2 + 36, (uint64_t)(a2 + 2), (char *)a2 + 72);
      if (v40)
      {
        unint64_t v36 = *(_DWORD **)(*(void *)a3 + 152 * *(unsigned int *)(a3 + 8) - 144);
        *v36 |= 0x20000000u;
      }
      ++v18;
      uint64_t v19 = (llvm::EVT *)((char *)v19 + 16);
    }
    while (v19 != v39);
  }
  uint64_t v32 = *(_DWORD **)(*(void *)a3 + 152 * *(unsigned int *)(a3 + 8) - 144);
  *v32 |= 0x10000000u;
  if (!*(void *)(a7 + 24) || !v48) {
    goto LABEL_4;
  }
  uint64_t v33 = 0;
  while (1)
  {
    uint64_t v34 = 8 * *((void *)v47 + v33);
    LODWORD(v45) = **(_DWORD **)(*(void *)a3 + 152 * (v38 + v33) + 80);
    *(void *)&long long v46 = v34;
    uint64_t v35 = *(void *)(a7 + 24);
    if (!v35) {
      break;
    }
    (*(void (**)(uint64_t, llvm **, long long *))(*(void *)v35 + 48))(v35, &v45, &v46);
    if (++v33 >= (unint64_t)v48) {
      goto LABEL_4;
    }
  }
  sub_1CB920400();
  sub_1CB922174();
}

void sub_1CB922174(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v64[2] = *MEMORY[0x1E4F143B8];
  int v6 = **(_DWORD **)(a1 + 80);
  if ((v6 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  uint64_t v8 = v6 & 0x7FFFFFFF;
  if (v8 >= *(_DWORD *)(a3 + 432)) {
    goto LABEL_8;
  }
  unint64_t v9 = *(void *)(*(void *)(a3 + 424) + 8 * v8);
  if ((v9 & 0xFFFFFFFFFFFFFFF9) == 0 || (*(void *)(*(void *)(a3 + 424) + 8 * v8) & 4) == 0) {
    goto LABEL_8;
  }
  uint64_t v22 = 0x800000000000000;
  if ((v9 & 2) == 0) {
    uint64_t v22 = 0x8000000000000;
  }
  if ((v22 & v9) != 0) {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
  }
  if ((v9 & 0x7FFF8) == 0x18)
  {
    char v23 = 3;
    if ((v9 & 1) == 0) {
      char v23 = 19;
    }
    unint64_t v24 = v9 >> v23;
    unint64_t v25 = v9 & 0x8000000000000000 | (8 * v24) | 1;
    uint64_t v26 = (v9 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v24) | 2;
    if ((v9 & 2) == 0) {
      uint64_t v26 = v25;
    }
    uint64_t v52 = v26;
    uint64_t v27 = *(void *)a1;
    if ((*(_DWORD *)(*(void *)a1 + 8) & 0xFE) == 0x12) {
      uint64_t v27 = **(void **)(v27 + 16);
    }
    int v28 = 0;
    uint64_t v62 = v64;
    uint64_t v63 = 0x400000000;
    uint64_t v53 = a4;
    uint64_t v51 = v27;
    do
    {
      unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a3, "", 0);
      unint64_t v30 = IncompleteVirtualRegister & 0x7FFFFFFF;
      *(void *)(*(void *)(a3 + 24) + 16 * v30) = 4;
      unint64_t v31 = *(unsigned int *)(a3 + 432);
      if (v30 >= v31)
      {
        unint64_t v32 = v30 + 1;
        uint64_t v33 = *(void *)(a3 + 440);
        if (v30 >= *(unsigned int *)(a3 + 436)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v34 = *(_DWORD *)(a3 + 432);
        if (v32 != v31)
        {
          uint64_t v35 = (void *)(*(void *)(a3 + 424) + 8 * *(unsigned int *)(a3 + 432));
          uint64_t v36 = ~v30 + v31;
          do
            *v35++ = v33;
          while (!__CFADD__(v36++, 1));
          int v34 = *(_DWORD *)(a3 + 432);
        }
        *(_DWORD *)(a3 + 432) = v34 + v32 - v31;
      }
      *(void *)(*(void *)(a3 + 424) + 8 * v30) = v52;
      uint64_t v38 = *(void *)(a3 + 8);
      if (v38) {
        (*(void (**)(uint64_t, void))(*(void *)v38 + 24))(v38, IncompleteVirtualRegister);
      }
      unsigned int v54 = IncompleteVirtualRegister;
      if (v63 >= (unint64_t)HIDWORD(v63)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v62[v63] = IncompleteVirtualRegister;
      LODWORD(v63) = v63 + 1;
      sub_1CB925510((uint64_t)&v55, &v54, 1, v51, *(_DWORD *)(a1 + 144), *(unsigned char **)(a1 + 8), *(unsigned int *)(a1 + 16), *(unsigned char *)(a1 + 72), 0);
      unint64_t v39 = sub_1CB927410(a2, (unint64_t)&v55, 1);
      uint64_t v40 = *(void *)a2;
      unsigned int v41 = *(_DWORD *)(a2 + 8);
      uint64_t v42 = *(void *)a2 + 152 * v41;
      *(void *)uint64_t v42 = *(void *)v39;
      *(void *)(v42 + 8) = v42 + 24;
      *(void *)(v42 + 16) = 0x400000000;
      if (*(_DWORD *)(v39 + 16)) {
        sub_1CB927924(v42 + 8, v39 + 8);
      }
      *(unsigned char *)(v42 + 72) = *(unsigned char *)(v39 + 72);
      uint64_t v43 = v40 + 152 * v41;
      *(void *)(v43 + 80) = v43 + 96;
      uint64_t v44 = v43 + 80;
      *(void *)(v44 + 8) = 0x400000000;
      if (*(_DWORD *)(v39 + 88)) {
        sub_1CB927A18(v44, v39 + 80);
      }
      uint64_t v45 = v40 + 152 * v41;
      *(void *)(v45 + 112) = v45 + 128;
      uint64_t v46 = v45 + 112;
      *(void *)(v46 + 8) = 0x200000000;
      if (*(_DWORD *)(v39 + 120)) {
        sub_1CB927A18(v46, v39 + 112);
      }
      uint64_t v47 = v40 + 152 * v41;
      uint64_t v48 = *(void *)(v39 + 136);
      *(_DWORD *)(v47 + 144) = *(_DWORD *)(v39 + 144);
      *(void *)(v47 + 136) = v48;
      ++*(_DWORD *)(a2 + 8);
      if (v60 != &v61) {
        free(v60);
      }
      if (v58 != &v59) {
        free(v58);
      }
      if (v56 != &v57) {
        free(v56);
      }
      ++v28;
    }
    while (v28 != 3);
    uint64_t v55 = v62;
    BOOL v56 = (void *)v63;
    uint64_t v49 = *(void *)(v53 + 24);
    if (v49)
    {
      (*(void (**)(uint64_t, void **))(*(void *)v49 + 48))(v49, &v55);
      if (v62 != (_DWORD *)v64) {
        free(v62);
      }
    }
    else
    {
      sub_1CB920400();
      sub_1CB9226A8(v50);
    }
  }
  else
  {
LABEL_8:
    unint64_t v11 = sub_1CB927410(a2, a1, 1);
    uint64_t v12 = *(void *)a2;
    unsigned int v13 = *(_DWORD *)(a2 + 8);
    uint64_t v14 = *(void *)a2 + 152 * v13;
    *(void *)uint64_t v14 = *(void *)v11;
    *(void *)(v14 + 8) = v14 + 24;
    *(void *)(v14 + 16) = 0x400000000;
    if (*(_DWORD *)(v11 + 16)) {
      sub_1CB927924(v14 + 8, v11 + 8);
    }
    *(unsigned char *)(v14 + 72) = *(unsigned char *)(v11 + 72);
    uint64_t v15 = v12 + 152 * v13;
    *(void *)(v15 + 80) = v15 + 96;
    uint64_t v16 = v15 + 80;
    *(void *)(v16 + 8) = 0x400000000;
    if (*(_DWORD *)(v11 + 88)) {
      sub_1CB927A18(v16, v11 + 80);
    }
    uint64_t v17 = v12 + 152 * v13;
    *(void *)(v17 + 112) = v17 + 128;
    uint64_t v18 = v17 + 112;
    *(void *)(v18 + 8) = 0x200000000;
    if (*(_DWORD *)(v11 + 120)) {
      sub_1CB927A18(v18, v11 + 112);
    }
    uint64_t v19 = v12 + 152 * v13;
    uint64_t v20 = *(void *)(v11 + 136);
    *(_DWORD *)(v19 + 144) = *(_DWORD *)(v11 + 144);
    *(void *)(v19 + 136) = v20;
    ++*(_DWORD *)(a2 + 8);
  }
}

void *sub_1CB9226A8(void *a1)
{
  *a1 = &unk_1F25EE990;
  uint64_t v2 = (void *)a1[6];
  if (v2 != a1 + 8) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CB9226FC(uint64_t a1, void *a2, uint64_t *a3, unsigned char *a4, uint64_t a5)
{
  v152[8] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (uint64_t *)a2[1];
  uint64_t v11 = *v10;
  uint64_t v12 = (llvm *)(*(uint64_t (**)(uint64_t, void))(*(void *)v10[1] + 16))(v10[1], *v10);
  unsigned int v13 = (*(unsigned __int16 *)(v11 + 18) >> 4) & 0x3FF;
  if (v13 <= 0x63)
  {
    if (v13) {
      BOOL v71 = v13 == 8;
    }
    else {
      BOOL v71 = 1;
    }
    if (!v71) {
      goto LABEL_169;
    }
  }
  else
  {
    if (v13 - 100 <= 8)
    {
      uint64_t v14 = v12;
      if (((1 << (v13 - 100)) & 0x1DB) != 0)
      {
        if (!a5)
        {
          if (*((unsigned char *)v12 + 318))
          {
            uint64_t v15 = 789;
          }
          else
          {
            uint64_t v15 = 790;
            if (*((unsigned char *)v12 + 327)) {
              uint64_t v15 = 791;
            }
          }
          BOOL v147 = v149;
          uint64_t v148 = 0x400000000;
          uint64_t v16 = (llvm::MachineFunction *)a2[1];
          uint64_t v17 = *(void *)(a2[2] + 8) + 48 * v15;
          uint64_t v18 = (void *)a2[4];
          int v139 = v18;
          if (v18) {
            llvm::MetadataTracking::track((uint64_t)&v139, (unsigned __int8 *)v18, 2);
          }
          MachineInstr = llvm::MachineFunction::CreateMachineInstr(v16, v17, (unsigned __int8 **)&v139, 0);
          if (v139) {
            llvm::MetadataTracking::untrack((uint64_t)&v139, (unsigned __int8 *)v139);
          }
          if (v148)
          {
            uint64_t v20 = (unsigned int *)v147;
            uint64_t v21 = 4 * v148;
            do
            {
              unsigned int v22 = *v20++;
              LODWORD(v139) = 1;
              int v140 = 0;
              uint64_t v141 = v22;
              llvm::MachineInstr::addOperand(MachineInstr, v16, (const llvm::MachineOperand *)&v139);
              v21 -= 4;
            }
            while (v21);
          }
          char v23 = (unint64_t *)a2[6];
          uint64_t v24 = *(void *)(a2[5] + 40);
          *((void *)MachineInstr + 3) = v24;
          uint64_t v25 = *(void *)(v24 + 32);
          uint64_t v26 = *((unsigned int *)MachineInstr + 10);
          if (v26)
          {
            uint64_t v64 = *((void *)MachineInstr + 4);
            uint64_t v65 = *(void *)(v25 + 40);
            uint64_t v66 = 32 * v26;
            do
            {
              if (!*(unsigned char *)v64)
              {
                uint64_t v67 = *(unsigned int *)(v64 + 4);
                if ((int)v67 >= 0) {
                  int v68 = (uint64_t *)(*(void *)(v65 + 272) + 8 * v67);
                }
                else {
                  int v68 = (uint64_t *)(*(void *)(v65 + 24) + 16 * (v67 & 0x7FFFFFFF) + 8);
                }
                uint64_t v69 = *v68;
                if (*v68)
                {
                  uint64_t v70 = *(void *)(v69 + 16);
                  *(void *)(v69 + 16) = v64;
                  *(void *)(v64 + 16) = v70;
                  if (*(unsigned char *)(v64 + 3))
                  {
                    *(void *)(v64 + 24) = v69;
                  }
                  else
                  {
                    *(void *)(v64 + 24) = 0;
                    int v68 = (uint64_t *)(v70 + 24);
                  }
                }
                else
                {
                  *(void *)(v64 + 16) = v64;
                  *(void *)(v64 + 24) = 0;
                }
                uint64_t *v68 = v64;
              }
              v64 += 32;
              v66 -= 32;
            }
            while (v66);
          }
LABEL_16:
          uint64_t v27 = *(void *)(v25 + 728);
          if (v27) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v27 + 24))(v27, MachineInstr);
          }
          unint64_t v28 = *v23 & 0xFFFFFFFFFFFFFFF8;
          *(void *)MachineInstr = v28 | *(void *)MachineInstr & 7;
          *((void *)MachineInstr + 1) = v23;
          *(void *)(v28 + 8) = MachineInstr;
          *char v23 = *v23 & 7 | (unint64_t)MachineInstr;
          uint64_t v29 = a2[7];
          if (v29) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v29 + 24))(v29, MachineInstr);
          }
          if (v147 != v149) {
            free(v147);
          }
          return 1;
        }
        return 0;
      }
      if (v13 == 102)
      {
        int v32 = *((unsigned __int8 *)v12 + 326);
        BOOL v147 = v149;
        v149[0] = 0;
        uint64_t v148 = 0x400000001;
        uint64_t v33 = (llvm::MachineFunction *)a2[1];
        BOOL v71 = v32 == 0;
        uint64_t v34 = 396864;
        if (v71) {
          uint64_t v34 = 396816;
        }
        uint64_t v35 = *(void *)(a2[2] + 8) + v34;
        uint64_t v36 = (void *)a2[4];
        int v139 = v36;
        if (v36) {
          llvm::MetadataTracking::track((uint64_t)&v139, (unsigned __int8 *)v36, 2);
        }
        int v37 = llvm::MachineFunction::CreateMachineInstr(v33, v35, (unsigned __int8 **)&v139, 0);
        if (v139) {
          llvm::MetadataTracking::untrack((uint64_t)&v139, (unsigned __int8 *)v139);
        }
        if (v148)
        {
          uint64_t v38 = (unsigned int *)v147;
          uint64_t v39 = 4 * v148;
          do
          {
            unsigned int v40 = *v38++;
            LODWORD(v139) = 1;
            int v140 = 0;
            uint64_t v141 = v40;
            llvm::MachineInstr::addOperand(v37, v33, (const llvm::MachineOperand *)&v139);
            v39 -= 4;
          }
          while (v39);
        }
        unsigned int v41 = (unint64_t *)a2[6];
        uint64_t v42 = *(void *)(a2[5] + 40);
        *((void *)v37 + 3) = v42;
        uint64_t v43 = *(void *)(v42 + 32);
        uint64_t v44 = *((unsigned int *)v37 + 10);
        if (v44)
        {
          uint64_t v110 = *((void *)v37 + 4);
          uint64_t v111 = *(void *)(v43 + 40);
          uint64_t v112 = 32 * v44;
          do
          {
            if (!*(unsigned char *)v110)
            {
              uint64_t v113 = *(unsigned int *)(v110 + 4);
              if ((int)v113 >= 0) {
                int v114 = (uint64_t *)(*(void *)(v111 + 272) + 8 * v113);
              }
              else {
                int v114 = (uint64_t *)(*(void *)(v111 + 24) + 16 * (v113 & 0x7FFFFFFF) + 8);
              }
              uint64_t v115 = *v114;
              if (*v114)
              {
                uint64_t v116 = *(void *)(v115 + 16);
                *(void *)(v115 + 16) = v110;
                *(void *)(v110 + 16) = v116;
                if (*(unsigned char *)(v110 + 3))
                {
                  *(void *)(v110 + 24) = v115;
                }
                else
                {
                  *(void *)(v110 + 24) = 0;
                  int v114 = (uint64_t *)(v116 + 24);
                }
              }
              else
              {
                *(void *)(v110 + 16) = v110;
                *(void *)(v110 + 24) = 0;
              }
              *int v114 = v110;
            }
            v110 += 32;
            v112 -= 32;
          }
          while (v112);
        }
        uint64_t v45 = *(void *)(v43 + 728);
        if (v45) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v45 + 24))(v45, v37);
        }
        unint64_t v46 = *v41 & 0xFFFFFFFFFFFFFFF8;
        *(void *)int v37 = v46 | *(void *)v37 & 7;
        *((void *)v37 + 1) = v41;
        *(void *)(v46 + 8) = v37;
        *unsigned int v41 = *v41 & 7 | (unint64_t)v37;
        uint64_t v47 = a2[7];
        if (v47) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v47 + 24))(v47, v37);
        }
        if (v147 != v149) {
          free(v147);
        }
        if (*((unsigned char *)v14 + 318))
        {
          uint64_t v48 = 789;
        }
        else
        {
          uint64_t v48 = 790;
          if (*((unsigned char *)v14 + 327)) {
            uint64_t v48 = 791;
          }
        }
        BOOL v147 = v149;
        uint64_t v148 = 0x400000000;
        uint64_t v49 = (llvm::MachineFunction *)a2[1];
        uint64_t v50 = *(void *)(a2[2] + 8) + 48 * v48;
        uint64_t v51 = (void *)a2[4];
        int v139 = v51;
        if (v51) {
          llvm::MetadataTracking::track((uint64_t)&v139, (unsigned __int8 *)v51, 2);
        }
        MachineInstr = llvm::MachineFunction::CreateMachineInstr(v49, v50, (unsigned __int8 **)&v139, 0);
        if (v139) {
          llvm::MetadataTracking::untrack((uint64_t)&v139, (unsigned __int8 *)v139);
        }
        if (v148)
        {
          uint64_t v52 = (unsigned int *)v147;
          uint64_t v53 = 4 * v148;
          do
          {
            unsigned int v54 = *v52++;
            LODWORD(v139) = 1;
            int v140 = 0;
            uint64_t v141 = v54;
            llvm::MachineInstr::addOperand(MachineInstr, v49, (const llvm::MachineOperand *)&v139);
            v53 -= 4;
          }
          while (v53);
        }
        char v23 = (unint64_t *)a2[6];
        uint64_t v55 = *(void *)(a2[5] + 40);
        *((void *)MachineInstr + 3) = v55;
        uint64_t v25 = *(void *)(v55 + 32);
        uint64_t v56 = *((unsigned int *)MachineInstr + 10);
        if (v56)
        {
          uint64_t v57 = *((void *)MachineInstr + 4);
          uint64_t v58 = *(void *)(v25 + 40);
          uint64_t v59 = 32 * v56;
          do
          {
            if (!*(unsigned char *)v57)
            {
              uint64_t v60 = *(unsigned int *)(v57 + 4);
              if ((int)v60 >= 0) {
                uint64_t v61 = (uint64_t *)(*(void *)(v58 + 272) + 8 * v60);
              }
              else {
                uint64_t v61 = (uint64_t *)(*(void *)(v58 + 24) + 16 * (v60 & 0x7FFFFFFF) + 8);
              }
              uint64_t v62 = *v61;
              if (*v61)
              {
                uint64_t v63 = *(void *)(v62 + 16);
                *(void *)(v62 + 16) = v57;
                *(void *)(v57 + 16) = v63;
                if (*(unsigned char *)(v57 + 3))
                {
                  *(void *)(v57 + 24) = v62;
                }
                else
                {
                  *(void *)(v57 + 24) = 0;
                  uint64_t v61 = (uint64_t *)(v63 + 24);
                }
              }
              else
              {
                *(void *)(v57 + 16) = v57;
                *(void *)(v57 + 24) = 0;
              }
              *uint64_t v61 = v57;
            }
            v57 += 32;
            v59 -= 32;
          }
          while (v59);
        }
        goto LABEL_16;
      }
    }
    if (v13 != 255)
    {
LABEL_169:
      int v124 = (llvm::raw_ostream *)llvm::errs(v12);
      sub_1CB8E509C(v124, "Unsupported calling convention\n");
      return 0;
    }
  }
  uint64_t v72 = a2[1];
  uint64_t v73 = *(void *)v72;
  uint64_t v127 = *(void *)(v72 + 40);
  (*(void (**)(void))(**(void **)(v72 + 16) + 176))(*(void *)(v72 + 16));
  uint64_t v74 = *(void *)(v73 + 40);
  unint64_t v75 = (llvm::MachineFunction *)a2[1];
  uint64_t v76 = *(void *)(a2[2] + 8) + 35040;
  uint64_t v77 = (void *)a2[4];
  int v139 = v77;
  if (v77) {
    llvm::MetadataTracking::track((uint64_t)&v139, (unsigned __int8 *)v77, 2);
  }
  unsigned int v78 = llvm::MachineFunction::CreateMachineInstr(v75, v76, (unsigned __int8 **)&v139, 0);
  if (v139) {
    llvm::MetadataTracking::untrack((uint64_t)&v139, (unsigned __int8 *)v139);
  }
  int v140 = 0;
  uint64_t v141 = 0;
  int v139 = (void *)0x3900000000;
  uint64_t v142 = 0;
  llvm::MachineInstr::addOperand(v78, v75, (const llvm::MachineOperand *)&v139);
  if (a5)
  {
    uint64_t v86 = (llvm::DataLayout *)(v74 + 272);
    int v87 = sub_1CB920814((*(unsigned __int16 *)(v73 + 18) >> 4) & 0x3FF);
    uint64_t v88 = *(void *)(a1 + 8);
    uint64_t v150 = (char *)v152;
    uint64_t v151 = 0x400000000;
    llvm::ComputeValueVTs(v88, v86, *a3, (uint64_t)&v150, 0, 0, 0);
    unsigned int v126 = *(llvm::LLVMContext **)*a3;
    BOOL v147 = v149;
    uint64_t v148 = 0x800000000;
    if (v151)
    {
      BOOL v125 = v87;
      uint64_t v90 = 0;
      unint64_t v91 = 0;
      uint64_t v92 = a4;
      do
      {
        llvm::EVT::getTypeForEVT((llvm::EVT *)&v150[v90], v126);
        sub_1CB925510((uint64_t)&v139, v92, 1, v93, 0, 0, 0, 1, 0);
        LODWORD(v128[0]) = *(_DWORD *)&a4[4 * v91];
        sub_1CC6E73A8(a1, (llvm::Type **)&v139, 0, v86, v73);
        uint64_t v94 = (*(unsigned __int16 *)(v73 + 18) >> 4) & 0x3FF;
        unint64_t v130 = (void (**)(void **))&unk_1F25EEA90;
        uint64_t v131 = a2;
        uint64_t v132 = v128;
        uint64_t v133 = (void **)&v130;
        sub_1CB921D50(*(void *)(a1 + 8), (int *)&v139, (uint64_t)&v147, v86, v127, v94, (uint64_t)&v130);
        if (v133 == (void **)&v130)
        {
          v130[4]((void **)&v130);
        }
        else if (v133)
        {
          (*((void (**)(void))*v133 + 5))();
        }
        if (v145 != &v146) {
          free(v145);
        }
        if (v143 != &v144) {
          free(v143);
        }
        if (v140 != &v142) {
          free(v140);
        }
        ++v91;
        v90 += 16;
        v92 += 4;
      }
      while (v91 < v151);
      uint64_t v95 = v147;
      int v139 = &v141;
      int v140 = (void *)0x1000000000;
      if (v148)
      {
        uint64_t v96 = 152 * v148;
        int v97 = (char *)v147;
        do
        {
          unint64_t v130 = (void (**)(void **))&unk_1F25EEAD8;
          uint64_t v131 = a2;
          uint64_t v132 = v95;
          uint64_t v133 = (void **)&v130;
          sub_1CB922174((unint64_t)v97, (uint64_t)&v139, v127, (uint64_t)&v130);
          if (v133 == (void **)&v130)
          {
            v130[4]((void **)&v130);
          }
          else if (v133)
          {
            (*((void (**)(void))*v133 + 5))();
          }
          v97 += 152;
          v95 += 19;
          v96 -= 152;
        }
        while (v96);
      }
      int v87 = v125;
    }
    else
    {
      int v139 = &v141;
      int v140 = (void *)0x1000000000;
    }
    v128[2] = v87;
    v128[3] = 0;
    char v129 = 0;
    v128[0] = &unk_1F25EEC88;
    v128[1] = v87;
    uint64_t v131 = a2;
    uint64_t v132 = (void *)v127;
    LOBYTE(v133) = 0;
    unsigned int v134 = v75;
    uint64_t v135 = v78;
    unsigned int v136 = v138;
    uint64_t v137 = 0x800000000;
    unint64_t v130 = (void (**)(void **))&unk_1F25EE940;
    uint64_t v30 = sub_1CC6E7788(a1, &v130, (uint64_t)v128, (uint64_t *)&v139, a2, (*(unsigned __int16 *)(v73 + 18) >> 4) & 0x3FF, *(_DWORD *)(*(void *)(v73 + 24) + 8) > 0xFFu, v89, 0, 0);
    unint64_t v130 = (void (**)(void **))&unk_1F25EE990;
    if (v136 != v138) {
      free(v136);
    }
    char v98 = (char *)v139;
    if (v140)
    {
      uint64_t v99 = 152 * v140;
      do
      {
        uint64_t v100 = &v98[v99];
        unint64_t v101 = *(char **)&v98[v99 - 40];
        if (&v98[v99 - 24] != v101) {
          free(v101);
        }
        uint64_t v102 = (char *)*((void *)v100 - 9);
        if (v100 - 56 != v102) {
          free(v102);
        }
        unsigned __int16 v103 = *(char **)&v98[v99 - 144];
        if (&v98[v99 - 128] != v103) {
          free(v103);
        }
        v99 -= 152;
      }
      while (v99);
      char v98 = (char *)v139;
    }
    if (v98 != (char *)&v141) {
      free(v98);
    }
    unsigned int v104 = (char *)v147;
    if (v148)
    {
      uint64_t v105 = 152 * v148;
      do
      {
        uint64_t v106 = &v104[v105];
        unsigned int v107 = *(char **)&v104[v105 - 40];
        if (&v104[v105 - 24] != v107) {
          free(v107);
        }
        int v108 = (char *)*((void *)v106 - 9);
        if (v106 - 56 != v108) {
          free(v108);
        }
        __int16 v109 = *(char **)&v104[v105 - 144];
        if (&v104[v105 - 128] != v109) {
          free(v109);
        }
        v105 -= 152;
      }
      while (v105);
      unsigned int v104 = (char *)v147;
    }
    if (v104 != (char *)v149) {
      free(v104);
    }
    if (v150 != (char *)v152) {
      free(v150);
    }
  }
  else
  {
    uint64_t v30 = 1;
  }
  unsigned int v79 = (unint64_t *)a2[6];
  uint64_t v80 = *(void *)(a2[5] + 40);
  *((void *)v78 + 3) = v80;
  uint64_t v81 = *(void *)(v80 + 32);
  uint64_t v82 = *((unsigned int *)v78 + 10);
  if (v82)
  {
    uint64_t v117 = *((void *)v78 + 4);
    uint64_t v118 = *(void *)(v81 + 40);
    uint64_t v119 = 32 * v82;
    do
    {
      if (!*(unsigned char *)v117)
      {
        uint64_t v120 = *(unsigned int *)(v117 + 4);
        if ((int)v120 >= 0) {
          int v121 = (uint64_t *)(*(void *)(v118 + 272) + 8 * v120);
        }
        else {
          int v121 = (uint64_t *)(*(void *)(v118 + 24) + 16 * (v120 & 0x7FFFFFFF) + 8);
        }
        uint64_t v122 = *v121;
        if (*v121)
        {
          uint64_t v123 = *(void *)(v122 + 16);
          *(void *)(v122 + 16) = v117;
          *(void *)(v117 + 16) = v123;
          if (*(unsigned char *)(v117 + 3))
          {
            *(void *)(v117 + 24) = v122;
          }
          else
          {
            *(void *)(v117 + 24) = 0;
            int v121 = (uint64_t *)(v123 + 24);
          }
        }
        else
        {
          *(void *)(v117 + 16) = v117;
          *(void *)(v117 + 24) = 0;
        }
        *int v121 = v117;
      }
      v117 += 32;
      v119 -= 32;
    }
    while (v119);
  }
  uint64_t v83 = *(void *)(v81 + 728);
  if (v83) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v83 + 24))(v83, v78);
  }
  unint64_t v84 = *v79 & 0xFFFFFFFFFFFFFFF8;
  *(void *)unsigned int v78 = v84 | *(void *)v78 & 7;
  *((void *)v78 + 1) = v79;
  *(void *)(v84 + 8) = v78;
  *unsigned int v79 = *v79 & 7 | (unint64_t)v78;
  uint64_t v85 = a2[7];
  if (v85) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v85 + 24))(v85, v78);
  }
  return v30;
}

uint64_t sub_1CB92347C(uint64_t a1, void *a2, llvm::Function *this, uint64_t a4, uint64_t a5, char a6)
{
  v78[152] = *MEMORY[0x1E4F143B8];
  if (!a5) {
    return 1;
  }
  unint64_t v9 = this;
  uint64_t v46 = a2[1];
  uint64_t v11 = *(void *)(v46 + 40);
  uint64_t v12 = *((void *)this + 5);
  uint64_t v48 = a2[5];
  uint64_t v76 = v78;
  uint64_t v77 = 0x800000000;
  uint64_t v13 = sub_1CB923B44(this);
  uint64_t v49 = v14;
  uint64_t v50 = v9;
  uint64_t v53 = a1;
  if ((uint64_t *)v13 != v14)
  {
    uint64_t v15 = (uint64_t *)v13;
    uint64_t v52 = (llvm::DataLayout *)(v12 + 272);
    int v16 = 1;
    do
    {
      uint64_t v17 = (llvm *)*v15;
      uint64_t v18 = a4;
      uint64_t v19 = (uint64_t *)(a4 + 16 * (v16 - 1));
      uint64_t v20 = (unint64_t *)(v19 + 1);
      sub_1CB925510((uint64_t)&v68, (unsigned char *)*v19, v19[1], *v15, v16 - 1, 0, 0, 1, 0);
      sub_1CC6E73A8(a1, (llvm::Type **)&v68, v16, v52, (uint64_t)v9);
      unint64_t LLTForType = 0;
      if (v19[1] == 1)
      {
        int GenericVirtualRegister = *(_DWORD *)*v19;
        if (GenericVirtualRegister < 0 && (GenericVirtualRegister & 0x7FFFFFFFu) < *(_DWORD *)(v11 + 432)) {
          unint64_t v23 = *(void *)(*(void *)(v11 + 424) + 8 * (GenericVirtualRegister & 0x7FFFFFFF));
        }
        else {
          unint64_t v23 = 0;
        }
        unint64_t LLTForType = v23;
      }
      else
      {
        unint64_t LLTForType = llvm::getLLTForType(v17, v52, v21);
        int GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(v11, LLTForType, "", 0);
      }
      int v60 = GenericVirtualRegister;
      char v59 = 0;
      uint64_t v24 = (*((unsigned __int16 *)v9 + 9) >> 4) & 0x3FF;
      uint64_t v25 = (void **)operator new(0x30uLL);
      *uint64_t v25 = &unk_1F25EEB20;
      v25[1] = &v59;
      v25[2] = &v60;
      v25[3] = (void *)v11;
      v25[4] = &LLTForType;
      v25[5] = a2;
      uint64_t v65 = v25;
      sub_1CB921D50(*(void *)(v53 + 8), (int *)&v68, (uint64_t)&v76, v52, v11, v24, (uint64_t)&v62);
      (*((void (**)(void **))*v25 + 5))(v25);
      if (v60 != GenericVirtualRegister)
      {
        LODWORD(v54) = GenericVirtualRegister;
        LODWORD(v55) = 1;
        LODWORD(v62) = v60;
        LODWORD(v64) = 0;
        (*(void (**)(void *, uint64_t, void **, uint64_t, void (***)(void **), uint64_t, void))(*a2 + 32))(a2, 19, &v54, 1, &v62, 1, 0);
      }
      a1 = v53;
      if (*v20 >= 2) {
        sub_1CC6E7650(v53, *v19, *v20, GenericVirtualRegister, (uint64_t)v17, (uint64_t)a2);
      }
      unint64_t v9 = v50;
      if (v74 != &v75) {
        free(v74);
      }
      a4 = v18;
      if (v72 != &v73) {
        free(v72);
      }
      if (v69 != &v71) {
        free(v69);
      }
      v15 += 5;
      ++v16;
    }
    while (v15 != v49);
  }
  uint64_t v26 = a2[6];
  if (v48 + 48 != (*(void *)(v48 + 48) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v45 = *(void *)(v48 + 56);
    a2[5] = *(void *)(v45 + 24);
    a2[6] = v45;
  }
  int v68 = &v70;
  uint64_t v69 = (void *)0x1000000000;
  if (v77)
  {
    uint64_t v27 = (char *)v76;
    uint64_t v28 = 152 * v77;
    uint64_t v29 = (char *)v76;
    do
    {
      uint64_t v62 = (void (**)(void **))&unk_1F25EEB68;
      uint64_t v63 = a2;
      uint64_t v64 = v27;
      uint64_t v65 = (void **)&v62;
      sub_1CB922174((unint64_t)v29, (uint64_t)&v68, v11, (uint64_t)&v62);
      if (v65 == (void **)&v62)
      {
        v62[4]((void **)&v62);
      }
      else if (v65)
      {
        (*((void (**)(void))*v65 + 5))();
      }
      v29 += 152;
      v27 += 152;
      v28 -= 152;
    }
    while (v28);
  }
  if (v48 + 48 != (*(void *)(v48 + 48) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v44 = *(void *)(v48 + 56);
    a2[5] = *(void *)(v44 + 24);
    a2[6] = v44;
  }
  uint64_t v56 = sub_1CB9211AC((*((unsigned __int16 *)v50 + 9) >> 4) & 0x3FF);
  uint64_t v57 = 0;
  char v58 = 1;
  unsigned int v54 = &unk_1F25EECB8;
  uint64_t v55 = v56;
  uint64_t v63 = a2;
  uint64_t v64 = (char *)v11;
  LOBYTE(v65) = 1;
  uint64_t v62 = (void (**)(void **))&unk_1F25EE9E0;
  v66[0] = v67;
  v66[1] = (void *)0x800000000;
  uint64_t v6 = sub_1CC6E7788(v53, &v62, (uint64_t)&v54, (uint64_t *)&v68, a2, (*((unsigned __int16 *)v50 + 9) >> 4) & 0x3FF, *(_DWORD *)(*((void *)v50 + 3) + 8) > 0xFFu, v30, 0, 0);
  if (v6)
  {
    a2[5] = v48;
    a2[6] = v26;
    if ((a6 & 1) == 0)
    {
      uint64_t v31 = *(void *)(v46 + 48);
      if (!v31)
      {
        uint64_t v31 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v46 + 8) + 216))(*(void *)(v46 + 8), v46 + 128, v46);
        *(void *)(v46 + 48) = v31;
      }
      *(_DWORD *)(v31 + 440) = 4 * sub_1CB920798((unsigned int *)v66);
    }
  }
  uint64_t v62 = (void (**)(void **))&unk_1F25EE9E0;
  if (v66[0] != v67) {
    free(v66[0]);
  }
  int v32 = (char *)v68;
  if (v69)
  {
    uint64_t v33 = 152 * v69;
    do
    {
      uint64_t v34 = &v32[v33];
      uint64_t v35 = *(char **)&v32[v33 - 40];
      if (&v32[v33 - 24] != v35) {
        free(v35);
      }
      uint64_t v36 = (char *)*((void *)v34 - 9);
      if (v34 - 56 != v36) {
        free(v36);
      }
      int v37 = *(char **)&v32[v33 - 144];
      if (&v32[v33 - 128] != v37) {
        free(v37);
      }
      v33 -= 152;
    }
    while (v33);
    int v32 = (char *)v68;
  }
  if (v32 != (char *)&v70) {
    free(v32);
  }
  uint64_t v38 = (char *)v76;
  if (v77)
  {
    uint64_t v39 = 152 * v77;
    do
    {
      unsigned int v40 = &v38[v39];
      unsigned int v41 = *(char **)&v38[v39 - 40];
      if (&v38[v39 - 24] != v41) {
        free(v41);
      }
      uint64_t v42 = (char *)*((void *)v40 - 9);
      if (v40 - 56 != v42) {
        free(v42);
      }
      uint64_t v43 = *(char **)&v38[v39 - 144];
      if (&v38[v39 - 128] != v43) {
        free(v43);
      }
      v39 -= 152;
    }
    while (v39);
    uint64_t v38 = (char *)v76;
  }
  if (v38 != (char *)v78) {
    free(v38);
  }
  return v6;
}

uint64_t sub_1CB923B44(llvm::Function *this)
{
  if ((*((_WORD *)this + 9) & 1) == 0) {
    return *((void *)this + 11);
  }
  llvm::Function::BuildLazyArguments(this);
  uint64_t result = *((void *)this + 11);
  if (*((_WORD *)this + 9))
  {
    uint64_t v3 = *((void *)this + 11);
    llvm::Function::BuildLazyArguments(this);
    return v3;
  }
  return result;
}

void *sub_1CB923BB4(void *a1)
{
  *a1 = &unk_1F25EE9E0;
  uint64_t v2 = (void *)a1[4];
  if (v2 != a1 + 6) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CB923C08(llvm *a1, void *a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5 = (a3[9] >> 4) & 0x3FF;
  if (v5 <= 0x63)
  {
    if (v5) {
      BOOL v9 = v5 == 8;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  if (v5 - 100 > 8) {
    goto LABEL_17;
  }
  int v6 = 1 << (v5 - 100);
  if ((v6 & 0x19B) != 0) {
    return 1;
  }
  if ((v6 & 0x44) == 0)
  {
LABEL_17:
    if (v5 != 255)
    {
LABEL_18:
      uint64_t v10 = (llvm::raw_ostream *)llvm::errs(a1);
      sub_1CB8E509C(v10, "Unsupported calling convention\n");
      return 0;
    }
LABEL_16:
    char v8 = 1;
    goto LABEL_8;
  }
  char v8 = 0;
LABEL_8:

  return sub_1CB92347C((uint64_t)a1, a2, (llvm::Function *)a3, a4, a5, v8);
}

uint64_t sub_1CB923CAC(uint64_t a1, unsigned char *a2, uint64_t *a3, int *a4, uint64_t a5, char *a6)
{
  unsigned int v7 = *(_DWORD *)(a1 + 8);
  if (v7 >= *(_DWORD *)(a1 + 12))
  {
    return sub_1CB927AFC(a1, a2, a3, a4, a5, a6);
  }
  else
  {
    sub_1CB925510(*(void *)a1 + 152 * v7, a2, 1, *a3, *a4, *(unsigned char **)a5, *(unsigned int *)(a5 + 8), *a6, 0);
    unsigned int v8 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v8;
    return *(void *)a1 + 152 * v8 - 152;
  }
}

uint64_t sub_1CB923D54()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  uint64_t v2 = v1;
  unsigned int v4 = v3;
  uint64_t v5 = v0;
  v249[152] = *MEMORY[0x1E4F143B8];
  int v6 = (uint64_t *)v3[1];
  uint64_t v7 = *v6;
  uint64_t v180 = v6[7];
  *(unsigned char *)(v180 + 62) = 1;
  int v187 = (uint64_t **)v7;
  uint64_t v188 = (uint64_t)v6;
  uint64_t v8 = v6[5];
  BOOL v9 = (llvm::DataLayout *)(*(void *)(v7 + 40) + 272);
  char v184 = (long long *)(v1 + 2);
  if (!*((unsigned char *)v1 + 8))
  {
    uint64_t v17 = v1[3];
    uint64_t v18 = (uint64_t *)((v17 & 0x80000000) != 0
                    ? *(void *)(v8 + 24) + 16 * (v17 & 0x7FFFFFFF) + 8
                    : *(void *)(v8 + 272) + 8 * v17);
    uint64_t v19 = *v18;
    if (v19)
    {
      if (*(unsigned char *)(v19 + 3) & 1) != 0 || (uint64_t v19 = *(void *)(v19 + 24)) != 0 && (*(unsigned char *)(v19 + 3))
      {
        uint64_t v20 = *(void *)(v19 + 8);
        if (v20)
        {
          if (**(_WORD **)(v20 + 16) == 19 && *(_DWORD *)(v20 + 40) == 2)
          {
            int v21 = *(_DWORD *)(*(void *)(v20 + 32) + 36);
            if (v21 < 0)
            {
              uint64_t v22 = *(void *)(*(void *)(v8 + 24) + 16 * (v21 & 0x7FFFFFFF) + 8);
              if ((*(unsigned char *)(v22 + 3) & 1) == 0) {
                uint64_t v22 = *(void *)(v22 + 24);
              }
              uint64_t v23 = *(void *)(v22 + 8);
              if (**(_WORD **)(v23 + 16) == 71)
              {
                uint64_t v24 = *(void *)(v23 + 32);
                long long v25 = *(_OWORD *)(v24 + 48);
                *char v184 = *(_OWORD *)(v24 + 32);
                *(_OWORD *)(v1 + 6) = v25;
              }
            }
          }
        }
      }
    }
  }
  int v247 = v249;
  uint64_t v248 = 0x800000000;
  unsigned int v10 = v1[50];
  if (v10)
  {
    uint64_t v11 = (int *)*((void *)v1 + 24);
    uint64_t v12 = 152 * v10;
    do
    {
      uint64_t v13 = *v2;
      v246[1] = 0;
      sub_1CB921D50(*(void *)(v5 + 8), v11, (uint64_t)&v247, v9, v8, v13, (uint64_t)&v244);
      v11 += 38;
      v12 -= 152;
    }
    while (v12);
    uint64_t v14 = (char *)v247;
    int v244 = v246;
    uint64_t v245 = 0x1000000000;
    if (v248)
    {
      uint64_t v15 = 152 * v248;
      int v16 = (char *)v247;
      do
      {
        int v218 = &unk_1F25EEBB0;
        uint64_t v219 = (uint64_t)v4;
        int v220 = v14;
        int v221 = &v218;
        sub_1CB922174((unint64_t)v16, (uint64_t)&v244, v8, (uint64_t)&v218);
        if (v221 == &v218)
        {
          (*((void (**)(void **))v218 + 4))(&v218);
        }
        else if (v221)
        {
          (*((void (**)(void))*v221 + 5))();
        }
        v16 += 152;
        v14 += 152;
        v15 -= 152;
      }
      while (v15);
    }
  }
  else
  {
    int v244 = v246;
    uint64_t v245 = 0x1000000000;
  }
  uint64_t v26 = (*(uint64_t (**)(void, uint64_t **))(**(void **)(v188 + 8) + 16))(*(void *)(v188 + 8), v187);
  uint64_t v178 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 112))(v26);
  unsigned __int16 v182 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v26 + 176))(v26);
  uint64_t v27 = sub_1CB9211AC(*v2);
  uint64_t v28 = (llvm::MachineFunction *)v4[1];
  uint64_t v29 = *(void *)(v4[2] + 8) + 17232;
  uint64_t v30 = (unsigned __int8 *)v4[4];
  uint64_t v232 = (uint64_t)v30;
  if (v30)
  {
    unsigned int v149 = v28;
    llvm::MetadataTracking::track((uint64_t)&v232, v30, 2);
    uint64_t v28 = v149;
  }
  uint64_t v179 = v28;
  MachineInstr = llvm::MachineFunction::CreateMachineInstr(v28, v29, (unsigned __int8 **)&v232, 0);
  uint64_t v181 = MachineInstr;
  if (v232)
  {
    int v164 = *(unsigned __int8 *)v232;
    if ((v164 - 4) > 0x1E)
    {
      if ((v164 - 3) >= 0xFFFFFFFE) {
        uint64_t v170 = v232;
      }
      else {
        uint64_t v170 = 0;
      }
      if ((v164 - 3) < 0xFFFFFFFE)
      {
        if (v164 == 3) {
          *(void *)(v232 + 8) = 0;
        }
        goto LABEL_29;
      }
      unint64_t v166 = v170 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v232 + 1) & 0x7F) != 2 && !*(_DWORD *)(v232 + 12)) {
        goto LABEL_29;
      }
      uint64_t v165 = *(void *)(v232 + 16);
      if ((v165 & 4) == 0) {
        goto LABEL_29;
      }
      unint64_t v166 = v165 & 0xFFFFFFFFFFFFFFF8;
      if (!v166) {
        goto LABEL_29;
      }
    }
    int v218 = &v232;
    sub_1CC5FA668(v166 + 16, &v218);
  }
LABEL_29:
  int v32 = (unint64_t *)v4[6];
  uint64_t v33 = *(void *)(v4[5] + 40);
  *((void *)MachineInstr + 3) = v33;
  uint64_t v34 = *(void *)(v33 + 32);
  uint64_t v35 = *((unsigned int *)MachineInstr + 10);
  if (v35)
  {
    uint64_t v99 = *((void *)MachineInstr + 4);
    uint64_t v100 = *(void *)(v34 + 40);
    uint64_t v101 = 32 * v35;
    do
    {
      if (!*(unsigned char *)v99)
      {
        uint64_t v102 = *(unsigned int *)(v99 + 4);
        if ((int)v102 >= 0) {
          unsigned __int16 v103 = (uint64_t *)(*(void *)(v100 + 272) + 8 * v102);
        }
        else {
          unsigned __int16 v103 = (uint64_t *)(*(void *)(v100 + 24) + 16 * (v102 & 0x7FFFFFFF) + 8);
        }
        uint64_t v104 = *v103;
        if (*v103)
        {
          uint64_t v105 = *(void *)(v104 + 16);
          *(void *)(v104 + 16) = v99;
          *(void *)(v99 + 16) = v105;
          if (*(unsigned char *)(v99 + 3))
          {
            *(void *)(v99 + 24) = v104;
          }
          else
          {
            *(void *)(v99 + 24) = 0;
            unsigned __int16 v103 = (uint64_t *)(v105 + 24);
          }
        }
        else
        {
          *(void *)(v99 + 16) = v99;
          *(void *)(v99 + 24) = 0;
        }
        uint64_t *v103 = v99;
      }
      v99 += 32;
      v101 -= 32;
    }
    while (v101);
  }
  uint64_t v36 = *(void *)(v34 + 728);
  if (v36) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v36 + 24))(v36, MachineInstr);
  }
  unint64_t v37 = *v32 & 0xFFFFFFFFFFFFFFF8;
  *(void *)MachineInstr = v37 | *(void *)MachineInstr & 7;
  *((void *)MachineInstr + 1) = v32;
  *(void *)(v37 + 8) = MachineInstr;
  *int v32 = *v32 & 7 | (unint64_t)MachineInstr;
  uint64_t v38 = v4[7];
  if (v38) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v38 + 24))(v38, MachineInstr);
  }
  int v39 = *(unsigned __int8 *)v184;
  uint64_t v40 = *(void *)(v188 + 48);
  if (!v40)
  {
    uint64_t v40 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v188 + 8) + 216))(*(void *)(v188 + 8), v188 + 128, v188);
    *(void *)(v188 + 48) = v40;
  }
  *(unsigned char *)(v40 + 12) = v39 != 0;
  uint64_t v41 = 32352;
  if (v39) {
    uint64_t v41 = 32304;
  }
  uint64_t v42 = (llvm::MachineFunction *)v4[1];
  uint64_t v43 = *(void *)(v4[2] + 8) + v41;
  uint64_t v44 = (unsigned __int8 *)v4[4];
  uint64_t v232 = (uint64_t)v44;
  if (v44) {
    llvm::MetadataTracking::track((uint64_t)&v232, v44, 2);
  }
  uint64_t v45 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v42, v43, (unsigned __int8 **)&v232, 0);
  if (v232)
  {
    int v167 = *(unsigned __int8 *)v232;
    if ((v167 - 4) > 0x1E)
    {
      if ((v167 - 3) >= 0xFFFFFFFE) {
        uint64_t v171 = v232;
      }
      else {
        uint64_t v171 = 0;
      }
      if ((v167 - 3) < 0xFFFFFFFE)
      {
        if (v167 == 3) {
          *(void *)(v232 + 8) = 0;
        }
        goto LABEL_41;
      }
      unint64_t v169 = v171 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v232 + 1) & 0x7F) != 2 && !*(_DWORD *)(v232 + 12)) {
        goto LABEL_41;
      }
      uint64_t v168 = *(void *)(v232 + 16);
      if ((v168 & 4) == 0) {
        goto LABEL_41;
      }
      unint64_t v169 = v168 & 0xFFFFFFFFFFFFFFF8;
      if (!v169) {
        goto LABEL_41;
      }
    }
    int v218 = &v232;
    sub_1CC5FA668(v169 + 16, &v218);
  }
LABEL_41:
  **(_DWORD **)(v45 + 32) |= 0x40000000u;
  long long v46 = v184[1];
  long long v197 = *v184;
  long long v198 = v46;
  if (!v39)
  {
    uint64_t v232 = 513;
    int v233 = 0;
    LODWORD(v218) = v2[3];
    LODWORD(v220) = 0;
    uint64_t v47 = (void *)sub_1CC7382B0((uint64_t)v4);
    uint64_t v232 = 257;
    int v233 = 0;
    int v218 = v47;
    uint64_t v219 = v48;
    LODWORD(v220) = 1;
    sub_1CC738034(v4, 126, (unint64_t *)&v232, (int *)&v218);
    int v50 = *(_DWORD *)(*(void *)(v49 + 32) + 4);
    LODWORD(v197) = 0;
    DWORD1(v197) = v50;
    long long v198 = 0uLL;
    *((void *)&v197 + 1) = 0;
  }
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v45, v42, (const llvm::MachineOperand *)&v197);
  uint64_t v51 = (*(uint64_t (**)(void *, uint64_t, void))(*v182 + 40))(v182, v188, *v2);
  LODWORD(v218) = 12;
  uint64_t v219 = 0;
  int v220 = (char *)v51;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v45, v42, (const llvm::MachineOperand *)&v218);
  v242[0] = v243;
  v242[1] = (void *)0x1000000000;
  llvm::CCState::CCState((uint64_t)&v232, *v2, *((unsigned char *)v2 + 5123), v188, (uint64_t)v242, **v187);
  v194[2] = v27;
  uint64_t v195 = 0;
  char v196 = 0;
  v194[0] = &unk_1F25EEC88;
  v194[1] = v27;
  uint64_t v52 = 0;
  if (sub_1CC6E7904(v5, (uint64_t)v194, (uint64_t *)&v244))
  {
    v225[1] = v4;
    v225[2] = v8;
    char v226 = 0;
    v225[0] = &unk_1F25EE990;
    uint64_t v227 = v42;
    uint64_t v228 = v45;
    unint64_t v229 = v231;
    uint64_t v230 = 0x800000000;
    uint64_t v52 = 0;
    if (!sub_1CC6E7C14(v5, v225, (uint64_t)&v244, (uint64_t)&v232, (uint64_t *)v242, v4, 0, 0)) {
      goto LABEL_174;
    }
    uint64_t v53 = (char *)*((void *)v2 + 636);
    if (v53)
    {
      LODWORD(v218) = 14;
      uint64_t v219 = 0;
      int v220 = v53;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v45, v42, (const llvm::MachineOperand *)&v218);
    }
    unsigned int v54 = (uint64_t *)v4[6];
    uint64_t v55 = *(void *)(v4[5] + 40);
    *(void *)(v45 + 24) = v55;
    uint64_t v56 = *(void *)(v55 + 32);
    uint64_t v57 = *(unsigned int *)(v45 + 40);
    if (v57)
    {
      uint64_t v150 = *(void *)(v45 + 32);
      uint64_t v151 = *(void *)(v56 + 40);
      uint64_t v152 = 32 * v57;
      do
      {
        if (!*(unsigned char *)v150)
        {
          uint64_t v153 = *(unsigned int *)(v150 + 4);
          if ((int)v153 >= 0) {
            int v154 = (uint64_t *)(*(void *)(v151 + 272) + 8 * v153);
          }
          else {
            int v154 = (uint64_t *)(*(void *)(v151 + 24) + 16 * (v153 & 0x7FFFFFFF) + 8);
          }
          uint64_t v155 = *v154;
          if (*v154)
          {
            uint64_t v156 = *(void *)(v155 + 16);
            *(void *)(v155 + 16) = v150;
            *(void *)(v150 + 16) = v156;
            if (*(unsigned char *)(v150 + 3))
            {
              *(void *)(v150 + 24) = v155;
            }
            else
            {
              *(void *)(v150 + 24) = 0;
              int v154 = (uint64_t *)(v156 + 24);
            }
          }
          else
          {
            *(void *)(v150 + 16) = v150;
            *(void *)(v150 + 24) = 0;
          }
          uint64_t *v154 = v150;
        }
        v150 += 32;
        v152 -= 32;
      }
      while (v152);
    }
    uint64_t v58 = *(void *)(v56 + 728);
    if (v58) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v58 + 24))(v58, v45);
    }
    unint64_t v59 = *v54 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v45 = v59 | *(void *)v45 & 7;
    *(void *)(v45 + 8) = v54;
    *(void *)(v59 + 8) = v45;
    *unsigned int v54 = *v54 & 7 | v45;
    uint64_t v60 = v4[7];
    if (v60) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v60 + 24))(v60, v45);
    }
    if (!*(unsigned char *)v184)
    {
      uint64_t v185 = *(void *)(v45 + 32);
      uint64_t v61 = (*(uint64_t (**)(void))(**(void **)(v188 + 16) + 104))(*(void *)(v188 + 16));
      uint64_t v62 = (*(uint64_t (**)(void))(**(void **)(v188 + 16) + 184))(*(void *)(v188 + 16));
      unsigned int v63 = sub_1CC73B398(v188, v182, (void *)v8, v61, v62, v45, *(void *)(v45 + 16), (uint64_t)&v197, 0);
      llvm::MachineOperand::setReg(v185, v63);
    }
    uint64_t v64 = (*(uint64_t (**)(void, uint64_t **))(**(void **)(v188 + 8) + 16))(*(void *)(v188 + 8), v187);
    if (*(unsigned char *)(v64 + 381)) {
      unsigned int v65 = v195;
    }
    else {
      unsigned int v65 = 0;
    }
    uint64_t v183 = v64;
    unsigned int v186 = v65;
    uint64_t v66 = sub_1CB920814(*v2);
    if (v2[32])
    {
      unsigned int v176 = v66;
      uint64_t v67 = (int *)(v2 + 10);
      if (v248)
      {
        int v68 = (char *)v247;
        uint64_t v69 = 152 * v248;
        do
        {
          uint64_t v70 = &v68[v69];
          uint64_t v71 = *(char **)&v68[v69 - 40];
          if (&v68[v69 - 24] != v71)
          {
            char v177 = v67;
            free(v71);
            uint64_t v67 = v177;
          }
          uint64_t v72 = (char *)*((void *)v70 - 9);
          if (v70 - 56 != v72)
          {
            uint64_t v74 = v67;
            free(v72);
            uint64_t v67 = v74;
          }
          uint64_t v73 = *(char **)&v68[v69 - 144];
          if (&v68[v69 - 128] != v73)
          {
            uint64_t v75 = v67;
            free(v73);
            uint64_t v67 = v75;
          }
          v69 -= 152;
        }
        while (v69);
      }
      LODWORD(v248) = 0;
      int v222 = v224;
      uint64_t v223 = 0x800000000;
      uint64_t v76 = *v2;
      int v218 = &unk_1F25EEBF8;
      uint64_t v219 = (uint64_t)&v222;
      int v221 = &v218;
      sub_1CB921D50(*(void *)(v5 + 8), v67, (uint64_t)&v247, v9, v8, v76, (uint64_t)&v218);
      if (v221 == &v218)
      {
        (*((void (**)(void **))v218 + 4))(&v218);
      }
      else if (v221)
      {
        (*((void (**)(void))*v221 + 5))();
      }
      int v218 = &v220;
      uint64_t v219 = 0x1000000000;
      int v215 = v217;
      uint64_t v216 = 0x400000000;
      if (v248)
      {
        unsigned int v78 = (char *)v247;
        uint64_t v79 = 152 * v248;
        do
        {
          uint64_t v80 = (unsigned __int8 *)operator new(0x20uLL);
          *(void *)uint64_t v80 = &unk_1F25EEC40;
          *((void *)v80 + 1) = v4;
          *((void *)v80 + 2) = v78;
          *((void *)v80 + 3) = &v215;
          v204[3] = v80;
          sub_1CB922174((unint64_t)v78, (uint64_t)&v218, v8, (uint64_t)v204);
          (*(void (**)(unsigned __int8 *))(*(void *)v80 + 40))(v80);
          v78 += 152;
          v79 -= 152;
        }
        while (v79);
      }
      v213[0] = v214;
      v213[1] = (void *)0x1000000000;
      llvm::CCState::CCState((uint64_t)v204, *v2, *((unsigned char *)v2 + 5123), v188, (uint64_t)v213, **v187);
      char v193 = 0;
      v191[1] = v176;
      v191[2] = v176;
      unint64_t v192 = 0;
      v191[0] = &unk_1F25EEC88;
      int v81 = 1;
      if (sub_1CC6E7904(v5, (uint64_t)v191, (uint64_t *)&v218))
      {
        v199[1] = v4;
        v199[2] = v8;
        char v200 = 1;
        unsigned int v201 = v203;
        uint64_t v202 = 0x800000000;
        v199[0] = &unk_1F25EEA38;
        v203[12] = v42;
        v203[13] = v45;
        if (sub_1CC6E7C14(v5, v199, (uint64_t)&v218, (uint64_t)v204, (uint64_t *)v213, v4, 0, 0))
        {
          if (v216)
          {
            uint64_t v82 = (char *)v215;
            uint64_t v83 = (char *)v215 + 16 * v216;
            do
            {
              uint64_t v84 = *((void *)v82 + 1);
              uint64_t v85 = (uint64_t *)v4[6];
              uint64_t v86 = *(void *)(v4[5] + 40);
              *(void *)(v84 + 24) = v86;
              uint64_t v87 = *(void *)(v86 + 32);
              uint64_t v88 = *(unsigned int *)(v84 + 40);
              if (v88)
              {
                uint64_t v92 = *(void *)(v84 + 32);
                uint64_t v93 = *(void *)(v87 + 40);
                uint64_t v94 = 32 * v88;
                do
                {
                  if (!*(unsigned char *)v92)
                  {
                    uint64_t v95 = *(unsigned int *)(v92 + 4);
                    if ((int)v95 >= 0) {
                      uint64_t v96 = (uint64_t *)(*(void *)(v93 + 272) + 8 * v95);
                    }
                    else {
                      uint64_t v96 = (uint64_t *)(*(void *)(v93 + 24) + 16 * (v95 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v97 = *v96;
                    if (*v96)
                    {
                      uint64_t v98 = *(void *)(v97 + 16);
                      *(void *)(v97 + 16) = v92;
                      *(void *)(v92 + 16) = v98;
                      if (*(unsigned char *)(v92 + 3))
                      {
                        *(void *)(v92 + 24) = v97;
                      }
                      else
                      {
                        *(void *)(v92 + 24) = 0;
                        uint64_t v96 = (uint64_t *)(v98 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v92 + 16) = v92;
                      *(void *)(v92 + 24) = 0;
                    }
                    uint64_t *v96 = v92;
                  }
                  v92 += 32;
                  v94 -= 32;
                }
                while (v94);
              }
              uint64_t v89 = *(void *)(v87 + 728);
              if (v89) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v89 + 24))(v89, v84);
              }
              unint64_t v90 = *v85 & 0xFFFFFFFFFFFFFFF8;
              *(void *)uint64_t v84 = v90 | *(void *)v84 & 7;
              *(void *)(v84 + 8) = v85;
              *(void *)(v90 + 8) = v84;
              *uint64_t v85 = *v85 & 7 | v84;
              uint64_t v91 = v4[7];
              if (v91) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v91 + 24))(v91, v84);
              }
              v82 += 16;
            }
            while (v82 != v83);
          }
          if (v223)
          {
            uint64_t v106 = 0;
            unsigned int v107 = (char *)v222;
            uint64_t v108 = 4 * v223;
            do
            {
              int v109 = *(_DWORD *)(*((void *)v2 + 15) + v106);
              if (v109 < 0 && (v109 & 0x7FFFFFFFu) < *(_DWORD *)(v8 + 432)) {
                uint64_t v110 = *(void *)(*(void *)(v8 + 424) + 8 * (v109 & 0x7FFFFFFF));
              }
              else {
                uint64_t v110 = 0;
              }
              int v111 = *(_DWORD *)&v107[v106];
              if (v111 < 0 && (v111 & 0x7FFFFFFFu) < *(_DWORD *)(v8 + 432)) {
                uint64_t v112 = *(void *)(*(void *)(v8 + 424) + 8 * (v111 & 0x7FFFFFFF));
              }
              else {
                uint64_t v112 = 0;
              }
              v190[0] = *(_DWORD *)(*((void *)v2 + 15) + v106);
              v190[2] = 1;
              v189[0] = v111;
              v189[4] = 0;
              if (v110 == v112) {
                (*(void (**)(void *, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, void))(*v4 + 32))(v4, 19, v190, 1, v189, 1, 0);
              }
              else {
                sub_1CC7382B0((uint64_t)v4);
              }
              v106 += 4;
            }
            while (v108 != v106);
          }
          int v81 = 0;
          unsigned int v113 = v192;
          if (v192 <= v186) {
            unsigned int v113 = v186;
          }
          unsigned int v186 = v113;
        }
        v199[0] = &unk_1F25EE9E0;
        uint64_t v77 = v181;
        if (v201 != v203) {
          free(v201);
        }
      }
      else
      {
        uint64_t v77 = v181;
      }
      if (v211 != &v212) {
        free(v211);
      }
      if (v209 != &v210) {
        free(v209);
      }
      if (v207 != &v208) {
        free(v207);
      }
      if (v205 != &v206) {
        free(v205);
      }
      if (v213[0] != v214) {
        free(v213[0]);
      }
      if (v215 != v217) {
        free(v215);
      }
      int v114 = (char **)v218;
      if (v219)
      {
        uint64_t v115 = 19 * v219;
        do
        {
          uint64_t v116 = (char *)&v114[v115];
          uint64_t v117 = v114[v115 - 5];
          if (&v114[v115 - 3] != (char **)v117) {
            free(v117);
          }
          uint64_t v118 = (char *)*((void *)v116 - 9);
          if (v116 - 56 != v118) {
            free(v118);
          }
          uint64_t v119 = v114[v115 - 18];
          if (&v114[v115 - 16] != (char **)v119) {
            free(v119);
          }
          v115 -= 19;
        }
        while (v115 * 8);
        int v114 = (char **)v218;
      }
      if (v114 != &v220) {
        free(v114);
      }
      if (v222 != v224) {
        free(v222);
      }
      if (v81)
      {
        uint64_t v52 = 0;
LABEL_174:
        v225[0] = &unk_1F25EE990;
        if (v229 != v231) {
          free(v229);
        }
        goto LABEL_176;
      }
    }
    else
    {
      uint64_t v77 = v181;
    }
    unsigned int v120 = *(unsigned __int8 *)(v180 + 60);
    unsigned __int8 v121 = 63 - __clz((1 << *(unsigned char *)(v178 + 12)));
    if (v120 <= v121) {
      LOBYTE(v120) = v121;
    }
    int v122 = *(unsigned __int8 *)(v183 + 381);
    uint64_t v123 = (char *)(-(int)(1 << v120) & (v186 + (1 << v120) - 1));
    LODWORD(v218) = 1;
    if (v122) {
      int v124 = v123;
    }
    else {
      int v124 = 0;
    }
    uint64_t v219 = 0;
    int v220 = v124;
    llvm::MachineInstr::addOperand(v77, v179, (const llvm::MachineOperand *)&v218);
    LODWORD(v218) = 1;
    int v220 = 0;
    uint64_t v219 = 0;
    llvm::MachineInstr::addOperand(v77, v179, (const llvm::MachineOperand *)&v218);
    BOOL v125 = (llvm::MachineFunction *)v4[1];
    uint64_t v126 = *(void *)(v4[2] + 8) + 17184;
    uint64_t v127 = (unsigned __int8 *)v4[4];
    v204[0] = v127;
    if (v127) {
      llvm::MetadataTracking::track((uint64_t)v204, v127, 2);
    }
    unsigned int v128 = llvm::MachineFunction::CreateMachineInstr(v125, v126, v204, 0);
    if (v204[0])
    {
      int v172 = *v204[0];
      if ((v172 - 4) > 0x1E)
      {
        if ((v172 - 3) >= 0xFFFFFFFE) {
          unint64_t v175 = v204[0];
        }
        else {
          unint64_t v175 = 0;
        }
        if ((v172 - 3) < 0xFFFFFFFE)
        {
          if (v172 == 3) {
            *((void *)v204[0] + 1) = 0;
          }
          goto LABEL_168;
        }
        unint64_t v174 = (unint64_t)(v175 + 8);
      }
      else
      {
        if ((v204[0][1] & 0x7F) != 2 && !*((_DWORD *)v204[0] + 3)) {
          goto LABEL_168;
        }
        uint64_t v173 = *((void *)v204[0] + 2);
        if ((v173 & 4) == 0) {
          goto LABEL_168;
        }
        unint64_t v174 = v173 & 0xFFFFFFFFFFFFFFF8;
        if (!v174) {
          goto LABEL_168;
        }
      }
      int v218 = v204;
      sub_1CC5FA668(v174 + 16, &v218);
    }
LABEL_168:
    char v129 = (unint64_t *)v4[6];
    uint64_t v130 = *(void *)(v4[5] + 40);
    *((void *)v128 + 3) = v130;
    uint64_t v131 = *(void *)(v130 + 32);
    uint64_t v132 = *((unsigned int *)v128 + 10);
    if (v132)
    {
      uint64_t v157 = *((void *)v128 + 4);
      uint64_t v158 = *(void *)(v131 + 40);
      uint64_t v159 = 32 * v132;
      do
      {
        if (!*(unsigned char *)v157)
        {
          uint64_t v160 = *(unsigned int *)(v157 + 4);
          if ((int)v160 >= 0) {
            int v161 = (uint64_t *)(*(void *)(v158 + 272) + 8 * v160);
          }
          else {
            int v161 = (uint64_t *)(*(void *)(v158 + 24) + 16 * (v160 & 0x7FFFFFFF) + 8);
          }
          uint64_t v162 = *v161;
          if (*v161)
          {
            uint64_t v163 = *(void *)(v162 + 16);
            *(void *)(v162 + 16) = v157;
            *(void *)(v157 + 16) = v163;
            if (*(unsigned char *)(v157 + 3))
            {
              *(void *)(v157 + 24) = v162;
            }
            else
            {
              *(void *)(v157 + 24) = 0;
              int v161 = (uint64_t *)(v163 + 24);
            }
          }
          else
          {
            *(void *)(v157 + 16) = v157;
            *(void *)(v157 + 24) = 0;
          }
          *int v161 = v157;
        }
        v157 += 32;
        v159 -= 32;
      }
      while (v159);
    }
    uint64_t v133 = *(void *)(v131 + 728);
    if (v133) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v133 + 24))(v133, v128);
    }
    unint64_t v134 = *v129 & 0xFFFFFFFFFFFFFFF8;
    *(void *)unsigned int v128 = v134 | *(void *)v128 & 7;
    *((void *)v128 + 1) = v129;
    *(void *)(v134 + 8) = v128;
    unint64_t *v129 = *v129 & 7 | (unint64_t)v128;
    uint64_t v135 = v4[7];
    if (v135) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v135 + 24))(v135, v128);
    }
    uint64_t v52 = 1;
    LODWORD(v218) = 1;
    uint64_t v219 = 0;
    int v220 = v124;
    llvm::MachineInstr::addOperand(v128, v125, (const llvm::MachineOperand *)&v218);
    LODWORD(v218) = 1;
    int v220 = 0;
    uint64_t v219 = 0;
    llvm::MachineInstr::addOperand(v128, v125, (const llvm::MachineOperand *)&v218);
    goto LABEL_174;
  }
LABEL_176:
  if (v240 != &v241) {
    free(v240);
  }
  if (v238 != &v239) {
    free(v238);
  }
  if (v236 != &v237) {
    free(v236);
  }
  if (v234 != &v235) {
    free(v234);
  }
  if (v242[0] != v243) {
    free(v242[0]);
  }
  unsigned int v136 = (char *)v244;
  if (v245)
  {
    uint64_t v137 = 152 * v245;
    do
    {
      uint64_t v138 = &v136[v137];
      int v139 = *(char **)&v136[v137 - 40];
      if (&v136[v137 - 24] != v139) {
        free(v139);
      }
      int v140 = (char *)*((void *)v138 - 9);
      if (v138 - 56 != v140) {
        free(v140);
      }
      uint64_t v141 = *(char **)&v136[v137 - 144];
      if (&v136[v137 - 128] != v141) {
        free(v141);
      }
      v137 -= 152;
    }
    while (v137);
    unsigned int v136 = (char *)v244;
  }
  if (v136 != (char *)v246) {
    free(v136);
  }
  uint64_t v142 = (char *)v247;
  if (v248)
  {
    uint64_t v143 = 152 * v248;
    do
    {
      uint64_t v144 = &v142[v143];
      uint64_t v145 = *(char **)&v142[v143 - 40];
      if (&v142[v143 - 24] != v145) {
        free(v145);
      }
      uint64_t v146 = (char *)*((void *)v144 - 9);
      if (v144 - 56 != v146) {
        free(v146);
      }
      BOOL v147 = *(char **)&v142[v143 - 144];
      if (&v142[v143 - 128] != v147) {
        free(v147);
      }
      v143 -= 152;
    }
    while (v143);
    uint64_t v142 = (char *)v247;
  }
  if (v142 != (char *)v249) {
    free(v142);
  }
  return v52;
}

void *sub_1CB925384(void *a1)
{
  *a1 = &unk_1F25EE9E0;
  uint64_t v2 = (void *)a1[4];
  if (v2 != a1 + 6) {
    free(v2);
  }
  return a1;
}

void *sub_1CB9253D8(void *a1)
{
  *a1 = &unk_1F25EE990;
  uint64_t v2 = (void *)a1[6];
  if (v2 != a1 + 8) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CB92542C()
{
  return 0;
}

uint64_t sub_1CB925434()
{
  return 1;
}

uint64_t sub_1CB92543C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1)) {
    return 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48);

  return v12(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1CB925508()
{
  return 0;
}

uint64_t sub_1CB925510(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, int a5, unsigned char *a6, uint64_t a7, char a8, uint64_t a9)
{
  *(void *)(a1 + 8) = a1 + 24;
  uint64_t v15 = a1 + 8;
  *(void *)a1 = a4;
  *(void *)(a1 + 16) = 0x400000000;
  sub_1CB925674((unsigned int *)(a1 + 8), a6, &a6[12 * a7]);
  *(void *)(a1 + 80) = a1 + 96;
  *(unsigned char *)(a1 + 72) = a8;
  *(void *)(a1 + 88) = 0x400000000;
  sub_1CB925718((unsigned int *)(a1 + 80), a2, &a2[4 * a3]);
  *(void *)(a1 + 112) = a1 + 128;
  *(void *)(a1 + 120) = 0x200000000;
  *(void *)(a1 + 136) = a9;
  *(_DWORD *)(a1 + 144) = a5;
  if (a3 && !a7) {
    sub_1CB9255FC(v15, 0, 0);
  }
  return a1;
}

uint64_t sub_1CB9255FC(uint64_t result, uint64_t a2, int a3)
{
  unsigned int v3 = *(_DWORD *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v4 = *(void *)result + 12 * v3;
  *(void *)uint64_t v4 = a2;
  *(_DWORD *)(v4 + 8) = a3;
  ++*(_DWORD *)(result + 8);
  return result;
}

unsigned int *sub_1CB925674(unsigned int *result, unsigned char *a2, unsigned char *a3)
{
  uint64_t v4 = result;
  int64_t v5 = a3 - a2;
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 2);
  uint64_t v7 = result[2];
  if (v6 + v7 > result[3]) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2 != a3)
  {
    uint64_t result = (unsigned int *)memcpy((void *)(*(void *)result + 12 * v7), a2, v5);
    LODWORD(v7) = v4[2];
  }
  v4[2] = v7 + v6;
  return result;
}

unsigned int *sub_1CB925718(unsigned int *result, unsigned char *__src, unsigned char *a3)
{
  unsigned int v3 = result;
  size_t v4 = a3 - __src;
  uint64_t v5 = result[2];
  if (v5 + ((a3 - __src) >> 2) > (unint64_t)result[3]) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (__src != a3)
  {
    uint64_t result = (unsigned int *)memcpy((void *)(*(void *)result + 4 * v5), __src, v4);
    LODWORD(v5) = v3[2];
  }
  v3[2] = v5 + (v4 >> 2);
  return result;
}

uint64_t sub_1CB9257A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, unsigned __int8 a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10, uint64_t a11)
{
  uint64_t v12 = 16;
  if (!*(unsigned char *)(a11 + 4)) {
    uint64_t v12 = 8;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t, void, uint64_t))(a1 + v12))(a2, a5, a6, a7, a9, a10, a11);
  if ((result & 1) == 0) {
    *(void *)(a1 + 24) = *(unsigned int *)(a11 + 40);
  }
  return result;
}

void sub_1CB925814(void *a1)
{
  *a1 = &unk_1F25EE990;
  uint64_t v2 = (void *)a1[6];
  if (v2 != a1 + 8) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CB925888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CB92636C(*(void **)(a1 + 8), *(void *)(a1 + 16), a2, a3, a4);
}

uint64_t sub_1CB9258A0(void *a1, unsigned int a2, int a3, uint64_t a4, int a5)
{
  uint64_t v14 = a4;
  int v15 = a5;
  uint64_t v8 = (llvm::MachineInstr *)a1[5];
  BOOL v9 = (llvm::MachineFunction *)a1[4];
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  v16[0] = 0x2000000;
  v16[1] = a3;
  llvm::MachineInstr::addOperand(v8, v9, (const llvm::MachineOperand *)v16);
  int v10 = sub_1CC6EA4B4((uint64_t)a1, a2, (unsigned __int8 *)&v14, 0);
  uint64_t v11 = a1[1];
  v13[0] = a3;
  v13[2] = 1;
  v16[0] = v10;
  LODWORD(v18) = 0;
  (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, void))(*(void *)v11 + 32))(v11, 19, v13, 1, v16, 1, 0);
  return sub_1CB839378((uint64_t)(a1 + 6), v14, v15);
}

llvm::MachineFunction *sub_1CB92597C(uint64_t a1, unsigned int a2, int a3, unint64_t a4, long long *a5, unsigned __int8 *a6)
{
  unint64_t v34 = a4;
  if ((a6[8] >> 2) - 1 <= 2u)
  {
    LOBYTE(v29) = a6[9];
    uint64_t v11 = sub_1CB87E200((unsigned __int8 *)&v29);
    int v13 = v12;
    if (v11 != sub_1CB8F1DC4(&v34) || v13 != v14) {
      a2 = sub_1CC6EA4B4(a1, a2, a6, 0);
    }
  }
  uint64_t v15 = *(void *)(*(void *)(a1 + 8) + 8);
  long long v32 = *a5;
  uint64_t v33 = *((void *)a5 + 2);
  unint64_t v16 = v34;
  uint64_t v17 = *(llvm::LLVMContext ****)v15;
  uint64_t v18 = (llvm::DataLayout *)(*(void *)(*(void *)v15 + 40) + 272);
  LOBYTE(v29) = a6[9];
  uint64_t v30 = 0;
  llvm::EVT::getTypeForEVT((llvm::EVT *)&v29, **v17);
  char Alignment = llvm::DataLayout::getAlignment(v18, v19, 1);
  *(void *)(v15 + 208) += 80;
  uint64_t v21 = *(void *)(v15 + 128);
  if (((v21 + 7) & 0xFFFFFFFFFFFFFFF8) - v21 + 80 > *(void *)(v15 + 136) - v21)
  {
    unsigned int v25 = *(_DWORD *)(v15 + 152) >> 7;
    if (v25 >= 0x1E) {
      LOBYTE(v25) = 30;
    }
    uint64_t v26 = 4096 << v25;
    unint64_t v22 = (unint64_t)operator new(4096 << v25, (std::align_val_t)8uLL);
    unsigned int v27 = *(_DWORD *)(v15 + 152);
    if (v27 >= *(_DWORD *)(v15 + 156)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v15 + 144) + 8 * v27) = v22;
    ++*(_DWORD *)(v15 + 152);
    *(void *)(v15 + 136) = v22 + v26;
  }
  else
  {
    unint64_t v22 = (v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v15 + 128) = v22 + 80;
  *(_OWORD *)unint64_t v22 = v32;
  *(void *)(v22 + 16) = v33;
  *(void *)(v22 + 24) = v16;
  *(_WORD *)(v22 + 32) = 2;
  *(unsigned char *)(v22 + 34) = Alignment;
  *(_OWORD *)(v22 + 40) = 0u;
  *(_OWORD *)(v22 + 56) = 0u;
  *(void *)(v22 + 72) = 0;
  *(_WORD *)(v22 + 36) = 1;
  uint64_t v23 = *(void **)(a1 + 8);
  unsigned int v29 = a2;
  int v31 = 0;
  v28[0] = a3;
  v28[4] = 0;
  return sub_1CC737D1C(v23, (int *)&v29, v28, (llvm::MachineMemOperand *)v22);
}

uint64_t sub_1CB925B88(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 40))(a1, *(unsigned int *)(*(void *)(a2 + 80) + 4 * a3), a4, a5, a6, a7);
}

void sub_1CB925BC4(void *a1)
{
  *a1 = &unk_1F25EE990;
  uint64_t v2 = (void *)a1[6];
  if (v2 != a1 + 8) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CB925C38(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_1CB925C44(*(llvm::IntegerType ******)(a1 + 8), *(void *)(a1 + 16), a3, a4);
}

uint64_t sub_1CB925C44(llvm::IntegerType *****a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a1[1];
  BOOL v9 = (unsigned char *)((uint64_t (*)(llvm::IntegerType ***, llvm::IntegerType ***))(*v8[1])[2])(v8[1], *v8);
  if (v9[381])
  {
    uint64_t v26 = 257;
    LODWORD(v27) = 0;
    unint64_t v22 = (llvm::ConstantInt *)llvm::IntegerType::get(***a1[1], (llvm::LLVMContext *)0x20);
    uint64_t v23 = llvm::ConstantInt::get(v22, a3, (const llvm::APInt *)1);
    ((void (*)(llvm::IntegerType *****, uint64_t *, void *))(*a1)[2])(a1, &v26, v23);
    int v25 = sub_1CD3FA788(a1, a2, *(unsigned int *)(*(void *)(v24 + 32) + 4));
    uint64_t v32 = 514;
    int v33 = 0;
    LODWORD(v26) = v25;
    int v28 = 0;
    sub_1CC7382B0((uint64_t)a1);
    goto LABEL_4;
  }
  (*(void (**)(unsigned char *))(*(void *)v9 + 176))(v9);
  uint64_t v32 = 257;
  int v33 = 0;
  LODWORD(v26) = 66;
  int v28 = 0;
  uint64_t v10 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*a1)[4])(a1, 19, &v32, 1, &v26, 1, 0);
  uint64_t v32 = 514;
  int v33 = 0;
  uint64_t v26 = v10;
  uint64_t v27 = v11;
  int v28 = 1;
  sub_1CC7382B0((uint64_t)a1);
  uint64_t v13 = *(unsigned int *)(*(void *)(v12 + 32) + 4);
  if (a3)
  {
    uint64_t v26 = 513;
    LODWORD(v27) = 0;
    int v14 = (llvm::ConstantInt *)llvm::IntegerType::get(***a1[1], (llvm::LLVMContext *)0x40);
    uint64_t v15 = llvm::ConstantInt::get(v14, a3, (const llvm::APInt *)1);
    uint64_t v16 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t *, void *))(*a1)[2])(a1, &v26, v15);
    uint64_t v32 = 514;
    int v33 = 0;
    LODWORD(v26) = v13;
    int v28 = 0;
    uint64_t v29 = v16;
    uint64_t v30 = v17;
    int v31 = 1;
    ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*a1)[4])(a1, 193, &v32, 1, &v26, 2, 0);
LABEL_4:
    uint64_t v13 = *(unsigned int *)(*(void *)(v18 + 32) + 4);
  }
  uint64_t v19 = v8[54];
  uint64_t v20 = (unint64_t)(v19 + 1) | 4;
  LODWORD(v19) = *((_DWORD *)v19 + 5);
  *(void *)a4 = v20;
  *(void *)(a4 + 8) = a3;
  *(_DWORD *)(a4 + 16) = v19;
  *(unsigned char *)(a4 + 20) = 0;
  return v13;
}

uint64_t sub_1CB925F18(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(v3 + 328);
  uint64_t v5 = *(void *)(v4 + 56);
  if (v5 == v4 + 48)
  {
LABEL_6:
    long long v22 = *(_OWORD *)(a1 + 40);
    uint64_t v30 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v27 = 0u;
    int v25 = (uint64_t (**)(void **, uint64_t *))&unk_1F261CD58;
    uint64_t v26 = (llvm::IntegerType ****)v3;
    *((void *)&v27 + 1) = *(void *)(v3 + 40);
    *(void *)&long long v27 = (*(uint64_t (**)(void))(**(void **)(v3 + 16) + 104))(*(void *)(v3 + 16));
    unint64_t v38 = 0;
    *(void *)&long long v28 = 0;
    long long v29 = 0uLL;
    if (&v25 != (uint64_t (***)(void **, uint64_t *))a1)
    {
      unint64_t v6 = *(unsigned __int8 **)(a1 + 32);
      *(void *)&long long v28 = v6;
      if (v6) {
        llvm::MetadataTracking::track((uint64_t)&v28, v6, 2);
      }
    }
    uint64_t v7 = *(void *)(v4 + 56);
    *((void *)&v28 + 1) = v4;
    *(void *)&long long v29 = v7;
    unint64_t v38 = 257;
    unsigned int v39 = 0;
    v33[0] = 0;
    int v34 = 3;
    uint64_t v35 = 0;
    int v37 = 3;
    uint64_t v8 = sub_1CC739C54(&v25, 0x10Eu, &v38, 1, (int *)v33, 2, 0);
    unint64_t v31 = 257;
    int v32 = 0;
    v33[0] = v8;
    v33[1] = v9;
    int v34 = 1;
    uint64_t v23 = 257;
    int v24 = 0;
    uint64_t v11 = llvm::IntegerType::get(***v26, (llvm::LLVMContext *)0x20);
    uint64_t v12 = *(llvm::ConstantInt **)v11;
    unsigned int v13 = *(_DWORD *)(v11 + 8);
    unsigned int v39 = v13 >> 8;
    if (v13 >> 8 > 0x40) {
      operator new[]();
    }
    unint64_t v14 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v13) + 63);
    if (v13 <= 0xFF) {
      LOBYTE(v14) = 0;
    }
    unint64_t v38 = v14 & 2;
    llvm::ConstantInt::get(v12, (llvm::LLVMContext *)&v38, v10);
    if (v39 >= 0x41 && v38) {
      MEMORY[0x1D25D9CB0](v38, 0x1000C8000313F17);
    }
    uint64_t v35 = v25[2]((void **)&v25, &v23);
    uint64_t v36 = v15;
    int v37 = 1;
    sub_1CC739C54(&v25, 0x7Fu, &v31, 1, (int *)v33, 2, 0);
    *(_OWORD *)(a1 + 40) = v22;
    uint64_t v17 = *(unsigned int *)(*(void *)(v16 + 32) + 4);
    int v25 = (uint64_t (**)(void **, uint64_t *))&unk_1F261CD58;
    if ((void)v28) {
      llvm::MetadataTracking::untrack((uint64_t)&v28, (unsigned __int8 *)v28);
    }
  }
  else
  {
    while (**(_WORD **)(v5 + 16) != 270)
    {
      if ((*(unsigned char *)v5 & 4) == 0)
      {
        while ((*(_WORD *)(v5 + 44) & 8) != 0)
          uint64_t v5 = *(void *)(v5 + 8);
      }
      uint64_t v5 = *(void *)(v5 + 8);
      if (v5 == v4 + 48) {
        goto LABEL_6;
      }
    }
    uint64_t v18 = *(unsigned int *)(*(void *)(v5 + 32) + 4);
    if ((v18 & 0x80000000) != 0) {
      uint64_t v19 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v18 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v19 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v18);
    }
    for (uint64_t i = *v19; (*(unsigned char *)(i + 3) & 1) != 0; uint64_t i = *(void *)(i + 24))
      ;
    return *(unsigned int *)(*(void *)(*(void *)(i + 8) + 32) + 4);
  }
  return v17;
}

uint64_t sub_1CB92636C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int FixedObject = llvm::MachineFrameInfo::CreateFixedObject(*(llvm::MachineFrameInfo **)(a1[1] + 56), a3, a4, 1, 0);
  FixedStacuint64_t k = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(a1[1] + 432), FixedObject);
  if (FixedStack) {
    int v10 = *((_DWORD *)FixedStack + 3);
  }
  else {
    int v10 = 0;
  }
  *(void *)a5 = (unint64_t)FixedStack | 4;
  *(void *)(a5 + 8) = 0;
  *(_DWORD *)(a5 + 16) = v10;
  *(unsigned char *)(a5 + 20) = 0;
  uint64_t IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
  unint64_t v12 = IncompleteVirtualRegister & 0x7FFFFFFF;
  *(void *)(*(void *)(a2 + 24) + 16 * v12) = 4;
  unint64_t v13 = *(unsigned int *)(a2 + 432);
  if (v12 >= v13)
  {
    uint64_t v14 = *(void *)(a2 + 440);
    uint64_t v15 = v12 + 1 - v13;
    if (v12 >= *(unsigned int *)(a2 + 436)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v16 = *(_DWORD *)(a2 + 432);
    if (v15)
    {
      uint64_t v17 = (void *)(*(void *)(a2 + 424) + 8 * *(unsigned int *)(a2 + 432));
      uint64_t v18 = ~v12 + v13;
      do
        *v17++ = v14;
      while (!__CFADD__(v18++, 1));
      int v16 = *(_DWORD *)(a2 + 432);
    }
    *(_DWORD *)(a2 + 432) = v16 + v15;
  }
  *(void *)(*(void *)(a2 + 424) + 8 * v12) = 514;
  uint64_t v20 = *(void *)(a2 + 8);
  if (v20) {
    (*(void (**)(uint64_t, void))(*(void *)v20 + 24))(v20, IncompleteVirtualRegister);
  }
  LODWORD(v22) = IncompleteVirtualRegister;
  int v23 = 1;
  sub_1CC735850(a1, &v22, FixedObject);
  return IncompleteVirtualRegister;
}

void sub_1CB926518(void *a1)
{
  *a1 = &unk_1F25EE9E0;
  uint64_t v2 = (void *)a1[4];
  if (v2 != a1 + 6) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CB92658C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CB92636C(*(void **)(a1 + 8), *(void *)(a1 + 16), a2, a3, a4);
}

uint64_t sub_1CB9265A4(void *a1, unsigned int a2, unsigned int a3, uint64_t a4, int a5)
{
  (*(void (**)(void *, void, void))(*a1 + 64))(a1, a3, a2);
  if ((a5 >> 2) - 1 >= 3)
  {
    uint64_t v14 = a1[1];
    LODWORD(v19) = a2;
    int v20 = 1;
    LODWORD(v17[0]) = a3;
    int v18 = 0;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void *, uint64_t, void))(*(void *)v14 + 32))(v14, 19, &v19, 1, v17, 1, 0);
  }
  else
  {
    uint64_t v10 = a1[1];
    llvm::LLT::LLT(&v16, BYTE2(a5));
    unint64_t v19 = v16;
    int v20 = 0;
    LODWORD(v17[0]) = a3;
    int v18 = 0;
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void *, uint64_t, void))(*(void *)v10 + 32))(v10, 19, &v19, 1, v17, 1, 0);
    uint64_t v12 = a1[1];
    LODWORD(v19) = a2;
    int v20 = 1;
    v17[0] = v11;
    v17[1] = v13;
    int v18 = 1;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void *, uint64_t, void))(*(void *)v12 + 32))(v12, 119, &v19, 1, v17, 1, 0);
  }
  return sub_1CB839378((uint64_t)(a1 + 4), a4, a5);
}

llvm::MachineFunction *sub_1CB92674C(uint64_t a1, int a2, int a3, unint64_t a4, long long *a5, unsigned __int8 *a6)
{
  uint64_t v11 = *(void *)(*(void *)(a1 + 8) + 8);
  long long v38 = *a5;
  uint64_t v39 = *((void *)a5 + 2);
  unint64_t v40 = a4;
  uint64_t v12 = *(llvm::LLVMContext ****)v11;
  uint64_t v13 = (llvm::DataLayout *)(*(void *)(*(void *)v11 + 40) + 272);
  LOBYTE(v33) = a6[9];
  uint64_t v34 = 0;
  llvm::EVT::getTypeForEVT((llvm::EVT *)&v33, **v12);
  char Alignment = llvm::DataLayout::getAlignment(v13, v14, 1);
  *(void *)(v11 + 208) += 80;
  uint64_t v16 = *(void *)(v11 + 128);
  if (((v16 + 7) & 0xFFFFFFFFFFFFFFF8) - v16 + 80 > *(void *)(v11 + 136) - v16)
  {
    unsigned int v29 = *(_DWORD *)(v11 + 152) >> 7;
    if (v29 >= 0x1E) {
      LOBYTE(v29) = 30;
    }
    uint64_t v30 = 4096 << v29;
    unint64_t v17 = (unint64_t)operator new(4096 << v29, (std::align_val_t)8uLL);
    unsigned int v31 = *(_DWORD *)(v11 + 152);
    if (v31 >= *(_DWORD *)(v11 + 156)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v11 + 144) + 8 * v31) = v17;
    ++*(_DWORD *)(v11 + 152);
    *(void *)(v11 + 136) = v17 + v30;
  }
  else
  {
    unint64_t v17 = (v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v11 + 128) = v17 + 80;
  *(_OWORD *)unint64_t v17 = v38;
  *(void *)(v17 + 16) = v39;
  *(void *)(v17 + 24) = a4;
  *(_WORD *)(v17 + 32) = 33;
  *(unsigned char *)(v17 + 34) = Alignment;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  *(void *)(v17 + 72) = 0;
  *(_WORD *)(v17 + 36) = 1;
  if ((a6[8] >> 2) - 1 >= 3u)
  {
    int v24 = *(void **)(a1 + 8);
    LODWORD(v36) = a2;
    int v37 = 1;
    LODWORD(v33) = a3;
    int v35 = 0;
    return sub_1CC737934(v24, 0x5Au, (int *)&v36, (int *)&v33, (llvm::MachineMemOperand *)v17);
  }
  LOBYTE(v33) = a6[9];
  uint64_t v18 = sub_1CB87E200((unsigned __int8 *)&v33);
  int v20 = v19;
  uint64_t v21 = sub_1CB8F1DC4(&v40);
  int v23 = *(void **)(a1 + 8);
  if (v18 == v21 && v20 == v22)
  {
    LODWORD(v36) = a2;
    int v37 = 1;
    LODWORD(v33) = a3;
    int v35 = 0;
    int v24 = v23;
    return sub_1CC737934(v24, 0x5Au, (int *)&v36, (int *)&v33, (llvm::MachineMemOperand *)v17);
  }
  llvm::LLT::LLT(&v32, a6[10]);
  unint64_t v36 = v32;
  int v37 = 0;
  LODWORD(v33) = a3;
  int v35 = 0;
  uint64_t v26 = sub_1CC737934(v23, 0x5Au, (int *)&v36, (int *)&v33, (llvm::MachineMemOperand *)v17);
  uint64_t v27 = *(void *)(a1 + 8);
  LODWORD(v36) = a2;
  int v37 = 1;
  int v33 = v26;
  uint64_t v34 = v28;
  int v35 = 1;
  return (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, llvm::MachineFunction **, uint64_t, void))(*(void *)v27 + 32))(v27, 119, &v36, 1, &v33, 1, 0);
}

void sub_1CB926A00(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v6 = *(void **)(*(void *)(a1 + 8) + 40);
  uint64_t v8 = (char *)v6[20];
  unint64_t v7 = v6[21];
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = (char *)v6[19];
    uint64_t v11 = (v8 - v10) >> 4;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60) {
      goto LABEL_36;
    }
    uint64_t v13 = v7 - (void)v10;
    if (v13 >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 60) {
        goto LABEL_37;
      }
      uint64_t v15 = (char *)operator new(16 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[16 * v11];
    *(_WORD *)uint64_t v16 = a2;
    *((void *)v16 + 1) = -1;
    uint64_t v9 = v16 + 16;
    if (v8 != v10)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v8 - 1);
        v16 -= 16;
        v8 -= 16;
      }
      while (v8 != v10);
      uint64_t v8 = (char *)v6[19];
    }
    v6[19] = v16;
    v6[20] = v9;
    v6[21] = &v15[16 * v14];
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_WORD *)uint64_t v8 = a2;
    *((void *)v8 + 1) = -1;
    uint64_t v9 = v8 + 16;
  }
  v6[20] = v9;
  unint64_t v17 = *(void **)(*(void *)(*(void *)(a1 + 8) + 8) + 40);
  unint64_t v18 = a2 | (unint64_t)(a3 << 32);
  int v20 = (unint64_t *)v17[58];
  unint64_t v19 = v17[59];
  if ((unint64_t)v20 < v19)
  {
    unint64_t *v20 = v18;
    uint64_t v21 = v20 + 1;
    goto LABEL_35;
  }
  int v22 = (void *)v17[57];
  uint64_t v23 = v20 - v22;
  unint64_t v24 = v23 + 1;
  if ((unint64_t)(v23 + 1) >> 61) {
LABEL_36:
  }
    abort();
  uint64_t v25 = v19 - (void)v22;
  if (v25 >> 2 > v24) {
    unint64_t v24 = v25 >> 2;
  }
  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v26 = v24;
  }
  if (!v26)
  {
    uint64_t v27 = 0;
    goto LABEL_30;
  }
  if (v26 >> 61) {
LABEL_37:
  }
    sub_1CB833614();
  uint64_t v27 = (char *)operator new(8 * v26);
LABEL_30:
  uint64_t v28 = &v27[8 * v23];
  *(void *)uint64_t v28 = v18;
  uint64_t v21 = v28 + 8;
  if (v20 != v22)
  {
    do
    {
      uint64_t v29 = *--v20;
      *((void *)v28 - 1) = v29;
      v28 -= 8;
    }
    while (v20 != v22);
    int v20 = (unint64_t *)v17[57];
  }
  v17[57] = v28;
  v17[58] = v21;
  v17[59] = &v27[8 * v26];
  if (v20) {
    operator delete(v20);
  }
LABEL_35:
  v17[58] = v21;
}

void sub_1CB926BE0(void *a1)
{
  *a1 = &unk_1F25EE9E0;
  uint64_t v2 = (void *)a1[4];
  if (v2 != a1 + 6) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CB926C54(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_1CB925C44(*(llvm::IntegerType ******)(a1 + 8), *(void *)(a1 + 16), a3, a4);
}

void sub_1CB926C60(uint64_t a1, int a2)
{
  uint64_t v3 = *(llvm::MachineFunction **)(a1 + 144);
  uint64_t v2 = *(llvm::MachineInstr **)(a1 + 152);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  v4[0] = 50331648;
  v4[1] = a2;
  llvm::MachineInstr::addOperand(v2, v3, (const llvm::MachineOperand *)v4);
}

void sub_1CB926CA4()
{
}

__n128 sub_1CB926CB8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25EEA90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CB926D04(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25EEA90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CB926D34(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  LODWORD(v7) = *a2;
  int v8 = 1;
  uint64_t v4 = *(void **)(a1 + 8);
  v6[0] = **(_DWORD **)(a1 + 16);
  v6[4] = 0;
  return sub_1CC7383D8(v4, &v7, v6, v3);
}

void sub_1CB926D88()
{
}

__n128 sub_1CB926D9C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25EEAD8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CB926DE8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25EEAD8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CB926E18(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(char **)a2;
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  v6[0] = **(_DWORD **)(*(void *)(a1 + 16) + 80);
  v6[4] = 0;
  return sub_1CC738BB8(v4, v3, v2, (uint64_t)v6);
}

void sub_1CB926E60()
{
}

__n128 sub_1CB926E74(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F25EEB20;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_1CB926ED0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25EEB20;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CB926F10(uint64_t a1, int *a2, uint64_t *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  int v31 = *a2;
  uint64_t v32 = *a3;
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  if (!*v4)
  {
    *uint64_t v4 = 1;
    uint64_t v5 = *(void *)(a1 + 24);
    uint64_t v6 = **(void **)(a1 + 32);
    unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v5, "", 0);
    unint64_t v8 = IncompleteVirtualRegister & 0x7FFFFFFF;
    *(void *)(*(void *)(v5 + 24) + 16 * v8) = 4;
    unint64_t v9 = *(unsigned int *)(v5 + 432);
    if (v8 >= v9)
    {
      uint64_t v10 = *(void *)(v5 + 440);
      uint64_t v11 = v8 + 1 - v9;
      if (v8 >= *(unsigned int *)(v5 + 436)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v12 = *(_DWORD *)(v5 + 432);
      if (v11)
      {
        uint64_t v13 = (void *)(*(void *)(v5 + 424) + 8 * *(unsigned int *)(v5 + 432));
        uint64_t v14 = ~v8 + v9;
        do
        {
          *v13++ = v10;
          BOOL v15 = __CFADD__(v14++, 1);
        }
        while (!v15);
        int v12 = *(_DWORD *)(v5 + 432);
      }
      *(_DWORD *)(v5 + 432) = v12 + v11;
    }
    *(void *)(*(void *)(v5 + 424) + 8 * v8) = v6;
    uint64_t v16 = *(void *)(v5 + 8);
    if (v16) {
      (*(void (**)(uint64_t, void))(*(void *)v16 + 24))(v16, IncompleteVirtualRegister);
    }
    **(_DWORD **)(a1 + 16) = IncompleteVirtualRegister;
    uint64_t v17 = *(void *)(a1 + 40);
    LODWORD(v36) = IncompleteVirtualRegister;
    DWORD2(v36) = 1;
    (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, void, void, void))(*(void *)v17 + 32))(v17, 68, &v36, 1, 0, 0, 0);
  }
  uint64_t v18 = *(void *)(a1 + 24);
  uint64_t v19 = **(void **)(a1 + 32);
  unsigned int v20 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v18, "", 0);
  unint64_t v21 = v20 & 0x7FFFFFFF;
  *(void *)(*(void *)(v18 + 24) + 16 * v21) = 4;
  unint64_t v22 = *(unsigned int *)(v18 + 432);
  if (v21 >= v22)
  {
    uint64_t v23 = *(void *)(v18 + 440);
    uint64_t v24 = v21 + 1 - v22;
    if (v21 >= *(unsigned int *)(v18 + 436)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v25 = *(_DWORD *)(v18 + 432);
    if (v24)
    {
      unint64_t v26 = (void *)(*(void *)(v18 + 424) + 8 * *(unsigned int *)(v18 + 432));
      uint64_t v27 = ~v21 + v22;
      do
      {
        *v26++ = v23;
        BOOL v15 = __CFADD__(v27++, 1);
      }
      while (!v15);
      int v25 = *(_DWORD *)(v18 + 432);
    }
    *(_DWORD *)(v18 + 432) = v25 + v24;
  }
  *(void *)(*(void *)(v18 + 424) + 8 * v21) = v19;
  uint64_t v28 = *(void *)(v18 + 8);
  if (v28) {
    (*(void (**)(uint64_t, void))(*(void *)v28 + 24))(v28, v20);
  }
  uint64_t v29 = *(void **)(a1 + 40);
  LODWORD(v34) = v20;
  int v35 = 1;
  LODWORD(v36) = **(_DWORD **)(a1 + 16);
  int v37 = 0;
  v33[0] = v31;
  v33[4] = 0;
  uint64_t result = sub_1CC7388A0(v29, &v34, &v36, v33, v32);
  **(_DWORD **)(a1 + 16) = v20;
  return result;
}

void sub_1CB927228()
{
}

__n128 sub_1CB92723C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25EEB68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CB927288(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25EEB68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CB9272B8(uint64_t a1, int **a2)
{
  v12[24] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  long long v3 = a2[1];
  uint64_t v4 = *(void *)(a1 + 8);
  v9[0] = **(_DWORD **)(*(void *)(a1 + 16) + 80);
  v9[2] = 1;
  uint64_t v10 = v12;
  uint64_t v11 = 0x800000000;
  if ((unint64_t)(4 * (void)v3) >= 0x21) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v5 = 0;
  if (v3)
  {
    uint64_t v6 = v12;
    uint64_t v7 = 4 * (void)v3;
    do
    {
      int v8 = *v2++;
      _DWORD *v6 = v8;
      v6[4] = 0;
      v6 += 6;
      v7 -= 4;
    }
    while (v7);
    int v5 = v11;
  }
  LODWORD(v11) = v5 + ((unint64_t)(4 * (void)v3) >> 2);
  (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, void *))(*(void *)v4 + 32))(v4, 77, v9, 1, v12);
  if (v10 != v12) {
    free(v10);
  }
}

unint64_t sub_1CB927410(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    unint64_t v7 = *(void *)a1 + 152 * v4;
    if (*(void *)a1 <= a2 && v7 > a2)
    {
      unint64_t v9 = a2 - *(void *)a1;
      sub_1CB92747C(a1, v5);
      return *(void *)a1 + v9;
    }
    else
    {
      sub_1CB92747C(a1, v5);
    }
  }
  return a2;
}

void sub_1CB92747C(uint64_t a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v6 = malloc_type_malloc(152 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  unint64_t v7 = v6;
  sub_1CB92753C((uint64_t *)a1, (uint64_t)v6);
  if (*(void *)a1 != a1 + 16) {
    free(*(void **)a1);
  }
  *(void *)a1 = v7;
  *(_DWORD *)(a1 + 12) = v5;
}

void sub_1CB92753C(uint64_t *a1, uint64_t a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *a1;
    uint64_t v7 = *a1 + 152 * v2;
    do
    {
      uint64_t v8 = v6 + v5;
      unint64_t v9 = (void *)(a2 + v5);
      *unint64_t v9 = *(void *)(v6 + v5);
      *(void *)(a2 + v5 + 8) = a2 + v5 + 24;
      v9[2] = 0x400000000;
      if (*(_DWORD *)(v6 + v5 + 16)) {
        sub_1CB9276BC(a2 + v5 + 8, v8 + 8);
      }
      char v10 = *(unsigned char *)(v8 + 72);
      v9[10] = v9 + 12;
      uint64_t v11 = (uint64_t)(v9 + 10);
      *(unsigned char *)(v11 - 8) = v10;
      *(void *)(v11 + 8) = 0x400000000;
      if (*(_DWORD *)(v8 + 88)) {
        sub_1CB927804(v11, v6 + v5 + 80);
      }
      uint64_t v12 = a2 + v5;
      *(void *)(a2 + v5 + 112) = a2 + v5 + 128;
      *(void *)(a2 + v5 + 120) = 0x200000000;
      if (*(_DWORD *)(v8 + 120)) {
        sub_1CB927804(a2 + v5 + 112, v6 + v5 + 112);
      }
      uint64_t v13 = *(void *)(v8 + 136);
      *(_DWORD *)(v12 + 144) = *(_DWORD *)(v8 + 144);
      *(void *)(v12 + 136) = v13;
      v5 += 152;
    }
    while (v8 + 152 != v7);
    unsigned int v14 = *((_DWORD *)a1 + 2);
    if (v14)
    {
      uint64_t v15 = *a1;
      uint64_t v16 = 152 * v14;
      do
      {
        uint64_t v17 = v15 + v16;
        uint64_t v18 = *(void **)(v15 + v16 - 40);
        if ((void *)(v15 + v16 - 24) != v18) {
          free(v18);
        }
        uint64_t v19 = *(void **)(v17 - 72);
        if ((void *)(v17 - 56) != v19) {
          free(v19);
        }
        unsigned int v20 = *(void **)(v15 + v16 - 144);
        if ((void *)(v15 + v16 - 128) != v20) {
          free(v20);
        }
        v16 -= 152;
      }
      while (v16);
    }
  }
}

uint64_t sub_1CB9276BC(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = a2 + 16;
    uint64_t v3 = *(const void **)a2;
    if (*(void *)a2 == a2 + 16)
    {
      uint64_t v6 = (_DWORD *)(a2 + 8);
      uint64_t v5 = *(unsigned int *)(a2 + 8);
      uint64_t v7 = *(unsigned int *)(a1 + 8);
      if (v7 >= v5)
      {
        if (v5) {
          memmove(*(void **)a1, *(const void **)a2, 12 * v5);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v5)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v7)
        {
          uint64_t v15 = *(unsigned int *)(a1 + 8);
          uint64_t v16 = a2;
          memmove(*(void **)a1, v3, 12 * v7);
          uint64_t v8 = v15;
          a2 = v16;
        }
        else
        {
          uint64_t v8 = 0;
        }
        uint64_t v9 = *v6;
        if (v8 != v9) {
          memcpy((void *)(*(void *)a1 + 12 * v8), (const void *)(*(void *)a2 + 12 * v8), *(void *)a2 + 12 * v9 - (*(void *)a2 + 12 * v8));
        }
      }
      *(_DWORD *)(a1 + 8) = v5;
    }
    else
    {
      uint64_t v11 = a2;
      uint64_t v12 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v12);
        uint64_t v3 = *(const void **)v11;
      }
      *(void *)a1 = v3;
      uint64_t v13 = v11;
      uint64_t v14 = *(void *)(v11 + 8);
      uint64_t v6 = (_DWORD *)(v11 + 8);
      *(void *)(a1 + 8) = v14;
      *(void *)uint64_t v13 = v4;
      *(_DWORD *)(v13 + 12) = 0;
    }
    _DWORD *v6 = 0;
  }
  return a1;
}

uint64_t sub_1CB927804(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v5 = (const void *)(a2 + 16);
    uint64_t v4 = *(const void **)a2;
    if (v4 == v5)
    {
      uint64_t v7 = (_DWORD *)(a2 + 8);
      uint64_t v6 = *(unsigned int *)(a2 + 8);
      uint64_t v8 = *(unsigned int *)(a1 + 8);
      if (v8 >= v6)
      {
        if (v6) {
          memmove(*(void **)a1, v4, 4 * v6);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v6)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v8) {
          memmove(*(void **)a1, v4, 4 * v8);
        }
        else {
          uint64_t v8 = 0;
        }
        uint64_t v9 = *v7;
        if (v8 != v9) {
          memcpy((void *)(*(void *)a1 + 4 * v8), (const void *)(*(void *)a2 + 4 * v8), *(void *)a2 + 4 * v9 - (*(void *)a2 + 4 * v8));
        }
      }
      *(_DWORD *)(a1 + 8) = v6;
    }
    else
    {
      uint64_t v11 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v11);
        uint64_t v4 = *(const void **)a2;
      }
      *(void *)a1 = v4;
      uint64_t v7 = (_DWORD *)(a2 + 8);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
    }
    _DWORD *v7 = 0;
  }
  return a1;
}

uint64_t sub_1CB927924(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(unsigned int *)(a2 + 8);
    uint64_t v4 = *(unsigned int *)(a1 + 8);
    if (v4 >= v3)
    {
      if (v3) {
        memmove(*(void **)a1, *(const void **)a2, 12 * v3);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) < v3)
      {
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v4)
      {
        uint64_t v8 = *(unsigned int *)(a1 + 8);
        uint64_t v9 = a2;
        memmove(*(void **)a1, *(const void **)a2, 12 * v4);
        uint64_t v5 = v8;
        a2 = v9;
      }
      else
      {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(unsigned int *)(a2 + 8);
      if (v5 != v6) {
        memcpy((void *)(*(void *)a1 + 12 * v5), (const void *)(*(void *)a2 + 12 * v5), *(void *)a2 + 12 * v6 - (*(void *)a2 + 12 * v5));
      }
    }
    *(_DWORD *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t sub_1CB927A18(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(unsigned int *)(a2 + 8);
    uint64_t v4 = *(unsigned int *)(a1 + 8);
    if (v4 >= v3)
    {
      if (v3) {
        memmove(*(void **)a1, *(const void **)a2, 4 * v3);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) < v3)
      {
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v4)
      {
        uint64_t v8 = *(unsigned int *)(a1 + 8);
        uint64_t v9 = a2;
        memmove(*(void **)a1, *(const void **)a2, 4 * v4);
        uint64_t v5 = v8;
        a2 = v9;
      }
      else
      {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(unsigned int *)(a2 + 8);
      if (v5 != v6) {
        memcpy((void *)(*(void *)a1 + 4 * v5), (const void *)(*(void *)a2 + 4 * v5), *(void *)a2 + 4 * v6 - (*(void *)a2 + 4 * v5));
      }
    }
    *(_DWORD *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t sub_1CB927AFC(uint64_t a1, unsigned char *a2, uint64_t *a3, int *a4, uint64_t a5, char *a6)
{
  uint64_t v6 = *(unsigned int *)(a1 + 12);
  if (v6 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v13 = (2 * v6) | 1;
  if (v13 >= 0xFFFFFFFF) {
    uint64_t v14 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v14 = v13;
  }
  uint64_t v15 = malloc_type_malloc(152 * v14, 0x4065EBACuLL);
  if (!v15) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v16 = (uint64_t)v15;
  sub_1CB925510((uint64_t)v15 + 152 * *(unsigned int *)(a1 + 8), a2, 1, *a3, *a4, *(unsigned char **)a5, *(unsigned int *)(a5 + 8), *a6, 0);
  sub_1CB92753C((uint64_t *)a1, v16);
  if (*(void *)a1 != a1 + 16) {
    free(*(void **)a1);
  }
  *(void *)a1 = v16;
  unsigned int v17 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v17;
  *(_DWORD *)(a1 + 12) = v14;
  return v16 + 152 * v17 - 152;
}

void sub_1CB927C1C()
{
}

__n128 sub_1CB927C30(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x18uLL);
  *(void *)unsigned int v2 = &unk_1F25EEBB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CB927C7C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25EEBB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CB927CAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(char **)a2;
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  v6[0] = **(_DWORD **)(*(void *)(a1 + 16) + 80);
  v6[4] = 0;
  return sub_1CC738BB8(v4, v3, v2, (uint64_t)v6);
}

void sub_1CB927CF4()
{
}

void *sub_1CB927D08(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25EEBF8;
  result[1] = v3;
  return result;
}

uint64_t sub_1CB927D50(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25EEBF8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CB927D7C(uint64_t result, _DWORD *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  unsigned int v3 = *(_DWORD *)(v2 + 8);
  if (v3 >= *(_DWORD *)(v2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)v2 + 4 * v3) = *a2;
  ++*(_DWORD *)(v2 + 8);
  return result;
}

void sub_1CB927DE0()
{
}

__n128 sub_1CB927DF4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25EEC40;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1CB927E48(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25EEC40;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CB927E80(void *a1, int **a2)
{
  unsigned int v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (void *)a1[1];
  uint64_t v6 = (llvm::MachineFunction *)v5[1];
  uint64_t v7 = *(void *)(v5[2] + 8) + 3696;
  uint64_t v8 = (unsigned __int8 *)v5[4];
  uint64_t v24 = v8;
  if (v8) {
    llvm::MetadataTracking::track((uint64_t)&v24, v8, 2);
  }
  uint64_t v9 = llvm::MachineFunction::CreateMachineInstr(v6, v7, &v24, 0);
  if (v24)
  {
    int v16 = *v24;
    if ((v16 - 4) > 0x1E)
    {
      if ((v16 - 3) >= 0xFFFFFFFE) {
        uint64_t v19 = v24;
      }
      else {
        uint64_t v19 = 0;
      }
      if ((v16 - 3) < 0xFFFFFFFE)
      {
        if (v16 == 3) {
          *((void *)v24 + 1) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v18 = (unint64_t)(v19 + 8);
    }
    else
    {
      if ((v24[1] & 0x7F) != 2 && !*((_DWORD *)v24 + 3)) {
        goto LABEL_4;
      }
      uint64_t v17 = *((void *)v24 + 2);
      if ((v17 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v18 = v17 & 0xFFFFFFFFFFFFFFF8;
      if (!v18) {
        goto LABEL_4;
      }
    }
    unsigned int v20 = &v24;
    sub_1CC5FA668(v18 + 16, &v20);
  }
LABEL_4:
  int v10 = **(_DWORD **)(a1[2] + 80);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  LODWORD(v20) = 0x1000000;
  HIDWORD(v20) = v10;
  llvm::MachineInstr::addOperand(v9, v6, (const llvm::MachineOperand *)&v20);
  if (v4)
  {
    uint64_t v11 = 4 * (void)v4;
    do
    {
      int v12 = *v3++;
      uint64_t v21 = 0;
      LODWORD(v20) = 0;
      HIDWORD(v20) = v12;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      llvm::MachineInstr::addOperand(v9, v6, (const llvm::MachineOperand *)&v20);
      v11 -= 4;
    }
    while (v11);
  }
  uint64_t v13 = a1[3];
  unsigned int v14 = *(_DWORD *)(v13 + 8);
  if (v14 >= *(_DWORD *)(v13 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v15 = (llvm::MachineFunction **)(*(void *)v13 + 16 * v14);
  *uint64_t v15 = v6;
  v15[1] = v9;
  ++*(_DWORD *)(v13 + 8);
}

void sub_1CB928028(llvm *a1)
{
  llvm::initializeFunctionGroupInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeScalarEvolutionWrapperPassPass(a1, v2);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  operator new();
}

void sub_1CB9280E0()
{
}

uint64_t sub_1CB928198()
{
  return 0;
}

void sub_1CB9281A0(llvm::Pass *this)
{
  *(void *)this = &unk_1F25EED30;
  uint64_t v2 = (char *)this + 64;
  unsigned int v3 = (char *)*((void *)this + 11);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = (llvm::Pass *)*((void *)this + 7);
  if (v4 == (llvm::Pass *)((char *)this + 32))
  {
    (*(void (**)(char *))(*((void *)this + 4) + 32))((char *)this + 32);
  }
  else if (v4)
  {
    (*(void (**)(llvm::Pass *))(*(void *)v4 + 40))(v4);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CB9282B8(llvm::Pass *this)
{
  *(void *)this = &unk_1F25EED30;
  uint64_t v2 = (char *)this + 64;
  unsigned int v3 = (char *)*((void *)this + 11);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = (llvm::Pass *)*((void *)this + 7);
  if (v4 == (llvm::Pass *)((char *)this + 32))
  {
    (*(void (**)(char *))(*((void *)this + 4) + 32))((char *)this + 32);
  }
  else if (v4)
  {
    (*(void (**)(llvm::Pass *))(*(void *)v4 + 40))(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CB9283E4()
{
  return "AGX2 Specific CodeGen Prepare";
}

void sub_1CB9283F4(llvm::PassRegistry *a1, uint64_t a2)
{
  uint64_t v3 = a2 + 112;
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1CB843600(a2, v3, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::ScalarEvolutionWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);

  sub_1CB843600(a2, a2, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
}

uint64_t sub_1CB9284C4(void *a1, uint64_t *a2)
{
  uint64_t v1222 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2[5];
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (v6 == v7)
  {
LABEL_4:
    uint64_t v8 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v6 != &llvm::ScalarEvolutionWrapperPass::ID)
    {
      v6 += 16;
      if (v6 == v7) {
        goto LABEL_4;
      }
    }
    uint64_t v8 = *(void *)(v6 + 8);
  }
  v1168 = *(llvm::ScalarEvolution **)((*(uint64_t (**)(uint64_t, void *))(*(void *)v8 + 96))(v8, &llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  uint64_t v9 = (uint64_t *)a1[1];
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  if (v10 == v11)
  {
LABEL_9:
    uint64_t v12 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v10 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v10 += 16;
      if (v10 == v11) {
        goto LABEL_9;
      }
    }
    uint64_t v12 = *(void *)(v10 + 8);
  }
  v1182 = (void **)(v4 + 272);
  uint64_t v13 = (const llvm::Instruction *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v12 + 96))(v12, &llvm::DominatorTreeWrapperPass::ID)+ 32);
  unsigned int v14 = (uint64_t *)a1[1];
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  if (v15 == v16)
  {
LABEL_14:
    uint64_t v17 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v15 != &llvm::LoopInfoWrapperPass::ID)
    {
      v15 += 16;
      if (v15 == v16) {
        goto LABEL_14;
      }
    }
    uint64_t v17 = *(void *)(v15 + 8);
  }
  uint64_t v18 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v17 + 96))(v17, &llvm::LoopInfoWrapperPass::ID);
  uint64_t v19 = (uint64_t *)a1[1];
  uint64_t v20 = *v19;
  uint64_t v21 = v19[1];
  if (v20 == v21)
  {
LABEL_19:
    uint64_t v22 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v20 != &llvm::FunctionGroupInfoWrapperPass::ID)
    {
      v20 += 16;
      if (v20 == v21) {
        goto LABEL_19;
      }
    }
    uint64_t v22 = *(void *)(v20 + 8);
  }
  uint64_t v23 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v22 + 96))(v22, &llvm::FunctionGroupInfoWrapperPass::ID);
  uint64_t v24 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(v23 + 32) + 24))(*(void *)(v23 + 32), a2);
  v1186 = v1190;
  v1187 = v1190;
  v1188 = (llvm::Type *)8;
  int v1189 = 0;
  v1215 = v1217;
  uint64_t v1216 = 0x400000000;
  int v25 = sub_1CD1016B0((uint64_t)a2, v1182, v13);
  int v26 = sub_1CD102C90((uint64_t)a2);
  int v27 = sub_1CD105194((uint64_t)a2, v13);
  uint64_t v28 = a1[7];
  if (!v28) {
LABEL_2193:
  }
    sub_1CB920400();
  uint64_t v29 = (uint64_t *)(v18 + 32);
  int v30 = v25 | v26 | v27;
  int v31 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v28 + 48))(v28, a2);
  int v32 = v30 | sub_1CD105760((uint64_t)a2, 0, 1u, v31 ^ 1u, 0, v29);
  int v33 = v32 | sub_1CD106680((uint64_t)a2, v24, (uint64_t)v13, v29);
  uint64_t v34 = a1[11];
  if (v34 && (*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v34 + 48))(v34, a2)) {
    v33 |= sub_1CD107450(a2);
  }
  v1159 = a1;
  v1160 = a2;
  int v35 = (uint64_t *)a2[10];
  v1167 = a2 + 9;
  char __p = v33;
  if (v35 != a2 + 9)
  {
    while (1)
    {
      long long v36 = v35 - 3;
      v1165 = v35;
      if (!v35) {
        long long v36 = 0;
      }
      int v37 = v36 + 5;
      uint64_t v38 = (uint64_t *)v36[6];
      if (v38 != v36 + 5) {
        break;
      }
LABEL_1797:
      int v35 = (uint64_t *)v1165[1];
      if (v35 == v1167) {
        goto LABEL_1798;
      }
    }
    v1169 = v36 + 5;
    while (1)
    {
      uint64_t v39 = (llvm::ValueAsMetadata *)(v38 - 3);
      if (v38) {
        unint64_t v40 = (llvm::ValueAsMetadata *)(v38 - 3);
      }
      else {
        unint64_t v40 = 0;
      }
      uint64_t v41 = v1186;
      if (v1187 == v1186)
      {
        int v42 = HIDWORD(v1188);
        uint64_t v43 = &v1187[8 * HIDWORD(v1188)];
        if (HIDWORD(v1188))
        {
          uint64_t v44 = 0;
          while (*(llvm::ValueAsMetadata **)&v1187[v44] != v40)
          {
            v44 += 8;
            if (8 * HIDWORD(v1188) == v44) {
              goto LABEL_52;
            }
          }
          uint64_t v43 = &v1187[v44];
        }
LABEL_52:
        uint64_t v41 = v1187;
      }
      else
      {
        int v45 = v1188 - 1;
        unsigned int v46 = (v1188 - 1) & ((v40 >> 4) ^ (v40 >> 9));
        uint64_t v43 = &v1187[8 * v46];
        uint64_t v47 = *(llvm::ValueAsMetadata **)v43;
        if (*(void *)v43 == -1)
        {
          uint64_t v48 = 0;
LABEL_78:
          if (v48) {
            uint64_t v43 = v48;
          }
          int v42 = HIDWORD(v1188);
          if (*(llvm::ValueAsMetadata **)v43 != v40) {
            uint64_t v43 = &v1187[8 * v1188];
          }
        }
        else
        {
          uint64_t v48 = 0;
          int v49 = 1;
          while (v47 != v40)
          {
            if (v48) {
              BOOL v50 = 0;
            }
            else {
              BOOL v50 = v47 == (llvm::ValueAsMetadata *)-2;
            }
            if (v50) {
              uint64_t v48 = v43;
            }
            unsigned int v51 = v46 + v49++;
            unsigned int v46 = v51 & v45;
            uint64_t v43 = &v1187[8 * (v51 & v45)];
            uint64_t v47 = *(llvm::ValueAsMetadata **)v43;
            if (*(void *)v43 == -1) {
              goto LABEL_78;
            }
          }
          int v42 = HIDWORD(v1188);
        }
      }
      uint64_t v52 = (void *)v38[1];
      if (v1187 == v41) {
        int v53 = v42;
      }
      else {
        int v53 = (int)v1188;
      }
      if (v43 != &v1187[8 * v53]) {
        goto LABEL_1244;
      }
      int v54 = *((unsigned __int8 *)v40 + 16);
      if (v54 == 85) {
        uint64_t v55 = (uint64_t **)v40;
      }
      else {
        uint64_t v55 = 0;
      }
      if (v38 && v54 == 85)
      {
        uint64_t v56 = *v55;
        if (*((unsigned __int8 *)*v55 + 8) - 7 < 0xFFFFFFFA) {
          goto LABEL_156;
        }
        v1191 = 0;
        v1192 = 0;
        v1191 = (uint64_t **)*(v55 - 8);
        v1192 = (llvm::Value *)*(v55 - 4);
        if (sub_1CB8436A4((uint64_t)&v1191))
        {
          uint64_t v57 = 0;
          uint64_t v58 = **(void **)v40;
          v1196 = &v1198;
          uint64_t v1197 = 0x200000000;
          uint64_t v1204 = v58;
          v1205 = &v1213;
          v1206 = &v1214;
          uint64_t v1207 = 0;
          int v1208 = 0;
          __int16 v1209 = 512;
          char v1210 = 7;
          v1202 = 0;
          v1203 = 0;
          uint64_t v1211 = 0;
          uint64_t v1212 = 0;
          v1213 = &unk_1F2616E88;
          v1214 = &unk_1F2617008;
          v1202 = (void *)*((void *)v40 + 5);
          v1203 = (void **)((char *)v40 + 24);
          unint64_t v59 = (unsigned __int8 *)*((void *)v40 + 6);
          v1183[0] = (uint64_t)v59;
          if (v59)
          {
            llvm::MetadataTracking::track((uint64_t)v1183, v59, 2);
            uint64_t v57 = v1183[0];
          }
          sub_1CB8461A4((uint64_t)&v1196, 0, v57);
          if (v1183[0])
          {
            int v167 = *(unsigned __int8 *)v1183[0];
            if ((v167 - 4) > 0x1E)
            {
              if ((v167 - 3) >= 0xFFFFFFFE) {
                uint64_t v499 = v1183[0];
              }
              else {
                uint64_t v499 = 0;
              }
              if ((v167 - 3) < 0xFFFFFFFE)
              {
                if (v167 == 3) {
                  *(void *)(v1183[0] + 8) = 0;
                }
                goto LABEL_67;
              }
              unint64_t v169 = v499 + 8;
            }
            else
            {
              if ((*(unsigned char *)(v1183[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v1183[0] + 12)) {
                goto LABEL_67;
              }
              uint64_t v168 = *(void *)(v1183[0] + 16);
              if ((v168 & 4) == 0) {
                goto LABEL_67;
              }
              unint64_t v169 = v168 & 0xFFFFFFFFFFFFFFF8;
              if (!v169) {
                goto LABEL_67;
              }
            }
            v1218 = (void **)v1183;
            sub_1CC5FA668(v169 + 16, &v1218);
          }
LABEL_67:
          uint64_t v60 = (llvm::Value *)*(v55 - 12);
          __int16 v1221 = 257;
          Select = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v1196, v60, (llvm::Value *)v1191, v1192, (const llvm::Twine *)&v1218, 0);
          __int16 v1221 = 257;
          uint64_t v62 = sub_1CB843944((uint64_t)&v1196, (uint64_t)Select, v56, (uint64_t)&v1218);
          llvm::Value::doRAUW(v40, v62, (llvm::Value *)1);
          unsigned int v63 = v1187;
          uint64_t v64 = HIDWORD(v1188);
          if (v1187 == v1186)
          {
            if (HIDWORD(v1188))
            {
              unsigned int v65 = 0;
              uint64_t v66 = 8 * HIDWORD(v1188);
              uint64_t v67 = (llvm::ValueAsMetadata **)v1187;
              while (*v67 != v40)
              {
                if (*v67 == (llvm::ValueAsMetadata *)-2) {
                  unsigned int v65 = v67;
                }
                ++v67;
                v66 -= 8;
                if (!v66)
                {
                  if (v65) {
                    goto LABEL_1218;
                  }
                  goto LABEL_75;
                }
              }
              goto LABEL_1241;
            }
LABEL_75:
            unsigned int v68 = v1188;
            if (HIDWORD(v1188) < v1188) {
              goto LABEL_738;
            }
          }
          else
          {
            unsigned int v68 = v1188;
          }
          if (3 * v68 <= 4 * (HIDWORD(v1188) - v1189))
          {
            if (v68 >= 0x40) {
              v68 *= 2;
            }
            else {
              unsigned int v68 = 128;
            }
          }
          else if (v68 - HIDWORD(v1188) >= v68 >> 3)
          {
LABEL_120:
            unsigned int v85 = v68 - 1;
            unsigned int v86 = (v68 - 1) & ((v40 >> 4) ^ (v40 >> 9));
            uint64_t v87 = (llvm::ValueAsMetadata **)&v63[v86];
            uint64_t v88 = *v87;
            if (*v87 == (llvm::ValueAsMetadata *)-1) {
              goto LABEL_1233;
            }
            uint64_t v89 = 0;
            int v90 = 1;
            while (v88 != v40)
            {
              if (v89) {
                BOOL v91 = 0;
              }
              else {
                BOOL v91 = v88 == (llvm::ValueAsMetadata *)-2;
              }
              if (v91) {
                uint64_t v89 = v87;
              }
              unsigned int v92 = v86 + v90++;
              unsigned int v86 = v92 & v85;
              uint64_t v87 = (llvm::ValueAsMetadata **)&v63[v92 & v85];
              uint64_t v88 = *v87;
              if (*v87 == (llvm::ValueAsMetadata *)-1) {
                goto LABEL_1234;
              }
            }
            goto LABEL_1241;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1186, v68);
          unsigned int v68 = v1188;
          unsigned int v63 = v1187;
          goto LABEL_120;
        }
        int v54 = *((unsigned __int8 *)v40 + 16);
      }
      if (v54 == 62) {
        uint64_t v69 = v40;
      }
      else {
        uint64_t v69 = 0;
      }
      if (!v38 || v54 != 62) {
        goto LABEL_132;
      }
      int v70 = *((_DWORD *)v69 + 5);
      uint64_t v71 = v70 & 0x7FFFFFF;
      uint64_t v72 = (v70 & 0x40000000) != 0
          ? (llvm::ValueAsMetadata *)*((void *)v69 - 1)
          : (llvm::ValueAsMetadata *)((char *)v69 - 32 * v71);
      uint64_t v73 = *((void *)v72 + 4 * (v71 - 1));
      unsigned int v74 = *(unsigned __int8 *)(v73 + 16);
      if (v73 && v74 >= 0x1C)
      {
        if (v74 == 67)
        {
          uint64_t v76 = *(unsigned __int8 **)(v73 - 32);
          unsigned int v74 = v76[16];
          if (v74 < 0x1C) {
            goto LABEL_156;
          }
          int v77 = 0;
        }
        else if (v74 == 68)
        {
          uint64_t v76 = *(unsigned __int8 **)(v73 - 32);
          unsigned int v74 = v76[16];
          if (v74 <= 0x1B) {
            goto LABEL_156;
          }
          int v77 = 1;
        }
        else
        {
          int v77 = 1;
          uint64_t v76 = (unsigned __int8 *)v73;
        }
        BOOL v1012 = v74 > 0x35;
        uint64_t v78 = (1 << v74) & 0x20220000000000;
        if (!v1012 && v78 != 0) {
          break;
        }
      }
LABEL_156:
      v1196 = 0;
      v1218 = &v1196;
      if (sub_1CC04C34C(&v1218, (uint64_t)v40))
      {
        uint64_t v105 = v1196;
        if (v1196)
        {
          uint64_t v106 = *((void *)v1196 + 1);
          if (v106)
          {
            if (!*(void *)(v106 + 8))
            {
              unsigned int v107 = 0;
              uint64_t v108 = **(void **)v40;
              v1196 = &v1198;
              uint64_t v1197 = 0x200000000;
              uint64_t v1204 = v108;
              v1205 = &v1213;
              v1206 = &v1214;
              uint64_t v1207 = 0;
              int v1208 = 0;
              __int16 v1209 = 512;
              char v1210 = 7;
              v1202 = 0;
              v1203 = 0;
              uint64_t v1211 = 0;
              uint64_t v1212 = 0;
              v1213 = &unk_1F2616E88;
              v1214 = &unk_1F2617008;
              v1202 = (void *)*((void *)v40 + 5);
              v1203 = (void **)((char *)v40 + 24);
              int v109 = (llvm::Value *)*((void *)v40 + 6);
              v1191 = (uint64_t **)v109;
              if (v109)
              {
                llvm::MetadataTracking::track((uint64_t)&v1191, (unsigned __int8 *)v109, 2);
                unsigned int v107 = (llvm::Value *)v1191;
              }
              sub_1CB8461A4((uint64_t)&v1196, 0, (uint64_t)v107);
              if (v1191)
              {
                int v434 = *(unsigned __int8 *)v1191;
                if ((v434 - 4) > 0x1E)
                {
                  if ((v434 - 3) >= 0xFFFFFFFE) {
                    long long v521 = (llvm::Value *)v1191;
                  }
                  else {
                    long long v521 = 0;
                  }
                  if ((v434 - 3) < 0xFFFFFFFE)
                  {
                    if (v434 == 3) {
                      v1191[1] = 0;
                    }
                    goto LABEL_163;
                  }
                  unint64_t v436 = (unint64_t)v521 + 8;
                }
                else
                {
                  if ((*((unsigned char *)v1191 + 1) & 0x7F) != 2 && !*((_DWORD *)v1191 + 3)) {
                    goto LABEL_163;
                  }
                  v435 = v1191[2];
                  if ((v435 & 4) == 0) {
                    goto LABEL_163;
                  }
                  unint64_t v436 = (unint64_t)v435 & 0xFFFFFFFFFFFFFFF8;
                  if (!v436) {
                    goto LABEL_163;
                  }
                }
                v1218 = (void **)&v1191;
                sub_1CC5FA668(v436 + 16, &v1218);
              }
LABEL_163:
              int v110 = *((unsigned __int8 *)v105 + 16);
              switch(v110)
              {
                case 5:
                  int v139 = *((unsigned __int16 *)v105 + 9);
                  if (v139 != 21)
                  {
                    if (v139 == 18)
                    {
                      int v140 = (uint64_t *)&v105[-8 * (v105[5] & 0x7FFFFFF)];
                      uint64_t v111 = *v140;
                      if (*v140)
                      {
                        uint64_t v112 = v140[4];
                        if (v112) {
                          goto LABEL_218;
                        }
                      }
                    }
                    goto LABEL_289;
                  }
                  uint64_t v173 = (uint64_t *)&v105[-8 * (v105[5] & 0x7FFFFFF)];
                  uint64_t v137 = *v173;
                  if (!*v173 || (uint64_t v138 = v173[4]) == 0)
                  {
LABEL_289:
                    int v174 = 1;
                    goto LABEL_290;
                  }
                  break;
                case 49:
                  uint64_t v137 = *((void *)v105 - 8);
                  if (!v137) {
                    goto LABEL_289;
                  }
                  uint64_t v138 = *((void *)v105 - 4);
                  if (!v138) {
                    goto LABEL_289;
                  }
                  break;
                case 46:
                  uint64_t v111 = *((void *)v105 - 8);
                  if (!v111) {
                    goto LABEL_289;
                  }
                  uint64_t v112 = *((void *)v105 - 4);
                  if (!v112) {
                    goto LABEL_289;
                  }
LABEL_218:
                  __int16 v1221 = 257;
                  uint64_t v141 = sub_1CB843FF8((uint64_t)&v1196, v111, (uint64_t)&v1218, 0);
                  __int16 v1221 = 257;
                  uint64_t v142 = (llvm::Value *)sub_1CB93098C((uint64_t)&v1196, (uint64_t)v141, v112, (llvm::Instruction *)v105, (uint64_t)&v1218);
                  if (!v142) {
                    goto LABEL_289;
                  }
LABEL_279:
                  llvm::Value::doRAUW(v40, v142, (llvm::Value *)1);
                  unsigned int v176 = v1187;
                  uint64_t v177 = HIDWORD(v1188);
                  if (v1187 == v1186)
                  {
                    if (HIDWORD(v1188))
                    {
                      uint64_t v178 = 0;
                      uint64_t v179 = 8 * HIDWORD(v1188);
                      uint64_t v180 = (llvm::ValueAsMetadata **)v1187;
                      while (*v180 != v40)
                      {
                        if (*v180 == (llvm::ValueAsMetadata *)-2) {
                          uint64_t v178 = v180;
                        }
                        ++v180;
                        v179 -= 8;
                        if (!v179)
                        {
                          if (!v178) {
                            goto LABEL_287;
                          }
                          *uint64_t v178 = v40;
                          --v1189;
                          break;
                        }
                      }
LABEL_815:
                      v505 = v1187;
                      uint64_t v506 = HIDWORD(v1188);
                      unsigned int v507 = v1188;
                      if (v1187 == v1186)
                      {
                        if (HIDWORD(v1188))
                        {
                          v508 = 0;
                          uint64_t v509 = 8 * HIDWORD(v1188);
                          uint64_t v510 = v1187;
                          while ((_DWORD *)*v510 != v105)
                          {
                            if (*v510 == -2) {
                              v508 = v510;
                            }
                            ++v510;
                            v509 -= 8;
                            if (!v509)
                            {
                              if (!v508) {
                                goto LABEL_823;
                              }
                              int v174 = 0;
                              void *v508 = v105;
                              --v1189;
                              goto LABEL_847;
                            }
                          }
                          goto LABEL_846;
                        }
LABEL_823:
                        if (v1188 > HIDWORD(v1188))
                        {
                          int v174 = 0;
                          ++HIDWORD(v1188);
                          *(void *)&v1187[8 * v506] = v105;
                          goto LABEL_847;
                        }
                      }
                      if (3 * (int)v1188 <= (4 * (HIDWORD(v1188) - v1189)))
                      {
                        if (v1188 >= 0x40) {
                          unsigned int v507 = 2 * v1188;
                        }
                        else {
                          unsigned int v507 = 128;
                        }
                      }
                      else if ((int)v1188 - HIDWORD(v1188) >= v1188 >> 3)
                      {
                        goto LABEL_827;
                      }
                      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1186, v507);
                      unsigned int v507 = v1188;
                      v505 = v1187;
LABEL_827:
                      unsigned int v511 = v507 - 1;
                      unsigned int v512 = (v507 - 1) & ((v105 >> 4) ^ (v105 >> 9));
                      long long v513 = &v505[8 * v512];
                      uint64_t v514 = *(_DWORD **)v513;
                      if (*(void *)v513 != -1)
                      {
                        long long v515 = 0;
                        int v516 = 1;
                        while (v514 != v105)
                        {
                          if (v515) {
                            BOOL v517 = 0;
                          }
                          else {
                            BOOL v517 = v514 == (_DWORD *)-2;
                          }
                          if (v517) {
                            long long v515 = (void **)v513;
                          }
                          unsigned int v518 = v512 + v516++;
                          unsigned int v512 = v518 & v511;
                          long long v513 = &v505[8 * (v518 & v511)];
                          uint64_t v514 = *(_DWORD **)v513;
                          if (*(void *)v513 == -1) {
                            goto LABEL_839;
                          }
                        }
                        goto LABEL_846;
                      }
                      long long v515 = 0;
LABEL_839:
                      if (v515) {
                        uint64_t v519 = v515;
                      }
                      else {
                        uint64_t v519 = (void **)v513;
                      }
                      if (*v519 == v105)
                      {
LABEL_846:
                        int v174 = 0;
                      }
                      else
                      {
                        if (*v519 == (void *)-2) {
                          --v1189;
                        }
                        else {
                          ++HIDWORD(v1188);
                        }
                        int v174 = 0;
                        *uint64_t v519 = v105;
                      }
LABEL_847:
                      char __p = 1;
LABEL_290:
                      if (v1196 == &v1198)
                      {
                        if (!v174) {
                          goto LABEL_1244;
                        }
                      }
                      else
                      {
                        free(v1196);
                        if (!v174) {
                          goto LABEL_1244;
                        }
                      }
                      goto LABEL_292;
                    }
LABEL_287:
                    unsigned int v181 = v1188;
                    if (HIDWORD(v1188) < v1188)
                    {
                      ++HIDWORD(v1188);
                      *(void *)&v1187[8 * v177] = v40;
                      goto LABEL_815;
                    }
                  }
                  else
                  {
                    unsigned int v181 = v1188;
                  }
                  if (3 * v181 <= 4 * (HIDWORD(v1188) - v1189))
                  {
                    if (v181 >= 0x40) {
                      v181 *= 2;
                    }
                    else {
                      unsigned int v181 = 128;
                    }
                  }
                  else if (v181 - HIDWORD(v1188) >= v181 >> 3)
                  {
                    goto LABEL_691;
                  }
                  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1186, v181);
                  unsigned int v181 = v1188;
                  unsigned int v176 = v1187;
LABEL_691:
                  unsigned int v437 = v181 - 1;
                  unsigned int v438 = (v181 - 1) & ((v40 >> 4) ^ (v40 >> 9));
                  v439 = &v176[8 * v438];
                  v440 = *(llvm::ValueAsMetadata **)v439;
                  if (*(void *)v439 == -1)
                  {
                    v441 = 0;
LABEL_808:
                    if (v441) {
                      uint64_t v504 = (llvm::ValueAsMetadata **)v441;
                    }
                    else {
                      uint64_t v504 = (llvm::ValueAsMetadata **)v439;
                    }
                    if (*v504 != v40)
                    {
                      if (*v504 == (llvm::ValueAsMetadata *)-2) {
                        --v1189;
                      }
                      else {
                        ++HIDWORD(v1188);
                      }
                      *uint64_t v504 = v40;
                    }
                  }
                  else
                  {
                    v441 = 0;
                    int v442 = 1;
                    while (v440 != v40)
                    {
                      if (v441) {
                        BOOL v443 = 0;
                      }
                      else {
                        BOOL v443 = v440 == (llvm::ValueAsMetadata *)-2;
                      }
                      if (v443) {
                        v441 = v439;
                      }
                      unsigned int v444 = v438 + v442++;
                      unsigned int v438 = v444 & v437;
                      v439 = &v176[8 * (v444 & v437)];
                      v440 = *(llvm::ValueAsMetadata **)v439;
                      if (*(void *)v439 == -1) {
                        goto LABEL_808;
                      }
                    }
                  }
                  goto LABEL_815;
                default:
                  goto LABEL_289;
              }
              if (*(unsigned char *)(v137 + 16) != 17 || (sub_1CB844168(v137, 1.0) & 1) == 0)
              {
                __int16 v1221 = 257;
                unint64_t v175 = sub_1CB843FF8((uint64_t)&v1196, v137, (uint64_t)&v1218, 0);
                __int16 v1221 = 257;
                uint64_t v142 = (llvm::Value *)sub_1CB9307D8((uint64_t)&v1196, (uint64_t)v175, v138, (llvm::Instruction *)v105, (uint64_t)&v1218);
                if (!v142) {
                  goto LABEL_289;
                }
                goto LABEL_279;
              }
              int v174 = 1;
              goto LABEL_290;
            }
          }
        }
      }
LABEL_292:
      int v182 = *((unsigned __int8 *)v40 + 16);
      if (v182 == 60) {
        uint64_t v183 = v40;
      }
      else {
        uint64_t v183 = 0;
      }
      if (v38 && v182 == 60)
      {
        uint64_t v184 = **((void **)v183 - 4);
        int v185 = *(_DWORD *)(v184 + 8);
        int v186 = v185;
        if ((v185 & 0xFE) == 0x12) {
          int v186 = *(_DWORD *)(**(void **)(v184 + 16) + 8);
        }
        uint64_t v187 = *(void *)v183;
        if ((v186 & 0xFFFFFF00) == 0x4000)
        {
          uint64_t v189 = sub_1CB83544C((uint64_t)v1182, *(void *)v183);
          if (v188 == 1) {
          if (((v189 + 7) & 0xFFFFFFFFFFFFFFF8) > 0x40)
          }
          {
            v1170 = v52;
            uint64_t v191 = sub_1CB83544C((uint64_t)v1182, v187);
            if (v190 == 1) {
            unint64_t v192 = 0;
            }
            uint64_t v193 = **(void **)v40;
            v1196 = &v1198;
            uint64_t v1197 = 0x200000000;
            uint64_t v1204 = v193;
            v1205 = &v1213;
            v1206 = &v1214;
            uint64_t v1207 = 0;
            int v1208 = 0;
            __int16 v1209 = 512;
            char v1210 = 7;
            v1202 = 0;
            v1203 = 0;
            uint64_t v1211 = 0;
            uint64_t v1212 = 0;
            v1213 = &unk_1F2616E88;
            v1214 = &unk_1F2617008;
            v1202 = (void *)*((void *)v40 + 5);
            v1203 = (void **)((char *)v40 + 24);
            uint64_t v194 = (llvm::Value *)*((void *)v40 + 6);
            v1191 = (uint64_t **)v194;
            if (v194)
            {
              llvm::MetadataTracking::track((uint64_t)&v1191, (unsigned __int8 *)v194, 2);
              unint64_t v192 = (llvm::Value *)v1191;
            }
            sub_1CB8461A4((uint64_t)&v1196, 0, (uint64_t)v192);
            if (v1191)
            {
              int v431 = *(unsigned __int8 *)v1191;
              if ((v431 - 4) > 0x1E)
              {
                if ((v431 - 3) >= 0xFFFFFFFE) {
                  long long v520 = (llvm::Value *)v1191;
                }
                else {
                  long long v520 = 0;
                }
                if ((v431 - 3) < 0xFFFFFFFE)
                {
                  if (v431 == 3) {
                    v1191[1] = 0;
                  }
                  goto LABEL_308;
                }
                unint64_t v433 = (unint64_t)v520 + 8;
              }
              else
              {
                if ((*((unsigned char *)v1191 + 1) & 0x7F) != 2 && !*((_DWORD *)v1191 + 3)) {
                  goto LABEL_308;
                }
                v432 = v1191[2];
                if ((v432 & 4) == 0) {
                  goto LABEL_308;
                }
                unint64_t v433 = (unint64_t)v432 & 0xFFFFFFFFFFFFFFF8;
                if (!v433) {
                  goto LABEL_308;
                }
              }
              v1218 = (void **)&v1191;
              sub_1CC5FA668(v433 + 16, &v1218);
            }
LABEL_308:
            uint64_t v195 = (unsigned __int8 *)*((void *)v183 - 4);
            unint64_t v196 = llvm::PointerType::get((llvm::PointerType *)(*(void *)v1204 + 1960), (llvm::Type *)0x40);
            __int16 v1195 = 257;
            if (*(void *)v195 != v196)
            {
              if (v195[16] <= 0x14u)
              {
                uint64_t v274 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v1205 + 28))(v1205, 49, v195, v196);
                uint64_t v195 = (unsigned __int8 *)v274;
                if (v274)
                {
                  if (*(unsigned __int8 *)(v274 + 16) >= 0x1Cu)
                  {
                    (*((void (**)(void **, uint64_t, uint64_t ***, void *, void **))*v1206 + 2))(v1206, v274, &v1191, v1202, v1203);
                    if (v1197)
                    {
                      v925 = (llvm::MDNode **)v1196;
                      v926 = (llvm::MDNode **)((char *)v1196 + 16 * v1197);
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v195, *(_DWORD *)v925, v925[1]);
                        v925 += 2;
                      }
                      while (v925 != v926);
                    }
                  }
                }
              }
              else
              {
                __int16 v1221 = 257;
                uint64_t v195 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v195, v196, (const char **)&v1218, 0);
                (*((void (**)(void **, unsigned __int8 *, uint64_t ***, void *, void **))*v1206 + 2))(v1206, v195, &v1191, v1202, v1203);
                if (v1197)
                {
                  long long v197 = (llvm::MDNode **)v1196;
                  long long v198 = (llvm::MDNode **)((char *)v1196 + 16 * v1197);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v195, *(_DWORD *)v197, v197[1]);
                    v197 += 2;
                  }
                  while (v197 != v198);
                }
              }
            }
            unint64_t v275 = v191 + 7;
            llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(void *)v1204 + 1960), (llvm::Type *)((unint64_t)(v191 + 7) >> 5));
            uint64_t v278 = (unsigned __int8 *)llvm::UndefValue::get(v276, v277);
            if (((unint64_t)(v191 + 7) >> 5))
            {
              uint64_t v279 = 0;
              uint64_t v280 = (v275 >> 5);
              do
              {
                uint64_t v281 = *(void *)v1204 + 1960;
                __int16 v1221 = 257;
                int v282 = sub_1CB844364((uint64_t *)&v1196, v281, (const llvm::APInt *)v195, v279, (uint64_t)&v1218);
                uint64_t v283 = (llvm::Type *)(*(void *)v1204 + 1960);
                __int16 v1195 = 257;
                char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v1202[7] + 40) + 272), v283, 1);
                uint64_t v285 = operator new(0x60uLL);
                v285[13] = v285[13] & 0x38000000 | 1;
                uint64_t v286 = (llvm::Instruction *)(v285 + 8);
                *(void *)uint64_t v285 = 0;
                *((void *)v285 + 1) = 0;
                *((void *)v285 + 2) = 0;
                *((void *)v285 + 3) = v285 + 8;
                __int16 v1221 = 257;
                llvm::LoadInst::LoadInst((llvm::Value *)(v285 + 8), (uint64_t)v283, (uint64_t)v282, (const char **)&v1218, 0, Alignment, 0);
                (*((void (**)(void **, llvm::Instruction *, uint64_t ***, void *, void **))*v1206 + 2))(v1206, v286, &v1191, v1202, v1203);
                if (v1197)
                {
                  BOOL v292 = (llvm::MDNode **)v1196;
                  BOOL v293 = (llvm::MDNode **)((char *)v1196 + 16 * v1197);
                  do
                  {
                    llvm::Instruction::setMetadata(v286, *(_DWORD *)v292, v292[1]);
                    v292 += 2;
                  }
                  while (v292 != v293);
                }
                unsigned int v288 = *(llvm::ConstantInt **)(*(void *)v1204 + 1960);
                unsigned int v289 = *(_DWORD *)(*(void *)v1204 + 1968);
                LODWORD(v1219) = v289 >> 8;
                if (v289 >> 8 > 0x40) {
                  operator new[]();
                }
                if (v289 <= 0xFF) {
                  unint64_t v290 = 0;
                }
                else {
                  unint64_t v290 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v289) + 63);
                }
                v1218 = (void **)(v290 & v279);
                uint64_t v291 = (unsigned __int8 *)llvm::ConstantInt::get(v288, (llvm::LLVMContext *)&v1218, v287);
                if (v1219 >= 0x41 && v1218) {
                  MEMORY[0x1D25D9CB0](v1218, 0x1000C8000313F17);
                }
                __int16 v1221 = 257;
                uint64_t v278 = (unsigned __int8 *)sub_1CB84478C((uint64_t)&v1196, v278, (unsigned __int8 *)v286, v291, (uint64_t)&v1218);
                ++v279;
              }
              while (v279 != v280);
            }
            __int16 v1195 = 257;
            if (*(void *)v278 != v187)
            {
              int v37 = v1169;
              uint64_t v52 = v1170;
              if (v278[16] > 0x14u)
              {
                __int16 v1221 = 257;
                uint64_t v278 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v278, v187, (const char **)&v1218, 0);
                (*((void (**)(void **, unsigned __int8 *, uint64_t ***, void *, void **))*v1206 + 2))(v1206, v278, &v1191, v1202, v1203);
                if (v1197)
                {
                  unsigned int v294 = (llvm::MDNode **)v1196;
                  unsigned int v295 = (llvm::MDNode **)((char *)v1196 + 16 * v1197);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v278, *(_DWORD *)v294, v294[1]);
                    v294 += 2;
                  }
                  while (v294 != v295);
                }
LABEL_455:
                llvm::Value::doRAUW(v40, (llvm::Value *)v278, (llvm::Value *)1);
                unsigned int v63 = v1187;
                uint64_t v64 = HIDWORD(v1188);
                if (v1187 == v1186)
                {
                  if (HIDWORD(v1188))
                  {
                    unsigned int v65 = 0;
                    uint64_t v297 = 8 * HIDWORD(v1188);
                    unsigned int v298 = (llvm::ValueAsMetadata **)v1187;
                    while (*v298 != v40)
                    {
                      if (*v298 == (llvm::ValueAsMetadata *)-2) {
                        unsigned int v65 = v298;
                      }
                      ++v298;
                      v297 -= 8;
                      if (!v297)
                      {
                        if (v65) {
                          goto LABEL_1218;
                        }
                        goto LABEL_463;
                      }
                    }
                    goto LABEL_1241;
                  }
LABEL_463:
                  unsigned int v299 = v1188;
                  if (HIDWORD(v1188) < v1188) {
                    goto LABEL_738;
                  }
                }
                else
                {
                  unsigned int v299 = v1188;
                }
                if (3 * v299 <= 4 * (HIDWORD(v1188) - v1189))
                {
                  if (v299 >= 0x40) {
                    v299 *= 2;
                  }
                  else {
                    unsigned int v299 = 128;
                  }
                }
                else if (v299 - HIDWORD(v1188) >= v299 >> 3)
                {
LABEL_468:
                  unsigned int v300 = v299 - 1;
                  unsigned int v301 = (v299 - 1) & ((v40 >> 4) ^ (v40 >> 9));
                  uint64_t v87 = (llvm::ValueAsMetadata **)&v63[v301];
                  uint64_t v302 = *v87;
                  if (*v87 == (llvm::ValueAsMetadata *)-1) {
                    goto LABEL_1233;
                  }
                  uint64_t v89 = 0;
                  int v303 = 1;
                  while (v302 != v40)
                  {
                    if (v89) {
                      BOOL v304 = 0;
                    }
                    else {
                      BOOL v304 = v302 == (llvm::ValueAsMetadata *)-2;
                    }
                    if (v304) {
                      uint64_t v89 = v87;
                    }
                    unsigned int v305 = v301 + v303++;
                    unsigned int v301 = v305 & v300;
                    uint64_t v87 = (llvm::ValueAsMetadata **)&v63[v305 & v300];
                    uint64_t v302 = *v87;
                    if (*v87 == (llvm::ValueAsMetadata *)-1) {
                      goto LABEL_1234;
                    }
                  }
                  goto LABEL_1241;
                }
                llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1186, v299);
                unsigned int v299 = v1188;
                unsigned int v63 = v1187;
                goto LABEL_468;
              }
              uint64_t v278 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v1205
                                         + 28))(v1205, 49, v278, v187);
              if (v278) {
                BOOL v296 = v278[16] >= 0x1Cu;
              }
              else {
                BOOL v296 = 0;
              }
              if (!v296) {
                goto LABEL_455;
              }
              (*((void (**)(void **, unsigned __int8 *, uint64_t ***, void *, void **))*v1206 + 2))(v1206, v278, &v1191, v1202, v1203);
              if (v1197)
              {
                v939 = (llvm::MDNode **)v1196;
                v940 = (llvm::MDNode **)((char *)v1196 + 16 * v1197);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v278, *(_DWORD *)v939, v939[1]);
                  v939 += 2;
                }
                while (v939 != v940);
              }
            }
            int v37 = v1169;
            uint64_t v52 = v1170;
            goto LABEL_455;
          }
          uint64_t v184 = **((void **)v183 - 4);
          int v185 = *(_DWORD *)(v184 + 8);
        }
        if ((v185 & 0xFE) == 0x12) {
          int v185 = *(_DWORD *)(**(void **)(v184 + 16) + 8);
        }
        if ((v185 & 0xFFFFFF00) == 0x4000
          && (*(_DWORD *)(v187 + 8) & 0xFE) == 0x12
          && *(_DWORD *)(*(void *)(v187 + 24) + 8) == 2061
          && *(_DWORD *)(v187 + 32) == 3)
        {
          int v199 = 0;
          uint64_t v200 = **(void **)v40;
          v1196 = &v1198;
          uint64_t v1197 = 0x200000000;
          uint64_t v1204 = v200;
          v1205 = &v1213;
          v1206 = &v1214;
          uint64_t v1207 = 0;
          int v1208 = 0;
          __int16 v1209 = 512;
          char v1210 = 7;
          v1202 = 0;
          v1203 = 0;
          uint64_t v1211 = 0;
          uint64_t v1212 = 0;
          v1213 = &unk_1F2616E88;
          v1214 = &unk_1F2617008;
          v1202 = (void *)*((void *)v40 + 5);
          v1203 = (void **)((char *)v40 + 24);
          unsigned int v201 = (llvm::Value *)*((void *)v40 + 6);
          v1191 = (uint64_t **)v201;
          if (v201)
          {
            llvm::MetadataTracking::track((uint64_t)&v1191, (unsigned __int8 *)v201, 2);
            int v199 = (llvm::Value *)v1191;
          }
          sub_1CB8461A4((uint64_t)&v1196, 0, (uint64_t)v199);
          if (v1191)
          {
            int v549 = *(unsigned __int8 *)v1191;
            if ((v549 - 4) > 0x1E)
            {
              if ((v549 - 3) >= 0xFFFFFFFE) {
                v558 = (llvm::Value *)v1191;
              }
              else {
                v558 = 0;
              }
              if ((v549 - 3) < 0xFFFFFFFE)
              {
                if (v549 == 3) {
                  v1191[1] = 0;
                }
                goto LABEL_324;
              }
              unint64_t v551 = (unint64_t)v558 + 8;
            }
            else
            {
              if ((*((unsigned char *)v1191 + 1) & 0x7F) != 2 && !*((_DWORD *)v1191 + 3)) {
                goto LABEL_324;
              }
              v550 = v1191[2];
              if ((v550 & 4) == 0) {
                goto LABEL_324;
              }
              unint64_t v551 = (unint64_t)v550 & 0xFFFFFFFFFFFFFFF8;
              if (!v551) {
                goto LABEL_324;
              }
            }
            v1218 = (void **)&v1191;
            sub_1CC5FA668(v551 + 16, &v1218);
          }
LABEL_324:
          v1171 = v52;
          uint64_t v202 = (llvm::PointerType *)v187;
          if ((*(_DWORD *)(v187 + 8) & 0xFE) == 0x12) {
            uint64_t v202 = **(llvm::PointerType ***)(v187 + 16);
          }
          uint64_t v203 = **((void **)v183 - 4);
          unsigned int v204 = *(_DWORD *)(v203 + 8);
          if ((v204 & 0xFE) == 0x12) {
            unsigned int v204 = *(_DWORD *)(**(void **)(v203 + 16) + 8);
          }
          unint64_t v205 = llvm::PointerType::get(v202, (llvm::Type *)(v204 >> 8));
          uint64_t v206 = (unsigned __int8 *)*((void *)v183 - 4);
          __int16 v1195 = 257;
          if (*(void *)v206 == v205) {
            goto LABEL_655;
          }
          if (v206[16] > 0x14u)
          {
            unsigned int v207 = (llvm::UndefValue *)v187;
            __int16 v1221 = 257;
            uint64_t v206 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v206, v205, (const char **)&v1218, 0);
            (*((void (**)(void **, unsigned __int8 *, uint64_t ***, void *, void **))*v1206 + 2))(v1206, v206, &v1191, v1202, v1203);
            if (v1197)
            {
              uint64_t v208 = (llvm::MDNode **)v1196;
              unsigned int v209 = (llvm::MDNode **)((char *)v1196 + 16 * v1197);
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v206, *(_DWORD *)v208, v208[1]);
                v208 += 2;
              }
              while (v208 != v209);
            }
            goto LABEL_715;
          }
          uint64_t v428 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v1205 + 28))(v1205, 49, v206, v205);
          uint64_t v206 = (unsigned __int8 *)v428;
          if (!v428)
          {
LABEL_655:
            unsigned int v207 = (llvm::UndefValue *)v187;
            goto LABEL_715;
          }
          unsigned int v207 = (llvm::UndefValue *)v187;
          if (*(unsigned __int8 *)(v428 + 16) >= 0x1Cu)
          {
            (*((void (**)(void **, uint64_t, uint64_t ***, void *, void **))*v1206 + 2))(v1206, v428, &v1191, v1202, v1203);
            if (v1197)
            {
              v937 = (llvm::MDNode **)v1196;
              v938 = (llvm::MDNode **)((char *)v1196 + 16 * v1197);
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v206, *(_DWORD *)v937, v937[1]);
                v937 += 2;
              }
              while (v937 != v938);
            }
          }
LABEL_715:
          __int16 v1221 = 257;
          uint64_t v451 = sub_1CB844364((uint64_t *)&v1196, (uint64_t)v202, (const llvm::APInt *)v206, 2, (uint64_t)&v1218);
          __int16 v1195 = 257;
          uint64_t v452 = operator new(0x60uLL);
          v452[13] = v452[13] & 0x38000000 | 1;
          int v453 = (llvm::Instruction *)(v452 + 8);
          *(void *)uint64_t v452 = 0;
          *((void *)v452 + 1) = 0;
          *((void *)v452 + 2) = 0;
          *((void *)v452 + 3) = v452 + 8;
          __int16 v1221 = 257;
          llvm::LoadInst::LoadInst((llvm::Value *)(v452 + 8), (uint64_t)v202, (uint64_t)v451, (const char **)&v1218, 0, 0, 0);
          (*((void (**)(void **, llvm::Instruction *, uint64_t ***, void *, void **))*v1206 + 2))(v1206, v453, &v1191, v1202, v1203);
          if (v1197)
          {
            long long v522 = (llvm::MDNode **)v1196;
            v523 = (llvm::MDNode **)((char *)v1196 + 16 * v1197);
            do
            {
              llvm::Instruction::setMetadata(v453, *(_DWORD *)v522, v522[1]);
              v522 += 2;
            }
            while (v522 != v523);
          }
          llvm::FixedVectorType::get(v202, (llvm::Type *)2);
          uint64_t v455 = (uint64_t)v454;
          uint64_t v456 = **((void **)v183 - 4);
          unsigned int v457 = *(_DWORD *)(v456 + 8);
          if ((v457 & 0xFE) == 0x12) {
            unsigned int v457 = *(_DWORD *)(**(void **)(v456 + 16) + 8);
          }
          unint64_t v458 = llvm::PointerType::get(v454, (llvm::Type *)(v457 >> 8));
          uint64_t v459 = (unsigned __int8 *)*((void *)v183 - 4);
          __int16 v1195 = 257;
          if (*(void *)v459 != v458)
          {
            if (v459[16] <= 0x14u)
            {
              uint64_t v459 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v1205
                                         + 28))(v1205, 49, v459, v458);
              if (v459) {
                BOOL v462 = v459[16] >= 0x1Cu;
              }
              else {
                BOOL v462 = 0;
              }
              if (v462)
              {
                (*((void (**)(void **, unsigned __int8 *, uint64_t ***, void *, void **))*v1206 + 2))(v1206, v459, &v1191, v1202, v1203);
                if (v1197)
                {
                  v935 = (llvm::MDNode **)v1196;
                  v936 = (llvm::MDNode **)((char *)v1196 + 16 * v1197);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v459, *(_DWORD *)v935, v935[1]);
                    v935 += 2;
                  }
                  while (v935 != v936);
                }
              }
            }
            else
            {
              __int16 v1221 = 257;
              uint64_t v459 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v459, v458, (const char **)&v1218, 0);
              (*((void (**)(void **, unsigned __int8 *, uint64_t ***, void *, void **))*v1206 + 2))(v1206, v459, &v1191, v1202, v1203);
              if (v1197)
              {
                char v460 = (llvm::MDNode **)v1196;
                int v461 = (llvm::MDNode **)((char *)v1196 + 16 * v1197);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v459, *(_DWORD *)v460, v460[1]);
                  v460 += 2;
                }
                while (v460 != v461);
              }
            }
          }
          unint64_t v463 = *((unsigned __int16 *)v183 + 9);
          __int16 v1195 = 257;
          v464 = operator new(0x60uLL);
          v464[13] = v464[13] & 0x38000000 | 1;
          uint64_t v465 = (llvm::Instruction *)(v464 + 8);
          *(void *)v464 = 0;
          *((void *)v464 + 1) = 0;
          *((void *)v464 + 2) = 0;
          *((void *)v464 + 3) = v464 + 8;
          __int16 v1221 = 257;
          llvm::LoadInst::LoadInst((llvm::Value *)(v464 + 8), v455, (uint64_t)v459, (const char **)&v1218, 0, (v463 >> 1) & 0x3F, 0);
          (*((void (**)(void **, llvm::Instruction *, uint64_t ***, void *, void **))*v1206 + 2))(v1206, v465, &v1191, v1202, v1203);
          if (v1197)
          {
            uint64_t v524 = (llvm::MDNode **)v1196;
            v525 = (llvm::MDNode **)((char *)v1196 + 16 * v1197);
            do
            {
              llvm::Instruction::setMetadata(v465, *(_DWORD *)v524, v524[1]);
              v524 += 2;
            }
            while (v524 != v525);
          }
          BOOL v466 = (llvm::ConstantInt *)(***(void ***)v40 + 1960);
          unsigned int v467 = (unsigned __int8 *)llvm::ConstantInt::get(v466, 0, 0);
          __int16 v1221 = 257;
          BOOL v468 = (unsigned __int8 *)sub_1CB8445F4((uint64_t)&v1196, (unsigned __int8 *)v465, v467, (uint64_t)&v1218);
          v469 = (unsigned __int8 *)llvm::ConstantInt::get(v466, 1uLL, 0);
          __int16 v1221 = 257;
          uint64_t v470 = (unsigned __int8 *)sub_1CB8445F4((uint64_t)&v1196, (unsigned __int8 *)v465, v469, (uint64_t)&v1218);
          v472 = (unsigned __int8 *)llvm::UndefValue::get(v207, v471);
          __int16 v1221 = 257;
          uint64_t v473 = (unsigned __int8 *)sub_1CB84478C((uint64_t)&v1196, v472, v468, v467, (uint64_t)&v1218);
          __int16 v1221 = 257;
          uint64_t v474 = (unsigned __int8 *)sub_1CB84478C((uint64_t)&v1196, v473, v470, v469, (uint64_t)&v1218);
          uint64_t v475 = (unsigned __int8 *)llvm::ConstantInt::get(v466, 2uLL, 0);
          __int16 v1221 = 257;
          uint64_t v476 = sub_1CB84478C((uint64_t)&v1196, v474, (unsigned __int8 *)v453, v475, (uint64_t)&v1218);
          llvm::Value::doRAUW(v40, v476, (llvm::Value *)1);
          unsigned int v63 = v1187;
          uint64_t v64 = HIDWORD(v1188);
          if (v1187 == v1186)
          {
            int v37 = v1169;
            uint64_t v52 = v1171;
            if (HIDWORD(v1188))
            {
              unsigned int v65 = 0;
              uint64_t v477 = 8 * HIDWORD(v1188);
              unsigned int v478 = (llvm::ValueAsMetadata **)v1187;
              while (*v478 != v40)
              {
                if (*v478 == (llvm::ValueAsMetadata *)-2) {
                  unsigned int v65 = v478;
                }
                ++v478;
                v477 -= 8;
                if (!v477)
                {
                  if (v65) {
                    goto LABEL_1218;
                  }
                  goto LABEL_737;
                }
              }
              goto LABEL_1241;
            }
LABEL_737:
            unsigned int v479 = v1188;
            if (HIDWORD(v1188) < v1188) {
              goto LABEL_738;
            }
          }
          else
          {
            unsigned int v479 = v1188;
            int v37 = v1169;
            uint64_t v52 = v1171;
          }
          if (3 * v479 <= 4 * (HIDWORD(v1188) - v1189))
          {
            if (v479 >= 0x40) {
              v479 *= 2;
            }
            else {
              unsigned int v479 = 128;
            }
          }
          else if (v479 - HIDWORD(v1188) >= v479 >> 3)
          {
LABEL_742:
            unsigned int v480 = v479 - 1;
            unsigned int v481 = (v479 - 1) & ((v40 >> 4) ^ (v40 >> 9));
            uint64_t v87 = (llvm::ValueAsMetadata **)&v63[v481];
            int v482 = *v87;
            if (*v87 == (llvm::ValueAsMetadata *)-1) {
              goto LABEL_1233;
            }
            uint64_t v89 = 0;
            int v483 = 1;
            while (v482 != v40)
            {
              if (v89) {
                BOOL v484 = 0;
              }
              else {
                BOOL v484 = v482 == (llvm::ValueAsMetadata *)-2;
              }
              if (v484) {
                uint64_t v89 = v87;
              }
              unsigned int v485 = v481 + v483++;
              unsigned int v481 = v485 & v480;
              uint64_t v87 = (llvm::ValueAsMetadata **)&v63[v485 & v480];
              int v482 = *v87;
              if (*v87 == (llvm::ValueAsMetadata *)-1) {
                goto LABEL_1234;
              }
            }
            goto LABEL_1241;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1186, v479);
          unsigned int v479 = v1188;
          unsigned int v63 = v1187;
          goto LABEL_742;
        }
        if (*(unsigned char *)(*(void *)v183 + 8) == 13)
        {
          unint64_t v211 = sub_1CB83544C((uint64_t)v1182, *(void *)v183);
          if (v210 == 1) {
          if (v211 >= 0x41)
          }
          {
            uint64_t v212 = 0;
            uint64_t v213 = **(void **)v40;
            v1196 = &v1198;
            uint64_t v1197 = 0x200000000;
            uint64_t v1204 = v213;
            v1205 = &v1213;
            v1206 = &v1214;
            uint64_t v1207 = 0;
            int v1208 = 0;
            __int16 v1209 = 512;
            char v1210 = 7;
            v1202 = 0;
            v1203 = 0;
            uint64_t v1211 = 0;
            uint64_t v1212 = 0;
            v1213 = &unk_1F2616E88;
            v1214 = &unk_1F2617008;
            v1202 = (void *)*((void *)v40 + 5);
            v1203 = (void **)((char *)v40 + 24);
            int v214 = (llvm::Value *)*((void *)v40 + 6);
            v1191 = (uint64_t **)v214;
            if (v214)
            {
              llvm::MetadataTracking::track((uint64_t)&v1191, (unsigned __int8 *)v214, 2);
              uint64_t v212 = (llvm::Value *)v1191;
            }
            sub_1CB8461A4((uint64_t)&v1196, 0, (uint64_t)v212);
            if (v1191)
            {
              int v445 = *(unsigned __int8 *)v1191;
              if ((v445 - 4) > 0x1E)
              {
                if ((v445 - 3) >= 0xFFFFFFFE) {
                  v534 = (llvm::Value *)v1191;
                }
                else {
                  v534 = 0;
                }
                if ((v445 - 3) < 0xFFFFFFFE)
                {
                  if (v445 == 3) {
                    v1191[1] = 0;
                  }
                  goto LABEL_341;
                }
                unint64_t v447 = (unint64_t)v534 + 8;
              }
              else
              {
                if ((*((unsigned char *)v1191 + 1) & 0x7F) != 2 && !*((_DWORD *)v1191 + 3)) {
                  goto LABEL_341;
                }
                v446 = v1191[2];
                if ((v446 & 4) == 0) {
                  goto LABEL_341;
                }
                unint64_t v447 = (unint64_t)v446 & 0xFFFFFFFFFFFFFFF8;
                if (!v447) {
                  goto LABEL_341;
                }
              }
              v1218 = (void **)&v1191;
              sub_1CC5FA668(v447 + 16, &v1218);
            }
LABEL_341:
            v1172 = v52;
            unsigned int v215 = *(_DWORD *)(*(void *)v183 + 8) >> 8;
            LODWORD(v216) = 8 * (1 << ((unint64_t)*((unsigned __int16 *)v183 + 9) >> 1));
            if (v216 >= 0x40) {
              unint64_t v216 = 64;
            }
            else {
              unint64_t v216 = v216;
            }
            uint64_t v217 = 1 << ~__clz(v216);
            if (v216) {
              uint64_t v217 = v217;
            }
            else {
              uint64_t v217 = 0;
            }
            do
            {
              int v218 = (llvm::LLVMContext *)v217;
              uint64_t v219 = (llvm::Type *)(v215 / v217);
              unsigned int v220 = v215 % v217;
              if (v217 < 9) {
                break;
              }
              uint64_t v217 = v217 >> 1;
            }
            while (v220);
            if (v220) {
              goto LABEL_665;
            }
            uint64_t v221 = **((void **)v183 - 4);
            unsigned int v222 = *(_DWORD *)(v221 + 8);
            if ((v222 & 0xFE) == 0x12) {
              unsigned int v222 = *(_DWORD *)(**(void **)(v221 + 16) + 8);
            }
            uint64_t v223 = (llvm::Type *)(v222 >> 8);
            __int16 v224 = (llvm::PointerType *)llvm::IntegerType::get(**(llvm::IntegerType ***)v183, v218);
            unint64_t v225 = llvm::PointerType::get(v224, v223);
            __pa = (uint64_t *)v183;
            char v226 = (unsigned __int8 *)*((void *)v183 - 4);
            __int16 v1195 = 257;
            if (*(void *)v226 != v225)
            {
              if (v226[16] <= 0x14u)
              {
                char v226 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v1205
                                           + 28))(v1205, 49, v226, v225);
                if (v226) {
                  BOOL v359 = v226[16] >= 0x1Cu;
                }
                else {
                  BOOL v359 = 0;
                }
                if (v359)
                {
                  (*((void (**)(void **, unsigned __int8 *, uint64_t ***, void *, void **))*v1206 + 2))(v1206, v226, &v1191, v1202, v1203);
                  if (v1197)
                  {
                    v941 = (llvm::MDNode **)v1196;
                    v942 = (llvm::MDNode **)((char *)v1196 + 16 * v1197);
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v226, *(_DWORD *)v941, v941[1]);
                      v941 += 2;
                    }
                    while (v941 != v942);
                  }
                }
              }
              else
              {
                __int16 v1221 = 257;
                char v226 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v226, v225, (const char **)&v1218, 0);
                (*((void (**)(void **, unsigned __int8 *, uint64_t ***, void *, void **))*v1206 + 2))(v1206, v226, &v1191, v1202, v1203);
                if (v1197)
                {
                  uint64_t v227 = (llvm::MDNode **)v1196;
                  uint64_t v228 = (llvm::MDNode **)((char *)v1196 + 16 * v1197);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v226, *(_DWORD *)v227, v227[1]);
                    v227 += 2;
                  }
                  while (v227 != v228);
                }
              }
            }
            llvm::FixedVectorType::get(v224, v219);
            uint64_t v362 = (unsigned __int8 *)llvm::UndefValue::get(v360, v361);
            if (v218 <= v215)
            {
              uint64_t v366 = 0;
              if (v219 <= 1) {
                uint64_t v367 = 1;
              }
              else {
                uint64_t v367 = v219;
              }
              do
              {
                __int16 v1221 = 257;
                int v368 = sub_1CB930CF4((uint64_t *)&v1196, (uint64_t)v224, (const llvm::APInt *)v226, v366, (uint64_t)&v1218);
                __int16 v1195 = 257;
                char v369 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v1202[7] + 40) + 272), v224, 1);
                uint64_t v370 = operator new(0x60uLL);
                v370[13] = v370[13] & 0x38000000 | 1;
                v371 = (llvm::Instruction *)(v370 + 8);
                *(void *)uint64_t v370 = 0;
                *((void *)v370 + 1) = 0;
                *((void *)v370 + 2) = 0;
                *((void *)v370 + 3) = v370 + 8;
                __int16 v1221 = 257;
                llvm::LoadInst::LoadInst((llvm::Value *)(v370 + 8), (uint64_t)v224, (uint64_t)v368, (const char **)&v1218, 0, v369, 0);
                (*((void (**)(void **, llvm::Instruction *, uint64_t ***, void *, void **))*v1206 + 2))(v1206, v371, &v1191, v1202, v1203);
                if (v1197)
                {
                  uint64_t v377 = (llvm::MDNode **)v1196;
                  int v378 = (llvm::MDNode **)((char *)v1196 + 16 * v1197);
                  do
                  {
                    llvm::Instruction::setMetadata(v371, *(_DWORD *)v377, v377[1]);
                    v377 += 2;
                  }
                  while (v377 != v378);
                }
                __int16 v1221 = 257;
                int v373 = *(llvm::ConstantInt **)(*(void *)v1204 + 1984);
                unsigned int v374 = *(_DWORD *)(*(void *)v1204 + 1992);
                LODWORD(v1192) = v374 >> 8;
                if (v374 >> 8 > 0x40) {
                  operator new[]();
                }
                if (v374 <= 0xFF) {
                  unint64_t v375 = 0;
                }
                else {
                  unint64_t v375 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v374) + 63);
                }
                v1191 = (uint64_t **)(v375 & v366);
                v376 = (unsigned __int8 *)llvm::ConstantInt::get(v373, (llvm::LLVMContext *)&v1191, v372);
                if (v1192 >= 0x41 && v1191) {
                  MEMORY[0x1D25D9CB0](v1191, 0x1000C8000313F17);
                }
                uint64_t v362 = (unsigned __int8 *)sub_1CB84478C((uint64_t)&v1196, v362, (unsigned __int8 *)v371, v376, (uint64_t)&v1218);
                ++v366;
              }
              while (v366 != v367);
            }
            uint64_t v363 = *__pa;
            __int16 v1195 = 257;
            if (*(void *)v362 != v363)
            {
              int v37 = v1169;
              if (v362[16] > 0x14u)
              {
                __int16 v1221 = 257;
                uint64_t v362 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v362, v363, (const char **)&v1218, 0);
                (*((void (**)(void **, unsigned __int8 *, uint64_t ***, void *, void **))*v1206 + 2))(v1206, v362, &v1191, v1202, v1203);
                if (v1197)
                {
                  unsigned int v364 = (llvm::MDNode **)v1196;
                  int v365 = (llvm::MDNode **)((char *)v1196 + 16 * v1197);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v362, *(_DWORD *)v364, v364[1]);
                    v364 += 2;
                  }
                  while (v364 != v365);
                }
LABEL_565:
                llvm::Value::doRAUW(v40, (llvm::Value *)v362, (llvm::Value *)1);
                uint64_t v380 = v1187;
                uint64_t v381 = HIDWORD(v1188);
                if (v1187 == v1186)
                {
                  if (HIDWORD(v1188))
                  {
                    uint64_t v382 = 0;
                    uint64_t v383 = 8 * HIDWORD(v1188);
                    v384 = (llvm::ValueAsMetadata **)v1187;
                    while (*v384 != v40)
                    {
                      if (*v384 == (llvm::ValueAsMetadata *)-2) {
                        uint64_t v382 = v384;
                      }
                      ++v384;
                      v383 -= 8;
                      if (!v383)
                      {
                        if (v382) {
                          goto LABEL_866;
                        }
                        goto LABEL_573;
                      }
                    }
                    goto LABEL_664;
                  }
LABEL_573:
                  unsigned int v385 = v1188;
                  if (HIDWORD(v1188) < v1188) {
                    goto LABEL_599;
                  }
                }
                else
                {
                  unsigned int v385 = v1188;
                }
                if (3 * v385 <= 4 * (HIDWORD(v1188) - v1189))
                {
                  if (v385 >= 0x40) {
                    v385 *= 2;
                  }
                  else {
                    unsigned int v385 = 128;
                  }
                }
                else if (v385 - HIDWORD(v1188) >= v385 >> 3)
                {
                  goto LABEL_629;
                }
                llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1186, v385);
                unsigned int v385 = v1188;
                uint64_t v380 = v1187;
LABEL_629:
                unsigned int v414 = v385 - 1;
                unsigned int v415 = (v385 - 1) & ((v40 >> 4) ^ (v40 >> 9));
                uint64_t v416 = (llvm::ValueAsMetadata **)&v380[v415];
                uint64_t v417 = *v416;
                if (*v416 != (llvm::ValueAsMetadata *)-1)
                {
                  int v418 = 0;
                  int v419 = 1;
                  while (v417 != v40)
                  {
                    if (v418) {
                      BOOL v420 = 0;
                    }
                    else {
                      BOOL v420 = v417 == (llvm::ValueAsMetadata *)-2;
                    }
                    if (v420) {
                      int v418 = v416;
                    }
                    unsigned int v421 = v415 + v419++;
                    unsigned int v415 = v421 & v414;
                    uint64_t v416 = (llvm::ValueAsMetadata **)&v380[v421 & v414];
                    uint64_t v417 = *v416;
                    if (*v416 == (llvm::ValueAsMetadata *)-1) {
                      goto LABEL_657;
                    }
                  }
                  goto LABEL_664;
                }
                goto LABEL_656;
              }
              uint64_t v362 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v1205
                                         + 28))(v1205, 49, v362, v363);
              if (v362) {
                BOOL v379 = v362[16] >= 0x1Cu;
              }
              else {
                BOOL v379 = 0;
              }
              if (!v379) {
                goto LABEL_565;
              }
              (*((void (**)(void **, unsigned __int8 *, uint64_t ***, void *, void **))*v1206 + 2))(v1206, v362, &v1191, v1202, v1203);
              if (v1197)
              {
                v943 = (llvm::MDNode **)v1196;
                v944 = (llvm::MDNode **)((char *)v1196 + 16 * v1197);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v362, *(_DWORD *)v943, v943[1]);
                  v943 += 2;
                }
                while (v943 != v944);
              }
            }
            int v37 = v1169;
            goto LABEL_565;
          }
        }
      }
      int v229 = *((unsigned __int8 *)v40 + 16);
      if (v229 == 61) {
        uint64_t v230 = v40;
      }
      else {
        uint64_t v230 = 0;
      }
      if (v38 && v229 == 61)
      {
        uint64_t v231 = **((void **)v230 - 4);
        int v232 = *(_DWORD *)(v231 + 8);
        if ((v232 & 0xFE) == 0x12) {
          int v232 = *(_DWORD *)(**(void **)(v231 + 16) + 8);
        }
        int v233 = (llvm::Value *)*((void *)v230 - 8);
        uint64_t v234 = *(void *)v233;
        BOOL v235 = (v232 & 0xFFFFFF00) == 0x4000 && (*(_DWORD *)(*(void *)v233 + 8) & 0xFE) == 18;
        if (v235 && *(_DWORD *)(*(void *)(v234 + 24) + 8) == 2061 && *(_DWORD *)(v234 + 32) == 3)
        {
          uint64_t v236 = 0;
          uint64_t v237 = **(void **)v40;
          v1196 = &v1198;
          uint64_t v1197 = 0x200000000;
          uint64_t v1204 = v237;
          v1205 = &v1213;
          v1206 = &v1214;
          uint64_t v1207 = 0;
          int v1208 = 0;
          __int16 v1209 = 512;
          char v1210 = 7;
          v1202 = 0;
          v1203 = 0;
          uint64_t v1211 = 0;
          uint64_t v1212 = 0;
          v1213 = &unk_1F2616E88;
          v1214 = &unk_1F2617008;
          v1202 = (void *)*((void *)v40 + 5);
          v1203 = (void **)((char *)v40 + 24);
          unsigned int v238 = (llvm::Value *)*((void *)v40 + 6);
          v1191 = (uint64_t **)v238;
          if (v238)
          {
            llvm::MetadataTracking::track((uint64_t)&v1191, (unsigned __int8 *)v238, 2);
            uint64_t v236 = (llvm::Value *)v1191;
          }
          sub_1CB8461A4((uint64_t)&v1196, 0, (uint64_t)v236);
          if (v1191)
          {
            int v501 = *(unsigned __int8 *)v1191;
            if ((v501 - 4) > 0x1E)
            {
              if ((v501 - 3) >= 0xFFFFFFFE) {
                v557 = (llvm::Value *)v1191;
              }
              else {
                v557 = 0;
              }
              if ((v501 - 3) < 0xFFFFFFFE)
              {
                if (v501 == 3) {
                  v1191[1] = 0;
                }
                goto LABEL_375;
              }
              unint64_t v503 = (unint64_t)v557 + 8;
            }
            else
            {
              if ((*((unsigned char *)v1191 + 1) & 0x7F) != 2 && !*((_DWORD *)v1191 + 3)) {
                goto LABEL_375;
              }
              v502 = v1191[2];
              if ((v502 & 4) == 0) {
                goto LABEL_375;
              }
              unint64_t v503 = (unint64_t)v502 & 0xFFFFFFFFFFFFFFF8;
              if (!v503) {
                goto LABEL_375;
              }
            }
            v1218 = (void **)&v1191;
            sub_1CC5FA668(v503 + 16, &v1218);
          }
LABEL_375:
          if ((*(_DWORD *)(v234 + 8) & 0xFE) == 0x12) {
            uint64_t v234 = **(void **)(v234 + 16);
          }
          uint64_t v239 = **((void **)v230 - 4);
          unsigned int v240 = *(_DWORD *)(v239 + 8);
          if ((v240 & 0xFE) == 0x12) {
            unsigned int v240 = *(_DWORD *)(**(void **)(v239 + 16) + 8);
          }
          unint64_t v241 = llvm::PointerType::get((llvm::PointerType *)v234, (llvm::Type *)(v240 >> 8));
          unsigned int v242 = (unsigned __int8 *)*((void *)v230 - 4);
          __int16 v1195 = 257;
          v1173 = v52;
          if (*(void *)v242 != v241)
          {
            if (v242[16] <= 0x14u)
            {
              uint64_t v306 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v1205 + 28))(v1205, 49, v242, v241);
              unsigned int v242 = (unsigned __int8 *)v306;
              if (v306)
              {
                if (*(unsigned __int8 *)(v306 + 16) >= 0x1Cu)
                {
                  (*((void (**)(void **, uint64_t, uint64_t ***, void *, void **))*v1206 + 2))(v1206, v306, &v1191, v1202, v1203);
                  if (v1197)
                  {
                    v933 = (llvm::MDNode **)v1196;
                    v934 = (llvm::MDNode **)((char *)v1196 + 16 * v1197);
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v242, *(_DWORD *)v933, v933[1]);
                      v933 += 2;
                    }
                    while (v933 != v934);
                  }
                }
              }
            }
            else
            {
              __int16 v1221 = 257;
              unsigned int v242 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v242, v241, (const char **)&v1218, 0);
              (*((void (**)(void **, unsigned __int8 *, uint64_t ***, void *, void **))*v1206 + 2))(v1206, v242, &v1191, v1202, v1203);
              if (v1197)
              {
                unint64_t v243 = (llvm::MDNode **)v1196;
                int v244 = (llvm::MDNode **)((char *)v1196 + 16 * v1197);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v242, *(_DWORD *)v243, v243[1]);
                  v243 += 2;
                }
                while (v243 != v244);
              }
            }
          }
          __int16 v1221 = 257;
          uint64_t v307 = sub_1CB844364((uint64_t *)&v1196, v234, (const llvm::APInt *)v242, 2, (uint64_t)&v1218);
          uint64_t v308 = (llvm::ConstantInt *)(***(void ***)v40 + 1960);
          unsigned int v309 = (unsigned __int8 *)llvm::ConstantInt::get(v308, 2uLL, 0);
          uint64_t v310 = (unsigned __int8 *)*((void *)v230 - 8);
          __int16 v1221 = 257;
          uint64_t v311 = sub_1CB8445F4((uint64_t)&v1196, v310, v309, (uint64_t)&v1218);
          uint64_t v312 = (char *)operator new(0x80uLL);
          *((_DWORD *)v312 + 21) = *((_DWORD *)v312 + 21) & 0x38000000 | 2;
          *(void *)uint64_t v312 = 0;
          *((void *)v312 + 2) = 0;
          *((void *)v312 + 1) = 0;
          *((void *)v312 + 5) = 0;
          *((void *)v312 + 6) = 0;
          *((void *)v312 + 4) = 0;
          int v313 = (llvm::Instruction **)(v312 + 32);
          *((void *)v312 + 8) = ***(void ***)v311 + 1576;
          uint64_t v314 = (llvm::Instruction *)(v312 + 64);
          *((void *)v312 + 3) = v312 + 64;
          *((void *)v312 + 7) = v312 + 64;
          *((void *)v312 + 9) = 0;
          v312[80] = 61;
          v312[81] = 0;
          *((_WORD *)v312 + 41) = 0;
          *((_DWORD *)v312 + 21) = 2;
          *(_OWORD *)(v312 + 88) = 0u;
          *(_OWORD *)(v312 + 104) = 0u;
          *((_DWORD *)v312 + 30) = 0;
          *(void *)uint64_t v312 = v311;
          uint64_t v317 = *((void *)v311 + 1);
          uint64_t v316 = (void *)((char *)v311 + 8);
          uint64_t v315 = v317;
          *((void *)v312 + 1) = v317;
          if (v317) {
            *(void *)(v315 + 16) = v312 + 8;
          }
          *((void *)v312 + 2) = v316;
          *uint64_t v316 = v312;
          if (*((void *)v312 + 4))
          {
            **((void **)v312 + 6) = *((void *)v312 + 5);
            uint64_t v923 = *((void *)v312 + 5);
            if (v923) {
              *(void *)(v923 + 16) = *((void *)v312 + 6);
            }
          }
          *int v313 = v307;
          if (v307)
          {
            uint64_t v320 = *((void *)v307 + 1);
            uint64_t v319 = (llvm::Instruction ***)((char *)v307 + 8);
            uint64_t v318 = v320;
            *((void *)v312 + 5) = v320;
            if (v320) {
              *(void *)(v318 + 16) = v312 + 40;
            }
            *((void *)v312 + 6) = v319;
            *uint64_t v319 = v313;
          }
          *((_WORD *)v312 + 41) = 0;
          v312[124] = 1;
          __int16 v1221 = 257;
          (*((void (**)(void **, llvm::Instruction *, void ***, void *, void **))*v1206 + 2))(v1206, v314, &v1218, v1202, v1203);
          if (v1197)
          {
            v553 = (llvm::MDNode **)v1196;
            v554 = (llvm::MDNode **)((char *)v1196 + 16 * v1197);
            do
            {
              llvm::Instruction::setMetadata(v314, *(_DWORD *)v553, v553[1]);
              v553 += 2;
            }
            while (v553 != v554);
          }
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v234, (llvm::Type *)2);
          uint64_t v322 = v321;
          uint64_t v323 = **((void **)v230 - 4);
          unsigned int v324 = *(_DWORD *)(v323 + 8);
          if ((v324 & 0xFE) == 0x12) {
            unsigned int v324 = *(_DWORD *)(**(void **)(v323 + 16) + 8);
          }
          unint64_t v325 = llvm::PointerType::get(v321, (llvm::Type *)(v324 >> 8));
          uint64_t v326 = (llvm::Value *)*((void *)v230 - 4);
          __int16 v1195 = 257;
          if (*(void *)v326 != v325)
          {
            if (*((unsigned __int8 *)v326 + 16) <= 0x14u)
            {
              uint64_t v326 = (llvm::Value *)(*((uint64_t (**)(void **, uint64_t, llvm::Value *, unint64_t))*v1205
                                     + 28))(v1205, 49, v326, v325);
              if (v326) {
                BOOL v329 = *((unsigned __int8 *)v326 + 16) >= 0x1Cu;
              }
              else {
                BOOL v329 = 0;
              }
              if (v329)
              {
                (*((void (**)(void **, llvm::Value *, uint64_t ***, void *, void **))*v1206 + 2))(v1206, v326, &v1191, v1202, v1203);
                if (v1197)
                {
                  v927 = (llvm::MDNode **)v1196;
                  v928 = (llvm::MDNode **)((char *)v1196 + 16 * v1197);
                  do
                  {
                    llvm::Instruction::setMetadata(v326, *(_DWORD *)v927, v927[1]);
                    v927 += 2;
                  }
                  while (v927 != v928);
                }
              }
            }
            else
            {
              __int16 v1221 = 257;
              uint64_t v326 = llvm::CastInst::Create(49, (uint64_t)v326, v325, (const char **)&v1218, 0);
              (*((void (**)(void **, llvm::Value *, uint64_t ***, void *, void **))*v1206 + 2))(v1206, v326, &v1191, v1202, v1203);
              if (v1197)
              {
                unsigned int v327 = (llvm::MDNode **)v1196;
                unsigned int v328 = (llvm::MDNode **)((char *)v1196 + 16 * v1197);
                do
                {
                  llvm::Instruction::setMetadata(v326, *(_DWORD *)v327, v327[1]);
                  v327 += 2;
                }
                while (v327 != v328);
              }
            }
          }
          uint64_t v330 = (unsigned __int8 *)llvm::ConstantInt::get(v308, 0, 0);
          uint64_t v331 = (unsigned __int8 *)*((void *)v230 - 8);
          __int16 v1221 = 257;
          unsigned int v332 = (unsigned __int8 *)sub_1CB8445F4((uint64_t)&v1196, v331, v330, (uint64_t)&v1218);
          unsigned int v333 = (unsigned __int8 *)llvm::ConstantInt::get(v308, 1uLL, 0);
          uint64_t v334 = (unsigned __int8 *)*((void *)v230 - 8);
          __int16 v1221 = 257;
          uint64_t v335 = (unsigned __int8 *)sub_1CB8445F4((uint64_t)&v1196, v334, v333, (uint64_t)&v1218);
          unsigned int v337 = (unsigned __int8 *)llvm::UndefValue::get(v322, v336);
          __int16 v1221 = 257;
          uint64_t v338 = (unsigned __int8 *)sub_1CB84478C((uint64_t)&v1196, v337, v332, v330, (uint64_t)&v1218);
          __int16 v1221 = 257;
          unsigned int v339 = sub_1CB84478C((uint64_t)&v1196, v338, v335, v333, (uint64_t)&v1218);
          __int16 v340 = *((_WORD *)v230 + 9);
          uint64_t v341 = (char *)operator new(0x80uLL);
          *((_DWORD *)v341 + 21) = *((_DWORD *)v341 + 21) & 0x38000000 | 2;
          *(void *)uint64_t v341 = 0;
          *((void *)v341 + 2) = 0;
          *((void *)v341 + 1) = 0;
          *((void *)v341 + 5) = 0;
          *((void *)v341 + 6) = 0;
          *((void *)v341 + 4) = 0;
          uint64_t v342 = (llvm::Value **)(v341 + 32);
          *((void *)v341 + 8) = ***(void ***)v339 + 1576;
          uint64_t v343 = (llvm::Instruction *)(v341 + 64);
          *((void *)v341 + 3) = v341 + 64;
          *((void *)v341 + 7) = v341 + 64;
          *((void *)v341 + 9) = 0;
          v341[80] = 61;
          v341[81] = 0;
          *((_WORD *)v341 + 41) = 0;
          *((_DWORD *)v341 + 21) = 2;
          *(_OWORD *)(v341 + 88) = 0u;
          *(_OWORD *)(v341 + 104) = 0u;
          *((_DWORD *)v341 + 30) = 0;
          *(void *)uint64_t v341 = v339;
          uint64_t v346 = *((void *)v339 + 1);
          uint64_t v345 = (void *)((char *)v339 + 8);
          uint64_t v344 = v346;
          *((void *)v341 + 1) = v346;
          if (v346) {
            *(void *)(v344 + 16) = v341 + 8;
          }
          *((void *)v341 + 2) = v345;
          *uint64_t v345 = v341;
          int v37 = v1169;
          if (*((void *)v341 + 4))
          {
            **((void **)v341 + 6) = *((void *)v341 + 5);
            uint64_t v924 = *((void *)v341 + 5);
            if (v924) {
              *(void *)(v924 + 16) = *((void *)v341 + 6);
            }
          }
          *uint64_t v342 = v326;
          if (v326)
          {
            uint64_t v349 = *((void *)v326 + 1);
            uint64_t v348 = (llvm::Value ***)((char *)v326 + 8);
            uint64_t v347 = v349;
            *((void *)v341 + 5) = v349;
            if (v349) {
              *(void *)(v347 + 16) = v341 + 40;
            }
            *((void *)v341 + 6) = v348;
            *uint64_t v348 = v342;
          }
          *((_WORD *)v341 + 41) = v340 & 0x7E;
          v341[124] = 1;
          __int16 v1221 = 257;
          (*((void (**)(void **, llvm::Instruction *, void ***, void *, void **))*v1206 + 2))(v1206, v343, &v1218, v1202, v1203);
          if (v1197)
          {
            v555 = (llvm::MDNode **)v1196;
            v556 = (llvm::MDNode **)((char *)v1196 + 16 * v1197);
            do
            {
              llvm::Instruction::setMetadata(v343, *(_DWORD *)v555, v555[1]);
              v555 += 2;
            }
            while (v555 != v556);
          }
          unsigned int v63 = v1187;
          uint64_t v64 = HIDWORD(v1188);
          uint64_t v52 = v1173;
          if (v1187 == v1186)
          {
            if (HIDWORD(v1188))
            {
              unsigned int v65 = 0;
              uint64_t v350 = 8 * HIDWORD(v1188);
              long long v351 = (llvm::ValueAsMetadata **)v1187;
              while (*v351 != v40)
              {
                if (*v351 == (llvm::ValueAsMetadata *)-2) {
                  unsigned int v65 = v351;
                }
                ++v351;
                v350 -= 8;
                if (!v350)
                {
                  if (v65) {
                    goto LABEL_1218;
                  }
                  goto LABEL_517;
                }
              }
              goto LABEL_1241;
            }
LABEL_517:
            unsigned int v352 = v1188;
            if (HIDWORD(v1188) < v1188) {
              goto LABEL_738;
            }
          }
          else
          {
            unsigned int v352 = v1188;
          }
          if (3 * v352 <= 4 * (HIDWORD(v1188) - v1189))
          {
            if (v352 >= 0x40) {
              v352 *= 2;
            }
            else {
              unsigned int v352 = 128;
            }
          }
          else if (v352 - HIDWORD(v1188) >= v352 >> 3)
          {
LABEL_522:
            unsigned int v353 = v352 - 1;
            unsigned int v354 = (v352 - 1) & ((v40 >> 4) ^ (v40 >> 9));
            uint64_t v87 = (llvm::ValueAsMetadata **)&v63[v354];
            unsigned int v355 = *v87;
            if (*v87 == (llvm::ValueAsMetadata *)-1) {
              goto LABEL_1233;
            }
            uint64_t v89 = 0;
            int v356 = 1;
            while (v355 != v40)
            {
              if (v89) {
                BOOL v357 = 0;
              }
              else {
                BOOL v357 = v355 == (llvm::ValueAsMetadata *)-2;
              }
              if (v357) {
                uint64_t v89 = v87;
              }
              unsigned int v358 = v354 + v356++;
              unsigned int v354 = v358 & v353;
              uint64_t v87 = (llvm::ValueAsMetadata **)&v63[v358 & v353];
              unsigned int v355 = *v87;
              if (*v87 == (llvm::ValueAsMetadata *)-1) {
                goto LABEL_1234;
              }
            }
            goto LABEL_1241;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1186, v352);
          unsigned int v352 = v1188;
          unsigned int v63 = v1187;
          goto LABEL_522;
        }
        if (*(_DWORD *)(*(void *)v233 + 8) != 13)
        {
          int v37 = v1169;
          goto LABEL_1244;
        }
        unint64_t v246 = sub_1CB83544C((uint64_t)v1182, *(void *)v233);
        if (v245 == 1) {
        if (v246 > 0x40)
        }
        {
          int v247 = 0;
          uint64_t v248 = **(void **)v40;
          v1196 = &v1198;
          uint64_t v1197 = 0x200000000;
          uint64_t v1204 = v248;
          v1205 = &v1213;
          v1206 = &v1214;
          uint64_t v1207 = 0;
          int v1208 = 0;
          __int16 v1209 = 512;
          char v1210 = 7;
          v1202 = 0;
          v1203 = 0;
          uint64_t v1211 = 0;
          uint64_t v1212 = 0;
          v1213 = &unk_1F2616E88;
          v1214 = &unk_1F2617008;
          v1202 = (void *)*((void *)v40 + 5);
          v1203 = (void **)((char *)v40 + 24);
          long long v249 = (llvm::Value *)*((void *)v40 + 6);
          v1191 = (uint64_t **)v249;
          int v37 = v1169;
          if (v249)
          {
            llvm::MetadataTracking::track((uint64_t)&v1191, (unsigned __int8 *)v249, 2);
            int v247 = (llvm::Value *)v1191;
          }
          sub_1CB8461A4((uint64_t)&v1196, 0, (uint64_t)v247);
          if (v1191)
          {
            int v486 = *(unsigned __int8 *)v1191;
            if ((v486 - 4) > 0x1E)
            {
              if ((v486 - 3) >= 0xFFFFFFFE) {
                v552 = (llvm::Value *)v1191;
              }
              else {
                v552 = 0;
              }
              if ((v486 - 3) < 0xFFFFFFFE)
              {
                if (v486 == 3) {
                  v1191[1] = 0;
                }
                goto LABEL_392;
              }
              unint64_t v488 = (unint64_t)v552 + 8;
            }
            else
            {
              if ((*((unsigned char *)v1191 + 1) & 0x7F) != 2 && !*((_DWORD *)v1191 + 3)) {
                goto LABEL_392;
              }
              v487 = v1191[2];
              if ((v487 & 4) == 0) {
                goto LABEL_392;
              }
              unint64_t v488 = (unint64_t)v487 & 0xFFFFFFFFFFFFFFF8;
              if (!v488) {
                goto LABEL_392;
              }
            }
            v1218 = (void **)&v1191;
            sub_1CC5FA668(v488 + 16, &v1218);
          }
LABEL_392:
          v1172 = v52;
          unsigned int v250 = *(_DWORD *)(*(void *)v233 + 8) >> 8;
          LODWORD(v251) = 8 * (1 << ((unint64_t)*((unsigned __int16 *)v230 + 9) >> 1));
          if (v251 >= 0x40) {
            unint64_t v251 = 64;
          }
          else {
            unint64_t v251 = v251;
          }
          uint64_t v252 = 1 << ~__clz(v251);
          if (v251) {
            uint64_t v252 = v252;
          }
          else {
            uint64_t v252 = 0;
          }
          do
          {
            unsigned int v253 = (llvm::LLVMContext *)v252;
            uint64_t v254 = (llvm::Type *)(v250 / v252);
            unsigned int v255 = v250 % v252;
            if (v252 < 9) {
              break;
            }
            uint64_t v252 = v252 >> 1;
          }
          while (v255);
          if (v255) {
            goto LABEL_665;
          }
          uint64_t v256 = **((void **)v230 - 4);
          unsigned int v257 = *(_DWORD *)(v256 + 8);
          if ((v257 & 0xFE) == 0x12) {
            unsigned int v257 = *(_DWORD *)(**(void **)(v256 + 16) + 8);
          }
          unsigned int v258 = (llvm::Type *)(v257 >> 8);
          uint64_t v259 = (llvm::FixedVectorType *)llvm::IntegerType::get(**(llvm::IntegerType ***)v230, v253);
          llvm::FixedVectorType::get(v259, v254);
          uint64_t v261 = v260;
          unint64_t v262 = llvm::PointerType::get(v259, v258);
          uint64_t v264 = (unsigned __int8 *)*((void *)v230 - 4);
          __int16 v1195 = 257;
          if (*(void *)v264 != v262)
          {
            if (v264[16] <= 0x14u)
            {
              uint64_t v264 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v1205
                                         + 28))(v1205, 49, v264, v262);
              if (v264) {
                BOOL v386 = v264[16] >= 0x1Cu;
              }
              else {
                BOOL v386 = 0;
              }
              if (v386)
              {
                (*((void (**)(void **, unsigned __int8 *, uint64_t ***, void *, void **))*v1206 + 2))(v1206, v264, &v1191, v1202, v1203);
                if (v1197)
                {
                  v929 = (llvm::MDNode **)v1196;
                  v930 = (llvm::MDNode **)((char *)v1196 + 16 * v1197);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v264, *(_DWORD *)v929, v929[1]);
                    v929 += 2;
                  }
                  while (v929 != v930);
                }
              }
            }
            else
            {
              __int16 v1221 = 257;
              uint64_t v264 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v264, v262, (const char **)&v1218, 0);
              (*((void (**)(void **, unsigned __int8 *, uint64_t ***, void *, void **))*v1206 + 2))(v1206, v264, &v1191, v1202, v1203);
              if (v1197)
              {
                int v265 = (llvm::MDNode **)v1196;
                uint64_t v266 = (llvm::MDNode **)((char *)v1196 + 16 * v1197);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v264, *(_DWORD *)v265, v265[1]);
                  v265 += 2;
                }
                while (v265 != v266);
              }
            }
          }
          __int16 v1195 = 257;
          if (*(void *)v233 != v261)
          {
            if (*((unsigned __int8 *)v233 + 16) <= 0x14u)
            {
              int v233 = (llvm::Value *)(*((uint64_t (**)(void **, uint64_t, llvm::Value *, uint64_t))*v1205 + 28))(v1205, 49, v233, v261);
              if (v233) {
                BOOL v389 = *((unsigned __int8 *)v233 + 16) >= 0x1Cu;
              }
              else {
                BOOL v389 = 0;
              }
              if (v389)
              {
                (*((void (**)(void **, llvm::Value *, uint64_t ***, void *, void **))*v1206 + 2))(v1206, v233, &v1191, v1202, v1203);
                if (v1197)
                {
                  v931 = (llvm::MDNode **)v1196;
                  v932 = (llvm::MDNode **)((char *)v1196 + 16 * v1197);
                  do
                  {
                    llvm::Instruction::setMetadata(v233, *(_DWORD *)v931, v931[1]);
                    v931 += 2;
                  }
                  while (v931 != v932);
                }
              }
            }
            else
            {
              __int16 v1221 = 257;
              int v233 = llvm::CastInst::Create(49, (uint64_t)v233, v261, (const char **)&v1218, 0);
              (*((void (**)(void **, llvm::Value *, uint64_t ***, void *, void **))*v1206 + 2))(v1206, v233, &v1191, v1202, v1203);
              if (v1197)
              {
                uint64_t v387 = (llvm::MDNode **)v1196;
                int v388 = (llvm::MDNode **)((char *)v1196 + 16 * v1197);
                do
                {
                  llvm::Instruction::setMetadata(v233, *(_DWORD *)v387, v387[1]);
                  v387 += 2;
                }
                while (v387 != v388);
              }
            }
          }
          if (v253 <= v250)
          {
            uint64_t v393 = 0;
            if (v254 <= 1) {
              uint64_t v394 = 1;
            }
            else {
              uint64_t v394 = v254;
            }
            do
            {
              __int16 v1221 = 257;
              uint64_t v395 = *(llvm::ConstantInt **)(*(void *)v1204 + 1984);
              unsigned int v396 = *(_DWORD *)(*(void *)v1204 + 1992);
              LODWORD(v1192) = v396 >> 8;
              if (v396 >> 8 > 0x40) {
                operator new[]();
              }
              if (v396 <= 0xFF) {
                unint64_t v397 = 0;
              }
              else {
                unint64_t v397 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v396) + 63);
              }
              v1191 = (uint64_t **)(v397 & v393);
              unsigned int v398 = (unsigned __int8 *)llvm::ConstantInt::get(v395, (llvm::LLVMContext *)&v1191, v263);
              if (v1192 >= 0x41 && v1191) {
                MEMORY[0x1D25D9CB0](v1191, 0x1000C8000313F17);
              }
              v399 = sub_1CB8445F4((uint64_t)&v1196, (unsigned __int8 *)v233, v398, (uint64_t)&v1218);
              __int16 v1221 = 257;
              uint64_t v400 = sub_1CB930CF4((uint64_t *)&v1196, (uint64_t)v259, (const llvm::APInt *)v264, v393, (uint64_t)&v1218);
              char v401 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v1202[7] + 40) + 272), *(llvm::Type **)v399, 1);
              uint64_t v402 = (char *)operator new(0x80uLL);
              *((_DWORD *)v402 + 21) = *((_DWORD *)v402 + 21) & 0x38000000 | 2;
              *(void *)uint64_t v402 = 0;
              *((void *)v402 + 2) = 0;
              *((void *)v402 + 1) = 0;
              *((void *)v402 + 5) = 0;
              *((void *)v402 + 6) = 0;
              *((void *)v402 + 4) = 0;
              unsigned int v403 = (llvm::Instruction **)(v402 + 32);
              *((void *)v402 + 8) = ***(void ***)v399 + 1576;
              int v404 = (llvm::Instruction *)(v402 + 64);
              *((void *)v402 + 3) = v402 + 64;
              *((void *)v402 + 7) = v402 + 64;
              *((void *)v402 + 9) = 0;
              v402[80] = 61;
              v402[81] = 0;
              *((_WORD *)v402 + 41) = 0;
              *((_DWORD *)v402 + 21) = 2;
              *(_OWORD *)(v402 + 88) = 0u;
              *(_OWORD *)(v402 + 104) = 0u;
              *((_DWORD *)v402 + 30) = 0;
              *(void *)uint64_t v402 = v399;
              uint64_t v407 = *((void *)v399 + 1);
              uint64_t v406 = (void *)((char *)v399 + 8);
              uint64_t v405 = v407;
              *((void *)v402 + 1) = v407;
              if (v407) {
                *(void *)(v405 + 16) = v402 + 8;
              }
              *((void *)v402 + 2) = v406;
              *uint64_t v406 = v402;
              if (*((void *)v402 + 4))
              {
                **((void **)v402 + 6) = *((void *)v402 + 5);
                uint64_t v413 = *((void *)v402 + 5);
                if (v413) {
                  *(void *)(v413 + 16) = *((void *)v402 + 6);
                }
              }
              *unsigned int v403 = v400;
              if (v400)
              {
                uint64_t v410 = *((void *)v400 + 1);
                unsigned int v409 = (llvm::Instruction ***)((char *)v400 + 8);
                uint64_t v408 = v410;
                *((void *)v402 + 5) = v410;
                if (v410) {
                  *(void *)(v408 + 16) = v402 + 40;
                }
                *((void *)v402 + 6) = v409;
                *unsigned int v409 = v403;
              }
              *((_WORD *)v402 + 41) = 2 * (v401 & 0x3F);
              v402[124] = 1;
              __int16 v1221 = 257;
              (*((void (**)(void **, llvm::Instruction *, void ***, void *, void **))*v1206 + 2))(v1206, v404, &v1218, v1202, v1203);
              if (v1197)
              {
                v411 = (llvm::MDNode **)v1196;
                uint64_t v412 = (llvm::MDNode **)((char *)v1196 + 16 * v1197);
                do
                {
                  llvm::Instruction::setMetadata(v404, *(_DWORD *)v411, v411[1]);
                  v411 += 2;
                }
                while (v411 != v412);
              }
              ++v393;
            }
            while (v393 != v394);
          }
          uint64_t v380 = v1187;
          uint64_t v381 = HIDWORD(v1188);
          if (v1187 == v1186)
          {
            int v37 = v1169;
            if (HIDWORD(v1188))
            {
              uint64_t v382 = 0;
              uint64_t v390 = 8 * HIDWORD(v1188);
              v391 = (llvm::ValueAsMetadata **)v1187;
              while (*v391 != v40)
              {
                if (*v391 == (llvm::ValueAsMetadata *)-2) {
                  uint64_t v382 = v391;
                }
                ++v391;
                v390 -= 8;
                if (!v390)
                {
                  if (!v382) {
                    goto LABEL_598;
                  }
LABEL_866:
                  *uint64_t v382 = v40;
                  --v1189;
                  break;
                }
              }
LABEL_664:
              char __p = 1;
LABEL_665:
              if (v1196 != &v1198) {
                free(v1196);
              }
              uint64_t v52 = v1172;
              goto LABEL_1244;
            }
LABEL_598:
            unsigned int v392 = v1188;
            if (HIDWORD(v1188) < v1188)
            {
LABEL_599:
              HIDWORD(v1188) = v381 + 1;
              v380[v381] = v40;
              goto LABEL_664;
            }
          }
          else
          {
            unsigned int v392 = v1188;
            int v37 = v1169;
          }
          if (3 * v392 <= 4 * (HIDWORD(v1188) - v1189))
          {
            if (v392 >= 0x40) {
              v392 *= 2;
            }
            else {
              unsigned int v392 = 128;
            }
          }
          else if (v392 - HIDWORD(v1188) >= v392 >> 3)
          {
LABEL_643:
            unsigned int v422 = v392 - 1;
            unsigned int v423 = (v392 - 1) & ((v40 >> 4) ^ (v40 >> 9));
            uint64_t v416 = (llvm::ValueAsMetadata **)&v380[v423];
            int v424 = *v416;
            if (*v416 != (llvm::ValueAsMetadata *)-1)
            {
              int v418 = 0;
              int v425 = 1;
              while (v424 != v40)
              {
                if (v418) {
                  BOOL v426 = 0;
                }
                else {
                  BOOL v426 = v424 == (llvm::ValueAsMetadata *)-2;
                }
                if (v426) {
                  int v418 = v416;
                }
                unsigned int v427 = v423 + v425++;
                unsigned int v423 = v427 & v422;
                uint64_t v416 = (llvm::ValueAsMetadata **)&v380[v427 & v422];
                int v424 = *v416;
                if (*v416 == (llvm::ValueAsMetadata *)-1) {
                  goto LABEL_657;
                }
              }
              goto LABEL_664;
            }
LABEL_656:
            int v418 = 0;
LABEL_657:
            if (v418) {
              v429 = v418;
            }
            else {
              v429 = v416;
            }
            if (*v429 != v40)
            {
              if (*v429 == (llvm::ValueAsMetadata *)-2) {
                --v1189;
              }
              else {
                ++HIDWORD(v1188);
              }
              _DWORD *v429 = v40;
            }
            goto LABEL_664;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1186, v392);
          unsigned int v392 = v1188;
          uint64_t v380 = v1187;
          goto LABEL_643;
        }
        int v229 = *((unsigned __int8 *)v40 + 16);
        int v37 = v1169;
      }
      if (v229 != 84) {
        goto LABEL_1244;
      }
      uint64_t v267 = *((void *)v40 - 4);
      if (!v267
        || *(unsigned char *)(v267 + 16)
        || *(void *)(v267 + 24) != *((void *)v40 + 9)
        || (*(unsigned char *)(v267 + 33) & 0x20) == 0)
      {
        goto LABEL_1244;
      }
      int v268 = *(_DWORD *)(*(v38 - 7) + 36);
      if ((v268 - 1282) < 0x190)
      {
        if (*(v38 - 2))
        {
          int v269 = 1;
          llvm::SampleInfo::SampleInfo((uint64_t)&v1196, v268, 1);
          v1218 = (void **)v1220;
          uint64_t v1219 = 0x400000000;
          uint64_t v271 = *(v38 - 2);
          if (!v271) {
            goto LABEL_900;
          }
          unsigned int v272 = 0;
          do
          {
            if (v272 >= HIDWORD(v1219)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (*(unsigned __int8 *)(*(void *)(v271 + 24) + 16) <= 0x1Bu) {
              unsigned int v273 = 0;
            }
            else {
              unsigned int v273 = *(void **)(v271 + 24);
            }
            v1218[v272] = v273;
            unsigned int v272 = v1219 + 1;
            LODWORD(v1219) = v1219 + 1;
            uint64_t v271 = *(void *)(v271 + 8);
          }
          while (v271);
          if (!v272)
          {
LABEL_778:
            int v269 = 1;
            goto LABEL_900;
          }
          while (2)
          {
            v489 = v1218[--v272];
            LODWORD(v1219) = v272;
            if (!v489)
            {
LABEL_899:
              int v269 = 0;
LABEL_900:
              if (v1218 != (void **)v1220) {
                free(v1218);
              }
              if (v269)
              {
                uint64_t v536 = HIDWORD(v1199);
                uint64_t v537 = *((void *)v39 + 4 * HIDWORD(v1199) + -4 * (*((_DWORD *)v38 - 1) & 0x7FFFFFF));
                v538 = (void *)(v537 + 24);
                if (*(_DWORD *)(v537 + 32) >= 0x41u) {
                  v538 = (void *)*v538;
                }
                v539 = (void *)*v538;
                v540 = *(llvm::Constant ****)v537;
                LODWORD(v1219) = 16;
                v1218 = (void **)((unsigned __int16)v539 & 0xFFFE);
                IntegerValue = llvm::Constant::getIntegerValue(v540, (llvm::Type *)&v1218, v270);
                v542 = (char *)v39 - 32 * (*((_DWORD *)v38 - 1) & 0x7FFFFFF);
                v543 = &v542[32 * v536];
                if (*(void *)v543)
                {
                  **((void **)v543 + 2) = *((void *)v543 + 1);
                  uint64_t v544 = *((void *)v543 + 1);
                  if (v544) {
                    *(void *)(v544 + 16) = *((void *)v543 + 2);
                  }
                }
                *(void *)v543 = IntegerValue;
                if (IntegerValue)
                {
                  uint64_t v547 = *((void *)IntegerValue + 1);
                  v545 = (char **)((char *)IntegerValue + 8);
                  uint64_t v546 = v547;
                  v548 = &v542[32 * v536];
                  *((void *)v548 + 1) = v547;
                  if (v547) {
                    *(void *)(v546 + 16) = v548 + 8;
                  }
                  *((void *)v548 + 2) = v545;
                  *v545 = v543;
                }
                if (v1219 >= 0x41 && v1218) {
                  MEMORY[0x1D25D9CB0](v1218, 0x1000C8000313F17);
                }
                llvm::ScalarEvolution::forgetValue(v1168, (llvm::Value *)(v38 - 3));
              }
              goto LABEL_1244;
            }
            int v269 = 0;
            unsigned int v490 = *((unsigned __int8 *)v489 + 16);
            if (v490 > 0x5B)
            {
              if (v490 != 92)
              {
                if (v490 != 95) {
                  goto LABEL_900;
                }
                goto LABEL_767;
              }
              if (v489[18] > 1u || **((_DWORD **)v489 + 8)) {
                goto LABEL_899;
              }
            }
            else
            {
              if (v490 != 83 && v490 != 85) {
                goto LABEL_900;
              }
LABEL_767:
              for (uint64_t i = *((void *)v489 + 1); i; uint64_t i = *(void *)(i + 8))
              {
                if (v272 >= HIDWORD(v1219)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                if (*(unsigned __int8 *)(*(void *)(i + 24) + 16) <= 0x1Bu) {
                  unsigned int v492 = 0;
                }
                else {
                  unsigned int v492 = *(void **)(i + 24);
                }
                v1218[v272] = v492;
                unsigned int v272 = v1219 + 1;
                LODWORD(v1219) = v1219 + 1;
              }
            }
            if (!v272) {
              goto LABEL_778;
            }
            continue;
          }
        }
        v493 = v1187;
        uint64_t v494 = HIDWORD(v1188);
        if (v1187 != v1186)
        {
          unsigned int v498 = v1188;
          goto LABEL_872;
        }
        if (!HIDWORD(v1188)) {
          goto LABEL_787;
        }
        v495 = 0;
        uint64_t v496 = 8 * HIDWORD(v1188);
        v497 = (llvm::ValueAsMetadata **)v1187;
        do
        {
          if (*v497 == v40) {
            goto LABEL_1243;
          }
          if (*v497 == (llvm::ValueAsMetadata *)-2) {
            v495 = v497;
          }
          ++v497;
          v496 -= 8;
        }
        while (v496);
        if (!v495)
        {
LABEL_787:
          unsigned int v498 = v1188;
          if (HIDWORD(v1188) < v1188) {
            goto LABEL_788;
          }
LABEL_872:
          if (3 * v498 <= 4 * (HIDWORD(v1188) - v1189))
          {
            if (v498 >= 0x40) {
              v498 *= 2;
            }
            else {
              unsigned int v498 = 128;
            }
          }
          else if (v498 - HIDWORD(v1188) >= v498 >> 3)
          {
            goto LABEL_874;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1186, v498);
          unsigned int v498 = v1188;
          v493 = v1187;
LABEL_874:
          unsigned int v526 = v498 - 1;
          unsigned int v527 = (v498 - 1) & ((v40 >> 4) ^ (v40 >> 9));
          v528 = (llvm::ValueAsMetadata **)&v493[v527];
          v529 = *v528;
          if (*v528 != (llvm::ValueAsMetadata *)-1)
          {
            v530 = 0;
            int v531 = 1;
            while (v529 != v40)
            {
              if (v530) {
                BOOL v532 = 0;
              }
              else {
                BOOL v532 = v529 == (llvm::ValueAsMetadata *)-2;
              }
              if (v532) {
                v530 = v528;
              }
              unsigned int v533 = v527 + v531++;
              unsigned int v527 = v533 & v526;
              v528 = (llvm::ValueAsMetadata **)&v493[v533 & v526];
              v529 = *v528;
              if (*v528 == (llvm::ValueAsMetadata *)-1) {
                goto LABEL_1703;
              }
            }
            goto LABEL_1243;
          }
LABEL_1702:
          v530 = 0;
LABEL_1703:
          if (v530) {
            v922 = v530;
          }
          else {
            v922 = v528;
          }
          if (*v922 != v40)
          {
            if (*v922 == (llvm::ValueAsMetadata *)-2) {
              --v1189;
            }
            else {
              ++HIDWORD(v1188);
            }
            *v922 = v40;
          }
          goto LABEL_1243;
        }
LABEL_1687:
        *v495 = v40;
LABEL_868:
        --v1189;
        goto LABEL_1243;
      }
      if (v268 > 294)
      {
        if (v268 != 1267)
        {
          if (v268 != 1266)
          {
            if (v268 != 295) {
              goto LABEL_1244;
            }
            for (uint64_t j = (uint64_t *)v1160[10]; ; uint64_t j = (uint64_t *)j[1])
            {
              if (j == v1167) {
                goto LABEL_1677;
              }
              if (j) {
                v564 = j - 3;
              }
              else {
                v564 = 0;
              }
              uint64_t v565 = v564[5];
              if (v565) {
                uint64_t v566 = v565 - 24;
              }
              else {
                uint64_t v566 = 0;
              }
              if (*(unsigned __int8 *)(v566 + 16) - 29 >= 0xB) {
                uint64_t v566 = 0;
              }
              if (*(unsigned char *)(v566 + 16) == 29) {
                break;
              }
            }
            v1175 = v52;
            v736 = (void *)*v37;
            if ((void *)*v37 == v37)
            {
              v737 = 0;
            }
            else
            {
              v737 = (llvm::Instruction *)(v736 - 3);
              if (v736) {
                v738 = (llvm::Instruction *)(v736 - 3);
              }
              else {
                v738 = 0;
              }
              unsigned int v739 = *((unsigned __int8 *)v738 + 16) - 40;
              if (v739 >= 0xFFFFFFF5) {
                v740 = v738;
              }
              else {
                v740 = 0;
              }
              if (v736)
              {
                if (*((unsigned char *)v740 + 16) == 30 && v739 >= 0xFFFFFFF5)
                {
                  if (*((unsigned char *)v736 - 8) != 30)
                  {
                    int v842 = 2;
                    switch(*((unsigned char *)v736 - 8))
                    {
                      case 0x1E:
                        __break(1u);
                        JUMPOUT(0x1CB9307ACLL);
                      case 0x1F:
                        int v842 = (*((_DWORD *)v736 - 1) >> 1) & 0x3FFFFFF;
                        goto LABEL_1529;
                      case 0x20:
                      case 0x26:
                        int v842 = (*((_DWORD *)v736 - 1) & 0x7FFFFFF) - 1;
                        goto LABEL_1529;
                      case 0x21:
                        goto LABEL_1295;
                      case 0x24:
                        int v842 = *((_WORD *)v736 - 3) & 1;
                        goto LABEL_1529;
                      case 0x25:
                        int v842 = 1;
                        goto LABEL_1295;
                      case 0x27:
                        int v842 = *((_DWORD *)v736 + 14) + 1;
LABEL_1529:
                        if (v842) {
                          goto LABEL_1295;
                        }
                        goto LABEL_1349;
                      default:
                        goto LABEL_1349;
                    }
                  }
                  if ((*((_DWORD *)v736 - 1) & 0x7FFFFFF) == 3) {
                    int v842 = 2;
                  }
                  else {
                    int v842 = 1;
                  }
LABEL_1295:
                  for (unsigned int k = 0; k != v842; ++k)
                  {
                    uint64_t Successor = llvm::Instruction::getSuccessor(v737, k);
                    if (v1216 >= (unint64_t)HIDWORD(v1216)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *(void *)&v1215[8 * v1216] = Successor;
                    LODWORD(v1216) = v1216 + 1;
                  }
                  v737 = v740;
                }
              }
            }
LABEL_1349:
            v763 = 0;
            uint64_t v764 = **(void **)v40;
            v1196 = &v1198;
            uint64_t v1197 = 0x200000000;
            uint64_t v1204 = v764;
            v1205 = &v1213;
            v1206 = &v1214;
            uint64_t v1207 = 0;
            int v1208 = 0;
            __int16 v1209 = 512;
            char v1210 = 7;
            v1202 = 0;
            v1203 = 0;
            uint64_t v1211 = 0;
            uint64_t v1212 = 0;
            v1213 = &unk_1F2616E88;
            v1214 = &unk_1F2617008;
            v1202 = (void *)*((void *)v40 + 5);
            v1203 = (void **)((char *)v40 + 24);
            v765 = (llvm::Value *)*((void *)v40 + 6);
            v1191 = (uint64_t **)v765;
            if (v765)
            {
              llvm::MetadataTracking::track((uint64_t)&v1191, (unsigned __int8 *)v765, 2);
              v763 = (llvm::Value *)v1191;
            }
            sub_1CB8461A4((uint64_t)&v1196, 0, (uint64_t)v763);
            if (v1191)
            {
              int v835 = *(unsigned __int8 *)v1191;
              if ((v835 - 4) > 0x1E)
              {
                if ((v835 - 3) >= 0xFFFFFFFE) {
                  v843 = (llvm::Value *)v1191;
                }
                else {
                  v843 = 0;
                }
                if ((v835 - 3) < 0xFFFFFFFE)
                {
                  if (v835 == 3) {
                    v1191[1] = 0;
                  }
                  goto LABEL_1352;
                }
                unint64_t v837 = (unint64_t)v843 + 8;
              }
              else
              {
                if ((*((unsigned char *)v1191 + 1) & 0x7F) != 2 && !*((_DWORD *)v1191 + 3)) {
                  goto LABEL_1352;
                }
                v836 = v1191[2];
                if ((v836 & 4) == 0) {
                  goto LABEL_1352;
                }
                unint64_t v837 = (unint64_t)v836 & 0xFFFFFFFFFFFFFFF8;
                if (!v837) {
                  goto LABEL_1352;
                }
              }
              v1218 = (void **)&v1191;
              sub_1CC5FA668(v837 + 16, &v1218);
            }
LABEL_1352:
            sub_1CD3FAC20((uint64_t *)&v1196, (llvm::BasicBlock *)(j - 3));
            v767 = v1187;
            uint64_t v768 = HIDWORD(v1188);
            if (v1187 != v1186)
            {
              v766 = (llvm::Type *)v1188;
              goto LABEL_1363;
            }
            if (HIDWORD(v1188))
            {
              v769 = 0;
              uint64_t v770 = 8 * HIDWORD(v1188);
              v771 = (llvm::Instruction **)v1187;
              do
              {
                if (*v771 == v737) {
                  goto LABEL_1444;
                }
                if (*v771 == (llvm::Instruction *)-2) {
                  v769 = v771;
                }
                ++v771;
                v770 -= 8;
              }
              while (v770);
              if (v769)
              {
                *v769 = v737;
                --v1189;
                goto LABEL_1444;
              }
            }
            v766 = (llvm::Type *)v1188;
            if (HIDWORD(v1188) < v1188)
            {
              ++HIDWORD(v1188);
              *(void *)&v1187[8 * v768] = v737;
              goto LABEL_1444;
            }
LABEL_1363:
            if (3 * (int)v766 <= (4 * (HIDWORD(v1188) - v1189)))
            {
              if (v766 >= 0x40) {
                LODWORD(v766) = 2 * v766;
              }
              else {
                LODWORD(v766) = 128;
              }
            }
            else if ((int)v766 - HIDWORD(v1188) >= v766 >> 3)
            {
LABEL_1365:
              int v772 = v766 - 1;
              unsigned int v773 = (v766 - 1) & ((v737 >> 4) ^ (v737 >> 9));
              v774 = &v767[8 * v773];
              v775 = *(llvm::Instruction **)v774;
              if (*(void *)v774 == -1)
              {
                v776 = 0;
LABEL_1437:
                if (v776) {
                  v796 = v776;
                }
                else {
                  v796 = (llvm::Instruction **)v774;
                }
                if (*v796 != v737)
                {
                  if (*v796 == (llvm::Instruction *)-2) {
                    --v1189;
                  }
                  else {
                    ++HIDWORD(v1188);
                  }
                  *v796 = v737;
                }
              }
              else
              {
                v776 = 0;
                int v777 = 1;
                while (v775 != v737)
                {
                  if (v776) {
                    BOOL v778 = 0;
                  }
                  else {
                    BOOL v778 = v775 == (llvm::Instruction *)-2;
                  }
                  if (v778) {
                    v776 = (llvm::Instruction **)v774;
                  }
                  unsigned int v779 = v773 + v777++;
                  unsigned int v773 = v779 & v772;
                  v774 = &v767[8 * (v779 & v772)];
                  v775 = *(llvm::Instruction **)v774;
                  if (*(void *)v774 == -1) {
                    goto LABEL_1437;
                  }
                }
              }
LABEL_1444:
              if ((uint64_t *)j[2] != j + 2)
              {
                for (uint64_t m = j[3]; ; uint64_t m = *(void *)(v798 + 32))
                {
                  uint64_t v798 = m - 24;
                  uint64_t v799 = m ? m - 24 : 0;
                  if (!m || *(unsigned char *)(v799 + 16) != 83) {
                    break;
                  }
                  v800 = llvm::UndefValue::get(*(llvm::UndefValue **)v798, v766);
                  v801 = (void *)*((void *)v40 + 5);
                  int v802 = *(_DWORD *)(v798 + 20);
                  uint64_t v803 = v802 & 0x7FFFFFF;
                  if ((v802 & 0x7FFFFFF) == *(_DWORD *)(v798 + 60))
                  {
                    LODWORD(v816) = v803 + (v803 >> 1);
                    if (v816 <= 2) {
                      uint64_t v816 = 2;
                    }
                    else {
                      uint64_t v816 = v816;
                    }
                    uint64_t v1162 = v816;
                    *(_DWORD *)(v798 + 60) = v816;
                    if ((v802 & 0x40000000) != 0) {
                      v817 = *(uint64_t **)(v798 - 8);
                    }
                    else {
                      v817 = (uint64_t *)(v798 - 32 * v803);
                    }
                    __pc = v817;
                    v818 = operator new(40 * v816);
                    *(void *)(v798 - 8) = v818;
                    v819 = v818;
                    do
                    {
                      void *v819 = 0;
                      v819[1] = 0;
                      v819[2] = 0;
                      v819[3] = v798;
                      v819 += 4;
                    }
                    while (v819 != &v818[4 * v1162]);
                    int v820 = *(_DWORD *)(v798 + 20);
                    if ((v820 & 0x40000000) != 0) {
                      uint64_t v821 = (uint64_t)v818;
                    }
                    else {
                      uint64_t v821 = v798 - 32 * (v820 & 0x7FFFFFF);
                    }
                    sub_1CC5E4108((uint64_t)&v1218, __pc, &__pc[4 * v803], v821);
                    if (v803)
                    {
                      memmove((void *)(v821 + 32 * v1162), &__pc[4 * v803], 8 * v803);
                      uint64_t v822 = 4 * v803;
                      do
                      {
                        v823 = &__pc[v822];
                        if (__pc[v822 - 4])
                        {
                          *(void *)*(v823 - 2) = *(v823 - 3);
                          uint64_t v824 = *(v823 - 3);
                          if (v824) {
                            *(void *)(v824 + 16) = *(v823 - 2);
                          }
                        }
                        v822 -= 4;
                      }
                      while (v822 * 8);
                    }
                    operator delete(__pc);
                    int v802 = *(_DWORD *)(v798 + 20);
                  }
                  uint64_t v804 = (v802 + 1) & 0x7FFFFFF;
                  *(_DWORD *)(v798 + 20) = v802 & 0xF8000000 | (v802 + 1) & 0x7FFFFFF;
                  if ((v802 & 0x40000000) != 0) {
                    uint64_t v805 = *(void *)(v798 - 8);
                  }
                  else {
                    uint64_t v805 = v798 - 32 * v804;
                  }
                  uint64_t v806 = (v804 - 1);
                  uint64_t v807 = v805 + 32 * v806;
                  if (*(void *)v807)
                  {
                    **(void **)(v807 + 16) = *(void *)(v807 + 8);
                    uint64_t v815 = *(void *)(v807 + 8);
                    if (v815) {
                      *(void *)(v815 + 16) = *(void *)(v807 + 16);
                    }
                  }
                  *(void *)uint64_t v807 = v800;
                  if (v800)
                  {
                    uint64_t v810 = *((void *)v800 + 1);
                    v809 = (void *)((char *)v800 + 8);
                    uint64_t v808 = v810;
                    uint64_t v811 = v805 + 32 * v806;
                    *(void *)(v811 + 8) = v810;
                    if (v810) {
                      *(void *)(v808 + 16) = v811 + 8;
                    }
                    *(void *)(v811 + 16) = v809;
                    void *v809 = v807;
                  }
                  int v812 = *(_DWORD *)(v798 + 20);
                  uint64_t v813 = v812 & 0x7FFFFFF;
                  if ((v812 & 0x40000000) != 0) {
                    uint64_t v814 = *(void *)(v798 - 8);
                  }
                  else {
                    uint64_t v814 = v798 - 32 * v813;
                  }
                  *(void *)(v814 + 32 * *(unsigned int *)(v798 + 60) + 8 * (v813 - 1)) = v801;
                }
              }
              for (n = (void *)j[3]; ; n = (void *)n[1])
              {
                v826 = n - 3;
                if (!n) {
                  v826 = 0;
                }
                if (*((unsigned char *)v826 + 16) != 83) {
                  break;
                }
              }
              v1202 = (void *)n[2];
              v1203 = (void **)n;
              v827 = (llvm::Value *)n[3];
              v1191 = (uint64_t **)v827;
              if (v827)
              {
                llvm::MetadataTracking::track((uint64_t)&v1191, (unsigned __int8 *)v827, 2);
                v828 = (llvm::Value *)v1191;
              }
              else
              {
                v828 = 0;
              }
              sub_1CB8461A4((uint64_t)&v1196, 0, (uint64_t)v828);
              if (v1191)
              {
                int v838 = *(unsigned __int8 *)v1191;
                if ((v838 - 4) > 0x1E)
                {
                  if ((v838 - 3) >= 0xFFFFFFFE) {
                    v844 = (llvm::Value *)v1191;
                  }
                  else {
                    v844 = 0;
                  }
                  if ((v838 - 3) < 0xFFFFFFFE)
                  {
                    if (v838 == 3) {
                      v1191[1] = 0;
                    }
                    goto LABEL_1492;
                  }
                  unint64_t v840 = (unint64_t)v844 + 8;
                }
                else
                {
                  if ((*((unsigned char *)v1191 + 1) & 0x7F) != 2 && !*((_DWORD *)v1191 + 3)) {
                    goto LABEL_1492;
                  }
                  v839 = v1191[2];
                  if ((v839 & 4) == 0) {
                    goto LABEL_1492;
                  }
                  unint64_t v840 = (unint64_t)v839 & 0xFFFFFFFFFFFFFFF8;
                  if (!v840) {
                    goto LABEL_1492;
                  }
                }
                v1218 = (void **)&v1191;
                sub_1CC5FA668(v840 + 16, &v1218);
              }
LABEL_1492:
              for (iuint64_t i = (uint64_t *)j[3]; ii != j + 2; iuint64_t i = (uint64_t *)ii[1])
              {
                v830 = ii - 3;
                if (ii) {
                  v831 = ii - 3;
                }
                else {
                  v831 = 0;
                }
                if (*((unsigned char *)v831 + 16) != 83) {
                  goto LABEL_1571;
                }
              }
              v830 = 0;
LABEL_1571:
              v845 = v830 + 3;
              v846 = j + 2;
              while (v845 != v846)
              {
                if (v845) {
                  v847 = v845 - 3;
                }
                else {
                  v847 = 0;
                }
                int v848 = *((_DWORD *)v847 + 5);
                if ((v848 & 0x40000000) != 0)
                {
                  v850 = (uint64_t **)*(v847 - 1);
                  uint64_t v849 = v848 & 0x7FFFFFF;
                }
                else
                {
                  uint64_t v849 = v848 & 0x7FFFFFF;
                  v850 = (uint64_t **)&v847[-4 * v849];
                }
                v1163 = (void *)v845[1];
                if (v849)
                {
                  v851 = &v850[4 * v849];
                  do
                  {
                    v852 = *v850;
                    if (*v850) {
                      BOOL v853 = *((unsigned __int8 *)*v850 + 16) >= 0x1Cu;
                    }
                    else {
                      BOOL v853 = 0;
                    }
                    if (v853 && (uint64_t *)v852[5] != j - 3)
                    {
                      uint64_t v854 = *v852;
                      __int16 v1221 = 257;
                      v855 = sub_1CB93113C((uint64_t)&v1196, v854, 2, (uint64_t)&v1218);
                      v857 = llvm::UndefValue::get(*(llvm::UndefValue **)v855, v856);
                      v858 = (void *)*((void *)v40 + 5);
                      int v859 = *((_DWORD *)v855 + 5);
                      uint64_t v860 = v859 & 0x7FFFFFF;
                      if ((v859 & 0x7FFFFFF) == *((_DWORD *)v855 + 15))
                      {
                        LODWORD(v904) = v860 + (v860 >> 1);
                        if (v904 <= 2) {
                          uint64_t v904 = 2;
                        }
                        else {
                          uint64_t v904 = v904;
                        }
                        size_t v1158 = v904;
                        *((_DWORD *)v855 + 15) = v904;
                        if ((v859 & 0x40000000) != 0) {
                          v905 = (uint64_t *)*((void *)v855 - 1);
                        }
                        else {
                          v905 = (uint64_t *)((char *)v855 - 32 * v860);
                        }
                        __pe = v905;
                        v906 = operator new(40 * v904);
                        *((void *)v855 - 1) = v906;
                        v907 = v906;
                        do
                        {
                          void *v907 = 0;
                          v907[1] = 0;
                          v907[2] = 0;
                          v907[3] = v855;
                          v907 += 4;
                        }
                        while (v907 != &v906[4 * v1158]);
                        int v908 = *((_DWORD *)v855 + 5);
                        if ((v908 & 0x40000000) != 0) {
                          uint64_t v909 = (uint64_t)v906;
                        }
                        else {
                          uint64_t v909 = (uint64_t)v855 - 32 * (v908 & 0x7FFFFFF);
                        }
                        uint64_t v1156 = v909;
                        sub_1CC5E4108((uint64_t)&v1218, __pe, &__pe[4 * v860], v909);
                        if (v860)
                        {
                          memmove((void *)(v1156 + 32 * v1158), &__pe[4 * v860], 8 * v860);
                          uint64_t v910 = 4 * v860;
                          do
                          {
                            v911 = &__pe[v910];
                            if (__pe[v910 - 4])
                            {
                              *(void *)*(v911 - 2) = *(v911 - 3);
                              uint64_t v912 = *(v911 - 3);
                              if (v912) {
                                *(void *)(v912 + 16) = *(v911 - 2);
                              }
                            }
                            v910 -= 4;
                          }
                          while (v910 * 8);
                        }
                        operator delete(__pe);
                        int v859 = *((_DWORD *)v855 + 5);
                      }
                      uint64_t v861 = (v859 + 1) & 0x7FFFFFF;
                      *((_DWORD *)v855 + 5) = v859 & 0xF8000000 | (v859 + 1) & 0x7FFFFFF;
                      if ((v859 & 0x40000000) != 0) {
                        v862 = (char *)*((void *)v855 - 1);
                      }
                      else {
                        v862 = (char *)v855 - 32 * v861;
                      }
                      uint64_t v863 = (v861 - 1);
                      v864 = &v862[32 * v863];
                      if (*(void *)v864)
                      {
                        **((void **)v864 + 2) = *((void *)v864 + 1);
                        uint64_t v903 = *((void *)v864 + 1);
                        if (v903) {
                          *(void *)(v903 + 16) = *((void *)v864 + 2);
                        }
                      }
                      *(void *)v864 = v857;
                      if (v857)
                      {
                        uint64_t v867 = *((void *)v857 + 1);
                        v866 = (char **)((char *)v857 + 8);
                        uint64_t v865 = v867;
                        v868 = &v862[32 * v863];
                        *((void *)v868 + 1) = v867;
                        if (v867) {
                          *(void *)(v865 + 16) = v868 + 8;
                        }
                        *((void *)v868 + 2) = v866;
                        *v866 = v864;
                      }
                      int v869 = *((_DWORD *)v855 + 5);
                      uint64_t v870 = v869 & 0x7FFFFFF;
                      if ((v869 & 0x40000000) != 0) {
                        v871 = (char *)*((void *)v855 - 1);
                      }
                      else {
                        v871 = (char *)v855 - 32 * v870;
                      }
                      uint64_t v872 = *((unsigned int *)v855 + 15);
                      *(void *)&v871[32 * v872 + 8 * (v870 - 1)] = v858;
                      uint64_t v873 = *(j - 2);
                      if (v873)
                      {
                        while (1)
                        {
                          uint64_t v874 = *(void *)(v873 + 24);
                          unsigned int v875 = *(unsigned __int8 *)(v874 + 16);
                          BOOL v876 = v874 && v875 >= 0x1C;
                          if (v876 && v875 - 29 < 0xB) {
                            break;
                          }
                          uint64_t v873 = *(void *)(v873 + 8);
                          if (!v873) {
                            goto LABEL_1607;
                          }
                        }
                        v878 = (char **)(v852 + 1);
                        LODWORD(v879) = v872;
LABEL_1610:
                        v880 = *(void **)(v874 + 40);
                        if (v880 != *((void **)v40 + 5))
                        {
                          int v881 = *((_DWORD *)v855 + 5);
                          if ((v881 & 0x7FFFFFF) == v879)
                          {
                            LODWORD(v894) = v879 + (v879 >> 1);
                            if (v894 <= 2) {
                              uint64_t v894 = 2;
                            }
                            else {
                              uint64_t v894 = v894;
                            }
                            size_t v1157 = v894;
                            *((_DWORD *)v855 + 15) = v894;
                            v1155 = v878;
                            if ((v881 & 0x40000000) != 0) {
                              v895 = (uint64_t *)*((void *)v855 - 1);
                            }
                            else {
                              v895 = (uint64_t *)((char *)v855 - 32 * v879);
                            }
                            __pd = v895;
                            v896 = operator new(40 * v894);
                            *((void *)v855 - 1) = v896;
                            v897 = v896;
                            do
                            {
                              void *v897 = 0;
                              v897[1] = 0;
                              v897[2] = 0;
                              v897[3] = v855;
                              v897 += 4;
                            }
                            while (v897 != &v896[4 * v1157]);
                            int v898 = *((_DWORD *)v855 + 5);
                            if ((v898 & 0x40000000) != 0) {
                              uint64_t v899 = (uint64_t)v896;
                            }
                            else {
                              uint64_t v899 = (uint64_t)v855 - 32 * (v898 & 0x7FFFFFF);
                            }
                            uint64_t v1154 = v899;
                            sub_1CC5E4108((uint64_t)&v1218, __pd, &__pd[4 * v879], v899);
                            if (v879)
                            {
                              memmove((void *)(v1154 + 32 * v1157), &__pd[4 * v879], 8 * v879);
                              uint64_t v900 = 4 * v879;
                              do
                              {
                                v901 = &__pd[v900];
                                if (__pd[v900 - 4])
                                {
                                  *(void *)*(v901 - 2) = *(v901 - 3);
                                  uint64_t v902 = *(v901 - 3);
                                  if (v902) {
                                    *(void *)(v902 + 16) = *(v901 - 2);
                                  }
                                }
                                v900 -= 4;
                              }
                              while (v900 * 8);
                            }
                            operator delete(__pd);
                            int v881 = *((_DWORD *)v855 + 5);
                            v878 = v1155;
                          }
                          uint64_t v882 = (v881 + 1) & 0x7FFFFFF;
                          *((_DWORD *)v855 + 5) = v881 & 0xF8000000 | (v881 + 1) & 0x7FFFFFF;
                          if ((v881 & 0x40000000) != 0) {
                            v883 = (char *)*((void *)v855 - 1);
                          }
                          else {
                            v883 = (char *)v855 - 32 * v882;
                          }
                          uint64_t v884 = (v882 - 1);
                          v885 = &v883[32 * v884];
                          if (*(void *)v885)
                          {
                            **((void **)v885 + 2) = *((void *)v885 + 1);
                            uint64_t v893 = *((void *)v885 + 1);
                            if (v893) {
                              *(void *)(v893 + 16) = *((void *)v885 + 2);
                            }
                          }
                          *(void *)v885 = v852;
                          uint64_t v886 = v852[1];
                          *((void *)v885 + 1) = v886;
                          if (v886) {
                            *(void *)(v886 + 16) = v885 + 8;
                          }
                          *(void *)&v883[32 * v884 + 16] = v878;
                          *v878 = v885;
                          int v887 = *((_DWORD *)v855 + 5);
                          uint64_t v888 = v887 & 0x7FFFFFF;
                          if ((v887 & 0x40000000) != 0) {
                            v889 = (char *)*((void *)v855 - 1);
                          }
                          else {
                            v889 = (char *)v855 - 32 * v888;
                          }
                          uint64_t v879 = *((unsigned int *)v855 + 15);
                          *(void *)&v889[32 * v879 + 8 * (v888 - 1)] = v880;
                        }
                        while (1)
                        {
                          uint64_t v873 = *(void *)(v873 + 8);
                          if (!v873) {
                            break;
                          }
                          uint64_t v874 = *(void *)(v873 + 24);
                          unsigned int v890 = *(unsigned __int8 *)(v874 + 16);
                          if (v874) {
                            BOOL v891 = v890 >= 0x1C;
                          }
                          else {
                            BOOL v891 = 0;
                          }
                          if (v891 && v890 - 29 < 0xB) {
                            goto LABEL_1610;
                          }
                        }
                      }
LABEL_1607:
                      sub_1CD114F2C((uint64_t)(j - 3), (llvm::Value *)v852, v855);
                    }
                    v850 += 4;
                  }
                  while (v850 != v851);
                }
                v846 = j + 2;
                v845 = v1163;
              }
              if (v1196 != &v1198) {
                free(v1196);
              }
              int v37 = v1169;
              uint64_t v52 = v1175;
LABEL_1677:
              v493 = v1187;
              uint64_t v494 = HIDWORD(v1188);
              if (v1187 == v1186)
              {
                if (HIDWORD(v1188))
                {
                  v495 = 0;
                  uint64_t v913 = 8 * HIDWORD(v1188);
                  v914 = (llvm::ValueAsMetadata **)v1187;
                  do
                  {
                    if (*v914 == v40) {
                      goto LABEL_1243;
                    }
                    if (*v914 == (llvm::ValueAsMetadata *)-2) {
                      v495 = v914;
                    }
                    ++v914;
                    v913 -= 8;
                  }
                  while (v913);
                  if (v495) {
                    goto LABEL_1687;
                  }
                }
                unsigned int v915 = v1188;
                if (HIDWORD(v1188) < v1188)
                {
LABEL_788:
                  HIDWORD(v1188) = v494 + 1;
                  v493[v494] = v40;
                  goto LABEL_1243;
                }
              }
              else
              {
                unsigned int v915 = v1188;
              }
              if (3 * v915 <= 4 * (HIDWORD(v1188) - v1189))
              {
                if (v915 >= 0x40) {
                  v915 *= 2;
                }
                else {
                  unsigned int v915 = 128;
                }
              }
              else if (v915 - HIDWORD(v1188) >= v915 >> 3)
              {
LABEL_1691:
                unsigned int v916 = v915 - 1;
                unsigned int v917 = (v915 - 1) & ((v40 >> 4) ^ (v40 >> 9));
                v528 = (llvm::ValueAsMetadata **)&v493[v917];
                v918 = *v528;
                if (*v528 == (llvm::ValueAsMetadata *)-1) {
                  goto LABEL_1702;
                }
                v530 = 0;
                int v919 = 1;
                while (v918 != v40)
                {
                  if (v530) {
                    BOOL v920 = 0;
                  }
                  else {
                    BOOL v920 = v918 == (llvm::ValueAsMetadata *)-2;
                  }
                  if (v920) {
                    v530 = v528;
                  }
                  unsigned int v921 = v917 + v919++;
                  unsigned int v917 = v921 & v916;
                  v528 = (llvm::ValueAsMetadata **)&v493[v921 & v916];
                  v918 = *v528;
                  if (*v528 == (llvm::ValueAsMetadata *)-1) {
                    goto LABEL_1703;
                  }
                }
LABEL_1243:
                char __p = 1;
                goto LABEL_1244;
              }
              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1186, v915);
              unsigned int v915 = v1188;
              v493 = v1187;
              goto LABEL_1691;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1186, v766);
            v766 = (llvm::Type *)v1188;
            v767 = v1187;
            goto LABEL_1365;
          }
          v618 = 0;
          uint64_t v619 = **(void **)v40;
          v1196 = &v1198;
          uint64_t v1197 = 0x200000000;
          uint64_t v1204 = v619;
          v1205 = &v1213;
          v1206 = &v1214;
          uint64_t v1207 = 0;
          int v1208 = 0;
          __int16 v1209 = 512;
          char v1210 = 7;
          v1202 = 0;
          v1203 = 0;
          uint64_t v1211 = 0;
          uint64_t v1212 = 0;
          v1213 = &unk_1F2616E88;
          v1214 = &unk_1F2617008;
          v1202 = (void *)*((void *)v40 + 5);
          v1203 = (void **)((char *)v40 + 24);
          v620 = (llvm::Value *)*((void *)v40 + 6);
          v1191 = (uint64_t **)v620;
          if (v620)
          {
            llvm::MetadataTracking::track((uint64_t)&v1191, (unsigned __int8 *)v620, 2);
            v618 = (llvm::Value *)v1191;
          }
          sub_1CB8461A4((uint64_t)&v1196, 0, (uint64_t)v618);
          if (v1191)
          {
            int v733 = *(unsigned __int8 *)v1191;
            if ((v733 - 4) > 0x1E)
            {
              if ((v733 - 3) >= 0xFFFFFFFE) {
                v762 = (llvm::Value *)v1191;
              }
              else {
                v762 = 0;
              }
              if ((v733 - 3) < 0xFFFFFFFE)
              {
                int v37 = v1169;
                if (v733 == 3) {
                  v1191[1] = 0;
                }
                goto LABEL_1082;
              }
              unint64_t v735 = (unint64_t)v762 + 8;
            }
            else
            {
              if ((*((unsigned char *)v1191 + 1) & 0x7F) != 2 && !*((_DWORD *)v1191 + 3)) {
                goto LABEL_1082;
              }
              v734 = v1191[2];
              if ((v734 & 4) == 0) {
                goto LABEL_1082;
              }
              unint64_t v735 = (unint64_t)v734 & 0xFFFFFFFFFFFFFFF8;
              if (!v735) {
                goto LABEL_1082;
              }
            }
            v1218 = (void **)&v1191;
            sub_1CC5FA668(v735 + 16, &v1218);
            int v37 = v1169;
          }
LABEL_1082:
          v621 = (llvm::Value **)((char *)v39 - 32 * (*((_DWORD *)v38 - 1) & 0x7FFFFFF));
          v622 = v621[8];
          v623 = *v621;
          v624 = v621[4];
          __int16 v1221 = 257;
          v625 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v1196, v622, v623, v624, (const llvm::Twine *)&v1218, 0);
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)(v38 - 3), v625, (llvm::Value *)1);
          v626 = v1187;
          uint64_t v627 = HIDWORD(v1188);
          if (v1187 != v1186)
          {
            unsigned int v631 = v1188;
            goto LABEL_1162;
          }
          if (!HIDWORD(v1188)) {
            goto LABEL_1090;
          }
          v628 = 0;
          uint64_t v629 = 8 * HIDWORD(v1188);
          v630 = (llvm::ValueAsMetadata **)v1187;
          do
          {
            if (*v630 == v40) {
              goto LABEL_1191;
            }
            if (*v630 == (llvm::ValueAsMetadata *)-2) {
              v628 = v630;
            }
            ++v630;
            v629 -= 8;
          }
          while (v629);
          if (!v628)
          {
LABEL_1090:
            unsigned int v631 = v1188;
            if (HIDWORD(v1188) >= v1188)
            {
LABEL_1162:
              if (3 * v631 <= 4 * (HIDWORD(v1188) - v1189))
              {
                if (v631 >= 0x40) {
                  v631 *= 2;
                }
                else {
                  unsigned int v631 = 128;
                }
              }
              else if (v631 - HIDWORD(v1188) >= v631 >> 3)
              {
                goto LABEL_1164;
              }
              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1186, v631);
              unsigned int v631 = v1188;
              v626 = v1187;
LABEL_1164:
              unsigned int v678 = v631 - 1;
              unsigned int v679 = (v631 - 1) & ((v40 >> 4) ^ (v40 >> 9));
              v672 = (llvm::ValueAsMetadata **)&v626[v679];
              v680 = *v672;
              if (*v672 != (llvm::ValueAsMetadata *)-1)
              {
                v674 = 0;
                int v681 = 1;
                while (v680 != v40)
                {
                  if (v674) {
                    BOOL v682 = 0;
                  }
                  else {
                    BOOL v682 = v680 == (llvm::ValueAsMetadata *)-2;
                  }
                  if (v682) {
                    v674 = v672;
                  }
                  unsigned int v683 = v679 + v681++;
                  unsigned int v679 = v683 & v678;
                  v672 = (llvm::ValueAsMetadata **)&v626[v683 & v678];
                  v680 = *v672;
                  if (*v672 == (llvm::ValueAsMetadata *)-1) {
                    goto LABEL_1184;
                  }
                }
                goto LABEL_1191;
              }
LABEL_1183:
              v674 = 0;
LABEL_1184:
              if (v674) {
                v685 = v674;
              }
              else {
                v685 = v672;
              }
              if (*v685 != v40)
              {
                if (*v685 == (llvm::ValueAsMetadata *)-2) {
                  --v1189;
                }
                else {
                  ++HIDWORD(v1188);
                }
                *v685 = v40;
              }
              goto LABEL_1191;
            }
LABEL_1146:
            HIDWORD(v1188) = v627 + 1;
            v626[v627] = v40;
            goto LABEL_1191;
          }
LABEL_1274:
          *v628 = v40;
          --v1189;
          goto LABEL_1191;
        }
        v573 = 0;
        uint64_t v574 = **(void **)v40;
        v1196 = &v1198;
        uint64_t v1197 = 0x200000000;
        uint64_t v1204 = v574;
        v1205 = &v1213;
        v1206 = &v1214;
        uint64_t v1207 = 0;
        int v1208 = 0;
        __int16 v1209 = 512;
        char v1210 = 7;
        v1202 = 0;
        v1203 = 0;
        uint64_t v1211 = 0;
        uint64_t v1212 = 0;
        v1213 = &unk_1F2616E88;
        v1214 = &unk_1F2617008;
        v1202 = (void *)*((void *)v40 + 5);
        v1203 = (void **)((char *)v40 + 24);
        v575 = (llvm::Value *)*((void *)v40 + 6);
        v1191 = (uint64_t **)v575;
        if (v575)
        {
          llvm::MetadataTracking::track((uint64_t)&v1191, (unsigned __int8 *)v575, 2);
          v573 = (llvm::Value *)v1191;
        }
        sub_1CB8461A4((uint64_t)&v1196, 0, (uint64_t)v573);
        if (v1191)
        {
          int v727 = *(unsigned __int8 *)v1191;
          if ((v727 - 4) > 0x1E)
          {
            if ((v727 - 3) >= 0xFFFFFFFE) {
              v760 = (llvm::Value *)v1191;
            }
            else {
              v760 = 0;
            }
            if ((v727 - 3) < 0xFFFFFFFE)
            {
              int v37 = v1169;
              if (v727 == 3) {
                v1191[1] = 0;
              }
              goto LABEL_1049;
            }
            unint64_t v729 = (unint64_t)v760 + 8;
          }
          else
          {
            if ((*((unsigned char *)v1191 + 1) & 0x7F) != 2 && !*((_DWORD *)v1191 + 3)) {
              goto LABEL_1049;
            }
            v728 = v1191[2];
            if ((v728 & 4) == 0) {
              goto LABEL_1049;
            }
            unint64_t v729 = (unint64_t)v728 & 0xFFFFFFFFFFFFFFF8;
            if (!v729) {
              goto LABEL_1049;
            }
          }
          v1218 = (void **)&v1191;
          sub_1CC5FA668(v729 + 16, &v1218);
          int v37 = v1169;
        }
LABEL_1049:
        v576 = (char *)v39 - 32 * (*((_DWORD *)v38 - 1) & 0x7FFFFFF);
        v577 = (void *)*((void *)v576 + 8);
        uint64_t v578 = *((void *)v576 + 12);
        __int16 v1221 = 257;
        v579 = sub_1CB845F20((uint64_t)&v1196, 37, v577, v578, (uint64_t)&v1218);
        v580 = (char *)v39 - 32 * (*((_DWORD *)v38 - 1) & 0x7FFFFFF);
        v581 = (llvm::Value *)*((void *)v580 + 8);
        v582 = (llvm::Value *)*((void *)v580 + 16);
        __int16 v1195 = 257;
        v583 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v1196, v579, v581, v582, (const llvm::Twine *)&v1191, 0);
        v584 = v583;
        uint64_t v585 = *(void *)v1204 + 1984;
        __int16 v1184 = 257;
        if (*(void *)v583 != v585)
        {
          if (*((unsigned __int8 *)v583 + 16) <= 0x14u)
          {
            uint64_t v655 = (*((uint64_t (**)(void **, uint64_t, llvm::Value *, uint64_t))*v1205 + 28))(v1205, 39, v583, v585);
            v584 = (llvm::Instruction *)v655;
            if (v655 && *(unsigned __int8 *)(v655 + 16) >= 0x1Cu)
            {
              (*((void (**)(void **, uint64_t, uint64_t *, void *, void **))*v1206 + 2))(v1206, v655, v1183, v1202, v1203);
              if (v1197)
              {
                v949 = (llvm::MDNode **)v1196;
                v950 = (llvm::MDNode **)((char *)v1196 + 16 * v1197);
                do
                {
                  llvm::Instruction::setMetadata(v584, *(_DWORD *)v949, v949[1]);
                  v949 += 2;
                }
                while (v949 != v950);
              }
              int v37 = v1169;
            }
          }
          else
          {
            __int16 v1221 = 257;
            v584 = llvm::CastInst::Create(39, (uint64_t)v583, v585, (const char **)&v1218, 0);
            (*((void (**)(void **, llvm::Instruction *, uint64_t *, void *, void **))*v1206 + 2))(v1206, v584, v1183, v1202, v1203);
            if (v1197)
            {
              v586 = (llvm::MDNode **)v1196;
              v587 = (llvm::MDNode **)((char *)v1196 + 16 * v1197);
              do
              {
                llvm::Instruction::setMetadata(v584, *(_DWORD *)v586, v586[1]);
                v586 += 2;
              }
              while (v586 != v587);
            }
          }
        }
        v656 = (uint64_t *)((void *)v39 - 4 * (*((_DWORD *)v38 - 1) & 0x7FFFFFF))[4];
        uint64_t v657 = *v656;
        int v658 = *(unsigned __int8 *)(*v656 + 8);
        if (*v656) {
          BOOL v659 = v658 == 15;
        }
        else {
          BOOL v659 = 0;
        }
        if (v659 && !*(void *)(v657 + 24))
        {
          uint64_t ParamElementType = llvm::AttributeList::getParamElementType((llvm::AttributeList *)(v38 + 5), 1);
        }
        else
        {
          if ((v658 & 0xFE) == 0x12) {
            uint64_t v657 = **(void **)(v657 + 16);
          }
          uint64_t ParamElementType = **(void **)(v657 + 16);
        }
        __int16 v1221 = 257;
        v661 = sub_1CB930F7C((uint64_t *)&v1196, ParamElementType, v656, (const char *)v584, (uint64_t)&v1218);
        v662 = (unsigned __int8 *)v661;
        uint64_t v663 = **((void **)v39 - 4 * (*((_DWORD *)v38 - 1) & 0x7FFFFFF));
        __int16 v1195 = 257;
        if (*(void *)v661 != v663)
        {
          if (*((unsigned __int8 *)v661 + 16) <= 0x14u)
          {
            v662 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v1205
                                       + 28))(v1205, 49, v661, v663);
            if (v662) {
              BOOL v666 = v662[16] >= 0x1Cu;
            }
            else {
              BOOL v666 = 0;
            }
            if (v666)
            {
              (*((void (**)(void **, unsigned __int8 *, uint64_t ***, void *, void **))*v1206 + 2))(v1206, v662, &v1191, v1202, v1203);
              if (v1197)
              {
                v947 = (llvm::MDNode **)v1196;
                v948 = (llvm::MDNode **)((char *)v1196 + 16 * v1197);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v662, *(_DWORD *)v947, v947[1]);
                  v947 += 2;
                }
                while (v947 != v948);
              }
              int v37 = v1169;
            }
          }
          else
          {
            __int16 v1221 = 257;
            v662 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v661, v663, (const char **)&v1218, 0);
            (*((void (**)(void **, unsigned __int8 *, uint64_t ***, void *, void **))*v1206 + 2))(v1206, v662, &v1191, v1202, v1203);
            if (v1197)
            {
              v664 = (llvm::MDNode **)v1196;
              v665 = (llvm::MDNode **)((char *)v1196 + 16 * v1197);
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v662, *(_DWORD *)v664, v664[1]);
                v664 += 2;
              }
              while (v664 != v665);
            }
          }
        }
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)(v38 - 3), (llvm::Value *)v662, (llvm::Value *)1);
        v626 = v1187;
        uint64_t v627 = HIDWORD(v1188);
        if (v1187 == v1186)
        {
          if (HIDWORD(v1188))
          {
            v628 = 0;
            uint64_t v667 = 8 * HIDWORD(v1188);
            v668 = (llvm::ValueAsMetadata **)v1187;
            do
            {
              if (*v668 == v40) {
                goto LABEL_1191;
              }
              if (*v668 == (llvm::ValueAsMetadata *)-2) {
                v628 = v668;
              }
              ++v668;
              v667 -= 8;
            }
            while (v667);
            if (v628) {
              goto LABEL_1274;
            }
          }
          unsigned int v669 = v1188;
          if (HIDWORD(v1188) < v1188) {
            goto LABEL_1146;
          }
        }
        else
        {
          unsigned int v669 = v1188;
        }
        if (3 * v669 <= 4 * (HIDWORD(v1188) - v1189))
        {
          if (v669 >= 0x40) {
            v669 *= 2;
          }
          else {
            unsigned int v669 = 128;
          }
        }
        else if (v669 - HIDWORD(v1188) >= v669 >> 3)
        {
LABEL_1150:
          unsigned int v670 = v669 - 1;
          unsigned int v671 = (v669 - 1) & ((v40 >> 4) ^ (v40 >> 9));
          v672 = (llvm::ValueAsMetadata **)&v626[v671];
          v673 = *v672;
          if (*v672 == (llvm::ValueAsMetadata *)-1) {
            goto LABEL_1183;
          }
          v674 = 0;
          int v675 = 1;
          while (v673 != v40)
          {
            if (v674) {
              BOOL v676 = 0;
            }
            else {
              BOOL v676 = v673 == (llvm::ValueAsMetadata *)-2;
            }
            if (v676) {
              v674 = v672;
            }
            unsigned int v677 = v671 + v675++;
            unsigned int v671 = v677 & v670;
            v672 = (llvm::ValueAsMetadata **)&v626[v677 & v670];
            v673 = *v672;
            if (*v672 == (llvm::ValueAsMetadata *)-1) {
              goto LABEL_1184;
            }
          }
LABEL_1191:
          if (v1196 != &v1198) {
            free(v1196);
          }
          goto LABEL_1244;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1186, v669);
        unsigned int v669 = v1188;
        v626 = v1187;
        goto LABEL_1150;
      }
      if ((v268 - 167) >= 2)
      {
        if (v268 != 52)
        {
          if (v268 != 139) {
            goto LABEL_1244;
          }
          uint64_t v559 = *((void *)v39 - 4 * (*((_DWORD *)v38 - 1) & 0x7FFFFFF));
          v1183[0] = 0;
          v1185 = 0;
          uint64_t v560 = *(void *)(v559 + 8);
          if (!v560 || *(void *)(v560 + 8)) {
            goto LABEL_1244;
          }
          int v561 = *(unsigned __int8 *)(v559 + 16);
          if (v561 == 5)
          {
            if (*(_WORD *)(v559 + 18) != 18) {
              goto LABEL_1244;
            }
            v718 = (uint64_t *)(v559 - 32 * (*(_DWORD *)(v559 + 20) & 0x7FFFFFF));
            if (!*v718) {
              goto LABEL_1244;
            }
            v1183[0] = *v718;
            v562 = (llvm::Instruction *)v718[4];
            if (!v562) {
              goto LABEL_1244;
            }
          }
          else
          {
            if (v561 != 46) {
              goto LABEL_1244;
            }
            if (!*(void *)(v559 - 64)) {
              goto LABEL_1244;
            }
            v1183[0] = *(void *)(v559 - 64);
            v562 = *(llvm::Instruction **)(v559 - 32);
            if (!v562) {
              goto LABEL_1244;
            }
          }
          v719 = 0;
          v1185 = v562;
          uint64_t v720 = **(void **)v40;
          v1196 = &v1198;
          uint64_t v1197 = 0x200000000;
          uint64_t v1204 = v720;
          v1205 = &v1213;
          v1206 = &v1214;
          uint64_t v1207 = 0;
          int v1208 = 0;
          __int16 v1209 = 512;
          char v1210 = 7;
          v1202 = 0;
          v1203 = 0;
          uint64_t v1211 = 0;
          uint64_t v1212 = 0;
          v1213 = &unk_1F2616E88;
          v1214 = &unk_1F2617008;
          v1202 = (void *)*((void *)v40 + 5);
          v1203 = (void **)((char *)v40 + 24);
          v721 = (llvm::Value *)*((void *)v40 + 6);
          v1191 = (uint64_t **)v721;
          if (v721)
          {
            llvm::MetadataTracking::track((uint64_t)&v1191, (unsigned __int8 *)v721, 2);
            v719 = (llvm::Value *)v1191;
          }
          sub_1CB8461A4((uint64_t)&v1196, 0, (uint64_t)v719);
          if (v1191)
          {
            int v832 = *(unsigned __int8 *)v1191;
            if ((v832 - 4) > 0x1E)
            {
              if ((v832 - 3) >= 0xFFFFFFFE) {
                v841 = (llvm::Value *)v1191;
              }
              else {
                v841 = 0;
              }
              if ((v832 - 3) < 0xFFFFFFFE)
              {
                if (v832 == 3) {
                  v1191[1] = 0;
                }
                goto LABEL_1253;
              }
              unint64_t v834 = (unint64_t)v841 + 8;
            }
            else
            {
              if ((*((unsigned char *)v1191 + 1) & 0x7F) != 2 && !*((_DWORD *)v1191 + 3)) {
                goto LABEL_1253;
              }
              v833 = v1191[2];
              if ((v833 & 4) == 0) {
                goto LABEL_1253;
              }
              unint64_t v834 = (unint64_t)v833 & 0xFFFFFFFFFFFFFFF8;
              if (!v834) {
                goto LABEL_1253;
              }
            }
            v1218 = (void **)&v1191;
            sub_1CC5FA668(v834 + 16, &v1218);
          }
LABEL_1253:
          v1191 = *(uint64_t ***)v559;
          uint64_t Declaration = llvm::Intrinsic::getDeclaration((uint64_t **)v1160[5], 139, (uint64_t)&v1191, 1);
          uint64_t v723 = Declaration;
          if (Declaration)
          {
            v724 = *(uint64_t ***)(Declaration + 24);
            __int16 v1221 = 257;
            uint64_t v725 = sub_1CB845BAC((uint64_t *)&v1196, v724, (uint64_t **)Declaration, v1183, 1, (uint64_t)&v1218, 0);
            v726 = *(uint64_t ***)(v723 + 24);
          }
          else
          {
            __int16 v1221 = 257;
            uint64_t v725 = sub_1CB845BAC((uint64_t *)&v1196, 0, 0, v1183, 1, (uint64_t)&v1218, 0);
            v726 = 0;
          }
          __int16 v1221 = 257;
          uint64_t v744 = sub_1CB845BAC((uint64_t *)&v1196, v726, (uint64_t **)v723, (uint64_t *)&v1185, 1, (uint64_t)&v1218, 0);
          __int16 v1221 = 257;
          v745 = (llvm::Value *)sub_1CB93098C((uint64_t)&v1196, v725, v744, (llvm::Instruction *)v559, (uint64_t)&v1218);
          llvm::Value::doRAUW(v39, v745, (llvm::Value *)1);
          v746 = v1187;
          uint64_t v747 = HIDWORD(v1188);
          if (v1187 != v1186)
          {
            unsigned int v751 = v1188;
            goto LABEL_1312;
          }
          if (HIDWORD(v1188))
          {
            v748 = 0;
            uint64_t v749 = 8 * HIDWORD(v1188);
            v750 = (llvm::ValueAsMetadata **)v1187;
            do
            {
              if (*v750 == v40) {
                goto LABEL_1390;
              }
              if (*v750 == (llvm::ValueAsMetadata *)-2) {
                v748 = v750;
              }
              ++v750;
              v749 -= 8;
            }
            while (v749);
            if (v748)
            {
              *v748 = v40;
              --v1189;
              goto LABEL_1390;
            }
          }
          unsigned int v751 = v1188;
          if (HIDWORD(v1188) < v1188)
          {
            ++HIDWORD(v1188);
            *(void *)&v1187[8 * v747] = v40;
            goto LABEL_1390;
          }
LABEL_1312:
          if (3 * v751 <= 4 * (HIDWORD(v1188) - v1189))
          {
            if (v751 >= 0x40) {
              v751 *= 2;
            }
            else {
              unsigned int v751 = 128;
            }
          }
          else if (v751 - HIDWORD(v1188) >= v751 >> 3)
          {
LABEL_1314:
            unsigned int v752 = v751 - 1;
            unsigned int v753 = (v751 - 1) & ((v40 >> 4) ^ (v40 >> 9));
            v754 = &v746[8 * v753];
            v755 = *(llvm::ValueAsMetadata **)v754;
            if (*(void *)v754 == -1)
            {
              v756 = 0;
LABEL_1383:
              if (v756) {
                v780 = (llvm::ValueAsMetadata **)v756;
              }
              else {
                v780 = (llvm::ValueAsMetadata **)v754;
              }
              if (*v780 != v40)
              {
                if (*v780 == (llvm::ValueAsMetadata *)-2) {
                  --v1189;
                }
                else {
                  ++HIDWORD(v1188);
                }
                *v780 = v40;
              }
            }
            else
            {
              v756 = 0;
              int v757 = 1;
              while (v755 != v40)
              {
                if (v756) {
                  BOOL v758 = 0;
                }
                else {
                  BOOL v758 = v755 == (llvm::ValueAsMetadata *)-2;
                }
                if (v758) {
                  v756 = v754;
                }
                unsigned int v759 = v753 + v757++;
                unsigned int v753 = v759 & v752;
                v754 = &v746[8 * (v759 & v752)];
                v755 = *(llvm::ValueAsMetadata **)v754;
                if (*(void *)v754 == -1) {
                  goto LABEL_1383;
                }
              }
            }
LABEL_1390:
            v781 = v1187;
            uint64_t v782 = HIDWORD(v1188);
            unsigned int v783 = v1188;
            if (v1187 == v1186)
            {
              if (HIDWORD(v1188))
              {
                v784 = 0;
                uint64_t v785 = 8 * HIDWORD(v1188);
                v786 = v1187;
                do
                {
                  if (*v786 == v559) {
                    goto LABEL_1421;
                  }
                  if (*v786 == -2) {
                    v784 = v786;
                  }
                  ++v786;
                  v785 -= 8;
                }
                while (v785);
                if (v784)
                {
                  void *v784 = v559;
                  --v1189;
                  goto LABEL_1421;
                }
              }
              if (v1188 > HIDWORD(v1188))
              {
                ++HIDWORD(v1188);
                *(void *)&v1187[8 * v782] = v559;
                goto LABEL_1421;
              }
            }
            if (3 * (int)v1188 <= (4 * (HIDWORD(v1188) - v1189)))
            {
              if (v1188 >= 0x40) {
                unsigned int v783 = 2 * v1188;
              }
              else {
                unsigned int v783 = 128;
              }
            }
            else if ((int)v1188 - HIDWORD(v1188) >= v1188 >> 3)
            {
              goto LABEL_1402;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1186, v783);
            unsigned int v783 = v1188;
            v781 = v1187;
LABEL_1402:
            unsigned int v787 = v783 - 1;
            unsigned int v788 = (v783 - 1) & ((v559 >> 4) ^ (v559 >> 9));
            v789 = &v781[8 * v788];
            uint64_t v790 = *(void *)v789;
            if (*(void *)v789 == -1)
            {
              v791 = 0;
LABEL_1414:
              if (v791) {
                v795 = v791;
              }
              else {
                v795 = v789;
              }
              if (*(void *)v795 != v559)
              {
                if (*(void *)v795 == -2) {
                  --v1189;
                }
                else {
                  ++HIDWORD(v1188);
                }
                *(void *)v795 = v559;
              }
            }
            else
            {
              v791 = 0;
              int v792 = 1;
              while (v790 != v559)
              {
                if (v791) {
                  BOOL v793 = 0;
                }
                else {
                  BOOL v793 = v790 == -2;
                }
                if (v793) {
                  v791 = v789;
                }
                unsigned int v794 = v788 + v792++;
                unsigned int v788 = v794 & v787;
                v789 = &v781[8 * (v794 & v787)];
                uint64_t v790 = *(void *)v789;
                if (*(void *)v789 == -1) {
                  goto LABEL_1414;
                }
              }
            }
LABEL_1421:
            if (v1196 != &v1198) {
              free(v1196);
            }
            char __p = 1;
            int v37 = v1169;
            goto LABEL_1244;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1186, v751);
          unsigned int v751 = v1188;
          v746 = v1187;
          goto LABEL_1314;
        }
        v588 = llvm::ConstantInt::get((llvm::ConstantInt *)(**(void **)*(v38 - 3) + 1888), 1uLL, 0);
        v589 = 0;
        v590 = (void *)((void *)v39 - 4 * (*((_DWORD *)v38 - 1) & 0x7FFFFFF))[4];
        unint64_t v591 = *(unsigned int *)(*(v38 - 3) + 8);
        uint64_t v592 = **(void **)v40;
        v1196 = &v1198;
        uint64_t v1197 = 0x200000000;
        uint64_t v1204 = v592;
        v1205 = &v1213;
        v1206 = &v1214;
        uint64_t v1207 = 0;
        int v1208 = 0;
        __int16 v1209 = 512;
        char v1210 = 7;
        v1202 = 0;
        v1203 = 0;
        uint64_t v1211 = 0;
        uint64_t v1212 = 0;
        v1213 = &unk_1F2616E88;
        v1214 = &unk_1F2617008;
        v1202 = (void *)*((void *)v40 + 5);
        v1203 = (void **)((char *)v40 + 24);
        v593 = (llvm::Value *)*((void *)v40 + 6);
        v1191 = (uint64_t **)v593;
        if (v593)
        {
          llvm::MetadataTracking::track((uint64_t)&v1191, (unsigned __int8 *)v593, 2);
          v589 = (llvm::Value *)v1191;
        }
        sub_1CB8461A4((uint64_t)&v1196, 0, (uint64_t)v589);
        if (v1191)
        {
          int v730 = *(unsigned __int8 *)v1191;
          if ((v730 - 4) > 0x1E)
          {
            if ((v730 - 3) >= 0xFFFFFFFE) {
              v761 = (llvm::Value *)v1191;
            }
            else {
              v761 = 0;
            }
            if ((v730 - 3) < 0xFFFFFFFE)
            {
              int v37 = v1169;
              if (v730 == 3) {
                v1191[1] = 0;
              }
              goto LABEL_1058;
            }
            unint64_t v732 = (unint64_t)v761 + 8;
          }
          else
          {
            if ((*((unsigned char *)v1191 + 1) & 0x7F) != 2 && !*((_DWORD *)v1191 + 3)) {
              goto LABEL_1058;
            }
            v731 = v1191[2];
            if ((v731 & 4) == 0) {
              goto LABEL_1058;
            }
            unint64_t v732 = (unint64_t)v731 & 0xFFFFFFFFFFFFFFF8;
            if (!v732) {
              goto LABEL_1058;
            }
          }
          v1218 = (void **)&v1191;
          sub_1CC5FA668(v732 + 16, &v1218);
          int v37 = v1169;
        }
LABEL_1058:
        v1174 = v52;
        if (v591 >> 8 < 0x21)
        {
          uint64_t v640 = ***(void ***)v39;
          uint64_t v641 = ((*(_DWORD *)(*(void *)v39 + 8) >> 8) - 1);
          v642 = *(llvm::ConstantInt **)(v640 + 1960);
          unsigned int v643 = *(_DWORD *)(v640 + 1968);
          LODWORD(v1219) = v643 >> 8;
          if (v643 >> 8 > 0x40) {
            operator new[]();
          }
          if (v643 <= 0xFF) {
            unint64_t v644 = 0;
          }
          else {
            unint64_t v644 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v643) + 63);
          }
          v1218 = (void **)(v644 & v641);
          v645 = llvm::ConstantInt::get(v642, (llvm::LLVMContext *)&v1218, v594);
          if (v1219 >= 0x41 && v1218) {
            MEMORY[0x1D25D9CB0](v1218, 0x1000C8000313F17);
          }
          v646 = (uint64_t **)v1160[5];
          llvm::Intrinsic::getType(*v646, 2168, 0, 0);
          Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v646, 2168, 0, 0);
          llvm::Module::getOrInsertFunction((uint64_t)v646, "llvm.agx2.ft1", (const char *)0xD, Type, 0);
          uint64_t v649 = v648;
          v1191 = 0;
          v650 = (unsigned __int8 *)*((void *)v39 - 4 * (*((_DWORD *)v38 - 1) & 0x7FFFFFF));
          uint64_t v651 = ***(void ***)v649 + 1960;
          __int16 v1221 = 257;
          v1191 = (uint64_t **)sub_1CB844B8C((uint64_t)&v1196, v650, v651, (uint64_t)&v1218);
          v652 = *(uint64_t ***)(v649 + 24);
          __int16 v1221 = 257;
          uint64_t v653 = sub_1CB845BAC((uint64_t *)&v1196, v652, (uint64_t **)v649, (uint64_t *)&v1191, 1, (uint64_t)&v1218, 0);
          __int16 v1221 = 257;
          v654 = sub_1CB84494C((uint64_t)&v1196, (uint64_t)v645, v653, (uint64_t)&v1218, 0, 0);
        }
        else
        {
          v1161 = v590;
          __pb = v588;
          v595 = *(llvm::ConstantInt **)(*(void *)v1204 + 1960);
          unsigned int v596 = *(_DWORD *)(*(void *)v1204 + 1968);
          LODWORD(v1219) = v596 >> 8;
          if (v596 >> 8 >= 0x41) {
            operator new[]();
          }
          v1218 = 0;
          v598 = (unsigned __int8 *)llvm::ConstantInt::get(v595, (llvm::LLVMContext *)&v1218, v594);
          if (v1219 >= 0x41 && v1218) {
            MEMORY[0x1D25D9CB0](v1218, 0x1000C8000313F17);
          }
          v599 = *(llvm::ConstantInt **)(*(void *)v1204 + 1960);
          unsigned int v600 = *(_DWORD *)(*(void *)v1204 + 1968);
          LODWORD(v1219) = v600 >> 8;
          if (v600 >> 8 > 0x40) {
            operator new[]();
          }
          if (v600 <= 0xFF) {
            LOBYTE(v601) = 0;
          }
          else {
            unint64_t v601 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v600) + 63);
          }
          v1218 = (void **)(v601 & 1);
          v603 = (unsigned __int8 *)llvm::ConstantInt::get(v599, (llvm::LLVMContext *)&v1218, v597);
          if (v1219 >= 0x41 && v1218) {
            MEMORY[0x1D25D9CB0](v1218, 0x1000C8000313F17);
          }
          v604 = *(llvm::ConstantInt **)(*(void *)v1204 + 1960);
          unsigned int v605 = *(_DWORD *)(*(void *)v1204 + 1968);
          LODWORD(v1219) = v605 >> 8;
          if (v605 >> 8 > 0x40) {
            operator new[]();
          }
          if (v605 <= 0xFF) {
            LOBYTE(v606) = 0;
          }
          else {
            unint64_t v606 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v605) + 63);
          }
          v1218 = (void **)(v606 & 0x1F);
          v608 = llvm::ConstantInt::get(v604, (llvm::LLVMContext *)&v1218, v602);
          if (v1219 >= 0x41 && v1218) {
            MEMORY[0x1D25D9CB0](v1218, 0x1000C8000313F17);
          }
          v609 = *(llvm::ConstantInt **)(*(void *)v1204 + 1960);
          unsigned int v610 = *(_DWORD *)(*(void *)v1204 + 1968);
          LODWORD(v1219) = v610 >> 8;
          if (v610 >> 8 > 0x40) {
            operator new[]();
          }
          if (v610 <= 0xFF) {
            LOBYTE(v611) = 0;
          }
          else {
            unint64_t v611 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v610) + 63);
          }
          v1218 = (void **)(v611 & 0x20);
          v612 = llvm::ConstantInt::get(v609, (llvm::LLVMContext *)&v1218, v607);
          if (v1219 >= 0x41 && v1218) {
            MEMORY[0x1D25D9CB0](v1218, 0x1000C8000313F17);
          }
          double v614 = llvm::FixedVectorType::get((llvm::FixedVectorType *)(**(void **)*(v38 - 3) + 1960), (llvm::Type *)2);
          v615 = (unsigned __int8 *)*((void *)v39 - 4 * (*((_DWORD *)v38 - 1) & 0x7FFFFFF));
          __int16 v1195 = 257;
          if (*(void *)v615 != v613)
          {
            if (v615[16] <= 0x14u)
            {
              uint64_t v686 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t, double))*v1205 + 28))(v1205, 49, v615, v613, v614);
              v615 = (unsigned __int8 *)v686;
              if (v686)
              {
                if (*(unsigned __int8 *)(v686 + 16) >= 0x1Cu)
                {
                  (*((void (**)(void **, uint64_t, uint64_t ***, void *, void **))*v1206 + 2))(v1206, v686, &v1191, v1202, v1203);
                  if (v1197)
                  {
                    v945 = (llvm::MDNode **)v1196;
                    v946 = (llvm::MDNode **)((char *)v1196 + 16 * v1197);
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v615, *(_DWORD *)v945, v945[1]);
                      v945 += 2;
                    }
                    while (v945 != v946);
                  }
                }
              }
            }
            else
            {
              __int16 v1221 = 257;
              v615 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v615, v613, (const char **)&v1218, 0);
              (*((void (**)(void **, unsigned __int8 *, uint64_t ***, void *, void **))*v1206 + 2))(v1206, v615, &v1191, v1202, v1203);
              if (v1197)
              {
                v616 = (llvm::MDNode **)v1196;
                v617 = (llvm::MDNode **)((char *)v1196 + 16 * v1197);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v615, *(_DWORD *)v616, v616[1]);
                  v616 += 2;
                }
                while (v616 != v617);
              }
            }
          }
          v1183[0] = 0;
          __int16 v1221 = 257;
          v1183[0] = (uint64_t)sub_1CB8445F4((uint64_t)&v1196, v615, v598, (uint64_t)&v1218);
          v1185 = 0;
          __int16 v1221 = 257;
          v1185 = sub_1CB8445F4((uint64_t)&v1196, v615, v603, (uint64_t)&v1218);
          __int16 v1221 = 257;
          v687 = sub_1CB845F20((uint64_t)&v1196, 32, v1185, (uint64_t)v598, (uint64_t)&v1218);
          v688 = (uint64_t **)v1160[5];
          llvm::Intrinsic::getType(*v688, 2168, 0, 0);
          v689 = (llvm::PointerType *)llvm::Intrinsic::getType(*v688, 2168, 0, 0);
          llvm::Module::getOrInsertFunction((uint64_t)v688, "llvm.agx2.ft1", (const char *)0xD, v689, 0);
          uint64_t v691 = v690;
          if (v690) {
            uint64_t v690 = *(void *)(v690 + 24);
          }
          __int16 v1221 = 257;
          uint64_t v692 = sub_1CB845BAC((uint64_t *)&v1196, (uint64_t **)v690, (uint64_t **)v691, (uint64_t *)&v1185, 1, (uint64_t)&v1218, 0);
          __int16 v1221 = 257;
          v693 = sub_1CB84494C((uint64_t)&v1196, (uint64_t)v608, v692, (uint64_t)&v1218, 0, 0);
          if (v691) {
            v694 = *(uint64_t ***)(v691 + 24);
          }
          else {
            v694 = 0;
          }
          __int16 v1221 = 257;
          uint64_t v695 = sub_1CB845BAC((uint64_t *)&v1196, v694, (uint64_t **)v691, v1183, 1, (uint64_t)&v1218, 0);
          __int16 v1221 = 257;
          v696 = sub_1CB84494C((uint64_t)&v1196, (uint64_t)v608, v695, (uint64_t)&v1218, 0, 0);
          __int16 v1221 = 257;
          v697 = sub_1CB844A3C((uint64_t)&v1196, v612, (uint64_t)v696, (uint64_t)&v1218, 0, 0);
          __int16 v1221 = 257;
          v654 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v1196, v687, v697, v693, (const llvm::Twine *)&v1218, 0);
          if (__pb == v1161)
          {
            int v37 = v1169;
          }
          else
          {
            unint64_t v698 = v591 >> 8;
            __int16 v1221 = 257;
            v699 = sub_1CB844AF4((uint64_t)&v1196, v1185, v1183[0], (uint64_t)&v1218);
            __int16 v1195 = 257;
            v701 = sub_1CB845F20((uint64_t)&v1196, 32, v699, (uint64_t)v598, (uint64_t)&v1191);
            v702 = *(llvm::ConstantInt **)(*(void *)v1204 + 1960);
            unsigned int v703 = *(_DWORD *)(*(void *)v1204 + 1968);
            LODWORD(v1219) = v703 >> 8;
            if (v703 >> 8 > 0x40) {
              operator new[]();
            }
            if (v703 <= 0xFF) {
              unint64_t v704 = 0;
            }
            else {
              unint64_t v704 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v703) + 63);
            }
            v1218 = (void **)(v704 & v698);
            v705 = (llvm::Value *)llvm::ConstantInt::get(v702, (llvm::LLVMContext *)&v1218, v700);
            int v37 = v1169;
            if (v1219 >= 0x41 && v1218) {
              MEMORY[0x1D25D9CB0](v1218, 0x1000C8000313F17);
            }
            __int16 v1221 = 257;
            v654 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v1196, v701, v705, v654, (const llvm::Twine *)&v1218, 0);
          }
        }
        uint64_t v706 = *(void *)v39;
        __int16 v1221 = 257;
        v707 = sub_1CB844B8C((uint64_t)&v1196, (unsigned __int8 *)v654, v706, (uint64_t)&v1218);
        llvm::Value::doRAUW(v39, v707, (llvm::Value *)1);
        unsigned int v63 = v1187;
        uint64_t v64 = HIDWORD(v1188);
        if (v1187 != v1186)
        {
          unsigned int v710 = v1188;
          uint64_t v52 = v1174;
          goto LABEL_1220;
        }
        uint64_t v52 = v1174;
        if (!HIDWORD(v1188)) {
          goto LABEL_1216;
        }
        unsigned int v65 = 0;
        uint64_t v708 = 8 * HIDWORD(v1188);
        v709 = (llvm::ValueAsMetadata **)v1187;
        do
        {
          if (*v709 == v40) {
            goto LABEL_1241;
          }
          if (*v709 == (llvm::ValueAsMetadata *)-2) {
            unsigned int v65 = v709;
          }
          ++v709;
          v708 -= 8;
        }
        while (v708);
        if (!v65)
        {
LABEL_1216:
          unsigned int v710 = v1188;
          if (HIDWORD(v1188) >= v1188)
          {
LABEL_1220:
            if (3 * v710 <= 4 * (HIDWORD(v1188) - v1189))
            {
              if (v710 >= 0x40) {
                v710 *= 2;
              }
              else {
                unsigned int v710 = 128;
              }
            }
            else if (v710 - HIDWORD(v1188) >= v710 >> 3)
            {
              goto LABEL_1222;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1186, v710);
            unsigned int v710 = v1188;
            unsigned int v63 = v1187;
LABEL_1222:
            unsigned int v711 = v710 - 1;
            unsigned int v712 = (v710 - 1) & ((v40 >> 4) ^ (v40 >> 9));
            uint64_t v87 = (llvm::ValueAsMetadata **)&v63[v712];
            v713 = *v87;
            if (*v87 != (llvm::ValueAsMetadata *)-1)
            {
              uint64_t v89 = 0;
              int v714 = 1;
              while (v713 != v40)
              {
                if (v89) {
                  BOOL v715 = 0;
                }
                else {
                  BOOL v715 = v713 == (llvm::ValueAsMetadata *)-2;
                }
                if (v715) {
                  uint64_t v89 = v87;
                }
                unsigned int v716 = v712 + v714++;
                unsigned int v712 = v716 & v711;
                uint64_t v87 = (llvm::ValueAsMetadata **)&v63[v716 & v711];
                v713 = *v87;
                if (*v87 == (llvm::ValueAsMetadata *)-1) {
                  goto LABEL_1234;
                }
              }
              goto LABEL_1241;
            }
LABEL_1233:
            uint64_t v89 = 0;
LABEL_1234:
            if (v89) {
              v717 = v89;
            }
            else {
              v717 = v87;
            }
            if (*v717 != v40)
            {
              if (*v717 == (llvm::ValueAsMetadata *)-2) {
                --v1189;
              }
              else {
                ++HIDWORD(v1188);
              }
              *v717 = v40;
            }
            goto LABEL_1241;
          }
LABEL_738:
          HIDWORD(v1188) = v64 + 1;
          v63[v64] = v40;
LABEL_1241:
          if (v1196 != &v1198) {
            free(v1196);
          }
          goto LABEL_1243;
        }
LABEL_1218:
        *unsigned int v65 = v40;
        --v1189;
        goto LABEL_1241;
      }
      v567 = v1187;
      uint64_t v568 = HIDWORD(v1188);
      if (v1187 == v1186)
      {
        if (HIDWORD(v1188))
        {
          v569 = 0;
          uint64_t v570 = 8 * HIDWORD(v1188);
          v571 = (llvm::ValueAsMetadata **)v1187;
          do
          {
            if (*v571 == v40) {
              goto LABEL_1244;
            }
            if (*v571 == (llvm::ValueAsMetadata *)-2) {
              v569 = v571;
            }
            ++v571;
            v570 -= 8;
          }
          while (v570);
          if (v569)
          {
            *v569 = v40;
            --v1189;
            goto LABEL_1244;
          }
        }
        unsigned int v572 = v1188;
        if (HIDWORD(v1188) < v1188)
        {
          ++HIDWORD(v1188);
          *(void *)&v1187[8 * v568] = v40;
          goto LABEL_1244;
        }
      }
      else
      {
        unsigned int v572 = v1188;
      }
      if (3 * v572 <= 4 * (HIDWORD(v1188) - v1189))
      {
        if (v572 >= 0x40) {
          v572 *= 2;
        }
        else {
          unsigned int v572 = 128;
        }
      }
      else if (v572 - HIDWORD(v1188) >= v572 >> 3)
      {
        goto LABEL_1099;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1186, v572);
      unsigned int v572 = v1188;
      v567 = v1187;
LABEL_1099:
      unsigned int v632 = v572 - 1;
      unsigned int v633 = (v572 - 1) & ((v40 >> 4) ^ (v40 >> 9));
      v634 = &v567[8 * v633];
      v635 = *(llvm::ValueAsMetadata **)v634;
      if (*(void *)v634 == -1)
      {
        v636 = 0;
      }
      else
      {
        v636 = 0;
        int v637 = 1;
        do
        {
          if (v635 == v40) {
            goto LABEL_1244;
          }
          if (v636) {
            BOOL v638 = 0;
          }
          else {
            BOOL v638 = v635 == (llvm::ValueAsMetadata *)-2;
          }
          if (v638) {
            v636 = v634;
          }
          unsigned int v639 = v633 + v637++;
          unsigned int v633 = v639 & v632;
          v634 = &v567[8 * (v639 & v632)];
          v635 = *(llvm::ValueAsMetadata **)v634;
        }
        while (*(void *)v634 != -1);
      }
      if (v636) {
        v684 = (llvm::ValueAsMetadata **)v636;
      }
      else {
        v684 = (llvm::ValueAsMetadata **)v634;
      }
      if (*v684 != v40)
      {
        if (*v684 == (llvm::ValueAsMetadata *)-2) {
          --v1189;
        }
        else {
          ++HIDWORD(v1188);
        }
        *v684 = v40;
      }
LABEL_1244:
      uint64_t v38 = v52;
      if (v52 == v37) {
        goto LABEL_1797;
      }
    }
    if (sub_1CD10DBB4(v76, v1168, v77))
    {
      uint64_t v80 = v52;
      int v81 = sub_1CD10E338((uint64_t)v76, *(void *)v73, v77);
      uint64_t v82 = v81;
      if (v81)
      {
        if (*((unsigned char *)v81 + 16) == 66)
        {
          v1196 = &v1198;
          uint64_t v1197 = 0x800000000;
          uint64_t v83 = *(void *)(v73 + 8);
          if (v83)
          {
            LODWORD(v84) = 0;
            do
            {
              if (v84 >= HIDWORD(v1197)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v1196 + v84) = v83;
              uint64_t v84 = (v1197 + 1);
              LODWORD(v1197) = v1197 + 1;
              uint64_t v83 = *(void *)(v83 + 8);
            }
            while (v83);
            uint64_t v143 = (uint64_t **)v1196;
            if (v84)
            {
              uint64_t v144 = 8 * v84;
              do
              {
                uint64_t v145 = *v143;
                uint64_t v146 = (*v143)[3];
                int v147 = *(unsigned __int8 *)(v146 + 16);
                if (v147 == 62 || v147 == 5 && *(_WORD *)(v146 + 18) == 34)
                {
                  uint64_t v148 = *((void *)v82 - 4);
                  if (*v145)
                  {
                    *(void *)v145[2] = v145[1];
                    uint64_t v149 = v145[1];
                    if (v149) {
                      *(void *)(v149 + 16) = v145[2];
                    }
                  }
                  uint64_t *v145 = v148;
                  if (v148)
                  {
                    uint64_t v152 = *(void *)(v148 + 8);
                    uint64_t v150 = (uint64_t **)(v148 + 8);
                    uint64_t v151 = v152;
                    v145[1] = v152;
                    if (v152) {
                      *(void *)(v151 + 16) = v145 + 1;
                    }
                    v145[2] = (uint64_t)v150;
                    char *v150 = v145;
                  }
                  llvm::ScalarEvolution::forgetValue(v1168, (llvm::Value *)v146);
                }
                ++v143;
                v144 -= 8;
              }
              while (v144);
              uint64_t v143 = (uint64_t **)v1196;
            }
            if (v143 != &v1198) {
              free(v143);
            }
          }
        }
      }
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v73, v82, (llvm::Value *)1);
      uint64_t v153 = v1187;
      uint64_t v154 = HIDWORD(v1188);
      if (v1187 == v1186)
      {
        uint64_t v52 = v80;
        if (HIDWORD(v1188))
        {
          uint64_t v155 = 0;
          uint64_t v156 = 8 * HIDWORD(v1188);
          uint64_t v157 = v1187;
          do
          {
            if (*v157 == v73) {
              goto LABEL_1243;
            }
            if (*v157 == -2) {
              uint64_t v155 = v157;
            }
            ++v157;
            v156 -= 8;
          }
          while (v156);
          if (v155)
          {
            void *v155 = v73;
            goto LABEL_868;
          }
        }
        unsigned int v158 = v1188;
        if (HIDWORD(v1188) < v1188)
        {
          ++HIDWORD(v1188);
          *(void *)&v1187[8 * v154] = v73;
          goto LABEL_1243;
        }
      }
      else
      {
        unsigned int v158 = v1188;
        uint64_t v52 = v80;
      }
      if (3 * v158 <= 4 * (HIDWORD(v1188) - v1189))
      {
        if (v158 >= 0x40) {
          v158 *= 2;
        }
        else {
          unsigned int v158 = 128;
        }
      }
      else if (v158 - HIDWORD(v1188) >= v158 >> 3)
      {
        goto LABEL_250;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1186, v158);
      unsigned int v158 = v1188;
      uint64_t v153 = v1187;
LABEL_250:
      unsigned int v159 = v158 - 1;
      unsigned int v160 = (v158 - 1) & ((v73 >> 4) ^ (v73 >> 9));
      int v161 = &v153[8 * v160];
      uint64_t v162 = *(void *)v161;
      if (*(void *)v161 == -1)
      {
        uint64_t v163 = 0;
LABEL_669:
        if (v163) {
          v430 = v163;
        }
        else {
          v430 = v161;
        }
        if (*(void *)v430 != v73)
        {
          if (*(void *)v430 == -2) {
            --v1189;
          }
          else {
            ++HIDWORD(v1188);
          }
          *(void *)v430 = v73;
        }
      }
      else
      {
        uint64_t v163 = 0;
        int v164 = 1;
        while (v162 != v73)
        {
          if (v163) {
            BOOL v165 = 0;
          }
          else {
            BOOL v165 = v162 == -2;
          }
          if (v165) {
            uint64_t v163 = v161;
          }
          unsigned int v166 = v160 + v164++;
          unsigned int v160 = v166 & v159;
          int v161 = &v153[8 * (v166 & v159)];
          uint64_t v162 = *(void *)v161;
          if (*(void *)v161 == -1) {
            goto LABEL_669;
          }
        }
      }
      goto LABEL_1243;
    }
    int v54 = *((unsigned __int8 *)v40 + 16);
LABEL_132:
    if (v54 == 82) {
      uint64_t v93 = v40;
    }
    else {
      uint64_t v93 = 0;
    }
    if (v38 && v54 == 82)
    {
      if (!*(unsigned char *)(**((void **)v93 - 8) + 8)) {
        goto LABEL_156;
      }
      v1191 = 0;
      v1192 = 0;
      v1191 = (uint64_t **)*((void *)v93 - 8);
      v1192 = (llvm::Value *)*((void *)v93 - 4);
      if (sub_1CB8436A4((uint64_t)&v1191))
      {
        uint64_t v94 = 0;
        uint64_t v95 = **(void **)v40;
        v1196 = &v1198;
        uint64_t v1197 = 0x200000000;
        uint64_t v1204 = v95;
        v1205 = &v1213;
        v1206 = &v1214;
        uint64_t v1207 = 0;
        int v1208 = 0;
        __int16 v1209 = 512;
        char v1210 = 7;
        v1202 = 0;
        v1203 = 0;
        uint64_t v1211 = 0;
        uint64_t v1212 = 0;
        v1213 = &unk_1F2616E88;
        v1214 = &unk_1F2617008;
        v1202 = (void *)*((void *)v40 + 5);
        v1203 = (void **)((char *)v40 + 24);
        uint64_t v96 = (unsigned __int8 *)*((void *)v40 + 6);
        v1183[0] = (uint64_t)v96;
        if (v96)
        {
          llvm::MetadataTracking::track((uint64_t)v1183, v96, 2);
          uint64_t v94 = v1183[0];
        }
        sub_1CB8461A4((uint64_t)&v1196, 0, v94);
        if (v1183[0])
        {
          int v448 = *(unsigned __int8 *)v1183[0];
          if ((v448 - 4) > 0x1E)
          {
            if ((v448 - 3) >= 0xFFFFFFFE) {
              uint64_t v535 = v1183[0];
            }
            else {
              uint64_t v535 = 0;
            }
            if ((v448 - 3) < 0xFFFFFFFE)
            {
              if (v448 == 3) {
                *(void *)(v1183[0] + 8) = 0;
              }
              goto LABEL_142;
            }
            unint64_t v450 = v535 + 8;
          }
          else
          {
            if ((*(unsigned char *)(v1183[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v1183[0] + 12)) {
              goto LABEL_142;
            }
            uint64_t v449 = *(void *)(v1183[0] + 16);
            if ((v449 & 4) == 0) {
              goto LABEL_142;
            }
            unint64_t v450 = v449 & 0xFFFFFFFFFFFFFFF8;
            if (!v450) {
              goto LABEL_142;
            }
          }
          v1218 = (void **)v1183;
          sub_1CC5FA668(v450 + 16, &v1218);
        }
LABEL_142:
        uint64_t v97 = *((_WORD *)v93 + 9) & 0x3F;
        __int16 v1221 = 257;
        FCmpHelper = llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)&v1196, v97, (uint64_t)v1191, (uint64_t)v1192, (uint64_t)&v1218, 0, 0);
        llvm::Value::doRAUW(v40, FCmpHelper, (llvm::Value *)1);
        unsigned int v63 = v1187;
        uint64_t v64 = HIDWORD(v1188);
        if (v1187 == v1186)
        {
          if (HIDWORD(v1188))
          {
            unsigned int v65 = 0;
            uint64_t v99 = 8 * HIDWORD(v1188);
            uint64_t v100 = (llvm::ValueAsMetadata **)v1187;
            do
            {
              if (*v100 == v40) {
                goto LABEL_1241;
              }
              if (*v100 == (llvm::ValueAsMetadata *)-2) {
                unsigned int v65 = v100;
              }
              ++v100;
              v99 -= 8;
            }
            while (v99);
            if (v65) {
              goto LABEL_1218;
            }
          }
          unsigned int v101 = v1188;
          if (HIDWORD(v1188) < v1188) {
            goto LABEL_738;
          }
        }
        else
        {
          unsigned int v101 = v1188;
        }
        if (3 * v101 <= 4 * (HIDWORD(v1188) - v1189))
        {
          if (v101 >= 0x40) {
            v101 *= 2;
          }
          else {
            unsigned int v101 = 128;
          }
        }
        else if (v101 - HIDWORD(v1188) >= v101 >> 3)
        {
          goto LABEL_200;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1186, v101);
        unsigned int v101 = v1188;
        unsigned int v63 = v1187;
LABEL_200:
        unsigned int v131 = v101 - 1;
        unsigned int v132 = (v101 - 1) & ((v40 >> 4) ^ (v40 >> 9));
        uint64_t v87 = (llvm::ValueAsMetadata **)&v63[v132];
        uint64_t v133 = *v87;
        if (*v87 != (llvm::ValueAsMetadata *)-1)
        {
          uint64_t v89 = 0;
          int v134 = 1;
          while (v133 != v40)
          {
            if (v89) {
              BOOL v135 = 0;
            }
            else {
              BOOL v135 = v133 == (llvm::ValueAsMetadata *)-2;
            }
            if (v135) {
              uint64_t v89 = v87;
            }
            unsigned int v136 = v132 + v134++;
            unsigned int v132 = v136 & v131;
            uint64_t v87 = (llvm::ValueAsMetadata **)&v63[v136 & v131];
            uint64_t v133 = *v87;
            if (*v87 == (llvm::ValueAsMetadata *)-1) {
              goto LABEL_1234;
            }
          }
          goto LABEL_1241;
        }
        goto LABEL_1233;
      }
      int v54 = *((unsigned __int8 *)v40 + 16);
    }
    if (v54 == 52)
    {
      int v102 = *((_DWORD *)v40 + 5);
      unsigned __int16 v103 = v52;
      if ((v102 & 0x40000000) != 0) {
        uint64_t v104 = (uint64_t *)*((void *)v40 - 1);
      }
      else {
        uint64_t v104 = (uint64_t *)((char *)v40 - 32 * (v102 & 0x7FFFFFF));
      }
      unsigned int v113 = 0;
      uint64_t v114 = *v104;
      uint64_t v115 = v104[4];
      uint64_t v116 = **(void **)v40;
      v1196 = &v1198;
      uint64_t v1197 = 0x200000000;
      uint64_t v1204 = v116;
      v1205 = &v1213;
      v1206 = &v1214;
      uint64_t v1207 = 0;
      int v1208 = 0;
      __int16 v1209 = 512;
      char v1210 = 7;
      v1202 = 0;
      v1203 = 0;
      uint64_t v1211 = 0;
      uint64_t v1212 = 0;
      v1213 = &unk_1F2616E88;
      v1214 = &unk_1F2617008;
      v1202 = (void *)*((void *)v40 + 5);
      v1203 = (void **)((char *)v40 + 24);
      uint64_t v117 = (llvm::Value *)*((void *)v40 + 6);
      v1191 = (uint64_t **)v117;
      if (v117)
      {
        llvm::MetadataTracking::track((uint64_t)&v1191, (unsigned __int8 *)v117, 2);
        unsigned int v113 = (llvm::Value *)v1191;
      }
      sub_1CB8461A4((uint64_t)&v1196, 0, (uint64_t)v113);
      if (v1191)
      {
        int v170 = *(unsigned __int8 *)v1191;
        if ((v170 - 4) > 0x1E)
        {
          if ((v170 - 3) >= 0xFFFFFFFE) {
            uint64_t v500 = (llvm::Value *)v1191;
          }
          else {
            uint64_t v500 = 0;
          }
          if ((v170 - 3) < 0xFFFFFFFE)
          {
            if (v170 == 3) {
              v1191[1] = 0;
            }
            goto LABEL_173;
          }
          unint64_t v172 = (unint64_t)v500 + 8;
        }
        else
        {
          if ((*((unsigned char *)v1191 + 1) & 0x7F) != 2 && !*((_DWORD *)v1191 + 3)) {
            goto LABEL_173;
          }
          uint64_t v171 = v1191[2];
          if ((v171 & 4) == 0) {
            goto LABEL_173;
          }
          unint64_t v172 = (unint64_t)v171 & 0xFFFFFFFFFFFFFFF8;
          if (!v172) {
            goto LABEL_173;
          }
        }
        v1218 = (void **)&v1191;
        sub_1CC5FA668(v172 + 16, &v1218);
      }
LABEL_173:
      __int16 v1221 = 257;
      uint64_t v118 = (llvm::Value *)sub_1CB9307D8((uint64_t)&v1196, v114, v115, v40, (uint64_t)&v1218);
      __int16 v1221 = 257;
      uint64_t UnaryIntrinsic = llvm::IRBuilderBase::CreateUnaryIntrinsic((llvm::IRBuilderBase *)&v1196, 296, v118, v40, (const llvm::Twine *)&v1218);
      __int16 v1221 = 257;
      uint64_t v120 = sub_1CB93098C((uint64_t)&v1196, UnaryIntrinsic, v115, v40, (uint64_t)&v1218);
      __int16 v1221 = 257;
      unsigned __int8 v121 = (llvm::Value *)sub_1CB930B40((uint64_t)&v1196, v114, v120, v40, (uint64_t)&v1218);
      llvm::Value::doRAUW(v40, v121, (llvm::Value *)1);
      unsigned int v63 = v1187;
      uint64_t v64 = HIDWORD(v1188);
      if (v1187 == v1186)
      {
        uint64_t v52 = v103;
        if (HIDWORD(v1188))
        {
          unsigned int v65 = 0;
          uint64_t v122 = 8 * HIDWORD(v1188);
          uint64_t v123 = (llvm::ValueAsMetadata **)v1187;
          do
          {
            if (*v123 == v40) {
              goto LABEL_1241;
            }
            if (*v123 == (llvm::ValueAsMetadata *)-2) {
              unsigned int v65 = v123;
            }
            ++v123;
            v122 -= 8;
          }
          while (v122);
          if (v65) {
            goto LABEL_1218;
          }
        }
        unsigned int v124 = v1188;
        if (HIDWORD(v1188) < v1188) {
          goto LABEL_738;
        }
      }
      else
      {
        unsigned int v124 = v1188;
        uint64_t v52 = v103;
      }
      if (3 * v124 <= 4 * (HIDWORD(v1188) - v1189))
      {
        if (v124 >= 0x40) {
          v124 *= 2;
        }
        else {
          unsigned int v124 = 128;
        }
      }
      else if (v124 - HIDWORD(v1188) >= v124 >> 3)
      {
        goto LABEL_186;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1186, v124);
      unsigned int v124 = v1188;
      unsigned int v63 = v1187;
LABEL_186:
      unsigned int v125 = v124 - 1;
      unsigned int v126 = (v124 - 1) & ((v40 >> 4) ^ (v40 >> 9));
      uint64_t v87 = (llvm::ValueAsMetadata **)&v63[v126];
      uint64_t v127 = *v87;
      if (*v87 != (llvm::ValueAsMetadata *)-1)
      {
        uint64_t v89 = 0;
        int v128 = 1;
        while (v127 != v40)
        {
          if (v89) {
            BOOL v129 = 0;
          }
          else {
            BOOL v129 = v127 == (llvm::ValueAsMetadata *)-2;
          }
          if (v129) {
            uint64_t v89 = v87;
          }
          unsigned int v130 = v126 + v128++;
          unsigned int v126 = v130 & v125;
          uint64_t v87 = (llvm::ValueAsMetadata **)&v63[v130 & v125];
          uint64_t v127 = *v87;
          if (*v87 == (llvm::ValueAsMetadata *)-1) {
            goto LABEL_1234;
          }
        }
        goto LABEL_1241;
      }
      goto LABEL_1233;
    }
    goto LABEL_156;
  }
LABEL_1798:
  v952 = v1186;
  v951 = v1187;
  unsigned int v953 = HIDWORD(v1188);
  unsigned int v954 = v1188;
  if (v1187 == v1186) {
    uint64_t v955 = HIDWORD(v1188);
  }
  else {
    uint64_t v955 = v1188;
  }
  v956 = v1187;
  v957 = v1159;
  if (v955)
  {
    uint64_t v958 = 0;
    while (*(void *)&v1187[v958] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v958 += 8;
      if (8 * v955 == v958)
      {
        v959 = v1160;
        goto LABEL_1823;
      }
    }
    v956 = &v1187[v958];
  }
  v960 = &v1187[8 * v955];
  v959 = v1160;
  if (v956 != v960)
  {
    unint64_t v961 = *(void *)v956;
LABEL_1809:
    int v962 = *(_DWORD *)(v961 + 20);
    if ((v962 & 0x40000000) != 0)
    {
      unint64_t v964 = *(void *)(v961 - 8);
      uint64_t v963 = v962 & 0x7FFFFFF;
      if (!v963) {
        goto LABEL_1816;
      }
    }
    else
    {
      uint64_t v963 = v962 & 0x7FFFFFF;
      unint64_t v964 = v961 - 32 * v963;
      if (!v963) {
        goto LABEL_1816;
      }
    }
    uint64_t v965 = 32 * v963;
    v966 = (void **)(v964 + 16);
    do
    {
      if (*(v966 - 2))
      {
        void **v966 = *(v966 - 1);
        uint64_t v967 = (uint64_t)*(v966 - 1);
        if (v967) {
          *(void *)(v967 + 16) = *v966;
        }
      }
      *(v966 - 2) = 0;
      v966 += 4;
      v965 -= 32;
    }
    while (v965);
LABEL_1816:
    v968 = (unint64_t *)(v956 + 8);
    while (v968 != (unint64_t *)v960)
    {
      unint64_t v969 = *v968++;
      unint64_t v961 = v969;
      if (v969 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v956 = (char *)(v968 - 1);
        goto LABEL_1809;
      }
    }
    v952 = v1186;
    v951 = v1187;
    unsigned int v953 = HIDWORD(v1188);
    unsigned int v954 = v1188;
  }
LABEL_1823:
  if (v951 == v952) {
    uint64_t v970 = v953;
  }
  else {
    uint64_t v970 = v954;
  }
  v971 = v951;
  if (v970)
  {
    uint64_t v972 = 0;
    while (*(void *)&v951[v972] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v972 += 8;
      if (8 * v970 == v972) {
        goto LABEL_1834;
      }
    }
    v971 = &v951[v972];
  }
  if (v971 != &v951[8 * v970]) {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
LABEL_1834:
  if (v951 != v952)
  {
    if (v1188 >= 0x21 && 4 * (HIDWORD(v1188) - v1189) < v1188)
    {
      llvm::SmallPtrSetImplBase::shrink_and_clear((void **)&v1186);
      goto LABEL_1836;
    }
    memset(v951, 255, 8 * v1188);
  }
  int v1189 = 0;
  HIDWORD(v1188) = 0;
LABEL_1836:
  unsigned int v973 = v1216;
  if (v1216 >= 2)
  {
    qsort(v1215, v1216, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1CB848318);
    unsigned int v973 = v1216;
  }
  v974 = v1215;
  v975 = &v1215[8 * v973];
  v976 = v1215;
  if (v973)
  {
    v976 = v1215 - 8;
    uint64_t v977 = 8 * v973 - 8;
    while (v977)
    {
      uint64_t v978 = *((void *)v976 + 1);
      uint64_t v979 = *((void *)v976 + 2);
      v976 += 8;
      v977 -= 8;
      if (v978 == v979) {
        goto LABEL_1842;
      }
    }
  }
  else
  {
LABEL_1842:
    if (v976 != v975)
    {
      v980 = v976 + 16;
      if (v976 + 16 != v975)
      {
        uint64_t v981 = *(void *)v976;
        do
        {
          uint64_t v982 = v981;
          uint64_t v981 = *(void *)v980;
          if (v982 != *(void *)v980)
          {
            *((void *)v976 + 1) = v981;
            v976 += 8;
          }
          v980 += 8;
        }
        while (v980 != v975);
      }
      v975 = v976 + 8;
    }
  }
  unint64_t v983 = v975 - v974;
  unint64_t v984 = (unint64_t)(v975 - v974) >> 3;
  LODWORD(v1216) = v984;
  if ((v983 >> 3))
  {
    v985 = &v974[8 * v984];
    do
    {
      uint64_t v986 = *(void *)(*(void *)v974 + 8);
      if (!v986) {
LABEL_1861:
      }
        llvm::DominatorTreeBase<llvm::BasicBlock,false>::eraseNode();
      while (1)
      {
        uint64_t v987 = *(void *)(v986 + 24);
        unsigned int v988 = *(unsigned __int8 *)(v987 + 16);
        BOOL v989 = v987 && v988 >= 0x1C;
        if (v989 && v988 - 29 < 0xB) {
          break;
        }
        uint64_t v986 = *(void *)(v986 + 8);
        if (!v986) {
          goto LABEL_1861;
        }
      }
      v974 += 8;
    }
    while (v974 != v985);
  }
  LODWORD(v1216) = 0;
  v991 = (uint64_t *)v959[10];
  if (v991 == v1167) {
    goto LABEL_2138;
  }
  do
  {
    v992 = v991 - 3;
    v1166 = v991;
    if (!v991) {
      v992 = 0;
    }
    v993 = v992 + 5;
    v994 = (uint64_t *)v992[6];
    if (v994 == v992 + 5) {
      goto LABEL_2137;
    }
    v1164 = v992;
    do
    {
      v995 = v994;
      v994 = (uint64_t *)v994[1];
      v996 = v995 - 3;
      if (v995) {
        v997 = (llvm::ValueAsMetadata *)(v995 - 3);
      }
      else {
        v997 = 0;
      }
      int v998 = *((unsigned __int8 *)v997 + 16);
      if (v998 == 67) {
        unint64_t v999 = (unint64_t)v997;
      }
      else {
        unint64_t v999 = 0;
      }
      if (v995 && v998 == 67 && *(_DWORD *)(*(void *)v999 + 8) == 16397)
      {
        v1000 = (void *)*((void *)v997 + 1);
        if (v1000)
        {
          while (*(unsigned char *)(v1000[3] + 16) == 62)
          {
            v1000 = (void *)v1000[1];
            if (!v1000) {
              goto LABEL_1880;
            }
          }
          goto LABEL_1961;
        }
LABEL_1880:
        uint64_t v1001 = *(void *)(v999 - 32);
        if (!*((void *)v997 + 5))
        {
          if (!v1001
            || *(unsigned __int8 *)(v1001 + 16) < 0x1Cu
            || (v996 = *(uint64_t **)(v999 - 32), !*(void *)(v1001 + 40)))
          {
            v996 = 0;
          }
        }
        v1196 = v1182;
        uint64_t v1197 = 0;
        v1198 = v996;
        uint64_t v1199 = 0;
        uint64_t v1200 = 0;
        char v1201 = 1;
        sub_1CC16089C((uint64_t *)v1001, 0, (const llvm::DataLayout **)&v1196, (uint64_t)&v1191);
        uint64_t v1002 = 0;
        unsigned int v1003 = v1192 - 1;
        v1004 = (llvm::Value **)&v1191;
        if (v1192 >= 0x41) {
          v1004 = (llvm::Value **)&v1191[v1003 >> 6];
        }
        v1005 = *v1004;
        uint64_t v1006 = **(void **)v997;
        v1196 = &v1198;
        uint64_t v1197 = 0x200000000;
        uint64_t v1204 = v1006;
        v1205 = &v1213;
        v1206 = &v1214;
        uint64_t v1207 = 0;
        int v1208 = 0;
        __int16 v1209 = 512;
        char v1210 = 7;
        v1202 = 0;
        v1203 = 0;
        uint64_t v1211 = 0;
        uint64_t v1212 = 0;
        v1213 = &unk_1F2616E88;
        v1214 = &unk_1F2617008;
        v1202 = (void *)*((void *)v997 + 5);
        v1203 = (void **)((char *)v997 + 24);
        v1007 = (unsigned __int8 *)*((void *)v997 + 6);
        v1183[0] = (uint64_t)v1007;
        if (v1007)
        {
          llvm::MetadataTracking::track((uint64_t)v1183, v1007, 2);
          uint64_t v1002 = v1183[0];
        }
        sub_1CB8461A4((uint64_t)&v1196, 0, v1002);
        if (v1183[0])
        {
          int v1045 = *(unsigned __int8 *)v1183[0];
          if ((v1045 - 4) > 0x1E)
          {
            if ((v1045 - 3) >= 0xFFFFFFFE) {
              uint64_t v1120 = v1183[0];
            }
            else {
              uint64_t v1120 = 0;
            }
            if ((v1045 - 3) < 0xFFFFFFFE)
            {
              if (v1045 == 3) {
                *(void *)(v1183[0] + 8) = 0;
              }
              goto LABEL_1886;
            }
            unint64_t v1047 = v1120 + 8;
          }
          else
          {
            if ((*(unsigned char *)(v1183[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v1183[0] + 12)) {
              goto LABEL_1886;
            }
            uint64_t v1046 = *(void *)(v1183[0] + 16);
            if ((v1046 & 4) == 0) {
              goto LABEL_1886;
            }
            unint64_t v1047 = v1046 & 0xFFFFFFFFFFFFFFF8;
            if (!v1047) {
              goto LABEL_1886;
            }
          }
          v1218 = (void **)v1183;
          sub_1CC5FA668(v1047 + 16, &v1218);
        }
LABEL_1886:
        v1008 = *(unsigned __int8 **)(v999 - 32);
        uint64_t v1009 = *(void *)v999;
        __int16 v1221 = 257;
        v1010 = (unsigned __int8 *)sub_1CB845504((uint64_t)&v1196, v1008, v1009, (uint64_t)&v1218);
        v1011 = (llvm::Value *)v1010;
        if (v1010) {
          BOOL v1012 = v1010[16] > 0x1Bu;
        }
        else {
          BOOL v1012 = 0;
        }
        int v1013 = v1012;
        if (!v1012)
        {
          llvm::Value::doRAUW(v997, (llvm::Value *)v1010, (llvm::Value *)1);
          goto LABEL_1956;
        }
        if (((unint64_t)v1005 >> v1003))
        {
LABEL_1895:
          llvm::Value::doRAUW(v997, v1011, (llvm::Value *)1);
          v1014 = v1187;
          uint64_t v1015 = HIDWORD(v1188);
          if (v1187 == v1186)
          {
            if (HIDWORD(v1188))
            {
              v1016 = 0;
              uint64_t v1017 = 8 * HIDWORD(v1188);
              v1018 = (llvm::ValueAsMetadata **)v1187;
              while (*v1018 != v997)
              {
                if (*v1018 == (llvm::ValueAsMetadata *)-2) {
                  v1016 = v1018;
                }
                ++v1018;
                v1017 -= 8;
                if (!v1017)
                {
                  if (!v1016) {
                    goto LABEL_1903;
                  }
                  *v1016 = v997;
                  --v1189;
                  goto LABEL_1955;
                }
              }
              goto LABEL_1955;
            }
LABEL_1903:
            unsigned int v1019 = v1188;
            if (HIDWORD(v1188) < v1188)
            {
              ++HIDWORD(v1188);
              *(void *)&v1187[8 * v1015] = v997;
LABEL_1955:
              char __p = 1;
LABEL_1956:
              if (v1196 != &v1198) {
                free(v1196);
              }
              if (v1194 >= 0x41 && v1193) {
                MEMORY[0x1D25D9CB0](v1193, 0x1000C8000313F17);
              }
              if (v1192 >= 0x41 && v1191) {
                MEMORY[0x1D25D9CB0](v1191, 0x1000C8000313F17);
              }
              if (!v1013) {
                continue;
              }
              goto LABEL_1961;
            }
          }
          else
          {
            unsigned int v1019 = v1188;
          }
          if (3 * v1019 <= 4 * (HIDWORD(v1188) - v1189))
          {
            if (v1019 >= 0x40) {
              v1019 *= 2;
            }
            else {
              unsigned int v1019 = 128;
            }
          }
          else if (v1019 - HIDWORD(v1188) >= v1019 >> 3)
          {
            goto LABEL_1914;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1186, v1019);
          unsigned int v1019 = v1188;
          v1014 = v1187;
LABEL_1914:
          unsigned int v1028 = v1019 - 1;
          unsigned int v1029 = (v1019 - 1) & ((v997 >> 4) ^ (v997 >> 9));
          v1030 = &v1014[8 * v1029];
          v1031 = *(llvm::ValueAsMetadata **)v1030;
          if (*(void *)v1030 == -1)
          {
            v1032 = 0;
LABEL_1948:
            if (v1032) {
              v1048 = (llvm::ValueAsMetadata **)v1032;
            }
            else {
              v1048 = (llvm::ValueAsMetadata **)v1030;
            }
            if (*v1048 != v997)
            {
              if (*v1048 == (llvm::ValueAsMetadata *)-2) {
                --v1189;
              }
              else {
                ++HIDWORD(v1188);
              }
              *v1048 = v997;
            }
          }
          else
          {
            v1032 = 0;
            int v1033 = 1;
            while (v1031 != v997)
            {
              if (v1032) {
                BOOL v1034 = 0;
              }
              else {
                BOOL v1034 = v1031 == (llvm::ValueAsMetadata *)-2;
              }
              if (v1034) {
                v1032 = v1030;
              }
              unsigned int v1035 = v1029 + v1033++;
              unsigned int v1029 = v1035 & v1028;
              v1030 = &v1014[8 * (v1035 & v1028)];
              v1031 = *(llvm::ValueAsMetadata **)v1030;
              if (*(void *)v1030 == -1) {
                goto LABEL_1948;
              }
            }
          }
          goto LABEL_1955;
        }
        uint64_t v1020 = *((void *)v1168 + 13);
        unsigned int v1021 = *((_DWORD *)v1168 + 30);
        if (v1021)
        {
          unsigned int v1022 = v1021 - 1;
          unsigned int v1023 = (v1021 - 1) & ((v1010 >> 4) ^ (v1010 >> 9));
          uint64_t v1024 = v1020 + 48 * v1023;
          v1025 = *(unsigned __int8 **)(v1024 + 24);
          if (v1025 != v1010)
          {
            int v1026 = 1;
            while (v1025 != (unsigned __int8 *)-4096)
            {
              unsigned int v1027 = v1023 + v1026++;
              unsigned int v1023 = v1027 & v1022;
              uint64_t v1024 = v1020 + 48 * (v1027 & v1022);
              v1025 = *(unsigned __int8 **)(v1024 + 24);
              if (v1025 == v1010) {
                goto LABEL_1926;
              }
            }
            goto LABEL_1925;
          }
        }
        else
        {
LABEL_1925:
          uint64_t v1024 = v1020 + 48 * v1021;
        }
LABEL_1926:
        if (v1024 == v1020 + 48 * v1021 || (uint64_t SCEVIter = *(void *)(v1024 + 40)) == 0)
        {
          uint64_t SCEVIter = llvm::ScalarEvolution::createSCEVIter(v1168, (unint64_t)v1010);
          uint64_t v1020 = *((void *)v1168 + 13);
          unsigned int v1021 = *((_DWORD *)v1168 + 30);
        }
        uint64_t v1037 = v1020 + 48 * v1021;
        if (v1021)
        {
          unsigned int v1038 = v1021 - 1;
          unsigned int v1039 = v1038 & ((v999 >> 4) ^ (v999 >> 9));
          uint64_t v1040 = v1020 + 48 * v1039;
          uint64_t v1041 = *(void *)(v1040 + 24);
          if (v1041 != v999)
          {
            int v1042 = 1;
            while (v1041 != -4096)
            {
              unsigned int v1043 = v1039 + v1042++;
              unsigned int v1039 = v1043 & v1038;
              uint64_t v1040 = v1020 + 48 * v1039;
              uint64_t v1041 = *(void *)(v1040 + 24);
              if (v1041 == v999) {
                goto LABEL_1936;
              }
            }
            goto LABEL_1935;
          }
        }
        else
        {
LABEL_1935:
          uint64_t v1040 = v1037;
        }
LABEL_1936:
        if (v1040 == v1037 || (uint64_t v1044 = *(void *)(v1040 + 40)) == 0) {
          uint64_t v1044 = llvm::ScalarEvolution::createSCEVIter(v1168, v999);
        }
        if (SCEVIter != v1044) {
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        goto LABEL_1895;
      }
LABEL_1961:
      if (*(_DWORD *)(*(void *)v997 + 8) != 269) {
        continue;
      }
      uint64_t v1049 = v957[7];
      if (!v1049) {
        goto LABEL_2193;
      }
      if (!(*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v1049 + 48))(v1049, v959)) {
        continue;
      }
      if (*((unsigned char *)v997 + 16) == 82) {
        continue;
      }
      v1050 = (void *)*((void *)v997 + 1);
      if (!v1050) {
        continue;
      }
      int v1051 = 0;
      while (1)
      {
        uint64_t v1052 = v1050[3];
        int v1053 = *(unsigned __int8 *)(v1052 + 16);
        if (v1053 == 30) {
          uint64_t v1054 = v1050[3];
        }
        else {
          uint64_t v1054 = 0;
        }
        if ((!v1052 || v1053 != 85 || *(llvm::ValueAsMetadata **)(v1052 - 96) != v997)
          && (!v1054 || *(llvm::ValueAsMetadata **)(v1054 - 32 * (*(_DWORD *)(v1054 + 20) & 0x7FFFFFF)) != v997))
        {
          goto LABEL_1977;
        }
        if (v1051) {
          break;
        }
        int v1051 = 1;
LABEL_1977:
        v1050 = (void *)v1050[1];
        if (!v1050) {
          goto LABEL_2075;
        }
      }
      v1055 = (llvm::Value *)llvm::Instruction::clone(v997);
      v1056 = 0;
      uint64_t v1057 = **(void **)v997;
      v1196 = &v1198;
      uint64_t v1197 = 0x200000000;
      uint64_t v1204 = v1057;
      v1205 = &v1213;
      v1206 = &v1214;
      uint64_t v1207 = 0;
      int v1208 = 0;
      __int16 v1209 = 512;
      char v1210 = 7;
      v1202 = 0;
      v1203 = 0;
      uint64_t v1211 = 0;
      uint64_t v1212 = 0;
      v1213 = &unk_1F2616E88;
      v1214 = &unk_1F2617008;
      v1202 = (void *)*((void *)v997 + 5);
      v1203 = (void **)((char *)v997 + 24);
      v1058 = (llvm::Value *)*((void *)v997 + 6);
      v1191 = (uint64_t **)v1058;
      if (v1058)
      {
        llvm::MetadataTracking::track((uint64_t)&v1191, (unsigned __int8 *)v1058, 2);
        v1056 = (llvm::Value *)v1191;
      }
      sub_1CB8461A4((uint64_t)&v1196, 0, (uint64_t)v1056);
      if (v1191)
      {
        int v1123 = *(unsigned __int8 *)v1191;
        if ((v1123 - 4) > 0x1E)
        {
          if ((v1123 - 3) >= 0xFFFFFFFE) {
            v1129 = (llvm::Value *)v1191;
          }
          else {
            v1129 = 0;
          }
          if ((v1123 - 3) < 0xFFFFFFFE)
          {
            if (v1123 == 3) {
              v1191[1] = 0;
            }
            goto LABEL_1982;
          }
          unint64_t v1125 = (unint64_t)v1129 + 8;
        }
        else
        {
          if ((*((unsigned char *)v1191 + 1) & 0x7F) != 2 && !*((_DWORD *)v1191 + 3)) {
            goto LABEL_1982;
          }
          v1124 = v1191[2];
          if ((v1124 & 4) == 0) {
            goto LABEL_1982;
          }
          unint64_t v1125 = (unint64_t)v1124 & 0xFFFFFFFFFFFFFFF8;
          if (!v1125) {
            goto LABEL_1982;
          }
        }
        v1218 = (void **)&v1191;
        sub_1CC5FA668(v1125 + 16, &v1218);
      }
LABEL_1982:
      if (*((unsigned char *)v997 + 16) == 83)
      {
        for (juint64_t j = (void *)v1164[6]; ; juint64_t j = (void *)jj[1])
        {
          v1061 = jj - 3;
          if (!jj) {
            v1061 = 0;
          }
          if (*((unsigned char *)v1061 + 16) != 83) {
            break;
          }
        }
        v1202 = (void *)jj[2];
        v1203 = (void **)jj;
        v1062 = (llvm::Value *)jj[3];
        v1191 = (uint64_t **)v1062;
        if (v1062)
        {
          llvm::MetadataTracking::track((uint64_t)&v1191, (unsigned __int8 *)v1062, 2);
          v1063 = (llvm::Value *)v1191;
        }
        else
        {
          v1063 = 0;
        }
        sub_1CB8461A4((uint64_t)&v1196, 0, (uint64_t)v1063);
        if (v1191)
        {
          int v1126 = *(unsigned __int8 *)v1191;
          if ((v1126 - 4) > 0x1E)
          {
            if ((v1126 - 3) >= 0xFFFFFFFE) {
              v1130 = (llvm::Value *)v1191;
            }
            else {
              v1130 = 0;
            }
            if ((v1126 - 3) < 0xFFFFFFFE)
            {
              if (v1126 == 3) {
                v1191[1] = 0;
              }
              goto LABEL_1991;
            }
            unint64_t v1128 = (unint64_t)v1130 + 8;
          }
          else
          {
            if ((*((unsigned char *)v1191 + 1) & 0x7F) != 2 && !*((_DWORD *)v1191 + 3)) {
              goto LABEL_1991;
            }
            v1127 = v1191[2];
            if ((v1127 & 4) == 0) {
              goto LABEL_1991;
            }
            unint64_t v1128 = (unint64_t)v1127 & 0xFFFFFFFFFFFFFFF8;
            if (!v1128) {
              goto LABEL_1991;
            }
          }
          v1218 = (void **)&v1191;
          sub_1CC5FA668(v1128 + 16, &v1218);
        }
      }
LABEL_1991:
      v1064 = (llvm::ConstantFP **)(***(void ***)v997 + 1624);
      v1065 = llvm::ConstantFP::get(v1064, v1059, 0.0);
      v1067 = llvm::ConstantFP::get(v1064, v1066, 1.0);
      __int16 v1221 = 257;
      v1068 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v1196, v1055, v1065, v1067, (const llvm::Twine *)&v1218, 0);
      __int16 v1221 = 257;
      v1069 = llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)&v1196, 1, (uint64_t)v1068, (uint64_t)v1065, (uint64_t)&v1218, 0, 0);
      uint64_t v1070 = *((void *)v1068 + 5);
      *((void *)v1055 + 5) = v1070;
      *(_WORD *)(v1070 + 18) &= ~0x8000u;
      if ((*((unsigned char *)v1055 + 23) & 0x10) != 0)
      {
        uint64_t v1121 = *(void *)(v1070 + 56);
        if (v1121)
        {
          v1122 = *(llvm::ValueSymbolTable **)(v1121 + 104);
          if (v1122) {
            llvm::ValueSymbolTable::reinsertValue(v1122, v1055);
          }
        }
      }
      uint64_t v1072 = *((void *)v1068 + 3);
      v1071 = (void *)((char *)v1068 + 24);
      *((void *)v1055 + 3) = v1072;
      *((void *)v1055 + 4) = v1071;
      v1073 = (void *)((char *)v1055 + 24);
      *(void *)(v1072 + 8) = v1073;
      void *v1071 = v1073;
      llvm::Value::doRAUW(v997, v1069, (llvm::Value *)1);
      v1074 = v1187;
      uint64_t v1075 = HIDWORD(v1188);
      if (v1187 != v1186)
      {
        unsigned int v1079 = v1188;
        goto LABEL_2003;
      }
      if (!HIDWORD(v1188))
      {
LABEL_2000:
        unsigned int v1079 = v1188;
        if (HIDWORD(v1188) < v1188)
        {
          ++HIDWORD(v1188);
          *(void *)&v1187[8 * v1075] = v997;
          goto LABEL_2024;
        }
LABEL_2003:
        if (3 * v1079 <= 4 * (HIDWORD(v1188) - v1189))
        {
          if (v1079 >= 0x40) {
            v1079 *= 2;
          }
          else {
            unsigned int v1079 = 128;
          }
        }
        else if (v1079 - HIDWORD(v1188) >= v1079 >> 3)
        {
          goto LABEL_2005;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1186, v1079);
        unsigned int v1079 = v1188;
        v1074 = v1187;
LABEL_2005:
        unsigned int v1080 = v1079 - 1;
        unsigned int v1081 = (v1079 - 1) & ((v997 >> 4) ^ (v997 >> 9));
        v1082 = &v1074[8 * v1081];
        v1083 = *(llvm::ValueAsMetadata **)v1082;
        if (*(void *)v1082 == -1)
        {
          v1084 = 0;
LABEL_2017:
          if (v1084) {
            v1088 = (llvm::ValueAsMetadata **)v1084;
          }
          else {
            v1088 = (llvm::ValueAsMetadata **)v1082;
          }
          if (*v1088 != v997)
          {
            if (*v1088 == (llvm::ValueAsMetadata *)-2) {
              --v1189;
            }
            else {
              ++HIDWORD(v1188);
            }
            *v1088 = v997;
          }
        }
        else
        {
          v1084 = 0;
          int v1085 = 1;
          while (v1083 != v997)
          {
            if (v1084) {
              BOOL v1086 = 0;
            }
            else {
              BOOL v1086 = v1083 == (llvm::ValueAsMetadata *)-2;
            }
            if (v1086) {
              v1084 = v1082;
            }
            unsigned int v1087 = v1081 + v1085++;
            unsigned int v1081 = v1087 & v1080;
            v1082 = &v1074[8 * (v1087 & v1080)];
            v1083 = *(llvm::ValueAsMetadata **)v1082;
            if (*(void *)v1082 == -1) {
              goto LABEL_2017;
            }
          }
        }
        goto LABEL_2024;
      }
      v1076 = 0;
      uint64_t v1077 = 8 * HIDWORD(v1188);
      v1078 = (llvm::ValueAsMetadata **)v1187;
      while (*v1078 != v997)
      {
        if (*v1078 == (llvm::ValueAsMetadata *)-2) {
          v1076 = v1078;
        }
        ++v1078;
        v1077 -= 8;
        if (!v1077)
        {
          if (!v1076) {
            goto LABEL_2000;
          }
          *v1076 = v997;
          --v1189;
          break;
        }
      }
LABEL_2024:
      v1089 = (llvm::Value *)*((void *)v1069 + 5);
      v1220[0] = 0;
      v1218 = 0;
      uint64_t v1219 = 0;
      uint64_t v1090 = *((void *)v1069 + 1);
      if (!v1090) {
        goto LABEL_2071;
      }
      while (2)
      {
        v1092 = (void *)(v1090 + 8);
        uint64_t v1091 = *(void *)(v1090 + 8);
        uint64_t v1093 = *(void *)(v1090 + 24);
        if (*(unsigned char *)(v1093 + 16) != 83)
        {
          v1094 = *(llvm::Value **)(v1093 + 40);
          v1191 = (uint64_t **)v1094;
          if (v1094 != v1089)
          {
            if (!v1220[0])
            {
              v1102 = 0;
              goto LABEL_2042;
            }
            unsigned int v1095 = (v1220[0] - 1) & ((v1094 >> 4) ^ (v1094 >> 9));
            v1096 = (uint64_t *)&v1218[2 * v1095];
            uint64_t v1097 = *v1096;
            if (v1094 != (llvm::Value *)*v1096)
            {
              v1098 = 0;
              int v1099 = 1;
              while (v1097 != -4096)
              {
                if (v1098) {
                  BOOL v1100 = 0;
                }
                else {
                  BOOL v1100 = v1097 == -8192;
                }
                if (v1100) {
                  v1098 = v1096;
                }
                unsigned int v1101 = v1095 + v1099++;
                unsigned int v1095 = v1101 & (v1220[0] - 1);
                v1096 = (uint64_t *)&v1218[2 * v1095];
                uint64_t v1097 = *v1096;
                if (v1094 == (llvm::Value *)*v1096) {
                  goto LABEL_2043;
                }
              }
              if (v1098) {
                v1102 = v1098;
              }
              else {
                v1102 = v1096;
              }
LABEL_2042:
              v1096 = sub_1CB8463E8((uint64_t)&v1218, (uint64_t)&v1191, (uint64_t *)&v1191, v1102);
              uint64_t *v1096 = (uint64_t)v1191;
              v1096[1] = 0;
            }
LABEL_2043:
            uint64_t v1103 = v1096[1];
            if (!v1103)
            {
              v1104 = (uint64_t *)(v1191 + 5);
              for (kunsigned int k = v1191[6]; kk != v1104; kunsigned int k = (uint64_t *)kk[1])
              {
                v1106 = kk - 3;
                if (!kk) {
                  v1106 = 0;
                }
                if (*((unsigned char *)v1106 + 16) != 83)
                {
                  unsigned int v1107 = *((unsigned __int8 *)kk - 8) - 38;
                  BOOL v1012 = v1107 > 0x38;
                  uint64_t v1108 = (1 << v1107) & 0x100060000000001;
                  if (v1012 || v1108 == 0) {
                    v1104 = kk;
                  }
                  else {
                    v1104 = (uint64_t *)kk[1];
                  }
                  break;
                }
              }
              v1110 = (llvm::Value *)llvm::Instruction::clone(v1069);
              v1096[1] = (uint64_t)v1110;
              v1111 = (llvm::Value *)v1191;
              *((void *)v1110 + 5) = v1191;
              *((_WORD *)v1111 + 9) &= ~0x8000u;
              if ((*((unsigned char *)v1110 + 23) & 0x10) != 0)
              {
                uint64_t v1118 = *((void *)v1111 + 7);
                if (v1118)
                {
                  v1119 = *(llvm::ValueSymbolTable **)(v1118 + 104);
                  if (v1119) {
                    llvm::ValueSymbolTable::reinsertValue(v1119, v1110);
                  }
                }
              }
              uint64_t v1112 = *v1104;
              *((void *)v1110 + 3) = *v1104;
              *((void *)v1110 + 4) = v1104;
              v1113 = (void *)((char *)v1110 + 24);
              *(void *)(v1112 + 8) = v1113;
              uint64_t *v1104 = (uint64_t)v1113;
              uint64_t v1103 = v1096[1];
            }
            if (*(void *)v1090)
            {
              **(void **)(v1090 + 16) = *(void *)(v1090 + 8);
              uint64_t v1114 = *(void *)(v1090 + 8);
              if (v1114) {
                *(void *)(v1114 + 16) = *(void *)(v1090 + 16);
              }
            }
            *(void *)uint64_t v1090 = v1103;
            if (v1103)
            {
              uint64_t v1117 = *(void *)(v1103 + 8);
              v1115 = (void *)(v1103 + 8);
              uint64_t v1116 = v1117;
              void *v1092 = v1117;
              if (v1117) {
                *(void *)(v1116 + 16) = v1092;
              }
              *(void *)(v1090 + 16) = v1115;
              void *v1115 = v1090;
            }
          }
        }
        uint64_t v1090 = v1091;
        if (v1091) {
          continue;
        }
        break;
      }
      v957 = v1159;
      v959 = v1160;
      if (!*((void *)v1069 + 1)) {
LABEL_2071:
      }
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      MEMORY[0x1D25D9CD0](v1218, 8);
      if (v1196 != &v1198) {
        free(v1196);
      }
      char __p = 1;
LABEL_2075:
      ;
    }
    while (v994 != v993);
LABEL_2137:
    v991 = (uint64_t *)v1166[1];
  }
  while (v991 != v1167);
LABEL_2138:
  v1132 = v1186;
  v1131 = v1187;
  unsigned int v1133 = HIDWORD(v1188);
  unsigned int v1134 = v1188;
  if (v1187 == v1186) {
    uint64_t v1135 = HIDWORD(v1188);
  }
  else {
    uint64_t v1135 = v1188;
  }
  v1136 = v1187;
  if (v1135)
  {
    uint64_t v1137 = 0;
    while (*(void *)&v1187[v1137] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v1137 += 8;
      if (8 * v1135 == v1137) {
        goto LABEL_2163;
      }
    }
    v1136 = &v1187[v1137];
  }
  v1138 = &v1187[8 * v1135];
  if (v1136 != v1138)
  {
    unint64_t v1139 = *(void *)v1136;
LABEL_2149:
    int v1140 = *(_DWORD *)(v1139 + 20);
    if ((v1140 & 0x40000000) != 0)
    {
      unint64_t v1142 = *(void *)(v1139 - 8);
      uint64_t v1141 = v1140 & 0x7FFFFFF;
      if (v1141) {
        goto LABEL_2151;
      }
    }
    else
    {
      uint64_t v1141 = v1140 & 0x7FFFFFF;
      unint64_t v1142 = v1139 - 32 * v1141;
      if (v1141)
      {
LABEL_2151:
        uint64_t v1143 = 32 * v1141;
        v1144 = (void **)(v1142 + 16);
        do
        {
          if (*(v1144 - 2))
          {
            void **v1144 = *(v1144 - 1);
            uint64_t v1145 = (uint64_t)*(v1144 - 1);
            if (v1145) {
              *(void *)(v1145 + 16) = *v1144;
            }
          }
          *(v1144 - 2) = 0;
          v1144 += 4;
          v1143 -= 32;
        }
        while (v1143);
      }
    }
    v1146 = (unint64_t *)(v1136 + 8);
    while (v1146 != (unint64_t *)v1138)
    {
      unint64_t v1147 = *v1146++;
      unint64_t v1139 = v1147;
      if (v1147 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v1136 = (char *)(v1146 - 1);
        goto LABEL_2149;
      }
    }
    v1132 = v1186;
    v1131 = v1187;
    unsigned int v1133 = HIDWORD(v1188);
    unsigned int v1134 = v1188;
  }
LABEL_2163:
  if (v1131 == v1132) {
    uint64_t v1148 = v1133;
  }
  else {
    uint64_t v1148 = v1134;
  }
  v1149 = v1131;
  if (v1148)
  {
    uint64_t v1150 = 0;
    while (*(void *)&v1131[v1150] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v1150 += 8;
      if (8 * v1148 == v1150) {
        goto LABEL_2174;
      }
    }
    v1149 = &v1131[v1150];
  }
  if (v1149 != &v1131[8 * v1148]) {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
LABEL_2174:
  if (v1131 == v1132)
  {
LABEL_2175:
    int v1189 = 0;
    HIDWORD(v1188) = 0;
  }
  else
  {
    if (v1188 < 0x21 || 4 * (HIDWORD(v1188) - v1189) >= v1188)
    {
      memset(v1131, 255, 8 * v1188);
      goto LABEL_2175;
    }
    llvm::SmallPtrSetImplBase::shrink_and_clear((void **)&v1186);
  }
  if (v1215 != v1217) {
    free(v1215);
  }
  if (v1187 != v1186) {
    free(v1187);
  }
  return __p & 1;
}

uint64_t sub_1CB9307D8(uint64_t a1, uint64_t a2, uint64_t a3, llvm::Instruction *a4, uint64_t a5)
{
  if (!*(unsigned char *)(a1 + 100))
  {
    if (*(unsigned __int8 *)(a2 + 16) >= 0x15u) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = a2;
    }
    if (*(unsigned __int8 *)(a3 + 16) >= 0x15u) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = a3;
    }
    if (v10) {
      BOOL v12 = v11 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12)
    {
      uint64_t v21 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 184))(*(void *)(a1 + 72), 21);
      unsigned int v14 = (llvm::Instruction *)v21;
      if (v21) {
        BOOL v22 = v21[16] >= 0x1Cu;
      }
      else {
        BOOL v22 = 0;
      }
      if (!v22) {
        return (uint64_t)v14;
      }
      uint64_t v23 = sub_1CB844E0C((uint64_t *)a1, (llvm::Instruction *)v21, a5);
      if (v23) {
        return (uint64_t)v23;
      }
    }
    __int16 v25 = 257;
    uint64_t v13 = (uint64_t ***)llvm::BinaryOperator::Create(21, (void *)a2, a3, &v24, 0);
    unsigned int v14 = (llvm::Instruction *)v13;
    char v15 = *((unsigned char *)a4 + 17) & 0xFE;
    uint64_t v16 = *(llvm::MDNode **)(a1 + 88);
    if (v16) {
      llvm::Value::setMetadata(v13, 3, v16);
    }
    *((unsigned char *)v14 + 17) |= v15;
    (*(void (**)(void, llvm::Instruction *, uint64_t, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v14, a5, *(void *)(a1 + 48), *(void *)(a1 + 56));
    uint64_t v17 = *(unsigned int *)(a1 + 8);
    if (v17)
    {
      uint64_t v19 = *(void *)a1;
      uint64_t v20 = v19 + 16 * v17;
      do
      {
        llvm::Instruction::setMetadata(v14, *(_DWORD *)v19, *(llvm::MDNode **)(v19 + 8));
        v19 += 16;
      }
      while (v19 != v20);
    }
    return (uint64_t)v14;
  }
  return llvm::IRBuilderBase::CreateConstrainedFPBinOp(a1, 86, (uint64_t *)a2, a3, a4, a5, 0, 0, 0);
}

uint64_t sub_1CB93098C(uint64_t a1, uint64_t a2, uint64_t a3, llvm::Instruction *a4, uint64_t a5)
{
  if (!*(unsigned char *)(a1 + 100))
  {
    if (*(unsigned __int8 *)(a2 + 16) >= 0x15u) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = a2;
    }
    if (*(unsigned __int8 *)(a3 + 16) >= 0x15u) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = a3;
    }
    if (v10) {
      BOOL v12 = v11 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12)
    {
      uint64_t v21 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 184))(*(void *)(a1 + 72), 18);
      unsigned int v14 = (llvm::Instruction *)v21;
      if (v21) {
        BOOL v22 = v21[16] >= 0x1Cu;
      }
      else {
        BOOL v22 = 0;
      }
      if (!v22) {
        return (uint64_t)v14;
      }
      uint64_t v23 = sub_1CB844E0C((uint64_t *)a1, (llvm::Instruction *)v21, a5);
      if (v23) {
        return (uint64_t)v23;
      }
    }
    __int16 v25 = 257;
    uint64_t v13 = (uint64_t ***)llvm::BinaryOperator::Create(18, (void *)a2, a3, &v24, 0);
    unsigned int v14 = (llvm::Instruction *)v13;
    char v15 = *((unsigned char *)a4 + 17) & 0xFE;
    uint64_t v16 = *(llvm::MDNode **)(a1 + 88);
    if (v16) {
      llvm::Value::setMetadata(v13, 3, v16);
    }
    *((unsigned char *)v14 + 17) |= v15;
    (*(void (**)(void, llvm::Instruction *, uint64_t, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v14, a5, *(void *)(a1 + 48), *(void *)(a1 + 56));
    uint64_t v17 = *(unsigned int *)(a1 + 8);
    if (v17)
    {
      uint64_t v19 = *(void *)a1;
      uint64_t v20 = v19 + 16 * v17;
      do
      {
        llvm::Instruction::setMetadata(v14, *(_DWORD *)v19, *(llvm::MDNode **)(v19 + 8));
        v19 += 16;
      }
      while (v19 != v20);
    }
    return (uint64_t)v14;
  }
  return llvm::IRBuilderBase::CreateConstrainedFPBinOp(a1, 89, (uint64_t *)a2, a3, a4, a5, 0, 0, 0);
}

uint64_t sub_1CB930B40(uint64_t a1, uint64_t a2, uint64_t a3, llvm::Instruction *a4, uint64_t a5)
{
  if (!*(unsigned char *)(a1 + 100))
  {
    if (*(unsigned __int8 *)(a2 + 16) >= 0x15u) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = a2;
    }
    if (*(unsigned __int8 *)(a3 + 16) >= 0x15u) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = a3;
    }
    if (v10) {
      BOOL v12 = v11 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12)
    {
      uint64_t v21 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 184))(*(void *)(a1 + 72), 16);
      unsigned int v14 = (llvm::Instruction *)v21;
      if (v21) {
        BOOL v22 = v21[16] >= 0x1Cu;
      }
      else {
        BOOL v22 = 0;
      }
      if (!v22) {
        return (uint64_t)v14;
      }
      uint64_t v23 = sub_1CB844E0C((uint64_t *)a1, (llvm::Instruction *)v21, a5);
      if (v23) {
        return (uint64_t)v23;
      }
    }
    __int16 v25 = 257;
    uint64_t v13 = (uint64_t ***)llvm::BinaryOperator::Create(16, (void *)a2, a3, &v24, 0);
    unsigned int v14 = (llvm::Instruction *)v13;
    char v15 = *((unsigned char *)a4 + 17) & 0xFE;
    uint64_t v16 = *(llvm::MDNode **)(a1 + 88);
    if (v16) {
      llvm::Value::setMetadata(v13, 3, v16);
    }
    *((unsigned char *)v14 + 17) |= v15;
    (*(void (**)(void, llvm::Instruction *, uint64_t, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v14, a5, *(void *)(a1 + 48), *(void *)(a1 + 56));
    uint64_t v17 = *(unsigned int *)(a1 + 8);
    if (v17)
    {
      uint64_t v19 = *(void *)a1;
      uint64_t v20 = v19 + 16 * v17;
      do
      {
        llvm::Instruction::setMetadata(v14, *(_DWORD *)v19, *(llvm::MDNode **)(v19 + 8));
        v19 += 16;
      }
      while (v19 != v20);
    }
    return (uint64_t)v14;
  }
  return llvm::IRBuilderBase::CreateConstrainedFPBinOp(a1, 96, (uint64_t *)a2, a3, a4, a5, 0, 0, 0);
}

llvm::Instruction *sub_1CB930CF4(uint64_t *a1, uint64_t a2, const llvm::APInt *a3, int a4, uint64_t a5)
{
  uint64_t v9 = *(void *)a1[8];
  uint64_t v10 = *(llvm::ConstantInt **)(v9 + 1960);
  unint64_t v11 = *(unsigned int *)(v9 + 1968);
  unsigned int v24 = v11 >> 8;
  if (v11 >> 8 > 0x40) {
    operator new[]();
  }
  if (v11 <= 0xFF) {
    LODWORD(v12) = 0;
  }
  else {
    unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v11) + 63);
  }
  uint64_t v23 = (const char *)(v12 & a4);
  uint64_t v13 = llvm::ConstantInt::get(v10, (llvm::LLVMContext *)&v23, a3);
  if (v24 >= 0x41 && v23) {
    MEMORY[0x1D25D9CB0](v23, 0x1000C8000313F17);
  }
  int v26 = v13;
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, const llvm::APInt *, void **, uint64_t, void))(*(void *)a1[9] + 48))(a1[9], a2, a3, &v26, 1, 0);
  if (v14) {
    return (llvm::Instruction *)v14;
  }
  __int16 v25 = 257;
  char v15 = (char *)operator new(0x90uLL);
  *((_DWORD *)v15 + 21) = *((_DWORD *)v15 + 21) & 0x38000000 | 2;
  uint64_t v16 = (llvm::Instruction *)(v15 + 64);
  *(void *)char v15 = 0;
  *((void *)v15 + 1) = 0;
  *((void *)v15 + 2) = 0;
  *((void *)v15 + 3) = v15 + 64;
  *((void *)v15 + 4) = 0;
  *((void *)v15 + 5) = 0;
  *((void *)v15 + 6) = 0;
  *((void *)v15 + 7) = v15 + 64;
  sub_1CB845A7C(a2, (uint64_t *)a3, (uint64_t)&v26, 1);
  *((void *)v15 + 8) = v17;
  *((void *)v15 + 9) = 0;
  unsigned int v18 = *((_DWORD *)v15 + 21) & 0xC0000000 | 2;
  *((_DWORD *)v15 + 20) = 62;
  *((_DWORD *)v15 + 21) = v18;
  *(_OWORD *)(v15 + 88) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *((_DWORD *)v15 + 30) = 0;
  *((void *)v15 + 16) = a2;
  *((void *)v15 + 17) = llvm::GetElementPtrInst::getIndexedType(a2, (uint64_t)&v26, 1);
  llvm::GetElementPtrInst::init((uint64_t ***)v15 + 8, (uint64_t **)a3, (uint64_t *)&v26, 1, &v23);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v15 + 64, a5, a1[6], a1[7]);
  uint64_t v19 = *((unsigned int *)a1 + 2);
  if (v19)
  {
    uint64_t v21 = *a1;
    uint64_t v22 = v21 + 16 * v19;
    do
    {
      llvm::Instruction::setMetadata(v16, *(_DWORD *)v21, *(llvm::MDNode **)(v21 + 8));
      v21 += 16;
    }
    while (v21 != v22);
  }
  return v16;
}

llvm::Instruction *sub_1CB930F7C(uint64_t *a1, uint64_t a2, uint64_t *a3, const char *a4, uint64_t a5)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  unsigned int v18 = a4;
  v19[0] = a4;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, const char **, uint64_t, void))(*(void *)a1[9] + 48))(a1[9], a2, a3, v19, 1, 0);
  if (v9) {
    return (llvm::Instruction *)v9;
  }
  __int16 v20 = 257;
  uint64_t v10 = (char *)operator new(0x90uLL);
  *((_DWORD *)v10 + 21) = *((_DWORD *)v10 + 21) & 0x38000000 | 2;
  unint64_t v11 = (llvm::Instruction *)(v10 + 64);
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *((void *)v10 + 3) = v10 + 64;
  *((void *)v10 + 4) = 0;
  *((void *)v10 + 5) = 0;
  *((void *)v10 + 6) = 0;
  *((void *)v10 + 7) = v10 + 64;
  sub_1CB845A7C(a2, a3, (uint64_t)&v18, 1);
  *((void *)v10 + 8) = v12;
  *((void *)v10 + 9) = 0;
  unsigned int v13 = *((_DWORD *)v10 + 21) & 0xC0000000 | 2;
  *((_DWORD *)v10 + 20) = 62;
  *((_DWORD *)v10 + 21) = v13;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_OWORD *)(v10 + 104) = 0u;
  *((_DWORD *)v10 + 30) = 0;
  *((void *)v10 + 16) = a2;
  *((void *)v10 + 17) = llvm::GetElementPtrInst::getIndexedType(a2, (uint64_t)&v18, 1);
  llvm::GetElementPtrInst::init((uint64_t ***)v10 + 8, (uint64_t **)a3, (uint64_t *)&v18, 1, v19);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v10 + 64, a5, a1[6], a1[7]);
  uint64_t v14 = *((unsigned int *)a1 + 2);
  if (v14)
  {
    uint64_t v16 = *a1;
    uint64_t v17 = v16 + 16 * v14;
    do
    {
      llvm::Instruction::setMetadata(v11, *(_DWORD *)v16, *(llvm::MDNode **)(v16 + 8));
      v16 += 16;
    }
    while (v16 != v17);
  }
  return v11;
}

llvm::Instruction *sub_1CB93113C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  __int16 v31 = 257;
  uint64_t v8 = (char *)operator new(0x48uLL);
  *((void *)v8 + 1) = a2;
  uint64_t v9 = (uint64_t ***)(v8 + 8);
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 2) = 0;
  *((void *)v8 + 3) = 0x4000000000000053;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *((_DWORD *)v8 + 16) = 0;
  *((_DWORD *)v8 + 17) = a3;
  llvm::Value::setNameImpl((llvm::Value *)(v8 + 8), &v30);
  if (!v8[24])
  {
    if ((v8[31] & 0x10) == 0) {
      goto LABEL_25;
    }
    uint64_t v16 = ***v9;
    uint64_t v17 = *(void *)(v16 + 152);
    uint64_t v18 = *(unsigned int *)(v16 + 168);
    if (v18)
    {
      LODWORD(v19) = (v18 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      __int16 v20 = (uint64_t ****)(v17 + 16 * v19);
      uint64_t v21 = *v20;
      if (*v20 == v9)
      {
LABEL_17:
        unsigned int v24 = v20[1];
        unint64_t v27 = (unint64_t)*v24;
        __int16 v25 = v24 + 2;
        unint64_t v26 = v27;
        if (v27 >= 5 && *(_DWORD *)v25 == *(_DWORD *)"llvm." && v25[4] == aLlvm_1[4])
        {
          *((_DWORD *)v8 + 10) |= 0x2000u;
          int v29 = llvm::Function::lookupIntrinsicID(v25, v26);
LABEL_24:
          *((_DWORD *)v8 + 11) = v29;
          goto LABEL_2;
        }
LABEL_25:
        int v29 = 0;
        *((_DWORD *)v8 + 10) &= ~0x2000u;
        goto LABEL_24;
      }
      int v22 = 1;
      while (v21 != (uint64_t ***)-4096)
      {
        int v23 = v19 + v22++;
        uint64_t v19 = v23 & (v18 - 1);
        uint64_t v21 = *(uint64_t ****)(v17 + 16 * v19);
        if (v21 == v9)
        {
          __int16 v20 = (uint64_t ****)(v17 + 16 * v19);
          goto LABEL_17;
        }
      }
    }
    __int16 v20 = (uint64_t ****)(v17 + 16 * v18);
    goto LABEL_17;
  }
LABEL_2:
  uint64_t v10 = *((unsigned int *)v8 + 17);
  unint64_t v11 = operator new(40 * v10);
  *(void *)uint64_t v8 = v11;
  if (v10)
  {
    uint64_t v12 = &v11[4 * v10];
    do
    {
      *unint64_t v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
      void v11[3] = v9;
      v11 += 4;
    }
    while (v11 != v12);
  }
  if (sub_1CB845E74((uint64_t)v9))
  {
    int v13 = *(_DWORD *)(a1 + 96);
    uint64_t v14 = *(llvm::MDNode **)(a1 + 88);
    if (v14) {
      llvm::Value::setMetadata(v9, 3, v14);
    }
    v8[25] |= 2 * (_BYTE)v13;
  }
  return sub_1CB844E0C((uint64_t *)a1, (llvm::Instruction *)v9, a4);
}

uint64_t sub_1CB931314(int32x2_t *a1, void *a2)
{
  __int32 v2 = a1[2].i32[0];
  if (v2)
  {
    int32x2_t v4 = *a1;
    __int32 v5 = v2 - 1;
    LODWORD(v6) = ((*a2 >> 4) ^ (*a2 >> 9)) & (v2 - 1);
    uint64_t v7 = (uint64_t *)(*(void *)a1 + 16 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
LABEL_7:
      sub_1CB9313C0(v7 + 1);
      uint64_t *v7 = -8192;
      a1[1] = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
      return 1;
    }
    int v9 = 1;
    while (v8 != -4096)
    {
      int v10 = v6 + v9++;
      uint64_t v6 = v10 & v5;
      uint64_t v8 = *(void *)(*(void *)&v4 + 16 * v6);
      if (*a2 == v8)
      {
        uint64_t v7 = (uint64_t *)(*(void *)&v4 + 16 * v6);
        goto LABEL_7;
      }
    }
  }
  return 0;
}

uint64_t *sub_1CB9313C0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 24);
    if (v3 != (void *)(v2 + 40)) {
      free(v3);
    }
    MEMORY[0x1D25D9CE0](v2, 0x10A0C40528A66C4);
  }
  return a1;
}

uint64_t sub_1CB93141C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1CB9314B4()
{
}

void sub_1CB931554()
{
}

void sub_1CB9315B8(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CB9315F0()
{
  return "AGX2 Specific CodeGen Prepare: CFG Modifying Part";
}

uint64_t sub_1CB931600(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  v535[2] = *MEMORY[0x1E4F143B8];
  int v482 = v486;
  int v483 = v486;
  uint64_t v484 = 8;
  int v485 = 0;
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    int v445 = *(unsigned __int8 *)((*(uint64_t (**)(void, uint64_t))(*(void *)v3 + 16))(*(void *)(a1 + 32), a2)+ 327);
    __int16 v4 = 256;
  }
  else
  {
    int v445 = 0;
    __int16 v4 = 0;
  }
  uint64_t v5 = v2 + 72;
  uint64_t v6 = *(void *)(v2 + 80);
  if (v6 == v2 + 72)
  {
    int v7 = 0;
    goto LABEL_850;
  }
  uint64_t v446 = v3;
  int v7 = 0;
  __int16 v451 = v4 | v445;
  uint64_t v452 = v2;
  uint64_t v453 = v2 + 72;
  do
  {
    uint64_t v8 = v6 - 24;
    if (!v6) {
      uint64_t v8 = 0;
    }
    int v9 = (void *)(v8 + 40);
    int v10 = *(void **)(v8 + 48);
    uint64_t v480 = v6;
    unsigned int v481 = (void *)(v8 + 40);
    if (v10 == (void *)(v8 + 40)) {
      goto LABEL_847;
    }
    do
    {
      unint64_t v11 = (llvm::ValueAsMetadata *)(v10 - 3);
      if (v10) {
        uint64_t v12 = (llvm::ValueAsMetadata *)(v10 - 3);
      }
      else {
        uint64_t v12 = 0;
      }
      int v13 = v482;
      if (v483 == v482)
      {
        int v14 = HIDWORD(v484);
        char v15 = &v483[8 * HIDWORD(v484)];
        if (HIDWORD(v484))
        {
          uint64_t v16 = 0;
          while (*(llvm::ValueAsMetadata **)&v483[v16] != v12)
          {
            v16 += 8;
            if (8 * HIDWORD(v484) == v16) {
              goto LABEL_31;
            }
          }
          char v15 = &v483[v16];
        }
LABEL_31:
        int v13 = v483;
      }
      else
      {
        int v17 = v484 - 1;
        unsigned int v18 = (v484 - 1) & ((v12 >> 4) ^ (v12 >> 9));
        char v15 = &v483[8 * v18];
        uint64_t v19 = *(llvm::ValueAsMetadata **)v15;
        if (*(void *)v15 == -1)
        {
          __int16 v20 = 0;
LABEL_61:
          if (v20) {
            char v15 = v20;
          }
          int v14 = HIDWORD(v484);
          if (*(llvm::ValueAsMetadata **)v15 != v12) {
            char v15 = &v483[8 * v484];
          }
        }
        else
        {
          __int16 v20 = 0;
          int v21 = 1;
          while (v19 != v12)
          {
            if (v20) {
              BOOL v22 = 0;
            }
            else {
              BOOL v22 = v19 == (llvm::ValueAsMetadata *)-2;
            }
            if (v22) {
              __int16 v20 = v15;
            }
            unsigned int v23 = v18 + v21++;
            unsigned int v18 = v23 & v17;
            char v15 = &v483[8 * (v23 & v17)];
            uint64_t v19 = *(llvm::ValueAsMetadata **)v15;
            if (*(void *)v15 == -1) {
              goto LABEL_61;
            }
          }
          int v14 = HIDWORD(v484);
        }
      }
      unsigned int v24 = (void *)v10[1];
      if (v483 == v13) {
        int v25 = v14;
      }
      else {
        int v25 = v484;
      }
      if (v15 != &v483[8 * v25]) {
        goto LABEL_534;
      }
      int v26 = *((unsigned __int8 *)v12 + 16);
      if (v26 == 89) {
        unint64_t v27 = v12;
      }
      else {
        unint64_t v27 = 0;
      }
      if (v10 && v26 == 89)
      {
        uint64_t v28 = *((void *)v27 - 4);
        if (v28) {
          BOOL v29 = *(unsigned char *)(v28 + 16) == 16;
        }
        else {
          BOOL v29 = 0;
        }
        if (!v29) {
          goto LABEL_59;
        }
        int v30 = (unsigned int *)(v28 + 24);
        if (*(_DWORD *)(v28 + 32) >= 0x41u) {
          int v30 = *(unsigned int **)v30;
        }
        ScalarElement = llvm::findScalarElement(*((llvm **)v27 - 8), (llvm::Value *)*v30);
        if (!ScalarElement)
        {
LABEL_59:
          int v38 = 0;
          goto LABEL_89;
        }
        llvm::Value::doRAUW(v27, ScalarElement, (llvm::Value *)1);
        int v32 = v483;
        uint64_t v33 = HIDWORD(v484);
        if (v483 == v482)
        {
          if (HIDWORD(v484))
          {
            uint64_t v34 = 0;
            uint64_t v35 = 8 * HIDWORD(v484);
            long long v36 = (llvm::ValueAsMetadata **)v483;
            while (*v36 != v27)
            {
              if (*v36 == (llvm::ValueAsMetadata *)-2) {
                uint64_t v34 = v36;
              }
              ++v36;
              v35 -= 8;
              if (!v35)
              {
                if (!v34) {
                  goto LABEL_57;
                }
                *uint64_t v34 = v27;
                --v485;
                break;
              }
            }
LABEL_88:
            int v38 = 1;
LABEL_89:
            v7 |= v38;
            int v26 = *((unsigned __int8 *)v12 + 16);
            goto LABEL_90;
          }
LABEL_57:
          unsigned int v37 = v484;
          if (HIDWORD(v484) < v484)
          {
            ++HIDWORD(v484);
            *(void *)&v483[8 * v33] = v27;
            goto LABEL_88;
          }
        }
        else
        {
          unsigned int v37 = v484;
        }
        if (3 * v37 <= 4 * (HIDWORD(v484) - v485))
        {
          if (v37 >= 0x40) {
            v37 *= 2;
          }
          else {
            unsigned int v37 = 128;
          }
        }
        else if (v37 - HIDWORD(v484) >= v37 >> 3)
        {
          goto LABEL_69;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v482, v37);
        unsigned int v37 = v484;
        int v32 = v483;
LABEL_69:
        unsigned int v39 = v37 - 1;
        unsigned int v40 = (v37 - 1) & ((v27 >> 4) ^ (v27 >> 9));
        uint64_t v41 = &v32[8 * v40];
        int v42 = *(llvm::ValueAsMetadata **)v41;
        if (*(void *)v41 == -1)
        {
          uint64_t v43 = 0;
LABEL_81:
          if (v43) {
            uint64_t v47 = v43;
          }
          else {
            uint64_t v47 = (llvm::ValueAsMetadata **)v41;
          }
          if (*v47 != v27)
          {
            if (*v47 == (llvm::ValueAsMetadata *)-2) {
              --v485;
            }
            else {
              ++HIDWORD(v484);
            }
            *uint64_t v47 = v27;
          }
        }
        else
        {
          uint64_t v43 = 0;
          int v44 = 1;
          while (v42 != v27)
          {
            if (v43) {
              BOOL v45 = 0;
            }
            else {
              BOOL v45 = v42 == (llvm::ValueAsMetadata *)-2;
            }
            if (v45) {
              uint64_t v43 = (llvm::ValueAsMetadata **)v41;
            }
            unsigned int v46 = v40 + v44++;
            unsigned int v40 = v46 & v39;
            uint64_t v41 = &v32[8 * (v46 & v39)];
            int v42 = *(llvm::ValueAsMetadata **)v41;
            if (*(void *)v41 == -1) {
              goto LABEL_81;
            }
          }
        }
        goto LABEL_88;
      }
LABEL_90:
      if (v26 != 84) {
        goto LABEL_534;
      }
      uint64_t v48 = *((void *)v12 - 4);
      if (!v48
        || *(unsigned char *)(v48 + 16)
        || *(void *)(v48 + 24) != *((void *)v12 + 9)
        || (*(unsigned char *)(v48 + 33) & 0x20) == 0)
      {
        goto LABEL_534;
      }
      uint64_t v49 = *(void *)(v2 + 80);
      if (v49) {
        uint64_t v50 = v49 - 24;
      }
      else {
        uint64_t v50 = 0;
      }
      int v51 = *(_DWORD *)(*(v10 - 7) + 36);
      int v461 = v7;
      uint64_t v458 = v50;
      if ((v51 - 2426) >= 0x10)
      {
        if ((v51 - 2687) > 0xF)
        {
          int v271 = 0;
          goto LABEL_533;
        }
        uint64_t v52 = (void *)((char *)v11 - 32 * (*((_DWORD *)v10 - 1) & 0x7FFFFFF));
        int v53 = (uint64_t **)v52[8];
        unsigned int v54 = *((unsigned __int8 *)v53 + 16);
        unsigned int v490 = &v482;
        uint64_t v55 = (_DWORD *)*v52;
        uint64_t v56 = (uint64_t *)(*v52 + 24);
        if (v55[8] >= 0x41u) {
          uint64_t v56 = (uint64_t *)*v56;
        }
        uint64_t v57 = *v56;
        sub_1CB93510C(*v56, v451);
        if (v54 < 0x1C)
        {
LABEL_103:
          int v58 = sub_1CB934EB4(*(_DWORD *)(*(v10 - 7) + 36));
          unint64_t v59 = *(void **)(v458 + 48);
          uint64_t v60 = v59 - 3;
          if (!v59) {
            uint64_t v60 = 0;
          }
          for (int i = *((unsigned __int8 *)v60 + 16); i == 83; int i = *((unsigned __int8 *)v62 + 16))
          {
            unint64_t v59 = (void *)v59[1];
            uint64_t v62 = v59 - 3;
            if (!v59) {
              uint64_t v62 = 0;
            }
          }
          uint64_t v71 = 0;
          uint64_t v72 = *(uint64_t ***)(*(void *)(v10[2] + 56) + 40);
          uint64_t v73 = (char *)v11 - 32 * (*((_DWORD *)v10 - 1) & 0x7FFFFFF);
          BOOL v468 = (llvm::DataLayout *)*((void *)v73 + 4);
          uint64_t v474 = *(void **)v73;
          uint64_t v74 = *((void *)v73 + 8);
          uint64_t v75 = *(void *)*(v59 - 3);
          long long v520 = v522;
          uint64_t v521 = 0x200000000;
          uint64_t v525 = v75;
          unsigned int v526 = &v534;
          unsigned int v527 = v535;
          uint64_t v528 = 0;
          int v529 = 0;
          __int16 v530 = 512;
          char v531 = 7;
          v523 = 0;
          uint64_t v524 = 0;
          uint64_t v532 = 0;
          uint64_t v533 = 0;
          v534 = &unk_1F2616E88;
          v535[0] = &unk_1F2617008;
          v523 = (uint64_t *)v59[2];
          uint64_t v524 = v59;
          uint64_t v76 = (void *)v59[3];
          int v516 = v76;
          if (v76)
          {
            llvm::MetadataTracking::track((uint64_t)&v516, (unsigned __int8 *)v76, 2);
            uint64_t v71 = v516;
          }
          sub_1CB8461A4((uint64_t)&v520, 0, (uint64_t)v71);
          if (v516)
          {
            int v272 = *(unsigned __int8 *)v516;
            if ((v272 - 4) > 0x1E)
            {
              if ((v272 - 3) >= 0xFFFFFFFE) {
                BOOL v292 = v516;
              }
              else {
                BOOL v292 = 0;
              }
              if ((v272 - 3) < 0xFFFFFFFE)
              {
                if (v272 == 3) {
                  *((void *)v516 + 1) = 0;
                }
                goto LABEL_118;
              }
              unint64_t v274 = (unint64_t)v292 + 8;
            }
            else
            {
              if ((*((unsigned char *)v516 + 1) & 0x7F) != 2 && !*((_DWORD *)v516 + 3)) {
                goto LABEL_118;
              }
              uint64_t v273 = *((void *)v516 + 2);
              if ((v273 & 4) == 0) {
                goto LABEL_118;
              }
              unint64_t v274 = v273 & 0xFFFFFFFFFFFFFFF8;
              if (!v274) {
                goto LABEL_118;
              }
            }
            uint64_t v499 = &v516;
            sub_1CC5FA668(v274 + 16, &v499);
          }
LABEL_118:
          int v77 = (void *)llvm::PointerType::get((llvm::PointerType *)(**v72 + 1912), 0);
          uint64_t v78 = *(llvm::Type **)v74;
          __int16 v502 = 257;
          uint64_t v79 = sub_1CB935044((uint64_t *)&v520, v78, 0, (uint64_t)&v499);
          uint64_t v80 = 0;
          v523 = (uint64_t *)v10[2];
          uint64_t v524 = v10;
          int v81 = (void *)v10[3];
          int v516 = v81;
          if (v81)
          {
            llvm::MetadataTracking::track((uint64_t)&v516, (unsigned __int8 *)v81, 2);
            uint64_t v80 = v516;
          }
          sub_1CB8461A4((uint64_t)&v520, 0, (uint64_t)v80);
          if (v516)
          {
            int v275 = *(unsigned __int8 *)v516;
            if ((v275 - 4) > 0x1E)
            {
              if ((v275 - 3) >= 0xFFFFFFFE) {
                BOOL v293 = v516;
              }
              else {
                BOOL v293 = 0;
              }
              if ((v275 - 3) < 0xFFFFFFFE)
              {
                if (v275 == 3) {
                  *((void *)v516 + 1) = 0;
                }
                goto LABEL_121;
              }
              unint64_t v277 = (unint64_t)v293 + 8;
            }
            else
            {
              if ((*((unsigned char *)v516 + 1) & 0x7F) != 2 && !*((_DWORD *)v516 + 3)) {
                goto LABEL_121;
              }
              uint64_t v276 = *((void *)v516 + 2);
              if ((v276 & 4) == 0) {
                goto LABEL_121;
              }
              unint64_t v277 = v276 & 0xFFFFFFFFFFFFFFF8;
              if (!v277) {
                goto LABEL_121;
              }
            }
            uint64_t v499 = &v516;
            sub_1CC5FA668(v277 + 16, &v499);
          }
LABEL_121:
          uint64_t v499 = v77;
          uint64_t v82 = v72;
          uint64_t Declaration = llvm::Intrinsic::getDeclaration(v72, v58, (uint64_t)&v499, 1);
          char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v523[7] + 40) + 272), *(llvm::Type **)v74, 1);
          uint64_t v84 = (char *)operator new(0x80uLL);
          unsigned int v85 = v84;
          *((_DWORD *)v84 + 21) = *((_DWORD *)v84 + 21) & 0x38000000 | 2;
          *(void *)uint64_t v84 = 0;
          *((void *)v84 + 2) = 0;
          *((void *)v84 + 1) = 0;
          *((void *)v84 + 5) = 0;
          *((void *)v84 + 6) = 0;
          *((void *)v84 + 4) = 0;
          unsigned int v86 = (llvm::Instruction **)(v84 + 32);
          *((void *)v84 + 8) = ***(void ***)v74 + 1576;
          uint64_t v87 = (llvm::Instruction *)(v84 + 64);
          *((void *)v84 + 3) = v84 + 64;
          *((void *)v84 + 7) = v84 + 64;
          *((void *)v84 + 9) = 0;
          v84[80] = 61;
          v84[81] = 0;
          *((_WORD *)v84 + 41) = 0;
          *((_DWORD *)v84 + 21) = 2;
          *(_OWORD *)(v84 + 88) = 0u;
          *(_OWORD *)(v84 + 104) = 0u;
          *((_DWORD *)v84 + 30) = 0;
          *(void *)uint64_t v84 = v74;
          uint64_t v90 = *(void *)(v74 + 8);
          uint64_t v89 = (void *)(v74 + 8);
          uint64_t v88 = v90;
          *((void *)v84 + 1) = v90;
          if (v90) {
            *(void *)(v88 + 16) = v84 + 8;
          }
          *((void *)v84 + 2) = v89;
          *uint64_t v89 = v84;
          if (*((void *)v84 + 4))
          {
            **((void **)v84 + 6) = *((void *)v84 + 5);
            uint64_t v403 = *((void *)v84 + 5);
            if (v403) {
              *(void *)(v403 + 16) = *((void *)v84 + 6);
            }
          }
          llvm::DataLayout *v86 = v79;
          if (v79)
          {
            BOOL v91 = (llvm::Instruction ***)((char *)v79 + 8);
            uint64_t v92 = *((void *)v79 + 1);
            *((void *)v84 + 5) = v92;
            if (v92) {
              *(void *)(v92 + 16) = v84 + 40;
            }
            *((void *)v84 + 6) = v91;
            *BOOL v91 = v86;
          }
          *((_WORD *)v84 + 41) = 2 * (Alignment & 0x3F);
          v84[124] = 1;
          __int16 v502 = 257;
          (*(void (**)(void *, llvm::Instruction *, void **, uint64_t *, void *))(*v527 + 16))(v527, v87, &v499, v523, v524);
          if (v521)
          {
            uint64_t v291 = (llvm::MDNode **)v520;
            uint64_t v456 = (char *)v520 + 16 * v521;
            do
            {
              char v460 = v291;
              llvm::Instruction::setMetadata(v87, *(_DWORD *)v291, v291[1]);
              uint64_t v291 = v460 + 2;
            }
            while (v460 + 2 != (llvm::MDNode **)v456);
          }
          *((_WORD *)v85 + 41) = *((_WORD *)v85 + 41) & 0xFF81 | (2
                                                                * __clz(1 << llvm::DataLayout::getAlignment((llvm::DataLayout *)(v82 + 34), *((llvm::Type **)v79 + 8), 0))) ^ 0x7E;
          __int16 v519 = 257;
          if (*(void **)v79 == v77)
          {
            int v7 = v461;
            uint64_t v5 = v453;
          }
          else
          {
            uint64_t v5 = v453;
            if (*((unsigned __int8 *)v79 + 16) <= 0x14u)
            {
              uint64_t v79 = (llvm::Instruction *)(*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, void *))*v526
                                          + 28))(v526, 49, v79, v77);
              if (v79) {
                BOOL v189 = *((unsigned __int8 *)v79 + 16) >= 0x1Cu;
              }
              else {
                BOOL v189 = 0;
              }
              int v7 = v461;
              if (v189)
              {
                (*(void (**)(void *, llvm::Instruction *, void **, uint64_t *, void *))(*v527 + 16))(v527, v79, &v516, v523, v524);
                if (v521)
                {
                  int v404 = (llvm::MDNode **)v520;
                  uint64_t v405 = (llvm::MDNode **)((char *)v520 + 16 * v521);
                  do
                  {
                    llvm::Instruction::setMetadata(v79, *(_DWORD *)v404, v404[1]);
                    v404 += 2;
                  }
                  while (v404 != v405);
                }
                int v7 = v461;
                uint64_t v5 = v453;
                int v9 = v481;
              }
            }
            else
            {
              __int16 v502 = 257;
              uint64_t v79 = llvm::CastInst::Create(49, (uint64_t)v79, (uint64_t)v77, (const char **)&v499, 0);
              (*(void (**)(void *, llvm::Instruction *, void **, uint64_t *, void *))(*v527 + 16))(v527, v79, &v516, v523, v524);
              int v7 = v461;
              if (v521)
              {
                uint64_t v93 = (llvm::MDNode **)v520;
                uint64_t v94 = (llvm::MDNode **)((char *)v520 + 16 * v521);
                do
                {
                  llvm::Instruction::setMetadata(v79, *(_DWORD *)v93, v93[1]);
                  v93 += 2;
                }
                while (v93 != v94);
              }
            }
          }
          if (Declaration) {
            uint64_t v190 = *(uint64_t ***)(Declaration + 24);
          }
          else {
            uint64_t v190 = 0;
          }
          int v516 = v474;
          uint64_t v517 = (uint64_t)v468;
          v518[0] = v79;
          __int16 v502 = 257;
          long long v198 = (llvm::Value *)sub_1CB845BAC((uint64_t *)&v520, v190, (uint64_t **)Declaration, (uint64_t *)&v516, 3, (uint64_t)&v499, 0);
          llvm::Value::doRAUW(v11, v198, (llvm::Value *)1);
          int v199 = v483;
          uint64_t v200 = HIDWORD(v484);
          if (v483 != v482)
          {
            unsigned int v204 = v484;
            uint64_t v2 = v452;
            goto LABEL_394;
          }
          uint64_t v2 = v452;
          if (HIDWORD(v484))
          {
            unsigned int v201 = 0;
            uint64_t v202 = 8 * HIDWORD(v484);
            uint64_t v203 = (llvm::ValueAsMetadata **)v483;
            while (*v203 != v11)
            {
              if (*v203 == (llvm::ValueAsMetadata *)-2) {
                unsigned int v201 = v203;
              }
              ++v203;
              v202 -= 8;
              if (!v202)
              {
                if (v201) {
                  goto LABEL_550;
                }
                goto LABEL_391;
              }
            }
            goto LABEL_530;
          }
LABEL_391:
          unsigned int v204 = v484;
          if (HIDWORD(v484) >= v484)
          {
LABEL_394:
            if (3 * v204 <= 4 * (HIDWORD(v484) - v485))
            {
              if (v204 >= 0x40) {
                v204 *= 2;
              }
              else {
                unsigned int v204 = 128;
              }
            }
            else if (v204 - HIDWORD(v484) >= v204 >> 3)
            {
LABEL_396:
              unsigned int v205 = v204 - 1;
              unsigned int v206 = (v204 - 1) & ((v11 >> 4) ^ (v11 >> 9));
              unsigned int v207 = (llvm::ValueAsMetadata **)&v199[v206];
              uint64_t v208 = *v207;
              if (*v207 != (llvm::ValueAsMetadata *)-1)
              {
                unsigned int v209 = 0;
                int v210 = 1;
                while (v208 != v11)
                {
                  if (v209) {
                    BOOL v211 = 0;
                  }
                  else {
                    BOOL v211 = v208 == (llvm::ValueAsMetadata *)-2;
                  }
                  if (v211) {
                    unsigned int v209 = v207;
                  }
                  unsigned int v212 = v206 + v210++;
                  unsigned int v206 = v212 & v205;
                  unsigned int v207 = (llvm::ValueAsMetadata **)&v199[v212 & v205];
                  uint64_t v208 = *v207;
                  if (*v207 == (llvm::ValueAsMetadata *)-1) {
                    goto LABEL_523;
                  }
                }
                goto LABEL_530;
              }
              goto LABEL_522;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v482, v204);
            unsigned int v204 = v484;
            int v199 = v483;
            goto LABEL_396;
          }
LABEL_507:
          HIDWORD(v484) = v200 + 1;
          v199[v200] = v11;
          goto LABEL_530;
        }
        uint64_t v95 = 0xFFFFFFFFLL;
        while (2)
        {
          int v96 = *((unsigned __int8 *)v53 + 16);
          if (v96 == 77)
          {
            int v102 = v53[1];
            if (!v102) {
              goto LABEL_103;
            }
            if (v102[1]) {
              goto LABEL_103;
            }
            int v53 = (uint64_t **)*(v53 - 4);
            if (*((unsigned __int8 *)v53 + 16) < 0x1Cu) {
              goto LABEL_103;
            }
LABEL_152:
            if (!v53) {
              goto LABEL_103;
            }
            continue;
          }
          break;
        }
        if (v96 == 89)
        {
          uint64_t v97 = v53[1];
          if (!v97) {
            goto LABEL_103;
          }
          if (v97[1] || v95 != 0xFFFFFFFFLL) {
            goto LABEL_103;
          }
          uint64_t v99 = (uint64_t)*(v53 - 8);
          if (*(unsigned __int8 *)(v99 + 16) <= 0x1Bu) {
            uint64_t v99 = 0;
          }
          uint64_t v100 = (uint64_t)*(v53 - 4);
          unsigned int v101 = (unsigned int *)(v100 + 24);
          if (*(_DWORD *)(v100 + 32) >= 0x41u) {
            unsigned int v101 = *(unsigned int **)v101;
          }
          uint64_t v95 = *v101;
          int v53 = (uint64_t **)v99;
          goto LABEL_152;
        }
        if (v96 != 60) {
          goto LABEL_103;
        }
        if (v446)
        {
          int v221 = 1 << v57;
          BOOL v222 = v57 != 14 || v445 == 0;
          int v223 = v222 ? 2 : 4;
          int v224 = (v221 & 0xB104) != 0 ? 4 : 1;
          unsigned int v225 = (v221 & 0x40CA) != 0 ? v223 : v224;
        }
        else
        {
          uint64_t v286 = (int)v57;
          unsigned int v287 = *(_DWORD *)((char *)&unk_1CD96ED48 + v286 * 4);
          unsigned int v225 = dword_1CD96ED88[v286];
          if (v287 > v225) {
            unsigned int v225 = v287;
          }
        }
        if (v225 > (1 << ((unint64_t)*((unsigned __int16 *)v53 + 9) >> 1))) {
          goto LABEL_103;
        }
        uint64_t v477 = v57;
        long long v520 = v522;
        uint64_t v521 = 0x800000000;
        sub_1CB935758(v53, (uint64_t)&v520);
        int v516 = v518;
        uint64_t v517 = 0x400000000;
        int v455 = sub_1CB934EB4(*(_DWORD *)(*(v10 - 7) + 36));
        unsigned int v288 = (llvm *)*(v53 - 4);
        int v289 = *(_DWORD *)(*(void *)v288 + 8);
        if ((v289 & 0xFE) == 0x12) {
          int v289 = *(_DWORD *)(**(void **)(*(void *)v288 + 16) + 8);
        }
        if ((v289 & 0xFFFFFF00) == 0x4000
          || (uint64_t v442 = *(void *)v288,
              unint64_t v450 = (void *)((void *)v11 - 4 * (*((_DWORD *)v10 - 1) & 0x7FFFFFF))[4],
              (v289 & 0xFFFFFF00) == 0x300)
          && (UnderlyingObject = (unsigned __int8 *)llvm::getUnderlyingObject(v288, (const llvm::Value *)6),
              UnderlyingObject[16] <= 3u)
          && ((Section = llvm::GlobalValue::getSection((llvm::GlobalValue *)UnderlyingObject), v296 != 8)
           || *(void *)Section != 0x6C61636F6C5F6C63))
        {
          char v290 = 0;
          int v7 = v461;
          uint64_t v5 = v453;
          goto LABEL_793;
        }
        int v448 = (unsigned __int8 *)v288;
        if (v95 == 0xFFFFFFFFLL || !v521)
        {
          unsigned int v305 = v517;
          unsigned int v299 = v450;
          uint64_t v300 = v57;
        }
        else
        {
          uint64_t v297 = (unsigned int *)v520;
          unsigned int v298 = (unsigned int *)((char *)v520 + 16 * v521);
          unsigned int v299 = v450;
          uint64_t v300 = v57;
          while (1)
          {
            uint64_t v301 = *(void *)(*(void *)v297 + 24);
            if (*(unsigned char *)(v301 + 16) != 84) {
              break;
            }
            uint64_t v302 = *(void *)(v301 - 32);
            if (!v302
              || *(unsigned char *)(v302 + 16)
              || *(void *)(v302 + 24) != *(void *)(v301 + 72)
              || (*(unsigned char *)(v302 + 33) & 0x20) == 0
              || *(_DWORD *)(v302 + 36) != *(_DWORD *)(*(v10 - 7) + 36))
            {
              break;
            }
            uint64_t v303 = v297[2];
            if (v517 >= (unint64_t)HIDWORD(v517)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            BOOL v304 = (char *)v516 + 16 * v517;
            *BOOL v304 = v301;
            v304[1] = v303;
            unsigned int v305 = v517 + 1;
            LODWORD(v517) = v517 + 1;
            v297 += 4;
            if (v297 == v298) {
              goto LABEL_639;
            }
          }
          unsigned int v305 = 0;
          LODWORD(v517) = 0;
LABEL_639:
          uint64_t v2 = v452;
          unsigned int v288 = (llvm *)v448;
        }
        uint64_t v308 = (unsigned int *)(v299 + 3);
        if (*((_DWORD *)v299 + 8) >= 0x41u) {
          uint64_t v308 = *(unsigned int **)v308;
        }
        if (v305)
        {
          unsigned int v309 = 0;
          int v310 = 0;
          size_t v311 = *v308;
          uint64_t v312 = 16 * v305;
          int v313 = (char *)v516 + 8;
          size_t v444 = v311;
          do
          {
            int v314 = 1 << *v313;
            uint64_t v315 = *((void *)v313 - 1);
            uint64_t v316 = (uint64_t *)(v315 - 32 * (*(_DWORD *)(v315 + 20) & 0x7FFFFFF));
            uint64_t v317 = *v316;
            uint64_t v318 = v316[4];
            if (*(_DWORD *)(v318 + 32) > 0x40u) {
              int8x8_t v319 = **(int8x8_t **)(v318 + 24);
            }
            else {
              int8x8_t v319 = *(int8x8_t *)(v318 + 24);
            }
            uint8x8_t v320 = (uint8x8_t)vcnt_s8(v319);
            v320.i16[0] = vaddlv_u8(v320);
            v309 += v320.i32[0];
            if ((v314 & v310) != 0 || *(void *)&v319 != v311) {
              goto LABEL_663;
            }
            uint64_t v321 = (void *)(v317 + 24);
            if (*(_DWORD *)(v317 + 32) >= 0x41u) {
              uint64_t v321 = (void *)*v321;
            }
            if (*v321 != v300)
            {
LABEL_663:
              unsigned int v472 = v309;
LABEL_664:
              BOOL v325 = 0;
              goto LABEL_665;
            }
            uint64_t v322 = *(void *)(v315 + 8);
            if ((!v322 || *(void *)(v322 + 8)) && (*(_DWORD *)(*(void *)v315 + 8) & 0xFE) == 0x12)
            {
              unsigned int v472 = v309;
              int v465 = 1 << *v313;
              int v323 = sub_1CD10C794(v315);
              int v314 = v465;
              size_t v311 = v444;
              unsigned int v309 = v472;
              uint64_t v300 = v477;
              if (!v323) {
                goto LABEL_664;
              }
            }
            v310 |= v314;
            v313 += 4;
            v312 -= 16;
          }
          while (v312);
          unsigned int v472 = v309;
          BOOL v325 = v310 == ~(-1 << v521) && v309 < 5;
LABEL_665:
          uint64_t v2 = v452;
          unsigned int v288 = (llvm *)v448;
        }
        else
        {
          unsigned int v472 = 0;
          BOOL v325 = 0;
        }
        uint64_t v326 = 0;
        uint64_t v327 = **v53;
        uint64_t v499 = v501;
        uint64_t v500 = 0x200000000;
        uint64_t v505 = v327;
        uint64_t v506 = &v514;
        unsigned int v507 = &v515;
        uint64_t v508 = 0;
        int v509 = 0;
        __int16 v510 = 512;
        char v511 = 7;
        unint64_t v503 = 0;
        uint64_t v504 = 0;
        uint64_t v512 = 0;
        uint64_t v513 = 0;
        uint64_t v514 = &unk_1F2616E88;
        long long v515 = &unk_1F2617008;
        unint64_t v503 = v53[5];
        uint64_t v504 = v53 + 3;
        unsigned int v328 = v53[6];
        v491 = v328;
        if (v328)
        {
          llvm::MetadataTracking::track((uint64_t)&v491, (unsigned __int8 *)v328, 2);
          uint64_t v326 = v491;
        }
        sub_1CB8461A4((uint64_t)&v499, 0, (uint64_t)v326);
        uint64_t v330 = v442;
        if (v491)
        {
          int v399 = *(unsigned __int8 *)v491;
          if ((v399 - 4) > 0x1E)
          {
            if ((v399 - 3) >= 0xFFFFFFFE) {
              uint64_t v402 = v491;
            }
            else {
              uint64_t v402 = 0;
            }
            if ((v399 - 3) < 0xFFFFFFFE)
            {
              if (v399 == 3) {
                *((void *)v491 + 1) = 0;
              }
              goto LABEL_670;
            }
            unint64_t v401 = (unint64_t)v402 + 8;
          }
          else
          {
            if ((*((unsigned char *)v491 + 1) & 0x7F) != 2 && !*((_DWORD *)v491 + 3)) {
              goto LABEL_670;
            }
            uint64_t v400 = *((void *)v491 + 2);
            if ((v400 & 4) == 0) {
              goto LABEL_670;
            }
            unint64_t v401 = v400 & 0xFFFFFFFFFFFFFFF8;
            if (!v401) {
              goto LABEL_670;
            }
          }
          v495 = &v491;
          sub_1CC5FA668(v401 + 16, &v495);
          uint64_t v330 = v442;
        }
LABEL_670:
        uint64_t v331 = *(uint64_t ***)(v53[5][7] + 40);
        char v332 = v95 == 0xFFFFFFFFLL || v325;
        if ((v332 & 1) == 0)
        {
          char v290 = 0;
          uint64_t v335 = *v53;
          if (*v53 && (v335[1] & 0xFE) == 0x12)
          {
            BOOL v466 = *(uint64_t ***)(v53[5][7] + 40);
            unsigned int v336 = (llvm::PointerType *)v335[3];
            unint64_t v337 = llvm::PointerType::get(v336, (llvm::Type *)(*(_DWORD *)(v330 + 8) >> 8));
            __int16 v494 = 257;
            uint64_t v338 = (const llvm::APInt *)v448;
            BOOL v478 = v325;
            if (*(void *)v448 != v337)
            {
              if (v448[16] <= 0x14u)
              {
                uint64_t v342 = (*((uint64_t (**)(void **, uint64_t))*v506 + 28))(v506, 49);
                int v448 = (unsigned __int8 *)v342;
                if (v342 && *(unsigned __int8 *)(v342 + 16) >= 0x1Cu)
                {
                  (*((void (**)(void **, uint64_t, void **, uint64_t *, void **))*v507 + 2))(v507, v342, &v491, v503, v504);
                  if (v500)
                  {
                    uint64_t v412 = (llvm::MDNode **)v499;
                    uint64_t v413 = (llvm::MDNode **)((char *)v499 + 16 * v500);
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v448, *(_DWORD *)v412, v412[1]);
                      v412 += 2;
                    }
                    while (v412 != v413);
                  }
                  uint64_t v2 = v452;
                  int v9 = v481;
                }
              }
              else
              {
                __int16 v498 = 257;
                int v448 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v448, v337, (const char **)&v495, 0);
                (*((void (**)(void **))*v507 + 2))(v507);
                if (v500)
                {
                  unsigned int v339 = (llvm::MDNode **)v499;
                  __int16 v340 = (llvm::MDNode **)((char *)v499 + 16 * v500);
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v448, *(_DWORD *)v339, v339[1]);
                    v339 += 2;
                  }
                  while (v339 != v340);
                }
              }
            }
            uint64_t v343 = *(llvm::ConstantInt **)(*(void *)v505 + 1984);
            unsigned int v344 = *(_DWORD *)(*(void *)v505 + 1992);
            LODWORD(v496) = v344 >> 8;
            if (v344 >> 8 > 0x40) {
              operator new[]();
            }
            if (v344 <= 0xFF) {
              unint64_t v345 = 0;
            }
            else {
              unint64_t v345 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v344) + 63);
            }
            v495 = (void *)(v345 & v95);
            uint64_t v346 = (const char *)llvm::ConstantInt::get(v343, (llvm::LLVMContext *)&v495, v338);
            int v341 = v455;
            BOOL v325 = v478;
            if (v496 >= 0x41 && v495) {
              MEMORY[0x1D25D9CB0](v495, 0x1000C8000313F17);
            }
            __int16 v498 = 257;
            unsigned int v288 = sub_1CB930F7C((uint64_t *)&v499, (uint64_t)v336, (uint64_t *)v448, v346, (uint64_t)&v495);
LABEL_709:
            uint64_t v331 = v466;
            goto LABEL_710;
          }
          goto LABEL_790;
        }
        if (v325)
        {
          BOOL v466 = *(uint64_t ***)(v53[5][7] + 40);
          switch(v455)
          {
            case 2377:
            case 2379:
            case 2381:
            case 2383:
            case 2385:
            case 2387:
            case 2389:
            case 2391:
            case 2393:
            case 2395:
            case 2397:
            case 2399:
            case 2401:
            case 2403:
            case 2405:
              goto LABEL_897;
            case 2378:
            case 2386:
            case 2394:
            case 2402:
              char v333 = v472;
              uint64_t v334 = (int *)((char *)&unk_1CD96ECC8 + 4 * (int)v472 + 28);
              goto LABEL_703;
            case 2380:
            case 2388:
            case 2396:
            case 2404:
              char v333 = v472;
              uint64_t v334 = (int *)((char *)&unk_1CD96ECC8 + 4 * (int)v472 + 12);
              goto LABEL_703;
            case 2382:
            case 2390:
            case 2398:
            case 2406:
              char v333 = v472;
              uint64_t v334 = (int *)((char *)&unk_1CD96ECC8 + 4 * (int)v472 - 4);
              goto LABEL_703;
            default:
              char v333 = v472;
              uint64_t v334 = (int *)((char *)&unk_1CD96ECC8 + 4 * (int)v472 + 44);
LABEL_703:
              int v341 = *v334;
              uint64_t v347 = *(llvm::ConstantInt **)(*(void *)v505 + 1936);
              unsigned int v348 = *(_DWORD *)(*(void *)v505 + 1944);
              LODWORD(v496) = v348 >> 8;
              if (v348 >> 8 > 0x40) {
                operator new[]();
              }
              if (v348 <= 0xFF) {
                LOWORD(v349) = 0;
              }
              else {
                unint64_t v349 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v348) + 63);
              }
              v495 = (void *)(v349 & (unsigned __int16)~(-1 << v333));
              unint64_t v450 = llvm::ConstantInt::get(v347, (llvm::LLVMContext *)&v495, v329);
              uint64_t v2 = v452;
              if (v496 >= 0x41 && v495) {
                MEMORY[0x1D25D9CB0](v495, 0x1000C8000313F17);
              }
              unsigned int v288 = (llvm *)v448;
              break;
          }
          goto LABEL_709;
        }
        int v341 = v455;
LABEL_710:
        v495 = *(void **)v288;
        uint64_t v350 = llvm::Intrinsic::getDeclaration(v331, v341, (uint64_t)&v495, 1);
        if (v350) {
          long long v351 = *(uint64_t ***)(v350 + 24);
        }
        else {
          long long v351 = 0;
        }
        v491 = v55;
        uint64_t v492 = (uint64_t)v450;
        v493[0] = v288;
        __int16 v498 = 257;
        unsigned int v352 = (llvm::Value *)sub_1CB845BAC((uint64_t *)&v499, v351, (uint64_t **)v350, (uint64_t *)&v491, 3, (uint64_t)&v495, 0);
        unsigned int v354 = v352;
        if (!v325)
        {
          char v290 = 1;
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)(v10 - 3), v352, (llvm::Value *)1);
          v495 = v10 - 3;
          sub_1CB93517C((llvm::SmallPtrSetImplBase **)&v490, &v495, 1);
LABEL_790:
          if (v499 != v501) {
            free(v499);
          }
          int v7 = v461;
          uint64_t v5 = v453;
LABEL_793:
          if (v516 != v518) {
            free(v516);
          }
          if (v520 != v522) {
            free(v520);
          }
          if (v290) {
            goto LABEL_532;
          }
          goto LABEL_103;
        }
        uint64_t v473 = (unsigned __int8 *)v352;
        v495 = v497;
        uint64_t v496 = 0x400000000;
        if (!v517)
        {
          uint64_t v398 = 0;
          unint64_t v397 = v497;
          goto LABEL_787;
        }
        unsigned int v355 = (unsigned int *)v516;
        unsigned int v457 = (unsigned int *)((char *)v516 + 16 * v517);
        while (1)
        {
          uint64_t v356 = *(void *)(*(void *)v355 + 8);
          if (v356) {
            break;
          }
LABEL_783:
          v355 += 4;
          if (v355 == v457)
          {
            unint64_t v397 = v495;
            uint64_t v398 = v496;
            uint64_t v2 = v452;
LABEL_787:
            sub_1CB93517C((llvm::SmallPtrSetImplBase **)&v490, v397, v398);
            if (v495 != v497) {
              free(v495);
            }
            char v290 = 1;
            goto LABEL_790;
          }
        }
        while (2)
        {
          uint64_t v370 = *(void *)(v356 + 24);
          uint64_t v371 = v355[2];
          uint64_t v479 = v356;
          if (v370 && *(unsigned char *)(v370 + 16) == 89)
          {
            uint64_t v372 = *(void *)(v370 - 32);
            int v373 = (void *)(v372 + 24);
            if (*(_DWORD *)(v372 + 32) >= 0x41u) {
              int v373 = (void *)*v373;
            }
            unsigned int v374 = *(llvm::ValueAsMetadata **)(v356 + 24);
            uint64_t v375 = (*(_DWORD *)v373 + *(_DWORD *)(**(void **)(v370 - 64) + 32) * v371);
            v376 = *(llvm::ConstantInt **)(*(void *)v505 + 1960);
            unsigned int v377 = *(_DWORD *)(*(void *)v505 + 1968);
            LODWORD(v492) = v377 >> 8;
            if (v377 >> 8 > 0x40) {
              operator new[]();
            }
            if (v377 <= 0xFF) {
              unint64_t v378 = 0;
            }
            else {
              unint64_t v378 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v377) + 63);
            }
            v491 = (void *)(v378 & v375);
            BOOL v379 = (unsigned __int8 *)llvm::ConstantInt::get(v376, (llvm::LLVMContext *)&v491, v353);
            if (v492 >= 0x41 && v491) {
              MEMORY[0x1D25D9CB0](v491, 0x1000C8000313F17);
            }
            __int16 v494 = 257;
            uint64_t v380 = sub_1CB8445F4((uint64_t)&v499, v473, v379, (uint64_t)&v491);
            llvm::Value::doRAUW(v374, v380, (llvm::Value *)1);
            if (v496 >= (unint64_t)HIDWORD(v496)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v495 + v496) = v374;
            LODWORD(v496) = v496 + 1;
          }
          else
          {
            uint64_t v467 = *(void *)(v356 + 24);
            uint64_t v381 = **(void **)v355;
            if (v381) {
              BOOL v382 = (*(_DWORD *)(v381 + 8) & 0xFE) == 18;
            }
            else {
              BOOL v382 = 0;
            }
            if (v382)
            {
              v491 = v493;
              uint64_t v492 = 0x400000000;
              int v357 = *(_DWORD *)(v381 + 32);
              if (v357)
              {
                for (int j = 0; j != v357; ++j)
                {
                  uint64_t v365 = j + *(_DWORD *)(v381 + 32) * v355[2];
                  uint64_t v366 = *(llvm::ConstantInt **)(*(void *)v505 + 1960);
                  unsigned int v367 = *(_DWORD *)(*(void *)v505 + 1968);
                  unsigned int v488 = v367 >> 8;
                  if (v367 >> 8 > 0x40) {
                    operator new[]();
                  }
                  if (v367 <= 0xFF) {
                    unint64_t v368 = 0;
                  }
                  else {
                    unint64_t v368 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v367) + 63);
                  }
                  unint64_t v487 = v368 & v365;
                  char v369 = llvm::ConstantInt::get(v366, (llvm::LLVMContext *)&v487, v353);
                  if (v488 >= 0x41 && v487) {
                    MEMORY[0x1D25D9CB0](v487, 0x1000C8000313F17);
                  }
                  int v9 = v481;
                  if (v492 >= (unint64_t)HIDWORD(v492)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v491 + v492) = v369;
                  LODWORD(v492) = v492 + 1;
                }
              }
              unsigned int v358 = llvm::UndefValue::get(*(llvm::UndefValue **)v473, v354);
              BOOL v359 = (llvm::FixedVectorType ***)v491;
              uint64_t v360 = v492;
              Impl = llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)v491, (llvm::Type *)v492);
              if (!Impl)
              {
                llvm::FixedVectorType::get(**v359, (llvm::Type *)v360);
                Impl = (llvm::Constant *)sub_1CC56A4DC(**v362 + 1288, (uint64_t)v362, v359, v360);
              }
              __int16 v489 = 257;
              uint64_t v363 = sub_1CD3FAD7C((uint64_t)&v499, (uint64_t)v473, (uint64_t)v358, Impl, (uint64_t)&v487);
              if (v491 != v493) {
                free(v491);
              }
            }
            else
            {
              uint64_t v383 = *(llvm::ConstantInt **)(*(void *)v505 + 1960);
              unsigned int v384 = *(_DWORD *)(*(void *)v505 + 1968);
              LODWORD(v492) = v384 >> 8;
              if (v384 >> 8 > 0x40) {
                operator new[]();
              }
              if (v384 <= 0xFF) {
                unint64_t v385 = 0;
              }
              else {
                unint64_t v385 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v384) + 63);
              }
              v491 = (void *)(v385 & v371);
              BOOL v386 = (unsigned __int8 *)llvm::ConstantInt::get(v383, (llvm::LLVMContext *)&v491, v353);
              if (v492 >= 0x41 && v491) {
                MEMORY[0x1D25D9CB0](v491, 0x1000C8000313F17);
              }
              __int16 v494 = 257;
              uint64_t v363 = sub_1CB8445F4((uint64_t)&v499, v473, v386, (uint64_t)&v491);
            }
            uint64_t v356 = v479;
            int v387 = *(_DWORD *)(v467 + 20);
            if ((v387 & 0x40000000) != 0)
            {
              uint64_t v389 = *(void *)(v467 - 8);
              uint64_t v388 = v387 & 0x7FFFFFF;
              if (!v388) {
                goto LABEL_782;
              }
            }
            else
            {
              uint64_t v388 = v387 & 0x7FFFFFF;
              uint64_t v389 = v467 - 32 * v388;
              if (!v388) {
                goto LABEL_782;
              }
            }
            uint64_t v390 = *(uint64_t **)v355;
            v391 = (void **)(v389 + 8);
            uint64_t v392 = 32 * v388;
            while (*(v391 - 1) != v390)
            {
              v391 += 4;
              v392 -= 32;
              if (!v392) {
                goto LABEL_782;
              }
            }
            if (v496 >= (unint64_t)HIDWORD(v496)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v393 = (llvm::Instruction **)(v391 - 1);
            *((void *)v495 + v496) = v390;
            LODWORD(v496) = v496 + 1;
            if (*(v391 - 1))
            {
              *v391[1] = *v391;
              if (*v391) {
                (*v391)[2] = v391[1];
              }
            }
            *uint64_t v393 = v363;
            if (v363)
            {
              unsigned int v396 = (void *)*((void *)v363 + 1);
              uint64_t v395 = (llvm::Instruction ***)((char *)v363 + 8);
              uint64_t v394 = v396;
              void *v391 = v396;
              if (v396) {
                v394[2] = v391;
              }
              v391[1] = v395;
              *uint64_t v395 = v393;
            }
          }
LABEL_782:
          uint64_t v356 = *(void *)(v356 + 8);
          if (!v356) {
            goto LABEL_783;
          }
          continue;
        }
      }
      unsigned int v63 = (void *)((char *)v11 - 32 * (*((_DWORD *)v10 - 1) & 0x7FFFFFF));
      uint64_t v64 = (uint64_t *)(*v63 + 24);
      BOOL v443 = (void *)*v63;
      if (*(_DWORD *)(*v63 + 32) >= 0x41u) {
        uint64_t v64 = (uint64_t *)*v64;
      }
      unsigned int v65 = (llvm::DataLayout *)v501;
      uint64_t v66 = (int8x8_t *)v63[4];
      uint64_t v67 = *v64;
      sub_1CB93510C(*v64, v451);
      char v69 = 0;
      int v454 = v67;
      if (v67 > 0xA)
      {
        unsigned int v475 = 0;
        goto LABEL_157;
      }
      if (((1 << v67) & 0x430) != 0)
      {
        int v70 = 8;
LABEL_156:
        unsigned int v475 = v70;
        char v69 = 1;
        goto LABEL_157;
      }
      unsigned int v475 = 0;
      if (((1 << v67) & 0xC0) != 0)
      {
        int v70 = 16;
        goto LABEL_156;
      }
LABEL_157:
      uint64_t v103 = *(v10 - 2);
      uint64_t v499 = v501;
      uint64_t v500 = 0x400000000;
      if (v103)
      {
        unint64_t v104 = -1;
        uint64_t v105 = v103;
        do
        {
          uint64_t v105 = *(void *)(v105 + 8);
          ++v104;
        }
        while (v105);
        unsigned int v106 = v104 + 1;
        if (v104 >= 4) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unsigned int v107 = v501;
        do
        {
          *v107++ = *(void *)(v103 + 24);
          uint64_t v103 = *(void *)(v103 + 8);
        }
        while (v103);
        unsigned int v65 = (llvm::DataLayout *)v499;
      }
      else
      {
        unsigned int v106 = 0;
      }
      LODWORD(v500) = v106;
      if (!v106)
      {
LABEL_370:
        uint64_t v191 = v483;
        uint64_t v192 = HIDWORD(v484);
        if (v483 == v482)
        {
          uint64_t v2 = v452;
          uint64_t v5 = v453;
          int v7 = v461;
          if (HIDWORD(v484))
          {
            uint64_t v193 = 0;
            uint64_t v194 = 8 * HIDWORD(v484);
            uint64_t v195 = (llvm::ValueAsMetadata **)v483;
            while (*v195 != v11)
            {
              if (*v195 == (llvm::ValueAsMetadata *)-2) {
                uint64_t v193 = v195;
              }
              ++v195;
              v194 -= 8;
              if (!v194)
              {
                if (!v193) {
                  goto LABEL_378;
                }
                *uint64_t v193 = v11;
                --v485;
                goto LABEL_449;
              }
            }
            goto LABEL_449;
          }
LABEL_378:
          unsigned int v196 = v484;
          if (HIDWORD(v484) < v484)
          {
            ++HIDWORD(v484);
            *(void *)&v483[8 * v192] = v11;
LABEL_449:
            char v197 = 1;
            goto LABEL_450;
          }
        }
        else
        {
          unsigned int v196 = v484;
          uint64_t v2 = v452;
          uint64_t v5 = v453;
          int v7 = v461;
        }
        if (3 * v196 <= 4 * (HIDWORD(v484) - v485))
        {
          if (v196 >= 0x40) {
            v196 *= 2;
          }
          else {
            unsigned int v196 = 128;
          }
        }
        else if (v196 - HIDWORD(v484) >= v196 >> 3)
        {
          goto LABEL_410;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v482, v196);
        unsigned int v196 = v484;
        uint64_t v191 = v483;
LABEL_410:
        unsigned int v213 = v196 - 1;
        unsigned int v214 = (v196 - 1) & ((v11 >> 4) ^ (v11 >> 9));
        unsigned int v215 = &v191[8 * v214];
        unint64_t v216 = *(llvm::ValueAsMetadata **)v215;
        if (*(void *)v215 == -1)
        {
          uint64_t v217 = 0;
LABEL_442:
          if (v217) {
            char v226 = v217;
          }
          else {
            char v226 = (llvm::ValueAsMetadata **)v215;
          }
          if (*v226 != v11)
          {
            if (*v226 == (llvm::ValueAsMetadata *)-2) {
              --v485;
            }
            else {
              ++HIDWORD(v484);
            }
            *char v226 = v11;
          }
        }
        else
        {
          uint64_t v217 = 0;
          int v218 = 1;
          while (v216 != v11)
          {
            if (v217) {
              BOOL v219 = 0;
            }
            else {
              BOOL v219 = v216 == (llvm::ValueAsMetadata *)-2;
            }
            if (v219) {
              uint64_t v217 = (llvm::ValueAsMetadata **)v215;
            }
            unsigned int v220 = v214 + v218++;
            unsigned int v214 = v220 & v213;
            unsigned int v215 = &v191[8 * (v220 & v213)];
            unint64_t v216 = *(llvm::ValueAsMetadata **)v215;
            if (*(void *)v215 == -1) {
              goto LABEL_442;
            }
          }
        }
        goto LABEL_449;
      }
      v469 = (llvm::DataLayout *)((char *)v65 + 8 * v106);
      if (v454 == 14) {
        int v108 = 4;
      }
      else {
        int v108 = 2;
      }
      unsigned int v439 = v108;
      if (v454 != 14 || v445 == 0) {
        int v110 = 2;
      }
      else {
        int v110 = 4;
      }
      unsigned int v441 = v110;
      char v463 = 1;
      do
      {
        uint64_t v111 = *(uint64_t ***)v65;
        unsigned int v112 = *(unsigned __int8 *)(*(void *)v65 + 16);
        int v516 = v518;
        uint64_t v517 = 0x400000000;
        if (v111) {
          BOOL v113 = v112 >= 0x1C;
        }
        else {
          BOOL v113 = 0;
        }
        if (!v113) {
          goto LABEL_180;
        }
        unsigned int v115 = 0;
        while (1)
        {
          int v116 = *((unsigned __int8 *)v111 + 16);
          if (v116 == 61) {
            break;
          }
          uint64_t v117 = v111[1];
          if (!v117 || v117[1]) {
            goto LABEL_180;
          }
          if (v116 != 77)
          {
            char v118 = v69 ^ 1;
            if (v116 != 66) {
              char v118 = 1;
            }
            if (v118) {
              goto LABEL_180;
            }
            int v114 = 1;
            if (v66[2].i8[0] != 16 || !v66 || *((_DWORD *)*v111 + 2) != 13) {
              goto LABEL_181;
            }
            uint64_t v119 = v66 + 3;
            if (v66[4].i32[0] >= 0x41u) {
              uint64_t v119 = (int8x8_t *)*v119;
            }
            uint64_t v120 = v119->i32[0] & ~(-1 << ((*((_DWORD *)*v111 + 2) >> 8) / v475));
            unsigned __int8 v121 = **(llvm::ConstantInt ***)v66;
            unsigned int v122 = *(_DWORD *)(*(void *)v66 + 8);
            LODWORD(v521) = v122 >> 8;
            if (v122 >> 8 > 0x40) {
              operator new[]();
            }
            if (v122 <= 0xFF) {
              unint64_t v123 = 0;
            }
            else {
              unint64_t v123 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v122) + 63);
            }
            long long v520 = (void *)(v123 & v120);
            uint64_t v66 = (int8x8_t *)llvm::ConstantInt::get(v121, (llvm::LLVMContext *)&v520, v68);
            if (v521 >= 0x41 && v520) {
              MEMORY[0x1D25D9CB0](v520, 0x1000C8000313F17);
            }
            unsigned int v115 = v517;
          }
          if (v115 >= HIDWORD(v517)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v516 + v115) = v111;
          unsigned int v115 = v517 + 1;
          LODWORD(v517) = v517 + 1;
          uint64_t v111 = (uint64_t **)v111[1][3];
          if (!v111) {
            goto LABEL_180;
          }
        }
        unint64_t v447 = (void **)*(v111 - 4);
        int v124 = *((_DWORD *)*v447 + 2);
        if ((v124 & 0xFE) == 0x12) {
          int v124 = *(_DWORD *)(**((void **)*v447 + 2) + 8);
        }
        if (v446)
        {
          if (((1 << v454) & 0xB104) != 0) {
            int v125 = 4;
          }
          else {
            int v125 = 1;
          }
          unsigned int v126 = v441;
          if (((1 << v454) & 0x40CA) == 0) {
            unsigned int v126 = v125;
          }
        }
        else
        {
          if (((1 << v454) & 0xB104) != 0) {
            int v127 = 4;
          }
          else {
            int v127 = 1;
          }
          unsigned int v126 = v439;
          if (((1 << v454) & 0x40CA) == 0) {
            unsigned int v126 = v127;
          }
          if (v126 <= dword_1CD96ED88[v454]) {
            unsigned int v126 = dword_1CD96ED88[v454];
          }
        }
        unsigned int v128 = v124 & 0xFFFFFF00;
        BOOL v129 = v126 > (1 << ((unint64_t)*((unsigned __int16 *)v111 + 9) >> 1)) || v128 == 0x4000;
        uint64_t v130 = v129 ? 0 : (uint64_t)v111;
        if (v129)
        {
LABEL_180:
          char v463 = 0;
          int v114 = 4;
          goto LABEL_181;
        }
        uint64_t v440 = v130;
        unint64_t v131 = sub_1CB934EB4(*(_DWORD *)(*(v10 - 7) + 36));
        unsigned int v132 = 0;
        uint64_t v449 = (unsigned __int8 *)v10[-4 * (*((_DWORD *)v10 - 1) & 0x7FFFFFF) + 5];
        uint64_t v133 = **v111;
        long long v520 = v522;
        uint64_t v521 = 0x200000000;
        uint64_t v525 = v133;
        unsigned int v526 = &v534;
        unsigned int v527 = v535;
        uint64_t v528 = 0;
        int v529 = 0;
        __int16 v530 = 512;
        char v531 = 7;
        v523 = 0;
        uint64_t v524 = 0;
        uint64_t v532 = 0;
        uint64_t v533 = 0;
        v534 = &unk_1F2616E88;
        v535[0] = &unk_1F2617008;
        v523 = v111[5];
        uint64_t v524 = v111 + 3;
        int v134 = v111[6];
        v491 = v134;
        if (v134)
        {
          llvm::MetadataTracking::track((uint64_t)&v491, (unsigned __int8 *)v134, 2);
          unsigned int v132 = v491;
        }
        sub_1CB8461A4((uint64_t)&v520, 0, (uint64_t)v132);
        if (v491)
        {
          int v148 = *(unsigned __int8 *)v491;
          if ((v148 - 4) > 0x1E)
          {
            if ((v148 - 3) >= 0xFFFFFFFE) {
              uint64_t v188 = v491;
            }
            else {
              uint64_t v188 = 0;
            }
            if ((v148 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v150 = (unint64_t)v188 + 8;
LABEL_352:
              v495 = &v491;
              sub_1CC5FA668(v150 + 16, &v495);
              goto LABEL_237;
            }
            if (v148 == 3) {
              *((void *)v491 + 1) = 0;
            }
          }
          else if ((*((unsigned char *)v491 + 1) & 0x7F) == 2 || *((_DWORD *)v491 + 3))
          {
            uint64_t v149 = *((void *)v491 + 2);
            if ((v149 & 4) != 0)
            {
              unint64_t v150 = v149 & 0xFFFFFFFFFFFFFFF8;
              if (v150) {
                goto LABEL_352;
              }
            }
          }
        }
LABEL_237:
        unint64_t v137 = HIDWORD(v131);
        uint64_t v138 = *(uint64_t ***)(v111[5][7] + 40);
        int v139 = *(llvm::UndefValue **)v449;
        if ((*(_DWORD *)(*(void *)v449 + 8) & 0xFE) == 0x12)
        {
          int v140 = v66 + 3;
          if (v66[4].i32[0] >= 0x41u) {
            int v140 = (int8x8_t *)*v140;
          }
          uint8x8_t v141 = (uint8x8_t)vcnt_s8(*v140);
          v141.i16[0] = vaddlv_u8(v141);
          uint64_t v142 = v141.u32[0];
          if (*((_DWORD *)v139 + 8) != v141.i32[0])
          {
            if (v141.i32[0] != 3)
            {
              unsigned int v438 = v138;
              if (v141.i32[0] == 1)
              {
                uint64_t v143 = *(llvm::ConstantInt **)(*(void *)v525 + 1960);
                unsigned int v144 = *(_DWORD *)(*(void *)v525 + 1968);
                LODWORD(v496) = v144 >> 8;
                if (v144 >> 8 >= 0x41) {
                  operator new[]();
                }
                v495 = 0;
                uint64_t v145 = (unsigned __int8 *)llvm::ConstantInt::get(v143, (llvm::LLVMContext *)&v495, v136);
                if (v496 >= 0x41 && v495)
                {
                  unsigned int v437 = v145;
                  MEMORY[0x1D25D9CB0](v495, 0x1000C8000313F17);
                  uint64_t v145 = v437;
                }
                __int16 v498 = 257;
                uint64_t v449 = (unsigned __int8 *)sub_1CB8445F4((uint64_t)&v520, v449, v145, (uint64_t)&v495);
              }
              else
              {
                v491 = v493;
                uint64_t v492 = 0x400000000;
                if (v141.i32[0])
                {
                  unsigned int v146 = 0;
                  int v147 = 0;
                  do
                  {
                    if (v146 >= HIDWORD(v492)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((_DWORD *)v491 + v146) = v147;
                    unsigned int v146 = v492 + 1;
                    LODWORD(v492) = v492 + 1;
                    ++v147;
                  }
                  while (v141.i32[0] != v147);
                  int v139 = *(llvm::UndefValue **)v449;
                }
                uint64_t v151 = llvm::UndefValue::get(v139, v135);
                __int16 v498 = 257;
                uint64_t v449 = (unsigned __int8 *)sub_1CB935A74((uint64_t)&v520, (uint64_t)v449, (uint64_t)v151, v491, (llvm::Type *)v492, (uint64_t)&v495);
                if (v491 != v493) {
                  free(v491);
                }
              }
              uint64_t v138 = v438;
            }
            switch((int)v137)
            {
              case 2631:
              case 2633:
              case 2635:
              case 2637:
              case 2639:
              case 2641:
              case 2643:
              case 2645:
              case 2647:
              case 2649:
              case 2651:
              case 2653:
              case 2655:
              case 2657:
              case 2659:
LABEL_897:
                __break(1u);
                JUMPOUT(0x1CB934DBCLL);
              case 2632:
              case 2640:
              case 2648:
              case 2656:
                uint64_t v152 = (char *)&unk_1CD96ED08 + 4 * v142 + 28;
                break;
              case 2634:
              case 2642:
              case 2650:
              case 2658:
                uint64_t v152 = (char *)&unk_1CD96ED08 + 4 * v142 + 12;
                break;
              case 2636:
              case 2644:
              case 2652:
              case 2660:
                uint64_t v152 = (char *)&unk_1CD96ED08 + 4 * v142 - 4;
                break;
              default:
                uint64_t v152 = (char *)&unk_1CD96ED08 + 4 * v142 + 44;
                break;
            }
            LODWORD(v137) = *(_DWORD *)v152;
          }
        }
        v495 = *v447;
        uint64_t v153 = llvm::Intrinsic::getDeclaration(v138, v137, (uint64_t)&v495, 1);
        if (v153) {
          uint64_t v154 = *(uint64_t ***)(v153 + 24);
        }
        else {
          uint64_t v154 = 0;
        }
        v491 = v443;
        uint64_t v492 = (uint64_t)v66;
        v493[0] = v449;
        v493[1] = v447;
        __int16 v498 = 257;
        sub_1CB845BAC((uint64_t *)&v520, v154, (uint64_t **)v153, (uint64_t *)&v491, 4, (uint64_t)&v495, 0);
        uint64_t v155 = v483;
        uint64_t v156 = HIDWORD(v484);
        if (v483 != v482)
        {
          unsigned int v160 = v484;
LABEL_281:
          if (3 * v160 <= 4 * (HIDWORD(v484) - v485))
          {
            if (v160 >= 0x40) {
              v160 *= 2;
            }
            else {
              unsigned int v160 = 128;
            }
          }
          else if (v160 - HIDWORD(v484) >= v160 >> 3)
          {
            goto LABEL_283;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v482, v160);
          unsigned int v160 = v484;
          uint64_t v155 = v483;
LABEL_283:
          unsigned int v161 = v160 - 1;
          unsigned int v162 = (v160 - 1) & ((v440 >> 4) ^ (v440 >> 9));
          uint64_t v163 = &v155[8 * v162];
          uint64_t v164 = *(void *)v163;
          if (*(void *)v163 == -1)
          {
            BOOL v165 = 0;
LABEL_295:
            if (v165) {
              unint64_t v169 = v165;
            }
            else {
              unint64_t v169 = v163;
            }
            if (*(void *)v169 != v440)
            {
              if (*(void *)v169 == -2) {
                --v485;
              }
              else {
                ++HIDWORD(v484);
              }
              *(void *)unint64_t v169 = v440;
            }
          }
          else
          {
            BOOL v165 = 0;
            int v166 = 1;
            while (v164 != v440)
            {
              if (v165) {
                BOOL v167 = 0;
              }
              else {
                BOOL v167 = v164 == -2;
              }
              if (v167) {
                BOOL v165 = v163;
              }
              unsigned int v168 = v162 + v166++;
              unsigned int v162 = v168 & v161;
              uint64_t v163 = &v155[8 * (v168 & v161)];
              uint64_t v164 = *(void *)v163;
              if (*(void *)v163 == -1) {
                goto LABEL_295;
              }
            }
          }
          goto LABEL_302;
        }
        if (HIDWORD(v484))
        {
          uint64_t v157 = 0;
          uint64_t v158 = 8 * HIDWORD(v484);
          unsigned int v159 = v483;
          while (*v159 != v440)
          {
            if (*v159 == -2) {
              uint64_t v157 = v159;
            }
            ++v159;
            v158 -= 8;
            if (!v158)
            {
              if (!v157) {
                goto LABEL_278;
              }
              *uint64_t v157 = v440;
              --v485;
              goto LABEL_302;
            }
          }
          goto LABEL_302;
        }
LABEL_278:
        unsigned int v160 = v484;
        if (HIDWORD(v484) >= v484) {
          goto LABEL_281;
        }
        ++HIDWORD(v484);
        *(void *)&v483[8 * v156] = v440;
LABEL_302:
        if (v517)
        {
          int v170 = (uint64_t *)v516;
          uint64_t v171 = (char *)v516 + 8 * v517;
          unsigned int v172 = v484;
          unsigned int v173 = HIDWORD(v484);
          int v174 = v483;
          while (1)
          {
            uint64_t v175 = *v170;
            if (v174 != v482) {
              break;
            }
            if (v173)
            {
              unsigned int v176 = 0;
              uint64_t v177 = 8 * v173;
              uint64_t v178 = v174;
              while (*v178 != v175)
              {
                if (*v178 == -2) {
                  unsigned int v176 = v178;
                }
                ++v178;
                v177 -= 8;
                if (!v177)
                {
                  if (!v176) {
                    goto LABEL_312;
                  }
                  *unsigned int v176 = v175;
                  --v485;
                  goto LABEL_335;
                }
              }
              goto LABEL_335;
            }
LABEL_312:
            if (v172 <= v173) {
              break;
            }
            HIDWORD(v484) = v173 + 1;
            *(void *)&v174[8 * v173] = v175;
LABEL_335:
            int v174 = v483;
            unsigned int v173 = HIDWORD(v484);
            unsigned int v172 = v484;
            if (++v170 == (uint64_t *)v171) {
              goto LABEL_343;
            }
          }
          if (3 * v172 <= 4 * (v173 - v485))
          {
            if (v172 >= 0x40) {
              v172 *= 2;
            }
            else {
              unsigned int v172 = 128;
            }
          }
          else if (v172 - v173 >= v172 >> 3)
          {
            goto LABEL_316;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v482, v172);
          unsigned int v172 = v484;
          int v174 = v483;
LABEL_316:
          unsigned int v179 = v172 - 1;
          unsigned int v180 = (v172 - 1) & ((v175 >> 4) ^ (v175 >> 9));
          unsigned int v181 = &v174[8 * v180];
          uint64_t v182 = *(void *)v181;
          if (*(void *)v181 == -1)
          {
            uint64_t v183 = 0;
LABEL_328:
            if (v183) {
              uint64_t v187 = v183;
            }
            else {
              uint64_t v187 = v181;
            }
            if (*(void *)v187 != v175)
            {
              if (*(void *)v187 == -2) {
                --v485;
              }
              else {
                ++HIDWORD(v484);
              }
              *(void *)uint64_t v187 = v175;
            }
          }
          else
          {
            uint64_t v183 = 0;
            int v184 = 1;
            while (v182 != v175)
            {
              if (v183) {
                BOOL v185 = 0;
              }
              else {
                BOOL v185 = v182 == -2;
              }
              if (v185) {
                uint64_t v183 = v181;
              }
              unsigned int v186 = v180 + v184++;
              unsigned int v180 = v186 & v179;
              unsigned int v181 = &v174[8 * (v186 & v179)];
              uint64_t v182 = *(void *)v181;
              if (*(void *)v181 == -1) {
                goto LABEL_328;
              }
            }
          }
          goto LABEL_335;
        }
LABEL_343:
        if (v520 != v522) {
          free(v520);
        }
        int v114 = 0;
LABEL_181:
        if (v516 != v518) {
          free(v516);
        }
        if ((v114 | 4) != 4) {
          goto LABEL_380;
        }
        unsigned int v65 = (llvm::DataLayout *)((char *)v65 + 8);
      }
      while (v65 != v469);
      if (v463) {
        goto LABEL_370;
      }
LABEL_380:
      char v197 = 0;
      uint64_t v2 = v452;
      uint64_t v5 = v453;
      int v7 = v461;
LABEL_450:
      if (v499 != v501) {
        free(v499);
      }
      if (v197) {
        goto LABEL_532;
      }
      uint64_t v470 = (llvm::DataLayout *)sub_1CB934EB4(*(_DWORD *)(*(v10 - 7) + 36));
      for (unsigned int k = *(void **)(v458 + 48); ; unsigned int k = (void *)k[1])
      {
        uint64_t v228 = k - 3;
        if (!k) {
          uint64_t v228 = 0;
        }
        if (*((unsigned char *)v228 + 16) != 83) {
          break;
        }
      }
      int v229 = 0;
      uint64_t v476 = *(v10 - 3);
      uint64_t v230 = *(uint64_t ***)(*(void *)(v10[2] + 56) + 40);
      uint64_t v231 = (char *)v11 - 32 * (*((_DWORD *)v10 - 1) & 0x7FFFFFF);
      int v232 = *(void **)v231;
      uint64_t v464 = *((void *)v231 + 4);
      int v233 = (llvm::Type **)*((void *)v231 + 8);
      uint64_t v234 = *(void *)*(k - 3);
      long long v520 = v522;
      uint64_t v521 = 0x200000000;
      uint64_t v525 = v234;
      unsigned int v526 = &v534;
      unsigned int v527 = v535;
      uint64_t v528 = 0;
      int v529 = 0;
      __int16 v530 = 512;
      char v531 = 7;
      v523 = 0;
      uint64_t v524 = 0;
      uint64_t v532 = 0;
      uint64_t v533 = 0;
      v534 = &unk_1F2616E88;
      v535[0] = &unk_1F2617008;
      v523 = (uint64_t *)k[2];
      uint64_t v524 = k;
      BOOL v235 = (void *)k[3];
      int v516 = v235;
      if (v235)
      {
        llvm::MetadataTracking::track((uint64_t)&v516, (unsigned __int8 *)v235, 2);
        int v229 = v516;
      }
      sub_1CB8461A4((uint64_t)&v520, 0, (uint64_t)v229);
      if (v516)
      {
        int v280 = *(unsigned __int8 *)v516;
        if ((v280 - 4) > 0x1E)
        {
          if ((v280 - 3) >= 0xFFFFFFFE) {
            uint64_t v306 = v516;
          }
          else {
            uint64_t v306 = 0;
          }
          if ((v280 - 3) < 0xFFFFFFFE)
          {
            if (v280 == 3) {
              *((void *)v516 + 1) = 0;
            }
            goto LABEL_461;
          }
          unint64_t v282 = (unint64_t)v306 + 8;
        }
        else
        {
          if ((*((unsigned char *)v516 + 1) & 0x7F) != 2 && !*((_DWORD *)v516 + 3)) {
            goto LABEL_461;
          }
          uint64_t v281 = *((void *)v516 + 2);
          if ((v281 & 4) == 0) {
            goto LABEL_461;
          }
          unint64_t v282 = v281 & 0xFFFFFFFFFFFFFFF8;
          if (!v282) {
            goto LABEL_461;
          }
        }
        uint64_t v499 = &v516;
        sub_1CC5FA668(v282 + 16, &v499);
      }
LABEL_461:
      uint64_t v236 = (void *)llvm::PointerType::get((llvm::PointerType *)(**v230 + 1912), 0);
      uint64_t v237 = *v233;
      __int16 v502 = 257;
      unsigned int v238 = sub_1CB935044((uint64_t *)&v520, v237, 0, (uint64_t)&v499);
      uint64_t v239 = 0;
      v523 = (uint64_t *)v10[2];
      uint64_t v524 = v10;
      unsigned int v240 = (void *)v10[3];
      int v516 = v240;
      if (v240)
      {
        llvm::MetadataTracking::track((uint64_t)&v516, (unsigned __int8 *)v240, 2);
        uint64_t v239 = v516;
      }
      sub_1CB8461A4((uint64_t)&v520, 0, (uint64_t)v239);
      if (v516)
      {
        int v283 = *(unsigned __int8 *)v516;
        if ((v283 - 4) > 0x1E)
        {
          if ((v283 - 3) >= 0xFFFFFFFE) {
            uint64_t v307 = v516;
          }
          else {
            uint64_t v307 = 0;
          }
          if ((v283 - 3) < 0xFFFFFFFE)
          {
            if (v283 == 3) {
              *((void *)v516 + 1) = 0;
            }
            goto LABEL_464;
          }
          unint64_t v285 = (unint64_t)v307 + 8;
        }
        else
        {
          if ((*((unsigned char *)v516 + 1) & 0x7F) != 2 && !*((_DWORD *)v516 + 3)) {
            goto LABEL_464;
          }
          uint64_t v284 = *((void *)v516 + 2);
          if ((v284 & 4) == 0) {
            goto LABEL_464;
          }
          unint64_t v285 = v284 & 0xFFFFFFFFFFFFFFF8;
          if (!v285) {
            goto LABEL_464;
          }
        }
        uint64_t v499 = &v516;
        sub_1CC5FA668(v285 + 16, &v499);
      }
LABEL_464:
      __int16 v519 = 257;
      unint64_t v241 = (unsigned __int8 *)v238;
      if (*(void **)v238 != v236)
      {
        if (*((unsigned __int8 *)v238 + 16) <= 0x14u)
        {
          uint64_t v243 = (*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, void *))*v526 + 28))(v526, 49, v238, v236);
          unint64_t v241 = (unsigned __int8 *)v243;
          if (v243 && *(unsigned __int8 *)(v243 + 16) >= 0x1Cu)
          {
            (*(void (**)(void *, uint64_t, void **, uint64_t *, void *))(*v527 + 16))(v527, v243, &v516, v523, v524);
            if (v521)
            {
              uint64_t v410 = (llvm::MDNode **)v520;
              v411 = (llvm::MDNode **)((char *)v520 + 16 * v521);
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v241, *(_DWORD *)v410, v410[1]);
                v410 += 2;
              }
              while (v410 != v411);
            }
            int v9 = v481;
          }
        }
        else
        {
          __int16 v502 = 257;
          unint64_t v241 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v238, (uint64_t)v236, (const char **)&v499, 0);
          (*(void (**)(void *, unsigned __int8 *, void **, uint64_t *, void *))(*v527 + 16))(v527, v241, &v516, v523, v524);
          if (v521)
          {
            unsigned int v242 = (llvm::MDNode **)v520;
            uint64_t v459 = (llvm::MDNode **)((char *)v520 + 16 * v521);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v241, *(_DWORD *)v242, v242[1]);
              v242 += 2;
            }
            while (v242 != v459);
          }
        }
      }
      uint64_t v499 = v236;
      uint64_t v244 = llvm::Intrinsic::getDeclaration(v230, SHIDWORD(v470), (uint64_t)&v499, 1);
      if (v244) {
        uint64_t v245 = *(uint64_t ***)(v244 + 24);
      }
      else {
        uint64_t v245 = 0;
      }
      int v516 = v232;
      uint64_t v517 = v464;
      v518[0] = v233;
      v518[1] = v241;
      __int16 v502 = 257;
      sub_1CB845BAC((uint64_t *)&v520, v245, (uint64_t **)v244, (uint64_t *)&v516, 4, (uint64_t)&v499, 0);
      uint64_t v246 = (uint64_t)(v230 + 34);
      int v247 = *v230;
      v471 = (llvm::DataLayout *)v246;
      long long v249 = (llvm::LLVMContext *)sub_1CB83544C(v246, v476);
      if (v248 == 1) {
      unsigned int v250 = (llvm::PointerType *)llvm::IntegerType::get((llvm::IntegerType *)v247, v249);
      }
      unint64_t v251 = llvm::PointerType::get(v250, 0);
      __int16 v519 = 257;
      if (*(void *)v241 != v251)
      {
        if (v241[16] <= 0x14u)
        {
          unint64_t v241 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v526
                                     + 28))(v526, 49, v241, v251);
          if (v241) {
            BOOL v254 = v241[16] >= 0x1Cu;
          }
          else {
            BOOL v254 = 0;
          }
          if (v254)
          {
            (*(void (**)(void *, unsigned __int8 *, void **, uint64_t *, void *))(*v527 + 16))(v527, v241, &v516, v523, v524);
            if (v521)
            {
              uint64_t v406 = (llvm::MDNode **)v520;
              uint64_t v407 = (llvm::MDNode **)((char *)v520 + 16 * v521);
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v241, *(_DWORD *)v406, v406[1]);
                v406 += 2;
              }
              while (v406 != v407);
            }
            int v9 = v481;
          }
        }
        else
        {
          __int16 v502 = 257;
          unint64_t v241 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v241, v251, (const char **)&v499, 0);
          (*(void (**)(void *, unsigned __int8 *, void **, uint64_t *, void *))(*v527 + 16))(v527, v241, &v516, v523, v524);
          if (v521)
          {
            uint64_t v252 = (llvm::MDNode **)v520;
            unsigned int v253 = (llvm::MDNode **)((char *)v520 + 16 * v521);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v241, *(_DWORD *)v252, v252[1]);
              v252 += 2;
            }
            while (v252 != v253);
          }
        }
      }
      __int16 v519 = 257;
      char v255 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v523[7] + 40) + 272), v250, 1);
      uint64_t v256 = (char *)operator new(0x60uLL);
      *((_DWORD *)v256 + 13) = *((_DWORD *)v256 + 13) & 0x38000000 | 1;
      unsigned int v257 = (unsigned __int8 *)(v256 + 32);
      *(void *)uint64_t v256 = 0;
      *((void *)v256 + 1) = 0;
      *((void *)v256 + 2) = 0;
      *((void *)v256 + 3) = v256 + 32;
      __int16 v502 = 257;
      llvm::LoadInst::LoadInst((llvm::Value *)(v256 + 32), (uint64_t)v250, (uint64_t)v241, (const char **)&v499, 0, v255, 0);
      (*(void (**)(void *, char *, void **, uint64_t *, void *))(*v527 + 16))(v527, v256 + 32, &v516, v523, v524);
      if (v521)
      {
        uint64_t v278 = (llvm::MDNode **)v520;
        uint64_t v279 = (llvm::MDNode **)((char *)v520 + 16 * v521);
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v257, *(_DWORD *)v278, v278[1]);
          v278 += 2;
        }
        while (v278 != v279);
      }
      *((_WORD *)v256 + 25) = *((_WORD *)v256 + 25) & 0xFF81 | (2
                                                              * __clz(1 << llvm::DataLayout::getAlignment(v471, *((llvm::Type **)v238 + 8), 0))) ^ 0x7E;
      __int16 v519 = 257;
      if (*((void *)v256 + 4) == v476)
      {
        uint64_t v2 = v452;
        uint64_t v5 = v453;
      }
      else
      {
        uint64_t v2 = v452;
        if (v256[48] <= 0x14u)
        {
          unsigned int v257 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v526 + 28))(v526, 49, v257, v476);
          if (v257) {
            BOOL v260 = v257[16] >= 0x1Cu;
          }
          else {
            BOOL v260 = 0;
          }
          uint64_t v5 = v453;
          if (v260)
          {
            (*(void (**)(void *, unsigned __int8 *, void **, uint64_t *, void *))(*v527 + 16))(v527, v257, &v516, v523, v524);
            if (v521)
            {
              uint64_t v408 = (llvm::MDNode **)v520;
              unsigned int v409 = (llvm::MDNode **)((char *)v520 + 16 * v521);
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v257, *(_DWORD *)v408, v408[1]);
                v408 += 2;
              }
              while (v408 != v409);
              uint64_t v2 = v452;
              uint64_t v5 = v453;
            }
            else
            {
              uint64_t v2 = v452;
              uint64_t v5 = v453;
            }
            int v9 = v481;
          }
        }
        else
        {
          __int16 v502 = 257;
          unsigned int v257 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v257, v476, (const char **)&v499, 0);
          (*(void (**)(void *, unsigned __int8 *, void **, uint64_t *, void *))(*v527 + 16))(v527, v257, &v516, v523, v524);
          uint64_t v5 = v453;
          if (v521)
          {
            unsigned int v258 = (llvm::MDNode **)v520;
            uint64_t v259 = (llvm::MDNode **)((char *)v520 + 16 * v521);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v257, *(_DWORD *)v258, v258[1]);
              v258 += 2;
            }
            while (v258 != v259);
          }
        }
      }
      llvm::Value::doRAUW(v11, (llvm::Value *)v257, (llvm::Value *)1);
      int v199 = v483;
      uint64_t v200 = HIDWORD(v484);
      if (v483 != v482)
      {
        unsigned int v263 = v484;
        int v7 = v461;
        goto LABEL_509;
      }
      int v7 = v461;
      if (!HIDWORD(v484))
      {
LABEL_506:
        unsigned int v263 = v484;
        if (HIDWORD(v484) < v484) {
          goto LABEL_507;
        }
LABEL_509:
        if (3 * v263 <= 4 * (HIDWORD(v484) - v485))
        {
          if (v263 >= 0x40) {
            v263 *= 2;
          }
          else {
            unsigned int v263 = 128;
          }
        }
        else if (v263 - HIDWORD(v484) >= v263 >> 3)
        {
          goto LABEL_511;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v482, v263);
        unsigned int v263 = v484;
        int v199 = v483;
LABEL_511:
        unsigned int v264 = v263 - 1;
        unsigned int v265 = (v263 - 1) & ((v11 >> 4) ^ (v11 >> 9));
        unsigned int v207 = (llvm::ValueAsMetadata **)&v199[v265];
        uint64_t v266 = *v207;
        if (*v207 != (llvm::ValueAsMetadata *)-1)
        {
          unsigned int v209 = 0;
          int v267 = 1;
          while (v266 != v11)
          {
            if (v209) {
              BOOL v268 = 0;
            }
            else {
              BOOL v268 = v266 == (llvm::ValueAsMetadata *)-2;
            }
            if (v268) {
              unsigned int v209 = v207;
            }
            unsigned int v269 = v265 + v267++;
            unsigned int v265 = v269 & v264;
            unsigned int v207 = (llvm::ValueAsMetadata **)&v199[v269 & v264];
            uint64_t v266 = *v207;
            if (*v207 == (llvm::ValueAsMetadata *)-1) {
              goto LABEL_523;
            }
          }
          goto LABEL_530;
        }
LABEL_522:
        unsigned int v209 = 0;
LABEL_523:
        if (v209) {
          v270 = v209;
        }
        else {
          v270 = v207;
        }
        if (*v270 != v11)
        {
          if (*v270 == (llvm::ValueAsMetadata *)-2) {
            --v485;
          }
          else {
            ++HIDWORD(v484);
          }
          const llvm::APInt *v270 = v11;
        }
        goto LABEL_530;
      }
      unsigned int v201 = 0;
      uint64_t v261 = 8 * HIDWORD(v484);
      unint64_t v262 = (llvm::ValueAsMetadata **)v483;
      while (*v262 != v11)
      {
        if (*v262 == (llvm::ValueAsMetadata *)-2) {
          unsigned int v201 = v262;
        }
        ++v262;
        v261 -= 8;
        if (!v261)
        {
          if (!v201) {
            goto LABEL_506;
          }
LABEL_550:
          *unsigned int v201 = v11;
          --v485;
          break;
        }
      }
LABEL_530:
      if (v520 != v522) {
        free(v520);
      }
LABEL_532:
      int v271 = 1;
LABEL_533:
      v7 |= v271;
LABEL_534:
      int v10 = v24;
    }
    while (v24 != v9);
LABEL_847:
    uint64_t v6 = *(void *)(v480 + 8);
  }
  while (v6 != v5);
LABEL_850:
  unsigned int v415 = v482;
  unsigned int v414 = v483;
  unsigned int v416 = HIDWORD(v484);
  unsigned int v417 = v484;
  if (v483 == v482) {
    uint64_t v418 = HIDWORD(v484);
  }
  else {
    uint64_t v418 = v484;
  }
  int v419 = v483;
  if (v418)
  {
    uint64_t v420 = 0;
    while (*(void *)&v483[v420] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v420 += 8;
      if (8 * v418 == v420) {
        goto LABEL_875;
      }
    }
    int v419 = &v483[v420];
  }
  unsigned int v421 = &v483[8 * v418];
  if (v419 != v421)
  {
    unint64_t v422 = *(void *)v419;
LABEL_861:
    int v423 = *(_DWORD *)(v422 + 20);
    if ((v423 & 0x40000000) != 0)
    {
      unint64_t v425 = *(void *)(v422 - 8);
      uint64_t v424 = v423 & 0x7FFFFFF;
      if (v424) {
        goto LABEL_863;
      }
    }
    else
    {
      uint64_t v424 = v423 & 0x7FFFFFF;
      unint64_t v425 = v422 - 32 * v424;
      if (v424)
      {
LABEL_863:
        uint64_t v426 = 32 * v424;
        unsigned int v427 = (void **)(v425 + 16);
        do
        {
          if (*(v427 - 2))
          {
            **unsigned int v427 = *(v427 - 1);
            uint64_t v428 = (uint64_t)*(v427 - 1);
            if (v428) {
              *(void *)(v428 + 16) = *v427;
            }
          }
          *(v427 - 2) = 0;
          v427 += 4;
          v426 -= 32;
        }
        while (v426);
      }
    }
    v429 = (unint64_t *)(v419 + 8);
    while (v429 != (unint64_t *)v421)
    {
      unint64_t v430 = *v429++;
      unint64_t v422 = v430;
      if (v430 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        int v419 = (char *)(v429 - 1);
        goto LABEL_861;
      }
    }
    unsigned int v415 = v482;
    unsigned int v414 = v483;
    unsigned int v416 = HIDWORD(v484);
    unsigned int v417 = v484;
  }
LABEL_875:
  if (v414 == v415) {
    uint64_t v431 = v416;
  }
  else {
    uint64_t v431 = v417;
  }
  v432 = v414;
  if (v431)
  {
    uint64_t v433 = 0;
    while (*(void *)&v414[v433] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v433 += 8;
      if (8 * v431 == v433) {
        goto LABEL_886;
      }
    }
    v432 = &v414[v433];
  }
  if (v432 != &v414[8 * v431]) {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
LABEL_886:
  if (v414 == v415)
  {
LABEL_887:
    int v485 = 0;
    HIDWORD(v484) = 0;
  }
  else
  {
    if (v484 < 0x21 || 4 * (HIDWORD(v484) - v485) >= v484)
    {
      memset(v414, 255, 8 * v484);
      goto LABEL_887;
    }
    llvm::SmallPtrSetImplBase::shrink_and_clear((void **)&v482);
  }
  int v434 = sub_1CD0FFA48(v2, (llvm::BinaryOperator *)1);
  if (v483 != v482) {
    free(v483);
  }
  return (v7 | v434) & 1;
}

uint64_t sub_1CB934EB4(int a1)
{
  uint64_t v3 = 0xA4600000000;
  uint64_t v4 = 2376;
  if (!(!v2 & v1))
  {
    switch(a1)
    {
      case 2426:
        return v3 | v4;
      case 2427:
        goto LABEL_5;
      case 2428:
        goto LABEL_6;
      case 2429:
        goto LABEL_7;
      case 2430:
        goto LABEL_8;
      case 2431:
        goto LABEL_9;
      case 2432:
        goto LABEL_10;
      case 2433:
        goto LABEL_11;
      case 2434:
        goto LABEL_12;
      case 2435:
        goto LABEL_13;
      case 2436:
        goto LABEL_14;
      case 2437:
        goto LABEL_15;
      case 2438:
        goto LABEL_16;
      case 2439:
        goto LABEL_17;
      case 2440:
        goto LABEL_18;
      case 2441:
        goto LABEL_19;
      default:
        JUMPOUT(0);
    }
  }
  switch(a1)
  {
    case 2688:
LABEL_5:
      uint64_t v3 = 0xA4800000000;
      uint64_t v4 = 2378;
      break;
    case 2689:
LABEL_6:
      uint64_t v3 = 0xA4A00000000;
      uint64_t v4 = 2380;
      break;
    case 2690:
LABEL_7:
      uint64_t v3 = 0xA4C00000000;
      uint64_t v4 = 2382;
      break;
    case 2691:
LABEL_8:
      uint64_t v3 = 0xA4E00000000;
      uint64_t v4 = 2384;
      break;
    case 2692:
LABEL_9:
      uint64_t v3 = 0xA5000000000;
      uint64_t v4 = 2386;
      break;
    case 2693:
LABEL_10:
      uint64_t v3 = 0xA5200000000;
      uint64_t v4 = 2388;
      break;
    case 2694:
LABEL_11:
      uint64_t v3 = 0xA5400000000;
      uint64_t v4 = 2390;
      break;
    case 2695:
LABEL_12:
      uint64_t v3 = 0xA5600000000;
      uint64_t v4 = 2392;
      break;
    case 2696:
LABEL_13:
      uint64_t v3 = 0xA5800000000;
      uint64_t v4 = 2394;
      break;
    case 2697:
LABEL_14:
      uint64_t v3 = 0xA5A00000000;
      uint64_t v4 = 2396;
      break;
    case 2698:
LABEL_15:
      uint64_t v3 = 0xA5C00000000;
      uint64_t v4 = 2398;
      break;
    case 2699:
LABEL_16:
      uint64_t v3 = 0xA5E00000000;
      uint64_t v4 = 2400;
      break;
    case 2700:
LABEL_17:
      uint64_t v3 = 0xA6000000000;
      uint64_t v4 = 2402;
      break;
    case 2701:
LABEL_18:
      uint64_t v3 = 0xA6200000000;
      uint64_t v4 = 2404;
      break;
    case 2702:
LABEL_19:
      uint64_t v3 = 0xA6400000000;
      uint64_t v4 = 2406;
      break;
    default:
      return v3 | v4;
  }
  return v3 | v4;
}

llvm::Instruction *sub_1CB935044(uint64_t *a1, llvm::Type *a2, void *a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(*(void *)(a1[6] + 56) + 40);
  unsigned __int8 Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(v8 + 272), a2, 0);
  int v10 = (llvm::Type *)*(unsigned int *)(v8 + 276);
  unint64_t v11 = operator new(0x68uLL);
  v11[13] = v11[13] & 0x38000000 | 1;
  uint64_t v12 = (llvm::Instruction *)(v11 + 8);
  *(void *)unint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *((void *)v11 + 3) = v11 + 8;
  __int16 v15 = 257;
  llvm::AllocaInst::AllocaInst((unint64_t *)v11 + 4, a2, v10, a3, Alignment, &v14, 0);
  return sub_1CB844E0C(a1, v12, a4);
}

uint64_t sub_1CB93510C(uint64_t result, __int16 a2)
{
  BOOL v6 = (a2 & 0xFF00) != 0;
  if (!(_BYTE)a2) {
    BOOL v6 = 0;
  }
  if (result == 14 && !v6)
  {
    uint64_t v11 = v3;
    uint64_t v12 = v2;
    uint64_t v13 = v4;
    uint64_t v14 = v5;
    std::to_string(&v7, 0xEu);
    sub_1CB935710("Unsupported pack/unpack format: ", &v7, &v8);
    __int16 v10 = 260;
    int v9 = &v8;
    llvm::report_fatal_error((llvm *)&v9, (const llvm::Twine *)1);
  }
  return result;
}

void sub_1CB93517C(llvm::SmallPtrSetImplBase **a1, unsigned char *a2, uint64_t a3)
{
  v68[4] = *MEMORY[0x1E4F143B8];
  __dst = v68;
  unint64_t v67 = 0x400000000;
  unsigned int v63 = v65;
  uint64_t v64 = 0x400000000;
  sub_1CB935BDC((unsigned int *)&v63, a2, &a2[8 * a3]);
  unsigned int v4 = v64;
  if (v64)
  {
LABEL_2:
    uint64_t v5 = v63;
    if (v63 == v65)
    {
      uint64_t v6 = v67;
      if (v67 >= v4)
      {
        memmove(__dst, v65, 8 * v4);
      }
      else
      {
        if (HIDWORD(v67) < v4)
        {
          LODWORD(v67) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v67) {
          memmove(__dst, v65, 8 * v67);
        }
        else {
          uint64_t v6 = 0;
        }
        if (v6 != v64) {
          memcpy((char *)__dst + 8 * v6, (char *)v63 + 8 * v6, 8 * v64 - 8 * v6);
        }
      }
      LODWORD(v64) = 0;
      goto LABEL_20;
    }
    if (__dst != v68)
    {
      free(__dst);
      uint64_t v5 = v63;
      unsigned int v4 = v64;
    }
    __dst = v5;
    unint64_t v67 = __PAIR64__(HIDWORD(v64), v4);
    unsigned int v63 = v65;
    uint64_t v64 = 0;
    if (!v4) {
      goto LABEL_132;
    }
    while (1)
    {
LABEL_20:
      uint64_t v9 = *((void *)__dst + v4 - 1);
      LODWORD(v67) = v4 - 1;
      uint64_t v10 = *(void *)(v9 + 8);
      uint64_t v11 = *a1;
      uint64_t v12 = *(void *)*a1;
      for (i = *((void *)*a1 + 1); v10; uint64_t v10 = *(void *)(v10 + 8))
      {
        uint64_t v13 = *(void *)(v10 + 24);
        if (i == v12)
        {
          uint64_t v14 = *((unsigned int *)v11 + 5);
          __int16 v15 = (void *)(i + 8 * v14);
          if (v14)
          {
            uint64_t v16 = 0;
            uint64_t v17 = 8 * v14;
            while (*(void *)(i + v16) != v13)
            {
              v16 += 8;
              if (v17 == v16) {
                goto LABEL_39;
              }
            }
            __int16 v15 = (void *)(i + v16);
          }
LABEL_39:
          uint64_t v26 = *((void *)*a1 + 1);
        }
        else
        {
          uint64_t v18 = *((unsigned int *)v11 + 4);
          int v19 = v18 - 1;
          unsigned int v20 = (v18 - 1) & ((v13 >> 4) ^ (v13 >> 9));
          __int16 v15 = (void *)(i + 8 * v20);
          uint64_t v21 = *v15;
          if (*v15 == -1)
          {
            BOOL v22 = 0;
LABEL_41:
            if (v22) {
              __int16 v15 = v22;
            }
            if (*v15 != v13) {
              __int16 v15 = (void *)(i + 8 * v18);
            }
          }
          else
          {
            BOOL v22 = 0;
            int v23 = 1;
            while (v21 != v13)
            {
              if (v22) {
                BOOL v24 = 0;
              }
              else {
                BOOL v24 = v21 == -2;
              }
              if (v24) {
                BOOL v22 = v15;
              }
              unsigned int v25 = v20 + v23++;
              unsigned int v20 = v25 & v19;
              __int16 v15 = (void *)(i + 8 * (v25 & v19));
              uint64_t v21 = *v15;
              if (*v15 == -1) {
                goto LABEL_41;
              }
            }
          }
          uint64_t v26 = *(void *)*a1;
        }
        unint64_t v27 = i == v26
            ? (llvm::SmallPtrSetImplBase *)((char *)v11 + 20)
            : (llvm::SmallPtrSetImplBase *)((char *)v11 + 16);
        if (v15 == (void *)(i + 8 * *(unsigned int *)v27)) {
          goto LABEL_126;
        }
      }
      uint64_t v28 = *((unsigned int *)v11 + 5);
      if (i != v12)
      {
        unsigned int v7 = *((_DWORD *)v11 + 4);
        goto LABEL_62;
      }
      if (!v28) {
        break;
      }
      BOOL v29 = 0;
      uint64_t v30 = 8 * v28;
      __int16 v31 = *(void **)*a1;
      while (*v31 != v9)
      {
        if (*v31 == -2) {
          BOOL v29 = v31;
        }
        ++v31;
        v30 -= 8;
        if (!v30)
        {
          if (v29)
          {
            void *v29 = v9;
            --*((_DWORD *)v11 + 6);
            break;
          }
          goto LABEL_59;
        }
      }
LABEL_83:
      int v41 = *(_DWORD *)(v9 + 20);
      if ((v41 & 0x40000000) != 0)
      {
        uint64_t v43 = *(uint64_t **)(v9 - 8);
        uint64_t v42 = v41 & 0x7FFFFFF;
        if (v42)
        {
LABEL_87:
          int v44 = &v43[4 * v42];
          do
          {
            uint64_t v45 = *v43;
            if (*v43) {
              BOOL v46 = *(unsigned __int8 *)(*v43 + 16) >= 0x1Cu;
            }
            else {
              BOOL v46 = 0;
            }
            if (v46)
            {
              uint64_t v47 = *a1;
              uint64_t v49 = *(void *)*a1;
              uint64_t v48 = *((void *)*a1 + 1);
              if (v48 == v49)
              {
                uint64_t v50 = *((unsigned int *)v47 + 5);
                int v51 = (void *)(v48 + 8 * v50);
                if (v50)
                {
                  uint64_t v52 = 0;
                  uint64_t v53 = 8 * v50;
                  while (*(void *)(v48 + v52) != v45)
                  {
                    v52 += 8;
                    if (v53 == v52) {
                      goto LABEL_111;
                    }
                  }
                  int v51 = (void *)(v48 + v52);
                }
LABEL_111:
                uint64_t v49 = *((void *)*a1 + 1);
              }
              else
              {
                uint64_t v54 = *((unsigned int *)v47 + 4);
                int v55 = v54 - 1;
                unsigned int v56 = (v54 - 1) & ((v45 >> 4) ^ (v45 >> 9));
                int v51 = (void *)(v48 + 8 * v56);
                uint64_t v57 = *v51;
                if (*v51 == -1)
                {
                  int v58 = 0;
LABEL_121:
                  if (v58) {
                    int v51 = v58;
                  }
                  if (*v51 != v45) {
                    int v51 = (void *)(v48 + 8 * v54);
                  }
                }
                else
                {
                  int v58 = 0;
                  int v59 = 1;
                  while (v57 != v45)
                  {
                    if (v58) {
                      BOOL v60 = 0;
                    }
                    else {
                      BOOL v60 = v57 == -2;
                    }
                    if (v60) {
                      int v58 = v51;
                    }
                    unsigned int v61 = v56 + v59++;
                    unsigned int v56 = v61 & v55;
                    int v51 = (void *)(v48 + 8 * (v61 & v55));
                    uint64_t v57 = *v51;
                    if (*v51 == -1) {
                      goto LABEL_121;
                    }
                  }
                }
              }
              if (v48 == v49) {
                uint64_t v62 = 20;
              }
              else {
                uint64_t v62 = 16;
              }
              if (v51 == (void *)(v48 + 8 * *(unsigned int *)((char *)v47 + v62)))
              {
                if (v64 >= (unint64_t)HIDWORD(v64)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v63 + v64) = v45;
                LODWORD(v64) = v64 + 1;
              }
            }
            v43 += 4;
          }
          while (v43 != v44);
        }
      }
      else
      {
        uint64_t v42 = v41 & 0x7FFFFFF;
        uint64_t v43 = (uint64_t *)(v9 - 32 * v42);
        if (v42) {
          goto LABEL_87;
        }
      }
LABEL_126:
      unsigned int v4 = v67;
      if (!v67)
      {
        unsigned int v4 = v64;
        if (!v64) {
          goto LABEL_132;
        }
        goto LABEL_2;
      }
    }
LABEL_59:
    unsigned int v7 = *((_DWORD *)v11 + 4);
    if (v28 < v7)
    {
      *((_DWORD *)v11 + 5) = v28 + 1;
      *(void *)(v12 + 8 * v28) = v9;
      goto LABEL_83;
    }
LABEL_62:
    if (3 * v7 <= 4 * ((int)v28 - *((_DWORD *)v11 + 6)))
    {
      if (v7 >= 0x40) {
        v7 *= 2;
      }
      else {
        unsigned int v7 = 128;
      }
    }
    else if (v7 - v28 >= v7 >> 3)
    {
LABEL_64:
      unsigned int v32 = v7 - 1;
      unsigned int v33 = (v7 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      uint64_t v34 = (void *)(i + 8 * v33);
      uint64_t v35 = *v34;
      if (*v34 == -1)
      {
        long long v36 = 0;
LABEL_76:
        if (v36) {
          unsigned int v40 = v36;
        }
        else {
          unsigned int v40 = v34;
        }
        if (*v40 != v9)
        {
          if (*v40 == -2) {
            --*((_DWORD *)v11 + 6);
          }
          else {
            ++*((_DWORD *)v11 + 5);
          }
          *unsigned int v40 = v9;
        }
      }
      else
      {
        long long v36 = 0;
        int v37 = 1;
        while (v35 != v9)
        {
          if (v36) {
            BOOL v38 = 0;
          }
          else {
            BOOL v38 = v35 == -2;
          }
          if (v38) {
            long long v36 = v34;
          }
          unsigned int v39 = v33 + v37++;
          unsigned int v33 = v39 & v32;
          uint64_t v34 = (void *)(i + 8 * (v39 & v32));
          uint64_t v35 = *v34;
          if (*v34 == -1) {
            goto LABEL_76;
          }
        }
      }
      goto LABEL_83;
    }
    llvm::SmallPtrSetImplBase::Grow(*a1, v7);
    unsigned int v7 = *((_DWORD *)v11 + 4);
    uint64_t i = *((void *)v11 + 1);
    goto LABEL_64;
  }
LABEL_132:
  if (v63 != v65) {
    free(v63);
  }
  if (__dst != v68) {
    free(__dst);
  }
}

__n128 sub_1CB935710@<Q0>(std::string::value_type *__s@<X0>, std::string *this@<X1>, std::string *a3@<X8>)
{
  unsigned int v4 = (__n128 *)std::string::insert(this, 0, __s);
  __n128 result = *v4;
  *a3 = *(std::string *)v4->n128_u8;
  v4->n128_u64[0] = 0;
  v4->n128_u64[1] = 0;
  v4[1].n128_u64[0] = 0;
  return result;
}

void sub_1CB935758(void *a1, uint64_t a2)
{
  v25[16] = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *(_DWORD *)(*a1 + 8);
  if ((*(_DWORD *)(*a1 + 8) & 0xFE) == 0x12 || v2 < 7 || v2 == 13)
  {
    int v23 = v25;
    uint64_t v24 = 0x800000000;
    uint64_t v6 = a1[1];
    if (!v6) {
      goto LABEL_35;
    }
    unsigned int v8 = 0;
    do
    {
      if (v8 >= HIDWORD(v24)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v9 = (char *)v23 + 16 * v8;
      *uint64_t v9 = v6;
      v9[1] = 0;
      unsigned int v8 = v24 + 1;
      LODWORD(v24) = v24 + 1;
      uint64_t v6 = *(void *)(v6 + 8);
    }
    while (v6);
    if (!v8)
    {
LABEL_35:
      if (v23 != v25) {
        free(v23);
      }
      return;
    }
    while (1)
    {
      uint64_t v10 = (char *)v23 + 16 * v8;
      uint64_t v11 = *((void *)v10 - 2);
      uint64_t v12 = *((void *)v10 - 1);
      LODWORD(v24) = v8 - 1;
      uint64_t v13 = *(void *)(v11 + 24);
      if (!v13 || *(unsigned char *)(v13 + 16) != 89) {
        break;
      }
      uint64_t v14 = *(void *)(v13 - 32);
      __int16 v15 = (unsigned int *)(v14 + 24);
      if (*(_DWORD *)(v14 + 32) >= 0x41u) {
        __int16 v15 = *(unsigned int **)v15;
      }
      uint64_t v16 = sub_1CB93598C(*v15, (uint64_t)a1) + v12;
      uint64_t v17 = *(void *)(v13 + 8);
      if (!v17 || *(void *)(v17 + 8)) {
        goto LABEL_29;
      }
      uint64_t v18 = *(void *)(*(void *)(v11 + 24) + 8);
      if (v18)
      {
        unint64_t v19 = v12 & 0xFFFFFFFF00000000 | v16;
        unsigned int v8 = v24;
        do
        {
          if (v8 >= HIDWORD(v24)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          unsigned int v20 = (char *)v23 + 16 * v8;
          void *v20 = v18;
          v20[1] = v19;
          unsigned int v8 = v24 + 1;
          LODWORD(v24) = v24 + 1;
          uint64_t v18 = *(void *)(v18 + 8);
        }
        while (v18);
        goto LABEL_32;
      }
LABEL_31:
      unsigned int v8 = v24;
LABEL_32:
      if (!v8) {
        goto LABEL_35;
      }
    }
    uint64_t v16 = v12;
LABEL_29:
    unint64_t v21 = *(unsigned int *)(a2 + 8);
    if (v21 >= *(unsigned int *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    BOOL v22 = (void *)(*(void *)a2 + 16 * v21);
    *BOOL v22 = v11;
    v22[1] = v16;
    ++*(_DWORD *)(a2 + 8);
    goto LABEL_31;
  }
}

uint64_t sub_1CB93598C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 != 84) {
    return a1;
  }
  uint64_t v3 = *(void *)(a2 - 32);
  if (v3 && !*(unsigned char *)(v3 + 16) && *(void *)(v3 + 24) == *(void *)(a2 + 72) && (*(unsigned char *)(v3 + 33) & 0x20) != 0)
  {
    int v4 = *(_DWORD *)(v3 + 36);
    unsigned int v5 = v4 - 2545;
    unsigned int v6 = v4 - 2471;
    BOOL v7 = v4 == 2703;
    uint64_t v8 = 0xFFFFFFFFLL;
    if (!v7) {
      uint64_t v8 = 0xFFFFFFFFLL;
    }
    if (v6 < 8) {
      uint64_t v8 = 1;
    }
    if (v5 < 0x20) {
      uint64_t v8 = 1;
    }
    uint64_t v9 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * v8);
    uint64_t v10 = (void *)(v9 + 24);
    if (*(_DWORD *)(v9 + 32) >= 0x41u) {
      uint64_t v10 = (void *)*v10;
    }
    unsigned int v11 = *(_DWORD *)v10;
    if (*(_DWORD *)v10)
    {
      uint64_t v12 = 0;
      int v13 = 0;
      uint64_t v2 = 0xFFFFFFFFLL;
      while (1)
      {
        if (v11)
        {
          if (v13 == a1) {
            return v12;
          }
          ++v13;
        }
        uint64_t v12 = (v12 + 1);
        BOOL v14 = v11 > 1;
        v11 >>= 1;
        if (!v14) {
          return v2;
        }
      }
    }
    return 0xFFFFFFFFLL;
  }
  return v2;
}

llvm::Instruction *sub_1CB935A74(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, llvm::Type *a5, uint64_t a6)
{
  if (!a2 || *(unsigned __int8 *)(a2 + 16) > 0x14u || !a3 || *(unsigned __int8 *)(a3 + 16) > 0x14u)
  {
    uint64_t v12 = operator new(0xA8uLL);
    v12[21] = v12[21] & 0x38000000 | 2;
    int v13 = (llvm::Instruction *)(v12 + 16);
    *(void *)uint64_t v12 = 0;
    *((void *)v12 + 1) = 0;
    *((void *)v12 + 2) = 0;
    *((void *)v12 + 3) = v12 + 16;
    *((void *)v12 + 4) = 0;
    *((void *)v12 + 5) = 0;
    *((void *)v12 + 6) = 0;
    *((void *)v12 + 7) = v12 + 16;
    __int16 v18 = 257;
    llvm::ShuffleVectorInst::ShuffleVectorInst((uint64_t ***)v12 + 8, (uint64_t **)a2, (uint64_t **)a3, a4, a5, &v17, 0);
    return sub_1CB844E0C((uint64_t *)a1, v13, a6);
  }
  BOOL v14 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, uint64_t, void *, llvm::Type *))(**(void **)(a1 + 72) + 336))(*(void *)(a1 + 72), a2, a3, a4, a5);
  if (v14) {
    BOOL v16 = v14[16] >= 0x1Cu;
  }
  else {
    BOOL v16 = 0;
  }
  if (!v16) {
    return (llvm::Instruction *)v14;
  }

  return sub_1CB844E0C((uint64_t *)a1, (llvm::Instruction *)v14, a6);
}

unsigned int *sub_1CB935BDC(unsigned int *result, unsigned char *__src, unsigned char *a3)
{
  uint64_t v3 = result;
  size_t v4 = a3 - __src;
  uint64_t v5 = result[2];
  if (v5 + ((a3 - __src) >> 3) > (unint64_t)result[3]) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (__src != a3)
  {
    __n128 result = (unsigned int *)memcpy((void *)(*(void *)result + 8 * v5), __src, v4);
    LODWORD(v5) = v3[2];
  }
  v3[2] = v5 + (v4 >> 3);
  return result;
}

void sub_1CB935C64()
{
}

uint64_t sub_1CB935CFC(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCBEBB0;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x600000001;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  *(void *)a1 = &unk_1F25EEE70;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCBEBB8, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CB935C64;
    v5[1] = &PassRegistry;
    size_t v4 = v5;
    std::__call_once(&qword_1EBCBEBB8, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CB935DF4()
{
}

void sub_1CB935E30(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  char v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    size_t v4 = a1;
    free(v1);
    a1 = v4;
  }
  uint64_t v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    uint64_t v5 = a1;
    free(v2);
    a1 = v5;
  }
  uint64_t v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    unsigned int v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CB935EE4(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  uint64_t v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  size_t v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CB935F90()
{
  return "AGX2 Common Store Backfiller Pass";
}

void sub_1CB935FA0(llvm::PassRegistry *a1, uint64_t a2)
{
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

uint64_t sub_1CB936014(void *a1, llvm::MachineOperand *a2)
{
  uint64_t v2 = a2;
  v317[21] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a2 + 2);
  a1[34] = v4;
  a1[31] = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 104))(v4);
  a1[32] = (*(uint64_t (**)(void))(*(void *)a1[34] + 176))(a1[34]);
  BOOL v293 = a1;
  a1[33] = *((void *)v2 + 5);
  uint64_t v5 = *((void *)v2 + 43);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 88))(v5))
  {
    char hasAddressTaken = 0;
  }
  else
  {
    BOOL v7 = (llvm::Function *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 568))(v5);
    if (v7) {
      char hasAddressTaken = llvm::Function::hasAddressTaken(v7, 0, 0, 1, 0, 0);
    }
    else {
      char hasAddressTaken = 1;
    }
  }
  uint64_t v8 = a1[34];
  uint64_t v279 = v2;
  if (*(unsigned char *)(v8 + 318)
    || !*(unsigned char *)(v8 + 343)
    || (*(_DWORD *)(*((void *)v2 + 1) + 544) == 1 ? (char v108 = 1) : (char v108 = hasAddressTaken),
        (v108 & 1) != 0 || (*(_WORD *)(*(void *)v2 + 18) & 0x3FF0) == 0x640))
  {
    char v280 = 0;
    goto LABEL_8;
  }
  *((void *)&v306 + 1) = 0;
  uint64_t v307 = 0;
  *(void *)&long long v306 = (char *)&v306 + 8;
  int v109 = (void *)*((void *)v2 + 41);
  if (v109 == (void *)((char *)v2 + 320)) {
    goto LABEL_709;
  }
  int v110 = (void *)((char *)v2 + 320);
  uint64_t v289 = v5;
  int64x2_t v285 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  uint64_t v284 = v110;
  do
  {
    for (uint64_t i = v109[7]; (void *)i != v109 + 6; uint64_t i = *(void *)(i + 8))
    {
      if ((*(unsigned char *)(*(void *)(i + 16) + 9) & 0x20) == 0) {
        goto LABEL_362;
      }
      uint64_t v112 = *(void *)(i + 32);
      if ((*(_DWORD *)v112 & 0xFFF00) != 0) {
        goto LABEL_362;
      }
      uint64_t v113 = *(unsigned int *)(v112 + 4);
      uint64_t v114 = a1[33];
      unsigned int v115 = (uint64_t *)((v113 & 0x80000000) != 0
                       ? *(void *)(v114 + 24) + 16 * (v113 & 0x7FFFFFFF) + 8
                       : *(void *)(v114 + 272) + 8 * v113);
      uint64_t v116 = *v115;
      if (!v116) {
        goto LABEL_362;
      }
      if ((*(unsigned char *)(v116 + 3) & 1) == 0)
      {
        uint64_t v116 = *(void *)(v116 + 24);
        if (!v116 || (*(unsigned char *)(v116 + 3) & 1) == 0) {
          goto LABEL_362;
        }
      }
      uint64_t v117 = *(void *)(v116 + 24);
      if (v117)
      {
        BOOL v118 = (*(unsigned char *)(v117 + 3) & 1) == 0;
        if ((v113 & 0x80000000) == 0) {
          goto LABEL_362;
        }
      }
      else
      {
        BOOL v118 = 1;
        if ((v113 & 0x80000000) == 0) {
          goto LABEL_362;
        }
      }
      if (!v118 || *(unsigned char *)(v112 + 64) != 1)
      {
LABEL_362:
        if ((*(unsigned char *)i & 4) != 0) {
          continue;
        }
        goto LABEL_544;
      }
      unsigned int v295 = v299;
      uint64_t v296 = v299;
      uint64_t v297 = 8;
      unsigned int v298 = 0;
      uint64_t v119 = v113 & 0x7FFFFFFF;
      uint64_t v120 = *(void *)(*(void *)(v114 + 24) + 16 * v119 + 8);
      if (v120)
      {
        while ((*(unsigned char *)(v120 + 3) & 1) != 0)
        {
          uint64_t v120 = *(void *)(v120 + 24);
          if (!v120) {
            goto LABEL_374;
          }
        }
        int v121 = 0;
        int v123 = 1;
        char v122 = 1;
LABEL_389:
        uint64_t v134 = *(void *)(v120 + 8);
        int v135 = **(unsigned __int16 **)(v134 + 16);
        if ((v135 - 5396) > 0x1DF)
        {
          unsigned int v138 = v135 - 1452;
          unsigned int v139 = v135 - 971;
          BOOL v140 = v138 >= 0x90 && v139 > 0xF;
          if (!v140)
          {
            uint64_t v141 = *(void *)(v134 + 32);
            unint64_t v142 = (unint64_t)(v120 - v141) >> 5;
            if (v142 == 3
              || (*(unsigned char *)(v141 + 160) == 1 ? (unsigned int v143 = 6) : (unsigned int v143 = 7),
                  *(unsigned char *)(v141 + 32 * v143) == 1 ? (int v144 = 1) : (int v144 = 2),
                  v144 + v143 == v142))
            {
              int v123 = 0;
            }
          }
        }
        else
        {
          uint64_t v136 = *(void *)(v134 + 32);
          if (*(unsigned char *)(v136 + 64) != 1) {
            goto LABEL_394;
          }
          uint64_t v137 = 160;
          if (*(unsigned char *)(v136 + 96) == 1) {
            uint64_t v137 = 128;
          }
          if (*(unsigned char *)(v136 + v137) != 1) {
LABEL_394:
          }
            char v122 = 0;
        }
        unsigned int v146 = v295;
        uint64_t v145 = v296;
        if (v296 == v295)
        {
          unsigned int v147 = HIDWORD(v297);
          int v148 = &v296[8 * HIDWORD(v297)];
          if (HIDWORD(v297))
          {
            uint64_t v149 = 0;
            while (*(void *)&v296[v149] != v134)
            {
              v149 += 8;
              if (8 * HIDWORD(v297) == v149) {
                goto LABEL_427;
              }
            }
            int v148 = &v296[v149];
          }
LABEL_427:
          unsigned int v146 = v296;
        }
        else
        {
          int v150 = v297 - 1;
          unsigned int v151 = (v297 - 1) & ((v134 >> 4) ^ (v134 >> 9));
          int v148 = &v296[8 * v151];
          uint64_t v152 = *(void *)v148;
          if (*(void *)v148 == -1)
          {
            uint64_t v153 = 0;
LABEL_456:
            if (v153) {
              int v148 = v153;
            }
            unsigned int v147 = HIDWORD(v297);
            if (*(void *)v148 != v134) {
              int v148 = &v296[8 * v297];
            }
          }
          else
          {
            uint64_t v153 = 0;
            int v154 = 1;
            while (v152 != v134)
            {
              if (v153) {
                BOOL v155 = 0;
              }
              else {
                BOOL v155 = v152 == -2;
              }
              if (v155) {
                uint64_t v153 = v148;
              }
              unsigned int v156 = v151 + v154++;
              unsigned int v151 = v156 & v150;
              int v148 = &v296[8 * (v156 & v150)];
              uint64_t v152 = *(void *)v148;
              if (*(void *)v148 == -1) {
                goto LABEL_456;
              }
            }
            unsigned int v147 = HIDWORD(v297);
          }
        }
        unsigned int v157 = v297;
        if (v296 == v146) {
          int v158 = v147;
        }
        else {
          int v158 = v297;
        }
        if (v148 == &v296[8 * v158])
        {
          if (v296 == v146)
          {
            if (v147)
            {
              unsigned int v159 = 0;
              uint64_t v160 = 8 * v147;
              unsigned int v161 = v296;
              while (*v161 != v134)
              {
                if (*v161 == -2) {
                  unsigned int v159 = v161;
                }
                ++v161;
                v160 -= 8;
                if (!v160)
                {
                  if (!v159) {
                    goto LABEL_440;
                  }
                  void *v159 = v134;
                  --v298;
                  goto LABEL_469;
                }
              }
              goto LABEL_469;
            }
LABEL_440:
            if (v297 > v147)
            {
              HIDWORD(v297) = v147 + 1;
              *(void *)&v296[8 * v147] = v134;
LABEL_469:
              uint64_t v171 = *(unsigned __int16 **)(v134 + 16);
              int v172 = *v171;
              unsigned int v173 = v172 - 9;
              if (((v172 - 9) > 0x3C || ((1 << (v172 - 9)) & 0x1000000000000605) == 0)
                && v172 != 0)
              {
                uint64_t v176 = *((void *)v171 + 1);
                if ((v176 & 0x10) == 0)
                {
                  ++v121;
                  BOOL v140 = v173 > 0x3C;
                  uint64_t v177 = (1 << v173) & 0x1000000000000405;
                  BOOL v179 = !v140 && v177 != 0 || v172 == 0;
                  if (v179 || (v171[8] & 1) != 0) {
                    goto LABEL_492;
                  }
                  __int16 v180 = *(_WORD *)(v134 + 44);
                  if ((v180 & 0xC) == 0 || (v180 & 4) != 0)
                  {
                    if ((v176 & 0x400) != 0) {
                      goto LABEL_492;
                    }
                  }
                  else
                  {
                    if ((v176 & 0x400) != 0) {
                      goto LABEL_492;
                    }
                    while ((*(_WORD *)(v134 + 44) & 8) != 0)
                    {
                      uint64_t v134 = *(void *)(v134 + 8);
                      if ((*(unsigned char *)(*(void *)(v134 + 16) + 9) & 4) != 0) {
                        goto LABEL_492;
                      }
                    }
                  }
                }
              }
              goto LABEL_539;
            }
          }
          if (3 * (int)v297 <= 4 * (v147 - v298))
          {
            if (v297 >= 0x40) {
              unsigned int v157 = 2 * v297;
            }
            else {
              unsigned int v157 = 128;
            }
          }
          else if (v297 - v147 >= v297 >> 3)
          {
            goto LABEL_444;
          }
          int v281 = v123;
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v295, v157);
          int v123 = v281;
          unsigned int v157 = v297;
          uint64_t v145 = v296;
LABEL_444:
          unsigned int v162 = v157 - 1;
          unsigned int v163 = (v157 - 1) & ((v134 >> 4) ^ (v134 >> 9));
          uint64_t v164 = &v145[8 * v163];
          uint64_t v165 = *(void *)v164;
          if (*(void *)v164 == -1)
          {
            int v166 = 0;
LABEL_462:
            if (v166) {
              int v170 = v166;
            }
            else {
              int v170 = v164;
            }
            if (*(void *)v170 != v134)
            {
              if (*(void *)v170 == -2) {
                --v298;
              }
              else {
                ++HIDWORD(v297);
              }
              *(void *)int v170 = v134;
            }
          }
          else
          {
            int v166 = 0;
            int v167 = 1;
            while (v165 != v134)
            {
              if (v166) {
                BOOL v168 = 0;
              }
              else {
                BOOL v168 = v165 == -2;
              }
              if (v168) {
                int v166 = v164;
              }
              unsigned int v169 = v163 + v167++;
              unsigned int v163 = v169 & v162;
              uint64_t v164 = &v145[8 * (v169 & v162)];
              uint64_t v165 = *(void *)v164;
              if (*(void *)v164 == -1) {
                goto LABEL_462;
              }
            }
          }
          goto LABEL_469;
        }
LABEL_492:
        while (1)
        {
          uint64_t v120 = *(void *)(v120 + 24);
          if (!v120) {
            break;
          }
          if ((*(unsigned char *)(v120 + 3) & 1) == 0) {
            goto LABEL_389;
          }
        }
      }
      else
      {
LABEL_374:
        int v121 = 0;
        char v122 = 1;
        LOBYTE(v123) = 1;
      }
      if ((v123 & 1) == 0 || (v122 & 1) == 0) {
        goto LABEL_539;
      }
      uint64_t v124 = a1[32];
      int v125 = (llvm::MachineOperand *)(*(void *)(*(void *)(i + 32) + 80) | ((unint64_t)(*(_DWORD *)(*(void *)(v124 + 264) + 24 * (*(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(a1[33] + 24) + 16 * v119) & 0xFFFFFFFFFFFFFFF8) + 24) + *(_DWORD *)(v124 + 272) * ((*(void *)(v124 + 248) - *(void *)(v124 + 240)) >> 3))) == 32) << 63));
      unsigned int v126 = (void *)*((void *)&v306 + 1);
      if (*((void *)&v306 + 1))
      {
        int v127 = (long long *)((char *)&v306 + 8);
        do
        {
          unsigned int v128 = v127;
          BOOL v129 = v126;
          unint64_t v130 = v126[4];
          unint64_t v131 = v126 + 1;
          if (v130 >= (unint64_t)v125)
          {
            unint64_t v131 = v129;
            int v127 = v129;
          }
          unsigned int v126 = (void *)*v131;
        }
        while (v126);
        if (v127 != (long long *)((char *)&v306 + 8))
        {
          unsigned int v132 = v130 >= (unint64_t)v125 ? v129 : v128;
          if ((unint64_t)v125 >= v132[4])
          {
            if (v130 >= (unint64_t)v125) {
              long long v198 = v129;
            }
            else {
              long long v198 = v128;
            }
            *((_DWORD *)v198 + 10) += (v121 << 16) + 1;
            if (v130 >= (unint64_t)v125) {
              uint64_t v199 = (uint64_t)(v129 + 6);
            }
            else {
              uint64_t v199 = (uint64_t)(v128 + 3);
            }
            int v310 = (llvm::MachineOperand *)i;
            uint64_t v200 = (void *)v128 + 7;
            if (v130 >= (unint64_t)v125) {
              uint64_t v200 = v129 + 7;
            }
            if (v198[6])
            {
              int v202 = 8;
LABEL_561:
              int v203 = v202 - 1;
              unsigned int v204 = v203 & ((i >> 4) ^ (i >> 9));
              unsigned int v205 = &v200[v204];
              uint64_t v206 = *v205;
              if (i == *v205) {
                goto LABEL_539;
              }
              unsigned int v207 = 0;
              int v208 = 1;
              while (v206 != -4096)
              {
                if (v207) {
                  BOOL v209 = 0;
                }
                else {
                  BOOL v209 = v206 == -8192;
                }
                if (v209) {
                  unsigned int v207 = v205;
                }
                unsigned int v210 = v204 + v208++;
                unsigned int v204 = v210 & v203;
                unsigned int v205 = &v200[v204];
                uint64_t v206 = *v205;
                if (i == *v205) {
                  goto LABEL_539;
                }
              }
              if (v207) {
                BOOL v211 = v207;
              }
              else {
                BOOL v211 = v205;
              }
            }
            else
            {
              if (v130 >= (unint64_t)v125) {
                unsigned int v201 = v129;
              }
              else {
                unsigned int v201 = v128;
              }
              int v202 = *((_DWORD *)v201 + 16);
              if (v202)
              {
                uint64_t v200 = (void *)v198[7];
                goto LABEL_561;
              }
              BOOL v211 = 0;
            }
            unsigned int v212 = sub_1CB938A98(v199, (uint64_t)&v310, &v310, v211);
            *unsigned int v212 = v310;
            if (v130 >= (unint64_t)v125) {
              unsigned int v213 = v129;
            }
            else {
              unsigned int v213 = v128;
            }
            unint64_t v214 = *((unsigned int *)v213 + 32);
            if (v214 >= *((unsigned int *)v213 + 33)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(v213[15] + 8 * v214) = v310;
            ++*((_DWORD *)v213 + 32);
            int v110 = v284;
            goto LABEL_539;
          }
        }
      }
      uint64_t v301 = 1;
      v302[0] = v285;
      v302[1] = v285;
      v302[2] = v285;
      v302[3] = v285;
      uint64_t v303 = v305;
      uint64_t v304 = 0x800000000;
      int v133 = (v121 << 16) | 1;
      LODWORD(__p) = v133;
      int v310 = (llvm::MachineOperand *)i;
      unsigned int v181 = ((i >> 4) ^ (i >> 9)) & 7;
      uint64_t v182 = (void *)v302 + v181;
      uint64_t v183 = *v182;
      if (i != *v182)
      {
        int v184 = 0;
        int v185 = 1;
        while (v183 != -4096)
        {
          if (v184) {
            BOOL v186 = 0;
          }
          else {
            BOOL v186 = v183 == -8192;
          }
          if (v186) {
            int v184 = v182;
          }
          char v187 = v181 + v185++;
          unsigned int v181 = v187 & 7;
          uint64_t v182 = (void *)v302 + v181;
          uint64_t v183 = *v182;
          if (i == *v182) {
            goto LABEL_516;
          }
        }
        if (v184) {
          uint64_t v188 = v184;
        }
        else {
          uint64_t v188 = v182;
        }
        BOOL v189 = sub_1CB938A98((uint64_t)&v301, (uint64_t)&v310, &v310, v188);
        *BOOL v189 = v310;
        if (v304 >= (unint64_t)HIDWORD(v304)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v303 + v304) = v310;
        int v133 = (int)__p;
        LODWORD(v304) = v304 + 1;
      }
LABEL_516:
      int v310 = v125;
      LODWORD(v311) = v133;
      sub_1CB939044((int *)&v311 + 2, (uint64_t)&v301);
      uint64_t v190 = (uint64_t *)*((void *)&v306 + 1);
      uint64_t v191 = v310;
      uint64_t v192 = (uint64_t **)&v306 + 1;
      uint64_t v193 = (uint64_t **)&v306 + 1;
      if (*((void *)&v306 + 1))
      {
        while (1)
        {
          while (1)
          {
            uint64_t v193 = (uint64_t **)v190;
            unint64_t v194 = v190[4];
            if ((unint64_t)v310 >= v194) {
              break;
            }
            uint64_t v190 = *v193;
            uint64_t v192 = v193;
            if (!*v193) {
              goto LABEL_523;
            }
          }
          if (v194 >= (unint64_t)v310) {
            break;
          }
          uint64_t v190 = v193[1];
          if (!v190)
          {
            uint64_t v192 = v193 + 1;
            goto LABEL_523;
          }
        }
      }
      else
      {
LABEL_523:
        uint64_t v195 = (char *)operator new(0xC8uLL);
        *(void *)&long long v308 = v195;
        *((void *)&v308 + 1) = (char *)&v306 + 8;
        *((void *)v195 + 4) = v191;
        *((_DWORD *)v195 + 10) = v311;
        *((void *)v195 + 6) = 1;
        *(int64x2_t *)(v195 + 56) = v285;
        *(int64x2_t *)(v195 + 72) = v285;
        *(int64x2_t *)(v195 + 88) = v285;
        *(int64x2_t *)(v195 + 104) = v285;
        sub_1CB938F58((unsigned int *)v195 + 12, (unsigned int *)&v311 + 2);
        *((void *)v195 + 15) = v195 + 136;
        *((void *)v195 + 16) = 0x800000000;
        unsigned int v196 = v315;
        if (v315)
        {
          if (v314 == v317)
          {
            if (v315 >= 9) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(v195 + 136, v317, 8 * v315);
            *((_DWORD *)v195 + 32) = v196;
          }
          else
          {
            *((void *)v195 + 15) = v314;
            int v215 = v316;
            *((_DWORD *)v195 + 32) = v196;
            *((_DWORD *)v195 + 33) = v215;
            int v314 = v317;
            int v316 = 0;
          }
          unsigned int v315 = 0;
        }
        char v309 = 1;
        char v197 = (uint64_t *)v308;
        *(void *)long long v308 = 0;
        v197[1] = 0;
        v197[2] = (uint64_t)v193;
        *uint64_t v192 = v197;
        if (*(void *)v306)
        {
          *(void *)&long long v306 = *(void *)v306;
          char v197 = *v192;
        }
        sub_1CB8358B8(*((uint64_t **)&v306 + 1), v197);
        ++v307;
        *(void *)&long long v308 = 0;
        sub_1CB938EEC((uint64_t *)&v308);
      }
      if (v314 != v317) {
        free(v314);
      }
      int v110 = v284;
      if ((BYTE8(v311) & 1) == 0) {
        MEMORY[0x1D25D9CD0](v312, 8);
      }
      if (v303 != v305) {
        free(v303);
      }
      if ((v301 & 1) == 0) {
        MEMORY[0x1D25D9CD0](*(void *)&v302[0], 8);
      }
LABEL_539:
      if (v296 != v295) {
        free(v296);
      }
      if (i) {
        goto LABEL_362;
      }
LABEL_544:
      while ((*(_WORD *)(i + 44) & 8) != 0)
        uint64_t i = *(void *)(i + 8);
    }
    int v109 = (void *)v109[1];
  }
  while (v109 != v110);
  if (!v307)
  {
LABEL_709:
    char v216 = 0;
    goto LABEL_710;
  }
  char v216 = 0;
  unsigned int v217 = 0;
  int64x2_t v292 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    uint64_t v218 = -1;
    char __p = (void *)-1;
    uint64_t v301 = -1;
    BOOL v219 = (_OWORD *)v306;
    if ((long long *)v306 == (long long *)((char *)&v306 + 8)) {
      goto LABEL_623;
    }
    unsigned int v220 = 0;
    do
    {
      int v310 = (llvm::MachineOperand *)*((void *)v219 + 4);
      LODWORD(v311) = *((_DWORD *)v219 + 10);
      sub_1CB939044((int *)&v311 + 2, (uint64_t)(v219 + 3));
      if (v311 > v220)
      {
        char __p = v310;
        unsigned int v220 = v311;
      }
      if (v314 != v317) {
        free(v314);
      }
      if ((BYTE8(v311) & 1) == 0) {
        MEMORY[0x1D25D9CD0](v312, 8);
      }
      int v221 = (void *)*((void *)v219 + 1);
      if (v221)
      {
        do
        {
          BOOL v222 = v221;
          int v221 = (void *)*v221;
        }
        while (v221);
      }
      else
      {
        do
        {
          BOOL v222 = (_OWORD *)*((void *)v219 + 2);
          BOOL v95 = *(void *)v222 == (void)v219;
          BOOL v219 = v222;
        }
        while (!v95);
      }
      BOOL v219 = v222;
    }
    while (v222 != (long long *)((char *)&v306 + 8));
    uint64_t v218 = (uint64_t)__p;
    if (((unint64_t)__p & 0x8000000000000000) != 0)
    {
LABEL_623:
      int v227 = 519;
    }
    else
    {
      int v223 = (_OWORD *)v306;
      if ((long long *)v306 != (long long *)((char *)&v306 + 8))
      {
        unsigned int v224 = 0;
        do
        {
          int v310 = (llvm::MachineOperand *)*((void *)v223 + 4);
          LODWORD(v311) = *((_DWORD *)v223 + 10);
          sub_1CB939044((int *)&v311 + 2, (uint64_t)(v223 + 3));
          if (v311 > v224 && ((unint64_t)v310 & 0x8000000000000000) == 0 && v310 != __p)
          {
            uint64_t v301 = (uint64_t)v310;
            unsigned int v224 = v311;
          }
          if (v314 != v317) {
            free(v314);
          }
          if ((BYTE8(v311) & 1) == 0) {
            MEMORY[0x1D25D9CD0](v312, 8);
          }
          unsigned int v225 = (void *)*((void *)v223 + 1);
          if (v225)
          {
            do
            {
              char v226 = v225;
              unsigned int v225 = (void *)*v225;
            }
            while (v225);
          }
          else
          {
            do
            {
              char v226 = (_OWORD *)*((void *)v223 + 2);
              BOOL v95 = *(void *)v226 == (void)v223;
              int v223 = v226;
            }
            while (!v95);
          }
          int v223 = v226;
        }
        while (v226 != (long long *)((char *)&v306 + 8));
      }
      int v227 = 263;
      if (v301 != -1) {
        v218 |= v301 << 16;
      }
    }
    uint64_t v228 = (*(uint64_t (**)(uint64_t, void))(*(void *)v289 + 224))(v289, v218);
    int v229 = v228;
    if ((v228 & 0xFF00000000) == 0)
    {
      uint64_t v230 = (*(uint64_t (**)(uint64_t, void))(*(void *)v289 + 376))(v289, 0);
      if (v230 == -1) {
        break;
      }
      int v229 = v230;
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)v289 + 232))(v289, v218, v230);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v289 + 328))(v289, v218);
    }
    unsigned int __src = v217;
    char v231 = 0;
    uint64_t v232 = 0;
    int v233 = 2 * v229;
    char v234 = 1;
    do
    {
      char v235 = v234;
      unint64_t v236 = (unint64_t)*(&__p + v232);
      if (v236 != -1)
      {
        uint64_t v237 = (llvm::MachineOperand *)*((void *)&v306 + 1);
        unsigned int v238 = (uint64_t **)&v306 + 1;
        uint64_t v239 = (llvm::MachineOperand *)((char *)&v306 + 8);
        if (*((void *)&v306 + 1))
        {
          while (1)
          {
            while (1)
            {
              uint64_t v239 = v237;
              unint64_t v240 = *((void *)v237 + 4);
              if (v236 >= v240) {
                break;
              }
              uint64_t v237 = *(llvm::MachineOperand **)v239;
              unsigned int v238 = (uint64_t **)v239;
              if (!*(void *)v239) {
                goto LABEL_638;
              }
            }
            if (v240 >= v236) {
              break;
            }
            uint64_t v237 = (llvm::MachineOperand *)*((void *)v239 + 1);
            if (!v237)
            {
              unsigned int v238 = (uint64_t **)((char *)v239 + 8);
              goto LABEL_638;
            }
          }
        }
        else
        {
LABEL_638:
          unint64_t v241 = (char *)operator new(0xC8uLL);
          int v310 = (llvm::MachineOperand *)v241;
          *(void *)&long long v311 = (char *)&v306 + 8;
          *((void *)v241 + 4) = v236;
          *(_OWORD *)(v241 + 40) = 0u;
          *(_OWORD *)(v241 + 120) = 0u;
          *(_OWORD *)(v241 + 152) = 0u;
          *(_OWORD *)(v241 + 168) = 0u;
          *(_OWORD *)(v241 + 184) = 0u;
          *(_OWORD *)(v241 + 136) = 0u;
          *((_DWORD *)v241 + 12) = 1;
          *(int64x2_t *)(v241 + 56) = v292;
          *(int64x2_t *)(v241 + 72) = v292;
          *(int64x2_t *)(v241 + 88) = v292;
          *(int64x2_t *)(v241 + 104) = v292;
          *((void *)v241 + 15) = v241 + 136;
          *((void *)v241 + 16) = 0x800000000;
          BYTE8(v311) = 1;
          *(void *)unint64_t v241 = 0;
          *((void *)v241 + 1) = 0;
          *((void *)v241 + 2) = v239;
          *unsigned int v238 = (uint64_t *)v241;
          if (*(void *)v306)
          {
            *(void *)&long long v306 = *(void *)v306;
            unsigned int v242 = *v238;
          }
          else
          {
            unsigned int v242 = (uint64_t *)v241;
          }
          sub_1CB8358B8(*((uint64_t **)&v306 + 1), v242);
          ++v307;
          uint64_t v239 = v310;
          int v310 = 0;
          sub_1CB938EEC((uint64_t *)&v310);
        }
        uint64_t v243 = *((unsigned int *)v239 + 32);
        if (v243)
        {
          uint64_t v244 = (llvm::MachineInstr **)*((void *)v239 + 15);
          uint64_t v245 = &v244[v243];
          do
          {
            uint64_t v246 = *v244;
            uint64_t v247 = *(unsigned int *)(*((void *)*v244 + 4) + 4);
            uint64_t v248 = a1[33];
            if ((v247 & 0x80000000) != 0) {
              long long v249 = (int **)(*(void *)(v248 + 24) + 16 * (v247 & 0x7FFFFFFF) + 8);
            }
            else {
              long long v249 = (int **)(*(void *)(v248 + 272) + 8 * v247);
            }
            unsigned int v250 = *v249;
            if (v250)
            {
              while ((*((unsigned char *)v250 + 3) & 1) != 0)
              {
                unsigned int v250 = (int *)*((void *)v250 + 3);
                if (!v250) {
                  goto LABEL_669;
                }
              }
              do
              {
                uint64_t v252 = (unsigned int *)v250;
                do
                  unsigned int v250 = (int *)*((void *)v250 + 3);
                while (v250 && (*((unsigned char *)v250 + 3) & 1) != 0);
                unsigned int v253 = *v252;
                BOOL v254 = (*v252 & 0xFFF00) == 512;
                if (!*v252)
                {
                  uint64_t v255 = *((void *)v252 + 2);
                  if (v255)
                  {
                    uint64_t v256 = *((void *)v252 + 1);
                    if (v256)
                    {
                      uint64_t v257 = *(void *)(v256 + 24);
                      if (v257)
                      {
                        uint64_t v258 = *(void *)(v257 + 32);
                        if (v258)
                        {
                          uint64_t v259 = *(void *)(v258 + 40);
                          uint64_t v260 = v252[1];
                          if ((v260 & 0x80000000) != 0) {
                            unint64_t v251 = (uint64_t *)(*(void *)(v259 + 24) + 16 * (v260 & 0x7FFFFFFF) + 8);
                          }
                          else {
                            unint64_t v251 = (uint64_t *)(*(void *)(v259 + 272) + 8 * v260);
                          }
                          uint64_t v261 = (int *)*v251;
                          unint64_t v262 = (int *)*((void *)v252 + 3);
                          if ((unsigned int *)*v251 != v252) {
                            unint64_t v251 = (uint64_t *)(v255 + 24);
                          }
                          *unint64_t v251 = (uint64_t)v262;
                          if (v262) {
                            unsigned int v263 = v262;
                          }
                          else {
                            unsigned int v263 = v261;
                          }
                          *((void *)v263 + 2) = v255;
                          *((void *)v252 + 2) = 0;
                          *((void *)v252 + 3) = 0;
                          unsigned int v253 = *v252;
                        }
                      }
                    }
                  }
                }
                v252[4] = 64;
                v252[6] = 0;
                unsigned int *v252 = v227 | v253 & 0xFFF00000;
                v252[1] = v233 | (v231 | v254) & 1;
              }
              while (v250);
            }
LABEL_669:
            llvm::MachineInstr::eraseFromParent(v246);
            ++v244;
          }
          while (v244 != v245);
        }
        if (*((void *)&v306 + 1))
        {
          unint64_t v264 = (unint64_t)*(&__p + v232);
          unsigned int v265 = (void *)*((void *)&v306 + 1);
          uint64_t v266 = (uint64_t *)&v306 + 1;
          do
          {
            int v267 = v266;
            BOOL v268 = v265;
            unint64_t v269 = v265[4];
            v270 = (uint64_t **)(v265 + 1);
            if (v269 >= v264) {
              uint64_t v266 = v265;
            }
            else {
              ++v265;
            }
            unsigned int v265 = (void *)*v265;
          }
          while (v265);
          if (v266 != (uint64_t *)((char *)&v306 + 8))
          {
            int v271 = v269 >= v264 ? v268 : v267;
            if (v264 >= v271[4])
            {
              if (v269 < v264) {
                v270 = (uint64_t **)(v267 + 1);
              }
              int v272 = *v270;
              uint64_t v273 = v266;
              if (*v270)
              {
                do
                {
                  unint64_t v274 = v272;
                  int v272 = (uint64_t *)*v272;
                }
                while (v272);
              }
              else
              {
                do
                {
                  unint64_t v274 = (uint64_t *)v273[2];
                  BOOL v95 = *v274 == (void)v273;
                  uint64_t v273 = v274;
                }
                while (!v95);
              }
              if ((uint64_t *)v306 == v266) {
                *(void *)&long long v306 = v274;
              }
              --v307;
              sub_1CB91F7C8(*((uint64_t **)&v306 + 1), v266);
              if (v269 >= v264) {
                int v275 = v268;
              }
              else {
                int v275 = v267;
              }
              uint64_t v276 = (void *)v275[15];
              unint64_t v277 = v267 + 17;
              if (v269 >= v264) {
                unint64_t v277 = v268 + 17;
              }
              if (v276 != v277) {
                free(v276);
              }
              if (v269 >= v264) {
                uint64_t v278 = v268;
              }
              else {
                uint64_t v278 = v267;
              }
              if ((v278[6] & 1) == 0) {
                MEMORY[0x1D25D9CD0](v278[7], 8);
              }
              operator delete(v266);
            }
          }
        }
      }
      char v234 = 0;
      char v231 = 1;
      uint64_t v232 = 1;
    }
    while ((v235 & 1) != 0);
    char v216 = 1;
    if (__src > 0x1E) {
      break;
    }
    unsigned int v217 = __src + 1;
  }
  while (v307);
LABEL_710:
  char v280 = v216;
  sub_1CB9391D0(*((void **)&v306 + 1));
  uint64_t v2 = v279;
LABEL_8:
  uint64_t v9 = (void *)*((void *)v2 + 41);
  unint64_t v282 = (void *)((char *)v2 + 320);
  if (v9 != (void *)((char *)v2 + 320))
  {
    while (1)
    {
      char __p = v302;
      uint64_t v301 = 0x400000000;
      int v283 = v9;
      uint64_t v10 = v9[7];
      uint64_t v291 = v9 + 6;
      if ((void *)v10 != v9 + 6) {
        break;
      }
LABEL_303:
      if (__p != v302) {
        free(__p);
      }
      uint64_t v9 = (void *)v283[1];
      if (v9 == v282) {
        goto LABEL_306;
      }
    }
    unsigned int v287 = 0;
    uint64_t v286 = 0;
    int v288 = *(unsigned __int8 *)(v293[34] + 344);
    while (2)
    {
      unsigned int v11 = *(unsigned __int16 **)(v10 + 16);
      int v12 = *v11;
      if ((unsigned __int16)(v12 - 1) > 1u || (*(unsigned char *)(*(void *)(v10 + 32) + 48) & 8) == 0)
      {
        unsigned int v13 = *(unsigned __int16 *)(v10 + 44);
        BOOL v95 = (v13 & 0xC) == 0;
        int v14 = (v13 >> 2) & 1;
        if (v95) {
          LOBYTE(v14) = 1;
        }
        uint64_t v15 = *((void *)v11 + 1);
        if (v14)
        {
          if ((v15 & 0x80000) != 0) {
            goto LABEL_20;
          }
        }
        else
        {
          uint64_t v56 = v10;
          if ((v15 & 0x80000) != 0) {
            goto LABEL_20;
          }
          while ((*(_WORD *)(v56 + 44) & 8) != 0)
          {
            uint64_t v56 = *(void *)(v56 + 8);
            if ((*(unsigned char *)(*(void *)(v56 + 16) + 10) & 8) != 0) {
              goto LABEL_20;
            }
          }
        }
        if ((unsigned __int16)(v12 - 1) > 1u || (*(unsigned char *)(*(void *)(v10 + 32) + 48) & 0x10) == 0)
        {
          if (v14)
          {
            if ((v15 & 0x100000) != 0) {
              goto LABEL_20;
            }
          }
          else
          {
            uint64_t v57 = v10;
            if ((v15 & 0x100000) != 0) {
              goto LABEL_20;
            }
            while ((*(_WORD *)(v57 + 44) & 8) != 0)
            {
              uint64_t v57 = *(void *)(v57 + 8);
              if ((*(unsigned char *)(*(void *)(v57 + 16) + 10) & 0x10) != 0) {
                goto LABEL_20;
              }
            }
          }
          goto LABEL_119;
        }
      }
LABEL_20:
      if (v12 <= 4483)
      {
        if (v12 <= 4133)
        {
          if (v12 <= 4035)
          {
            switch(v12)
            {
              case 2164:
                char v16 = 0;
                int v17 = 0;
                int v18 = 1;
                int v12 = 2166;
                goto LABEL_30;
              case 2165:
                char v16 = 0;
                int v17 = 0;
                int v18 = 1;
                int v12 = 2167;
                goto LABEL_30;
              case 2166:
              case 2167:
              case 2170:
              case 2171:
              case 2174:
              case 2175:
                goto LABEL_119;
              case 2168:
                char v16 = 0;
                int v17 = 0;
                int v18 = 1;
                int v12 = 2170;
                goto LABEL_30;
              case 2169:
                char v16 = 0;
                int v17 = 0;
                int v18 = 1;
                int v12 = 2171;
                goto LABEL_30;
              case 2172:
                char v16 = 0;
                int v17 = 0;
                int v18 = 1;
                int v12 = 2174;
                goto LABEL_30;
              case 2173:
                char v16 = 0;
                int v17 = 0;
                int v18 = 1;
                int v12 = 2175;
                goto LABEL_30;
              case 2176:
                char v16 = 0;
                int v17 = 0;
                int v18 = 1;
                int v12 = 2178;
                goto LABEL_30;
              case 2177:
                char v16 = 0;
                int v17 = 0;
                int v18 = 1;
                int v12 = 2179;
                goto LABEL_30;
              default:
                int v41 = v12 - 4020;
                char v16 = 0;
                int v18 = 1;
                int v12 = 4018;
                int v17 = 1;
                switch(v41)
                {
                  case 0:
                    goto LABEL_30;
                  case 1:
                    char v16 = 0;
                    int v12 = 4019;
                    goto LABEL_30;
                  case 8:
                    char v16 = 0;
                    int v12 = 4026;
                    goto LABEL_30;
                  case 9:
                    char v16 = 0;
                    int v12 = 4027;
                    goto LABEL_30;
                  default:
                    goto LABEL_119;
                }
            }
          }
          switch(v12)
          {
            case 4118:
              int v18 = 0;
              char v16 = 0;
              int v17 = 0;
              int v12 = 4120;
              goto LABEL_30;
            case 4119:
              int v18 = 0;
              char v16 = 0;
              int v17 = 0;
              int v12 = 4121;
              goto LABEL_30;
            case 4126:
              int v18 = 0;
              char v16 = 0;
              int v17 = 0;
              int v12 = 4128;
              goto LABEL_30;
            case 4127:
              int v18 = 0;
              char v16 = 0;
              int v17 = 0;
              int v12 = 4129;
              goto LABEL_30;
            default:
              goto LABEL_119;
          }
        }
        switch(v12)
        {
          case 4284:
            int v18 = 0;
            char v16 = 0;
            int v17 = 1;
            int v12 = 4286;
            goto LABEL_30;
          case 4285:
            int v18 = 0;
            char v16 = 0;
            int v17 = 1;
            int v12 = 4287;
            goto LABEL_30;
          case 4286:
          case 4287:
          case 4288:
          case 4289:
          case 4292:
          case 4293:
          case 4294:
          case 4295:
          case 4298:
          case 4299:
          case 4300:
          case 4301:
          case 4304:
          case 4305:
          case 4306:
          case 4307:
          case 4310:
          case 4311:
          case 4312:
          case 4313:
          case 4316:
          case 4317:
          case 4318:
          case 4319:
          case 4322:
          case 4323:
          case 4324:
          case 4325:
          case 4328:
          case 4329:
          case 4330:
          case 4331:
          case 4334:
          case 4335:
          case 4338:
          case 4339:
          case 4342:
          case 4343:
          case 4346:
          case 4347:
          case 4350:
          case 4351:
          case 4354:
          case 4355:
          case 4358:
          case 4359:
            goto LABEL_119;
          case 4290:
            int v18 = 0;
            char v16 = 0;
            int v17 = 1;
            int v12 = 4292;
            goto LABEL_30;
          case 4291:
            int v18 = 0;
            char v16 = 0;
            int v17 = 1;
            int v12 = 4293;
            goto LABEL_30;
          case 4296:
            int v18 = 0;
            char v16 = 0;
            int v17 = 1;
            int v12 = 4298;
            goto LABEL_30;
          case 4297:
            int v18 = 0;
            char v16 = 0;
            int v17 = 1;
            int v12 = 4299;
            goto LABEL_30;
          case 4302:
            int v18 = 0;
            char v16 = 0;
            int v17 = 1;
            int v12 = 4304;
            goto LABEL_30;
          case 4303:
            int v18 = 0;
            char v16 = 0;
            int v17 = 1;
            int v12 = 4305;
            goto LABEL_30;
          case 4308:
            int v18 = 0;
            char v16 = 0;
            int v17 = 1;
            int v12 = 4310;
            goto LABEL_30;
          case 4309:
            int v18 = 0;
            char v16 = 0;
            int v17 = 1;
            int v12 = 4311;
            goto LABEL_30;
          case 4314:
            int v18 = 0;
            char v16 = 0;
            int v17 = 1;
            int v12 = 4316;
            goto LABEL_30;
          case 4315:
            int v18 = 0;
            char v16 = 0;
            int v17 = 1;
            int v12 = 4317;
            goto LABEL_30;
          case 4320:
            int v18 = 0;
            char v16 = 0;
            int v17 = 1;
            int v12 = 4322;
            goto LABEL_30;
          case 4321:
            int v18 = 0;
            char v16 = 0;
            int v17 = 1;
            int v12 = 4323;
            goto LABEL_30;
          case 4326:
            int v18 = 0;
            char v16 = 0;
            int v17 = 1;
            int v12 = 4328;
            goto LABEL_30;
          case 4327:
            int v18 = 0;
            char v16 = 0;
            int v17 = 1;
            int v12 = 4329;
            goto LABEL_30;
          case 4332:
          case 4333:
          case 4336:
          case 4337:
          case 4340:
          case 4341:
          case 4344:
          case 4345:
          case 4348:
          case 4349:
          case 4352:
          case 4353:
          case 4356:
          case 4357:
          case 4360:
          case 4361:
            goto LABEL_29;
          default:
            switch(v12)
            {
              case 4150:
                int v18 = 0;
                char v16 = 0;
                int v17 = 0;
                int v12 = 4152;
                goto LABEL_30;
              case 4151:
                int v18 = 0;
                char v16 = 0;
                int v17 = 0;
                int v12 = 4153;
                goto LABEL_30;
              case 4158:
                int v18 = 0;
                char v16 = 0;
                int v17 = 0;
                int v12 = 4160;
                goto LABEL_30;
              case 4159:
                int v18 = 0;
                char v16 = 0;
                int v17 = 0;
                int v12 = 4161;
                goto LABEL_30;
              default:
                goto LABEL_119;
            }
        }
      }
      if (v12 <= 8203)
      {
        switch(v12)
        {
          case 4484:
            int v18 = 0;
            char v16 = 0;
            int v17 = 1;
            int v12 = 4486;
            goto LABEL_30;
          case 4485:
            int v18 = 0;
            char v16 = 0;
            int v17 = 1;
            int v12 = 4487;
            goto LABEL_30;
          case 4486:
          case 4487:
          case 4488:
          case 4489:
          case 4492:
          case 4493:
          case 4494:
          case 4495:
          case 4498:
          case 4499:
          case 4500:
          case 4501:
          case 4504:
          case 4505:
          case 4506:
          case 4507:
          case 4510:
          case 4511:
          case 4512:
          case 4513:
          case 4516:
          case 4517:
          case 4518:
          case 4519:
          case 4522:
          case 4523:
          case 4524:
          case 4525:
          case 4528:
          case 4529:
          case 4530:
          case 4531:
          case 4534:
          case 4535:
          case 4538:
          case 4539:
          case 4542:
          case 4543:
          case 4546:
          case 4547:
          case 4550:
          case 4551:
          case 4554:
          case 4555:
          case 4558:
          case 4559:
            goto LABEL_119;
          case 4490:
            int v18 = 0;
            char v16 = 0;
            int v17 = 1;
            int v12 = 4492;
            goto LABEL_30;
          case 4491:
            int v18 = 0;
            char v16 = 0;
            int v17 = 1;
            int v12 = 4493;
            goto LABEL_30;
          case 4496:
            int v18 = 0;
            char v16 = 0;
            int v17 = 1;
            int v12 = 4498;
            goto LABEL_30;
          case 4497:
            int v18 = 0;
            char v16 = 0;
            int v17 = 1;
            int v12 = 4499;
            goto LABEL_30;
          case 4502:
            int v18 = 0;
            char v16 = 0;
            int v17 = 1;
            int v12 = 4504;
            goto LABEL_30;
          case 4503:
            int v18 = 0;
            char v16 = 0;
            int v17 = 1;
            int v12 = 4505;
            goto LABEL_30;
          case 4508:
            int v18 = 0;
            char v16 = 0;
            int v17 = 1;
            int v12 = 4510;
            goto LABEL_30;
          case 4509:
            int v18 = 0;
            char v16 = 0;
            int v17 = 1;
            int v12 = 4511;
            goto LABEL_30;
          case 4514:
            int v18 = 0;
            char v16 = 0;
            int v17 = 1;
            int v12 = 4516;
            goto LABEL_30;
          case 4515:
            int v18 = 0;
            char v16 = 0;
            int v17 = 1;
            int v12 = 4517;
            goto LABEL_30;
          case 4520:
            int v18 = 0;
            char v16 = 0;
            int v17 = 1;
            int v12 = 4522;
            goto LABEL_30;
          case 4521:
            int v18 = 0;
            char v16 = 0;
            int v17 = 1;
            int v12 = 4523;
            goto LABEL_30;
          case 4526:
            int v18 = 0;
            char v16 = 0;
            int v17 = 1;
            int v12 = 4528;
            goto LABEL_30;
          case 4527:
            int v18 = 0;
            char v16 = 0;
            int v17 = 1;
            int v12 = 4529;
            goto LABEL_30;
          case 4532:
          case 4533:
          case 4536:
          case 4537:
          case 4540:
          case 4541:
          case 4544:
          case 4545:
          case 4548:
          case 4549:
          case 4552:
          case 4553:
          case 4556:
          case 4557:
          case 4560:
          case 4561:
LABEL_29:
            int v18 = 0;
            char v16 = 1;
            int v17 = 1;
            goto LABEL_30;
          default:
            if (v12 == 8194)
            {
              int v18 = 0;
              char v16 = 0;
              int v17 = 0;
              int v12 = 8196;
            }
            else
            {
              if (v12 != 8195) {
                goto LABEL_119;
              }
              int v18 = 0;
              char v16 = 0;
              int v17 = 0;
              int v12 = 8197;
            }
            break;
        }
        break;
      }
      if (v12 > 8239)
      {
        switch(v12)
        {
          case 8240:
            int v18 = 0;
            char v16 = 0;
            int v17 = 0;
            int v12 = 8242;
            break;
          case 8241:
            int v18 = 0;
            char v16 = 0;
            int v17 = 0;
            int v12 = 8243;
            break;
          case 8242:
          case 8243:
          case 8244:
          case 8245:
          case 8246:
          case 8247:
            goto LABEL_119;
          case 8248:
            int v18 = 0;
            char v16 = 0;
            int v17 = 0;
            int v12 = 8250;
            break;
          case 8249:
            int v18 = 0;
            char v16 = 0;
            int v17 = 0;
            int v12 = 8251;
            break;
          default:
            if (v12 == 8256)
            {
              int v18 = 0;
              char v16 = 0;
              int v17 = 0;
              int v12 = 8258;
            }
            else
            {
              if (v12 != 8257) {
                goto LABEL_119;
              }
              int v18 = 0;
              char v16 = 0;
              int v17 = 0;
              int v12 = 8259;
            }
            break;
        }
      }
      else
      {
        if (v12 <= 8214)
        {
          switch(v12)
          {
            case 8204:
              int v18 = 0;
              char v16 = 0;
              int v17 = 0;
              int v12 = 8206;
              goto LABEL_30;
            case 8205:
              int v18 = 0;
              char v16 = 0;
              int v17 = 0;
              int v12 = 8207;
              goto LABEL_30;
            case 8214:
              int v18 = 0;
              char v16 = 0;
              int v17 = 0;
              int v12 = 8216;
              goto LABEL_30;
          }
LABEL_119:
          if ((*(unsigned char *)v10 & 4) != 0)
          {
LABEL_131:
            uint64_t v10 = *(void *)(v10 + 8);
            if ((void *)v10 != v291) {
              continue;
            }
            while (1)
            {
              do
              {
LABEL_302:
                if (!v301) {
                  goto LABEL_303;
                }
                int v58 = (llvm::MachineInstr *)*((void *)__p + v301 - 1);
                LODWORD(v301) = v301 - 1;
                if (**((_WORD **)v58 + 2) != 18) {
                  goto LABEL_261;
                }
                uint64_t v59 = v293[33];
                uint64_t v60 = *((void *)v58 + 4);
                uint64_t v61 = *(unsigned int *)(v60 + 36);
                if ((v61 & 0x80000000) != 0) {
                  uint64_t v62 = (uint64_t *)(*(void *)(v59 + 24) + 16 * (v61 & 0x7FFFFFFF) + 8);
                }
                else {
                  uint64_t v62 = (uint64_t *)(*(void *)(v59 + 272) + 8 * v61);
                }
                uint64_t v63 = *v62;
                if (v63
                  && ((*(unsigned char *)(v63 + 3) & 1) != 0
                   || (uint64_t v83 = *(void *)(v63 + 24)) != 0 && (*(unsigned char *)(v83 + 3) & 1) != 0))
                {
                  if ((v61 & 0x80000000) != 0) {
                    int v77 = (uint64_t *)(*(void *)(v59 + 24) + 16 * (v61 & 0x7FFFFFFF) + 8);
                  }
                  else {
                    int v77 = (uint64_t *)(*(void *)(v59 + 272) + 8 * v61);
                  }
                  uint64_t v78 = *v77;
                  if (v78)
                  {
                    if ((*(unsigned char *)(v78 + 3) & 1) == 0)
                    {
                      uint64_t v78 = *(void *)(v78 + 24);
                      if (v78)
                      {
                        if ((*(unsigned char *)(v78 + 3) & 1) == 0) {
                          uint64_t v78 = 0;
                        }
                      }
                    }
                  }
                  uint64_t v79 = *(llvm::MachineInstr **)(v78 + 8);
                  while (1)
                  {
                    uint64_t v78 = *(void *)(v78 + 24);
                    if (!v78 || (*(unsigned char *)(v78 + 3) & 1) == 0) {
                      break;
                    }
                    uint64_t v64 = 0;
                    if (*(llvm::MachineInstr **)(v78 + 8) != v79) {
                      goto LABEL_242;
                    }
                  }
                  uint64_t v64 = v79;
                }
                else
                {
                  uint64_t v64 = 0;
                }
LABEL_242:
                uint64_t v65 = *(unsigned int *)(v60 + 100);
                if ((v65 & 0x80000000) != 0) {
                  uint64_t v66 = (uint64_t *)(*(void *)(v59 + 24) + 16 * (v65 & 0x7FFFFFFF) + 8);
                }
                else {
                  uint64_t v66 = (uint64_t *)(*(void *)(v59 + 272) + 8 * v65);
                }
                uint64_t v67 = *v66;
                if (v67
                  && ((*(unsigned char *)(v67 + 3) & 1) != 0
                   || (uint64_t v84 = *(void *)(v67 + 24)) != 0 && (*(unsigned char *)(v84 + 3) & 1) != 0))
                {
                  if ((v65 & 0x80000000) != 0) {
                    uint64_t v80 = (uint64_t *)(*(void *)(v59 + 24) + 16 * (v65 & 0x7FFFFFFF) + 8);
                  }
                  else {
                    uint64_t v80 = (uint64_t *)(*(void *)(v59 + 272) + 8 * v65);
                  }
                  uint64_t v81 = *v80;
                  if (v81)
                  {
                    if ((*(unsigned char *)(v81 + 3) & 1) == 0)
                    {
                      uint64_t v81 = *(void *)(v81 + 24);
                      if (v81)
                      {
                        if ((*(unsigned char *)(v81 + 3) & 1) == 0) {
                          uint64_t v81 = 0;
                        }
                      }
                    }
                  }
                  uint64_t v82 = *(llvm::MachineInstr **)(v81 + 8);
                  while (1)
                  {
                    uint64_t v81 = *(void *)(v81 + 24);
                    if (!v81 || (*(unsigned char *)(v81 + 3) & 1) == 0) {
                      break;
                    }
                    unsigned int v68 = 0;
                    if (*(llvm::MachineInstr **)(v81 + 8) != v82) {
                      goto LABEL_247;
                    }
                  }
                  unsigned int v68 = v82;
                }
                else
                {
                  unsigned int v68 = 0;
                }
LABEL_247:
                llvm::MachineInstr::eraseFromParent(v58);
                if (v64)
                {
                  uint64_t v69 = v293[33];
                  uint64_t v70 = *(unsigned int *)(*((void *)v64 + 4) + 4);
                  if ((v70 & 0x80000000) != 0) {
                    uint64_t v71 = (uint64_t *)(*(void *)(v69 + 24) + 16 * (v70 & 0x7FFFFFFF) + 8);
                  }
                  else {
                    uint64_t v71 = (uint64_t *)(*(void *)(v69 + 272) + 8 * v70);
                  }
                  uint64_t v72 = *v71;
                  if (v72)
                  {
                    while ((*(unsigned char *)(v72 + 3) & 1) != 0)
                    {
                      uint64_t v72 = *(void *)(v72 + 24);
                      if (!v72) {
                        goto LABEL_253;
                      }
                    }
                  }
                  else
                  {
LABEL_253:
                    llvm::MachineInstr::eraseFromParent(v64);
                  }
                }
              }
              while (v64 == v68);
              uint64_t v73 = v293[33];
              uint64_t v74 = *(unsigned int *)(*((void *)v68 + 4) + 4);
              if ((v74 & 0x80000000) != 0) {
                uint64_t v75 = (uint64_t *)(*(void *)(v73 + 24) + 16 * (v74 & 0x7FFFFFFF) + 8);
              }
              else {
                uint64_t v75 = (uint64_t *)(*(void *)(v73 + 272) + 8 * v74);
              }
              uint64_t v76 = *v75;
              if (!v76)
              {
LABEL_260:
                int v58 = v68;
LABEL_261:
                llvm::MachineInstr::eraseFromParent(v58);
                goto LABEL_302;
              }
              while ((*(unsigned char *)(v76 + 3) & 1) != 0)
              {
                uint64_t v76 = *(void *)(v76 + 24);
                if (!v76) {
                  goto LABEL_260;
                }
              }
            }
          }
LABEL_130:
          while ((*(_WORD *)(v10 + 44) & 8) != 0)
            uint64_t v10 = *(void *)(v10 + 8);
          goto LABEL_131;
        }
        switch(v12)
        {
          case 8224:
            int v18 = 0;
            char v16 = 0;
            int v17 = 0;
            int v12 = 8226;
            goto LABEL_30;
          case 8225:
            int v18 = 0;
            char v16 = 0;
            int v17 = 0;
            int v12 = 8227;
            goto LABEL_30;
          case 8226:
          case 8227:
          case 8228:
          case 8229:
          case 8230:
          case 8231:
            goto LABEL_119;
          case 8232:
            int v18 = 0;
            char v16 = 0;
            int v17 = 0;
            int v12 = 8234;
            goto LABEL_30;
          case 8233:
            int v18 = 0;
            char v16 = 0;
            int v17 = 0;
            int v12 = 8235;
            goto LABEL_30;
          default:
            if (v12 != 8215) {
              goto LABEL_119;
            }
            int v18 = 0;
            char v16 = 0;
            int v17 = 0;
            int v12 = 8217;
            break;
        }
      }
      break;
    }
LABEL_30:
    uint64_t v19 = sub_1CBC7A3F8(v12, 0x26u);
    uint64_t v20 = *(unsigned int *)(*(void *)(v10 + 32) + 32 * v19 + 4);
    if (v288) {
      char v21 = v18 | v16;
    }
    else {
      char v21 = 0;
    }
    if (v17)
    {
      if (*(unsigned char *)(v293[34] + 318)) {
        int v22 = 4580;
      }
      else {
        int v22 = 742;
      }
      sub_1CB939248((uint64_t)&v310, v20, v293[33], v22, 2, v21);
      LOBYTE(v23) = (_BYTE)v310;
      uint64_t v24 = HIDWORD(v310);
      unsigned int v25 = v310 >> 8;
      long long v308 = v311;
      uint64_t v26 = v312;
      __int32 v27 = HIDWORD(v312);
      if (!v313) {
        goto LABEL_119;
      }
LABEL_45:
      if (v18)
      {
        uint64_t v31 = v24 | (v26 << 32);
        if (v31 >= 256)
        {
          int v32 = v12 - 4018;
          if ((unint64_t)v31 <= 0x100)
          {
            int v12 = 4022;
            switch(v32)
            {
              case 0:
                goto LABEL_103;
              case 1:
                int v12 = 4023;
                goto LABEL_103;
              case 2:
              case 3:
              case 4:
              case 5:
              case 6:
              case 7:
                goto LABEL_711;
              case 8:
                int v12 = 4030;
                goto LABEL_103;
              case 9:
                int v12 = 4031;
                goto LABEL_103;
              default:
                JUMPOUT(0);
            }
          }
          switch(v12)
          {
            case 4035:
              int v12 = 4039;
              break;
            case 4036:
            case 4037:
            case 4038:
            case 4039:
            case 4040:
            case 4041:
LABEL_711:
              __break(1u);
              JUMPOUT(0x1CB938660);
            case 4042:
              int v12 = 4046;
              break;
            case 4043:
              int v12 = 4047;
              break;
            default:
              int v12 = 4038;
              break;
          }
        }
      }
LABEL_103:
      int v310 = (llvm::MachineOperand *)((char *)&v311 + 8);
      *(void *)&long long v311 = 0x800000000;
      sub_1CB84ACA0((unsigned int *)&v310, (uint64_t)&v311 + 8, (unsigned char *)(*(void *)(v10 + 32) + 32 * v19), (unsigned char *)(*(void *)(v10 + 32) + 32 * *(unsigned int *)(v10 + 40)));
      uint64_t v42 = v310;
      *(_DWORD *)int v310 = v23 | (v25 << 8);
      *((_DWORD *)v42 + 1) = v24;
      *(_OWORD *)((char *)v42 + 8) = v308;
      *((_DWORD *)v42 + 6) = v26;
      *((_DWORD *)v42 + 7) = v27;
      while (1)
      {
        unsigned int v43 = *(_DWORD *)(v10 + 40);
        if (v43 <= v19) {
          break;
        }
        llvm::MachineInstr::removeOperand((char *)v10, v43 - 1);
      }
      int v44 = v310;
      if (v311)
      {
        uint64_t v45 = 32 * v311;
        do
        {
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v10, *(llvm::MachineFunction **)(*(void *)(v10 + 24) + 32), v44);
          int v44 = (llvm::MachineOperand *)((char *)v44 + 32);
          v45 -= 32;
        }
        while (v45);
        int v44 = v310;
      }
      if (v44 != (llvm::MachineOperand *)((char *)&v311 + 8)) {
        free(v44);
      }
      *(void *)(v10 + 16) = *(void *)(v293[31] + 8) + 48 * v12;
      uint64_t v46 = v293[33];
      if ((v20 & 0x80000000) != 0) {
        uint64_t v47 = (uint64_t *)(*(void *)(v46 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v47 = (uint64_t *)(*(void *)(v46 + 272) + 8 * v20);
      }
      uint64_t v48 = *v47;
      if (v48)
      {
        if ((*(unsigned char *)(v48 + 3) & 1) == 0) {
          goto LABEL_119;
        }
        do
        {
          uint64_t v48 = *(void *)(v48 + 24);
          if (!v48) {
            goto LABEL_121;
          }
        }
        while ((*(unsigned char *)(v48 + 3) & 1) != 0);
        if (v10) {
          goto LABEL_119;
        }
      }
      else
      {
LABEL_121:
        if ((v20 & 0x80000000) != 0) {
          uint64_t v49 = (uint64_t *)(*(void *)(v46 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v49 = (uint64_t *)(*(void *)(v46 + 272) + 8 * v20);
        }
        uint64_t v50 = *v49;
        if (v50
          && ((*(unsigned char *)(v50 + 3) & 1) != 0 || (uint64_t v55 = *(void *)(v50 + 24)) != 0 && (*(unsigned char *)(v55 + 3) & 1) != 0))
        {
          if ((v20 & 0x80000000) != 0) {
            uint64_t v52 = (uint64_t *)(*(void *)(v46 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v52 = (uint64_t *)(*(void *)(v46 + 272) + 8 * v20);
          }
          uint64_t v53 = *v52;
          if (v53)
          {
            if ((*(unsigned char *)(v53 + 3) & 1) == 0)
            {
              uint64_t v53 = *(void *)(v53 + 24);
              if (v53)
              {
                if ((*(unsigned char *)(v53 + 3) & 1) == 0) {
                  uint64_t v53 = 0;
                }
              }
            }
          }
          uint64_t v54 = *(void *)(v53 + 8);
          while (1)
          {
            uint64_t v53 = *(void *)(v53 + 24);
            if (!v53 || (*(unsigned char *)(v53 + 3) & 1) == 0) {
              break;
            }
            uint64_t v51 = 0;
            if (*(void *)(v53 + 8) != v54) {
              goto LABEL_126;
            }
          }
          uint64_t v51 = v54;
        }
        else
        {
          uint64_t v51 = 0;
        }
LABEL_126:
        if (v301 >= (unint64_t)HIDWORD(v301)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)__p + v301) = v51;
        LODWORD(v301) = v301 + 1;
        if (v10) {
          goto LABEL_119;
        }
      }
      goto LABEL_130;
    }
    uint64_t v28 = v293[33];
    if ((v20 & 0x80000000) != 0) {
      BOOL v29 = (uint64_t *)(*(void *)(v28 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
    }
    else {
      BOOL v29 = (uint64_t *)(*(void *)(v28 + 272) + 8 * v20);
    }
    uint64_t v30 = *v29;
    if (v30)
    {
      uint64_t v33 = v293[34];
      if ((*(unsigned char *)(v30 + 3) & 1) == 0)
      {
        uint64_t v30 = *(void *)(v30 + 24);
        if (!v30) {
          goto LABEL_43;
        }
        if ((*(unsigned char *)(v30 + 3) & 1) == 0) {
          goto LABEL_207;
        }
      }
      if ((v20 & 0x80000000) != 0) {
        uint64_t v34 = (uint64_t *)(*(void *)(v28 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v34 = (uint64_t *)(*(void *)(v28 + 272) + 8 * v20);
      }
      uint64_t v35 = *v34;
      if (v35)
      {
        if ((*(unsigned char *)(v35 + 3) & 1) == 0)
        {
          uint64_t v35 = *(void *)(v35 + 24);
          if (v35)
          {
            if ((*(unsigned char *)(v35 + 3) & 1) == 0) {
              uint64_t v35 = 0;
            }
          }
        }
      }
      uint64_t v36 = *(void *)(v35 + 8);
      while (1)
      {
        uint64_t v35 = *(void *)(v35 + 24);
        if (!v35 || (*(unsigned char *)(v35 + 3) & 1) == 0) {
          break;
        }
        if (*(void *)(v35 + 8) != v36) {
          goto LABEL_207;
        }
      }
      if (!v36 || **(_WORD **)(v36 + 16) != 18 || *(_DWORD *)(v36 + 40) != 5) {
        goto LABEL_207;
      }
      if (*(unsigned char *)(v33 + 318)) {
        int v37 = 4578;
      }
      else {
        int v37 = 738;
      }
      sub_1CB939248((uint64_t)&v310, *(_DWORD *)(*(void *)(v36 + 32) + 36), v293[33], v37, 4, v21);
      LODWORD(v30) = v313;
      if (!v313) {
        goto LABEL_43;
      }
      uint64_t v38 = *(void *)(v36 + 32);
      if (*(void *)(v38 + 80) != 25) {
        goto LABEL_207;
      }
      if (*(unsigned char *)(v33 + 318)) {
        int v39 = 4578;
      }
      else {
        int v39 = 738;
      }
      sub_1CB939248((uint64_t)&v295, *(_DWORD *)(v38 + 100), v28, v39, 4, v21);
      LODWORD(v30) = v299[0];
      if (!v299[0]) {
        goto LABEL_43;
      }
      if (*(void *)(*(void *)(v36 + 32) + 144) == 26)
      {
        LOBYTE(v23) = 0;
        int64_t v40 = HIDWORD(v295) | ((unint64_t)v298 << 32);
        if ((HIDWORD(v310) | ((unint64_t)v312 << 32)) + 2 == v40)
        {
          LODWORD(v30) = 0;
          if (v40 <= 254)
          {
            v285.i32[0] = HIDWORD(v312);
            unsigned int v23 = v310 & 0xFFF000FF | 0x300;
            long long v306 = v311;
            unsigned int v287 = v23 >> 8;
            LODWORD(v30) = 1;
            LODWORD(v284) = v312;
            uint64_t v286 = HIDWORD(v310);
          }
        }
        else
        {
          LODWORD(v30) = 0;
        }
      }
      else
      {
LABEL_207:
        LOBYTE(v23) = 0;
        LODWORD(v30) = 0;
      }
    }
    else
    {
LABEL_43:
      LOBYTE(v23) = 0;
    }
    long long v308 = v306;
    unsigned int v25 = v287;
    __int32 v27 = v285.i32[0];
    uint64_t v26 = v284;
    uint64_t v24 = v286;
    if (!v30) {
      goto LABEL_119;
    }
    goto LABEL_45;
  }
LABEL_306:
  uint64_t v85 = v293[34];
  if (*(unsigned char *)(v85 + 355) && (*(_WORD *)(*(void *)v279 + 18) & 0x3FF0) == 0x640)
  {
    int v86 = *(unsigned __int8 *)(v85 + 318);
    int v310 = v279;
    uint64_t v301 = 0;
    *(void *)&v302[0] = 0;
    char __p = 0;
    sub_1CB93939C((char **)&__p, (uint64_t)&v310);
    int v310 = (llvm::MachineOperand *)((char *)&v311 + 8);
    *(void *)&long long v311 = 0x2000000000;
    uint64_t v88 = (char *)__p;
    uint64_t v87 = (char *)v301;
    if ((void *)v301 == __p)
    {
      BOOL v99 = 0;
      if (v301) {
        goto LABEL_343;
      }
    }
    else
    {
      int v294 = v86;
      unsigned int v89 = 0;
      do
      {
        uint64_t v91 = *((void *)v87 - 1);
        v87 -= 8;
        uint64_t v90 = v91;
        uint64_t v92 = (void *)(v91 + 48);
        for (uint64_t j = *(void *)(v91 + 56); (void *)j != v92; uint64_t j = *(void *)(j + 8))
        {
          int v94 = **(unsigned __int16 **)(j + 16);
          BOOL v95 = (v94 - 8188) > 0x1F || ((1 << (v94 + 4)) & 0xC0300C03) == 0;
          unsigned int v96 = v94 - 4596;
          if (!v95 || v96 < 2)
          {
            if (v89 >= DWORD1(v311)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v310 + v89) = j;
            unsigned int v89 = v311 + 1;
            LODWORD(v311) = v311 + 1;
          }
          if ((*(unsigned char *)j & 4) == 0)
          {
            while ((*(_WORD *)(j + 44) & 8) != 0)
              uint64_t j = *(void *)(j + 8);
          }
        }
      }
      while (v87 != v88);
      uint64_t v98 = v310;
      BOOL v99 = v89 != 0;
      if (v89)
      {
        unint64_t v100 = v89;
        unsigned int v101 = (uint64_t *)((char *)v310 + 8 * v89);
        if (v294) {
          int v102 = 1;
        }
        else {
          int v102 = 2;
        }
        LODWORD(v295) = v102;
        sub_1CB93B848((uint64_t *)v310, v101, (unsigned int *)&v295, 126 - 2 * __clz(v100), 1);
        unint64_t v103 = *v92 & 0xFFFFFFFFFFFFFFF8;
        if (!v103 || (*(unsigned char *)v103 & 4) == 0)
        {
          while ((*(_WORD *)(v103 + 44) & 4) != 0)
            unint64_t v103 = *(void *)v103 & 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v98 = v310;
        if (v311)
        {
          uint64_t v104 = 8 * v311;
          do
          {
            uint64_t v105 = *(void *)v98;
            uint64_t v98 = (llvm::MachineOperand *)((char *)v98 + 8);
            sub_1CB9173F0(v90, (unint64_t *)v103, *(void *)(v105 + 24), (unint64_t *)v105);
            v104 -= 8;
          }
          while (v104);
          uint64_t v98 = v310;
        }
      }
      if (v98 != (llvm::MachineOperand *)((char *)&v311 + 8)) {
        free(v98);
      }
      uint64_t v87 = (char *)__p;
      if (__p)
      {
LABEL_343:
        uint64_t v301 = (uint64_t)v87;
        operator delete(v87);
      }
    }
    char v106 = v280 | v99;
  }
  else
  {
    char v106 = v280;
  }
  return v106 & 1;
}

void *sub_1CB938A98(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)a1;
  int v7 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v8 = 8;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v7 + 4 < 3 * v8)
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) > v8 >> 3)
    {
      int v9 = *(_DWORD *)a1 & 1;
      goto LABEL_6;
    }
    sub_1CB938C70(a1, v8);
    uint64_t v20 = a1 + 8;
    int v6 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
    {
      int v21 = 8;
      goto LABEL_27;
    }
    int v21 = *(_DWORD *)(a1 + 16);
    if (v21)
    {
      uint64_t v20 = *(void *)(a1 + 8);
LABEL_27:
      int v9 = *(_DWORD *)a1 & 1;
      int v22 = v21 - 1;
      unsigned int v23 = ((*a3 >> 4) ^ (*a3 >> 9)) & v22;
      a4 = (void *)(v20 + 8 * v23);
      uint64_t v24 = *a4;
      if (*a3 == *a4) {
        goto LABEL_6;
      }
      char v16 = 0;
      int v25 = 1;
      while (v24 != -4096)
      {
        if (v16) {
          BOOL v26 = 0;
        }
        else {
          BOOL v26 = v24 == -8192;
        }
        if (v26) {
          char v16 = a4;
        }
        unsigned int v27 = v23 + v25++;
        unsigned int v23 = v27 & v22;
        a4 = (void *)(v20 + 8 * v23);
        uint64_t v24 = *a4;
        if (*a3 == *a4) {
          goto LABEL_6;
        }
      }
      goto LABEL_37;
    }
LABEL_41:
    int v9 = 0;
    a4 = 0;
    goto LABEL_6;
  }
  sub_1CB938C70(a1, 2 * v8);
  uint64_t v11 = a1 + 8;
  int v6 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    int v12 = 8;
  }
  else
  {
    int v12 = *(_DWORD *)(a1 + 16);
    if (!v12) {
      goto LABEL_41;
    }
    uint64_t v11 = *(void *)(a1 + 8);
  }
  int v9 = *(_DWORD *)a1 & 1;
  int v13 = v12 - 1;
  unsigned int v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
  a4 = (void *)(v11 + 8 * v14);
  uint64_t v15 = *a4;
  if (*a3 == *a4) {
    goto LABEL_6;
  }
  char v16 = 0;
  int v17 = 1;
  while (v15 != -4096)
  {
    if (v16) {
      BOOL v18 = 0;
    }
    else {
      BOOL v18 = v15 == -8192;
    }
    if (v18) {
      char v16 = a4;
    }
    unsigned int v19 = v14 + v17++;
    unsigned int v14 = v19 & v13;
    a4 = (void *)(v11 + 8 * v14);
    uint64_t v15 = *a4;
    if (*a3 == *a4) {
      goto LABEL_6;
    }
  }
LABEL_37:
  if (v16) {
    a4 = v16;
  }
LABEL_6:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  return a4;
}

int *sub_1CB938C70(uint64_t a1, unsigned int a2)
{
  v14[8] = *MEMORY[0x1E4F143B8];
  if (a2 >= 9)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 8)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CB938DEC((int *)a1, v11, &v11[v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  int v6 = v14;
  for (uint64_t i = 8; i != 72; i += 8)
  {
    uint64_t v8 = *(void *)(a1 + i);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      *v6++ = v8;
    }
  }
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CB938DEC((int *)a1, v14, v6);
}

int *sub_1CB938DEC(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if (v3)
  {
    int v6 = result + 18;
    int v5 = result + 2;
  }
  else
  {
    uint64_t v4 = result[4];
    if (!v4) {
      goto LABEL_5;
    }
    int v5 = (void *)*((void *)result + 1);
    int v6 = &v5[v4];
  }
  do
    *v5++ = -4096;
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    uint64_t v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (*(unsigned char *)result)
      {
        int v9 = 8;
        uint64_t v8 = result + 2;
      }
      else
      {
        uint64_t v8 = (int *)*((void *)result + 1);
        int v9 = result[4];
      }
      int v10 = v9 - 1;
      unsigned int v11 = (v9 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      uint64_t v12 = &v8[2 * v11];
      uint64_t v13 = *(void *)v12;
      if (v7 != *(void *)v12)
      {
        unsigned int v14 = 0;
        int v15 = 1;
        while (v13 != -4096)
        {
          if (v14) {
            BOOL v16 = 0;
          }
          else {
            BOOL v16 = v13 == -8192;
          }
          if (v16) {
            unsigned int v14 = v12;
          }
          unsigned int v17 = v11 + v15++;
          unsigned int v11 = v17 & v10;
          uint64_t v12 = &v8[2 * (v17 & v10)];
          uint64_t v13 = *(void *)v12;
          if (v7 == *(void *)v12) {
            goto LABEL_21;
          }
        }
        if (v14) {
          uint64_t v12 = v14;
        }
      }
LABEL_21:
      *(void *)uint64_t v12 = v7;
      *result += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t *sub_1CB938EEC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      int v3 = *(void **)(v2 + 120);
      if (v3 != (void *)(v2 + 136)) {
        free(v3);
      }
      if ((*(unsigned char *)(v2 + 48) & 1) == 0) {
        MEMORY[0x1D25D9CD0](*(void *)(v2 + 56), 8);
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

__n128 sub_1CB938F58(unsigned int *a1, unsigned int *a2)
{
  unsigned int v2 = *a2;
  *a2 = *a1 & 0xFFFFFFFE | *a2 & 1;
  unsigned int v3 = a1[1];
  *a1 = v2 & 0xFFFFFFFE | *a1 & 1;
  a1[1] = a2[1];
  a2[1] = v3;
  unsigned int v4 = *a2;
  if (*a1)
  {
    if (v4)
    {
      uint64_t v5 = 0;
      int v6 = (int *)(a1 + 2);
      uint64_t v7 = (int *)(a2 + 2);
      do
      {
        uint64_t v8 = *(void *)&v6[v5];
        *(void *)&v6[v5] = *(void *)&v7[v5];
        *(void *)&v7[v5] = v8;
        v5 += 2;
      }
      while (v5 != 16);
      return result;
    }
    int v10 = a2;
  }
  else
  {
    if ((v4 & 1) == 0)
    {
      uint64_t v9 = *((void *)a1 + 1);
      *((void *)a1 + 1) = *((void *)a2 + 1);
      *((void *)a2 + 1) = v9;
      LODWORD(v9) = a1[4];
      a1[4] = a2[4];
      a2[4] = v9;
      return result;
    }
    unsigned int v4 = *a1;
    int v10 = a1;
    a1 = a2;
  }
  __n128 v13 = *(__n128 *)(v10 + 2);
  *int v10 = v4 | 1;
  for (uint64_t i = 2; i != 18; i += 2)
    *(void *)&v10[i] = *(void *)&a1[i];
  *a1 &= ~1u;
  __n128 result = v13;
  *(__n128 *)(a1 + 2) = v13;
  return result;
}

int *sub_1CB939044(int *a1, uint64_t a2)
{
  *(void *)a1 = 1;
  int64x2_t v4 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(a1 + 2) = v4;
  uint64_t v5 = a1 + 2;
  *(int64x2_t *)(a1 + 6) = v4;
  *(int64x2_t *)(a1 + 10) = v4;
  *(int64x2_t *)(a1 + 14) = v4;
  int v6 = *a1;
  if ((*a1 & 1) == 0)
  {
    MEMORY[0x1D25D9CD0](*((void *)a1 + 1), 8);
    int v6 = *a1;
  }
  *a1 = v6 | 1;
  if ((*(_DWORD *)a2 & 1) != 0 || *(_DWORD *)(a2 + 16) <= 8u)
  {
    *a1 = *(_DWORD *)a2 | 1;
    size_t v7 = 64;
  }
  else
  {
    *a1 = v6 & 0xFFFFFFFE;
    if (*(_DWORD *)a2) {
      uint64_t v11 = 8;
    }
    else {
      uint64_t v11 = *(unsigned int *)(a2 + 16);
    }
    uint64_t v12 = operator new(8 * v11, (std::align_val_t)8uLL);
    *((void *)a1 + 1) = v12;
    *((void *)a1 + 2) = v11;
    BOOL v13 = (*a1 & 1) == 0;
    *a1 = *a1 & 1 | *(_DWORD *)a2 & 0xFFFFFFFE;
    if (v13)
    {
      uint64_t v5 = v12;
      size_t v7 = 8 * v11;
    }
    else
    {
      size_t v7 = 64;
    }
  }
  a1[1] = *(_DWORD *)(a2 + 4);
  if (*(_DWORD *)a2) {
    uint64_t v8 = (const void *)(a2 + 8);
  }
  else {
    uint64_t v8 = *(const void **)(a2 + 8);
  }
  memcpy(v5, v8, v7);
  *((void *)a1 + 9) = a1 + 22;
  *((void *)a1 + 10) = 0x800000000;
  unsigned int v9 = *(_DWORD *)(a2 + 80);
  if (v9 && a1 != (int *)a2)
  {
    if (v9 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(a1 + 22, *(const void **)(a2 + 72), 8 * *(unsigned int *)(a2 + 80));
    a1[20] = v9;
  }
  return a1;
}

void sub_1CB9391D0(void *a1)
{
  if (a1)
  {
    sub_1CB9391D0(*a1);
    sub_1CB9391D0(a1[1]);
    unsigned int v2 = (char *)a1[15];
    if (v2 != (char *)(a1 + 17)) {
      free(v2);
    }
    if ((a1[6] & 1) == 0) {
      MEMORY[0x1D25D9CD0](a1[7], 8);
    }
    operator delete(a1);
  }
}

__n128 sub_1CB939248(uint64_t a1, unsigned int a2, uint64_t a3, int a4, int a5, char a6)
{
  if ((a2 & 0x80000000) != 0) {
    int v6 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    int v6 = (uint64_t *)(*(void *)(a3 + 272) + 8 * a2);
  }
  uint64_t v7 = *v6;
  if (!v7) {
    goto LABEL_5;
  }
  if ((*(unsigned char *)(v7 + 3) & 1) == 0)
  {
    uint64_t v16 = *(void *)(v7 + 24);
    if (!v16 || (*(unsigned char *)(v16 + 3) & 1) == 0) {
      goto LABEL_5;
    }
  }
  if ((a2 & 0x80000000) != 0) {
    uint64_t v8 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v8 = (uint64_t *)(*(void *)(a3 + 272) + 8 * a2);
  }
  uint64_t v9 = *v8;
  if (v9)
  {
    if ((*(unsigned char *)(v9 + 3) & 1) == 0)
    {
      uint64_t v9 = *(void *)(v9 + 24);
      if (v9)
      {
        if ((*(unsigned char *)(v9 + 3) & 1) == 0) {
          uint64_t v9 = 0;
        }
      }
    }
  }
  uint64_t v10 = *(void *)(v9 + 8);
  while (1)
  {
    uint64_t v9 = *(void *)(v9 + 24);
    if (!v9 || (*(unsigned char *)(v9 + 3) & 1) == 0) {
      break;
    }
    if (*(void *)(v9 + 8) != v10) {
      goto LABEL_5;
    }
  }
  if (v10
    && **(unsigned __int16 **)(v10 + 16) == a4
    && (uint64_t v11 = *(void *)(v10 + 32), !*(void *)(v11 + 48))
    && (uint64_t v12 = (__n128 *)(v11 + 64), *(_DWORD *)(v11 + 64) == 7)
    && *(_DWORD *)(v11 + 80) == 64
    && dword_1CD96EDC8[(((unint64_t)*(unsigned int *)(v11 + 64) >> 8) & 0xFFF) - 1] == a5
    && ((uint64_t v13 = *(unsigned int *)(v11 + 68), a5 != 2) || (v13 & 1) == 0)
    && ((uint64_t)(v13 | ((unint64_t)*(unsigned int *)(v11 + 88) << 32)) < 256 || (a6 & 1) != 0))
  {
    __n128 result = *v12;
    long long v15 = *(_OWORD *)(v11 + 80);
    *(__n128 *)a1 = *v12;
    *(_OWORD *)(a1 + 16) = v15;
    *(unsigned char *)(a1 + 32) = 1;
  }
  else
  {
LABEL_5:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 32) = 0;
  }
  return result;
}

void sub_1CB93939C(char **a1, uint64_t a2)
{
  v19[16] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(*(void *)a2 + 328);
  uint64_t v12 = v16;
  uint64_t v13 = v16;
  int v15 = 0;
  uint64_t v14 = 0x100000008;
  unsigned int v17 = v19;
  v16[0] = v3;
  uint64_t v4 = *(void *)(v3 + 88);
  v19[0] = v3;
  v19[1] = v4;
  uint64_t v18 = 0x800000001;
  sub_1CB93B280((llvm::SmallPtrSetImplBase *)&v12);
  v9[0] = 0;
  memset(v10, 0, sizeof(v10));
  uint64_t v11 = 0;
  memset(v8, 0, sizeof(v8));
  uint64_t v5 = (char *)v8 + 8;
  int v6 = (char *)v8 + 8;
  uint64_t v7 = 8;
  v9[1] = (char *)v10 + 8;
  DWORD1(v10[0]) = 8;
  sub_1CB9394FC((uint64_t)&v12, (uint64_t)&v5, a1);
  if (v9[1] != (char *)v10 + 8) {
    free(v9[1]);
  }
  if (v6 != v5) {
    free(v6);
  }
  if (v17 != v19) {
    free(v17);
  }
  if (v13 != v12) {
    free(v13);
  }
}

uint64_t sub_1CB9394FC(uint64_t a1, uint64_t a2, char **a3)
{
  v47[17] = *MEMORY[0x1E4F143B8];
  int v6 = v40;
  uint64_t v35 = v40;
  uint64_t v7 = *(unsigned char **)(a1 + 8);
  if (v7 == *(unsigned char **)a1)
  {
    uint64_t v36 = v40;
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v24 = *(unsigned int *)(a1 + 16);
    int v6 = malloc_type_malloc(8 * v24, 0x4065EBACuLL);
    if (!v6)
    {
      if (v24) {
        goto LABEL_47;
      }
      int v6 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v6) {
        goto LABEL_47;
      }
    }
    uint64_t v36 = v6;
    uint64_t v8 = *(unsigned char **)a1;
    uint64_t v7 = *(unsigned char **)(a1 + 8);
  }
  unsigned int v10 = *(_DWORD *)(a1 + 16);
  unsigned int v9 = *(_DWORD *)(a1 + 20);
  unsigned int v37 = v10;
  if (v7 == v8) {
    unsigned int v11 = v9;
  }
  else {
    unsigned int v11 = v10;
  }
  if (v11)
  {
    memmove(v6, v7, 8 * v11);
    unsigned int v9 = *(_DWORD *)(a1 + 20);
  }
  int v12 = *(_DWORD *)(a1 + 24);
  unsigned int v38 = v9;
  int v39 = v12;
  int v41 = v43;
  uint64_t v42 = 0x800000000;
  unsigned int v13 = *(_DWORD *)(a1 + 104);
  if (v13 && &v35 != (unsigned char **)a1)
  {
    if (v13 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v43, *(const void **)(a1 + 96), 16 * *(unsigned int *)(a1 + 104));
    LODWORD(v42) = v13;
  }
  uint64_t v14 = v31;
  BOOL v26 = v31;
  int v15 = *(const void **)(a2 + 8);
  if (v15 == *(const void **)a2)
  {
    unsigned int v27 = v31;
    uint64_t v16 = v15;
    goto LABEL_14;
  }
  uint64_t v25 = *(unsigned int *)(a2 + 16);
  uint64_t v14 = malloc_type_malloc(8 * v25, 0x4065EBACuLL);
  if (!v14 && (v25 || (uint64_t v14 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
LABEL_47:
  }
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  unsigned int v27 = v14;
  uint64_t v16 = *(const void **)a2;
  int v15 = *(const void **)(a2 + 8);
LABEL_14:
  unsigned int v18 = *(_DWORD *)(a2 + 16);
  unsigned int v17 = *(_DWORD *)(a2 + 20);
  unsigned int v28 = v18;
  if (v15 == v16) {
    unsigned int v19 = v17;
  }
  else {
    unsigned int v19 = v18;
  }
  if (v19)
  {
    memmove(v14, v15, 8 * v19);
    unsigned int v17 = *(_DWORD *)(a2 + 20);
  }
  int v20 = *(_DWORD *)(a2 + 24);
  unsigned int v29 = v17;
  int v30 = v20;
  int v32 = v34;
  uint64_t v33 = 0x800000000;
  unsigned int v21 = *(_DWORD *)(a2 + 104);
  if (v21 && &v26 != (unsigned char **)a2)
  {
    if (v21 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v34, *(const void **)(a2 + 96), 16 * *(unsigned int *)(a2 + 104));
    LODWORD(v33) = v21;
  }
  sub_1CB9397E4((uint64_t)&v35, (uint64_t)&v26, a3, (uint64_t)&v44);
  uint64_t v22 = v47[16];
  if (v46 != v47) {
    free(v46);
  }
  if (v45 != v44) {
    free(v45);
  }
  if (v32 != v34) {
    free(v32);
  }
  if (v27 != v26) {
    free(v27);
  }
  if (v41 != v43) {
    free(v41);
  }
  if (v36 != v35) {
    free(v36);
  }
  return v22;
}

void sub_1CB9397E4(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, uint64_t a4@<X8>)
{
  v35[16] = *MEMORY[0x1E4F143B8];
  unsigned int v27 = v32;
  unsigned int v9 = *(unsigned char **)a1;
  uint64_t v8 = *(const void **)(a1 + 8);
  if (v8 == *(const void **)a1)
  {
    unsigned int v28 = v32;
    uint64_t v10 = *(unsigned int *)(a1 + 20);
    if (v10) {
      memmove(v32, v8, 8 * v10);
    }
  }
  else
  {
    unsigned int v28 = *(unsigned char **)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    LODWORD(v10) = *(_DWORD *)(a1 + 20);
  }
  int v29 = *(_DWORD *)(a1 + 16);
  int v30 = v10;
  int v31 = *(_DWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v33 = v35;
  unint64_t v34 = 0x800000000;
  unsigned int v11 = *(_DWORD *)(a1 + 104);
  if (v11 && &v27 != (unsigned char **)a1)
  {
    int v12 = *(const void **)(a1 + 96);
    if (v12 == (const void *)(a1 + 112))
    {
      if (v11 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v35, v12, 16 * *(unsigned int *)(a1 + 104));
      LODWORD(v34) = v11;
    }
    else
    {
      uint64_t v33 = *(void **)(a1 + 96);
      unint64_t v34 = __PAIR64__(*(_DWORD *)(a1 + 108), v11);
      *(void *)(a1 + 96) = a1 + 112;
      *(_DWORD *)(a1 + 108) = 0;
    }
    *(_DWORD *)(a1 + 104) = 0;
  }
  unsigned int v18 = v23;
  uint64_t v14 = *(unsigned char **)a2;
  unsigned int v13 = *(const void **)(a2 + 8);
  if (v13 == *(const void **)a2)
  {
    unsigned int v19 = v23;
    uint64_t v15 = *(unsigned int *)(a2 + 20);
    if (v15) {
      memmove(v23, v13, 8 * v15);
    }
  }
  else
  {
    unsigned int v19 = *(unsigned char **)(a2 + 8);
    *(void *)(a2 + 8) = v14;
    LODWORD(v15) = *(_DWORD *)(a2 + 20);
  }
  int v20 = *(_DWORD *)(a2 + 16);
  int v21 = v15;
  int v22 = *(_DWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v24 = v26;
  unint64_t v25 = 0x800000000;
  unsigned int v16 = *(_DWORD *)(a2 + 104);
  if (v16 && &v18 != (unsigned char **)a2)
  {
    unsigned int v17 = *(const void **)(a2 + 96);
    if (v17 == (const void *)(a2 + 112))
    {
      if (v16 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v26, v17, 16 * *(unsigned int *)(a2 + 104));
      LODWORD(v25) = v16;
    }
    else
    {
      uint64_t v24 = *(void **)(a2 + 96);
      unint64_t v25 = __PAIR64__(*(_DWORD *)(a2 + 108), v16);
      *(void *)(a2 + 96) = a2 + 112;
      *(_DWORD *)(a2 + 108) = 0;
    }
    *(_DWORD *)(a2 + 104) = 0;
  }
  sub_1CB939A98((uint64_t)&v27, (uint64_t)&v18, a3, a4);
  if (v24 != v26) {
    free(v24);
  }
  if (v19 != v18) {
    free(v19);
  }
  if (v33 != v35) {
    free(v33);
  }
  if (v28 != v27) {
    free(v28);
  }
}

void sub_1CB939A98(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, uint64_t a4@<X8>)
{
  v35[16] = *MEMORY[0x1E4F143B8];
  unsigned int v27 = v32;
  unsigned int v9 = *(unsigned char **)a1;
  uint64_t v8 = *(const void **)(a1 + 8);
  if (v8 == *(const void **)a1)
  {
    unsigned int v28 = v32;
    uint64_t v10 = *(unsigned int *)(a1 + 20);
    if (v10) {
      memmove(v32, v8, 8 * v10);
    }
  }
  else
  {
    unsigned int v28 = *(unsigned char **)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    LODWORD(v10) = *(_DWORD *)(a1 + 20);
  }
  int v29 = *(_DWORD *)(a1 + 16);
  int v30 = v10;
  int v31 = *(_DWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v33 = v35;
  unint64_t v34 = 0x800000000;
  unsigned int v11 = *(_DWORD *)(a1 + 104);
  if (v11 && &v27 != (unsigned char **)a1)
  {
    int v12 = *(const void **)(a1 + 96);
    if (v12 == (const void *)(a1 + 112))
    {
      if (v11 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v35, v12, 16 * *(unsigned int *)(a1 + 104));
      LODWORD(v34) = v11;
    }
    else
    {
      uint64_t v33 = *(void **)(a1 + 96);
      unint64_t v34 = __PAIR64__(*(_DWORD *)(a1 + 108), v11);
      *(void *)(a1 + 96) = a1 + 112;
      *(_DWORD *)(a1 + 108) = 0;
    }
    *(_DWORD *)(a1 + 104) = 0;
  }
  unsigned int v18 = v23;
  uint64_t v14 = *(unsigned char **)a2;
  unsigned int v13 = *(const void **)(a2 + 8);
  if (v13 == *(const void **)a2)
  {
    unsigned int v19 = v23;
    uint64_t v15 = *(unsigned int *)(a2 + 20);
    if (v15) {
      memmove(v23, v13, 8 * v15);
    }
  }
  else
  {
    unsigned int v19 = *(unsigned char **)(a2 + 8);
    *(void *)(a2 + 8) = v14;
    LODWORD(v15) = *(_DWORD *)(a2 + 20);
  }
  int v20 = *(_DWORD *)(a2 + 16);
  int v21 = v15;
  int v22 = *(_DWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v24 = v26;
  unint64_t v25 = 0x800000000;
  unsigned int v16 = *(_DWORD *)(a2 + 104);
  if (v16 && &v18 != (unsigned char **)a2)
  {
    unsigned int v17 = *(const void **)(a2 + 96);
    if (v17 == (const void *)(a2 + 112))
    {
      if (v16 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v26, v17, 16 * *(unsigned int *)(a2 + 104));
      LODWORD(v25) = v16;
    }
    else
    {
      uint64_t v24 = *(void **)(a2 + 96);
      unint64_t v25 = __PAIR64__(*(_DWORD *)(a2 + 108), v16);
      *(void *)(a2 + 96) = a2 + 112;
      *(_DWORD *)(a2 + 108) = 0;
    }
    *(_DWORD *)(a2 + 104) = 0;
  }
  sub_1CB939D4C((uint64_t)&v27, (uint64_t)&v18, a3, a4);
  if (v24 != v26) {
    free(v24);
  }
  if (v19 != v18) {
    free(v19);
  }
  if (v33 != v35) {
    free(v33);
  }
  if (v28 != v27) {
    free(v28);
  }
}

void sub_1CB939D4C(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, uint64_t a4@<X8>)
{
  v123[16] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = v106;
  unsigned int v101 = v106;
  unsigned int v9 = *(unsigned char **)(a1 + 8);
  if (v9 == *(unsigned char **)a1)
  {
    int v102 = v106;
    uint64_t v10 = v9;
  }
  else
  {
    uint64_t v40 = *(unsigned int *)(a1 + 16);
    uint64_t v8 = malloc_type_malloc(8 * v40, 0x4065EBACuLL);
    if (!v8 && (v40 || (uint64_t v8 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    int v102 = v8;
    uint64_t v10 = *(unsigned char **)a1;
    unsigned int v9 = *(unsigned char **)(a1 + 8);
  }
  unsigned int v12 = *(_DWORD *)(a1 + 16);
  unsigned int v11 = *(_DWORD *)(a1 + 20);
  unsigned int v103 = v12;
  if (v9 == v10) {
    unsigned int v13 = v11;
  }
  else {
    unsigned int v13 = v12;
  }
  if (v13)
  {
    memmove(v8, v9, 8 * v13);
    unsigned int v11 = *(_DWORD *)(a1 + 20);
  }
  int v14 = *(_DWORD *)(a1 + 24);
  unsigned int v104 = v11;
  int v105 = v14;
  unsigned int v107 = v109;
  uint64_t v108 = 0x800000000;
  unsigned int v15 = *(_DWORD *)(a1 + 104);
  if (v15 && &v101 != (unsigned char **)a1)
  {
    if (v15 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v109, *(const void **)(a1 + 96), 16 * *(unsigned int *)(a1 + 104));
    LODWORD(v108) = v15;
  }
  uint64_t v92 = v97;
  unsigned int v17 = *(unsigned char **)a2;
  unsigned int v16 = *(const void **)(a2 + 8);
  if (v16 == *(const void **)a2)
  {
    uint64_t v93 = v97;
    uint64_t v18 = *(unsigned int *)(a2 + 20);
    if (v18) {
      memmove(v97, v16, 8 * v18);
    }
  }
  else
  {
    uint64_t v93 = *(void **)(a2 + 8);
    *(void *)(a2 + 8) = v17;
    LODWORD(v18) = *(_DWORD *)(a2 + 20);
  }
  int v94 = *(_DWORD *)(a2 + 16);
  int v95 = v18;
  int v96 = *(_DWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v98 = v100;
  unint64_t v99 = 0x800000000;
  unsigned int v19 = *(_DWORD *)(a2 + 104);
  if (v19 && &v92 != (unsigned char **)a2)
  {
    int v20 = *(const void **)(a2 + 96);
    if (v20 == (const void *)(a2 + 112))
    {
      if (v19 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v100, v20, 16 * *(unsigned int *)(a2 + 104));
      LODWORD(v99) = v19;
    }
    else
    {
      uint64_t v98 = *(void **)(a2 + 96);
      unint64_t v99 = __PAIR64__(*(_DWORD *)(a2 + 108), v19);
      *(void *)(a2 + 96) = a2 + 112;
      *(_DWORD *)(a2 + 108) = 0;
    }
    *(_DWORD *)(a2 + 104) = 0;
  }
  sub_1CB93A61C((uint64_t)&v101, (uint64_t)&v92, (uint64_t)&v110);
  if (v98 != v100) {
    free(v98);
  }
  if (v93 != v92) {
    free(v93);
  }
  if (v107 != v109) {
    free(v107);
  }
  if (v102 != v101) {
    free(v102);
  }
  uint64_t v76 = v81;
  if (__src == v110)
  {
    int v77 = v81;
    int v21 = HIDWORD(v112);
    if (HIDWORD(v112)) {
      memmove(v81, __src, 8 * HIDWORD(v112));
    }
  }
  else
  {
    int v77 = __src;
    unsigned int __src = v110;
    int v21 = HIDWORD(v112);
  }
  int v78 = v112;
  int v79 = v21;
  int v80 = v113;
  uint64_t v112 = 8;
  int v113 = 0;
  uint64_t v82 = v84;
  uint64_t v83 = 0x800000000;
  int v22 = v115;
  if (v115)
  {
    if (v114 == v116)
    {
      if (v115 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v84, v114, 16 * v115);
      LODWORD(v83) = v22;
    }
    else
    {
      uint64_t v82 = v114;
      uint64_t v83 = v115;
      uint64_t v114 = v116;
      HIDWORD(v115) = 0;
    }
    LODWORD(v115) = 0;
  }
  uint64_t v67 = v72;
  if (v118 == v117)
  {
    unsigned int v68 = v72;
    int v23 = HIDWORD(v119);
    if (HIDWORD(v119)) {
      memmove(v72, v118, 8 * HIDWORD(v119));
    }
  }
  else
  {
    unsigned int v68 = v118;
    BOOL v118 = v117;
    int v23 = HIDWORD(v119);
  }
  int v69 = v119;
  int v70 = v23;
  int v71 = v120;
  uint64_t v119 = 8;
  int v120 = 0;
  uint64_t v73 = v75;
  uint64_t v74 = 0x800000000;
  int v24 = v122;
  if (v122)
  {
    if (v121 == v123)
    {
      if (v122 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v75, v121, 16 * v122);
      LODWORD(v74) = v24;
    }
    else
    {
      uint64_t v73 = v121;
      uint64_t v74 = v122;
      int v121 = v123;
      HIDWORD(v122) = 0;
    }
    LODWORD(v122) = 0;
  }
  sub_1CB93AAF4((llvm::SmallPtrSetImplBase *)&v76, (uint64_t)&v67, a3, (uint64_t)&v85);
  if (v73 != v75) {
    free(v73);
  }
  if (v68 != v67) {
    free(v68);
  }
  if (v82 != v84) {
    free(v82);
  }
  if (v77 != v76) {
    free(v77);
  }
  uint64_t v50 = v55;
  BOOL v26 = *(unsigned char **)a1;
  unint64_t v25 = *(const void **)(a1 + 8);
  if (v25 == *(const void **)a1)
  {
    uint64_t v51 = v55;
    uint64_t v27 = *(unsigned int *)(a1 + 20);
    if (v27) {
      memmove(v55, v25, 8 * v27);
    }
  }
  else
  {
    uint64_t v51 = *(unsigned char **)(a1 + 8);
    *(void *)(a1 + 8) = v26;
    LODWORD(v27) = *(_DWORD *)(a1 + 20);
  }
  int v52 = *(_DWORD *)(a1 + 16);
  int v53 = v27;
  int v54 = *(_DWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v56 = v58;
  unint64_t v57 = 0x800000000;
  unsigned int v28 = *(_DWORD *)(a1 + 104);
  if (v28 && &v50 != (unsigned char **)a1)
  {
    int v29 = *(const void **)(a1 + 96);
    if (v29 == (const void *)(a1 + 112))
    {
      if (v28 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v58, v29, 16 * *(unsigned int *)(a1 + 104));
      LODWORD(v57) = v28;
    }
    else
    {
      uint64_t v56 = *(void **)(a1 + 96);
      unint64_t v57 = __PAIR64__(*(_DWORD *)(a1 + 108), v28);
      *(void *)(a1 + 96) = a1 + 112;
      *(_DWORD *)(a1 + 108) = 0;
    }
    *(_DWORD *)(a1 + 104) = 0;
  }
  int v41 = v46;
  if (v86 == v85)
  {
    uint64_t v42 = v46;
    int v30 = HIDWORD(v87);
    if (HIDWORD(v87)) {
      memmove(v46, v86, 8 * HIDWORD(v87));
    }
  }
  else
  {
    uint64_t v42 = v86;
    int v86 = v85;
    int v30 = HIDWORD(v87);
  }
  int v43 = v87;
  int v44 = v30;
  int v45 = v88;
  uint64_t v87 = 8;
  int v88 = 0;
  uint64_t v47 = v49;
  uint64_t v48 = 0x800000000;
  int v31 = v90;
  if (v90)
  {
    if (v89 == v91)
    {
      if (v90 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v49, v89, 16 * v90);
      LODWORD(v48) = v31;
    }
    else
    {
      uint64_t v47 = v89;
      uint64_t v48 = v90;
      unsigned int v89 = v91;
      HIDWORD(v90) = 0;
    }
    LODWORD(v90) = 0;
  }
  sub_1CB93AD58((uint64_t)&v50, (uint64_t)&v41, (uint64_t)&v59);
  uint64_t v32 = v91[16];
  uint64_t v33 = (void *)(a4 + 32);
  *(void *)a4 = a4 + 32;
  uint64_t v35 = v59;
  unint64_t v34 = v60;
  if (v60 == v59)
  {
    *(void *)(a4 + 8) = v33;
    int v36 = HIDWORD(v61);
    if (HIDWORD(v61)) {
      memmove(v33, v34, 8 * HIDWORD(v61));
    }
  }
  else
  {
    *(void *)(a4 + 8) = v60;
    uint64_t v60 = v35;
    int v36 = HIDWORD(v61);
  }
  *(void *)(a4 + 96) = a4 + 112;
  int v37 = v62;
  *(_DWORD *)(a4 + 16) = v61;
  *(_DWORD *)(a4 + 20) = v36;
  *(_DWORD *)(a4 + 24) = v37;
  uint64_t v61 = 8;
  int v62 = 0;
  *(void *)(a4 + 104) = 0x800000000;
  unsigned int v38 = v64;
  if (v64 && &v59 != (void **)a4)
  {
    if (v63 == v66)
    {
      if (v64 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy((void *)(a4 + 112), v63, 16 * v64);
      *(_DWORD *)(a4 + 104) = v38;
    }
    else
    {
      *(void *)(a4 + 96) = v63;
      int v39 = v65;
      *(_DWORD *)(a4 + 104) = v38;
      *(_DWORD *)(a4 + 108) = v39;
      uint64_t v63 = v66;
      int v65 = 0;
    }
    unsigned int v64 = 0;
  }
  *(void *)(a4 + 240) = v32;
  if (v63 != v66) {
    free(v63);
  }
  if (v60 != v59) {
    free(v60);
  }
  if (v47 != v49) {
    free(v47);
  }
  if (v42 != v41) {
    free(v42);
  }
  if (v56 != v58) {
    free(v56);
  }
  if (v51 != v50) {
    free(v51);
  }
  if (v89 != v91) {
    free(v89);
  }
  if (v86 != v85) {
    free(v86);
  }
  if (v121 != v123) {
    free(v121);
  }
  if (v118 != v117) {
    free(v118);
  }
  if (v114 != v116) {
    free(v114);
  }
  if (__src != v110) {
    free(__src);
  }
}

void sub_1CB93A61C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v62[16] = *MEMORY[0x1E4F143B8];
  uint64_t v46 = v51;
  uint64_t v7 = *(unsigned char **)a1;
  int v6 = *(const void **)(a1 + 8);
  if (v6 == *(const void **)a1)
  {
    uint64_t v47 = v51;
    uint64_t v8 = *(unsigned int *)(a1 + 20);
    if (v8) {
      memmove(v51, v6, 8 * v8);
    }
  }
  else
  {
    uint64_t v47 = *(unsigned char **)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    LODWORD(v8) = *(_DWORD *)(a1 + 20);
  }
  int v48 = *(_DWORD *)(a1 + 16);
  int v49 = v8;
  int v50 = *(_DWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  int v52 = v54;
  unint64_t v53 = 0x800000000;
  unsigned int v9 = *(_DWORD *)(a1 + 104);
  if (v9 && &v46 != (unsigned char **)a1)
  {
    uint64_t v10 = *(const void **)(a1 + 96);
    if (v10 == (const void *)(a1 + 112))
    {
      if (v9 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v54, v10, 16 * *(unsigned int *)(a1 + 104));
      LODWORD(v53) = v9;
    }
    else
    {
      int v52 = *(void **)(a1 + 96);
      unint64_t v53 = __PAIR64__(*(_DWORD *)(a1 + 108), v9);
      *(void *)(a1 + 96) = a1 + 112;
      *(_DWORD *)(a1 + 108) = 0;
    }
    *(_DWORD *)(a1 + 104) = 0;
  }
  sub_1CB93AFFC((uint64_t)&v46, (uint64_t)&v55);
  int v29 = v34;
  unsigned int v12 = *(unsigned char **)a2;
  unsigned int v11 = *(const void **)(a2 + 8);
  if (v11 == *(const void **)a2)
  {
    int v30 = v34;
    uint64_t v13 = *(unsigned int *)(a2 + 20);
    if (v13) {
      memmove(v34, v11, 8 * v13);
    }
  }
  else
  {
    int v30 = *(unsigned char **)(a2 + 8);
    *(void *)(a2 + 8) = v12;
    LODWORD(v13) = *(_DWORD *)(a2 + 20);
  }
  int v31 = *(_DWORD *)(a2 + 16);
  int v32 = v13;
  int v33 = *(_DWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v35 = v37;
  unint64_t v36 = 0x800000000;
  unsigned int v14 = *(_DWORD *)(a2 + 104);
  if (v14 && &v29 != (unsigned char **)a2)
  {
    unsigned int v15 = *(const void **)(a2 + 96);
    if (v15 == (const void *)(a2 + 112))
    {
      if (v14 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v37, v15, 16 * *(unsigned int *)(a2 + 104));
      LODWORD(v36) = v14;
    }
    else
    {
      uint64_t v35 = *(void **)(a2 + 96);
      unint64_t v36 = __PAIR64__(*(_DWORD *)(a2 + 108), v14);
      *(void *)(a2 + 96) = a2 + 112;
      *(_DWORD *)(a2 + 108) = 0;
    }
    *(_DWORD *)(a2 + 104) = 0;
  }
  sub_1CB93AFFC((uint64_t)&v29, (uint64_t)&v38);
  unsigned int v16 = (void *)(a3 + 32);
  *(void *)a3 = a3 + 32;
  unsigned int v17 = __src;
  uint64_t v18 = v55;
  if (__src == v55)
  {
    *(void *)(a3 + 8) = v16;
    int v19 = HIDWORD(v57);
    if (HIDWORD(v57)) {
      memmove(v16, v17, 8 * HIDWORD(v57));
    }
  }
  else
  {
    *(void *)(a3 + 8) = __src;
    unsigned int __src = v18;
    int v19 = HIDWORD(v57);
  }
  *(void *)(a3 + 96) = a3 + 112;
  int v20 = v58;
  *(_DWORD *)(a3 + 16) = v57;
  *(_DWORD *)(a3 + 20) = v19;
  *(_DWORD *)(a3 + 24) = v20;
  uint64_t v57 = 8;
  int v58 = 0;
  *(void *)(a3 + 104) = 0x800000000;
  unsigned int v21 = v60;
  if (v60 && &v55 != (void **)a3)
  {
    if (v59 == v62)
    {
      if (v60 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy((void *)(a3 + 112), v59, 16 * v60);
      *(_DWORD *)(a3 + 104) = v21;
    }
    else
    {
      *(void *)(a3 + 96) = v59;
      int v28 = v61;
      *(_DWORD *)(a3 + 104) = v21;
      *(_DWORD *)(a3 + 108) = v28;
      uint64_t v59 = v62;
      int v61 = 0;
    }
    unsigned int v60 = 0;
  }
  int v22 = (void *)(a3 + 272);
  *(void *)(a3 + 240) = a3 + 272;
  int v24 = v38;
  int v23 = v39;
  if (v39 == v38)
  {
    *(void *)(a3 + 248) = v22;
    int v25 = HIDWORD(v40);
    if (HIDWORD(v40)) {
      memmove(v22, v23, 8 * HIDWORD(v40));
    }
  }
  else
  {
    *(void *)(a3 + 248) = v39;
    int v39 = v24;
    int v25 = HIDWORD(v40);
  }
  int v26 = v41;
  *(_DWORD *)(a3 + 256) = v40;
  *(_DWORD *)(a3 + 260) = v25;
  *(_DWORD *)(a3 + 264) = v26;
  uint64_t v40 = 8;
  int v41 = 0;
  *(void *)(a3 + 336) = a3 + 352;
  *(void *)(a3 + 344) = 0x800000000;
  unsigned int v27 = v43;
  if (v43 && (void **)(a3 + 240) != &v38)
  {
    if (v42 == v45)
    {
      if (v43 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy((void *)(a3 + 352), v42, 16 * v43);
      *(_DWORD *)(a3 + 344) = v27;
    }
    else
    {
      *(void *)(a3 + 336) = v42;
      *(_DWORD *)(a3 + 344) = v27;
      *(_DWORD *)(a3 + 348) = v44;
      uint64_t v42 = v45;
      int v44 = 0;
    }
    unsigned int v43 = 0;
  }
  if (v42 != v45) {
    free(v42);
  }
  if (v39 != v38) {
    free(v39);
  }
  if (v35 != v37) {
    free(v35);
  }
  if (v30 != v29) {
    free(v30);
  }
  if (v59 != v62) {
    free(v59);
  }
  if (__src != v55) {
    free(__src);
  }
  if (v52 != v54) {
    free(v52);
  }
  if (v47 != v46) {
    free(v47);
  }
}

void *sub_1CB93AAF4@<X0>(llvm::SmallPtrSetImplBase *this@<X1>, uint64_t a2@<X2>, char **a3@<X3>, uint64_t a4@<X8>)
{
  while (1)
  {
    uint64_t v8 = *((unsigned int *)this + 26);
    unsigned int v9 = (char *)*((void *)this + 12);
    if (v8 != *(_DWORD *)(a2 + 104)) {
      goto LABEL_11;
    }
    if (!v8) {
      break;
    }
    uint64_t v10 = *(void **)(a2 + 96);
    unsigned int v11 = (char *)*((void *)this + 12);
    while (*(void *)v11 == *v10 && *((void *)v11 + 1) == v10[1])
    {
      v11 += 16;
      v10 += 2;
      if (v11 == &v9[16 * v8]) {
        goto LABEL_30;
      }
    }
LABEL_11:
    uint64_t v13 = &v9[16 * v8];
    unsigned int v15 = a3[1];
    unint64_t v14 = (unint64_t)a3[2];
    if ((unint64_t)v15 >= v14)
    {
      unsigned int v17 = *a3;
      uint64_t v18 = (v15 - *a3) >> 3;
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 61) {
        abort();
      }
      uint64_t v20 = v14 - (void)v17;
      if (v20 >> 2 > v19) {
        unint64_t v19 = v20 >> 2;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21)
      {
        if (v21 >> 61) {
          sub_1CB833614();
        }
        int v22 = (char *)operator new(8 * v21);
      }
      else
      {
        int v22 = 0;
      }
      int v23 = &v22[8 * v18];
      *(void *)int v23 = *((void *)v13 - 2);
      unsigned int v16 = v23 + 8;
      if (v15 != v17)
      {
        do
        {
          uint64_t v24 = *((void *)v15 - 1);
          v15 -= 8;
          *((void *)v23 - 1) = v24;
          v23 -= 8;
        }
        while (v15 != v17);
        unsigned int v15 = *a3;
      }
      *a3 = v23;
      a3[1] = v16;
      a3[2] = &v22[8 * v21];
      if (v15)
      {
        operator delete(v15);
        LODWORD(v8) = *((_DWORD *)this + 26);
      }
    }
    else
    {
      *(void *)unsigned int v15 = *((void *)v13 - 2);
      unsigned int v16 = v15 + 8;
    }
    a3[1] = v16;
    *((_DWORD *)this + 26) = v8 - 1;
    if (v8 != 1) {
      sub_1CB93B280(this);
    }
  }
LABEL_30:
  __n128 result = (void *)(a4 + 32);
  *(void *)a4 = a4 + 32;
  uint64_t v27 = *(void *)this;
  int v26 = (const void *)*((void *)this + 1);
  if (v26 == *(const void **)this)
  {
    *(void *)(a4 + 8) = result;
    uint64_t v28 = *((unsigned int *)this + 5);
    if (v28) {
      __n128 result = memmove(result, v26, 8 * v28);
    }
  }
  else
  {
    *(void *)(a4 + 8) = v26;
    *((void *)this + 1) = v27;
    LODWORD(v28) = *((_DWORD *)this + 5);
  }
  *(void *)(a4 + 96) = a4 + 112;
  *(_DWORD *)(a4 + 16) = *((_DWORD *)this + 4);
  *(_DWORD *)(a4 + 20) = v28;
  *(_DWORD *)(a4 + 24) = *((_DWORD *)this + 6);
  *((void *)this + 2) = 8;
  *((_DWORD *)this + 6) = 0;
  *(void *)(a4 + 104) = 0x800000000;
  if (v8 && (llvm::SmallPtrSetImplBase *)a4 != this)
  {
    if (v9 == (char *)this + 112)
    {
      if (v8 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      __n128 result = memcpy((void *)(a4 + 112), v9, 16 * v8);
      *(_DWORD *)(a4 + 104) = v8;
    }
    else
    {
      *(void *)(a4 + 96) = v9;
      int v29 = *((_DWORD *)this + 27);
      *(_DWORD *)(a4 + 104) = v8;
      *(_DWORD *)(a4 + 108) = v29;
      *((void *)this + 12) = (char *)this + 112;
      *((_DWORD *)this + 27) = 0;
    }
    *((_DWORD *)this + 26) = 0;
  }
  *(void *)(a4 + 240) = a3;
  return result;
}

void sub_1CB93AD58(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v33[16] = *MEMORY[0x1E4F143B8];
  int v25 = v30;
  uint64_t v7 = *(unsigned char **)a1;
  int v6 = *(const void **)(a1 + 8);
  if (v6 == *(const void **)a1)
  {
    int v26 = v30;
    uint64_t v8 = *(unsigned int *)(a1 + 20);
    if (v8) {
      memmove(v30, v6, 8 * v8);
    }
  }
  else
  {
    int v26 = *(unsigned char **)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    LODWORD(v8) = *(_DWORD *)(a1 + 20);
  }
  int v27 = *(_DWORD *)(a1 + 16);
  int v28 = v8;
  int v29 = *(_DWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  int v31 = v33;
  unint64_t v32 = 0x800000000;
  unsigned int v9 = *(_DWORD *)(a1 + 104);
  if (v9 && &v25 != (unsigned char **)a1)
  {
    uint64_t v10 = *(const void **)(a1 + 96);
    if (v10 == (const void *)(a1 + 112))
    {
      if (v9 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v33, v10, 16 * *(unsigned int *)(a1 + 104));
      LODWORD(v32) = v9;
    }
    else
    {
      int v31 = *(void **)(a1 + 96);
      unint64_t v32 = __PAIR64__(*(_DWORD *)(a1 + 108), v9);
      *(void *)(a1 + 96) = a1 + 112;
      *(_DWORD *)(a1 + 108) = 0;
    }
    *(_DWORD *)(a1 + 104) = 0;
  }
  unsigned int v16 = v21;
  unsigned int v12 = *(unsigned char **)a2;
  unsigned int v11 = *(const void **)(a2 + 8);
  if (v11 == *(const void **)a2)
  {
    unsigned int v17 = v21;
    uint64_t v13 = *(unsigned int *)(a2 + 20);
    if (v13) {
      memmove(v21, v11, 8 * v13);
    }
  }
  else
  {
    unsigned int v17 = *(unsigned char **)(a2 + 8);
    *(void *)(a2 + 8) = v12;
    LODWORD(v13) = *(_DWORD *)(a2 + 20);
  }
  int v18 = *(_DWORD *)(a2 + 16);
  int v19 = v13;
  int v20 = *(_DWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  int v22 = v24;
  unint64_t v23 = 0x800000000;
  unsigned int v14 = *(_DWORD *)(a2 + 104);
  if (v14 && &v16 != (unsigned char **)a2)
  {
    unsigned int v15 = *(const void **)(a2 + 96);
    if (v15 == (const void *)(a2 + 112))
    {
      if (v14 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v24, v15, 16 * *(unsigned int *)(a2 + 104));
      LODWORD(v23) = v14;
    }
    else
    {
      int v22 = *(void **)(a2 + 96);
      unint64_t v23 = __PAIR64__(*(_DWORD *)(a2 + 108), v14);
      *(void *)(a2 + 96) = a2 + 112;
      *(_DWORD *)(a2 + 108) = 0;
    }
    *(_DWORD *)(a2 + 104) = 0;
  }
  sub_1CB93B4B0((uint64_t)&v25, (uint64_t)&v16, a3);
  if (v22 != v24) {
    free(v22);
  }
  if (v17 != v16) {
    free(v17);
  }
  if (v31 != v33) {
    free(v31);
  }
  if (v26 != v25) {
    free(v26);
  }
}

void sub_1CB93AFFC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v27[16] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = v24;
  int v20 = v24;
  uint64_t v5 = *(unsigned char **)(a1 + 8);
  if (v5 == *(unsigned char **)a1)
  {
    unint64_t v21 = v24;
    int v6 = v5;
  }
  else
  {
    uint64_t v19 = *(unsigned int *)(a1 + 16);
    uint64_t v4 = malloc_type_malloc(8 * v19, 0x4065EBACuLL);
    if (!v4 && (v19 || (uint64_t v4 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    unint64_t v21 = v4;
    int v6 = *(unsigned char **)a1;
    uint64_t v5 = *(unsigned char **)(a1 + 8);
  }
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  unsigned int v7 = *(_DWORD *)(a1 + 20);
  LODWORD(v22) = v8;
  if (v5 == v6) {
    unsigned int v9 = v7;
  }
  else {
    unsigned int v9 = v8;
  }
  if (v9)
  {
    memmove(v4, v5, 8 * v9);
    unsigned int v7 = *(_DWORD *)(a1 + 20);
  }
  int v10 = *(_DWORD *)(a1 + 24);
  HIDWORD(v22) = v7;
  int v23 = v10;
  int v25 = v27;
  uint64_t v26 = 0x800000000;
  unsigned int v11 = *(_DWORD *)(a1 + 104);
  if (v11)
  {
    if (&v20 == (unsigned char **)a1)
    {
      unsigned int v11 = 0;
    }
    else
    {
      if (v11 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v27, *(const void **)(a1 + 96), 16 * *(unsigned int *)(a1 + 104));
      LODWORD(v26) = v11;
    }
  }
  unsigned int v12 = (void *)(a2 + 32);
  *(void *)a2 = a2 + 32;
  unsigned int v14 = v20;
  uint64_t v13 = v21;
  if (v21 == v20)
  {
    *(void *)(a2 + 8) = v12;
    int v15 = HIDWORD(v22);
    if (HIDWORD(v22)) {
      memmove(v12, v13, 8 * HIDWORD(v22));
    }
  }
  else
  {
    *(void *)(a2 + 8) = v21;
    unint64_t v21 = v14;
    int v15 = HIDWORD(v22);
  }
  int v16 = v23;
  *(_DWORD *)(a2 + 16) = v22;
  *(_DWORD *)(a2 + 20) = v15;
  *(_DWORD *)(a2 + 24) = v16;
  uint64_t v22 = 8;
  *(void *)(a2 + 96) = a2 + 112;
  int v23 = 0;
  *(void *)(a2 + 104) = 0x800000000;
  unsigned int v17 = v25;
  if (v11 && &v20 != (unsigned char **)a2)
  {
    if (v25 == v27)
    {
      memcpy((void *)(a2 + 112), v27, 16 * v11);
      *(_DWORD *)(a2 + 104) = v11;
      unsigned int v17 = v25;
    }
    else
    {
      *(void *)(a2 + 96) = v25;
      int v18 = HIDWORD(v26);
      *(_DWORD *)(a2 + 104) = v11;
      *(_DWORD *)(a2 + 108) = v18;
      int v25 = v27;
      HIDWORD(v26) = 0;
      unsigned int v17 = v27;
    }
    LODWORD(v26) = 0;
  }
  if (v17 != v27) {
    free(v17);
  }
  if (v21 != v20) {
    free(v21);
  }
}

void sub_1CB93B280(llvm::SmallPtrSetImplBase *this)
{
  char v1 = (void *)((char *)this + 96);
  uint64_t v2 = *((unsigned int *)this + 26);
  uint64_t v3 = *((void *)this + 12) + 16 * v2;
  int v6 = *(uint64_t **)(v3 - 8);
  uint64_t v4 = (void *)(v3 - 8);
  uint64_t v5 = v6;
  if (v6 != *(uint64_t **)(*(v4 - 1) + 96))
  {
    do
    {
      *uint64_t v4 = v5 + 1;
      uint64_t v8 = *v5;
      uint64_t v9 = *((void *)this + 1);
      uint64_t v10 = *((unsigned int *)this + 5);
      if (v9 == *(void *)this)
      {
        if (v10)
        {
          unsigned int v11 = 0;
          uint64_t v12 = 8 * v10;
          uint64_t v13 = (void *)*((void *)this + 1);
          while (*v13 != v8)
          {
            if (*v13 == -2) {
              unsigned int v11 = v13;
            }
            ++v13;
            v12 -= 8;
            if (!v12)
            {
              if (!v11) {
                goto LABEL_10;
              }
              *unsigned int v11 = v8;
              --*((_DWORD *)this + 6);
              goto LABEL_12;
            }
          }
          goto LABEL_14;
        }
LABEL_10:
        unsigned int v14 = *((_DWORD *)this + 4);
        if (v10 < v14)
        {
          *((_DWORD *)this + 5) = v10 + 1;
          *(void *)(v9 + 8 * v10) = v8;
LABEL_12:
          uint64_t v15 = *(void *)(v8 + 88);
          if (v2 >= *((_DWORD *)this + 27)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v16 = (void *)(*((void *)this + 12) + 16 * v2);
          void *v16 = v8;
          v16[1] = v15;
          LODWORD(v2) = *((_DWORD *)this + 26) + 1;
          *((_DWORD *)this + 26) = v2;
          goto LABEL_14;
        }
      }
      else
      {
        unsigned int v14 = *((_DWORD *)this + 4);
      }
      if (3 * v14 <= 4 * ((int)v10 - *((_DWORD *)this + 6)))
      {
        if (v14 >= 0x40) {
          v14 *= 2;
        }
        else {
          unsigned int v14 = 128;
        }
      }
      else if (v14 - v10 >= v14 >> 3)
      {
        goto LABEL_19;
      }
      llvm::SmallPtrSetImplBase::Grow(this, v14);
      unsigned int v14 = *((_DWORD *)this + 4);
      uint64_t v9 = *((void *)this + 1);
LABEL_19:
      unsigned int v19 = v14 - 1;
      unsigned int v20 = (v14 - 1) & ((v8 >> 4) ^ (v8 >> 9));
      unint64_t v21 = (void *)(v9 + 8 * v20);
      uint64_t v22 = *v21;
      if (*v21 == -1)
      {
        int v23 = 0;
LABEL_31:
        if (v23) {
          int v27 = v23;
        }
        else {
          int v27 = v21;
        }
        if (*v27 != v8)
        {
          if (*v27 == -2) {
            --*((_DWORD *)this + 6);
          }
          else {
            ++*((_DWORD *)this + 5);
          }
          void *v27 = v8;
          LODWORD(v2) = *((_DWORD *)this + 26);
          goto LABEL_12;
        }
      }
      else
      {
        int v23 = 0;
        int v24 = 1;
        while (v22 != v8)
        {
          if (v23) {
            BOOL v25 = 0;
          }
          else {
            BOOL v25 = v22 == -2;
          }
          if (v25) {
            int v23 = v21;
          }
          unsigned int v26 = v20 + v24++;
          unsigned int v20 = v26 & v19;
          unint64_t v21 = (void *)(v9 + 8 * (v26 & v19));
          uint64_t v22 = *v21;
          if (*v21 == -1) {
            goto LABEL_31;
          }
        }
      }
      LODWORD(v2) = *((_DWORD *)this + 26);
LABEL_14:
      uint64_t v17 = *v1 + 16 * v2;
      int v18 = *(uint64_t **)(v17 - 8);
      uint64_t v4 = (void *)(v17 - 8);
      uint64_t v5 = v18;
    }
    while (v18 != *(uint64_t **)(*(v4 - 1) + 96));
  }
}

void sub_1CB93B4B0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v38[16] = *MEMORY[0x1E4F143B8];
  int v30 = v35;
  unsigned int v7 = *(unsigned char **)a1;
  int v6 = *(const void **)(a1 + 8);
  if (v6 == *(const void **)a1)
  {
    int v31 = v35;
    uint64_t v8 = *(unsigned int *)(a1 + 20);
    if (v8) {
      memmove(v35, v6, 8 * v8);
    }
  }
  else
  {
    int v31 = *(unsigned char **)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    LODWORD(v8) = *(_DWORD *)(a1 + 20);
  }
  int v32 = *(_DWORD *)(a1 + 16);
  int v33 = v8;
  int v34 = *(_DWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  unint64_t v36 = v38;
  unint64_t v37 = 0x800000000;
  unsigned int v9 = *(_DWORD *)(a1 + 104);
  if (v9 && &v30 != (unsigned char **)a1)
  {
    uint64_t v10 = *(const void **)(a1 + 96);
    if (v10 == (const void *)(a1 + 112))
    {
      if (v9 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v38, v10, 16 * *(unsigned int *)(a1 + 104));
      LODWORD(v37) = v9;
    }
    else
    {
      unint64_t v36 = *(void **)(a1 + 96);
      unint64_t v37 = __PAIR64__(*(_DWORD *)(a1 + 108), v9);
      *(void *)(a1 + 96) = a1 + 112;
      *(_DWORD *)(a1 + 108) = 0;
    }
    *(_DWORD *)(a1 + 104) = 0;
  }
  unsigned int v11 = v26;
  uint64_t v22 = v26;
  uint64_t v13 = *(unsigned char **)a2;
  uint64_t v12 = *(unsigned char **)(a2 + 8);
  if (v12 == *(unsigned char **)a2)
  {
    int v23 = v26;
    uint64_t v14 = *(unsigned int *)(a2 + 20);
    if (v14) {
      memmove(v26, v12, 8 * v14);
    }
    uint64_t v12 = v26;
  }
  else
  {
    int v23 = *(unsigned char **)(a2 + 8);
    *(void *)(a2 + 8) = v13;
    LODWORD(v14) = *(_DWORD *)(a2 + 20);
  }
  LODWORD(v24) = *(_DWORD *)(a2 + 16);
  HIDWORD(v24) = v14;
  int v25 = *(_DWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  int v27 = v29;
  unint64_t v28 = 0x800000000;
  unsigned int v15 = *(_DWORD *)(a2 + 104);
  if (v15)
  {
    if (&v22 == (unsigned char **)a2)
    {
      unsigned int v15 = 0;
    }
    else
    {
      int v16 = *(const void **)(a2 + 96);
      if (v16 == (const void *)(a2 + 112))
      {
        if (v15 >= 9) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(v29, v16, 16 * *(unsigned int *)(a2 + 104));
        LODWORD(v28) = v15;
        unsigned int v11 = v22;
        uint64_t v12 = v23;
      }
      else
      {
        int v27 = *(void **)(a2 + 96);
        unint64_t v28 = __PAIR64__(*(_DWORD *)(a2 + 108), v15);
        *(void *)(a2 + 96) = a2 + 112;
        *(_DWORD *)(a2 + 108) = 0;
      }
      *(_DWORD *)(a2 + 104) = 0;
    }
  }
  uint64_t v17 = (void *)(a3 + 32);
  *(void *)a3 = a3 + 32;
  if (v12 == v11)
  {
    *(void *)(a3 + 8) = v17;
    int v18 = HIDWORD(v24);
    if (HIDWORD(v24)) {
      memmove(v17, v11, 8 * HIDWORD(v24));
    }
  }
  else
  {
    *(void *)(a3 + 8) = v12;
    int v23 = v11;
    int v18 = HIDWORD(v24);
  }
  int v19 = v25;
  *(_DWORD *)(a3 + 16) = v24;
  *(_DWORD *)(a3 + 20) = v18;
  *(_DWORD *)(a3 + 24) = v19;
  uint64_t v24 = 8;
  *(void *)(a3 + 96) = a3 + 112;
  int v25 = 0;
  *(void *)(a3 + 104) = 0x800000000;
  unsigned int v20 = v27;
  if (v15 && &v22 != (unsigned char **)a3)
  {
    if (v27 == v29)
    {
      if (v15 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy((void *)(a3 + 112), v29, 16 * v15);
      *(_DWORD *)(a3 + 104) = v15;
      unsigned int v20 = v27;
    }
    else
    {
      *(void *)(a3 + 96) = v27;
      int v21 = HIDWORD(v28);
      *(_DWORD *)(a3 + 104) = v15;
      *(_DWORD *)(a3 + 108) = v21;
      int v27 = v29;
      HIDWORD(v28) = 0;
      unsigned int v20 = v29;
    }
    LODWORD(v28) = 0;
  }
  if (v20 != v29) {
    free(v20);
  }
  if (v23 != v22) {
    free(v23);
  }
  if (v36 != v38) {
    free(v36);
  }
  if (v31 != v30) {
    free(v31);
  }
}

uint64_t *sub_1CB93B848(uint64_t *result, uint64_t *a2, unsigned int *a3, uint64_t a4, char a5)
{
  unsigned int v11 = result;
  while (2)
  {
    uint64_t v12 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unsigned int v11 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          uint64_t v14 = a2 - v12;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v49 = *(a2 - 1);
                uint64_t v50 = *v12;
                uint64_t v51 = *a3;
                int64_t v52 = *(unsigned int *)(*(void *)(v49 + 32) + 32 * v51 + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v49 + 32) + 32 * v51 + 24) << 32);
                uint64_t v53 = *(void *)(*v12 + 32) + 32 * v51;
                if (v52 < (uint64_t)(*(unsigned int *)(v53 + 4) | ((unint64_t)*(unsigned int *)(v53 + 24) << 32)))
                {
                  *uint64_t v12 = v49;
                  *(a2 - 1) = v50;
                }
                break;
              case 3:
                unsigned int v54 = *a3;
                __n128 result = sub_1CB93C368(v12, v12 + 1, a2 - 1, v54);
                break;
              case 4:
                __n128 result = sub_1CB93C67C(v12, v12 + 1, v12 + 2, a2 - 1, a3);
                break;
              case 5:
                __n128 result = sub_1CB93C218(v12, v12 + 1, v12 + 2, v12 + 3, a2 - 1, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 191)
          {
            if (a5)
            {
              if (v12 != a2)
              {
                uint64_t v55 = v12 + 1;
                if (v12 + 1 != a2)
                {
                  uint64_t v56 = *a3;
                  uint64_t v57 = 8;
                  int v58 = v12;
                  do
                  {
                    uint64_t v60 = *v58;
                    uint64_t v59 = v58[1];
                    int v58 = v55;
                    if ((uint64_t)(*(unsigned int *)(*(void *)(v59 + 32) + 32 * v56 + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v59 + 32) + 32 * v56 + 24) << 32)) < (uint64_t)(*(unsigned int *)(*(void *)(v60 + 32) + 32 * v56 + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v60 + 32) + 32 * v56 + 24) << 32)))
                    {
                      uint64_t v61 = v57;
                      do
                      {
                        *(uint64_t *)((char *)v12 + v61) = v60;
                        uint64_t v62 = v61 - 8;
                        if (v61 == 8)
                        {
                          uint64_t v63 = v12;
                          goto LABEL_78;
                        }
                        uint64_t v60 = *(uint64_t *)((char *)v12 + v61 - 16);
                        v61 -= 8;
                      }
                      while ((uint64_t)(*(unsigned int *)(*(void *)(v59 + 32) + 32 * v56 + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v59 + 32) + 32 * v56 + 24) << 32)) < (uint64_t)(*(unsigned int *)(*(void *)(v60 + 32) + 32 * v56 + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v60 + 32) + 32 * v56 + 24) << 32)));
                      uint64_t v63 = (uint64_t *)((char *)v12 + v62);
LABEL_78:
                      *uint64_t v63 = v59;
                    }
                    uint64_t v55 = v58 + 1;
                    v57 += 8;
                  }
                  while (v58 + 1 != a2);
                }
              }
            }
            else if (v12 != a2)
            {
              uint64_t v98 = v12 + 1;
              if (v12 + 1 != a2)
              {
                uint64_t v99 = *a3;
                do
                {
                  uint64_t v101 = *v11;
                  uint64_t v100 = v11[1];
                  unsigned int v11 = v98;
                  if ((uint64_t)(*(unsigned int *)(*(void *)(v100 + 32) + 32 * v99 + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v100 + 32) + 32 * v99 + 24) << 32)) < (uint64_t)(*(unsigned int *)(*(void *)(v101 + 32) + 32 * v99 + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v101 + 32) + 32 * v99 + 24) << 32)))
                  {
                    do
                    {
                      uint64_t *v98 = v101;
                      uint64_t v101 = *(v98 - 2);
                      --v98;
                    }
                    while ((uint64_t)(*(unsigned int *)(*(void *)(v100 + 32) + 32 * v99 + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v100 + 32) + 32 * v99 + 24) << 32)) < (uint64_t)(*(unsigned int *)(*(void *)(v101 + 32) + 32 * v99 + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v101 + 32) + 32 * v99 + 24) << 32)));
                    uint64_t *v98 = v100;
                  }
                  uint64_t v98 = v11 + 1;
                }
                while (v11 + 1 != a2);
              }
            }
            return result;
          }
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v64 = (unint64_t)(v14 - 2) >> 1;
              uint64_t v65 = *a3;
              int64_t v66 = v64;
              do
              {
                int64_t v67 = v66;
                if (v64 >= v66)
                {
                  uint64_t v68 = (2 * v66) | 1;
                  int v69 = &v12[v68];
                  uint64_t v70 = *v69;
                  if (2 * v67 + 2 < v14
                    && (uint64_t)(*(unsigned int *)(*(void *)(v70 + 32) + 32 * v65 + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v70 + 32) + 32 * v65 + 24) << 32)) < (uint64_t)(*(unsigned int *)(*(void *)(v69[1] + 32) + 32 * v65 + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v69[1] + 32) + 32 * v65 + 24) << 32)))
                  {
                    uint64_t v70 = v69[1];
                    ++v69;
                    uint64_t v68 = 2 * v67 + 2;
                  }
                  int v71 = &v12[v67];
                  uint64_t v72 = *v71;
                  uint64_t v73 = *(void *)(*v71 + 32) + 32 * v65;
                  if ((uint64_t)(*(unsigned int *)(*(void *)(v70 + 32) + 32 * v65 + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v70 + 32) + 32 * v65 + 24) << 32)) >= (uint64_t)(*(unsigned int *)(v73 + 4) | ((unint64_t)*(unsigned int *)(v73 + 24) << 32)))
                  {
                    do
                    {
                      uint64_t v74 = v69;
                      *int v71 = v70;
                      if (v64 < v68) {
                        break;
                      }
                      uint64_t v75 = (2 * v68) | 1;
                      int v69 = &v12[v75];
                      uint64_t v76 = 2 * v68 + 2;
                      uint64_t v70 = *v69;
                      if (v76 < v14
                        && (uint64_t)(*(unsigned int *)(*(void *)(v70 + 32) + 32 * v65 + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v70 + 32) + 32 * v65 + 24) << 32)) < (uint64_t)(*(unsigned int *)(*(void *)(v69[1] + 32) + 32 * v65 + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v69[1] + 32) + 32 * v65 + 24) << 32)))
                      {
                        uint64_t v70 = v69[1];
                        ++v69;
                        uint64_t v75 = v76;
                      }
                      int v71 = v74;
                      uint64_t v68 = v75;
                    }
                    while ((uint64_t)(*(unsigned int *)(*(void *)(v70 + 32) + 32 * v65 + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v70 + 32) + 32 * v65 + 24) << 32)) >= (uint64_t)(*(unsigned int *)(*(void *)(v72 + 32) + 32 * v65 + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v72 + 32) + 32 * v65 + 24) << 32)));
                    *uint64_t v74 = v72;
                    uint64_t v65 = *a3;
                  }
                }
                int64_t v66 = v67 - 1;
              }
              while (v67);
              do
              {
                uint64_t v77 = 0;
                uint64_t v78 = *v12;
                uint64_t v79 = *a3;
                int v80 = v12;
                do
                {
                  uint64_t v81 = &v80[v77];
                  uint64_t v84 = v81[1];
                  uint64_t v82 = v81 + 1;
                  uint64_t v83 = v84;
                  __n128 result = (uint64_t *)(2 * v77);
                  uint64_t v85 = (2 * v77) | 1;
                  uint64_t v86 = 2 * v77 + 2;
                  if (v86 < v14)
                  {
                    __n128 result = v82 + 1;
                    if ((uint64_t)(*(unsigned int *)(*(void *)(v83 + 32) + 32 * v79 + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v83 + 32) + 32 * v79 + 24) << 32)) < (uint64_t)(*(unsigned int *)(*(void *)(v82[1] + 32) + 32 * v79 + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v82[1] + 32) + 32 * v79 + 24) << 32)))
                    {
                      uint64_t v83 = v82[1];
                      ++v82;
                      uint64_t v85 = v86;
                    }
                  }
                  *int v80 = v83;
                  int v80 = v82;
                  uint64_t v77 = v85;
                }
                while (v85 <= (uint64_t)((unint64_t)(v14 - 2) >> 1));
                if (v82 == --a2)
                {
                  uint64_t *v82 = v78;
                }
                else
                {
                  uint64_t *v82 = *a2;
                  *a2 = v78;
                  uint64_t v87 = (char *)v82 - (char *)v12 + 8;
                  if (v87 >= 9)
                  {
                    unint64_t v88 = (((unint64_t)v87 >> 3) - 2) >> 1;
                    unsigned int v89 = &v12[v88];
                    uint64_t v90 = *v89;
                    uint64_t v91 = *v82;
                    uint64_t v92 = *(void *)(*v89 + 32) + 32 * v65;
                    uint64_t v93 = *(void *)(*v82 + 32) + 32 * v65;
                    if ((uint64_t)(*(unsigned int *)(v92 + 4) | ((unint64_t)*(unsigned int *)(v92 + 24) << 32)) < (uint64_t)(*(unsigned int *)(v93 + 4) | ((unint64_t)*(unsigned int *)(v93 + 24) << 32)))
                    {
                      do
                      {
                        int v94 = v89;
                        uint64_t *v82 = v90;
                        if (!v88) {
                          break;
                        }
                        unint64_t v88 = (v88 - 1) >> 1;
                        unsigned int v89 = &v12[v88];
                        uint64_t v90 = *v89;
                        uint64_t v95 = *(void *)(*v89 + 32) + 32 * v65;
                        int64_t v96 = *(unsigned int *)(v95 + 4) | ((unint64_t)*(unsigned int *)(v95 + 24) << 32);
                        uint64_t v82 = v94;
                      }
                      while (v96 < (uint64_t)(*(unsigned int *)(*(void *)(v91 + 32) + 32 * v65 + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v91 + 32) + 32 * v65 + 24) << 32)));
                      *int v94 = v91;
                    }
                  }
                }
              }
              while (v14-- > 2);
            }
            return result;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          int v16 = &v12[(unint64_t)v14 >> 1];
          unsigned int v17 = *a3;
          if ((unint64_t)v13 >= 0x401)
          {
            sub_1CB93C368(v11, &v11[(unint64_t)v14 >> 1], a2 - 1, v17);
            sub_1CB93C368(v11 + 1, v16 - 1, a2 - 2, *a3);
            sub_1CB93C368(v11 + 2, &v11[v15 + 1], a2 - 3, *a3);
            __n128 result = sub_1CB93C368(v16 - 1, v16, &v11[v15 + 1], *a3);
            uint64_t v18 = *v11;
            *unsigned int v11 = *v16;
            uint64_t *v16 = v18;
          }
          else
          {
            __n128 result = sub_1CB93C368(&v11[(unint64_t)v14 >> 1], v11, a2 - 1, v17);
          }
          --a4;
          uint64_t v19 = *v11;
          uint64_t v20 = *a3;
          if (a5) {
            break;
          }
          uint64_t v22 = *(void *)(*(v11 - 1) + 32) + 32 * v20;
          int64_t v23 = *(unsigned int *)(v22 + 4) | ((unint64_t)*(unsigned int *)(v22 + 24) << 32);
          int64_t v21 = *(unsigned int *)(*(void *)(v19 + 32) + 32 * v20 + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v19 + 32) + 32 * v20 + 24) << 32);
          if (v23 < v21) {
            goto LABEL_13;
          }
          uint64_t v37 = *(void *)(*(a2 - 1) + 32) + 32 * v20;
          if (v21 >= (uint64_t)(*(unsigned int *)(v37 + 4) | ((unint64_t)*(unsigned int *)(v37 + 24) << 32)))
          {
            int v39 = v11 + 1;
            do
            {
              uint64_t v12 = v39;
              if (v39 >= a2) {
                break;
              }
              ++v39;
              uint64_t v40 = *(void *)(*v12 + 32) + 32 * v20;
            }
            while (v21 >= (uint64_t)(*(unsigned int *)(v40 + 4) | ((unint64_t)*(unsigned int *)(v40 + 24) << 32)));
          }
          else
          {
            uint64_t v12 = v11;
            do
            {
              uint64_t v38 = v12[1];
              ++v12;
            }
            while (v21 >= (uint64_t)(*(unsigned int *)(*(void *)(v38 + 32) + 32 * v20 + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v38 + 32) + 32 * v20 + 24) << 32)));
          }
          int v41 = a2;
          if (v12 < a2)
          {
            int v41 = a2;
            do
              uint64_t v42 = *--v41;
            while (v21 < (uint64_t)(*(unsigned int *)(*(void *)(v42 + 32) + 32 * v20 + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v42 + 32) + 32 * v20 + 24) << 32)));
          }
          if (v12 < v41)
          {
            uint64_t v43 = *v12;
            uint64_t v44 = *v41;
            do
            {
              *uint64_t v12 = v44;
              *int v41 = v43;
              int64_t v45 = *(unsigned int *)(*(void *)(v19 + 32) + 32 * v20 + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v19 + 32) + 32 * v20 + 24) << 32);
              do
              {
                uint64_t v46 = v12[1];
                ++v12;
                uint64_t v43 = v46;
              }
              while (v45 >= (uint64_t)(*(unsigned int *)(*(void *)(v46 + 32) + 32 * v20 + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v46 + 32) + 32 * v20 + 24) << 32)));
              do
              {
                uint64_t v47 = *--v41;
                uint64_t v44 = v47;
              }
              while (v45 < (uint64_t)(*(unsigned int *)(*(void *)(v47 + 32) + 32 * v20 + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v47 + 32) + 32 * v20 + 24) << 32)));
            }
            while (v12 < v41);
          }
          int v48 = v12 - 1;
          BOOL v5 = v12 - 1 >= v11;
          BOOL v6 = v12 - 1 == v11;
          if (v12 - 1 != v11) {
            *unsigned int v11 = *v48;
          }
          a5 = 0;
          *int v48 = v19;
        }
        int64_t v21 = *(unsigned int *)(*(void *)(v19 + 32) + 32 * v20 + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v19 + 32) + 32 * v20 + 24) << 32);
LABEL_13:
        uint64_t v24 = 0;
        do
          uint64_t v25 = v11[++v24];
        while ((uint64_t)(*(unsigned int *)(*(void *)(v25 + 32) + 32 * v20 + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v25 + 32) + 32 * v20 + 24) << 32)) < v21);
        unsigned int v26 = &v11[v24];
        int v27 = a2;
        if (v24 == 1)
        {
          int v27 = a2;
          do
          {
            if (v26 >= v27) {
              break;
            }
            uint64_t v29 = *--v27;
          }
          while ((uint64_t)(*(unsigned int *)(*(void *)(v29 + 32) + 32 * v20 + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v29 + 32) + 32 * v20 + 24) << 32)) >= v21);
        }
        else
        {
          do
            uint64_t v28 = *--v27;
          while ((uint64_t)(*(unsigned int *)(*(void *)(v28 + 32) + 32 * v20 + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v28 + 32) + 32 * v20 + 24) << 32)) >= v21);
        }
        if (v26 >= v27)
        {
          uint64_t v12 = &v11[v24];
        }
        else
        {
          uint64_t v30 = *v27;
          uint64_t v12 = &v11[v24];
          int v31 = v27;
          do
          {
            *uint64_t v12 = v30;
            *int v31 = v25;
            int64_t v32 = *(unsigned int *)(*(void *)(v19 + 32) + 32 * v20 + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v19 + 32) + 32 * v20 + 24) << 32);
            do
            {
              uint64_t v33 = v12[1];
              ++v12;
              uint64_t v25 = v33;
            }
            while ((uint64_t)(*(unsigned int *)(*(void *)(v33 + 32) + 32 * v20 + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v33 + 32) + 32 * v20 + 24) << 32)) < v32);
            do
            {
              uint64_t v34 = *--v31;
              uint64_t v30 = v34;
            }
            while ((uint64_t)(*(unsigned int *)(*(void *)(v34 + 32) + 32 * v20 + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v34 + 32) + 32 * v20 + 24) << 32)) >= v32);
          }
          while (v12 < v31);
        }
        uint64_t v35 = v12 - 1;
        if (v12 - 1 != v11) {
          *unsigned int v11 = *v35;
        }
        *uint64_t v35 = v19;
        if (v26 >= v27) {
          break;
        }
LABEL_34:
        __n128 result = (uint64_t *)sub_1CB93B848(v11, v12 - 1, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v36 = sub_1CB93C468(v11, v12 - 1, a3);
      __n128 result = (uint64_t *)sub_1CB93C468(v12, a2, a3);
      if (result) {
        break;
      }
      if (!v36) {
        goto LABEL_34;
      }
    }
    a2 = v12 - 1;
    if (!v36) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_1CB93C218(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, unsigned int *a6)
{
  __n128 result = sub_1CB93C67C(a1, a2, a3, a4, a6);
  uint64_t v13 = *a4;
  uint64_t v14 = *a6;
  uint64_t v15 = *(void *)(*a5 + 32) + 32 * v14;
  uint64_t v16 = *(void *)(*a4 + 32) + 32 * v14;
  if ((uint64_t)(*(unsigned int *)(v15 + 4) | ((unint64_t)*(unsigned int *)(v15 + 24) << 32)) < (uint64_t)(*(unsigned int *)(v16 + 4) | ((unint64_t)*(unsigned int *)(v16 + 24) << 32)))
  {
    *a4 = *a5;
    *a5 = v13;
    uint64_t v17 = *a3;
    uint64_t v18 = *(void *)(*a4 + 32) + 32 * v14;
    uint64_t v19 = *(void *)(*a3 + 32) + 32 * v14;
    if ((uint64_t)(*(unsigned int *)(v18 + 4) | ((unint64_t)*(unsigned int *)(v18 + 24) << 32)) < (uint64_t)(*(unsigned int *)(v19 + 4) | ((unint64_t)*(unsigned int *)(v19 + 24) << 32)))
    {
      *a3 = *a4;
      *a4 = v17;
      uint64_t v20 = *a2;
      uint64_t v21 = *(void *)(*a3 + 32) + 32 * v14;
      uint64_t v22 = *(void *)(*a2 + 32) + 32 * v14;
      if ((uint64_t)(*(unsigned int *)(v21 + 4) | ((unint64_t)*(unsigned int *)(v21 + 24) << 32)) < (uint64_t)(*(unsigned int *)(v22 + 4) | ((unint64_t)*(unsigned int *)(v22 + 24) << 32)))
      {
        *a2 = *a3;
        *a3 = v20;
        uint64_t v23 = *a1;
        uint64_t v24 = *(void *)(*a2 + 32) + 32 * v14;
        uint64_t v25 = *(void *)(*a1 + 32) + 32 * v14;
        if ((uint64_t)(*(unsigned int *)(v24 + 4) | ((unint64_t)*(unsigned int *)(v24 + 24) << 32)) < (uint64_t)(*(unsigned int *)(v25 + 4) | ((unint64_t)*(unsigned int *)(v25 + 24) << 32)))
        {
          *a1 = *a2;
          *a2 = v23;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1CB93C368(uint64_t *result, uint64_t *a2, uint64_t *a3, unsigned int a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *result;
  uint64_t v6 = *(void *)(*a2 + 32) + 32 * a4;
  int64_t v7 = *(unsigned int *)(v6 + 4) | ((unint64_t)*(unsigned int *)(v6 + 24) << 32);
  uint64_t v8 = *(void *)(*result + 32) + 32 * a4;
  int64_t v9 = *(unsigned int *)(v8 + 4) | ((unint64_t)*(unsigned int *)(v8 + 24) << 32);
  uint64_t v10 = *a3;
  uint64_t v11 = *(void *)(*a3 + 32) + 32 * a4;
  int64_t v12 = *(unsigned int *)(v11 + 4) | ((unint64_t)*(unsigned int *)(v11 + 24) << 32);
  if (v7 >= v9)
  {
    if (v12 < v7)
    {
      *a2 = v10;
      *a3 = v4;
      uint64_t v13 = *result;
      uint64_t v14 = *(void *)(*a2 + 32) + 32 * a4;
      uint64_t v15 = *(void *)(*result + 32) + 32 * a4;
      if ((uint64_t)(*(unsigned int *)(v14 + 4) | ((unint64_t)*(unsigned int *)(v14 + 24) << 32)) < (uint64_t)(*(unsigned int *)(v15 + 4) | ((unint64_t)*(unsigned int *)(v15 + 24) << 32)))
      {
        *__n128 result = *a2;
        *a2 = v13;
      }
    }
  }
  else
  {
    if (v12 >= v7)
    {
      *__n128 result = v4;
      *a2 = v5;
      uint64_t v16 = *(void *)(*a3 + 32) + 32 * a4;
      if ((uint64_t)(*(unsigned int *)(v16 + 4) | ((unint64_t)*(unsigned int *)(v16 + 24) << 32)) >= (uint64_t)(*(unsigned int *)(*(void *)(v5 + 32) + 32 * a4 + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v5 + 32) + 32 * a4 + 24) << 32))) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *__n128 result = v10;
    }
    *a3 = v5;
  }
  return result;
}

BOOL sub_1CB93C468(uint64_t *a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      uint64_t v10 = *a3;
      int64_t v11 = *(unsigned int *)(*(void *)(v8 + 32) + 32 * v10 + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v8 + 32) + 32 * v10 + 24) << 32);
      uint64_t v12 = *(void *)(*a1 + 32) + 32 * v10;
      if (v11 < (uint64_t)(*(unsigned int *)(v12 + 4) | ((unint64_t)*(unsigned int *)(v12 + 24) << 32)))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      sub_1CB93C368(a1, a1 + 1, a2 - 1, *a3);
      return 1;
    case 4:
      sub_1CB93C67C(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1CB93C218(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v13 = a1 + 2;
      sub_1CB93C368(a1, a1 + 1, a1 + 2, *a3);
      uint64_t v14 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v15 = 0;
      uint64_t v16 = *a3;
      uint64_t v17 = 24;
      break;
  }
  while (1)
  {
    uint64_t v18 = *v14;
    uint64_t v19 = *v13;
    uint64_t v20 = *(void *)(*v14 + 32) + 32 * v16;
    uint64_t v21 = *(void *)(*v13 + 32) + 32 * v16;
    if ((uint64_t)(*(unsigned int *)(v20 + 4) | ((unint64_t)*(unsigned int *)(v20 + 24) << 32)) < (uint64_t)(*(unsigned int *)(v21 + 4) | ((unint64_t)*(unsigned int *)(v21 + 24) << 32)))
    {
      uint64_t v22 = v17;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v22) = v19;
        uint64_t v23 = v22 - 8;
        if (v22 == 8) {
          break;
        }
        uint64_t v19 = *(uint64_t *)((char *)a1 + v22 - 16);
        v22 -= 8;
        if ((uint64_t)(*(unsigned int *)(*(void *)(v18 + 32) + 32 * v16 + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v18 + 32) + 32 * v16 + 24) << 32)) >= (uint64_t)(*(unsigned int *)(*(void *)(v19 + 32) + 32 * v16 + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v19 + 32) + 32 * v16 + 24) << 32)))
        {
          uint64_t v24 = (uint64_t *)((char *)a1 + v23);
          goto LABEL_12;
        }
      }
      uint64_t v24 = a1;
LABEL_12:
      uint64_t *v24 = v18;
      if (++v15 == 8) {
        return v14 + 1 == a2;
      }
    }
    uint64_t v13 = v14;
    v17 += 8;
    if (++v14 == a2) {
      return 1;
    }
  }
}

uint64_t *sub_1CB93C67C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, unsigned int *a5)
{
  BOOL result = sub_1CB93C368(a1, a2, a3, *a5);
  uint64_t v11 = *a3;
  uint64_t v12 = *a5;
  uint64_t v13 = *(void *)(*a4 + 32) + 32 * v12;
  uint64_t v14 = *(void *)(*a3 + 32) + 32 * v12;
  if ((uint64_t)(*(unsigned int *)(v13 + 4) | ((unint64_t)*(unsigned int *)(v13 + 24) << 32)) < (uint64_t)(*(unsigned int *)(v14 + 4) | ((unint64_t)*(unsigned int *)(v14 + 24) << 32)))
  {
    *a3 = *a4;
    *a4 = v11;
    uint64_t v15 = *a2;
    uint64_t v16 = *(void *)(*a3 + 32) + 32 * v12;
    uint64_t v17 = *(void *)(*a2 + 32) + 32 * v12;
    if ((uint64_t)(*(unsigned int *)(v16 + 4) | ((unint64_t)*(unsigned int *)(v16 + 24) << 32)) < (uint64_t)(*(unsigned int *)(v17 + 4) | ((unint64_t)*(unsigned int *)(v17 + 24) << 32)))
    {
      *a2 = *a3;
      *a3 = v15;
      uint64_t v18 = *a1;
      uint64_t v19 = *(void *)(*a2 + 32) + 32 * v12;
      uint64_t v20 = *(void *)(*a1 + 32) + 32 * v12;
      if ((uint64_t)(*(unsigned int *)(v19 + 4) | ((unint64_t)*(unsigned int *)(v19 + 24) << 32)) < (uint64_t)(*(unsigned int *)(v20 + 4) | ((unint64_t)*(unsigned int *)(v20 + 24) << 32)))
      {
        *a1 = *a2;
        *a2 = v18;
      }
    }
  }
  return result;
}

void sub_1CB93C788(uint64_t a1)
{
  *(void *)a1 = &unk_1F25EEF30;
  free(*(void **)(a1 + 416));
  uint64_t v2 = *(void **)(a1 + 272);
  if (v2 != (void *)(a1 + 288)) {
    free(v2);
  }
  *(void *)a1 = &unk_1F260E110;
  uint64_t v3 = *(void **)(a1 + 176);
  if (v3 != (void *)(a1 + 192)) {
    free(v3);
  }
  uint64_t v4 = *(void **)(a1 + 104);
  if (v4 != (void *)(a1 + 120)) {
    free(v4);
  }
  uint64_t v5 = *(void **)(a1 + 32);
  if (v5 != (void *)(a1 + 48)) {
    free(v5);
  }

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1CB93C858(uint64_t a1)
{
  *(void *)a1 = &unk_1F25EEF30;
  free(*(void **)(a1 + 416));
  uint64_t v2 = *(void **)(a1 + 272);
  if (v2 != (void *)(a1 + 288)) {
    free(v2);
  }
  *(void *)a1 = &unk_1F260E110;
  uint64_t v3 = *(void **)(a1 + 176);
  if (v3 != (void *)(a1 + 192)) {
    free(v3);
  }
  uint64_t v4 = *(void **)(a1 + 104);
  if (v4 != (void *)(a1 + 120)) {
    free(v4);
  }
  uint64_t v5 = *(void **)(a1 + 32);
  if (v5 != (void *)(a1 + 48)) {
    free(v5);
  }
  llvm::Pass::~Pass((llvm::Pass *)a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CB93C93C()
{
  return "AGX2 constant merger pass";
}

void sub_1CB93C94C(uint64_t a1, uint64_t a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v3);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
}

uint64_t sub_1CB93C9A8(uint64_t a1, uint64_t a2)
{
  v228[8] = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 248) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
  *(void *)(a1 + 256) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
  *(void *)(a1 + 264) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 280) = 0;
  if ((*(_DWORD *)(a1 + 424) - 512) >= 0x604)
  {
    free(*(void **)(a1 + 416));
    uint64_t v4 = malloc_type_calloc(0x200uLL, 2uLL, 0x6D9A4F0CuLL);
    if (!v4) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    *(void *)(a1 + 416) = v4;
    *(_DWORD *)(a1 + 424) = 512;
  }
  uint64_t v5 = *(void **)(a2 + 328);
  BOOL v209 = (void *)(a2 + 320);
  if (v5 == (void *)(a2 + 320))
  {
    LOBYTE(v210) = 0;
    return v210 & 1;
  }
  int v210 = 0;
  BOOL v219 = (uint64_t *)(a1 + 272);
  uint64_t v207 = *(void *)(a2 + 16);
  uint64_t v208 = a2;
  do
  {
    uint64_t v225 = 0;
    char v226 = (llvm::MachineInstr **)v228;
    uint64_t v227 = 0x800000000;
    unsigned int v224 = 0;
    uint64_t v6 = v5 + 6;
    uint64_t v7 = v5[7];
    BOOL v211 = v5;
    int v215 = v5 + 6;
    if ((void *)v7 == v5 + 6)
    {
      int v9 = 0;
      goto LABEL_88;
    }
    unsigned int v8 = 0;
    int v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    do
    {
      if (!v7 || (uint64_t v12 = v7, (*(unsigned char *)v7 & 4) == 0))
      {
        uint64_t v12 = v7;
        if ((*(_WORD *)(v7 + 44) & 8) != 0)
        {
          uint64_t v12 = v7;
          do
            uint64_t v12 = *(void *)(v12 + 8);
          while ((*(_WORD *)(v12 + 44) & 8) != 0);
        }
      }
      uint64_t v13 = *(void *)(v12 + 8);
      unsigned __int16 v14 = **(_WORD **)(v7 + 16) - 4066;
      if (v14 > 7u || ((0xC3u >> v14) & 1) == 0)
      {
        uint64_t v15 = v10;
        goto LABEL_16;
      }
      uint64_t v16 = *(void **)(a1 + 264);
      uint64_t v17 = *(void *)(v7 + 32);
      uint64_t v18 = *(unsigned int *)(v17 + 4);
      if ((v18 & 0x80000000) != 0) {
        uint64_t v19 = (uint64_t *)(v16[3] + 16 * (v18 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v19 = (uint64_t *)(v16[34] + 8 * v18);
      }
      uint64_t v20 = qword_1CD96EDF0[(__int16)v14];
      uint64_t v21 = *v19;
      if (v21)
      {
        while ((*(unsigned char *)(v21 + 3) & 1) != 0)
        {
          uint64_t v21 = *(void *)(v21 + 24);
          if (!v21) {
            goto LABEL_24;
          }
        }
        uint64_t v25 = v16[3];
        uint64_t v15 = (*(void *)(v25 + 16 * (*(_DWORD *)(v21 + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == (void)&off_1E66A9B18;
        if (v11) {
          BOOL v26 = (*(void *)(v25 + 16 * (*(_DWORD *)(v21 + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == (void)&off_1E66A9B18;
        }
        else {
          BOOL v26 = 0;
        }
        if (v26 & v10)
        {
LABEL_32:
          uint64_t v15 = 1;
LABEL_47:
          uint64_t v6 = v215;
          goto LABEL_16;
        }
LABEL_33:
        int v27 = *(unsigned __int16 **)(*(void *)(v21 + 8) + 16);
        if ((v27[8] & 2) != 0
          || ((unsigned int v28 = *v27, v29 = v28 > 0x13, v30 = (1 << v28) & 0xC0200, !v29) ? (v31 = v30 == 0) : (v31 = 1), !v31))
        {
          uint64_t v15 = v10;
          goto LABEL_47;
        }
        while (1)
        {
          uint64_t v21 = *(void *)(v21 + 24);
          if (!v21) {
            break;
          }
          if ((*(unsigned char *)(v21 + 3) & 1) == 0)
          {
            if (v11) {
              BOOL v32 = (*(void *)(v25 + 16 * (*(_DWORD *)(v21 + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == (void)&off_1E66A9B18;
            }
            else {
              BOOL v32 = 0;
            }
            uint64_t v15 = ((*(void *)(v25 + 16 * (*(_DWORD *)(v21 + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == (void)&off_1E66A9B18) | v15;
            if ((v32 & v10 & 1) == 0) {
              goto LABEL_33;
            }
            goto LABEL_32;
          }
        }
      }
      else
      {
LABEL_24:
        uint64_t v15 = 0;
      }
      if (!v11)
      {
        unsigned int v224 = (unsigned __int8 *)v7;
        uint64_t v11 = v7;
        goto LABEL_47;
      }
      uint64_t v213 = v13;
      uint64_t v225 = v7;
      uint64_t v220 = 0x200000001;
      int v22 = *(unsigned __int16 *)(*(void *)(v11 + 32) + 80);
      int v23 = *(unsigned __int16 *)(v17 + 80);
      uint64_t v216 = v11;
      if (v15)
      {
        uint64_t v220 = 0x100000002;
        int v24 = v22;
      }
      else
      {
        int v24 = *(unsigned __int16 *)(v17 + 80);
        int v23 = *(unsigned __int16 *)(*(void *)(v11 + 32) + 80);
      }
      unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister((uint64_t)v16, "", 0);
      *(void *)(v16[3] + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E66AB080;
      uint64_t v34 = v16[1];
      if (v34) {
        (*(void (**)(uint64_t, void))(*(void *)v34 + 24))(v34, IncompleteVirtualRegister);
      }
      uint64_t v35 = v23 | (v24 << 16);
      BOOL v36 = sub_1CB84B030(*(void *)(v216 + 24), v216, (unsigned __int8 **)(v216 + 56), *(void *)(*(void *)(a1 + 248) + 8) + 48 * v20, IncompleteVirtualRegister);
      uint64_t v38 = v37;
      char v39 = 1;
      LODWORD(v221) = 1;
      *((void *)&v221 + 1) = 0;
      uint64_t v222 = 0;
      llvm::MachineInstr::addOperand(v37, v36, (const llvm::MachineOperand *)&v221);
      LODWORD(v221) = 1;
      *((void *)&v221 + 1) = 0;
      uint64_t v222 = v35;
      llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v221);
      uint64_t v40 = 0;
      do
      {
        char v41 = v39;
        uint64_t v42 = (&v224)[v40];
        uint64_t v43 = *(unsigned int *)(*((void *)v42 + 4) + 4);
        uint64_t v44 = *(void *)(a1 + 264);
        uint64_t v45 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v44, "", 0);
        *(void *)(*(void *)(v44 + 24) + 16 * (v45 & 0x7FFFFFFF)) = &off_1E66AB048;
        uint64_t v46 = *(void *)(v44 + 8);
        if (v46) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v46 + 24))(v46, v45);
        }
        uint64_t v47 = sub_1CB84B030(*((void *)v42 + 3), (uint64_t)v42, (unsigned __int8 **)v42 + 7, *(void *)(*(void *)(a1 + 248) + 8) + 912, v45);
        __int16 v48 = *((_DWORD *)&v220 + v40);
        *((void *)&v221 + 1) = 0;
        uint64_t v222 = 0;
        uint64_t v223 = 0;
        LODWORD(v221) = (v48 & 0xFFF) << 8;
        DWORD1(v221) = IncompleteVirtualRegister;
        llvm::MachineInstr::addOperand(v49, v47, (const llvm::MachineOperand *)&v221);
        *(void *)&long long v221 = &v222;
        *((void *)&v221 + 1) = 0x800000000;
        uint64_t v50 = *(void *)(a1 + 264);
        if ((v43 & 0x80000000) != 0) {
          uint64_t v51 = (uint64_t *)(*(void *)(v50 + 24) + 16 * (v43 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v51 = (uint64_t *)(*(void *)(v50 + 272) + 8 * v43);
        }
        uint64_t v52 = *v51;
        if (*v51)
        {
          while ((*(unsigned char *)(v52 + 3) & 1) != 0)
          {
            uint64_t v52 = *(void *)(v52 + 24);
            if (!v52) {
              goto LABEL_74;
            }
          }
          LODWORD(v53) = 0;
          unsigned int v54 = 8;
LABEL_62:
          if (v53 >= v54) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(v221 + 8 * v53) = v52;
          uint64_t v53 = ++DWORD2(v221);
          while (1)
          {
            uint64_t v52 = *(void *)(v52 + 24);
            if (!v52) {
              break;
            }
            if ((*(unsigned char *)(v52 + 3) & 1) == 0)
            {
              unsigned int v54 = HIDWORD(v221);
              goto LABEL_62;
            }
          }
          uint64_t v55 = (uint64_t *)v221;
          if (v53)
          {
            uint64_t v56 = 8 * v53;
            do
            {
              uint64_t v57 = *v55++;
              llvm::MachineOperand::setReg(v57, v45);
              v56 -= 8;
            }
            while (v56);
            uint64_t v55 = (uint64_t *)v221;
          }
          if (v55 != &v222) {
            free(v55);
          }
        }
LABEL_74:
        char v39 = 0;
        uint64_t v40 = 1;
      }
      while ((v41 & 1) != 0);
      uint64_t v5 = v211;
      uint64_t v6 = v215;
      if (v227 >= (unint64_t)HIDWORD(v227)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v13 = v213;
      v226[v227] = (llvm::MachineInstr *)v216;
      unsigned int v58 = v227 + 1;
      LODWORD(v227) = v58;
      if (v58 >= HIDWORD(v227)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v11 = 0;
      uint64_t v15 = 0;
      v226[v58] = (llvm::MachineInstr *)v7;
      unsigned int v8 = v227 + 1;
      LODWORD(v227) = v227 + 1;
      unsigned int v224 = 0;
      uint64_t v225 = 0;
      int v9 = 1;
LABEL_16:
      uint64_t v10 = v15;
      uint64_t v7 = v13;
    }
    while ((unint64_t *)v13 != v6);
    uint64_t v59 = v226;
    if (v8)
    {
      uint64_t v60 = 8 * v8;
      do
      {
        uint64_t v61 = *v59++;
        llvm::MachineInstr::eraseFromParent(v61);
        v60 -= 8;
      }
      while (v60);
      uint64_t v59 = v226;
    }
    if (v59 != v228) {
      free(v59);
    }
LABEL_88:
    v210 |= v9;
    int v62 = *(unsigned __int8 *)(v207 + 318);
    if ((*(_WORD *)(*(void *)v208 + 18) & 0x3FF0) != 0x640)
    {
      if (!*(unsigned char *)(v207 + 318)) {
        goto LABEL_333;
      }
      char v226 = (llvm::MachineInstr **)v228;
      uint64_t v227 = 0x800000000;
      *(_DWORD *)(a1 + 280) = 0;
      uint64_t v147 = v5[7];
      if ((unint64_t *)v147 == v6)
      {
        int v148 = 0;
LABEL_331:
        int v200 = v210 | v148;
        goto LABEL_332;
      }
      int v148 = 0;
      while (1)
      {
        if (!v147 || (uint64_t v149 = v147, (*(unsigned char *)v147 & 4) == 0))
        {
          uint64_t v149 = v147;
          if ((*(_WORD *)(v147 + 44) & 8) != 0)
          {
            uint64_t v149 = v147;
            do
              uint64_t v149 = *(void *)(v149 + 8);
            while ((*(_WORD *)(v149 + 44) & 8) != 0);
          }
        }
        uint64_t v150 = *(void *)(v149 + 8);
        if (**(_WORD **)(v147 + 16) == 4580)
        {
          uint64_t v151 = *(void *)(v147 + 32);
          uint64_t v152 = *(void **)(a1 + 264);
          uint64_t v153 = *(unsigned int *)(v151 + 4);
          if ((v153 & 0x80000000) != 0) {
            int v154 = (uint64_t *)(v152[3] + 16 * (v153 & 0x7FFFFFFF) + 8);
          }
          else {
            int v154 = (uint64_t *)(v152[34] + 8 * v153);
          }
          uint64_t v155 = *(unsigned int *)(v151 + 68);
          uint64_t v156 = *v154;
          if (*v154)
          {
            while ((*(unsigned char *)(v156 + 3) & 1) != 0)
            {
              uint64_t v156 = *(void *)(v156 + 24);
              if (!v156) {
                goto LABEL_256;
              }
            }
LABEL_261:
            if ((_UNKNOWN ***)(*(void *)(v152[3] + 16 * (*(_DWORD *)(v156 + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == &off_1E66A9B18
              && (v155 & 1) != 0)
            {
              goto LABEL_276;
            }
            unsigned int v162 = **(unsigned __int16 **)(*(void *)(v156 + 8) + 16);
            BOOL v29 = v162 > 0x13;
            int v163 = (1 << v162) & 0xC0200;
            if (!v29 && v163 != 0) {
              goto LABEL_276;
            }
            while (1)
            {
              uint64_t v156 = *(void *)(v156 + 24);
              if (!v156) {
                break;
              }
              if ((*(unsigned char *)(v156 + 3) & 1) == 0) {
                goto LABEL_261;
              }
            }
          }
LABEL_256:
          unsigned int v157 = *(unsigned __int16 *)(*(void *)(a1 + 416) + 2 * (v155 ^ 1));
          uint64_t v158 = *(unsigned int *)(a1 + 280);
          if (v158 <= v157) {
            goto LABEL_275;
          }
          uint64_t v159 = *(void *)(a1 + 272);
          while (1)
          {
            unsigned int v160 = v157;
            if (*(_DWORD *)(v159 + 16 * v157) == (v155 ^ 1)) {
              break;
            }
            v157 += 0x10000;
            if (v160 + 0x10000 >= v158) {
              goto LABEL_275;
            }
          }
          if (v158 == v157)
          {
LABEL_275:
            LODWORD(v221) = v155;
            *((void *)&v221 + 1) = v147;
            sub_1CB93E0B4(v219, (unsigned int *)&v221);
          }
          else
          {
            uint64_t v165 = v159 + 16 * v157;
            uint64_t v166 = *(void *)(v165 + 8);
            unsigned int v224 = (unsigned __int8 *)v166;
            uint64_t v225 = v147;
            int v167 = (_OWORD *)(v159 + 16 * v158 - 16);
            if (v167 != (_OWORD *)v165)
            {
              *(_OWORD *)uint64_t v165 = *v167;
              uint64_t v168 = *(unsigned int *)(a1 + 280);
              *(_WORD *)(*(void *)(a1 + 416) + 2 * *(unsigned int *)(*(void *)(a1 + 272) + 16 * v168 - 16)) = (v165 - *(void *)(a1 + 272)) >> 4;
              uint64_t v152 = *(void **)(a1 + 264);
              LODWORD(v158) = v168;
            }
            *(_DWORD *)(a1 + 280) = v158 - 1;
            unsigned int v169 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister((uint64_t)v152, "", 0);
            *(void *)(v152[3] + 16 * (v169 & 0x7FFFFFFF)) = &off_1E66AB080;
            uint64_t v170 = v152[1];
            if (v170) {
              (*(void (**)(uint64_t, void))(*(void *)v170 + 24))(v170, v169);
            }
            uint64_t v171 = sub_1CB84B030(*(void *)(v166 + 24), v166, (unsigned __int8 **)(v166 + 56), *(void *)(*(void *)(a1 + 248) + 8) + 219744, v169);
            unsigned int v173 = v172;
            LODWORD(v221) = 1;
            *((void *)&v221 + 1) = 0;
            uint64_t v222 = 0;
            llvm::MachineInstr::addOperand(v172, v171, (const llvm::MachineOperand *)&v221);
            HIDWORD(v221) = 0;
            LODWORD(v222) = 64;
            LODWORD(v223) = 0;
            LODWORD(v221) = 519;
            *(void *)((char *)&v221 + 4) = v155 & 0xFFFFFFFE;
            llvm::MachineInstr::addOperand(v173, v171, (const llvm::MachineOperand *)&v221);
            if (v155)
            {
              uint64_t v218 = v147;
              uint64_t v147 = v166;
            }
            else
            {
              unsigned int v224 = (unsigned __int8 *)v147;
              uint64_t v225 = v166;
              uint64_t v218 = v166;
            }
            uint64_t v174 = 0;
            char v175 = 1;
            do
            {
              char v176 = v175;
              uint64_t v177 = (&v224)[v174];
              uint64_t v178 = *(unsigned int *)(*((void *)v177 + 4) + 4);
              uint64_t v179 = *(void *)(a1 + 264);
              uint64_t v180 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v179, "", 0);
              *(void *)(*(void *)(v179 + 24) + 16 * (v180 & 0x7FFFFFFF)) = &off_1E66AB048;
              uint64_t v181 = *(void *)(v179 + 8);
              if (v181) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v181 + 24))(v181, v180);
              }
              uint64_t v183 = sub_1CB84B030(*((void *)v177 + 3), (uint64_t)v177, (unsigned __int8 **)v177 + 7, *(void *)(*(void *)(a1 + 248) + 8) + 912, v180);
              *((void *)&v221 + 1) = 0;
              if (v176) {
                int v184 = 256;
              }
              else {
                int v184 = 512;
              }
              uint64_t v222 = 0;
              uint64_t v223 = 0;
              *(void *)&long long v221 = __PAIR64__(v169, v184);
              llvm::MachineInstr::addOperand(v182, v183, (const llvm::MachineOperand *)&v221);
              *(void *)&long long v221 = &v222;
              *((void *)&v221 + 1) = 0x800000000;
              uint64_t v185 = *(void *)(a1 + 264);
              if ((v178 & 0x80000000) != 0) {
                BOOL v186 = (uint64_t *)(*(void *)(v185 + 24) + 16 * (v178 & 0x7FFFFFFF) + 8);
              }
              else {
                BOOL v186 = (uint64_t *)(*(void *)(v185 + 272) + 8 * v178);
              }
              uint64_t v187 = *v186;
              if (*v186)
              {
                while ((*(unsigned char *)(v187 + 3) & 1) != 0)
                {
                  uint64_t v187 = *(void *)(v187 + 24);
                  if (!v187) {
                    goto LABEL_311;
                  }
                }
                LODWORD(v188) = 0;
                unsigned int v189 = 8;
LABEL_299:
                if (v188 >= v189) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(v221 + 8 * v188) = v187;
                uint64_t v188 = ++DWORD2(v221);
                while (1)
                {
                  uint64_t v187 = *(void *)(v187 + 24);
                  if (!v187) {
                    break;
                  }
                  if ((*(unsigned char *)(v187 + 3) & 1) == 0)
                  {
                    unsigned int v189 = HIDWORD(v221);
                    goto LABEL_299;
                  }
                }
                uint64_t v190 = (uint64_t *)v221;
                if (v188)
                {
                  uint64_t v191 = 8 * v188;
                  do
                  {
                    uint64_t v192 = *v190++;
                    llvm::MachineOperand::setReg(v192, v180);
                    v191 -= 8;
                  }
                  while (v191);
                  uint64_t v190 = (uint64_t *)v221;
                }
                if (v190 != &v222) {
                  free(v190);
                }
              }
LABEL_311:
              char v175 = 0;
              uint64_t v174 = 1;
            }
            while ((v176 & 1) != 0);
            if (v227 >= (unint64_t)HIDWORD(v227)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v6 = v215;
            v226[v227] = (llvm::MachineInstr *)v147;
            unsigned int v193 = v227 + 1;
            LODWORD(v227) = v193;
            if (v193 >= HIDWORD(v227)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v226[v193] = (llvm::MachineInstr *)v218;
            LODWORD(v227) = v227 + 1;
            int v148 = 1;
          }
        }
LABEL_276:
        uint64_t v147 = v150;
        if ((unint64_t *)v150 == v6)
        {
          char v197 = v226;
          if (v227)
          {
            uint64_t v198 = 8 * v227;
            do
            {
              uint64_t v199 = *v197++;
              llvm::MachineInstr::eraseFromParent(v199);
              v198 -= 8;
            }
            while (v198);
            char v197 = v226;
          }
          uint64_t v5 = v211;
          if (v197 != v228) {
            free(v197);
          }
          goto LABEL_331;
        }
      }
    }
    if (*(unsigned char *)(v207 + 318)) {
      int v63 = 4596;
    }
    else {
      int v63 = 8199;
    }
    int v217 = v63;
    if (*(unsigned char *)(v207 + 318)) {
      int v64 = 4597;
    }
    else {
      int v64 = 8189;
    }
    int v214 = v64;
    char v226 = (llvm::MachineInstr **)v228;
    uint64_t v227 = 0x800000000;
    *(_DWORD *)(a1 + 280) = 0;
    uint64_t v65 = (unint64_t *)v5[7];
    int v66 = 0;
    if (v65 == v6) {
      goto LABEL_328;
    }
    int v203 = v62;
    if (v62) {
      uint64_t v67 = 1;
    }
    else {
      uint64_t v67 = 2;
    }
    uint64_t v212 = v67;
    if (v62) {
      uint64_t v68 = 2;
    }
    else {
      uint64_t v68 = 1;
    }
    uint64_t v202 = v68;
    while (2)
    {
      if (!v65 || (int v69 = v65, (*(unsigned char *)v65 & 4) == 0))
      {
        int v69 = v65;
        if ((*((_WORD *)v65 + 22) & 8) != 0)
        {
          int v69 = v65;
          do
            int v69 = (unint64_t *)v69[1];
          while ((*((_WORD *)v69 + 22) & 8) != 0);
        }
      }
      uint64_t v70 = (unint64_t *)v69[1];
      int v71 = (unsigned __int16 *)v65[2];
      int v72 = *v71;
      BOOL v74 = (v72 - 9) <= 0x3C && ((1 << (v72 - 9)) & 0x1000000000000605) != 0
         || v72 == 0;
      if (v74 || (v71[4] & 0x10) != 0) {
        goto LABEL_156;
      }
      if (v217 == v72)
      {
        unsigned int v75 = *(_DWORD *)(v65[4] + 32 * v212 + 4);
        sub_1CB93E024(v219, v75);
        sub_1CB93E024(v219, v75 + 1);
        int v72 = *(unsigned __int16 *)v65[2];
      }
      if (v214 != v72) {
        goto LABEL_156;
      }
      LODWORD(v221) = *(_DWORD *)(v65[4] + 32 * v212 + 4);
      uint64_t v76 = v221;
      *((void *)&v221 + 1) = v65;
      sub_1CB93E0B4(v219, (unsigned int *)&v221);
      unsigned int v77 = *(unsigned __int16 *)(*(void *)(a1 + 416) + 2 * (v76 ^ 1));
      unsigned int v78 = *(_DWORD *)(a1 + 280);
      if (v78 <= v77) {
        goto LABEL_156;
      }
      uint64_t v79 = *(void *)(a1 + 272);
      while (1)
      {
        unsigned int v80 = v77;
        if (*(_DWORD *)(v79 + 16 * v77) == (v76 ^ 1)) {
          break;
        }
        v77 += 0x10000;
        if (v80 + 0x10000 >= v78) {
          goto LABEL_156;
        }
      }
      if (v78 == v77) {
        goto LABEL_156;
      }
      uint64_t v81 = *(llvm::MachineInstr **)(v79 + 16 * v77 + 8);
      if (v76) {
        uint64_t v82 = (llvm::MachineInstr *)v65;
      }
      else {
        uint64_t v82 = *(llvm::MachineInstr **)(v79 + 16 * v77 + 8);
      }
      if ((v76 & 1) == 0) {
        uint64_t v81 = (llvm::MachineInstr *)v65;
      }
      unsigned int v205 = v81;
      uint64_t v206 = v82;
      uint64_t v83 = *(void *)(a1 + 264);
      int v204 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v83, "", 0);
      *(void *)(*(void *)(v83 + 24) + 16 * (v204 & 0x7FFFFFFF)) = &off_1E66AB080;
      uint64_t v84 = *(void *)(v83 + 8);
      if (v84) {
        (*(void (**)(uint64_t))(*(void *)v84 + 24))(v84);
      }
      unint64_t v85 = v65[3];
      uint64_t v86 = *(void *)(*(void *)(a1 + 248) + 8);
      uint64_t v87 = *(llvm::MachineFunction **)(v85 + 32);
      unint64_t v88 = (unsigned __int8 *)v65[7];
      unsigned int v224 = v88;
      if (v88) {
        llvm::MetadataTracking::track((uint64_t)&v224, v88, 2);
      }
      unsigned int v89 = llvm::MachineFunction::CreateMachineInstr(v87, v86 + 864, &v224, 0);
      if (v224)
      {
        int v135 = *v224;
        if ((v135 - 4) > 0x1E)
        {
          if ((v135 - 3) >= 0xFFFFFFFE) {
            int v144 = v224;
          }
          else {
            int v144 = 0;
          }
          if ((v135 - 3) < 0xFFFFFFFE)
          {
            if (v135 == 3) {
              *((void *)v224 + 1) = 0;
            }
            goto LABEL_135;
          }
          unint64_t v137 = (unint64_t)(v144 + 8);
        }
        else
        {
          if ((v224[1] & 0x7F) != 2 && !*((_DWORD *)v224 + 3)) {
            goto LABEL_135;
          }
          uint64_t v136 = *((void *)v224 + 2);
          if ((v136 & 4) == 0) {
            goto LABEL_135;
          }
          unint64_t v137 = v136 & 0xFFFFFFFFFFFFFFF8;
          if (!v137) {
            goto LABEL_135;
          }
        }
        *(void *)&long long v221 = &v224;
        sub_1CC5FA668(v137 + 16, &v221);
      }
LABEL_135:
      uint64_t v90 = *(void *)(v85 + 40);
      *((void *)v89 + 3) = v90;
      uint64_t v91 = *(void *)(v90 + 32);
      uint64_t v92 = *((unsigned int *)v89 + 10);
      if (v92)
      {
        uint64_t v114 = *((void *)v89 + 4);
        uint64_t v115 = *(void *)(v91 + 40);
        uint64_t v116 = 32 * v92;
        do
        {
          if (!*(unsigned char *)v114)
          {
            uint64_t v117 = *(unsigned int *)(v114 + 4);
            if ((int)v117 >= 0) {
              BOOL v118 = (uint64_t *)(*(void *)(v115 + 272) + 8 * v117);
            }
            else {
              BOOL v118 = (uint64_t *)(*(void *)(v115 + 24) + 16 * (v117 & 0x7FFFFFFF) + 8);
            }
            uint64_t v119 = *v118;
            if (*v118)
            {
              uint64_t v120 = *(void *)(v119 + 16);
              *(void *)(v119 + 16) = v114;
              *(void *)(v114 + 16) = v120;
              if (*(unsigned char *)(v114 + 3))
              {
                *(void *)(v114 + 24) = v119;
              }
              else
              {
                *(void *)(v114 + 24) = 0;
                BOOL v118 = (uint64_t *)(v120 + 24);
              }
            }
            else
            {
              *(void *)(v114 + 16) = v114;
              *(void *)(v114 + 24) = 0;
            }
            *BOOL v118 = v114;
          }
          v114 += 32;
          v116 -= 32;
        }
        while (v116);
      }
      uint64_t v93 = *(void *)(v91 + 728);
      if (v93) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v93 + 24))(v93, v89);
      }
      unint64_t v94 = *v65 & 0xFFFFFFFFFFFFFFF8;
      *(void *)unsigned int v89 = v94 | *(void *)v89 & 7;
      *((void *)v89 + 1) = v65;
      *(void *)(v94 + 8) = v89;
      *uint64_t v65 = *v65 & 7 | (unint64_t)v89;
      *((void *)&v221 + 1) = 0;
      uint64_t v222 = 0;
      uint64_t v223 = 0;
      LODWORD(v221) = 0x1000000;
      DWORD1(v221) = v204;
      llvm::MachineInstr::addOperand(v89, v87, (const llvm::MachineOperand *)&v221);
      int v95 = *(_DWORD *)(*((void *)v205 + 4) + 32 * v202 + 4);
      *((void *)&v221 + 1) = 0;
      LODWORD(v221) = 0;
      DWORD1(v221) = v95;
      uint64_t v222 = 0;
      uint64_t v223 = 0;
      llvm::MachineInstr::addOperand(v89, v87, (const llvm::MachineOperand *)&v221);
      LODWORD(v221) = 1;
      *((void *)&v221 + 1) = 0;
      uint64_t v222 = 1;
      llvm::MachineInstr::addOperand(v89, v87, (const llvm::MachineOperand *)&v221);
      int v96 = *(_DWORD *)(*((void *)v206 + 4) + 32 * v202 + 4);
      *((void *)&v221 + 1) = 0;
      LODWORD(v221) = 0;
      DWORD1(v221) = v96;
      uint64_t v222 = 0;
      uint64_t v223 = 0;
      llvm::MachineInstr::addOperand(v89, v87, (const llvm::MachineOperand *)&v221);
      LODWORD(v221) = 1;
      *((void *)&v221 + 1) = 0;
      uint64_t v222 = 2;
      llvm::MachineInstr::addOperand(v89, v87, (const llvm::MachineOperand *)&v221);
      unint64_t v97 = v65[3];
      uint64_t v98 = *(void *)(*(void *)(a1 + 248) + 8);
      if (!v203)
      {
        uint64_t v99 = *(llvm::MachineFunction **)(v97 + 32);
        unsigned int v107 = (unsigned __int8 *)v65[7];
        unsigned int v224 = v107;
        if (v107) {
          llvm::MetadataTracking::track((uint64_t)&v224, v107, 2);
        }
        uint64_t v101 = llvm::MachineFunction::CreateMachineInstr(v99, v98 + 393552, &v224, 0);
        if (!v224) {
          goto LABEL_149;
        }
        int v141 = *v224;
        if ((v141 - 4) > 0x1E)
        {
          if ((v141 - 3) >= 0xFFFFFFFE) {
            unsigned int v146 = v224;
          }
          else {
            unsigned int v146 = 0;
          }
          if ((v141 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v143 = (unint64_t)(v146 + 8);
            goto LABEL_236;
          }
          if (v141 == 3) {
            *((void *)v224 + 1) = 0;
          }
        }
        else if ((v224[1] & 0x7F) == 2 || *((_DWORD *)v224 + 3))
        {
          uint64_t v142 = *((void *)v224 + 2);
          if ((v142 & 4) != 0)
          {
            unint64_t v143 = v142 & 0xFFFFFFFFFFFFFFF8;
            if (v143)
            {
LABEL_236:
              *(void *)&long long v221 = &v224;
              sub_1CC5FA668(v143 + 16, &v221);
            }
          }
        }
LABEL_149:
        uint64_t v108 = *(void *)(v97 + 40);
        *((void *)v101 + 3) = v108;
        uint64_t v109 = *(void *)(v108 + 32);
        uint64_t v110 = *((unsigned int *)v101 + 10);
        if (v110)
        {
          uint64_t v128 = *((void *)v101 + 4);
          uint64_t v129 = *(void *)(v109 + 40);
          uint64_t v130 = 32 * v110;
          do
          {
            if (!*(unsigned char *)v128)
            {
              uint64_t v131 = *(unsigned int *)(v128 + 4);
              if ((int)v131 >= 0) {
                unsigned int v132 = (uint64_t *)(*(void *)(v129 + 272) + 8 * v131);
              }
              else {
                unsigned int v132 = (uint64_t *)(*(void *)(v129 + 24) + 16 * (v131 & 0x7FFFFFFF) + 8);
              }
              uint64_t v133 = *v132;
              if (*v132)
              {
                uint64_t v134 = *(void *)(v133 + 16);
                *(void *)(v133 + 16) = v128;
                *(void *)(v128 + 16) = v134;
                if (*(unsigned char *)(v128 + 3))
                {
                  *(void *)(v128 + 24) = v133;
                }
                else
                {
                  *(void *)(v128 + 24) = 0;
                  unsigned int v132 = (uint64_t *)(v134 + 24);
                }
              }
              else
              {
                *(void *)(v128 + 16) = v128;
                *(void *)(v128 + 24) = 0;
              }
              *unsigned int v132 = v128;
            }
            v128 += 32;
            v130 -= 32;
          }
          while (v130);
        }
        uint64_t v111 = *(void *)(v109 + 728);
        if (v111) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v111 + 24))(v111, v101);
        }
        unint64_t v112 = *v65 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v101 = v112 | *(void *)v101 & 7;
        *((void *)v101 + 1) = v65;
        *(void *)(v112 + 8) = v101;
        *uint64_t v65 = *v65 & 7 | (unint64_t)v101;
        LODWORD(v221) = 1;
        *((void *)&v221 + 1) = 0;
        uint64_t v222 = 49;
        llvm::MachineInstr::addOperand(v101, v99, (const llvm::MachineOperand *)&v221);
        *((void *)&v221 + 1) = 0;
        LODWORD(v221) = 0;
        DWORD1(v221) = v204;
        uint64_t v222 = 0;
        uint64_t v223 = 0;
        llvm::MachineInstr::addOperand(v101, v99, (const llvm::MachineOperand *)&v221);
        HIDWORD(v221) = 0;
        LODWORD(v222) = 64;
        LODWORD(v223) = 0;
        LODWORD(v221) = 519;
        *(void *)((char *)&v221 + 4) = v76 & 0xFFFFFFFE;
        goto LABEL_153;
      }
      uint64_t v99 = *(llvm::MachineFunction **)(v97 + 32);
      uint64_t v100 = (unsigned __int8 *)v65[7];
      unsigned int v224 = v100;
      if (v100) {
        llvm::MetadataTracking::track((uint64_t)&v224, v100, 2);
      }
      uint64_t v101 = llvm::MachineFunction::CreateMachineInstr(v99, v98 + 220608, &v224, 0);
      if (v224)
      {
        int v138 = *v224;
        if ((v138 - 4) > 0x1E)
        {
          if ((v138 - 3) >= 0xFFFFFFFE) {
            uint64_t v145 = v224;
          }
          else {
            uint64_t v145 = 0;
          }
          if ((v138 - 3) < 0xFFFFFFFE)
          {
            if (v138 == 3) {
              *((void *)v224 + 1) = 0;
            }
            goto LABEL_142;
          }
          unint64_t v140 = (unint64_t)(v145 + 8);
        }
        else
        {
          if ((v224[1] & 0x7F) != 2 && !*((_DWORD *)v224 + 3)) {
            goto LABEL_142;
          }
          uint64_t v139 = *((void *)v224 + 2);
          if ((v139 & 4) == 0) {
            goto LABEL_142;
          }
          unint64_t v140 = v139 & 0xFFFFFFFFFFFFFFF8;
          if (!v140) {
            goto LABEL_142;
          }
        }
        *(void *)&long long v221 = &v224;
        sub_1CC5FA668(v140 + 16, &v221);
      }
LABEL_142:
      uint64_t v102 = *(void *)(v97 + 40);
      *((void *)v101 + 3) = v102;
      uint64_t v103 = *(void *)(v102 + 32);
      uint64_t v104 = *((unsigned int *)v101 + 10);
      if (v104)
      {
        uint64_t v121 = *((void *)v101 + 4);
        uint64_t v122 = *(void *)(v103 + 40);
        uint64_t v123 = 32 * v104;
        do
        {
          if (!*(unsigned char *)v121)
          {
            uint64_t v124 = *(unsigned int *)(v121 + 4);
            if ((int)v124 >= 0) {
              int v125 = (uint64_t *)(*(void *)(v122 + 272) + 8 * v124);
            }
            else {
              int v125 = (uint64_t *)(*(void *)(v122 + 24) + 16 * (v124 & 0x7FFFFFFF) + 8);
            }
            uint64_t v126 = *v125;
            if (*v125)
            {
              uint64_t v127 = *(void *)(v126 + 16);
              *(void *)(v126 + 16) = v121;
              *(void *)(v121 + 16) = v127;
              if (*(unsigned char *)(v121 + 3))
              {
                *(void *)(v121 + 24) = v126;
              }
              else
              {
                *(void *)(v121 + 24) = 0;
                int v125 = (uint64_t *)(v127 + 24);
              }
            }
            else
            {
              *(void *)(v121 + 16) = v121;
              *(void *)(v121 + 24) = 0;
            }
            *int v125 = v121;
          }
          v121 += 32;
          v123 -= 32;
        }
        while (v123);
      }
      uint64_t v105 = *(void *)(v103 + 728);
      if (v105) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v105 + 24))(v105, v101);
      }
      unint64_t v106 = *v65 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v101 = v106 | *(void *)v101 & 7;
      *((void *)v101 + 1) = v65;
      *(void *)(v106 + 8) = v101;
      *uint64_t v65 = *v65 & 7 | (unint64_t)v101;
      LODWORD(v221) = 1;
      *((void *)&v221 + 1) = 0;
      uint64_t v222 = 0;
      llvm::MachineInstr::addOperand(v101, v99, (const llvm::MachineOperand *)&v221);
      HIDWORD(v221) = 0;
      LODWORD(v222) = 64;
      LODWORD(v223) = 0;
      LODWORD(v221) = 519;
      *(void *)((char *)&v221 + 4) = v76 & 0xFFFFFFFE;
      llvm::MachineInstr::addOperand(v101, v99, (const llvm::MachineOperand *)&v221);
      *((void *)&v221 + 1) = 0;
      LODWORD(v221) = 0;
      DWORD1(v221) = v204;
      uint64_t v222 = 0;
      uint64_t v223 = 0;
      llvm::MachineInstr::addOperand(v101, v99, (const llvm::MachineOperand *)&v221);
      LODWORD(v221) = 1;
      *((void *)&v221 + 1) = 0;
      uint64_t v222 = 0;
LABEL_153:
      llvm::MachineInstr::addOperand(v101, v99, (const llvm::MachineOperand *)&v221);
      uint64_t v6 = v215;
      if (v227 >= (unint64_t)HIDWORD(v227)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v226[v227] = v205;
      unsigned int v113 = v227 + 1;
      LODWORD(v227) = v113;
      if (v113 >= HIDWORD(v227)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v226[v113] = v206;
      LODWORD(v227) = v227 + 1;
      int v66 = 1;
LABEL_156:
      uint64_t v65 = v70;
      if (v70 != v6) {
        continue;
      }
      break;
    }
    unint64_t v194 = v226;
    if (v227)
    {
      uint64_t v195 = 8 * v227;
      do
      {
        unsigned int v196 = *v194++;
        llvm::MachineInstr::eraseFromParent(v196);
        v195 -= 8;
      }
      while (v195);
      unint64_t v194 = v226;
    }
    uint64_t v5 = v211;
    if (v194 != v228) {
      free(v194);
    }
LABEL_328:
    int v200 = v210 | v66;
LABEL_332:
    int v210 = v200;
LABEL_333:
    uint64_t v5 = (void *)v5[1];
  }
  while (v5 != v209);
  return v210 & 1;
}

uint64_t *sub_1CB93E024(uint64_t *result, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int16 *)(result[18] + 2 * a2);
  uint64_t v3 = *((unsigned int *)result + 2);
  if (v3 > v2)
  {
    uint64_t v4 = *result;
    while (1)
    {
      unsigned int v5 = v2;
      if (*(_DWORD *)(v4 + 16 * v2) == a2) {
        break;
      }
      v2 += 0x10000;
      if (v5 + 0x10000 >= v3) {
        return result;
      }
    }
    if (v3 != v2)
    {
      uint64_t v6 = (_OWORD *)(v4 + 16 * v2);
      uint64_t v7 = (_OWORD *)(v4 + 16 * v3 - 16);
      if (v7 != v6)
      {
        _OWORD *v6 = *v7;
        uint64_t v8 = *((unsigned int *)result + 2);
        *(_WORD *)(result[18] + 2 * *(unsigned int *)(*result + 16 * v8 - 16)) = (v6
                                                                                  - *result) >> 4;
        LODWORD(v3) = v8;
      }
      *((_DWORD *)result + 2) = v3 - 1;
    }
  }
  return result;
}

uint64_t *sub_1CB93E0B4(uint64_t *result, unsigned int *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = result[18];
  unsigned int v4 = *(unsigned __int16 *)(v3 + 2 * v2);
  uint64_t v5 = *((unsigned int *)result + 2);
  uint64_t v6 = *result;
  if (v5 <= v4) {
    goto LABEL_6;
  }
  while (*(_DWORD *)(v6 + 16 * v4) != v2)
  {
    v4 += 0x10000;
    if (v4 >= v5) {
      goto LABEL_6;
    }
  }
  if (v5 == v4)
  {
LABEL_6:
    *(_WORD *)(v3 + 2 * v2) = v5;
    if (v5 >= *((_DWORD *)result + 3)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_OWORD *)(v6 + 16 * v5) = *(_OWORD *)a2;
    ++*((_DWORD *)result + 2);
  }
  return result;
}

void sub_1CB93E16C()
{
}

void sub_1CB93E204()
{
}

void sub_1CB93E2CC(llvm::Pass *this)
{
  *(void *)this = &unk_1F25EEFF0;
  uint64_t v2 = (void *)*((void *)this + 32);
  if (v2 != *((void **)this + 31)) {
    free(v2);
  }
  *(void *)this = &unk_1F260E110;
  uint64_t v3 = (char *)*((void *)this + 22);
  if (v3 != (char *)this + 192) {
    free(v3);
  }
  unsigned int v4 = (char *)*((void *)this + 13);
  if (v4 != (char *)this + 120) {
    free(v4);
  }
  uint64_t v5 = (char *)*((void *)this + 4);
  if (v5 != (char *)this + 48) {
    free(v5);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CB93E394(llvm::Pass *this)
{
  *(void *)this = &unk_1F25EEFF0;
  uint64_t v2 = (void *)*((void *)this + 32);
  if (v2 != *((void **)this + 31)) {
    free(v2);
  }
  *(void *)this = &unk_1F260E110;
  uint64_t v3 = (char *)*((void *)this + 22);
  if (v3 != (char *)this + 192) {
    free(v3);
  }
  unsigned int v4 = (char *)*((void *)this + 13);
  if (v4 != (char *)this + 120) {
    free(v4);
  }
  uint64_t v5 = (char *)*((void *)this + 4);
  if (v5 != (char *)this + 48) {
    free(v5);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CB93E470()
{
  return "AGX2 expand pseudo inst pass";
}

uint64_t sub_1CB93E480(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v1217 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 344) = (*(uint64_t (**)(void, void))(**(void **)(a2 + 8) + 16))(*(void *)(a2 + 8), *(void *)a2);
  *(void *)(v3 + 352) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
  uint64_t v5 = *(void **)(v3 + 248);
  *(void *)(v3 + 360) = v4;
  *(void *)(v3 + 368) = *(void *)(a2 + 40);
  v1146 = (void *)a2;
  *(void *)(v3 + 376) = *(void *)(a2 + 344);
  uint64_t v6 = *(void **)(v3 + 256);
  if (v6 == v5) {
    goto LABEL_2;
  }
  uint64_t v639 = *(unsigned int *)(v3 + 264);
  if (v639 < 0x21 || 4 * (*(_DWORD *)(v3 + 268) - *(_DWORD *)(v3 + 272)) >= v639)
  {
    memset(v6, 255, 8 * v639);
LABEL_2:
    *(void *)(v3 + 268) = 0;
    goto LABEL_3;
  }
  llvm::SmallPtrSetImplBase::shrink_and_clear((void **)(v3 + 248));
LABEL_3:
  *(_WORD *)(v3 + 388) = 257;
  int8x8_t v7 = (int8x8_t)257;
  *(_DWORD *)(v3 + 384) = 257;
  *(unsigned char *)(v3 + 390) = 1;
  *(unsigned char *)(v3 + 405) = 0;
  uint64_t v8 = *(void *)(a2 + 48);
  if (!v8)
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 8) + 216))(*(void *)(a2 + 8), a2 + 128, a2);
    *(void *)(a2 + 48) = v8;
  }
  char v9 = *(unsigned char *)(v8 + 453);
  if (v9)
  {
    uint64_t v10 = a2 + 320;
    uint64_t v11 = *(void *)(a2 + 328);
    char v9 = v11 != a2 + 320 && (v12 = *(void *)(v11 + 8), v12 != v10) && *(void *)(v12 + 8) != v10;
  }
  *(unsigned char *)(v3 + 391) = v9;
  uint64_t v13 = *(unsigned char **)(v3 + 344);
  if (v13[318]) {
    unsigned int v14 = 4674;
  }
  else {
    unsigned int v14 = 4675;
  }
  if (v13[327]) {
    unsigned int v14 = 4676;
  }
  unsigned int v1155 = v14;
  uint64_t v15 = a2;
  int v1145 = (*(unsigned __int16 *)(*(void *)a2 + 18) >> 4) & 0x3FF;
  if (v13[337]) {
    BOOL v16 = ((*(unsigned __int16 *)(*(void *)a2 + 18) >> 4) & 0x3FF) == 107;
  }
  else {
    BOOL v16 = 1;
  }
  int v17 = !v16;
  int v1148 = v17;
  uint64_t v1193 = (void *)v3;
  if (v16) {
    goto LABEL_31;
  }
  uint64_t v18 = *(void **)(a2 + 328);
  uint64_t v19 = (unint64_t *)v18[7];
  uint64_t v1199 = 0;
  uint64_t v20 = *(void *)(*(void *)(v3 + 352) + 8) + 48 * v14;
  uint64_t v21 = (llvm::MachineFunction *)v18[4];
  v1213 = 0;
  MachineInstr = llvm::MachineFunction::CreateMachineInstr(v21, v20, (unsigned __int8 **)&v1213, 0);
  if (v1213)
  {
    int v1121 = *(unsigned __int8 *)v1213;
    if ((v1121 - 4) > 0x1E)
    {
      if ((v1121 - 3) >= 0xFFFFFFFE) {
        unsigned int v1133 = v1213;
      }
      else {
        unsigned int v1133 = 0;
      }
      if ((v1121 - 3) < 0xFFFFFFFE)
      {
        if (v1121 == 3) {
          *((void *)v1213 + 1) = 0;
        }
        goto LABEL_23;
      }
      unint64_t v1123 = (unint64_t)v1133 + 8;
    }
    else
    {
      if ((*((unsigned char *)v1213 + 1) & 0x7F) != 2 && !*((_DWORD *)v1213 + 3)) {
        goto LABEL_23;
      }
      uint64_t v1122 = *((void *)v1213 + 2);
      if ((v1122 & 4) == 0) {
        goto LABEL_23;
      }
      unint64_t v1123 = v1122 & 0xFFFFFFFFFFFFFFF8;
      if (!v1123) {
        goto LABEL_23;
      }
    }
    v1202 = &v1213;
    sub_1CC5FA668(v1123 + 16, &v1202);
  }
LABEL_23:
  uint64_t v23 = v18[5];
  *((void *)MachineInstr + 3) = v23;
  uint64_t v24 = *(void *)(v23 + 32);
  uint64_t v25 = *((unsigned int *)MachineInstr + 10);
  if (v25)
  {
    uint64_t v714 = *((void *)MachineInstr + 4);
    uint64_t v715 = *(void *)(v24 + 40);
    uint64_t v716 = 32 * v25;
    do
    {
      if (!*(unsigned char *)v714)
      {
        uint64_t v717 = *(unsigned int *)(v714 + 4);
        if ((int)v717 >= 0) {
          v718 = (uint64_t *)(*(void *)(v715 + 272) + 8 * v717);
        }
        else {
          v718 = (uint64_t *)(*(void *)(v715 + 24) + 16 * (v717 & 0x7FFFFFFF) + 8);
        }
        uint64_t v719 = *v718;
        if (*v718)
        {
          uint64_t v720 = *(void *)(v719 + 16);
          *(void *)(v719 + 16) = v714;
          *(void *)(v714 + 16) = v720;
          if (*(unsigned char *)(v714 + 3))
          {
            *(void *)(v714 + 24) = v719;
          }
          else
          {
            *(void *)(v714 + 24) = 0;
            v718 = (uint64_t *)(v720 + 24);
          }
        }
        else
        {
          *(void *)(v714 + 16) = v714;
          *(void *)(v714 + 24) = 0;
        }
        uint64_t *v718 = v714;
      }
      v714 += 32;
      v716 -= 32;
    }
    while (v716);
  }
  uint64_t v26 = *(void *)(v24 + 728);
  if (v26) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v26 + 24))(v26, MachineInstr);
  }
  unint64_t v27 = *v19 & 0xFFFFFFFFFFFFFFF8;
  *(void *)MachineInstr = v27 | *(void *)MachineInstr & 7;
  *((void *)MachineInstr + 1) = v19;
  *(void *)(v27 + 8) = MachineInstr;
  *uint64_t v19 = *v19 & 7 | (unint64_t)MachineInstr;
  if (!v1199) {
    goto LABEL_30;
  }
  int v28 = *(unsigned __int8 *)v1199;
  if ((v28 - 4) > 0x1E)
  {
    if ((v28 - 3) >= 0xFFFFFFFE) {
      uint64_t v640 = v1199;
    }
    else {
      uint64_t v640 = 0;
    }
    if ((v28 - 3) < 0xFFFFFFFE)
    {
      if (v28 == 3) {
        *((void *)v1199 + 1) = 0;
      }
      goto LABEL_30;
    }
    unint64_t v641 = (unint64_t)v640 + 8;
  }
  else
  {
    if ((*((unsigned char *)v1199 + 1) & 0x7F) != 2 && !*((_DWORD *)v1199 + 3)) {
      goto LABEL_30;
    }
    uint64_t v1116 = *((void *)v1199 + 2);
    if ((v1116 & 4) == 0) {
      goto LABEL_30;
    }
    unint64_t v641 = v1116 & 0xFFFFFFFFFFFFFFF8;
    if (!v641) {
      goto LABEL_30;
    }
  }
  v1202 = &v1199;
  sub_1CC5FA668(v641 + 16, &v1202);
LABEL_30:
  uint64_t v15 = a2;
LABEL_31:
  BOOL v29 = *(void **)(v15 + 328);
  v1151 = (void *)(v15 + 320);
  if (v29 == (void *)(v15 + 320))
  {
    *(unsigned char *)(v3 + 392) = 0;
    goto LABEL_85;
  }
  char v30 = 0;
  do
  {
    uint64_t v31 = v29[7];
    if ((void *)v31 != v29 + 6)
    {
      while (1)
      {
        BOOL v32 = *(unsigned __int16 **)(v31 + 16);
        if ((~*((_DWORD *)v32 + 4) & 0x800200) == 0) {
          break;
        }
LABEL_68:
        BOOL v49 = *v32 == 337;
        if ((*(unsigned char *)v31 & 4) == 0)
        {
          while ((*(_WORD *)(v31 + 44) & 8) != 0)
            uint64_t v31 = *(void *)(v31 + 8);
        }
        v30 |= v49;
        uint64_t v31 = *(void *)(v31 + 8);
        if ((void *)v31 == v29 + 6) {
          goto LABEL_79;
        }
      }
      uint64_t v33 = v3;
      uint64_t v34 = *(void *)(v3 + 256);
      uint64_t v35 = *(unsigned int *)(v3 + 268);
      if (v34 == *(void *)(v3 + 248))
      {
        if (v35)
        {
          BOOL v36 = 0;
          uint64_t v37 = 8 * v35;
          uint64_t v38 = *(void **)(v3 + 256);
          while ((void *)*v38 != v29)
          {
            if (*v38 == -2) {
              BOOL v36 = v38;
            }
            ++v38;
            v37 -= 8;
            if (!v37)
            {
              if (!v36) {
                goto LABEL_43;
              }
              *BOOL v36 = v29;
              --*(_DWORD *)(v3 + 272);
              goto LABEL_67;
            }
          }
          goto LABEL_67;
        }
LABEL_43:
        uint64_t v33 = v3;
        unsigned int v39 = *(_DWORD *)(v3 + 264);
        if (v35 < v39)
        {
          *(_DWORD *)(v3 + 268) = v35 + 1;
          *(void *)(v34 + 8 * v35) = v29;
LABEL_67:
          *(unsigned char *)(v3 + 386) = 1;
          BOOL v32 = *(unsigned __int16 **)(v31 + 16);
          goto LABEL_68;
        }
      }
      else
      {
        unsigned int v39 = *(_DWORD *)(v3 + 264);
      }
      if (3 * v39 <= 4 * ((int)v35 - *(_DWORD *)(v33 + 272)))
      {
        if (v39 >= 0x40) {
          v39 *= 2;
        }
        else {
          unsigned int v39 = 128;
        }
      }
      else if (v39 - v35 >= v39 >> 3)
      {
        goto LABEL_48;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v3 + 248), v39);
      unsigned int v39 = *(_DWORD *)(v3 + 264);
      uint64_t v34 = *(void *)(v3 + 256);
LABEL_48:
      unsigned int v40 = v39 - 1;
      unsigned int v41 = (v39 - 1) & ((v29 >> 4) ^ (v29 >> 9));
      uint64_t v42 = (void *)(v34 + 8 * v41);
      uint64_t v43 = (void *)*v42;
      if (*v42 == -1)
      {
        uint64_t v44 = 0;
LABEL_60:
        if (v44) {
          __int16 v48 = v44;
        }
        else {
          __int16 v48 = v42;
        }
        if ((void *)*v48 != v29)
        {
          if (*v48 == -2) {
            --*(_DWORD *)(v3 + 272);
          }
          else {
            ++*(_DWORD *)(v3 + 268);
          }
          *__int16 v48 = v29;
        }
      }
      else
      {
        uint64_t v44 = 0;
        int v45 = 1;
        while (v43 != v29)
        {
          if (v44) {
            BOOL v46 = 0;
          }
          else {
            BOOL v46 = v43 == (void *)-2;
          }
          if (v46) {
            uint64_t v44 = v42;
          }
          unsigned int v47 = v41 + v45++;
          unsigned int v41 = v47 & v40;
          uint64_t v42 = (void *)(v34 + 8 * (v47 & v40));
          uint64_t v43 = (void *)*v42;
          if (*v42 == -1) {
            goto LABEL_60;
          }
        }
      }
      goto LABEL_67;
    }
LABEL_79:
    BOOL v29 = (void *)v29[1];
  }
  while (v29 != v1151);
  uint64_t v50 = *(void *)(v3 + 344);
  *(unsigned char *)(v3 + 392) = 0;
  if ((v30 & 1) != 0 && (*(unsigned char *)(v50 + 392) || *(unsigned char *)(v50 + 393)))
  {
    *(unsigned char *)(v3 + 392) = 1;
    *(void *)(v3 + 393) = 0;
    *(_DWORD *)(v3 + 401) = 0;
  }
LABEL_85:
  if ((v1145 - 100) >= 9) {
    goto LABEL_128;
  }
  if (*(unsigned char *)(*(void *)(a2 + 56) + 62))
  {
    uint64_t v51 = *(void **)(a2 + 328);
    goto LABEL_88;
  }
  uint64_t v58 = *(void *)(a2 + 48);
  if (!v58)
  {
    uint64_t v58 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 8) + 216))(*(void *)(a2 + 8), a2 + 128, a2);
    *(void *)(a2 + 48) = v58;
  }
  uint64_t v51 = *(void **)(a2 + 328);
  if (!*(unsigned char *)(v58 + 453) || v51 == v1151) {
    goto LABEL_128;
  }
  uint64_t v60 = v51[1];
  if ((void *)v60 == v1151 || *(void **)(v60 + 8) == v1151) {
    goto LABEL_128;
  }
LABEL_88:
  uint64_t v52 = (unint64_t *)v51[7];
  if (v52 == v51 + 6)
  {
LABEL_104:
    uint64_t v57 = 0;
    uint64_t v1199 = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v53 = (unsigned __int16 *)v52[2];
      int v54 = *v53;
      BOOL v55 = (v54 - 9) > 0x3C || ((1 << (v54 - 9)) & 0x1000000000000605) == 0;
      BOOL v56 = !v55 || v54 == 0;
      if (!v56 && (v53[4] & 0x10) == 0 && (v53[8] & 1) == 0 || (v53[8] & 0x40) != 0) {
        break;
      }
      if ((*(unsigned char *)v52 & 4) == 0)
      {
        while ((*((_WORD *)v52 + 22) & 8) != 0)
          uint64_t v52 = (unint64_t *)v52[1];
      }
      uint64_t v52 = (unint64_t *)v52[1];
      if (v52 == v51 + 6)
      {
        uint64_t v52 = v51 + 6;
        goto LABEL_104;
      }
    }
    uint64_t v57 = (void *)v52[7];
    uint64_t v1199 = v57;
    if (v57)
    {
      llvm::MetadataTracking::track((uint64_t)&v1199, (unsigned __int8 *)v57, 2);
      uint64_t v57 = v1199;
    }
  }
  uint64_t v61 = 195456;
  if (!*(unsigned char *)(*(void *)(v3 + 344) + 318)) {
    uint64_t v61 = 195504;
  }
  uint64_t v62 = *(void *)(*(void *)(v3 + 352) + 8) + v61;
  int v63 = (llvm::MachineFunction *)v51[4];
  v1213 = v57;
  if (v57) {
    llvm::MetadataTracking::track((uint64_t)&v1213, (unsigned __int8 *)v57, 2);
  }
  int v64 = llvm::MachineFunction::CreateMachineInstr(v63, v62, (unsigned __int8 **)&v1213, 0);
  if (v1213)
  {
    int v1127 = *(unsigned __int8 *)v1213;
    if ((v1127 - 4) > 0x1E)
    {
      if ((v1127 - 3) >= 0xFFFFFFFE) {
        v1138 = v1213;
      }
      else {
        v1138 = 0;
      }
      if ((v1127 - 3) < 0xFFFFFFFE)
      {
        if (v1127 == 3) {
          *((void *)v1213 + 1) = 0;
        }
        goto LABEL_121;
      }
      unint64_t v1129 = (unint64_t)v1138 + 8;
    }
    else
    {
      if ((*((unsigned char *)v1213 + 1) & 0x7F) != 2 && !*((_DWORD *)v1213 + 3)) {
        goto LABEL_121;
      }
      uint64_t v1128 = *((void *)v1213 + 2);
      if ((v1128 & 4) == 0) {
        goto LABEL_121;
      }
      unint64_t v1129 = v1128 & 0xFFFFFFFFFFFFFFF8;
      if (!v1129) {
        goto LABEL_121;
      }
    }
    v1202 = &v1213;
    sub_1CC5FA668(v1129 + 16, &v1202);
  }
LABEL_121:
  uint64_t v65 = v51[5];
  *((void *)v64 + 3) = v65;
  uint64_t v66 = *(void *)(v65 + 32);
  uint64_t v67 = *((unsigned int *)v64 + 10);
  if (v67)
  {
    uint64_t v728 = *((void *)v64 + 4);
    uint64_t v729 = *(void *)(v66 + 40);
    uint64_t v730 = 32 * v67;
    do
    {
      if (!*(unsigned char *)v728)
      {
        uint64_t v731 = *(unsigned int *)(v728 + 4);
        if ((int)v731 >= 0) {
          unint64_t v732 = (uint64_t *)(*(void *)(v729 + 272) + 8 * v731);
        }
        else {
          unint64_t v732 = (uint64_t *)(*(void *)(v729 + 24) + 16 * (v731 & 0x7FFFFFFF) + 8);
        }
        uint64_t v733 = *v732;
        if (*v732)
        {
          uint64_t v734 = *(void *)(v733 + 16);
          *(void *)(v733 + 16) = v728;
          *(void *)(v728 + 16) = v734;
          if (*(unsigned char *)(v728 + 3))
          {
            *(void *)(v728 + 24) = v733;
          }
          else
          {
            *(void *)(v728 + 24) = 0;
            unint64_t v732 = (uint64_t *)(v734 + 24);
          }
        }
        else
        {
          *(void *)(v728 + 16) = v728;
          *(void *)(v728 + 24) = 0;
        }
        *unint64_t v732 = v728;
      }
      v728 += 32;
      v730 -= 32;
    }
    while (v730);
  }
  uint64_t v68 = *(void *)(v66 + 728);
  if (v68) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v68 + 24))(v68, v64);
  }
  unint64_t v69 = *v52 & 0xFFFFFFFFFFFFFFF8;
  *(void *)int v64 = v69 | *(void *)v64 & 7;
  *((void *)v64 + 1) = v52;
  *(void *)(v69 + 8) = v64;
  *uint64_t v52 = *v52 & 7 | (unint64_t)v64;
  uint64_t v1203 = 0;
  uint64_t v1204 = 0;
  uint64_t v1205 = 0;
  v1202 = (void *)0xB901000000;
  llvm::MachineInstr::addOperand(v64, v63, (const llvm::MachineOperand *)&v1202);
  LODWORD(v1202) = 1;
  uint64_t v1203 = 0;
  uint64_t v1204 = 0;
  llvm::MachineInstr::addOperand(v64, v63, (const llvm::MachineOperand *)&v1202);
  LODWORD(v1202) = 1;
  uint64_t v1203 = 0;
  uint64_t v1204 = 0;
  llvm::MachineInstr::addOperand(v64, v63, (const llvm::MachineOperand *)&v1202);
  if (v1199)
  {
    int v70 = *(unsigned __int8 *)v1199;
    if ((v70 - 4) > 0x1E)
    {
      if ((v70 - 3) >= 0xFFFFFFFE) {
        BOOL v659 = v1199;
      }
      else {
        BOOL v659 = 0;
      }
      if ((v70 - 3) < 0xFFFFFFFE)
      {
        if (v70 == 3) {
          *((void *)v1199 + 1) = 0;
        }
        goto LABEL_128;
      }
      unint64_t v660 = (unint64_t)v659 + 8;
    }
    else
    {
      if ((*((unsigned char *)v1199 + 1) & 0x7F) != 2 && !*((_DWORD *)v1199 + 3)) {
        goto LABEL_128;
      }
      uint64_t v1118 = *((void *)v1199 + 2);
      if ((v1118 & 4) == 0) {
        goto LABEL_128;
      }
      unint64_t v660 = v1118 & 0xFFFFFFFFFFFFFFF8;
      if (!v660) {
        goto LABEL_128;
      }
    }
    v1202 = &v1199;
    sub_1CC5FA668(v660 + 16, &v1202);
  }
LABEL_128:
  int v71 = *(void **)(a2 + 328);
  if (v71 == v1151) {
    goto LABEL_1131;
  }
  uint64_t v1160 = v3 + 399;
  uint64_t v1161 = v3 + 393;
  int v72 = (unsigned int *)(v3 + 268);
  uint64_t v73 = (unsigned int *)(v3 + 264);
  uint64_t v1150 = (unsigned int *)(v3 + 268);
  v1167 = (unsigned int *)(v3 + 264);
  while (2)
  {
    if (*(unsigned char *)(v3 + 392))
    {
      if (*(void **)(v71[4] + 328) != v71)
      {
        uint64_t v74 = *(void *)(v3 + 344);
        if (*(unsigned char *)(v74 + 392))
        {
          *(_WORD *)(v1160 + 4) = 257;
          *(_DWORD *)uint64_t v1160 = 16843009;
        }
        else if (*(unsigned char *)(v74 + 393))
        {
          *(_WORD *)(v3 + 400) = 257;
          *(unsigned char *)(v3 + 404) = 1;
        }
      }
      *(_WORD *)(v1161 + 4) = 0;
      *(_DWORD *)uint64_t v1161 = 0;
    }
    uint64_t v1199 = (char *)&v1200 + 8;
    *(void *)&long long v1200 = 0x400000000;
    unint64_t v1147 = v71;
    uint64_t v75 = v71[7];
    __int16 v1184 = v71 + 6;
    if ((void *)v75 == v71 + 6)
    {
      int v607 = 0;
      int v609 = v1148;
      goto LABEL_1130;
    }
    int v1162 = 0;
    while (2)
    {
      v1187 = *(llvm::MachineBasicBlock **)(v75 + 24);
      uint64_t v76 = (llvm::MachineFunction *)*((void *)v1187 + 4);
      uint64_t v77 = *(void *)(v3 + 344);
      int v78 = *(unsigned __int8 *)(v77 + 318);
      if (*(unsigned char *)(v77 + 318)) {
        int v79 = 56;
      }
      else {
        int v79 = 313;
      }
      int v1178 = v79;
      if (*(unsigned char *)(v77 + 379)
        && (sub_1CB951268(&v1202, v75, v7), (HIBYTE(v1202) & 6) != 0)
        && (v1202 == 8
         || ((v1202 & 0xFE) == 0xE ? (BOOL v82 = *(unsigned char *)(*(void *)(v3 + 344) + 327) == 0) : (BOOL v82 = 1),
             !v82 ? (char v83 = 0) : (char v83 = 1),
             (v1202 & 0xFE) == 0xC || (v83 & 1) == 0)))
      {
        uint64_t v80 = *(void *)(v75 + 32) + 32 * sub_1CBC7A3F8(**(unsigned __int16 **)(v75 + 16), 0x16u);
        *(void *)(v80 + 16) = *(void *)(v80 + 16) & 0xFFFFFFFFFFFFFF0FLL | 0x10;
        int v81 = 1;
      }
      else
      {
        int v81 = 0;
      }
      if (((*(uint64_t (**)(void))(**(void **)(v3 + 376) + 288))(*(void *)(v3 + 376)) & 1) == 0)
      {
        uint64_t v84 = *(unsigned __int16 **)(v75 + 16);
        uint64_t v85 = *((void *)v84 + 2);
        uint64_t v86 = v85 & 0x2000C00;
        if (v86 == 33555456 || (v85 & 0xD00) == 0x500 || (v85 & 0xE00) == 0x600)
        {
          unsigned int v87 = sub_1CBC7A3F8(*v84, 0x16u);
          uint64_t v89 = 0x100000;
          if (v86 == 33555456) {
            uint64_t v89 = 2048;
          }
          uint64_t v88 = *(void *)(v75 + 32) + 32 * v87;
          *(void *)(v88 + 16) |= v89;
          *(unsigned char *)(v3 + 405) |= sub_1CB945D6C(*(unsigned __int16 **)(v75 + 16), *(_DWORD **)(v75 + 32), *(unsigned char *)(*(void *)(v3 + 344) + 400));
          int v81 = 1;
        }
      }
      uint64_t v90 = *(unsigned char **)(v3 + 344);
      if (!*(unsigned char *)(v3 + 392)) {
        goto LABEL_219;
      }
      uint64_t v91 = *(unsigned __int16 **)(v75 + 16);
      int v92 = *v91;
      if (v92 != 337)
      {
        uint64_t v93 = *((void *)v91 + 2);
        uint64_t v94 = v93 & 0xD00;
        uint64_t v95 = v93 & 0x800100;
        if (v90[393])
        {
          if (v94 == 2304)
          {
            *(_WORD *)(v3 + 400) = 0;
            *(_WORD *)(v3 + 394) = 0;
          }
          if (v95 == 8388864)
          {
            *(unsigned char *)(v3 + 404) = 0;
            *(unsigned char *)(v3 + 398) = 0;
          }
        }
        int v96 = v76;
        uint64_t v97 = v93 & 0xE00;
        uint64_t v98 = v93 & 0x2000C00;
        unsigned int v99 = v92 - 4821;
        uint64_t v100 = v93 & 0x800200;
        *(unsigned char *)(v3 + 394) |= v97 == 2560;
        *(unsigned char *)(v3 + 395) |= v98 == 33556480;
        *(unsigned char *)(v3 + 396) |= (v92 - 4821) < 4;
        *(unsigned char *)(v3 + 397) |= v95 == 8388864;
        *(unsigned char *)(v3 + 398) |= (v93 & 0x800200) == 8389120;
        *(unsigned char *)(v3 + 393) |= v94 == 2304;
        if (v94 != 2304 || !*(unsigned char *)v1160)
        {
          if (v97 == 2560 && *(unsigned char *)(v3 + 400))
          {
            if (!v90[392])
            {
LABEL_205:
              *(_WORD *)(v3 + 400) = 0;
              goto LABEL_207;
            }
            goto LABEL_194;
          }
          if ((v98 != 33556480 || !*(unsigned char *)(v3 + 401))
            && (v99 > 3 || !*(unsigned char *)(v3 + 402))
            && (v95 != 8388864 || !*(unsigned char *)(v3 + 403))
            && (v100 != 8389120 || !*(unsigned char *)(v3 + 404)))
          {
LABEL_218:
            int v72 = v1150;
            uint64_t v73 = v1167;
            uint64_t v76 = v96;
            goto LABEL_219;
          }
        }
        if (!v90[392])
        {
          if ((v97 != 2560 || !*(unsigned char *)(v3 + 400)) && (v98 != 33556480 || !*(unsigned char *)(v3 + 401)))
          {
            *(unsigned char *)(v3 + 404) = 0;
            goto LABEL_207;
          }
          goto LABEL_205;
        }
LABEL_194:
        *(_WORD *)(v1160 + 4) = 0;
        *(_DWORD *)uint64_t v1160 = 0;
LABEL_207:
        unsigned int v101 = sub_1CBC7A3F8(v92, 0x16u);
        BOOL v103 = v99 < 4 || v95 == 8388864 || v100 == 8389120;
        uint64_t v104 = 0x80000;
        if (v103) {
          uint64_t v104 = 512;
        }
        if (v98 == 33556480) {
          uint64_t v104 = 1024;
        }
        uint64_t v105 = *(void *)(v75 + 32) + 32 * v101;
        *(void *)(v105 + 16) |= v104;
        uint64_t v90 = *(unsigned char **)(v3 + 344);
        goto LABEL_218;
      }
      if (v90[392])
      {
        if (*(unsigned char *)(v3 + 394) || *(unsigned char *)(v3 + 395) || *(unsigned char *)(v3 + 398))
        {
          *(_WORD *)(v1160 + 4) = 257;
          *(_DWORD *)uint64_t v1160 = 16843009;
        }
        if (*(unsigned char *)v1161 || *(unsigned char *)(v3 + 395) || *(unsigned char *)(v3 + 396) || *(unsigned char *)(v3 + 397))
        {
          *(_WORD *)(v3 + 400) = 257;
          goto LABEL_199;
        }
      }
      else
      {
        if (*(unsigned char *)(v3 + 394) || *(unsigned char *)(v3 + 395)) {
          *(_WORD *)(v3 + 400) = 257;
        }
        if (*(unsigned char *)(v3 + 398)) {
LABEL_199:
        }
          *(unsigned char *)(v3 + 404) = 1;
      }
      *(_WORD *)(v1161 + 4) = 0;
      *(_DWORD *)uint64_t v1161 = 0;
LABEL_219:
      if (!v90[310] || !*(unsigned char *)(v3 + 389) || (*(unsigned char *)(*(void *)(v75 + 16) + 16) & 2) == 0) {
        goto LABEL_268;
      }
      v1165 = v76;
      int v106 = v90[318];
      *(unsigned char *)(v3 + 389) = 0;
      uint64_t v107 = *(void *)(v75 + 24);
      uint64_t v108 = *(void *)(*(void *)(v107 + 32) + 328);
      int v1168 = v81;
      if (v107 == v108)
      {
        unint64_t v117 = *(void *)v75 & 0xFFFFFFFFFFFFFFF8;
        if (!v117 || (*(unsigned char *)v117 & 4) == 0)
        {
          while ((*(_WORD *)(v117 + 44) & 4) != 0)
            unint64_t v117 = *(void *)v117 & 0xFFFFFFFFFFFFFFF8;
        }
        BOOL v118 = *(unsigned __int16 **)(v117 + 16);
        if ((v118[8] & 0x10) != 0)
        {
          if ((*(unsigned char *)(*(void *)(v117 + 32) + 32 * sub_1CBC7A3F8(*v118, 0x16u) + 16) & 8) != 0) {
            unint64_t v109 = v117;
          }
          else {
            unint64_t v109 = v75;
          }
        }
        else
        {
          unint64_t v109 = v75;
        }
        goto LABEL_258;
      }
      unint64_t v109 = v108 + 48;
      uint64_t v110 = *(void *)(v108 + 56);
      if (v108 + 48 == v110) {
        goto LABEL_247;
      }
      while (2)
      {
        uint64_t v111 = (unsigned char *)(*(void *)v109 & 0xFFFFFFFFFFFFFFF8);
        if (!v111)
        {
          unint64_t v112 = 0;
LABEL_229:
          while ((*(_WORD *)(v112 + 44) & 4) != 0)
            unint64_t v112 = *(void *)v112 & 0xFFFFFFFFFFFFFFF8;
          goto LABEL_230;
        }
        unint64_t v112 = *(void *)v109 & 0xFFFFFFFFFFFFFFF8;
        if ((*v111 & 4) == 0) {
          goto LABEL_229;
        }
LABEL_230:
        unsigned int v113 = *(unsigned __int16 **)(v112 + 16);
        int v114 = *v113;
        BOOL v116 = (v114 - 9) <= 0x3C && ((1 << (v114 - 9)) & 0x1000000000000605) != 0
            || v114 == 0;
        if (!v116 && (v113[4] & 0x10) == 0 && (v113[8] & 1) == 0) {
          goto LABEL_247;
        }
        if (v111)
        {
          unint64_t v109 = *(void *)v109 & 0xFFFFFFFFFFFFFFF8;
          if ((*v111 & 4) != 0) {
            goto LABEL_245;
          }
        }
        else
        {
          unint64_t v109 = 0;
        }
        while ((*(_WORD *)(v109 + 44) & 4) != 0)
          unint64_t v109 = *(void *)v109 & 0xFFFFFFFFFFFFFFF8;
LABEL_245:
        if (v109 != v110) {
          continue;
        }
        break;
      }
      unint64_t v109 = *(void *)(v108 + 56);
LABEL_247:
      uint64_t v107 = *(void *)(*(void *)(v107 + 32) + 328);
LABEL_258:
      unsigned int v1194 = 0;
      uint64_t v119 = *(void *)(*(void *)(v3 + 352) + 8);
      uint64_t v120 = 224160;
      if (!v106) {
        uint64_t v120 = 224208;
      }
      uint64_t v121 = *(llvm::MachineFunction **)(v107 + 32);
      v1213 = 0;
      uint64_t v122 = llvm::MachineFunction::CreateMachineInstr(v121, v119 + v120, (unsigned __int8 **)&v1213, 0);
      if (v1213)
      {
        int v548 = *(unsigned __int8 *)v1213;
        if ((v548 - 4) > 0x1E)
        {
          if ((v548 - 3) >= 0xFFFFFFFE) {
            v582 = v1213;
          }
          else {
            v582 = 0;
          }
          if ((v548 - 3) < 0xFFFFFFFE)
          {
            uint64_t v3 = (uint64_t)v1193;
            int v72 = v1150;
            uint64_t v73 = v1167;
            if (v548 == 3) {
              *((void *)v1213 + 1) = 0;
            }
            goto LABEL_261;
          }
          unint64_t v550 = (unint64_t)v582 + 8;
        }
        else
        {
          uint64_t v3 = (uint64_t)v1193;
          int v72 = v1150;
          uint64_t v73 = v1167;
          if ((*((unsigned char *)v1213 + 1) & 0x7F) != 2 && !*((_DWORD *)v1213 + 3)) {
            goto LABEL_261;
          }
          uint64_t v549 = *((void *)v1213 + 2);
          if ((v549 & 4) == 0) {
            goto LABEL_261;
          }
          unint64_t v550 = v549 & 0xFFFFFFFFFFFFFFF8;
          if (!v550) {
            goto LABEL_261;
          }
        }
        v1202 = &v1213;
        sub_1CC5FA668(v550 + 16, &v1202);
        uint64_t v3 = (uint64_t)v1193;
        int v72 = v1150;
        uint64_t v73 = v1167;
      }
LABEL_261:
      uint64_t v123 = *(void *)(v107 + 40);
      *((void *)v122 + 3) = v123;
      uint64_t v124 = *(void *)(v123 + 32);
      uint64_t v125 = *((unsigned int *)v122 + 10);
      uint64_t v76 = v1165;
      if (v125)
      {
        uint64_t v409 = *((void *)v122 + 4);
        uint64_t v410 = *(void *)(v124 + 40);
        uint64_t v411 = 32 * v125;
        do
        {
          if (!*(unsigned char *)v409)
          {
            uint64_t v412 = *(unsigned int *)(v409 + 4);
            if ((int)v412 >= 0) {
              uint64_t v413 = (uint64_t *)(*(void *)(v410 + 272) + 8 * v412);
            }
            else {
              uint64_t v413 = (uint64_t *)(*(void *)(v410 + 24) + 16 * (v412 & 0x7FFFFFFF) + 8);
            }
            uint64_t v414 = *v413;
            if (*v413)
            {
              uint64_t v415 = *(void *)(v414 + 16);
              *(void *)(v414 + 16) = v409;
              *(void *)(v409 + 16) = v415;
              if (*(unsigned char *)(v409 + 3))
              {
                *(void *)(v409 + 24) = v414;
              }
              else
              {
                *(void *)(v409 + 24) = 0;
                uint64_t v413 = (uint64_t *)(v415 + 24);
              }
            }
            else
            {
              *(void *)(v409 + 16) = v409;
              *(void *)(v409 + 24) = 0;
            }
            *uint64_t v413 = v409;
          }
          v409 += 32;
          v411 -= 32;
        }
        while (v411);
      }
      uint64_t v126 = *(void *)(v124 + 728);
      if (v126) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v126 + 24))(v126, v122);
      }
      unint64_t v127 = *(void *)v109 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v122 = v127 | *(void *)v122 & 7;
      *((void *)v122 + 1) = v109;
      *(void *)(v127 + 8) = v122;
      *(void *)unint64_t v109 = *(void *)v109 & 7 | (unint64_t)v122;
      LODWORD(v1202) = 1;
      uint64_t v1203 = 0;
      uint64_t v1204 = 0;
      llvm::MachineInstr::addOperand(v122, v121, (const llvm::MachineOperand *)&v1202);
      int v81 = v1168;
      if (v1194)
      {
        int v128 = *(unsigned __int8 *)v1194;
        if ((v128 - 4) > 0x1E)
        {
          if ((v128 - 3) >= 0xFFFFFFFE) {
            int64x2_t v292 = (unsigned __int8 *)v1194;
          }
          else {
            int64x2_t v292 = 0;
          }
          if ((v128 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v293 = (unint64_t)(v292 + 8);
            goto LABEL_489;
          }
          if (v128 == 3) {
            v1194[1] = 0;
          }
        }
        else if ((*((unsigned char *)v1194 + 1) & 0x7F) == 2 || *((_DWORD *)v1194 + 3))
        {
          unint64_t v544 = (unint64_t)v1194[2];
          if ((v544 & 4) != 0)
          {
            unint64_t v293 = v544 & 0xFFFFFFFFFFFFFFF8;
            if (v293)
            {
LABEL_489:
              v1202 = &v1194;
              sub_1CC5FA668(v293 + 16, &v1202);
            }
          }
        }
      }
LABEL_268:
      int v129 = **(unsigned __int16 **)(v75 + 16);
      if (!*(unsigned char *)(v3 + 386) || (v129 - 2862) > 0x6B)
      {
        if (**(unsigned __int16 **)(v75 + 16) <= 0x1E9u)
        {
          if (**(unsigned __int16 **)(v75 + 16) <= 0x12Eu)
          {
            if (v129 != 270)
            {
              if (v129 != 302)
              {
LABEL_411:
                if (!*(unsigned char *)(v3 + 391)
                  || *(void *)(v75 + 24) == *((void *)v76 + 41)
                  || (unsigned int v214 = sub_1CBC7A3F8(v129, 0x25u), (v129 - 5396) >= 0x1E0)
                  && ((unsigned int v215 = sub_1CB955634(v129) - 59, v215 > 7) || ((1 << v215) & 0xD3) == 0)
                  || (uint64_t v216 = *(void *)(v75 + 32),
                      uint64_t v217 = v214,
                      uint64_t v218 = 32 * v214,
                      (char v219 = *(unsigned char *)(v216 + v218)) != 0))
                {
                  if (!v81) {
                    goto LABEL_634;
                  }
                  goto LABEL_632;
                }
                int v1179 = 0;
                unsigned int v416 = (char *)v1187 + 48;
                v1170 = (void **)(v75 + 56);
                while (1)
                {
                  if (!v219)
                  {
                    uint64_t v417 = v217;
                    uint64_t v418 = v216 + 32 * v217;
                    int v419 = *(_DWORD *)(v418 + 4);
                    if (v419 != v1179)
                    {
                      (*(void (**)(void, llvm::MachineBasicBlock *, uint64_t, void **, uint64_t, void, void))(**(void **)(v3 + 352) + 400))(*(void *)(v3 + 352), v1187, v75, v1170, 185, *(unsigned int *)(v418 + 4), 0);
                      int v1179 = v419;
                    }
                    llvm::MachineOperand::setReg(v418, 0xB9u);
                    uint64_t v217 = v417;
                  }
                  uint64_t v420 = *(void *)v75;
                  if ((*(void *)v75 & 4) == 0 && (__int16 v421 = *(_WORD *)(v75 + 44), (v421 & 8) != 0))
                  {
                    uint64_t v426 = v75;
                    do
                      uint64_t v426 = *(void *)(v426 + 8);
                    while ((*(_WORD *)(v426 + 44) & 8) != 0);
                    if (*(char **)(v426 + 8) == v416) {
                      goto LABEL_886;
                    }
                    uint64_t v422 = v75;
                    if ((v421 & 8) != 0)
                    {
                      uint64_t v422 = v75;
                      do
                        uint64_t v422 = *(void *)(v422 + 8);
                      while ((*(_WORD *)(v422 + 44) & 8) != 0);
                    }
                  }
                  else
                  {
                    uint64_t v422 = v75;
                    if (*(char **)(v75 + 8) == v416)
                    {
                      uint64_t v427 = v75;
                      goto LABEL_693;
                    }
                  }
                  int v423 = **(unsigned __int16 **)(*(void *)(v422 + 8) + 16);
                  if ((v423 - 5396) >= 0x1E0)
                  {
                    int v424 = sub_1CB955634(v423);
                    if ((v424 - 59) > 7 || ((1 << (v424 - 59)) & 0xD3) == 0) {
                      break;
                    }
                  }
                  if ((v420 & 4) == 0)
                  {
                    while ((*(_WORD *)(v75 + 44) & 8) != 0)
                      uint64_t v75 = *(void *)(v75 + 8);
                  }
                  uint64_t v75 = *(void *)(v75 + 8);
                  uint64_t v216 = *(void *)(v75 + 32);
                  char v219 = *(unsigned char *)(v216 + v218);
                }
                uint64_t v427 = v75;
                if ((v420 & 4) == 0)
                {
LABEL_886:
                  uint64_t v427 = v75;
                  if ((*(_WORD *)(v75 + 44) & 8) != 0)
                  {
                    uint64_t v427 = v75;
                    do
                      uint64_t v427 = *(void *)(v427 + 8);
                    while ((*(_WORD *)(v427 + 44) & 8) != 0);
                  }
                }
LABEL_693:
                uint64_t v428 = *(unint64_t **)(v427 + 8);
                uint64_t v429 = *(void *)(*(void *)(v3 + 352) + 8);
                if (v78) {
                  uint64_t v430 = 195456;
                }
                else {
                  uint64_t v430 = 195504;
                }
                uint64_t v431 = v1187;
                uint64_t v284 = (llvm::MachineFunction *)*((void *)v1187 + 4);
                v432 = *v1170;
                v1213 = v432;
                if (v432) {
                  llvm::MetadataTracking::track((uint64_t)&v1213, (unsigned __int8 *)v432, 2);
                }
                uint64_t v286 = llvm::MachineFunction::CreateMachineInstr(v284, v429 + v430, (unsigned __int8 **)&v1213, 0);
                if (v1213)
                {
                  int v599 = *(unsigned __int8 *)v1213;
                  if ((v599 - 4) > 0x1E)
                  {
                    if ((v599 - 3) >= 0xFFFFFFFE) {
                      v604 = v1213;
                    }
                    else {
                      v604 = 0;
                    }
                    if ((v599 - 3) < 0xFFFFFFFE)
                    {
                      uint64_t v431 = v1187;
                      uint64_t v3 = (uint64_t)v1193;
                      int v72 = v1150;
                      uint64_t v73 = v1167;
                      if (v599 == 3) {
                        *((void *)v1213 + 1) = 0;
                      }
                      goto LABEL_699;
                    }
                    unint64_t v601 = (unint64_t)v604 + 8;
                  }
                  else
                  {
                    uint64_t v431 = v1187;
                    uint64_t v3 = (uint64_t)v1193;
                    int v72 = v1150;
                    uint64_t v73 = v1167;
                    if ((*((unsigned char *)v1213 + 1) & 0x7F) != 2 && !*((_DWORD *)v1213 + 3)) {
                      goto LABEL_699;
                    }
                    uint64_t v600 = *((void *)v1213 + 2);
                    if ((v600 & 4) == 0) {
                      goto LABEL_699;
                    }
                    unint64_t v601 = v600 & 0xFFFFFFFFFFFFFFF8;
                    if (!v601) {
                      goto LABEL_699;
                    }
                  }
                  v1202 = &v1213;
                  sub_1CC5FA668(v601 + 16, &v1202);
                  uint64_t v431 = v1187;
                  uint64_t v3 = (uint64_t)v1193;
                  int v72 = v1150;
                  uint64_t v73 = v1167;
                }
LABEL_699:
                uint64_t v433 = *((void *)v431 + 5);
                *((void *)v286 + 3) = v433;
                uint64_t v434 = *(void *)(v433 + 32);
                uint64_t v435 = *((unsigned int *)v286 + 10);
                if (v435)
                {
                  uint64_t v537 = *((void *)v286 + 4);
                  uint64_t v538 = *(void *)(v434 + 40);
                  uint64_t v539 = 32 * v435;
                  do
                  {
                    if (!*(unsigned char *)v537)
                    {
                      uint64_t v540 = *(unsigned int *)(v537 + 4);
                      if ((int)v540 >= 0) {
                        v541 = (uint64_t *)(*(void *)(v538 + 272) + 8 * v540);
                      }
                      else {
                        v541 = (uint64_t *)(*(void *)(v538 + 24) + 16 * (v540 & 0x7FFFFFFF) + 8);
                      }
                      uint64_t v542 = *v541;
                      if (*v541)
                      {
                        uint64_t v543 = *(void *)(v542 + 16);
                        *(void *)(v542 + 16) = v537;
                        *(void *)(v537 + 16) = v543;
                        if (*(unsigned char *)(v537 + 3))
                        {
                          *(void *)(v537 + 24) = v542;
                        }
                        else
                        {
                          *(void *)(v537 + 24) = 0;
                          v541 = (uint64_t *)(v543 + 24);
                        }
                      }
                      else
                      {
                        *(void *)(v537 + 16) = v537;
                        *(void *)(v537 + 24) = 0;
                      }
                      uint64_t *v541 = v537;
                    }
                    v537 += 32;
                    v539 -= 32;
                  }
                  while (v539);
                }
                uint64_t v436 = *(void *)(v434 + 728);
                if (v436) {
                  (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v436 + 24))(v436, v286);
                }
                unint64_t v437 = *v428 & 0xFFFFFFFFFFFFFFF8;
                *(void *)uint64_t v286 = v437 | *(void *)v286 & 7;
                *((void *)v286 + 1) = v428;
                *(void *)(v437 + 8) = v286;
                *uint64_t v428 = *v428 & 7 | (unint64_t)v286;
                uint64_t v1203 = 0;
                uint64_t v1204 = 0;
                uint64_t v1205 = 0;
                v1202 = (void *)0xB901000000;
                llvm::MachineInstr::addOperand(v286, v284, (const llvm::MachineOperand *)&v1202);
                LODWORD(v1202) = 1;
                uint64_t v1203 = 0;
                uint64_t v1204 = 0;
                llvm::MachineInstr::addOperand(v286, v284, (const llvm::MachineOperand *)&v1202);
                LODWORD(v1202) = 1;
                uint64_t v1203 = 0;
                uint64_t v1204 = 0;
LABEL_483:
                llvm::MachineInstr::addOperand(v286, v284, (const llvm::MachineOperand *)&v1202);
LABEL_632:
                int v1162 = 1;
                if ((void *)v75 != v1184) {
                  goto LABEL_633;
                }
                break;
              }
LABEL_377:
              if (*(unsigned char *)(v3 + 385))
              {
                int v185 = (*(unsigned __int16 *)(*(void *)v76 + 18) >> 4) & 0x3FF;
                if (v185 && v185 != 8 && v185 != 255)
                {
                  uint64_t v187 = (void *)*((void *)v76 + 41);
                  if (v187 == (void *)((char *)v76 + 320)
                    || (llvm::MachineFunction *)v187[1] == (llvm::MachineFunction *)((char *)v76 + 320))
                  {
                    uint64_t v188 = v76;
                    uint64_t v189 = *(void *)(v3 + 344);
                    int v190 = *(unsigned __int8 *)(v189 + 318);
                    int v191 = *(unsigned __int8 *)(v189 + 319);
                    int v192 = 4077;
                    if (!v191) {
                      int v192 = 4073;
                    }
                    if (v190) {
                      unsigned int v193 = 4075;
                    }
                    else {
                      unsigned int v193 = v192;
                    }
                    uint64_t v194 = *(void *)(*(void *)(v3 + 352) + 8);
                    uint64_t v195 = (llvm::MachineFunction *)*((void *)v1187 + 4);
                    unsigned int v196 = *(void **)(v75 + 56);
                    v1213 = v196;
                    if (v196) {
                      llvm::MetadataTracking::track((uint64_t)&v1213, (unsigned __int8 *)v196, 2);
                    }
                    char v197 = llvm::MachineFunction::CreateMachineInstr(v195, v194 + 48 * v193, (unsigned __int8 **)&v1213, 0);
                    if (v1213)
                    {
                      int v590 = *(unsigned __int8 *)v1213;
                      if ((v590 - 4) > 0x1E)
                      {
                        if ((v590 - 3) >= 0xFFFFFFFE) {
                          v602 = v1213;
                        }
                        else {
                          v602 = 0;
                        }
                        if ((v590 - 3) < 0xFFFFFFFE)
                        {
                          uint64_t v3 = (uint64_t)v1193;
                          int v72 = v1150;
                          if (v590 == 3) {
                            *((void *)v1213 + 1) = 0;
                          }
                          goto LABEL_393;
                        }
                        unint64_t v592 = (unint64_t)v602 + 8;
                      }
                      else
                      {
                        uint64_t v3 = (uint64_t)v1193;
                        int v72 = v1150;
                        if ((*((unsigned char *)v1213 + 1) & 0x7F) != 2 && !*((_DWORD *)v1213 + 3)) {
                          goto LABEL_393;
                        }
                        uint64_t v591 = *((void *)v1213 + 2);
                        if ((v591 & 4) == 0) {
                          goto LABEL_393;
                        }
                        unint64_t v592 = v591 & 0xFFFFFFFFFFFFFFF8;
                        if (!v592) {
                          goto LABEL_393;
                        }
                      }
                      v1202 = &v1213;
                      sub_1CC5FA668(v592 + 16, &v1202);
                      uint64_t v3 = (uint64_t)v1193;
                      int v72 = v1150;
                    }
LABEL_393:
                    uint64_t v198 = *((void *)v1187 + 5);
                    *((void *)v197 + 3) = v198;
                    uint64_t v199 = *(void *)(v198 + 32);
                    uint64_t v200 = *((unsigned int *)v197 + 10);
                    if (v200)
                    {
                      uint64_t v523 = *((void *)v197 + 4);
                      uint64_t v524 = *(void *)(v199 + 40);
                      uint64_t v525 = 32 * v200;
                      do
                      {
                        if (!*(unsigned char *)v523)
                        {
                          uint64_t v526 = *(unsigned int *)(v523 + 4);
                          if ((int)v526 >= 0) {
                            unsigned int v527 = (uint64_t *)(*(void *)(v524 + 272) + 8 * v526);
                          }
                          else {
                            unsigned int v527 = (uint64_t *)(*(void *)(v524 + 24) + 16 * (v526 & 0x7FFFFFFF) + 8);
                          }
                          uint64_t v528 = *v527;
                          if (*v527)
                          {
                            uint64_t v529 = *(void *)(v528 + 16);
                            *(void *)(v528 + 16) = v523;
                            *(void *)(v523 + 16) = v529;
                            if (*(unsigned char *)(v523 + 3))
                            {
                              *(void *)(v523 + 24) = v528;
                            }
                            else
                            {
                              *(void *)(v523 + 24) = 0;
                              unsigned int v527 = (uint64_t *)(v529 + 24);
                            }
                          }
                          else
                          {
                            *(void *)(v523 + 16) = v523;
                            *(void *)(v523 + 24) = 0;
                          }
                          *unsigned int v527 = v523;
                        }
                        v523 += 32;
                        v525 -= 32;
                      }
                      while (v525);
                    }
                    uint64_t v201 = *(void *)(v199 + 728);
                    if (v201) {
                      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v201 + 24))(v201, v197);
                    }
                    unint64_t v202 = *(void *)v75 & 0xFFFFFFFFFFFFFFF8;
                    *(void *)char v197 = v202 | *(void *)v197 & 7;
                    *((void *)v197 + 1) = v75;
                    *(void *)(v202 + 8) = v197;
                    *(void *)uint64_t v75 = *(void *)v75 & 7 | (unint64_t)v197;
                    if (v191) {
                      int v203 = 56;
                    }
                    else {
                      int v203 = v1178;
                    }
                    uint64_t v1203 = 0;
                    uint64_t v1204 = 0;
                    uint64_t v1205 = 0;
                    HIDWORD(v1202) = v203;
                    LODWORD(v1202) = 0x1000000;
                    llvm::MachineInstr::addOperand(v197, v195, (const llvm::MachineOperand *)&v1202);
                    LODWORD(v1202) = 1;
                    uint64_t v1203 = 0;
                    uint64_t v1204 = 0;
                    llvm::MachineInstr::addOperand(v197, v195, (const llvm::MachineOperand *)&v1202);
                    LODWORD(v1202) = 1;
                    uint64_t v1203 = 0;
                    uint64_t v1204 = 0;
                    llvm::MachineInstr::addOperand(v197, v195, (const llvm::MachineOperand *)&v1202);
                    uint64_t v204 = *(void *)(*(void *)(v3 + 352) + 8);
                    if (v190) {
                      uint64_t v205 = 195456;
                    }
                    else {
                      uint64_t v205 = 195504;
                    }
                    uint64_t v206 = (llvm::MachineFunction *)*((void *)v1187 + 4);
                    uint64_t v207 = *(void **)(v75 + 56);
                    v1213 = v207;
                    if (v207) {
                      llvm::MetadataTracking::track((uint64_t)&v1213, (unsigned __int8 *)v207, 2);
                    }
                    uint64_t v208 = llvm::MachineFunction::CreateMachineInstr(v206, v204 + v205, (unsigned __int8 **)&v1213, 0);
                    if (v1213)
                    {
                      int v593 = *(unsigned __int8 *)v1213;
                      if ((v593 - 4) > 0x1E)
                      {
                        if ((v593 - 3) >= 0xFFFFFFFE) {
                          v603 = v1213;
                        }
                        else {
                          v603 = 0;
                        }
                        if ((v593 - 3) < 0xFFFFFFFE)
                        {
                          uint64_t v3 = (uint64_t)v1193;
                          int v72 = v1150;
                          if (v593 == 3) {
                            *((void *)v1213 + 1) = 0;
                          }
                          goto LABEL_405;
                        }
                        unint64_t v595 = (unint64_t)v603 + 8;
                      }
                      else
                      {
                        uint64_t v3 = (uint64_t)v1193;
                        int v72 = v1150;
                        if ((*((unsigned char *)v1213 + 1) & 0x7F) != 2 && !*((_DWORD *)v1213 + 3)) {
                          goto LABEL_405;
                        }
                        uint64_t v594 = *((void *)v1213 + 2);
                        if ((v594 & 4) == 0) {
                          goto LABEL_405;
                        }
                        unint64_t v595 = v594 & 0xFFFFFFFFFFFFFFF8;
                        if (!v595) {
                          goto LABEL_405;
                        }
                      }
                      v1202 = &v1213;
                      sub_1CC5FA668(v595 + 16, &v1202);
                      uint64_t v3 = (uint64_t)v1193;
                      int v72 = v1150;
                    }
LABEL_405:
                    uint64_t v209 = *((void *)v1187 + 5);
                    *((void *)v208 + 3) = v209;
                    uint64_t v210 = *(void *)(v209 + 32);
                    uint64_t v211 = *((unsigned int *)v208 + 10);
                    if (v211)
                    {
                      uint64_t v530 = *((void *)v208 + 4);
                      uint64_t v531 = *(void *)(v210 + 40);
                      uint64_t v532 = 32 * v211;
                      do
                      {
                        if (!*(unsigned char *)v530)
                        {
                          uint64_t v533 = *(unsigned int *)(v530 + 4);
                          if ((int)v533 >= 0) {
                            v534 = (uint64_t *)(*(void *)(v531 + 272) + 8 * v533);
                          }
                          else {
                            v534 = (uint64_t *)(*(void *)(v531 + 24) + 16 * (v533 & 0x7FFFFFFF) + 8);
                          }
                          uint64_t v535 = *v534;
                          if (*v534)
                          {
                            uint64_t v536 = *(void *)(v535 + 16);
                            *(void *)(v535 + 16) = v530;
                            *(void *)(v530 + 16) = v536;
                            if (*(unsigned char *)(v530 + 3))
                            {
                              *(void *)(v530 + 24) = v535;
                            }
                            else
                            {
                              *(void *)(v530 + 24) = 0;
                              v534 = (uint64_t *)(v536 + 24);
                            }
                          }
                          else
                          {
                            *(void *)(v530 + 16) = v530;
                            *(void *)(v530 + 24) = 0;
                          }
                          uint64_t *v534 = v530;
                        }
                        v530 += 32;
                        v532 -= 32;
                      }
                      while (v532);
                    }
                    uint64_t v212 = *(void *)(v210 + 728);
                    if (v212) {
                      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v212 + 24))(v212, v208);
                    }
                    unint64_t v213 = *(void *)v75 & 0xFFFFFFFFFFFFFFF8;
                    *(void *)uint64_t v208 = v213 | *(void *)v208 & 7;
                    *((void *)v208 + 1) = v75;
                    *(void *)(v213 + 8) = v208;
                    *(void *)uint64_t v75 = *(void *)v75 & 7 | (unint64_t)v208;
                    uint64_t v1203 = 0;
                    uint64_t v1204 = 0;
                    uint64_t v1205 = 0;
                    v1202 = (void *)0xBD01000000;
                    llvm::MachineInstr::addOperand(v208, v206, (const llvm::MachineOperand *)&v1202);
                    LODWORD(v1202) = 1;
                    uint64_t v1203 = 0;
                    uint64_t v1204 = 0;
                    llvm::MachineInstr::addOperand(v208, v206, (const llvm::MachineOperand *)&v1202);
                    LODWORD(v1202) = 1;
                    uint64_t v1203 = 0;
                    uint64_t v1204 = 0;
                    llvm::MachineInstr::addOperand(v208, v206, (const llvm::MachineOperand *)&v1202);
                    *(unsigned char *)(v3 + 385) = 0;
                    int v129 = **(unsigned __int16 **)(v75 + 16);
                    uint64_t v76 = v188;
                  }
                }
              }
              uint64_t v220 = *(void **)(v75 + 24);
              v1166 = v76;
              if (v129 == 673)
              {
                long long v221 = *(unsigned char **)(v3 + 344);
                if (v221[318]) {
                  int v222 = 411;
                }
                else {
                  int v222 = 158;
                }
                if (v221[318]) {
                  int v223 = 5;
                }
                else {
                  int v223 = 33;
                }
                unsigned int v224 = sub_1CB952700(v223, v222, v221);
                uint64_t v225 = *(void *)(*(void *)(v3 + 352) + 8);
                char v226 = (llvm::MachineFunction *)v220[4];
                uint64_t v227 = *(void **)(v75 + 56);
                v1213 = v227;
                if (v227) {
                  llvm::MetadataTracking::track((uint64_t)&v1213, (unsigned __int8 *)v227, 2);
                }
                uint64_t v228 = llvm::MachineFunction::CreateMachineInstr(v226, v225 + 48 * v224, (unsigned __int8 **)&v1213, 0);
                uint64_t v73 = v1167;
                if (v1213)
                {
                  int v551 = *(unsigned __int8 *)v1213;
                  if ((v551 - 4) > 0x1E)
                  {
                    if ((v551 - 3) >= 0xFFFFFFFE) {
                      v583 = v1213;
                    }
                    else {
                      v583 = 0;
                    }
                    if ((v551 - 3) < 0xFFFFFFFE)
                    {
                      uint64_t v3 = (uint64_t)v1193;
                      int v72 = v1150;
                      uint64_t v73 = v1167;
                      if (v551 == 3) {
                        *((void *)v1213 + 1) = 0;
                      }
                      goto LABEL_429;
                    }
                    unint64_t v553 = (unint64_t)v583 + 8;
                  }
                  else
                  {
                    uint64_t v3 = (uint64_t)v1193;
                    int v72 = v1150;
                    uint64_t v73 = v1167;
                    if ((*((unsigned char *)v1213 + 1) & 0x7F) != 2 && !*((_DWORD *)v1213 + 3)) {
                      goto LABEL_429;
                    }
                    uint64_t v552 = *((void *)v1213 + 2);
                    if ((v552 & 4) == 0) {
                      goto LABEL_429;
                    }
                    unint64_t v553 = v552 & 0xFFFFFFFFFFFFFFF8;
                    if (!v553) {
                      goto LABEL_429;
                    }
                  }
                  v1202 = &v1213;
                  sub_1CC5FA668(v553 + 16, &v1202);
                  uint64_t v3 = (uint64_t)v1193;
                  int v72 = v1150;
                  uint64_t v73 = v1167;
                }
LABEL_429:
                uint64_t v229 = v220[5];
                *((void *)v228 + 3) = v229;
                uint64_t v230 = *(void *)(v229 + 32);
                uint64_t v231 = *((unsigned int *)v228 + 10);
                if (v231)
                {
                  uint64_t v438 = *((void *)v228 + 4);
                  uint64_t v439 = *(void *)(v230 + 40);
                  uint64_t v440 = 32 * v231;
                  do
                  {
                    if (!*(unsigned char *)v438)
                    {
                      uint64_t v441 = *(unsigned int *)(v438 + 4);
                      if ((int)v441 >= 0) {
                        uint64_t v442 = (uint64_t *)(*(void *)(v439 + 272) + 8 * v441);
                      }
                      else {
                        uint64_t v442 = (uint64_t *)(*(void *)(v439 + 24) + 16 * (v441 & 0x7FFFFFFF) + 8);
                      }
                      uint64_t v443 = *v442;
                      if (*v442)
                      {
                        uint64_t v444 = *(void *)(v443 + 16);
                        *(void *)(v443 + 16) = v438;
                        *(void *)(v438 + 16) = v444;
                        if (*(unsigned char *)(v438 + 3))
                        {
                          *(void *)(v438 + 24) = v443;
                        }
                        else
                        {
                          *(void *)(v438 + 24) = 0;
                          uint64_t v442 = (uint64_t *)(v444 + 24);
                        }
                      }
                      else
                      {
                        *(void *)(v438 + 16) = v438;
                        *(void *)(v438 + 24) = 0;
                      }
                      *uint64_t v442 = v438;
                    }
                    v438 += 32;
                    v440 -= 32;
                  }
                  while (v440);
                }
                uint64_t v232 = *(void *)(v230 + 728);
                if (v232) {
                  (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v232 + 24))(v232, v228);
                }
                unint64_t v233 = *(void *)v75 & 0xFFFFFFFFFFFFFFF8;
                *(void *)uint64_t v228 = v233 | *(void *)v228 & 7;
                *((void *)v228 + 1) = v75;
                *(void *)(v233 + 8) = v228;
                *(void *)uint64_t v75 = *(void *)v75 & 7 | (unint64_t)v228;
                uint64_t v1203 = 0;
                uint64_t v1204 = 0;
                uint64_t v1205 = 0;
                HIDWORD(v1202) = v1178;
                LODWORD(v1202) = 0x1000000;
                llvm::MachineInstr::addOperand(v228, v226, (const llvm::MachineOperand *)&v1202);
                LODWORD(v1202) = 1;
                uint64_t v1203 = 0;
                uint64_t v1204 = 0;
                llvm::MachineInstr::addOperand(v228, v226, (const llvm::MachineOperand *)&v1202);
                LODWORD(v1202) = 1;
                uint64_t v1203 = 0;
                uint64_t v1204 = 0;
                llvm::MachineInstr::addOperand(v228, v226, (const llvm::MachineOperand *)&v1202);
                LODWORD(v1202) = 1;
                uint64_t v1203 = 0;
                uint64_t v1204 = 0;
                llvm::MachineInstr::addOperand(v228, v226, (const llvm::MachineOperand *)&v1202);
                LODWORD(v1202) = 1;
                uint64_t v1203 = 0;
                uint64_t v1204 = 0;
                llvm::MachineInstr::addOperand(v228, v226, (const llvm::MachineOperand *)&v1202);
                LODWORD(v1202) = 1;
                uint64_t v1203 = 0;
                uint64_t v1204 = 2;
                llvm::MachineInstr::addOperand(v228, v226, (const llvm::MachineOperand *)&v1202);
                uint64_t v234 = *(void *)(*(void *)(v3 + 352) + 8);
                if (*(unsigned char *)(*(void *)(v3 + 344) + 327)) {
                  uint64_t v235 = 25872;
                }
                else {
                  uint64_t v235 = 26640;
                }
                unint64_t v236 = v220;
                uint64_t v237 = (llvm::MachineFunction *)v220[4];
                unsigned int v238 = *(void **)(v75 + 56);
                v1213 = v238;
                if (v238) {
                  llvm::MetadataTracking::track((uint64_t)&v1213, (unsigned __int8 *)v238, 2);
                }
                uint64_t v239 = llvm::MachineFunction::CreateMachineInstr(v237, v234 + v235, (unsigned __int8 **)&v1213, 0);
                if (v1213)
                {
                  int v554 = *(unsigned __int8 *)v1213;
                  if ((v554 - 4) > 0x1E)
                  {
                    if ((v554 - 3) >= 0xFFFFFFFE) {
                      v584 = v1213;
                    }
                    else {
                      v584 = 0;
                    }
                    if ((v554 - 3) < 0xFFFFFFFE)
                    {
                      uint64_t v3 = (uint64_t)v1193;
                      int v72 = v1150;
                      uint64_t v73 = v1167;
                      if (v554 == 3) {
                        *((void *)v1213 + 1) = 0;
                      }
                      goto LABEL_438;
                    }
                    unint64_t v556 = (unint64_t)v584 + 8;
                  }
                  else
                  {
                    uint64_t v3 = (uint64_t)v1193;
                    int v72 = v1150;
                    uint64_t v73 = v1167;
                    if ((*((unsigned char *)v1213 + 1) & 0x7F) != 2 && !*((_DWORD *)v1213 + 3)) {
                      goto LABEL_438;
                    }
                    uint64_t v555 = *((void *)v1213 + 2);
                    if ((v555 & 4) == 0) {
                      goto LABEL_438;
                    }
                    unint64_t v556 = v555 & 0xFFFFFFFFFFFFFFF8;
                    if (!v556) {
                      goto LABEL_438;
                    }
                  }
                  v1202 = &v1213;
                  sub_1CC5FA668(v556 + 16, &v1202);
                  uint64_t v3 = (uint64_t)v1193;
                  int v72 = v1150;
                  uint64_t v73 = v1167;
                }
LABEL_438:
                uint64_t v240 = v236[5];
                *((void *)v239 + 3) = v240;
                uint64_t v241 = *(void *)(v240 + 32);
                uint64_t v242 = *((unsigned int *)v239 + 10);
                if (v242)
                {
                  uint64_t v445 = *((void *)v239 + 4);
                  uint64_t v446 = *(void *)(v241 + 40);
                  uint64_t v447 = 32 * v242;
                  do
                  {
                    if (!*(unsigned char *)v445)
                    {
                      uint64_t v448 = *(unsigned int *)(v445 + 4);
                      if ((int)v448 >= 0) {
                        uint64_t v449 = (uint64_t *)(*(void *)(v446 + 272) + 8 * v448);
                      }
                      else {
                        uint64_t v449 = (uint64_t *)(*(void *)(v446 + 24) + 16 * (v448 & 0x7FFFFFFF) + 8);
                      }
                      uint64_t v450 = *v449;
                      if (*v449)
                      {
                        uint64_t v451 = *(void *)(v450 + 16);
                        *(void *)(v450 + 16) = v445;
                        *(void *)(v445 + 16) = v451;
                        if (*(unsigned char *)(v445 + 3))
                        {
                          *(void *)(v445 + 24) = v450;
                        }
                        else
                        {
                          *(void *)(v445 + 24) = 0;
                          uint64_t v449 = (uint64_t *)(v451 + 24);
                        }
                      }
                      else
                      {
                        *(void *)(v445 + 16) = v445;
                        *(void *)(v445 + 24) = 0;
                      }
                      uint64_t *v449 = v445;
                    }
                    v445 += 32;
                    v447 -= 32;
                  }
                  while (v447);
                }
                uint64_t v243 = *(void *)(v241 + 728);
                if (v243) {
                  (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v243 + 24))(v243, v239);
                }
                unint64_t v244 = *(void *)v75 & 0xFFFFFFFFFFFFFFF8;
                *(void *)uint64_t v239 = v244 | *(void *)v239 & 7;
                *((void *)v239 + 1) = v75;
                *(void *)(v244 + 8) = v239;
                *(void *)uint64_t v75 = *(void *)v75 & 7 | (unint64_t)v239;
                llvm::MachineInstr::addOperand(v239, v237, *(const llvm::MachineOperand **)(v75 + 32));
                uint64_t v245 = *(void *)(*(void *)(v3 + 352) + 8);
                if (*(unsigned char *)(*(void *)(v3 + 344) + 318)) {
                  uint64_t v246 = 34896;
                }
                else {
                  uint64_t v246 = 34944;
                }
                uint64_t v247 = (llvm::MachineFunction *)v236[4];
                uint64_t v248 = *(void **)(v75 + 56);
                v1213 = v248;
                if (v248) {
                  llvm::MetadataTracking::track((uint64_t)&v1213, (unsigned __int8 *)v248, 2);
                }
                long long v249 = llvm::MachineFunction::CreateMachineInstr(v247, v245 + v246, (unsigned __int8 **)&v1213, 0);
                if (v1213)
                {
                  int v557 = *(unsigned __int8 *)v1213;
                  if ((v557 - 4) > 0x1E)
                  {
                    if ((v557 - 3) >= 0xFFFFFFFE) {
                      uint64_t v585 = v1213;
                    }
                    else {
                      uint64_t v585 = 0;
                    }
                    if ((v557 - 3) < 0xFFFFFFFE)
                    {
                      uint64_t v3 = (uint64_t)v1193;
                      int v72 = v1150;
                      uint64_t v73 = v1167;
                      if (v557 == 3) {
                        *((void *)v1213 + 1) = 0;
                      }
                      goto LABEL_447;
                    }
                    unint64_t v559 = (unint64_t)v585 + 8;
                  }
                  else
                  {
                    uint64_t v3 = (uint64_t)v1193;
                    int v72 = v1150;
                    uint64_t v73 = v1167;
                    if ((*((unsigned char *)v1213 + 1) & 0x7F) != 2 && !*((_DWORD *)v1213 + 3)) {
                      goto LABEL_447;
                    }
                    uint64_t v558 = *((void *)v1213 + 2);
                    if ((v558 & 4) == 0) {
                      goto LABEL_447;
                    }
                    unint64_t v559 = v558 & 0xFFFFFFFFFFFFFFF8;
                    if (!v559) {
                      goto LABEL_447;
                    }
                  }
                  v1202 = &v1213;
                  sub_1CC5FA668(v559 + 16, &v1202);
                  uint64_t v3 = (uint64_t)v1193;
                  int v72 = v1150;
                  uint64_t v73 = v1167;
                }
LABEL_447:
                uint64_t v250 = v236[5];
                *((void *)v249 + 3) = v250;
                uint64_t v251 = *(void *)(v250 + 32);
                uint64_t v252 = *((unsigned int *)v249 + 10);
                if (v252)
                {
                  uint64_t v452 = *((void *)v249 + 4);
                  uint64_t v453 = *(void *)(v251 + 40);
                  uint64_t v454 = 32 * v252;
                  do
                  {
                    if (!*(unsigned char *)v452)
                    {
                      uint64_t v455 = *(unsigned int *)(v452 + 4);
                      if ((int)v455 >= 0) {
                        uint64_t v456 = (uint64_t *)(*(void *)(v453 + 272) + 8 * v455);
                      }
                      else {
                        uint64_t v456 = (uint64_t *)(*(void *)(v453 + 24) + 16 * (v455 & 0x7FFFFFFF) + 8);
                      }
                      uint64_t v457 = *v456;
                      if (*v456)
                      {
                        uint64_t v458 = *(void *)(v457 + 16);
                        *(void *)(v457 + 16) = v452;
                        *(void *)(v452 + 16) = v458;
                        if (*(unsigned char *)(v452 + 3))
                        {
                          *(void *)(v452 + 24) = v457;
                        }
                        else
                        {
                          *(void *)(v452 + 24) = 0;
                          uint64_t v456 = (uint64_t *)(v458 + 24);
                        }
                      }
                      else
                      {
                        *(void *)(v452 + 16) = v452;
                        *(void *)(v452 + 24) = 0;
                      }
                      *uint64_t v456 = v452;
                    }
                    v452 += 32;
                    v454 -= 32;
                  }
                  while (v454);
                }
                uint64_t v253 = *(void *)(v251 + 728);
                if (v253) {
                  (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v253 + 24))(v253, v249);
                }
                unint64_t v254 = *(void *)v75 & 0xFFFFFFFFFFFFFFF8;
                *(void *)long long v249 = v254 | *(void *)v249 & 7;
                *((void *)v249 + 1) = v75;
                *(void *)(v254 + 8) = v249;
                *(void *)uint64_t v75 = *(void *)v75 & 7 | (unint64_t)v249;
                uint64_t v1203 = 0;
                uint64_t v1204 = 0;
                uint64_t v1205 = 0;
                HIDWORD(v1202) = v1178;
                LODWORD(v1202) = 0x1000000;
                llvm::MachineInstr::addOperand(v249, v247, (const llvm::MachineOperand *)&v1202);
                LODWORD(v1202) = 1;
                uint64_t v1203 = 0;
                uint64_t v1204 = 0;
                llvm::MachineInstr::addOperand(v249, v247, (const llvm::MachineOperand *)&v1202);
                LODWORD(v1202) = 1;
                uint64_t v1203 = 0;
                uint64_t v1204 = 2;
                llvm::MachineInstr::addOperand(v249, v247, (const llvm::MachineOperand *)&v1202);
                uint64_t j = (unint64_t *)v75;
LABEL_630:
                llvm::MachineInstr::copyImplicitOps(v239, v76, (const llvm::MachineInstr *)v75);
                if (v1200 >= (unint64_t)DWORD1(v1200)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v1199 + v1200) = v75;
                LODWORD(v1200) = v1200 + 1;
                uint64_t v75 = (uint64_t)j;
                goto LABEL_632;
              }
              v1163 = (llvm::MachineFunction *)v220[4];
              int v1149 = *(unsigned __int8 *)(*(void *)(v3 + 344) + 318);
              v1202 = &v1204;
              uint64_t v1203 = 0x1000000000;
              uint64_t v255 = v220[11];
              uint64_t v256 = v220[12];
              if (v255 == v256)
              {
                unsigned int v257 = 0;
              }
              else
              {
                unsigned int v257 = 0;
                do
                {
                  uint64_t v258 = *(unsigned __int16 **)(*(void *)v255 + 152);
                  for (uint64_t i = *(unsigned __int16 **)(*(void *)v255 + 160); v258 != i; v258 += 8)
                  {
                    if (v257 >= HIDWORD(v1203)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((_DWORD *)v1202 + v257) = *v258;
                    unsigned int v257 = v1203 + 1;
                    LODWORD(v1203) = v1203 + 1;
                  }
                  v255 += 8;
                }
                while (v255 != v256);
              }
              uint64_t v294 = v75;
              for (uint64_t j = v220 + 6; (void *)v294 != v220 + 6; v294 = *(void *)(v294 + 8))
              {
                uint64_t v295 = *(unsigned int *)(v294 + 40);
                if (v295)
                {
                  uint64_t v296 = 32 * v295;
                  uint64_t v297 = (_DWORD *)(*(void *)(v294 + 32) + 4);
                  do
                  {
                    if ((*(v297 - 1) & 0x10000FF) == 0)
                    {
                      if (v257 >= HIDWORD(v1203)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((_DWORD *)v1202 + v257) = *v297;
                      unsigned int v257 = v1203 + 1;
                      LODWORD(v1203) = v1203 + 1;
                    }
                    v297 += 8;
                    v296 -= 32;
                  }
                  while (v296);
                  if (!v294) {
                    goto LABEL_504;
                  }
                }
                if ((*(unsigned char *)v294 & 4) == 0)
                {
LABEL_504:
                  while ((*(_WORD *)(v294 + 44) & 8) != 0)
                    uint64_t v294 = *(void *)(v294 + 8);
                }
              }
              unint64_t v298 = 126 - 2 * __clz(v257);
              if (v257) {
                uint64_t v299 = v298;
              }
              else {
                uint64_t v299 = 0;
              }
              sub_1CB945E18((uint64_t)v1202, (unsigned int *)v1202 + v257, (uint64_t)&v1213, v299, 1);
              uint64_t v300 = v1202;
              uint64_t v301 = (char *)v1202 + 4 * v1203;
              if (v1203)
              {
                uint64_t v302 = (char *)v1202 - 4;
                uint64_t v303 = 4 * v1203 - 4;
                while (v303)
                {
                  int v304 = *((_DWORD *)v302 + 1);
                  int v305 = *((_DWORD *)v302 + 2);
                  v302 += 4;
                  v303 -= 4;
                  if (v304 == v305) {
                    goto LABEL_515;
                  }
                }
              }
              else
              {
                uint64_t v302 = (char *)v1202;
LABEL_515:
                if (v302 != v301)
                {
                  long long v306 = v302 + 8;
                  if (v302 + 8 != v301)
                  {
                    int v307 = *(_DWORD *)v302;
                    do
                    {
                      int v308 = v307;
                      int v307 = *(_DWORD *)v306;
                      if (v308 != *(_DWORD *)v306)
                      {
                        *((_DWORD *)v302 + 1) = v307;
                        v302 += 4;
                      }
                      v306 += 4;
                    }
                    while (v306 != v301);
                  }
                  uint64_t v301 = v302 + 4;
                }
              }
              LODWORD(v1203) = (unint64_t)(v301 - v300) >> 2;
              char v309 = (char *)v220[11];
              int v310 = (char *)v220[12];
              v1213 = &v1215;
              uint64_t v1214 = 0x800000000;
              unint64_t v311 = v310 - v309;
              if ((unint64_t)(v310 - v309) >= 0x41) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v309 != v310)
              {
                uint64_t v312 = v1213;
                do
                {
                  uint64_t v313 = *(void *)v309;
                  v309 += 8;
                  *v312++ = v313;
                }
                while (v309 != v310);
              }
              LODWORD(v1214) = v311 >> 3;
              v1188 = (llvm::MachineBasicBlock *)v220;
              int v314 = (const llvm::BasicBlock *)v220[2];
              unsigned int v315 = (llvm::MachineBasicBlock *)*((void *)v1163 + 39);
              if (v315)
              {
                *((void *)v1163 + 39) = *(void *)v315;
              }
              else
              {
                *((void *)v1163 + 26) += 232;
                uint64_t v316 = *((void *)v1163 + 16);
                if (((v316 + 7) & 0xFFFFFFFFFFFFFFF8) - v316 + 232 > *((void *)v1163 + 17) - v316)
                {
                  unsigned int v517 = *((_DWORD *)v1163 + 38) >> 7;
                  if (v517 >= 0x1E) {
                    LOBYTE(v517) = 30;
                  }
                  uint64_t v518 = 4096 << v517;
                  unsigned int v315 = (llvm::MachineBasicBlock *)operator new(4096 << v517, (std::align_val_t)8uLL);
                  unint64_t v519 = *((unsigned int *)v1163 + 38);
                  if (v519 >= *((unsigned int *)v1163 + 39)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *(void *)(*((void *)v1163 + 18) + 8 * v519) = v315;
                  ++*((_DWORD *)v1163 + 38);
                  *((void *)v1163 + 16) = (char *)v315 + 232;
                  *((void *)v1163 + 17) = (char *)v315 + v518;
                }
                else
                {
                  unsigned int v315 = (llvm::MachineBasicBlock *)((v316 + 7) & 0xFFFFFFFFFFFFFFF8);
                  *((void *)v1163 + 16) = (char *)v315 + 232;
                }
              }
              llvm::MachineBasicBlock::MachineBasicBlock(v315, v1163, v314);
              uint64_t v317 = (llvm::MachineBasicBlock **)*((void *)v1188 + 1);
              llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)v1163 + 320, (uint64_t)v315);
              uint64_t v318 = *v317;
              *(void *)unsigned int v315 = *v317;
              *((void *)v315 + 1) = v317;
              *((void *)v318 + 1) = v315;
              *uint64_t v317 = v315;
              int8x8_t v319 = (unint64_t *)*((void *)v315 + 7);
              if (!v75 || (uint64_t v320 = v75, (*(unsigned char *)v75 & 4) == 0))
              {
                uint64_t v320 = v75;
                if ((*(_WORD *)(v75 + 44) & 8) != 0)
                {
                  uint64_t v320 = v75;
                  do
                    uint64_t v320 = *(void *)(v320 + 8);
                  while ((*(_WORD *)(v320 + 44) & 8) != 0);
                }
              }
              uint64_t v321 = *(unint64_t **)(v320 + 8);
              if (v321 != j && v319 != j)
              {
                if (v315 != v1188)
                {
                  unint64_t v487 = *((void *)v315 + 5);
                  unsigned int v488 = v321;
                  do
                  {
                    v488[3] = v487;
                    unsigned int v488 = (unint64_t *)v488[1];
                  }
                  while (v488 != j);
                }
                unint64_t v323 = *j;
                unint64_t v324 = *j & 0xFFFFFFFFFFFFFFF8;
                unint64_t v325 = *v321 & 0xFFFFFFFFFFFFFFF8;
                *(void *)(v325 + 8) = j;
                *uint64_t j = v325 | v323 & 7;
                unint64_t v326 = *v319 & 0xFFFFFFFFFFFFFFF8;
                *(void *)(v324 + 8) = v319;
                *uint64_t v321 = v326 | *v321 & 7;
                *(void *)(v326 + 8) = v321;
                *int8x8_t v319 = v323 & 0xFFFFFFFFFFFFFFF8 | *v319 & 7;
              }
              llvm::MachineBasicBlock::transferSuccessorsAndUpdatePHIs((unsigned int *)v315, v1188);
              if (v1203)
              {
                uint64_t v327 = (char *)v1202;
                unsigned int v328 = (char *)v1202 + 4 * v1203;
                do
                {
                  int v329 = *(_DWORD *)v327;
                  if (*(_DWORD *)v327)
                  {
                    uint64_t v331 = (char *)*((void *)v315 + 20);
                    unint64_t v330 = *((void *)v315 + 21);
                    if ((unint64_t)v331 >= v330)
                    {
                      char v333 = (char *)*((void *)v315 + 19);
                      uint64_t v334 = (v331 - v333) >> 4;
                      unint64_t v335 = v334 + 1;
                      if ((unint64_t)(v334 + 1) >> 60) {
LABEL_2226:
                      }
                        abort();
                      uint64_t v336 = v330 - (void)v333;
                      if (v336 >> 3 > v335) {
                        unint64_t v335 = v336 >> 3;
                      }
                      if ((unint64_t)v336 >= 0x7FFFFFFFFFFFFFF0) {
                        unint64_t v337 = 0xFFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v337 = v335;
                      }
                      if (v337)
                      {
                        if (v337 >> 60) {
LABEL_2227:
                        }
                          sub_1CB833614();
                        uint64_t v338 = (char *)operator new(16 * v337);
                      }
                      else
                      {
                        uint64_t v338 = 0;
                      }
                      unsigned int v339 = &v338[16 * v334];
                      *(_WORD *)unsigned int v339 = v329;
                      *((void *)v339 + 1) = -1;
                      __int16 v340 = v339;
                      if (v331 != v333)
                      {
                        do
                        {
                          *((_OWORD *)v340 - 1) = *((_OWORD *)v331 - 1);
                          v340 -= 16;
                          v331 -= 16;
                        }
                        while (v331 != v333);
                        uint64_t v331 = (char *)*((void *)v315 + 19);
                      }
                      char v332 = v339 + 16;
                      *((void *)v315 + 19) = v340;
                      *((void *)v315 + 20) = v339 + 16;
                      *((void *)v315 + 21) = &v338[16 * v337];
                      if (v331) {
                        operator delete(v331);
                      }
                    }
                    else
                    {
                      *(_WORD *)uint64_t v331 = v329;
                      *((void *)v331 + 1) = -1;
                      char v332 = v331 + 16;
                    }
                    *((void *)v315 + 20) = v332;
                  }
                  v327 += 4;
                }
                while (v327 != v328);
              }
              int v341 = (const llvm::BasicBlock *)*((void *)v1188 + 2);
              uint64_t v342 = *((void *)v1163 + 39);
              if (v342)
              {
                *((void *)v1163 + 39) = *(void *)v342;
                uint64_t v73 = v1167;
              }
              else
              {
                *((void *)v1163 + 26) += 232;
                uint64_t v343 = *((void *)v1163 + 16);
                uint64_t v73 = v1167;
                if (((v343 + 7) & 0xFFFFFFFFFFFFFFF8) - v343 + 232 > *((void *)v1163 + 17) - v343)
                {
                  unsigned int v520 = *((_DWORD *)v1163 + 38) >> 7;
                  if (v520 >= 0x1E) {
                    LOBYTE(v520) = 30;
                  }
                  uint64_t v521 = 4096 << v520;
                  uint64_t v342 = (uint64_t)operator new(4096 << v520, (std::align_val_t)8uLL);
                  unint64_t v522 = *((unsigned int *)v1163 + 38);
                  if (v522 >= *((unsigned int *)v1163 + 39)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *(void *)(*((void *)v1163 + 18) + 8 * v522) = v342;
                  ++*((_DWORD *)v1163 + 38);
                  *((void *)v1163 + 16) = v342 + 232;
                  *((void *)v1163 + 17) = v342 + v521;
                }
                else
                {
                  uint64_t v342 = (v343 + 7) & 0xFFFFFFFFFFFFFFF8;
                  *((void *)v1163 + 16) = v342 + 232;
                }
              }
              llvm::MachineBasicBlock::MachineBasicBlock((llvm::MachineBasicBlock *)v342, v1163, v341);
              unsigned int v344 = (uint64_t *)*((void *)v1188 + 1);
              llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)v1163 + 320, v342);
              uint64_t v345 = *v344;
              *(void *)uint64_t v342 = *v344;
              *(void *)(v342 + 8) = v344;
              *(void *)(v345 + 8) = v342;
              *unsigned int v344 = v342;
              sub_1CB9173F0(v342, *(unint64_t **)(v342 + 56), (uint64_t)v1188, (unint64_t *)v75);
              llvm::MachineBasicBlock::addSuccessor(v1188, (void *)v342, -1);
              if (v1203)
              {
                uint64_t v346 = (char *)v1202;
                uint64_t v347 = (char *)v1202 + 4 * v1203;
                do
                {
                  int v348 = *(_DWORD *)v346;
                  if (*(_DWORD *)v346)
                  {
                    uint64_t v350 = *(char **)(v342 + 160);
                    unint64_t v349 = *(void *)(v342 + 168);
                    if ((unint64_t)v350 >= v349)
                    {
                      unsigned int v352 = *(char **)(v342 + 152);
                      uint64_t v353 = (v350 - v352) >> 4;
                      unint64_t v354 = v353 + 1;
                      if ((unint64_t)(v353 + 1) >> 60) {
                        goto LABEL_2226;
                      }
                      uint64_t v355 = v349 - (void)v352;
                      if (v355 >> 3 > v354) {
                        unint64_t v354 = v355 >> 3;
                      }
                      if ((unint64_t)v355 >= 0x7FFFFFFFFFFFFFF0) {
                        unint64_t v356 = 0xFFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v356 = v354;
                      }
                      if (v356)
                      {
                        if (v356 >> 60) {
                          goto LABEL_2227;
                        }
                        int v357 = (char *)operator new(16 * v356);
                      }
                      else
                      {
                        int v357 = 0;
                      }
                      unsigned int v358 = &v357[16 * v353];
                      *(_WORD *)unsigned int v358 = v348;
                      *((void *)v358 + 1) = -1;
                      BOOL v359 = v358;
                      if (v350 == v352)
                      {
                        uint64_t v3 = (uint64_t)v1193;
                      }
                      else
                      {
                        uint64_t v3 = (uint64_t)v1193;
                        do
                        {
                          *((_OWORD *)v359 - 1) = *((_OWORD *)v350 - 1);
                          v359 -= 16;
                          v350 -= 16;
                        }
                        while (v350 != v352);
                        uint64_t v350 = *(char **)(v342 + 152);
                      }
                      long long v351 = v358 + 16;
                      *(void *)(v342 + 152) = v359;
                      *(void *)(v342 + 160) = v358 + 16;
                      *(void *)(v342 + 168) = &v357[16 * v356];
                      if (v350) {
                        operator delete(v350);
                      }
                      uint64_t v73 = v1167;
                    }
                    else
                    {
                      *(_WORD *)uint64_t v350 = v348;
                      *((void *)v350 + 1) = -1;
                      long long v351 = v350 + 16;
                    }
                    *(void *)(v342 + 160) = v351;
                  }
                  v346 += 4;
                }
                while (v346 != v347);
              }
              llvm::MachineBasicBlock::addSuccessor((void *)v342, (void *)v342, -1);
              llvm::MachineBasicBlock::addSuccessor((void *)v342, v315, -1);
              if (v1149) {
                int v360 = 5;
              }
              else {
                int v360 = 33;
              }
              if (v1149) {
                int v361 = 411;
              }
              else {
                int v361 = 158;
              }
              unsigned int v362 = sub_1CB952700(v360, v361, *(unsigned char **)(v3 + 344));
              uint64_t v363 = *(void *)(*(void *)(v3 + 352) + 8);
              unsigned int v364 = (llvm::MachineFunction *)*((void *)v1188 + 4);
              uint64_t v365 = *(unsigned __int8 **)(v75 + 56);
              v1198 = v365;
              if (v365) {
                llvm::MetadataTracking::track((uint64_t)&v1198, v365, 2);
              }
              uint64_t v366 = llvm::MachineFunction::CreateMachineInstr(v364, v363 + 48 * v362, &v1198, 0);
              if (v1198)
              {
                int v560 = *v1198;
                if ((v560 - 4) > 0x1E)
                {
                  if ((v560 - 3) >= 0xFFFFFFFE) {
                    v586 = v1198;
                  }
                  else {
                    v586 = 0;
                  }
                  if ((v560 - 3) < 0xFFFFFFFE)
                  {
                    uint64_t v3 = (uint64_t)v1193;
                    uint64_t v73 = v1167;
                    if (v560 == 3) {
                      *((void *)v1198 + 1) = 0;
                    }
                    goto LABEL_599;
                  }
                  unint64_t v562 = (unint64_t)(v586 + 8);
                }
                else
                {
                  uint64_t v3 = (uint64_t)v1193;
                  uint64_t v73 = v1167;
                  if ((v1198[1] & 0x7F) != 2 && !*((_DWORD *)v1198 + 3)) {
                    goto LABEL_599;
                  }
                  uint64_t v561 = *((void *)v1198 + 2);
                  if ((v561 & 4) == 0) {
                    goto LABEL_599;
                  }
                  unint64_t v562 = v561 & 0xFFFFFFFFFFFFFFF8;
                  if (!v562) {
                    goto LABEL_599;
                  }
                }
                unsigned int v1194 = &v1198;
                sub_1CC5FA668(v562 + 16, &v1194);
                uint64_t v3 = (uint64_t)v1193;
                uint64_t v73 = v1167;
              }
LABEL_599:
              uint64_t v367 = *((void *)v1188 + 5);
              *((void *)v366 + 3) = v367;
              uint64_t v368 = *(void *)(v367 + 32);
              uint64_t v369 = *((unsigned int *)v366 + 10);
              if (v369)
              {
                uint64_t v459 = *((void *)v366 + 4);
                uint64_t v460 = *(void *)(v368 + 40);
                uint64_t v461 = 32 * v369;
                do
                {
                  if (!*(unsigned char *)v459)
                  {
                    uint64_t v462 = *(unsigned int *)(v459 + 4);
                    if ((int)v462 >= 0) {
                      char v463 = (uint64_t *)(*(void *)(v460 + 272) + 8 * v462);
                    }
                    else {
                      char v463 = (uint64_t *)(*(void *)(v460 + 24) + 16 * (v462 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v464 = *v463;
                    if (*v463)
                    {
                      uint64_t v465 = *(void *)(v464 + 16);
                      *(void *)(v464 + 16) = v459;
                      *(void *)(v459 + 16) = v465;
                      if (*(unsigned char *)(v459 + 3))
                      {
                        *(void *)(v459 + 24) = v464;
                      }
                      else
                      {
                        *(void *)(v459 + 24) = 0;
                        char v463 = (uint64_t *)(v465 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v459 + 16) = v459;
                      *(void *)(v459 + 24) = 0;
                    }
                    *char v463 = v459;
                  }
                  v459 += 32;
                  v461 -= 32;
                }
                while (v461);
              }
              uint64_t v370 = *(void *)(v368 + 728);
              if (v370) {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v370 + 24))(v370, v366);
              }
              unint64_t v371 = *j & 0xFFFFFFFFFFFFFFF8;
              *(void *)uint64_t v366 = v371 | *(void *)v366 & 7;
              *((void *)v366 + 1) = j;
              *(void *)(v371 + 8) = v366;
              *uint64_t j = *j & 7 | (unint64_t)v366;
              uint64_t v1195 = 0;
              uint64_t v1196 = 0;
              uint64_t v1197 = 0;
              LODWORD(v1194) = 0x1000000;
              HIDWORD(v1194) = v1178;
              llvm::MachineInstr::addOperand(v366, v364, (const llvm::MachineOperand *)&v1194);
              LODWORD(v1194) = 1;
              uint64_t v1195 = 0;
              uint64_t v1196 = 0;
              llvm::MachineInstr::addOperand(v366, v364, (const llvm::MachineOperand *)&v1194);
              LODWORD(v1194) = 1;
              uint64_t v1195 = 0;
              uint64_t v1196 = 0;
              llvm::MachineInstr::addOperand(v366, v364, (const llvm::MachineOperand *)&v1194);
              LODWORD(v1194) = 1;
              uint64_t v1195 = 0;
              uint64_t v1196 = 0;
              llvm::MachineInstr::addOperand(v366, v364, (const llvm::MachineOperand *)&v1194);
              LODWORD(v1194) = 1;
              uint64_t v1195 = 0;
              uint64_t v1196 = 0;
              llvm::MachineInstr::addOperand(v366, v364, (const llvm::MachineOperand *)&v1194);
              LODWORD(v1194) = 1;
              uint64_t v1195 = 0;
              uint64_t v1196 = 2;
              llvm::MachineInstr::addOperand(v366, v364, (const llvm::MachineOperand *)&v1194);
              uint64_t v372 = (unint64_t *)*((void *)v315 + 7);
              uint64_t v373 = *(void *)(*(void *)(v3 + 352) + 8);
              if (v1149) {
                uint64_t v374 = 34896;
              }
              else {
                uint64_t v374 = 34944;
              }
              uint64_t v375 = (llvm::MachineFunction *)*((void *)v315 + 4);
              v376 = *(unsigned __int8 **)(v75 + 56);
              v1198 = v376;
              if (v376) {
                llvm::MetadataTracking::track((uint64_t)&v1198, v376, 2);
              }
              unsigned int v377 = llvm::MachineFunction::CreateMachineInstr(v375, v373 + v374, &v1198, 0);
              if (v1198)
              {
                int v563 = *v1198;
                if ((v563 - 4) > 0x1E)
                {
                  if ((v563 - 3) >= 0xFFFFFFFE) {
                    v587 = v1198;
                  }
                  else {
                    v587 = 0;
                  }
                  if ((v563 - 3) < 0xFFFFFFFE)
                  {
                    uint64_t v3 = (uint64_t)v1193;
                    uint64_t v73 = v1167;
                    if (v563 == 3) {
                      *((void *)v1198 + 1) = 0;
                    }
                    goto LABEL_608;
                  }
                  unint64_t v565 = (unint64_t)(v587 + 8);
                }
                else
                {
                  uint64_t v3 = (uint64_t)v1193;
                  uint64_t v73 = v1167;
                  if ((v1198[1] & 0x7F) != 2 && !*((_DWORD *)v1198 + 3)) {
                    goto LABEL_608;
                  }
                  uint64_t v564 = *((void *)v1198 + 2);
                  if ((v564 & 4) == 0) {
                    goto LABEL_608;
                  }
                  unint64_t v565 = v564 & 0xFFFFFFFFFFFFFFF8;
                  if (!v565) {
                    goto LABEL_608;
                  }
                }
                unsigned int v1194 = &v1198;
                sub_1CC5FA668(v565 + 16, &v1194);
                uint64_t v3 = (uint64_t)v1193;
                uint64_t v73 = v1167;
              }
LABEL_608:
              uint64_t v378 = *((void *)v315 + 5);
              *((void *)v377 + 3) = v378;
              uint64_t v379 = *(void *)(v378 + 32);
              uint64_t v380 = *((unsigned int *)v377 + 10);
              if (v380)
              {
                uint64_t v466 = *((void *)v377 + 4);
                uint64_t v467 = *(void *)(v379 + 40);
                uint64_t v468 = 32 * v380;
                do
                {
                  if (!*(unsigned char *)v466)
                  {
                    uint64_t v469 = *(unsigned int *)(v466 + 4);
                    if ((int)v469 >= 0) {
                      uint64_t v470 = (uint64_t *)(*(void *)(v467 + 272) + 8 * v469);
                    }
                    else {
                      uint64_t v470 = (uint64_t *)(*(void *)(v467 + 24) + 16 * (v469 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v471 = *v470;
                    if (*v470)
                    {
                      uint64_t v472 = *(void *)(v471 + 16);
                      *(void *)(v471 + 16) = v466;
                      *(void *)(v466 + 16) = v472;
                      if (*(unsigned char *)(v466 + 3))
                      {
                        *(void *)(v466 + 24) = v471;
                      }
                      else
                      {
                        *(void *)(v466 + 24) = 0;
                        uint64_t v470 = (uint64_t *)(v472 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v466 + 16) = v466;
                      *(void *)(v466 + 24) = 0;
                    }
                    *uint64_t v470 = v466;
                  }
                  v466 += 32;
                  v468 -= 32;
                }
                while (v468);
              }
              uint64_t v381 = *(void *)(v379 + 728);
              if (v381) {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v381 + 24))(v381, v377);
              }
              unint64_t v382 = *v372 & 0xFFFFFFFFFFFFFFF8;
              *(void *)unsigned int v377 = v382 | *(void *)v377 & 7;
              *((void *)v377 + 1) = v372;
              *(void *)(v382 + 8) = v377;
              *uint64_t v372 = *v372 & 7 | (unint64_t)v377;
              uint64_t v1195 = 0;
              uint64_t v1196 = 0;
              uint64_t v1197 = 0;
              LODWORD(v1194) = 0x1000000;
              HIDWORD(v1194) = v1178;
              llvm::MachineInstr::addOperand(v377, v375, (const llvm::MachineOperand *)&v1194);
              LODWORD(v1194) = 1;
              uint64_t v1195 = 0;
              uint64_t v1196 = 0;
              llvm::MachineInstr::addOperand(v377, v375, (const llvm::MachineOperand *)&v1194);
              LODWORD(v1194) = 1;
              uint64_t v1195 = 0;
              uint64_t v1196 = 2;
              llvm::MachineInstr::addOperand(v377, v375, (const llvm::MachineOperand *)&v1194);
              int v383 = *(_DWORD *)(*(void *)(v75 + 32) + 4);
              uint64_t v384 = *(void *)(*(void *)(v3 + 352) + 8);
              unint64_t v385 = *(llvm::MachineFunction **)(v342 + 32);
              BOOL v386 = *(unsigned __int8 **)(v75 + 56);
              v1198 = v386;
              if (v386) {
                llvm::MetadataTracking::track((uint64_t)&v1198, v386, 2);
              }
              uint64_t v239 = llvm::MachineFunction::CreateMachineInstr(v385, v384 + 34704, &v1198, 0);
              uint64_t v76 = v1166;
              if (v1198)
              {
                int v566 = *v1198;
                if ((v566 - 4) > 0x1E)
                {
                  if ((v566 - 3) >= 0xFFFFFFFE) {
                    v588 = v1198;
                  }
                  else {
                    v588 = 0;
                  }
                  if ((v566 - 3) < 0xFFFFFFFE)
                  {
                    uint64_t v3 = (uint64_t)v1193;
                    uint64_t v76 = v1166;
                    uint64_t v73 = v1167;
                    if (v566 == 3) {
                      *((void *)v1198 + 1) = 0;
                    }
                    goto LABEL_614;
                  }
                  unint64_t v568 = (unint64_t)(v588 + 8);
                }
                else
                {
                  uint64_t v3 = (uint64_t)v1193;
                  uint64_t v76 = v1166;
                  uint64_t v73 = v1167;
                  if ((v1198[1] & 0x7F) != 2 && !*((_DWORD *)v1198 + 3)) {
                    goto LABEL_614;
                  }
                  uint64_t v567 = *((void *)v1198 + 2);
                  if ((v567 & 4) == 0) {
                    goto LABEL_614;
                  }
                  unint64_t v568 = v567 & 0xFFFFFFFFFFFFFFF8;
                  if (!v568) {
                    goto LABEL_614;
                  }
                }
                unsigned int v1194 = &v1198;
                sub_1CC5FA668(v568 + 16, &v1194);
                uint64_t v3 = (uint64_t)v1193;
                uint64_t v76 = v1166;
                uint64_t v73 = v1167;
              }
LABEL_614:
              uint64_t v387 = *(void *)(v342 + 40);
              *((void *)v239 + 3) = v387;
              uint64_t v388 = *(void *)(v387 + 32);
              uint64_t v389 = *((unsigned int *)v239 + 10);
              if (v389)
              {
                uint64_t v473 = *((void *)v239 + 4);
                uint64_t v474 = *(void *)(v388 + 40);
                uint64_t v475 = 32 * v389;
                do
                {
                  if (!*(unsigned char *)v473)
                  {
                    uint64_t v476 = *(unsigned int *)(v473 + 4);
                    if ((int)v476 >= 0) {
                      uint64_t v477 = (uint64_t *)(*(void *)(v474 + 272) + 8 * v476);
                    }
                    else {
                      uint64_t v477 = (uint64_t *)(*(void *)(v474 + 24) + 16 * (v476 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v478 = *v477;
                    if (*v477)
                    {
                      uint64_t v479 = *(void *)(v478 + 16);
                      *(void *)(v478 + 16) = v473;
                      *(void *)(v473 + 16) = v479;
                      if (*(unsigned char *)(v473 + 3))
                      {
                        *(void *)(v473 + 24) = v478;
                      }
                      else
                      {
                        *(void *)(v473 + 24) = 0;
                        uint64_t v477 = (uint64_t *)(v479 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v473 + 16) = v473;
                      *(void *)(v473 + 24) = 0;
                    }
                    *uint64_t v477 = v473;
                  }
                  v473 += 32;
                  v475 -= 32;
                }
                while (v475);
              }
              uint64_t v390 = *(void *)(v388 + 728);
              if (v390) {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v390 + 24))(v390, v239);
              }
              unint64_t v391 = *(void *)v75 & 0xFFFFFFFFFFFFFFF8;
              *(void *)uint64_t v239 = v391 | *(void *)v239 & 7;
              *((void *)v239 + 1) = v75;
              *(void *)(v391 + 8) = v239;
              *(void *)uint64_t v75 = *(void *)v75 & 7 | (unint64_t)v239;
              uint64_t v1195 = 0;
              LODWORD(v1194) = 0;
              HIDWORD(v1194) = v383;
              uint64_t v1196 = 0;
              uint64_t v1197 = 0;
              llvm::MachineInstr::addOperand(v239, v385, (const llvm::MachineOperand *)&v1194);
              uint64_t v392 = *(void *)(*(void *)(v3 + 352) + 8);
              if (*(unsigned char *)(*(void *)(v3 + 344) + 327)) {
                uint64_t v393 = 29904;
              }
              else {
                uint64_t v393 = 30672;
              }
              uint64_t v394 = *(llvm::MachineFunction **)(v342 + 32);
              uint64_t v395 = *(unsigned __int8 **)(v75 + 56);
              v1198 = v395;
              if (v395) {
                llvm::MetadataTracking::track((uint64_t)&v1198, v395, 2);
              }
              unsigned int v396 = llvm::MachineFunction::CreateMachineInstr(v394, v392 + v393, &v1198, 0);
              if (v1198)
              {
                int v569 = *v1198;
                if ((v569 - 4) > 0x1E)
                {
                  if ((v569 - 3) >= 0xFFFFFFFE) {
                    v589 = v1198;
                  }
                  else {
                    v589 = 0;
                  }
                  if ((v569 - 3) < 0xFFFFFFFE)
                  {
                    uint64_t v3 = (uint64_t)v1193;
                    uint64_t v76 = v1166;
                    uint64_t v73 = v1167;
                    if (v569 == 3) {
                      *((void *)v1198 + 1) = 0;
                    }
                    goto LABEL_623;
                  }
                  unint64_t v571 = (unint64_t)(v589 + 8);
                }
                else
                {
                  uint64_t v3 = (uint64_t)v1193;
                  uint64_t v76 = v1166;
                  uint64_t v73 = v1167;
                  if ((v1198[1] & 0x7F) != 2 && !*((_DWORD *)v1198 + 3)) {
                    goto LABEL_623;
                  }
                  uint64_t v570 = *((void *)v1198 + 2);
                  if ((v570 & 4) == 0) {
                    goto LABEL_623;
                  }
                  unint64_t v571 = v570 & 0xFFFFFFFFFFFFFFF8;
                  if (!v571) {
                    goto LABEL_623;
                  }
                }
                unsigned int v1194 = &v1198;
                sub_1CC5FA668(v571 + 16, &v1194);
                uint64_t v3 = (uint64_t)v1193;
                uint64_t v76 = v1166;
                uint64_t v73 = v1167;
              }
LABEL_623:
              uint64_t v397 = *(void *)(v342 + 40);
              *((void *)v396 + 3) = v397;
              uint64_t v398 = *(void *)(v397 + 32);
              uint64_t v399 = *((unsigned int *)v396 + 10);
              if (v399)
              {
                uint64_t v480 = *((void *)v396 + 4);
                uint64_t v481 = *(void *)(v398 + 40);
                uint64_t v482 = 32 * v399;
                do
                {
                  if (!*(unsigned char *)v480)
                  {
                    uint64_t v483 = *(unsigned int *)(v480 + 4);
                    if ((int)v483 >= 0) {
                      uint64_t v484 = (uint64_t *)(*(void *)(v481 + 272) + 8 * v483);
                    }
                    else {
                      uint64_t v484 = (uint64_t *)(*(void *)(v481 + 24) + 16 * (v483 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v485 = *v484;
                    if (*v484)
                    {
                      uint64_t v486 = *(void *)(v485 + 16);
                      *(void *)(v485 + 16) = v480;
                      *(void *)(v480 + 16) = v486;
                      if (*(unsigned char *)(v480 + 3))
                      {
                        *(void *)(v480 + 24) = v485;
                      }
                      else
                      {
                        *(void *)(v480 + 24) = 0;
                        uint64_t v484 = (uint64_t *)(v486 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v480 + 16) = v480;
                      *(void *)(v480 + 24) = 0;
                    }
                    uint64_t *v484 = v480;
                  }
                  v480 += 32;
                  v482 -= 32;
                }
                while (v482);
              }
              uint64_t v400 = *(void *)(v398 + 728);
              if (v400) {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v400 + 24))(v400, v396);
              }
              unint64_t v401 = *(void *)v75 & 0xFFFFFFFFFFFFFFF8;
              *(void *)unsigned int v396 = v401 | *(void *)v396 & 7;
              *((void *)v396 + 1) = v75;
              *(void *)(v401 + 8) = v396;
              *(void *)uint64_t v75 = *(void *)v75 & 7 | (unint64_t)v396;
              uint64_t v1195 = 0;
              uint64_t v1196 = v342;
              LODWORD(v1194) = 4;
              llvm::MachineInstr::addOperand(v396, v394, (const llvm::MachineOperand *)&v1194);
              if (v1213 != &v1215) {
                free(v1213);
              }
              int v72 = v1150;
              if (v1202 != &v1204) {
                free(v1202);
              }
              goto LABEL_630;
            }
            sub_1CB951A3C(*(void **)(v3 + 352), (uint64_t)v1187, (unint64_t *)v75, *(_DWORD *)(*(void *)(v75 + 32) + 4), v75);
LABEL_474:
            if (v1200 >= (unint64_t)DWORD1(v1200)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v1199 + v1200) = v75;
            LODWORD(v1200) = v1200 + 1;
            goto LABEL_632;
          }
          if (v129 != 303)
          {
            if (v129 != 337) {
              goto LABEL_411;
            }
            goto LABEL_474;
          }
          (*(void (**)(void *))(**((void **)v76 + 2) + 176))(*((void **)v76 + 2));
          unsigned int v260 = sub_1CB952700(45, 235, *(unsigned char **)(v3 + 344));
          uint64_t v261 = *(void *)(*(void *)(v3 + 352) + 8);
          unint64_t v262 = v1187;
          unsigned int v263 = (llvm::MachineFunction *)*((void *)v1187 + 4);
          unint64_t v264 = *(void **)(v75 + 56);
          v1213 = v264;
          if (v264) {
            llvm::MetadataTracking::track((uint64_t)&v1213, (unsigned __int8 *)v264, 2);
          }
          unsigned int v265 = llvm::MachineFunction::CreateMachineInstr(v263, v261 + 48 * v260, (unsigned __int8 **)&v1213, 0);
          if (v1213)
          {
            int v573 = *(unsigned __int8 *)v1213;
            if ((v573 - 4) > 0x1E)
            {
              if ((v573 - 3) >= 0xFFFFFFFE) {
                unsigned int v596 = v1213;
              }
              else {
                unsigned int v596 = 0;
              }
              if ((v573 - 3) < 0xFFFFFFFE)
              {
                unint64_t v262 = v1187;
                uint64_t v3 = (uint64_t)v1193;
                int v72 = v1150;
                uint64_t v73 = v1167;
                if (v573 == 3) {
                  *((void *)v1213 + 1) = 0;
                }
                goto LABEL_464;
              }
              unint64_t v575 = (unint64_t)v596 + 8;
            }
            else
            {
              unint64_t v262 = v1187;
              uint64_t v3 = (uint64_t)v1193;
              int v72 = v1150;
              uint64_t v73 = v1167;
              if ((*((unsigned char *)v1213 + 1) & 0x7F) != 2 && !*((_DWORD *)v1213 + 3)) {
                goto LABEL_464;
              }
              uint64_t v574 = *((void *)v1213 + 2);
              if ((v574 & 4) == 0) {
                goto LABEL_464;
              }
              unint64_t v575 = v574 & 0xFFFFFFFFFFFFFFF8;
              if (!v575) {
                goto LABEL_464;
              }
            }
            v1202 = &v1213;
            sub_1CC5FA668(v575 + 16, &v1202);
            unint64_t v262 = v1187;
            uint64_t v3 = (uint64_t)v1193;
            int v72 = v1150;
            uint64_t v73 = v1167;
          }
LABEL_464:
          uint64_t v266 = *((void *)v262 + 5);
          *((void *)v265 + 3) = v266;
          uint64_t v267 = *(void *)(v266 + 32);
          uint64_t v268 = *((unsigned int *)v265 + 10);
          if (v268)
          {
            uint64_t v489 = *((void *)v265 + 4);
            uint64_t v490 = *(void *)(v267 + 40);
            uint64_t v491 = 32 * v268;
            do
            {
              if (!*(unsigned char *)v489)
              {
                uint64_t v492 = *(unsigned int *)(v489 + 4);
                if ((int)v492 >= 0) {
                  v493 = (uint64_t *)(*(void *)(v490 + 272) + 8 * v492);
                }
                else {
                  v493 = (uint64_t *)(*(void *)(v490 + 24) + 16 * (v492 & 0x7FFFFFFF) + 8);
                }
                uint64_t v494 = *v493;
                if (*v493)
                {
                  uint64_t v495 = *(void *)(v494 + 16);
                  *(void *)(v494 + 16) = v489;
                  *(void *)(v489 + 16) = v495;
                  if (*(unsigned char *)(v489 + 3))
                  {
                    *(void *)(v489 + 24) = v494;
                  }
                  else
                  {
                    *(void *)(v489 + 24) = 0;
                    v493 = (uint64_t *)(v495 + 24);
                  }
                }
                else
                {
                  *(void *)(v489 + 16) = v489;
                  *(void *)(v489 + 24) = 0;
                }
                uint64_t *v493 = v489;
              }
              v489 += 32;
              v491 -= 32;
            }
            while (v491);
          }
          uint64_t v269 = *(void *)(v267 + 728);
          if (v269) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v269 + 24))(v269, v265);
          }
          unint64_t v270 = *(void *)v75 & 0xFFFFFFFFFFFFFFF8;
          *(void *)unsigned int v265 = v270 | *(void *)v265 & 7;
          *((void *)v265 + 1) = v75;
          *(void *)(v270 + 8) = v265;
          *(void *)uint64_t v75 = *(void *)v75 & 7 | (unint64_t)v265;
          uint64_t v1203 = 0;
          uint64_t v1204 = 0;
          uint64_t v1205 = 0;
          v1202 = (void *)0x3901000000;
          llvm::MachineInstr::addOperand(v265, v263, (const llvm::MachineOperand *)&v1202);
          LODWORD(v1202) = 1;
          uint64_t v1203 = 0;
          uint64_t v1204 = 0;
          llvm::MachineInstr::addOperand(v265, v263, (const llvm::MachineOperand *)&v1202);
          uint64_t v1203 = 0;
          v1202 = (void *)0x3900000000;
          uint64_t v1204 = 0;
          uint64_t v1205 = 0;
          llvm::MachineInstr::addOperand(v265, v263, (const llvm::MachineOperand *)&v1202);
          LODWORD(v1202) = 1;
          uint64_t v1203 = 0;
          uint64_t v1204 = 0;
          llvm::MachineInstr::addOperand(v265, v263, (const llvm::MachineOperand *)&v1202);
          LODWORD(v1202) = 1;
          uint64_t v1203 = 0;
          uint64_t v1204 = 2;
          llvm::MachineInstr::addOperand(v265, v263, (const llvm::MachineOperand *)&v1202);
          uint64_t v271 = *(void *)(*(void *)(v3 + 352) + 8);
          int v272 = (llvm::MachineFunction *)*((void *)v262 + 4);
          uint64_t v273 = *(void **)(v75 + 56);
          v1213 = v273;
          if (v273) {
            llvm::MetadataTracking::track((uint64_t)&v1213, (unsigned __int8 *)v273, 2);
          }
          unint64_t v274 = llvm::MachineFunction::CreateMachineInstr(v272, v271 + 35040, (unsigned __int8 **)&v1213, 0);
          if (v1213)
          {
            int v576 = *(unsigned __int8 *)v1213;
            if ((v576 - 4) > 0x1E)
            {
              if ((v576 - 3) >= 0xFFFFFFFE) {
                v597 = v1213;
              }
              else {
                v597 = 0;
              }
              if ((v576 - 3) < 0xFFFFFFFE)
              {
                unint64_t v262 = v1187;
                uint64_t v3 = (uint64_t)v1193;
                int v72 = v1150;
                uint64_t v73 = v1167;
                if (v576 == 3) {
                  *((void *)v1213 + 1) = 0;
                }
                goto LABEL_470;
              }
              unint64_t v578 = (unint64_t)v597 + 8;
            }
            else
            {
              unint64_t v262 = v1187;
              uint64_t v3 = (uint64_t)v1193;
              int v72 = v1150;
              uint64_t v73 = v1167;
              if ((*((unsigned char *)v1213 + 1) & 0x7F) != 2 && !*((_DWORD *)v1213 + 3)) {
                goto LABEL_470;
              }
              uint64_t v577 = *((void *)v1213 + 2);
              if ((v577 & 4) == 0) {
                goto LABEL_470;
              }
              unint64_t v578 = v577 & 0xFFFFFFFFFFFFFFF8;
              if (!v578) {
                goto LABEL_470;
              }
            }
            v1202 = &v1213;
            sub_1CC5FA668(v578 + 16, &v1202);
            unint64_t v262 = v1187;
            uint64_t v3 = (uint64_t)v1193;
            int v72 = v1150;
            uint64_t v73 = v1167;
          }
LABEL_470:
          uint64_t v275 = *((void *)v262 + 5);
          *((void *)v274 + 3) = v275;
          uint64_t v276 = *(void *)(v275 + 32);
          uint64_t v277 = *((unsigned int *)v274 + 10);
          if (v277)
          {
            uint64_t v496 = *((void *)v274 + 4);
            uint64_t v497 = *(void *)(v276 + 40);
            uint64_t v498 = 32 * v277;
            do
            {
              if (!*(unsigned char *)v496)
              {
                uint64_t v499 = *(unsigned int *)(v496 + 4);
                if ((int)v499 >= 0) {
                  uint64_t v500 = (uint64_t *)(*(void *)(v497 + 272) + 8 * v499);
                }
                else {
                  uint64_t v500 = (uint64_t *)(*(void *)(v497 + 24) + 16 * (v499 & 0x7FFFFFFF) + 8);
                }
                uint64_t v501 = *v500;
                if (*v500)
                {
                  uint64_t v502 = *(void *)(v501 + 16);
                  *(void *)(v501 + 16) = v496;
                  *(void *)(v496 + 16) = v502;
                  if (*(unsigned char *)(v496 + 3))
                  {
                    *(void *)(v496 + 24) = v501;
                  }
                  else
                  {
                    *(void *)(v496 + 24) = 0;
                    uint64_t v500 = (uint64_t *)(v502 + 24);
                  }
                }
                else
                {
                  *(void *)(v496 + 16) = v496;
                  *(void *)(v496 + 24) = 0;
                }
                *uint64_t v500 = v496;
              }
              v496 += 32;
              v498 -= 32;
            }
            while (v498);
          }
          uint64_t v278 = *(void *)(v276 + 728);
          if (v278) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v278 + 24))(v278, v274);
          }
          unint64_t v279 = *(void *)v75 & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v274 = v279 | *(void *)v274 & 7;
          *((void *)v274 + 1) = v75;
          *(void *)(v279 + 8) = v274;
          *(void *)uint64_t v75 = *(void *)v75 & 7 | (unint64_t)v274;
          uint64_t v1203 = 0;
          v1202 = (void *)0x3900000000;
          uint64_t v1204 = 0;
          uint64_t v1205 = 0;
          llvm::MachineInstr::addOperand(v274, v272, (const llvm::MachineOperand *)&v1202);
          goto LABEL_474;
        }
        if ((v129 - 673) < 2) {
          goto LABEL_377;
        }
        if (v129 != 4593)
        {
          if (v129 != 490) {
            goto LABEL_411;
          }
          if (*(unsigned char *)(*(void *)(v3 + 344) + 356))
          {
            unint64_t v178 = llvm::MachineFunction::CloneMachineInstr(v76, (const llvm::MachineInstr *)v75);
            unint64_t v179 = v178;
            uint64_t v180 = *((void *)v1187 + 5);
            *(void *)(v178 + 24) = v180;
            uint64_t v181 = *(void *)(v180 + 32);
            uint64_t v182 = *(unsigned int *)(v178 + 40);
            if (v182)
            {
              uint64_t v510 = *(void *)(v178 + 32);
              uint64_t v511 = *(void *)(v181 + 40);
              uint64_t v512 = 32 * v182;
              do
              {
                if (!*(unsigned char *)v510)
                {
                  uint64_t v513 = *(unsigned int *)(v510 + 4);
                  if ((int)v513 >= 0) {
                    uint64_t v514 = (uint64_t *)(*(void *)(v511 + 272) + 8 * v513);
                  }
                  else {
                    uint64_t v514 = (uint64_t *)(*(void *)(v511 + 24) + 16 * (v513 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v515 = *v514;
                  if (*v514)
                  {
                    uint64_t v516 = *(void *)(v515 + 16);
                    *(void *)(v515 + 16) = v510;
                    *(void *)(v510 + 16) = v516;
                    if (*(unsigned char *)(v510 + 3))
                    {
                      *(void *)(v510 + 24) = v515;
                    }
                    else
                    {
                      *(void *)(v510 + 24) = 0;
                      uint64_t v514 = (uint64_t *)(v516 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v510 + 16) = v510;
                    *(void *)(v510 + 24) = 0;
                  }
                  *uint64_t v514 = v510;
                }
                v510 += 32;
                v512 -= 32;
              }
              while (v512);
            }
            uint64_t v183 = *(void *)(v181 + 728);
            if (v183) {
              (*(void (**)(uint64_t, unint64_t))(*(void *)v183 + 24))(v183, v179);
            }
            unint64_t v184 = *(void *)v75 & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v179 = v184 | *(void *)v179 & 7;
            *(void *)(v179 + 8) = v75;
            *(void *)(v184 + 8) = v179;
            *(void *)uint64_t v75 = *(void *)v75 & 7 | v179;
          }
          goto LABEL_632;
        }
        uint64_t v280 = *(void *)(*(void *)(v3 + 352) + 8);
        uint64_t v281 = *(unsigned __int8 *)(v280 + 220469);
        uint64_t v282 = *(unsigned __int8 *)(v280 + 31445);
        int v283 = v1187;
        uint64_t v284 = (llvm::MachineFunction *)*((void *)v1187 + 4);
        int64x2_t v285 = *(void **)(v75 + 56);
        v1213 = v285;
        if (v285) {
          llvm::MetadataTracking::track((uint64_t)&v1213, (unsigned __int8 *)v285, 2);
        }
        uint64_t v286 = llvm::MachineFunction::CreateMachineInstr(v284, v280 + 31440, (unsigned __int8 **)&v1213, 0);
        if (v1213)
        {
          int v579 = *(unsigned __int8 *)v1213;
          if ((v579 - 4) > 0x1E)
          {
            if ((v579 - 3) >= 0xFFFFFFFE) {
              v598 = v1213;
            }
            else {
              v598 = 0;
            }
            if ((v579 - 3) < 0xFFFFFFFE)
            {
              int v283 = v1187;
              uint64_t v3 = (uint64_t)v1193;
              int v72 = v1150;
              uint64_t v73 = v1167;
              if (v579 == 3) {
                *((void *)v1213 + 1) = 0;
              }
              goto LABEL_479;
            }
            unint64_t v581 = (unint64_t)v598 + 8;
          }
          else
          {
            int v283 = v1187;
            uint64_t v3 = (uint64_t)v1193;
            int v72 = v1150;
            uint64_t v73 = v1167;
            if ((*((unsigned char *)v1213 + 1) & 0x7F) != 2 && !*((_DWORD *)v1213 + 3)) {
              goto LABEL_479;
            }
            uint64_t v580 = *((void *)v1213 + 2);
            if ((v580 & 4) == 0) {
              goto LABEL_479;
            }
            unint64_t v581 = v580 & 0xFFFFFFFFFFFFFFF8;
            if (!v581) {
              goto LABEL_479;
            }
          }
          v1202 = &v1213;
          sub_1CC5FA668(v581 + 16, &v1202);
          int v283 = v1187;
          uint64_t v3 = (uint64_t)v1193;
          int v72 = v1150;
          uint64_t v73 = v1167;
        }
LABEL_479:
        uint64_t v287 = *((void *)v283 + 5);
        *((void *)v286 + 3) = v287;
        uint64_t v288 = *(void *)(v287 + 32);
        uint64_t v289 = *((unsigned int *)v286 + 10);
        if (v289)
        {
          uint64_t v503 = *((void *)v286 + 4);
          uint64_t v504 = *(void *)(v288 + 40);
          uint64_t v505 = 32 * v289;
          do
          {
            if (!*(unsigned char *)v503)
            {
              uint64_t v506 = *(unsigned int *)(v503 + 4);
              if ((int)v506 >= 0) {
                unsigned int v507 = (uint64_t *)(*(void *)(v504 + 272) + 8 * v506);
              }
              else {
                unsigned int v507 = (uint64_t *)(*(void *)(v504 + 24) + 16 * (v506 & 0x7FFFFFFF) + 8);
              }
              uint64_t v508 = *v507;
              if (*v507)
              {
                uint64_t v509 = *(void *)(v508 + 16);
                *(void *)(v508 + 16) = v503;
                *(void *)(v503 + 16) = v509;
                if (*(unsigned char *)(v503 + 3))
                {
                  *(void *)(v503 + 24) = v508;
                }
                else
                {
                  *(void *)(v503 + 24) = 0;
                  unsigned int v507 = (uint64_t *)(v509 + 24);
                }
              }
              else
              {
                *(void *)(v503 + 16) = v503;
                *(void *)(v503 + 24) = 0;
              }
              *unsigned int v507 = v503;
            }
            v503 += 32;
            v505 -= 32;
          }
          while (v505);
        }
        uint64_t v290 = *(void *)(v288 + 728);
        if (v290) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v290 + 24))(v290, v286);
        }
        unint64_t v291 = *(void *)v75 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v286 = v291 | *(void *)v286 & 7;
        *((void *)v286 + 1) = v75;
        *(void *)(v291 + 8) = v286;
        *(void *)uint64_t v75 = *(void *)v75 & 7 | (unint64_t)v286;
        LODWORD(v1202) = 1;
        uint64_t v1203 = 0;
        uint64_t v1204 = v282 + v281;
        goto LABEL_483;
      }
      v1213 = &v1215;
      HIDWORD(v1214) = 16;
      uint64_t v130 = v1187;
      v1215 = v1187;
      v1202 = v1206;
      uint64_t v1203 = (uint64_t)v1206;
      LODWORD(v1205) = 0;
      uint64_t v1204 = 0x100000010;
      unsigned int v131 = 1;
      v1206[0] = v1187;
      while (2)
      {
        uint64_t v132 = *((void *)v1213 + --v131);
        LODWORD(v1214) = v131;
        uint64_t v134 = *(void *)(v3 + 248);
        uint64_t v133 = *(void *)(v3 + 256);
        if (v133 == v134)
        {
          uint64_t v135 = *v72;
          uint64_t v136 = (void *)(v133 + 8 * v135);
          if (v135)
          {
            uint64_t v137 = 0;
            uint64_t v138 = 8 * v135;
            while (*(void *)(v133 + v137) != v132)
            {
              v137 += 8;
              if (v138 == v137) {
                goto LABEL_289;
              }
            }
            uint64_t v136 = (void *)(v133 + v137);
          }
LABEL_289:
          uint64_t v134 = *(void *)(v3 + 256);
        }
        else
        {
          uint64_t v139 = *v73;
          int v140 = v139 - 1;
          unsigned int v141 = (v139 - 1) & ((v132 >> 4) ^ (v132 >> 9));
          uint64_t v136 = (void *)(v133 + 8 * v141);
          uint64_t v142 = *v136;
          if (*v136 == -1)
          {
            unint64_t v143 = 0;
LABEL_341:
            if (v143) {
              uint64_t v136 = v143;
            }
            if (*v136 != v132) {
              uint64_t v136 = (void *)(v133 + 8 * v139);
            }
          }
          else
          {
            unint64_t v143 = 0;
            int v144 = 1;
            while (v142 != v132)
            {
              if (v143) {
                BOOL v145 = 0;
              }
              else {
                BOOL v145 = v142 == -2;
              }
              if (v145) {
                unint64_t v143 = v136;
              }
              unsigned int v146 = v141 + v144++;
              unsigned int v141 = v146 & v140;
              uint64_t v136 = (void *)(v133 + 8 * (v146 & v140));
              uint64_t v142 = *v136;
              if (*v136 == -1) {
                goto LABEL_341;
              }
            }
          }
        }
        if (v133 == v134) {
          uint64_t v147 = v72;
        }
        else {
          uint64_t v147 = v73;
        }
        if (v136 != (void *)(v133 + 8 * *v147))
        {
          if (!v75 || (uint64_t v166 = v75, (*(unsigned char *)v75 & 4) == 0))
          {
            uint64_t v166 = v75;
            if ((*(_WORD *)(v75 + 44) & 8) != 0)
            {
              uint64_t v166 = v75;
              do
                uint64_t v166 = *(void *)(v166 + 8);
              while ((*(_WORD *)(v166 + 44) & 8) != 0);
            }
          }
          int v167 = *(unint64_t **)(v166 + 8);
          uint64_t v168 = *(void *)(*(void *)(v3 + 352) + 8);
          if (*(unsigned char *)(*(void *)(v3 + 344) + 327)) {
            uint64_t v169 = 396624;
          }
          else {
            uint64_t v169 = 396576;
          }
          uint64_t v170 = (llvm::MachineFunction *)*((void *)v1187 + 4);
          uint64_t v171 = *(unsigned __int8 **)(v75 + 56);
          v1198 = v171;
          if (v171) {
            llvm::MetadataTracking::track((uint64_t)&v1198, v171, 2);
          }
          int v172 = llvm::MachineFunction::CreateMachineInstr(v170, v168 + v169, &v1198, 0);
          if (!v1198) {
            goto LABEL_361;
          }
          int v545 = *v1198;
          if ((v545 - 4) > 0x1E)
          {
            if ((v545 - 3) >= 0xFFFFFFFE) {
              unsigned int v572 = v1198;
            }
            else {
              unsigned int v572 = 0;
            }
            if ((v545 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v547 = (unint64_t)(v572 + 8);
              goto LABEL_970;
            }
            uint64_t v130 = v1187;
            uint64_t v3 = (uint64_t)v1193;
            int v72 = v1150;
            uint64_t v73 = v1167;
            if (v545 == 3) {
              *((void *)v1198 + 1) = 0;
            }
          }
          else
          {
            uint64_t v130 = v1187;
            uint64_t v3 = (uint64_t)v1193;
            int v72 = v1150;
            uint64_t v73 = v1167;
            if ((v1198[1] & 0x7F) == 2 || *((_DWORD *)v1198 + 3))
            {
              uint64_t v546 = *((void *)v1198 + 2);
              if ((v546 & 4) != 0)
              {
                unint64_t v547 = v546 & 0xFFFFFFFFFFFFFFF8;
                if (v547)
                {
LABEL_970:
                  unsigned int v1194 = &v1198;
                  sub_1CC5FA668(v547 + 16, &v1194);
                  uint64_t v130 = v1187;
                  uint64_t v3 = (uint64_t)v1193;
                  int v72 = v1150;
                  uint64_t v73 = v1167;
                }
              }
            }
          }
LABEL_361:
          uint64_t v173 = *((void *)v130 + 5);
          *((void *)v172 + 3) = v173;
          uint64_t v174 = *(void *)(v173 + 32);
          uint64_t v175 = *((unsigned int *)v172 + 10);
          if (v175)
          {
            uint64_t v402 = *((void *)v172 + 4);
            uint64_t v403 = *(void *)(v174 + 40);
            uint64_t v404 = 32 * v175;
            do
            {
              if (!*(unsigned char *)v402)
              {
                uint64_t v405 = *(unsigned int *)(v402 + 4);
                if ((int)v405 >= 0) {
                  uint64_t v406 = (uint64_t *)(*(void *)(v403 + 272) + 8 * v405);
                }
                else {
                  uint64_t v406 = (uint64_t *)(*(void *)(v403 + 24) + 16 * (v405 & 0x7FFFFFFF) + 8);
                }
                uint64_t v407 = *v406;
                if (*v406)
                {
                  uint64_t v408 = *(void *)(v407 + 16);
                  *(void *)(v407 + 16) = v402;
                  *(void *)(v402 + 16) = v408;
                  if (*(unsigned char *)(v402 + 3))
                  {
                    *(void *)(v402 + 24) = v407;
                  }
                  else
                  {
                    *(void *)(v402 + 24) = 0;
                    uint64_t v406 = (uint64_t *)(v408 + 24);
                  }
                }
                else
                {
                  *(void *)(v402 + 16) = v402;
                  *(void *)(v402 + 24) = 0;
                }
                *uint64_t v406 = v402;
              }
              v402 += 32;
              v404 -= 32;
            }
            while (v404);
          }
          uint64_t v176 = *(void *)(v174 + 728);
          if (v176) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v176 + 24))(v176, v172);
          }
          unint64_t v177 = *v167 & 0xFFFFFFFFFFFFFFF8;
          *(void *)int v172 = v177 | *(void *)v172 & 7;
          *((void *)v172 + 1) = v167;
          *(void *)(v177 + 8) = v172;
          *int v167 = *v167 & 7 | (unint64_t)v172;
          LODWORD(v1194) = 1;
          uint64_t v1195 = 0;
          uint64_t v1196 = 0;
          llvm::MachineInstr::addOperand(v172, v170, (const llvm::MachineOperand *)&v1194);
          LODWORD(v1194) = 1;
          uint64_t v1195 = 0;
          uint64_t v1196 = 2;
          llvm::MachineInstr::addOperand(v172, v170, (const llvm::MachineOperand *)&v1194);
          break;
        }
        int v148 = *(uint64_t **)(v132 + 88);
        uint64_t v149 = *(uint64_t **)(v132 + 96);
        if (v148 == v149) {
          goto LABEL_338;
        }
        while (2)
        {
          uint64_t v150 = *v148;
          uint64_t v151 = v1203;
          uint64_t v152 = HIDWORD(v1204);
          if ((void *)v1203 == v1202)
          {
            if (HIDWORD(v1204))
            {
              uint64_t v153 = 0;
              uint64_t v154 = 8 * HIDWORD(v1204);
              uint64_t v155 = (void *)v1203;
              while (*v155 != v150)
              {
                if (*v155 == -2) {
                  uint64_t v153 = v155;
                }
                ++v155;
                v154 -= 8;
                if (!v154)
                {
                  if (!v153) {
                    goto LABEL_303;
                  }
                  *uint64_t v153 = v150;
                  LODWORD(v1205) = v1205 - 1;
                  goto LABEL_327;
                }
              }
              goto LABEL_329;
            }
LABEL_303:
            unsigned int v156 = v1204;
            if (HIDWORD(v1204) < v1204)
            {
              ++HIDWORD(v1204);
              *(void *)(v1203 + 8 * v152) = v150;
LABEL_327:
              if (v1214 >= (unint64_t)HIDWORD(v1214)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v1213 + v1214) = *v148;
              LODWORD(v1214) = v1214 + 1;
              goto LABEL_329;
            }
          }
          else
          {
            unsigned int v156 = v1204;
          }
          if (3 * v156 <= 4 * (HIDWORD(v1204) - (int)v1205))
          {
            if (v156 >= 0x40) {
              v156 *= 2;
            }
            else {
              unsigned int v156 = 128;
            }
          }
          else if (v156 - HIDWORD(v1204) >= v156 >> 3)
          {
            goto LABEL_308;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1202, v156);
          unsigned int v156 = v1204;
          uint64_t v151 = v1203;
LABEL_308:
          unsigned int v157 = v156 - 1;
          unsigned int v158 = (v156 - 1) & ((v150 >> 4) ^ (v150 >> 9));
          uint64_t v159 = (void *)(v151 + 8 * v158);
          uint64_t v160 = *v159;
          if (*v159 != -1)
          {
            unsigned int v161 = 0;
            int v162 = 1;
            while (v160 != v150)
            {
              if (v161) {
                BOOL v163 = 0;
              }
              else {
                BOOL v163 = v160 == -2;
              }
              if (v163) {
                unsigned int v161 = v159;
              }
              unsigned int v164 = v158 + v162++;
              unsigned int v158 = v164 & v157;
              uint64_t v159 = (void *)(v151 + 8 * (v164 & v157));
              uint64_t v160 = *v159;
              if (*v159 == -1) {
                goto LABEL_320;
              }
            }
            goto LABEL_329;
          }
          unsigned int v161 = 0;
LABEL_320:
          if (v161) {
            uint64_t v165 = v161;
          }
          else {
            uint64_t v165 = v159;
          }
          if (*v165 != v150)
          {
            if (*v165 == -2) {
              LODWORD(v1205) = v1205 - 1;
            }
            else {
              ++HIDWORD(v1204);
            }
            void *v165 = v150;
            goto LABEL_327;
          }
LABEL_329:
          if (++v148 != v149) {
            continue;
          }
          break;
        }
        unsigned int v131 = v1214;
LABEL_338:
        if (v131) {
          continue;
        }
        break;
      }
      if ((void *)v1203 != v1202) {
        free((void *)v1203);
      }
      if (v1213 != &v1215) {
        free(v1213);
      }
LABEL_633:
      if (v75)
      {
LABEL_634:
        if ((*(unsigned char *)v75 & 4) != 0) {
          goto LABEL_638;
        }
      }
      while ((*(_WORD *)(v75 + 44) & 8) != 0)
        uint64_t v75 = *(void *)(v75 + 8);
LABEL_638:
      uint64_t v75 = *(void *)(v75 + 8);
      if ((void *)v75 != v1184) {
        continue;
      }
      break;
    }
    unsigned int v605 = (llvm::MachineInstr **)v1199;
    if (v1200)
    {
      uint64_t v606 = 8 * v1200;
      int v71 = v1147;
      int v607 = v1162;
      do
      {
        v608 = *v605++;
        llvm::MachineInstr::eraseFromParent(v608);
        v606 -= 8;
      }
      while (v606);
      unsigned int v605 = (llvm::MachineInstr **)v1199;
    }
    else
    {
      int v71 = v1147;
      int v607 = v1162;
    }
    if (v605 != (llvm::MachineInstr **)((char *)&v1200 + 8)) {
      free(v605);
    }
    int v609 = v1148;
LABEL_1130:
    int v1148 = v609 | v607;
    int v71 = (void *)v71[1];
    if (v71 != v1151) {
      continue;
    }
    break;
  }
LABEL_1131:
  if ((v1145 - 101) > 3 || v1145 == 102) {
    goto LABEL_1145;
  }
  unsigned int v610 = *(unsigned char **)(v3 + 344);
  if (v610[363])
  {
    int v611 = v610[318];
    v612 = (void *)v1146[41];
    uint64_t v613 = (uint64_t *)v612[7];
    uint64_t v1199 = 0;
    BOOL v16 = v611 == 0;
    uint64_t v614 = 51360;
    if (v16) {
      uint64_t v614 = 53088;
    }
    uint64_t v615 = *(void *)(*(void *)(v3 + 352) + 8) + v614;
    v616 = (llvm::MachineFunction *)v612[4];
    v1213 = 0;
    uint64_t v617 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v616, v615, (unsigned __int8 **)&v1213, 0);
    if (v1213)
    {
      int v1124 = *(unsigned __int8 *)v1213;
      if ((v1124 - 4) > 0x1E)
      {
        if ((v1124 - 3) >= 0xFFFFFFFE) {
          unsigned int v1134 = v1213;
        }
        else {
          unsigned int v1134 = 0;
        }
        if ((v1124 - 3) < 0xFFFFFFFE)
        {
          uint64_t v3 = (uint64_t)v1193;
          if (v1124 == 3) {
            *((void *)v1213 + 1) = 0;
          }
          goto LABEL_1137;
        }
        unint64_t v1126 = (unint64_t)v1134 + 8;
      }
      else
      {
        uint64_t v3 = (uint64_t)v1193;
        if ((*((unsigned char *)v1213 + 1) & 0x7F) != 2 && !*((_DWORD *)v1213 + 3)) {
          goto LABEL_1137;
        }
        uint64_t v1125 = *((void *)v1213 + 2);
        if ((v1125 & 4) == 0) {
          goto LABEL_1137;
        }
        unint64_t v1126 = v1125 & 0xFFFFFFFFFFFFFFF8;
        if (!v1126) {
          goto LABEL_1137;
        }
      }
      v1202 = &v1213;
      sub_1CC5FA668(v1126 + 16, &v1202);
      uint64_t v3 = (uint64_t)v1193;
    }
LABEL_1137:
    uint64_t v618 = v612[5];
    *(void *)(v617 + 24) = v618;
    uint64_t v619 = *(void *)(v618 + 32);
    uint64_t v620 = *(unsigned int *)(v617 + 40);
    if (v620)
    {
      uint64_t v721 = *(void *)(v617 + 32);
      uint64_t v722 = *(void *)(v619 + 40);
      uint64_t v723 = 32 * v620;
      do
      {
        if (!*(unsigned char *)v721)
        {
          uint64_t v724 = *(unsigned int *)(v721 + 4);
          if ((int)v724 >= 0) {
            uint64_t v725 = (uint64_t *)(*(void *)(v722 + 272) + 8 * v724);
          }
          else {
            uint64_t v725 = (uint64_t *)(*(void *)(v722 + 24) + 16 * (v724 & 0x7FFFFFFF) + 8);
          }
          uint64_t v726 = *v725;
          if (*v725)
          {
            uint64_t v727 = *(void *)(v726 + 16);
            *(void *)(v726 + 16) = v721;
            *(void *)(v721 + 16) = v727;
            if (*(unsigned char *)(v721 + 3))
            {
              *(void *)(v721 + 24) = v726;
            }
            else
            {
              *(void *)(v721 + 24) = 0;
              uint64_t v725 = (uint64_t *)(v727 + 24);
            }
          }
          else
          {
            *(void *)(v721 + 16) = v721;
            *(void *)(v721 + 24) = 0;
          }
          *uint64_t v725 = v721;
        }
        v721 += 32;
        v723 -= 32;
      }
      while (v723);
    }
    uint64_t v621 = *(void *)(v619 + 728);
    if (v621) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v621 + 24))(v621, v617);
    }
    unint64_t v622 = *v613 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v617 = v622 | *(void *)v617 & 7;
    *(void *)(v617 + 8) = v613;
    *(void *)(v622 + 8) = v617;
    *uint64_t v613 = *v613 & 7 | v617;
    uint64_t v1203 = 0;
    uint64_t v1204 = 0;
    uint64_t v1205 = 0;
    v1202 = (void *)0x13901000000;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v617, v616, (const llvm::MachineOperand *)&v1202);
    LODWORD(v1202) = 1;
    uint64_t v1203 = 0;
    uint64_t v1204 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v617, v616, (const llvm::MachineOperand *)&v1202);
    LODWORD(v1202) = 1;
    uint64_t v1203 = 0;
    uint64_t v1204 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v617, v616, (const llvm::MachineOperand *)&v1202);
    LODWORD(v1202) = 1;
    uint64_t v1203 = 0;
    uint64_t v1204 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v617, v616, (const llvm::MachineOperand *)&v1202);
    if (v1199)
    {
      int v623 = *(unsigned __int8 *)v1199;
      if ((v623 - 4) > 0x1E)
      {
        if ((v623 - 3) >= 0xFFFFFFFE) {
          v642 = v1199;
        }
        else {
          v642 = 0;
        }
        if ((v623 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v643 = (unint64_t)v642 + 8;
          goto LABEL_1189;
        }
        if (v623 == 3) {
          *((void *)v1199 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v1199 + 1) & 0x7F) == 2 || *((_DWORD *)v1199 + 3))
      {
        uint64_t v1117 = *((void *)v1199 + 2);
        if ((v1117 & 4) != 0)
        {
          unint64_t v643 = v1117 & 0xFFFFFFFFFFFFFFF8;
          if (v643)
          {
LABEL_1189:
            v1202 = &v1199;
            sub_1CC5FA668(v643 + 16, &v1202);
          }
        }
      }
    }
    sub_1CB945C8C(v3, v617);
    LOBYTE(v1148) = 1;
    goto LABEL_1145;
  }
  if (!v610[284]) {
    goto LABEL_1145;
  }
  v636 = (llvm::MachineBasicBlock *)v1146[40];
  v635 = (llvm::MachineBasicBlock *)v1146[41];
  v1213 = 0;
  if (v636 == v635)
  {
    int v637 = v636;
  }
  else
  {
    do
    {
      int v637 = v636;
      v636 = *(llvm::MachineBasicBlock **)v636;
    }
    while (((*((void *)v637 + 12) - *((void *)v637 + 11)) & 0x7FFFFFFF8) != 0 && v636 != v635);
  }
  unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v637);
  if (((*((void *)v637 + 12) - *((void *)v637 + 11)) & 0x7FFFFFFF8) != 0
    || (llvm::MachineBasicBlock *)((char *)v637 + 48) == (llvm::MachineBasicBlock *)FirstTerminator)
  {
    goto LABEL_2164;
  }
  unint64_t v646 = FirstTerminator;
  if (*((void *)v637 + 7) == FirstTerminator)
  {
LABEL_1245:
    if (v636 == v635) {
      goto LABEL_1422;
    }
    uint64_t v663 = *(llvm::MachineBasicBlock **)v637;
    unint64_t v664 = *(void *)v637 + 48;
    v1202 = v1206;
    uint64_t v1203 = (uint64_t)v1206;
    LODWORD(v1205) = 0;
    uint64_t v1204 = 0x100000010;
    v1206[0] = v637;
    uint64_t v665 = *((void *)v635 + 7);
    if (v664 == v665) {
      goto LABEL_1419;
    }
    unint64_t v666 = 0;
    char v667 = 0;
    uint64_t v668 = 0;
    while (v664 != *((void *)v663 + 7))
    {
      unint64_t v664 = *(void *)v664 & 0xFFFFFFFFFFFFFFF8;
      if (!v664 || (*(unsigned char *)v664 & 4) == 0)
      {
        while ((*(_WORD *)(v664 + 44) & 4) != 0)
          unint64_t v664 = *(void *)v664 & 0xFFFFFFFFFFFFFFF8;
      }
      unsigned int v669 = *(unsigned __int16 **)(v664 + 16);
      uint64_t v670 = *((void *)v669 + 2);
      if ((v670 & 0x1000) != 0) {
        unint64_t v666 = v664;
      }
      if (v664 == v665) {
        goto LABEL_1411;
      }
      if ((v670 & 2) != 0)
      {
        if (sub_1CB9551C4((void *)v664)) {
          goto LABEL_1411;
        }
        unsigned int v669 = *(unsigned __int16 **)(v664 + 16);
        LODWORD(v671) = *v669;
      }
      else
      {
        uint64_t v671 = *v669;
        if ((byte_1CD96F573[v671] & 1) != 0 || (v670 & 0x80) != 0) {
          goto LABEL_1411;
        }
      }
      unsigned int v672 = v671 - 789;
      unsigned int v673 = v671 - 4672;
      if (v672 >= 3 && v673 >= 2)
      {
        uint64_t v683 = *((void *)v669 + 1);
        if ((*(_WORD *)(v664 + 44) & 0xC) != 0 && (*(_WORD *)(v664 + 44) & 4) == 0)
        {
          unint64_t v692 = v664;
          if ((v683 & 0x80) != 0) {
            goto LABEL_1411;
          }
          while ((*(_WORD *)(v692 + 44) & 8) != 0)
          {
            unint64_t v692 = *(void *)(v692 + 8);
            if ((*(unsigned char *)(*(void *)(v692 + 16) + 8) & 0x80) != 0) {
              goto LABEL_1411;
            }
          }
          if ((v683 & 0x20) != 0) {
            goto LABEL_1411;
          }
          unint64_t v693 = v664;
          while ((*(_WORD *)(v693 + 44) & 8) != 0)
          {
            unint64_t v693 = *(void *)(v693 + 8);
            if ((*(unsigned char *)(*(void *)(v693 + 16) + 8) & 0x20) != 0) {
              goto LABEL_1411;
            }
          }
          if ((v683 & 0x800) != 0)
          {
LABEL_1411:
            if (v663 == v635) {
              uint64_t v735 = v666;
            }
            else {
              uint64_t v735 = v668;
            }
            if (v667) {
              uint64_t v736 = v735;
            }
            else {
              uint64_t v736 = v666;
            }
            if (v736 && (sub_1CB945C8C((uint64_t)v1193, v736), *(llvm::MachineBasicBlock **)(v736 + 24) == v635))
            {
              if ((void *)v1203 != v1202) {
                free((void *)v1203);
              }
              uint64_t v3 = (uint64_t)v1193;
            }
            else
            {
LABEL_1419:
              if ((void *)v1203 != v1202) {
                free((void *)v1203);
              }
              unint64_t v646 = *((void *)v637 + 7);
LABEL_1422:
              uint64_t v3 = (uint64_t)v1193;
              if (v646 != llvm::MachineBasicBlock::getFirstTerminator(v637))
              {
                while ((*(unsigned char *)(*(void *)(v646 + 16) + 17) & 0x10) == 0)
                {
                  if ((*(unsigned char *)v646 & 4) == 0)
                  {
                    while ((*(_WORD *)(v646 + 44) & 8) != 0)
                      unint64_t v646 = *(void *)(v646 + 8);
                  }
                  unint64_t v646 = *(void *)(v646 + 8);
                  if (v646 == llvm::MachineBasicBlock::getFirstTerminator(v637)) {
                    goto LABEL_2164;
                  }
                }
                uint64_t v661 = (uint64_t)v1193;
                uint64_t v662 = v646;
LABEL_2163:
                sub_1CB945C8C(v661, v662);
              }
            }
            goto LABEL_2164;
          }
          unint64_t v694 = v664;
          while ((*(_WORD *)(v694 + 44) & 8) != 0)
          {
            unint64_t v694 = *(void *)(v694 + 8);
            if ((*(unsigned char *)(*(void *)(v694 + 16) + 9) & 8) != 0) {
              goto LABEL_1411;
            }
          }
        }
        else if ((v683 & 0x8A0) != 0)
        {
          goto LABEL_1411;
        }
      }
      uint64_t v675 = *((void *)v669 + 1);
      if ((*(_WORD *)(v664 + 44) & 0xC) != 0 && (*(_WORD *)(v664 + 44) & 4) == 0)
      {
        unint64_t v682 = v664;
        if ((v675 & 0x400) == 0)
        {
          while ((*(_WORD *)(v682 + 44) & 8) != 0)
          {
            unint64_t v682 = *(void *)(v682 + 8);
            if ((*(unsigned char *)(*(void *)(v682 + 16) + 9) & 4) != 0) {
              goto LABEL_1269;
            }
          }
          goto LABEL_1362;
        }
LABEL_1269:
        uint64_t v677 = *(void *)(*(void *)(v664 + 32) + 16);
        unsigned int v678 = v1202;
        if ((void *)v1203 == v1202)
        {
          unsigned int v679 = HIDWORD(v1204);
          v680 = (char *)(v1203 + 8 * HIDWORD(v1204));
          if (HIDWORD(v1204))
          {
            uint64_t v681 = 0;
            while (*(void *)(v1203 + v681) != v677)
            {
              v681 += 8;
              if (8 * HIDWORD(v1204) == v681) {
                goto LABEL_1322;
              }
            }
            v680 = (char *)(v1203 + v681);
          }
LABEL_1322:
          unsigned int v678 = (void *)v1203;
        }
        else
        {
          int v685 = v1204 - 1;
          unsigned int v686 = (v1204 - 1) & ((v677 >> 4) ^ (v677 >> 9));
          v680 = (char *)(v1203 + 8 * v686);
          uint64_t v687 = *(void *)v680;
          if (*(void *)v680 == -1)
          {
            v688 = 0;
LABEL_1346:
            if (v688) {
              v680 = v688;
            }
            unsigned int v679 = HIDWORD(v1204);
            if (*(void *)v680 != v677) {
              v680 = (char *)(v1203 + 8 * v1204);
            }
          }
          else
          {
            v688 = 0;
            int v689 = 1;
            while (v687 != v677)
            {
              if (v688) {
                BOOL v690 = 0;
              }
              else {
                BOOL v690 = v687 == -2;
              }
              if (v690) {
                v688 = v680;
              }
              unsigned int v691 = v686 + v689++;
              unsigned int v686 = v691 & v685;
              v680 = (char *)(v1203 + 8 * (v691 & v685));
              uint64_t v687 = *(void *)v680;
              if (*(void *)v680 == -1) {
                goto LABEL_1346;
              }
            }
            unsigned int v679 = HIDWORD(v1204);
          }
        }
        unsigned int v701 = v1204;
        if ((void *)v1203 == v678) {
          unsigned int v701 = v679;
        }
        v702 = (char *)(v1203 + 8 * v701);
        if (v667) {
          unint64_t v703 = v668;
        }
        else {
          unint64_t v703 = v666;
        }
        BOOL v704 = v680 == v702;
        if (v704) {
          uint64_t v668 = v703;
        }
        v667 |= v704;
        goto LABEL_1362;
      }
      if ((v675 & 0x400) != 0) {
        goto LABEL_1269;
      }
LABEL_1362:
      uint64_t v665 = *((void *)v635 + 7);
      if (v664 == v665) {
        goto LABEL_1419;
      }
    }
    uint64_t v695 = v1203;
    uint64_t v696 = HIDWORD(v1204);
    if ((void *)v1203 == v1202)
    {
      if (HIDWORD(v1204))
      {
        v697 = 0;
        uint64_t v698 = 8 * HIDWORD(v1204);
        v699 = (llvm::MachineBasicBlock **)v1203;
        while (*v699 != v663)
        {
          if (*v699 == (llvm::MachineBasicBlock *)-2) {
            v697 = v699;
          }
          ++v699;
          v698 -= 8;
          if (!v698)
          {
            if (!v697) {
              goto LABEL_1318;
            }
            llvm::Instruction *v697 = v663;
            LODWORD(v1205) = v1205 - 1;
            goto LABEL_1361;
          }
        }
        goto LABEL_1361;
      }
LABEL_1318:
      unsigned int v700 = v1204;
      if (HIDWORD(v1204) < v1204)
      {
        ++HIDWORD(v1204);
        *(void *)(v1203 + 8 * v696) = v663;
LABEL_1361:
        uint64_t v663 = *(llvm::MachineBasicBlock **)v663;
        unint64_t v664 = (unint64_t)v663 + 48;
        goto LABEL_1362;
      }
    }
    else
    {
      unsigned int v700 = v1204;
    }
    if (3 * v700 <= 4 * (HIDWORD(v1204) - (int)v1205))
    {
      if (v700 >= 0x40) {
        v700 *= 2;
      }
      else {
        unsigned int v700 = 128;
      }
    }
    else if (v700 - HIDWORD(v1204) >= v700 >> 3)
    {
      goto LABEL_1334;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1202, v700);
    unsigned int v700 = v1204;
    uint64_t v695 = v1203;
LABEL_1334:
    unsigned int v705 = v700 - 1;
    unsigned int v706 = (v700 - 1) & ((v663 >> 4) ^ (v663 >> 9));
    v707 = (llvm::MachineBasicBlock **)(v695 + 8 * v706);
    uint64_t v708 = *v707;
    if (*v707 == (llvm::MachineBasicBlock *)-1)
    {
      v709 = 0;
LABEL_1354:
      if (v709) {
        v713 = v709;
      }
      else {
        v713 = v707;
      }
      if (*v713 != v663)
      {
        if (*v713 == (llvm::MachineBasicBlock *)-2) {
          LODWORD(v1205) = v1205 - 1;
        }
        else {
          ++HIDWORD(v1204);
        }
        llvm::ValueAsMetadata *v713 = v663;
      }
    }
    else
    {
      v709 = 0;
      int v710 = 1;
      while (v708 != v663)
      {
        if (v709) {
          BOOL v711 = 0;
        }
        else {
          BOOL v711 = v708 == (llvm::MachineBasicBlock *)-2;
        }
        if (v711) {
          v709 = v707;
        }
        unsigned int v712 = v706 + v710++;
        unsigned int v706 = v712 & v705;
        v707 = (llvm::MachineBasicBlock **)(v695 + 8 * (v712 & v705));
        uint64_t v708 = *v707;
        if (*v707 == (llvm::MachineBasicBlock *)-1) {
          goto LABEL_1354;
        }
      }
    }
    goto LABEL_1361;
  }
  unint64_t v647 = 0;
  while (1)
  {
    uint64_t v648 = *(unsigned __int16 **)(v646 + 16);
    uint64_t v649 = *((void *)v648 + 2);
    if ((v649 & 0x1000) != 0) {
      unint64_t v647 = v646;
    }
    if ((v649 & 2) != 0)
    {
      if (sub_1CB9551C4((void *)v646)) {
        break;
      }
      uint64_t v648 = *(unsigned __int16 **)(v646 + 16);
      LODWORD(v650) = *v648;
      goto LABEL_1202;
    }
    if ((v649 & 0x80) != 0) {
      break;
    }
    uint64_t v650 = *v648;
    if (byte_1CD96F573[v650]) {
      break;
    }
LABEL_1202:
    unsigned int v651 = v650 - 789;
    unsigned int v652 = v650 - 4672;
    if (v651 >= 3 && v652 >= 2)
    {
      __int16 v654 = *(_WORD *)(v646 + 44);
      uint64_t v655 = *((void *)v648 + 1);
      if ((v654 & 0xC) == 0 || (v654 & 4) != 0)
      {
        if ((v655 & 0x8A0) != 0) {
          goto LABEL_1422;
        }
      }
      else
      {
        unint64_t v656 = v646;
        if ((v655 & 0x80) != 0) {
          goto LABEL_1422;
        }
        while ((*(_WORD *)(v656 + 44) & 8) != 0)
        {
          unint64_t v656 = *(void *)(v656 + 8);
          if ((*(unsigned char *)(*(void *)(v656 + 16) + 8) & 0x80) != 0) {
            goto LABEL_1422;
          }
        }
        if ((v655 & 0x20) != 0) {
          goto LABEL_1422;
        }
        unint64_t v657 = v646;
        while ((*(_WORD *)(v657 + 44) & 8) != 0)
        {
          unint64_t v657 = *(void *)(v657 + 8);
          if ((*(unsigned char *)(*(void *)(v657 + 16) + 8) & 0x20) != 0) {
            goto LABEL_1422;
          }
        }
        if ((v655 & 0x800) != 0) {
          goto LABEL_1422;
        }
        unint64_t v658 = v646;
        while ((*(_WORD *)(v658 + 44) & 8) != 0)
        {
          unint64_t v658 = *(void *)(v658 + 8);
          if ((*(unsigned char *)(*(void *)(v658 + 16) + 9) & 8) != 0) {
            goto LABEL_1422;
          }
        }
      }
    }
    unint64_t v646 = *(void *)v646 & 0xFFFFFFFFFFFFFFF8;
    if (!v646 || (*(unsigned char *)v646 & 4) == 0)
    {
      while ((*(_WORD *)(v646 + 44) & 4) != 0)
        unint64_t v646 = *(void *)v646 & 0xFFFFFFFFFFFFFFF8;
    }
    if (v646 == *((void *)v637 + 7)) {
      goto LABEL_1245;
    }
  }
  uint64_t v3 = (uint64_t)v1193;
  if (v647)
  {
    uint64_t v661 = (uint64_t)v1193;
    uint64_t v662 = v647;
    goto LABEL_2163;
  }
LABEL_2164:
  if (v1213)
  {
    int v1088 = *(unsigned __int8 *)v1213;
    if ((v1088 - 4) > 0x1E)
    {
      if ((v1088 - 3) >= 0xFFFFFFFE) {
        uint64_t v1091 = v1213;
      }
      else {
        uint64_t v1091 = 0;
      }
      if ((v1088 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v1090 = (unint64_t)v1091 + 8;
        goto LABEL_2176;
      }
      if (v1088 == 3) {
        *((void *)v1213 + 1) = 0;
      }
    }
    else if ((*((unsigned char *)v1213 + 1) & 0x7F) == 2 || *((_DWORD *)v1213 + 3))
    {
      uint64_t v1089 = *((void *)v1213 + 2);
      if ((v1089 & 4) != 0)
      {
        unint64_t v1090 = v1089 & 0xFFFFFFFFFFFFFFF8;
        if (v1090)
        {
LABEL_2176:
          v1202 = &v1213;
          sub_1CC5FA668(v1090 + 16, &v1202);
        }
      }
    }
  }
LABEL_1145:
  v624 = *(unsigned char **)(v3 + 344);
  if (!v624[399] || !v624[400] && !*(unsigned char *)(v3 + 405)) {
    goto LABEL_1486;
  }
  v625 = (void *)*v1151;
  if ((void *)*v1151 == v1151 || ((*(unsigned __int16 *)(*v1146 + 18) >> 4) & 0x3FFu) - 100 > 8) {
    goto LABEL_1486;
  }
  v626 = *(unsigned char **)(v3 + 344);
  uint64_t v627 = 0;
  v628 = v625 + 6;
  unint64_t v629 = (unint64_t)(v625 + 6);
  while (2)
  {
    unint64_t v630 = v629;
    if ((unint64_t *)v629 == v628) {
      goto LABEL_1157;
    }
    int v631 = *(_WORD *)(v629 + 44) & 4;
    uint64_t v632 = *(void *)(*(void *)(v630 + 16) + 8);
    if ((*(_WORD *)(v630 + 44) & 0xC) == 0 || v631 != 0)
    {
      if ((v632 & 0x20) == 0) {
        goto LABEL_1430;
      }
      goto LABEL_1157;
    }
    unint64_t v634 = v630;
    if ((v632 & 0x20) != 0)
    {
LABEL_1157:
      if (v630 == v625[7])
      {
        uint64_t v627 = (unint64_t *)v630;
        goto LABEL_1430;
      }
      unint64_t v629 = *(void *)v630 & 0xFFFFFFFFFFFFFFF8;
      if (!v629 || (uint64_t v627 = (unint64_t *)v630, (*(unsigned char *)v629 & 4) == 0))
      {
        uint64_t v627 = (unint64_t *)v630;
        if ((*(_WORD *)(v629 + 44) & 4) != 0)
        {
          do
            unint64_t v629 = *(void *)v629 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v629 + 44) & 4) != 0);
          uint64_t v627 = (unint64_t *)v630;
        }
      }
      continue;
    }
    break;
  }
  while ((*(_WORD *)(v634 + 44) & 8) != 0)
  {
    unint64_t v634 = *(void *)(v634 + 8);
    if ((*(unsigned char *)(*(void *)(v634 + 16) + 8) & 0x20) != 0) {
      goto LABEL_1157;
    }
  }
LABEL_1430:
  uint64_t v737 = v1146[2];
  if (*(unsigned char *)(v737 + 324)) {
    unsigned int v738 = 8260;
  }
  else {
    unsigned int v738 = 8261;
  }
  unint64_t v739 = *v628 & 0xFFFFFFFFFFFFFFF8;
  if (!v739 || (*(unsigned char *)v739 & 4) == 0)
  {
    while ((*(_WORD *)(v739 + 44) & 4) != 0)
      unint64_t v739 = *(void *)v739 & 0xFFFFFFFFFFFFFFF8;
  }
  if ((unint64_t *)v739 == v628)
  {
LABEL_1450:
    for (unsigned int k = (void *)v1146[41]; k != v1151; unsigned int k = (void *)k[1])
    {
      if (k != v625)
      {
        unint64_t v743 = k[6] & 0xFFFFFFFFFFFFFFF8;
        if (!v743 || (*(unsigned char *)v743 & 4) == 0)
        {
          while ((*(_WORD *)(v743 + 44) & 4) != 0)
            unint64_t v743 = *(void *)v743 & 0xFFFFFFFFFFFFFFF8;
        }
        while ((void *)v743 != k + 6)
        {
          uint64_t v744 = *(unsigned __int16 **)(v743 + 16);
          if ((*v744 & 0xFFFE) == 0x2044)
          {
            uint64_t v745 = *(void *)(v743 + 32);
            if ((*(void *)(v745 + 16) & 0xFFFFFFFELL) == 2) {
              break;
            }
          }
          else
          {
            uint64_t v745 = *(void *)(v743 + 32);
          }
          if (sub_1CB945D6C(v744, (_DWORD *)v745, *(unsigned char *)(v737 + 400))) {
            goto LABEL_1471;
          }
          unint64_t v743 = *(void *)v743 & 0xFFFFFFFFFFFFFFF8;
          if (!v743 || (*(unsigned char *)v743 & 4) == 0)
          {
            while ((*(_WORD *)(v743 + 44) & 4) != 0)
              unint64_t v743 = *(void *)v743 & 0xFFFFFFFFFFFFFFF8;
          }
        }
      }
    }
LABEL_1470:
    uint64_t v3 = (uint64_t)v1193;
    v624 = v626;
    goto LABEL_1486;
  }
  while (1)
  {
    v740 = *(unsigned __int16 **)(v739 + 16);
    if ((*v740 & 0xFFFE) == 0x2044)
    {
      uint64_t v741 = *(void *)(v739 + 32);
      if ((*(void *)(v741 + 16) & 0xFFFFFFFELL) == 2) {
        goto LABEL_1470;
      }
    }
    else
    {
      uint64_t v741 = *(void *)(v739 + 32);
    }
    if (sub_1CB945D6C(v740, (_DWORD *)v741, *(unsigned char *)(v737 + 400))) {
      break;
    }
    unint64_t v739 = *(void *)v739 & 0xFFFFFFFFFFFFFFF8;
    if (!v739 || (*(unsigned char *)v739 & 4) == 0)
    {
      while ((*(_WORD *)(v739 + 44) & 4) != 0)
        unint64_t v739 = *(void *)v739 & 0xFFFFFFFFFFFFFFF8;
    }
    if ((unint64_t *)v739 == v628) {
      goto LABEL_1450;
    }
  }
LABEL_1471:
  uint64_t v3 = (uint64_t)v1193;
  if (v628 == v627)
  {
    uint64_t v1199 = 0;
    goto LABEL_1476;
  }
  v746 = (void *)v627[7];
  uint64_t v1199 = v746;
  if (!v746)
  {
LABEL_1476:
    uint64_t v747 = *(void *)(v1193[44] + 8) + 48 * v738;
    v748 = (llvm::MachineFunction *)v625[4];
    v1213 = 0;
    goto LABEL_1477;
  }
  llvm::MetadataTracking::track((uint64_t)&v1199, (unsigned __int8 *)v746, 2);
  uint64_t v747 = *(void *)(v1193[44] + 8) + 48 * v738;
  v748 = (llvm::MachineFunction *)v625[4];
  v1213 = v1199;
  if (v1199) {
    llvm::MetadataTracking::track((uint64_t)&v1213, (unsigned __int8 *)v1199, 2);
  }
LABEL_1477:
  uint64_t v749 = llvm::MachineFunction::CreateMachineInstr(v748, v747, (unsigned __int8 **)&v1213, 0);
  if (v1213)
  {
    int v1135 = *(unsigned __int8 *)v1213;
    if ((v1135 - 4) > 0x1E)
    {
      if ((v1135 - 3) >= 0xFFFFFFFE) {
        int v1140 = v1213;
      }
      else {
        int v1140 = 0;
      }
      if ((v1135 - 3) < 0xFFFFFFFE)
      {
        uint64_t v3 = (uint64_t)v1193;
        if (v1135 == 3) {
          *((void *)v1213 + 1) = 0;
        }
        goto LABEL_1478;
      }
      unint64_t v1137 = (unint64_t)v1140 + 8;
    }
    else
    {
      uint64_t v3 = (uint64_t)v1193;
      if ((*((unsigned char *)v1213 + 1) & 0x7F) != 2 && !*((_DWORD *)v1213 + 3)) {
        goto LABEL_1478;
      }
      uint64_t v1136 = *((void *)v1213 + 2);
      if ((v1136 & 4) == 0) {
        goto LABEL_1478;
      }
      unint64_t v1137 = v1136 & 0xFFFFFFFFFFFFFFF8;
      if (!v1137) {
        goto LABEL_1478;
      }
    }
    v1202 = &v1213;
    sub_1CC5FA668(v1137 + 16, &v1202);
    uint64_t v3 = (uint64_t)v1193;
  }
LABEL_1478:
  uint64_t v750 = v625[5];
  *((void *)v749 + 3) = v750;
  uint64_t v751 = *(void *)(v750 + 32);
  uint64_t v752 = *((unsigned int *)v749 + 10);
  if (v752)
  {
    uint64_t v1109 = *((void *)v749 + 4);
    uint64_t v1110 = *(void *)(v751 + 40);
    uint64_t v1111 = 32 * v752;
    do
    {
      if (!*(unsigned char *)v1109)
      {
        uint64_t v1112 = *(unsigned int *)(v1109 + 4);
        if ((int)v1112 >= 0) {
          v1113 = (uint64_t *)(*(void *)(v1110 + 272) + 8 * v1112);
        }
        else {
          v1113 = (uint64_t *)(*(void *)(v1110 + 24) + 16 * (v1112 & 0x7FFFFFFF) + 8);
        }
        uint64_t v1114 = *v1113;
        if (*v1113)
        {
          uint64_t v1115 = *(void *)(v1114 + 16);
          *(void *)(v1114 + 16) = v1109;
          *(void *)(v1109 + 16) = v1115;
          if (*(unsigned char *)(v1109 + 3))
          {
            *(void *)(v1109 + 24) = v1114;
          }
          else
          {
            *(void *)(v1109 + 24) = 0;
            v1113 = (uint64_t *)(v1115 + 24);
          }
        }
        else
        {
          *(void *)(v1109 + 16) = v1109;
          *(void *)(v1109 + 24) = 0;
        }
        uint64_t *v1113 = v1109;
      }
      v1109 += 32;
      v1111 -= 32;
    }
    while (v1111);
  }
  uint64_t v753 = *(void *)(v751 + 728);
  if (v753) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v753 + 24))(v753, v749);
  }
  unint64_t v754 = *v627 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v749 = v754 | *(void *)v749 & 7;
  *((void *)v749 + 1) = v627;
  *(void *)(v754 + 8) = v749;
  *uint64_t v627 = *v627 & 7 | (unint64_t)v749;
  LODWORD(v1202) = 1;
  uint64_t v1203 = 0;
  uint64_t v1204 = 2;
  llvm::MachineInstr::addOperand(v749, v748, (const llvm::MachineOperand *)&v1202);
  LODWORD(v1202) = 1;
  uint64_t v1203 = 0;
  uint64_t v1204 = 1;
  llvm::MachineInstr::addOperand(v749, v748, (const llvm::MachineOperand *)&v1202);
  if (v1199)
  {
    int v755 = *(unsigned __int8 *)v1199;
    if ((v755 - 4) > 0x1E)
    {
      if ((v755 - 3) >= 0xFFFFFFFE) {
        BOOL v1086 = v1199;
      }
      else {
        BOOL v1086 = 0;
      }
      if ((v755 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v1087 = (unint64_t)v1086 + 8;
        goto LABEL_2159;
      }
      if (v755 == 3) {
        *((void *)v1199 + 1) = 0;
      }
    }
    else if ((*((unsigned char *)v1199 + 1) & 0x7F) == 2 || *((_DWORD *)v1199 + 3))
    {
      uint64_t v1120 = *((void *)v1199 + 2);
      if ((v1120 & 4) != 0)
      {
        unint64_t v1087 = v1120 & 0xFFFFFFFFFFFFFFF8;
        if (v1087)
        {
LABEL_2159:
          v1202 = &v1199;
          sub_1CC5FA668(v1087 + 16, &v1202);
        }
      }
    }
  }
  v624 = *(unsigned char **)(v3 + 344);
LABEL_1486:
  v756 = lstat;
  if (v624[375])
  {
    int v757 = v624;
    uint64_t v759 = *(void *)(v3 + 352);
    uint64_t v758 = *(void *)(v3 + 360);
    v1202 = &v1204;
    uint64_t v1203 = 0x2000000000;
    v760 = *(void **)(v1146[41] + 8);
    if (v760 != v1151)
    {
      if (v758) {
        v761 = (void *)(v758 + 8);
      }
      else {
        v761 = 0;
      }
      do
      {
        for (uint64_t m = v760[7]; (void *)m != v760 + 6; uint64_t m = *(void *)(m + 8))
        {
          if ((*(unsigned char *)(*(void *)(m + 16) + 16) & 2) != 0 && sub_1CB9551C4((void *)m))
          {
            unsigned int v763 = *(_DWORD *)(*(void *)(m + 32)
                             + 32 * sub_1CBC7A3F8(**(unsigned __int16 **)(m + 16), 0x24u)
                             + 4);
            unint64_t v764 = *(unsigned int *)(*v761 + 24 * v763 + 16);
            v765 = (_WORD *)(v761[6] + ((v764 >> 3) & 0x1FFFFFFE));
            __int16 v767 = *v765;
            v766 = v765 + 1;
            unsigned __int16 v768 = v767 + (v764 & 0xF) * v763;
            unsigned int v769 = v1203;
            do
            {
              if (v769 >= HIDWORD(v1203)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((_DWORD *)v1202 + v769) = *(unsigned __int16 *)(v761[5] + 4 * v768);
              unsigned int v769 = v1203 + 1;
              LODWORD(v1203) = v1203 + 1;
              int v770 = *v766++;
              v768 += v770;
            }
            while (v770);
          }
          if ((*(unsigned char *)m & 4) == 0)
          {
            while ((*(_WORD *)(m + 44) & 8) != 0)
              uint64_t m = *(void *)(m + 8);
          }
        }
        v760 = (void *)v760[1];
      }
      while (v760 != v1151);
      v756 = lstat;
    }
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    v771 = (uint64_t *)v1202;
    int v772 = (char *)v1202 + 4 * v1203;
    unsigned int v773 = (char *)v1202;
    if (v1203)
    {
      unsigned int v773 = (char *)v1202 - 4;
      uint64_t v774 = 4 * v1203 - 4;
      while (v774)
      {
        int v775 = *((_DWORD *)v773 + 1);
        int v776 = *((_DWORD *)v773 + 2);
        v773 += 4;
        v774 -= 4;
        if (v775 == v776) {
          goto LABEL_1510;
        }
      }
      int v777 = v1146;
    }
    else
    {
LABEL_1510:
      int v777 = v1146;
      if (v773 != v772)
      {
        BOOL v778 = v773 + 8;
        if (v773 + 8 != v772)
        {
          int v779 = *(_DWORD *)v773;
          do
          {
            int v780 = v779;
            int v779 = *(_DWORD *)v778;
            if (v780 != *(_DWORD *)v778)
            {
              *((_DWORD *)v773 + 1) = v779;
              v773 += 4;
            }
            v778 += 4;
          }
          while (v778 != v772);
        }
        int v772 = v773 + 4;
      }
    }
    unint64_t v781 = v772 - (char *)v771;
    unint64_t v782 = (unint64_t)(v772 - (char *)v771) >> 2;
    LODWORD(v1203) = v782;
    uint64_t v783 = 4072;
    if (!v757[318]) {
      uint64_t v783 = 4073;
    }
    uint64_t v1174 = v783;
    uint64_t v784 = 4075;
    if (!v757[318]) {
      uint64_t v784 = 4077;
    }
    int v1189 = (llvm::MachineBasicBlock *)v784;
    if ((v781 >> 2))
    {
      uint64_t v785 = (void *)v777[41];
      v1180 = (unsigned int *)v771 + v782;
      uint64_t v1185 = *(void *)(v759 + 8);
      v786 = (unint64_t *)v785[7];
      while (1)
      {
        unint64_t v787 = *(unsigned int *)v771;
        uint64_t v788 = (uint64_t)v1189;
        if ((v787 - 1) <= 0x1BE)
        {
          uint64_t v788 = (uint64_t)v1189;
          if (((1 << (v787 & 7)) & byte_1CDE6F3CA[v787 >> 3]) != 0) {
            uint64_t v788 = v1174;
          }
        }
        unsigned int v1194 = 0;
        v789 = (llvm::MachineFunction *)v785[4];
        uint64_t v1199 = 0;
        uint64_t v790 = llvm::MachineFunction::CreateMachineInstr(v789, v1185 + 48 * v788, (unsigned __int8 **)&v1199, 0);
        if (v1199)
        {
          int v807 = *(unsigned __int8 *)v1199;
          if ((v807 - 4) > 0x1E)
          {
            if ((v807 - 3) >= 0xFFFFFFFE) {
              uint64_t v810 = v1199;
            }
            else {
              uint64_t v810 = 0;
            }
            if ((v807 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v809 = (unint64_t)v810 + 8;
LABEL_1572:
              v1213 = &v1199;
              sub_1CC5FA668(v809 + 16, &v1213);
              goto LABEL_1528;
            }
            if (v807 == 3) {
              *((void *)v1199 + 1) = 0;
            }
          }
          else if ((*((unsigned char *)v1199 + 1) & 0x7F) == 2 || *((_DWORD *)v1199 + 3))
          {
            uint64_t v808 = *((void *)v1199 + 2);
            if ((v808 & 4) != 0)
            {
              unint64_t v809 = v808 & 0xFFFFFFFFFFFFFFF8;
              if (v809) {
                goto LABEL_1572;
              }
            }
          }
        }
LABEL_1528:
        uint64_t v791 = v785[5];
        *((void *)v790 + 3) = v791;
        uint64_t v792 = *(void *)(v791 + 32);
        uint64_t v793 = *((unsigned int *)v790 + 10);
        if (v793)
        {
          uint64_t v799 = *((void *)v790 + 4);
          uint64_t v800 = *(void *)(v792 + 40);
          uint64_t v801 = 32 * v793;
          do
          {
            if (!*(unsigned char *)v799)
            {
              uint64_t v802 = *(unsigned int *)(v799 + 4);
              if ((int)v802 >= 0) {
                uint64_t v803 = (uint64_t *)(*(void *)(v800 + 272) + 8 * v802);
              }
              else {
                uint64_t v803 = (uint64_t *)(*(void *)(v800 + 24) + 16 * (v802 & 0x7FFFFFFF) + 8);
              }
              uint64_t v804 = *v803;
              if (*v803)
              {
                uint64_t v805 = *(void *)(v804 + 16);
                *(void *)(v804 + 16) = v799;
                *(void *)(v799 + 16) = v805;
                if (*(unsigned char *)(v799 + 3))
                {
                  *(void *)(v799 + 24) = v804;
                }
                else
                {
                  *(void *)(v799 + 24) = 0;
                  uint64_t v803 = (uint64_t *)(v805 + 24);
                }
              }
              else
              {
                *(void *)(v799 + 16) = v799;
                *(void *)(v799 + 24) = 0;
              }
              *uint64_t v803 = v799;
            }
            v799 += 32;
            v801 -= 32;
          }
          while (v801);
        }
        uint64_t v794 = *(void *)(v792 + 728);
        if (v794) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v794 + 24))(v794, v790);
        }
        unint64_t v795 = *v786 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v790 = v795 | *(void *)v790 & 7;
        *((void *)v790 + 1) = v786;
        *(void *)(v795 + 8) = v790;
        unint64_t *v786 = *v786 & 7 | (unint64_t)v790;
        uint64_t v1214 = 0;
        v1215 = 0;
        uint64_t v1216 = 0;
        HIDWORD(v1213) = v787;
        LODWORD(v1213) = 0x1000000;
        llvm::MachineInstr::addOperand(v790, v789, (const llvm::MachineOperand *)&v1213);
        LODWORD(v1213) = 1;
        uint64_t v1214 = 0;
        v1215 = 0;
        llvm::MachineInstr::addOperand(v790, v789, (const llvm::MachineOperand *)&v1213);
        LODWORD(v1213) = 1;
        uint64_t v1214 = 0;
        v1215 = 0;
        llvm::MachineInstr::addOperand(v790, v789, (const llvm::MachineOperand *)&v1213);
        if (!v1194) {
          goto LABEL_1535;
        }
        int v796 = *(unsigned __int8 *)v1194;
        if ((v796 - 4) > 0x1E)
        {
          if ((v796 - 3) >= 0xFFFFFFFE) {
            v797 = (unsigned __int8 *)v1194;
          }
          else {
            v797 = 0;
          }
          if ((v796 - 3) < 0xFFFFFFFE)
          {
            if (v796 == 3) {
              v1194[1] = 0;
            }
            goto LABEL_1535;
          }
          unint64_t v798 = (unint64_t)(v797 + 8);
        }
        else
        {
          if ((*((unsigned char *)v1194 + 1) & 0x7F) != 2 && !*((_DWORD *)v1194 + 3)) {
            goto LABEL_1535;
          }
          unint64_t v806 = (unint64_t)v1194[2];
          if ((v806 & 4) == 0) {
            goto LABEL_1535;
          }
          unint64_t v798 = v806 & 0xFFFFFFFFFFFFFFF8;
          if (!v798) {
            goto LABEL_1535;
          }
        }
        v1213 = &v1194;
        sub_1CC5FA668(v798 + 16, &v1213);
LABEL_1535:
        v771 = (uint64_t *)((char *)v771 + 4);
        if (v771 == (uint64_t *)v1180)
        {
          v771 = (uint64_t *)v1202;
          break;
        }
      }
    }
    uint64_t v3 = (uint64_t)v1193;
    if (v771 != &v1204) {
      free(v771);
    }
    v624 = (unsigned char *)v1193[43];
  }
  if (v624[376])
  {
    v1175 = v624;
    uint64_t v811 = *(void *)(v3 + 360);
    v1164 = *(llvm::MachineFunction **)(v3 + 352);
    uint64_t v1212 = 0;
    v1213 = &v1215;
    uint64_t v1214 = *((void *)v756 + 420);
    v1202 = &v1204;
    uint64_t v1203 = v1214;
    char v1210 = &v1211;
    uint64_t v1211 = 0;
    int v812 = (void *)v1146[5];
    uint64_t v813 = (void *)v1146[41];
    uint64_t v814 = (unsigned __int16 *)v813[19];
    uint64_t v815 = (unsigned __int16 *)v813[20];
    if (v815 != v814)
    {
      if (v811) {
        uint64_t v816 = (void *)(v811 + 8);
      }
      else {
        uint64_t v816 = 0;
      }
      do
      {
        v817 = (unsigned __int16 *)(v816[6]
                                  + (((unint64_t)*(unsigned int *)(*v816 + 24 * *v814 + 16) >> 3) & 0x1FFFFFFE));
        int v819 = *v817;
        v818 = v817 + 1;
        int v820 = v819 + (*(_DWORD *)(*v816 + 24 * *v814 + 16) & 0xF) * *v814;
        do
        {
          LODWORD(v1199) = (unsigned __int16)v820;
          sub_1CB946958((uint64_t)&v1202, (unsigned int *)&v1199);
          int v821 = *v818++;
          v820 += v821;
        }
        while (v821);
        v814 += 8;
      }
      while (v814 != v815);
      uint64_t v813 = (void *)v1146[41];
    }
    uint64_t v822 = &unk_1CD91C000;
    if (v813 != v1151)
    {
      if (v811) {
        v823 = (void *)(v811 + 8);
      }
      else {
        v823 = 0;
      }
      do
      {
        uint64_t v824 = (llvm::MachineBasicBlock *)(v813 + 6);
        v1181 = v813;
        uint64_t v825 = v813[7];
        v1190 = (llvm::MachineBasicBlock *)(v813 + 6);
        while ((llvm::MachineBasicBlock *)v825 != v824)
        {
          uint64_t v826 = *(unsigned int *)(v825 + 40);
          if (!v826) {
            goto LABEL_1622;
          }
          v827 = *(_DWORD **)(v825 + 32);
          v828 = &v827[8 * v826];
          do
          {
            if ((*v827 & 0x10000FF) == 0)
            {
              unsigned int v829 = v827[1];
              unint64_t v830 = *(unsigned int *)(*v823 + 24 * v829 + 16);
              v831 = (_WORD *)(v823[6] + ((v830 >> 3) & 0x1FFFFFFE));
              unsigned __int16 v832 = *v831 + (v830 & 0xF) * v829;
              do
              {
                uint64_t v833 = v832;
                if (v1212)
                {
                  for (n = v1211; n; n = (void *)*n)
                  {
                    unsigned int v835 = *((_DWORD *)n + 7);
                    if (v835 <= v833)
                    {
                      if (v835 >= v833) {
                        goto LABEL_1619;
                      }
                      ++n;
                    }
                  }
                }
                else if (v1203)
                {
                  v836 = v1202;
                  uint64_t v837 = 4 * v1203;
                  while (*v836 != v833)
                  {
                    ++v836;
                    v837 -= 4;
                    if (!v837) {
                      goto LABEL_1611;
                    }
                  }
                  if (v837) {
                    goto LABEL_1619;
                  }
                }
LABEL_1611:
                uint64_t v838 = v823[5];
                uint64_t v839 = 4 * v833;
                unsigned int v840 = *(unsigned __int16 *)(v838 + v839);
                if (*(_WORD *)(v838 + v839))
                {
                  unsigned int v841 = *(unsigned __int16 *)(v838 + 4 * v833 + 2);
                  do
                  {
                    unsigned int v842 = v841;
                    if (sub_1CB946A80(v812, v840))
                    {
                      if (v1214 >= (unint64_t)HIDWORD(v1214)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((_DWORD *)v1213 + v1214) = v840;
                      LODWORD(v1214) = v1214 + 1;
                    }
                    unsigned int v841 = 0;
                    unsigned int v840 = v842;
                  }
                  while (v842);
                }
LABEL_1619:
                int v843 = (unsigned __int16)v831[1];
                ++v831;
                unsigned __int16 v832 = v843 + v833;
              }
              while (v843);
            }
            v827 += 8;
          }
          while (v827 != v828);
          uint64_t v822 = (void *)&unk_1CD91C000;
          if (v825)
          {
LABEL_1622:
            if ((*(unsigned char *)v825 & 4) != 0) {
              goto LABEL_1626;
            }
          }
          while ((*(_WORD *)(v825 + 44) & 8) != 0)
            uint64_t v825 = *(void *)(v825 + 8);
LABEL_1626:
          uint64_t v825 = *(void *)(v825 + 8);
          uint64_t v824 = v1190;
        }
        uint64_t v813 = (void *)v1181[1];
      }
      while (v813 != v1151);
    }
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    v844 = (char *)v1213;
    v845 = (char *)v1213 + 4 * v1214;
    v846 = (char *)v1213;
    if (v1214)
    {
      v846 = (char *)v1213 - 4;
      uint64_t v847 = 4 * v1214 - 4;
      while (v847)
      {
        int v848 = *((_DWORD *)v846 + 1);
        int v849 = *((_DWORD *)v846 + 2);
        v846 += 4;
        v847 -= 4;
        if (v848 == v849) {
          goto LABEL_1632;
        }
      }
    }
    else
    {
LABEL_1632:
      if (v846 != v845)
      {
        v850 = v846 + 8;
        if (v846 + 8 != v845)
        {
          int v851 = *(_DWORD *)v846;
          do
          {
            int v852 = v851;
            int v851 = *(_DWORD *)v850;
            if (v852 != *(_DWORD *)v850)
            {
              *((_DWORD *)v846 + 1) = v851;
              v846 += 4;
            }
            v850 += 4;
          }
          while (v850 != v845);
        }
        v845 = v846 + 4;
      }
    }
    unint64_t v853 = v845 - v844;
    unint64_t v854 = (unint64_t)(v845 - v844) >> 2;
    LODWORD(v1214) = v854;
    uint64_t v855 = 4072;
    if (!v1175[318]) {
      uint64_t v855 = 4073;
    }
    uint64_t v1171 = v855;
    uint64_t v856 = 4075;
    if (!v1175[318]) {
      uint64_t v856 = 4077;
    }
    v1191 = (llvm::MachineBasicBlock *)v856;
    if ((v853 >> 2))
    {
      v1176 = (unsigned int *)&v844[4 * v854];
      uint64_t v1182 = *((void *)v1164 + 1);
      uint64_t v857 = v1146[41];
      v858 = *(unint64_t **)(v857 + 56);
      do
      {
        unint64_t v859 = *(unsigned int *)v844;
        uint64_t v860 = (uint64_t)v1191;
        if ((v859 - 1) <= 0x1BE)
        {
          uint64_t v860 = (uint64_t)v1191;
          if (((1 << (v859 & 7)) & byte_1CDE6F3CA[v859 >> 3]) != 0) {
            uint64_t v860 = v1171;
          }
        }
        v1198 = 0;
        uint64_t v861 = v857;
        v862 = *(llvm::MachineFunction **)(v857 + 32);
        unsigned int v1194 = 0;
        uint64_t v863 = llvm::MachineFunction::CreateMachineInstr(v862, v1182 + 48 * v860, (unsigned __int8 **)&v1194, 0);
        if (v1194)
        {
          int v880 = *(unsigned __int8 *)v1194;
          if ((v880 - 4) > 0x1E)
          {
            if ((v880 - 3) >= 0xFFFFFFFE) {
              v883 = (unsigned __int8 *)v1194;
            }
            else {
              v883 = 0;
            }
            if ((v880 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v882 = (unint64_t)(v883 + 8);
LABEL_1693:
              uint64_t v1199 = &v1194;
              sub_1CC5FA668(v882 + 16, &v1199);
              uint64_t v861 = v857;
              goto LABEL_1649;
            }
            uint64_t v861 = v857;
            if (v880 == 3) {
              v1194[1] = 0;
            }
          }
          else
          {
            uint64_t v861 = v857;
            if ((*((unsigned char *)v1194 + 1) & 0x7F) == 2 || *((_DWORD *)v1194 + 3))
            {
              unint64_t v881 = (unint64_t)v1194[2];
              if ((v881 & 4) != 0)
              {
                unint64_t v882 = v881 & 0xFFFFFFFFFFFFFFF8;
                if (v882) {
                  goto LABEL_1693;
                }
              }
            }
          }
        }
LABEL_1649:
        uint64_t v864 = *(void *)(v861 + 40);
        *((void *)v863 + 3) = v864;
        uint64_t v865 = *(void *)(v864 + 32);
        uint64_t v866 = *((unsigned int *)v863 + 10);
        if (v866)
        {
          uint64_t v872 = *((void *)v863 + 4);
          uint64_t v873 = *(void *)(v865 + 40);
          uint64_t v874 = 32 * v866;
          do
          {
            if (!*(unsigned char *)v872)
            {
              uint64_t v875 = *(unsigned int *)(v872 + 4);
              if ((int)v875 >= 0) {
                BOOL v876 = (uint64_t *)(*(void *)(v873 + 272) + 8 * v875);
              }
              else {
                BOOL v876 = (uint64_t *)(*(void *)(v873 + 24) + 16 * (v875 & 0x7FFFFFFF) + 8);
              }
              uint64_t v877 = *v876;
              if (*v876)
              {
                uint64_t v878 = *(void *)(v877 + 16);
                *(void *)(v877 + 16) = v872;
                *(void *)(v872 + 16) = v878;
                if (*(unsigned char *)(v872 + 3))
                {
                  *(void *)(v872 + 24) = v877;
                }
                else
                {
                  *(void *)(v872 + 24) = 0;
                  BOOL v876 = (uint64_t *)(v878 + 24);
                }
              }
              else
              {
                *(void *)(v872 + 16) = v872;
                *(void *)(v872 + 24) = 0;
              }
              *BOOL v876 = v872;
            }
            v872 += 32;
            v874 -= 32;
          }
          while (v874);
        }
        uint64_t v867 = *(void *)(v865 + 728);
        if (v867) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v867 + 24))(v867, v863);
        }
        unint64_t v868 = *v858 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v863 = v868 | *(void *)v863 & 7;
        *((void *)v863 + 1) = v858;
        *(void *)(v868 + 8) = v863;
        unint64_t *v858 = *v858 & 7 | (unint64_t)v863;
        long long v1200 = 0uLL;
        uint64_t v1201 = 0;
        LODWORD(v1199) = 0x1000000;
        HIDWORD(v1199) = v859;
        llvm::MachineInstr::addOperand(v863, v862, (const llvm::MachineOperand *)&v1199);
        LODWORD(v1199) = 1;
        long long v1200 = 0uLL;
        llvm::MachineInstr::addOperand(v863, v862, (const llvm::MachineOperand *)&v1199);
        LODWORD(v1199) = 1;
        long long v1200 = 0uLL;
        llvm::MachineInstr::addOperand(v863, v862, (const llvm::MachineOperand *)&v1199);
        uint64_t v822 = (void *)&unk_1CD91C000;
        if (!v1198) {
          goto LABEL_1656;
        }
        int v869 = *v1198;
        if ((v869 - 4) > 0x1E)
        {
          if ((v869 - 3) >= 0xFFFFFFFE) {
            uint64_t v870 = v1198;
          }
          else {
            uint64_t v870 = 0;
          }
          if ((v869 - 3) < 0xFFFFFFFE)
          {
            if (v869 == 3) {
              *((void *)v1198 + 1) = 0;
            }
            goto LABEL_1656;
          }
          unint64_t v871 = (unint64_t)(v870 + 8);
        }
        else
        {
          if ((v1198[1] & 0x7F) != 2 && !*((_DWORD *)v1198 + 3)) {
            goto LABEL_1656;
          }
          uint64_t v879 = *((void *)v1198 + 2);
          if ((v879 & 4) == 0) {
            goto LABEL_1656;
          }
          unint64_t v871 = v879 & 0xFFFFFFFFFFFFFFF8;
          if (!v871) {
            goto LABEL_1656;
          }
        }
        uint64_t v1199 = &v1198;
        sub_1CC5FA668(v871 + 16, &v1199);
LABEL_1656:
        v844 += 4;
      }
      while (v844 != (char *)v1176);
    }
    sub_1CB833A08((uint64_t)&v1210, v1211);
    if (v1202 != &v1204) {
      free(v1202);
    }
    uint64_t v3 = (uint64_t)v1193;
    if (v1213 != &v1215) {
      free(v1213);
    }
    v624 = (unsigned char *)v1193[43];
  }
  else
  {
    uint64_t v822 = (void *)&unk_1CD91C000;
  }
  if (v624[318])
  {
    uint64_t v1199 = 0;
    *(void *)&long long v1200 = 0;
    DWORD2(v1200) = 0;
    uint64_t v884 = (void *)v1146[41];
    if (v884 == v1151)
    {
      char v974 = 0;
    }
    else
    {
      char v1172 = 0;
      unsigned int v885 = 0;
      unsigned int v886 = 0;
      unsigned int v887 = 0;
      uint64_t v888 = 0;
      uint64_t v889 = v822[24];
      do
      {
        unsigned int v890 = (int *)(v884 + 6);
        v1177 = v884;
        if (v884 + 6 != (void *)(v884[6] & 0xFFFFFFFFFFFFFFF8))
        {
          BOOL v891 = (uint64_t *)v884[7];
          if (v891 && (uint64_t v892 = *v891, (*v891 & 4) != 0))
          {
            if ((int *)v891[1] != v890) {
              goto LABEL_1714;
            }
          }
          else
          {
            __int16 v893 = *((_WORD *)v891 + 22);
            uint64_t v894 = v884[7];
            if ((v893 & 8) != 0)
            {
              uint64_t v894 = v884[7];
              do
                uint64_t v894 = *(void *)(v894 + 8);
              while ((*(_WORD *)(v894 + 44) & 8) != 0);
            }
            if (*(int **)(v894 + 8) != v890)
            {
              if (v891)
              {
                uint64_t v892 = *v891;
LABEL_1714:
                if ((v892 & 4) == 0)
                {
                  __int16 v893 = *((_WORD *)v891 + 22);
                  goto LABEL_1716;
                }
              }
              else
              {
LABEL_1716:
                if ((v893 & 8) != 0)
                {
                  do
                    BOOL v891 = (uint64_t *)v891[1];
                  while ((*((_WORD *)v891 + 22) & 8) != 0);
                }
              }
              uint64_t v895 = v891[1];
              do
              {
LABEL_1719:
                uint64_t v896 = v895;
                unint64_t v897 = *(void *)v895 & 0xFFFFFFFFFFFFFFF8;
                if (!v897 || (*(unsigned char *)v897 & 4) == 0)
                {
                  while ((*(_WORD *)(v897 + 44) & 4) != 0)
                    unint64_t v897 = *(void *)v897 & 0xFFFFFFFFFFFFFFF8;
                }
                uint64_t v898 = v895;
                if ((*(void *)v895 & 4) == 0)
                {
                  uint64_t v898 = v895;
                  if ((*(_WORD *)(v895 + 44) & 8) != 0)
                  {
                    uint64_t v898 = v895;
                    do
                      uint64_t v898 = *(void *)(v898 + 8);
                    while ((*(_WORD *)(v898 + 44) & 8) != 0);
                  }
                }
                uint64_t v895 = *(void *)(v898 + 8);
                if ((int *)v895 == v890) {
                  goto LABEL_1900;
                }
                uint64_t v899 = *(unsigned __int16 **)(v895 + 16);
                int v900 = *v899;
                BOOL v902 = (v900 - 9) <= 0x3C
                    && ((1 << (v900 - 9)) & 0x1000000000000605) != 0
                    || v900 == 0;
                unsigned int v1192 = v885;
                uint64_t v1186 = v888;
                unsigned int v1183 = v886;
                if (v902 || (v899[4] & 0x10) != 0)
                {
                  unsigned int v903 = v887;
                  int v904 = 1;
                }
                else
                {
                  unsigned int v903 = v887;
                  int v904 = v899[8] & 1;
                }
                unsigned int v887 = v1199;
                unsigned int v886 = HIDWORD(v1199);
                unsigned int v885 = v1200;
                uint64_t v888 = *(void *)((char *)&v1200 + 4);
                if (sub_1CB9516AC((int *)&v1199, v895, v1193[45])) {
                  BOOL v905 = v904 == 0;
                }
                else {
                  BOOL v905 = 1;
                }
              }
              while (v905);
              uint64_t v906 = v1193[43];
              unsigned int v907 = **(unsigned __int16 **)(v896 + 16);
              if (v907 > 0x865)
              {
                if (v907 != 4578 && v907 != 4580)
                {
                  if (v907 != 2150) {
                    goto LABEL_1719;
                  }
                  goto LABEL_1746;
                }
              }
              else if (v907 == 1100)
              {
                if (!*(unsigned char *)(v906 + 338) || *(unsigned char *)(*(void *)(v896 + 32) + 64) != 7) {
                  goto LABEL_1719;
                }
              }
              else
              {
                if (v907 != 2114) {
                  goto LABEL_1719;
                }
LABEL_1746:
                if (!*(unsigned char *)(v906 + 338)) {
                  goto LABEL_1719;
                }
              }
              if ((*(unsigned char *)(*(void *)(v895 + 16) + 16) & 8) == 0 || v885 <= 0xF && v886 < 0xFD || v885 == 1) {
                goto LABEL_1719;
              }
              int v909 = 0;
              while (2)
              {
                if (v897 == v1177[7]) {
                  goto LABEL_1719;
                }
                uint64_t v910 = *(unsigned __int16 **)(v897 + 16);
                int v911 = *v910;
                BOOL v912 = (v911 - 9) > 0x3C
                    || ((1 << (v911 - 9)) & 0x1000000000000605) == 0;
                BOOL v913 = !v912 || v911 == 0;
                if (!v913 && (v910[4] & 0x10) == 0 && (v910[8] & 1) == 0) {
                  goto LABEL_1719;
                }
                v914 = (unsigned char *)(*(void *)v897 & 0xFFFFFFFFFFFFFFF8);
                if (v914)
                {
                  unint64_t v915 = *(void *)v897 & 0xFFFFFFFFFFFFFFF8;
                  if ((*v914 & 4) != 0) {
                    goto LABEL_1777;
                  }
                }
                else
                {
                  unint64_t v915 = 0;
                }
                while ((*(_WORD *)(v915 + 44) & 4) != 0)
                  unint64_t v915 = *(void *)v915 & 0xFFFFFFFFFFFFFFF8;
LABEL_1777:
                if ((v910[8] & 8) != 0)
                {
                  unsigned int v916 = **(unsigned __int16 **)(v915 + 16);
                  if (v916 > 0x865)
                  {
                    if (v916 == 4578 || v916 == 4580) {
                      goto LABEL_1778;
                    }
                    if (v916 != 2150) {
                      goto LABEL_1799;
                    }
                  }
                  else
                  {
                    if (v916 == 1100)
                    {
                      if (!*(unsigned char *)(v906 + 338) || *(unsigned char *)(*(void *)(v915 + 32) + 64) != 7)
                      {
LABEL_1799:
                        unint64_t v918 = v897;
                        if ((*(void *)v897 & 4) == 0)
                        {
                          unint64_t v918 = v897;
                          if ((*(_WORD *)(v897 + 44) & 8) != 0)
                          {
                            unint64_t v918 = v897;
                            do
                              unint64_t v918 = *(void *)(v918 + 8);
                            while ((*(_WORD *)(v918 + 44) & 8) != 0);
                          }
                        }
                        int v919 = *(int **)(v918 + 8);
                        v1202 = &v1204;
                        uint64_t v1203 = v889;
                        int v1208 = 0;
                        uint64_t v1209 = 0;
                        uint64_t v1207 = &v1208;
                        sub_1CB946B00((uint64_t)v1193, *(unsigned int **)(v897 + 32), *(_DWORD *)(v897 + 40), (uint64_t)&v1202, 1, 1);
                        if (v919 != v890)
                        {
                          BOOL v920 = v919;
                          unsigned int v921 = 0;
                          while (1)
                          {
                            v922 = (unsigned __int16 *)*((void *)v920 + 2);
                            int v923 = *v922;
                            BOOL v925 = (v923 - 9) <= 0x3C
                                && ((1 << (v923 - 9)) & 0x1000000000000605) != 0
                                || v923 == 0;
                            if (!v925 && (v922[4] & 0x10) == 0 && (v922[8] & 1) == 0) {
                              goto LABEL_1867;
                            }
                            v926 = (unsigned int *)*((void *)v920 + 4);
                            if ((*v926 & 0x10000FF) != 0x1000000) {
                              goto LABEL_1867;
                            }
                            uint64_t v1152 = (uint64_t)(v920 + 8);
                            unsigned int v1153 = v921;
                            uint64_t v1156 = (llvm::MachineFunction *)v920;
                            uint64_t v1158 = *((void *)v920 + 4);
                            sub_1CB946B00((uint64_t)v1193, v926, v920[10], (uint64_t)&v1202, 0, 1);
                            v927 = (void *)v1193[45];
                            uint64_t v928 = v927[1];
                            unsigned int v929 = *(_DWORD *)(v1158 + 4);
                            uint64_t v930 = v927[7];
                            uint64_t v931 = *(unsigned int *)(v928 + 24 * v929 + 4);
                            if (*(_WORD *)(v930 + 2 * v931))
                            {
                              unsigned int v932 = *(unsigned __int16 *)(v930 + 2 * v931) + v929;
                              v933 = (_WORD *)(v927[11] + 2 * *(unsigned int *)(v928 + 24 * v929 + 12));
                              v934 = (unsigned __int16 *)(v930 + 2 * v931 + 2);
                              while (*v933 != 1)
                              {
                                int v935 = *v934++;
                                v932 += v935;
                                ++v933;
                                if (!v935) {
                                  goto LABEL_1819;
                                }
                              }
                              int v936 = (unsigned __int16)v932;
                              if ((_WORD)v932) {
                                unsigned int v929 = (unsigned __int16)v932;
                              }
                              else {
                                int v936 = *(_DWORD *)(v1158 + 4);
                              }
                            }
                            else
                            {
LABEL_1819:
                              int v936 = *(_DWORD *)(v1158 + 4);
                            }
                            v937 = v927 ? v927 + 1 : 0;
                            unint64_t v938 = *(unsigned int *)(*v937 + 24 * v929 + 16);
                            unsigned int v939 = (unsigned __int16)(*(_WORD *)(v937[6] + ((v938 >> 3) & 0x1FFFFFFE))
                                                    + (v938 & 0xF) * v936);
                            if (v1209) {
                              break;
                            }
                            if (!v1203) {
                              goto LABEL_1847;
                            }
                            v942 = v1202;
                            uint64_t v943 = 4 * v1203;
                            while (*v942 != v939)
                            {
                              ++v942;
                              v943 -= 4;
                              if (!v943) {
                                goto LABEL_1847;
                              }
                            }
                            if (!v943) {
                              goto LABEL_1847;
                            }
LABEL_1839:
                            sub_1CB946B00((uint64_t)v1193, *((unsigned int **)v1156 + 4), *((_DWORD *)v1156 + 10), (uint64_t)&v1202, 1, 0);
                            v944 = v1156;
                            if ((*(unsigned char *)v1156 & 4) != 0)
                            {
                              unsigned int v945 = v1153;
                            }
                            else
                            {
                              unsigned int v945 = v1153;
                              if ((*((_WORD *)v1156 + 22) & 8) != 0)
                              {
                                do
                                  v944 = (llvm::MachineFunction *)*((void *)v944 + 1);
                                while ((*((_WORD *)v944 + 22) & 8) != 0);
                              }
                            }
                            if (v945 <= 4)
                            {
                              BOOL v920 = (int *)*((void *)v944 + 1);
                              unsigned int v921 = v945 + 1;
                              if (v920 != v890) {
                                continue;
                              }
                            }
                            goto LABEL_1867;
                          }
                          for (iuint64_t i = v1208; ii; iuint64_t i = (void *)*ii)
                          {
                            unsigned int v941 = *((_DWORD *)ii + 7);
                            if (v941 <= v939)
                            {
                              if (v941 >= v939) {
                                goto LABEL_1839;
                              }
                              ++ii;
                            }
                          }
LABEL_1847:
                          if (v936 == -1) {
                            goto LABEL_1867;
                          }
                          uint64_t v946 = v1193[43];
                          unsigned int v947 = **((unsigned __int16 **)v1156 + 2);
                          int v1159 = v936;
                          if (v947 > 0x865)
                          {
                            if (v947 == 4578 || v947 == 4580) {
                              goto LABEL_1885;
                            }
                            if (v947 != 2150) {
                              goto LABEL_1859;
                            }
LABEL_1851:
                            if (*(unsigned char *)(v946 + 338)) {
                              goto LABEL_1885;
                            }
LABEL_1859:
                            uint64_t v949 = v896 + 32;
                          }
                          else
                          {
                            if (v947 != 1100)
                            {
                              if (v947 == 2114) {
                                goto LABEL_1851;
                              }
                              goto LABEL_1859;
                            }
                            if (!*(unsigned char *)(v946 + 338) || *(_DWORD *)(*(void *)v1152 + 64) != 7) {
                              goto LABEL_1859;
                            }
LABEL_1885:
                            uint64_t v949 = v1152;
                          }
                          int v1154 = *(_DWORD *)(*(void *)v949 + 68);
                          uint64_t v950 = *(void *)(v1193[44] + 8);
                          v951 = (llvm::MachineFunction *)v1177[4];
                          v952 = *(unsigned __int8 **)(v895 + 56);
                          unsigned int v1194 = (unsigned __int8 **)v952;
                          if (v952)
                          {
                            uint64_t v1173 = v950;
                            llvm::MetadataTracking::track((uint64_t)&v1194, v952, 2);
                            uint64_t v950 = v1173;
                          }
                          unsigned int v953 = llvm::MachineFunction::CreateMachineInstr(v951, v950 + 219840, (unsigned __int8 **)&v1194, 0);
                          unsigned int v954 = v953;
                          size_t v1157 = v951;
                          if (v1194)
                          {
                            unint64_t v969 = v953;
                            int v970 = *(unsigned __int8 *)v1194;
                            if ((v970 - 4) > 0x1E)
                            {
                              if ((v970 - 3) >= 0xFFFFFFFE) {
                                unsigned int v973 = (unsigned __int8 *)v1194;
                              }
                              else {
                                unsigned int v973 = 0;
                              }
                              if ((v970 - 3) < 0xFFFFFFFE)
                              {
                                if (v970 == 3) {
                                  v1194[1] = 0;
                                }
                                goto LABEL_1863;
                              }
                              unint64_t v972 = (unint64_t)(v973 + 8);
                            }
                            else
                            {
                              if ((*((unsigned char *)v1194 + 1) & 0x7F) != 2 && !*((_DWORD *)v1194 + 3)) {
                                goto LABEL_1863;
                              }
                              unint64_t v971 = (unint64_t)v1194[2];
                              if ((v971 & 4) == 0) {
                                goto LABEL_1863;
                              }
                              unint64_t v972 = v971 & 0xFFFFFFFFFFFFFFF8;
                              if (!v972) {
                                goto LABEL_1863;
                              }
                            }
                            v1213 = &v1194;
                            sub_1CC5FA668(v972 + 16, &v1213);
                            unsigned int v954 = v969;
                          }
LABEL_1863:
                          uint64_t v955 = v1177[5];
                          *((void *)v954 + 3) = v955;
                          uint64_t v956 = *(void *)(v955 + 32);
                          uint64_t v957 = *((unsigned int *)v954 + 10);
                          if (v957)
                          {
                            uint64_t v962 = *((void *)v954 + 4);
                            uint64_t v963 = *(void *)(v956 + 40);
                            uint64_t v964 = 32 * v957;
                            do
                            {
                              if (!*(unsigned char *)v962)
                              {
                                uint64_t v965 = *(unsigned int *)(v962 + 4);
                                if ((int)v965 >= 0) {
                                  v966 = (uint64_t *)(*(void *)(v963 + 272) + 8 * v965);
                                }
                                else {
                                  v966 = (uint64_t *)(*(void *)(v963 + 24) + 16 * (v965 & 0x7FFFFFFF) + 8);
                                }
                                uint64_t v967 = *v966;
                                if (*v966)
                                {
                                  uint64_t v968 = *(void *)(v967 + 16);
                                  *(void *)(v967 + 16) = v962;
                                  *(void *)(v962 + 16) = v968;
                                  if (*(unsigned char *)(v962 + 3))
                                  {
                                    *(void *)(v962 + 24) = v967;
                                  }
                                  else
                                  {
                                    *(void *)(v962 + 24) = 0;
                                    v966 = (uint64_t *)(v968 + 24);
                                  }
                                }
                                else
                                {
                                  *(void *)(v962 + 16) = v962;
                                  *(void *)(v962 + 24) = 0;
                                }
                                uint64_t *v966 = v962;
                              }
                              v962 += 32;
                              v964 -= 32;
                            }
                            while (v964);
                          }
                          uint64_t v958 = *(void *)(v956 + 728);
                          if (v958)
                          {
                            v959 = v954;
                            (*(void (**)(uint64_t))(*(void *)v958 + 24))(v958);
                            unsigned int v954 = v959;
                          }
                          unint64_t v960 = *(void *)v897 & 0xFFFFFFFFFFFFFFF8;
                          *(void *)unsigned int v954 = v960 | *(void *)v954 & 7;
                          *((void *)v954 + 1) = v897;
                          *(void *)(v960 + 8) = v954;
                          *(void *)unint64_t v897 = *(void *)v897 & 7 | (unint64_t)v954;
                          uint64_t v1214 = 0;
                          v1215 = 0;
                          uint64_t v1216 = 0;
                          HIDWORD(v1213) = v1159;
                          LODWORD(v1213) = 0x1000000;
                          unint64_t v961 = v954;
                          llvm::MachineInstr::addOperand(v954, v1157, (const llvm::MachineOperand *)&v1213);
                          char v1172 = 1;
                          LODWORD(v1213) = 1;
                          uint64_t v1214 = 0;
                          v1215 = 0;
                          llvm::MachineInstr::addOperand(v961, v1157, (const llvm::MachineOperand *)&v1213);
                          uint64_t v1214 = 0;
                          LODWORD(v1215) = 64;
                          LODWORD(v1216) = 0;
                          HIDWORD(v1213) = v1154;
                          LODWORD(v1213) = 263;
                          llvm::MachineInstr::addOperand(v961, v1157, (const llvm::MachineOperand *)&v1213);
                          **((_DWORD **)v961 + 4) |= 0x4000000u;
                          uint64_t v1199 = (void *)__PAIR64__(v1183, v903);
                          LODWORD(v1200) = v1192;
                          *(void *)((char *)&v1200 + 4) = v1186;
                          sub_1CB9516AC((int *)&v1199, (uint64_t)v961, v1193[45]);
                          sub_1CB9516AC((int *)&v1199, v896, v1193[45]);
                          sub_1CB9516AC((int *)&v1199, v895, v1193[45]);
                        }
LABEL_1867:
                        sub_1CB833A08((uint64_t)&v1207, v1208);
                        if (v1202 != &v1204) {
                          free(v1202);
                        }
                        goto LABEL_1719;
                      }
                      goto LABEL_1778;
                    }
                    if (v916 != 2114) {
                      goto LABEL_1799;
                    }
                  }
                  if (!*(unsigned char *)(v906 + 338)) {
                    goto LABEL_1799;
                  }
                }
LABEL_1778:
                if (v914)
                {
                  unint64_t v897 = *(void *)v897 & 0xFFFFFFFFFFFFFFF8;
                  if ((*v914 & 4) != 0) {
                    goto LABEL_1795;
                  }
                }
                else
                {
                  unint64_t v897 = 0;
                }
                while ((*(_WORD *)(v897 + 44) & 4) != 0)
                  unint64_t v897 = *(void *)v897 & 0xFFFFFFFFFFFFFFF8;
LABEL_1795:
                if (++v909 == v885 - 1) {
                  goto LABEL_1719;
                }
                continue;
              }
            }
          }
        }
LABEL_1900:
        uint64_t v884 = (void *)v1177[1];
      }
      while (v884 != v1151);
      uint64_t v3 = (uint64_t)v1193;
      v624 = (unsigned char *)v1193[43];
      char v974 = v1172;
    }
    LOBYTE(v1148) = v1148 | v974;
  }
  if (v624[332])
  {
    v975 = (void *)v1146[41];
    if (v975 != v1151)
    {
      unsigned int v976 = 0;
      while (1)
      {
        uint64_t v977 = v975 + 6;
        uint64_t v978 = v975[7];
        if ((void *)v978 != v975 + 6) {
          break;
        }
LABEL_1986:
        v975 = (void *)v975[1];
        if (v975 == v1151)
        {
          uint64_t v3 = (uint64_t)v1193;
          v624 = (unsigned char *)v1193[43];
          goto LABEL_1988;
        }
      }
      uint64_t v979 = v975 + 5;
      while (1)
      {
        if (**(unsigned __int16 **)(v978 + 16) - 8267 < 0xA) {
          ++v976;
        }
        else {
          unsigned int v976 = 0;
        }
        if (v976 < 0x21) {
          goto LABEL_1929;
        }
        uint64_t v1199 = 0;
        uint64_t v980 = *(void *)(v1193[44] + 8) + 48 * v1155;
        if ((*(_WORD *)(v978 + 44) & 4) == 0)
        {
          uint64_t v981 = (llvm::MachineFunction *)v975[4];
          v1213 = 0;
          uint64_t v982 = llvm::MachineFunction::CreateMachineInstr(v981, v980, (unsigned __int8 **)&v1213, 0);
          if (v1213)
          {
            int v1001 = *(unsigned __int8 *)v1213;
            if ((v1001 - 4) > 0x1E)
            {
              if ((v1001 - 3) >= 0xFFFFFFFE) {
                v1007 = v1213;
              }
              else {
                v1007 = 0;
              }
              if ((v1001 - 3) < 0xFFFFFFFE)
              {
                if (v1001 == 3) {
                  *((void *)v1213 + 1) = 0;
                }
                goto LABEL_1915;
              }
              unint64_t v1003 = (unint64_t)v1007 + 8;
            }
            else
            {
              if ((*((unsigned char *)v1213 + 1) & 0x7F) != 2 && !*((_DWORD *)v1213 + 3)) {
                goto LABEL_1915;
              }
              uint64_t v1002 = *((void *)v1213 + 2);
              if ((v1002 & 4) == 0) {
                goto LABEL_1915;
              }
              unint64_t v1003 = v1002 & 0xFFFFFFFFFFFFFFF8;
              if (!v1003) {
                goto LABEL_1915;
              }
            }
            v1202 = &v1213;
            sub_1CC5FA668(v1003 + 16, &v1202);
          }
LABEL_1915:
          uint64_t v983 = *v979;
          *((void *)v982 + 3) = *v979;
          uint64_t v984 = *(void *)(v983 + 32);
          uint64_t v985 = *((unsigned int *)v982 + 10);
          if (v985)
          {
            uint64_t v993 = *((void *)v982 + 4);
            uint64_t v994 = *(void *)(v984 + 40);
            uint64_t v995 = 32 * v985;
            do
            {
              if (!*(unsigned char *)v993)
              {
                uint64_t v996 = *(unsigned int *)(v993 + 4);
                if ((int)v996 >= 0) {
                  v997 = (uint64_t *)(*(void *)(v994 + 272) + 8 * v996);
                }
                else {
                  v997 = (uint64_t *)(*(void *)(v994 + 24) + 16 * (v996 & 0x7FFFFFFF) + 8);
                }
                uint64_t v998 = *v997;
                if (*v997)
                {
                  uint64_t v999 = *(void *)(v998 + 16);
                  *(void *)(v998 + 16) = v993;
                  *(void *)(v993 + 16) = v999;
                  if (*(unsigned char *)(v993 + 3))
                  {
                    *(void *)(v993 + 24) = v998;
                  }
                  else
                  {
                    *(void *)(v993 + 24) = 0;
                    v997 = (uint64_t *)(v999 + 24);
                  }
                }
                else
                {
                  *(void *)(v993 + 16) = v993;
                  *(void *)(v993 + 24) = 0;
                }
                uint64_t *v997 = v993;
              }
              v993 += 32;
              v995 -= 32;
            }
            while (v995);
          }
          uint64_t v986 = *(void *)(v984 + 728);
          if (v986) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v986 + 24))(v986, v982);
          }
          unint64_t v987 = *(void *)v978 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t v982 = v987 | *(void *)v982 & 7;
          *((void *)v982 + 1) = v978;
          *(void *)(v987 + 8) = v982;
          *(void *)uint64_t v978 = *(void *)v978 & 7 | (unint64_t)v982;
          goto LABEL_1924;
        }
        unsigned int v988 = (llvm::MachineFunction *)v975[4];
        v1213 = 0;
        BOOL v989 = llvm::MachineFunction::CreateMachineInstr(v988, v980, (unsigned __int8 **)&v1213, 0);
        if (v1213)
        {
          int v1004 = *(unsigned __int8 *)v1213;
          if ((v1004 - 4) > 0x1E)
          {
            if ((v1004 - 3) >= 0xFFFFFFFE) {
              v1008 = v1213;
            }
            else {
              v1008 = 0;
            }
            if ((v1004 - 3) < 0xFFFFFFFE)
            {
              if (v1004 == 3) {
                *((void *)v1213 + 1) = 0;
              }
              goto LABEL_1920;
            }
            unint64_t v1006 = (unint64_t)v1008 + 8;
          }
          else
          {
            if ((*((unsigned char *)v1213 + 1) & 0x7F) != 2 && !*((_DWORD *)v1213 + 3)) {
              goto LABEL_1920;
            }
            uint64_t v1005 = *((void *)v1213 + 2);
            if ((v1005 & 4) == 0) {
              goto LABEL_1920;
            }
            unint64_t v1006 = v1005 & 0xFFFFFFFFFFFFFFF8;
            if (!v1006) {
              goto LABEL_1920;
            }
          }
          v1202 = &v1213;
          sub_1CC5FA668(v1006 + 16, &v1202);
        }
LABEL_1920:
        if (v977 != (void *)v978 && (*(_WORD *)(v978 + 44) & 4) != 0) {
          *((_WORD *)v989 + 22) |= 0xCu;
        }
        sub_1CC31973C(v975 + 5, (uint64_t *)v978, (uint64_t)v989);
LABEL_1924:
        if (v1199)
        {
          int v990 = *(unsigned __int8 *)v1199;
          if ((v990 - 4) > 0x1E)
          {
            if ((v990 - 3) >= 0xFFFFFFFE) {
              v991 = v1199;
            }
            else {
              v991 = 0;
            }
            if ((v990 - 3) < 0xFFFFFFFE)
            {
              if (v990 == 3) {
                *((void *)v1199 + 1) = 0;
              }
              goto LABEL_1928;
            }
            unint64_t v992 = (unint64_t)v991 + 8;
          }
          else
          {
            if ((*((unsigned char *)v1199 + 1) & 0x7F) != 2 && !*((_DWORD *)v1199 + 3)) {
              goto LABEL_1928;
            }
            uint64_t v1000 = *((void *)v1199 + 2);
            if ((v1000 & 4) == 0) {
              goto LABEL_1928;
            }
            unint64_t v992 = v1000 & 0xFFFFFFFFFFFFFFF8;
            if (!v992) {
              goto LABEL_1928;
            }
          }
          v1202 = &v1199;
          sub_1CC5FA668(v992 + 16, &v1202);
        }
LABEL_1928:
        unsigned int v976 = 1;
LABEL_1929:
        if ((*(unsigned char *)v978 & 4) == 0)
        {
          while ((*(_WORD *)(v978 + 44) & 8) != 0)
            uint64_t v978 = *(void *)(v978 + 8);
        }
        uint64_t v978 = *(void *)(v978 + 8);
        if ((void *)v978 == v977) {
          goto LABEL_1986;
        }
      }
    }
  }
LABEL_1988:
  if (v1145 != 101 || !v624[334]) {
    goto LABEL_2040;
  }
  uint64_t v1009 = (void *)v1146[41];
  v1010 = (unint64_t *)v1009[7];
  if (v1010 == v1009 + 6)
  {
    if (v1009 != v1151)
    {
      int v1019 = 0;
      goto LABEL_2016;
    }
    goto LABEL_2040;
  }
  int v1011 = 0;
  unsigned int v1012 = 0;
  uint64_t v1013 = v1009[7];
  while (1)
  {
    __int16 v1014 = *(_WORD *)(v1013 + 44);
    uint64_t v1015 = *(void *)(v1013 + 16);
    uint64_t v1016 = *(void *)(v1015 + 8);
    if ((v1014 & 0xC) != 0 && (v1014 & 4) == 0)
    {
      uint64_t v1020 = v1013;
      if ((v1016 & 0x80) != 0)
      {
LABEL_2008:
        if (v1011) {
          goto LABEL_2040;
        }
        if (v1009 != v1151)
        {
          int v1019 = 1;
          goto LABEL_2016;
        }
        goto LABEL_2029;
      }
      while ((*(_WORD *)(v1020 + 44) & 8) != 0)
      {
        uint64_t v1020 = *(void *)(v1020 + 8);
        if ((*(unsigned char *)(*(void *)(v1020 + 16) + 8) & 0x80) != 0) {
          goto LABEL_2008;
        }
      }
      goto LABEL_1997;
    }
    if ((v1016 & 0x80) != 0) {
      break;
    }
LABEL_1997:
    unint64_t v1018 = *(void *)(v1015 + 16);
    if ((v1018 & 0x10) != 0 || (v1018 & 0x4000000) != 0) {
      goto LABEL_2040;
    }
    if ((v1014 & 8) != 0 && (*(void *)v1013 & 4) == 0)
    {
      do
        uint64_t v1013 = *(void *)(v1013 + 8);
      while ((*(_WORD *)(v1013 + 44) & 8) != 0);
    }
    int v1019 = 0;
    v1011 |= (v1018 >> 26) & 1;
    if (v1012 <= 0x16)
    {
      ++v1012;
      uint64_t v1013 = *(void *)(v1013 + 8);
      if ((void *)v1013 != v1009 + 6) {
        continue;
      }
    }
    goto LABEL_2014;
  }
  int v1019 = 1;
LABEL_2014:
  if (v1011) {
    goto LABEL_2040;
  }
  if (v1009 == v1151)
  {
    if (!v1019) {
      goto LABEL_2040;
    }
  }
  else
  {
LABEL_2016:
    unsigned int v1021 = (void *)v1146[41];
    while (1)
    {
      for (juint64_t j = v1021[7]; (void *)jj != v1021 + 6; juint64_t j = *(void *)(jj + 8))
      {
        unint64_t v1023 = *(void *)(*(void *)(jj + 16) + 16);
        if ((v1023 & 0x10) != 0 || (v1023 & 0x4000000) != 0) {
          goto LABEL_2029;
        }
        if ((*(unsigned char *)jj & 4) == 0)
        {
          while ((*(_WORD *)(jj + 44) & 8) != 0)
            juint64_t j = *(void *)(jj + 8);
        }
        v1019 |= (v1023 >> 26) & 1;
      }
      if (v1019) {
        break;
      }
      int v1019 = 0;
      unsigned int v1021 = (void *)v1021[1];
      if (v1021 == v1151) {
        goto LABEL_2040;
      }
    }
  }
LABEL_2029:
  if (!v624[320] && !v624[321] && !v624[322])
  {
    uint64_t v1199 = 0;
    uint64_t v1092 = *(void *)(v1193[44] + 8) + 183792;
    v1025 = (llvm::MachineFunction *)v1009[4];
    v1213 = 0;
    int v1026 = llvm::MachineFunction::CreateMachineInstr(v1025, v1092, (unsigned __int8 **)&v1213, 0);
    if (!v1213) {
      goto LABEL_2182;
    }
    int v1141 = *(unsigned __int8 *)v1213;
    if ((v1141 - 4) > 0x1E)
    {
      if ((v1141 - 3) >= 0xFFFFFFFE) {
        v1144 = v1213;
      }
      else {
        v1144 = 0;
      }
      if ((v1141 - 3) < 0xFFFFFFFE)
      {
        if (v1141 == 3) {
          *((void *)v1213 + 1) = 0;
        }
        goto LABEL_2182;
      }
      unint64_t v1143 = (unint64_t)v1144 + 8;
    }
    else if ((*((unsigned char *)v1213 + 1) & 0x7F) != 2 && !*((_DWORD *)v1213 + 3) {
           || (uint64_t v1142 = *((void *)v1213 + 2), (v1142 & 4) == 0)
    }
           || (unint64_t v1143 = v1142 & 0xFFFFFFFFFFFFFFF8) == 0)
    {
LABEL_2182:
      uint64_t v1093 = v1009[5];
      *((void *)v1026 + 3) = v1093;
      uint64_t v1028 = *(void *)(v1093 + 32);
      uint64_t v1094 = *((unsigned int *)v1026 + 10);
      if (v1094)
      {
        uint64_t v1095 = *((void *)v1026 + 4);
        uint64_t v1096 = *(void *)(v1028 + 40);
        uint64_t v1097 = 32 * v1094;
        do
        {
          if (!*(unsigned char *)v1095)
          {
            uint64_t v1098 = *(unsigned int *)(v1095 + 4);
            if ((int)v1098 >= 0) {
              int v1099 = (uint64_t *)(*(void *)(v1096 + 272) + 8 * v1098);
            }
            else {
              int v1099 = (uint64_t *)(*(void *)(v1096 + 24) + 16 * (v1098 & 0x7FFFFFFF) + 8);
            }
            uint64_t v1100 = *v1099;
            if (*v1099)
            {
              uint64_t v1101 = *(void *)(v1100 + 16);
              *(void *)(v1100 + 16) = v1095;
              *(void *)(v1095 + 16) = v1101;
              if (*(unsigned char *)(v1095 + 3))
              {
                *(void *)(v1095 + 24) = v1100;
              }
              else
              {
                *(void *)(v1095 + 24) = 0;
                int v1099 = (uint64_t *)(v1101 + 24);
              }
            }
            else
            {
              *(void *)(v1095 + 16) = v1095;
              *(void *)(v1095 + 24) = 0;
            }
            *int v1099 = v1095;
          }
          v1095 += 32;
          v1097 -= 32;
        }
        while (v1097);
      }
      goto LABEL_2034;
    }
    v1202 = &v1213;
    sub_1CC5FA668(v1143 + 16, &v1202);
    goto LABEL_2182;
  }
  uint64_t v1199 = 0;
  uint64_t v1024 = *(void *)(v1193[44] + 8) + 186096;
  v1025 = (llvm::MachineFunction *)v1009[4];
  v1213 = 0;
  int v1026 = llvm::MachineFunction::CreateMachineInstr(v1025, v1024, (unsigned __int8 **)&v1213, 0);
  if (!v1213) {
    goto LABEL_2033;
  }
  int v1130 = *(unsigned __int8 *)v1213;
  if ((v1130 - 4) <= 0x1E)
  {
    if ((*((unsigned char *)v1213 + 1) & 0x7F) != 2 && !*((_DWORD *)v1213 + 3)) {
      goto LABEL_2033;
    }
    uint64_t v1131 = *((void *)v1213 + 2);
    if ((v1131 & 4) == 0) {
      goto LABEL_2033;
    }
    unint64_t v1132 = v1131 & 0xFFFFFFFFFFFFFFF8;
    if (!v1132) {
      goto LABEL_2033;
    }
    goto LABEL_2302;
  }
  if ((v1130 - 3) >= 0xFFFFFFFE) {
    unint64_t v1139 = v1213;
  }
  else {
    unint64_t v1139 = 0;
  }
  if ((v1130 - 3) >= 0xFFFFFFFE)
  {
    unint64_t v1132 = (unint64_t)v1139 + 8;
LABEL_2302:
    v1202 = &v1213;
    sub_1CC5FA668(v1132 + 16, &v1202);
    goto LABEL_2033;
  }
  if (v1130 == 3) {
    *((void *)v1213 + 1) = 0;
  }
LABEL_2033:
  uint64_t v1027 = v1009[5];
  *((void *)v1026 + 3) = v1027;
  uint64_t v1028 = *(void *)(v1027 + 32);
  uint64_t v1029 = *((unsigned int *)v1026 + 10);
  if (v1029)
  {
    uint64_t v1102 = *((void *)v1026 + 4);
    uint64_t v1103 = *(void *)(v1028 + 40);
    uint64_t v1104 = 32 * v1029;
    do
    {
      if (!*(unsigned char *)v1102)
      {
        uint64_t v1105 = *(unsigned int *)(v1102 + 4);
        if ((int)v1105 >= 0) {
          v1106 = (uint64_t *)(*(void *)(v1103 + 272) + 8 * v1105);
        }
        else {
          v1106 = (uint64_t *)(*(void *)(v1103 + 24) + 16 * (v1105 & 0x7FFFFFFF) + 8);
        }
        uint64_t v1107 = *v1106;
        if (*v1106)
        {
          uint64_t v1108 = *(void *)(v1107 + 16);
          *(void *)(v1107 + 16) = v1102;
          *(void *)(v1102 + 16) = v1108;
          if (*(unsigned char *)(v1102 + 3))
          {
            *(void *)(v1102 + 24) = v1107;
          }
          else
          {
            *(void *)(v1102 + 24) = 0;
            v1106 = (uint64_t *)(v1108 + 24);
          }
        }
        else
        {
          *(void *)(v1102 + 16) = v1102;
          *(void *)(v1102 + 24) = 0;
        }
        uint64_t *v1106 = v1102;
      }
      v1102 += 32;
      v1104 -= 32;
    }
    while (v1104);
  }
LABEL_2034:
  uint64_t v1030 = *(void *)(v1028 + 728);
  if (v1030) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v1030 + 24))(v1030, v1026);
  }
  unint64_t v1031 = *v1010 & 0xFFFFFFFFFFFFFFF8;
  *(void *)int v1026 = v1031 | *(void *)v1026 & 7;
  *((void *)v1026 + 1) = v1010;
  *(void *)(v1031 + 8) = v1026;
  unint64_t *v1010 = *v1010 & 7 | (unint64_t)v1026;
  uint64_t v1203 = 0;
  uint64_t v1204 = 0;
  uint64_t v1205 = 0;
  v1202 = (void *)0x13A01000000;
  llvm::MachineInstr::addOperand(v1026, v1025, (const llvm::MachineOperand *)&v1202);
  LODWORD(v1202) = 1;
  uint64_t v1203 = 0;
  uint64_t v1204 = 0;
  llvm::MachineInstr::addOperand(v1026, v1025, (const llvm::MachineOperand *)&v1202);
  uint64_t v1203 = 0;
  LODWORD(v1204) = 68;
  LODWORD(v1205) = 0;
  v1202 = (void *)1031;
  llvm::MachineInstr::addOperand(v1026, v1025, (const llvm::MachineOperand *)&v1202);
  uint64_t v3 = (uint64_t)v1193;
  if (v1199)
  {
    int v1032 = *(unsigned __int8 *)v1199;
    if ((v1032 - 4) > 0x1E)
    {
      if ((v1032 - 3) >= 0xFFFFFFFE) {
        v1084 = v1199;
      }
      else {
        v1084 = 0;
      }
      if ((v1032 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v1085 = (unint64_t)v1084 + 8;
        goto LABEL_2153;
      }
      if (v1032 == 3) {
        *((void *)v1199 + 1) = 0;
      }
    }
    else if ((*((unsigned char *)v1199 + 1) & 0x7F) == 2 || *((_DWORD *)v1199 + 3))
    {
      uint64_t v1119 = *((void *)v1199 + 2);
      if ((v1119 & 4) != 0)
      {
        unint64_t v1085 = v1119 & 0xFFFFFFFFFFFFFFF8;
        if (v1085)
        {
LABEL_2153:
          v1202 = &v1199;
          sub_1CC5FA668(v1085 + 16, &v1202);
        }
      }
    }
  }
LABEL_2040:
  if (*(unsigned char *)(*(void *)(v3 + 344) + 358))
  {
    int v1033 = (void *)v1146[41];
    if (v1033 != v1151)
    {
      while (v1033 + 6 == (void *)(v1033[6] & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_2146:
        int v1033 = (void *)v1033[1];
        if (v1033 == v1151) {
          return v1148 & 1;
        }
      }
      uint64_t v1034 = v1033[7];
      while (2)
      {
        if ((void *)v1034 == v1033 + 6) {
          goto LABEL_2146;
        }
        if (sub_1CD3FB424(v1034, v1193[45]))
        {
          uint64_t v1199 = 0;
          uint64_t v1035 = *(void *)(v1193[44] + 8) + 224448;
          v1036 = (llvm::MachineFunction *)v1033[4];
          v1213 = 0;
          uint64_t v1037 = llvm::MachineFunction::CreateMachineInstr(v1036, v1035, (unsigned __int8 **)&v1213, 0);
          if (!v1213) {
            goto LABEL_2047;
          }
          int v1075 = *(unsigned __int8 *)v1213;
          if ((v1075 - 4) > 0x1E)
          {
            if ((v1075 - 3) >= 0xFFFFFFFE) {
              unsigned int v1081 = v1213;
            }
            else {
              unsigned int v1081 = 0;
            }
            if ((v1075 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v1077 = (unint64_t)v1081 + 8;
              goto LABEL_2135;
            }
            if (v1075 == 3) {
              *((void *)v1213 + 1) = 0;
            }
          }
          else if ((*((unsigned char *)v1213 + 1) & 0x7F) == 2 || *((_DWORD *)v1213 + 3))
          {
            uint64_t v1076 = *((void *)v1213 + 2);
            if ((v1076 & 4) != 0)
            {
              unint64_t v1077 = v1076 & 0xFFFFFFFFFFFFFFF8;
              if (v1077)
              {
LABEL_2135:
                v1202 = &v1213;
                sub_1CC5FA668(v1077 + 16, &v1202);
              }
            }
          }
LABEL_2047:
          uint64_t v1038 = v1033[5];
          *((void *)v1037 + 3) = v1038;
          uint64_t v1039 = *(void *)(v1038 + 32);
          uint64_t v1040 = *((unsigned int *)v1037 + 10);
          if (v1040)
          {
            uint64_t v1059 = *((void *)v1037 + 4);
            uint64_t v1060 = *(void *)(v1039 + 40);
            uint64_t v1061 = 32 * v1040;
            do
            {
              if (!*(unsigned char *)v1059)
              {
                uint64_t v1062 = *(unsigned int *)(v1059 + 4);
                if ((int)v1062 >= 0) {
                  v1063 = (uint64_t *)(*(void *)(v1060 + 272) + 8 * v1062);
                }
                else {
                  v1063 = (uint64_t *)(*(void *)(v1060 + 24) + 16 * (v1062 & 0x7FFFFFFF) + 8);
                }
                uint64_t v1064 = *v1063;
                if (*v1063)
                {
                  uint64_t v1065 = *(void *)(v1064 + 16);
                  *(void *)(v1064 + 16) = v1059;
                  *(void *)(v1059 + 16) = v1065;
                  if (*(unsigned char *)(v1059 + 3))
                  {
                    *(void *)(v1059 + 24) = v1064;
                  }
                  else
                  {
                    *(void *)(v1059 + 24) = 0;
                    v1063 = (uint64_t *)(v1065 + 24);
                  }
                }
                else
                {
                  *(void *)(v1059 + 16) = v1059;
                  *(void *)(v1059 + 24) = 0;
                }
                uint64_t *v1063 = v1059;
              }
              v1059 += 32;
              v1061 -= 32;
            }
            while (v1061);
          }
          uint64_t v1041 = *(void *)(v1039 + 728);
          if (v1041) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v1041 + 24))(v1041, v1037);
          }
          unint64_t v1042 = *(void *)v1034 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t v1037 = v1042 | *(void *)v1037 & 7;
          *((void *)v1037 + 1) = v1034;
          *(void *)(v1042 + 8) = v1037;
          *(void *)uint64_t v1034 = *(void *)v1034 & 7 | (unint64_t)v1037;
          if (v1199)
          {
            int v1043 = *(unsigned __int8 *)v1199;
            if ((v1043 - 4) > 0x1E)
            {
              if ((v1043 - 3) >= 0xFFFFFFFE) {
                v1055 = v1199;
              }
              else {
                v1055 = 0;
              }
              if ((v1043 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v1056 = (unint64_t)v1055 + 8;
                goto LABEL_2075;
              }
              if (v1043 == 3) {
                *((void *)v1199 + 1) = 0;
              }
            }
            else if ((*((unsigned char *)v1199 + 1) & 0x7F) == 2 || *((_DWORD *)v1199 + 3))
            {
              uint64_t v1073 = *((void *)v1199 + 2);
              if ((v1073 & 4) != 0)
              {
                unint64_t v1056 = v1073 & 0xFFFFFFFFFFFFFFF8;
                if (v1056)
                {
LABEL_2075:
                  v1202 = &v1199;
                  sub_1CC5FA668(v1056 + 16, &v1202);
                }
              }
            }
          }
          uint64_t v1044 = v1034;
          if ((*(unsigned char *)v1034 & 4) == 0)
          {
            uint64_t v1044 = v1034;
            if ((*(_WORD *)(v1034 + 44) & 8) != 0)
            {
              uint64_t v1044 = v1034;
              do
                uint64_t v1044 = *(void *)(v1044 + 8);
              while ((*(_WORD *)(v1044 + 44) & 8) != 0);
            }
          }
          int v1045 = *(unint64_t **)(v1044 + 8);
          uint64_t v1199 = 0;
          uint64_t v1046 = *(void *)(v1193[44] + 8) + 35616;
          unint64_t v1047 = (llvm::MachineFunction *)v1033[4];
          v1213 = 0;
          v1048 = llvm::MachineFunction::CreateMachineInstr(v1047, v1046, (unsigned __int8 **)&v1213, 0);
          if (v1213)
          {
            int v1078 = *(unsigned __int8 *)v1213;
            if ((v1078 - 4) > 0x1E)
            {
              if ((v1078 - 3) >= 0xFFFFFFFE) {
                v1082 = v1213;
              }
              else {
                v1082 = 0;
              }
              if ((v1078 - 3) < 0xFFFFFFFE)
              {
                if (v1078 == 3) {
                  *((void *)v1213 + 1) = 0;
                }
                goto LABEL_2059;
              }
              unint64_t v1080 = (unint64_t)v1082 + 8;
            }
            else
            {
              if ((*((unsigned char *)v1213 + 1) & 0x7F) != 2 && !*((_DWORD *)v1213 + 3)) {
                goto LABEL_2059;
              }
              uint64_t v1079 = *((void *)v1213 + 2);
              if ((v1079 & 4) == 0) {
                goto LABEL_2059;
              }
              unint64_t v1080 = v1079 & 0xFFFFFFFFFFFFFFF8;
              if (!v1080) {
                goto LABEL_2059;
              }
            }
            v1202 = &v1213;
            sub_1CC5FA668(v1080 + 16, &v1202);
          }
LABEL_2059:
          uint64_t v1049 = v1033[5];
          *((void *)v1048 + 3) = v1049;
          uint64_t v1050 = *(void *)(v1049 + 32);
          uint64_t v1051 = *((unsigned int *)v1048 + 10);
          if (v1051)
          {
            uint64_t v1066 = *((void *)v1048 + 4);
            uint64_t v1067 = *(void *)(v1050 + 40);
            uint64_t v1068 = 32 * v1051;
            do
            {
              if (!*(unsigned char *)v1066)
              {
                uint64_t v1069 = *(unsigned int *)(v1066 + 4);
                if ((int)v1069 >= 0) {
                  uint64_t v1070 = (uint64_t *)(*(void *)(v1067 + 272) + 8 * v1069);
                }
                else {
                  uint64_t v1070 = (uint64_t *)(*(void *)(v1067 + 24) + 16 * (v1069 & 0x7FFFFFFF) + 8);
                }
                uint64_t v1071 = *v1070;
                if (*v1070)
                {
                  uint64_t v1072 = *(void *)(v1071 + 16);
                  *(void *)(v1071 + 16) = v1066;
                  *(void *)(v1066 + 16) = v1072;
                  if (*(unsigned char *)(v1066 + 3))
                  {
                    *(void *)(v1066 + 24) = v1071;
                  }
                  else
                  {
                    *(void *)(v1066 + 24) = 0;
                    uint64_t v1070 = (uint64_t *)(v1072 + 24);
                  }
                }
                else
                {
                  *(void *)(v1066 + 16) = v1066;
                  *(void *)(v1066 + 24) = 0;
                }
                *uint64_t v1070 = v1066;
              }
              v1066 += 32;
              v1068 -= 32;
            }
            while (v1068);
          }
          uint64_t v1052 = *(void *)(v1050 + 728);
          if (v1052) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v1052 + 24))(v1052, v1048);
          }
          unint64_t v1053 = *v1045 & 0xFFFFFFFFFFFFFFF8;
          *(void *)v1048 = v1053 | *(void *)v1048 & 7;
          *((void *)v1048 + 1) = v1045;
          *(void *)(v1053 + 8) = v1048;
          *int v1045 = *v1045 & 7 | (unint64_t)v1048;
          uint64_t v1203 = 0;
          uint64_t v1204 = 0;
          uint64_t v1205 = 0;
          v1202 = (void *)0x13C01000000;
          llvm::MachineInstr::addOperand(v1048, v1047, (const llvm::MachineOperand *)&v1202);
          LODWORD(v1202) = 1;
          uint64_t v1203 = 0;
          uint64_t v1204 = 0;
          llvm::MachineInstr::addOperand(v1048, v1047, (const llvm::MachineOperand *)&v1202);
          uint64_t v1203 = 0;
          v1202 = (void *)0x13C00000000;
          uint64_t v1204 = 0;
          uint64_t v1205 = 0;
          llvm::MachineInstr::addOperand(v1048, v1047, (const llvm::MachineOperand *)&v1202);
          LODWORD(v1202) = 1;
          uint64_t v1203 = 0;
          uint64_t v1204 = 0;
          llvm::MachineInstr::addOperand(v1048, v1047, (const llvm::MachineOperand *)&v1202);
          if (v1199)
          {
            int v1054 = *(unsigned __int8 *)v1199;
            if ((v1054 - 4) > 0x1E)
            {
              if ((v1054 - 3) >= 0xFFFFFFFE) {
                uint64_t v1057 = v1199;
              }
              else {
                uint64_t v1057 = 0;
              }
              if ((v1054 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v1058 = (unint64_t)v1057 + 8;
                goto LABEL_2081;
              }
              if (v1054 == 3) {
                *((void *)v1199 + 1) = 0;
              }
            }
            else if ((*((unsigned char *)v1199 + 1) & 0x7F) == 2 || *((_DWORD *)v1199 + 3))
            {
              uint64_t v1074 = *((void *)v1199 + 2);
              if ((v1074 & 4) != 0)
              {
                unint64_t v1058 = v1074 & 0xFFFFFFFFFFFFFFF8;
                if (v1058)
                {
LABEL_2081:
                  v1202 = &v1199;
                  sub_1CC5FA668(v1058 + 16, &v1202);
                }
              }
            }
          }
        }
        if ((*(unsigned char *)v1034 & 4) == 0)
        {
          while ((*(_WORD *)(v1034 + 44) & 8) != 0)
            uint64_t v1034 = *(void *)(v1034 + 8);
        }
        uint64_t v1034 = *(void *)(v1034 + 8);
        continue;
      }
    }
  }
  return v1148 & 1;
}

uint64_t sub_1CB945C8C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) + 16);
  if ((v2 & 0x10) != 0 && *(unsigned char *)(*(void *)(result + 344) + 335))
  {
    do
    {
      uint64_t v3 = a2;
      uint64_t v4 = a2;
      if ((*(unsigned char *)a2 & 4) == 0)
      {
        uint64_t v4 = a2;
        if ((*(_WORD *)(a2 + 44) & 8) != 0)
        {
          uint64_t v4 = a2;
          do
            uint64_t v4 = *(void *)(v4 + 8);
          while ((*(_WORD *)(v4 + 44) & 8) != 0);
        }
      }
      uint64_t v5 = *(void *)(a2 + 24);
      a2 = *(void *)(v4 + 8);
      if (a2 == v5 + 48) {
        a2 = *(void *)(*(void *)(v5 + 8) + 56);
      }
    }
    while ((*(unsigned char *)(*(void *)(a2 + 16) + 16) & 0x10) != 0);
  }
  else
  {
    uint64_t v3 = a2;
  }
  if ((v2 & 0x4000012) != 0)
  {
    BOOL result = sub_1CBC7A3F8(**(unsigned __int16 **)(v3 + 16), 0x16u);
    uint64_t v6 = (void *)(*(void *)(v3 + 32) + 32 * result + 16);
    uint64_t v7 = 0x4000000000000000;
  }
  else
  {
    uint64_t v6 = (void *)(*(void *)(v3 + 32) + 48);
    uint64_t v7 = 2048;
  }
  *v6 |= v7;
  return result;
}

BOOL sub_1CB945D6C(unsigned __int16 *a1, _DWORD *a2, char a3)
{
  uint64_t v3 = *((void *)a1 + 2) & 0x2000C00;
  BOOL v5 = (*((void *)a1 + 2) & 0xE00) == 1536;
  BOOL v4 = v5;
  BOOL v5 = !v5 && v3 == 33555456;
  if (!v5)
  {
LABEL_10:
    if (!v4 || (a3 & 1) != 0) {
      return v4;
    }
    goto LABEL_12;
  }
  if (!*a2)
  {
    BOOL v4 = (*a2 & 0x1000000) == 0;
    goto LABEL_10;
  }
  if (a3) {
    return 1;
  }
LABEL_12:
  uint64_t v6 = *(void *)&a2[8 * sub_1CBC7A3F8(*a1, 0x16u) + 4];
  uint64_t v7 = 2048;
  if (v3 != 33555456) {
    uint64_t v7 = 0x100000;
  }
  return (v6 & v7) != 0;
}

uint64_t sub_1CB945E18(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v11 = (unsigned int *)result;
  while (2)
  {
    uint64_t v12 = a2 - 1;
LABEL_3:
    for (uint64_t i = 1 - a4; ; ++i)
    {
      uint64_t v14 = (char *)a2 - (char *)v11;
      unint64_t v15 = a2 - v11;
      if (!(!v6 & v5))
      {
        switch(v15)
        {
          case 0uLL:
          case 1uLL:
            return result;
          case 2uLL:
            unsigned int v32 = *v11;
            if (*v12 < *v11)
            {
              *uint64_t v11 = *v12;
              *uint64_t v12 = v32;
            }
            break;
          case 3uLL:
            BOOL result = sub_1CB946210(v11, v11 + 1, a2 - 1);
            break;
          case 4uLL:
            BOOL result = sub_1CB94658C(v11, v11 + 1, v11 + 2, a2 - 1);
            break;
          case 5uLL:
            BOOL result = sub_1CB946610(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1);
            break;
          default:
            JUMPOUT(0);
        }
        return result;
      }
      if (v14 <= 95)
      {
        uint64_t v20 = v11 + 1;
        BOOL v22 = v11 == a2 || v20 == a2;
        if (a5)
        {
          if (!v22)
          {
            uint64_t v25 = 4;
            uint64_t v26 = v11;
            do
            {
              unsigned int v28 = *v26;
              unsigned int v27 = v26[1];
              uint64_t v26 = v20;
              if (v27 < v28)
              {
                uint64_t v29 = v25;
                do
                {
                  *(unsigned int *)((char *)v11 + v29) = v28;
                  uint64_t v30 = v29 - 4;
                  if (v29 == 4)
                  {
                    uint64_t v31 = v11;
                    goto LABEL_36;
                  }
                  unsigned int v28 = *(unsigned int *)((char *)v11 + v29 - 8);
                  v29 -= 4;
                }
                while (v27 < v28);
                uint64_t v31 = (unsigned int *)((char *)v11 + v30);
LABEL_36:
                *uint64_t v31 = v27;
              }
              uint64_t v20 = v26 + 1;
              v25 += 4;
            }
            while (v26 + 1 != a2);
          }
        }
        else if (!v22)
        {
          do
          {
            unsigned int v24 = *v11;
            unsigned int v23 = v11[1];
            uint64_t v11 = v20;
            if (v23 < v24)
            {
              do
              {
                unsigned int *v20 = v24;
                unsigned int v24 = *(v20 - 2);
                --v20;
              }
              while (v23 < v24);
              unsigned int *v20 = v23;
            }
            uint64_t v20 = v11 + 1;
          }
          while (v11 + 1 != a2);
        }
        return result;
      }
      if (i == 1)
      {
        if (v11 != a2)
        {
          return (uint64_t)sub_1CB9466B8(v11, a2, a2, a3);
        }
        return result;
      }
      unint64_t v16 = v15 >> 1;
      int v17 = &v11[v15 >> 1];
      if ((unint64_t)v14 < 0x201)
      {
        sub_1CB946210(&v11[v15 >> 1], v11, a2 - 1);
      }
      else
      {
        sub_1CB946210(v11, &v11[v15 >> 1], a2 - 1);
        sub_1CB946210(v11 + 1, v17 - 1, a2 - 2);
        sub_1CB946210(v11 + 2, &v11[v16 + 1], a2 - 3);
        sub_1CB946210(v17 - 1, v17, &v11[v16 + 1]);
        unsigned int v35 = *v11;
        *uint64_t v11 = *v17;
        unsigned int *v17 = v35;
      }
      if ((a5 & 1) == 0 && *(v11 - 1) >= *v11)
      {
        BOOL result = (uint64_t)sub_1CB946298(v11, (int *)a2);
        uint64_t v34 = (unsigned int *)result;
        goto LABEL_55;
      }
      uint64_t v18 = sub_1CB946348(v11, a2);
      if ((v19 & 1) == 0) {
        goto LABEL_14;
      }
      BOOL v33 = sub_1CB9463FC(v11, v18);
      uint64_t v34 = v18 + 1;
      BOOL result = sub_1CB9463FC(v18 + 1, a2);
      if (result) {
        break;
      }
      if (!v33)
      {
LABEL_14:
        a4 = -i;
        BOOL result = sub_1CB945E18(v11, v18, a3, -i, a5 & 1);
        a5 = 0;
        uint64_t v11 = v18 + 1;
        goto LABEL_3;
      }
LABEL_55:
      uint64_t v11 = v34;
    }
    a4 = -i;
    a2 = v18;
    if (!v33) {
      continue;
    }
    return result;
  }
}

uint64_t sub_1CB946210(unsigned int *a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3 = *a2;
  unsigned int v4 = *a1;
  unsigned int v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    unsigned int v6 = *a1;
    if (*a2 >= *a1) {
      return 1;
    }
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

unsigned int *sub_1CB946298(unsigned int *a1, int *a2)
{
  unsigned int v2 = *a1;
  if (*a1 >= *(a2 - 1))
  {
    unsigned int v5 = (int *)(a1 + 1);
    do
    {
      unsigned int v3 = (unsigned int *)v5;
      if (v5 >= a2) {
        break;
      }
      ++v5;
    }
    while (v2 >= *v3);
  }
  else
  {
    unsigned int v3 = a1;
    do
    {
      unsigned int v4 = v3[1];
      ++v3;
    }
    while (v2 >= v4);
  }
  if (v3 < (unsigned int *)a2)
  {
    do
      unsigned int v6 = *--a2;
    while (v2 < v6);
  }
  if (v3 < (unsigned int *)a2)
  {
    unsigned int v7 = *v3;
    unsigned int v8 = *a2;
    do
    {
      *unsigned int v3 = v8;
      *a2 = v7;
      do
      {
        unsigned int v9 = v3[1];
        ++v3;
        unsigned int v7 = v9;
      }
      while (v2 >= v9);
      do
      {
        unsigned int v10 = *--a2;
        unsigned int v8 = v10;
      }
      while (v2 < v10);
    }
    while (v3 < (unsigned int *)a2);
  }
  if (v3 - 1 != a1) {
    *a1 = *(v3 - 1);
  }
  *(v3 - 1) = v2;
  return v3;
}

unsigned int *sub_1CB946348(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2 = 0;
  unsigned int v3 = *a1;
  do
    unsigned int v4 = a1[++v2];
  while (v4 < v3);
  unsigned int v5 = &a1[v2];
  unsigned int v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2) {
        break;
      }
      unsigned int v8 = *--a2;
    }
    while (v8 >= v3);
  }
  else
  {
    do
      unsigned int v7 = *--a2;
    while (v7 >= v3);
  }
  if (v5 < a2)
  {
    unsigned int v9 = *a2;
    unsigned int v10 = &a1[v2];
    uint64_t v11 = a2;
    do
    {
      *unsigned int v10 = v9;
      *uint64_t v11 = v4;
      do
      {
        unsigned int v12 = v10[1];
        ++v10;
        unsigned int v4 = v12;
      }
      while (v12 < v3);
      do
      {
        unsigned int v13 = *--v11;
        unsigned int v9 = v13;
      }
      while (v13 >= v3);
    }
    while (v10 < v11);
    unsigned int v6 = v10 - 1;
  }
  if (v6 != a1) {
    *a1 = *v6;
  }
  unsigned int *v6 = v3;
  return v6;
}

BOOL sub_1CB9463FC(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v6 = *(a2 - 1);
      unsigned int v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1CB946210(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1CB94658C(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_1CB946610(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      unsigned int v8 = a1 + 2;
      sub_1CB946210(a1, a1 + 1, a1 + 2);
      unsigned int v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 12;
      break;
  }
  while (1)
  {
    unsigned int v12 = *v9;
    unsigned int v13 = *v8;
    if (*v9 < *v8)
    {
      uint64_t v14 = v11;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v14) = v13;
        uint64_t v15 = v14 - 4;
        if (v14 == 4) {
          break;
        }
        unsigned int v13 = *(unsigned int *)((char *)a1 + v14 - 8);
        v14 -= 4;
        if (v12 >= v13)
        {
          unint64_t v16 = (unsigned int *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      unint64_t v16 = a1;
LABEL_12:
      unsigned int *v16 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    unsigned int v8 = v9;
    v11 += 4;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t sub_1CB94658C(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result = sub_1CB946210(a1, a2, a3);
  unsigned int v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    unsigned int v10 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v10;
      unsigned int v11 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t sub_1CB946610(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t result = sub_1CB94658C(a1, a2, a3, a4);
  unsigned int v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    unsigned int v12 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v12;
      unsigned int v13 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v13;
        unsigned int v14 = *a1;
        if (*a2 < *a1)
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

unsigned int *sub_1CB9466B8(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    unsigned int v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unsigned int v12 = &a1[v10];
      do
      {
        sub_1CB946894((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    unsigned int v13 = v6;
    if (v6 != a3)
    {
      unsigned int v14 = v6;
      do
      {
        unsigned int v15 = *v14;
        if (*v14 < *a1)
        {
          unsigned int *v14 = *a1;
          *a1 = v15;
          sub_1CB946894((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      unsigned int v13 = a3;
    }
    if (v8 >= 5)
    {
      do
      {
        uint64_t v16 = 0;
        unsigned int v17 = *a1;
        uint64_t v18 = a1;
        do
        {
          char v19 = &v18[v16 + 1];
          uint64_t v20 = (2 * v16) | 1;
          uint64_t v16 = 2 * v16 + 2;
          if (v16 >= v9)
          {
            unsigned int v21 = *v19;
            uint64_t v16 = v20;
          }
          else
          {
            unsigned int v21 = *v19;
            unsigned int v22 = v19[1];
            if (*v19 <= v22) {
              unsigned int v21 = v19[1];
            }
            if (*v19 >= v22) {
              uint64_t v16 = v20;
            }
            else {
              ++v19;
            }
          }
          unsigned int *v18 = v21;
          uint64_t v18 = v19;
        }
        while (v16 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
        if (v19 == --v6)
        {
          *char v19 = v17;
        }
        else
        {
          *char v19 = *v6;
          unsigned int *v6 = v17;
          uint64_t v23 = (char *)v19 - (char *)a1 + 4;
          if (v23 >= 5)
          {
            unint64_t v24 = (((unint64_t)v23 >> 2) - 2) >> 1;
            uint64_t v25 = &a1[v24];
            unsigned int v26 = *v25;
            unsigned int v27 = *v19;
            if (*v25 < *v19)
            {
              do
              {
                *char v19 = v26;
                char v19 = v25;
                if (!v24) {
                  break;
                }
                unint64_t v24 = (v24 - 1) >> 1;
                uint64_t v25 = &a1[v24];
                unsigned int v26 = *v25;
              }
              while (*v25 < v27);
              *char v19 = v27;
            }
          }
        }
      }
      while (v9-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_1CB946894(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = (v4 >> 1) + 1;
      uint64_t v8 = (unsigned int *)(result + 4 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 >= a3)
      {
        unsigned int v10 = *v8;
      }
      else
      {
        unsigned int v10 = *v8;
        unsigned int v11 = v8[1];
        if (*v8 <= v11) {
          unsigned int v10 = v8[1];
        }
        if (*v8 < v11)
        {
          ++v8;
          uint64_t v7 = v9;
        }
      }
      unsigned int v12 = *a4;
      if (v10 >= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v13 = (2 * v7) | 1;
          uint64_t v8 = (unsigned int *)(result + 4 * v13);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            unsigned int v10 = *v8;
            uint64_t v7 = v13;
          }
          else
          {
            unsigned int v10 = *v8;
            unsigned int v14 = v8[1];
            if (*v8 <= v14) {
              unsigned int v10 = v8[1];
            }
            if (*v8 >= v14) {
              uint64_t v7 = v13;
            }
            else {
              ++v8;
            }
          }
        }
        while (v10 >= v12);
        *a4 = v12;
      }
    }
  }
  return result;
}

unint64_t sub_1CB946958(uint64_t a1, unsigned int *a2)
{
  if (*(void *)(a1 + 160))
  {
    sub_1CB84AEB8((uint64_t **)(a1 + 144), a2, a2);
    return ((unint64_t)v7 << 32) | 1;
  }
  else
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    unsigned int v3 = *a2;
    if (v2)
    {
      uint64_t v4 = 4 * v2;
      int64_t v5 = *(_DWORD **)a1;
      while (*v5 != v3)
      {
        ++v5;
        v4 -= 4;
        if (!v4) {
          goto LABEL_6;
        }
      }
      if (v4) {
        return 1;
      }
LABEL_6:
      if (v2 <= 0x1F) {
        goto LABEL_7;
      }
      uint64_t v9 = (uint64_t **)(a1 + 144);
      do
      {
        unsigned int v10 = (unsigned int *)(*(void *)a1 + 4 * v2 - 4);
        sub_1CB84AEB8(v9, v10, v10);
        LODWORD(v2) = *(_DWORD *)(a1 + 8) - 1;
        *(_DWORD *)(a1 + 8) = v2;
      }
      while (v2);
      sub_1CB84AEB8(v9, a2, a2);
    }
    else
    {
LABEL_7:
      if (v2 >= *(_DWORD *)(a1 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a1 + 4 * v2) = v3;
      ++*(_DWORD *)(a1 + 8);
    }
    return 0x100000001;
  }
}

BOOL sub_1CB946A80(void *a1, unsigned int a2)
{
  return *(unsigned char *)(*(void *)(*(void *)((*(uint64_t (**)(void))(**(void **)(*a1 + 16) + 176))(*(void *)(*a1 + 16))
                                          + 216)
                              + 16)
                  + a2)
      && ((*(void *)(a1[44] + 8 * (a2 >> 6)) >> a2) & 1) == 0;
}

uint64_t sub_1CB946B00(uint64_t result, unsigned int *a2, int a3, uint64_t a4, char a5, int a6)
{
  if (a3)
  {
    uint64_t v9 = a2;
    uint64_t v10 = result;
    unsigned int v11 = &a2[8 * a3];
    do
    {
      unsigned int v12 = *v9;
      if (!*v9)
      {
        unsigned int v13 = v9[1];
        int v14 = a5 & HIBYTE(v12);
        int v15 = (v12 & 0x1000000) != 0 ? 0 : a6;
        if ((v14 & 1) != 0 || v15)
        {
          uint64_t v16 = *(void *)(v10 + 360);
          if (v16) {
            unsigned int v17 = (void *)(v16 + 8);
          }
          else {
            unsigned int v17 = 0;
          }
          uint64_t v18 = (unsigned __int16 *)(v17[6]
                                   + (((unint64_t)*(unsigned int *)(*v17 + 24 * v13 + 16) >> 3) & 0x1FFFFFFE));
          int v20 = *v18;
          char v19 = v18 + 1;
          int v21 = v20 + (*(_DWORD *)(*v17 + 24 * v13 + 16) & 0xF) * v13;
          do
          {
            unsigned int v23 = (unsigned __int16)v21;
            uint64_t result = sub_1CB8F4B90(a4, &v23);
            int v22 = *v19++;
            v21 += v22;
          }
          while (v22);
        }
      }
      v9 += 8;
    }
    while (v9 != v11);
  }
  return result;
}

BOOL sub_1CB946BF4(uint64_t a1, uint64_t a2)
{
  int v2 = **(unsigned __int16 **)(a2 + 16);
  BOOL result = 1;
  if ((v2 - 8262) >= 3) {
    return (v2 - 2426) < 4;
  }
  return result;
}

uint64_t sub_1CB946C24(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(*(void *)(a2 + 16) + 318)) {
    return 56;
  }
  else {
    return 313;
  }
}

uint64_t sub_1CB946C40()
{
  return 189;
}

uint64_t sub_1CB946C48(uint64_t a1, uint64_t a2)
{
  return 57;
}

void sub_1CB946C88(int a1, llvm::MachineBasicBlock *this, int a3, uint64_t a4)
{
  uint64_t v4 = (void *)*((void *)this + 4);
  int v5 = (*(unsigned __int16 *)(*v4 + 18) >> 4) & 0x3FF;
  if (v5) {
    BOOL v6 = v5 == 8;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6 || v5 == 255) {
    return;
  }
  int v8 = a3;
  uint64_t v10 = v4[7];
  uint64_t v11 = v4[2];
  if (*(unsigned char *)(v11 + 318)) {
    unsigned int v12 = 4075;
  }
  else {
    unsigned int v12 = 4073;
  }
  if (!*(unsigned char *)(v10 + 62))
  {
    unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(this);
LABEL_11:
    unint64_t v14 = FirstTerminator;
    goto LABEL_12;
  }
  if (*(unsigned char *)(v11 + 319))
  {
    unsigned int v12 = 4077;
    int v8 = 56;
  }
  else
  {
    int v8 = a3;
  }
  unint64_t v14 = *((void *)this + 7);
  unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(this);
  if (v14 != FirstTerminator)
  {
    do
    {
      __int16 v39 = *(_WORD *)(v14 + 44);
      uint64_t v40 = *(void *)(*(void *)(v14 + 16) + 8);
      if ((v39 & 0xC) != 0 && (v39 & 4) == 0)
      {
        unint64_t v43 = v14;
        if ((v40 & 0x80) != 0) {
          goto LABEL_12;
        }
        while ((*(_WORD *)(v43 + 44) & 8) != 0)
        {
          unint64_t v43 = *(void *)(v43 + 8);
          if ((*(unsigned char *)(*(void *)(v43 + 16) + 8) & 0x80) != 0) {
            goto LABEL_12;
          }
        }
      }
      else if ((v40 & 0x80) != 0)
      {
        goto LABEL_12;
      }
      if ((v39 & 8) != 0 && (*(void *)v14 & 4) == 0)
      {
        do
          unint64_t v14 = *(void *)(v14 + 8);
        while ((*(_WORD *)(v14 + 44) & 8) != 0);
      }
      unint64_t v14 = *(void *)(v14 + 8);
    }
    while (v14 != FirstTerminator);
    goto LABEL_11;
  }
LABEL_12:
  if ((llvm::MachineBasicBlock *)((char *)this + 48) == (llvm::MachineBasicBlock *)v14)
  {
LABEL_71:
    uint64_t v44 = 0;
LABEL_20:
    uint64_t v21 = *(void *)(a4 + 8) + 48 * v12;
    int v22 = (llvm::MachineFunction *)*((void *)this + 4);
    int v45 = 0;
    goto LABEL_21;
  }
  unint64_t v15 = v14;
  while (1)
  {
    unsigned int v16 = **(unsigned __int16 **)(v15 + 16);
    BOOL v17 = v16 > 0x17;
    int v18 = (1 << v16) & 0x83E000;
    if (v17 || v18 == 0) {
      break;
    }
    unint64_t v15 = *(void *)(v15 + 8);
    if ((llvm::MachineBasicBlock *)v15 == (llvm::MachineBasicBlock *)((char *)this + 48)) {
      goto LABEL_71;
    }
  }
  int v20 = *(unsigned __int8 **)(v15 + 56);
  uint64_t v44 = v20;
  if (!v20) {
    goto LABEL_20;
  }
  llvm::MetadataTracking::track((uint64_t)&v44, v20, 2);
  uint64_t v21 = *(void *)(a4 + 8) + 48 * v12;
  int v22 = (llvm::MachineFunction *)*((void *)this + 4);
  int v45 = v44;
  if (v44) {
    llvm::MetadataTracking::track((uint64_t)&v45, v44, 2);
  }
LABEL_21:
  unsigned int v23 = llvm::MachineFunction::CreateMachineInstr(v22, v21, &v45, 0);
  if (v45) {
    llvm::MetadataTracking::untrack((uint64_t)&v45, v45);
  }
  uint64_t v24 = *((void *)this + 5);
  *((void *)v23 + 3) = v24;
  uint64_t v25 = *(void *)(v24 + 32);
  uint64_t v26 = *((unsigned int *)v23 + 10);
  if (v26)
  {
    uint64_t v29 = *((void *)v23 + 4);
    uint64_t v30 = *(void *)(v25 + 40);
    uint64_t v31 = 32 * v26;
    do
    {
      if (!*(unsigned char *)v29)
      {
        uint64_t v32 = *(unsigned int *)(v29 + 4);
        if ((int)v32 >= 0) {
          BOOL v33 = (uint64_t *)(*(void *)(v30 + 272) + 8 * v32);
        }
        else {
          BOOL v33 = (uint64_t *)(*(void *)(v30 + 24) + 16 * (v32 & 0x7FFFFFFF) + 8);
        }
        uint64_t v34 = *v33;
        if (*v33)
        {
          uint64_t v35 = *(void *)(v34 + 16);
          *(void *)(v34 + 16) = v29;
          *(void *)(v29 + 16) = v35;
          if (*(unsigned char *)(v29 + 3))
          {
            *(void *)(v29 + 24) = v34;
          }
          else
          {
            *(void *)(v29 + 24) = 0;
            BOOL v33 = (uint64_t *)(v35 + 24);
          }
        }
        else
        {
          *(void *)(v29 + 16) = v29;
          *(void *)(v29 + 24) = 0;
        }
        uint64_t *v33 = v29;
      }
      v29 += 32;
      v31 -= 32;
    }
    while (v31);
  }
  uint64_t v27 = *(void *)(v25 + 728);
  if (v27) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v27 + 24))(v27, v23);
  }
  unint64_t v28 = *(void *)v14 & 0xFFFFFFFFFFFFFFF8;
  *(void *)unsigned int v23 = v28 | *(void *)v23 & 7;
  *((void *)v23 + 1) = v14;
  *(void *)(v28 + 8) = v23;
  *(void *)unint64_t v14 = *(void *)v14 & 7 | (unint64_t)v23;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  LODWORD(v46) = 0x1000000;
  HIDWORD(v46) = v8;
  llvm::MachineInstr::addOperand(v23, v22, (const llvm::MachineOperand *)&v46);
  LODWORD(v46) = 1;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  llvm::MachineInstr::addOperand(v23, v22, (const llvm::MachineOperand *)&v46);
  LODWORD(v46) = 1;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  llvm::MachineInstr::addOperand(v23, v22, (const llvm::MachineOperand *)&v46);
  if (v44)
  {
    int v36 = *v44;
    if ((v36 - 4) > 0x1E)
    {
      if ((v36 - 3) >= 0xFFFFFFFE) {
        uint64_t v42 = v44;
      }
      else {
        uint64_t v42 = 0;
      }
      if ((v36 - 3) < 0xFFFFFFFE)
      {
        if (v36 == 3) {
          *((void *)v44 + 1) = 0;
        }
        return;
      }
      unint64_t v38 = (unint64_t)(v42 + 8);
    }
    else
    {
      if ((v44[1] & 0x7F) != 2 && !*((_DWORD *)v44 + 3)) {
        return;
      }
      uint64_t v37 = *((void *)v44 + 2);
      if ((v37 & 4) == 0) {
        return;
      }
      unint64_t v38 = v37 & 0xFFFFFFFFFFFFFFF8;
      if (!v38) {
        return;
      }
    }
    BOOL v46 = &v44;
    sub_1CC5FA668(v38 + 16, &v46);
  }
}

uint64_t sub_1CB947050(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 32);
}

void sub_1CB947058(int a1, llvm::MachineBasicBlock *this, int a3, uint64_t a4)
{
  uint64_t v4 = (void *)*((void *)this + 4);
  int v5 = (*(unsigned __int16 *)(*v4 + 18) >> 4) & 0x3FF;
  BOOL v6 = v5 == 8 || v5 == 0;
  if (v6 || v5 == 255) {
    return;
  }
  int v10 = *(unsigned __int8 *)(v4[2] + 318);
  if (!*(unsigned char *)(v4[7] + 62))
  {
    unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(this);
LABEL_8:
    unint64_t v12 = FirstTerminator;
    goto LABEL_9;
  }
  unint64_t v12 = *((void *)this + 7);
  unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(this);
  if (v12 != FirstTerminator)
  {
    do
    {
      __int16 v28 = *(_WORD *)(v12 + 44);
      uint64_t v29 = *(void *)(*(void *)(v12 + 16) + 8);
      if ((v28 & 0xC) != 0 && (v28 & 4) == 0)
      {
        unint64_t v39 = v12;
        if ((v29 & 0x80) != 0) {
          goto LABEL_9;
        }
        while ((*(_WORD *)(v39 + 44) & 8) != 0)
        {
          unint64_t v39 = *(void *)(v39 + 8);
          if ((*(unsigned char *)(*(void *)(v39 + 16) + 8) & 0x80) != 0) {
            goto LABEL_9;
          }
        }
      }
      else if ((v29 & 0x80) != 0)
      {
        goto LABEL_9;
      }
      if ((v28 & 8) != 0 && (*(void *)v12 & 4) == 0)
      {
        do
          unint64_t v12 = *(void *)(v12 + 8);
        while ((*(_WORD *)(v12 + 44) & 8) != 0);
      }
      unint64_t v12 = *(void *)(v12 + 8);
    }
    while (v12 != FirstTerminator);
    goto LABEL_8;
  }
LABEL_9:
  if ((llvm::MachineBasicBlock *)((char *)this + 48) == (llvm::MachineBasicBlock *)v12)
  {
LABEL_56:
    uint64_t v40 = 0;
  }
  else
  {
    unint64_t v13 = v12;
    while (1)
    {
      unsigned int v14 = **(unsigned __int16 **)(v13 + 16);
      BOOL v15 = v14 > 0x17;
      int v16 = (1 << v14) & 0x83E000;
      if (v15 || v16 == 0) {
        break;
      }
      unint64_t v13 = *(void *)(v13 + 8);
      if ((llvm::MachineBasicBlock *)v13 == (llvm::MachineBasicBlock *)((char *)this + 48)) {
        goto LABEL_56;
      }
    }
    int v18 = *(unsigned __int8 **)(v13 + 56);
    uint64_t v40 = v18;
    if (v18)
    {
      llvm::MetadataTracking::track((uint64_t)&v40, v18, 2);
      uint64_t v38 = 195456;
      if (!v10) {
        uint64_t v38 = 195504;
      }
      uint64_t v20 = *(void *)(a4 + 8) + v38;
      uint64_t v21 = (llvm::MachineFunction *)*((void *)this + 4);
      unsigned int v41 = v40;
      if (v40) {
        llvm::MetadataTracking::track((uint64_t)&v41, v40, 2);
      }
      goto LABEL_20;
    }
  }
  uint64_t v19 = 195456;
  if (!v10) {
    uint64_t v19 = 195504;
  }
  uint64_t v20 = *(void *)(a4 + 8) + v19;
  uint64_t v21 = (llvm::MachineFunction *)*((void *)this + 4);
  unsigned int v41 = 0;
LABEL_20:
  int v22 = llvm::MachineFunction::CreateMachineInstr(v21, v20, &v41, 0);
  if (v41) {
    llvm::MetadataTracking::untrack((uint64_t)&v41, v41);
  }
  uint64_t v23 = *((void *)this + 5);
  *((void *)v22 + 3) = v23;
  uint64_t v24 = *(void *)(v23 + 32);
  uint64_t v25 = *((unsigned int *)v22 + 10);
  if (v25)
  {
    uint64_t v31 = *((void *)v22 + 4);
    uint64_t v32 = *(void *)(v24 + 40);
    uint64_t v33 = 32 * v25;
    do
    {
      if (!*(unsigned char *)v31)
      {
        uint64_t v34 = *(unsigned int *)(v31 + 4);
        if ((int)v34 >= 0) {
          uint64_t v35 = (uint64_t *)(*(void *)(v32 + 272) + 8 * v34);
        }
        else {
          uint64_t v35 = (uint64_t *)(*(void *)(v32 + 24) + 16 * (v34 & 0x7FFFFFFF) + 8);
        }
        uint64_t v36 = *v35;
        if (*v35)
        {
          uint64_t v37 = *(void *)(v36 + 16);
          *(void *)(v36 + 16) = v31;
          *(void *)(v31 + 16) = v37;
          if (*(unsigned char *)(v31 + 3))
          {
            *(void *)(v31 + 24) = v36;
          }
          else
          {
            *(void *)(v31 + 24) = 0;
            uint64_t v35 = (uint64_t *)(v37 + 24);
          }
        }
        else
        {
          *(void *)(v31 + 16) = v31;
          *(void *)(v31 + 24) = 0;
        }
        *uint64_t v35 = v31;
      }
      v31 += 32;
      v33 -= 32;
    }
    while (v33);
  }
  uint64_t v26 = *(void *)(v24 + 728);
  if (v26) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v26 + 24))(v26, v22);
  }
  unint64_t v27 = *(void *)v12 & 0xFFFFFFFFFFFFFFF8;
  *(void *)int v22 = v27 | *(void *)v22 & 7;
  *((void *)v22 + 1) = v12;
  *(void *)(v27 + 8) = v22;
  *(void *)unint64_t v12 = *(void *)v12 & 7 | (unint64_t)v22;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  v42[0] = 0x1000000;
  v42[1] = a3;
  llvm::MachineInstr::addOperand(v22, v21, (const llvm::MachineOperand *)v42);
  v42[0] = 1;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  llvm::MachineInstr::addOperand(v22, v21, (const llvm::MachineOperand *)v42);
  v42[0] = 1;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  llvm::MachineInstr::addOperand(v22, v21, (const llvm::MachineOperand *)v42);
  if (v40) {
    llvm::MetadataTracking::untrack((uint64_t)&v40, v40);
  }
}

uint64_t sub_1CB9473B4@<X0>(llvm::TargetInstrInfo *this@<X2>, uint64_t result@<X0>, void *a3@<X1>, uint64_t a4@<X8>)
{
  if (((a3[12] - a3[11]) & 0x7FFFFFFF8) == 0) {
    goto LABEL_30;
  }
  BOOL v6 = (void *)a3[7];
  if (a3 + 6 == v6) {
    goto LABEL_30;
  }
  uint64_t v8 = result;
  unint64_t v9 = a3[6] & 0xFFFFFFFFFFFFFFF8;
  if (!v9 || (*(unsigned char *)v9 & 4) == 0)
  {
    while ((*(_WORD *)(v9 + 44) & 4) != 0)
      unint64_t v9 = *(void *)v9 & 0xFFFFFFFFFFFFFFF8;
  }
  while (1)
  {
    int v10 = *(unsigned __int16 **)(v9 + 16);
    int v11 = *v10;
    BOOL v12 = (v11 - 9) > 0x3C || ((1 << (v11 - 9)) & 0x1000000000000605) == 0;
    BOOL v13 = !v12 || v11 == 0;
    if (!v13 && (v10[4] & 0x10) == 0) {
      break;
    }
    if ((void *)v9 == v6) {
      goto LABEL_30;
    }
    unint64_t v9 = *(void *)v9 & 0xFFFFFFFFFFFFFFF8;
    if (!v9 || (*(unsigned char *)v9 & 4) == 0)
    {
      while ((*(_WORD *)(v9 + 44) & 4) != 0)
        unint64_t v9 = *(void *)v9 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  if (v11 == 302)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    BOOL v16 = 0;
    char v17 = 0;
    char v18 = 1;
    goto LABEL_32;
  }
  BOOL result = llvm::TargetInstrInfo::isUnpredicatedTerminator(this, (const llvm::MachineInstr *)v9);
  if (!result)
  {
LABEL_30:
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    char v18 = 0;
    BOOL v16 = 0;
LABEL_31:
    char v17 = 0;
    goto LABEL_32;
  }
  int v19 = **(unsigned __int16 **)(v9 + 16);
  if (v9 != a3[7])
  {
    unint64_t v20 = *(void *)v9 & 0xFFFFFFFFFFFFFFF8;
    if (!v20 || (*(unsigned char *)v20 & 4) == 0)
    {
      while ((*(_WORD *)(v20 + 44) & 4) != 0)
        unint64_t v20 = *(void *)v20 & 0xFFFFFFFFFFFFFFF8;
    }
    if (llvm::TargetInstrInfo::isUnpredicatedTerminator(this, (const llvm::MachineInstr *)v20))
    {
      BOOL result = sub_1CB955634(**(unsigned __int16 **)(v20 + 16));
      char v18 = 0;
      uint64_t v14 = 0;
      char v17 = 1;
      if ((result - 47) > 2)
      {
        uint64_t v15 = 0;
        BOOL v16 = 0;
      }
      else
      {
        uint64_t v15 = 0;
        BOOL v16 = 0;
        if (v19 == 288)
        {
          uint64_t v21 = *(void *)((*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v8 + 40))(v8, v20) + 16);
          uint64_t v22 = *(void *)(*(void *)(v20 + 32) + 80);
          BOOL result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v8 + 40))(v8, v9);
          char v18 = 0;
          BOOL v16 = 0;
          char v17 = 0;
          uint64_t v15 = *(void *)(result + 16);
          uint64_t v14 = v22 ? v21 : *(void *)(result + 16);
          if (!v22) {
            uint64_t v15 = v21;
          }
        }
      }
      goto LABEL_32;
    }
  }
  if (v19 == 288)
  {
    BOOL result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v8 + 40))(v8, v9);
    uint64_t v14 = 0;
    char v18 = 0;
    BOOL v16 = 0;
    char v17 = 0;
    uint64_t v15 = *(void *)(result + 16);
    goto LABEL_32;
  }
  BOOL result = sub_1CB955634(v19);
  if ((result - 47) > 2)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    char v18 = 0;
    BOOL v16 = 0;
    char v17 = 1;
    goto LABEL_32;
  }
  BOOL result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v8 + 40))(v8, v9);
  uint64_t v15 = *(void *)(result + 16);
  uint64_t v23 = *(void *)(*(void *)(v9 + 32) + 80);
  BOOL v16 = v23 != 0;
  uint64_t v24 = (void *)a3[11];
  uint64_t v25 = (void *)a3[12];
  if (v24 == v25)
  {
LABEL_55:
    uint64_t v14 = 0;
    char v18 = 0;
    goto LABEL_31;
  }
  uint64_t v26 = a3[1];
  while (v26 != *v24 || *v24 == v15)
  {
    if (++v24 == v25) {
      goto LABEL_55;
    }
  }
  BOOL v28 = v23 == 0;
  if (v23) {
    uint64_t v14 = *(void *)(result + 16);
  }
  else {
    uint64_t v14 = a3[1];
  }
  if (v28) {
    uint64_t v29 = *(void *)(result + 16);
  }
  else {
    uint64_t v29 = a3[1];
  }
  BOOL v30 = v26 == 0;
  if (v26) {
    uint64_t v15 = v29;
  }
  else {
    uint64_t v14 = 0;
  }
  char v18 = 0;
  if (!v30) {
    BOOL v16 = 0;
  }
  char v17 = 0;
LABEL_32:
  *(void *)a4 = v15;
  *(void *)(a4 + 8) = v14;
  *(unsigned char *)(a4 + 16) = v18;
  *(unsigned char *)(a4 + 17) = v16;
  *(unsigned char *)(a4 + 18) = v17;
  return result;
}

void sub_1CB947738(uint64_t a1, llvm::MachineBasicBlock *a2, int a3, char a4, llvm::TargetInstrInfo *a5)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  unint64_t v9 = *(unsigned char **)(*((void *)a2 + 4) + 16);
  unint64_t v10 = sub_1CB94A1DC((uint64_t)a2, a5, &v54);
  int v11 = **(unsigned __int16 **)(v10 + 16);
  int v12 = sub_1CB955608(v11);
  int v13 = sub_1CB955634(v11);
  sub_1CB9571C8(v12, (uint64_t)&v59);
  if (v13 == 48)
  {
    BOOL v43 = v9[318] == 0;
    int v44 = 19;
  }
  else
  {
    if (v13 != 47)
    {
      int v14 = 39;
      goto LABEL_4;
    }
    BOOL v43 = v9[318] == 0;
    int v44 = 5;
  }
  if (v43) {
    int v14 = 33;
  }
  else {
    int v14 = v44;
  }
LABEL_4:
  uint64_t v15 = (int *)v59;
  unsigned int v16 = sub_1CB951118(v14, (_DWORD *)v59, DWORD2(v59), v9);
  int v18 = *v15;
  int v17 = v15[1];
  if (v15 != (int *)&v60)
  {
    unsigned int v49 = v16;
    uint64_t v50 = v15;
    int v51 = v15[1];
    free(v50);
    unsigned int v16 = v49;
    int v17 = v51;
  }
  unsigned int v19 = v16;
  uint64_t v61 = 0;
  long long v59 = 0u;
  long long v60 = 0u;
  sub_1CB94A464((uint64_t)&v59, v10, v18, v17, a4);
  unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(a2);
  uint64_t v21 = (void *)FirstTerminator;
  if ((llvm::MachineBasicBlock *)((char *)a2 + 48) == (llvm::MachineBasicBlock *)FirstTerminator)
  {
LABEL_57:
    uint64_t v52 = 0;
LABEL_14:
    uint64_t v28 = *((void *)a5 + 1) + 48 * v19;
    uint64_t v29 = (llvm::MachineFunction *)*((void *)a2 + 4);
    v53[0] = 0;
    goto LABEL_15;
  }
  unint64_t v22 = FirstTerminator;
  while (1)
  {
    unsigned int v23 = **(unsigned __int16 **)(v22 + 16);
    BOOL v24 = v23 > 0x17;
    int v25 = (1 << v23) & 0x83E000;
    if (v24 || v25 == 0) {
      break;
    }
    unint64_t v22 = *(void *)(v22 + 8);
    if ((llvm::MachineBasicBlock *)v22 == (llvm::MachineBasicBlock *)((char *)a2 + 48)) {
      goto LABEL_57;
    }
  }
  unint64_t v27 = *(unsigned __int8 **)(v22 + 56);
  uint64_t v52 = v27;
  if (!v27) {
    goto LABEL_14;
  }
  llvm::MetadataTracking::track((uint64_t)&v52, v27, 2);
  uint64_t v28 = *((void *)a5 + 1) + 48 * v19;
  uint64_t v29 = (llvm::MachineFunction *)*((void *)a2 + 4);
  v53[0] = v52;
  if (v52) {
    llvm::MetadataTracking::track((uint64_t)v53, v52, 2);
  }
LABEL_15:
  MachineInstr = llvm::MachineFunction::CreateMachineInstr(v29, v28, v53, 0);
  if (v53[0]) {
    llvm::MetadataTracking::untrack((uint64_t)v53, v53[0]);
  }
  uint64_t v31 = *((void *)a2 + 5);
  *((void *)MachineInstr + 3) = v31;
  uint64_t v32 = *(void *)(v31 + 32);
  uint64_t v33 = *((unsigned int *)MachineInstr + 10);
  if (v33)
  {
    uint64_t v36 = *((void *)MachineInstr + 4);
    uint64_t v37 = *(void *)(v32 + 40);
    uint64_t v38 = 32 * v33;
    do
    {
      if (!*(unsigned char *)v36)
      {
        uint64_t v39 = *(unsigned int *)(v36 + 4);
        if ((int)v39 >= 0) {
          uint64_t v40 = (uint64_t *)(*(void *)(v37 + 272) + 8 * v39);
        }
        else {
          uint64_t v40 = (uint64_t *)(*(void *)(v37 + 24) + 16 * (v39 & 0x7FFFFFFF) + 8);
        }
        uint64_t v41 = *v40;
        if (*v40)
        {
          uint64_t v42 = *(void *)(v41 + 16);
          *(void *)(v41 + 16) = v36;
          *(void *)(v36 + 16) = v42;
          if (*(unsigned char *)(v36 + 3))
          {
            *(void *)(v36 + 24) = v41;
          }
          else
          {
            *(void *)(v36 + 24) = 0;
            uint64_t v40 = (uint64_t *)(v42 + 24);
          }
        }
        else
        {
          *(void *)(v36 + 16) = v36;
          *(void *)(v36 + 24) = 0;
        }
        *uint64_t v40 = v36;
      }
      v36 += 32;
      v38 -= 32;
    }
    while (v38);
  }
  uint64_t v34 = *(void *)(v32 + 728);
  if (v34) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v34 + 24))(v34, MachineInstr);
  }
  unint64_t v35 = *v21 & 0xFFFFFFFFFFFFFFF8;
  *(void *)MachineInstr = v35 | *(void *)MachineInstr & 7;
  *((void *)MachineInstr + 1) = v21;
  *(void *)(v35 + 8) = MachineInstr;
  *uint64_t v21 = *v21 & 7 | (unint64_t)MachineInstr;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  LODWORD(v55) = 0x1000000;
  HIDWORD(v55) = a3;
  llvm::MachineInstr::addOperand(MachineInstr, v29, (const llvm::MachineOperand *)&v55);
  LODWORD(v55) = 1;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  llvm::MachineInstr::addOperand(MachineInstr, v29, (const llvm::MachineOperand *)&v55);
  v53[0] = (unsigned __int8 *)v29;
  v53[1] = (unsigned __int8 *)MachineInstr;
  if (v52)
  {
    int v45 = *v52;
    if ((v45 - 4) > 0x1E)
    {
      if ((v45 - 3) >= 0xFFFFFFFE) {
        uint64_t v48 = v52;
      }
      else {
        uint64_t v48 = 0;
      }
      if ((v45 - 3) < 0xFFFFFFFE)
      {
        if (v45 == 3) {
          *((void *)v52 + 1) = 0;
        }
        goto LABEL_21;
      }
      unint64_t v47 = (unint64_t)(v48 + 8);
    }
    else
    {
      if ((v52[1] & 0x7F) != 2 && !*((_DWORD *)v52 + 3)) {
        goto LABEL_21;
      }
      uint64_t v46 = *((void *)v52 + 2);
      if ((v46 & 4) == 0) {
        goto LABEL_21;
      }
      unint64_t v47 = v46 & 0xFFFFFFFFFFFFFFF8;
      if (!v47) {
        goto LABEL_21;
      }
    }
    BOOL v55 = &v52;
    sub_1CC5FA668(v47 + 16, &v55);
  }
LABEL_21:
  sub_1CB94A5BC((uint64_t)&v59, (llvm::MachineFunction **)v53);
  LODWORD(v55) = 1;
  uint64_t v56 = 0;
  uint64_t v57 = 1;
  llvm::MachineInstr::addOperand(MachineInstr, v29, (const llvm::MachineOperand *)&v55);
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  LODWORD(v55) = 0x2000000;
  HIDWORD(v55) = a3;
  llvm::MachineInstr::addOperand(MachineInstr, v29, (const llvm::MachineOperand *)&v55);
}

void sub_1CB947B78(uint64_t a1, void *a2, int a3, uint64_t a4)
{
  unsigned __int8 v7 = (llvm::MachineFunction *)a2[4];
  int v8 = *(unsigned __int8 *)(*((void *)v7 + 2) + 318);
  unint64_t v9 = a2 + 6;
  uint64_t v10 = a2[7];
  if (a2 + 6 == (void *)v10)
  {
LABEL_38:
    int v25 = 0;
LABEL_9:
    uint64_t v17 = 44640;
    if (!v8) {
      uint64_t v17 = 95808;
    }
    uint64_t v18 = *(void *)(a4 + 8) + v17;
    uint64_t v26 = 0;
    goto LABEL_12;
  }
  uint64_t v11 = a2[7];
  while (1)
  {
    unsigned int v12 = **(unsigned __int16 **)(v11 + 16);
    BOOL v13 = v12 > 0x17;
    int v14 = (1 << v12) & 0x83E000;
    if (v13 || v14 == 0) {
      break;
    }
    uint64_t v11 = *(void *)(v11 + 8);
    if ((void *)v11 == v9) {
      goto LABEL_38;
    }
  }
  unsigned int v16 = *(unsigned __int8 **)(v11 + 56);
  int v25 = v16;
  if (!v16) {
    goto LABEL_9;
  }
  llvm::MetadataTracking::track((uint64_t)&v25, v16, 2);
  uint64_t v20 = 44640;
  if (!v8) {
    uint64_t v20 = 95808;
  }
  uint64_t v18 = *(void *)(a4 + 8) + v20;
  unsigned __int8 v7 = (llvm::MachineFunction *)a2[4];
  uint64_t v26 = v25;
  if (v25) {
    llvm::MetadataTracking::track((uint64_t)&v26, v25, 2);
  }
LABEL_12:
  unsigned int v19 = llvm::MachineFunction::CreateMachineInstr(v7, v18, &v26, 0);
  if (v26) {
    llvm::MetadataTracking::untrack((uint64_t)&v26, v26);
  }
  if (v9 != (void *)v10 && (*(_WORD *)(v10 + 44) & 4) != 0) {
    *((_WORD *)v19 + 22) |= 0xCu;
  }
  sub_1CC31973C(a2 + 5, (uint64_t *)v10, (uint64_t)v19);
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  LODWORD(v26) = 0x1000000;
  HIDWORD(v26) = a3;
  llvm::MachineInstr::addOperand(v19, v7, (const llvm::MachineOperand *)&v26);
  LODWORD(v26) = 1;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  llvm::MachineInstr::addOperand(v19, v7, (const llvm::MachineOperand *)&v26);
  LODWORD(v26) = 1;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  llvm::MachineInstr::addOperand(v19, v7, (const llvm::MachineOperand *)&v26);
  LODWORD(v26) = 1;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  llvm::MachineInstr::addOperand(v19, v7, (const llvm::MachineOperand *)&v26);
  LODWORD(v26) = 1;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  llvm::MachineInstr::addOperand(v19, v7, (const llvm::MachineOperand *)&v26);
  LODWORD(v26) = 1;
  uint64_t v27 = 0;
  uint64_t v28 = 1;
  llvm::MachineInstr::addOperand(v19, v7, (const llvm::MachineOperand *)&v26);
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  LODWORD(v26) = 0x2000000;
  HIDWORD(v26) = a3;
  llvm::MachineInstr::addOperand(v19, v7, (const llvm::MachineOperand *)&v26);
  if (v25)
  {
    int v21 = *v25;
    if ((v21 - 4) > 0x1E)
    {
      if ((v21 - 3) >= 0xFFFFFFFE) {
        BOOL v24 = v25;
      }
      else {
        BOOL v24 = 0;
      }
      if ((v21 - 3) < 0xFFFFFFFE)
      {
        if (v21 == 3) {
          *((void *)v25 + 1) = 0;
        }
        return;
      }
      unint64_t v23 = (unint64_t)(v24 + 8);
    }
    else
    {
      if ((v25[1] & 0x7F) != 2 && !*((_DWORD *)v25 + 3)) {
        return;
      }
      uint64_t v22 = *((void *)v25 + 2);
      if ((v22 & 4) == 0) {
        return;
      }
      unint64_t v23 = v22 & 0xFFFFFFFFFFFFFFF8;
      if (!v23) {
        return;
      }
    }
    uint64_t v26 = (unsigned __int8 *)&v25;
    sub_1CC5FA668(v23 + 16, &v26);
  }
}

void sub_1CB947E28(uint64_t a1, llvm::MachineBasicBlock *a2, int a3, int a4, int a5, int a6, int a7, unsigned int a8, unsigned __int8 a9, unsigned __int8 a10, char a11, uint64_t *a12)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  char v94 = 0;
  uint64_t v17 = *(unsigned char **)(*((void *)a2 + 4) + 16);
  int v85 = v17[318];
  unint64_t v18 = sub_1CB94A1DC((uint64_t)a2, (llvm::TargetInstrInfo *)a12, &v94);
  unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(a2);
  uint64_t v20 = (unint64_t *)FirstTerminator;
  if ((llvm::MachineBasicBlock *)((char *)a2 + 48) == (llvm::MachineBasicBlock *)FirstTerminator)
  {
LABEL_94:
    uint64_t v93 = 0;
  }
  else
  {
    unint64_t v21 = FirstTerminator;
    while (1)
    {
      unsigned int v22 = **(unsigned __int16 **)(v21 + 16);
      BOOL v23 = v22 > 0x17;
      int v24 = (1 << v22) & 0x83E000;
      if (v23 || v24 == 0) {
        break;
      }
      unint64_t v21 = *(void *)(v21 + 8);
      if ((llvm::MachineBasicBlock *)v21 == (llvm::MachineBasicBlock *)((char *)a2 + 48)) {
        goto LABEL_94;
      }
    }
    uint64_t v26 = *(unsigned __int8 **)(v21 + 56);
    uint64_t v93 = v26;
    if (v26) {
      llvm::MetadataTracking::track((uint64_t)&v93, v26, 2);
    }
  }
  if ((a7 & 1) != 0 || (a11 & 1) != 0 || a9)
  {
    if (!a7 || (a5 & 1) != 0 || (a9 & 1) != 0)
    {
      BOOL v43 = v93;
      if (a9 & ~(_BYTE)a5 & 1) != 0 || (a7)
      {
        LODWORD(v95) = 1;
        uint64_t v96 = 0;
        uint64_t v97 = a8;
        LODWORD(v90) = 1;
        uint64_t v91 = 0;
        uint64_t v92 = a10;
        uint64_t v89 = v93;
        if (v93) {
          llvm::MetadataTracking::track((uint64_t)&v89, v93, 2);
        }
        BOOL v55 = sub_1CB94A738((uint64_t)a2, v20, &v89, v18, v17, (uint64_t)a12, a4, a5, 0, (const llvm::MachineOperand *)&v95, (const llvm::MachineOperand *)&v90);
        *((void *)&v99 + 1) = 0;
        long long v100 = 0uLL;
        LODWORD(v99) = 0x2000000;
        DWORD1(v99) = a3;
        llvm::MachineInstr::addOperand(v56, v55, (const llvm::MachineOperand *)&v99);
        if (v89) {
          llvm::MetadataTracking::untrack((uint64_t)&v89, v89);
        }
        goto LABEL_13;
      }
      unsigned int v83 = a10;
    }
    else
    {
      unsigned int v83 = a10;
      BOOL v43 = v93;
    }
    uint64_t v44 = 195504;
    if (v85) {
      uint64_t v44 = 195456;
    }
    uint64_t v45 = a12[1] + v44;
    uint64_t v46 = (llvm::MachineFunction *)*((void *)a2 + 4);
    uint64_t v95 = v43;
    if (v43) {
      llvm::MetadataTracking::track((uint64_t)&v95, v43, 2);
    }
    unint64_t v47 = llvm::MachineFunction::CreateMachineInstr(v46, v45, &v95, 0);
    if (v95) {
      llvm::MetadataTracking::untrack((uint64_t)&v95, v95);
    }
    uint64_t v48 = *((void *)a2 + 5);
    *((void *)v47 + 3) = v48;
    uint64_t v49 = *(void *)(v48 + 32);
    uint64_t v50 = *((unsigned int *)v47 + 10);
    if (v50)
    {
      uint64_t v66 = *((void *)v47 + 4);
      uint64_t v67 = *(void *)(v49 + 40);
      uint64_t v68 = 32 * v50;
      do
      {
        if (!*(unsigned char *)v66)
        {
          uint64_t v69 = *(unsigned int *)(v66 + 4);
          if ((int)v69 >= 0) {
            int v70 = (uint64_t *)(*(void *)(v67 + 272) + 8 * v69);
          }
          else {
            int v70 = (uint64_t *)(*(void *)(v67 + 24) + 16 * (v69 & 0x7FFFFFFF) + 8);
          }
          uint64_t v71 = *v70;
          if (*v70)
          {
            uint64_t v72 = *(void *)(v71 + 16);
            *(void *)(v71 + 16) = v66;
            *(void *)(v66 + 16) = v72;
            if (*(unsigned char *)(v66 + 3))
            {
              *(void *)(v66 + 24) = v71;
            }
            else
            {
              *(void *)(v66 + 24) = 0;
              int v70 = (uint64_t *)(v72 + 24);
            }
          }
          else
          {
            *(void *)(v66 + 16) = v66;
            *(void *)(v66 + 24) = 0;
          }
          uint64_t *v70 = v66;
        }
        v66 += 32;
        v68 -= 32;
      }
      while (v68);
    }
    uint64_t v51 = *(void *)(v49 + 728);
    if (v51) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v51 + 24))(v51, v47);
    }
    unint64_t v52 = *v20 & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v47 = v52 | *(void *)v47 & 7;
    *((void *)v47 + 1) = v20;
    *(void *)(v52 + 8) = v47;
    unint64_t *v20 = *v20 & 7 | (unint64_t)v47;
    *((void *)&v99 + 1) = 0;
    long long v100 = 0uLL;
    LODWORD(v99) = 0x1000000;
    DWORD1(v99) = a4;
    llvm::MachineInstr::addOperand(v47, v46, (const llvm::MachineOperand *)&v99);
    LODWORD(v99) = 1;
    *((void *)&v99 + 1) = 0;
    *(void *)&long long v100 = 0;
    llvm::MachineInstr::addOperand(v47, v46, (const llvm::MachineOperand *)&v99);
    LODWORD(v99) = 1;
    if (a5) {
      uint64_t v53 = v83;
    }
    else {
      uint64_t v53 = a8;
    }
    *((void *)&v99 + 1) = 0;
    *(void *)&long long v100 = v53;
    llvm::MachineInstr::addOperand(v47, v46, (const llvm::MachineOperand *)&v99);
  }
LABEL_13:
  if (!a6)
  {
    int v27 = **(unsigned __int16 **)(v18 + 16);
    int v28 = sub_1CB955608(v27);
    int v29 = sub_1CB955634(v27);
    sub_1CB9571C8(v28, (uint64_t)&v99);
    if (v29 == 48)
    {
      BOOL v64 = v17[318] == 0;
      int v65 = 18;
    }
    else
    {
      if (v29 != 47)
      {
        int v30 = 38;
LABEL_17:
        uint64_t v31 = (int *)v99;
        unsigned int v32 = sub_1CB951118(v30, (_DWORD *)v99, DWORD2(v99), v17);
        int v33 = *v31;
        int v34 = v31[1];
        if (v31 != (int *)&v100) {
          free(v31);
        }
        uint64_t v101 = 0;
        long long v99 = 0u;
        long long v100 = 0u;
        sub_1CB94A464((uint64_t)&v99, v18, v33, v34, a5);
        uint64_t v35 = a12[1] + 48 * v32;
        uint64_t v36 = (llvm::MachineFunction *)*((void *)a2 + 4);
        uint64_t v90 = v93;
        if (v93) {
          llvm::MetadataTracking::track((uint64_t)&v90, v93, 2);
        }
        uint64_t v37 = llvm::MachineFunction::CreateMachineInstr(v36, v35, &v90, 0);
        if (v90) {
          llvm::MetadataTracking::untrack((uint64_t)&v90, v90);
        }
        uint64_t v38 = *((void *)a2 + 5);
        *((void *)v37 + 3) = v38;
        uint64_t v39 = *(void *)(v38 + 32);
        uint64_t v40 = *((unsigned int *)v37 + 10);
        if (v40)
        {
          uint64_t v57 = *((void *)v37 + 4);
          uint64_t v58 = *(void *)(v39 + 40);
          uint64_t v59 = 32 * v40;
          do
          {
            if (!*(unsigned char *)v57)
            {
              uint64_t v60 = *(unsigned int *)(v57 + 4);
              if ((int)v60 >= 0) {
                uint64_t v61 = (uint64_t *)(*(void *)(v58 + 272) + 8 * v60);
              }
              else {
                uint64_t v61 = (uint64_t *)(*(void *)(v58 + 24) + 16 * (v60 & 0x7FFFFFFF) + 8);
              }
              uint64_t v62 = *v61;
              if (*v61)
              {
                uint64_t v63 = *(void *)(v62 + 16);
                *(void *)(v62 + 16) = v57;
                *(void *)(v57 + 16) = v63;
                if (*(unsigned char *)(v57 + 3))
                {
                  *(void *)(v57 + 24) = v62;
                }
                else
                {
                  *(void *)(v57 + 24) = 0;
                  uint64_t v61 = (uint64_t *)(v63 + 24);
                }
              }
              else
              {
                *(void *)(v57 + 16) = v57;
                *(void *)(v57 + 24) = 0;
              }
              *uint64_t v61 = v57;
            }
            v57 += 32;
            v59 -= 32;
          }
          while (v59);
        }
        uint64_t v41 = *(void *)(v39 + 728);
        if (v41) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v41 + 24))(v41, v37);
        }
        unint64_t v42 = *v20 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v37 = v42 | *(void *)v37 & 7;
        *((void *)v37 + 1) = v20;
        *(void *)(v42 + 8) = v37;
        unint64_t *v20 = *v20 & 7 | (unint64_t)v37;
        uint64_t v96 = 0;
        uint64_t v97 = 0;
        uint64_t v98 = 0;
        LODWORD(v95) = 0x1000000;
        HIDWORD(v95) = a3;
        llvm::MachineInstr::addOperand(v37, v36, (const llvm::MachineOperand *)&v95);
        LODWORD(v95) = 1;
        uint64_t v96 = 0;
        uint64_t v97 = 0;
        llvm::MachineInstr::addOperand(v37, v36, (const llvm::MachineOperand *)&v95);
        uint64_t v90 = (unsigned __int8 *)v36;
        uint64_t v91 = v37;
        sub_1CB94A5BC((uint64_t)&v99, (llvm::MachineFunction **)&v90);
        LODWORD(v95) = 1;
        uint64_t v96 = 0;
        uint64_t v97 = 2;
        llvm::MachineInstr::addOperand(v37, v36, (const llvm::MachineOperand *)&v95);
        uint64_t v96 = 0;
        uint64_t v97 = 0;
        uint64_t v98 = 0;
        LODWORD(v95) = 0x2000000;
        HIDWORD(v95) = a3;
        llvm::MachineInstr::addOperand(v37, v36, (const llvm::MachineOperand *)&v95);
        goto LABEL_27;
      }
      BOOL v64 = v17[318] == 0;
      int v65 = 4;
    }
    if (v64) {
      int v30 = 32;
    }
    else {
      int v30 = v65;
    }
    goto LABEL_17;
  }
  if ((a6 + 2) > 0xFF)
  {
    unint64_t v73 = sub_1CB94A340(**(unsigned __int16 **)(v18 + 16), v17);
    unsigned int v74 = v73;
    uint64_t v101 = 0;
    long long v99 = 0u;
    long long v100 = 0u;
    sub_1CB94A464((uint64_t)&v99, v18, SHIDWORD(v73), v75, a5 ^ 1);
    uint64_t v76 = sub_1CB85AA4C((uint64_t)a2, v20, &v93, a12[1] + 48 * v74, a3);
    int v78 = v77;
    LODWORD(v95) = 1;
    uint64_t v96 = 0;
    uint64_t v97 = 0;
    llvm::MachineInstr::addOperand(v77, v76, (const llvm::MachineOperand *)&v95);
    uint64_t v90 = (unsigned __int8 *)v76;
    uint64_t v91 = v78;
    sub_1CB94A5BC((uint64_t)&v99, (llvm::MachineFunction **)&v90);
    LODWORD(v95) = 1;
    uint64_t v96 = 0;
    uint64_t v97 = 1;
    llvm::MachineInstr::addOperand(v78, v76, (const llvm::MachineOperand *)&v95);
    uint64_t v96 = 0;
    uint64_t v97 = 0;
    uint64_t v98 = 0;
    LODWORD(v95) = 0x2000000;
    HIDWORD(v95) = a3;
    llvm::MachineInstr::addOperand(v78, v76, (const llvm::MachineOperand *)&v95);
    uint64_t v79 = 195504;
    if (v85) {
      uint64_t v79 = 195600;
    }
    uint64_t v80 = sub_1CB85AA4C((uint64_t)a2, v20, &v93, a12[1] + v79, a3);
    BOOL v82 = v81;
    LODWORD(v95) = 1;
    uint64_t v96 = 0;
    uint64_t v97 = 0;
    llvm::MachineInstr::addOperand(v81, v80, (const llvm::MachineOperand *)&v95);
    LODWORD(v95) = 1;
    uint64_t v96 = 0;
    uint64_t v97 = (a6 + 3);
    llvm::MachineInstr::addOperand(v82, v80, (const llvm::MachineOperand *)&v95);
    if (!v85) {
      sub_1CB94AD0C((uint64_t)a2, v20, (uint64_t)a12, a3, v17);
    }
    sub_1CB94B0C8(a2, 1, &v93, a3, (uint64_t)a12, 0, 1u);
  }
  else
  {
    *((void *)&v99 + 1) = 0;
    long long v100 = 0uLL;
    LODWORD(v99) = 0;
    DWORD1(v99) = a3;
    LODWORD(v95) = 1;
    uint64_t v96 = 0;
    uint64_t v97 = (a6 + 2);
    uint64_t v88 = v93;
    if (v93) {
      llvm::MetadataTracking::track((uint64_t)&v88, v93, 2);
    }
    sub_1CB94A738((uint64_t)a2, v20, &v88, v18, v17, (uint64_t)a12, a3, a5, v85 != 0, (const llvm::MachineOperand *)&v99, (const llvm::MachineOperand *)&v95);
    if (v88) {
      llvm::MetadataTracking::untrack((uint64_t)&v88, v88);
    }
    unsigned int v87 = v93;
    if (v93)
    {
      llvm::MetadataTracking::track((uint64_t)&v87, v93, 2);
      char v54 = v87;
    }
    else
    {
      char v54 = 0;
    }
    sub_1CB94AA24((uint64_t)a2, v20, a3, v17, a12[1], v54, 0);
    if (v87) {
      llvm::MetadataTracking::untrack((uint64_t)&v87, v87);
    }
  }
LABEL_27:
  if (v93) {
    llvm::MetadataTracking::untrack((uint64_t)&v93, v93);
  }
}

void sub_1CB94872C(uint64_t a1, llvm::MachineBasicBlock *a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, unsigned __int8 a9, unsigned __int8 a10, unsigned __int8 a11, char a12, char a13, uint64_t *a14)
{
  uint64_t v147 = *MEMORY[0x1E4F143B8];
  char v139 = 0;
  unsigned int v19 = *(unsigned char **)(*((void *)a2 + 4) + 16);
  int v20 = v19[318];
  if (v19[318]) {
    int v21 = 4072;
  }
  else {
    int v21 = 4073;
  }
  unsigned int v128 = v21;
  unint64_t v22 = sub_1CB94A1DC((uint64_t)a2, (llvm::TargetInstrInfo *)a14, &v139);
  unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(a2);
  int v24 = (unint64_t *)FirstTerminator;
  if ((llvm::MachineBasicBlock *)((char *)a2 + 48) == (llvm::MachineBasicBlock *)FirstTerminator)
  {
LABEL_155:
    uint64_t v138 = 0;
  }
  else
  {
    unint64_t v25 = FirstTerminator;
    while (1)
    {
      unsigned int v26 = **(unsigned __int16 **)(v25 + 16);
      BOOL v27 = v26 > 0x17;
      int v28 = (1 << v26) & 0x83E000;
      if (v27 || v28 == 0) {
        break;
      }
      unint64_t v25 = *(void *)(v25 + 8);
      if ((llvm::MachineBasicBlock *)v25 == (llvm::MachineBasicBlock *)((char *)a2 + 48)) {
        goto LABEL_155;
      }
    }
    int v30 = *(unsigned __int8 **)(v25 + 56);
    uint64_t v138 = v30;
    if (v30) {
      llvm::MetadataTracking::track((uint64_t)&v138, v30, 2);
    }
  }
  if (!v22) {
    goto LABEL_31;
  }
  int v129 = a4;
  if ((a8 & 1) != 0 || (a12 & 1) != 0 || a10)
  {
    if (!a8 || (a6 & 1) != 0 || (a10 & 1) != 0)
    {
      int v81 = v138;
      if (a10 & ~(_BYTE)a6 & 1) != 0 || (a8)
      {
        LODWORD(v140) = 1;
        uint64_t v141 = 0;
        uint64_t v142 = a9;
        LODWORD(v135) = 1;
        uint64_t v136 = 0;
        uint64_t v137 = a11;
        uint64_t v134 = v138;
        if (v138) {
          llvm::MetadataTracking::track((uint64_t)&v134, v138, 2);
        }
        BOOL v82 = sub_1CB94A738((uint64_t)a2, v24, &v134, v22, v19, (uint64_t)a14, a5, a6, 0, (const llvm::MachineOperand *)&v140, (const llvm::MachineOperand *)&v135);
        *((void *)&v144 + 1) = 0;
        long long v145 = 0uLL;
        LODWORD(v144) = 0x2000000;
        DWORD1(v144) = a4;
        llvm::MachineInstr::addOperand(v83, v82, (const llvm::MachineOperand *)&v144);
        if (v134) {
          llvm::MetadataTracking::untrack((uint64_t)&v134, v134);
        }
        goto LABEL_17;
      }
      unsigned int v125 = a9;
      unsigned int v126 = a11;
    }
    else
    {
      unsigned int v125 = a9;
      unsigned int v126 = a11;
      int v81 = v138;
    }
    uint64_t v87 = a14[1] + 48 * v128;
    uint64_t v88 = (llvm::MachineFunction *)*((void *)a2 + 4);
    int v140 = v81;
    unint64_t v127 = v88;
    if (v81)
    {
      llvm::MetadataTracking::track((uint64_t)&v140, v81, 2);
      uint64_t v88 = v127;
    }
    uint64_t v89 = llvm::MachineFunction::CreateMachineInstr(v88, v87, &v140, 0);
    if (v140) {
      llvm::MetadataTracking::untrack((uint64_t)&v140, v140);
    }
    uint64_t v90 = *((void *)a2 + 5);
    *((void *)v89 + 3) = v90;
    uint64_t v91 = *(void *)(v90 + 32);
    uint64_t v92 = *((unsigned int *)v89 + 10);
    if (v92)
    {
      uint64_t v105 = *((void *)v89 + 4);
      uint64_t v106 = *(void *)(v91 + 40);
      uint64_t v107 = 32 * v92;
      do
      {
        if (!*(unsigned char *)v105)
        {
          uint64_t v108 = *(unsigned int *)(v105 + 4);
          if ((int)v108 >= 0) {
            unint64_t v109 = (uint64_t *)(*(void *)(v106 + 272) + 8 * v108);
          }
          else {
            unint64_t v109 = (uint64_t *)(*(void *)(v106 + 24) + 16 * (v108 & 0x7FFFFFFF) + 8);
          }
          uint64_t v110 = *v109;
          if (*v109)
          {
            uint64_t v111 = *(void *)(v110 + 16);
            *(void *)(v110 + 16) = v105;
            *(void *)(v105 + 16) = v111;
            if (*(unsigned char *)(v105 + 3))
            {
              *(void *)(v105 + 24) = v110;
            }
            else
            {
              *(void *)(v105 + 24) = 0;
              unint64_t v109 = (uint64_t *)(v111 + 24);
            }
          }
          else
          {
            *(void *)(v105 + 16) = v105;
            *(void *)(v105 + 24) = 0;
          }
          uint64_t *v109 = v105;
        }
        v105 += 32;
        v107 -= 32;
      }
      while (v107);
    }
    uint64_t v93 = *(void *)(v91 + 728);
    if (v93) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v93 + 24))(v93, v89);
    }
    unint64_t v94 = *v24 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v89 = v94 | *(void *)v89 & 7;
    *((void *)v89 + 1) = v24;
    *(void *)(v94 + 8) = v89;
    unint64_t *v24 = *v24 & 7 | (unint64_t)v89;
    *((void *)&v144 + 1) = 0;
    long long v145 = 0uLL;
    LODWORD(v144) = 0x1000000;
    DWORD1(v144) = a5;
    llvm::MachineInstr::addOperand(v89, v127, (const llvm::MachineOperand *)&v144);
    LODWORD(v144) = 1;
    *((void *)&v144 + 1) = 0;
    *(void *)&long long v145 = 0;
    llvm::MachineInstr::addOperand(v89, v127, (const llvm::MachineOperand *)&v144);
    LODWORD(v144) = 1;
    if (a6) {
      uint64_t v95 = v126;
    }
    else {
      uint64_t v95 = v125;
    }
    *((void *)&v144 + 1) = 0;
    *(void *)&long long v145 = v95;
    llvm::MachineInstr::addOperand(v89, v127, (const llvm::MachineOperand *)&v144);
    a4 = v129;
  }
LABEL_17:
  if (!a7)
  {
    int v31 = **(unsigned __int16 **)(v22 + 16);
    int v32 = sub_1CB955608(v31);
    int v33 = sub_1CB955634(v31);
    sub_1CB9571C8(v32, (uint64_t)&v144);
    if (v33 == 48)
    {
      BOOL v71 = v19[318] == 0;
      int v72 = 18;
    }
    else
    {
      if (v33 != 47)
      {
        int v34 = 38;
LABEL_21:
        uint64_t v35 = (int *)v144;
        unsigned int v36 = sub_1CB951118(v34, (_DWORD *)v144, DWORD2(v144), v19);
        int v38 = *v35;
        int v37 = v35[1];
        if (v35 != (int *)&v145) {
          free(v35);
        }
        uint64_t v146 = 0;
        long long v144 = 0u;
        long long v145 = 0u;
        sub_1CB94A464((uint64_t)&v144, v22, v38, v37, a6);
        uint64_t v39 = a14[1] + 48 * v36;
        uint64_t v40 = (llvm::MachineFunction *)*((void *)a2 + 4);
        uint64_t v135 = v138;
        if (v138) {
          llvm::MetadataTracking::track((uint64_t)&v135, v138, 2);
        }
        uint64_t v41 = llvm::MachineFunction::CreateMachineInstr(v40, v39, &v135, 0);
        if (v135) {
          llvm::MetadataTracking::untrack((uint64_t)&v135, v135);
        }
        uint64_t v42 = *((void *)a2 + 5);
        *((void *)v41 + 3) = v42;
        uint64_t v43 = *(void *)(v42 + 32);
        uint64_t v44 = *((unsigned int *)v41 + 10);
        if (v44)
        {
          uint64_t v64 = *((void *)v41 + 4);
          uint64_t v65 = *(void *)(v43 + 40);
          uint64_t v66 = 32 * v44;
          do
          {
            if (!*(unsigned char *)v64)
            {
              uint64_t v67 = *(unsigned int *)(v64 + 4);
              if ((int)v67 >= 0) {
                uint64_t v68 = (uint64_t *)(*(void *)(v65 + 272) + 8 * v67);
              }
              else {
                uint64_t v68 = (uint64_t *)(*(void *)(v65 + 24) + 16 * (v67 & 0x7FFFFFFF) + 8);
              }
              uint64_t v69 = *v68;
              if (*v68)
              {
                uint64_t v70 = *(void *)(v69 + 16);
                *(void *)(v69 + 16) = v64;
                *(void *)(v64 + 16) = v70;
                if (*(unsigned char *)(v64 + 3))
                {
                  *(void *)(v64 + 24) = v69;
                }
                else
                {
                  *(void *)(v64 + 24) = 0;
                  uint64_t v68 = (uint64_t *)(v70 + 24);
                }
              }
              else
              {
                *(void *)(v64 + 16) = v64;
                *(void *)(v64 + 24) = 0;
              }
              uint64_t *v68 = v64;
            }
            v64 += 32;
            v66 -= 32;
          }
          while (v66);
        }
        uint64_t v45 = *(void *)(v43 + 728);
        if (v45) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v45 + 24))(v45, v41);
        }
        unint64_t v46 = *v24 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v41 = v46 | *(void *)v41 & 7;
        *((void *)v41 + 1) = v24;
        *(void *)(v46 + 8) = v41;
        unint64_t *v24 = *v24 & 7 | (unint64_t)v41;
        uint64_t v141 = 0;
        uint64_t v142 = 0;
        uint64_t v143 = 0;
        LODWORD(v140) = 0x1000000;
        HIDWORD(v140) = v129;
        llvm::MachineInstr::addOperand(v41, v40, (const llvm::MachineOperand *)&v140);
        LODWORD(v140) = 1;
        uint64_t v141 = 0;
        uint64_t v142 = 0;
        llvm::MachineInstr::addOperand(v41, v40, (const llvm::MachineOperand *)&v140);
        uint64_t v135 = (unsigned __int8 *)v40;
        uint64_t v136 = v41;
        sub_1CB94A5BC((uint64_t)&v144, (llvm::MachineFunction **)&v135);
        LODWORD(v140) = 1;
        uint64_t v141 = 0;
        uint64_t v142 = 2;
        llvm::MachineInstr::addOperand(v41, v40, (const llvm::MachineOperand *)&v140);
        uint64_t v141 = 0;
        uint64_t v142 = 0;
        uint64_t v143 = 0;
        LODWORD(v140) = 0x2000000;
        HIDWORD(v140) = v129;
        llvm::MachineInstr::addOperand(v41, v40, (const llvm::MachineOperand *)&v140);
        goto LABEL_31;
      }
      BOOL v71 = v19[318] == 0;
      int v72 = 4;
    }
    if (v71) {
      int v34 = 32;
    }
    else {
      int v34 = v72;
    }
    goto LABEL_21;
  }
  if ((a7 + 2) > 0xFF)
  {
    unint64_t v112 = sub_1CB94A340(**(unsigned __int16 **)(v22 + 16), v19);
    unsigned int v113 = v112;
    uint64_t v146 = 0;
    long long v144 = 0u;
    long long v145 = 0u;
    sub_1CB94A464((uint64_t)&v144, v22, SHIDWORD(v112), v114, a6 ^ 1);
    uint64_t v115 = a14[1] + 48 * v113;
    int v116 = a4;
    unint64_t v117 = sub_1CB85AA4C((uint64_t)a2, v24, &v138, v115, a4);
    int v118 = a4;
    uint64_t v120 = v119;
    LODWORD(v140) = 1;
    uint64_t v141 = 0;
    uint64_t v142 = 0;
    llvm::MachineInstr::addOperand(v119, v117, (const llvm::MachineOperand *)&v140);
    uint64_t v135 = (unsigned __int8 *)v117;
    uint64_t v136 = v120;
    sub_1CB94A5BC((uint64_t)&v144, (llvm::MachineFunction **)&v135);
    LODWORD(v140) = 1;
    uint64_t v141 = 0;
    uint64_t v142 = 1;
    llvm::MachineInstr::addOperand(v120, v117, (const llvm::MachineOperand *)&v140);
    uint64_t v141 = 0;
    uint64_t v142 = 0;
    uint64_t v143 = 0;
    LODWORD(v140) = 0x2000000;
    HIDWORD(v140) = v118;
    llvm::MachineInstr::addOperand(v120, v117, (const llvm::MachineOperand *)&v140);
    uint64_t v121 = 195504;
    if (v20) {
      uint64_t v121 = 195600;
    }
    uint64_t v122 = sub_1CB85AA4C((uint64_t)a2, v24, &v138, a14[1] + v121, v116);
    uint64_t v124 = v123;
    LODWORD(v140) = 1;
    uint64_t v141 = 0;
    uint64_t v142 = 0;
    llvm::MachineInstr::addOperand(v123, v122, (const llvm::MachineOperand *)&v140);
    LODWORD(v140) = 1;
    uint64_t v141 = 0;
    uint64_t v142 = (a7 + 3);
    llvm::MachineInstr::addOperand(v124, v122, (const llvm::MachineOperand *)&v140);
    if (!v20) {
      sub_1CB94AD0C((uint64_t)a2, v24, (uint64_t)a14, v129, v19);
    }
    sub_1CB94B0C8(a2, 1, &v138, v129, (uint64_t)a14, 0, 1u);
  }
  else
  {
    *((void *)&v144 + 1) = 0;
    long long v145 = 0uLL;
    LODWORD(v144) = 0;
    DWORD1(v144) = a4;
    LODWORD(v140) = 1;
    uint64_t v141 = 0;
    uint64_t v142 = (a7 + 2);
    uint64_t v133 = v138;
    if (v138) {
      llvm::MetadataTracking::track((uint64_t)&v133, v138, 2);
    }
    sub_1CB94A738((uint64_t)a2, v24, &v133, v22, v19, (uint64_t)a14, a4, a6, v20 != 0, (const llvm::MachineOperand *)&v144, (const llvm::MachineOperand *)&v140);
    if (v133) {
      llvm::MetadataTracking::untrack((uint64_t)&v133, v133);
    }
    uint64_t v132 = v138;
    if (v138)
    {
      llvm::MetadataTracking::track((uint64_t)&v132, v138, 2);
      uint64_t v96 = v132;
    }
    else
    {
      uint64_t v96 = 0;
    }
    sub_1CB94AA24((uint64_t)a2, v24, a4, v19, a14[1], v96, 0);
    if (v132) {
      llvm::MetadataTracking::untrack((uint64_t)&v132, v132);
    }
  }
LABEL_31:
  unint64_t v47 = v138;
  if (a5 && (a13 & 1) == 0)
  {
    uint64_t v73 = a14[1] + 48 * v128;
    unsigned int v74 = (llvm::MachineFunction *)*((void *)a2 + 4);
    int v140 = v138;
    if (v138) {
      llvm::MetadataTracking::track((uint64_t)&v140, v138, 2);
    }
    int v75 = llvm::MachineFunction::CreateMachineInstr(v74, v73, &v140, 0);
    if (v140) {
      llvm::MetadataTracking::untrack((uint64_t)&v140, v140);
    }
    uint64_t v76 = *((void *)a2 + 5);
    *((void *)v75 + 3) = v76;
    uint64_t v77 = *(void *)(v76 + 32);
    uint64_t v78 = *((unsigned int *)v75 + 10);
    if (v78)
    {
      uint64_t v98 = *((void *)v75 + 4);
      uint64_t v99 = *(void *)(v77 + 40);
      uint64_t v100 = 32 * v78;
      do
      {
        if (!*(unsigned char *)v98)
        {
          uint64_t v101 = *(unsigned int *)(v98 + 4);
          if ((int)v101 >= 0) {
            uint64_t v102 = (uint64_t *)(*(void *)(v99 + 272) + 8 * v101);
          }
          else {
            uint64_t v102 = (uint64_t *)(*(void *)(v99 + 24) + 16 * (v101 & 0x7FFFFFFF) + 8);
          }
          uint64_t v103 = *v102;
          if (*v102)
          {
            uint64_t v104 = *(void *)(v103 + 16);
            *(void *)(v103 + 16) = v98;
            *(void *)(v98 + 16) = v104;
            if (*(unsigned char *)(v98 + 3))
            {
              *(void *)(v98 + 24) = v103;
            }
            else
            {
              *(void *)(v98 + 24) = 0;
              uint64_t v102 = (uint64_t *)(v104 + 24);
            }
          }
          else
          {
            *(void *)(v98 + 16) = v98;
            *(void *)(v98 + 24) = 0;
          }
          *uint64_t v102 = v98;
        }
        v98 += 32;
        v100 -= 32;
      }
      while (v100);
    }
    uint64_t v79 = *(void *)(v77 + 728);
    if (v79) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v79 + 24))(v79, v75);
    }
    unint64_t v80 = *v24 & 0xFFFFFFFFFFFFFFF8;
    *(void *)int v75 = v80 | *(void *)v75 & 7;
    *((void *)v75 + 1) = v24;
    *(void *)(v80 + 8) = v75;
    unint64_t *v24 = *v24 & 7 | (unint64_t)v75;
    *((void *)&v144 + 1) = 0;
    long long v145 = 0uLL;
    LODWORD(v144) = 0x1000000;
    DWORD1(v144) = a5;
    llvm::MachineInstr::addOperand(v75, v74, (const llvm::MachineOperand *)&v144);
    LODWORD(v144) = 1;
    *((void *)&v144 + 1) = 0;
    *(void *)&long long v145 = 0;
    llvm::MachineInstr::addOperand(v75, v74, (const llvm::MachineOperand *)&v144);
    LODWORD(v144) = 1;
    *((void *)&v144 + 1) = 0;
    *(void *)&long long v145 = 0;
    llvm::MachineInstr::addOperand(v75, v74, (const llvm::MachineOperand *)&v144);
    unint64_t v47 = v138;
  }
  uint64_t v48 = 29856;
  if (!v19[327]) {
    uint64_t v48 = 30624;
  }
  uint64_t v49 = a14[1] + v48;
  uint64_t v50 = (llvm::MachineFunction *)*((void *)a2 + 4);
  *(void *)&long long v144 = v47;
  if (v47) {
    llvm::MetadataTracking::track((uint64_t)&v144, v47, 2);
  }
  MachineInstr = llvm::MachineFunction::CreateMachineInstr(v50, v49, (unsigned __int8 **)&v144, 0);
  if ((void)v144) {
    llvm::MetadataTracking::untrack((uint64_t)&v144, (unsigned __int8 *)v144);
  }
  uint64_t v52 = *((void *)a2 + 5);
  *((void *)MachineInstr + 3) = v52;
  uint64_t v53 = *(void *)(v52 + 32);
  uint64_t v54 = *((unsigned int *)MachineInstr + 10);
  if (v54)
  {
    uint64_t v57 = *((void *)MachineInstr + 4);
    uint64_t v58 = *(void *)(v53 + 40);
    uint64_t v59 = 32 * v54;
    do
    {
      if (!*(unsigned char *)v57)
      {
        uint64_t v60 = *(unsigned int *)(v57 + 4);
        if ((int)v60 >= 0) {
          uint64_t v61 = (uint64_t *)(*(void *)(v58 + 272) + 8 * v60);
        }
        else {
          uint64_t v61 = (uint64_t *)(*(void *)(v58 + 24) + 16 * (v60 & 0x7FFFFFFF) + 8);
        }
        uint64_t v62 = *v61;
        if (*v61)
        {
          uint64_t v63 = *(void *)(v62 + 16);
          *(void *)(v62 + 16) = v57;
          *(void *)(v57 + 16) = v63;
          if (*(unsigned char *)(v57 + 3))
          {
            *(void *)(v57 + 24) = v62;
          }
          else
          {
            *(void *)(v57 + 24) = 0;
            uint64_t v61 = (uint64_t *)(v63 + 24);
          }
        }
        else
        {
          *(void *)(v57 + 16) = v57;
          *(void *)(v57 + 24) = 0;
        }
        *uint64_t v61 = v57;
      }
      v57 += 32;
      v59 -= 32;
    }
    while (v59);
  }
  uint64_t v55 = *(void *)(v53 + 728);
  if (v55) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v55 + 24))(v55, MachineInstr);
  }
  unint64_t v56 = *v24 & 0xFFFFFFFFFFFFFFF8;
  *(void *)MachineInstr = v56 | *(void *)MachineInstr & 7;
  *((void *)MachineInstr + 1) = v24;
  *(void *)(v56 + 8) = MachineInstr;
  unint64_t *v24 = *v24 & 7 | (unint64_t)MachineInstr;
  *((void *)&v144 + 1) = 0;
  *(void *)&long long v145 = a3;
  LODWORD(v144) = 4;
  llvm::MachineInstr::addOperand(MachineInstr, v50, (const llvm::MachineOperand *)&v144);
  if (v138)
  {
    int v84 = *v138;
    if ((v84 - 4) > 0x1E)
    {
      if ((v84 - 3) >= 0xFFFFFFFE) {
        uint64_t v97 = v138;
      }
      else {
        uint64_t v97 = 0;
      }
      if ((v84 - 3) < 0xFFFFFFFE)
      {
        if (v84 == 3) {
          *((void *)v138 + 1) = 0;
        }
        return;
      }
      unint64_t v86 = (unint64_t)(v97 + 8);
    }
    else
    {
      if ((v138[1] & 0x7F) != 2 && !*((_DWORD *)v138 + 3)) {
        return;
      }
      uint64_t v85 = *((void *)v138 + 2);
      if ((v85 & 4) == 0) {
        return;
      }
      unint64_t v86 = v85 & 0xFFFFFFFFFFFFFFF8;
      if (!v86) {
        return;
      }
    }
    *(void *)&long long v144 = &v138;
    sub_1CC5FA668(v86 + 16, &v144);
  }
}

void sub_1CB9493D4(int a1, llvm::MachineBasicBlock *this, unsigned int a3, int a4, uint64_t a5, int a6)
{
  uint64_t v11 = *((void *)this + 7);
  if ((llvm::MachineBasicBlock *)((char *)this + 48) == (llvm::MachineBasicBlock *)v11)
  {
LABEL_19:
    unint64_t v18 = 0;
  }
  else
  {
    while (1)
    {
      unsigned int v12 = **(unsigned __int16 **)(v11 + 16);
      BOOL v13 = v12 > 0x17;
      int v14 = (1 << v12) & 0x83E000;
      if (v13 || v14 == 0) {
        break;
      }
      uint64_t v11 = *(void *)(v11 + 8);
      if ((llvm::MachineBasicBlock *)v11 == (llvm::MachineBasicBlock *)((char *)this + 48)) {
        goto LABEL_19;
      }
    }
    unsigned int v16 = *(unsigned __int8 **)(v11 + 56);
    unint64_t v18 = v16;
    if (v16) {
      llvm::MetadataTracking::track((uint64_t)&v18, v16, 2);
    }
  }
  if (a3 >= 2)
  {
    unsigned int v17 = a3 >> 1;
    do
    {
      sub_1CB94B0C8(this, 0, &v18, a4, a5, a6, 2u);
      --v17;
    }
    while (v17);
  }
  if (a3) {
    sub_1CB94B0C8(this, 0, &v18, a4, a5, a6, 1u);
  }
  if (v18) {
    llvm::MetadataTracking::untrack((uint64_t)&v18, v18);
  }
}

void sub_1CB9494F4(int a1, llvm::MachineBasicBlock *this, int a3, int a4, uint64_t a5)
{
  if (!a4
    || (uint64_t v9 = *((void *)this + 7), (llvm::MachineBasicBlock *)((char *)this + 48) == (llvm::MachineBasicBlock *)v9))
  {
LABEL_14:
    uint64_t v15 = 0;
  }
  else
  {
    while (1)
    {
      unsigned int v10 = **(unsigned __int16 **)(v9 + 16);
      BOOL v11 = v10 > 0x17;
      int v12 = (1 << v10) & 0x83E000;
      if (v11 || v12 == 0) {
        break;
      }
      uint64_t v9 = *(void *)(v9 + 8);
      if ((llvm::MachineBasicBlock *)v9 == (llvm::MachineBasicBlock *)((char *)this + 48)) {
        goto LABEL_14;
      }
    }
    int v14 = *(unsigned __int8 **)(v9 + 56);
    uint64_t v15 = v14;
    if (v14) {
      llvm::MetadataTracking::track((uint64_t)&v15, v14, 2);
    }
  }
  sub_1CB94B0C8(this, 1, &v15, a3, a5, a4, 0xFFFFFFFF);
  if (v15) {
    llvm::MetadataTracking::untrack((uint64_t)&v15, v15);
  }
}

void sub_1CB9495D0(int a1, llvm::MachineBasicBlock *this, int a3, int a4, uint64_t a5)
{
  unint64_t FirstTerminator = (llvm::MachineBasicBlock *)llvm::MachineBasicBlock::getFirstTerminator(this);
  unsigned int v10 = (unint64_t *)FirstTerminator;
  if ((llvm::MachineBasicBlock *)((char *)this + 48) == FirstTerminator)
  {
LABEL_27:
    int v24 = 0;
  }
  else
  {
    BOOL v11 = FirstTerminator;
    while (1)
    {
      unsigned int v12 = **((unsigned __int16 **)v11 + 2);
      BOOL v13 = v12 > 0x17;
      int v14 = (1 << v12) & 0x83E000;
      if (v13 || v14 == 0) {
        break;
      }
      BOOL v11 = (llvm::MachineBasicBlock *)*((void *)v11 + 1);
      if (v11 == (llvm::MachineBasicBlock *)((char *)this + 48)) {
        goto LABEL_27;
      }
    }
    unsigned int v16 = (unsigned __int8 *)*((void *)v11 + 7);
    int v24 = v16;
    if (v16) {
      llvm::MetadataTracking::track((uint64_t)&v24, v16, 2);
    }
  }
  unsigned int v17 = (void *)*((void *)this + 4);
  unint64_t v18 = (unsigned char *)v17[2];
  if (a4
    || (int v20 = (*(unsigned __int16 *)(*v17 + 18) >> 4) & 0x3FF) == 0
    || (v20 != 255 ? (BOOL v21 = v20 == 8) : (BOOL v21 = 1), v21))
  {
    BOOL v23 = v24;
    if (v24)
    {
      unint64_t v22 = v18;
      llvm::MetadataTracking::track((uint64_t)&v23, v24, 2);
      unint64_t v18 = v22;
      unsigned int v19 = v23;
    }
    else
    {
      unsigned int v19 = 0;
    }
    sub_1CB94AA24((uint64_t)this, v10, a3, v18, *(void *)(a5 + 8), v19, 2u);
    if (v23) {
      llvm::MetadataTracking::untrack((uint64_t)&v23, v23);
    }
  }
  if (v24) {
    llvm::MetadataTracking::untrack((uint64_t)&v24, v24);
  }
}

llvm::MachineInstr *sub_1CB949720(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a2 == a3) {
    return 0;
  }
  unsigned int v7 = 0;
  unsigned int v8 = 0;
  char v9 = 0;
  unsigned int v10 = a2 + 6;
  BOOL v11 = (void *)a2[7];
  unsigned int v12 = (llvm::MachineFunction *)a2[4];
  uint64_t v13 = *((void *)v12 + 2);
  int v14 = a2 + 6;
  uint64_t v15 = a2;
  while (2)
  {
    for (uint64_t i = v15[7]; ; uint64_t i = *(void *)(i + 8))
    {
      if ((void *)i == v15 + 6)
      {
        int v26 = 0;
        goto LABEL_42;
      }
      unsigned int v17 = *(unsigned __int16 **)(i + 16);
      int v18 = *v17;
      unsigned int v19 = v18 - 9;
      if ((v18 - 9) <= 0x3C && ((1 << (v18 - 9)) & 0x1000000000000605) != 0
        || v18 == 0)
      {
        goto LABEL_36;
      }
      uint64_t v22 = *((void *)v17 + 1);
      if ((v22 & 0x10) != 0) {
        goto LABEL_36;
      }
      if ((*(_WORD *)(i + 44) & 0xC) != 0 && (*(_WORD *)(i + 44) & 4) == 0)
      {
        uint64_t v25 = i;
        if ((v22 & 0x400) != 0) {
          goto LABEL_36;
        }
        while ((*(_WORD *)(v25 + 44) & 8) != 0)
        {
          uint64_t v25 = *(void *)(v25 + 8);
          if ((*(unsigned char *)(*(void *)(v25 + 16) + 9) & 4) != 0) {
            goto LABEL_36;
          }
        }
      }
      else if ((v22 & 0x400) != 0)
      {
        goto LABEL_36;
      }
      if ((v19 > 0x3C || ((1 << v19) & 0x1000000000000605) == 0) && *v17 && (v17[8] & 1) == 0) {
        break;
      }
      ++v7;
      if (v8) {
        goto LABEL_48;
      }
      if (v7 > 0x10) {
        goto LABEL_50;
      }
      unsigned int v8 = 0;
LABEL_36:
      if ((*(unsigned char *)i & 4) == 0)
      {
        while ((*(_WORD *)(i + 44) & 8) != 0)
          uint64_t i = *(void *)(i + 8);
      }
    }
    ++v8;
    if (v14 == v10) {
      int v24 = (void *)i;
    }
    else {
      int v24 = v14;
    }
    if ((v9 & 1) == 0) {
      int v14 = v24;
    }
    if (v8 <= 3) {
      goto LABEL_36;
    }
LABEL_48:
    int v26 = 1;
LABEL_42:
    if ((v9 & (v8 != 0)) == 0)
    {
      uint64_t v15 = (void *)v15[1];
      ++v7;
      if (v15 == a3) {
        int v27 = 1;
      }
      else {
        int v27 = v26;
      }
      char v9 = 1;
      if (v27 == 1)
      {
        if (!v26) {
          return 0;
        }
        break;
      }
      continue;
    }
    break;
  }
LABEL_50:
  if (v14 == v10) {
    int v28 = v11;
  }
  else {
    int v28 = v14;
  }
  if (v10 == v28)
  {
LABEL_60:
    int v34 = 0;
    unint64_t v47 = 0;
  }
  else
  {
    int v29 = v28;
    while (1)
    {
      unsigned int v30 = *(unsigned __int16 *)v29[2];
      BOOL v31 = v30 > 0x17;
      int v32 = (1 << v30) & 0x83E000;
      if (v31 || v32 == 0) {
        break;
      }
      int v29 = (void *)v29[1];
      if (v29 == v10) {
        goto LABEL_60;
      }
    }
    int v34 = (unsigned __int8 *)v29[7];
    unint64_t v47 = v34;
    if (v34)
    {
      llvm::MetadataTracking::track((uint64_t)&v47, v34, 2);
      unsigned int v12 = (llvm::MachineFunction *)a2[4];
      int v34 = v47;
    }
  }
  uint64_t v36 = 31392;
  if (!*(unsigned char *)(v13 + 327)) {
    uint64_t v36 = 32160;
  }
  uint64_t v37 = *(void *)(a4 + 8) + v36;
  uint64_t v49 = v34;
  if (v34) {
    llvm::MetadataTracking::track((uint64_t)&v49, v34, 2);
  }
  uint64_t v35 = llvm::MachineFunction::CreateMachineInstr(v12, v37, &v49, 0);
  if (v49)
  {
    int v43 = *v49;
    if ((v43 - 4) > 0x1E)
    {
      if ((v43 - 3) >= 0xFFFFFFFE) {
        unint64_t v46 = v49;
      }
      else {
        unint64_t v46 = 0;
      }
      if ((v43 - 3) < 0xFFFFFFFE)
      {
        if (v43 == 3) {
          *((void *)v49 + 1) = 0;
        }
        goto LABEL_69;
      }
      unint64_t v45 = (unint64_t)(v46 + 8);
    }
    else
    {
      if ((v49[1] & 0x7F) != 2 && !*((_DWORD *)v49 + 3)) {
        goto LABEL_69;
      }
      uint64_t v44 = *((void *)v49 + 2);
      if ((v44 & 4) == 0) {
        goto LABEL_69;
      }
      unint64_t v45 = v44 & 0xFFFFFFFFFFFFFFF8;
      if (!v45) {
        goto LABEL_69;
      }
    }
    v48[0] = &v49;
    sub_1CC5FA668(v45 + 16, v48);
  }
LABEL_69:
  if (v10 != v28 && (*((_WORD *)v28 + 22) & 4) != 0) {
    *((_WORD *)v35 + 22) |= 0xCu;
  }
  sub_1CC31973C(a2 + 5, v28, (uint64_t)v35);
  v48[1] = 0;
  v48[2] = a3;
  LODWORD(v48[0]) = 4;
  llvm::MachineInstr::addOperand(v35, v12, (const llvm::MachineOperand *)v48);
  if (v47)
  {
    int v38 = *v47;
    if ((v38 - 4) > 0x1E)
    {
      if ((v38 - 3) >= 0xFFFFFFFE) {
        uint64_t v40 = v47;
      }
      else {
        uint64_t v40 = 0;
      }
      if ((v38 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v41 = (unint64_t)(v40 + 8);
        goto LABEL_82;
      }
      if (v38 == 3) {
        *((void *)v47 + 1) = 0;
      }
    }
    else if ((v47[1] & 0x7F) == 2 || *((_DWORD *)v47 + 3))
    {
      uint64_t v42 = *((void *)v47 + 2);
      if ((v42 & 4) != 0)
      {
        unint64_t v41 = v42 & 0xFFFFFFFFFFFFFFF8;
        if (v41)
        {
LABEL_82:
          v48[0] = &v47;
          sub_1CC5FA668(v41 + 16, v48);
        }
      }
    }
  }
  return v35;
}

uint64_t sub_1CB949AEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  *(void *)(result + 16) = a3;
  return result;
}

uint64_t sub_1CB949B34(uint64_t a1)
{
  return *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 16);
}

void sub_1CB949B70(uint64_t a1, llvm::MachineBasicBlock *a2, uint64_t a3, int a4, unsigned int a5, unsigned int a6, llvm::TargetInstrInfo *a7)
{
  unsigned int v12 = *(unsigned char **)(*((void *)a2 + 4) + 16);
  int v13 = v12[318];
  unint64_t v14 = sub_1CB94A1DC((uint64_t)a2, a7, &v42);
  unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(a2);
  unsigned int v16 = (unint64_t *)FirstTerminator;
  if ((llvm::MachineBasicBlock *)((char *)a2 + 48) == (llvm::MachineBasicBlock *)FirstTerminator)
  {
LABEL_42:
    unint64_t v41 = 0;
  }
  else
  {
    unint64_t v17 = FirstTerminator;
    while (1)
    {
      unsigned int v18 = **(unsigned __int16 **)(v17 + 16);
      BOOL v19 = v18 > 0x17;
      int v20 = (1 << v18) & 0x83E000;
      if (v19 || v20 == 0) {
        break;
      }
      unint64_t v17 = *(void *)(v17 + 8);
      if ((llvm::MachineBasicBlock *)v17 == (llvm::MachineBasicBlock *)((char *)a2 + 48)) {
        goto LABEL_42;
      }
    }
    uint64_t v22 = *(unsigned __int8 **)(v17 + 56);
    unint64_t v41 = v22;
    if (v22) {
      llvm::MetadataTracking::track((uint64_t)&v41, v22, 2);
    }
  }
  if (v14)
  {
    v43[0] = 1;
    uint64_t v44 = 0;
    uint64_t v45 = a5;
    LODWORD(v40[0]) = 1;
    v40[1] = 0;
    v40[2] = (unsigned __int8 *)a6;
    uint64_t v39 = v41;
    if (v41) {
      llvm::MetadataTracking::track((uint64_t)&v39, v41, 2);
    }
    sub_1CB94A738((uint64_t)a2, v16, &v39, v14, v12, (uint64_t)a7, a4, 0, 0, (const llvm::MachineOperand *)v43, (const llvm::MachineOperand *)v40);
    if (v39) {
      llvm::MetadataTracking::untrack((uint64_t)&v39, v39);
    }
  }
  else
  {
    uint64_t v23 = 195456;
    if (!v13) {
      uint64_t v23 = 195504;
    }
    uint64_t v24 = *((void *)a7 + 1) + v23;
    uint64_t v25 = (llvm::MachineFunction *)*((void *)a2 + 4);
    v40[0] = v41;
    if (v41) {
      llvm::MetadataTracking::track((uint64_t)v40, v41, 2);
    }
    MachineInstr = llvm::MachineFunction::CreateMachineInstr(v25, v24, v40, 0);
    if (v40[0]) {
      llvm::MetadataTracking::untrack((uint64_t)v40, v40[0]);
    }
    uint64_t v27 = *((void *)a2 + 5);
    *((void *)MachineInstr + 3) = v27;
    uint64_t v28 = *(void *)(v27 + 32);
    uint64_t v29 = *((unsigned int *)MachineInstr + 10);
    if (v29)
    {
      uint64_t v32 = *((void *)MachineInstr + 4);
      uint64_t v33 = *(void *)(v28 + 40);
      uint64_t v34 = 32 * v29;
      do
      {
        if (!*(unsigned char *)v32)
        {
          uint64_t v35 = *(unsigned int *)(v32 + 4);
          if ((int)v35 >= 0) {
            uint64_t v36 = (uint64_t *)(*(void *)(v33 + 272) + 8 * v35);
          }
          else {
            uint64_t v36 = (uint64_t *)(*(void *)(v33 + 24) + 16 * (v35 & 0x7FFFFFFF) + 8);
          }
          uint64_t v37 = *v36;
          if (*v36)
          {
            uint64_t v38 = *(void *)(v37 + 16);
            *(void *)(v37 + 16) = v32;
            *(void *)(v32 + 16) = v38;
            if (*(unsigned char *)(v32 + 3))
            {
              *(void *)(v32 + 24) = v37;
            }
            else
            {
              *(void *)(v32 + 24) = 0;
              uint64_t v36 = (uint64_t *)(v38 + 24);
            }
          }
          else
          {
            *(void *)(v32 + 16) = v32;
            *(void *)(v32 + 24) = 0;
          }
          *uint64_t v36 = v32;
        }
        v32 += 32;
        v34 -= 32;
      }
      while (v34);
    }
    uint64_t v30 = *(void *)(v28 + 728);
    if (v30) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v30 + 24))(v30, MachineInstr);
    }
    unint64_t v31 = *v16 & 0xFFFFFFFFFFFFFFF8;
    *(void *)MachineInstr = v31 | *(void *)MachineInstr & 7;
    *((void *)MachineInstr + 1) = v16;
    *(void *)(v31 + 8) = MachineInstr;
    unint64_t *v16 = *v16 & 7 | (unint64_t)MachineInstr;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    v43[0] = 0x1000000;
    v43[1] = a4;
    llvm::MachineInstr::addOperand(MachineInstr, v25, (const llvm::MachineOperand *)v43);
    v43[0] = 1;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    llvm::MachineInstr::addOperand(MachineInstr, v25, (const llvm::MachineOperand *)v43);
    v43[0] = 1;
    uint64_t v44 = 0;
    uint64_t v45 = a5;
    llvm::MachineInstr::addOperand(MachineInstr, v25, (const llvm::MachineOperand *)v43);
  }
  if (v41) {
    llvm::MetadataTracking::untrack((uint64_t)&v41, v41);
  }
}

void sub_1CB949EA8(uint64_t a1, void *a2, int a3, int a4, unsigned int a5, int a6, uint64_t a7)
{
  int v13 = (unint64_t *)a2[7];
  unint64_t v14 = (llvm::MachineFunction *)a2[4];
  uint64_t v15 = (unsigned char *)*((void *)v14 + 2);
  if (a2 + 6 == v13)
  {
LABEL_38:
    uint64_t v22 = 0;
    uint64_t v38 = 0;
  }
  else
  {
    uint64_t v16 = a2[7];
    while (1)
    {
      unsigned int v17 = **(unsigned __int16 **)(v16 + 16);
      BOOL v18 = v17 > 0x17;
      int v19 = (1 << v17) & 0x83E000;
      if (v18 || v19 == 0) {
        break;
      }
      uint64_t v16 = *(void *)(v16 + 8);
      if ((void *)v16 == a2 + 6) {
        goto LABEL_38;
      }
    }
    BOOL v21 = *(unsigned __int8 **)(v16 + 56);
    uint64_t v38 = v21;
    if (v21)
    {
      llvm::MetadataTracking::track((uint64_t)&v38, v21, 2);
      unint64_t v14 = (llvm::MachineFunction *)a2[4];
      uint64_t v22 = v38;
    }
    else
    {
      uint64_t v22 = 0;
    }
  }
  if (a6) {
    int v23 = 37;
  }
  else {
    int v23 = 39;
  }
  uint64_t v24 = *(void *)(a7 + 8) + 48 * sub_1CB952700(v23, 311, v15);
  uint64_t v39 = v22;
  if (v22) {
    llvm::MetadataTracking::track((uint64_t)&v39, v22, 2);
  }
  uint64_t v25 = llvm::MachineFunction::CreateMachineInstr(v14, v24, &v39, 0);
  if (v39) {
    llvm::MetadataTracking::untrack((uint64_t)&v39, v39);
  }
  uint64_t v26 = a2[5];
  *((void *)v25 + 3) = v26;
  uint64_t v27 = *(void *)(v26 + 32);
  uint64_t v28 = *((unsigned int *)v25 + 10);
  if (v28)
  {
    uint64_t v31 = *((void *)v25 + 4);
    uint64_t v32 = *(void *)(v27 + 40);
    uint64_t v33 = 32 * v28;
    do
    {
      if (!*(unsigned char *)v31)
      {
        uint64_t v34 = *(unsigned int *)(v31 + 4);
        if ((int)v34 >= 0) {
          uint64_t v35 = (uint64_t *)(*(void *)(v32 + 272) + 8 * v34);
        }
        else {
          uint64_t v35 = (uint64_t *)(*(void *)(v32 + 24) + 16 * (v34 & 0x7FFFFFFF) + 8);
        }
        uint64_t v36 = *v35;
        if (*v35)
        {
          uint64_t v37 = *(void *)(v36 + 16);
          *(void *)(v36 + 16) = v31;
          *(void *)(v31 + 16) = v37;
          if (*(unsigned char *)(v31 + 3))
          {
            *(void *)(v31 + 24) = v36;
          }
          else
          {
            *(void *)(v31 + 24) = 0;
            uint64_t v35 = (uint64_t *)(v37 + 24);
          }
        }
        else
        {
          *(void *)(v31 + 16) = v31;
          *(void *)(v31 + 24) = 0;
        }
        *uint64_t v35 = v31;
      }
      v31 += 32;
      v33 -= 32;
    }
    while (v33);
  }
  uint64_t v29 = *(void *)(v27 + 728);
  if (v29) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v29 + 24))(v29, v25);
  }
  unint64_t v30 = *v13 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v25 = v30 | *(void *)v25 & 7;
  *((void *)v25 + 1) = v13;
  *(void *)(v30 + 8) = v25;
  *int v13 = *v13 & 7 | (unint64_t)v25;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  int v40 = 0x1000000;
  int v41 = a3;
  llvm::MachineInstr::addOperand(v25, v14, (const llvm::MachineOperand *)&v40);
  int v40 = 1;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  llvm::MachineInstr::addOperand(v25, v14, (const llvm::MachineOperand *)&v40);
  int v40 = 1;
  uint64_t v42 = 0;
  uint64_t v43 = 8;
  llvm::MachineInstr::addOperand(v25, v14, (const llvm::MachineOperand *)&v40);
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  int v40 = 0;
  int v41 = a4;
  uint64_t v44 = 0;
  llvm::MachineInstr::addOperand(v25, v14, (const llvm::MachineOperand *)&v40);
  int v40 = 1;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  llvm::MachineInstr::addOperand(v25, v14, (const llvm::MachineOperand *)&v40);
  int v40 = 1;
  uint64_t v42 = 0;
  uint64_t v43 = a5;
  llvm::MachineInstr::addOperand(v25, v14, (const llvm::MachineOperand *)&v40);
  int v40 = 1;
  uint64_t v42 = 0;
  uint64_t v43 = 1;
  llvm::MachineInstr::addOperand(v25, v14, (const llvm::MachineOperand *)&v40);
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  int v40 = 0x2000000;
  int v41 = a3;
  llvm::MachineInstr::addOperand(v25, v14, (const llvm::MachineOperand *)&v40);
  if (v38) {
    llvm::MetadataTracking::untrack((uint64_t)&v38, v38);
  }
}

unint64_t sub_1CB94A1DC(uint64_t a1, llvm::TargetInstrInfo *a2, unsigned char *a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  if (a1 + 48 == v3) {
    return 0;
  }
  unint64_t v7 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFF8;
  if (!v7 || (*(unsigned char *)v7 & 4) == 0)
  {
    while ((*(_WORD *)(v7 + 44) & 4) != 0)
      unint64_t v7 = *(void *)v7 & 0xFFFFFFFFFFFFFFF8;
  }
  while (1)
  {
    unsigned int v8 = *(unsigned __int16 **)(v7 + 16);
    int v9 = *v8;
    BOOL v10 = (v9 - 9) > 0x3C || ((1 << (v9 - 9)) & 0x1000000000000605) == 0;
    BOOL v11 = !v10 || v9 == 0;
    if (!v11 && (v8[4] & 0x10) == 0) {
      break;
    }
    if (v7 == v3) {
      return 0;
    }
    unint64_t v7 = *(void *)v7 & 0xFFFFFFFFFFFFFFF8;
    if (!v7 || (*(unsigned char *)v7 & 4) == 0)
    {
      while ((*(_WORD *)(v7 + 44) & 4) != 0)
        unint64_t v7 = *(void *)v7 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  while (1)
  {
    int v12 = sub_1CB955634(**(unsigned __int16 **)(v7 + 16));
    if ((v12 - 47) <= 1) {
      break;
    }
    *a3 = 0;
    if (v12 == 49) {
      return v7;
    }
    if (v7 != *(void *)(a1 + 56))
    {
      unint64_t v7 = *(void *)v7 & 0xFFFFFFFFFFFFFFF8;
      if (!v7 || (*(unsigned char *)v7 & 4) == 0)
      {
        while ((*(_WORD *)(v7 + 44) & 4) != 0)
          unint64_t v7 = *(void *)v7 & 0xFFFFFFFFFFFFFFF8;
      }
      if (llvm::TargetInstrInfo::isUnpredicatedTerminator(a2, (const llvm::MachineInstr *)v7)) {
        continue;
      }
    }
    return 0;
  }
  *a3 = 1;
  return v7;
}

unint64_t sub_1CB94A340(int a1, unsigned char *a2)
{
  v17[3] = *MEMORY[0x1E4F143B8];
  int v4 = sub_1CB955608(a1);
  int v5 = sub_1CB955634(a1);
  sub_1CB9571C8(v4, (uint64_t)&v15);
  if (v5 == 48)
  {
    BOOL v11 = a2[318] == 0;
    int v12 = 19;
  }
  else
  {
    if (v5 != 47)
    {
      int v6 = 39;
      goto LABEL_4;
    }
    BOOL v11 = a2[318] == 0;
    int v12 = 5;
  }
  if (v11) {
    int v6 = 33;
  }
  else {
    int v6 = v12;
  }
LABEL_4:
  unint64_t v7 = v15;
  unsigned int v8 = sub_1CB951118(v6, v15, v16, a2);
  uint64_t v9 = *v7;
  if (v7 != (unsigned int *)v17)
  {
    int v13 = v7;
    uint64_t v14 = *v7;
    free(v13);
    uint64_t v9 = v14;
  }
  return v8 | (unint64_t)(v9 << 32);
}

double sub_1CB94A464(uint64_t a1, uint64_t a2, int a3, int a4, char a5)
{
  v22[1] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = 0;
  v22[0] = 0;
  if (a3 == 1)
  {
    int v5 = 0;
  }
  else if (a3 == 5)
  {
    int v5 = 3;
  }
  else
  {
    int v5 = 2;
  }
  LODWORD(v20) = v5;
  if (a4 == 1)
  {
    int v6 = 0;
  }
  else if (a4 == 5)
  {
    int v6 = 3;
  }
  else
  {
    int v6 = 2;
  }
  uint64_t v7 = 0;
  HIDWORD(v20) = v6;
  uint64_t v8 = *(void *)(a2 + 32);
  int v9 = 2;
  char v10 = 1;
  uint64_t v11 = *(void *)(v8 + 48);
  do
  {
    char v12 = v10;
    uint64_t v13 = (v9 + 1);
    int v14 = *((_DWORD *)&v20 + v7);
    int v15 = *(unsigned __int8 *)(v8 + 32 * v13);
    if (v14)
    {
      if (v15 == 7)
      {
        if (v14 == 3) {
          int v16 = 5;
        }
        else {
          int v16 = 4;
        }
        *((_DWORD *)&v20 + v7) = v16;
      }
      *((_DWORD *)v22 + v7) = *(_DWORD *)(v8 + 32 * v13 + 4);
      uint64_t v13 = (v9 + 2);
      *((_DWORD *)&v22[-1] + v7) = *(void *)(v8 + 32 * v13 + 16);
    }
    else
    {
      uint64_t v17 = v8 + 32 * v13;
      if (v15 == 7)
      {
        *((_DWORD *)v22 + v7) = *(_DWORD *)(v17 + 4);
        *((_DWORD *)&v20 + v7) = 4;
      }
      else
      {
        *((_DWORD *)v22 + v7) = *(void *)(v17 + 16);
      }
    }
    char v10 = 0;
    uint64_t v7 = 1;
    int v9 = v13;
  }
  while ((v12 & 1) != 0);
  *(void *)a1 = v11;
  *(unsigned char *)(a1 + 8) = a5;
  *(void *)&long long v18 = v22[0];
  *((void *)&v18 + 1) = v21;
  *(_OWORD *)(a1 + 12) = v18;
  double result = v20;
  *(double *)(a1 + 28) = v20;
  return result;
}

void sub_1CB94A5BC(uint64_t a1, llvm::MachineFunction **a2)
{
  uint64_t v4 = *(void *)a1;
  BOOL v5 = *(unsigned char *)(a1 + 8) != 0;
  if (*(void *)a1 == 4)
  {
    uint64_t v4 = 0;
    BOOL v5 = *(unsigned char *)(a1 + 8) == 0;
  }
  BOOL v6 = !v5;
  uint64_t v7 = 16;
  if (v6) {
    uint64_t v7 = 0;
  }
  int v11 = 1;
  int v9 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v12 = 0;
  uint64_t v13 = v7 | v4;
  llvm::MachineInstr::addOperand(v8, v9, (const llvm::MachineOperand *)&v11);
  sub_1CB94A650(a1, a2, 0);
  sub_1CB94A650(a1, a2, 1u);
}

void sub_1CB94A650(uint64_t a1, llvm::MachineFunction **a2, unsigned int a3)
{
  uint64_t v5 = a3;
  uint64_t v6 = a1 + 4 * a3;
  int v9 = *(_DWORD *)(v6 + 28);
  uint64_t v8 = (_DWORD *)(v6 + 28);
  int v7 = v9;
  if (v9)
  {
    if ((v7 & 0xFFFFFFFE) == 4)
    {
      int v10 = *(_DWORD *)(a1 + 4 * a3 + 12);
      uint64_t v12 = *a2;
      int v11 = a2[1];
      uint64_t v21 = 0;
      LODWORD(v22) = 64;
      LODWORD(v23) = 0;
      if (v7 == 4) {
        int v13 = 263;
      }
      else {
        int v13 = 519;
      }
      int v19 = v13;
      int v20 = v10;
    }
    else
    {
      int v15 = *(_DWORD *)(a1 + 4 * a3 + 12);
      uint64_t v12 = *a2;
      int v11 = a2[1];
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      int v19 = 0;
      int v20 = v15;
      uint64_t v23 = 0;
    }
  }
  else
  {
    uint64_t v14 = *(unsigned int *)(a1 + 4 * a3 + 12);
    uint64_t v12 = *a2;
    int v11 = a2[1];
    int v19 = 1;
    uint64_t v21 = 0;
    uint64_t v22 = v14;
  }
  llvm::MachineInstr::addOperand(v11, v12, (const llvm::MachineOperand *)&v19);
  if (*v8)
  {
    uint64_t v16 = *(unsigned int *)(a1 + 4 * v5 + 20);
    long long v18 = *a2;
    uint64_t v17 = a2[1];
    int v19 = 1;
    uint64_t v21 = 0;
    uint64_t v22 = v16;
    llvm::MachineInstr::addOperand(v17, v18, (const llvm::MachineOperand *)&v19);
  }
}

llvm::MachineFunction *sub_1CB94A738(uint64_t a1, unint64_t *a2, unsigned __int8 **a3, uint64_t a4, unsigned char *a5, uint64_t a6, int a7, int a8, unsigned __int8 a9, const llvm::MachineOperand *a10, const llvm::MachineOperand *a11)
{
  uint64_t v17 = *(void *)(*(void *)(a4 + 32) + 48);
  int v18 = v17 == 4;
  if (v17 == 4) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(a4 + 32) + 48);
  }
  if (v18 != a8) {
    int v20 = a10;
  }
  else {
    int v20 = a11;
  }
  if (v18 != a8) {
    uint64_t v21 = a11;
  }
  else {
    uint64_t v21 = a10;
  }
  unint64_t v22 = sub_1CB95535C(**(unsigned __int16 **)(a4 + 16), a5, a9, *(unsigned char *)v21 == 0, *(unsigned char *)v20 == 0);
  unsigned int v23 = v22;
  long long v44 = 0u;
  long long v43 = 0u;
  sub_1CB94A464((uint64_t)&v42, a4, SHIDWORD(v22), v24, 0);
  uint64_t v42 = v19;
  uint64_t v25 = *(void *)(a6 + 8) + 48 * v23;
  uint64_t v26 = *(llvm::MachineFunction **)(a1 + 32);
  uint64_t v27 = *a3;
  uint64_t v46 = v27;
  if (v27) {
    llvm::MetadataTracking::track((uint64_t)&v46, v27, 2);
  }
  uint64_t v28 = llvm::MachineFunction::CreateMachineInstr(v26, v25, &v46, 0);
  if (v46) {
    llvm::MetadataTracking::untrack((uint64_t)&v46, v46);
  }
  uint64_t v29 = *(void *)(a1 + 40);
  *((void *)v28 + 3) = v29;
  uint64_t v30 = *(void *)(v29 + 32);
  uint64_t v31 = *((unsigned int *)v28 + 10);
  if (v31)
  {
    uint64_t v35 = *((void *)v28 + 4);
    uint64_t v36 = *(void *)(v30 + 40);
    uint64_t v37 = 32 * v31;
    do
    {
      if (!*(unsigned char *)v35)
      {
        uint64_t v38 = *(unsigned int *)(v35 + 4);
        if ((int)v38 >= 0) {
          uint64_t v39 = (uint64_t *)(*(void *)(v36 + 272) + 8 * v38);
        }
        else {
          uint64_t v39 = (uint64_t *)(*(void *)(v36 + 24) + 16 * (v38 & 0x7FFFFFFF) + 8);
        }
        uint64_t v40 = *v39;
        if (*v39)
        {
          uint64_t v41 = *(void *)(v40 + 16);
          *(void *)(v40 + 16) = v35;
          *(void *)(v35 + 16) = v41;
          if (*(unsigned char *)(v35 + 3))
          {
            *(void *)(v35 + 24) = v40;
          }
          else
          {
            *(void *)(v35 + 24) = 0;
            uint64_t v39 = (uint64_t *)(v41 + 24);
          }
        }
        else
        {
          *(void *)(v35 + 16) = v35;
          *(void *)(v35 + 24) = 0;
        }
        uint64_t *v39 = v35;
      }
      v35 += 32;
      v37 -= 32;
    }
    while (v37);
  }
  uint64_t v32 = *(void *)(v30 + 728);
  if (v32) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v32 + 24))(v32, v28);
  }
  unint64_t v33 = *a2 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v28 = v33 | *(void *)v28 & 7;
  *((void *)v28 + 1) = a2;
  *(void *)(v33 + 8) = v28;
  *a2 = *a2 & 7 | (unint64_t)v28;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  v47[0] = 0x1000000;
  v47[1] = a7;
  llvm::MachineInstr::addOperand(v28, v26, (const llvm::MachineOperand *)v47);
  v47[0] = 1;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  llvm::MachineInstr::addOperand(v28, v26, (const llvm::MachineOperand *)v47);
  v45[0] = v26;
  v45[1] = v28;
  sub_1CB94A5BC((uint64_t)&v42, v45);
  llvm::MachineInstr::addOperand(v28, v26, v21);
  if (!*(unsigned char *)v21)
  {
    v47[0] = 1;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    llvm::MachineInstr::addOperand(v28, v26, (const llvm::MachineOperand *)v47);
  }
  llvm::MachineInstr::addOperand(v28, v26, v20);
  if (!*(unsigned char *)v20)
  {
    v47[0] = 1;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    llvm::MachineInstr::addOperand(v28, v26, (const llvm::MachineOperand *)v47);
  }
  return v26;
}

void sub_1CB94AA24(uint64_t a1, unint64_t *a2, int a3, unsigned char *a4, uint64_t a5, unsigned __int8 *a6, unsigned int a7)
{
  if (a4[318]) {
    int v12 = 5;
  }
  else {
    int v12 = 33;
  }
  if (a4[318]) {
    int v13 = 411;
  }
  else {
    int v13 = 158;
  }
  uint64_t v14 = a5 + 48 * sub_1CB952700(v12, v13, a4);
  int v15 = *(llvm::MachineFunction **)(a1 + 32);
  unint64_t v33 = a6;
  if (a6) {
    llvm::MetadataTracking::track((uint64_t)&v33, a6, 2);
  }
  uint64_t v16 = llvm::MachineFunction::CreateMachineInstr(v15, v14, &v33, 0);
  if (v33)
  {
    int v29 = *v33;
    if ((v29 - 4) > 0x1E)
    {
      if ((v29 - 3) >= 0xFFFFFFFE) {
        uint64_t v32 = v33;
      }
      else {
        uint64_t v32 = 0;
      }
      if ((v29 - 3) < 0xFFFFFFFE)
      {
        if (v29 == 3) {
          *((void *)v33 + 1) = 0;
        }
        goto LABEL_10;
      }
      unint64_t v31 = (unint64_t)(v32 + 8);
    }
    else
    {
      if ((v33[1] & 0x7F) != 2 && !*((_DWORD *)v33 + 3)) {
        goto LABEL_10;
      }
      uint64_t v30 = *((void *)v33 + 2);
      if ((v30 & 4) == 0) {
        goto LABEL_10;
      }
      unint64_t v31 = v30 & 0xFFFFFFFFFFFFFFF8;
      if (!v31) {
        goto LABEL_10;
      }
    }
    uint64_t v34 = &v33;
    sub_1CC5FA668(v31 + 16, &v34);
  }
LABEL_10:
  uint64_t v17 = *(void *)(a1 + 40);
  *((void *)v16 + 3) = v17;
  uint64_t v18 = *(void *)(v17 + 32);
  uint64_t v19 = *((unsigned int *)v16 + 10);
  if (v19)
  {
    uint64_t v22 = *((void *)v16 + 4);
    uint64_t v23 = *(void *)(v18 + 40);
    uint64_t v24 = 32 * v19;
    do
    {
      if (!*(unsigned char *)v22)
      {
        uint64_t v25 = *(unsigned int *)(v22 + 4);
        if ((int)v25 >= 0) {
          uint64_t v26 = (uint64_t *)(*(void *)(v23 + 272) + 8 * v25);
        }
        else {
          uint64_t v26 = (uint64_t *)(*(void *)(v23 + 24) + 16 * (v25 & 0x7FFFFFFF) + 8);
        }
        uint64_t v27 = *v26;
        if (*v26)
        {
          uint64_t v28 = *(void *)(v27 + 16);
          *(void *)(v27 + 16) = v22;
          *(void *)(v22 + 16) = v28;
          if (*(unsigned char *)(v22 + 3))
          {
            *(void *)(v22 + 24) = v27;
          }
          else
          {
            *(void *)(v22 + 24) = 0;
            uint64_t v26 = (uint64_t *)(v28 + 24);
          }
        }
        else
        {
          *(void *)(v22 + 16) = v22;
          *(void *)(v22 + 24) = 0;
        }
        *uint64_t v26 = v22;
      }
      v22 += 32;
      v24 -= 32;
    }
    while (v24);
  }
  uint64_t v20 = *(void *)(v18 + 728);
  if (v20) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v20 + 24))(v20, v16);
  }
  unint64_t v21 = *a2 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v16 = v21 | *(void *)v16 & 7;
  *((void *)v16 + 1) = a2;
  *(void *)(v21 + 8) = v16;
  *a2 = *a2 & 7 | (unint64_t)v16;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  LODWORD(v34) = 0x1000000;
  HIDWORD(v34) = a3;
  llvm::MachineInstr::addOperand(v16, v15, (const llvm::MachineOperand *)&v34);
  LODWORD(v34) = 1;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  llvm::MachineInstr::addOperand(v16, v15, (const llvm::MachineOperand *)&v34);
  LODWORD(v34) = 1;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  llvm::MachineInstr::addOperand(v16, v15, (const llvm::MachineOperand *)&v34);
  LODWORD(v34) = 1;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  llvm::MachineInstr::addOperand(v16, v15, (const llvm::MachineOperand *)&v34);
  LODWORD(v34) = 1;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  llvm::MachineInstr::addOperand(v16, v15, (const llvm::MachineOperand *)&v34);
  LODWORD(v34) = 1;
  uint64_t v35 = 0;
  uint64_t v36 = a7;
  llvm::MachineInstr::addOperand(v16, v15, (const llvm::MachineOperand *)&v34);
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  LODWORD(v34) = 0x2000000;
  HIDWORD(v34) = a3;
  llvm::MachineInstr::addOperand(v16, v15, (const llvm::MachineOperand *)&v34);
}

void sub_1CB94AD0C(uint64_t a1, unint64_t *a2, uint64_t a3, int a4, unsigned char *a5)
{
  if ((unint64_t *)(a1 + 48) == a2)
  {
LABEL_8:
    int v15 = 0;
    uint64_t v40 = 0;
  }
  else
  {
    int v10 = a2;
    while (1)
    {
      unsigned int v11 = *(unsigned __int16 *)v10[2];
      BOOL v12 = v11 > 0x17;
      int v13 = (1 << v11) & 0x83E000;
      if (v12 || v13 == 0) {
        break;
      }
      int v10 = (unint64_t *)v10[1];
      if (v10 == (unint64_t *)(a1 + 48)) {
        goto LABEL_8;
      }
    }
    uint64_t v16 = (unsigned __int8 *)v10[7];
    uint64_t v40 = v16;
    if (v16)
    {
      llvm::MetadataTracking::track((uint64_t)&v40, v16, 2);
      int v15 = v40;
    }
    else
    {
      int v15 = 0;
    }
  }
  uint64_t v17 = *(void *)(a3 + 8) + 48 * sub_1CB952700(39, 158, a5);
  uint64_t v18 = *(llvm::MachineFunction **)(a1 + 32);
  uint64_t v41 = v15;
  if (v15) {
    llvm::MetadataTracking::track((uint64_t)&v41, v15, 2);
  }
  uint64_t v19 = llvm::MachineFunction::CreateMachineInstr(v18, v17, &v41, 0);
  if (v41)
  {
    int v36 = *v41;
    if ((v36 - 4) > 0x1E)
    {
      if ((v36 - 3) >= 0xFFFFFFFE) {
        uint64_t v39 = v41;
      }
      else {
        uint64_t v39 = 0;
      }
      if ((v36 - 3) < 0xFFFFFFFE)
      {
        if (v36 == 3) {
          *((void *)v41 + 1) = 0;
        }
        goto LABEL_14;
      }
      unint64_t v38 = (unint64_t)(v39 + 8);
    }
    else
    {
      if ((v41[1] & 0x7F) != 2 && !*((_DWORD *)v41 + 3)) {
        goto LABEL_14;
      }
      uint64_t v37 = *((void *)v41 + 2);
      if ((v37 & 4) == 0) {
        goto LABEL_14;
      }
      unint64_t v38 = v37 & 0xFFFFFFFFFFFFFFF8;
      if (!v38) {
        goto LABEL_14;
      }
    }
    uint64_t v42 = &v41;
    sub_1CC5FA668(v38 + 16, &v42);
  }
LABEL_14:
  uint64_t v20 = *(void *)(a1 + 40);
  *((void *)v19 + 3) = v20;
  uint64_t v21 = *(void *)(v20 + 32);
  uint64_t v22 = *((unsigned int *)v19 + 10);
  if (v22)
  {
    uint64_t v28 = *((void *)v19 + 4);
    uint64_t v29 = *(void *)(v21 + 40);
    uint64_t v30 = 32 * v22;
    do
    {
      if (!*(unsigned char *)v28)
      {
        uint64_t v31 = *(unsigned int *)(v28 + 4);
        if ((int)v31 >= 0) {
          uint64_t v32 = (uint64_t *)(*(void *)(v29 + 272) + 8 * v31);
        }
        else {
          uint64_t v32 = (uint64_t *)(*(void *)(v29 + 24) + 16 * (v31 & 0x7FFFFFFF) + 8);
        }
        uint64_t v33 = *v32;
        if (*v32)
        {
          uint64_t v34 = *(void *)(v33 + 16);
          *(void *)(v33 + 16) = v28;
          *(void *)(v28 + 16) = v34;
          if (*(unsigned char *)(v28 + 3))
          {
            *(void *)(v28 + 24) = v33;
          }
          else
          {
            *(void *)(v28 + 24) = 0;
            uint64_t v32 = (uint64_t *)(v34 + 24);
          }
        }
        else
        {
          *(void *)(v28 + 16) = v28;
          *(void *)(v28 + 24) = 0;
        }
        *uint64_t v32 = v28;
      }
      v28 += 32;
      v30 -= 32;
    }
    while (v30);
  }
  uint64_t v23 = *(void *)(v21 + 728);
  if (v23) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v23 + 24))(v23, v19);
  }
  unint64_t v24 = *a2 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v19 = v24 | *(void *)v19 & 7;
  *((void *)v19 + 1) = a2;
  *(void *)(v24 + 8) = v19;
  *a2 = *a2 & 7 | (unint64_t)v19;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  LODWORD(v42) = 0x1000000;
  HIDWORD(v42) = a4;
  llvm::MachineInstr::addOperand(v19, v18, (const llvm::MachineOperand *)&v42);
  LODWORD(v42) = 1;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  llvm::MachineInstr::addOperand(v19, v18, (const llvm::MachineOperand *)&v42);
  LODWORD(v42) = 1;
  uint64_t v43 = 0;
  uint64_t v44 = 8;
  llvm::MachineInstr::addOperand(v19, v18, (const llvm::MachineOperand *)&v42);
  LODWORD(v42) = 1;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  llvm::MachineInstr::addOperand(v19, v18, (const llvm::MachineOperand *)&v42);
  LODWORD(v42) = 1;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  llvm::MachineInstr::addOperand(v19, v18, (const llvm::MachineOperand *)&v42);
  LODWORD(v42) = 1;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  llvm::MachineInstr::addOperand(v19, v18, (const llvm::MachineOperand *)&v42);
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  LODWORD(v42) = 0x2000000;
  HIDWORD(v42) = a4;
  llvm::MachineInstr::addOperand(v19, v18, (const llvm::MachineOperand *)&v42);
  if (v40)
  {
    int v25 = *v40;
    if ((v25 - 4) > 0x1E)
    {
      if ((v25 - 3) >= 0xFFFFFFFE) {
        uint64_t v26 = v40;
      }
      else {
        uint64_t v26 = 0;
      }
      if ((v25 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v27 = (unint64_t)(v26 + 8);
LABEL_27:
        uint64_t v42 = &v40;
        sub_1CC5FA668(v27 + 16, &v42);
        return;
      }
      if (v25 == 3) {
        *((void *)v40 + 1) = 0;
      }
    }
    else if ((v40[1] & 0x7F) == 2 || *((_DWORD *)v40 + 3))
    {
      uint64_t v35 = *((void *)v40 + 2);
      if ((v35 & 4) != 0)
      {
        unint64_t v27 = v35 & 0xFFFFFFFFFFFFFFF8;
        if (v27) {
          goto LABEL_27;
        }
      }
    }
  }
}

void sub_1CB94B0C8(llvm::MachineBasicBlock *this, int a2, unsigned __int8 **a3, int a4, uint64_t a5, int a6, unsigned int a7)
{
  if (a2) {
    unsigned int v10 = 2;
  }
  else {
    unsigned int v10 = 1;
  }
  if (a7 == -1) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = a7;
  }
  BOOL v12 = (llvm::MachineFunction *)*((void *)this + 4);
  uint64_t v13 = 727;
  if (!*(unsigned char *)(*((void *)v12 + 2) + 318)) {
    uint64_t v13 = 728;
  }
  uint64_t v14 = 724;
  if (!*(unsigned char *)(*((void *)v12 + 2) + 318)) {
    uint64_t v14 = 725;
  }
  if (v11 == 2) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v14;
  }
  if (a6)
  {
    uint64_t v16 = (uint64_t *)*((void *)this + 7);
  }
  else
  {
    uint64_t v20 = a5;
    uint64_t FirstInstrTerminator = llvm::MachineBasicBlock::getFirstInstrTerminator(this);
    a5 = v20;
    uint64_t v16 = (uint64_t *)FirstInstrTerminator;
    BOOL v12 = (llvm::MachineFunction *)*((void *)this + 4);
  }
  uint64_t v17 = *(void *)(a5 + 8) + 48 * v15;
  uint64_t v18 = *a3;
  uint64_t v22 = v18;
  if (v18) {
    llvm::MetadataTracking::track((uint64_t)&v22, v18, 2);
  }
  uint64_t v19 = llvm::MachineFunction::CreateMachineInstr(v12, v17, &v22, 0);
  if (v22) {
    llvm::MetadataTracking::untrack((uint64_t)&v22, v22);
  }
  if ((uint64_t *)((char *)this + 48) != v16 && (*((_WORD *)v16 + 22) & 4) != 0) {
    *((_WORD *)v19 + 22) |= 0xCu;
  }
  sub_1CC31973C((uint64_t *)this + 5, v16, (uint64_t)v19);
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  LODWORD(v22) = 0x1000000;
  HIDWORD(v22) = a4;
  llvm::MachineInstr::addOperand(v19, v12, (const llvm::MachineOperand *)&v22);
  LODWORD(v22) = 1;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  llvm::MachineInstr::addOperand(v19, v12, (const llvm::MachineOperand *)&v22);
  LODWORD(v22) = 1;
  uint64_t v23 = 0;
  uint64_t v24 = v11;
  llvm::MachineInstr::addOperand(v19, v12, (const llvm::MachineOperand *)&v22);
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  LODWORD(v22) = 0x2000000;
  HIDWORD(v22) = a4;
  llvm::MachineInstr::addOperand(v19, v12, (const llvm::MachineOperand *)&v22);
}

uint64_t sub_1CB94B26C()
{
  return __cxa_atexit((void (*)(void *))nullsub_1531, off_1EC7DF9D0, &dword_1CB82C000);
}

void sub_1CB94B290(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = (unsigned char *)a2[2];
  uint64_t v6 = (*(uint64_t (**)(unsigned char *))(*(void *)v5 + 104))(v5);
  uint64_t v87 = v6;
  uint64_t v7 = a2[7];
  uint64_t v86 = (*(uint64_t (**)(unsigned char *))(*(void *)v5 + 176))(v5);
  int v8 = *(_DWORD *)(v7 + 48);
  if (*(_DWORD *)(v7 + 72) == -1) {
    int v9 = 0;
  }
  else {
    int v9 = *(_DWORD *)(v7 + 72);
  }
  uint64_t v10 = a2[6];
  if (!v10)
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)a2[1] + 216))(a2[1], a2 + 16, a2);
    a2[6] = v10;
  }
  uint64_t v11 = a2[41];
  uint64_t v12 = *(void *)(v11 + 56);
  if (v12 == v11 + 48)
  {
LABEL_12:
    int v78 = 0;
  }
  else
  {
    while (**(_WORD **)(v12 + 16) != 256)
    {
      if ((*(unsigned char *)v12 & 4) == 0)
      {
        while ((*(_WORD *)(v12 + 44) & 8) != 0)
          uint64_t v12 = *(void *)(v12 + 8);
      }
      uint64_t v12 = *(void *)(v12 + 8);
      if (v12 == v11 + 48) {
        goto LABEL_12;
      }
    }
    int v78 = *(_DWORD *)(*(void *)(v12 + 32) + 16);
    *(_DWORD *)(v10 + 464) = v78;
    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v12);
  }
  uint64_t v13 = *(void *)(a3 + 56);
  v85[0] = a2;
  v85[1] = a3;
  v85[2] = &v87;
  v85[3] = &v86;
  int v14 = v5[381];
  if (v5[381])
  {
    uint64_t v15 = *(void *)(v7 + 8);
    unsigned int v16 = *(_DWORD *)(v7 + 32);
    uint64_t v17 = -858993459 * ((unint64_t)(*(void *)(v7 + 16) - v15) >> 3) - v16;
    if (v17)
    {
      while (*(void *)(v15 + 40 * v16 + 8) == -1)
      {
        ++v16;
        if (!--v17) {
          goto LABEL_15;
        }
      }
      v8 -= *(_DWORD *)(v15 + 40 * v16);
    }
    else
    {
LABEL_15:
      int v8 = v9;
    }
    *(void *)(v7 + 48) = v8;
  }
  if (v5[318]) {
    int v18 = 4;
  }
  else {
    int v18 = 3;
  }
  int v82 = v18;
  int v19 = (*(unsigned __int16 *)(*a2 + 18) >> 4) & 0x3FF;
  if (v19) {
    BOOL v20 = v19 == 8;
  }
  else {
    BOOL v20 = 1;
  }
  if ((v20 || v19 == 255) && sub_1CBA65424((uint64_t)a2))
  {
    sub_1CB94BB3C(v6, a3, (unint64_t *)v13, 0, 189, v82, 1);
    int v14 = v5[381];
  }
  if (v14)
  {
    int v27 = v8 + v78;
    unsigned int v28 = *(unsigned __int16 *)(*a2 + 18);
    int v29 = (v28 >> 4) & 0x3FF;
    if (v29 != 100 && (v29 - 109) >= 0xFFFFFFF7 && (v28 & 0x3FF0) != 0x640)
    {
      if (*(unsigned char *)(a2[1] + 1687))
      {
        uint64_t v31 = *(llvm::Module **)(*a2 + 40);
        *(void *)&long long v90 = "agx.stack_oob";
        LOWORD(v93[0]) = 259;
        if (llvm::Module::getNamedMetadata(v31, (const char **)&v90)) {
          v27 += 32;
        }
      }
    }
    sub_1CB94BD28((uint64_t)v85, *(unint64_t **)(a3 + 56), -v27);
    unsigned int v32 = *(unsigned __int16 *)(*a2 + 18);
    int v33 = (v32 >> 4) & 0x3FF;
    char v35 = ((v32 >> 4) & 0x3F7) != 0 && v33 != 255;
    sub_1CB952744(v87, v27, a3, *(unint64_t **)(a3 + 56), v35);
    if (!*(unsigned char *)(a2[1] + 1688)) {
      goto LABEL_32;
    }
    int v36 = *(llvm::Module **)(*a2 + 40);
    *(void *)&long long v90 = "agx.disable_gin_1102";
    LOWORD(v93[0]) = 259;
    if (llvm::Module::getNamedMetadata(v36, (const char **)&v90)) {
      goto LABEL_32;
    }
    switch(v33)
    {
      case 0:
        goto LABEL_32;
      case 8:
        goto LABEL_32;
      case 255:
        goto LABEL_32;
    }
    if (!*(unsigned char *)(v7 + 62))
    {
      uint64_t v37 = *(llvm::Module **)(*a2 + 40);
      *(void *)&long long v90 = "agx.has_stack_access";
      LOWORD(v93[0]) = 259;
      if (!llvm::Module::getNamedMetadata(v37, (const char **)&v90)) {
        goto LABEL_32;
      }
    }
    uint64_t v38 = v87;
    uint64_t v39 = *(unint64_t **)(a3 + 56);
    unsigned int v40 = v27 >> 2;
    uint64_t v41 = a3;
LABEL_63:
    sub_1CB94BB3C(v38, v41, v39, v40, 66, v82, 0);
    goto LABEL_32;
  }
  int v21 = v8 - v9 + v78;
  int v22 = (*(unsigned __int16 *)(*a2 + 18) >> 4) & 0x3FF;
  if (v22) {
    BOOL v23 = v22 == 8;
  }
  else {
    BOOL v23 = 1;
  }
  if (v23 || v22 == 255)
  {
    sub_1CB94BD28((uint64_t)v85, *(unint64_t **)(a3 + 56), -v21);
    sub_1CB952984(v87, v8 - v9 + v78, a3, *(unint64_t **)(a3 + 56));
    goto LABEL_32;
  }
  if (*(unsigned char *)(v7 + 62))
  {
    sub_1CB94BD28((uint64_t)v85, *(unint64_t **)(a3 + 56), -v21);
    uint64_t v38 = v87;
    uint64_t v39 = *(unint64_t **)(a3 + 56);
    uint64_t v41 = a3;
    unsigned int v40 = v8 - v9 + v78;
    goto LABEL_63;
  }
LABEL_32:
  if (*(unsigned char *)(v7 + 62))
  {
    int v65 = (*(unsigned __int16 *)(*a2 + 18) >> 4) & 0x3FF;
    if (v65 != 8)
    {
      if (v65)
      {
        if (v65 != 255)
        {
          uint64_t v66 = a2 + 40;
          if ((uint64_t *)a2[40] != a2 + 40)
          {
            uint64_t v67 = a2[41];
            if ((uint64_t *)v67 == v66 || *(uint64_t **)(v67 + 8) == v66)
            {
              if (v5[318]) {
                int v68 = 56;
              }
              else {
                int v68 = 313;
              }
              sub_1CB94BB3C(v87, a3, *(unint64_t **)(a3 + 56), 0, v68, v82, v5[318] == 0);
            }
          }
        }
      }
    }
  }
  if (*(unsigned char *)(a2[4] + 2108) || (*(_WORD *)(a2[1] + 1064) & 0x10) != 0)
  {
    int v42 = (*(unsigned __int16 *)(*a2 + 18) >> 4) & 0x3FF;
    if (v42 == 8 || v42 == 255 || !v42)
    {
      uint64_t v43 = *(unint64_t **)(a3 + 56);
      int v84 = 0;
      uint64_t v44 = sub_1CB84B588(a3, v43, &v84, *(void *)(v87 + 8) + 144);
      uint64_t v46 = v45;
      DwarfRegNuuint64_t m = llvm::MCRegisterInfo::getDwarfRegNum(v86 + 8, 0x42u, 0);
      LODWORD(v90) = 7;
      *((void *)&v90 + 1) = 0;
      int v91 = DwarfRegNum;
      int v92 = 0;
      HIBYTE(v95) = 0;
      v93[1] = 0;
      *(void *)&long long v94 = 0;
      v93[0] = 0;
      BYTE8(v94) = 0;
      int v48 = llvm::MachineFunction::addFrameInst(a2, &v90);
      LODWORD(v88[0]) = 16;
      v88[1] = 0;
      int v89 = v48;
      llvm::MachineInstr::addOperand(v46, v44, (const llvm::MachineOperand *)v88);
      if (SHIBYTE(v95) < 0) {
        operator delete(*((void **)&v94 + 1));
      }
      if (v93[0])
      {
        v93[1] = v93[0];
        operator delete(v93[0]);
      }
      if (v84) {
        llvm::MetadataTracking::untrack((uint64_t)&v84, v84);
      }
    }
  }
  uint64_t v24 = a3 + 48;
  if (v13 != a3 + 48)
  {
    while (1)
    {
      __int16 v25 = *(_WORD *)(v13 + 44);
      if ((v25 & 1) == 0) {
        break;
      }
      if ((v25 & 8) != 0 && (*(void *)v13 & 4) == 0)
      {
        do
          uint64_t v13 = *(void *)(v13 + 8);
        while ((*(_WORD *)(v13 + 44) & 8) != 0);
      }
      uint64_t v13 = *(void *)(v13 + 8);
      if (v13 == v24)
      {
        uint64_t v13 = a3 + 48;
        break;
      }
    }
  }
  uint64_t v26 = *(uint64_t **)(a3 + 32);
  if (*(unsigned char *)(v26[4] + 2108) || (*(_WORD *)(v26[1] + 1064) & 0x10) != 0)
  {
    uint64_t v49 = v26[7];
    uint64_t v50 = v26[2];
    uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)v50 + 176))(v50);
    uint64_t v52 = (*(uint64_t (**)(uint64_t))(*(void *)v50 + 104))(v50);
    if (v24 == v13)
    {
LABEL_130:
      v88[0] = 0;
    }
    else
    {
      uint64_t v53 = v13;
      while (1)
      {
        unsigned int v54 = **(unsigned __int16 **)(v53 + 16);
        BOOL v55 = v54 > 0x17;
        int v56 = (1 << v54) & 0x83E000;
        if (v55 || v56 == 0) {
          break;
        }
        uint64_t v53 = *(void *)(v53 + 8);
        if (v53 == v24) {
          goto LABEL_130;
        }
      }
      uint64_t v58 = *(unsigned __int8 **)(v53 + 56);
      v88[0] = v58;
      if (v58) {
        llvm::MetadataTracking::track((uint64_t)v88, v58, 2);
      }
    }
    uint64_t v59 = *(void *)(v49 + 80);
    uint64_t v60 = *(void *)(v49 + 88);
    if (v59 != v60)
    {
      uint64_t v81 = v51 + 8;
      uint64_t v83 = v49;
      uint64_t v69 = v59 + 4;
      do
      {
        uint64_t v71 = v69 - 4;
        unsigned int v70 = *(_DWORD *)(v69 - 4);
        if (*(unsigned char *)(v69 + 5))
        {
          int v79 = llvm::MCRegisterInfo::getDwarfRegNum(v81, v70, 0);
          int v80 = llvm::MCRegisterInfo::getDwarfRegNum(v81, *(_DWORD *)v69, 0);
          LODWORD(v90) = 13;
          *((void *)&v90 + 1) = 0;
          int v91 = v79;
          int v92 = v80;
          *(_OWORD *)uint64_t v93 = 0u;
          long long v94 = 0u;
          long long v95 = 0u;
        }
        else
        {
          int v72 = llvm::MCRegisterInfo::getDwarfRegNum(v81, v70, 0);
          uint64_t v73 = *(void *)(*(void *)(v83 + 8) + 40 * (*(_DWORD *)(v83 + 32) + *(_DWORD *)v69));
          LODWORD(v90) = 3;
          *((void *)&v90 + 1) = 0;
          int v91 = v72;
          int v92 = v73;
          HIBYTE(v95) = 0;
          v93[1] = 0;
          *(void *)&long long v94 = 0;
          v93[0] = 0;
          BYTE8(v94) = 0;
        }
        int v74 = llvm::MachineFunction::addFrameInst(v26, &v90);
        if (SHIBYTE(v95) < 0) {
          operator delete(*((void **)&v94 + 1));
        }
        if (v93[0])
        {
          v93[1] = v93[0];
          operator delete(v93[0]);
        }
        int v75 = sub_1CB84B588(a3, (unint64_t *)v13, v88, *(void *)(v52 + 8) + 144);
        uint64_t v77 = v76;
        LODWORD(v90) = 16;
        *((void *)&v90 + 1) = 0;
        int v91 = v74;
        llvm::MachineInstr::addOperand(v76, v75, (const llvm::MachineOperand *)&v90);
        *((_WORD *)v77 + 22) = *((_WORD *)v77 + 22) & 0xC | 1;
        v69 += 12;
      }
      while (v71 + 12 != v60);
    }
    if (v88[0])
    {
      int v61 = *v88[0];
      if ((v61 - 4) > 0x1E)
      {
        if ((v61 - 3) >= 0xFFFFFFFE) {
          uint64_t v64 = v88[0];
        }
        else {
          uint64_t v64 = 0;
        }
        if ((v61 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v63 = (unint64_t)(v64 + 8);
LABEL_106:
          *(void *)&long long v90 = v88;
          sub_1CC5FA668(v63 + 16, &v90);
          return;
        }
        if (v61 == 3) {
          *((void *)v88[0] + 1) = 0;
        }
      }
      else if ((v88[0][1] & 0x7F) == 2 || *((_DWORD *)v88[0] + 3))
      {
        uint64_t v62 = *((void *)v88[0] + 2);
        if ((v62 & 4) != 0)
        {
          unint64_t v63 = v62 & 0xFFFFFFFFFFFFFFF8;
          if (v63) {
            goto LABEL_106;
          }
        }
      }
    }
  }
}

llvm::MachineInstr *sub_1CB94BB3C(uint64_t a1, uint64_t a2, unint64_t *a3, unsigned int a4, int a5, int a6, int a7)
{
  uint64_t v11 = 4072;
  if (a6 == 3) {
    uint64_t v11 = 4073;
  }
  uint64_t v12 = 4075;
  if (a6 == 3) {
    uint64_t v12 = 4077;
  }
  if (!a7) {
    uint64_t v11 = v12;
  }
  uint64_t v13 = *(void *)(a1 + 8) + 48 * v11;
  int v14 = *(llvm::MachineFunction **)(a2 + 32);
  int v29 = 0;
  uint64_t v15 = llvm::MachineFunction::CreateMachineInstr(v14, v13, &v29, 0);
  if (v29) {
    llvm::MetadataTracking::untrack((uint64_t)&v29, v29);
  }
  uint64_t v16 = *(void *)(a2 + 40);
  *((void *)v15 + 3) = v16;
  uint64_t v17 = *(void *)(v16 + 32);
  uint64_t v18 = *((unsigned int *)v15 + 10);
  if (v18)
  {
    uint64_t v22 = *((void *)v15 + 4);
    uint64_t v23 = *(void *)(v17 + 40);
    uint64_t v24 = 32 * v18;
    do
    {
      if (!*(unsigned char *)v22)
      {
        uint64_t v25 = *(unsigned int *)(v22 + 4);
        if ((int)v25 >= 0) {
          uint64_t v26 = (uint64_t *)(*(void *)(v23 + 272) + 8 * v25);
        }
        else {
          uint64_t v26 = (uint64_t *)(*(void *)(v23 + 24) + 16 * (v25 & 0x7FFFFFFF) + 8);
        }
        uint64_t v27 = *v26;
        if (*v26)
        {
          uint64_t v28 = *(void *)(v27 + 16);
          *(void *)(v27 + 16) = v22;
          *(void *)(v22 + 16) = v28;
          if (*(unsigned char *)(v22 + 3))
          {
            *(void *)(v22 + 24) = v27;
          }
          else
          {
            *(void *)(v22 + 24) = 0;
            uint64_t v26 = (uint64_t *)(v28 + 24);
          }
        }
        else
        {
          *(void *)(v22 + 16) = v22;
          *(void *)(v22 + 24) = 0;
        }
        *uint64_t v26 = v22;
      }
      v22 += 32;
      v24 -= 32;
    }
    while (v24);
  }
  uint64_t v19 = *(void *)(v17 + 728);
  if (v19) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v19 + 24))(v19, v15);
  }
  unint64_t v20 = *a3 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v15 = v20 | *(void *)v15 & 7;
  *((void *)v15 + 1) = a3;
  *(void *)(v20 + 8) = v15;
  *a3 = *a3 & 7 | (unint64_t)v15;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  v30[0] = 0x1000000;
  v30[1] = a5;
  llvm::MachineInstr::addOperand(v15, v14, (const llvm::MachineOperand *)v30);
  v30[0] = 1;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  llvm::MachineInstr::addOperand(v15, v14, (const llvm::MachineOperand *)v30);
  v30[0] = 1;
  uint64_t v31 = 0;
  uint64_t v32 = a4;
  llvm::MachineInstr::addOperand(v15, v14, (const llvm::MachineOperand *)v30);
  return v15;
}

void sub_1CB94BD28(uint64_t a1, unint64_t *a2, int a3)
{
  uint64_t v6 = *(void **)a1;
  if (*(unsigned char *)(*(void *)(*(void *)a1 + 32) + 2108))
  {
    int v7 = 1;
    if (!a3) {
      return;
    }
  }
  else
  {
    int v7 = (*(unsigned __int16 *)(v6[1] + 1064) >> 4) & 1;
    if (!a3) {
      return;
    }
  }
  if (!v7) {
    return;
  }
  int v8 = (*(unsigned __int16 *)(*v6 + 18) >> 4) & 0x3FF;
  if (!v8 || (v8 != 255 ? (BOOL v9 = v8 == 8) : (BOOL v9 = 1), v9))
  {
    uint64_t v10 = *(void *)(a1 + 8);
    uint64_t v11 = *(void *)(**(void **)(a1 + 16) + 8) + 144;
    int v21 = *(llvm::MachineFunction **)(v10 + 32);
    v60[0] = 0;
    MachineInstr = llvm::MachineFunction::CreateMachineInstr(v21, v11, v60, 0);
    if (v60[0])
    {
      int v44 = *v60[0];
      if ((v44 - 4) > 0x1E)
      {
        if ((v44 - 3) >= 0xFFFFFFFE) {
          uint64_t v50 = v60[0];
        }
        else {
          uint64_t v50 = 0;
        }
        if ((v44 - 3) < 0xFFFFFFFE)
        {
          if (v44 == 3) {
            *((void *)v60[0] + 1) = 0;
          }
          goto LABEL_12;
        }
        unint64_t v46 = (unint64_t)(v50 + 8);
      }
      else
      {
        if ((v60[0][1] & 0x7F) != 2 && !*((_DWORD *)v60[0] + 3)) {
          goto LABEL_12;
        }
        uint64_t v45 = *((void *)v60[0] + 2);
        if ((v45 & 4) == 0) {
          goto LABEL_12;
        }
        unint64_t v46 = v45 & 0xFFFFFFFFFFFFFFF8;
        if (!v46) {
          goto LABEL_12;
        }
      }
      *(void *)&long long v52 = v60;
      sub_1CC5FA668(v46 + 16, &v52);
    }
LABEL_12:
    uint64_t v13 = *(void *)(v10 + 40);
    *((void *)MachineInstr + 3) = v13;
    uint64_t v14 = *(void *)(v13 + 32);
    uint64_t v15 = *((unsigned int *)MachineInstr + 10);
    if (v15)
    {
      uint64_t v30 = *((void *)MachineInstr + 4);
      uint64_t v31 = *(void *)(v14 + 40);
      uint64_t v32 = 32 * v15;
      do
      {
        if (!*(unsigned char *)v30)
        {
          uint64_t v33 = *(unsigned int *)(v30 + 4);
          if ((int)v33 >= 0) {
            uint64_t v34 = (uint64_t *)(*(void *)(v31 + 272) + 8 * v33);
          }
          else {
            uint64_t v34 = (uint64_t *)(*(void *)(v31 + 24) + 16 * (v33 & 0x7FFFFFFF) + 8);
          }
          uint64_t v35 = *v34;
          if (*v34)
          {
            uint64_t v36 = *(void *)(v35 + 16);
            *(void *)(v35 + 16) = v30;
            *(void *)(v30 + 16) = v36;
            if (*(unsigned char *)(v30 + 3))
            {
              *(void *)(v30 + 24) = v35;
            }
            else
            {
              *(void *)(v30 + 24) = 0;
              uint64_t v34 = (uint64_t *)(v36 + 24);
            }
          }
          else
          {
            *(void *)(v30 + 16) = v30;
            *(void *)(v30 + 24) = 0;
          }
          *uint64_t v34 = v30;
        }
        v30 += 32;
        v32 -= 32;
      }
      while (v32);
    }
    uint64_t v16 = *(void *)(v14 + 728);
    if (v16) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v16 + 24))(v16, MachineInstr);
    }
    unint64_t v17 = *a2 & 0xFFFFFFFFFFFFFFF8;
    *(void *)MachineInstr = v17 | *(void *)MachineInstr & 7;
    *((void *)MachineInstr + 1) = a2;
    *(void *)(v17 + 8) = MachineInstr;
    *a2 = *a2 & 7 | (unint64_t)MachineInstr;
    uint64_t v18 = *(uint64_t **)a1;
    LODWORD(v52) = 6;
    *((void *)&v52 + 1) = 0;
    int v53 = 0;
    int v54 = a3;
    char v59 = 0;
    int v56 = 0;
    uint64_t v57 = 0;
    BOOL v55 = 0;
    LOBYTE(__p) = 0;
    goto LABEL_21;
  }
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = *(void *)(**(void **)(a1 + 16) + 8) + 144;
  int v21 = *(llvm::MachineFunction **)(v19 + 32);
  v60[0] = 0;
  MachineInstr = llvm::MachineFunction::CreateMachineInstr(v21, v20, v60, 0);
  if (v60[0])
  {
    int v47 = *v60[0];
    if ((v47 - 4) > 0x1E)
    {
      if ((v47 - 3) >= 0xFFFFFFFE) {
        uint64_t v51 = v60[0];
      }
      else {
        uint64_t v51 = 0;
      }
      if ((v47 - 3) < 0xFFFFFFFE)
      {
        if (v47 == 3) {
          *((void *)v60[0] + 1) = 0;
        }
        goto LABEL_17;
      }
      unint64_t v49 = (unint64_t)(v51 + 8);
    }
    else
    {
      if ((v60[0][1] & 0x7F) != 2 && !*((_DWORD *)v60[0] + 3)) {
        goto LABEL_17;
      }
      uint64_t v48 = *((void *)v60[0] + 2);
      if ((v48 & 4) == 0) {
        goto LABEL_17;
      }
      unint64_t v49 = v48 & 0xFFFFFFFFFFFFFFF8;
      if (!v49) {
        goto LABEL_17;
      }
    }
    *(void *)&long long v52 = v60;
    sub_1CC5FA668(v49 + 16, &v52);
  }
LABEL_17:
  uint64_t v22 = *(void *)(v19 + 40);
  *((void *)MachineInstr + 3) = v22;
  uint64_t v23 = *(void *)(v22 + 32);
  uint64_t v24 = *((unsigned int *)MachineInstr + 10);
  if (v24)
  {
    uint64_t v37 = *((void *)MachineInstr + 4);
    uint64_t v38 = *(void *)(v23 + 40);
    uint64_t v39 = 32 * v24;
    do
    {
      if (!*(unsigned char *)v37)
      {
        uint64_t v40 = *(unsigned int *)(v37 + 4);
        if ((int)v40 >= 0) {
          uint64_t v41 = (uint64_t *)(*(void *)(v38 + 272) + 8 * v40);
        }
        else {
          uint64_t v41 = (uint64_t *)(*(void *)(v38 + 24) + 16 * (v40 & 0x7FFFFFFF) + 8);
        }
        uint64_t v42 = *v41;
        if (*v41)
        {
          uint64_t v43 = *(void *)(v42 + 16);
          *(void *)(v42 + 16) = v37;
          *(void *)(v37 + 16) = v43;
          if (*(unsigned char *)(v37 + 3))
          {
            *(void *)(v37 + 24) = v42;
          }
          else
          {
            *(void *)(v37 + 24) = 0;
            uint64_t v41 = (uint64_t *)(v43 + 24);
          }
        }
        else
        {
          *(void *)(v37 + 16) = v37;
          *(void *)(v37 + 24) = 0;
        }
        *uint64_t v41 = v37;
      }
      v37 += 32;
      v39 -= 32;
    }
    while (v39);
  }
  uint64_t v25 = *(void *)(v23 + 728);
  if (v25) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v25 + 24))(v25, MachineInstr);
  }
  unint64_t v26 = *a2 & 0xFFFFFFFFFFFFFFF8;
  *(void *)MachineInstr = v26 | *(void *)MachineInstr & 7;
  *((void *)MachineInstr + 1) = a2;
  *(void *)(v26 + 8) = MachineInstr;
  *a2 = *a2 & 7 | (unint64_t)MachineInstr;
  uint64_t v27 = *(uint64_t **)a1;
  DwarfRegNuuint64_t m = llvm::MCRegisterInfo::getDwarfRegNum(**(void **)(a1 + 24) + 8, 0x42u, 0);
  LODWORD(v52) = 7;
  *((void *)&v52 + 1) = 0;
  int v53 = DwarfRegNum;
  int v54 = a3;
  char v59 = 0;
  int v56 = 0;
  uint64_t v57 = 0;
  BOOL v55 = 0;
  LOBYTE(__p) = 0;
  uint64_t v18 = v27;
LABEL_21:
  int v29 = llvm::MachineFunction::addFrameInst(v18, &v52);
  LODWORD(v60[0]) = 16;
  v60[1] = 0;
  int v61 = v29;
  llvm::MachineInstr::addOperand(MachineInstr, v21, (const llvm::MachineOperand *)v60);
  if (v59 < 0) {
    operator delete(__p);
  }
  if (v55)
  {
    int v56 = v55;
    operator delete(v55);
  }
}

llvm::MachineInstr *sub_1CB94C19C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = (unsigned char *)a2[2];
  uint64_t v6 = (*(uint64_t (**)(unsigned char *))(*(void *)v5 + 104))(v5);
  uint64_t v7 = a2[7];
  double result = (llvm::MachineInstr *)(*(uint64_t (**)(uint64_t))(*(void *)a2[2] + 176))(a2[2]);
  BOOL v9 = result;
  int v10 = *(_DWORD *)(v7 + 48);
  int v11 = *(_DWORD *)(v7 + 72);
  if (v11 == -1) {
    int v11 = 0;
  }
  if (v5[381]) {
    int v12 = 0;
  }
  else {
    int v12 = v11;
  }
  int v13 = (*(unsigned __int16 *)(*a2 + 18) >> 4) & 0x3FF;
  if (v13) {
    BOOL v14 = v13 == 8;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14 || v13 == 255)
  {
    int v15 = v10 - v12;
    unint64_t v16 = *(void *)(a3 + 48) & 0xFFFFFFFFFFFFFFF8;
    if (!v16 || (*(unsigned char *)v16 & 4) == 0)
    {
      while ((*(_WORD *)(v16 + 44) & 4) != 0)
        unint64_t v16 = *(void *)v16 & 0xFFFFFFFFFFFFFFF8;
    }
    sub_1CB952984(v6, v12 - v10, a3, (unint64_t *)v16);
    unint64_t v17 = *(void *)(a3 + 48) & 0xFFFFFFFFFFFFFFF8;
    if (!v17 || (*(unsigned char *)v17 & 4) == 0)
    {
      while ((*(_WORD *)(v17 + 44) & 4) != 0)
        unint64_t v17 = *(void *)v17 & 0xFFFFFFFFFFFFFFF8;
    }
    if (*(unsigned char *)(a2[4] + 2108)) {
      int v18 = 1;
    }
    else {
      int v18 = (*(unsigned __int16 *)(a2[1] + 1064) >> 4) & 1;
    }
    if (v10 != v12 && v18)
    {
      uint64_t v22 = v7;
      uint64_t v42 = 0;
      uint64_t v23 = sub_1CB84B588(a3, (unint64_t *)v17, &v42, *(void *)(v6 + 8) + 144);
      uint64_t v25 = v24;
      LODWORD(v34) = 9;
      *((void *)&v34 + 1) = 0;
      int v35 = 0;
      int v36 = v15;
      char v41 = 0;
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v37 = 0;
      LOBYTE(__p) = 0;
      int v26 = llvm::MachineFunction::addFrameInst(a2, &v34);
      LODWORD(v43[0]) = 16;
      v43[1] = 0;
      int v44 = v26;
      llvm::MachineInstr::addOperand(v25, v23, (const llvm::MachineOperand *)v43);
      if (v41 < 0) {
        operator delete(__p);
      }
      if (v37)
      {
        uint64_t v38 = v37;
        operator delete(v37);
      }
      if (v42) {
        llvm::MetadataTracking::untrack((uint64_t)&v42, v42);
      }
      if (*(unsigned char *)(a2[4] + 2108) || (*(_WORD *)(a2[1] + 1064) & 0x10) != 0)
      {
        uint64_t v27 = *(unsigned int **)(v22 + 80);
        for (uint64_t i = *(unsigned int **)(v22 + 88); v27 != i; v27 += 3)
        {
          DwarfRegNuuint64_t m = llvm::MCRegisterInfo::getDwarfRegNum((uint64_t)v9 + 8, *v27, 0);
          LODWORD(v34) = 11;
          *((void *)&v34 + 1) = 0;
          int v35 = DwarfRegNum;
          int v36 = 0;
          char v41 = 0;
          uint64_t v38 = 0;
          uint64_t v39 = 0;
          uint64_t v37 = 0;
          LOBYTE(__p) = 0;
          int v30 = llvm::MachineFunction::addFrameInst(a2, &v34);
          if (v41 < 0) {
            operator delete(__p);
          }
          if (v37)
          {
            uint64_t v38 = v37;
            operator delete(v37);
          }
          v43[0] = 0;
          uint64_t v31 = sub_1CB84B588(a3, (unint64_t *)v17, v43, *(void *)(v6 + 8) + 144);
          uint64_t v33 = v32;
          LODWORD(v34) = 16;
          *((void *)&v34 + 1) = 0;
          int v35 = v30;
          llvm::MachineInstr::addOperand(v32, v31, (const llvm::MachineOperand *)&v34);
          *((_WORD *)v33 + 22) = *((_WORD *)v33 + 22) & 0xC | 1;
          if (v43[0]) {
            llvm::MetadataTracking::untrack((uint64_t)v43, v43[0]);
          }
        }
      }
    }
    double result = (llvm::MachineInstr *)sub_1CBA65424((uint64_t)a2);
    if (result)
    {
      uint64_t v19 = *(void *)(a3 + 48);
      if (v5[318]) {
        int v20 = 4;
      }
      else {
        int v20 = 3;
      }
      unint64_t v21 = v19 & 0xFFFFFFFFFFFFFFF8;
      if ((v19 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(unsigned char *)v21 & 4) == 0)
      {
        while ((*(_WORD *)(v21 + 44) & 4) != 0)
          unint64_t v21 = *(void *)v21 & 0xFFFFFFFFFFFFFFF8;
      }
      return sub_1CB94BB3C(v6, a3, (unint64_t *)v21, 0, 189, v20, 1);
    }
  }
  return result;
}

uint64_t sub_1CB94C538()
{
  return 0;
}

void sub_1CB94C540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 56);
  if (!v5)
  {
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 8) + 216))(*(void *)(a2 + 8), a2 + 128, a2);
    *(void *)(a2 + 48) = v5;
  }
  if (!*(_DWORD *)(v6 + 32))
  {
    uint64_t v10 = *(void *)(v6 + 8);
    uint64_t v11 = -858993459 * ((unint64_t)(*(void *)(v6 + 16) - v10) >> 3);
    if (!v11) {
      goto LABEL_11;
    }
    int v12 = (uint64_t *)(v10 + 8);
    while (1)
    {
      uint64_t v13 = *v12;
      v12 += 5;
      if (v13 != -1) {
        break;
      }
      if (!--v11) {
        goto LABEL_11;
      }
    }
  }
  unsigned int v7 = sub_1CBAA048C(a2);
  if (a3)
  {
    unsigned int v8 = *(_DWORD *)(a3 + 56);
    if (v8 >= *(_DWORD *)(a3 + 60)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    BOOL v9 = (void *)(*(void *)(a3 + 48) + 16 * v8);
    *BOOL v9 = v7;
    v9[1] = 0;
    ++*(_DWORD *)(a3 + 56);
  }
LABEL_11:
  *(unsigned char *)(v5 + 454) = 1;
}

uint64_t sub_1CB94C648()
{
  return 0;
}

uint64_t sub_1CB94C650()
{
  return 0;
}

void sub_1CB94C658(uint64_t a1, uint64_t a2, void *a3)
{
  v14[7] = *MEMORY[0x1E4F143B8];
  llvm::TargetFrameLowering::determineCalleeSaves(a1, (uint64_t *)a2, (uint64_t)a3);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
  uint64_t v6 = (_WORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a2);
  if (v6)
  {
    unsigned int v7 = v6;
    if (*v6)
    {
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v5 + 88))(&v13, v5, a2);
      unsigned int v8 = (unsigned __int16)*v7;
      if (*v7)
      {
        BOOL v9 = *(void **)(a2 + 40);
        unsigned int v10 = 1;
        do
        {
          uint64_t v11 = 1 << v8;
          uint64_t v12 = v8 >> 6;
          if (((1 << v8) & *((void *)v13 + v12)) != 0
            && llvm::MachineRegisterInfo::isPhysRegModified(v9, v8, 0))
          {
            *(void *)(*a3 + 8 * v12) |= v11;
          }
          unsigned int v8 = (unsigned __int16)v7[v10++];
        }
        while (v8);
      }
      if (v13 != v14) {
        free(v13);
      }
    }
  }
}

unsigned char *sub_1CB94C7E0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v4 = a4;
  if (a4)
  {
    uint64_t v6 = a4;
    if ((*a4 & 4) != 0) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  while ((*((_WORD *)v6 + 22) & 8) != 0)
    uint64_t v6 = (unsigned char *)*((void *)v6 + 1);
LABEL_4:
  unsigned int v7 = (unsigned char *)*((void *)v6 + 1);
  if (v7 != a4)
  {
    do
    {
      unsigned int v8 = (unsigned char *)*((void *)v4 + 1);
      uint64_t v9 = *(void *)(*((void *)v4 + 3) + 32);
      if (v9)
      {
        uint64_t v10 = *(void *)(v9 + 728);
        if (v10) {
          (*(void (**)(uint64_t, unsigned char *))(*(void *)v10 + 32))(v10, v4);
        }
        uint64_t v11 = *((unsigned int *)v4 + 10);
        if (v11)
        {
          uint64_t v12 = *((void *)v4 + 4);
          uint64_t v13 = *(void *)(v9 + 40);
          uint64_t v14 = 32 * v11;
          do
          {
            if (!*(unsigned char *)v12)
            {
              uint64_t v15 = *(unsigned int *)(v12 + 4);
              if ((v15 & 0x80000000) != 0) {
                unint64_t v16 = (uint64_t *)(*(void *)(v13 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8);
              }
              else {
                unint64_t v16 = (uint64_t *)(*(void *)(v13 + 272) + 8 * v15);
              }
              uint64_t v17 = *v16;
              uint64_t v19 = *(void *)(v12 + 16);
              uint64_t v18 = *(void *)(v12 + 24);
              if (v12 != *v16) {
                unint64_t v16 = (uint64_t *)(v19 + 24);
              }
              uint64_t *v16 = v18;
              if (v18) {
                uint64_t v20 = v18;
              }
              else {
                uint64_t v20 = v17;
              }
              *(void *)(v20 + 16) = v19;
              *(void *)(v12 + 16) = 0;
              *(void *)(v12 + 24) = 0;
            }
            v12 += 32;
            v14 -= 32;
          }
          while (v14);
        }
      }
      *((void *)v4 + 3) = 0;
      unint64_t v21 = (unint64_t *)*((void *)v4 + 1);
      unint64_t v22 = *(void *)v4 & 0xFFFFFFFFFFFFFFF8;
      *unint64_t v21 = v22 | *v21 & 7;
      *(void *)(v22 + 8) = v21;
      *(void *)v4 &= 7uLL;
      *((void *)v4 + 1) = 0;
      uint64_t v23 = *(void *)(*(void *)(a3 + 40) + 32);
      uint64_t v24 = (void *)*((void *)v4 + 4);
      if (v24)
      {
        uint64_t v25 = v4[47];
        int v26 = (uint64_t *)(v23 + 232);
        if (*(_DWORD *)(v23 + 240) <= v25) {
          sub_1CC34BDE0(v23 + 232, v25 + 1);
        }
        uint64_t v27 = *v26;
        void *v24 = *(void *)(*v26 + 8 * v25);
        *(void *)(v27 + 8 * v25) = v24;
      }
      *(void *)uint64_t v4 = *(void *)(v23 + 224);
      *(void *)(v23 + 224) = v4;
      uint64_t v4 = v8;
    }
    while (v8 != v7);
  }
  return v7;
}

uint64_t sub_1CB94C98C(uint64_t a1, void *a2, int a3, _DWORD *a4)
{
  uint64_t v7 = a2[7];
  unsigned int v8 = (unsigned char *)a2[2];
  uint64_t v9 = *(void *)(*(uint64_t (**)(unsigned char *))(*(void *)v8 + 176))(v8);
  *a4 = (*(uint64_t (**)(void))(v9 + 552))();
  if (v8[381])
  {
    unsigned int v10 = *(_DWORD *)(v7 + 32);
    uint64_t v11 = *(void *)(v7 + 8);
    uint64_t v12 = *(void *)(v11 + 40 * (v10 + a3));
    if (a3 < 0 && (signed int)-v10 <= a3)
    {
      return *(_DWORD *)(v7 + 48) + (int)v12;
    }
    else
    {
      uint64_t v13 = -858993459 * ((unint64_t)(*(void *)(v7 + 16) - v11) >> 3) - v10;
      if (v13)
      {
        while (*(void *)(v11 + 40 * v10 + 8) == -1)
        {
          ++v10;
          if (!--v13) {
            goto LABEL_16;
          }
        }
        int v14 = *(_DWORD *)(v11 + 40 * v10);
      }
      else
      {
LABEL_16:
        int v14 = 0;
      }
      int v15 = v12 - v14;
      int v16 = *(_DWORD *)(v7 + 72);
      if (v16 == -1) {
        int v16 = 0;
      }
      return v15 + v16;
    }
  }
  else if (*(unsigned char *)(a2[2] + 381) {
         || (*(_WORD *)(*a2 + 18) & 0x3F70) != 0 && (*(_WORD *)(*a2 + 18) & 0x3FF0) != 0xFF0)
  }
  {
    return *(int *)(*(void *)(v7 + 8) + 40 * (*(_DWORD *)(v7 + 32) + a3));
  }
  else
  {
    int v19 = *(_DWORD *)(v7 + 72);
    if (v19 == -1) {
      int v19 = 0;
    }
    return v19
         + *(_DWORD *)(*(void *)(v7 + 8) + 40 * (*(_DWORD *)(v7 + 32) + a3))
         - *(_DWORD *)(v7 + 48);
  }
}

uint64_t sub_1CB94CB60(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 112))(*(void *)(a2 + 16));
  uint64_t v11 = a4;
  uint64_t v9 = *a4;
  uint64_t v10 = v11[1];
  if (v10 != v9)
  {
    uint64_t v13 = v8;
    int v14 = *(unsigned __int8 **)(a2 + 56);
    uint64_t v15 = v10;
    do
    {
      int v16 = 0;
      unsigned int v17 = *(_DWORD *)(v15 - 12);
      v15 -= 12;
      uint64_t v18 = *(uint64_t ***)(v7 + 240);
      unsigned int v19 = v17 - 0x40000000;
      unint64_t v20 = (unint64_t)v17 >> 3;
      int v21 = 1 << (v17 & 7);
      do
      {
        if (v19 >= 0xC0000001)
        {
          uint64_t v22 = **v18;
          if (v20 < *(unsigned __int16 *)(v22 + 22)
            && (v21 & *(unsigned char *)(*(void *)(v22 + 8) + v20)) != 0
            && (!v16
             || *v18 != v16
             && ((*(_DWORD *)(v16[1] + ((*(unsigned __int16 *)(v22 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v22 + 24)) & 1) != 0))
          {
            int v16 = *v18;
          }
        }
        ++v18;
      }
      while (v18 != *(uint64_t ***)(v7 + 248));
      uint64_t v24 = (unsigned int *)(*(void *)(a3 + 264)
                           + 24
                           * (*(unsigned __int16 *)(*v16 + 24)
                            + *(_DWORD *)(a3 + 272)
                            * ((*(void *)(a3 + 248) - *(void *)(a3 + 240)) >> 3))
                           + 4);
      unint64_t v23 = *v24;
      unsigned __int8 v25 = 63 - __clz((unint64_t)v24[1] >> 3);
      if (*(unsigned __int8 *)(v13 + 12) >= v25) {
        unsigned __int8 v26 = v25;
      }
      else {
        unsigned __int8 v26 = *(unsigned char *)(v13 + 12);
      }
      *(_DWORD *)(v10 - 8) = llvm::MachineFrameInfo::CreateStackObject(v14, v23 >> 3, v26, 1u, 0, 0);
      *(unsigned char *)(v10 - 3) = 0;
      uint64_t v10 = v15;
    }
    while (v15 != v9);
  }
  return 1;
}

void sub_1CB94CD28()
{
}

uint64_t sub_1CB94CDC4(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCBEBC8;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x600000001;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  *(void *)a1 = &unk_1F25EF2F8;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCBEBD0, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CB94CD28;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCBEBD0, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CB94CEBC()
{
}

void sub_1CB94CEF8(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  char v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    uint64_t v4 = a1;
    free(v1);
    a1 = v4;
  }
  int v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    uint64_t v5 = a1;
    free(v2);
    a1 = v5;
  }
  uint64_t v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CB94CFAC(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  int v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CB94D058()
{
  return "AGX2 Image Cache Bit Pass";
}

void sub_1CB94D068(uint64_t a1, uint64_t a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v3);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
}

uint64_t sub_1CB94D0C4(uint64_t a1, uint64_t *a2)
{
  v236[4] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2[2] + 297))
  {
    char v2 = 0;
    return v2 & 1;
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2[1] + 16))(a2[1], *a2);
  uint64_t v5 = (unsigned char *)v4;
  if (*(unsigned char *)(v4 + 298))
  {
    uint64_t v6 = *a2;
    int v226 = 0;
    char v2 = 0;
    BOOL v7 = sub_1CBA864D8(v4, v6, "OptimizeImageCacheBits", &v226) && v226 == 0;
    if (v7) {
      return v2 & 1;
    }
  }
  uint64_t v8 = *a2;
  int v226 = 0;
  int v9 = sub_1CBA864D8((int)v5, v8, "SampleWriteOverride", &v226);
  int v10 = v226;
  uint64_t v11 = *a2;
  int v226 = 0;
  int v12 = sub_1CBA864D8((int)v5, v11, "SampleReadOverride", &v226);
  int v13 = v226;
  uint64_t v14 = *a2;
  int v226 = 0;
  unsigned int v193 = v5;
  char v15 = sub_1CBA864D8((int)v5, v14, "ImageWriteBlockOverride", &v226);
  int v16 = v226;
  uint64_t v199 = a2;
  unsigned int v17 = *(llvm::Module **)(*a2 + 40);
  __int16 v227 = 0;
  __int16 v228 = 0;
  uint64_t v229 = v231;
  long long v230 = xmmword_1CD96EEC0;
  v231[1] = v232;
  v231[2] = 0x1000000000;
  memset(&v232[128], 0, 24);
  unint64_t v233 = v235;
  uint64_t v234 = 0x800000000;
  v235[16] = 0;
  v235[17] = v236;
  v235[18] = 0x800000000;
  sub_1CB94E404((uint64_t)&v226, (uint64_t)v17 + 272);
  uint64_t v223 = 1;
  uint64_t v18 = &v224;
  for (uint64_t i = 8; i != 136; i += 32)
    *(uint64_t *)((char *)&v223 + i) = -4096;
  v222[0] = 1;
  for (uint64_t j = 1; j != 17; ++j)
    LODWORD(v222[j]) = -1;
  BOOL v7 = v13 == 0;
  uint64_t v21 = v199[43];
  if (v7) {
    int v22 = 0;
  }
  else {
    int v22 = v12;
  }
  if (v10) {
    int v23 = v9;
  }
  else {
    int v23 = 0;
  }
  int v194 = v23;
  int v195 = v22;
  uint64_t v213 = 0;
  unsigned int v214 = 0;
  if (v16) {
    char v24 = v15;
  }
  else {
    char v24 = 0;
  }
  char v187 = v24;
  unsigned int v215 = 0;
  uint64_t v217 = 0;
  uint64_t v218 = 0;
  uint64_t v216 = 0;
  sub_1CD0FEC94(v17, (uint64_t)&v213);
  sub_1CD0FEFC4(v17, (uint64_t)&v213, 0);
  uint64_t v210 = v212;
  uint64_t v211 = 0xA00000000;
  unsigned __int8 v25 = v216;
  unint64_t v202 = v217;
  if (v216 == v217) {
    goto LABEL_81;
  }
  do
  {
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v21 + 408))(v21, *v25)) {
      goto LABEL_24;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 400))(v21, *v25);
    if (v26) {
      goto LABEL_24;
    }
    uint64_t v27 = *v25;
    if (!v215) {
      goto LABEL_32;
    }
    LODWORD(v28) = ((v27 >> 4) ^ (v27 >> 9)) & (v215 - 1);
    uint64_t v29 = v213 + 16 * v28;
    uint64_t v30 = *(void *)v29;
    if (*(void *)v29 != v27)
    {
      int v31 = 1;
      while (v30 != -4096)
      {
        int v32 = v28 + v31++;
        uint64_t v28 = v32 & (v215 - 1);
        uint64_t v30 = *(void *)(v213 + 16 * v28);
        if (v30 == v27)
        {
          uint64_t v29 = v213 + 16 * v28;
          goto LABEL_33;
        }
      }
LABEL_32:
      uint64_t v29 = v213 + 16 * v215;
    }
LABEL_33:
    if (v29 == v213 + 16 * v215) {
      uint64_t v33 = v217;
    }
    else {
      uint64_t v33 = &v216[2 * *(unsigned int *)(v29 + 8)];
    }
    uint64_t v34 = v33[1];
    uint64_t v35 = *(void *)(v27 + 24);
    if (*(unsigned char *)(v35 + 8) != 17
      || (uint64_t v36 = *(void *)(v34 - 8 * *(unsigned int *)(v34 + 8) + 8), *(unsigned char *)v36 == 1)
      && *(unsigned char *)(*(void *)(v36 + 128) + 16) == 16)
    {
      uint64_t v37 = 1;
LABEL_40:
      uint64_t v38 = v34 + 8;
      while (2)
      {
        uint64_t v39 = *(unsigned int *)(v34 + 8);
        uint64_t v40 = (void *)(v34 - 8 * v39);
        uint64_t v41 = v40[1];
        if (*(unsigned char *)(*(void *)(*(void *)(*v40 + 128) + 24) + 8) == 17)
        {
          if (*(unsigned char *)v41 != 1 || (uint64_t v42 = *(void *)(v41 + 128), *(unsigned char *)(v42 + 16) != 16))
          {
            uint64_t v43 = (void *)(*(void *)(v38 - 8 * v39) - 8 * *(unsigned int *)(*(void *)(v38 - 8 * v39) + 8));
            uint64_t v44 = *(void *)(*v43 + 128);
            uint64_t v45 = (unsigned int *)(v44 + 24);
            if (*(_DWORD *)(v44 + 32) >= 0x41u) {
              uint64_t v45 = *(unsigned int **)v45;
            }
            uint64_t v46 = *v45;
            uint64_t v47 = v43[1];
            goto LABEL_51;
          }
        }
        else
        {
          uint64_t v42 = *(void *)(v41 + 128);
        }
        uint64_t v48 = (unsigned int *)(v42 + 24);
        if (*(_DWORD *)(v42 + 32) >= 0x41u) {
          uint64_t v48 = *(unsigned int **)v48;
        }
        uint64_t v46 = *v48;
        uint64_t v47 = v40[2];
LABEL_51:
        uint64_t v49 = *(void *)(v47 + 128);
        uint64_t v50 = (void *)(v49 + 24);
        if (*(_DWORD *)(v49 + 32) >= 0x41u) {
          uint64_t v50 = (void *)*v50;
        }
        uint64_t v51 = (void *)*v50;
        uint64_t v52 = *v25;
        uint64_t v207 = 0;
        char v53 = sub_1CB94E71C((uint64_t)&v223, v52, &v207);
        int v54 = (void *)v207;
        if (v53)
        {
          char v59 = (_DWORD *)(v207 + 16);
          unint64_t v57 = *(unsigned int *)(v207 + 16);
          uint64_t v58 = (void *)(v207 + 8);
          if (v57 >= *(unsigned int *)(v207 + 20)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
        }
        else
        {
          unsigned int v55 = v223 >> 1;
          if (v223) {
            unsigned int v56 = 4;
          }
          else {
            unsigned int v56 = v225;
          }
          if (4 * v55 + 4 >= 3 * v56)
          {
            v56 *= 2;
          }
          else if (v56 + ~v55 - HIDWORD(v223) > v56 >> 3)
          {
            goto LABEL_59;
          }
          sub_1CB94E7C8((uint64_t)&v223, v56);
          uint64_t v207 = 0;
          sub_1CB94E71C((uint64_t)&v223, v52, &v207);
          int v54 = (void *)v207;
LABEL_59:
          LODWORD(v223) = v223 + 2;
          if (*v54 != -4096) {
            --HIDWORD(v223);
          }
          unint64_t v57 = 0;
          *int v54 = v52;
          v54[1] = v54 + 3;
          uint64_t v58 = v54 + 1;
          v54[2] = 0x100000000;
          char v59 = v54 + 2;
        }
        *(_DWORD *)(*v58 + 4 * v57) = v51;
        ++*v59;
        if (v46 == 6) {
          uint64_t v60 = 0x200000000;
        }
        else {
          uint64_t v60 = 0x100000000;
        }
        if (v211 >= (unint64_t)HIDWORD(v211)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v18 = &v224;
        *((void *)v210 + v211) = v60 | v51;
        LODWORD(v211) = v211 + 1;
        v38 += 8;
        if (!--v37) {
          goto LABEL_24;
        }
        continue;
      }
    }
    uint64_t v37 = *(unsigned int *)(v35 + 32);
    if (*(_DWORD *)(v35 + 32)) {
      goto LABEL_40;
    }
LABEL_24:
    v25 += 2;
  }
  while (v25 != v202);
  int v61 = (int *)v210;
  if (v211)
  {
    uint64_t v62 = 8 * v211;
    do
    {
      char v63 = *((unsigned char *)v61 + 4);
      uint64_t v64 = sub_1CB94EBC4(v222, v61);
      *(unsigned char *)(v64 + 4) |= v63;
      v61 += 2;
      v62 -= 8;
    }
    while (v62);
    int v61 = (int *)v210;
  }
  if (v61 != (int *)v212) {
    free(v61);
  }
  unsigned __int8 v25 = v216;
LABEL_81:
  if (v25)
  {
    uint64_t v217 = v25;
    operator delete(v25);
  }
  uint64_t v65 = 8;
  MEMORY[0x1D25D9CD0](v213, 8);
  char v219 = v221;
  uint64_t v220 = 0x500000000;
  uint64_t v213 = 1;
  do
  {
    *(uint64_t *)((char *)&v213 + v65) = -4096;
    v65 += 32;
  }
  while (v65 != 136);
  uint64_t v210 = v212;
  uint64_t v211 = 0x1400000000;
  uint64_t v207 = 1;
  for (uint64_t k = 8; k != 136; k += 8)
    *(_DWORD *)((char *)&v207 + k) = -1;
  uint64_t v67 = (uint64_t *)v199[41];
  uint64_t v189 = v199 + 40;
  int v68 = v193;
  if (v67 == v199 + 40) {
    goto LABEL_301;
  }
  int v69 = 0;
  char v203 = 0;
  int v200 = 0;
  do
  {
    unsigned int v70 = v67 + 6;
    int v191 = v67;
    uint64_t v71 = v67[7];
    char v197 = v67 + 6;
    if ((uint64_t *)v71 != v67 + 6)
    {
      while (1)
      {
        int v72 = *(unsigned __int16 **)(v71 + 16);
        int v73 = *v72;
        if (v73 == 8264)
        {
          if (*(void *)(*(void *)(v71 + 32) + 32 * sub_1CBC7A3F8(8264, 0x52u) + 16) == 3)
          {
            if (v220 >= (unint64_t)HIDWORD(v220)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v219 + v220) = v71;
            LODWORD(v220) = v220 + 1;
          }
          goto LABEL_216;
        }
        unint64_t v74 = *((void *)v72 + 2);
        unsigned int v75 = v73 - 2862;
        if ((v73 - 2862) >= 0xB4 && (*((void *)v72 + 2) & 2) == 0) {
          goto LABEL_216;
        }
        uint64_t v77 = *(void *)(v71 + 48);
        if ((v77 & 7) != 0)
        {
          unint64_t v78 = *(void *)((v77 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else
        {
          unint64_t v78 = v77 & 0xFFFFFFFFFFFFFFF8;
          *(void *)(v71 + 48) = v77 & 0xFFFFFFFFFFFFFFF8;
        }
        if ((!v195 || (v72[8] & 2) == 0) && (!v194 || *v72 - 2970 >= 0x48))
        {
          __int16 v79 = *(_WORD *)(v78 + 32);
          if ((v79 & 0x80) != 0)
          {
            int v80 = v193[383];
            unsigned int v81 = sub_1CBC7A3F8(*v72, 0x38u);
            BOOL v7 = v80 == 0;
            int v68 = v193;
            uint64_t v82 = 7;
            if (v7) {
              uint64_t v82 = 5;
            }
            *(void *)(*(void *)(v71 + 32) + 32 * v81 + 16) = v82;
          }
          else if ((v79 & 0x40) != 0)
          {
            goto LABEL_216;
          }
        }
        if ((*(void *)v78 & 4) == 0
          || (unint64_t v83 = *(void *)v78 & 0xFFFFFFFFFFFFFFF8) == 0
          || (uint64_t v84 = *(void *)(v83 + 16)) == 0)
        {
          int v98 = v223 & 1;
          uint64_t v99 = v224;
          if (v223) {
            uint64_t v100 = &v224;
          }
          else {
            uint64_t v100 = v224;
          }
          unsigned int v101 = v225;
          if (v223) {
            uint64_t v102 = 4;
          }
          else {
            uint64_t v102 = v225;
          }
          uint64_t v103 = &v100[4 * v102];
          unsigned int v88 = -1;
          goto LABEL_172;
        }
        UnderlyingObject = llvm::getUnderlyingObject(*(llvm **)(v83 + 16), (const llvm::Value *)6);
        uint64_t v86 = UnderlyingObject;
        unsigned int v87 = *((unsigned __int8 *)UnderlyingObject + 16);
        unsigned int v88 = v87 <= 3 ? 0 : -1;
        if (v87 != 84) {
          break;
        }
        uint64_t v89 = *((void *)UnderlyingObject - 4);
        if (!v89
          || *(unsigned char *)(v89 + 16)
          || *(void *)(v89 + 24) != *((void *)UnderlyingObject + 9)
          || (*(unsigned char *)(v89 + 33) & 0x20) == 0)
        {
          break;
        }
        if (*(_DWORD *)(v89 + 36) == 1822)
        {
          uint64_t v86 = llvm::getUnderlyingObject(*((llvm **)UnderlyingObject - 4 * (*((_DWORD *)UnderlyingObject + 5) & 0x7FFFFFF)), (const llvm::Value *)6);
          unsigned int v87 = *((unsigned __int8 *)v86 + 16);
          if (v86) {
            BOOL v104 = v87 == 16;
          }
          else {
            BOOL v104 = 0;
          }
          if (!v104) {
            goto LABEL_164;
          }
          unsigned int v88 = -1;
        }
LABEL_166:
        uint64_t v206 = 0;
        char v109 = sub_1CB94E71C((uint64_t)&v223, (uint64_t)v86, &v206);
        int v98 = v223 & 1;
        if (v109)
        {
          uint64_t v103 = v206;
        }
        else
        {
          if (v223)
          {
            uint64_t v110 = &v224;
            uint64_t v111 = 4;
          }
          else
          {
            uint64_t v110 = v224;
            uint64_t v111 = v225;
          }
          uint64_t v103 = &v110[4 * v111];
        }
        uint64_t v99 = v224;
        unsigned int v101 = v225;
LABEL_172:
        v200 |= (v74 >> 1) & 1;
        v203 |= v75 < 0xB4;
        BOOL v112 = v98 == 0;
        if (v98) {
          unsigned int v113 = &v224;
        }
        else {
          unsigned int v113 = v99;
        }
        if (v112) {
          uint64_t v114 = v101;
        }
        else {
          uint64_t v114 = 4;
        }
        if (v103 == &v113[4 * v114])
        {
          if (v211 >= (unint64_t)HIDWORD(v211)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          unsigned int v70 = v197;
          *((void *)v210 + v211) = v71;
          LODWORD(v211) = v211 + 1;
          v69 |= v75 < 0xB4;
        }
        else
        {
          unsigned int v115 = v73 - 2970;
          if (v88 != -1)
          {
            int v116 = *(_DWORD *)(v103[1] + 4 * v88);
            int v117 = sub_1CB94E344((uint64_t)v222, v116);
            if (v68[318])
            {
              if (v115 < 0xFFFFFF94) {
                int v118 = v117;
              }
              else {
                int v118 = 0;
              }
              unsigned int v70 = v197;
              if (v118 != 1) {
                goto LABEL_212;
              }
            }
            else
            {
              unsigned int v70 = v197;
              if ((sub_1CB94E344((uint64_t)v222, v116) & 1) == 0)
              {
LABEL_212:
                LODWORD(v206) = v116;
                uint64_t v139 = sub_1CB94EBC4(&v207, (int *)&v206);
                if ((v74 & 2) != 0) {
                  char v140 = 1;
                }
                else {
                  char v140 = 2;
                }
                *(unsigned char *)(v139 + 4) |= v140;
                goto LABEL_216;
              }
            }
            if (v211 >= (unint64_t)HIDWORD(v211)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v210 + v211) = v71;
            LODWORD(v211) = v211 + 1;
            uint64_t v206 = (void *)v71;
            uint64_t v137 = sub_1CB94EFA4(&v213, (uint64_t *)&v206);
            unint64_t v138 = *((unsigned int *)v137 + 4);
            if (v138 >= *((unsigned int *)v137 + 5)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(_DWORD *)(v137[1] + 4 * v138) = v116;
            ++*((_DWORD *)v137 + 4);
            goto LABEL_212;
          }
          uint64_t v119 = *((unsigned int *)v103 + 4);
          if (v119)
          {
            uint64_t v188 = (const void **)(v103 + 1);
            int v190 = v69;
            char v120 = 0;
            uint64_t v121 = (int *)v103[1];
            if ((v74 & 2) != 0) {
              char v122 = 1;
            }
            else {
              char v122 = 2;
            }
            uint64_t v123 = v68;
            uint64_t v124 = 4 * v119;
            do
            {
              int v126 = *v121++;
              int v125 = v126;
              int v127 = v123[318];
              char v128 = sub_1CB94E344((uint64_t)v222, v126);
              if (v115 < 0xFFFFFF94) {
                char v129 = v128;
              }
              else {
                char v129 = 0;
              }
              if (!v127) {
                char v129 = v128;
              }
              v120 |= v129;
              LODWORD(v206) = v125;
              uint64_t v130 = sub_1CB94EBC4(&v207, (int *)&v206);
              *(unsigned char *)(v130 + 4) |= v122;
              v124 -= 4;
            }
            while (v124);
            uint64_t v18 = &v224;
            int v68 = v123;
            int v69 = v190;
            if (v120)
            {
              if (v211 >= (unint64_t)HIDWORD(v211)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v210 + v211) = v71;
              LODWORD(v211) = v211 + 1;
              uint64_t v206 = (void *)v71;
              unsigned int v131 = sub_1CB94EFA4(&v213, (uint64_t *)&v206);
              uint64_t v132 = (void **)(v131 + 1);
              if (v131 + 1 != v188)
              {
                uint64_t v133 = v131;
                uint64_t v134 = *((unsigned int *)v103 + 4);
                uint64_t v135 = *((unsigned int *)v131 + 4);
                if (v135 >= v134)
                {
                  if (v134) {
                    memmove(*v132, *v188, 4 * v134);
                  }
                }
                else
                {
                  if (*((_DWORD *)v131 + 5) < v134)
                  {
                    *((_DWORD *)v131 + 4) = 0;
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  if (v135) {
                    memmove(*v132, *v188, 4 * v135);
                  }
                  else {
                    uint64_t v135 = 0;
                  }
                  uint64_t v136 = *((unsigned int *)v103 + 4);
                  if (v135 != v136) {
                    memcpy((char *)*v132 + 4 * v135, (char *)*v188 + 4 * v135, (unsigned char *)*v188 + 4 * v136 - ((unsigned char *)*v188 + 4 * v135));
                  }
                }
                *((_DWORD *)v133 + 4) = v134;
                int v68 = v193;
              }
            }
            unsigned int v70 = v197;
            if (!v71)
            {
LABEL_225:
              while ((*(_WORD *)(v71 + 44) & 8) != 0)
                uint64_t v71 = *(void *)(v71 + 8);
              goto LABEL_226;
            }
          }
          else
          {
            unsigned int v70 = v197;
          }
        }
LABEL_216:
        if ((*(unsigned char *)v71 & 4) == 0) {
          goto LABEL_225;
        }
LABEL_226:
        uint64_t v71 = *(void *)(v71 + 8);
        if ((uint64_t *)v71 == v70) {
          goto LABEL_236;
        }
      }
      int v90 = *(unsigned __int8 *)(v84 + 16);
      if (v90 == 62 || v90 == 5 && *(_WORD *)(v84 + 18) == 34)
      {
        int v91 = *(_DWORD *)(v84 + 20);
        if ((v91 & 0x7FFFFFFu) >= 3)
        {
          BOOL v7 = v90 == 62;
          uint64_t v92 = 24;
          if (v7) {
            uint64_t v92 = 64;
          }
          uint64_t v93 = *(void *)(v84 + v92);
          if (v93 && *(unsigned char *)(v93 + 8) == 17)
          {
            uint64_t v94 = *(void *)(v93 + 24);
            if (v94 && *(unsigned char *)(v94 + 8) == 17)
            {
              uint64_t v96 = *(void *)(v94 + 24);
              if (v96)
              {
                if (*(unsigned char *)(v96 + 8) == 2)
                {
                  uint64_t v97 = (v91 & 0x40000000) != 0 ? *(void *)(v84 - 8) : v84 - 32 * (v91 & 0x7FFFFFF);
                  uint64_t v105 = *(void *)(v97 + 64);
                  if (v105 && *(unsigned char *)(v105 + 16) == 16)
                  {
                    uint64_t v107 = (void *)(v105 + 24);
                    if (*(_DWORD *)(v105 + 32) >= 0x41u) {
                      uint64_t v107 = (void *)*v107;
                    }
                    uint64_t v108 = (void *)*v107;
                    if (v108 != -1) {
                      unsigned int v88 = v108;
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_164:
      if (v87 >= 4) {
        unsigned int v88 = -1;
      }
      goto LABEL_166;
    }
LABEL_236:
    uint64_t v67 = (uint64_t *)v191[1];
  }
  while (v67 != v189);
  if ((v203 & 1) == 0)
  {
LABEL_301:
    char v2 = 0;
    goto LABEL_302;
  }
  if (v211)
  {
    char v2 = 0;
    char v192 = 0;
    uint64_t v141 = (uint64_t *)v210;
    uint64_t v204 = (uint64_t *)((char *)v210 + 8 * v211);
    char v201 = v200 ^ 1;
    int v196 = v195 ^ 1;
    char v198 = v69 ^ 1;
    while (1)
    {
      uint64_t v142 = *v141;
      uint64_t v205 = v142;
      uint64_t v206 = 0;
      char v143 = sub_1CB94F014((uint64_t)&v213, v142, &v206);
      long long v144 = v206;
      if ((v143 & 1) == 0) {
        break;
      }
      uint64_t v145 = *((unsigned int *)v206 + 4);
      if (!v145) {
        goto LABEL_253;
      }
      uint64_t v146 = (int *)v206[1];
      uint64_t v147 = 4 * v145;
      char v148 = 1;
      char v149 = 1;
      do
      {
        uint64_t v150 = sub_1CB94E3A4((uint64_t)&v207, *v146);
        if (v207) {
          uint64_t v151 = &v208;
        }
        else {
          uint64_t v151 = v208;
        }
        unsigned int v152 = v209;
        if (v207) {
          unsigned int v152 = 16;
        }
        if (&v151[v152] != (void *)v150)
        {
          int v153 = *(unsigned char *)(v150 + 4) & 3;
          v149 &= v153 == 2;
          v148 &= v153 == 1;
        }
        ++v146;
        v147 -= 4;
      }
      while (v147);
      LODWORD(v145) = *((_DWORD *)v144 + 4);
      uint64_t v18 = &v224;
LABEL_254:
      BOOL v155 = v145 != 0;
      unsigned __int8 v156 = (v155 | v201) & v149;
      unsigned __int8 v157 = v198 & v148 & v155;
      unsigned int v158 = *(unsigned __int16 **)(v142 + 16);
      int v159 = *v158;
      uint64_t v160 = *(void *)(v142 + 32) + 32 * sub_1CBC7A3F8(v159, 0x38u);
      unsigned int v163 = *(_DWORD *)(v160 + 16);
      unsigned int v161 = (void *)(v160 + 16);
      unsigned int v162 = v163;
      uint64_t v164 = *((void *)v158 + 2);
      if (((v164 & 2) == 0) | (v156 | v157) & 1) {
        unsigned int v165 = v162;
      }
      else {
        unsigned int v165 = 5;
      }
      if (!v193[318])
      {
        if ((v159 - 2970) >= 0x48)
        {
          if ((((v159 - 2862) < 0x6C) & v156) == 0) {
            goto LABEL_265;
          }
        }
        else if ((v156 & 1) == 0)
        {
          if ((v162 & 3) > (v165 & 3)) {
            unsigned int v165 = v162;
          }
          goto LABEL_270;
        }
        unsigned int v165 = 1;
      }
LABEL_265:
      if ((v162 & 3) > (v165 & 3)) {
        unsigned int v165 = v162;
      }
      if (v156)
      {
        int v166 = v193[373];
        if (v193[373]) {
          goto LABEL_273;
        }
        goto LABEL_274;
      }
LABEL_270:
      if (v157)
      {
        int v166 = 0;
        goto LABEL_274;
      }
      int v166 = v193[372];
      if (v193[372])
      {
LABEL_273:
        unsigned int v165 = 7;
        int v166 = 1;
      }
LABEL_274:
      BOOL v7 = (v164 & 2) == 0;
      int v167 = v196;
      if (v7) {
        int v167 = 1;
      }
      if (v167 == 1)
      {
        if (v194)
        {
          char v168 = v187;
          if ((v159 - 3042) >= 0xFFFFFFB8) {
            char v168 = 0;
          }
          if (v168)
          {
            if ((v159 - 2862) >= 0x6C) {
              goto LABEL_290;
            }
          }
          else if ((v159 - 3042) < 0xFFFFFFB8)
          {
            goto LABEL_290;
          }
        }
        else
        {
          char v169 = v187;
          if ((v159 - 2862) >= 0x6C) {
            char v169 = 0;
          }
          if ((v169 & 1) == 0) {
            goto LABEL_290;
          }
        }
      }
      if (v166) {
        unsigned int v165 = 7;
      }
      else {
        unsigned int v165 = v162;
      }
LABEL_290:
      if (v193[325] && ((v159 - 2970) < 0x48 || (v159 - 2862) <= 0x6B) && v165 == 1) {
        char v192 = 1;
      }
      if (v165 != v162)
      {
        *unsigned int v161 = v165;
        char v2 = 1;
      }
      if (++v141 == v204)
      {
        if ((v192 & 1) == 0) {
          goto LABEL_337;
        }
        goto LABEL_302;
      }
    }
    uint64_t v154 = sub_1CB94F0C0(&v213, &v205, v206);
    LODWORD(v145) = 0;
    void *v154 = v142;
    v154[1] = v154 + 3;
    v154[2] = 0x100000000;
LABEL_253:
    char v149 = 1;
    char v148 = 1;
    goto LABEL_254;
  }
  char v2 = 0;
LABEL_337:
  if (v220)
  {
    unint64_t v184 = (llvm::MachineInstr **)v219;
    uint64_t v185 = 8 * v220;
    do
    {
      BOOL v186 = *v184++;
      llvm::MachineInstr::eraseFromParent(v186);
      v185 -= 8;
    }
    while (v185);
    char v2 = 1;
  }
LABEL_302:
  if ((v207 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v208, 4);
  }
  if (v210 != v212) {
    free(v210);
  }
  char v170 = v213;
  if (v213)
  {
    uint64_t v171 = 4;
    int v172 = &v214;
LABEL_308:
    uint64_t v173 = v172 + 3;
    uint64_t v174 = 32 * v171;
    do
    {
      uint64_t v175 = *(v173 - 3);
      if (v175 != -4096 && v175 != -8192)
      {
        uint64_t v176 = (void *)*(v173 - 2);
        if (v173 != v176) {
          free(v176);
        }
      }
      v173 += 4;
      v174 -= 32;
    }
    while (v174);
    char v170 = v213;
  }
  else
  {
    uint64_t v171 = v215;
    if (v215)
    {
      int v172 = v214;
      goto LABEL_308;
    }
  }
  if ((v170 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v214, 8);
  }
  if (v219 != v221) {
    free(v219);
  }
  if ((v222[0] & 1) == 0) {
    MEMORY[0x1D25D9CD0](v222[1], 4);
  }
  char v177 = v223;
  if (v223)
  {
    uint64_t v178 = 4;
LABEL_323:
    unint64_t v179 = v18 + 3;
    uint64_t v180 = 32 * v178;
    do
    {
      uint64_t v181 = *(v179 - 3);
      if (v181 != -4096 && v181 != -8192)
      {
        uint64_t v182 = (void *)*(v179 - 2);
        if (v179 != v182) {
          free(v182);
        }
      }
      v179 += 4;
      v180 -= 32;
    }
    while (v180);
    char v177 = v223;
  }
  else
  {
    uint64_t v178 = v225;
    if (v225)
    {
      uint64_t v18 = v224;
      goto LABEL_323;
    }
  }
  if ((v177 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v224, 8);
  }
  llvm::DataLayout::~DataLayout((llvm::DataLayout *)&v226);
  return v2 & 1;
}

uint64_t sub_1CB94E344(uint64_t a1, int a2)
{
  uint64_t v3 = sub_1CB94E3A4(a1, a2);
  if (*(_DWORD *)a1) {
    uint64_t v4 = a1 + 8;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  unsigned int v5 = *(_DWORD *)(a1 + 16);
  if (*(_DWORD *)a1) {
    unsigned int v5 = 16;
  }
  if (v4 + 8 * v5 == v3) {
    return 0;
  }
  else {
    return (*(unsigned __int8 *)(v3 + 4) >> 1) & 1;
  }
}

uint64_t sub_1CB94E3A4(uint64_t a1, int a2)
{
  uint64_t v6 = 0;
  if (sub_1CB94ECB0(a1, a2, &v6)) {
    return v6;
  }
  if (*(unsigned char *)a1)
  {
    uint64_t v4 = a1 + 8;
    uint64_t v5 = 16;
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 8 * v5;
}

uint64_t sub_1CB94E404(uint64_t a1, uint64_t a2)
{
  llvm::DataLayout::clear(a1);
  std::string::operator=((std::string *)(a1 + 208), (const std::string *)(a2 + 208));
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(void *)(a1 + 12) = *(void *)(a2 + 12);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  if (a1 != a2)
  {
    uint64_t v4 = (void **)(a1 + 32);
    size_t v5 = *(void *)(a2 + 40);
    size_t v6 = *(void *)(a1 + 40);
    if (v6 >= v5)
    {
      if (v5) {
        memmove(*v4, *(const void **)(a2 + 32), *(void *)(a2 + 40));
      }
    }
    else
    {
      if (*(void *)(a1 + 48) < v5)
      {
        *(void *)(a1 + 40) = 0;
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      if (v6)
      {
        size_t v25 = *(void *)(a1 + 40);
        memmove(*v4, *(const void **)(a2 + 32), v6);
        size_t v6 = v25;
      }
      uint64_t v7 = *(void *)(a2 + 40);
      if (v6 != v7) {
        memcpy((char *)*v4 + v6, (const void *)(*(void *)(a2 + 32) + v6), v7 - v6);
      }
    }
    *(void *)(a1 + 40) = v5;
    uint64_t v8 = (void **)(a1 + 64);
    uint64_t v9 = *(unsigned int *)(a2 + 72);
    uint64_t v10 = *(unsigned int *)(a1 + 72);
    if (v10 >= v9)
    {
      if (v9) {
        memmove(*v8, *(const void **)(a2 + 64), 8 * v9 - 2);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 76) < v9)
      {
        *(_DWORD *)(a1 + 72) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v10)
      {
        uint64_t v24 = *(unsigned int *)(a1 + 72);
        memmove(*v8, *(const void **)(a2 + 64), 8 * v10 - 2);
        uint64_t v11 = v24;
      }
      else
      {
        uint64_t v11 = 0;
      }
      uint64_t v12 = *(unsigned int *)(a2 + 72);
      if (v11 != v12) {
        memcpy((char *)*v8 + 8 * v11, (const void *)(*(void *)(a2 + 64) + 8 * v11), 8 * v12 - 8 * v11);
      }
    }
    *(_DWORD *)(a1 + 72) = v9;
    int v13 = (void **)(a1 + 232);
    uint64_t v14 = *(unsigned int *)(a2 + 240);
    uint64_t v15 = *(unsigned int *)(a1 + 240);
    if (v15 >= v14)
    {
      if (v14) {
        memmove(*v13, *(const void **)(a2 + 232), 16 * v14);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 244) < v14)
      {
        *(_DWORD *)(a1 + 240) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v15)
      {
        uint64_t v23 = *(unsigned int *)(a1 + 240);
        memmove(*v13, *(const void **)(a2 + 232), 16 * v15);
        uint64_t v16 = v23;
      }
      else
      {
        uint64_t v16 = 0;
      }
      uint64_t v17 = *(unsigned int *)(a2 + 240);
      if (v16 != v17) {
        memcpy((char *)*v13 + 16 * v16, (const void *)(*(void *)(a2 + 232) + 16 * v16), 16 * v17 - 16 * v16);
      }
    }
    *(_DWORD *)(a1 + 240) = v14;
    uint64_t v18 = (void **)(a1 + 384);
    uint64_t v19 = *(unsigned int *)(a2 + 392);
    uint64_t v20 = *(unsigned int *)(a1 + 392);
    if (v20 >= v19)
    {
      if (v19) {
        memmove(*v18, *(const void **)(a2 + 384), 4 * v19);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 396) < v19)
      {
        *(_DWORD *)(a1 + 392) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v20) {
        memmove(*v18, *(const void **)(a2 + 384), 4 * v20);
      }
      else {
        uint64_t v20 = 0;
      }
      uint64_t v21 = *(unsigned int *)(a2 + 392);
      if (v20 != v21) {
        memcpy((char *)*v18 + 4 * v20, (const void *)(*(void *)(a2 + 384) + 4 * v20), 4 * v21 - 4 * v20);
      }
    }
    *(_DWORD *)(a1 + 392) = v19;
  }
  return a1;
}

uint64_t sub_1CB94E71C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  uint64_t v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v3 + 32 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      int v13 = v6 + v10++;
      uint64_t v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 32 * v6);
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_8;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

void sub_1CB94E7C8(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = a2;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    int v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40) {
      unsigned int v2 = v6 + 1;
    }
    else {
      unsigned int v2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v17 = *(unsigned int *)(a1 + 16);
    if (v2 <= 4)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      *(void *)(a1 + 8) = operator new(32 * v2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v2;
    }
    sub_1CB94EA40(a1, v16, v16 + 32 * v17);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v7 = 0;
  uint64_t v8 = v18;
  do
  {
    uint64_t v9 = a1 + v7;
    uint64_t v10 = *(void *)(a1 + v7 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *((void *)v8 + 1) = v8 + 24;
      *(void *)uint64_t v8 = v10;
      *((void *)v8 + 2) = 0x100000000;
      unsigned int v11 = *(_DWORD *)(v9 + 24);
      BOOL v12 = *(void **)(v9 + 16);
      if (v11) {
        BOOL v13 = a1 + v7 + 8 == (void)v8;
      }
      else {
        BOOL v13 = 1;
      }
      if (!v13)
      {
        uint64_t v14 = a1 + v7;
        uint64_t v15 = a1 + v7 + 32;
        if ((void *)v15 == v12)
        {
          if (v11 >= 2) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memcpy(v8 + 24, v12, 4 * *(unsigned int *)(v9 + 24));
          *((_DWORD *)v8 + 4) = v11;
          BOOL v12 = *(void **)(v9 + 16);
        }
        else
        {
          *((void *)v8 + 1) = v12;
          *((_DWORD *)v8 + 4) = v11;
          *((_DWORD *)v8 + 5) = *(_DWORD *)(v14 + 28);
          *(void *)(v9 + 16) = v15;
          *(_DWORD *)(v14 + 28) = 0;
          BOOL v12 = (void *)(a1 + v7 + 32);
        }
        *(_DWORD *)(v9 + 24) = 0;
      }
      v8 += 32;
      if ((void *)(a1 + v7 + 32) != v12) {
        free(v12);
      }
    }
    v7 += 32;
  }
  while (v7 != 128);
  if (v2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    *(void *)(a1 + 8) = operator new(32 * v2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v2;
  }
  sub_1CB94EA40(a1, (uint64_t)v18, (uint64_t)v8);
}

void sub_1CB94EA40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  int v6 = *(_DWORD *)a1;
  *(void *)a1 = *(_DWORD *)a1 & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(a1 + 8);
    uint64_t v9 = (void *)(a1 + 136);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (!v7) {
      goto LABEL_5;
    }
    uint64_t v8 = *(void **)(a1 + 8);
    uint64_t v9 = &v8[4 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 4;
  }
  while (v8 != v9);
LABEL_5:
  if (a2 != a3)
  {
    do
    {
      uint64_t v10 = *(void *)v4;
      if ((*(void *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v17 = 0;
        sub_1CB94E71C(a1, v10, &v17);
        unsigned int v11 = v17;
        void *v17 = *(void *)v4;
        v11[1] = v11 + 3;
        v11[2] = 0x100000000;
        unsigned int v12 = *(_DWORD *)(v4 + 16);
        if ((void *)v4 != v11 && v12 != 0)
        {
          uint64_t v14 = *(const void **)(v4 + 8);
          if ((const void *)(v4 + 24) == v14)
          {
            if (v12 >= 2) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(v11 + 3, v14, 4 * *(unsigned int *)(v4 + 16));
            *((_DWORD *)v11 + 4) = v12;
          }
          else
          {
            v11[1] = v14;
            int v16 = *(_DWORD *)(v4 + 20);
            *((_DWORD *)v11 + 4) = v12;
            *((_DWORD *)v11 + 5) = v16;
            *(void *)(v4 + 8) = v4 + 24;
            *(_DWORD *)(v4 + 20) = 0;
          }
          *(_DWORD *)(v4 + 16) = 0;
        }
        *(_DWORD *)a1 += 2;
        uint64_t v15 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v15) {
          free(v15);
        }
      }
      v4 += 32;
    }
    while (v4 != a3);
  }
}

uint64_t sub_1CB94EBC4(_DWORD *a1, int *a2)
{
  uint64_t v8 = 0;
  char v4 = sub_1CB94ECB0((uint64_t)a1, *a2, &v8);
  uint64_t result = v8;
  if (v4) {
    return result;
  }
  int v6 = *a1 >> 1;
  if (*a1) {
    unsigned int v7 = 16;
  }
  else {
    unsigned int v7 = a1[4];
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_11;
  }
  if (v7 + ~v6 - a1[1] <= v7 >> 3)
  {
LABEL_11:
    sub_1CB94ED5C((uint64_t)a1, v7);
    uint64_t v8 = 0;
    sub_1CB94ECB0((uint64_t)a1, *a2, &v8);
    uint64_t result = v8;
  }
  *a1 += 2;
  if (*(_DWORD *)result != -1) {
    --a1[1];
  }
  *(_DWORD *)uint64_t result = *a2;
  *(unsigned char *)(result + 4) = 0;
  return result;
}

uint64_t sub_1CB94ECB0(uint64_t a1, int a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 16;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      unsigned int v7 = 0;
      uint64_t result = 0;
      goto LABEL_5;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & (37 * a2);
  unsigned int v7 = (_DWORD *)(v3 + 8 * v6);
  int v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -1)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -2;
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      unsigned int v7 = (_DWORD *)(v3 + 8 * (v13 & v5));
      int v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_5;
      }
    }
    uint64_t result = 0;
    if (v10) {
      unsigned int v7 = v10;
    }
  }
LABEL_5:
  *a3 = v7;
  return result;
}

uint64_t sub_1CB94ED5C(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x11)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 0x10)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)4uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CB94EEE4(a1, v11, v11 + 8 * v12);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  unsigned int v7 = v14;
  do
  {
    unsigned int v8 = *(_DWORD *)(a1 + v6 + 8);
    if (v8 <= 0xFFFFFFFD)
    {
      *(_DWORD *)unsigned int v7 = v8;
      v7[4] = *(unsigned char *)(a1 + v6 + 12);
      v7 += 8;
    }
    v6 += 8;
  }
  while (v6 != 128);
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)4uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CB94EEE4(a1, (uint64_t)v14, (uint64_t)v7);
}

uint64_t sub_1CB94EEE4(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    unsigned int v8 = (_DWORD *)(result + 8);
    uint64_t v9 = (_DWORD *)(result + 136);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    unsigned int v8 = *(_DWORD **)(result + 8);
    uint64_t v9 = &v8[2 * v7];
  }
  do
  {
    *unsigned int v8 = -1;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    int v10 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 <= 0xFFFFFFFD)
    {
      uint64_t v12 = 0;
      uint64_t result = sub_1CB94ECB0((uint64_t)v5, v10, &v12);
      uint64_t v11 = v12;
      *uint64_t v12 = *(_DWORD *)a2;
      *((unsigned char *)v11 + 4) = *(unsigned char *)(a2 + 4);
      *v5 += 2;
    }
    a2 += 8;
  }
  return result;
}

void *sub_1CB94EFA4(_DWORD *a1, uint64_t *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CB94F014((uint64_t)a1, *a2, &v7);
  int v5 = v7;
  if ((v4 & 1) == 0)
  {
    int v5 = sub_1CB94F0C0(a1, a2, v7);
    *int v5 = *a2;
    v5[1] = v5 + 3;
    void v5[2] = 0x100000000;
  }
  return v5;
}

uint64_t sub_1CB94F014(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_16;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  uint64_t v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v3 + 32 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      int v13 = v6 + v10++;
      uint64_t v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 32 * v6);
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_16;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_16:
  *a3 = v7;
  return result;
}

void *sub_1CB94F0C0(_DWORD *a1, uint64_t *a2, void *a3)
{
  int v5 = *a1 >> 1;
  if (*a1) {
    unsigned int v6 = 4;
  }
  else {
    unsigned int v6 = a1[4];
  }
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_5;
  }
  sub_1CB94F184((uint64_t)a1, v6);
  uint64_t v8 = 0;
  sub_1CB94F014((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_5:
  *a1 += 2;
  if (*a3 != -4096) {
    --a1[1];
  }
  return a3;
}

void sub_1CB94F184(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = a2;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    int v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40) {
      unsigned int v2 = v6 + 1;
    }
    else {
      unsigned int v2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v17 = *(unsigned int *)(a1 + 16);
    if (v2 <= 4)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      *(void *)(a1 + 8) = operator new(32 * v2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v2;
    }
    sub_1CB94F3F8(a1, v16, v16 + 32 * v17);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v7 = 0;
  uint64_t v8 = v18;
  do
  {
    uint64_t v9 = a1 + v7;
    uint64_t v10 = *(void *)(a1 + v7 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *((void *)v8 + 1) = v8 + 24;
      *(void *)uint64_t v8 = v10;
      *((void *)v8 + 2) = 0x100000000;
      unsigned int v11 = *(_DWORD *)(v9 + 24);
      BOOL v12 = *(void **)(v9 + 16);
      if (v11) {
        BOOL v13 = a1 + v7 + 8 == (void)v8;
      }
      else {
        BOOL v13 = 1;
      }
      if (!v13)
      {
        uint64_t v14 = a1 + v7;
        uint64_t v15 = a1 + v7 + 32;
        if ((void *)v15 == v12)
        {
          if (v11 >= 2) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memcpy(v8 + 24, v12, 4 * *(unsigned int *)(v9 + 24));
          *((_DWORD *)v8 + 4) = v11;
          BOOL v12 = *(void **)(v9 + 16);
        }
        else
        {
          *((void *)v8 + 1) = v12;
          *((_DWORD *)v8 + 4) = v11;
          *((_DWORD *)v8 + 5) = *(_DWORD *)(v14 + 28);
          *(void *)(v9 + 16) = v15;
          *(_DWORD *)(v14 + 28) = 0;
          BOOL v12 = (void *)(a1 + v7 + 32);
        }
        *(_DWORD *)(v9 + 24) = 0;
      }
      v8 += 32;
      if ((void *)(a1 + v7 + 32) != v12) {
        free(v12);
      }
    }
    v7 += 32;
  }
  while (v7 != 128);
  if (v2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    *(void *)(a1 + 8) = operator new(32 * v2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v2;
  }
  sub_1CB94F3F8(a1, (uint64_t)v18, (uint64_t)v8);
}

void sub_1CB94F3F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  int v6 = *(_DWORD *)a1;
  *(void *)a1 = *(_DWORD *)a1 & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(a1 + 8);
    uint64_t v9 = (void *)(a1 + 136);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (!v7) {
      goto LABEL_5;
    }
    uint64_t v8 = *(void **)(a1 + 8);
    uint64_t v9 = &v8[4 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 4;
  }
  while (v8 != v9);
LABEL_5:
  if (a2 != a3)
  {
    do
    {
      uint64_t v10 = *(void *)v4;
      if ((*(void *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v17 = 0;
        sub_1CB94F014(a1, v10, &v17);
        unsigned int v11 = v17;
        void *v17 = *(void *)v4;
        v11[1] = v11 + 3;
        v11[2] = 0x100000000;
        unsigned int v12 = *(_DWORD *)(v4 + 16);
        if ((void *)v4 != v11 && v12 != 0)
        {
          uint64_t v14 = *(const void **)(v4 + 8);
          if ((const void *)(v4 + 24) == v14)
          {
            if (v12 >= 2) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(v11 + 3, v14, 4 * *(unsigned int *)(v4 + 16));
            *((_DWORD *)v11 + 4) = v12;
          }
          else
          {
            v11[1] = v14;
            int v16 = *(_DWORD *)(v4 + 20);
            *((_DWORD *)v11 + 4) = v12;
            *((_DWORD *)v11 + 5) = v16;
            *(void *)(v4 + 8) = v4 + 24;
            *(_DWORD *)(v4 + 20) = 0;
          }
          *(_DWORD *)(v4 + 16) = 0;
        }
        *(_DWORD *)a1 += 2;
        uint64_t v15 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v15) {
          free(v15);
        }
      }
      v4 += 32;
    }
    while (v4 != a3);
  }
}

uint64_t sub_1CB94F57C(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCBEBD8;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x600000001;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  *(void *)a1 = &unk_1F25EF3B8;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCBEBE0, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CB94F674;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCBEBE0, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CB94F674()
{
}

void sub_1CB94F710(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  char v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    uint64_t v4 = a1;
    free(v1);
    a1 = v4;
  }
  unsigned int v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    unint64_t v5 = a1;
    free(v2);
    a1 = v5;
  }
  uint64_t v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    int v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CB94F7C4(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  unsigned int v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CB94F870()
{
  return "AGX2 IDep Insertion Pass";
}

void sub_1CB94F880(uint64_t a1, uint64_t a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v3);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
}

uint64_t sub_1CB94F8DC(uint64_t a1, uint64_t a2)
{
  uint64_t v182 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (unsigned char *)(*(uint64_t (**)(void, void))(**(void **)(a2 + 8) + 16))(*(void *)(a2 + 8), *(void *)a2);
  if (v3[301])
  {
    uint64_t v4 = v3;
    uint64_t v5 = (*(uint64_t (**)(unsigned char *))(*(void *)v3 + 176))(v3);
    uint64_t v6 = v5;
    char v149 = v4;
    if (v4[326]) {
      int v7 = 524271;
    }
    else {
      int v7 = 2060;
    }
    if (v4[345]) {
      int v8 = v7 | 0x6300;
    }
    else {
      int v8 = v7;
    }
    int v150 = v8;
    unsigned int v9 = *(_DWORD *)(v5 + 44);
    unsigned int v10 = v9 + 63;
    uint64_t v11 = (v9 + 63) >> 6;
    char v177 = v180;
    unsigned int v179 = 6;
    if (v9 + 63 > 0x1BF)
    {
      unsigned int v178 = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v10 >= 0x40) {
      bzero(v180, 8 * v11);
    }
    unsigned int v178 = (v9 + 63) >> 6;
    unsigned int v181 = v9;
    uint64_t v173 = v175;
    uint64_t v174 = 0x600000000;
    if (v10 >= 0x40) {
      bzero(v175, 8 * v11);
    }
    LODWORD(v174) = (v9 + 63) >> 6;
    unsigned int v176 = v9;
    unsigned __int8 v164 = 0;
    uint64_t v165 = 0;
    unsigned int __src = v169;
    int v168 = 6;
    if (v10 >= 0x1C0)
    {
      unsigned int v167 = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if ((v9 + 63) >> 6) {
      bzero(v169, 8 * v11);
    }
    unsigned int v167 = (v9 + 63) >> 6;
    unsigned int v170 = v9;
    uint64_t v171 = v6;
    unsigned __int8 v172 = 0;
    uint64_t v13 = *(void *)(a2 + 328);
    uint64_t v146 = a2 + 320;
    if (v13 != a2 + 320)
    {
      char v148 = 0;
      char v158 = 0;
      int v156 = v149[327];
      while (1)
      {
        uint64_t v14 = (void *)(v13 + 48);
        uint64_t v147 = v13;
        uint64_t v15 = *(void **)(v13 + 56);
        uint64_t v16 = (uint64_t)v15;
        uint64_t v154 = v14;
        BOOL v155 = v15;
        if (v15 != v14) {
          break;
        }
LABEL_284:
        uint64_t v13 = *(void *)(v147 + 8);
        if (v13 == v146) {
          goto LABEL_287;
        }
      }
      while (1)
      {
        if ((void *)v16 == v15)
        {
          uint64_t v17 = 0;
        }
        else
        {
          uint64_t v17 = (void *)(*(void *)v16 & 0xFFFFFFFFFFFFFFF8);
          if (v17)
          {
            if (v15 == v17)
            {
              unint64_t v18 = 0;
              uint64_t v17 = v15;
            }
            else
            {
              unint64_t v18 = *v17 & 0xFFFFFFFFFFFFFFF8;
            }
            goto LABEL_29;
          }
        }
        unint64_t v18 = 0;
LABEL_29:
        uint64_t v19 = *(void *)(v16 + 8);
        uint64_t v20 = *(unsigned __int16 **)(v16 + 16);
        if ((void *)v19 == v14) {
          uint64_t v21 = 0;
        }
        else {
          uint64_t v21 = *(void *)(v16 + 8);
        }
        uint64_t v23 = *((void *)v20 + 1);
        uint64_t v22 = *((void *)v20 + 2);
        if ((*(_WORD *)(v16 + 44) & 0xC) != 0 && (*(_WORD *)(v16 + 44) & 4) == 0)
        {
          uint64_t v40 = v16;
          if ((v23 & 0x400) != 0)
          {
LABEL_57:
            if (v158)
            {
              if (v178) {
                bzero(v177, 8 * v178);
              }
              if (v174) {
                bzero(v173, 8 * v174);
              }
            }
            int v39 = 0;
            char v158 = 0;
            goto LABEL_211;
          }
          while ((*(_WORD *)(v40 + 44) & 8) != 0)
          {
            uint64_t v40 = *(void *)(v40 + 8);
            if ((*(unsigned char *)(*(void *)(v40 + 16) + 9) & 4) != 0) {
              goto LABEL_57;
            }
          }
        }
        else if ((v23 & 0x400) != 0)
        {
          goto LABEL_57;
        }
        int v25 = *v20;
        if (((v25 - 9) > 0x3C || ((1 << (v25 - 9)) & 0x1000000000000605) == 0)
          && v25 != 0
          && (*((void *)v20 + 1) & 0x10 | *((void *)v20 + 2) & 1) == 0)
        {
          uint64_t v157 = *((void *)v20 + 2);
          uint64_t v153 = v21;
          if (*(unsigned char *)(*(void *)(*(void *)(*(void *)(v16 + 24) + 32) + 16) + 393))
          {
            unsigned int v159 = 0;
            __dst = 0;
            int v41 = sub_1CB950ADC(v20, &v159, (uint64_t *)&__dst);
            int v42 = 0;
            if (v41)
            {
              uint64_t v43 = *(void *)(v16 + 32) + 32 * v159;
              uint64_t v46 = *(void *)(v43 + 16);
              uint64_t v44 = (unint64_t *)(v43 + 16);
              uint64_t v45 = v46;
              if (((unint64_t)__dst & v46) != 0)
              {
                unint64_t *v44 = v45 & ~(unint64_t)__dst;
                int v42 = 1;
              }
              else
              {
                int v42 = 0;
              }
            }
            uint64_t v20 = *(unsigned __int16 **)(v16 + 16);
            int v25 = *v20;
            uint64_t v47 = *((void *)v20 + 2);
            LOBYTE(v22) = v157;
            if ((v47 & 0x1000000) == 0)
            {
LABEL_79:
              int v48 = 0;
              goto LABEL_80;
            }
          }
          else
          {
            int v42 = 0;
            LODWORD(v47) = *((void *)v20 + 2);
            if ((v22 & 0x1000000) == 0) {
              goto LABEL_79;
            }
          }
          if ((v47 & 0x10) != 0)
          {
            int v48 = 1;
            goto LABEL_80;
          }
          if ((v47 & 0x4000000) != 0)
          {
            int v48 = 2;
            goto LABEL_80;
          }
          if ((v47 & 2) != 0)
          {
            int v48 = 4;
            goto LABEL_80;
          }
          if ((v25 - 8267) < 0xA)
          {
            int v48 = 8;
            goto LABEL_80;
          }
          int v48 = 16;
          if ((v25 - 743) >= 0xE && (v25 - 4581) >= 0xC)
          {
            int v48 = 0x40000;
            if (((v25 - 8188) > 0x1F || ((1 << (v25 + 4)) & 0xC0300C03) == 0)
              && (v25 - 4596) >= 2)
            {
              if ((v47 & 0x10000000) != 0)
              {
                int v48 = 32;
                goto LABEL_80;
              }
              if ((v47 & 0x8000000) != 0)
              {
                int v48 = 64;
                goto LABEL_80;
              }
              if ((v47 & 0x800000) != 0)
              {
                if ((~v47 & 0x800200) == 0)
                {
                  int v48 = 256;
                  goto LABEL_80;
                }
                BOOL v142 = (~v47 & 0x800100) == 0;
                int v48 = 512;
                int v143 = 128;
              }
              else
              {
                uint64_t v79 = v47 & 0xD00;
                if (v79 == 1280)
                {
                  int v48 = 2048;
                  goto LABEL_80;
                }
                uint64_t v141 = v47 & 0xE00;
                if (v141 == 1536)
                {
                  int v48 = 4096;
                  goto LABEL_80;
                }
                if (v79 == 2304)
                {
                  int v48 = 0x2000;
                  goto LABEL_80;
                }
                if (v141 == 2560)
                {
                  int v48 = 0x4000;
                  goto LABEL_80;
                }
                if (v79 == 3328)
                {
                  int v48 = 0x8000;
                  goto LABEL_80;
                }
                if (v141 == 3584)
                {
                  int v48 = 0x10000;
                  goto LABEL_80;
                }
                BOOL v142 = (v47 & 0x2000000) == 0;
                int v48 = 1024;
                int v143 = 0x80000;
              }
              if (v142) {
                int v48 = v143;
              }
            }
          }
LABEL_80:
          if ((v48 & v150) != 0)
          {
            int v152 = v42;
            if ((v158 & 1) != 0 && (uint64_t v49 = *(unsigned int *)(v16 + 40), v49))
            {
              uint64_t v50 = *(void *)(v16 + 32);
              uint64_t v51 = v50 + 32 * v49;
              while (*(unsigned char *)v50)
              {
LABEL_88:
                v50 += 32;
                if (v50 == v51) {
                  goto LABEL_89;
                }
              }
              unsigned int v52 = *(_DWORD *)(v50 + 4);
              unint64_t v53 = *(unsigned int *)(*(void *)(v6 + 8) + 24 * v52 + 16);
              __int16 v54 = v53 & 0xF;
              unsigned int v55 = (_WORD *)(*(void *)(v6 + 56) + ((v53 >> 3) & 0x1FFFFFFE));
              __int16 v57 = *v55;
              unsigned int v56 = v55 + 1;
              unsigned __int16 v58 = v57 + v54 * v52;
              while (((*(void *)&v177[8 * (v58 >> 6)] >> v58) & 1) == 0)
              {
                int v59 = *v56++;
                v58 += v59;
                if (!v59) {
                  goto LABEL_88;
                }
              }
              int v151 = 1;
              if (!v156)
              {
                int v39 = 0;
                goto LABEL_98;
              }
            }
            else
            {
LABEL_89:
              int v151 = 0;
            }
            if (v18 && (v22 & 2) != 0)
            {
              uint64_t v60 = (unsigned __int16 *)v17[2];
              if ((v60[8] & 2) != 0 && (int v61 = *(unsigned __int16 **)(v18 + 16), (v61[8] & 0x10) != 0))
              {
                if ((*(unsigned char *)(*(void *)(v18 + 32) + 32 * sub_1CBC7A3F8(*v61, 0x16u) + 16) & 8) != 0
                  && (unsigned int v140 = sub_1CBC7A3F8(*v60, 0x24u),
                      *(_DWORD *)(v17[4] + 32 * v140 + 4) == *(_DWORD *)(*(void *)(v16 + 32)
                                                                         + 32
                                                                         * sub_1CBC7A3F8(v25, 0x24u)
                                                                         + 4)))
                {
                  unsigned __int8 v164 = 0;
                  uint64_t v165 = 0;
                  if (v167) {
                    bzero(__src, 8 * v167);
                  }
                  unsigned __int8 v172 = 0;
                  int v39 = 1;
                  int v151 = 1;
                }
                else
                {
                  int v39 = 0;
                }
                LOBYTE(v22) = v157;
              }
              else
              {
                int v39 = 0;
              }
            }
            else
            {
              int v39 = 0;
            }
LABEL_98:
            if ((v47 & 0x10) != 0)
            {
              uint64_t v127 = sub_1CBC7A3F8(v25, 0x16u);
              LOBYTE(v22) = v157;
              int v64 = (*(unsigned __int8 *)(*(void *)(v16 + 32) + 32 * v127 + 16) >> 3) & 1;
            }
            else
            {
              int v64 = 0;
            }
            uint64_t v14 = v154;
            int v65 = *(unsigned __int8 *)(*(void *)(*(void *)(*(void *)(v16 + 24) + 32) + 16) + 392);
            if (*(unsigned char *)(*(void *)(*(void *)(*(void *)(v16 + 24) + 32) + 16) + 392))
            {
              unsigned int v159 = 0;
              __dst = 0;
              int v66 = sub_1CB950ADC(v20, &v159, (uint64_t *)&__dst);
              int v65 = 0;
              int v67 = v152;
              if (v66)
              {
                int v68 = v39;
                uint64_t v69 = *(void *)(v16 + 32);
                uint64_t v70 = *(void *)(v69 + 32 * v159 + 16);
                if (((unint64_t)__dst & v70) == 0
                  || (uint64_t v71 = *(unsigned __int16 **)(v16 + 16), v72 = *((void *)v71 + 2), (v72 & 0x2000C00) == 0x2000800))
                {
                  int v65 = 0;
                  goto LABEL_105;
                }
                if ((v72 & 0xC00) == 0x800)
                {
                  int v65 = (*(void *)(v69 + 32 * v159 + 16) & 0xF0) == 0;
                  goto LABEL_105;
                }
                if ((v72 & 0x800000) == 0) {
                  llvm::report_fatal_error((llvm *)"Unhandled instruction with local fence", (const llvm::Twine *)1);
                }
                if ((v70 & 0xF0) != 0)
                {
                  int v80 = *v71;
                  int v145 = sub_1CBC7A3F8(v80, 0x41u);
                  unsigned int v81 = sub_1CBC7A3F8(v80, 0x3Fu);
                  unsigned int v82 = sub_1CBC7A3F8(v80, 0x40u);
                  BOOL v85 = v145 != -1
                     || *(void *)(v69 + 32 * v81 + 16) != 0
                     || *(void *)(v69 + 32 * v82 + 16) != 0;
                  uint64_t v86 = (*(uint64_t (**)(void))(**(void **)(*(void *)(*(void *)(v16 + 24) + 32) + 344) + 560))();
                  if (v86)
                  {
                    int v87 = (*(unsigned __int16 *)(v86 + 18) >> 4) & 0x3FF;
                    BOOL v89 = v87 == 106 || v87 == 108;
                  }
                  else
                  {
                    BOOL v89 = 1;
                  }
                  uint64_t v14 = v154;
                  int v39 = v68;
                  int v67 = v152;
                  int v65 = v85 || v89;
                }
                else
                {
                  int v65 = 1;
LABEL_105:
                  int v39 = v68;
                }
              }
              LOBYTE(v22) = v157;
            }
            else
            {
              int v67 = v152;
            }
            int v73 = v67 | v65 | v151 | v64;
            if (v17 && v149[335])
            {
              if (*(unsigned __int16 *)v17[2] - 4034 < 0x10) {
                LOBYTE(v73) = 1;
              }
              uint64_t v63 = v153;
              if ((v73 & 1) == 0)
              {
LABEL_113:
                unint64_t v74 = *(unsigned __int16 **)(v16 + 16);
                if (*((unsigned char *)v74 + 19))
                {
                  uint64_t v75 = *(void *)(v16 + 32) + 32 * sub_1CBC7A3F8(*v74, 0x16u);
                  *(void *)(v75 + 16) |= 0x8000000000000000;
                }
                char v148 = 1;
                if ((v158 & 1) == 0)
                {
                  int v62 = 0;
                  goto LABEL_204;
                }
LABEL_188:
                LOBYTE(v22) = v157;
LABEL_189:
                unsigned int v108 = v176;
                if (v181 < v176)
                {
                  int v109 = v39;
                  uint64_t v110 = v63;
                  uint64_t v111 = v178;
                  if ((v181 & 0x3F) != 0) {
                    *(void *)&v177[8 * v178 - 8] &= ~(-1 << (v181 & 0x3F));
                  }
                  unsigned int v112 = v111;
                  unsigned int v181 = v108;
                  unsigned int v113 = v108 + 63;
                  if (v111 != (v108 + 63) >> 6)
                  {
                    uint64_t v114 = v113 >> 6;
                    if (v111 > v114)
                    {
                      unsigned int v178 = v113 >> 6;
                      unsigned int v112 = v113 >> 6;
                    }
                    else
                    {
                      if (v114 > v179) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      if (v114 != v111) {
                        bzero(&v177[8 * v111], 8 * (v114 - v111));
                      }
                      unsigned int v112 = v114;
                      unsigned int v178 = v114;
                      LOBYTE(v108) = v181;
                      LOBYTE(v22) = v157;
                    }
                  }
                  int v115 = v108 & 0x3F;
                  uint64_t v63 = v110;
                  int v39 = v109;
                  if (v115) {
                    *(void *)&v177[8 * v112 - 8] &= ~(-1 << v115);
                  }
                }
                if (v174)
                {
                  uint64_t v116 = 0;
                  int v117 = v173;
                  int v118 = v177;
                  size_t v119 = 8 * v174;
                  do
                  {
                    *(void *)&v118[v116] |= *(void *)&v117[v116];
                    v116 += 8;
                  }
                  while (v119 != v116);
                  bzero(v117, v119);
                  int v62 = 1;
                  goto LABEL_204;
                }
                int v62 = 1;
                if ((v22 & 4) != 0)
                {
LABEL_209:
                  LOBYTE(v121) = v62;
LABEL_210:
                  char v158 = v121;
                  goto LABEL_211;
                }
LABEL_206:
                char v120 = *(unsigned __int16 **)(v16 + 16);
                if ((v120[8] & 0x10) != 0
                  && (unsigned int v130 = sub_1CBC7A3F8(*v120, 0x16u),
                      uint64_t v131 = *(void *)(v16 + 32),
                      (*(unsigned char *)(v131 + 32 * v130 + 16) & 8) != 0)
                  && v63
                  && (*(_DWORD *)(*(void *)(v63 + 16) + 16) & 0x8000002) != 0)
                {
                  unsigned int v132 = *(_DWORD *)(v131 + 4);
                  uint64_t v133 = (unsigned __int16 *)(*(void *)(v6 + 56)
                                            + (((unint64_t)*(unsigned int *)(*(void *)(v6 + 8)
                                                                                  + 24 * v132
                                                                                  + 16) >> 3) & 0x1FFFFFFE));
                  int v135 = *v133;
                  uint64_t v134 = v133 + 1;
                  int v136 = v135 + (*(_DWORD *)(*(void *)(v6 + 8) + 24 * v132 + 16) & 0xF) * v132;
                  uint64_t v137 = v173;
                  unint64_t v138 = v177;
                  do
                  {
                    v137[(unsigned __int16)v136 >> 6] |= 1 << v136;
                    v138[(unsigned __int16)v136 >> 6] &= ~(1 << v136);
                    int v139 = *v134++;
                    v136 += v139;
                  }
                  while (v139);
                  LOBYTE(v121) = 1;
                }
                else
                {
                  int v121 = v62 | sub_1CB950A24(v16, (uint64_t)v177, v6);
                }
                goto LABEL_210;
              }
            }
            else
            {
              uint64_t v63 = v153;
              if (!v73) {
                goto LABEL_113;
              }
            }
            if (!v164
              || ((uint64_t v76 = *(unsigned __int16 **)(v16 + 16), v77 = *((void *)v76 + 2), (v77 & 0xD00) != 0x500)
                ? ((v77 & 0xE00) != 0x600
                 ? ((v77 & 2) != 0
                  ? (int v78 = 3)
                  : (int v78 = 4 * (*v76 - 2970 < 0x48)))
                 : (int v78 = 2))
                : (int v78 = 1),
                  v78 != v164))
            {
LABEL_176:
              if (v178)
              {
                bzero(v177, 8 * v178);
                LOBYTE(v22) = v157;
              }
              int v62 = 0;
              if ((v22 & 4) != 0) {
                goto LABEL_209;
              }
              goto LABEL_206;
            }
            if (v172)
            {
              uint64_t v90 = *(unsigned int *)(v16 + 40);
              if (v90)
              {
                uint64_t v91 = 0;
                uint64_t v92 = *(void *)(v16 + 32);
                if (v171) {
                  uint64_t v93 = (void *)(v171 + 8);
                }
                else {
                  uint64_t v93 = 0;
                }
                while (*(unsigned char *)(v92 + 32 * v91))
                {
LABEL_169:
                  if (++v91 == v90) {
                    goto LABEL_170;
                  }
                }
                unsigned int v94 = *(_DWORD *)(v92 + 32 * v91 + 4);
                unint64_t v95 = *(unsigned int *)(*v93 + 24 * v94 + 16);
                __int16 v96 = v95 & 0xF;
                uint64_t v97 = (_WORD *)(v93[6] + ((v95 >> 3) & 0x1FFFFFFE));
                __int16 v99 = *v97;
                int v98 = v97 + 1;
                unsigned __int16 v100 = v99 + v96 * v94;
                while (((*((void *)__src + (v100 >> 6)) >> v100) & 1) == 0)
                {
                  int v101 = *v98++;
                  v100 += v101;
                  if (!v101) {
                    goto LABEL_169;
                  }
                }
                goto LABEL_176;
              }
            }
LABEL_170:
            uint64_t v102 = v165;
            __dst = v162;
            uint64_t v161 = 0x600000000;
            unint64_t v103 = v167;
            if (v167)
            {
              if (v167 >= 7uLL) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              memcpy(v162, __src, 8 * v167);
              BOOL v104 = (char *)__dst;
              LODWORD(v161) = v103;
              unsigned int v163 = v170;
              if (__dst == v162)
              {
                uint64_t v105 = v178;
                if (v178 >= v103)
                {
                  memmove(v177, v162, 8 * v103);
                  goto LABEL_181;
                }
                if (v179 < v103)
                {
                  unsigned int v178 = 0;
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                if (v178) {
                  memmove(v177, v162, 8 * v178);
                }
                if (v105 != v161) {
                  memcpy(&v177[8 * v105], (char *)__dst + 8 * v105, 8 * v161 - 8 * v105);
                }
                unsigned int v178 = v103;
              }
              else
              {
                if (v177 != v180)
                {
                  free(v177);
                  BOOL v104 = (char *)__dst;
                  LODWORD(v103) = v161;
                }
                char v177 = v104;
                unsigned int v178 = v103;
                unsigned int v179 = HIDWORD(v161);
                __dst = v162;
                HIDWORD(v161) = 0;
              }
            }
            else
            {
              unsigned int v163 = v170;
LABEL_181:
              unsigned int v178 = v103;
            }
            LODWORD(v161) = 0;
            unsigned int v181 = v163;
            uint64_t v14 = v154;
            if (__dst != v162) {
              free(__dst);
            }
            int v62 = v172;
            if (v102 != v16)
            {
              sub_1CB955308(v102);
              uint64_t v106 = *(unsigned __int16 **)(v16 + 16);
              if (*((unsigned char *)v106 + 19))
              {
                uint64_t v107 = *(void *)(v16 + 32) + 32 * sub_1CBC7A3F8(*v106, 0x16u);
                *(void *)(v107 + 16) |= 0x8000000000000000;
              }
            }
            if (v62) {
              goto LABEL_188;
            }
LABEL_204:
            LOBYTE(v22) = v157;
          }
          else
          {
            int v39 = 0;
            int v62 = 0;
            uint64_t v63 = v153;
            uint64_t v14 = v154;
            if (v158) {
              goto LABEL_189;
            }
          }
          if ((v22 & 4) != 0) {
            goto LABEL_209;
          }
          goto LABEL_206;
        }
        uint64_t v29 = *((unsigned __int8 *)v20 + 4);
        if (*((unsigned char *)v20 + 4))
        {
          uint64_t v30 = 0;
          uint64_t v31 = *(void *)(v16 + 32);
          int v32 = v177;
          uint64_t v14 = v154;
          do
          {
            if ((*(_DWORD *)(v31 + 32 * v30) & 0x10000FF) == 0x1000000)
            {
              unsigned int v33 = *(_DWORD *)(v31 + 32 * v30 + 4);
              uint64_t v34 = (unsigned __int16 *)(*(void *)(v6 + 56)
                                       + (((unint64_t)*(unsigned int *)(*(void *)(v6 + 8) + 24 * v33 + 16) >> 3) & 0x1FFFFFFE));
              int v36 = *v34;
              uint64_t v35 = v34 + 1;
              int v37 = v36 + (*(_DWORD *)(*(void *)(v6 + 8) + 24 * v33 + 16) & 0xF) * v33;
              do
              {
                v32[(unsigned __int16)v37 >> 6] &= ~(1 << v37);
                int v38 = *v35++;
                v37 += v38;
              }
              while (v38);
            }
            ++v30;
          }
          while (v30 != v29);
          int v39 = 0;
        }
        else
        {
          int v39 = 0;
          uint64_t v14 = v154;
        }
LABEL_211:
        if (!v156 || v39) {
          goto LABEL_217;
        }
        char v122 = *(unsigned __int16 **)(v16 + 16);
        uint64_t v123 = *((void *)v122 + 2);
        if ((v123 & 0x1000000) == 0
          || (int v125 = *v122,
              (*(void *)(*(void *)(v16 + 32) + 32 * sub_1CBC7A3F8(v125, 0x16u) + 16) & 0x8000000000000000) == 0))
        {
          unsigned __int8 v164 = 0;
          uint64_t v165 = 0;
          unsigned __int8 v124 = v167;
          if (v167)
          {
            bzero(__src, 8 * v167);
            unsigned __int8 v124 = 0;
          }
          goto LABEL_216;
        }
        if ((v123 & 0xD00) == 0x500)
        {
          int v126 = 1;
        }
        else if ((v123 & 0xE00) == 0x600)
        {
          int v126 = 2;
        }
        else if ((v123 & 2) != 0)
        {
          int v126 = 3;
        }
        else
        {
          int v126 = 4 * ((v125 - 2970) < 0x48);
        }
        if (v126 == v164)
        {
          uint64_t v128 = v165;
          if ((v123 & 4) != 0) {
            goto LABEL_217;
          }
        }
        else
        {
          uint64_t v165 = 0;
          if (v167) {
            bzero(__src, 8 * v167);
          }
          unsigned __int8 v172 = 0;
          unsigned __int8 v164 = v126;
          if (!v126) {
            goto LABEL_217;
          }
          uint64_t v165 = v16;
          uint64_t v128 = v16;
          if ((v123 & 4) != 0) {
            goto LABEL_217;
          }
        }
        if (v128)
        {
          char v129 = sub_1CB950A24(v16, (uint64_t)__src, v171);
          unsigned __int8 v124 = v172 | v129;
LABEL_216:
          unsigned __int8 v172 = v124;
        }
LABEL_217:
        uint64_t v16 = v19;
        uint64_t v15 = v155;
        if ((void *)v19 == v14) {
          goto LABEL_284;
        }
      }
    }
    char v148 = 0;
LABEL_287:
    if (__src != v169) {
      free(__src);
    }
    char v12 = v148;
    if (v173 != v175) {
      free(v173);
    }
    if (v177 != v180) {
      free(v177);
    }
  }
  else
  {
    char v12 = 0;
  }
  return v12 & 1;
}

uint64_t sub_1CB950A24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(a1 + 16) + 4);
  if (*(unsigned char *)(*(void *)(a1 + 16) + 4))
  {
    uint64_t v4 = 0;
    char v5 = 0;
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = (void *)(a3 + 8);
    if (!a3) {
      int v7 = 0;
    }
    do
    {
      if ((*(_DWORD *)(v6 + 32 * v4) & 0x10000FF) == 0x1000000)
      {
        unsigned int v8 = *(_DWORD *)(v6 + 32 * v4 + 4);
        unsigned int v9 = (unsigned __int16 *)(v7[6] + (((unint64_t)*(unsigned int *)(*v7 + 24 * v8 + 16) >> 3) & 0x1FFFFFFE));
        int v11 = *v9;
        unsigned int v10 = v9 + 1;
        int v12 = v11 + (*(_DWORD *)(*v7 + 24 * v8 + 16) & 0xF) * v8;
        do
        {
          char v5 = 1;
          *(void *)(a2 + 8 * ((unsigned __int16)v12 >> 6)) |= 1 << v12;
          int v13 = *v10++;
          v12 += v13;
        }
        while (v13);
      }
      ++v4;
    }
    while (v4 != v3);
  }
  else
  {
    char v5 = 0;
  }
  return v5 & 1;
}

uint64_t sub_1CB950ADC(unsigned __int16 *a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t v4 = *((void *)a1 + 2);
  if ((v4 & 0x2000C00) == 0x2000800)
  {
    int v5 = *a1;
    uint64_t v6 = 1024;
  }
  else
  {
    int v5 = *a1;
    if ((~v4 & 0x800200) != 0 && (v4 & 0x800100) != 8388864 && (v5 - 4821) >= 4)
    {
      uint64_t v6 = 0x80000;
      if ((v4 & 0xD00) != 0x900 && (v4 & 0xE00) != 0xA00) {
        return 0;
      }
    }
    else
    {
      uint64_t v6 = 512;
    }
  }
  *a2 = sub_1CBC7A3F8(v5, 0x16u);
  *a3 = v6;
  return 1;
}

void sub_1CB950BA8()
{
}

uint64_t sub_1CB950BE4(uint64_t result, int a2)
{
  int v2 = 1;
  *(_DWORD *)(result + 12) = 1;
  switch(a2)
  {
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'h':
      __break(1u);
      JUMPOUT(0x1CB950C88);
      *(unsigned char *)(result + 21) = 1;
      goto LABEL_15;
    case 'b':
      *(_DWORD *)(result + 12) = 2;
      goto LABEL_8;
    case 'c':
LABEL_8:
      *(_DWORD *)(result + 8) = 3;
      *(unsigned char *)(result + 22) = 1;
      return result;
    case 'd':
LABEL_15:
      int v2 = 2;
      goto LABEL_5;
    case 'e':
      *(_DWORD *)(result + 8) = 0;
      return result;
    case 'f':
    case 'o':
    case 'p':
      goto LABEL_5;
    case 'g':
      int v2 = 8;
      goto LABEL_5;
    case 'i':
      int v2 = 9;
      goto LABEL_5;
    case 'j':
      int v2 = 10;
      goto LABEL_5;
    case 'k':
      int v2 = 7;
      goto LABEL_5;
    case 'l':
      int v2 = 5;
      goto LABEL_5;
    case 'm':
      int v2 = 6;
      goto LABEL_5;
    case 'n':
      int v2 = 4;
LABEL_5:
      *(_DWORD *)(result + 8) = v2;
      break;
    default:
      *(unsigned char *)(result + 20) = 1;
      break;
  }
  return result;
}

uint64_t sub_1CB950D24(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  *(void *)(a1 + 24) = a5;
  uint64_t result = (**(uint64_t (***)(uint64_t))a1)(a1);
  *(_DWORD *)(a1 + 16) = 0;
  if (a3 <= 2)
  {
    switch(a4)
    {
      case 4:
        goto LABEL_23;
      case 5:
        goto LABEL_22;
      case 6:
        goto LABEL_7;
      case 7:
        if (*(unsigned char *)(a1 + 20))
        {
          if (!*(unsigned char *)(a1 + 21))
          {
LABEL_23:
            BOOL v9 = *(unsigned char *)(*(void *)(a1 + 24) + 372) == 0;
            int v10 = 7;
LABEL_8:
            if (!v9) {
              ++v10;
            }
            goto LABEL_10;
          }
        }
        else if (!*(unsigned char *)(a1 + 21))
        {
LABEL_7:
          BOOL v9 = *(unsigned char *)(*(void *)(a1 + 24) + 372) == 0;
          int v10 = 11;
          goto LABEL_8;
        }
LABEL_22:
        BOOL v9 = *(unsigned char *)(*(void *)(a1 + 24) + 372) == 0;
        int v10 = 3;
        goto LABEL_8;
      default:
        return result;
    }
  }
  if (a3 != 3)
  {
    switch(a4)
    {
      case 4:
        goto LABEL_28;
      case 5:
        goto LABEL_12;
      case 6:
        goto LABEL_20;
      case 7:
        if (*(unsigned char *)(a1 + 20))
        {
          if (!*(unsigned char *)(a1 + 21))
          {
LABEL_28:
            int v10 = 6;
            goto LABEL_10;
          }
        }
        else if (!*(unsigned char *)(a1 + 21))
        {
LABEL_20:
          int v10 = 10;
LABEL_10:
          *(_DWORD *)(a1 + 16) = v10;
          return result;
        }
LABEL_12:
        int v10 = 2;
        goto LABEL_10;
      default:
        return result;
    }
  }
  int v11 = 9;
  switch(a4)
  {
    case 4:
      goto LABEL_26;
    case 5:
      goto LABEL_25;
    case 6:
      goto LABEL_17;
    case 7:
      if (!*(unsigned char *)(a1 + 20))
      {
        if (!*(unsigned char *)(a1 + 21))
        {
          int v11 = 9;
          goto LABEL_17;
        }
        goto LABEL_25;
      }
      if (*(unsigned char *)(a1 + 21))
      {
LABEL_25:
        int v11 = 1;
        goto LABEL_17;
      }
LABEL_26:
      int v11 = 5;
LABEL_17:
      *(_DWORD *)(a1 + 16) = v11;
      *(unsigned char *)(a1 + 23) = 1;
      break;
    default:
      JUMPOUT(0);
  }
  return result;
}

uint64_t sub_1CB950EFC(uint64_t a1, unsigned int a2, int a3, unsigned int a4)
{
  if (*(unsigned char *)(a1 + 22))
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 1;
    if (*(unsigned char *)(a1 + 20)) {
      uint64_t v4 = 2;
    }
  }
  if (*(unsigned char *)(*(void *)(a1 + 24) + 326))
  {
    uint64_t v5 = 2;
    if (a3) {
      uint64_t v5 = 0;
    }
    uint64_t v6 = (char *)&unk_1CD96F410 + 48 * a2 + 16 * v4 + 4 * (v5 | a4 ^ 1);
    uint64_t v7 = 2;
    if (!a4) {
      uint64_t v7 = 3;
    }
    uint64_t v8 = 4;
    if (a3) {
      uint64_t v8 = 0;
    }
    BOOL v9 = (char *)&unk_1CD96F470 + 96 * a2 + 32 * v4 + 4 * (v7 | v8);
    if (!*(unsigned char *)(a1 + 23)) {
      BOOL v9 = v6;
    }
  }
  else
  {
    uint64_t v11 = 2;
    if (a3) {
      uint64_t v11 = 0;
    }
    BOOL v9 = (char *)&unk_1CD96F350 + 96 * *(unsigned __int8 *)(a1 + 23) + 32 * v4 + 8 * (v11 | a4) + 4 * (a2 ^ 1);
  }
  return *(unsigned int *)v9;
}

uint64_t sub_1CB950FDC(uint64_t a1, int a2, int a3, unsigned int a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a2 == 3)
  {
    uint64_t v7 = *(unsigned char **)a1;
    if (*(unsigned char *)(*(void *)a1 + 326))
    {
      if (*(_WORD *)(a1 + 8) == 2) {
        uint64_t v8 = &unk_1CD96EEE0;
      }
      else {
        uint64_t v8 = &unk_1CD96EEF0;
      }
      v12[0] = v8[*(__int16 *)(a1 + 10) - 1];
      if (a3)
      {
        int v9 = 2;
        v12[1] = 2;
      }
      else
      {
        int v9 = 1;
      }
      if (a4) {
        int v10 = 1;
      }
      else {
        int v10 = 2;
      }
      v12[v9] = v10;
      if (*(_DWORD *)(a1 + 12)) {
        int v11 = 51;
      }
      else {
        int v11 = 50;
      }
      return sub_1CB951118(v11, v12, (v9 + 1), v7);
    }
    uint64_t v4 = 2;
  }
  else
  {
    uint64_t v4 = 1;
  }
  if (!a2) {
    uint64_t v4 = 0;
  }
  uint64_t v5 = 2;
  if (a3) {
    uint64_t v5 = 0;
  }
  return *(unsigned int *)((char *)&dword_1CD96EF50[64 * v4
                                                  - 1
                                                  + 32 * (unint64_t)*(unsigned int *)(a1 + 12)
                                                  + 8 * (v5 | a4)
                                                  + *(unsigned __int16 *)(a1 + 10)]
                         + ((4 * *(unsigned __int16 *)(a1 + 8)) & 0x3FFF0));
}

uint64_t sub_1CB951118(int a1, _DWORD *a2, uint64_t a3, unsigned char *a4)
{
  if (a4[318])
  {
    unsigned int v5 = 4;
  }
  else if (a4[319])
  {
    unsigned int v5 = 3;
  }
  else if (a4[320])
  {
    unsigned int v5 = 2;
  }
  else
  {
    unsigned int v5 = a4[321];
  }
  int v6 = sub_1CB957980(a1, a2, a3);

  return sub_1CB95B138(v5, a1, v6);
}

uint64_t sub_1CB951190(unsigned int a1)
{
  int v1 = a1 & 0xF;
  int v2 = (a1 >> 12) & 0x7F;
  if (v2 == 4) {
    int v3 = 2;
  }
  else {
    int v3 = v2 == 2;
  }
  if (v2) {
    int v4 = v3;
  }
  else {
    int v4 = (a1 >> 9) & 3;
  }
  if (v1 == 2) {
    return (v4 + 2);
  }
  int v6 = 1 << v1;
  if ((v6 & 0x431) != 0) {
    unsigned int v7 = v4;
  }
  else {
    unsigned int v7 = 2;
  }
  if ((v6 & 0xC2) != 0) {
    return (v4 + 1);
  }
  else {
    return v7;
  }
}

unint64_t sub_1CB9511F0(uint64_t a1, int a2, int a3)
{
  int v3 = a2 - 1;
  if ((a2 - 1) >= 8 || ((0x8Bu >> v3) & 1) == 0) {
    llvm::report_fatal_error((llvm *)"Unhandled number of load bytes.", (const llvm::Twine *)1);
  }
  uint64_t v4 = qword_1CD971618[v3];
  uint64_t v5 = qword_1CD971658[v3];
  uint64_t v6 = 2048;
  if (!a3) {
    uint64_t v6 = 0;
  }
  return v6 | ((unint64_t)(*(unsigned char *)(a1 + 326) != 0) << 12) | v4 | v5;
}

unsigned char *sub_1CB951268(unsigned char *result, uint64_t a2, int8x8_t a3)
{
  int v3 = **(unsigned __int16 **)(a2 + 16);
  result[1] = 32;
  int v4 = 2;
  if (v3 <= 4281)
  {
    switch(v3)
    {
      case 4100:
      case 4101:
      case 4108:
      case 4109:
      case 4116:
      case 4117:
      case 4124:
      case 4125:
        result[1] = 16;
        int v4 = 2;
        goto LABEL_27;
      case 4102:
      case 4103:
      case 4110:
      case 4111:
      case 4118:
      case 4119:
      case 4126:
      case 4127:
        result[1] = 16;
        int v4 = 2;
        goto LABEL_3;
      case 4132:
      case 4133:
      case 4140:
      case 4141:
      case 4148:
      case 4149:
      case 4156:
      case 4157:
        goto LABEL_27;
      case 4134:
      case 4135:
      case 4142:
      case 4143:
      case 4150:
      case 4151:
      case 4158:
      case 4159:
        goto LABEL_3;
      default:
        goto LABEL_15;
    }
  }
  switch(v3)
  {
    case 8192:
    case 8193:
    case 8202:
    case 8203:
    case 8212:
    case 8213:
    case 8222:
    case 8223:
      result[1] = 16;
      goto LABEL_26;
    case 8194:
    case 8195:
    case 8204:
    case 8205:
    case 8214:
    case 8215:
    case 8224:
    case 8225:
      result[1] = 16;
      goto LABEL_29;
    case 8196:
    case 8197:
    case 8198:
    case 8199:
    case 8200:
    case 8201:
    case 8206:
    case 8207:
    case 8208:
    case 8209:
    case 8210:
    case 8211:
    case 8216:
    case 8217:
    case 8218:
    case 8219:
    case 8220:
    case 8221:
    case 8226:
    case 8227:
    case 8228:
    case 8229:
    case 8234:
    case 8235:
    case 8236:
    case 8237:
    case 8242:
    case 8243:
    case 8244:
    case 8245:
    case 8250:
    case 8251:
    case 8252:
    case 8253:
      goto LABEL_15;
    case 8230:
    case 8231:
    case 8238:
    case 8239:
    case 8246:
    case 8247:
    case 8254:
    case 8255:
LABEL_26:
      int v4 = 4;
LABEL_27:
      unsigned int v6 = result[7] & 0xF9 | v4;
      result[7] = v6;
      char v5 = 2;
      goto LABEL_4;
    case 8232:
    case 8233:
    case 8240:
    case 8241:
    case 8248:
    case 8249:
    case 8256:
    case 8257:
LABEL_29:
      int v4 = 4;
LABEL_3:
      char v5 = 0;
      unsigned int v6 = result[7] & 0xF9 | v4;
      result[7] = v6;
      goto LABEL_4;
    default:
      char v13 = v3 + 70;
      if ((v3 - 4282) > 0x2D) {
        goto LABEL_19;
      }
      if (((1 << v13) & 0x3CF3CF) != 0)
      {
        result[1] = 16;
        int v4 = 2;
        goto LABEL_33;
      }
      if (((1 << v13) & 0x3CF3CF000000) != 0) {
        goto LABEL_33;
      }
LABEL_19:
      char v14 = v3 + 126;
      if ((v3 - 4482) > 0x2D) {
        goto LABEL_15;
      }
      if (((1 << v14) & 0x3CF3CF) != 0)
      {
        result[1] = 16;
      }
      else if (((1 << v14) & 0x3CF3CF000000) == 0)
      {
LABEL_15:
        result[7] &= 0xF9u;
        result[6] = 0;
        return result;
      }
      int v4 = 4;
LABEL_33:
      unsigned int v6 = result[7] & 0xF9 | v4;
      result[7] = v6;
      char v5 = 1;
LABEL_4:
      result[6] = v5;
      uint64_t v7 = *(void *)(*(void *)(a2 + 32) + 32 * ((v6 >> 1) & 1) + 16);
      *uint64_t result = v7 & 0xF;
      char v8 = v6 & 0xF6 | ((v7 & 0xFu) > 2uLL);
      result[2] = v7 >> 4;
      if (((v7 >> 4) & 2) != 0) {
        char v9 = 2;
      }
      else {
        char v9 = 1;
      }
      if (((v7 >> 4) & 4) != 0) {
        char v10 = 3;
      }
      else {
        char v10 = v9;
      }
      if ((v7 & 0x80) != 0) {
        unsigned __int8 v11 = 4;
      }
      else {
        unsigned __int8 v11 = v10;
      }
      result[3] = v11;
      a3.i32[0] = v7 >> 4;
      uint8x8_t v12 = (uint8x8_t)vcnt_s8(a3);
      v12.i16[0] = vaddlv_u8(v12);
      result[5] = BYTE1(v7) & 1;
      result[4] = v12.i8[0];
      result[7] = v8 | (8 * (v12.i32[0] != v11));
      return result;
  }
}

uint64_t sub_1CB9516A4()
{
  return 0;
}

uint64_t sub_1CB9516AC(int *a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(unsigned __int16 **)(a2 + 16);
  int v4 = *v3;
  unsigned int v5 = v4 - 9;
  if ((v4 - 9) <= 0x3C && ((1 << (v4 - 9)) & 0x1000000000000605) != 0 || v4 == 0) {
    return 0;
  }
  uint64_t v8 = *((void *)v3 + 1);
  if ((v8 & 0x10) != 0) {
    return 0;
  }
  BOOL v11 = v5 > 0x3C;
  uint64_t v12 = (1 << v5) & 0x1000000000000405;
  if (!v11 && v12 != 0 || v4 == 0) {
    char v15 = 1;
  }
  else {
    char v15 = v3[8] & 1;
  }
  unsigned int v16 = a1[2];
  BOOL v17 = v16 != 16 && *((unsigned char *)a1 + 16) == 0;
  uint64_t v18 = !v17;
  if (!v17)
  {
    unsigned int v16 = 0;
    *((unsigned char *)a1 + 16) = 0;
    *((void *)a1 + 1) = 0;
  }
  if (v15)
  {
    int v19 = sub_1CB9518C0(a2, *(void *)(a3 + 112));
    int v20 = a1[1];
    if ((v20 + v19) <= 0x100)
    {
      int v21 = a1[3];
    }
    else
    {
      *a1 = 0;
      if (v16 <= 7)
      {
        int v20 = a1[3];
        int v21 = v20;
      }
      else
      {
        int v20 = 0;
        int v21 = 0;
        unsigned int v16 = 0;
        uint64_t v18 = 1;
      }
    }
    a1[2] = v16 + 1;
    a1[3] = v21 + v19;
    a1[1] = v20 + v19;
    uint64_t v26 = *((void *)v3 + 2);
    if ((v26 & 0x1000) != 0)
    {
      if ((v26 & 0x4000012) != 0)
      {
        uint64_t v27 = (void *)(*(void *)(a2 + 32) + 32 * sub_1CBC7A3F8(v4, 0x16u) + 16);
        uint64_t v28 = 0x4000000000000000;
      }
      else
      {
        uint64_t v27 = (void *)(*(void *)(a2 + 32) + 48);
        uint64_t v28 = 2048;
      }
      if ((*v27 & v28) != 0) {
        *((unsigned char *)a1 + 16) = 1;
      }
    }
    return v18;
  }
  __int16 v22 = *(_WORD *)(a2 + 44);
  if ((v22 & 0xC) != 0 && (v22 & 4) == 0)
  {
    if ((*(unsigned char *)(*(void *)(a2 + 16) + 9) & 4) == 0)
    {
      uint64_t v23 = a2;
      while ((*(_WORD *)(v23 + 44) & 8) != 0)
      {
        uint64_t v23 = *(void *)(v23 + 8);
        if ((*(unsigned char *)(*(void *)(v23 + 16) + 9) & 4) != 0) {
          goto LABEL_39;
        }
      }
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  if ((v8 & 0x400) != 0) {
LABEL_39:
  }
    *(void *)a1 = 0;
LABEL_40:
  if (v16) {
    uint64_t v18 = 1;
  }
  else {
    uint64_t v18 = v18;
  }
  *((void *)a1 + 1) = 0;
  int v24 = sub_1CB9518C0(a2, *(void *)(a3 + 112));
  int v25 = *a1;
  if ((*a1 + v24) >= 0x81)
  {
    int v25 = 0;
    a1[1] = 0;
  }
  *a1 = v25 + v24;
  return v18;
}

uint64_t sub_1CB9518C0(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int16 **)(a1 + 16);
  uint64_t v3 = *((unsigned __int8 *)v2 + 5);
  int v4 = *v2;
  BOOL v6 = (v4 - 9) <= 0x3C && ((1 << (v4 - 9)) & 0x1000000000000605) != 0 || v4 == 0;
  if (!v6 && (v2[4] & 0x10) == 0 && (v2[8] & 1) == 0) {
    return v3;
  }
  if ((v2[9] & 0x3C) == 0) {
    return v3;
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if ((*(_WORD *)(a2 + 2 * *(unsigned int *)(v8 + 4)) & 0xC0) != 0 || (*(unsigned char *)(v8 + 49) & 8) != 0) {
    return v3;
  }
  unsigned int v9 = v2[1];
  if (v9 >= 3)
  {
    int v10 = 2;
    unsigned int v11 = 2;
    do
    {
      uint64_t v12 = v11;
      int v13 = *(unsigned __int8 *)(v8 + 32 * v11);
      if (!v10 && (v13 != 1 || *(void *)(v8 + 32 * v12 + 16))) {
        return v3;
      }
      if (v13)
      {
        if (v13 == 1 && (*(unsigned char *)(v8 + 32 * v12 + 16) & 0xC0) != 0) {
          return v3;
        }
        int v14 = 0;
      }
      else
      {
        if ((*(_WORD *)(a2 + 2 * *(unsigned int *)(v8 + 32 * v12 + 4)) & 0xC0) != 0) {
          return v3;
        }
        int v14 = 1;
      }
      unsigned int v11 = v12 + v14 + 1;
      --v10;
    }
    while (v11 < v9);
  }
  if (v3 != 6) {
    return (v3 - 2);
  }
  uint64_t result = 6;
  if (v4 > 1595)
  {
    if ((v4 - 1596) <= 4 && v4 != 1598
      || (v4 - 1816) <= 0x34 && ((1 << (v4 - 24)) & 0x1B00001B00001BLL) != 0)
    {
      return result;
    }
    unsigned int v15 = v4 - 1960;
  }
  else
  {
    unsigned int v15 = v4 - 1182;
  }
  if (v15 > 4 || v15 == 2) {
    return (v3 - 2);
  }
  return result;
}

void sub_1CB951A3C(void *a1, uint64_t a2, unint64_t *a3, unsigned int a4, uint64_t a5)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  int v10 = *(void **)(a2 + 32);
  if (!*(unsigned char *)(v10[1] + 1688)
    || (unsigned int v11 = *(llvm::Module **)(*v10 + 40),
        uint64_t v23 = "agx.disable_gin_1102",
        __int16 v27 = 259,
        llvm::Module::getNamedMetadata(v11, (const char **)&v23)))
  {
    __int16 v22 = 0;
    uint64_t v12 = sub_1CB85AA4C(a2, a3, &v22, a1[1] + 195696, a4);
    int v14 = v13;
    LODWORD(v23) = 1;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    llvm::MachineInstr::addOperand(v13, v12, (const llvm::MachineOperand *)&v23);
    LODWORD(v23) = 1;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    llvm::MachineInstr::addOperand(v14, v12, (const llvm::MachineOperand *)&v23);
    if (v22) {
      llvm::MetadataTracking::untrack((uint64_t)&v22, v22);
    }
    uint64_t v23 = 0;
    unsigned int v15 = sub_1CB85AA4C(a2, a3, (unsigned __int8 **)&v23, a1[1] + 196512, a4);
    BOOL v17 = v16;
    if (v23) {
      llvm::MetadataTracking::untrack((uint64_t)&v23, (unsigned __int8 *)v23);
    }
    if (a5)
    {
      llvm::MachineInstr::addOperand(v17, v15, (const llvm::MachineOperand *)(*(void *)(a5 + 32) + 32));
      uint64_t v18 = (void **)(*(void *)(a5 + 32) + 64);
    }
    else
    {
      LODWORD(v23) = 1;
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      llvm::MachineInstr::addOperand(v17, v15, (const llvm::MachineOperand *)&v23);
      LODWORD(v23) = 1;
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      uint64_t v18 = &v23;
    }
    llvm::MachineInstr::addOperand(v17, v15, (const llvm::MachineOperand *)v18);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    LODWORD(v23) = 0x2000000;
    HIDWORD(v23) = a4;
    llvm::MachineInstr::addOperand(v17, v15, (const llvm::MachineOperand *)&v23);
    __int16 v22 = 0;
    int v19 = sub_1CB85AA4C(a2, a3, &v22, a1[1] + 379920, a4);
    int v21 = v20;
    LODWORD(v23) = 1;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    llvm::MachineInstr::addOperand(v20, v19, (const llvm::MachineOperand *)&v23);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    LODWORD(v23) = 0;
    HIDWORD(v23) = a4;
    uint64_t v26 = 0;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v23);
    LODWORD(v23) = 1;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v23);
    if (v22) {
      llvm::MetadataTracking::untrack((uint64_t)&v22, v22);
    }
  }
  else
  {
    (*(void (**)(void **__return_ptr))(a1[11] + 88))(&v23);
    if (a4 != 66)
    {
      __int16 v22 = 0;
      (*(void (**)(void *, uint64_t, unint64_t *, unsigned __int8 **, void, uint64_t, void))(*a1 + 400))(a1, a2, a3, &v22, a4, 66, 0);
      if (v22) {
        llvm::MetadataTracking::untrack((uint64_t)&v22, v22);
      }
    }
    if (v23 != &v25) {
      free(v23);
    }
  }
}

llvm::MachineInstr *sub_1CB951D60(void *a1, unsigned int a2, uint64_t a3, unint64_t *a4, int a5)
{
  int v10 = *(uint64_t **)(a3 + 32);
  uint64_t v11 = *v10;
  unsigned int v12 = *(unsigned __int16 *)(*v10 + 18);
  int v13 = (v12 >> 4) & 0x3FF;
  BOOL v14 = v13 == 8 || v13 == 0;
  if (v14 || v13 == 255)
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10[43] + 592))(v10[43], 102)) {
      int v22 = 64;
    }
    else {
      int v22 = 61;
    }
    sub_1CB951A3C(a1, a3, a4, 0x42u, 0);
    if (a2 > 0xFF)
    {
      uint64_t v28 = 0;
      uint64_t v25 = sub_1CB85AA4C(a3, a4, &v28, a1[1] + 182592, a5);
      int v20 = v26;
      LODWORD(v29) = 1;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      llvm::MachineInstr::addOperand(v26, v25, (const llvm::MachineOperand *)&v29);
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      LODWORD(v29) = 0;
      HIDWORD(v29) = v22;
      uint64_t v32 = 0;
      llvm::MachineInstr::addOperand(v20, v25, (const llvm::MachineOperand *)&v29);
      LODWORD(v29) = 1;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      llvm::MachineInstr::addOperand(v20, v25, (const llvm::MachineOperand *)&v29);
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v29 = 0x4200000000;
      uint64_t v32 = 0;
      llvm::MachineInstr::addOperand(v20, v25, (const llvm::MachineOperand *)&v29);
      LODWORD(v29) = 1;
      uint64_t v30 = 0;
      uint64_t v31 = 128;
      llvm::MachineInstr::addOperand(v20, v25, (const llvm::MachineOperand *)&v29);
      if (v28) {
        llvm::MetadataTracking::untrack((uint64_t)&v28, v28);
      }
      sub_1CB94BB3C((uint64_t)a1, a3, (unint64_t *)v20, a2, v22, 3, 0);
    }
    else
    {
      uint64_t v28 = 0;
      uint64_t v23 = sub_1CB85AA4C(a3, a4, &v28, a1[1] + 182208, a5);
      int v20 = v24;
      LODWORD(v29) = 1;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      llvm::MachineInstr::addOperand(v24, v23, (const llvm::MachineOperand *)&v29);
      LODWORD(v29) = 1;
      uint64_t v30 = 0;
      uint64_t v31 = a2;
      llvm::MachineInstr::addOperand(v20, v23, (const llvm::MachineOperand *)&v29);
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v29 = 0x4200000000;
      uint64_t v32 = 0;
      llvm::MachineInstr::addOperand(v20, v23, (const llvm::MachineOperand *)&v29);
      LODWORD(v29) = 1;
      uint64_t v30 = 0;
      uint64_t v31 = 128;
      llvm::MachineInstr::addOperand(v20, v23, (const llvm::MachineOperand *)&v29);
      if (v28) {
        llvm::MetadataTracking::untrack((uint64_t)&v28, v28);
      }
    }
  }
  else
  {
    uint64_t v15 = v10[6];
    uint64_t v16 = *(void *)(v10[7] + 48);
    if (!v15)
    {
      uint64_t v27 = *(void *)(v10[7] + 48);
      uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t *, void))(*(void *)v10[1] + 216))(v10[1], v10 + 16, *(void *)(a3 + 32));
      LODWORD(v16) = v27;
      v10[6] = v15;
      uint64_t v11 = *v10;
      unsigned int v12 = *(unsigned __int16 *)(*v10 + 18);
      int v13 = (v12 >> 4) & 0x3FF;
    }
    int v17 = *(_DWORD *)(v15 + 464) + v16;
    if (v13 != 100 && (v13 - 109) >= 0xFFFFFFF7 && (v12 & 0x3FF0) != 0x640)
    {
      if (*(unsigned char *)(v10[1] + 1687))
      {
        int v19 = *(llvm::Module **)(v11 + 40);
        uint64_t v29 = (uint64_t)"agx.stack_oob";
        __int16 v33 = 259;
        if (llvm::Module::getNamedMetadata(v19, (const char **)&v29)) {
          v17 += 32;
        }
      }
    }
    return sub_1CB94BB3C((uint64_t)a1, a3, a4, a2 - v17, a5, 3, 0);
  }
  return v20;
}

llvm::MachineInstr *sub_1CB9520BC(uint64_t a1, int a2, uint64_t a3, unint64_t *a4, int a5)
{
  unsigned int v5 = *(unsigned char **)(a1 + 80);
  if (v5[318]) {
    int v6 = 4;
  }
  else {
    int v6 = 3;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(llvm::MachineFunction **)(a3 + 32);
  BOOL v12 = a2 >= 0;
  if (a2 >= 0) {
    uint64_t v13 = a2;
  }
  else {
    uint64_t v13 = -a2;
  }
  if (v13 <= 0xFF)
  {
    BOOL v14 = &dword_1CD96F530[4 * v12];
    int v15 = *v14;
    if (v5[318])
    {
      unsigned int v16 = 4;
    }
    else if (v5[319])
    {
      unsigned int v16 = 3;
    }
    else if (v5[320])
    {
      unsigned int v16 = 2;
    }
    else
    {
      unsigned int v16 = v5[321];
    }
    uint64_t v21 = *(void *)(a1 + 8) + 48 * sub_1CB95B138(v16, *v14, v14[1]);
    __int16 v57 = 0;
    int v17 = llvm::MachineFunction::CreateMachineInstr(v11, v21, &v57, 0);
    if (!v57) {
      goto LABEL_27;
    }
    int v49 = *v57;
    if ((v49 - 4) > 0x1E)
    {
      if ((v49 - 3) >= 0xFFFFFFFE) {
        unsigned int v55 = v57;
      }
      else {
        unsigned int v55 = 0;
      }
      if ((v49 - 3) < 0xFFFFFFFE)
      {
        if (v49 == 3) {
          *((void *)v57 + 1) = 0;
        }
        goto LABEL_27;
      }
      unint64_t v51 = (unint64_t)(v55 + 8);
    }
    else
    {
      if ((v57[1] & 0x7F) != 2 && !*((_DWORD *)v57 + 3)) {
        goto LABEL_27;
      }
      uint64_t v50 = *((void *)v57 + 2);
      if ((v50 & 4) == 0) {
        goto LABEL_27;
      }
      unint64_t v51 = v50 & 0xFFFFFFFFFFFFFFF8;
      if (!v51) {
        goto LABEL_27;
      }
    }
    uint64_t v58 = (uint64_t)&v57;
    sub_1CC5FA668(v51 + 16, &v58);
LABEL_27:
    uint64_t v22 = *(void *)(a3 + 40);
    *((void *)v17 + 3) = v22;
    uint64_t v23 = *(void *)(v22 + 32);
    uint64_t v24 = *((unsigned int *)v17 + 10);
    if (v24)
    {
      uint64_t v27 = *((void *)v17 + 4);
      uint64_t v28 = *(void *)(v23 + 40);
      uint64_t v29 = 32 * v24;
      do
      {
        if (!*(unsigned char *)v27)
        {
          uint64_t v30 = *(unsigned int *)(v27 + 4);
          if ((int)v30 >= 0) {
            uint64_t v31 = (uint64_t *)(*(void *)(v28 + 272) + 8 * v30);
          }
          else {
            uint64_t v31 = (uint64_t *)(*(void *)(v28 + 24) + 16 * (v30 & 0x7FFFFFFF) + 8);
          }
          uint64_t v32 = *v31;
          if (*v31)
          {
            uint64_t v33 = *(void *)(v32 + 16);
            *(void *)(v32 + 16) = v27;
            *(void *)(v27 + 16) = v33;
            if (*(unsigned char *)(v27 + 3))
            {
              *(void *)(v27 + 24) = v32;
            }
            else
            {
              *(void *)(v27 + 24) = 0;
              uint64_t v31 = (uint64_t *)(v33 + 24);
            }
          }
          else
          {
            *(void *)(v27 + 16) = v27;
            *(void *)(v27 + 24) = 0;
          }
          *uint64_t v31 = v27;
        }
        v27 += 32;
        v29 -= 32;
      }
      while (v29);
    }
    uint64_t v25 = *(void *)(v23 + 728);
    if (v25) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v25 + 24))(v25, v17);
    }
    unint64_t v26 = *a4 & 0xFFFFFFFFFFFFFFF8;
    *(void *)int v17 = v26 | *(void *)v17 & 7;
    *((void *)v17 + 1) = a4;
    *(void *)(v26 + 8) = v17;
    *a4 = *a4 & 7 | (unint64_t)v17;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    LODWORD(v58) = 0x1000000;
    HIDWORD(v58) = a5;
    llvm::MachineInstr::addOperand(v17, v11, (const llvm::MachineOperand *)&v58);
    LODWORD(v58) = 1;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    llvm::MachineInstr::addOperand(v17, v11, (const llvm::MachineOperand *)&v58);
    if (v15 == 45)
    {
      uint64_t v59 = 0;
      uint64_t v60 = 0;
      uint64_t v58 = 0x4200000000;
      uint64_t v61 = 0;
      llvm::MachineInstr::addOperand(v17, v11, (const llvm::MachineOperand *)&v58);
      LODWORD(v58) = 1;
      uint64_t v59 = 0;
      uint64_t v60 = 0;
      llvm::MachineInstr::addOperand(v17, v11, (const llvm::MachineOperand *)&v58);
      LODWORD(v58) = 1;
      uint64_t v59 = 0;
      uint64_t v60 = v13;
    }
    else
    {
      LODWORD(v58) = 1;
      uint64_t v59 = 0;
      uint64_t v60 = v13;
      llvm::MachineInstr::addOperand(v17, v11, (const llvm::MachineOperand *)&v58);
      uint64_t v59 = 0;
      uint64_t v60 = 0;
      uint64_t v58 = 0x4200000000;
      uint64_t v61 = 0;
      llvm::MachineInstr::addOperand(v17, v11, (const llvm::MachineOperand *)&v58);
      LODWORD(v58) = 1;
      uint64_t v59 = 0;
      uint64_t v60 = 0;
    }
    llvm::MachineInstr::addOperand(v17, v11, (const llvm::MachineOperand *)&v58);
    return v17;
  }
  if ((*(uint64_t (**)(void *, uint64_t))(**((void **)v11 + 43) + 592))(*((void **)v11 + 43), 102)) {
    int v18 = 64;
  }
  else {
    int v18 = 61;
  }
  int v19 = *(unsigned char **)(a1 + 80);
  if (v19[318])
  {
    unsigned int v20 = 4;
  }
  else if (v19[319])
  {
    unsigned int v20 = 3;
  }
  else if (v19[320])
  {
    unsigned int v20 = 2;
  }
  else
  {
    unsigned int v20 = v19[321];
  }
  uint64_t v34 = *(void *)(a1 + 8) + 48 * sub_1CB95B138(v20, dword_1CD96F530[4 * v12 + 2], 241);
  uint64_t v35 = *(llvm::MachineFunction **)(a3 + 32);
  __int16 v57 = 0;
  int v17 = llvm::MachineFunction::CreateMachineInstr(v35, v34, &v57, 0);
  if (v57)
  {
    int v52 = *v57;
    if ((v52 - 4) > 0x1E)
    {
      if ((v52 - 3) >= 0xFFFFFFFE) {
        unsigned int v56 = v57;
      }
      else {
        unsigned int v56 = 0;
      }
      if ((v52 - 3) < 0xFFFFFFFE)
      {
        if (v52 == 3) {
          *((void *)v57 + 1) = 0;
        }
        goto LABEL_49;
      }
      unint64_t v54 = (unint64_t)(v56 + 8);
    }
    else
    {
      if ((v57[1] & 0x7F) != 2 && !*((_DWORD *)v57 + 3)) {
        goto LABEL_49;
      }
      uint64_t v53 = *((void *)v57 + 2);
      if ((v53 & 4) == 0) {
        goto LABEL_49;
      }
      unint64_t v54 = v53 & 0xFFFFFFFFFFFFFFF8;
      if (!v54) {
        goto LABEL_49;
      }
    }
    uint64_t v58 = (uint64_t)&v57;
    sub_1CC5FA668(v54 + 16, &v58);
  }
LABEL_49:
  uint64_t v36 = *(void *)(a3 + 40);
  *((void *)v17 + 3) = v36;
  uint64_t v37 = *(void *)(v36 + 32);
  uint64_t v38 = *((unsigned int *)v17 + 10);
  if (v38)
  {
    uint64_t v42 = *((void *)v17 + 4);
    uint64_t v43 = *(void *)(v37 + 40);
    uint64_t v44 = 32 * v38;
    do
    {
      if (!*(unsigned char *)v42)
      {
        uint64_t v45 = *(unsigned int *)(v42 + 4);
        if ((int)v45 >= 0) {
          uint64_t v46 = (uint64_t *)(*(void *)(v43 + 272) + 8 * v45);
        }
        else {
          uint64_t v46 = (uint64_t *)(*(void *)(v43 + 24) + 16 * (v45 & 0x7FFFFFFF) + 8);
        }
        uint64_t v47 = *v46;
        if (*v46)
        {
          uint64_t v48 = *(void *)(v47 + 16);
          *(void *)(v47 + 16) = v42;
          *(void *)(v42 + 16) = v48;
          if (*(unsigned char *)(v42 + 3))
          {
            *(void *)(v42 + 24) = v47;
          }
          else
          {
            *(void *)(v42 + 24) = 0;
            uint64_t v46 = (uint64_t *)(v48 + 24);
          }
        }
        else
        {
          *(void *)(v42 + 16) = v42;
          *(void *)(v42 + 24) = 0;
        }
        *uint64_t v46 = v42;
      }
      v42 += 32;
      v44 -= 32;
    }
    while (v44);
  }
  uint64_t v39 = *(void *)(v37 + 728);
  if (v39) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v39 + 24))(v39, v17);
  }
  unint64_t v40 = *a4 & 0xFFFFFFFFFFFFFFF8;
  *(void *)int v17 = v40 | *(void *)v17 & 7;
  *((void *)v17 + 1) = a4;
  *(void *)(v40 + 8) = v17;
  *a4 = *a4 & 7 | (unint64_t)v17;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  LODWORD(v58) = 0x1000000;
  HIDWORD(v58) = a5;
  llvm::MachineInstr::addOperand(v17, v35, (const llvm::MachineOperand *)&v58);
  LODWORD(v58) = 1;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  llvm::MachineInstr::addOperand(v17, v35, (const llvm::MachineOperand *)&v58);
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v58 = 0x4200000000;
  uint64_t v61 = 0;
  llvm::MachineInstr::addOperand(v17, v35, (const llvm::MachineOperand *)&v58);
  LODWORD(v58) = 1;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  llvm::MachineInstr::addOperand(v17, v35, (const llvm::MachineOperand *)&v58);
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  LODWORD(v58) = 0;
  HIDWORD(v58) = v18;
  uint64_t v61 = 0;
  llvm::MachineInstr::addOperand(v17, v35, (const llvm::MachineOperand *)&v58);
  LODWORD(v58) = 1;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  llvm::MachineInstr::addOperand(v17, v35, (const llvm::MachineOperand *)&v58);
  sub_1CB94BB3C(a1, a3, (unint64_t *)v17, v13, v18, v6, 0);
  return v17;
}

uint64_t sub_1CB952700(int a1, int a2, unsigned char *a3)
{
  if (a3[318])
  {
    unsigned int v5 = 4;
  }
  else if (a3[319])
  {
    unsigned int v5 = 3;
  }
  else if (a3[320])
  {
    unsigned int v5 = 2;
  }
  else
  {
    unsigned int v5 = a3[321];
  }
  return sub_1CB95B138(v5, a1, a2);
}

llvm::MachineInstr *sub_1CB952744(uint64_t a1, int a2, uint64_t a3, unint64_t *a4, char a5)
{
  if (!a2) {
    return 0;
  }
  uint64_t v12 = *(void *)(a1 + 8) + 392928;
  uint64_t v13 = *(llvm::MachineFunction **)(a3 + 32);
  uint64_t v29 = 0;
  unsigned int v5 = llvm::MachineFunction::CreateMachineInstr(v13, v12, &v29, 0);
  if (v29) {
    llvm::MetadataTracking::untrack((uint64_t)&v29, v29);
  }
  uint64_t v14 = *(void *)(a3 + 40);
  *((void *)v5 + 3) = v14;
  uint64_t v15 = *(void *)(v14 + 32);
  uint64_t v16 = *((unsigned int *)v5 + 10);
  if (v16)
  {
    uint64_t v22 = *((void *)v5 + 4);
    uint64_t v23 = *(void *)(v15 + 40);
    uint64_t v24 = 32 * v16;
    do
    {
      if (!*(unsigned char *)v22)
      {
        uint64_t v25 = *(unsigned int *)(v22 + 4);
        if ((int)v25 >= 0) {
          unint64_t v26 = (uint64_t *)(*(void *)(v23 + 272) + 8 * v25);
        }
        else {
          unint64_t v26 = (uint64_t *)(*(void *)(v23 + 24) + 16 * (v25 & 0x7FFFFFFF) + 8);
        }
        uint64_t v27 = *v26;
        if (*v26)
        {
          uint64_t v28 = *(void *)(v27 + 16);
          *(void *)(v27 + 16) = v22;
          *(void *)(v22 + 16) = v28;
          if (*(unsigned char *)(v22 + 3))
          {
            *(void *)(v22 + 24) = v27;
          }
          else
          {
            *(void *)(v22 + 24) = 0;
            unint64_t v26 = (uint64_t *)(v28 + 24);
          }
        }
        else
        {
          *(void *)(v22 + 16) = v22;
          *(void *)(v22 + 24) = 0;
        }
        *unint64_t v26 = v22;
      }
      v22 += 32;
      v24 -= 32;
    }
    while (v24);
  }
  int v17 = (a2 + 3) >> 2;
  uint64_t v18 = *(void *)(v15 + 728);
  if (v18) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v18 + 24))(v18, v5);
  }
  unint64_t v19 = *a4 & 0xFFFFFFFFFFFFFFF8;
  *(void *)unsigned int v5 = v19 | *(void *)v5 & 7;
  *((void *)v5 + 1) = a4;
  *(void *)(v19 + 8) = v5;
  *a4 = *a4 & 7 | (unint64_t)v5;
  LODWORD(v29) = 1;
  uint64_t v30 = 0;
  uint64_t v31 = 512;
  llvm::MachineInstr::addOperand(v5, v13, (const llvm::MachineOperand *)&v29);
  LODWORD(v29) = 1;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  llvm::MachineInstr::addOperand(v5, v13, (const llvm::MachineOperand *)&v29);
  LODWORD(v29) = 1;
  uint64_t v30 = 0;
  uint64_t v31 = v17;
  llvm::MachineInstr::addOperand(v5, v13, (const llvm::MachineOperand *)&v29);
  if ((a5 & 1) == 0)
  {
    unsigned int v20 = *(void **)(a3 + 32);
    if (*(unsigned char *)(v20[1] + 1688))
    {
      uint64_t v21 = *(llvm::Module **)(*v20 + 40);
      uint64_t v29 = "agx.disable_gin_1102";
      __int16 v32 = 259;
      if (!llvm::Module::getNamedMetadata(v21, (const char **)&v29)) {
        return sub_1CB9520BC(a1, v17, a3, a4, 66);
      }
    }
  }
  return v5;
}

llvm::MachineInstr *sub_1CB952984(uint64_t a1, int a2, uint64_t a3, unint64_t *a4)
{
  if (*(unsigned char *)(*(void *)(a1 + 80) + 381)) {
    return sub_1CB952744(a1, a2, a3, a4, 0);
  }
  else {
    return sub_1CB9520BC(a1, a2, a3, a4, 66);
  }
}

uint64_t sub_1CB9529A0(void *a1, void *a2, uint64_t *a3, unsigned __int8 *a4, int a5, unsigned int a6, char a7)
{
  uint64_t v7 = (uint64_t *)a2[7];
  if (v7 != a3)
  {
    unsigned int v11 = 0;
    int v12 = *(unsigned __int8 *)(a1[10] + 318);
    unint64_t v13 = (unint64_t)a3;
    while (1)
    {
      unint64_t v13 = *(void *)v13 & 0xFFFFFFFFFFFFFFF8;
      if (v13 && (*(unsigned char *)v13 & 4) != 0)
      {
        __int16 v14 = *(_WORD *)(v13 + 44);
      }
      else
      {
        while (1)
        {
          __int16 v14 = *(_WORD *)(v13 + 44);
          if ((v14 & 4) == 0) {
            break;
          }
          unint64_t v13 = *(void *)v13 & 0xFFFFFFFFFFFFFFF8;
        }
      }
      int v15 = v14 & 0xC;
      int v16 = v14 & 4;
      int v17 = *(unsigned __int16 **)(v13 + 16);
      uint64_t v18 = *((void *)v17 + 1);
      if (v15) {
        BOOL v19 = v16 == 0;
      }
      else {
        BOOL v19 = 0;
      }
      if (v19)
      {
        unint64_t v87 = v13;
        if ((v18 & 0x80) != 0) {
          return 0;
        }
        while ((*(_WORD *)(v87 + 44) & 8) != 0)
        {
          uint64_t v39 = 0;
          unint64_t v87 = *(void *)(v87 + 8);
          if ((*(unsigned char *)(*(void *)(v87 + 16) + 8) & 0x80) != 0) {
            return v39;
          }
        }
      }
      else if ((v18 & 0x80) != 0)
      {
        return 0;
      }
      if ((v18 & 0x2000) != 0)
      {
        unsigned int v41 = *(_DWORD *)(*(void *)(v13 + 32) + 4);
        if (v41 == a6)
        {
          uint64_t v62 = a1[1] + 48 * *v17;
          unint64_t v54 = (llvm::MachineFunction *)a2[4];
          BOOL v89 = a4;
          if (a4) {
            llvm::MetadataTracking::track((uint64_t)&v89, a4, 2);
          }
          uint64_t v39 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v54, v62, &v89, 0);
          if (v89) {
            llvm::MetadataTracking::untrack((uint64_t)&v89, v89);
          }
          uint64_t v63 = a2[5];
          *(void *)(v39 + 24) = v63;
          uint64_t v64 = *(void *)(v63 + 32);
          uint64_t v65 = *(unsigned int *)(v39 + 40);
          if (v65)
          {
            uint64_t v68 = *(void *)(v39 + 32);
            uint64_t v69 = *(void *)(v64 + 40);
            uint64_t v70 = 32 * v65;
            do
            {
              if (!*(unsigned char *)v68)
              {
                uint64_t v71 = *(unsigned int *)(v68 + 4);
                if ((int)v71 >= 0) {
                  uint64_t v72 = (uint64_t *)(*(void *)(v69 + 272) + 8 * v71);
                }
                else {
                  uint64_t v72 = (uint64_t *)(*(void *)(v69 + 24) + 16 * (v71 & 0x7FFFFFFF) + 8);
                }
                uint64_t v73 = *v72;
                if (*v72)
                {
                  uint64_t v74 = *(void *)(v73 + 16);
                  *(void *)(v73 + 16) = v68;
                  *(void *)(v68 + 16) = v74;
                  if (*(unsigned char *)(v68 + 3))
                  {
                    *(void *)(v68 + 24) = v73;
                  }
                  else
                  {
                    *(void *)(v68 + 24) = 0;
                    uint64_t v72 = (uint64_t *)(v74 + 24);
                  }
                }
                else
                {
                  *(void *)(v68 + 16) = v68;
                  *(void *)(v68 + 24) = 0;
                }
                *uint64_t v72 = v68;
              }
              v68 += 32;
              v70 -= 32;
            }
            while (v70);
          }
          uint64_t v66 = *(void *)(v64 + 728);
          if (v66) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v66 + 24))(v66, v39);
          }
          unint64_t v67 = *a3 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t v39 = v67 | *(void *)v39 & 7;
          *(void *)(v39 + 8) = a3;
          *(void *)(v67 + 8) = v39;
          *a3 = *a3 & 7 | v39;
          uint64_t v92 = 0;
          uint64_t v93 = 0;
          uint64_t v94 = 0;
          int v90 = 0x1000000;
          int v91 = a5;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v39, v54, (const llvm::MachineOperand *)&v90);
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v39, v54, (const llvm::MachineOperand *)(*(void *)(v13 + 32) + 32));
          uint64_t v61 = (const llvm::MachineOperand *)(*(void *)(v13 + 32) + 64);
          goto LABEL_57;
        }
        if ((a7 & 1) == 0 && (*v17 & 0xFFFC) == 0xFE4)
        {
          uint64_t v42 = a1[12];
          uint64_t v43 = a1[18];
          uint64_t v44 = *(unsigned int *)(v42 + 24 * v41 + 4);
          int v45 = *(unsigned __int16 *)(v43 + 2 * v44);
          if (*(_WORD *)(v43 + 2 * v44))
          {
            LOWORD(v45) = v45 + v41;
            uint64_t v46 = (_WORD *)(a1[22] + 2 * *(unsigned int *)(v42 + 24 * v41 + 12));
            uint64_t v47 = (unsigned __int16 *)(v43 + 2 * v44 + 2);
            uint64_t v48 = v47;
            int v49 = v46;
            unsigned __int16 v50 = v45;
            do
            {
              if (*v49 == 1)
              {
                int v51 = v50;
                goto LABEL_34;
              }
              int v75 = *v48++;
              v50 += v75;
              ++v49;
            }
            while (v75);
            int v51 = 0;
            do
            {
LABEL_34:
              if (*v46 == 2)
              {
                int v45 = (unsigned __int16)v45;
                goto LABEL_36;
              }
              int v76 = *v47++;
              LOWORD(v45) = v76 + v45;
              ++v46;
            }
            while (v76);
            int v45 = 0;
          }
          else
          {
            int v51 = 0;
          }
LABEL_36:
          if (v51 == a6)
          {
            BOOL v19 = v12 == 0;
            uint64_t v77 = 195168;
            if (v19) {
              uint64_t v77 = 195216;
            }
            uint64_t v78 = a1[1] + v77;
            unint64_t v54 = (llvm::MachineFunction *)a2[4];
            BOOL v89 = a4;
            if (a4) {
              llvm::MetadataTracking::track((uint64_t)&v89, a4, 2);
            }
            uint64_t v39 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v54, v78, &v89, 0);
            if (v89) {
              llvm::MetadataTracking::untrack((uint64_t)&v89, v89);
            }
            llvm::ilist_traits<llvm::MachineInstr>::addNodeToList(a2 + 5, v39);
            unint64_t v79 = *a3 & 0xFFFFFFFFFFFFFFF8;
            *(void *)uint64_t v39 = v79 | *(void *)v39 & 7;
            *(void *)(v39 + 8) = a3;
            *(void *)(v79 + 8) = v39;
            *a3 = *a3 & 7 | v39;
            uint64_t v92 = 0;
            uint64_t v93 = 0;
            uint64_t v94 = 0;
            int v90 = 0x1000000;
            int v91 = a5;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v39, v54, (const llvm::MachineOperand *)&v90);
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v39, v54, (const llvm::MachineOperand *)(*(void *)(v13 + 32) + 32));
            uint64_t v60 = *(unsigned __int16 *)(*(void *)(v13 + 32) + 80);
LABEL_48:
            int v90 = 1;
            uint64_t v92 = 0;
            uint64_t v93 = v60;
            uint64_t v61 = (const llvm::MachineOperand *)&v90;
LABEL_57:
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v39, v54, v61);
            return v39;
          }
          if (v45 == a6)
          {
            BOOL v19 = v12 == 0;
            uint64_t v52 = 195168;
            if (v19) {
              uint64_t v52 = 195216;
            }
            uint64_t v53 = a1[1] + v52;
            unint64_t v54 = (llvm::MachineFunction *)a2[4];
            BOOL v89 = a4;
            if (a4) {
              llvm::MetadataTracking::track((uint64_t)&v89, a4, 2);
            }
            uint64_t v39 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v54, v53, &v89, 0);
            if (v89) {
              llvm::MetadataTracking::untrack((uint64_t)&v89, v89);
            }
            uint64_t v55 = a2[5];
            *(void *)(v39 + 24) = v55;
            uint64_t v56 = *(void *)(v55 + 32);
            uint64_t v57 = *(unsigned int *)(v39 + 40);
            if (v57)
            {
              uint64_t v80 = *(void *)(v39 + 32);
              uint64_t v81 = *(void *)(v56 + 40);
              uint64_t v82 = 32 * v57;
              do
              {
                if (!*(unsigned char *)v80)
                {
                  uint64_t v83 = *(unsigned int *)(v80 + 4);
                  if ((int)v83 >= 0) {
                    uint64_t v84 = (uint64_t *)(*(void *)(v81 + 272) + 8 * v83);
                  }
                  else {
                    uint64_t v84 = (uint64_t *)(*(void *)(v81 + 24) + 16 * (v83 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v85 = *v84;
                  if (*v84)
                  {
                    uint64_t v86 = *(void *)(v85 + 16);
                    *(void *)(v85 + 16) = v80;
                    *(void *)(v80 + 16) = v86;
                    if (*(unsigned char *)(v80 + 3))
                    {
                      *(void *)(v80 + 24) = v85;
                    }
                    else
                    {
                      *(void *)(v80 + 24) = 0;
                      uint64_t v84 = (uint64_t *)(v86 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v80 + 16) = v80;
                    *(void *)(v80 + 24) = 0;
                  }
                  *uint64_t v84 = v80;
                }
                v80 += 32;
                v82 -= 32;
              }
              while (v82);
            }
            uint64_t v58 = *(void *)(v56 + 728);
            if (v58) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v58 + 24))(v58, v39);
            }
            unint64_t v59 = *a3 & 0xFFFFFFFFFFFFFFF8;
            *(void *)uint64_t v39 = v59 | *(void *)v39 & 7;
            *(void *)(v39 + 8) = a3;
            *(void *)(v59 + 8) = v39;
            *a3 = *a3 & 7 | v39;
            uint64_t v92 = 0;
            uint64_t v93 = 0;
            uint64_t v94 = 0;
            int v90 = 0x1000000;
            int v91 = a5;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v39, v54, (const llvm::MachineOperand *)&v90);
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v39, v54, (const llvm::MachineOperand *)(*(void *)(v13 + 32) + 32));
            uint64_t v60 = *(uint64_t *)(*(void *)(v13 + 32) + 80) >> 16;
            goto LABEL_48;
          }
        }
      }
      uint64_t v20 = *(unsigned int *)(v13 + 40);
      if (v20) {
        break;
      }
LABEL_23:
      uint64_t v39 = 0;
      if ((uint64_t *)v13 != v7 && v11++ < 0xF) {
        continue;
      }
      return v39;
    }
    uint64_t v21 = 0;
    uint64_t v22 = *(void *)(v13 + 32);
    while ((*(_DWORD *)(v22 + 32 * v21) & 0x30000FF) != 0x1000000)
    {
LABEL_15:
      if (++v21 == v20) {
        goto LABEL_23;
      }
    }
    unsigned int v23 = *(_DWORD *)(v22 + 32 * v21 + 4);
    uint64_t v24 = a1[12];
    unint64_t v25 = *(unsigned int *)(v24 + 24 * v23 + 16);
    __int16 v26 = v25 & 0xF;
    uint64_t v27 = a1[18];
    uint64_t v28 = (_WORD *)(v27 + ((v25 >> 3) & 0x1FFFFFFE));
    __int16 v29 = *v28 + v26 * v23;
    unint64_t v30 = *(unsigned int *)(v24 + 24 * a6 + 16);
    __int16 v31 = v30 & 0xF;
    __int16 v32 = (_WORD *)(v27 + ((v30 >> 3) & 0x1FFFFFFE));
    __int16 v34 = *v32;
    uint64_t v33 = v32 + 1;
    __int16 v35 = v34 + v31 * a6;
LABEL_18:
    ++v28;
    uint64_t v36 = v33;
    __int16 v37 = v35;
    while (v29 != v37)
    {
      int v38 = *v36++;
      v37 += v38;
      if (!v38)
      {
        v29 += *v28;
        if (*v28) {
          goto LABEL_18;
        }
        goto LABEL_15;
      }
    }
  }
  return 0;
}

llvm::MachineFunction *sub_1CB953068(void *a1, void *a2, uint64_t *a3, unsigned __int8 **a4, int a5, unsigned int a6, int a7)
{
  __int16 v14 = *a4;
  unint64_t v67 = v14;
  if (v14)
  {
    llvm::MetadataTracking::track((uint64_t)&v67, v14, 2);
    int v15 = v67;
  }
  else
  {
    int v15 = 0;
  }
  uint64_t v16 = sub_1CB9529A0(a1, a2, a3, v15, a5, a6, 1);
  if (!v67) {
    goto LABEL_4;
  }
  int v26 = *v67;
  if ((v26 - 4) > 0x1E)
  {
    if ((v26 - 3) >= 0xFFFFFFFE) {
      uint64_t v58 = v67;
    }
    else {
      uint64_t v58 = 0;
    }
    if ((v26 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v28 = (unint64_t)(v58 + 8);
LABEL_49:
      uint64_t v68 = &v67;
      sub_1CC5FA668(v28 + 16, &v68);
      goto LABEL_4;
    }
    if (v26 == 3) {
      *((void *)v67 + 1) = 0;
    }
  }
  else if ((v67[1] & 0x7F) == 2 || *((_DWORD *)v67 + 3))
  {
    uint64_t v27 = *((void *)v67 + 2);
    if ((v27 & 4) != 0)
    {
      unint64_t v28 = v27 & 0xFFFFFFFFFFFFFFF8;
      if (v28) {
        goto LABEL_49;
      }
    }
  }
LABEL_4:
  if (!v16)
  {
    if (*(unsigned char *)(a1[10] + 318))
    {
      uint64_t v36 = a1[1] + 90768;
      __int16 v37 = (llvm::MachineFunction *)a2[4];
      int v38 = *a4;
      v66[0] = v38;
      if (v38) {
        llvm::MetadataTracking::track((uint64_t)v66, v38, 2);
      }
      MachineInstr = llvm::MachineFunction::CreateMachineInstr(v37, v36, v66, 0);
      if (v66[0]) {
        llvm::MetadataTracking::untrack((uint64_t)v66, v66[0]);
      }
      uint64_t v40 = a2[5];
      *((void *)MachineInstr + 3) = v40;
      uint64_t v41 = *(void *)(v40 + 32);
      uint64_t v42 = *((unsigned int *)MachineInstr + 10);
      if (v42)
      {
        uint64_t v59 = *((void *)MachineInstr + 4);
        uint64_t v60 = *(void *)(v41 + 40);
        uint64_t v61 = 32 * v42;
        do
        {
          if (!*(unsigned char *)v59)
          {
            uint64_t v62 = *(unsigned int *)(v59 + 4);
            if ((int)v62 >= 0) {
              uint64_t v63 = (uint64_t *)(*(void *)(v60 + 272) + 8 * v62);
            }
            else {
              uint64_t v63 = (uint64_t *)(*(void *)(v60 + 24) + 16 * (v62 & 0x7FFFFFFF) + 8);
            }
            uint64_t v64 = *v63;
            if (*v63)
            {
              uint64_t v65 = *(void *)(v64 + 16);
              *(void *)(v64 + 16) = v59;
              *(void *)(v59 + 16) = v65;
              if (*(unsigned char *)(v59 + 3))
              {
                *(void *)(v59 + 24) = v64;
              }
              else
              {
                *(void *)(v59 + 24) = 0;
                uint64_t v63 = (uint64_t *)(v65 + 24);
              }
            }
            else
            {
              *(void *)(v59 + 16) = v59;
              *(void *)(v59 + 24) = 0;
            }
            *uint64_t v63 = v59;
          }
          v59 += 32;
          v61 -= 32;
        }
        while (v61);
      }
      uint64_t v43 = *(void *)(v41 + 728);
      if (v43) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v43 + 24))(v43, MachineInstr);
      }
      unint64_t v44 = *a3 & 0xFFFFFFFFFFFFFFF8;
      *(void *)MachineInstr = v44 | *(void *)MachineInstr & 7;
      *((void *)MachineInstr + 1) = a3;
      *(void *)(v44 + 8) = MachineInstr;
      *a3 = *a3 & 7 | (unint64_t)MachineInstr;
      uint64_t v69 = 0;
      uint64_t v70 = 0;
      uint64_t v71 = 0;
      LODWORD(v68) = 0x1000000;
      HIDWORD(v68) = a5;
      llvm::MachineInstr::addOperand(MachineInstr, v37, (const llvm::MachineOperand *)&v68);
      v66[0] = (unsigned __int8 *)v37;
      v66[1] = (unsigned __int8 *)MachineInstr;
      LODWORD(v68) = 1;
      uint64_t v69 = 0;
      uint64_t v70 = 0;
      llvm::MachineInstr::addOperand(MachineInstr, v37, (const llvm::MachineOperand *)&v68);
      LODWORD(v68) = 1;
      uint64_t v69 = 0;
      uint64_t v70 = 0;
      llvm::MachineInstr::addOperand(MachineInstr, v37, (const llvm::MachineOperand *)&v68);
      if (a7) {
        unsigned int v45 = 8;
      }
      else {
        unsigned int v45 = 0;
      }
      uint64_t v46 = sub_1CB89517C((llvm::MachineFunction **)v66, a6, v45, 0);
      uint64_t v47 = v46[1];
      uint64_t v48 = *v46;
      LODWORD(v68) = 1;
      uint64_t v69 = 0;
      uint64_t v70 = 0;
      llvm::MachineInstr::addOperand(v47, v48, (const llvm::MachineOperand *)&v68);
      int v49 = sub_1CB89517C(v46, a6, v45, 0);
      unsigned __int16 v50 = v49[1];
      int v51 = *v49;
      LODWORD(v68) = 1;
      uint64_t v69 = 0;
      uint64_t v70 = 0;
      llvm::MachineInstr::addOperand(v50, v51, (const llvm::MachineOperand *)&v68);
      uint64_t v52 = sub_1CB89517C(v49, a6, v45, 0);
      uint64_t v53 = v52[1];
      unint64_t v54 = *v52;
      LODWORD(v68) = 1;
      uint64_t v69 = 0;
      uint64_t v70 = 0;
      llvm::MachineInstr::addOperand(v53, v54, (const llvm::MachineOperand *)&v68);
      uint64_t v55 = sub_1CB89517C(v52, a6, v45, 0);
      uint64_t v56 = v55[1];
      uint64_t v57 = *v55;
      LODWORD(v68) = 1;
      uint64_t v69 = 0;
      uint64_t v70 = 0;
      llvm::MachineInstr::addOperand(v56, v57, (const llvm::MachineOperand *)&v68);
      return v55[1];
    }
    else
    {
      uint64_t v17 = a1[1] + 35424;
      uint64_t v18 = (llvm::MachineFunction *)a2[4];
      BOOL v19 = *a4;
      v66[0] = v19;
      if (v19) {
        llvm::MetadataTracking::track((uint64_t)v66, v19, 2);
      }
      uint64_t v16 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v18, v17, v66, 0);
      if (v66[0]) {
        llvm::MetadataTracking::untrack((uint64_t)v66, v66[0]);
      }
      uint64_t v20 = a2[5];
      *(void *)(v16 + 24) = v20;
      uint64_t v21 = *(void *)(v20 + 32);
      uint64_t v22 = *(unsigned int *)(v16 + 40);
      if (v22)
      {
        uint64_t v29 = *(void *)(v16 + 32);
        uint64_t v30 = *(void *)(v21 + 40);
        uint64_t v31 = 32 * v22;
        do
        {
          if (!*(unsigned char *)v29)
          {
            uint64_t v32 = *(unsigned int *)(v29 + 4);
            if ((int)v32 >= 0) {
              uint64_t v33 = (uint64_t *)(*(void *)(v30 + 272) + 8 * v32);
            }
            else {
              uint64_t v33 = (uint64_t *)(*(void *)(v30 + 24) + 16 * (v32 & 0x7FFFFFFF) + 8);
            }
            uint64_t v34 = *v33;
            if (*v33)
            {
              uint64_t v35 = *(void *)(v34 + 16);
              *(void *)(v34 + 16) = v29;
              *(void *)(v29 + 16) = v35;
              if (*(unsigned char *)(v29 + 3))
              {
                *(void *)(v29 + 24) = v34;
              }
              else
              {
                *(void *)(v29 + 24) = 0;
                uint64_t v33 = (uint64_t *)(v35 + 24);
              }
            }
            else
            {
              *(void *)(v29 + 16) = v29;
              *(void *)(v29 + 24) = 0;
            }
            uint64_t *v33 = v29;
          }
          v29 += 32;
          v31 -= 32;
        }
        while (v31);
      }
      uint64_t v23 = *(void *)(v21 + 728);
      if (v23) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 24))(v23, v16);
      }
      unint64_t v24 = *a3 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v16 = v24 | *(void *)v16 & 7;
      *(void *)(v16 + 8) = a3;
      *(void *)(v24 + 8) = v16;
      *a3 = *a3 & 7 | v16;
      uint64_t v69 = 0;
      uint64_t v70 = 0;
      uint64_t v71 = 0;
      LODWORD(v68) = 0x1000000;
      HIDWORD(v68) = a5;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v18, (const llvm::MachineOperand *)&v68);
      LODWORD(v68) = 1;
      uint64_t v69 = 0;
      uint64_t v70 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v18, (const llvm::MachineOperand *)&v68);
      uint64_t v69 = 0;
      uint64_t v70 = 0;
      LODWORD(v68) = 0;
      HIDWORD(v68) = a6;
      uint64_t v71 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v18, (const llvm::MachineOperand *)&v68);
      LODWORD(v68) = 1;
      uint64_t v69 = 0;
      uint64_t v70 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v18, (const llvm::MachineOperand *)&v68);
    }
  }
  return (llvm::MachineFunction *)v16;
}

llvm::MachineFunction *sub_1CB9535C8(void *a1, void *a2, uint64_t *a3, unsigned __int8 **a4, int a5, unsigned int a6, int a7)
{
  __int16 v14 = *a4;
  uint64_t v63 = v14;
  if (v14)
  {
    llvm::MetadataTracking::track((uint64_t)&v63, v14, 2);
    int v15 = v63;
  }
  else
  {
    int v15 = 0;
  }
  uint64_t v16 = sub_1CB9529A0(a1, a2, a3, v15, a5, a6, 0);
  if (v63) {
    llvm::MetadataTracking::untrack((uint64_t)&v63, v63);
  }
  if (!v16)
  {
    if (*(unsigned char *)(a1[10] + 318))
    {
      uint64_t v33 = a1[1] + 49056;
      uint64_t v34 = (llvm::MachineFunction *)a2[4];
      uint64_t v35 = *a4;
      v62[0] = v35;
      if (v35) {
        llvm::MetadataTracking::track((uint64_t)v62, v35, 2);
      }
      MachineInstr = llvm::MachineFunction::CreateMachineInstr(v34, v33, v62, 0);
      if (v62[0]) {
        llvm::MetadataTracking::untrack((uint64_t)v62, v62[0]);
      }
      uint64_t v37 = a2[5];
      *((void *)MachineInstr + 3) = v37;
      uint64_t v38 = *(void *)(v37 + 32);
      uint64_t v39 = *((unsigned int *)MachineInstr + 10);
      if (v39)
      {
        uint64_t v55 = *((void *)MachineInstr + 4);
        uint64_t v56 = *(void *)(v38 + 40);
        uint64_t v57 = 32 * v39;
        do
        {
          if (!*(unsigned char *)v55)
          {
            uint64_t v58 = *(unsigned int *)(v55 + 4);
            if ((int)v58 >= 0) {
              uint64_t v59 = (uint64_t *)(*(void *)(v56 + 272) + 8 * v58);
            }
            else {
              uint64_t v59 = (uint64_t *)(*(void *)(v56 + 24) + 16 * (v58 & 0x7FFFFFFF) + 8);
            }
            uint64_t v60 = *v59;
            if (*v59)
            {
              uint64_t v61 = *(void *)(v60 + 16);
              *(void *)(v60 + 16) = v55;
              *(void *)(v55 + 16) = v61;
              if (*(unsigned char *)(v55 + 3))
              {
                *(void *)(v55 + 24) = v60;
              }
              else
              {
                *(void *)(v55 + 24) = 0;
                uint64_t v59 = (uint64_t *)(v61 + 24);
              }
            }
            else
            {
              *(void *)(v55 + 16) = v55;
              *(void *)(v55 + 24) = 0;
            }
            uint64_t *v59 = v55;
          }
          v55 += 32;
          v57 -= 32;
        }
        while (v57);
      }
      uint64_t v40 = *(void *)(v38 + 728);
      if (v40) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v40 + 24))(v40, MachineInstr);
      }
      unint64_t v41 = *a3 & 0xFFFFFFFFFFFFFFF8;
      *(void *)MachineInstr = v41 | *(void *)MachineInstr & 7;
      *((void *)MachineInstr + 1) = a3;
      *(void *)(v41 + 8) = MachineInstr;
      *a3 = *a3 & 7 | (unint64_t)MachineInstr;
      uint64_t v66 = 0;
      uint64_t v67 = 0;
      uint64_t v68 = 0;
      int v64 = 0x1000000;
      unsigned int v65 = a5;
      llvm::MachineInstr::addOperand(MachineInstr, v34, (const llvm::MachineOperand *)&v64);
      v62[0] = (unsigned __int8 *)v34;
      v62[1] = (unsigned __int8 *)MachineInstr;
      int v64 = 1;
      uint64_t v66 = 0;
      uint64_t v67 = 0;
      llvm::MachineInstr::addOperand(MachineInstr, v34, (const llvm::MachineOperand *)&v64);
      int v64 = 1;
      uint64_t v66 = 0;
      uint64_t v67 = 0;
      llvm::MachineInstr::addOperand(MachineInstr, v34, (const llvm::MachineOperand *)&v64);
      if (a7) {
        unsigned int v42 = 8;
      }
      else {
        unsigned int v42 = 0;
      }
      uint64_t v43 = sub_1CB89517C((llvm::MachineFunction **)v62, a6, v42, 0);
      unint64_t v44 = v43[1];
      unsigned int v45 = *v43;
      int v64 = 1;
      uint64_t v66 = 0;
      uint64_t v67 = 0;
      llvm::MachineInstr::addOperand(v44, v45, (const llvm::MachineOperand *)&v64);
      uint64_t v46 = sub_1CB89517C(v43, a6, v42, 0);
      uint64_t v47 = v46[1];
      uint64_t v48 = *v46;
      int v64 = 1;
      uint64_t v66 = 0;
      uint64_t v67 = 0;
      llvm::MachineInstr::addOperand(v47, v48, (const llvm::MachineOperand *)&v64);
      int v49 = sub_1CB89517C(v46, a6, v42, 0);
      unsigned __int16 v50 = v49[1];
      int v51 = *v49;
      int v64 = 1;
      uint64_t v66 = 0;
      uint64_t v67 = 0;
      llvm::MachineInstr::addOperand(v50, v51, (const llvm::MachineOperand *)&v64);
      uint64_t v52 = sub_1CB89517C(v49, a6, v42, 0);
      uint64_t v53 = v52[1];
      unint64_t v54 = *v52;
      int v64 = 1;
      uint64_t v66 = 0;
      uint64_t v67 = 0;
      llvm::MachineInstr::addOperand(v53, v54, (const llvm::MachineOperand *)&v64);
      return v52[1];
    }
    else
    {
      uint64_t v17 = a1[1] + 35616;
      uint64_t v18 = (llvm::MachineFunction *)a2[4];
      BOOL v19 = *a4;
      v62[0] = v19;
      if (v19) {
        llvm::MetadataTracking::track((uint64_t)v62, v19, 2);
      }
      uint64_t v16 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v18, v17, v62, 0);
      if (v62[0]) {
        llvm::MetadataTracking::untrack((uint64_t)v62, v62[0]);
      }
      uint64_t v20 = a2[5];
      *(void *)(v16 + 24) = v20;
      uint64_t v21 = *(void *)(v20 + 32);
      uint64_t v22 = *(unsigned int *)(v16 + 40);
      if (v22)
      {
        uint64_t v26 = *(void *)(v16 + 32);
        uint64_t v27 = *(void *)(v21 + 40);
        uint64_t v28 = 32 * v22;
        do
        {
          if (!*(unsigned char *)v26)
          {
            uint64_t v29 = *(unsigned int *)(v26 + 4);
            if ((int)v29 >= 0) {
              uint64_t v30 = (uint64_t *)(*(void *)(v27 + 272) + 8 * v29);
            }
            else {
              uint64_t v30 = (uint64_t *)(*(void *)(v27 + 24) + 16 * (v29 & 0x7FFFFFFF) + 8);
            }
            uint64_t v31 = *v30;
            if (*v30)
            {
              uint64_t v32 = *(void *)(v31 + 16);
              *(void *)(v31 + 16) = v26;
              *(void *)(v26 + 16) = v32;
              if (*(unsigned char *)(v26 + 3))
              {
                *(void *)(v26 + 24) = v31;
              }
              else
              {
                *(void *)(v26 + 24) = 0;
                uint64_t v30 = (uint64_t *)(v32 + 24);
              }
            }
            else
            {
              *(void *)(v26 + 16) = v26;
              *(void *)(v26 + 24) = 0;
            }
            *uint64_t v30 = v26;
          }
          v26 += 32;
          v28 -= 32;
        }
        while (v28);
      }
      uint64_t v23 = *(void *)(v21 + 728);
      if (v23) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 24))(v23, v16);
      }
      unint64_t v24 = *a3 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v16 = v24 | *(void *)v16 & 7;
      *(void *)(v16 + 8) = a3;
      *(void *)(v24 + 8) = v16;
      *a3 = *a3 & 7 | v16;
      uint64_t v66 = 0;
      uint64_t v67 = 0;
      uint64_t v68 = 0;
      int v64 = 0x1000000;
      unsigned int v65 = a5;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v18, (const llvm::MachineOperand *)&v64);
      int v64 = 1;
      uint64_t v66 = 0;
      uint64_t v67 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v18, (const llvm::MachineOperand *)&v64);
      uint64_t v66 = 0;
      uint64_t v67 = 0;
      int v64 = 0;
      unsigned int v65 = a6;
      uint64_t v68 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v18, (const llvm::MachineOperand *)&v64);
      int v64 = 1;
      uint64_t v66 = 0;
      uint64_t v67 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v18, (const llvm::MachineOperand *)&v64);
    }
  }
  return (llvm::MachineFunction *)v16;
}

void sub_1CB953ABC(void *a1, void *a2, uint64_t *a3, unsigned __int8 **a4, unsigned int a5, unsigned int a6, int a7)
{
  uint64_t v11 = a5 >> 3;
  if (a5 - 1 > 0x3FFFFFFE) {
    goto LABEL_31;
  }
  if (a5 > 0xB7)
  {
    if (a5 <= 0x1BF)
    {
      uint64_t v14 = v11;
      int v12 = 1 << (a5 & 7);
      goto LABEL_21;
    }
LABEL_31:
    uint64_t v22 = 0;
    uint64_t v23 = (llvm::MachineFunction *)a2[4];
    uint64_t v79 = *((void *)v23 + 5);
    unint64_t v24 = (unint64_t)a6 >> 3;
    while (1)
    {
      if (a5 - 1 <= 0x3FFFFFFE)
      {
        uint64_t v25 = (uint64_t)*(&off_1E66A9740)[v22];
        unsigned int v26 = *(unsigned __int16 *)(v25 + 22);
        if (v11 < v26)
        {
          uint64_t v27 = *(void *)(v25 + 8);
          BOOL v28 = ((1 << (a5 & 7)) & *(unsigned __int8 *)(v27 + v11)) == 0 || a6 - 1 > 0x3FFFFFFE;
          BOOL v29 = v28 || v24 >= v26;
          if (!v29 && ((1 << (a6 & 7)) & *(unsigned __int8 *)(v27 + v24)) != 0) {
            break;
          }
        }
      }
      v22 += 3;
      if (v22 == 42) {
        return;
      }
    }
    int v78 = HIDWORD((&off_1E66A9740)[v22 + 1]);
    uint64_t v31 = a1 + 12;
    uint64_t v32 = a1[12];
    uint64_t v33 = a1[18];
    uint64_t v34 = *(unsigned int *)(v32 + 24 * a5 + 4);
    unsigned int v35 = *(unsigned __int16 *)(v33 + 2 * v34);
    if (!*(_WORD *)(v33 + 2 * v34)) {
      goto LABEL_50;
    }
    LOWORD(v35) = v35 + a5;
    uint64_t v36 = (unsigned __int16 *)(a1[22] + 2 * *(unsigned int *)(v32 + 24 * a5 + 12));
    uint64_t v37 = (unsigned __int16 *)(v33 + 2 * v34 + 2);
    while (v78 != *v36)
    {
      int v38 = *v37++;
      LOWORD(v35) = v38 + v35;
      ++v36;
      if (!v38)
      {
        unsigned int v35 = 0;
        goto LABEL_50;
      }
    }
    unsigned int v35 = (unsigned __int16)v35;
LABEL_50:
    if (v35 == a6) {
      BOOL v76 = 1;
    }
    else {
      BOOL v76 = v35 - 1 <= 0x3FFFFFFE && llvm::MCRegisterInfo::regsOverlap(v31, a6, v35);
    }
    int v42 = 0;
    unsigned int v74 = LODWORD((&off_1E66A9740)[v22 + 2]) - v78;
    int v75 = (int)(&off_1E66A9740)[v22 + 2];
    int v73 = LOBYTE((&off_1E66A9740)[v22 + 1]);
    int v77 = a7;
    while (1)
    {
      int v43 = v75 - v42;
      if (!v76) {
        int v43 = v42 + v78;
      }
      uint64_t v44 = a1[12];
      uint64_t v45 = a1[18];
      uint64_t v46 = *(unsigned int *)(v44 + 24 * a6 + 4);
      if (*(_WORD *)(v45 + 2 * v46))
      {
        unsigned __int16 v47 = *(_WORD *)(v45 + 2 * v46) + a6;
        uint64_t v48 = (unsigned __int16 *)(a1[22] + 2 * *(unsigned int *)(v44 + 24 * a6 + 12));
        int v49 = (unsigned __int16 *)(v45 + 2 * v46 + 2);
        while (v43 != *v48)
        {
          int v50 = *v49++;
          v47 += v50;
          ++v48;
          if (!v50) {
            goto LABEL_68;
          }
        }
        unsigned int v51 = v47;
      }
      else
      {
LABEL_68:
        unsigned int v51 = 0;
      }
      uint64_t v52 = *(unsigned int *)(v44 + 24 * a5 + 4);
      if (*(_WORD *)(v45 + 2 * v52))
      {
        unsigned __int16 v53 = *(_WORD *)(v45 + 2 * v52) + a5;
        unint64_t v54 = (unsigned __int16 *)(a1[22] + 2 * *(unsigned int *)(v44 + 24 * a5 + 12));
        uint64_t v55 = (unsigned __int16 *)(v45 + 2 * v52 + 2);
        while (v43 != *v54)
        {
          int v56 = *v55++;
          v53 += v56;
          ++v54;
          if (!v56) {
            goto LABEL_74;
          }
        }
        int v57 = v53;
      }
      else
      {
LABEL_74:
        int v57 = 0;
      }
      uint64_t v58 = *a4;
      if (v73)
      {
        uint64_t v86 = *a4;
        if (v58) {
          llvm::MetadataTracking::track((uint64_t)&v86, v58, 2);
        }
        int v59 = v57;
        unsigned __int8 v60 = v77;
        uint64_t v61 = sub_1CB953068(a1, a2, a3, &v86, v59, v51, v77);
        uint64_t v62 = v86;
        if (!v86) {
          goto LABEL_110;
        }
        int v63 = *v86;
        if ((v63 - 4) > 0x1E)
        {
          if ((v63 - 3) >= 0xFFFFFFFE) {
            uint64_t v68 = v86;
          }
          else {
            uint64_t v68 = 0;
          }
          if ((v63 - 3) < 0xFFFFFFFE) {
            goto LABEL_108;
          }
          unint64_t v65 = (unint64_t)(v68 + 8);
LABEL_100:
          uint64_t v69 = &v86;
          goto LABEL_107;
        }
        if ((v86[1] & 0x7F) != 2 && !*((_DWORD *)v86 + 3)) {
          goto LABEL_110;
        }
        uint64_t v64 = *((void *)v86 + 2);
        if ((v64 & 4) != 0)
        {
          unint64_t v65 = v64 & 0xFFFFFFFFFFFFFFF8;
          if (v65)
          {
            unsigned __int8 v60 = v77;
            goto LABEL_100;
          }
        }
      }
      else
      {
        uint64_t v85 = *a4;
        if (v58) {
          llvm::MetadataTracking::track((uint64_t)&v85, v58, 2);
        }
        int v66 = v57;
        unsigned __int8 v60 = v77;
        uint64_t v61 = sub_1CB9535C8(a1, a2, a3, &v85, v66, v51, v77);
        uint64_t v62 = v85;
        if (!v85) {
          goto LABEL_110;
        }
        int v63 = *v85;
        if ((v63 - 4) > 0x1E)
        {
          if ((v63 - 3) >= 0xFFFFFFFE) {
            uint64_t v70 = v85;
          }
          else {
            uint64_t v70 = 0;
          }
          if ((v63 - 3) < 0xFFFFFFFE)
          {
LABEL_108:
            if (v63 == 3) {
              *((void *)v62 + 1) = 0;
            }
            goto LABEL_110;
          }
          unint64_t v65 = (unint64_t)(v70 + 8);
LABEL_106:
          uint64_t v69 = &v85;
LABEL_107:
          BOOL v89 = v69;
          sub_1CC5FA668(v65 + 16, &v89);
          goto LABEL_110;
        }
        if ((v85[1] & 0x7F) != 2 && !*((_DWORD *)v85 + 3)) {
          goto LABEL_110;
        }
        uint64_t v67 = *((void *)v85 + 2);
        if ((v67 & 4) != 0)
        {
          unint64_t v65 = v67 & 0xFFFFFFFFFFFFFFF8;
          if (v65)
          {
            unsigned __int8 v60 = v77;
            goto LABEL_106;
          }
        }
      }
      unsigned __int8 v60 = v77;
LABEL_110:
      uint64_t v83 = v23;
      uint64_t v84 = v61;
      if (*(unsigned char *)(v79 + 16))
      {
        if (((v42 != 0) & v60) != 0) {
          unsigned int v71 = 36;
        }
        else {
          unsigned int v71 = 4;
        }
        sub_1CB89517C(&v83, a6, v71, 0);
      }
      else
      {
        uint64_t v90 = 0;
        uint64_t v91 = 0;
        uint64_t v92 = 0;
        LODWORD(v89) = 50331648;
        HIDWORD(v89) = a5;
        llvm::MachineInstr::addOperand(v61, v23, (const llvm::MachineOperand *)&v89);
        if (v42)
        {
          uint64_t v90 = 0;
          uint64_t v91 = 0;
          uint64_t v92 = 0;
          LODWORD(v89) = 0x2000000;
          HIDWORD(v89) = a5;
          llvm::MachineInstr::addOperand(v84, v83, (const llvm::MachineOperand *)&v89);
        }
      }
      if (++v42 > v74) {
        return;
      }
    }
  }
  int v12 = 1 << (a5 & 7);
  BOOL v13 = (v12 & byte_1CDE6FE30[v11]) == 0 || a6 - 1 > 0x3FFFFFFE;
  if (v13 || a6 > 0xB7)
  {
    uint64_t v14 = a5 >> 3;
LABEL_21:
    if ((v12 & byte_1CDE6F3CA[v14]) != 0)
    {
      uint64_t v20 = *a4;
      unint64_t v87 = v20;
      if (v20) {
        llvm::MetadataTracking::track((uint64_t)&v87, v20, 2);
      }
      sub_1CB9535C8(a1, a2, a3, &v87, a5, a6, a7);
      uint64_t v16 = v87;
      if (!v87) {
        return;
      }
      int v17 = *v87;
      if ((v17 - 4) > 0x1E)
      {
        if ((v17 - 3) >= 0xFFFFFFFE) {
          uint64_t v40 = v87;
        }
        else {
          uint64_t v40 = 0;
        }
        if ((v17 - 3) < 0xFFFFFFFE)
        {
LABEL_127:
          if (v17 == 3) {
            *((void *)v16 + 1) = 0;
          }
          return;
        }
        unint64_t v19 = (unint64_t)(v40 + 8);
      }
      else
      {
        if ((v87[1] & 0x7F) != 2 && !*((_DWORD *)v87 + 3)) {
          return;
        }
        uint64_t v21 = *((void *)v87 + 2);
        if ((v21 & 4) == 0) {
          return;
        }
        unint64_t v19 = v21 & 0xFFFFFFFFFFFFFFF8;
        if (!v19) {
          return;
        }
      }
      unint64_t v41 = &v87;
LABEL_126:
      BOOL v89 = v41;
      sub_1CC5FA668(v19 + 16, &v89);
      return;
    }
    goto LABEL_31;
  }
  uint64_t v14 = a5 >> 3;
  if (((byte_1CDE6FE30[a6 >> 3] >> (a6 & 7)) & 1) == 0) {
    goto LABEL_21;
  }
  int v15 = *a4;
  unsigned int v88 = v15;
  if (v15) {
    llvm::MetadataTracking::track((uint64_t)&v88, v15, 2);
  }
  sub_1CB953068(a1, a2, a3, &v88, a5, a6, a7);
  uint64_t v16 = v88;
  if (!v88) {
    return;
  }
  int v17 = *v88;
  if ((v17 - 4) > 0x1E)
  {
    if ((v17 - 3) >= 0xFFFFFFFE) {
      uint64_t v72 = v88;
    }
    else {
      uint64_t v72 = 0;
    }
    if ((v17 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v19 = (unint64_t)(v72 + 8);
LABEL_125:
      unint64_t v41 = &v88;
      goto LABEL_126;
    }
    goto LABEL_127;
  }
  if ((v88[1] & 0x7F) == 2 || *((_DWORD *)v88 + 3))
  {
    uint64_t v18 = *((void *)v88 + 2);
    if ((v18 & 4) != 0)
    {
      unint64_t v19 = v18 & 0xFFFFFFFFFFFFFFF8;
      if (v19) {
        goto LABEL_125;
      }
    }
  }
}

uint64_t sub_1CB954154(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  unsigned int v4 = **(unsigned __int16 **)(a2 + 16) - 321;
  if (v4 > 0xD) {
    return 0;
  }
  *a4 = dword_1CD971698[(__int16)v4];
  uint64_t v5 = *(void *)(a2 + 32);
  if (*(unsigned char *)v5 || *(unsigned char *)(v5 + 96) != 5 || *(unsigned char *)(v5 + 128) != 1 || *(void *)(v5 + 144)) {
    return 0;
  }
  *a3 = *(_DWORD *)(v5 + 112);
  return *(unsigned int *)(v5 + 4);
}

uint64_t sub_1CB9541C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)a1 + 72))(a1, a2, a3, &v4);
}

uint64_t sub_1CB954208(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  unsigned int v4 = **(unsigned __int16 **)(a2 + 16) - 342;
  if (v4 > 0xD) {
    return 0;
  }
  *a4 = dword_1CD971698[(__int16)v4];
  uint64_t v5 = *(void *)(a2 + 32);
  if (*(unsigned char *)(v5 + 64) || *(unsigned char *)(v5 + 96) != 5 || *(unsigned char *)(v5 + 128) != 1 || *(void *)(v5 + 144)) {
    return 0;
  }
  *a3 = *(_DWORD *)(v5 + 112);
  return *(unsigned int *)(v5 + 68);
}

uint64_t sub_1CB954274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, a3, &v4);
}

void sub_1CB9542BC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7)
{
  int v63 = 0;
  if (a2 + 48 != a3 && (unsigned __int8 **)(a3 + 56) != &v63)
  {
    uint64_t v14 = *(unsigned __int8 **)(a3 + 56);
    int v63 = v14;
    if (v14) {
      llvm::MetadataTracking::track((uint64_t)&v63, v14, 2);
    }
  }
  unint64_t v15 = *(unsigned __int16 *)(*(void *)a7 + 24);
  unint64_t v16 = v15 >> 5;
  int v17 = dword_1CDB0E7D0[v15 >> 5];
  int v18 = 1 << v15;
  int v58 = a4;
  if ((v18 & v17) != 0)
  {
    unsigned int v19 = 344;
  }
  else if ((dword_1CDB0ED40[v16] & v18) != 0)
  {
    unsigned int v19 = 349;
  }
  else if ((dword_1CDB0F040[v16] & v18) != 0)
  {
    unsigned int v19 = 351;
  }
  else if ((dword_1CDB0F308[v16] & v18) != 0)
  {
    unsigned int v19 = 352;
  }
  else if ((dword_1CDB0F5B0[v16] & v18) != 0)
  {
    unsigned int v19 = 354;
  }
  else if ((dword_1CDB0F968[v16] & v18) != 0)
  {
    unsigned int v19 = 355;
  }
  else if ((dword_1CDB0FA80[v16] & v18) != 0)
  {
    unsigned int v19 = 342;
  }
  else if ((dword_1CDB0FCA0[v16] & v18) != 0)
  {
    unsigned int v19 = 343;
  }
  else if ((dword_1CDB0FD40[v16] & v18) != 0)
  {
    unsigned int v19 = 345;
  }
  else if ((dword_1CDB0FDD0[v16] & v18) != 0)
  {
    unsigned int v19 = 346;
  }
  else if ((dword_1CDB0FE50[v16] & v18) != 0)
  {
    unsigned int v19 = 347;
  }
  else if ((dword_1CDB0FEC0[v16] & v18) != 0)
  {
    unsigned int v19 = 348;
  }
  else if ((dword_1CDB0FF10[v16] & v18) != 0)
  {
    unsigned int v19 = 350;
  }
  else
  {
    unsigned int v19 = 0;
  }
  uint64_t v20 = *(void *)(a2 + 32);
  uint64_t v21 = *(void *)(v20 + 56);
  FixedStacuint64_t k = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v20 + 432), a6);
  if (FixedStack) {
    int v23 = *((_DWORD *)FixedStack + 3);
  }
  else {
    int v23 = 0;
  }
  uint64_t v24 = *(void *)(v21 + 8) + 40 * (*(_DWORD *)(v21 + 32) + a6);
  uint64_t v25 = *(unsigned int *)(v24 + 8);
  char v26 = *(unsigned char *)(v24 + 16);
  v60[0] = (unint64_t)FixedStack | 4;
  v60[1] = 0;
  int v61 = v23;
  char v62 = 0;
  long long v64 = 0u;
  long long v65 = 0u;
  MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(v20, (uint64_t)v60, 2, v25, v26, &v64, 0, 1, 0, 0, 0);
  uint64_t v28 = *(void *)(a1 + 80);
  if (*(unsigned char *)(v28 + 371))
  {
    uint64_t v30 = 0;
  }
  else
  {
    uint64_t v29 = *(void *)v20;
    LODWORD(v64) = 0;
    if (sub_1CBA864D8(v28, v29, "MemoryWriteCacheCtl", (int *)&v64)) {
      uint64_t v30 = v64;
    }
    else {
      uint64_t v30 = 0;
    }
    uint64_t v28 = *(void *)(a1 + 80);
  }
  uint64_t v31 = *(void *)v20;
  LODWORD(v64) = 0;
  int v32 = sub_1CBA864D8(v28, v31, "MemoryWriteL2Pers", (int *)&v64);
  uint64_t v33 = v64;
  uint64_t v34 = *(void *)(a1 + 8) + 48 * v19;
  unsigned int v35 = *(llvm::MachineFunction **)(a2 + 32);
  *(void *)&long long v64 = v63;
  if (v63) {
    llvm::MetadataTracking::track((uint64_t)&v64, v63, 2);
  }
  MachineInstr = llvm::MachineFunction::CreateMachineInstr(v35, v34, (unsigned __int8 **)&v64, 0);
  if ((void)v64) {
    llvm::MetadataTracking::untrack((uint64_t)&v64, (unsigned __int8 *)v64);
  }
  uint64_t v37 = *(void *)(a2 + 40);
  *((void *)MachineInstr + 3) = v37;
  uint64_t v38 = *(void *)(v37 + 32);
  uint64_t v39 = *((unsigned int *)MachineInstr + 10);
  if (v39)
  {
    uint64_t v51 = *((void *)MachineInstr + 4);
    uint64_t v52 = *(void *)(v38 + 40);
    uint64_t v53 = 32 * v39;
    do
    {
      if (!*(unsigned char *)v51)
      {
        uint64_t v54 = *(unsigned int *)(v51 + 4);
        if ((int)v54 >= 0) {
          uint64_t v55 = (uint64_t *)(*(void *)(v52 + 272) + 8 * v54);
        }
        else {
          uint64_t v55 = (uint64_t *)(*(void *)(v52 + 24) + 16 * (v54 & 0x7FFFFFFF) + 8);
        }
        uint64_t v56 = *v55;
        if (*v55)
        {
          uint64_t v57 = *(void *)(v56 + 16);
          *(void *)(v56 + 16) = v51;
          *(void *)(v51 + 16) = v57;
          if (*(unsigned char *)(v51 + 3))
          {
            *(void *)(v51 + 24) = v56;
          }
          else
          {
            *(void *)(v51 + 24) = 0;
            uint64_t v55 = (uint64_t *)(v57 + 24);
          }
        }
        else
        {
          *(void *)(v51 + 16) = v51;
          *(void *)(v51 + 24) = 0;
        }
        uint64_t *v55 = v51;
      }
      v51 += 32;
      v53 -= 32;
    }
    while (v53);
  }
  uint64_t v40 = *(void *)(v38 + 728);
  if (v40) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v40 + 24))(v40, MachineInstr);
  }
  unint64_t v41 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
  *(void *)MachineInstr = v41 | *(void *)MachineInstr & 7;
  *((void *)MachineInstr + 1) = a3;
  *(void *)(v41 + 8) = MachineInstr;
  *(void *)a3 = *(void *)a3 & 7 | (unint64_t)MachineInstr;
  v59[0] = v35;
  v59[1] = MachineInstr;
  LODWORD(v64) = 1;
  *((void *)&v64 + 1) = 0;
  *(void *)&long long v65 = 0;
  llvm::MachineInstr::addOperand(MachineInstr, v35, (const llvm::MachineOperand *)&v64);
  uint64_t v42 = 4 * v33;
  if (!v32) {
    uint64_t v42 = 4;
  }
  if (v30 == 3) {
    uint64_t v42 = 4;
  }
  LODWORD(v64) = 1;
  *((void *)&v64 + 1) = 0;
  *(void *)&long long v65 = v42 | v30;
  llvm::MachineInstr::addOperand(MachineInstr, v35, (const llvm::MachineOperand *)&v64);
  if (a5) {
    unsigned int v43 = 8;
  }
  else {
    unsigned int v43 = 0;
  }
  uint64_t v44 = sub_1CB89517C(v59, v58, v43, 0);
  uint64_t v45 = v44[1];
  uint64_t v46 = *v44;
  LODWORD(v64) = 5;
  *((void *)&v64 + 1) = 0;
  LODWORD(v65) = a6;
  llvm::MachineInstr::addOperand(v45, v46, (const llvm::MachineOperand *)&v64);
  uint64_t v48 = *v44;
  unsigned __int16 v47 = v44[1];
  LODWORD(v64) = 1;
  *((void *)&v64 + 1) = 0;
  *(void *)&long long v65 = 0;
  llvm::MachineInstr::addOperand(v47, v48, (const llvm::MachineOperand *)&v64);
  int v50 = *v44;
  int v49 = v44[1];
  LODWORD(v64) = 1;
  *((void *)&v64 + 1) = 0;
  *(void *)&long long v65 = 0;
  llvm::MachineInstr::addOperand(v49, v50, (const llvm::MachineOperand *)&v64);
  llvm::MachineInstr::addMemOperand(v44[1], *v44, MachineMemOperand);
  if (v63) {
    llvm::MetadataTracking::untrack((uint64_t)&v63, v63);
  }
}

void sub_1CB9547D8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6)
{
  uint64_t v53 = 0;
  if (a2 + 48 != a3 && (unsigned __int8 **)(a3 + 56) != &v53)
  {
    int v12 = *(unsigned __int8 **)(a3 + 56);
    uint64_t v53 = v12;
    if (v12) {
      llvm::MetadataTracking::track((uint64_t)&v53, v12, 2);
    }
  }
  unint64_t v13 = *(unsigned __int16 *)(*(void *)a6 + 24);
  unint64_t v14 = v13 >> 5;
  int v15 = dword_1CDB0E7D0[v13 >> 5];
  int v16 = 1 << v13;
  if ((v16 & v15) != 0)
  {
    unsigned int v17 = 323;
  }
  else if ((dword_1CDB0ED40[v14] & v16) != 0)
  {
    unsigned int v17 = 328;
  }
  else if ((dword_1CDB0F040[v14] & v16) != 0)
  {
    unsigned int v17 = 330;
  }
  else if ((dword_1CDB0F308[v14] & v16) != 0)
  {
    unsigned int v17 = 331;
  }
  else if ((dword_1CDB0F5B0[v14] & v16) != 0)
  {
    unsigned int v17 = 333;
  }
  else if ((dword_1CDB0F968[v14] & v16) != 0)
  {
    unsigned int v17 = 334;
  }
  else if ((dword_1CDB0FA80[v14] & v16) != 0)
  {
    unsigned int v17 = 321;
  }
  else if ((dword_1CDB0FCA0[v14] & v16) != 0)
  {
    unsigned int v17 = 322;
  }
  else if ((dword_1CDB0FD40[v14] & v16) != 0)
  {
    unsigned int v17 = 324;
  }
  else if ((dword_1CDB0FDD0[v14] & v16) != 0)
  {
    unsigned int v17 = 325;
  }
  else if ((dword_1CDB0FE50[v14] & v16) != 0)
  {
    unsigned int v17 = 326;
  }
  else if ((dword_1CDB0FEC0[v14] & v16) != 0)
  {
    unsigned int v17 = 327;
  }
  else if ((dword_1CDB0FF10[v14] & v16) != 0)
  {
    unsigned int v17 = 329;
  }
  else
  {
    unsigned int v17 = 0;
  }
  uint64_t v18 = *(void *)(a2 + 32);
  uint64_t v19 = *(void *)(v18 + 56);
  FixedStacuint64_t k = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v18 + 432), a5);
  if (FixedStack) {
    int v21 = *((_DWORD *)FixedStack + 3);
  }
  else {
    int v21 = 0;
  }
  uint64_t v22 = *(void *)(v19 + 8) + 40 * (*(_DWORD *)(v19 + 32) + a5);
  uint64_t v23 = *(unsigned int *)(v22 + 8);
  char v24 = *(unsigned char *)(v22 + 16);
  v50[0] = (unint64_t)FixedStack | 4;
  v50[1] = 0;
  int v51 = v21;
  char v52 = 0;
  long long v55 = 0u;
  long long v56 = 0u;
  unint64_t MachineMemOperand = llvm::MachineFunction::getMachineMemOperand(v18, (uint64_t)v50, 1, v23, v24, &v55, 0, 1, 0, 0, 0);
  uint64_t v26 = *(void *)(a1 + 80);
  int v49 = (llvm::MachineMemOperand *)MachineMemOperand;
  int v27 = a5;
  if (*(unsigned char *)(v26 + 371))
  {
    uint64_t v29 = 0;
  }
  else
  {
    uint64_t v28 = *(void *)v18;
    LODWORD(v55) = 0;
    if (sub_1CBA864D8(v26, v28, "MemoryWriteCacheCtl", (int *)&v55)) {
      uint64_t v29 = v55;
    }
    else {
      uint64_t v29 = 0;
    }
    uint64_t v26 = *(void *)(a1 + 80);
  }
  uint64_t v30 = *(void *)v18;
  LODWORD(v55) = 0;
  int v31 = sub_1CBA864D8(v26, v30, "MemoryWriteL2Pers", (int *)&v55);
  uint64_t v32 = v55;
  uint64_t v33 = *(void *)(a1 + 8) + 48 * v17;
  uint64_t v34 = *(llvm::MachineFunction **)(a2 + 32);
  uint64_t v54 = v53;
  if (v53) {
    llvm::MetadataTracking::track((uint64_t)&v54, v53, 2);
  }
  unsigned int v35 = llvm::MachineFunction::CreateMachineInstr(v34, v33, &v54, 0);
  if (v54) {
    llvm::MetadataTracking::untrack((uint64_t)&v54, v54);
  }
  uint64_t v36 = *(void *)(a2 + 40);
  *((void *)v35 + 3) = v36;
  uint64_t v37 = *(void *)(v36 + 32);
  uint64_t v38 = *((unsigned int *)v35 + 10);
  if (v38)
  {
    uint64_t v42 = *((void *)v35 + 4);
    uint64_t v43 = *(void *)(v37 + 40);
    uint64_t v44 = 32 * v38;
    do
    {
      if (!*(unsigned char *)v42)
      {
        uint64_t v45 = *(unsigned int *)(v42 + 4);
        if ((int)v45 >= 0) {
          uint64_t v46 = (uint64_t *)(*(void *)(v43 + 272) + 8 * v45);
        }
        else {
          uint64_t v46 = (uint64_t *)(*(void *)(v43 + 24) + 16 * (v45 & 0x7FFFFFFF) + 8);
        }
        uint64_t v47 = *v46;
        if (*v46)
        {
          uint64_t v48 = *(void *)(v47 + 16);
          *(void *)(v47 + 16) = v42;
          *(void *)(v42 + 16) = v48;
          if (*(unsigned char *)(v42 + 3))
          {
            *(void *)(v42 + 24) = v47;
          }
          else
          {
            *(void *)(v42 + 24) = 0;
            uint64_t v46 = (uint64_t *)(v48 + 24);
          }
        }
        else
        {
          *(void *)(v42 + 16) = v42;
          *(void *)(v42 + 24) = 0;
        }
        *uint64_t v46 = v42;
      }
      v42 += 32;
      v44 -= 32;
    }
    while (v44);
  }
  uint64_t v39 = *(void *)(v37 + 728);
  if (v39) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v39 + 24))(v39, v35);
  }
  unint64_t v40 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
  *(void *)unsigned int v35 = v40 | *(void *)v35 & 7;
  *((void *)v35 + 1) = a3;
  *(void *)(v40 + 8) = v35;
  *(void *)a3 = *(void *)a3 & 7 | (unint64_t)v35;
  *((void *)&v55 + 1) = 0;
  long long v56 = 0uLL;
  LODWORD(v55) = 0x1000000;
  DWORD1(v55) = a4;
  llvm::MachineInstr::addOperand(v35, v34, (const llvm::MachineOperand *)&v55);
  LODWORD(v55) = 1;
  *((void *)&v55 + 1) = 0;
  *(void *)&long long v56 = 0;
  llvm::MachineInstr::addOperand(v35, v34, (const llvm::MachineOperand *)&v55);
  uint64_t v41 = 4 * v32;
  if (!v31) {
    uint64_t v41 = 4;
  }
  if (v29 == 3) {
    uint64_t v41 = 4;
  }
  LODWORD(v55) = 1;
  *((void *)&v55 + 1) = 0;
  *(void *)&long long v56 = v41 | v29;
  llvm::MachineInstr::addOperand(v35, v34, (const llvm::MachineOperand *)&v55);
  LODWORD(v55) = 5;
  *((void *)&v55 + 1) = 0;
  LODWORD(v56) = v27;
  llvm::MachineInstr::addOperand(v35, v34, (const llvm::MachineOperand *)&v55);
  LODWORD(v55) = 1;
  *((void *)&v55 + 1) = 0;
  *(void *)&long long v56 = 0;
  llvm::MachineInstr::addOperand(v35, v34, (const llvm::MachineOperand *)&v55);
  LODWORD(v55) = 1;
  *((void *)&v55 + 1) = 0;
  *(void *)&long long v56 = 0;
  llvm::MachineInstr::addOperand(v35, v34, (const llvm::MachineOperand *)&v55);
  llvm::MachineInstr::addMemOperand(v35, v34, v49);
  if (v53) {
    llvm::MetadataTracking::untrack((uint64_t)&v53, v53);
  }
}

uint64_t sub_1CB954CF8(uint64_t a1, uint64_t a2)
{
  int v2 = (void *)(a2 + 48);
  uint64_t v3 = *(void *)(a2 + 56);
  if (a2 + 48 == v3) {
    return 0;
  }
  unint64_t v5 = *v2 & 0xFFFFFFFFFFFFFFF8;
  if (!v5 || (*(unsigned char *)v5 & 4) == 0)
  {
    while ((*(_WORD *)(v5 + 44) & 4) != 0)
      unint64_t v5 = *(void *)v5 & 0xFFFFFFFFFFFFFFF8;
  }
  while (1)
  {
    int v6 = *(unsigned __int16 **)(v5 + 16);
    int v7 = *v6;
    BOOL v8 = (v7 - 9) > 0x3C || ((1 << (v7 - 9)) & 0x1000000000000605) == 0;
    BOOL v9 = !v8 || v7 == 0;
    if (!v9 && (v6[4] & 0x10) == 0) {
      break;
    }
    if (v5 == v3) {
      return 0;
    }
    unint64_t v5 = *(void *)v5 & 0xFFFFFFFFFFFFFFF8;
    if (!v5 || (*(unsigned char *)v5 & 4) == 0)
    {
      while ((*(_WORD *)(v5 + 44) & 4) != 0)
        unint64_t v5 = *(void *)v5 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  if (v7 != 288 && sub_1CB955634(v7) - 47 > 2) {
    return 0;
  }
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v5);
  if (v2 == *(void **)(a2 + 56)) {
    return 1;
  }
  unint64_t v11 = *v2 & 0xFFFFFFFFFFFFFFF8;
  if (!v11 || (*(unsigned char *)v11 & 4) == 0)
  {
    while ((*(_WORD *)(v11 + 44) & 4) != 0)
      unint64_t v11 = *(void *)v11 & 0xFFFFFFFFFFFFFFF8;
  }
  if (sub_1CB955634(**(unsigned __int16 **)(v11 + 16)) - 47 > 2) {
    return 1;
  }
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v11);
  return 2;
}

uint64_t sub_1CB954E54()
{
  return 0;
}

uint64_t sub_1CB954E5C(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3 = (int)result - 1;
  int v4 = dword_1CD9716D0[v3];
  *a2 = 16 * (~(-1 << dword_1CD971710[(int)v3]) & 0xF);
  *a3 = v4;
  return result;
}

uint64_t sub_1CB954E98(uint64_t a1, uint64_t a2, int a3)
{
  int v6 = *(unsigned __int16 **)(a1 + 16);
  int v7 = *v6;
  uint64_t result = sub_1CBC7A3F8(v7, 0x16u);
  uint64_t v9 = *((void *)v6 + 2);
  uint64_t v10 = *(void *)(a1 + 32);
  unint64_t v11 = *(void *)(v10 + 32 * result + 16);
  if ((v9 & 0xD00) == 0x500 || (v9 & 0xE00) == 0x600)
  {
    *(_DWORD *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 14) = 1;
    if ((v11 & 0x2000000000000000) == 0)
    {
      *(_DWORD *)(a2 + 8) = (v11 >> 54);
      *(unsigned char *)(a2 + 14) = 0;
    }
    int v12 = v11 >> 4;
  }
  else
  {
    int v12 = v11 >> 4;
    *(_DWORD *)(a2 + 4) = v12;
    uint64_t result = sub_1CBC7A3F8(v7, 0x3Du);
    if (*(unsigned char *)(v10 + 32 * result) == 1)
    {
      *(_DWORD *)(a2 + 8) = *(unsigned __int8 *)(v10 + 32 * result + 16);
      *(unsigned char *)(a2 + 14) = 0;
    }
    else
    {
      *(_DWORD *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 14) = 1;
    }
  }
  int v13 = 1;
  int v14 = 2;
  int v15 = 15;
  switch(v11 & 0xF)
  {
    case 1uLL:
    case 3uLL:
    case 6uLL:
    case 7uLL:
      goto LABEL_7;
    case 2uLL:
      int v14 = 4;
      goto LABEL_7;
    case 8uLL:
      goto LABEL_11;
    case 9uLL:
    case 0xBuLL:
      __break(1u);
      JUMPOUT(0x1CB955008);
    case 0xEuLL:
      if (a3) {
        int v14 = 1;
      }
      goto LABEL_7;
    default:
      int v14 = 1;
LABEL_7:
      if ((v11 & 0xE) == 0xC)
      {
        int v15 = 15;
      }
      else
      {
        int v15 = 15;
        if ((((v11 & 0xE) == 14) & a3) == 0) {
          int v15 = v12;
        }
      }
      int v13 = v14;
LABEL_11:
      *(_DWORD *)a2 = v13;
      *(_DWORD *)(a2 + 4) = v15;
      return result;
  }
}

void sub_1CB955048(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 128;
  operator new[]();
}

BOOL sub_1CB9551C4(void *a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1[3] + 32) + 344);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 560))(v2);
  return (!v3 || (*(_WORD *)(v3 + 18) & 0x3FF0) != 0x660)
      && (*(unsigned char *)(a1[2] + 20) & 0x80) == 0
      && (*(void *)(a1[4] + 48) & 0x1C0) != 256;
}

uint64_t sub_1CB955258(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, int *a5)
{
  int v5 = **(unsigned __int16 **)(a2 + 16);
  if (*(unsigned char *)(*(void *)(a1 + 80) + 318))
  {
    if (v5 != 2256)
    {
      int v6 = 2236;
      goto LABEL_9;
    }
LABEL_5:
    uint64_t v7 = *(void *)(a2 + 32);
    if (*(void *)(v7 + 144) || *(unsigned char *)(v7 + 64)) {
      return 0;
    }
LABEL_18:
    int v8 = 1;
    goto LABEL_19;
  }
  if (v5 == 2352) {
    goto LABEL_5;
  }
  int v6 = 2332;
LABEL_9:
  if (v6 != v5)
  {
    if (*(unsigned char *)(*(void *)(a1 + 80) + 318)) {
      int v9 = 2240;
    }
    else {
      int v9 = 2336;
    }
    if (v9 != v5) {
      return 0;
    }
    uint64_t v7 = *(void *)(a2 + 32);
    if (*(void *)(v7 + 144)) {
      return 0;
    }
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(a2 + 32);
  if (*(void *)(v7 + 144)) {
    return 0;
  }
  int v8 = 25;
LABEL_19:
  *a3 = *(_DWORD *)(v7 + 68);
  *a4 = *(_DWORD *)(v7 + 4);
  *a5 = v8;
  return 1;
}

uint64_t sub_1CB955308(uint64_t a1)
{
  int v1 = *(unsigned __int16 **)(a1 + 16);
  unint64_t v2 = *((void *)v1 + 2);
  if ((v2 & 0x1000000) != 0)
  {
    uint64_t v3 = *(void *)(a1 + 32) + 32 * sub_1CBC7A3F8(*v1, 0x16u);
    *(void *)(v3 + 16) &= ~0x8000000000000000;
  }
  return (v2 >> 24) & 1;
}

unint64_t sub_1CB95535C(int a1, unsigned char *a2, int a3, int a4, char a5)
{
  v29[3] = *MEMORY[0x1E4F143B8];
  int v10 = sub_1CB955608(a1);
  int v11 = sub_1CB955634(a1);
  sub_1CB9571C8(v10, (uint64_t)&__src);
  if (v11 == 47 && !a3)
  {
    int v13 = 14;
LABEL_29:
    if (a2[318]) {
      int v14 = v13;
    }
    else {
      int v14 = 34;
    }
    goto LABEL_9;
  }
  if (v11 == 47) {
    char v12 = a3 ^ 1;
  }
  else {
    char v12 = 1;
  }
  int v13 = 30;
  if (v11 == 48 || (v12 & 1) == 0) {
    goto LABEL_29;
  }
  int v14 = 44;
LABEL_9:
  if (a3) {
    int v15 = 5;
  }
  else {
    int v15 = 2;
  }
  char v24 = v26;
  v26[0] = v15;
  uint64_t v25 = 0x500000001;
  sub_1CB925718((unsigned int *)&v24, __src, (unsigned char *)__src + 4 * v28);
  if (a4)
  {
    if (!a3)
    {
      if (v25 >= HIDWORD(v25)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v24[v25] = 2;
      unsigned int v16 = v25 + 1;
      LODWORD(v25) = v25 + 1;
      if ((a5 & 1) == 0) {
        goto LABEL_15;
      }
LABEL_27:
      unsigned int v17 = HIDWORD(v25);
      int v18 = 2;
      goto LABEL_16;
    }
    if (v25 >= HIDWORD(v25)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v24[v25] = 5;
    unsigned int v16 = v25 + 1;
    LODWORD(v25) = v25 + 1;
    if ((a5 & 1) == 0) {
      goto LABEL_15;
    }
  }
  else
  {
    if (v25 >= HIDWORD(v25)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v24[v25] = 1;
    unsigned int v16 = v25 + 1;
    LODWORD(v25) = v25 + 1;
    if ((a5 & 1) == 0)
    {
LABEL_15:
      unsigned int v17 = HIDWORD(v25);
      int v18 = 1;
      goto LABEL_16;
    }
    if (!a3) {
      goto LABEL_27;
    }
  }
  unsigned int v17 = HIDWORD(v25);
  int v18 = 5;
LABEL_16:
  if (v16 >= v17) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  v24[v16] = v18;
  LODWORD(v25) = v25 + 1;
  uint64_t v19 = v24;
  unsigned int v20 = sub_1CB951118(v14, v24, v25, a2);
  int v21 = __src;
  uint64_t v22 = *(unsigned int *)__src;
  if (v19 != v26)
  {
    free(v19);
    int v21 = __src;
  }
  if (v21 != v29) {
    free(v21);
  }
  return v20 | (unint64_t)(v22 << 32);
}

uint64_t sub_1CB955608(int a1)
{
  return dword_1CD9717C8[a1 - 289];
}

uint64_t sub_1CB955634(int a1)
{
  if (a1 > 2179)
  {
    if (a1 > 5215)
    {
      switch(a1)
      {
        case 5216:
        case 5217:
        case 5218:
        case 5219:
        case 5220:
        case 5221:
        case 5222:
        case 5223:
        case 5224:
        case 5225:
        case 5226:
        case 5227:
        case 5228:
        case 5229:
        case 5230:
        case 5231:
        case 5232:
        case 5233:
        case 5234:
        case 5235:
        case 5236:
        case 5237:
        case 5238:
        case 5239:
        case 5240:
        case 5241:
        case 5242:
        case 5243:
        case 5244:
        case 5245:
        case 5246:
        case 5247:
        case 5248:
        case 5249:
        case 5250:
        case 5251:
          uint64_t result = 59;
          break;
        case 5252:
        case 5253:
        case 5254:
        case 5255:
        case 5256:
        case 5257:
        case 5258:
        case 5259:
        case 5260:
        case 5261:
        case 5262:
        case 5263:
        case 5264:
        case 5265:
        case 5266:
        case 5267:
        case 5268:
        case 5269:
        case 5270:
        case 5271:
        case 5272:
        case 5273:
        case 5274:
        case 5275:
        case 5276:
        case 5277:
        case 5278:
        case 5279:
        case 5280:
        case 5281:
        case 5282:
        case 5283:
        case 5284:
        case 5285:
        case 5286:
        case 5287:
        case 5324:
        case 5325:
        case 5326:
        case 5327:
        case 5328:
        case 5329:
        case 5330:
        case 5331:
        case 5332:
        case 5333:
        case 5334:
        case 5335:
        case 5336:
        case 5337:
        case 5338:
        case 5339:
        case 5340:
        case 5341:
        case 5342:
        case 5343:
        case 5344:
        case 5345:
        case 5346:
        case 5347:
        case 5348:
        case 5349:
        case 5350:
        case 5351:
        case 5352:
        case 5353:
        case 5354:
        case 5355:
        case 5356:
        case 5357:
        case 5358:
        case 5359:
          return 73;
        case 5288:
        case 5289:
        case 5290:
        case 5291:
        case 5292:
        case 5293:
        case 5294:
        case 5295:
        case 5296:
        case 5297:
        case 5298:
        case 5299:
        case 5300:
        case 5301:
        case 5302:
        case 5303:
        case 5304:
        case 5305:
        case 5306:
        case 5307:
        case 5308:
        case 5309:
        case 5310:
        case 5311:
        case 5312:
        case 5313:
        case 5314:
        case 5315:
        case 5316:
        case 5317:
        case 5318:
        case 5319:
        case 5320:
        case 5321:
        case 5322:
        case 5323:
          uint64_t result = 60;
          break;
        case 5360:
        case 5361:
        case 5362:
        case 5363:
        case 5364:
        case 5365:
        case 5366:
        case 5367:
        case 5368:
        case 5369:
        case 5370:
        case 5371:
        case 5372:
        case 5373:
        case 5374:
        case 5375:
        case 5376:
        case 5377:
        case 5378:
        case 5379:
        case 5380:
        case 5381:
        case 5382:
        case 5383:
        case 5384:
        case 5385:
        case 5386:
        case 5387:
        case 5388:
        case 5389:
        case 5390:
        case 5391:
        case 5392:
        case 5393:
        case 5394:
        case 5395:
          uint64_t result = 63;
          break;
        default:
          switch(a1)
          {
            case 5948:
            case 5949:
            case 5950:
            case 5951:
            case 5952:
            case 5953:
            case 5954:
            case 5955:
            case 5956:
            case 5957:
            case 5958:
            case 5959:
            case 5960:
            case 5961:
            case 5962:
            case 5963:
            case 5964:
            case 5965:
            case 5966:
            case 5967:
            case 5968:
            case 5969:
            case 5970:
            case 5971:
            case 5972:
            case 5973:
            case 5974:
            case 5975:
            case 5976:
            case 5977:
            case 5978:
            case 5979:
            case 5980:
            case 5981:
            case 5982:
            case 5983:
              uint64_t result = 65;
              break;
            case 6020:
            case 6021:
            case 6022:
            case 6023:
            case 6024:
            case 6025:
            case 6026:
            case 6027:
            case 6028:
            case 6029:
            case 6030:
            case 6031:
            case 6032:
            case 6033:
            case 6034:
            case 6035:
            case 6036:
            case 6037:
            case 6038:
            case 6039:
            case 6040:
            case 6041:
            case 6042:
            case 6043:
            case 6044:
            case 6045:
            case 6046:
            case 6047:
            case 6048:
            case 6049:
            case 6050:
            case 6051:
            case 6052:
            case 6053:
            case 6054:
            case 6055:
              uint64_t result = 66;
              break;
            default:
              return 73;
          }
          break;
      }
    }
    else
    {
      int v4 = a1 - 2180;
      uint64_t result = 36;
      switch(v4)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
        case 137:
        case 138:
        case 139:
        case 140:
        case 141:
        case 142:
        case 143:
          return result;
        case 250:
        case 251:
        case 252:
        case 253:
        case 254:
        case 255:
        case 256:
        case 257:
        case 258:
        case 259:
        case 260:
        case 261:
        case 262:
        case 263:
        case 264:
        case 265:
        case 266:
        case 267:
        case 268:
        case 269:
        case 270:
        case 271:
        case 272:
        case 273:
        case 274:
        case 275:
        case 276:
        case 277:
        case 278:
        case 279:
        case 280:
        case 281:
        case 282:
        case 283:
        case 284:
        case 285:
        case 286:
        case 287:
        case 288:
        case 289:
        case 290:
        case 291:
        case 292:
        case 293:
        case 294:
        case 295:
        case 296:
        case 297:
        case 298:
        case 299:
        case 300:
        case 301:
        case 302:
        case 303:
        case 304:
        case 305:
        case 306:
        case 307:
        case 308:
        case 309:
        case 310:
        case 311:
        case 312:
        case 313:
        case 314:
        case 315:
        case 316:
        case 317:
        case 318:
        case 319:
        case 320:
        case 321:
        case 322:
        case 323:
        case 324:
        case 325:
        case 326:
        case 327:
        case 328:
        case 329:
        case 330:
        case 331:
        case 332:
        case 333:
        case 334:
        case 335:
        case 336:
        case 337:
        case 338:
        case 339:
        case 340:
        case 341:
        case 342:
        case 343:
        case 344:
        case 345:
        case 346:
        case 347:
        case 348:
        case 349:
        case 350:
        case 351:
        case 352:
        case 353:
        case 354:
        case 355:
        case 356:
        case 357:
        case 466:
        case 467:
        case 468:
        case 469:
        case 470:
        case 471:
        case 472:
        case 473:
        case 474:
        case 475:
        case 476:
        case 477:
        case 478:
        case 479:
        case 480:
        case 481:
        case 482:
        case 483:
        case 484:
        case 485:
        case 486:
        case 487:
        case 488:
        case 489:
        case 490:
        case 491:
        case 492:
        case 493:
        case 494:
        case 495:
        case 496:
        case 497:
        case 498:
        case 499:
        case 500:
        case 501:
        case 502:
        case 503:
        case 504:
        case 505:
        case 506:
        case 507:
        case 508:
        case 509:
        case 510:
        case 511:
        case 512:
        case 513:
        case 514:
        case 515:
        case 516:
        case 517:
        case 518:
        case 519:
        case 520:
        case 521:
        case 522:
        case 523:
        case 524:
        case 525:
        case 526:
        case 527:
        case 528:
        case 529:
        case 530:
        case 531:
        case 532:
        case 533:
        case 534:
        case 535:
        case 536:
        case 537:
        case 538:
        case 539:
        case 540:
        case 541:
        case 542:
        case 543:
        case 544:
        case 545:
        case 546:
        case 547:
        case 548:
        case 549:
        case 550:
        case 551:
        case 552:
        case 553:
        case 554:
        case 555:
        case 556:
        case 557:
        case 558:
        case 559:
        case 560:
        case 561:
        case 562:
        case 563:
        case 564:
        case 565:
        case 566:
        case 567:
        case 568:
        case 569:
        case 570:
        case 571:
        case 572:
        case 573:
          uint64_t result = 41;
          break;
        case 866:
        case 867:
        case 868:
        case 869:
        case 870:
        case 871:
        case 872:
        case 873:
        case 874:
        case 875:
        case 876:
        case 877:
        case 878:
        case 879:
        case 880:
        case 881:
        case 882:
        case 883:
        case 884:
        case 885:
        case 886:
        case 887:
        case 888:
        case 889:
        case 890:
        case 891:
        case 892:
        case 893:
        case 894:
        case 895:
        case 896:
        case 897:
        case 898:
        case 899:
        case 900:
        case 901:
        case 902:
        case 903:
        case 904:
        case 905:
        case 906:
        case 907:
        case 908:
        case 909:
        case 910:
        case 911:
        case 912:
        case 913:
        case 914:
        case 915:
        case 916:
        case 917:
        case 918:
        case 919:
        case 920:
        case 921:
        case 922:
        case 923:
        case 924:
        case 925:
        case 926:
        case 927:
        case 928:
        case 929:
        case 930:
        case 931:
        case 932:
        case 933:
        case 934:
        case 935:
        case 936:
        case 937:
        case 938:
        case 939:
        case 940:
        case 941:
        case 942:
        case 943:
        case 944:
        case 945:
        case 946:
        case 947:
        case 948:
        case 949:
        case 950:
        case 951:
        case 952:
        case 953:
        case 954:
        case 955:
        case 956:
        case 957:
        case 958:
        case 959:
        case 960:
        case 961:
        case 962:
        case 963:
        case 964:
        case 965:
        case 966:
        case 967:
        case 968:
        case 969:
        case 970:
        case 971:
        case 972:
        case 973:
        case 1082:
        case 1083:
        case 1084:
        case 1085:
        case 1086:
        case 1087:
        case 1088:
        case 1089:
        case 1090:
        case 1091:
        case 1092:
        case 1093:
        case 1094:
        case 1095:
        case 1096:
        case 1097:
        case 1098:
        case 1099:
        case 1100:
        case 1101:
        case 1102:
        case 1103:
        case 1104:
        case 1105:
        case 1106:
        case 1107:
        case 1108:
        case 1109:
        case 1110:
        case 1111:
        case 1112:
        case 1113:
        case 1114:
        case 1115:
        case 1116:
        case 1117:
        case 1118:
        case 1119:
        case 1120:
        case 1121:
        case 1122:
        case 1123:
        case 1124:
        case 1125:
        case 1126:
        case 1127:
        case 1128:
        case 1129:
        case 1130:
        case 1131:
        case 1132:
        case 1133:
        case 1134:
        case 1135:
        case 1136:
        case 1137:
        case 1138:
        case 1139:
        case 1140:
        case 1141:
        case 1142:
        case 1143:
        case 1144:
        case 1145:
        case 1146:
        case 1147:
        case 1148:
        case 1149:
        case 1150:
        case 1151:
        case 1152:
        case 1153:
        case 1154:
        case 1155:
        case 1156:
        case 1157:
        case 1158:
        case 1159:
        case 1160:
        case 1161:
        case 1162:
        case 1163:
        case 1164:
        case 1165:
        case 1166:
        case 1167:
        case 1168:
        case 1169:
        case 1170:
        case 1171:
        case 1172:
        case 1173:
        case 1174:
        case 1175:
        case 1176:
        case 1177:
        case 1178:
        case 1179:
        case 1180:
        case 1181:
        case 1182:
        case 1183:
        case 1184:
        case 1185:
        case 1186:
        case 1187:
        case 1188:
        case 1189:
          uint64_t result = 43;
          break;
        default:
          return 73;
      }
    }
  }
  else
  {
    char v1 = a1 - 33;
    BOOL v2 = a1 == 312;
    if ((a1 - 289) > 0x17) {
      goto LABEL_10;
    }
    if (((1 << v1) & 0xFF8000) != 0) {
      return 49;
    }
    if (((1 << v1) & 0x1FF0) != 0) {
      return 48;
    }
    int v5 = 1 << v1;
    BOOL v2 = (v5 & 0xF) == 0;
    if ((v5 & 0xF) != 0)
    {
      return 47;
    }
    else
    {
LABEL_10:
      if (!v2 && (a1 - 289) >= 0x17)
      {
        return 73;
      }
      else
      {
        switch(a1)
        {
          case 971:
          case 972:
          case 973:
          case 974:
            uint64_t result = 9;
            break;
          case 975:
          case 976:
          case 977:
          case 978:
            uint64_t result = 8;
            break;
          case 979:
          case 980:
          case 981:
          case 982:
            uint64_t result = 11;
            break;
          case 983:
          case 984:
          case 985:
          case 986:
            uint64_t result = 10;
            break;
          default:
            JUMPOUT(0);
        }
      }
    }
  }
  return result;
}

void sub_1CB9571C8(int a1@<W1>, uint64_t a2@<X8>)
{
  if (a1 <= 64)
  {
    if (a1 != 48)
    {
      switch(a1)
      {
        case '!':
          goto LABEL_21;
        case '""':
          goto LABEL_22;
        case '#':
          goto LABEL_11;
        default:
          goto LABEL_19;
      }
    }
    uint64_t v2 = 0x500000001;
LABEL_4:
    uint64_t v3 = v2 | 4;
    goto LABEL_5;
  }
  if (a1 <= 107)
  {
    if (a1 != 95)
    {
      if (a1 != 65)
      {
LABEL_11:
        uint64_t v3 = 0x100000005;
        goto LABEL_5;
      }
      uint64_t v2 = 0x200000001;
      goto LABEL_4;
    }
    goto LABEL_13;
  }
  if (a1 <= 141)
  {
    if (a1 == 125) {
      uint64_t v3 = 0x200000002;
    }
    else {
      uint64_t v3 = 0x500000002;
    }
    goto LABEL_5;
  }
  if (a1 <= 154)
  {
LABEL_13:
    uint64_t v3 = 0x100000002;
    goto LABEL_5;
  }
  if (a1 == 157)
  {
LABEL_19:
    uint64_t v3 = 0x100000001;
  }
  else if (a1 == 155)
  {
LABEL_21:
    uint64_t v3 = 0x500000001;
  }
  else
  {
LABEL_22:
    uint64_t v3 = 0x200000001;
  }
LABEL_5:
  *(void *)(a2 + 16) = v3;
  *(void *)a2 = a2 + 16;
  *(_DWORD *)(a2 + 8) = 2;
  *(_DWORD *)(a2 + 12) = 5;
}

uint64_t sub_1CB9572E8(uint64_t a1, int *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v7 = *(void *)(*(void *)(a1 + 16) + 16);
  uint64_t v8 = 1;
  if ((v7 & 0xD00) != 0x500 && (v7 & 0xD00) != 0x900)
  {
    uint64_t v8 = 0;
    uint64_t v25 = v7 & 0xE00;
    if (v25 != 1536 && v25 != 2560) {
      return 0;
    }
  }
  if (*(_DWORD *)(a1 + 40) != 6) {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v9 + 32 * v8) != 1) {
    return 0;
  }
  if (*(unsigned char *)(v9 + 128) != 1) {
    return 0;
  }
  unint64_t v10 = *(void *)(a1 + 48);
  if (v10 < 8) {
    return 0;
  }
  if ((v10 & 7) == 0)
  {
    v10 &= 0xFFFFFFFFFFFFFFF8;
    *(void *)(a1 + 48) = v10;
    goto LABEL_8;
  }
  uint64_t v23 = 0;
  if ((*(void *)(a1 + 48) & 7) != 3 || (v10 & 0xFFFFFFFFFFFFFFF8) == 0) {
    return v23;
  }
  if (*(_DWORD *)(v10 & 0xFFFFFFFFFFFFFFF8) != 1) {
    return 0;
  }
LABEL_8:
  unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFF8;
  if ((v10 & 7) != 0) {
    unint64_t v11 = *(void *)(v11 + 8);
  }
  else {
    *(void *)(a1 + 48) = v11;
  }
  uint64_t v13 = *(void *)(v11 + 24);
  char v12 = (unint64_t *)(v11 + 24);
  if ((v13 & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    unint64_t v15 = sub_1CB8F1DC4(v12) + 7;
    if (v14 == 1)
    {
      unint64_t v27 = v15;
      unint64_t v15 = v27;
    }
    unint64_t v16 = v15 >> 3;
  }
  else
  {
    LODWORD(v16) = -1;
  }
  *a4 = v16;
  unsigned int v17 = *(_DWORD *)(v9 + 32 * v8 + 16);
  int v18 = v17 & 0xF;
  int v19 = (v17 >> 12) & 0x7F;
  int v20 = (v17 >> 9) & 3;
  if (v19 == 4) {
    char v21 = 2;
  }
  else {
    char v21 = v19 == 2;
  }
  if (v19) {
    LOBYTE(v20) = v21;
  }
  if (v18 == 2)
  {
    LOBYTE(v20) = v20 + 2;
  }
  else
  {
    int v26 = 1 << v18;
    if ((v26 & 0xC2) != 0)
    {
      LOBYTE(v20) = v20 + 1;
    }
    else if ((v26 & 0x431) == 0)
    {
      LOBYTE(v20) = 2;
    }
  }
  if (*(unsigned char *)(v9 + 96)) {
    int v22 = *(_DWORD *)(v9 + 100) | 0x40000000;
  }
  else {
    int v22 = *(_DWORD *)(v9 + 100);
  }
  *a2 = v22;
  *a3 = *(void *)(v9 + 144) << v20;
  return 1;
}

uint64_t sub_1CB9574D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  long long v60 = 0u;
  long long v61 = 0u;
  int v6 = *(unsigned __int16 **)(a2 + 16);
  uint64_t v7 = *((void *)v6 + 2);
  uint64_t v8 = *(unsigned __int16 **)(a3 + 16);
  uint64_t v9 = *((void *)v8 + 2);
  v59[0] = v7;
  v59[1] = v9;
  int v10 = *v6;
  int v11 = *v8;
  v58[0] = v10;
  v58[1] = v11;
  v57[0] = a2;
  v57[1] = a3;
  char v12 = 1;
  do
  {
    char v13 = v12;
    int v14 = v58[v5];
    unsigned int v15 = v14 - 4581;
    unsigned int v16 = v14 - 743;
    if (v15 < 0xC || v16 <= 0xD)
    {
      uint64_t result = 0;
      uint64_t v19 = v5 ^ 1;
      uint64_t v20 = v59[v5 ^ 1];
      if ((v20 & 0xE00) == 0x600) {
        return result;
      }
      uint64_t v21 = v20 & 0x10000000;
      if ((v58[v19] - 2970) < 0x48 || v21 != 0) {
        return result;
      }
    }
    char v12 = 0;
    uint64_t v5 = 1;
  }
  while ((v13 & 1) != 0);
  if (((v7 | v9) & 2) != 0)
  {
    if ((v10 - 2970) <= 0x47 && (v11 - 2970) < 0x48) {
      return 0;
    }
    __int16 v26 = *(_WORD *)(a2 + 44);
    uint64_t v27 = *((void *)v6 + 1);
    if ((v26 & 0xC) != 0 && (v26 & 4) == 0)
    {
      if ((v27 & 0x1000000) != 0) {
        return 0;
      }
      uint64_t v53 = a2;
      while ((*(_WORD *)(v53 + 44) & 8) != 0)
      {
        uint64_t result = 0;
        uint64_t v53 = *(void *)(v53 + 8);
        if (*(unsigned char *)(*(void *)(v53 + 16) + 11)) {
          return result;
        }
      }
    }
    else if ((v27 & 0x1000000) != 0)
    {
      return 0;
    }
    if (v10 - 1) <= 1 && (*(unsigned char *)(*(void *)(a2 + 32) + 48)) {
      return 0;
    }
    uint64_t v28 = *((void *)v8 + 1);
    if ((*(_WORD *)(a3 + 44) & 0xC) != 0 && (*(_WORD *)(a3 + 44) & 4) == 0)
    {
      if ((v28 & 0x1000000) != 0) {
        return 0;
      }
      uint64_t v52 = a3;
      while ((*(_WORD *)(v52 + 44) & 8) != 0)
      {
        uint64_t result = 0;
        uint64_t v52 = *(void *)(v52 + 8);
        if (*(unsigned char *)(*(void *)(v52 + 16) + 11)) {
          return result;
        }
      }
    }
    else if ((v28 & 0x1000000) != 0)
    {
      return 0;
    }
    return (unsigned __int16)(v11 - 1) > 1u || (*(unsigned char *)(*(void *)(a3 + 32) + 48) & 1) == 0;
  }
  char v23 = 1;
  int v24 = -1;
  if ((v10 - 8267) >= 6 && v10 != 8274 && v10 != 8276)
  {
    if ((v10 & 0xFFFFFFFD) == 0x2051)
    {
      int v24 = *(_DWORD *)(*(void *)(a2 + 32) + 48);
      char v23 = 1;
    }
    else
    {
      int v24 = 0;
      char v23 = 0;
    }
  }
  if (v11 - 8267) < 0xA && ((0x2BFu >> (v11 - 75)))
  {
    int v25 = -1;
    if ((v23 & 1) == 0) {
      return 1;
    }
  }
  else
  {
    if ((v11 & 0xFFFFFFFD) != 0x2051)
    {
      uint64_t result = 1;
      if (v23) {
        return result;
      }
      uint64_t v30 = 0;
      char v31 = 1;
      uint64_t v32 = (_DWORD *)&v60 + 2;
      do
      {
        int v33 = v58[v30];
        char v34 = v31;
        if ((v33 - 4282) > 0x19 || ((1 << (v33 + 70)) & 0x3000003) == 0)
        {
          uint64_t v38 = v57[v30];
          uint64_t v39 = (int *)(v38 + 48);
          unint64_t v40 = *(void *)(v38 + 48);
          if (v40 >= 8)
          {
            if ((v40 & 7) == 0)
            {
              *(void *)(v38 + 48) = v40 & 0xFFFFFFFFFFFFFFF8;
              uint64_t v45 = (int *)(v38 + 56);
              while (1)
              {
LABEL_58:
                unint64_t v46 = *(unsigned int *)(*(void *)v39 + 16);
                if (v46)
                {
                  if (v46 >= 0x51) {
                    abort();
                  }
                }
                else if ((~LODWORD(v59[v30]) & 0xD00) != 0 && (v59[v30] & 0xE00) != 0xE00)
                {
                  return 0;
                }
                *(void *)((char *)&v60 + 16 * v30 + ((v46 >> 3) & 0x1FFFFFF8)) |= 1 << v46;
                v39 += 2;
                if (v39 == v45) {
                  goto LABEL_42;
                }
              }
            }
            uint64_t v41 = (int *)(v40 & 0xFFFFFFFFFFFFFFF8);
            if ((*(void *)(v38 + 48) & 7) == 3 && v41 != 0)
            {
              uint64_t v44 = *v41;
              uint64_t v39 = v41 + 2;
              uint64_t v43 = v44;
              if (v44)
              {
                uint64_t v45 = &v39[2 * v43];
                goto LABEL_58;
              }
            }
          }
        }
        else
        {
          *((void *)&v60 + 2 * v30) |= 8uLL;
        }
LABEL_42:
        uint64_t v36 = &v60 + v30;
        if (!*(void *)v36 && (*v32 & 0x1FFFF) == 0)
        {
          uint64_t v37 = v59[v30];
          if ((~(_WORD)v37 & 0xD00) != 0 && (v37 & 0xE00) != 0xE00) {
            return 0;
          }
          *(void *)uint64_t v36 = 1;
        }
        char v31 = 0;
        v32 += 4;
        uint64_t v30 = 1;
      }
      while ((v34 & 1) != 0);
      if (!sub_1CB969194(&v60, 0, (uint64_t)&v60 + 8, 0x11u, &v61)) {
        return ((unint64_t)v61 & (unint64_t)v60 | DWORD2(v60) & DWORD2(v61) & 0x1FFFF) == 0;
      }
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uint64_t v54 = 0;
      if (!sub_1CB9572E8(a2, (int *)&v54 + 1, (_DWORD *)&v56 + 1, (_DWORD *)&v55 + 1)
        || !sub_1CB9572E8(a3, (int *)&v54, &v56, &v55)
        || HIDWORD(v54) != v54)
      {
        return ((unint64_t)v61 & (unint64_t)v60 | DWORD2(v60) & DWORD2(v61) & 0x1FFFF) == 0;
      }
      int v49 = v56;
      if ((int)v56 >= SHIDWORD(v56)) {
        int v50 = HIDWORD(v56);
      }
      else {
        int v50 = v56;
      }
      if (SHIDWORD(v56) > (int)v56) {
        int v49 = HIDWORD(v56);
      }
      int v51 = (uint64_t *)((char *)&v55 + 4);
      if (SHIDWORD(v56) > (int)v56) {
        int v51 = &v55;
      }
      if (*(_DWORD *)v51 + v50 > v49) {
        return ((unint64_t)v61 & (unint64_t)v60 | DWORD2(v60) & DWORD2(v61) & 0x1FFFF) == 0;
      }
      return 1;
    }
    int v25 = *(_DWORD *)(*(void *)(a3 + 32) + 48);
    if ((v23 & 1) == 0) {
      return 1;
    }
  }
  return (v24 | v25) >= 0 && v24 != v25;
}

uint64_t sub_1CB957980(int a1, _DWORD *a2, uint64_t a3)
{
  switch(*a2)
  {
    case 2:
      switch(a2[1])
      {
        case 2:
          switch(a1)
          {
            case 17:
            case 18:
            case 19:
            case 31:
            case 32:
            case 33:
            case 37:
            case 38:
            case 39:
              goto LABEL_172;
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 34:
            case 35:
            case 36:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
              goto LABEL_253;
            case 47:
            case 48:
            case 49:
              if (a3 != 2) {
                goto LABEL_253;
              }
              return 125;
            case 50:
            case 51:
              if (a3 != 2) {
                goto LABEL_253;
              }
              return 1;
            default:
              if ((a1 - 3) >= 3) {
                goto LABEL_253;
              }
LABEL_172:
              if (a3 == 2) {
                return 364;
              }
              break;
          }
          break;
        case 3:
        case 4:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_933;
        case 5:
          if (a1 > 0x31) {
            goto LABEL_111;
          }
          if (((1 << a1) & 0x380000000) != 0 || ((1 << a1) & 0xE000000000) != 0) {
            goto LABEL_112;
          }
          if (((1 << a1) & 0x3000000000000) != 0)
          {
            if (a3 == 2) {
              return 108;
            }
          }
          else
          {
LABEL_111:
            if ((a1 - 17) < 3)
            {
LABEL_112:
              if (a3 == 2) {
                return 332;
              }
            }
          }
          switch(a2[2])
          {
            case 2:
              switch(a1)
              {
                case '#':
                case '-':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                case ':':
                case ';':
                case '<':
                case '=':
                case '>':
                case '?':
                case '@':
                case 'A':
                case 'B':
                case 'E':
                case 'F':
                  if (a3 != 3) {
                    goto LABEL_342;
                  }
                  uint64_t v4 = 348;
                  break;
                default:
LABEL_342:
                  int v29 = a2[3];
                  if (v29 == 5)
                  {
                    if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4) {
                      uint64_t v4 = 351;
                    }
                    else {
                      uint64_t v4 = 352;
                    }
                  }
                  else if (v29 == 2)
                  {
                    if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4)
                    {
                      uint64_t v4 = 353;
                    }
                    else
                    {
                      int v42 = a2[4];
                      if (v42 == 5)
                      {
                        uint64_t v4 = 354;
                      }
                      else if (v42 == 2)
                      {
                        uint64_t v4 = 120;
                      }
                      else
                      {
                        uint64_t v4 = 119;
                      }
                    }
                  }
                  else if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4)
                  {
                    uint64_t v4 = 349;
                  }
                  else
                  {
                    int v45 = a2[4];
                    if (v45 == 5)
                    {
                      uint64_t v4 = 356;
                    }
                    else if (v45 == 2)
                    {
                      uint64_t v4 = 118;
                    }
                    else
                    {
                      uint64_t v4 = 117;
                    }
                  }
                  break;
              }
              return v4;
            case 3:
            case 4:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_933;
            case 5:
              switch(a1)
              {
                case '#':
                case '-':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                case ':':
                case ';':
                case '<':
                case '=':
                case '>':
                case '?':
                case '@':
                case 'A':
                case 'B':
                case 'E':
                case 'F':
                  if (a3 != 3) {
                    goto LABEL_349;
                  }
                  uint64_t v4 = 339;
                  break;
                default:
LABEL_349:
                  int v30 = a2[3];
                  if (v30 == 5)
                  {
                    if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4) {
                      uint64_t v4 = 342;
                    }
                    else {
                      uint64_t v4 = 343;
                    }
                  }
                  else if (v30 == 2)
                  {
                    if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4)
                    {
                      uint64_t v4 = 344;
                    }
                    else
                    {
                      int v43 = a2[4];
                      if (v43 == 5)
                      {
                        uint64_t v4 = 345;
                      }
                      else if (v43 == 2)
                      {
                        uint64_t v4 = 116;
                      }
                      else
                      {
                        uint64_t v4 = 115;
                      }
                    }
                  }
                  else if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4)
                  {
                    uint64_t v4 = 340;
                  }
                  else
                  {
                    int v46 = a2[4];
                    if (v46 == 5)
                    {
                      uint64_t v4 = 347;
                    }
                    else if (v46 == 2)
                    {
                      uint64_t v4 = 114;
                    }
                    else
                    {
                      uint64_t v4 = 113;
                    }
                  }
                  break;
              }
              return v4;
            case 0xA:
              return 338;
            default:
              switch(a1)
              {
                case '#':
                case '-':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                case ':':
                case ';':
                case '<':
                case '=':
                case '>':
                case '?':
                case '@':
                case 'A':
                case 'B':
                case 'E':
                case 'F':
                  if (a3 != 3) {
                    goto LABEL_321;
                  }
                  uint64_t v4 = 333;
                  break;
                default:
LABEL_321:
                  int v26 = a2[3];
                  if (v26 == 5)
                  {
                    if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4) {
                      uint64_t v4 = 336;
                    }
                    else {
                      uint64_t v4 = 359;
                    }
                  }
                  else if (v26 == 2)
                  {
                    if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4)
                    {
                      uint64_t v4 = 337;
                    }
                    else
                    {
                      int v41 = a2[4];
                      if (v41 == 5)
                      {
                        uint64_t v4 = 361;
                      }
                      else if (v41 == 2)
                      {
                        uint64_t v4 = 124;
                        if (a1 != 30 && a1 != 34) {
                          uint64_t v4 = 112;
                        }
                      }
                      else
                      {
                        uint64_t v4 = 123;
                        if (a1 != 30 && a1 != 34) {
                          uint64_t v4 = 111;
                        }
                      }
                    }
                  }
                  else if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4)
                  {
                    uint64_t v4 = 334;
                  }
                  else
                  {
                    int v44 = a2[4];
                    if (v44 == 5)
                    {
                      uint64_t v4 = 363;
                    }
                    else if (v44 == 2)
                    {
                      uint64_t v4 = 122;
                      if (a1 != 30 && a1 != 34) {
                        uint64_t v4 = 110;
                      }
                    }
                    else
                    {
                      uint64_t v4 = 121;
                      if (a1 != 30 && a1 != 34) {
                        uint64_t v4 = 109;
                      }
                    }
                  }
                  break;
              }
              return v4;
          }
        case 0xA:
          switch(a2[2])
          {
            case 2:
              return 331;
            case 3:
            case 4:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_933;
            case 5:
              return 330;
            case 0xA:
              return 329;
            default:
              return 328;
          }
        default:
          switch(a1)
          {
            case 17:
            case 18:
            case 19:
              goto LABEL_169;
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 34:
            case 35:
            case 36:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
              goto LABEL_364;
            case 31:
            case 32:
            case 33:
            case 37:
            case 38:
            case 39:
              if (a3 != 2) {
                goto LABEL_364;
              }
              return 311;
            case 47:
            case 48:
              if (a3 != 2) {
                goto LABEL_364;
              }
              return 142;
            case 49:
              if (a3 != 2) {
                goto LABEL_364;
              }
              return 95;
            case 50:
            case 51:
              if (a3 != 2) {
                goto LABEL_364;
              }
              return 0;
            default:
              if ((a1 - 3) >= 3) {
                goto LABEL_364;
              }
LABEL_169:
              if (a3 != 2)
              {
LABEL_364:
                switch(a2[2])
                {
                  case 2:
                    switch(a1)
                    {
                      case '#':
                      case '-':
                      case '4':
                      case '5':
                      case '6':
                      case '7':
                      case '8':
                      case '9':
                      case ':':
                      case ';':
                      case '<':
                      case '=':
                      case '>':
                      case '?':
                      case '@':
                      case 'A':
                      case 'B':
                      case 'E':
                      case 'F':
                        if (a3 != 3) {
                          goto LABEL_381;
                        }
                        uint64_t v4 = 323;
                        break;
                      default:
LABEL_381:
                        int v33 = a2[3];
                        if (v33 == 5)
                        {
                          uint64_t v4 = 326;
                        }
                        else if (v33 == 2)
                        {
                          if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4)
                          {
                            uint64_t v4 = 327;
                          }
                          else if (a2[4] == 1)
                          {
                            uint64_t v4 = 149;
                            if (a1 > 34) {
                              uint64_t v4 = 106;
                            }
                          }
                          else
                          {
                            uint64_t v4 = 150;
                            if (a1 > 34) {
                              uint64_t v4 = 107;
                            }
                          }
                        }
                        else if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4)
                        {
                          uint64_t v4 = 324;
                        }
                        else if (a2[4] == 1)
                        {
                          uint64_t v4 = 147;
                          if (a1 > 34) {
                            uint64_t v4 = 104;
                          }
                        }
                        else
                        {
                          uint64_t v4 = 148;
                          if (a1 > 34) {
                            uint64_t v4 = 105;
                          }
                        }
                        break;
                    }
                    return v4;
                  case 3:
                  case 4:
                  case 6:
                  case 7:
                  case 8:
                  case 9:
                    goto LABEL_933;
                  case 5:
                    switch(a1)
                    {
                      case '#':
                      case '-':
                      case '4':
                      case '5':
                      case '6':
                      case '7':
                      case '8':
                      case '9':
                      case ':':
                      case ';':
                      case '<':
                      case '=':
                      case '>':
                      case '?':
                      case '@':
                      case 'A':
                      case 'B':
                      case 'E':
                      case 'F':
                        if (a3 != 3) {
                          goto LABEL_387;
                        }
                        uint64_t v4 = 318;
                        break;
                      default:
LABEL_387:
                        int v34 = a2[3];
                        if (v34 == 5)
                        {
                          uint64_t v4 = 321;
                        }
                        else if (v34 == 2)
                        {
                          if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4)
                          {
                            uint64_t v4 = 322;
                          }
                          else if (a2[4] == 1)
                          {
                            uint64_t v4 = 145;
                            if (a1 != 30 && a1 != 34) {
                              uint64_t v4 = 102;
                            }
                          }
                          else
                          {
                            uint64_t v4 = 146;
                            if (a1 != 30 && a1 != 34) {
                              uint64_t v4 = 103;
                            }
                          }
                        }
                        else if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4)
                        {
                          uint64_t v4 = 319;
                        }
                        else if (a2[4] == 1)
                        {
                          uint64_t v4 = 143;
                          if (a1 != 30 && a1 != 34) {
                            uint64_t v4 = 100;
                          }
                        }
                        else
                        {
                          uint64_t v4 = 144;
                          if (a1 != 30 && a1 != 34) {
                            uint64_t v4 = 101;
                          }
                        }
                        break;
                    }
                    return v4;
                  case 0xA:
                    return 317;
                  default:
                    switch(a1)
                    {
                      case '#':
                      case '-':
                      case '4':
                      case '5':
                      case '6':
                      case '7':
                      case '8':
                      case '9':
                      case ':':
                      case ';':
                      case '<':
                      case '=':
                      case '>':
                      case '?':
                      case '@':
                      case 'A':
                      case 'B':
                      case 'E':
                      case 'F':
                        if (a3 != 3) {
                          goto LABEL_375;
                        }
                        uint64_t v4 = 312;
                        break;
                      default:
LABEL_375:
                        int v32 = a2[3];
                        if (v32 == 5)
                        {
                          uint64_t v4 = 315;
                        }
                        else if (v32 == 2)
                        {
                          if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4)
                          {
                            uint64_t v4 = 316;
                          }
                          else if (a2[4] == 1)
                          {
                            uint64_t v4 = 153;
                            if (a1 > 34) {
                              uint64_t v4 = 98;
                            }
                          }
                          else
                          {
                            uint64_t v4 = 154;
                            if (a1 > 34) {
                              uint64_t v4 = 99;
                            }
                          }
                        }
                        else if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4)
                        {
                          uint64_t v4 = 313;
                        }
                        else if (a2[4] == 1)
                        {
                          uint64_t v4 = 151;
                          if (a1 > 34) {
                            uint64_t v4 = 96;
                          }
                        }
                        else
                        {
                          uint64_t v4 = 152;
                          if (a1 > 34) {
                            uint64_t v4 = 97;
                          }
                        }
                        break;
                    }
                    return v4;
                }
              }
              uint64_t v4 = 396;
              break;
          }
          return v4;
      }
      break;
    case 3:
      if (a2[1] == 1) {
        return 4;
      }
      if ((a1 & 0xFFFFFFFE) == 0x32 && a3 == 2) {
        return 5;
      }
      BOOL v5 = a2[2] == 1;
      LODWORD(v4) = 6;
      goto LABEL_92;
    case 4:
      if (a2[1] == 1) {
        return 20;
      }
      if ((a1 & 0xFFFFFFFE) == 0x32 && a3 == 2) {
        return 21;
      }
      BOOL v5 = a2[2] == 1;
      LODWORD(v4) = 22;
      goto LABEL_92;
    case 5:
      switch(a2[1])
      {
        case 2:
          switch(a1)
          {
            case 31:
            case 32:
            case 33:
            case 37:
            case 38:
            case 39:
              goto LABEL_131;
            case 34:
            case 35:
            case 36:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
              goto LABEL_216;
            case 48:
            case 49:
              if (a3 != 2) {
                goto LABEL_216;
              }
              return 65;
            case 50:
            case 51:
              if (a3 != 2) {
                goto LABEL_216;
              }
              return 17;
            default:
              if ((a1 - 17) >= 3) {
                goto LABEL_216;
              }
LABEL_131:
              if (a3 != 2)
              {
LABEL_216:
                switch(a2[2])
                {
                  case 2:
                    switch(a1)
                    {
                      case '#':
                      case '-':
                      case '4':
                      case '5':
                      case '6':
                      case '7':
                      case '8':
                      case '9':
                      case ':':
                      case ';':
                      case '<':
                      case '=':
                      case '>':
                      case '?':
                      case '@':
                      case 'A':
                      case 'B':
                      case 'E':
                      case 'F':
                        if (a3 != 3) {
                          goto LABEL_607;
                        }
                        uint64_t v4 = 282;
                        break;
                      case '2':
                      case '3':
                        if (a3 != 3) {
                          goto LABEL_607;
                        }
                        uint64_t v4 = 19;
                        break;
                      default:
LABEL_607:
                        int v48 = a2[3];
                        if (v48 == 5)
                        {
                          if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4)
                          {
                            uint64_t v4 = 285;
                          }
                          else
                          {
                            int v53 = a2[4];
                            if (v53 == 5)
                            {
                              uint64_t v4 = 77;
                            }
                            else if (v53 == 2)
                            {
                              uint64_t v4 = 286;
                            }
                            else
                            {
                              uint64_t v4 = 76;
                            }
                          }
                        }
                        else if (v48 == 2)
                        {
                          if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4) {
                            uint64_t v4 = 287;
                          }
                          else {
                            uint64_t v4 = 288;
                          }
                        }
                        else if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4)
                        {
                          uint64_t v4 = 283;
                        }
                        else
                        {
                          int v54 = a2[4];
                          if (v54 == 5)
                          {
                            uint64_t v4 = 75;
                          }
                          else if (v54 == 2)
                          {
                            uint64_t v4 = 290;
                          }
                          else
                          {
                            uint64_t v4 = 74;
                          }
                        }
                        break;
                    }
                    return v4;
                  case 3:
                  case 4:
                  case 6:
                  case 7:
                  case 8:
                  case 9:
                    goto LABEL_933;
                  case 5:
                    switch(a1)
                    {
                      case '#':
                      case '-':
                      case '4':
                      case '5':
                      case '6':
                      case '7':
                      case '8':
                      case '9':
                      case ':':
                      case ';':
                      case '<':
                      case '=':
                      case '>':
                      case '?':
                      case '@':
                      case 'A':
                      case 'B':
                      case 'E':
                      case 'F':
                        if (a3 != 3) {
                          goto LABEL_290;
                        }
                        uint64_t v4 = 273;
                        break;
                      default:
LABEL_290:
                        int v21 = a2[3];
                        if (v21 == 5)
                        {
                          if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4)
                          {
                            uint64_t v4 = 276;
                          }
                          else
                          {
                            int v39 = a2[4];
                            if (v39 == 5)
                            {
                              uint64_t v4 = 73;
                            }
                            else if (v39 == 2)
                            {
                              uint64_t v4 = 277;
                            }
                            else
                            {
                              uint64_t v4 = 72;
                            }
                          }
                        }
                        else if (v21 == 2)
                        {
                          if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4) {
                            uint64_t v4 = 278;
                          }
                          else {
                            uint64_t v4 = 279;
                          }
                        }
                        else if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4)
                        {
                          uint64_t v4 = 274;
                        }
                        else
                        {
                          int v40 = a2[4];
                          if (v40 == 5)
                          {
                            uint64_t v4 = 71;
                          }
                          else if (v40 == 2)
                          {
                            uint64_t v4 = 281;
                          }
                          else
                          {
                            uint64_t v4 = 70;
                          }
                        }
                        break;
                    }
                    return v4;
                  case 0xA:
                    return 272;
                  default:
                    switch(a1)
                    {
                      case '#':
                      case '-':
                      case '4':
                      case '5':
                      case '6':
                      case '7':
                      case '8':
                      case '9':
                      case ':':
                      case ';':
                      case '<':
                      case '=':
                      case '>':
                      case '?':
                      case '@':
                      case 'A':
                      case 'B':
                      case 'E':
                      case 'F':
                        if (a3 != 3) {
                          goto LABEL_591;
                        }
                        uint64_t v4 = 267;
                        break;
                      case '2':
                      case '3':
                        if (a3 != 3) {
                          goto LABEL_591;
                        }
                        uint64_t v4 = 18;
                        break;
                      default:
LABEL_591:
                        int v47 = a2[3];
                        if (v47 == 5)
                        {
                          if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4)
                          {
                            uint64_t v4 = 270;
                          }
                          else
                          {
                            int v51 = a2[4];
                            if (v51 == 5)
                            {
                              uint64_t v4 = 81;
                              if (a1 != 30 && a1 != 34) {
                                uint64_t v4 = 69;
                              }
                            }
                            else if (v51 == 2)
                            {
                              uint64_t v4 = 293;
                            }
                            else
                            {
                              uint64_t v4 = 80;
                              if (a1 != 30 && a1 != 34) {
                                uint64_t v4 = 68;
                              }
                            }
                          }
                        }
                        else if (v47 == 2)
                        {
                          if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4) {
                            uint64_t v4 = 271;
                          }
                          else {
                            uint64_t v4 = 295;
                          }
                        }
                        else if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4)
                        {
                          uint64_t v4 = 268;
                        }
                        else
                        {
                          int v52 = a2[4];
                          if (v52 == 5)
                          {
                            uint64_t v4 = 79;
                            if (a1 != 30 && a1 != 34) {
                              uint64_t v4 = 67;
                            }
                          }
                          else if (v52 == 2)
                          {
                            uint64_t v4 = 297;
                          }
                          else
                          {
                            uint64_t v4 = 78;
                            if (a1 != 30 && a1 != 34) {
                              uint64_t v4 = 66;
                            }
                          }
                        }
                        break;
                    }
                    return v4;
                }
              }
              uint64_t v4 = 266;
              break;
          }
          return v4;
        case 3:
        case 4:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_933;
        case 5:
          if (a1 > 0x31) {
            goto LABEL_104;
          }
          if (((1 << a1) & 0x380000000) != 0 || ((1 << a1) & 0xE000000000) != 0) {
            goto LABEL_105;
          }
          if (((1 << a1) & 0x3000000000000) != 0)
          {
            if (a3 == 2) {
              return 48;
            }
          }
          else
          {
LABEL_104:
            if ((a1 - 17) < 3)
            {
LABEL_105:
              if (a3 == 2) {
                return 234;
              }
            }
          }
          switch(a2[2])
          {
            case 2:
              switch(a1)
              {
                case '#':
                case '-':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                case ':':
                case ';':
                case '<':
                case '=':
                case '>':
                case '?':
                case '@':
                case 'A':
                case 'B':
                case 'E':
                case 'F':
                  if (a3 != 3) {
                    goto LABEL_328;
                  }
                  uint64_t v4 = 250;
                  break;
                default:
LABEL_328:
                  int v27 = a2[3];
                  if (v27 == 5)
                  {
                    if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4)
                    {
                      uint64_t v4 = 253;
                    }
                    else if (a2[4] == 1)
                    {
                      uint64_t v4 = 59;
                    }
                    else if ((a1 == 30 || a1 == 34 || a1 == 44) && a3 == 5)
                    {
                      uint64_t v4 = 60;
                    }
                    else
                    {
                      uint64_t v4 = 254;
                    }
                  }
                  else if (v27 == 2)
                  {
                    if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4) {
                      uint64_t v4 = 255;
                    }
                    else {
                      uint64_t v4 = 256;
                    }
                  }
                  else if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4)
                  {
                    uint64_t v4 = 251;
                  }
                  else if (a2[4] == 1)
                  {
                    uint64_t v4 = 57;
                  }
                  else if ((a1 == 30 || a1 == 34 || a1 == 44) && a3 == 5)
                  {
                    uint64_t v4 = 58;
                  }
                  else
                  {
                    uint64_t v4 = 258;
                  }
                  break;
              }
              return v4;
            case 3:
            case 4:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_933;
            case 5:
              switch(a1)
              {
                case '#':
                case '-':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                case ':':
                case ';':
                case '<':
                case '=':
                case '>':
                case '?':
                case '@':
                case 'A':
                case 'B':
                case 'E':
                case 'F':
                  if (a3 != 3) {
                    goto LABEL_335;
                  }
                  uint64_t v4 = 241;
                  break;
                default:
LABEL_335:
                  switch(a2[3])
                  {
                    case 2:
                      if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4) {
                        return 246;
                      }
                      else {
                        return 247;
                      }
                    case 3:
                    case 4:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                      goto LABEL_933;
                    case 5:
                      char v38 = a1 - 12;
                      if ((a1 - 12) > 0x3C) {
                        goto LABEL_540;
                      }
                      if (((1 << v38) & 0xC003) != 0)
                      {
                        if (a3 == 4) {
                          return 385;
                        }
                      }
                      else
                      {
                        if (((1 << v38) & 0x1980000000000000) == 0)
                        {
LABEL_540:
                          if (a1) {
                            goto LABEL_769;
                          }
                        }
                        if (a3 == 4) {
                          return 244;
                        }
                      }
LABEL_769:
                      if (a2[4] == 1) {
                        return 55;
                      }
                      if ((a1 == 30 || a1 == 34 || a1 == 44) && a3 == 5) {
                        return 56;
                      }
                      return 245;
                    case 0xA:
                      return 383;
                    default:
                      char v28 = a1 - 12;
                      if ((a1 - 12) > 0x3C) {
                        goto LABEL_339;
                      }
                      if (((1 << v28) & 0xC003) != 0)
                      {
                        if (a3 == 4) {
                          return 387;
                        }
                      }
                      else
                      {
                        if (((1 << v28) & 0x1980000000000000) == 0)
                        {
LABEL_339:
                          if (a1) {
                            goto LABEL_759;
                          }
                        }
                        if (a3 == 4) {
                          return 242;
                        }
                      }
LABEL_759:
                      if (a2[4] == 1)
                      {
                        uint64_t v4 = 53;
                      }
                      else if ((a1 == 30 || a1 == 34 || a1 == 44) && a3 == 5)
                      {
                        uint64_t v4 = 54;
                      }
                      else
                      {
                        uint64_t v4 = 249;
                      }
                      break;
                  }
                  break;
              }
              return v4;
            case 0xA:
              if ((a1 == 45 || a1 == 35) && a3 == 3) {
                return 240;
              }
              int v19 = a2[3];
              if (v19 == 10) {
                return 374;
              }
              if (v19 == 5) {
                return 376;
              }
              return 378;
            default:
              switch(a1)
              {
                case '#':
                case '-':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                case ':':
                case ';':
                case '<':
                case '=':
                case '>':
                case '?':
                case '@':
                case 'A':
                case 'B':
                case 'E':
                case 'F':
                  if (a3 != 3) {
                    goto LABEL_314;
                  }
                  uint64_t v4 = 235;
                  break;
                default:
LABEL_314:
                  switch(a2[3])
                  {
                    case 2:
                      if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4) {
                        return 239;
                      }
                      else {
                        return 263;
                      }
                    case 3:
                    case 4:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                      goto LABEL_933;
                    case 5:
                      char v37 = a1 - 12;
                      if ((a1 - 12) > 0x3C) {
                        goto LABEL_528;
                      }
                      if (((1 << v37) & 0xC003) != 0)
                      {
                        if (a3 == 4) {
                          return 392;
                        }
                      }
                      else
                      {
                        if (((1 << v37) & 0x1980000000000000) == 0)
                        {
LABEL_528:
                          if (a1) {
                            goto LABEL_763;
                          }
                        }
                        if (a3 == 4) {
                          return 238;
                        }
                      }
LABEL_763:
                      if (a2[4] == 1)
                      {
                        uint64_t v4 = 63;
                        if (a1 != 30 && a1 != 34) {
                          return 51;
                        }
                      }
                      else
                      {
                        if (a1 == 30 || a1 == 34)
                        {
                          if (a3 == 5) {
                            return 64;
                          }
                        }
                        else if (a1 == 44 && a3 == 5)
                        {
                          return 52;
                        }
                        return 261;
                      }
                      return v4;
                    case 0xA:
                      return 390;
                    default:
                      char v25 = a1 - 12;
                      if ((a1 - 12) > 0x3C) {
                        goto LABEL_318;
                      }
                      if (((1 << v25) & 0xC003) != 0)
                      {
                        if (a3 == 4) {
                          return 394;
                        }
                      }
                      else
                      {
                        if (((1 << v25) & 0x1980000000000000) == 0)
                        {
LABEL_318:
                          if (a1) {
                            goto LABEL_753;
                          }
                        }
                        if (a3 == 4) {
                          return 236;
                        }
                      }
LABEL_753:
                      if (a2[4] == 1)
                      {
                        uint64_t v4 = 61;
                        if (a1 != 30 && a1 != 34) {
                          uint64_t v4 = 49;
                        }
                      }
                      else
                      {
                        if (a1 == 30 || a1 == 34)
                        {
                          if (a3 == 5) {
                            return 62;
                          }
                        }
                        else if (a1 == 44 && a3 == 5)
                        {
                          return 50;
                        }
                        uint64_t v4 = 265;
                      }
                      break;
                  }
                  break;
              }
              return v4;
          }
        case 0xA:
          switch(a2[2])
          {
            case 2:
              return 233;
            case 3:
            case 4:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_933;
            case 5:
              if ((a1 == 45 || a1 == 35) && a3 == 3) {
                return 232;
              }
              int v15 = a2[3];
              if (v15 == 10) {
                return 351;
              }
              if (v15 == 5) {
                return 353;
              }
              return 355;
            case 0xA:
              if ((a1 == 45 || a1 == 35) && a3 == 3) {
                return 231;
              }
              int v8 = a2[3];
              if (v8 == 10) {
                return 342;
              }
              if (v8 == 5) {
                return 344;
              }
              return 346;
            default:
              if ((a1 == 45 || a1 == 35) && a3 == 3) {
                return 230;
              }
              int v7 = a2[3];
              if (v7 == 10) {
                return 358;
              }
              if (v7 == 5) {
                return 360;
              }
              return 362;
          }
        default:
          switch(a1)
          {
            case 31:
            case 32:
            case 33:
            case 37:
            case 38:
            case 39:
              if (a3 != 2) {
                goto LABEL_273;
              }
              uint64_t v4 = 213;
              break;
            case 34:
            case 35:
            case 36:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
              goto LABEL_273;
            case 48:
              if (a3 != 2) {
                goto LABEL_273;
              }
              uint64_t v4 = 82;
              break;
            case 49:
              if (a3 != 2) {
                goto LABEL_273;
              }
              uint64_t v4 = 35;
              break;
            case 50:
            case 51:
              if (a3 != 2) {
                goto LABEL_273;
              }
              uint64_t v4 = 16;
              break;
            default:
              if ((a1 - 17) >= 3 || a3 != 2)
              {
LABEL_273:
                switch(a2[2])
                {
                  case 2:
                    switch(a1)
                    {
                      case '#':
                      case '-':
                      case '4':
                      case '5':
                      case '6':
                      case '7':
                      case '8':
                      case '9':
                      case ':':
                      case ';':
                      case '<':
                      case '=':
                      case '>':
                      case '?':
                      case '@':
                      case 'A':
                      case 'B':
                      case 'E':
                      case 'F':
                        if (a3 != 3) {
                          goto LABEL_304;
                        }
                        uint64_t v4 = 225;
                        break;
                      default:
LABEL_304:
                        int v23 = a2[3];
                        if (v23 == 5)
                        {
                          if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4)
                          {
                            uint64_t v4 = 228;
                          }
                          else if (a2[4] == 1)
                          {
                            uint64_t v4 = 89;
                            if (a1 != 30 && a1 != 34) {
                              uint64_t v4 = 46;
                            }
                          }
                          else
                          {
                            uint64_t v4 = 90;
                            if (a1 != 30 && a1 != 34) {
                              uint64_t v4 = 47;
                            }
                          }
                        }
                        else if (v23 == 2)
                        {
                          uint64_t v4 = 229;
                        }
                        else if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4)
                        {
                          uint64_t v4 = 226;
                        }
                        else if (a2[4] == 1)
                        {
                          uint64_t v4 = 87;
                          if (a1 != 30 && a1 != 34) {
                            uint64_t v4 = 44;
                          }
                        }
                        else
                        {
                          uint64_t v4 = 88;
                          if (a1 != 30 && a1 != 34) {
                            uint64_t v4 = 45;
                          }
                        }
                        break;
                    }
                    return v4;
                  case 3:
                  case 4:
                  case 6:
                  case 7:
                  case 8:
                  case 9:
                    goto LABEL_933;
                  case 5:
                    switch(a1)
                    {
                      case '#':
                      case '-':
                      case '4':
                      case '5':
                      case '6':
                      case '7':
                      case '8':
                      case '9':
                      case ':':
                      case ';':
                      case '<':
                      case '=':
                      case '>':
                      case '?':
                      case '@':
                      case 'A':
                      case 'B':
                      case 'E':
                      case 'F':
                        if (a3 != 3) {
                          goto LABEL_307;
                        }
                        uint64_t v4 = 220;
                        break;
                      default:
LABEL_307:
                        switch(a2[3])
                        {
                          case 2:
                            return 224;
                          case 3:
                          case 4:
                          case 6:
                          case 7:
                          case 8:
                          case 9:
                            goto LABEL_933;
                          case 5:
                            char v36 = a1 - 12;
                            if ((a1 - 12) > 0x3C) {
                              goto LABEL_516;
                            }
                            if (((1 << v36) & 0xC003) != 0)
                            {
                              if (a3 == 4) {
                                return 403;
                              }
                            }
                            else
                            {
                              if (((1 << v36) & 0x1980000000000000) == 0)
                              {
LABEL_516:
                                if (a1) {
                                  goto LABEL_747;
                                }
                              }
                              if (a3 == 4) {
                                return 223;
                              }
                            }
LABEL_747:
                            if (a2[4] == 1)
                            {
                              uint64_t v4 = 85;
                              if (a1 != 30 && a1 != 34) {
                                return 42;
                              }
                            }
                            else
                            {
                              uint64_t v4 = 86;
                              if (a1 != 30 && a1 != 34) {
                                return 43;
                              }
                            }
                            return v4;
                          case 0xA:
                            return 402;
                          default:
                            char v24 = a1 - 12;
                            if ((a1 - 12) > 0x3C) {
                              goto LABEL_311;
                            }
                            if (((1 << v24) & 0xC003) != 0)
                            {
                              if (a3 == 4) {
                                return 404;
                              }
                            }
                            else
                            {
                              if (((1 << v24) & 0x1980000000000000) == 0)
                              {
LABEL_311:
                                if (a1) {
                                  goto LABEL_735;
                                }
                              }
                              if (a3 == 4) {
                                return 221;
                              }
                            }
LABEL_735:
                            if (a2[4] == 1)
                            {
                              uint64_t v4 = 83;
                              if (a1 != 30 && a1 != 34) {
                                uint64_t v4 = 40;
                              }
                            }
                            else
                            {
                              uint64_t v4 = 84;
                              if (a1 != 30 && a1 != 34) {
                                uint64_t v4 = 41;
                              }
                            }
                            break;
                        }
                        break;
                    }
                    return v4;
                  case 0xA:
                    if ((a1 == 45 || a1 == 35) && a3 == 3) {
                      return 219;
                    }
                    int v20 = a2[3];
                    if (v20 == 10) {
                      return 398;
                    }
                    if (v20 == 5) {
                      return 399;
                    }
                    return 400;
                  default:
                    switch(a1)
                    {
                      case '#':
                      case '-':
                      case '4':
                      case '5':
                      case '6':
                      case '7':
                      case '8':
                      case '9':
                      case ':':
                      case ';':
                      case '<':
                      case '=':
                      case '>':
                      case '?':
                      case '@':
                      case 'A':
                      case 'B':
                      case 'E':
                      case 'F':
                        if (a3 != 3) {
                          goto LABEL_297;
                        }
                        uint64_t v4 = 214;
                        break;
                      default:
LABEL_297:
                        switch(a2[3])
                        {
                          case 2:
                            return 218;
                          case 3:
                          case 4:
                          case 6:
                          case 7:
                          case 8:
                          case 9:
                            goto LABEL_933;
                          case 5:
                            char v35 = a1 - 12;
                            if ((a1 - 12) > 0x3C) {
                              goto LABEL_508;
                            }
                            if (((1 << v35) & 0xC003) != 0)
                            {
                              if (a3 == 4) {
                                return 407;
                              }
                            }
                            else
                            {
                              if (((1 << v35) & 0x1980000000000000) == 0)
                              {
LABEL_508:
                                if (a1) {
                                  goto LABEL_741;
                                }
                              }
                              if (a3 == 4) {
                                return 217;
                              }
                            }
LABEL_741:
                            if (a2[4] == 1)
                            {
                              uint64_t v4 = 93;
                              if (a1 != 30 && a1 != 34) {
                                return 38;
                              }
                            }
                            else
                            {
                              uint64_t v4 = 94;
                              if (a1 != 30 && a1 != 34) {
                                return 39;
                              }
                            }
                            return v4;
                          case 0xA:
                            return 406;
                          default:
                            char v22 = a1 - 12;
                            if ((a1 - 12) > 0x3C) {
                              goto LABEL_301;
                            }
                            if (((1 << v22) & 0xC003) != 0)
                            {
                              if (a3 == 4) {
                                return 408;
                              }
                            }
                            else
                            {
                              if (((1 << v22) & 0x1980000000000000) == 0)
                              {
LABEL_301:
                                if (a1) {
                                  goto LABEL_729;
                                }
                              }
                              if (a3 == 4) {
                                return 215;
                              }
                            }
LABEL_729:
                            if (a2[4] == 1)
                            {
                              uint64_t v4 = 91;
                              if (a1 != 30 && a1 != 34) {
                                uint64_t v4 = 36;
                              }
                            }
                            else
                            {
                              uint64_t v4 = 92;
                              if (a1 != 30 && a1 != 34) {
                                uint64_t v4 = 37;
                              }
                            }
                            break;
                        }
                        break;
                    }
                    return v4;
                }
              }
              uint64_t v4 = 298;
              break;
          }
          return v4;
      }
    case 6:
      if (a2[1] == 1) {
        return 8;
      }
      if ((a1 & 0xFFFFFFFE) == 0x32 && a3 == 2) {
        return 9;
      }
      BOOL v5 = a2[2] == 1;
      LODWORD(v4) = 10;
      goto LABEL_92;
    case 7:
      if (a2[1] == 1) {
        return 24;
      }
      if ((a1 & 0xFFFFFFFE) == 0x32 && a3 == 2) {
        return 25;
      }
      BOOL v5 = a2[2] == 1;
      LODWORD(v4) = 26;
      goto LABEL_92;
    case 8:
      if (a2[1] == 1) {
        return 12;
      }
      if ((a1 & 0xFFFFFFFE) == 0x32 && a3 == 2) {
        return 13;
      }
      BOOL v5 = a2[2] == 1;
      LODWORD(v4) = 14;
      goto LABEL_92;
    case 9:
      if (a2[1] == 1) {
        return 28;
      }
      if ((a1 & 0xFFFFFFFE) == 0x32 && a3 == 2) {
        return 29;
      }
      BOOL v5 = a2[2] == 1;
      LODWORD(v4) = 30;
LABEL_92:
      if (v5) {
        return v4;
      }
      else {
        return (v4 + 1);
      }
    case 0xA:
      switch(a2[1])
      {
        case 2:
          switch(a2[2])
          {
            case 2:
              return 208;
            case 3:
            case 4:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_933;
            case 5:
              return 203;
            case 0xA:
              return 202;
            default:
              return 197;
          }
        case 3:
        case 4:
        case 6:
        case 7:
        case 8:
        case 9:
          break;
        case 5:
          switch(a2[2])
          {
            case 2:
              return 192;
            case 3:
            case 4:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_933;
            case 5:
              if ((a1 == 45 || a1 == 35) && a3 == 3) {
                return 187;
              }
              int v17 = a2[3];
              if (v17 == 10) {
                return 285;
              }
              if (v17 == 5) {
                return 287;
              }
              return 289;
            case 0xA:
              if ((a1 == 45 || a1 == 35) && a3 == 3) {
                return 186;
              }
              int v18 = a2[3];
              if (v18 == 10) {
                return 276;
              }
              if (v18 == 5) {
                return 278;
              }
              return 280;
            default:
              if ((a1 == 45 || a1 == 35) && a3 == 3) {
                return 181;
              }
              int v12 = a2[3];
              if (v12 == 10) {
                return 292;
              }
              if (v12 == 5) {
                return 294;
              }
              return 296;
          }
        case 0xA:
          switch(a2[2])
          {
            case 2:
              return 180;
            case 3:
            case 4:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_933;
            case 5:
              if ((a1 == 45 || a1 == 35) && a3 == 3) {
                return 179;
              }
              int v16 = a2[3];
              if (v16 == 10) {
                return 253;
              }
              if (v16 == 5) {
                return 255;
              }
              return 257;
            case 0xA:
              if ((a1 == 45 || a1 == 35) && a3 == 3) {
                return 178;
              }
              int v9 = a2[3];
              if (v9 == 10) {
                return 244;
              }
              if (v9 == 5) {
                return 246;
              }
              return 248;
            default:
              if ((a1 == 45 || a1 == 35) && a3 == 3) {
                return 177;
              }
              int v11 = a2[3];
              if (v11 == 10) {
                return 260;
              }
              if (v11 == 5) {
                return 262;
              }
              return 264;
          }
        default:
          switch(a2[2])
          {
            case 2:
              return 172;
            case 3:
            case 4:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_933;
            case 5:
              if ((a1 == 45 || a1 == 35) && a3 == 3) {
                return 167;
              }
              int v13 = a2[3];
              if (v13 == 10) {
                return 304;
              }
              if (v13 == 5) {
                return 305;
              }
              return 306;
            case 0xA:
              if ((a1 == 45 || a1 == 35) && a3 == 3) {
                return 166;
              }
              int v14 = a2[3];
              if (v14 == 10) {
                return 300;
              }
              if (v14 == 5) {
                return 301;
              }
              return 302;
            default:
              if ((a1 == 45 || a1 == 35) && a3 == 3) {
                return 161;
              }
              int v10 = a2[3];
              if (v10 == 10) {
                return 308;
              }
              if (v10 == 5) {
                return 309;
              }
              return 310;
          }
      }
LABEL_933:
      __break(1u);
      JUMPOUT(0x1CB95A1A0);
    default:
      int v3 = a2[1];
      if (v3 != 5)
      {
        if (v3 == 2)
        {
          switch(a1)
          {
            case 31:
            case 32:
            case 33:
            case 37:
            case 38:
            case 39:
              return 160;
            case 34:
            case 35:
            case 36:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
              goto LABEL_933;
            case 47:
            case 48:
              return 156;
            case 49:
              return 34;
            default:
              return 410;
          }
        }
        switch(a1)
        {
          case 31:
          case 32:
          case 33:
          case 37:
          case 38:
          case 39:
            return 158;
          case 34:
          case 35:
          case 36:
          case 40:
          case 41:
          case 42:
          case 43:
          case 44:
          case 45:
          case 46:
            goto LABEL_933;
          case 47:
          case 48:
            return 157;
          case 49:
            return 32;
          default:
            return 411;
        }
      }
      if (a1 > 0x31) {
        return 409;
      }
      if (((1 << a1) & 0xE380000000) != 0) {
        return 159;
      }
      if (a1 == 48) {
        return 155;
      }
      if (a1 == 49) {
        return 33;
      }
      return 409;
  }
LABEL_253:
  switch(a2[2])
  {
    case 2:
      switch(a1)
      {
        case '#':
        case '-':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'E':
        case 'F':
          if (a3 != 3) {
            goto LABEL_639;
          }
          return 380;
        case '2':
        case '3':
          if (a3 != 3) {
            goto LABEL_639;
          }
          return 3;
        default:
LABEL_639:
          int v50 = a2[3];
          if (v50 != 5)
          {
            if (v50 == 2)
            {
              if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4) {
                return 385;
              }
              if (a2[4] == 1) {
                return 136;
              }
              if (a1 > 33)
              {
                if (a1 != 34 && a1 != 44) {
                  return 386;
                }
              }
              else if (a1 != 14 && a1 != 30)
              {
                return 386;
              }
              if (a3 == 5) {
                return 137;
              }
              return 386;
            }
            if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4) {
              return 381;
            }
            if (a2[4] == 1) {
              return 134;
            }
            if (a1 > 33)
            {
              if (a1 != 34 && a1 != 44) {
                return 388;
              }
            }
            else if (a1 != 14 && a1 != 30)
            {
              return 388;
            }
            if (a3 == 5) {
              return 135;
            }
            return 388;
          }
          if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4) {
            uint64_t v4 = 383;
          }
          else {
            uint64_t v4 = 384;
          }
          break;
      }
      return v4;
    case 3:
    case 4:
    case 6:
    case 7:
    case 8:
    case 9:
      goto LABEL_933;
    case 5:
      switch(a1)
      {
        case '#':
        case '-':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'E':
        case 'F':
          if (a3 != 3) {
            goto LABEL_356;
          }
          uint64_t v4 = 371;
          break;
        default:
LABEL_356:
          int v31 = a2[3];
          if (v31 == 5)
          {
            if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4) {
              uint64_t v4 = 374;
            }
            else {
              uint64_t v4 = 375;
            }
          }
          else if (v31 == 2)
          {
            if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4)
            {
              uint64_t v4 = 376;
            }
            else if (a2[4] == 1)
            {
              uint64_t v4 = 132;
            }
            else if ((a1 == 30 || a1 == 34 || a1 == 44) && a3 == 5)
            {
              uint64_t v4 = 133;
            }
            else
            {
              uint64_t v4 = 377;
            }
          }
          else if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4)
          {
            uint64_t v4 = 372;
          }
          else if (a2[4] == 1)
          {
            uint64_t v4 = 130;
          }
          else if ((a1 == 30 || a1 == 34 || a1 == 44) && a3 == 5)
          {
            uint64_t v4 = 131;
          }
          else
          {
            uint64_t v4 = 379;
          }
          break;
      }
      return v4;
    case 0xA:
      return 370;
    default:
      switch(a1)
      {
        case '#':
        case '-':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'E':
        case 'F':
          if (a3 != 3) {
            goto LABEL_623;
          }
          return 365;
        case '2':
        case '3':
          if (a3 != 3) {
            goto LABEL_623;
          }
          return 2;
        default:
LABEL_623:
          int v49 = a2[3];
          if (v49 == 5)
          {
            if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4) {
              return 368;
            }
            else {
              return 391;
            }
          }
          if (v49 == 2)
          {
            if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4) {
              return 369;
            }
            if (a2[4] == 1)
            {
              uint64_t v4 = 140;
              if (a1 > 34) {
                return 128;
              }
              return v4;
            }
            if (a1 > 33)
            {
              if (a1 != 34)
              {
                if (a1 == 44 && a3 == 5) {
                  return 129;
                }
                return 393;
              }
            }
            else if (a1 != 14 && a1 != 30)
            {
              return 393;
            }
            if (a3 == 5) {
              return 141;
            }
            return 393;
          }
          if (((a1 - 67) <= 5 && ((1 << (a1 - 67)) & 0x33) != 0 || !a1) && a3 == 4) {
            return 366;
          }
          if (a2[4] != 1)
          {
            if (a1 > 33)
            {
              if (a1 != 34)
              {
                if (a1 == 44 && a3 == 5) {
                  return 127;
                }
                return 395;
              }
            }
            else if (a1 != 14 && a1 != 30)
            {
              return 395;
            }
            if (a3 == 5) {
              return 139;
            }
            return 395;
          }
          uint64_t v4 = 138;
          if (a1 > 34) {
            return 126;
          }
          return v4;
      }
  }
}

uint64_t sub_1CB95B138(unsigned int a1, int a2, int a3)
{
  switch(a2)
  {
    case 1:
      if (a1 == 4)
      {
        if (a3 <= 400)
        {
          unsigned int v17 = 915;
          BOOL v18 = a3 == 380;
          unsigned int v19 = 916;
          goto LABEL_840;
        }
        if (a3 == 405) {
          return 918;
        }
        else {
          return 917;
        }
      }
      else
      {
        if (a3 <= 400)
        {
          unsigned int v17 = 923;
          BOOL v18 = a3 == 380;
          unsigned int v19 = 924;
          goto LABEL_840;
        }
        if (a3 == 405) {
          return 926;
        }
        else {
          return 925;
        }
      }
    case 2:
      if (a1 == 4)
      {
        if (a3 <= 400)
        {
          unsigned int v17 = 911;
          BOOL v18 = a3 == 380;
          unsigned int v19 = 912;
          goto LABEL_840;
        }
        if (a3 == 405) {
          return 914;
        }
        else {
          return 913;
        }
      }
      else
      {
        if (a3 <= 400)
        {
          unsigned int v17 = 919;
          BOOL v18 = a3 == 380;
          unsigned int v19 = 920;
          goto LABEL_840;
        }
        if (a3 == 405) {
          return 922;
        }
        else {
          return 921;
        }
      }
    case 3:
      if (a3 <= 409)
      {
        unsigned int v17 = 927;
        BOOL v18 = a3 == 364;
        unsigned int v19 = 928;
        goto LABEL_840;
      }
      if (a3 == 411) {
        return 930;
      }
      else {
        return 929;
      }
    case 4:
      if (a3 <= 409)
      {
        unsigned int v17 = 931;
        BOOL v18 = a3 == 364;
        unsigned int v19 = 932;
        goto LABEL_840;
      }
      if (a3 == 411) {
        return 934;
      }
      else {
        return 933;
      }
    case 5:
      if (a3 <= 409)
      {
        unsigned int v17 = 935;
        BOOL v18 = a3 == 364;
        unsigned int v19 = 936;
        goto LABEL_840;
      }
      if (a3 == 411) {
        return 938;
      }
      else {
        return 937;
      }
    case 6:
      if (a1 == 4)
      {
        uint64_t result = 947;
        switch(a3)
        {
          case 385:
            return result;
          case 386:
          case 388:
          case 389:
          case 390:
          case 391:
          case 393:
            goto LABEL_4367;
          case 387:
            return 948;
          case 392:
            return 949;
          case 394:
            return 950;
          default:
            goto LABEL_4368;
        }
      }
      if (a1 <= 4)
      {
        uint64_t result = 963;
        switch(a3)
        {
          case 385:
            return result;
          case 386:
          case 388:
          case 389:
          case 390:
          case 391:
          case 393:
            goto LABEL_4367;
          case 387:
            return 964;
          case 392:
            return 965;
          case 394:
            return 966;
          default:
            goto LABEL_4368;
        }
      }
      switch(a3)
      {
        case 404:
          return 968;
        case 405:
        case 406:
          goto LABEL_4367;
        case 407:
          return 969;
        case 408:
          return 970;
        default:
          return 967;
      }
    case 7:
      if (a1 == 4)
      {
        uint64_t result = 939;
        switch(a3)
        {
          case 385:
            return result;
          case 386:
          case 388:
          case 389:
          case 390:
          case 391:
          case 393:
            goto LABEL_4367;
          case 387:
            return 940;
          case 392:
            return 941;
          case 394:
            return 942;
          default:
            goto LABEL_4368;
        }
      }
      if (a1 <= 4)
      {
        uint64_t result = 955;
        switch(a3)
        {
          case 385:
            return result;
          case 386:
          case 388:
          case 389:
          case 390:
          case 391:
          case 393:
            goto LABEL_4367;
          case 387:
            return 956;
          case 392:
            return 957;
          case 394:
            return 958;
          default:
            goto LABEL_4368;
        }
      }
      switch(a3)
      {
        case 404:
          return 960;
        case 405:
        case 406:
          goto LABEL_4367;
        case 407:
          return 961;
        case 408:
          return 962;
        default:
          return 959;
      }
    case 8:
      char v35 = (char *)&unk_1CD971828;
      goto LABEL_313;
    case 9:
      char v35 = (char *)&unk_1CD971850;
      goto LABEL_313;
    case 10:
      char v35 = (char *)&unk_1CD971878;
      goto LABEL_313;
    case 11:
      char v35 = (char *)&unk_1CD9718A0;
LABEL_313:
      char v28 = &v35[4 * a3 - 1544];
      return *(unsigned int *)v28;
    case 12:
      if (!(!v4 & v3))
      {
        uint64_t result = 987;
        switch(a3)
        {
          case 385:
            return result;
          case 386:
          case 388:
          case 389:
          case 390:
          case 391:
          case 393:
            goto LABEL_4367;
          case 387:
            return 988;
          case 392:
            return 989;
          case 394:
            return 990;
          default:
            goto LABEL_4368;
        }
      }
      switch(a3)
      {
        case 404:
          return 992;
        case 405:
        case 406:
          goto LABEL_4367;
        case 407:
          return 993;
        case 408:
          return 994;
        default:
          return 991;
      }
    case 13:
      if (!(!v4 & v3))
      {
        uint64_t result = 995;
        switch(a3)
        {
          case 385:
            return result;
          case 386:
          case 388:
          case 389:
          case 390:
          case 391:
          case 393:
            goto LABEL_4367;
          case 387:
            return 996;
          case 392:
            return 997;
          case 394:
            return 998;
          default:
            goto LABEL_4368;
        }
      }
      switch(a3)
      {
        case 404:
          return 1000;
        case 405:
        case 406:
          goto LABEL_4367;
        case 407:
          return 1001;
        case 408:
          return 1002;
        default:
          return 999;
      }
    case 14:
      char v28 = (char *)&unk_1CD9718C8 + 4 * a3 - 536;
      return *(unsigned int *)v28;
    case 15:
      if (a1 == 4)
      {
        if (a3 <= 338)
        {
          if (a3 == 303) {
            int v42 = 1060;
          }
          else {
            int v42 = 1061;
          }
          if (a3 == 299) {
            unsigned int v7 = 1059;
          }
          else {
            unsigned int v7 = v42;
          }
          if (a3 == 282) {
            int v43 = 1057;
          }
          else {
            int v43 = 1058;
          }
          if (a3 <= 298) {
            unsigned int v7 = v43;
          }
          if (a3 == 259) {
            unsigned int v9 = 1055;
          }
          else {
            unsigned int v9 = 1056;
          }
          BOOL v31 = a3 == 241;
          int v32 = 1053;
          int v33 = 1054;
          goto LABEL_928;
        }
        if (a3 == 401) {
          int v133 = 1069;
        }
        else {
          int v133 = 1070;
        }
        if (a3 == 397) {
          int v134 = 1068;
        }
        else {
          int v134 = v133;
        }
        if (a3 == 380) {
          unsigned int v7 = 1066;
        }
        else {
          unsigned int v7 = 1067;
        }
        if (a3 > 396) {
          unsigned int v7 = v134;
        }
        if (a3 == 357) {
          unsigned int v9 = 1064;
        }
        else {
          unsigned int v9 = 1065;
        }
        BOOL v129 = a3 == 339;
        int v130 = 1062;
        int v131 = 1063;
      }
      else
      {
        if (a3 <= 338)
        {
          if (a3 == 303) {
            int v98 = 1096;
          }
          else {
            int v98 = 1097;
          }
          if (a3 == 299) {
            unsigned int v7 = 1095;
          }
          else {
            unsigned int v7 = v98;
          }
          if (a3 == 282) {
            int v99 = 1093;
          }
          else {
            int v99 = 1094;
          }
          if (a3 <= 298) {
            unsigned int v7 = v99;
          }
          if (a3 == 259) {
            unsigned int v9 = 1091;
          }
          else {
            unsigned int v9 = 1092;
          }
          BOOL v31 = a3 == 241;
          int v32 = 1089;
          int v33 = 1090;
          goto LABEL_928;
        }
        if (a3 == 401) {
          int v140 = 1105;
        }
        else {
          int v140 = 1106;
        }
        if (a3 == 397) {
          int v141 = 1104;
        }
        else {
          int v141 = v140;
        }
        if (a3 == 380) {
          unsigned int v7 = 1102;
        }
        else {
          unsigned int v7 = 1103;
        }
        if (a3 > 396) {
          unsigned int v7 = v141;
        }
        if (a3 == 357) {
          unsigned int v9 = 1100;
        }
        else {
          unsigned int v9 = 1101;
        }
        BOOL v129 = a3 == 339;
        int v130 = 1098;
        int v131 = 1099;
      }
      goto LABEL_1438;
    case 16:
      if (a1 == 4)
      {
        if (a3 <= 338)
        {
          if (a3 == 303) {
            int v29 = 1042;
          }
          else {
            int v29 = 1043;
          }
          if (a3 == 299) {
            unsigned int v7 = 1041;
          }
          else {
            unsigned int v7 = v29;
          }
          if (a3 == 282) {
            int v30 = 1039;
          }
          else {
            int v30 = 1040;
          }
          if (a3 <= 298) {
            unsigned int v7 = v30;
          }
          if (a3 == 259) {
            unsigned int v9 = 1037;
          }
          else {
            unsigned int v9 = 1038;
          }
          BOOL v31 = a3 == 241;
          int v32 = 1035;
          int v33 = 1036;
          goto LABEL_928;
        }
        if (a3 == 401) {
          int v127 = 1051;
        }
        else {
          int v127 = 1052;
        }
        if (a3 == 397) {
          int v128 = 1050;
        }
        else {
          int v128 = v127;
        }
        if (a3 == 380) {
          unsigned int v7 = 1048;
        }
        else {
          unsigned int v7 = 1049;
        }
        if (a3 > 396) {
          unsigned int v7 = v128;
        }
        if (a3 == 357) {
          unsigned int v9 = 1046;
        }
        else {
          unsigned int v9 = 1047;
        }
        BOOL v129 = a3 == 339;
        int v130 = 1044;
        int v131 = 1045;
      }
      else
      {
        if (a3 <= 338)
        {
          if (a3 == 303) {
            int v94 = 1078;
          }
          else {
            int v94 = 1079;
          }
          if (a3 == 299) {
            unsigned int v7 = 1077;
          }
          else {
            unsigned int v7 = v94;
          }
          if (a3 == 282) {
            int v95 = 1075;
          }
          else {
            int v95 = 1076;
          }
          if (a3 <= 298) {
            unsigned int v7 = v95;
          }
          if (a3 == 259) {
            unsigned int v9 = 1073;
          }
          else {
            unsigned int v9 = 1074;
          }
          BOOL v31 = a3 == 241;
          int v32 = 1071;
          int v33 = 1072;
          goto LABEL_928;
        }
        if (a3 == 401) {
          int v137 = 1087;
        }
        else {
          int v137 = 1088;
        }
        if (a3 == 397) {
          int v138 = 1086;
        }
        else {
          int v138 = v137;
        }
        if (a3 == 380) {
          unsigned int v7 = 1084;
        }
        else {
          unsigned int v7 = 1085;
        }
        if (a3 > 396) {
          unsigned int v7 = v138;
        }
        if (a3 == 357) {
          unsigned int v9 = 1082;
        }
        else {
          unsigned int v9 = 1083;
        }
        BOOL v129 = a3 == 339;
        int v130 = 1080;
        int v131 = 1081;
      }
      goto LABEL_1438;
    case 17:
      if (a3 == 410) {
        int v50 = 1114;
      }
      else {
        int v50 = 1115;
      }
      if (a3 == 409) {
        int v51 = 1113;
      }
      else {
        int v51 = v50;
      }
      if (a3 == 364) {
        unsigned int v7 = 1111;
      }
      else {
        unsigned int v7 = 1112;
      }
      if (a3 > 408) {
        unsigned int v7 = v51;
      }
      if (a3 == 298) {
        unsigned int v9 = 1109;
      }
      else {
        unsigned int v9 = 1110;
      }
      BOOL v52 = a3 == 234;
      int v53 = 1107;
      int v54 = 1108;
      goto LABEL_462;
    case 18:
      if (a3 == 410) {
        int v55 = 1123;
      }
      else {
        int v55 = 1124;
      }
      if (a3 == 409) {
        int v56 = 1122;
      }
      else {
        int v56 = v55;
      }
      if (a3 == 364) {
        unsigned int v7 = 1120;
      }
      else {
        unsigned int v7 = 1121;
      }
      if (a3 > 408) {
        unsigned int v7 = v56;
      }
      if (a3 == 298) {
        unsigned int v9 = 1118;
      }
      else {
        unsigned int v9 = 1119;
      }
      BOOL v52 = a3 == 234;
      int v53 = 1116;
      int v54 = 1117;
      goto LABEL_462;
    case 19:
      if (a3 == 410) {
        int v65 = 1132;
      }
      else {
        int v65 = 1133;
      }
      if (a3 == 409) {
        int v66 = 1131;
      }
      else {
        int v66 = v65;
      }
      if (a3 == 364) {
        unsigned int v7 = 1129;
      }
      else {
        unsigned int v7 = 1130;
      }
      if (a3 > 408) {
        unsigned int v7 = v66;
      }
      if (a3 == 298) {
        unsigned int v9 = 1127;
      }
      else {
        unsigned int v9 = 1128;
      }
      BOOL v52 = a3 == 234;
      int v53 = 1125;
      int v54 = 1126;
LABEL_462:
      if (!v52) {
        int v53 = v54;
      }
      if (a3 <= 297) {
        unsigned int v9 = v53;
      }
      BOOL v39 = a3 <= 363;
      goto LABEL_1923;
    case 20:
      if (a1 == 4)
      {
        switch(a3)
        {
          case 244:
            return 1290;
          case 245:
          case 247:
          case 249:
          case 250:
          case 251:
          case 252:
          case 254:
          case 256:
          case 258:
          case 259:
          case 261:
          case 263:
          case 265:
          case 266:
          case 267:
          case 268:
          case 269:
          case 270:
          case 271:
          case 272:
          case 273:
          case 274:
          case 275:
          case 277:
          case 279:
          case 281:
          case 282:
          case 283:
          case 284:
          case 286:
          case 288:
          case 290:
          case 291:
          case 293:
          case 295:
          case 297:
          case 298:
          case 299:
          case 303:
          case 307:
            goto LABEL_4367;
          case 246:
            return 1291;
          case 248:
            return 1292;
          case 253:
            return 1293;
          case 255:
            return 1294;
          case 257:
            return 1295;
          case 260:
            return 1296;
          case 262:
            return 1297;
          case 264:
            return 1298;
          case 276:
            return 1299;
          case 278:
            return 1300;
          case 280:
            return 1301;
          case 285:
            return 1302;
          case 287:
            return 1303;
          case 289:
            return 1304;
          case 292:
            return 1305;
          case 294:
            return 1306;
          case 296:
            return 1307;
          case 300:
            return 1308;
          case 301:
            return 1309;
          case 302:
            return 1310;
          case 304:
            return 1311;
          case 305:
            return 1312;
          case 306:
            return 1313;
          case 308:
            return 1314;
          case 309:
            return 1315;
          case 310:
            return 1316;
          default:
            uint64_t result = 1330;
            switch(a3)
            {
              case 343:
              case 345:
              case 347:
              case 348:
              case 349:
              case 350:
              case 352:
              case 354:
              case 356:
              case 357:
              case 359:
              case 361:
              case 363:
              case 364:
              case 365:
              case 366:
              case 367:
              case 368:
              case 369:
              case 370:
              case 371:
              case 372:
              case 373:
              case 375:
              case 377:
              case 379:
              case 380:
              case 381:
              case 382:
              case 384:
              case 386:
              case 388:
              case 389:
              case 391:
              case 393:
              case 395:
              case 396:
              case 397:
              case 401:
              case 405:
                goto LABEL_4367;
              case 344:
                return 1318;
              case 346:
                return 1319;
              case 351:
                return 1320;
              case 353:
                return 1321;
              case 355:
                return 1322;
              case 358:
                return 1323;
              case 360:
                return 1324;
              case 362:
                return 1325;
              case 374:
                return 1326;
              case 376:
                return 1327;
              case 378:
                return 1328;
              case 383:
                return 1329;
              case 385:
                return result;
              case 387:
                return 1331;
              case 390:
                return 1332;
              case 392:
                return 1333;
              case 394:
                return 1334;
              case 398:
                return 1335;
              case 399:
                return 1336;
              case 400:
                return 1337;
              case 402:
                return 1338;
              case 403:
                return 1339;
              case 404:
                return 1340;
              case 406:
                return 1341;
              case 407:
                return 1342;
              case 408:
                return 1343;
              default:
                return 1317;
            }
        }
      }
      switch(a3)
      {
        case 244:
          return 1398;
        case 245:
        case 247:
        case 249:
        case 250:
        case 251:
        case 252:
        case 254:
        case 256:
        case 258:
        case 259:
        case 261:
        case 263:
        case 265:
        case 266:
        case 267:
        case 268:
        case 269:
        case 270:
        case 271:
        case 272:
        case 273:
        case 274:
        case 275:
        case 277:
        case 279:
        case 281:
        case 282:
        case 283:
        case 284:
        case 286:
        case 288:
        case 290:
        case 291:
        case 293:
        case 295:
        case 297:
        case 298:
        case 299:
        case 303:
        case 307:
          goto LABEL_4367;
        case 246:
          return 1399;
        case 248:
          return 1400;
        case 253:
          return 1401;
        case 255:
          return 1402;
        case 257:
          return 1403;
        case 260:
          return 1404;
        case 262:
          return 1405;
        case 264:
          return 1406;
        case 276:
          return 1407;
        case 278:
          return 1408;
        case 280:
          return 1409;
        case 285:
          return 1410;
        case 287:
          return 1411;
        case 289:
          return 1412;
        case 292:
          return 1413;
        case 294:
          return 1414;
        case 296:
          return 1415;
        case 300:
          return 1416;
        case 301:
          return 1417;
        case 302:
          return 1418;
        case 304:
          return 1419;
        case 305:
          return 1420;
        case 306:
          return 1421;
        case 308:
          return 1422;
        case 309:
          return 1423;
        case 310:
          return 1424;
        default:
          uint64_t result = 1438;
          switch(a3)
          {
            case 343:
            case 345:
            case 347:
            case 348:
            case 349:
            case 350:
            case 352:
            case 354:
            case 356:
            case 357:
            case 359:
            case 361:
            case 363:
            case 364:
            case 365:
            case 366:
            case 367:
            case 368:
            case 369:
            case 370:
            case 371:
            case 372:
            case 373:
            case 375:
            case 377:
            case 379:
            case 380:
            case 381:
            case 382:
            case 384:
            case 386:
            case 388:
            case 389:
            case 391:
            case 393:
            case 395:
            case 396:
            case 397:
            case 401:
            case 405:
              goto LABEL_4367;
            case 344:
              return 1426;
            case 346:
              return 1427;
            case 351:
              return 1428;
            case 353:
              return 1429;
            case 355:
              return 1430;
            case 358:
              return 1431;
            case 360:
              return 1432;
            case 362:
              return 1433;
            case 374:
              return 1434;
            case 376:
              return 1435;
            case 378:
              return 1436;
            case 383:
              return 1437;
            case 385:
              return result;
            case 387:
              return 1439;
            case 390:
              return 1440;
            case 392:
              return 1441;
            case 394:
              return 1442;
            case 398:
              return 1443;
            case 399:
              return 1444;
            case 400:
              return 1445;
            case 402:
              return 1446;
            case 403:
              return 1447;
            case 404:
              return 1448;
            case 406:
              return 1449;
            case 407:
              return 1450;
            case 408:
              return 1451;
            default:
              return 1425;
          }
      }
    case 21:
      if (a1 == 4)
      {
        switch(a3)
        {
          case 244:
            return 1236;
          case 245:
          case 247:
          case 249:
          case 250:
          case 251:
          case 252:
          case 254:
          case 256:
          case 258:
          case 259:
          case 261:
          case 263:
          case 265:
          case 266:
          case 267:
          case 268:
          case 269:
          case 270:
          case 271:
          case 272:
          case 273:
          case 274:
          case 275:
          case 277:
          case 279:
          case 281:
          case 282:
          case 283:
          case 284:
          case 286:
          case 288:
          case 290:
          case 291:
          case 293:
          case 295:
          case 297:
          case 298:
          case 299:
          case 303:
          case 307:
            goto LABEL_4367;
          case 246:
            return 1237;
          case 248:
            return 1238;
          case 253:
            return 1239;
          case 255:
            return 1240;
          case 257:
            return 1241;
          case 260:
            return 1242;
          case 262:
            return 1243;
          case 264:
            return 1244;
          case 276:
            return 1245;
          case 278:
            return 1246;
          case 280:
            return 1247;
          case 285:
            return 1248;
          case 287:
            return 1249;
          case 289:
            return 1250;
          case 292:
            return 1251;
          case 294:
            return 1252;
          case 296:
            return 1253;
          case 300:
            return 1254;
          case 301:
            return 1255;
          case 302:
            return 1256;
          case 304:
            return 1257;
          case 305:
            return 1258;
          case 306:
            return 1259;
          case 308:
            return 1260;
          case 309:
            return 1261;
          case 310:
            return 1262;
          default:
            uint64_t result = 1276;
            switch(a3)
            {
              case 343:
              case 345:
              case 347:
              case 348:
              case 349:
              case 350:
              case 352:
              case 354:
              case 356:
              case 357:
              case 359:
              case 361:
              case 363:
              case 364:
              case 365:
              case 366:
              case 367:
              case 368:
              case 369:
              case 370:
              case 371:
              case 372:
              case 373:
              case 375:
              case 377:
              case 379:
              case 380:
              case 381:
              case 382:
              case 384:
              case 386:
              case 388:
              case 389:
              case 391:
              case 393:
              case 395:
              case 396:
              case 397:
              case 401:
              case 405:
                goto LABEL_4367;
              case 344:
                return 1264;
              case 346:
                return 1265;
              case 351:
                return 1266;
              case 353:
                return 1267;
              case 355:
                return 1268;
              case 358:
                return 1269;
              case 360:
                return 1270;
              case 362:
                return 1271;
              case 374:
                return 1272;
              case 376:
                return 1273;
              case 378:
                return 1274;
              case 383:
                return 1275;
              case 385:
                return result;
              case 387:
                return 1277;
              case 390:
                return 1278;
              case 392:
                return 1279;
              case 394:
                return 1280;
              case 398:
                return 1281;
              case 399:
                return 1282;
              case 400:
                return 1283;
              case 402:
                return 1284;
              case 403:
                return 1285;
              case 404:
                return 1286;
              case 406:
                return 1287;
              case 407:
                return 1288;
              case 408:
                return 1289;
              default:
                return 1263;
            }
        }
      }
      switch(a3)
      {
        case 244:
          return 1344;
        case 245:
        case 247:
        case 249:
        case 250:
        case 251:
        case 252:
        case 254:
        case 256:
        case 258:
        case 259:
        case 261:
        case 263:
        case 265:
        case 266:
        case 267:
        case 268:
        case 269:
        case 270:
        case 271:
        case 272:
        case 273:
        case 274:
        case 275:
        case 277:
        case 279:
        case 281:
        case 282:
        case 283:
        case 284:
        case 286:
        case 288:
        case 290:
        case 291:
        case 293:
        case 295:
        case 297:
        case 298:
        case 299:
        case 303:
        case 307:
          goto LABEL_4367;
        case 246:
          return 1345;
        case 248:
          return 1346;
        case 253:
          return 1347;
        case 255:
          return 1348;
        case 257:
          return 1349;
        case 260:
          return 1350;
        case 262:
          return 1351;
        case 264:
          return 1352;
        case 276:
          return 1353;
        case 278:
          return 1354;
        case 280:
          return 1355;
        case 285:
          return 1356;
        case 287:
          return 1357;
        case 289:
          return 1358;
        case 292:
          return 1359;
        case 294:
          return 1360;
        case 296:
          return 1361;
        case 300:
          return 1362;
        case 301:
          return 1363;
        case 302:
          return 1364;
        case 304:
          return 1365;
        case 305:
          return 1366;
        case 306:
          return 1367;
        case 308:
          return 1368;
        case 309:
          return 1369;
        case 310:
          return 1370;
        default:
          uint64_t result = 1384;
          switch(a3)
          {
            case 343:
            case 345:
            case 347:
            case 348:
            case 349:
            case 350:
            case 352:
            case 354:
            case 356:
            case 357:
            case 359:
            case 361:
            case 363:
            case 364:
            case 365:
            case 366:
            case 367:
            case 368:
            case 369:
            case 370:
            case 371:
            case 372:
            case 373:
            case 375:
            case 377:
            case 379:
            case 380:
            case 381:
            case 382:
            case 384:
            case 386:
            case 388:
            case 389:
            case 391:
            case 393:
            case 395:
            case 396:
            case 397:
            case 401:
            case 405:
              goto LABEL_4367;
            case 344:
              return 1372;
            case 346:
              return 1373;
            case 351:
              return 1374;
            case 353:
              return 1375;
            case 355:
              return 1376;
            case 358:
              return 1377;
            case 360:
              return 1378;
            case 362:
              return 1379;
            case 374:
              return 1380;
            case 376:
              return 1381;
            case 378:
              return 1382;
            case 383:
              return 1383;
            case 385:
              return result;
            case 387:
              return 1385;
            case 390:
              return 1386;
            case 392:
              return 1387;
            case 394:
              return 1388;
            case 398:
              return 1389;
            case 399:
              return 1390;
            case 400:
              return 1391;
            case 402:
              return 1392;
            case 403:
              return 1393;
            case 404:
              return 1394;
            case 406:
              return 1395;
            case 407:
              return 1396;
            case 408:
              return 1397;
            default:
              return 1371;
          }
      }
    case 22:
      if (a3 <= 342)
      {
        if (a3 > 0x156)
        {
          switch(a3)
          {
            case 278:
            case 280:
            case 282:
            case 283:
            case 284:
            case 285:
            case 287:
            case 289:
            case 291:
            case 292:
            case 294:
            case 296:
              goto LABEL_4367;
            case 279:
              return 1498;
            case 281:
              return 1499;
            case 286:
              return 1500;
            case 288:
              return 1501;
            case 290:
              return 1502;
            case 293:
              return 1503;
            case 295:
              return 1504;
            case 297:
              return 1505;
            default:
              return 1497;
          }
        }
        switch(a3)
        {
          case 245:
            return 1488;
          case 246:
          case 248:
          case 250:
          case 251:
          case 252:
          case 253:
          case 255:
          case 257:
          case 259:
          case 260:
          case 262:
          case 264:
            goto LABEL_4367;
          case 247:
            return 1489;
          case 249:
            return 1490;
          case 254:
            return 1491;
          case 256:
            return 1492;
          case 258:
            return 1493;
          case 261:
            return 1494;
          case 263:
            return 1495;
          case 265:
            return 1496;
          default:
            goto LABEL_4368;
        }
      }
      uint64_t result = 1519;
      switch(a3)
      {
        case 376:
        case 378:
        case 380:
        case 381:
        case 382:
        case 383:
        case 385:
        case 387:
        case 389:
        case 390:
        case 392:
        case 394:
          goto LABEL_4367;
        case 377:
          return 1516;
        case 379:
          return 1517;
        case 384:
          return 1518;
        case 386:
          return result;
        case 388:
          return 1520;
        case 391:
          return 1521;
        case 393:
          return 1522;
        case 395:
          return 1523;
        default:
          return 1515;
      }
    case 23:
      if (a3 <= 342)
      {
        if (a3 > 0x156)
        {
          switch(a3)
          {
            case 278:
            case 280:
            case 282:
            case 283:
            case 284:
            case 285:
            case 287:
            case 289:
            case 291:
            case 292:
            case 294:
            case 296:
              goto LABEL_4367;
            case 279:
              return 1462;
            case 281:
              return 1463;
            case 286:
              return 1464;
            case 288:
              return 1465;
            case 290:
              return 1466;
            case 293:
              return 1467;
            case 295:
              return 1468;
            case 297:
              return 1469;
            default:
              return 1461;
          }
        }
        switch(a3)
        {
          case 245:
            return 1452;
          case 246:
          case 248:
          case 250:
          case 251:
          case 252:
          case 253:
          case 255:
          case 257:
          case 259:
          case 260:
          case 262:
          case 264:
            goto LABEL_4367;
          case 247:
            return 1453;
          case 249:
            return 1454;
          case 254:
            return 1455;
          case 256:
            return 1456;
          case 258:
            return 1457;
          case 261:
            return 1458;
          case 263:
            return 1459;
          case 265:
            return 1460;
          default:
            goto LABEL_4368;
        }
      }
      uint64_t result = 1483;
      switch(a3)
      {
        case 376:
        case 378:
        case 380:
        case 381:
        case 382:
        case 383:
        case 385:
        case 387:
        case 389:
        case 390:
        case 392:
        case 394:
          goto LABEL_4367;
        case 377:
          return 1480;
        case 379:
          return 1481;
        case 384:
          return 1482;
        case 386:
          return result;
        case 388:
          return 1484;
        case 391:
          return 1485;
        case 393:
          return 1486;
        case 395:
          return 1487;
        default:
          return 1479;
      }
    case 24:
      if (a3 <= 342)
      {
        if (a3 > 0x156)
        {
          switch(a3)
          {
            case 278:
            case 280:
            case 282:
            case 283:
            case 284:
            case 285:
            case 287:
            case 289:
            case 291:
            case 292:
            case 294:
            case 296:
              goto LABEL_4367;
            case 279:
              return 1570;
            case 281:
              return 1571;
            case 286:
              return 1572;
            case 288:
              return 1573;
            case 290:
              return 1574;
            case 293:
              return 1575;
            case 295:
              return 1576;
            case 297:
              return 1577;
            default:
              return 1569;
          }
        }
        switch(a3)
        {
          case 245:
            return 1560;
          case 246:
          case 248:
          case 250:
          case 251:
          case 252:
          case 253:
          case 255:
          case 257:
          case 259:
          case 260:
          case 262:
          case 264:
            goto LABEL_4367;
          case 247:
            return 1561;
          case 249:
            return 1562;
          case 254:
            return 1563;
          case 256:
            return 1564;
          case 258:
            return 1565;
          case 261:
            return 1566;
          case 263:
            return 1567;
          case 265:
            return 1568;
          default:
            goto LABEL_4368;
        }
      }
      uint64_t result = 1591;
      switch(a3)
      {
        case 376:
        case 378:
        case 380:
        case 381:
        case 382:
        case 383:
        case 385:
        case 387:
        case 389:
        case 390:
        case 392:
        case 394:
          goto LABEL_4367;
        case 377:
          return 1588;
        case 379:
          return 1589;
        case 384:
          return 1590;
        case 386:
          return result;
        case 388:
          return 1592;
        case 391:
          return 1593;
        case 393:
          return 1594;
        case 395:
          return 1595;
        default:
          return 1587;
      }
    case 25:
      if (a3 <= 342)
      {
        if (a3 > 0x156)
        {
          switch(a3)
          {
            case 278:
            case 280:
            case 282:
            case 283:
            case 284:
            case 285:
            case 287:
            case 289:
            case 291:
            case 292:
            case 294:
            case 296:
              goto LABEL_4367;
            case 279:
              return 1534;
            case 281:
              return 1535;
            case 286:
              return 1536;
            case 288:
              return 1537;
            case 290:
              return 1538;
            case 293:
              return 1539;
            case 295:
              return 1540;
            case 297:
              return 1541;
            default:
              return 1533;
          }
        }
        switch(a3)
        {
          case 245:
            return 1524;
          case 246:
          case 248:
          case 250:
          case 251:
          case 252:
          case 253:
          case 255:
          case 257:
          case 259:
          case 260:
          case 262:
          case 264:
            goto LABEL_4367;
          case 247:
            return 1525;
          case 249:
            return 1526;
          case 254:
            return 1527;
          case 256:
            return 1528;
          case 258:
            return 1529;
          case 261:
            return 1530;
          case 263:
            return 1531;
          case 265:
            return 1532;
          default:
LABEL_4368:
            JUMPOUT(0);
        }
      }
      uint64_t result = 1555;
      switch(a3)
      {
        case 376:
        case 378:
        case 380:
        case 381:
        case 382:
        case 383:
        case 385:
        case 387:
        case 389:
        case 390:
        case 392:
        case 394:
          goto LABEL_4367;
        case 377:
          return 1552;
        case 379:
          return 1553;
        case 384:
          return 1554;
        case 386:
          return result;
        case 388:
          return 1556;
        case 391:
          return 1557;
        case 393:
          return 1558;
        case 395:
          return 1559;
        default:
          return 1551;
      }
    case 26:
      switch(a3)
      {
        case 244:
          return 1620;
        case 245:
        case 247:
        case 249:
        case 250:
        case 251:
        case 252:
        case 254:
        case 256:
        case 258:
        case 259:
        case 261:
        case 263:
        case 265:
        case 266:
        case 267:
        case 268:
        case 269:
        case 270:
        case 271:
        case 272:
        case 273:
        case 274:
        case 275:
        case 277:
        case 279:
        case 281:
        case 282:
        case 283:
        case 284:
        case 286:
        case 288:
        case 290:
        case 291:
        case 293:
        case 295:
        case 297:
        case 298:
        case 299:
        case 303:
        case 307:
          goto LABEL_4367;
        case 246:
          return 1621;
        case 248:
          return 1622;
        case 253:
          return 1623;
        case 255:
          return 1624;
        case 257:
          return 1625;
        case 260:
          return 1626;
        case 262:
          return 1627;
        case 264:
          return 1628;
        case 276:
          return 1629;
        case 278:
          return 1630;
        case 280:
          return 1631;
        case 285:
          return 1632;
        case 287:
          return 1633;
        case 289:
          return 1634;
        case 292:
          return 1635;
        case 294:
          return 1636;
        case 296:
          return 1637;
        case 300:
          return 1638;
        case 301:
          return 1639;
        case 302:
          return 1640;
        case 304:
          return 1641;
        case 305:
          return 1642;
        case 306:
          return 1643;
        case 308:
          return 1644;
        case 309:
          return 1645;
        case 310:
          return 1646;
        default:
          uint64_t result = 1660;
          switch(a3)
          {
            case 343:
            case 345:
            case 347:
            case 348:
            case 349:
            case 350:
            case 352:
            case 354:
            case 356:
            case 357:
            case 359:
            case 361:
            case 363:
            case 364:
            case 365:
            case 366:
            case 367:
            case 368:
            case 369:
            case 370:
            case 371:
            case 372:
            case 373:
            case 375:
            case 377:
            case 379:
            case 380:
            case 381:
            case 382:
            case 384:
            case 386:
            case 388:
            case 389:
            case 391:
            case 393:
            case 395:
            case 396:
            case 397:
            case 401:
            case 405:
              goto LABEL_4367;
            case 344:
              return 1648;
            case 346:
              return 1649;
            case 351:
              return 1650;
            case 353:
              return 1651;
            case 355:
              return 1652;
            case 358:
              return 1653;
            case 360:
              return 1654;
            case 362:
              return 1655;
            case 374:
              return 1656;
            case 376:
              return 1657;
            case 378:
              return 1658;
            case 383:
              return 1659;
            case 385:
              return result;
            case 387:
              return 1661;
            case 390:
              return 1662;
            case 392:
              return 1663;
            case 394:
              return 1664;
            case 398:
              return 1665;
            case 399:
              return 1666;
            case 400:
              return 1667;
            case 402:
              return 1668;
            case 403:
              return 1669;
            case 404:
              return 1670;
            case 406:
              return 1671;
            case 407:
              return 1672;
            case 408:
              return 1673;
            default:
              return 1647;
          }
      }
    case 27:
      switch(a3)
      {
        case 244:
          return 1674;
        case 245:
        case 247:
        case 249:
        case 250:
        case 251:
        case 252:
        case 254:
        case 256:
        case 258:
        case 259:
        case 261:
        case 263:
        case 265:
        case 266:
        case 267:
        case 268:
        case 269:
        case 270:
        case 271:
        case 272:
        case 273:
        case 274:
        case 275:
        case 277:
        case 279:
        case 281:
        case 282:
        case 283:
        case 284:
        case 286:
        case 288:
        case 290:
        case 291:
        case 293:
        case 295:
        case 297:
        case 298:
        case 299:
        case 303:
        case 307:
          goto LABEL_4367;
        case 246:
          return 1675;
        case 248:
          return 1676;
        case 253:
          return 1677;
        case 255:
          return 1678;
        case 257:
          return 1679;
        case 260:
          return 1680;
        case 262:
          return 1681;
        case 264:
          return 1682;
        case 276:
          return 1683;
        case 278:
          return 1684;
        case 280:
          return 1685;
        case 285:
          return 1686;
        case 287:
          return 1687;
        case 289:
          return 1688;
        case 292:
          return 1689;
        case 294:
          return 1690;
        case 296:
          return 1691;
        case 300:
          return 1692;
        case 301:
          return 1693;
        case 302:
          return 1694;
        case 304:
          return 1695;
        case 305:
          return 1696;
        case 306:
          return 1697;
        case 308:
          return 1698;
        case 309:
          return 1699;
        case 310:
          return 1700;
        default:
          uint64_t result = 1714;
          switch(a3)
          {
            case 343:
            case 345:
            case 347:
            case 348:
            case 349:
            case 350:
            case 352:
            case 354:
            case 356:
            case 357:
            case 359:
            case 361:
            case 363:
            case 364:
            case 365:
            case 366:
            case 367:
            case 368:
            case 369:
            case 370:
            case 371:
            case 372:
            case 373:
            case 375:
            case 377:
            case 379:
            case 380:
            case 381:
            case 382:
            case 384:
            case 386:
            case 388:
            case 389:
            case 391:
            case 393:
            case 395:
            case 396:
            case 397:
            case 401:
            case 405:
              goto LABEL_4367;
            case 344:
              return 1702;
            case 346:
              return 1703;
            case 351:
              return 1704;
            case 353:
              return 1705;
            case 355:
              return 1706;
            case 358:
              return 1707;
            case 360:
              return 1708;
            case 362:
              return 1709;
            case 374:
              return 1710;
            case 376:
              return 1711;
            case 378:
              return 1712;
            case 383:
              return 1713;
            case 385:
              return result;
            case 387:
              return 1715;
            case 390:
              return 1716;
            case 392:
              return 1717;
            case 394:
              return 1718;
            case 398:
              return 1719;
            case 399:
              return 1720;
            case 400:
              return 1721;
            case 402:
              return 1722;
            case 403:
              return 1723;
            case 404:
              return 1724;
            case 406:
              return 1725;
            case 407:
              return 1726;
            case 408:
              return 1727;
            default:
              return 1701;
          }
      }
    case 28:
      if (a1 == 4)
      {
        if (a3 <= 338)
        {
          if (a3 == 303) {
            int v67 = 1753;
          }
          else {
            int v67 = 1754;
          }
          if (a3 == 299) {
            unsigned int v7 = 1752;
          }
          else {
            unsigned int v7 = v67;
          }
          if (a3 == 282) {
            int v68 = 1750;
          }
          else {
            int v68 = 1751;
          }
          if (a3 <= 298) {
            unsigned int v7 = v68;
          }
          if (a3 == 259) {
            unsigned int v9 = 1748;
          }
          else {
            unsigned int v9 = 1749;
          }
          BOOL v31 = a3 == 241;
          int v32 = 1746;
          int v33 = 1747;
          goto LABEL_928;
        }
        if (a3 == 401) {
          int v144 = 1762;
        }
        else {
          int v144 = 1763;
        }
        if (a3 == 397) {
          int v145 = 1761;
        }
        else {
          int v145 = v144;
        }
        if (a3 == 380) {
          unsigned int v7 = 1759;
        }
        else {
          unsigned int v7 = 1760;
        }
        if (a3 > 396) {
          unsigned int v7 = v145;
        }
        if (a3 == 357) {
          unsigned int v9 = 1757;
        }
        else {
          unsigned int v9 = 1758;
        }
        BOOL v129 = a3 == 339;
        int v130 = 1755;
        int v131 = 1756;
      }
      else
      {
        if (a3 <= 338)
        {
          if (a3 == 303) {
            int v106 = 1789;
          }
          else {
            int v106 = 1790;
          }
          if (a3 == 299) {
            unsigned int v7 = 1788;
          }
          else {
            unsigned int v7 = v106;
          }
          if (a3 == 282) {
            int v107 = 1786;
          }
          else {
            int v107 = 1787;
          }
          if (a3 <= 298) {
            unsigned int v7 = v107;
          }
          if (a3 == 259) {
            unsigned int v9 = 1784;
          }
          else {
            unsigned int v9 = 1785;
          }
          BOOL v31 = a3 == 241;
          int v32 = 1782;
          int v33 = 1783;
          goto LABEL_928;
        }
        if (a3 == 401) {
          int v151 = 1798;
        }
        else {
          int v151 = 1799;
        }
        if (a3 == 397) {
          int v152 = 1797;
        }
        else {
          int v152 = v151;
        }
        if (a3 == 380) {
          unsigned int v7 = 1795;
        }
        else {
          unsigned int v7 = 1796;
        }
        if (a3 > 396) {
          unsigned int v7 = v152;
        }
        if (a3 == 357) {
          unsigned int v9 = 1793;
        }
        else {
          unsigned int v9 = 1794;
        }
        BOOL v129 = a3 == 339;
        int v130 = 1791;
        int v131 = 1792;
      }
      goto LABEL_1438;
    case 29:
      if (a1 == 4)
      {
        if (a3 <= 338)
        {
          if (a3 == 303) {
            int v69 = 1735;
          }
          else {
            int v69 = 1736;
          }
          if (a3 == 299) {
            unsigned int v7 = 1734;
          }
          else {
            unsigned int v7 = v69;
          }
          if (a3 == 282) {
            int v70 = 1732;
          }
          else {
            int v70 = 1733;
          }
          if (a3 <= 298) {
            unsigned int v7 = v70;
          }
          if (a3 == 259) {
            unsigned int v9 = 1730;
          }
          else {
            unsigned int v9 = 1731;
          }
          BOOL v31 = a3 == 241;
          int v32 = 1728;
          int v33 = 1729;
LABEL_928:
          if (!v31) {
            int v32 = v33;
          }
          if (a3 <= 258) {
            unsigned int v9 = v32;
          }
          BOOL v39 = a3 <= 281;
          goto LABEL_1923;
        }
        if (a3 == 401) {
          int v146 = 1744;
        }
        else {
          int v146 = 1745;
        }
        if (a3 == 397) {
          int v147 = 1743;
        }
        else {
          int v147 = v146;
        }
        if (a3 == 380) {
          unsigned int v7 = 1741;
        }
        else {
          unsigned int v7 = 1742;
        }
        if (a3 > 396) {
          unsigned int v7 = v147;
        }
        if (a3 == 357) {
          unsigned int v9 = 1739;
        }
        else {
          unsigned int v9 = 1740;
        }
        BOOL v129 = a3 == 339;
        int v130 = 1737;
        int v131 = 1738;
      }
      else
      {
        if (a3 <= 338)
        {
          if (a3 == 303) {
            int v108 = 1771;
          }
          else {
            int v108 = 1772;
          }
          if (a3 == 299) {
            unsigned int v7 = 1770;
          }
          else {
            unsigned int v7 = v108;
          }
          if (a3 == 282) {
            int v109 = 1768;
          }
          else {
            int v109 = 1769;
          }
          if (a3 <= 298) {
            unsigned int v7 = v109;
          }
          if (a3 == 259) {
            unsigned int v9 = 1766;
          }
          else {
            unsigned int v9 = 1767;
          }
          BOOL v31 = a3 == 241;
          int v32 = 1764;
          int v33 = 1765;
          goto LABEL_928;
        }
        if (a3 == 401) {
          int v153 = 1780;
        }
        else {
          int v153 = 1781;
        }
        if (a3 == 397) {
          int v154 = 1779;
        }
        else {
          int v154 = v153;
        }
        if (a3 == 380) {
          unsigned int v7 = 1777;
        }
        else {
          unsigned int v7 = 1778;
        }
        if (a3 > 396) {
          unsigned int v7 = v154;
        }
        if (a3 == 357) {
          unsigned int v9 = 1775;
        }
        else {
          unsigned int v9 = 1776;
        }
        BOOL v129 = a3 == 339;
        int v130 = 1773;
        int v131 = 1774;
      }
LABEL_1438:
      if (!v129) {
        int v130 = v131;
      }
      if (a3 <= 356) {
        unsigned int v9 = v130;
      }
      BOOL v39 = a3 <= 379;
      goto LABEL_1923;
    case 30:
      uint64_t result = 1943;
      switch(a3)
      {
        case 54:
          return 1889;
        case 55:
          return 1890;
        case 56:
          return 1891;
        case 57:
          return 1892;
        case 58:
          return 1893;
        case 59:
          return 1894;
        case 60:
          return 1895;
        case 61:
          return 1896;
        case 62:
          return 1897;
        case 63:
          return 1898;
        case 64:
          return 1899;
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 82:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 142:
          goto LABEL_4367;
        case 70:
          return 1900;
        case 71:
          return 1901;
        case 72:
          return 1902;
        case 73:
          return 1903;
        case 74:
          return 1904;
        case 75:
          return 1905;
        case 76:
          return 1906;
        case 77:
          return 1907;
        case 78:
          return 1908;
        case 79:
          return 1909;
        case 80:
          return 1910;
        case 81:
          return 1911;
        case 83:
          return 1912;
        case 84:
          return 1913;
        case 85:
          return 1914;
        case 86:
          return 1915;
        case 87:
          return 1916;
        case 88:
          return 1917;
        case 89:
          return 1918;
        case 90:
          return 1919;
        case 91:
          return 1920;
        case 92:
          return 1921;
        case 93:
          return 1922;
        case 94:
          return 1923;
        case 113:
          return 1924;
        case 114:
          return 1925;
        case 115:
          return 1926;
        case 116:
          return 1927;
        case 117:
          return 1928;
        case 118:
          return 1929;
        case 119:
          return 1930;
        case 120:
          return 1931;
        case 121:
          return 1932;
        case 122:
          return 1933;
        case 123:
          return 1934;
        case 124:
          return 1935;
        case 130:
          return 1936;
        case 131:
          return 1937;
        case 132:
          return 1938;
        case 133:
          return 1939;
        case 134:
          return 1940;
        case 135:
          return 1941;
        case 136:
          return 1942;
        case 137:
          return result;
        case 138:
          return 1944;
        case 139:
          return 1945;
        case 140:
          return 1946;
        case 141:
          return 1947;
        case 143:
          return 1948;
        case 144:
          return 1949;
        case 145:
          return 1950;
        case 146:
          return 1951;
        case 147:
          return 1952;
        case 148:
          return 1953;
        case 149:
          return 1954;
        case 150:
          return 1955;
        case 151:
          return 1956;
        case 152:
          return 1957;
        case 153:
          return 1958;
        case 154:
          return 1959;
        default:
          return 1888;
      }
    case 31:
      if (a3 == 332) {
        unsigned int v7 = 2003;
      }
      else {
        unsigned int v7 = 2004;
      }
      if (a3 == 311) {
        unsigned int v7 = 2002;
      }
      if (a3 == 234) {
        int v57 = 2000;
      }
      else {
        int v57 = 2001;
      }
      if (a3 <= 310) {
        unsigned int v7 = v57;
      }
      if (a3 == 160) {
        unsigned int v9 = 1998;
      }
      else {
        unsigned int v9 = 1999;
      }
      BOOL v14 = a3 == 158;
      int v15 = 1996;
      int v16 = 1997;
      goto LABEL_995;
    case 32:
      if (a3 == 332) {
        unsigned int v7 = 2012;
      }
      else {
        unsigned int v7 = 2013;
      }
      if (a3 == 311) {
        unsigned int v7 = 2011;
      }
      if (a3 == 234) {
        int v58 = 2009;
      }
      else {
        int v58 = 2010;
      }
      if (a3 <= 310) {
        unsigned int v7 = v58;
      }
      if (a3 == 160) {
        unsigned int v9 = 2007;
      }
      else {
        unsigned int v9 = 2008;
      }
      BOOL v14 = a3 == 158;
      int v15 = 2005;
      int v16 = 2006;
      goto LABEL_995;
    case 33:
      if (a3 == 332) {
        unsigned int v7 = 2021;
      }
      else {
        unsigned int v7 = 2022;
      }
      if (a3 == 311) {
        unsigned int v7 = 2020;
      }
      if (a3 == 234) {
        int v34 = 2018;
      }
      else {
        int v34 = 2019;
      }
      if (a3 <= 310) {
        unsigned int v7 = v34;
      }
      if (a3 == 160) {
        unsigned int v9 = 2016;
      }
      else {
        unsigned int v9 = 2017;
      }
      BOOL v14 = a3 == 158;
      int v15 = 2014;
      int v16 = 2015;
      goto LABEL_995;
    case 34:
      uint64_t result = 2134;
      switch(a3)
      {
        case 54:
          return 2080;
        case 55:
          return 2081;
        case 56:
          return 2082;
        case 57:
          return 2083;
        case 58:
          return 2084;
        case 59:
          return 2085;
        case 60:
          return 2086;
        case 61:
          return 2087;
        case 62:
          return 2088;
        case 63:
          return 2089;
        case 64:
          return 2090;
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 82:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 142:
          goto LABEL_4367;
        case 70:
          return 2091;
        case 71:
          return 2092;
        case 72:
          return 2093;
        case 73:
          return 2094;
        case 74:
          return 2095;
        case 75:
          return 2096;
        case 76:
          return 2097;
        case 77:
          return 2098;
        case 78:
          return 2099;
        case 79:
          return 2100;
        case 80:
          return 2101;
        case 81:
          return 2102;
        case 83:
          return 2103;
        case 84:
          return 2104;
        case 85:
          return 2105;
        case 86:
          return 2106;
        case 87:
          return 2107;
        case 88:
          return 2108;
        case 89:
          return 2109;
        case 90:
          return 2110;
        case 91:
          return 2111;
        case 92:
          return 2112;
        case 93:
          return 2113;
        case 94:
          return 2114;
        case 113:
          return 2115;
        case 114:
          return 2116;
        case 115:
          return 2117;
        case 116:
          return 2118;
        case 117:
          return 2119;
        case 118:
          return 2120;
        case 119:
          return 2121;
        case 120:
          return 2122;
        case 121:
          return 2123;
        case 122:
          return 2124;
        case 123:
          return 2125;
        case 124:
          return 2126;
        case 130:
          return 2127;
        case 131:
          return 2128;
        case 132:
          return 2129;
        case 133:
          return 2130;
        case 134:
          return 2131;
        case 135:
          return 2132;
        case 136:
          return 2133;
        case 137:
          return result;
        case 138:
          return 2135;
        case 139:
          return 2136;
        case 140:
          return 2137;
        case 141:
          return 2138;
        case 143:
          return 2139;
        case 144:
          return 2140;
        case 145:
          return 2141;
        case 146:
          return 2142;
        case 147:
          return 2143;
        case 148:
          return 2144;
        case 149:
          return 2145;
        case 150:
          return 2146;
        case 151:
          return 2147;
        case 152:
          return 2148;
        case 153:
          return 2149;
        case 154:
          return 2150;
        default:
          return 2079;
      }
    case 35:
      if (a1 == 4)
      {
        if (a3 > 249)
        {
          if (a3 <= 316)
          {
            if (a3 == 282) {
              int v190 = 2259;
            }
            else {
              int v190 = 2260;
            }
            if (a3 == 273) {
              unsigned int v7 = 2258;
            }
            else {
              unsigned int v7 = v190;
            }
            unsigned int v9 = 2255;
            BOOL v191 = a3 == 267;
            int v192 = 2256;
            int v193 = 2257;
            goto LABEL_2036;
          }
          if (a3 <= 347)
          {
            switch(a3)
            {
              case 318:
                return 2262;
              case 319:
              case 320:
              case 321:
              case 322:
              case 324:
              case 325:
              case 326:
              case 327:
              case 332:
              case 334:
              case 335:
              case 336:
              case 337:
                goto LABEL_4367;
              case 323:
                return 2263;
              case 328:
                return 2264;
              case 329:
                return 2265;
              case 330:
                return 2266;
              case 331:
                return 2267;
              case 333:
                return 2268;
              case 338:
                return 2269;
              case 339:
                return 2270;
              default:
                return 2261;
            }
          }
          if (a3 == 371) {
            unsigned int v7 = 2274;
          }
          else {
            unsigned int v7 = 2275;
          }
          if (a3 == 370) {
            unsigned int v7 = 2273;
          }
          BOOL v201 = a3 == 348;
          unsigned int v9 = 2271;
          int v202 = 2272;
          goto LABEL_2071;
        }
        if (a3 <= 202)
        {
          if (a3 <= 196)
          {
            switch(a3)
            {
              case 166:
                return 2229;
              case 167:
                return 2230;
              case 168:
              case 169:
              case 170:
              case 171:
              case 173:
              case 174:
              case 175:
              case 176:
              case 182:
              case 183:
              case 184:
              case 185:
              case 188:
              case 189:
              case 190:
              case 191:
                goto LABEL_4367;
              case 172:
                return 2231;
              case 177:
                return 2232;
              case 178:
                return 2233;
              case 179:
                return 2234;
              case 180:
                return 2235;
              case 181:
                return 2236;
              case 186:
                return 2237;
              case 187:
                return 2238;
              case 192:
                return 2239;
              default:
                return 2228;
            }
          }
          BOOL v211 = a3 == 197;
          unsigned int v207 = 2240;
          unsigned int v209 = 2241;
          goto LABEL_2108;
        }
        if (a3 > 218)
        {
          switch(a3)
          {
            case 220:
              return 2246;
            case 221:
            case 222:
            case 223:
            case 224:
            case 226:
            case 227:
            case 228:
            case 229:
            case 234:
            case 236:
            case 237:
            case 238:
            case 239:
              goto LABEL_4367;
            case 225:
              return 2247;
            case 230:
              return 2248;
            case 231:
              return 2249;
            case 232:
              return 2250;
            case 233:
              return 2251;
            case 235:
              return 2252;
            case 240:
              return 2253;
            case 241:
              return 2254;
            default:
              return 2245;
          }
        }
        unsigned int v207 = 2242;
        BOOL v208 = a3 == 208;
        unsigned int v209 = 2243;
        int v210 = 2244;
      }
      else
      {
        if (a3 > 249)
        {
          if (a3 <= 316)
          {
            if (a3 == 282) {
              int v195 = 2355;
            }
            else {
              int v195 = 2356;
            }
            if (a3 == 273) {
              unsigned int v7 = 2354;
            }
            else {
              unsigned int v7 = v195;
            }
            unsigned int v9 = 2351;
            BOOL v191 = a3 == 267;
            int v192 = 2352;
            int v193 = 2353;
            goto LABEL_2036;
          }
          if (a3 <= 347)
          {
            switch(a3)
            {
              case 318:
                return 2358;
              case 319:
              case 320:
              case 321:
              case 322:
              case 324:
              case 325:
              case 326:
              case 327:
              case 332:
              case 334:
              case 335:
              case 336:
              case 337:
                goto LABEL_4367;
              case 323:
                return 2359;
              case 328:
                return 2360;
              case 329:
                return 2361;
              case 330:
                return 2362;
              case 331:
                return 2363;
              case 333:
                return 2364;
              case 338:
                return 2365;
              case 339:
                return 2366;
              default:
                return 2357;
            }
          }
          if (a3 == 371) {
            unsigned int v7 = 2370;
          }
          else {
            unsigned int v7 = 2371;
          }
          if (a3 == 370) {
            unsigned int v7 = 2369;
          }
          BOOL v201 = a3 == 348;
          unsigned int v9 = 2367;
          int v202 = 2368;
          goto LABEL_2071;
        }
        if (a3 <= 202)
        {
          if (a3 <= 196)
          {
            switch(a3)
            {
              case 166:
                return 2325;
              case 167:
                return 2326;
              case 168:
              case 169:
              case 170:
              case 171:
              case 173:
              case 174:
              case 175:
              case 176:
              case 182:
              case 183:
              case 184:
              case 185:
              case 188:
              case 189:
              case 190:
              case 191:
                goto LABEL_4367;
              case 172:
                return 2327;
              case 177:
                return 2328;
              case 178:
                return 2329;
              case 179:
                return 2330;
              case 180:
                return 2331;
              case 181:
                return 2332;
              case 186:
                return 2333;
              case 187:
                return 2334;
              case 192:
                return 2335;
              default:
                return 2324;
            }
          }
          BOOL v211 = a3 == 197;
          unsigned int v207 = 2336;
          unsigned int v209 = 2337;
          goto LABEL_2108;
        }
        if (a3 > 218)
        {
          switch(a3)
          {
            case 220:
              return 2342;
            case 221:
            case 222:
            case 223:
            case 224:
            case 226:
            case 227:
            case 228:
            case 229:
            case 234:
            case 236:
            case 237:
            case 238:
            case 239:
              goto LABEL_4367;
            case 225:
              return 2343;
            case 230:
              return 2344;
            case 231:
              return 2345;
            case 232:
              return 2346;
            case 233:
              return 2347;
            case 235:
              return 2348;
            case 240:
              return 2349;
            case 241:
              return 2350;
            default:
              return 2341;
          }
        }
        unsigned int v207 = 2338;
        BOOL v208 = a3 == 208;
        unsigned int v209 = 2339;
        int v210 = 2340;
      }
      goto LABEL_2105;
    case 36:
      if (a1 == 4)
      {
        if (a3 > 249)
        {
          if (a3 <= 316)
          {
            if (a3 == 282) {
              int v194 = 2211;
            }
            else {
              int v194 = 2212;
            }
            if (a3 == 273) {
              unsigned int v7 = 2210;
            }
            else {
              unsigned int v7 = v194;
            }
            unsigned int v9 = 2207;
            BOOL v191 = a3 == 267;
            int v192 = 2208;
            int v193 = 2209;
            goto LABEL_2036;
          }
          if (a3 <= 347)
          {
            switch(a3)
            {
              case 318:
                return 2214;
              case 319:
              case 320:
              case 321:
              case 322:
              case 324:
              case 325:
              case 326:
              case 327:
              case 332:
              case 334:
              case 335:
              case 336:
              case 337:
                goto LABEL_4367;
              case 323:
                return 2215;
              case 328:
                return 2216;
              case 329:
                return 2217;
              case 330:
                return 2218;
              case 331:
                return 2219;
              case 333:
                return 2220;
              case 338:
                return 2221;
              case 339:
                return 2222;
              default:
                return 2213;
            }
          }
          if (a3 == 371) {
            unsigned int v7 = 2226;
          }
          else {
            unsigned int v7 = 2227;
          }
          if (a3 == 370) {
            unsigned int v7 = 2225;
          }
          BOOL v201 = a3 == 348;
          unsigned int v9 = 2223;
          int v202 = 2224;
          goto LABEL_2071;
        }
        if (a3 <= 202)
        {
          if (a3 <= 196)
          {
            switch(a3)
            {
              case 166:
                return 2181;
              case 167:
                return 2182;
              case 168:
              case 169:
              case 170:
              case 171:
              case 173:
              case 174:
              case 175:
              case 176:
              case 182:
              case 183:
              case 184:
              case 185:
              case 188:
              case 189:
              case 190:
              case 191:
                goto LABEL_4367;
              case 172:
                return 2183;
              case 177:
                return 2184;
              case 178:
                return 2185;
              case 179:
                return 2186;
              case 180:
                return 2187;
              case 181:
                return 2188;
              case 186:
                return 2189;
              case 187:
                return 2190;
              case 192:
                return 2191;
              default:
                return 2180;
            }
          }
          BOOL v211 = a3 == 197;
          unsigned int v207 = 2192;
          unsigned int v209 = 2193;
          goto LABEL_2108;
        }
        if (a3 > 218)
        {
          switch(a3)
          {
            case 220:
              return 2198;
            case 221:
            case 222:
            case 223:
            case 224:
            case 226:
            case 227:
            case 228:
            case 229:
            case 234:
            case 236:
            case 237:
            case 238:
            case 239:
              goto LABEL_4367;
            case 225:
              return 2199;
            case 230:
              return 2200;
            case 231:
              return 2201;
            case 232:
              return 2202;
            case 233:
              return 2203;
            case 235:
              return 2204;
            case 240:
              return 2205;
            case 241:
              return 2206;
            default:
              return 2197;
          }
        }
        unsigned int v207 = 2194;
        BOOL v208 = a3 == 208;
        unsigned int v209 = 2195;
        int v210 = 2196;
      }
      else
      {
        if (a3 > 249)
        {
          if (a3 <= 316)
          {
            if (a3 == 282) {
              int v196 = 2307;
            }
            else {
              int v196 = 2308;
            }
            if (a3 == 273) {
              unsigned int v7 = 2306;
            }
            else {
              unsigned int v7 = v196;
            }
            unsigned int v9 = 2303;
            BOOL v191 = a3 == 267;
            int v192 = 2304;
            int v193 = 2305;
            goto LABEL_2036;
          }
          if (a3 <= 347)
          {
            switch(a3)
            {
              case 318:
                return 2310;
              case 319:
              case 320:
              case 321:
              case 322:
              case 324:
              case 325:
              case 326:
              case 327:
              case 332:
              case 334:
              case 335:
              case 336:
              case 337:
                goto LABEL_4367;
              case 323:
                return 2311;
              case 328:
                return 2312;
              case 329:
                return 2313;
              case 330:
                return 2314;
              case 331:
                return 2315;
              case 333:
                return 2316;
              case 338:
                return 2317;
              case 339:
                return 2318;
              default:
                return 2309;
            }
          }
          if (a3 == 371) {
            unsigned int v7 = 2322;
          }
          else {
            unsigned int v7 = 2323;
          }
          if (a3 == 370) {
            unsigned int v7 = 2321;
          }
          BOOL v201 = a3 == 348;
          unsigned int v9 = 2319;
          int v202 = 2320;
          goto LABEL_2071;
        }
        if (a3 <= 202)
        {
          if (a3 <= 196)
          {
            switch(a3)
            {
              case 166:
                return 2277;
              case 167:
                return 2278;
              case 168:
              case 169:
              case 170:
              case 171:
              case 173:
              case 174:
              case 175:
              case 176:
              case 182:
              case 183:
              case 184:
              case 185:
              case 188:
              case 189:
              case 190:
              case 191:
                goto LABEL_4367;
              case 172:
                return 2279;
              case 177:
                return 2280;
              case 178:
                return 2281;
              case 179:
                return 2282;
              case 180:
                return 2283;
              case 181:
                return 2284;
              case 186:
                return 2285;
              case 187:
                return 2286;
              case 192:
                return 2287;
              default:
                return 2276;
            }
          }
          BOOL v211 = a3 == 197;
          unsigned int v207 = 2288;
          unsigned int v209 = 2289;
          goto LABEL_2108;
        }
        if (a3 > 218)
        {
          switch(a3)
          {
            case 220:
              return 2294;
            case 221:
            case 222:
            case 223:
            case 224:
            case 226:
            case 227:
            case 228:
            case 229:
            case 234:
            case 236:
            case 237:
            case 238:
            case 239:
              goto LABEL_4367;
            case 225:
              return 2295;
            case 230:
              return 2296;
            case 231:
              return 2297;
            case 232:
              return 2298;
            case 233:
              return 2299;
            case 235:
              return 2300;
            case 240:
              return 2301;
            case 241:
              return 2302;
            default:
              return 2293;
          }
        }
        unsigned int v207 = 2290;
        BOOL v208 = a3 == 208;
        unsigned int v209 = 2291;
        int v210 = 2292;
      }
      goto LABEL_2105;
    case 37:
      if (a1 == 4)
      {
        if (a3 == 332) {
          unsigned int v7 = 2379;
        }
        else {
          unsigned int v7 = 2380;
        }
        if (a3 == 311) {
          unsigned int v7 = 2378;
        }
        if (a3 == 234) {
          int v13 = 2376;
        }
        else {
          int v13 = 2377;
        }
        if (a3 <= 310) {
          unsigned int v7 = v13;
        }
        if (a3 == 160) {
          unsigned int v9 = 2374;
        }
        else {
          unsigned int v9 = 2375;
        }
        BOOL v14 = a3 == 158;
        int v15 = 2372;
        int v16 = 2373;
      }
      else
      {
        if (a3 == 332) {
          unsigned int v7 = 2388;
        }
        else {
          unsigned int v7 = 2389;
        }
        if (a3 == 311) {
          unsigned int v7 = 2387;
        }
        if (a3 == 234) {
          int v85 = 2385;
        }
        else {
          int v85 = 2386;
        }
        if (a3 <= 310) {
          unsigned int v7 = v85;
        }
        if (a3 == 160) {
          unsigned int v9 = 2383;
        }
        else {
          unsigned int v9 = 2384;
        }
        BOOL v14 = a3 == 158;
        int v15 = 2381;
        int v16 = 2382;
      }
      goto LABEL_995;
    case 38:
      if (a1 == 4)
      {
        if (a3 == 332) {
          unsigned int v7 = 2397;
        }
        else {
          unsigned int v7 = 2398;
        }
        if (a3 == 311) {
          unsigned int v7 = 2396;
        }
        if (a3 == 234) {
          int v76 = 2394;
        }
        else {
          int v76 = 2395;
        }
        if (a3 <= 310) {
          unsigned int v7 = v76;
        }
        if (a3 == 160) {
          unsigned int v9 = 2392;
        }
        else {
          unsigned int v9 = 2393;
        }
        BOOL v14 = a3 == 158;
        int v15 = 2390;
        int v16 = 2391;
      }
      else
      {
        if (a3 == 332) {
          unsigned int v7 = 2406;
        }
        else {
          unsigned int v7 = 2407;
        }
        if (a3 == 311) {
          unsigned int v7 = 2405;
        }
        if (a3 == 234) {
          int v115 = 2403;
        }
        else {
          int v115 = 2404;
        }
        if (a3 <= 310) {
          unsigned int v7 = v115;
        }
        if (a3 == 160) {
          unsigned int v9 = 2401;
        }
        else {
          unsigned int v9 = 2402;
        }
        BOOL v14 = a3 == 158;
        int v15 = 2399;
        int v16 = 2400;
      }
      goto LABEL_995;
    case 39:
      if (a1 == 4)
      {
        if (a3 == 332) {
          unsigned int v7 = 2415;
        }
        else {
          unsigned int v7 = 2416;
        }
        if (a3 == 311) {
          unsigned int v7 = 2414;
        }
        if (a3 == 234) {
          int v71 = 2412;
        }
        else {
          int v71 = 2413;
        }
        if (a3 <= 310) {
          unsigned int v7 = v71;
        }
        if (a3 == 160) {
          unsigned int v9 = 2410;
        }
        else {
          unsigned int v9 = 2411;
        }
        BOOL v14 = a3 == 158;
        int v15 = 2408;
        int v16 = 2409;
      }
      else
      {
        if (a3 == 332) {
          unsigned int v7 = 2424;
        }
        else {
          unsigned int v7 = 2425;
        }
        if (a3 == 311) {
          unsigned int v7 = 2423;
        }
        if (a3 == 234) {
          int v110 = 2421;
        }
        else {
          int v110 = 2422;
        }
        if (a3 <= 310) {
          unsigned int v7 = v110;
        }
        if (a3 == 160) {
          unsigned int v9 = 2419;
        }
        else {
          unsigned int v9 = 2420;
        }
        BOOL v14 = a3 == 158;
        int v15 = 2417;
        int v16 = 2418;
      }
LABEL_995:
      if (!v14) {
        int v15 = v16;
      }
      if (a3 <= 159) {
        unsigned int v9 = v15;
      }
      BOOL v39 = a3 <= 233;
      goto LABEL_1923;
    case 40:
      if (a1 == 4)
      {
        uint64_t result = 2645;
        switch(a3)
        {
          case 163:
            return 2539;
          case 164:
            return 2540;
          case 165:
            return 2541;
          case 166:
          case 167:
          case 172:
          case 177:
          case 178:
          case 179:
          case 180:
          case 181:
          case 186:
          case 187:
          case 192:
          case 197:
          case 202:
          case 203:
          case 208:
          case 213:
          case 214:
          case 219:
          case 220:
          case 225:
          case 230:
          case 231:
          case 232:
          case 233:
          case 234:
          case 235:
          case 240:
          case 241:
          case 245:
          case 247:
          case 248:
          case 249:
          case 250:
          case 254:
          case 256:
          case 257:
          case 258:
          case 259:
          case 260:
          case 261:
          case 262:
          case 263:
          case 264:
          case 265:
          case 266:
          case 267:
          case 272:
          case 273:
          case 277:
          case 279:
          case 280:
          case 281:
          case 282:
          case 286:
          case 288:
          case 289:
          case 290:
          case 291:
          case 292:
          case 293:
          case 294:
          case 295:
          case 296:
          case 297:
          case 298:
          case 299:
          case 300:
          case 301:
          case 302:
          case 303:
          case 304:
          case 305:
          case 306:
          case 307:
          case 308:
          case 309:
          case 310:
          case 311:
          case 312:
          case 317:
          case 318:
          case 323:
          case 328:
          case 329:
          case 330:
          case 331:
          case 332:
          case 333:
          case 338:
          case 339:
          case 343:
          case 345:
          case 346:
          case 347:
          case 348:
          case 352:
          case 354:
          case 355:
          case 356:
          case 357:
          case 358:
          case 359:
          case 360:
          case 361:
          case 362:
          case 363:
          case 364:
          case 365:
          case 370:
          case 371:
          case 375:
          case 377:
          case 378:
          case 379:
          case 380:
          case 384:
            goto LABEL_4367;
          case 168:
            return 2542;
          case 169:
            return 2543;
          case 170:
            return 2544;
          case 171:
            return 2545;
          case 173:
            return 2546;
          case 174:
            return 2547;
          case 175:
            return 2548;
          case 176:
            return 2549;
          case 182:
            return 2550;
          case 183:
            return 2551;
          case 184:
            return 2552;
          case 185:
            return 2553;
          case 188:
            return 2554;
          case 189:
            return 2555;
          case 190:
            return 2556;
          case 191:
            return 2557;
          case 193:
            return 2558;
          case 194:
            return 2559;
          case 195:
            return 2560;
          case 196:
            return 2561;
          case 198:
            return 2562;
          case 199:
            return 2563;
          case 200:
            return 2564;
          case 201:
            return 2565;
          case 204:
            return 2566;
          case 205:
            return 2567;
          case 206:
            return 2568;
          case 207:
            return 2569;
          case 209:
            return 2570;
          case 210:
            return 2571;
          case 211:
            return 2572;
          case 212:
            return 2573;
          case 215:
            return 2574;
          case 216:
            return 2575;
          case 217:
            return 2576;
          case 218:
            return 2577;
          case 221:
            return 2578;
          case 222:
            return 2579;
          case 223:
            return 2580;
          case 224:
            return 2581;
          case 226:
            return 2582;
          case 227:
            return 2583;
          case 228:
            return 2584;
          case 229:
            return 2585;
          case 236:
            return 2586;
          case 237:
            return 2587;
          case 238:
            return 2588;
          case 239:
            return 2589;
          case 242:
            return 2590;
          case 243:
            return 2591;
          case 244:
            return 2592;
          case 246:
            return 2593;
          case 251:
            return 2594;
          case 252:
            return 2595;
          case 253:
            return 2596;
          case 255:
            return 2597;
          case 268:
            return 2598;
          case 269:
            return 2599;
          case 270:
            return 2600;
          case 271:
            return 2601;
          case 274:
            return 2602;
          case 275:
            return 2603;
          case 276:
            return 2604;
          case 278:
            return 2605;
          case 283:
            return 2606;
          case 284:
            return 2607;
          case 285:
            return 2608;
          case 287:
            return 2609;
          case 313:
            return 2610;
          case 314:
            return 2611;
          case 315:
            return 2612;
          case 316:
            return 2613;
          case 319:
            return 2614;
          case 320:
            return 2615;
          case 321:
            return 2616;
          case 322:
            return 2617;
          case 324:
            return 2618;
          case 325:
            return 2619;
          case 326:
            return 2620;
          case 327:
            return 2621;
          case 334:
            return 2622;
          case 335:
            return 2623;
          case 336:
            return 2624;
          case 337:
            return 2625;
          case 340:
            return 2626;
          case 341:
            return 2627;
          case 342:
            return 2628;
          case 344:
            return 2629;
          case 349:
            return 2630;
          case 350:
            return 2631;
          case 351:
            return 2632;
          case 353:
            return 2633;
          case 366:
            return 2634;
          case 367:
            return 2635;
          case 368:
            return 2636;
          case 369:
            return 2637;
          case 372:
            return 2638;
          case 373:
            return 2639;
          case 374:
            return 2640;
          case 376:
            return 2641;
          case 381:
            return 2642;
          case 382:
            return 2643;
          case 383:
            return 2644;
          case 385:
            return result;
          default:
            return 2538;
        }
      }
      uint64_t result = 2861;
      switch(a3)
      {
        case 163:
          return 2755;
        case 164:
          return 2756;
        case 165:
          return 2757;
        case 166:
        case 167:
        case 172:
        case 177:
        case 178:
        case 179:
        case 180:
        case 181:
        case 186:
        case 187:
        case 192:
        case 197:
        case 202:
        case 203:
        case 208:
        case 213:
        case 214:
        case 219:
        case 220:
        case 225:
        case 230:
        case 231:
        case 232:
        case 233:
        case 234:
        case 235:
        case 240:
        case 241:
        case 245:
        case 247:
        case 248:
        case 249:
        case 250:
        case 254:
        case 256:
        case 257:
        case 258:
        case 259:
        case 260:
        case 261:
        case 262:
        case 263:
        case 264:
        case 265:
        case 266:
        case 267:
        case 272:
        case 273:
        case 277:
        case 279:
        case 280:
        case 281:
        case 282:
        case 286:
        case 288:
        case 289:
        case 290:
        case 291:
        case 292:
        case 293:
        case 294:
        case 295:
        case 296:
        case 297:
        case 298:
        case 299:
        case 300:
        case 301:
        case 302:
        case 303:
        case 304:
        case 305:
        case 306:
        case 307:
        case 308:
        case 309:
        case 310:
        case 311:
        case 312:
        case 317:
        case 318:
        case 323:
        case 328:
        case 329:
        case 330:
        case 331:
        case 332:
        case 333:
        case 338:
        case 339:
        case 343:
        case 345:
        case 346:
        case 347:
        case 348:
        case 352:
        case 354:
        case 355:
        case 356:
        case 357:
        case 358:
        case 359:
        case 360:
        case 361:
        case 362:
        case 363:
        case 364:
        case 365:
        case 370:
        case 371:
        case 375:
        case 377:
        case 378:
        case 379:
        case 380:
        case 384:
          goto LABEL_4367;
        case 168:
          return 2758;
        case 169:
          return 2759;
        case 170:
          return 2760;
        case 171:
          return 2761;
        case 173:
          return 2762;
        case 174:
          return 2763;
        case 175:
          return 2764;
        case 176:
          return 2765;
        case 182:
          return 2766;
        case 183:
          return 2767;
        case 184:
          return 2768;
        case 185:
          return 2769;
        case 188:
          return 2770;
        case 189:
          return 2771;
        case 190:
          return 2772;
        case 191:
          return 2773;
        case 193:
          return 2774;
        case 194:
          return 2775;
        case 195:
          return 2776;
        case 196:
          return 2777;
        case 198:
          return 2778;
        case 199:
          return 2779;
        case 200:
          return 2780;
        case 201:
          return 2781;
        case 204:
          return 2782;
        case 205:
          return 2783;
        case 206:
          return 2784;
        case 207:
          return 2785;
        case 209:
          return 2786;
        case 210:
          return 2787;
        case 211:
          return 2788;
        case 212:
          return 2789;
        case 215:
          return 2790;
        case 216:
          return 2791;
        case 217:
          return 2792;
        case 218:
          return 2793;
        case 221:
          return 2794;
        case 222:
          return 2795;
        case 223:
          return 2796;
        case 224:
          return 2797;
        case 226:
          return 2798;
        case 227:
          return 2799;
        case 228:
          return 2800;
        case 229:
          return 2801;
        case 236:
          return 2802;
        case 237:
          return 2803;
        case 238:
          return 2804;
        case 239:
          return 2805;
        case 242:
          return 2806;
        case 243:
          return 2807;
        case 244:
          return 2808;
        case 246:
          return 2809;
        case 251:
          return 2810;
        case 252:
          return 2811;
        case 253:
          return 2812;
        case 255:
          return 2813;
        case 268:
          return 2814;
        case 269:
          return 2815;
        case 270:
          return 2816;
        case 271:
          return 2817;
        case 274:
          return 2818;
        case 275:
          return 2819;
        case 276:
          return 2820;
        case 278:
          return 2821;
        case 283:
          return 2822;
        case 284:
          return 2823;
        case 285:
          return 2824;
        case 287:
          return 2825;
        case 313:
          return 2826;
        case 314:
          return 2827;
        case 315:
          return 2828;
        case 316:
          return 2829;
        case 319:
          return 2830;
        case 320:
          return 2831;
        case 321:
          return 2832;
        case 322:
          return 2833;
        case 324:
          return 2834;
        case 325:
          return 2835;
        case 326:
          return 2836;
        case 327:
          return 2837;
        case 334:
          return 2838;
        case 335:
          return 2839;
        case 336:
          return 2840;
        case 337:
          return 2841;
        case 340:
          return 2842;
        case 341:
          return 2843;
        case 342:
          return 2844;
        case 344:
          return 2845;
        case 349:
          return 2846;
        case 350:
          return 2847;
        case 351:
          return 2848;
        case 353:
          return 2849;
        case 366:
          return 2850;
        case 367:
          return 2851;
        case 368:
          return 2852;
        case 369:
          return 2853;
        case 372:
          return 2854;
        case 373:
          return 2855;
        case 374:
          return 2856;
        case 376:
          return 2857;
        case 381:
          return 2858;
        case 382:
          return 2859;
        case 383:
          return 2860;
        case 385:
          return result;
        default:
          return 2754;
      }
    case 41:
      if (a1 == 4)
      {
        uint64_t result = 2537;
        switch(a3)
        {
          case 163:
            return 2431;
          case 164:
            return 2432;
          case 165:
            return 2433;
          case 166:
          case 167:
          case 172:
          case 177:
          case 178:
          case 179:
          case 180:
          case 181:
          case 186:
          case 187:
          case 192:
          case 197:
          case 202:
          case 203:
          case 208:
          case 213:
          case 214:
          case 219:
          case 220:
          case 225:
          case 230:
          case 231:
          case 232:
          case 233:
          case 234:
          case 235:
          case 240:
          case 241:
          case 245:
          case 247:
          case 248:
          case 249:
          case 250:
          case 254:
          case 256:
          case 257:
          case 258:
          case 259:
          case 260:
          case 261:
          case 262:
          case 263:
          case 264:
          case 265:
          case 266:
          case 267:
          case 272:
          case 273:
          case 277:
          case 279:
          case 280:
          case 281:
          case 282:
          case 286:
          case 288:
          case 289:
          case 290:
          case 291:
          case 292:
          case 293:
          case 294:
          case 295:
          case 296:
          case 297:
          case 298:
          case 299:
          case 300:
          case 301:
          case 302:
          case 303:
          case 304:
          case 305:
          case 306:
          case 307:
          case 308:
          case 309:
          case 310:
          case 311:
          case 312:
          case 317:
          case 318:
          case 323:
          case 328:
          case 329:
          case 330:
          case 331:
          case 332:
          case 333:
          case 338:
          case 339:
          case 343:
          case 345:
          case 346:
          case 347:
          case 348:
          case 352:
          case 354:
          case 355:
          case 356:
          case 357:
          case 358:
          case 359:
          case 360:
          case 361:
          case 362:
          case 363:
          case 364:
          case 365:
          case 370:
          case 371:
          case 375:
          case 377:
          case 378:
          case 379:
          case 380:
          case 384:
            goto LABEL_4367;
          case 168:
            return 2434;
          case 169:
            return 2435;
          case 170:
            return 2436;
          case 171:
            return 2437;
          case 173:
            return 2438;
          case 174:
            return 2439;
          case 175:
            return 2440;
          case 176:
            return 2441;
          case 182:
            return 2442;
          case 183:
            return 2443;
          case 184:
            return 2444;
          case 185:
            return 2445;
          case 188:
            return 2446;
          case 189:
            return 2447;
          case 190:
            return 2448;
          case 191:
            return 2449;
          case 193:
            return 2450;
          case 194:
            return 2451;
          case 195:
            return 2452;
          case 196:
            return 2453;
          case 198:
            return 2454;
          case 199:
            return 2455;
          case 200:
            return 2456;
          case 201:
            return 2457;
          case 204:
            return 2458;
          case 205:
            return 2459;
          case 206:
            return 2460;
          case 207:
            return 2461;
          case 209:
            return 2462;
          case 210:
            return 2463;
          case 211:
            return 2464;
          case 212:
            return 2465;
          case 215:
            return 2466;
          case 216:
            return 2467;
          case 217:
            return 2468;
          case 218:
            return 2469;
          case 221:
            return 2470;
          case 222:
            return 2471;
          case 223:
            return 2472;
          case 224:
            return 2473;
          case 226:
            return 2474;
          case 227:
            return 2475;
          case 228:
            return 2476;
          case 229:
            return 2477;
          case 236:
            return 2478;
          case 237:
            return 2479;
          case 238:
            return 2480;
          case 239:
            return 2481;
          case 242:
            return 2482;
          case 243:
            return 2483;
          case 244:
            return 2484;
          case 246:
            return 2485;
          case 251:
            return 2486;
          case 252:
            return 2487;
          case 253:
            return 2488;
          case 255:
            return 2489;
          case 268:
            return 2490;
          case 269:
            return 2491;
          case 270:
            return 2492;
          case 271:
            return 2493;
          case 274:
            return 2494;
          case 275:
            return 2495;
          case 276:
            return 2496;
          case 278:
            return 2497;
          case 283:
            return 2498;
          case 284:
            return 2499;
          case 285:
            return 2500;
          case 287:
            return 2501;
          case 313:
            return 2502;
          case 314:
            return 2503;
          case 315:
            return 2504;
          case 316:
            return 2505;
          case 319:
            return 2506;
          case 320:
            return 2507;
          case 321:
            return 2508;
          case 322:
            return 2509;
          case 324:
            return 2510;
          case 325:
            return 2511;
          case 326:
            return 2512;
          case 327:
            return 2513;
          case 334:
            return 2514;
          case 335:
            return 2515;
          case 336:
            return 2516;
          case 337:
            return 2517;
          case 340:
            return 2518;
          case 341:
            return 2519;
          case 342:
            return 2520;
          case 344:
            return 2521;
          case 349:
            return 2522;
          case 350:
            return 2523;
          case 351:
            return 2524;
          case 353:
            return 2525;
          case 366:
            return 2526;
          case 367:
            return 2527;
          case 368:
            return 2528;
          case 369:
            return 2529;
          case 372:
            return 2530;
          case 373:
            return 2531;
          case 374:
            return 2532;
          case 376:
            return 2533;
          case 381:
            return 2534;
          case 382:
            return 2535;
          case 383:
            return 2536;
          case 385:
            return result;
          default:
            return 2430;
        }
      }
      uint64_t result = 2753;
      switch(a3)
      {
        case 163:
          return 2647;
        case 164:
          return 2648;
        case 165:
          return 2649;
        case 166:
        case 167:
        case 172:
        case 177:
        case 178:
        case 179:
        case 180:
        case 181:
        case 186:
        case 187:
        case 192:
        case 197:
        case 202:
        case 203:
        case 208:
        case 213:
        case 214:
        case 219:
        case 220:
        case 225:
        case 230:
        case 231:
        case 232:
        case 233:
        case 234:
        case 235:
        case 240:
        case 241:
        case 245:
        case 247:
        case 248:
        case 249:
        case 250:
        case 254:
        case 256:
        case 257:
        case 258:
        case 259:
        case 260:
        case 261:
        case 262:
        case 263:
        case 264:
        case 265:
        case 266:
        case 267:
        case 272:
        case 273:
        case 277:
        case 279:
        case 280:
        case 281:
        case 282:
        case 286:
        case 288:
        case 289:
        case 290:
        case 291:
        case 292:
        case 293:
        case 294:
        case 295:
        case 296:
        case 297:
        case 298:
        case 299:
        case 300:
        case 301:
        case 302:
        case 303:
        case 304:
        case 305:
        case 306:
        case 307:
        case 308:
        case 309:
        case 310:
        case 311:
        case 312:
        case 317:
        case 318:
        case 323:
        case 328:
        case 329:
        case 330:
        case 331:
        case 332:
        case 333:
        case 338:
        case 339:
        case 343:
        case 345:
        case 346:
        case 347:
        case 348:
        case 352:
        case 354:
        case 355:
        case 356:
        case 357:
        case 358:
        case 359:
        case 360:
        case 361:
        case 362:
        case 363:
        case 364:
        case 365:
        case 370:
        case 371:
        case 375:
        case 377:
        case 378:
        case 379:
        case 380:
        case 384:
          goto LABEL_4367;
        case 168:
          return 2650;
        case 169:
          return 2651;
        case 170:
          return 2652;
        case 171:
          return 2653;
        case 173:
          return 2654;
        case 174:
          return 2655;
        case 175:
          return 2656;
        case 176:
          return 2657;
        case 182:
          return 2658;
        case 183:
          return 2659;
        case 184:
          return 2660;
        case 185:
          return 2661;
        case 188:
          return 2662;
        case 189:
          return 2663;
        case 190:
          return 2664;
        case 191:
          return 2665;
        case 193:
          return 2666;
        case 194:
          return 2667;
        case 195:
          return 2668;
        case 196:
          return 2669;
        case 198:
          return 2670;
        case 199:
          return 2671;
        case 200:
          return 2672;
        case 201:
          return 2673;
        case 204:
          return 2674;
        case 205:
          return 2675;
        case 206:
          return 2676;
        case 207:
          return 2677;
        case 209:
          return 2678;
        case 210:
          return 2679;
        case 211:
          return 2680;
        case 212:
          return 2681;
        case 215:
          return 2682;
        case 216:
          return 2683;
        case 217:
          return 2684;
        case 218:
          return 2685;
        case 221:
          return 2686;
        case 222:
          return 2687;
        case 223:
          return 2688;
        case 224:
          return 2689;
        case 226:
          return 2690;
        case 227:
          return 2691;
        case 228:
          return 2692;
        case 229:
          return 2693;
        case 236:
          return 2694;
        case 237:
          return 2695;
        case 238:
          return 2696;
        case 239:
          return 2697;
        case 242:
          return 2698;
        case 243:
          return 2699;
        case 244:
          return 2700;
        case 246:
          return 2701;
        case 251:
          return 2702;
        case 252:
          return 2703;
        case 253:
          return 2704;
        case 255:
          return 2705;
        case 268:
          return 2706;
        case 269:
          return 2707;
        case 270:
          return 2708;
        case 271:
          return 2709;
        case 274:
          return 2710;
        case 275:
          return 2711;
        case 276:
          return 2712;
        case 278:
          return 2713;
        case 283:
          return 2714;
        case 284:
          return 2715;
        case 285:
          return 2716;
        case 287:
          return 2717;
        case 313:
          return 2718;
        case 314:
          return 2719;
        case 315:
          return 2720;
        case 316:
          return 2721;
        case 319:
          return 2722;
        case 320:
          return 2723;
        case 321:
          return 2724;
        case 322:
          return 2725;
        case 324:
          return 2726;
        case 325:
          return 2727;
        case 326:
          return 2728;
        case 327:
          return 2729;
        case 334:
          return 2730;
        case 335:
          return 2731;
        case 336:
          return 2732;
        case 337:
          return 2733;
        case 340:
          return 2734;
        case 341:
          return 2735;
        case 342:
          return 2736;
        case 344:
          return 2737;
        case 349:
          return 2738;
        case 350:
          return 2739;
        case 351:
          return 2740;
        case 353:
          return 2741;
        case 366:
          return 2742;
        case 367:
          return 2743;
        case 368:
          return 2744;
        case 369:
          return 2745;
        case 372:
          return 2746;
        case 373:
          return 2747;
        case 374:
          return 2748;
        case 376:
          return 2749;
        case 381:
          return 2750;
        case 382:
          return 2751;
        case 383:
          return 2752;
        case 385:
          return result;
        default:
          return 2646;
      }
    case 42:
      if (a1 == 4)
      {
        uint64_t result = 3261;
        switch(a3)
        {
          case 163:
            return 3155;
          case 164:
            return 3156;
          case 165:
            return 3157;
          case 166:
          case 167:
          case 172:
          case 177:
          case 178:
          case 179:
          case 180:
          case 181:
          case 186:
          case 187:
          case 192:
          case 197:
          case 202:
          case 203:
          case 208:
          case 213:
          case 214:
          case 219:
          case 220:
          case 225:
          case 230:
          case 231:
          case 232:
          case 233:
          case 234:
          case 235:
          case 240:
          case 241:
          case 245:
          case 247:
          case 248:
          case 249:
          case 250:
          case 254:
          case 256:
          case 257:
          case 258:
          case 259:
          case 260:
          case 261:
          case 262:
          case 263:
          case 264:
          case 265:
          case 266:
          case 267:
          case 272:
          case 273:
          case 277:
          case 279:
          case 280:
          case 281:
          case 282:
          case 286:
          case 288:
          case 289:
          case 290:
          case 291:
          case 292:
          case 293:
          case 294:
          case 295:
          case 296:
          case 297:
          case 298:
          case 299:
          case 300:
          case 301:
          case 302:
          case 303:
          case 304:
          case 305:
          case 306:
          case 307:
          case 308:
          case 309:
          case 310:
          case 311:
          case 312:
          case 317:
          case 318:
          case 323:
          case 328:
          case 329:
          case 330:
          case 331:
          case 332:
          case 333:
          case 338:
          case 339:
          case 343:
          case 345:
          case 346:
          case 347:
          case 348:
          case 352:
          case 354:
          case 355:
          case 356:
          case 357:
          case 358:
          case 359:
          case 360:
          case 361:
          case 362:
          case 363:
          case 364:
          case 365:
          case 370:
          case 371:
          case 375:
          case 377:
          case 378:
          case 379:
          case 380:
          case 384:
            goto LABEL_4367;
          case 168:
            return 3158;
          case 169:
            return 3159;
          case 170:
            return 3160;
          case 171:
            return 3161;
          case 173:
            return 3162;
          case 174:
            return 3163;
          case 175:
            return 3164;
          case 176:
            return 3165;
          case 182:
            return 3166;
          case 183:
            return 3167;
          case 184:
            return 3168;
          case 185:
            return 3169;
          case 188:
            return 3170;
          case 189:
            return 3171;
          case 190:
            return 3172;
          case 191:
            return 3173;
          case 193:
            return 3174;
          case 194:
            return 3175;
          case 195:
            return 3176;
          case 196:
            return 3177;
          case 198:
            return 3178;
          case 199:
            return 3179;
          case 200:
            return 3180;
          case 201:
            return 3181;
          case 204:
            return 3182;
          case 205:
            return 3183;
          case 206:
            return 3184;
          case 207:
            return 3185;
          case 209:
            return 3186;
          case 210:
            return 3187;
          case 211:
            return 3188;
          case 212:
            return 3189;
          case 215:
            return 3190;
          case 216:
            return 3191;
          case 217:
            return 3192;
          case 218:
            return 3193;
          case 221:
            return 3194;
          case 222:
            return 3195;
          case 223:
            return 3196;
          case 224:
            return 3197;
          case 226:
            return 3198;
          case 227:
            return 3199;
          case 228:
            return 3200;
          case 229:
            return 3201;
          case 236:
            return 3202;
          case 237:
            return 3203;
          case 238:
            return 3204;
          case 239:
            return 3205;
          case 242:
            return 3206;
          case 243:
            return 3207;
          case 244:
            return 3208;
          case 246:
            return 3209;
          case 251:
            return 3210;
          case 252:
            return 3211;
          case 253:
            return 3212;
          case 255:
            return 3213;
          case 268:
            return 3214;
          case 269:
            return 3215;
          case 270:
            return 3216;
          case 271:
            return 3217;
          case 274:
            return 3218;
          case 275:
            return 3219;
          case 276:
            return 3220;
          case 278:
            return 3221;
          case 283:
            return 3222;
          case 284:
            return 3223;
          case 285:
            return 3224;
          case 287:
            return 3225;
          case 313:
            return 3226;
          case 314:
            return 3227;
          case 315:
            return 3228;
          case 316:
            return 3229;
          case 319:
            return 3230;
          case 320:
            return 3231;
          case 321:
            return 3232;
          case 322:
            return 3233;
          case 324:
            return 3234;
          case 325:
            return 3235;
          case 326:
            return 3236;
          case 327:
            return 3237;
          case 334:
            return 3238;
          case 335:
            return 3239;
          case 336:
            return 3240;
          case 337:
            return 3241;
          case 340:
            return 3242;
          case 341:
            return 3243;
          case 342:
            return 3244;
          case 344:
            return 3245;
          case 349:
            return 3246;
          case 350:
            return 3247;
          case 351:
            return 3248;
          case 353:
            return 3249;
          case 366:
            return 3250;
          case 367:
            return 3251;
          case 368:
            return 3252;
          case 369:
            return 3253;
          case 372:
            return 3254;
          case 373:
            return 3255;
          case 374:
            return 3256;
          case 376:
            return 3257;
          case 381:
            return 3258;
          case 382:
            return 3259;
          case 383:
            return 3260;
          case 385:
            return result;
          default:
            return 3154;
        }
      }
      uint64_t result = 3477;
      switch(a3)
      {
        case 163:
          return 3371;
        case 164:
          return 3372;
        case 165:
          return 3373;
        case 166:
        case 167:
        case 172:
        case 177:
        case 178:
        case 179:
        case 180:
        case 181:
        case 186:
        case 187:
        case 192:
        case 197:
        case 202:
        case 203:
        case 208:
        case 213:
        case 214:
        case 219:
        case 220:
        case 225:
        case 230:
        case 231:
        case 232:
        case 233:
        case 234:
        case 235:
        case 240:
        case 241:
        case 245:
        case 247:
        case 248:
        case 249:
        case 250:
        case 254:
        case 256:
        case 257:
        case 258:
        case 259:
        case 260:
        case 261:
        case 262:
        case 263:
        case 264:
        case 265:
        case 266:
        case 267:
        case 272:
        case 273:
        case 277:
        case 279:
        case 280:
        case 281:
        case 282:
        case 286:
        case 288:
        case 289:
        case 290:
        case 291:
        case 292:
        case 293:
        case 294:
        case 295:
        case 296:
        case 297:
        case 298:
        case 299:
        case 300:
        case 301:
        case 302:
        case 303:
        case 304:
        case 305:
        case 306:
        case 307:
        case 308:
        case 309:
        case 310:
        case 311:
        case 312:
        case 317:
        case 318:
        case 323:
        case 328:
        case 329:
        case 330:
        case 331:
        case 332:
        case 333:
        case 338:
        case 339:
        case 343:
        case 345:
        case 346:
        case 347:
        case 348:
        case 352:
        case 354:
        case 355:
        case 356:
        case 357:
        case 358:
        case 359:
        case 360:
        case 361:
        case 362:
        case 363:
        case 364:
        case 365:
        case 370:
        case 371:
        case 375:
        case 377:
        case 378:
        case 379:
        case 380:
        case 384:
          goto LABEL_4367;
        case 168:
          return 3374;
        case 169:
          return 3375;
        case 170:
          return 3376;
        case 171:
          return 3377;
        case 173:
          return 3378;
        case 174:
          return 3379;
        case 175:
          return 3380;
        case 176:
          return 3381;
        case 182:
          return 3382;
        case 183:
          return 3383;
        case 184:
          return 3384;
        case 185:
          return 3385;
        case 188:
          return 3386;
        case 189:
          return 3387;
        case 190:
          return 3388;
        case 191:
          return 3389;
        case 193:
          return 3390;
        case 194:
          return 3391;
        case 195:
          return 3392;
        case 196:
          return 3393;
        case 198:
          return 3394;
        case 199:
          return 3395;
        case 200:
          return 3396;
        case 201:
          return 3397;
        case 204:
          return 3398;
        case 205:
          return 3399;
        case 206:
          return 3400;
        case 207:
          return 3401;
        case 209:
          return 3402;
        case 210:
          return 3403;
        case 211:
          return 3404;
        case 212:
          return 3405;
        case 215:
          return 3406;
        case 216:
          return 3407;
        case 217:
          return 3408;
        case 218:
          return 3409;
        case 221:
          return 3410;
        case 222:
          return 3411;
        case 223:
          return 3412;
        case 224:
          return 3413;
        case 226:
          return 3414;
        case 227:
          return 3415;
        case 228:
          return 3416;
        case 229:
          return 3417;
        case 236:
          return 3418;
        case 237:
          return 3419;
        case 238:
          return 3420;
        case 239:
          return 3421;
        case 242:
          return 3422;
        case 243:
          return 3423;
        case 244:
          return 3424;
        case 246:
          return 3425;
        case 251:
          return 3426;
        case 252:
          return 3427;
        case 253:
          return 3428;
        case 255:
          return 3429;
        case 268:
          return 3430;
        case 269:
          return 3431;
        case 270:
          return 3432;
        case 271:
          return 3433;
        case 274:
          return 3434;
        case 275:
          return 3435;
        case 276:
          return 3436;
        case 278:
          return 3437;
        case 283:
          return 3438;
        case 284:
          return 3439;
        case 285:
          return 3440;
        case 287:
          return 3441;
        case 313:
          return 3442;
        case 314:
          return 3443;
        case 315:
          return 3444;
        case 316:
          return 3445;
        case 319:
          return 3446;
        case 320:
          return 3447;
        case 321:
          return 3448;
        case 322:
          return 3449;
        case 324:
          return 3450;
        case 325:
          return 3451;
        case 326:
          return 3452;
        case 327:
          return 3453;
        case 334:
          return 3454;
        case 335:
          return 3455;
        case 336:
          return 3456;
        case 337:
          return 3457;
        case 340:
          return 3458;
        case 341:
          return 3459;
        case 342:
          return 3460;
        case 344:
          return 3461;
        case 349:
          return 3462;
        case 350:
          return 3463;
        case 351:
          return 3464;
        case 353:
          return 3465;
        case 366:
          return 3466;
        case 367:
          return 3467;
        case 368:
          return 3468;
        case 369:
          return 3469;
        case 372:
          return 3470;
        case 373:
          return 3471;
        case 374:
          return 3472;
        case 376:
          return 3473;
        case 381:
          return 3474;
        case 382:
          return 3475;
        case 383:
          return 3476;
        case 385:
          return result;
        default:
          return 3370;
      }
    case 43:
      if (a1 == 4)
      {
        uint64_t result = 3153;
        switch(a3)
        {
          case 163:
            return 3047;
          case 164:
            return 3048;
          case 165:
            return 3049;
          case 166:
          case 167:
          case 172:
          case 177:
          case 178:
          case 179:
          case 180:
          case 181:
          case 186:
          case 187:
          case 192:
          case 197:
          case 202:
          case 203:
          case 208:
          case 213:
          case 214:
          case 219:
          case 220:
          case 225:
          case 230:
          case 231:
          case 232:
          case 233:
          case 234:
          case 235:
          case 240:
          case 241:
          case 245:
          case 247:
          case 248:
          case 249:
          case 250:
          case 254:
          case 256:
          case 257:
          case 258:
          case 259:
          case 260:
          case 261:
          case 262:
          case 263:
          case 264:
          case 265:
          case 266:
          case 267:
          case 272:
          case 273:
          case 277:
          case 279:
          case 280:
          case 281:
          case 282:
          case 286:
          case 288:
          case 289:
          case 290:
          case 291:
          case 292:
          case 293:
          case 294:
          case 295:
          case 296:
          case 297:
          case 298:
          case 299:
          case 300:
          case 301:
          case 302:
          case 303:
          case 304:
          case 305:
          case 306:
          case 307:
          case 308:
          case 309:
          case 310:
          case 311:
          case 312:
          case 317:
          case 318:
          case 323:
          case 328:
          case 329:
          case 330:
          case 331:
          case 332:
          case 333:
          case 338:
          case 339:
          case 343:
          case 345:
          case 346:
          case 347:
          case 348:
          case 352:
          case 354:
          case 355:
          case 356:
          case 357:
          case 358:
          case 359:
          case 360:
          case 361:
          case 362:
          case 363:
          case 364:
          case 365:
          case 370:
          case 371:
          case 375:
          case 377:
          case 378:
          case 379:
          case 380:
          case 384:
            goto LABEL_4367;
          case 168:
            return 3050;
          case 169:
            return 3051;
          case 170:
            return 3052;
          case 171:
            return 3053;
          case 173:
            return 3054;
          case 174:
            return 3055;
          case 175:
            return 3056;
          case 176:
            return 3057;
          case 182:
            return 3058;
          case 183:
            return 3059;
          case 184:
            return 3060;
          case 185:
            return 3061;
          case 188:
            return 3062;
          case 189:
            return 3063;
          case 190:
            return 3064;
          case 191:
            return 3065;
          case 193:
            return 3066;
          case 194:
            return 3067;
          case 195:
            return 3068;
          case 196:
            return 3069;
          case 198:
            return 3070;
          case 199:
            return 3071;
          case 200:
            return 3072;
          case 201:
            return 3073;
          case 204:
            return 3074;
          case 205:
            return 3075;
          case 206:
            return 3076;
          case 207:
            return 3077;
          case 209:
            return 3078;
          case 210:
            return 3079;
          case 211:
            return 3080;
          case 212:
            return 3081;
          case 215:
            return 3082;
          case 216:
            return 3083;
          case 217:
            return 3084;
          case 218:
            return 3085;
          case 221:
            return 3086;
          case 222:
            return 3087;
          case 223:
            return 3088;
          case 224:
            return 3089;
          case 226:
            return 3090;
          case 227:
            return 3091;
          case 228:
            return 3092;
          case 229:
            return 3093;
          case 236:
            return 3094;
          case 237:
            return 3095;
          case 238:
            return 3096;
          case 239:
            return 3097;
          case 242:
            return 3098;
          case 243:
            return 3099;
          case 244:
            return 3100;
          case 246:
            return 3101;
          case 251:
            return 3102;
          case 252:
            return 3103;
          case 253:
            return 3104;
          case 255:
            return 3105;
          case 268:
            return 3106;
          case 269:
            return 3107;
          case 270:
            return 3108;
          case 271:
            return 3109;
          case 274:
            return 3110;
          case 275:
            return 3111;
          case 276:
            return 3112;
          case 278:
            return 3113;
          case 283:
            return 3114;
          case 284:
            return 3115;
          case 285:
            return 3116;
          case 287:
            return 3117;
          case 313:
            return 3118;
          case 314:
            return 3119;
          case 315:
            return 3120;
          case 316:
            return 3121;
          case 319:
            return 3122;
          case 320:
            return 3123;
          case 321:
            return 3124;
          case 322:
            return 3125;
          case 324:
            return 3126;
          case 325:
            return 3127;
          case 326:
            return 3128;
          case 327:
            return 3129;
          case 334:
            return 3130;
          case 335:
            return 3131;
          case 336:
            return 3132;
          case 337:
            return 3133;
          case 340:
            return 3134;
          case 341:
            return 3135;
          case 342:
            return 3136;
          case 344:
            return 3137;
          case 349:
            return 3138;
          case 350:
            return 3139;
          case 351:
            return 3140;
          case 353:
            return 3141;
          case 366:
            return 3142;
          case 367:
            return 3143;
          case 368:
            return 3144;
          case 369:
            return 3145;
          case 372:
            return 3146;
          case 373:
            return 3147;
          case 374:
            return 3148;
          case 376:
            return 3149;
          case 381:
            return 3150;
          case 382:
            return 3151;
          case 383:
            return 3152;
          case 385:
            return result;
          default:
            return 3046;
        }
      }
      uint64_t result = 3369;
      switch(a3)
      {
        case 163:
          return 3263;
        case 164:
          return 3264;
        case 165:
          return 3265;
        case 166:
        case 167:
        case 172:
        case 177:
        case 178:
        case 179:
        case 180:
        case 181:
        case 186:
        case 187:
        case 192:
        case 197:
        case 202:
        case 203:
        case 208:
        case 213:
        case 214:
        case 219:
        case 220:
        case 225:
        case 230:
        case 231:
        case 232:
        case 233:
        case 234:
        case 235:
        case 240:
        case 241:
        case 245:
        case 247:
        case 248:
        case 249:
        case 250:
        case 254:
        case 256:
        case 257:
        case 258:
        case 259:
        case 260:
        case 261:
        case 262:
        case 263:
        case 264:
        case 265:
        case 266:
        case 267:
        case 272:
        case 273:
        case 277:
        case 279:
        case 280:
        case 281:
        case 282:
        case 286:
        case 288:
        case 289:
        case 290:
        case 291:
        case 292:
        case 293:
        case 294:
        case 295:
        case 296:
        case 297:
        case 298:
        case 299:
        case 300:
        case 301:
        case 302:
        case 303:
        case 304:
        case 305:
        case 306:
        case 307:
        case 308:
        case 309:
        case 310:
        case 311:
        case 312:
        case 317:
        case 318:
        case 323:
        case 328:
        case 329:
        case 330:
        case 331:
        case 332:
        case 333:
        case 338:
        case 339:
        case 343:
        case 345:
        case 346:
        case 347:
        case 348:
        case 352:
        case 354:
        case 355:
        case 356:
        case 357:
        case 358:
        case 359:
        case 360:
        case 361:
        case 362:
        case 363:
        case 364:
        case 365:
        case 370:
        case 371:
        case 375:
        case 377:
        case 378:
        case 379:
        case 380:
        case 384:
          goto LABEL_4367;
        case 168:
          return 3266;
        case 169:
          return 3267;
        case 170:
          return 3268;
        case 171:
          return 3269;
        case 173:
          return 3270;
        case 174:
          return 3271;
        case 175:
          return 3272;
        case 176:
          return 3273;
        case 182:
          return 3274;
        case 183:
          return 3275;
        case 184:
          return 3276;
        case 185:
          return 3277;
        case 188:
          return 3278;
        case 189:
          return 3279;
        case 190:
          return 3280;
        case 191:
          return 3281;
        case 193:
          return 3282;
        case 194:
          return 3283;
        case 195:
          return 3284;
        case 196:
          return 3285;
        case 198:
          return 3286;
        case 199:
          return 3287;
        case 200:
          return 3288;
        case 201:
          return 3289;
        case 204:
          return 3290;
        case 205:
          return 3291;
        case 206:
          return 3292;
        case 207:
          return 3293;
        case 209:
          return 3294;
        case 210:
          return 3295;
        case 211:
          return 3296;
        case 212:
          return 3297;
        case 215:
          return 3298;
        case 216:
          return 3299;
        case 217:
          return 3300;
        case 218:
          return 3301;
        case 221:
          return 3302;
        case 222:
          return 3303;
        case 223:
          return 3304;
        case 224:
          return 3305;
        case 226:
          return 3306;
        case 227:
          return 3307;
        case 228:
          return 3308;
        case 229:
          return 3309;
        case 236:
          return 3310;
        case 237:
          return 3311;
        case 238:
          return 3312;
        case 239:
          return 3313;
        case 242:
          return 3314;
        case 243:
          return 3315;
        case 244:
          return 3316;
        case 246:
          return 3317;
        case 251:
          return 3318;
        case 252:
          return 3319;
        case 253:
          return 3320;
        case 255:
          return 3321;
        case 268:
          return 3322;
        case 269:
          return 3323;
        case 270:
          return 3324;
        case 271:
          return 3325;
        case 274:
          return 3326;
        case 275:
          return 3327;
        case 276:
          return 3328;
        case 278:
          return 3329;
        case 283:
          return 3330;
        case 284:
          return 3331;
        case 285:
          return 3332;
        case 287:
          return 3333;
        case 313:
          return 3334;
        case 314:
          return 3335;
        case 315:
          return 3336;
        case 316:
          return 3337;
        case 319:
          return 3338;
        case 320:
          return 3339;
        case 321:
          return 3340;
        case 322:
          return 3341;
        case 324:
          return 3342;
        case 325:
          return 3343;
        case 326:
          return 3344;
        case 327:
          return 3345;
        case 334:
          return 3346;
        case 335:
          return 3347;
        case 336:
          return 3348;
        case 337:
          return 3349;
        case 340:
          return 3350;
        case 341:
          return 3351;
        case 342:
          return 3352;
        case 344:
          return 3353;
        case 349:
          return 3354;
        case 350:
          return 3355;
        case 351:
          return 3356;
        case 353:
          return 3357;
        case 366:
          return 3358;
        case 367:
          return 3359;
        case 368:
          return 3360;
        case 369:
          return 3361;
        case 372:
          return 3362;
        case 373:
          return 3363;
        case 374:
          return 3364;
        case 376:
          return 3365;
        case 381:
          return 3366;
        case 382:
          return 3367;
        case 383:
          return 3368;
        case 385:
          return result;
        default:
          return 3262;
      }
    case 44:
      if (a1 == 4)
      {
        uint64_t result = 3561;
        switch(a3)
        {
          case 37:
            return 3491;
          case 38:
            return 3492;
          case 39:
            return 3493;
          case 40:
            return 3494;
          case 41:
            return 3495;
          case 42:
            return 3496;
          case 43:
            return 3497;
          case 44:
            return 3498;
          case 45:
            return 3499;
          case 46:
            return 3500;
          case 47:
            return 3501;
          case 48:
          case 61:
          case 62:
          case 63:
          case 64:
          case 65:
          case 78:
          case 79:
          case 80:
          case 81:
          case 82:
          case 83:
          case 84:
          case 85:
          case 86:
          case 87:
          case 88:
          case 89:
          case 90:
          case 91:
          case 92:
          case 93:
          case 94:
          case 95:
          case 108:
          case 121:
          case 122:
          case 123:
          case 124:
          case 125:
            goto LABEL_4367;
          case 49:
            return 3502;
          case 50:
            return 3503;
          case 51:
            return 3504;
          case 52:
            return 3505;
          case 53:
            return 3506;
          case 54:
            return 3507;
          case 55:
            return 3508;
          case 56:
            return 3509;
          case 57:
            return 3510;
          case 58:
            return 3511;
          case 59:
            return 3512;
          case 60:
            return 3513;
          case 66:
            return 3514;
          case 67:
            return 3515;
          case 68:
            return 3516;
          case 69:
            return 3517;
          case 70:
            return 3518;
          case 71:
            return 3519;
          case 72:
            return 3520;
          case 73:
            return 3521;
          case 74:
            return 3522;
          case 75:
            return 3523;
          case 76:
            return 3524;
          case 77:
            return 3525;
          case 96:
            return 3526;
          case 97:
            return 3527;
          case 98:
            return 3528;
          case 99:
            return 3529;
          case 100:
            return 3530;
          case 101:
            return 3531;
          case 102:
            return 3532;
          case 103:
            return 3533;
          case 104:
            return 3534;
          case 105:
            return 3535;
          case 106:
            return 3536;
          case 107:
            return 3537;
          case 109:
            return 3538;
          case 110:
            return 3539;
          case 111:
            return 3540;
          case 112:
            return 3541;
          case 113:
            return 3542;
          case 114:
            return 3543;
          case 115:
            return 3544;
          case 116:
            return 3545;
          case 117:
            return 3546;
          case 118:
            return 3547;
          case 119:
            return 3548;
          case 120:
            return 3549;
          case 126:
            return 3550;
          case 127:
            return 3551;
          case 128:
            return 3552;
          case 129:
            return 3553;
          case 130:
            return 3554;
          case 131:
            return 3555;
          case 132:
            return 3556;
          case 133:
            return 3557;
          case 134:
            return 3558;
          case 135:
            return 3559;
          case 136:
            return 3560;
          case 137:
            return result;
          default:
            return 3490;
        }
      }
      uint64_t result = 3633;
      switch(a3)
      {
        case 37:
          return 3563;
        case 38:
          return 3564;
        case 39:
          return 3565;
        case 40:
          return 3566;
        case 41:
          return 3567;
        case 42:
          return 3568;
        case 43:
          return 3569;
        case 44:
          return 3570;
        case 45:
          return 3571;
        case 46:
          return 3572;
        case 47:
          return 3573;
        case 48:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 108:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
          goto LABEL_4367;
        case 49:
          return 3574;
        case 50:
          return 3575;
        case 51:
          return 3576;
        case 52:
          return 3577;
        case 53:
          return 3578;
        case 54:
          return 3579;
        case 55:
          return 3580;
        case 56:
          return 3581;
        case 57:
          return 3582;
        case 58:
          return 3583;
        case 59:
          return 3584;
        case 60:
          return 3585;
        case 66:
          return 3586;
        case 67:
          return 3587;
        case 68:
          return 3588;
        case 69:
          return 3589;
        case 70:
          return 3590;
        case 71:
          return 3591;
        case 72:
          return 3592;
        case 73:
          return 3593;
        case 74:
          return 3594;
        case 75:
          return 3595;
        case 76:
          return 3596;
        case 77:
          return 3597;
        case 96:
          return 3598;
        case 97:
          return 3599;
        case 98:
          return 3600;
        case 99:
          return 3601;
        case 100:
          return 3602;
        case 101:
          return 3603;
        case 102:
          return 3604;
        case 103:
          return 3605;
        case 104:
          return 3606;
        case 105:
          return 3607;
        case 106:
          return 3608;
        case 107:
          return 3609;
        case 109:
          return 3610;
        case 110:
          return 3611;
        case 111:
          return 3612;
        case 112:
          return 3613;
        case 113:
          return 3614;
        case 114:
          return 3615;
        case 115:
          return 3616;
        case 116:
          return 3617;
        case 117:
          return 3618;
        case 118:
          return 3619;
        case 119:
          return 3620;
        case 120:
          return 3621;
        case 126:
          return 3622;
        case 127:
          return 3623;
        case 128:
          return 3624;
        case 129:
          return 3625;
        case 130:
          return 3626;
        case 131:
          return 3627;
        case 132:
          return 3628;
        case 133:
          return 3629;
        case 134:
          return 3630;
        case 135:
          return 3631;
        case 136:
          return 3632;
        case 137:
          return result;
        default:
          return 3562;
      }
    case 45:
      if (a1 == 4)
      {
        if (a3 > 249)
        {
          if (a3 <= 316)
          {
            if (a3 == 282) {
              int v197 = 3713;
            }
            else {
              int v197 = 3714;
            }
            if (a3 == 273) {
              unsigned int v7 = 3712;
            }
            else {
              unsigned int v7 = v197;
            }
            unsigned int v9 = 3709;
            BOOL v191 = a3 == 267;
            int v192 = 3710;
            int v193 = 3711;
            goto LABEL_2036;
          }
          if (a3 <= 347)
          {
            switch(a3)
            {
              case 318:
                return 3716;
              case 319:
              case 320:
              case 321:
              case 322:
              case 324:
              case 325:
              case 326:
              case 327:
              case 332:
              case 334:
              case 335:
              case 336:
              case 337:
                goto LABEL_4367;
              case 323:
                return 3717;
              case 328:
                return 3718;
              case 329:
                return 3719;
              case 330:
                return 3720;
              case 331:
                return 3721;
              case 333:
                return 3722;
              case 338:
                return 3723;
              case 339:
                return 3724;
              default:
                return 3715;
            }
          }
          if (a3 == 371) {
            unsigned int v7 = 3728;
          }
          else {
            unsigned int v7 = 3729;
          }
          if (a3 == 370) {
            unsigned int v7 = 3727;
          }
          BOOL v201 = a3 == 348;
          unsigned int v9 = 3725;
          int v202 = 3726;
LABEL_2071:
          if (!v201) {
            unsigned int v9 = v202;
          }
          BOOL v39 = a3 <= 369;
          goto LABEL_1923;
        }
        if (a3 <= 202)
        {
          if (a3 <= 196)
          {
            switch(a3)
            {
              case 166:
                return 3683;
              case 167:
                return 3684;
              case 168:
              case 169:
              case 170:
              case 171:
              case 173:
              case 174:
              case 175:
              case 176:
              case 182:
              case 183:
              case 184:
              case 185:
              case 188:
              case 189:
              case 190:
              case 191:
                goto LABEL_4367;
              case 172:
                return 3685;
              case 177:
                return 3686;
              case 178:
                return 3687;
              case 179:
                return 3688;
              case 180:
                return 3689;
              case 181:
                return 3690;
              case 186:
                return 3691;
              case 187:
                return 3692;
              case 192:
                return 3693;
              default:
                return 3682;
            }
          }
          BOOL v211 = a3 == 197;
          unsigned int v207 = 3694;
          unsigned int v209 = 3695;
          goto LABEL_2108;
        }
        if (a3 > 218)
        {
          switch(a3)
          {
            case 220:
              return 3700;
            case 221:
            case 222:
            case 223:
            case 224:
            case 226:
            case 227:
            case 228:
            case 229:
            case 234:
            case 236:
            case 237:
            case 238:
            case 239:
              goto LABEL_4367;
            case 225:
              return 3701;
            case 230:
              return 3702;
            case 231:
              return 3703;
            case 232:
              return 3704;
            case 233:
              return 3705;
            case 235:
              return 3706;
            case 240:
              return 3707;
            case 241:
              return 3708;
            default:
              return 3699;
          }
        }
        unsigned int v207 = 3696;
        BOOL v208 = a3 == 208;
        unsigned int v209 = 3697;
        int v210 = 3698;
      }
      else
      {
        if (a3 > 249)
        {
          if (a3 <= 316)
          {
            if (a3 == 282) {
              int v198 = 3809;
            }
            else {
              int v198 = 3810;
            }
            if (a3 == 273) {
              unsigned int v7 = 3808;
            }
            else {
              unsigned int v7 = v198;
            }
            unsigned int v9 = 3805;
            BOOL v191 = a3 == 267;
            int v192 = 3806;
            int v193 = 3807;
            goto LABEL_2036;
          }
          if (a3 <= 347)
          {
            switch(a3)
            {
              case 318:
                return 3812;
              case 319:
              case 320:
              case 321:
              case 322:
              case 324:
              case 325:
              case 326:
              case 327:
              case 332:
              case 334:
              case 335:
              case 336:
              case 337:
                goto LABEL_4367;
              case 323:
                return 3813;
              case 328:
                return 3814;
              case 329:
                return 3815;
              case 330:
                return 3816;
              case 331:
                return 3817;
              case 333:
                return 3818;
              case 338:
                return 3819;
              case 339:
                return 3820;
              default:
                return 3811;
            }
          }
          if (a3 == 371) {
            unsigned int v203 = 3824;
          }
          else {
            unsigned int v203 = 3825;
          }
          if (a3 == 370) {
            unsigned int v203 = 3823;
          }
          BOOL v204 = a3 == 348;
          unsigned int v205 = 3821;
          int v206 = 3822;
          goto LABEL_2092;
        }
        if (a3 <= 202)
        {
          if (a3 <= 196)
          {
            switch(a3)
            {
              case 166:
                return 3779;
              case 167:
                return 3780;
              case 168:
              case 169:
              case 170:
              case 171:
              case 173:
              case 174:
              case 175:
              case 176:
              case 182:
              case 183:
              case 184:
              case 185:
              case 188:
              case 189:
              case 190:
              case 191:
                goto LABEL_4367;
              case 172:
                return 3781;
              case 177:
                return 3782;
              case 178:
                return 3783;
              case 179:
                return 3784;
              case 180:
                return 3785;
              case 181:
                return 3786;
              case 186:
                return 3787;
              case 187:
                return 3788;
              case 192:
                return 3789;
              default:
                return 3778;
            }
          }
          BOOL v211 = a3 == 197;
          unsigned int v207 = 3790;
          unsigned int v209 = 3791;
          goto LABEL_2108;
        }
        if (a3 > 218)
        {
          switch(a3)
          {
            case 220:
              return 3796;
            case 221:
            case 222:
            case 223:
            case 224:
            case 226:
            case 227:
            case 228:
            case 229:
            case 234:
            case 236:
            case 237:
            case 238:
            case 239:
              goto LABEL_4367;
            case 225:
              return 3797;
            case 230:
              return 3798;
            case 231:
              return 3799;
            case 232:
              return 3800;
            case 233:
              return 3801;
            case 235:
              return 3802;
            case 240:
              return 3803;
            case 241:
              return 3804;
            default:
              return 3795;
          }
        }
        unsigned int v207 = 3792;
        BOOL v208 = a3 == 208;
        unsigned int v209 = 3793;
        int v210 = 3794;
      }
      goto LABEL_2105;
    case 46:
      if (a1 == 4)
      {
        if (a3 <= 249)
        {
          if (a3 <= 202)
          {
            if (a3 <= 196)
            {
              switch(a3)
              {
                case 166:
                  return 3635;
                case 167:
                  return 3636;
                case 168:
                case 169:
                case 170:
                case 171:
                case 173:
                case 174:
                case 175:
                case 176:
                case 182:
                case 183:
                case 184:
                case 185:
                case 188:
                case 189:
                case 190:
                case 191:
                  goto LABEL_4367;
                case 172:
                  return 3637;
                case 177:
                  return 3638;
                case 178:
                  return 3639;
                case 179:
                  return 3640;
                case 180:
                  return 3641;
                case 181:
                  return 3642;
                case 186:
                  return 3643;
                case 187:
                  return 3644;
                case 192:
                  return 3645;
                default:
                  return 3634;
              }
            }
            BOOL v211 = a3 == 197;
            unsigned int v207 = 3646;
            unsigned int v209 = 3647;
            goto LABEL_2108;
          }
          if (a3 > 218)
          {
            switch(a3)
            {
              case 220:
                return 3652;
              case 221:
              case 222:
              case 223:
              case 224:
              case 226:
              case 227:
              case 228:
              case 229:
              case 234:
              case 236:
              case 237:
              case 238:
              case 239:
                goto LABEL_4367;
              case 225:
                return 3653;
              case 230:
                return 3654;
              case 231:
                return 3655;
              case 232:
                return 3656;
              case 233:
                return 3657;
              case 235:
                return 3658;
              case 240:
                return 3659;
              case 241:
                return 3660;
              default:
                return 3651;
            }
          }
          unsigned int v207 = 3648;
          BOOL v208 = a3 == 208;
          unsigned int v209 = 3649;
          int v210 = 3650;
LABEL_2105:
          if (!v208) {
            unsigned int v209 = v210;
          }
          BOOL v211 = a3 == 203;
LABEL_2108:
          if (v211) {
            return v207;
          }
          else {
            return v209;
          }
        }
        if (a3 > 316)
        {
          if (a3 <= 347)
          {
            switch(a3)
            {
              case 318:
                return 3668;
              case 319:
              case 320:
              case 321:
              case 322:
              case 324:
              case 325:
              case 326:
              case 327:
              case 332:
              case 334:
              case 335:
              case 336:
              case 337:
                goto LABEL_4367;
              case 323:
                return 3669;
              case 328:
                return 3670;
              case 329:
                return 3671;
              case 330:
                return 3672;
              case 331:
                return 3673;
              case 333:
                return 3674;
              case 338:
                return 3675;
              case 339:
                return 3676;
              default:
                return 3667;
            }
          }
          if (a3 == 371) {
            unsigned int v203 = 3680;
          }
          else {
            unsigned int v203 = 3681;
          }
          if (a3 == 370) {
            unsigned int v203 = 3679;
          }
          BOOL v204 = a3 == 348;
          unsigned int v205 = 3677;
          int v206 = 3678;
LABEL_2092:
          if (!v204) {
            unsigned int v205 = v206;
          }
          if (a3 <= 369) {
            return v205;
          }
          else {
            return v203;
          }
        }
        if (a3 == 282) {
          int v199 = 3665;
        }
        else {
          int v199 = 3666;
        }
        if (a3 == 273) {
          unsigned int v7 = 3664;
        }
        else {
          unsigned int v7 = v199;
        }
        unsigned int v9 = 3661;
        BOOL v191 = a3 == 267;
        int v192 = 3662;
        int v193 = 3663;
      }
      else
      {
        if (a3 <= 249)
        {
          if (a3 <= 202)
          {
            if (a3 <= 196)
            {
              switch(a3)
              {
                case 166:
                  return 3731;
                case 167:
                  return 3732;
                case 168:
                case 169:
                case 170:
                case 171:
                case 173:
                case 174:
                case 175:
                case 176:
                case 182:
                case 183:
                case 184:
                case 185:
                case 188:
                case 189:
                case 190:
                case 191:
                  goto LABEL_4367;
                case 172:
                  return 3733;
                case 177:
                  return 3734;
                case 178:
                  return 3735;
                case 179:
                  return 3736;
                case 180:
                  return 3737;
                case 181:
                  return 3738;
                case 186:
                  return 3739;
                case 187:
                  return 3740;
                case 192:
                  return 3741;
                default:
                  return 3730;
              }
            }
            BOOL v211 = a3 == 197;
            unsigned int v207 = 3742;
            unsigned int v209 = 3743;
            goto LABEL_2108;
          }
          if (a3 > 218)
          {
            switch(a3)
            {
              case 220:
                return 3748;
              case 221:
              case 222:
              case 223:
              case 224:
              case 226:
              case 227:
              case 228:
              case 229:
              case 234:
              case 236:
              case 237:
              case 238:
              case 239:
                goto LABEL_4367;
              case 225:
                return 3749;
              case 230:
                return 3750;
              case 231:
                return 3751;
              case 232:
                return 3752;
              case 233:
                return 3753;
              case 235:
                return 3754;
              case 240:
                return 3755;
              case 241:
                return 3756;
              default:
                return 3747;
            }
          }
          unsigned int v207 = 3744;
          BOOL v208 = a3 == 208;
          unsigned int v209 = 3745;
          int v210 = 3746;
          goto LABEL_2105;
        }
        if (a3 > 316)
        {
          if (a3 <= 347)
          {
            switch(a3)
            {
              case 318:
                return 3764;
              case 319:
              case 320:
              case 321:
              case 322:
              case 324:
              case 325:
              case 326:
              case 327:
              case 332:
              case 334:
              case 335:
              case 336:
              case 337:
                goto LABEL_4367;
              case 323:
                return 3765;
              case 328:
                return 3766;
              case 329:
                return 3767;
              case 330:
                return 3768;
              case 331:
                return 3769;
              case 333:
                return 3770;
              case 338:
                return 3771;
              case 339:
                return 3772;
              default:
                return 3763;
            }
          }
          if (a3 == 371) {
            unsigned int v203 = 3776;
          }
          else {
            unsigned int v203 = 3777;
          }
          if (a3 == 370) {
            unsigned int v203 = 3775;
          }
          BOOL v204 = a3 == 348;
          unsigned int v205 = 3773;
          int v206 = 3774;
          goto LABEL_2092;
        }
        if (a3 == 282) {
          int v200 = 3761;
        }
        else {
          int v200 = 3762;
        }
        if (a3 == 273) {
          unsigned int v7 = 3760;
        }
        else {
          unsigned int v7 = v200;
        }
        unsigned int v9 = 3757;
        BOOL v191 = a3 == 267;
        int v192 = 3758;
        int v193 = 3759;
      }
LABEL_2036:
      if (!v191) {
        int v192 = v193;
      }
      if (a3 != 250) {
        unsigned int v9 = v192;
      }
      BOOL v39 = a3 <= 272;
      goto LABEL_1923;
    case 47:
      if (a3 > 155)
      {
        if (a3 == 157) {
          return 292;
        }
        else {
          return 291;
        }
      }
      else
      {
        unsigned int v17 = 289;
        BOOL v18 = a3 == 125;
        unsigned int v19 = 290;
LABEL_840:
        if (v18) {
          return v17;
        }
        else {
          return v19;
        }
      }
    case 48:
      if (a3 == 156) {
        int v36 = 300;
      }
      else {
        int v36 = 301;
      }
      if (a3 == 155) {
        int v37 = 299;
      }
      else {
        int v37 = v36;
      }
      if (a3 == 125) {
        unsigned int v7 = 297;
      }
      else {
        unsigned int v7 = 298;
      }
      if (a3 > 154) {
        unsigned int v7 = v37;
      }
      if (a3 == 82) {
        unsigned int v9 = 295;
      }
      else {
        unsigned int v9 = 296;
      }
      if (a3 == 48) {
        int v38 = 293;
      }
      else {
        int v38 = 294;
      }
      if (a3 <= 81) {
        unsigned int v9 = v38;
      }
      BOOL v39 = a3 <= 124;
      goto LABEL_1923;
    case 49:
      if (a3 > 64)
      {
        if (a3 == 108) {
          unsigned int v7 = 311;
        }
        else {
          unsigned int v7 = 312;
        }
        if (a3 == 65) {
          unsigned int v9 = 309;
        }
        else {
          unsigned int v9 = 310;
        }
        BOOL v39 = a3 <= 107;
        goto LABEL_1923;
      }
      switch(a3)
      {
        case ' ':
          uint64_t result = 304;
          break;
        case '!':
          uint64_t result = 305;
          break;
        case '""':
          uint64_t result = 306;
          break;
        case '#':
          uint64_t result = 307;
          break;
        default:
          uint64_t result = 308;
          break;
      }
      return result;
    case 50:
      return (a3 + 4330);
    case 51:
      return (a3 + 4530);
    case 52:
      if (a1 == 2)
      {
        if (a3 <= 311)
        {
          if (a3 == 273) {
            int v81 = 4955;
          }
          else {
            int v81 = 4956;
          }
          if (a3 == 267) {
            unsigned int v7 = 4954;
          }
          else {
            unsigned int v7 = v81;
          }
          if (a3 == 241) {
            int v82 = 4952;
          }
          else {
            int v82 = 4953;
          }
          if (a3 <= 266) {
            unsigned int v7 = v82;
          }
          if (a3 == 225) {
            unsigned int v9 = 4950;
          }
          else {
            unsigned int v9 = 4951;
          }
          BOOL v10 = a3 == 214;
          int v11 = 4948;
          int v12 = 4949;
          goto LABEL_1731;
        }
        if (a3 == 371) {
          unsigned int v7 = 4964;
        }
        else {
          unsigned int v7 = 4965;
        }
        if (a3 == 365) {
          unsigned int v7 = 4963;
        }
        if (a3 == 339) {
          int v158 = 4961;
        }
        else {
          int v158 = 4962;
        }
        if (a3 <= 364) {
          unsigned int v7 = v158;
        }
        if (a3 == 323) {
          unsigned int v9 = 4959;
        }
        else {
          unsigned int v9 = 4960;
        }
        BOOL v87 = a3 == 312;
        int v88 = 4957;
        int v89 = 4958;
      }
      else
      {
        if (a3 <= 311)
        {
          if (a3 == 273) {
            int v119 = 4973;
          }
          else {
            int v119 = 4974;
          }
          if (a3 == 267) {
            unsigned int v7 = 4972;
          }
          else {
            unsigned int v7 = v119;
          }
          if (a3 == 241) {
            int v120 = 4970;
          }
          else {
            int v120 = 4971;
          }
          if (a3 <= 266) {
            unsigned int v7 = v120;
          }
          if (a3 == 225) {
            unsigned int v9 = 4968;
          }
          else {
            unsigned int v9 = 4969;
          }
          BOOL v10 = a3 == 214;
          int v11 = 4966;
          int v12 = 4967;
          goto LABEL_1731;
        }
        if (a3 == 371) {
          unsigned int v7 = 4982;
        }
        else {
          unsigned int v7 = 4983;
        }
        if (a3 == 365) {
          unsigned int v7 = 4981;
        }
        if (a3 == 339) {
          int v159 = 4979;
        }
        else {
          int v159 = 4980;
        }
        if (a3 <= 364) {
          unsigned int v7 = v159;
        }
        if (a3 == 323) {
          unsigned int v9 = 4977;
        }
        else {
          unsigned int v9 = 4978;
        }
        BOOL v87 = a3 == 312;
        int v88 = 4975;
        int v89 = 4976;
      }
      goto LABEL_1918;
    case 53:
      if (a3 <= 311)
      {
        if (a3 == 273) {
          int v20 = 4991;
        }
        else {
          int v20 = 4992;
        }
        if (a3 == 267) {
          unsigned int v7 = 4990;
        }
        else {
          unsigned int v7 = v20;
        }
        if (a3 == 241) {
          int v21 = 4988;
        }
        else {
          int v21 = 4989;
        }
        if (a3 <= 266) {
          unsigned int v7 = v21;
        }
        if (a3 == 225) {
          unsigned int v9 = 4986;
        }
        else {
          unsigned int v9 = 4987;
        }
        BOOL v10 = a3 == 214;
        int v11 = 4984;
        int v12 = 4985;
        goto LABEL_1731;
      }
      if (a3 == 371) {
        unsigned int v7 = 5000;
      }
      else {
        unsigned int v7 = 5001;
      }
      if (a3 == 365) {
        unsigned int v7 = 4999;
      }
      if (a3 == 339) {
        int v86 = 4997;
      }
      else {
        int v86 = 4998;
      }
      if (a3 <= 364) {
        unsigned int v7 = v86;
      }
      if (a3 == 323) {
        unsigned int v9 = 4995;
      }
      else {
        unsigned int v9 = 4996;
      }
      BOOL v87 = a3 == 312;
      int v88 = 4993;
      int v89 = 4994;
      goto LABEL_1918;
    case 54:
      if (a3 <= 311)
      {
        if (a3 == 273) {
          int v77 = 5009;
        }
        else {
          int v77 = 5010;
        }
        if (a3 == 267) {
          unsigned int v7 = 5008;
        }
        else {
          unsigned int v7 = v77;
        }
        if (a3 == 241) {
          int v78 = 5006;
        }
        else {
          int v78 = 5007;
        }
        if (a3 <= 266) {
          unsigned int v7 = v78;
        }
        if (a3 == 225) {
          unsigned int v9 = 5004;
        }
        else {
          unsigned int v9 = 5005;
        }
        BOOL v10 = a3 == 214;
        int v11 = 5002;
        int v12 = 5003;
        goto LABEL_1731;
      }
      if (a3 == 371) {
        unsigned int v7 = 5018;
      }
      else {
        unsigned int v7 = 5019;
      }
      if (a3 == 365) {
        unsigned int v7 = 5017;
      }
      if (a3 == 339) {
        int v116 = 5015;
      }
      else {
        int v116 = 5016;
      }
      if (a3 <= 364) {
        unsigned int v7 = v116;
      }
      if (a3 == 323) {
        unsigned int v9 = 5013;
      }
      else {
        unsigned int v9 = 5014;
      }
      BOOL v87 = a3 == 312;
      int v88 = 5011;
      int v89 = 5012;
      goto LABEL_1918;
    case 55:
      if (a1 == 2)
      {
        if (a3 <= 311)
        {
          if (a3 == 273) {
            int v79 = 5027;
          }
          else {
            int v79 = 5028;
          }
          if (a3 == 267) {
            unsigned int v7 = 5026;
          }
          else {
            unsigned int v7 = v79;
          }
          if (a3 == 241) {
            int v80 = 5024;
          }
          else {
            int v80 = 5025;
          }
          if (a3 <= 266) {
            unsigned int v7 = v80;
          }
          if (a3 == 225) {
            unsigned int v9 = 5022;
          }
          else {
            unsigned int v9 = 5023;
          }
          BOOL v10 = a3 == 214;
          int v11 = 5020;
          int v12 = 5021;
          goto LABEL_1731;
        }
        if (a3 == 371) {
          unsigned int v7 = 5036;
        }
        else {
          unsigned int v7 = 5037;
        }
        if (a3 == 365) {
          unsigned int v7 = 5035;
        }
        if (a3 == 339) {
          int v150 = 5033;
        }
        else {
          int v150 = 5034;
        }
        if (a3 <= 364) {
          unsigned int v7 = v150;
        }
        if (a3 == 323) {
          unsigned int v9 = 5031;
        }
        else {
          unsigned int v9 = 5032;
        }
        BOOL v87 = a3 == 312;
        int v88 = 5029;
        int v89 = 5030;
      }
      else
      {
        if (a3 <= 311)
        {
          if (a3 == 273) {
            int v117 = 5045;
          }
          else {
            int v117 = 5046;
          }
          if (a3 == 267) {
            unsigned int v7 = 5044;
          }
          else {
            unsigned int v7 = v117;
          }
          if (a3 == 241) {
            int v118 = 5042;
          }
          else {
            int v118 = 5043;
          }
          if (a3 <= 266) {
            unsigned int v7 = v118;
          }
          if (a3 == 225) {
            unsigned int v9 = 5040;
          }
          else {
            unsigned int v9 = 5041;
          }
          BOOL v10 = a3 == 214;
          int v11 = 5038;
          int v12 = 5039;
          goto LABEL_1731;
        }
        if (a3 == 371) {
          unsigned int v7 = 5054;
        }
        else {
          unsigned int v7 = 5055;
        }
        if (a3 == 365) {
          unsigned int v7 = 5053;
        }
        if (a3 == 339) {
          int v157 = 5051;
        }
        else {
          int v157 = 5052;
        }
        if (a3 <= 364) {
          unsigned int v7 = v157;
        }
        if (a3 == 323) {
          unsigned int v9 = 5049;
        }
        else {
          unsigned int v9 = 5050;
        }
        BOOL v87 = a3 == 312;
        int v88 = 5047;
        int v89 = 5048;
      }
      goto LABEL_1918;
    case 56:
      if (a1 == 2)
      {
        if (a3 <= 311)
        {
          if (a3 == 273) {
            int v22 = 5063;
          }
          else {
            int v22 = 5064;
          }
          if (a3 == 267) {
            unsigned int v7 = 5062;
          }
          else {
            unsigned int v7 = v22;
          }
          if (a3 == 241) {
            int v23 = 5060;
          }
          else {
            int v23 = 5061;
          }
          if (a3 <= 266) {
            unsigned int v7 = v23;
          }
          if (a3 == 225) {
            unsigned int v9 = 5058;
          }
          else {
            unsigned int v9 = 5059;
          }
          BOOL v10 = a3 == 214;
          int v11 = 5056;
          int v12 = 5057;
          goto LABEL_1731;
        }
        if (a3 == 371) {
          unsigned int v7 = 5072;
        }
        else {
          unsigned int v7 = 5073;
        }
        if (a3 == 365) {
          unsigned int v7 = 5071;
        }
        if (a3 == 339) {
          int v123 = 5069;
        }
        else {
          int v123 = 5070;
        }
        if (a3 <= 364) {
          unsigned int v7 = v123;
        }
        if (a3 == 323) {
          unsigned int v9 = 5067;
        }
        else {
          unsigned int v9 = 5068;
        }
        BOOL v87 = a3 == 312;
        int v88 = 5065;
        int v89 = 5066;
      }
      else
      {
        if (a3 <= 311)
        {
          if (a3 == 273) {
            int v90 = 5081;
          }
          else {
            int v90 = 5082;
          }
          if (a3 == 267) {
            unsigned int v7 = 5080;
          }
          else {
            unsigned int v7 = v90;
          }
          if (a3 == 241) {
            int v91 = 5078;
          }
          else {
            int v91 = 5079;
          }
          if (a3 <= 266) {
            unsigned int v7 = v91;
          }
          if (a3 == 225) {
            unsigned int v9 = 5076;
          }
          else {
            unsigned int v9 = 5077;
          }
          BOOL v10 = a3 == 214;
          int v11 = 5074;
          int v12 = 5075;
          goto LABEL_1731;
        }
        if (a3 == 371) {
          unsigned int v7 = 5090;
        }
        else {
          unsigned int v7 = 5091;
        }
        if (a3 == 365) {
          unsigned int v7 = 5089;
        }
        if (a3 == 339) {
          int v125 = 5087;
        }
        else {
          int v125 = 5088;
        }
        if (a3 <= 364) {
          unsigned int v7 = v125;
        }
        if (a3 == 323) {
          unsigned int v9 = 5085;
        }
        else {
          unsigned int v9 = 5086;
        }
        BOOL v87 = a3 == 312;
        int v88 = 5083;
        int v89 = 5084;
      }
      goto LABEL_1918;
    case 57:
      if (a1 == 2)
      {
        if (a3 <= 311)
        {
          if (a3 == 273) {
            int v72 = 5099;
          }
          else {
            int v72 = 5100;
          }
          if (a3 == 267) {
            unsigned int v7 = 5098;
          }
          else {
            unsigned int v7 = v72;
          }
          if (a3 == 241) {
            int v73 = 5096;
          }
          else {
            int v73 = 5097;
          }
          if (a3 <= 266) {
            unsigned int v7 = v73;
          }
          if (a3 == 225) {
            unsigned int v9 = 5094;
          }
          else {
            unsigned int v9 = 5095;
          }
          BOOL v10 = a3 == 214;
          int v11 = 5092;
          int v12 = 5093;
          goto LABEL_1731;
        }
        if (a3 == 371) {
          unsigned int v7 = 5108;
        }
        else {
          unsigned int v7 = 5109;
        }
        if (a3 == 365) {
          unsigned int v7 = 5107;
        }
        if (a3 == 339) {
          int v148 = 5105;
        }
        else {
          int v148 = 5106;
        }
        if (a3 <= 364) {
          unsigned int v7 = v148;
        }
        if (a3 == 323) {
          unsigned int v9 = 5103;
        }
        else {
          unsigned int v9 = 5104;
        }
        BOOL v87 = a3 == 312;
        int v88 = 5101;
        int v89 = 5102;
      }
      else
      {
        if (a3 <= 311)
        {
          if (a3 == 273) {
            int v111 = 5117;
          }
          else {
            int v111 = 5118;
          }
          if (a3 == 267) {
            unsigned int v7 = 5116;
          }
          else {
            unsigned int v7 = v111;
          }
          if (a3 == 241) {
            int v112 = 5114;
          }
          else {
            int v112 = 5115;
          }
          if (a3 <= 266) {
            unsigned int v7 = v112;
          }
          if (a3 == 225) {
            unsigned int v9 = 5112;
          }
          else {
            unsigned int v9 = 5113;
          }
          BOOL v10 = a3 == 214;
          int v11 = 5110;
          int v12 = 5111;
          goto LABEL_1731;
        }
        if (a3 == 371) {
          unsigned int v7 = 5126;
        }
        else {
          unsigned int v7 = 5127;
        }
        if (a3 == 365) {
          unsigned int v7 = 5125;
        }
        if (a3 == 339) {
          int v155 = 5123;
        }
        else {
          int v155 = 5124;
        }
        if (a3 <= 364) {
          unsigned int v7 = v155;
        }
        if (a3 == 323) {
          unsigned int v9 = 5121;
        }
        else {
          unsigned int v9 = 5122;
        }
        BOOL v87 = a3 == 312;
        int v88 = 5119;
        int v89 = 5120;
      }
      goto LABEL_1918;
    case 58:
      if (a1 == 2)
      {
        if (a3 <= 311)
        {
          if (a3 == 273) {
            int v40 = 5135;
          }
          else {
            int v40 = 5136;
          }
          if (a3 == 267) {
            unsigned int v7 = 5134;
          }
          else {
            unsigned int v7 = v40;
          }
          if (a3 == 241) {
            int v41 = 5132;
          }
          else {
            int v41 = 5133;
          }
          if (a3 <= 266) {
            unsigned int v7 = v41;
          }
          if (a3 == 225) {
            unsigned int v9 = 5130;
          }
          else {
            unsigned int v9 = 5131;
          }
          BOOL v10 = a3 == 214;
          int v11 = 5128;
          int v12 = 5129;
          goto LABEL_1731;
        }
        if (a3 == 371) {
          unsigned int v7 = 5144;
        }
        else {
          unsigned int v7 = 5145;
        }
        if (a3 == 365) {
          unsigned int v7 = 5143;
        }
        if (a3 == 339) {
          int v132 = 5141;
        }
        else {
          int v132 = 5142;
        }
        if (a3 <= 364) {
          unsigned int v7 = v132;
        }
        if (a3 == 323) {
          unsigned int v9 = 5139;
        }
        else {
          unsigned int v9 = 5140;
        }
        BOOL v87 = a3 == 312;
        int v88 = 5137;
        int v89 = 5138;
      }
      else
      {
        if (a3 <= 311)
        {
          if (a3 == 273) {
            int v96 = 5153;
          }
          else {
            int v96 = 5154;
          }
          if (a3 == 267) {
            unsigned int v7 = 5152;
          }
          else {
            unsigned int v7 = v96;
          }
          if (a3 == 241) {
            int v97 = 5150;
          }
          else {
            int v97 = 5151;
          }
          if (a3 <= 266) {
            unsigned int v7 = v97;
          }
          if (a3 == 225) {
            unsigned int v9 = 5148;
          }
          else {
            unsigned int v9 = 5149;
          }
          BOOL v10 = a3 == 214;
          int v11 = 5146;
          int v12 = 5147;
          goto LABEL_1731;
        }
        if (a3 == 371) {
          unsigned int v7 = 5162;
        }
        else {
          unsigned int v7 = 5163;
        }
        if (a3 == 365) {
          unsigned int v7 = 5161;
        }
        if (a3 == 339) {
          int v139 = 5159;
        }
        else {
          int v139 = 5160;
        }
        if (a3 <= 364) {
          unsigned int v7 = v139;
        }
        if (a3 == 323) {
          unsigned int v9 = 5157;
        }
        else {
          unsigned int v9 = 5158;
        }
        BOOL v87 = a3 == 312;
        int v88 = 5155;
        int v89 = 5156;
      }
      goto LABEL_1918;
    case 59:
      if (a1 == 2)
      {
        if (a3 <= 311)
        {
          if (a3 == 273) {
            int v74 = 5223;
          }
          else {
            int v74 = 5224;
          }
          if (a3 == 267) {
            unsigned int v7 = 5222;
          }
          else {
            unsigned int v7 = v74;
          }
          if (a3 == 241) {
            int v75 = 5220;
          }
          else {
            int v75 = 5221;
          }
          if (a3 <= 266) {
            unsigned int v7 = v75;
          }
          if (a3 == 225) {
            unsigned int v9 = 5218;
          }
          else {
            unsigned int v9 = 5219;
          }
          BOOL v10 = a3 == 214;
          int v11 = 5216;
          int v12 = 5217;
          goto LABEL_1731;
        }
        if (a3 == 371) {
          unsigned int v7 = 5232;
        }
        else {
          unsigned int v7 = 5233;
        }
        if (a3 == 365) {
          unsigned int v7 = 5231;
        }
        if (a3 == 339) {
          int v149 = 5229;
        }
        else {
          int v149 = 5230;
        }
        if (a3 <= 364) {
          unsigned int v7 = v149;
        }
        if (a3 == 323) {
          unsigned int v9 = 5227;
        }
        else {
          unsigned int v9 = 5228;
        }
        BOOL v87 = a3 == 312;
        int v88 = 5225;
        int v89 = 5226;
      }
      else
      {
        if (a3 <= 311)
        {
          if (a3 == 273) {
            int v113 = 5241;
          }
          else {
            int v113 = 5242;
          }
          if (a3 == 267) {
            unsigned int v7 = 5240;
          }
          else {
            unsigned int v7 = v113;
          }
          if (a3 == 241) {
            int v114 = 5238;
          }
          else {
            int v114 = 5239;
          }
          if (a3 <= 266) {
            unsigned int v7 = v114;
          }
          if (a3 == 225) {
            unsigned int v9 = 5236;
          }
          else {
            unsigned int v9 = 5237;
          }
          BOOL v10 = a3 == 214;
          int v11 = 5234;
          int v12 = 5235;
          goto LABEL_1731;
        }
        if (a3 == 371) {
          unsigned int v7 = 5250;
        }
        else {
          unsigned int v7 = 5251;
        }
        if (a3 == 365) {
          unsigned int v7 = 5249;
        }
        if (a3 == 339) {
          int v156 = 5247;
        }
        else {
          int v156 = 5248;
        }
        if (a3 <= 364) {
          unsigned int v7 = v156;
        }
        if (a3 == 323) {
          unsigned int v9 = 5245;
        }
        else {
          unsigned int v9 = 5246;
        }
        BOOL v87 = a3 == 312;
        int v88 = 5243;
        int v89 = 5244;
      }
      goto LABEL_1918;
    case 60:
      switch(a1)
      {
        case 2u:
          if (a3 <= 311)
          {
            if (a3 == 273) {
              int v169 = 5295;
            }
            else {
              int v169 = 5296;
            }
            if (a3 == 267) {
              unsigned int v7 = 5294;
            }
            else {
              unsigned int v7 = v169;
            }
            if (a3 == 241) {
              int v170 = 5292;
            }
            else {
              int v170 = 5293;
            }
            if (a3 <= 266) {
              unsigned int v7 = v170;
            }
            if (a3 == 225) {
              unsigned int v9 = 5290;
            }
            else {
              unsigned int v9 = 5291;
            }
            BOOL v10 = a3 == 214;
            int v11 = 5288;
            int v12 = 5289;
            goto LABEL_1731;
          }
          if (a3 == 371) {
            unsigned int v7 = 5304;
          }
          else {
            unsigned int v7 = 5305;
          }
          if (a3 == 365) {
            unsigned int v7 = 5303;
          }
          if (a3 == 339) {
            int v185 = 5301;
          }
          else {
            int v185 = 5302;
          }
          if (a3 <= 364) {
            unsigned int v7 = v185;
          }
          if (a3 == 323) {
            unsigned int v9 = 5299;
          }
          else {
            unsigned int v9 = 5300;
          }
          BOOL v87 = a3 == 312;
          int v88 = 5297;
          int v89 = 5298;
          goto LABEL_1918;
        case 3u:
          if (a3 <= 311)
          {
            if (a3 == 273) {
              int v171 = 5277;
            }
            else {
              int v171 = 5278;
            }
            if (a3 == 267) {
              unsigned int v7 = 5276;
            }
            else {
              unsigned int v7 = v171;
            }
            if (a3 == 241) {
              int v172 = 5274;
            }
            else {
              int v172 = 5275;
            }
            if (a3 <= 266) {
              unsigned int v7 = v172;
            }
            if (a3 == 225) {
              unsigned int v9 = 5272;
            }
            else {
              unsigned int v9 = 5273;
            }
            BOOL v10 = a3 == 214;
            int v11 = 5270;
            int v12 = 5271;
            goto LABEL_1731;
          }
          if (a3 == 371) {
            unsigned int v7 = 5286;
          }
          else {
            unsigned int v7 = 5287;
          }
          if (a3 == 365) {
            unsigned int v7 = 5285;
          }
          if (a3 == 339) {
            int v186 = 5283;
          }
          else {
            int v186 = 5284;
          }
          if (a3 <= 364) {
            unsigned int v7 = v186;
          }
          if (a3 == 323) {
            unsigned int v9 = 5281;
          }
          else {
            unsigned int v9 = 5282;
          }
          BOOL v87 = a3 == 312;
          int v88 = 5279;
          int v89 = 5280;
          goto LABEL_1918;
        case 4u:
          if (a3 <= 311)
          {
            if (a3 == 273) {
              int v167 = 5259;
            }
            else {
              int v167 = 5260;
            }
            if (a3 == 267) {
              unsigned int v7 = 5258;
            }
            else {
              unsigned int v7 = v167;
            }
            if (a3 == 241) {
              int v168 = 5256;
            }
            else {
              int v168 = 5257;
            }
            if (a3 <= 266) {
              unsigned int v7 = v168;
            }
            if (a3 == 225) {
              unsigned int v9 = 5254;
            }
            else {
              unsigned int v9 = 5255;
            }
            BOOL v10 = a3 == 214;
            int v11 = 5252;
            int v12 = 5253;
            goto LABEL_1731;
          }
          if (a3 == 371) {
            unsigned int v7 = 5268;
          }
          else {
            unsigned int v7 = 5269;
          }
          if (a3 == 365) {
            unsigned int v7 = 5267;
          }
          if (a3 == 339) {
            int v184 = 5265;
          }
          else {
            int v184 = 5266;
          }
          if (a3 <= 364) {
            unsigned int v7 = v184;
          }
          if (a3 == 323) {
            unsigned int v9 = 5263;
          }
          else {
            unsigned int v9 = 5264;
          }
          BOOL v87 = a3 == 312;
          int v88 = 5261;
          int v89 = 5262;
          goto LABEL_1918;
        default:
          if (a3 <= 311)
          {
            if (a3 == 273) {
              int v44 = 5313;
            }
            else {
              int v44 = 5314;
            }
            if (a3 == 267) {
              unsigned int v7 = 5312;
            }
            else {
              unsigned int v7 = v44;
            }
            if (a3 == 241) {
              int v45 = 5310;
            }
            else {
              int v45 = 5311;
            }
            if (a3 <= 266) {
              unsigned int v7 = v45;
            }
            if (a3 == 225) {
              unsigned int v9 = 5308;
            }
            else {
              unsigned int v9 = 5309;
            }
            BOOL v10 = a3 == 214;
            int v11 = 5306;
            int v12 = 5307;
            goto LABEL_1731;
          }
          if (a3 == 371) {
            unsigned int v7 = 5322;
          }
          else {
            unsigned int v7 = 5323;
          }
          if (a3 == 365) {
            unsigned int v7 = 5321;
          }
          if (a3 == 339) {
            int v173 = 5319;
          }
          else {
            int v173 = 5320;
          }
          if (a3 <= 364) {
            unsigned int v7 = v173;
          }
          if (a3 == 323) {
            unsigned int v9 = 5317;
          }
          else {
            unsigned int v9 = 5318;
          }
          BOOL v87 = a3 == 312;
          int v88 = 5315;
          int v89 = 5316;
          break;
      }
      goto LABEL_1918;
    case 61:
      if (a3 <= 311)
      {
        if (a3 == 273) {
          int v59 = 5331;
        }
        else {
          int v59 = 5332;
        }
        if (a3 == 267) {
          unsigned int v7 = 5330;
        }
        else {
          unsigned int v7 = v59;
        }
        if (a3 == 241) {
          int v60 = 5328;
        }
        else {
          int v60 = 5329;
        }
        if (a3 <= 266) {
          unsigned int v7 = v60;
        }
        if (a3 == 225) {
          unsigned int v9 = 5326;
        }
        else {
          unsigned int v9 = 5327;
        }
        BOOL v10 = a3 == 214;
        int v11 = 5324;
        int v12 = 5325;
        goto LABEL_1731;
      }
      if (a3 == 371) {
        unsigned int v7 = 5340;
      }
      else {
        unsigned int v7 = 5341;
      }
      if (a3 == 365) {
        unsigned int v7 = 5339;
      }
      if (a3 == 339) {
        int v104 = 5337;
      }
      else {
        int v104 = 5338;
      }
      if (a3 <= 364) {
        unsigned int v7 = v104;
      }
      if (a3 == 323) {
        unsigned int v9 = 5335;
      }
      else {
        unsigned int v9 = 5336;
      }
      BOOL v87 = a3 == 312;
      int v88 = 5333;
      int v89 = 5334;
      goto LABEL_1918;
    case 62:
      if (a3 <= 311)
      {
        if (a3 == 273) {
          int v61 = 5349;
        }
        else {
          int v61 = 5350;
        }
        if (a3 == 267) {
          unsigned int v7 = 5348;
        }
        else {
          unsigned int v7 = v61;
        }
        if (a3 == 241) {
          int v62 = 5346;
        }
        else {
          int v62 = 5347;
        }
        if (a3 <= 266) {
          unsigned int v7 = v62;
        }
        if (a3 == 225) {
          unsigned int v9 = 5344;
        }
        else {
          unsigned int v9 = 5345;
        }
        BOOL v10 = a3 == 214;
        int v11 = 5342;
        int v12 = 5343;
        goto LABEL_1731;
      }
      if (a3 == 371) {
        unsigned int v7 = 5358;
      }
      else {
        unsigned int v7 = 5359;
      }
      if (a3 == 365) {
        unsigned int v7 = 5357;
      }
      if (a3 == 339) {
        int v105 = 5355;
      }
      else {
        int v105 = 5356;
      }
      if (a3 <= 364) {
        unsigned int v7 = v105;
      }
      if (a3 == 323) {
        unsigned int v9 = 5353;
      }
      else {
        unsigned int v9 = 5354;
      }
      BOOL v87 = a3 == 312;
      int v88 = 5351;
      int v89 = 5352;
      goto LABEL_1918;
    case 63:
      if (a1 == 2)
      {
        if (a3 <= 311)
        {
          if (a3 == 273) {
            int v46 = 5367;
          }
          else {
            int v46 = 5368;
          }
          if (a3 == 267) {
            unsigned int v7 = 5366;
          }
          else {
            unsigned int v7 = v46;
          }
          if (a3 == 241) {
            int v47 = 5364;
          }
          else {
            int v47 = 5365;
          }
          if (a3 <= 266) {
            unsigned int v7 = v47;
          }
          if (a3 == 225) {
            unsigned int v9 = 5362;
          }
          else {
            unsigned int v9 = 5363;
          }
          BOOL v10 = a3 == 214;
          int v11 = 5360;
          int v12 = 5361;
          goto LABEL_1731;
        }
        if (a3 == 371) {
          unsigned int v7 = 5376;
        }
        else {
          unsigned int v7 = 5377;
        }
        if (a3 == 365) {
          unsigned int v7 = 5375;
        }
        if (a3 == 339) {
          int v135 = 5373;
        }
        else {
          int v135 = 5374;
        }
        if (a3 <= 364) {
          unsigned int v7 = v135;
        }
        if (a3 == 323) {
          unsigned int v9 = 5371;
        }
        else {
          unsigned int v9 = 5372;
        }
        BOOL v87 = a3 == 312;
        int v88 = 5369;
        int v89 = 5370;
      }
      else
      {
        if (a3 <= 311)
        {
          if (a3 == 273) {
            int v100 = 5385;
          }
          else {
            int v100 = 5386;
          }
          if (a3 == 267) {
            unsigned int v7 = 5384;
          }
          else {
            unsigned int v7 = v100;
          }
          if (a3 == 241) {
            int v101 = 5382;
          }
          else {
            int v101 = 5383;
          }
          if (a3 <= 266) {
            unsigned int v7 = v101;
          }
          if (a3 == 225) {
            unsigned int v9 = 5380;
          }
          else {
            unsigned int v9 = 5381;
          }
          BOOL v10 = a3 == 214;
          int v11 = 5378;
          int v12 = 5379;
          goto LABEL_1731;
        }
        if (a3 == 371) {
          unsigned int v7 = 5394;
        }
        else {
          unsigned int v7 = 5395;
        }
        if (a3 == 365) {
          unsigned int v7 = 5393;
        }
        if (a3 == 339) {
          int v142 = 5391;
        }
        else {
          int v142 = 5392;
        }
        if (a3 <= 364) {
          unsigned int v7 = v142;
        }
        if (a3 == 323) {
          unsigned int v9 = 5389;
        }
        else {
          unsigned int v9 = 5390;
        }
        BOOL v87 = a3 == 312;
        int v88 = 5387;
        int v89 = 5388;
      }
      goto LABEL_1918;
    case 64:
      if (a1 == 4)
      {
        if (a3 <= 311)
        {
          if (a3 == 273) {
            int v48 = 5883;
          }
          else {
            int v48 = 5884;
          }
          if (a3 == 267) {
            unsigned int v7 = 5882;
          }
          else {
            unsigned int v7 = v48;
          }
          if (a3 == 241) {
            int v49 = 5880;
          }
          else {
            int v49 = 5881;
          }
          if (a3 <= 266) {
            unsigned int v7 = v49;
          }
          if (a3 == 225) {
            unsigned int v9 = 5878;
          }
          else {
            unsigned int v9 = 5879;
          }
          BOOL v10 = a3 == 214;
          int v11 = 5876;
          int v12 = 5877;
          goto LABEL_1731;
        }
        if (a3 == 371) {
          unsigned int v7 = 5892;
        }
        else {
          unsigned int v7 = 5893;
        }
        if (a3 == 365) {
          unsigned int v7 = 5891;
        }
        if (a3 == 339) {
          int v136 = 5889;
        }
        else {
          int v136 = 5890;
        }
        if (a3 <= 364) {
          unsigned int v7 = v136;
        }
        if (a3 == 323) {
          unsigned int v9 = 5887;
        }
        else {
          unsigned int v9 = 5888;
        }
        BOOL v87 = a3 == 312;
        int v88 = 5885;
        int v89 = 5886;
      }
      else
      {
        if (a3 <= 311)
        {
          if (a3 == 273) {
            int v102 = 5901;
          }
          else {
            int v102 = 5902;
          }
          if (a3 == 267) {
            unsigned int v7 = 5900;
          }
          else {
            unsigned int v7 = v102;
          }
          if (a3 == 241) {
            int v103 = 5898;
          }
          else {
            int v103 = 5899;
          }
          if (a3 <= 266) {
            unsigned int v7 = v103;
          }
          if (a3 == 225) {
            unsigned int v9 = 5896;
          }
          else {
            unsigned int v9 = 5897;
          }
          BOOL v10 = a3 == 214;
          int v11 = 5894;
          int v12 = 5895;
          goto LABEL_1731;
        }
        if (a3 == 371) {
          unsigned int v7 = 5910;
        }
        else {
          unsigned int v7 = 5911;
        }
        if (a3 == 365) {
          unsigned int v7 = 5909;
        }
        if (a3 == 339) {
          int v143 = 5907;
        }
        else {
          int v143 = 5908;
        }
        if (a3 <= 364) {
          unsigned int v7 = v143;
        }
        if (a3 == 323) {
          unsigned int v9 = 5905;
        }
        else {
          unsigned int v9 = 5906;
        }
        BOOL v87 = a3 == 312;
        int v88 = 5903;
        int v89 = 5904;
      }
      goto LABEL_1918;
    case 65:
      switch(a1)
      {
        case 2u:
          if (a3 <= 311)
          {
            if (a3 == 273) {
              int v174 = 5955;
            }
            else {
              int v174 = 5956;
            }
            if (a3 == 267) {
              unsigned int v7 = 5954;
            }
            else {
              unsigned int v7 = v174;
            }
            if (a3 == 241) {
              int v175 = 5952;
            }
            else {
              int v175 = 5953;
            }
            if (a3 <= 266) {
              unsigned int v7 = v175;
            }
            if (a3 == 225) {
              unsigned int v9 = 5950;
            }
            else {
              unsigned int v9 = 5951;
            }
            BOOL v10 = a3 == 214;
            int v11 = 5948;
            int v12 = 5949;
            goto LABEL_1731;
          }
          if (a3 == 371) {
            unsigned int v7 = 5964;
          }
          else {
            unsigned int v7 = 5965;
          }
          if (a3 == 365) {
            unsigned int v7 = 5963;
          }
          if (a3 == 339) {
            int v187 = 5961;
          }
          else {
            int v187 = 5962;
          }
          if (a3 <= 364) {
            unsigned int v7 = v187;
          }
          if (a3 == 323) {
            unsigned int v9 = 5959;
          }
          else {
            unsigned int v9 = 5960;
          }
          BOOL v87 = a3 == 312;
          int v88 = 5957;
          int v89 = 5958;
          goto LABEL_1918;
        case 3u:
          if (a3 <= 311)
          {
            if (a3 == 273) {
              int v176 = 5937;
            }
            else {
              int v176 = 5938;
            }
            if (a3 == 267) {
              unsigned int v7 = 5936;
            }
            else {
              unsigned int v7 = v176;
            }
            if (a3 == 241) {
              int v177 = 5934;
            }
            else {
              int v177 = 5935;
            }
            if (a3 <= 266) {
              unsigned int v7 = v177;
            }
            if (a3 == 225) {
              unsigned int v9 = 5932;
            }
            else {
              unsigned int v9 = 5933;
            }
            BOOL v10 = a3 == 214;
            int v11 = 5930;
            int v12 = 5931;
            goto LABEL_1731;
          }
          if (a3 == 371) {
            unsigned int v7 = 5946;
          }
          else {
            unsigned int v7 = 5947;
          }
          if (a3 == 365) {
            unsigned int v7 = 5945;
          }
          if (a3 == 339) {
            int v188 = 5943;
          }
          else {
            int v188 = 5944;
          }
          if (a3 <= 364) {
            unsigned int v7 = v188;
          }
          if (a3 == 323) {
            unsigned int v9 = 5941;
          }
          else {
            unsigned int v9 = 5942;
          }
          BOOL v87 = a3 == 312;
          int v88 = 5939;
          int v89 = 5940;
          goto LABEL_1918;
        case 4u:
          if (a3 <= 311)
          {
            if (a3 == 273) {
              int v178 = 5919;
            }
            else {
              int v178 = 5920;
            }
            if (a3 == 267) {
              unsigned int v7 = 5918;
            }
            else {
              unsigned int v7 = v178;
            }
            if (a3 == 241) {
              int v179 = 5916;
            }
            else {
              int v179 = 5917;
            }
            if (a3 <= 266) {
              unsigned int v7 = v179;
            }
            if (a3 == 225) {
              unsigned int v9 = 5914;
            }
            else {
              unsigned int v9 = 5915;
            }
            BOOL v10 = a3 == 214;
            int v11 = 5912;
            int v12 = 5913;
            goto LABEL_1731;
          }
          if (a3 == 371) {
            unsigned int v7 = 5928;
          }
          else {
            unsigned int v7 = 5929;
          }
          if (a3 == 365) {
            unsigned int v7 = 5927;
          }
          if (a3 == 339) {
            int v189 = 5925;
          }
          else {
            int v189 = 5926;
          }
          if (a3 <= 364) {
            unsigned int v7 = v189;
          }
          if (a3 == 323) {
            unsigned int v9 = 5923;
          }
          else {
            unsigned int v9 = 5924;
          }
          BOOL v87 = a3 == 312;
          int v88 = 5921;
          int v89 = 5922;
          goto LABEL_1918;
        default:
          if (a3 <= 311)
          {
            if (a3 == 273) {
              int v63 = 5973;
            }
            else {
              int v63 = 5974;
            }
            if (a3 == 267) {
              unsigned int v7 = 5972;
            }
            else {
              unsigned int v7 = v63;
            }
            if (a3 == 241) {
              int v64 = 5970;
            }
            else {
              int v64 = 5971;
            }
            if (a3 <= 266) {
              unsigned int v7 = v64;
            }
            if (a3 == 225) {
              unsigned int v9 = 5968;
            }
            else {
              unsigned int v9 = 5969;
            }
            BOOL v10 = a3 == 214;
            int v11 = 5966;
            int v12 = 5967;
            goto LABEL_1731;
          }
          if (a3 == 371) {
            unsigned int v7 = 5982;
          }
          else {
            unsigned int v7 = 5983;
          }
          if (a3 == 365) {
            unsigned int v7 = 5981;
          }
          if (a3 == 339) {
            int v180 = 5979;
          }
          else {
            int v180 = 5980;
          }
          if (a3 <= 364) {
            unsigned int v7 = v180;
          }
          if (a3 == 323) {
            unsigned int v9 = 5977;
          }
          else {
            unsigned int v9 = 5978;
          }
          BOOL v87 = a3 == 312;
          int v88 = 5975;
          int v89 = 5976;
          break;
      }
      goto LABEL_1918;
    case 66:
      switch(a1)
      {
        case 2u:
          if (a3 <= 311)
          {
            if (a3 == 273) {
              int v160 = 6027;
            }
            else {
              int v160 = 6028;
            }
            if (a3 == 267) {
              unsigned int v7 = 6026;
            }
            else {
              unsigned int v7 = v160;
            }
            if (a3 == 241) {
              int v161 = 6024;
            }
            else {
              int v161 = 6025;
            }
            if (a3 <= 266) {
              unsigned int v7 = v161;
            }
            if (a3 == 225) {
              unsigned int v9 = 6022;
            }
            else {
              unsigned int v9 = 6023;
            }
            BOOL v10 = a3 == 214;
            int v11 = 6020;
            int v12 = 6021;
            goto LABEL_1731;
          }
          if (a3 == 371) {
            unsigned int v7 = 6036;
          }
          else {
            unsigned int v7 = 6037;
          }
          if (a3 == 365) {
            unsigned int v7 = 6035;
          }
          if (a3 == 339) {
            int v181 = 6033;
          }
          else {
            int v181 = 6034;
          }
          if (a3 <= 364) {
            unsigned int v7 = v181;
          }
          if (a3 == 323) {
            unsigned int v9 = 6031;
          }
          else {
            unsigned int v9 = 6032;
          }
          BOOL v87 = a3 == 312;
          int v88 = 6029;
          int v89 = 6030;
          goto LABEL_1918;
        case 3u:
          if (a3 <= 311)
          {
            if (a3 == 273) {
              int v162 = 6009;
            }
            else {
              int v162 = 6010;
            }
            if (a3 == 267) {
              unsigned int v7 = 6008;
            }
            else {
              unsigned int v7 = v162;
            }
            if (a3 == 241) {
              int v163 = 6006;
            }
            else {
              int v163 = 6007;
            }
            if (a3 <= 266) {
              unsigned int v7 = v163;
            }
            if (a3 == 225) {
              unsigned int v9 = 6004;
            }
            else {
              unsigned int v9 = 6005;
            }
            BOOL v10 = a3 == 214;
            int v11 = 6002;
            int v12 = 6003;
            goto LABEL_1731;
          }
          if (a3 == 371) {
            unsigned int v7 = 6018;
          }
          else {
            unsigned int v7 = 6019;
          }
          if (a3 == 365) {
            unsigned int v7 = 6017;
          }
          if (a3 == 339) {
            int v182 = 6015;
          }
          else {
            int v182 = 6016;
          }
          if (a3 <= 364) {
            unsigned int v7 = v182;
          }
          if (a3 == 323) {
            unsigned int v9 = 6013;
          }
          else {
            unsigned int v9 = 6014;
          }
          BOOL v87 = a3 == 312;
          int v88 = 6011;
          int v89 = 6012;
          goto LABEL_1918;
        case 4u:
          if (a3 <= 311)
          {
            if (a3 == 273) {
              int v164 = 5991;
            }
            else {
              int v164 = 5992;
            }
            if (a3 == 267) {
              unsigned int v7 = 5990;
            }
            else {
              unsigned int v7 = v164;
            }
            if (a3 == 241) {
              int v165 = 5988;
            }
            else {
              int v165 = 5989;
            }
            if (a3 <= 266) {
              unsigned int v7 = v165;
            }
            if (a3 == 225) {
              unsigned int v9 = 5986;
            }
            else {
              unsigned int v9 = 5987;
            }
            BOOL v10 = a3 == 214;
            int v11 = 5984;
            int v12 = 5985;
            goto LABEL_1731;
          }
          if (a3 == 371) {
            unsigned int v7 = 6000;
          }
          else {
            unsigned int v7 = 6001;
          }
          if (a3 == 365) {
            unsigned int v7 = 5999;
          }
          if (a3 == 339) {
            int v183 = 5997;
          }
          else {
            int v183 = 5998;
          }
          if (a3 <= 364) {
            unsigned int v7 = v183;
          }
          if (a3 == 323) {
            unsigned int v9 = 5995;
          }
          else {
            unsigned int v9 = 5996;
          }
          BOOL v87 = a3 == 312;
          int v88 = 5993;
          int v89 = 5994;
          goto LABEL_1918;
        default:
          if (a3 <= 311)
          {
            if (a3 == 273) {
              int v24 = 6045;
            }
            else {
              int v24 = 6046;
            }
            if (a3 == 267) {
              unsigned int v7 = 6044;
            }
            else {
              unsigned int v7 = v24;
            }
            if (a3 == 241) {
              int v25 = 6042;
            }
            else {
              int v25 = 6043;
            }
            if (a3 <= 266) {
              unsigned int v7 = v25;
            }
            if (a3 == 225) {
              unsigned int v9 = 6040;
            }
            else {
              unsigned int v9 = 6041;
            }
            BOOL v10 = a3 == 214;
            int v11 = 6038;
            int v12 = 6039;
            goto LABEL_1731;
          }
          if (a3 == 371) {
            unsigned int v7 = 6054;
          }
          else {
            unsigned int v7 = 6055;
          }
          if (a3 == 365) {
            unsigned int v7 = 6053;
          }
          if (a3 == 339) {
            int v166 = 6051;
          }
          else {
            int v166 = 6052;
          }
          if (a3 <= 364) {
            unsigned int v7 = v166;
          }
          if (a3 == 323) {
            unsigned int v9 = 6049;
          }
          else {
            unsigned int v9 = 6050;
          }
          BOOL v87 = a3 == 312;
          int v88 = 6047;
          int v89 = 6048;
          break;
      }
      goto LABEL_1918;
    case 67:
      if (a1 == 4)
      {
        if (a3 <= 312)
        {
          switch(a3)
          {
            case 215:
              return 6164;
            case 216:
            case 219:
            case 220:
            case 222:
            case 225:
            case 227:
            case 230:
            case 231:
            case 232:
            case 233:
            case 234:
            case 235:
            case 237:
            case 240:
            case 241:
            case 243:
            case 245:
            case 247:
            case 248:
            case 249:
            case 250:
            case 252:
            case 254:
              goto LABEL_4367;
            case 217:
              return 6165;
            case 218:
              return 6166;
            case 221:
              return 6167;
            case 223:
              return 6168;
            case 224:
              return 6169;
            case 226:
              return 6170;
            case 228:
              return 6171;
            case 229:
              return 6172;
            case 236:
              return 6173;
            case 238:
              return 6174;
            case 239:
              return 6175;
            case 242:
              return 6176;
            case 244:
              return 6177;
            case 246:
              return 6178;
            case 251:
              return 6179;
            case 253:
              return 6180;
            case 255:
              return 6181;
            default:
              switch(a3)
              {
                case 269:
                case 272:
                case 273:
                case 275:
                case 277:
                case 279:
                case 280:
                case 281:
                case 282:
                case 284:
                case 286:
                  goto LABEL_4367;
                case 270:
                  return 6183;
                case 271:
                  return 6184;
                case 274:
                  return 6185;
                case 276:
                  return 6186;
                case 278:
                  return 6187;
                case 283:
                  return 6188;
                case 285:
                  return 6189;
                case 287:
                  return 6190;
                default:
                  return 6182;
              }
          }
        }
        switch(a3)
        {
          case 313:
            return 6191;
          case 314:
          case 317:
          case 318:
          case 320:
          case 323:
          case 325:
          case 328:
          case 329:
          case 330:
          case 331:
          case 332:
          case 333:
          case 335:
          case 338:
          case 339:
          case 341:
          case 343:
          case 345:
          case 346:
          case 347:
          case 348:
          case 350:
          case 352:
            goto LABEL_4367;
          case 315:
            return 6192;
          case 316:
            return 6193;
          case 319:
            return 6194;
          case 321:
            return 6195;
          case 322:
            return 6196;
          case 324:
            return 6197;
          case 326:
            return 6198;
          case 327:
            return 6199;
          case 334:
            return 6200;
          case 336:
            return 6201;
          case 337:
            return 6202;
          case 340:
            return 6203;
          case 342:
            return 6204;
          case 344:
            return 6205;
          case 349:
            return 6206;
          case 351:
            return 6207;
          case 353:
            return 6208;
          default:
            uint64_t result = 6217;
            switch(a3)
            {
              case 367:
              case 370:
              case 371:
              case 373:
              case 375:
              case 377:
              case 378:
              case 379:
              case 380:
              case 382:
              case 384:
                goto LABEL_4367;
              case 368:
                return 6210;
              case 369:
                return 6211;
              case 372:
                return 6212;
              case 374:
                return 6213;
              case 376:
                return 6214;
              case 381:
                return 6215;
              case 383:
                return 6216;
              case 385:
                return result;
              default:
                return 6209;
            }
        }
      }
      if (a3 <= 312)
      {
        switch(a3)
        {
          case 215:
            return 6218;
          case 216:
          case 219:
          case 220:
          case 222:
          case 225:
          case 227:
          case 230:
          case 231:
          case 232:
          case 233:
          case 234:
          case 235:
          case 237:
          case 240:
          case 241:
          case 243:
          case 245:
          case 247:
          case 248:
          case 249:
          case 250:
          case 252:
          case 254:
            goto LABEL_4367;
          case 217:
            return 6219;
          case 218:
            return 6220;
          case 221:
            return 6221;
          case 223:
            return 6222;
          case 224:
            return 6223;
          case 226:
            return 6224;
          case 228:
            return 6225;
          case 229:
            return 6226;
          case 236:
            return 6227;
          case 238:
            return 6228;
          case 239:
            return 6229;
          case 242:
            return 6230;
          case 244:
            return 6231;
          case 246:
            return 6232;
          case 251:
            return 6233;
          case 253:
            return 6234;
          case 255:
            return 6235;
          default:
            switch(a3)
            {
              case 269:
              case 272:
              case 273:
              case 275:
              case 277:
              case 279:
              case 280:
              case 281:
              case 282:
              case 284:
              case 286:
                goto LABEL_4367;
              case 270:
                return 6237;
              case 271:
                return 6238;
              case 274:
                return 6239;
              case 276:
                return 6240;
              case 278:
                return 6241;
              case 283:
                return 6242;
              case 285:
                return 6243;
              case 287:
                return 6244;
              default:
                return 6236;
            }
        }
      }
      switch(a3)
      {
        case 313:
          return 6245;
        case 314:
        case 317:
        case 318:
        case 320:
        case 323:
        case 325:
        case 328:
        case 329:
        case 330:
        case 331:
        case 332:
        case 333:
        case 335:
        case 338:
        case 339:
        case 341:
        case 343:
        case 345:
        case 346:
        case 347:
        case 348:
        case 350:
        case 352:
          goto LABEL_4367;
        case 315:
          return 6246;
        case 316:
          return 6247;
        case 319:
          return 6248;
        case 321:
          return 6249;
        case 322:
          return 6250;
        case 324:
          return 6251;
        case 326:
          return 6252;
        case 327:
          return 6253;
        case 334:
          return 6254;
        case 336:
          return 6255;
        case 337:
          return 6256;
        case 340:
          return 6257;
        case 342:
          return 6258;
        case 344:
          return 6259;
        case 349:
          return 6260;
        case 351:
          return 6261;
        case 353:
          return 6262;
        default:
          uint64_t result = 6271;
          switch(a3)
          {
            case 367:
            case 370:
            case 371:
            case 373:
            case 375:
            case 377:
            case 378:
            case 379:
            case 380:
            case 382:
            case 384:
              goto LABEL_4367;
            case 368:
              return 6264;
            case 369:
              return 6265;
            case 372:
              return 6266;
            case 374:
              return 6267;
            case 376:
              return 6268;
            case 381:
              return 6269;
            case 383:
              return 6270;
            case 385:
              return result;
            default:
              return 6263;
          }
      }
    case 68:
      if (a1 == 4)
      {
        if (a3 <= 312)
        {
          switch(a3)
          {
            case 215:
              return 6056;
            case 216:
            case 219:
            case 220:
            case 222:
            case 225:
            case 227:
            case 230:
            case 231:
            case 232:
            case 233:
            case 234:
            case 235:
            case 237:
            case 240:
            case 241:
            case 243:
            case 245:
            case 247:
            case 248:
            case 249:
            case 250:
            case 252:
            case 254:
              goto LABEL_4367;
            case 217:
              return 6057;
            case 218:
              return 6058;
            case 221:
              return 6059;
            case 223:
              return 6060;
            case 224:
              return 6061;
            case 226:
              return 6062;
            case 228:
              return 6063;
            case 229:
              return 6064;
            case 236:
              return 6065;
            case 238:
              return 6066;
            case 239:
              return 6067;
            case 242:
              return 6068;
            case 244:
              return 6069;
            case 246:
              return 6070;
            case 251:
              return 6071;
            case 253:
              return 6072;
            case 255:
              return 6073;
            default:
              switch(a3)
              {
                case 269:
                case 272:
                case 273:
                case 275:
                case 277:
                case 279:
                case 280:
                case 281:
                case 282:
                case 284:
                case 286:
                  goto LABEL_4367;
                case 270:
                  return 6075;
                case 271:
                  return 6076;
                case 274:
                  return 6077;
                case 276:
                  return 6078;
                case 278:
                  return 6079;
                case 283:
                  return 6080;
                case 285:
                  return 6081;
                case 287:
                  return 6082;
                default:
                  return 6074;
              }
          }
        }
        switch(a3)
        {
          case 313:
            return 6083;
          case 314:
          case 317:
          case 318:
          case 320:
          case 323:
          case 325:
          case 328:
          case 329:
          case 330:
          case 331:
          case 332:
          case 333:
          case 335:
          case 338:
          case 339:
          case 341:
          case 343:
          case 345:
          case 346:
          case 347:
          case 348:
          case 350:
          case 352:
            goto LABEL_4367;
          case 315:
            return 6084;
          case 316:
            return 6085;
          case 319:
            return 6086;
          case 321:
            return 6087;
          case 322:
            return 6088;
          case 324:
            return 6089;
          case 326:
            return 6090;
          case 327:
            return 6091;
          case 334:
            return 6092;
          case 336:
            return 6093;
          case 337:
            return 6094;
          case 340:
            return 6095;
          case 342:
            return 6096;
          case 344:
            return 6097;
          case 349:
            return 6098;
          case 351:
            return 6099;
          case 353:
            return 6100;
          default:
            uint64_t result = 6109;
            switch(a3)
            {
              case 367:
              case 370:
              case 371:
              case 373:
              case 375:
              case 377:
              case 378:
              case 379:
              case 380:
              case 382:
              case 384:
                goto LABEL_4367;
              case 368:
                return 6102;
              case 369:
                return 6103;
              case 372:
                return 6104;
              case 374:
                return 6105;
              case 376:
                return 6106;
              case 381:
                return 6107;
              case 383:
                return 6108;
              case 385:
                return result;
              default:
                return 6101;
            }
        }
      }
      if (a3 <= 312)
      {
        switch(a3)
        {
          case 215:
            return 6110;
          case 216:
          case 219:
          case 220:
          case 222:
          case 225:
          case 227:
          case 230:
          case 231:
          case 232:
          case 233:
          case 234:
          case 235:
          case 237:
          case 240:
          case 241:
          case 243:
          case 245:
          case 247:
          case 248:
          case 249:
          case 250:
          case 252:
          case 254:
            goto LABEL_4367;
          case 217:
            return 6111;
          case 218:
            return 6112;
          case 221:
            return 6113;
          case 223:
            return 6114;
          case 224:
            return 6115;
          case 226:
            return 6116;
          case 228:
            return 6117;
          case 229:
            return 6118;
          case 236:
            return 6119;
          case 238:
            return 6120;
          case 239:
            return 6121;
          case 242:
            return 6122;
          case 244:
            return 6123;
          case 246:
            return 6124;
          case 251:
            return 6125;
          case 253:
            return 6126;
          case 255:
            return 6127;
          default:
            switch(a3)
            {
              case 269:
              case 272:
              case 273:
              case 275:
              case 277:
              case 279:
              case 280:
              case 281:
              case 282:
              case 284:
              case 286:
                goto LABEL_4367;
              case 270:
                return 6129;
              case 271:
                return 6130;
              case 274:
                return 6131;
              case 276:
                return 6132;
              case 278:
                return 6133;
              case 283:
                return 6134;
              case 285:
                return 6135;
              case 287:
                return 6136;
              default:
                return 6128;
            }
        }
      }
      switch(a3)
      {
        case 313:
          return 6137;
        case 314:
        case 317:
        case 318:
        case 320:
        case 323:
        case 325:
        case 328:
        case 329:
        case 330:
        case 331:
        case 332:
        case 333:
        case 335:
        case 338:
        case 339:
        case 341:
        case 343:
        case 345:
        case 346:
        case 347:
        case 348:
        case 350:
        case 352:
          goto LABEL_4367;
        case 315:
          return 6138;
        case 316:
          return 6139;
        case 319:
          return 6140;
        case 321:
          return 6141;
        case 322:
          return 6142;
        case 324:
          return 6143;
        case 326:
          return 6144;
        case 327:
          return 6145;
        case 334:
          return 6146;
        case 336:
          return 6147;
        case 337:
          return 6148;
        case 340:
          return 6149;
        case 342:
          return 6150;
        case 344:
          return 6151;
        case 349:
          return 6152;
        case 351:
          return 6153;
        case 353:
          return 6154;
        default:
          uint64_t result = 6163;
          switch(a3)
          {
            case 367:
            case 370:
            case 371:
            case 373:
            case 375:
            case 377:
            case 378:
            case 379:
            case 380:
            case 382:
            case 384:
              goto LABEL_4367;
            case 368:
              return 6156;
            case 369:
              return 6157;
            case 372:
              return 6158;
            case 374:
              return 6159;
            case 376:
              return 6160;
            case 381:
              return 6161;
            case 383:
              return 6162;
            case 385:
              return result;
            default:
              return 6155;
          }
      }
    case 69:
      if (a1 == 4)
      {
        if (a3 <= 311)
        {
          if (a3 == 273) {
            int v26 = 7803;
          }
          else {
            int v26 = 7804;
          }
          if (a3 == 267) {
            unsigned int v7 = 7802;
          }
          else {
            unsigned int v7 = v26;
          }
          if (a3 == 241) {
            int v27 = 7800;
          }
          else {
            int v27 = 7801;
          }
          if (a3 <= 266) {
            unsigned int v7 = v27;
          }
          if (a3 == 225) {
            unsigned int v9 = 7798;
          }
          else {
            unsigned int v9 = 7799;
          }
          BOOL v10 = a3 == 214;
          int v11 = 7796;
          int v12 = 7797;
          goto LABEL_1731;
        }
        if (a3 == 371) {
          unsigned int v7 = 7812;
        }
        else {
          unsigned int v7 = 7813;
        }
        if (a3 == 365) {
          unsigned int v7 = 7811;
        }
        if (a3 == 339) {
          int v124 = 7809;
        }
        else {
          int v124 = 7810;
        }
        if (a3 <= 364) {
          unsigned int v7 = v124;
        }
        if (a3 == 323) {
          unsigned int v9 = 7807;
        }
        else {
          unsigned int v9 = 7808;
        }
        BOOL v87 = a3 == 312;
        int v88 = 7805;
        int v89 = 7806;
      }
      else
      {
        if (a3 <= 311)
        {
          if (a3 == 273) {
            int v92 = 7821;
          }
          else {
            int v92 = 7822;
          }
          if (a3 == 267) {
            unsigned int v7 = 7820;
          }
          else {
            unsigned int v7 = v92;
          }
          if (a3 == 241) {
            int v93 = 7818;
          }
          else {
            int v93 = 7819;
          }
          if (a3 <= 266) {
            unsigned int v7 = v93;
          }
          if (a3 == 225) {
            unsigned int v9 = 7816;
          }
          else {
            unsigned int v9 = 7817;
          }
          BOOL v10 = a3 == 214;
          int v11 = 7814;
          int v12 = 7815;
          goto LABEL_1731;
        }
        if (a3 == 371) {
          unsigned int v7 = 7830;
        }
        else {
          unsigned int v7 = 7831;
        }
        if (a3 == 365) {
          unsigned int v7 = 7829;
        }
        if (a3 == 339) {
          int v126 = 7827;
        }
        else {
          int v126 = 7828;
        }
        if (a3 <= 364) {
          unsigned int v7 = v126;
        }
        if (a3 == 323) {
          unsigned int v9 = 7825;
        }
        else {
          unsigned int v9 = 7826;
        }
        BOOL v87 = a3 == 312;
        int v88 = 7823;
        int v89 = 7824;
      }
      goto LABEL_1918;
    case 70:
      if (a1 == 4)
      {
        if (a3 <= 311)
        {
          if (a3 == 273) {
            int v6 = 7767;
          }
          else {
            int v6 = 7768;
          }
          if (a3 == 267) {
            unsigned int v7 = 7766;
          }
          else {
            unsigned int v7 = v6;
          }
          if (a3 == 241) {
            int v8 = 7764;
          }
          else {
            int v8 = 7765;
          }
          if (a3 <= 266) {
            unsigned int v7 = v8;
          }
          if (a3 == 225) {
            unsigned int v9 = 7762;
          }
          else {
            unsigned int v9 = 7763;
          }
          BOOL v10 = a3 == 214;
          int v11 = 7760;
          int v12 = 7761;
LABEL_1731:
          if (!v10) {
            int v11 = v12;
          }
          if (a3 <= 224) {
            unsigned int v9 = v11;
          }
          BOOL v39 = a3 <= 240;
          goto LABEL_1923;
        }
        if (a3 == 371) {
          unsigned int v7 = 7776;
        }
        else {
          unsigned int v7 = 7777;
        }
        if (a3 == 365) {
          unsigned int v7 = 7775;
        }
        if (a3 == 339) {
          int v121 = 7773;
        }
        else {
          int v121 = 7774;
        }
        if (a3 <= 364) {
          unsigned int v7 = v121;
        }
        if (a3 == 323) {
          unsigned int v9 = 7771;
        }
        else {
          unsigned int v9 = 7772;
        }
        BOOL v87 = a3 == 312;
        int v88 = 7769;
        int v89 = 7770;
      }
      else
      {
        if (a3 <= 311)
        {
          if (a3 == 273) {
            int v83 = 7785;
          }
          else {
            int v83 = 7786;
          }
          if (a3 == 267) {
            unsigned int v7 = 7784;
          }
          else {
            unsigned int v7 = v83;
          }
          if (a3 == 241) {
            int v84 = 7782;
          }
          else {
            int v84 = 7783;
          }
          if (a3 <= 266) {
            unsigned int v7 = v84;
          }
          if (a3 == 225) {
            unsigned int v9 = 7780;
          }
          else {
            unsigned int v9 = 7781;
          }
          BOOL v10 = a3 == 214;
          int v11 = 7778;
          int v12 = 7779;
          goto LABEL_1731;
        }
        if (a3 == 371) {
          unsigned int v7 = 7794;
        }
        else {
          unsigned int v7 = 7795;
        }
        if (a3 == 365) {
          unsigned int v7 = 7793;
        }
        if (a3 == 339) {
          int v122 = 7791;
        }
        else {
          int v122 = 7792;
        }
        if (a3 <= 364) {
          unsigned int v7 = v122;
        }
        if (a3 == 323) {
          unsigned int v9 = 7789;
        }
        else {
          unsigned int v9 = 7790;
        }
        BOOL v87 = a3 == 312;
        int v88 = 7787;
        int v89 = 7788;
      }
LABEL_1918:
      if (!v87) {
        int v88 = v89;
      }
      if (a3 <= 322) {
        unsigned int v9 = v88;
      }
      BOOL v39 = a3 <= 338;
LABEL_1923:
      if (v39) {
        return v9;
      }
      else {
        return v7;
      }
    case 71:
      if (a1 == 4)
      {
        if (a3 <= 312)
        {
          switch(a3)
          {
            case 215:
              return 8060;
            case 216:
            case 219:
            case 220:
            case 222:
            case 225:
            case 227:
            case 230:
            case 231:
            case 232:
            case 233:
            case 234:
            case 235:
            case 237:
            case 240:
            case 241:
            case 243:
            case 245:
            case 247:
            case 248:
            case 249:
            case 250:
            case 252:
            case 254:
              goto LABEL_4367;
            case 217:
              return 8061;
            case 218:
              return 8062;
            case 221:
              return 8063;
            case 223:
              return 8064;
            case 224:
              return 8065;
            case 226:
              return 8066;
            case 228:
              return 8067;
            case 229:
              return 8068;
            case 236:
              return 8069;
            case 238:
              return 8070;
            case 239:
              return 8071;
            case 242:
              return 8072;
            case 244:
              return 8073;
            case 246:
              return 8074;
            case 251:
              return 8075;
            case 253:
              return 8076;
            case 255:
              return 8077;
            default:
              switch(a3)
              {
                case 269:
                case 272:
                case 273:
                case 275:
                case 277:
                case 279:
                case 280:
                case 281:
                case 282:
                case 284:
                case 286:
                  goto LABEL_4367;
                case 270:
                  return 8079;
                case 271:
                  return 8080;
                case 274:
                  return 8081;
                case 276:
                  return 8082;
                case 278:
                  return 8083;
                case 283:
                  return 8084;
                case 285:
                  return 8085;
                case 287:
                  return 8086;
                default:
                  return 8078;
              }
          }
        }
        switch(a3)
        {
          case 313:
            return 8087;
          case 314:
          case 317:
          case 318:
          case 320:
          case 323:
          case 325:
          case 328:
          case 329:
          case 330:
          case 331:
          case 332:
          case 333:
          case 335:
          case 338:
          case 339:
          case 341:
          case 343:
          case 345:
          case 346:
          case 347:
          case 348:
          case 350:
          case 352:
            goto LABEL_4367;
          case 315:
            return 8088;
          case 316:
            return 8089;
          case 319:
            return 8090;
          case 321:
            return 8091;
          case 322:
            return 8092;
          case 324:
            return 8093;
          case 326:
            return 8094;
          case 327:
            return 8095;
          case 334:
            return 8096;
          case 336:
            return 8097;
          case 337:
            return 8098;
          case 340:
            return 8099;
          case 342:
            return 8100;
          case 344:
            return 8101;
          case 349:
            return 8102;
          case 351:
            return 8103;
          case 353:
            return 8104;
          default:
            uint64_t result = 8113;
            switch(a3)
            {
              case 367:
              case 370:
              case 371:
              case 373:
              case 375:
              case 377:
              case 378:
              case 379:
              case 380:
              case 382:
              case 384:
                goto LABEL_4367;
              case 368:
                return 8106;
              case 369:
                return 8107;
              case 372:
                return 8108;
              case 374:
                return 8109;
              case 376:
                return 8110;
              case 381:
                return 8111;
              case 383:
                return 8112;
              case 385:
                return result;
              default:
                return 8105;
            }
        }
      }
      if (a3 <= 312)
      {
        switch(a3)
        {
          case 215:
            return 8114;
          case 216:
          case 219:
          case 220:
          case 222:
          case 225:
          case 227:
          case 230:
          case 231:
          case 232:
          case 233:
          case 234:
          case 235:
          case 237:
          case 240:
          case 241:
          case 243:
          case 245:
          case 247:
          case 248:
          case 249:
          case 250:
          case 252:
          case 254:
            goto LABEL_4367;
          case 217:
            return 8115;
          case 218:
            return 8116;
          case 221:
            return 8117;
          case 223:
            return 8118;
          case 224:
            return 8119;
          case 226:
            return 8120;
          case 228:
            return 8121;
          case 229:
            return 8122;
          case 236:
            return 8123;
          case 238:
            return 8124;
          case 239:
            return 8125;
          case 242:
            return 8126;
          case 244:
            return 8127;
          case 246:
            return 8128;
          case 251:
            return 8129;
          case 253:
            return 8130;
          case 255:
            return 8131;
          default:
            switch(a3)
            {
              case 269:
              case 272:
              case 273:
              case 275:
              case 277:
              case 279:
              case 280:
              case 281:
              case 282:
              case 284:
              case 286:
                goto LABEL_4367;
              case 270:
                return 8133;
              case 271:
                return 8134;
              case 274:
                return 8135;
              case 276:
                return 8136;
              case 278:
                return 8137;
              case 283:
                return 8138;
              case 285:
                return 8139;
              case 287:
                return 8140;
              default:
                return 8132;
            }
        }
      }
      switch(a3)
      {
        case 313:
          return 8141;
        case 314:
        case 317:
        case 318:
        case 320:
        case 323:
        case 325:
        case 328:
        case 329:
        case 330:
        case 331:
        case 332:
        case 333:
        case 335:
        case 338:
        case 339:
        case 341:
        case 343:
        case 345:
        case 346:
        case 347:
        case 348:
        case 350:
        case 352:
          goto LABEL_4367;
        case 315:
          return 8142;
        case 316:
          return 8143;
        case 319:
          return 8144;
        case 321:
          return 8145;
        case 322:
          return 8146;
        case 324:
          return 8147;
        case 326:
          return 8148;
        case 327:
          return 8149;
        case 334:
          return 8150;
        case 336:
          return 8151;
        case 337:
          return 8152;
        case 340:
          return 8153;
        case 342:
          return 8154;
        case 344:
          return 8155;
        case 349:
          return 8156;
        case 351:
          return 8157;
        case 353:
          return 8158;
        default:
          uint64_t result = 8167;
          switch(a3)
          {
            case 367:
            case 370:
            case 371:
            case 373:
            case 375:
            case 377:
            case 378:
            case 379:
            case 380:
            case 382:
            case 384:
              goto LABEL_4367;
            case 368:
              return 8160;
            case 369:
              return 8161;
            case 372:
              return 8162;
            case 374:
              return 8163;
            case 376:
              return 8164;
            case 381:
              return 8165;
            case 383:
              return 8166;
            case 385:
              return result;
            default:
              return 8159;
          }
      }
    case 72:
      if (a1 == 4)
      {
        if (a3 <= 312)
        {
          switch(a3)
          {
            case 215:
              return 7952;
            case 216:
            case 219:
            case 220:
            case 222:
            case 225:
            case 227:
            case 230:
            case 231:
            case 232:
            case 233:
            case 234:
            case 235:
            case 237:
            case 240:
            case 241:
            case 243:
            case 245:
            case 247:
            case 248:
            case 249:
            case 250:
            case 252:
            case 254:
              goto LABEL_4367;
            case 217:
              return 7953;
            case 218:
              return 7954;
            case 221:
              return 7955;
            case 223:
              return 7956;
            case 224:
              return 7957;
            case 226:
              return 7958;
            case 228:
              return 7959;
            case 229:
              return 7960;
            case 236:
              return 7961;
            case 238:
              return 7962;
            case 239:
              return 7963;
            case 242:
              return 7964;
            case 244:
              return 7965;
            case 246:
              return 7966;
            case 251:
              return 7967;
            case 253:
              return 7968;
            case 255:
              return 7969;
            default:
              switch(a3)
              {
                case 269:
                case 272:
                case 273:
                case 275:
                case 277:
                case 279:
                case 280:
                case 281:
                case 282:
                case 284:
                case 286:
                  goto LABEL_4367;
                case 270:
                  return 7971;
                case 271:
                  return 7972;
                case 274:
                  return 7973;
                case 276:
                  return 7974;
                case 278:
                  return 7975;
                case 283:
                  return 7976;
                case 285:
                  return 7977;
                case 287:
                  return 7978;
                default:
                  return 7970;
              }
          }
        }
        switch(a3)
        {
          case 313:
            return 7979;
          case 314:
          case 317:
          case 318:
          case 320:
          case 323:
          case 325:
          case 328:
          case 329:
          case 330:
          case 331:
          case 332:
          case 333:
          case 335:
          case 338:
          case 339:
          case 341:
          case 343:
          case 345:
          case 346:
          case 347:
          case 348:
          case 350:
          case 352:
            goto LABEL_4367;
          case 315:
            return 7980;
          case 316:
            return 7981;
          case 319:
            return 7982;
          case 321:
            return 7983;
          case 322:
            return 7984;
          case 324:
            return 7985;
          case 326:
            return 7986;
          case 327:
            return 7987;
          case 334:
            return 7988;
          case 336:
            return 7989;
          case 337:
            return 7990;
          case 340:
            return 7991;
          case 342:
            return 7992;
          case 344:
            return 7993;
          case 349:
            return 7994;
          case 351:
            return 7995;
          case 353:
            return 7996;
          default:
            uint64_t result = 8005;
            switch(a3)
            {
              case 367:
              case 370:
              case 371:
              case 373:
              case 375:
              case 377:
              case 378:
              case 379:
              case 380:
              case 382:
              case 384:
                goto LABEL_4367;
              case 368:
                return 7998;
              case 369:
                return 7999;
              case 372:
                return 8000;
              case 374:
                return 8001;
              case 376:
                return 8002;
              case 381:
                return 8003;
              case 383:
                return 8004;
              case 385:
                return result;
              default:
                return 7997;
            }
        }
      }
      if (a3 <= 312)
      {
        switch(a3)
        {
          case 215:
            return 8006;
          case 216:
          case 219:
          case 220:
          case 222:
          case 225:
          case 227:
          case 230:
          case 231:
          case 232:
          case 233:
          case 234:
          case 235:
          case 237:
          case 240:
          case 241:
          case 243:
          case 245:
          case 247:
          case 248:
          case 249:
          case 250:
          case 252:
          case 254:
            goto LABEL_4367;
          case 217:
            return 8007;
          case 218:
            return 8008;
          case 221:
            return 8009;
          case 223:
            return 8010;
          case 224:
            return 8011;
          case 226:
            return 8012;
          case 228:
            return 8013;
          case 229:
            return 8014;
          case 236:
            return 8015;
          case 238:
            return 8016;
          case 239:
            return 8017;
          case 242:
            return 8018;
          case 244:
            return 8019;
          case 246:
            return 8020;
          case 251:
            return 8021;
          case 253:
            return 8022;
          case 255:
            return 8023;
          default:
            switch(a3)
            {
              case 269:
              case 272:
              case 273:
              case 275:
              case 277:
              case 279:
              case 280:
              case 281:
              case 282:
              case 284:
              case 286:
                goto LABEL_4367;
              case 270:
                return 8025;
              case 271:
                return 8026;
              case 274:
                return 8027;
              case 276:
                return 8028;
              case 278:
                return 8029;
              case 283:
                return 8030;
              case 285:
                return 8031;
              case 287:
                return 8032;
              default:
                return 8024;
            }
        }
      }
      switch(a3)
      {
        case 313:
          return 8033;
        case 314:
        case 317:
        case 318:
        case 320:
        case 323:
        case 325:
        case 328:
        case 329:
        case 330:
        case 331:
        case 332:
        case 333:
        case 335:
        case 338:
        case 339:
        case 341:
        case 343:
        case 345:
        case 346:
        case 347:
        case 348:
        case 350:
        case 352:
          goto LABEL_4367;
        case 315:
          return 8034;
        case 316:
          return 8035;
        case 319:
          return 8036;
        case 321:
          return 8037;
        case 322:
          return 8038;
        case 324:
          return 8039;
        case 326:
          return 8040;
        case 327:
          return 8041;
        case 334:
          return 8042;
        case 336:
          return 8043;
        case 337:
          return 8044;
        case 340:
          return 8045;
        case 342:
          return 8046;
        case 344:
          return 8047;
        case 349:
          return 8048;
        case 351:
          return 8049;
        case 353:
          return 8050;
        default:
          uint64_t result = 8059;
          switch(a3)
          {
            case 367:
            case 370:
            case 371:
            case 373:
            case 375:
            case 377:
            case 378:
            case 379:
            case 380:
            case 382:
            case 384:
              goto LABEL_4367;
            case 368:
              return 8052;
            case 369:
              return 8053;
            case 372:
              return 8054;
            case 374:
              return 8055;
            case 376:
              return 8056;
            case 381:
              return 8057;
            case 383:
              return 8058;
            case 385:
              return result;
            default:
              return 8051;
          }
      }
    default:
      if (a1 == 4)
      {
        if (a3 <= 312)
        {
          switch(a3)
          {
            case 215:
              return 803;
            case 216:
            case 219:
            case 220:
            case 222:
            case 225:
            case 227:
            case 230:
            case 231:
            case 232:
            case 233:
            case 234:
            case 235:
            case 237:
            case 240:
            case 241:
            case 243:
            case 245:
            case 247:
            case 248:
            case 249:
            case 250:
            case 252:
            case 254:
              goto LABEL_4367;
            case 217:
              return 804;
            case 218:
              return 805;
            case 221:
              return 806;
            case 223:
              return 807;
            case 224:
              return 808;
            case 226:
              return 809;
            case 228:
              return 810;
            case 229:
              return 811;
            case 236:
              return 812;
            case 238:
              return 813;
            case 239:
              return 814;
            case 242:
              return 815;
            case 244:
              return 816;
            case 246:
              return 817;
            case 251:
              return 818;
            case 253:
              return 819;
            case 255:
              return 820;
            default:
              switch(a3)
              {
                case 269:
                case 272:
                case 273:
                case 275:
                case 277:
                case 279:
                case 280:
                case 281:
                case 282:
                case 284:
                case 286:
                  goto LABEL_4367;
                case 270:
                  return 822;
                case 271:
                  return 823;
                case 274:
                  return 824;
                case 276:
                  return 825;
                case 278:
                  return 826;
                case 283:
                  return 827;
                case 285:
                  return 828;
                case 287:
                  return 829;
                default:
                  return 821;
              }
          }
        }
        switch(a3)
        {
          case 313:
            return 830;
          case 314:
          case 317:
          case 318:
          case 320:
          case 323:
          case 325:
          case 328:
          case 329:
          case 330:
          case 331:
          case 332:
          case 333:
          case 335:
          case 338:
          case 339:
          case 341:
          case 343:
          case 345:
          case 346:
          case 347:
          case 348:
          case 350:
          case 352:
            goto LABEL_4367;
          case 315:
            return 831;
          case 316:
            return 832;
          case 319:
            return 833;
          case 321:
            return 834;
          case 322:
            return 835;
          case 324:
            return 836;
          case 326:
            return 837;
          case 327:
            return 838;
          case 334:
            return 839;
          case 336:
            return 840;
          case 337:
            return 841;
          case 340:
            return 842;
          case 342:
            return 843;
          case 344:
            return 844;
          case 349:
            return 845;
          case 351:
            return 846;
          case 353:
            return 847;
          default:
            uint64_t result = 856;
            switch(a3)
            {
              case 367:
              case 370:
              case 371:
              case 373:
              case 375:
              case 377:
              case 378:
              case 379:
              case 380:
              case 382:
              case 384:
                goto LABEL_4367;
              case 368:
                return 849;
              case 369:
                return 850;
              case 372:
                return 851;
              case 374:
                return 852;
              case 376:
                return 853;
              case 381:
                return 854;
              case 383:
                return 855;
              case 385:
                return result;
              default:
                return 848;
            }
        }
      }
      if (a3 <= 312)
      {
        switch(a3)
        {
          case 215:
            return 857;
          case 216:
          case 219:
          case 220:
          case 222:
          case 225:
          case 227:
          case 230:
          case 231:
          case 232:
          case 233:
          case 234:
          case 235:
          case 237:
          case 240:
          case 241:
          case 243:
          case 245:
          case 247:
          case 248:
          case 249:
          case 250:
          case 252:
          case 254:
            goto LABEL_4367;
          case 217:
            return 858;
          case 218:
            return 859;
          case 221:
            return 860;
          case 223:
            return 861;
          case 224:
            return 862;
          case 226:
            return 863;
          case 228:
            return 864;
          case 229:
            return 865;
          case 236:
            return 866;
          case 238:
            return 867;
          case 239:
            return 868;
          case 242:
            return 869;
          case 244:
            return 870;
          case 246:
            return 871;
          case 251:
            return 872;
          case 253:
            return 873;
          case 255:
            return 874;
          default:
            switch(a3)
            {
              case 269:
              case 272:
              case 273:
              case 275:
              case 277:
              case 279:
              case 280:
              case 281:
              case 282:
              case 284:
              case 286:
                goto LABEL_4367;
              case 270:
                return 876;
              case 271:
                return 877;
              case 274:
                return 878;
              case 276:
                return 879;
              case 278:
                return 880;
              case 283:
                return 881;
              case 285:
                return 882;
              case 287:
                return 883;
              default:
                return 875;
            }
        }
      }
      switch(a3)
      {
        case 313:
          uint64_t result = 884;
          break;
        case 314:
        case 317:
        case 318:
        case 320:
        case 323:
        case 325:
        case 328:
        case 329:
        case 330:
        case 331:
        case 332:
        case 333:
        case 335:
        case 338:
        case 339:
        case 341:
        case 343:
        case 345:
        case 346:
        case 347:
        case 348:
        case 350:
        case 352:
LABEL_4367:
          __break(1u);
          JUMPOUT(0x1CB963CA4);
        case 315:
          uint64_t result = 885;
          break;
        case 316:
          uint64_t result = 886;
          break;
        case 319:
          uint64_t result = 887;
          break;
        case 321:
          uint64_t result = 888;
          break;
        case 322:
          uint64_t result = 889;
          break;
        case 324:
          uint64_t result = 890;
          break;
        case 326:
          uint64_t result = 891;
          break;
        case 327:
          uint64_t result = 892;
          break;
        case 334:
          uint64_t result = 893;
          break;
        case 336:
          uint64_t result = 894;
          break;
        case 337:
          uint64_t result = 895;
          break;
        case 340:
          uint64_t result = 896;
          break;
        case 342:
          uint64_t result = 897;
          break;
        case 344:
          uint64_t result = 898;
          break;
        case 349:
          uint64_t result = 899;
          break;
        case 351:
          uint64_t result = 900;
          break;
        case 353:
          uint64_t result = 901;
          break;
        default:
          uint64_t result = 910;
          switch(a3)
          {
            case 367:
            case 370:
            case 371:
            case 373:
            case 375:
            case 377:
            case 378:
            case 379:
            case 380:
            case 382:
            case 384:
              goto LABEL_4367;
            case 368:
              return 903;
            case 369:
              return 904;
            case 372:
              return 905;
            case 374:
              return 906;
            case 376:
              return 907;
            case 381:
              return 908;
            case 383:
              return 909;
            case 385:
              return result;
            default:
              return 902;
          }
      }
      return result;
  }
}

uint64_t sub_1CB968FF4(unsigned char *a1)
{
  if (a1[318]) {
    return 4;
  }
  if (a1[319]) {
    return 5;
  }
  if (a1[320]) {
    return 6;
  }
  if (a1[321]) {
    return 7;
  }
  return 9;
}

uint64_t sub_1CB96903C(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(*(void *)(a2 + 16) + 16) >> 1) & 1;
}

BOOL sub_1CB96904C(uint64_t a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBEBF0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v7 = a2;
    int v3 = __cxa_guard_acquire(&qword_1EBCBEBF0);
    a2 = v7;
    if (v3)
    {
      byte_1EBCBEBE8 = 0;
      __cxa_guard_release(&qword_1EBCBEBF0);
      a2 = v7;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBEBF8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v8 = a2;
    int v4 = __cxa_guard_acquire(&qword_1EBCBEBF8);
    a2 = v8;
    if (v4)
    {
      byte_1EBCBEBE9 = 0;
      __cxa_guard_release(&qword_1EBCBEBF8);
      a2 = v8;
    }
  }
  if (byte_1EBCBEBE8)
  {
    unint64_t v5 = *(void *)(a2 + 48);
    if (v5 >= 8)
    {
      if ((v5 & 7) != 0)
      {
        if ((*(void *)(a2 + 48) & 7) != 3
          || (v5 & 0xFFFFFFFFFFFFFFF8) == 0
          || !*(_DWORD *)(v5 & 0xFFFFFFFFFFFFFFF8))
        {
          return !byte_1EBCBEBE9 || **(_WORD **)(a2 + 16) != 270;
        }
      }
      else
      {
        v5 &= 0xFFFFFFFFFFFFFFF8;
        *(void *)(a2 + 48) = v5;
      }
      if ((v5 & 7) != 0)
      {
        unint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(a2 + 48) = v6;
      }
      if (*(_WORD *)(v6 + 32)) {
        return 0;
      }
    }
  }
  return !byte_1EBCBEBE9 || **(_WORD **)(a2 + 16) != 270;
}

uint64_t sub_1CB96918C(uint64_t a1)
{
  return *(void *)(a1 + 448);
}

uint64_t sub_1CB969194(void *a1, unsigned int a2, uint64_t a3, unsigned int a4, void *a5)
{
  int64_t v5 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
  if (v5 >= 1)
  {
    if (a2)
    {
      if (v5 >= 64 - a2) {
        unint64_t v6 = 64 - a2;
      }
      else {
        unint64_t v6 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
      }
      if (((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v6)) & (-1 << a2) & (*a1 ^ *a5)) != 0) {
        return 0;
      }
      v5 -= v6;
      ++a1;
      ++a5;
    }
    if (v5 >= 64)
    {
      while (*a5 == *a1)
      {
        uint64_t v7 = v5 - 64;
        ++a1;
        ++a5;
        BOOL v8 = v5 <= 127;
        v5 -= 64;
        if (v8) {
          goto LABEL_14;
        }
      }
      return 0;
    }
    uint64_t v7 = v5;
LABEL_14:
    if (v7 >= 1 && (*a1 ^ *a5) << -(char)v7) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_1CB969264(uint64_t a1)
{
  *(void *)a1 = &unk_1F25EFA20;
  if ((*(unsigned char *)(a1 + 272) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 280), 8);
  }
  sub_1CD3FC170(a1 + 120);
  return a1;
}

void sub_1CB9692C4(uint64_t a1)
{
  *(void *)a1 = &unk_1F25EFA20;
  if ((*(unsigned char *)(a1 + 272) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 280), 8);
  }
  sub_1CD3FC170(a1 + 120);

  JUMPOUT(0x1D25D9CE0);
}

#error "1CB969344: too big function (funcsize=0)"

uint64_t sub_1CB982930(uint64_t result)
{
  *(void *)(result + 112) = 0;
  return result;
}

uint64_t sub_1CB982938(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  a1[1] = a4;
  a1[2] = a3;
  a1[3] = a2;
  a1[4] = a5;
  a1[5] = a6;
  a1[6] = 0;
  return (*(uint64_t (**)(void))(*a1 + 24))();
}

void *sub_1CB982968()
{
  return &unk_1CD973FE0;
}

uint64_t sub_1CB982978(uint64_t a1, int a2, uint64_t a3)
{
  switch(a2)
  {
    case 4:
    case 6:
    case 8:
      if (*(_DWORD *)(a3 + 8) >= 0x41u) {
        int64_t v5 = *(unint64_t **)a3;
      }
      else {
        int64_t v5 = (unint64_t *)a3;
      }
      unint64_t v6 = *v5;
      unint64_t v7 = v6 & 0xFFFFFFFFFFFFFC03;
      unint64_t v8 = v6 & 0xFFFFFFFFFFFFF807;
      BOOL v10 = v6 < 0x100 || (v6 & 0xFFFFFFFFFFFFFE01) == 0 || (v6 & 0xFFFFFFFFFFFFF00FLL) == 0;
      if (v8) {
        BOOL v11 = v7 == 0;
      }
      else {
        BOOL v11 = 1;
      }
      uint64_t result = v11 || v10;
      break;
    default:
      if (*(_DWORD *)(a3 + 8) >= 0x41u) {
        int v3 = *(unint64_t **)a3;
      }
      else {
        int v3 = (unint64_t *)a3;
      }
      uint64_t result = *v3 < 0x100;
      break;
  }
  return result;
}

uint64_t sub_1CB982A34(uint64_t a1, int a2, uint64_t a3)
{
  if (a2 == 1) {
    return sub_1CB9868C0(a3);
  }
  else {
    return sub_1CB9867B8(a3);
  }
}

void **sub_1CB982A4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v31[16] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(*(void *)(*(void *)(*(void *)(a2 + 8) + 24) + 32) + 40);
  uint64_t result = (void **)sub_1CB986134((uint64_t)v22, v6, *(void *)(a1 + 80), *(void *)(a1 + 88), (unsigned __int8 *)a2, 0, 0, 0, 0);
  if (v23 >= 4)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 144) = 0;
    return result;
  }
  unint64_t v8 = (long long *)sub_1CB985B5C(*(void *)(v6 + 24), *(void *)(v6 + 272), a2, 1);
  int v10 = v9;
  long long v11 = v8[1];
  long long v20 = *v8;
  long long v21 = v11;
  sub_1CB985CA8(a1, (uint64_t)&v20, 1, v6);
  int v12 = (char *)operator new(0x28uLL);
  long long v13 = v21;
  *(_OWORD *)(v12 + 8) = v20;
  *(void *)int v12 = &unk_1F25EFA80;
  *(_OWORD *)(v12 + 24) = v13;
  int v25 = v12;
  int v26 = &unk_1F25EFAC8;
  int v27 = v10;
  char v28 = &v26;
  int v29 = v31;
  uint64_t v30 = 0x400000000;
  sub_1CB986BF0((uint64_t)&v29, (uint64_t)v24, (uint64_t)&v29);
  *(void *)a3 = a3 + 16;
  *(void *)(a3 + 8) = 0x400000000;
  if (!v30)
  {
    *(unsigned char *)(a3 + 144) = 1;
LABEL_13:
    int v15 = v29;
    goto LABEL_14;
  }
  sub_1CB986D14((unsigned int *)a3, (unsigned int *)&v29);
  uint64_t v14 = v30;
  *(unsigned char *)(a3 + 144) = 1;
  int v15 = v29;
  if (v14)
  {
    uint64_t v16 = 4 * v14;
    unsigned int v17 = v29 - 4;
    do
    {
      BOOL v18 = (void *)v17[v16 + 3];
      if (&v17[v16] == v18)
      {
        (*(void (**)(void *))(v17[v16] + 32))(&v17[v16]);
      }
      else if (v18)
      {
        (*(void (**)(void *))(*v18 + 40))(v18);
      }
      v16 -= 4;
    }
    while (v16 * 8);
    goto LABEL_13;
  }
LABEL_14:
  if (v15 != v31) {
    free(v15);
  }
  for (uint64_t i = 0; i != -8; i -= 4)
  {
    uint64_t result = (&v28)[i];
    if ((void **)((char *)&v26 + i * 8) == result)
    {
      uint64_t result = (void **)(*(uint64_t (***)(char *))((char *)&v26 + i * 8))[4]((char *)&v26 + i * 8);
    }
    else if (result)
    {
      uint64_t result = (void **)(*((uint64_t (**)(void **))*result + 5))(result);
    }
  }
  return result;
}

uint64_t sub_1CB982D0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t result = sub_1CB986134((uint64_t)&v22, *(void *)(*(void *)(*(void *)(v6 + 24) + 32) + 40), *(void *)(a1 + 80), *(void *)(a1 + 88), (unsigned __int8 *)a2, 0, 0, 0, 0);
  if (v24[16] >= 4)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 144) = 0;
    return result;
  }
  unsigned int v8 = **(unsigned __int16 **)(v6 + 16);
  char v9 = 1;
  if (v8 > 0xA2)
  {
    if (v8 - 163 > 0x38 || ((1 << (v8 + 93)) & 0x18800000039D4EFLL) == 0)
    {
      BOOL v13 = v8 - 314 > 0x2A || ((1 << (v8 - 58)) & 0x40000200003) == 0;
      if (v13 && v8 != 261) {
        goto LABEL_10;
      }
    }
  }
  else
  {
    if (**(unsigned __int16 **)(v6 + 16) <= 0x78u)
    {
      if (v8 == 85) {
        goto LABEL_31;
      }
      if (v8 == 116) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v8 != 121 && v8 != 135)
    {
LABEL_10:
      if ((v8 & 0xFFFE) != 0x74)
      {
LABEL_30:
        char v9 = 0;
        goto LABEL_31;
      }
LABEL_11:
      uint64_t v10 = *(unsigned int *)(v6 + 40);
      if (v10)
      {
        long long v11 = (_DWORD *)(*(void *)(v6 + 32) + 16);
        while (*((unsigned char *)v11 - 16) != 17)
        {
          v11 += 8;
          if (!--v10) {
            goto LABEL_30;
          }
        }
        if (*v11 == 2131)
        {
          char v9 = 1;
          goto LABEL_31;
        }
      }
      goto LABEL_30;
    }
  }
LABEL_31:
  uint64_t v14 = operator new(0x20uLL);
  void *v14 = &unk_1F25EFB10;
  v14[1] = a1;
  v14[2] = a2;
  *((unsigned char *)v14 + 24) = v9;
  long long v21 = v14;
  int v22 = v24;
  uint64_t v23 = 0x400000000;
  sub_1CB986BF0((uint64_t)&v22, (uint64_t)v20, (uint64_t)&v22);
  *(void *)a3 = a3 + 16;
  *(void *)(a3 + 8) = 0x400000000;
  if (!v23)
  {
    *(unsigned char *)(a3 + 144) = 1;
LABEL_41:
    uint64_t v16 = v22;
    goto LABEL_42;
  }
  sub_1CB986D14((unsigned int *)a3, (unsigned int *)&v22);
  uint64_t v15 = v23;
  *(unsigned char *)(a3 + 144) = 1;
  uint64_t v16 = v22;
  if (v15)
  {
    uint64_t v17 = 32 * v15;
    BOOL v18 = (char *)v22 - 32;
    do
    {
      unsigned int v19 = *(char **)&v18[v17 + 24];
      if (&v18[v17] == v19)
      {
        (*(void (**)(char *))(*(void *)&v18[v17] + 32))(&v18[v17]);
      }
      else if (v19)
      {
        (*(void (**)(char *))(*(void *)v19 + 40))(v19);
      }
      v17 -= 32;
    }
    while (v17);
    goto LABEL_41;
  }
LABEL_42:
  if (v16 != v24) {
    free(v16);
  }
  uint64_t result = (uint64_t)v21;
  if (v21 == v20) {
    return (*(uint64_t (**)(void *))(v20[0] + 32))(v20);
  }
  if (v21) {
    return (*(uint64_t (**)(void))(*v21 + 40))();
  }
  return result;
}

void *sub_1CB983038@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  v22[16] = *MEMORY[0x1E4F143B8];
  long long v4 = a2[1];
  long long v14 = *a2;
  long long v15 = v4;
  sub_1CB985CA8(a1, (uint64_t)&v14, 0, *(void *)(*(void *)(*(void *)(*((void *)a2 + 1) + 24) + 32) + 40));
  int64_t v5 = (char *)operator new(0x28uLL);
  long long v6 = v15;
  *(_OWORD *)(v5 + 8) = v14;
  *(void *)int64_t v5 = &unk_1F25EFB58;
  *(_OWORD *)(v5 + 24) = v6;
  uint64_t v17 = v5;
  v18[0] = &unk_1F25EFBA0;
  unsigned int v19 = v18;
  long long v20 = v22;
  uint64_t v21 = 0x400000000;
  sub_1CB986BF0((uint64_t)&v20, (uint64_t)v16, (uint64_t)&v20);
  *(void *)a3 = a3 + 16;
  *(void *)(a3 + 8) = 0x400000000;
  if (v21)
  {
    sub_1CB986D14((unsigned int *)a3, (unsigned int *)&v20);
    uint64_t v7 = v21;
    *(unsigned char *)(a3 + 144) = 1;
    unsigned int v8 = v20;
    if (!v7) {
      goto LABEL_12;
    }
    uint64_t v9 = 32 * v7;
    uint64_t v10 = (char *)v20 - 32;
    do
    {
      long long v11 = *(char **)&v10[v9 + 24];
      if (&v10[v9] == v11)
      {
        (*(void (**)(char *))(*(void *)&v10[v9] + 32))(&v10[v9]);
      }
      else if (v11)
      {
        (*(void (**)(char *))(*(void *)v11 + 40))(v11);
      }
      v9 -= 32;
    }
    while (v9);
  }
  else
  {
    *(unsigned char *)(a3 + 144) = 1;
  }
  unsigned int v8 = v20;
LABEL_12:
  if (v8 != v22) {
    free(v8);
  }
  for (uint64_t i = 0; i != -8; i -= 4)
  {
    uint64_t result = (&v19)[i];
    if (&v18[i] == result)
    {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(v18[i] + 32))(&v18[i]);
    }
    else if (result)
    {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 40))(result);
    }
  }
  return result;
}

uint64_t *sub_1CB983288@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v21[16] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)a2
    || ((unsigned int v5 = *(_DWORD *)(a2 + 4), v5 - 1 <= 0x3FFFFFFE)
      ? (uint64_t v6 = result[10],
         uint64_t result = (uint64_t *)*(unsigned int *)(*(void *)(v6 + 264)
                                             + 24
                                             * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(result[11], v5, v6)+ 24)+ *(_DWORD *)(v6 + 272)* ((*(void *)(v6 + 248) - *(void *)(v6 + 240)) >> 3)))): (uint64_t result = (uint64_t *)llvm::TargetRegisterInfo::getRegSizeInBits(result[10], v5, *(void *)(*(void *)(*(void *)(*(void *)(a2 + 8) + 24) + 32) + 40))), result != 16 && result != 32))
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 144) = 0;
    return result;
  }
  uint64_t v7 = (char *)operator new(0x28uLL);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v7 + 8) = *(_OWORD *)a2;
  *(void *)uint64_t v7 = &unk_1F25EFBE8;
  *(_OWORD *)(v7 + 24) = v8;
  uint64_t v16 = v7;
  v17[0] = &unk_1F25EFC30;
  BOOL v18 = v17;
  unsigned int v19 = v21;
  uint64_t v20 = 0x400000000;
  sub_1CB986BF0((uint64_t)&v19, (uint64_t)v15, (uint64_t)&v19);
  *(void *)a3 = a3 + 16;
  *(void *)(a3 + 8) = 0x400000000;
  if (!v20)
  {
    *(unsigned char *)(a3 + 144) = 1;
LABEL_17:
    uint64_t v10 = v19;
    goto LABEL_18;
  }
  sub_1CB986D14((unsigned int *)a3, (unsigned int *)&v19);
  uint64_t v9 = v20;
  *(unsigned char *)(a3 + 144) = 1;
  uint64_t v10 = v19;
  if (v9)
  {
    uint64_t v11 = 32 * v9;
    int v12 = (char *)v19 - 32;
    do
    {
      BOOL v13 = *(char **)&v12[v11 + 24];
      if (&v12[v11] == v13)
      {
        (*(void (**)(char *))(*(void *)&v12[v11] + 32))(&v12[v11]);
      }
      else if (v13)
      {
        (*(void (**)(char *))(*(void *)v13 + 40))(v13);
      }
      v11 -= 32;
    }
    while (v11);
    goto LABEL_17;
  }
LABEL_18:
  if (v10 != v21) {
    free(v10);
  }
  for (uint64_t i = 0; i != -8; i -= 4)
  {
    uint64_t result = (&v18)[i];
    if (&v17[i] == result)
    {
      uint64_t result = (uint64_t *)(*(uint64_t (**)(void *))(v17[i] + 32))(&v17[i]);
    }
    else if (result)
    {
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 40))(result);
    }
  }
  return result;
}

void sub_1CB983548(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

void sub_1CB98355C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_1CB986134((uint64_t)v6, *(void *)(*(void *)(*(void *)(*(void *)(a2 + 8) + 24) + 32) + 40), *(void *)(a1 + 80), *(void *)(a1 + 88), (unsigned __int8 *)a2, 0, 1, 0, 0);
  v5[0] = v6[0];
  v5[1] = v6[1];
  sub_1CB987508(a3, a1, (uint64_t)v5, v7 << 6);
}

void sub_1CB9835DC(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  v48[8] = *MEMORY[0x1E4F143B8];
  int v46 = (long long *)v48;
  uint64_t v47 = 0x200000000;
  uint64_t v6 = *(void *)(*(void *)(*(void *)(*((void *)a2 + 1) + 24) + 32) + 40);
  sub_1CB986134((uint64_t)&v43, v6, *(void *)(a1 + 80), *(void *)(a1 + 88), (unsigned __int8 *)a2, 1, 0, 0, 0);
  if (*(unsigned char *)a2
    || ((unsigned int v7 = *((_DWORD *)a2 + 1), v7 - 1 <= 0x3FFFFFFE)
      ? (uint64_t v8 = *(void *)(a1 + 80),
         int RegSizeInBits = *(_DWORD *)(*(void *)(v8 + 264)
                                   + 24
                                   * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(*(void *)(a1 + 88), v7, v8)+ 24)+ *(_DWORD *)(v8 + 272)* ((*(void *)(v8 + 248) - *(void *)(v8 + 240)) >> 3)))): (int RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(*(void *)(a1 + 80), v7, v6)), RegSizeInBits != 16))
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 144) = 0;
    goto LABEL_25;
  }
  long long v10 = a2[1];
  long long v38 = *a2;
  long long v39 = v10;
  sub_1CB985CA8(a1, (uint64_t)&v38, 0, v6);
  if (v47 >= HIDWORD(v47))
  {
    if (v46 > &v38 || &v46[2 * v47] <= &v38) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v11 = &v46[2 * v47];
  long long v12 = v39;
  *uint64_t v11 = v38;
  v11[1] = v12;
  uint64_t v13 = (v47 + 1);
  LODWORD(v47) = v13;
  LODWORD(v33) = 1;
  *((void *)&v33 + 1) = 0;
  *(void *)&long long v34 = 0;
  if (v13 >= HIDWORD(v47))
  {
    BOOL v29 = &v46[2 * v13] > &v33;
    if (v46 > &v33 || !v29) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  long long v14 = &v46[2 * v47];
  long long v15 = v34;
  long long *v14 = v33;
  v14[1] = v15;
  uint64_t v16 = (v47 + 1);
  BOOL v17 = v47 == -1;
  LODWORD(v47) = v47 + 1;
  BOOL v18 = v46;
  long long v31 = *v46;
  long long v32 = v46[1];
  unsigned int v19 = (char *)operator new(0x28uLL);
  *(void *)unsigned int v19 = &unk_1F25EFD98;
  *(_OWORD *)(v19 + 8) = v31;
  *(_OWORD *)(v19 + 24) = v32;
  *((void *)&v39 + 1) = v19;
  char v35 = v37;
  uint64_t v36 = 0x200000000;
  if (!v17)
  {
    if (v16 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v37, v18, 32 * v16);
    LODWORD(v36) = v16;
  }
  uint64_t v20 = operator new(0x58uLL);
  uint64_t v21 = v20;
  void *v20 = &unk_1F25EFDE0;
  v20[1] = v20 + 3;
  v20[2] = 0x200000000;
  if (v16)
  {
    if (v35 == v37)
    {
      if (v16 >= 3) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v20 + 3, v37, 32 * v16);
      *((_DWORD *)v21 + 4) = v16;
    }
    else
    {
      v20[1] = v35;
      int v30 = HIDWORD(v36);
      *((_DWORD *)v20 + 4) = v16;
      *((_DWORD *)v20 + 5) = v30;
      char v35 = v37;
      HIDWORD(v36) = 0;
    }
    LODWORD(v36) = 0;
  }
  v41[0] = v21;
  int v43 = v45;
  uint64_t v44 = 0x400000000;
  sub_1CB986BF0((uint64_t)&v43, (uint64_t)&v38, (uint64_t)&v42);
  *(void *)a3 = a3 + 16;
  *(void *)(a3 + 8) = 0x400000000;
  if (!v44)
  {
    *(unsigned char *)(a3 + 144) = 1;
LABEL_29:
    uint64_t v23 = v43;
    goto LABEL_30;
  }
  sub_1CB986D14((unsigned int *)a3, (unsigned int *)&v43);
  uint64_t v22 = v44;
  *(unsigned char *)(a3 + 144) = 1;
  uint64_t v23 = v43;
  if (v22)
  {
    uint64_t v24 = 32 * v22;
    uint64_t v25 = (char *)v43 - 32;
    do
    {
      int v26 = *(char **)&v25[v24 + 24];
      if (&v25[v24] == v26)
      {
        (*(void (**)(char *))(*(void *)&v25[v24] + 32))(&v25[v24]);
      }
      else if (v26)
      {
        (*(void (**)(char *))(*(void *)v26 + 40))(v26);
      }
      v24 -= 32;
    }
    while (v24);
    goto LABEL_29;
  }
LABEL_30:
  if (v23 != v45) {
    free(v23);
  }
  for (uint64_t i = 0; i != -8; i -= 4)
  {
    char v28 = (unsigned char *)v41[i];
    if (&v40[i * 8] == v28)
    {
      (*(void (**)(unsigned char *))(*(void *)&v40[i * 8] + 32))(&v40[i * 8]);
    }
    else if (v28)
    {
      (*(void (**)(unsigned char *))(*(void *)v28 + 40))(v28);
    }
  }
  if (v35 != v37) {
    free(v35);
  }
LABEL_25:
  if (v46 != (long long *)v48) {
    free(v46);
  }
}

void sub_1CB983B48(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v39[8] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(*(void *)(*(void *)(*(void *)(a2 + 8) + 24) + 32) + 40);
  sub_1CB986134((uint64_t)v22, v5, *(void *)(a1 + 80), *(void *)(a1 + 88), (unsigned __int8 *)a2, 0, 1, 0, 0);
  int v37 = v39;
  uint64_t v38 = 0x200000000;
  v21[0] = v22[0];
  v21[1] = v22[1];
  if (!sub_1CB987D10(a1, v5, (unsigned __int8 *)v21, (uint64_t)&v37, v23 << 6, 0))
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 144) = 0;
    goto LABEL_42;
  }
  int v27 = v29;
  uint64_t v28 = 0x200000000;
  uint64_t v6 = v38;
  if (v38)
  {
    if (v38 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v29, v37, 32 * v38);
    LODWORD(v28) = v6;
  }
  unsigned int v7 = operator new(0x58uLL);
  uint64_t v8 = v7;
  void *v7 = &unk_1F25EFE28;
  v7[1] = v7 + 3;
  v7[2] = 0x200000000;
  if (v6)
  {
    if (v27 == v29)
    {
      if (v6 >= 3) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v7 + 3, v29, 32 * v6);
      *((_DWORD *)v8 + 4) = v6;
    }
    else
    {
      v7[1] = v27;
      int v19 = HIDWORD(v28);
      *((_DWORD *)v7 + 4) = v6;
      *((_DWORD *)v7 + 5) = v19;
      int v27 = v29;
      HIDWORD(v28) = 0;
    }
    LODWORD(v28) = 0;
  }
  long long v31 = v8;
  uint64_t v24 = v26;
  uint64_t v25 = 0x200000000;
  uint64_t v9 = v38;
  if (v38)
  {
    if (v38 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v26, v37, 32 * v38);
    LODWORD(v25) = v9;
  }
  long long v10 = operator new(0x58uLL);
  uint64_t v11 = v10;
  *long long v10 = &unk_1F25EFE70;
  v10[1] = v10 + 3;
  v10[2] = 0x200000000;
  if (v9)
  {
    if (v24 == v26)
    {
      if (v9 >= 3) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v10 + 3, v26, 32 * v9);
      *((_DWORD *)v11 + 4) = v9;
    }
    else
    {
      v10[1] = v24;
      int v20 = HIDWORD(v25);
      *((_DWORD *)v10 + 4) = v9;
      *((_DWORD *)v10 + 5) = v20;
      uint64_t v24 = v26;
      HIDWORD(v25) = 0;
    }
    LODWORD(v25) = 0;
  }
  long long v33 = v11;
  long long v34 = v36;
  uint64_t v35 = 0x400000000;
  sub_1CB986BF0((uint64_t)&v34, (uint64_t)v30, (uint64_t)&v34);
  *(void *)a3 = a3 + 16;
  *(void *)(a3 + 8) = 0x400000000;
  if (!v35)
  {
    *(unsigned char *)(a3 + 144) = 1;
LABEL_29:
    uint64_t v13 = v34;
    goto LABEL_30;
  }
  sub_1CB986D14((unsigned int *)a3, (unsigned int *)&v34);
  uint64_t v12 = v35;
  *(unsigned char *)(a3 + 144) = 1;
  uint64_t v13 = v34;
  if (v12)
  {
    uint64_t v14 = 32 * v12;
    long long v15 = (char *)v34 - 32;
    do
    {
      uint64_t v16 = *(char **)&v15[v14 + 24];
      if (&v15[v14] == v16)
      {
        (*(void (**)(char *))(*(void *)&v15[v14] + 32))(&v15[v14]);
      }
      else if (v16)
      {
        (*(void (**)(char *))(*(void *)v16 + 40))(v16);
      }
      v14 -= 32;
    }
    while (v14);
    goto LABEL_29;
  }
LABEL_30:
  if (v13 != v36) {
    free(v13);
  }
  for (uint64_t i = 0; i != -8; i -= 4)
  {
    BOOL v18 = (&v33)[i];
    if (&v32[i * 8] == v18)
    {
      (*(void (**)(unsigned char *))(*(void *)&v32[i * 8] + 32))(&v32[i * 8]);
    }
    else if (v18)
    {
      (*(void (**)(unsigned char *))(*(void *)v18 + 40))(v18);
    }
  }
  if (v24 != v26) {
    free(v24);
  }
  if (v27 != v29) {
    free(v27);
  }
LABEL_42:
  if (v37 != v39) {
    free(v37);
  }
}

void sub_1CB984008(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v27[8] = *MEMORY[0x1E4F143B8];
  uint64_t v25 = (long long *)v27;
  uint64_t v26 = 0x200000000;
  if ((sub_1CB989BF0(a1, *(void *)(*(void *)(*(void *)(*(void *)(a2 + 8) + 24) + 32) + 40), (long long *)a2, (uint64_t)&v25) & 1) == 0)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 144) = 0;
    goto LABEL_28;
  }
  long long v4 = v25;
  long long v15 = *v25;
  long long v16 = v25[1];
  uint64_t v5 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v5 = &unk_1F25EFEB8;
  *(_OWORD *)(v5 + 8) = v15;
  *(_OWORD *)(v5 + 24) = v16;
  int v19 = v5;
  uint64_t v6 = v26;
  if (v26)
  {
    if (v26 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v17, v4, 32 * v26);
  }
  unsigned int v7 = operator new(0x58uLL);
  void *v7 = &unk_1F25EFF00;
  v7[1] = v7 + 3;
  v7[2] = 0x200000000;
  if (v6)
  {
    if (v6 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v7 + 3, v17, 32 * v6);
    *((_DWORD *)v7 + 4) = v6;
  }
  uint64_t v21 = v7;
  uint64_t v22 = v24;
  uint64_t v23 = 0x400000000;
  sub_1CB986BF0((uint64_t)&v22, (uint64_t)v18, (uint64_t)&v22);
  *(void *)a3 = a3 + 16;
  *(void *)(a3 + 8) = 0x400000000;
  if (!v23)
  {
    *(unsigned char *)(a3 + 144) = 1;
LABEL_19:
    uint64_t v9 = v22;
    goto LABEL_20;
  }
  sub_1CB986D14((unsigned int *)a3, (unsigned int *)&v22);
  uint64_t v8 = v23;
  *(unsigned char *)(a3 + 144) = 1;
  uint64_t v9 = v22;
  if (v8)
  {
    uint64_t v10 = 32 * v8;
    uint64_t v11 = (char *)v22 - 32;
    do
    {
      uint64_t v12 = *(char **)&v11[v10 + 24];
      if (&v11[v10] == v12)
      {
        (*(void (**)(char *))(*(void *)&v11[v10] + 32))(&v11[v10]);
      }
      else if (v12)
      {
        (*(void (**)(char *))(*(void *)v12 + 40))(v12);
      }
      v10 -= 32;
    }
    while (v10);
    goto LABEL_19;
  }
LABEL_20:
  if (v9 != v24) {
    free(v9);
  }
  for (uint64_t i = 0; i != -8; i -= 4)
  {
    uint64_t v14 = (&v21)[i];
    if (&v20[i * 8] == v14)
    {
      (*(void (**)(unsigned char *))(*(void *)&v20[i * 8] + 32))(&v20[i * 8]);
    }
    else if (v14)
    {
      (*(void (**)(unsigned char *))(*(void *)v14 + 40))(v14);
    }
  }
LABEL_28:
  if (v25 != (long long *)v27) {
    free(v25);
  }
}

uint64_t sub_1CB9843A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v28[16] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(*(void *)(*(void *)(v6 + 24) + 32) + 40);
  sub_1CB986134((uint64_t)v23, v7, *(void *)(a1 + 80), *(void *)(a1 + 88), (unsigned __int8 *)a2, 1, 0, 0, 0);
  if (!*(unsigned char *)a2)
  {
    unsigned int v8 = *(_DWORD *)(a2 + 4);
    if (v8 - 1 <= 0x3FFFFFFE)
    {
      uint64_t v22 = *(void *)(a1 + 80);
      uint64_t result = *(unsigned int *)(*(void *)(v22 + 264)
                               + 24
                               * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(*(void *)(a1 + 88), v8, v22)+ 24)+ *(_DWORD *)(v22 + 272)* ((*(void *)(v22 + 248) - *(void *)(v22 + 240)) >> 3)));
    }
    else
    {
      uint64_t result = llvm::TargetRegisterInfo::getRegSizeInBits(*(void *)(a1 + 80), v8, v7);
    }
    if (result != 32)
    {
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 144) = 0;
      return result;
    }
  }
  unsigned int v10 = **(unsigned __int16 **)(v6 + 16);
  char v11 = 1;
  if (v10 > 0xA2)
  {
    if (v10 - 163 > 0x38 || ((1 << (v10 + 93)) & 0x18800000039D4EFLL) == 0)
    {
      BOOL v15 = v10 - 314 > 0x2A || ((1 << (v10 - 58)) & 0x40000200003) == 0;
      if (v15 && v10 != 261) {
        goto LABEL_12;
      }
    }
  }
  else
  {
    if (**(unsigned __int16 **)(v6 + 16) <= 0x78u)
    {
      if (v10 == 85) {
        goto LABEL_34;
      }
      if (v10 == 116) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    if (v10 != 121 && v10 != 135)
    {
LABEL_12:
      if ((v10 & 0xFFFE) != 0x74)
      {
LABEL_33:
        char v11 = 0;
        goto LABEL_34;
      }
LABEL_13:
      uint64_t v12 = *(unsigned int *)(v6 + 40);
      if (v12)
      {
        uint64_t v13 = (_DWORD *)(*(void *)(v6 + 32) + 16);
        while (*((unsigned char *)v13 - 16) != 17)
        {
          v13 += 8;
          if (!--v12) {
            goto LABEL_33;
          }
        }
        if (*v13 == 2131)
        {
          char v11 = 1;
          goto LABEL_34;
        }
      }
      goto LABEL_33;
    }
  }
LABEL_34:
  long long v16 = operator new(0x20uLL);
  void *v16 = &unk_1F25EFF48;
  v16[1] = a1;
  _DWORD v16[2] = a2;
  *((unsigned char *)v16 + 24) = v11;
  uint64_t v25 = v16;
  uint64_t v26 = v28;
  uint64_t v27 = 0x400000000;
  sub_1CB986BF0((uint64_t)&v26, (uint64_t)v24, (uint64_t)&v26);
  *(void *)a3 = a3 + 16;
  *(void *)(a3 + 8) = 0x400000000;
  if (!v27)
  {
    *(unsigned char *)(a3 + 144) = 1;
LABEL_44:
    BOOL v18 = v26;
    goto LABEL_45;
  }
  sub_1CB986D14((unsigned int *)a3, (unsigned int *)&v26);
  uint64_t v17 = v27;
  *(unsigned char *)(a3 + 144) = 1;
  BOOL v18 = v26;
  if (v17)
  {
    uint64_t v19 = 32 * v17;
    int v20 = (char *)v26 - 32;
    do
    {
      uint64_t v21 = *(char **)&v20[v19 + 24];
      if (&v20[v19] == v21)
      {
        (*(void (**)(char *))(*(void *)&v20[v19] + 32))(&v20[v19]);
      }
      else if (v21)
      {
        (*(void (**)(char *))(*(void *)v21 + 40))(v21);
      }
      v19 -= 32;
    }
    while (v19);
    goto LABEL_44;
  }
LABEL_45:
  if (v18 != v28) {
    free(v18);
  }
  uint64_t result = (uint64_t)v25;
  if (v25 == v24) {
    return (*(uint64_t (**)(void *))(v24[0] + 32))(v24);
  }
  if (v25) {
    return (*(uint64_t (**)(void))(*v25 + 40))();
  }
  return result;
}

void sub_1CB98473C(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  v48[8] = *MEMORY[0x1E4F143B8];
  int v46 = (long long *)v48;
  uint64_t v47 = 0x200000000;
  uint64_t v6 = *(void *)(*(void *)(*(void *)(*((void *)a2 + 1) + 24) + 32) + 40);
  sub_1CB986134((uint64_t)&v43, v6, *(void *)(a1 + 80), *(void *)(a1 + 88), (unsigned __int8 *)a2, 1, 0, 0, 0);
  if (*(unsigned char *)a2) {
    goto LABEL_2;
  }
  unsigned int v7 = *((_DWORD *)a2 + 1);
  if (v7 - 1 <= 0x3FFFFFFE)
  {
    uint64_t v8 = *(void *)(a1 + 80);
    int RegSizeInBits = *(_DWORD *)(*(void *)(v8 + 264)
                              + 24
                              * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(*(void *)(a1 + 88), v7, v8)+ 24)+ *(_DWORD *)(v8 + 272)* ((*(void *)(v8 + 248) - *(void *)(v8 + 240)) >> 3)));
  }
  else
  {
    int RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(*(void *)(a1 + 80), v7, v6);
  }
  if (RegSizeInBits == 32 || RegSizeInBits == 16)
  {
    long long v11 = a2[1];
    long long v38 = *a2;
    long long v39 = v11;
    sub_1CB985CA8(a1, (uint64_t)&v38, 0, v6);
    if (v47 >= HIDWORD(v47))
    {
      if (v46 > &v38 || &v46[2 * v47] <= &v38) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v12 = &v46[2 * v47];
    long long v13 = v39;
    *uint64_t v12 = v38;
    v12[1] = v13;
    uint64_t v14 = (v47 + 1);
    LODWORD(v47) = v14;
    LODWORD(v33) = 1;
    *((void *)&v33 + 1) = 0;
    *(void *)&long long v34 = 0;
    if (v14 >= HIDWORD(v47))
    {
      BOOL v29 = &v46[2 * v14] > &v33;
      if (v46 > &v33 || !v29) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    BOOL v15 = &v46[2 * v47];
    long long v16 = v34;
    *BOOL v15 = v33;
    v15[1] = v16;
    LODWORD(v47) = v47 + 1;
  }
  if (RegSizeInBits != 16 && RegSizeInBits != 32)
  {
LABEL_2:
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 144) = 0;
    goto LABEL_3;
  }
  uint64_t v17 = v46;
  long long v31 = *v46;
  long long v32 = v46[1];
  BOOL v18 = (char *)operator new(0x28uLL);
  *(void *)BOOL v18 = &unk_1F25EFF90;
  *(_OWORD *)(v18 + 8) = v31;
  *(_OWORD *)(v18 + 24) = v32;
  *((void *)&v39 + 1) = v18;
  uint64_t v35 = v37;
  uint64_t v36 = 0x200000000;
  uint64_t v19 = v47;
  if (v47)
  {
    if (v47 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v37, v17, 32 * v47);
    LODWORD(v36) = v19;
  }
  int v20 = operator new(0x58uLL);
  uint64_t v21 = v20;
  void *v20 = &unk_1F25EFFD8;
  v20[1] = v20 + 3;
  v20[2] = 0x200000000;
  if (v19)
  {
    if (v35 == v37)
    {
      if (v19 >= 3) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v20 + 3, v37, 32 * v19);
      *((_DWORD *)v21 + 4) = v19;
    }
    else
    {
      v20[1] = v35;
      int v30 = HIDWORD(v36);
      *((_DWORD *)v20 + 4) = v19;
      *((_DWORD *)v20 + 5) = v30;
      uint64_t v35 = v37;
      HIDWORD(v36) = 0;
    }
    LODWORD(v36) = 0;
  }
  v41[0] = v21;
  int v43 = v45;
  uint64_t v44 = 0x400000000;
  sub_1CB986BF0((uint64_t)&v43, (uint64_t)&v38, (uint64_t)&v42);
  *(void *)a3 = a3 + 16;
  *(void *)(a3 + 8) = 0x400000000;
  if (!v44)
  {
    *(unsigned char *)(a3 + 144) = 1;
LABEL_36:
    uint64_t v23 = v43;
    goto LABEL_37;
  }
  sub_1CB986D14((unsigned int *)a3, (unsigned int *)&v43);
  uint64_t v22 = v44;
  *(unsigned char *)(a3 + 144) = 1;
  uint64_t v23 = v43;
  if (v22)
  {
    uint64_t v24 = 32 * v22;
    uint64_t v25 = (char *)v43 - 32;
    do
    {
      uint64_t v26 = *(char **)&v25[v24 + 24];
      if (&v25[v24] == v26)
      {
        (*(void (**)(char *))(*(void *)&v25[v24] + 32))(&v25[v24]);
      }
      else if (v26)
      {
        (*(void (**)(char *))(*(void *)v26 + 40))(v26);
      }
      v24 -= 32;
    }
    while (v24);
    goto LABEL_36;
  }
LABEL_37:
  if (v23 != v45) {
    free(v23);
  }
  for (uint64_t i = 0; i != -8; i -= 4)
  {
    uint64_t v28 = (unsigned char *)v41[i];
    if (&v40[i * 8] == v28)
    {
      (*(void (**)(unsigned char *))(*(void *)&v40[i * 8] + 32))(&v40[i * 8]);
    }
    else if (v28)
    {
      (*(void (**)(unsigned char *))(*(void *)v28 + 40))(v28);
    }
  }
  if (v35 != v37) {
    free(v35);
  }
LABEL_3:
  if (v46 != (long long *)v48) {
    free(v46);
  }
}